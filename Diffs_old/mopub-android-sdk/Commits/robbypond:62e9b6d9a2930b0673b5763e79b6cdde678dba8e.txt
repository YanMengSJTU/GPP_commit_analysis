diff --git a/.gitignore b/.gitignore
index 7fc571d6..6932b28f 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,9 @@
+*.aar
+*.apk
+*.iml
+*.orig
+*.pyc
+*.swp
 .DS_Store
 .git.bak/
 .gradle/
@@ -6,11 +12,11 @@ ant_build/
 bin/
 build/
 classes/
-gen/
 gen-external-apklibs/
+gen/
+local.properties
 out/
 proguard_logs/
-tmp/
 target/
 *.apk
 *.aar
@@ -25,5 +31,6 @@ build
 *.pyc
 *.iml
 local.properties
+tmp/
 
 
diff --git a/CHANGELOG.md b/CHANGELOG.md
index e3cc0a38..0d032fb4 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,22 @@
+## Version 3.0.0 (September 30, 2014)
+
+  - **Location Settings are now SDK-wide**
+    - Calls to `MoPubView#setLocationAwareness` and `MoPubInterstial#setLocationAwareness` are
+    deprecated in favor of `MoPub#setLocationAwareness`
+    - Calls to `MoPubView#setLocationPrecision` and `MoPubInterstitial#setLocationPrecision` are
+    deprecated in favor of `MoPub#setLocationPrecision`
+    - Calls to any of these methods have the effect of setting location awareness and precision
+    globally for the SDK
+  - **Build target SDK is now API Level 19.** If you are building the MoPub SDK from source,
+  modify your dependencies to reference Android 4.4.2, API Level 19. This does not affect the
+  minimum device API level, which remains at API Level 9.
+  - **Source-level support for Gradle projects.** The SDK source now includes a build.gradle file
+   you can use to build source as part of your Gradle project.
+  - **The SDK now uses Play Services 5.0.89**
+  - **Bug fixes:**
+    - Millennial Interstitial caching now properly handles request failures
+    - Fixed bug preventing native ads from loading after a request failure
+
 ## Version 2.4.0 (August 28, 2014)
 
   - **Minimum Android version now at API Level 9.** To use the new SDK, your app must run on Android 2.3.1 (Version 9, Gingerbread) or higher.
diff --git a/README.md b/README.md
index 162330a4..14b884e0 100644
--- a/README.md
+++ b/README.md
@@ -27,15 +27,13 @@ Integration instructions are available on the [wiki](https://github.com/mopub/mo
 
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for details.
 
-  - **Minimum Android version now at API Level 9.** To use the new SDK, your app must run on Android 2.3.1 (Version 9, Gingerbread) or higher.
+  - **Location Settings are now SDK-wide**
 
-  - **Simplified APIs for inserting native ads.** See [Native Ads Integration](https://github.com/mopub/mopub-android-sdk/wiki/Native-Ads-Integration) for details.
+  - **Build target SDK is now API Level 19**
 
-  - **Automatic ad caching for smooth scrolling.** For native ads, the SDK will now automatically pre-load ads, resulting in smoother scrolling.
+  - **Source-level support for Gradle projects**
 
-  - **Performance improvements** The SDK now makes more efficient use of memory for image caching and avoids allocating temporary objects while scrolling, resulting in fewer garbage collections.
-
-  - **Sample app improvements.** An improved sample app allows saving ad unit IDs for testing.
+  - **The SDK now uses Play Services 5.0.89**
 
   - **Bug fixes**
 
diff --git a/build.gradle b/build.gradle
index 51910c09..a2ac2746 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,3 +1,4 @@
+<<<<<<< HEAD
 // Top-level build file where you can add configuration options common to all sub-projects/modules.
 
 apply plugin: 'com.github.ben-manes.versions'
@@ -10,4 +11,20 @@ buildscript {
         classpath 'org.codehaus.groovy:groovy-backports-compat23:2.4.0-beta-2'
         classpath 'com.github.ben-manes:gradle-versions-plugin:0.5-beta-6'
     }
-}
\ No newline at end of file
+}
+=======
+buildscript {
+    repositories {   
+        mavenCentral()
+    }
+
+    dependencies {
+        classpath 'com.android.tools.build:gradle:0.12.1+'
+        classpath 'org.robolectric:robolectric-gradle-plugin:0.12.+'
+    }
+}
+
+task wrapper(type: Wrapper) {
+    gradleVersion = '1.12'
+}
+>>>>>>> upstream/master
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
index f5a26c6a..a71e120c 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
@@ -19,7 +19,7 @@
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
 
 /*
- * Compatible with version 5.0.77 of the Google Play Services SDK.
+ * Compatible with version 5.0.89 of the Google Play Services SDK.
  */
 
 // Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
@@ -43,7 +43,6 @@ protected void loadBanner(
             final Map<String, Object> localExtras,
             final Map<String, String> serverExtras) {
         mBannerListener = customEventBannerListener;
-
         final String adUnitId;
         final int adWidth;
         final int adHeight;
@@ -71,7 +70,12 @@ protected void loadBanner(
 
         final AdRequest adRequest = new AdRequest.Builder().build();
 
-        mGoogleAdView.loadAd(adRequest);
+        try {
+            mGoogleAdView.loadAd(adRequest);
+        } catch (NoClassDefFoundError e) {
+            // This can be thrown by Play Services on Honeycomb.
+            mBannerListener.onBannerFailed(NETWORK_NO_FILL);
+        }
     }
 
     @Override
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
index 84d433e5..24146033 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
@@ -13,7 +13,7 @@
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
 
 /*
- * Compatible with version 5.0.77 of the Google Play Services SDK.
+ * Compatible with version 5.0.89 of the Google Play Services SDK.
  */
 
 // Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
@@ -35,7 +35,6 @@ protected void loadInterstitial(
             final Map<String, Object> localExtras,
             final Map<String, String> serverExtras) {
         mInterstitialListener = customEventInterstitialListener;
-
         final String adUnitId;
 
         if (extrasAreValid(serverExtras)) {
@@ -51,7 +50,12 @@ protected void loadInterstitial(
 
         final AdRequest adRequest = new AdRequest.Builder().build();
 
-        mGoogleInterstitialAd.loadAd(adRequest);
+        try {
+            mGoogleInterstitialAd.loadAd(adRequest);
+        } catch (NoClassDefFoundError e) {
+            // This can be thrown by Play Services on Honeycomb.
+            mInterstitialListener.onInterstitialFailed(NETWORK_NO_FILL);
+        }
     }
 
     @Override
diff --git a/extras/src/com/mopub/mobileads/MillennialBanner.java b/extras/src/com/mopub/mobileads/MillennialBanner.java
index cd49d93f..c0c44873 100644
--- a/extras/src/com/mopub/mobileads/MillennialBanner.java
+++ b/extras/src/com/mopub/mobileads/MillennialBanner.java
@@ -98,7 +98,11 @@ protected void loadBanner(final Context context, final CustomEventBannerListener
 
     @Override
     protected void onInvalidate() {
-        mMillennialAdView.setListener(null);
+        // mMillennialAdView can be null if loadBanner terminated prematurely (i.e. the associated
+        // serverExtras are invalid).
+        if (mMillennialAdView != null) {
+            mMillennialAdView.setListener(null);
+        }
     }
 
     private boolean extrasAreValid(final Map<String, String> serverExtras) {
diff --git a/extras/src/com/mopub/mobileads/MillennialInterstitial.java b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
index 4100951b..b93938c7 100644
--- a/extras/src/com/mopub/mobileads/MillennialInterstitial.java
+++ b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
@@ -35,7 +35,13 @@
 import android.content.Context;
 import android.location.Location;
 import android.util.Log;
-import com.millennialmedia.android.*;
+
+import com.millennialmedia.android.MMAd;
+import com.millennialmedia.android.MMException;
+import com.millennialmedia.android.MMInterstitial;
+import com.millennialmedia.android.MMRequest;
+import com.millennialmedia.android.MMSDK;
+import com.millennialmedia.android.RequestListener;
 
 import java.util.Map;
 
@@ -73,15 +79,9 @@ protected void loadInterstitial(final Context context, final CustomEventIntersti
 
         mMillennialInterstitial = new MMInterstitial(context);
         mMillennialInterstitial.setListener(new MillennialInterstitialRequestListener());
-
-        if (mMillennialInterstitial.isAdAvailable()) {
-            Log.d("MoPub", "Millennial interstitial ad already loaded.");
-            mInterstitialListener.onInterstitialLoaded();
-        } else {
-            mMillennialInterstitial.setMMRequest(new MMRequest());
-            mMillennialInterstitial.setApid(apid);
-            mMillennialInterstitial.fetch();
-        }
+        mMillennialInterstitial.setMMRequest(new MMRequest());
+        mMillennialInterstitial.setApid(apid);
+        mMillennialInterstitial.fetch();
     }
 
     @Override
@@ -95,7 +95,11 @@ protected void showInterstitial() {
 
     @Override
     protected void onInvalidate() {
-        mMillennialInterstitial.setListener(null);
+        // mMillennialInterstitial can be null if loadInterstitial terminated prematurely (i.e.
+        // the associated serverExtras are invalid).
+        if (mMillennialInterstitial != null) {
+            mMillennialInterstitial.setListener(null);
+        }
     }
 
     private boolean extrasAreValid(Map<String, String> serverExtras) {
@@ -123,15 +127,23 @@ public void requestCompleted(final MMAd mmAd) {
                 Log.d("MoPub", "Millennial interstitial ad loaded successfully.");
                 mInterstitialListener.onInterstitialLoaded();
             } else {
-                Log.d("MoPub", "Millennial interstitial ad failed to load.");
+                Log.d("MoPub", "Millennial interstitial request completed, but no ad was available.");
                 mInterstitialListener.onInterstitialFailed(NETWORK_INVALID_STATE);
             }
         }
 
         @Override
         public void requestFailed(final MMAd mmAd, final MMException e) {
-            Log.d("MoPub", "Millennial interstitial ad failed to load.");
-            mInterstitialListener.onInterstitialFailed(NETWORK_NO_FILL);
+            if (mMillennialInterstitial == null || e == null) {
+                mInterstitialListener.onInterstitialFailed(NETWORK_INVALID_STATE);
+            } else if (e.getCode() == MMException.CACHE_NOT_EMPTY && mMillennialInterstitial.isAdAvailable()) {
+                // requestFailed can be due to an ad already loaded or an ad failed to load.
+                Log.d("MoPub", "Millennial interstitial loaded successfully from cache.");
+                mInterstitialListener.onInterstitialLoaded();
+            } else {
+                Log.d("MoPub", "Millennial interstitial ad failed to load.");
+                mInterstitialListener.onInterstitialFailed(NETWORK_NO_FILL);
+            }
         }
 
         @Override
diff --git a/extras/src/com/mopub/nativeads/InMobiNative.java b/extras/src/com/mopub/nativeads/InMobiNative.java
index 52fc7cf3..82d07ea0 100644
--- a/extras/src/com/mopub/nativeads/InMobiNative.java
+++ b/extras/src/com/mopub/nativeads/InMobiNative.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 import android.content.Context;
+import android.util.Log;
 import android.view.View;
 import android.view.ViewGroup;
 
@@ -9,7 +10,6 @@
 import com.inmobi.monetization.IMErrorCode;
 import com.inmobi.monetization.IMNative;
 import com.inmobi.monetization.IMNativeListener;
-import com.mopub.common.util.MoPubLog;
 
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -167,7 +167,7 @@ private boolean extrasAreValid(final Map<String, String> serverExtras) {
             try {
                 setStarRating(parseDouble(jsonObject.opt(RATING)));
             } catch (ClassCastException e) {
-                MoPubLog.d("Unable to set invalid star rating for InMobi Native.");
+                Log.d("MoPub", "Unable to set invalid star rating for InMobi Native.");
             }
             setImpressionMinTimeViewed(IMPRESSION_MIN_TIME_VIEWED);
         }
@@ -179,7 +179,7 @@ public void prepareImpression(final View view) {
             } else if (view != null && view.getParent() instanceof ViewGroup) {
                 mImNative.attachToView((ViewGroup) view.getParent());
             } else {
-                MoPubLog.e("InMobi did not receive ViewGroup to attachToView, unable to record impressions");
+                Log.e("MoPub", "InMobi did not receive ViewGroup to attachToView, unable to record impressions");
             }
         }
 
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 515cbdcc..a9dad0da 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1 @@
-#Wed Jun 25 19:24:26 EDT 2014
-distributionBase=GRADLE_USER_HOME
-distributionPath=wrapper/dists
-zipStoreBase=GRADLE_USER_HOME
-zipStorePath=wrapper/dists
 distributionUrl=http\://services.gradle.org/distributions/gradle-1.12-all.zip
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
new file mode 100644
index 00000000..cefeb8b7
--- /dev/null
+++ b/mopub-sample/build.gradle
@@ -0,0 +1,42 @@
+apply plugin: 'com.android.application'
+
+group = 'com.mopub'
+
+description = '''MoPub SDK'''
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion '19.1.0'
+
+    defaultConfig {
+        versionCode 1
+        versionName "2.3"
+        minSdkVersion 9
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src/main']
+            resources.srcDirs = ['src/main']
+            aidl.srcDirs = ['src/main']
+            renderscript.srcDirs = ['src/main']
+            res.srcDirs = ['res']
+            assets.srcDirs = ['assets']
+        }
+
+        androidTest.setRoot('src/test')
+    }
+
+    // Note: You will also need a local.properties file to set the location of the SDK in the same 
+    // way that the existing SDK requires, using the sdk.dir property.
+    // Alternatively, you can set an environment variable called ANDROID_HOME. There is no 
+    // difference between the two methods, you can use the one you prefer.
+}
+
+dependencies {
+    compile 'com.android.support:support-v4:19.1.+'
+    compile 'com.google.android.gms:play-services:5.0.89'
+    compile project(':mopub-sdk')
+}
diff --git a/mopub-sample/pom.xml b/mopub-sample/pom.xml
index 4196e85f..a1d02f01 100644
--- a/mopub-sample/pom.xml
+++ b/mopub-sample/pom.xml
@@ -40,7 +40,7 @@
         <dependency>
             <groupId>com.google.android.gms</groupId>
             <artifactId>play-services</artifactId>
-            <version>5.2.08</version>
+            <version>5.0.89</version>
             <type>aar</type>
         </dependency>
 
@@ -91,7 +91,7 @@
 
         <dependency> <groupId>com.google.android</groupId>
             <artifactId>android</artifactId>
-            <version>4.1.2</version>
+            <version>4.4.2</version>
             <scope>provided</scope>
         </dependency>
     </dependencies>
@@ -115,7 +115,7 @@
                 <configuration>
                     <sdk>
                         <!-- platform or api level (api level 4 = platform 1.6)-->
-                        <platform>16</platform>
+                        <platform>19</platform>
                     </sdk>
                     <undeployBeforeDeploy>true</undeployBeforeDeploy>
                 </configuration>
diff --git a/mopub-sample/project.properties b/mopub-sample/project.properties
index 41c4563e..d8ac5433 100644
--- a/mopub-sample/project.properties
+++ b/mopub-sample/project.properties
@@ -8,6 +8,6 @@
 # project structure.
 
 # Project target.
-target=android-16
+target=android-19
 android.library.reference.1=../mopub-sdk
 
diff --git a/mopub-sample/res/layout/native_ad_row.xml b/mopub-sample/res/layout/native_ad_list_item.xml
similarity index 94%
rename from mopub-sample/res/layout/native_ad_row.xml
rename to mopub-sample/res/layout/native_ad_list_item.xml
index 33173d89..47528603 100644
--- a/mopub-sample/res/layout/native_ad_row.xml
+++ b/mopub-sample/res/layout/native_ad_list_item.xml
@@ -7,7 +7,7 @@
     <ImageView android:id="@+id/native_icon_image"
         android:layout_width="64dp"
         android:layout_height="64dp"
-        android:background="#FFFFFF"
+        android:background="@null"
         android:layout_alignParentLeft="true"
         android:layout_alignParentTop="true"
         android:layout_marginTop="10dp"
@@ -37,13 +37,13 @@
     <ImageView android:id="@+id/native_main_image"
         android:layout_width="match_parent"
         android:layout_height="@dimen/native_main_image_height"
-        android:adjustViewBounds="true"
+        android:background="@null"
         android:layout_marginTop="10dp"
         android:layout_marginLeft="10dp"
         android:layout_marginRight="10dp"
         android:layout_below="@+id/native_text"
         android:layout_alignParentLeft="true"
-        android:contentDescription="@string/native_main_image" 
+        android:contentDescription="@string/native_main_image"
         android:scaleType="centerCrop"/>
 
     <Button
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
index 7dc619c3..d6063c29 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
@@ -5,7 +5,7 @@
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
index 75bfc06b..d655656c 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
@@ -20,7 +20,7 @@
 import android.widget.Toast;
 
 import com.mopub.common.MoPub;
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
index 12444978..f2ba89bc 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
@@ -4,6 +4,9 @@
 import android.support.v4.app.FragmentActivity;
 import android.support.v4.app.FragmentManager;
 
+import com.mopub.common.MoPub;
+
+
 public class MoPubSampleActivity extends FragmentActivity {
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -14,6 +17,10 @@ protected void onCreate(Bundle savedInstanceState) {
             return;
         }
 
+        // Set location awareness and precision globally for your app:
+        MoPub.setLocationAwareness(MoPub.LocationAwareness.TRUNCATED);
+        MoPub.setLocationPrecision(4);
+
         if (findViewById(R.id.fragment_container) != null) {
             final MoPubListFragment listFragment = new MoPubListFragment();
             listFragment.setArguments(getIntent().getExtras());
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
index cd8a1a74..ede4745c 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
@@ -70,14 +70,13 @@ public void onClick(View view) {
         views.mAdUnitIdView.setText(adUnitId);
         mViewPager = (ViewPager) view.findViewById(R.id.gallery_pager);
         mStreamAdPlacer = new MoPubStreamAdPlacer(getActivity(),
-                MoPubNativeAdPositioning.newBuilder()
-                        .addFixedPosition(1)
+                MoPubNativeAdPositioning.clientPositioning()
                         .addFixedPosition(4)
+                        .addFixedPosition(1)
                         .enableRepeatingPositions(3)
-                        .build()
         );
         final MoPubNativeAdRenderer adRenderer = new MoPubNativeAdRenderer(
-                new ViewBinder.Builder(R.layout.native_ad_row)
+                new ViewBinder.Builder(R.layout.native_ad_list_item)
                         .titleId(R.id.native_title)
                         .textId(R.id.native_text)
                         .mainImageId(R.id.native_main_image)
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
index d6493288..ba042047 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
@@ -71,15 +71,14 @@ public void onClick(View view) {
 
         // Create an ad adapter with ads in positions 0, 4, and every 10 places thereafter.
         // This adapter will be used in place of the original adapter for the ListView.
-        mAdAdapter = new MoPubAdAdapter(getActivity(), adapter, MoPubNativeAdPositioning.newBuilder()
+        mAdAdapter = new MoPubAdAdapter(getActivity(), adapter, MoPubNativeAdPositioning.clientPositioning()
                 .addFixedPosition(0)
                 .addFixedPosition(4)
-                .enableRepeatingPositions(10)
-                .build());
+                .enableRepeatingPositions(10));
 
         // Set up an renderer that knows how to put ad data in an ad view.
         final MoPubNativeAdRenderer adRenderer = new MoPubNativeAdRenderer(
-                new ViewBinder.Builder(R.layout.native_ad_row)
+                new ViewBinder.Builder(R.layout.native_ad_list_item)
                         .titleId(R.id.native_title)
                         .textId(R.id.native_text)
                         .mainImageId(R.id.native_main_image)
diff --git a/mopub-sdk/AndroidManifest.xml b/mopub-sdk/AndroidManifest.xml
index c7cfe7d7..22ac7cb1 100644
--- a/mopub-sdk/AndroidManifest.xml
+++ b/mopub-sdk/AndroidManifest.xml
@@ -3,5 +3,7 @@
 		package="com.mopub.mobileads"
 		android:versionCode="1"
 		android:versionName="1.0">
-	<uses-sdk android:minSdkVersion="9"/>
+	<uses-sdk
+        android:minSdkVersion="9"
+        android:targetSdkVersion="19"/>
 </manifest>
\ No newline at end of file
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index ba7725b4..a97125d2 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -28,4 +28,4 @@ dependencies {
 
 apply plugin: 'maven'
 
-apply from: 'https://raw.githubusercontent.com/robbypond/gradle-mvn-push/master/gradle-mvn-push.gradle'
+apply from: 'https://raw.githubusercontent.com/robbypond/gradle-mvn-push/master/gradle-mvn-push.gradle'
\ No newline at end of file
diff --git a/mopub-sdk/etc/mraid.js b/mopub-sdk/etc/mraid.js
index 443df6ff..1dff72b6 100644
--- a/mopub-sdk/etc/mraid.js
+++ b/mopub-sdk/etc/mraid.js
@@ -17,6 +17,9 @@
   // Establish the root mraidbridge object.
   var mraidbridge = window.mraidbridge = {};
 
+  // native SDK is ready to process mraid commands.
+  var nativeSDKFiredReady = false;
+
   // Listeners for bridge events.
   var listeners = {};
 
@@ -29,6 +32,7 @@
   //////////////////////////////////////////////////////////////////////////////////////////////////
 
   mraidbridge.fireReadyEvent = function() {
+    nativeSDKFiredReady = true;
     mraidbridge.fireEvent('ready');
   };
 
@@ -63,6 +67,12 @@
   };
 
   mraidbridge.executeNativeCall = function(command) {
+    if (!nativeSDKFiredReady) {
+        console.log('rejecting ' + command + ' because mraid is not ready');
+        mraidbridge.fireErrorEvent('mraid is not ready', command);
+        return;
+    }
+
     var call = 'mraid://' + command;
 
     var key, value;
diff --git a/mopub-sdk/gradle/wrapper/gradle-wrapper.jar b/mopub-sdk/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 00000000..3c7abdf1
Binary files /dev/null and b/mopub-sdk/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/mopub-sdk/gradle/wrapper/gradle-wrapper.properties b/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 00000000..d27e87ae
--- /dev/null
+++ b/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Thu Mar 20 15:07:53 PDT 2014
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=http\://services.gradle.org/distributions/gradle-1.11-bin.zip
diff --git a/mopub-sdk/gradlew b/mopub-sdk/gradlew
new file mode 100755
index 00000000..91a7e269
--- /dev/null
+++ b/mopub-sdk/gradlew
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/mopub-sdk/gradlew.bat b/mopub-sdk/gradlew.bat
new file mode 100644
index 00000000..8a0b282a
--- /dev/null
+++ b/mopub-sdk/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/mopub-sdk/pom.xml b/mopub-sdk/pom.xml
index f8f559b5..6b8156e6 100644
--- a/mopub-sdk/pom.xml
+++ b/mopub-sdk/pom.xml
@@ -68,7 +68,7 @@
         <dependency>
             <groupId>com.google.android</groupId>
             <artifactId>android</artifactId>
-            <version>4.1.2</version>
+            <version>4.4.2</version>
             <scope>provided</scope>
         </dependency>
     </dependencies>
@@ -92,7 +92,7 @@
                 <configuration>
                     <sdk>
                         <!-- platform or api level (api level 4 = platform 1.6)-->
-                        <platform>16</platform>
+                        <platform>19</platform>
                     </sdk>
                     <undeployBeforeDeploy>true</undeployBeforeDeploy>
                 </configuration>
diff --git a/mopub-sdk/proguard-project.txt b/mopub-sdk/proguard.txt
similarity index 92%
rename from mopub-sdk/proguard-project.txt
rename to mopub-sdk/proguard.txt
index 33978243..17b5b82f 100644
--- a/mopub-sdk/proguard-project.txt
+++ b/mopub-sdk/proguard.txt
@@ -5,7 +5,6 @@
 # Keep public classes and methods.
 -keepclassmembers class com.mopub.** { public *; }
 -keep public class com.mopub.**
--keep public class android.webkit.JavascriptInterface {}
 
 # Explicitly keep any custom event classes in any package.
 -keep class * extends com.mopub.mobileads.CustomEventBanner {}
diff --git a/mopub-sample/default.properties b/mopub-sdk/project.properties
similarity index 69%
rename from mopub-sample/default.properties
rename to mopub-sdk/project.properties
index d9bf8c4a..8e4bc5fd 100644
--- a/mopub-sample/default.properties
+++ b/mopub-sdk/project.properties
@@ -4,9 +4,9 @@
 # This file must be checked in Version Control Systems.
 #
 # To customize properties used by the Ant build system use,
-# "build.properties", and override values to adapt the script to your
+# "ant.properties", and override values to adapt the script to your
 # project structure.
 
 # Project target.
-target=android-4
-android.library.reference.1=../sdk
+target=android-19
+android.library=true
diff --git a/mopub-sdk/settings.gradle b/mopub-sdk/settings.gradle
new file mode 100644
index 00000000..b44b682c
--- /dev/null
+++ b/mopub-sdk/settings.gradle
@@ -0,0 +1 @@
+rootProject.name = 'mopub-sdk'
diff --git a/mopub-sdk/src/main/java/android/webkit/JavascriptInterface.java b/mopub-sdk/src/main/java/android/webkit/JavascriptInterface.java
deleted file mode 100644
index 5c490a27..00000000
--- a/mopub-sdk/src/main/java/android/webkit/JavascriptInterface.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package android.webkit;
-
-/*
- * Starting with API 17, calls to WebView#addJavascriptInterface must be marked with a
- * @JavascriptInterface annotation. Unfortunately, the annotation itself is only available on API
- * 17+, so we cheat by making a copy for our own use.
- *
- * http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)
- */
-@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
-@java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD})
-public @interface JavascriptInterface {
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java
index 18ff7ab2..77062783 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java
@@ -33,44 +33,16 @@
 package com.mopub.common;
 
 import android.content.Context;
-import android.content.res.Configuration;
 import android.location.Location;
-import android.net.ConnectivityManager;
-import android.net.NetworkInfo;
-import android.telephony.TelephonyManager;
 
-import com.mopub.common.util.DateAndTime;
 import com.mopub.common.util.IntentUtils;
 
-import java.text.SimpleDateFormat;
-
-import static android.Manifest.permission.ACCESS_NETWORK_STATE;
-import static android.content.pm.PackageManager.PERMISSION_GRANTED;
-import static android.net.ConnectivityManager.TYPE_MOBILE;
-import static android.net.ConnectivityManager.TYPE_WIFI;
-import static com.mopub.common.AdUrlGenerator.MoPubNetworkType.ETHERNET;
-import static com.mopub.common.AdUrlGenerator.MoPubNetworkType.MOBILE;
-import static com.mopub.common.AdUrlGenerator.MoPubNetworkType.UNKNOWN;
-import static com.mopub.common.AdUrlGenerator.MoPubNetworkType.WIFI;
+import static com.mopub.common.ClientMetadata.MoPubNetworkType;
 
 public abstract class AdUrlGenerator extends BaseUrlGenerator {
     private static TwitterAppInstalledStatus sTwitterAppInstalledStatus = TwitterAppInstalledStatus.UNKNOWN;
-    public static final String DEVICE_ORIENTATION_PORTRAIT = "p";
-    public static final String DEVICE_ORIENTATION_LANDSCAPE = "l";
-    public static final String DEVICE_ORIENTATION_SQUARE = "s";
-    public static final String DEVICE_ORIENTATION_UNKNOWN = "u";
-
-    // From ConnectivityManager
-    public static final int TYPE_DUMMY = 0x8;
-    public static final int TYPE_ETHERNET = 0x9;
-    public static final int TYPE_MOBILE_DUN = 0x4;
-    public static final int TYPE_MOBILE_HIPRI = 0x5;
-    public static final int TYPE_MOBILE_MMS = 0x2;
-    public static final int TYPE_MOBILE_SUPL = 0x3;
 
     protected Context mContext;
-    protected TelephonyManager mTelephonyManager;
-    protected ConnectivityManager mConnectivityManager;
     protected String mAdUnitId;
     protected String mKeywords;
     protected Location mLocation;
@@ -81,22 +53,8 @@
         INSTALLED,
     }
 
-    public static enum MoPubNetworkType {
-        UNKNOWN,
-        ETHERNET,
-        WIFI,
-        MOBILE;
-
-        @Override
-        public String toString() {
-            return Integer.toString(ordinal());
-        }
-    }
-
     public AdUrlGenerator(Context context) {
         mContext = context;
-        mTelephonyManager = (TelephonyManager) mContext.getSystemService(Context.TELEPHONY_SERVICE);
-        mConnectivityManager = (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
     }
 
     public AdUrlGenerator withAdUnitId(String adUnitId) {
@@ -137,16 +95,8 @@ protected void setTimezone(String timeZoneOffsetString) {
         addParam("z", timeZoneOffsetString);
     }
 
-    protected void setOrientation(int orientation) {
-        String orString = DEVICE_ORIENTATION_UNKNOWN;
-        if (orientation == Configuration.ORIENTATION_PORTRAIT) {
-            orString = DEVICE_ORIENTATION_PORTRAIT;
-        } else if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
-            orString = DEVICE_ORIENTATION_LANDSCAPE;
-        } else if (orientation == Configuration.ORIENTATION_SQUARE) {
-            orString = DEVICE_ORIENTATION_SQUARE;
-        }
-        addParam("o", orString);
+    protected void setOrientation(String orientation) {
+        addParam("o", orientation);
     }
 
     protected void setDensity(float density) {
@@ -175,56 +125,18 @@ protected void setCarrierName(String networkOperatorName) {
         addParam("cn", networkOperatorName);
     }
 
-    protected void setNetworkType(int type) {
-        switch(type) {
-            case TYPE_ETHERNET:
-                addParam("ct", ETHERNET);
-                break;
-            case TYPE_WIFI:
-                addParam("ct", WIFI);
-                break;
-            case TYPE_MOBILE:
-            case TYPE_MOBILE_DUN:
-            case TYPE_MOBILE_HIPRI:
-            case TYPE_MOBILE_MMS:
-            case TYPE_MOBILE_SUPL:
-                addParam("ct", MOBILE);
-                break;
-            default:
-                addParam("ct", UNKNOWN);
-        }
+    protected void setNetworkType(MoPubNetworkType networkType) {
+        addParam("ct", networkType);
     }
 
     private void addParam(String key, MoPubNetworkType value) {
         addParam(key, value.toString());
     }
-    protected String getNetworkOperator() {
-        String networkOperator = mTelephonyManager.getNetworkOperator();
-        if (mTelephonyManager.getPhoneType() == TelephonyManager.PHONE_TYPE_CDMA &&
-                mTelephonyManager.getSimState() == TelephonyManager.SIM_STATE_READY) {
-            networkOperator = mTelephonyManager.getSimOperator();
-        }
-        return networkOperator;
-    }
 
     private int mncPortionLength(String networkOperator) {
         return Math.min(3, networkOperator.length());
     }
 
-    protected static String getTimeZoneOffsetString() {
-        SimpleDateFormat format = new SimpleDateFormat("Z");
-        format.setTimeZone(DateAndTime.localTimeZone());
-        return format.format(DateAndTime.now());
-    }
-
-    protected int getActiveNetworkType() {
-        if (mContext.checkCallingOrSelfPermission(ACCESS_NETWORK_STATE) == PERMISSION_GRANTED) {
-            NetworkInfo activeNetworkInfo = mConnectivityManager.getActiveNetworkInfo();
-            return activeNetworkInfo != null ? activeNetworkInfo.getType() : TYPE_DUMMY;
-        }
-        return TYPE_DUMMY;
-    }
-
     protected void setTwitterAppInstalledFlag() {
         if (sTwitterAppInstalledStatus == TwitterAppInstalledStatus.UNKNOWN) {
             sTwitterAppInstalledStatus = getTwitterAppInstallStatus();
diff --git a/mopub-sdk/src/main/java/com/mopub/common/BaseUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/common/BaseUrlGenerator.java
index 9fec434f..4b025b8d 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/BaseUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/BaseUrlGenerator.java
@@ -32,12 +32,7 @@
 
 package com.mopub.common;
 
-import android.content.Context;
-import android.content.pm.PackageInfo;
 import android.net.Uri;
-import android.provider.Settings;
-
-import com.mopub.common.util.Utils;
 
 import static com.mopub.common.util.Strings.isEmpty;
 
@@ -113,30 +108,4 @@ protected void setDoNotTrack(boolean dnt) {
     protected void setUdid(String udid) {
         addParam("udid", udid);
     }
-
-    protected String getUdidFromContext(Context context) {
-        /*
-         * try to use the android id from Google Play Services if available
-         * if not fall back on the device id
-         */
-        final String androidId = GpsHelper.getAdvertisingId(context);
-
-        if (androidId != null) {
-            return IFA_PREFIX + androidId;
-        } else {
-            String deviceId = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);
-            deviceId = (deviceId == null) ? "" : Utils.sha1(deviceId);
-            return SHA_PREFIX + deviceId;
-        }
-    }
-
-    protected String getAppVersionFromContext(Context context) {
-        try {
-            String packageName = context.getPackageName();
-            PackageInfo packageInfo = context.getPackageManager().getPackageInfo(packageName, 0);
-            return packageInfo.versionName;
-        } catch (Exception exception) {
-            return null;
-        }
-    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/CacheService.java b/mopub-sdk/src/main/java/com/mopub/common/CacheService.java
index b61a62ba..fcc5fad2 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/CacheService.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/CacheService.java
@@ -6,7 +6,7 @@
 import android.support.v4.util.LruCache;
 
 import com.mopub.common.util.DeviceUtils;
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Streams;
 import com.mopub.common.util.Utils;
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java b/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java
new file mode 100644
index 00000000..d3189e99
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java
@@ -0,0 +1,287 @@
+package com.mopub.common;
+
+import android.content.Context;
+import android.content.pm.PackageInfo;
+import android.content.res.Configuration;
+import android.net.ConnectivityManager;
+import android.net.NetworkInfo;
+import android.os.Build;
+import android.provider.Settings;
+import android.telephony.TelephonyManager;
+
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Utils;
+
+import static android.Manifest.permission.ACCESS_NETWORK_STATE;
+import static android.content.pm.PackageManager.PERMISSION_GRANTED;
+
+/**
+ * Singleton that caches Client objects so they will be available to background threads.
+ */
+public class ClientMetadata {
+    // Network type constant defined after API 9:
+    private static final int TYPE_ETHERNET = 9;
+
+    private static final String DEVICE_ORIENTATION_PORTRAIT = "p";
+    private static final String DEVICE_ORIENTATION_LANDSCAPE = "l";
+    private static final String DEVICE_ORIENTATION_SQUARE = "s";
+    private static final String DEVICE_ORIENTATION_UNKNOWN = "u";
+    private static final String IFA_PREFIX = "ifa:";
+    private static final String SHA_PREFIX = "sha:";
+    private static final int UNKNOWN_NETWORK = -1;
+
+    private static volatile ClientMetadata sInstance;
+
+    private String mNetworkOperator;
+    private String mIsoCountryCode;
+    private String mNetworkOperatorName;
+    private String mUdid;
+
+    /**
+     * Returns the singleton ClientMetadata object, using the context to obtain data if necessary.
+     */
+    public static ClientMetadata getInstance(Context context) {
+        // Use a local variable so we can reduce accesses of the volatile field.
+        ClientMetadata result = sInstance;
+        if (result == null) {
+            synchronized (ClientMetadata.class) {
+                result = sInstance;
+                if (result == null) {
+                    result = new ClientMetadata(context);
+                    sInstance = result;
+                }
+            }
+        }
+        return result;
+    }
+
+    /**
+     * Can be used by background threads and other objects without a context to attempt to get
+     * ClientMetadata. If the object has never been referenced from a thread with a context,
+     * this will return null.
+     */
+    public static ClientMetadata getInstance() {
+        ClientMetadata result = sInstance;
+        if (result == null) {
+            // If it's being initialized in another thread, wait for the lock.
+            synchronized (ClientMetadata.class) {
+                result = sInstance;
+            }
+        }
+
+        return result;
+    }
+
+    public static enum MoPubNetworkType {
+        UNKNOWN(0),
+        ETHERNET(1),
+        WIFI(2),
+        MOBILE(3);
+
+        private final int mId;
+
+        private MoPubNetworkType(int id) {
+            mId = id;
+        }
+
+        @Override
+        public String toString() {
+            return Integer.toString(mId);
+        }
+
+        private static MoPubNetworkType fromAndroidNetworkType(int type) {
+            switch(type) {
+                case TYPE_ETHERNET:
+                    return ETHERNET;
+                case ConnectivityManager.TYPE_WIFI:
+                    return WIFI;
+                case ConnectivityManager.TYPE_MOBILE:
+                case ConnectivityManager.TYPE_MOBILE_DUN:
+                case ConnectivityManager.TYPE_MOBILE_HIPRI:
+                case ConnectivityManager.TYPE_MOBILE_MMS:
+                case ConnectivityManager.TYPE_MOBILE_SUPL:
+                    return MOBILE;
+                default:
+                    return UNKNOWN;
+            }
+        }
+    }
+
+    // Cached client metadata used for generating URLs and events.
+    private final String mDeviceManufacturer;
+    private final String mDeviceModel;
+    private final String mDeviceProduct;
+    private final String mSdkVersion;
+    private final String mAppVersion;
+    private final Context mContext;
+    private final ConnectivityManager mConnectivityManager;
+
+    private ClientMetadata(Context context) {
+        mContext = context.getApplicationContext();
+        mConnectivityManager =
+                (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
+        mDeviceManufacturer = Build.MANUFACTURER;
+        mDeviceModel = Build.MODEL;
+        mDeviceProduct = Build.PRODUCT;
+        mSdkVersion = MoPub.SDK_VERSION;
+
+        // Cache context items that don't change:
+        mAppVersion = getAppVersionFromContext(mContext);
+
+        final TelephonyManager telephonyManager =
+                (TelephonyManager) mContext.getSystemService(Context.TELEPHONY_SERVICE);
+
+        mNetworkOperator = telephonyManager.getNetworkOperator();
+        if (telephonyManager.getPhoneType() == TelephonyManager.PHONE_TYPE_CDMA &&
+                telephonyManager.getSimState() == TelephonyManager.SIM_STATE_READY) {
+            mNetworkOperator = telephonyManager.getSimOperator();
+        }
+
+        mIsoCountryCode = telephonyManager.getNetworkCountryIso();
+        try {
+            // Some Lenovo devices require READ_PHONE_STATE here.
+            mNetworkOperatorName = telephonyManager.getNetworkOperatorName();
+        } catch (SecurityException e) {
+            mNetworkOperatorName = null;
+        }
+
+        mUdid = getUdidFromContext(mContext);
+    }
+
+    private static String getAppVersionFromContext(Context context) {
+        try {
+            final String packageName = context.getPackageName();
+            final PackageInfo packageInfo =
+                    context.getPackageManager().getPackageInfo(packageName, 0);
+            return packageInfo.versionName;
+        } catch (Exception exception) {
+            MoPubLog.d("Failed to retrieve PackageInfo#versionName.");
+            return null;
+        }
+    }
+
+    private static String getUdidFromContext(Context context) {
+        // try to use the android id from Google Play Services if available
+        // if not fall back on the device id
+        final String androidId = GpsHelper.getAdvertisingId(context);
+
+        if (androidId != null) {
+            return IFA_PREFIX + androidId;
+        } else {
+            String deviceId = Settings.Secure.getString(context.getContentResolver(),
+                    Settings.Secure.ANDROID_ID);
+            deviceId = (deviceId == null) ? "" : Utils.sha1(deviceId);
+            return SHA_PREFIX + deviceId;
+        }
+    }
+
+    /**
+     * @return the display orientation. Useful when generating ad requests.
+     */
+    public String getOrientationString() {
+        final int orientationInt = mContext.getResources().getConfiguration().orientation;
+        String orientation = DEVICE_ORIENTATION_UNKNOWN;
+        if (orientationInt == Configuration.ORIENTATION_PORTRAIT) {
+            orientation = DEVICE_ORIENTATION_PORTRAIT;
+        } else if (orientationInt == Configuration.ORIENTATION_LANDSCAPE) {
+            orientation = DEVICE_ORIENTATION_LANDSCAPE;
+        } else if (orientationInt == Configuration.ORIENTATION_SQUARE) {
+            orientation = DEVICE_ORIENTATION_SQUARE;
+        }
+        return orientation;
+    }
+
+
+    public MoPubNetworkType getActiveNetworkType() {
+        int networkType = UNKNOWN_NETWORK;
+        if (mContext.checkCallingOrSelfPermission(ACCESS_NETWORK_STATE) == PERMISSION_GRANTED) {
+            NetworkInfo activeNetworkInfo = mConnectivityManager.getActiveNetworkInfo();
+            networkType = activeNetworkInfo != null
+                    ? activeNetworkInfo.getType() : UNKNOWN_NETWORK;
+        }
+        return MoPubNetworkType.fromAndroidNetworkType(networkType);
+    }
+
+
+    /**
+     * Get the logical density of the display as in {@link android.util.DisplayMetrics#density}
+     */
+    public float getDensity() {
+        return mContext.getResources().getDisplayMetrics().density;
+    }
+
+    /**
+     * @return whether doNotTrack is enabled in the advertising settings.
+     */
+    public boolean getDoNoTrack() {
+        return GpsHelper.isLimitAdTrackingEnabled(mContext);
+    }
+
+    /**
+     * @return the network operator.
+     */
+    public String getNetworkOperator() {
+        return mNetworkOperator;
+    }
+
+    /**
+     * @return the country code of the device.
+     */
+    public String getIsoCountryCode() {
+        return mIsoCountryCode;
+    }
+
+    /**
+     * @return the network operator name.
+     */
+    public String getNetworkOperatorName() {
+        return mNetworkOperatorName;
+    }
+
+    /**
+     * @return the Google Play advertising ID or the device ID if Play Services are not available.
+     */
+    public String getUdid() {
+        return mUdid;
+    }
+
+    /**
+     * @return the device manufacturer.
+     */
+    public String getDeviceManufacturer() {
+        return mDeviceManufacturer;
+    }
+
+    /**
+     * @return the device model identifier.
+     */
+    public String getDeviceModel() {
+        return mDeviceModel;
+    }
+
+    /**
+     * @return the device product identifier.
+     */
+    public String getDeviceProduct() {
+        return mDeviceProduct;
+    }
+
+    /**
+     * @return the MoPub SDK Version.
+     */
+    public String getSdkVersion() {
+        return mSdkVersion;
+    }
+
+    /**
+     * @return the version of the application the SDK is included in.
+     */
+    public String getAppVersion() {
+        return mAppVersion;
+    }
+
+    @VisibleForTesting
+    public static synchronized void clearForTesting() {
+        sInstance = null;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DownloadTask.java b/mopub-sdk/src/main/java/com/mopub/common/DownloadTask.java
index 702da94c..ce1e022a 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/DownloadTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/DownloadTask.java
@@ -3,7 +3,7 @@
 import android.net.http.AndroidHttpClient;
 import android.os.AsyncTask;
 
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.HttpUriRequest;
diff --git a/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java b/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
index e8a6ceeb..9dfaedee 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
@@ -6,7 +6,7 @@
 
 import com.mopub.common.factories.MethodBuilderFactory;
 import com.mopub.common.util.AsyncTasks;
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 
 import java.lang.ref.WeakReference;
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java b/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java
index 45423e77..88e4f7bd 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java
@@ -8,7 +8,7 @@
 
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.DeviceUtils;
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.HttpGet;
diff --git a/mopub-sdk/src/main/java/com/mopub/common/LocationService.java b/mopub-sdk/src/main/java/com/mopub/common/LocationService.java
index eff1bb6a..52b2c67b 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/LocationService.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/LocationService.java
@@ -4,12 +4,42 @@
 import android.location.Location;
 import android.location.LocationManager;
 
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 
 import java.math.BigDecimal;
 
 public class LocationService {
-    public static enum LocationAwareness { NORMAL, TRUNCATED, DISABLED };
+    public static enum LocationAwareness {
+        NORMAL, TRUNCATED, DISABLED;
+
+        // These deprecated methods are only used to support the deprecated methods
+        // MoPubView#setLocationAwareness, MoPubInterstitial#setLocationAwareness
+        // and should not be used elsewhere. Unless interacting with those methods, use
+        // the type MoPub.LocationAwareness
+
+        @Deprecated
+        public MoPub.LocationAwareness getNewLocationAwareness() {
+            if (this == TRUNCATED) {
+                return MoPub.LocationAwareness.TRUNCATED;
+            } else if (this == DISABLED) {
+                return MoPub.LocationAwareness.DISABLED;
+            } else {
+                return MoPub.LocationAwareness.NORMAL;
+            }
+        }
+
+        @Deprecated
+        public static LocationAwareness
+                fromMoPubLocationAwareness(MoPub.LocationAwareness awareness) {
+            if (awareness == MoPub.LocationAwareness.DISABLED) {
+                return DISABLED;
+            } else if (awareness == MoPub.LocationAwareness.TRUNCATED) {
+                return TRUNCATED;
+            } else {
+                return NORMAL;
+            }
+        }
+    }
 
     /*
      * Returns the last known location of the device using its GPS and network location providers.
@@ -19,11 +49,11 @@
      * - Location awareness is disabled in the parent MoPubView
      */
     public static Location getLastKnownLocation(final Context context,
-                                                final int locationPrecision,
-                                                final LocationAwareness locationAwareness) {
+            final int locationPrecision,
+            final MoPub.LocationAwareness locationLocationAwareness) {
         Location result;
 
-        if (locationAwareness == LocationAwareness.DISABLED) {
+        if (locationLocationAwareness == MoPub.LocationAwareness.DISABLED) {
             return null;
         }
 
@@ -48,16 +78,20 @@ public static Location getLastKnownLocation(final Context context,
 
         if (gpsLocation == null && networkLocation == null) {
             return null;
+        } else if (gpsLocation != null && networkLocation != null) {
+            if (gpsLocation.getTime() > networkLocation.getTime()) {
+                result = gpsLocation;
+            } else {
+                result = networkLocation;
+            }
+        } else if (gpsLocation != null) {
+            result = gpsLocation;
+        } else {
+            result = networkLocation;
         }
-        else if (gpsLocation != null && networkLocation != null) {
-            if (gpsLocation.getTime() > networkLocation.getTime()) result = gpsLocation;
-            else result = networkLocation;
-        }
-        else if (gpsLocation != null) result = gpsLocation;
-        else result = networkLocation;
 
         // Truncate latitude/longitude to the number of digits specified by locationPrecision.
-        if (locationAwareness == LocationAwareness.TRUNCATED) {
+        if (locationLocationAwareness == MoPub.LocationAwareness.TRUNCATED) {
             double lat = result.getLatitude();
             double truncatedLat = BigDecimal.valueOf(lat)
                     .setScale(locationPrecision, BigDecimal.ROUND_HALF_DOWN)
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
index b8d095d9..e164abf1 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
@@ -33,5 +33,31 @@
 package com.mopub.common;
 
 public class MoPub {
-    public static final String SDK_VERSION = "2.4.0";
+    public static final String SDK_VERSION = "3.0.0";
+
+    public static enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
+
+    private static final int DEFAULT_LOCATION_PRECISION = 6;
+    private static volatile LocationAwareness sLocationLocationAwareness = LocationAwareness.NORMAL;
+    private static volatile int sLocationPrecision = DEFAULT_LOCATION_PRECISION;
+
+    public static LocationAwareness getLocationAwareness() {
+        return sLocationLocationAwareness;
+    }
+
+    public static void setLocationAwareness(LocationAwareness locationAwareness) {
+        sLocationLocationAwareness = locationAwareness;
+    }
+
+    public static int getLocationPrecision() {
+        return sLocationPrecision;
+    }
+
+    /**
+     * Sets the precision to use when the SDK's location awareness is set
+     * to {@link com.mopub.common.MoPub.LocationAwareness#TRUNCATED}.
+     */
+    public static void setLocationPrecision(int precision) {
+        sLocationPrecision = Math.min(Math.max(0, precision), DEFAULT_LOCATION_PRECISION);
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java b/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
index 8d9d6046..4e55f583 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
@@ -21,7 +21,7 @@
 import android.widget.RelativeLayout;
 import android.widget.Toast;
 
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 
 import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
 import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
diff --git a/mopub-sdk/src/main/java/com/mopub/common/Preconditions.java b/mopub-sdk/src/main/java/com/mopub/common/Preconditions.java
new file mode 100644
index 00000000..126ff4b4
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/Preconditions.java
@@ -0,0 +1,302 @@
+package com.mopub.common;
+
+
+import android.os.Looper;
+
+import com.mopub.common.logging.MoPubLog;
+
+import java.util.IllegalFormatException;
+
+/**
+ * Simple static methods to be called at the start of your own methods to verify correct arguments
+ * and state.
+ *
+ * Each method supports 2 flavors - one that will always throw a runtime exception, and a NoThrow
+ * version that will only throw an exception when in strict mode. We use the former
+ * for internal state checks, and the later to validate arguments passed to the SDK.
+ */
+public final class Preconditions {
+
+    public static final String EMPTY_ARGUMENTS = "";
+
+    private Preconditions() {
+        // Non-instantiable.
+    }
+
+    /**
+     * Ensures the truth of an expression.
+     */
+    public static void checkArgument(boolean expression) {
+        checkArgumentInternal(expression, true, "Illegal argument.", EMPTY_ARGUMENTS);
+    }
+
+    /**
+     * Ensures the truth of an expression, with an error message.
+     */
+    public static void checkArgument(boolean expression, String errorMessage) {
+        checkArgumentInternal(expression, true, errorMessage, EMPTY_ARGUMENTS);
+    }
+
+    /**
+     * Ensures the truth of an expression, with an error message that takes arguments.
+     */
+    public static void checkArgument(boolean expression,
+            String errorMessageTemplate, Object... errorMessageArgs) {
+        checkArgumentInternal(expression, true, errorMessageTemplate, errorMessageArgs);
+    }
+
+    /**
+     * Ensures the truth of an expression involving the state of the caller.
+     */
+    public static void checkState(boolean expression) {
+        checkStateInternal(expression, true, "Illegal state.", EMPTY_ARGUMENTS);
+    }
+
+    /**
+     * Ensures the truth of an expression involving the state of the caller, with an error message.
+     */
+    public static void checkState(boolean expression, String errorMessage) {
+        checkStateInternal(expression, true, errorMessage, EMPTY_ARGUMENTS);
+    }
+
+    /**
+     * Ensures the truth of an expression involving the state of the caller, with an error message
+     * that takes arguments.
+     */
+    public static void checkState(boolean expression,
+            String errorMessageTemplate, Object... errorMessageArgs) {
+        checkStateInternal(expression, true, errorMessageTemplate, errorMessageArgs);
+    }
+
+    /**
+     * Ensures that an object reference is not null.
+     */
+    public static void checkNotNull(Object reference) {
+        checkNotNullInternal(reference, true, "Object can not be null.", EMPTY_ARGUMENTS);
+    }
+
+    /**
+     * Ensures that an object reference is not null, with an error message.
+     */
+    public static void checkNotNull(Object reference, String errorMessage) {
+        checkNotNullInternal(reference, true, errorMessage, EMPTY_ARGUMENTS);
+    }
+
+    /**
+     * Ensures that an object reference is not null, with an error message that takes arguments.
+     */
+    public static void checkNotNull(Object reference,
+            String errorMessageTemplate, Object... errorMessageArgs) {
+        checkNotNullInternal(reference, true, errorMessageTemplate, errorMessageArgs);
+    }
+
+    /**
+     * Ensures that the current thread is the UI thread.
+     */
+    public static void checkUiThread() {
+        checkUiThreadInternal(true, "This method must be called from the UI thread.",
+                EMPTY_ARGUMENTS);
+    }
+
+    /**
+     * Ensures that the current thread is the UI thread, with an error message.
+     */
+    public static void checkUiThread(String errorMessage) {
+        checkUiThreadInternal(true, errorMessage, EMPTY_ARGUMENTS);
+    }
+
+    /**
+     * Ensures that the current thread is the UI thread, with an error message that takes
+     * arguments.
+     */
+    public static void checkUiThread(String errorMessageTemplate, Object... errorMessageArgs) {
+        checkUiThreadInternal(true, errorMessageTemplate, errorMessageArgs);
+    }
+
+    /**
+     * Preconditions checks that avoid throwing and exception in release mode. These versions return
+     * a boolean which the caller should check.
+     */
+    public final static class NoThrow {
+        private static volatile boolean sStrictMode = false;
+
+        /**
+         * Enables or disables strict mode.
+         *
+         * In strict mode, this class will throw anyway. For example, you could set strict mode to
+         * BuildConfig.DEBUG to always get exceptions when in the IDE.
+         *
+         * @param strictMode Whether to use strict mode.
+         */
+        public static void setStrictMode(boolean strictMode) {
+            sStrictMode = strictMode;
+        }
+
+        /**
+         * Ensures the truth of an expression.
+         */
+        public static boolean checkArgument(boolean expression) {
+            return checkArgumentInternal(expression, sStrictMode, "Illegal argument",
+                    EMPTY_ARGUMENTS);
+        }
+
+        /**
+         * Ensures the truth of an expression, with an error message.
+         */
+        public static boolean checkArgument(boolean expression, String errorMessage) {
+            return checkArgumentInternal(expression, sStrictMode, errorMessage, EMPTY_ARGUMENTS);
+        }
+
+        /**
+         * Ensures the truth of an expression, with an error message that takes arguments.
+         */
+        public static boolean checkArgument(boolean expression,
+                String errorMessageTemplate, Object... errorMessageArgs) {
+            return checkArgumentInternal(expression, sStrictMode, errorMessageTemplate,
+                    errorMessageArgs);
+        }
+
+
+        /**
+         * Ensures the truth of an expression involving the state of the caller.
+         */
+        public static boolean checkState(boolean expression) {
+            return checkStateInternal(expression, sStrictMode, "Illegal state.", EMPTY_ARGUMENTS);
+        }
+
+        /**
+         * Ensures the truth of an expression involving the state of the caller, with an error
+         * message.
+         */
+        public static boolean checkState(boolean expression, String errorMessage) {
+            return checkStateInternal(expression, sStrictMode, errorMessage, EMPTY_ARGUMENTS);
+        }
+
+        /**
+         * Ensures the truth of an expression involving the state of the caller, with an error
+         * message that takes arguments.
+         */
+        public static boolean checkState(boolean expression,
+                String errorMessageTemplate, Object... errorMessageArgs) {
+            return checkStateInternal(expression, sStrictMode, errorMessageTemplate,
+                    errorMessageArgs);
+        }
+
+        /**
+         * Ensures that an object reference is not null.
+         */
+        public static boolean checkNotNull(Object reference) {
+            return checkNotNullInternal(reference, sStrictMode, "Object can not be null.",
+                    EMPTY_ARGUMENTS);
+        }
+
+        /**
+         * Ensures that an object reference is not null, with an error message.
+         */
+        public static boolean checkNotNull(Object reference, String errorMessage) {
+            return checkNotNullInternal(reference, sStrictMode, errorMessage, EMPTY_ARGUMENTS);
+        }
+
+        /**
+         * Ensures that an object reference is not null, with an error message that takes
+         * arguments.
+         */
+        public static boolean checkNotNull(Object reference,
+                String errorMessageTemplate, Object... errorMessageArgs) {
+            return checkNotNullInternal(reference, sStrictMode, errorMessageTemplate,
+                    errorMessageArgs);
+        }
+
+        /**
+         * Ensures that the current thread is the UI thread.
+         */
+        public static boolean checkUiThread() {
+            return checkUiThreadInternal(sStrictMode,
+                    "This method must be called from the UI thread.", EMPTY_ARGUMENTS);
+        }
+
+        /**
+         * Ensures that the current thread is the UI thread, with an error message.
+         */
+        public static boolean checkUiThread(String errorMessage) {
+            return checkUiThreadInternal(sStrictMode, errorMessage, EMPTY_ARGUMENTS);
+        }
+
+        /**
+         * Ensures that the current thread is the UI thread, with an error message that takes
+         * arguments.
+         */
+        public static boolean checkUiThread(String errorMessageTemplate,
+                Object... errorMessageArgs) {
+            return checkUiThreadInternal(false, errorMessageTemplate, errorMessageArgs);
+        }
+    }
+
+    private static boolean checkArgumentInternal(boolean expression, boolean allowThrow,
+            String errorMessageTemplate, Object... errorMessageArgs) {
+        if (expression) {
+            return true;
+        }
+        String errorMessage = format(errorMessageTemplate, errorMessageArgs);
+        if (allowThrow) {
+            throw new IllegalArgumentException(errorMessage);
+        }
+        MoPubLog.e(errorMessage);
+        return false;
+    }
+
+    private static boolean checkStateInternal(boolean expression, boolean allowThrow,
+            String errorMessageTemplate, Object... errorMessageArgs) {
+        if (expression) {
+            return true;
+        }
+        String errorMessage = format(errorMessageTemplate, errorMessageArgs);
+        if (allowThrow) {
+            throw new IllegalStateException(errorMessage);
+        }
+        MoPubLog.e(errorMessage);
+        return false;
+    }
+
+    private static boolean checkNotNullInternal(Object reference, boolean allowThrow,
+            String errorMessageTemplate, Object... errorMessageArgs) {
+        if (reference != null) {
+            return true;
+        }
+        String errorMessage = format(errorMessageTemplate, errorMessageArgs);
+        if (allowThrow) {
+            throw new NullPointerException(errorMessage);
+        }
+        MoPubLog.e(errorMessage);
+        return false;
+    }
+
+    private static boolean checkUiThreadInternal(boolean allowThrow,
+            String errorMessageTemplate, Object... errorMessageArgs) {
+        // Check that the main looper is the current looper.
+        if (Looper.getMainLooper().equals(Looper.myLooper())) {
+            return true;
+        }
+        String errorMessage = format(errorMessageTemplate, errorMessageArgs);
+        if (allowThrow) {
+            throw new IllegalStateException(errorMessage);
+        }
+        MoPubLog.e(errorMessage);
+        return false;
+    }
+
+    /**
+     * Substitutes each {@code %s} in {@code template} with an argument. These are matched by
+     * position - the first {@code %s} gets {@code args[0]}, etc.
+     */
+    private static String format(String template, Object... args) {
+        template = String.valueOf(template);  // null -> "null"
+
+        try {
+            return String.format(template, args);
+        } catch (IllegalFormatException exception) {
+            MoPubLog.e("MoPub preconditions had a format exception: " + exception.getMessage());
+            return template;
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/BaseEvent.java b/mopub-sdk/src/main/java/com/mopub/common/event/BaseEvent.java
new file mode 100644
index 00000000..4e053528
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/BaseEvent.java
@@ -0,0 +1,43 @@
+package com.mopub.common.event;
+
+import com.mopub.common.ClientMetadata;
+
+public abstract class BaseEvent {
+    public enum Type {
+        NETWORK_REQUEST("request"),
+        DATA_ERROR("invalid_data");
+
+        public final String mName;
+        Type(String name) {
+            mName = name;
+        }
+    }
+
+    private final ClientMetadata mMetadata;
+    private final String mEventName;
+    private final String mRequestUrl;
+    private final long mEventTimeUtcMillis;
+
+    BaseEvent(Type eventType, String requestUrl, ClientMetadata metadata) {
+        mEventTimeUtcMillis = System.currentTimeMillis();
+        mEventName = eventType.mName;
+        mRequestUrl = requestUrl;
+        mMetadata = metadata;
+    }
+
+    public long getEventTimeUtcMillis() {
+        return mEventTimeUtcMillis;
+    }
+
+    public String getRequestUrl() {
+        return mRequestUrl;
+    }
+
+    public String getEventName() {
+        return mEventName;
+    }
+
+    public ClientMetadata getMetadata() {
+        return mMetadata;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/Event.java b/mopub-sdk/src/main/java/com/mopub/common/event/Event.java
new file mode 100644
index 00000000..fee902fd
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/Event.java
@@ -0,0 +1,12 @@
+package com.mopub.common.event;
+
+import com.mopub.common.ClientMetadata;
+
+/**
+ * Immutable data class with client event data.
+ */
+public class Event extends BaseEvent {
+    Event(final Type eventType, final String requestUrl, final ClientMetadata metadata) {
+        super(eventType, requestUrl, metadata);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/EventRecorder.java b/mopub-sdk/src/main/java/com/mopub/common/event/EventRecorder.java
new file mode 100644
index 00000000..13ed5518
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/EventRecorder.java
@@ -0,0 +1,9 @@
+package com.mopub.common.event;
+
+/**
+ * This interface represents a backend to which MoPub client events are logged.
+ */
+public interface EventRecorder {
+    public void recordEvent(Event event);
+    public void recordTimedEvent(TimedEvent event);
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/MoPubEvents.java b/mopub-sdk/src/main/java/com/mopub/common/event/MoPubEvents.java
new file mode 100644
index 00000000..a36c4f9f
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/MoPubEvents.java
@@ -0,0 +1,125 @@
+package com.mopub.common.event;
+
+import android.os.Handler;
+import android.os.HandlerThread;
+import android.os.Message;
+
+import com.mopub.common.ClientMetadata;
+import com.mopub.common.VisibleForTesting;
+
+import java.util.ArrayList;
+
+/**
+ * Records both untimed and timed events. This class maintains a queue of events to be recorded and
+ * launches a background thread to handler their recording.
+ */
+public class MoPubEvents {
+
+    private static volatile EventDispatcher sEventDispatcher;
+
+    private static EventDispatcher getDispatcher() {
+        EventDispatcher result = sEventDispatcher;
+        if (result == null) {
+            synchronized (MoPubEvents.class) {
+                result = sEventDispatcher;
+                if (result == null) {
+                    ArrayList<EventRecorder> recorders = new ArrayList<EventRecorder>();
+                    recorders.add(new NoopEventRecorder());
+                    HandlerThread handlerThread = new HandlerThread("mopub_event_queue");
+                    result = sEventDispatcher = new EventDispatcher(recorders, handlerThread);
+                }
+            }
+        }
+        return result;
+    }
+
+    @VisibleForTesting
+    public static void setEventDispatcher(EventDispatcher dispatcher) {
+        sEventDispatcher = dispatcher;
+    }
+
+    /**
+     * Log a ClientEvent. MoPub uses logged events to analyze and improve performance.
+     * This method should not be called by app developers.
+     */
+    public static void event(Event.Type eventType, String requestUrl) {
+        final EventDispatcher dispatcher = MoPubEvents.getDispatcher();
+        final Event event = new Event(eventType, requestUrl, ClientMetadata.getInstance());
+        dispatcher.sendEventToHandlerThread(event);
+    }
+
+
+    /**
+     * Create and start a TimedEvent. A TimedEvent isn't recored until
+     * {@link com.mopub.common.event.TimedEvent#stop(int)} is called.
+     */
+    public static TimedEvent timedEvent(Event.Type eventType, String requestUrl) {
+        final EventDispatcher events = getDispatcher();
+        final TimedEvent event =
+                new TimedEvent(eventType, requestUrl, ClientMetadata.getInstance(), events);
+        return event;
+    }
+
+    private static class NoopEventRecorder implements EventRecorder {
+
+        @Override
+        public void recordEvent(final Event event) {
+
+        }
+
+        @Override
+        public void recordTimedEvent(final TimedEvent event) {
+
+        }
+    }
+
+    @VisibleForTesting
+    public static class EventDispatcher implements TimedEvent.Listener {
+        private final Iterable<EventRecorder> mEventRecorders;
+        private final HandlerThread mHandlerThread;
+        private final Handler mMessageHandler;
+
+        @VisibleForTesting Handler.Callback mHandlerCallback;
+
+        @VisibleForTesting
+        EventDispatcher(Iterable<EventRecorder> recorders, HandlerThread handlerThread) {
+            mEventRecorders = recorders;
+            mHandlerCallback = new Handler.Callback() {
+                @Override
+                public boolean handleMessage(final Message msg) {
+                    if (msg.obj instanceof TimedEvent) {
+                        final TimedEvent event = (TimedEvent) msg.obj;
+                        for (final EventRecorder recorder : mEventRecorders) {
+                            recorder.recordTimedEvent(event);
+                        }
+
+                    } else if (msg.obj instanceof Event) {
+                        final Event event = (Event) msg.obj;
+                        for (final EventRecorder recorder : mEventRecorders) {
+                            recorder.recordEvent(event);
+                        }
+                    }
+                    return true; // Even if it's not an event, swallow the message.
+                }
+            };
+            mHandlerThread = handlerThread;
+            mHandlerThread.start();
+            mMessageHandler = new Handler(mHandlerThread.getLooper(), mHandlerCallback);
+        }
+
+        private void sendEventToHandlerThread(BaseEvent event) {
+            final Message message = Message.obtain(mMessageHandler, 0, event);
+            message.sendToTarget();
+        }
+
+        @Override
+        public void onStopped(final TimedEvent event) {
+            this.sendEventToHandlerThread(event);
+        }
+
+        @Override
+        public void onCancelled(final TimedEvent event) {
+            // Nothing to do for now.
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/TimedEvent.java b/mopub-sdk/src/main/java/com/mopub/common/event/TimedEvent.java
new file mode 100644
index 00000000..c2aa7dc9
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/TimedEvent.java
@@ -0,0 +1,76 @@
+package com.mopub.common.event;
+
+import com.mopub.common.ClientMetadata;
+
+import java.util.concurrent.TimeUnit;
+
+/**
+ * Immutable data class with client event data, including a duration.
+ */
+public class TimedEvent extends BaseEvent {
+    interface Listener {
+        public void onStopped(TimedEvent event);
+
+        public void onCancelled(TimedEvent event);
+    }
+
+    /**
+     * Use this status code when stopping an event where an HTTP Status Code isn't relevant.
+     */
+    public static final int SC_NOT_RELEVANT = 0;
+
+    /**
+     * Use this status code when the timed event has no response.
+     */
+    public static final int SC_NO_RESPONSE = -1;
+
+    private final long mStartTimeNanos;
+    private enum State {
+        WAITING, STOPPED, CANCELLED
+    }
+    private State mState;
+    private final Listener mListener;
+
+
+    private long mDurationMillis;
+    private int mHttpStatusCode;
+
+    TimedEvent(final Type eventType, final String requestUrl,
+            final ClientMetadata clientMetadata, Listener listener) {
+        super(eventType, requestUrl, clientMetadata);
+        // System.nanoTime isn't affected by changing the system time, so we use it here.
+        mState = State.WAITING;
+        mStartTimeNanos = System.nanoTime();
+        mListener = listener;
+    }
+
+    public synchronized void stop(int httpStatusCode) {
+        if (mState == State.WAITING) {
+            mState = State.STOPPED;
+            mHttpStatusCode = httpStatusCode;
+            long stopTimeNanos = System.nanoTime();
+            mDurationMillis = TimeUnit.MILLISECONDS.convert(stopTimeNanos - mStartTimeNanos,
+                    TimeUnit.NANOSECONDS);
+            if (mListener != null) {
+                mListener.onStopped(this);
+            }
+        }
+    }
+
+    public synchronized void cancel() {
+        if (mState == State.WAITING) {
+            mState = State.CANCELLED;
+            if (mListener != null) {
+                mListener.onCancelled(this);
+            }
+        }
+    }
+
+    public final synchronized long getDurationMillis() {
+        return mDurationMillis;
+    }
+
+    public final synchronized int getHttpStatusCode() {
+        return mHttpStatusCode;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/logging/MoPubLog.java b/mopub-sdk/src/main/java/com/mopub/common/logging/MoPubLog.java
new file mode 100644
index 00000000..70ac4e7b
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/logging/MoPubLog.java
@@ -0,0 +1,126 @@
+package com.mopub.common.logging;
+
+import android.util.Log;
+import android.util.SparseArray;
+
+import java.util.ArrayList;
+import java.util.EnumMap;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Handler;
+import java.util.logging.Level;
+import java.util.logging.LogManager;
+import java.util.logging.LogRecord;
+import java.util.logging.Logger;
+
+public class MoPubLog {
+    private static final String LOGTAG = "MoPub";
+    private static final Logger LOGGER = Logger.getLogger("com.mopub");
+    private static final MoPubLogHandler LOG_HANDLER = new MoPubLogHandler();
+
+    static {
+        LogManager.getLogManager().addLogger(LOGGER);
+        LOGGER.addHandler(LOG_HANDLER);
+        LOGGER.setLevel(Level.FINE);
+    }
+
+    private MoPubLog() {}
+
+    public static void c(final String message) {
+        MoPubLog.c(message, null);
+    }
+
+    public static void v(final String message) {
+        MoPubLog.v(message, null);
+    }
+
+    public static void d(final String message) {
+        MoPubLog.d(message, null);
+    }
+
+    public static void i(final String message) {
+        MoPubLog.i(message, null);
+    }
+
+    public static void w(final String message) {
+        MoPubLog.w(message, null);
+    }
+
+    public static void e(final String message) {
+        MoPubLog.e(message, null);
+    }
+
+    public static void c(final String message, final Throwable throwable) {
+        LOGGER.log(Level.FINEST, message, throwable);
+    }
+
+    public static void v(final String message, final Throwable throwable) {
+        LOGGER.log(Level.FINE, message, throwable);
+    }
+
+    public static void d(final String message, final Throwable throwable) {
+        LOGGER.log(Level.CONFIG, message, throwable);
+    }
+
+    public static void i(final String message, final Throwable throwable) {
+        LOGGER.log(Level.INFO, message, throwable);
+    }
+
+    public static void w(final String message, final Throwable throwable) {
+        LOGGER.log(Level.WARNING, message, throwable);
+    }
+
+    public static void e(final String message, final Throwable throwable) {
+        LOGGER.log(Level.SEVERE, message, throwable);
+    }
+
+    private static final class MoPubLogHandler extends Handler {
+        private static final Map<Level, Integer> LEVEL_TO_LOG = new HashMap<Level, Integer>(7);
+
+        /*
+         * Mapping between Level.* and Log.*:
+         * Level.FINEST  => Log.v
+         * Level.FINER   => Log.v
+         * Level.FINE    => Log.v
+         * Level.CONFIG  => Log.d
+         * Level.INFO    => Log.i
+         * Level.WARNING => Log.w
+         * Level.SEVERE  => Log.e
+         */
+        static {
+            LEVEL_TO_LOG.put(Level.FINEST, Log.VERBOSE);
+            LEVEL_TO_LOG.put(Level.FINER, Log.VERBOSE);
+            LEVEL_TO_LOG.put(Level.FINE, Log.VERBOSE);
+            LEVEL_TO_LOG.put(Level.CONFIG, Log.DEBUG);
+            LEVEL_TO_LOG.put(Level.INFO, Log.INFO);
+            LEVEL_TO_LOG.put(Level.WARNING, Log.WARN);
+            LEVEL_TO_LOG.put(Level.SEVERE, Log.ERROR);
+        }
+
+        @Override
+        public void publish(final LogRecord logRecord) {
+            if (isLoggable(logRecord)) {
+                final int priority;
+                if (LEVEL_TO_LOG.containsKey(logRecord.getLevel())) {
+                    priority = LEVEL_TO_LOG.get(logRecord.getLevel());
+                } else {
+                    priority = Log.VERBOSE;
+                }
+
+                String message = logRecord.getMessage() + "\n";
+
+                final Throwable error = logRecord.getThrown();
+                if (error != null) {
+                    message += Log.getStackTraceString(error);
+                }
+
+                Log.println(priority, LOGTAG, message);
+            }
+        }
+
+        @Override public void close() {}
+
+        @Override public void flush() {}
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/AsyncTasks.java b/mopub-sdk/src/main/java/com/mopub/common/util/AsyncTasks.java
index 314549a2..b8e25d73 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/AsyncTasks.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/AsyncTasks.java
@@ -1,39 +1,51 @@
 package com.mopub.common.util;
 
+import android.annotation.TargetApi;
 import android.os.AsyncTask;
-import android.os.Looper;
+import android.os.Build.VERSION;
+import android.os.Build.VERSION_CODES;
 
-import java.util.concurrent.Executor;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
 
-import static com.mopub.common.util.Reflection.MethodBuilder;
-import static com.mopub.common.util.VersionCode.ICE_CREAM_SANDWICH;
-import static com.mopub.common.util.VersionCode.currentApiLevel;
+import java.util.concurrent.Executor;
+import java.util.concurrent.Executors;
 
 public class AsyncTasks {
-    /**
-     * Starting with ICS, default AsyncTask#execute behavior runs the tasks serially. This method
-     * attempts to force these AsyncTasks to run in parallel with a ThreadPoolExecutor, if possible.
-     */
-    public static <P> void safeExecuteOnExecutor(AsyncTask<P, ?, ?> asyncTask, P... params) throws IllegalArgumentException, IllegalStateException {
-        if (asyncTask == null) {
-            throw new IllegalArgumentException("Unable to execute null AsyncTask.");
-        }
+    private static Executor sExecutor;
+
+    static {
+        init();
+    }
 
-        if (Looper.myLooper() != Looper.getMainLooper()) {
-            throw new IllegalStateException("AsyncTask must be executed on the main thread");
+    // This is in a separate method rather than a static block to pass lint.
+    @TargetApi(VERSION_CODES.HONEYCOMB)
+    private static void init() {
+        // Reuse the async task executor if possible
+        if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {
+            sExecutor = AsyncTask.THREAD_POOL_EXECUTOR;
+        } else {
+            sExecutor = Executors.newSingleThreadExecutor();
         }
+    }
+
+    @VisibleForTesting
+    public static void setExecutor(Executor executor) {
+        sExecutor = executor;
+    }
+
+    /**
+     * Starting with Honeycomb, default AsyncTask#execute behavior runs the tasks serially. This
+     * method attempts to force these AsyncTasks to run in parallel with a ThreadPoolExecutor, if
+     * possible.
+     */
+    @TargetApi(VERSION_CODES.HONEYCOMB)
+    public static <P> void safeExecuteOnExecutor(AsyncTask<P, ?, ?> asyncTask, P... params) {
+        Preconditions.checkNotNull(asyncTask, "Unable to execute null AsyncTask.");
+        Preconditions.checkUiThread("AsyncTask must be executed on the main thread");
 
-        if (currentApiLevel().isAtLeast(ICE_CREAM_SANDWICH)) {
-            try {
-                Executor threadPoolExecutor = (Executor) AsyncTask.class.getField("THREAD_POOL_EXECUTOR").get(AsyncTask.class);
-
-                new MethodBuilder(asyncTask, "executeOnExecutor")
-                        .addParam(Executor.class, threadPoolExecutor)
-                        .addParam(Object[].class, params)
-                        .execute();
-            } catch (Exception e) {
-                asyncTask.execute(params);
-            }
+        if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {
+            asyncTask.executeOnExecutor(sExecutor, params);
         } else {
             asyncTask.execute(params);
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/DateAndTime.java b/mopub-sdk/src/main/java/com/mopub/common/util/DateAndTime.java
index b4e0cbfd..9a076c26 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/DateAndTime.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/DateAndTime.java
@@ -32,6 +32,7 @@
 
 package com.mopub.common.util;
 
+import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.TimeZone;
 
@@ -51,6 +52,14 @@ public static Date now() {
         return instance.internalNow();
     }
 
+    public static String getTimeZoneOffsetString() {
+        // A new instance is created with each call because DateFormat objects have
+        // internal state and are not thread safe.
+        SimpleDateFormat format = new SimpleDateFormat("Z");
+        format.setTimeZone(localTimeZone());
+        return format.format(now());
+    }
+
     public TimeZone internalLocalTimeZone() {
         return TimeZone.getDefault();
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java b/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java
index 88709280..3ac25c61 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java
@@ -9,6 +9,8 @@
 import android.os.StatFs;
 import android.provider.Settings;
 
+import com.mopub.common.logging.MoPubLog;
+
 import org.apache.http.conn.util.InetAddressUtils;
 
 import java.io.File;
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/IntentUtils.java b/mopub-sdk/src/main/java/com/mopub/common/util/IntentUtils.java
index eb37cc9c..ac1a3d71 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/IntentUtils.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/IntentUtils.java
@@ -7,7 +7,8 @@
 import android.content.pm.ResolveInfo;
 import android.net.Uri;
 import android.os.Bundle;
-import android.util.Log;
+
+import com.mopub.common.logging.MoPubLog;
 
 import java.util.List;
 
@@ -100,7 +101,7 @@ public static boolean canHandleApplicationUrl(Context context, String url, boole
         // If there are no relevant activities, don't follow the link
         if (!IntentUtils.deviceCanHandleIntent(context, intent)) {
             if (logError) {
-                Log.w("MoPub", "Could not handle application specific action: " + url + ". " +
+                MoPubLog.w("Could not handle application specific action: " + url + ". " +
                         "You may be running in the emulator or another device which does not " +
                         "have the required application.");
             }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Json.java b/mopub-sdk/src/main/java/com/mopub/common/util/Json.java
index ed7075d1..c033eaf5 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Json.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Json.java
@@ -32,6 +32,8 @@
 
 package com.mopub.common.util;
 
+import com.mopub.common.logging.MoPubLog;
+
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -101,6 +103,8 @@ public static String mapToJsonString(Map<String, String> map) {
         }
     }
 
+    // This method is used by the Native Custom events.
+    @SuppressWarnings("unused")
     public static <T> T getJsonValue(final JSONObject jsonObject, final String key, final Class<T> valueClass) {
         if (jsonObject == null || key == null || valueClass == null) {
             throw new IllegalArgumentException("Cannot pass any null argument to getJsonValue");
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java b/mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java
index cf4771bb..aff7bb39 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java
@@ -7,6 +7,8 @@
 import android.view.Gravity;
 import android.widget.Toast;
 
+import com.mopub.common.logging.MoPubLog;
+
 import java.util.ArrayList;
 import java.util.List;
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/MoPubLog.java b/mopub-sdk/src/main/java/com/mopub/common/util/MoPubLog.java
deleted file mode 100644
index 98d489a0..00000000
--- a/mopub-sdk/src/main/java/com/mopub/common/util/MoPubLog.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package com.mopub.common.util;
-
-import android.util.Log;
-
-public class MoPubLog {
-    private static final String LOGTAG = "MoPub";
-
-    public static int d(final String message) {
-        return MoPubLog.d(message, null);
-    }
-
-    public static int d(final String message, final Throwable throwable) {
-        return Log.d(LOGTAG, message, throwable);
-    }
-
-    public static int w(final String message) {
-        return MoPubLog.w(message, null);
-    }
-
-    public static int w(final String message, final Throwable throwable) {
-        return Log.w(LOGTAG, message, throwable);
-    }
-
-    public static int e(final String message) {
-        return MoPubLog.e(message, null);
-    }
-
-    public static int e(final String message, final Throwable throwable) {
-        return Log.e(LOGTAG, message, throwable);
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/VersionCode.java b/mopub-sdk/src/main/java/com/mopub/common/util/VersionCode.java
index 6cff3281..122e81d4 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/VersionCode.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/VersionCode.java
@@ -53,6 +53,7 @@
     JELLY_BEAN(16),
     JELLY_BEAN_MR1(17),
     JELLY_BEAN_MR2(18),
+    KITKAT(19),
     CUR_DEVELOPMENT(10000);
 
     private int mApiLevel;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
index d36beb93..2f2ac355 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
@@ -36,10 +36,10 @@
 import android.content.Intent;
 import android.graphics.Bitmap;
 import android.net.Uri;
-import android.util.Log;
 import android.view.View;
 
 import com.mopub.common.util.DateAndTime;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Streams;
 import com.mopub.mobileads.util.Base64;
 
@@ -208,7 +208,7 @@ private void addImageAttachment(String fileName, Bitmap bitmap) {
             Uri fileUri = Uri.fromFile(new File(mContext.getFilesDir() + File.separator + fileName));
             mEmailAttachments.add(fileUri);
         } catch (Exception exception) {
-            Log.d("MoPub", "Unable to write text attachment to file: " + fileName);
+            MoPubLog.d("Unable to write text attachment to file: " + fileName);
         } finally {
             Streams.closeStream(fileOutputStream);
         }
@@ -228,7 +228,7 @@ private void addTextAttachment(String fileName, String body) {
             Uri fileUri = Uri.fromFile(new File(mContext.getFilesDir() + File.separator + fileName));
             mEmailAttachments.add(fileUri);
         } catch (Exception exception) {
-            Log.d("MoPub", "Unable to write text attachment to file: " + fileName);
+            MoPubLog.d("Unable to write text attachment to file: " + fileName);
         } finally {
             Streams.closeStream(fileOutputStream);
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java
index 8edd353d..9160fe5d 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java
@@ -44,9 +44,13 @@
 
 import org.apache.http.HttpResponse;
 
-import java.io.Serializable;
-import java.util.Map;
+import java.io.*;
+import java.util.*;
 
+import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
+import static com.mopub.mobileads.util.HttpResponses.extractHeader;
+import static com.mopub.mobileads.util.HttpResponses.extractIntHeader;
+import static com.mopub.mobileads.util.HttpResponses.extractIntegerHeader;
 import static com.mopub.common.util.ResponseHeader.AD_TIMEOUT;
 import static com.mopub.common.util.ResponseHeader.AD_TYPE;
 import static com.mopub.common.util.ResponseHeader.CLICKTHROUGH_URL;
@@ -58,10 +62,6 @@
 import static com.mopub.common.util.ResponseHeader.REDIRECT_URL;
 import static com.mopub.common.util.ResponseHeader.REFRESH_TIME;
 import static com.mopub.common.util.ResponseHeader.WIDTH;
-import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
-import static com.mopub.mobileads.util.HttpResponses.extractHeader;
-import static com.mopub.mobileads.util.HttpResponses.extractIntHeader;
-import static com.mopub.mobileads.util.HttpResponses.extractIntegerHeader;
 
 public class AdConfiguration implements Serializable {
     private static final long serialVersionUID = 0L;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
index e5f41452..cd95c531 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
@@ -33,8 +33,8 @@
 package com.mopub.mobileads;
 
 import android.os.AsyncTask;
-import android.util.Log;
 
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.factories.HttpClientFactory;
 
 import org.apache.http.HttpResponse;
@@ -102,7 +102,7 @@ private AdLoadTask fetch(String url) throws Exception {
     private boolean responseContainsContent(HttpResponse response) {
         // Ensure that the ad is not warming up.
         if ("1".equals(extractHeader(response, WARMUP))) {
-            Log.d("MoPub", "Ad Unit (" + mAdViewController.getAdUnitId() + ") is still warming up. " +
+            MoPubLog.d("Ad Unit (" + mAdViewController.getAdUnitId() + ") is still warming up. " +
                     "Please try again in a few minutes.");
             mFetchStatus = AdFetcher.FetchStatus.AD_WARMING_UP;
             return false;
@@ -111,7 +111,7 @@ private boolean responseContainsContent(HttpResponse response) {
         // Ensure that the ad type header is valid and not "clear".
         String adType = extractHeader(response, AD_TYPE);
         if ("clear".equals(adType)) {
-            Log.d("MoPub", "No ads found for adunit (" + mAdViewController.getAdUnitId() + ").");
+            MoPubLog.d("No ads found for adunit (" + mAdViewController.getAdUnitId() + ").");
             mFetchStatus = AdFetcher.FetchStatus.CLEAR_AD_TYPE;
             return false;
         }
@@ -121,7 +121,7 @@ private boolean responseContainsContent(HttpResponse response) {
 
     private boolean isResponseValid(HttpResponse response) {
         if (response == null || response.getEntity() == null) {
-            Log.d("MoPub", "MoPub server returned null response.");
+            MoPubLog.d("MoPub server returned null response.");
             mFetchStatus = AdFetcher.FetchStatus.INVALID_SERVER_RESPONSE_NOBACKOFF;
             return false;
         }
@@ -130,14 +130,14 @@ private boolean isResponseValid(HttpResponse response) {
 
         // Client and Server HTTP errors should result in an exponential backoff
         if (statusCode >= 400) {
-            Log.d("MoPub", "Server error: returned HTTP status code " + Integer.toString(statusCode) +
+            MoPubLog.d("Server error: returned HTTP status code " + Integer.toString(statusCode) +
                     ". Please try again.");
             mFetchStatus = AdFetcher.FetchStatus.INVALID_SERVER_RESPONSE_BACKOFF;
             return false;
         }
         // Other non-200 HTTP status codes should still fail
         else if (statusCode != HttpStatus.SC_OK) {
-            Log.d("MoPub", "MoPub server returned invalid response: HTTP status code " +
+            MoPubLog.d("MoPub server returned invalid response: HTTP status code " +
                     Integer.toString(statusCode) + ".");
             mFetchStatus = AdFetcher.FetchStatus.INVALID_SERVER_RESPONSE_NOBACKOFF;
             return false;
@@ -154,7 +154,7 @@ private boolean isStateValid() {
         }
 
         if (mAdViewController == null || mAdViewController.isDestroyed()) {
-            Log.d("MoPub", "Error loading ad: AdViewController has already been GCed or destroyed.");
+            MoPubLog.d("Error loading ad: AdViewController has already been GCed or destroyed.");
             return false;
         }
         return true;
@@ -163,7 +163,7 @@ private boolean isStateValid() {
     @Override
     protected void onPostExecute(AdLoadTask adLoadTask) {
         if (!isMostCurrentTask()) {
-            Log.d("MoPub", "Ad response is stale.");
+            MoPubLog.d("Ad response is stale.");
             cleanup();
             return;
         }
@@ -180,7 +180,7 @@ protected void onPostExecute(AdLoadTask adLoadTask) {
 
         if (adLoadTask == null) {
             if (mException != null) {
-                Log.d("MoPub", "Exception caught while loading ad: " + mException);
+                MoPubLog.d("Exception caught while loading ad: " + mException);
             }
 
             MoPubErrorCode errorCode;
@@ -230,14 +230,14 @@ protected void onPostExecute(AdLoadTask adLoadTask) {
     @Override
     protected void onCancelled() {
         if (!isMostCurrentTask()) {
-            Log.d("MoPub", "Ad response is stale.");
+            MoPubLog.d("Ad response is stale.");
             cleanup();
             return;
         }
 
-        Log.d("MoPub", "Ad loading was cancelled.");
+        MoPubLog.d("Ad loading was cancelled.");
         if (mException != null) {
-            Log.d("MoPub", "Exception caught while loading ad: " + mException);
+            MoPubLog.d("Exception caught while loading ad: " + mException);
         }
         mTaskTracker.markTaskCompleted(mTaskId);
         cleanup();
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java
index 03c73101..13cc2766 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java
@@ -32,9 +32,8 @@
 
 package com.mopub.mobileads;
 
-import android.util.Log;
-
 import com.mopub.common.util.AsyncTasks;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.factories.AdFetchTaskFactory;
 
 /*
@@ -76,7 +75,7 @@ public AdFetcher(AdViewController adview, String userAgent) {
 
     public void fetchAdForUrl(String url) {
         mTaskTracker.newTaskStarted();
-        Log.i("MoPub", "Fetching ad for task #" + getCurrentTaskId());
+        MoPubLog.i("Fetching ad for task #" + getCurrentTaskId());
 
         if (mCurrentTask != null) {
             mCurrentTask.cancel(true);
@@ -87,13 +86,13 @@ public void fetchAdForUrl(String url) {
         try {
             AsyncTasks.safeExecuteOnExecutor(mCurrentTask, url);
         } catch (Exception exception) {
-            Log.d("MoPub", "Error executing AdFetchTask", exception);
+            MoPubLog.d("Error executing AdFetchTask", exception);
         }
     }
 
     public void cancelFetch() {
         if (mCurrentTask != null) {
-            Log.i("MoPub", "Canceling fetch ad for task #" + getCurrentTaskId());
+            MoPubLog.i("Canceling fetch ad for task #" + getCurrentTaskId());
             mCurrentTask.cancel(true);
         }
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
index e01e7430..053556aa 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
@@ -34,9 +34,9 @@
 
 import android.app.Activity;
 import android.net.Uri;
-import android.util.Log;
 
 import com.mopub.common.util.Json;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Strings;
 
 import org.apache.http.Header;
@@ -100,7 +100,7 @@ AdLoadTask extract() throws IOException {
             adType = extractHeader(response, AD_TYPE);
             fullAdType = extractHeader(response, FULL_AD_TYPE);
 
-            Log.d("MoPub", "Loading ad type: " + AdTypeTranslator.getAdNetworkType(adType, fullAdType));
+            MoPubLog.d("Loading ad type: " + AdTypeTranslator.getAdNetworkType(adType, fullAdType));
 
             adTypeCustomEventName = AdTypeTranslator.getCustomEventNameForAdType(
                     adViewController.getMoPubView(), adType, fullAdType);
@@ -115,7 +115,7 @@ AdLoadTask extract() throws IOException {
         }
 
         private AdLoadTask extractCustomEventAdLoadTask() {
-            Log.i("MoPub", "Performing custom event.");
+            MoPubLog.i("Performing custom event.");
 
             // If applicable, try to invoke the new custom event system (which uses custom classes)
             adTypeCustomEventName = extractHeader(response, CUSTOM_EVENT_NAME);
@@ -236,13 +236,13 @@ void execute() {
             MoPubView mpv = adViewController.getMoPubView();
 
             if (mHeader == null) {
-                Log.i("MoPub", "Couldn't call custom method because the server did not specify one.");
+                MoPubLog.i("Couldn't call custom method because the server did not specify one.");
                 mpv.loadFailUrl(MoPubErrorCode.ADAPTER_NOT_FOUND);
                 return;
             }
 
             String methodName = mHeader.getValue();
-            Log.i("MoPub", "Trying to call method named " + methodName);
+            MoPubLog.i("Trying to call method named " + methodName);
 
             Class<? extends Activity> c;
             Method method;
@@ -252,11 +252,11 @@ void execute() {
                 method = c.getMethod(methodName, MoPubView.class);
                 method.invoke(userActivity, mpv);
             } catch (NoSuchMethodException e) {
-                Log.d("MoPub", "Couldn't perform custom method named " + methodName +
+                MoPubLog.d("Couldn't perform custom method named " + methodName +
                         "(MoPubView view) because your activity class has no such method");
                 mpv.loadFailUrl(MoPubErrorCode.ADAPTER_NOT_FOUND);
             } catch (Exception e) {
-                Log.d("MoPub", "Couldn't perform custom method named " + methodName);
+                MoPubLog.d("Couldn't perform custom method named " + methodName);
                 mpv.loadFailUrl(MoPubErrorCode.ADAPTER_NOT_FOUND);
             }
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
index d421dfb2..d1c8639b 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -43,8 +43,9 @@
 import android.view.View;
 import android.widget.FrameLayout;
 
+import com.mopub.common.MoPub;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Dips;
-import com.mopub.common.util.MoPubLog;
 import com.mopub.mobileads.factories.AdFetcherFactory;
 import com.mopub.mobileads.factories.HttpClientFactory;
 
@@ -60,9 +61,7 @@
 import static com.mopub.common.GpsHelper.GpsHelperListener;
 import static com.mopub.common.GpsHelper.asyncFetchAdvertisingInfo;
 import static com.mopub.common.GpsHelper.asyncFetchAdvertisingInfoIfNotCached;
-import static com.mopub.common.LocationService.LocationAwareness;
 import static com.mopub.common.LocationService.getLastKnownLocation;
-import static com.mopub.mobileads.MoPubView.DEFAULT_LOCATION_PRECISION;
 
 public class AdViewController {
     static final int MINIMUM_REFRESH_TIME_MILLISECONDS = 10000;
@@ -92,8 +91,6 @@
     private boolean mPreviousAutoRefreshSetting = true;
     private String mKeywords;
     private Location mLocation;
-    private LocationAwareness mLocationAwareness = LocationAwareness.NORMAL;
-    private int mLocationPrecision = DEFAULT_LOCATION_PRECISION;
     private boolean mIsTesting;
     private boolean mAdWasLoaded;
 
@@ -134,19 +131,21 @@ public MoPubView getMoPubView() {
     public void loadAd() {
         mAdWasLoaded = true;
         if (mAdConfiguration.getAdUnitId() == null) {
-            Log.d("MoPub", "Can't load an ad in this ad view because the ad unit ID is null. " +
+            MoPubLog.d("Can't load an ad in this ad view because the ad unit ID is null. " +
                     "Did you forget to call setAdUnitId()?");
             return;
         }
 
         if (!isNetworkAvailable()) {
-            Log.d("MoPub", "Can't load an ad because there is no network connectivity.");
+            MoPubLog.d("Can't load an ad because there is no network connectivity.");
             scheduleRefreshTimerIfEnabled();
             return;
         }
 
         if (mLocation == null) {
-            mLocation = getLastKnownLocation(mContext, mLocationPrecision, mLocationAwareness);
+            mLocation = getLastKnownLocation(mContext,
+                    MoPub.getLocationPrecision(),
+                    MoPub.getLocationAwareness());
         }
 
         // If we have access to Google Play Services (GPS) but the advertising info
@@ -158,10 +157,10 @@ public void loadAd() {
     void loadNonJavascript(String url) {
         if (url == null) return;
 
-        Log.d("MoPub", "Loading url: " + url);
+        MoPubLog.d("Loading url: " + url);
         if (mIsLoading) {
             if (mAdConfiguration.getAdUnitId() != null) {
-                Log.i("MoPub", "Already loading an ad for " + mAdConfiguration.getAdUnitId() + ", wait to finish.");
+                MoPubLog.i("Already loading an ad for " + mAdConfiguration.getAdUnitId() + ", wait to finish.");
             }
             return;
         }
@@ -174,7 +173,7 @@ void loadNonJavascript(String url) {
     }
 
     public void reload() {
-        Log.d("MoPub", "Reload ad: " + mUrl);
+        MoPubLog.d("Reload ad: " + mUrl);
         loadNonJavascript(mUrl);
     }
 
@@ -184,7 +183,7 @@ void loadFailUrl(MoPubErrorCode errorCode) {
         Log.v("MoPub", "MoPubErrorCode: " + (errorCode == null ? "" : errorCode.toString()));
 
         if (mAdConfiguration.getFailUrl() != null) {
-            Log.d("MoPub", "Loading failover url: " + mAdConfiguration.getFailUrl());
+            MoPubLog.d("Loading failover url: " + mAdConfiguration.getFailUrl());
             loadNonJavascript(mAdConfiguration.getFailUrl());
         } else {
             // No other URLs to try, so signal a failure.
@@ -293,14 +292,6 @@ public void setTesting(boolean enabled) {
         mIsTesting = enabled;
     }
 
-    int getLocationPrecision() {
-        return mLocationPrecision;
-    }
-
-    void setLocationPrecision(int precision) {
-        mLocationPrecision = Math.max(0, precision);
-    }
-
     AdConfiguration getAdConfiguration() {
         return mAdConfiguration;
     }
@@ -363,7 +354,7 @@ public void run () {
                     httpget.addHeader("User-Agent", mAdConfiguration.getUserAgent());
                     httpClient.execute(httpget);
                 } catch (Exception e) {
-                    Log.d("MoPub", "Impression tracking failed : " + mAdConfiguration.getImpressionUrl(), e);
+                    MoPubLog.d("Impression tracking failed : " + mAdConfiguration.getImpressionUrl(), e);
                 } finally {
                     httpClient.getConnectionManager().shutdown();
                 }
@@ -378,12 +369,12 @@ public void run () {
 
                 DefaultHttpClient httpClient = HttpClientFactory.create();
                 try {
-                    Log.d("MoPub", "Tracking click for: " + mAdConfiguration.getClickthroughUrl());
+                    MoPubLog.d("Tracking click for: " + mAdConfiguration.getClickthroughUrl());
                     HttpGet httpget = new HttpGet(mAdConfiguration.getClickthroughUrl());
                     httpget.addHeader("User-Agent", mAdConfiguration.getUserAgent());
                     httpClient.execute(httpget);
                 } catch (Exception e) {
-                    Log.d("MoPub", "Click tracking failed: " + mAdConfiguration.getClickthroughUrl(), e);
+                    MoPubLog.d("Click tracking failed: " + mAdConfiguration.getClickthroughUrl(), e);
                 } finally {
                     httpClient.getConnectionManager().shutdown();
                 }
@@ -411,7 +402,7 @@ String generateAdUrl() {
     }
 
     void adDidFail(MoPubErrorCode errorCode) {
-        Log.i("MoPub", "Ad failed to load.");
+        MoPubLog.i("Ad failed to load.");
         setNotLoading();
         scheduleRefreshTimerIfEnabled();
         getMoPubView().adFailed(errorCode);
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
index be3c3890..8e768f41 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
@@ -34,10 +34,11 @@
 
 import android.content.Context;
 import android.graphics.Color;
-import android.util.Log;
 import android.view.MotionEvent;
 import android.view.View;
 
+import com.mopub.common.logging.MoPubLog;
+
 import static com.mopub.common.util.VersionCode.ICE_CREAM_SANDWICH;
 import static com.mopub.common.util.VersionCode.currentApiLevel;
 import static com.mopub.mobileads.ViewGestureDetector.UserClickListener;
@@ -69,7 +70,7 @@ public void init(boolean isScrollable) {
     public void loadUrl(String url) {
         if (url == null) return;
 
-        Log.d("MoPub", "Loading url: " + url);
+        MoPubLog.d("Loading url: " + url);
         if (url.startsWith("javascript:")) {
             super.loadUrl(url);
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
index b87e3a06..b74bba0f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
@@ -37,7 +37,7 @@
 import android.content.Context;
 import android.content.Intent;
 
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.util.vast.VastVideoConfiguration;
 
 import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
index ec8681dc..0ff23a57 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
@@ -36,12 +36,13 @@
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
-import android.util.Log;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.RelativeLayout;
 import android.widget.VideoView;
 
+import com.mopub.common.logging.MoPubLog;
+
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
 
@@ -102,7 +103,7 @@ ViewGroup getLayout() {
 
 
     void videoError(boolean shouldFinish) {
-        Log.d("MoPub", "Error: video can not be played.");
+        MoPubLog.d("Error: video can not be played.");
         broadcastAction(ACTION_INTERSTITIAL_FAIL);
         if (shouldFinish) {
            mBaseVideoViewControllerListener.onFinish();
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
index 9f0ea011..e416a317 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
@@ -34,10 +34,10 @@
 
 import android.content.Context;
 import android.os.Handler;
-import android.util.Log;
 import android.view.View;
 
 import com.mopub.common.util.Json;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
 import com.mopub.mobileads.factories.CustomEventBannerFactory;
 
@@ -71,17 +71,17 @@ public CustomEventBannerAdapter(MoPubView moPubView, String className, String cl
         mTimeout = new Runnable() {
             @Override
             public void run() {
-                Log.d("MoPub", "Third-party network timed out.");
+                MoPubLog.d("Third-party network timed out.");
                 onBannerFailed(NETWORK_TIMEOUT);
                 invalidate();
             }
         };
 
-        Log.d("MoPub", "Attempting to invoke custom event: " + className);
+        MoPubLog.d("Attempting to invoke custom event: " + className);
         try {
             mCustomEventBanner = CustomEventBannerFactory.create(className);
         } catch (Exception exception) {
-            Log.d("MoPub", "Couldn't locate or instantiate custom event: " + className + ".");
+            MoPubLog.d("Couldn't locate or instantiate custom event: " + className + ".");
             mMoPubView.loadFailUrl(ADAPTER_NOT_FOUND);
             return;
         }
@@ -90,7 +90,7 @@ public void run() {
         try {
             mServerExtras = Json.jsonStringToMap(classData);
         } catch (Exception exception) {
-            Log.d("MoPub", "Failed to create Map from JSON: " + classData + exception.toString());
+            MoPubLog.d("Failed to create Map from JSON: " + classData + exception.toString());
         }
 
         mLocalExtras = mMoPubView.getLocalExtras();
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
index e52daf94..05562094 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
@@ -34,9 +34,9 @@
 
 import android.content.Context;
 import android.os.Handler;
-import android.util.Log;
 
 import com.mopub.common.util.Json;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import com.mopub.mobileads.factories.CustomEventInterstitialFactory;
 
@@ -70,17 +70,17 @@ public CustomEventInterstitialAdapter(final MoPubInterstitial moPubInterstitial,
         mTimeout = new Runnable() {
             @Override
             public void run() {
-                Log.d("MoPub", "Third-party network timed out.");
+                MoPubLog.d("Third-party network timed out.");
                 onInterstitialFailed(NETWORK_TIMEOUT);
                 invalidate();
             }
         };
 
-        Log.d("MoPub", "Attempting to invoke custom event: " + className);
+        MoPubLog.d("Attempting to invoke custom event: " + className);
         try {
             mCustomEventInterstitial = CustomEventInterstitialFactory.create(className);
         } catch (Exception exception) {
-            Log.d("MoPub", "Couldn't locate or instantiate custom event: " + className + ".");
+            MoPubLog.d("Couldn't locate or instantiate custom event: " + className + ".");
             mMoPubInterstitial.onCustomEventInterstitialFailed(ADAPTER_NOT_FOUND);
             return;
         }
@@ -89,7 +89,7 @@ public void run() {
         try {
             mServerExtras = Json.jsonStringToMap(jsonParams);
         } catch (Exception exception) {
-            Log.d("MoPub", "Failed to create Map from JSON: " + jsonParams);
+            MoPubLog.d("Failed to create Map from JSON: " + jsonParams);
         }
 
         mLocalExtras = mMoPubInterstitial.getLocalExtras();
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
index e2daeed9..e0a2c8d7 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
@@ -36,12 +36,12 @@
 import android.content.Intent;
 import android.graphics.Bitmap;
 import android.net.Uri;
-import android.util.Log;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
 
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.util.IntentUtils;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.util.Utils;
 
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
@@ -70,7 +70,7 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
             return true;
         }
 
-        Log.d("MoPub", "Ad clicked. Click URL: " + url);
+        MoPubLog.d("Ad clicked. Click URL: " + url);
 
         // this is added because http/s can also be intercepted
         if (!isWebSiteUrl(url) && IntentUtils.canHandleApplicationUrl(mContext, url)) {
@@ -152,7 +152,7 @@ private boolean handleNativeBrowserScheme(String url) {
         try {
             urlToOpenInNativeBrowser = uri.getQueryParameter("url");
         } catch (UnsupportedOperationException e) {
-            Log.w("MoPub", "Could not handle url: " + url);
+            MoPubLog.w("Could not handle url: " + url);
             return false;
         }
 
@@ -188,7 +188,7 @@ private boolean launchApplicationUrl(String url) {
 
     private void showMoPubBrowserForUrl(String url) {
         if (url == null || url.equals("")) url = "about:blank";
-        Log.d("MoPub", "Final URI to show in browser: " + url);
+        MoPubLog.d("Final URI to show in browser: " + url);
         Intent intent = new Intent(mContext, MoPubBrowser.class);
         intent.putExtra(MoPubBrowser.DESTINATION_URL_KEY, url);
         intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
@@ -213,7 +213,7 @@ private void handleCustomIntentFromUri(Uri uri) {
             action = uri.getQueryParameter("fnc");
             adData = uri.getQueryParameter("data");
         } catch (UnsupportedOperationException e) {
-            Log.w("MoPub", "Could not handle custom intent with uri: " + uri);
+            MoPubLog.w("Could not handle custom intent with uri: " + uri);
             return;
         }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
index 012ddcbb..8be315fa 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
@@ -34,11 +34,12 @@
 
 import android.content.Context;
 import android.content.SharedPreferences;
-import android.util.Log;
 
 import com.mopub.common.BaseUrlGenerator;
+import com.mopub.common.ClientMetadata;
 import com.mopub.common.GpsHelper;
 import com.mopub.common.SharedPreferencesHelper;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.factories.HttpClientFactory;
 
 import org.apache.http.HttpEntity;
@@ -74,7 +75,7 @@ public void reportAppOpen(Context context) {
         if (!isAlreadyTracked()) {
             GpsHelper.asyncFetchAdvertisingInfo(mContext, mConversionTrackerGpsHelperListener);
         } else {
-            Log.d("MoPub", "Conversion already tracked");
+            MoPubLog.d("Conversion already tracked");
         }
     }
 
@@ -89,9 +90,11 @@ public String generateUrlString(String serverHostname) {
 
             setApiVersion("6");
             setPackageId(mPackageName);
-            setUdid(getUdidFromContext(mContext));
+
+            ClientMetadata clientMetadata = ClientMetadata.getInstance(mContext);
+            setUdid(clientMetadata.getUdid());
             setDoNotTrack(GpsHelper.isLimitAdTrackingEnabled(mContext));
-            setAppVersion(getAppVersionFromContext(mContext));
+            setAppVersion(clientMetadata.getAppVersion());
             return getFinalUrlString();
         }
 
@@ -103,7 +106,7 @@ private void setPackageId(String packageName) {
     private class TrackOpen implements Runnable {
         public void run() {
             String url = new ConversionUrlGenerator().generateUrlString(TRACK_HOST);
-            Log.d("MoPub", "Conversion track: " + url);
+            MoPubLog.d("Conversion track: " + url);
 
             DefaultHttpClient httpClient = HttpClientFactory.create();
             HttpResponse response;
@@ -111,23 +114,23 @@ public void run() {
                 HttpGet httpget = new HttpGet(url);
                 response = httpClient.execute(httpget);
             } catch (Exception e) {
-                Log.d("MoPub", "Conversion track failed [" + e.getClass().getSimpleName() + "]: " + url);
+                MoPubLog.d("Conversion track failed [" + e.getClass().getSimpleName() + "]: " + url);
                 return;
             }
 
             if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
-                Log.d("MoPub", "Conversion track failed: Status code != 200.");
+                MoPubLog.d("Conversion track failed: Status code != 200.");
                 return;
             }
 
             HttpEntity entity = response.getEntity();
             if (entity == null || entity.getContentLength() == 0) {
-                Log.d("MoPub", "Conversion track failed: Response was empty.");
+                MoPubLog.d("Conversion track failed: Response was empty.");
                 return;
             }
 
             // If we made it here, the request has been tracked
-            Log.d("MoPub", "Conversion track successful.");
+            MoPubLog.d("Conversion track successful.");
             mSharedPreferences
                     .edit()
                     .putBoolean(mIsTrackedKey, true)
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
index d81f5c31..15daaade 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
@@ -35,8 +35,9 @@
 import android.app.Activity;
 import android.content.Context;
 import android.location.Location;
-import android.util.Log;
 
+import com.mopub.common.MoPub;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
 
 import java.util.Map;
@@ -180,22 +181,6 @@ public InterstitialAdListener getInterstitialAdListener() {
         return mInterstitialAdListener;
     }
 
-    public void setLocationAwareness(LocationAwareness awareness) {
-        mInterstitialView.setLocationAwareness(awareness);
-    }
-
-    public LocationAwareness getLocationAwareness() {
-        return mInterstitialView.getLocationAwareness();
-    }
-
-    public void setLocationPrecision(int precision) {
-        mInterstitialView.setLocationPrecision(precision);
-    }
-
-    public int getLocationPrecision() {
-        return mInterstitialView.getLocationPrecision();
-    }
-
     public void setTesting(boolean testing) {
         mInterstitialView.setTesting(testing);
     }
@@ -270,6 +255,26 @@ public void onCustomEventInterstitialDismissed() {
         }
     }
 
+    @Deprecated
+    public void setLocationAwareness(LocationAwareness locationAwareness) {
+        MoPub.setLocationAwareness(locationAwareness.getNewLocationAwareness());
+    }
+
+    @Deprecated
+    public LocationAwareness getLocationAwareness() {
+        return LocationAwareness.fromMoPubLocationAwareness(MoPub.getLocationAwareness());
+    }
+
+    @Deprecated
+    public void setLocationPrecision(int precision) {
+        MoPub.setLocationPrecision(precision);
+    }
+
+    @Deprecated
+    public int getLocationPrecision() {
+        return MoPub.getLocationPrecision();
+    }
+
     ////////////////////////////////////////////////////////////////////////////////////////////////
 
     public class MoPubInterstitialView extends MoPubView {
@@ -282,7 +287,7 @@ public MoPubInterstitialView(Context context) {
         @Override
         protected void loadCustomEvent(Map<String, String> paramsMap) {
             if (paramsMap == null) {
-                Log.d("MoPub", "Couldn't invoke custom event because the server did not specify one.");
+                MoPubLog.d("Couldn't invoke custom event because the server did not specify one.");
                 loadFailUrl(ADAPTER_NOT_FOUND);
                 return;
             }
@@ -291,7 +296,7 @@ protected void loadCustomEvent(Map<String, String> paramsMap) {
                 mCustomEventInterstitialAdapter.invalidate();
             }
 
-            Log.d("MoPub", "Loading custom event interstitial adapter.");
+            MoPubLog.d("Loading custom event interstitial adapter.");
 
             mCustomEventInterstitialAdapter = CustomEventInterstitialAdapterFactory.create(
                     MoPubInterstitial.this,
@@ -302,7 +307,7 @@ protected void loadCustomEvent(Map<String, String> paramsMap) {
         }
 
         protected void trackImpression() {
-            Log.d("MoPub", "Tracking impression for interstitial.");
+            MoPubLog.d("Tracking impression for interstitial.");
             if (mAdViewController != null) mAdViewController.trackImpression();
         }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
index c010a82e..ca13e254 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -39,11 +39,12 @@
 import android.content.IntentFilter;
 import android.location.Location;
 import android.util.AttributeSet;
-import android.util.Log;
 import android.view.View;
 import android.webkit.WebViewDatabase;
 import android.widget.FrameLayout;
 
+import com.mopub.common.MoPub;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.ManifestUtils;
 import com.mopub.common.util.Visibility;
 import com.mopub.mobileads.factories.AdViewControllerFactory;
@@ -77,7 +78,6 @@
     private Context mContext;
     private int mScreenVisibility;
     private BroadcastReceiver mScreenStateReceiver;
-    private LocationAwareness mLocationAwareness;
 
     private BannerAdListener mBannerAdListener;
     
@@ -99,7 +99,6 @@ public MoPubView(Context context, AttributeSet attrs) {
 
         mContext = context;
         mScreenVisibility = getVisibility();
-        mLocationAwareness = LocationAwareness.NORMAL;
 
         setHorizontalScrollBarEnabled(false);
         setVerticalScrollBarEnabled(false);
@@ -110,7 +109,7 @@ public MoPubView(Context context, AttributeSet attrs) {
         // Here, we'll work around it by trying to create a file store and then just go inert
         // if it's not accessible.
         if (WebViewDatabase.getInstance(context) == null) {
-            Log.e("MoPub", "Disabling MoPub. Local cache file is inaccessible so MoPub will " +
+            MoPubLog.e("Disabling MoPub. Local cache file is inaccessible so MoPub will " +
                     "fail if we try to create a WebView. Details of this Android bug found at:" +
                     "http://code.google.com/p/android/issues/detail?id=10789");
             return;
@@ -121,6 +120,7 @@ public MoPubView(Context context, AttributeSet attrs) {
     }
 
     private void registerScreenStateBroadcastReceiver() {
+        // message about leaked IntentReceiver
         mScreenStateReceiver = new BroadcastReceiver() {
             public void onReceive(final Context context, final Intent intent) {
                 if (!Visibility.isScreenVisible(mScreenVisibility) || intent == null) {
@@ -146,12 +146,14 @@ private void unregisterScreenStateBroadcastReceiver() {
         try {
             mContext.unregisterReceiver(mScreenStateReceiver);
         } catch (Exception IllegalArgumentException) {
-            Log.d("MoPub", "Failed to unregister screen state broadcast receiver (never registered).");
+            MoPubLog.d("Failed to unregister screen state broadcast receiver (never registered).");
         }
     }
 
     public void loadAd() {
-        if (mAdViewController != null) mAdViewController.loadAd();
+        if (mAdViewController != null) {
+            mAdViewController.loadAd();
+        }
     }
 
     /*
@@ -183,7 +185,7 @@ protected void loadFailUrl(MoPubErrorCode errorCode) {
 
     protected void loadCustomEvent(Map<String, String> paramsMap) {
         if (paramsMap == null) {
-            Log.d("MoPub", "Couldn't invoke custom event because the server did not specify one.");
+            MoPubLog.d("Couldn't invoke custom event because the server did not specify one.");
             loadFailUrl(ADAPTER_NOT_FOUND);
             return;
         }
@@ -192,7 +194,7 @@ protected void loadCustomEvent(Map<String, String> paramsMap) {
             mCustomEventBannerAdapter.invalidate();
         }
 
-        Log.d("MoPub", "Loading custom event adapter.");
+        MoPubLog.d("Loading custom event adapter.");
 
         mCustomEventBannerAdapter = CustomEventBannerAdapterFactory.create(
                 this,
@@ -211,7 +213,7 @@ protected void registerClick() {
     }
 
     protected void trackNativeImpression() {
-        Log.d("MoPub", "Tracking impression for native adapter.");
+        MoPubLog.d("Tracking impression for native adapter.");
         if (mAdViewController != null) mAdViewController.trackImpression();
     }
 
@@ -237,7 +239,7 @@ private void setAdVisibility(final int visibility) {
     }
 
     protected void adLoaded() {
-        Log.d("MoPub", "adLoaded");
+        MoPubLog.d("adLoaded");
         
         if (mBannerAdListener != null) {
             mBannerAdListener.onBannerLoaded(this);
@@ -345,24 +347,6 @@ public BannerAdListener getBannerAdListener() {
         return mBannerAdListener;
     }
 
-    public void setLocationAwareness(LocationAwareness awareness) {
-        mLocationAwareness = awareness;
-    }
-
-    public LocationAwareness getLocationAwareness() {
-        return mLocationAwareness;
-    }
-
-    public void setLocationPrecision(int precision) {
-        if (mAdViewController != null) {
-            mAdViewController.setLocationPrecision(precision);
-        }
-    }
-
-    public int getLocationPrecision() {
-        return (mAdViewController != null) ? mAdViewController.getLocationPrecision() : 0;
-    }
-
     public void setLocalExtras(Map<String, Object> localExtras) {
         if (mAdViewController != null) mAdViewController.setLocalExtras(localExtras);
     }
@@ -381,7 +365,7 @@ public void setAutorefreshEnabled(boolean enabled) {
     public boolean getAutorefreshEnabled() {
         if (mAdViewController != null) return mAdViewController.getAutorefreshEnabled();
         else {
-            Log.d("MoPub", "Can't get autorefresh status for destroyed MoPubView. " +
+            MoPubLog.d("Can't get autorefresh status for destroyed MoPubView. " +
                     "Returning false.");
             return false;
         }
@@ -398,7 +382,7 @@ public void setTesting(boolean testing) {
     public boolean getTesting() {
         if (mAdViewController != null) return mAdViewController.getTesting();
         else {
-            Log.d("MoPub", "Can't get testing status for destroyed MoPubView. " +
+            MoPubLog.d("Can't get testing status for destroyed MoPubView. " +
                     "Returning false.");
             return false;
         }
@@ -417,6 +401,26 @@ AdViewController getAdViewController() {
         return mAdViewController;
     }
 
+    @Deprecated
+    public void setLocationAwareness(LocationAwareness locationAwareness) {
+        MoPub.setLocationAwareness(locationAwareness.getNewLocationAwareness());
+    }
+
+    @Deprecated
+    public LocationAwareness getLocationAwareness() {
+        return LocationAwareness.fromMoPubLocationAwareness(MoPub.getLocationAwareness());
+    }
+
+    @Deprecated
+    public void setLocationPrecision(int precision) {
+        MoPub.setLocationPrecision(precision);
+    }
+
+    @Deprecated
+    public int getLocationPrecision() {
+        return MoPub.getLocationPrecision();
+    }
+
     @Deprecated
     public interface OnAdWillLoadListener {
         public void OnAdWillLoad(MoPubView m, String url);
@@ -479,7 +483,7 @@ public void setOnAdClickedListener(OnAdClickedListener listener) {
 
     @Deprecated
     protected void adWillLoad(String url) {
-        Log.d("MoPub", "adWillLoad: " + url);
+        MoPubLog.d("adWillLoad: " + url);
         if (mOnAdWillLoadListener != null) mOnAdWillLoadListener.OnAdWillLoad(this, url);
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBanner.java
index 35f60206..85455ffe 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBanner.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBanner.java
@@ -34,11 +34,10 @@
 
 import android.content.Context;
 import android.net.Uri;
-
 import com.mopub.mobileads.MraidView.ViewState;
 import com.mopub.mobileads.factories.MraidViewFactory;
 
-import java.util.Map;
+import java.util.*;
 
 import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommand.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommand.java
index 34913473..deba4941 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommand.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommand.java
@@ -32,9 +32,9 @@
 
 package com.mopub.mobileads;
 
-import android.util.Log;
+import com.mopub.common.logging.MoPubLog;
 
-import java.util.*;
+import java.util.Map;
 
 import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_RESIZE_PROPERTIES;
 import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.OPEN;
@@ -136,7 +136,7 @@ void execute() {
             mView.getDisplayController().showUserDownloadImageAlert(url);
         } else {
             mView.fireErrorEvent(STORE_PICTURE, "Image can't be stored with null or empty URL");
-            Log.d("MoPub", "Invalid URI for Mraid Store Picture.");
+            MoPubLog.d("Invalid URI for Mraid Store Picture.");
         }
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
index a541c768..aa59e145 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
@@ -66,6 +66,7 @@
 import android.widget.Toast;
 
 import com.mopub.common.util.Dips;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Streams;
 import com.mopub.mobileads.MraidView.ExpansionStyle;
 import com.mopub.mobileads.MraidView.NativeCloseButtonStyle;
@@ -347,7 +348,7 @@ protected void showUserDownloadImageAlert(String imageUrl) {
         Context context = getContext();
         if (!isStorePictureSupported(context)) {
             getMraidView().fireErrorEvent(STORE_PICTURE, "Error downloading file - the device does not have an SD card mounted, or the Android permission is not granted.");
-            Log.d("MoPub", "Error downloading file - the device does not have an SD card mounted, or the Android permission is not granted.");
+            MoPubLog.d("Error downloading file - the device does not have an SD card mounted, or the Android permission is not granted.");
             return;
         }
 
@@ -389,6 +390,7 @@ public void run() {
                     HttpResponse httpResponse = httpClient.execute(httpGet);
                     pictureInputStream = httpResponse.getEntity().getContent();
 
+                    // do we have this header on non-redirects?
                     String redirectLocation = HttpResponses.extractHeader(httpResponse, LOCATION);
                     if (redirectLocation != null) {
                         uri = URI.create(redirectLocation);
@@ -408,7 +410,7 @@ public void run() {
                         public void run() {
                             showUserToast("Image failed to download.");
                             getMraidView().fireErrorEvent(STORE_PICTURE, "Error downloading and saving image file.");
-                            Log.d("MoPub", "Error downloading and saving image file.");
+                            MoPubLog.d("Error downloading and saving image file.");
                         }
                     });
                 } finally {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
index 9f246b71..e937ad68 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
@@ -36,12 +36,12 @@
 import android.content.ActivityNotFoundException;
 import android.content.Intent;
 import android.os.Bundle;
-import android.util.Log;
 import android.view.View;
 import android.view.Window;
 import android.view.WindowManager;
 
 import com.mopub.common.util.IntentUtils;
+import com.mopub.common.logging.MoPubLog;
 
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
@@ -61,7 +61,7 @@ protected void onCreate(Bundle savedInstanceState) {
         if (adConfiguration != null) {
             mBroadcastIdentifier = adConfiguration.getBroadcastIdentifier();
         } else {
-            Log.d("MoPub", "Unable to obtain broadcast identifier. Video interactions cannot be tracked.");
+            MoPubLog.d("Unable to obtain broadcast identifier. Video interactions cannot be tracked.");
         }
 
         try {
@@ -159,7 +159,7 @@ public void onStartActivityForResult(final Class<? extends Activity> clazz,
         try {
             startActivityForResult(intent, requestCode);
         } catch (ActivityNotFoundException e) {
-            Log.d("MoPub", "Activity " + clazz.getName() + " not found. Did you declare it in your AndroidManifest.xml?");
+            MoPubLog.d("Activity " + clazz.getName() + " not found. Did you declare it in your AndroidManifest.xml?");
         }
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoViewController.java
index 4d706215..67582d38 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoViewController.java
@@ -42,6 +42,7 @@
 import android.widget.VideoView;
 
 import com.mopub.common.util.Dips;
+import com.mopub.common.util.Drawables;
 
 import static android.view.View.GONE;
 import static android.view.View.OnClickListener;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
index dfe35b4f..59d74021 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
@@ -43,6 +43,7 @@
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
 
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Strings;
 import com.mopub.mobileads.factories.HttpClientFactory;
 import com.mopub.mobileads.resource.MraidJavascript;
@@ -227,7 +228,7 @@ public void loadUrl(String url) {
                 outString = Strings.fromStream(entity.getContent());
             }
         } catch (IllegalArgumentException e) {
-            Log.d("MoPub", "Mraid loadUrl failed (IllegalArgumentException): "+url);
+            MoPubLog.d("Mraid loadUrl failed (IllegalArgumentException): " + url);
             notifyOnFailureListener();
             return;
         } catch (ClientProtocolException e) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/ToolbarWidget.java b/mopub-sdk/src/main/java/com/mopub/mobileads/ToolbarWidget.java
index dc3d983b..382b0e03 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/ToolbarWidget.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/ToolbarWidget.java
@@ -4,7 +4,6 @@
 import android.graphics.Color;
 import android.graphics.drawable.Drawable;
 import android.text.TextUtils;
-import android.util.Log;
 import android.view.Gravity;
 import android.view.View;
 import android.widget.ImageView;
@@ -13,6 +12,7 @@
 import android.widget.TextView;
 
 import com.mopub.common.util.Dips;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Utils;
 import com.mopub.mobileads.resource.TextDrawable;
 
@@ -184,7 +184,7 @@ void updateImageText(final String text) {
             final TextDrawable textDrawable = (TextDrawable) mImageView.getDrawable();
             textDrawable.updateText(text);
         } catch (Exception e) {
-            Log.d("MoPub", "Unable to update ToolbarWidget text.");
+            MoPubLog.d("Unable to update ToolbarWidget text.");
         }
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoDownloadTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoDownloadTask.java
index 0d3f14d6..efd40259 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoDownloadTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoDownloadTask.java
@@ -37,7 +37,7 @@
 
 import com.mopub.common.CacheService;
 import com.mopub.common.HttpClient;
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.HttpGet;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
index b103e4d9..9c786497 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
@@ -57,7 +57,7 @@
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.Dips;
 import com.mopub.common.util.Drawables;
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Streams;
 import com.mopub.common.util.VersionCode;
 import com.mopub.mobileads.util.vast.VastCompanionAd;
@@ -266,6 +266,7 @@ private void downloadCompanionAd() {
     }
 
     private Runnable createVideoProgressCheckerRunnable() {
+        // This code could be pulled into it's own class
         return new Runnable() {
             @Override
             public void run() {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/ViewGestureDetector.java b/mopub-sdk/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
index f02e5e2e..8d2c730d 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
@@ -33,11 +33,12 @@
 package com.mopub.mobileads;
 
 import android.content.Context;
-import android.util.Log;
 import android.view.GestureDetector;
 import android.view.MotionEvent;
 import android.view.View;
 
+import com.mopub.common.logging.MoPubLog;
+
 public class ViewGestureDetector extends GestureDetector {
     private final View mView;
 
@@ -69,7 +70,7 @@ void sendTouchEvent(MotionEvent motionEvent) {
                 if (mUserClickListener != null) {
                     mUserClickListener.onUserClick();
                 } else {
-                    Log.d("MoPub", "View's onUserClick() is not registered.");
+                    MoPubLog.d("View's onUserClick() is not registered.");
                 }
                 mAdAlertGestureListener.finishGestureDetection();
                 break;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
index 7c20de9f..5cfb84ed 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
@@ -1,11 +1,13 @@
 package com.mopub.mobileads;
 
 import android.content.Context;
-import android.os.Build;
+import android.location.Location;
 
 import com.mopub.common.AdUrlGenerator;
-import com.mopub.common.GpsHelper;
+import com.mopub.common.ClientMetadata;
+import com.mopub.common.LocationService;
 import com.mopub.common.MoPub;
+import com.mopub.common.util.DateAndTime;
 
 import static com.mopub.mobileads.util.Mraids.isStorePictureSupported;
 
@@ -18,40 +20,50 @@ public WebViewAdUrlGenerator(Context context) {
     public String generateUrlString(String serverHostname) {
         initUrlString(serverHostname, MoPubView.AD_HANDLER);
 
+        final ClientMetadata clientMetadata = ClientMetadata.getInstance(mContext);
+
         setApiVersion("6");
 
         setAdUnitId(mAdUnitId);
 
-        setSdkVersion(MoPub.SDK_VERSION);
+        setSdkVersion(clientMetadata.getSdkVersion());
 
-        setDeviceInfo(Build.MANUFACTURER, Build.MODEL, Build.PRODUCT);
+        setDeviceInfo(clientMetadata.getDeviceManufacturer(),
+                clientMetadata.getDeviceModel(),
+                clientMetadata.getDeviceProduct());
 
-        setUdid(getUdidFromContext(mContext));
+        setUdid(clientMetadata.getUdid());
 
-        setDoNotTrack(GpsHelper.isLimitAdTrackingEnabled(mContext));
+        setDoNotTrack(clientMetadata.getDoNoTrack());
 
         setKeywords(mKeywords);
 
-        setLocation(mLocation);
+        Location location = mLocation;
+        if (location == null) {
+            location = LocationService.getLastKnownLocation(mContext,
+                    MoPub.getLocationPrecision(),
+                    MoPub.getLocationAwareness());
+        }
+        setLocation(location);
 
-        setTimezone(AdUrlGenerator.getTimeZoneOffsetString());
+        setTimezone(DateAndTime.getTimeZoneOffsetString());
 
-        setOrientation(mContext.getResources().getConfiguration().orientation);
+        setOrientation(clientMetadata.getOrientationString());
 
-        setDensity(mContext.getResources().getDisplayMetrics().density);
+        setDensity(clientMetadata.getDensity());
 
         setMraidFlag(detectIsMraidSupported());
 
-        String networkOperator = getNetworkOperator();
+        String networkOperator = clientMetadata.getNetworkOperator();
         setMccCode(networkOperator);
         setMncCode(networkOperator);
 
-        setIsoCountryCode(mTelephonyManager.getNetworkCountryIso());
-        setCarrierName(mTelephonyManager.getNetworkOperatorName());
+        setIsoCountryCode(clientMetadata.getIsoCountryCode());
+        setCarrierName(clientMetadata.getNetworkOperatorName());
 
-        setNetworkType(getActiveNetworkType());
+        setNetworkType(clientMetadata.getActiveNetworkType());
 
-        setAppVersion(getAppVersionFromContext(mContext));
+        setAppVersion(clientMetadata.getAppVersion());
 
         setExternalStoragePermission(isStorePictureSupported(mContext));
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
index 3b128491..5081e854 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
@@ -53,6 +53,9 @@
             "  // Establish the root mraidbridge object.\n" +
             "  var mraidbridge = window.mraidbridge = {};\n" +
             "\n" +
+            "  // native SDK is ready to process mraid commands.\n" +
+            "  var nativeSDKFiredReady = false;\n" +
+            "\n" +
             "  // Listeners for bridge events.\n" +
             "  var listeners = {};\n" +
             "\n" +
@@ -65,6 +68,7 @@
             "  //////////////////////////////////////////////////////////////////////////////////////////////////\n" +
             "\n" +
             "  mraidbridge.fireReadyEvent = function() {\n" +
+            "    nativeSDKFiredReady = true;\n" +
             "    mraidbridge.fireEvent('ready');\n" +
             "  };\n" +
             "\n" +
@@ -99,6 +103,12 @@
             "  };\n" +
             "\n" +
             "  mraidbridge.executeNativeCall = function(command) {\n" +
+            "    if (!nativeSDKFiredReady) {\n" +
+            "        console.log('rejecting ' + command + ' because mraid is not ready');\n" +
+            "        mraidbridge.fireErrorEvent('mraid is not ready', command);\n" +
+            "        return;\n" +
+            "    }\n" +
+            "\n" +
             "    var call = 'mraid://' + command;\n" +
             "\n" +
             "    var key, value;\n" +
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Utils.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/Utils.java
index 6ed1f14e..1ff6b313 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Utils.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/Utils.java
@@ -35,7 +35,8 @@
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
-import android.util.Log;
+
+import com.mopub.common.logging.MoPubLog;
 
 public class Utils {
     private Utils() {}
@@ -47,7 +48,7 @@ public static boolean executeIntent(Context context, Intent intent, String error
             }
             context.startActivity(intent);
         } catch (Exception e) {
-            Log.d("MoPub", (errorMessage != null)
+            MoPubLog.d((errorMessage != null)
                     ? errorMessage
                     : "Unable to start intent.");
             return false;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java
index b3fa2bcb..c61cf639 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java
@@ -6,7 +6,7 @@
 
 import com.mopub.common.CacheService;
 import com.mopub.common.util.AsyncTasks;
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.VastVideoDownloadTask;
 
 import java.util.ArrayList;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregator.java
index 13fd5b14..e9d377ed 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregator.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregator.java
@@ -4,7 +4,7 @@
 import android.os.AsyncTask;
 
 import com.mopub.common.HttpClient;
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Strings;
 
 import org.apache.http.HttpEntity;
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java b/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
index 3b6b5408..6cc0ca94 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
@@ -6,7 +6,7 @@
 import android.view.ViewGroup;
 
 import com.mopub.common.VisibleForTesting;
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 
 import java.lang.ref.WeakReference;
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java b/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java
index a7acfe06..0677dcec 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java
@@ -2,7 +2,7 @@
 
 import android.view.View;
 
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 
 import java.util.HashMap;
 import java.util.HashSet;
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ClientPositioningSource.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ClientPositioningSource.java
new file mode 100644
index 00000000..bcfea7c7
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ClientPositioningSource.java
@@ -0,0 +1,27 @@
+package com.mopub.nativeads;
+
+import android.os.Handler;
+
+import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
+
+/**
+ * Returns a preset client positioning object.
+ */
+class ClientPositioningSource implements PositioningSource {
+    private Handler mHandler = new Handler();
+    private final MoPubClientPositioning mPositioning;
+
+    ClientPositioningSource(MoPubClientPositioning positioning) {
+        mPositioning = MoPubNativeAdPositioning.clone(positioning);
+    }
+
+    @Override
+    public void loadPositions(final String adUnitId, final PositioningListener listener) {
+        mHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                listener.onLoad(mPositioning);
+            }
+        });
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/Constants.java b/mopub-sdk/src/main/java/com/mopub/nativeads/Constants.java
index 389731aa..ad256b8b 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/Constants.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/Constants.java
@@ -5,4 +5,7 @@
 
     static final String NATIVE_HOST = "ads.mopub.com";
     static final String NATIVE_HANDLER = "/m/ad";
+
+    static final String POSITIONING_HOST = "ads.mopub.com";
+    static final String POSITIONING_HANDLER = "/m/pos";
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
index 3aab114d..224fa646 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
@@ -5,7 +5,7 @@
 import com.mopub.common.DownloadResponse;
 import com.mopub.common.HttpResponses;
 import com.mopub.common.util.Json;
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.ResponseHeader;
 import com.mopub.nativeads.factories.CustomEventNativeFactory;
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java
index 5dcda785..ce6b2988 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java
@@ -35,6 +35,7 @@ void execute() {
 
     void failAllTasks() {
         if (mFailed.compareAndSet(false, true)) {
+            // See ImageDownloadTaskManager for an example
             mImageTaskManagerListener.onFail();
         }
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDownloadTaskManager.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDownloadTaskManager.java
index 0a927cbb..b022aa2f 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDownloadTaskManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDownloadTaskManager.java
@@ -3,7 +3,7 @@
 import com.mopub.common.DownloadResponse;
 import com.mopub.common.DownloadTask;
 import com.mopub.common.util.AsyncTasks;
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.HttpGet;
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageService.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageService.java
index f8b93df9..d020becc 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageService.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageService.java
@@ -10,7 +10,7 @@
 import com.mopub.common.CacheService;
 import com.mopub.common.DownloadResponse;
 import com.mopub.common.VisibleForTesting;
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.VersionCode;
 
 import java.util.ArrayList;
@@ -218,8 +218,13 @@ public static Bitmap byteArrayToBitmap(final byte[] bytes, final int requestedWi
         while (getMemBytes(options) > TWO_MEGABYTES) {
             options.inSampleSize *= 2;
         }
+
         options.inJustDecodeBounds = false;
         Bitmap bitmap = decodeByteArray(bytes, 0, bytes.length, options);
+        if (bitmap == null) {
+            return null;
+        }
+
         final int subsampleWidth = bitmap.getWidth();
 
         // If needed, scale the bitmap so it's exactly the requested width.
@@ -229,6 +234,7 @@ public static Bitmap byteArrayToBitmap(final byte[] bytes, final int requestedWi
             bitmap = Bitmap.createScaledBitmap(subsampledBitmap, requestedWidth, requestedHeight, true);
             subsampledBitmap.recycle();
         }
+        
         return bitmap;
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageViewService.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageViewService.java
index 3232d17f..ef337e0c 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageViewService.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageViewService.java
@@ -4,7 +4,7 @@
 import android.widget.ImageView;
 
 import com.mopub.common.VisibleForTesting;
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Utils;
 
 import java.lang.ref.WeakReference;
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
index eadf27cc..04fb32cd 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
@@ -11,7 +11,9 @@
 import android.widget.ListView;
 
 import com.mopub.common.VisibleForTesting;
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
+import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubServerPositioning;
 
 import java.util.List;
 import java.util.WeakHashMap;
@@ -40,14 +42,45 @@
     private MoPubNativeAdLoadedListener mAdLoadedListener;
 
     /**
+     * Creates a new MoPubAdAdapter object.
+     *
+     * By default, the adapter will contact the server to determine ad positions. If you
+     * wish to hard-code positions in your app, see {@link MoPubAdAdapter(Context,
+     * MoPubClientPositioning)}.
+     *
+     * @param context The activity context.
+     * @param originalAdapter Your original adapter.
+     */
+    public MoPubAdAdapter(final Context context, final Adapter originalAdapter) {
+        this(context, originalAdapter, MoPubNativeAdPositioning.serverPositioning());
+    }
+
+    /**
+     * Creates a new MoPubAdAdapter object, using server positioning.
+     *
+     * @param context The activity context.
+     * @param originalAdapter Your original adapter.
+     * @param adPositioning A positioning object for specifying where ads will be placed in your
+     * stream. See {@link MoPubNativeAdPositioning#serverPositioning()}.
+     */
+    public MoPubAdAdapter(final Context context,
+            final Adapter originalAdapter,
+            final MoPubServerPositioning adPositioning) {
+        this(new MoPubStreamAdPlacer(context, adPositioning), originalAdapter,
+                new VisibilityTracker(context));
+    }
+
+    /**
+     * Creates a new MoPubAdAdapter object, using client positioning.
+     *
      * @param context The activity context.
      * @param originalAdapter Your original adapter.
      * @param adPositioning A positioning object for specifying where ads will be placed in your
-     * stream.
+     * stream. See {@link MoPubNativeAdPositioning#clientPositioning()}.
      */
     public MoPubAdAdapter(final Context context,
             final Adapter originalAdapter,
-            final MoPubNativeAdPositioning adPositioning) {
+            final MoPubClientPositioning adPositioning) {
         this(new MoPubStreamAdPlacer(context, adPositioning), originalAdapter,
                 new VisibilityTracker(context));
     }
@@ -122,7 +155,7 @@ void handleAdRemoved(final int position) {
      *
      * @param adRenderer The ad renderer.
      */
-    public final void registerAdRenderer(final MoPubNativeAdRenderer adRenderer) {
+    public final void registerAdRenderer(final MoPubAdRenderer adRenderer) {
         if (adRenderer == null) {
             MoPubLog.w("Tried to set a null ad renderer on the placer.");
             return;
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
index 338dc9c9..72bd60fb 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
@@ -2,7 +2,7 @@
 
 import android.content.Context;
 
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 
 import org.json.JSONArray;
 import org.json.JSONException;
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
index 4d3aad64..c09b2c77 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
@@ -11,7 +11,7 @@
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.DeviceUtils;
 import com.mopub.common.util.ManifestUtils;
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.ResponseHeader;
 
 import org.apache.http.HttpStatus;
@@ -242,6 +242,7 @@ public void onNativeAdFailed(final NativeErrorCode errorCode) {
                     if (context == null) {
                         return;
                     }
+
                     CustomEventNativeAdapter.loadNativeAd(
                             context,
                             mLocalExtras,
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java
index d21c39b3..593439ee 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java
@@ -1,100 +1,139 @@
 package com.mopub.nativeads;
 
-import android.util.SparseArray;
-
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.Preconditions;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
 /**
- * A positioning object used to specify ad positions in client SDK integration code.
- *
- * Client positioning allows you to:
- * <ul>
- * <li>Specify fixed positions for ads</li>
- * <li>Specify an spacing interval for ads, starting at the last fixed position</li>
- * <li>Override the ad unit for a given fixed ad position. This is useful to
- * direct-sell a "premium" ad unit at a specified position. It can also be useful
- * if you want to track a position separately from other positions in the MoPub UI.</li>
- * </ul>
- *
- * For example, to space ads every 5 items, starting at position 3:
- * <code>
- * MoPubNativeAdPositioning positioning = new MoPubNativeAdPositioning.Builder()
- *     .addFixedPosition(3)
- *     .enableRepeatingPositions(5)
- *     .build();
- * }
- * </code>
+ * Provides factory methods for setting up native ad positions.
  *
- * {@code MoPubNativeAdPositioning} is an immutable class. To create a new instance, use
- * {@link MoPubNativeAdPositioning.Builder}.
+ * This class supports 2 types of positioning to use when placing ads into your stream:
+ * <ol>
+ *     <li><b>Server positioning</b>. The SDK will connect to the MoPub server to determine the
+ *     optimal positions for ads. You can also configure these positions yourself using the
+ *     MoPub publisher UI. We recommend using server positioning, and it is the default if you
+ *     do not specify positioning when loading ads.</li>
+ *     <li><b>Client positioning.</b> Requires you to hard-code positions into your app. You
+ *     can specify fixed positions for ads, as well as a repeating interval.
+ *     </li>
+ * </ol>
  */
 public final class MoPubNativeAdPositioning {
     /**
-     * Constant for indicating that ad positions should not repeat.
+     * Allows the SDK to connect to the MoPub server in order to determine ad
+     * positions.
+     */
+    public static class MoPubServerPositioning {
+        // No-op. This is used by the ad placer as an indicator to use server positioning.
+    }
+
+    /**
+     * Allows hard-coding ad positions into your app.
      */
-    public static final int NO_REPEAT = -1;
+    public static class MoPubClientPositioning {
+        /**
+         * Constant indicating that ad positions should not repeat.
+         */
+        public static final int NO_REPEAT = Integer.MAX_VALUE;
+
+        private final ArrayList<Integer> mFixedPositions = new ArrayList<Integer>();
+        private int mRepeatInterval = NO_REPEAT;
 
-    private final int mRepeatInterval;
-    private final List<Integer> mFixedPositions;
-    private final SparseArray<String> mAdUnitOverrides;
+        public MoPubClientPositioning() {
+        }
+
+        /**
+         * Specifies a fixed ad position.
+         *
+         * @param position The ad position.
+         * @return This object for easy use in chained setters.
+         */
+        public MoPubClientPositioning addFixedPosition(final int position) {
+            if (!Preconditions.NoThrow.checkArgument(position >= 0)) {
+                return this;
+            }
 
-    private MoPubNativeAdPositioning(final int repeatInterval, final List<Integer> fixedPositions,
-            final SparseArray<String> adUnitOverrides) {
-        mRepeatInterval = repeatInterval;
+            // Add in sorted order if this does not exist.
+            int index = Collections.binarySearch(mFixedPositions, position);
+            if (index < 0) {
+                mFixedPositions.add(~index, position);
+            }
+            return this;
+        }
 
-        // Safe copy the positions to avoid modification
-        mFixedPositions = new ArrayList<Integer>(fixedPositions);
+        /**
+         * Returns an ordered array of fixed ad positions.
+         *
+         * @return Fixed ad positions.
+         */
+        List<Integer> getFixedPositions() {
+            return mFixedPositions;
+        }
 
-        // Safe copy overrides. 'clone' is protected on pre-ICS devices, so we copy manually.
-        mAdUnitOverrides = new SparseArray<String>(adUnitOverrides.size());
-        for (int i = 0; i < adUnitOverrides.size(); ++i) {
-            mAdUnitOverrides.put(adUnitOverrides.keyAt(i), adUnitOverrides.valueAt(i));
+        /**
+         * Enables showing ads ad at a repeated interval.
+         *
+         * @param interval The frequency at which to show ads. Must be an integer greater than 1 or
+         * the constant NO_REPEAT.
+         * @return This object for easy use in chained setters.
+         */
+        public MoPubClientPositioning enableRepeatingPositions(final int interval) {
+            if (!Preconditions.NoThrow.checkArgument(
+                    interval > 1, "Repeating interval must be greater than 1")) {
+                mRepeatInterval = NO_REPEAT;
+                return this;
+            }
+            mRepeatInterval = interval;
+            return this;
+        }
+
+        /**
+         * Returns the repeating ad interval.
+         *
+         * Repeating ads start after the last fixed position. Returns {@link #NO_REPEAT} if there is
+         * no repeating interval.
+         *
+         * @return The repeating ad interval.
+         */
+        int getRepeatingInterval() {
+            return mRepeatInterval;
         }
     }
 
-    /**
-     * Returns an ordered array of fixed ad positions.
-     *
-     * @return Fixed ad positions.
-     */
-    public List<Integer> getFixedPositions() {
-        return mFixedPositions;
+    static MoPubClientPositioning clone(MoPubClientPositioning positioning) {
+        MoPubClientPositioning clone = new MoPubClientPositioning();
+        clone.mFixedPositions.addAll(positioning.mFixedPositions);
+        clone.mRepeatInterval = positioning.mRepeatInterval;
+        return clone;
     }
 
     /**
-     * Returns the repeating ad interval.
-     *
-     * Repeating ads start after the last fixed position. Returns -1 if there is no repeating
-     * interval.
-     *
-     * @return The repeating ad interval.
+     * Creates and returns a {@link MoPubClientPositioning} object.
+     * @return A new positioning object.
      */
-    public int getRepeatingInterval() {
-        return mRepeatInterval;
+    public static MoPubClientPositioning clientPositioning() {
+        return new MoPubClientPositioning();
     }
 
     /**
-     * Returns the overridden ad unit ID for the given position.
-     *
-     * Returns {@code null} if the position is not an ad, or if there is no overridden ad unit for
-     * this position.
-     *
-     * @param position The ad position.
-     * @return The overridden ad unit ID.
+     * Creates and returns a {@link MoPubServerPositioning} object.
+     * @return A new positioning object.
      */
-    public String getAdUnitIdOverride(int position) {
-        return mAdUnitOverrides.get(position);
+    public static MoPubServerPositioning serverPositioning() {
+        return new MoPubServerPositioning();
     }
 
     /**
-     * Creates and returns a {@code MoPubNativeAdPositioning.Builder}.
+     * Creates and returns a {@link MoPubNativeAdPositioning.Builder}.
      *
      * @return A new builder.
+     * @deprecated We recommend using {@link #serverPositioning()} and specifying positioning in
+     * the MoPub UI. If you still want to hard-code positioning information in your app,
+     * use {@link #clientPositioning} instead of this builder.
      */
+    @Deprecated
     public static Builder newBuilder() {
         return new Builder();
     }
@@ -102,70 +141,17 @@ public static Builder newBuilder() {
     /**
      * A Builder class for the ad positioning.
      */
-    public static final class Builder {
-        private int mRepeatInterval = MoPubNativeAdPositioning.NO_REPEAT;
-        private final List<Integer> mFixedPositions;
-        private final SparseArray<String> mAdUnitIdOverrides;
-
-        private Builder() {
-            mFixedPositions = new ArrayList<Integer>();
-            mAdUnitIdOverrides = new SparseArray<String>();
-        }
-
-        /**
-         * Specifies a fixed ad position.
-         *
-         * @param position The ad position.
-         * @return The builder.
-         */
+    @Deprecated
+    public static final class Builder extends MoPubClientPositioning {
+        @Override
         public Builder addFixedPosition(final int position) {
-            internalAddFixedPosition(position);
+            super.addFixedPosition(position);
             return this;
         }
 
-        /**
-         * Specifies a fixed ad position, with an ad unit ID override.
-         *
-         * Calling this method twice with the same position and different ad unit IDs replaces the
-         * first ad unit ID.
-         *
-         * @param position The ad position.
-         * @param adUnitIdOverride The ad unit ID to use when requesting and ad for this position.
-         * @return The builder.
-         */
-        public Builder addFixedPosition(final int position, final String adUnitIdOverride) {
-            if (internalAddFixedPosition(position)) {
-                mAdUnitIdOverrides.put(position, adUnitIdOverride);
-            }
-            return this;
-        }
-
-        private boolean internalAddFixedPosition(final int position) {
-            if (position < 0) {
-                return false;
-            }
-            if (!mFixedPositions.contains(position)) {
-                mFixedPositions.add(position);
-            } else {
-                mAdUnitIdOverrides.remove(position);
-            }
-            return true;
-        }
-
-        /**
-         * Enables showing ads ad at a repeated interval.
-         *
-         * @param interval The frequency at which to show ads. Must be an integer greater than 1 or
-         * the constant NO_REPEAT.
-         * @return The builder.
-         */
+        @Override
         public Builder enableRepeatingPositions(final int interval) {
-            if (interval < 1 && interval != NO_REPEAT) {
-                MoPubLog.w("Attempted to assign an illegal interval < 1 to the" +
-                        " ad positioning object. Call ignored.");
-                return this;
-            }
-            mRepeatInterval = interval;
+            super.enableRepeatingPositions(interval);
             return this;
         }
 
@@ -174,11 +160,9 @@ public Builder enableRepeatingPositions(final int interval) {
          *
          * @return A new positioning object.
          */
-        public MoPubNativeAdPositioning build() {
-            // Could insert into a sorted LinkedList instead of doing this.
-            Collections.sort(mFixedPositions);
-            return new MoPubNativeAdPositioning(mRepeatInterval, mFixedPositions,
-                    mAdUnitIdOverrides);
+        @Deprecated
+        public MoPubClientPositioning build() {
+            return this;
         }
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java
index c21d36c2..c0a30360 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java
@@ -7,7 +7,7 @@
 import android.widget.Button;
 
 import com.mopub.common.VisibleForTesting;
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 
 import java.util.WeakHashMap;
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
index 7e0da7da..f55134a8 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
@@ -6,6 +6,9 @@
 import android.view.ViewGroup;
 
 import com.mopub.common.VisibleForTesting;
+import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
+import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubServerPositioning;
+import com.mopub.nativeads.PositioningSource.PositioningListener;
 
 import java.util.ArrayList;
 
@@ -25,44 +28,88 @@
     private final Context mContext;
     private final Handler mPlacementHandler;
     private final Runnable mPlacementRunnable;
+    private final PositioningSource mPositioningSource;
     private final NativeAdSource mAdSource;
     private final ImpressionTracker mImpressionTracker;
-    private final PlacementData mPlacementData;
-
-    private MoPubNativeAdRenderer mAdRenderer;
 
+    private boolean mHasReceivedPositions;
+    private PlacementData mPendingPlacementData;
+    private boolean mHasReceivedAds;
+    private boolean mHasPlacedAds;
+    private PlacementData mPlacementData;
+    
+    private MoPubAdRenderer mAdRenderer;
     private String mAdUnitId;
-    private MoPubNativeAdLoadedListener mAdLoadedListener;
 
+    private MoPubNativeAdLoadedListener mAdLoadedListener;
     // The visible range is the range of items which we believe are visible, inclusive.
     // Placing ads near this range makes for a smoother user experience when scrolling up
     // or down.
     private static final int MAX_VISIBLE_RANGE = 100;
     private int mVisibleRangeStart;
     private int mVisibleRangeEnd;
-    private int mItemCount;
 
+    private int mItemCount;
     // A buffer around the visible range where we'll place ads if possible.
     private static final int RANGE_BUFFER = 10;
     private boolean mNeedsPlacement;
-    private boolean mIsLoadingFirstAd;
 
     /**
+     * Creates a new MoPubStreamAdPlacer object.
+     *
+     * By default, the StreamAdPlacer will contact the server to determine ad positions. If you
+     * wish to hard-code positions in your app, see {@link MoPubStreamAdPlacer(Context,
+     * MoPubClientPositioning)}.
+     *
+     * @param context The activity context.
+     */
+    public MoPubStreamAdPlacer(final Context context) {
+        // MoPubClientPositioning is mutable, so we must take care not to hold a
+        // reference to it that might be subsequently modified by the caller.
+        this(context, MoPubNativeAdPositioning.serverPositioning());
+    }
+
+    /**
+     * Creates a new MoPubStreamAdPlacer object, using server positioning.
+     *
      * @param context The activity context.
      * @param adPositioning A positioning object for specifying where ads will be placed in your
-     * stream.
+     * stream. See {@link MoPubNativeAdPositioning#serverPositioning()}.
      */
-    public MoPubStreamAdPlacer(final Context context,
-            final MoPubNativeAdPositioning adPositioning) {
-        this(context, new NativeAdSource(), new ImpressionTracker(context),
-                PlacementData.fromAdPositioning(adPositioning));
+    public MoPubStreamAdPlacer(final Context context, final MoPubServerPositioning adPositioning) {
+        this(context,
+                new NativeAdSource(),
+                new ImpressionTracker(context),
+                new ServerPositioningSource(context));
+    }
+
+    /**
+     * Creates a new MoPubStreamAdPlacer object, using client positioning.
+     *
+     * @param context The activity context.
+     * @param adPositioning A positioning object for specifying where ads will be placed in your
+     * stream. See {@link MoPubNativeAdPositioning#clientPositioning()}.
+     */
+    public MoPubStreamAdPlacer(final Context context, final MoPubClientPositioning adPositioning) {
+        // MoPubClientPositioning is mutable, so we must take care not to hold a
+        // reference to it that might be subsequently modified by the caller.
+        this(context,
+                new NativeAdSource(),
+                new ImpressionTracker(context),
+                new ClientPositioningSource(adPositioning));
     }
 
     @VisibleForTesting
     MoPubStreamAdPlacer(final Context context,
             final NativeAdSource adSource,
             final ImpressionTracker impressionTracker,
-            final PlacementData placementData) {
+            final PositioningSource positioningSource) {
+        mContext = context;
+        mImpressionTracker = impressionTracker;
+        mPositioningSource = positioningSource;
+        mAdSource = adSource;
+        mPlacementData = PlacementData.empty();
+
         mPlacementHandler = new Handler();
         mPlacementRunnable = new Runnable() {
             @Override
@@ -75,10 +122,6 @@ public void run() {
             }
         };
 
-        mContext = context;
-        mAdSource = adSource;
-        mImpressionTracker = impressionTracker;
-        mPlacementData = placementData;
         mVisibleRangeStart = 0;
         mVisibleRangeEnd = 0;
     }
@@ -92,7 +135,7 @@ public void run() {
      *
      * @param adRenderer The ad renderer.
      */
-    public void registerAdRenderer(final MoPubNativeAdRenderer adRenderer) {
+    public void registerAdRenderer(final MoPubAdRenderer adRenderer) {
         mAdRenderer = adRenderer;
     }
 
@@ -142,26 +185,67 @@ public void loadAds(final String adUnitId,
             final RequestParameters requestParameters) {
         mAdUnitId = adUnitId;
 
-        // Is loading will be true until the first ad is available.
-        mIsLoadingFirstAd = true;
+        mHasPlacedAds = false;
+        mHasReceivedPositions = false;
+        mHasReceivedAds = false;
+
+        mPositioningSource.loadPositions(adUnitId, new PositioningListener() {
+            @Override
+            public void onLoad(final MoPubClientPositioning positioning) {
+                handlePositioningLoad(positioning);
+            }
+
+            @Override
+            public void onFailed() {
+            }
+        });
+
         mAdSource.setAdSourceListener(new NativeAdSource.AdSourceListener() {
             @Override
             public void onAdsAvailable() {
-                // When the first ad is available, remove ads that may be present and immediately
-                // place ads again. This prevents the UI from flashing grossly.
-                if (mIsLoadingFirstAd) {
-                    removeAdsInRange(0, mItemCount);
-                    placeAds();
-                } else {
-                    notifyNeedsPlacement();
-                }
-                mIsLoadingFirstAd = false;
+                handleAdsAvailable();
             }
         });
 
         mAdSource.loadAds(mContext, adUnitId, requestParameters);
     }
 
+    @VisibleForTesting
+    void handlePositioningLoad(final MoPubClientPositioning positioning) {
+        PlacementData placementData = PlacementData.fromAdPositioning(positioning);
+        if (mHasReceivedAds) {
+            placeInitialAds(placementData);
+        } else {
+            mPendingPlacementData = placementData;
+        }
+        mHasReceivedPositions = true;
+    }
+
+    @VisibleForTesting
+    void handleAdsAvailable() {
+        // If we've already placed ads, just notify that we need placement.
+        if (mHasPlacedAds) {
+            notifyNeedsPlacement();
+            return;
+        }
+
+        // Otherwise, we may need to place initial ads.
+        if (mHasReceivedPositions) {
+            placeInitialAds(mPendingPlacementData);
+        }
+        mHasReceivedAds = true;
+    }
+
+    private void placeInitialAds(PlacementData placementData) {
+        // Remove ads that may be present and immediately place ads again. This prevents the UI
+        // from flashing grossly.
+        removeAdsInRange(0, mItemCount);
+
+        mPlacementData = placementData;
+        placeAds();
+        mHasPlacedAds = true;
+    }
+
     /**
      * Inserts ads that should appear in the given range.
      *
@@ -304,6 +388,7 @@ public int removeAdsInRange(int originalStartPosition, int originalEndPosition)
             if (position < mVisibleRangeStart) {
                 mVisibleRangeStart--;
             }
+            mItemCount--;
         }
 
         int clearedAdsCount = mPlacementData.clearAdsInRange(adjustedStartRange, adjustedEndRange);
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java
index f48bf770..c354dcc9 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java
@@ -40,6 +40,7 @@
     private final MoPubNativeNetworkListener mMoPubNativeNetworkListener;
 
     @VisibleForTesting boolean mRequestInFlight;
+    @VisibleForTesting boolean mRetryInFlight;
     @VisibleForTesting int mSequenceNumber;
     @VisibleForTesting int mRetryTimeMilliseconds;
 
@@ -71,6 +72,7 @@
         mReplenishCacheRunnable = new Runnable() {
             @Override
             public void run() {
+                mRetryInFlight = false;
                 replenishCache();
             }
         };
@@ -99,17 +101,18 @@ public void onNativeLoad(final NativeResponse nativeResponse) {
 
             @Override
             public void onNativeFail(final NativeErrorCode errorCode) {
+                // Reset the retry time for the next time we dequeue.
+                mRequestInFlight = false;
+
                 // Stopping requests after the max retry time prevents us from using battery when
                 // the user is not interacting with the stream, eg. the app is backgrounded.
                 if (mRetryTimeMilliseconds >= MAXIMUM_RETRY_TIME_MILLISECONDS) {
-                    // Reset the retry time for the next time we dequeue.
-                    mRequestInFlight = false;
                     resetRetryTime();
                     return;
                 }
 
-                // Don't reset mRequestInFlight here - dequeueAd shouldn't short-circuit the retry.
                 updateRetryTime();
+                mRetryInFlight = true;
                 mReplenishCacheHandler.postDelayed(mReplenishCacheRunnable, mRetryTimeMilliseconds);
             }
         };
@@ -180,7 +183,7 @@ NativeResponse dequeueAd() {
         final long now = SystemClock.uptimeMillis();
 
         // Starting an ad request takes several millis. Post for performance reasons.
-        if (!mRequestInFlight) {
+        if (!mRequestInFlight && !mRetryInFlight) {
             mReplenishCacheHandler.post(mReplenishCacheRunnable);
         }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
index 454f7c26..c584bc3c 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
@@ -4,7 +4,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 
 import java.util.WeakHashMap;
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
index d8662959..86cb6866 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
@@ -11,7 +11,7 @@
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.util.IntentUtils;
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.ResponseHeader;
 import com.mopub.nativeads.MoPubNative.MoPubNativeEventListener;
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
index f04ea52e..acbf185a 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
@@ -2,20 +2,16 @@
 
 import android.content.Context;
 import android.location.Location;
-import android.os.Build;
 import android.text.TextUtils;
 
 import com.mopub.common.AdUrlGenerator;
-import com.mopub.common.GpsHelper;
+import com.mopub.common.ClientMetadata;
 import com.mopub.common.LocationService;
 import com.mopub.common.MoPub;
+import com.mopub.common.util.DateAndTime;
 import com.mopub.common.util.Strings;
 
 class NativeUrlGenerator extends AdUrlGenerator {
-    private static int sLocationPrecision = 6;
-    private static LocationService.LocationAwareness sLocationAwareness
-            = LocationService.LocationAwareness.NORMAL;
-
     private String mDesiredAssets;
     private String mSequenceNumber;
 
@@ -49,41 +45,43 @@ public String generateUrlString(final String serverHostname) {
 
         setAdUnitId(mAdUnitId);
 
-        setSdkVersion(MoPub.SDK_VERSION);
-
-        setDeviceInfo(Build.MANUFACTURER, Build.MODEL, Build.PRODUCT);
-
-        setUdid(getUdidFromContext(mContext));
-
-        setDoNotTrack(GpsHelper.isLimitAdTrackingEnabled(mContext));
-
         setKeywords(mKeywords);
 
         Location location = mLocation;
         if (location == null) {
             location = LocationService.getLastKnownLocation(mContext,
-                                                            sLocationPrecision,
-                                                            sLocationAwareness);
+                    MoPub.getLocationPrecision(),
+                    MoPub.getLocationAwareness());
         }
-
         setLocation(location);
 
-        setTimezone(getTimeZoneOffsetString());
+        ClientMetadata clientMetadata = ClientMetadata.getInstance(mContext);
+        setSdkVersion(clientMetadata.getSdkVersion());
+
+        setDeviceInfo(clientMetadata.getDeviceManufacturer(),
+                clientMetadata.getDeviceModel(),
+                clientMetadata.getDeviceProduct());
+
+        setUdid(clientMetadata.getUdid());
+
+        setDoNotTrack(clientMetadata.getDoNoTrack());
+
+        setTimezone(DateAndTime.getTimeZoneOffsetString());
 
-        setOrientation(mContext.getResources().getConfiguration().orientation);
+        setOrientation(clientMetadata.getOrientationString());
 
-        setDensity(mContext.getResources().getDisplayMetrics().density);
+        setDensity(clientMetadata.getDensity());
 
-        String networkOperator = getNetworkOperator();
+        String networkOperator = clientMetadata.getNetworkOperator();
         setMccCode(networkOperator);
         setMncCode(networkOperator);
 
-        setIsoCountryCode(mTelephonyManager.getNetworkCountryIso());
-        setCarrierName(mTelephonyManager.getNetworkOperatorName());
+        setIsoCountryCode(clientMetadata.getIsoCountryCode());
+        setCarrierName(clientMetadata.getNetworkOperatorName());
 
-        setNetworkType(getActiveNetworkType());
+        setNetworkType(clientMetadata.getActiveNetworkType());
 
-        setAppVersion(getAppVersionFromContext(mContext));
+        setAppVersion(clientMetadata.getAppVersion());
 
         setTwitterAppInstalledFlag();
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java
index af85637a..0ca2dc4a 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java
@@ -4,7 +4,7 @@
 import android.widget.ImageView;
 import android.widget.TextView;
 
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 
 class NativeViewHolder {
     TextView titleView;
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java b/mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java
index f80d08bb..cb4e21df 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java
@@ -1,6 +1,7 @@
 package com.mopub.nativeads;
 
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
 
 import java.util.List;
 
@@ -143,11 +144,11 @@ private PlacementData(final int[] desiredInsertionPositions) {
         System.arraycopy(desiredInsertionPositions, 0, mDesiredOriginalPositions, 0, mDesiredCount);
     }
 
-    static PlacementData fromAdPositioning(final MoPubNativeAdPositioning adPositioning) {
+    static PlacementData fromAdPositioning(final MoPubClientPositioning adPositioning) {
         final List<Integer> fixed = adPositioning.getFixedPositions();
         final int interval = adPositioning.getRepeatingInterval();
 
-        final int size = (interval == MoPubNativeAdPositioning.NO_REPEAT ? fixed.size() : MAX_ADS);
+        final int size = (interval == MoPubClientPositioning.NO_REPEAT ? fixed.size() : MAX_ADS);
         final int[] desiredInsertionPositions = new int[size];
 
         // Fixed positions are in terms of final positions. Calculate current insertion positions
@@ -167,6 +168,10 @@ static PlacementData fromAdPositioning(final MoPubNativeAdPositioning adPosition
         return new PlacementData(desiredInsertionPositions);
     }
 
+    static PlacementData empty() {
+        return new PlacementData(new int[] {});
+    }
+
     /**
      * Whether the given position should be an ad.
      */
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningSource.java b/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningSource.java
new file mode 100644
index 00000000..354ea6df
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningSource.java
@@ -0,0 +1,21 @@
+package com.mopub.nativeads;
+
+import android.os.Handler;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
+
+/**
+ * Allows asynchronously requesting positioning information.
+ */
+interface PositioningSource {
+
+    interface PositioningListener {
+        void onLoad(MoPubClientPositioning positioning);
+
+        void onFailed();
+    }
+
+    void loadPositions(String adUnitId, PositioningListener listener);
+
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
new file mode 100644
index 00000000..954eae59
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
@@ -0,0 +1,53 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+
+import com.mopub.common.BaseUrlGenerator;
+import com.mopub.common.ClientMetadata;
+
+class PositioningUrlGenerator extends BaseUrlGenerator {
+    private static final String POSITIONING_API_VERSION = "1";
+
+    private final Context mContext;
+    private String mAdUnitId;
+
+    public PositioningUrlGenerator(Context context) {
+        mContext = context;
+    }
+
+    public PositioningUrlGenerator withAdUnitId(final String adUnitId) {
+        mAdUnitId = adUnitId;
+        return this;
+    }
+
+    @Override
+    public String generateUrlString(final String serverHostname) {
+        initUrlString(serverHostname, Constants.POSITIONING_HANDLER);
+
+        setAdUnitId(mAdUnitId);
+
+        setApiVersion(POSITIONING_API_VERSION);
+
+        ClientMetadata clientMetadata = ClientMetadata.getInstance(mContext);
+
+        setSdkVersion(clientMetadata.getSdkVersion());
+
+        setDeviceInfo(clientMetadata.getDeviceManufacturer(),
+                clientMetadata.getDeviceModel(),
+                clientMetadata.getDeviceProduct());
+
+        setUdid(clientMetadata.getUdid());
+
+        setAppVersion(clientMetadata.getAppVersion());
+
+        return getFinalUrlString();
+    }
+
+    private void setAdUnitId(String adUnitId) {
+        addParam("id", adUnitId);
+    }
+
+    private void setSdkVersion(String sdkVersion) {
+        addParam("nsv", sdkVersion);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
new file mode 100644
index 00000000..55049bd4
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
@@ -0,0 +1,241 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.os.Handler;
+
+import com.mopub.common.DownloadResponse;
+import com.mopub.common.DownloadTask;
+import com.mopub.common.DownloadTask.DownloadTaskListener;
+import com.mopub.common.HttpClient;
+import com.mopub.common.HttpResponses;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.AsyncTasks;
+import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
+
+import org.apache.http.HttpStatus;
+import org.apache.http.client.methods.HttpGet;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * Requests positioning information from the MoPub ad server.
+ *
+ * The expected JSON format contains a set of rules for fixed and repeating positions. For example:
+ * {
+ *   fixed: [{
+ *     position: 7
+ *   }, {
+ *     section : 1
+ *     position: 6
+ *   }],
+ *   repeating:  {
+ *     interval: 12
+ *   }
+ * }
+ *
+ * Both fixed and repeating rules are optional. If they exist they must follow the following
+ * guidelines:
+ *
+ * fixed - contains a set of positioning objects, each with an optional section and a required
+ * position. Section is used for iOS clients only, and non-zero sections are ignored on Android.
+ *
+ * repeating - contains a required interval, which must be 2 or greater.
+ *
+ * The JSON parsing logic treats any violations to the above spec as invalid,
+ * rather than trying to continue with a partially valid response.
+ */
+class ServerPositioningSource implements PositioningSource {
+
+    private static final double DEFAULT_RETRY_TIME_MILLISECONDS = 1000; // 1 second
+    private static final double EXPONENTIAL_BACKOFF_FACTOR = 2;
+
+    @VisibleForTesting
+    static int MAXIMUM_RETRY_TIME_MILLISECONDS = 5 * 60 * 1000; // 5 minutes.
+
+    private static final String FIXED_KEY = "fixed";
+    private static final String SECTION_KEY = "section";
+    private static final String POSITION_KEY = "position";
+    private static final String REPEATING_KEY = "repeating";
+    private static final String INTERVAL_KEY = "interval";
+
+    // Max value to avoid bad integer math calculations. This is 2 ^ 16.
+    private static final int MAX_VALUE = 1 << 16;
+
+    private final Context mContext;
+
+    private final DownloadTaskProvider mDownloadTaskProvider;
+
+    // Handler and runnable for retrying after a failed response.
+    private final Handler mRetryHandler;
+    private final Runnable mRetryRunnable;
+
+    // Only exists while a request is in flight.
+    private DownloadTask mDownloadTask;
+
+    private PositioningListener mListener;
+    private int mRetryCount;
+    private String mRetryUrl;
+
+    ServerPositioningSource(final Context context) {
+        this(context, new DownloadTaskProvider());
+    }
+
+    @VisibleForTesting
+    ServerPositioningSource(final Context context,
+            final DownloadTaskProvider downloadTaskProvider) {
+        mContext = context.getApplicationContext();
+        mDownloadTaskProvider = downloadTaskProvider;
+        mRetryHandler = new Handler();
+        mRetryRunnable = new Runnable() {
+            @Override
+            public void run() {
+                requestPositioningInternal();
+            }
+        };
+    }
+
+    @Override
+    public void loadPositions(String adUnitId, PositioningListener listener) {
+        // If a request is in flight, remove it.
+        if (mDownloadTask != null) {
+            mDownloadTask.cancel(true);
+            mDownloadTask = null;
+        }
+
+        // If a retry is pending remove it.
+        if (mRetryCount > 0) {
+            mRetryHandler.removeCallbacks(mRetryRunnable);
+            mRetryCount = 0;
+        }
+
+        mListener = listener;
+        mRetryUrl = new PositioningUrlGenerator(mContext)
+                .withAdUnitId(adUnitId)
+                .generateUrlString(Constants.POSITIONING_HOST);
+        requestPositioningInternal();
+    }
+
+    private void requestPositioningInternal() {
+        MoPubLog.d("Loading positioning from: " + mRetryUrl);
+        mDownloadTask = mDownloadTaskProvider.get(mTaskListener);
+        final HttpGet httpGet = HttpClient.initializeHttpGet(mRetryUrl, mContext);
+        AsyncTasks.safeExecuteOnExecutor(mDownloadTask, httpGet);
+    }
+
+    private DownloadTaskListener mTaskListener = new DownloadTask.DownloadTaskListener() {
+        @Override
+        public void onComplete(final String url, final DownloadResponse downloadResponse) {
+            // Will be null only if cancelled.
+            if (downloadResponse == null) {
+                return;
+            }
+
+            mDownloadTask = null;
+            if (downloadResponse.getStatusCode() != HttpStatus.SC_OK) {
+                MoPubLog.e("Invalid positioning download response ");
+                handleFailure();
+                return;
+            }
+
+            String responseText = HttpResponses.asResponseString(downloadResponse);
+            MoPubClientPositioning positioning;
+            try {
+                positioning = parseJsonResponse(responseText);
+            } catch (JSONException exception) {
+                MoPubLog.e("Error parsing JSON: ", exception);
+                handleFailure();
+                return;
+            }
+
+            handleSuccess(positioning);
+        }
+    };
+
+    @VisibleForTesting
+    static class DownloadTaskProvider {
+        DownloadTask get(DownloadTaskListener listener) {
+            return new DownloadTask(listener);
+        }
+    }
+
+    private void handleSuccess(MoPubClientPositioning positioning) {
+        mListener.onLoad(positioning);
+        mListener = null;
+        mRetryCount = 0;
+    }
+
+    private void handleFailure() {
+        double multiplier = Math.pow(EXPONENTIAL_BACKOFF_FACTOR, mRetryCount + 1);
+        int delay = (int) (DEFAULT_RETRY_TIME_MILLISECONDS * multiplier);
+        if (delay >= MAXIMUM_RETRY_TIME_MILLISECONDS) {
+            MoPubLog.d("Error downloading positioning information");
+            mListener.onFailed();
+            mListener = null;
+            return;
+        }
+
+        mRetryCount++;
+        mRetryHandler.postDelayed(mRetryRunnable, delay);
+    }
+
+    @VisibleForTesting
+    MoPubClientPositioning parseJsonResponse(String json) throws JSONException {
+        if (json == null || json.equals("")) {
+            throw new JSONException("Empty response");
+        }
+
+        // If the server returns an error explicitly, throw an error with the message.
+        JSONObject jsonObject = new JSONObject(json);
+        String error = jsonObject.optString("error", null);
+        if (error != null) {
+            throw new JSONException(error);
+        }
+
+        // Parse fixed and repeating rules.
+        JSONArray fixed = jsonObject.optJSONArray(FIXED_KEY);
+        JSONObject repeating = jsonObject.optJSONObject(REPEATING_KEY);
+        MoPubClientPositioning positioning = new MoPubClientPositioning();
+        if (fixed == null && repeating == null) {
+            throw new JSONException("Must contain fixed or repeating positions");
+        }
+        if (fixed != null) {
+            parseFixedJson(fixed, positioning);
+        }
+        if (repeating != null) {
+            parseRepeatingJson(repeating, positioning);
+        }
+        return positioning;
+    }
+
+    private void parseFixedJson(final JSONArray fixed,
+            final MoPubClientPositioning positioning) throws JSONException {
+        for (int i = 0; i < fixed.length(); ++i) {
+            JSONObject positionObject = fixed.getJSONObject(i);
+            int section = positionObject.optInt(SECTION_KEY, 0);
+            if (section < 0) {
+                throw new JSONException("Invalid section " + section + " in JSON response");
+            }
+            if (section > 0) {
+                // Ignore sections > 0.
+                continue;
+            }
+            int position = positionObject.getInt(POSITION_KEY);
+            if (position < 0 || position > MAX_VALUE) {
+                throw new JSONException("Invalid position " + position + " in JSON response");
+            }
+            positioning.addFixedPosition(position);
+        }
+    }
+
+    private void parseRepeatingJson(final JSONObject repeatingObject,
+            final MoPubClientPositioning positioning) throws JSONException {
+        int interval = repeatingObject.getInt(INTERVAL_KEY);
+        if (interval < 2 || interval > MAX_VALUE) {
+            throw new JSONException("Invalid interval " + interval + " in JSON response");
+        }
+        positioning.enableRepeatingPositions(interval);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/UrlResolutionTask.java b/mopub-sdk/src/main/java/com/mopub/nativeads/UrlResolutionTask.java
index cce76111..119b4ed8 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/UrlResolutionTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/UrlResolutionTask.java
@@ -4,7 +4,7 @@
 
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.IntentUtils;
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 
 import java.io.IOException;
 import java.net.HttpURLConnection;
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java b/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java
index 6cbc3983..7ff0842a 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java
@@ -9,7 +9,7 @@
 import android.view.ViewTreeObserver;
 
 import com.mopub.common.VisibleForTesting;
-import com.mopub.common.util.MoPubLog;
+import com.mopub.common.logging.MoPubLog;
 
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java b/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
index 3fca2044..f7f5abd4 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
@@ -4,7 +4,7 @@
 import android.graphics.Bitmap;
 import android.support.v4.util.LruCache;
 
-import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.After;
 import org.junit.Before;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java b/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
new file mode 100644
index 00000000..74696613
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
@@ -0,0 +1,72 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.content.Context;
+import android.telephony.TelephonyManager;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import static android.Manifest.permission.ACCESS_NETWORK_STATE;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.robolectric.Robolectric.shadowOf;
+
+@RunWith(SdkTestRunner.class)
+@Config(shadows = {MoPubShadowTelephonyManager.class})
+public class ClientMetadataTest {
+
+    public Activity activityContext;
+    private MoPubShadowTelephonyManager shadowTelephonyManager;
+
+    @Before
+    public void setUp() throws Exception {
+        activityContext = Robolectric.buildActivity(Activity.class).create().get();
+        shadowOf(activityContext).grantPermissions(ACCESS_NETWORK_STATE);
+        shadowTelephonyManager = (MoPubShadowTelephonyManager)
+                shadowOf((TelephonyManager) activityContext.getSystemService(Context.TELEPHONY_SERVICE));
+    }
+
+    // This has to be first or the singleton will be initialized by an earlier test. We should
+    // destroy the application between tests to get around this.
+    @Test
+    public void getWithoutContext_shouldReturnNull() {
+        final ClientMetadata clientMetadata = ClientMetadata.getInstance();
+        assertThat(clientMetadata).isNull();
+    }
+
+    @Test
+    public void getWithContext_shouldReturnInstance() {
+        final ClientMetadata clientMetadata = ClientMetadata.getInstance(activityContext);
+        assertThat(clientMetadata).isNotNull();
+    }
+
+    @Test
+    public void getWithoutContextAfterInit_shouldReturnInstance() {
+        ClientMetadata.getInstance(activityContext);
+        final ClientMetadata clientMetadata = ClientMetadata.getInstance();
+        assertThat(clientMetadata).isNotNull();
+    }
+
+    @Test
+    public void testCachedData_shouldBeAvailable() {
+        shadowTelephonyManager.setNetworkOperatorName("testNetworkOperatorName");
+        shadowTelephonyManager.setNetworkOperator("testNetworkOperator");
+        shadowTelephonyManager.setNetworkCountryIso("1");
+        shadowTelephonyManager.setSimCountryIso("1");
+
+        final ClientMetadata clientMetadata = ClientMetadata.getInstance(activityContext);
+        // Telephony manager data.
+        assertThat(clientMetadata.getNetworkOperator()).isEqualTo("testNetworkOperator");
+        assertThat(clientMetadata.getNetworkOperatorName()).isEqualTo("testNetworkOperatorName");
+        assertThat(clientMetadata.getIsoCountryCode()).isEqualTo("1");
+
+        // Other cached data.
+        assertThat(clientMetadata.getUdid()).isNotNull().isNotEmpty();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/DownloadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/common/DownloadTaskTest.java
index 7da791f4..cfa1702f 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/DownloadTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/DownloadTaskTest.java
@@ -1,5 +1,6 @@
 package com.mopub.common;
 
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.ResponseHeader;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 
@@ -9,42 +10,32 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Captor;
+import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
 import org.robolectric.tester.org.apache.http.FakeHttpLayer;
 
-import java.util.concurrent.Semaphore;
-
 import static junit.framework.Assert.fail;
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.spy;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.verify;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(SdkTestRunner.class)
 public class DownloadTaskTest {
 
+    @Mock private DownloadTask.DownloadTaskListener mockDownloadTaskListener;
+    @Captor private ArgumentCaptor<DownloadResponse> responseCaptor;
+
     private DownloadTask mDownloadTask;
-    private DownloadTask.DownloadTaskListener mDownloadTaskListener;
-    private Semaphore mSemaphore;
-    private String mUrl;
-    private DownloadResponse mDownloadResponse;
     private HttpGet httpGet;
     private String mTestResponse;
     private FakeHttpLayer mFakeHttpLayer;
     private TestHttpResponseWithHeaders mTestHttpResponseWithHeaders;
 
     @Before
-    public void setUp() throws Exception {
-        mSemaphore = new Semaphore(0);
-
-        mDownloadTaskListener = new DownloadTask.DownloadTaskListener() {
-            @Override
-            public void onComplete(String url, DownloadResponse response) {
-                mUrl = url;
-                mDownloadResponse = response;
-                mSemaphore.release();
-            }
-        };
-        mDownloadTask = spy(new DownloadTask(mDownloadTaskListener));
+    public void setUp() {
+        mDownloadTask = new DownloadTask(mockDownloadTaskListener);
         try {
             httpGet = new HttpGet("http://www.mopub.com/");
         } catch (IllegalArgumentException e) {
@@ -60,77 +51,80 @@ public void onComplete(String url, DownloadResponse response) {
     }
 
     @Test
-    public void execute_whenDownloadTaskAndHttpClientCompleteSuccessfully_shouldReturn200HttpResponse() throws Exception {
+    public void execute_whenDownloadTaskAndHttpClientCompleteSuccessfully_shouldReturn200HttpResponse() {
         mFakeHttpLayer.addPendingHttpResponse(mTestHttpResponseWithHeaders);
         mDownloadTask.execute(httpGet);
-        mSemaphore.acquire();
-        assertThat(mUrl).isEqualTo(httpGet.getURI().toString());
-        assertThat(mDownloadResponse.getStatusCode()).isEqualTo(200);
-        assertThat(mDownloadResponse.getFirstHeader(ResponseHeader.IMPRESSION_URL)).isEqualTo("moPubImpressionTrackerUrl");
-        assertThat(mDownloadResponse.getFirstHeader(ResponseHeader.CLICKTHROUGH_URL)).isEqualTo("moPubClickTrackerUrl");
-        assertThat(HttpResponses.asResponseString(mDownloadResponse)).isEqualTo(mTestResponse);
+
+        verify(mockDownloadTaskListener).onComplete(eq(httpGet.getURI().toString()),
+                responseCaptor.capture());
+        DownloadResponse response = responseCaptor.getValue();
+        assertThat(response.getStatusCode()).isEqualTo(200);
+        assertThat(response.getFirstHeader(ResponseHeader.IMPRESSION_URL)).isEqualTo("moPubImpressionTrackerUrl");
+        assertThat(response.getFirstHeader(ResponseHeader.CLICKTHROUGH_URL)).isEqualTo("moPubClickTrackerUrl");
+        assertThat(HttpResponses.asResponseString(response)).isEqualTo(mTestResponse);
     }
 
     @Test
-    public void execute_whenDownloadTaskCompletesSuccessfullyAndHttpClientTimesOut_shouldReturn599HttpResponse() throws Exception {
+    public void execute_whenDownloadTaskCompletesSuccessfullyAndHttpClientTimesOut_shouldReturn599HttpResponse() {
         mFakeHttpLayer.addPendingHttpResponse(599, "");
         mDownloadTask.execute(httpGet);
-        mSemaphore.acquire();
-        assertThat(mUrl).isEqualTo(httpGet.getURI().toString());
-        assertThat(mDownloadResponse.getStatusCode()).isEqualTo(599);
-        assertThat(HttpResponses.asResponseString(mDownloadResponse)).isEqualTo("");
+
+        verify(mockDownloadTaskListener).onComplete(eq(httpGet.getURI().toString()),
+                responseCaptor.capture());
+        DownloadResponse response = responseCaptor.getValue();
+        assertThat(response.getStatusCode()).isEqualTo(599);
+        assertThat(HttpResponses.asResponseString(response)).isEqualTo("");
     }
 
     @Test
-    public void execute_whenDownloadTaskIsCancelledBeforeExecute_shouldReturnNullHttpReponseAndNullUrl() throws Exception {
+    public void execute_whenDownloadTaskIsCancelledBeforeExecute_shouldReturnNullHttpReponseAndNullUrl() {
         mFakeHttpLayer.addPendingHttpResponse(200, mTestResponse);
         mDownloadTask.cancel(true);
         mDownloadTask.execute(httpGet);
-        mSemaphore.acquire();
-        assertThat(mUrl).isEqualTo(null);
-        assertThat(mDownloadResponse).isEqualTo(null);
+
+        verify(mockDownloadTaskListener).onComplete(null, null);
     }
 
     @Ignore("pending")
     @Test
-    public void execute_whenDownloadTaskIsCancelledDuringDoInBackground_shouldReturnNullHttpReponse() throws Exception {
         // need a way to reliably cancel task during doInBackground
+    public void execute_whenDownloadTaskIsCancelledDuringDoInBackground_shouldReturnNullHttpReponse() {
     }
 
     @Ignore("pending")
     @Test
-    public void execute_whenHttpUriRequestThrowsIOException_shouldCancelTaskAndReturnNullHttpResponse() throws Exception {
+    public void execute_whenHttpUriRequestThrowsIOException_shouldCancelTaskAndReturnNullHttpResponse() {
         // need a way to force HttpUriRequest to throw on execute
     }
 
     @Test
-    public void execute_whenHttpUriRequestIsNull_shouldReturnNullHttpReponseAndNullUrl() throws Exception {
+    public void execute_whenHttpUriRequestIsNull_shouldReturnNullHttpReponseAndNullUrl() {
         mDownloadTask.execute((HttpUriRequest) null);
-        mSemaphore.acquire();
-        assertThat(mUrl).isEqualTo(null);
-        assertThat(mDownloadResponse).isEqualTo(null);
+        verify(mockDownloadTaskListener).onComplete(null, null);
     }
 
     @Test
-    public void execute_whenHttpUriRequestIsNullArray_shouldReturnNullHttpReponseAndNullUrl() throws Exception {
-        mDownloadTask.execute((HttpUriRequest[])null);
-        mSemaphore.acquire();
-        assertThat(mUrl).isEqualTo(null);
-        assertThat(mDownloadResponse).isEqualTo(null);
+    public void execute_whenHttpUriRequestIsNullArray_shouldReturnNullHttpReponseAndNullUrl() {
+        mDownloadTask.execute((HttpUriRequest[]) null);
+        verify(mockDownloadTaskListener).onComplete(null, null);
     }
 
     @Test
-    public void execute_whenHttpUriRequestIsArray_shouldOnlyReturnFirstResponse() throws Exception {
+    public void execute_whenHttpUriRequestIsArray_shouldOnlyReturnFirstResponse() {
         mFakeHttpLayer.addPendingHttpResponse(200, mTestResponse);
         mFakeHttpLayer.addPendingHttpResponse(500, "");
         mDownloadTask.execute(httpGet, new HttpGet("http://www.twitter.com/"));
-        mSemaphore.acquire();
-        assertThat(mDownloadResponse.getStatusCode()).isEqualTo(200);
-        assertThat(HttpResponses.asResponseString(mDownloadResponse)).isEqualTo(mTestResponse);
+
+        verify(mockDownloadTaskListener).onComplete(eq(httpGet.getURI().toString()),
+                responseCaptor.capture());
+        DownloadResponse response = responseCaptor.getValue();
+
+        assertThat(response.getStatusCode()).isEqualTo(200);
+        assertThat(HttpResponses.asResponseString(response)).isEqualTo(mTestResponse);
     }
 
     @Test
-    public void downLoadTask_whenConstructedWithNullListener_shouldThrowIllegalArgumentException() throws Exception {
+    public void downLoadTask_whenConstructedWithNullListener_shouldThrowIllegalArgumentException() {
         try {
             new DownloadTask(null);
             fail("DownloadTask didn't throw IllegalArgumentException when constructed with null");
diff --git a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
index d14356f8..77be3710 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
@@ -38,9 +38,8 @@
 import android.os.Looper;
 
 import com.mopub.common.factories.MethodBuilderFactory;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.ThreadUtils;
 
 import org.junit.After;
 import org.junit.Before;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/PreconditionsTest.java b/mopub-sdk/src/test/java/com/mopub/common/PreconditionsTest.java
new file mode 100644
index 00000000..2e021297
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/PreconditionsTest.java
@@ -0,0 +1,308 @@
+package com.mopub.common;
+
+
+import com.mopub.common.Preconditions.NoThrow;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.fest.assertions.api.Assertions.fail;
+
+@RunWith(RobolectricTestRunner.class)
+public class PreconditionsTest {
+
+    @Before
+    public void setUp() {
+        NoThrow.setStrictMode(false);
+    }
+    
+    @Test
+    public void checkArgument_success_shouldNotThrow() {
+        Preconditions.checkArgument(true);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void checkArgument_failure_shouldThrowIllegalArgumentException() {
+        Preconditions.checkArgument(false);
+    }
+
+    @Test
+    public void checkArgument_failure_withMessage_shouldThrowIllegalArgumentException() {
+        try {
+            Preconditions.checkArgument(false, "message");
+            fail("no exception thrown");
+        } catch (IllegalArgumentException exception) {
+            assertThat(exception.getMessage()).isEqualTo("message");
+        }
+    }
+
+    @Test
+    public void checkArgument_failure_withNullMessage_shouldThrowIllegalArgumentException() {
+        try {
+            Preconditions.checkArgument(false, null);
+            fail("no exception thrown");
+        } catch (IllegalArgumentException exception) {
+            assertThat(exception.getMessage()).isEqualTo("null");
+        }
+    }
+
+    @Test
+    public void checkArgument_failure_withComplexMessage_shouldThrowIllegalArgumentException() {
+        try {
+            Preconditions.checkArgument(false, "I %s fail", "should");
+            fail("no exception thrown");
+        } catch (IllegalArgumentException exception) {
+            assertThat(exception.getMessage()).isEqualTo("I should fail");
+        }
+    }
+
+    @Test
+    public void checkState_success_shouldNotThrow() {
+        Preconditions.checkArgument(true);
+    }
+
+    @Test(expected = IllegalStateException.class)
+    public void checkState_failure_shouldThrowIllegalStateException() {
+        Preconditions.checkState(false);
+    }
+
+    @Test
+    public void checkState_failure_withMessage_shouldThrowIllegalStateException() {
+        try {
+            Preconditions.checkState(false, "message");
+            fail("no exception thrown");
+        } catch (IllegalStateException exception) {
+            assertThat(exception.getMessage()).isEqualTo("message");
+        }
+    }
+
+    @Test
+    public void checkState_failure_withNullMessage_shouldThrowIllegalStateException() {
+        try {
+            Preconditions.checkState(false, null);
+            fail("no exception thrown");
+        } catch (IllegalStateException exception) {
+            assertThat(exception.getMessage()).isEqualTo("null");
+        }
+    }
+
+    @Test
+    public void checkState_failure_withComplexMessage_shouldThrowIllegalStateException() {
+        try {
+            Preconditions.checkState(false, "I %s fail", "should");
+            fail("no exception thrown");
+        } catch (IllegalStateException exception) {
+            assertThat(exception.getMessage()).isEqualTo("I should fail");
+        }
+    }
+
+    @Test
+    public void checkNotNull_success_shouldNotThrow() {
+        Preconditions.checkNotNull(new Object());
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void checkNotNull_failure_shouldThrowNullPointerException() {
+        Preconditions.checkNotNull(null);
+    }
+
+    @Test
+    public void checkNotNull_failure_withMessage_shouldThrowNullPointerException() {
+        try {
+            Preconditions.checkNotNull(null, "message");
+            fail("no exception thrown");
+        } catch (NullPointerException exception) {
+            assertThat(exception.getMessage()).isEqualTo("message");
+        }
+    }
+
+    @Test
+    public void checkNotNull_failure_withNullMessage_shouldThrowNullPointerException() {
+        try {
+            Preconditions.checkNotNull(null, null);
+            fail("no exception thrown");
+        } catch (NullPointerException exception) {
+            assertThat(exception.getMessage()).isEqualTo("null");
+        }
+    }
+
+    @Test
+    public void checkNotNull_failure_withComplexMessage_shouldThrowNullPointerException() {
+        try {
+            Preconditions.checkNotNull(null, "I %s fail", "should");
+            fail("no exception thrown");
+        } catch (NullPointerException exception) {
+            assertThat(exception.getMessage()).isEqualTo("I should fail");
+        }
+    }
+
+    @Test
+    public void checkUiThread_success_shouldNotThrow() {
+        Preconditions.checkUiThread();
+    }
+
+    @Test
+    public void noThrow_checkArgument_success_shouldReturnTrue() {
+        assertThat(NoThrow.checkArgument(true)).isTrue();
+    }
+
+    @Test
+    public void noThrow_checkArgument_failure_shouldReturnFalse() {
+        assertThat(NoThrow.checkArgument(false)).isFalse();
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void noThrow_strictMode_checkArgument_failure_shouldThrowIllegalArgumentException() {
+        NoThrow.setStrictMode(true);
+        NoThrow.checkArgument(false);
+    }
+
+    @Test
+    public void noThrow_strictMode_checkArgument_failure_withMessage_shouldThrowIllegalArgumentException() {
+        NoThrow.setStrictMode(true);
+        try {
+            NoThrow.checkArgument(false, "message");
+            fail("no exception thrown");
+        } catch (IllegalArgumentException exception) {
+            assertThat(exception.getMessage()).isEqualTo("message");
+        }
+    }
+
+    @Test
+    public void noThrow_strictMode_checkArgument_failure_withNullMessage_shouldThrowIllegalArgumentException() {
+        NoThrow.setStrictMode(true);
+        try {
+            NoThrow.checkArgument(false, null);
+            fail("no exception thrown");
+        } catch (IllegalArgumentException exception) {
+            assertThat(exception.getMessage()).isEqualTo("null");
+        }
+    }
+
+    @Test
+    public void noThrow_strictMode_checkArgument_failure_withComplexMessage_shouldThrowIllegalArgumentException() {
+        NoThrow.setStrictMode(true);
+        try {
+            NoThrow.checkArgument(false, "I %s fail", "should");
+            fail("no exception thrown");
+        } catch (IllegalArgumentException exception) {
+            assertThat(exception.getMessage()).isEqualTo("I should fail");
+        }
+    }
+
+    @Test
+    public void noThrow_checkState_success_shouldReturnTrue() {
+        assertThat(NoThrow.checkArgument(true)).isTrue();
+    }
+
+    @Test
+    public void noThrow_checkState_failure_shouldReturnFalse() {
+        assertThat(NoThrow.checkState(false)).isFalse();
+    }
+
+    @Test(expected = IllegalStateException.class)
+    public void noThrow_strictMode_checkState_failure_shouldThrowIllegalStateException() {
+        NoThrow.setStrictMode(true);
+        NoThrow.checkState(false);
+    }
+
+    @Test
+    public void noThrow_strictMode_checkState_failure_withMessage_shouldThrowIllegalStateException() {
+        NoThrow.setStrictMode(true);
+        try {
+            NoThrow.checkState(false, "message");
+            fail("no exception thrown");
+        } catch (IllegalStateException exception) {
+            assertThat(exception.getMessage()).isEqualTo("message");
+        }
+    }
+
+    @Test
+    public void noThrow_strictMode_checkState_failure_withNullMessage_shouldThrowIllegalStateException() {
+        NoThrow.setStrictMode(true);
+        try {
+            NoThrow.checkState(false, null);
+            fail("no exception thrown");
+        } catch (IllegalStateException exception) {
+            assertThat(exception.getMessage()).isEqualTo("null");
+        }
+    }
+
+    @Test
+    public void noThrow_strictMode_checkState_failure_withComplexMessage_shouldThrowIllegalStateException() {
+        NoThrow.setStrictMode(true);
+        try {
+            NoThrow.checkState(false, "I %s fail", "should");
+            fail("no exception thrown");
+        } catch (IllegalStateException exception) {
+            assertThat(exception.getMessage()).isEqualTo("I should fail");
+        }
+    }
+
+    @Test
+    public void noThrow_checkNotNull_success_shouldReturnTrue() {
+        assertThat(NoThrow.checkNotNull(new Object())).isTrue();
+    }
+
+    @Test
+    public void noThrow_checkNotNull_failure_shouldReturnFalse() {
+        assertThat(NoThrow.checkNotNull(null)).isFalse();
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void noThrow_strictMode_checkNotNull_failure_shouldThrowNullPointerException() {
+        NoThrow.setStrictMode(true);
+        NoThrow.checkNotNull(null);
+    }
+
+    @Test
+    public void noThrow_strictMode_checkNotNull_failure_withMessage_shouldThrowNullPointerException() {
+        NoThrow.setStrictMode(true);
+        try {
+            NoThrow.checkNotNull(null, "message");
+            fail("no exception thrown");
+        } catch (NullPointerException exception) {
+            assertThat(exception.getMessage()).isEqualTo("message");
+        }
+    }
+
+    @Test
+    public void noThrow_strictMode_checkNotNull_failure_withNullMessage_shouldThrowNullPointerException() {
+        NoThrow.setStrictMode(true);
+        try {
+            NoThrow.checkNotNull(null, null);
+            fail("no exception thrown");
+        } catch (NullPointerException exception) {
+            assertThat(exception.getMessage()).isEqualTo("null");
+        }
+    }
+
+    @Test
+    public void noThrow_strictMode_checkNotNull_failure_withComplexMessage_shouldThrowNullPointerException() {
+        NoThrow.setStrictMode(true);
+        try {
+            NoThrow.checkNotNull(null, "I %s fail", "should");
+            fail("no exception thrown");
+        } catch (NullPointerException exception) {
+            assertThat(exception.getMessage()).isEqualTo("I should fail");
+        }
+    }
+
+    @Test
+    public void noThrow_checkUiThread_success_shouldReturnTrue() {
+        assertThat(NoThrow.checkUiThread()).isTrue();
+    }
+
+    @Test
+    public void checkArgument_failure_withInvalidMessage_shouldThrowIllegalArgumentException() {
+        try {
+            Preconditions.checkArgument(false, "messages: ", "message1", "message2");
+            fail("no exception thrown");
+        } catch (IllegalArgumentException exception) {
+            assertThat(exception.getMessage()).isEqualTo("messages: ");
+        }
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/EventHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/EventHandlerTest.java
new file mode 100644
index 00000000..8c2d338c
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/event/EventHandlerTest.java
@@ -0,0 +1,57 @@
+package com.mopub.common.event;
+
+import android.os.HandlerThread;
+import android.os.Message;
+
+import com.mopub.common.ClientMetadata;
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.apache.http.HttpStatus;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+
+
+@RunWith(SdkTestRunner.class)
+public class EventHandlerTest {
+
+    private EventRecorder testRecorder;
+    private MoPubEvents.EventDispatcher subject;
+    private HandlerThread testHandlerThread;
+
+    @Before
+    public void setup() {
+        // Set up test event recorders and test handler thread.
+        List<EventRecorder> recorders = new ArrayList<EventRecorder>();
+        testRecorder = mock(EventRecorder.class);
+        recorders.add(testRecorder);
+        testHandlerThread = new HandlerThread("mopub-test-events");
+        subject = new MoPubEvents.EventDispatcher(recorders, testHandlerThread);
+        // The test runner uses a mock dispatcher that does nothing.
+        MoPubEvents.setEventDispatcher(subject);
+    }
+
+    @Test
+    public void createEvent_testCallbackCallsHandler() throws Exception {
+        Message message = new Message();
+        message.obj = new Event(BaseEvent.Type.DATA_ERROR, "Test URL", ClientMetadata.getInstance());
+        subject.mHandlerCallback.handleMessage(message);
+        verify(testRecorder).recordEvent(eq((Event) message.obj));
+    }
+
+    @Test
+    public void createTimedEvent_testCallbackCallsHandler() throws Exception {
+        Message message = new Message();
+        message.obj = new TimedEvent(BaseEvent.Type.DATA_ERROR, "Test URL", ClientMetadata.getInstance(), null);
+        ((TimedEvent) message.obj).stop(HttpStatus.SC_OK);
+        subject.mHandlerCallback.handleMessage(message);
+        verify(testRecorder).recordTimedEvent((TimedEvent) eq(message.obj));
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/SdkTestRunner.java b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
similarity index 65%
rename from mopub-sdk/src/test/java/com/mopub/mobileads/test/support/SdkTestRunner.java
rename to mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
index 217ba1d0..0f1e1adf 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/SdkTestRunner.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
@@ -30,10 +30,15 @@
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-package com.mopub.mobileads.test.support;
+package com.mopub.common.test.support;
 
+import com.mopub.common.ClientMetadata;
+import com.mopub.common.MoPub;
+import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.factories.MethodBuilderFactory;
+import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.DateAndTime;
+import com.mopub.common.util.test.support.ShadowAsyncTasks;
 import com.mopub.common.util.test.support.TestDateAndTime;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.mobileads.factories.AdFetcherFactory;
@@ -50,12 +55,36 @@
 import com.mopub.mobileads.factories.VastManagerFactory;
 import com.mopub.mobileads.factories.VastVideoDownloadTaskFactory;
 import com.mopub.mobileads.factories.ViewGestureDetectorFactory;
+import com.mopub.mobileads.test.support.TestAdFetcherFactory;
+import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
+import com.mopub.mobileads.test.support.TestCustomEventBannerAdapterFactory;
+import com.mopub.mobileads.test.support.TestCustomEventBannerFactory;
+import com.mopub.mobileads.test.support.TestCustomEventInterstitialAdapterFactory;
+import com.mopub.mobileads.test.support.TestCustomEventInterstitialFactory;
+import com.mopub.mobileads.test.support.TestHtmlBannerWebViewFactory;
+import com.mopub.mobileads.test.support.TestHtmlInterstitialWebViewFactory;
+import com.mopub.mobileads.test.support.TestHttpClientFactory;
+import com.mopub.mobileads.test.support.TestMoPubViewFactory;
+import com.mopub.mobileads.test.support.TestMraidViewFactory;
+import com.mopub.mobileads.test.support.TestVastManagerFactory;
+import com.mopub.mobileads.test.support.TestVastVideoDownloadTaskFactory;
+import com.mopub.mobileads.test.support.TestViewGestureDetectorFactory;
+import com.mopub.nativeads.factories.CustomEventNativeFactory;
+import com.mopub.nativeads.test.support.TestCustomEventNativeFactory;
 
 import org.junit.runners.model.InitializationError;
 import org.mockito.MockitoAnnotations;
 import org.robolectric.DefaultTestLifecycle;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.TestLifecycle;
+import org.robolectric.bytecode.ClassInfo;
+import org.robolectric.bytecode.Setup;
+import org.robolectric.util.RobolectricBackgroundExecutorService;
+
+import java.lang.reflect.Method;
+
+import static com.mopub.common.MoPub.LocationAwareness;
+import static org.mockito.Mockito.mock;
 
 public class SdkTestRunner extends RobolectricTestRunner {
 
@@ -63,6 +92,17 @@ public SdkTestRunner(Class<?> testClass) throws InitializationError {
         super(testClass);
     }
 
+    @Override
+    public Setup createSetup() {
+        return new Setup() {
+            @Override
+            public boolean shouldInstrument(ClassInfo classInfo) {
+                return classInfo.getName().equals(AsyncTasks.class.getName())
+                        || super.shouldInstrument(classInfo);
+            }
+        };
+    }
+
     @Override
     protected Class<? extends TestLifecycle> getTestLifecycleClass() {
         return TestLifeCycleWithInjection.class;
@@ -87,8 +127,20 @@ public void prepareTest(Object test) {
             VastManagerFactory.setInstance(new TestVastManagerFactory());
             VastVideoDownloadTaskFactory.setInstance(new TestVastVideoDownloadTaskFactory());
             MethodBuilderFactory.setInstance(new TestMethodBuilderFactory());
+            CustomEventNativeFactory.setInstance(new TestCustomEventNativeFactory());
+            ShadowAsyncTasks.reset();
+            MoPubEvents.setEventDispatcher(mock(MoPubEvents.EventDispatcher.class));
+            MoPub.setLocationAwareness(LocationAwareness.NORMAL);
+            MoPub.setLocationPrecision(6);
 
             MockitoAnnotations.initMocks(test);
+
+            AsyncTasks.setExecutor(new RobolectricBackgroundExecutorService());
+        }
+
+        @Override
+        public void afterTest(final Method method) {
+            ClientMetadata.clearForTesting();
         }
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
index 1a6dc5e1..89473924 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
@@ -2,6 +2,7 @@
 
 import android.os.AsyncTask;
 import android.os.Build;
+import android.os.Build.VERSION_CODES;
 import android.os.Handler;
 import android.os.Looper;
 
@@ -12,11 +13,12 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
+
+import java.util.concurrent.Executor;
 
-import static android.os.AsyncTask.THREAD_POOL_EXECUTOR;
-import static com.mopub.common.util.VersionCode.HONEYCOMB_MR2;
-import static com.mopub.common.util.VersionCode.ICE_CREAM_SANDWICH;
 import static junit.framework.Assert.fail;
+import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
@@ -34,80 +36,71 @@ protected Void doInBackground(String... strings) {
                 return null;
             }
         });
-    };
+    }
 
+    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
     @Test
-    public void safeExecuteOnExecutor_beforeICS_shouldCallExecuteWithParams() throws Exception {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", HONEYCOMB_MR2.getApiLevel());
-
+    public void safeExecuteOnExecutor_beforeHoneycomb_shouldCallExecuteWithParams() throws Exception {
         AsyncTasks.safeExecuteOnExecutor(asyncTask, "hello");
 
         verify(asyncTask).execute(eq("hello"));
     }
 
+    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
     @Test
-    public void safeExecutorOnExecutor_beforeICS_withNullParam_shouldCallExecute() throws Exception {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", HONEYCOMB_MR2.getApiLevel());
-
+    public void safeExecutorOnExecutor_beforeHoneycomb_withNullParam_shouldCallExecute() throws Exception {
         AsyncTasks.safeExecuteOnExecutor(asyncTask, (String) null);
 
         verify(asyncTask).execute(eq((String) null));
     }
 
+    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
     @Test
-    public void safeExecutorOnExecutor_beforeICS_withNullAsyncTask_shouldThrowIllegalArgumentException() throws Exception {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", HONEYCOMB_MR2.getApiLevel());
-
+    public void safeExecutorOnExecutor_beforeHoneycomb_withNullAsyncTask_shouldThrowIllegalArgumentException() throws Exception {
         try {
             AsyncTasks.safeExecuteOnExecutor(null, "hello");
-            fail("Should have thrown IllegalArgumentException");
-        } catch (IllegalArgumentException exception) {
+            fail("Should have thrown NullPointerException");
+        } catch (NullPointerException exception) {
             // pass
         }
     }
 
+    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
     @Test
-    public void safeExecutorOnExecutor_beforeICS_runningOnABackgroundThread_shouldThrowIllegalStateException() throws Exception {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", HONEYCOMB_MR2.getApiLevel());
-
+    public void safeExecutorOnExecutor_beforeHoneycomb_runningOnABackgroundThread_shouldThrowIllegalStateException() throws Exception {
         ensureFastFailWhenTaskIsRunOnBackgroundThread();
     }
 
+    @Config(reportSdk = VERSION_CODES.HONEYCOMB)
     @Test
-    public void safeExecuteOnExecutor_atLeastICS_shouldCallExecuteWithParamsWithExecutor() throws Exception {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", ICE_CREAM_SANDWICH.getApiLevel());
-
+    public void safeExecuteOnExecutor_atLeastHoneycomb_shouldCallExecuteWithParamsWithExecutor() throws Exception {
         AsyncTasks.safeExecuteOnExecutor(asyncTask, "goodbye");
 
-        verify(asyncTask).executeOnExecutor(eq(THREAD_POOL_EXECUTOR), eq("goodbye"));
+        verify(asyncTask).executeOnExecutor(any(Executor.class), eq("goodbye"));
     }
 
+    @Config(reportSdk = VERSION_CODES.HONEYCOMB)
     @Test
-    public void safeExecutorOnExecutor_atLeastICS_withNullParam_shouldCallExecuteWithParamsWithExecutor() throws Exception {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", ICE_CREAM_SANDWICH.getApiLevel());
-
+    public void safeExecutorOnExecutor_atLeastHoneycomb_withNullParam_shouldCallExecuteWithParamsWithExecutor() throws Exception {
         AsyncTasks.safeExecuteOnExecutor(asyncTask, (String) null);
 
-        verify(asyncTask).executeOnExecutor(eq(THREAD_POOL_EXECUTOR), eq((String) null));
-
+        verify(asyncTask).executeOnExecutor(any(Executor.class), eq((String) null));
     }
 
+    @Config(reportSdk = VERSION_CODES.HONEYCOMB)
     @Test
-    public void safeExecutorOnExecutor_atLeastICS_withNullAsyncTask_shouldThrowIllegalArgumentException() throws Exception {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", ICE_CREAM_SANDWICH.getApiLevel());
-
+    public void safeExecutorOnExecutor_atLeastHoneycomb_withNullAsyncTask_shouldThrowIllegalArgumentException() throws Exception {
         try {
             AsyncTasks.safeExecuteOnExecutor(null, "hello");
-            fail("Should have thrown IllegalArgumentException");
-        } catch (IllegalArgumentException exception) {
+            fail("Should have thrown NullPointerException");
+        } catch (NullPointerException exception) {
             // pass
         }
     }
 
+    @Config(reportSdk = VERSION_CODES.HONEYCOMB)
     @Test
-    public void safeExecutorOnExecutor_atLeastICS_runningOnABackgroundThread_shouldThrowIllegalStateException() throws Exception {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", ICE_CREAM_SANDWICH.getApiLevel());
-
+    public void safeExecutorOnExecutor_atLeastHoneycomb_runningOnABackgroundThread_shouldThrowIllegalStateException() throws Exception {
         ensureFastFailWhenTaskIsRunOnBackgroundThread();
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java
index c0954dd3..20edc449 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java
@@ -32,7 +32,7 @@
 
 package com.mopub.common.util;
 
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Test;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
index 1cc99438..78f7dac2 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
@@ -40,7 +40,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static com.mopub.common.util.Reflection.MethodBuilder;
+import static com.mopub.common.util.Reflection.*;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.fest.assertions.api.Assertions.fail;
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/VisibilityTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/VisibilityTest.java
index 891f72ad..0aa6f25d 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/VisibilityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/VisibilityTest.java
@@ -2,7 +2,7 @@
 
 import android.view.View;
 
-import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
index ea34c842..3c57df00 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
@@ -36,7 +36,7 @@
 import android.view.MotionEvent;
 import android.view.View;
 import com.mopub.mobileads.test.support.GestureUtils;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
index 5b395c06..c79acaac 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
@@ -39,20 +39,16 @@
 import android.net.Uri;
 import android.view.View;
 import android.widget.TextView;
-
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.test.support.TestDateAndTime;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 
-import java.io.File;
-import java.io.FileOutputStream;
+import java.io.*;
 import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Date;
+import java.util.*;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdConfigurationTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdConfigurationTest.java
index ff5f1fea..f238ba05 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdConfigurationTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdConfigurationTest.java
@@ -5,7 +5,7 @@
 import android.os.Build;
 
 import com.mopub.common.MoPub;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.test.support.TestDateAndTime;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import org.junit.Before;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java
index 7ab2bb97..34f56e09 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java
@@ -33,25 +33,30 @@
 package com.mopub.mobileads;
 
 import android.os.Build;
+import android.os.Build.VERSION_CODES;
+
 import com.mopub.mobileads.factories.AdFetchTaskFactory;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestAdFetchTaskFactory;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
+
 import org.apache.http.HttpResponse;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
-import java.util.*;
-import java.util.concurrent.*;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.Executor;
 
 import static com.mopub.common.util.ResponseHeader.AD_TYPE;
 import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
 import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
 import static com.mopub.common.util.ResponseHeader.FULL_AD_TYPE;
 import static com.mopub.common.util.ResponseHeader.NATIVE_PARAMS;
-import static com.mopub.common.util.VersionCode.HONEYCOMB_MR2;
+import static com.mopub.common.util.VersionCode.GINGERBREAD;
 import static com.mopub.common.util.VersionCode.ICE_CREAM_SANDWICH;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
@@ -127,21 +132,21 @@ public void fetchAdForUrl_shouldRouteMillennialInterstitialToCustomEventHandling
         verify(moPubInterstitialView).loadCustomEvent(eq(paramsMap));
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
-    public void fetchAdForUrl_whenApiLevelIsAtLeastICS_shouldExecuteUsingAnExecutor() throws Exception {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", ICE_CREAM_SANDWICH.getApiLevel());
+    public void fetchAdForUrl_atLeastIcs_shouldExecuteUsingAnExecutor() throws Exception {
         AdFetchTaskFactory.setInstance(new TestAdFetchTaskFactory());
         AdFetchTask adFetchTask = TestAdFetchTaskFactory.getSingletonMock();
 
         subject.fetchAdForUrl("some url");
 
-        verify(adFetchTask).executeOnExecutor(eq(AdFetchTask.THREAD_POOL_EXECUTOR), eq("some url"));
+        verify(adFetchTask).executeOnExecutor(any(Executor.class), eq("some url"));
         verify(adFetchTask, never()).execute(anyString());
     }
 
+    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
     @Test
-    public void fetchAdForUrl_whenApiLevelIsBelowICS_shouldExecuteWithoutAnExecutor() throws Exception {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", HONEYCOMB_MR2.getApiLevel());
+    public void fetchAdForUrl_beforeHoneycomb_shouldExecuteWithoutAnExecutor() throws Exception {
         AdFetchTaskFactory.setInstance(new TestAdFetchTaskFactory());
         AdFetchTask adFetchTask = TestAdFetchTaskFactory.getSingletonMock();
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
index b3838554..0aa475d9 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
@@ -33,7 +33,7 @@
 package com.mopub.mobileads;
 
 import com.mopub.mobileads.test.support.JsonUtils;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
index 57a72d6d..c9500c8a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
@@ -34,9 +34,8 @@
 
 import android.app.Activity;
 import android.content.Context;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
index 7acf9350..a40fc9a0 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
@@ -48,7 +48,7 @@
 import com.mopub.common.SharedPreferencesHelper;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.mobileads.factories.HttpClientFactory;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestAdFetcherFactory;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.mobileads.test.support.ThreadUtils;
@@ -276,6 +276,7 @@ public void trackImpression_shouldHttpGetTheImpressionUrl() throws Exception {
         }
     }
 
+    // this test for impressionUrl is unnecessary (since we're catching the NullPointerException)
     @Test
     public void trackImpression_shouldDoNothingIfImpressionUrlNotSpecified() throws Exception {
         subject.configureUsingHttpResponse(response);
@@ -314,6 +315,7 @@ public void registerClick_shouldHttpGetTheClickthroughUrl() throws Exception {
         }
     }
 
+    // this test for clickthroughUrl is unnecessary (since we're catching the NullPointerException)
     @Test
     public void trackImpression_shouldDoNothingIfClickthroughUrlNotSpecified() throws Exception {
         subject.configureUsingHttpResponse(response);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
index aeb012f8..73ebdf3f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
@@ -34,14 +34,16 @@
 
 import android.app.Activity;
 import android.os.Build;
+import android.os.Build.VERSION_CODES;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowWebView;
 
 import static android.webkit.WebSettings.PluginState;
@@ -70,15 +72,40 @@ public void setUp() throws Exception {
         touchUp = createMotionEvent(MotionEvent.ACTION_UP);
     }
 
+    @Config(reportSdk = VERSION_CODES.JELLY_BEAN_MR2)
     @Test
-    public void shouldEnablePluginsBasedOnApiLevel() throws Exception {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", ICE_CREAM_SANDWICH.getApiLevel());
+    public void pluginState_atLeastJellybeanMr2_shouldDefaultToOff_shouldNeverBeEnabled()  {
+        subject = new BaseHtmlWebView(new Activity(), adConfiguration);
+        assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.OFF);
+
+        subject.enablePlugins(true);
+        assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.OFF);
+    }
+
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Test
+    public void pluginState_atLeastIcsButBelowJellybeanMr2_shouldDefaultToOn_shouldAllowToggling() {
         subject = new BaseHtmlWebView(new Activity(), adConfiguration);
         assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.ON);
 
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", HONEYCOMB_MR2.getApiLevel());
+        subject.enablePlugins(false);
+        assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.OFF);
+
+        subject.enablePlugins(true);
+        assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.ON);
+    }
+
+    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
+    @Test
+    public void pluginState_beforeIcs_shouldDefaultToOff_shouldAllowToggling() {
         subject = new BaseHtmlWebView(new Activity(), adConfiguration);
         assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.OFF);
+
+        subject.enablePlugins(true);
+        assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.ON);
+
+        subject.enablePlugins(false);
+        assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.OFF);
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivitiyTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivitiyTest.java
index 2eeb9d78..32acd095 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivitiyTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivitiyTest.java
@@ -35,9 +35,8 @@
 import android.app.Activity;
 import android.content.Intent;
 
-import com.mopub.common.util.DeviceUtils;
 import com.mopub.common.util.Utils;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.util.vast.VastVideoConfiguration;
 
 import org.junit.Before;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
index 7dbc9d49..873c34a5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
@@ -35,13 +35,15 @@
 
 import android.app.Activity;
 import android.os.Build;
+import android.os.Build.VERSION_CODES;
 import android.view.ViewGroup;
 import android.webkit.WebSettings;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowWebView;
 
 import static com.mopub.common.util.VersionCode.JELLY_BEAN_MR1;
@@ -62,9 +64,9 @@ public void setup() {
         context = new Activity();
     }
 
+    @Config(reportSdk = VERSION_CODES.JELLY_BEAN_MR1)
     @Test
-    public void jellyBeanMr1AndBefore_shouldDisablePluginsByDefault() throws Exception {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", JELLY_BEAN_MR1.getApiLevel());
+    public void beforeJellyBeanMr1_shouldDisablePluginsByDefault() throws Exception {
         subject = new BaseWebView(context);
 
         WebSettings webSettings = subject.getSettings();
@@ -74,9 +76,9 @@ public void jellyBeanMr1AndBefore_shouldDisablePluginsByDefault() throws Excepti
         assertThat(webSettings.getPluginState()).isEqualTo(WebSettings.PluginState.ON);
     }
 
+    @Config(reportSdk = VERSION_CODES.JELLY_BEAN_MR2)
     @Test
-    public void jellyBeanMr2AndAfter_shouldPass() throws Exception {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", JELLY_BEAN_MR2.getApiLevel());
+    public void atLeastJellybeanMr2_shouldPass() throws Exception {
         subject = new BaseWebView(context);
 
         subject.enablePlugins(true);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventAdLoadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventAdLoadTaskTest.java
index a692e525..a8b9a525 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventAdLoadTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventAdLoadTaskTest.java
@@ -32,7 +32,7 @@
 
 package com.mopub.mobileads;
 
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
index 178738ee..2069502c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
@@ -36,10 +36,8 @@
 import android.content.Context;
 import android.location.Location;
 import android.view.View;
-
 import com.mopub.mobileads.factories.CustomEventBannerFactory;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-
+import com.mopub.common.test.support.SdkTestRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -47,8 +45,7 @@
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
 
-import java.util.HashMap;
-import java.util.Map;
+import java.util.*;
 
 import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
index 4e84f8b0..2cb8f1cf 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
@@ -36,7 +36,7 @@
 import android.location.Location;
 
 import com.mopub.mobileads.factories.CustomEventInterstitialFactory;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Test;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
index 72a4c4b1..e75d3ea5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
@@ -38,7 +38,7 @@
 import android.support.v4.content.LocalBroadcastManager;
 
 import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.fest.util.Sets;
 import org.junit.Before;
@@ -60,6 +60,7 @@
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialAdListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
@@ -81,6 +82,7 @@ public void setUp() throws Exception {
         context = new Activity();
     }
 
+    // takes place in the loading and showing of an interstitial.
     @Ignore("pending")
     @Test
     public void twoDifferentInterstitials_shouldNotHearEachOthersBroadcasts() throws Exception {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
index 0118378d..b7df78cb 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
@@ -36,6 +36,8 @@
 import android.net.Uri;
 import android.view.Gravity;
 import android.widget.FrameLayout;
+
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHtmlBannerWebViewFactory;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.mobileads.test.support.TestMoPubViewFactory;
@@ -60,7 +62,7 @@
 import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
 
-@RunWith(com.mopub.mobileads.test.support.SdkTestRunner.class)
+@RunWith(SdkTestRunner.class)
 public class HtmlBannerTest {
 
     private HtmlBanner subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java
index c02db867..49ecdef6 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java
@@ -34,7 +34,7 @@
 
 import android.app.Activity;
 import android.webkit.WebViewClient;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
index 5b63655a..a7af0b64 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
@@ -35,7 +35,7 @@
 import android.app.Activity;
 import android.content.Intent;
 import android.net.Uri;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHtmlInterstitialWebViewFactory;
 import org.junit.Before;
 import org.junit.Test;
@@ -91,7 +91,6 @@ public void setUp() throws Exception {
         localExtras.put(AD_CONFIGURATION_KEY, adConfiguration);
     }
 
-    // FIXME
     @Test
     public void loadInterstitial_shouldNotifyCustomEventInterstitialListenerOnLoaded() throws Exception {
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
index 3a2ee83c..3a7e3b0c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
@@ -34,12 +34,14 @@
 
 import android.app.Activity;
 import android.os.Build;
+import android.os.Build.VERSION_CODES;
 import android.webkit.WebViewClient;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import java.lang.reflect.Method;
 
@@ -115,9 +117,9 @@ public void init_shouldAddJavascriptInterface() throws Exception {
         verify(customEventInterstitialListener).onInterstitialLoaded();
     }
 
+    @Config(reportSdk = VERSION_CODES.HONEYCOMB)
     @Test
-    public void destroy_onHoneycombAndBeyond_shouldRemoveJavascriptInterface() {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", HONEYCOMB.getApiLevel());
+    public void destroy_atLeastHoneycomb_shouldRemoveJavascriptInterface() {
         HtmlInterstitialWebView spySubject = spy(subject);
 
         spySubject.destroy();
@@ -125,9 +127,9 @@ public void destroy_onHoneycombAndBeyond_shouldRemoveJavascriptInterface() {
         verify(spySubject).removeJavascriptInterface(MOPUB_JS_INTERFACE_NAME);
     }
 
+    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
     @Test
     public void destroy_beforeHoneycomb_shouldNotRemoveJavascriptInterface() {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", GINGERBREAD_MR1.getApiLevel());
         HtmlInterstitialWebView spySubject = spy(subject);
 
         spySubject.destroy();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
index d601450f..aed9f321 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
@@ -41,8 +41,7 @@
 import android.webkit.WebView;
 
 import com.mopub.common.MoPubBrowser;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-
+import com.mopub.common.test.support.SdkTestRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
index d5e5de4d..08ef5568 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
@@ -40,7 +40,7 @@
 import android.webkit.WebViewClient;
 import android.widget.RelativeLayout;
 
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHtmlInterstitialWebViewFactory;
 
 import org.junit.Before;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubBrowserControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubBrowserControllerTest.java
index dd3cce49..7f05c634 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubBrowserControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubBrowserControllerTest.java
@@ -39,7 +39,7 @@
 import android.net.Uri;
 
 import com.mopub.common.MoPubBrowser;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
index 7ff77b61..79bbfd60 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
@@ -40,7 +40,7 @@
 import com.mopub.common.util.Reflection.MethodBuilder;
 import com.mopub.common.util.Utils;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.apache.http.HttpRequest;
 import org.junit.After;
@@ -52,6 +52,7 @@
 import org.robolectric.tester.org.apache.http.HttpRequestInfo;
 
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.fest.assertions.api.Assertions.fail;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.when;
@@ -86,33 +87,33 @@ public void tearDown() throws Exception {
     public void reportAppOpen_onValidHttpResponse_isIdempotent() throws Exception {
         fakeHttpLayer.addPendingHttpResponse(200, "doesn't matter what this is as long as it's not nothing");
         subject.reportAppOpen(context);
-        assertThat(requestWasMade()).isTrue();
+        assertRequestMade(true);
 
         fakeHttpLayer.addPendingHttpResponse(200, "doesn't matter what this is as long as it's not nothing");
         subject.reportAppOpen(context);
-        assertThat(requestWasMade()).isFalse();
+        assertRequestMade(false);
     }
 
     @Test
     public void reportAppOpen_onInvalidStatusCode_shouldMakeSecondRequest() throws Exception {
         fakeHttpLayer.addPendingHttpResponse(404, "doesn't matter what this is as long as it's not nothing");
         subject.reportAppOpen(context);
-        assertThat(requestWasMade()).isTrue();
+        assertRequestMade(true);
 
         fakeHttpLayer.addPendingHttpResponse(404, "doesn't matter what this is as long as it's not nothing");
         subject.reportAppOpen(context);
-        assertThat(requestWasMade()).isTrue();
+        assertRequestMade(true);
     }
 
     @Test
     public void reportAppOpen_onEmptyResponse_shouldMakeSecondRequest() throws Exception {
         fakeHttpLayer.addPendingHttpResponse(200, "");
         subject.reportAppOpen(context);
-        assertThat(requestWasMade()).isTrue();
+        assertRequestMade(true);
 
         fakeHttpLayer.addPendingHttpResponse(200, "");
         subject.reportAppOpen(context);
-        assertThat(requestWasMade()).isTrue();
+        assertRequestMade(true);
     }
 
     @Test
@@ -136,10 +137,10 @@ public void reportAppOpen_whenGooglePlayServicesIsLinkedAndAdInfoIsNotCached_sho
         fakeHttpLayer.addPendingHttpResponse(200, "doesn't matter what this is as long as it's not nothing");
         subject.reportAppOpen(context);
         Thread.sleep(500); // extra sleep since there are 2 async tasks
-        assertThat(requestWasMade()).isTrue();
+        assertRequestMade(true);
     }
 
-    private boolean requestWasMade() throws Exception {
+    private void assertRequestMade(boolean shouldRequestBeMade) throws Exception {
         StringBuilder stringBuilder = new StringBuilder("http://ads.mopub.com/m/open")
                 .append("?v=6")
                 .append("&id=").append("com.mopub.mobileads")
@@ -156,12 +157,15 @@ private boolean requestWasMade() throws Exception {
         Thread.sleep(500);
         HttpRequestInfo lastSentHttpRequestInfo = fakeHttpLayer.getLastSentHttpRequestInfo();
         if (lastSentHttpRequestInfo == null) {
-            return false;
+            if (shouldRequestBeMade) {
+                fail("No request info in the http layer");
+            }
+            return;
         }
         HttpRequest request = lastSentHttpRequestInfo.getHttpRequest();
         fakeHttpLayer.clearRequestInfos();
         String actualUrl = request.getRequestLine().getUri();
-        return actualUrl.equals(expectedUrl);
+        assertThat(actualUrl).isEqualTo(expectedUrl);
     }
 }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
index 7fa52287..9450f9a0 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
@@ -34,6 +34,9 @@
 
 import android.app.Activity;
 
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.LocationService;
+import com.mopub.common.MoPub;
 import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
 import com.mopub.mobileads.test.support.TestCustomEventInterstitialAdapterFactory;
 
@@ -45,7 +48,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import static com.mopub.common.LocationService.LocationAwareness;
 import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
 import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_HTML_DATA;
 import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
@@ -60,7 +62,7 @@
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
 
-@RunWith(com.mopub.mobileads.test.support.SdkTestRunner.class)
+@RunWith(SdkTestRunner.class)
 public class MoPubInterstitialTest {
 
     private static final String KEYWORDS_VALUE = "expected_keywords";
@@ -121,46 +123,24 @@ public void getKeywordsTest() throws Exception {
     }
 
     @Test
-    public void getInterstitialAdListenerTest() throws Exception {
-        interstitialAdListener = mock(MoPubInterstitial.InterstitialAdListener.class);
-        subject.setInterstitialAdListener(interstitialAdListener);
-        assertThat(subject.getInterstitialAdListener()).isSameAs(interstitialAdListener);
-    }
-
-    @Test
-    public void setLocationAwarenessTest() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.setLocationAwareness(LocationAwareness.NORMAL);
-        verify(interstitialView).setLocationAwareness(eq(LocationAwareness.NORMAL));
-    }
-
-    @Test
-    public void getLocationAwarenessTest() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.getLocationAwareness();
-        verify(interstitialView).getLocationAwareness();
-    }
-
-    @Test
-    public void setLocationPrecisionTest() throws Exception {
+    public void setTestingTest() throws Exception {
         subject.setInterstitialView(interstitialView);
-        subject.setLocationPrecision(10);
-        verify(interstitialView).setLocationPrecision(eq(10));
+        subject.setTesting(true);
+        verify(interstitialView).setTesting(eq(true));
     }
 
     @Test
-    public void getLocationPrecisionTest() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.getLocationPrecision();
-        verify(interstitialView).getLocationPrecision();
+    public void getInterstitialAdListenerTest() throws Exception {
+        interstitialAdListener = mock(MoPubInterstitial.InterstitialAdListener.class);
+        subject.setInterstitialAdListener(interstitialAdListener);
+        assertThat(subject.getInterstitialAdListener()).isSameAs(interstitialAdListener);
     }
 
-
     @Test
-    public void setTestingTest() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.setTesting(true);
-        verify(interstitialView).setTesting(eq(true));
+    public void setLocationAwarenss_shouldChangeGlobalSetting() {
+        assertThat(MoPub.getLocationAwareness()).isEqualTo(MoPub.LocationAwareness.NORMAL);
+        subject.setLocationAwareness(LocationService.LocationAwareness.DISABLED);
+        assertThat(MoPub.getLocationAwareness()).isEqualTo(MoPub.LocationAwareness.DISABLED);
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
index 5f14615c..0339710f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
@@ -37,7 +37,9 @@
 import android.content.Intent;
 import android.view.View;
 
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.LocationService;
+import com.mopub.common.MoPub;
 import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
 import com.mopub.mobileads.test.support.TestCustomEventBannerAdapterFactory;
 
@@ -227,6 +229,13 @@ public void loadCustomEvent_whenParamsMapIsNull_shouldCallLoadFailUrl() throws E
         verify(customEventBannerAdapter, never()).loadAd();
     }
 
+    @Test
+    public void setLocationAwarenss_shouldChangeGlobalSetting() {
+        assertThat(MoPub.getLocationAwareness()).isEqualTo(MoPub.LocationAwareness.NORMAL);
+        subject.setLocationAwareness(LocationService.LocationAwareness.DISABLED);
+        assertThat(MoPub.getLocationAwareness()).isEqualTo(MoPub.LocationAwareness.DISABLED);
+    }
+
     private void broadcastIntent(final Intent intent) {
         final List<ShadowApplication.Wrapper> wrappers = Robolectric.getShadowApplication().getRegisteredReceivers();
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
index 3e008422..3ef7ff39 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
@@ -38,6 +38,7 @@
 import android.content.Intent;
 import android.graphics.Color;
 import android.os.Build;
+import android.os.Build.VERSION_CODES;
 import android.view.View;
 import android.view.WindowManager;
 import android.webkit.WebViewClient;
@@ -46,7 +47,7 @@
 import android.widget.RelativeLayout;
 
 import com.mopub.common.util.Dips;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestMraidViewFactory;
 
 import org.fest.assertions.api.ANDROID;
@@ -55,6 +56,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
 
 import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
@@ -202,20 +204,18 @@ public void onCreate_shouldAddCloseEventRegion() throws Exception {
                 .isEqualTo(RelativeLayout.TRUE);
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
-    public void onCreate_whenICS_shouldSetHardwareAcceleratedFlag() throws Exception {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", 14);
-
+    public void onCreate_atLeastIcs_shouldSetHardwareAcceleratedFlag() throws Exception {
         subject.onCreate(null);
 
         boolean hardwareAccelerated = shadowOf(subject.getWindow()).getFlag(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
         assertThat(hardwareAccelerated).isTrue();
     }
 
+    @Config(reportSdk = VERSION_CODES.HONEYCOMB_MR2)
     @Test
-    public void onCreate_whenPreICS_shouldNotSetHardwareAcceleratedFlag() throws Exception {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", 13);
-
+    public void onCreate_beforeIcs_shouldNotSetHardwareAcceleratedFlag() throws Exception {
         subject.onCreate(null);
 
         boolean hardwareAccelerated = shadowOf(subject.getWindow()).getFlag(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidBannerTest.java
index 3cd1e76c..8913cc1c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidBannerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidBannerTest.java
@@ -33,7 +33,7 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestMraidViewFactory;
 import org.junit.Before;
 import org.junit.Test;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandFactoryTest.java
index 8dc8dd85..e01ce594 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandFactoryTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandFactoryTest.java
@@ -32,7 +32,7 @@
 
 package com.mopub.mobileads;
 
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandPlayVideoTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandPlayVideoTest.java
index fc9f653f..341a3a40 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandPlayVideoTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandPlayVideoTest.java
@@ -34,7 +34,7 @@
 
 import android.app.Activity;
 
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestMraidViewFactory;
 
 import org.junit.Before;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandResizeTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandResizeTest.java
index e7ffb5f1..c4203a2a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandResizeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandResizeTest.java
@@ -32,7 +32,7 @@
 
 package com.mopub.mobileads;
 
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestMraidViewFactory;
 import org.junit.Before;
 import org.junit.Test;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandStorePictureTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandStorePictureTest.java
index 57f89fe8..6990c7aa 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandStorePictureTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandStorePictureTest.java
@@ -33,7 +33,7 @@
 package com.mopub.mobileads;
 
 import com.mopub.mobileads.test.support.FileUtils;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestMraidViewFactory;
 import org.junit.Before;
 import org.junit.Test;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandTest.java
index 69658afd..6dee186f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandTest.java
@@ -34,7 +34,7 @@
 
 import org.junit.Test;
 
-import java.util.Map;
+import java.util.*;
 
 import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.CLOSE;
 import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.CREATE_CALENDAR_EVENT;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java
index 610ae4bc..c360bfd9 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java
@@ -39,6 +39,7 @@
 import android.content.Intent;
 import android.graphics.Color;
 import android.os.Build;
+import android.os.Build.VERSION_CODES;
 import android.os.Environment;
 import android.provider.CalendarContract;
 import android.view.Gravity;
@@ -51,7 +52,7 @@
 
 import com.mopub.common.util.Dips;
 import com.mopub.mobileads.test.support.FileUtils;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.mobileads.test.support.TestMraidViewFactory;
 import com.mopub.mobileads.test.support.ThreadUtils;
@@ -66,21 +67,20 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowAlertDialog;
 import org.robolectric.shadows.ShadowEnvironment;
 import org.robolectric.shadows.ShadowLog;
 import org.robolectric.shadows.ShadowToast;
 
 import java.io.File;
+import java.io.FileInputStream;
 import java.net.URI;
 import java.util.HashMap;
 import java.util.Map;
 
 import static android.content.DialogInterface.BUTTON_NEGATIVE;
 import static android.content.DialogInterface.BUTTON_POSITIVE;
-import static com.mopub.common.util.VersionCode.ECLAIR;
-import static com.mopub.common.util.VersionCode.FROYO;
-import static com.mopub.common.util.VersionCode.ICE_CREAM_SANDWICH;
 import static com.mopub.mobileads.BaseVideoPlayerActivitiyTest.assertMraidVideoPlayerActivityStarted;
 import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.CREATE_CALENDAR_EVENT;
 import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_CURRENT_POSITION;
@@ -256,10 +256,10 @@ public void initializeSupportedFunctionsProperty_whenSDCardMounted_andWriteExter
         assertThat(mraidSupportsProperty.toJsonPair()).contains("storePicture: true");
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
-    public void initializeSupportedFunctionsProperty_whenApiLevelICSAndAbove_shouldReportCalendarAvailable() throws Exception {
+    public void initializeSupportedFunctionsProperty_atLeastIcs_shouldReportCalendarAvailable() throws Exception {
         Context mockContext = createMockContextWithSpecificIntentData(null, null, ANDROID_CALENDAR_CONTENT_TYPE, "android.intent.action.INSERT");
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", ICE_CREAM_SANDWICH.getApiLevel());
         resetMockMraidView(mockContext);
 
         subject.initializeSupportedFunctionsProperty();
@@ -269,10 +269,9 @@ public void initializeSupportedFunctionsProperty_whenApiLevelICSAndAbove_shouldR
         assertThat(mraidSupportsProperty.toJsonPair()).contains("calendar: true");
     }
 
+    @Config(reportSdk = VERSION_CODES.HONEYCOMB_MR2)
     @Test
-    public void initializeSupportedFunctionsProperty_whenBelowApiLevelICS_shouldNotReportCalendarAvailable() throws Exception {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", FROYO.getApiLevel());
-
+    public void initializeSupportedFunctionsProperty_beforeIcs_shouldNotReportCalendarAvailable() throws Exception {
         resetMockMraidView(new Activity());
         subject.initializeSupportedFunctionsProperty();
 
@@ -538,8 +537,9 @@ public void getScreenSize_shouldFireErrorEvent() throws Exception {
         verify(mraidView).fireErrorEvent(eq(GET_SCREEN_SIZE), any(String.class));
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
-    public void createCalendarEvent_withMinimumValidParams_onICS_shouldCreateEventIntent() throws Exception {
+    public void createCalendarEvent_withMinimumValidParams_atLeastICS_shouldCreateEventIntent() throws Exception {
         setupCalendarParams();
 
         subject.createCalendarEvent(params);
@@ -554,8 +554,9 @@ public void createCalendarEvent_withMinimumValidParams_onICS_shouldCreateEventIn
         assertThat(intent.getLongExtra(CalendarContract.EXTRA_EVENT_BEGIN_TIME, -1)).isNotEqualTo(-1);
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
-    public void createCalendarEvent_withoutSecondsOnStartDate_onICS_shouldCreateEventIntent() throws Exception {
+    public void createCalendarEvent_withoutSecondsOnStartDate_atLeastICS_shouldCreateEventIntent() throws Exception {
         setupCalendarParams();
         params.put("start", "2012-12-21T00:00-0500");
 
@@ -571,6 +572,7 @@ public void createCalendarEvent_withoutSecondsOnStartDate_onICS_shouldCreateEven
         assertThat(intent.getLongExtra(CalendarContract.EXTRA_EVENT_BEGIN_TIME, -1)).isNotEqualTo(-1);
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withDailyRecurrence_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -584,6 +586,7 @@ public void createCalendarEvent_withDailyRecurrence_shouldCreateCalendarIntent()
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=DAILY;");
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withDailyRecurrence_withInterval_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -596,6 +599,7 @@ public void createCalendarEvent_withDailyRecurrence_withInterval_shouldCreateCal
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=DAILY;INTERVAL=2;");
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withWeeklyRecurrence_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -607,6 +611,7 @@ public void createCalendarEvent_withWeeklyRecurrence_shouldCreateCalendarIntent(
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;");
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withWeeklyRecurrence_withInterval_withOutWeekday_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -619,6 +624,7 @@ public void createCalendarEvent_withWeeklyRecurrence_withInterval_withOutWeekday
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;INTERVAL=7;");
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withWeeklyRecurrence_onAllWeekDays_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -631,6 +637,7 @@ public void createCalendarEvent_withWeeklyRecurrence_onAllWeekDays_shouldCreateC
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;BYDAY=SU,MO,TU,WE,TH,FR,SA;");
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withWeeklyRecurrence_onDuplicateWeekDays_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -643,6 +650,7 @@ public void createCalendarEvent_withWeeklyRecurrence_onDuplicateWeekDays_shouldC
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;BYDAY=WE,TU,SU;");
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withWeeklyRecurrence_withInterval_withWeekDay_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -656,6 +664,7 @@ public void createCalendarEvent_withWeeklyRecurrence_withInterval_withWeekDay_sh
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;INTERVAL=1;BYDAY=MO;");
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withDailyRecurrence_withWeeklyRecurrence_withMonthlyOccurence_shouldCreateDailyCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -671,7 +680,7 @@ public void createCalendarEvent_withDailyRecurrence_withWeeklyRecurrence_withMon
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=DAILY;INTERVAL=2;");
     }
 
-
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withMonthlyRecurrence_withOutInterval_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -683,6 +692,7 @@ public void createCalendarEvent_withMonthlyRecurrence_withOutInterval_shouldCrea
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=MONTHLY;");
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withMonthlyRecurrence_withInterval_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -695,6 +705,7 @@ public void createCalendarEvent_withMonthlyRecurrence_withInterval_shouldCreateC
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=MONTHLY;INTERVAL=2;");
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withMonthlyRecurrence_withOutInterval_withDaysOfMonth_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -735,10 +746,10 @@ public void createCalendarEvent_withWeeklyRecurrence_withInvalidDaysOfWeek_shoul
         assertThat(ShadowLog.getLogs().size()).isEqualTo(1);
     }
 
+    @Config(reportSdk = VERSION_CODES.HONEYCOMB_MR2)
     @Test
-    public void createCalendarEvent_onPreICSDevice_shouldFireErrorEvent() throws Exception {
+    public void createCalendarEvent_beforeIcs_shouldFireErrorEvent() throws Exception {
         resetMockMraidView(new Activity());
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", ECLAIR.getApiLevel());
 
         subject.createCalendarEvent(params);
 
@@ -748,7 +759,6 @@ public void createCalendarEvent_onPreICSDevice_shouldFireErrorEvent() throws Exc
     @Test
     public void createCalendarEvent_withInvalidDate_shouldFireErrorEvent() throws Exception {
         resetMockMraidView(new Activity());
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", ICE_CREAM_SANDWICH.getApiLevel());
         params.put("start", "2013-08-14T09:00.-08:00");
         params.put("description", "Some Event");
 
@@ -760,7 +770,6 @@ public void createCalendarEvent_withInvalidDate_shouldFireErrorEvent() throws Ex
     @Test
     public void createCalendarEvent_withMissingParameters_shouldFireErrorEvent() throws Exception {
         resetMockMraidView(new Activity());
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", ICE_CREAM_SANDWICH.getApiLevel());
         //it needs a start time
         params.put("description", "Some Event");
 
@@ -772,7 +781,6 @@ public void createCalendarEvent_withMissingParameters_shouldFireErrorEvent() thr
     @Test
     public void createCalendarEvent_withNullDate_shouldFireErrorEvent() throws Exception {
         resetMockMraidView(new Activity());
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", ICE_CREAM_SANDWICH.getApiLevel());
         params.put("start", null);
         params.put("description", "Some Event");
 
@@ -781,8 +789,10 @@ public void createCalendarEvent_withNullDate_shouldFireErrorEvent() throws Excep
         verify(mraidView).fireErrorEvent(eq(CREATE_CALENDAR_EVENT), any(String.class));
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
-    public void createCalendarEvent_withValidParamsAllExceptRecurrence_onICS_shouldCreateEventIntent() throws Exception {
+    public void
+    createCalendarEvent_withValidParamsAllExceptRecurrence_atLeastICS_shouldCreateEventIntent() throws Exception {
         setupCalendarParams();
         params.put("location", "my house");
         params.put("end", "2013-08-14T22:01:01-0000");
@@ -871,7 +881,6 @@ public Void answer(InvocationOnMock invocation) throws Throwable {
         }).when(mockContext).startActivity(any(Intent.class));
 
         resetMockMraidView(mockContext);
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", ICE_CREAM_SANDWICH.getApiLevel());
         params.put("description", "Some Event");
         params.put("start", CALENDAR_START_TIME);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidInterstitialTest.java
index 1a72d470..f94ff7ad 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidInterstitialTest.java
@@ -35,7 +35,7 @@
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -94,7 +94,6 @@ public void loadInterstitial_withMalformedServerExtras_shouldNotifyInterstitialF
         verify(customEventInterstitialListener, never()).onInterstitialLoaded();
     }
 
-    // FIXME
     @Test
     public void loadInterstitial_shouldNotifyInterstitialLoaded() throws Exception {
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
index 6e72d0bd..7220364c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
@@ -41,7 +41,7 @@
 import android.widget.ImageView;
 
 import com.mopub.common.MoPubBrowser;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.util.vast.VastVideoConfiguration;
 
 import org.junit.Before;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoViewControllerTest.java
index 8013a514..80b115ef 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoViewControllerTest.java
@@ -6,7 +6,7 @@
 import android.os.Bundle;
 import android.widget.ImageButton;
 
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.apache.http.HttpRequest;
 import org.junit.After;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidViewTest.java
index d145cf61..b7bc4d13 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidViewTest.java
@@ -40,12 +40,11 @@
 import android.webkit.WebViewClient;
 
 import com.mopub.mobileads.resource.MraidJavascript;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
-import org.mockito.Mockito;
 import org.robolectric.Robolectric;
 import org.robolectric.shadows.ShadowWebView;
 
@@ -55,13 +54,11 @@
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.isA;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.times;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java
index 44f232f1..aa9f1786 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java
@@ -4,7 +4,7 @@
 
 import com.mopub.common.CacheService;
 import com.mopub.common.CacheServiceTest;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 
 import org.junit.After;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
index a42362ae..47dd45f5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
@@ -39,7 +39,7 @@
 
 import com.mopub.common.CacheService;
 import com.mopub.common.CacheServiceTest;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.mobileads.test.support.TestVastManagerFactory;
 import com.mopub.mobileads.test.support.TestVastVideoDownloadTaskFactory;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoToolbarTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoToolbarTest.java
index 0704c19d..f29f0a54 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoToolbarTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoToolbarTest.java
@@ -6,7 +6,7 @@
 import android.widget.TextView;
 
 import com.mopub.mobileads.resource.TextDrawable;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Test;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
index b550e83f..bfe69bbd 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
@@ -9,6 +9,7 @@
 import android.graphics.drawable.LayerDrawable;
 import android.media.MediaPlayer;
 import android.os.Build;
+import android.os.Build.VERSION_CODES;
 import android.os.Bundle;
 import android.view.View;
 import android.view.ViewGroup;
@@ -21,7 +22,7 @@
 import com.mopub.common.util.Drawables;
 import com.mopub.common.util.VersionCode;
 import com.mopub.mobileads.test.support.GestureUtils;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.util.vast.VastCompanionAd;
 import com.mopub.mobileads.util.vast.VastVideoConfiguration;
 
@@ -34,6 +35,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
 import org.robolectric.shadows.ShadowVideoView;
 import org.robolectric.tester.org.apache.http.RequestMatcher;
@@ -499,6 +501,8 @@ public void onPrepared_whenDurationIsLessThanMaxVideoDurationForCloseButton_shou
         stub(mediaPlayer.getDuration()).toReturn(1000);
         setMediaPlayer(mediaPlayer);
 
+        // this callback is typically called when the media filed is loaded and ready to play
+        // invoke this manually since we are using a mock url and don't want to wait
         final OnPreparedListener onPreparedListener = getShadowVideoView().getOnPreparedListener();
         onPreparedListener.onPrepared(null);
 
@@ -628,13 +632,12 @@ public void onError_shouldStopProgressChecker() throws Exception {
         assertThat(subject.getIsVideoProgressShouldBeChecked()).isFalse();
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
     @Test
     public void onError_withVideoFilePermissionErrorBelowJellyBean_shouldRetryPlayingTheVideo() throws Exception {
         File file = new File("disk_video_path");
         file.createNewFile();
 
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", VersionCode.ICE_CREAM_SANDWICH_MR1.getApiLevel());
-
         initializeSubject();
 
         assertThat(getShadowVideoView().getCurrentVideoState()).isEqualTo(-1);
@@ -648,13 +651,12 @@ public void onError_withVideoFilePermissionErrorBelowJellyBean_shouldRetryPlayin
         file.delete();
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
     @Test
     public void retryMediaPlayer_withVideoFilePermissionErrorAndBelowJellyBean_shouldReturnTrue() throws Exception {
         File file = new File("disk_video_path");
         file.createNewFile();
 
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", VersionCode.ICE_CREAM_SANDWICH_MR1.getApiLevel());
-
         initializeSubject();
 
         assertThat(subject.getVideoRetries()).isEqualTo(0);
@@ -664,13 +666,12 @@ public void retryMediaPlayer_withVideoFilePermissionErrorAndBelowJellyBean_shoul
         file.delete();
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
     @Test
     public void retryMediaPlayer_shouldNotRunMoreThanOnce() throws Exception {
         File file = new File("disk_video_path");
         file.createNewFile();
 
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", VersionCode.ICE_CREAM_SANDWICH_MR1.getApiLevel());
-
         initializeSubject();
 
         assertThat(subject.getVideoRetries()).isEqualTo(0);
@@ -683,13 +684,12 @@ public void retryMediaPlayer_shouldNotRunMoreThanOnce() throws Exception {
         file.delete();
     }
 
+    @Config(reportSdk = VERSION_CODES.JELLY_BEAN)
     @Test
     public void retryMediaPlayer_withAndroidVersionAboveJellyBean_shouldReturnFalse() throws Exception {
         File file = new File("disk_video_path");
         file.createNewFile();
 
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", VersionCode.JELLY_BEAN.getApiLevel());
-
         initializeSubject();
 
         assertThat(subject.getVideoRetries()).isEqualTo(0);
@@ -699,13 +699,12 @@ public void retryMediaPlayer_withAndroidVersionAboveJellyBean_shouldReturnFalse(
         file.delete();
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void retryMediaPlayer_withOtherVideoError_shouldReturnFalse() throws Exception {
         File file = new File("disk_video_path");
         file.createNewFile();
 
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", VersionCode.ICE_CREAM_SANDWICH.getApiLevel());
-
         initializeSubject();
 
         assertThat(subject.getVideoRetries()).isEqualTo(0);
@@ -715,6 +714,7 @@ public void retryMediaPlayer_withOtherVideoError_shouldReturnFalse() throws Exce
         file.delete();
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void retryMediaPlayer_withExceptionThrown_shouldReturnFalseAndIncrementRetryCount() throws Exception {
         File file = new File("disk_video_path");
@@ -722,9 +722,6 @@ public void retryMediaPlayer_withExceptionThrown_shouldReturnFalseAndIncrementRe
             assertThat(file.delete()).isTrue();
         }
 
-        // No file will cause FileInputStream to throw
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", VersionCode.ICE_CREAM_SANDWICH.getApiLevel());
-
         initializeSubject();
 
         assertThat(subject.getVideoRetries()).isEqualTo(0);
@@ -1028,13 +1025,12 @@ public void onResume_shouldSetVideoViewStateToStarted() throws Exception {
         assertThat(getShadowVideoView().getPrevVideoState()).isNotEqualTo(ShadowVideoView.START);
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
     @Test
     public void onResume_shouldResetVideoRetryCountToZero() throws Exception {
         File file = new File("disk_video_path");
         file.createNewFile();
 
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", VersionCode.ICE_CREAM_SANDWICH_MR1.getApiLevel());
-
         initializeSubject();
 
         assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE)).isTrue();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
index 86a54d09..8a0e6dc2 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
@@ -35,7 +35,7 @@
 import android.app.Activity;
 import android.view.MotionEvent;
 import android.view.View;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
similarity index 86%
rename from mopub-sdk/src/test/java/com/mopub/mobileads/WebViewUrlGeneratorTest.java
rename to mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
index 76f79c4d..ad550c29 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
@@ -38,28 +38,32 @@
 import android.location.Location;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
+import android.net.Uri;
 import android.os.Build;
 import android.provider.Settings;
 import android.telephony.TelephonyManager;
+import android.text.TextUtils;
 
 import com.mopub.common.AdUrlGenerator;
+import com.mopub.common.ClientMetadata;
 import com.mopub.common.GpsHelper;
 import com.mopub.common.GpsHelperTest;
+import com.mopub.common.MoPub;
 import com.mopub.common.SharedPreferencesHelper;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Reflection.MethodBuilder;
-import com.mopub.common.MoPub;
 import com.mopub.common.util.Utils;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
 
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
+import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowConnectivityManager;
 import org.robolectric.shadows.ShadowNetworkInfo;
-import org.robolectric.shadows.ShadowTelephonyManager;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static android.net.ConnectivityManager.TYPE_DUMMY;
@@ -71,9 +75,9 @@
 import static android.net.ConnectivityManager.TYPE_MOBILE_SUPL;
 import static android.net.ConnectivityManager.TYPE_WIFI;
 import static android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN;
-import static com.mopub.common.AdUrlGenerator.MoPubNetworkType;
+import static com.mopub.common.AdUrlGenerator.TwitterAppInstalledStatus;
+import static com.mopub.common.ClientMetadata.MoPubNetworkType;
 import static com.mopub.common.util.Strings.isEmpty;
-import static com.mopub.mobileads.WebViewAdUrlGenerator.TwitterAppInstalledStatus;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.doReturn;
@@ -83,13 +87,14 @@
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
-public class WebViewUrlGeneratorTest {
+@Config(shadows = {MoPubShadowTelephonyManager.class})
+public class WebViewAdUrlGeneratorTest {
 
     private WebViewAdUrlGenerator subject;
     private static final String TEST_UDID = "20b013c721c";
     private String expectedUdid;
     private Configuration configuration;
-    private ShadowTelephonyManager shadowTelephonyManager;
+    private MoPubShadowTelephonyManager shadowTelephonyManager;
     private ShadowConnectivityManager shadowConnectivityManager;
     private Activity context;
     private MethodBuilder methodBuilder;
@@ -102,7 +107,7 @@ public void setup() {
         Settings.Secure.putString(application.getContentResolver(), Settings.Secure.ANDROID_ID, TEST_UDID);
         expectedUdid = "sha%3A" + Utils.sha1(TEST_UDID);
         configuration = application.getResources().getConfiguration();
-        shadowTelephonyManager = shadowOf((TelephonyManager) application.getSystemService(Context.TELEPHONY_SERVICE));
+        shadowTelephonyManager = (MoPubShadowTelephonyManager) shadowOf((TelephonyManager) application.getSystemService(Context.TELEPHONY_SERVICE));
         shadowConnectivityManager = shadowOf((ConnectivityManager) application.getSystemService(Context.CONNECTIVITY_SERVICE));
         methodBuilder = TestMethodBuilderFactory.getSingletonMock();
     }
@@ -181,23 +186,62 @@ public void generateAdUrl_shouldHandleFunkyNetworkOperatorCodes() throws Excepti
         String adUrl = generateMinimumUrlString();
         assertThat(adUrl).isEqualTo(urlBuilder.withMcc("123").withMnc("456").build());
 
+        ClientMetadata.clearForTesting();
         shadowTelephonyManager.setNetworkOperator("12345");
         adUrl = generateMinimumUrlString();
         assertThat(adUrl).isEqualTo(urlBuilder.withMcc("123").withMnc("45").build());
 
+        ClientMetadata.clearForTesting();
         shadowTelephonyManager.setNetworkOperator("1234");
         adUrl = generateMinimumUrlString();
         assertThat(adUrl).isEqualTo(urlBuilder.withMcc("123").withMnc("4").build());
 
+        ClientMetadata.clearForTesting();
         shadowTelephonyManager.setNetworkOperator("123");
         adUrl = generateMinimumUrlString();
         assertThat(adUrl).isEqualTo(urlBuilder.withMcc("123").withMnc("").build());
 
+        ClientMetadata.clearForTesting();
         shadowTelephonyManager.setNetworkOperator("12");
         adUrl = generateMinimumUrlString();
         assertThat(adUrl).isEqualTo(urlBuilder.withMcc("12").withMnc("").build());
     }
 
+    @Test
+    public void generateAdUrl_needsAndDoesNotHaveReadPhoneState_shouldNotContainOperatorName() {
+        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
+
+        shadowTelephonyManager.setNeedsReadPhoneState(true);
+        shadowTelephonyManager.setReadPhoneStatePermission(false);
+
+        String adUrl = generateMinimumUrlString();
+        assertThat(adUrl).isEqualTo(urlBuilder.withCarrierName("").build());
+    }
+
+    @Test
+    public void generateAdUrl_needsAndHasReadPhoneState_shouldContainOperatorName() {
+        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
+
+        shadowTelephonyManager.setNeedsReadPhoneState(true);
+        shadowTelephonyManager.setReadPhoneStatePermission(true);
+        shadowTelephonyManager.setNetworkOperatorName("TEST_NAME");
+
+        String adUrl = generateMinimumUrlString();
+        assertThat(adUrl).isEqualTo(urlBuilder.withCarrierName("TEST_NAME").build());
+    }
+
+    @Test
+    public void generateAdUrl_doesNotNeedReadPhoneState_shouldContainOperatorName() {
+        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
+
+        shadowTelephonyManager.setNeedsReadPhoneState(false);
+        shadowTelephonyManager.setReadPhoneStatePermission(false);
+        shadowTelephonyManager.setNetworkOperatorName("TEST_NAME");
+
+        String adUrl = generateMinimumUrlString();
+        assertThat(adUrl).isEqualTo(urlBuilder.withCarrierName("TEST_NAME").build());
+    }
+
     @Test
     public void generateAdurl_whenOnCDMA_shouldGetOwnerStringFromSimCard() throws Exception {
         AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
@@ -341,6 +385,31 @@ public void generateAdUrl_whenGooglePlayServicesIsLinkedAndAdInfoIsCached_should
         assertThat(generateMinimumUrlString()).isEqualTo(expectedAdUrl);
     }
 
+    @Test
+    public void enableLocationTracking_shouldIncludeLocationInUrl() {
+        MoPub.setLocationAwareness(MoPub.LocationAwareness.NORMAL);
+        String adUrl = generateMinimumUrlString();
+        assertThat(getLocationFromRequestUrl(adUrl)).isNotNull();
+    }
+
+    @Test
+    public void disableLocationCollection_shouldNotIncludeLocationInUrl() {
+        MoPub.setLocationAwareness(MoPub.LocationAwareness.DISABLED);
+        String adUrl = generateMinimumUrlString();
+        assertThat(getLocationFromRequestUrl(adUrl)).isNullOrEmpty();
+    }
+
+    private String getLocationFromRequestUrl(String requestString) {
+        Uri requestUri = Uri.parse(requestString);
+        String location = requestUri.getQueryParameter("ll");
+
+        if (TextUtils.isEmpty(location)) {
+            return "";
+        }
+
+        return location;
+    }
+
     private NetworkInfo createNetworkInfo(int type) {
         return ShadowNetworkInfo.newInstance(null,
                 type,
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java
index 6bae7304..4b7f4178 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java
@@ -34,7 +34,7 @@
 
 import com.mopub.mobileads.AdTypeTranslator;
 import com.mopub.mobileads.CustomEventBanner;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java
index fd94ae51..f7f42c0a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java
@@ -34,7 +34,7 @@
 
 import com.mopub.mobileads.AdTypeTranslator;
 import com.mopub.mobileads.CustomEventInterstitial;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowTelephonyManager.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowTelephonyManager.java
new file mode 100644
index 00000000..7a4256e5
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowTelephonyManager.java
@@ -0,0 +1,41 @@
+package com.mopub.mobileads.test.support;
+
+import android.telephony.TelephonyManager;
+
+import org.robolectric.annotation.Implements;
+import org.robolectric.shadows.ShadowTelephonyManager;
+
+@Implements(TelephonyManager.class)
+public class MoPubShadowTelephonyManager extends ShadowTelephonyManager {
+
+    private boolean mNeedsReadPhoneState;
+    private boolean mHasReadPhoneState;
+
+    public MoPubShadowTelephonyManager() {
+        mNeedsReadPhoneState = false;
+        mHasReadPhoneState = false;
+    }
+
+    /**
+     * Some Lenovo & other phones require READ_PHONE_STATE on getNetworkOperatorName().
+     */
+    public void setNeedsReadPhoneState(boolean needsReadPhoneState) {
+        mNeedsReadPhoneState = needsReadPhoneState;
+    }
+
+    @Override
+    public void setReadPhoneStatePermission(final boolean readPhoneStatePermission) {
+        // Robolectric hides its checkReadPhoneState method so we need to hack our own.
+        mHasReadPhoneState = readPhoneStatePermission;
+        super.setReadPhoneStatePermission(readPhoneStatePermission);
+    }
+
+    @Override
+    public String getNetworkOperatorName() {
+        if (!mNeedsReadPhoneState || mHasReadPhoneState) {
+            return super.getNetworkOperatorName();
+        } else {
+            throw new SecurityException("READ_PHONE_STATE is required.");
+        }
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpClientsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpClientsTest.java
index bbe55de4..b2bbbb3b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpClientsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpClientsTest.java
@@ -1,6 +1,6 @@
 package com.mopub.mobileads.util;
 
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.ThreadUtils;
 import org.apache.http.client.HttpClient;
 import org.apache.http.conn.ClientConnectionManager;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpResponsesTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpResponsesTest.java
index 5ab561b1..af33a5bc 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpResponsesTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpResponsesTest.java
@@ -32,7 +32,7 @@
 
 package com.mopub.mobileads.util;
 
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import org.junit.Before;
 import org.junit.Test;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/MraidsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/MraidsTest.java
index 5f9bd441..6228dda5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/MraidsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/MraidsTest.java
@@ -39,14 +39,16 @@
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
 import android.os.Build;
+import android.os.Build.VERSION_CODES;
 import android.os.Environment;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import org.hamcrest.BaseMatcher;
 import org.hamcrest.Description;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowEnvironment;
 
 import java.util.*;
@@ -120,27 +122,25 @@ public void isStorePictureAvailable_whenMediaUnmounted_shouldReturnFalse() throw
         assertThat(Mraids.isStorePictureSupported(context)).isFalse();
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
-    public void isCalendarAvailable_whenApiLevelICS_shouldReturnTrue() throws Exception {
+    public void isCalendarAvailable_atLeastIcs_shouldReturnTrue() throws Exception {
         context = createMockContextWithSpecificIntentData(null, null, Mraids.ANDROID_CALENDAR_CONTENT_TYPE, "android.intent.action.INSERT");
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", ICE_CREAM_SANDWICH.getApiLevel());
-
         assertThat(Mraids.isCalendarAvailable(context)).isTrue();
     }
 
+    @Config(reportSdk = VERSION_CODES.HONEYCOMB_MR2)
     @Test
-    public void isCalendarAvailable_whenApiLevelBelowICS_shouldReturnFalse() throws Exception {
+    public void isCalendarAvailable_beforeIcs_shouldReturnFalse() throws Exception {
         context = createMockContextWithSpecificIntentData(null, null, Mraids.ANDROID_CALENDAR_CONTENT_TYPE, "android.intent.action.INSERT");
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", HONEYCOMB_MR2.getApiLevel());
-
         assertThat(Mraids.isCalendarAvailable(context)).isFalse();
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
-    public void isCalendarAvailable_whenApiLevelICSButCanNotAcceptIntent_shouldReturnFalse() throws Exception {
+    public void isCalendarAvailable_atLeastIcs_butCanNotAcceptIntent_shouldReturnFalse() throws
+            Exception {
         context = createMockContextWithSpecificIntentData(null, null, "vnd.android.cursor.item/NOPE", "android.intent.action.INSERT");
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", ICE_CREAM_SANDWICH.getApiLevel());
-
         assertThat(Mraids.isCalendarAvailable(context)).isFalse();
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java
index 26e5bf1a..4e1faf55 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java
@@ -6,7 +6,7 @@
 import android.view.WindowManager;
 
 import com.mopub.common.CacheService;
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.After;
 import org.junit.Before;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregatorTest.java
index 3b9324ad..f7ddc3f2 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregatorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregatorTest.java
@@ -1,6 +1,6 @@
 package com.mopub.mobileads.util.vast;
 
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Test;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerTest.java
index 80072ad8..dd7bb02b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerTest.java
@@ -1,6 +1,6 @@
 package com.mopub.mobileads.util.vast;
 
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Test;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
index db692e8b..fe8f94c7 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
@@ -2,7 +2,7 @@
 
 import android.app.Activity;
 
-import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Test;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/BaseForwardingNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/BaseForwardingNativeAdTest.java
index 488f2eb6..d9d5a191 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/BaseForwardingNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/BaseForwardingNativeAdTest.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Test;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java
index 1939b6c5..85fe6d61 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java
@@ -5,7 +5,7 @@
 import com.mopub.common.DownloadResponse;
 import com.mopub.common.util.ResponseHeader;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.nativeads.test.support.TestCustomEventNativeFactory;
 
 import org.junit.Before;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDiskTaskManagerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDiskTaskManagerTest.java
index 0067ae13..6d6e7195 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDiskTaskManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDiskTaskManagerTest.java
@@ -6,7 +6,7 @@
 
 import com.mopub.common.CacheService;
 import com.mopub.common.CacheServiceTest;
-import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.After;
 import org.junit.Before;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDownloadTaskManagerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDownloadTaskManagerTest.java
index eb5862b7..b9664d43 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDownloadTaskManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDownloadTaskManagerTest.java
@@ -1,7 +1,7 @@
 package com.mopub.nativeads;
 
 import com.mopub.common.DownloadResponse;
-import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageServiceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageServiceTest.java
index 8ec61d62..f1298d06 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageServiceTest.java
@@ -10,7 +10,7 @@
 import com.mopub.common.DownloadResponse;
 import com.mopub.nativeads.test.support.MoPubShadowBitmap;
 import com.mopub.nativeads.test.support.MoPubShadowDisplay;
-import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.After;
 import org.junit.Before;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageViewServiceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageViewServiceTest.java
index 8eb2dc2c..54ea511d 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageViewServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageViewServiceTest.java
@@ -11,7 +11,7 @@
 import com.mopub.common.CacheServiceTest;
 import com.mopub.nativeads.test.support.MoPubShadowBitmap;
 import com.mopub.nativeads.test.support.MoPubShadowDisplay;
-import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.After;
 import org.junit.Before;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java
index c87c097d..0bba4e12 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java
@@ -3,7 +3,7 @@
 import android.os.Handler;
 import android.view.View;
 
-import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.fest.util.Lists;
 import org.junit.Before;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
index 11c28870..880c3ba1 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
@@ -5,7 +5,7 @@
 import android.view.ViewGroup;
 import android.widget.BaseAdapter;
 
-import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Test;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubClientPositioningTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubClientPositioningTest.java
new file mode 100644
index 00000000..cce90d4e
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubClientPositioningTest.java
@@ -0,0 +1,91 @@
+package com.mopub.nativeads;
+
+import com.mopub.common.Preconditions.NoThrow;
+import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.fest.util.Lists;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import static com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning.NO_REPEAT;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@Config(manifest=Config.NONE)
+@RunWith(SdkTestRunner.class)
+public class MoPubClientPositioningTest {
+
+    private MoPubClientPositioning subject;
+
+    @Before
+    public void setup() {
+        subject = MoPubNativeAdPositioning.clientPositioning();
+    }
+
+    @Test
+    public void addFixedPositionsOutOfOrder_shouldBeSorted() {
+        subject.addFixedPosition(27);
+        subject.addFixedPosition(31);
+        subject.addFixedPosition(17);
+        subject.addFixedPosition(7);
+        subject.addFixedPosition(56);
+
+        assertThat(subject.getFixedPositions())
+                .isEqualTo(Lists.newArrayList(7, 17, 27, 31, 56));
+    }
+
+    @Test
+    public void setRepeatingEnabled_shouldHaveRightInterval() {
+        subject.addFixedPosition(10);
+        subject.enableRepeatingPositions(5);
+
+        assertThat(subject.getRepeatingInterval()).isEqualTo(5);
+        assertThat(subject.getFixedPositions()).isEqualTo(Lists.newArrayList(10));
+    }
+
+    @Test
+    public void setNoRepeat_shouldReturnNoRepeat() {
+        subject.enableRepeatingPositions(5);
+        subject.enableRepeatingPositions(NO_REPEAT);
+
+        assertThat(subject.getRepeatingInterval()).isEqualTo(NO_REPEAT);
+    }
+
+    @Test
+    public void setFixedPositionTwice_shouldReturnOnlyOne() {
+        subject.addFixedPosition(7);
+        subject.addFixedPosition(7);
+
+        assertThat(subject.getFixedPositions().size()).isEqualTo(1);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void setInvalidFixedPosition_strictMode_shouldThrow() {
+        NoThrow.setStrictMode(true);
+        subject.addFixedPosition(-3);
+    }
+
+    @Test
+    public void setInvalidFixedPosition_releaseMode_shouldNotAddPosition() {
+        NoThrow.setStrictMode(false);
+        subject.addFixedPosition(-3);
+
+        assertThat(subject.getFixedPositions().size()).isEqualTo(0);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void setInvalidRepeatingInterval_strictMode_shouldThrow() {
+        NoThrow.setStrictMode(true);
+        subject.enableRepeatingPositions(1);
+    }
+
+    @Test
+    public void setInvalidRepeatingInterval_releaseMode_shouldClearRepeatingInterval() {
+        NoThrow.setStrictMode(false);
+        subject.enableRepeatingPositions(0);
+
+        assertThat(subject.getRepeatingInterval()).isEqualTo(NO_REPEAT);
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
index c0598add..ef0f4049 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
@@ -4,7 +4,7 @@
 
 import com.mopub.common.CacheService;
 import com.mopub.nativeads.test.support.MoPubShadowBitmap;
-import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.apache.http.HttpRequest;
 import org.json.JSONArray;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java
index e46755ee..584ebc92 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java
@@ -2,7 +2,7 @@
 
 import android.app.Activity;
 
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.json.JSONArray;
 import org.json.JSONObject;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdPositioningTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdPositioningTest.java
deleted file mode 100644
index 4072e562..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdPositioningTest.java
+++ /dev/null
@@ -1,81 +0,0 @@
-package com.mopub.nativeads;
-
-import com.mopub.nativeads.test.support.SdkTestRunner;
-
-import org.fest.util.Lists;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static com.mopub.nativeads.MoPubNativeAdPositioning.NO_REPEAT;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@Config(manifest=Config.NONE)
-@RunWith(SdkTestRunner.class)
-public class MoPubNativeAdPositioningTest {
-
-    private MoPubNativeAdPositioning.Builder subject;
-
-    @Before
-    public void setup() {
-        subject = MoPubNativeAdPositioning.newBuilder();
-    }
-
-    @Test
-    public void addFixedPositionsOutOfOrder_shouldBeSorted() throws Exception {
-        subject.addFixedPosition(27);
-        subject.addFixedPosition(31);
-        subject.addFixedPosition(17);
-        subject.addFixedPosition(7);
-        subject.addFixedPosition(56);
-
-        assertThat(subject.build().getFixedPositions())
-                .isEqualTo(Lists.newArrayList(7, 17, 27, 31, 56));
-    }
-
-    @Test
-    public void setRepeatingEnabled_shouldHaveRightInterval() throws Exception {
-        subject.addFixedPosition(10);
-        subject.enableRepeatingPositions(5);
-
-        assertThat(subject.build().getRepeatingInterval()).isEqualTo(5);
-        assertThat(subject.build().getFixedPositions()).isEqualTo(Lists.newArrayList(10));
-    }
-
-    @Test
-    public void setNoRepeat_shouldReturnNoRepeat() throws Exception {
-        subject.enableRepeatingPositions(5);
-        subject.enableRepeatingPositions(NO_REPEAT);
-
-        assertThat(subject.build().getRepeatingInterval()).isEqualTo(NO_REPEAT);
-    }
-
-    @Test
-    public void setAdUnitOverrides_shouldReturnOverrides() throws Exception {
-        subject.addFixedPosition(7);
-        subject.addFixedPosition(13, "override");
-
-        MoPubNativeAdPositioning underTest = subject.build();
-        assertThat(underTest.getAdUnitIdOverride(2)).isNull();  // Nonexistent ad position.
-        assertThat(underTest.getAdUnitIdOverride(7)).isNull();
-        assertThat(underTest.getAdUnitIdOverride(13)).isEqualTo("override");
-    }
-    
-    @Test
-    public void setFixedPositionTwice_shouldReturnOnlyOne() throws Exception {
-        subject.addFixedPosition(7, "override");
-        subject.addFixedPosition(7);
-
-        MoPubNativeAdPositioning underTest = subject.build();
-        assertThat(underTest.getFixedPositions().size()).isEqualTo(1);
-        assertThat(underTest.getAdUnitIdOverride(7)).isEqualTo(null);
-    }
-
-    @Test
-    public void setInvalidFixedPosition_shouldNotAdd() throws Exception {
-        subject.addFixedPosition(-3);
-
-        assertThat(subject.build().getFixedPositions().size()).isEqualTo(0);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java
index b2ebc878..507a576d 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java
@@ -13,7 +13,7 @@
 import com.mopub.common.util.ResponseHeader;
 import com.mopub.common.util.Utils;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Rule;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
index 23eeab83..9857b9c4 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
@@ -10,7 +10,7 @@
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.nativeads.MoPubNative.MoPubNativeEventListener;
 import com.mopub.nativeads.MoPubNative.MoPubNativeNetworkListener;
-import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.apache.http.client.methods.HttpGet;
 import org.junit.After;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java
index 4922b179..bd745f10 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java
@@ -5,17 +5,20 @@
 import android.view.View;
 import android.view.ViewGroup;
 
-import com.mopub.nativeads.NativeAdSource.AdSourceListener;
-import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Answers;
-import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
@@ -29,8 +32,10 @@
 public class MoPubStreamAdPlacerTest {
     private Context context;
 
-    PlacementData placementData;
+    MoPubClientPositioning positioning;
 
+    @Mock
+    PositioningSource mockPositioningSource;
     @Mock
     NativeAdSource mockAdSource;
     @Mock
@@ -48,59 +53,50 @@
     @Before
     public void setup() {
         context = new Activity();
+        positioning = MoPubNativeAdPositioning.clientPositioning()
+                .enableRepeatingPositions(2);
 
-        // Repeating every 5 positions
-        placementData = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.newBuilder()
-                .enableRepeatingPositions(2)
-                .build());
-
-        subject = new MoPubStreamAdPlacer(context, mockAdSource, mockImpressionTracker, placementData);
+        subject = new MoPubStreamAdPlacer(
+                context, mockAdSource, mockImpressionTracker, mockPositioningSource);
         subject.registerAdRenderer(mockAdRenderer);
         subject.setAdLoadedListener(mockAdLoadedListener);
     }
 
     @Test
     public void isAd_initialState_hasNoAds() {
-        assertThat(subject.isAd(0)).isFalse();
-        assertThat(subject.isAd(1)).isFalse();
-        assertThat(subject.isAd(2)).isFalse();
-        assertThat(subject.isAd(3)).isFalse();
-        assertThat(subject.isAd(4)).isFalse();
+        checkAdPositions();
     }
 
     @Test
-    public void isAd_placeAdsWithNoAdsAvailable_hasNoAds() {
-        subject.setItemCount(4);
-
-        assertThat(subject.isAd(0)).isFalse();
-        assertThat(subject.isAd(1)).isFalse();
-        assertThat(subject.isAd(2)).isFalse();
-        assertThat(subject.isAd(3)).isFalse();
-        assertThat(subject.isAd(4)).isFalse();
+    public void isAd_loadPositions_withoutLoadingAds_hasNoAds() {
+        subject.handlePositioningLoad(positioning);
+        checkAdPositions();
     }
 
     @Test
-    public void isAd_placeAdsWithAdsAvailable_hasAds() {
+    public void isAd_loadAds_withoutLoadingPositions_hasNoAds() {
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.setItemCount(4);  // Will place ads at positions 1, 3, and 5
-
-        assertThat(subject.isAd(0)).isFalse();
-        assertThat(subject.isAd(1)).isTrue();
-        assertThat(subject.isAd(2)).isFalse();
-        assertThat(subject.isAd(3)).isTrue();
-        assertThat(subject.isAd(4)).isFalse();
+        subject.handleAdsAvailable();
+        subject.setItemCount(4);
+        checkAdPositions();
     }
 
     @Test
-    public void getAdData_placeAdsWithAdsAvailable_hasAds() {
+    public void isAd_loadAds_thenLoadPositions_hasAds() {
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.setItemCount(4);  // Will place ads at positions 1, 3, and 5
+        subject.handleAdsAvailable();
+        subject.handlePositioningLoad(positioning);
+        subject.setItemCount(4);
+        checkAdPositions(1, 3, 5);
+    }
 
-        assertThat(subject.getAdData(0)).isNull();
-        assertThat(subject.getAdData(1)).isNotNull();
-        assertThat(subject.getAdData(2)).isNull();
-        assertThat(subject.getAdData(3)).isNotNull();
-        assertThat(subject.getAdData(4)).isNull();
+    @Test
+    public void isAd_loadPositions_thenLoadAds_hasAds() {
+        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.handlePositioningLoad(positioning);
+        subject.handleAdsAvailable();
+        subject.setItemCount(4);
+        checkAdPositions(1, 3, 5);
     }
 
     @Test
@@ -112,13 +108,20 @@ public void getOriginalPosition_adjustsPositions() {
         assertThat(subject.getOriginalPosition(4)).isEqualTo(4);
 
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.setItemCount(4);  // Will place ads at positions 1, 3, and 5
+        subject.handlePositioningLoad(positioning);
+        subject.handleAdsAvailable();
+        subject.setItemCount(4);
 
         assertThat(subject.getOriginalPosition(0)).isEqualTo(0);
         assertThat(subject.getOriginalPosition(1)).isEqualTo(PlacementData.NOT_FOUND);
         assertThat(subject.getOriginalPosition(2)).isEqualTo(1);
         assertThat(subject.getOriginalPosition(3)).isEqualTo(PlacementData.NOT_FOUND);
         assertThat(subject.getOriginalPosition(4)).isEqualTo(2);
+        assertThat(subject.getOriginalPosition(5)).isEqualTo(PlacementData.NOT_FOUND);
+        assertThat(subject.getOriginalPosition(6)).isEqualTo(3);
+        assertThat(subject.getOriginalPosition(7)).isEqualTo(4);
+        assertThat(subject.getOriginalPosition(8)).isEqualTo(5);
+        assertThat(subject.getOriginalPosition(9)).isEqualTo(6);
     }
 
     @Test
@@ -130,13 +133,20 @@ public void getAdjustedPosition_adjustsPositions() {
         assertThat(subject.getAdjustedPosition(4)).isEqualTo(4);
 
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.setItemCount(4);  // Will place ads at positions 1, 3, and 5
+        subject.handlePositioningLoad(positioning);
+        subject.handleAdsAvailable();
+        subject.setItemCount(4);
 
         assertThat(subject.getAdjustedPosition(0)).isEqualTo(0);
         assertThat(subject.getAdjustedPosition(1)).isEqualTo(2);
         assertThat(subject.getAdjustedPosition(2)).isEqualTo(4);
         assertThat(subject.getAdjustedPosition(3)).isEqualTo(6);
         assertThat(subject.getAdjustedPosition(4)).isEqualTo(7);
+        assertThat(subject.getAdjustedPosition(5)).isEqualTo(8);
+        assertThat(subject.getAdjustedPosition(6)).isEqualTo(9);
+        assertThat(subject.getAdjustedPosition(7)).isEqualTo(10);
+        assertThat(subject.getAdjustedPosition(8)).isEqualTo(11);
+        assertThat(subject.getAdjustedPosition(9)).isEqualTo(12);
     }
 
     @Test
@@ -148,13 +158,20 @@ public void getOriginalCount_adjustsPositions() {
         assertThat(subject.getOriginalCount(4)).isEqualTo(4);
 
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.setItemCount(4);  // Will place ads at positions 1, 3, and 5
+        subject.handlePositioningLoad(positioning);
+        subject.handleAdsAvailable();
+        subject.setItemCount(4);
 
         assertThat(subject.getOriginalCount(0)).isEqualTo(0);
         assertThat(subject.getOriginalCount(1)).isEqualTo(1);
         assertThat(subject.getOriginalCount(2)).isEqualTo(PlacementData.NOT_FOUND);
         assertThat(subject.getOriginalCount(3)).isEqualTo(2);
         assertThat(subject.getOriginalCount(4)).isEqualTo(PlacementData.NOT_FOUND);
+        assertThat(subject.getOriginalCount(5)).isEqualTo(3);
+        assertThat(subject.getOriginalCount(6)).isEqualTo(PlacementData.NOT_FOUND);
+        assertThat(subject.getOriginalCount(7)).isEqualTo(4);
+        assertThat(subject.getOriginalCount(8)).isEqualTo(5);
+        assertThat(subject.getOriginalCount(9)).isEqualTo(6);
     }
 
     @Test
@@ -166,20 +183,29 @@ public void getAdjustedCount_adjustsPositions() {
         assertThat(subject.getAdjustedCount(4)).isEqualTo(4);
 
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.setItemCount(4);  // Will place ads at positions 1, 3, and 5
+        subject.handlePositioningLoad(positioning);
+        subject.handleAdsAvailable();
+        subject.setItemCount(4);
 
         assertThat(subject.getAdjustedCount(0)).isEqualTo(0);
         assertThat(subject.getAdjustedCount(1)).isEqualTo(1);
         assertThat(subject.getAdjustedCount(2)).isEqualTo(3);
         assertThat(subject.getAdjustedCount(3)).isEqualTo(5);
         assertThat(subject.getAdjustedCount(4)).isEqualTo(7);
+        assertThat(subject.getAdjustedCount(5)).isEqualTo(8);
+        assertThat(subject.getAdjustedCount(6)).isEqualTo(9);
+        assertThat(subject.getAdjustedCount(7)).isEqualTo(10);
+        assertThat(subject.getAdjustedCount(8)).isEqualTo(11);
+        assertThat(subject.getAdjustedCount(9)).isEqualTo(12);
     }
 
     @Test
     public void placeAds_shouldCallListener() {
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.handlePositioningLoad(positioning);
+        subject.handleAdsAvailable();
+        subject.setItemCount(4);
 
-        subject.setItemCount(4);  // Will place ads at positions 1, 3, and 5
         verify(mockAdLoadedListener, never()).onAdLoaded(0);
         verify(mockAdLoadedListener).onAdLoaded(1);
         verify(mockAdLoadedListener, never()).onAdLoaded(2);
@@ -193,6 +219,8 @@ public void placeAds_shouldCallListener() {
     @Test
     public void placeAdsInRange_shouldPlaceAfter() {
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.handlePositioningLoad(positioning);
+        subject.handleAdsAvailable();
 
         Robolectric.getUiThreadScheduler().pause();
         subject.setItemCount(100);
@@ -211,6 +239,8 @@ public void placeAdsInRange_shouldPlaceAfter() {
     @Test
     public void placeAdsInRange_shouldCallListener() {
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.handlePositioningLoad(positioning);
+        subject.handleAdsAvailable();
 
         Robolectric.getUiThreadScheduler().pause();
         subject.setItemCount(100);
@@ -229,6 +259,8 @@ public void placeAdsInRange_shouldCallListener() {
     @Test
     public void placeAdsInRange_aboveItemCount_shouldNotInsert() {
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.handlePositioningLoad(positioning);
+        subject.handleAdsAvailable();
 
         Robolectric.getUiThreadScheduler().pause();
         subject.setItemCount(0);
@@ -243,59 +275,43 @@ public void getAdView_withNoAds_returnsNull() {
         assertThat(subject.getAdView(1, null, null)).isNull();
     }
 
-    @Test
-    public void loadAds_shouldLoadAdsWhenAvailable() {
-        // Shouldn't load ads because there aren't any available
-        subject.setItemCount(2);
-        subject.placeAdsInRange(0, 1);
-        subject.loadAds("test-ad-unit-id");
-        assertThat(subject.isAd(1)).isFalse();
-        verify(mockAdLoadedListener, never()).onAdLoaded(anyInt());
-
-        // Capture the ad source listener so that we can trigger an ad loading
-        ArgumentCaptor<AdSourceListener> captor = ArgumentCaptor.forClass(AdSourceListener.class);
-        verify(mockAdSource).setAdSourceListener(captor.capture());
-        AdSourceListener adSourceListener = captor.getValue();
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        adSourceListener.onAdsAvailable();
-
-        // Check that an ad was loaded
-        assertThat(subject.isAd(1)).isTrue();
-        verify(mockAdLoadedListener).onAdLoaded(1);
-    }
-
     @Test
     public void loadAds_shouldClearAds_afterFirstAdLoads() {
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.handlePositioningLoad(positioning);
+        subject.handleAdsAvailable();
         subject.setItemCount(2);
         subject.placeAdsInRange(0, 1);
 
-        subject.loadAds("test-ad-unit-id");
-        ArgumentCaptor<AdSourceListener> captor = ArgumentCaptor.forClass(AdSourceListener.class);
-        verify(mockAdSource).setAdSourceListener(captor.capture());
-        AdSourceListener adSourceListener = captor.getValue();
+        subject.loadAds("test_ad-unit-id");
 
         // Ad should still exist until a new ad is available
-        assertThat(subject.isAd(1)).isTrue();
+        checkAdPositions(1);
         verify(mockAdLoadedListener, never()).onAdRemoved(anyInt());
 
         // Once an ad is available, it should be immediately removed and replaced
-        adSourceListener.onAdsAvailable();
+        subject.handleAdsAvailable();
+        subject.handlePositioningLoad(positioning);
         verify(mockAdLoadedListener).onAdRemoved(1);
         verify(mockAdLoadedListener, times(2)).onAdLoaded(1);
-        assertThat(subject.isAd(1)).isTrue();
+        checkAdPositions(1);
     }
 
     @Test
-    public void clearAds_shouldClearAdSource_shouldClearImpressionTracker_shouldResetPlacementData() {
-        PlacementData mockPlacementData = mock(PlacementData.class);
-        subject = new MoPubStreamAdPlacer(context, mockAdSource, mockImpressionTracker, mockPlacementData);
+    public void destroy_shouldClearAdSource_shouldDestroyImpressionTracker_shouldDestroyResponse() {
+        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+
+        subject = new MoPubStreamAdPlacer(context,
+                mockAdSource, mockImpressionTracker, mockPositioningSource);
+        subject.handlePositioningLoad(positioning);
+        subject.handleAdsAvailable();
+        subject.setItemCount(2);  // Places 1 ad
 
         subject.destroy();
 
         verify(mockAdSource).clear();
         verify(mockImpressionTracker).destroy();
-        verify(mockPlacementData).clearAds();
+        verify(stubNativeResponse).destroy();
     }
 
     @Test
@@ -303,8 +319,9 @@ public void getAdView_withNullConvertView_callsRenderer_addsToImpressionTracker(
         View view = new View(context);
         when(mockAdRenderer.createAdView(any(Context.class), any(ViewGroup.class)))
                 .thenReturn(view);
-
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.handlePositioningLoad(positioning);
+        subject.handleAdsAvailable();
         subject.setItemCount(100);
 
         assertThat(subject.getAdView(1, null, null)).isEqualTo(view);
@@ -316,9 +333,10 @@ public void getAdView_withNullConvertView_callsRenderer_addsToImpressionTracker(
     @Test
     public void getAdView_withConvertView_callsRenderer_addsToImpressionTracker() {
         View convertView = new View(context);
-
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.setItemCount(100);
+        subject.handlePositioningLoad(positioning);
+        subject.handleAdsAvailable();
+        subject.setItemCount(4);
 
         assertThat(subject.getAdView(1, convertView, null)).isEqualTo(convertView);
         verify(mockAdRenderer, never()).createAdView(any(Context.class), any(ViewGroup.class));
@@ -328,13 +346,44 @@ public void getAdView_withConvertView_callsRenderer_addsToImpressionTracker() {
 
     @Test
     public void destroy_shouldClearAdSource_shouldDestroyImpressionTracker_shouldResetPlacementData() {
-        PlacementData mockPlacementData = mock(PlacementData.class);
-        subject = new MoPubStreamAdPlacer(context, mockAdSource, mockImpressionTracker, mockPlacementData);
+        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+
+        subject = new MoPubStreamAdPlacer(context,
+                mockAdSource, mockImpressionTracker, mockPositioningSource);
+        subject.handlePositioningLoad(positioning);
+        subject.handleAdsAvailable();
+        subject.setItemCount(2);  // Places 1 ad
 
         subject.destroy();
 
         verify(mockAdSource).clear();
         verify(mockImpressionTracker).destroy();
-        verify(mockPlacementData).clearAds();
+        verify(stubNativeResponse).destroy();
+    }
+
+    @Test
+    public void modifyClientPositioning_afterConstructingAdPlacer_shouldNotModifyAdPositions() {
+        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.handlePositioningLoad(positioning);
+        positioning.enableRepeatingPositions(5);
+
+        subject.handleAdsAvailable();
+        subject.setItemCount(4);
+        checkAdPositions(1, 3, 5);
+    }
+
+    void checkAdPositions(Integer... positions) {
+        List<Integer> expected = Arrays.asList(positions);
+        List<Integer> actual = new ArrayList<Integer>();
+        for (int i = 0; i < 20; i++) {
+            if (subject.isAd(i)) {
+                actual.add(i);
+                assertThat(subject.getAdData(i)).isNotNull();
+            } else {
+                assertThat(subject.getAdData(i)).isNull();
+            }
+        }
+
+        assertThat(actual).isEqualTo(expected);
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
index d103c9b7..36bebe63 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
@@ -3,7 +3,7 @@
 import android.os.Handler;
 import android.os.SystemClock;
 
-import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -298,25 +298,29 @@ public void moPubNativeNetworkListener_onNativeLoad_withNonFullCache_shouldReple
     }
 
     @Test
-    public void moPubNativeNetworkListener_onNativeFail_shouldResetRequestInFlight_shouldUpdateRetryTime_shouldPostDelayedRunnable() {
+    public void
+    moPubNativeNetworkListener_onNativeFail_shouldResetInFlight_shouldUpdateRetryTime_shouldPostDelayedRunnable() {
         subject.mRequestInFlight = true;
         subject.mRetryTimeMilliseconds = defaultRetryTime;
 
         subject.getMoPubNativeNetworkListener().onNativeFail(NativeErrorCode.UNSPECIFIED);
 
-        assertThat(subject.mRequestInFlight).isEqualTo(true);
+        assertThat(subject.mRequestInFlight).isEqualTo(false);
+        assertThat(subject.mRetryInFlight).isEqualTo(true);
         assertThat(subject.mRetryTimeMilliseconds).isGreaterThan(defaultRetryTime);
         verify(mockReplenishCacheHandler).postDelayed(any(Runnable.class), eq((long)subject.mRetryTimeMilliseconds));
     }
 
     @Test
-    public void moPubNativeNetworkListener_onNativeFail_maxRetryTime_shouldResetRetryTime_shouldNotPostDelayedRunnable() {
+    public void
+    moPubNativeNetworkListener_onNativeFail_maxRetryTime_shouldResetInflight_shouldResetRetryTime_shouldNotPostDelayedRunnable() {
         subject.mRequestInFlight = true;
         subject.mRetryTimeMilliseconds = maxRetryTime;
 
         subject.getMoPubNativeNetworkListener().onNativeFail(NativeErrorCode.UNSPECIFIED);
 
         assertThat(subject.mRequestInFlight).isEqualTo(false);
+        assertThat(subject.mRetryInFlight).isEqualTo(false);
         assertThat(subject.mRetryTimeMilliseconds).isEqualTo(defaultRetryTime);
         verify(mockReplenishCacheHandler, never()).postDelayed(any(Runnable.class), anyLong());
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
index 6208fa94..edd50369 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
@@ -10,7 +10,7 @@
 
 import com.mopub.common.DownloadResponse;
 import com.mopub.common.util.Utils;
-import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Test;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
index 6ba1aa0d..4718004f 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
@@ -8,7 +8,7 @@
 import com.mopub.common.DownloadResponse;
 import com.mopub.common.util.ResponseHeader;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Ignore;
@@ -21,7 +21,6 @@
 import java.util.Map;
 
 import static com.mopub.nativeads.MoPubNative.EMPTY_EVENT_LISTENER;
-import static com.mopub.nativeads.MoPubNative.EMPTY_NETWORK_LISTENER;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
index 86deaa9f..5d96c9b0 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
@@ -1,33 +1,43 @@
 package com.mopub.nativeads;
 
 import android.app.Activity;
+import android.content.Context;
 import android.net.Uri;
+import android.telephony.TelephonyManager;
+import android.text.TextUtils;
 
-import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.common.MoPub;
+import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 
-import java.util.EnumSet;
-import java.util.List;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.HashSet;
+import java.util.EnumSet;
+import java.util.List;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
+@Config(shadows = {MoPubShadowTelephonyManager.class})
 public class NativeUrlGeneratorTest {
+    public static final String AD_UNIT_ID = "1234";
     private Activity context;
     private NativeUrlGenerator subject;
+    private MoPubShadowTelephonyManager shadowTelephonyManager;
 
     @Before
     public void setup() {
         context = new Activity();
         shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
+        shadowTelephonyManager = (MoPubShadowTelephonyManager)
+                shadowOf((TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE));
     }
 
     @Test
@@ -35,7 +45,7 @@ public void generateNativeAdUrl_shouldIncludeDesiredAssetIfSet() throws Exceptio
         EnumSet<RequestParameters.NativeAdAsset> assetsSet = EnumSet.of(RequestParameters.NativeAdAsset.TITLE);
         RequestParameters requestParameters = new RequestParameters.Builder().desiredAssets(assetsSet).build();
 
-        subject = new NativeUrlGenerator(context).withAdUnitId("1234").withRequest(requestParameters);
+        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID).withRequest(requestParameters);
 
         String requestString = generateMinimumUrlString();
         List<String> desiredAssets = getDesiredAssetsListFromRequestUrlString(requestString);
@@ -49,7 +59,7 @@ public void generateNativeAdUrl_shouldIncludeDesiredAssetsIfSet() throws Excepti
         EnumSet<RequestParameters.NativeAdAsset> assetsSet = EnumSet.of(RequestParameters.NativeAdAsset.TITLE, RequestParameters.NativeAdAsset.TEXT, RequestParameters.NativeAdAsset.ICON_IMAGE);
         RequestParameters requestParameters = new RequestParameters.Builder().desiredAssets(assetsSet).build();
 
-        subject = new NativeUrlGenerator(context).withAdUnitId("1234").withRequest(requestParameters);
+        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID).withRequest(requestParameters);
 
         String requestString = generateMinimumUrlString();
         List<String> desiredAssets = getDesiredAssetsListFromRequestUrlString(requestString);
@@ -60,7 +70,7 @@ public void generateNativeAdUrl_shouldIncludeDesiredAssetsIfSet() throws Excepti
 
     @Test
     public void generateNativeAdUrl_shouldNotIncludeDesiredAssetsIfNotSet() throws Exception {
-        subject = new NativeUrlGenerator(context).withAdUnitId("1234");
+        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
 
         String requestString = generateMinimumUrlString();
         List<String> desiredAssets = getDesiredAssetsListFromRequestUrlString(requestString);
@@ -73,7 +83,7 @@ public void generateNativeAdUrl_shouldNotIncludeDesiredAssetsIfNoAssetsAreSet()
         EnumSet<RequestParameters.NativeAdAsset> assetsSet = EnumSet.noneOf(RequestParameters.NativeAdAsset.class);
         RequestParameters requestParameters = new RequestParameters.Builder().desiredAssets(assetsSet).build();
 
-        subject = new NativeUrlGenerator(context).withAdUnitId("1234").withRequest(requestParameters);
+        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID).withRequest(requestParameters);
 
         String requestString = generateMinimumUrlString();
         List<String> desiredAssets = getDesiredAssetsListFromRequestUrlString(requestString);
@@ -81,6 +91,60 @@ public void generateNativeAdUrl_shouldNotIncludeDesiredAssetsIfNoAssetsAreSet()
         assertThat(desiredAssets.size()).isEqualTo(0);
     }
 
+    @Test
+    public void generateNativeAdUrl_needsButDoesNotHaveReadPhoneState_shouldNotContainOperatorName() {
+        shadowTelephonyManager.setNeedsReadPhoneState(true);
+        shadowTelephonyManager.setReadPhoneStatePermission(false);
+        shadowTelephonyManager.setNetworkOperatorName("TEST_CARRIER");
+
+        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
+        String requestString = generateMinimumUrlString();
+
+        assertThat(getNetworkOperatorNameFromRequestUrl(requestString)).isNullOrEmpty();
+    }
+    
+    @Test
+    public void generateNativeAdUrl_needsAndHasReadPhoneState_shouldContainOperatorName() {
+        shadowTelephonyManager.setNeedsReadPhoneState(true);
+        shadowTelephonyManager.setReadPhoneStatePermission(true);
+        shadowTelephonyManager.setNetworkOperatorName("TEST_CARRIER");
+
+        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
+        String requestString = generateMinimumUrlString();
+
+        assertThat(getNetworkOperatorNameFromRequestUrl(requestString)).isEqualTo("TEST_CARRIER");
+    }
+
+    @Test
+    public void generateNativeAdUrl_doesNotNeedReadPhoneState_shouldContainOperatorName() {
+        shadowTelephonyManager.setNeedsReadPhoneState(false);
+        shadowTelephonyManager.setReadPhoneStatePermission(false);
+        shadowTelephonyManager.setNetworkOperatorName("TEST_CARRIER");
+
+        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
+        String requestString = generateMinimumUrlString();
+
+        assertThat(getNetworkOperatorNameFromRequestUrl(requestString)).isEqualTo("TEST_CARRIER");
+    }
+
+    @Test
+    public void enableLocation_shouldIncludeLocationInUrl() {
+        MoPub.setLocationAwareness(MoPub.LocationAwareness.NORMAL);
+        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
+
+        String requestString = generateMinimumUrlString();
+        assertThat(getLocationFromRequestUrl(requestString)).isNotNull();
+    }
+
+    @Test
+    public void disableLocation_shouldNotIncludeLocationInUrl() {
+        MoPub.setLocationAwareness(MoPub.LocationAwareness.DISABLED);
+        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
+
+        String requestString = generateMinimumUrlString();
+        assertThat(getLocationFromRequestUrl(requestString)).isNullOrEmpty();
+    }
+
     private List<String> getDesiredAssetsListFromRequestUrlString(String requestString) {
         Uri requestUri = Uri.parse(requestString);
 
@@ -88,6 +152,29 @@ public void generateNativeAdUrl_shouldNotIncludeDesiredAssetsIfNoAssetsAreSet()
         return (desiredAssetsString == null) ? new ArrayList<String>() : Arrays.asList(desiredAssetsString.split(","));
     }
 
+    private String getNetworkOperatorNameFromRequestUrl(String requestString) {
+        Uri requestUri = Uri.parse(requestString);
+
+        String networkOperatorName = requestUri.getQueryParameter("cn");
+
+        if (TextUtils.isEmpty(networkOperatorName)) {
+            return "";
+        }
+
+        return networkOperatorName;
+    }
+
+    private String getLocationFromRequestUrl(String requestString) {
+        Uri requestUri = Uri.parse(requestString);
+        String location = requestUri.getQueryParameter("ll");
+
+        if (TextUtils.isEmpty(location)) {
+            return "";
+        }
+
+        return location;
+    }
+
     private String generateMinimumUrlString() {
         return subject.generateUrlString("ads.mopub.com");
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
index 8f3cc482..52e22017 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
@@ -16,7 +16,7 @@
 import com.mopub.common.util.Utils;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.nativeads.test.support.MoPubShadowBitmap;
-import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Test;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/PlacementDataTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/PlacementDataTest.java
index a735fe7d..75de2550 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/PlacementDataTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/PlacementDataTest.java
@@ -2,7 +2,7 @@
 
 package com.mopub.nativeads;
 
-import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -43,36 +43,28 @@
 
     @Before
     public void setup() {
-        noAds = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.newBuilder()
-                .build());
-        adAt0 = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.newBuilder()
+        noAds = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning());
+        adAt0 = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning()
+                .addFixedPosition(0));
+        adAt1 = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning()
+                .addFixedPosition(1));
+        adsAt01 = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning()
                 .addFixedPosition(0)
-                .build());
-        adAt1 = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.newBuilder()
+                .addFixedPosition(1));
+        adsAt14 = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning()
                 .addFixedPosition(1)
-                .build());
-        adsAt01 = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.newBuilder()
-                .addFixedPosition(0)
-                .addFixedPosition(1)
-                .build());
-        adsAt14 = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.newBuilder()
-                .addFixedPosition(1)
-                .addFixedPosition(4)
-                .build());
-        adsRepeating = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.newBuilder()
-                .enableRepeatingPositions(3)
-                .build());
-        adsAt15repeating = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.newBuilder()
+                .addFixedPosition(4));
+        adsRepeating = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning()
+                .enableRepeatingPositions(3));
+        adsAt15repeating = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning()
                 .addFixedPosition(1)
                 .addFixedPosition(5)
-                .enableRepeatingPositions(3)
-                .build());
-        adsAt1234 = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.newBuilder()
+                .enableRepeatingPositions(3));
+        adsAt1234 = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning()
                 .addFixedPosition(1)
                 .addFixedPosition(2)
                 .addFixedPosition(3)
-                .addFixedPosition(4)
-                .build());
+                .addFixedPosition(4));
 
         when(mockNativeAdData.getAd()).thenReturn(mockNativeResponse);
         when(mockNativeAdData2.getAd()).thenReturn(mockNativeResponse2);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
new file mode 100644
index 00000000..2930217b
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
@@ -0,0 +1,287 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+import android.os.Build.VERSION_CODES;
+
+import com.mopub.common.DownloadResponse;
+import com.mopub.common.DownloadTask;
+import com.mopub.common.DownloadTask.DownloadTaskListener;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
+import com.mopub.nativeads.PositioningSource.PositioningListener;
+import com.mopub.nativeads.ServerPositioningSource.DownloadTaskProvider;
+
+import org.apache.http.HttpStatus;
+import org.apache.http.client.methods.HttpGet;
+import org.json.JSONException;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Captor;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.util.concurrent.Executor;
+
+import static junit.framework.Assert.fail;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyBoolean;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+public class ServerPositioningSourceTest {
+    @Mock DownloadTaskProvider mockDownloadTaskProvider;
+    @Mock DownloadTaskListener mockDownloadTaskListener;
+    @Mock DownloadTask mockDownloadTask;
+    @Mock PositioningListener mockPositioningListener;
+    @Captor ArgumentCaptor<DownloadTaskListener> taskListenerCaptor;
+    @Mock DownloadResponse mockValidResponse;
+    @Mock DownloadResponse mockNotFoundResponse;
+    @Mock DownloadResponse mockInvalidJsonResponse;
+    @Mock DownloadResponse mockWarmingUpJsonResponse;
+    @Captor ArgumentCaptor<MoPubClientPositioning> positioningCaptor;
+
+    ServerPositioningSource subject;
+
+    @Before
+    public void setUp() {
+        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
+        subject = new ServerPositioningSource(activity, mockDownloadTaskProvider);
+
+        when(mockDownloadTaskProvider.get(any(DownloadTaskListener.class)))
+                .thenReturn(mockDownloadTask);
+
+        when(mockValidResponse.getStatusCode()).thenReturn(HttpStatus.SC_OK);
+        when(mockValidResponse.getByteArray()).thenReturn("{fixed: []}".getBytes());
+
+        when(mockInvalidJsonResponse.getStatusCode()).thenReturn(HttpStatus.SC_OK);
+        when(mockInvalidJsonResponse.getByteArray()).thenReturn("blah blah".getBytes());
+
+        when(mockWarmingUpJsonResponse.getStatusCode()).thenReturn(HttpStatus.SC_OK);
+        when(mockWarmingUpJsonResponse.getByteArray()).thenReturn(
+                "{\"error\":\"WARMING_UP\"}".getBytes());
+
+        when(mockNotFoundResponse.getStatusCode()).thenReturn(HttpStatus.SC_NOT_FOUND);
+    }
+
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Test
+    public void loadPositions_atLeastIcs_shouldExecuteDownloadTask() {
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+        verify(mockDownloadTask).executeOnExecutor(any(Executor.class), any(HttpGet.class));
+    }
+
+    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
+    @Test
+    public void loadPositions_beforeIcs_shouldExecuteDownloadTask() {
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+        verify(mockDownloadTask).execute(any(HttpGet.class));
+    }
+
+    @Test
+    public void loadPositionsTwice_shouldCancelPreviousDownloadTask_shouldNotCallListener() {
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+        verify(mockDownloadTaskProvider).get(taskListenerCaptor.capture());
+
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+        verify(mockDownloadTask).cancel(true);
+
+        // Cancelling completes the download tasks with a null response.
+        taskListenerCaptor.getValue().onComplete("some_url", null);
+        verify(mockPositioningListener, never()).onFailed();
+        verify(mockPositioningListener, never()).onLoad(any(MoPubClientPositioning.class));
+    }
+
+    @Test
+    public void loadPositionsTwice_withPendingRetry_shouldNotCancelPreviousDownloadTask() {
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+
+        verify(mockDownloadTaskProvider).get(taskListenerCaptor.capture());
+        taskListenerCaptor.getValue().onComplete("some_url", mockValidResponse);
+
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+        verify(mockDownloadTask, never()).cancel(anyBoolean());
+    }
+
+    @Test
+    public void loadPositions_thenComplete_withValidResponse_shouldCallOnLoadListener() {
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+
+        verify(mockDownloadTaskProvider).get(taskListenerCaptor.capture());
+        taskListenerCaptor.getValue().onComplete("some_url", mockValidResponse);
+
+        verify(mockPositioningListener).onLoad(positioningCaptor.capture());
+        MoPubClientPositioning positioning = positioningCaptor.getValue();
+        assertThat(positioning.getFixedPositions()).isEmpty();
+        assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubClientPositioning.NO_REPEAT);
+    }
+
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Test
+    public void loadPositions_thenComplete_withNotFoundResponse_shouldRetry() {
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+        
+        verify(mockDownloadTaskProvider).get(taskListenerCaptor.capture());
+        taskListenerCaptor.getValue().onComplete("some_url", mockNotFoundResponse);
+
+        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
+        verify(mockDownloadTask, times(2))
+                .executeOnExecutor(any(Executor.class), any(HttpGet.class));
+    }
+
+    @Test
+    public void loadPositions_thenComplete_withWarmingUpResponse_shouldRetry() {
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+
+        verify(mockDownloadTaskProvider).get(taskListenerCaptor.capture());
+        taskListenerCaptor.getValue().onComplete("some_url", mockWarmingUpJsonResponse);
+
+        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
+        verify(mockDownloadTask, times(2))
+                .executeOnExecutor(any(Executor.class), any(HttpGet.class));
+    }
+
+    @Test
+    public void loadPositions_thenComplete_withInvalidJsonResponse_shouldRetry() {
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+
+        verify(mockDownloadTaskProvider).get(taskListenerCaptor.capture());
+        taskListenerCaptor.getValue().onComplete("some_url", mockInvalidJsonResponse);
+
+        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
+        verify(mockDownloadTask, times(2))
+                .executeOnExecutor(any(Executor.class), any(HttpGet.class));
+    }
+
+    @Test
+    public void loadPositions_withPendingRetry_shouldNotRetry() {
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+
+        verify(mockDownloadTaskProvider).get(taskListenerCaptor.capture());
+        taskListenerCaptor.getValue().onComplete("some_url", mockInvalidJsonResponse);
+
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
+        verify(mockDownloadTask, times(2))
+                .executeOnExecutor(any(Executor.class), any(HttpGet.class));
+    }
+
+    @Test
+    public void loadPositions_thenFailAfterMaxRetryTime_shouldCallFailureHandler() {
+        ServerPositioningSource.MAXIMUM_RETRY_TIME_MILLISECONDS = 999;
+
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+
+        verify(mockDownloadTaskProvider).get(taskListenerCaptor.capture());
+        taskListenerCaptor.getValue().onComplete("some_url", mockInvalidJsonResponse);
+
+        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
+        verify(mockPositioningListener).onFailed();
+    }
+
+    @Test
+    public void parseJsonResponse_noFixedPositions_shouldReturnEmptyPositioning()
+            throws JSONException {
+        MoPubClientPositioning positioning = subject.parseJsonResponse(
+                "{fixed: []}");
+        assertThat(positioning.getFixedPositions()).isEmpty();
+        assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubClientPositioning.NO_REPEAT);
+    }
+
+    @Test
+    public void parseJsonResponse_oneFixedPosition_shouldReturnValidPositioning()
+            throws JSONException {
+        MoPubClientPositioning positioning = subject.parseJsonResponse(
+                "{fixed: [{position: 2}]}");
+        assertThat(positioning.getFixedPositions()).containsOnly(2);
+        assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubClientPositioning.NO_REPEAT);
+    }
+
+    @Test
+    public void parseJsonResponse_twoFixedPositions_shouldReturnValidPositioning()
+            throws JSONException {
+        MoPubClientPositioning positioning = subject.parseJsonResponse(
+                "{fixed: [{position: 1}, {position: 8}]}");
+        assertThat(positioning.getFixedPositions()).containsExactly(1, 8);
+        assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubClientPositioning.NO_REPEAT);
+    }
+
+    @Test
+    public void parseJsonResponse_twoFixedPositions_shouldIgnoreNonZeroSection()
+            throws JSONException {
+        MoPubClientPositioning positioning = subject.parseJsonResponse(
+                "{fixed: [{section: 0, position: 5}, {section: 1, position: 8}]}");
+        assertThat(positioning.getFixedPositions()).containsOnly(5);
+        assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubClientPositioning.NO_REPEAT);
+    }
+
+    @Test
+    public void parseJsonResponse_invalidFixedPosition_shouldThrowException() {
+        // Must have either fixed or repeating positions.
+        checkException(null, "Empty response");
+        checkException("", "Empty response");
+        checkException("{}", "Must contain fixed or repeating positions");
+        checkException("{\"error\":\"WARMING_UP\"}", "WARMING_UP");
+
+        // Position is required.
+        checkException("{fixed: [{}]}", "JSONObject[\"position\"] not found.");
+        checkException("{fixed: [{section: 0}]}", "JSONObject[\"position\"] not found.");
+
+        // Section is optional, but if it exists must be > 0
+        checkException("{fixed: [{section: -1, position: 8}]}", "Invalid section -1 in JSON response");
+
+        // Positions must be between [0 and 2 ^ 16).
+        checkException("{fixed: [{position: -1}]}", "Invalid position -1 in JSON response");
+        checkException("{fixed: [{position: 1}, {position: -8}]}",
+                "Invalid position -8 in JSON response");
+        checkException("{fixed: [{position: 1}, {position: 66000}]}",
+                "Invalid position 66000 in JSON response");
+    }
+
+    @Test
+    public void parseJsonResponse_repeatingInterval_shouldReturnValidPositioning()
+            throws JSONException {
+        MoPubClientPositioning positioning = subject.parseJsonResponse(
+                "{repeating: {interval: 2}}");
+        assertThat(positioning.getFixedPositions()).isEmpty();
+        assertThat(positioning.getRepeatingInterval()).isEqualTo(2);
+    }
+
+    @Test
+    public void parseJsonResponse_invalidRepeating_shouldThrowException() {
+        checkException("{repeating: }", "Missing value at character 12");
+        checkException("{repeating: {}}", "JSONObject[\"interval\"] not found.");
+
+        // Intervals must be between [2 and 2 ^ 16).
+        checkException("{repeating: {interval: -1}}", "Invalid interval -1 in JSON response");
+        checkException("{repeating: {interval: 0}}", "Invalid interval 0 in JSON response");
+        checkException("{repeating: {interval: 1}}", "Invalid interval 1 in JSON response");
+        checkException("{repeating: {interval: 66000}}",
+                "Invalid interval 66000 in JSON response");
+    }
+
+    @Test
+    public void parseJsonResponse_fixedAndRepeating_shouldReturnValidPositioning()
+            throws JSONException {
+        MoPubClientPositioning positioning = subject.parseJsonResponse(
+                "{fixed: [{position: 0}, {position: 1}], repeating: {interval: 2}}");
+        assertThat(positioning.getFixedPositions()).containsExactly(0, 1);
+        assertThat(positioning.getRepeatingInterval()).isEqualTo(2);
+    }
+
+    private void checkException(String json, String expectedMessage) {
+        try {
+            subject.parseJsonResponse(json);
+        } catch (JSONException e) {
+            assertThat(e.getMessage()).isEqualTo(expectedMessage);
+            return;
+        }
+        fail("Should have received an exception");
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
index d0f1f88a..488c1ae7 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
@@ -10,7 +10,7 @@
 import android.view.Window;
 
 import com.mopub.nativeads.VisibilityTracker.TrackingInfo;
-import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.common.test.support.SdkTestRunner;
 
 import org.fest.util.Lists;
 import org.junit.Before;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/SdkTestRunner.java b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/SdkTestRunner.java
deleted file mode 100644
index cf51086a..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/SdkTestRunner.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package com.mopub.nativeads.test.support;
-
-import com.mopub.common.factories.MethodBuilderFactory;
-import com.mopub.common.util.AsyncTasks;
-import com.mopub.common.util.test.support.ShadowAsyncTasks;
-import com.mopub.common.util.test.support.TestMethodBuilderFactory;
-import com.mopub.nativeads.factories.CustomEventNativeFactory;
-
-import org.junit.runners.model.InitializationError;
-import org.mockito.MockitoAnnotations;
-import org.robolectric.DefaultTestLifecycle;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.TestLifecycle;
-import org.robolectric.bytecode.ClassInfo;
-import org.robolectric.bytecode.Setup;
-
-public class SdkTestRunner extends RobolectricTestRunner {
-    public SdkTestRunner(Class<?> testClass) throws InitializationError {
-        super(testClass);
-    }
-
-    @Override
-    public Setup createSetup() {
-        return new Setup() {
-            @Override
-            public boolean shouldInstrument(ClassInfo classInfo) {
-                return classInfo.getName().equals(AsyncTasks.class.getName())
-                        || super.shouldInstrument(classInfo);
-            }
-        };
-    }
-
-    @Override
-    protected Class<? extends TestLifecycle> getTestLifecycleClass() {
-        return TestLifeCycleWithInjection.class;
-    }
-
-    public static class TestLifeCycleWithInjection extends DefaultTestLifecycle {
-        @Override
-        public void prepareTest(Object test) {
-            MethodBuilderFactory.setInstance(new TestMethodBuilderFactory());
-            CustomEventNativeFactory.setInstance(new TestCustomEventNativeFactory());
-
-            ShadowAsyncTasks.reset();
-
-            MockitoAnnotations.initMocks(test);
-        }
-    }
-}
diff --git a/robotium-sample/AndroidManifest.xml b/robotium-sample/AndroidManifest.xml
index e42dca4f..c4277cd0 100644
--- a/robotium-sample/AndroidManifest.xml
+++ b/robotium-sample/AndroidManifest.xml
@@ -3,7 +3,9 @@
       package="com.mopub.mobileads.robotium"
       android:versionCode="1"
       android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="9" />
+    <uses-sdk
+        android:minSdkVersion="9"
+        android:targetSdkVersion="19"/>
 
     <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
diff --git a/robotium-sample/pom.xml b/robotium-sample/pom.xml
index eed43b07..3481483f 100644
--- a/robotium-sample/pom.xml
+++ b/robotium-sample/pom.xml
@@ -68,7 +68,7 @@
         <dependency>
             <groupId>com.google.android</groupId>
             <artifactId>android</artifactId>
-            <version>4.1.2</version>
+            <version>4.4.2</version>
             <scope>provided</scope>
         </dependency>
     </dependencies>
@@ -92,7 +92,7 @@
                 <configuration>
                     <sdk>
                         <!-- platform or api level (api level 4 = platform 1.6)-->
-                        <platform>16</platform>
+                        <platform>19</platform>
                     </sdk>
                     <undeployBeforeDeploy>true</undeployBeforeDeploy>
                 </configuration>
diff --git a/robotium-tests/AndroidManifest.xml b/robotium-tests/AndroidManifest.xml
index 8de11840..43a6b6d4 100644
--- a/robotium-tests/AndroidManifest.xml
+++ b/robotium-tests/AndroidManifest.xml
@@ -3,7 +3,9 @@
 		package="com.mopub.mobileads.test"
 		android:versionCode="1"
 		android:versionName="1.0">
-	<uses-sdk android:minSdkVersion="9"/>
+    <uses-sdk
+        android:minSdkVersion="9"
+        android:targetSdkVersion="19"/>
 
     <instrumentation android:targetPackage="com.mopub.mobileads.robotium" android:name="android.test.InstrumentationTestRunner" />
 
diff --git a/robotium-tests/pom.xml b/robotium-tests/pom.xml
index 68eddd9c..e15157b9 100644
--- a/robotium-tests/pom.xml
+++ b/robotium-tests/pom.xml
@@ -44,7 +44,7 @@
         <dependency>
             <groupId>com.google.android</groupId>
             <artifactId>android</artifactId>
-            <version>4.1.2</version>
+            <version>4.4.2</version>
             <scope>provided</scope>
         </dependency>
     </dependencies>
@@ -68,7 +68,7 @@
                 <configuration>
                     <sdk>
                         <!-- platform or api level (api level 4 = platform 1.6)-->
-                        <platform>16</platform>
+                        <platform>19</platform>
                     </sdk>
                     <test>
                         <skip>true</skip>
diff --git a/settings.gradle b/settings.gradle
index cd34f48c..22e85863 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1 +1,7 @@
+<<<<<<< HEAD
 include ':mopub-sdk'
+=======
+rootProject.name = 'mopub-android'
+include ':mopub-sdk', ':mopub-sample'
+
+>>>>>>> upstream/master
