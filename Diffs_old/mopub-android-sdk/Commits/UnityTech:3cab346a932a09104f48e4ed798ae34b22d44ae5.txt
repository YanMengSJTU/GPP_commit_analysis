diff --git a/extras/src/com/mopub/mobileads/UnityInterstitial.java b/extras/src/com/mopub/mobileads/UnityInterstitial.java
index 4e2c9ece..2345a381 100644
--- a/extras/src/com/mopub/mobileads/UnityInterstitial.java
+++ b/extras/src/com/mopub/mobileads/UnityInterstitial.java
@@ -3,6 +3,7 @@
 import android.app.Activity;
 import android.content.Context;
 
+import com.mopub.common.logging.MoPubLog;
 import com.unity3d.ads.mediation.IUnityAdsExtendedListener;
 import com.unity3d.ads.UnityAds;
 
@@ -10,11 +11,10 @@
 
 public class UnityInterstitial extends CustomEventInterstitial implements IUnityAdsExtendedListener {
 
-    private static boolean sInitialized = false;
-    private static boolean sAdCached = false;
     private CustomEventInterstitialListener mCustomEventInterstitialListener;
-    private Activity mLauncherActivity;
+    private Context mContext;
     private String mPlacementId = "video";
+    private boolean loadRequested = false;
 
     @Override
     protected void loadInterstitial(Context context,
@@ -24,74 +24,69 @@ protected void loadInterstitial(Context context,
 
         mPlacementId = UnityRouter.placementIdForServerExtras(serverExtras, mPlacementId);
         mCustomEventInterstitialListener = customEventInterstitialListener;
+        mContext = context;
+        loadRequested = true;
 
-        if (!sInitialized) {
-            if (context == null || !(context instanceof Activity)) {
-                mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-                return;
-            }
-
-            mLauncherActivity = (Activity) context;
-
-            if (!UnityRouter.initUnityAds(serverExtras, mLauncherActivity, this, new Runnable() {
-                public void run() {
-                    mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-                }
-            })) {
-                return;
+        try {
+            UnityRouter.addListener(mPlacementId, this);
+            initializeUnityAdsSdk(serverExtras);
+            if (UnityAds.isReady()) {
+                mCustomEventInterstitialListener.onInterstitialLoaded();
+                loadRequested = false;
             }
+        } catch (UnityRouter.UnityAdsException e) {
+            mCustomEventInterstitialListener.onInterstitialFailed(UnityRouter.UnityAdsUtils.getMoPubErrorCode(e.getErrorCode()));
+        }
+    }
 
-            UnityAds.setListener(this);
-
-            UnityRouter.initPlacement(mPlacementId, new Runnable() {
-                public void run() {
-                    mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-                }
-            }, new Runnable() {
-                public void run() {
-                    mCustomEventInterstitialListener.onInterstitialLoaded();
-                }
-            });
-
-            sInitialized = true;
-        } else {
-            UnityAds.setListener(this);
-            if (UnityAds.isReady(mPlacementId)) {
-                mCustomEventInterstitialListener.onInterstitialLoaded();
-            } else {
-                sAdCached = false;
+    private void initializeUnityAdsSdk(Map<String, String> serverExtras) {
+        if (!UnityAds.isInitialized()) {
+            if (mContext == null || !(mContext instanceof Activity)) {
+                throw new UnityRouter.UnityAdsException(UnityAds.UnityAdsError.INVALID_ARGUMENT, "Context is null or is not an instanceof Activity.");
             }
+            UnityRouter.initUnityAds(serverExtras, (Activity) mContext);
         }
     }
 
+
     @Override
     protected void showInterstitial() {
-        if (UnityAds.isReady(mPlacementId) && mLauncherActivity != null) {
-            UnityAds.show(mLauncherActivity, mPlacementId);
+        if (UnityAds.isReady(mPlacementId) && mContext != null) {
+            UnityAds.show((Activity) mContext, mPlacementId);
+        } else {
+            MoPubLog.d("Attempted to show Unity interstitial video before it was available.");
         }
     }
 
     @Override
     protected void onInvalidate() {
-        UnityAds.setListener(null);
+        UnityRouter.removeListener(mPlacementId);
     }
 
     @Override
     public void onUnityAdsReady(String placementId) {
-        if (!sAdCached && placementId.equals(mPlacementId)) {
-            sAdCached = true;
+        if (loadRequested) {
             mCustomEventInterstitialListener.onInterstitialLoaded();
+            loadRequested = false;
         }
     }
 
     @Override
-    public void onUnityAdsStart(String s) {
+    public void onUnityAdsStart(String placementId) {
         mCustomEventInterstitialListener.onInterstitialShown();
     }
 
     @Override
-    public void onUnityAdsFinish(String s, UnityAds.FinishState finishState) {
-        mCustomEventInterstitialListener.onInterstitialDismissed();
+    public void onUnityAdsFinish(String placementId, UnityAds.FinishState finishState) {
+        if (finishState == UnityAds.FinishState.ERROR) {
+            MoPubLog.d("Unity interstitial video encountered a playback error for placement " + placementId);
+            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.VIDEO_PLAYBACK_ERROR);
+        } else {
+            MoPubLog.d("Unity interstitial video completed for placement " + placementId);
+            mCustomEventInterstitialListener.onInterstitialDismissed();
+        }
+
+        UnityRouter.removeListener(placementId);
     }
 
     @Override
@@ -99,20 +94,16 @@ public void onUnityAdsClick(String placementId) {
         mCustomEventInterstitialListener.onInterstitialClicked();
     }
 
+
+    // @Override
+    public void onUnityAdsPlacementStateChanged(String placementId, UnityAds.PlacementState oldState, UnityAds.PlacementState newState) {
+
+    }
+
     @Override
-    public void onUnityAdsError(UnityAds.UnityAdsError unityAdsError, String s) {
-        MoPubErrorCode errorCode;
-        switch (unityAdsError) {
-            case VIDEO_PLAYER_ERROR:
-                errorCode = MoPubErrorCode.VIDEO_PLAYBACK_ERROR;
-                break;
-            case INTERNAL_ERROR:
-                errorCode = MoPubErrorCode.INTERNAL_ERROR;
-                break;
-            default:
-                errorCode = MoPubErrorCode.NETWORK_INVALID_STATE;
-                break;
-        }
+    public void onUnityAdsError(UnityAds.UnityAdsError unityAdsError, String message) {
+        MoPubLog.d("Unity interstitial video cache failed for placement " + mPlacementId + ".");
+        MoPubErrorCode errorCode = UnityRouter.UnityAdsUtils.getMoPubErrorCode(unityAdsError);
         mCustomEventInterstitialListener.onInterstitialFailed(errorCode);
     }
-}
\ No newline at end of file
+}
diff --git a/extras/src/com/mopub/mobileads/UnityRewardedVideo.java b/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
index feaea2cf..96cebb68 100644
--- a/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
@@ -21,9 +21,6 @@
     private static final String GAME_ID_KEY = "gameId";
     private static final LifecycleListener sLifecycleListener = new UnityLifecycleListener();
     private static final UnityAdsListener sUnityAdsListener = new UnityAdsListener();
-
-    private static boolean sInitialized = false;
-    private static boolean sAdCached = false;
     private static String sPlacementId = "rewardedVideo";
 
     @Nullable
@@ -51,18 +48,17 @@ public String getAdNetworkId() {
     public boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
                                          @NonNull final Map<String, Object> localExtras,
                                          @NonNull final Map<String, String> serverExtras) throws Exception {
-        if (sInitialized) {
+        if (UnityAds.isInitialized()) {
             return false;
         }
 
-        UnityRouter.initUnityAds(serverExtras, launcherActivity, sUnityAdsListener, new Runnable() {
-            @Override
-            public void run() {
-                throw new IllegalStateException("Unity rewarded video initialization failed due " +
-                        "to empty or missing " + GAME_ID_KEY);
-            }
-        });
-        sInitialized = true;
+        try {
+            UnityRouter.initUnityAds(serverExtras, launcherActivity);
+            UnityRouter.addListener(sPlacementId, sUnityAdsListener);
+        } catch (UnityRouter.UnityAdsException e) {
+            MoPubLog.e("Failed to initialize Unity Ads.", e);
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(UnityRewardedVideo.class, sPlacementId, UnityRouter.UnityAdsUtils.getMoPubErrorCode(e.getErrorCode()));
+        }
 
         return true;
     }
@@ -70,33 +66,20 @@ public void run() {
     @Override
     protected void loadWithSdkInitialized(@NonNull Activity activity,
                                           @NonNull Map<String, Object> localExtras,
-                                          @NonNull Map<String, String> serverExtras)
-            throws Exception {
+                                          @NonNull Map<String, String> serverExtras) throws Exception {
 
         sPlacementId = UnityRouter.placementIdForServerExtras(serverExtras, sPlacementId);
         mLauncherActivity = activity;
-        UnityAds.setListener(sUnityAdsListener);
 
-        UnityRouter.initPlacement(sPlacementId, new Runnable() {
-            @Override
-            public void run() {
-                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(UnityRewardedVideo.class, sPlacementId, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            }
-        }, new Runnable() {
-            @Override
-            public void run() {
-                if (UnityAds.isReady(sPlacementId)) {
-                    MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(UnityRewardedVideo.class, sPlacementId);
-                } else {
-                    sAdCached = false;
-                }
-            }
-        });
+        UnityRouter.addListener(sPlacementId, sUnityAdsListener);
+        if (UnityAds.isReady()) {
+            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(UnityRewardedVideo.class, sPlacementId);
+        }
     }
 
     @Override
     public boolean hasVideoAvailable() {
-        return UnityRouter.hasVideoAvailable(sPlacementId);
+        return UnityAds.isReady(sPlacementId);
     }
 
     @Override
@@ -110,7 +93,7 @@ public void showVideo() {
 
     @Override
     protected void onInvalidate() {
-        UnityAds.setListener(null);
+        UnityRouter.removeListener(sPlacementId);
     }
 
     private static final class UnityLifecycleListener extends BaseLifecycleListener {
@@ -130,8 +113,7 @@ public void onResume(@NonNull final Activity activity) {
             CustomEventRewardedVideoListener {
         @Override
         public void onUnityAdsReady(String placementId) {
-            if (!sAdCached && placementId.equals(sPlacementId)) {
-                sAdCached = true;
+            if (placementId.equals(sPlacementId)) {
                 MoPubLog.d("Unity rewarded video cached for placement " + placementId + ".");
                 MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(UnityRewardedVideo.class, placementId);
             }
@@ -145,6 +127,7 @@ public void onUnityAdsStart(String placementId) {
 
         @Override
         public void onUnityAdsFinish(String placementId, UnityAds.FinishState finishState) {
+            MoPubLog.d("Unity Ad finished with finish state = " + finishState);
             if (finishState == UnityAds.FinishState.ERROR) {
                 MoPubRewardedVideoManager.onRewardedVideoPlaybackError(
                         UnityRewardedVideo.class,
@@ -157,15 +140,11 @@ public void onUnityAdsFinish(String placementId, UnityAds.FinishState finishStat
                         sPlacementId,
                         MoPubReward.success(MoPubReward.NO_REWARD_LABEL, MoPubReward.NO_REWARD_AMOUNT));
                 MoPubLog.d("Unity rewarded video completed for placement " + placementId);
-            } else {
-                MoPubRewardedVideoManager.onRewardedVideoCompleted(
-                        UnityRewardedVideo.class,
-                        placementId,
-                        MoPubReward.failure());
-                MoPubLog.d("Unity rewarded video skipped for placement " + placementId);
+            } else if (finishState == UnityAds.FinishState.SKIPPED) {
+                MoPubLog.d("Unity ad was skipped, no reward will be given.");
             }
             MoPubRewardedVideoManager.onRewardedVideoClosed(UnityRewardedVideo.class, sPlacementId);
-            UnityAds.setListener(null);
+            UnityRouter.removeListener(placementId);
         }
 
         @Override
@@ -174,17 +153,21 @@ public void onUnityAdsClick(String placementId) {
             MoPubLog.d("Unity rewarded video clicked for placement " + placementId + ".");
         }
 
+        // @Override
+        public void onUnityAdsPlacementStateChanged(String placementId, UnityAds.PlacementState oldState, UnityAds.PlacementState newState) {
+
+        }
+
         @Override
         public void onUnityAdsError(UnityAds.UnityAdsError unityAdsError, String message) {
             MoPubLog.d("Unity rewarded video cache failed for placement " + sPlacementId + ".");
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(UnityRewardedVideo.class,
-                    sPlacementId, MoPubErrorCode.NETWORK_NO_FILL);
+            MoPubErrorCode errorCode = UnityRouter.UnityAdsUtils.getMoPubErrorCode(unityAdsError);
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(UnityRewardedVideo.class, sPlacementId, errorCode);
         }
     }
 
     @VisibleForTesting
     void reset() {
-        sInitialized = false;
         sPlacementId = "";
     }
 }
diff --git a/extras/src/com/mopub/mobileads/UnityRouter.java b/extras/src/com/mopub/mobileads/UnityRouter.java
index a86ed26b..3c2bdd3d 100644
--- a/extras/src/com/mopub/mobileads/UnityRouter.java
+++ b/extras/src/com/mopub/mobileads/UnityRouter.java
@@ -8,24 +8,21 @@
 import com.unity3d.ads.UnityAds;
 import com.unity3d.ads.metadata.MediationMetaData;
 
+import java.util.HashMap;
 import java.util.Map;
 
 public class UnityRouter {
+    private static String sCurrentPlacementId;
     private static final String GAME_ID_KEY = "gameId";
     private static final String ZONE_ID_KEY = "zoneId";
     private static final String PLACEMENT_ID_KEY = "placementId";
+    private static final UnityAdsListener sUnityAdsListener = new UnityAdsListener();
+    private static Map<String, IUnityAdsExtendedListener> mUnityAdsListeners = new HashMap<>();
 
-    static boolean initUnityAds(Map<String, String> serverExtras, Activity launcherActivity, IUnityAdsExtendedListener unityAdsListener, Runnable onInitFailed) {
-        String gameId;
-        if (serverExtras.containsKey(GAME_ID_KEY)) {
-            gameId = serverExtras.get(GAME_ID_KEY);
-            if (TextUtils.isEmpty(gameId)) {
-                onInitFailed.run();
-                return false;
-            }
-        } else {
-            onInitFailed.run();
-            return false;
+    static boolean initUnityAds(Map<String, String> serverExtras, Activity launcherActivity) {
+        String gameId = serverExtras.get(GAME_ID_KEY);
+        if (gameId == null || gameId.isEmpty()) {
+            throw new UnityAdsException(UnityAds.UnityAdsError.INVALID_ARGUMENT, "Sever extras is missing \"%s\" or is empty.", GAME_ID_KEY);
         }
 
         MediationMetaData mediationMetaData = new MediationMetaData(launcherActivity);
@@ -33,7 +30,7 @@ static boolean initUnityAds(Map<String, String> serverExtras, Activity launcherA
         mediationMetaData.setVersion(MoPub.SDK_VERSION);
         mediationMetaData.commit();
 
-        UnityAds.initialize(launcherActivity, gameId, unityAdsListener);
+        UnityAds.initialize(launcherActivity, gameId, sUnityAdsListener);
         return true;
     }
 
@@ -47,16 +44,101 @@ static String placementIdForServerExtras(Map<String, String> serverExtras, Strin
         return TextUtils.isEmpty(placementId) ? defaultPlacementId : placementId;
     }
 
-    static void initPlacement(String placementId, Runnable onInitFailure, Runnable onInitSuccess) {
-        if (TextUtils.isEmpty(placementId)) {
-            onInitFailure.run();
-        } else if (hasVideoAvailable(placementId)) {
-            onInitSuccess.run();
+    static void showAd(Activity activity, String placementId) {
+        sCurrentPlacementId = placementId;
+        UnityAds.show(activity, placementId);
+    }
+
+    static void addListener(String placementId, IUnityAdsExtendedListener unityListener) {
+        mUnityAdsListeners.put(placementId, unityListener);
+    }
+
+    static void removeListener(String placementId) {
+        mUnityAdsListeners.remove(placementId);
+    }
+
+    private static class UnityAdsListener implements IUnityAdsExtendedListener {
+        @Override
+        public void onUnityAdsReady(String placementId) {
+            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(placementId);
+            if (listener != null) {
+                listener.onUnityAdsReady(placementId);
+            }
+        }
+
+        @Override
+        public void onUnityAdsStart(String placementId) {
+            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(placementId);
+            if (listener != null) {
+                listener.onUnityAdsStart(placementId);
+            }
+        }
+
+        @Override
+        public void onUnityAdsFinish(String placementId, UnityAds.FinishState finishState) {
+            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(placementId);
+            if (listener != null) {
+                listener.onUnityAdsFinish(placementId, finishState);
+            }
+        }
+
+        @Override
+        public void onUnityAdsClick(String placementId) {
+            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(placementId);
+            if (listener != null) {
+                listener.onUnityAdsClick(placementId);
+            }
+        }
+
+        // @Override
+        public void onUnityAdsPlacementStateChanged(String placementId, UnityAds.PlacementState oldState, UnityAds.PlacementState newState) {
+
+        }
+
+        @Override
+        public void onUnityAdsError(UnityAds.UnityAdsError unityAdsError, String message) {
+            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(sCurrentPlacementId);
+            if (listener != null) {
+                listener.onUnityAdsError(unityAdsError, message);
+            }
         }
     }
 
-    static boolean hasVideoAvailable(String placementId) {
-        return UnityAds.isReady(placementId);
+    static final class UnityAdsUtils {
+        static MoPubErrorCode getMoPubErrorCode(UnityAds.UnityAdsError unityAdsError) {
+            MoPubErrorCode errorCode;
+            switch (unityAdsError) {
+                case VIDEO_PLAYER_ERROR:
+                    errorCode = MoPubErrorCode.VIDEO_PLAYBACK_ERROR;
+                    break;
+                case INVALID_ARGUMENT:
+                    errorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+                    break;
+                case INTERNAL_ERROR:
+                    errorCode = MoPubErrorCode.NETWORK_INVALID_STATE;
+                    break;
+                default:
+                    errorCode = MoPubErrorCode.UNSPECIFIED;
+                    break;
+            }
+            return errorCode;
+        }
     }
 
-}
\ No newline at end of file
+    static class UnityAdsException extends RuntimeException {
+        private final UnityAds.UnityAdsError errorCode;
+
+        public UnityAdsException(UnityAds.UnityAdsError errorCode, String detailFormat, Object... args) {
+            this(errorCode, String.format(detailFormat, args));
+        }
+
+        public UnityAdsException(UnityAds.UnityAdsError errorCode, String detailMessage) {
+            super(detailMessage);
+            this.errorCode = errorCode;
+        }
+
+        public UnityAds.UnityAdsError getErrorCode() {
+            return errorCode;
+        }
+    }
+}
