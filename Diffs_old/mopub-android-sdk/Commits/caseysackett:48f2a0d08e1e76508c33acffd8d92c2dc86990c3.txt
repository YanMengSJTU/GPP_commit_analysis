diff --git a/CHANGELOG.md b/CHANGELOG.md
index a2bf5392..27dce7c0 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,21 @@
+## Version 2.2 (Jun 19, 2014)
+
+  - **Native ads mediation** release; integration instructions and documentation are available on the [GitHub wiki](https://github.com/mopub/mopub-android-sdk/wiki/Integrating-Native-Third-Party-Ad-Networks). Added custom event native implementations to the native extras directory of the SDK (`/extras/src/com/mopub/nativeads`), with initial support for the following networks:
+  	- Facebook Audience Network (`FacebookNative.java`)
+  	- InMobi Native Ads (`InMobiNative.java`)
+  - **Native ads content filtering**: Added the ability to specify which native ad elements you want to receive from the MoPub Marketplace to optimize bandwidth use and download only required assets, via `RequestParameters.Builder#desiredAssets(…)`. This feature only works for the six standard Marketplace assets, found in `RequestParameters.NativeAdAsset`. Any additional elements added in direct sold ads will always be sent down in the extras.
+  - Added star rating information to the `NativeResponse` object, via `NativeResponse#getStarRating()`. This method returns a `Double` corresponding to an app's rating on a 5-star scale.
+  - VAST video quartile and completion trackers now always include the user-agent
+  - Ensured that banners never autorefresh until they have been loaded at least once
+
+## Version 2.1 (May 15, 2014)
+
+  - Added custom events for Facebook ads. `FacebookBanner` and `FacebookInterstitial` can be found in the extras directory of the SDK (`/extras/src/com/mopub/mobileads`). For more information, please see the [help page for Facebook custom events](http://help.mopub.com/customer/portal/articles/1552301-how-to-integrate-facebook-audience-network-using-custom-events).
+  - Significant improvements to video ads
+    - Added overlay including a "Learn More" button, video length, and time left until the video may be skipped
+    - Added support for companion banners (shown upon video completion)
+  - Added Logcat warnings (and Toasts for debug builds) in cases where all necessary Activity permissions haven't been added to the `AndroidManifest`
+
 ## Version 2.0 (Apr 22, 2014)
 
   - **Native Ads** public release; integration instructions and documentation available on the [GitHub wiki](https://github.com/mopub/mopub-android-sdk/wiki/Native-Ads-Integration)
@@ -8,7 +26,7 @@
       
       	```      	      	
     <activity android:name="com.mopub.common.MoPubBrowser"
-			android:configChanges="keyboardHidden|orientation"/>
+				android:configChanges="keyboardHidden|orientation"/>
     <activity android:name="com.mopub.mobileads.MoPubActivity"
                 android:configChanges="keyboardHidden|orientation"/>
     <activity android:name="com.mopub.mobileads.MraidActivity"
diff --git a/README.md b/README.md
index f12adfc4..d9e6028b 100644
--- a/README.md
+++ b/README.md
@@ -27,24 +27,12 @@ Integration instructions are available on the [wiki](https://github.com/mopub/mo
 
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for details.
 
-  - **Native Ads** public release; integration instructions and documentation available on the [GitHub wiki](https://github.com/mopub/mopub-android-sdk/wiki/Native-Ads-Integration)
-  - Changed minimum supported Android version to Froyo (Android 2.2, API level 8)
-  - Added support for Google Play Services advertising identifier
-  - Renamed the `com.mopub.mobileads.MraidBrowser` Activity to `com.mopub.common.MoPubBrowser`.
-       - **Important Note:** This change requires a modification to the `AndroidManifest`. The updated set of requisite activity permissions are as follows:
-      
-      	```      	      	
-    <activity android:name="com.mopub.common.MoPubBrowser"
-				android:configChanges="keyboardHidden|orientation"/>
-    <activity android:name="com.mopub.mobileads.MoPubActivity"
-            	android:configChanges="keyboardHidden|orientation"/>
-    <activity android:name="com.mopub.mobileads.MraidActivity"
-            	android:configChanges="keyboardHidden|orientation"/>
-	<activity android:name="com.mopub.mobileads.MraidVideoPlayerActivity"
-            	android:configChanges="keyboardHidden|orientation"/>
-		```  
-  - Upgraded the bundled `android-support-v4` library to r19.1.
-      - **Note for Maven users:** Newer versions of the `android-support-v4` artifact are unavailable on Maven central, so we have included a small script to update the version in your local artifact repository. Please navigate to the `mopub-sdk` directory, and run `scripts/mavenize_support_library`.
+  - **Native ads mediation** release; integration instructions and documentation are available on the [GitHub wiki](https://github.com/mopub/mopub-android-sdk/wiki/Integrating-Native-Third-Party-Ad-Networks). Added custom event native implementations to the native extras directory of the SDK (`/extras/src/com/mopub/nativeads`), with initial support for the following networks:
+  	- Facebook Audience Network (`FacebookNative.java`)
+  	- InMobi Native Ads (`InMobiNative.java`)
+  - **Native ads content filtering**: Added the ability to specify which native ad elements you want to receive from the MoPub Marketplace to optimize bandwidth use and download only required assets, via `RequestParameters.Builder#desiredAssets(…)`. This feature only works for the six standard Marketplace assets, found in `RequestParameters.NativeAdAsset`. Any additional elements added in direct sold ads will always be sent down in the extras.
+  - Added star rating information to the `NativeResponse` object, via `NativeResponse#getStarRating()`. This method returns a `Double` corresponding to an app's rating on a 5-star scale.
+  - Bug fixes
 
 ## Requirements
 
diff --git a/extras/src/com/mopub/mobileads/AdColonyInterstitial.java b/extras/src/com/mopub/mobileads/AdColonyInterstitial.java
index dd58b6c6..3ed00d2a 100644
--- a/extras/src/com/mopub/mobileads/AdColonyInterstitial.java
+++ b/extras/src/com/mopub/mobileads/AdColonyInterstitial.java
@@ -40,7 +40,7 @@
 import com.jirbo.adcolony.AdColonyAd;
 import com.jirbo.adcolony.AdColonyAdListener;
 import com.jirbo.adcolony.AdColonyVideoAd;
-import com.mopub.mobileads.util.Json;
+import com.mopub.common.util.Json;
 
 import java.util.*;
 import java.util.concurrent.*;
diff --git a/extras/src/com/mopub/mobileads/FacebookBanner.java b/extras/src/com/mopub/mobileads/FacebookBanner.java
new file mode 100644
index 00000000..2a44a811
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/FacebookBanner.java
@@ -0,0 +1,94 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.util.Log;
+
+import com.facebook.ads.Ad;
+import com.facebook.ads.AdError;
+import com.facebook.ads.AdListener;
+import com.facebook.ads.AdSize;
+import com.facebook.ads.AdView;
+import com.mopub.common.util.Views;
+
+import java.util.Map;
+
+/**
+ * Tested with Facebook SDK 3.14.1.
+ */
+public class FacebookBanner extends CustomEventBanner implements AdListener {
+    private static final String PLACEMENT_ID_KEY = "placement_id";
+
+    private AdView mFacebookBanner;
+    private CustomEventBannerListener mBannerListener;
+
+    /**
+     * CustomEventBanner implementation
+     */
+
+    @Override
+    protected void loadBanner(final Context context,
+            final CustomEventBannerListener customEventBannerListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
+        mBannerListener = customEventBannerListener;
+
+        final String placementId;
+        if (extrasAreValid(serverExtras)) {
+            placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        } else {
+            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mFacebookBanner = new AdView(context, placementId, AdSize.BANNER_320_50);
+        mFacebookBanner.setAdListener(this);
+        mFacebookBanner.loadAd();
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mFacebookBanner != null) {
+            Views.removeFromParent(mFacebookBanner);
+            mFacebookBanner.destroy();
+            mFacebookBanner = null;
+        }
+    }
+
+    /**
+     * AdListener implementation
+     */
+
+    @Override
+    public void onAdLoaded(Ad ad) {
+        Log.d("MoPub", "Facebook banner ad loaded successfully. Showing ad...");
+        mBannerListener.onBannerLoaded(mFacebookBanner);
+    }
+
+    @Override
+    public void onError(final Ad ad, final AdError error) {
+        Log.d("MoPub", "Facebook banner ad failed to load.");
+        if (error == AdError.NO_FILL) {
+            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        } else if (error == AdError.INTERNAL_ERROR) {
+            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+        } else {
+            mBannerListener.onBannerFailed(MoPubErrorCode.UNSPECIFIED);
+        }
+    }
+
+    @Override
+    public void onAdClicked(Ad ad) {
+        Log.d("MoPub", "Facebook banner ad clicked.");
+        mBannerListener.onBannerClicked();
+    }
+
+    private boolean extrasAreValid(final Map<String, String> serverExtras) {
+        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        return (placementId != null && placementId.length() > 0);
+    }
+
+    @Deprecated // for testing
+    AdView getAdView() {
+        return mFacebookBanner;
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/FacebookInterstitial.java b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
new file mode 100644
index 00000000..2f7593dc
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
@@ -0,0 +1,117 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.util.Log;
+
+import com.facebook.ads.Ad;
+import com.facebook.ads.AdError;
+import com.facebook.ads.InterstitialAd;
+import com.facebook.ads.InterstitialAdListener;
+
+import java.util.Map;
+
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
+
+/**
+ * Tested with Facebook SDK 3.14.1.
+ */
+public class FacebookInterstitial extends CustomEventInterstitial implements InterstitialAdListener {
+    private static final String PLACEMENT_ID_KEY = "placement_id";
+
+    private InterstitialAd mFacebookInterstitial;
+    private CustomEventInterstitialListener mInterstitialListener;
+
+    /**
+     * CustomEventInterstitial implementation
+     */
+
+    @Override
+    protected void loadInterstitial(final Context context,
+            final CustomEventInterstitialListener customEventInterstitialListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
+        mInterstitialListener = customEventInterstitialListener;
+
+        final String placementId;
+        if (extrasAreValid(serverExtras)) {
+            placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        } else {
+            mInterstitialListener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mFacebookInterstitial = new InterstitialAd(context, placementId);
+        mFacebookInterstitial.setAdListener(this);
+        mFacebookInterstitial.loadAd();
+    }
+
+    @Override
+    protected void showInterstitial() {
+        if (mFacebookInterstitial != null && mFacebookInterstitial.isAdLoaded()) {
+            mFacebookInterstitial.show();
+        } else {
+            Log.d("MoPub", "Tried to show a Facebook interstitial ad before it finished loading. Please try again.");
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mFacebookInterstitial != null) {
+            mFacebookInterstitial.destroy();
+            mFacebookInterstitial = null;
+        }
+    }
+
+    /**
+     * InterstitialAdListener implementation
+     */
+
+    @Override
+    public void onAdLoaded(final Ad ad) {
+        Log.d("MoPub", "Facebook interstitial ad loaded successfully.");
+        mInterstitialListener.onInterstitialLoaded();
+    }
+
+    @Override
+    public void onError(final Ad ad, final AdError error) {
+        Log.d("MoPub", "Facebook interstitial ad failed to load.");
+        if (error == AdError.NO_FILL) {
+            mInterstitialListener.onInterstitialFailed(NETWORK_NO_FILL);
+        } else if (error == AdError.INTERNAL_ERROR) {
+            mInterstitialListener.onInterstitialFailed(NETWORK_INVALID_STATE);
+        } else {
+            mInterstitialListener.onInterstitialFailed(UNSPECIFIED);
+        }
+    }
+
+    @Override
+    public void onInterstitialDisplayed(final Ad ad) {
+        Log.d("MoPub", "Showing Facebook interstitial ad.");
+        mInterstitialListener.onInterstitialShown();
+    }
+
+    @Override
+    public void onAdClicked(final Ad ad) {
+        Log.d("MoPub", "Facebook interstitial ad clicked.");
+        mInterstitialListener.onInterstitialClicked();
+    }
+
+    @Override
+    public void onInterstitialDismissed(final Ad ad) {
+        Log.d("MoPub", "Facebook interstitial ad dismissed.");
+        mInterstitialListener.onInterstitialDismissed();
+    }
+
+    private boolean extrasAreValid(final Map<String, String> serverExtras) {
+        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        return (placementId != null && placementId.length() > 0);
+    }
+
+    @Deprecated // for testing
+    InterstitialAd getInterstitialAd() {
+        return mFacebookInterstitial;
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/InMobiBanner.java b/extras/src/com/mopub/mobileads/InMobiBanner.java
index 0cfaaad0..e73d1afa 100644
--- a/extras/src/com/mopub/mobileads/InMobiBanner.java
+++ b/extras/src/com/mopub/mobileads/InMobiBanner.java
@@ -7,10 +7,10 @@
 import com.inmobi.monetization.IMBanner;
 import com.inmobi.monetization.IMBannerListener;
 import com.inmobi.monetization.IMErrorCode;
+import com.mopub.common.MoPub;
+import com.mopub.common.util.Views;
 import com.mopub.mobileads.CustomEventBanner;
-import com.mopub.mobileads.MoPub;
 import com.mopub.mobileads.MoPubErrorCode;
-import com.mopub.common.util.Views;
 
 import java.util.*;
 
diff --git a/extras/src/com/mopub/mobileads/InMobiInterstitial.java b/extras/src/com/mopub/mobileads/InMobiInterstitial.java
index 2de8eac2..d74209d5 100644
--- a/extras/src/com/mopub/mobileads/InMobiInterstitial.java
+++ b/extras/src/com/mopub/mobileads/InMobiInterstitial.java
@@ -6,8 +6,8 @@
 import com.inmobi.monetization.IMErrorCode;
 import com.inmobi.monetization.IMInterstitial;
 import com.inmobi.monetization.IMInterstitialListener;
+import com.mopub.common.MoPub;
 import com.mopub.mobileads.CustomEventInterstitial;
-import com.mopub.mobileads.MoPub;
 import com.mopub.mobileads.MoPubErrorCode;
 
 import java.util.*;
diff --git a/extras/src/com/mopub/nativeads/FacebookNative.java b/extras/src/com/mopub/nativeads/FacebookNative.java
new file mode 100644
index 00000000..952783cb
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/FacebookNative.java
@@ -0,0 +1,162 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.view.View;
+
+import com.facebook.ads.Ad;
+import com.facebook.ads.AdError;
+import com.facebook.ads.AdListener;
+import com.facebook.ads.NativeAd;
+import com.facebook.ads.NativeAd.Rating;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+/*
+ * Tested with Facebook SDK 3.14.1
+ */
+public class FacebookNative extends CustomEventNative implements AdListener {
+    private static final String PLACEMENT_ID_KEY = "placement_id";
+
+    private Context mContext;
+    private NativeAd mNativeAd;
+    private CustomEventNativeListener mCustomEventNativeListener;
+
+    // CustomEventNative implementation
+    @Override
+    protected void loadNativeAd(final Context context,
+            final CustomEventNativeListener customEventNativeListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
+
+        mContext = context.getApplicationContext();
+
+        final String placementId;
+        if (extrasAreValid(serverExtras)) {
+            placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        } else {
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mCustomEventNativeListener = customEventNativeListener;
+
+        mNativeAd = new NativeAd(context, placementId);
+        mNativeAd.setAdListener(this);
+        mNativeAd.loadAd();
+    }
+
+    // AdListener implementation
+    @Override
+    public void onAdLoaded(final Ad ad) {
+        // This identity check is from Facebook's Native API sample code:
+        // https://developers.facebook.com/docs/audience-network/android/native-api
+        if (!mNativeAd.equals(ad) || !mNativeAd.isAdLoaded()) {
+            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
+            return;
+        }
+
+        final FacebookForwardingNativeAd facebookForwardingNativeAd =
+                new FacebookForwardingNativeAd(mNativeAd);
+
+        final List<String> imageUrls = new ArrayList<String>();
+        final String mainImageUrl = facebookForwardingNativeAd.getMainImageUrl();
+        if (mainImageUrl != null) {
+            imageUrls.add(facebookForwardingNativeAd.getMainImageUrl());
+        }
+        final String iconUrl = facebookForwardingNativeAd.getIconImageUrl();
+        if (iconUrl != null) {
+            imageUrls.add(facebookForwardingNativeAd.getIconImageUrl());
+        }
+
+        preCacheImages(mContext, imageUrls, new ImageListener() {
+            @Override
+            public void onImagesCached() {
+                mCustomEventNativeListener.onNativeAdLoaded(facebookForwardingNativeAd);
+            }
+
+            @Override
+            public void onImagesFailedToCache(NativeErrorCode errorCode) {
+                mCustomEventNativeListener.onNativeAdFailed(errorCode);
+            }
+        });
+    }
+
+    @Override
+    public void onError(final Ad ad, final AdError error) {
+        if (error == AdError.NO_FILL) {
+            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
+        } else if (error == AdError.INTERNAL_ERROR) {
+            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
+        } else {
+            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+        }
+    }
+
+    @Override
+    public void onAdClicked(final Ad ad) {
+        // not used
+    }
+
+    private boolean extrasAreValid(final Map<String, String> serverExtras) {
+        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        return (placementId != null && placementId.length() > 0);
+    }
+
+    static class FacebookForwardingNativeAd extends BaseForwardingNativeAd {
+        private static final String SOCIAL_CONTEXT_FOR_AD = "socialContextForAd";
+        private static final String APP_RATING_FOR_AD = "appRatingForAd";
+        private static final int IMPRESSION_MIN_TIME_VIEWED = 0;
+
+        private final NativeAd mNativeAd;
+
+        FacebookForwardingNativeAd(final NativeAd nativeAd) {
+            if (nativeAd == null) {
+                throw new IllegalArgumentException("Facebook NativeAd cannot be null");
+            }
+
+            mNativeAd = nativeAd;
+
+            setTitle(nativeAd.getAdTitle());
+            setText(nativeAd.getAdBody());
+
+            NativeAd.Image coverImage = nativeAd.getAdCoverImage();
+            setMainImageUrl(coverImage == null ? null : coverImage.getUrl());
+
+            NativeAd.Image icon = nativeAd.getAdIcon();
+            setIconImageUrl(icon == null ? null : icon.getUrl());
+
+            setCallToAction(nativeAd.getAdCallToAction());
+            setStarRating(getDoubleRating(nativeAd.getAdStarRating()));
+
+            addExtra(SOCIAL_CONTEXT_FOR_AD, nativeAd.getAdSocialContext());
+
+            setImpressionMinTimeViewed(IMPRESSION_MIN_TIME_VIEWED);
+        }
+
+        @Override
+        public void recordImpression() {
+            mNativeAd.logImpression();
+        }
+
+        @Override
+        public void handleClick(final View view) {
+            mNativeAd.handleClick();
+        }
+
+        @Override
+        public void destroy() {
+            mNativeAd.destroy();
+        }
+
+        private static Double getDoubleRating(final Rating rating) {
+            if (rating == null) {
+                return null;
+            }
+
+            return MAX_STAR_RATING * rating.getValue() / rating.getScale();
+        }
+    }
+}
diff --git a/extras/src/com/mopub/nativeads/InMobiNative.java b/extras/src/com/mopub/nativeads/InMobiNative.java
new file mode 100644
index 00000000..4fa79df5
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/InMobiNative.java
@@ -0,0 +1,196 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.inmobi.commons.InMobi;
+import com.inmobi.monetization.IMErrorCode;
+import com.inmobi.monetization.IMNative;
+import com.inmobi.monetization.IMNativeListener;
+import com.mopub.common.util.MoPubLog;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.json.JSONTokener;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+import static com.mopub.common.util.Json.getJsonValue;
+import static com.mopub.common.util.Numbers.parseDouble;
+
+/*
+ * Tested with InMobi SDK 4.4.0
+ */
+class InMobiNative extends CustomEventNative implements IMNativeListener {
+    private static final String APP_ID_KEY = "app_id";
+
+    private Context mContext;
+    private CustomEventNativeListener mCustomEventNativeListener;
+
+    // CustomEventNative implementation
+    @Override
+    protected void loadNativeAd(final Context context,
+            final CustomEventNativeListener customEventNativeListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
+
+        mContext = context;
+
+        if (!(context instanceof Activity)) {
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+        final Activity activity = (Activity) context;
+
+        final String appId;
+        if (extrasAreValid(serverExtras)) {
+            appId = serverExtras.get(APP_ID_KEY);
+        } else {
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mCustomEventNativeListener = customEventNativeListener;
+
+        InMobi.initialize(activity, appId);
+        final IMNative imNative = new IMNative(this);
+        imNative.loadAd();
+    }
+
+    // IMNativeListener implementation
+    @Override
+    public void onNativeRequestSucceeded(final IMNative imNative) {
+        if (imNative == null) {
+            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
+            return;
+        }
+
+        final InMobiForwardingNativeAd inMobiForwardingNativeAd;
+        try {
+            inMobiForwardingNativeAd = new InMobiForwardingNativeAd(imNative);
+        } catch (IllegalArgumentException e) {
+            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+            return;
+        } catch (JSONException e) {
+            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_JSON);
+            return;
+        }
+
+        final List<String> imageUrls = new ArrayList<String>();
+        final String mainImageUrl = inMobiForwardingNativeAd.getMainImageUrl();
+        if (mainImageUrl != null) {
+            imageUrls.add(mainImageUrl);
+        }
+        final String iconUrl = inMobiForwardingNativeAd.getIconImageUrl();
+        if (iconUrl != null) {
+            imageUrls.add(iconUrl);
+        }
+
+        preCacheImages(mContext, imageUrls, new ImageListener() {
+            @Override
+            public void onImagesCached() {
+                mCustomEventNativeListener.onNativeAdLoaded(inMobiForwardingNativeAd);
+            }
+
+            @Override
+            public void onImagesFailedToCache(NativeErrorCode errorCode) {
+                mCustomEventNativeListener.onNativeAdFailed(errorCode);
+            }
+        });
+    }
+
+    @Override
+    public void onNativeRequestFailed(final IMErrorCode errorCode) {
+        if (errorCode == IMErrorCode.INVALID_REQUEST) {
+            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_REQUEST);
+        } else if (errorCode == IMErrorCode.INTERNAL_ERROR || errorCode == IMErrorCode.NETWORK_ERROR) {
+            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
+        } else if (errorCode == IMErrorCode.NO_FILL) {
+            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
+        } else {
+            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+        }
+    }
+
+    private boolean extrasAreValid(final Map<String, String> serverExtras) {
+        final String placementId = serverExtras.get(APP_ID_KEY);
+        return (placementId != null && placementId.length() > 0);
+    }
+
+    static class InMobiForwardingNativeAd extends BaseForwardingNativeAd {
+        static final int IMPRESSION_MIN_TIME_VIEWED = 0;
+
+        // Modifiable keys
+        static final String TITLE = "title";
+        static final String DESCRIPTION = "description";
+        static final String SCREENSHOTS = "screenshots";
+        static final String ICON = "icon";
+        static final String LANDING_URL = "landing_url";
+        static final String CTA = "cta";
+        static final String RATING = "rating";
+
+        // Constant keys
+        static final String URL = "url";
+
+        private final IMNative mImNative;
+
+        InMobiForwardingNativeAd(final IMNative imNative) throws IllegalArgumentException, JSONException {
+            if (imNative == null) {
+                throw new IllegalArgumentException("InMobi Native Ad cannot be null");
+            }
+
+            mImNative = imNative;
+
+            final JSONTokener jsonTokener = new JSONTokener(mImNative.getContent());
+            final JSONObject jsonObject = new JSONObject(jsonTokener);
+
+            setTitle(getJsonValue(jsonObject, TITLE, String.class));
+            setText(getJsonValue(jsonObject, DESCRIPTION, String.class));
+
+            final JSONObject screenShotJsonObject = getJsonValue(jsonObject, SCREENSHOTS, JSONObject.class);
+            if (screenShotJsonObject != null) {
+                setMainImageUrl(getJsonValue(screenShotJsonObject, URL, String.class));
+            }
+
+            final JSONObject iconJsonObject = getJsonValue(jsonObject, ICON, JSONObject.class);
+            if (iconJsonObject != null) {
+                setIconImageUrl(getJsonValue(iconJsonObject, URL, String.class));
+            }
+
+            setClickDestinationUrl(getJsonValue(jsonObject, LANDING_URL, String.class));
+            setCallToAction(getJsonValue(jsonObject, CTA, String.class));
+
+            try {
+                setStarRating(parseDouble(jsonObject.opt(RATING)));
+            } catch (ClassCastException e) {
+                MoPubLog.d("Unable to set invalid star rating for InMobi Native.");
+            }
+            setImpressionMinTimeViewed(IMPRESSION_MIN_TIME_VIEWED);
+        }
+
+        @Override
+        public void prepareImpression(final View view) {
+            if (view != null && view instanceof ViewGroup) {
+                mImNative.attachToView((ViewGroup) view);
+            } else if (view != null && view.getParent() instanceof ViewGroup) {
+                mImNative.attachToView((ViewGroup) view.getParent());
+            } else {
+                MoPubLog.e("InMobi did not receive ViewGroup to attachToView, unable to record impressions");
+            }
+        }
+
+        @Override
+        public void handleClick(final View view) {
+            mImNative.handleClick(null);
+        }
+
+        @Override
+        public void destroy() {
+            mImNative.detachFromView();
+        }
+    }
+}
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 9ee197b6..901992f6 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -12,8 +12,7 @@
     <!-- For MRAID 2 -->
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
 
-    <application android:icon="@drawable/icon" android:label="@string/app_name"
-            android:debuggable="true">
+    <application android:icon="@drawable/icon" android:label="@string/app_name">
 	    <activity android:name="com.mopub.simpleadsdemo.SimpleAdsDemo"
 	            android:label="@string/app_name" android:theme="@android:style/Theme.NoTitleBar"
                 android:configChanges="orientation">
diff --git a/mopub-sample/res/layout/console.xml b/mopub-sample/res/layout/console.xml
deleted file mode 100644
index 8c23b037..00000000
--- a/mopub-sample/res/layout/console.xml
+++ /dev/null
@@ -1,59 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-	android:orientation="vertical"
-	android:layout_width="fill_parent"
-	android:layout_height="fill_parent">
-
-<RelativeLayout
-	android:id="@+id/toplayout"
-	android:orientation="vertical"
-	android:layout_width="fill_parent"
-	android:layout_height="wrap_content">
-
-	<Button
-		android:id="@+id/searchbutton"
-		android:layout_width="wrap_content"
-		android:layout_height="wrap_content"
-		android:layout_alignParentRight="true"
-		android:layout_marginLeft="10dp"
-		android:layout_marginTop="20dp"
-		android:text="Load Ad" />
-
-	<EditText
-		android:id="@+id/searchtext"
-		android:hint="Keyword, try 'coffee'"
-		android:layout_width="fill_parent"
-		android:layout_height="wrap_content"
-		android:layout_toLeftOf="@id/searchbutton"
-		android:layout_alignTop="@id/searchbutton" />
-</RelativeLayout>
-
-<RelativeLayout
-	android:id="@+id/toplayout"
-	android:orientation="vertical"
-	android:layout_width="fill_parent"
-	android:layout_height="fill_parent">
-
-	<com.mopub.mobileads.MoPubView
-		android:id="@+id/bannerview"
-		android:layout_alignParentBottom="true"
-		android:background="@drawable/spacer"
-		android:layout_marginTop="10dp"
-		android:layout_width="fill_parent"
-		android:layout_height="50dp" />
-
-	<TextView
-		android:id="@+id/consoletext"
-		android:scrollbars = "vertical"
-		android:maxLines = "1000"
-		android:layout_width="fill_parent"
-		android:layout_height="fill_parent"
-		android:layout_above="@id/bannerview"
-		android:textSize = "10sp"
-		android:typeface="monospace"
-		android:background="#000000"
-		android:text="MoPub Ad Loading Console\n========================\n" />
-
-</RelativeLayout>
-
-</LinearLayout>
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeFragment.java
index d957da7c..ee5780cb 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeFragment.java
@@ -43,6 +43,7 @@
 import android.widget.EditText;
 import android.widget.ListView;
 
+import com.mopub.common.util.MoPubLog;
 import com.mopub.nativeads.MoPubNative;
 import com.mopub.nativeads.NativeErrorCode;
 import com.mopub.nativeads.NativeResponse;
@@ -50,7 +51,6 @@
 import com.mopub.nativeads.ViewBinder;
 
 import static com.mopub.nativeads.MoPubNative.MoPubNativeListener;
-import static com.mopub.nativeads.util.Utils.MoPubLog;
 import static com.mopub.simpleadsdemo.Utils.hideSoftKeyboard;
 import static com.mopub.simpleadsdemo.Utils.logToast;
 
@@ -168,7 +168,7 @@ public void run() {
 
         @Override
         public void onNativeLoad(final NativeResponse nativeResponse) {
-            MoPubLog("MoPubNativeListener: Load!, NativeResponse: " + nativeResponse.toString());
+            MoPubLog.d("MoPubNativeListener: Load!, NativeResponse: " + nativeResponse.toString());
 
             // When we have a valid response, let the adapter manage when it will be shown
             mNativeAdapter.addNativeResponse(nativeResponse);
@@ -176,7 +176,7 @@ public void onNativeLoad(final NativeResponse nativeResponse) {
 
         @Override
         public void onNativeFail(final NativeErrorCode errorCode) {
-            MoPubLog("MoPubNativeListener: Fail!, NativeErrorCode: " + errorCode.toString());
+            MoPubLog.d("MoPubNativeListener: Fail!, NativeErrorCode: " + errorCode.toString());
             switch (errorCode) {
                 case INVALID_REQUEST_URL:
                     // Invalid url, don't try to request again
@@ -194,12 +194,12 @@ public void onNativeFail(final NativeErrorCode errorCode) {
 
         @Override
         public void onNativeImpression(final View view) {
-            MoPubLog("MoPubNativeListener: Impression!, View: " + view.toString());
+            MoPubLog.d("MoPubNativeListener: Impression!, View: " + view.toString());
         }
 
         @Override
         public void onNativeClick(final View view) {
-            MoPubLog("MoPubNativeListener: Click!, View: " + view.toString());
+            MoPubLog.d("MoPubNativeListener: Click!, View: " + view.toString());
         }
     }
 
diff --git a/mopub-sdk/etc/mraid.js b/mopub-sdk/etc/mraid.js
index d81ee015..443df6ff 100644
--- a/mopub-sdk/etc/mraid.js
+++ b/mopub-sdk/etc/mraid.js
@@ -126,7 +126,7 @@
 
   // Constants. ////////////////////////////////////////////////////////////////////////////////////
 
-  var VERSION = mraid.VERSION = '2.0';
+  var VERSION = mraid.VERSION = '1.0';
 
   var STATES = mraid.STATES = {
     LOADING: 'loading',     // Initial state.
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/CacheService.java b/mopub-sdk/src/main/java/com/mopub/common/CacheService.java
similarity index 64%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/CacheService.java
rename to mopub-sdk/src/main/java/com/mopub/common/CacheService.java
index dc310b10..da362092 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/CacheService.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/CacheService.java
@@ -1,32 +1,51 @@
-package com.mopub.nativeads;
+package com.mopub.common;
 
 import android.content.Context;
 import android.os.AsyncTask;
 import android.support.v4.util.LruCache;
 
 import com.mopub.common.util.DeviceUtils;
+import com.mopub.common.util.MoPubLog;
 import com.mopub.common.util.Streams;
 import com.mopub.common.util.Utils;
 
 import java.io.BufferedInputStream;
+import java.io.BufferedOutputStream;
+import java.io.ByteArrayInputStream;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 
-import static com.mopub.nativeads.DiskLruCache.open;
-import static com.mopub.nativeads.util.Utils.MoPubLog;
+import static com.mopub.common.DiskLruCache.open;
 
-class CacheService {
+public class CacheService {
     static final String UNIQUE_CACHE_NAME = "mopub-cache";
     private static final int APP_VERSION = 1;
     // The number of values per cache entry. Must be positive.
     private static final int VALUE_COUNT = 1;
+    private static final int DISK_CACHE_INDEX = 0;
 
     private static DiskLruCache sDiskLruCache;
     private static MemoryLruCache sMemoryLruCache;
 
-    static void initializeCaches(final Context context) {
+    public static boolean initializeMemoryCache(final Context context) {
+        if (context == null) {
+            return false;
+        }
+
+        if (sMemoryLruCache == null) {
+            final int memoryCacheSizeBytes = DeviceUtils.memoryCacheSizeBytes(context);
+            sMemoryLruCache = new MemoryLruCache(memoryCacheSizeBytes);
+        }
+        return true;
+    }
+
+    public static boolean initializeDiskCache(final Context context) {
+        if (context == null) {
+            return false;
+        }
+
         if (sDiskLruCache == null) {
             final File cacheDirectory = getDiskCacheDirectory(context);
             final long diskCacheSizeBytes = DeviceUtils.diskCacheSizeBytes(cacheDirectory);
@@ -38,26 +57,55 @@ static void initializeCaches(final Context context) {
                         diskCacheSizeBytes
                 );
             } catch (IOException e) {
-                MoPubLog("Unable to create DiskLruCache", e);
+                MoPubLog.d("Unable to create DiskLruCache", e);
             }
         }
+        return true;
+    }
 
-        if (sMemoryLruCache == null) {
-            final int memoryCacheSizeBytes = DeviceUtils.memoryCacheSizeBytes(context);
-            sMemoryLruCache = new MemoryLruCache(memoryCacheSizeBytes);
-        }
+    public static void initializeCaches(final Context context) {
+        initializeMemoryCache(context);
+        initializeDiskCache(context);
     }
 
-    static String createValidDiskCacheKey(final String key) {
+    public static String createValidDiskCacheKey(final String key) {
         return Utils.sha1(key);
     }
 
-    static File getDiskCacheDirectory(final Context context) {
+    public static File getDiskCacheDirectory(final Context context) {
         final String cachePath = context.getCacheDir().getPath();
         return new File(cachePath + File.separator + UNIQUE_CACHE_NAME);
     }
 
-    static byte[] getFromMemoryCache(final String key) {
+    public static boolean containsKeyDiskCache(final String key) {
+        if (sDiskLruCache == null) {
+            return false;
+        }
+
+        try {
+            final DiskLruCache.Snapshot snapshot = sDiskLruCache.get(createValidDiskCacheKey(key));
+            return snapshot != null;
+        } catch (Exception e) {
+            return false;
+        }
+    }
+
+    public static String getFilePathDiskCache(final String key) {
+        if (sDiskLruCache == null) {
+            return null;
+        }
+
+        // This violates encapsulation but there is no convenience method to get a filename from
+        // DiskLruCache. Filename was derived from private class method Entry#getCleanFile
+        // in DiskLruCache.java
+        return sDiskLruCache.getDirectory()
+                + File.separator
+                + createValidDiskCacheKey(key)
+                + "."
+                + DISK_CACHE_INDEX;
+    }
+
+    public static byte[] getFromMemoryCache(final String key) {
         if (sMemoryLruCache == null) {
             return null;
         }
@@ -65,7 +113,7 @@ static File getDiskCacheDirectory(final Context context) {
         return sMemoryLruCache.get(key);
     }
 
-    static byte[] getFromDiskCache(final String key) {
+    public static byte[] getFromDiskCache(final String key) {
         if (sDiskLruCache == null) {
             return null;
         }
@@ -78,9 +126,9 @@ static File getDiskCacheDirectory(final Context context) {
                 return null;
             }
 
-            final InputStream in = snapshot.getInputStream(0);
+            final InputStream in = snapshot.getInputStream(DISK_CACHE_INDEX);
             if (in != null) {
-                bytes = new byte[(int)snapshot.getLength(0)];
+                bytes = new byte[(int) snapshot.getLength(0)];
                 final BufferedInputStream buffIn = new BufferedInputStream(in);
                 try {
                     Streams.readStream(buffIn, bytes);
@@ -89,7 +137,7 @@ static File getDiskCacheDirectory(final Context context) {
                 }
             }
         } catch (Exception e) {
-            MoPubLog("Unable to get from DiskLruCache", e);
+            MoPubLog.d("Unable to get from DiskLruCache", e);
         } finally {
             if (snapshot != null) {
                 snapshot.close();
@@ -99,11 +147,11 @@ static File getDiskCacheDirectory(final Context context) {
         return bytes;
     }
 
-    static void getFromDiskCacheAsync(final String key, final DiskLruCacheGetListener diskLruCacheGetListener) {
+    public static void getFromDiskCacheAsync(final String key, final DiskLruCacheGetListener diskLruCacheGetListener) {
         new DiskLruCacheGetTask(key, diskLruCacheGetListener).execute();
     }
 
-    static byte[] get(final String key) {
+    public static byte[] get(final String key) {
         byte[] bytes = getFromMemoryCache(key);
         if (bytes != null) {
             return bytes;
@@ -111,7 +159,7 @@ static void getFromDiskCacheAsync(final String key, final DiskLruCacheGetListene
         return getFromDiskCache(key);
     }
 
-    static void putToMemoryCache(final String key, final byte[] content) {
+    public static void putToMemoryCache(final String key, final byte[] content) {
         if (sMemoryLruCache == null) {
             return;
         }
@@ -119,9 +167,13 @@ static void putToMemoryCache(final String key, final byte[] content) {
         sMemoryLruCache.put(key, content);
     }
 
-    static void putToDiskCache(final String key, final byte[] content) {
+    public static boolean putToDiskCache(final String key, final byte[] content) {
+        return putToDiskCache(key, new ByteArrayInputStream(content));
+    }
+
+    public static boolean putToDiskCache(final String key, final InputStream content) {
         if (sDiskLruCache == null) {
-            return;
+            return false;
         }
 
         DiskLruCache.Editor editor = null;
@@ -130,17 +182,19 @@ static void putToDiskCache(final String key, final byte[] content) {
 
             if (editor == null) {
                 // another edit is in progress
-                return;
+                return false;
             }
 
-            final OutputStream outputStream = editor.newOutputStream(0);
-            outputStream.write(content);
+            final OutputStream outputStream =
+                    new BufferedOutputStream(editor.newOutputStream(DISK_CACHE_INDEX));
+            Streams.copyContent(content, outputStream);
+            outputStream.flush();
             outputStream.close();
 
             sDiskLruCache.flush();
             editor.commit();
         } catch (Exception e) {
-            MoPubLog("Unable to put to DiskLruCache", e);
+            MoPubLog.d("Unable to put to DiskLruCache", e);
             try {
                 if (editor != null) {
                     editor.abort();
@@ -148,14 +202,16 @@ static void putToDiskCache(final String key, final byte[] content) {
             } catch (IOException ignore) {
                 // ignore
             }
+            return false;
         }
+        return true;
     }
 
-    static void putToDiskCacheAsync(final String key, final byte[] content) {
+    public static void putToDiskCacheAsync(final String key, final byte[] content) {
         new DiskLruCachePutTask(key, content).execute();
     }
 
-    static void put(final String key, final byte[] content) {
+    public static void put(final String key, final byte[] content) {
         putToMemoryCache(key, content);
         putToDiskCacheAsync(key, content);
     }
@@ -175,7 +231,7 @@ protected int sizeOf(final String key, final byte[] bytes) {
         }
     }
 
-    static interface DiskLruCacheGetListener {
+    public static interface DiskLruCacheGetListener {
         void onComplete(final String key, final byte[] content);
     }
 
@@ -231,7 +287,7 @@ protected Void doInBackground(Void... voids) {
 
     // Testing
     @Deprecated
-    static void clearAndNullCaches() {
+    public static void clearAndNullCaches() {
         if (sDiskLruCache != null) {
             try {
                 sDiskLruCache.delete();
@@ -248,13 +304,13 @@ static void clearAndNullCaches() {
 
     // Testing
     @Deprecated
-    static LruCache<String, byte[]> getMemoryLruCache() {
+    public static LruCache<String, byte[]> getMemoryLruCache() {
         return sMemoryLruCache;
     }
 
     // Testing
     @Deprecated
-    static DiskLruCache getDiskLruCache() {
+    public static DiskLruCache getDiskLruCache() {
         return sDiskLruCache;
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/DiskLruCache.java b/mopub-sdk/src/main/java/com/mopub/common/DiskLruCache.java
similarity index 99%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/DiskLruCache.java
rename to mopub-sdk/src/main/java/com/mopub/common/DiskLruCache.java
index 80ee56ea..0c603e66 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/DiskLruCache.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/DiskLruCache.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.mopub.nativeads;
+package com.mopub.common;
 
 import java.io.BufferedWriter;
 import java.io.Closeable;
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/DiskLruCacheStrictLineReader.java b/mopub-sdk/src/main/java/com/mopub/common/DiskLruCacheStrictLineReader.java
similarity index 99%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/DiskLruCacheStrictLineReader.java
rename to mopub-sdk/src/main/java/com/mopub/common/DiskLruCacheStrictLineReader.java
index 998118d8..8e4aa1f4 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/DiskLruCacheStrictLineReader.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/DiskLruCacheStrictLineReader.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.mopub.nativeads;
+package com.mopub.common;
 
 import java.io.ByteArrayOutputStream;
 import java.io.Closeable;
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/DiskLruCacheUtil.java b/mopub-sdk/src/main/java/com/mopub/common/DiskLruCacheUtil.java
similarity index 98%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/DiskLruCacheUtil.java
rename to mopub-sdk/src/main/java/com/mopub/common/DiskLruCacheUtil.java
index 1d9dbb23..6cc5b4f9 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/DiskLruCacheUtil.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/DiskLruCacheUtil.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.mopub.nativeads;
+package com.mopub.common;
 
 import java.io.Closeable;
 import java.io.File;
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DownloadResponse.java b/mopub-sdk/src/main/java/com/mopub/common/DownloadResponse.java
new file mode 100644
index 00000000..82d5fa90
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/DownloadResponse.java
@@ -0,0 +1,55 @@
+package com.mopub.common;
+
+import com.mopub.common.util.ResponseHeader;
+import com.mopub.common.util.Streams;
+
+import org.apache.http.Header;
+import org.apache.http.HttpResponse;
+
+import java.io.BufferedInputStream;
+import java.io.ByteArrayOutputStream;
+
+public class DownloadResponse {
+    private byte[] mBytes = new byte[0];
+    private final int mStatusCode;
+    private final long mContentLength;
+    private final Header[] mHeaders;
+
+    public DownloadResponse(final HttpResponse httpResponse) throws Exception {
+        final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
+        BufferedInputStream inputStream = null;
+        try {
+            inputStream = new BufferedInputStream(httpResponse.getEntity().getContent());
+            Streams.copyContent(inputStream, outputStream);
+            mBytes = outputStream.toByteArray();
+        } finally {
+            Streams.closeStream(inputStream);
+            Streams.closeStream(outputStream);
+        }
+
+        mStatusCode = httpResponse.getStatusLine().getStatusCode();
+        mContentLength = mBytes.length;
+        mHeaders = httpResponse.getAllHeaders();
+    }
+
+    public byte[] getByteArray() {
+        return mBytes;
+    }
+
+    public int getStatusCode() {
+        return mStatusCode;
+    }
+
+    public long getContentLength() {
+        return mContentLength;
+    }
+
+    public String getFirstHeader(final ResponseHeader responseHeader) {
+        for (final Header header : mHeaders) {
+            if (header.getName().equals(responseHeader.getKey())) {
+                return header.getValue();
+            }
+        }
+        return null;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/DownloadTask.java b/mopub-sdk/src/main/java/com/mopub/common/DownloadTask.java
similarity index 70%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/DownloadTask.java
rename to mopub-sdk/src/main/java/com/mopub/common/DownloadTask.java
index 0736da40..3e551b58 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/DownloadTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/DownloadTask.java
@@ -1,22 +1,22 @@
-package com.mopub.nativeads;
+package com.mopub.common;
 
 import android.net.http.AndroidHttpClient;
 import android.os.AsyncTask;
 
+import com.mopub.common.util.MoPubLog;
+
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.HttpUriRequest;
 
-import static com.mopub.nativeads.util.Utils.MoPubLog;
-
-class DownloadTask extends AsyncTask<HttpUriRequest, Void, DownloadResponse> {
+public class DownloadTask extends AsyncTask<HttpUriRequest, Void, DownloadResponse> {
     private final DownloadTaskListener mDownloadTaskListener;
     private String mUrl;
 
-    interface DownloadTaskListener {
+    public static interface DownloadTaskListener {
         abstract void onComplete(String url, DownloadResponse downloadResponse);
     }
 
-    DownloadTask(final DownloadTaskListener downloadTaskListener) throws IllegalArgumentException {
+    public DownloadTask(final DownloadTaskListener downloadTaskListener) throws IllegalArgumentException {
         if (downloadTaskListener == null) {
             throw new IllegalArgumentException("DownloadTaskListener must not be null.");
         }
@@ -27,23 +27,26 @@
     @Override
     protected DownloadResponse doInBackground(final HttpUriRequest... httpUriRequests) {
         if (httpUriRequests == null || httpUriRequests.length == 0 || httpUriRequests[0] == null) {
-            MoPubLog("Download task tried to execute null or empty url");
+            MoPubLog.d("Download task tried to execute null or empty url");
             return null;
         }
 
         final HttpUriRequest httpUriRequest = httpUriRequests[0];
         mUrl = httpUriRequest.getURI().toString();
 
-        final AndroidHttpClient httpClient = NativeHttpClient.getHttpClient();
+        AndroidHttpClient httpClient = null;
         try {
+            httpClient = HttpClient.getHttpClient();
             final HttpResponse httpResponse = httpClient.execute(httpUriRequest);
             return new DownloadResponse(httpResponse);
         } catch (Exception e) {
-            MoPubLog("Download task threw an internal exception");
+            MoPubLog.d("Download task threw an internal exception");
             cancel(true);
             return null;
         } finally {
-            httpClient.close();
+            if (httpClient != null) {
+                httpClient.close();
+            }
         }
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java b/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
index d0e60f78..7749ef46 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
@@ -2,12 +2,17 @@
 
 import android.content.Context;
 import android.content.SharedPreferences;
-import android.util.Log;
+import android.os.AsyncTask;
 
 import com.mopub.common.factories.MethodBuilderFactory;
+import com.mopub.common.util.AsyncTasks;
+import com.mopub.common.util.MoPubLog;
+
+import java.lang.ref.WeakReference;
 
 import static com.mopub.common.util.Reflection.MethodBuilder;
 import static com.mopub.common.util.Reflection.classFound;
+
 import static com.mopub.mobileads.AdTypeTranslator.CustomEventType;
 import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.ADMOB_BANNER;
 import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.ADMOB_INTERSTITIAL;
@@ -95,37 +100,69 @@ static public void asyncFetchAdvertisingInfo(final Context context) {
         asyncFetchAdvertisingInfo(context, null);
     }
 
+    static private class FetchAdvertisingInfoTask extends AsyncTask<Void, Void, Void> {
+        private WeakReference<Context> mContextWeakReference;
+        private WeakReference<GpsHelperListener> mGpsHelperListenerWeakReference;
+
+        public FetchAdvertisingInfoTask(Context context, GpsHelperListener gpsHelperListener) {
+            mContextWeakReference = new WeakReference<Context>(context);
+            mGpsHelperListenerWeakReference = new WeakReference<GpsHelperListener>(gpsHelperListener);
+        }
+
+        @Override
+        protected Void doInBackground(Void... voids) {
+            try {
+                Context context = mContextWeakReference.get();
+                if (context == null) {
+                    return null;
+                }
+
+                MethodBuilder methodBuilder = MethodBuilderFactory.create(null, "getAdvertisingIdInfo")
+                        .setStatic(Class.forName(sAdvertisingIdClientClassName))
+                        .addParam(Context.class, context);
+
+                Object adInfo = methodBuilder.execute();
+
+                if (adInfo != null) {
+                    updateSharedPreferences(context, adInfo);
+                }
+            } catch (Exception exception) {
+                MoPubLog.d("Unable to obtain AdvertisingIdClient.getAdvertisingIdInfo()");
+            }
+
+            return null;
+        }
+
+        @Override
+        protected void onPostExecute(Void aVoid) {
+            GpsHelperListener gpsHelperListener = mGpsHelperListenerWeakReference.get();
+            if (gpsHelperListener != null) {
+                gpsHelperListener.onFetchAdInfoCompleted();
+            }
+        }
+    }
+
     static public void asyncFetchAdvertisingInfo(final Context context, final GpsHelperListener gpsHelperListener) {
         if (!classFound(sAdvertisingIdClientClassName)) {
             if (gpsHelperListener != null) {
                 gpsHelperListener.onFetchAdInfoCompleted();
             }
+
+            return;
         }
 
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    MethodBuilder methodBuilder = MethodBuilderFactory.create(null, "getAdvertisingIdInfo")
-                            .setStatic(Class.forName(sAdvertisingIdClientClassName))
-                            .addParam(Context.class, context);
-
-                    Object adInfo = methodBuilder.execute();
-
-                    if (adInfo != null) {
-                        updateSharedPreferences(context, adInfo);
-                    }
-                } catch (Exception exception) {
-                    Log.d("MoPub", "Unable to obtain AdvertisingIdClient.getAdvertisingIdInfo()");
-                } finally {
-                    if (gpsHelperListener != null) {
-                        gpsHelperListener.onFetchAdInfoCompleted();
-                    }
-                }
+        try {
+            AsyncTasks.safeExecuteOnExecutor(new FetchAdvertisingInfoTask(context, gpsHelperListener));
+        } catch (Exception exception) {
+            MoPubLog.d("Error executing FetchAdvertisingInfoTask", exception);
+
+            if (gpsHelperListener != null) {
+                gpsHelperListener.onFetchAdInfoCompleted();
             }
-        }).start();
+        }
     }
 
+
     static void updateSharedPreferences(final Context context, final Object adInfo) {
         String advertisingId = reflectedGetAdvertisingId(adInfo, null);
         boolean isLimitAdTrackingEnabled = reflectedIsLimitAdTrackingEnabled(adInfo, false);
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeHttpClient.java b/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java
similarity index 50%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeHttpClient.java
rename to mopub-sdk/src/main/java/com/mopub/common/HttpClient.java
index 462c9d30..5f6a66b5 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeHttpClient.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java
@@ -1,9 +1,12 @@
-package com.mopub.nativeads;
+package com.mopub.common;
 
 import android.net.http.AndroidHttpClient;
+import android.os.Handler;
+import android.os.Looper;
 
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.DeviceUtils;
+import com.mopub.common.util.MoPubLog;
 
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.HttpGet;
@@ -11,10 +14,9 @@
 import org.apache.http.params.HttpConnectionParams;
 import org.apache.http.params.HttpParams;
 
-import static com.mopub.nativeads.UrlResolutionTask.UrlResolutionListener;
-import static com.mopub.nativeads.util.Utils.MoPubLog;
+import java.util.Arrays;
 
-class NativeHttpClient {
+public class HttpClient {
     private static final int CONNECTION_TIMEOUT = 10000;
     private static final int SOCKET_TIMEOUT = 10000;
 
@@ -31,35 +33,47 @@ public static AndroidHttpClient getHttpClient() {
         return httpClient;
     }
 
-    static void makeTrackingHttpRequest(final String url) {
-        final DownloadTask httpDownloadTask = new DownloadTask(new DownloadTask.DownloadTaskListener() {
+    public static void makeTrackingHttpRequest(final Iterable<String> urls) {
+        if (urls == null) {
+            return;
+        }
+
+        final DownloadTask.DownloadTaskListener downloadTaskListener = new DownloadTask.DownloadTaskListener() {
             @Override
             public void onComplete(final String url, final DownloadResponse downloadResponse) {
                 if (downloadResponse == null || downloadResponse.getStatusCode() != HttpStatus.SC_OK) {
-                    MoPubLog("Failed to hit tracking endpoint: " + url);
+                    MoPubLog.d("Failed to hit tracking endpoint: " + url);
                     return;
                 }
 
                 String result = HttpResponses.asResponseString(downloadResponse);
 
                 if (result != null) {
-                    MoPubLog("Successfully hit tracking endpoint:" + url);
+                    MoPubLog.d("Successfully hit tracking endpoint: " + url);
                 } else {
-                    MoPubLog("Failed to hit tracking endpoint: " + url);
+                    MoPubLog.d("Failed to hit tracking endpoint: " + url);
                 }
             }
-        });
+        };
 
-        try {
-            final HttpGet httpGet = new HttpGet(url);
-            httpDownloadTask.execute(httpGet);
-        } catch (Exception e) {
-            MoPubLog("Failed to hit tracking endpoint: " + url);
-        }
+        final Runnable trackingHttpRequestRunnable = new Runnable() {
+            @Override
+            public void run() {
+                for (final String url : urls) {
+                    try {
+                        final HttpGet httpGet = new HttpGet(url);
+                        AsyncTasks.safeExecuteOnExecutor(new DownloadTask(downloadTaskListener), httpGet);
+                    } catch (Exception e) {
+                        MoPubLog.d("Failed to hit tracking endpoint: " + url);
+                    }
+                }
+            }
+        };
+
+        new Handler(Looper.getMainLooper()).post(trackingHttpRequestRunnable);
     }
 
-    static void getResolvedUrl(final String urlString, final UrlResolutionListener listener) {
-        final UrlResolutionTask urlResolutionTask = new UrlResolutionTask(listener);
-        AsyncTasks.safeExecuteOnExecutor(urlResolutionTask, urlString);
+    public static void makeTrackingHttpRequest(final String url) {
+        makeTrackingHttpRequest(Arrays.asList(url));
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/HttpResponses.java b/mopub-sdk/src/main/java/com/mopub/common/HttpResponses.java
similarity index 68%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/HttpResponses.java
rename to mopub-sdk/src/main/java/com/mopub/common/HttpResponses.java
index 365b0aa9..df8dbaaa 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/HttpResponses.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/HttpResponses.java
@@ -1,4 +1,4 @@
-package com.mopub.nativeads;
+package com.mopub.common;
 
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
@@ -6,20 +6,19 @@
 import org.json.JSONObject;
 import org.json.JSONTokener;
 
-class HttpResponses {
+public final class HttpResponses {
     private HttpResponses() {}
 
-    static Bitmap asBitmap(final DownloadResponse downloadResponse) {
+    public static Bitmap asBitmap(final DownloadResponse downloadResponse) {
         if (downloadResponse == null) {
             return null;
         }
 
         final byte[] bytes = downloadResponse.getByteArray();
-        final int contentLength = (int) downloadResponse.getContentLength();
-        return BitmapFactory.decodeByteArray(bytes, 0, contentLength);
+        return BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
     }
 
-    static JSONObject asJsonObject(final DownloadResponse downloadResponse) {
+    public static JSONObject asJsonObject(final DownloadResponse downloadResponse) {
         if (downloadResponse == null) {
             return null;
         }
@@ -34,7 +33,7 @@ static JSONObject asJsonObject(final DownloadResponse downloadResponse) {
         }
     }
 
-    static String asResponseString(final DownloadResponse downloadResponse) {
+    public static String asResponseString(final DownloadResponse downloadResponse) {
         if (downloadResponse == null) {
             return null;
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/LocationService.java b/mopub-sdk/src/main/java/com/mopub/common/LocationService.java
index 0c89cc6f..eff1bb6a 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/LocationService.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/LocationService.java
@@ -4,9 +4,9 @@
 import android.location.Location;
 import android.location.LocationManager;
 
-import java.math.BigDecimal;
+import com.mopub.common.util.MoPubLog;
 
-import static com.mopub.nativeads.util.Utils.MoPubLog;
+import java.math.BigDecimal;
 
 public class LocationService {
     public static enum LocationAwareness { NORMAL, TRUNCATED, DISABLED };
@@ -32,18 +32,18 @@ public static Location getLastKnownLocation(final Context context,
         try {
             gpsLocation = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
         } catch (SecurityException e) {
-            MoPubLog("Failed to retrieve GPS location: access appears to be disabled.");
+            MoPubLog.d("Failed to retrieve GPS location: access appears to be disabled.");
         } catch (IllegalArgumentException e) {
-            MoPubLog("Failed to retrieve GPS location: device has no GPS provider.");
+            MoPubLog.d("Failed to retrieve GPS location: device has no GPS provider.");
         }
 
         Location networkLocation = null;
         try {
             networkLocation = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
         } catch (SecurityException e) {
-            MoPubLog("Failed to retrieve network location: access appears to be disabled.");
+            MoPubLog.d("Failed to retrieve network location: access appears to be disabled.");
         } catch (IllegalArgumentException e) {
-            MoPubLog("Failed to retrieve network location: device has no network provider.");
+            MoPubLog.d("Failed to retrieve network location: device has no network provider.");
         }
 
         if (gpsLocation == null && networkLocation == null) {
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
index 8d3863ec..5bbc3f1b 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
@@ -33,5 +33,5 @@
 package com.mopub.common;
 
 public class MoPub {
-    public static final String SDK_VERSION = "2.0.1";
+    public static final String SDK_VERSION = "2.2";
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java b/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
index 8ead5409..8d9d6046 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
@@ -21,7 +21,7 @@
 import android.widget.RelativeLayout;
 import android.widget.Toast;
 
-import com.mopub.nativeads.util.Utils;
+import com.mopub.common.util.MoPubLog;
 
 import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
 import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
@@ -46,7 +46,7 @@
     private ImageButton mCloseButton;
 
     public static void open(final Context context, final String url) {
-        Utils.MoPubLog("Opening url in MoPubBrowser: " + url);
+        MoPubLog.d("Opening url in MoPubBrowser: " + url);
         final Intent intent = new Intent(context, MoPubBrowser.class);
         intent.putExtra(DESTINATION_URL_KEY, url);
         intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
@@ -57,6 +57,8 @@ public static void open(final Context context, final String url) {
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
+        setResult(Activity.RESULT_OK);
+
         getWindow().requestFeature(Window.FEATURE_PROGRESS);
         getWindow().setFeatureInt(Window.FEATURE_PROGRESS, Window.PROGRESS_VISIBILITY_ON);
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/AsyncTasks.java b/mopub-sdk/src/main/java/com/mopub/common/util/AsyncTasks.java
index 4ee8b4be..314549a2 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/AsyncTasks.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/AsyncTasks.java
@@ -1,6 +1,7 @@
 package com.mopub.common.util;
 
 import android.os.AsyncTask;
+import android.os.Looper;
 
 import java.util.concurrent.Executor;
 
@@ -13,11 +14,15 @@
      * Starting with ICS, default AsyncTask#execute behavior runs the tasks serially. This method
      * attempts to force these AsyncTasks to run in parallel with a ThreadPoolExecutor, if possible.
      */
-    public static <P> void safeExecuteOnExecutor(AsyncTask<P, ?, ?> asyncTask, P... params) {
+    public static <P> void safeExecuteOnExecutor(AsyncTask<P, ?, ?> asyncTask, P... params) throws IllegalArgumentException, IllegalStateException {
         if (asyncTask == null) {
             throw new IllegalArgumentException("Unable to execute null AsyncTask.");
         }
 
+        if (Looper.myLooper() != Looper.getMainLooper()) {
+            throw new IllegalStateException("AsyncTask must be executed on the main thread");
+        }
+
         if (currentApiLevel().isAtLeast(ICE_CREAM_SANDWICH)) {
             try {
                 Executor threadPoolExecutor = (Executor) AsyncTask.class.getField("THREAD_POOL_EXECUTOR").get(AsyncTask.class);
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java b/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java
index 07086308..88709280 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java
@@ -19,9 +19,9 @@
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static android.Manifest.permission.INTERNET;
 import static com.mopub.common.util.Reflection.MethodBuilder;
+
 import static com.mopub.common.util.VersionCode.HONEYCOMB;
 import static com.mopub.common.util.VersionCode.currentApiLevel;
-import static com.mopub.nativeads.util.Utils.MoPubLog;
 import static java.util.Collections.list;
 
 public class DeviceUtils {
@@ -124,11 +124,11 @@ public static int memoryCacheSizeBytes(final Context context) {
         if (currentApiLevel().isAtLeast(HONEYCOMB)) {
             try {
                 final int flagLargeHeap = ApplicationInfo.class.getDeclaredField("FLAG_LARGE_HEAP").getInt(null);
-                if (bitmaskContainsFlag(context.getApplicationInfo().flags, flagLargeHeap)) {
+                if (Utils.bitMaskContainsFlag(context.getApplicationInfo().flags, flagLargeHeap)) {
                     memoryClass = (Integer) new MethodBuilder(activityManager, "getLargeMemoryClass").execute();
                 }
             } catch (Exception e) {
-                MoPubLog("Unable to reflectively determine large heap size on Honeycomb and above.");
+                MoPubLog.d("Unable to reflectively determine large heap size on Honeycomb and above.");
             }
         }
 
@@ -144,14 +144,10 @@ public static long diskCacheSizeBytes(File dir) {
             long availableBytes = ((long) statFs.getBlockCount()) * statFs.getBlockSize();
             size = availableBytes / 50;
         } catch (IllegalArgumentException e) {
-            MoPubLog("Unable to calculate 2% of available disk space, defaulting to minimum");
+            MoPubLog.d("Unable to calculate 2% of available disk space, defaulting to minimum");
         }
 
         // Bound inside min/max size for disk cache.
         return Math.max(Math.min(size, MAX_DISK_CACHE_SIZE), MIN_DISK_CACHE_SIZE);
     }
-
-    public static boolean bitmaskContainsFlag(final int bitmask, final int flag) {
-        return (bitmask & flag) != 0;
-    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Dips.java b/mopub-sdk/src/main/java/com/mopub/common/util/Dips.java
index 6d2e0dbb..b858a4a0 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Dips.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Dips.java
@@ -37,8 +37,28 @@
 import android.util.TypedValue;
 
 public class Dips {
+    public static float pixelsToFloatDips(final float pixels, final Context context) {
+        return pixels / getDensity(context);
+    }
+
+    public static int pixelsToIntDips(final float pixels, final Context context) {
+        return (int) (pixelsToFloatDips(pixels, context) + 0.5f);
+    }
+
+    public static float dipsToFloatPixels(final float dips, final Context context) {
+        return dips * getDensity(context);
+    }
+
+    public static int dipsToIntPixels(final float dips, final Context context) {
+        return (int) (dipsToFloatPixels(dips, context) + 0.5f);
+    }
+
+    private static float getDensity(final Context context) {
+        return context.getResources().getDisplayMetrics().density;
+    }
+
     public static float asFloatPixels(float dips, Context context) {
-        DisplayMetrics displayMetrics = context.getResources().getDisplayMetrics();
+        final DisplayMetrics displayMetrics = context.getResources().getDisplayMetrics();
         return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dips, displayMetrics);
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Drawables.java b/mopub-sdk/src/main/java/com/mopub/common/util/Drawables.java
index 0fe32998..f54d02de 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Drawables.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Drawables.java
@@ -38,8 +38,6 @@
 import android.util.Base64;
 import android.util.DisplayMetrics;
 
-import com.mopub.common.util.Dips;
-
 import java.io.ByteArrayInputStream;
 
 public enum Drawables {
@@ -54,12 +52,14 @@
     CLOSE("iVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAYAAAAfSC3RAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAg9JREFUeNp8kk1rWkEUhodc5aJUEbVqJQRcqCUgERottIKYQhdZSEh1pcWFSFd2HdzFhfobpOJCFLEbddONEUUQEUSDxi4KtWIq+LGQanOLFqdnJAO3peTAe+98PXPmvDMMQkgE0ikUilcajca2WCx+Q58DbUAYJARpQccmk+l8Op1CE/0inycqlcqdTCZvi8XincViCcHYEUgKYkH7oNfhcLhRKpWw1+v9AH0zMhgMh6lU6utkMsGQDddqNQo/Az0lUCQSaQyHQ7xcLnGn08GBQOCSsdlsKtB7nU7HSqVSJJfLhWaz+UWv15uPx2M2Go1eeDye51qtFgkEAgQwgvEv5Kh7wWDwZb1e/wGBt9stJv9Wq8Wl0+mb0WiEN5vNTiRrIpHI3deN/guv12vMcdyDEA3W5XKdtdvtnwTix3w+x/F4/BOsUZAkfEhI3ctms9ckEz+gJmy32/lu7/0FgRENWhM/VqsV320Ko8egE2o5rYkcj2QiEDWMwFar9QLWHxLwIBaLlfkQaWcymVwoFLL/63alUrlzOBxvGTDkyOl0Xur1+t09QRYEL+Sjz+fzQIZvYrG4qlar3TKZjBWJRLvSYPNHTL/fvzUajTOlUnlKLrdareb8fr+XvtVms/mdwDDvhqxst9v9nM/nzxgyWS6XW7DreDAYDOE+391DNHawRCK5ms1mmkKh8AY0/SPAAEsFgVbY4GziAAAAAElFTkSuQmCC"),
 
     INTERSTITIAL_CLOSE_BUTTON_NORMAL("iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAKfGlDQ1BJQ0MgUHJvZmlsZQAAeAHVlndUU8kex+fe9AaBQOgQeu8dpNdQBKmCqIQkhBpCqGJDRFzBtSAiAuqKrogouBbaWhBRLCwCCnY3yCKgrIsFUVF5N/BgPee9/e/98+ac+c3n/uY3v5k75ZwvAOROlkCQAlMBSOVnCkN83BnLo6IZuMeAAFQBFcgDOoudIXALDg4A/1g+DAJI3HnXWJzrH8P+e4cUh5vBBgAKRrrjOBnsVITPIfyNLRBmAgCLuTcnU4AwqhBhGSGyQIQrxMyb55Nijpvn9rmYsBAPJOYeAHgyiyXkAUASIX5GNpuH5CEjCMz4nEQ+wmYIO7MTWByEBQgbpaamibkaYb247/LwvmMWK24xJ4vFW+T5f0FGIhN7JmYIUlhr5j7+lyY1JQvZr7kijVgyP2VpANLSkTrGYXn6L7AgZe7M5vxcfnjogp8ftzRogeOF3iELLMh0/46Dwxb8eQkeSxeYm+G1mCeJ5Sc+s7n8wqyQ8AXOyA71WuC8hLDIBeZwPRf98YnezAV/YiZzca7kNP/FNYAwkACyAB9wABcIQRxIAykAOb1Mbi5iAfBIE6wRJvISMhluyK3jGjGYfLaJEcPCzNxc3P1/U8TvbX6x7+hz7wii3/rbl94OgH0x8ibEV/3fcSxNAFpfAED78LdP8y1yFXYBcLGXnSXMns+HFjcYQASSQAYoIO9ZE+gBY2ABbIAjcAVewA8EIbscBVYBNrLXqcgu54B1YBMoAiVgF9gLKsEhcAQcB6fAGdAMLoAr4Dq4DXrBAHgMRGAEvAKT4AOYgSAIB1EgGqQAqUHakCFkAdlBzpAXFACFQFFQLMSD+FAWtA7aDJVApVAldBiqg36BWqEr0E2oD3oIDUHj0FvoM4yCybAMrALrwKawHewG+8Nh8EqYB6fDeXAhvAOugGvgk3ATfAW+DQ/AIvgVPIUCKBKKjlJHGaPsUB6oIFQ0Kh4lRG1AFaPKUTWoBlQbqgt1FyVCTaA+obFoGpqBNkY7on3R4Wg2Oh29Ab0dXYk+jm5Cd6LvoofQk+hvGApGGWOIccAwMcsxPEwOpghTjjmGOY+5hhnAjGA+YLFYOlYXa4v1xUZhk7BrsduxB7CN2HZsH3YYO4XD4RRwhjgnXBCOhcvEFeH2407iLuP6cSO4j3gSXg1vgffGR+P5+AJ8Of4E/hK+Hz+KnyFQCdoEB0IQgUNYQ9hJOEpoI9whjBBmiFJEXaITMYyYRNxErCA2EK8RnxDfkUgkDZI9aRkpkZRPqiCdJt0gDZE+kaXJBmQPcgw5i7yDXEtuJz8kv6NQKDoUV0o0JZOyg1JHuUp5RvkoQZMwkWBKcCQ2SlRJNEn0S7yWJEhqS7pJrpLMkyyXPCt5R3KCSqDqUD2oLOoGahW1lXqfOiVFkzKXCpJKldoudULqptSYNE5aR9pLmiNdKH1E+qr0MA1F06R50Ni0zbSjtGu0ERmsjK4MUyZJpkTmlEyPzKSstKyVbIRsrmyV7EVZER1F16Ez6Sn0nfQz9EH6ZzkVOTc5rtw2uQa5frlpeSV5V3mufLF8o/yA/GcFhoKXQrLCboVmhaeKaEUDxWWKOYoHFa8pTijJKDkqsZWKlc4oPVKGlQ2UQ5TXKh9R7laeUlFV8VERqOxXuaoyoUpXdVVNUi1TvaQ6rkZTc1ZLVCtTu6z2kiHLcGOkMCoYnYxJdWV1X/Us9cPqPeozGroa4RoFGo0aTzWJmnaa8Zplmh2ak1pqWoFa67TqtR5pE7TttBO092l3aU/r6OpE6mzVadYZ05XXZerm6dbrPtGj6LnopevV6N3Tx+rb6SfrH9DvNYANrA0SDKoM7hjChjaGiYYHDPuMMEb2RnyjGqP7xmRjN+Ns43rjIRO6SYBJgUmzyWtTLdNo092mXabfzKzNUsyOmj02lzb3My8wbzN/a2FgwbaosrhnSbH0ttxo2WL5xsrQimt10OqBNc060HqrdYf1VxtbG6FNg824rZZtrG217X07Gbtgu+12N+wx9u72G+0v2H9ysHHIdDjj8JejsWOy4wnHsSW6S7hLji4ZdtJwYjkddhI5M5xjnX9yFrmou7Bcalyeu2q6clyPuY666bsluZ10e+1u5i50P+8+7eHgsd6j3RPl6eNZ7NnjJe0V7lXp9cxbw5vnXe896WPts9an3Rfj6++72/c+U4XJZtYxJ/1s/db7dfqT/UP9K/2fBxgECAPaAuFAv8A9gU+Wai/lL20OAkHMoD1BT4N1g9ODf12GXRa8rGrZixDzkHUhXaG00NWhJ0I/hLmH7Qx7HK4XnhXeESEZERNRFzEd6RlZGilabrp8/fLbUYpRiVEt0bjoiOhj0VMrvFbsXTESYx1TFDO4Undl7sqbqxRXpay6uFpyNWv12VhMbGTsidgvrCBWDWsqjhlXHTfJ9mDvY7/iuHLKOONcJ24pdzTeKb40foznxNvDG09wSShPmEj0SKxMfJPkm3QoaTo5KLk2eTYlMqUxFZ8am9rKl+Yn8zvTVNNy0/oEhoIigSjdIX1v+qTQX3gsA8pYmdGSKYMIm+4svawtWUPZztlV2R9zInLO5krl8nO71xis2bZmNM877+e16LXstR3r1NdtWje03m394Q3QhrgNHRs1NxZuHMn3yT++ibgpedNvBWYFpQXvN0dubitUKcwvHN7is6W+SKJIWHR/q+PWQz+gf0j8oWeb5bb9274Vc4pvlZiVlJd82c7efutH8x8rfpzdEb+jZ6fNzoO7sLv4uwZ3u+w+XipVmlc6vCdwT1MZo6y47P3e1XtvlluVH9pH3Je1T1QRUNGyX2v/rv1fKhMqB6rcqxqrlau3VU8f4BzoP+h6sOGQyqGSQ59/SvzpwWGfw001OjXlR7BHso+8OBpxtOtnu5/rjikeKzn2tZZfKzoecryzzrau7oTyiZ31cH1W/fjJmJO9pzxPtTQYNxxupDeWnAans06//CX2l8Ez/mc6ztqdbTinfa76PO18cRPUtKZpsjmhWdQS1dLX6tfa0ebYdv5Xk19rL6hfqLooe3HnJeKlwkuzl/MuT7UL2ieu8K4Md6zueHx1+dV7ncs6e675X7tx3fv61S63rss3nG5cuOlws/WW3a3m2za3m7qtu8//Zv3b+R6bnqY7tndaeu172/qW9F3qd+m/ctfz7vV7zHu3B5YO9A2GDz64H3Nf9IDzYOxhysM3j7IfzTzOf4J5UvyU+rT8mfKzmt/1f28U2YguDnkOdT8Pff54mD386o+MP76MFL6gvCgfVRutG7MYuzDuPd77csXLkVeCVzMTRX9K/Vn9Wu/1ub9c/+qeXD458kb4Zvbt9ncK72rfW73vmAqeevYh9cPMdPFHhY/HP9l96voc+Xl0JucL7kvFV/2vbd/8vz2ZTZ2dFbCErDktgEIsHB8PwNtaAChRiHboBYAoMa+H5yKgeQ2PsFjLz+n5/+R5zTwXbwNArSsA4fkABLQDcBCp2giTkVYsC8NcAWxpuVgRj7hkxFtazAFEFiLS5OPs7DsVAHBtAHwVzs7OHJid/XoU0e0PAWhPn9fh4mgsFYBSXVktWe6trar5c+O/M/8CArPqa05dv3oAAAAJcEhZcwAACxMAAAsTAQCanBgAAAekSURBVFgJpZhJiJRXEMff9Kgz4zaijg4q7orgQclBFL0k5KIGFI0bJIyec/CkEA+jhoSIBw+iiBCUUXDFfUHBgAaiePOgYQZBXHBfcJvM2l/n/6vuenzdduNIHrx+e9X/VdWrqq+rcrlcqFSqVLRepfXE9+zfv3/ymjVrJiRJUtvZ2TmopqambsCAAf1Y7+7u7lXp1LF/Nd919uzZJytWrPjHz6rNbN26NWzZskVkKzBmvkI1MIVz1ZcvX2569uzZHy9fvmzVXJ/K8+fPnz58+PDQhQsXfhKYeh2qxCvOx07J5oyPDxw48M39+/f/bm9vT4PI9vT09EpC2XKVNW2mWuno6Mi1trW27tmz59eFCxfW7Nixo+7YsWPVSEzSyqjl8obFOppIFzaYim7cuNE8c+bMn4cOHVqrOYj3vnjxolq3rjp37ly4e/duEDNUZeelulBXVxdmzJgRFi1aFMaPH58bPXp0VovQrO7q6gr37t1rv3Xr1g9S++mrV6/WXrt2rXvz5s3YTd52HFmhjZJ58uTJXhAUSo9AZA8ePJjMnj0bsH2qs2bNSjgjCSei06Oahd6jR4/+Wr58+Up1uWXkyTitsrjw7t27Fi1SMNJeGWcyf/78CKKxsTEZMWJEMnLkyLKVNUkm7p8zZ05y+vTpRKoEWBeEb9++/UEX+0rdgPpoqQ4o6jAlGbOR3bt3R8ITJkxIBg0alOgVxbly0mKdyt6JEyfGvTt37kxkcxFUW1vbnzpfAxBsyQBpAjAG6Pr1683qUwzM9u3bjdioUaNMEtxcdhIZlAOTnuvfv7+da2hoSKDB2rZt2xLZnaswJzv9TfwQDO6lio4h4zVJVR0am5527dplBCZNmpRAGKIQ5OYDBw78LCgZd1JdXW37OMtFXFpISuozexLP9kOHDs0TW8NiKhOjap42YFR60DfMx4wZY2CGDBliYzm5CMTn2FdaBw8eHOdWrVplffZzMZcUPOAFwwcPHlxRk8dCB6dX8DOJFrNz5841Ihx2yaxfvz7Rk08wcADIFVgtBwbVMn/ixInk9evXyYYNGz6hh6HDC0Dv37/PXblyZRVYDBUemAWVrpaWFjs8ZcoUe0kQ5pavXr3iRlZPnjxpe7g1wBwUkhk+fLiNjx49GvdLLUlTU5PNc0FXHbzgCeMChhD27ds3WeGgjcmnT59mp0+fbgdhhIgzmYyNz58/Hxloq90eIMOGDUsAxovCDTB35MiRor3SgM2zVltbG21w2rRpyTPxhLcw3JXPmoqn/ZoJlezNmzftoDxsNMi0ARf0Hpm5pPA5Y8eOtbNpyYhmcvHixQjGbYuH4X4KntpnYUYu4dsg21kIGuLPpk2b7DDEOeSqSKvm1KlTERAMGfs+ObiiNQVVW+OF1dfXx33sdzuDZyH25d68efNdkNF9DyCC5LJly+zQuHHjig5DABUCjH6ppI4fP54cPny4CIxLpl+/fqZWB+2tPxZ4whsMwrIyfPz48UcHtHjx4oqAHBQ2Q//MmTNFAEQjjh2McqKyYDjvgODpgPTamjISpyVX2hQkOpogdVlb+qMDIZvNBuk/LFmyJMiGbIvAuD8LZAFEer22IAMOb9++LSVTNFaojGPtz5AWfFFRphikBjvjaQcDQFF8ThcN7P3SkiHt9EN65tZ14j7vrV6J5TuPHz8mQofVq1fbEhKVe7C+0oogQw/yK0GhI8j2/HjZ1i/HIlgySpo6fKd07t1PWhl04NZykEFPOyiMxD2oCRBeli5daupEXVyuLKi8QEOap2Hpy7PHf/gzLXV6/rQF5hNDJ3Qwz0PgldL36vTSzx4sFR2je2iithMpdXoOBuIkbewrdQnuPFnDm9Pi4xpH5/cXHKM9e5z0p6FjWj50cJjQgR+BCLeV+GMllDCPJ8fp4aPcJZQ6Tw/I7McVuPcndBCuRJfQ0UoYKwquehXdyouMEdmhi5XgStR2QC4ZPLCDgFkl5/nhw4dk7dq1RpcMIh1c4QmgGFzVL0o/SOYXLFhgh3Fe7sA2btyYELUvXbpkawTJNBgAOSgPE0gRMM3NzRGM00ulHwmpDykQWNx/FCVoejUREFLwoOgpBIydqQNJt2kDdslAA1rlEjSSQ523RB9AZVNY0kyYIF4I+c2Yc4BpEKV9N2DmAQENVxW0+ZoR7xxpM+kz0gGL9ldO8knInaCrD6Nkri/VJNKQzzpdMtAsxC4DVPiwAExM8m1QQIiH3as+xb48XFIA4Ia8kHRqUgkYe9jrUmEftNJgCp9c8I8YfEBrqmNRQbRFLQXJ9uJbMEJnTnLFC/QPxYaRMn5VH7PmCRhn/EMRWtCEsFQFD+cfefuEt3Eh9cHI+R4ScnLgqVOnRmAOsFLLXs4Uknn7woBYiWQiTy3l/3UQwXTBsGAayv3ZoL9Y7M8G5UOhtbU18AeCLm7nCZTEJv5sID3xPxukPtKDKkm+886dO7/PmzfvFzuQ/xPCeBXG8VPaJeRtRP0//o4xD4xE8DM87dRrgk/kgWS8xo5PpFo+r6mAT/9hZV8omv9s4WsGD4zTg4YOwC/SLYyLMDjDKLF0R6K2w5qLYv3cX3qkEPLi7QrOncqzH6xbt+5eimYmTzJ/y9R87P4HkQsq2faR5dQAAAAASUVORK5CYII="),
-    INTERSTITIAL_CLOSE_BUTTON_PRESSED("iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAKfGlDQ1BJQ0MgUHJvZmlsZQAAeAHVlndUU8kex+fe9AaBQOgQeu8dpNdQBKmCqIQkhBpCqGJDRFzBtSAiAuqKrogouBbaWhBRLCwCCnY3yCKgrIsFUVF5N/BgPee9/e/98+ac+c3n/uY3v5k75ZwvAOROlkCQAlMBSOVnCkN83BnLo6IZuMeAAFQBFcgDOoudIXALDg4A/1g+DAJI3HnXWJzrH8P+e4cUh5vBBgAKRrrjOBnsVITPIfyNLRBmAgCLuTcnU4AwqhBhGSGyQIQrxMyb55Nijpvn9rmYsBAPJOYeAHgyiyXkAUASIX5GNpuH5CEjCMz4nEQ+wmYIO7MTWByEBQgbpaamibkaYb247/LwvmMWK24xJ4vFW+T5f0FGIhN7JmYIUlhr5j7+lyY1JQvZr7kijVgyP2VpANLSkTrGYXn6L7AgZe7M5vxcfnjogp8ftzRogeOF3iELLMh0/46Dwxb8eQkeSxeYm+G1mCeJ5Sc+s7n8wqyQ8AXOyA71WuC8hLDIBeZwPRf98YnezAV/YiZzca7kNP/FNYAwkACyAB9wABcIQRxIAykAOb1Mbi5iAfBIE6wRJvISMhluyK3jGjGYfLaJEcPCzNxc3P1/U8TvbX6x7+hz7wii3/rbl94OgH0x8ibEV/3fcSxNAFpfAED78LdP8y1yFXYBcLGXnSXMns+HFjcYQASSQAYoIO9ZE+gBY2ABbIAjcAVewA8EIbscBVYBNrLXqcgu54B1YBMoAiVgF9gLKsEhcAQcB6fAGdAMLoAr4Dq4DXrBAHgMRGAEvAKT4AOYgSAIB1EgGqQAqUHakCFkAdlBzpAXFACFQFFQLMSD+FAWtA7aDJVApVAldBiqg36BWqEr0E2oD3oIDUHj0FvoM4yCybAMrALrwKawHewG+8Nh8EqYB6fDeXAhvAOugGvgk3ATfAW+DQ/AIvgVPIUCKBKKjlJHGaPsUB6oIFQ0Kh4lRG1AFaPKUTWoBlQbqgt1FyVCTaA+obFoGpqBNkY7on3R4Wg2Oh29Ab0dXYk+jm5Cd6LvoofQk+hvGApGGWOIccAwMcsxPEwOpghTjjmGOY+5hhnAjGA+YLFYOlYXa4v1xUZhk7BrsduxB7CN2HZsH3YYO4XD4RRwhjgnXBCOhcvEFeH2407iLuP6cSO4j3gSXg1vgffGR+P5+AJ8Of4E/hK+Hz+KnyFQCdoEB0IQgUNYQ9hJOEpoI9whjBBmiFJEXaITMYyYRNxErCA2EK8RnxDfkUgkDZI9aRkpkZRPqiCdJt0gDZE+kaXJBmQPcgw5i7yDXEtuJz8kv6NQKDoUV0o0JZOyg1JHuUp5RvkoQZMwkWBKcCQ2SlRJNEn0S7yWJEhqS7pJrpLMkyyXPCt5R3KCSqDqUD2oLOoGahW1lXqfOiVFkzKXCpJKldoudULqptSYNE5aR9pLmiNdKH1E+qr0MA1F06R50Ni0zbSjtGu0ERmsjK4MUyZJpkTmlEyPzKSstKyVbIRsrmyV7EVZER1F16Ez6Sn0nfQz9EH6ZzkVOTc5rtw2uQa5frlpeSV5V3mufLF8o/yA/GcFhoKXQrLCboVmhaeKaEUDxWWKOYoHFa8pTijJKDkqsZWKlc4oPVKGlQ2UQ5TXKh9R7laeUlFV8VERqOxXuaoyoUpXdVVNUi1TvaQ6rkZTc1ZLVCtTu6z2kiHLcGOkMCoYnYxJdWV1X/Us9cPqPeozGroa4RoFGo0aTzWJmnaa8Zplmh2ak1pqWoFa67TqtR5pE7TttBO092l3aU/r6OpE6mzVadYZ05XXZerm6dbrPtGj6LnopevV6N3Tx+rb6SfrH9DvNYANrA0SDKoM7hjChjaGiYYHDPuMMEb2RnyjGqP7xmRjN+Ns43rjIRO6SYBJgUmzyWtTLdNo092mXabfzKzNUsyOmj02lzb3My8wbzN/a2FgwbaosrhnSbH0ttxo2WL5xsrQimt10OqBNc060HqrdYf1VxtbG6FNg824rZZtrG217X07Gbtgu+12N+wx9u72G+0v2H9ysHHIdDjj8JejsWOy4wnHsSW6S7hLji4ZdtJwYjkddhI5M5xjnX9yFrmou7Bcalyeu2q6clyPuY666bsluZ10e+1u5i50P+8+7eHgsd6j3RPl6eNZ7NnjJe0V7lXp9cxbw5vnXe896WPts9an3Rfj6++72/c+U4XJZtYxJ/1s/db7dfqT/UP9K/2fBxgECAPaAuFAv8A9gU+Wai/lL20OAkHMoD1BT4N1g9ODf12GXRa8rGrZixDzkHUhXaG00NWhJ0I/hLmH7Qx7HK4XnhXeESEZERNRFzEd6RlZGilabrp8/fLbUYpRiVEt0bjoiOhj0VMrvFbsXTESYx1TFDO4Undl7sqbqxRXpay6uFpyNWv12VhMbGTsidgvrCBWDWsqjhlXHTfJ9mDvY7/iuHLKOONcJ24pdzTeKb40foznxNvDG09wSShPmEj0SKxMfJPkm3QoaTo5KLk2eTYlMqUxFZ8am9rKl+Yn8zvTVNNy0/oEhoIigSjdIX1v+qTQX3gsA8pYmdGSKYMIm+4svawtWUPZztlV2R9zInLO5krl8nO71xis2bZmNM877+e16LXstR3r1NdtWje03m394Q3QhrgNHRs1NxZuHMn3yT++ibgpedNvBWYFpQXvN0dubitUKcwvHN7is6W+SKJIWHR/q+PWQz+gf0j8oWeb5bb9274Vc4pvlZiVlJd82c7efutH8x8rfpzdEb+jZ6fNzoO7sLv4uwZ3u+w+XipVmlc6vCdwT1MZo6y47P3e1XtvlluVH9pH3Je1T1QRUNGyX2v/rv1fKhMqB6rcqxqrlau3VU8f4BzoP+h6sOGQyqGSQ59/SvzpwWGfw001OjXlR7BHso+8OBpxtOtnu5/rjikeKzn2tZZfKzoecryzzrau7oTyiZ31cH1W/fjJmJO9pzxPtTQYNxxupDeWnAans06//CX2l8Ez/mc6ztqdbTinfa76PO18cRPUtKZpsjmhWdQS1dLX6tfa0ebYdv5Xk19rL6hfqLooe3HnJeKlwkuzl/MuT7UL2ieu8K4Md6zueHx1+dV7ncs6e675X7tx3fv61S63rss3nG5cuOlws/WW3a3m2za3m7qtu8//Zv3b+R6bnqY7tndaeu172/qW9F3qd+m/ctfz7vV7zHu3B5YO9A2GDz64H3Nf9IDzYOxhysM3j7IfzTzOf4J5UvyU+rT8mfKzmt/1f28U2YguDnkOdT8Pff54mD386o+MP76MFL6gvCgfVRutG7MYuzDuPd77csXLkVeCVzMTRX9K/Vn9Wu/1ub9c/+qeXD458kb4Zvbt9ncK72rfW73vmAqeevYh9cPMdPFHhY/HP9l96voc+Xl0JucL7kvFV/2vbd/8vz2ZTZ2dFbCErDktgEIsHB8PwNtaAChRiHboBYAoMa+H5yKgeQ2PsFjLz+n5/+R5zTwXbwNArSsA4fkABLQDcBCp2giTkVYsC8NcAWxpuVgRj7hkxFtazAFEFiLS5OPs7DsVAHBtAHwVzs7OHJid/XoU0e0PAWhPn9fh4mgsFYBSXVktWe6trar5c+O/M/8CArPqa05dv3oAAAAJcEhZcwAACxMAAAsTAQCanBgAAAkNSURBVFgJjZhbaFXZGcfX3vtEExMVL9E0NdZEvEQTH+oVGi+1oDNlsMVrKaVgH2zL0NJKUaiJxtTrQ7UwfajzUCkMXqEIRapTUh3RkMZL6ZjEeJkIE6OiTjQm5nrO2f3/1jnrGOJJMgv22Xuv9V3+3//71mUfLwxDM0Lz9u7d6+3Zsyfu5PReFI/Hv6UrS/rZvu9na8w3gekLo2Gn+ruDIGjr7OysP3LkSDd6mzdvDs6cOYONYR16wwGSY98B2blzZ/7o0aN/Imdz5Gy5nmd5nmfS6Qug6e7u7pXsvzT+n1gsduLgwYPNAJPNSGVlZUz9aYGlBSRHnpQsK9u3b8/Kycn5ULZ+mZmZWZSRkWF6e3u55C+OUQ9HrgFSVxiJRALJG4ExPT09rQriRwruqpMbGKzr454OEA4s+t27d5fK+McyvkwGARF98+ZN+OrVK//+/fv+ixcvTH9/v4lGo9am5MyoUaPMpEmTzOzZs8Px48fHs7OzjdiM9PX1GQXwWVZW1i6N123btq0/HajBgFJgFM0WefmzjE2W07hAxB8+fBjU1dWZJ0+eWAAj/UydmmeWLVtqCgsLYxMmTIhgPDsnx3R1df6xvHz379AfDCoFSExY6sltVVXVh4r6qKLNECv9Dx48CGqu1XhftnxpMQgk0aatHyugH8zBHi0/P98sX748FGtx1ZdtcqOY91Qxjm/88hyoVrjT6V+6dCkU4s3K+8eqFcBEb926FTl37pzX/rrdiG4LhBQBaKSLNKPT1tZmGhoaPD37eXl5IYik+90rV648WbVq1U18624BWYYcbbt27SqRkX+LmVwVYrS2tjaorq42FLJrgEkG47qGvMuRoa5o6KC7evVqpXFZXAUfiMEOAXtv3759NQ4DgGzdqGOUBqslWNbV1dV/48aNyIULFwxFqXdr2KVAAVp2hkSigYEyBMRsI9VaDszatWvN4sWLY1mZmZGe3t7bHR0dK44ePfpKap4vILZ2pLBN7JRpNsQ1gwLAMG0BQ6SAmTt3rsVAqkjHUI0xZGjouEBUAjawixcvmnv37gViLKZslI4bN84VuBdQN1r0xoraYwKQq6kcExhfqG2UREp0isisWbPGFBQUUA8WJGOD0+eA0r9x40azdOlSC66lpcWCITjAvnz50sycOTOuNc4X4ILz58///cCBA+0+UQjIT0XrPNEZY2q3trYaobaKjpmVK1favuLiYrNp0yY7NpgpB4YANmzYYObNm2fGjh1rVqxYYUpKSlJMUeiPHz82zc3NARNH74Vjxoz5MVgsIBleQnq098Rramps9OQaw7Smpibz6NGjFIj58+dbULDABRAuokdn/fr1BhlaqMWcAO/cuWPfGe/r7bPPV69eNSy0yUlTQmcgIzz8QYLZz549865du+aJRrs94Mylpb6+3kyZMsVMnTLVGuM5NzfXpo+ZBCDYBAxsoMfVdLfJnDhxIgUcVrHLii4CYBF/TK4JWgb+6auwpomdKSrmmJiwBY5HlGguLRjXbm0aGlU/yX5Y0C5ugVCwpAkwNNiClZMnT9p3QDvG6XD28YlvzcACYcn3NTApOeixN6VrGMLBW1CNJhBAGnVC8bo0IQNbpPnUqVNWBjCsQekaPgmapnsWVr8JIC43Pe3ooJ90oACJMVhZsGCB1aAPMAOZGQoMCkmfNjPSHeML/fgkQ0NG4bA5UBQh6bt9+7aYCmwqGIOZxsZGC4bn4ZgZaNM9y24GDCX4cr1f4w4LNECI25QGgdFHI3Uu0JTACA9i24tIqc05IKLhGlEjy9mGAqaoSZnTA4ybYTDo6smBTGcbmwNajy/hxzjhSq4HA8bfPjpF6sGBcQ5JE8uCk6HQh1o831pMPCV9hviX7a6IHr5KAgonT57s3b17d7BOyhGRutmEEHoU8OnTp60O7/MFJibW3MJ49uxZmzrApmNKPmHSY0wyXb7m/0MdNb7QQhVoI0ycSWQY4zRYQJjLrTOOGbfO4IxIE+vU2yUBUI4p9NFzzdmXz7gwsJ99rnuzX15e/oWEq9lfdAaOgZgVFGWUqBEaa42Lmn7A2HVGuJ0cOg4UOuiis2ULp+HEO7IEQB1OnDgRn5yNCLhW57EWC1kCdYDQ2SdSVlamOk8s7a5YOUIUFhba4sVpCoycRILEoieDFpgDRV3xzIVuaWmpBQWTbBs0+cKnrwwBsp4+C0isfKJo/qcd15sxY0Z8+vTp9iBFNBigTpIbIeeYIVfgwaDQ4zyl/dGuWckCtrbzv5FvioqKYspMILaadH0CIDZXf8eOHdHLly+HAvWBBDj7hpo1GkqkjDvnmdevXxudn2yRDrXowS6scGfmtbe3m+vXr6f6cEoq3//++5ytKFQK+qP9+/df5BibOsJu3bo1c9q0aZ8pn0s4o+hzJ+BkR22xcZJ3t7XwDBvDNUDhmAYzyKtoU0fYJTrCjtYRVszUy37ZoUOH2iXqkTK+NPzjx4/3SGkHYOQwsnDhwvhqHcg5F2GchmGeRwKDLGBglnrhjh62sIntSEZGRL56tfb8GjBgkFpovzqkYOc41ayBKhmpEPK4rvDmzZs+TNFgS31fCxDyMAkggNA43C9atCimwNyW8Ft9m/1JQxYC/i0gK61O3e06JFB/kdLPWZV1RVXIvg5PnvtixYl0k2rpb8QIeJr7UJw1axaH+gwYFoMV+iDdl9RO+U7kItFrU8ejUP9CbP5eWN6opiI6R/taS2Lr1q0LWTtwRD0NdyGDrHQ4xMVkw9MszpDOVwrmZw6MS1US2Lt/NiAgQLYatVB9W7TvV7TvkS6o13rVr5kTaIvxnj9/bkG5miJF1BmL65w5c4y+56MC4eviMA8rVxTkrzSjPk8CSDEzJCAnKGD27xiSW1lZ+QMZ+43GvqOviAjA5IBp5mrP3iXqth7+jvEVBMdTGG3Q2EdPnz7967Fjx+y/HrJJybyT94E15ECm7sl/vVLzu6KiYqNsfE9M/FDO8hStrSVmFE1O7WyCKVZfMfcPza5PBf5vhw8f7kBmYAZ4H9yGBZQU9hxbTlnf4sVyOFtAisXEEgHhZM+neKtA1KpO/qsviWb13VD6bWUngcDIO6w4u9z/D0aZ6sEzTu2gAAAAAElFTkSuQmCC");
+    INTERSTITIAL_CLOSE_BUTTON_PRESSED("iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAKfGlDQ1BJQ0MgUHJvZmlsZQAAeAHVlndUU8kex+fe9AaBQOgQeu8dpNdQBKmCqIQkhBpCqGJDRFzBtSAiAuqKrogouBbaWhBRLCwCCnY3yCKgrIsFUVF5N/BgPee9/e/98+ac+c3n/uY3v5k75ZwvAOROlkCQAlMBSOVnCkN83BnLo6IZuMeAAFQBFcgDOoudIXALDg4A/1g+DAJI3HnXWJzrH8P+e4cUh5vBBgAKRrrjOBnsVITPIfyNLRBmAgCLuTcnU4AwqhBhGSGyQIQrxMyb55Nijpvn9rmYsBAPJOYeAHgyiyXkAUASIX5GNpuH5CEjCMz4nEQ+wmYIO7MTWByEBQgbpaamibkaYb247/LwvmMWK24xJ4vFW+T5f0FGIhN7JmYIUlhr5j7+lyY1JQvZr7kijVgyP2VpANLSkTrGYXn6L7AgZe7M5vxcfnjogp8ftzRogeOF3iELLMh0/46Dwxb8eQkeSxeYm+G1mCeJ5Sc+s7n8wqyQ8AXOyA71WuC8hLDIBeZwPRf98YnezAV/YiZzca7kNP/FNYAwkACyAB9wABcIQRxIAykAOb1Mbi5iAfBIE6wRJvISMhluyK3jGjGYfLaJEcPCzNxc3P1/U8TvbX6x7+hz7wii3/rbl94OgH0x8ibEV/3fcSxNAFpfAED78LdP8y1yFXYBcLGXnSXMns+HFjcYQASSQAYoIO9ZE+gBY2ABbIAjcAVewA8EIbscBVYBNrLXqcgu54B1YBMoAiVgF9gLKsEhcAQcB6fAGdAMLoAr4Dq4DXrBAHgMRGAEvAKT4AOYgSAIB1EgGqQAqUHakCFkAdlBzpAXFACFQFFQLMSD+FAWtA7aDJVApVAldBiqg36BWqEr0E2oD3oIDUHj0FvoM4yCybAMrALrwKawHewG+8Nh8EqYB6fDeXAhvAOugGvgk3ATfAW+DQ/AIvgVPIUCKBKKjlJHGaPsUB6oIFQ0Kh4lRG1AFaPKUTWoBlQbqgt1FyVCTaA+obFoGpqBNkY7on3R4Wg2Oh29Ab0dXYk+jm5Cd6LvoofQk+hvGApGGWOIccAwMcsxPEwOpghTjjmGOY+5hhnAjGA+YLFYOlYXa4v1xUZhk7BrsduxB7CN2HZsH3YYO4XD4RRwhjgnXBCOhcvEFeH2407iLuP6cSO4j3gSXg1vgffGR+P5+AJ8Of4E/hK+Hz+KnyFQCdoEB0IQgUNYQ9hJOEpoI9whjBBmiFJEXaITMYyYRNxErCA2EK8RnxDfkUgkDZI9aRkpkZRPqiCdJt0gDZE+kaXJBmQPcgw5i7yDXEtuJz8kv6NQKDoUV0o0JZOyg1JHuUp5RvkoQZMwkWBKcCQ2SlRJNEn0S7yWJEhqS7pJrpLMkyyXPCt5R3KCSqDqUD2oLOoGahW1lXqfOiVFkzKXCpJKldoudULqptSYNE5aR9pLmiNdKH1E+qr0MA1F06R50Ni0zbSjtGu0ERmsjK4MUyZJpkTmlEyPzKSstKyVbIRsrmyV7EVZER1F16Ez6Sn0nfQz9EH6ZzkVOTc5rtw2uQa5frlpeSV5V3mufLF8o/yA/GcFhoKXQrLCboVmhaeKaEUDxWWKOYoHFa8pTijJKDkqsZWKlc4oPVKGlQ2UQ5TXKh9R7laeUlFV8VERqOxXuaoyoUpXdVVNUi1TvaQ6rkZTc1ZLVCtTu6z2kiHLcGOkMCoYnYxJdWV1X/Us9cPqPeozGroa4RoFGo0aTzWJmnaa8Zplmh2ak1pqWoFa67TqtR5pE7TttBO092l3aU/r6OpE6mzVadYZ05XXZerm6dbrPtGj6LnopevV6N3Tx+rb6SfrH9DvNYANrA0SDKoM7hjChjaGiYYHDPuMMEb2RnyjGqP7xmRjN+Ns43rjIRO6SYBJgUmzyWtTLdNo092mXabfzKzNUsyOmj02lzb3My8wbzN/a2FgwbaosrhnSbH0ttxo2WL5xsrQimt10OqBNc060HqrdYf1VxtbG6FNg824rZZtrG217X07Gbtgu+12N+wx9u72G+0v2H9ysHHIdDjj8JejsWOy4wnHsSW6S7hLji4ZdtJwYjkddhI5M5xjnX9yFrmou7Bcalyeu2q6clyPuY666bsluZ10e+1u5i50P+8+7eHgsd6j3RPl6eNZ7NnjJe0V7lXp9cxbw5vnXe896WPts9an3Rfj6++72/c+U4XJZtYxJ/1s/db7dfqT/UP9K/2fBxgECAPaAuFAv8A9gU+Wai/lL20OAkHMoD1BT4N1g9ODf12GXRa8rGrZixDzkHUhXaG00NWhJ0I/hLmH7Qx7HK4XnhXeESEZERNRFzEd6RlZGilabrp8/fLbUYpRiVEt0bjoiOhj0VMrvFbsXTESYx1TFDO4Undl7sqbqxRXpay6uFpyNWv12VhMbGTsidgvrCBWDWsqjhlXHTfJ9mDvY7/iuHLKOONcJ24pdzTeKb40foznxNvDG09wSShPmEj0SKxMfJPkm3QoaTo5KLk2eTYlMqUxFZ8am9rKl+Yn8zvTVNNy0/oEhoIigSjdIX1v+qTQX3gsA8pYmdGSKYMIm+4svawtWUPZztlV2R9zInLO5krl8nO71xis2bZmNM877+e16LXstR3r1NdtWje03m394Q3QhrgNHRs1NxZuHMn3yT++ibgpedNvBWYFpQXvN0dubitUKcwvHN7is6W+SKJIWHR/q+PWQz+gf0j8oWeb5bb9274Vc4pvlZiVlJd82c7efutH8x8rfpzdEb+jZ6fNzoO7sLv4uwZ3u+w+XipVmlc6vCdwT1MZo6y47P3e1XtvlluVH9pH3Je1T1QRUNGyX2v/rv1fKhMqB6rcqxqrlau3VU8f4BzoP+h6sOGQyqGSQ59/SvzpwWGfw001OjXlR7BHso+8OBpxtOtnu5/rjikeKzn2tZZfKzoecryzzrau7oTyiZ31cH1W/fjJmJO9pzxPtTQYNxxupDeWnAans06//CX2l8Ez/mc6ztqdbTinfa76PO18cRPUtKZpsjmhWdQS1dLX6tfa0ebYdv5Xk19rL6hfqLooe3HnJeKlwkuzl/MuT7UL2ieu8K4Md6zueHx1+dV7ncs6e675X7tx3fv61S63rss3nG5cuOlws/WW3a3m2za3m7qtu8//Zv3b+R6bnqY7tndaeu172/qW9F3qd+m/ctfz7vV7zHu3B5YO9A2GDz64H3Nf9IDzYOxhysM3j7IfzTzOf4J5UvyU+rT8mfKzmt/1f28U2YguDnkOdT8Pff54mD386o+MP76MFL6gvCgfVRutG7MYuzDuPd77csXLkVeCVzMTRX9K/Vn9Wu/1ub9c/+qeXD458kb4Zvbt9ncK72rfW73vmAqeevYh9cPMdPFHhY/HP9l96voc+Xl0JucL7kvFV/2vbd/8vz2ZTZ2dFbCErDktgEIsHB8PwNtaAChRiHboBYAoMa+H5yKgeQ2PsFjLz+n5/+R5zTwXbwNArSsA4fkABLQDcBCp2giTkVYsC8NcAWxpuVgRj7hkxFtazAFEFiLS5OPs7DsVAHBtAHwVzs7OHJid/XoU0e0PAWhPn9fh4mgsFYBSXVktWe6trar5c+O/M/8CArPqa05dv3oAAAAJcEhZcwAACxMAAAsTAQCanBgAAAkNSURBVFgJjZhbaFXZGcfX3vtEExMVL9E0NdZEvEQTH+oVGi+1oDNlsMVrKaVgH2zL0NJKUaiJxtTrQ7UwfajzUCkMXqEIRapTUh3RkMZL6ZjEeJkIE6OiTjQm5nrO2f3/1jnrGOJJMgv22Xuv9V3+3//71mUfLwxDM0Lz9u7d6+3Zsyfu5PReFI/Hv6UrS/rZvu9na8w3gekLo2Gn+ruDIGjr7OysP3LkSDd6mzdvDs6cOYONYR16wwGSY98B2blzZ/7o0aN/Imdz5Gy5nmd5nmfS6Qug6e7u7pXsvzT+n1gsduLgwYPNAJPNSGVlZUz9aYGlBSRHnpQsK9u3b8/Kycn5ULZ+mZmZWZSRkWF6e3u55C+OUQ9HrgFSVxiJRALJG4ExPT09rQriRwruqpMbGKzr454OEA4s+t27d5fK+McyvkwGARF98+ZN+OrVK//+/fv+ixcvTH9/v4lGo9am5MyoUaPMpEmTzOzZs8Px48fHs7OzjdiM9PX1GQXwWVZW1i6N123btq0/HajBgFJgFM0WefmzjE2W07hAxB8+fBjU1dWZJ0+eWAAj/UydmmeWLVtqCgsLYxMmTIhgPDsnx3R1df6xvHz379AfDCoFSExY6sltVVXVh4r6qKLNECv9Dx48CGqu1XhftnxpMQgk0aatHyugH8zBHi0/P98sX748FGtx1ZdtcqOY91Qxjm/88hyoVrjT6V+6dCkU4s3K+8eqFcBEb926FTl37pzX/rrdiG4LhBQBaKSLNKPT1tZmGhoaPD37eXl5IYik+90rV648WbVq1U18624BWYYcbbt27SqRkX+LmVwVYrS2tjaorq42FLJrgEkG47qGvMuRoa5o6KC7evVqpXFZXAUfiMEOAXtv3759NQ4DgGzdqGOUBqslWNbV1dV/48aNyIULFwxFqXdr2KVAAVp2hkSigYEyBMRsI9VaDszatWvN4sWLY1mZmZGe3t7bHR0dK44ePfpKap4vILZ2pLBN7JRpNsQ1gwLAMG0BQ6SAmTt3rsVAqkjHUI0xZGjouEBUAjawixcvmnv37gViLKZslI4bN84VuBdQN1r0xoraYwKQq6kcExhfqG2UREp0isisWbPGFBQUUA8WJGOD0+eA0r9x40azdOlSC66lpcWCITjAvnz50sycOTOuNc4X4ILz58///cCBA+0+UQjIT0XrPNEZY2q3trYaobaKjpmVK1favuLiYrNp0yY7NpgpB4YANmzYYObNm2fGjh1rVqxYYUpKSlJMUeiPHz82zc3NARNH74Vjxoz5MVgsIBleQnq098Rramps9OQaw7Smpibz6NGjFIj58+dbULDABRAuokdn/fr1BhlaqMWcAO/cuWPfGe/r7bPPV69eNSy0yUlTQmcgIzz8QYLZz549865du+aJRrs94Mylpb6+3kyZMsVMnTLVGuM5NzfXpo+ZBCDYBAxsoMfVdLfJnDhxIgUcVrHLii4CYBF/TK4JWgb+6auwpomdKSrmmJiwBY5HlGguLRjXbm0aGlU/yX5Y0C5ugVCwpAkwNNiClZMnT9p3QDvG6XD28YlvzcACYcn3NTApOeixN6VrGMLBW1CNJhBAGnVC8bo0IQNbpPnUqVNWBjCsQekaPgmapnsWVr8JIC43Pe3ooJ90oACJMVhZsGCB1aAPMAOZGQoMCkmfNjPSHeML/fgkQ0NG4bA5UBQh6bt9+7aYCmwqGIOZxsZGC4bn4ZgZaNM9y24GDCX4cr1f4w4LNECI25QGgdFHI3Uu0JTACA9i24tIqc05IKLhGlEjy9mGAqaoSZnTA4ybYTDo6smBTGcbmwNajy/hxzjhSq4HA8bfPjpF6sGBcQ5JE8uCk6HQh1o831pMPCV9hviX7a6IHr5KAgonT57s3b17d7BOyhGRutmEEHoU8OnTp60O7/MFJibW3MJ49uxZmzrApmNKPmHSY0wyXb7m/0MdNb7QQhVoI0ycSWQY4zRYQJjLrTOOGbfO4IxIE+vU2yUBUI4p9NFzzdmXz7gwsJ99rnuzX15e/oWEq9lfdAaOgZgVFGWUqBEaa42Lmn7A2HVGuJ0cOg4UOuiis2ULp+HEO7IEQB1OnDgRn5yNCLhW57EWC1kCdYDQ2SdSVlamOk8s7a5YOUIUFhba4sVpCoycRILEoieDFpgDRV3xzIVuaWmpBQWTbBs0+cKnrwwBsp4+C0isfKJo/qcd15sxY0Z8+vTp9iBFNBigTpIbIeeYIVfgwaDQ4zyl/dGuWckCtrbzv5FvioqKYspMILaadH0CIDZXf8eOHdHLly+HAvWBBDj7hpo1GkqkjDvnmdevXxudn2yRDrXowS6scGfmtbe3m+vXr6f6cEoq3//++5ytKFQK+qP9+/df5BibOsJu3bo1c9q0aZ8pn0s4o+hzJ+BkR22xcZJ3t7XwDBvDNUDhmAYzyKtoU0fYJTrCjtYRVszUy37ZoUOH2iXqkTK+NPzjx4/3SGkHYOQwsnDhwvhqHcg5F2GchmGeRwKDLGBglnrhjh62sIntSEZGRL56tfb8GjBgkFpovzqkYOc41ayBKhmpEPK4rvDmzZs+TNFgS31fCxDyMAkggNA43C9atCimwNyW8Ft9m/1JQxYC/i0gK61O3e06JFB/kdLPWZV1RVXIvg5PnvtixYl0k2rpb8QIeJr7UJw1axaH+gwYFoMV+iDdl9RO+U7kItFrU8ejUP9CbP5eWN6opiI6R/taS2Lr1q0LWTtwRD0NdyGDrHQ4xMVkw9MszpDOVwrmZw6MS1US2Lt/NiAgQLYatVB9W7TvV7TvkS6o13rVr5kTaIvxnj9/bkG5miJF1BmL65w5c4y+56MC4eviMA8rVxTkrzSjPk8CSDEzJCAnKGD27xiSW1lZ+QMZ+43GvqOviAjA5IBp5mrP3iXqth7+jvEVBMdTGG3Q2EdPnz7967Fjx+y/HrJJybyT94E15ECm7sl/vVLzu6KiYqNsfE9M/FDO8hStrSVmFE1O7WyCKVZfMfcPza5PBf5vhw8f7kBmYAZ4H9yGBZQU9hxbTlnf4sVyOFtAisXEEgHhZM+neKtA1KpO/qsviWb13VD6bWUngcDIO6w4u9z/D0aZ6sEzTu2gAAAAAElFTkSuQmCC"),
+
+    THATCHED_BACKGROUND("");
 
     private final String encodedString;
     private BitmapDrawable cachedImage;
 
-    private Drawables(String encodedString) {
+    private Drawables(final String encodedString) {
         this.encodedString = encodedString;
     }
 
@@ -75,4 +75,8 @@ public Drawable decodeImage(final Context context) {
 
         return cachedImage;
     }
+
+    public void clear() {
+        cachedImage = null;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/IntentUtils.java b/mopub-sdk/src/main/java/com/mopub/common/util/IntentUtils.java
index f9827e40..eb37cc9c 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/IntentUtils.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/IntentUtils.java
@@ -1,14 +1,18 @@
 package com.mopub.common.util;
 
+import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
 import android.net.Uri;
+import android.os.Bundle;
 import android.util.Log;
 
 import java.util.List;
 
+import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
+
 public class IntentUtils {
     private static final String TWITTER_APPLICATION_DEEPLINK_URL = "twitter://timeline";
     private static final String PLAY_GOOGLE_COM = "play.google.com";
@@ -19,6 +23,25 @@
 
     private IntentUtils() {}
 
+    /**
+     * Adding FLAG_ACTIVITY_NEW_TASK with startActivityForResult will always result in a
+     * RESULT_CANCELED, so don't use it for Activity contexts.
+     */
+    public static Intent getStartActivityIntent(final Context context, final Class clazz, final Bundle extras) {
+        final Intent intent = new Intent(context, clazz);
+
+        if (!(context instanceof Activity)) {
+            intent.addFlags(FLAG_ACTIVITY_NEW_TASK);
+        }
+
+        if (extras != null) {
+            intent.putExtras(extras);
+        }
+
+        return intent;
+    }
+
+
     public static boolean deviceCanHandleIntent(final Context context, final Intent intent) {
         try {
             final PackageManager packageManager = context.getPackageManager();
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Json.java b/mopub-sdk/src/main/java/com/mopub/common/util/Json.java
similarity index 80%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/util/Json.java
rename to mopub-sdk/src/main/java/com/mopub/common/util/Json.java
index ba253aad..ed7075d1 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Json.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Json.java
@@ -30,14 +30,16 @@
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-package com.mopub.mobileads.util;
+package com.mopub.common.util;
 
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 import org.json.JSONTokener;
 
-import java.util.*;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
 
 public class Json {
     public static Map<String, String> jsonStringToMap(String jsonParams) throws Exception {
@@ -99,4 +101,20 @@ public static String mapToJsonString(Map<String, String> map) {
         }
     }
 
+    public static <T> T getJsonValue(final JSONObject jsonObject, final String key, final Class<T> valueClass) {
+        if (jsonObject == null || key == null || valueClass == null) {
+            throw new IllegalArgumentException("Cannot pass any null argument to getJsonValue");
+        }
+
+        final Object object = jsonObject.opt(key);
+        if (object == null) {
+            MoPubLog.w("Tried to get Json value with key: " + key + ", but it was null");
+            return null;
+        } else if (!valueClass.isInstance(object)) {
+            MoPubLog.w("Tried to get Json value with key: " + key + ", of type: " + valueClass.toString() + ", its type did not match");
+            return null;
+        }
+
+        return valueClass.cast(object);
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java b/mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java
new file mode 100644
index 00000000..cf4771bb
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java
@@ -0,0 +1,119 @@
+package com.mopub.common.util;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.ApplicationInfo;
+import android.view.Gravity;
+import android.widget.Toast;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class ManifestUtils {
+    private ManifestUtils() {}
+
+    private static final List<Class<? extends Activity>> REQUIRED_WEB_VIEW_SDK_ACTIVITIES;
+    static {
+        REQUIRED_WEB_VIEW_SDK_ACTIVITIES = new ArrayList<Class<? extends Activity>>(4);
+        // As a convenience, full class paths are provided here, in case the MoPub SDK was imported
+        // incorrectly and these files were left out.
+        REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(com.mopub.mobileads.MoPubActivity.class);
+        REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(com.mopub.mobileads.MraidActivity.class);
+        REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(com.mopub.mobileads.MraidVideoPlayerActivity.class);
+        REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(com.mopub.common.MoPubBrowser.class);
+    }
+
+    private static final List<Class<? extends Activity>> REQUIRED_NATIVE_SDK_ACTIVITIES;
+    static {
+        REQUIRED_NATIVE_SDK_ACTIVITIES = new ArrayList<Class<? extends Activity>>(1);
+        REQUIRED_NATIVE_SDK_ACTIVITIES.add(com.mopub.common.MoPubBrowser.class);
+    }
+
+    public static void checkWebViewActivitiesDeclared(final Context context) {
+        displayWarningForMissingActivities(context, REQUIRED_WEB_VIEW_SDK_ACTIVITIES);
+    }
+
+    public static void checkNativeActivitiesDeclared(final Context context) {
+        displayWarningForMissingActivities(context, REQUIRED_NATIVE_SDK_ACTIVITIES);
+    }
+
+    /**
+     * This method is intended to display a warning to developers when they have accidentally
+     * omitted Activity declarations in their application's AndroidManifest. This class maintains
+     * two different lists of required Activity permissions, for the WebView and Native SDKs.
+     * Calling this when there are inadequate permissions will always Log a warning to the
+     * developer, and if the the application is debuggable, it will also display a Toast.
+     */
+    static void displayWarningForMissingActivities(final Context context,
+            final List<Class<? extends Activity>> requiredActivities) {
+        if (context == null) {
+            return;
+        }
+
+        final List<String> undeclaredActivities = getUndeclaredActivities(context, requiredActivities);
+
+        if (undeclaredActivities.isEmpty()) {
+            return;
+        }
+
+        // If the application is debuggable, display a loud toast
+        if (isDebuggable(context)) {
+            final String message =  "ERROR: YOUR MOPUB INTEGRATION IS INCOMPLETE.\n" +
+                    "Check logcat and update your AndroidManifest.xml with the correct activities.";
+            final Toast toast = Toast.makeText(context, message, Toast.LENGTH_LONG);
+            toast.setGravity(Gravity.FILL_HORIZONTAL, 0, 0);
+            toast.show();
+        }
+
+        // Regardless, log a warning
+        logMissingActivities(undeclaredActivities);
+    }
+
+    static boolean isDebuggable(final Context context) {
+        if (context == null || context.getApplicationInfo() == null) {
+            return false;
+        }
+
+        final int applicationFlags = context.getApplicationInfo().flags;
+
+        return Utils.bitMaskContainsFlag(applicationFlags, ApplicationInfo.FLAG_DEBUGGABLE);
+    }
+
+    private static List<String> getUndeclaredActivities(final Context context,
+            List<Class<? extends Activity>> requiredActivities) {
+        final List<String> undeclaredActivities = new ArrayList<String>();
+
+        for (final Class<? extends Activity> activityClass : requiredActivities) {
+            final Intent intent = new Intent(context, activityClass);
+
+            if (!IntentUtils.deviceCanHandleIntent(context, intent)) {
+                undeclaredActivities.add(activityClass.getName());
+            }
+        }
+
+        return undeclaredActivities;
+    }
+
+    private static void logMissingActivities(final List<String> undeclaredActivities) {
+        final StringBuilder stringBuilder =
+                new StringBuilder("AndroidManifest permissions for the following required MoPub activities are missing:\n");
+
+        for (final String activity : undeclaredActivities) {
+            stringBuilder.append("\n\t").append(activity);
+        }
+        stringBuilder.append("\n\nPlease update your manifest to include them.");
+
+        MoPubLog.w(stringBuilder.toString());
+    }
+
+    @Deprecated // for testing
+    static List<Class<? extends Activity>> getRequiredWebViewSdkActivities() {
+        return REQUIRED_WEB_VIEW_SDK_ACTIVITIES;
+    }
+
+    @Deprecated // for testing
+    static List<Class<? extends Activity>> getRequiredNativeSdkActivities() {
+        return REQUIRED_NATIVE_SDK_ACTIVITIES;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/MoPubLog.java b/mopub-sdk/src/main/java/com/mopub/common/util/MoPubLog.java
new file mode 100644
index 00000000..98d489a0
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/MoPubLog.java
@@ -0,0 +1,31 @@
+package com.mopub.common.util;
+
+import android.util.Log;
+
+public class MoPubLog {
+    private static final String LOGTAG = "MoPub";
+
+    public static int d(final String message) {
+        return MoPubLog.d(message, null);
+    }
+
+    public static int d(final String message, final Throwable throwable) {
+        return Log.d(LOGTAG, message, throwable);
+    }
+
+    public static int w(final String message) {
+        return MoPubLog.w(message, null);
+    }
+
+    public static int w(final String message, final Throwable throwable) {
+        return Log.w(LOGTAG, message, throwable);
+    }
+
+    public static int e(final String message) {
+        return MoPubLog.e(message, null);
+    }
+
+    public static int e(final String message, final Throwable throwable) {
+        return Log.e(LOGTAG, message, throwable);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Numbers.java b/mopub-sdk/src/main/java/com/mopub/common/util/Numbers.java
new file mode 100644
index 00000000..773d49c3
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Numbers.java
@@ -0,0 +1,19 @@
+package com.mopub.common.util;
+
+public class Numbers {
+    private Numbers() {}
+
+    public static Double parseDouble(final Object value) throws ClassCastException {
+        if (value instanceof Number) {
+            return ((Number) value).doubleValue();
+        } else if (value instanceof String) {
+            try {
+                return Double.valueOf((String) value);
+            } catch (NumberFormatException e) {
+                throw new ClassCastException("Unable to parse " + value + " as double.");
+            }
+        } else {
+            throw new ClassCastException("Unable to parse " + value + " as double.");
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/ResponseHeader.java b/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java
similarity index 98%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/util/ResponseHeader.java
rename to mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java
index 1f1f5db8..2fe65112 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/ResponseHeader.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java
@@ -30,7 +30,7 @@
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-package com.mopub.mobileads.util;
+package com.mopub.common.util;
 
 public enum ResponseHeader {
     AD_TIMEOUT("X-AdTimeout"),
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Utils.java b/mopub-sdk/src/main/java/com/mopub/common/util/Utils.java
index 1da67880..ae829979 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Utils.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Utils.java
@@ -42,4 +42,8 @@ public static long generateUniqueId() {
             }
         }
     }
+
+    public static boolean bitMaskContainsFlag(final int bitMask, final int flag) {
+        return (bitMask & flag) != 0;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java
index 29fce172..71fb2e41 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java
@@ -51,17 +51,17 @@
 import static com.mopub.mobileads.util.HttpResponses.extractHeader;
 import static com.mopub.mobileads.util.HttpResponses.extractIntHeader;
 import static com.mopub.mobileads.util.HttpResponses.extractIntegerHeader;
-import static com.mopub.mobileads.util.ResponseHeader.AD_TIMEOUT;
-import static com.mopub.mobileads.util.ResponseHeader.AD_TYPE;
-import static com.mopub.mobileads.util.ResponseHeader.CLICKTHROUGH_URL;
-import static com.mopub.mobileads.util.ResponseHeader.DSP_CREATIVE_ID;
-import static com.mopub.mobileads.util.ResponseHeader.FAIL_URL;
-import static com.mopub.mobileads.util.ResponseHeader.HEIGHT;
-import static com.mopub.mobileads.util.ResponseHeader.IMPRESSION_URL;
-import static com.mopub.mobileads.util.ResponseHeader.NETWORK_TYPE;
-import static com.mopub.mobileads.util.ResponseHeader.REDIRECT_URL;
-import static com.mopub.mobileads.util.ResponseHeader.REFRESH_TIME;
-import static com.mopub.mobileads.util.ResponseHeader.WIDTH;
+import static com.mopub.common.util.ResponseHeader.AD_TIMEOUT;
+import static com.mopub.common.util.ResponseHeader.AD_TYPE;
+import static com.mopub.common.util.ResponseHeader.CLICKTHROUGH_URL;
+import static com.mopub.common.util.ResponseHeader.DSP_CREATIVE_ID;
+import static com.mopub.common.util.ResponseHeader.FAIL_URL;
+import static com.mopub.common.util.ResponseHeader.HEIGHT;
+import static com.mopub.common.util.ResponseHeader.IMPRESSION_URL;
+import static com.mopub.common.util.ResponseHeader.NETWORK_TYPE;
+import static com.mopub.common.util.ResponseHeader.REDIRECT_URL;
+import static com.mopub.common.util.ResponseHeader.REFRESH_TIME;
+import static com.mopub.common.util.ResponseHeader.WIDTH;
 
 public class AdConfiguration implements Serializable {
     private static final long serialVersionUID = 0L;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
index 0077f8f3..e4893cbf 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
@@ -42,9 +42,9 @@
 import org.apache.http.conn.ClientConnectionManager;
 
 import static com.mopub.mobileads.util.HttpResponses.extractHeader;
-import static com.mopub.mobileads.util.ResponseHeader.AD_TYPE;
-import static com.mopub.mobileads.util.ResponseHeader.USER_AGENT;
-import static com.mopub.mobileads.util.ResponseHeader.WARMUP;
+import static com.mopub.common.util.ResponseHeader.AD_TYPE;
+import static com.mopub.common.util.ResponseHeader.USER_AGENT;
+import static com.mopub.common.util.ResponseHeader.WARMUP;
 
 public class AdFetchTask extends AsyncTask<String, Void, AdLoadTask> {
     private TaskTracker mTaskTracker;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
index 3dcb0c3a..e01e7430 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
@@ -36,33 +36,34 @@
 import android.net.Uri;
 import android.util.Log;
 
+import com.mopub.common.util.Json;
 import com.mopub.common.util.Strings;
-import com.mopub.mobileads.util.Json;
 
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 
-import java.io.*;
+import java.io.IOException;
 import java.lang.ref.WeakReference;
 import java.lang.reflect.Method;
-import java.util.*;
-
+import java.util.HashMap;
+import java.util.Map;
+
+import static com.mopub.common.util.ResponseHeader.AD_TYPE;
+import static com.mopub.common.util.ResponseHeader.CLICKTHROUGH_URL;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_SELECTOR;
+import static com.mopub.common.util.ResponseHeader.FULL_AD_TYPE;
+import static com.mopub.common.util.ResponseHeader.NATIVE_PARAMS;
+import static com.mopub.common.util.ResponseHeader.REDIRECT_URL;
+import static com.mopub.common.util.ResponseHeader.SCROLLABLE;
 import static com.mopub.mobileads.AdFetcher.CLICKTHROUGH_URL_KEY;
 import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
 import static com.mopub.mobileads.AdFetcher.SCROLLABLE_KEY;
 import static com.mopub.mobileads.util.HttpResponses.extractBooleanHeader;
 import static com.mopub.mobileads.util.HttpResponses.extractHeader;
-import static com.mopub.mobileads.util.ResponseHeader.AD_TYPE;
-import static com.mopub.mobileads.util.ResponseHeader.CLICKTHROUGH_URL;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_NAME;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_SELECTOR;
-import static com.mopub.mobileads.util.ResponseHeader.FULL_AD_TYPE;
-import static com.mopub.mobileads.util.ResponseHeader.NATIVE_PARAMS;
-import static com.mopub.mobileads.util.ResponseHeader.REDIRECT_URL;
-import static com.mopub.mobileads.util.ResponseHeader.SCROLLABLE;
 
 abstract class AdLoadTask {
     WeakReference<AdViewController> mWeakAdViewController;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
index 4de773c2..fdfa523d 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -44,6 +44,7 @@
 import android.widget.FrameLayout;
 
 import com.mopub.common.util.Dips;
+import com.mopub.common.util.MoPubLog;
 import com.mopub.mobileads.factories.AdFetcherFactory;
 import com.mopub.mobileads.factories.HttpClientFactory;
 
@@ -83,12 +84,14 @@
 
     private Map<String, Object> mLocalExtras = new HashMap<String, Object>();
     private boolean mAutoRefreshEnabled = true;
+    private boolean mPreviousAutoRefreshSetting = true;
     private String mKeywords;
     private Location mLocation;
     private LocationAwareness mLocationAwareness = LocationAwareness.NORMAL;
     private int mLocationPrecision = DEFAULT_LOCATION_PRECISION;
     private boolean mIsFacebookSupported = true;
     private boolean mIsTesting;
+    private boolean mAdWasLoaded;
 
     protected static void setShouldHonorServerDimensions(View view) {
         sViewShouldHonorServerDimensions.put(view, true);
@@ -125,6 +128,7 @@ public MoPubView getMoPubView() {
     }
 
     public void loadAd() {
+        mAdWasLoaded = true;
         if (mAdConfiguration.getAdUnitId() == null) {
             Log.d("MoPub", "Can't load an ad in this ad view because the ad unit ID is null. " +
                     "Did you forget to call setAdUnitId()?");
@@ -259,17 +263,33 @@ public boolean getAutorefreshEnabled() {
         return mAutoRefreshEnabled;
     }
 
-    public void setAutorefreshEnabled(boolean enabled) {
-        mAutoRefreshEnabled = enabled;
+    void pauseRefresh() {
+        mPreviousAutoRefreshSetting = mAutoRefreshEnabled;
+        setAutorefreshEnabled(false);
+    }
 
-        if (mAdConfiguration.getAdUnitId() != null) {
-            Log.d("MoPub", "Automatic refresh for " + mAdConfiguration + " set to: " + enabled + ".");
+    void unpauseRefresh() {
+        setAutorefreshEnabled(mPreviousAutoRefreshSetting);
+    }
 
+    void forceSetAutorefreshEnabled(boolean enabled) {
+        mPreviousAutoRefreshSetting = enabled;
+        setAutorefreshEnabled(enabled);
+    }
+
+    private void setAutorefreshEnabled(boolean enabled) {
+        final boolean autorefreshChanged = mAdWasLoaded && (mAutoRefreshEnabled != enabled);
+        if (autorefreshChanged) {
+            final String enabledString = (enabled) ? "enabled" : "disabled";
+            final String adUnitId = (mAdConfiguration != null) ? mAdConfiguration.getAdUnitId() : null;
+
+            MoPubLog.d("Refresh " + enabledString + " for ad unit (" + adUnitId + ").");
         }
 
-        if (mAutoRefreshEnabled) {
+        mAutoRefreshEnabled = enabled;
+        if (mAdWasLoaded && mAutoRefreshEnabled) {
             scheduleRefreshTimerIfEnabled();
-        } else {
+        } else if (!mAutoRefreshEnabled) {
             cancelRefreshTimer();
         }
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
index c6d553c1..cc8d59a8 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
@@ -35,7 +35,6 @@
 import android.app.Activity;
 import android.graphics.drawable.StateListDrawable;
 import android.os.Bundle;
-import android.util.Log;
 import android.view.View;
 import android.view.View.OnClickListener;
 import android.view.Window;
@@ -98,8 +97,6 @@ protected void onCreate(Bundle savedInstanceState) {
         final AdConfiguration adConfiguration = getAdConfiguration();
         if (adConfiguration != null) {
             mBroadcastIdentifier = adConfiguration.getBroadcastIdentifier();
-        } else {
-            Log.d("MoPub", "Unable to obtain broadcast identifier. Interstitial interactions cannot be tracked.");
         }
 
         createInterstitialCloseButton();
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
new file mode 100644
index 00000000..b87e3a06
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
@@ -0,0 +1,93 @@
+/*
+ * Copyright (c) 2010-2013, MoPub Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *  Redistributions of source code must retain the above copyright
+ *   notice, this list of conditions and the following disclaimer.
+ *
+ *  Redistributions in binary form must reproduce the above copyright
+ *   notice, this list of conditions and the following disclaimer in the
+ *   documentation and/or other materials provided with the distribution.
+ *
+ *  Neither the name of 'MoPub Inc.' nor the names of its contributors
+ *   may be used to endorse or promote products derived from this software
+ *   without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.ActivityNotFoundException;
+import android.content.Context;
+import android.content.Intent;
+
+import com.mopub.common.util.MoPubLog;
+import com.mopub.mobileads.util.vast.VastVideoConfiguration;
+
+import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
+import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
+import static com.mopub.mobileads.VastVideoViewController.VAST_VIDEO_CONFIGURATION;
+
+class BaseVideoPlayerActivity extends Activity {
+    static final String VIDEO_CLASS_EXTRAS_KEY = "video_view_class_name";
+    static final String VIDEO_URL = "video_url";
+
+    static void startMraid(final Context context, final String videoUrl, final AdConfiguration adConfiguration) {
+        final Intent intentVideoPlayerActivity = createIntentMraid(context, videoUrl, adConfiguration);
+        try {
+            context.startActivity(intentVideoPlayerActivity);
+        } catch (ActivityNotFoundException e) {
+            MoPubLog.d("Activity MraidVideoPlayerActivity not found. Did you declare it in your AndroidManifest.xml?");
+        }
+    }
+
+    static Intent createIntentMraid(final Context context,
+            final String videoUrl,
+            final AdConfiguration adConfiguration) {
+        final Intent intentVideoPlayerActivity = new Intent(context, MraidVideoPlayerActivity.class);
+        intentVideoPlayerActivity.setFlags(FLAG_ACTIVITY_NEW_TASK);
+        intentVideoPlayerActivity.putExtra(VIDEO_CLASS_EXTRAS_KEY, "mraid");
+        intentVideoPlayerActivity.putExtra(VIDEO_URL, videoUrl);
+        intentVideoPlayerActivity.putExtra(AD_CONFIGURATION_KEY, adConfiguration);
+        return intentVideoPlayerActivity;
+    }
+
+    static void startVast(final Context context,
+            final VastVideoConfiguration vastVideoConfiguration,
+            final AdConfiguration adConfiguration) {
+        final Intent intentVideoPlayerActivity = createIntentVast(context, vastVideoConfiguration, adConfiguration);
+        try {
+            context.startActivity(intentVideoPlayerActivity);
+        } catch (ActivityNotFoundException e) {
+            MoPubLog.d("Activity MraidVideoPlayerActivity not found. Did you declare it in your AndroidManifest.xml?");
+        }
+    }
+
+    static Intent createIntentVast(final Context context,
+            final VastVideoConfiguration vastVideoConfiguration,
+            final AdConfiguration adConfiguration) {
+        final Intent intentVideoPlayerActivity = new Intent(context, MraidVideoPlayerActivity.class);
+        intentVideoPlayerActivity.setFlags(FLAG_ACTIVITY_NEW_TASK);
+        intentVideoPlayerActivity.putExtra(VIDEO_CLASS_EXTRAS_KEY, "vast");
+        intentVideoPlayerActivity.putExtra(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        intentVideoPlayerActivity.putExtra(AD_CONFIGURATION_KEY, adConfiguration);
+        return intentVideoPlayerActivity;
+    }
+}
+
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoView.java
deleted file mode 100644
index 99416f2c..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoView.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/*
- * Copyright (c) 2010-2013, MoPub Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *
- *  Redistributions of source code must retain the above copyright
- *   notice, this list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright
- *   notice, this list of conditions and the following disclaimer in the
- *   documentation and/or other materials provided with the distribution.
- *
- *  Neither the name of 'MoPub Inc.' nor the names of its contributors
- *   may be used to endorse or promote products derived from this software
- *   without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.widget.VideoView;
-
-abstract class BaseVideoView extends VideoView {
-    public interface BaseVideoViewListener {
-        void showCloseButton();
-        void videoError(boolean shouldFinish);
-        void videoCompleted(boolean shouldFinish);
-        void videoClicked();
-    }
-
-    public BaseVideoView(Context context) {
-        super(context);
-    }
-
-    void onResume() {
-
-    }
-
-    void onPause() {
-
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
new file mode 100644
index 00000000..37239372
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
@@ -0,0 +1,124 @@
+/*
+ * Copyright (c) 2010-2013, MoPub Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *  Redistributions of source code must retain the above copyright
+ *   notice, this list of conditions and the following disclaimer.
+ *
+ *  Redistributions in binary form must reproduce the above copyright
+ *   notice, this list of conditions and the following disclaimer in the
+ *   documentation and/or other materials provided with the distribution.
+ *
+ *  Neither the name of 'MoPub Inc.' nor the names of its contributors
+ *   may be used to endorse or promote products derived from this software
+ *   without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.RelativeLayout;
+import android.widget.VideoView;
+
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
+
+abstract class BaseVideoViewController {
+    private final Context mContext;
+    private final RelativeLayout mLayout;
+    private final BaseVideoViewControllerListener mBaseVideoViewControllerListener;
+    private long mBroadcastIdentifier;
+
+    interface BaseVideoViewControllerListener {
+        void onSetContentView(final View view);
+        void onSetRequestedOrientation(final int requestedOrientation);
+        void onFinish();
+        void onStartActivityForResult(final Class<? extends Activity> clazz,
+                final int requestCode,
+                final Bundle extras);
+    }
+
+    BaseVideoViewController(final Context context, final long broadcastIdentifier, final BaseVideoViewControllerListener baseVideoViewControllerListener) {
+        mContext = context.getApplicationContext();
+        mBroadcastIdentifier = broadcastIdentifier;
+        mBaseVideoViewControllerListener = baseVideoViewControllerListener;
+        mLayout = new RelativeLayout(mContext);
+    }
+
+     void onCreate() {
+        final RelativeLayout.LayoutParams adViewLayout = new RelativeLayout.LayoutParams(
+                RelativeLayout.LayoutParams.FILL_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
+        adViewLayout.addRule(RelativeLayout.CENTER_IN_PARENT);
+        mLayout.addView(getVideoView(), 0, adViewLayout);
+        mBaseVideoViewControllerListener.onSetContentView(mLayout);
+    }
+
+    abstract VideoView getVideoView();
+    abstract void onPause();
+    abstract void onResume();
+    abstract void onDestroy();
+
+    boolean backButtonEnabled() {
+        return true;
+    }
+
+    void onActivityResult(final int requestCode, final int resultCode, final Intent data) {
+        // By default, the activity result is ignored
+    }
+
+    BaseVideoViewControllerListener getBaseVideoViewControllerListener() {
+        return mBaseVideoViewControllerListener;
+    }
+
+    Context getContext() {
+        return mContext;
+    }
+
+    ViewGroup getLayout() {
+        return mLayout;
+    }
+
+    void videoError(boolean shouldFinish) {
+        Log.d("MoPub", "Error: video can not be played.");
+        broadcastAction(ACTION_INTERSTITIAL_FAIL);
+        if (shouldFinish) {
+           mBaseVideoViewControllerListener.onFinish();
+        }
+    }
+
+    void videoCompleted(boolean shouldFinish) {
+        if (shouldFinish) {
+            mBaseVideoViewControllerListener.onFinish();
+        }
+    }
+
+    void videoClicked() {
+        broadcastAction(ACTION_INTERSTITIAL_CLICK);
+    }
+
+    void broadcastAction(final String action) {
+        EventForwardingBroadcastReceiver.broadcastAction(mContext, mBroadcastIdentifier, action);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
index 7edcfc11..d59bff56 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
@@ -36,11 +36,13 @@
 import android.os.Handler;
 import android.util.Log;
 import android.view.View;
+
+import com.mopub.common.util.Json;
 import com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
 import com.mopub.mobileads.factories.CustomEventBannerFactory;
-import com.mopub.mobileads.util.Json;
 
-import java.util.*;
+import java.util.HashMap;
+import java.util.Map;
 
 import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
index b7cda1a4..4ef0f468 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
@@ -35,11 +35,13 @@
 import android.content.Context;
 import android.os.Handler;
 import android.util.Log;
+
+import com.mopub.common.util.Json;
 import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import com.mopub.mobileads.factories.CustomEventInterstitialFactory;
-import com.mopub.mobileads.util.Json;
 
-import java.util.*;
+import java.util.HashMap;
+import java.util.Map;
 
 import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/DiskLruCache.java b/mopub-sdk/src/main/java/com/mopub/mobileads/DiskLruCache.java
deleted file mode 100644
index 80f59adc..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/DiskLruCache.java
+++ /dev/null
@@ -1,143 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.net.Uri;
-import android.support.v4.util.LruCache;
-import android.util.Log;
-
-import com.mopub.common.util.Files;
-import com.mopub.common.util.Streams;
-import com.mopub.common.util.Utils;
-
-import java.io.*;
-
-/*
- * Please use putStream, getUri, and removeStream (instead of put, get, and remove).
- * The original methods do not perform necessary hashing of fileNames
- */
-public class DiskLruCache extends LruCache<String, File> {
-    private final Context mContext;
-    private final String mCacheDirectoryName;
-    private final File mCacheDirectory;
-
-    public DiskLruCache(Context context, String cacheDirectoryName, int maxSizeBytes) throws IllegalArgumentException, IOException {
-        super(maxSizeBytes);
-
-        if (context == null) {
-            throw new IllegalArgumentException("context may not be null.");
-        } else if (cacheDirectoryName == null) {
-            throw new IllegalArgumentException("cacheDirectoryName may not be null.");
-        } else if (maxSizeBytes < 0) {
-            throw new IllegalArgumentException("maxSizeBytes must be positive.");
-        }
-
-        mContext = context;
-        mCacheDirectoryName = cacheDirectoryName;
-        mCacheDirectory = Files.createDirectory(context.getFilesDir() + File.separator + mCacheDirectoryName);
-
-        if (mCacheDirectory == null) {
-            throw new IOException("Unable to obtain access to directory " + mCacheDirectoryName);
-        }
-
-        loadFilesFromDisk();
-    }
-
-    File getCacheDirectory() {
-        return mCacheDirectory;
-    }
-
-    Uri getUri(final String key) {
-        File value = get(Utils.sha1(key));
-
-        if (value == null) {
-            return null;
-        }
-
-        return Uri.parse(value.getAbsolutePath());
-    }
-
-    synchronized boolean putStream(final String fileName, final InputStream content) {
-        if (fileName == null || content == null) {
-            return false;
-        }
-
-        if (getUri(fileName) != null) {
-            return false;
-        }
-
-        String hashedFileName = Utils.sha1(fileName);
-        File file = createFile(hashedFileName, content);
-
-        if (file == null || !file.exists()) {
-            return false;
-        }
-
-        put(hashedFileName, file);
-        return true;
-    }
-
-    synchronized File removeStream(final String fileName) {
-        if (fileName == null) {
-            return null;
-        }
-
-        return remove(Utils.sha1(fileName));
-    }
-
-    private File createFile(String fileName, InputStream content) {
-        File file = new File(mContext.getFilesDir() + File.separator + mCacheDirectoryName + File.separator + fileName);
-
-        FileOutputStream fileOutputStream;
-        try {
-            fileOutputStream = new FileOutputStream(file);
-        } catch (FileNotFoundException e) {
-            return null;
-        }
-
-        try {
-            Streams.copyContent(content, fileOutputStream);
-        } catch (IOException e) {
-            file.delete();
-            return null;
-        } finally {
-            Streams.closeStream(fileOutputStream);
-        }
-
-        return file;
-    }
-
-    private void loadFilesFromDisk() {
-        File[] allFiles = mCacheDirectory.listFiles();
-
-        if (allFiles != null) {
-            for (final File file : allFiles) {
-                put(file.getName(), file);
-            }
-        }
-    }
-
-    /*
-     * From android.support.v4.util.LruCache
-     */
-
-    @Override
-    protected void entryRemoved(final boolean evicted, final String key, final File oldValue, final File newValue) {
-        super.entryRemoved(evicted, key, oldValue, newValue);
-
-        if (oldValue != null) {
-            if (!oldValue.delete()) {
-                Log.d("MoPub", "Unable to delete file from cache: " + oldValue.getName());
-            }
-        }
-    }
-
-    @Override
-    protected int sizeOf(String key, File value) {
-        if (value != null && value.exists() && value.length() > 0) {
-            return Files.intLength(value);
-        }
-
-        return super.sizeOf(key, value);
-    }
-}
-
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
index 5825e232..85df9c9a 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
@@ -37,15 +37,14 @@
 import android.location.Location;
 import android.util.Log;
 
-import com.mopub.common.LocationService;
 import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
 
 import java.util.*;
 
 import static com.mopub.common.LocationService.*;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_NAME;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
 
 public class MoPubInterstitial implements CustomEventInterstitialAdapter.CustomEventInterstitialAdapterListener {
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
index 0f6107b5..d14becd6 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -44,7 +44,7 @@
 import android.webkit.WebViewDatabase;
 import android.widget.FrameLayout;
 
-import com.mopub.common.LocationService;
+import com.mopub.common.util.ManifestUtils;
 import com.mopub.mobileads.factories.AdViewControllerFactory;
 import com.mopub.mobileads.factories.CustomEventBannerAdapterFactory;
 
@@ -52,8 +52,8 @@
 
 import static com.mopub.common.LocationService.*;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_NAME;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
 
 public class MoPubView extends FrameLayout {
 
@@ -78,8 +78,7 @@
     private BroadcastReceiver mScreenStateReceiver;
     private boolean mIsInForeground;
     private LocationAwareness mLocationAwareness;
-    private boolean mPreviousAutorefreshSetting = false;
-    
+
     private BannerAdListener mBannerAdListener;
     
     private OnAdWillLoadListener mOnAdWillLoadListener;
@@ -96,6 +95,8 @@ public MoPubView(Context context) {
     public MoPubView(Context context, AttributeSet attrs) {
         super(context, attrs);
 
+        ManifestUtils.checkWebViewActivitiesDeclared(context);
+
         mContext = context;
         mIsInForeground = (getVisibility() == VISIBLE);
         mLocationAwareness = LocationAwareness.NORMAL;
@@ -120,34 +121,23 @@ public MoPubView(Context context, AttributeSet attrs) {
     }
 
     private void registerScreenStateBroadcastReceiver() {
-        if (mAdViewController == null) return;
-
         mScreenStateReceiver = new BroadcastReceiver() {
-            public void onReceive(Context context, Intent intent) {
-                if (intent.getAction().equals(Intent.ACTION_SCREEN_OFF)) {
-                    if (mIsInForeground) {
-                        Log.d("MoPub", "Screen sleep with ad in foreground, disable refresh");
-                        if (mAdViewController != null) {
-                            mPreviousAutorefreshSetting = mAdViewController.getAutorefreshEnabled();
-                            mAdViewController.setAutorefreshEnabled(false);
-                        }
-                    } else {
-                        Log.d("MoPub", "Screen sleep but ad in background; " +
-                                "refresh should already be disabled");
-                    }
-                } else if (intent.getAction().equals(Intent.ACTION_USER_PRESENT)) {
-                    if (mIsInForeground) {
-                        Log.d("MoPub", "Screen wake / ad in foreground, reset refresh");
-                        if (mAdViewController != null) {
-                            mAdViewController.setAutorefreshEnabled(mPreviousAutorefreshSetting);
-                        }
-                    } else {
-                        Log.d("MoPub", "Screen wake but ad in background; don't enable refresh");
-                    }
+            public void onReceive(final Context context, final Intent intent) {
+                if (!mIsInForeground || intent == null) {
+                    return;
+                }
+
+                final String action = intent.getAction();
+
+                if (Intent.ACTION_USER_PRESENT.equals(action)) {
+                    setAdVisibility(true);
+                } else if (Intent.ACTION_SCREEN_OFF.equals(action)) {
+                    setAdVisibility(false);
                 }
             }
         };
-        IntentFilter filter = new IntentFilter(Intent.ACTION_SCREEN_OFF);
+
+        final IntentFilter filter = new IntentFilter(Intent.ACTION_SCREEN_OFF);
         filter.addAction(Intent.ACTION_USER_PRESENT);
         mContext.registerReceiver(mScreenStateReceiver, filter);
     }
@@ -227,17 +217,21 @@ protected void trackNativeImpression() {
 
     @Override
     protected void onWindowVisibilityChanged(int visibility) {
-        if (mAdViewController == null) return;
+        final boolean isVisible = (visibility == VISIBLE);
 
-        if (visibility == VISIBLE) {
-            Log.d("MoPub", "Ad Unit ("+ mAdViewController.getAdUnitId()+") going visible: enabling refresh");
-            mIsInForeground = true;
-            mAdViewController.setAutorefreshEnabled(true);
+        mIsInForeground = isVisible;
+        setAdVisibility(isVisible);
+    }
+
+    private void setAdVisibility(boolean isVisible) {
+        if (mAdViewController == null) {
+            return;
         }
-        else {
-            Log.d("MoPub", "Ad Unit ("+ mAdViewController.getAdUnitId()+") going invisible: disabling refresh");
-            mIsInForeground = false;
-            mAdViewController.setAutorefreshEnabled(false);
+
+        if (isVisible) {
+            mAdViewController.unpauseRefresh();
+        } else {
+            mAdViewController.pauseRefresh();
         }
     }
 
@@ -394,7 +388,9 @@ public void setLocalExtras(Map<String, Object> localExtras) {
     }
 
     public void setAutorefreshEnabled(boolean enabled) {
-        if (mAdViewController != null) mAdViewController.setAutorefreshEnabled(enabled);
+        if (mAdViewController != null) {
+            mAdViewController.forceSetAutorefreshEnabled(enabled);
+        }
     }
 
     public boolean getAutorefreshEnabled() {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
index 505e9141..0e4fe95f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
@@ -103,7 +103,7 @@
 import static com.mopub.mobileads.util.Mraids.isSmsAvailable;
 import static com.mopub.mobileads.util.Mraids.isStorePictureSupported;
 import static com.mopub.mobileads.util.Mraids.isTelAvailable;
-import static com.mopub.mobileads.util.ResponseHeader.LOCATION;
+import static com.mopub.common.util.ResponseHeader.LOCATION;
 
 class MraidDisplayController extends MraidAbstractController {
     private static final String LOGTAG = "MraidDisplayController";
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
index 4d937ae1..9f246b71 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
@@ -32,199 +32,144 @@
 
 package com.mopub.mobileads;
 
+import android.app.Activity;
 import android.content.ActivityNotFoundException;
-import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
 import android.util.Log;
 import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
 
-import java.util.*;
+import com.mopub.common.util.IntentUtils;
 
-import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
-import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
 
-public class MraidVideoPlayerActivity extends BaseInterstitialActivity implements BaseVideoView.BaseVideoViewListener {
-    static final String VIDEO_URL = "video_url";
-    private static final String VIDEO_CLASS_EXTRAS_KEY = "video_view_class_name";
+public class MraidVideoPlayerActivity extends BaseVideoPlayerActivity implements BaseVideoViewController.BaseVideoViewControllerListener {
+    private BaseVideoViewController mBaseVideoController;
+    private long mBroadcastIdentifier;
 
-    private BaseVideoView mVideoView;
-
-    static void startMraid(Context context, String videoUrl, AdConfiguration adConfiguration) {
-        Intent intentVideoPlayerActivity = createIntentMraid(context, videoUrl, adConfiguration);
-        try {
-            context.startActivity(intentVideoPlayerActivity);
-        } catch (ActivityNotFoundException e) {
-            Log.d("MraidVideoPlayerActivity", "Activity MraidVideoPlayerActivity not found. Did you declare it in your AndroidManifest.xml?");
-        }
-    }
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
 
-    static Intent createIntentMraid(Context context, String videoUrl, AdConfiguration adConfiguration) {
-        Intent intentVideoPlayerActivity = new Intent(context, MraidVideoPlayerActivity.class);
-        intentVideoPlayerActivity.setFlags(FLAG_ACTIVITY_NEW_TASK);
-        intentVideoPlayerActivity.putExtra(VIDEO_CLASS_EXTRAS_KEY, "mraid");
-        intentVideoPlayerActivity.putExtra(VIDEO_URL, videoUrl);
-        intentVideoPlayerActivity.putExtra(AD_CONFIGURATION_KEY, adConfiguration);
-        return intentVideoPlayerActivity;
-    }
+        requestWindowFeature(Window.FEATURE_NO_TITLE);
+        getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
 
-    static void startVast(
-            Context context,
-            String videoUrl,
-            ArrayList<String> videoStartTrackers,
-            ArrayList<String> videoFirstQuartileTrackers,
-            ArrayList<String> videoMidpointTrackers,
-            ArrayList<String> videoThirdQuartileTrackers,
-            ArrayList<String> videoCompleteTrackers,
-            ArrayList<String> impressionTrackers,
-            String clickThroughUrl,
-            ArrayList<String> clickThroughTrackers,
-            AdConfiguration adConfiguration) {
-
-        if (videoUrl == null) {
-            return;
+        final AdConfiguration adConfiguration = getAdConfiguration();
+        if (adConfiguration != null) {
+            mBroadcastIdentifier = adConfiguration.getBroadcastIdentifier();
+        } else {
+            Log.d("MoPub", "Unable to obtain broadcast identifier. Video interactions cannot be tracked.");
         }
 
-        Intent intentVideoPlayerActivity = createIntentVast(
-                context,
-                videoUrl,
-                videoStartTrackers,
-                videoFirstQuartileTrackers,
-                videoMidpointTrackers,
-                videoThirdQuartileTrackers,
-                videoCompleteTrackers,
-                impressionTrackers,
-                clickThroughUrl,
-                clickThroughTrackers,
-                adConfiguration);
         try {
-            context.startActivity(intentVideoPlayerActivity);
-        } catch (ActivityNotFoundException e) {
-            Log.d("MoPub", "Activity MraidVideoPlayerActivity not found. Did you declare it in your AndroidManifest.xml?");
+            mBaseVideoController = createVideoViewController();
+        } catch (IllegalStateException e) {
+            broadcastAction(this, mBroadcastIdentifier, ACTION_INTERSTITIAL_FAIL);
+            finish();
+            return;
         }
-    }
 
-    static Intent createIntentVast(
-            Context context,
-            String videoUrl,
-            ArrayList<String> videoStartTrackers,
-            ArrayList<String> videoFirstQuartileTrackers,
-            ArrayList<String> videoMidpointTrackers,
-            ArrayList<String> videoThirdQuartileTrackers,
-            ArrayList<String> videoCompleteTrackers,
-            ArrayList<String> impressionTrackers,
-            String clickThroughUrl,
-            ArrayList<String> clickThroughTrackers,
-            AdConfiguration adConfiguration) {
-        Intent intentVideoPlayerActivity = new Intent(context, MraidVideoPlayerActivity.class);
-        intentVideoPlayerActivity.setFlags(FLAG_ACTIVITY_NEW_TASK);
-        intentVideoPlayerActivity.putExtra(VIDEO_CLASS_EXTRAS_KEY, "vast");
-        intentVideoPlayerActivity.putExtra(VIDEO_URL, videoUrl);
-        intentVideoPlayerActivity.putStringArrayListExtra(VastVideoView.VIDEO_START_TRACKERS, videoStartTrackers);
-        intentVideoPlayerActivity.putStringArrayListExtra(VastVideoView.VIDEO_FIRST_QUARTER_TRACKERS, videoFirstQuartileTrackers);
-        intentVideoPlayerActivity.putStringArrayListExtra(VastVideoView.VIDEO_MID_POINT_TRACKERS, videoMidpointTrackers);
-        intentVideoPlayerActivity.putStringArrayListExtra(VastVideoView.VIDEO_THIRD_QUARTER_TRACKERS, videoThirdQuartileTrackers);
-        intentVideoPlayerActivity.putStringArrayListExtra(VastVideoView.VIDEO_COMPLETE_TRACKERS, videoCompleteTrackers);
-        intentVideoPlayerActivity.putStringArrayListExtra(VastVideoView.VIDEO_IMPRESSION_TRACKERS, impressionTrackers);
-        intentVideoPlayerActivity.putExtra(VastVideoView.VIDEO_CLICK_THROUGH_URL, clickThroughUrl);
-        intentVideoPlayerActivity.putStringArrayListExtra(VastVideoView.VIDEO_CLICK_THROUGH_TRACKERS, clickThroughTrackers);
-        intentVideoPlayerActivity.putExtra(AD_CONFIGURATION_KEY, adConfiguration);
-        return intentVideoPlayerActivity;
+        mBaseVideoController.onCreate();
     }
 
     @Override
-    public View getAdView() {
-        mVideoView = createVideoView();
-        return mVideoView;
+    protected void onPause() {
+        mBaseVideoController.onPause();
+        super.onPause();
     }
 
     @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        hideInterstitialCloseButton();
-        mVideoView.start();
-
-        broadcastVastAction(ACTION_INTERSTITIAL_SHOW);
+    protected void onResume() {
+        super.onResume();
+        mBaseVideoController.onResume();
     }
 
     @Override
-    protected void onResume() {
-        super.onResume();
-        mVideoView.onResume();
+    protected void onDestroy() {
+        mBaseVideoController.onDestroy();
+        super.onDestroy();
     }
 
     @Override
-    protected void onPause() {
-        mVideoView.onPause();
-        super.onPause();
+    public void onBackPressed() {
+        if (mBaseVideoController.backButtonEnabled()) {
+            super.onBackPressed();
+        }
     }
 
     @Override
-    protected void onDestroy() {
-        broadcastVastAction(ACTION_INTERSTITIAL_DISMISS);
-        super.onDestroy();
+    protected void onActivityResult(final int requestCode, final int resultCode, final Intent data) {
+        mBaseVideoController.onActivityResult(requestCode, resultCode, data);
     }
 
-    private BaseVideoView createVideoView() {
+    private AdConfiguration getAdConfiguration() {
+        AdConfiguration adConfiguration;
+        try {
+            adConfiguration = (AdConfiguration) getIntent().getSerializableExtra(AdFetcher.AD_CONFIGURATION_KEY);
+        } catch (ClassCastException e) {
+            adConfiguration = null;
+        }
+        return adConfiguration;
+    }
+
+    private BaseVideoViewController createVideoViewController() throws IllegalStateException {
         String clazz = getIntent().getStringExtra(VIDEO_CLASS_EXTRAS_KEY);
 
         if ("vast".equals(clazz)) {
-            return new VastVideoView(this, getIntent(), this);
+            return new VastVideoViewController(this, getIntent().getExtras(), mBroadcastIdentifier, this);
         } else if ("mraid".equals(clazz)) {
-            return new MraidVideoView(this, getIntent(), this);
+            return new MraidVideoViewController(this, getIntent().getExtras(), mBroadcastIdentifier, this);
         } else {
-            broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_FAIL);
-            finish();
-            return new BaseVideoView(this) {};
+            throw new IllegalStateException("Unsupported video type: " + clazz);
         }
     }
 
-    /*
-     * Implementation of BaseVideoView.CloseButtonStatusListener
+    /**
+     * Implementation of BaseVideoViewControllerListener
      */
 
     @Override
-    public void showCloseButton() {
-        showInterstitialCloseButton();
+    public void onSetContentView(final View view) {
+        setContentView(view);
     }
 
     @Override
-    public void videoError(boolean shouldFinish) {
-        Log.d("MoPub", "Error: video can not be played.");
-        showInterstitialCloseButton();
-        broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_FAIL);
-        if (shouldFinish) {
-            finish();
-        }
+    public void onSetRequestedOrientation(final int requestedOrientation) {
+        setRequestedOrientation(requestedOrientation);
     }
 
     @Override
-    public void videoCompleted(boolean shouldFinish) {
-        showInterstitialCloseButton();
-        if (shouldFinish) {
-            finish();
-        }
+    public void onFinish() {
+        finish();
     }
 
     @Override
-    public void videoClicked() {
-        broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_CLICK);
-    }
+    public void onStartActivityForResult(final Class<? extends Activity> clazz,
+            final int requestCode,
+            final Bundle extras) {
+        if (clazz == null) {
+            return;
+        }
 
-    /*
-     * XXX Nathan: MraidVideoViews have already signalled that they have displayed/dismissed by this point.
-     * VastVideoViews, however, do not have a "splash screen", so this is their only opportunity to
-     * relay the shown/dismissed callback.
-     */
-    private void broadcastVastAction(final String action) {
-        if (mVideoView instanceof VastVideoView) {
-            broadcastAction(this, getBroadcastIdentifier(), action);
+        final Intent intent = IntentUtils.getStartActivityIntent(this, clazz, extras);
+
+        try {
+            startActivityForResult(intent, requestCode);
+        } catch (ActivityNotFoundException e) {
+            Log.d("MoPub", "Activity " + clazz.getName() + " not found. Did you declare it in your AndroidManifest.xml?");
         }
     }
+
+    @Deprecated // for testing
+    BaseVideoViewController getBaseVideoViewController() {
+        return mBaseVideoController;
+    }
+
+    @Deprecated // for testing
+    void setBaseVideoViewController(final BaseVideoViewController baseVideoViewController) {
+        mBaseVideoController = baseVideoViewController;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoView.java
deleted file mode 100644
index ed237eac..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoView.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * Copyright (c) 2010-2013, MoPub Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *
- *  Redistributions of source code must retain the above copyright
- *   notice, this list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright
- *   notice, this list of conditions and the following disclaimer in the
- *   documentation and/or other materials provided with the distribution.
- *
- *  Neither the name of 'MoPub Inc.' nor the names of its contributors
- *   may be used to endorse or promote products derived from this software
- *   without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.content.Intent;
-import android.media.MediaPlayer;
-
-import static com.mopub.mobileads.MraidVideoPlayerActivity.VIDEO_URL;
-
-class MraidVideoView extends BaseVideoView {
-
-    public MraidVideoView(Context context, Intent intent, final BaseVideoViewListener baseVideoViewListener) {
-        super(context);
-
-        setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
-            @Override
-            public void onCompletion(MediaPlayer mp) {
-                if (baseVideoViewListener != null) {
-                    baseVideoViewListener.videoCompleted(true);
-                }
-            }
-        });
-
-        setOnErrorListener(new MediaPlayer.OnErrorListener() {
-            @Override
-            public boolean onError(MediaPlayer mediaPlayer, int what, int extra) {
-                if (baseVideoViewListener != null) {
-                    baseVideoViewListener.videoError(false);
-                }
-                return false;
-            }
-        });
-
-        setVideoPath(intent.getStringExtra(VIDEO_URL));
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoViewController.java
new file mode 100644
index 00000000..67582d38
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoViewController.java
@@ -0,0 +1,130 @@
+/*
+ * Copyright (c) 2010-2013, MoPub Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *  Redistributions of source code must retain the above copyright
+ *   notice, this list of conditions and the following disclaimer.
+ *
+ *  Redistributions in binary form must reproduce the above copyright
+ *   notice, this list of conditions and the following disclaimer in the
+ *   documentation and/or other materials provided with the distribution.
+ *
+ *  Neither the name of 'MoPub Inc.' nor the names of its contributors
+ *   may be used to endorse or promote products derived from this software
+ *   without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.graphics.drawable.StateListDrawable;
+import android.media.MediaPlayer;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.ImageButton;
+import android.widget.RelativeLayout;
+import android.widget.VideoView;
+
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Drawables;
+
+import static android.view.View.GONE;
+import static android.view.View.OnClickListener;
+import static android.view.View.VISIBLE;
+import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_NORMAL;
+import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_PRESSED;
+import static com.mopub.mobileads.BaseVideoPlayerActivity.VIDEO_URL;
+
+public class MraidVideoViewController extends BaseVideoViewController {
+    private static final float CLOSE_BUTTON_SIZE = 50f;
+    private static final float CLOSE_BUTTON_PADDING = 8f;
+
+    private final VideoView mVideoView;
+    private ImageButton mCloseButton;
+    private int mButtonPadding;
+    private int mButtonSize;
+
+    MraidVideoViewController(final Context context, final Bundle bundle, final long broadcastIdentifier, final BaseVideoViewControllerListener baseVideoViewControllerListener) {
+        super(context, broadcastIdentifier, baseVideoViewControllerListener);
+
+        mVideoView = new VideoView(context);
+        mVideoView.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
+            @Override
+            public void onCompletion(MediaPlayer mp) {
+                mCloseButton.setVisibility(VISIBLE);
+                videoCompleted(true);
+            }
+        });
+
+        mVideoView.setOnErrorListener(new MediaPlayer.OnErrorListener() {
+            @Override
+            public boolean onError(MediaPlayer mediaPlayer, int what, int extra) {
+                mCloseButton.setVisibility(VISIBLE);
+                videoError(false);
+
+                return false;
+            }
+        });
+
+        mVideoView.setVideoPath(bundle.getString(VIDEO_URL));
+    }
+
+    @Override
+    void onCreate() {
+        super.onCreate();
+        mButtonSize = Dips.asIntPixels(CLOSE_BUTTON_SIZE, getContext());
+        mButtonPadding = Dips.asIntPixels(CLOSE_BUTTON_PADDING, getContext());
+        createInterstitialCloseButton();
+        mCloseButton.setVisibility(GONE);
+        mVideoView.start();
+    }
+
+    @Override
+    VideoView getVideoView() {
+        return mVideoView;
+    }
+
+    @Override
+    void onDestroy() {}
+
+    @Override
+    void onPause() {}
+
+    @Override
+    void onResume() {}
+
+    private void createInterstitialCloseButton() {
+        mCloseButton = new ImageButton(getContext());
+        StateListDrawable states = new StateListDrawable();
+        states.addState(new int[] {-android.R.attr.state_pressed}, INTERSTITIAL_CLOSE_BUTTON_NORMAL.decodeImage(getContext()));
+        states.addState(new int[] {android.R.attr.state_pressed}, INTERSTITIAL_CLOSE_BUTTON_PRESSED.decodeImage(getContext()));
+        mCloseButton.setImageDrawable(states);
+        mCloseButton.setBackgroundDrawable(null);
+        mCloseButton.setOnClickListener(new OnClickListener() {
+            public void onClick(View v) {
+                getBaseVideoViewControllerListener().onFinish();
+            }
+        });
+
+        RelativeLayout.LayoutParams buttonLayout = new RelativeLayout.LayoutParams(mButtonSize, mButtonSize);
+        buttonLayout.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
+        buttonLayout.setMargins(mButtonPadding, 0, mButtonPadding, 0);
+        getLayout().addView(mCloseButton, buttonLayout);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/ToolbarWidget.java b/mopub-sdk/src/main/java/com/mopub/mobileads/ToolbarWidget.java
new file mode 100644
index 00000000..dc3d983b
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/ToolbarWidget.java
@@ -0,0 +1,200 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.graphics.Color;
+import android.graphics.drawable.Drawable;
+import android.text.TextUtils;
+import android.util.Log;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Utils;
+import com.mopub.mobileads.resource.TextDrawable;
+
+import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
+
+class ToolbarWidget extends RelativeLayout {
+    static class Builder {
+        private final Context context;
+        private float weight;
+        private int widgetGravity;
+
+        private boolean hasText;
+        private String defaultText;
+
+        private boolean hasDrawable;
+        private Drawable drawable;
+
+        private OnTouchListener onTouchListener;
+        private int visibility;
+        private int textAlign;
+        private int drawableAlign;
+
+        Builder(final Context context) {
+            this.context = context;
+            this.weight = 1f;
+            this.widgetGravity = Gravity.CENTER;
+
+            this.visibility = View.VISIBLE;
+
+            this.textAlign = ALIGN_PARENT_LEFT;
+            this.drawableAlign = ALIGN_PARENT_RIGHT;
+        }
+
+        Builder weight(final float weight) {
+            this.weight = weight;
+            return this;
+        }
+
+        Builder widgetGravity(final int widgetGravity) {
+            this.widgetGravity = widgetGravity;
+            return this;
+        }
+
+        Builder hasText() {
+            this.hasText = true;
+            return this;
+        }
+
+        Builder defaultText(final String defaultText) {
+            this.hasText = true;
+            this.defaultText = defaultText;
+            return this;
+        }
+
+        Builder hasDrawable() {
+            this.hasDrawable = true;
+            return this;
+        }
+
+        Builder drawable(final Drawable drawable) {
+            this.hasDrawable = true;
+            this.drawable = drawable;
+            return this;
+        }
+
+        Builder textAlign(final int rule) {
+            this.textAlign = rule;
+            return this;
+        }
+
+        Builder drawableAlign(final int rule) {
+            this.drawableAlign = rule;
+            return this;
+        }
+
+        Builder visibility(final int visibility) {
+            this.visibility = visibility;
+            return this;
+        }
+
+        Builder onTouchListener(final OnTouchListener onTouchListener) {
+            this.onTouchListener = onTouchListener;
+            return this;
+        }
+
+        ToolbarWidget build() {
+            return new ToolbarWidget(this);
+        }
+    }
+
+    private TextView mTextView;
+    private ImageView mImageView;
+
+    private static final int TEXT_PADDING_DIPS = 5;
+    private static final int IMAGE_PADDING_DIPS = 5;
+    private static final int IMAGE_SIDE_LENGTH_DIPS = 37;
+
+    private final int mTextPadding;
+    private final int mImagePadding;
+    private final int mImageSideLength;
+
+    private ToolbarWidget(Builder builder) {
+        super(builder.context);
+
+        final LinearLayout.LayoutParams toolbarLayoutParams = new LinearLayout.LayoutParams(0, WRAP_CONTENT, builder.weight);
+        toolbarLayoutParams.gravity = builder.widgetGravity;
+        setLayoutParams(toolbarLayoutParams);
+
+        mTextPadding = Dips.dipsToIntPixels(TEXT_PADDING_DIPS, getContext());
+        mImagePadding = Dips.dipsToIntPixels(IMAGE_PADDING_DIPS, getContext());
+        mImageSideLength = Dips.dipsToIntPixels(IMAGE_SIDE_LENGTH_DIPS, getContext());
+
+        setVisibility(builder.visibility);
+
+        if (builder.hasDrawable) {
+            if (builder.drawable != null) {
+                mImageView = new ImageView(getContext());
+                mImageView.setId((int) Utils.generateUniqueId());
+
+                final RelativeLayout.LayoutParams iconLayoutParams = new RelativeLayout.LayoutParams(
+                        mImageSideLength,
+                        mImageSideLength);
+
+                iconLayoutParams.addRule(CENTER_VERTICAL);
+                iconLayoutParams.addRule(builder.drawableAlign);
+
+                mImageView.setPadding(mImagePadding, mImagePadding, mImagePadding, mImagePadding);
+
+                mImageView.setBackgroundColor(Color.BLACK);
+                mImageView.getBackground().setAlpha(0);
+                mImageView.setImageDrawable(builder.drawable);
+                addView(mImageView, iconLayoutParams);
+            }
+        }
+
+        if (builder.hasText) {
+            mTextView = new TextView(getContext());
+            mTextView.setSingleLine();
+            mTextView.setEllipsize(TextUtils.TruncateAt.END);
+            mTextView.setText(builder.defaultText);
+
+            final RelativeLayout.LayoutParams textLayoutParams = new RelativeLayout.LayoutParams(WRAP_CONTENT, WRAP_CONTENT);
+            textLayoutParams.addRule(CENTER_VERTICAL);
+
+            if (mImageView != null) {
+                textLayoutParams.addRule(LEFT_OF, mImageView.getId());
+            } else {
+                textLayoutParams.addRule(builder.textAlign);
+            }
+
+            mTextView.setPadding(mTextPadding, mTextPadding, mTextPadding, mTextPadding);
+
+            addView(mTextView, textLayoutParams);
+        }
+
+        if (builder.onTouchListener != null) {
+            setOnTouchListener(builder.onTouchListener);
+        }
+    }
+
+    void updateText(final String text) {
+        if (mTextView != null) {
+            mTextView.setText(text);
+        }
+    }
+
+    void updateImageText(final String text) {
+        try {
+            final TextDrawable textDrawable = (TextDrawable) mImageView.getDrawable();
+            textDrawable.updateText(text);
+        } catch (Exception e) {
+            Log.d("MoPub", "Unable to update ToolbarWidget text.");
+        }
+    }
+
+    @Deprecated // for testing
+    TextDrawable getImageViewDrawable() {
+        return (TextDrawable) mImageView.getDrawable();
+    }
+
+    @Deprecated // for testing
+    void setImageViewDrawable(TextDrawable drawable) {
+        mImageView.setImageDrawable((Drawable) drawable);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoDownloadTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoDownloadTask.java
index 6be1b18f..0d3f14d6 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoDownloadTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoDownloadTask.java
@@ -32,114 +32,77 @@
 
 package com.mopub.mobileads;
 
+import android.net.http.AndroidHttpClient;
 import android.os.AsyncTask;
-import android.util.Log;
 
-import com.mopub.common.util.Streams;
-import com.mopub.mobileads.factories.HttpClientFactory;
-import com.mopub.mobileads.util.HttpClients;
+import com.mopub.common.CacheService;
+import com.mopub.common.HttpClient;
+import com.mopub.common.util.MoPubLog;
 
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.HttpGet;
-import org.apache.http.impl.client.DefaultHttpClient;
 
-import java.io.*;
+import java.io.BufferedInputStream;
+import java.io.IOException;
+import java.io.InputStream;
 
 public class VastVideoDownloadTask extends AsyncTask<String, Void, Boolean> {
-    private static final String TEMP_FILE_PREFIX = "mopub-vast";
-    private static final long MAX_TEMP_FILE_LENGTH = 25 * 1000 * 1000;
-    private static final int HTTP_CLIENT_TIMEOUT = 10 * 1000;
-    private final DefaultHttpClient mHttpClient;
-
-    public interface OnDownloadCompleteListener {
-        public void onDownloadSuccess();
-        public void onDownloadFailed();
+    private static final int MAX_VIDEO_SIZE = 25 * 1024 * 1024; // 25 MiB
+
+    public interface VastVideoDownloadTaskListener {
+        public void onComplete(boolean success);
     }
 
-    private final DiskLruCache mDiskLruCache;
-    private final OnDownloadCompleteListener mOnDownloadCompleteListener;
+    private final VastVideoDownloadTaskListener mVastVideoDownloadTaskListener;
 
-    public VastVideoDownloadTask(OnDownloadCompleteListener listener, DiskLruCache diskLruCache) {
-        mOnDownloadCompleteListener = listener;
-        mDiskLruCache = diskLruCache;
-        mHttpClient = HttpClientFactory.create(HTTP_CLIENT_TIMEOUT);
+    public VastVideoDownloadTask(final VastVideoDownloadTaskListener listener) {
+        mVastVideoDownloadTaskListener = listener;
     }
 
     @Override
-    protected Boolean doInBackground(String... params) {
+    protected Boolean doInBackground(final String... params) {
         if (params == null || params[0] == null) {
             return false;
         }
 
-        return downloadToCache(params[0]);
-    }
+        final String videoUrl = params[0];
+        AndroidHttpClient httpClient = null;
+        try {
+            httpClient = HttpClient.getHttpClient();
+            final HttpGet httpget = new HttpGet(videoUrl);
+            final HttpResponse response = httpClient.execute(httpget);
 
-    @Override
-    protected void onPostExecute(Boolean success) {
-        if (success) {
-            if (mOnDownloadCompleteListener != null) {
-                mOnDownloadCompleteListener.onDownloadSuccess();
+            if (response == null || response.getEntity() == null) {
+                throw new IOException("Obtained null response from video url: " + videoUrl);
             }
-        } else {
-            if (mOnDownloadCompleteListener != null) {
-                mOnDownloadCompleteListener.onDownloadFailed();
-            }
-        }
-    }
 
-    Boolean downloadToCache(String videoUrl) {
-        boolean savedSuccessfully = false;
+            if (response.getEntity().getContentLength() > MAX_VIDEO_SIZE) {
+                throw new IOException("Video exceeded max download size");
+            }
 
-        try {
-            InputStream inputStream = connectToUrl(videoUrl);
-            File tempFile = copyInputStreamToTempFile(inputStream);
-            savedSuccessfully = copyTempFileIntoCache(videoUrl, tempFile);
-            tempFile.delete();
+            final InputStream inputStream = new BufferedInputStream(response.getEntity().getContent());
+            final boolean diskPutResult = CacheService.putToDiskCache(videoUrl, inputStream);
+            inputStream.close();
+            return diskPutResult;
         } catch (Exception e) {
-            Log.d("MoPub", "Failed to download video.");
+            MoPubLog.d("Failed to download video: " + e.getMessage());
+            return false;
         } finally {
-            HttpClients.safeShutdown(mHttpClient);
+            if (httpClient != null) {
+                httpClient.close();
+            }
         }
-
-        return savedSuccessfully;
     }
 
-    InputStream connectToUrl(String videoUrl) throws IOException {
-        if (videoUrl == null) {
-            throw new IOException("Unable to connect to null url.");
-        }
-
-        HttpGet httpget = new HttpGet(videoUrl);
-        HttpResponse response = mHttpClient.execute(httpget);
-
-        if (response == null || response.getEntity() == null) {
-            throw new IOException("Obtained null response from video url: " + videoUrl);
-        }
-
-        return response.getEntity().getContent();
+    @Override
+    protected void onCancelled() {
+        onPostExecute(false);
     }
 
-    File copyInputStreamToTempFile(InputStream inputStream) throws IOException {
-        File tempFile = File.createTempFile(TEMP_FILE_PREFIX, null, mDiskLruCache.getCacheDirectory());
-        OutputStream outputStream = new BufferedOutputStream(new FileOutputStream(tempFile));
-
-        try {
-            Streams.copyContent(inputStream, outputStream, MAX_TEMP_FILE_LENGTH);
-        } catch (IOException exception) {
-            tempFile.delete();
-            throw exception;
-        } finally {
-            Streams.closeStream(inputStream);
-            Streams.closeStream(outputStream);
+    @Override
+    protected void onPostExecute(final Boolean success) {
+        if (mVastVideoDownloadTaskListener != null) {
+            mVastVideoDownloadTaskListener.onComplete(success);
         }
-
-        return tempFile;
-    }
-
-    boolean copyTempFileIntoCache(String videoUrl, File tempFile) throws FileNotFoundException {
-        InputStream temporaryVideoStream = new BufferedInputStream(new FileInputStream(tempFile));
-        boolean savedSuccessfully = mDiskLruCache.putStream(videoUrl, temporaryVideoStream);
-        Streams.closeStream(temporaryVideoStream);
-        return savedSuccessfully;
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
index 88629f84..7ac734d3 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
@@ -33,30 +33,19 @@
 package com.mopub.mobileads;
 
 import android.net.Uri;
-import android.util.Log;
+
+import com.mopub.common.CacheService;
 import com.mopub.mobileads.factories.VastManagerFactory;
-import com.mopub.mobileads.factories.VastVideoDownloadTaskFactory;
 import com.mopub.mobileads.util.vast.VastManager;
+import com.mopub.mobileads.util.vast.VastVideoConfiguration;
 
-import java.util.*;
+import java.util.Map;
 
-class VastVideoInterstitial extends ResponseBodyInterstitial implements VastManager.VastManagerListener, VastVideoDownloadTask.OnDownloadCompleteListener {
-    public static final int CACHE_MAX_SIZE = 100 * 1000 * 1000;
-    public static final String VIDEO_CACHE_DIRECTORY_NAME = "mopub_vast_video_cache";
+class VastVideoInterstitial extends ResponseBodyInterstitial implements VastManager.VastManagerListener {
     private CustomEventInterstitialListener mCustomEventInterstitialListener;
-    private VastVideoDownloadTask mVastVideoDownloadTask;
-    private DiskLruCache mVideoCache;
     private String mVastResponse;
-    private String mVideoUrl;
     private VastManager mVastManager;
-    private ArrayList<String> mVideoStartTrackers;
-    private ArrayList<String> mVideoFirstQuartileTrackers;
-    private ArrayList<String> mVideoMidpointTrackers;
-    private ArrayList<String> mVideoThirdQuartileTrackers;
-    private ArrayList<String> mVideoCompleteTrackers;
-    private ArrayList<String> mImpressionTrackers;
-    private String mClickThroughUrl;
-    private ArrayList<String> mClickTrackers;
+    private VastVideoConfiguration mVastVideoConfiguration;
 
     @Override
     protected void extractExtras(Map<String, String> serverExtras) {
@@ -67,33 +56,18 @@ protected void extractExtras(Map<String, String> serverExtras) {
     protected void preRenderHtml(CustomEventInterstitialListener customEventInterstitialListener) {
         mCustomEventInterstitialListener = customEventInterstitialListener;
 
-        if (mVideoCache == null) {
-            try {
-                mVideoCache = new DiskLruCache(mContext, VIDEO_CACHE_DIRECTORY_NAME, CACHE_MAX_SIZE);
-            } catch (Exception e) {
-                Log.d("MoPub", "Unable to create VAST video cache.");
-                mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.VIDEO_CACHE_ERROR);
-                return;
-            }
+        if (!CacheService.initializeDiskCache(mContext)) {
+            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.VIDEO_CACHE_ERROR);
+            return;
         }
 
-        mVastManager = VastManagerFactory.create();
-        mVastManager.processVast(mVastResponse, this);
+        mVastManager = VastManagerFactory.create(mContext);
+        mVastManager.prepareVastVideoConfiguration(mVastResponse, this);
     }
 
     @Override
     protected void showInterstitial() {
-        MraidVideoPlayerActivity.startVast(mContext,
-                mVideoUrl,
-                mVideoStartTrackers,
-                mVideoFirstQuartileTrackers,
-                mVideoMidpointTrackers,
-                mVideoThirdQuartileTrackers,
-                mVideoCompleteTrackers,
-                mImpressionTrackers,
-                mClickThroughUrl,
-                mClickTrackers,
-                mAdConfiguration);
+        MraidVideoPlayerActivity.startVast(mContext, mVastVideoConfiguration, mAdConfiguration);
     }
 
     @Override
@@ -110,47 +84,16 @@ protected void onInvalidate() {
      */
 
     @Override
-    public void onComplete(VastManager vastManager) {
-        mVideoUrl = vastManager.getMediaFileUrl();
-
-        Uri uri = mVideoCache.getUri(mVideoUrl);
-        if (uri != null) {
-            onDownloadSuccess();
-        } else {
-            mVastVideoDownloadTask = VastVideoDownloadTaskFactory.create(this, mVideoCache);
-            mVastVideoDownloadTask.execute(mVideoUrl);
+    public void onVastVideoConfigurationPrepared(final VastVideoConfiguration vastVideoConfiguration) {
+        if (vastVideoConfiguration == null) {
+            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.VIDEO_DOWNLOAD_ERROR);
+            return;
         }
-    }
-
-    /*
-     * VastVideoDownloadTask.OnDownloadCompleteListener implementation
-     */
-
-    @Override
-    public void onDownloadSuccess() {
-        mVideoStartTrackers = new ArrayList<String>(mVastManager.getVideoStartTrackers());
-        mVideoFirstQuartileTrackers = new ArrayList<String>(mVastManager.getVideoFirstQuartileTrackers());
-        mVideoMidpointTrackers = new ArrayList<String>(mVastManager.getVideoMidpointTrackers());
-        mVideoThirdQuartileTrackers = new ArrayList<String>(mVastManager.getVideoThirdQuartileTrackers());
-        mVideoCompleteTrackers = new ArrayList<String>(mVastManager.getVideoCompleteTrackers());
-
-        mImpressionTrackers = new ArrayList<String>(mVastManager.getImpressionTrackers());
-
-        mClickThroughUrl = mVastManager.getClickThroughUrl();
-        mClickTrackers = new ArrayList<String>(mVastManager.getClickTrackers());
 
+        mVastVideoConfiguration = vastVideoConfiguration;
         mCustomEventInterstitialListener.onInterstitialLoaded();
     }
 
-    @Override
-    public void onDownloadFailed() {
-        mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.VIDEO_DOWNLOAD_ERROR);
-    }
-
-    @Deprecated // for testing
-    DiskLruCache getVideoCache() {
-        return mVideoCache;
-    }
 
     @Deprecated // for testing
     String getVastResponse() {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoToolbar.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoToolbar.java
new file mode 100644
index 00000000..2d4431bf
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoToolbar.java
@@ -0,0 +1,159 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.view.MotionEvent;
+import android.view.View;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Utils;
+import com.mopub.mobileads.resource.CloseButtonDrawable;
+import com.mopub.mobileads.resource.CountdownDrawable;
+import com.mopub.mobileads.resource.LearnMoreDrawable;
+
+import static android.graphics.Color.BLACK;
+import static android.view.Gravity.CENTER_VERTICAL;
+import static android.view.Gravity.LEFT;
+import static android.view.Gravity.RIGHT;
+import static android.view.ViewGroup.LayoutParams.FILL_PARENT;
+
+class VastVideoToolbar extends LinearLayout {
+    private static final int TOOLBAR_HEIGHT_DIPS = 44;
+    private static final int THRESHOLD_FOR_HIDING_VIDEO_DURATION = 200;
+
+    private final ToolbarWidget mDurationWidget;
+    private final ToolbarWidget mLearnMoreWidget;
+    private final ToolbarWidget mCountdownWidget;
+    private final ToolbarWidget mCloseButtonWidget;
+
+    public VastVideoToolbar(final Context context) {
+        super(context);
+
+        setId((int) Utils.generateUniqueId());
+
+        // Consume all click events on the video toolbar
+        setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View view, MotionEvent motionEvent) {
+                return true;
+            }
+        });
+
+        final int videoToolbarHeight = Dips.dipsToIntPixels(TOOLBAR_HEIGHT_DIPS, getContext());
+        final LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(
+                FILL_PARENT,
+                videoToolbarHeight);
+        setLayoutParams(layoutParams);
+
+        setBackgroundColor(BLACK);
+        getBackground().setAlpha(180);
+
+        mDurationWidget = createDurationWidget();
+        mLearnMoreWidget = createLearnMoreWidget();
+        mCountdownWidget = createCountdownWidget();
+        mCloseButtonWidget = createCloseButtonWidget();
+
+        addView(mDurationWidget);
+        addView(mLearnMoreWidget);
+        addView(mCountdownWidget);
+        addView(mCloseButtonWidget);
+    }
+
+    String getDisplaySeconds(final long millisecondsRemaining) {
+        return String.valueOf(Math.round(Math.ceil(millisecondsRemaining / 1000f)));
+    }
+
+    void updateDurationWidget(final int remainingTime) {
+        if (remainingTime >= THRESHOLD_FOR_HIDING_VIDEO_DURATION) {
+            mDurationWidget.updateText("Ends in " + getDisplaySeconds(remainingTime) + " seconds");
+        } else if (remainingTime >= 0) {
+            mDurationWidget.updateText("Thanks for watching");
+        }
+    }
+
+    void updateCountdownWidget(final int remainingTime) {
+        if (remainingTime >= 0 && mCountdownWidget.getVisibility() == View.INVISIBLE) {
+            mCloseButtonWidget.setVisibility(View.GONE);
+            mCountdownWidget.setVisibility(View.VISIBLE);
+        }
+
+        mCountdownWidget.updateImageText(getDisplaySeconds(remainingTime));
+    }
+
+    void makeInteractable() {
+        // The countdown timer has ended and user can interact with close and learn more button
+        mCountdownWidget.setVisibility(View.GONE);
+        mLearnMoreWidget.setVisibility(View.VISIBLE);
+        mCloseButtonWidget.setVisibility(View.VISIBLE);
+    }
+
+    void setCloseButtonOnTouchListener(final OnTouchListener onTouchListener) {
+        mCloseButtonWidget.setOnTouchListener(onTouchListener);
+    }
+
+    void setLearnMoreButtonOnTouchListener(final OnTouchListener onTouchListener) {
+        mLearnMoreWidget.setOnTouchListener(onTouchListener);
+    }
+
+    private ToolbarWidget createDurationWidget() {
+        return new ToolbarWidget.Builder(getContext())
+                .weight(2f)
+                .widgetGravity(CENTER_VERTICAL | LEFT)
+                .hasText()
+                .textAlign(RelativeLayout.ALIGN_PARENT_LEFT)
+                .build();
+    }
+
+    private ToolbarWidget createLearnMoreWidget() {
+        return new ToolbarWidget.Builder(getContext())
+                .weight(1f)
+                .widgetGravity(CENTER_VERTICAL | RIGHT)
+                .defaultText("Learn More")
+                .drawable(new LearnMoreDrawable())
+                .visibility(View.INVISIBLE)
+                .build();
+    }
+
+    private ToolbarWidget createCountdownWidget() {
+        final CountdownDrawable countdownDrawable = new CountdownDrawable(getContext());
+
+        return new ToolbarWidget.Builder(getContext())
+                .weight(1f)
+                .widgetGravity(CENTER_VERTICAL | RIGHT)
+                .defaultText("Skip in")
+                .drawable(countdownDrawable)
+                .visibility(View.INVISIBLE)
+                .build();
+    }
+
+    private ToolbarWidget createCloseButtonWidget() {
+        return new ToolbarWidget.Builder(getContext())
+                .weight(1f)
+                .widgetGravity(CENTER_VERTICAL | RIGHT)
+                .defaultText("Close")
+                .drawable(new CloseButtonDrawable())
+                .visibility(View.GONE)
+                .build();
+    }
+
+    @Deprecated // for testing
+    ToolbarWidget getDurationWidget() {
+        return mDurationWidget;
+    }
+
+    @Deprecated // for testing
+    ToolbarWidget getLearnMoreWidget() {
+        return mLearnMoreWidget;
+    }
+
+    @Deprecated // for testing
+    ToolbarWidget getCountdownWidget() {
+        return mCountdownWidget;
+    }
+
+    @Deprecated // for testing
+    ToolbarWidget getCloseButtonWidget() {
+        return mCloseButtonWidget;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoView.java
deleted file mode 100644
index 6d0fc5a8..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoView.java
+++ /dev/null
@@ -1,284 +0,0 @@
-/*
- * Copyright (c) 2010-2013, MoPub Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *
- *  Redistributions of source code must retain the above copyright
- *   notice, this list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright
- *   notice, this list of conditions and the following disclaimer in the
- *   documentation and/or other materials provided with the distribution.
- *
- *  Neither the name of 'MoPub Inc.' nor the names of its contributors
- *   may be used to endorse or promote products derived from this software
- *   without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.content.Intent;
-import android.media.MediaPlayer;
-import android.os.Handler;
-import android.util.Log;
-import android.view.MotionEvent;
-import android.view.View;
-
-import com.mopub.common.MoPubBrowser;
-import com.mopub.mobileads.util.HttpUtils;
-
-import java.util.*;
-import java.util.concurrent.*;
-
-import static com.mopub.mobileads.MraidVideoPlayerActivity.VIDEO_URL;
-
-class VastVideoView extends BaseVideoView {
-    static final String VIDEO_START_TRACKERS = "video_start_trackers";
-    static final String VIDEO_FIRST_QUARTER_TRACKERS = "video_first_quarter_trackers";
-    static final String VIDEO_MID_POINT_TRACKERS = "video_mid_point_trackers";
-    static final String VIDEO_THIRD_QUARTER_TRACKERS = "video_third_quarter_trackers";
-    static final String VIDEO_COMPLETE_TRACKERS = "video_complete_trackers";
-    static final String VIDEO_IMPRESSION_TRACKERS = "video_impression_trackers";
-    static final String VIDEO_CLICK_THROUGH_URL = "video_click_through_url";
-    static final String VIDEO_CLICK_THROUGH_TRACKERS = "video_click_through_trackers";
-
-    private static final float FIRST_QUARTER_MARKER = 0.25f;
-    private static final float MID_POINT_MARKER = 0.50f;
-    private static final float THIRD_QUARTER_MARKER = 0.75f;
-    private static final long VIDEO_PROGRESS_TIMER_CHECKER_DELAY = 50;
-
-    private static final ThreadPoolExecutor sThreadPoolExecutor = new ThreadPoolExecutor(10, 50, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());
-    public static final int MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON = 16 * 1000;
-    public static final int DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON = 5 * 1000;
-    private final BaseVideoViewListener mBaseVideoViewListener;
-
-    private String mVideoUrl;
-    private ArrayList<String> mVideoStartTrackers;
-    private ArrayList<String> mFirstQuarterTrackers;
-    private ArrayList<String> mMidPointTrackers;
-    private ArrayList<String> mThirdQuarterTrackers;
-    private ArrayList<String> mCompletionTrackers;
-    private ArrayList<String> mImpressionTrackers;
-    private String mClickThroughUrl;
-    private ArrayList<String> mClickThroughTrackers;
-    private Handler mHandler;
-    private Runnable mVideoProgressCheckerRunnable;
-    private boolean mIsVideoProgressShouldBeChecked;
-    private int mShowCloseButtonDelay = DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON;
-
-    private boolean mShowCloseButtonEventFired;
-    private boolean mIsFirstMarkHit;
-    private boolean mIsSecondMarkHit;
-    private boolean mIsThirdMarkHit;
-    private int mSeekerPositionOnPause;
-    private boolean mIsVideoFinishedPlaying;
-
-    public VastVideoView(final Context context, final Intent intent, final BaseVideoViewListener baseVideoViewListener) {
-        super(context);
-
-        mBaseVideoViewListener = baseVideoViewListener;
-        mHandler = new Handler();
-        mIsVideoProgressShouldBeChecked = true;
-        mSeekerPositionOnPause = -1;
-
-        mVideoUrl = intent.getStringExtra(VIDEO_URL);
-        mVideoStartTrackers = intent.getStringArrayListExtra(VIDEO_START_TRACKERS);
-        mFirstQuarterTrackers = intent.getStringArrayListExtra(VIDEO_FIRST_QUARTER_TRACKERS);
-        mMidPointTrackers = intent.getStringArrayListExtra(VIDEO_MID_POINT_TRACKERS);
-        mThirdQuarterTrackers = intent.getStringArrayListExtra(VIDEO_THIRD_QUARTER_TRACKERS);
-        mCompletionTrackers = intent.getStringArrayListExtra(VIDEO_COMPLETE_TRACKERS);
-        mImpressionTrackers = intent.getStringArrayListExtra(VIDEO_IMPRESSION_TRACKERS);
-        mClickThroughUrl = intent.getStringExtra(VIDEO_CLICK_THROUGH_URL);
-        mClickThroughTrackers = intent.getStringArrayListExtra(VIDEO_CLICK_THROUGH_TRACKERS);
-
-        setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
-            @Override
-            public void onPrepared(MediaPlayer mp) {
-                if (getDuration() < MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON) {
-                    mShowCloseButtonDelay = getDuration();
-                }
-            }
-        });
-
-        setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View view, MotionEvent motionEvent) {
-                if (motionEvent.getAction() == MotionEvent.ACTION_UP && shouldAllowClickThrough()) {
-                    pingOnBackgroundThread(mClickThroughTrackers);
-
-                    if (mBaseVideoViewListener != null) {
-                        mBaseVideoViewListener.videoClicked();
-                    }
-
-                    Intent moPubBrowserIntent = new Intent(context, MoPubBrowser.class);
-                    moPubBrowserIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-                    moPubBrowserIntent.putExtra(MoPubBrowser.DESTINATION_URL_KEY, mClickThroughUrl);
-                    context.startActivity(moPubBrowserIntent);
-                }
-
-                return true;
-            }
-        });
-
-        setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
-            @Override
-            public void onCompletion(MediaPlayer mp) {
-                stopProgressChecker();
-                fireShowCloseButtonEvent();
-                if (mBaseVideoViewListener != null) {
-                    mBaseVideoViewListener.videoCompleted(false);
-                }
-                pingOnBackgroundThread(mCompletionTrackers);
-
-                mIsVideoFinishedPlaying = true;
-            }
-        });
-
-        setOnErrorListener(new MediaPlayer.OnErrorListener() {
-            @Override
-            public boolean onError(MediaPlayer mediaPlayer, int what, int extra) {
-                stopProgressChecker();
-
-                if (baseVideoViewListener != null) {
-                    baseVideoViewListener.videoError(false);
-                }
-
-                return false;
-            }
-        });
-
-        mVideoProgressCheckerRunnable = new Runnable() {
-            @Override
-            public void run() {
-                float videoLength = getDuration();
-                if (videoLength > 0) {
-                    float progressPercentage = getCurrentPosition() / videoLength;
-
-                    if (progressPercentage > FIRST_QUARTER_MARKER && !mIsFirstMarkHit) {
-                        mIsFirstMarkHit = true;
-                        pingOnBackgroundThread(mFirstQuarterTrackers);
-                    }
-
-                    if (progressPercentage > MID_POINT_MARKER && !mIsSecondMarkHit) {
-                        mIsSecondMarkHit = true;
-                        pingOnBackgroundThread(mMidPointTrackers);
-                    }
-
-                    if (progressPercentage > THIRD_QUARTER_MARKER && !mIsThirdMarkHit) {
-                        mIsThirdMarkHit = true;
-                        pingOnBackgroundThread(mThirdQuarterTrackers);
-                    }
-
-                    if (shouldShowCloseButton()) {
-                        fireShowCloseButtonEvent();
-                    }
-                }
-
-                if (mIsVideoProgressShouldBeChecked) {
-                    mHandler.postDelayed(mVideoProgressCheckerRunnable, VIDEO_PROGRESS_TIMER_CHECKER_DELAY);
-                }
-            }
-        };
-
-        setVideoPath(mVideoUrl);
-        requestFocus();
-
-        pingOnBackgroundThread(mVideoStartTrackers);
-        pingOnBackgroundThread(mImpressionTrackers);
-
-        mHandler.post(mVideoProgressCheckerRunnable);
-    }
-
-    private void fireShowCloseButtonEvent() {
-        mShowCloseButtonEventFired = true;
-
-        if (mBaseVideoViewListener != null) {
-            mBaseVideoViewListener.showCloseButton();
-        }
-    }
-
-    private boolean shouldShowCloseButton() {
-        return !mShowCloseButtonEventFired && getCurrentPosition() > mShowCloseButtonDelay;
-    }
-
-    private boolean shouldAllowClickThrough(){
-        return mShowCloseButtonEventFired;
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-        stopProgressChecker();
-
-        mSeekerPositionOnPause = getCurrentPosition();
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-
-        mIsVideoProgressShouldBeChecked = true;
-        mHandler.post(mVideoProgressCheckerRunnable);
-
-        seekTo(mSeekerPositionOnPause);
-
-        if (!mIsVideoFinishedPlaying) {
-            start();
-        }
-    }
-
-    private void pingOnBackgroundThread(List<String> urls) {
-        if (urls == null) {
-            return;
-        }
-
-        for (final String url : urls) {
-            sThreadPoolExecutor.execute(new Runnable() {
-                @Override
-                public void run() {
-                    try {
-                        HttpUtils.ping(url);
-                    } catch (Exception e) {
-                        Log.d("MoPub", "Unable to track video impression url: " + url);
-                    }
-                }
-            });
-        }
-    }
-
-    private void stopProgressChecker() {
-        mIsVideoProgressShouldBeChecked = false;
-        mHandler.removeCallbacks(mVideoProgressCheckerRunnable);
-    }
-
-    @Deprecated // for testing
-    void setIsVideoProgressShouldBeChecked(boolean value) {
-        mIsVideoProgressShouldBeChecked = value;
-    }
-
-    @Deprecated // for testing
-    int getShowCloseButtonDelay() {
-        return mShowCloseButtonDelay;
-    }
-
-    @Deprecated // for testing
-    void setCloseButtonVisible(boolean visible) {
-        mShowCloseButtonEventFired = visible;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
new file mode 100644
index 00000000..717b5ab2
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
@@ -0,0 +1,542 @@
+/*
+ * Copyright (c) 2010-2013, MoPub Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *  Redistributions of source code must retain the above copyright
+ *   notice, this list of conditions and the following disclaimer.
+ *
+ *  Redistributions in binary form must reproduce the above copyright
+ *   notice, this list of conditions and the following disclaimer in the
+ *   documentation and/or other materials provided with the distribution.
+ *
+ *  Neither the name of 'MoPub Inc.' nor the names of its contributors
+ *   may be used to endorse or promote products derived from this software
+ *   without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.graphics.Color;
+import android.graphics.drawable.Drawable;
+import android.graphics.drawable.GradientDrawable;
+import android.graphics.drawable.LayerDrawable;
+import android.media.MediaPlayer;
+import android.os.Bundle;
+import android.os.Handler;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+import android.widget.VideoView;
+
+import com.mopub.common.DownloadResponse;
+import com.mopub.common.DownloadTask;
+import com.mopub.common.HttpResponses;
+import com.mopub.common.MoPubBrowser;
+import com.mopub.common.util.AsyncTasks;
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Drawables;
+import com.mopub.common.util.MoPubLog;
+import com.mopub.common.util.Streams;
+import com.mopub.common.util.VersionCode;
+import com.mopub.mobileads.util.vast.VastCompanionAd;
+import com.mopub.mobileads.util.vast.VastVideoConfiguration;
+
+import org.apache.http.HttpStatus;
+import org.apache.http.client.methods.HttpGet;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.Serializable;
+import java.util.List;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+
+import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
+import static com.mopub.common.HttpClient.makeTrackingHttpRequest;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+
+public class VastVideoViewController extends BaseVideoViewController implements DownloadTask.DownloadTaskListener {
+    static final String VAST_VIDEO_CONFIGURATION = "vast_video_configuration";
+
+    private static final float FIRST_QUARTER_MARKER = 0.25f;
+    private static final float MID_POINT_MARKER = 0.50f;
+    private static final float THIRD_QUARTER_MARKER = 0.75f;
+    private static final long VIDEO_PROGRESS_TIMER_CHECKER_DELAY = 50;
+    private static final int MOPUB_BROWSER_REQUEST_CODE = 1;
+    private static final int MAX_VIDEO_RETRIES = 1;
+    private static final int VIDEO_VIEW_FILE_PERMISSION_ERROR = Integer.MIN_VALUE;
+
+    private static final ThreadPoolExecutor sThreadPoolExecutor = new ThreadPoolExecutor(10, 50, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());
+    static final int DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON = 5 * 1000;
+    static final int MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON = 16 * 1000;
+
+    private final VastVideoConfiguration mVastVideoConfiguration;
+    private final VastCompanionAd mVastCompanionAd;
+    private final VastVideoToolbar mVastVideoToolbar;
+    private final VideoView mVideoView;
+    private final ImageView mCompanionAdImageView;
+    private final View.OnTouchListener mClickThroughListener;
+
+    private final Handler mHandler;
+    private final Runnable mVideoProgressCheckerRunnable;
+    private boolean mIsVideoProgressShouldBeChecked;
+    private int mShowCloseButtonDelay = DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON;
+
+    private boolean mShowCloseButtonEventFired;
+    private boolean mIsStartMarkHit;
+    private boolean mIsFirstMarkHit;
+    private boolean mIsSecondMarkHit;
+    private boolean mIsThirdMarkHit;
+    private int mSeekerPositionOnPause;
+    private boolean mIsVideoFinishedPlaying;
+    private int mVideoRetries;
+
+    VastVideoViewController(final Context context,
+            final Bundle bundle,
+            final long broadcastIdentifier,
+            final BaseVideoViewControllerListener baseVideoViewControllerListener)
+            throws IllegalStateException {
+        super(context, broadcastIdentifier, baseVideoViewControllerListener);
+        mHandler = new Handler();
+        mIsVideoProgressShouldBeChecked = false;
+        mSeekerPositionOnPause = -1;
+        mVideoRetries = 0;
+
+        Serializable serializable = bundle.getSerializable(VAST_VIDEO_CONFIGURATION);
+        if (serializable != null && serializable instanceof VastVideoConfiguration) {
+            mVastVideoConfiguration = (VastVideoConfiguration) serializable;
+        } else {
+            throw new IllegalStateException("VastVideoConfiguration is invalid");
+        }
+
+        if (mVastVideoConfiguration.getDiskMediaFileUrl() == null) {
+            throw new IllegalStateException("VastVideoConfiguration does not have a video disk path");
+        }
+
+        mVastCompanionAd = mVastVideoConfiguration.getVastCompanionAd();
+
+        mClickThroughListener = new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View view, MotionEvent motionEvent) {
+                if (motionEvent.getAction() == MotionEvent.ACTION_UP && shouldAllowClickThrough()) {
+                    handleClick(
+                            mVastVideoConfiguration.getClickTrackers(),
+                            mVastVideoConfiguration.getClickThroughUrl()
+                    );
+                }
+                return true;
+            }
+        };
+
+        createVideoBackground(context);
+
+        mVideoView = createVideoView(context);
+        mVideoView.requestFocus();
+
+        mVastVideoToolbar = createVastVideoToolBar(context);
+        getLayout().addView(mVastVideoToolbar);
+
+        mCompanionAdImageView = createCompanionAdImageView(context);
+
+        makeTrackingHttpRequest(mVastVideoConfiguration.getImpressionTrackers());
+
+        mVideoProgressCheckerRunnable = createVideoProgressCheckerRunnable();
+    }
+
+    @Override
+    VideoView getVideoView() {
+        return mVideoView;
+    }
+
+    @Override
+    void onCreate() {
+        super.onCreate();
+        getBaseVideoViewControllerListener().onSetRequestedOrientation(SCREEN_ORIENTATION_LANDSCAPE);
+
+        broadcastAction(ACTION_INTERSTITIAL_SHOW);
+
+        downloadCompanionAd();
+    }
+
+    @Override
+    void onResume() {
+        // When resuming, VideoView needs to reinitialize its MediaPlayer with the video path
+        // and therefore reset the count to zero, to let it retry on error
+        mVideoRetries = 0;
+        startProgressChecker();
+
+        mVideoView.seekTo(mSeekerPositionOnPause);
+        if (!mIsVideoFinishedPlaying) {
+            mVideoView.start();
+        }
+    }
+
+    @Override
+    void onPause() {
+        stopProgressChecker();
+        mSeekerPositionOnPause = mVideoView.getCurrentPosition();
+        mVideoView.pause();
+    }
+
+    @Override
+    void onDestroy() {
+        stopProgressChecker();
+        broadcastAction(ACTION_INTERSTITIAL_DISMISS);
+    }
+
+    // Enable the device's back button when the video close button has been displayed
+    @Override
+    boolean backButtonEnabled() {
+        return mShowCloseButtonEventFired;
+    }
+
+    @Override
+    void onActivityResult(final int requestCode, final int resultCode, final Intent data) {
+        if (requestCode == MOPUB_BROWSER_REQUEST_CODE && resultCode == Activity.RESULT_OK) {
+            getBaseVideoViewControllerListener().onFinish();
+        }
+    }
+
+    // DownloadTaskListener
+    @Override
+    public void onComplete(String url, DownloadResponse downloadResponse) {
+        if (downloadResponse != null && downloadResponse.getStatusCode() == HttpStatus.SC_OK) {
+            final Bitmap companionAdBitmap = HttpResponses.asBitmap(downloadResponse);
+            if (companionAdBitmap != null) {
+                // If Bitmap fits in ImageView, then don't use MATCH_PARENT
+                final int width = Dips.dipsToIntPixels(companionAdBitmap.getWidth(), getContext());
+                final int height = Dips.dipsToIntPixels(companionAdBitmap.getHeight(), getContext());
+                final int imageViewWidth = mCompanionAdImageView.getMeasuredWidth();
+                final int imageViewHeight = mCompanionAdImageView.getMeasuredHeight();
+                if (width < imageViewWidth && height < imageViewHeight) {
+                    mCompanionAdImageView.getLayoutParams().width = width;
+                    mCompanionAdImageView.getLayoutParams().height = height;
+                }
+                mCompanionAdImageView.setImageBitmap(companionAdBitmap);
+                mCompanionAdImageView.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View view) {
+                        if (mVastCompanionAd != null) {
+                            handleClick(
+                                    mVastCompanionAd.getClickTrackers(),
+                                    mVastCompanionAd.getClickThroughUrl()
+                            );
+                        }
+                    }
+                });
+            }
+        }
+    }
+
+    private void downloadCompanionAd() {
+        if (mVastCompanionAd != null) {
+            try {
+                final HttpGet httpGet = new HttpGet(mVastCompanionAd.getImageUrl());
+                DownloadTask downloadTask = new DownloadTask(this);
+                AsyncTasks.safeExecuteOnExecutor(downloadTask, httpGet);
+            } catch (Exception e) {
+                MoPubLog.d("Failed to download companion ad", e);
+            }
+        }
+    }
+
+    private Runnable createVideoProgressCheckerRunnable() {
+        return new Runnable() {
+            @Override
+            public void run() {
+                float videoLength = mVideoView.getDuration();
+                float currentPosition = mVideoView.getCurrentPosition();
+
+                if (videoLength > 0) {
+                    float progressPercentage = currentPosition / videoLength;
+
+                    if (!mIsStartMarkHit && currentPosition >= 1000) {
+                        mIsStartMarkHit = true;
+                        makeTrackingHttpRequest(mVastVideoConfiguration.getStartTrackers());
+                    }
+
+                    if (!mIsFirstMarkHit && progressPercentage > FIRST_QUARTER_MARKER) {
+                        mIsFirstMarkHit = true;
+                        makeTrackingHttpRequest(mVastVideoConfiguration.getFirstQuartileTrackers());
+                    }
+
+                    if (!mIsSecondMarkHit && progressPercentage > MID_POINT_MARKER) {
+                        mIsSecondMarkHit = true;
+                        makeTrackingHttpRequest(mVastVideoConfiguration.getMidpointTrackers());
+                    }
+
+                    if (!mIsThirdMarkHit && progressPercentage > THIRD_QUARTER_MARKER) {
+                        mIsThirdMarkHit = true;
+                        makeTrackingHttpRequest(mVastVideoConfiguration.getThirdQuartileTrackers());
+                    }
+
+                    if (isLongVideo(mVideoView.getDuration()) ) {
+                        mVastVideoToolbar.updateCountdownWidget(mShowCloseButtonDelay - mVideoView.getCurrentPosition());
+                    }
+
+                    if (shouldBeInteractable()) {
+                        makeVideoInteractable();
+                    }
+                }
+
+                mVastVideoToolbar.updateDurationWidget(mVideoView.getDuration() - mVideoView.getCurrentPosition());
+
+                if (mIsVideoProgressShouldBeChecked) {
+                    mHandler.postDelayed(mVideoProgressCheckerRunnable, VIDEO_PROGRESS_TIMER_CHECKER_DELAY);
+                }
+            }
+        };
+    }
+
+    private void createVideoBackground(final Context context) {
+        GradientDrawable gradientDrawable = new GradientDrawable(
+                GradientDrawable.Orientation.TOP_BOTTOM,
+                new int[] {Color.argb(0,0,0,0), Color.argb(255,0,0,0)}
+        );
+        Drawable[] layers = new Drawable[2];
+        layers[0] = Drawables.THATCHED_BACKGROUND.decodeImage(context);
+        layers[1] = gradientDrawable;
+        LayerDrawable layerList = new LayerDrawable(layers);
+        getLayout().setBackgroundDrawable(layerList);
+    }
+
+    private VastVideoToolbar createVastVideoToolBar(final Context context) {
+        final VastVideoToolbar vastVideoToolbar = new VastVideoToolbar(context);
+        vastVideoToolbar.setCloseButtonOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View view, MotionEvent motionEvent) {
+                if (motionEvent.getAction() == MotionEvent.ACTION_UP) {
+                    getBaseVideoViewControllerListener().onFinish();
+                }
+                return true;
+            }
+        });
+        vastVideoToolbar.setLearnMoreButtonOnTouchListener(mClickThroughListener);
+        return vastVideoToolbar;
+    }
+
+    private VideoView createVideoView(final Context context) {
+        final VideoView videoView = new VideoView(context);
+        videoView.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
+            @Override
+            public void onPrepared(MediaPlayer mp) {
+                if (mVideoView.getDuration() < MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON) {
+                    mShowCloseButtonDelay = mVideoView.getDuration();
+                }
+            }
+        });
+        videoView.setOnTouchListener(mClickThroughListener);
+
+        videoView.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
+            @Override
+            public void onCompletion(MediaPlayer mp) {
+                stopProgressChecker();
+                makeVideoInteractable();
+
+                videoCompleted(false);
+
+                makeTrackingHttpRequest(mVastVideoConfiguration.getCompleteTrackers());
+                mIsVideoFinishedPlaying = true;
+
+                videoView.setVisibility(View.GONE);
+                // check the drawable to see if the image view was populated with content
+                if (mCompanionAdImageView.getDrawable() != null) {
+                    mCompanionAdImageView.setVisibility(View.VISIBLE);
+                }
+            }
+        });
+
+        videoView.setOnErrorListener(new MediaPlayer.OnErrorListener() {
+            @Override
+            public boolean onError(final MediaPlayer mediaPlayer, final int what, final int extra) {
+                if (retryMediaPlayer(mediaPlayer, what, extra)) {
+                    return true;
+                } else {
+                    stopProgressChecker();
+                    makeVideoInteractable();
+                    videoError(false);
+                    return false;
+                }
+            }
+        });
+
+        videoView.setVideoPath(mVastVideoConfiguration.getDiskMediaFileUrl());
+
+        return videoView;
+    }
+
+    boolean retryMediaPlayer(final MediaPlayer mediaPlayer, final int what, final int extra) {
+        // XXX
+        // VideoView has a bug in versions lower than Jelly Bean, Api Level 16, Android 4.1
+        // For api < 16, VideoView is not able to read files written to disk since it reads them in
+        // a Context different from the Application and therefore does not have correct permission.
+        // To solve this problem we obtain the video file descriptor ourselves with valid permissions
+        // and pass it to the underlying MediaPlayer in VideoView.
+        if (VersionCode.currentApiLevel().isBelow(VersionCode.JELLY_BEAN)
+                && what == MediaPlayer.MEDIA_ERROR_UNKNOWN
+                && extra == VIDEO_VIEW_FILE_PERMISSION_ERROR
+                && mVideoRetries < MAX_VIDEO_RETRIES) {
+
+            FileInputStream inputStream = null;
+            try {
+                mediaPlayer.reset();
+                final File file = new File(mVastVideoConfiguration.getDiskMediaFileUrl());
+                inputStream = new FileInputStream(file);
+                mediaPlayer.setDataSource(inputStream.getFD());
+
+                // XXX
+                // VideoView has a callback registered with the MediaPlayer to set a flag when the
+                // media file has been prepared. Start also sets a flag in VideoView indicating the
+                // desired state is to play the video. Therefore, whichever method finishes last
+                // will check both flags and begin playing the video.
+                mediaPlayer.prepareAsync();
+                mVideoView.start();
+                return true;
+            } catch (Exception e) {
+                return false;
+            } finally {
+                Streams.closeStream(inputStream);
+                mVideoRetries++;
+            }
+        }
+        return false;
+    }
+
+    private ImageView createCompanionAdImageView(final Context context) {
+        RelativeLayout relativeLayout = new RelativeLayout(context);
+        relativeLayout.setGravity(Gravity.CENTER);
+        RelativeLayout.LayoutParams layoutParams =
+                new RelativeLayout.LayoutParams(
+                        RelativeLayout.LayoutParams.MATCH_PARENT,
+                        RelativeLayout.LayoutParams.MATCH_PARENT);
+        layoutParams.addRule(RelativeLayout.BELOW, mVastVideoToolbar.getId());
+        getLayout().addView(relativeLayout, layoutParams);
+
+        ImageView imageView = new ImageView(context);
+        // Set to invisible to have it be drawn to calculate size
+        imageView.setVisibility(View.INVISIBLE);
+
+        final RelativeLayout.LayoutParams companionAdLayout = new RelativeLayout.LayoutParams(
+                RelativeLayout.LayoutParams.MATCH_PARENT,
+                RelativeLayout.LayoutParams.MATCH_PARENT
+        );
+
+        relativeLayout.addView(imageView, companionAdLayout);
+        return imageView;
+    }
+
+    private void handleClick(final List<String> clickThroughTrackers, final String clickThroughUrl) {
+        makeTrackingHttpRequest(clickThroughTrackers);
+
+        videoClicked();
+
+        Bundle bundle = new Bundle();
+        bundle.putString(MoPubBrowser.DESTINATION_URL_KEY, clickThroughUrl);
+
+        getBaseVideoViewControllerListener().onStartActivityForResult(MoPubBrowser.class,
+                MOPUB_BROWSER_REQUEST_CODE, bundle);
+    }
+
+    private boolean isLongVideo(final int duration) {
+        return (duration >= MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON);
+    }
+
+    private void makeVideoInteractable() {
+        mShowCloseButtonEventFired = true;
+        mVastVideoToolbar.makeInteractable();
+    }
+
+    private boolean shouldBeInteractable() {
+        return !mShowCloseButtonEventFired && mVideoView.getCurrentPosition() > mShowCloseButtonDelay;
+    }
+
+    private boolean shouldAllowClickThrough() {
+        return mShowCloseButtonEventFired;
+    }
+
+    private void startProgressChecker() {
+        if (!mIsVideoProgressShouldBeChecked) {
+            mIsVideoProgressShouldBeChecked = true;
+            mHandler.post(mVideoProgressCheckerRunnable);
+        }
+    }
+
+    private void stopProgressChecker() {
+        if (mIsVideoProgressShouldBeChecked) {
+            mIsVideoProgressShouldBeChecked = false;
+            mHandler.removeCallbacks(mVideoProgressCheckerRunnable);
+        }
+    }
+
+    // for testing
+    @Deprecated
+    boolean getIsVideoProgressShouldBeChecked() {
+        return mIsVideoProgressShouldBeChecked;
+    }
+
+    // for testing
+    @Deprecated
+    int getVideoRetries() {
+        return mVideoRetries;
+    }
+
+    // for testing
+    @Deprecated
+    Runnable getVideoProgressCheckerRunnable() {
+        return mVideoProgressCheckerRunnable;
+    }
+
+    // for testing
+    @Deprecated
+    int getShowCloseButtonDelay() {
+        return mShowCloseButtonDelay;
+    }
+
+    // for testing
+    @Deprecated
+    boolean isShowCloseButtonEventFired() {
+        return mShowCloseButtonEventFired;
+    }
+
+    // for testing
+    @Deprecated
+    void setCloseButtonVisible(boolean visible) {
+        mShowCloseButtonEventFired = visible;
+    }
+
+    // for testing
+    @Deprecated
+    boolean isVideoFinishedPlaying() {
+        return mIsVideoFinishedPlaying;
+    }
+
+    // for testing
+    @Deprecated
+    ImageView getCompanionAdImageView() {
+        return mCompanionAdImageView;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
index 623bb3dd..d562ffcc 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
@@ -1,16 +1,18 @@
 package com.mopub.mobileads.factories;
 
+import android.content.Context;
+
 import com.mopub.mobileads.util.vast.VastManager;
 
 public class VastManagerFactory {
     protected static VastManagerFactory instance = new VastManagerFactory();
 
-    public static VastManager create() {
-        return instance.internalCreate();
+    public static VastManager create(final Context context) {
+        return instance.internalCreate(context);
     }
 
-    public VastManager internalCreate() {
-        return new VastManager();
+    public VastManager internalCreate(final Context context) {
+        return new VastManager(context);
     }
 
     @Deprecated // for testing
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastVideoDownloadTaskFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastVideoDownloadTaskFactory.java
index 8f5562ab..a9e9f9d5 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastVideoDownloadTaskFactory.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastVideoDownloadTaskFactory.java
@@ -32,11 +32,8 @@
 
 package com.mopub.mobileads.factories;
 
-import com.mopub.mobileads.DiskLruCache;
 import com.mopub.mobileads.VastVideoDownloadTask;
 
-import static com.mopub.mobileads.VastVideoDownloadTask.OnDownloadCompleteListener;
-
 public class VastVideoDownloadTaskFactory {
     private static VastVideoDownloadTaskFactory instance = new VastVideoDownloadTaskFactory();
 
@@ -45,11 +42,11 @@ public static void setInstance(VastVideoDownloadTaskFactory factory){
         instance = factory;
     }
 
-    public static VastVideoDownloadTask create(OnDownloadCompleteListener onDownloadCompleteListener, DiskLruCache diskLruCache) {
-        return instance.internalCreate(onDownloadCompleteListener, diskLruCache);
+    public static VastVideoDownloadTask create(VastVideoDownloadTask.VastVideoDownloadTaskListener vastVideoDownloadTaskListener) {
+        return instance.internalCreate(vastVideoDownloadTaskListener);
     }
 
-    protected VastVideoDownloadTask internalCreate(OnDownloadCompleteListener onDownloadCompleteListener, DiskLruCache diskLruCache) {
-        return new VastVideoDownloadTask(onDownloadCompleteListener, diskLruCache);
+    protected VastVideoDownloadTask internalCreate(VastVideoDownloadTask.VastVideoDownloadTaskListener vastVideoDownloadTaskListener) {
+        return new VastVideoDownloadTask(vastVideoDownloadTaskListener);
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CircleDrawable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CircleDrawable.java
new file mode 100644
index 00000000..3d604a87
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CircleDrawable.java
@@ -0,0 +1,58 @@
+package com.mopub.mobileads.resource;
+
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.ColorFilter;
+import android.graphics.Paint;
+import android.graphics.drawable.Drawable;
+
+public abstract class CircleDrawable extends Drawable {
+    private final Paint mPaint;
+
+    public CircleDrawable() {
+        super();
+
+        mPaint = new Paint();
+
+        mPaint.setAntiAlias(true);
+        mPaint.setStrokeWidth(3);
+        mPaint.setColor(Color.WHITE);
+        mPaint.setStyle(Paint.Style.STROKE);
+    }
+
+    @Override
+    public void draw(final Canvas canvas) {
+        canvas.drawCircle(getCenterX(), getCenterY(), getRadius(), mPaint);
+    }
+
+    @Override
+    public void setAlpha(int i) {
+
+    }
+
+    @Override
+    public void setColorFilter(ColorFilter colorFilter) {
+
+    }
+
+    @Override
+    public int getOpacity() {
+        return 0;
+    }
+
+    protected Paint getPaint() {
+        return mPaint;
+    }
+
+    protected int getCenterX() {
+        return getBounds().width() / 2;
+    }
+
+    protected int getCenterY() {
+        return getBounds().height() / 2;
+    }
+
+    protected int getRadius() {
+        return Math.min(getCenterX(), getCenterY());
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
new file mode 100644
index 00000000..af32b51a
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
@@ -0,0 +1,48 @@
+package com.mopub.mobileads.resource;
+
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Path;
+import android.graphics.Point;
+
+public class CloseButtonDrawable extends CircleDrawable {
+    private Point centerPoint;
+    private Point bottomLeftPoint;
+    private Point topLeftPoint;
+    private Point topRightPoint;
+    private Point bottomRightPoint;
+    private final Paint closeButtonPaint;
+    private int mDisplacement;
+
+    public CloseButtonDrawable() {
+        super();
+
+        closeButtonPaint = new Paint(getPaint());
+        closeButtonPaint.setStrokeWidth(4.5f);
+        closeButtonPaint.setStrokeCap(Paint.Cap.ROUND);
+    }
+
+    @Override
+    public void draw(final Canvas canvas) {
+        super.draw(canvas);
+
+        mDisplacement = (int) (0.5f * getRadius() / (float) Math.sqrt(2f));
+
+        centerPoint = new Point(getCenterX(), getCenterY());
+
+        bottomLeftPoint = new Point(centerPoint);
+        bottomLeftPoint.offset(-mDisplacement, mDisplacement);
+
+        topLeftPoint = new Point(centerPoint);
+        topLeftPoint.offset(-mDisplacement, -mDisplacement);
+
+        topRightPoint = new Point(centerPoint);
+        topRightPoint.offset(mDisplacement, -mDisplacement);
+
+        bottomRightPoint = new Point(centerPoint);
+        bottomRightPoint.offset(mDisplacement, mDisplacement);
+
+        canvas.drawLine(bottomLeftPoint.x, bottomLeftPoint.y, topRightPoint.x, topRightPoint.y, closeButtonPaint);
+        canvas.drawLine(topLeftPoint.x, topLeftPoint.y, bottomRightPoint.x, bottomRightPoint.y, closeButtonPaint);
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CountdownDrawable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CountdownDrawable.java
new file mode 100644
index 00000000..16fb2074
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CountdownDrawable.java
@@ -0,0 +1,60 @@
+package com.mopub.mobileads.resource;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Rect;
+
+import com.mopub.common.util.Dips;
+
+public class CountdownDrawable extends CircleDrawable implements TextDrawable {
+    private final static float TEXT_SIZE_SP = 18f;
+    private final Paint mTextPaint;
+    private String mSecondsRemaining;
+    private final float textSizePixels;
+    private Rect mTextRect;
+
+    public CountdownDrawable(final Context context) {
+        super();
+
+        mSecondsRemaining = "";
+
+        mTextPaint = new Paint();
+
+        textSizePixels = Dips.dipsToFloatPixels(TEXT_SIZE_SP, context);
+
+        mTextPaint.setTextSize(textSizePixels);
+        mTextPaint.setAntiAlias(true);
+        mTextPaint.setColor(Color.WHITE);
+        mTextPaint.setStyle(Paint.Style.FILL);
+        mTextPaint.setTextAlign(Paint.Align.LEFT);
+
+        mTextRect = new Rect();
+    }
+
+    @Override
+    public void draw(final Canvas canvas) {
+        super.draw(canvas);
+
+        final String text = String.valueOf(mSecondsRemaining);
+
+        mTextPaint.getTextBounds(text, 0, text.length(), mTextRect);
+
+        final int x = getCenterX() - mTextRect.width() / 2;
+        final int y = getCenterY() + mTextRect.height() / 2;
+
+        canvas.drawText(text, x, y, mTextPaint);
+    }
+
+    /**
+     * TextDrawable implementation
+     */
+
+    public void updateText(final String text) {
+        if (!mSecondsRemaining.equals(text)) {
+            mSecondsRemaining = text;
+            invalidateSelf();
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/LearnMoreDrawable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/LearnMoreDrawable.java
new file mode 100644
index 00000000..0ab64cc8
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/LearnMoreDrawable.java
@@ -0,0 +1,51 @@
+package com.mopub.mobileads.resource;
+
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Point;
+
+public class LearnMoreDrawable extends CircleDrawable {
+
+    private final Paint learnMorePaint;
+    private Point centerPoint;
+    private Point bottomLeftPoint;
+    private Point topRightPoint;
+    private Point leftBarbPoint;
+    private Point rightBarbPoint;
+    private int mDisplacement;
+    private int mBarbLength;
+
+    public LearnMoreDrawable() {
+        super();
+
+        learnMorePaint = new Paint(getPaint());
+        learnMorePaint.setStrokeWidth(4.5f);
+        learnMorePaint.setStrokeCap(Paint.Cap.ROUND);
+    }
+
+    @Override
+    public void draw(final Canvas canvas) {
+        super.draw(canvas);
+
+        mDisplacement = (int) (0.5f * getRadius() / Math.sqrt(2f));
+        mBarbLength = (int) (1.5f * mDisplacement);
+
+        centerPoint = new Point(getCenterX(), getCenterY());
+
+        bottomLeftPoint = new Point(centerPoint);
+        bottomLeftPoint.offset(-mDisplacement, mDisplacement);
+
+        topRightPoint = new Point(centerPoint);
+        topRightPoint.offset(mDisplacement, -mDisplacement);
+
+        leftBarbPoint = new Point(topRightPoint);
+        leftBarbPoint.offset(-mBarbLength, 0);
+
+        rightBarbPoint = new Point(topRightPoint);
+        rightBarbPoint.offset(0, mBarbLength);
+
+        canvas.drawLine(bottomLeftPoint.x, bottomLeftPoint.y, topRightPoint.x, topRightPoint.y, learnMorePaint);
+        canvas.drawLine(topRightPoint.x, topRightPoint.y, leftBarbPoint.x, leftBarbPoint.y, learnMorePaint);
+        canvas.drawLine(topRightPoint.x, topRightPoint.y, rightBarbPoint.x, rightBarbPoint.y, learnMorePaint);
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
index 73271ecb..3b128491 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
@@ -162,7 +162,7 @@
             "\n" +
             "  // Constants. ////////////////////////////////////////////////////////////////////////////////////\n" +
             "\n" +
-            "  var VERSION = mraid.VERSION = '2.0';\n" +
+            "  var VERSION = mraid.VERSION = '1.0';\n" +
             "\n" +
             "  var STATES = mraid.STATES = {\n" +
             "    LOADING: 'loading',     // Initial state.\n" +
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/TextDrawable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/TextDrawable.java
new file mode 100644
index 00000000..46b60a4c
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/TextDrawable.java
@@ -0,0 +1,5 @@
+package com.mopub.mobileads.resource;
+
+public interface TextDrawable {
+    public void updateText(final String text);
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpResponses.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpResponses.java
index 7552b725..b5802fd3 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpResponses.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpResponses.java
@@ -32,11 +32,13 @@
 
 package com.mopub.mobileads.util;
 
+import com.mopub.common.util.ResponseHeader;
+
 import org.apache.http.Header;
 import org.apache.http.HttpResponse;
 
 import java.text.NumberFormat;
-import java.util.*;
+import java.util.Locale;
 
 public class HttpResponses {
     public static String extractHeader(HttpResponse response, ResponseHeader responseHeader) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpUtils.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpUtils.java
deleted file mode 100644
index 87e647ea..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpUtils.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * Copyright (c) 2010-2013, MoPub Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *
- *  Redistributions of source code must retain the above copyright
- *   notice, this list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright
- *   notice, this list of conditions and the following disclaimer in the
- *   documentation and/or other materials provided with the distribution.
- *
- *  Neither the name of 'MoPub Inc.' nor the names of its contributors
- *   may be used to endorse or promote products derived from this software
- *   without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package com.mopub.mobileads.util;
-
-import com.mopub.mobileads.factories.HttpClientFactory;
-import org.apache.http.HttpResponse;
-import org.apache.http.client.methods.HttpGet;
-import org.apache.http.impl.client.DefaultHttpClient;
-
-import java.io.*;
-
-public class HttpUtils {
-
-    public static HttpResponse ping(String url) throws IOException, IllegalArgumentException {
-        if (url == null) {
-            throw new IllegalArgumentException("Url must not be null.");
-        }
-
-        HttpGet request = new HttpGet(url);
-        DefaultHttpClient defaultHttpClient = HttpClientFactory.create();
-        return defaultHttpClient.execute(request);
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastCompanionAd.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastCompanionAd.java
new file mode 100644
index 00000000..55609e52
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastCompanionAd.java
@@ -0,0 +1,48 @@
+package com.mopub.mobileads.util.vast;
+
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.List;
+
+public class VastCompanionAd implements Serializable {
+    private static final long serialVersionUID = 0L;
+
+    private final Integer mWidth;
+    private final Integer mHeight;
+    private final String mImageUrl;
+    private final String mClickThroughUrl;
+    private final ArrayList<String> mClickTrackers;
+
+    public VastCompanionAd(
+            Integer width,
+            Integer height,
+            String imageUrl,
+            String clickThroughUrl,
+            ArrayList<String> clickTrackers) {
+        mWidth = width;
+        mHeight = height;
+        mImageUrl = imageUrl;
+        mClickThroughUrl = clickThroughUrl;
+        mClickTrackers = clickTrackers;
+    }
+
+    public Integer getWidth() {
+        return mWidth;
+    }
+
+    public Integer getHeight() {
+        return mHeight;
+    }
+
+    public String getImageUrl() {
+        return mImageUrl;
+    }
+
+    public String getClickThroughUrl() {
+        return mClickThroughUrl;
+    }
+
+    public List<String> getClickTrackers() {
+        return mClickTrackers;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java
index da600cfd..b3fa2bcb 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java
@@ -1,185 +1,270 @@
 package com.mopub.mobileads.util.vast;
 
-import android.os.AsyncTask;
-import android.util.Log;
-
-import com.mopub.common.util.Strings;
-import com.mopub.mobileads.factories.HttpClientFactory;
-import com.mopub.mobileads.util.HttpClients;
-
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpResponse;
-import org.apache.http.client.HttpClient;
-import org.apache.http.client.methods.HttpGet;
-
-import java.util.*;
-
-public class VastManager {
-    static final int MAX_TIMES_TO_FOLLOW_VAST_REDIRECT = 20; // more than reasonable number of nested VAST urls to follow
-    static final int VAST_REDIRECT_TIMEOUT_MILLISECONDS = 30 * 1000; // 30 seconds
-
-    private List<String> mImpressionTrackers;
-    private List<String> mVideoStartTrackers;
-    private List<String> mVideoFirstQuartileTrackers;
-    private List<String> mVideoMidpointTrackers;
-    private List<String> mVideoThirdQuartileTrackers;
-    private List<String> mVideoCompleteTrackers;
-    private String mClickThroughUrl;
-    private List<String> mClickTrackers;
-    private String mMediaFileUrl;
-
-    private int mTimesFollowedVastRedirect;
-    private HttpClient mHttpClient;
-    private VastManagerListener mListener;
-
-    private ProcessVastBackgroundTask mVastBackgroundTask;
-
-    public VastManager() {
-        mImpressionTrackers = new ArrayList<String>();
-        mVideoStartTrackers = new ArrayList<String>();
-        mVideoFirstQuartileTrackers = new ArrayList<String>();
-        mVideoMidpointTrackers = new ArrayList<String>();
-        mVideoThirdQuartileTrackers = new ArrayList<String>();
-        mVideoCompleteTrackers = new ArrayList<String>();
-        mClickTrackers = new ArrayList<String>();
-
-        mHttpClient = HttpClientFactory.create(VAST_REDIRECT_TIMEOUT_MILLISECONDS);
-    }
+import android.content.Context;
+import android.view.Display;
+import android.view.WindowManager;
 
-    public void processVast(String vastXml, VastManagerListener listener) {
-        if (mVastBackgroundTask == null) {
-            mListener = listener;
-            mVastBackgroundTask = new ProcessVastBackgroundTask();
-            mVastBackgroundTask.execute(vastXml);
-        }
-    }
+import com.mopub.common.CacheService;
+import com.mopub.common.util.AsyncTasks;
+import com.mopub.common.util.MoPubLog;
+import com.mopub.mobileads.VastVideoDownloadTask;
 
-    public List<String> getImpressionTrackers() {
-        return mImpressionTrackers;
-    }
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
 
-    public List<String> getVideoStartTrackers() {
-        return mVideoStartTrackers;
-    }
+import static com.mopub.mobileads.VastVideoDownloadTask.VastVideoDownloadTaskListener;
+import static com.mopub.mobileads.util.vast.VastXmlManagerAggregator.VastXmlManagerAggregatorListener;
 
-    public List<String> getVideoFirstQuartileTrackers() {
-        return mVideoFirstQuartileTrackers;
+public class VastManager implements VastXmlManagerAggregatorListener {
+    public interface VastManagerListener {
+        public void onVastVideoConfigurationPrepared(final VastVideoConfiguration vastVideoConfiguration);
     }
 
-    public List<String> getVideoMidpointTrackers() {
-        return mVideoMidpointTrackers;
-    }
+    private static final double ASPECT_RATIO_WEIGHT = 40;
+    private static final double AREA_WEIGHT = 60;
+    private static final List<String> VIDEO_MIME_TYPES =
+            Arrays.asList("video/mp4", "video/3gpp");
+    private static final List<String> COMPANION_IMAGE_MIME_TYPES =
+            Arrays.asList("image/jpeg", "image/png", "image/bmp", "image/gif");
 
-    public List<String> getVideoThirdQuartileTrackers() {
-        return mVideoThirdQuartileTrackers;
-    }
+    private VastManagerListener mVastManagerListener;
 
-    public List<String> getVideoCompleteTrackers() {
-        return mVideoCompleteTrackers;
-    }
+    private VastXmlManagerAggregator mVastXmlManagerAggregator;
+    private double mScreenAspectRatio;
+    private int mScreenArea;
 
-    public String getClickThroughUrl() {
-        return mClickThroughUrl;
+    public VastManager(final Context context) {
+        initializeScreenDimensions(context);
     }
 
-    public List<String> getClickTrackers() {
-        return mClickTrackers;
-    }
+    public void prepareVastVideoConfiguration(final String vastXml, final VastManagerListener vastManagerListener) {
+        if (mVastXmlManagerAggregator == null) {
+            mVastManagerListener = vastManagerListener;
+            mVastXmlManagerAggregator = new VastXmlManagerAggregator(this);
 
-    public String getMediaFileUrl() {
-        return mMediaFileUrl;
+            try {
+                AsyncTasks.safeExecuteOnExecutor(mVastXmlManagerAggregator, vastXml);
+            } catch (Exception e) {
+                MoPubLog.d("Failed to aggregate vast xml", e);
+
+                if (mVastManagerListener != null) {
+                    mVastManagerListener.onVastVideoConfigurationPrepared(null);
+                }
+            }
+        }
     }
 
     public void cancel() {
-        if (mVastBackgroundTask != null) {
-            mVastBackgroundTask.cancel(true);
+        if (mVastXmlManagerAggregator != null) {
+            mVastXmlManagerAggregator.cancel(true);
+            mVastXmlManagerAggregator = null;
         }
     }
 
-    private void vastProcessComplete(boolean canceled) {
-        HttpClients.safeShutdown(mHttpClient);
+    @Override
+    public void onAggregationComplete(final List<VastXmlManager> vastXmlManagers) {
+        mVastXmlManagerAggregator = null;
+        if (vastXmlManagers == null) {
+            if (mVastManagerListener != null) {
+                mVastManagerListener.onVastVideoConfigurationPrepared(null);
+            }
+            return;
+        }
 
-        mTimesFollowedVastRedirect = 0;
-        mVastBackgroundTask = null;
+        final VastVideoConfiguration vastVideoConfiguration =
+                createVastVideoConfigurationFromXml(vastXmlManagers);
 
-        if (!canceled) {
-            mListener.onComplete(this);
+        if (updateDiskMediaFileUrl(vastVideoConfiguration)) {
+            if (mVastManagerListener != null) {
+                mVastManagerListener.onVastVideoConfigurationPrepared(vastVideoConfiguration);
+            }
+            return;
         }
-    }
 
-    private void loadVastDataFromXml(VastXmlManager xmlManager) {
-        mImpressionTrackers.addAll(xmlManager.getImpressionTrackers());
-        mVideoStartTrackers.addAll(xmlManager.getVideoStartTrackers());
-        mVideoFirstQuartileTrackers.addAll(xmlManager.getVideoFirstQuartileTrackers());
-        mVideoMidpointTrackers.addAll(xmlManager.getVideoMidpointTrackers());
-        mVideoThirdQuartileTrackers.addAll(xmlManager.getVideoThirdQuartileTrackers());
-        mVideoCompleteTrackers.addAll(xmlManager.getVideoCompleteTrackers());
-        mClickTrackers.addAll(xmlManager.getClickTrackers());
-
-        if (mClickThroughUrl == null) {
-            mClickThroughUrl = xmlManager.getClickThroughUrl();
+        final VastVideoDownloadTask vastVideoDownloadTask = new VastVideoDownloadTask(
+                new VastVideoDownloadTaskListener() {
+                    @Override
+                    public void onComplete(boolean success) {
+                        if (success && updateDiskMediaFileUrl(vastVideoConfiguration)) {
+                            if (mVastManagerListener != null) {
+                                mVastManagerListener.onVastVideoConfigurationPrepared(vastVideoConfiguration);
+                            }
+                        } else {
+                            if (mVastManagerListener != null) {
+                                mVastManagerListener.onVastVideoConfigurationPrepared(null);
+                            }
+                        }
+                    }
+                }
+        );
+
+        try {
+            AsyncTasks.safeExecuteOnExecutor(
+                    vastVideoDownloadTask,
+                    vastVideoConfiguration.getNetworkMediaFileUrl()
+            );
+        } catch (Exception e) {
+            MoPubLog.d("Failed to download vast video", e);
+
+            if (mVastManagerListener != null) {
+                mVastManagerListener.onVastVideoConfigurationPrepared(null);
+            }
         }
+    }
 
-        if (mMediaFileUrl == null) {
-            mMediaFileUrl = xmlManager.getMediaFileUrl();
+    private boolean updateDiskMediaFileUrl(final VastVideoConfiguration vastVideoConfiguration) {
+        final String networkMediaFileUrl = vastVideoConfiguration.getNetworkMediaFileUrl();
+        if (CacheService.containsKeyDiskCache(networkMediaFileUrl)) {
+            final String filePathDiskCache = CacheService.getFilePathDiskCache(networkMediaFileUrl);
+            vastVideoConfiguration.setDiskMediaFileUrl(filePathDiskCache);
+            return true;
         }
+        return false;
     }
 
-    private String processVastFollowingRedirect(String vastXml) throws Exception {
-        VastXmlManager xmlManager = new VastXmlManager();
-        xmlManager.parseVastXml(vastXml);
+    private void initializeScreenDimensions(final Context context) {
+        // This currently assumes that all vast videos will be played in landscape
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        int x = display.getWidth();
+        int y = display.getHeight();
+
+        // For landscape, width is always greater than height
+        int screenWidth = Math.max(x, y);
+        int screenHeight = Math.min(x, y);
+        mScreenAspectRatio = (double) screenWidth / screenHeight;
+        mScreenArea = screenWidth * screenHeight;
+    }
 
-        // add relevant vast data from this document
-        loadVastDataFromXml(xmlManager);
+    private VastVideoConfiguration createVastVideoConfigurationFromXml(final List<VastXmlManager> xmlManagers) {
+        final VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
 
-        String redirectUrl = xmlManager.getVastAdTagURI();
-        if (redirectUrl != null && mTimesFollowedVastRedirect < MAX_TIMES_TO_FOLLOW_VAST_REDIRECT) {
-            mTimesFollowedVastRedirect++;
+        final List<VastXmlManager.MediaXmlManager> mediaXmlManagers = new ArrayList<VastXmlManager.MediaXmlManager>();
+        final List<VastXmlManager.ImageCompanionAdXmlManager> companionXmlManagers = new ArrayList<VastXmlManager.ImageCompanionAdXmlManager>();
+        for (VastXmlManager xmlManager : xmlManagers) {
+            vastVideoConfiguration.addImpressionTrackers(xmlManager.getImpressionTrackers());
 
-            HttpGet httpget = new HttpGet(redirectUrl);
-            HttpResponse response = mHttpClient.execute(httpget);
-            HttpEntity entity = response.getEntity();
-            return (entity != null) ? Strings.fromStream(entity.getContent()) : null;
+            vastVideoConfiguration.addStartTrackers(xmlManager.getVideoStartTrackers());
+            vastVideoConfiguration.addFirstQuartileTrackers(xmlManager.getVideoFirstQuartileTrackers());
+            vastVideoConfiguration.addMidpointTrackers(xmlManager.getVideoMidpointTrackers());
+            vastVideoConfiguration.addThirdQuartileTrackers(xmlManager.getVideoThirdQuartileTrackers());
+            vastVideoConfiguration.addCompleteTrackers(xmlManager.getVideoCompleteTrackers());
+
+            vastVideoConfiguration.addClickTrackers(xmlManager.getClickTrackers());
+
+            if (vastVideoConfiguration.getClickThroughUrl() == null) {
+                vastVideoConfiguration.setClickThroughUrl(xmlManager.getClickThroughUrl());
+            }
+
+            mediaXmlManagers.addAll(xmlManager.getMediaXmlManagers());
+            companionXmlManagers.addAll(xmlManager.getCompanionAdXmlManagers());
         }
 
-        return null;
+        vastVideoConfiguration.setNetworkMediaFileUrl(getBestMediaFileUrl(mediaXmlManagers));
+        vastVideoConfiguration.setVastCompanionAd(getBestCompanionAd(companionXmlManagers));
+
+        return vastVideoConfiguration;
     }
 
-    public interface VastManagerListener {
-        public void onComplete(VastManager vastManager);
+    String getBestMediaFileUrl(final List<VastXmlManager.MediaXmlManager> managers) {
+        final List<VastXmlManager.MediaXmlManager> mediaXmlManagers = new ArrayList<VastXmlManager.MediaXmlManager>(managers);
+        double bestMediaFitness = Double.POSITIVE_INFINITY;
+        String bestMediaFileUrl = null;
+
+        final Iterator<VastXmlManager.MediaXmlManager> xmlManagerIterator = mediaXmlManagers.iterator();
+        while (xmlManagerIterator.hasNext()) {
+            final VastXmlManager.MediaXmlManager mediaXmlManager = xmlManagerIterator.next();
+
+            final String mediaType = mediaXmlManager.getType();
+            final String mediaUrl = mediaXmlManager.getMediaUrl();
+            if (!VIDEO_MIME_TYPES.contains(mediaType) || mediaUrl == null) {
+                xmlManagerIterator.remove();
+                continue;
+            }
+
+            final Integer mediaWidth = mediaXmlManager.getWidth();
+            final Integer mediaHeight = mediaXmlManager.getHeight();
+            if (mediaWidth == null || mediaWidth <= 0 || mediaHeight == null || mediaHeight <= 0) {
+                continue;
+            }
+
+            final double mediaFitness = calculateFitness(mediaWidth, mediaHeight);
+            if (mediaFitness < bestMediaFitness) {
+                bestMediaFitness = mediaFitness;
+                bestMediaFileUrl = mediaUrl;
+            }
+        }
+
+        if (bestMediaFileUrl == null && !mediaXmlManagers.isEmpty()) {
+            bestMediaFileUrl = mediaXmlManagers.get(0).getMediaUrl();
+        }
+
+        return bestMediaFileUrl;
     }
 
-    private class ProcessVastBackgroundTask extends AsyncTask<String, Void, Void> {
-        @Override
-        protected Void doInBackground(String... strings) {
-            try {
-                if (strings != null && strings.length > 0) {
-                    String vastXml = strings[0];
+    VastCompanionAd getBestCompanionAd(final List<VastXmlManager.ImageCompanionAdXmlManager> managers) {
+        final List<VastXmlManager.ImageCompanionAdXmlManager> companionXmlManagers =
+                new ArrayList<VastXmlManager.ImageCompanionAdXmlManager>(managers);
+        double bestCompanionFitness = Double.POSITIVE_INFINITY;
+        VastXmlManager.ImageCompanionAdXmlManager bestCompanionXmlManager = null;
+
+        final Iterator<VastXmlManager.ImageCompanionAdXmlManager> xmlManagerIterator = companionXmlManagers.iterator();
+        while (xmlManagerIterator.hasNext()) {
+            final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = xmlManagerIterator.next();
+
+            final String imageType = companionXmlManager.getType();
+            final String imageUrl = companionXmlManager.getImageUrl();
+            if (!COMPANION_IMAGE_MIME_TYPES.contains(imageType) || imageUrl == null) {
+                xmlManagerIterator.remove();
+                continue;
+            }
 
-                    while (vastXml != null && vastXml.length() > 0 && !isCancelled()) {
-                        vastXml = processVastFollowingRedirect(vastXml);
-                    }
-                }
-            } catch (Exception e) {
-                Log.d("MoPub", "Failed to parse VAST XML", e);
+            final Integer imageWidth = companionXmlManager.getWidth();
+            final Integer imageHeight = companionXmlManager.getHeight();
+            if (imageWidth == null || imageWidth <= 0 || imageHeight == null || imageHeight <= 0) {
+                continue;
             }
 
-            return null;
+            final double companionFitness = calculateFitness(imageWidth, imageHeight);
+            if (companionFitness < bestCompanionFitness) {
+                bestCompanionFitness = companionFitness;
+                bestCompanionXmlManager = companionXmlManager;
+            }
         }
 
-        @Override
-        protected void onPostExecute(Void aVoid) {
-            vastProcessComplete(false);
+        if (bestCompanionXmlManager == null && !companionXmlManagers.isEmpty()) {
+            bestCompanionXmlManager = companionXmlManagers.get(0);
         }
 
-        @Override
-        protected void onCancelled() {
-            vastProcessComplete(true);
+        if (bestCompanionXmlManager != null) {
+            return new VastCompanionAd(
+                    bestCompanionXmlManager.getWidth(),
+                    bestCompanionXmlManager.getHeight(),
+                    bestCompanionXmlManager.getImageUrl(),
+                    bestCompanionXmlManager.getClickThroughUrl(),
+                    new ArrayList<String>(bestCompanionXmlManager.getClickTrackers())
+            );
         }
+        return null;
+    }
+
+    private double calculateFitness(final int width, final int height) {
+        final double mediaAspectRatio = (double) width / height;
+        final int mediaArea = width * height;
+        final double aspectRatioRatio = mediaAspectRatio / mScreenAspectRatio;
+        final double areaRatio = (double) mediaArea / mScreenArea;
+        return ASPECT_RATIO_WEIGHT * Math.abs(Math.log(aspectRatioRatio))
+                + AREA_WEIGHT * Math.abs(Math.log(areaRatio));
+    }
+
+    @Deprecated // for testing
+    int getScreenArea() {
+        return mScreenArea;
     }
 
     @Deprecated // for testing
-    void setTimesFollowedVastRedirect(int timesFollowedVastRedirect) {
-        mTimesFollowedVastRedirect = timesFollowedVastRedirect;
+    double getScreenAspectRatio() {
+        return mScreenAspectRatio;
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastVideoConfiguration.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastVideoConfiguration.java
new file mode 100644
index 00000000..aeae8b9f
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastVideoConfiguration.java
@@ -0,0 +1,127 @@
+package com.mopub.mobileads.util.vast;
+
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.List;
+
+public class VastVideoConfiguration implements Serializable {
+    private static final long serialVersionUID = 0L;
+
+    private ArrayList<String> mImpressionTrackers;
+    private ArrayList<String> mStartTrackers;
+    private ArrayList<String> mFirstQuartileTrackers;
+    private ArrayList<String> mMidpointTrackers;
+    private ArrayList<String> mThirdQuartileTrackers;
+    private ArrayList<String> mCompleteTrackers;
+    private ArrayList<String> mClickTrackers;
+    private String mClickThroughUrl;
+    private String mNetworkMediaFileUrl;
+    private String mDiskMediaFileUrl;
+    private VastCompanionAd mVastCompanionAd;
+
+    public VastVideoConfiguration() {
+        mImpressionTrackers = new ArrayList<String>();
+        mStartTrackers = new ArrayList<String>();
+        mFirstQuartileTrackers = new ArrayList<String>();
+        mMidpointTrackers = new ArrayList<String>();
+        mThirdQuartileTrackers = new ArrayList<String>();
+        mCompleteTrackers = new ArrayList<String>();
+        mClickTrackers = new ArrayList<String>();
+    }
+
+    /**
+     * Setters
+     */
+
+    public void addImpressionTrackers(final List<String> impressionTrackers) {
+        mImpressionTrackers.addAll(impressionTrackers);
+    }
+
+    public void addStartTrackers(final List<String> startTrackers) {
+        mStartTrackers.addAll(startTrackers);
+    }
+
+    public void addFirstQuartileTrackers(final List<String> firstQuartileTrackers) {
+        mFirstQuartileTrackers.addAll(firstQuartileTrackers);
+    }
+
+    public void addMidpointTrackers(final List<String> midpointTrackers) {
+        mMidpointTrackers.addAll(midpointTrackers);
+    }
+
+    public void addThirdQuartileTrackers(final List<String> thirdQuartileTrackers) {
+        mThirdQuartileTrackers.addAll(thirdQuartileTrackers);
+    }
+
+    public void addCompleteTrackers(final List<String> completeTrackers) {
+        mCompleteTrackers.addAll(completeTrackers);
+    }
+
+    public void addClickTrackers(final List<String> clickTrackers) {
+        mClickTrackers.addAll(clickTrackers);
+    }
+
+    public void setClickThroughUrl(final String clickThroughUrl) {
+        mClickThroughUrl = clickThroughUrl;
+    }
+
+    public void setNetworkMediaFileUrl(final String networkMediaFileUrl) {
+        mNetworkMediaFileUrl = networkMediaFileUrl;
+    }
+
+    public void setDiskMediaFileUrl(final String diskMediaFileUrl) {
+        mDiskMediaFileUrl = diskMediaFileUrl;
+    }
+
+    public void setVastCompanionAd(final VastCompanionAd vastCompanionAd) {
+        mVastCompanionAd = vastCompanionAd;
+    }
+
+    /**
+     * Getters
+     */
+
+    public List<String> getImpressionTrackers() {
+        return mImpressionTrackers;
+    }
+
+    public List<String> getStartTrackers() {
+        return mStartTrackers;
+    }
+
+    public List<String> getFirstQuartileTrackers() {
+        return mFirstQuartileTrackers;
+    }
+
+    public List<String> getMidpointTrackers() {
+        return mMidpointTrackers;
+    }
+
+    public List<String> getThirdQuartileTrackers() {
+        return mThirdQuartileTrackers;
+    }
+
+    public List<String> getCompleteTrackers() {
+        return mCompleteTrackers;
+    }
+
+    public List<String> getClickTrackers() {
+        return mClickTrackers;
+    }
+
+    public String getClickThroughUrl() {
+        return mClickThroughUrl;
+    }
+
+    public String getNetworkMediaFileUrl() {
+        return mNetworkMediaFileUrl;
+    }
+
+    public String getDiskMediaFileUrl() {
+        return mDiskMediaFileUrl;
+    }
+
+    public VastCompanionAd getVastCompanionAd() {
+        return mVastCompanionAd;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManager.java
index 2fe1afab..86748f05 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManager.java
@@ -1,7 +1,6 @@
 package com.mopub.mobileads.util.vast;
 
 import org.w3c.dom.Document;
-import org.w3c.dom.NamedNodeMap;
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
 import org.xml.sax.InputSource;
@@ -10,6 +9,7 @@
 import java.io.IOException;
 import java.io.StringReader;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 
 import javax.xml.parsers.DocumentBuilder;
@@ -21,57 +21,140 @@
     private static final String ROOT_TAG_OPEN = "<" + ROOT_TAG + ">";
     private static final String ROOT_TAG_CLOSE = "</" + ROOT_TAG + ">";
 
-    enum VastElementName {
-        IMPRESSION_TRACKER ("Impression"),
-        VIDEO_TRACKER ("Tracking"),
-        CLICK_THROUGH ("ClickThrough"),
-        CLICK_TRACKER ("ClickTracking"),
-        MEDIA_FILE ("MediaFile"),
-        VAST_AD_TAG ("VASTAdTagURI"),
-        MP_IMPRESSION_TRACKER ("MP_TRACKING_URL");
+    // Element names
+    private static final String IMPRESSION_TRACKER = "Impression";
+    private static final String VIDEO_TRACKER = "Tracking";
+    private static final String CLICK_THROUGH = "ClickThrough";
+    private static final String CLICK_TRACKER = "ClickTracking";
+    private static final String MEDIA_FILE = "MediaFile";
+    private static final String VAST_AD_TAG = "VASTAdTagURI";
+    private static final String MP_IMPRESSION_TRACKER = "MP_TRACKING_URL";
+    private static final String COMPANION = "Companion";
+
+    // Attribute names
+    private static final String EVENT = "event";
+    private static final String WIDTH = "width";
+    private static final String HEIGHT = "height";
+
+    // Attibute values
+    private static final String START = "start";
+    private static final String FIRST_QUARTILE = "firstQuartile";
+    private static final String MIDPOINT = "midpoint";
+    private static final String THIRD_QUARTILE = "thirdQuartile";
+    private static final String COMPLETE = "complete";
+
+    // This class currently assumes an image type companion ad since that is what we are supporting
+    class ImageCompanionAdXmlManager {
+        // Element name
+        private static final String TRACKING_EVENTS = "TrackingEvents";
+        private static final String COMPANION_STATIC_RESOURCE = "StaticResource";
+        private static final String COMPANION_CLICK_THROUGH = "CompanionClickThrough";
+        // Attribute value
+        private static final String CREATIVE_VIEW = "creativeView";
+        // Attribute name
+        private static final String CREATIVE_TYPE = "creativeType";
+        private final Node mCompanionNode;
+
+        ImageCompanionAdXmlManager(final Node companionNode) throws IllegalArgumentException {
+            if (companionNode == null) {
+                throw new IllegalArgumentException("Companion node cannot be null");
+            }
+            mCompanionNode = companionNode;
+        }
+
+        Integer getWidth() {
+            return XmlUtils.getAttributeValueAsInt(mCompanionNode, WIDTH);
+        }
+
+        Integer getHeight() {
+            return XmlUtils.getAttributeValueAsInt(mCompanionNode, HEIGHT);
+        }
 
-        private final String name;
+        String getType() {
+            final Node node = XmlUtils.getFirstMatchingChildNode(
+                    mCompanionNode,
+                    COMPANION_STATIC_RESOURCE
+            );
+            return XmlUtils.getAttributeValue(node, CREATIVE_TYPE);
+        }
 
-        private VastElementName(String name) {
-            this.name = name;
+        String getImageUrl() {
+            final Node node = XmlUtils.getFirstMatchingChildNode(
+                    mCompanionNode,
+                    COMPANION_STATIC_RESOURCE
+            );
+            return XmlUtils.getNodeValue(node);
         }
 
-        public String getName() {
-            return this.name;
+        String getClickThroughUrl() {
+            final Node node = XmlUtils.getFirstMatchingChildNode(
+                    mCompanionNode,
+                    COMPANION_CLICK_THROUGH
+            );
+            return XmlUtils.getNodeValue(node);
         }
-    };
 
-    enum VastElementAttributeName {
-        EVENT ("event");
+        List<String> getClickTrackers() {
+            final List<String> companionAdClickTrackers = new ArrayList<String>();
+            final Node node = XmlUtils.getFirstMatchingChildNode(
+                    mCompanionNode,
+                    TRACKING_EVENTS
+            );
 
-        private final String name;
+            if (node == null) {
+                return companionAdClickTrackers;
+            }
 
-        private VastElementAttributeName(String name) {
-            this.name = name;
+            final List<Node> trackerNodes = XmlUtils.getMatchingChildNodes(
+                    node,
+                    VIDEO_TRACKER,
+                    EVENT,
+                    Arrays.asList(CREATIVE_VIEW)
+            );
+
+            for (final Node trackerNode : trackerNodes) {
+                if (trackerNode.getFirstChild() != null) {
+                    companionAdClickTrackers.add(trackerNode.getFirstChild().getNodeValue().trim());
+                }
+            }
+
+            return companionAdClickTrackers;
         }
+    }
 
-        public String getName() {
-            return this.name;
+    class MediaXmlManager {
+        // Attribute names
+        private static final String DELIVERY = "delivery";
+        private static final String VIDEO_TYPE  = "type";
+        private final Node mMediaNode;
+
+        MediaXmlManager(final Node mediaNode) throws IllegalArgumentException {
+            if (mediaNode == null) {
+                throw new IllegalArgumentException("Media node cannot be null");
+            }
+            mMediaNode = mediaNode;
         }
-    };
 
-    enum VastElementAttributeValue {
-        START ("start"),
-        FIRST_QUARTILE ("firstQuartile"),
-        MIDPOINT ("midpoint"),
-        THIRD_QUARTILE ("thirdQuartile"),
-        COMPLETE ("complete");
+        String getDelivery() {
+            return XmlUtils.getAttributeValue(mMediaNode, DELIVERY);
+        }
 
-        private final String value;
+        Integer getWidth() {
+            return XmlUtils.getAttributeValueAsInt(mMediaNode, WIDTH);
+        }
 
-        private VastElementAttributeValue(String value) {
-            this.value = value;
+        Integer getHeight() {
+            return XmlUtils.getAttributeValueAsInt(mMediaNode, HEIGHT);
         }
 
-        public String getValue() {
-            return this.value;
+        String getType() {
+            return XmlUtils.getAttributeValue(mMediaNode, VIDEO_TYPE);
         }
-    };
+
+        String getMediaUrl() {
+            return XmlUtils.getNodeValue(mMediaNode);
+        }
+    }
 
     private Document mVastDoc;
 
@@ -91,103 +174,72 @@ void parseVastXml(String xmlString) throws ParserConfigurationException, IOExcep
     }
 
     String getVastAdTagURI() {
-        List<String> uriWrapper = getStringDataAsList(VastElementName.VAST_AD_TAG);
+        List<String> uriWrapper = XmlUtils.getStringDataAsList(mVastDoc, VAST_AD_TAG);
         return (uriWrapper.size() > 0) ? uriWrapper.get(0) : null;
     }
 
     List<String> getImpressionTrackers() {
-        List<String> impressionTrackers = getStringDataAsList(VastElementName.IMPRESSION_TRACKER);
-        impressionTrackers.addAll(getStringDataAsList(VastElementName.MP_IMPRESSION_TRACKER));
+        List<String> impressionTrackers = XmlUtils.getStringDataAsList(mVastDoc, IMPRESSION_TRACKER);
+        impressionTrackers.addAll(XmlUtils.getStringDataAsList(mVastDoc, MP_IMPRESSION_TRACKER));
 
         return impressionTrackers;
     }
 
     List<String> getVideoStartTrackers() {
-        return getVideoTrackerByAttribute(VastElementAttributeValue.START);
+        return getVideoTrackerByAttribute(START);
     }
 
     List<String> getVideoFirstQuartileTrackers() {
-        return getVideoTrackerByAttribute(VastElementAttributeValue.FIRST_QUARTILE);
+        return getVideoTrackerByAttribute(FIRST_QUARTILE);
     }
 
     List<String> getVideoMidpointTrackers() {
-        return getVideoTrackerByAttribute(VastElementAttributeValue.MIDPOINT);
+        return getVideoTrackerByAttribute(MIDPOINT);
     }
 
     List<String> getVideoThirdQuartileTrackers() {
-        return getVideoTrackerByAttribute(VastElementAttributeValue.THIRD_QUARTILE);
+        return getVideoTrackerByAttribute(THIRD_QUARTILE);
     }
 
     List<String> getVideoCompleteTrackers() {
-        return getVideoTrackerByAttribute(VastElementAttributeValue.COMPLETE);
+        return getVideoTrackerByAttribute(COMPLETE);
     }
 
     String getClickThroughUrl() {
-        List<String> clickUrlWrapper = getStringDataAsList(VastElementName.CLICK_THROUGH);
+        List<String> clickUrlWrapper = XmlUtils.getStringDataAsList(mVastDoc, CLICK_THROUGH);
         return (clickUrlWrapper.size() > 0) ? clickUrlWrapper.get(0) : null;
     }
 
     List<String> getClickTrackers() {
-        return getStringDataAsList(VastElementName.CLICK_TRACKER);
+        return XmlUtils.getStringDataAsList(mVastDoc, CLICK_TRACKER);
     }
 
     String getMediaFileUrl() {
-        List<String> urlWrapper = getStringDataAsList(VastElementName.MEDIA_FILE);
+        List<String> urlWrapper = XmlUtils.getStringDataAsList(mVastDoc, MEDIA_FILE);
         return (urlWrapper.size() > 0) ? urlWrapper.get(0) : null;
     }
 
-    private List<String> getVideoTrackerByAttribute(VastElementAttributeValue attributeValue) {
-        return getStringDataAsList(VastElementName.VIDEO_TRACKER, VastElementAttributeName.EVENT, attributeValue);
-    }
-
-    private List<String> getStringDataAsList(VastElementName elementName) {
-        return getStringDataAsList(elementName, null, null);
-    }
-
-    private List<String> getStringDataAsList(VastElementName elementName, VastElementAttributeName attributeName, VastElementAttributeValue attributeValue) {
-        ArrayList<String> results = new ArrayList<String>();
-
-        if (mVastDoc == null) {
-            return results;
-        }
-
-        NodeList nodes = mVastDoc.getElementsByTagName(elementName.getName());
-
-        if (nodes == null) {
-            return results;
+    List<MediaXmlManager> getMediaXmlManagers() {
+        final NodeList nodes = mVastDoc.getElementsByTagName(MEDIA_FILE);
+        final List<MediaXmlManager> mediaXmlManagers =
+                new ArrayList<MediaXmlManager>(nodes.getLength());
+        for (int i = 0; i < nodes.getLength(); ++i) {
+            mediaXmlManagers.add(new MediaXmlManager(nodes.item(i)));
         }
-
-        for (int i = 0; i < nodes.getLength(); i++) {
-            Node node = nodes.item(i);
-
-            if (node != null && nodeMatchesFilter(node, attributeName, attributeValue)) {
-                // since we parsed with coalescing set to true, CDATA is added as the child of the element
-                Node textChild = node.getFirstChild();
-                if (textChild != null) {
-                    String textValue = textChild.getNodeValue();
-                    if (textValue != null) {
-                        results.add(textValue.trim());
-                    }
-                }
-            }
-        }
-
-        return results;
+        return mediaXmlManagers;
     }
 
-    private boolean nodeMatchesFilter(Node node, VastElementAttributeName attributeName, VastElementAttributeValue attributeValue) {
-        if (attributeName == null || attributeValue == null) {
-            return true;
-        }
-
-        NamedNodeMap attrMap = node.getAttributes();
-        if (attrMap != null) {
-            Node attrNode = attrMap.getNamedItem(attributeName.getName());
-            if (attrNode != null && attributeValue.getValue().equals(attrNode.getNodeValue())) {
-                return true;
-            }
+    List<ImageCompanionAdXmlManager> getCompanionAdXmlManagers() {
+        final NodeList nodes = mVastDoc.getElementsByTagName(COMPANION);
+        final List<ImageCompanionAdXmlManager> imageCompanionAdXmlManagers =
+                new ArrayList<ImageCompanionAdXmlManager>(nodes.getLength());
+        for (int i = 0; i < nodes.getLength(); ++i) {
+            imageCompanionAdXmlManagers.add(new ImageCompanionAdXmlManager(nodes.item(i)));
         }
+        return imageCompanionAdXmlManagers;
+    }
 
-        return false;
+    private List<String> getVideoTrackerByAttribute(final String attributeValue) {
+        return XmlUtils.getStringDataAsList(mVastDoc, VIDEO_TRACKER, EVENT, attributeValue);
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregator.java
new file mode 100644
index 00000000..13fd5b14
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregator.java
@@ -0,0 +1,94 @@
+package com.mopub.mobileads.util.vast;
+
+import android.net.http.AndroidHttpClient;
+import android.os.AsyncTask;
+
+import com.mopub.common.HttpClient;
+import com.mopub.common.util.MoPubLog;
+import com.mopub.common.util.Strings;
+
+import org.apache.http.HttpEntity;
+import org.apache.http.HttpResponse;
+import org.apache.http.client.methods.HttpGet;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.List;
+
+public class VastXmlManagerAggregator extends AsyncTask<String, Void, List<VastXmlManager>> {
+    interface VastXmlManagerAggregatorListener {
+        void onAggregationComplete(final List<VastXmlManager> vastXmlManagers);
+    }
+
+    // More than reasonable number of nested VAST urls to follow
+    static final int MAX_TIMES_TO_FOLLOW_VAST_REDIRECT = 20;
+    private final WeakReference<VastXmlManagerAggregatorListener> mVastXmlManagerAggregatorListener;
+    private int mTimesFollowedVastRedirect;
+
+    VastXmlManagerAggregator(final VastXmlManagerAggregatorListener vastXmlManagerAggregatorListener) {
+        super();
+        mVastXmlManagerAggregatorListener =
+                new WeakReference<VastXmlManagerAggregatorListener>(vastXmlManagerAggregatorListener);
+    }
+
+    @Override
+    protected List<VastXmlManager> doInBackground(String... strings) {
+        List<VastXmlManager> vastXmlManagers = null;
+        AndroidHttpClient httpClient = null;
+        try {
+            httpClient = HttpClient.getHttpClient();
+            if (strings != null && strings.length > 0) {
+                String vastXml = strings[0];
+
+                vastXmlManagers = new ArrayList<VastXmlManager>();
+                while (vastXml != null && vastXml.length() > 0 && !isCancelled()) {
+                    final VastXmlManager xmlManager = new VastXmlManager();
+                    xmlManager.parseVastXml(vastXml);
+                    vastXmlManagers.add(xmlManager);
+                    vastXml = followVastRedirect(httpClient, xmlManager.getVastAdTagURI());
+                }
+            }
+        } catch (Exception e) {
+            MoPubLog.d("Failed to parse VAST XML", e);
+        } finally {
+            if (httpClient != null) {
+                httpClient.close();
+            }
+        }
+
+        return vastXmlManagers;
+    }
+
+    @Override
+    protected void onPostExecute(final List<VastXmlManager> vastXmlManagers) {
+        final VastXmlManagerAggregatorListener listener = mVastXmlManagerAggregatorListener.get();
+        if (listener != null) {
+            listener.onAggregationComplete(vastXmlManagers);
+        }
+    }
+
+    @Override
+    protected void onCancelled() {
+        final VastXmlManagerAggregatorListener listener = mVastXmlManagerAggregatorListener.get();
+        if (listener != null) {
+            listener.onAggregationComplete(null);
+        }
+    }
+
+    String followVastRedirect(final AndroidHttpClient httpClient, final String redirectUrl) throws Exception {
+        if (redirectUrl != null && mTimesFollowedVastRedirect < MAX_TIMES_TO_FOLLOW_VAST_REDIRECT) {
+            mTimesFollowedVastRedirect++;
+
+            final HttpGet httpget = new HttpGet(redirectUrl);
+            final HttpResponse response = httpClient.execute(httpget);
+            final HttpEntity entity = response.getEntity();
+            return (entity != null) ? Strings.fromStream(entity.getContent()) : null;
+        }
+        return null;
+    }
+
+    @Deprecated
+    void setTimesFollowedVastRedirect(final int timesFollowedVastRedirect) {
+        mTimesFollowedVastRedirect = timesFollowedVastRedirect;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/XmlUtils.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/XmlUtils.java
new file mode 100644
index 00000000..79e92584
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/XmlUtils.java
@@ -0,0 +1,129 @@
+package com.mopub.mobileads.util.vast;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.NamedNodeMap;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+class XmlUtils {
+    private XmlUtils() {}
+
+    static Node getFirstMatchingChildNode(final Node node, final String nodeName) {
+        return getFirstMatchingChildNode(node, nodeName, null, null);
+    }
+
+    static Node getFirstMatchingChildNode(final Node node, final String nodeName, final String attributeName, final List<String> attributeValues) {
+        if (node == null || nodeName == null) {
+            return null;
+        }
+
+        final List<Node> nodes = getMatchingChildNodes(node, nodeName, attributeName, attributeValues);
+        if (nodes != null && !nodes.isEmpty()) {
+            return nodes.get(0);
+        }
+        return null;
+    }
+
+    static List<Node> getMatchingChildNodes(final Node node, final String nodeName, final String attributeName, final List<String> attributeValues) {
+        if (node == null || nodeName == null) {
+            return null;
+        }
+
+        final List<Node> nodes = new ArrayList<Node>();
+        final NodeList nodeList = node.getChildNodes();
+        for (int i = 0; i < nodeList.getLength(); ++i) {
+            Node childNode = nodeList.item(i);
+            if (childNode.getNodeName().equals(nodeName)
+                    && nodeMatchesAttributeFilter(childNode, attributeName, attributeValues)) {
+                nodes.add(childNode);
+            }
+        }
+        return nodes;
+    }
+
+    static boolean nodeMatchesAttributeFilter(final Node node, final String attributeName, final List<String> attributeValues) {
+        if (attributeName == null || attributeValues == null) {
+            return true;
+        }
+
+        final NamedNodeMap attrMap = node.getAttributes();
+        if (attrMap != null) {
+            Node attrNode = attrMap.getNamedItem(attributeName);
+            if (attrNode != null && attributeValues.contains(attrNode.getNodeValue())) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    static String getNodeValue(final Node node) {
+        if (node != null
+                && node.getFirstChild() != null
+                && node.getFirstChild().getNodeValue() != null) {
+            return node.getFirstChild().getNodeValue().trim();
+        }
+        return null;
+    }
+
+    static Integer getAttributeValueAsInt(final Node node, final String attributeName) {
+        if (node == null || attributeName == null) {
+            return null;
+        }
+
+        try {
+            return Integer.parseInt(getAttributeValue(node, attributeName));
+        } catch (NumberFormatException e) {
+            return null;
+        }
+    }
+
+    static String getAttributeValue(final Node node, final String attributeName) {
+        if (node == null || attributeName == null) {
+            return null;
+        }
+
+        final NamedNodeMap attrMap = node.getAttributes();
+        final Node attrNode = attrMap.getNamedItem(attributeName);
+        if (attrNode != null) {
+            return attrNode.getNodeValue();
+        }
+        return null;
+    }
+
+    static List<String> getStringDataAsList(final Document vastDoc, final String elementName) {
+        return getStringDataAsList(vastDoc, elementName, null, null);
+    }
+
+    static List<String> getStringDataAsList(final Document vastDoc, final String elementName, final String attributeName, final String attributeValue) {
+        final ArrayList<String> results = new ArrayList<String>();
+
+        if (vastDoc == null) {
+            return results;
+        }
+
+        final NodeList nodes = vastDoc.getElementsByTagName(elementName);
+
+        if (nodes == null) {
+            return results;
+        }
+
+        for (int i = 0; i < nodes.getLength(); i++) {
+            final Node node = nodes.item(i);
+
+            if (node != null && nodeMatchesAttributeFilter(node, attributeName, Arrays.asList(attributeValue))) {
+                // since we parsed with coalescing set to true, CDATA is added as the child of the element
+                final String nodeValue = getNodeValue(node);
+                if (nodeValue != null) {
+                    results.add(nodeValue);
+                }
+            }
+        }
+
+        return results;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java b/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
index d735504e..ac8de165 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
@@ -1,39 +1,55 @@
 package com.mopub.nativeads;
 
+import android.app.Activity;
 import android.content.Context;
 import android.view.View;
 import android.view.ViewGroup;
 
+import com.mopub.common.util.MoPubLog;
+
+import java.lang.ref.WeakReference;
+
 import static com.mopub.nativeads.MoPubNative.MoPubNativeListener;
 
 public final class AdapterHelper {
-    private final Context mContext;
+    private final WeakReference<Activity> mActivity;
+    private final Context mApplicationContext;
     private final int mStart;
     private final int mInterval;
 
     public AdapterHelper(final Context context, final int start, final int interval) throws IllegalArgumentException {
         if (context == null) {
-            throw new IllegalArgumentException("Illegal argument: context was null.");
+            throw new IllegalArgumentException("Illegal argument: Context was null.");
+        } else if (!(context instanceof Activity)) {
+            throw new IllegalArgumentException("Illegal argument: Context must be instance of Activity.");
         } else if (start < 0) {
             throw new IllegalArgumentException("Illegal argument: negative starting position.");
         } else if (interval < 2) {
             throw new IllegalArgumentException("Illegal argument: interval must be at least 2.");
         }
 
-        mContext = context.getApplicationContext();
+        mActivity = new WeakReference<Activity>((Activity) context);
+        mApplicationContext = context.getApplicationContext();
         mStart = start;
         mInterval = interval;
     }
 
     public View getAdView(final View convertView,
-                          final ViewGroup parent,
-                          final NativeResponse nativeResponse,
-                          final ViewBinder viewBinder,
-                          final MoPubNativeListener moPubNativeListener) {
+            final ViewGroup parent,
+            final NativeResponse nativeResponse,
+            final ViewBinder viewBinder,
+            final MoPubNativeListener moPubNativeListener) {
+        final Activity activity = mActivity.get();
+        if (activity == null) {
+            MoPubLog.d("Weak reference to Activity Context in AdapterHelper became null. " +
+                    "Returning empty view.");
+            return new View(mApplicationContext);
+        }
+
         return NativeAdViewHelper.getAdView(
                 convertView,
                 parent,
-                mContext,
+                activity,
                 nativeResponse,
                 viewBinder,
                 moPubNativeListener
@@ -87,4 +103,10 @@ private int numberOfAdsThatCouldFitWithContent(final int contentRowCount) {
             return (int) Math.floor((double) (contentRowCount - mStart) / spacesBetweenAds) + 1;
         }
     }
+
+    // Testing
+    @Deprecated
+    void clearActivityContext() {
+        mActivity.clear();
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java b/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java
new file mode 100644
index 00000000..a7acfe06
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java
@@ -0,0 +1,234 @@
+package com.mopub.nativeads;
+
+import android.view.View;
+
+import com.mopub.common.util.MoPubLog;
+
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+
+abstract class BaseForwardingNativeAd implements NativeAdInterface {
+    private static final int IMPRESSION_MIN_PERCENTAGE_VIEWED = 50;
+    static final double MIN_STAR_RATING = 0;
+    static final double MAX_STAR_RATING = 5;
+
+    // Basic fields
+    private String mMainImageUrl;
+    private String mIconImageUrl;
+    private String mClickDestinationUrl;
+    private String mCallToAction;
+    private String mTitle;
+    private String mText;
+    private Double mStarRating;
+
+    // Impression logistics
+    private final Set<String> mImpressionTrackers;
+    private int mImpressionMinTimeViewed;
+
+    // Extras
+    private final Map<String, Object> mExtras;
+
+    BaseForwardingNativeAd() {
+        mImpressionMinTimeViewed = 1000;
+
+        mImpressionTrackers = new HashSet<String>();
+        mExtras = new HashMap<String, Object>();
+    }
+
+    // Getters
+    /**
+     * Returns the String url corresponding to the ad's main image.
+     */
+    @Override
+    final public String getMainImageUrl() {
+        return mMainImageUrl;
+    }
+
+    /**
+     * Returns the String url corresponding to the ad's icon image.
+     */
+    @Override
+    final public String getIconImageUrl() {
+        return mIconImageUrl;
+    }
+
+    /**
+     * Returns a Set<String> of all impression trackers associated with this native ad. Note that
+     * network requests will automatically be made to each of these impression trackers when the
+     * native ad is display on screen. See {@link BaseForwardingNativeAd#getImpressionMinPercentageViewed}
+     * and {@link BaseForwardingNativeAd#getImpressionMinTimeViewed()} for relevant
+     * impression-tracking parameters.
+     */
+    @Override
+    final public Set<String> getImpressionTrackers() {
+        return new HashSet<String>(mImpressionTrackers);
+    }
+
+    /**
+     * Returns the String url that the device will attempt to resolve when the ad is clicked.
+     */
+    @Override
+    final public String getClickDestinationUrl() {
+        return mClickDestinationUrl;
+    }
+
+    /**
+     * Returns the Call To Action String (i.e. "Download" or "Learn More") associated with this ad.
+     */
+    @Override
+    final public String getCallToAction() {
+        return mCallToAction;
+    }
+
+    /**
+     * Returns the String corresponding to the ad's title.
+     */
+    @Override
+    final public String getTitle() {
+        return mTitle;
+    }
+
+    /**
+     * Returns the String corresponding to the ad's body text.
+     */
+    @Override
+    final public String getText() {
+        return mText;
+    }
+
+    /**
+     * For app install ads, this returns the associated star rating (on a 5 star scale) for the
+     * advertised app. Note that this method may return null if the star rating was either never set
+     * or invalid.
+     */
+    @Override
+    final public Double getStarRating() {
+        return mStarRating;
+    }
+
+    /**
+     * Returns the minimum viewable percentage of the ad that must be onscreen for it to be
+     * considered visible. See {@link BaseForwardingNativeAd#getImpressionMinTimeViewed()} for
+     * additional impression tracking considerations.
+     */
+    @Override
+    final public int getImpressionMinPercentageViewed() {
+        return IMPRESSION_MIN_PERCENTAGE_VIEWED;
+    }
+
+    /**
+     * Returns the minimum amount of time (in milliseconds) the ad that must be onscreen before an
+     * impression is recorded. See {@link BaseForwardingNativeAd#getImpressionMinPercentageViewed()}
+     * for additional impression tracking considerations.
+     */
+    @Override
+    final public int getImpressionMinTimeViewed() {
+        return mImpressionMinTimeViewed;
+    }
+
+    // Extras Getters
+    /**
+     * Given a particular String key, return the associated Object value from the ad's extras map.
+     * See {@link BaseForwardingNativeAd#getExtras()} for more information.
+     */
+    @Override
+    final public Object getExtra(final String key) {
+        return mExtras.get(key);
+    }
+
+    @Override
+    /**
+     * Returns a copy of the extras map, reflecting additional ad content not reflected in any
+     * of the above hardcoded setters. This is particularly useful for passing down custom fields
+     * with MoPub's direct-sold native ads or from mediated networks that pass back additional
+     * fields.
+     */
+    final public Map<String, Object> getExtras() {
+        return new HashMap<String, Object>(mExtras);
+    }
+
+    // Setters
+    final void setMainImageUrl(final String mainImageUrl) {
+        mMainImageUrl = mainImageUrl;
+    }
+
+    final void setIconImageUrl(final String iconImageUrl) {
+        mIconImageUrl = iconImageUrl;
+    }
+
+    final void setClickDestinationUrl(final String clickDestinationUrl) {
+        mClickDestinationUrl = clickDestinationUrl;
+    }
+
+    final void setCallToAction(final String callToAction) {
+        mCallToAction = callToAction;
+    }
+
+    final void setTitle(final String title) {
+        mTitle = title;
+    }
+
+    final void setText(final String text) {
+        mText = text;
+    }
+
+    final void setStarRating(final Double starRating) {
+        if (starRating == null) {
+            mStarRating = null;
+        } else if (starRating >= MIN_STAR_RATING && starRating <= MAX_STAR_RATING) {
+            mStarRating = starRating;
+        } else {
+            MoPubLog.d("Ignoring attempt to set invalid star rating (" + starRating + "). Must be "
+                    + "between " + MIN_STAR_RATING + " and " + MAX_STAR_RATING + ".");
+        }
+    }
+
+    final void addExtra(final String key, final Object value) {
+        mExtras.put(key, value);
+    }
+
+    final void addImpressionTracker(final String url) {
+        mImpressionTrackers.add(url);
+    }
+
+    final void setImpressionMinTimeViewed(final int impressionMinTimeViewed) {
+        if (impressionMinTimeViewed >= 0) {
+            mImpressionMinTimeViewed = impressionMinTimeViewed;
+        }
+    }
+
+    // Event Handlers
+    /**
+     * Your base native ad subclass should implement this method if the network requires the developer
+     * to prepare state for recording an impression before a view is rendered to screen.
+     * This method is optional.
+     */
+    @Override
+    public void prepareImpression(final View view) { }
+
+    /**
+     * Your base native ad subclass should implement this method if the network requires the developer
+     * to explicitly record an impression of a view rendered to screen.
+     * This method is optional.
+     */
+    @Override
+    public void recordImpression() { }
+
+    /**
+     * Your base native ad subclass should implement this method if the network requires the developer
+     * to explicitly handle click events of views rendered to screen.
+     * This method is optional.
+     */
+    @Override
+    public void handleClick(final View view) { }
+
+    /**
+     * Your base native ad subclass should implement this method if the network requires the developer
+     * to destroy or cleanup their native ad when they are finished with it.
+     * This method is optional.
+     */
+    @Override
+    public void destroy() { }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
new file mode 100644
index 00000000..7df5da09
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
@@ -0,0 +1,87 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+
+import java.util.List;
+import java.util.Map;
+
+/**
+ * CustomEventNative is a base class for custom events that support native ads. By implementing
+ * subclasses of CustomEventNative, you can enable the MoPub SDK to support a wider
+ * variety of third-party ad networks, or execute any of your application code on demand.
+ *
+ * At runtime, the MoPub SDK will find and instantiate a CustomEventNative subclass as needed
+ * and invoke its loadNativeAd() method.
+ */
+public abstract class CustomEventNative {
+    /**
+     * When the MoPub SDK receives a response indicating it should load a custom event, it will send
+     * this message to your custom event class. Your implementation of this method can either load
+     * a native ad from a third-party ad network, or execute any application code. It must also
+     * notify the provided CustomEventNativeListener Object of certain lifecycle events.
+     *
+     * The localExtras parameter is a Map containing additional custom data that is set within
+     * your application by calling MoPubNative.setLocalExtras(Map<String, Object>). Note that the
+     * localExtras Map is a copy of the Map supplied to setLocalExtras().
+     *
+     * The serverExtras parameter is a Map containing additional custom data configurable on the
+     * MoPub website that you want to associate with a given custom event request. This data may be
+     * used to pass dynamic information, such as publisher IDs, without changes in application code.
+     */
+    protected abstract void loadNativeAd(final Context context,
+            final CustomEventNativeListener customEventNativeListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras);
+
+    /**
+     * Pre caches the given set of image urls. We recommend using this method to warm the image
+     * cache before calling {@link CustomEventNativeListener#onNativeAdLoaded}. Doing so will
+     * force images to cache before displaying the ad.
+     */
+    final void preCacheImages(final Context context,
+            final List<String> imageUrls,
+            final ImageListener imageListener) {
+        ImageService.get(context, imageUrls, new ImageService.ImageServiceListener() {
+            @Override
+            public void onSuccess(final Map<String, Bitmap> bitmaps) {
+                imageListener.onImagesCached();
+            }
+
+            @Override
+            public void onFail() {
+                imageListener.onImagesFailedToCache(NativeErrorCode.IMAGE_DOWNLOAD_FAILURE);
+            }
+        });
+    }
+
+    public interface ImageListener {
+        /**
+         * Called when images are successfully cached. If you haven't already called
+         * {@link CustomEventNativeListener#onNativeAdLoaded}, you should typically do so now.
+         */
+        void onImagesCached();
+
+        /**
+         * Called when images failed to cache. You should typically call
+         * {@link CustomEventNativeListener#onNativeAdFailed} from this callback.
+         */
+        void onImagesFailedToCache(NativeErrorCode errorCode);
+    }
+
+    public interface CustomEventNativeListener {
+        /**
+         * Your custom event subclass must call this method when it successfully loads a native ad.
+         * Failure to do so will disrupt the mediation waterfall and cause future ad requests to
+         * stall.
+         */
+        void onNativeAdLoaded(NativeAdInterface nativeAd);
+
+        /**
+         * Your custom event subclass must call this method when it fails to load a native ad.
+         * Failure to do so will disrupt the mediation waterfall and cause future ad requests to
+         * stall.
+         */
+        void onNativeAdFailed(NativeErrorCode errorCode);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
new file mode 100644
index 00000000..3aab114d
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
@@ -0,0 +1,54 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+
+import com.mopub.common.DownloadResponse;
+import com.mopub.common.HttpResponses;
+import com.mopub.common.util.Json;
+import com.mopub.common.util.MoPubLog;
+import com.mopub.common.util.ResponseHeader;
+import com.mopub.nativeads.factories.CustomEventNativeFactory;
+
+import java.util.HashMap;
+import java.util.Map;
+
+final class CustomEventNativeAdapter {
+    private CustomEventNativeAdapter() {}
+
+    static final String RESPONSE_BODY_KEY = "response_body_key";
+
+    public static void loadNativeAd(final Context context,
+            final Map<String, Object> localExtras,
+            final DownloadResponse downloadResponse,
+            final CustomEventNative.CustomEventNativeListener customEventNativeListener) {
+
+        final String customEventNativeData = downloadResponse.getFirstHeader(ResponseHeader.CUSTOM_EVENT_DATA);
+        final String customEventNativeClassName = downloadResponse.getFirstHeader(ResponseHeader.CUSTOM_EVENT_NAME);
+
+        final CustomEventNative customEventNative;
+        try {
+            customEventNative = CustomEventNativeFactory.create(customEventNativeClassName);
+        } catch (Exception e) {
+            MoPubLog.w("Failed to load Custom Event Native class: " + customEventNativeClassName);
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND);
+            return;
+        }
+
+        Map<String, String> serverExtras = new HashMap<String, String>();
+        // Attempt to load the JSON extras into mServerExtras.
+        try {
+            serverExtras = Json.jsonStringToMap(customEventNativeData);
+        } catch (Exception e) {
+            MoPubLog.w("Failed to create Map from JSON: " + customEventNativeData, e);
+        }
+
+        serverExtras.put(RESPONSE_BODY_KEY, HttpResponses.asResponseString(downloadResponse));
+
+        customEventNative.loadNativeAd(
+                context,
+                customEventNativeListener,
+                localExtras,
+                serverExtras
+        );
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/DownloadResponse.java b/mopub-sdk/src/main/java/com/mopub/nativeads/DownloadResponse.java
deleted file mode 100644
index b5825b12..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/DownloadResponse.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package com.mopub.nativeads;
-
-import com.mopub.common.util.Streams;
-
-import org.apache.http.HttpResponse;
-
-import java.io.BufferedInputStream;
-import java.io.ByteArrayOutputStream;
-
-class DownloadResponse {
-    private byte[] bytes = new byte[0];
-    private final int statusCode;
-    private final long contentLength;
-
-    DownloadResponse(final HttpResponse httpResponse) throws Exception {
-        final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
-        BufferedInputStream inputStream = null;
-        try {
-            inputStream = new BufferedInputStream(httpResponse.getEntity().getContent());
-            Streams.copyContent(inputStream, outputStream);
-            bytes = outputStream.toByteArray();
-        } finally {
-            Streams.closeStream(inputStream);
-            Streams.closeStream(outputStream);
-        }
-
-        this.statusCode = httpResponse.getStatusLine().getStatusCode();
-        this.contentLength = httpResponse.getEntity().getContentLength();
-    }
-
-    byte[] getByteArray() {
-        return bytes;
-    }
-
-    int getStatusCode() {
-        return statusCode;
-    }
-
-    long getContentLength() {
-        return contentLength;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java
index 9959c3ff..2f678f7f 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java
@@ -2,9 +2,11 @@
 
 import android.graphics.Bitmap;
 
+import com.mopub.common.CacheService;
+
 import java.util.List;
 
-import static com.mopub.nativeads.CacheService.DiskLruCacheGetListener;
+import static com.mopub.common.CacheService.DiskLruCacheGetListener;
 
 class ImageDiskTaskManager extends ImageTaskManager {
     private final List<String> mUrls;
@@ -29,7 +31,6 @@ void execute() {
 
     void failAllTasks() {
         if (mFailed.compareAndSet(false, true)) {
-            // See ImageDownloadTaskManager for an example
             mImageTaskManagerListener.onFail();
         }
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDownloadTaskManager.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDownloadTaskManager.java
index ff4eef45..d10574b5 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDownloadTaskManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDownloadTaskManager.java
@@ -2,7 +2,11 @@
 
 import android.graphics.Bitmap;
 
+import com.mopub.common.DownloadResponse;
+import com.mopub.common.DownloadTask;
+import com.mopub.common.HttpResponses;
 import com.mopub.common.util.AsyncTasks;
+import com.mopub.common.util.MoPubLog;
 
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.HttpGet;
@@ -12,8 +16,8 @@
 import java.util.List;
 import java.util.Map;
 
-import static com.mopub.nativeads.DownloadTask.DownloadTaskListener;
-import static com.mopub.nativeads.util.Utils.MoPubLog;
+import static com.mopub.common.DownloadTask.DownloadTaskListener;
+
 import static java.util.Map.Entry;
 
 class ImageDownloadTaskManager extends ImageTaskManager {
@@ -42,7 +46,13 @@ void execute() {
             final HttpUriRequest httpUriRequest = entry.getKey();
             final DownloadTask downloadTask = entry.getValue();
 
-            AsyncTasks.safeExecuteOnExecutor(downloadTask, httpUriRequest);
+            try {
+                AsyncTasks.safeExecuteOnExecutor(downloadTask, httpUriRequest);
+            } catch (Exception e) {
+                MoPubLog.d("Failed to download image", e);
+
+                mImageTaskManagerListener.onFail();
+            }
         }
     }
 
@@ -59,7 +69,7 @@ void failAllTasks() {
         @Override
         public void onComplete(final String url, final DownloadResponse downloadResponse) {
             if (downloadResponse == null || downloadResponse.getStatusCode() != HttpStatus.SC_OK) {
-                MoPubLog("Failed to download image: " + url);
+                MoPubLog.d("Failed to download image: " + url);
                 failAllTasks();
                 return;
             }
@@ -67,12 +77,12 @@ public void onComplete(final String url, final DownloadResponse downloadResponse
             final Bitmap bitmap = HttpResponses.asBitmap(downloadResponse);
 
             if (bitmap == null) {
-                MoPubLog("Failed to decode bitmap from response for image: " + url);
+                MoPubLog.d("Failed to decode bitmap from response for image: " + url);
                 failAllTasks();
                 return;
             }
 
-            MoPubLog("Successfully downloaded image: " + url);
+            MoPubLog.d("Successfully downloaded image: " + url);
             mImages.put(url, bitmap);
             if (mCompletedCount.incrementAndGet() == mSize) {
                 mImageTaskManagerListener.onSuccess(mImages);
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageService.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageService.java
index ae3fbf5b..6276a80c 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageService.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageService.java
@@ -4,6 +4,8 @@
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 
+import com.mopub.common.CacheService;
+import com.mopub.common.util.MoPubLog;
 import com.mopub.common.util.Streams;
 
 import java.io.ByteArrayOutputStream;
@@ -13,7 +15,6 @@
 import java.util.Map;
 
 import static com.mopub.nativeads.ImageTaskManager.ImageTaskManagerListener;
-import static com.mopub.nativeads.util.Utils.MoPubLog;
 import static java.util.Map.Entry;
 
 class ImageService {
@@ -45,7 +46,7 @@ static void get(final List<String> urls, final ImageServiceListener imageService
                     new ImageDiskTaskManagerListener(imageServiceListener, cacheBitmaps)
             );
         } catch (IllegalArgumentException e) {
-            MoPubLog("Unable to initialize ImageDiskTaskManager", e);
+            MoPubLog.d("Unable to initialize ImageDiskTaskManager", e);
             imageServiceListener.onFail();
             return;
         }
@@ -55,7 +56,7 @@ static void get(final List<String> urls, final ImageServiceListener imageService
 
     static void putBitmapsInCache(final Map<String, Bitmap> bitmaps) {
         for (final Entry<String, Bitmap> entry : bitmaps.entrySet()) {
-            MoPubLog("Caching bitmap: " + entry.getKey());
+            MoPubLog.d("Caching bitmap: " + entry.getKey());
             putBitmapInCache(entry.getKey(), entry.getValue());
         }
     }
@@ -68,7 +69,7 @@ static void putBitmapInCache(final String key, final Bitmap bitmap) {
     static List<String> getBitmapsFromMemoryCache(final List<String> urls, final Map<String, Bitmap> hits) {
         final List<String> cacheMisses = new ArrayList<String>();
         for (final String url : urls) {
-            Bitmap bitmap = getBitmapFromMemoryCache(url);
+            final Bitmap bitmap = getBitmapFromMemoryCache(url);
 
             if (bitmap != null) {
                 hits.put(url, bitmap);
@@ -137,7 +138,7 @@ public void onSuccess(final Map<String, Bitmap> diskBitmaps) {
                             new ImageNetworkTaskManagerListener(mImageServiceListener, mBitmaps)
                     );
                 } catch (IllegalArgumentException e) {
-                    MoPubLog("Unable to initialize ImageDownloadTaskManager", e);
+                    MoPubLog.d("Unable to initialize ImageDownloadTaskManager", e);
                     mImageServiceListener.onFail();
                     return;
                 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageViewService.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageViewService.java
index 364c58a3..924cd626 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageViewService.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageViewService.java
@@ -4,6 +4,7 @@
 import android.view.View;
 import android.widget.ImageView;
 
+import com.mopub.common.util.MoPubLog;
 import com.mopub.common.util.Utils;
 
 import java.lang.ref.WeakReference;
@@ -11,7 +12,6 @@
 import java.util.Map;
 
 import static com.mopub.nativeads.ImageService.ImageServiceListener;
-import static com.mopub.nativeads.util.Utils.MoPubLog;
 
 class ImageViewService {
     // random large number so we hopefully don't collide with something a pub is using
@@ -65,7 +65,7 @@ public void onSuccess(final Map<String, Bitmap> bitmaps) {
 
         @Override
         public void onFail() {
-            MoPubLog("Failed to load image for ImageView");
+            MoPubLog.d("Failed to load image for ImageView");
         }
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTrackingManager.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTrackingManager.java
index 70d66479..8e2da415 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTrackingManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTrackingManager.java
@@ -13,14 +13,10 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-import static com.mopub.nativeads.MoPubNative.MoPubNativeListener;
-import static com.mopub.nativeads.NativeHttpClient.makeTrackingHttpRequest;
-
 class ImpressionTrackingManager {
     private static final int PERIOD = 250;
 
     private static WeakHashMap<View, NativeResponseWrapper> sKeptViews = new WeakHashMap<View, NativeResponseWrapper>(10);
-
     private static final ScheduledExecutorService sScheduledExecutorService = Executors.newSingleThreadScheduledExecutor();
     private static final VisibilityCheck sVisibilityCheck = new VisibilityCheck();
     private static AtomicBoolean mIsStarted = new AtomicBoolean(false);
@@ -42,10 +38,14 @@ static void stop() {
         }
     }
 
-    static void addView(final View view, final NativeResponse nativeResponse, final MoPubNativeListener moPubNativeListener) {
-        if (view != null && nativeResponse != null) {
-            sKeptViews.put(view, new NativeResponseWrapper(nativeResponse, moPubNativeListener));
+    static void addView(final View view, final NativeResponse nativeResponse) {
+        if (view == null || nativeResponse == null) {
+            return;
         }
+        sKeptViews.put(
+                view,
+                new NativeResponseWrapper(nativeResponse)
+        );
     }
 
     static void removeView(final View view) {
@@ -53,9 +53,6 @@ static void removeView(final View view) {
     }
 
     static class VisibilityCheck implements Runnable {
-        private static final double MINIMUM_PERCENT_VISIBLE = 50;
-        private static final long MINIMUM_IMPRESSION_TIME = 1000;
-
         @Override
         public void run() {
             final Iterator<Map.Entry<View, NativeResponseWrapper>> entryIterator = sKeptViews.entrySet().iterator();
@@ -63,10 +60,10 @@ public void run() {
             while (entryIterator.hasNext()) {
                 final Map.Entry<View, NativeResponseWrapper> entry = entryIterator.next();
                 final View view = entry.getKey();
-                final NativeResponseWrapper wrapper = entry.getValue();
+                final NativeResponseWrapper nativeResponseWrapper = entry.getValue();
 
                 // if our wrapper or its response is null, skip
-                if (wrapper == null || wrapper.mNativeResponse == null) {
+                if (nativeResponseWrapper == null || nativeResponseWrapper.mNativeResponse == null) {
                     try {
                         entryIterator.remove();
                     } catch (ConcurrentModificationException e) {
@@ -75,7 +72,7 @@ public void run() {
                     continue;
                 }
 
-                if (wrapper.mNativeResponse.isDestroyed()) {
+                if (nativeResponseWrapper.mNativeResponse.isDestroyed()) {
                     try {
                         entryIterator.remove();
                     } catch (ConcurrentModificationException e) {
@@ -85,7 +82,7 @@ public void run() {
                 }
 
                 // if this response has already recorded an impression, skip
-                if (wrapper.mNativeResponse.getRecordedImpression()) {
+                if (nativeResponseWrapper.mNativeResponse.getRecordedImpression()) {
                     try {
                         entryIterator.remove();
                     } catch (ConcurrentModificationException e) {
@@ -95,72 +92,60 @@ public void run() {
                 }
 
                 // if the view is not sufficiently visible, reset the visible timestamp, and skip
-                if (!isVisible(view)) {
-                    wrapper.mFirstVisibleTimestamp = 0;
+                if (!isVisible(view, nativeResponseWrapper)) {
+                    nativeResponseWrapper.mFirstVisibleTimestamp = 0;
                     continue;
                 }
 
                 // if it just became visible, set the firstChecked timestamp, and skip
-                if (wrapper.mFirstVisibleTimestamp == 0) {
-                    wrapper.mFirstVisibleTimestamp = SystemClock.uptimeMillis();
+                if (nativeResponseWrapper.mFirstVisibleTimestamp == 0) {
+                    nativeResponseWrapper.mFirstVisibleTimestamp = SystemClock.uptimeMillis();
                     continue;
                 }
 
                 // if not enough time has elapsed, skip
-                if (SystemClock.uptimeMillis() - wrapper.mFirstVisibleTimestamp < MINIMUM_IMPRESSION_TIME) {
+                if (SystemClock.uptimeMillis() - nativeResponseWrapper.mFirstVisibleTimestamp < nativeResponseWrapper.mNativeResponse.getImpressionMinTimeViewed()) {
                     continue;
                 }
 
                 // otherwise, record an impression
-                wrapper.mNativeResponse.recordImpression();
-
-                // Fire and forget impression trackers
-                for (final String impressionTracker : wrapper.mNativeResponse.getImpressionTrackers()) {
-                    makeTrackingHttpRequest(impressionTracker);
-                }
+                nativeResponseWrapper.mNativeResponse.recordImpression(view);
 
-                // Notify the developer
-                if (wrapper.mMoPubNativeListener != null) {
-                    wrapper.mMoPubNativeListener.onNativeImpression(view);
-                    try {
-                        entryIterator.remove();
-                    } catch (ConcurrentModificationException e) {
-                        // continue
-                    }
+                try {
+                    entryIterator.remove();
+                } catch (ConcurrentModificationException e) {
+                    // continue
                 }
             }
         }
 
-        static boolean isVisible(final View view) {
-            if (view == null || view.getVisibility() != View.VISIBLE) {
+        static boolean isVisible(final View view, final NativeResponseWrapper nativeResponseWrapper) {
+            if (view == null || nativeResponseWrapper == null || view.getVisibility() != View.VISIBLE) {
                 return false;
             }
 
             final Rect visibleRect = new Rect();
             view.getGlobalVisibleRect(visibleRect);
 
-            int visibleViewArea = visibleRect.width() * visibleRect.height();
-            int totalViewArea = view.getWidth() * view.getHeight();
+            final int visibleViewArea = visibleRect.width() * visibleRect.height();
+            final int totalViewArea = view.getWidth() * view.getHeight();
 
             if (totalViewArea <= 0) {
                 return false;
             }
 
-            double visiblePercent = 100 * visibleViewArea / totalViewArea;
+            final double visiblePercent = 100 * visibleViewArea / totalViewArea;
 
-            return visiblePercent >= MINIMUM_PERCENT_VISIBLE;
+            return visiblePercent >= nativeResponseWrapper.mNativeResponse.getImpressionMinPercentageViewed();
         }
     }
 
     static class NativeResponseWrapper {
         final NativeResponse mNativeResponse;
-        final MoPubNativeListener mMoPubNativeListener;
         long mFirstVisibleTimestamp;
 
-        NativeResponseWrapper(final NativeResponse nativeResponse,
-                final MoPubNativeListener moPubNativeListener) {
+        NativeResponseWrapper(final NativeResponse nativeResponse) {
             mNativeResponse = nativeResponse;
-            mMoPubNativeListener = moPubNativeListener;
             mFirstVisibleTimestamp = 0;
         }
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
new file mode 100644
index 00000000..a7f43959
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
@@ -0,0 +1,182 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+
+import com.mopub.common.util.MoPubLog;
+import com.mopub.common.util.Numbers;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.json.JSONTokener;
+
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import static com.mopub.common.util.Numbers.parseDouble;
+import static com.mopub.nativeads.CustomEventNativeAdapter.RESPONSE_BODY_KEY;
+import static com.mopub.nativeads.NativeResponse.Parameter;
+
+public class MoPubCustomEventNative extends CustomEventNative {
+    @Override
+    protected void loadNativeAd(final Context context,
+            final CustomEventNativeListener customEventNativeListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
+
+        final MoPubForwardingNativeAd moPubForwardingNativeAd;
+        try {
+            moPubForwardingNativeAd = new MoPubForwardingNativeAd(serverExtras.get(RESPONSE_BODY_KEY));
+        } catch (IllegalArgumentException e) {
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+            return;
+        } catch (JSONException e) {
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_JSON);
+            return;
+        }
+        preCacheImages(context, moPubForwardingNativeAd.getAllImageUrls(), new ImageListener() {
+            @Override
+            public void onImagesCached() {
+                customEventNativeListener.onNativeAdLoaded(moPubForwardingNativeAd);
+            }
+
+            @Override
+            public void onImagesFailedToCache(NativeErrorCode errorCode) {
+                customEventNativeListener.onNativeAdFailed(errorCode);
+            }
+        });
+    }
+
+    static class MoPubForwardingNativeAd extends BaseForwardingNativeAd {
+        MoPubForwardingNativeAd(final String jsonString) throws IllegalArgumentException, JSONException {
+            if (jsonString == null) {
+                throw new IllegalArgumentException("Json String cannot be null");
+            }
+
+            final JSONTokener jsonTokener = new JSONTokener(jsonString);
+            final JSONObject jsonObject = new JSONObject(jsonTokener);
+
+            if (!containsRequiredKeys(jsonObject)) {
+                throw new IllegalArgumentException("JSONObject did not contain required keys.");
+            }
+
+            final Iterator<String> keys = jsonObject.keys();
+            while (keys.hasNext()) {
+                final String key = keys.next();
+                final Parameter parameter = Parameter.from(key);
+
+                if (parameter != null) {
+                    try {
+                        addInstanceVariable(parameter, jsonObject.opt(key));
+                    } catch (ClassCastException e) {
+                        throw new IllegalArgumentException("JSONObject key (" + key + ") contained unexpected value.");
+                    }
+                } else {
+                    addExtra(key, jsonObject.opt(key));
+                }
+            }
+        }
+
+        private boolean containsRequiredKeys(final JSONObject jsonObject) {
+            final Set<String> keys = new HashSet<String>();
+
+            final Iterator<String> jsonKeys = jsonObject.keys();
+            while (jsonKeys.hasNext()) {
+                keys.add(jsonKeys.next());
+            }
+
+            return keys.containsAll(Parameter.requiredKeys);
+        }
+
+        private void addInstanceVariable(final Parameter key, final Object value) throws ClassCastException {
+            try {
+                switch (key) {
+                    case MAIN_IMAGE:
+                        setMainImageUrl((String) value);
+                        break;
+                    case ICON_IMAGE:
+                        setIconImageUrl((String) value);
+                        break;
+                    case IMPRESSION_TRACKER:
+                        addImpressionTrackers(value);
+                        break;
+                    case CLICK_TRACKER:
+                        break;
+                    case CLICK_DESTINATION:
+                        setClickDestinationUrl((String) value);
+                        break;
+                    case CALL_TO_ACTION:
+                        setCallToAction((String) value);
+                        break;
+                    case TITLE:
+                        setTitle((String) value);
+                        break;
+                    case TEXT:
+                        setText((String) value);
+                        break;
+                    case STAR_RATING:
+                        setStarRating(parseDouble(value));
+                        break;
+                    default:
+                        MoPubLog.d("Unable to add JSON key to internal mapping: " + key.name);
+                        break;
+                }
+            } catch (ClassCastException e) {
+                if (!key.required) {
+                    MoPubLog.d("Ignoring class cast exception for optional key: " + key.name);
+                } else {
+                    throw e;
+                }
+            }
+        }
+
+        private void addImpressionTrackers(final Object impressionTrackers) throws ClassCastException {
+            if (!(impressionTrackers instanceof JSONArray)) {
+                throw new ClassCastException("Expected impression trackers of type JSONArray.");
+            }
+
+            final JSONArray trackers = (JSONArray) impressionTrackers;
+            for (int i = 0; i < trackers.length(); i++) {
+                try {
+                    addImpressionTracker(trackers.getString(i));
+                } catch (JSONException e) {
+                    // This will only occur if we access a non-existent index in JSONArray.
+                    MoPubLog.d("Unable to parse impression trackers.");
+                }
+            }
+        }
+
+        private boolean isImageKey(final String name) {
+            return name != null && name.toLowerCase().endsWith("image");
+        }
+
+        List<String> getExtrasImageUrls() {
+            final List<String> extrasBitmapUrls = new ArrayList<String>(getExtras().size());
+            for (final Map.Entry<String, Object> entry : getExtras().entrySet()) {
+                if (isImageKey(entry.getKey()) && entry.getValue() instanceof String) {
+                    extrasBitmapUrls.add((String) entry.getValue());
+                }
+            }
+
+            return extrasBitmapUrls;
+        }
+
+        List<String> getAllImageUrls() {
+            final List<String> imageUrls = new ArrayList<String>();
+            if (getMainImageUrl() != null) {
+                imageUrls.add(getMainImageUrl());
+            }
+            if (getIconImageUrl() != null) {
+                imageUrls.add(getIconImageUrl());
+            }
+
+            imageUrls.addAll(getExtrasImageUrls());
+            return imageUrls;
+        }
+
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
index 94863461..7b567d10 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
@@ -1,34 +1,39 @@
 package com.mopub.nativeads;
 
 import android.content.Context;
-import android.graphics.Bitmap;
 import android.view.View;
 
+import com.mopub.common.DownloadResponse;
+import com.mopub.common.DownloadTask;
 import com.mopub.common.GpsHelper;
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.DeviceUtils;
+import com.mopub.common.util.ManifestUtils;
+import com.mopub.common.util.MoPubLog;
+import com.mopub.common.util.ResponseHeader;
 
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.client.methods.HttpUriRequest;
-import org.json.JSONObject;
 
+import java.lang.ref.WeakReference;
+import java.util.HashMap;
 import java.util.Map;
 
 import static com.mopub.common.GpsHelper.GpsHelperListener;
 import static com.mopub.common.GpsHelper.asyncFetchAdvertisingInfo;
+import static com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
+import static com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
 import static com.mopub.nativeads.MoPubNative.MoPubNativeListener.EMPTY_MOPUB_NATIVE_LISTENER;
 import static com.mopub.nativeads.NativeErrorCode.CONNECTION_ERROR;
 import static com.mopub.nativeads.NativeErrorCode.EMPTY_AD_RESPONSE;
-import static com.mopub.nativeads.NativeErrorCode.IMAGE_DOWNLOAD_FAILURE;
-import static com.mopub.nativeads.NativeErrorCode.INVALID_JSON;
 import static com.mopub.nativeads.NativeErrorCode.INVALID_REQUEST_URL;
 import static com.mopub.nativeads.NativeErrorCode.SERVER_ERROR_RESPONSE_CODE;
 import static com.mopub.nativeads.NativeErrorCode.UNEXPECTED_RESPONSE_CODE;
 import static com.mopub.nativeads.NativeErrorCode.UNSPECIFIED;
-import static com.mopub.nativeads.util.Utils.MoPubLog;
 
 public final class MoPubNative {
+
     public interface MoPubNativeListener {
         public void onNativeLoad(final NativeResponse nativeResponse);
         public void onNativeFail(final NativeErrorCode errorCode);
@@ -43,10 +48,11 @@
         };
     }
 
-    private NativeResponse mNativeResponse;
-    private final Context mContext;
+    // must be an activity context since 3rd party networks need it
+    private final WeakReference<Context> mContext;
     private final String mAdUnitId;
     private MoPubNativeListener mMoPubNativeListener;
+    private Map<String, Object> mLocalExtras;
 
     public MoPubNative(final Context context, final String adUnitId, final MoPubNativeListener moPubNativeListener) {
         ImpressionTrackingManager.start();
@@ -59,25 +65,41 @@ public MoPubNative(final Context context, final String adUnitId, final MoPubNati
             throw new IllegalArgumentException("MoPubNativeListener may not be null.");
         }
 
-        mContext = context.getApplicationContext();
+        ManifestUtils.checkNativeActivitiesDeclared(context);
+
+        mContext = new WeakReference<Context>(context);
         mAdUnitId = adUnitId;
         mMoPubNativeListener = moPubNativeListener;
         
         // warm up cache for google play services info
-        asyncFetchAdvertisingInfo(mContext);
+        asyncFetchAdvertisingInfo(context);
+    }
+
+    public void destroy() {
+        mContext.clear();
+        mMoPubNativeListener = EMPTY_MOPUB_NATIVE_LISTENER;
+    }
+
+    public void setLocalExtras(final Map<String, Object> localExtras) {
+        mLocalExtras = new HashMap<String, Object>(localExtras);
     }
 
     public void makeRequest() {
-        makeRequest(null);
+        final RequestParameters requestParameters = null;
+        makeRequest(requestParameters);
     }
 
     public void makeRequest(final RequestParameters requestParameters) {
-        makeRequest(requestParameters, new NativeGpsHelperListener(requestParameters));
+        makeRequest(new NativeGpsHelperListener(requestParameters));
     }
 
-    void makeRequest(final RequestParameters requestParameters,
-            NativeGpsHelperListener nativeGpsHelperListener) {
-        if (!DeviceUtils.isNetworkAvailable(mContext)) {
+    void makeRequest(final NativeGpsHelperListener nativeGpsHelperListener) {
+        final Context context = getContextOrDestroy();
+        if (context == null) {
+            return;
+        }
+
+        if (!DeviceUtils.isNetworkAvailable(context)) {
             mMoPubNativeListener.onNativeFail(CONNECTION_ERROR);
             return;
         }
@@ -86,24 +108,30 @@ void makeRequest(final RequestParameters requestParameters,
         // is not cached then guarantee we get it before building the ad request url
         // in the callback, this is a requirement from Google
         GpsHelper.asyncFetchAdvertisingInfoIfNotCached(
-                mContext,
+                context,
                 nativeGpsHelperListener
         );
     }
-    public void destroy() {
-        mMoPubNativeListener = EMPTY_MOPUB_NATIVE_LISTENER;
-    }
 
-    private void loadNativeAd(final RequestParameters requestParameters) {
-        String endpointUrl = new NativeUrlGenerator(mContext)
+    void loadNativeAd(final RequestParameters requestParameters) {
+        final Context context = getContextOrDestroy();
+        if (context == null) {
+            return;
+        }
+
+        final String endpointUrl = new NativeUrlGenerator(context)
                 .withAdUnitId(mAdUnitId)
                 .withRequest(requestParameters)
                 .generateUrlString(Constants.NATIVE_HOST);
 
         if (endpointUrl != null) {
-            MoPubLog("Loading ad from: " + endpointUrl);
+            MoPubLog.d("Loading ad from: " + endpointUrl);
         }
 
+        requestNativeAd(endpointUrl);
+    }
+
+    private void requestNativeAd(final String endpointUrl) {
         final HttpGet httpGet;
         try {
             httpGet = new HttpGet(endpointUrl);
@@ -129,39 +157,54 @@ public void onComplete(final String url, final DownloadResponse downloadResponse
                 } else if (downloadResponse.getContentLength() == 0) {
                     mMoPubNativeListener.onNativeFail(EMPTY_AD_RESPONSE);
                 } else {
+                    final CustomEventNativeListener customEventNativeListener = new CustomEventNativeListener() {
+                        @Override
+                        public void onNativeAdLoaded(final NativeAdInterface nativeAd) {
+                            final Context context = getContextOrDestroy();
+                            if (context == null) {
+                                return;
+                            }
+                            mMoPubNativeListener.onNativeLoad(new NativeResponse(context, downloadResponse, nativeAd, mMoPubNativeListener));
+                        }
 
-                    final JSONObject jsonObject = HttpResponses.asJsonObject(downloadResponse);
-
-                    if (jsonObject == null) {
-                        mMoPubNativeListener.onNativeFail(INVALID_JSON);
-                    } else {
-                        try {
-                            mNativeResponse = new NativeResponse(jsonObject);
-                        } catch (IllegalArgumentException e) {
-                            mMoPubNativeListener.onNativeFail(INVALID_JSON);
-                            return;
+                        @Override
+                        public void onNativeAdFailed(final NativeErrorCode errorCode) {
+                            requestNativeAd(downloadResponse.getFirstHeader(ResponseHeader.FAIL_URL));
                         }
-                        downloadImages();
+                    };
+
+                    final Context context = getContextOrDestroy();
+                    if (context == null) {
+                        return;
                     }
+                    CustomEventNativeAdapter.loadNativeAd(
+                            context,
+                            mLocalExtras,
+                            downloadResponse,
+                            customEventNativeListener
+                    );
                 }
             }
         });
 
-        AsyncTasks.safeExecuteOnExecutor(jsonDownloadTask, httpUriRequest);
-    }
+        try {
+            AsyncTasks.safeExecuteOnExecutor(jsonDownloadTask, httpUriRequest);
+        } catch (Exception e) {
+            MoPubLog.d("Failed to download json", e);
 
-    private void downloadImages() {
-        ImageService.get(mContext, mNativeResponse.getAllImageUrls(), new ImageService.ImageServiceListener() {
-            @Override
-            public void onSuccess(Map<String, Bitmap> bitmaps) {
-                mMoPubNativeListener.onNativeLoad(mNativeResponse);
-            }
+            mMoPubNativeListener.onNativeFail(UNSPECIFIED);
+        }
 
-            @Override
-            public void onFail() {
-                mMoPubNativeListener.onNativeFail(IMAGE_DOWNLOAD_FAILURE);
-            }
-        });
+    }
+
+    Context getContextOrDestroy() {
+        final Context context = mContext.get();
+        if (context == null) {
+            destroy();
+            MoPubLog.d("Weak reference to Activity Context in MoPubNative became null. This instance" +
+                    " of MoPubNative is destroyed and No more requests will be processed.");
+        }
+        return context;
     }
 
     // Do not store this class as a member of MoPubNative; will result in circular reference
@@ -175,4 +218,9 @@ public void onFetchAdInfoCompleted() {
             loadNativeAd(mRequestParameters);
         }
     }
+
+    @Deprecated
+    MoPubNativeListener getMoPubNativeListener() {
+        return mMoPubNativeListener;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java
new file mode 100644
index 00000000..f4f247bd
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java
@@ -0,0 +1,31 @@
+package com.mopub.nativeads;
+
+import android.view.View;
+
+import java.util.Map;
+import java.util.Set;
+
+interface NativeAdInterface {
+    // Getters
+    String getMainImageUrl();
+    String getIconImageUrl();
+    String getClickDestinationUrl();
+    String getCallToAction();
+    String getTitle();
+    String getText();
+    Double getStarRating();
+
+    Set<String> getImpressionTrackers();
+    int getImpressionMinPercentageViewed();
+    int getImpressionMinTimeViewed();
+
+    // Extras Getters
+    Object getExtra(final String key);
+    Map<String, Object> getExtras();
+
+    // Event Handlers
+    void prepareImpression(final View view);
+    void recordImpression();
+    void handleClick(final View view);
+    void destroy();
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
index 04e0e456..faf76da4 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
@@ -1,28 +1,17 @@
 package com.mopub.nativeads;
 
 import android.content.Context;
-import android.content.Intent;
-import android.net.Uri;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.Button;
 
-import com.mopub.common.MoPubBrowser;
-
-import java.lang.ref.SoftReference;
-import java.util.Arrays;
-import java.util.Iterator;
+import com.mopub.common.util.MoPubLog;
 
 import static android.view.View.GONE;
 import static android.view.View.OnClickListener;
 import static android.view.View.VISIBLE;
-import static com.mopub.common.util.IntentUtils.deviceCanHandleIntent;
-import static com.mopub.common.util.IntentUtils.isDeepLink;
 import static com.mopub.nativeads.MoPubNative.MoPubNativeListener;
-import static com.mopub.nativeads.NativeHttpClient.makeTrackingHttpRequest;
-import static com.mopub.nativeads.UrlResolutionTask.UrlResolutionListener;
-import static com.mopub.nativeads.util.Utils.MoPubLog;
 
 class NativeAdViewHelper {
     private NativeAdViewHelper() {}
@@ -35,7 +24,7 @@ static View getAdView(View convertView,
                           final MoPubNativeListener moPubNativeListener) {
 
         if (viewBinder == null) {
-            MoPubLog("ViewBinder is null, returning empty view.");
+            MoPubLog.d("ViewBinder is null, returning empty view.");
             return new View(context);
         }
 
@@ -51,19 +40,19 @@ static View getAdView(View convertView,
 
         if (nativeResponse == null) {
             // If we don't have content for the view, then hide the view for now
-            MoPubLog("NativeResponse is null, returning hidden view.");
+            MoPubLog.d("NativeResponse is null, returning hidden view.");
             convertView.setVisibility(GONE);
         } else if (nativeResponse.isDestroyed()) {
-            MoPubLog("NativeResponse is destroyed, returning hidden view.");
+            MoPubLog.d("NativeResponse is destroyed, returning hidden view.");
             convertView.setVisibility(GONE);
         } else if (nativeViewHolder == null) {
-            MoPubLog("Could not create NativeViewHolder, returning hidden view.");
+            MoPubLog.d("Could not create NativeViewHolder, returning hidden view.");
             convertView.setVisibility(GONE);
         } else {
             populateConvertViewSubViews(convertView, nativeViewHolder, nativeResponse, viewBinder);
-            attachClickListeners(context, convertView, nativeViewHolder, nativeResponse, moPubNativeListener);
+            attachClickListeners(convertView, nativeViewHolder, nativeResponse);
             convertView.setVisibility(VISIBLE);
-            ImpressionTrackingManager.addView(convertView, nativeResponse, moPubNativeListener);
+            nativeResponse.prepareImpression(convertView);
         }
 
         return convertView;
@@ -89,9 +78,9 @@ static NativeViewHolder getOrCreateNativeViewHolder(final View convertView, fina
     }
 
     private static void populateConvertViewSubViews(final View convertView,
-                                                    final NativeViewHolder nativeViewHolder,
-                                                    final NativeResponse nativeResponse,
-                                                    final ViewBinder viewBinder) {
+            final NativeViewHolder nativeViewHolder,
+            final NativeResponse nativeResponse,
+            final ViewBinder viewBinder) {
         nativeViewHolder.update(nativeResponse);
         nativeViewHolder.updateExtras(convertView, nativeResponse, viewBinder);
     }
@@ -106,25 +95,21 @@ private static void removeClickListeners(final View view,
         setCtaClickListener(nativeViewHolder, null);
     }
 
-    private static void attachClickListeners(final Context context,
-                                             final View view,
-                                             final NativeViewHolder nativeViewHolder,
-                                             final NativeResponse nativeResponse,
-                                             final MoPubNativeListener moPubNativeListener) {
+    private static void attachClickListeners(final View view,
+            final NativeViewHolder nativeViewHolder,
+            final NativeResponse nativeResponse) {
         if (view == null || nativeResponse == null) {
             return;
         }
 
-        final String clickTrackerUrl = nativeResponse.getClickTracker();
-        final String destinationUrl = nativeResponse.getClickDestinationUrl();
         final NativeViewClickListener nativeViewClickListener
-                = new NativeViewClickListener(context, clickTrackerUrl, destinationUrl, moPubNativeListener);
+                = new NativeViewClickListener(nativeResponse);
         view.setOnClickListener(nativeViewClickListener);
         setCtaClickListener(nativeViewHolder, nativeViewClickListener);
     }
 
     private static void setCtaClickListener(final NativeViewHolder nativeViewHolder,
-                                            final NativeViewClickListener nativeViewClickListener) {
+            final NativeViewClickListener nativeViewClickListener) {
         if (nativeViewHolder == null || nativeViewClickListener == null) {
             return;
         }
@@ -137,98 +122,15 @@ private static void setCtaClickListener(final NativeViewHolder nativeViewHolder,
     }
 
     static class NativeViewClickListener implements OnClickListener {
-        private final Context mContext;
-        private final String mClickTrackerUrl;
-        private final String mDestinationUrl;
-        private final MoPubNativeListener mMoPubNativeListener;
-
-        NativeViewClickListener(final Context context,
-                final String clickTrackerUrl,
-                final String destinationUrl,
-                final MoPubNativeListener moPubNativeListener) {
-            mContext = context.getApplicationContext();
-            mClickTrackerUrl = clickTrackerUrl;
-            mDestinationUrl = destinationUrl;
-            mMoPubNativeListener = moPubNativeListener;
-        }
+        private final NativeResponse mNativeResponse;
 
-        @Override
-        public void onClick(View view) {
-            final SpinningProgressView spinningProgressView = new SpinningProgressView(mContext);
-            spinningProgressView.addToRoot(view);
-
-            // Fire and forget click tracker
-            makeTrackingHttpRequest(mClickTrackerUrl);
-
-            if (mDestinationUrl != null) {
-                final Iterator<String> urlIterator = Arrays.asList(mDestinationUrl).iterator();
-                final ClickDestinationUrlResolutionListener urlResolutionListener = new ClickDestinationUrlResolutionListener(
-                        mContext,
-                        urlIterator,
-                        spinningProgressView,
-                        mMoPubNativeListener,
-                        view
-                );
-                NativeHttpClient.getResolvedUrl(urlIterator.next(), urlResolutionListener);
-            }
-        }
-    }
-
-    private static class ClickDestinationUrlResolutionListener implements UrlResolutionListener {
-        private final Context mContext;
-        private final Iterator<String> mUrlIterator;
-        private final SoftReference<SpinningProgressView> mSpinningProgressView;
-        private final MoPubNativeListener mMoPubNativeListener;
-        private final SoftReference<View> mView;
-
-        public ClickDestinationUrlResolutionListener(final Context context,
-                final Iterator<String> urlIterator,
-                final SpinningProgressView spinningProgressView,
-                final MoPubNativeListener moPubNativeListener,
-                final View view) {
-            mContext = context;
-            mUrlIterator = urlIterator;
-            mSpinningProgressView = new SoftReference<SpinningProgressView>(spinningProgressView);
-            mMoPubNativeListener = (moPubNativeListener == null)
-                    ? MoPubNativeListener.EMPTY_MOPUB_NATIVE_LISTENER
-                    : moPubNativeListener;
-            mView = new SoftReference<View>(view);
+        NativeViewClickListener(final NativeResponse nativeResponse) {
+            mNativeResponse = nativeResponse;
         }
 
         @Override
-        public void onSuccess(String result) {
-            final Intent intent = new Intent(Intent.ACTION_VIEW);
-            intent.setData(Uri.parse(result));
-            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-
-            if (isDeepLink(result)) {
-                if (deviceCanHandleIntent(mContext, intent)) {
-                    mMoPubNativeListener.onNativeClick(mView.get());
-                    mContext.startActivity(intent);
-                } else {
-                    if (mUrlIterator.hasNext()) {
-                        NativeHttpClient.getResolvedUrl(mUrlIterator.next(), this);
-                    } else {
-                        mMoPubNativeListener.onNativeClick(mView.get());
-                        MoPubBrowser.open(mContext, result);
-                    }
-                }
-            } else {
-                mMoPubNativeListener.onNativeClick(mView.get());
-                MoPubBrowser.open(mContext, result);
-            }
-
-            if (mSpinningProgressView.get() != null) {
-                mSpinningProgressView.get().removeFromRoot();
-            }
-        }
-
-        @Override
-        public void onFailure() {
-            MoPubLog("Failed to resolve URL for click.");
-            if (mSpinningProgressView.get() != null) {
-                mSpinningProgressView.get().removeFromRoot();
-            }
+        public void onClick(View view) {
+            mNativeResponse.handleClick(view);
         }
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeErrorCode.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeErrorCode.java
index 12a14a49..c0d86de4 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeErrorCode.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeErrorCode.java
@@ -8,7 +8,15 @@
     UNEXPECTED_RESPONSE_CODE("Received unexpected response code from server."),
     SERVER_ERROR_RESPONSE_CODE("Server returned erroneous response code."),
     CONNECTION_ERROR("Network is unavailable."),
-    UNSPECIFIED("Unspecified error occurred.");
+    UNSPECIFIED("Unspecified error occurred."),
+
+    NETWORK_INVALID_REQUEST("Third-party network received invalid request."),
+    NETWORK_TIMEOUT("Third-party network failed to respond in a timely manner."),
+    NETWORK_NO_FILL("Third-party network failed to provide inventory."),
+    NETWORK_INVALID_STATE("Third-party network failed due to invalid internal state."),
+
+    NATIVE_ADAPTER_CONFIGURATION_ERROR("Custom Event Native was configured incorrectly."),
+    NATIVE_ADAPTER_NOT_FOUND("Unable to find Custom Event Native.");
 
     private final String message;
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
index edf7f8d6..fab32c2b 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
@@ -1,30 +1,40 @@
 package com.mopub.nativeads;
 
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+import android.view.View;
 import android.widget.ImageView;
 
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
+import com.mopub.common.DownloadResponse;
+import com.mopub.common.HttpClient;
+import com.mopub.common.MoPubBrowser;
+import com.mopub.common.util.IntentUtils;
+import com.mopub.common.util.MoPubLog;
+import com.mopub.common.util.ResponseHeader;
 
+import java.lang.ref.SoftReference;
 import java.util.ArrayList;
-import java.util.HashMap;
+import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
+import static com.mopub.nativeads.MoPubNative.MoPubNativeListener;
+import static com.mopub.nativeads.MoPubNative.MoPubNativeListener.EMPTY_MOPUB_NATIVE_LISTENER;
 import static com.mopub.nativeads.NativeResponse.Parameter.CALL_TO_ACTION;
 import static com.mopub.nativeads.NativeResponse.Parameter.CLICK_DESTINATION;
 import static com.mopub.nativeads.NativeResponse.Parameter.CLICK_TRACKER;
 import static com.mopub.nativeads.NativeResponse.Parameter.ICON_IMAGE;
 import static com.mopub.nativeads.NativeResponse.Parameter.IMPRESSION_TRACKER;
 import static com.mopub.nativeads.NativeResponse.Parameter.MAIN_IMAGE;
+import static com.mopub.nativeads.NativeResponse.Parameter.STAR_RATING;
 import static com.mopub.nativeads.NativeResponse.Parameter.TEXT;
 import static com.mopub.nativeads.NativeResponse.Parameter.TITLE;
-import static com.mopub.nativeads.NativeResponse.Parameter.isImageKey;
-import static com.mopub.nativeads.util.Utils.MoPubLog;
-import static java.util.Map.Entry;
+import static com.mopub.nativeads.UrlResolutionTask.UrlResolutionListener;
+import static com.mopub.nativeads.UrlResolutionTask.getResolvedUrl;
 
 public final class NativeResponse {
     enum Parameter {
@@ -41,8 +51,8 @@
         CALL_TO_ACTION("ctatext", false),
         STAR_RATING("starrating", false);
 
-        private final String name;
-        private final boolean required;
+        final String name;
+        final boolean required;
 
         Parameter(final String name, boolean required) {
             this.name = name;
@@ -50,7 +60,7 @@
         }
 
         static Parameter from(final String name) {
-            for (final Parameter parameter : Parameter.values()) {
+            for (final Parameter parameter : values()) {
                 if (parameter.name.equals(name)) {
                     return parameter;
                 }
@@ -59,13 +69,9 @@ static Parameter from(final String name) {
             return null;
         }
 
-        static boolean isImageKey(final String name) {
-            return name != null && name.toLowerCase().endsWith("image");
-        }
-
         static Set<String> requiredKeys = new HashSet<String>();
         static {
-            for (final Parameter parameter : Parameter.values()) {
+            for (final Parameter parameter : values()) {
                 if (parameter.required) {
                     requiredKeys.add(parameter.name);
                 }
@@ -73,239 +79,277 @@ static boolean isImageKey(final String name) {
         }
     }
 
-    private String mMainImageUrl;
-    private String mIconImageUrl;
-    private List<String> mImpressionTrackers;
-    private String mClickTracker;
-    private String mClickDestinationUrl;
-    private String mCallToAction;
-    private String mTitle;
-    private String mText;
-    private boolean mRecordedImpression;
-    private final Map<String, Object> mExtras;
-    private boolean mIsDestroyed;
-
-    NativeResponse(final JSONObject jsonObject) throws IllegalArgumentException {
-        mExtras = new HashMap<String, Object>();
-        mImpressionTrackers = new ArrayList<String>();
-
-        if (!containsRequiredKeys(jsonObject)) {
-            throw new IllegalArgumentException("JSONObject did not contain required keys.");
-        }
-
-        Iterator<String> keys = jsonObject.keys();
-        while (keys.hasNext()) {
-            final String key = keys.next();
-            final Parameter parameter = Parameter.from(key);
-
-            if (parameter != null) {
-                try {
-                    addInstanceVariable(parameter, jsonObject.opt(key));
-                } catch (ClassCastException e) {
-                    throw new IllegalArgumentException("JSONObject key (" + key + ") contained unexpected value.");
-                }
-            } else {
-                addExtra(key, jsonObject.opt(key));
-            }
-        }
+    final Context mContext;
+    MoPubNativeListener mMoPubNativeListener;
+    final NativeAdInterface mNativeAd;
+
+    // Impression and click trackers for the MoPub adserver
+    final Set<String> mMoPubImpressionTrackers;
+    final String mMoPubClickTracker;
+
+    boolean mRecordedImpression;
+    boolean mIsClicked;
+    boolean mIsDestroyed;
+
+    public NativeResponse(final Context context,
+            final DownloadResponse downloadResponse,
+            final NativeAdInterface nativeAd,
+            final MoPubNativeListener moPubNativeListener) {
+        mContext = context.getApplicationContext();
+        mMoPubNativeListener = moPubNativeListener;
+        mNativeAd = nativeAd;
+
+        mMoPubImpressionTrackers = new HashSet<String>();
+        mMoPubImpressionTrackers.add(downloadResponse.getFirstHeader(ResponseHeader.IMPRESSION_URL));
+        mMoPubClickTracker = downloadResponse.getFirstHeader(ResponseHeader.CLICKTHROUGH_URL);
     }
 
     @Override
     public String toString() {
-        StringBuilder stringBuilder = new StringBuilder();
-
-        stringBuilder.append(TITLE.name).append(":").append(mTitle).append("\n");
-        stringBuilder.append(TEXT.name).append(":").append(mText).append("\n");
-        stringBuilder.append(ICON_IMAGE.name).append(":").append(mIconImageUrl).append("\n");
-        stringBuilder.append(MAIN_IMAGE.name).append(":").append(mMainImageUrl).append("\n");
-        stringBuilder.append(IMPRESSION_TRACKER.name).append(":").append(mImpressionTrackers).append("\n");
-        stringBuilder.append(CLICK_TRACKER.name).append(":").append(mClickTracker).append("\n");
-        stringBuilder.append(CLICK_DESTINATION.name).append(":").append(mClickDestinationUrl).append("\n");
-        stringBuilder.append(CALL_TO_ACTION.name).append(":").append(mCallToAction).append("\n");
+        final StringBuilder stringBuilder = new StringBuilder("\n");
+
+        stringBuilder.append(TITLE.name).append(":").append(getTitle()).append("\n");
+        stringBuilder.append(TEXT.name).append(":").append(getText()).append("\n");
+        stringBuilder.append(ICON_IMAGE.name).append(":").append(getIconImageUrl()).append("\n");
+        stringBuilder.append(MAIN_IMAGE.name).append(":").append(getMainImageUrl()).append("\n");
+        stringBuilder.append(STAR_RATING.name).append(":").append(getStarRating()).append("\n");
+        stringBuilder.append(IMPRESSION_TRACKER.name).append(":").append(getImpressionTrackers()).append("\n");
+        stringBuilder.append(CLICK_TRACKER.name).append(":").append(mMoPubClickTracker).append("\n");
+        stringBuilder.append(CLICK_DESTINATION.name).append(":").append(getClickDestinationUrl()).append("\n");
+        stringBuilder.append(CALL_TO_ACTION.name).append(":").append(getCallToAction()).append("\n");
         stringBuilder.append("recordedImpression").append(":").append(mRecordedImpression).append("\n");
-        stringBuilder.append("extras").append(":").append(mExtras);
+        stringBuilder.append("extras").append(":").append(getExtras());
 
         return stringBuilder.toString();
     }
 
-    public void destroy() {
-        mIsDestroyed = true;
-        mExtras.clear();
-    }
-
-    /**
-     * Getters
-     */
+    // Interface Methods
+    // Getters
     public String getMainImageUrl() {
-        return mMainImageUrl;
+        return mNativeAd.getMainImageUrl();
     }
 
-    public void loadMainImage(final ImageView imageView) {
-        loadImageView(mMainImageUrl, imageView);
+    public String getIconImageUrl() {
+        return mNativeAd.getIconImageUrl();
     }
 
-    public String getIconImageUrl() {
-        return mIconImageUrl;
+    public String getClickDestinationUrl() {
+        return mNativeAd.getClickDestinationUrl();
     }
 
-    public void loadIconImage(final ImageView imageView) {
-        loadImageView(mIconImageUrl, imageView);
+    public String getCallToAction() {
+        return mNativeAd.getCallToAction();
     }
 
-    public List<String> getImpressionTrackers() {
-        return mImpressionTrackers;
+    public String getTitle() {
+        return mNativeAd.getTitle();
     }
 
-    public String getClickTracker() {
-        return mClickTracker;
+    public String getText() {
+        return mNativeAd.getText();
     }
 
-    public String getClickDestinationUrl() {
-        return mClickDestinationUrl;
+    public List<String> getImpressionTrackers() {
+        final Set<String> allImpressionTrackers = new HashSet<String>();
+        allImpressionTrackers.addAll(mMoPubImpressionTrackers);
+        allImpressionTrackers.addAll(mNativeAd.getImpressionTrackers());
+        return new ArrayList<String>(allImpressionTrackers);
     }
 
-    public String getCallToAction() {
-        return mCallToAction;
+    public String getClickTracker() {
+        return mMoPubClickTracker;
     }
 
-    public String getTitle() {
-        return mTitle;
+    public Double getStarRating() {
+        return mNativeAd.getStarRating();
     }
 
-    public String getSubtitle() {
-        return mText;
+    public int getImpressionMinTimeViewed() {
+        return mNativeAd.getImpressionMinTimeViewed();
     }
 
-    public boolean getRecordedImpression() {
-        return mRecordedImpression;
+    public int getImpressionMinPercentageViewed() {
+        return mNativeAd.getImpressionMinPercentageViewed();
     }
 
+    // Extras Getters
     public Object getExtra(final String key) {
-        return mExtras.get(key);
+        return mNativeAd.getExtra(key);
     }
 
     public Map<String, Object> getExtras() {
-        return new HashMap<String, Object>(mExtras);
+        return mNativeAd.getExtras();
     }
 
-    public void loadExtrasImage(final String key, final ImageView imageView) {
-        Object object = mExtras.get(key);
-        if (object != null && object instanceof String) {
-            final String imageUrl = (String) mExtras.get(key);
-            loadImageView(imageUrl, imageView);
+    // Event Handlers
+    public void prepareImpression(final View view) {
+        if (getRecordedImpression() || isDestroyed()) {
+            return;
         }
-    }
 
-    private void loadImageView(final String url, final ImageView imageView) {
-        ImageViewService.loadImageView(url, imageView);
+        ImpressionTrackingManager.addView(view, this);
+        mNativeAd.prepareImpression(view);
     }
 
-    public boolean isDestroyed() {
-        return mIsDestroyed;
+    public void recordImpression(final View view) {
+        if (getRecordedImpression() || isDestroyed()) {
+            return;
+        }
+
+        for (final String impressionTracker : getImpressionTrackers()) {
+            HttpClient.makeTrackingHttpRequest(impressionTracker);
+        }
+
+        mNativeAd.recordImpression();
+        mRecordedImpression = true;
+
+        mMoPubNativeListener.onNativeImpression(view);
     }
 
-    List<String> getExtrasImageUrls() {
-        final List<String> extrasBitmapUrls = new ArrayList<String>(mExtras.size());
+    public void handleClick(final View view) {
+        if (isDestroyed()) {
+            return;
+        }
 
-        for (final Entry<String, Object> entry : mExtras.entrySet()) {
-            if (isImageKey(entry.getKey()) && entry.getValue() instanceof String) {
-                extrasBitmapUrls.add((String) entry.getValue());
-            }
+        if (!isClicked()) {
+            HttpClient.makeTrackingHttpRequest(mMoPubClickTracker);
         }
 
-        return extrasBitmapUrls;
+        openClickDestinationUrl(view);
+        mNativeAd.handleClick(view);
+        mIsClicked = true;
+
+        mMoPubNativeListener.onNativeClick(view);
     }
 
-    List<String> getAllImageUrls() {
-        final List<String> imageUrls = new ArrayList<String>();
-        if (mMainImageUrl != null) {
-            imageUrls.add(mMainImageUrl);
+    public void destroy() {
+        if (isDestroyed()) {
+            return;
         }
-        if (mIconImageUrl != null) {
-            imageUrls.add(mIconImageUrl);
+
+        mMoPubNativeListener = EMPTY_MOPUB_NATIVE_LISTENER;
+
+        mNativeAd.destroy();
+        mIsDestroyed = true;
+    }
+
+    // Non Interface Public Methods
+    public void loadMainImage(final ImageView imageView) {
+        loadImageView(getMainImageUrl(), imageView);
+    }
+
+    public void loadIconImage(final ImageView imageView) {
+        loadImageView(getIconImageUrl(), imageView);
+    }
+
+    public void loadExtrasImage(final String key, final ImageView imageView) {
+        final Object object = getExtra(key);
+        if (object != null && object instanceof String) {
+            loadImageView((String) object, imageView);
         }
+    }
 
-        imageUrls.addAll(getExtrasImageUrls());
-        return imageUrls;
+    public boolean getRecordedImpression() {
+        return mRecordedImpression;
     }
 
-    /**
-     * Setters
-     */
+    public boolean isClicked() {
+        return mIsClicked;
+    }
 
-    void recordImpression() {
-        mRecordedImpression = true;
+    public boolean isDestroyed() {
+        return mIsDestroyed;
     }
 
-    private boolean containsRequiredKeys(final JSONObject jsonObject) {
-        final Set<String> keys = new HashSet<String>();
+    // Helpers
+    private void loadImageView(final String url, final ImageView imageView) {
+        ImageViewService.loadImageView(url, imageView);
+    }
 
-        final Iterator<String> jsonKeys = jsonObject.keys();
-        while (jsonKeys.hasNext()) {
-            keys.add(jsonKeys.next());
+    private void openClickDestinationUrl(final View view) {
+        if (getClickDestinationUrl() == null) {
+            return;
         }
 
-        return keys.containsAll(Parameter.requiredKeys);
-    }
-
-    private void addInstanceVariable(final Parameter key, final Object value) throws ClassCastException {
-        try {
-            switch (key) {
-                case MAIN_IMAGE:
-                    mMainImageUrl = (String) value;
-                    break;
-                case ICON_IMAGE:
-                    mIconImageUrl = (String) value;
-                    break;
-                case IMPRESSION_TRACKER:
-                    addImpressionTrackers(value);
-                    break;
-                case CLICK_TRACKER:
-                    mClickTracker = (String) value;
-                    break;
-                case CLICK_DESTINATION:
-                    mClickDestinationUrl = (String) value;
-                    break;
-                case CALL_TO_ACTION:
-                    mCallToAction = (String) value;
-                    break;
-                case TITLE:
-                    mTitle = (String) value;
-                    break;
-                case TEXT:
-                    mText = (String) value;
-                    break;
-                default:
-                    MoPubLog("Unable to add JSON key to internal mapping: " + key.name);
-                    break;
-            }
-        } catch (ClassCastException e) {
-            if (!key.required) {
-                MoPubLog("Ignoring class cast exception for optional defined key: " + key.name);
-            } else {
-                throw e;
-            }
+        SpinningProgressView spinningProgressView = null;
+        if (view != null) {
+            spinningProgressView = new SpinningProgressView(mContext);
+            spinningProgressView.addToRoot(view);
         }
-    }
 
-    private void addExtra(final String key, final Object value) {
-        mExtras.put(key, value);
+        final Iterator<String> urlIterator = Arrays.asList(getClickDestinationUrl()).iterator();
+        final ClickDestinationUrlResolutionListener urlResolutionListener = new ClickDestinationUrlResolutionListener(
+                mContext,
+                urlIterator,
+                spinningProgressView
+        );
+
+        getResolvedUrl(urlIterator.next(), urlResolutionListener);
     }
 
-    private void addImpressionTrackers(final Object impressionTrackers) throws ClassCastException {
-        if (!(impressionTrackers instanceof JSONArray)) {
-            throw new ClassCastException("Expected impression trackers of type JSONArray.");
+    private static class ClickDestinationUrlResolutionListener implements UrlResolutionListener {
+        private final Context mContext;
+        private final Iterator<String> mUrlIterator;
+        private final SoftReference<SpinningProgressView> mSpinningProgressView;
+
+        public ClickDestinationUrlResolutionListener(final Context context,
+                final Iterator<String> urlIterator,
+                final SpinningProgressView spinningProgressView) {
+            mContext = context.getApplicationContext();
+            mUrlIterator = urlIterator;
+            mSpinningProgressView = new SoftReference<SpinningProgressView>(spinningProgressView);
+        }
+
+        @Override
+        public void onSuccess(final String resolvedUrl) {
+            final Intent intent = new Intent(Intent.ACTION_VIEW);
+            intent.setData(Uri.parse(resolvedUrl));
+            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+
+            if (IntentUtils.isDeepLink(resolvedUrl) && IntentUtils.deviceCanHandleIntent(mContext, intent)) {
+                // Open another Android app from deep link
+                mContext.startActivity(intent);
+            } else if (mUrlIterator.hasNext()) {
+                // If we can't handle a deep link then try the fallback url
+                getResolvedUrl(mUrlIterator.next(), this);
+                return;
+            } else {
+                // If we can't open the deep link and there are no backup links
+                // Or the link is a browser link then handle it here
+                MoPubBrowser.open(mContext, resolvedUrl);
+            }
+
+            removeSpinningProgressView();
         }
 
-        final JSONArray trackers = (JSONArray) impressionTrackers;
+        @Override
+        public void onFailure() {
+            MoPubLog.d("Failed to resolve URL for click.");
+            removeSpinningProgressView();
+        }
 
-        for (int i = 0; i < trackers.length(); i++) {
-            try {
-                mImpressionTrackers.add(trackers.getString(i));
-            } catch (JSONException e) {
-                // This will only occur if we access a non-existent index in JSONArray.
-                MoPubLog("Unable to parse impression trackers.");
+        private void removeSpinningProgressView() {
+            final SpinningProgressView spinningProgressView = mSpinningProgressView.get();
+            if (spinningProgressView != null) {
+                spinningProgressView.removeFromRoot();
             }
         }
     }
+
+    @Deprecated
+    public String getSubtitle() {
+        return mNativeAd.getText();
+    }
+
+    // Testing
+    @Deprecated
+    MoPubNativeListener getMoPubNativeListener() {
+        return mMoPubNativeListener;
+    }
+
+    // Testing
+    @Deprecated
+    void setRecordedImpression(final boolean recordedImpression) {
+        mRecordedImpression = recordedImpression;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
index 6d9e7ab4..af13c917 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
@@ -7,14 +7,16 @@
 import com.mopub.common.AdUrlGenerator;
 import com.mopub.common.GpsHelper;
 import com.mopub.common.LocationService;
-import com.mopub.common.util.DeviceUtils;
 import com.mopub.common.MoPub;
+import com.mopub.common.util.Strings;
 
 class NativeUrlGenerator extends AdUrlGenerator {
     private static int sLocationPrecision = 6;
     private static LocationService.LocationAwareness sLocationAwareness
             = LocationService.LocationAwareness.NORMAL;
 
+    private String mDesiredAssets;
+
     NativeUrlGenerator(Context context) {
         super(context);
     }
@@ -29,6 +31,7 @@ NativeUrlGenerator withRequest(final RequestParameters requestParameters) {
         if (requestParameters != null) {
             mKeywords = requestParameters.getKeywords();
             mLocation = requestParameters.getLocation();
+            mDesiredAssets = requestParameters.getDesiredAssets();
         }
         return this;
     }
@@ -77,9 +80,17 @@ public String generateUrlString(final String serverHostname) {
 
         setTwitterAppInstalledFlag();
 
+        setDesiredAssets();
+
         return getFinalUrlString();
     }
 
+    private void setDesiredAssets() {
+        if (mDesiredAssets != null && !Strings.isEmpty(mDesiredAssets)) {
+            addParam("assets", mDesiredAssets);
+        }
+    }
+
     @Override
     protected void setSdkVersion(String sdkVersion) {
         addParam("nsv", sdkVersion);
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java
index ca0bc5d3..9e81b899 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java
@@ -4,8 +4,7 @@
 import android.widget.ImageView;
 import android.widget.TextView;
 
-import static com.mopub.nativeads.NativeResponse.Parameter.isImageKey;
-import static com.mopub.nativeads.util.Utils.MoPubLog;
+import com.mopub.common.util.MoPubLog;
 
 class NativeViewHolder {
     TextView titleView;
@@ -27,7 +26,7 @@ static NativeViewHolder fromViewBinder(final View view, final ViewBinder viewBin
             nativeViewHolder.mainImageView = (ImageView) view.findViewById(viewBinder.mainImageId);
             nativeViewHolder.iconImageView = (ImageView) view.findViewById(viewBinder.iconImageId);
         } catch (ClassCastException e) {
-            MoPubLog("Could not cast View from id in ViewBinder to expected View type", e);
+            MoPubLog.d("Could not cast View from id in ViewBinder to expected View type", e);
             return null;
         }
 
@@ -36,7 +35,7 @@ static NativeViewHolder fromViewBinder(final View view, final ViewBinder viewBin
 
     void update(final NativeResponse nativeResponse) {
         addTextView(titleView, nativeResponse.getTitle());
-        addTextView(textView, nativeResponse.getSubtitle());
+        addTextView(textView, nativeResponse.getText());
         addTextView(callToActionView, nativeResponse.getCallToAction());
 
         nativeResponse.loadMainImage(mainImageView);
@@ -51,31 +50,25 @@ void updateExtras(final View outerView,
             final View view = outerView.findViewById(resourceId);
             final Object content = nativeResponse.getExtra(key);
 
-            if (isImageKey(key)) {
-                if (view instanceof ImageView) {
-                    // Clear previous image
-                    ((ImageView) view).setImageDrawable(null);
-                    nativeResponse.loadExtrasImage(key, (ImageView) view);
-                } else {
-                    MoPubLog("View bound to " + key + " should be an instance of ImageView.");
+            if (view instanceof ImageView) {
+                // Clear previous image
+                ((ImageView) view).setImageDrawable(null);
+                nativeResponse.loadExtrasImage(key, (ImageView) view);
+            } else if (view instanceof TextView) {
+                // Clear previous text value
+                ((TextView) view).setText(null);
+                if (content instanceof String) {
+                    addTextView((TextView) view, (String) content);
                 }
             } else {
-                if (view instanceof TextView) {
-                    // Clear previous text value
-                    ((TextView) view).setText(null);
-                    if (content instanceof String) {
-                        addTextView((TextView) view, (String) content);
-                    }
-                } else {
-                    MoPubLog("View bound to " + key + " should be an instance of TextView.");
-                }
+                MoPubLog.d("View bound to " + key + " should be an instance of TextView or ImageView.");
             }
         }
     }
 
     private void addTextView(final TextView textView, final String contents) {
         if (textView == null) {
-            MoPubLog("Attempted to add text (" + contents + ") to null TextView.");
+            MoPubLog.d("Attempted to add text (" + contents + ") to null TextView.");
             return;
         }
 
@@ -83,7 +76,7 @@ private void addTextView(final TextView textView, final String contents) {
         textView.setText(null);
 
         if (contents == null) {
-            MoPubLog("Attempted to set TextView contents to null.");
+            MoPubLog.d("Attempted to set TextView contents to null.");
         } else {
             textView.setText(contents);
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/RequestParameters.java b/mopub-sdk/src/main/java/com/mopub/nativeads/RequestParameters.java
index c3f6d995..fea4fb4c 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/RequestParameters.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/RequestParameters.java
@@ -1,14 +1,40 @@
 package com.mopub.nativeads;
 
 import android.location.Location;
+import android.text.TextUtils;
+
+import java.util.EnumSet;
 
 public final class RequestParameters {
+
+    public enum NativeAdAsset {
+        TITLE("title"),
+        TEXT("text"),
+        ICON_IMAGE("iconimage"),
+        MAIN_IMAGE("mainimage"),
+        CALL_TO_ACTION_TEXT("ctatext"),
+        STAR_RATING("starrating");
+
+        private final String mAssetName;
+
+        private NativeAdAsset(String assetName) {
+            mAssetName = assetName;
+        }
+
+        @Override
+        public String toString() {
+            return mAssetName;
+        }
+    }
+
     private final String mKeywords;
     private final Location mLocation;
+    private final EnumSet<NativeAdAsset> mDesiredAssets;
 
     public final static class Builder {
         private String keywords;
         private Location location;
+        private EnumSet<NativeAdAsset> desiredAssets;
 
         public final Builder keywords(String keywords) {
             this.keywords = keywords;
@@ -20,6 +46,12 @@ public final Builder location(Location location) {
             return this;
         }
 
+        // Specify set of assets used by this ad request. If not set, this defaults to all assets
+        public final Builder desiredAssets(final EnumSet<NativeAdAsset> desiredAssets) {
+            this.desiredAssets = EnumSet.copyOf(desiredAssets);
+            return this;
+        }
+
         public final RequestParameters build() {
             return new RequestParameters(this);
         }
@@ -28,6 +60,7 @@ public final RequestParameters build() {
     private RequestParameters(Builder builder) {
         mKeywords = builder.keywords;
         mLocation = builder.location;
+        mDesiredAssets = builder.desiredAssets;
     }
 
     public final String getKeywords() {
@@ -37,4 +70,13 @@ public final String getKeywords() {
     public final Location getLocation() {
         return mLocation;
     }
+
+    public final String getDesiredAssets() {
+        String result = "";
+
+        if (mDesiredAssets != null) {
+            result = TextUtils.join(",", mDesiredAssets.toArray());
+        }
+        return result;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/UrlResolutionTask.java b/mopub-sdk/src/main/java/com/mopub/nativeads/UrlResolutionTask.java
index cdd9050a..cce76111 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/UrlResolutionTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/UrlResolutionTask.java
@@ -2,7 +2,9 @@
 
 import android.os.AsyncTask;
 
+import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.IntentUtils;
+import com.mopub.common.util.MoPubLog;
 
 import java.io.IOException;
 import java.net.HttpURLConnection;
@@ -12,12 +14,24 @@
     private static final int REDIRECT_LIMIT = 10;
 
     interface UrlResolutionListener {
-        void onSuccess(String result);
+        void onSuccess(String resolvedUrl);
         void onFailure();
     }
 
     private final UrlResolutionListener mListener;
 
+    public static void getResolvedUrl(final String urlString, final UrlResolutionListener listener) {
+        final UrlResolutionTask urlResolutionTask = new UrlResolutionTask(listener);
+
+        try {
+            AsyncTasks.safeExecuteOnExecutor(urlResolutionTask, urlString);
+        } catch (Exception e) {
+            MoPubLog.d("Failed to resolve url", e);
+
+            listener.onFailure();
+        }
+    }
+
     UrlResolutionTask(UrlResolutionListener listener) {
         mListener = listener;
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java b/mopub-sdk/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java
new file mode 100644
index 00000000..019b5338
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java
@@ -0,0 +1,31 @@
+package com.mopub.nativeads.factories;
+
+import com.mopub.nativeads.CustomEventNative;
+import com.mopub.nativeads.MoPubCustomEventNative;
+
+import java.lang.reflect.Constructor;
+
+public class CustomEventNativeFactory {
+    protected static CustomEventNativeFactory instance = new CustomEventNativeFactory();
+
+    public static CustomEventNative create(final String className) throws Exception {
+        if (className != null) {
+            final Class<? extends CustomEventNative> nativeClass = Class.forName(className)
+                    .asSubclass(CustomEventNative.class);
+            return instance.internalCreate(nativeClass);
+        } else {
+            return new MoPubCustomEventNative();
+        }
+    }
+
+    @Deprecated // for testing
+    public static void setInstance(final CustomEventNativeFactory customEventNativeFactory) {
+        instance = customEventNativeFactory;
+    }
+
+    protected CustomEventNative internalCreate(final Class<? extends CustomEventNative> nativeClass) throws Exception {
+        final Constructor<?> nativeConstructor = nativeClass.getDeclaredConstructor((Class[]) null);
+        nativeConstructor.setAccessible(true);
+        return (CustomEventNative) nativeConstructor.newInstance();
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/util/Utils.java b/mopub-sdk/src/main/java/com/mopub/nativeads/util/Utils.java
deleted file mode 100644
index bc0e069b..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/util/Utils.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.mopub.nativeads.util;
-
-import android.util.Log;
-
-import com.mopub.nativeads.Constants;
-
-public class Utils {
-    public static void MoPubLog(String message) {
-        MoPubLog(message, null);
-    }
-
-    public static void MoPubLog(String message, Exception exception) {
-        Log.d(Constants.LOGTAG, message, exception);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/CacheServiceTest.java b/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
similarity index 91%
rename from mopub-sdk/src/test/java/com/mopub/nativeads/CacheServiceTest.java
rename to mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
index 56748b71..b2317b89 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/CacheServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
@@ -1,4 +1,4 @@
-package com.mopub.nativeads;
+package com.mopub.common;
 
 import android.app.Activity;
 import android.support.v4.util.LruCache;
@@ -17,7 +17,7 @@
 import java.io.InputStream;
 import java.util.concurrent.Semaphore;
 
-import static com.mopub.nativeads.CacheService.DiskLruCacheGetListener;
+import static com.mopub.common.CacheService.DiskLruCacheGetListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
@@ -38,6 +38,8 @@
 
     @Before
     public void setUp() throws Exception {
+        CacheService.clearAndNullCaches();
+
         context = new Activity();
         key1 = "http://www.mopub.com/";
         data1 = "image_data_1";
@@ -93,14 +95,14 @@ public void diskLruCacheGet_whenPopulated_shouldReturnValue() throws Exception {
     @Test
     public void diskLruCacheGet_whenEmpty_shouldReturnNull() throws Exception {
         CacheService.initializeCaches(context);
-        verifyCachesAreEmpty();
+        assertCachesAreEmpty();
         assertThat(CacheService.getFromDiskCache(key1)).isNull();
     }
 
     @Test
     public void diskLruCacheAsyncGet_whenPopulated_shouldReturnValue() throws Exception {
         CacheService.initializeCaches(context);
-        verifyCachesAreEmpty();
+        assertCachesAreEmpty();
         CacheService.putToDiskCache(key1, data1.getBytes());
         CacheService.getFromDiskCacheAsync(key1, diskCacheGetListener);
         semaphore.acquire();
@@ -129,9 +131,9 @@ public void diskLruCachePut_withEmptyStringKey_shouldPutCorrectly() throws Excep
     public void diskLruCachePut_withNullKey_shouldNotPut() throws Exception {
         // null value produces empty string key which is invalid for disk lru cache
         CacheService.initializeCaches(context);
-        verifyCachesAreEmpty();
+        assertCachesAreEmpty();
         CacheService.putToDiskCache(null, data1.getBytes());
-        verifyCachesAreEmpty();
+        assertCachesAreEmpty();
     }
 
     @Test
@@ -152,10 +154,18 @@ private static InputStream getInputStreamFromString(final String string) {
         return spy(new ByteArrayInputStream(string.getBytes()));
     }
 
-    static void verifyCachesAreEmpty() {
-        assertThat(CacheService.getMemoryLruCache()).isNotNull();
-        assertThat(CacheService.getMemoryLruCache().size()).isEqualTo(0);
+    public static void assertDiskCacheIsUninitialized() {
+        assertThat(CacheService.getDiskLruCache()).isNull();
+    }
+
+    public static void assertDiskCacheIsEmpty() {
         assertThat(CacheService.getDiskLruCache()).isNotNull();
         assertThat(CacheService.getDiskLruCache().size()).isEqualTo(0);
     }
+
+    public static void assertCachesAreEmpty() {
+        assertThat(CacheService.getMemoryLruCache()).isNotNull();
+        assertThat(CacheService.getMemoryLruCache().size()).isEqualTo(0);
+        assertDiskCacheIsEmpty();
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/DownloadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/common/DownloadTaskTest.java
similarity index 83%
rename from mopub-sdk/src/test/java/com/mopub/nativeads/DownloadTaskTest.java
rename to mopub-sdk/src/test/java/com/mopub/common/DownloadTaskTest.java
index 1051c009..7da791f4 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/DownloadTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/DownloadTaskTest.java
@@ -1,6 +1,7 @@
-package com.mopub.nativeads;
+package com.mopub.common;
 
-import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.common.util.ResponseHeader;
+import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.client.methods.HttpUriRequest;
@@ -9,6 +10,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.tester.org.apache.http.FakeHttpLayer;
 
 import java.util.concurrent.Semaphore;
@@ -17,7 +19,7 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.spy;
 
-@RunWith(SdkTestRunner.class)
+@RunWith(RobolectricTestRunner.class)
 public class DownloadTaskTest {
 
     private DownloadTask mDownloadTask;
@@ -28,10 +30,12 @@
     private HttpGet httpGet;
     private String mTestResponse;
     private FakeHttpLayer mFakeHttpLayer;
+    private TestHttpResponseWithHeaders mTestHttpResponseWithHeaders;
 
     @Before
     public void setUp() throws Exception {
         mSemaphore = new Semaphore(0);
+
         mDownloadTaskListener = new DownloadTask.DownloadTaskListener() {
             @Override
             public void onComplete(String url, DownloadResponse response) {
@@ -46,17 +50,24 @@ public void onComplete(String url, DownloadResponse response) {
         } catch (IllegalArgumentException e) {
             fail("Could not initialize HttpGet in test");
         }
+
         mTestResponse = "TEST RESPONSE";
+        mTestHttpResponseWithHeaders = new TestHttpResponseWithHeaders(200, mTestResponse);
+        mTestHttpResponseWithHeaders.addHeader(ResponseHeader.IMPRESSION_URL.getKey(), "moPubImpressionTrackerUrl");
+        mTestHttpResponseWithHeaders.addHeader(ResponseHeader.CLICKTHROUGH_URL.getKey(), "moPubClickTrackerUrl");
+
         mFakeHttpLayer = Robolectric.getFakeHttpLayer();
     }
 
     @Test
     public void execute_whenDownloadTaskAndHttpClientCompleteSuccessfully_shouldReturn200HttpResponse() throws Exception {
-        mFakeHttpLayer.addPendingHttpResponse(200, mTestResponse);
+        mFakeHttpLayer.addPendingHttpResponse(mTestHttpResponseWithHeaders);
         mDownloadTask.execute(httpGet);
         mSemaphore.acquire();
         assertThat(mUrl).isEqualTo(httpGet.getURI().toString());
         assertThat(mDownloadResponse.getStatusCode()).isEqualTo(200);
+        assertThat(mDownloadResponse.getFirstHeader(ResponseHeader.IMPRESSION_URL)).isEqualTo("moPubImpressionTrackerUrl");
+        assertThat(mDownloadResponse.getFirstHeader(ResponseHeader.CLICKTHROUGH_URL)).isEqualTo("moPubClickTrackerUrl");
         assertThat(HttpResponses.asResponseString(mDownloadResponse)).isEqualTo(mTestResponse);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
index 0f46c31f..d14356f8 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
@@ -35,15 +35,18 @@
 import android.app.Activity;
 import android.content.Context;
 import android.content.SharedPreferences;
+import android.os.Looper;
 
 import com.mopub.common.factories.MethodBuilderFactory;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.ThreadUtils;
 
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
 
 import java.util.concurrent.Semaphore;
 
@@ -62,6 +65,7 @@
     private TestAdInfo adInfo;
     private Semaphore semaphore;
     private GpsHelper.GpsHelperListener semaphoreGpsHelperListener;
+    private Looper gpsHelperListenerCallbackLooper;
 
     // This class emulates the AdInfo class returned from the Google Play Services
     // AdvertisingIdClient.getAdvertisingIdInfo method; need to implement getters for reflection calls
@@ -91,6 +95,7 @@ public void setup() {
         semaphoreGpsHelperListener = new GpsHelper.GpsHelperListener() {
             @Override
             public void onFetchAdInfoCompleted() {
+                gpsHelperListenerCallbackLooper = Looper.myLooper();
                 semaphore.release();
             }
         };
@@ -127,6 +132,20 @@ public void isGpsAvailable_whenGooglePlayServicesIsNotLinked_shouldReturnFalse()
         assertThat(GpsHelper.isGpsAvailable(context)).isFalse();
     }
 
+    @Test
+    public void asyncFetchAdvertisingInfo_whenGooglePlayServicesIsLinked_shouldInvokeCallbackOnMainLooper() throws Exception {
+        GpsHelper.setClassNamesForTesting();
+        when(methodBuilder.execute()).thenReturn(
+                adInfo,
+                adInfo.ADVERTISING_ID,
+                adInfo.LIMIT_AD_TRACKING_ENABLED
+        );
+
+        GpsHelper.asyncFetchAdvertisingInfo(context, semaphoreGpsHelperListener);
+        safeAcquireSemaphore();
+        assertThat(gpsHelperListenerCallbackLooper).isEqualTo(Looper.getMainLooper());
+    }
+
     @Test
     public void asyncFetchAdvertisingInfo_whenGooglePlayServicesIsLinked_shouldPopulateSharedPreferences() throws Exception {
         verifyCleanSharedPreferences(context);
@@ -138,7 +157,7 @@ public void asyncFetchAdvertisingInfo_whenGooglePlayServicesIsLinked_shouldPopul
         );
 
         GpsHelper.asyncFetchAdvertisingInfo(context, semaphoreGpsHelperListener);
-        semaphore.acquire();
+        safeAcquireSemaphore();
         verifySharedPreferences(context, adInfo);
     }
 
@@ -149,7 +168,7 @@ public void asyncFetchAdvertisingInfo_whenReflectedMethodCallThrows_shouldNotPop
         when(methodBuilder.execute()).thenThrow(new Exception());
 
         GpsHelper.asyncFetchAdvertisingInfo(context, semaphoreGpsHelperListener);
-        semaphore.acquire();
+        safeAcquireSemaphore();
         verifyCleanSharedPreferences(context);
     }
 
@@ -160,7 +179,7 @@ public void asyncFetchAdvertisingInfo_whenReflectedMethodCallReturnsNull_shouldN
         when(methodBuilder.execute()).thenReturn(null);
 
         GpsHelper.asyncFetchAdvertisingInfo(context, semaphoreGpsHelperListener);
-        semaphore.acquire();
+        safeAcquireSemaphore();
         verifyCleanSharedPreferences(context);
     }
 
@@ -176,7 +195,7 @@ public void asyncFetchAdvertisingInfoIfNotCached_whenGooglePlayServicesIsLinkedA
         );
 
         GpsHelper.asyncFetchAdvertisingInfoIfNotCached(context, semaphoreGpsHelperListener);
-        semaphore.acquire();
+        safeAcquireSemaphore();
         verifySharedPreferences(context, adInfo);
     }
 
@@ -190,7 +209,7 @@ public void asyncFetchAdvertisingInfoIfNotCached_whenGooglePlayServicesLinkedAnd
         );
 
         GpsHelper.asyncFetchAdvertisingInfoIfNotCached(context, semaphoreGpsHelperListener);
-        semaphore.acquire();
+        safeAcquireSemaphore();
         verify(methodBuilder).execute();
     }
 
@@ -203,7 +222,7 @@ public void asyncFetchAdvertisingInfoIfNotCached_whenGooglePlayServicesIsNotLink
         );
 
         GpsHelper.asyncFetchAdvertisingInfoIfNotCached(context, semaphoreGpsHelperListener);
-        semaphore.acquire();
+        safeAcquireSemaphore();
         verifyCleanSharedPreferences(context);
     }
 
@@ -343,6 +362,12 @@ static public void populateAndVerifySharedPreferences(Context context, TestAdInf
         verifySharedPreferences(context, adInfo);
     }
 
+    private void safeAcquireSemaphore() throws Exception {
+        Robolectric.runBackgroundTasks();
+        Robolectric.runUiThreadTasks();
+        semaphore.acquire();
+    }
+
     static public void verifySharedPreferences(Context context, TestAdInfo adInfo) {
         SharedPreferences sharedPreferences = SharedPreferencesHelper.getSharedPreferences(context);
         assertThat(sharedPreferences.contains(GpsHelper.ADVERTISING_ID_KEY)).isTrue();
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/HttpResponsesTest.java b/mopub-sdk/src/test/java/com/mopub/common/HttpResponsesTest.java
similarity index 96%
rename from mopub-sdk/src/test/java/com/mopub/nativeads/HttpResponsesTest.java
rename to mopub-sdk/src/test/java/com/mopub/common/HttpResponsesTest.java
index d1f93650..17bd22d4 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/HttpResponsesTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/HttpResponsesTest.java
@@ -1,23 +1,20 @@
-package com.mopub.nativeads;
+package com.mopub.common;
 
 import android.graphics.Bitmap;
 
-import com.mopub.nativeads.DownloadResponse;
-import com.mopub.nativeads.test.support.SdkTestRunner;
-import com.mopub.nativeads.HttpResponses;
-
 import org.json.JSONArray;
 import org.json.JSONObject;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 import static org.robolectric.Robolectric.shadowOf;
 
-@RunWith(SdkTestRunner.class)
+@RunWith(RobolectricTestRunner.class)
 public class HttpResponsesTest {
 
     private DownloadResponse downloadResponse1;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
index 8cae5401..1a6dc5e1 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
@@ -2,6 +2,10 @@
 
 import android.os.AsyncTask;
 import android.os.Build;
+import android.os.Handler;
+import android.os.Looper;
+
+import com.mopub.mobileads.test.support.ThreadUtils;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -62,6 +66,13 @@ public void safeExecutorOnExecutor_beforeICS_withNullAsyncTask_shouldThrowIllega
         }
     }
 
+    @Test
+    public void safeExecutorOnExecutor_beforeICS_runningOnABackgroundThread_shouldThrowIllegalStateException() throws Exception {
+        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", HONEYCOMB_MR2.getApiLevel());
+
+        ensureFastFailWhenTaskIsRunOnBackgroundThread();
+    }
+
     @Test
     public void safeExecuteOnExecutor_atLeastICS_shouldCallExecuteWithParamsWithExecutor() throws Exception {
         Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", ICE_CREAM_SANDWICH.getApiLevel());
@@ -81,7 +92,6 @@ public void safeExecutorOnExecutor_atLeastICS_withNullParam_shouldCallExecuteWit
 
     }
 
-
     @Test
     public void safeExecutorOnExecutor_atLeastICS_withNullAsyncTask_shouldThrowIllegalArgumentException() throws Exception {
         Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", ICE_CREAM_SANDWICH.getApiLevel());
@@ -93,4 +103,35 @@ public void safeExecutorOnExecutor_atLeastICS_withNullAsyncTask_shouldThrowIlleg
             // pass
         }
     }
+
+    @Test
+    public void safeExecutorOnExecutor_atLeastICS_runningOnABackgroundThread_shouldThrowIllegalStateException() throws Exception {
+        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", ICE_CREAM_SANDWICH.getApiLevel());
+
+        ensureFastFailWhenTaskIsRunOnBackgroundThread();
+    }
+
+    private void ensureFastFailWhenTaskIsRunOnBackgroundThread() {
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    AsyncTasks.safeExecuteOnExecutor(asyncTask, "hello");
+
+                    Handler handler = new Handler(Looper.getMainLooper());
+                    handler.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            fail("Should have thrown IllegalStateException");
+                        }
+                    });
+                } catch (IllegalStateException exception) {
+                    // pass
+                }
+            }
+        }).start();
+
+        ThreadUtils.pause(10);
+        Robolectric.runUiThreadTasks();
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/IntentUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/IntentUtilsTest.java
index 96b365ef..b5f93cff 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/IntentUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/IntentUtilsTest.java
@@ -1,48 +1,57 @@
 /*
- * Copyright (c) 2010-2013, MoPub Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *
- *  Redistributions of source code must retain the above copyright
- *   notice, this list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright
- *   notice, this list of conditions and the following disclaimer in the
- *   documentation and/or other materials provided with the distribution.
- *
- *  Neither the name of 'MoPub Inc.' nor the names of its contributors
- *   may be used to endorse or promote products derived from this software
- *   without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
+* Copyright (c) 2010-2013, MoPub Inc.
+* All rights reserved.
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions are
+* met:
+*
+*  Redistributions of source code must retain the above copyright
+*   notice, this list of conditions and the following disclaimer.
+*
+*  Redistributions in binary form must reproduce the above copyright
+*   notice, this list of conditions and the following disclaimer in the
+*   documentation and/or other materials provided with the distribution.
+*
+*  Neither the name of 'MoPub Inc.' nor the names of its contributors
+*   may be used to endorse or promote products derived from this software
+*   without specific prior written permission.
+*
+* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+* PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
 
 package com.mopub.common.util;
 
+import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
 import android.net.Uri;
+import android.os.Bundle;
+
+import com.mopub.common.MoPubBrowser;
+
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
 
+import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
@@ -50,6 +59,40 @@
 
 @RunWith(RobolectricTestRunner.class)
 public class IntentUtilsTest {
+    @Test
+    public void getStartActivityIntent_withActivityContext_shouldReturnIntentWithoutNewTaskFlag() throws Exception {
+        Context context = new Activity();
+
+        final Intent intent = IntentUtils.getStartActivityIntent(context, MoPubBrowser.class, null);
+
+        assertThat(intent.getComponent().getClassName()).isEqualTo(MoPubBrowser.class.getName());
+        assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), FLAG_ACTIVITY_NEW_TASK)).isFalse();
+        assertThat(intent.getExtras()).isNull();
+    }
+
+    @Test
+    public void getStartActivityIntent_withApplicationContext_shouldReturnIntentWithNewTaskFlag() throws Exception {
+        Context context = new Activity().getApplicationContext();
+
+        final Intent intent = IntentUtils.getStartActivityIntent(context, MoPubBrowser.class, null);
+
+        assertThat(intent.getComponent().getClassName()).isEqualTo(MoPubBrowser.class.getName());
+        assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), FLAG_ACTIVITY_NEW_TASK)).isTrue();
+        assertThat(intent.getExtras()).isNull();
+    }
+
+    @Test
+    public void getStartActivityIntent_withBundle_shouldReturnIntentWithExtras() throws Exception {
+        Context context = new Activity();
+        Bundle bundle = new Bundle();
+        bundle.putString("arbitrary key", "even more arbitrary value");
+
+        final Intent intent = IntentUtils.getStartActivityIntent(context, MoPubBrowser.class, bundle);
+
+        assertThat(intent.getComponent().getClassName()).isEqualTo(MoPubBrowser.class.getName());
+        assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), FLAG_ACTIVITY_NEW_TASK)).isFalse();
+        assertThat(intent.getExtras()).isEqualTo(bundle);
+    }
 
     @Test
     public void deviceCanHandleIntent_whenActivityCanResolveIntent_shouldReturnTrue() throws Exception {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/JsonTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java
similarity index 98%
rename from mopub-sdk/src/test/java/com/mopub/mobileads/util/JsonTest.java
rename to mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java
index 177add8f..c0954dd3 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/JsonTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java
@@ -30,14 +30,16 @@
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-package com.mopub.mobileads.util;
+package com.mopub.common.util;
 
 import com.mopub.mobileads.test.support.SdkTestRunner;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import java.util.*;
+import java.util.HashMap;
+import java.util.Map;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
new file mode 100644
index 00000000..d40ac3d2
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
@@ -0,0 +1,209 @@
+package com.mopub.common.util;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.ResolveInfo;
+
+import com.mopub.common.MoPubBrowser;
+import com.mopub.mobileads.MoPubActivity;
+import com.mopub.mobileads.MraidActivity;
+import com.mopub.mobileads.MraidVideoPlayerActivity;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.shadows.ShadowLog;
+import org.robolectric.shadows.ShadowToast;
+
+import java.util.List;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.when;
+
+@RunWith(RobolectricTestRunner.class)
+public class ManifestUtilsTest {
+    private Context context;
+    private ResolveInfo resolveInfo;
+    private List<Class<? extends Activity>> requiredWebViewSdkActivities;
+    private List<Class<? extends Activity>> requiredNativeSdkActivities;
+
+    @Before
+    public void setUp() throws Exception {
+        context = spy(new Activity());
+        resolveInfo = mock(ResolveInfo.class);
+
+        requiredWebViewSdkActivities = ManifestUtils.getRequiredWebViewSdkActivities();
+        requiredNativeSdkActivities = ManifestUtils.getRequiredNativeSdkActivities();
+
+        setDebugMode(false);
+    }
+
+    @After
+    public void tearDown() throws Exception {
+        setDebugMode(false);
+    }
+
+    @Test
+    public void checkWebViewSdkActivitiesDeclared_shouldIncludeFourActivityDeclarations() throws Exception {
+        ShadowLog.setupLogging();
+
+        ManifestUtils.checkWebViewActivitiesDeclared(context);
+
+        assertLogIncludes(
+                "com.mopub.mobileads.MoPubActivity",
+                "com.mopub.mobileads.MraidActivity",
+                "com.mopub.mobileads.MraidVideoPlayerActivity",
+                "com.mopub.common.MoPubBrowser"
+        );
+    }
+
+    @Test
+    public void checkNativeSdkActivitiesDeclared_shouldIncludeOneActivityDeclaration() throws Exception {
+        ShadowLog.setupLogging();
+
+        ManifestUtils.checkNativeActivitiesDeclared(context);
+
+        assertLogIncludes("com.mopub.common.MoPubBrowser");
+        assertLogDoesntInclude(
+                "com.mopub.mobileads.MoPubActivity",
+                "com.mopub.mobileads.MraidActivity",
+                "com.mopub.mobileads.MraidVideoPlayerActivity"
+        );
+    }
+
+    @Test
+    public void displayWarningForMissingActivities_withAllActivitiesDeclared_shouldNotShowLogOrToast() throws Exception {
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), resolveInfo);
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidActivity.class), resolveInfo);
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), resolveInfo);
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), resolveInfo);
+
+        ShadowLog.setupLogging();
+        setDebugMode(true);
+
+        ManifestUtils.displayWarningForMissingActivities(context, requiredWebViewSdkActivities);
+
+        assertThat(ShadowToast.getLatestToast()).isNull();
+        assertThat(ShadowLog.getLogs()).isEmpty();
+    }
+
+    @Test
+     public void displayWarningForMissingActivities_withOneMissingActivity_shouldLogOnlyThatOne() throws Exception {
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), resolveInfo);
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidActivity.class), resolveInfo);
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), resolveInfo);
+        // Here, we leave out MoPubBrowser on purpose
+
+        ShadowLog.setupLogging();
+
+        ManifestUtils.displayWarningForMissingActivities(context, requiredWebViewSdkActivities);
+
+        assertLogIncludes("com.mopub.common.MoPubBrowser");
+        assertLogDoesntInclude(
+                "com.mopub.mobileads.MoPubActivity",
+                "com.mopub.mobileads.MraidActivity",
+                "com.mopub.mobileads.MraidVideoPlayerActivity"
+        );
+    }
+
+    @Test
+    public void displayWarningForMissingActivities_withMissingActivities_withDebugTrue_shouldShowToast() throws Exception {
+        setDebugMode(true);
+
+        ManifestUtils.displayWarningForMissingActivities(context, requiredWebViewSdkActivities);
+
+        assertThat(ShadowToast.getLatestToast()).isNotNull();
+        final String toastText = ShadowToast.getTextOfLatestToast();
+        assertThat(toastText).isEqualTo("ERROR: YOUR MOPUB INTEGRATION IS INCOMPLETE.\nCheck logcat and update your AndroidManifest.xml with the correct activities.");
+    }
+
+    @Test
+    public void displayWarningForMissingActivities_withMissingActivities_withDebugFalse_shouldNotShowToast() throws Exception {
+        setDebugMode(false);
+
+        ManifestUtils.displayWarningForMissingActivities(context, requiredWebViewSdkActivities);
+
+        assertThat(ShadowToast.getLatestToast()).isNull();
+    }
+    
+    @Test
+    public void displayWarningForMissingActivities_withMissingActivities_withDebugTrue_shouldLogMessage() throws Exception {
+        setDebugMode(true);
+        ShadowLog.setupLogging();
+
+        ManifestUtils.displayWarningForMissingActivities(context, requiredWebViewSdkActivities);
+
+        final List<ShadowLog.LogItem> logs = ShadowLog.getLogs();
+
+        assertLogIncludes(
+                "com.mopub.mobileads.MoPubActivity",
+                "com.mopub.mobileads.MraidActivity",
+                "com.mopub.mobileads.MraidVideoPlayerActivity",
+                "com.mopub.common.MoPubBrowser"
+        );
+    }
+
+    @Test
+    public void isDebuggable_whenApplicationIsDebuggable_shouldReturnTrue() throws Exception {
+        setDebugMode(true);
+
+        assertThat(ManifestUtils.isDebuggable(context)).isTrue();
+    }
+
+    @Test
+    public void isDebuggable_whenApplicationIsNotDebuggable_shouldReturnFalse() throws Exception {
+        setDebugMode(false);
+
+        assertThat(ManifestUtils.isDebuggable(context)).isFalse();
+    }
+
+    @Test
+    public void getRequiredWebViewSdkActivities_shouldIncludeRequiredActivities() throws Exception {
+        assertThat(requiredWebViewSdkActivities).containsOnly(
+                MoPubActivity.class,
+                MraidActivity.class,
+                MraidVideoPlayerActivity.class,
+                MoPubBrowser.class
+        );
+    }
+
+    @Test
+    public void getRequiredNativeSdkActivities_shouldIncludeRequiredActivities() throws Exception {
+        assertThat(requiredNativeSdkActivities).containsOnly(
+                MoPubBrowser.class
+        );
+    }
+
+    private void setDebugMode(boolean enabled) {
+        final ApplicationInfo applicationInfo = context.getApplicationInfo();
+
+        if (enabled) {
+            applicationInfo.flags |= ApplicationInfo.FLAG_DEBUGGABLE;
+        } else {
+            applicationInfo.flags &= ~ApplicationInfo.FLAG_DEBUGGABLE;
+        }
+
+        when(context.getApplicationInfo()).thenReturn(applicationInfo);
+    }
+
+    private void assertLogIncludes(final String... messages) {
+        final String logText = ShadowLog.getLogs().get(0).msg;
+        for (final String message : messages) {
+            assertThat(logText).containsOnlyOnce(message);
+        }
+    }
+
+    private void assertLogDoesntInclude(final String... messages) {
+        final String logText = ShadowLog.getLogs().get(0).msg;
+        for (final String message : messages) {
+            assertThat(logText).doesNotContain(message);
+        }
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java
new file mode 100644
index 00000000..93d8fb1f
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java
@@ -0,0 +1,59 @@
+package com.mopub.common.util;
+
+import android.app.Activity;
+
+import org.junit.Test;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.fest.assertions.api.Assertions.fail;
+import static org.mockito.Mockito.mock;
+
+public class NumbersTest {
+    @Test
+    public void parseDouble_withNumberValue_shouldReturnDouble() throws Exception {
+        int anInt = 2;
+        assertThat(Numbers.parseDouble(anInt)).isEqualTo(anInt);
+
+        double aDouble = 2.1;
+        assertThat(Numbers.parseDouble(aDouble)).isEqualTo(aDouble);
+
+        float aFloat = 2.2f;
+        assertThat(Numbers.parseDouble(aFloat)).isEqualTo(aFloat);
+
+        double nan = Double.NaN;
+        assertThat(Numbers.parseDouble(nan)).isEqualTo(nan);
+    }
+
+    @Test
+    public void parseDouble_withStringValue_shouldReturnDouble() throws Exception {
+        assertThat(Numbers.parseDouble("0.01")).isEqualTo(0.01);
+        assertThat(Numbers.parseDouble("-1015")).isEqualTo(-1015);
+    }
+
+    @Test
+    public void parseDouble_withInvalidStringValue_shouldThrowClassCastException() throws Exception {
+        try {
+            Numbers.parseDouble("dog");
+            fail("Expected ClassCastException");
+        } catch (ClassCastException e) {
+            // pass
+        }
+
+        try {
+            Numbers.parseDouble("123a");
+            fail("Expected ClassCastException");
+        } catch (ClassCastException e) {
+            // pass
+        }
+    }
+
+    @Test
+    public void parseDouble_withInvalidObjectType_shouldThrowClassCastException() throws Exception {
+        try {
+            Numbers.parseDouble(mock(Activity.class));
+            fail("Expected ClassCastException");
+        } catch (ClassCastException e) {
+            // pass
+        }
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/CommonUtils.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/CommonUtils.java
new file mode 100644
index 00000000..dcfabedc
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/CommonUtils.java
@@ -0,0 +1,16 @@
+package com.mopub.common.util.test.support;
+
+import org.robolectric.Robolectric;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+public class CommonUtils {
+    public static void assertHttpRequestsMade(String... urls) {
+        final int numberOfReceivedHttpRequests = Robolectric.getFakeHttpLayer().getSentHttpRequestInfos().size();
+        assertThat(numberOfReceivedHttpRequests).isEqualTo(urls.length);
+
+        for (final String url : urls) {
+            assertThat(Robolectric.httpRequestWasMade(url)).isTrue();
+        }
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdConfigurationTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdConfigurationTest.java
index f150725f..ff5f1fea 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdConfigurationTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdConfigurationTest.java
@@ -16,17 +16,17 @@
 import java.util.*;
 
 import static com.mopub.mobileads.AdViewController.MINIMUM_REFRESH_TIME_MILLISECONDS;
-import static com.mopub.mobileads.util.ResponseHeader.AD_TIMEOUT;
-import static com.mopub.mobileads.util.ResponseHeader.AD_TYPE;
-import static com.mopub.mobileads.util.ResponseHeader.CLICKTHROUGH_URL;
-import static com.mopub.mobileads.util.ResponseHeader.DSP_CREATIVE_ID;
-import static com.mopub.mobileads.util.ResponseHeader.FAIL_URL;
-import static com.mopub.mobileads.util.ResponseHeader.HEIGHT;
-import static com.mopub.mobileads.util.ResponseHeader.IMPRESSION_URL;
-import static com.mopub.mobileads.util.ResponseHeader.NETWORK_TYPE;
-import static com.mopub.mobileads.util.ResponseHeader.REDIRECT_URL;
-import static com.mopub.mobileads.util.ResponseHeader.REFRESH_TIME;
-import static com.mopub.mobileads.util.ResponseHeader.WIDTH;
+import static com.mopub.common.util.ResponseHeader.AD_TIMEOUT;
+import static com.mopub.common.util.ResponseHeader.AD_TYPE;
+import static com.mopub.common.util.ResponseHeader.CLICKTHROUGH_URL;
+import static com.mopub.common.util.ResponseHeader.DSP_CREATIVE_ID;
+import static com.mopub.common.util.ResponseHeader.FAIL_URL;
+import static com.mopub.common.util.ResponseHeader.HEIGHT;
+import static com.mopub.common.util.ResponseHeader.IMPRESSION_URL;
+import static com.mopub.common.util.ResponseHeader.NETWORK_TYPE;
+import static com.mopub.common.util.ResponseHeader.REDIRECT_URL;
+import static com.mopub.common.util.ResponseHeader.REFRESH_TIME;
+import static com.mopub.common.util.ResponseHeader.WIDTH;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java
index f4380431..7ab2bb97 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java
@@ -46,11 +46,11 @@
 import java.util.*;
 import java.util.concurrent.*;
 
-import static com.mopub.mobileads.util.ResponseHeader.AD_TYPE;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_NAME;
-import static com.mopub.mobileads.util.ResponseHeader.FULL_AD_TYPE;
-import static com.mopub.mobileads.util.ResponseHeader.NATIVE_PARAMS;
+import static com.mopub.common.util.ResponseHeader.AD_TYPE;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
+import static com.mopub.common.util.ResponseHeader.FULL_AD_TYPE;
+import static com.mopub.common.util.ResponseHeader.NATIVE_PARAMS;
 import static com.mopub.common.util.VersionCode.HONEYCOMB_MR2;
 import static com.mopub.common.util.VersionCode.ICE_CREAM_SANDWICH;
 import static org.mockito.Matchers.any;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
index fd493f50..49f20ecd 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
@@ -47,14 +47,14 @@
 import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.HTML_INTERSTITIAL;
 import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MRAID_BANNER;
 import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MRAID_INTERSTITIAL;
-import static com.mopub.mobileads.util.ResponseHeader.AD_TYPE;
-import static com.mopub.mobileads.util.ResponseHeader.CLICKTHROUGH_URL;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_NAME;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_SELECTOR;
-import static com.mopub.mobileads.util.ResponseHeader.NATIVE_PARAMS;
-import static com.mopub.mobileads.util.ResponseHeader.REDIRECT_URL;
-import static com.mopub.mobileads.util.ResponseHeader.SCROLLABLE;
+import static com.mopub.common.util.ResponseHeader.AD_TYPE;
+import static com.mopub.common.util.ResponseHeader.CLICKTHROUGH_URL;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_SELECTOR;
+import static com.mopub.common.util.ResponseHeader.NATIVE_PARAMS;
+import static com.mopub.common.util.ResponseHeader.REDIRECT_URL;
+import static com.mopub.common.util.ResponseHeader.SCROLLABLE;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.stub;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
index c7244e63..a0f7bbfd 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
@@ -44,9 +44,9 @@
 
 import com.mopub.common.GpsHelper;
 import com.mopub.common.GpsHelperTest;
+import com.mopub.common.MoPub;
 import com.mopub.common.SharedPreferencesHelper;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
-import com.mopub.common.MoPub;
 import com.mopub.mobileads.factories.HttpClientFactory;
 import com.mopub.mobileads.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestAdFetcherFactory;
@@ -81,6 +81,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -94,20 +95,24 @@
     private HttpResponse response;
     private HttpClient httpClient;
     private AdFetcher adFetcher;
-    private Activity context;
     private MethodBuilder methodBuilder;
+    private Activity context;
 
     @Before
     public void setup() {
-        moPubView = mock(MoPubView.class);
-        stub(moPubView.getContext()).toReturn(new Activity());
-        httpClient = HttpClientFactory.create();
         context = new Activity();
         shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
+
+        moPubView = mock(MoPubView.class);
+        stub(moPubView.getContext()).toReturn(context);
+
+        httpClient = HttpClientFactory.create();
+
         subject = new AdViewController(context, moPubView);
         response = new TestHttpResponseWithHeaders(200, "I ain't got no-body");
         adFetcher = TestAdFetcherFactory.getSingletonMock();
         methodBuilder = TestMethodBuilderFactory.getSingletonMock();
+        reset(methodBuilder);
     }
 
     @After
@@ -139,7 +144,7 @@ public void scheduleRefreshTimer_shouldNotScheduleRefreshIfAutorefreshIsOff() th
         Robolectric.pauseMainLooper();
         assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
 
-        subject.setAutorefreshEnabled(false);
+        subject.forceSetAutorefreshEnabled(false);
 
         subject.scheduleRefreshTimerIfEnabled();
 
@@ -173,6 +178,77 @@ public void scheduleRefreshTimer_shouldNotScheduleRefreshIfRefreshTimeIsZero() t
 
         assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
     }
+    
+    @Test
+    public void forceSetAutoRefreshEnabled_shouldSetAutoRefreshSetting() throws Exception {
+        assertThat(subject.getAutorefreshEnabled()).isTrue();
+
+        subject.forceSetAutorefreshEnabled(false);
+        assertThat(subject.getAutorefreshEnabled()).isFalse();
+
+        subject.forceSetAutorefreshEnabled(true);
+        assertThat(subject.getAutorefreshEnabled()).isTrue();
+    }
+
+    @Test
+    public void pauseRefresh_shouldDisableAutorefresh() throws Exception {
+        assertThat(subject.getAutorefreshEnabled()).isTrue();
+
+        subject.pauseRefresh();
+        assertThat(subject.getAutorefreshEnabled()).isFalse();
+    }
+
+    @Test
+    public void unpauseRefresh_afterUnpauseRefresh_shouldEnableRefresh() throws Exception {
+        subject.pauseRefresh();
+        
+        subject.unpauseRefresh();
+        assertThat(subject.getAutorefreshEnabled()).isTrue();
+    }
+
+    @Test
+    public void pauseAndUnpauseRefresh_withRefreshForceDisabled_shouldAlwaysHaveRefreshFalse() throws Exception {
+        subject.forceSetAutorefreshEnabled(false);
+        assertThat(subject.getAutorefreshEnabled()).isFalse();
+
+        subject.pauseRefresh();
+        assertThat(subject.getAutorefreshEnabled()).isFalse();
+
+        subject.unpauseRefresh();
+        assertThat(subject.getAutorefreshEnabled()).isFalse();
+    }
+
+    @Test
+    public void enablingAutoRefresh_afterLoadAd_shouldScheduleNewRefreshTimer() throws Exception {
+        final AdViewController adViewControllerSpy = spy(subject);
+
+        adViewControllerSpy.loadAd();
+        adViewControllerSpy.forceSetAutorefreshEnabled(true);
+        verify(adViewControllerSpy).scheduleRefreshTimerIfEnabled();
+    }
+
+    @Test
+    public void enablingAutoRefresh_withoutCallingLoadAd_shouldNotScheduleNewRefreshTimer() throws Exception {
+        final AdViewController adViewControllerSpy = spy(subject);
+
+        adViewControllerSpy.forceSetAutorefreshEnabled(true);
+        verify(adViewControllerSpy, never()).scheduleRefreshTimerIfEnabled();
+    }
+
+    @Test
+    public void disablingAutoRefresh_shouldCancelRefreshTimers() throws Exception {
+        response.addHeader("X-Refreshtime", "30");
+        subject.configureUsingHttpResponse(response);
+
+        Robolectric.pauseMainLooper();
+
+        subject.loadAd();
+        subject.forceSetAutorefreshEnabled(true);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+
+        subject.forceSetAutorefreshEnabled(false);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+    }
 
     @Test
     public void trackImpression_shouldHttpGetTheImpressionUrl() throws Exception {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivitiyTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivitiyTest.java
new file mode 100644
index 00000000..2eeb9d78
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivitiyTest.java
@@ -0,0 +1,115 @@
+/*
+* Copyright (c) 2010-2013, MoPub Inc.
+* All rights reserved.
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions are
+* met:
+*
+*  Redistributions of source code must retain the above copyright
+*   notice, this list of conditions and the following disclaimer.
+*
+*  Redistributions in binary form must reproduce the above copyright
+*   notice, this list of conditions and the following disclaimer in the
+*   documentation and/or other materials provided with the distribution.
+*
+*  Neither the name of 'MoPub Inc.' nor the names of its contributors
+*   may be used to endorse or promote products derived from this software
+*   without specific prior written permission.
+*
+* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+* PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Intent;
+
+import com.mopub.common.util.DeviceUtils;
+import com.mopub.common.util.Utils;
+import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.mobileads.util.vast.VastVideoConfiguration;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+
+import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
+import static com.mopub.mobileads.BaseVideoPlayerActivity.VIDEO_URL;
+import static com.mopub.mobileads.BaseVideoPlayerActivity.startMraid;
+import static com.mopub.mobileads.BaseVideoPlayerActivity.startVast;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+import static org.mockito.Mockito.withSettings;
+
+@RunWith(SdkTestRunner.class)
+public class BaseVideoPlayerActivitiyTest {
+    private static final String MRAID_VIDEO_URL = "http://mraidVideo";
+
+    private AdConfiguration adConfiguration;
+    private long testBroadcastIdentifier;
+    private VastVideoConfiguration vastVideoConfiguration;
+
+    @Before
+    public void setup() throws Exception {
+        adConfiguration = mock(AdConfiguration.class, withSettings().serializable());
+        vastVideoConfiguration = mock(VastVideoConfiguration.class, withSettings().serializable());
+
+        testBroadcastIdentifier = 1234;
+        when(adConfiguration.getBroadcastIdentifier()).thenReturn(testBroadcastIdentifier);
+    }
+
+    @Test
+    public void startMraid_shouldStartMraidVideoPlayerActivity() throws Exception {
+        startMraid(new Activity(), MRAID_VIDEO_URL, adConfiguration);
+        assertMraidVideoPlayerActivityStarted(MraidVideoPlayerActivity.class, MRAID_VIDEO_URL, adConfiguration);
+    }
+
+    @Test
+    public void startVast_shouldStartMraidVideoPlayerActivity() throws Exception {
+        startVast(new Activity(), vastVideoConfiguration, adConfiguration);
+        assertVastVideoPlayerActivityStarted(MraidVideoPlayerActivity.class, vastVideoConfiguration, adConfiguration);
+    }
+
+    static void assertVastVideoPlayerActivityStarted(final Class clazz,
+            final VastVideoConfiguration vastVideoConfiguration,
+            final AdConfiguration adConfiguration) {
+        final Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertIntentAndAdConfigurationAreCorrect(intent, clazz, adConfiguration);
+
+        final VastVideoConfiguration expectedVastVideoConfiguration =
+                (VastVideoConfiguration) intent.getSerializableExtra(VastVideoViewController.VAST_VIDEO_CONFIGURATION);
+        assertThat(expectedVastVideoConfiguration).isEqualsToByComparingFields(vastVideoConfiguration);
+    }
+
+    static void assertMraidVideoPlayerActivityStarted(final Class clazz,
+            final String url,
+            final AdConfiguration adConfiguration) {
+        final Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertIntentAndAdConfigurationAreCorrect(intent, clazz, adConfiguration);
+
+        assertThat(intent.getStringExtra(VIDEO_URL)).isEqualTo(url);
+    }
+
+    static void assertIntentAndAdConfigurationAreCorrect(final Intent intent,
+            final Class clazz,
+            final AdConfiguration adConfiguration) {
+        assertThat(intent.getComponent().getClassName()).isEqualTo(clazz.getCanonicalName());
+        assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), Intent.FLAG_ACTIVITY_NEW_TASK)).isTrue();
+
+        final AdConfiguration expectedAdConfiguration = (AdConfiguration) intent.getSerializableExtra(AD_CONFIGURATION_KEY);
+        assertThat(expectedAdConfiguration).isEqualsToByComparingFields(adConfiguration);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/DiskLruCacheTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/DiskLruCacheTest.java
deleted file mode 100644
index a7f1df7c..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/DiskLruCacheTest.java
+++ /dev/null
@@ -1,349 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.net.Uri;
-
-import com.mopub.common.util.Utils;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import java.io.*;
-
-import static com.mopub.mobileads.test.support.StreamUtils.createByteArrayInputStream;
-import static junit.framework.Assert.fail;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
-
-@RunWith(SdkTestRunner.class)
-public class DiskLruCacheTest {
-
-    private Context context;
-    private String cacheDirectoryName;
-    private int maxSizeBytes;
-    private DiskLruCache subject;
-
-    @Before
-    public void setUp() throws Exception {
-        context = new Activity();
-        cacheDirectoryName = "mopub_video_cache";
-        maxSizeBytes = 1000;
-
-        subject = new DiskLruCache(context, cacheDirectoryName, maxSizeBytes);
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        File[] files = subject.getCacheDirectory().listFiles();
-
-        if (files != null) {
-            for (final File file : files) {
-                file.delete();
-            }
-        }
-    }
-
-    @Test
-    public void constructor_shouldSetVideoCacheDirectory() throws Exception {
-        File videoCacheDirectory = subject.getCacheDirectory();
-
-        assertThat(videoCacheDirectory.exists()).isTrue();
-        assertThat(videoCacheDirectory.isDirectory()).isTrue();
-        assertThat(videoCacheDirectory.getAbsolutePath()).isEqualTo(context.getFilesDir() + "/mopub_video_cache");
-    }
-
-    @Test
-    public void constructor_whenNullContext_shouldThrowIllegalArgumentException() throws Exception {
-        try {
-            subject = new DiskLruCache(null, cacheDirectoryName, maxSizeBytes);
-            fail("Should throw IllegalArgumentException");
-        } catch (IllegalArgumentException exception) {
-            // pass
-        }
-    }
-
-    @Test
-    public void constructor_whenNullCacheDirectoryName_shouldThrowIllegalArgumentException() throws Exception {
-        try {
-            subject = new DiskLruCache(context, null, maxSizeBytes);
-            fail("Should throw IllegalArgumentException");
-        } catch (IllegalArgumentException exception) {
-            // pass
-        }
-    }
-
-    @Test
-    public void constructor_whenCacheDirectoryNameUsesSpecialCharacters_shouldNotBlowUp() throws Exception {
-        subject = new DiskLruCache(context, "//  ///`~!@#$ %^&*( )_+-=[]{}\\|;:'\",<.....>/?", maxSizeBytes);
-
-        subject.putStream("test1.txt", new ByteArrayInputStream("string".getBytes()));
-
-        // pass
-    }
-
-    @Test
-    public void constructor_whenCacheDirectoryNameIsEmpty_shouldNotBlowUp() throws Exception {
-        subject = new DiskLruCache(context, "", maxSizeBytes);
-
-        subject.putStream("test1.txt", new ByteArrayInputStream("string".getBytes()));
-
-        // pass
-    }
-
-    @Test
-    public void constructor_whenMaxSizeBytes_shouldThrowIllegalArgumentException() throws Exception {
-        try {
-            subject = new DiskLruCache(context, cacheDirectoryName, -1000);
-            fail("Should throw IllegalArgumentException");
-        } catch (IllegalArgumentException exception) {
-            // pass
-        }
-    }
-
-    @Test
-    public void constructor_whenCacheDirectoryExistsAsAFile_shouldThrowIOException() throws Exception {
-        File file = new File(subject.getCacheDirectory().getAbsolutePath());
-        file.delete();
-        file.createNewFile();
-
-        try {
-            subject = new DiskLruCache(context, cacheDirectoryName, maxSizeBytes);
-            fail("Should throw IOException");
-        } catch (IOException exception) {
-            // pass
-        } finally {
-            file.delete();
-        }
-    }
-    
-    @Test
-    public void constructor_whenFilesExistInCacheDirectory_shouldInitializeCache() throws Exception {
-        subject.putStream("dog.txt", createByteArrayInputStream(11));
-        subject.putStream("cat.txt", createByteArrayInputStream(23));
-
-        DiskLruCache newCache = new DiskLruCache(context, cacheDirectoryName, maxSizeBytes);
-
-        File dogFile = new File(String.valueOf(newCache.getUri("dog.txt")));
-        File catFile = new File(String.valueOf(newCache.getUri("cat.txt")));
-
-        assertThat(newCache.snapshot().size()).isEqualTo(2);
-        assertThat(dogFile.length()).isEqualTo(11);
-        assertThat(catFile.length()).isEqualTo(23);
-    }
-
-    @Test
-    public void constructor_whenFilesExistInADifferentCacheDirectory_shouldInitializeEmptyCache() throws Exception {
-        subject.putStream("dog.txt", createByteArrayInputStream(11));
-        subject.putStream("cat.txt", createByteArrayInputStream(23));
-
-        DiskLruCache newCache = new DiskLruCache(context, "a_different_cache", maxSizeBytes);
-
-        assertThat(newCache.snapshot().size()).isEqualTo(0);
-
-        newCache.evictAll();
-    }
-
-    @Test
-    public void constructor_whenNoFilesExistInCacheDirectory_shouldBeEmptyLruCache() throws Exception {
-        assertThat(subject.snapshot().isEmpty()).isTrue();
-    }
-
-    @Test
-    public void getUri_whenValueInCache_shouldReturnUriRepresentationOfFile() throws Exception {
-        ByteArrayInputStream byteArrayInputStream = createByteArrayInputStream(100);
-        Uri expectedUri = Uri.parse(context.getFilesDir() + "/mopub_video_cache/" + Utils.sha1("file1.gif"));
-
-        subject.putStream("file1.gif", byteArrayInputStream);
-
-        assertThat(subject.getUri("file1.gif").equals(expectedUri)).isTrue();
-    }
-
-    @Test
-    public void getUri_whenValueNotInCache_shouldReturnNull() throws Exception {
-        subject.evictAll();
-
-        assertThat(subject.getUri("this_file_does_not_exist.bat")).isNull();
-    }
-
-    @Test
-    public void putStream_withValidFileNameAndInputStream_shouldAddKeyValuePairToCache() throws Exception {
-        assertThat(subject.get("some_file")).isNull();
-
-        boolean success = subject.putStream("some_file", createByteArrayInputStream(123));
-
-        assertThat(success).isTrue();
-        assertThat(subject.snapshot().size()).isEqualTo(1);
-        assertThat(subject.getUri("some_file")).isNotNull();
-    }
-
-    @Test
-    public void putStream_withEmptyFileName_shoulAddKeyValuePairToCache() throws Exception {
-        assertThat(subject.get("")).isNull();
-
-        boolean success = subject.putStream("", createByteArrayInputStream(234));
-
-        assertThat(success).isTrue();
-        assertThat(subject.snapshot().size()).isEqualTo(1);
-        assertThat(subject.getUri("")).isNotNull();
-    }
-
-    @Test
-    public void putStream_withEmptyInputStream_shouldAddKeyValuePairToCache() throws Exception {
-        assertThat(subject.get("some_file")).isNull();
-
-        boolean success = subject.putStream("some_file", createByteArrayInputStream(0));
-
-        assertThat(success).isTrue();
-        assertThat(subject.snapshot().size()).isEqualTo(1);
-        assertThat(subject.getUri("some_file")).isNotNull();
-    }
-
-    @Test
-    public void putStream_withNullFileName_shouldNotAddKeyValuePairToCache() throws Exception {
-        boolean success = subject.putStream(null, createByteArrayInputStream(1));
-
-        assertThat(success).isFalse();
-        assertThat(subject.snapshot().isEmpty()).isTrue();
-    }
-
-    @Test
-    public void putStream_withNullInputStream_shouldNotAddKeyValuePairToCache() throws Exception {
-        boolean success = subject.putStream("some_file", (InputStream) null);
-
-        assertThat(success).isFalse();
-        assertThat(subject.snapshot().isEmpty()).isTrue();
-    }
-    
-    @Test
-    public void putStream_whenHashedFilenameAlreadyInCache_shouldNotReturnFalsePositive() throws Exception {
-        final String fileName = "just a generic filename";
-        final String hashedFileName = Utils.sha1(fileName);
-
-        subject.putStream(hashedFileName, createByteArrayInputStream(10));
-        boolean result = subject.putStream(fileName, createByteArrayInputStream(10));
-
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void putStream_canHandleFileNamesWithSymbols() throws Exception {
-        String fileNameWithSymbols = " ~`!@#$%^&*()_+-={}|[]\\:\";'<>,.?/";
-        boolean success = subject.putStream(fileNameWithSymbols, createByteArrayInputStream(1));
-
-        assertThat(success).isTrue();
-        assertThat(subject.snapshot().size()).isEqualTo(1);
-        assertThat(subject.getUri(fileNameWithSymbols)).isNotNull();
-    }
-
-    @Test
-    public void putStream_whenGoingOverSizeLimit_shouldRemoveLeastRecentlyUsedItem() throws Exception {
-        subject.putStream("file0", createByteArrayInputStream(700));
-        subject.putStream("file1", createByteArrayInputStream(200));
-        subject.putStream("file2", createByteArrayInputStream(50));
-
-        // We should be safe, with 950 kb / 1000 kb allotted.
-
-        assertThat(subject.snapshot().size()).isEqualTo(3);
-        assertThat(subject.getUri("file0")).isNotNull();
-        assertThat(subject.getUri("file1")).isNotNull();
-        assertThat(subject.getUri("file2")).isNotNull();
-
-        // We go over the edge with file3
-
-        subject.putStream("file3", createByteArrayInputStream(60));
-
-        assertThat(subject.snapshot().size()).isEqualTo(3);
-        assertThat(subject.getUri("file0")).isNull();
-        assertThat(subject.getUri("file1")).isNotNull();
-        assertThat(subject.getUri("file2")).isNotNull();
-        assertThat(subject.getUri("file3")).isNotNull();
-    }
-
-    @Test
-    public void put_whenGoingOverSizeLimit_canCauseMultipleEvictions() throws Exception {
-        subject.putStream("file0", createByteArrayInputStream(100));
-        subject.putStream("file1", createByteArrayInputStream(101));
-
-        assertThat(subject.snapshot().size()).isEqualTo(2);
-        assertThat(subject.getUri("file0")).isNotNull();
-        assertThat(subject.getUri("file1")).isNotNull();
-
-        subject.putStream("file2", createByteArrayInputStream(999));
-
-        assertThat(subject.snapshot().size()).isEqualTo(1);
-        assertThat(subject.getUri("file0")).isNull();
-        assertThat(subject.getUri("file1")).isNull();
-        assertThat(subject.getUri("file2")).isNotNull();
-    }
-
-    @Test
-    public void removeStream_shouldRemoveBackingFileFromFilesystem() throws Exception {
-        ByteArrayInputStream byteArrayInputStream = createByteArrayInputStream(660);
-        File file = new File(context.getFilesDir() + "/mopub_video_cache/" + Utils.sha1("this_will_be_removed.exe"));
-
-        subject.putStream("this_will_be_removed.exe", byteArrayInputStream);
-
-        assertFileLength(file, 660);
-
-        subject.removeStream("this_will_be_removed.exe");
-
-        assertFileDoesNotExist(file);
-    }
-
-    @Test
-    public void remove_whenRemovingAFileThatDoesNotExist_shouldDoNothing() throws Exception {
-        File untouchedFile = new File(context.getFilesDir() + "/mopub_video_cache/" + Utils.sha1("cat_pic.gif"));
-
-        subject.putStream("cat_pic.gif", createByteArrayInputStream(27));
-
-        assertFileLength(untouchedFile, 27);
-
-        subject.removeStream("something_else.jpg");
-
-        assertFileLength(untouchedFile, 27);
-    }
-
-    @Test
-    public void sizeOf_shouldReturnSizeOfTheFileAsInteger() throws Exception {
-        File file = createMockFile(1000);
-
-        assertThat(subject.sizeOf(null, file)).isEqualTo(1000);
-    }
-    
-    @Test
-    public void sizeOf_whenFileIsNullNonExistentOrEmpty_shouldReturnDefaultOne() throws Exception {
-        assertThat(subject.sizeOf(null, null)).isEqualTo(1);
-
-        File file = mock(File.class);
-        stub(file.exists()).toReturn(false);
-
-        assertThat(subject.sizeOf(null, file)).isEqualTo(1);
-
-        file = createMockFile(-1);
-
-        assertThat(subject.sizeOf(null, file)).isEqualTo(1);
-    }
-
-    private void assertFileLength(File file, long length) {
-        assertThat(file.exists()).isTrue();
-        assertThat(file.length()).isEqualTo(length);
-    }
-
-    private void assertFileDoesNotExist(File file) {
-        assertThat(file.exists()).isFalse();
-        assertThat(file.length()).isEqualTo(0);
-    }
-
-    private File createMockFile(int size) {
-        File file = mock(File.class);
-        stub(file.exists()).toReturn(true);
-        stub(file.length()).toReturn((long) size);
-
-        return file;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
index 64138d8c..b92eb9ed 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
@@ -34,7 +34,6 @@
 
 import android.app.Activity;
 
-import com.mopub.common.LocationService;
 import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
 import com.mopub.mobileads.test.support.TestCustomEventInterstitialAdapterFactory;
 import org.junit.Before;
@@ -49,9 +48,9 @@
 import static com.mopub.mobileads.MoPubErrorCode.CANCELLED;
 import static com.mopub.mobileads.MoPubErrorCode.INTERNAL_ERROR;
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_HTML_DATA;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_NAME;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_HTML_DATA;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
index db36b0a1..83ce806a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
@@ -33,19 +33,28 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.support.v4.content.LocalBroadcastManager;
+import android.view.View;
+
 import com.mopub.mobileads.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
 import com.mopub.mobileads.test.support.TestCustomEventBannerAdapterFactory;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.shadows.ShadowApplication;
+import org.robolectric.shadows.ShadowLocalBroadcastManager;
 
 import java.util.*;
 
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_HTML_DATA;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_NAME;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_HTML_DATA;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.never;
@@ -58,15 +67,105 @@
     private Map<String,String> paramsMap = new HashMap<String, String>();
     private CustomEventBannerAdapter customEventBannerAdapter;
     private AdViewController adViewController;
+    private Context context;
 
     @Before
     public void setup() {
-        subject = new MoPubView(new Activity());
+        context = new Activity();
+        subject = new MoPubView(context);
         customEventBannerAdapter = TestCustomEventBannerAdapterFactory.getSingletonMock();
         reset(customEventBannerAdapter);
         adViewController = TestAdViewControllerFactory.getSingletonMock();
     }
 
+    @Test
+    public void screenStateBroadcastReceiver_withActionUserPresent_shouldUnpauseRefresh() throws Exception {
+        broadcastIntent(new Intent(Intent.ACTION_USER_PRESENT));
+
+        verify(adViewController).unpauseRefresh();
+    }
+
+    @Test
+    public void screenStateBroadcastReceiver_withActionScreenOff_shouldPauseRefersh() throws Exception {
+        broadcastIntent(new Intent(Intent.ACTION_SCREEN_OFF));
+
+        verify(adViewController).pauseRefresh();
+    }
+
+    @Test
+    public void screenStateBroadcastReceiver_withNullIntent_shouldDoNothing() throws Exception {
+        broadcastIntent(null);
+
+        verify(adViewController, never()).pauseRefresh();
+        verify(adViewController, never()).unpauseRefresh();
+    }
+
+    @Test
+    public void screenStateBroadcastReceiver_withRandomIntent_shouldDoNothing() throws Exception {
+        broadcastIntent(new Intent(Intent.ACTION_BATTERY_LOW));
+
+        verify(adViewController, never()).pauseRefresh();
+        verify(adViewController, never()).unpauseRefresh();
+    }
+
+    @Test
+    public void screenStateBroadcastReceiver_whenAdInBackground_shouldDoNothing() throws Exception {
+        subject.onWindowVisibilityChanged(View.INVISIBLE);
+        reset(adViewController);
+
+        broadcastIntent(new Intent(Intent.ACTION_USER_PRESENT));
+        verify(adViewController, never()).unpauseRefresh();
+
+        broadcastIntent(new Intent(Intent.ACTION_SCREEN_OFF));
+        verify(adViewController, never()).pauseRefresh();
+    }
+
+    @Test
+    public void screenStateBroadcastReceiver_afterOnDestroy_shouldDoNothing() throws Exception {
+        subject.destroy();
+
+        broadcastIntent(new Intent(Intent.ACTION_USER_PRESENT));
+        verify(adViewController, never()).unpauseRefresh();
+
+        broadcastIntent(new Intent(Intent.ACTION_SCREEN_OFF));
+        verify(adViewController, never()).pauseRefresh();
+    }
+
+    @Test
+    public void onWindowVisibilityChanged_toVisible_shouldUnpauseRefresh() throws Exception {
+        subject.onWindowVisibilityChanged(View.VISIBLE);
+
+        verify(adViewController).unpauseRefresh();
+    }
+
+    @Test
+    public void onWindowVisibilityChanged_toInvisible_shouldPauseRefresh() throws Exception {
+        subject.onWindowVisibilityChanged(View.INVISIBLE);
+
+        verify(adViewController).pauseRefresh();
+    }
+
+    @Test
+    public void setAutorefreshEnabled_withRefreshTrue_shouldForwardToAdViewController() throws Exception {
+        subject.setAutorefreshEnabled(true);
+
+        verify(adViewController).forceSetAutorefreshEnabled(true);
+    }
+
+    @Test
+    public void setAutorefreshEnabled_withRefreshFalse_shouldForwardToAdViewController() throws Exception {
+        subject.setAutorefreshEnabled(false);
+
+        verify(adViewController).forceSetAutorefreshEnabled(false);
+    }
+    
+    @Test
+    public void nativeAdLoaded_shouldScheduleRefreshTimer() throws Exception {
+        subject.nativeAdLoaded();
+
+        verify(adViewController).scheduleRefreshTimerIfEnabled();
+    }
+
     @Test
     public void loadCustomEvent_shouldInitializeCustomEventBannerAdapter() throws Exception {
         paramsMap.put(CUSTOM_EVENT_NAME.getKey(), "name");
@@ -89,4 +188,12 @@ public void loadCustomEvent_whenParamsMapIsNull_shouldCallLoadFailUrl() throws E
         verify(customEventBannerAdapter, never()).invalidate();
         verify(customEventBannerAdapter, never()).loadAd();
     }
+
+    private void broadcastIntent(final Intent intent) {
+        final List<ShadowApplication.Wrapper> wrappers = Robolectric.getShadowApplication().getRegisteredReceivers();
+
+        for (final ShadowApplication.Wrapper wrapper : wrappers) {
+            wrapper.broadcastReceiver.onReceive(context, intent);
+        }
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandPlayVideoTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandPlayVideoTest.java
index 02cd8da0..fc9f653f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandPlayVideoTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandPlayVideoTest.java
@@ -1,49 +1,54 @@
 /*
- * Copyright (c) 2010-2013, MoPub Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *
- *  Redistributions of source code must retain the above copyright
- *   notice, this list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright
- *   notice, this list of conditions and the following disclaimer in the
- *   documentation and/or other materials provided with the distribution.
- *
- *  Neither the name of 'MoPub Inc.' nor the names of its contributors
- *   may be used to endorse or promote products derived from this software
- *   without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
+* Copyright (c) 2010-2013, MoPub Inc.
+* All rights reserved.
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions are
+* met:
+*
+*  Redistributions of source code must retain the above copyright
+*   notice, this list of conditions and the following disclaimer.
+*
+*  Redistributions in binary form must reproduce the above copyright
+*   notice, this list of conditions and the following disclaimer in the
+*   documentation and/or other materials provided with the distribution.
+*
+*  Neither the name of 'MoPub Inc.' nor the names of its contributors
+*   may be used to endorse or promote products derived from this software
+*   without specific prior written permission.
+*
+* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+* PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
 
 package com.mopub.mobileads;
 
 import android.app.Activity;
+
 import com.mopub.mobileads.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestMraidViewFactory;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import java.util.*;
+import java.util.HashMap;
+import java.util.Map;
 
+import static com.mopub.mobileads.BaseVideoPlayerActivitiyTest.assertMraidVideoPlayerActivityStarted;
 import static com.mopub.mobileads.MraidCommandPlayVideo.URI_KEY;
-import static com.mopub.mobileads.MraidVideoPlayerActivityTest.assertMraidVideoPlayerActivityStarted;
+import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.withSettings;
 
 @RunWith(SdkTestRunner.class)
 public class MraidCommandPlayVideoTest {
@@ -51,6 +56,8 @@
 
     private MraidCommandPlayVideo subject;
     private MraidView mraidView;
+    private long testBroadcastIdentifier;
+    private AdConfiguration adConfiguration;
 
     @Before
     public void setup() {
@@ -63,12 +70,16 @@ public void setup() {
         MraidDisplayController displayController = new MraidDisplayController(mraidView, null, null);
         stub(mraidView.getDisplayController()).toReturn(displayController);
         subject = new MraidCommandPlayVideo(params, mraidView);
+
+        testBroadcastIdentifier = 2121;
+        adConfiguration = mock(AdConfiguration.class, withSettings().serializable());
+        stub(adConfiguration.getBroadcastIdentifier()).toReturn(testBroadcastIdentifier);
+        stub(mraidView.getAdConfiguration()).toReturn(adConfiguration);
     }
 
     @Test
     public void execute_shouldPlayVideo() throws Exception {
         subject.execute();
-
-        assertMraidVideoPlayerActivityStarted("com.mopub.mobileads.MraidVideoPlayerActivity", EXPECTED_URI);
+        assertMraidVideoPlayerActivityStarted(MraidVideoPlayerActivity.class, EXPECTED_URI, adConfiguration);
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java
index 601e02ca..514f9896 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java
@@ -1,34 +1,34 @@
 /*
- * Copyright (c) 2010-2013, MoPub Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *
- *  Redistributions of source code must retain the above copyright
- *   notice, this list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright
- *   notice, this list of conditions and the following disclaimer in the
- *   documentation and/or other materials provided with the distribution.
- *
- *  Neither the name of 'MoPub Inc.' nor the names of its contributors
- *   may be used to endorse or promote products derived from this software
- *   without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
+* Copyright (c) 2010-2013, MoPub Inc.
+* All rights reserved.
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions are
+* met:
+*
+*  Redistributions of source code must retain the above copyright
+*   notice, this list of conditions and the following disclaimer.
+*
+*  Redistributions in binary form must reproduce the above copyright
+*   notice, this list of conditions and the following disclaimer in the
+*   documentation and/or other materials provided with the distribution.
+*
+*  Neither the name of 'MoPub Inc.' nor the names of its contributors
+*   may be used to endorse or promote products derived from this software
+*   without specific prior written permission.
+*
+* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+* PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
 
 package com.mopub.mobileads;
 
@@ -45,12 +45,14 @@
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.RelativeLayout;
+
 import com.mopub.mobileads.test.support.FileUtils;
 import com.mopub.mobileads.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.mobileads.test.support.TestMraidViewFactory;
 import com.mopub.mobileads.test.support.ThreadUtils;
 import com.mopub.mobileads.util.MraidsTest;
+
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.HttpUriRequest;
 import org.junit.Before;
@@ -65,12 +67,17 @@
 import org.robolectric.shadows.ShadowLog;
 import org.robolectric.shadows.ShadowToast;
 
-import java.io.*;
+import java.io.File;
 import java.net.URI;
-import java.util.*;
+import java.util.HashMap;
+import java.util.Map;
 
 import static android.content.DialogInterface.BUTTON_NEGATIVE;
 import static android.content.DialogInterface.BUTTON_POSITIVE;
+import static com.mopub.common.util.VersionCode.ECLAIR;
+import static com.mopub.common.util.VersionCode.FROYO;
+import static com.mopub.common.util.VersionCode.ICE_CREAM_SANDWICH;
+import static com.mopub.mobileads.BaseVideoPlayerActivitiyTest.assertMraidVideoPlayerActivityStarted;
 import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.CREATE_CALENDAR_EVENT;
 import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_CURRENT_POSITION;
 import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_DEFAULT_POSITION;
@@ -78,12 +85,8 @@
 import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_SCREEN_SIZE;
 import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.STORE_PICTURE;
 import static com.mopub.mobileads.MraidCommandStorePicture.MIME_TYPE_HEADER;
-import static com.mopub.mobileads.MraidVideoPlayerActivityTest.assertMraidVideoPlayerActivityStarted;
 import static com.mopub.mobileads.util.Mraids.ANDROID_CALENDAR_CONTENT_TYPE;
-import static com.mopub.common.util.VersionCode.ECLAIR;
-import static com.mopub.common.util.VersionCode.FROYO;
-import static com.mopub.common.util.VersionCode.ICE_CREAM_SANDWICH;
-import static java.io.File.*;
+import static java.io.File.separator;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
@@ -96,6 +99,7 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
+import static org.mockito.Mockito.withSettings;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
@@ -120,6 +124,8 @@
     private File fileWithoutExtension;
     private TestHttpResponseWithHeaders response;
     private Map<String, String> params;
+    private AdConfiguration adConfiguration;
+    private long testBroadcastIdentifier;
 
     @Before
     public void setup() {
@@ -138,6 +144,11 @@ public void setup() {
 
         subject = new TestMraidDisplayController(mraidView, null, null);
 
+        testBroadcastIdentifier = 1235;
+        adConfiguration = mock(AdConfiguration.class, withSettings().serializable());
+        stub(adConfiguration.getBroadcastIdentifier()).toReturn(testBroadcastIdentifier);
+        stub(mraidView.getAdConfiguration()).toReturn(adConfiguration);
+
         FileUtils.copyFile("etc/expectedFile.jpg", "/tmp/expectedFile.jpg");
         expectedFile = new File(Environment.getExternalStorageDirectory(), "Pictures" + separator + "expectedFile.jpg");
         pictureDirectory = new File(Environment.getExternalStorageDirectory(), "Pictures");
@@ -484,8 +495,7 @@ public void orientationBroadcastReceiver_whenUnregistered_shouldIgnoreOnReceive(
     @Test
     public void showVideo_shouldStartVideoPlayerActivity() throws Exception {
         subject.showVideo(VIDEO_URL);
-
-        assertMraidVideoPlayerActivityStarted("com.mopub.mobileads.MraidVideoPlayerActivity", VIDEO_URL);
+        assertMraidVideoPlayerActivityStarted(MraidVideoPlayerActivity.class, VIDEO_URL, adConfiguration);
     }
 
     @Test
@@ -793,6 +803,7 @@ private void resetMockMraidView(Context context) {
         stub(mraidView.getContext()).toReturn(context);
         when(mraidView.getParent()).thenReturn(moPubView).thenReturn(null);
         stub(mraidView.getRootView()).toReturn(rootView);
+        stub(mraidView.getAdConfiguration()).toReturn(adConfiguration);
     }
 
     private MraidSupportsProperty captureMraidSupportProperties() {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
index f4500cc3..6e72d0bd 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
@@ -33,308 +33,198 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
+import android.content.Context;
 import android.content.Intent;
-import android.media.MediaPlayer;
+import android.content.pm.ActivityInfo;
+import android.os.Bundle;
 import android.view.View;
-import android.view.ViewGroup;
-import android.widget.RelativeLayout;
-import android.widget.VideoView;
+import android.widget.ImageView;
+
+import com.mopub.common.MoPubBrowser;
 import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.After;
+import com.mopub.mobileads.util.vast.VastVideoConfiguration;
+
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.shadows.ShadowLog;
-import org.robolectric.shadows.ShadowVideoView;
+import org.robolectric.shadows.ShadowActivity;
 
-import java.util.*;
-
-import static com.mopub.mobileads.MraidVideoPlayerActivity.VIDEO_URL;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 import static org.mockito.Mockito.withSettings;
-import static org.robolectric.Robolectric.buildActivity;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
 public class MraidVideoPlayerActivityTest {
-    private ArrayList<String> videoStartTrackers;
-    private ArrayList<String> videoFirstQuartileTrackers;
-    private ArrayList<String> videoMidpointTrackers;
-    private ArrayList<String> videoThirdQuartileTrackers;
-    private ArrayList<String> videoCompleteTrackers;
-    private ArrayList<String> impressionTrackers;
-    private ArrayList<String> clickThroughTrackers;
-    private String videoUrl;
-    private String clickThroughUrl;
+    private static final String VAST = "vast";
+    private static final String MRAID = "mraid";
+
     private MraidVideoPlayerActivity subject;
-    private AdConfiguration adConfiguration;
     private long testBroadcastIdentifier;
-
-    public static void assertMraidVideoPlayerActivityStarted(String className, String expectedURI) {
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getComponent().getClassName()).isEqualTo(className);
-        assertThat(intent.getStringExtra(VIDEO_URL)).isEqualTo(expectedURI);
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-    }
-
-    public static void assertVastVideoPlayerActivityStarted(String className, String expectedURI) {
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getComponent().getClassName()).isEqualTo(className);
-        assertThat(intent.getStringExtra(VIDEO_URL)).isEqualTo(expectedURI);
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-    }
+    private Intent intent;
+    private Context context;
+    private BaseVideoViewController baseVideoViewController;
 
     @Before
     public void setup() {
-        videoStartTrackers = new ArrayList<String>();
-        videoFirstQuartileTrackers = new ArrayList<String>();
-        videoMidpointTrackers = new ArrayList<String>();
-        videoThirdQuartileTrackers = new ArrayList<String>();
-        videoCompleteTrackers = new ArrayList<String>();
-        impressionTrackers = new ArrayList<String>();
-        clickThroughTrackers = new ArrayList<String>();
-        videoUrl = "http://video";
-        clickThroughUrl = "clickThrough";
-
-        testBroadcastIdentifier = 4321;
-        adConfiguration = mock(AdConfiguration.class, withSettings().serializable());
-        stub(adConfiguration.getBroadcastIdentifier()).toReturn(testBroadcastIdentifier);
-    }
+        context = new Activity();
+        intent = new Intent(context, MraidVideoPlayerActivity.class);
 
-    @After
-    public void tearDown() {
+        testBroadcastIdentifier = 1001;
+        AdConfiguration adConfiguration = mock(AdConfiguration.class, withSettings().serializable());
+        when(adConfiguration.getBroadcastIdentifier()).thenReturn(testBroadcastIdentifier);
+        intent.putExtra(AdFetcher.AD_CONFIGURATION_KEY, adConfiguration);
 
+        baseVideoViewController = mock(BaseVideoViewController.class);
     }
 
     @Test
-    public void startMraid_shouldStartVideoPlayer() throws Exception {
-        setUpMraidSubject();
-
-        MraidVideoPlayerActivity.startMraid(new Activity(), "http://mraidVideo", adConfiguration);
+    public void onCreate_withVastExtraKey_shouldUseVastVideoViewController() throws Exception {
+        initializeSubjectForVast();
 
-        assertMraidVideoPlayerActivityStarted("com.mopub.mobileads.MraidVideoPlayerActivity", "http://mraidVideo");
-    }
-
-    @Ignore("pending")
-    @Test
-    public void startVast_shouldStartVideoPlayer() throws Exception {
-        setUpVastSubject();
-
-        MraidVideoPlayerActivity.startVast(new Activity(),
-                videoUrl,
-                videoStartTrackers,
-                videoFirstQuartileTrackers,
-                videoMidpointTrackers,
-                videoThirdQuartileTrackers,
-                videoCompleteTrackers,
-                impressionTrackers,
-                clickThroughUrl,
-                clickThroughTrackers,
-                adConfiguration);
-
-        assertMraidVideoPlayerActivityStarted("com.mopub.mobileads.MraidVideoPlayerActivity", "http://vastVideo");
+        assertThat(subject.getBaseVideoViewController()).isInstanceOf(VastVideoViewController.class);
     }
 
     @Test
-    public void startVast_WithAllTrackers_shouldStartVideoPlayerWithAllTrackers() throws Exception {
+    public void onCreate_withMraidExtraKey_shouldUseMraidVideoViewController() throws Exception {
+        initializeSubjectForMraid();
 
+        assertThat(subject.getBaseVideoViewController()).isInstanceOf(MraidVideoViewController.class);
     }
 
+    @Ignore("pending: this is currently impossible to write")
     @Test
-    public void startVast_WithMissingTrackers_shouldStartVideoPlayerAndNotBlowUp() throws Exception {
+    public void onCreate_shouldForwardOnCreateToViewController() throws Exception {
+        initializeSubjectWithMockViewController();
 
     }
 
     @Test
-    public void getAdView_withMraidVideoClassName_shouldCreateMraidVideoView() throws Exception {
+    public void onPause_shouldForwardOnPauseToViewController() throws Exception {
+        initializeSubjectWithMockViewController();
 
-    }
-    @Test
-    public void getAdView_withVastVideoClassName_shouldCreateVastVideoView() throws Exception {
-
-    }
-
-    @Ignore("pending")
-    @Test
-    public void onCreate_shouldSetupVideoView() throws Exception {
-        VideoView videoView = findVideoView();
-        ShadowVideoView shadowVideoView = shadowOf(videoView);
-        assertThat(videoView).isNotNull();
-        assertThat(shadowVideoView.getVideoPath()).isEqualTo("http://video");
-        assertThat(shadowVideoView.getCurrentVideoState()).isEqualTo(ShadowVideoView.START);
-    }
-
-    @Ignore("pending")
-    @Test
-    public void onCreate_shouldCenterVideoView() throws Exception {
-        VideoView videoView = findVideoView();
+        subject.onPause();
 
-        RelativeLayout.LayoutParams videoLayout = (RelativeLayout.LayoutParams) videoView.getLayoutParams();
-        assertThat(videoLayout.getRules()[RelativeLayout.CENTER_IN_PARENT]).isNotEqualTo(0);
+        verify(baseVideoViewController).onPause();
     }
 
     @Test
-    public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
+    public void onResume_shouldForwardOnResumeToViewController() throws Exception {
+        initializeSubjectWithMockViewController();
 
-    }
-
-    @Test
-    public void onCreate_shouldHideInterstitialCloseButton() throws Exception {
+        subject.onResume();
 
+        verify(baseVideoViewController).onResume();
     }
 
     @Test
-    public void onCreate_shouldStartVideoView() throws Exception {
+    public void onDestroy_shouldForwardOnDestroyToViewController() throws Exception {
+        initializeSubjectWithMockViewController();
 
-    }
-
-    @Test
-    public void onResume_withMraidVideoView_shouldCallSuperOnResumeThenCallVideoViewOnResume() throws Exception {
+        subject.onDestroy();
 
+        verify(baseVideoViewController).onDestroy();
     }
 
     @Test
-    public void onResume_withVastVideoView_shouldCallSuperOnResumeThenCallVideoViewOnResume() throws Exception {
+    public void onActivityResult_shouldForwardOnActivityResultToViewController() throws Exception {
+        initializeSubjectWithMockViewController();
 
-    }
-
-    @Test
-    public void onPause_withMraidVideoView_shouldCallVideoViewOnPauseThenCallSuperOnPause() throws Exception {
+        int expectedRequestCode = -100;
+        int expectedResultCode = 200;
+        Intent expectedData = new Intent("arbitrary_data");
+        subject.onActivityResult(expectedRequestCode, expectedResultCode, expectedData);
 
+        verify(baseVideoViewController).onActivityResult(
+                eq(expectedRequestCode),
+                eq(expectedResultCode),
+                eq(expectedData)
+        );
     }
 
     @Test
-    public void onPause_withVastVideoView_shouldCallVideoViewOnPauseThenCallSuperOnPause() throws Exception {
+    public void onSetContentView_shouldActuallySetContentView() throws Exception {
+        initializeSubjectWithMockViewController();
+        final View expectedView = new ImageView(context);
 
-    }
-
-    @Test
-    public void showCloseButton_shouldShowInterstitialCloseButton() throws Exception {
+        subject.onSetContentView(expectedView);
 
+        assertThat(shadowOf(subject).getContentView()).isEqualTo(expectedView);
     }
 
     @Test
-    public void videoError_withShouldFinishTrue_shouldShowCloseButton_AndBroadcastInterstitialFail_AndFinishActivity() throws Exception {
-
-    }
+    public void onSetRequestedOrientation_shouldActuallySetRequestedOrientation() throws Exception {
+        initializeSubjectWithMockViewController();
 
-    @Test
-    public void videoError_withShouldFinishFalse_shouldShowCloseButton_AndBroadcastInterstitialFail_AndNotFinishActivity() throws Exception {
+        subject.onSetRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR);
 
+        assertThat(subject.getRequestedOrientation()).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_SENSOR);
     }
 
     @Test
-    public void videoCompleted_withShouldFinishTrue_shouldShowCloseButton_AndFinishActivity() throws Exception {
+    public void onFinish_shouldActuallyCallFinish() throws Exception {
+        initializeSubjectWithMockViewController();
 
-    }
-
-    @Test
-    public void videoCompleted_withShouldFinishFalse_shouldShowCloseButton_AndNotFinishActivity() throws Exception {
+        subject.onFinish();
 
+        assertThat(subject.isFinishing());
     }
 
     @Test
-    public void videoClicked_withShouldBroadcastInterstitialClicked() throws Exception {
+    public void onStartActivityForResult_shouldStartAnActivityWithRelevantRequestCodeAndExtras() throws Exception {
+        initializeSubjectWithMockViewController();
 
-    }
+        final Bundle expectedExtras = new Bundle();
+        expectedExtras.putString("hello", "goodbye");
 
-    @Ignore("pending")
-    @Test
-    public void whenVideoFinishes_shouldFinish() throws Exception {
-        VideoView videoView = findVideoView();
-        ShadowVideoView shadowVideoView = shadowOf(videoView);
+        subject.onStartActivityForResult(MoPubBrowser.class, 100, expectedExtras);
 
-        shadowVideoView.getOnCompletionListener().onCompletion(null);
+        final ShadowActivity.IntentForResult intentForResult = shadowOf(subject).getNextStartedActivityForResult();
 
-        assertThat(shadowOf(subject).isFinishing()).isTrue();
+        assertThat(intentForResult.intent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
+        assertThat(intentForResult.intent.getExtras()).isEqualTo(expectedExtras);
+        assertThat(intentForResult.requestCode).isEqualTo(100);
     }
 
-    @Ignore("pending")
     @Test
-    public void shouldSetOnErrorListener() throws Exception {
-        VideoView videoView = findVideoView();
-        ShadowVideoView shadowVideoView = shadowOf(videoView);
+    public void onStartActivityForResult_withNullClass_shouldNotStartAnActivity() throws Exception {
+        initializeSubjectWithMockViewController();
 
-        assertThat(shadowVideoView.getOnErrorListener()).isNotNull();
-        assertThat(shadowVideoView.getOnErrorListener()).isInstanceOf(MediaPlayer.OnErrorListener.class);
-    }
+        subject.onStartActivityForResult(null, 100, new Bundle());
 
-    @Ignore("pending")
-    @Test
-    public void whenOnErrorListenerIsCalled_shouldLogOneErrorMessage() throws Exception {
-//        VideoView videoView = findVideoView();
-//        ShadowVideoView shadowVideoView = shadowOf(videoView);
-//
-//        shadowVideoView.getOnErrorListener().onError(null, MediaPlayer.MEDIA_ERROR_UNKNOWN, MediaPlayer.MEDIA_ERROR_SERVER_DIED);
-//        assertThat(isOneErrorLogged()).isTrue();
+        final ShadowActivity.IntentForResult intentForResult = shadowOf(subject).getNextStartedActivityForResult();
+        assertThat(intentForResult).isNull();
     }
 
-    @Ignore("pending")
-    @Test
-    public void whenOnErrorListenerIsCalled_shouldFireErrorEvent() throws Exception {
-//        MraidVideoPlayerActivity.startMraid(new Activity(), "http://video");
-//        VideoView videoView = findVideoView();
-//        ShadowVideoView shadowVideoView = shadowOf(videoView);
-//
-//        reset(mraidView);
-//        shadowVideoView.getOnErrorListener().onError(null, MediaPlayer.MEDIA_ERROR_UNKNOWN, MediaPlayer.MEDIA_ERROR_SERVER_DIED);
-//        Mockito.verify(mraidView).fireErrorEvent(eq(PLAY_VIDEO), any(String.class));
-    }
+    private void initializeSubjectForMraid() {
+        intent.putExtra(BaseVideoPlayerActivity.VIDEO_CLASS_EXTRAS_KEY, "mraid");
 
-    private void setUpMraidSubject() {
-        subject = buildActivity(MraidVideoPlayerActivity.class)
-                .withIntent(MraidVideoPlayerActivity.createIntentMraid(new Activity(), videoUrl, adConfiguration))
+        subject = Robolectric.buildActivity(MraidVideoPlayerActivity.class)
+                .withIntent(intent)
                 .create()
                 .get();
     }
 
-    private void setUpVastSubject() {
-        subject = buildActivity(MraidVideoPlayerActivity.class)
-                .withIntent(MraidVideoPlayerActivity.createIntentVast(new Activity(),
-                        videoUrl,
-                        videoStartTrackers,
-                        videoFirstQuartileTrackers,
-                        videoMidpointTrackers,
-                        videoThirdQuartileTrackers,
-                        videoCompleteTrackers,
-                        impressionTrackers,
-                        clickThroughUrl,
-                        clickThroughTrackers,
-                        adConfiguration))
+    private void initializeSubjectForVast() {
+        intent.putExtra(BaseVideoPlayerActivity.VIDEO_CLASS_EXTRAS_KEY, "vast");
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("video_path");
+        intent.putExtra(VastVideoViewController.VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+
+        subject = Robolectric.buildActivity(MraidVideoPlayerActivity.class)
+                .withIntent(intent)
                 .create()
                 .get();
     }
 
-    private boolean isOneErrorLogged() {
-        List<ShadowLog.LogItem> logs = ShadowLog.getLogsForTag("VideoPlayerActivity");
-        if(logs == null || logs.size() < 1){
-            return false;
-        }
-        return logs.get(0).msg.startsWith("Error:");
-    }
-
-    private VideoView findVideoView() {
-        ViewGroup parentView = (ViewGroup) subject.findViewById(android.R.id.content);
-        return findVideoView(parentView);
-    }
+    private void initializeSubjectWithMockViewController() {
+        initializeSubjectForMraid();
 
-    // @phil, why did you write this? It looks like way more than we need.
-    // phil: it came to me in a vision. Besides now we can mess with the guts of this thing and still always be able to get the VideoView
-    private VideoView findVideoView(ViewGroup parentView) {
-        for (int index = 0; index < parentView.getChildCount(); index++) {
-            View childView = parentView.getChildAt(index);
-            if (childView instanceof VideoView) {
-                return (VideoView) childView;
-            }
-            if (childView instanceof ViewGroup) {
-                return findVideoView((ViewGroup) childView);
-            }
-        }
-
-        return null;
+        subject.setBaseVideoViewController(baseVideoViewController);
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoViewControllerTest.java
new file mode 100644
index 00000000..8013a514
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoViewControllerTest.java
@@ -0,0 +1,193 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.widget.ImageButton;
+
+import com.mopub.mobileads.test.support.SdkTestRunner;
+
+import org.apache.http.HttpRequest;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.shadows.ShadowImageButton;
+import org.robolectric.shadows.ShadowLocalBroadcastManager;
+import org.robolectric.shadows.ShadowVideoView;
+import org.robolectric.tester.org.apache.http.RequestMatcher;
+import org.robolectric.tester.org.apache.http.TestHttpResponse;
+
+import static android.view.View.GONE;
+import static android.view.View.VISIBLE;
+import static com.mopub.mobileads.BaseVideoPlayerActivity.VIDEO_URL;
+import static com.mopub.mobileads.BaseVideoViewController.BaseVideoViewControllerListener;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+import static org.robolectric.Robolectric.shadowOf;
+
+@RunWith(SdkTestRunner.class)
+public class MraidVideoViewControllerTest {
+    private Context context;
+    private Bundle bundle;
+    private long testBroadcastIdentifier;
+    private MraidVideoViewController subject;
+    private BaseVideoViewControllerListener baseVideoViewControllerListener;
+    private EventForwardingBroadcastReceiver broadcastReceiver;
+
+    @Before
+    public void setUp() throws Exception {
+        context = new Activity();
+        bundle = new Bundle();
+        testBroadcastIdentifier = 1111;
+        broadcastReceiver = mock(EventForwardingBroadcastReceiver.class);
+        baseVideoViewControllerListener = mock(BaseVideoViewControllerListener.class);
+
+        bundle.putString(VIDEO_URL, "http://video_url");
+
+        Robolectric.getUiThreadScheduler().pause();
+        Robolectric.getBackgroundScheduler().pause();
+
+        Robolectric.addHttpResponseRule(new RequestMatcher() {
+            @Override
+            public boolean matches(HttpRequest request) {
+                return true;
+            }
+        }, new TestHttpResponse(200, "body"));
+
+        ShadowLocalBroadcastManager.getInstance(context).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+    }
+
+    @After
+    public void tearDown() throws Exception {
+        Robolectric.getUiThreadScheduler().reset();
+        Robolectric.getBackgroundScheduler().reset();
+        Robolectric.clearPendingHttpResponses();
+
+        ShadowLocalBroadcastManager.getInstance(context).unregisterReceiver(broadcastReceiver);
+    }
+
+    @Test
+    public void constructor_shouldSetListenersAndVideoPath() throws Exception {
+        initializeSubject();
+        ShadowVideoView shadowSubject = shadowOf(subject.getVideoView());
+
+        assertThat(shadowSubject.getOnCompletionListener()).isNotNull();
+        assertThat(shadowSubject.getOnErrorListener()).isNotNull();
+
+        assertThat(shadowSubject.getVideoPath()).isEqualTo("http://video_url");
+        assertThat(subject.getVideoView().hasFocus()).isTrue();
+    }
+    
+    @Test
+    public void onCreate_shouldCreateAndHideCloseButton() throws Exception {
+        initializeSubject();
+        subject.onCreate();
+
+        ImageButton closeButton = getCloseButton();
+
+        assertThat(closeButton).isNotNull();
+        assertThat(getShadowImageButton(closeButton).getOnClickListener()).isNotNull();
+        assertThat(closeButton.getVisibility()).isEqualTo(GONE);
+    }
+
+    @Test
+    public void backButtonEnabled_shouldReturnTrue() throws Exception {
+        initializeSubject();
+
+        assertThat(subject.backButtonEnabled()).isTrue();
+    }
+
+    @Test
+    public void closeButton_onClick_shouldCallBaseVideoControllerListenerOnFinish() throws Exception {
+        initializeSubject();
+        subject.onCreate();
+
+        ImageButton closeButton = getCloseButton();
+
+        getShadowImageButton(closeButton).getOnClickListener().onClick(null);
+        verify(baseVideoViewControllerListener).onFinish();
+    }
+
+    @Test
+    public void onCompletionListener_shouldCallBaseVideoViewControllerListenerOnFinish() throws Exception {
+        initializeSubject();
+        subject.onCreate();
+
+        getShadowVideoView().getOnCompletionListener().onCompletion(null);
+
+        verify(baseVideoViewControllerListener).onFinish();
+    }
+
+    @Test
+    public void onCompletionListener_shouldShowCloseButton() throws Exception {
+        initializeSubject();
+        subject.onCreate();
+
+        getShadowVideoView().getOnCompletionListener().onCompletion(null);
+
+        assertThat(getCloseButton().getVisibility()).isEqualTo(VISIBLE);
+    }
+
+    @Test
+    public void onCompletionListener_withNullBaseVideoViewControllerListener_shouldNotCallOnFinish() throws Exception {
+    }
+
+    @Test
+    public void onErrorListener_shouldReturnFalseAndNotCallBaseVideoControllerListenerOnFinish() throws Exception {
+        initializeSubject();
+        subject.onCreate();
+
+        assertThat(getShadowVideoView().getOnErrorListener().onError(null, 0, 0)).isEqualTo(false);
+
+        verify(baseVideoViewControllerListener, never()).onFinish();
+    }
+
+    @Test
+    public void onErrorListener_shouldShowCloseButton() throws Exception {
+        initializeSubject();
+        subject.onCreate();
+
+        assertThat(getShadowVideoView().getOnErrorListener().onError(null, 0, 0)).isEqualTo(false);
+
+        assertThat(getCloseButton().getVisibility()).isEqualTo(VISIBLE);
+    }
+
+    @Test
+    public void onErrorListener_shouldBroadcastInterstitialError() throws Exception {
+        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_FAIL, testBroadcastIdentifier);
+
+        initializeSubject();
+        subject.onCreate();
+
+        assertThat(getShadowVideoView().getOnErrorListener().onError(null, 0, 0)).isEqualTo(false);
+        Robolectric.getUiThreadScheduler().unPause();
+
+        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
+    }
+
+    private void initializeSubject() {
+        subject = new MraidVideoViewController(context, bundle, testBroadcastIdentifier, baseVideoViewControllerListener);
+    }
+
+    private ShadowVideoView getShadowVideoView() {
+        return shadowOf(subject.getVideoView());
+    }
+
+    protected ImageButton getCloseButton() {
+        return (ImageButton) subject.getLayout().getChildAt(1);
+    }
+
+    private ShadowImageButton getShadowImageButton(ImageButton imageButton) {
+        return (ShadowImageButton) shadowOf(imageButton);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoViewTest.java
deleted file mode 100644
index 2d4521bd..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoViewTest.java
+++ /dev/null
@@ -1,116 +0,0 @@
-/*
- * Copyright (c) 2010-2013, MoPub Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *
- *  Redistributions of source code must retain the above copyright
- *   notice, this list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright
- *   notice, this list of conditions and the following disclaimer in the
- *   documentation and/or other materials provided with the distribution.
- *
- *  Neither the name of 'MoPub Inc.' nor the names of its contributors
- *   may be used to endorse or promote products derived from this software
- *   without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.shadows.ShadowVideoView;
-
-import static com.mopub.mobileads.MraidVideoPlayerActivity.VIDEO_URL;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class MraidVideoViewTest {
-    private MraidVideoView subject;
-    private Context context;
-    private Intent intent;
-    private BaseVideoView.BaseVideoViewListener baseVideoViewListener;
-
-    @Before
-    public void setUp() throws Exception {
-        context = new Activity();
-        intent = mock(Intent.class);
-        stub(intent.getStringExtra(VIDEO_URL)).toReturn("videoUrl");
-        baseVideoViewListener = mock(BaseVideoView.BaseVideoViewListener.class);
-
-        subject = new MraidVideoView(context, intent, baseVideoViewListener);
-    }
-
-    @Test
-    public void constructor_shouldSetListenersAndVideoPath() throws Exception {
-        ShadowVideoView shadowSubject = shadowOf(subject);
-
-        assertThat(shadowSubject.getOnCompletionListener()).isNotNull();
-        assertThat(shadowSubject.getOnErrorListener()).isNotNull();
-        assertThat(shadowSubject.getVideoPath()).isEqualTo("videoUrl");
-    }
-
-    @Test
-    public void onCompletionListener_shouldCallBaseVideoViewVideoCompleted() throws Exception {
-        ShadowVideoView shadowSubject = shadowOf(subject);
-
-        shadowSubject.getOnCompletionListener().onCompletion(null);
-
-        verify(baseVideoViewListener).videoCompleted(eq(true));
-    }
-
-    @Test
-    public void onCompletion_withNullBaseVideoViewListener_shouldNotBlowUp() throws Exception {
-        subject = new MraidVideoView(context, intent, null);
-        ShadowVideoView shadowSubject = shadowOf(subject);
-
-        shadowSubject.getOnCompletionListener().onCompletion(null);
-
-        // pass
-    }
-
-    @Test
-    public void onErrorListener_shouldCallBaseVideoViewVideoErrorAndReturnFalse() throws Exception {
-        ShadowVideoView shadowSubject = shadowOf(subject);
-
-        boolean result = shadowSubject.getOnErrorListener().onError(null, 0, 0);
-
-        verify(baseVideoViewListener).videoError(false);
-        assertThat(result).isFalse();
-    }
-
-    @Test
-    public void onError_withNullBaseVideoViewListener_shouldNotBlowUp() throws Exception {
-        subject = new MraidVideoView(context, intent, null);
-        ShadowVideoView shadowSubject = shadowOf(subject);
-
-        shadowSubject.getOnErrorListener().onError(null, 0, 0);
-
-        // pass
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java
index 436ab6f7..44f232f1 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java
@@ -1,68 +1,74 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
-import android.net.Uri;
 
-import com.mopub.common.util.Streams;
-import com.mopub.common.util.Utils;
+import com.mopub.common.CacheService;
+import com.mopub.common.CacheServiceTest;
 import com.mopub.mobileads.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.StreamUtils;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 
 import org.junit.After;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
+import org.robolectric.tester.org.apache.http.TestHttpResponse;
 
-import java.io.*;
+import java.util.Random;
+import java.util.concurrent.Semaphore;
 
-import static com.mopub.mobileads.VastVideoDownloadTask.OnDownloadCompleteListener;
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.junit.Assert.fail;
+import static org.mockito.Matchers.anyBoolean;
+import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
 public class VastVideoDownloadTaskTest {
-    private OnDownloadCompleteListener onDownloadCompleteListener;
-    private DiskLruCache diskLruCache;
+    private VastVideoDownloadTask.VastVideoDownloadTaskListener mVastVideoDownloadTaskListener;
     private VastVideoDownloadTask subject;
     private String videoUrl;
     private TestHttpResponseWithHeaders response;
+    private Semaphore semaphore;
 
     @Before
     public void setUp() throws Exception {
-        onDownloadCompleteListener = mock(OnDownloadCompleteListener.class);
         Activity context = new Activity();
-        diskLruCache = new DiskLruCache(context, "test_cache_directory", 1000);
+        CacheService.initializeDiskCache(context);
 
         videoUrl = "http://www.video.com";
         response = new TestHttpResponseWithHeaders(200, "responseBody");
         Robolectric.addPendingHttpResponse(response);
 
-        subject = new VastVideoDownloadTask(onDownloadCompleteListener, diskLruCache);
+        semaphore = new Semaphore(0);
+        mVastVideoDownloadTaskListener = mock(VastVideoDownloadTask.VastVideoDownloadTaskListener.class);
+        doAnswer(new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
+                semaphore.release();
+                return null;
+            }
+        }).when(mVastVideoDownloadTaskListener).onComplete(anyBoolean());
+
+        subject = new VastVideoDownloadTask(mVastVideoDownloadTaskListener);
     }
 
     @After
     public void tearDown() throws Exception {
-        diskLruCache.evictAll();
+        CacheService.clearAndNullCaches();
     }
 
     @Test
     public void execute_shouldAddToCacheAndSignalDownloadSuccess() throws Exception {
         subject.execute(videoUrl);
 
-        Uri uri = diskLruCache.getUri(videoUrl);
-        File file = new File(uri.toString());
-
-        assertThat(file.exists()).isTrue();
-        assertThat(file.length()).isEqualTo("responseBody".length());
+        semaphore.acquire();
+        verify(mVastVideoDownloadTaskListener).onComplete(true);
 
-        verify(onDownloadCompleteListener).onDownloadSuccess();
-        verify(onDownloadCompleteListener, never()).onDownloadFailed();
+        final byte[] data = CacheService.getFromDiskCache(videoUrl);
+        assertThat(data).isEqualTo("responseBody".getBytes());
     }
 
     @Test
@@ -70,165 +76,65 @@ public void execute_withMultipleUrls_shouldParseTheFirstOne() throws Exception {
         String ignoredUrl = "ignored";
         subject.execute(videoUrl, ignoredUrl);
 
-        Uri uri = diskLruCache.getUri(videoUrl);
-        File expectedFile = new File(uri.toString());
-        Uri ignoredUri = diskLruCache.getUri(ignoredUrl);
+        semaphore.acquire();
+        verify(mVastVideoDownloadTaskListener).onComplete(true);
 
-        assertThat(expectedFile.exists()).isTrue();
-        assertThat(expectedFile.length()).isEqualTo("responseBody".length());
-        assertThat(ignoredUri).isNull();
-
-        verify(onDownloadCompleteListener).onDownloadSuccess();
-        verify(onDownloadCompleteListener, never()).onDownloadFailed();
+        assertThat(CacheService.getFromDiskCache(videoUrl)).isEqualTo("responseBody".getBytes());
+        assertThat(CacheService.getFromDiskCache(ignoredUrl)).isNull();
     }
 
     @Test
     public void execute_whenUrlArrayIsNull_shouldSignalDownloadFailed() throws Exception {
         subject.execute((String) null);
 
-        verify(onDownloadCompleteListener).onDownloadFailed();
-        verify(onDownloadCompleteListener, never()).onDownloadSuccess();
+        semaphore.acquire();
+        verify(mVastVideoDownloadTaskListener).onComplete(false);
     }
 
     @Test
     public void execute_whenFirstElementOfUrlArrayIsNull_shouldSignalDownloadFailed() throws Exception {
         subject.execute(null, "ignored");
 
-        verify(onDownloadCompleteListener).onDownloadFailed();
-        verify(onDownloadCompleteListener, never()).onDownloadSuccess();
-    }
-
-    @Test
-    public void onPostExecute_whenOnDownloadCompleteListenerIsNull_shouldNotBlowUp() throws Exception {
-        subject = new VastVideoDownloadTask(null, diskLruCache);
-
-        subject.onPostExecute(true);
-        subject.onPostExecute(false);
-
-        // pass
-    }
-
-    @Test
-    public void connectToUrl_shouldReturnInputStreamFromHttpConnection() throws Exception {
-        InputStream result = subject.connectToUrl(videoUrl);
-
-        assertThat(inputStreamToString(result)).isEqualTo("responseBody");
-    }
-
-    @Test
-    public void connectToUrl_whenVideoUrlIsNull_shouldThrowIOException() throws Exception {
-        try {
-            subject.connectToUrl(null);
-            fail("Expected IOException due to null videoUrl");
-        } catch (IOException exception) {
-            // pass
-        }
-    }
-
-    @Test
-    public void copyInputStream_withLessThan25MB_shouldCreateFile() throws Exception {
-        InputStream inputStream = StreamUtils.createByteArrayInputStream(25 * 1000 * 1000 - 1);
-
-        File result = subject.copyInputStreamToTempFile(inputStream);
-
-        assertThat(result.exists());
-        assertThat(result.isFile());
-        assertThat(result.getName()).matches("mopub-vast\\d+\\.tmp");
-        assertThat(result.getParentFile()).isEqualTo(diskLruCache.getCacheDirectory());
-        assertThat(result.length()).isEqualTo(25 * 1000 * 1000 - 1);
-
-        result.delete();
+        semaphore.acquire();
+        verify(mVastVideoDownloadTaskListener).onComplete(false);
     }
 
     @Test
-    public void copyInputStream_withMoreThan25MB_shouldThrowIOException() throws Exception {
-        InputStream inputStream = StreamUtils.createByteArrayInputStream(25 * 1000 * 1000 + 1);
-
-        try {
-            subject.copyInputStreamToTempFile(inputStream);
-            fail();
-        } catch (IOException exception) {
-            // pass
-        }
-    }
+    public void execute_whenDiskCacheIsNotInitialized_shouldNotPutDataInCacheAndShouldSignalDownloadFailed() throws Exception {
+        CacheService.clearAndNullCaches();
+        CacheServiceTest.assertDiskCacheIsUninitialized();
+        subject.execute(videoUrl);
 
-    @Test
-    public void copyInputStreamToTempFile_whenInputStreamIsNull_shouldThrowIOExpcetion() throws Exception {
-        try {
-            subject.copyInputStreamToTempFile(null);
-            fail("Expected IOException due to null InputStream");
-        } catch (IOException exception) {
-            // pass
-        }
+        semaphore.acquire();
+        CacheServiceTest.assertDiskCacheIsUninitialized();
+        verify(mVastVideoDownloadTaskListener).onComplete(false);
     }
 
     @Test
-    public void copyTempFileIntoCache_shouldReturnTrueOnSuccess() throws Exception {
-        ByteArrayInputStream byteArrayInputStream = StreamUtils.createByteArrayInputStream(20);
-
-        File tempFile = File.createTempFile("something", null, diskLruCache.getCacheDirectory());
-        FileOutputStream fileOutputStream = new FileOutputStream(tempFile);
-        fileOutputStream.write(byteArrayInputStream.read());
-        Streams.closeStream(fileOutputStream);
-
-        boolean result = subject.copyTempFileIntoCache(videoUrl, tempFile);
-
-        assertThat(result).isTrue();
-        assertThat(diskLruCache.getUri(videoUrl)).isNotNull();
+    public void execute_whenResponseContentLengthIsLargerThan25MiB_shouldNotPutDataInCacheAndShouldSignalDownloadFailed() throws Exception {
+        Robolectric.clearPendingHttpResponses();
+        final String randomString = createRandomString(25 * 1024 * 1024 + 1);
+        Robolectric.addPendingHttpResponse(new TestHttpResponse(200, randomString));
+        subject.execute(videoUrl);
 
-        tempFile.delete();
+        semaphore.acquire();
+        CacheServiceTest.assertDiskCacheIsEmpty();
+        verify(mVastVideoDownloadTaskListener).onComplete(false);
     }
 
-    @Ignore("pending")
     @Test
-    public void copyTempFileIntoCache_whenUnableToPutInCache_shouldReturnFalse() throws Exception {
-        ByteArrayInputStream byteArrayInputStream = StreamUtils.createByteArrayInputStream(20);
-
-//        File tempFile = File.createTempFile("something", null, diskLruCache.getCacheDirectory());
-//        new FileOutputStream(tempFile).write(byteArrayInputStream.read());
-
-//        File tempFile = new File("/tmp/blah.mp4");
-//        tempFile.createNewFile();
-
-        File tempFile = File.createTempFile("mopub-vast", null, diskLruCache.getCacheDirectory());
-
-        diskLruCache.put(videoUrl, tempFile);
-        diskLruCache.put(Utils.sha1(videoUrl), tempFile);
-        diskLruCache.put(Utils.sha1(Utils.sha1(videoUrl)), tempFile);
-
-        boolean result = subject.copyTempFileIntoCache(videoUrl, tempFile);
-        assertThat(result).isFalse();
+    public void onPostExecute_whenOnDownloadCompleteListenerIsNull_shouldNotBlowUp() throws Exception {
+        subject = new VastVideoDownloadTask(null);
 
-        tempFile.delete();
-    }
+        subject.onPostExecute(true);
+        subject.onPostExecute(false);
 
-    @Test
-    public void copyTempFileIntoCache_whenFileNotFound_shouldThrowFileNotFound() throws Exception {
-        try {
-            subject.copyTempFileIntoCache(videoUrl, new File(""));
-            fail("Expected FileNotFound exception");
-        } catch (FileNotFoundException exception) {
-            // pass
-        }
+        // pass
     }
 
-    private String inputStreamToString(InputStream inputStream) {
-        if (inputStream == null) {
-            return null;
-        }
-
-        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
-        byte[] buffer = new byte[65536];
-        int read;
-
-        try {
-            while ((read = inputStream.read(buffer, 0, buffer.length)) != -1) {
-                byteArrayOutputStream.write(buffer, 0, read);
-            }
-        } catch (IOException exception) {
-            return null;
-        }
-
-        return new String(byteArrayOutputStream.toByteArray());
+    private static String createRandomString(int size) {
+        byte[] buffer = new byte[size];
+        new Random().nextBytes(buffer);
+        return new String(buffer);
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
index ee07264d..a42362ae 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
@@ -1,34 +1,34 @@
 /*
- * Copyright (c) 2010-2013, MoPub Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *
- *  Redistributions of source code must retain the above copyright
- *   notice, this list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright
- *   notice, this list of conditions and the following disclaimer in the
- *   documentation and/or other materials provided with the distribution.
- *
- *  Neither the name of 'MoPub Inc.' nor the names of its contributors
- *   may be used to endorse or promote products derived from this software
- *   without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
+* Copyright (c) 2010-2013, MoPub Inc.
+* All rights reserved.
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions are
+* met:
+*
+*  Redistributions of source code must retain the above copyright
+*   notice, this list of conditions and the following disclaimer.
+*
+*  Redistributions in binary form must reproduce the above copyright
+*   notice, this list of conditions and the following disclaimer in the
+*   documentation and/or other materials provided with the distribution.
+*
+*  Neither the name of 'MoPub Inc.' nor the names of its contributors
+*   may be used to endorse or promote products derived from this software
+*   without specific prior written permission.
+*
+* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+* PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
 
 package com.mopub.mobileads;
 
@@ -36,11 +36,17 @@
 import android.content.Context;
 import android.content.Intent;
 import android.net.Uri;
+
+import com.mopub.common.CacheService;
+import com.mopub.common.CacheServiceTest;
 import com.mopub.mobileads.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.mobileads.test.support.TestVastManagerFactory;
 import com.mopub.mobileads.test.support.TestVastVideoDownloadTaskFactory;
+import com.mopub.mobileads.util.vast.VastCompanionAd;
 import com.mopub.mobileads.util.vast.VastManager;
+import com.mopub.mobileads.util.vast.VastVideoConfiguration;
+
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -48,8 +54,9 @@
 import org.robolectric.Robolectric;
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
 
-import java.io.*;
-import java.util.*;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
 
 import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
 import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
@@ -58,20 +65,10 @@
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static com.mopub.mobileads.MoPubErrorCode.VIDEO_DOWNLOAD_ERROR;
-import static com.mopub.mobileads.VastVideoView.VIDEO_CLICK_THROUGH_TRACKERS;
-import static com.mopub.mobileads.VastVideoView.VIDEO_CLICK_THROUGH_URL;
-import static com.mopub.mobileads.VastVideoView.VIDEO_COMPLETE_TRACKERS;
-import static com.mopub.mobileads.VastVideoView.VIDEO_FIRST_QUARTER_TRACKERS;
-import static com.mopub.mobileads.VastVideoView.VIDEO_IMPRESSION_TRACKERS;
-import static com.mopub.mobileads.VastVideoView.VIDEO_MID_POINT_TRACKERS;
-import static com.mopub.mobileads.VastVideoView.VIDEO_START_TRACKERS;
-import static com.mopub.mobileads.VastVideoView.VIDEO_THIRD_QUARTER_TRACKERS;
 import static com.mopub.mobileads.util.vast.VastManager.VastManagerListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.anyVararg;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
@@ -92,6 +89,7 @@
     private String videoUrl;
     private VastVideoDownloadTask vastVideoDownloadTask;
     private long broadcastIdentifier;
+    private AdConfiguration adConfiguration;
 
     @Before
     public void setUp() throws Exception {
@@ -111,7 +109,7 @@ public void setUp() throws Exception {
         response = new TestHttpResponseWithHeaders(200, expectedResponse);
 
         broadcastIdentifier = 2222;
-        final AdConfiguration adConfiguration = mock(AdConfiguration.class, withSettings().serializable());
+        adConfiguration = mock(AdConfiguration.class, withSettings().serializable());
         stub(adConfiguration.getBroadcastIdentifier()).toReturn(broadcastIdentifier);
         localExtras.put(AD_CONFIGURATION_KEY, adConfiguration);
     }
@@ -119,6 +117,7 @@ public void setUp() throws Exception {
     @After
     public void tearDown() throws Exception {
         reset(vastVideoDownloadTask);
+        CacheService.clearAndNullCaches();
     }
 
     @Test
@@ -128,7 +127,7 @@ public void preRenderHtml_whenCreatingVideoCache_butItHasInitializationErrors_sh
         subject.preRenderHtml(customEventInterstitialListener);
 
         verify(customEventInterstitialListener).onInterstitialFailed(eq(MoPubErrorCode.VIDEO_CACHE_ERROR));
-        verify(vastManager, never()).processVast(anyString(), any(VastManagerListener.class));
+        verify(vastManager, never()).prepareVastVideoConfiguration(anyString(), any(VastManagerListener.class));
     }
 
     @Test
@@ -139,22 +138,19 @@ public void loadInterstitial_shouldParseHtmlResponseBodyServerExtra() throws Exc
     }
 
     @Test
-    public void loadInterstitial_shouldInitializeVideoCache() throws Exception {
+    public void loadInterstitial_shouldInitializeDiskCache() throws Exception {
         Robolectric.addPendingHttpResponse(response);
 
+        CacheServiceTest.assertDiskCacheIsUninitialized();
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-        DiskLruCache videoCache = ((VastVideoInterstitial) subject).getVideoCache();
-        assertThat(videoCache).isNotNull();
-        assertThat(videoCache.getCacheDirectory().getName()).isEqualTo("mopub_vast_video_cache");
-        assertThat(videoCache.maxSize()).isEqualTo(100 * 1000 * 1000);
+        CacheServiceTest.assertDiskCacheIsEmpty();
     }
 
     @Test
     public void loadInterstitial_shouldCreateVastManagerAndProcessVast() throws Exception {
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
 
-        verify(vastManager).processVast(eq(expectedResponse), eq((VastVideoInterstitial) subject));
+        verify(vastManager).prepareVastVideoConfiguration(eq(expectedResponse), eq((VastVideoInterstitial) subject));
     }
 
     @Test
@@ -164,7 +160,7 @@ public void loadInterstitial_whenServerExtrasDoesNotContainResponse_shouldSignal
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
 
         verify(customEventInterstitialListener).onInterstitialFailed(NETWORK_INVALID_STATE);
-        verify(vastManager, never()).processVast(anyString(), any(VastManagerListener.class));
+        verify(vastManager, never()).prepareVastVideoConfiguration(anyString(), any(VastManagerListener.class));
     }
 
     @Test
@@ -184,35 +180,28 @@ public void loadInterstitial_shouldConnectListenerToBroadcastReceiver() throws E
 
     @Test
     public void showInterstitial_shouldStartVideoPlayerActivityWithAllValidTrackers() throws Exception {
-        stub(vastManager.getMediaFileUrl()).toReturn(videoUrl);
-
-        stub(vastManager.getVideoStartTrackers()).toReturn(Arrays.asList("start"));
-        stub(vastManager.getVideoFirstQuartileTrackers()).toReturn(Arrays.asList("first"));
-        stub(vastManager.getVideoMidpointTrackers()).toReturn(Arrays.asList("mid"));
-        stub(vastManager.getVideoThirdQuartileTrackers()).toReturn(Arrays.asList("third"));
-        stub(vastManager.getVideoCompleteTrackers()).toReturn(Arrays.asList("complete"));
-        stub(vastManager.getImpressionTrackers()).toReturn(Arrays.asList("imp"));
-        stub(vastManager.getClickThroughUrl()).toReturn("clickThrough");
-        stub(vastManager.getClickTrackers()).toReturn(Arrays.asList("click"));
+        VastCompanionAd vastCompanionAd = mock(VastCompanionAd.class, withSettings().serializable());
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setNetworkMediaFileUrl(videoUrl);
+        vastVideoConfiguration.addStartTrackers(Arrays.asList("start"));
+        vastVideoConfiguration.addFirstQuartileTrackers(Arrays.asList("first"));
+        vastVideoConfiguration.addMidpointTrackers(Arrays.asList("mid"));
+        vastVideoConfiguration.addThirdQuartileTrackers(Arrays.asList("third"));
+        vastVideoConfiguration.addCompleteTrackers(Arrays.asList("complete"));
+        vastVideoConfiguration.addImpressionTrackers(Arrays.asList("imp"));
+        vastVideoConfiguration.setClickThroughUrl("clickThrough");
+        vastVideoConfiguration.addClickTrackers(Arrays.asList("click"));
+        vastVideoConfiguration.setVastCompanionAd(vastCompanionAd);
 
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        ((VastVideoInterstitial) subject).onComplete(vastManager);
-        ((VastVideoInterstitial) subject).onDownloadSuccess();
+        ((VastVideoInterstitial) subject).onVastVideoConfigurationPrepared(vastVideoConfiguration);
 
         subject.showInterstitial();
-
-        Intent nextActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(nextActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MraidVideoPlayerActivity");
-        assertThat(nextActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-
-        assertThat(nextActivity.getStringArrayListExtra(VIDEO_START_TRACKERS).get(0)).isEqualTo("start");
-        assertThat(nextActivity.getStringArrayListExtra(VIDEO_FIRST_QUARTER_TRACKERS).get(0)).isEqualTo("first");
-        assertThat(nextActivity.getStringArrayListExtra(VIDEO_MID_POINT_TRACKERS).get(0)).isEqualTo("mid");
-        assertThat(nextActivity.getStringArrayListExtra(VIDEO_THIRD_QUARTER_TRACKERS).get(0)).isEqualTo("third");
-        assertThat(nextActivity.getStringArrayListExtra(VIDEO_COMPLETE_TRACKERS).get(0)).isEqualTo("complete");
-        assertThat(nextActivity.getStringArrayListExtra(VIDEO_IMPRESSION_TRACKERS).get(0)).isEqualTo("imp");
-        assertThat(nextActivity.getStringExtra(VIDEO_CLICK_THROUGH_URL)).isEqualTo("clickThrough");
-        assertThat(nextActivity.getStringArrayListExtra(VIDEO_CLICK_THROUGH_TRACKERS).get(0)).isEqualTo("click");
+        BaseVideoPlayerActivitiyTest.assertVastVideoPlayerActivityStarted(
+                MraidVideoPlayerActivity.class,
+                vastVideoConfiguration,
+                adConfiguration
+                );
     }
 
     @Test
@@ -252,46 +241,18 @@ public void onInvalidate_shouldDisconnectListenerToBroadcastReceiver() throws Ex
     }
 
     @Test
-    public void onComplete_whenVideoCacheHit_shouldCallOnDownloadSuccess() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-        stub(vastManager.getMediaFileUrl()).toReturn(videoUrl);
-        DiskLruCache videoCache = ((VastVideoInterstitial) subject).getVideoCache();
-        videoCache.putStream(videoUrl, new ByteArrayInputStream("some data".getBytes()));
-
-        ((VastVideoInterstitial) subject).onComplete(vastManager);
-
-        verify(customEventInterstitialListener).onInterstitialLoaded();
-        verify(vastVideoDownloadTask, never()).execute((String[])anyVararg());
-    }
-
-    @Test
-    public void onComplete_whenVideoCacheMiss_shouldStartVastVideoDownloadTask() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-        stub(vastManager.getMediaFileUrl()).toReturn(videoUrl);
-        DiskLruCache videoCache = ((VastVideoInterstitial) subject).getVideoCache();
-        videoCache.putStream("another_video_not_in_cache", new ByteArrayInputStream("some data".getBytes()));
-
-        ((VastVideoInterstitial) subject).onComplete(vastManager);
-
-        verify(vastVideoDownloadTask).execute(eq(videoUrl));
-        verify(customEventInterstitialListener, never()).onInterstitialLoaded();
-    }
-
-    @Test
-    public void onDownloadSuccess_shouldSignalOnInterstitialLoaded() throws Exception {
+    public void onVastVideoConfigurationPrepared_withVastVideoConfiguration_shouldSignalOnInterstitialLoaded() throws Exception {
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        ((VastVideoInterstitial) subject).onDownloadSuccess();
+        ((VastVideoInterstitial) subject).onVastVideoConfigurationPrepared(mock(VastVideoConfiguration.class));
 
         verify(customEventInterstitialListener).onInterstitialLoaded();
     }
 
     @Test
-    public void onDownloadFailed_shouldSignalOnInterstitialFailed() throws Exception {
+    public void onVastVideoConfigurationPrepared_withNullVastVideoConfiguration_shouldSignalOnInterstitialFailed() throws Exception {
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        ((VastVideoInterstitial) subject).onDownloadFailed();
+        ((VastVideoInterstitial) subject).onVastVideoConfigurationPrepared(null);
 
-        verify(customEventInterstitialListener).onInterstitialFailed(eq(VIDEO_DOWNLOAD_ERROR));
+        verify(customEventInterstitialListener).onInterstitialFailed(MoPubErrorCode.VIDEO_DOWNLOAD_ERROR);
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoPlayerActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoPlayerActivityTest.java
deleted file mode 100644
index 189af46e..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoPlayerActivityTest.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * Copyright (c) 2010-2013, MoPub Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *
- *  Redistributions of source code must retain the above copyright
- *   notice, this list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright
- *   notice, this list of conditions and the following disclaimer in the
- *   documentation and/or other materials provided with the distribution.
- *
- *  Neither the name of 'MoPub Inc.' nor the names of its contributors
- *   may be used to endorse or promote products derived from this software
- *   without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package com.mopub.mobileads;
-
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-@RunWith(SdkTestRunner.class)
-public class VastVideoPlayerActivityTest {
-
-    @Before
-    public void setUp() throws Exception {
-
-    }
-
-    @Test
-    public void should() throws Exception {
-
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoToolbarTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoToolbarTest.java
new file mode 100644
index 00000000..0704c19d
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoToolbarTest.java
@@ -0,0 +1,186 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.view.View;
+import android.widget.TextView;
+
+import com.mopub.mobileads.resource.TextDrawable;
+import com.mopub.mobileads.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
+import static org.robolectric.Robolectric.shadowOf;
+
+@RunWith(SdkTestRunner.class)
+public class VastVideoToolbarTest {
+    private Context context;
+    private VastVideoToolbar subject;
+    private View.OnTouchListener onTouchListener;
+
+    @Before
+    public void setUp() throws Exception {
+        context = new Activity();
+        subject = new VastVideoToolbar(context);
+
+        onTouchListener = mock(View.OnTouchListener.class);
+    }
+
+    @Test
+    public void constructor_shouldSetOnTouchListenerThatConsumesAllTouchEvents() throws Exception {
+        final View.OnTouchListener onTouchListener = shadowOf(subject).getOnTouchListener();
+
+        assertThat(onTouchListener).isNotNull();
+        assertThat(onTouchListener.onTouch(null, null)).isTrue();
+    }
+
+    @Test
+    public void constructor_shouldAddWidgetsToToolbar() throws Exception {
+        assertThat(subject.getChildCount()).isEqualTo(4);
+
+        assertThat(subject.getDurationWidget().getParent()).isEqualTo(subject);
+        assertThat(subject.getLearnMoreWidget().getParent()).isEqualTo(subject);
+        assertThat(subject.getCountdownWidget().getParent()).isEqualTo(subject);
+        assertThat(subject.getCloseButtonWidget().getParent()).isEqualTo(subject);
+    }
+    
+    @Test
+    public void constructor_shouldOnlyStartWithDurationWidgetsVisible() throws Exception {
+        assertThat(subject.getDurationWidget().getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.getLearnMoreWidget().getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(subject.getCountdownWidget().getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(subject.getCloseButtonWidget().getVisibility()).isEqualTo(View.GONE);
+    }
+
+    @Test
+    public void makeInteractable_shouldHideCountdownWidgetAndShowLearnMoreAndCloseButtonWidgets() throws Exception {
+        subject.makeInteractable();
+
+        assertThat(subject.getDurationWidget().getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.getLearnMoreWidget().getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.getCountdownWidget().getVisibility()).isEqualTo(View.GONE);
+        assertThat(subject.getCloseButtonWidget().getVisibility()).isEqualTo(View.VISIBLE);
+    }
+
+    @Test
+    public void setCloseButtonOnTouchListener_shouldPropagateToCloseButtonWidget() throws Exception {
+        subject.setCloseButtonOnTouchListener(onTouchListener);
+
+        assertThat(shadowOf(subject.getCloseButtonWidget()).getOnTouchListener()).isEqualTo(onTouchListener);
+    }
+
+    @Test
+    public void setLearnButtonOnTouchListener_shouldPropagateToLearnButtonWidget() throws Exception {
+        subject.setLearnMoreButtonOnTouchListener(onTouchListener);
+
+        assertThat(shadowOf(subject.getLearnMoreWidget()).getOnTouchListener()).isEqualTo(onTouchListener);
+    }
+
+    @Test
+    public void getDisplaySeconds_shouldReturnLongMillisecondsAsRoundedUpStringSeconds() throws Exception {
+        assertThat(subject.getDisplaySeconds(0)).isEqualTo("0");
+
+        assertThat(subject.getDisplaySeconds(1)).isEqualTo("1");
+        assertThat(subject.getDisplaySeconds(999)).isEqualTo("1");
+        assertThat(subject.getDisplaySeconds(1000)).isEqualTo("1");
+
+        assertThat(subject.getDisplaySeconds(1001)).isEqualTo("2");
+        assertThat(subject.getDisplaySeconds(100000)).isEqualTo("100");
+    }
+    
+    @Test
+    public void updateCountdownWidget_shouldUpdateTextDrawablesDisplayNumber() throws Exception {
+        final TextDrawable countdownImageSpy = spy(subject.getCountdownWidget().getImageViewDrawable());
+        subject.getCountdownWidget().setImageViewDrawable(countdownImageSpy);
+
+        subject.updateCountdownWidget(1002);
+
+        verify(countdownImageSpy).updateText("2");
+    }
+
+    @Test
+    public void updateCountdownWidget_shouldHideCloseButtonAndShowCountdown() throws Exception {
+        subject.getCloseButtonWidget().setVisibility(View.INVISIBLE);
+        subject.getCountdownWidget().setVisibility(View.INVISIBLE);
+
+        subject.updateCountdownWidget(1);
+
+        assertThat(subject.getCloseButtonWidget().getVisibility()).isEqualTo(View.GONE);
+        assertThat(subject.getCountdownWidget().getVisibility()).isEqualTo(View.VISIBLE);
+    }
+
+    @Test
+    public void updateCountdownWidget_whenRemainingTimeIsNegative_shouldNotModifyWidgetVisibility() throws Exception {
+        subject.getCloseButtonWidget().setVisibility(View.INVISIBLE);
+        subject.getCountdownWidget().setVisibility(View.INVISIBLE);
+
+        subject.updateCountdownWidget(-1);
+
+        assertThat(subject.getCloseButtonWidget().getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(subject.getCountdownWidget().getVisibility()).isEqualTo(View.INVISIBLE);
+    }
+
+    @Test
+    public void updateDurationWidget_shouldShowWhenVideoEnds() throws Exception {
+        final TextView durationWidgetTextView = getDurationWidgetTextView();
+
+        assertThat(durationWidgetTextView.getText()).isEqualTo("");
+
+        subject.updateDurationWidget(100000);
+
+        assertThat(durationWidgetTextView.getText()).isEqualTo("Ends in 100 seconds");
+
+        subject.updateDurationWidget(99000);
+
+        assertThat(durationWidgetTextView.getText()).isEqualTo("Ends in 99 seconds");
+    }
+
+    @Test
+    public void updateDurationWidget_whenBelowThresholdForHidingVideoDuration_shouldShowThanksForWatching() throws Exception {
+        final TextView durationWidgetTextView = getDurationWidgetTextView();
+
+        assertThat(durationWidgetTextView.getText()).isEqualTo("");
+
+        subject.updateDurationWidget(50000);
+
+        assertThat(durationWidgetTextView.getText()).isEqualTo("Ends in 50 seconds");
+
+        // 200ms of remaining video is the cut off for switching to "Thanks for watching"
+        subject.updateDurationWidget(200);
+
+        assertThat(durationWidgetTextView.getText()).isEqualTo("Ends in 1 seconds");
+
+        subject.updateDurationWidget(199);
+
+        assertThat(durationWidgetTextView.getText()).isEqualTo("Thanks for watching");
+    }
+
+    @Test
+    public void updateDurationWidget_whenRemainingTimeIsNegative_shouldDoNothing() throws Exception {
+        final TextView durationWidgetTextView = getDurationWidgetTextView();
+
+        assertThat(durationWidgetTextView.getText()).isEqualTo("");
+
+        subject.updateDurationWidget(-1);
+
+        assertThat(durationWidgetTextView.getText()).isEqualTo("");
+    }
+
+    private TextView getDurationWidgetTextView() {
+        final ToolbarWidget durationWidget = subject.getDurationWidget();
+        final int childCount = durationWidget.getChildCount();
+        for (int i = 0; i < childCount; i++) {
+            final View child = durationWidget.getChildAt(i);
+            if (child instanceof TextView) {
+                return (TextView) child;
+            }
+        }
+        return null;
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
new file mode 100644
index 00000000..2182fce4
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
@@ -0,0 +1,1123 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Color;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.GradientDrawable;
+import android.graphics.drawable.LayerDrawable;
+import android.media.MediaPlayer;
+import android.os.Build;
+import android.os.Bundle;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.VideoView;
+
+import com.mopub.common.MoPubBrowser;
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Drawables;
+import com.mopub.common.util.VersionCode;
+import com.mopub.mobileads.test.support.GestureUtils;
+import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.mobileads.util.vast.VastCompanionAd;
+import com.mopub.mobileads.util.vast.VastVideoConfiguration;
+
+import org.apache.http.HttpRequest;
+import org.apache.maven.artifact.ant.shaded.ReflectionUtils;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Ignore;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.robolectric.Robolectric;
+import org.robolectric.shadows.ShadowHandler;
+import org.robolectric.shadows.ShadowLocalBroadcastManager;
+import org.robolectric.shadows.ShadowVideoView;
+import org.robolectric.tester.org.apache.http.RequestMatcher;
+import org.robolectric.tester.org.apache.http.TestHttpResponse;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Arrays;
+
+import static android.media.MediaPlayer.OnPreparedListener;
+import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
+import static com.mopub.common.MoPubBrowser.DESTINATION_URL_KEY;
+import static com.mopub.common.util.test.support.CommonUtils.assertHttpRequestsMade;
+import static com.mopub.mobileads.BaseVideoViewController.BaseVideoViewControllerListener;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
+import static com.mopub.mobileads.VastVideoViewController.DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON;
+import static com.mopub.mobileads.VastVideoViewController.MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON;
+import static com.mopub.mobileads.VastVideoViewController.VAST_VIDEO_CONFIGURATION;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.verify;
+import static org.robolectric.Robolectric.shadowOf;
+
+@RunWith(SdkTestRunner.class)
+public class VastVideoViewControllerTest {
+    public static final int NETWORK_DELAY = 500;
+    private MediaPlayer mediaPlayer;
+    private Context context;
+    private Bundle bundle;
+    private long testBroadcastIdentifier;
+    private VastVideoViewController subject;
+    private BaseVideoViewControllerListener baseVideoViewControllerListener;
+    private EventForwardingBroadcastReceiver broadcastReceiver;
+    private int expectedBrowserRequestCode;
+
+    @Before
+    public void setUp() throws Exception {
+        mediaPlayer = mock(MediaPlayer.class);
+        context = new Activity();
+        bundle = new Bundle();
+        testBroadcastIdentifier = 1111;
+        broadcastReceiver = mock(EventForwardingBroadcastReceiver.class);
+        baseVideoViewControllerListener = mock(BaseVideoViewControllerListener.class);
+
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setNetworkMediaFileUrl("video_url");
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfiguration.addStartTrackers(Arrays.asList("start"));
+        vastVideoConfiguration.addFirstQuartileTrackers(Arrays.asList("first"));
+        vastVideoConfiguration.addMidpointTrackers(Arrays.asList("mid"));
+        vastVideoConfiguration.addThirdQuartileTrackers(Arrays.asList("third"));
+        vastVideoConfiguration.addCompleteTrackers(Arrays.asList("complete"));
+        vastVideoConfiguration.addImpressionTrackers(Arrays.asList("imp"));
+        vastVideoConfiguration.setClickThroughUrl("clickThrough");
+        vastVideoConfiguration.addClickTrackers(Arrays.asList("click_1", "click_2"));
+
+        VastCompanionAd vastCompanionAd = new VastCompanionAd(
+                300,
+                250,
+                "companion_image_url",
+                "companion_click_destination_url",
+                new ArrayList<String>(Arrays.asList("companion_click_tracking_url_1", "companion_click_tracking_url_2"))
+        );
+        vastVideoConfiguration.setVastCompanionAd(vastCompanionAd);
+
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+
+        expectedBrowserRequestCode = 1;
+
+        Robolectric.getUiThreadScheduler().pause();
+        Robolectric.getBackgroundScheduler().pause();
+        Robolectric.clearPendingHttpResponses();
+
+        Robolectric.addHttpResponseRule(new RequestMatcher() {
+            @Override
+            public boolean matches(HttpRequest request) {
+                return true;
+            }
+        }, new TestHttpResponse(200, "body"));
+
+        ShadowLocalBroadcastManager.getInstance(context).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+    }
+
+    @After
+    public void tearDown() throws Exception {
+        Robolectric.getUiThreadScheduler().reset();
+        Robolectric.getBackgroundScheduler().reset();
+        Robolectric.clearPendingHttpResponses();
+
+        ShadowLocalBroadcastManager.getInstance(context).unregisterReceiver(broadcastReceiver);
+    }
+
+    @Test
+    public void constructor_shouldPingImpressionTrackers() throws Exception {
+        // XXX this test needs to be at the top of the constructor tests since it checks for async
+        // http requests. If it's below any other constructor tests, there is a chance outstanding
+        // async requests will not run until this tests starts, thus polluting the http requests
+
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfiguration.addStartTrackers(Arrays.asList("start"));
+        vastVideoConfiguration.addImpressionTrackers(Arrays.asList("imp"));
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+
+        initializeSubject();
+
+        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getBackgroundScheduler().unPause();
+        Thread.sleep(NETWORK_DELAY);
+
+        assertHttpRequestsMade("imp");
+    }
+
+    @Test
+    public void constructor_shouldAddVastVideoToolbarToLayout() throws Exception {
+        initializeSubject();
+
+        VastVideoToolbar vastVideoToolbar = getVastVideoToolbar();
+        final ViewGroup.LayoutParams layoutParams = vastVideoToolbar.getLayoutParams();
+
+        assertThat(vastVideoToolbar.getParent()).isEqualTo(subject.getLayout());
+        assertThat(vastVideoToolbar.getVisibility()).isEqualTo(View.VISIBLE);
+
+        assertThat(layoutParams.width).isEqualTo(MATCH_PARENT);
+        assertThat(layoutParams.height).isEqualTo(Dips.dipsToIntPixels(44, context));
+    }
+
+    @Test
+    public void constructor_shouldSetVideoListenersAndVideoPath() throws Exception {
+        initializeSubject();
+        ShadowVideoView videoView = shadowOf(subject.getVideoView());
+
+        assertThat(videoView.getOnCompletionListener()).isNotNull();
+        assertThat(videoView.getOnErrorListener()).isNotNull();
+        assertThat(videoView.getOnTouchListener()).isNotNull();
+        assertThat(videoView.getOnPreparedListener()).isNotNull();
+
+        assertThat(videoView.getVideoPath()).isEqualTo("disk_video_path");
+        assertThat(subject.getVideoView().hasFocus()).isTrue();
+    }
+
+    @Test
+    public void constructor_shouldNotChangeCloseButtonDelay() throws Exception {
+        initializeSubject();
+
+        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
+    }
+
+    @Test
+    public void constructor_shouldAddThatchedBackgroundWithGradientToLayout() throws Exception {
+        initializeSubject();
+        ViewGroup viewGroup = subject.getLayout();
+        LayerDrawable layerDrawable = (LayerDrawable) viewGroup.getBackground();
+        assertThat(layerDrawable.getDrawable(0)).isEqualTo(Drawables.THATCHED_BACKGROUND.decodeImage(context));
+        assertThat(layerDrawable.getDrawable(1)).isEqualTo(
+                new GradientDrawable(
+                        GradientDrawable.Orientation.TOP_BOTTOM,
+                        new int[]{Color.argb(0, 0, 0, 0), Color.argb(255, 0, 0, 0)})
+        );
+    }
+    
+    @Test
+    public void constructor_withMissingVastVideoConfiguration_shouldThrowIllegalStateException() throws Exception {
+        bundle.clear();
+        try {
+            initializeSubject();
+            fail("VastVideoViewController didn't throw IllegalStateException");
+        } catch (IllegalStateException e) {
+            // pass
+        }
+    }
+
+    @Test
+    public void constructor_withNullVastVideoConfigurationDiskMediaFileUrl_shouldThrowIllegalStateException() throws Exception {
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, new VastVideoConfiguration());
+        try {
+            initializeSubject();
+            fail("VastVideoViewController didn't throw IllegalStateException");
+        } catch (IllegalStateException e) {
+            // pass
+        }
+    }
+
+    @Test
+    public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
+        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, testBroadcastIdentifier);
+
+        initializeSubject();
+
+        subject.onCreate();
+        Robolectric.getUiThreadScheduler().unPause();
+
+        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
+    }
+
+    @Test
+    public void onCreate_withCompanionAd_shouldDownloadCompanionAd() throws Exception {
+        initializeSubject();
+
+        final ImageView imageView = subject.getCompanionAdImageView();
+        assertThat(imageView.getDrawable()).isNull();
+
+        subject.onCreate();
+        Robolectric.getBackgroundScheduler().unPause();
+        Robolectric.getUiThreadScheduler().unPause();
+        Thread.sleep(NETWORK_DELAY);
+
+        assertThat(shadowOf(((BitmapDrawable) imageView.getDrawable()).getBitmap()).getCreatedFromBytes()).isEqualTo("body".getBytes());
+    }
+
+    @Test
+    public void onComplete_withNullDownloadResponse_shouldNotSetCompanionAdImageBitmap() throws Exception {
+        initializeSubject();
+
+        final ImageView imageView = subject.getCompanionAdImageView();
+        assertThat(imageView.getDrawable()).isNull();
+
+        subject.onComplete("url", null);
+
+        assertThat(imageView.getDrawable()).isNull();
+    }
+
+    @Test
+    public void onClick_withCompanionAd_shouldFireCompanionAdClickTrackersAndStartMoPubBrowser() throws Exception {
+        initializeSubject();
+
+        final ImageView imageView = subject.getCompanionAdImageView();
+        assertThat(imageView.performClick()).isFalse();
+        subject.onCreate();
+
+        Robolectric.getBackgroundScheduler().unPause();
+        Robolectric.getUiThreadScheduler().unPause();
+        Thread.sleep(NETWORK_DELAY);
+
+        assertThat(imageView.performClick()).isTrue();
+        Thread.sleep(NETWORK_DELAY);
+
+        assertHttpRequestsMade(
+                "companion_image_url",
+                "imp",
+                "companion_click_tracking_url_1",
+                "companion_click_tracking_url_2"
+        );
+
+        ArgumentCaptor<Bundle> bundleCaptor = ArgumentCaptor.forClass(Bundle.class);
+        verify(baseVideoViewControllerListener).onStartActivityForResult(
+                eq(MoPubBrowser.class),
+                eq(expectedBrowserRequestCode),
+                bundleCaptor.capture()
+        );
+
+        assertThat(bundleCaptor.getValue().get(DESTINATION_URL_KEY)).isEqualTo("companion_click_destination_url");
+    }
+
+    @Test
+    public void onDestroy_shouldBroadcastInterstitialDismiss() throws Exception {
+        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, testBroadcastIdentifier);
+
+        initializeSubject();
+
+        subject.onDestroy();
+        Robolectric.getUiThreadScheduler().unPause();
+
+        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
+    }
+
+    @Test
+    public void onActivityResult_shouldCallFinish() throws Exception {
+        final int expectedResultCode = Activity.RESULT_OK;
+
+        initializeSubject();
+
+        subject.onActivityResult(expectedBrowserRequestCode, expectedResultCode, null);
+
+        verify(baseVideoViewControllerListener).onFinish();
+    }
+
+    @Test
+    public void onActivityResult_withIncorrectRequestCode_shouldNotCallFinish() throws Exception {
+        final int incorrectRequestCode = 1000;
+        final int expectedResultCode = Activity.RESULT_OK;
+
+        initializeSubject();
+
+        subject.onActivityResult(incorrectRequestCode, expectedResultCode, null);
+
+        verify(baseVideoViewControllerListener, never()).onFinish();
+    }
+
+    @Test
+    public void onActivityResult_withIncorrectResultCode_shouldNotCallFinish() throws Exception {
+        final int incorrectResultCode = Activity.RESULT_CANCELED;
+
+        initializeSubject();
+
+        subject.onActivityResult(expectedBrowserRequestCode, incorrectResultCode, null);
+
+        verify(baseVideoViewControllerListener, never()).onFinish();
+    }
+
+    @Test
+    public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickBeforeEnd_shouldDoNothing() throws Exception {
+        stub(mediaPlayer.getDuration()).toReturn(15999);
+        stub(mediaPlayer.getCurrentPosition()).toReturn(15990);
+
+        initializeSubject();
+        setMediaPlayer(mediaPlayer);
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+
+        Robolectric.getUiThreadScheduler().unPause();
+
+        getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
+
+        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(nextStartedActivity).isNull();
+    }
+
+    @Test
+    public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickAfterEnd_shouldStartMoPubBrowser() throws Exception {
+        stub(mediaPlayer.getDuration()).toReturn(15999);
+        stub(mediaPlayer.getCurrentPosition()).toReturn(16000);
+
+        initializeSubject();
+        subject.onResume();
+
+        setMediaPlayer(mediaPlayer);
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+
+        Robolectric.getUiThreadScheduler().unPause();
+
+        getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
+
+        ArgumentCaptor<Bundle> bundleCaptor = ArgumentCaptor.forClass(Bundle.class);
+        verify(baseVideoViewControllerListener).onStartActivityForResult(
+                eq(MoPubBrowser.class),
+                eq(expectedBrowserRequestCode),
+                bundleCaptor.capture()
+        );
+
+        assertThat(bundleCaptor.getValue().get(DESTINATION_URL_KEY)).isEqualTo("clickThrough");
+    }
+
+    @Test
+    public void onTouch_withTouchUp_whenVideoLongerThan16Seconds_andClickBefore5Seconds_shouldDoNothing() throws Exception {
+        stub(mediaPlayer.getDuration()).toReturn(100000);
+        stub(mediaPlayer.getCurrentPosition()).toReturn(4999);
+
+        initializeSubject();
+        subject.onResume();
+
+        setMediaPlayer(mediaPlayer);
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+
+        Robolectric.getUiThreadScheduler().unPause();
+
+        getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
+
+        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(nextStartedActivity).isNull();
+    }
+
+    @Test
+    public void onTouch_withTouchUp_whenVideoLongerThan16Seconds_andClickAfter5Seconds_shouldStartMoPubBrowser() throws Exception {
+        stub(mediaPlayer.getDuration()).toReturn(100000);
+        stub(mediaPlayer.getCurrentPosition()).toReturn(5001);
+
+        initializeSubject();
+        subject.onResume();
+
+        setMediaPlayer(mediaPlayer);
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+
+        Robolectric.getUiThreadScheduler().unPause();
+
+        getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
+
+        ArgumentCaptor<Bundle> bundleCaptor = ArgumentCaptor.forClass(Bundle.class);
+        verify(baseVideoViewControllerListener).onStartActivityForResult(
+                eq(MoPubBrowser.class),
+                eq(expectedBrowserRequestCode),
+                bundleCaptor.capture()
+        );
+
+        assertThat(bundleCaptor.getValue().get(DESTINATION_URL_KEY)).isEqualTo("clickThrough");
+    }
+
+    @Test
+    public void onTouch_whenCloseButtonVisible_shouldPingClickThroughTrackers() throws Exception {
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfiguration.addClickTrackers(Arrays.asList("click_1", "click_2"));
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+
+        initializeSubject();
+
+        subject.setCloseButtonVisible(true);
+
+        getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
+        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getBackgroundScheduler().unPause();
+        Thread.sleep(NETWORK_DELAY);
+
+        assertHttpRequestsMade("click_1", "click_2");
+    }
+
+    @Test
+    public void onTouch_whenCloseButtonNotVisible_shouldNotPingClickThroughTrackers() throws Exception {
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfiguration.addClickTrackers(Arrays.asList("click_1", "click_2"));
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+
+        initializeSubject();
+
+        subject.setCloseButtonVisible(false);
+
+        getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
+        Robolectric.getBackgroundScheduler().unPause();
+        Thread.sleep(NETWORK_DELAY);
+
+        assertThat(Robolectric.httpRequestWasMade()).isFalse();
+    }
+
+    @Test
+    public void onTouch_withNullBaseVideoViewListener_andActionTouchUp_shouldReturnTrueAndNotBlowUp() throws Exception {
+        subject = new VastVideoViewController(context, bundle, testBroadcastIdentifier, null);
+
+        boolean result = getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
+
+        // pass
+
+        assertThat(result).isTrue();
+    }
+
+    @Test
+    public void onTouch_withActionTouchDown_shouldConsumeMotionEvent() throws Exception {
+        initializeSubject();
+
+        boolean result = getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionDown(0, 0));
+
+        assertThat(result).isTrue();
+    }
+
+    @Test
+    public void onPrepared_whenDurationIsLessThanMaxVideoDurationForCloseButton_shouldSetShowCloseButtonDelayToDuration() throws Exception {
+        initializeSubject();
+
+        stub(mediaPlayer.getDuration()).toReturn(1000);
+        setMediaPlayer(mediaPlayer);
+
+        final OnPreparedListener onPreparedListener = getShadowVideoView().getOnPreparedListener();
+        onPreparedListener.onPrepared(null);
+
+        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(1000);
+    }
+
+    @Test
+    public void onPrepared_whenDurationIsGreaterThanMaxVideoDurationForCloseButton_shouldNotSetShowCloseButtonDelay() throws Exception {
+        initializeSubject();
+
+        stub(mediaPlayer.getDuration()).toReturn(MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON + 1);
+        setMediaPlayer(mediaPlayer);
+
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+
+        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
+    }
+
+    @Test
+    public void onCompletion_shouldMarkVideoAsFinished() throws Exception {
+        initializeSubject();
+
+        getShadowVideoView().getOnCompletionListener().onCompletion(null);
+
+        assertThat(subject.isVideoFinishedPlaying()).isTrue();
+    }
+
+    @Test
+    public void onCompletion_shouldPingCompletionTrackers() throws Exception {
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfiguration.addCompleteTrackers(Arrays.asList("complete_1", "complete_2"));
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+
+        initializeSubject();
+
+        getShadowVideoView().getOnCompletionListener().onCompletion(null);
+
+        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getBackgroundScheduler().unPause();
+        Thread.sleep(NETWORK_DELAY);
+
+        assertHttpRequestsMade("complete_1", "complete_2");
+    }
+
+    @Test
+    public void onCompletion_shouldPreventOnResumeFromStartingVideo() throws Exception {
+        initializeSubject();
+
+        getShadowVideoView().getOnCompletionListener().onCompletion(null);
+
+        subject.onResume();
+
+        assertThat(getShadowVideoView().isPlaying()).isFalse();
+    }
+
+    @Test
+    public void onCompletion_shouldStopProgressChecker() throws Exception {
+        initializeSubject();
+        subject.onResume();
+
+        assertThat(subject.getIsVideoProgressShouldBeChecked()).isTrue();
+
+        getShadowVideoView().getOnCompletionListener().onCompletion(null);
+
+        assertThat(subject.getIsVideoProgressShouldBeChecked()).isFalse();
+    }
+
+    @Test
+    public void onCompletion_shouldDisplayCompanionAdIfAvailable() throws Exception {
+        initializeSubject();
+        subject.onCreate();
+
+        Robolectric.getBackgroundScheduler().unPause();
+        Robolectric.getUiThreadScheduler().unPause();
+        Thread.sleep(NETWORK_DELAY);
+
+        final ImageView imageView = subject.getCompanionAdImageView();
+
+        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(imageView.getVisibility()).isEqualTo(View.INVISIBLE);
+
+        getShadowVideoView().getOnCompletionListener().onCompletion(null);
+
+        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.GONE);
+        assertThat(imageView.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(shadowOf(((BitmapDrawable) imageView.getDrawable()).getBitmap()).getCreatedFromBytes()).isEqualTo("body".getBytes());
+    }
+
+    @Test
+    public void onCompletion_shouldShowThatchedBackground() throws Exception {
+        initializeSubject();
+
+        final ImageView imageView = subject.getCompanionAdImageView();
+
+        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(imageView.getVisibility()).isEqualTo(View.INVISIBLE);
+
+        getShadowVideoView().getOnCompletionListener().onCompletion(null);
+
+        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.GONE);
+        assertThat(imageView.getVisibility()).isEqualTo(View.INVISIBLE);
+    }
+
+    @Test
+    public void onError_shouldFireVideoErrorAndReturnFalse() throws Exception {
+        initializeSubject();
+
+        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_FAIL, testBroadcastIdentifier);
+
+        boolean result = getShadowVideoView().getOnErrorListener().onError(null, 0, 0);
+        Robolectric.getUiThreadScheduler().unPause();
+
+        assertThat(result).isFalse();
+        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
+    }
+
+    @Test
+    public void onError_shouldStopProgressChecker() throws Exception {
+        initializeSubject();
+        subject.onResume();
+
+        assertThat(subject.getIsVideoProgressShouldBeChecked()).isTrue();
+
+        getShadowVideoView().getOnErrorListener().onError(null, 0, 0);
+
+        assertThat(subject.getIsVideoProgressShouldBeChecked()).isFalse();
+    }
+
+    @Test
+    public void onError_withVideoFilePermissionErrorBelowJellyBean_shouldRetryPlayingTheVideo() throws Exception {
+        File file = new File("disk_video_path");
+        file.createNewFile();
+
+        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", VersionCode.ICE_CREAM_SANDWICH_MR1.getApiLevel());
+
+        initializeSubject();
+
+        assertThat(getShadowVideoView().getCurrentVideoState()).isEqualTo(-1);
+
+        assertThat(subject.getVideoRetries()).isEqualTo(0);
+        getShadowVideoView().getOnErrorListener().onError(new MediaPlayer(), 1, Integer.MIN_VALUE);
+
+        assertThat(getShadowVideoView().isPlaying()).isTrue();
+        assertThat(subject.getVideoRetries()).isEqualTo(1);
+
+        file.delete();
+    }
+
+    @Test
+    public void retryMediaPlayer_withVideoFilePermissionErrorAndBelowJellyBean_shouldReturnTrue() throws Exception {
+        File file = new File("disk_video_path");
+        file.createNewFile();
+
+        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", VersionCode.ICE_CREAM_SANDWICH_MR1.getApiLevel());
+
+        initializeSubject();
+
+        assertThat(subject.getVideoRetries()).isEqualTo(0);
+        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE)).isTrue();
+        assertThat(subject.getVideoRetries()).isEqualTo(1);
+
+        file.delete();
+    }
+
+    @Test
+    public void retryMediaPlayer_shouldNotRunMoreThanOnce() throws Exception {
+        File file = new File("disk_video_path");
+        file.createNewFile();
+
+        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", VersionCode.ICE_CREAM_SANDWICH_MR1.getApiLevel());
+
+        initializeSubject();
+
+        assertThat(subject.getVideoRetries()).isEqualTo(0);
+        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE)).isTrue();
+        assertThat(subject.getVideoRetries()).isEqualTo(1);
+
+        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE)).isFalse();
+        assertThat(subject.getVideoRetries()).isEqualTo(1);
+
+        file.delete();
+    }
+
+    @Test
+    public void retryMediaPlayer_withAndroidVersionAboveJellyBean_shouldReturnFalse() throws Exception {
+        File file = new File("disk_video_path");
+        file.createNewFile();
+
+        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", VersionCode.JELLY_BEAN.getApiLevel());
+
+        initializeSubject();
+
+        assertThat(subject.getVideoRetries()).isEqualTo(0);
+        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE)).isFalse();
+        assertThat(subject.getVideoRetries()).isEqualTo(0);
+
+        file.delete();
+    }
+
+    @Test
+    public void retryMediaPlayer_withOtherVideoError_shouldReturnFalse() throws Exception {
+        File file = new File("disk_video_path");
+        file.createNewFile();
+
+        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", VersionCode.ICE_CREAM_SANDWICH.getApiLevel());
+
+        initializeSubject();
+
+        assertThat(subject.getVideoRetries()).isEqualTo(0);
+        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 2, Integer.MIN_VALUE)).isFalse();
+        assertThat(subject.getVideoRetries()).isEqualTo(0);
+
+        file.delete();
+    }
+
+    @Test
+    public void retryMediaPlayer_withExceptionThrown_shouldReturnFalseAndIncrementRetryCount() throws Exception {
+        File file = new File("disk_video_path");
+        if (file.exists()){
+            assertThat(file.delete()).isTrue();
+        }
+
+        // No file will cause FileInputStream to throw
+        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", VersionCode.ICE_CREAM_SANDWICH.getApiLevel());
+
+        initializeSubject();
+
+        assertThat(subject.getVideoRetries()).isEqualTo(0);
+        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE)).isFalse();
+        assertThat(subject.getVideoRetries()).isEqualTo(1);
+    }
+
+    @Test
+    public void videoProgressCheckerRunnableRun_shouldFireOffAllProgressTrackers() throws Exception {
+        stub(mediaPlayer.getDuration()).toReturn(9001);
+        stub(mediaPlayer.getCurrentPosition()).toReturn(9002);
+
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfiguration.addFirstQuartileTrackers(Arrays.asList("first"));
+        vastVideoConfiguration.addMidpointTrackers(Arrays.asList("second"));
+        vastVideoConfiguration.addThirdQuartileTrackers(Arrays.asList("third"));
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+
+        initializeSubject();
+        subject.onResume();
+        setMediaPlayer(mediaPlayer);
+
+        // this runs the videoProgressChecker
+        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getBackgroundScheduler().unPause();
+        Thread.sleep(NETWORK_DELAY);
+
+        assertHttpRequestsMade("first", "second", "third");
+    }
+
+    @Test
+    public void videoProgressCheckerRunnableRun_whenDurationIsInvalid_shouldNotMakeAnyNetworkCalls() throws Exception {
+        stub(mediaPlayer.getDuration()).toReturn(0);
+        stub(mediaPlayer.getCurrentPosition()).toReturn(100);
+
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+
+        initializeSubject();
+        setMediaPlayer(mediaPlayer);
+        subject.onResume();
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
+
+        Robolectric.getUiThreadScheduler().runOneTask();
+        // make sure the repeated task hasn't run yet
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+
+        Thread.sleep(NETWORK_DELAY);
+
+        assertThat(Robolectric.httpRequestWasMade()).isFalse();
+    }
+
+    @Test
+    public void videoProgressCheckerRunnableRun_whenCurrentTimeLessThanOneSecond_shouldNotFireStartTracker() throws Exception {
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfiguration.addStartTrackers(Arrays.asList("start"));
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+
+        stub(mediaPlayer.getDuration()).toReturn(100000);
+        stub(mediaPlayer.getCurrentPosition()).toReturn(999);
+
+        initializeSubject();
+        subject.onResume();
+        setMediaPlayer(mediaPlayer);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
+
+        Robolectric.getUiThreadScheduler().runOneTask();
+        // make sure the repeated task hasn't run yet
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+
+        Thread.sleep(NETWORK_DELAY);
+
+        // Since it has not yet been a second, we expect that the start tracker has not been fired
+        assertHttpRequestsMade();
+        Robolectric.getFakeHttpLayer().clearRequestInfos();
+
+        // run checker another time
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        Robolectric.getUiThreadScheduler().runOneTask();
+
+        Thread.sleep(NETWORK_DELAY);
+
+        assertThat(Robolectric.httpRequestWasMade()).isFalse();
+    }
+
+    @Test
+    public void videoProgressCheckerRunnableRun_whenCurrentTimeGreaterThanOneSecond_shouldFireStartTracker() throws Exception {
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfiguration.addStartTrackers(Arrays.asList("start"));
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+
+        stub(mediaPlayer.getDuration()).toReturn(100000);
+        stub(mediaPlayer.getCurrentPosition()).toReturn(1000);
+
+        initializeSubject();
+        subject.onResume();
+        setMediaPlayer(mediaPlayer);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
+
+        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getBackgroundScheduler().unPause();
+
+        Thread.sleep(NETWORK_DELAY);
+
+        assertHttpRequestsMade("start");
+        Robolectric.getFakeHttpLayer().clearRequestInfos();
+
+        // run checker another time
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        Robolectric.getUiThreadScheduler().runOneTask();
+
+        Thread.sleep(NETWORK_DELAY);
+
+        assertThat(Robolectric.httpRequestWasMade()).isFalse();
+    }
+
+    @Test
+    public void videoProgressCheckerRunnableRun_whenProgressIsPastFirstQuartile_shouldOnlyPingFirstQuartileTrackersOnce() throws Exception {
+        stub(mediaPlayer.getDuration()).toReturn(100);
+        stub(mediaPlayer.getCurrentPosition()).toReturn(26);
+
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfiguration.addFirstQuartileTrackers(Arrays.asList("first"));
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+
+        initializeSubject();
+        subject.onResume();
+        setMediaPlayer(mediaPlayer);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
+
+        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getBackgroundScheduler().unPause();
+        Thread.sleep(NETWORK_DELAY);
+
+        assertHttpRequestsMade("first");
+        Robolectric.getFakeHttpLayer().clearRequestInfos();
+
+        // run checker another time
+        Robolectric.getUiThreadScheduler().runOneTask();
+        Thread.sleep(NETWORK_DELAY);
+
+        assertThat(Robolectric.httpRequestWasMade()).isFalse();
+    }
+
+    @Test
+    public void videoProgressCheckerRunnableRun_whenProgressIsPastMidQuartile_shouldPingFirstQuartileTrackers_andMidQuartileTrackersBothOnlyOnce() throws Exception {
+        stub(mediaPlayer.getDuration()).toReturn(100);
+        stub(mediaPlayer.getCurrentPosition()).toReturn(51);
+
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfiguration.addFirstQuartileTrackers(Arrays.asList("first"));
+        vastVideoConfiguration.addMidpointTrackers(Arrays.asList("second"));
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+
+        initializeSubject();
+        subject.onResume();
+        setMediaPlayer(mediaPlayer);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
+
+        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getBackgroundScheduler().unPause();
+        Thread.sleep(NETWORK_DELAY);
+
+        assertHttpRequestsMade("first", "second");
+        Robolectric.getFakeHttpLayer().clearRequestInfos();
+
+        Robolectric.getUiThreadScheduler().runOneTask();
+        Thread.sleep(NETWORK_DELAY);
+
+        assertThat(Robolectric.httpRequestWasMade()).isFalse();
+    }
+
+    @Test
+    public void videoProgressCheckerRunnableRun_whenProgressIsPastThirdQuartile_shouldPingFirstQuartileTrackers_andMidQuartileTrackers_andThirdQuartileTrackersAllOnlyOnce() throws Exception {
+        stub(mediaPlayer.getDuration()).toReturn(100);
+        stub(mediaPlayer.getCurrentPosition()).toReturn(76);
+
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfiguration.addFirstQuartileTrackers(Arrays.asList("first"));
+        vastVideoConfiguration.addMidpointTrackers(Arrays.asList("second"));
+        vastVideoConfiguration.addThirdQuartileTrackers(Arrays.asList("third"));
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+
+        initializeSubject();
+        subject.onResume();
+        setMediaPlayer(mediaPlayer);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
+
+        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getBackgroundScheduler().unPause();
+        Thread.sleep(NETWORK_DELAY);
+
+        assertHttpRequestsMade("first", "second", "third");
+        Robolectric.getFakeHttpLayer().clearRequestInfos();
+
+        Robolectric.getUiThreadScheduler().runOneTask();
+        Thread.sleep(NETWORK_DELAY);
+
+        assertThat(Robolectric.httpRequestWasMade()).isFalse();
+    }
+
+    @Test
+    public void videoProgressCheckerRunnableRun_asVideoPlays_shouldPingAllThreeTrackersIndividuallyOnce() throws Exception {
+        stub(mediaPlayer.getDuration()).toReturn(100);
+
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfiguration.addFirstQuartileTrackers(Arrays.asList("first"));
+        vastVideoConfiguration.addMidpointTrackers(Arrays.asList("second"));
+        vastVideoConfiguration.addThirdQuartileTrackers(Arrays.asList("third"));
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+
+        initializeSubject();
+        subject.onResume();
+        setMediaPlayer(mediaPlayer);
+
+        // before any trackers are fired
+        fastForwardMediaPlayerAndAssertRequestMade(1);
+
+        fastForwardMediaPlayerAndAssertRequestMade(24);
+
+        // after it hits first tracker
+        fastForwardMediaPlayerAndAssertRequestMade(26, "first");
+
+        // before mid quartile is hit
+        fastForwardMediaPlayerAndAssertRequestMade(49);
+
+        // after it hits mid trackers
+        fastForwardMediaPlayerAndAssertRequestMade(51, "second");
+
+        // before third quartile is hit
+        fastForwardMediaPlayerAndAssertRequestMade(74);
+
+        // after third quartile is hit
+        fastForwardMediaPlayerAndAssertRequestMade(76, "third");
+
+        // way after third quartile is hit
+        fastForwardMediaPlayerAndAssertRequestMade(99);
+    }
+
+    @Test
+    public void videoProgressCheckerRunnableRun_whenCurrentPositionIsGreaterThanShowCloseButtonDelay_shouldShowCloseButton() throws Exception {
+        stub(mediaPlayer.getDuration()).toReturn(5002);
+        stub(mediaPlayer.getCurrentPosition()).toReturn(5001);
+
+        initializeSubject();
+        subject.onResume();
+        setMediaPlayer(mediaPlayer);
+
+        assertThat(subject.isShowCloseButtonEventFired()).isFalse();
+        Robolectric.getUiThreadScheduler().unPause();
+
+        assertThat(subject.isShowCloseButtonEventFired()).isTrue();
+    }
+
+    @Test
+    public void onPause_shouldStopProgressChecker() throws Exception {
+        initializeSubject();
+
+        subject.onResume();
+        assertThat(subject.getIsVideoProgressShouldBeChecked()).isTrue();
+
+        subject.onPause();
+        assertThat(subject.getIsVideoProgressShouldBeChecked()).isFalse();
+
+        subject.onPause();
+        assertThat(subject.getIsVideoProgressShouldBeChecked()).isFalse();
+    }
+
+    @Test
+    public void onResume_shouldStartVideoProgressCheckerOnce() throws Exception {
+        initializeSubject();
+
+        subject.onResume();
+        assertThat(subject.getIsVideoProgressShouldBeChecked()).isTrue();
+
+        subject.onPause();
+        assertThat(subject.getIsVideoProgressShouldBeChecked()).isFalse();
+
+        subject.onResume();
+        assertThat(subject.getIsVideoProgressShouldBeChecked()).isTrue();
+
+        subject.onResume();
+        assertThat(subject.getIsVideoProgressShouldBeChecked()).isTrue();
+    }
+
+    @Test
+    public void onResume_shouldSetVideoViewStateToStarted() throws Exception {
+        initializeSubject();
+
+        subject.onResume();
+
+        assertThat(getShadowVideoView().getCurrentVideoState()).isEqualTo(ShadowVideoView.START);
+        assertThat(getShadowVideoView().getPrevVideoState()).isNotEqualTo(ShadowVideoView.START);
+    }
+
+    @Test
+    public void onResume_shouldResetVideoRetryCountToZero() throws Exception {
+        File file = new File("disk_video_path");
+        file.createNewFile();
+
+        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", VersionCode.ICE_CREAM_SANDWICH_MR1.getApiLevel());
+
+        initializeSubject();
+
+        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE)).isTrue();
+        assertThat(subject.getVideoRetries()).isEqualTo(1);
+
+        subject.onResume();
+        assertThat(subject.getVideoRetries()).isEqualTo(0);
+
+        file.delete();
+    }
+
+    @Ignore("pending")
+    @Test
+    public void onResume_shouldSeekToPrePausedPosition() throws Exception {
+        stub(mediaPlayer.getDuration()).toReturn(10000);
+        stub(mediaPlayer.getCurrentPosition()).toReturn(7000);
+
+        initializeSubject();
+        setMediaPlayer(mediaPlayer);
+        final VideoView videoView = spy(subject.getVideoView());
+
+        subject.onPause();
+
+        stub(mediaPlayer.getCurrentPosition()).toReturn(1000);
+
+        subject.onResume();
+        verify(videoView).seekTo(eq(7000));
+    }
+
+    @Test
+    public void backButtonEnabled_shouldDefaultToFalse() throws Exception {
+        initializeSubject();
+
+        assertThat(subject.backButtonEnabled()).isFalse();
+    }
+
+    @Test
+    public void backButtonEnabled_whenCloseButtonIsVisible_shouldReturnTrue() throws Exception {
+        initializeSubject();
+
+        subject.setCloseButtonVisible(true);
+
+        assertThat(subject.backButtonEnabled()).isTrue();
+    }
+
+    private void initializeSubject() {
+        subject = new VastVideoViewController(context, bundle, testBroadcastIdentifier, baseVideoViewControllerListener);
+    }
+
+    private void setMediaPlayer(final MediaPlayer mediaPlayer) throws IllegalAccessException {
+        final VideoView videoView = subject.getVideoView();
+        ReflectionUtils.setVariableValueInObject(videoView, "mMediaPlayer", mediaPlayer);
+
+        int state = (Integer) ReflectionUtils.getValueIncludingSuperclasses("STATE_PLAYING", videoView);
+
+        ReflectionUtils.setVariableValueInObject(videoView, "mCurrentState", state);
+    }
+
+    private void fastForwardMediaPlayerAndAssertRequestMade(int time, String... urls) throws Exception {
+        stub(mediaPlayer.getCurrentPosition()).toReturn(time);
+        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getBackgroundScheduler().unPause();
+        Thread.sleep(NETWORK_DELAY);
+
+        if (urls == null) {
+            assertThat(Robolectric.getNextSentHttpRequest()).isNull();
+        } else {
+            assertHttpRequestsMade(urls);
+        }
+
+        Robolectric.getFakeHttpLayer().clearRequestInfos();
+    }
+
+    private VastVideoToolbar getVastVideoToolbar() {
+        final ViewGroup layout = subject.getLayout();
+
+        for (int i = 0; i < layout.getChildCount(); i++) {
+            final View child = layout.getChildAt(i);
+            if (child instanceof VastVideoToolbar) {
+                return (VastVideoToolbar) child;
+            }
+        }
+
+        fail("Unable to find VastVideoToolbar in view hierarchy.");
+        return null;
+    }
+
+    private ShadowVideoView getShadowVideoView() {
+        return shadowOf(subject.getVideoView());
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java
deleted file mode 100644
index b0e39e2e..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java
+++ /dev/null
@@ -1,686 +0,0 @@
-/*
- * Copyright (c) 2010-2013, MoPub Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *
- *  Redistributions of source code must retain the above copyright
- *   notice, this list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright
- *   notice, this list of conditions and the following disclaimer in the
- *   documentation and/or other materials provided with the distribution.
- *
- *  Neither the name of 'MoPub Inc.' nor the names of its contributors
- *   may be used to endorse or promote products derived from this software
- *   without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.media.MediaPlayer;
-import android.view.View;
-
-import com.mopub.common.MoPubBrowser;
-import com.mopub.mobileads.test.support.GestureUtils;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-import com.mopub.mobileads.test.support.ThreadUtils;
-import org.apache.http.HttpRequest;
-import org.apache.http.client.methods.HttpGet;
-import org.apache.maven.artifact.ant.shaded.ReflectionUtils;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.shadows.ShadowVideoView;
-
-import java.util.*;
-
-import static com.mopub.mobileads.BaseVideoView.BaseVideoViewListener;
-import static com.mopub.mobileads.MraidVideoPlayerActivity.VIDEO_URL;
-import static com.mopub.mobileads.VastVideoView.VIDEO_CLICK_THROUGH_TRACKERS;
-import static com.mopub.mobileads.VastVideoView.VIDEO_CLICK_THROUGH_URL;
-import static com.mopub.mobileads.VastVideoView.VIDEO_COMPLETE_TRACKERS;
-import static com.mopub.mobileads.VastVideoView.VIDEO_FIRST_QUARTER_TRACKERS;
-import static com.mopub.mobileads.VastVideoView.VIDEO_IMPRESSION_TRACKERS;
-import static com.mopub.mobileads.VastVideoView.VIDEO_MID_POINT_TRACKERS;
-import static com.mopub.mobileads.VastVideoView.VIDEO_START_TRACKERS;
-import static com.mopub.mobileads.VastVideoView.VIDEO_THIRD_QUARTER_TRACKERS;
-import static com.mopub.mobileads.test.support.ThreadUtils.NETWORK_DELAY;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Fail.fail;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class VastVideoViewTest {
-    private VastVideoView subject;
-    private Context context;
-    private BaseVideoViewListener baseVideoViewListener;
-    private MediaPlayer.OnCompletionListener defaultOnCompletionListener;
-    private MediaPlayer.OnErrorListener defaultOnErrorListener;
-    private ShadowVideoView shadowSubject;
-    private View.OnTouchListener defaultOnTouchListener;
-    private MediaPlayer.OnPreparedListener defaultOnPreparedListener;
-    private MediaPlayer mediaPlayer;
-
-    @Before
-    public void setUp() throws Exception {
-        mediaPlayer = mock(MediaPlayer.class);
-        context = new Activity();
-        baseVideoViewListener = mock(BaseVideoViewListener.class);
-
-        // we want to pause all threads in this test, so that we can properly test the network calls
-        Robolectric.getUiThreadScheduler().pause();
-        Robolectric.getBackgroundScheduler().pause();
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        Robolectric.getUiThreadScheduler().reset();
-        Robolectric.getBackgroundScheduler().reset();
-        Robolectric.clearPendingHttpResponses();
-    }
-
-    @Test
-    public void constructor_shouldSetListenersAndVideoPath() throws Exception {
-        initializeSubject(createIntentForVastVideo(), null);
-
-        assertThat(defaultOnCompletionListener).isNotNull();
-        assertThat(defaultOnErrorListener).isNotNull();
-        assertThat(defaultOnTouchListener).isNotNull();
-        assertThat(defaultOnPreparedListener).isNotNull();
-
-        assertThat(shadowSubject.getVideoPath()).isEqualTo("http://video");
-        assertThat(subject.hasFocus()).isTrue();
-    }
-
-    @Test
-    public void constructor_shouldNotChangeShowCloseButtonDelay() throws Exception {
-        initializeSubject(createIntentForVastVideo(), null);
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(VastVideoView.DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
-    }
-
-    @Test
-    public void constructor_shouldPingStartAndImpressionTrackers() throws Exception {
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "start"));
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "imp"));
-
-        Intent intent = createIntentForVastVideo();
-        addExtrasToStub(intent, VIDEO_START_TRACKERS, new ArrayList<String>(Arrays.asList("http://start")));
-        addExtrasToStub(intent, VIDEO_IMPRESSION_TRACKERS, new ArrayList<String>(Arrays.asList("http://impressions")));
-        initializeSubject(intent, null);
-
-        Robolectric.getBackgroundScheduler().unPause();
-        ThreadUtils.pause(NETWORK_DELAY);
-
-        assertNetworkCallsMade("http://start", "http://impressions");
-    }
-
-    @Test
-    public void constructor_shouldBeginVideoProgressChecker() throws Exception {
-        initializeSubject(createIntentForVastVideo(), null);
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-    }
-
-    @Test
-    public void onPrepared_whenDurationIsLessThanMaxVideoDurationForCloseButton_shouldSetShowCloseButtonDelayToDuration() throws Exception {
-        initializeSubject(createIntentForVastVideo(), null);
-
-        // by default, duration is -1 since the video hasn't started playing.
-        int duration = subject.getDuration();
-        assertThat(duration).isLessThan(VastVideoView.MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON);
-
-        defaultOnPreparedListener.onPrepared(null);
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(duration);
-    }
-
-    @Test
-    public void onPrepared_whenDurationIsGreaterThanMaxVideoDurationForCloseButton_shouldNotSetShowCloseButtonDelay() throws Exception {
-        stub(mediaPlayer.getDuration()).toReturn(16001);
-        initializeSubject(createIntentForVastVideo(), null);
-        setMediaPlayer(mediaPlayer);
-
-        defaultOnPreparedListener.onPrepared(null);
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(5000);
-    }
-
-    @Test
-    public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickBeforeEnd_shouldDoNothing() throws Exception {
-        Intent intent = createIntentForVastVideo();
-        addExtrasToStub(intent, VIDEO_CLICK_THROUGH_URL, "http://clickThroughUrl");
-
-        stub(mediaPlayer.getDuration()).toReturn(15999);
-        stub(mediaPlayer.getCurrentPosition()).toReturn(15998);
-
-        initializeSubject(intent, null);
-        setMediaPlayer(mediaPlayer);
-        defaultOnPreparedListener.onPrepared(mediaPlayer);
-
-        Robolectric.getUiThreadScheduler().unPause();
-
-        defaultOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
-
-        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(nextStartedActivity).isNull();
-    }
-
-    @Test
-    public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickAfterEnd_shouldStartMoPubBrowser() throws Exception {
-        Intent intent = createIntentForVastVideo();
-        addExtrasToStub(intent, VIDEO_CLICK_THROUGH_URL, "http://clickThroughUrl");
-
-        stub(mediaPlayer.getDuration()).toReturn(15999);
-        stub(mediaPlayer.getCurrentPosition()).toReturn(16001);
-
-        initializeSubject(intent, null);
-        setMediaPlayer(mediaPlayer);
-        defaultOnPreparedListener.onPrepared(mediaPlayer);
-
-        Robolectric.getUiThreadScheduler().unPause();
-
-        defaultOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
-
-        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(nextStartedActivity).isNotNull();
-        assertThat(nextStartedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo("http://clickThroughUrl");
-        assertThat(nextStartedActivity.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
-    }
-
-    @Test
-    public void onTouch_withTouchUp_whenVideoLongerThan16Seconds_andClickBefore5Seconds_shouldDoNothing() throws Exception {
-        Intent intent = createIntentForVastVideo();
-        addExtrasToStub(intent, VIDEO_CLICK_THROUGH_URL, "http://clickThroughUrl");
-
-        stub(mediaPlayer.getDuration()).toReturn(100000);
-        stub(mediaPlayer.getCurrentPosition()).toReturn(4999);
-
-        initializeSubject(intent, null);
-        setMediaPlayer(mediaPlayer);
-        defaultOnPreparedListener.onPrepared(mediaPlayer);
-
-        Robolectric.getUiThreadScheduler().unPause();
-
-        defaultOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
-
-        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(nextStartedActivity).isNull();
-    }
-
-    @Test
-    public void onTouch_withTouchUp_whenVideoLongerThan16Seconds_andClickAfter5Seconds_shouldStartMoPubBrowser() throws Exception {
-        Intent intent = createIntentForVastVideo();
-        addExtrasToStub(intent, VIDEO_CLICK_THROUGH_URL, "http://clickThroughUrl");
-
-        stub(mediaPlayer.getDuration()).toReturn(100000);
-        stub(mediaPlayer.getCurrentPosition()).toReturn(5001);
-
-        initializeSubject(intent, null);
-        setMediaPlayer(mediaPlayer);
-        defaultOnPreparedListener.onPrepared(mediaPlayer);
-
-        Robolectric.getUiThreadScheduler().unPause();
-
-        defaultOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
-
-        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(nextStartedActivity).isNotNull();
-        assertThat(nextStartedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo("http://clickThroughUrl");
-        assertThat(nextStartedActivity.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
-    }
-
-    @Test
-    public void onTouch_whenCloseButtonVisible_shouldPingClickThroughTrackers() throws Exception {
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "body"));
-
-        Intent intent = createIntentForVastVideo();
-        addExtrasToStub(intent, VIDEO_CLICK_THROUGH_TRACKERS, new ArrayList<String>(Arrays.asList("http://clickThroughTrackers")));
-        initializeSubject(intent, null);
-
-        subject.setCloseButtonVisible(true);
-
-        defaultOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
-        ThreadUtils.pause(NETWORK_DELAY);
-
-        assertNetworkCallsMade("http://clickThroughTrackers");
-    }
-
-    @Test
-    public void onTouch_whenCloseButtonNotVisible_shouldNotPingClickThroughTrackers() throws Exception {
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "body"));
-
-        Intent intent = createIntentForVastVideo();
-        addExtrasToStub(intent, VIDEO_CLICK_THROUGH_TRACKERS, new ArrayList<String>(Arrays.asList("http://clickThroughTrackers")));
-        initializeSubject(intent, null);
-
-        subject.setCloseButtonVisible(false);
-
-        defaultOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
-        ThreadUtils.pause(NETWORK_DELAY);
-
-        assertThat(Robolectric.getNextSentHttpRequest()).isNull();
-    }
-
-    @Test
-    public void onTouch_withNullBaseVideoViewListener_andActionTouchUp_shouldReturnTrueAndNotBlowUp() throws Exception {
-        initializeSubject(createIntentForVastVideo(), null);
-
-        boolean result = defaultOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
-
-        // pass
-
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void onTouch_withActionTouchDown_shouldConsumeMotionEvent() throws Exception {
-        initializeSubject(createIntentForVastVideo(), null);
-
-        boolean result = defaultOnTouchListener.onTouch(null, GestureUtils.createActionDown(0, 0));
-
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void onCompletion_shouldFireVideoCompleted() throws Exception {
-        initializeSubject(createIntentForVastVideo(), baseVideoViewListener);
-
-        defaultOnCompletionListener.onCompletion(null);
-
-        verify(baseVideoViewListener).videoCompleted(eq(false));
-    }
-
-    @Test
-    public void onCompletion_withNullBaseVideoViewListener_shouldNotBlowUp() throws Exception {
-        initializeSubject(createIntentForVastVideo(), null);
-
-        defaultOnCompletionListener.onCompletion(null);
-
-        // pass
-    }
-
-    @Test
-    public void onCompletion_shouldPingCompletionTrackers() throws Exception {
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "body"));
-
-        Intent intent = createIntentForVastVideo();
-        addExtrasToStub(intent, VIDEO_COMPLETE_TRACKERS, new ArrayList<String>(Arrays.asList("http://completeTrackers")));
-        initializeSubject(intent, null);
-
-        defaultOnCompletionListener.onCompletion(null);
-        ThreadUtils.pause(NETWORK_DELAY);
-
-        assertNetworkCallsMade("http://completeTrackers");
-    }
-
-    @Test
-    public void onCompletion_shouldPreventOnResumeFromStartingVideo() throws Exception {
-        initializeSubject(createIntentForVastVideo(), null);
-
-        defaultOnCompletionListener.onCompletion(null);
-
-        subject.onResume();
-
-        assertThat(shadowSubject.isPlaying()).isFalse();
-    }
-
-    @Test
-    public void onCompletion_shouldStopProgressChecker() throws Exception {
-        initializeSubject(createIntentForVastVideo(), baseVideoViewListener);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        defaultOnCompletionListener.onCompletion(null);
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void onError_shouldFireVideoErrorAndReturnFalse() throws Exception {
-        initializeSubject(createIntentForVastVideo(), baseVideoViewListener);
-
-        boolean result = defaultOnErrorListener.onError(null, 0, 0);
-
-        assertThat(result).isFalse();
-        verify(baseVideoViewListener).videoError(eq(false));
-    }
-
-    @Test
-    public void onError_withNullBaseVideoViewListener_shouldNotBlowUp () throws Exception {
-        initializeSubject(createIntentForVastVideo(), baseVideoViewListener);
-
-        boolean result = defaultOnErrorListener.onError(null, 0, 0);
-
-        assertThat(result).isFalse();
-    }
-
-    @Test
-    public void onError_shouldStopProgressChecker() throws Exception {
-        initializeSubject(createIntentForVastVideo(), baseVideoViewListener);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        defaultOnErrorListener.onError(null, 0, 0);
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void videoProgressCheckerRunnableRun_shouldFireOffAllProgressTrackers() throws Exception {
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "first"));
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "second"));
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "third"));
-        stub(mediaPlayer.getDuration()).toReturn(9001);
-        stub(mediaPlayer.getCurrentPosition()).toReturn(9002);
-        Intent intent = createIntentForVastVideo();
-        addExtrasToStub(intent, VIDEO_FIRST_QUARTER_TRACKERS, new ArrayList<String>(Arrays.asList("http://first")));
-        addExtrasToStub(intent, VIDEO_MID_POINT_TRACKERS, new ArrayList<String>(Arrays.asList("http://second")));
-        addExtrasToStub(intent, VIDEO_THIRD_QUARTER_TRACKERS, new ArrayList<String>(Arrays.asList("http://third")));
-        initializeSubject(intent, null);
-        setMediaPlayer(mediaPlayer);
-
-        // this runs the videoProgressChecker
-        runRunnableWithNetworkCall();
-
-        assertNetworkCallsMade("http://first", "http://second", "http://third");
-    }
-
-    @Test
-    public void videoProgressCheckerRunnableRun_whenDurationIsInvalid_shouldNotMakeAnyNetworkCalls() throws Exception {
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "error"));
-        initializeSubject(createIntentForVastVideo(), null);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        Robolectric.getUiThreadScheduler().runOneTask();
-        // make sure the repeated task hasn't run yet
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-        Robolectric.getBackgroundScheduler().unPause();
-        ThreadUtils.pause(NETWORK_DELAY);
-
-        assertThat(Robolectric.getNextSentHttpRequest()).isNull();
-    }
-
-    @Test
-    public void videoProgressCheckerRunnableRun_whenProgressIsPastFirstQuartile_shouldOnlyPingFirstQuartileTrackersOnce() throws Exception {
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "first"));
-        stub(mediaPlayer.getDuration()).toReturn(100);
-        stub(mediaPlayer.getCurrentPosition()).toReturn(26);
-        Intent intent = createIntentForVastVideo();
-        addExtrasToStub(intent, VIDEO_FIRST_QUARTER_TRACKERS, new ArrayList<String>(Arrays.asList("http://first")));
-        initializeSubject(intent, null);
-        setMediaPlayer(mediaPlayer);
-
-        runRunnableWithNetworkCall();
-
-        assertNetworkCallsMade("http://first");
-
-        // run checker another time
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "first2"));
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        runRunnableWithNetworkCall();
-
-        assertThat(Robolectric.getNextSentHttpRequest()).isNull();
-    }
-
-    @Test
-    public void videoProgressCheckerRunnableRun_whenProgressIsPastMidQuartile_shouldPingFirstQuartileTrackers_andMidQuartileTrackersBothOnlyOnce() throws Exception {
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "first"));
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "mid"));
-        stub(mediaPlayer.getDuration()).toReturn(100);
-        stub(mediaPlayer.getCurrentPosition()).toReturn(51);
-        Intent intent = createIntentForVastVideo();
-        addExtrasToStub(intent, VIDEO_FIRST_QUARTER_TRACKERS, new ArrayList<String>(Arrays.asList("http://first")));
-        addExtrasToStub(intent, VIDEO_MID_POINT_TRACKERS, new ArrayList<String>(Arrays.asList("http://mid")));
-        initializeSubject(intent, null);
-        setMediaPlayer(mediaPlayer);
-
-        runRunnableWithNetworkCall();
-
-        assertNetworkCallsMade("http://first", "http://mid");
-
-        // run checker again
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "first2"));
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "mid2"));
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        runRunnableWithNetworkCall();
-
-        assertThat(Robolectric.getNextSentHttpRequest()).isNull();
-    }
-
-    @Test
-    public void videoProgressCheckerRunnableRun_whenProgressIsPastThirdQuartile_shouldPingFirstQuartileTrackers_andMidQuartileTrackers_andThirdQuartileTrackersAllOnlyOnce() throws Exception {
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "first"));
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "mid"));
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "third"));
-        stub(mediaPlayer.getDuration()).toReturn(100);
-        stub(mediaPlayer.getCurrentPosition()).toReturn(76);
-        Intent intent = createIntentForVastVideo();
-        addExtrasToStub(intent, VIDEO_FIRST_QUARTER_TRACKERS, new ArrayList<String>(Arrays.asList("http://first")));
-        addExtrasToStub(intent, VIDEO_MID_POINT_TRACKERS, new ArrayList<String>(Arrays.asList("http://mid")));
-        addExtrasToStub(intent, VIDEO_THIRD_QUARTER_TRACKERS, new ArrayList<String>(Arrays.asList("http://third")));
-        initializeSubject(intent, null);
-        setMediaPlayer(mediaPlayer);
-
-        runRunnableWithNetworkCall();
-
-        assertNetworkCallsMade("http://first", "http://mid", "http://third");
-
-        // run checker again
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "first2"));
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "mid2"));
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "third2"));
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        runRunnableWithNetworkCall();
-
-        assertThat(Robolectric.getNextSentHttpRequest()).isNull();
-    }
-
-    @Test
-    public void videoProgressCheckerRunnableRun_asVideoPlays_shouldPingAllThreeTrackersIndividuallyOnce() throws Exception {
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "first"));
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "mid"));
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "third"));
-        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "error"));
-        stub(mediaPlayer.getDuration()).toReturn(100);
-        Intent intent = createIntentForVastVideo();
-        addExtrasToStub(intent, VIDEO_FIRST_QUARTER_TRACKERS, new ArrayList<String>(Arrays.asList("http://first")));
-        addExtrasToStub(intent, VIDEO_MID_POINT_TRACKERS, new ArrayList<String>(Arrays.asList("http://mid")));
-        addExtrasToStub(intent, VIDEO_THIRD_QUARTER_TRACKERS, new ArrayList<String>(Arrays.asList("http://third")));
-        initializeSubject(intent, null);
-        setMediaPlayer(mediaPlayer);
-
-        // before any trackers are fired
-        fastForwardMediaPlayerAndAssertRequestMade(1, null);
-
-        fastForwardMediaPlayerAndAssertRequestMade(24, null);
-
-        // after it hits first tracker
-        fastForwardMediaPlayerAndAssertRequestMade(26, "http://first");
-
-        // before mid quartile is hit
-        fastForwardMediaPlayerAndAssertRequestMade(49, null);
-
-        // after it hits mid trackers
-        fastForwardMediaPlayerAndAssertRequestMade(51, "http://mid");
-
-        // before third quartile is hit
-        fastForwardMediaPlayerAndAssertRequestMade(74, null);
-
-        // after third quartile is hit
-        fastForwardMediaPlayerAndAssertRequestMade(76, "http://third");
-
-        // way after third quartile is hit
-        fastForwardMediaPlayerAndAssertRequestMade(99, null);
-    }
-
-    @Test
-    public void videoProgressCheckerRunnableRun_whenCurrentPositionIsGreaterThanShowCloseButtonDelay_shouldShowCloseButton() throws Exception {
-        stub(mediaPlayer.getDuration()).toReturn(5002);
-        stub(mediaPlayer.getCurrentPosition()).toReturn(5001);
-
-        initializeSubject(createIntentForVastVideo(), baseVideoViewListener);
-        setMediaPlayer(mediaPlayer);
-
-        Robolectric.getUiThreadScheduler().unPause();
-
-        verify(baseVideoViewListener).showCloseButton();
-    }
-
-    @Test
-    public void videoProgressCheckerRunnableRun_whenCurrentPositionIsGreaterThanShowCloseButtonDelay_andBaseVideoViewListenerIsNull_shouldNotBlowUp() throws Exception {
-        stub(mediaPlayer.getDuration()).toReturn(5002);
-        stub(mediaPlayer.getCurrentPosition()).toReturn(5001);
-
-        initializeSubject(createIntentForVastVideo(), null);
-        setMediaPlayer(mediaPlayer);
-
-        Robolectric.getUiThreadScheduler().unPause();
-
-        // pass
-    }
-
-    @Test
-    public void videoProgressCheckerRunnableRun_whenVideoProgressShouldNotBeChecked_shouldNotPostAnotherRunnable() throws Exception {
-        initializeSubject(createIntentForVastVideo(), null);
-        Robolectric.getUiThreadScheduler().unPause();
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-        subject.setIsVideoProgressShouldBeChecked(false);
-
-        Robolectric.getUiThreadScheduler().runOneTask();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void onPause_shouldStopProgressChecker() throws Exception {
-        initializeSubject(createIntentForVastVideo(), null);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        subject.onPause();
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void onResume_shouldResumeVideoProgressChecker() throws Exception {
-        initializeSubject(createIntentForVastVideo(), null);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        subject.onPause();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-
-        subject.onResume();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-    }
-
-    @Test
-    public void onResume_shouldSetVideoViewStateToStarted() throws Exception {
-        initializeSubject(createIntentForVastVideo(), null);
-
-        subject.onResume();
-
-        assertThat(shadowSubject.getCurrentVideoState()).isEqualTo(ShadowVideoView.START);
-        assertThat(shadowSubject.getPrevVideoState()).isNotEqualTo(ShadowVideoView.START);
-    }
-
-    private void initializeSubject(final Intent intent, final BaseVideoViewListener baseVideoViewListener) {
-        subject = new VastVideoView(context, intent, baseVideoViewListener);
-
-        shadowSubject = shadowOf(subject);
-        defaultOnCompletionListener = shadowSubject.getOnCompletionListener();
-        defaultOnErrorListener = shadowSubject.getOnErrorListener();
-        defaultOnTouchListener = shadowSubject.getOnTouchListener();
-        defaultOnPreparedListener = shadowSubject.getOnPreparedListener();
-    }
-
-    private Intent createIntentForVastVideo() {
-        Intent result = mock(Intent.class);
-        stub(result.getStringExtra(VIDEO_URL)).toReturn("http://video");
-        return result;
-    }
-
-    private Intent addExtrasToStub(Intent intent, String key, String value) {
-        stub(intent.getStringExtra(eq(key))).toReturn(value);
-        return intent;
-    }
-
-    private Intent addExtrasToStub(Intent intent, String key, ArrayList<String> value) {
-        stub(intent.getStringArrayListExtra(eq(key))).toReturn(value);
-        return intent;
-    }
-
-    private void setMediaPlayer(MediaPlayer mockMediaPlayer) throws IllegalAccessException {
-        // tricks the media player to think it's playing currently
-        ReflectionUtils.setVariableValueInObject(subject, "mMediaPlayer", mockMediaPlayer);
-        int state = (Integer) ReflectionUtils.getValueIncludingSuperclasses("STATE_PLAYING", subject);
-        ReflectionUtils.setVariableValueInObject(subject, "mCurrentState", state);
-    }
-
-    private void runRunnableWithNetworkCall() {
-        Robolectric.getUiThreadScheduler().runOneTask();
-        Robolectric.getBackgroundScheduler().unPause();
-        ThreadUtils.pause(NETWORK_DELAY);
-        Robolectric.getBackgroundScheduler().pause();
-    }
-
-    // note: this is needed because network calls don't always return in order.
-    private void assertNetworkCallsMade(String... urls) {
-        if (urls == null || urls.length == 0) {
-            fail("your test shouldn't call this method with nothing in it");
-        }
-
-        List<String> expectedUris = Arrays.asList(urls);
-        List<String> actualUris = new ArrayList<String>();
-
-        HttpRequest httpRequest;
-        while ((httpRequest = Robolectric.getNextSentHttpRequest()) != null) {
-            assertThat(httpRequest).isInstanceOf(HttpGet.class);
-            actualUris.add(((HttpGet) httpRequest).getURI().toString());
-        }
-
-        assertThat(expectedUris.size()).isEqualTo(actualUris.size());
-
-        Collections.sort(expectedUris);
-        Collections.sort(actualUris);
-
-        assertThat(expectedUris).isEqualTo(actualUris);
-    }
-
-    private void fastForwardMediaPlayerAndAssertRequestMade(int time, String... uri) throws Exception {
-        stub(mediaPlayer.getCurrentPosition()).toReturn(time);
-        runRunnableWithNetworkCall();
-
-        if (uri == null) {
-            assertThat(Robolectric.getNextSentHttpRequest()).isNull();
-        } else {
-            assertNetworkCallsMade(uri);
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java
index 1569764a..dae3c5f6 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java
@@ -1,6 +1,6 @@
 package com.mopub.mobileads.test.support;
 
-import com.mopub.mobileads.util.Json;
+import com.mopub.common.util.Json;
 
 import java.util.Collections;
 import java.util.Map;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/StreamUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/StreamUtils.java
deleted file mode 100644
index f0e4c5ba..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/StreamUtils.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import java.io.*;
-import java.util.*;
-
-public class StreamUtils {
-    public static ByteArrayInputStream createByteArrayInputStream(int size) {
-        byte[] buffer = new byte[size];
-        new Random().nextBytes(buffer);
-
-        return new ByteArrayInputStream(buffer);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java
index 925dfdeb..db63f8ba 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java
@@ -36,7 +36,8 @@
 import org.apache.http.message.BasicHeader;
 import org.robolectric.tester.org.apache.http.TestHttpResponse;
 
-import java.util.*;
+import java.util.HashMap;
+import java.util.Map;
 
 public class TestHttpResponseWithHeaders extends TestHttpResponse {
     private Map<String, Header> headers;
@@ -55,4 +56,9 @@ public void addHeader(String name, String value) {
     public Header getFirstHeader(String name) {
         return headers.get(name);
     }
+
+    @Override
+    public Header[] getAllHeaders() {
+        return headers.values().toArray(new Header[headers.size()]);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java
index 66700a9c..8e9afc9c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java
@@ -1,5 +1,7 @@
 package com.mopub.mobileads.test.support;
 
+import android.content.Context;
+
 import com.mopub.mobileads.factories.VastManagerFactory;
 import com.mopub.mobileads.util.vast.VastManager;
 
@@ -17,7 +19,7 @@ private static TestVastManagerFactory getTestFactory() {
     }
 
     @Override
-    public VastManager internalCreate() {
+    public VastManager internalCreate(final Context context) {
         return getTestFactory().mockVastManager;
     }
 }
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastVideoDownloadTaskFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastVideoDownloadTaskFactory.java
index 5cb997d2..9fa60cfd 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastVideoDownloadTaskFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastVideoDownloadTaskFactory.java
@@ -32,11 +32,9 @@
 
 package com.mopub.mobileads.test.support;
 
-import com.mopub.mobileads.DiskLruCache;
 import com.mopub.mobileads.VastVideoDownloadTask;
 import com.mopub.mobileads.factories.VastVideoDownloadTaskFactory;
 
-import static com.mopub.mobileads.VastVideoDownloadTask.OnDownloadCompleteListener;
 import static org.mockito.Mockito.mock;
 
 public class TestVastVideoDownloadTaskFactory extends VastVideoDownloadTaskFactory {
@@ -47,7 +45,7 @@ public static VastVideoDownloadTask getSingletonMock() {
     }
 
     @Override
-    protected VastVideoDownloadTask internalCreate(OnDownloadCompleteListener onDownloadCompleteListener, DiskLruCache diskLruCache) {
+    protected VastVideoDownloadTask internalCreate(VastVideoDownloadTask.VastVideoDownloadTaskListener vastVideoDownloadTaskListener) {
         return singletonMock;
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpResponsesTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpResponsesTest.java
index 23eefb48..5ab561b1 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpResponsesTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpResponsesTest.java
@@ -38,8 +38,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import static com.mopub.mobileads.util.ResponseHeader.AD_TIMEOUT;
-import static com.mopub.mobileads.util.ResponseHeader.SCROLLABLE;
+import static com.mopub.common.util.ResponseHeader.AD_TIMEOUT;
+import static com.mopub.common.util.ResponseHeader.SCROLLABLE;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpUtilsTest.java
deleted file mode 100644
index dfb3f697..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpUtilsTest.java
+++ /dev/null
@@ -1,83 +0,0 @@
-/*
- * Copyright (c) 2010-2013, MoPub Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *
- *  Redistributions of source code must retain the above copyright
- *   notice, this list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright
- *   notice, this list of conditions and the following disclaimer in the
- *   documentation and/or other materials provided with the distribution.
- *
- *  Neither the name of 'MoPub Inc.' nor the names of its contributors
- *   may be used to endorse or promote products derived from this software
- *   without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package com.mopub.mobileads.util;
-
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-import org.apache.http.HttpResponse;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-
-import java.io.*;
-import java.util.*;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.junit.Assert.fail;
-
-@RunWith(SdkTestRunner.class)
-public class HttpUtilsTest {
-
-    TestHttpResponseWithHeaders response;
-
-    @Before
-    public void setup() {
-        response = new TestHttpResponseWithHeaders(200, "woot");
-    }
-
-    @Test
-    public void ping_shouldSendNetworkRequestAndGetResponse() throws Exception {
-        Robolectric.addPendingHttpResponse(response);
-
-        HttpResponse expectedResponse = HttpUtils.ping("http://myurl.tv");
-
-        Scanner scanner = new Scanner(new InputStreamReader(expectedResponse.getEntity().getContent()));
-        StringBuilder content = new StringBuilder();
-        while (scanner.hasNext()) {
-            content.append(scanner.next());
-        }
-
-        assertThat(content.toString()).isEqualTo("woot");
-    }
-
-    @Test
-    public void ping_withNullUrl_shouldThrowException() throws Exception {
-        try {
-            HttpUtils.ping(null);
-            fail("logic error - should have thrown IllegalArgumentException");
-        } catch (Exception exception) {
-            assertThat(exception).isInstanceOf(IllegalArgumentException.class);
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java
index 1e10ab5c..26e5bf1a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java
@@ -1,173 +1,565 @@
 package com.mopub.mobileads.util.vast;
 
+import android.app.Activity;
+import android.content.Context;
+import android.view.Display;
+import android.view.WindowManager;
+
+import com.mopub.common.CacheService;
 import com.mopub.mobileads.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.ThreadUtils;
 
+import org.junit.After;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
 import org.robolectric.tester.org.apache.http.FakeHttpLayer;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.concurrent.Semaphore;
+
 import static com.mopub.mobileads.util.vast.VastManager.VastManagerListener;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 public class VastManagerTest {
-    private static final String TEST_VAST_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative></Creatives></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
-    private static final String TEST_NESTED_VAST_XML_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><VAST version='2.0'><Ad id='57722'><InLine><AdSystem version='1.0'>Tapad</AdSystem><AdTitle><![CDATA[PKW6T_LIV_DSN_Audience_TAPAD_3rd Party Audience Targeting_Action Movi]]></AdTitle><Description/><Impression><![CDATA[http://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression><Creatives><Creative sequence='1' id='57722'><Linear><Duration>00:00:15</Duration><VideoClicks><ClickThrough><![CDATA[http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com]]></ClickThrough></VideoClicks><MediaFiles><MediaFile delivery='progressive' bitrate='416' width='480' height='360' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video.mp4]]></MediaFile></MediaFiles></Linear></Creative></Creatives></InLine></Ad></VAST>";
-    private static final String TEST_VAST_BAD_NEST_URL_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml\"$|||</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative></Creatives></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
+    static final String TEST_VAST_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks><MediaFiles><MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video1.mp4]]></MediaFile></MediaFiles></Linear></Creative><Creative AdID=\"601364-Companion\"> <CompanionAds><Companion width=\"9000\"></Companion> </CompanionAds></Creative></Creatives></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
+    static final String TEST_NESTED_VAST_XML_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><VAST version='2.0'><Ad id='57722'><InLine><AdSystem version='1.0'>Tapad</AdSystem><AdTitle><![CDATA[PKW6T_LIV_DSN_Audience_TAPAD_3rd Party Audience Targeting_Action Movi]]></AdTitle><Description/><Impression><![CDATA[http://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression><Creatives><Creative sequence='1' id='57722'><Linear><Duration>00:00:15</Duration><VideoClicks><ClickThrough><![CDATA[http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com]]></ClickThrough></VideoClicks><MediaFiles><MediaFile delivery='progressive' bitrate='416' width='800' height='480' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video.mp4]]></MediaFile></MediaFiles></Linear></Creative><Creative AdID=\"601364-Companion\"><CompanionAds><Companion id=\"valid\" height=\"250\" width=\"300\"><StaticResource creativeType=\"image/jpeg\">http://demo.tremormedia.com/proddev/vast/Blistex1.jpg</StaticResource><TrackingEvents><Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking><Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking></TrackingEvents><CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough></Companion></CompanionAds></Creative></Creatives></InLine></Ad></VAST>";
+    static final String TEST_VAST_BAD_NEST_URL_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml\"$|||</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative></Creatives></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
 
-
-    private VastManager mVastManager;
+    private VastManager subject;
     private FakeHttpLayer mFakeHttpLayer;
-    private VastManagerListener mVastManagerListener;
+    private VastManagerListener vastManagerListener;
+    private Activity context;
+    private VastVideoConfiguration vastVideoConfiguration;
+    private Semaphore semaphore;
 
     @Before
     public void setup() {
-        mVastManager = new VastManager();
+        context = new Activity();
+        CacheService.initializeDiskCache(context);
+        subject = new VastManager(context);
         mFakeHttpLayer = Robolectric.getFakeHttpLayer();
-        mVastManagerListener = mock(VastManagerListener.class);
+
+        semaphore = new Semaphore(0);
+        vastManagerListener = mock(VastManagerListener.class);
+        doAnswer(new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
+                Object[] args = invocationOnMock.getArguments();
+                VastManagerTest.this.vastVideoConfiguration = (VastVideoConfiguration) args[0];
+                semaphore.release();
+                return null;
+            }
+        }).when(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
     }
 
-    private void processVast() {
-        mVastManager.processVast(TEST_VAST_XML_STRING, mVastManagerListener);
+    @After
+    public void tearDown() {
+        Robolectric.getFakeHttpLayer().clearPendingHttpResponses();
+        CacheService.clearAndNullCaches();
+    }
+
+    private void prepareVastVideoConfiguration() {
+        subject.prepareVastVideoConfiguration(TEST_VAST_XML_STRING, vastManagerListener);
 
         Robolectric.runBackgroundTasks();
         Robolectric.runUiThreadTasks();
     }
 
     @Test
-    public void processVast_shouldNotifyTheListenerAndContainTheCorrectVastValues() {
+    public void prepareVastVideoConfiguration_shouldNotifyTheListenerAndContainTheCorrectVastValues() throws Exception {
+        // Vast redirect responses
         mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+        // Video download response
+        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
+
+        assertThat(vastVideoConfiguration.getNetworkMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
+
+        final String expectedFilePathDiskCache = CacheService.getFilePathDiskCache(vastVideoConfiguration.getNetworkMediaFileUrl());
+        assertThat(vastVideoConfiguration.getDiskMediaFileUrl()).isEqualTo(expectedFilePathDiskCache);
+
+        assertThat(vastVideoConfiguration.getClickThroughUrl()).isEqualTo("http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com");
+        assertThat(vastVideoConfiguration.getImpressionTrackers().size()).isEqualTo(5);
+        assertThat(vastVideoConfiguration.getStartTrackers().size()).isEqualTo(1);
+        assertThat(vastVideoConfiguration.getFirstQuartileTrackers().size()).isEqualTo(1);
+        assertThat(vastVideoConfiguration.getMidpointTrackers().size()).isEqualTo(1);
+        assertThat(vastVideoConfiguration.getThirdQuartileTrackers().size()).isEqualTo(1);
+        assertThat(vastVideoConfiguration.getCompleteTrackers().size()).isEqualTo(1);
+        assertThat(vastVideoConfiguration.getClickTrackers().size()).isEqualTo(1);
+
+        final VastCompanionAd vastCompanionAd = vastVideoConfiguration.getVastCompanionAd();
+        assertThat(vastCompanionAd.getWidth()).isEqualTo(300);
+        assertThat(vastCompanionAd.getHeight()).isEqualTo(250);
+        assertThat(vastCompanionAd.getImageUrl()).isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
+        assertThat(vastCompanionAd.getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
+        assertThat(vastCompanionAd.getClickTrackers())
+                .containsOnly("http://myTrackingURL/firstCompanionCreativeView", "http://myTrackingURL/secondCompanionCreativeView");
+    }
 
-        processVast();
+    @Test
+    public void prepareVastVideoConfiguration_shouldHandleMultipleRedirects() throws Exception {
+        // Vast redirect responses
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_VAST_XML_STRING);
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_VAST_XML_STRING);
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+        // Video download response
+        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
 
-        verify(mVastManagerListener).onComplete(mVastManager);
-        assertThat(mVastManager.getMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
-        assertThat(mVastManager.getClickThroughUrl()).isEqualTo("http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com");
-        assertThat(mVastManager.getImpressionTrackers().size()).isEqualTo(5);
-        assertThat(mVastManager.getVideoStartTrackers().size()).isEqualTo(1);
-        assertThat(mVastManager.getVideoFirstQuartileTrackers().size()).isEqualTo(1);
-        assertThat(mVastManager.getVideoMidpointTrackers().size()).isEqualTo(1);
-        assertThat(mVastManager.getVideoThirdQuartileTrackers().size()).isEqualTo(1);
-        assertThat(mVastManager.getVideoCompleteTrackers().size()).isEqualTo(1);
-        assertThat(mVastManager.getClickTrackers().size()).isEqualTo(1);
+        // at this point it should have 3 sets of data from TEST_VAST_XML_STRING and one set from TEST_NESTED_VAST_XML_STRING
+        assertThat(vastVideoConfiguration.getNetworkMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
+        final String expectedFilePathDiskCache = CacheService.getFilePathDiskCache(vastVideoConfiguration.getNetworkMediaFileUrl());
+        assertThat(vastVideoConfiguration.getDiskMediaFileUrl()).isEqualTo(expectedFilePathDiskCache);
+
+        assertThat(vastVideoConfiguration.getClickThroughUrl()).isEqualTo("http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com");
+        assertThat(vastVideoConfiguration.getImpressionTrackers().size()).isEqualTo(13);
+        assertThat(vastVideoConfiguration.getStartTrackers().size()).isEqualTo(3);
+        assertThat(vastVideoConfiguration.getFirstQuartileTrackers().size()).isEqualTo(3);
+        assertThat(vastVideoConfiguration.getMidpointTrackers().size()).isEqualTo(3);
+        assertThat(vastVideoConfiguration.getThirdQuartileTrackers().size()).isEqualTo(3);
+        assertThat(vastVideoConfiguration.getCompleteTrackers().size()).isEqualTo(3);
+        assertThat(vastVideoConfiguration.getClickTrackers().size()).isEqualTo(3);
+
+        final VastCompanionAd vastCompanionAd = vastVideoConfiguration.getVastCompanionAd();
+        assertThat(vastCompanionAd.getWidth()).isEqualTo(300);
+        assertThat(vastCompanionAd.getHeight()).isEqualTo(250);
+        assertThat(vastCompanionAd.getImageUrl()).isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
+        assertThat(vastCompanionAd.getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
+        assertThat(vastCompanionAd.getClickTrackers())
+                .containsOnly("http://myTrackingURL/firstCompanionCreativeView", "http://myTrackingURL/secondCompanionCreativeView");
     }
 
+
     @Test
-    public void processVast_shouldNotifyTheListenerAndContainTheCorrectVastValuesWhenAVastRedirectFails() {
+    public void prepareVastVideoConfiguration_shouldReturnCorrectVastValuesWhenAVastRedirectFails() throws Exception {
+        // Vast redirect response
         mFakeHttpLayer.addPendingHttpResponse(404, "");
+        // Video download response
+        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
+
+        assertThat(vastVideoConfiguration.getNetworkMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video1.mp4");
 
-        processVast();
+        final String expectedFilePathDiskCache = CacheService.getFilePathDiskCache(vastVideoConfiguration.getNetworkMediaFileUrl());
+        assertThat(vastVideoConfiguration.getDiskMediaFileUrl()).isEqualTo(expectedFilePathDiskCache);
 
-        verify(mVastManagerListener).onComplete(mVastManager);
-        assertThat(mVastManager.getMediaFileUrl()).isEqualTo(null);
-        assertThat(mVastManager.getClickThroughUrl()).isEqualTo(null);
-        assertThat(mVastManager.getImpressionTrackers().size()).isEqualTo(4);
-        assertThat(mVastManager.getVideoFirstQuartileTrackers().size()).isEqualTo(1);
+        assertThat(vastVideoConfiguration.getClickThroughUrl()).isEqualTo(null);
+        assertThat(vastVideoConfiguration.getImpressionTrackers().size()).isEqualTo(4);
+        assertThat(vastVideoConfiguration.getFirstQuartileTrackers().size()).isEqualTo(1);
     }
 
     @Test
-    public void processVast_shouldNotifyTheListenerAndContainTheCorrectVastValuesWhenAVastRedirectUrlIsInvalid() {
-        mVastManager.processVast(TEST_VAST_BAD_NEST_URL_XML_STRING, mVastManagerListener);
+    public void prepareVastVideoConfiguration_withNoMediaUrlInXml_shouldReturnNull() throws Exception {
+        subject.prepareVastVideoConfiguration(TEST_VAST_BAD_NEST_URL_XML_STRING, vastManagerListener);
 
         Robolectric.runBackgroundTasks();
         Robolectric.runUiThreadTasks();
+        semaphore.acquire();
 
-        verify(mVastManagerListener).onComplete(mVastManager);
-        assertThat(mVastManager.getMediaFileUrl()).isEqualTo(null);
-        assertThat(mVastManager.getClickThroughUrl()).isEqualTo(null);
-        assertThat(mVastManager.getImpressionTrackers().size()).isEqualTo(4);
-        assertThat(mVastManager.getVideoFirstQuartileTrackers().size()).isEqualTo(1);
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
+        assertThat(vastVideoConfiguration).isEqualTo(null);
     }
 
     @Test
-    public void processVast_shouldNotFollowRedirectsOnceTheLimitHasBeenReached() {
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
-
-        mVastManager.setTimesFollowedVastRedirect(VastManager.MAX_TIMES_TO_FOLLOW_VAST_REDIRECT);
+    public void prepareVastVideoConfiguration_withNullXml_shouldReturnNull() throws Exception {
+        subject.prepareVastVideoConfiguration(null, vastManagerListener);
 
-        processVast();
+        Robolectric.runBackgroundTasks();
+        Robolectric.runUiThreadTasks();
+        semaphore.acquire();
 
-        verify(mVastManagerListener).onComplete(mVastManager);
-        assertThat(mVastManager.getMediaFileUrl()).isEqualTo(null);
-        assertThat(mVastManager.getClickThroughUrl()).isEqualTo(null);
-        assertThat(mVastManager.getImpressionTrackers().size()).isEqualTo(4);
-        assertThat(mVastManager.getVideoFirstQuartileTrackers().size()).isEqualTo(1);
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
+        assertThat(vastVideoConfiguration).isEqualTo(null);
     }
 
     @Test
-    public void processVast_shouldHandleNullVastXmlGracefully() {
-        mVastManager.processVast(null, mVastManagerListener);
+    public void prepareVastVideoConfiguration_withEmptyXml_shouldReturnNull() throws Exception {
+        subject.prepareVastVideoConfiguration("", vastManagerListener);
 
         Robolectric.runBackgroundTasks();
         Robolectric.runUiThreadTasks();
+        semaphore.acquire();
 
-        verify(mVastManagerListener).onComplete(mVastManager);
-        assertThat(mVastManager.getMediaFileUrl()).isEqualTo(null);
-        assertThat(mVastManager.getClickThroughUrl()).isEqualTo(null);
-        assertThat(mVastManager.getImpressionTrackers().size()).isEqualTo(0);
-        assertThat(mVastManager.getVideoFirstQuartileTrackers().size()).isEqualTo(0);
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
+        assertThat(vastVideoConfiguration).isEqualTo(null);
     }
 
     @Test
-    public void processVast_shouldHandleEmptyVastXmlGracefully() {
-        mVastManager.processVast("", mVastManagerListener);
+    public void prepareVastVideoConfiguration_withVideoInDiskCache_shouldNotDownloadVideo() throws Exception {
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
 
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
+        CacheService.putToDiskCache("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4", "video_data".getBytes());
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
 
-        verify(mVastManagerListener).onComplete(mVastManager);
-        assertThat(mVastManager.getMediaFileUrl()).isEqualTo(null);
-        assertThat(mVastManager.getClickThroughUrl()).isEqualTo(null);
-        assertThat(mVastManager.getImpressionTrackers().size()).isEqualTo(0);
-        assertThat(mVastManager.getVideoFirstQuartileTrackers().size()).isEqualTo(0);
+        assertThat(mFakeHttpLayer.getSentHttpRequestInfos().size()).isEqualTo(1);
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
+        assertThat(vastVideoConfiguration.getDiskMediaFileUrl())
+                .isEqualTo(CacheService.getFilePathDiskCache("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4"));
     }
 
     @Test
-    public void cancel_shouldCancelBackgroundProcessingAndNotNotifyTheListener() {
+    public void prepareVastVideoConfiguration_withUninitializedDiskCache_shouldReturnNull() throws Exception {
+        CacheService.clearAndNullCaches();
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
+        assertThat(vastVideoConfiguration).isEqualTo(null);
+    }
+
+    @Test
+    public void cancel_shouldCancelBackgroundProcessingAndNotNotifyListenerWithNull() throws Exception {
         mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
 
         Robolectric.getBackgroundScheduler().pause();
 
-        mVastManager.processVast(TEST_VAST_XML_STRING, mVastManagerListener);
+        subject.prepareVastVideoConfiguration(TEST_VAST_XML_STRING, vastManagerListener);
 
-        mVastManager.cancel();
+        subject.cancel();
 
         Robolectric.runBackgroundTasks();
         Robolectric.runUiThreadTasks();
+        semaphore.acquire();
 
-        verify(mVastManagerListener, never()).onComplete(mVastManager);
-        assertThat(mVastManager.getMediaFileUrl()).isEqualTo(null);
-        assertThat(mVastManager.getClickThroughUrl()).isEqualTo(null);
-        assertThat(mVastManager.getImpressionTrackers().size()).isEqualTo(0);
-        assertThat(mVastManager.getVideoFirstQuartileTrackers().size()).isEqualTo(0);
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
+        assertThat(vastVideoConfiguration).isEqualTo(null);
     }
 
     @Test
-    public void processVast_shouldHandleMultipleRedirects() {
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_VAST_XML_STRING);
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_VAST_XML_STRING);
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+    public void getBestMediaFileUrl_shouldReturnMediaFileUrl() throws Exception {
+        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, "video/mp4", "video_url");
 
-        processVast();
+        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
+        assertThat(bestMediaFileUrl).isEqualTo("video_url");
+    }
 
-        // at this point it should have 3 sets of data from TEST_VAST_XML_STRING and one set from TEST_NESTED_VAST_XML_STRING
-        verify(mVastManagerListener).onComplete(mVastManager);
-        assertThat(mVastManager.getMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
-        assertThat(mVastManager.getClickThroughUrl()).isEqualTo("http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com");
-        assertThat(mVastManager.getImpressionTrackers().size()).isEqualTo(13);
-        assertThat(mVastManager.getVideoStartTrackers().size()).isEqualTo(3);
-        assertThat(mVastManager.getVideoFirstQuartileTrackers().size()).isEqualTo(3);
-        assertThat(mVastManager.getVideoMidpointTrackers().size()).isEqualTo(3);
-        assertThat(mVastManager.getVideoThirdQuartileTrackers().size()).isEqualTo(3);
-        assertThat(mVastManager.getVideoCompleteTrackers().size()).isEqualTo(3);
-        assertThat(mVastManager.getClickTrackers().size()).isEqualTo(3);
+    @Test
+    public void getBestMediaFileUrl_withNullMediaType_shouldReturnNull() throws Exception {
+        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, null, "video_url");
+
+        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
+        assertThat(bestMediaFileUrl).isNull();
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withIncompatibleMediaType_shouldReturnNull() throws Exception {
+        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, "video/rubbish", "video_url");
+
+        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
+        assertThat(bestMediaFileUrl).isNull();
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withNullMediaUrl_shouldReturnNull() throws Exception {
+        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, "video/mp4", null);
+
+        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
+        assertThat(bestMediaFileUrl).isNull();
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withNullDimension_shouldReturnMediaFileUrl() throws Exception {
+        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(null, 250, "video/mp4", "video_url");
+
+        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
+        assertThat(bestMediaFileUrl).isEqualTo("video_url");
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withZeroDimension_shouldReturnMediaFileUrl() throws Exception {
+        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(0, 250, "video/mp4", "video_url");
+
+        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
+        assertThat(bestMediaFileUrl).isEqualTo("video_url");
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withNegativeDimension_shouldReturnMediaFileUrl() throws Exception {
+        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(-1, 250, "video/mp4", "video_url");
+
+        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
+        assertThat(bestMediaFileUrl).isEqualTo("video_url");
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withSameAspectRatios_shouldReturnUrlWithAreaCloserToScreenArea1() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Triple screen size
+        final VastXmlManager.MediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(2400, 1440, "video/mp4", "video_url1");
+        // Double screen size
+        final VastXmlManager.MediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(1600, 960, "video/mp4", "video_url2");
+
+        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
+        assertThat(bestMediaFileUrl).isEqualTo("video_url2");
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withSameAspectRatios_shouldReturnUrlWithAreaCloserToScreenArea2() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Triple screen size
+        final VastXmlManager.MediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(2400, 1440, "video/mp4", "video_url1");
+        // Half screen size
+        final VastXmlManager.MediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(400, 240, "video/mp4", "video_url2");
+
+        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
+        assertThat(bestMediaFileUrl).isEqualTo("video_url2");
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withSameArea_shouldReturnUrlWithAspectRatioCloserToScreenAspectRatio() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Landscape
+        final VastXmlManager.MediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(400, 240, "video/mp4", "video_url1");
+        // Portrait
+        final VastXmlManager.MediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(240, 400, "video/mp4", "video_url2");
+
+        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
+        assertThat(bestMediaFileUrl).isEqualTo("video_url1");
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withInvalidMediaTypeAndNullDimension_shouldReturnUrlWithNullDimension() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Invalid media type
+        final VastXmlManager.MediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(800, 480, "video/invalid", "video_url1");
+        // Null dimension
+        final VastXmlManager.MediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(null, null, "video/mp4", "video_url2");
+
+        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
+        assertThat(bestMediaFileUrl).isEqualTo("video_url2");
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withInvalidMediaTypeAndNullMediaType_shouldReturnNull() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        final VastXmlManager.MediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(800, 480, "video/invalid", "video_url1");
+        final VastXmlManager.MediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(800, 480, null, "video_url2");
+
+        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
+        assertThat(bestMediaFileUrl).isNull();
+    }
+
+    @Test
+    public void getBestCompanionAd_shouldReturnCompanionAd() throws Exception {
+        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(300, 250, "image/jpeg", "image_url");
+
+        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
+        assertCompanionAdsAreEqual(companionXmlManager, bestCompanionAd);
+    }
+
+    @Test
+    public void getBestCompanionAd_withNullMediaType_shouldReturnNull() throws Exception {
+        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(300, 250, null, "image_url");
+
+        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
+        assertThat(bestCompanionAd).isNull();
+    }
+
+    @Test
+    public void getBestCompanionAd_withIncompatibleMediaType_shouldReturnNull() throws Exception {
+        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(300, 250, "image/rubbish", "image_url");
+
+        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
+        assertThat(bestCompanionAd).isNull();
+    }
+
+    @Test
+    public void getBestCompanionAd_withNullImageUrl_shouldReturnNull() throws Exception {
+        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(300, 250, "image/png", null);
+
+        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
+        assertThat(bestCompanionAd).isNull();
+    }
+
+    @Test
+    public void getBestCompanionAd_withNullDimension_shouldReturnCompanionAd() throws Exception {
+        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(null, 250, "image/png", "image_url");
+
+        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
+        assertCompanionAdsAreEqual(companionXmlManager, bestCompanionAd);
+    }
+
+    @Test
+    public void getBestCompanionAd_withZeroDimension_shouldReturnMediaFileUrl() throws Exception {
+        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(0, 250, "image/png", "image_url");
+
+        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
+        assertCompanionAdsAreEqual(companionXmlManager, bestCompanionAd);
+    }
+
+    @Test
+    public void getBestCompanionAd_withNegativeDimension_shouldReturnMediaFileUrl() throws Exception {
+        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(-300, 250, "image/png", "image_url");
+
+        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
+        assertCompanionAdsAreEqual(companionXmlManager, bestCompanionAd);
+    }
+
+    @Test
+    public void getBestCompanionAd_withSameAspectRatios_shouldReturnCompanionAdWithAreaCloserToScreenArea1() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Triple screen size
+        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager1 = initializeCompanionXmlManagerMock(2400, 1440, "image/png", "image_url1");
+        // Double screen size
+        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager2 = initializeCompanionXmlManagerMock(1600, 960, "image/bmp", "image_url2");
+
+        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager1, companionXmlManager2));
+        assertCompanionAdsAreEqual(companionXmlManager2, bestCompanionAd);
+    }
+
+    @Test
+    public void getBestCompanionAd_withSameAspectRatios_shouldReturnCompanionAdWithAreaCloserToScreenArea2() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Triple screen size
+        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager1 = initializeCompanionXmlManagerMock(2400, 1440, "image/png", "image_url1");
+        // Half screen size
+        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager2 = initializeCompanionXmlManagerMock(400, 240, "image/bmp", "image_url2");
+
+        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager1, companionXmlManager2));
+        assertCompanionAdsAreEqual(companionXmlManager2, bestCompanionAd);
+    }
+
+    @Test
+    public void getBestCompanionAd_withSameArea_shouldReturnCompanionAdWithAspectRatioCloserToScreenAspectRatio() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Landscape
+        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager1 = initializeCompanionXmlManagerMock(400, 240, "image/png", "image_url1");
+        // Portrait
+        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager2 = initializeCompanionXmlManagerMock(240, 400, "image/bmp", "image_url2");
+
+        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager1, companionXmlManager2));
+        assertCompanionAdsAreEqual(companionXmlManager1, bestCompanionAd);
+    }
+
+    @Test
+    public void getBestCompanionAd_withInvalidMediaTypeAndNullDimension_shouldReturnCompanionAdWithNullDimension() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager1 = initializeCompanionXmlManagerMock(800, 480, "image/invalid", "image_url1");
+        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager2 = initializeCompanionXmlManagerMock(null, null, "image/bmp", "image_url2");
+
+        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager1, companionXmlManager2));
+        assertCompanionAdsAreEqual(companionXmlManager2, bestCompanionAd);
+    }
+
+    @Test
+    public void getBestCompanionAdithInvalidMediaTypeAndNullMediaType_shouldReturnNull() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager1 = initializeCompanionXmlManagerMock(800, 480, "image/invalid", "image_url1");
+        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager2 = initializeCompanionXmlManagerMock(800, 480, null, "image_url2");
+
+        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager1, companionXmlManager2));
+        assertThat(bestCompanionAd).isEqualTo(null);
+    }
+
+    private VastXmlManager.MediaXmlManager initializeMediaXmlManagerMock(
+            final Integer width,
+            final Integer height,
+            final String type,
+            final String mediaUrl) {
+        VastXmlManager.MediaXmlManager mediaXmlManager = mock(VastXmlManager.MediaXmlManager.class);
+        when(mediaXmlManager.getWidth()).thenReturn(width);
+        when(mediaXmlManager.getHeight()).thenReturn(height);
+        when(mediaXmlManager.getType()).thenReturn(type);
+        when(mediaXmlManager.getMediaUrl()).thenReturn(mediaUrl);
+        return mediaXmlManager;
+    }
+
+    private VastXmlManager.ImageCompanionAdXmlManager initializeCompanionXmlManagerMock(
+            final Integer width,
+            final Integer height,
+            final String type,
+            final String imageUrl) {
+        VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = mock(VastXmlManager.ImageCompanionAdXmlManager.class);
+        when(companionXmlManager.getWidth()).thenReturn(width);
+        when(companionXmlManager.getHeight()).thenReturn(height);
+        when(companionXmlManager.getType()).thenReturn(type);
+        when(companionXmlManager.getImageUrl()).thenReturn(imageUrl);
+        return companionXmlManager;
+    }
+
+    private void assertCompanionAdsAreEqual(
+            final VastXmlManager.ImageCompanionAdXmlManager imageCompanionAdXmlManager,
+            final VastCompanionAd vastCompanionAd) {
+        final VastCompanionAd vastCompanionAd1 = new VastCompanionAd(
+                imageCompanionAdXmlManager.getWidth(),
+                imageCompanionAdXmlManager.getHeight(),
+                imageCompanionAdXmlManager.getImageUrl(),
+                imageCompanionAdXmlManager.getClickThroughUrl(),
+                new ArrayList<String>(imageCompanionAdXmlManager.getClickTrackers())
+        );
+        assertCompanionAdsAreEqual(vastCompanionAd, vastCompanionAd1);
+    }
+
+    private void assertCompanionAdsAreEqual(
+            final VastCompanionAd vastCompanionAd1,
+            final VastCompanionAd vastCompanionAd2) {
+        assertThat(vastCompanionAd1.getWidth()).isEqualTo(vastCompanionAd2.getWidth());
+        assertThat(vastCompanionAd1.getHeight()).isEqualTo(vastCompanionAd2.getHeight());
+        assertThat(vastCompanionAd1.getImageUrl()).isEqualTo(vastCompanionAd2.getImageUrl());
+        assertThat(vastCompanionAd1.getClickThroughUrl()).isEqualTo(vastCompanionAd2.getClickThroughUrl());
+        assertThat(vastCompanionAd1.getClickTrackers()).isEqualTo(vastCompanionAd2.getClickTrackers());
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregatorTest.java
new file mode 100644
index 00000000..3b9324ad
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregatorTest.java
@@ -0,0 +1,71 @@
+package com.mopub.mobileads.util.vast;
+
+import com.mopub.mobileads.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+import org.robolectric.Robolectric;
+import org.robolectric.tester.org.apache.http.FakeHttpLayer;
+
+import java.util.List;
+import java.util.concurrent.Semaphore;
+
+import static com.mopub.mobileads.util.vast.VastXmlManagerAggregator.VastXmlManagerAggregatorListener;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.anyListOf;
+import static org.mockito.Mockito.doAnswer;
+import static org.mockito.Mockito.mock;
+
+@RunWith(SdkTestRunner.class)
+public class VastXmlManagerAggregatorTest {
+    static final String TEST_VAST_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks><MediaFiles><MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video1.mp4]]></MediaFile></MediaFiles></Linear></Creative><Creative AdID=\"601364-Companion\"> <CompanionAds><Companion width=\"9000\"></Companion> </CompanionAds></Creative></Creatives></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
+    static final String TEST_NESTED_VAST_XML_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><VAST version='2.0'><Ad id='57722'><InLine><AdSystem version='1.0'>Tapad</AdSystem><AdTitle><![CDATA[PKW6T_LIV_DSN_Audience_TAPAD_3rd Party Audience Targeting_Action Movi]]></AdTitle><Description/><Impression><![CDATA[http://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression><Creatives><Creative sequence='1' id='57722'><Linear><Duration>00:00:15</Duration><VideoClicks><ClickThrough><![CDATA[http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com]]></ClickThrough></VideoClicks><MediaFiles><MediaFile delivery='progressive' bitrate='416' width='800' height='480' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video.mp4]]></MediaFile></MediaFiles></Linear></Creative><Creative AdID=\"601364-Companion\"><CompanionAds><Companion id=\"valid\" height=\"250\" width=\"300\"><StaticResource creativeType=\"image/jpeg\">http://demo.tremormedia.com/proddev/vast/Blistex1.jpg</StaticResource><TrackingEvents><Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking><Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking></TrackingEvents><CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough></Companion></CompanionAds></Creative></Creatives></InLine></Ad></VAST>";
+    static final String TEST_VAST_BAD_NEST_URL_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml\"$|||</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative></Creatives></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
+
+    private FakeHttpLayer mFakeHttpLayer;
+    private Semaphore semaphore;
+    private VastXmlManagerAggregatorListener vastXmlManagerAggregatorListener;
+    private VastXmlManagerAggregator subject;
+    private List<VastXmlManager> vastXmlManagers;
+
+    @Before
+    public void setup() {
+        mFakeHttpLayer = Robolectric.getFakeHttpLayer();
+
+        semaphore = new Semaphore(0);
+        vastXmlManagerAggregatorListener = mock(VastXmlManagerAggregatorListener.class);
+        doAnswer(new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
+                Object[] args = invocationOnMock.getArguments();
+                VastXmlManagerAggregatorTest.this.vastXmlManagers = (List<VastXmlManager>) args[0];
+                semaphore.release();
+                return null;
+            }
+        }).when(vastXmlManagerAggregatorListener).onAggregationComplete(anyListOf(VastXmlManager.class));
+
+        subject = new VastXmlManagerAggregator(vastXmlManagerAggregatorListener);
+    }
+
+    // NOTE most of the functionality of this class is tested through VastManagerTest
+    // through integration tests
+
+    @Test
+    public void processVast_shouldNotFollowRedirectsOnceTheLimitHasBeenReached() throws Exception {
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+
+        subject.setTimesFollowedVastRedirect(VastXmlManagerAggregator.MAX_TIMES_TO_FOLLOW_VAST_REDIRECT);
+        subject.execute(TEST_VAST_XML_STRING);
+        semaphore.acquire();
+
+        assertThat(vastXmlManagers.size()).isEqualTo(1);
+        assertThat(vastXmlManagers.get(0).getMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video1.mp4");
+        assertThat(vastXmlManagers.get(0).getClickThroughUrl()).isEqualTo(null);
+        assertThat(vastXmlManagers.get(0).getImpressionTrackers().size()).isEqualTo(4);
+        assertThat(vastXmlManagers.get(0).getVideoFirstQuartileTrackers().size()).isEqualTo(1);
+    }
+
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerTest.java
index fa73e564..80072ad8 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerTest.java
@@ -1,7 +1,6 @@
 package com.mopub.mobileads.util.vast;
 
 import com.mopub.mobileads.test.support.SdkTestRunner;
-import com.mopub.mobileads.util.vast.VastXmlManager;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -133,8 +132,96 @@
             "                                </MediaFiles>" +
             "                            </Linear>" +
             "                        </Creative>" +
-            "                        <Creative sequence=\"1\" AdID=\"\">" +
-            "                            <CompanionAds></CompanionAds>" +
+            "                        <Creative AdID=\"601364-Companion\">" +
+            "                            <CompanionAds>" +
+            "                               <Companion height=\"90\" width=\"728\">" +
+            "                                   <StaticResource creativeType=\"image/jpeg\">http://demo.tremormedia.com/proddev/vast/728x90_banner1.jpg</StaticResource>" +
+            "                                   <CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough>" +
+            "                                   <BADTrackingEvents>" +
+            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
+            "                                   </BADTrackingEvents>" +
+            "                               </Companion>" +
+            "                               <Companion id=\"valid\" height=\"250\" width=\"300\">" +
+            "                                   <StaticResource creativeType=\"image/png\">http://demo.tremormedia.com/proddev/vast/Blistex1.png</StaticResource>" +
+            "                                   <TrackingEvents>" +
+            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
+            "                                   </TrackingEvents>" +
+            "                                   <CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough>" +
+            "                               </Companion>" +
+            "                               <Companion height=\"789\" width=\"456\">" +
+            "                                   <StaticResource creativeType=\"image/bmp\">" +
+            "                                       <![CDATA[" +
+            "                                           http://cdn.liverail.com/adasset/229/7969/300x250.bmp" +
+            "                                       ]]>" +
+            "                                   </StaticResource>" +
+            "                                   <TrackingEvents>" +
+            "                                       <Tracking event=\"creativeView\">" +
+            "                                           <![CDATA[" +
+            "                                               http://trackingUrl1.com/" +
+            "                                           ]]>" +
+            "                                       </Tracking>" +
+            "                                   </TrackingEvents>" +
+            "                                   <CompanionClickThrough>" +
+            "                                       <![CDATA[" +
+            "                                           http://clickThroughUrl1.com/" +
+            "                                       ]]>" +
+            "                                   </CompanionClickThrough>" +
+            "                               </Companion>" +
+            "                               <Companion height=\"789\" width=\"1011\">" +
+            "                                   <StaticResource creativeType=\"image/gif\">" +
+            "                                       <![CDATA[" +
+            "                                           http://cdn.liverail.com/adasset/229/7969/300x250.gif" +
+            "                                       ]]>" +
+            "                                   </StaticResource>" +
+            "                                   <CompanionClickThrough>" +
+            "                                       <![CDATA[" +
+            "                                           http://clickThroughUrl2.com/" +
+            "                                       ]]>" +
+            "                                   </CompanionClickThrough>" +
+            "                               </Companion>" +
+            "                               <Companion width=\"300\" height=\"60\">" +
+            "                                   <StaticResource creativeType=\"application/x-shockwave-flash\">" +
+            "                                       <![CDATA[" +
+            "                                           http://cdn.liverail.com/adasset4/1331/229/7969/5122396e510b80db6b5ef4013ddabe90.swf" +
+            "                                       ]]>" +
+            "                                   </StaticResource>" +
+            "                                   <TrackingEvents>" +
+            "                                       <Tracking event=\"creativeView\">" +
+            "                                           <![CDATA[" +
+            "                                               http://trackingUrl2.com/" +
+            "                                           ]]>" +
+            "                                       </Tracking>" +
+            "                                   </TrackingEvents>" +
+            "                                   <CompanionClickThrough>" +
+            "                                       <![CDATA[" +
+            "                                           http://clickThroughUrl3.com/" +
+            "                                       ]]>" +
+            "                                   </CompanionClickThrough>" +
+            "                               </Companion>" +
+            "                               <Companion id=\"valid\" height=\"249\" width=\"299\">" +
+            "                                   <BADStaticResource creativeType=\"image/jpeg\">http://demo.tremormedia.com/proddev/vast/Blistex1.jpg</BADStaticResource>" +
+            "                                   <TrackingEvents>" +
+            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
+            "                                           <BADTracking event=\"creativeView\">http://myTrackingURL/thirdCompanionCreativeView</BADTracking>" +
+            "                                           <Tracking BADevent=\"creativeView\">http://myTrackingURL/fourthCompanionCreativeView</Tracking>" +
+            "                                           <Tracking event=\"BADcreativeView\">http://myTrackingURL/fifthCompanionCreativeView</Tracking>" +
+            "                                   </TrackingEvents>" +
+            "                                   <BADCompanionClickThrough>http://www.tremormedia.com</BADCompanionClickThrough>" +
+            "                               </Companion>" +
+            "                               <Companion width=\"9000\">" +
+            "                                   <TrackingEvents>" +
+            "                                       <ThisWillNotBeFound>" +
+            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
+            "                                       </ThisWillNotBeFound>" +
+            "                                   </TrackingEvents>" +
+            "                               </Companion>" +
+            "                               <BADCompanion>" +
+            "                               </BADCompanion>" +
+            "                            </CompanionAds>" +
             "                        </Creative>" +
             "                    </Creatives>" +
             "                    <Extensions>" +
@@ -293,6 +380,63 @@ public void getClickTrackers_shouldReturnTheCorrectValue() {
         assertThat(tracker2).isEqualTo("http://ad.doubleclick.net/clk;212442087;33815766;i?http://www.google.com/support/richmedia");
     }
 
+    @Test
+    public void getCompanionAdXmlManagers_shouldReturnListOfPopulatedCompanionAdXmlManagers() throws Exception {
+        List<VastXmlManager.ImageCompanionAdXmlManager> imageCompanionAdXmlManagers = mXmlManager.getCompanionAdXmlManagers();
+        assertThat(imageCompanionAdXmlManagers.size()).isEqualTo(7);
+
+        assertThat(imageCompanionAdXmlManagers.get(0).getWidth()).isEqualTo(728);
+        assertThat(imageCompanionAdXmlManagers.get(0).getHeight()).isEqualTo(90);
+        assertThat(imageCompanionAdXmlManagers.get(0).getType()).isEqualTo("image/jpeg");
+        assertThat(imageCompanionAdXmlManagers.get(0).getImageUrl()).isEqualTo("http://demo.tremormedia.com/proddev/vast/728x90_banner1.jpg");
+        assertThat(imageCompanionAdXmlManagers.get(0).getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
+        assertThat(imageCompanionAdXmlManagers.get(0).getClickTrackers()).isEmpty();
+
+        assertThat(imageCompanionAdXmlManagers.get(1).getWidth()).isEqualTo(300);
+        assertThat(imageCompanionAdXmlManagers.get(1).getHeight()).isEqualTo(250);
+        assertThat(imageCompanionAdXmlManagers.get(1).getType()).isEqualTo("image/png");
+        assertThat(imageCompanionAdXmlManagers.get(1).getImageUrl()).isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.png");
+        assertThat(imageCompanionAdXmlManagers.get(1).getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
+        assertThat(imageCompanionAdXmlManagers.get(1).getClickTrackers())
+                .containsOnly("http://myTrackingURL/firstCompanionCreativeView", "http://myTrackingURL/secondCompanionCreativeView");
+
+        assertThat(imageCompanionAdXmlManagers.get(2).getWidth()).isEqualTo(456);
+        assertThat(imageCompanionAdXmlManagers.get(2).getHeight()).isEqualTo(789);
+        assertThat(imageCompanionAdXmlManagers.get(2).getType()).isEqualTo("image/bmp");
+        assertThat(imageCompanionAdXmlManagers.get(2).getImageUrl()).isEqualTo("http://cdn.liverail.com/adasset/229/7969/300x250.bmp");
+        assertThat(imageCompanionAdXmlManagers.get(2).getClickThroughUrl()).isEqualTo("http://clickThroughUrl1.com/");
+        assertThat(imageCompanionAdXmlManagers.get(2).getClickTrackers()).containsOnly("http://trackingUrl1.com/");
+
+        assertThat(imageCompanionAdXmlManagers.get(3).getWidth()).isEqualTo(1011);
+        assertThat(imageCompanionAdXmlManagers.get(3).getHeight()).isEqualTo(789);
+        assertThat(imageCompanionAdXmlManagers.get(3).getType()).isEqualTo("image/gif");
+        assertThat(imageCompanionAdXmlManagers.get(3).getImageUrl()).isEqualTo("http://cdn.liverail.com/adasset/229/7969/300x250.gif");
+        assertThat(imageCompanionAdXmlManagers.get(3).getClickThroughUrl()).isEqualTo("http://clickThroughUrl2.com/");
+        assertThat(imageCompanionAdXmlManagers.get(3).getClickTrackers()).isEmpty();
+
+        assertThat(imageCompanionAdXmlManagers.get(4).getWidth()).isEqualTo(300);
+        assertThat(imageCompanionAdXmlManagers.get(4).getHeight()).isEqualTo(60);
+        assertThat(imageCompanionAdXmlManagers.get(4).getType()).isEqualTo("application/x-shockwave-flash");
+        assertThat(imageCompanionAdXmlManagers.get(4).getImageUrl()).isEqualTo("http://cdn.liverail.com/adasset4/1331/229/7969/5122396e510b80db6b5ef4013ddabe90.swf");
+        assertThat(imageCompanionAdXmlManagers.get(4).getClickThroughUrl()).isEqualTo("http://clickThroughUrl3.com/");
+        assertThat(imageCompanionAdXmlManagers.get(4).getClickTrackers()).containsOnly("http://trackingUrl2.com/");
+
+        assertThat(imageCompanionAdXmlManagers.get(5).getWidth()).isEqualTo(299);
+        assertThat(imageCompanionAdXmlManagers.get(5).getHeight()).isEqualTo(249);
+        assertThat(imageCompanionAdXmlManagers.get(5).getType()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(5).getImageUrl()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(5).getClickThroughUrl()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(5).getClickTrackers())
+                .containsOnly("http://myTrackingURL/firstCompanionCreativeView", "http://myTrackingURL/secondCompanionCreativeView");
+
+        assertThat(imageCompanionAdXmlManagers.get(6).getWidth()).isEqualTo(9000);
+        assertThat(imageCompanionAdXmlManagers.get(6).getHeight()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(6).getType()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(6).getImageUrl()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(6).getClickThroughUrl()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(6).getClickTrackers()).isEmpty();
+    }
+
     @Test
     public void getMediaFileUrl_shouldReturnTheCorrectValue() {
         String url = mXmlManager.getMediaFileUrl();
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
index 0d4d3c36..db692e8b 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
@@ -9,6 +9,7 @@
 import org.junit.runner.RunWith;
 
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
 
 @RunWith(SdkTestRunner.class)
 public class AdapterHelperTest {
@@ -21,6 +22,25 @@
     @Before
     public void setUp() throws Exception {
         context = new Activity();
+        start = 1;
+        interval = 2;
+        subject = new AdapterHelper(context, start, interval);
+    }
+
+    @Test
+    public void constructor_whenPassedAnApplicationContext_shouldThrowIllegalArgumentException() throws Exception {
+        try {
+            new AdapterHelper(context.getApplicationContext(), start, interval);
+            fail("Expected IllegalArgumentException to be thrown");
+        } catch (IllegalArgumentException e) {
+            assertThat(e.getMessage()).isEqualTo("Illegal argument: Context must be instance of Activity.");
+        }
+    }
+
+    @Test
+    public void getAdView_withNullActivityContext_shouldReturnEmptyViewWithApplicationContext() throws Exception {
+        subject.clearActivityContext();
+        assertThat(subject.getAdView(null, null, null, null, null).getContext()).isEqualTo(context.getApplication());
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/BaseForwardingNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/BaseForwardingNativeAdTest.java
new file mode 100644
index 00000000..f88d5f81
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/BaseForwardingNativeAdTest.java
@@ -0,0 +1,100 @@
+package com.mopub.nativeads;
+
+import com.mopub.nativeads.test.support.SdkTestRunner;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class BaseForwardingNativeAdTest {
+
+    private BaseForwardingNativeAd subject;
+
+    @Before
+    public void setUp() throws Exception {
+        subject = new BaseForwardingNativeAd() {};
+    }
+
+    @After
+    public void tearDown() throws Exception {
+        ImpressionTrackingManager.purgeViews();
+    }
+
+    @Test
+    public void constructor_shouldInitializeMembers() throws Exception {
+        assertThat(subject.getImpressionMinPercentageViewed()).isEqualTo(50);
+        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(1000);
+        assertThat(subject.getImpressionTrackers()).isEmpty();
+        assertThat(subject.getExtras()).isEmpty();
+    }
+
+    @Test
+    public void setImpressionMinTimeViewed_whenTimeIsGreaterThan0_shouldSetTime() throws Exception {
+        subject.setImpressionMinTimeViewed(250);
+        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(250);
+    }
+
+    @Test
+    public void setImpressionMinTimeViewed_whenTimeIsLessThan0_shouldNotSetTime() throws Exception {
+        subject.setImpressionMinTimeViewed(250);
+        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(250);
+
+        subject.setImpressionMinTimeViewed(-1);
+        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(250);
+    }
+    
+    @Test
+    public void setStarRating_withinValidRange_shouldSetStarRating() throws Exception {
+        subject.setStarRating(0.0);
+        assertThat(subject.getStarRating()).isEqualTo(0.0);
+
+        subject.setStarRating(5.0);
+        assertThat(subject.getStarRating()).isEqualTo(5.0);
+
+        subject.setStarRating(2.5);
+        assertThat(subject.getStarRating()).isEqualTo(2.5);
+    }
+
+    @Test
+    public void setStarRating_withNull_shouldSetStarRatingToNull() throws Exception {
+        // Setting star rating to 0 before each case, so we can detect when it gets set to null
+        final double initialStarRating = 0.0;
+
+        subject.setStarRating(initialStarRating);
+        subject.setStarRating(null);
+        assertThat(subject.getStarRating()).isEqualTo(null);
+    }
+
+    @Test
+    public void setStarRating_withNanOrInf_shouldNotSetStarRating() throws Exception {
+        // First, set star rating to a valid value
+        final double initialStarRating = 3.75;
+        subject.setStarRating(initialStarRating);
+
+        subject.setStarRating(Double.NaN);
+        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
+
+        subject.setStarRating(Double.POSITIVE_INFINITY);
+        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
+
+        subject.setStarRating(Double.NEGATIVE_INFINITY);
+        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
+    }
+    
+    @Test
+    public void setStarRating_withValuesOutsideOfValidRange_shouldNotSetStarRating() throws Exception {
+        // First, set star rating to a valid value
+        final double initialStarRating = 4.9;
+        subject.setStarRating(initialStarRating);
+
+        subject.setStarRating(5.0001);
+        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
+
+        subject.setStarRating(-0.001);
+        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java
new file mode 100644
index 00000000..1939b6c5
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java
@@ -0,0 +1,82 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+
+import com.mopub.common.DownloadResponse;
+import com.mopub.common.util.ResponseHeader;
+import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
+import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.nativeads.test.support.TestCustomEventNativeFactory;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import java.util.HashMap;
+
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+public class CustomEventNativeAdapterTest {
+
+    private Activity context;
+    private DownloadResponse downloadResponse;
+    private HashMap<String, Object> localExtras;
+    private CustomEventNative.CustomEventNativeListener mCustomEventNativeListener;
+    private CustomEventNative mCustomEventNative;
+    private HashMap<String, String> serverExtras;
+    private TestHttpResponseWithHeaders testHttpResponseWithHeaders;
+
+    @Before
+    public void setUp() throws Exception {
+        context = new Activity();
+
+        localExtras = new HashMap<String, Object>();
+        serverExtras = new HashMap<String, String>();
+        serverExtras.put("key", "value");
+        serverExtras.put(CustomEventNativeAdapter.RESPONSE_BODY_KEY, "body");
+
+        testHttpResponseWithHeaders = new TestHttpResponseWithHeaders(200, "body");
+        testHttpResponseWithHeaders.addHeader(ResponseHeader.CUSTOM_EVENT_DATA.getKey(), "{ \"key\" : \"value\" }");
+        testHttpResponseWithHeaders.addHeader(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.nativeads.MoPubCustomEventNative");
+        downloadResponse = new DownloadResponse(testHttpResponseWithHeaders);
+
+        mCustomEventNativeListener = mock(CustomEventNative.CustomEventNativeListener.class);
+
+        mCustomEventNative = TestCustomEventNativeFactory.getSingletonMock();
+    }
+
+    @Test
+    public void loadNativeAd_withValidInput_shouldCallLoadNativeAdOnTheCustomEvent() throws Exception {
+        CustomEventNativeAdapter.loadNativeAd(context, localExtras, downloadResponse, mCustomEventNativeListener);
+        verify(mCustomEventNative).loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
+        verify(mCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));
+        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(NativeAdInterface.class));
+    }
+
+    @Test
+    public void loadNativeAd_withInvalidClassName_shouldNotifyListenerOfOnNativeAdFailedAndReturn() throws Exception {
+        testHttpResponseWithHeaders.addHeader(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.baaad.invalidinvalid123143");
+        downloadResponse = new DownloadResponse(testHttpResponseWithHeaders);
+
+        CustomEventNativeAdapter.loadNativeAd(context, localExtras, downloadResponse, mCustomEventNativeListener);
+        verify(mCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND);
+        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(NativeAdInterface.class));
+        verify(mCustomEventNative, never()).loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
+    }
+
+    @Test
+    public void loadNativeAd_withInvalidCustomEventNativeData_shouldNotAddToServerExtras() throws Exception {
+        testHttpResponseWithHeaders.addHeader(ResponseHeader.CUSTOM_EVENT_DATA.getKey(), "{ \"bad json");
+        downloadResponse = new DownloadResponse(testHttpResponseWithHeaders);
+        serverExtras.remove("key");
+
+        CustomEventNativeAdapter.loadNativeAd(context, localExtras, downloadResponse, mCustomEventNativeListener);
+        verify(mCustomEventNative).loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
+        verify(mCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));
+        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(NativeAdInterface.class));
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDiskTaskManagerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDiskTaskManagerTest.java
index 05841644..030f41b8 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDiskTaskManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDiskTaskManagerTest.java
@@ -4,6 +4,8 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 
+import com.mopub.common.CacheService;
+import com.mopub.common.CacheServiceTest;
 import com.mopub.nativeads.test.support.SdkTestRunner;
 
 import org.junit.After;
@@ -132,7 +134,7 @@ public void execute_withEmptyDiskCache_shouldReturnNullsInMap() throws Exception
     @Test
     public void execute_withPopulatedDiskCache_shouldReturnImagesInMap() throws Exception {
         CacheService.initializeCaches(context);
-        CacheServiceTest.verifyCachesAreEmpty();
+        CacheServiceTest.assertCachesAreEmpty();
         CacheService.putToDiskCache(url1, imageData1.getBytes());
         CacheService.putToDiskCache(url2, imageData2.getBytes());
 
@@ -147,7 +149,7 @@ public void execute_withPopulatedDiskCache_shouldReturnImagesInMap() throws Exce
     @Test
     public void execute_withPartiallyPopulatedDiskCache_shouldReturnSomeImagesInMap() throws Exception {
         CacheService.initializeCaches(context);
-        CacheServiceTest.verifyCachesAreEmpty();
+        CacheServiceTest.assertCachesAreEmpty();
         CacheService.putToDiskCache(url1, imageData1.getBytes());
 
         new ImageDiskTaskManager(list, imageTaskManagerListener).execute();
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageServiceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageServiceTest.java
index 30152591..55e792e5 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageServiceTest.java
@@ -5,6 +5,8 @@
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 
+import com.mopub.common.CacheService;
+import com.mopub.common.CacheServiceTest;
 import com.mopub.nativeads.test.support.SdkTestRunner;
 
 import org.junit.After;
@@ -100,7 +102,7 @@ public void get_shouldInitializeCaches() throws Exception {
     @Test
     public void get_withImageInMemoryCache_shouldReturnImage() throws Exception {
         CacheService.initializeCaches(context);
-        CacheServiceTest.verifyCachesAreEmpty();
+        CacheServiceTest.assertCachesAreEmpty();
         CacheService.putToMemoryCache(url1, imageData1.getBytes());
 
         ImageService.get(context, Arrays.asList(url1), imageServiceListener);
@@ -112,7 +114,7 @@ public void get_withImageInMemoryCache_shouldReturnImage() throws Exception {
     @Test
     public void get_withImageInDiskCache_shouldReturnImage() throws Exception {
         CacheService.initializeCaches(context);
-        CacheServiceTest.verifyCachesAreEmpty();
+        CacheServiceTest.assertCachesAreEmpty();
         CacheService.putToDiskCache(url1, imageData1.getBytes());
 
         ImageService.get(context, Arrays.asList(url1), imageServiceListener);
@@ -125,7 +127,7 @@ public void get_withImageInDiskCache_shouldReturnImage() throws Exception {
     @Test
     public void get_withEmptyCaches_shouldGetImageFromNetwork() throws Exception {
         CacheService.initializeCaches(context);
-        CacheServiceTest.verifyCachesAreEmpty();
+        CacheServiceTest.assertCachesAreEmpty();
 
         fakeHttpLayer.addPendingHttpResponse(200, imageData1);
 
@@ -138,7 +140,7 @@ public void get_withEmptyCaches_shouldGetImageFromNetwork() throws Exception {
     @Test
     public void get_withImagesInMemoryCacheAndDiskCache_shouldReturnBothImages() throws Exception {
         CacheService.initializeCaches(context);
-        CacheServiceTest.verifyCachesAreEmpty();
+        CacheServiceTest.assertCachesAreEmpty();
 
         CacheService.putToMemoryCache(url1, imageData1.getBytes());
         CacheService.putToDiskCache(url2, imageData2.getBytes());
@@ -154,7 +156,7 @@ public void get_withImagesInMemoryCacheAndDiskCache_shouldReturnBothImages() thr
     @Test
     public void get_withImagesInMemoryAndNetwork_shouldReturnBothImages() throws Exception {
         CacheService.initializeCaches(context);
-        CacheServiceTest.verifyCachesAreEmpty();
+        CacheServiceTest.assertCachesAreEmpty();
 
         CacheService.putToMemoryCache(url1, imageData1.getBytes());
         fakeHttpLayer.addPendingHttpResponse(200, imageData2);
@@ -170,7 +172,7 @@ public void get_withImagesInMemoryAndNetwork_shouldReturnBothImages() throws Exc
     @Test
     public void get_withImagesInDiskAndNetwork_shouldReturnBothImages() throws Exception {
         CacheService.initializeCaches(context);
-        CacheServiceTest.verifyCachesAreEmpty();
+        CacheServiceTest.assertCachesAreEmpty();
 
         CacheService.putToDiskCache(url1, imageData1.getBytes());
         fakeHttpLayer.addPendingHttpResponse(200, imageData2);
@@ -186,7 +188,7 @@ public void get_withImagesInDiskAndNetwork_shouldReturnBothImages() throws Excep
     @Test
     public void get_withImagesInMemoryAndDiskAndNetwork_shouldReturnAllImages() throws Exception {
         CacheService.initializeCaches(context);
-        CacheServiceTest.verifyCachesAreEmpty();
+        CacheServiceTest.assertCachesAreEmpty();
 
         CacheService.putToMemoryCache(url1, imageData1.getBytes());
         CacheService.putToDiskCache(url2, imageData2.getBytes());
@@ -203,7 +205,7 @@ public void get_withImagesInMemoryAndDiskAndNetwork_shouldReturnAllImages() thro
     @Test
     public void get_withSameKeysInMemoryAndDiskCache_shouldReturnValueFromMemoryCache() throws Exception {
         CacheService.initializeCaches(context);
-        CacheServiceTest.verifyCachesAreEmpty();
+        CacheServiceTest.assertCachesAreEmpty();
 
         CacheService.putToMemoryCache(url1, imageData2.getBytes());
         CacheService.putToDiskCache(url1, imageData1.getBytes());
@@ -217,7 +219,7 @@ public void get_withSameKeysInMemoryAndDiskCache_shouldReturnValueFromMemoryCach
     @Test
     public void get_withSameKeysInMemoryAndNetwork_shouldReturnValueFromMemoryCache() throws Exception {
         CacheService.initializeCaches(context);
-        CacheServiceTest.verifyCachesAreEmpty();
+        CacheServiceTest.assertCachesAreEmpty();
 
         CacheService.putToMemoryCache(url1, imageData2.getBytes());
         fakeHttpLayer.addPendingHttpResponse(200, imageData1);
@@ -231,7 +233,7 @@ public void get_withSameKeysInMemoryAndNetwork_shouldReturnValueFromMemoryCache(
     @Test
     public void get_withSameKeysInDiskAndNetwork_shouldReturnValueFromDiskCache() throws Exception {
         CacheService.initializeCaches(context);
-        CacheServiceTest.verifyCachesAreEmpty();
+        CacheServiceTest.assertCachesAreEmpty();
 
         CacheService.putToDiskCache(url1, imageData2.getBytes());
         fakeHttpLayer.addPendingHttpResponse(200, imageData1);
@@ -245,7 +247,7 @@ public void get_withSameKeysInDiskAndNetwork_shouldReturnValueFromDiskCache() th
     @Test
     public void get_withNetworkFailure_shouldFail() throws Exception {
         CacheService.initializeCaches(context);
-        CacheServiceTest.verifyCachesAreEmpty();
+        CacheServiceTest.assertCachesAreEmpty();
 
         CacheService.putToMemoryCache(url1, imageData1.getBytes());
         CacheService.putToDiskCache(url2, imageData2.getBytes());
@@ -260,7 +262,7 @@ public void get_withNetworkFailure_shouldFail() throws Exception {
     @Test
     public void get_withMultipleNetworkSuccessAndOneFailure_shouldFail() throws Exception {
         CacheService.initializeCaches(context);
-        CacheServiceTest.verifyCachesAreEmpty();
+        CacheServiceTest.assertCachesAreEmpty();
 
         fakeHttpLayer.addPendingHttpResponse(200, imageData1);
         fakeHttpLayer.addPendingHttpResponse(200, imageData2);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageViewServiceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageViewServiceTest.java
index 72753719..4aaef2fc 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageViewServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageViewServiceTest.java
@@ -6,6 +6,8 @@
 import android.graphics.drawable.BitmapDrawable;
 import android.widget.ImageView;
 
+import com.mopub.common.CacheService;
+import com.mopub.common.CacheServiceTest;
 import com.mopub.nativeads.test.support.SdkTestRunner;
 
 import org.junit.After;
@@ -47,7 +49,7 @@ public void tearDown() throws Exception {
 
     @Test
     public void loadImageView_withImageInMemoryCache_shouldLoadImageData() throws Exception {
-        CacheServiceTest.verifyCachesAreEmpty();
+        CacheServiceTest.assertCachesAreEmpty();
         CacheService.putToMemoryCache(url1, imageData1.getBytes());
 
         assertThat(ImageViewService.getImageViewUniqueId(imageView)).isNull();
@@ -61,7 +63,7 @@ public void loadImageView_withImageInMemoryCache_shouldLoadImageData() throws Ex
 
     @Test
     public void loadImageView_withImageInDiskCache_shouldLoadImageDataAsync() throws Exception {
-        CacheServiceTest.verifyCachesAreEmpty();
+        CacheServiceTest.assertCachesAreEmpty();
         CacheService.putToDiskCache(url1, imageData1.getBytes());
 
         assertThat(ImageViewService.getImageViewUniqueId(imageView)).isNull();
@@ -76,7 +78,7 @@ public void loadImageView_withImageInDiskCache_shouldLoadImageDataAsync() throws
 
     @Test
     public void loadImageView_withImageInNetwork_shouldLoadImageDataAsync() throws Exception {
-        CacheServiceTest.verifyCachesAreEmpty();
+        CacheServiceTest.assertCachesAreEmpty();
         fakeHttpLayer.addPendingHttpResponse(200, imageData1);
 
         assertThat(ImageViewService.getImageViewUniqueId(imageView)).isNull();
@@ -91,7 +93,7 @@ public void loadImageView_withImageInNetwork_shouldLoadImageDataAsync() throws E
 
     @Test
     public void loadImageView_withImageInNetworkAndUniqueIdChanges_shouldNotLoadImageData() throws Exception {
-        CacheServiceTest.verifyCachesAreEmpty();
+        CacheServiceTest.assertCachesAreEmpty();
         assertThat(imageView.getDrawable()).isNull();
         fakeHttpLayer.addPendingHttpResponse(200, imageData1);
 
@@ -112,7 +114,7 @@ public void loadImageView_withImageInNetworkAndUniqueIdChanges_shouldNotLoadImag
 
     @Test
     public void loadImageView_withImageInNetworkAndUniqueIdIsNull_shouldNotLoadImageData() throws Exception {
-        CacheServiceTest.verifyCachesAreEmpty();
+        CacheServiceTest.assertCachesAreEmpty();
         assertThat(imageView.getDrawable()).isNull();
         fakeHttpLayer.addPendingHttpResponse(200, imageData1);
 
@@ -133,7 +135,7 @@ public void loadImageView_withImageInNetworkAndUniqueIdIsNull_shouldNotLoadImage
 
     @Test
     public void loadImageView_withTwoNetworkRequests_shouldLoadSecondImageData() throws Exception {
-        CacheServiceTest.verifyCachesAreEmpty();
+        CacheServiceTest.assertCachesAreEmpty();
         assertThat(imageView.getDrawable()).isNull();
         fakeHttpLayer.addPendingHttpResponse(200, imageData1);
         fakeHttpLayer.addPendingHttpResponse(200, imageData2);
@@ -155,7 +157,7 @@ public void loadImageView_withTwoNetworkRequests_shouldLoadSecondImageData() thr
 
     @Test
     public void loadImageView_shouldClearDrawable() throws Exception {
-        CacheServiceTest.verifyCachesAreEmpty();
+        CacheServiceTest.assertCachesAreEmpty();
         assertThat(imageView.getDrawable()).isNull();
         fakeHttpLayer.addPendingHttpResponse(200, imageData1);
         fakeHttpLayer.addPendingHttpResponse(200, imageData2);
@@ -174,7 +176,7 @@ public void loadImageView_shouldClearDrawable() throws Exception {
 
     @Test
     public void loadImageView_withEmptyCachesAndNetworkFailure_shouldNotLoadImageDataAsync() throws Exception {
-        CacheServiceTest.verifyCachesAreEmpty();
+        CacheServiceTest.assertCachesAreEmpty();
         fakeHttpLayer.addPendingHttpResponse(500, imageData1);
 
         ImageViewService.loadImageView(url1, imageView);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackingManagerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackingManagerTest.java
index c6445a99..37ba7dd1 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackingManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackingManagerTest.java
@@ -5,10 +5,11 @@
 import android.graphics.Rect;
 import android.view.View;
 
+import com.mopub.common.DownloadResponse;
+import com.mopub.common.util.ResponseHeader;
+import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.nativeads.test.support.SdkTestRunner;
 
-import org.json.JSONArray;
-import org.json.JSONObject;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Ignore;
@@ -39,19 +40,26 @@
 
     private View view;
     private NativeResponse nativeResponse;
+    private NativeResponseWrapper nativeResponseWrapper;
     private Context context;
     private MoPubNativeListener mopubNativeListener;
-    private JSONObject fakeJsonObject;
 
     @Before
     public void setUp() throws Exception {
+        ImpressionTrackingManager.purgeViews();
+
         context = new Activity();
         mopubNativeListener = mock(MoPubNativeListener.class);
         view = getViewMock(View.VISIBLE, 100, 100, 100, 100);
-        fakeJsonObject = new JSONObject();
-        fakeJsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
-        fakeJsonObject.put("clktracker", "expected clicktracker");
-        nativeResponse = new NativeResponse(fakeJsonObject);
+
+        final BaseForwardingNativeAd nativeAd = new BaseForwardingNativeAd() {};
+        final TestHttpResponseWithHeaders testHttpResponseWithHeaders = new TestHttpResponseWithHeaders(200, "");
+        testHttpResponseWithHeaders.addHeader(ResponseHeader.IMPRESSION_URL.getKey(), "url1");
+        final DownloadResponse downloadResponse = new DownloadResponse(testHttpResponseWithHeaders);
+
+        nativeResponse = new NativeResponse(context, downloadResponse, nativeAd, mopubNativeListener);
+        nativeResponseWrapper = new NativeResponseWrapper(nativeResponse);
+
         Robolectric.addPendingHttpResponse(new TestHttpResponse(200, ""));
 
         // We need this to ensure that our SystemClock starts
@@ -89,7 +97,7 @@ public void stop_beforeStartIsCalled_doesNothing() throws Exception {
 
     @Test
     public void addView_shouldAddViewToHashMap() throws Exception {
-        ImpressionTrackingManager.addView(view, nativeResponse, mopubNativeListener);
+        ImpressionTrackingManager.addView(view, nativeResponse);
         Map<View, NativeResponseWrapper> keptViews = ImpressionTrackingManager.getKeptViews();
         assertThat(keptViews).hasSize(1);
         assertThat(keptViews.get(view).mNativeResponse).isEqualTo(nativeResponse);
@@ -97,14 +105,14 @@ public void addView_shouldAddViewToHashMap() throws Exception {
 
     @Test
     public void addView_whenViewIsNull_shouldNotAddView() throws Exception {
-        ImpressionTrackingManager.addView(null, nativeResponse, mopubNativeListener);
+        ImpressionTrackingManager.addView(null, nativeResponse);
         Map<View, NativeResponseWrapper> keptViews = ImpressionTrackingManager.getKeptViews();
         assertThat(keptViews).isEmpty();
     }
 
     @Test
     public void addView_whenNativeResponseIsNull_shouldNotAddView() throws Exception {
-        ImpressionTrackingManager.addView(view, null, mopubNativeListener);
+        ImpressionTrackingManager.addView(view, null);
         Map<View, NativeResponseWrapper> keptViews = ImpressionTrackingManager.getKeptViews();
         assertThat(keptViews).isEmpty();
     }
@@ -114,8 +122,8 @@ public void removeView_shouldRemoveViewFromKeptViews() throws Exception {
         View view1 = mock(View.class);
         View view2 = mock(View.class);
 
-        ImpressionTrackingManager.addView(view1, nativeResponse, mopubNativeListener);
-        ImpressionTrackingManager.addView(view2, nativeResponse, mopubNativeListener);
+        ImpressionTrackingManager.addView(view1, nativeResponse);
+        ImpressionTrackingManager.addView(view2, nativeResponse);
         assertThat(ImpressionTrackingManager.getKeptViews()).hasSize(2);
 
         ImpressionTrackingManager.removeView(view2);
@@ -134,7 +142,7 @@ public void removeView_whenThereAreNoKeptViews_shouldDoNothing() throws Exceptio
 
     @Test
     public void removeView_whenViewIsNull_shouldDoNothing() throws Exception {
-        ImpressionTrackingManager.addView(view, nativeResponse, mopubNativeListener);
+        ImpressionTrackingManager.addView(view, nativeResponse);
 
         assertThat(ImpressionTrackingManager.getKeptViews()).hasSize(1);
         ImpressionTrackingManager.removeView(null);
@@ -143,51 +151,54 @@ public void removeView_whenViewIsNull_shouldDoNothing() throws Exception {
 
     @Test
     public void visibilityCheckRun_whenWrapperIsNull_shouldNotTrackImpression() throws Exception {
-        ImpressionTrackingManager.addView(view, nativeResponse, mopubNativeListener);
+        ImpressionTrackingManager.addView(view, nativeResponse);
 
         // This doesn't normally happen; perhaps we're being overly defensive
         ImpressionTrackingManager.getKeptViews().put(view, null);
 
         new VisibilityCheck().run();
         assertThat(nativeResponse.getRecordedImpression()).isFalse();
-        assertImpressionTracked(nativeResponse, false);
+        assertImpressionTracked(false);
     }
 
     @Test
     public void visibilityCheckRun_whenNativeResponseIsNull_shouldNotTrackImpression() throws Exception {
-        ImpressionTrackingManager.addView(view, nativeResponse, mopubNativeListener);
+        ImpressionTrackingManager.addView(view, nativeResponse);
 
         // This doesn't normally happen; perhaps we're being overly defensive
-        ImpressionTrackingManager.getKeptViews().put(view, new NativeResponseWrapper(null, null));
+        ImpressionTrackingManager.getKeptViews().put(view, new NativeResponseWrapper(null));
 
         new VisibilityCheck().run();
         assertThat(nativeResponse.getRecordedImpression()).isFalse();
-        assertImpressionTracked(nativeResponse, false);
+        assertImpressionTracked(false);
     }
 
     @Test
     public void visibilityCheckRun_whenNativeResponseHasRecordedImpression_shouldNotTrackImpression() throws Exception {
-        ImpressionTrackingManager.addView(view, nativeResponse, mopubNativeListener);
-        nativeResponse.recordImpression();
-        assertThat(nativeResponse.getRecordedImpression()).isTrue();
+        ImpressionTrackingManager.addView(view, nativeResponse);
+        nativeResponse.recordImpression(view);
+        assertImpressionTracked(true);
+
+        Robolectric.getFakeHttpLayer().clearRequestInfos();
+        reset(mopubNativeListener);
 
         new VisibilityCheck().run();
-        assertImpressionTracked(nativeResponse, false);
+        assertImpressionTracked(false);
     }
 
     @Test
     public void visibilityCheckRun_whenViewIsInvisible_shouldNotTrackImpression() throws Exception {
         view.setVisibility(View.INVISIBLE);
-        ImpressionTrackingManager.addView(view, nativeResponse, mopubNativeListener);
+        ImpressionTrackingManager.addView(view, nativeResponse);
 
         new VisibilityCheck().run();
         assertThat(nativeResponse.getRecordedImpression()).isFalse();
-        assertImpressionTracked(nativeResponse, false);
+        assertImpressionTracked(false);
     }
 
     @Test
     public void visibilityCheckRun_whenLastViewedTimestampIsZero_shouldUpdateTimestampAndNotTrackImpression() throws Exception {
-        ImpressionTrackingManager.addView(view, nativeResponse, mopubNativeListener);
+        ImpressionTrackingManager.addView(view, nativeResponse);
 
         assertThat(ImpressionTrackingManager.getKeptViews().get(view).mFirstVisibleTimestamp).isEqualTo(0);
 
@@ -196,13 +207,12 @@ public void visibilityCheckRun_whenLastViewedTimestampIsZero_shouldUpdateTimesta
 
         assertThat(ImpressionTrackingManager.getKeptViews().get(view).mFirstVisibleTimestamp).isEqualTo(111);
         assertThat(nativeResponse.getRecordedImpression()).isFalse();
-        assertImpressionTracked(nativeResponse, false);
+        assertImpressionTracked(false);
     }
 
     @Test
     public void visibilityCheckRun_whenLastViewedTimestampIsNotZeroAndLessThanOneSecondHasElapsed_shouldNotTrackImpression() throws Exception {
         // Force the last viewed timestamp to be a known value
-        NativeResponseWrapper nativeResponseWrapper = new NativeResponseWrapper(nativeResponse, mopubNativeListener);
         nativeResponseWrapper.mFirstVisibleTimestamp = 5555;
         ImpressionTrackingManager.getKeptViews().put(view, nativeResponseWrapper);
 
@@ -211,14 +221,13 @@ public void visibilityCheckRun_whenLastViewedTimestampIsNotZeroAndLessThanOneSec
         new VisibilityCheck().run();
 
         assertThat(nativeResponse.getRecordedImpression()).isFalse();
-        assertImpressionTracked(nativeResponse, false);
+        assertImpressionTracked(false);
     }
 
     @Ignore("Review race condition")
     @Test
     public void visibilityCheckRun_whenLastViewedTimestampIsNotZeroAndMoreThanOneSecondHasElapsed_shouldTrackImpression() throws Exception {
         // Force the last viewed timestamp to be a known value
-        NativeResponseWrapper nativeResponseWrapper = new NativeResponseWrapper(nativeResponse, mopubNativeListener);
         nativeResponseWrapper.mFirstVisibleTimestamp = 5555;
         ImpressionTrackingManager.getKeptViews().put(view, nativeResponseWrapper);
 
@@ -227,57 +236,58 @@ public void visibilityCheckRun_whenLastViewedTimestampIsNotZeroAndMoreThanOneSec
         new VisibilityCheck().run();
 
         assertThat(nativeResponse.getRecordedImpression()).isTrue();
-        assertImpressionTracked(nativeResponse, true);
+        assertImpressionTracked(true);
     }
 
     @Test
     public void isVisible_whenViewIsEntirelyOnScreen_shouldReturnTrue() throws Exception {
         view = getViewMock(View.VISIBLE, 100, 100, 100, 100);
 
-        assertThat(VisibilityCheck.isVisible(view)).isTrue();
+        assertThat(VisibilityCheck.isVisible(view, nativeResponseWrapper)).isTrue();
     }
 
     @Test
     public void isVisible_whenViewIs50PercentVisible_shouldReturnTrue() throws Exception {
         view = getViewMock(View.VISIBLE, 50, 100, 100, 100);
 
-        assertThat(VisibilityCheck.isVisible(view)).isTrue();
+        assertThat(VisibilityCheck.isVisible(view, nativeResponseWrapper)).isTrue();
     }
 
     @Test
     public void isVisible_whenViewIs49PercentVisible_shouldReturnFalse() throws Exception {
         view = getViewMock(View.VISIBLE, 49, 100, 100, 100);
 
-        assertThat(VisibilityCheck.isVisible(view)).isFalse();
+        assertThat(VisibilityCheck.isVisible(view, nativeResponseWrapper)).isFalse();
     }
 
     @Test
     public void isVisible_whenVisibleAreaIsZero_shouldReturnFalse() throws Exception {
         view = getViewMock(View.VISIBLE, 0, 0, 100, 100);
 
-        assertThat(VisibilityCheck.isVisible(view)).isFalse();
+        assertThat(VisibilityCheck.isVisible(view, nativeResponseWrapper)).isFalse();
     }
 
     @Test
     public void isVisible_whenViewIsInvisibleOrGone_shouldReturnFalse() throws Exception {
         View view = getViewMock(View.INVISIBLE, 100, 100, 100, 100);
-        assertThat(VisibilityCheck.isVisible(view)).isFalse();
+        assertThat(VisibilityCheck.isVisible(view, nativeResponseWrapper)).isFalse();
 
         reset(view);
         view = getViewMock(View.GONE, 100, 100, 100, 100);
-        assertThat(VisibilityCheck.isVisible(view)).isFalse();
+        assertThat(VisibilityCheck.isVisible(view, nativeResponseWrapper)).isFalse();
     }
 
     @Test
     public void isVisible_whenViewHasZeroWidthAndHeight_shouldReturnFalse() throws Exception {
         view = getViewMock(View.VISIBLE, 100, 100, 0, 0);
 
-        assertThat(VisibilityCheck.isVisible(view)).isFalse();
+        assertThat(VisibilityCheck.isVisible(view, nativeResponseWrapper)).isFalse();
     }
 
     @Test
-    public void isVisible_whenViewIsNull_shouldReturnFalse() throws Exception {
-        assertThat(VisibilityCheck.isVisible(null)).isFalse();
+    public void isVisible_whenViewOrNativeResponseWrapperIsNull_shouldReturnFalse() throws Exception {
+        assertThat(VisibilityCheck.isVisible(null, nativeResponseWrapper)).isFalse();
+        assertThat(VisibilityCheck.isVisible(view, null)).isFalse();
     }
 
     private View getViewMock(final int visibility,
@@ -302,7 +312,7 @@ public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {
         return view;
     }
 
-    private void assertImpressionTracked(final NativeResponse nativeResponseMock, final boolean wasTracked) {
+    private void assertImpressionTracked(final boolean wasTracked) {
         // Ensure that we fired off the HttpGets for each of the impression trackers
         if (wasTracked) {
             assertThat(Robolectric.getFakeHttpLayer().getSentHttpRequestInfos().size()).isEqualTo(1);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
new file mode 100644
index 00000000..464ee48a
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
@@ -0,0 +1,118 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+
+import com.mopub.common.CacheService;
+import com.mopub.nativeads.test.support.SdkTestRunner;
+
+import org.apache.http.HttpRequest;
+import org.json.JSONArray;
+import org.json.JSONObject;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.tester.org.apache.http.FakeHttpLayer;
+import org.robolectric.tester.org.apache.http.RequestMatcher;
+import org.robolectric.tester.org.apache.http.TestHttpResponse;
+
+import java.util.HashMap;
+
+import static com.mopub.common.util.test.support.CommonUtils.assertHttpRequestsMade;
+import static com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+public class MoPubCustomEventNativeTest {
+
+    private MoPubCustomEventNative subject;
+    private Activity context;
+    private HashMap<String, Object> localExtras;
+    private CustomEventNativeListener mCustomEventNativeListener;
+    private HashMap<String, String> serverExtras;
+    private JSONObject fakeJsonObject;
+    private FakeHttpLayer fakeHttpLayer;
+
+    @Before
+    public void setUp() throws Exception {
+        subject = new MoPubCustomEventNative();
+        context = new Activity();
+
+        localExtras = new HashMap<String, Object>();
+        serverExtras = new HashMap<String, String>();
+
+        fakeJsonObject = new JSONObject();
+        fakeJsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
+        fakeJsonObject.put("clktracker", "expected clicktracker");
+        fakeJsonObject.put("mainimage", "mainimageurl");
+        fakeJsonObject.put("iconimage", "iconimageurl");
+        fakeJsonObject.put("extraimage", "extraimageurl");
+
+        serverExtras.put(CustomEventNativeAdapter.RESPONSE_BODY_KEY, fakeJsonObject.toString());
+
+        mCustomEventNativeListener = mock(CustomEventNativeListener.class);
+
+        fakeHttpLayer = Robolectric.getFakeHttpLayer();
+        fakeHttpLayer.addHttpResponseRule(
+                new RequestMatcher() {
+                    @Override
+                    public boolean matches(HttpRequest request) {
+                        return true;
+                    }
+                },
+                new TestHttpResponse(200, "body")
+        );
+    }
+
+    @After
+    public void tearDown() throws Exception {
+        CacheService.clearAndNullCaches();
+        reset(mCustomEventNativeListener);
+    }
+
+    @Test
+    public void loadNativeAd_withValidInput_shouldDownloadImagesAndNotifyListenerOfOnNativeAdLoaded() throws Exception {
+        subject.loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
+
+        assertHttpRequestsMade("mainimageurl", "iconimageurl", "extraimageurl");
+
+        verify(mCustomEventNativeListener).onNativeAdLoaded(any(MoPubCustomEventNative.MoPubForwardingNativeAd.class));
+        verify(mCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));
+    }
+
+    @Test
+    public void loadNativeAd_withValidInput_withFailedImageDownload_shouldNotDownloadImagesAndNotifyListenerOfOnNativeAdFailed() throws Exception {
+        fakeHttpLayer.clearHttpResponseRules();
+        fakeHttpLayer.addPendingHttpResponse(500, "body");
+
+        serverExtras.put(CustomEventNativeAdapter.RESPONSE_BODY_KEY, fakeJsonObject.toString());
+
+        subject.loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
+
+        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(MoPubCustomEventNative.MoPubForwardingNativeAd.class));
+        verify(mCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.IMAGE_DOWNLOAD_FAILURE);
+    }
+
+    @Test
+    public void loadNativeAd_withInvalidResponseBody_shouldNotifyListenerOfOnNativeAdFailedAndReturn() throws Exception {
+        serverExtras.put(CustomEventNativeAdapter.RESPONSE_BODY_KEY, "{ \"bad json");
+
+        subject.loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
+        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(MoPubCustomEventNative.MoPubForwardingNativeAd.class));
+        verify(mCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.INVALID_JSON);
+    }
+
+    @Test
+    public void loadNativeAd_withNullResponseBody_shouldNotifyListenerOfOnNativeAdFailedAndReturn() throws Exception {
+        serverExtras.put(CustomEventNativeAdapter.RESPONSE_BODY_KEY, null);
+
+        subject.loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
+        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(MoPubCustomEventNative.MoPubForwardingNativeAd.class));
+        verify(mCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java
new file mode 100644
index 00000000..e46755ee
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java
@@ -0,0 +1,249 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+
+import com.mopub.mobileads.test.support.SdkTestRunner;
+
+import org.json.JSONArray;
+import org.json.JSONObject;
+import org.junit.Before;
+import org.junit.Ignore;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+
+import static com.mopub.nativeads.NativeResponse.Parameter;
+import static com.mopub.nativeads.NativeResponse.Parameter.requiredKeys;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.fest.assertions.api.Assertions.fail;
+
+@RunWith(SdkTestRunner.class)
+public class MoPubForwardingNativeAdTest {
+
+    private JSONObject fakeJsonObject;
+    private MoPubCustomEventNative.MoPubForwardingNativeAd subject;
+
+    @Before
+    public void setUp() throws Exception {
+        fakeJsonObject = new JSONObject();
+        fakeJsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
+        fakeJsonObject.put("clktracker", "expected clicktracker");
+    }
+
+    @Test
+    public void parameter_requiredKeys_shouldOnlyContainTheRequiredKeys() throws Exception {
+        final HashSet<String> expectedKeys = new HashSet<String>();
+        expectedKeys.add("imptracker");
+        expectedKeys.add("clktracker");
+
+        assertThat(requiredKeys).isEqualTo(expectedKeys);
+    }
+
+    @Test
+    public void parameter_fromString_shouldReturnParameterOnMatch() throws Exception {
+        final Parameter parameter = Parameter.from("title");
+
+        assertThat(parameter).isEqualTo(Parameter.TITLE);
+    }
+
+    @Test
+    public void parameter_fromString_shouldReturnNullOnIllegalKey() throws Exception {
+        final Parameter parameter = Parameter.from("random gibberish");
+
+        assertThat(parameter).isNull();
+    }
+
+    @Test
+    public void constructor_whenMissingRequiredKeys_shouldThrowIllegalArgumentException() throws Exception {
+        fakeJsonObject.remove("imptracker");
+
+        try {
+            subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+            fail("Expected IllegalArgumentException");
+        } catch (IllegalArgumentException e) {
+            // pass
+        }
+    }
+
+    @Test
+    public void constructor_whenRequiredKeyOfWrongType_shouldThrowIllegalArgumentException() throws Exception {
+        fakeJsonObject.put("imptracker", 12345);
+
+        try {
+            subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+            fail("Expected IllegalArgumentException");
+        } catch (IllegalArgumentException e) {
+            // pass
+        }
+    }
+
+    @Test
+    public void constructor_shouldSetRequiredExpectedFields() throws Exception {
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+        assertThat(subject.getImpressionTrackers()).containsOnly("url1", "url2");
+    }
+
+    @Test
+    public void constructor_shouldSetOptionalExpectedFields() throws Exception {
+        fakeJsonObject.put("title", "expected title");
+        fakeJsonObject.put("text", "expected text");
+        fakeJsonObject.put("mainimage", "expected mainimage");
+        fakeJsonObject.put("iconimage", "expected iconimage");
+
+        fakeJsonObject.put("clk", "expected clk");
+
+        fakeJsonObject.put("fallback", "expected fallback");
+        fakeJsonObject.put("ctatext", "expected ctatext");
+        fakeJsonObject.put("starrating", 5.0);
+
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+
+        assertThat(subject.getTitle()).isEqualTo("expected title");
+        assertThat(subject.getText()).isEqualTo("expected text");
+        assertThat(subject.getMainImageUrl()).isEqualTo("expected mainimage");
+        assertThat(subject.getIconImageUrl()).isEqualTo("expected iconimage");
+
+        assertThat(subject.getClickDestinationUrl()).isEqualTo("expected clk");
+
+//        assertThat(subject.getFallback()).isEqualTo("expected fallback");
+        assertThat(subject.getImpressionTrackers()).containsOnly("url1", "url2");
+        assertThat(subject.getCallToAction()).isEqualTo("expected ctatext");
+        assertThat(subject.getStarRating()).isEqualTo(5.0);
+    }
+
+    @Test
+    public void constructor_withIntegerStarRating_shouldSetStarRating() throws Exception {
+        fakeJsonObject.put("starrating", 3);
+
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+
+        assertThat(subject.getStarRating()).isEqualTo(3.0);
+    }
+
+    @Test
+    public void constructor_withStringStarRating_shouldSetStarRating() throws Exception {
+        fakeJsonObject.put("starrating", "2.3");
+
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+
+        assertThat(subject.getStarRating()).isEqualTo(2.3);
+    }
+    
+    @Test
+    public void constructor_withInvalidStringStarRating_shouldNotSetStarRating() throws Exception {
+        fakeJsonObject.put("starrating", "this is not a number");
+
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+
+        assertThat(subject.getStarRating()).isNull();
+    }
+
+    @Test
+    public void constructor_withInvalidlyTypedStarRating_shouldNotSetStarRating() throws Exception {
+        fakeJsonObject.put("starrating", new Activity());
+
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+
+        assertThat(subject.getStarRating()).isNull();
+    }
+
+    @Test
+    public void constructor_whenImpressionTrackersContainsNonStrings_willCoerceToString() throws Exception {
+        /**
+         * At this level of abstraction, we don't actually care that these Strings resolve to valid
+         * URLs. We just want to ensure that the constructor does not throw an exception.
+         */
+        final JSONArray impressionTrackers = new JSONArray();
+        impressionTrackers.put("url1");
+        impressionTrackers.put(JSONObject.NULL);
+        impressionTrackers.put(2.12);
+        fakeJsonObject.put("imptracker", impressionTrackers);
+
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+
+        assertThat(subject.getImpressionTrackers()).containsOnly("url1", "null", "2.12");
+    }
+
+    @Test
+    public void constructor_shouldSetExtraFields() throws Exception {
+        List<Object> array = new ArrayList<Object>();
+        array.add("index1");
+        array.add(-10);
+
+        Map<String, Object> map = new HashMap<String, Object>();
+        map.put("one", "a");
+        map.put("two", "b");
+
+        fakeJsonObject.put("key1", "yay json");
+        fakeJsonObject.put("key2", 5);
+        fakeJsonObject.put("key3", new JSONArray(array));
+        fakeJsonObject.put("key4", new JSONObject(map));
+
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+
+        assertThat(subject.getExtra("key1")).isEqualTo("yay json");
+        assertThat(subject.getExtra("key2")).isEqualTo(5);
+        assertThat((JSONArray) subject.getExtra("key3")).isEqualsToByComparingFields(new JSONArray(array));
+        assertThat((JSONObject) subject.getExtra("key4")).isEqualsToByComparingFields(new JSONObject(map));
+    }
+
+    @Ignore("pending")
+    @Test
+    public void loadMainAndIconImages_shouldAsyncLoadImages() throws Exception {
+        // no easy way to test this since nothing can be mocked
+        // also not a critical test since it directly calls another service
+    }
+
+    @Test
+    public void getExtrasImageUrls_whenExtrasContainsImages_shouldReturnImageUrls() throws Exception {
+        // getExtrasImageUrls requires the key to end with a case-insensitive "image" to be counted as an image
+        fakeJsonObject.put("test_image", "image_url_1");
+        fakeJsonObject.put("filler", "ignored");
+        fakeJsonObject.put("otherIMAGE", "image_url_2");
+        fakeJsonObject.put("more filler", "ignored");
+        fakeJsonObject.put("lastimage", "image_url_3");
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+
+        assertThat(subject.getExtrasImageUrls()).containsOnly("image_url_1", "image_url_2", "image_url_3");
+    }
+
+
+    @Test
+    public void getExtrasImageUrls_whenExtrasDoesNotContainImageKeys_shouldReturnEmptyList() throws Exception {
+        // getExtrasImageUrls requires the key to end with a case-insensitive "image" to be counted as an image
+        fakeJsonObject.put("imageAtFront", "ignored");
+        fakeJsonObject.put("middle_image_in_key", "ignored");
+        fakeJsonObject.put("other", "ignored");
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+
+        assertThat(subject.getExtrasImageUrls()).isEmpty();
+    }
+
+    @Test
+    public void getAllImageUrls_withExtraImagesAndMainAndIconImages_shouldReturnAllUrls() throws Exception {
+        fakeJsonObject.put("mainimage", "mainImageUrl");
+        fakeJsonObject.put("iconimage", "iconImageUrl");
+        fakeJsonObject.put("extraimage", "extraImageUrl");
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+
+        assertThat(subject.getAllImageUrls()).containsOnly(
+                "mainImageUrl",
+                "iconImageUrl",
+                "extraImageUrl"
+        );
+    }
+
+    @Test
+    public void getAllImageUrls_withOnlyExtrasImages_shouldNotIncludeMainOrIconImages() throws Exception {
+        fakeJsonObject.put("extra1_image", "expected extra1_image");
+        fakeJsonObject.put("extra2_image", "expected extra2_image");
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+
+        assertThat(subject.getAllImageUrls()).containsOnly("expected extra1_image", "expected extra2_image");
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
index 8e348801..fa766fb8 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
@@ -15,6 +15,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
+import org.robolectric.Robolectric;
 
 import java.util.concurrent.Semaphore;
 
@@ -22,9 +23,11 @@
 import static android.Manifest.permission.INTERNET;
 import static com.mopub.common.util.Reflection.MethodBuilder;
 import static com.mopub.nativeads.MoPubNative.MoPubNativeListener;
+import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -35,18 +38,18 @@
     private MoPubNative subject;
     private MethodBuilder methodBuilder;
     private Activity context;
-    private RequestParameters requestParameters;
     private MoPubNative.NativeGpsHelperListener nativeGpsHelperListener;
     private Semaphore semaphore;
     private static final String adUnitId = "test_adunit_id";
+    private MoPubNativeListener moPubNativeListener;
 
     @Before
     public void setup() {
         context = new Activity();
         shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
         shadowOf(context).grantPermissions(INTERNET);
-        requestParameters = new RequestParameters.Builder().build();
-        subject = new MoPubNative(context, adUnitId, mock(MoPubNativeListener.class));
+        moPubNativeListener = mock(MoPubNativeListener.class);
+        subject = new MoPubNative(context, adUnitId, moPubNativeListener);
         methodBuilder = TestMethodBuilderFactory.getSingletonMock();
         nativeGpsHelperListener = mock(MoPubNative.NativeGpsHelperListener.class);
         semaphore = new Semaphore(0);
@@ -82,7 +85,7 @@ public void makeRequest_whenGooglePlayServicesIsLinkedAndAdInfoIsNotCached_shoul
                 adInfo.LIMIT_AD_TRACKING_ENABLED
         );
 
-        subject.makeRequest(requestParameters, nativeGpsHelperListener);
+        subject.makeRequest(nativeGpsHelperListener);
         semaphore.acquire();
 
         verify(nativeGpsHelperListener).onFetchAdInfoCompleted();
@@ -90,17 +93,18 @@ public void makeRequest_whenGooglePlayServicesIsLinkedAndAdInfoIsNotCached_shoul
     }
 
     @Test
-    public void loadAd_whenGooglePlayServicesIsNotLinked_shouldFetchAdFast() throws Exception {
+    public void makeRequest_whenGooglePlayServicesIsNotLinked_shouldFetchAdFast() throws Exception {
         SharedPreferencesHelper.getSharedPreferences(context).edit().clear().commit();
         GpsHelperTest.verifyCleanSharedPreferences(context);
 
         GpsHelper.setClassNamesForTesting();
         when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
         when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
+
         // return error code so it fails
         when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE + 1);
 
-        subject.makeRequest(requestParameters, nativeGpsHelperListener);
+        subject.makeRequest(nativeGpsHelperListener);
         // no need to sleep since it run the callback without an async task
 
         verify(nativeGpsHelperListener).onFetchAdInfoCompleted();
@@ -108,7 +112,24 @@ public void loadAd_whenGooglePlayServicesIsNotLinked_shouldFetchAdFast() throws
     }
 
     @Test
-    public void loadAd_whenGooglePlayServicesIsLinkedAndAdInfoIsCached_shouldFetchAdFast() throws Exception {
+    public void makeRequest_whenGooglePlayServicesIsNotLinked_withNullContext_shouldReturnFast() throws Exception {
+        subject.destroy();
+
+        GpsHelper.setClassNamesForTesting();
+        when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
+        when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
+
+        // return error code so it fails
+        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE + 1);
+
+        subject.makeRequest(nativeGpsHelperListener);
+        // no need to sleep since it run the callback without an async task
+
+        verify(nativeGpsHelperListener, never()).onFetchAdInfoCompleted();
+    }
+
+    @Test
+    public void makeRequest_whenGooglePlayServicesIsLinkedAndAdInfoIsCached_shouldFetchAdFast() throws Exception {
         GpsHelperTest.TestAdInfo adInfo = new GpsHelperTest.TestAdInfo();
         GpsHelperTest.populateAndVerifySharedPreferences(context, adInfo);
         GpsHelper.setClassNamesForTesting();
@@ -119,10 +140,41 @@ public void loadAd_whenGooglePlayServicesIsLinkedAndAdInfoIsCached_shouldFetchAd
                 GpsHelper.GOOGLE_PLAY_SUCCESS_CODE
         );
 
-        subject.makeRequest(requestParameters, nativeGpsHelperListener);
+        subject.makeRequest(nativeGpsHelperListener);
         // no need to sleep since it run the callback without an async task
 
         verify(nativeGpsHelperListener).onFetchAdInfoCompleted();
         GpsHelperTest.verifySharedPreferences(context, adInfo);
     }
+
+    @Test
+    public void destroy_shouldSetMoPubNativeListenerToEmptyAndClearContext() throws Exception {
+        assertThat(subject.getContextOrDestroy()).isSameAs(context);
+        assertThat(subject.getMoPubNativeListener()).isSameAs(moPubNativeListener);
+
+        subject.destroy();
+
+        assertThat(subject.getContextOrDestroy()).isNull();
+        assertThat(subject.getMoPubNativeListener()).isSameAs(MoPubNativeListener.EMPTY_MOPUB_NATIVE_LISTENER);
+    }
+
+    @Ignore("pending")
+    @Test
+    public void loadNativeAd_shouldQueueAsyncDownloadTask() throws Exception {
+        Robolectric.getUiThreadScheduler().pause();
+
+        subject.loadNativeAd(null);
+
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+    }
+
+    @Test
+    public void loadNativeAd_shouldReturnFast() throws Exception {
+        Robolectric.getUiThreadScheduler().pause();
+
+        subject.destroy();
+        subject.loadNativeAd(null);
+
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
index 6dbb346e..ad1e8d90 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
@@ -9,12 +9,12 @@
 import android.widget.RelativeLayout;
 import android.widget.TextView;
 
+import com.mopub.common.DownloadResponse;
+import com.mopub.common.util.ResponseHeader;
 import com.mopub.common.util.Utils;
+import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.nativeads.test.support.SdkTestRunner;
 
-import org.json.JSONArray;
-import org.json.JSONObject;
-import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -23,6 +23,7 @@
 import static com.mopub.nativeads.MoPubNative.MoPubNativeListener;
 import static com.mopub.nativeads.NativeAdViewHelper.NativeViewClickListener;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
 
 @RunWith(SdkTestRunner.class)
 public class NativeAdViewHelperTest {
@@ -30,9 +31,8 @@
     private RelativeLayout relativeLayout;
     private ViewGroup viewGroup;
     private NativeResponse nativeResponse;
+    private BaseForwardingNativeAd mNativeAd;
     private ViewBinder viewBinder;
-    private MoPubNativeListener mopubNativeListener;
-    private JSONObject fakeJsonObject;
     private TextView titleView;
     private TextView textView;
     private TextView callToActionView;
@@ -46,10 +46,12 @@ public void setUp() throws Exception {
         relativeLayout.setId((int) Utils.generateUniqueId());
         viewGroup = new LinearLayout(context);
 
-        fakeJsonObject = new JSONObject();
-        fakeJsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
-        fakeJsonObject.put("clktracker", "expected clicktracker");
-        nativeResponse = new NativeResponse(fakeJsonObject);
+        mNativeAd = new BaseForwardingNativeAd() {};
+        mNativeAd.setClickDestinationUrl("destinationUrl");
+        final TestHttpResponseWithHeaders testHttpResponseWithHeaders = new TestHttpResponseWithHeaders(200, "");
+        testHttpResponseWithHeaders.addHeader(ResponseHeader.CLICKTHROUGH_URL.getKey(), "clickTrackerUrl");
+        final DownloadResponse downloadResponse = new DownloadResponse(testHttpResponseWithHeaders);
+        nativeResponse = new NativeResponse(context, downloadResponse, mNativeAd, mock(MoPubNativeListener.class));
 
         titleView = new TextView(context);
         titleView.setId((int) Utils.generateUniqueId());
@@ -77,10 +79,6 @@ public void setUp() throws Exception {
                 .build();
     }
 
-    @After
-    public void tearDown() throws Exception {
-    }
-
     @Test
     public void getAdView_whenCallToActionIsAButton_shouldAttachClickListenersToConvertViewAndCtaButton() throws Exception {
         assertThat(relativeLayout.performClick()).isFalse();
@@ -134,7 +132,7 @@ public void getOrCreateNativeViewHolder_whenViewTagHasNativeViewHolder_shouldNot
 
     @Test
     public void onClick_shouldQueueClickTrackerAndUrlResolutionTasks() throws Exception {
-        NativeViewClickListener nativeViewClickListener = new NativeViewClickListener(context, "clickTrackerUrl", "destinationUrl", null);
+        NativeViewClickListener nativeViewClickListener = new NativeViewClickListener(nativeResponse);
 
         Robolectric.getBackgroundScheduler().pause();
         assertThat(Robolectric.getBackgroundScheduler().enqueuedTaskCount()).isEqualTo(0);
@@ -145,7 +143,9 @@ public void onClick_shouldQueueClickTrackerAndUrlResolutionTasks() throws Except
 
     @Test
     public void onClick_withNullDestinationUrl_shouldNotQueueUrlResolutionTask() throws Exception {
-        NativeViewClickListener nativeViewClickListener = new NativeViewClickListener(context, "clickTrackerUrl", null, null);
+        mNativeAd.setClickDestinationUrl(null);
+
+        NativeViewClickListener nativeViewClickListener = new NativeViewClickListener(nativeResponse);
 
         Robolectric.getBackgroundScheduler().pause();
         assertThat(Robolectric.getBackgroundScheduler().enqueuedTaskCount()).isEqualTo(0);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
index 9bb3abb9..d4fb9ffe 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
@@ -1,268 +1,303 @@
 package com.mopub.nativeads;
 
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import android.app.Activity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.LinearLayout;
 
-import org.json.JSONArray;
-import org.json.JSONObject;
+import com.mopub.common.DownloadResponse;
+import com.mopub.common.util.ResponseHeader;
+import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
+import com.mopub.nativeads.test.support.SdkTestRunner;
+
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.tester.org.apache.http.HttpRequestInfo;
 
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 
-import static com.mopub.nativeads.NativeResponse.Parameter;
-import static com.mopub.nativeads.NativeResponse.Parameter.requiredKeys;
+import static com.mopub.nativeads.ImpressionTrackingManager.NativeResponseWrapper;
+import static com.mopub.nativeads.MoPubNative.MoPubNativeListener.EMPTY_MOPUB_NATIVE_LISTENER;
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
 public class NativeResponseTest {
 
-    private JSONObject fakeJsonObject;
     private NativeResponse subject;
+    private BaseForwardingNativeAd mNativeAd;
+    private Activity context;
+    private ViewGroup view;
+    private MoPubNative.MoPubNativeListener moPubNativeListener;
+    private NativeResponse subjectWMockBaseNativeAd;
+    private NativeAdInterface mMockNativeAd;
+    private boolean baseNativeAdRecordedImpression;
+    private boolean baseNativeAdIsClicked;
+    private DownloadResponse downloadResponse;
 
     @Before
     public void setUp() throws Exception {
-        fakeJsonObject = new JSONObject();
-        fakeJsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
-        fakeJsonObject.put("clktracker", "expected clicktracker");
+        context = new Activity();
+        mNativeAd = new BaseForwardingNativeAd() {
+            @Override
+            public void recordImpression() {
+                baseNativeAdRecordedImpression = true;
+            }
+
+            @Override
+            public void handleClick(final View view) {
+                baseNativeAdIsClicked = true;
+            }
+        };
+        mNativeAd.setTitle("title");
+        mNativeAd.setText("text");
+        mNativeAd.setMainImageUrl("mainImageUrl");
+        mNativeAd.setIconImageUrl("iconImageUrl");
+        mNativeAd.setClickDestinationUrl("clickDestinationUrl");
+        mNativeAd.setCallToAction("callToAction");
+        mNativeAd.addExtra("extra", "extraValue");
+        mNativeAd.addExtra("extraImage", "extraImageUrl");
+        mNativeAd.addImpressionTracker("impressionUrl");
+        mNativeAd.setImpressionMinTimeViewed(500);
+
+        view = new LinearLayout(context);
+
+        final TestHttpResponseWithHeaders testHttpResponseWithHeaders = new TestHttpResponseWithHeaders(200, "");
+        testHttpResponseWithHeaders.addHeader(ResponseHeader.IMPRESSION_URL.getKey(), "moPubImpressionTrackerUrl");
+        testHttpResponseWithHeaders.addHeader(ResponseHeader.CLICKTHROUGH_URL.getKey(), "moPubClickTrackerUrl");
+        downloadResponse = new DownloadResponse(testHttpResponseWithHeaders);
+
+        moPubNativeListener = mock(MoPubNative.MoPubNativeListener.class);
+
+        subject = new NativeResponse(context, downloadResponse, mNativeAd, moPubNativeListener);
+
+        mMockNativeAd = mock(NativeAdInterface.class);
+        subjectWMockBaseNativeAd = new NativeResponse(context, downloadResponse, mMockNativeAd, moPubNativeListener);
     }
 
-    @Test
-    public void parameter_requiredKeys_shouldOnlyContainTheRequiredKeys() throws Exception {
-        final HashSet<String> expectedKeys = new HashSet<String>();
-        expectedKeys.add("imptracker");
-        expectedKeys.add("clktracker");
-
-        assertThat(requiredKeys).isEqualTo(expectedKeys);
+    @After
+    public void tearDown() throws Exception {
+        ImpressionTrackingManager.purgeViews();
     }
 
     @Test
-    public void parameter_fromString_shouldReturnParameterOnMatch() throws Exception {
-        final Parameter parameter = Parameter.from("title");
-
-        assertThat(parameter).isEqualTo(Parameter.TITLE);
+    public void getTitle_shouldReturnTitleFromBaseNativeAd() throws Exception {
+        assertThat(subject.getTitle()).isEqualTo("title");
     }
 
     @Test
-    public void parameter_fromString_shouldReturnNullOnIllegalKey() throws Exception {
-        final Parameter parameter = Parameter.from("random gibberish");
-
-        assertThat(parameter).isNull();
+    public void getTitle_shouldReturnTextFromBaseNativeAd() throws Exception {
+        assertThat(subject.getText()).isEqualTo("text");
     }
 
     @Test
-    public void constructor_whenMissingRequiredKeys_shouldThrowIllegalArgumentException() throws Exception {
-        fakeJsonObject.remove("imptracker");
-
-        try {
-            subject = new NativeResponse(fakeJsonObject);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // pass
-        }
+    public void getMainImageUrl_shouldReturnMainImageUrlFromBaseNativeAd() throws Exception {
+        assertThat(subject.getMainImageUrl()).isEqualTo("mainImageUrl");
     }
 
     @Test
-    public void constructor_whenExpectedKeyOfWrongType_shouldThrowIllegalArgumentException() throws Exception {
-        fakeJsonObject.put("clktracker", 100);
-
-        try {
-            subject = new NativeResponse(fakeJsonObject);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // pass
-        }
+    public void getIconImageUrl_shouldReturnIconImageUrlFromBaseNativeAd() throws Exception {
+        assertThat(subject.getIconImageUrl()).isEqualTo("iconImageUrl");
     }
 
     @Test
-    public void constructor_shouldSetRequiredExpectedFields() throws Exception {
-        subject = new NativeResponse(fakeJsonObject);
-
-        assertThat(subject.getImpressionTrackers()).containsOnly("url1", "url2");
-        assertThat(subject.getClickTracker()).isEqualTo("expected clicktracker");
+    public void getClickDestinationUrl_shouldReturnClickDestinationUrlFromBaseNativeAd() throws Exception {
+        assertThat(subject.getClickDestinationUrl()).isEqualTo("clickDestinationUrl");
     }
 
     @Test
-    public void constructor_shouldSetOptionalExpectedFields() throws Exception {
-        fakeJsonObject.put("title", "expected title");
-        fakeJsonObject.put("text", "expected text");
-        fakeJsonObject.put("mainimage", "expected mainimage");
-        fakeJsonObject.put("iconimage", "expected iconimage");
-
-        fakeJsonObject.put("clk", "expected clk");
-
-        fakeJsonObject.put("fallback", "expected fallback");
-        fakeJsonObject.put("ctatext", "expected ctatext");
-        fakeJsonObject.put("starrating", 5.0);
-
-        subject = new NativeResponse(fakeJsonObject);
+    public void getCallToAction_shouldReturnCallToActionFromBaseNativeAd() throws Exception {
+        assertThat(subject.getCallToAction()).isEqualTo("callToAction");
+    }
 
-        assertThat(subject.getTitle()).isEqualTo("expected title");
-        assertThat(subject.getSubtitle()).isEqualTo("expected text");
-        assertThat(subject.getMainImageUrl()).isEqualTo("expected mainimage");
-        assertThat(subject.getIconImageUrl()).isEqualTo("expected iconimage");
+    @Test
+    public void getExtra_shouldReturnExtraFromBaseNativeAd() throws Exception {
+        assertThat(subject.getExtra("extra")).isEqualTo("extraValue");
+    }
 
-        assertThat(subject.getClickDestinationUrl()).isEqualTo("expected clk");
+    @Test
+    public void getExtras_shouldReturnCopyOfExtrasMapFromBaseNativeAd() throws Exception {
+        final Map<String, Object> extras = subject.getExtras();
+        assertThat(extras.size()).isEqualTo(2);
+        assertThat(extras.get("extra")).isEqualTo("extraValue");
+        assertThat(extras.get("extraImage")).isEqualTo("extraImageUrl");
+        assertThat(extras).isNotSameAs(mNativeAd.getExtras());
+    }
 
-//        assertThat(subject.getFallback()).isEqualTo("expected fallback");
-        assertThat(subject.getImpressionTrackers()).containsOnly("url1", "url2");
-        assertThat(subject.getClickTracker()).isEqualTo("expected clicktracker");
-        assertThat(subject.getCallToAction()).isEqualTo("expected ctatext");
-//        assertThat(subject.getStarRating()).isEqualTo(5.0);
+    @Test
+    public void getImpressionTrackers_shouldReturnImpressionTrackersFromMoPubAndFromBaseNativeAd() throws Exception {
+        final List<String> impressionTrackers = subject.getImpressionTrackers();
+        assertThat(impressionTrackers).containsOnly("moPubImpressionTrackerUrl", "impressionUrl");
     }
 
     @Test
-    public void constructor_whenImpressionTrackersIsNotJSONArray_shouldThrowIllegalArgumentException() throws Exception {
-        // An array list is not the same thing as a JSONArray
-        final List<String> impressionTrackers = new ArrayList<String>();
-        impressionTrackers.add("url1");
-        impressionTrackers.add("url2");
-        fakeJsonObject.put("imptracker", impressionTrackers);
-
-        try {
-            subject = new NativeResponse(fakeJsonObject);
-            fail("Expected constructor to throw an IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // pass
-        }
+    public void getImpressionMinTimeViewed_shouldReturnImpressionMinTimeViewedFromBaseNativeAd() throws Exception {
+        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(500);
     }
 
     @Test
-    public void constructor_whenImpressionTrackersContainsNonStrings_willCoerceToString() throws Exception {
-        /**
-         * At this level of abstraction, we don't actually care that these Strings resolve to valid
-         * URLs. We just want to ensure that the constructor does not throw an exception.
-         */
-        final JSONArray impressionTrackers = new JSONArray();
-        impressionTrackers.put("url1");
-        impressionTrackers.put(JSONObject.NULL);
-        impressionTrackers.put(2.12);
-        fakeJsonObject.put("imptracker", impressionTrackers);
-
-        subject = new NativeResponse(fakeJsonObject);
-
-        assertThat(subject.getImpressionTrackers()).containsOnly("url1", "null", "2.12");
+    public void getImpressionMinPercentageViewed_shouldReturnImpressionMinPercentageViewedFromBaseNativeAd() throws Exception {
+        assertThat(subject.getImpressionMinPercentageViewed()).isEqualTo(50);
     }
 
     @Test
-    public void constructor_shouldSetExtraFields() throws Exception {
-        List<Object> array = new ArrayList<Object>();
-        array.add("index1");
-        array.add(-10);
-
-        Map<String, Object> map = new HashMap<String, Object>();
-        map.put("one", "a");
-        map.put("two", "b");
-
-        fakeJsonObject.put("key1", "yay json");
-        fakeJsonObject.put("key2", 5);
-        fakeJsonObject.put("key3", new JSONArray(array));
-        fakeJsonObject.put("key4", new JSONObject(map));
-
-        subject = new NativeResponse(fakeJsonObject);
-
-        assertThat(subject.getExtra("key1")).isEqualTo("yay json");
-        assertThat(subject.getExtra("key2")).isEqualTo(5);
-        assertThat((JSONArray) subject.getExtra("key3")).isEqualsToByComparingFields(new JSONArray(array));
-        assertThat((JSONObject) subject.getExtra("key4")).isEqualsToByComparingFields(new JSONObject(map));
+    public void getClickTracker_shouldReturnMoPubClickTracker() throws Exception {
+        assertThat(subject.getClickTracker()).isEqualTo("moPubClickTrackerUrl");
+    }
+    
+    @Test
+    public void prepareImpression_shouldAddViewAndResponseToImpressionTrackingManagerAndCallPrepareImpressionOnBaseNativeAd() throws Exception {
+        assertThat(ImpressionTrackingManager.getKeptViews()).isEmpty();
+        subjectWMockBaseNativeAd.prepareImpression(view);
+        final Map<View, NativeResponseWrapper> keptViews = ImpressionTrackingManager.getKeptViews();
+        assertThat(keptViews.size()).isEqualTo(1);
+        assertThat(keptViews.get(view).mNativeResponse).isSameAs(subjectWMockBaseNativeAd);
+
+        verify(mMockNativeAd).prepareImpression(view);
     }
 
     @Test
-    public void getExtrasImageUrls_whenNoExtras_shouldReturnEmptyList() throws Exception {
-        subject = new NativeResponse(fakeJsonObject);
+    public void prepareImpression_whenDestroyed_shouldReturnFast() throws Exception {
+        subjectWMockBaseNativeAd.destroy();
+        assertThat(subjectWMockBaseNativeAd.isDestroyed()).isTrue();
+        assertThat(ImpressionTrackingManager.getKeptViews()).isEmpty();
 
-        assertThat(subject.getExtrasImageUrls()).isEmpty();
+        subjectWMockBaseNativeAd.prepareImpression(view);
+
+        assertThat(ImpressionTrackingManager.getKeptViews()).isEmpty();
+        verify(mMockNativeAd, never()).prepareImpression(view);
     }
 
     @Test
-    public void getExtrasImageUrls_whenExtrasDoesNotContainImageKeys_shouldReturnEmptyList() throws Exception {
-        // getExtrasImageUrls requires the key to end with a case-insensitive "image" to be counted as an image
-        fakeJsonObject.put("imageAtFront", "ignored");
-        fakeJsonObject.put("middle_image_in_key", "ignored");
-        fakeJsonObject.put("other", "ignored");
+    public void prepareImpression_whenAlreadyImpressed_shouldReturnFast() throws Exception {
+        subjectWMockBaseNativeAd.setRecordedImpression(true);
+        assertThat(subjectWMockBaseNativeAd.getRecordedImpression()).isTrue();
+        assertThat(ImpressionTrackingManager.getKeptViews()).isEmpty();
 
-        subject = new NativeResponse(fakeJsonObject);
+        subjectWMockBaseNativeAd.prepareImpression(view);
 
-        assertThat(subject.getExtrasImageUrls()).isEmpty();
+        assertThat(ImpressionTrackingManager.getKeptViews()).isEmpty();
+        verify(mMockNativeAd, never()).prepareImpression(view);
     }
 
     @Test
-    public void getExtrasImageUrls_whenExtrasContainsImages_shouldReturnImageUrls() throws Exception {
-        // getExtrasImageUrls requires the key to end with a case-insensitive "image" to be counted as an image
-        fakeJsonObject.put("test_image", "image_url_1");
-        fakeJsonObject.put("filler", "ignored");
-        fakeJsonObject.put("otherIMAGE", "image_url_2");
-        fakeJsonObject.put("more filler", "ignored");
-        fakeJsonObject.put("lastimage", "image_url_3");
+    public void recordImpression_shouldRecordImpressionsAndCallIntoBaseNativeAdAndNotifyListenerIdempotently() throws Exception {
+        Robolectric.getFakeHttpLayer().addPendingHttpResponse(200, "ok");
+        Robolectric.getFakeHttpLayer().addPendingHttpResponse(200, "ok");
+        assertThat(subject.getRecordedImpression()).isFalse();
+
+        subject.recordImpression(view);
+
+        assertThat(subject.getRecordedImpression()).isTrue();
 
-        subject = new NativeResponse(fakeJsonObject);
+        List<HttpRequestInfo> httpRequestInfos = Robolectric.getFakeHttpLayer().getSentHttpRequestInfos();
+        assertThat(httpRequestInfos.size()).isEqualTo(2);
+        assertThat(httpRequestInfos.get(0).getHttpRequest().getRequestLine().getUri()).isEqualTo("moPubImpressionTrackerUrl");
+        assertThat(httpRequestInfos.get(1).getHttpRequest().getRequestLine().getUri()).isEqualTo("impressionUrl");
 
-        assertThat(subject.getExtrasImageUrls()).containsOnly("image_url_1", "image_url_2", "image_url_3");
+        assertThat(baseNativeAdRecordedImpression).isTrue();
+        verify(moPubNativeListener).onNativeImpression(view);
+
+        // reset state
+        baseNativeAdRecordedImpression = false;
+        Robolectric.getFakeHttpLayer().clearRequestInfos();
+        reset(moPubNativeListener);
+
+        // verify impression tracking doesn't fire again
+        subject.recordImpression(view);
+        assertThat(subject.getRecordedImpression()).isTrue();
+        assertThat(Robolectric.getFakeHttpLayer().getSentHttpRequestInfos()).isEmpty();
+        assertThat(baseNativeAdRecordedImpression).isFalse();
+        verify(moPubNativeListener, never()).onNativeImpression(view);
     }
 
-    @Ignore("pending")
     @Test
-    public void loadExtrasImage_shouldAsyncLoadImages() throws Exception {
-        // no easy way to test this since nothing can be mocked
-        // also not a critical test since it directly calls another service
+    public void recordImpression_whenDestroyed_shouldReturnFast() throws Exception {
+        subject.destroy();
+        subject.recordImpression(view);
+        assertThat(subject.getRecordedImpression()).isFalse();
+        assertThat(Robolectric.getFakeHttpLayer().getSentHttpRequestInfos()).isEmpty();
+        assertThat(baseNativeAdRecordedImpression).isFalse();
+        verify(moPubNativeListener, never()).onNativeImpression(view);
     }
 
     @Test
-    public void getAllImageUrls_withNoExtraImages_shouldReturnEmptyList() throws Exception {
-        subject = new NativeResponse(fakeJsonObject);
+    public void handleClick_withNoBaseNativeAdClickDestinationUrl_shouldRecordClickAndCallIntoBaseNativeAdAndNotifyListener() throws Exception {
+        Robolectric.getFakeHttpLayer().addPendingHttpResponse(200, "ok");
+        assertThat(subject.isClicked()).isFalse();
 
-        assertThat(subject.getAllImageUrls()).isEmpty();
-    }
+        subject.handleClick(view);
 
-    @Test
-    public void getAllImageUrls_withExtraImagesAndMainAndIconImages_shouldIncludeThemAlongWithMainAndIconImageUrls() throws Exception {
-        fakeJsonObject.put("mainimage", "expected mainimage");
-        fakeJsonObject.put("iconimage", "expected iconimage");
+        assertThat(subject.isClicked()).isTrue();
+
+        List<HttpRequestInfo> httpRequestInfos = Robolectric.getFakeHttpLayer().getSentHttpRequestInfos();
+        assertThat(httpRequestInfos.size()).isEqualTo(1);
+        assertThat(httpRequestInfos.get(0).getHttpRequest().getRequestLine().getUri()).isEqualTo("moPubClickTrackerUrl");
 
-        fakeJsonObject.put("extra1_image", "expected extra1_image");
-        fakeJsonObject.put("extra2_image", "expected extra2_image");
+        assertThat(baseNativeAdIsClicked).isTrue();
+        verify(moPubNativeListener).onNativeClick(view);
 
-        subject = new NativeResponse(fakeJsonObject);
+        // reset state
+        baseNativeAdIsClicked = false;
+        Robolectric.getFakeHttpLayer().clearRequestInfos();
+        reset(moPubNativeListener);
 
-        assertThat(subject.getAllImageUrls()).containsOnly(
-                "expected mainimage",
-                "expected iconimage",
-                "expected extra1_image",
-                "expected extra2_image"
-        );
+        // second time, tracking does not fire
+        subject.handleClick(view);
+        assertThat(subject.isClicked()).isTrue();
+        assertThat(Robolectric.getFakeHttpLayer().getSentHttpRequestInfos()).isEmpty();
+        assertThat(baseNativeAdRecordedImpression).isFalse();
+        verify(moPubNativeListener).onNativeClick(view);
+    }
+
+    @Ignore("pending")
+    @Test
+    public void handleClick_withBaseNativeAdClickDestinationUrl_shouldRecordClickAndCallIntoBaseNativeAdAndOpenClickDestinationAndNotifyListener() throws Exception {
+        // Really difficult to test url resolution since it doesn't use the apache http client
     }
 
     @Test
-    public void getAllImageUrls_withOnlyExtrasImages_shouldNotIncludeMainOrIconImages() throws Exception {
-        fakeJsonObject.put("extra1_image", "expected extra1_image");
-        fakeJsonObject.put("extra2_image", "expected extra2_image");
+    public void handleClick_whenDestroyed_shouldReturnFast() throws Exception {
+        subject.destroy();
+        subject.handleClick(view);
+        assertThat(subject.isClicked()).isFalse();
+        assertThat(Robolectric.getFakeHttpLayer().getSentHttpRequestInfos()).isEmpty();
+        assertThat(baseNativeAdIsClicked).isFalse();
+        verify(moPubNativeListener, never()).onNativeClick(view);
+    }
 
-        subject = new NativeResponse(fakeJsonObject);
+    @Test
+    public void destroy_shouldCallIntoBaseNativeAd() throws Exception {
+        subjectWMockBaseNativeAd.destroy();
+        assertThat(subjectWMockBaseNativeAd.isDestroyed()).isTrue();
+        verify(mMockNativeAd).destroy();
 
-        assertThat(subject.getAllImageUrls()).containsOnly("expected extra1_image", "expected extra2_image");
+        reset(mMockNativeAd);
+
+        subjectWMockBaseNativeAd.destroy();
+        verify(mMockNativeAd, never()).destroy();
     }
 
     @Test
-    public void recordImpression_shouldSaveImpressionStateWithIdempotence() throws Exception {
-        subject = new NativeResponse(fakeJsonObject);
-        assertThat(subject.getRecordedImpression()).isFalse();
+    public void destroy_shouldSetMoPubNativeListenerToEmptyMoPubNativeListener() throws Exception {
+        assertThat(subjectWMockBaseNativeAd.getMoPubNativeListener()).isSameAs(moPubNativeListener);
 
-        subject.recordImpression();
-        assertThat(subject.getRecordedImpression()).isTrue();
+        subjectWMockBaseNativeAd.destroy();
 
-        subject.recordImpression();
-        assertThat(subject.getRecordedImpression()).isTrue();
+        assertThat(subjectWMockBaseNativeAd.getMoPubNativeListener()).isSameAs(EMPTY_MOPUB_NATIVE_LISTENER);
     }
 
     @Ignore("pending")
     @Test
-    public void loadMainAndIconImages_shouldAsyncLoadImages() throws Exception {
+    public void loadExtrasImage_shouldAsyncLoadImages() throws Exception {
         // no easy way to test this since nothing can be mocked
         // also not a critical test since it directly calls another service
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
new file mode 100644
index 00000000..86deaa9f
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
@@ -0,0 +1,94 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+import android.net.Uri;
+
+import com.mopub.nativeads.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import java.util.EnumSet;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashSet;
+
+import static android.Manifest.permission.ACCESS_NETWORK_STATE;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.robolectric.Robolectric.shadowOf;
+
+@RunWith(SdkTestRunner.class)
+public class NativeUrlGeneratorTest {
+    private Activity context;
+    private NativeUrlGenerator subject;
+
+    @Before
+    public void setup() {
+        context = new Activity();
+        shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
+    }
+
+    @Test
+    public void generateNativeAdUrl_shouldIncludeDesiredAssetIfSet() throws Exception {
+        EnumSet<RequestParameters.NativeAdAsset> assetsSet = EnumSet.of(RequestParameters.NativeAdAsset.TITLE);
+        RequestParameters requestParameters = new RequestParameters.Builder().desiredAssets(assetsSet).build();
+
+        subject = new NativeUrlGenerator(context).withAdUnitId("1234").withRequest(requestParameters);
+
+        String requestString = generateMinimumUrlString();
+        List<String> desiredAssets = getDesiredAssetsListFromRequestUrlString(requestString);
+
+        assertThat(desiredAssets.size()).isEqualTo(1);
+        assertThat(desiredAssets).contains("title");
+    }
+
+    @Test
+    public void generateNativeAdUrl_shouldIncludeDesiredAssetsIfSet() throws Exception {
+        EnumSet<RequestParameters.NativeAdAsset> assetsSet = EnumSet.of(RequestParameters.NativeAdAsset.TITLE, RequestParameters.NativeAdAsset.TEXT, RequestParameters.NativeAdAsset.ICON_IMAGE);
+        RequestParameters requestParameters = new RequestParameters.Builder().desiredAssets(assetsSet).build();
+
+        subject = new NativeUrlGenerator(context).withAdUnitId("1234").withRequest(requestParameters);
+
+        String requestString = generateMinimumUrlString();
+        List<String> desiredAssets = getDesiredAssetsListFromRequestUrlString(requestString);
+
+        assertThat(desiredAssets.size()).isEqualTo(3);
+        assertThat(desiredAssets).contains("title", "text", "iconimage");
+    }
+
+    @Test
+    public void generateNativeAdUrl_shouldNotIncludeDesiredAssetsIfNotSet() throws Exception {
+        subject = new NativeUrlGenerator(context).withAdUnitId("1234");
+
+        String requestString = generateMinimumUrlString();
+        List<String> desiredAssets = getDesiredAssetsListFromRequestUrlString(requestString);
+
+        assertThat(desiredAssets.size()).isEqualTo(0);
+    }
+
+    @Test
+    public void generateNativeAdUrl_shouldNotIncludeDesiredAssetsIfNoAssetsAreSet() throws Exception {
+        EnumSet<RequestParameters.NativeAdAsset> assetsSet = EnumSet.noneOf(RequestParameters.NativeAdAsset.class);
+        RequestParameters requestParameters = new RequestParameters.Builder().desiredAssets(assetsSet).build();
+
+        subject = new NativeUrlGenerator(context).withAdUnitId("1234").withRequest(requestParameters);
+
+        String requestString = generateMinimumUrlString();
+        List<String> desiredAssets = getDesiredAssetsListFromRequestUrlString(requestString);
+
+        assertThat(desiredAssets.size()).isEqualTo(0);
+    }
+
+    private List<String> getDesiredAssetsListFromRequestUrlString(String requestString) {
+        Uri requestUri = Uri.parse(requestString);
+
+        String desiredAssetsString = requestUri.getQueryParameter("assets");
+        return (desiredAssetsString == null) ? new ArrayList<String>() : Arrays.asList(desiredAssetsString.split(","));
+    }
+
+    private String generateMinimumUrlString() {
+        return subject.generateUrlString("ads.mopub.com");
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
index 0311a18e..736c6da7 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
@@ -9,17 +9,18 @@
 import android.widget.RelativeLayout;
 import android.widget.TextView;
 
+import com.mopub.common.CacheService;
+import com.mopub.common.DownloadResponse;
 import com.mopub.common.util.Utils;
+import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.nativeads.test.support.SdkTestRunner;
 
-import org.json.JSONArray;
-import org.json.JSONObject;
-import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
@@ -30,7 +31,6 @@
     private NativeResponse nativeResponse;
     private ViewBinder viewBinder;
     private MoPubNative.MoPubNativeListener mopubNativeListener;
-    private JSONObject fakeJsonObject;
     private TextView titleView;
     private TextView textView;
     private TextView callToActionView;
@@ -38,6 +38,7 @@
     private ImageView iconImageView;
     private TextView extrasTextView;
     private ImageView extrasImageView;
+    private ImageView extrasImageView2;
 
     @Before
     public void setUp() throws Exception {
@@ -46,12 +47,6 @@ public void setUp() throws Exception {
         relativeLayout.setId((int) Utils.generateUniqueId());
         viewGroup = new LinearLayout(context);
 
-        fakeJsonObject = new JSONObject();
-
-        // Only mandatory json fields
-        fakeJsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
-        fakeJsonObject.put("clktracker", "expected clicktracker");
-
         // Fields in the web ui
         titleView = new TextView(context);
         titleView.setId((int) Utils.generateUniqueId());
@@ -69,6 +64,8 @@ public void setUp() throws Exception {
         extrasTextView.setId((int) Utils.generateUniqueId());
         extrasImageView = new ImageView(context);
         extrasImageView.setId((int) Utils.generateUniqueId());
+        extrasImageView2 = new ImageView(context);
+        extrasImageView2.setId((int) Utils.generateUniqueId());
 
         relativeLayout.addView(titleView);
         relativeLayout.addView(textView);
@@ -77,10 +74,7 @@ public void setUp() throws Exception {
         relativeLayout.addView(iconImageView);
         relativeLayout.addView(extrasTextView);
         relativeLayout.addView(extrasImageView);
-    }
-
-    @After
-    public void tearDown() throws Exception {
+        relativeLayout.addView(extrasImageView2);
     }
 
     @Test
@@ -147,12 +141,15 @@ public void update_shouldAddValuesToViews() throws Exception {
         CacheService.putToMemoryCache("mainimageurl", "mainimagedata".getBytes());
         CacheService.putToMemoryCache("iconimageurl", "iconimagedata".getBytes());
 
-        fakeJsonObject.put("title", "titletext");
-        fakeJsonObject.put("text", "texttext");
-        fakeJsonObject.put("mainimage", "mainimageurl");
-        fakeJsonObject.put("iconimage", "iconimageurl");
-        fakeJsonObject.put("ctatext", "cta");
-        nativeResponse = new NativeResponse(fakeJsonObject);
+        BaseForwardingNativeAd nativeAd = new BaseForwardingNativeAd() {};
+        nativeAd.setTitle("titletext");
+        nativeAd.setText("texttext");
+        nativeAd.setMainImageUrl("mainimageurl");
+        nativeAd.setIconImageUrl("iconimageurl");
+        nativeAd.setCallToAction("cta");
+
+        final DownloadResponse downloadResponse = new DownloadResponse(new TestHttpResponseWithHeaders(200, ""));
+        nativeResponse = new NativeResponse(context, downloadResponse, nativeAd, null);
 
         viewBinder = new ViewBinder.Builder(relativeLayout.getId())
                 .titleId(titleView.getId())
@@ -186,7 +183,8 @@ public void update_withMissingNativeResponseFields_shouldClearPreviousValues() t
         iconImageView.setImageBitmap(ImageService.byteArrayToBitmap("previousiconimagedata".getBytes()));
 
         // Only required fields in native response
-        nativeResponse = new NativeResponse(fakeJsonObject);
+        final DownloadResponse downloadResponse = new DownloadResponse(new TestHttpResponseWithHeaders(200, ""));
+        nativeResponse = new NativeResponse(context, downloadResponse, mock(BaseForwardingNativeAd.class), null);
 
         viewBinder = new ViewBinder.Builder(relativeLayout.getId())
                 .titleId(titleView.getId())
@@ -214,8 +212,10 @@ public void update_withDifferentViewBinder_shouldNotClearPreviousValues() throws
         titleView.setText("previoustitletext");
         textView.setText("previoustexttext");
 
-        fakeJsonObject.put("ctatext", "cta");
-        nativeResponse = new NativeResponse(fakeJsonObject);
+        BaseForwardingNativeAd nativeAd = new BaseForwardingNativeAd() {};
+        nativeAd.setCallToAction("cta");
+        final DownloadResponse downloadResponse = new DownloadResponse(new TestHttpResponseWithHeaders(200, ""));
+        nativeResponse = new NativeResponse(context, downloadResponse, nativeAd, null);
 
         viewBinder = new ViewBinder.Builder(relativeLayout.getId())
                 .callToActionId(callToActionView.getId())
@@ -236,14 +236,19 @@ public void updateExtras_shouldAddValuesToViews() throws Exception {
         // Setup for cache state for image gets
         CacheService.initializeCaches(context);
         CacheService.putToMemoryCache("extrasimageurl", "extrasimagedata".getBytes());
+        CacheService.putToMemoryCache("extrasimageurl2", "extrasimagedata2".getBytes());
 
-        fakeJsonObject.put("extrastext", "extrastexttext");
-        fakeJsonObject.put("extrasimage", "extrasimageurl");
-        nativeResponse = new NativeResponse(fakeJsonObject);
+        BaseForwardingNativeAd nativeAd = new BaseForwardingNativeAd() {};
+        nativeAd.addExtra("extrastext", "extrastexttext");
+        nativeAd.addExtra("extrasimage", "extrasimageurl");
+        nativeAd.addExtra("extrasimage2", "extrasimageurl2");
+        final DownloadResponse downloadResponse = new DownloadResponse(new TestHttpResponseWithHeaders(200, ""));
+        nativeResponse = new NativeResponse(context, downloadResponse, nativeAd, null);
 
         viewBinder = new ViewBinder.Builder(relativeLayout.getId())
                 .addExtra("extrastext", extrasTextView.getId())
                 .addExtra("extrasimage", extrasImageView.getId())
+                .addExtra("extrasimage2", extrasImageView2.getId())
                 .build();
 
         NativeViewHolder nativeViewHolder =
@@ -254,18 +259,23 @@ public void updateExtras_shouldAddValuesToViews() throws Exception {
         assertThat(extrasTextView.getText()).isEqualTo("extrastexttext");
         assertThat(shadowOf(ImageViewServiceTest.getBitmapFromImageView(extrasImageView))
                 .getCreatedFromBytes()).isEqualTo("extrasimagedata".getBytes());
+        assertThat(shadowOf(ImageViewServiceTest.getBitmapFromImageView(extrasImageView2))
+                .getCreatedFromBytes()).isEqualTo("extrasimagedata2".getBytes());
     }
 
     @Test
     public void updateExtras_withMissingExtrasValues_shouldClearPreviousValues() throws Exception {
         extrasTextView.setText("previousextrastext");
         extrasImageView.setImageBitmap(ImageService.byteArrayToBitmap("previousextrasimagedata".getBytes()));
+        extrasImageView2.setImageBitmap(ImageService.byteArrayToBitmap("previousextrasimagedata2".getBytes()));
 
-        nativeResponse = new NativeResponse(fakeJsonObject);
+        final DownloadResponse downloadResponse = new DownloadResponse(new TestHttpResponseWithHeaders(200, ""));
+        nativeResponse = new NativeResponse(context, downloadResponse, new BaseForwardingNativeAd(){}, null);
 
         viewBinder = new ViewBinder.Builder(relativeLayout.getId())
                 .addExtra("extrastext", extrasTextView.getId())
                 .addExtra("extrasimage", extrasImageView.getId())
+                .addExtra("extrasimage2", extrasImageView2.getId())
                 .build();
 
         NativeViewHolder nativeViewHolder =
@@ -274,18 +284,24 @@ public void updateExtras_withMissingExtrasValues_shouldClearPreviousValues() thr
         assertThat(extrasTextView.getText()).isEqualTo("previousextrastext");
         assertThat(shadowOf(ImageViewServiceTest.getBitmapFromImageView(extrasImageView))
                 .getCreatedFromBytes()).isEqualTo("previousextrasimagedata".getBytes());
+        assertThat(shadowOf(ImageViewServiceTest.getBitmapFromImageView(extrasImageView2))
+                .getCreatedFromBytes()).isEqualTo("previousextrasimagedata2".getBytes());
 
         nativeViewHolder.updateExtras(relativeLayout, nativeResponse, viewBinder);
 
         assertThat(extrasTextView.getText()).isEqualTo("");
         assertThat(extrasImageView.getDrawable()).isNull();
+        assertThat(extrasImageView2.getDrawable()).isNull();
     }
 
     @Test
-    public void updateExtras_withMismatchingViewTypes_shouldNotSetValues() throws Exception {
-        fakeJsonObject.put("extrastext", "extrastexttext");
-        fakeJsonObject.put("extrasimage", "extrasimageurl");
-        nativeResponse = new NativeResponse(fakeJsonObject);
+    public void updateExtras_withMismatchingViewTypes_shouldSetTextViewToImageUrlAndSetExtrasImageViewToNull() throws Exception {
+        BaseForwardingNativeAd nativeAd = new BaseForwardingNativeAd() {};
+        nativeAd.addExtra("extrastext", "extrastexttext");
+        nativeAd.addExtra("extrasimage", "extrasimageurl");
+
+        final DownloadResponse downloadResponse = new DownloadResponse(new TestHttpResponseWithHeaders(200, ""));
+        nativeResponse = new NativeResponse(context, downloadResponse, nativeAd, null);
 
         viewBinder = new ViewBinder.Builder(relativeLayout.getId())
                 .addExtra("extrastext", extrasImageView.getId())
@@ -300,7 +316,7 @@ public void updateExtras_withMismatchingViewTypes_shouldNotSetValues() throws Ex
 
         nativeViewHolder.updateExtras(relativeLayout, nativeResponse, viewBinder);
 
-        assertThat(extrasTextView.getText()).isEqualTo("");
+        assertThat(extrasTextView.getText()).isEqualTo("extrasimageurl");
         assertThat(extrasImageView.getDrawable()).isNull();
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
new file mode 100644
index 00000000..3a46eb1e
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
@@ -0,0 +1,38 @@
+package com.mopub.nativeads.factories;
+
+import com.mopub.nativeads.CustomEventNative;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
+
+@RunWith(RobolectricTestRunner.class)
+public class CustomEventNativeFactoryTest {
+    @Test
+    public void create_withValidClassName_shouldCreateClass() throws Exception {
+        assertCustomEventClassCreated("com.mopub.nativeads.MoPubCustomEventNative");
+    }
+
+    @Test
+    public void create_withInvalidClassName_shouldThrowException() throws Exception {
+        try {
+            CustomEventNativeFactory.create("com.mopub.nativeads.inVaLiDClassssssName1231232131");
+            fail("CustomEventNativeFactory did not throw exception on create");
+        } catch (Exception e) {
+            // pass
+        }
+    }
+
+    @Test
+    public void create_withNullClassName_shouldReturnMoPubCustomEventNativeClass() throws Exception {
+        assertThat(CustomEventNativeFactory.create(null).getClass().getName()).isEqualTo("com.mopub.nativeads.MoPubCustomEventNative");
+    }
+
+    private void assertCustomEventClassCreated(final String className) throws Exception {
+        final CustomEventNative customEventNative = CustomEventNativeFactory.create(className);
+        assertThat(customEventNative.getClass().getName()).isEqualTo(className);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/SdkTestRunner.java b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/SdkTestRunner.java
index ba31ed34..a453bc9c 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/SdkTestRunner.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/SdkTestRunner.java
@@ -2,6 +2,7 @@
 
 import com.mopub.common.factories.MethodBuilderFactory;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
+import com.mopub.nativeads.factories.CustomEventNativeFactory;
 
 import org.junit.runners.model.InitializationError;
 import org.mockito.MockitoAnnotations;
@@ -24,6 +25,7 @@ public SdkTestRunner(Class<?> testClass) throws InitializationError {
         @Override
         public void prepareTest(Object test) {
             MethodBuilderFactory.setInstance(new TestMethodBuilderFactory());
+            CustomEventNativeFactory.setInstance(new TestCustomEventNativeFactory());
             MockitoAnnotations.initMocks(test);
         }
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java
new file mode 100644
index 00000000..3132f10d
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java
@@ -0,0 +1,23 @@
+package com.mopub.nativeads.test.support;
+
+import com.mopub.nativeads.CustomEventNative;
+import com.mopub.nativeads.factories.CustomEventNativeFactory;
+
+import static org.mockito.Mockito.mock;
+
+public class TestCustomEventNativeFactory extends CustomEventNativeFactory {
+    private CustomEventNative instance = mock(CustomEventNative.class);
+
+    public static CustomEventNative getSingletonMock() {
+        return getTestFactory().instance;
+    }
+
+    private static TestCustomEventNativeFactory getTestFactory() {
+        return ((TestCustomEventNativeFactory) CustomEventNativeFactory.instance);
+    }
+
+    @Override
+    protected CustomEventNative internalCreate(final Class<? extends CustomEventNative> nativeClass) {
+        return instance;
+    }
+}
diff --git a/robotium-sample/AndroidManifest.xml b/robotium-sample/AndroidManifest.xml
index 180580a9..24230c17 100644
--- a/robotium-sample/AndroidManifest.xml
+++ b/robotium-sample/AndroidManifest.xml
@@ -9,8 +9,7 @@
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
     
-    <application android:label="Cool Activity"
-            android:debuggable="true">
+    <application android:label="Cool Activity">
 	    <activity android:name=".RobotiumTestSupportActivity"
 	            android:label="Cool Activity" android:theme="@android:style/Theme.NoTitleBar" >
 	        <intent-filter>
diff --git a/robotium-tests/AndroidManifest.xml b/robotium-tests/AndroidManifest.xml
index 7d522746..03714b71 100644
--- a/robotium-tests/AndroidManifest.xml
+++ b/robotium-tests/AndroidManifest.xml
@@ -7,8 +7,7 @@
 
     <instrumentation android:targetPackage="com.mopub.mobileads.robotium" android:name="android.test.InstrumentationTestRunner" />
 
-    <application android:label="Cool Activity Test"
-                 android:debuggable="true">
+    <application android:label="Cool Activity Test">
         <uses-library android:name="android.test.runner" />
     </application>
-</manifest>
\ No newline at end of file
+</manifest>
