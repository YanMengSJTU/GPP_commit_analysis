diff --git a/CHANGELOG.md b/CHANGELOG.md
index b8b55c9a..5add0cbc 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,137 @@
+## Version 4.19.0 (December 11, 2017)
+- Updated Facebook Audience Network adapters to 4.26.1.
+- Updated Flurry adapters to 8.1.0.
+- Updated Millennial rewarded ads adapters to 6.6.1.
+- Fixed a potential crash for native video ads when attempting to blur the last video frame.
+- Fixed a duplicate on loaded callback for some rewarded ads.
+
+## Version 4.18.0 (November 1, 2017)
+- Updated the SDK compile version to 26. Android API 26 artifacts live in the new Google maven repository `maven { url 'https://maven.google.com' }`. See [this article](https://developer.android.com/about/versions/oreo/android-8.0-migration.html) for more information about using Android API 26.
+- Fixed MoPub in-app browser's back and forward button icons.
+- Updated AdMob adapters to 11.4.0.
+- Updated Chartboost adapters to 7.0.1.
+- Updated Facebook Audience Network adapters to 4.26.0.
+- Updated Millennial to 6.6.1.
+- Updated TapJoy adapters to 11.11.0.
+- Updated Unity Ads adapters to 2.1.1.
+- Updated Vungle adapters to 5.3.0.
+- Bug fixes.
+
+## Version 4.17.0 (September 27, 2017)
+- Rewarded Ads can now send up optional custom data through the server completion url. See `MoPubRewardedVideos#showRewardedVideo(String, String)`.
+- Updated Facebook native adapter to ignore clicks on whitespace as per Facebook policy.
+
+#### Version 4.16.1 (August 24, 2017)
+- Fixed issue where null javascript was being passed to AVID video sessions.
+
+## Version 4.16.0 (August 23, 2017)
+- Added support for viewability measurement from IAS (AVID library) and Moat.  
+  - **Important:** New dependencies were included in this release; please update your `build.gradle`'s repositories block to include `maven { url "https://s3.amazonaws.com/moat-sdk-builds" }`. Note that the AVID library is provided on JCenter, so no additional steps must be taken -- it will be included automatically.
+  - To disable this feature, see note below on [Disabling Viewability Measurement](#disableViewability).
+- Interstitials are now loaded offscreen instead of in a separate WebView.
+- Rewarded Videos have a new init method. See `MoPubRewardedVideos.initializeRewardedVideo(Activity, List<Class<? extends CustomEventRewardedVideo>>, MediationSettings...)`. Pass in a list of networks to initialize, and MoPub will initialize those networks with the settings from the previous ad request, persisted across app close.
+- Upgraded our ExoPlayer dependency to 2.4.4.
+- Bug fixes
+
+#### Disclosures
+MoPub v4.16 SDK integrates technology from our partners Integral Ad Science, Inc. (“IAS”) and Moat, Inc. (“Moat”) in order to support viewability measurement and other proprietary reporting that [IAS](https://integralads.com/capabilities/viewability/) and [Moat](https://moat.com/analytics) provide to their advertiser and publisher clients. You have the option to remove or disable this technology by following the [opt-out instructions](#disableViewability) below.  
+
+If you do not remove or disable IAS's and/or Moat’s technology in accordance with these instructions, you agree that IAS's [privacy policy](https://integralads.com/privacy-policy/) and [license](https://integralads.com/sdk-license-agreement) and Moat’s [privacy policy](https://moat.com/privacy),  [terms](https://moat.com/terms), and [license](https://moat.com/sdklicense.txt), respectively, apply to your integration of these partners' technologies into your application.
+
+#### <a name="disableViewability"></a>Disabling Viewability Measurement
+There are a few options for opting out of viewability measurement:  
+##### Strip out from JCenter Integration
+Normally, to add the MoPub SDK to your app via JCenter, your `build.gradle` would contain:
+
+```	
+dependencies {
+	compile('com.mopub:mopub-sdk:4.16.0@aar') {
+		transitive = true
+	}
+}
+```
+Update to the following to exclude one or both viewability vendors:
+
+```
+dependencies {
+	compile('com.mopub:mopub-sdk:4.16.0@aar') {
+		transitive = true
+		exclude module: 'libAvid-mopub' // To exclude AVID
+		exclude module: 'moat-mobile-app-kit' // To exclude Moat
+    }
+}
+```
+##### Strip out from GitHub integration
+Navigate to the `gradle.properties` file in your home directory (e.g. `~/.gradle/gradle.properties`) and include one or both of these lines to opt out of viewability measurement for AVID and/or Moat.  
+
+```
+mopub.avidEnabled=false
+mopub.moatEnabled=false
+```
+##### Disable via API
+If you would like to opt out of viewability measurement but do not want to modify the MoPub SDK, a function is provided for your convenience. At any point, call `MoPub.disableViewability(vendor);`. This method can can be called with any of the enum values available in `ExternalViewabilitySessionManager.ViewabilityVendor`: `AVID` will disable AVID but leave Moat enabled, `MOAT` will disable Moat but leave AVID enabled, and `ALL` will disable all viewability measurement.
+
+## Version 4.15.0 (June 19, 2017)
+- The SDK now sends Advertising ID on Amazon devices when appropriate.
+- Fixed issue with Charles proxy in sample app for API 24+.
+- Bug fixes.
+
+## Version 4.14.0 (May 10, 2017)
+- Rewarded Ad reward callback `onRewardedVideoCompleted(Set<String>, MoPubReward)` is also triggered now on the client for server-side rewarding.
+- Added click callback for Rewarded Ads.
+  - Any implementors of `MoPubRewardedVideoListener` will now need to also implement `MoPubRewardedVideoListener#onRewardedVideoClicked(String)`.
+- MoPub Ads now expire after 4 hours of being unused.
+  - Interstitial and Rewarded ads served by MoPub will expire 4 hours after successfully loading, triggering a load failure with the new `EXPIRED` `MoPubErrorCode`.
+  - Cached Native Ad Placer ads now also expire in 4 hours.
+- Improved logging when attempting to show an ad that is not ready.
+- Updated build tools version to 25.0.2.
+- Bug fixes.
+
+## Version 4.13.0 (March 23, 2017)
+
+- Updated AdColony Custom Events.
+- Updated Unity Custom Events.
+- Added AdMob Custom Events:
+  - Native: `GooglePlayServicesAdRenderer` and `GooglePlayServicesNative`
+  - Rewarded Video: `GooglePlayServicesRewardedVideo`
+- Bug fixes.
+
+## Version 4.12.0 (February 9, 2017)
+
+- Updated minimum supported Android API version to 16+ (Jelly Bean).
+- New required Activity declaration in `AndroidManifest`, please add:
+
+```
+<activity android:name="com.mopub.mobileads.RewardedMraidActivity"
+          android:configChanges="keyboardHidden|orientation|screenSize"/>
+```
+- Added support for **rich media in rewarded video** inventory.
+- Bug fixes:
+    - Fixed incorrectly forwarded lifecycle events `onStop()` and `onDestroy()` in `MoPubLifeCycleManager` for rewarded rich media ads.
+    - Prevented MoPub-related crashes due to system-level WebView updates while the app is running.
+    - Allow video playback in `reverseLandscape` orientation (in addition to previously supported `landscape` orientation).
+    - Fixed crash caused by invalid VAST absolute tracker values.
+
+## Version 4.11.0 (November 10, 2016)
+- Added a workaround for an Android bug where Lollipop devices (Android 5.1.1, API level 22) and lower incorrectly handle SSL connections using Server Name Identification.
+- Rewarded video `load()` calls now do not load another rewarded video with the same ad unit id while one is already loading or loaded.
+- Moved the VAST video start tracker to immediately after the video starts (was 2 seconds after the video started).
+- Bug fixes.
+
+## Version 4.10.0 (October 18, 2016)
+- **Added and updated mediated network versions**
+  - Added Flurry version 6.5.0. All Flurry adapters can be found in the corresponding `extras` directory (`/extras/src/com/mopub/mobileads` for banners and interstitials, `/extras/src/com/mopub/nativeads` for native).
+    - All Flurry ad formats must include: `FlurryAgentWrapper`
+    - Banners: `FlurryCustomEventBanner`
+    - Interstitial: `FlurryCustomEventInterstitial`
+    - Native: `FlurryCustomEventNative`, `FlurryBaseNativeAd`, `FlurryNativeAdRenderer`, and `FlurryViewBinder`
+  - Certified Facebook Audience Network version 4.15.0  
+  - Certified Tapjoy version 11.8.2
+  - Certified Millennial Media version 6.3.0
+  - Certified Vungle version 4.0.2  
+- Fixed intermittent `IllegalStateException` for MRAID creatives attemping to retrieve getRootView() on unattached Views.
+- Updated `mopub-sample`'s example `proguard.cfg` to properly retain methods called only via reflection.
+
 ## Version 4.9.0 (September 1, 2016)
 - Removed the full SDK bundle.
 - Removed Eclipse support.
@@ -486,3 +620,4 @@ To allow users to play videos using the native video player:
   - Added support for custom events
   - Added network connectivity check before loading an ad
   - Added `OnAdPresentedOverlay` listener methods
+  
diff --git a/Jenkinsfile b/Jenkinsfile
new file mode 100644
index 00000000..0f179eab
--- /dev/null
+++ b/Jenkinsfile
@@ -0,0 +1,22 @@
+#!/usr/bin/env groovy
+pipeline {
+    agent any
+    environment {
+        ANDROID_HOME = '/Users/jenkins/Library/Android/sdk'
+    }
+    stages {
+        stage('Build') {
+            steps {
+                sh './gradlew clean build'
+            }
+        }
+    }
+    post {
+        success {
+            hipchatSend message: "${env.JOB_NAME} #${env.BUILD_NUMBER} has succeeded.", color: 'GREEN'
+        }
+        failure {
+            hipchatSend message: "Attention @here ${env.JOB_NAME} #${env.BUILD_NUMBER} has failed.", color: 'RED'
+        }
+    }
+}
diff --git a/LICENSE b/LICENSE
index 3b96cb9a..84c3303f 100644
--- a/LICENSE
+++ b/LICENSE
@@ -1 +1,3 @@
-The MoPub SDK License can be found at [http://www.mopub.com/legal/sdk-license-agreement/](http://www.mopub.com/legal/sdk-license-agreement/).
+The MoPub SDK License can be found at [http://www.mopub.com/legal/sdk-license-agreement/](http://www.mopub.com/legal/sdk-license-agreement/) and the Apache 2.0 License can be found at [http://www.apache.org/licenses/LICENSE-2.0] (http://www.apache.org/licenses/LICENSE-2.0).
+
+Please note that some of the resources in this package are licensed under The Apache 2.0 license, including Disk LRU Cache, Volley, and Exoplayer.
\ No newline at end of file
diff --git a/README.md b/README.md
index 5a7986f1..a262d86f 100644
--- a/README.md
+++ b/README.md
@@ -12,22 +12,34 @@ To file an issue with our team visit the [MoPub Forum](https://twittercommunity.
 
 **Please Note: We no longer accept GitHub Issues.**
 
+## New Pull Requests?
+
+Thank you for submitting pull requests to the MoPub Android GitHub repository. Our team regularly monitors and investigates all submissions for inclusion in our official SDK releases. Please note that MoPub does not directly merge these pull requests at this time. Please reach out to your account team or [support@mopub.com](mailto:support@mopub.com) if you have further questions.
+
+## Disclosures
+
+MoPub SDK 4.16 and above integrates technology from our partners Integral Ad Science, Inc. (“IAS”) and Moat, Inc. (“Moat”) in order to support viewability measurement and other proprietary reporting that [IAS](https://integralads.com/capabilities/viewability/) and [Moat](https://moat.com/analytics) provide to their advertiser and publisher clients. You have the option to remove or disable this technology by following the [opt-out instructions](#disableViewability) below.  
+
+If you do not remove or disable IAS's and/or Moat’s technology in accordance with these instructions, you agree that IAS's [privacy policy](https://integralads.com/privacy-policy/) and [license](https://integralads.com/sdk-license-agreement) and Moat’s [privacy policy](https://moat.com/privacy),  [terms](https://moat.com/terms), and [license](https://moat.com/sdklicense.txt), respectively, apply to your integration of these partners' technologies into your application.
+
 ## Download
 
 The MoPub SDK is available via:
 
-1. **jCenter AAR**
+1. **JCenter AAR**
     
     [ ![Download](https://api.bintray.com/packages/mopub/mopub-android-sdk/mopub-android-sdk/images/download.svg)](https://bintray.com/mopub/mopub-android-sdk/mopub-android-sdk/_latestVersion)  
-    The MoPub SDK is available as an AAR via jCenter; to use it, add the following to your `build.gradle`.
+    The MoPub SDK is available as an AAR via JCenter; to use it, add the following to your `build.gradle`.
     
     ```
     repositories {
-        jcenter()
+        jcenter() // includes the MoPub SDK and AVID library
+        maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
+        maven { url 'https://maven.google.com' } // necessary for Android API 26
     }
 
     dependencies {
-        compile('com.mopub:mopub-sdk:4.9.0@aar') {
+        compile('com.mopub:mopub-sdk:4.19.0@aar') {
             transitive = true
         }
     }
@@ -40,35 +52,36 @@ The MoPub SDK is available via:
     ```groovy
     repositories {
         // ... other project repositories
-        jcenter()
+        jcenter() // includes the MoPub SDK and AVID library
+        maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
+        maven { url 'https://maven.google.com' } // necessary for Android API 26
     }
-    // ...
 
     dependencies {
         // ... other project dependencies
 
         // For banners
-        compile('com.mopub:mopub-sdk-banner:4.9.0@aar') {
+        compile('com.mopub:mopub-sdk-banner:4.19.0@aar') {
             transitive = true
         }
         
         // For interstitials
-        compile('com.mopub:mopub-sdk-interstitial:4.9.0@aar') {
+        compile('com.mopub:mopub-sdk-interstitial:4.19.0@aar') {
             transitive = true
         }
 
         // For rewarded videos. This will automatically also include interstitials
-        compile('com.mopub:mopub-sdk-rewardedvideo:4.9.0@aar') {
+        compile('com.mopub:mopub-sdk-rewardedvideo:4.19.0@aar') {
             transitive = true
         }
 
         // For native static (images).
-        compile('com.mopub:mopub-sdk-native-static:4.9.0@aar') {
+        compile('com.mopub:mopub-sdk-native-static:4.19.0@aar') {
             transitive = true
         }
 
         // For native video. This will automatically also include native static
-        compile('com.mopub:mopub-sdk-native-video:4.9.0@aar') {
+        compile('com.mopub:mopub-sdk-native-video:4.19.0@aar') {
             transitive = true
         }
     }
@@ -96,33 +109,56 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- Removed the full SDK bundle.
-- Removed Eclipse support.
-- Removed InMobi custom events from extras.
-- Deprecated rewarded video calls from `MoPub.java` and moved them to `MoPubRewardedVideos.java`.
-  - For example, `MoPub#loadRewardedVideo` is deprecated in favor of `MoPubRewardedVideos#loadRewardedVideo`.
-- Bug fixes.
-
-**Modular SDK**
- - Added the ability to specify which ad formats to include as dependencies (to decrease the overall footprint of the MoPub SDK in your app).
- - Default behavior remains unchanged and includes access to all ad formats.
- - **Note:** Maven builds from source are currently unstable and will be reinstated in a future release. Maven developers can still pull the MoPub SDK AAR from JCenter.
+- Updated Facebook Audience Network adapters to 4.26.1.
+- Updated Flurry adapters to 8.1.0.
+- Updated Millennial rewarded ads adapters to 6.6.1.
 
 ## Requirements
 
-- Android 2.3.1 (API Version 9) and up
-- android-support-v4.jar, r23 (**Updated in 4.4.0**)
-- android-support-annotations.jar, r23 (**Updated in 4.4.0**)
-- android-support-v7-recyclerview.jar, r23 (**Updated in 4.4.0**)
+- Android 4.1 (API Version 16) and up (**Updated in 4.12.0**)
+- android-support-v4.jar, r26 (**Updated in 4.18.0**)
+- android-support-annotations.jar, r26 (**Updated in 4.18.0**)
+- android-support-v7-recyclerview.jar, r26 (**Updated in 4.18.0**)
 - MoPub Volley Library (mopub-volley-1.1.0.jar - available on JCenter) (**Updated in 3.6.0**)
-- **Recommended** Google Play Services 7.8.0
-
-## Upgrading from 3.2.0 and Prior
-In 3.3.0 a dependency on android-support-annotations.jar was added. If you are using Maven or Gradle to include the MoPub SDK, this dependency is included in the build scripts. For instructions on adding dependencies for Eclipse projects, see our [Getting Started Guide](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started#adding-the-support-libraries-to-your-project)
-
-## Important Message About Upgrading to MoPub SDK 4.4.0+
-
-Version 4.4.0 of the MoPub SDK fixes a security issue identified by Google. Note that only publishers who received a message from Google are affected. While not all publishers are impacted, we recommend you upgrade to SDK 4.4.0+ ahead of Google's deadline (July 11, 2016) to avoid any issues submitting updates to your apps after the date. More information can be found in [Google's support article](https://support.google.com/faqs/answer/6345928).
+- **Recommended** Google Play Services 11.4.0
+
+## <a name="upgradeRepositoryViewability"></a>Upgrading from 4.15.0 and Prior
+In 4.16.0, dependencies were added to viewability libraries provided by AVID and Moat. Apps upgrading from previous versions must add
+`maven { url "https://s3.amazonaws.com/moat-sdk-builds" }`
+to their `build.gradle` repositories block for these included dependencies to resolve.
+
+## <a name="disableViewability"></a>Disabling Viewability Measurement
+There are a few options for opting out of viewability measurement:  
+##### Strip out from JCenter Integration
+Normally, to add the MoPub SDK to your app via JCenter, your `build.gradle` would contain:
+
+```	
+dependencies {
+    compile('com.mopub:mopub-sdk:4.18.0@aar') {
+        transitive = true
+    }
+}
+```
+Update to the following to exclude one or both viewability vendors:
+
+```
+dependencies {
+    compile('com.mopub:mopub-sdk:4.19.0@aar') {
+        transitive = true
+        exclude module: 'libAvid-mopub' // To exclude AVID
+        exclude module: 'moat-mobile-app-kit' // To exclude Moat
+    }
+}
+```
+##### Strip out from GitHub integration
+Navigate to the `gradle.properties` file in your home directory (e.g. `~/.gradle/gradle.properties`) and include one or both of these lines to opt out of viewability measurement for AVID and/or Moat.  
+
+```
+mopub.avidEnabled=false
+mopub.moatEnabled=false
+```
+##### Disable via API
+If you would like to opt out of viewability measurement but do not want to modify the MoPub SDK, a function is provided for your convenience. At any point, call `MoPub.disableViewability(vendor);`. This method can can be called with any of the enum values available in `ExternalViewabilitySessionManager.ViewabilityVendor`: `AVID` will disable AVID but leave Moat enabled, `MOAT` will disable Moat but leave AVID enabled, and `ALL` will disable all viewability measurement.
 
 ## Working with Android 6.0 Runtime Permissions
 If your app's target SDK is 23 or higher _**and**_ the user's device is running Android 6.0 or higher, you are responsible for supporting [runtime permissions](http://developer.android.com/training/permissions/requesting.html), one of the [changes](http://developer.android.com/about/versions/marshmallow/android-6.0-changes.html) introduced in Android 6.0 (API level 23). In addition to listing any dangerous permissions your app needs in the manifest, your app also has to explicitly request the dangerous permission(s) during runtime by calling method `requestPermissions()` in the [`ActivityCompat`](http://developer.android.com/reference/android/support/v4/app/ActivityCompat.html) class.
@@ -131,7 +167,7 @@ If your app's target SDK is 23 or higher _**and**_ the user's device is running
 - Dangerous permission [`ACCESS_COARSE_LOCATION`](http://developer.android.com/reference/android/Manifest.permission.html#ACCESS_COARSE_LOCATION) is needed to pass network location data to MoPub.
 - Dangerous permission [`ACCESS_FINE_LOCATION`](http://developer.android.com/reference/android/Manifest.permission.html#ACCESS_FINE_LOCATION) is needed to pass GPS location data to MoPub.
     - Granting `ACCESS_FINE_LOCATION` also allows network location data to be passed to MoPub without the need to also grant `ACCESS_COARSE_LOCATION`.
-- Dangerous permission [`WRITE_EXTERNAL_STORAGE`](http://developer.android.com/reference/android/Manifest.permission.html#WRITE_EXTERNAL_STORAGE) is needed for MRAID 2.
+- Dangerous permission [`WRITE_EXTERNAL_STORAGE`](http://developer.android.com/reference/android/Manifest.permission.html#WRITE_EXTERNAL_STORAGE) is optional and only required for MRAID 2.0 storePicture ads.
 - _**Note:** The user can deny granting any dangerous permissions during runtime, so please make sure your app can handle this properly._
 - _**Note:** The user can revoke any permissions granted previously by going to your app's Settings screen, so please make sure your app can handle this properly._
 
diff --git a/build.gradle b/build.gradle
index c5a7da47..e7b8ca18 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,8 +5,8 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.1.2'
-        classpath 'com.novoda:bintray-release:0.3.4'
+        classpath 'com.android.tools.build:gradle:2.3.0'
+        classpath 'com.novoda:bintray-release:0.4.0'
     }
 }
 
diff --git a/extras/src/com/mopub/mobileads/AdColonyInterstitial.java b/extras/src/com/mopub/mobileads/AdColonyInterstitial.java
index 6e42be9c..f0b08021 100644
--- a/extras/src/com/mopub/mobileads/AdColonyInterstitial.java
+++ b/extras/src/com/mopub/mobileads/AdColonyInterstitial.java
@@ -3,28 +3,30 @@
 import android.app.Activity;
 import android.content.Context;
 import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.util.Log;
 
-import com.jirbo.adcolony.AdColony;
-import com.jirbo.adcolony.AdColonyAd;
-import com.jirbo.adcolony.AdColonyAdListener;
-import com.jirbo.adcolony.AdColonyVideoAd;
+import com.adcolony.sdk.AdColony;
+import com.adcolony.sdk.AdColonyAppOptions;
+import com.adcolony.sdk.AdColonyInterstitialListener;
+import com.adcolony.sdk.AdColonyZone;
 import com.mopub.common.util.Json;
 
+import java.util.Arrays;
 import java.util.Map;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
 
-/*
- * Tested with AdColony SDK 2.0.3.
+/**
+ * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the latest version and ad format certifications.
  */
-public class AdColonyInterstitial extends CustomEventInterstitial implements AdColonyAdListener {
+public class AdColonyInterstitial extends CustomEventInterstitial {
+    private static final String TAG = "AdColonyInterstitial";
     /*
      * We recommend passing the AdColony client options, app ID, all zone IDs, and current zone ID
      * in the serverExtras Map by specifying Custom Event Data in MoPub's web interface.
      *
      * Please see AdColony's documentation for more information:
-     * https://github.com/AdColony/AdColony-Android-SDK/wiki/API-Details#configure-activity-activity-string-client_options-string-app_id-string-zone_ids-
+     * https://github.com/AdColony/AdColony-Android-SDK-3
      */
     private static final String DEFAULT_CLIENT_OPTIONS = "version=YOUR_APP_VERSION_HERE,store:google";
     private static final String DEFAULT_APP_ID = "YOUR_AD_COLONY_APP_ID_HERE";
@@ -39,25 +41,25 @@
     public static final String ALL_ZONE_IDS_KEY = "allZoneIds";
     public static final String ZONE_ID_KEY = "zoneId";
 
-    private static boolean isAdColonyConfigured = false;
-
     private CustomEventInterstitialListener mCustomEventInterstitialListener;
+    private AdColonyInterstitialListener mAdColonyInterstitialListener;
     private final Handler mHandler;
-    private AdColonyVideoAd mAdColonyVideoAd;
-    private final ScheduledThreadPoolExecutor mScheduledThreadPoolExecutor;
-    private boolean mIsLoading;
+    private com.adcolony.sdk.AdColonyInterstitial mAdColonyInterstitial;
+    private static String[] previousAdColonyAllZoneIds;
 
     public AdColonyInterstitial() {
-        mScheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(1);
         mHandler = new Handler();
     }
 
     @Override
-    protected void loadInterstitial(Context context,
-                                    CustomEventInterstitialListener customEventInterstitialListener,
-                                    Map<String, Object> localExtras,
-                                    Map<String, String> serverExtras) {
-        if (!(context instanceof Activity)) {
+    protected void loadInterstitial(@NonNull Context context,
+            @NonNull CustomEventInterstitialListener customEventInterstitialListener,
+            @Nullable Map<String, Object> localExtras,
+            @NonNull Map<String, String> serverExtras) {
+        if (context == null
+                || !(context instanceof Activity)
+                || customEventInterstitialListener == null
+                || serverExtras == null) {
             customEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
             return;
         }
@@ -75,112 +77,146 @@ protected void loadInterstitial(Context context,
             allZoneIds = extractAllZoneIds(serverExtras);
             zoneId = serverExtras.get(ZONE_ID_KEY);
         }
-
-        if (!isAdColonyConfigured) {
-            AdColony.configure((Activity)context, clientOptions, appId, allZoneIds);
-            isAdColonyConfigured = true;
+        AdColonyAppOptions adColonyAppOptions = AdColonyAppOptions.getMoPubAppOptions(clientOptions);
+        mAdColonyInterstitialListener = getAdColonyInterstitialListener();
+        if (!isAdColonyConfigured()) {
+            AdColony.configure((Activity) context, adColonyAppOptions, appId, allZoneIds);
+        } else if ((shouldReconfigure(previousAdColonyAllZoneIds, allZoneIds))) {
+            // Need to check the zone IDs sent from the MoPub portal and reconfigure if they are
+            // different than the zones we initially called AdColony.configure() with
+            AdColony.configure((Activity) context, adColonyAppOptions, appId, allZoneIds);
+            previousAdColonyAllZoneIds = allZoneIds;
         }
 
-        mAdColonyVideoAd = new AdColonyVideoAd(zoneId);
-        mAdColonyVideoAd.withListener(this);
-
-        scheduleOnInterstitialLoaded();
+        AdColony.requestInterstitial(zoneId, mAdColonyInterstitialListener);
     }
 
     @Override
     protected void showInterstitial() {
-        if (mAdColonyVideoAd.isReady()) {
-            mAdColonyVideoAd.show();
+        if (mAdColonyInterstitial == null || mAdColonyInterstitial.isExpired()) {
+            Log.e(TAG, "AdColony interstitial ad is null or has expired");
+            mHandler.post(new Runnable() {
+                @Override
+                public void run() {
+                    mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.VIDEO_PLAYBACK_ERROR);
+                }
+            });
         } else {
-            Log.d("MoPub", "Tried to show a AdColony interstitial ad before it finished loading. Please try again.");
+            mAdColonyInterstitial.show();
         }
     }
 
     @Override
     protected void onInvalidate() {
-        if (mAdColonyVideoAd != null) {
-            mAdColonyVideoAd.withListener(null);
+        if (mAdColonyInterstitial != null) {
+            mAdColonyInterstitialListener = null;
+            mAdColonyInterstitial.setListener(null);
+            mAdColonyInterstitial.destroy();
+            mAdColonyInterstitial = null;
         }
-
-        mScheduledThreadPoolExecutor.shutdownNow();
-        mIsLoading = false;
     }
 
-    private boolean extrasAreValid(Map<String, String> extras) {
-        return extras.containsKey(CLIENT_OPTIONS_KEY)
-                && extras.containsKey(APP_ID_KEY)
-                && extras.containsKey(ALL_ZONE_IDS_KEY)
-                && extras.containsKey(ZONE_ID_KEY);
+    private boolean isAdColonyConfigured() {
+        return !AdColony.getSDKVersion().isEmpty();
     }
 
-    private String[] extractAllZoneIds(Map<String, String> serverExtras) {
-        String[] result = Json.jsonArrayToStringArray(serverExtras.get(ALL_ZONE_IDS_KEY));
+    private AdColonyInterstitialListener getAdColonyInterstitialListener() {
+        if (mAdColonyInterstitialListener != null) {
+            return mAdColonyInterstitialListener;
+        } else {
+            return new AdColonyInterstitialListener() {
+                @Override
+                public void onRequestFilled(@NonNull com.adcolony.sdk.AdColonyInterstitial adColonyInterstitial) {
+                    mAdColonyInterstitial = adColonyInterstitial;
+                    Log.d(TAG, "AdColony interstitial ad has been successfully loaded.");
+                    mHandler.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            mCustomEventInterstitialListener.onInterstitialLoaded();
+                        }
+                    });
+                }
 
-        // AdColony requires at least one valid String in the allZoneIds array.
-        if (result.length == 0) {
-            result = new String[]{""};
-        }
+                @Override
+                public void onRequestNotFilled(@NonNull AdColonyZone zone) {
+                    Log.d(TAG, "AdColony interstitial ad has no fill.");
+                    mHandler.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+                        }
+                    });
+                }
 
-        return result;
-    }
+                @Override
+                public void onClosed(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
+                    Log.d(TAG, "AdColony interstitial ad has been dismissed.");
+                    mHandler.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            mCustomEventInterstitialListener.onInterstitialDismissed();
+                        }
+                    });
+                }
 
-    private void scheduleOnInterstitialLoaded() {
-        Runnable runnable = new Runnable() {
-            @Override
-            public void run() {
-                if (mAdColonyVideoAd.isReady()) {
-                    Log.d("MoPub", "AdColony interstitial ad successfully loaded.");
-                    mIsLoading = false;
-                    mScheduledThreadPoolExecutor.shutdownNow();
+                @Override
+                public void onOpened(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
+                    Log.d(TAG, "AdColony interstitial ad shown: " + ad.getZoneID());
                     mHandler.post(new Runnable() {
                         @Override
                         public void run() {
-                            mCustomEventInterstitialListener.onInterstitialLoaded();
+                            mCustomEventInterstitialListener.onInterstitialShown();
                         }
                     });
                 }
-            }
-        };
 
-        if (!mIsLoading) {
-            mScheduledThreadPoolExecutor.scheduleAtFixedRate(runnable, 1, 1, TimeUnit.SECONDS);
-            mIsLoading = true;
+                @Override
+                public void onExpiring(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
+                    Log.d(TAG, "AdColony interstitial ad is expiring; requesting new ad");
+                    AdColony.requestInterstitial(ad.getZoneID(), mAdColonyInterstitialListener);
+                }
+
+                @Override
+                public void onClicked(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
+                    mCustomEventInterstitialListener.onInterstitialClicked();
+                }
+            };
         }
     }
 
-    /*
-     * AdColonyAdListener implementation
-     */
-
-    @Override
-    public void onAdColonyAdStarted(AdColonyAd adColonyAd) {
-        Log.d("MoPub", "AdColony interstitial ad shown.");
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                mCustomEventInterstitialListener.onInterstitialShown();
-            }
-        });
+    private boolean extrasAreValid(Map<String, String> extras) {
+        return extras != null
+                && extras.containsKey(CLIENT_OPTIONS_KEY)
+                && extras.containsKey(APP_ID_KEY)
+                && extras.containsKey(ALL_ZONE_IDS_KEY)
+                && extras.containsKey(ZONE_ID_KEY);
     }
 
-    @Override
-    public void onAdColonyAdAttemptFinished(AdColonyAd adColonyAd) {
-        Log.d("MoPub", "AdColony interstitial ad dismissed.");
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                mCustomEventInterstitialListener.onInterstitialDismissed();
-            }
-        });
+    private static boolean shouldReconfigure(String[] previousZones, String[] newZones) {
+        // If AdColony is configured already, but previousZones is null, then that means AdColony
+        // was configured with the AdColonyRewardedVideo adapter so attempt to configure with
+        // the ids in newZones. They will be ignored within the AdColony SDK if the zones are
+        // the same as the zones that the other adapter called AdColony.configure() with.
+        if (previousZones == null) {
+            return true;
+        } else if (newZones == null) {
+            return false;
+        } else if (previousZones.length != newZones.length) {
+            return true;
+        }
+        Arrays.sort(previousZones);
+        Arrays.sort(newZones);
+        return !Arrays.equals(previousZones, newZones);
     }
 
-    @Deprecated // for testing
-    ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() {
-        return mScheduledThreadPoolExecutor;
-    }
+    private String[] extractAllZoneIds(Map<String, String> serverExtras) {
+        String[] result = Json.jsonArrayToStringArray(serverExtras.get(ALL_ZONE_IDS_KEY));
 
-    @Deprecated // for testing
-    void resetAdColonyConfigured() {
-        isAdColonyConfigured = false;
+        // AdColony requires at least one valid String in the allZoneIds array.
+        if (result.length == 0) {
+            result = new String[]{""};
+        }
+
+        return result;
     }
 }
diff --git a/extras/src/com/mopub/mobileads/AdColonyRewardedVideo.java b/extras/src/com/mopub/mobileads/AdColonyRewardedVideo.java
index 4d9baac4..accb01f2 100644
--- a/extras/src/com/mopub/mobileads/AdColonyRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/AdColonyRewardedVideo.java
@@ -4,39 +4,41 @@
 import android.os.Handler;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.util.Log;
+
+import com.adcolony.sdk.AdColony;
+import com.adcolony.sdk.AdColonyAdOptions;
+import com.adcolony.sdk.AdColonyAppOptions;
+import com.adcolony.sdk.AdColonyInterstitial;
+import com.adcolony.sdk.AdColonyInterstitialListener;
+import com.adcolony.sdk.AdColonyReward;
+import com.adcolony.sdk.AdColonyRewardListener;
+import com.adcolony.sdk.AdColonyZone;
 
-import com.jirbo.adcolony.AdColony;
-import com.jirbo.adcolony.AdColonyAd;
-import com.jirbo.adcolony.AdColonyAdListener;
-import com.jirbo.adcolony.AdColonyV4VCAd;
-import com.jirbo.adcolony.AdColonyV4VCListener;
-import com.jirbo.adcolony.AdColonyV4VCReward;
 import com.mopub.common.BaseLifecycleListener;
 import com.mopub.common.DataKeys;
 import com.mopub.common.LifecycleListener;
 import com.mopub.common.MediationSettings;
 import com.mopub.common.MoPubReward;
-import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Json;
 
+import java.util.Arrays;
 import java.util.Map;
 import java.util.WeakHashMap;
-import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
 /**
- * A custom event for showing AdColony rewarded videos.
- *
- * Certified with AdColony 2.0.3
+ * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the latest version and ad format certifications.
  */
 public class AdColonyRewardedVideo extends CustomEventRewardedVideo {
+    private static final String TAG = "AdColonyRewardedVideo";
     /*
      * We recommend passing the AdColony client options, app ID, all zone IDs, and current zone ID
      * in the serverExtras Map by specifying Custom Event Data in MoPub's web interface.
      *
      * Please see AdColony's documentation for more information:
-     * https://github.com/AdColony/AdColony-Android-SDK/wiki/API-Details#configure-activity-activity-string-client_options-string-app_id-string-zone_ids-
+     * https://github.com/AdColony/AdColony-Android-SDK-3
      */
     private static final String DEFAULT_CLIENT_OPTIONS = "version=YOUR_APP_VERSION_HERE,store:google";
     private static final String DEFAULT_APP_ID = "YOUR_AD_COLONY_APP_ID_HERE";
@@ -52,31 +54,24 @@
     public static final String ZONE_ID_KEY = "zoneId";
 
     private static boolean sInitialized = false;
-    private static LifecycleListener sLifecycleListener = new BaseLifecycleListener() {
-        @Override
-        public void onPause(@NonNull final Activity activity) {
-            super.onPause(activity);
-            AdColony.pause();
-        }
-
-        @Override
-        public void onResume(@NonNull final Activity activity) {
-            super.onResume(activity);
-            AdColony.resume(activity);
-        }
-    };
-    private static AdColonyListener sAdColonyListener = new AdColonyListener();
-    private static WeakHashMap<AdColonyAd, String> sAdToZoneIdMap = new WeakHashMap<AdColonyAd, String>();
+    private static LifecycleListener sLifecycleListener = new BaseLifecycleListener();
+    private static String[] previousAdColonyAllZoneIds;
 
-    private AdColonyV4VCAd mAd;
+    AdColonyInterstitial mAd;
     private String mZoneId;
-    @Nullable private String mAdUnitId;
+    private AdColonyListener mAdColonyListener;
+    private AdColonyAdOptions mAdColonyAdOptions = new AdColonyAdOptions();
+    private AdColonyAppOptions mAdColonyAppOptions = new AdColonyAppOptions();
+    private static WeakHashMap<String, AdColonyInterstitial> sZoneIdToAdMap = new WeakHashMap<>();
+
+
+    @Nullable
+    private String mAdUnitId;
     private boolean mIsLoading = false;
 
     // For waiting and notifying the SDK:
     private final Handler mHandler;
     private final ScheduledThreadPoolExecutor mScheduledThreadPoolExecutor;
-    private ScheduledFuture<?> mFuture;
 
     public AdColonyRewardedVideo() {
         mScheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(1);
@@ -86,7 +81,7 @@ public AdColonyRewardedVideo() {
     @Nullable
     @Override
     public CustomEventRewardedVideoListener getVideoListenerForSdk() {
-        return sAdColonyListener;
+        return mAdColonyListener;
     }
 
     @Nullable
@@ -104,6 +99,13 @@ public String getAdNetworkId() {
     @Override
     protected void onInvalidate() {
         mScheduledThreadPoolExecutor.shutdownNow();
+        AdColonyInterstitial ad = sZoneIdToAdMap.get(mZoneId);
+        if (ad != null) {
+            ad.setListener(null);
+            ad.destroy();
+            sZoneIdToAdMap.remove(mZoneId);
+            Log.d(TAG, "AdColony rewarded video destroyed");
+        }
     }
 
     @Override
@@ -127,8 +129,12 @@ public boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
             }
 
             setUpGlobalSettings();
-            AdColony.configure(launcherActivity, adColonyClientOptions, adColonyAppId, adColonyAllZoneIds);
-            AdColony.addV4VCListener(sAdColonyListener);
+            mAdColonyAppOptions = AdColonyAppOptions.getMoPubAppOptions(adColonyClientOptions);
+            if (!isAdColonyConfigured()) {
+                previousAdColonyAllZoneIds = adColonyAllZoneIds;
+                AdColony.configure(launcherActivity, mAdColonyAppOptions, adColonyAppId, adColonyAllZoneIds);
+            }
+
             sInitialized = true;
             return true;
         }
@@ -138,39 +144,81 @@ public boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
     protected void loadWithSdkInitialized(@NonNull final Activity activity,
             @NonNull final Map<String, Object> localExtras,
             @NonNull final Map<String, String> serverExtras) throws Exception {
-
         mZoneId = DEFAULT_ZONE_ID;
         if (extrasAreValid(serverExtras)) {
             mZoneId = serverExtras.get(ZONE_ID_KEY);
+            String adColonyClientOptions = serverExtras.get(CLIENT_OPTIONS_KEY);
+            String adColonyAppId = serverExtras.get(APP_ID_KEY);
+            String[] adColonyAllZoneIds = extractAllZoneIds(serverExtras);
+
+            // Need to check the zone IDs sent from the MoPub portal and reconfigure if they are
+            // different than the zones we initially called AdColony.configure() with
+            if (shouldReconfigure(previousAdColonyAllZoneIds, adColonyAllZoneIds)) {
+                mAdColonyAppOptions = AdColonyAppOptions.getMoPubAppOptions(adColonyClientOptions);
+                AdColony.configure(activity, mAdColonyAppOptions, adColonyAppId, adColonyAllZoneIds);
+                previousAdColonyAllZoneIds = adColonyAllZoneIds;
+            }
         }
+
         Object adUnitObject = localExtras.get(DataKeys.AD_UNIT_ID_KEY);
         if (adUnitObject != null && adUnitObject instanceof String) {
             mAdUnitId = (String) adUnitObject;
         }
 
-        mAd = new AdColonyV4VCAd(mZoneId).withListener(sAdColonyListener);
-        sAdToZoneIdMap.put(mAd, mZoneId);
+        sZoneIdToAdMap.put(mZoneId, null);
+        setUpAdOptions();
+        mAdColonyListener = new AdColonyListener(mAdColonyAdOptions);
+        AdColony.setRewardListener(mAdColonyListener);
+        AdColony.requestInterstitial(mZoneId, mAdColonyListener, mAdColonyAdOptions);
         scheduleOnVideoReady();
     }
 
+    private static boolean shouldReconfigure(String[] previousZones, String[] newZones) {
+        // If AdColony is configured already, but previousZones is null, then that means AdColony
+        // was configured with the AdColonyInterstitial adapter so attempt to configure with
+        // the ids in newZones. They will be ignored within the AdColony SDK if the zones are
+        // the same as the zones that the other adapter called AdColony.configure() with.
+        if (previousZones == null) {
+            return true;
+        } else if (newZones == null) {
+            return false;
+        } else if (previousZones.length != newZones.length) {
+            return true;
+        }
+        Arrays.sort(previousZones);
+        Arrays.sort(newZones);
+        return !Arrays.equals(previousZones, newZones);
+    }
+
+    private void setUpAdOptions() {
+        mAdColonyAdOptions.enableConfirmationDialog(getConfirmationDialogFromSettings());
+        mAdColonyAdOptions.enableResultsDialog(getResultsDialogFromSettings());
+    }
+
+    private boolean isAdColonyConfigured() {
+        return !AdColony.getSDKVersion().isEmpty();
+    }
+
     @Override
     public boolean hasVideoAvailable() {
-        return mAd != null && mAd.isReady() && mAd.getAvailableViews() != 0;
+        return mAd != null && !mAd.isExpired();
     }
 
     @Override
     public void showVideo() {
         if (this.hasVideoAvailable()) {
-            boolean withConfirmationDialog = getConfirmationDialogFromSettings();
-            boolean withResultsDialog = getResultsDialogFromSettings();
-            mAd.withConfirmationDialog(withConfirmationDialog).withResultsDialog(withResultsDialog).show();
+            mAd.show();
         } else {
-            MoPubRewardedVideoManager.onRewardedVideoPlaybackError(AdColonyRewardedVideo.class, mZoneId, MoPubErrorCode.VIDEO_PLAYBACK_ERROR);
+            MoPubRewardedVideoManager.onRewardedVideoPlaybackError(
+                    AdColonyRewardedVideo.class,
+                    mZoneId,
+                    MoPubErrorCode.VIDEO_PLAYBACK_ERROR);
         }
     }
 
     private boolean extrasAreValid(Map<String, String> extras) {
-        return extras.containsKey(CLIENT_OPTIONS_KEY)
+        return extras != null
+                && extras.containsKey(CLIENT_OPTIONS_KEY)
                 && extras.containsKey(APP_ID_KEY)
                 && extras.containsKey(ALL_ZONE_IDS_KEY)
                 && extras.containsKey(ZONE_ID_KEY);
@@ -191,11 +239,8 @@ private void setUpGlobalSettings() {
         final AdColonyGlobalMediationSettings globalMediationSettings =
                 MoPubRewardedVideoManager.getGlobalMediationSettings(AdColonyGlobalMediationSettings.class);
         if (globalMediationSettings != null) {
-            if (globalMediationSettings.getCustomId() != null) {
-                AdColony.setCustomID(globalMediationSettings.getCustomId());
-            }
-            if (globalMediationSettings.getDeviceId() != null) {
-                AdColony.setDeviceID(globalMediationSettings.getDeviceId());
+            if (globalMediationSettings.getUserId() != null) {
+                mAdColonyAppOptions.setUserID(globalMediationSettings.getUserId());
             }
         }
     }
@@ -216,13 +261,15 @@ private void scheduleOnVideoReady() {
         Runnable runnable = new Runnable() {
             @Override
             public void run() {
-                if (mAd.isReady()) {
+                if (isAdAvailable(mZoneId)) {
+                    mAd = sZoneIdToAdMap.get(mZoneId);
                     mIsLoading = false;
                     mScheduledThreadPoolExecutor.shutdownNow();
                     mHandler.post(new Runnable() {
                         @Override
                         public void run() {
-                            if (mAd.getAvailableViews() > 0) {
+                            if (hasVideoAvailable()) {
+                                Log.d(TAG, "AdColony rewarded ad has been successfully loaded.");
                                 MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(
                                         AdColonyRewardedVideo.class,
                                         mZoneId);
@@ -244,71 +291,92 @@ public void run() {
         }
     }
 
-    private static class AdColonyListener implements AdColonyAdListener,
-            AdColonyV4VCListener, CustomEventRewardedVideoListener {
-
-        @Override
-        public void onAdColonyAdAttemptFinished(final AdColonyAd adColonyAd) {
-            String zoneId = sAdToZoneIdMap.get(adColonyAd);
-            MoPubRewardedVideoManager.onRewardedVideoClosed(AdColonyRewardedVideo.class, zoneId);
-            if (adColonyAd.notShown()) {
-                if (adColonyAd.canceled() || adColonyAd.skipped()) {
-                    MoPubLog.d("User canceled ad playback");
-                    return;
-                }
-
-                MoPubErrorCode reason = MoPubErrorCode.VIDEO_DOWNLOAD_ERROR;
-                if (adColonyAd.noFill()) {
-                    reason = MoPubErrorCode.NETWORK_NO_FILL;
-                }
+    private boolean isAdAvailable(String zoneId) {
+        return sZoneIdToAdMap.get(zoneId) != null;
+    }
 
-                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(
-                        AdColonyRewardedVideo.class,
-                        zoneId,
-                        reason);
-            }
-        }
+    private static class AdColonyListener extends AdColonyInterstitialListener
+            implements AdColonyRewardListener, CustomEventRewardedVideoListener {
+        private static final String TAG = "AdColonyListener";
+        private AdColonyAdOptions mAdOptions;
 
-        @Override
-        public void onAdColonyAdStarted(final com.jirbo.adcolony.AdColonyAd adColonyAd) {
-            MoPubRewardedVideoManager.onRewardedVideoStarted(
-                    AdColonyRewardedVideo.class,
-                    sAdToZoneIdMap.get(adColonyAd));
+        AdColonyListener(AdColonyAdOptions adOptions) {
+            mAdOptions = adOptions;
         }
 
         @Override
-        public void onAdColonyV4VCReward(final AdColonyV4VCReward adColonyV4VCReward) {
+        public void onReward(@NonNull AdColonyReward a) {
             MoPubReward reward;
-            if (adColonyV4VCReward.success()) {
-                reward = MoPubReward.success(adColonyV4VCReward.name(), adColonyV4VCReward.amount());
+            if (a.success()) {
+                Log.d(TAG, "AdColonyReward name: " + a.getRewardName());
+                Log.d(TAG, "AdColonyReward amount: " + a.getRewardAmount());
+                reward = MoPubReward.success(a.getRewardName(), a.getRewardAmount());
             } else {
+                Log.d(TAG, "AdColonyReward failed");
                 reward = MoPubReward.failure();
             }
+
             MoPubRewardedVideoManager.onRewardedVideoCompleted(
                     AdColonyRewardedVideo.class,
-                    null, // Can't deduce the zoneId from this object.
+                    a.getZoneID(),
                     reward);
         }
-    }
 
-    public static final class AdColonyGlobalMediationSettings implements MediationSettings {
+        @Override
+        public void onRequestFilled(@NonNull com.adcolony.sdk.AdColonyInterstitial adColonyInterstitial) {
+            sZoneIdToAdMap.put(adColonyInterstitial.getZoneID(), adColonyInterstitial);
+        }
 
-        @Nullable private final String mCustomId;
-        @Nullable private final String mDeviceId;
+        @Override
+        public void onRequestNotFilled(@NonNull AdColonyZone zone) {
+            Log.d(TAG, "AdColony rewarded ad has no fill.");
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(
+                    AdColonyRewardedVideo.class,
+                    zone.getZoneID(),
+                    MoPubErrorCode.NETWORK_NO_FILL);
+        }
 
-        public AdColonyGlobalMediationSettings(@Nullable String customId, @Nullable String deviceId) {
-            mCustomId = customId;
-            mDeviceId = deviceId;
+        @Override
+        public void onClosed(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
+            Log.d(TAG, "AdColony rewarded ad has been dismissed.");
+            MoPubRewardedVideoManager.onRewardedVideoClosed(
+                    AdColonyRewardedVideo.class,
+                    ad.getZoneID());
         }
 
+        @Override
+        public void onOpened(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
+            Log.d(TAG, "AdColony rewarded ad shown: " + ad.getZoneID());
+            MoPubRewardedVideoManager.onRewardedVideoStarted(
+                    AdColonyRewardedVideo.class,
+                    ad.getZoneID());
+        }
+
+        @Override
+        public void onExpiring(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
+            Log.d(TAG, "AdColony rewarded ad is expiring; requesting new ad");
+            AdColony.requestInterstitial(ad.getZoneID(), ad.getListener(), mAdOptions);
+        }
+
+        @Override
+        public void onClicked(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
+            MoPubRewardedVideoManager.onRewardedVideoClicked(
+                    AdColonyRewardedVideo.class,
+                    ad.getZoneID());
+        }
+    }
+
+    public static final class AdColonyGlobalMediationSettings implements MediationSettings {
         @Nullable
-        public String getCustomId() {
-            return mCustomId;
+        private final String mUserId;
+
+        public AdColonyGlobalMediationSettings(@Nullable String userId) {
+            mUserId = userId;
         }
 
         @Nullable
-        public String getDeviceId() {
-            return mDeviceId;
+        public String getUserId() {
+            return mUserId;
         }
     }
 
diff --git a/extras/src/com/mopub/mobileads/ChartboostInterstitial.java b/extras/src/com/mopub/mobileads/ChartboostInterstitial.java
index ace44241..0201a1aa 100644
--- a/extras/src/com/mopub/mobileads/ChartboostInterstitial.java
+++ b/extras/src/com/mopub/mobileads/ChartboostInterstitial.java
@@ -14,7 +14,7 @@
 /**
  * A custom event for showing Chartboost interstitial ads.
  *
- * Certified with Chartboost 6.4.1
+ * Certified with Chartboost 7.0.1
  */
 class ChartboostInterstitial extends CustomEventInterstitial {
 
diff --git a/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java b/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java
index 08f90ca8..bc994411 100644
--- a/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java
@@ -16,7 +16,7 @@
 /**
  * A custom event for showing Chartboost rewarded videos.
  *
- * Certified with Chartboost 6.4.1
+ * Certified with Chartboost 7.0.1
  */
 public class ChartboostRewardedVideo extends CustomEventRewardedVideo {
     @NonNull private static final LifecycleListener sLifecycleListener =
diff --git a/extras/src/com/mopub/mobileads/ChartboostShared.java b/extras/src/com/mopub/mobileads/ChartboostShared.java
index a3bb1780..d70fb7ed 100644
--- a/extras/src/com/mopub/mobileads/ChartboostShared.java
+++ b/extras/src/com/mopub/mobileads/ChartboostShared.java
@@ -27,7 +27,7 @@
 /**
  * Shared infrastructure for initializing the Chartboost SDK when mediated by MoPub
  *
- * Certified with Chartboost 6.4.1
+ * Certified with Chartboost 7.0.1
  */
 public class ChartboostShared {
     private static volatile ChartboostSingletonDelegate sDelegate = new ChartboostSingletonDelegate();
@@ -75,7 +75,6 @@ public static synchronized boolean initializeSdk(@NonNull Activity launcherActiv
 
         // Perform all the common SDK initialization steps including startAppWithId
         Chartboost.startWithAppId(launcherActivity, mAppId, mAppSignature);
-        Chartboost.setImpressionsUseActivities(false);
         Chartboost.setMediation(Chartboost.CBMediation.CBMediationMoPub, MoPub.SDK_VERSION);
         Chartboost.setDelegate(sDelegate);
         Chartboost.setShouldRequestInterstitialsInFirstSession(true);
diff --git a/extras/src/com/mopub/mobileads/FacebookBanner.java b/extras/src/com/mopub/mobileads/FacebookBanner.java
index c8a0b879..4eccbad5 100644
--- a/extras/src/com/mopub/mobileads/FacebookBanner.java
+++ b/extras/src/com/mopub/mobileads/FacebookBanner.java
@@ -16,7 +16,7 @@
 import java.util.Map;
 
 /**
- * Tested with Facebook SDK 4.8.1.
+ * Certified with Facebook Audience Network 4.26.1
  */
 public class FacebookBanner extends CustomEventBanner implements AdListener {
     public static final String PLACEMENT_ID_KEY = "placement_id";
@@ -102,6 +102,11 @@ public void onAdClicked(Ad ad) {
         mBannerListener.onBannerClicked();
     }
 
+    @Override
+    public void onLoggingImpression(Ad ad) {
+        Log.d("MoPub", "Facebook banner ad logged impression.");
+    }
+
     private boolean serverExtrasAreValid(final Map<String, String> serverExtras) {
         final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
         return (placementId != null && placementId.length() > 0);
diff --git a/extras/src/com/mopub/mobileads/FacebookInterstitial.java b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
index 24d19317..1b24c584 100644
--- a/extras/src/com/mopub/mobileads/FacebookInterstitial.java
+++ b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
@@ -11,7 +11,7 @@
 import java.util.Map;
 
 /**
- * Tested with Facebook SDK 4.8.1.
+ * Certified with Facebook Audience Network 4.26.1
  */
 public class FacebookInterstitial extends CustomEventInterstitial implements InterstitialAdListener {
     public static final String PLACEMENT_ID_KEY = "placement_id";
@@ -99,6 +99,11 @@ public void onAdClicked(final Ad ad) {
         mInterstitialListener.onInterstitialClicked();
     }
 
+    @Override
+    public void onLoggingImpression(Ad ad) {
+        Log.d("MoPub", "Facebook interstitial ad logged impression.");
+    }
+
     @Override
     public void onInterstitialDismissed(final Ad ad) {
         Log.d("MoPub", "Facebook interstitial ad dismissed.");
diff --git a/extras/src/com/mopub/mobileads/FacebookRewardedVideo.java b/extras/src/com/mopub/mobileads/FacebookRewardedVideo.java
new file mode 100644
index 00000000..c3c4a318
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/FacebookRewardedVideo.java
@@ -0,0 +1,158 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.facebook.ads.AdError;
+import com.facebook.ads.RewardedVideoAd;
+import com.facebook.ads.RewardedVideoAdListener;
+import com.mopub.common.LifecycleListener;
+import com.facebook.ads.Ad;
+import com.mopub.common.MoPubReward;
+
+import java.util.Map;
+
+/**
+ * Certified with Facebook Audience Network 4.26.1
+ */
+public class FacebookRewardedVideo extends CustomEventRewardedVideo implements RewardedVideoAdListener {
+
+    @Nullable
+    private RewardedVideoAd mRewardedVideoAd;
+    @Nullable
+    private String mPlacementId;
+    private String TAG = "mopub";
+
+    /**
+     * CustomEventRewardedVideo implementation
+     */
+
+    @Nullable
+    @Override
+    protected LifecycleListener getLifecycleListener() {
+        return null;
+    }
+
+    @Override
+    protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity, @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) throws Exception {
+        // Facebook doesn't have a dedicated initialization call, so we return false and do nothing.
+        return false;
+    }
+
+    @Override
+    protected void loadWithSdkInitialized(@NonNull Activity activity, @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) throws Exception {
+        if (!serverExtras.isEmpty()) {
+            mPlacementId = serverExtras.get("placement_id");
+
+            if (!TextUtils.isEmpty(mPlacementId)) {
+                if (mRewardedVideoAd != null) {
+                    mRewardedVideoAd.destroy();
+                    mRewardedVideoAd = null;
+                }
+                Log.d(TAG, "Creating a Facebook Rewarded Video instance, and registering callbacks.");
+                mRewardedVideoAd = new RewardedVideoAd(activity, mPlacementId);
+                mRewardedVideoAd.setAdListener(this);
+            } else {
+                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(FacebookRewardedVideo.class, getAdNetworkId(), MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+                Log.d(TAG, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR.toString());
+                Log.d(TAG, "Placement ID is null or empty.");
+                return;
+            }
+        }
+
+        if (mRewardedVideoAd.isAdLoaded()) {
+            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(FacebookRewardedVideo.class, mPlacementId);
+            return;
+        }
+
+        if (mRewardedVideoAd != null) {
+            Log.d(TAG, "Sending Facebook an ad request.");
+            mRewardedVideoAd.loadAd();
+        }
+    }
+
+    @NonNull
+    @Override
+    protected String getAdNetworkId() {
+        return (mRewardedVideoAd != null) ? (mRewardedVideoAd.getPlacementId()) : ("");
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mRewardedVideoAd != null) {
+            Log.d(TAG, "Performing cleanup tasks...");
+            mRewardedVideoAd.setAdListener(null);
+            mRewardedVideoAd.destroy();
+            mRewardedVideoAd = null;
+        }
+    }
+
+    @Override
+    protected boolean hasVideoAvailable() {
+        return mRewardedVideoAd != null && mRewardedVideoAd.isAdLoaded();
+    }
+
+    @Override
+    protected void showVideo() {
+        if (hasVideoAvailable()) {
+            Log.d(TAG, "Facebook Rewarded Video creative is available. Showing...");
+            mRewardedVideoAd.show();
+        } else {
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(FacebookRewardedVideo.class, mPlacementId, MoPubErrorCode.VIDEO_NOT_AVAILABLE);
+            Log.d(TAG, "Facebook Rewarded Video creative is not available. Try re-requesting.");
+        }
+    }
+
+    @Override
+    public void onRewardedVideoCompleted() {
+        Log.d(TAG, "Facebook Rewarded Video creative is completed. Awarding the user.");
+        MoPubRewardedVideoManager.onRewardedVideoCompleted(FacebookRewardedVideo.class, mPlacementId, MoPubReward.success(MoPubReward.NO_REWARD_LABEL, MoPubReward.DEFAULT_REWARD_AMOUNT));
+    }
+
+    @Override
+    public void onLoggingImpression(Ad ad) {
+        MoPubRewardedVideoManager.onRewardedVideoStarted(FacebookRewardedVideo.class, mPlacementId);
+        Log.d(TAG, "Facebook Rewarded Video creative started playing.");
+    }
+
+    @Override
+    public void onRewardedVideoClosed() {
+        MoPubRewardedVideoManager.onRewardedVideoClosed(FacebookRewardedVideo.class, mPlacementId);
+        Log.d(TAG, "Facebook Rewarded Video creative closed.");
+    }
+
+    @Override
+    public void onAdLoaded(Ad ad) {
+        MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(FacebookRewardedVideo.class, mPlacementId);
+        Log.d(TAG, "Facebook Rewarded Video creative cached.");
+    }
+
+    @Override
+    public void onAdClicked(Ad ad) {
+        MoPubRewardedVideoManager.onRewardedVideoClicked(FacebookRewardedVideo.class, mPlacementId);
+        Log.d(TAG, "Facebook Rewarded Video creative clicked.");
+    }
+
+    @Override
+    public void onError(Ad ad, AdError adError) {
+        MoPubRewardedVideoManager.onRewardedVideoLoadFailure(FacebookRewardedVideo.class, mPlacementId, mapErrorCode(adError.getErrorCode()));
+        Log.d(TAG, "Loading/Playing Facebook Rewarded Video creative encountered an error: " + mapErrorCode(adError.getErrorCode()).toString());
+    }
+
+    @NonNull
+    private static MoPubErrorCode mapErrorCode(int error) {
+        switch (error) {
+            case AdError.NO_FILL_ERROR_CODE:
+                return MoPubErrorCode.NETWORK_NO_FILL;
+            case AdError.INTERNAL_ERROR_CODE:
+                return MoPubErrorCode.INTERNAL_ERROR;
+            case AdError.NETWORK_ERROR_CODE:
+                return MoPubErrorCode.NO_CONNECTION;
+            default:
+                return MoPubErrorCode.UNSPECIFIED;
+        }
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java b/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
new file mode 100644
index 00000000..38ebcd8d
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
@@ -0,0 +1,82 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.flurry.android.FlurryAgent;
+import com.flurry.android.FlurryAgentListener;
+
+/**
+ * Certified with Flurry 8.1.0
+ */
+public final class FlurryAgentWrapper {
+    public static final String PARAM_API_KEY = "apiKey";
+    public static final String PARAM_AD_SPACE_NAME = "adSpaceName";
+
+    private static final String ORIGIN_IDENTIFIER = "Flurry_Mopub_Android";
+    private static final String ORIGIN_VERSION = "6.5.0";
+
+    private FlurryAgent.Builder mAgentBuilder;
+
+    public static FlurryAgentWrapper getInstance() {
+        return FlurryAgentLoader.INSTANCE;
+    }
+
+    private FlurryAgentWrapper() {
+        mAgentBuilder = new FlurryAgent.Builder()
+                .withLogEnabled(false)
+                .withLogLevel(Log.INFO);
+
+        FlurryAgent.addOrigin(ORIGIN_IDENTIFIER, ORIGIN_VERSION);
+    }
+
+    public synchronized void startSession(@NonNull final Context context,
+            final String apiKey,
+            @Nullable FlurryAgentListener flurryAgentListener) {
+        // validate parameters
+        if (TextUtils.isEmpty(apiKey)) {
+            return;
+        }
+
+        // init
+        if (!FlurryAgent.isSessionActive()) {
+            mAgentBuilder.withListener(flurryAgentListener) // withListener allows nulls
+                    .build(context, apiKey);
+
+            // sessions are automatic on ICS+
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
+                return;
+            }
+
+            FlurryAgent.onStartSession(context);
+        }
+    }
+
+    public synchronized void endSession(final Context context) {
+        // validate parameters
+        if (context == null) {
+            return;
+        }
+
+        if (FlurryAgent.isSessionActive()) {
+            // sessions are automatic on ICS+
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
+                return;
+            }
+
+            FlurryAgent.onEndSession(context);
+        }
+    }
+
+    public synchronized boolean isSessionActive() {
+        return FlurryAgent.isSessionActive();
+    }
+
+    private static class FlurryAgentLoader {
+        private static final FlurryAgentWrapper INSTANCE = new FlurryAgentWrapper();
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java b/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
new file mode 100644
index 00000000..8a31a9d7
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
@@ -0,0 +1,196 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.text.TextUtils;
+import android.util.Log;
+import android.widget.FrameLayout;
+
+import com.flurry.android.ads.FlurryAdBanner;
+import com.flurry.android.ads.FlurryAdBannerListener;
+import com.flurry.android.ads.FlurryAdErrorType;
+
+import java.util.Map;
+
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
+
+/**
+ * Certified with Flurry 8.1.0
+ */
+class FlurryCustomEventBanner extends com.mopub.mobileads.CustomEventBanner {
+    private static final String LOG_TAG = FlurryCustomEventBanner.class.getSimpleName();
+
+    private Context mContext;
+    private CustomEventBannerListener mListener;
+    private FrameLayout mLayout;
+
+    private String mAdSpaceName;
+
+    private FlurryAdBanner mBanner;
+
+    // CustomEventBanner
+    @Override
+    protected void loadBanner(Context context,
+            CustomEventBannerListener listener,
+            Map<String, Object> localExtras, Map<String, String> serverExtras) {
+        if (context == null) {
+            Log.e(LOG_TAG, "Context cannot be null.");
+            listener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        if (listener == null) {
+            Log.e(LOG_TAG, "CustomEventBannerListener cannot be null.");
+            return;
+        }
+
+        if (!(context instanceof Activity)) {
+            Log.e(LOG_TAG, "Ad can be rendered only in Activity context.");
+            listener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        if (!validateExtras(serverExtras)) {
+            Log.e(LOG_TAG, "Failed banner ad fetch: Missing required server extras" +
+                    " [FLURRY_APIKEY and/or FLURRY_ADSPACE].");
+            listener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mContext = context;
+        mListener = listener;
+        mLayout = new FrameLayout(context);
+
+        String apiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+        mAdSpaceName = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+
+        FlurryAgentWrapper.getInstance().startSession(context, apiKey, null);
+
+        Log.d(LOG_TAG, "Fetching Flurry ad, ad unit name:" + mAdSpaceName);
+        mBanner = new FlurryAdBanner(mContext, mLayout, mAdSpaceName);
+        mBanner.setListener(new FlurryMopubBannerListener());
+        mBanner.fetchAd();
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mContext == null) {
+            return;
+        }
+
+        Log.d(LOG_TAG, "MoPub issued onInvalidate. Flurry ad unit: " + mAdSpaceName);
+
+        if (mBanner != null) {
+            mBanner.destroy();
+            mBanner = null;
+        }
+
+        FlurryAgentWrapper.getInstance().endSession(mContext);
+
+        mContext = null;
+        mListener = null;
+        mLayout = null;
+    }
+
+    private boolean validateExtras(final Map<String, String> serverExtras) {
+        if (serverExtras == null) {
+            return false;
+        }
+
+        final String flurryApiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+        final String flurryAdSpace = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+        Log.i(LOG_TAG, "ServerInfo fetched from Mopub " + FlurryAgentWrapper.PARAM_API_KEY + " : "
+                + flurryApiKey + " and " + FlurryAgentWrapper.PARAM_AD_SPACE_NAME + " :" +
+                flurryAdSpace);
+
+        return (!TextUtils.isEmpty(flurryApiKey) && !TextUtils.isEmpty(flurryAdSpace));
+    }
+
+    // FlurryAdListener
+    private class FlurryMopubBannerListener implements FlurryAdBannerListener {
+        private final String LOG_TAG = getClass().getSimpleName();
+
+        @Override
+        public void onFetched(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onFetched: Flurry banner ad fetched successfully!");
+
+            if (mBanner != null) {
+                mBanner.displayAd();
+            }
+        }
+
+        @Override
+        public void onRendered(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onRendered: Flurry banner ad rendered");
+
+            if (mListener != null) {
+                mListener.onBannerLoaded(mLayout);
+            }
+        }
+
+        @Override
+        public void onShowFullscreen(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onFetched: Flurry banner ad in full-screen");
+
+            if (mListener != null) {
+                mListener.onBannerExpanded();
+            }
+        }
+
+        @Override
+        public void onCloseFullscreen(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onCloseFullscreen: Flurry banner ad full-screen closed");
+
+            if (mListener != null) {
+                mListener.onBannerCollapsed();
+            }
+        }
+
+        @Override
+        public void onAppExit(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onAppExit: Flurry banner ad exited app");
+        }
+
+        @Override
+        public void onClicked(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onClicked: Flurry banner ad clicked");
+
+            if (mListener != null) {
+                mListener.onBannerClicked();
+            }
+        }
+
+        @Override
+        public void onVideoCompleted(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onVideoCompleted: Flurry banner ad video completed");
+
+            // no-op
+        }
+
+        @Override
+        public void onError(FlurryAdBanner adBanner, FlurryAdErrorType adErrorType,
+                int errorCode) {
+            Log.d(LOG_TAG, String.format("onError: Flurry banner ad not available. " +
+                    "Error type: %s. Error code: %s", adErrorType.toString(), errorCode));
+
+            if (mListener != null) {
+                switch (adErrorType) {
+                    case FETCH:
+                        mListener.onBannerFailed(NETWORK_NO_FILL);
+                        return;
+                    case RENDER:
+                        mListener.onBannerFailed(NETWORK_INVALID_STATE);
+                        return;
+                    case CLICK:
+                        // Don't call onBannerFailed in this case.
+                        return;
+                    default:
+                        mListener.onBannerFailed(UNSPECIFIED);
+                }
+            }
+        }
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java b/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
new file mode 100644
index 00000000..c912b75a
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
@@ -0,0 +1,200 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.flurry.android.ads.FlurryAdErrorType;
+import com.flurry.android.ads.FlurryAdInterstitial;
+import com.flurry.android.ads.FlurryAdInterstitialListener;
+
+import java.util.Map;
+
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
+
+/**
+ * Certified with Flurry 8.1.0
+ */
+class FlurryCustomEventInterstitial extends com.mopub.mobileads.CustomEventInterstitial {
+    private static final String LOG_TAG = FlurryCustomEventInterstitial.class.getSimpleName();
+
+    private Context mContext;
+    private CustomEventInterstitialListener mListener;
+
+    private String mAdSpaceName;
+
+    private FlurryAdInterstitial mInterstitial;
+
+    // CustomEventInterstitial
+    @Override
+    protected void loadInterstitial(Context context,
+            CustomEventInterstitialListener listener,
+            Map<String, Object> localExtras,
+            Map<String, String> serverExtras) {
+        if (context == null) {
+            Log.e(LOG_TAG, "Context cannot be null.");
+            listener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        if (listener == null) {
+            Log.e(LOG_TAG, "CustomEventInterstitialListener cannot be null.");
+            return;
+        }
+
+        if (!(context instanceof Activity)) {
+            Log.e(LOG_TAG, "Ad can be rendered only in Activity context.");
+            listener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        if (!validateExtras(serverExtras)) {
+            Log.e(LOG_TAG, "Failed interstitial ad fetch: Missing required server extras" +
+                    " [FLURRY_APIKEY and/or FLURRY_ADSPACE].");
+            listener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mContext = context;
+        mListener = listener;
+
+        String apiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+        mAdSpaceName = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+
+        FlurryAgentWrapper.getInstance().startSession(context, apiKey, null);
+
+        Log.d(LOG_TAG, "Fetching Flurry ad, ad unit name:" + mAdSpaceName);
+        mInterstitial = new FlurryAdInterstitial(mContext, mAdSpaceName);
+        mInterstitial.setListener(new FlurryMopubInterstitialListener());
+        mInterstitial.fetchAd();
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mContext == null) {
+            return;
+        }
+
+        Log.d(LOG_TAG, "MoPub issued onInvalidate (" + mAdSpaceName + ")");
+
+        if (mInterstitial != null) {
+            mInterstitial.destroy();
+            mInterstitial = null;
+        }
+
+        FlurryAgentWrapper.getInstance().endSession(mContext);
+
+        mContext = null;
+        mListener = null;
+    }
+
+    @Override
+    protected void showInterstitial() {
+        Log.d(LOG_TAG, "MoPub issued showInterstitial (" + mAdSpaceName + ")");
+
+        if (mInterstitial != null) {
+            mInterstitial.displayAd();
+        }
+    }
+
+    private boolean validateExtras(final Map<String, String> serverExtras) {
+        if (serverExtras == null) {
+            return false;
+        }
+
+        final String flurryApiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+        final String flurryAdSpace = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+        Log.i(LOG_TAG, "ServerInfo fetched from Mopub " + FlurryAgentWrapper.PARAM_API_KEY + " : "
+                + flurryApiKey + " and " + FlurryAgentWrapper.PARAM_AD_SPACE_NAME + " :" +
+                flurryAdSpace);
+
+        return (!TextUtils.isEmpty(flurryApiKey) && !TextUtils.isEmpty(flurryAdSpace));
+    }
+
+    // FlurryAdListener
+    private class FlurryMopubInterstitialListener implements FlurryAdInterstitialListener {
+        private final String LOG_TAG = getClass().getSimpleName();
+
+        @Override
+        public void onFetched(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onFetched: Flurry interstitial ad fetched successfully!");
+
+            if (mListener != null) {
+                mListener.onInterstitialLoaded();
+            }
+        }
+
+        @Override
+        public void onRendered(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onRendered: Flurry interstitial ad rendered");
+
+            if (mListener != null) {
+                mListener.onInterstitialShown();
+            }
+        }
+
+        @Override
+        public void onDisplay(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onDisplay: Flurry interstitial ad displayed");
+
+            // no-op
+        }
+
+        @Override
+        public void onClose(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onClose: Flurry interstitial ad closed");
+
+            if (mListener != null) {
+                mListener.onInterstitialDismissed();
+            }
+        }
+
+        @Override
+        public void onAppExit(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onAppExit: Flurry interstitial ad exited app");
+        }
+
+        @Override
+        public void onClicked(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onClicked: Flurry interstitial ad clicked");
+
+            if (mListener != null) {
+                mListener.onInterstitialClicked();
+            }
+        }
+
+        @Override
+        public void onVideoCompleted(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onVideoCompleted: Flurry interstitial ad video completed");
+
+            // no-op
+        }
+
+        @Override
+        public void onError(FlurryAdInterstitial adInterstitial, FlurryAdErrorType adErrorType,
+                int errorCode) {
+            Log.d(LOG_TAG, String.format("onError: Flurry interstitial ad not available. " +
+                    "Error type: %s. Error code: %s", adErrorType.toString(), errorCode));
+
+            if (mListener != null) {
+                switch (adErrorType) {
+                    case FETCH:
+                        mListener.onInterstitialFailed(NETWORK_NO_FILL);
+                        return;
+                    case RENDER:
+                        mListener.onInterstitialFailed(NETWORK_INVALID_STATE);
+                        return;
+                    case CLICK:
+                        // Don't call onInterstitialFailed in this case.
+                        return;
+                    default:
+                        mListener.onInterstitialFailed(UNSPECIFIED);
+                }
+            }
+        }
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
index d1268306..46d18c56 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
@@ -17,7 +17,7 @@
 import static com.google.android.gms.ads.AdSize.MEDIUM_RECTANGLE;
 
 /*
- * Compatible with version 7.8.0 of the Google Play Services SDK.
+ * Compatible with version 11.4.0 of the Google Play Services SDK.
  */
 
 // Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
@@ -126,7 +126,7 @@ public void onAdClosed() {
         public void onAdFailedToLoad(int errorCode) {
             Log.d("MoPub", "Google Play Services banner ad failed to load.");
             if (mBannerListener != null) {
-                mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
+                mBannerListener.onBannerFailed(getMoPubErrorCode(errorCode));
             }
         }
 
@@ -150,6 +150,34 @@ public void onAdOpened() {
                 mBannerListener.onBannerClicked();
             }
         }
+
+        /**
+         * Converts a given Google Mobile Ads SDK error code into {@link MoPubErrorCode}.
+         *
+         * @param error Google Mobile Ads SDK error code.
+         * @return an equivalent MoPub SDK error code for the given Google Mobile Ads SDK error
+         * code.
+         */
+        private MoPubErrorCode getMoPubErrorCode(int error) {
+            MoPubErrorCode errorCode;
+            switch (error) {
+                case AdRequest.ERROR_CODE_INTERNAL_ERROR:
+                    errorCode = MoPubErrorCode.INTERNAL_ERROR;
+                    break;
+                case AdRequest.ERROR_CODE_INVALID_REQUEST:
+                    errorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+                    break;
+                case AdRequest.ERROR_CODE_NETWORK_ERROR:
+                    errorCode = MoPubErrorCode.NO_CONNECTION;
+                    break;
+                case AdRequest.ERROR_CODE_NO_FILL:
+                    errorCode = MoPubErrorCode.NO_FILL;
+                    break;
+                default:
+                    errorCode = MoPubErrorCode.UNSPECIFIED;
+            }
+            return errorCode;
+        }
     }
 
     @Deprecated // for testing
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
index 7417ac76..a91ab2fc 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
@@ -10,7 +10,7 @@
 import java.util.Map;
 
 /*
- * Compatible with version 7.8.0 of the Google Play Services SDK.
+ * Compatible with version 11.4.0 of the Google Play Services SDK.
  */
 
 // Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
@@ -93,7 +93,7 @@ public void onAdClosed() {
         public void onAdFailedToLoad(int errorCode) {
             Log.d("MoPub", "Google Play Services interstitial ad failed to load.");
             if (mInterstitialListener != null) {
-                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+                mInterstitialListener.onInterstitialFailed(getMoPubErrorCode(errorCode));
             }
         }
 
@@ -120,6 +120,34 @@ public void onAdOpened() {
                 mInterstitialListener.onInterstitialShown();
             }
         }
+
+        /**
+         * Converts a given Google Mobile Ads SDK error code into {@link MoPubErrorCode}.
+         *
+         * @param error Google Mobile Ads SDK error code.
+         * @return an equivalent MoPub SDK error code for the given Google Mobile Ads SDK error
+         * code.
+         */
+        private MoPubErrorCode getMoPubErrorCode(int error) {
+            MoPubErrorCode errorCode;
+            switch (error) {
+                case AdRequest.ERROR_CODE_INTERNAL_ERROR:
+                    errorCode = MoPubErrorCode.INTERNAL_ERROR;
+                    break;
+                case AdRequest.ERROR_CODE_INVALID_REQUEST:
+                    errorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+                    break;
+                case AdRequest.ERROR_CODE_NETWORK_ERROR:
+                    errorCode = MoPubErrorCode.NO_CONNECTION;
+                    break;
+                case AdRequest.ERROR_CODE_NO_FILL:
+                    errorCode = MoPubErrorCode.NO_FILL;
+                    break;
+                default:
+                    errorCode = MoPubErrorCode.UNSPECIFIED;
+            }
+            return errorCode;
+        }
     }
 
     @Deprecated // for testing
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java b/extras/src/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java
new file mode 100644
index 00000000..e5629cba
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java
@@ -0,0 +1,265 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.google.android.gms.ads.AdRequest;
+import com.google.android.gms.ads.MobileAds;
+import com.google.android.gms.ads.reward.RewardItem;
+import com.google.android.gms.ads.reward.RewardedVideoAd;
+import com.google.android.gms.ads.reward.RewardedVideoAdListener;
+import com.mopub.common.BaseLifecycleListener;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MoPubReward;
+
+import java.util.Map;
+import java.util.concurrent.atomic.AtomicBoolean;
+
+/**
+ * A {@link CustomEventRewardedVideo} used to load rewarded video Google rewarded video ads.
+ *
+ * Compatible with version 11.4.0 of the Google Play Services SDK.
+ */
+public class GooglePlayServicesRewardedVideo extends CustomEventRewardedVideo implements
+        RewardedVideoAdListener {
+    private static final String TAG = "MoPubToAdMobRewarded";
+
+    /**
+     * The current version of the adapter.
+     */
+    private static final String ADAPTER_VERSION = "0.1.0";
+
+    /**
+     * Key to obtain AdMob application ID from the server extras provided by MoPub.
+     */
+    private static final String KEY_EXTRA_APPLICATION_ID = "appid";
+
+    /**
+     * Key to obtain AdMob ad unit ID from the extras provided by MoPub.
+     */
+    private static final String KEY_EXTRA_AD_UNIT_ID = "adunit";
+
+    /**
+     * Flag to determine whether or not the adapter has been initialized.
+     */
+    private static AtomicBoolean sIsInitialized;
+
+    /**
+     * Google Mobile Ads rewarded video ad unit ID.
+     */
+    private String mAdUnitId;
+
+    /**
+     * The Google Rewarded Video Ad instance.
+     */
+    private RewardedVideoAd mRewardedVideoAd;
+
+    /**
+     * A {@link LifecycleListener} used to forward the activity lifecycle events from MoPub SDK to
+     * Google Mobile Ads SDK.
+     */
+    private LifecycleListener mLifecycleListener = new BaseLifecycleListener() {
+        @Override
+        public void onPause(@NonNull Activity activity) {
+            super.onPause(activity);
+            if (mRewardedVideoAd != null) {
+                mRewardedVideoAd.pause(activity);
+            }
+        }
+
+        @Override
+        public void onResume(@NonNull Activity activity) {
+            super.onResume(activity);
+            if (mRewardedVideoAd != null) {
+                mRewardedVideoAd.resume(activity);
+            }
+        }
+    };
+
+    public GooglePlayServicesRewardedVideo() {
+        sIsInitialized = new AtomicBoolean(false);
+    }
+
+    @Nullable
+    @Override
+    protected LifecycleListener getLifecycleListener() {
+        return mLifecycleListener;
+    }
+
+    @NonNull
+    @Override
+    protected String getAdNetworkId() {
+        // Google rewarded videos do not have a unique identifier for each ad; using ad unit ID as
+        // an identifier for all ads.
+        return mAdUnitId;
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mRewardedVideoAd != null) {
+            mRewardedVideoAd.setRewardedVideoAdListener(null);
+            mRewardedVideoAd = null;
+        }
+    }
+
+    @Override
+    protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
+            @NonNull Map<String, Object> localExtras,
+            @NonNull Map<String, String> serverExtras)
+            throws Exception {
+        if (!sIsInitialized.getAndSet(true)) {
+            Log.i(TAG, "Adapter version - " + ADAPTER_VERSION);
+
+            if (TextUtils.isEmpty(serverExtras.get(KEY_EXTRA_APPLICATION_ID))) {
+                MobileAds.initialize(launcherActivity);
+            } else {
+                MobileAds.initialize(launcherActivity, serverExtras.get(KEY_EXTRA_APPLICATION_ID));
+            }
+
+            if (TextUtils.isEmpty(serverExtras.get(KEY_EXTRA_AD_UNIT_ID))) {
+                // Using class name as the network ID for this callback since the ad unit ID is
+                // invalid.
+                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(
+                        GooglePlayServicesRewardedVideo.class,
+                        GooglePlayServicesRewardedVideo.class.getSimpleName(),
+                        MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+                return false;
+            }
+
+            mAdUnitId = serverExtras.get(KEY_EXTRA_AD_UNIT_ID);
+
+            mRewardedVideoAd = MobileAds.getRewardedVideoAdInstance(launcherActivity);
+            mRewardedVideoAd.setRewardedVideoAdListener(GooglePlayServicesRewardedVideo.this);
+            return true;
+        }
+
+        return false;
+    }
+
+    @Override
+    protected void loadWithSdkInitialized(@NonNull Activity activity,
+            @NonNull Map<String, Object> localExtras,
+            @NonNull Map<String, String> serverExtras)
+            throws Exception {
+        if (TextUtils.isEmpty(serverExtras.get(KEY_EXTRA_AD_UNIT_ID))) {
+            // Using class name as the network ID for this callback since the ad unit ID is
+            // invalid.
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(
+                    GooglePlayServicesRewardedVideo.class,
+                    GooglePlayServicesRewardedVideo.class.getSimpleName(),
+                    MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+        mAdUnitId = serverExtras.get(KEY_EXTRA_AD_UNIT_ID);
+
+        if (mRewardedVideoAd == null) {
+            mRewardedVideoAd = MobileAds.getRewardedVideoAdInstance(activity);
+            mRewardedVideoAd.setRewardedVideoAdListener(GooglePlayServicesRewardedVideo.this);
+        }
+
+        if (mRewardedVideoAd.isLoaded()) {
+            MoPubRewardedVideoManager
+                    .onRewardedVideoLoadSuccess(GooglePlayServicesRewardedVideo.class, mAdUnitId);
+        } else {
+            mRewardedVideoAd
+                    .loadAd(mAdUnitId, new AdRequest.Builder().setRequestAgent("MoPub").build());
+        }
+    }
+
+    @Override
+    protected boolean hasVideoAvailable() {
+        return mRewardedVideoAd != null && mRewardedVideoAd.isLoaded();
+    }
+
+    @Override
+    protected void showVideo() {
+        if (hasVideoAvailable()) {
+            mRewardedVideoAd.show();
+        } else {
+            MoPubRewardedVideoManager.onRewardedVideoPlaybackError(
+                    GooglePlayServicesRewardedVideo.class,
+                    mAdUnitId,
+                    getMoPubErrorCode(AdRequest.ERROR_CODE_INTERNAL_ERROR));
+        }
+    }
+
+    @Override
+    public void onRewardedVideoAdLoaded() {
+        MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(
+                GooglePlayServicesRewardedVideo.class,
+                mAdUnitId);
+    }
+
+    @Override
+    public void onRewardedVideoAdOpened() {
+        // MoPub SDK does not have an equivalent callback for an ad opened event. Do nothing.
+    }
+
+    @Override
+    public void onRewardedVideoStarted() {
+        MoPubRewardedVideoManager.onRewardedVideoStarted(
+                GooglePlayServicesRewardedVideo.class,
+                mAdUnitId);
+    }
+
+    @Override
+    public void onRewardedVideoAdClosed() {
+        MoPubRewardedVideoManager.onRewardedVideoClosed(
+                GooglePlayServicesRewardedVideo.class,
+                mAdUnitId);
+    }
+
+    @Override
+    public void onRewarded(RewardItem rewardItem) {
+        MoPubRewardedVideoManager.onRewardedVideoCompleted(
+                GooglePlayServicesRewardedVideo.class,
+                mAdUnitId,
+                MoPubReward.success(rewardItem.getType(), rewardItem.getAmount()));
+    }
+
+    @Override
+    public void onRewardedVideoAdLeftApplication() {
+        MoPubRewardedVideoManager.onRewardedVideoClicked(
+                GooglePlayServicesRewardedVideo.class,
+                mAdUnitId);
+    }
+
+    @Override
+    public void onRewardedVideoAdFailedToLoad(int error) {
+        MoPubRewardedVideoManager.onRewardedVideoLoadFailure(
+                GooglePlayServicesRewardedVideo.class,
+                mAdUnitId,
+                getMoPubErrorCode(error));
+    }
+
+    /**
+     * Converts a given Google Mobile Ads SDK error code into {@link MoPubErrorCode}.
+     *
+     * @param error Google Mobile Ads SDK error code.
+     * @return an equivalent MoPub SDK error code for the given Google Mobile Ads SDK error
+     * code.
+     */
+    private MoPubErrorCode getMoPubErrorCode(int error) {
+        MoPubErrorCode errorCode;
+        switch (error) {
+            case AdRequest.ERROR_CODE_INTERNAL_ERROR:
+                errorCode = MoPubErrorCode.INTERNAL_ERROR;
+                break;
+            case AdRequest.ERROR_CODE_INVALID_REQUEST:
+                errorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+                break;
+            case AdRequest.ERROR_CODE_NETWORK_ERROR:
+                errorCode = MoPubErrorCode.NO_CONNECTION;
+                break;
+            case AdRequest.ERROR_CODE_NO_FILL:
+                errorCode = MoPubErrorCode.NO_FILL;
+                break;
+            default:
+                errorCode = MoPubErrorCode.UNSPECIFIED;
+        }
+        return errorCode;
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/MillennialBanner.java b/extras/src/com/mopub/mobileads/MillennialBanner.java
index d09dcf6e..0a329984 100644
--- a/extras/src/com/mopub/mobileads/MillennialBanner.java
+++ b/extras/src/com/mopub/mobileads/MillennialBanner.java
@@ -1,211 +1,188 @@
 package com.mopub.mobileads;
 
-import android.app.Activity;
 import android.content.Context;
-import android.os.Handler;
-import android.os.Looper;
 import android.util.Log;
 import android.view.Gravity;
-import android.widget.LinearLayout;
-import android.widget.LinearLayout.LayoutParams;
+import android.widget.FrameLayout;
+import android.widget.FrameLayout.LayoutParams;
 
 import com.millennialmedia.AppInfo;
+import com.millennialmedia.CreativeInfo;
 import com.millennialmedia.InlineAd;
 import com.millennialmedia.InlineAd.AdSize;
 import com.millennialmedia.InlineAd.InlineAdMetadata;
 import com.millennialmedia.InlineAd.InlineErrorStatus;
 import com.millennialmedia.MMException;
+import com.millennialmedia.MMLog;
 import com.millennialmedia.MMSDK;
+import com.mopub.common.MoPub;
 
 import java.util.Map;
 
+
 /**
- * Compatible with version 6.0 of the Millennial Media SDK.
+ * Compatible with version 6.6 of the Millennial Media SDK.
  */
 
-class MillennialBanner extends CustomEventBanner {
+final class MillennialBanner extends CustomEventBanner {
+
+    private static final String TAG = MillennialBanner.class.getSimpleName();
+
+    private static final String DCN_KEY = "dcn";
+    private static final String APID_KEY = "adUnitID";
+    private static final String AD_WIDTH_KEY = "adWidth";
+    private static final String AD_HEIGHT_KEY = "adHeight";
 
-    public static final String LOGCAT_TAG = "MP->MM Inline";
-    public static final String DCN_KEY = "dcn";
-    public static final String APID_KEY = "adUnitID";
-    public static final String AD_WIDTH_KEY = "adWidth";
-    public static final String AD_HEIGHT_KEY = "adHeight";
+    private InlineAd inlineAd;
+    private CustomEventBannerListener bannerListener;
+    private FrameLayout internalView;
+
+    static {
+        Log.i(TAG, "Millennial Media Adapter Version: " + MillennialUtils.VERSION);
+    }
 
-    private InlineAd mInlineAd;
-    private CustomEventBannerListener mBannerListener;
-    private LinearLayout mInternalView;
-    private static final Handler UI_THREAD_HANDLER = new Handler(Looper.getMainLooper());
 
+    public CreativeInfo getCreativeInfo() {
+
+        if (inlineAd == null) {
+            return null;
+        }
+
+        return inlineAd.getCreativeInfo();
+    }
 
+    
     @Override
     protected void loadBanner(final Context context, final CustomEventBannerListener customEventBannerListener,
-            final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
-
-        LayoutParams lp;
-        String apid = null;
-        String dcn = null;
-        int width;
-        int height;
-        mBannerListener = customEventBannerListener;
-
-        if ( !MMSDK.isInitialized() ) {
-            try {
-                MMSDK.initialize((Activity) context);
-            } catch ( Exception e ) {
-                Log.e(LOGCAT_TAG, "Unable to initialize the Millennial SDK-- " + e.getMessage());
-                e.printStackTrace();
-                UI_THREAD_HANDLER.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
-                    }
-                });
-                return;
-            }
+                              final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
+
+        bannerListener = customEventBannerListener;
+        if (!MillennialUtils.initSdk(context)) {
+            Log.e(TAG, "MM SDK must be initialized with an Activity or Application context.");
+            bannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
+            return;
         }
 
-        if (extrasAreValid(serverExtras)) {
-            dcn = serverExtras.get(DCN_KEY);
-            apid = serverExtras.get(APID_KEY);
-            width = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
-            height = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
-        } else {
-            Log.e(LOGCAT_TAG, "We were given invalid extras! Make sure placement ID, width, and height are specified.");
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
+        String apid = serverExtras.get(APID_KEY);
+        int width = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
+        int height = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
+
+        if (MillennialUtils.isEmpty(apid) || (width < 0) || (height < 0)) {
+            Log.e(TAG, "We were given invalid extras! Make sure placement ID, width, and height are specified.");
+            bannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
             return;
         }
 
-        // Add DCN's for Nexage folks
+        // Set DCN on the AppInfo if provided
+        String dcn = serverExtras.get(DCN_KEY);
+        AppInfo ai = new AppInfo().setMediator("mopubsdk");
+        if (!MillennialUtils.isEmpty(dcn)) {
+            ai.setSiteId(dcn);
+        }
+
         try {
-            AppInfo ai = new AppInfo().setMediator("mopubsdk");
-            if ( dcn != null && dcn.length() > 0 ) {
-                ai = ai.setSiteId(dcn);
-            } else {
-                ai = ai.setSiteId(null);
-            }
+
             MMSDK.setAppInfo(ai);
-        } catch ( IllegalStateException e ) {
-            Log.i(LOGCAT_TAG, "Caught exception " + e.getMessage());
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
-                }
-            });
-            return;
-        }
 
-        mInternalView = new LinearLayout(context);
+            internalView = new FrameLayout(context);
 
-        lp = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
-        lp.gravity = Gravity.CENTER_HORIZONTAL;
-        mInternalView.setLayoutParams(lp);
+            LayoutParams lp = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
+            lp.gravity = Gravity.CENTER_HORIZONTAL;
+            internalView.setLayoutParams(lp);
 
-        InlineAdMetadata mInlineAdMetadata = null;
+            inlineAd = InlineAd.createInstance(apid, internalView);
+            InlineAdMetadata mInlineAdMetadata = new InlineAdMetadata().setAdSize(new AdSize(width, height));
 
-        try {
-            mInlineAd = InlineAd.createInstance(apid, mInternalView);
-            mInlineAdMetadata = new InlineAdMetadata().setAdSize(new AdSize(width, height));
-        } catch ( MMException e ) {
-            e.printStackTrace();
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
-                }
-            });
-            return;
-        }
+            inlineAd.setListener(new MillennialInlineListener());
+
+            MMSDK.setLocationEnabled(MoPub.getLocationAwareness() != MoPub.LocationAwareness.DISABLED);
 
-        mInlineAd.setListener(new MillennialInlineListener());
-        
-        /* If MoPub gets location, so do we. */
-        MMSDK.setLocationEnabled( (localExtras.get("location") != null) );
+            AdViewController.setShouldHonorServerDimensions(internalView);
 
-        AdViewController.setShouldHonorServerDimensions(mInternalView);
+            inlineAd.request(mInlineAdMetadata);
 
-        mInlineAd.request(mInlineAdMetadata);
+        } catch (MMException e) {
+            Log.e(TAG, "MM SDK exception occurred obtaining an inline ad unit.", e);
+            bannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
+        }
     }
 
+
     @Override
     protected void onInvalidate() {
         // Destroy any hanging references.
-        if (mInlineAd != null) {
-            mInlineAd.setListener(null);
-            mInlineAd = null;
+        if (inlineAd != null) {
+            inlineAd.destroy();
+            inlineAd = null;
         }
     }
 
-    private boolean extrasAreValid(final Map<String, String> serverExtras) {
-        try {
-            // Add pos / non-null and APIDs.
-            int w = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
-            int h = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
-            if ( h < 0 || w < 0 ) {
-                throw new NumberFormatException();
-            }
-        } catch (Exception e) {
-            Log.e(LOGCAT_TAG, "Width and height must exist and contain positive integers!");
-            e.printStackTrace();
-            return false;
-        }
-
-        return serverExtras.containsKey(APID_KEY);
-    }
 
     class MillennialInlineListener implements InlineAd.InlineListener {
 
         @Override
-        public void onAdLeftApplication(InlineAd arg0) {
-            // Intentionally not calling MoPub's onLeaveApplication to avoid double-count
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Leaving application");
+        public void onAdLeftApplication(InlineAd inlineAd) {
+            // onLeaveApplication is an alias to on clicked. We are not required to call this.
+
+            // @formatter:off
+            // https://github.com/mopub/mopub-android-sdk/blob/940eee70fe1980b4869d61cb5d668ccbab75c0ee/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
+            // @formatter:on
+            Log.d(TAG, "Millennial Inline Ad - Leaving application");
         }
 
+
         @Override
-        public void onClicked(InlineAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Ad clicked");
-            UI_THREAD_HANDLER.post(new Runnable() {
+        public void onClicked(InlineAd inlineAd) {
+
+            Log.d(TAG, "Millennial Inline Ad - Ad clicked");
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mBannerListener.onBannerClicked();
+
+                    bannerListener.onBannerClicked();
                 }
             });
         }
 
+
         @Override
-        public void onCollapsed(InlineAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner collapsed");
-            UI_THREAD_HANDLER.post(new Runnable() {
+        public void onCollapsed(InlineAd inlineAd) {
+
+            Log.d(TAG, "Millennial Inline Ad - Banner collapsed");
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mBannerListener.onBannerCollapsed();
+
+                    bannerListener.onBannerCollapsed();
                 }
             });
 
         }
 
+
         @Override
-        public void onExpanded(InlineAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner expanded");
-            UI_THREAD_HANDLER.post(new Runnable() {
+        public void onExpanded(InlineAd inlineAd) {
+
+            Log.d(TAG, "Millennial Inline Ad - Banner expanded");
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mBannerListener.onBannerExpanded();
+
+                    bannerListener.onBannerExpanded();
                 }
             });
         }
 
+
         @Override
-        public void onRequestFailed(InlineAd arg0, InlineErrorStatus err) {
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner failed (" + err.getErrorCode() + "): " + err.getDescription() );
+        public void onRequestFailed(InlineAd inlineAd, InlineErrorStatus inlineErrorStatus) {
+
+            Log.d(TAG, "Millennial Inline Ad - Banner failed (" + inlineErrorStatus.getErrorCode() + "): " +
+                    inlineErrorStatus.getDescription());
+
             MoPubErrorCode mopubErrorCode;
 
-            switch ( err.getErrorCode() ) {
+            switch (inlineErrorStatus.getErrorCode()) {
                 case InlineErrorStatus.ADAPTER_NOT_FOUND:
                     mopubErrorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
                     break;
@@ -227,38 +204,51 @@ public void onRequestFailed(InlineAd arg0, InlineErrorStatus err) {
             }
 
             final MoPubErrorCode fErrorCode = mopubErrorCode;
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mBannerListener.onBannerFailed(fErrorCode);
+
+                    bannerListener.onBannerFailed(fErrorCode);
                 }
             });
 
         }
 
+
         @Override
-        public void onRequestSucceeded(InlineAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner request succeeded");
-            UI_THREAD_HANDLER.post(new Runnable() {
+        public void onRequestSucceeded(InlineAd inlineAd) {
+
+            Log.d(TAG, "Millennial Inline Ad - Banner request succeeded");
+
+            CreativeInfo creativeInfo = getCreativeInfo();
+
+            if ((creativeInfo != null) && MMLog.isDebugEnabled()) {
+                MMLog.d(TAG, "Banner Creative Info: " + creativeInfo);
+            }
+
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mBannerListener.onBannerLoaded(mInternalView);
+
+                    bannerListener.onBannerLoaded(internalView);
                 }
             });
         }
 
+
         @Override
-        public void onResize(InlineAd arg0, int w, int h) {
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner about to resize (width: " + w + ", height: " + h + ")");
+        public void onResize(InlineAd inlineAd, int w, int h) {
+
+            Log.d(TAG, "Millennial Inline Ad - Banner about to resize (width: " + w + ", height: " + h + ")");
         }
 
+
         @Override
-        public void onResized(InlineAd arg0, int w, int h, boolean isClosed) {
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner resized (width: " + w + ", height: " + h + "). "
-                    + (isClosed ? "Returned to original placement." : "Got a fresh, new place.") );
+        public void onResized(InlineAd inlineAd, int w, int h, boolean isClosed) {
 
-        }
+            Log.d(TAG, "Millennial Inline Ad - Banner resized (width: " + w + ", height: " + h + "). " +
+                    (isClosed ? "Returned to original placement." : "Got a fresh, new place."));
 
+        }
     }
-
 }
diff --git a/extras/src/com/mopub/mobileads/MillennialInterstitial.java b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
index 25eba9b4..cbb6c879 100644
--- a/extras/src/com/mopub/mobileads/MillennialInterstitial.java
+++ b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
@@ -1,191 +1,189 @@
 package com.mopub.mobileads;
 
-import android.app.Activity;
 import android.content.Context;
-import android.os.Handler;
-import android.os.Looper;
 import android.util.Log;
 
-import java.util.Map;
-
 import com.millennialmedia.AppInfo;
+import com.millennialmedia.CreativeInfo;
 import com.millennialmedia.InterstitialAd;
 import com.millennialmedia.InterstitialAd.InterstitialErrorStatus;
 import com.millennialmedia.InterstitialAd.InterstitialListener;
 import com.millennialmedia.MMException;
+import com.millennialmedia.MMLog;
 import com.millennialmedia.MMSDK;
+import com.mopub.common.MoPub;
+
+import java.util.Map;
+
 
 /**
- * Compatible with version 6.0 of the Millennial Media SDK.
+ * Compatible with version 6.6 of the Millennial Media SDK.
  */
 
-class MillennialInterstitial extends CustomEventInterstitial {
+final class MillennialInterstitial extends CustomEventInterstitial {
+
+    private static final String TAG = MillennialInterstitial.class.getSimpleName();
+    private static final String DCN_KEY = "dcn";
+    private static final String APID_KEY = "adUnitID";
+
+    private InterstitialAd millennialInterstitial;
+    private Context context;
+    private CustomEventInterstitialListener interstitialListener;
+
+    static {
+        Log.i(TAG, "Millennial Media Adapter Version: " + MillennialUtils.VERSION);
+    }
 
-    public static final String LOGCAT_TAG = "MP->MM Int.";
-    public static final String DCN_KEY = "dcn";
-    public static final String APID_KEY = "adUnitID";
 
-    private InterstitialAd mMillennialInterstitial;
-    private Context mContext;
-    private CustomEventInterstitialListener mInterstitialListener;
-    private static final Handler UI_THREAD_HANDLER = new Handler(Looper.getMainLooper());
+    public CreativeInfo getCreativeInfo() {
+
+        if (millennialInterstitial == null) {
+            return null;
+        }
+
+        return millennialInterstitial.getCreativeInfo();
+    }
+
 
     @Override
-    protected void loadInterstitial(final Context context, final CustomEventInterstitialListener customEventInterstitialListener,
-            final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
-        String dcn = null;
-        mInterstitialListener = customEventInterstitialListener;
-        mContext = context;
+    protected void loadInterstitial(final Context context,
+                                    final CustomEventInterstitialListener customEventInterstitialListener,
+                                    final Map<String, Object> localExtras,
+                                    final Map<String, String> serverExtras) {
 
-        final String apid;
+        interstitialListener = customEventInterstitialListener;
+        this.context = context;
 
-        if ( !MMSDK.isInitialized() ) {
-            try {
-                MMSDK.initialize((Activity) context);
-            } catch ( Exception e ) {
-                Log.e(LOGCAT_TAG, "Unable to initialize the Millennial SDK-- " + e.getMessage());
-                e.printStackTrace();
-                UI_THREAD_HANDLER.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
-                    }
-                });
-                return;
-            }
+        if (!MillennialUtils.initSdk(context)) {
+            Log.e(TAG, "MM SDK must be initialized with an Activity or Application context.");
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+            return;
         }
 
-        if (extrasAreValid(serverExtras)) {
-            dcn = serverExtras.get(DCN_KEY);
-            apid = serverExtras.get(APID_KEY);
-        } else {
-            Log.e(LOGCAT_TAG, "Invalid extras-- Be sure you have an placement ID specified.");
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
+        String apid = serverExtras.get(APID_KEY);
+
+        if (MillennialUtils.isEmpty(apid)) {
+            Log.e(TAG, "Invalid extras-- Be sure you have an placement ID specified.");
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+
             return;
         }
 
         // Add DCN support
-        try {
-            AppInfo ai = new AppInfo().setMediator("mopubsdk");
-            if ( dcn != null && dcn.length() > 0 ) {
-                ai = ai.setSiteId(dcn);
-            } else {
-                ai.setSiteId(null);
-            }
-            MMSDK.setAppInfo(ai);
-        } catch ( IllegalStateException e ) {
-            Log.i(LOGCAT_TAG, "SDK not finished initializing-- " + e.getMessage());
+        String dcn = serverExtras.get(DCN_KEY);
+
+        AppInfo ai = new AppInfo().setMediator("mopubsdk");
+        if (!MillennialUtils.isEmpty(dcn)) {
+            ai.setSiteId(dcn);
         }
-        
-        /* If MoPub gets location, so do we. */
-        MMSDK.setLocationEnabled( (localExtras.get("location") != null) );
 
         try {
-            mMillennialInterstitial = InterstitialAd.createInstance(apid);
+            MMSDK.setAppInfo(ai);
+            MMSDK.setLocationEnabled(MoPub.getLocationAwareness() != MoPub.LocationAwareness.DISABLED);
+            millennialInterstitial = InterstitialAd.createInstance(apid);
+            millennialInterstitial.setListener(new MillennialInterstitialListener());
+            millennialInterstitial.load(context, null);
         } catch (MMException e) {
-            e.printStackTrace();
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
-                }
-            });
-            return;
+            Log.e(TAG, "Exception occurred while obtaining an interstitial from MM SDK.", e);
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
         }
-
-        mMillennialInterstitial.setListener(new MillennialInterstitialListener());
-        mMillennialInterstitial.load(context, null);
     }
 
+
     @Override
     protected void showInterstitial() {
-        if (mMillennialInterstitial.isReady()) {
+
+        if (millennialInterstitial.isReady()) {
             try {
-                mMillennialInterstitial.show(mContext);
-            } catch ( MMException e ) {
-                e.printStackTrace();
-                UI_THREAD_HANDLER.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
-                    }
-                });
-                return;
+                millennialInterstitial.show(context);
+            } catch (MMException e) {
+                MMLog.e(TAG, "An exception occurred while attempting to show interstitial.", e);
+                interstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
             }
         } else {
-            Log.w(LOGCAT_TAG, "showInterstitial called before Millennial's ad was loaded.");
+            Log.w(TAG, "showInterstitial called but interstitial is not ready.");
         }
     }
 
+
     @Override
     protected void onInvalidate() {
-        if (mMillennialInterstitial != null) {
-            mMillennialInterstitial.setListener(null);
-            mMillennialInterstitial = null;
+
+        if (millennialInterstitial != null) {
+            millennialInterstitial.destroy();
+            millennialInterstitial = null;
         }
     }
 
-    private boolean extrasAreValid(Map<String, String> serverExtras) {
-        return serverExtras.containsKey(APID_KEY);
-    }
 
     class MillennialInterstitialListener implements InterstitialListener {
 
         @Override
-        public void onAdLeftApplication(InterstitialAd arg0) {
-            // Intentionally not calling MoPub's onLeaveApplication to avoid double-count
-            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Leaving application");
+        public void onAdLeftApplication(InterstitialAd interstitialAd) {
+            // onLeaveApplication is an alias to on clicked. We are not required to call this.
+
+            // @formatter:off
+            // https://github.com/mopub/mopub-android-sdk/blob/940eee70fe1980b4869d61cb5d668ccbab75c0ee/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
+            // @formatter:on
+            Log.d(TAG, "Millennial Interstitial Ad - Leaving application");
         }
 
+
         @Override
-        public void onClicked(InterstitialAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Ad was clicked");
-            UI_THREAD_HANDLER.post(new Runnable() {
+        public void onClicked(InterstitialAd interstitialAd) {
+
+            Log.d(TAG, "Millennial Interstitial Ad - Ad was clicked");
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialClicked();
+
+                    interstitialListener.onInterstitialClicked();
                 }
             });
         }
 
+
         @Override
-        public void onClosed(InterstitialAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Ad was closed");
-            UI_THREAD_HANDLER.post(new Runnable() {
+        public void onClosed(InterstitialAd interstitialAd) {
+
+            Log.d(TAG, "Millennial Interstitial Ad - Ad was closed");
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialDismissed();
+
+                    interstitialListener.onInterstitialDismissed();
                 }
             });
         }
 
+
         @Override
-        public void onExpired(InterstitialAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Ad expired");
-            UI_THREAD_HANDLER.post(new Runnable() {
+        public void onExpired(InterstitialAd interstitialAd) {
+
+            Log.d(TAG, "Millennial Interstitial Ad - Ad expired");
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
+
+                    interstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
                 }
             });
         }
 
+
         @Override
-        public void onLoadFailed(InterstitialAd arg0,
-                InterstitialErrorStatus err) {
-            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - load failed (" + err.getErrorCode() + "): " + err.getDescription() );
+        public void onLoadFailed(InterstitialAd interstitialAd, InterstitialErrorStatus interstitialErrorStatus) {
+
+            Log.d(TAG, "Millennial Interstitial Ad - load failed (" + interstitialErrorStatus.getErrorCode() + "): " +
+                    interstitialErrorStatus.getDescription());
+
             final MoPubErrorCode moPubErrorCode;
 
-            switch (err.getErrorCode() ) {
+            switch (interstitialErrorStatus.getErrorCode()) {
                 case InterstitialErrorStatus.ALREADY_LOADED:
                     // This will generate discrepancies, as requests will NOT be sent to Millennial.
-                    mInterstitialListener.onInterstitialLoaded();
-                    Log.w(LOGCAT_TAG, "Millennial Interstitial Ad - Attempted to load ads when ads are already loaded." );
+                    interstitialListener.onInterstitialLoaded();
+                    Log.w(TAG, "Millennial Interstitial Ad - Attempted to load ads when ads are already loaded.");
                     return;
                 case InterstitialErrorStatus.EXPIRED:
                 case InterstitialErrorStatus.DISPLAY_FAILED:
@@ -205,44 +203,62 @@ public void onLoadFailed(InterstitialAd arg0,
                     moPubErrorCode = MoPubErrorCode.NETWORK_NO_FILL;
             }
 
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialFailed(moPubErrorCode);
+
+                    interstitialListener.onInterstitialFailed(moPubErrorCode);
                 }
             });
         }
 
+
         @Override
-        public void onLoaded(InterstitialAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Ad loaded splendidly");
-            UI_THREAD_HANDLER.post(new Runnable() {
+        public void onLoaded(InterstitialAd interstitialAd) {
+
+            Log.d(TAG, "Millennial Interstitial Ad - Ad loaded splendidly");
+
+            CreativeInfo creativeInfo = getCreativeInfo();
+
+            if ((creativeInfo != null) && MMLog.isDebugEnabled()) {
+                MMLog.d(TAG, "Interstitial Creative Info: " + creativeInfo);
+            }
+
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialLoaded();
+
+                    interstitialListener.onInterstitialLoaded();
                 }
             });
         }
 
+
         @Override
-        public void onShowFailed(InterstitialAd arg0,
-                InterstitialErrorStatus arg1) {
-            Log.e(LOGCAT_TAG, "Millennial Interstitial Ad - Show failed (" + arg1.getErrorCode() + "): " + arg1.getDescription());
-            UI_THREAD_HANDLER.post(new Runnable() {
+        public void onShowFailed(InterstitialAd interstitialAd, InterstitialErrorStatus interstitialErrorStatus) {
+
+            Log.e(TAG, "Millennial Interstitial Ad - Show failed (" + interstitialErrorStatus.getErrorCode() + "): " +
+                    interstitialErrorStatus.getDescription());
+
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+
+                    interstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
                 }
             });
         }
 
+
         @Override
-        public void onShown(InterstitialAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Ad shown");
-            UI_THREAD_HANDLER.post(new Runnable() {
+        public void onShown(InterstitialAd interstitialAd) {
+
+            Log.d(TAG, "Millennial Interstitial Ad - Ad shown");
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialShown();
+
+                    interstitialListener.onInterstitialShown();
                 }
             });
         }
diff --git a/extras/src/com/mopub/mobileads/MillennialRewardedVideo.java b/extras/src/com/mopub/mobileads/MillennialRewardedVideo.java
new file mode 100644
index 00000000..ca906ba1
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/MillennialRewardedVideo.java
@@ -0,0 +1,361 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.Log;
+
+import com.millennialmedia.AppInfo;
+import com.millennialmedia.CreativeInfo;
+import com.millennialmedia.InterstitialAd;
+import com.millennialmedia.InterstitialAd.InterstitialErrorStatus;
+import com.millennialmedia.InterstitialAd.InterstitialListener;
+import com.millennialmedia.MMException;
+import com.millennialmedia.MMLog;
+import com.millennialmedia.MMSDK;
+import com.millennialmedia.XIncentivizedEventListener;
+import com.mopub.common.BaseLifecycleListener;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MoPub;
+import com.mopub.common.MoPubReward;
+
+import java.util.Map;
+
+
+/**
+ * Compatible with version 6.6 of the Millennial Media SDK.
+ */
+
+@SuppressWarnings("unused")
+final class MillennialRewardedVideo extends CustomEventRewardedVideo {
+
+    private static final String TAG = MillennialRewardedVideo.class.getSimpleName();
+    public static final String DCN_KEY = "dcn";
+    public static final String APID_KEY = "adUnitID";
+
+    private InterstitialAd millennialInterstitial;
+    private MillennialRewardedVideoListener millennialRewardedVideoListener = new MillennialRewardedVideoListener();
+    private Context context;
+    private String apid = null;
+
+    static {
+        Log.i(TAG, "Millennial Media Adapter Version: " + MillennialUtils.VERSION);
+    }
+
+
+    public CreativeInfo getCreativeInfo() {
+
+        if (millennialInterstitial == null) {
+            return null;
+        }
+
+        return millennialInterstitial.getCreativeInfo();
+    }
+
+
+    @Nullable
+    @Override
+    protected CustomEventRewardedVideoListener getVideoListenerForSdk() {
+
+        return millennialRewardedVideoListener;
+    }
+
+
+    @Nullable
+    @Override
+    protected LifecycleListener getLifecycleListener() {
+
+        return new BaseLifecycleListener();
+    }
+
+
+    @NonNull
+    @Override
+    protected String getAdNetworkId() {
+
+        return (apid == null) ? "" : apid;
+    }
+
+
+    @Override
+    protected void onInvalidate() {
+
+        if (millennialInterstitial != null) {
+            millennialInterstitial.destroy();
+            millennialInterstitial = null;
+            apid = null;
+        }
+    }
+
+
+    @Override
+    protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
+            @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) throws Exception {
+
+        if (!MillennialUtils.initSdk(launcherActivity)) {
+            Log.e(TAG, "MM SDK must be initialized with an Activity or Application context.");
+
+            return false;
+        }
+
+        return true;
+    }
+
+
+    @Override
+    protected void loadWithSdkInitialized(@NonNull Activity activity, @NonNull Map<String, Object> localExtras,
+            @NonNull Map<String, String> serverExtras) throws Exception {
+
+        this.context = activity.getApplicationContext();
+        apid = serverExtras.get(APID_KEY);
+        String dcn = serverExtras.get(DCN_KEY);
+
+        if (MillennialUtils.isEmpty(apid)) {
+            Log.e(TAG, "Invalid extras-- Be sure you have a placement ID specified.");
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(MillennialRewardedVideo.class, "",
+                    MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+
+            return;
+        }
+
+        // Add DCN support
+        AppInfo ai = new AppInfo().setMediator("mopubsdk").setSiteId(dcn);
+        try {
+            MMSDK.setAppInfo(ai);
+			/* If MoPub gets location, so do we. */
+            MMSDK.setLocationEnabled(MoPub.getLocationAwareness() != MoPub.LocationAwareness.DISABLED);
+
+            millennialInterstitial = InterstitialAd.createInstance(apid);
+            millennialInterstitial.setListener(millennialRewardedVideoListener);
+            millennialInterstitial.xSetIncentivizedListener(millennialRewardedVideoListener);
+            millennialInterstitial.load(activity, null);
+
+        } catch (MMException e) {
+            Log.e(TAG, "An exception occurred loading an InterstitialAd", e);
+            MoPubRewardedVideoManager
+                    .onRewardedVideoLoadFailure(MillennialRewardedVideo.class, apid, MoPubErrorCode.INTERNAL_ERROR);
+        }
+    }
+
+
+    @Override
+    protected boolean hasVideoAvailable() {
+
+        return ((millennialInterstitial != null) && millennialInterstitial.isReady());
+    }
+
+
+    @Override
+    protected void showVideo() {
+
+        if ((millennialInterstitial != null) && millennialInterstitial.isReady()) {
+            try {
+                millennialInterstitial.show(context);
+            } catch (MMException e) {
+                Log.e(TAG, "An exception occurred showing the MM SDK interstitial.", e);
+                MoPubRewardedVideoManager
+                        .onRewardedVideoPlaybackError(MillennialRewardedVideo.class, millennialInterstitial.placementId,
+                                MoPubErrorCode.INTERNAL_ERROR);
+            }
+        } else {
+            Log.w(TAG, "showVideo called before MillennialInterstitial ad was loaded.");
+        }
+    }
+
+
+    class MillennialRewardedVideoListener
+            implements InterstitialListener, XIncentivizedEventListener, CustomEventRewardedVideoListener {
+
+        @Override
+        public void onAdLeftApplication(InterstitialAd interstitialAd) {
+            // onLeaveApplication is an alias to on clicked. We are not required to call this.
+
+            // @formatter:off
+            // https://github.com/mopub/mopub-android-sdk/blob/940eee70fe1980b4869d61cb5d668ccbab75c0ee/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
+            // @formatter:on
+            Log.d(TAG, "Millennial Rewarded Video Ad - Leaving application");
+        }
+
+
+        @Override
+        public void onClicked(final InterstitialAd interstitialAd) {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - Ad was clicked");
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoClicked(MillennialRewardedVideo.class, interstitialAd.placementId);
+                }
+            });
+        }
+
+
+        @Override
+        public void onClosed(final InterstitialAd interstitialAd) {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - Ad was closed");
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoClosed(MillennialRewardedVideo.class, interstitialAd.placementId);
+                }
+            });
+        }
+
+
+        @Override
+        public void onExpired(final InterstitialAd interstitialAd) {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - Ad expired");
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoLoadFailure(MillennialRewardedVideo.class, interstitialAd.placementId,
+                                    MoPubErrorCode.VIDEO_NOT_AVAILABLE);
+                }
+            });
+        }
+
+
+        @Override
+        public void onLoadFailed(final InterstitialAd interstitialAd, InterstitialErrorStatus
+                interstitialErrorStatus) {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - load failed (" + interstitialErrorStatus.getErrorCode() + "): " +
+                    interstitialErrorStatus.getDescription());
+
+            final MoPubErrorCode moPubErrorCode;
+
+            switch (interstitialErrorStatus.getErrorCode()) {
+                case InterstitialErrorStatus.ALREADY_LOADED:
+                    // This will generate discrepancies, as requests will NOT be sent to Millennial.
+                    MillennialUtils.postOnUiThread(new Runnable() {
+                        @Override
+                        public void run() {
+
+                            MoPubRewardedVideoManager
+                                    .onRewardedVideoLoadSuccess(MillennialRewardedVideo.class, interstitialAd.placementId);
+                        }
+                    });
+                    Log.w(TAG, "Millennial Rewarded Video Ad - Attempted to load ads when ads are already loaded.");
+                    return;
+                case InterstitialErrorStatus.EXPIRED:
+                case InterstitialErrorStatus.DISPLAY_FAILED:
+                case InterstitialErrorStatus.INIT_FAILED:
+                case InterstitialErrorStatus.ADAPTER_NOT_FOUND:
+                    moPubErrorCode = MoPubErrorCode.INTERNAL_ERROR;
+                    break;
+                case InterstitialErrorStatus.NO_NETWORK:
+                    moPubErrorCode = MoPubErrorCode.NO_CONNECTION;
+                    break;
+                case InterstitialErrorStatus.UNKNOWN:
+                    moPubErrorCode = MoPubErrorCode.UNSPECIFIED;
+                    break;
+                case InterstitialErrorStatus.NOT_LOADED:
+                case InterstitialErrorStatus.LOAD_FAILED:
+                default:
+                    moPubErrorCode = MoPubErrorCode.NETWORK_NO_FILL;
+            }
+
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoLoadFailure(MillennialRewardedVideo.class, interstitialAd.placementId,
+                                    moPubErrorCode);
+                }
+            });
+        }
+
+
+        @Override
+        public void onLoaded(final InterstitialAd interstitialAd) {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - Ad loaded splendidly");
+
+            CreativeInfo creativeInfo = getCreativeInfo();
+
+            if ((creativeInfo != null) && MMLog.isDebugEnabled()) {
+                MMLog.d(TAG, "Rewarded Video Creative Info: " + creativeInfo);
+            }
+
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoLoadSuccess(MillennialRewardedVideo.class, interstitialAd.placementId);
+                }
+            });
+        }
+
+
+        @Override
+        public void onShowFailed(final InterstitialAd interstitialAd, InterstitialErrorStatus
+                interstitialErrorStatus) {
+
+            Log.e(TAG, "Millennial Rewarded Video Ad - Show failed (" + interstitialErrorStatus.getErrorCode() + "): " +
+                    interstitialErrorStatus.getDescription());
+
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoPlaybackError(MillennialRewardedVideo.class, interstitialAd.placementId,
+                                    MoPubErrorCode.VIDEO_PLAYBACK_ERROR);
+                }
+            });
+        }
+
+
+        @Override
+        public void onShown(final InterstitialAd interstitialAd) {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - Ad shown");
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoStarted(MillennialRewardedVideo.class, interstitialAd.placementId);
+                }
+            });
+        }
+
+
+        @Override
+        public boolean onVideoComplete() {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - Video completed");
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoCompleted(MillennialRewardedVideo.class, millennialInterstitial.placementId,
+                                    MoPubReward.success(MoPubReward.NO_REWARD_LABEL, MoPubReward.DEFAULT_REWARD_AMOUNT));
+                }
+            });
+            return false;
+        }
+
+
+        @Override
+        public boolean onCustomEvent(XIncentiveEvent xIncentiveEvent) {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - Custom event received: " + xIncentiveEvent.eventId + ", " +
+                    xIncentiveEvent.args);
+
+            return false;
+        }
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/MillennialUtils.java b/extras/src/com/mopub/mobileads/MillennialUtils.java
new file mode 100644
index 00000000..0417e7ee
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/MillennialUtils.java
@@ -0,0 +1,65 @@
+package com.mopub.mobileads;
+
+import android.app.Application;
+import android.content.Context;
+import android.os.Handler;
+import android.os.Looper;
+import android.support.annotation.NonNull;
+import android.util.Log;
+
+import com.millennialmedia.MMException;
+import com.millennialmedia.MMSDK;
+import com.mopub.common.Preconditions;
+
+
+final public class MillennialUtils {
+    private static final String LOG_TAG = MillennialUtils.class.getSimpleName();
+
+    private static final Handler handler = new Handler(Looper.getMainLooper());
+
+    public static final String VERSION = "1.2.0";
+
+    private static volatile boolean sIsInitialized = false;
+
+    public static void postOnUiThread(Runnable runnable) {
+        handler.post(runnable);
+    }
+
+    public static boolean isEmpty(String s) {
+        return (s == null || s.trim().isEmpty());
+    }
+
+    /**
+     * @param context - application or activity context
+     * @return {@code true} successfully initialized
+     */
+    public static boolean initSdk(@NonNull Context context) {
+        if (sIsInitialized) {
+            return true;
+        }
+
+        synchronized (MillennialUtils.class) {
+            if (sIsInitialized) {
+                return true;
+            }
+            Preconditions.checkNotNull(context);
+
+            final Application application;
+            if (context instanceof Application) {
+                application = (Application) context;
+            } else {
+                application = (Application) context.getApplicationContext();
+            }
+
+            try {
+                MMSDK.initialize(application);
+            } catch (MMException e) {
+                Log.e(LOG_TAG, "Exception occurred initializing the MM SDK.", e);
+                return false;
+            }
+
+            sIsInitialized = true;
+        }
+        return true;
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/TapjoyInterstitial.java b/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
index 029592dc..9a87ee6a 100644
--- a/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
+++ b/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
@@ -1,3 +1,11 @@
+// Copyright (C) 2015 by Tapjoy Inc.
+//
+// This file is part of the Tapjoy SDK.
+//
+// By using the Tapjoy SDK in your software, you agree to the terms of the Tapjoy SDK License Agreement.
+//
+// The Tapjoy SDK is bound by the Tapjoy SDK License Agreement and can be found here: https://www.tapjoy.com/sdk/license
+
 package com.mopub.mobileads;
 
 import android.content.Context;
@@ -7,18 +15,25 @@
 
 import com.mopub.common.logging.MoPubLog;
 import com.tapjoy.TJActionRequest;
+import com.tapjoy.TJConnectListener;
 import com.tapjoy.TJError;
 import com.tapjoy.TJPlacement;
 import com.tapjoy.TJPlacementListener;
+import com.tapjoy.Tapjoy;
 import com.tapjoy.TapjoyLog;
 
 import java.util.Map;
 
-// Tested with Tapjoy SDK 11.5.1
+// Tested with Tapjoy SDK 11.11.0
 public class TapjoyInterstitial extends CustomEventInterstitial implements TJPlacementListener {
     private static final String TAG = TapjoyInterstitial.class.getSimpleName();
     private static final String TJC_MOPUB_NETWORK_CONSTANT = "mopub";
-    private static final String TJC_MOPUB_ADAPTER_VERSION_NUMBER = "4.0.0";
+    private static final String TJC_MOPUB_ADAPTER_VERSION_NUMBER = "4.1.0";
+
+    // Configuration keys
+    public static final String SDK_KEY = "sdkKey";
+    public static final String DEBUG_ENABLED = "debugEnabled";
+    public static final String PLACEMENT_NAME = "name";
 
     private TJPlacement tjPlacement;
     private CustomEventInterstitialListener mInterstitialListener;
@@ -29,7 +44,7 @@
     }
 
     @Override
-    protected void loadInterstitial(Context context,
+    protected void loadInterstitial(final Context context,
             CustomEventInterstitialListener customEventInterstitialListener,
             Map<String, Object> localExtras,
             Map<String, String> serverExtras) {
@@ -38,11 +53,48 @@ protected void loadInterstitial(Context context,
         mInterstitialListener = customEventInterstitialListener;
         mHandler = new Handler(Looper.getMainLooper());
 
-        String name = serverExtras.get("name");
-        if (TextUtils.isEmpty(name)) {
+        final String placementName = serverExtras.get(PLACEMENT_NAME);
+        if (TextUtils.isEmpty(placementName)) {
             MoPubLog.d("Tapjoy interstitial loaded with empty 'name' field. Request will fail.");
         }
-        tjPlacement = new TJPlacement(context, name, this);
+
+        boolean canRequestPlacement = true;
+        if (!Tapjoy.isConnected()) {
+            // Check if configuration data is available
+            boolean enableDebug = Boolean.valueOf(serverExtras.get(DEBUG_ENABLED));
+            Tapjoy.setDebugEnabled(enableDebug);
+
+            String sdkKey = serverExtras.get(SDK_KEY);
+            if (!TextUtils.isEmpty(sdkKey)) {
+                MoPubLog.d("Connecting to Tapjoy via MoPub dashboard settings...");
+                Tapjoy.connect(context, sdkKey, null, new TJConnectListener() {
+                    @Override
+                    public void onConnectSuccess() {
+                        MoPubLog.d("Tapjoy connected successfully");
+                        createPlacement(context, placementName);
+                    }
+
+                    @Override
+                    public void onConnectFailure() {
+                        MoPubLog.d("Tapjoy connect failed");
+                    }
+                });
+
+                // If sdkKey is present via MoPub dashboard, we only want to request placement
+                // after auto-connect succeeds
+                canRequestPlacement = false;
+            } else {
+                MoPubLog.d("Tapjoy interstitial is initialized with empty 'sdkKey'. You must call Tapjoy.connect()");
+            }
+        }
+
+        if (canRequestPlacement) {
+            createPlacement(context, placementName);
+        }
+    }
+
+    private void createPlacement(Context context, String placementName) {
+        tjPlacement = new TJPlacement(context, placementName, this);
         tjPlacement.setMediationName(TJC_MOPUB_NETWORK_CONSTANT);
         tjPlacement.setAdapterVersion(TJC_MOPUB_ADAPTER_VERSION_NUMBER);
         tjPlacement.requestContent();
diff --git a/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java b/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
index d0f81000..8613c441 100644
--- a/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
@@ -21,16 +21,23 @@
 import java.util.Hashtable;
 import java.util.Map;
 
-// Tested with Tapjoy SDK 11.5.1
+// Tested with Tapjoy SDK 11.11.0
 public class TapjoyRewardedVideo extends CustomEventRewardedVideo {
     private static final String TAG = TapjoyRewardedVideo.class.getSimpleName();
     private static final String TJC_MOPUB_NETWORK_CONSTANT = "mopub";
-    private static final String TJC_MOPUB_ADAPTER_VERSION_NUMBER = "4.0.0";
+    private static final String TJC_MOPUB_ADAPTER_VERSION_NUMBER = "4.1.0";
     private static final String TAPJOY_AD_NETWORK_CONSTANT = "tapjoy_id";
 
+    // Configuration keys
+    public static final String SDK_KEY = "sdkKey";
+    public static final String DEBUG_ENABLED = "debugEnabled";
+    public static final String PLACEMENT_NAME = "name";
+
     private String sdkKey;
+    private String placementName;
     private Hashtable<String, Object> connectFlags;
     private TJPlacement tjPlacement;
+    private boolean isAutoConnect = false;
     private static TapjoyRewardedVideoListener sTapjoyListener = new TapjoyRewardedVideoListener();
 
     static {
@@ -62,25 +69,33 @@ protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
             @NonNull Map<String, String> serverExtras)
             throws Exception {
 
+        placementName = serverExtras.get(PLACEMENT_NAME);
+        if (TextUtils.isEmpty(placementName)) {
+            MoPubLog.d("Tapjoy rewarded video loaded with empty 'name' field. Request will fail.");
+        }
+
         if (!Tapjoy.isConnected()) {
             if (checkAndInitMediationSettings()) {
-                MoPubLog.d("Request to connect to Tapjoy");
-
-                Tapjoy.connect(launcherActivity, sdkKey, connectFlags, new TJConnectListener() {
-                    @Override
-                    public void onConnectSuccess() {
-                        MoPubLog.d("Tapjoy connected successfully");
-                    }
-
-                    @Override
-                    public void onConnectFailure() {
-                        MoPubLog.e("Tapjoy connect failed");
-                    }
-                });
+                MoPubLog.d("Connecting to Tapjoy via MoPub mediation settings...");
+                connectToTapjoy(launcherActivity);
 
+                isAutoConnect = true;
                 return true;
             } else {
-                MoPubLog.d("Cannot connect to Tapjoy -- missing 'sdkkey' declaration via TapjoyMediationSettings");
+                boolean enableDebug = Boolean.valueOf(serverExtras.get(DEBUG_ENABLED));
+                Tapjoy.setDebugEnabled(enableDebug);
+
+                sdkKey = serverExtras.get(SDK_KEY);
+                if (!TextUtils.isEmpty(sdkKey)) {
+                    MoPubLog.d("Connecting to Tapjoy via MoPub dashboard settings...");
+                    connectToTapjoy(launcherActivity);
+
+                    isAutoConnect = true;
+                    return true;
+                } else {
+                    MoPubLog.d("Tapjoy rewarded video is initialized with empty 'sdkKey'. You must call Tapjoy.connect()");
+                    isAutoConnect = false;
+                }
             }
         }
 
@@ -93,15 +108,40 @@ protected void loadWithSdkInitialized(@NonNull Activity activity,
             @NonNull Map<String, String> serverExtras)
             throws Exception {
         MoPubLog.d("Requesting Tapjoy rewarded video");
+        createPlacement(activity);
+    }
+
+    private void connectToTapjoy(final Activity launcherActivity) {
+        Tapjoy.connect(launcherActivity, sdkKey, connectFlags, new TJConnectListener() {
+            @Override
+            public void onConnectSuccess() {
+                MoPubLog.d("Tapjoy connected successfully");
+                createPlacement(launcherActivity);
+            }
 
-        String name = serverExtras.get("name");
-        if (TextUtils.isEmpty(name)) {
-            MoPubLog.d("Tapjoy interstitial loaded with empty 'name' field. Request will fail.");
+            @Override
+            public void onConnectFailure() {
+                MoPubLog.d("Tapjoy connect failed");
+            }
+        });
+    }
+
+    private void createPlacement(Activity activity) {
+        if (!TextUtils.isEmpty(placementName)) {
+            if (isAutoConnect && !Tapjoy.isConnected()) {
+                // If adapter is making the Tapjoy.connect() call on behalf of the pub, wait for it to
+                // succeed before making a placement request.
+                MoPubLog.d("Tapjoy is still connecting. Please wait for this to finish before making a placement request");
+                return;
+            }
+
+            tjPlacement = new TJPlacement(activity, placementName, sTapjoyListener);
+            tjPlacement.setMediationName(TJC_MOPUB_NETWORK_CONSTANT);
+            tjPlacement.setAdapterVersion(TJC_MOPUB_ADAPTER_VERSION_NUMBER);
+            tjPlacement.requestContent();
+        } else {
+            MoPubLog.d("Tapjoy placementName is empty. Unable to create TJPlacement.");
         }
-        tjPlacement = new TJPlacement(activity, name, sTapjoyListener);
-        tjPlacement.setMediationName(TJC_MOPUB_NETWORK_CONSTANT);
-        tjPlacement.setAdapterVersion(TJC_MOPUB_ADAPTER_VERSION_NUMBER);
-        tjPlacement.requestContent();
     }
 
     @Override
@@ -117,19 +157,19 @@ protected void showVideo() {
         } else {
             MoPubLog.d("Failed to show Tapjoy rewarded video.");
         }
-
     }
 
     private boolean checkAndInitMediationSettings() {
-        MoPubLog.d("Initializing Tapjoy mediation settings");
-
         final TapjoyMediationSettings globalMediationSettings =
                 MoPubRewardedVideoManager.getGlobalMediationSettings(TapjoyMediationSettings.class);
 
         if (globalMediationSettings != null) {
+            MoPubLog.d("Initializing Tapjoy mediation settings");
+
             if (!TextUtils.isEmpty(globalMediationSettings.getSdkKey())) {
                 sdkKey = globalMediationSettings.getSdkKey();
             } else {
+                MoPubLog.d("Cannot initialize Tapjoy -- 'sdkkey' is empty");
                 return false;
             }
 
@@ -146,7 +186,7 @@ private boolean checkAndInitMediationSettings() {
     private static class TapjoyRewardedVideoListener implements TJPlacementListener, CustomEventRewardedVideoListener, TJVideoListener {
         @Override
         public void onRequestSuccess(TJPlacement placement) {
-            if (!placement.isContentAvailable()){
+            if (!placement.isContentAvailable()) {
                 MoPubLog.d("No Tapjoy rewarded videos available");
                 MoPubRewardedVideoManager.onRewardedVideoLoadFailure(TapjoyRewardedVideo.class, TAPJOY_AD_NETWORK_CONSTANT, MoPubErrorCode.NETWORK_NO_FILL);
             }
diff --git a/extras/src/com/mopub/mobileads/UnityInterstitial.java b/extras/src/com/mopub/mobileads/UnityInterstitial.java
new file mode 100644
index 00000000..37b31b27
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/UnityInterstitial.java
@@ -0,0 +1,112 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.mopub.common.logging.MoPubLog;
+import com.unity3d.ads.mediation.IUnityAdsExtendedListener;
+import com.unity3d.ads.UnityAds;
+
+import java.util.Map;
+
+/**
+ * Certified with Unity Ads 2.1.1
+ */
+public class UnityInterstitial extends CustomEventInterstitial implements IUnityAdsExtendedListener {
+
+    private CustomEventInterstitialListener mCustomEventInterstitialListener;
+    private Context mContext;
+    private String mPlacementId = "video";
+    private boolean loadRequested = false;
+
+    @Override
+    protected void loadInterstitial(Context context,
+            CustomEventInterstitialListener customEventInterstitialListener,
+            Map<String, Object> localExtras,
+            Map<String, String> serverExtras) {
+
+        mPlacementId = UnityRouter.placementIdForServerExtras(serverExtras, mPlacementId);
+        mCustomEventInterstitialListener = customEventInterstitialListener;
+        mContext = context;
+        loadRequested = true;
+
+        try {
+            UnityRouter.addListener(mPlacementId, this);
+            initializeUnityAdsSdk(serverExtras);
+            if (UnityAds.isReady()) {
+                mCustomEventInterstitialListener.onInterstitialLoaded();
+                loadRequested = false;
+            }
+        } catch (UnityRouter.UnityAdsException e) {
+            mCustomEventInterstitialListener.onInterstitialFailed(UnityRouter.UnityAdsUtils.getMoPubErrorCode(e.getErrorCode()));
+        }
+    }
+
+    private void initializeUnityAdsSdk(Map<String, String> serverExtras) {
+        if (!UnityAds.isInitialized()) {
+            if (!(mContext instanceof Activity)) {
+                throw new UnityRouter.UnityAdsException(UnityAds.UnityAdsError.INVALID_ARGUMENT, "Context is null or is not an instanceof Activity.");
+            }
+            UnityRouter.initUnityAds(serverExtras, (Activity) mContext);
+        }
+    }
+
+
+    @Override
+    protected void showInterstitial() {
+        if (UnityAds.isReady(mPlacementId) && mContext != null) {
+            UnityAds.show((Activity) mContext, mPlacementId);
+        } else {
+            MoPubLog.d("Attempted to show Unity interstitial video before it was available.");
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        UnityRouter.removeListener(mPlacementId);
+    }
+
+    @Override
+    public void onUnityAdsReady(String placementId) {
+        if (loadRequested) {
+            mCustomEventInterstitialListener.onInterstitialLoaded();
+            loadRequested = false;
+        }
+    }
+
+    @Override
+    public void onUnityAdsStart(String placementId) {
+        mCustomEventInterstitialListener.onInterstitialShown();
+    }
+
+    @Override
+    public void onUnityAdsFinish(String placementId, UnityAds.FinishState finishState) {
+        if (finishState == UnityAds.FinishState.ERROR) {
+            MoPubLog.d("Unity interstitial video encountered a playback error for placement " + placementId);
+            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.VIDEO_PLAYBACK_ERROR);
+        } else {
+            MoPubLog.d("Unity interstitial video completed for placement " + placementId);
+            mCustomEventInterstitialListener.onInterstitialDismissed();
+        }
+
+        UnityRouter.removeListener(placementId);
+    }
+
+    @Override
+    public void onUnityAdsClick(String placementId) {
+        mCustomEventInterstitialListener.onInterstitialClicked();
+    }
+
+
+    // @Override
+    public void onUnityAdsPlacementStateChanged(String placementId, UnityAds.PlacementState oldState, UnityAds.PlacementState newState) {
+
+    }
+
+    @Override
+    public void onUnityAdsError(UnityAds.UnityAdsError unityAdsError, String message) {
+        MoPubLog.d("Unity interstitial video cache failed for placement " + mPlacementId + ".");
+        MoPubErrorCode errorCode = UnityRouter.UnityAdsUtils.getMoPubErrorCode(unityAdsError);
+        mCustomEventInterstitialListener.onInterstitialFailed(errorCode);
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/UnityRewardedVideo.java b/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
index f4fe4bcc..24636be9 100644
--- a/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
@@ -3,38 +3,30 @@
 import android.app.Activity;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.text.TextUtils;
 
 import com.mopub.common.BaseLifecycleListener;
-import com.mopub.common.DataKeys;
 import com.mopub.common.LifecycleListener;
-import com.mopub.common.MediationSettings;
 import com.mopub.common.MoPubReward;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
-import com.unity3d.ads.android.IUnityAdsListener;
-import com.unity3d.ads.android.UnityAds;
+import com.unity3d.ads.mediation.IUnityAdsExtendedListener;
+import com.unity3d.ads.UnityAds;
 
-import java.util.Collections;
-import java.util.HashMap;
 import java.util.Map;
 
 /**
  * A custom event for showing Unity rewarded videos.
  *
- * Certified with Unity 1.4.7
+ * Certified with Unity Ads 2.1.1
  */
 public class UnityRewardedVideo extends CustomEventRewardedVideo {
-    private static final String DEFAULT_ZONE_ID = "";
     private static final String GAME_ID_KEY = "gameId";
-    private static final String ZONE_ID_KEY = "zoneId";
     private static final LifecycleListener sLifecycleListener = new UnityLifecycleListener();
     private static final UnityAdsListener sUnityAdsListener = new UnityAdsListener();
+    private static String sPlacementId = "";
 
-    private static boolean sInitialized = false;
-    @NonNull private static String sZoneId = DEFAULT_ZONE_ID;
-
-    @Nullable private UnityMediationSettings mMediationSettings;
+    @Nullable
+    private Activity mLauncherActivity;
 
     @Override
     @NonNull
@@ -51,63 +43,53 @@ public LifecycleListener getLifecycleListener() {
     @Override
     @NonNull
     public String getAdNetworkId() {
-        return sZoneId;
+        return sPlacementId;
     }
 
     @Override
     public boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
             @NonNull final Map<String, Object> localExtras,
             @NonNull final Map<String, String> serverExtras) throws Exception {
-        if (sInitialized) {
-            return false;
-        }
-
-        String gameId;
-        if (serverExtras.containsKey(GAME_ID_KEY)) {
-            gameId = serverExtras.get(GAME_ID_KEY);
-            if (TextUtils.isEmpty(gameId)) {
-                throw new IllegalStateException("Unity rewarded video initialization failed due " +
-                        "to empty " + GAME_ID_KEY);
+        synchronized (UnityRewardedVideo.class) {
+            if (UnityAds.isInitialized()) {
+                return false;
             }
-        } else {
-            throw new IllegalStateException("Unity rewarded video initialization failed due to " +
-                    "missing " + GAME_ID_KEY);
-        }
 
-        UnityAds.init(launcherActivity, gameId, sUnityAdsListener);
-        sInitialized = true;
+            try {
+                UnityRouter.initUnityAds(serverExtras, launcherActivity);
+                UnityRouter.addListener(sPlacementId, sUnityAdsListener);
+            } catch (UnityRouter.UnityAdsException e) {
+                MoPubLog.e("Failed to initialize Unity Ads.", e);
+                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(UnityRewardedVideo.class, sPlacementId, UnityRouter.UnityAdsUtils.getMoPubErrorCode(e.getErrorCode()));
+            }
 
-        return true;
+            return true;
+        }
     }
 
     @Override
     protected void loadWithSdkInitialized(@NonNull Activity activity,
-            @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras)
-            throws Exception {
+            @NonNull Map<String, Object> localExtras,
+            @NonNull Map<String, String> serverExtras) throws Exception {
 
-        if (serverExtras.containsKey(ZONE_ID_KEY)) {
-            String zoneId = serverExtras.get(ZONE_ID_KEY);
-            sZoneId = TextUtils.isEmpty(zoneId) ? sZoneId : zoneId;
-        }
+        sPlacementId = UnityRouter.placementIdForServerExtras(serverExtras, sPlacementId);
+        mLauncherActivity = activity;
 
-        try {
-            setUpMediationSettingsForRequest((String) localExtras.get(DataKeys.AD_UNIT_ID_KEY));
-        } catch (ClassCastException e) {
-            MoPubLog.e("Failed to set up Unity mediation settings due to invalid ad unit id", e);
+        UnityRouter.addListener(sPlacementId, sUnityAdsListener);
+        if (UnityAds.isReady()) {
+            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(UnityRewardedVideo.class, sPlacementId);
         }
-
-        loadRewardedVideo();
     }
 
     @Override
     public boolean hasVideoAvailable() {
-        return UnityAds.canShow();
+        return UnityAds.isReady(sPlacementId);
     }
 
     @Override
     public void showVideo() {
         if (hasVideoAvailable()) {
-            UnityAds.show(getUnityProperties());
+            UnityAds.show(mLauncherActivity, sPlacementId);
         } else {
             MoPubLog.d("Attempted to show Unity rewarded video before it was available.");
         }
@@ -115,123 +97,81 @@ public void showVideo() {
 
     @Override
     protected void onInvalidate() {
-        UnityAds.setListener(null);
-    }
-
-
-    private void setUpMediationSettingsForRequest(@Nullable final String moPubId) {
-        mMediationSettings =
-                MoPubRewardedVideoManager.getGlobalMediationSettings(UnityMediationSettings.class);
-
-        // Instance settings override global settings.
-        if (moPubId != null) {
-            final UnityMediationSettings instanceSettings = MoPubRewardedVideoManager
-                    .getInstanceMediationSettings(UnityMediationSettings.class, moPubId);
-            if (instanceSettings != null) {
-                mMediationSettings = instanceSettings;
-            }
-        }
-
+        UnityRouter.removeListener(sPlacementId);
     }
 
     private static final class UnityLifecycleListener extends BaseLifecycleListener {
         @Override
         public void onCreate(@NonNull final Activity activity) {
             super.onCreate(activity);
-            UnityAds.changeActivity(activity);
         }
 
         @Override
         public void onResume(@NonNull final Activity activity) {
             super.onResume(activity);
-            UnityAds.changeActivity(activity);
         }
 
     }
 
-    @NonNull
-    private Map<String, Object> getUnityProperties() {
-        if (mMediationSettings == null) {
-            return Collections.emptyMap();
-        }
-        return mMediationSettings.getPropertiesMap();
-    }
-
-
-    private static class UnityAdsListener implements IUnityAdsListener,
+    private static class UnityAdsListener implements IUnityAdsExtendedListener,
             CustomEventRewardedVideoListener {
         @Override
-        public void onFetchCompleted() {
-            MoPubLog.d("Unity rewarded video cached for zone " + UnityAds.getZone() + ".");
-            loadRewardedVideo();
-        }
-
-        @Override
-        public void onFetchFailed() {
-            MoPubLog.d("Unity rewarded video cache failed for zone " + UnityAds.getZone() + ".");
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(UnityRewardedVideo.class,
-                    UnityAds.getZone(), MoPubErrorCode.NETWORK_NO_FILL);
-        }
-
-        @Override
-        public void onShow() {
-            MoPubLog.d("Unity rewarded video displayed for zone " + UnityAds.getZone() + ".");
-        }
-
-        @Override
-        public void onHide() {
-            MoPubRewardedVideoManager.onRewardedVideoClosed(UnityRewardedVideo.class, UnityAds.getZone());
-            MoPubLog.d("Unity rewarded video dismissed for zone " + UnityAds.getZone() + ".");
+        public void onUnityAdsReady(String placementId) {
+            if (placementId.equals(sPlacementId)) {
+                MoPubLog.d("Unity rewarded video cached for placement " + placementId + ".");
+                MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(UnityRewardedVideo.class, placementId);
+            }
         }
 
         @Override
-        public void onVideoStarted() {
-            MoPubRewardedVideoManager.onRewardedVideoStarted(UnityRewardedVideo.class, UnityAds.getZone());
-            MoPubLog.d("Unity rewarded video started for zone " + UnityAds.getZone() + ".");
+        public void onUnityAdsStart(String placementId) {
+            MoPubRewardedVideoManager.onRewardedVideoStarted(UnityRewardedVideo.class, placementId);
+            MoPubLog.d("Unity rewarded video started for placement " + placementId + ".");
         }
 
         @Override
-        public void onVideoCompleted(final String itemKey, final boolean skipped) {
-            if (!skipped) {
-                MoPubRewardedVideoManager.onRewardedVideoCompleted(
+        public void onUnityAdsFinish(String placementId, UnityAds.FinishState finishState) {
+            MoPubLog.d("Unity Ad finished with finish state = " + finishState);
+            if (finishState == UnityAds.FinishState.ERROR) {
+                MoPubRewardedVideoManager.onRewardedVideoPlaybackError(
                         UnityRewardedVideo.class,
-                        UnityAds.getZone(),
-                        MoPubReward.success(itemKey, MoPubReward.NO_REWARD_AMOUNT));
-                MoPubLog.d("Unity rewarded video completed for zone " + UnityAds.getZone()
-                        + " with reward item key " + itemKey);
-            } else {
+                        sPlacementId,
+                        MoPubErrorCode.VIDEO_PLAYBACK_ERROR);
+                MoPubLog.d("Unity rewarded video encountered a playback error for placement " + placementId);
+            } else if (finishState == UnityAds.FinishState.COMPLETED) {
                 MoPubRewardedVideoManager.onRewardedVideoCompleted(
                         UnityRewardedVideo.class,
-                        UnityAds.getZone(),
-                        MoPubReward.failure());
-                MoPubLog.d("Unity rewarded video skipped for zone " + UnityAds.getZone() + " with "
-                        + "reward item key " + itemKey);
+                        sPlacementId,
+                        MoPubReward.success(MoPubReward.NO_REWARD_LABEL, MoPubReward.NO_REWARD_AMOUNT));
+                MoPubLog.d("Unity rewarded video completed for placement " + placementId);
+            } else if (finishState == UnityAds.FinishState.SKIPPED) {
+                MoPubLog.d("Unity ad was skipped, no reward will be given.");
             }
+            MoPubRewardedVideoManager.onRewardedVideoClosed(UnityRewardedVideo.class, sPlacementId);
+            UnityRouter.removeListener(placementId);
         }
-    }
 
-    private static void loadRewardedVideo() {
-        UnityAds.setZone(sZoneId);
-        MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(UnityRewardedVideo.class, UnityAds.getZone());
-    }
+        @Override
+        public void onUnityAdsClick(String placementId) {
+            MoPubRewardedVideoManager.onRewardedVideoClicked(UnityRewardedVideo.class, placementId);
+            MoPubLog.d("Unity rewarded video clicked for placement " + placementId + ".");
+        }
 
-    public static final class UnityMediationSettings implements MediationSettings {
-        @NonNull private final HashMap<String, Object> mProperties;
+        // @Override
+        public void onUnityAdsPlacementStateChanged(String placementId, UnityAds.PlacementState oldState, UnityAds.PlacementState newState) {
 
-        public UnityMediationSettings(@NonNull final String gamerId) {
-            mProperties = new HashMap<String, Object>();
-            mProperties.put(UnityAds.UNITY_ADS_OPTION_GAMERSID_KEY, gamerId);
         }
 
-        @NonNull
-        public Map<String, Object> getPropertiesMap() {
-            return mProperties;
+        @Override
+        public void onUnityAdsError(UnityAds.UnityAdsError unityAdsError, String message) {
+            MoPubLog.d("Unity rewarded video cache failed for placement " + sPlacementId + ".");
+            MoPubErrorCode errorCode = UnityRouter.UnityAdsUtils.getMoPubErrorCode(unityAdsError);
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(UnityRewardedVideo.class, sPlacementId, errorCode);
         }
     }
 
     @VisibleForTesting
     void reset() {
-        sInitialized = false;
-        sZoneId = DEFAULT_ZONE_ID;
+        sPlacementId = "";
     }
 }
diff --git a/extras/src/com/mopub/mobileads/UnityRouter.java b/extras/src/com/mopub/mobileads/UnityRouter.java
new file mode 100644
index 00000000..a7358947
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/UnityRouter.java
@@ -0,0 +1,147 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.text.TextUtils;
+
+import com.mopub.common.MoPub;
+import com.unity3d.ads.UnityAds;
+import com.unity3d.ads.mediation.IUnityAdsExtendedListener;
+import com.unity3d.ads.metadata.MediationMetaData;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Certified with Unity Ads 2.1.1
+ */
+public class UnityRouter {
+    private static String sCurrentPlacementId;
+    private static final String GAME_ID_KEY = "gameId";
+    private static final String ZONE_ID_KEY = "zoneId";
+    private static final String PLACEMENT_ID_KEY = "placementId";
+    private static final UnityAdsListener sUnityAdsListener = new UnityAdsListener();
+    private static Map<String, IUnityAdsExtendedListener> mUnityAdsListeners = new HashMap<>();
+
+    static boolean initUnityAds(Map<String, String> serverExtras, Activity launcherActivity) {
+        String gameId = serverExtras.get(GAME_ID_KEY);
+        if (gameId == null || gameId.isEmpty()) {
+            throw new UnityAdsException(UnityAds.UnityAdsError.INVALID_ARGUMENT, "Sever extras is missing \"%s\" or is empty.", GAME_ID_KEY);
+        }
+
+        MediationMetaData mediationMetaData = new MediationMetaData(launcherActivity);
+        mediationMetaData.setName("MoPub");
+        mediationMetaData.setVersion(MoPub.SDK_VERSION);
+        mediationMetaData.commit();
+
+        UnityAds.initialize(launcherActivity, gameId, sUnityAdsListener);
+        return true;
+    }
+
+    static String placementIdForServerExtras(Map<String, String> serverExtras, String defaultPlacementId) {
+        String placementId = null;
+        if (serverExtras.containsKey(PLACEMENT_ID_KEY)) {
+            placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        } else if (serverExtras.containsKey(ZONE_ID_KEY)) {
+            placementId = serverExtras.get(ZONE_ID_KEY);
+        }
+        return TextUtils.isEmpty(placementId) ? defaultPlacementId : placementId;
+    }
+
+    static void showAd(Activity activity, String placementId) {
+        sCurrentPlacementId = placementId;
+        UnityAds.show(activity, placementId);
+    }
+
+    static void addListener(String placementId, IUnityAdsExtendedListener unityListener) {
+        mUnityAdsListeners.put(placementId, unityListener);
+    }
+
+    static void removeListener(String placementId) {
+        mUnityAdsListeners.remove(placementId);
+    }
+
+    private static class UnityAdsListener implements IUnityAdsExtendedListener {
+        @Override
+        public void onUnityAdsReady(String placementId) {
+            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(placementId);
+            if (listener != null) {
+                listener.onUnityAdsReady(placementId);
+            }
+        }
+
+        @Override
+        public void onUnityAdsStart(String placementId) {
+            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(placementId);
+            if (listener != null) {
+                listener.onUnityAdsStart(placementId);
+            }
+        }
+
+        @Override
+        public void onUnityAdsFinish(String placementId, UnityAds.FinishState finishState) {
+            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(placementId);
+            if (listener != null) {
+                listener.onUnityAdsFinish(placementId, finishState);
+            }
+        }
+
+        @Override
+        public void onUnityAdsClick(String placementId) {
+            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(placementId);
+            if (listener != null) {
+                listener.onUnityAdsClick(placementId);
+            }
+        }
+
+        // @Override
+        public void onUnityAdsPlacementStateChanged(String placementId, UnityAds.PlacementState oldState, UnityAds.PlacementState newState) {
+
+        }
+
+        @Override
+        public void onUnityAdsError(UnityAds.UnityAdsError unityAdsError, String message) {
+            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(sCurrentPlacementId);
+            if (listener != null) {
+                listener.onUnityAdsError(unityAdsError, message);
+            }
+        }
+    }
+
+    static final class UnityAdsUtils {
+        static MoPubErrorCode getMoPubErrorCode(UnityAds.UnityAdsError unityAdsError) {
+            MoPubErrorCode errorCode;
+            switch (unityAdsError) {
+                case VIDEO_PLAYER_ERROR:
+                    errorCode = MoPubErrorCode.VIDEO_PLAYBACK_ERROR;
+                    break;
+                case INVALID_ARGUMENT:
+                    errorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+                    break;
+                case INTERNAL_ERROR:
+                    errorCode = MoPubErrorCode.NETWORK_INVALID_STATE;
+                    break;
+                default:
+                    errorCode = MoPubErrorCode.NETWORK_NO_FILL;
+                    break;
+            }
+            return errorCode;
+        }
+    }
+
+    static class UnityAdsException extends RuntimeException {
+        private final UnityAds.UnityAdsError errorCode;
+
+        public UnityAdsException(UnityAds.UnityAdsError errorCode, String detailFormat, Object... args) {
+            this(errorCode, String.format(detailFormat, args));
+        }
+
+        public UnityAdsException(UnityAds.UnityAdsError errorCode, String detailMessage) {
+            super(detailMessage);
+            this.errorCode = errorCode;
+        }
+
+        public UnityAds.UnityAdsError getErrorCode() {
+            return errorCode;
+        }
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/VungleInterstitial.java b/extras/src/com/mopub/mobileads/VungleInterstitial.java
index 09a39731..ba140085 100644
--- a/extras/src/com/mopub/mobileads/VungleInterstitial.java
+++ b/extras/src/com/mopub/mobileads/VungleInterstitial.java
@@ -3,36 +3,41 @@
 import android.content.Context;
 import android.os.Handler;
 import android.os.Looper;
-import android.util.Log;
+import android.support.annotation.NonNull;
 
-import com.vungle.publisher.EventListener;
-import com.vungle.publisher.VunglePub;
+import com.mopub.common.logging.MoPubLog;
 
 import java.util.Map;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
 
-/*
- * Tested with Vungle SDK 3.3.0
+/**
+ * A custom event for showing Vungle Interstitial.
+ * <p>
+ * Certified with Vungle SDK 5.3.0
  */
-public class VungleInterstitial extends CustomEventInterstitial implements EventListener {
+public class VungleInterstitial extends CustomEventInterstitial {
 
-    private static final String DEFAULT_VUNGLE_APP_ID = "YOUR_DEFAULT_VUNGLE_APP_ID";
+    private static final String INTERSTITIAL_TAG = "Vungle Interstitial: ";
 
     /*
      * APP_ID_KEY is intended for MoPub internal use. Do not modify.
      */
     public static final String APP_ID_KEY = "appId";
+    public static final String PLACEMENT_ID_KEY = "pid";
+    public static final String PLACEMENT_IDS_KEY = "pids";
 
-    private final VunglePub mVunglePub;
+    private static VungleRouter sVungleRouter;
     private final Handler mHandler;
     private CustomEventInterstitialListener mCustomEventInterstitialListener;
-    private boolean mIsLoading;
+    private VungleInterstitialRouterListener mVungleRouterListener;
+    private String mAppId;
+    private String mPlacementId;
+    private String[] mPlacementIds;
+    private boolean mIsPlaying;
+
 
     public VungleInterstitial() {
         mHandler = new Handler(Looper.getMainLooper());
-        mVunglePub = VunglePub.getInstance();
-        mIsLoading = false;
+        sVungleRouter = VungleRouter.getInstance();
     }
 
     @Override
@@ -41,107 +46,192 @@ protected void loadInterstitial(Context context,
             Map<String, Object> localExtras,
             Map<String, String> serverExtras) {
         mCustomEventInterstitialListener = customEventInterstitialListener;
+        mIsPlaying = false;
 
         if (context == null) {
-            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+            mHandler.post(new Runnable() {
+                @Override
+                public void run() {
+                    mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+                }
+            });
+
             return;
         }
 
-        /*
-         * You may pass the Vungle App Id in the serverExtras Map by specifying Custom Event Data
-         * in MoPub's web interface.
-         */
-        final String appId;
-        if (extrasAreValid(serverExtras)) {
-            appId = serverExtras.get(APP_ID_KEY);
-        } else {
-            appId = DEFAULT_VUNGLE_APP_ID;
+        if (!validateIdsInServerExtras(serverExtras)) {
+            mHandler.post(new Runnable() {
+                @Override
+                public void run() {
+                    mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+                }
+            });
+
+            return;
         }
 
-        // init clears the event listener.
-        mVunglePub.init(context, appId);
-        mVunglePub.setEventListeners(this);
-        if (mVunglePub.isAdPlayable()) {
-            notifyAdAvailable();
-        } else {
-            mIsLoading = true;
+        if (mVungleRouterListener == null) {
+            mVungleRouterListener = new VungleInterstitialRouterListener();
+        }
+
+        if (!sVungleRouter.isVungleInitialized()) {
+            sVungleRouter.initVungle(context, mAppId, mPlacementIds);
         }
+
+        sVungleRouter.loadAdForPlacement(mPlacementId, mVungleRouterListener);
     }
 
     @Override
     protected void showInterstitial() {
-        if (mVunglePub.isAdPlayable()) {
-            mVunglePub.playAd();
+        if (sVungleRouter.isAdPlayableForPlacement(mPlacementId)) {
+            sVungleRouter.playAdForPlacement(mPlacementId, null);
+            mIsPlaying = true;
         } else {
-            Log.d("MoPub", "Tried to show a Vungle interstitial ad before it finished loading. Please try again.");
+            MoPubLog.d(INTERSTITIAL_TAG + "SDK tried to show a Vungle interstitial ad before it finished loading. Please try again.");
+            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
         }
     }
 
     @Override
     protected void onInvalidate() {
-        mVunglePub.clearEventListeners();
-        mIsLoading = false;
+        MoPubLog.d(INTERSTITIAL_TAG + "onInvalidate is called for Placement ID:" + mPlacementId);
+        sVungleRouter.removeRouterListener(mPlacementId);
+        mVungleRouterListener = null;
     }
 
-    private boolean extrasAreValid(Map<String, String> serverExtras) {
-        return serverExtras.containsKey(APP_ID_KEY);
-    }
+    // private functions
+    private boolean validateIdsInServerExtras(Map<String, String> serverExtras) {
+        boolean isAllDataValid = true;
 
-    private void notifyAdAvailable() {
-        Log.d("MoPub", "Vungle interstitial ad successfully loaded.");
-        mIsLoading = false;
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                mCustomEventInterstitialListener.onInterstitialLoaded();
+        if (serverExtras.containsKey(APP_ID_KEY)) {
+            mAppId = serverExtras.get(APP_ID_KEY);
+            if (mAppId.isEmpty()) {
+                MoPubLog.w(INTERSTITIAL_TAG + "App ID is empty.");
+                isAllDataValid = false;
             }
-        });
+        } else {
+            MoPubLog.w(INTERSTITIAL_TAG + "AppID is not in serverExtras.");
+            isAllDataValid = false;
+        }
+
+        if (serverExtras.containsKey(PLACEMENT_ID_KEY)) {
+            mPlacementId = serverExtras.get(PLACEMENT_ID_KEY);
+            if (mPlacementId.isEmpty()) {
+                MoPubLog.w(INTERSTITIAL_TAG + "Placement ID for this Ad Unit is empty.");
+                isAllDataValid = false;
+            }
+        } else {
+            MoPubLog.w(INTERSTITIAL_TAG + "Placement ID for this Ad Unit is not in serverExtras.");
+            isAllDataValid = false;
+        }
+
+        if (serverExtras.containsKey(PLACEMENT_IDS_KEY)) {
+            mPlacementIds = serverExtras.get(PLACEMENT_IDS_KEY).replace(" ", "").split(",", 0);
+            if (mPlacementIds.length == 0) {
+                MoPubLog.w(INTERSTITIAL_TAG + "Placement IDs are empty.");
+                isAllDataValid = false;
+            }
+        } else {
+            MoPubLog.w(INTERSTITIAL_TAG + "Placement IDs for this Ad Unit is not in serverExtras.");
+            isAllDataValid = false;
+        }
+
+        if (isAllDataValid) {
+            boolean foundInList = false;
+            for (String pid : mPlacementIds) {
+                if (pid.equals(mPlacementId)) {
+                    foundInList = true;
+                }
+            }
+            if (!foundInList) {
+                MoPubLog.w(INTERSTITIAL_TAG + "Placement IDs for this Ad Unit is not in the array of Placement IDs");
+                isAllDataValid = false;
+            }
+        }
+
+        return isAllDataValid;
     }
 
+
     /*
-     * EventListener implementation
+     * VungleRouterListener
      */
+    private class VungleInterstitialRouterListener implements VungleRouterListener {
+        @Override
+        public void onAdEnd(@NonNull String placementReferenceId, final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(INTERSTITIAL_TAG + "onAdEnd - Placement ID: " + placementReferenceId + ", wasSuccessfulView: " + wasSuccessfulView + ", wasCallToActionClicked: " + wasCallToActionClicked);
+                mIsPlaying = false;
+
+                mHandler.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (wasCallToActionClicked) {
+                            mCustomEventInterstitialListener.onInterstitialClicked();
+                        }
+                        mCustomEventInterstitialListener.onInterstitialDismissed();
+                    }
+                });
+
+                sVungleRouter.removeRouterListener(mPlacementId);
+            }
+        }
 
-    @Override
-    public void onVideoView(final boolean isCompletedView, final int watchedMillis, final int videoDurationMillis) {
-        final double watchedPercent = (double) watchedMillis / videoDurationMillis * 100;
-        Log.d("MoPub", String.format("%.1f%% of Vungle video watched.", watchedPercent));
-    }
+        @Override
+        public void onAdStart(@NonNull String placementReferenceId) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(INTERSTITIAL_TAG + "onAdStart - Placement ID: " + placementReferenceId);
+                mIsPlaying = true;
+
+                mHandler.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        mCustomEventInterstitialListener.onInterstitialShown();
+                    }
+                });
+            }
+        }
 
-    @Override
-    public void onAdStart() {
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                Log.d("MoPub", "Showing Vungle interstitial ad.");
-                mCustomEventInterstitialListener.onInterstitialShown();
+        @Override
+        public void onUnableToPlayAd(@NonNull String placementReferenceId, String reason) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(INTERSTITIAL_TAG + "onUnableToPlayAd - Placement ID: " + placementReferenceId + ", reason: " + reason);
+                mIsPlaying = false;
+
+                mHandler.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+                    }
+                });
             }
-        });
-    }
+        }
 
-    @Override
-    public void onAdEnd(final boolean wasCallToActionClicked) {
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                Log.d("MoPub", "Vungle interstitial ad dismissed.");
-                mCustomEventInterstitialListener.onInterstitialDismissed();
-                if (wasCallToActionClicked) {
-                    mCustomEventInterstitialListener.onInterstitialClicked();
+        @Override
+        public void onAdAvailabilityUpdate(@NonNull String placementReferenceId, boolean isAdAvailable) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                if (!mIsPlaying) {
+                    if (isAdAvailable) {
+                        MoPubLog.d(INTERSTITIAL_TAG + "interstitial ad successfully loaded - Placement ID: " + placementReferenceId);
+
+                        mHandler.post(new Runnable() {
+                            @Override
+                            public void run() {
+                                mCustomEventInterstitialListener.onInterstitialLoaded();
+                            }
+                        });
+                    } else {
+                        MoPubLog.d(INTERSTITIAL_TAG + "interstitial ad is not loaded - Placement ID: " + placementReferenceId);
+
+                        mHandler.post(new Runnable() {
+                            @Override
+                            public void run() {
+                                mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+                            }
+                        });
+                    }
                 }
             }
-        });
-    }
-
-    @Override
-    public void onAdUnavailable(final String s) {
-        mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-    }
-
-    @Override
-    public void onAdPlayableChanged(final boolean playable) {
-        if (mIsLoading && playable) {
-            notifyAdAvailable();
         }
     }
 }
diff --git a/extras/src/com/mopub/mobileads/VungleRewardedVideo.java b/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
index 8f5a8245..6a44e429 100644
--- a/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
@@ -1,126 +1,200 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
-import android.os.Handler;
-import android.os.Looper;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
-import com.mopub.common.BaseLifecycleListener;
+
 import com.mopub.common.DataKeys;
 import com.mopub.common.LifecycleListener;
 import com.mopub.common.MediationSettings;
 import com.mopub.common.MoPubReward;
 import com.mopub.common.logging.MoPubLog;
+
 import com.vungle.publisher.AdConfig;
-import com.vungle.publisher.EventListener;
-import com.vungle.publisher.VunglePub;
 
-import java.util.*;
-import java.util.concurrent.*;
+import java.util.Map;
 
 /**
  * A custom event for showing Vungle rewarded videos.
  *
- * Certified with Vungle 3.3.0
+ * Certified with Vungle SDK 5.3.0
  */
 public class VungleRewardedVideo extends CustomEventRewardedVideo {
 
-    private static final String DEFAULT_VUNGLE_APP_ID = "YOUR_DEFAULT_VUNGLE_APP_ID";
+    private static final String REWARDED_TAG = "Vungle Rewarded: ";
 
     /*
      * These constants are intended for MoPub internal use. Do not modify.
      */
     public static final String APP_ID_KEY = "appId";
-    public static final String VUNGLE_AD_NETWORK_CONSTANT = "vngl_id";
+    public static final String PLACEMENT_ID_KEY = "pid";
+    public static final String PLACEMENT_IDS_KEY = "pids";
 
-    // This has to be reinitialized every time the CE loads to avoid conflict with the interstitials.
-    private static VunglePub sVunglePub;
-    private static VungleRewardedVideoListener sVungleListener;
-    private static boolean sInitialized;
-    private static final LifecycleListener sLifecycleListener = new BaseLifecycleListener() {
-        @Override
-        public void onPause(@NonNull final Activity activity) {
-            super.onPause(activity);
-            sVunglePub.onPause();
-        }
+    public static final String VUNGLE_NETWORK_ID_DEFAULT = "vngl_id";
+    private static final String VUNGLE_DEFAULT_APP_ID = "YOUR_APP_ID_HERE";
+    private static final String[] VUNGLE_DEFAULT_ALL_PLACEMENT_IDS = {"PLACEMENT_ID_1", "PLACEMENT_ID_2", "..."};
 
-        @Override
-        public void onResume(@NonNull final Activity activity) {
-            super.onResume(activity);
-            sVunglePub.onResume();
-        }
-    };
+    private static VungleRouter sVungleRouter;
+    private VungleRewardedRouterListener mVungleRewardedRouterListener;
+    private static boolean sInitialized;
+    private String mAppId;
+    private String mPlacementId;
+    private String[] mPlacementIds;
+    private boolean mIsPlaying;
 
-    private final Handler mHandler;
-    private boolean mIsLoading;
     private String mAdUnitId;
+    private String mCustomerId;
+
 
     public VungleRewardedVideo() {
-        sVungleListener = new VungleRewardedVideoListener();
-        mHandler = new Handler(Looper.getMainLooper());
-        mIsLoading = false;
-    }
+        sVungleRouter = VungleRouter.getInstance();
 
-    @Nullable
-    @Override
-    public CustomEventRewardedVideoListener getVideoListenerForSdk() {
-        return sVungleListener;
+        if (mVungleRewardedRouterListener == null) {
+            mVungleRewardedRouterListener = new VungleRewardedRouterListener();
+        }
     }
 
     @Nullable
     @Override
     public LifecycleListener getLifecycleListener() {
-        return sLifecycleListener;
+        return sVungleRouter.getLifecycleListener();
     }
 
     @NonNull
     @Override
     protected String getAdNetworkId() {
-        return VUNGLE_AD_NETWORK_CONSTANT;
+        return mPlacementId;
     }
 
     @Override
     protected boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
-                @NonNull final Map<String, Object> localExtras,
-                @NonNull final Map<String, String> serverExtras) throws Exception {
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final Map<String, String> serverExtras) throws Exception {
         synchronized (VungleRewardedVideo.class) {
-            if (!sInitialized) {
-                sVunglePub = VunglePub.getInstance();
-                sInitialized = true;
-                return true;
+            if (sInitialized) {
+                return false;
             }
-            return false;
+
+            if (!validateIdsInServerExtras(serverExtras)) {
+                mAppId = VUNGLE_DEFAULT_APP_ID;
+                mPlacementIds = VUNGLE_DEFAULT_ALL_PLACEMENT_IDS;
+            }
+
+            if (!sVungleRouter.isVungleInitialized()) {
+                sVungleRouter.initVungle(launcherActivity, mAppId, mPlacementIds);
+            }
+
+            sInitialized = true;
+
+            return true;
         }
     }
 
     @Override
     protected void loadWithSdkInitialized(@NonNull final Activity activity, @NonNull final Map<String, Object> localExtras, @NonNull final Map<String, String> serverExtras) throws Exception {
-        String appId = serverExtras.containsKey(APP_ID_KEY) ? serverExtras.get(APP_ID_KEY) : DEFAULT_VUNGLE_APP_ID;
-        sVunglePub.init(activity, appId);
-        sVunglePub.setEventListeners(sVungleListener);
+        mIsPlaying = false;
+
+        if (!validateIdsInServerExtras(serverExtras)) {
+            mPlacementId = VUNGLE_NETWORK_ID_DEFAULT;
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class, mPlacementId, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+
+            return;
+        }
+
         Object adUnitObject = localExtras.get(DataKeys.AD_UNIT_ID_KEY);
         if (adUnitObject instanceof String) {
             mAdUnitId = (String) adUnitObject;
         }
-        if (sVunglePub.isAdPlayable()) {
-            notifyAdAvailable();
-        } else {
-            mIsLoading = true;
+
+        Object customerIdObject = localExtras.get(DataKeys.REWARDED_AD_CUSTOMER_ID_KEY);
+        if (customerIdObject instanceof String && !TextUtils.isEmpty((String) customerIdObject)) {
+            mCustomerId = (String) customerIdObject;
+        }
+
+        if (sVungleRouter.isVungleInitialized()) {
+            sVungleRouter.loadAdForPlacement(mPlacementId, mVungleRewardedRouterListener);
+        }
+        else {
+            MoPubLog.d(REWARDED_TAG + "There should not be this case. loadWithSdkInitialized is called before the SDK starts initialization for Placement ID: " + mPlacementId);
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class, mPlacementId, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
         }
     }
 
     @Override
     protected boolean hasVideoAvailable() {
-        return sVunglePub.isAdPlayable();
+        return sVungleRouter.isAdPlayableForPlacement(mPlacementId);
     }
 
     @Override
     protected void showVideo() {
         final AdConfig adConfig = new AdConfig();
-        adConfig.setIncentivized(true);
         setUpMediationSettingsForRequest(adConfig);
-        sVunglePub.playAd(adConfig);
+
+        sVungleRouter.playAdForPlacement(mPlacementId, adConfig);
+        mIsPlaying = true;
+    }
+
+    @Override
+    protected void onInvalidate() {
+        MoPubLog.d(REWARDED_TAG + "onInvalidate is called for Placement ID:" + mPlacementId);
+
+        sVungleRouter.removeRouterListener(mPlacementId);
+        mVungleRewardedRouterListener = null;
+    }
+
+
+    //private functions
+    private boolean validateIdsInServerExtras (Map<String, String> serverExtras) {
+        boolean isAllDataValid = true;
+
+        if (serverExtras.containsKey(APP_ID_KEY)) {
+            mAppId = serverExtras.get(APP_ID_KEY);
+            if (mAppId.isEmpty()) {
+                MoPubLog.w(REWARDED_TAG + "App ID is empty.");
+                isAllDataValid = false;
+            }
+        } else {
+            MoPubLog.w(REWARDED_TAG + "AppID is not in serverExtras.");
+            isAllDataValid = false;
+        }
+
+        if (serverExtras.containsKey(PLACEMENT_ID_KEY)) {
+            mPlacementId = serverExtras.get(PLACEMENT_ID_KEY);
+            if (mPlacementId.isEmpty()) {
+                MoPubLog.w(REWARDED_TAG + "Placement ID for this Ad Unit is empty.");
+                isAllDataValid = false;
+            }
+        } else {
+            MoPubLog.w(REWARDED_TAG + "Placement ID for this Ad Unit is not in serverExtras.");
+            isAllDataValid = false;
+        }
+
+        if (serverExtras.containsKey(PLACEMENT_IDS_KEY)) {
+            mPlacementIds = serverExtras.get(PLACEMENT_IDS_KEY).replace(" ", "").split(",", 0);
+            if (mPlacementIds.length == 0) {
+                MoPubLog.w(REWARDED_TAG + "Placement IDs are empty.");
+                isAllDataValid = false;
+            }
+        } else {
+            MoPubLog.w(REWARDED_TAG + "Placement IDs for this Ad Unit is not in serverExtras.");
+            isAllDataValid = false;
+        }
+
+        if (isAllDataValid) {
+            boolean foundInList = false;
+            for (String pid:  mPlacementIds) {
+                if(pid.equals(mPlacementId)) {
+                    foundInList = true;
+                }
+            }
+            if(!foundInList) {
+                MoPubLog.w(REWARDED_TAG + "Placement IDs for this Ad Unit is not in the array of Placement IDs");
+                isAllDataValid = false;
+            }
+        }
+
+        return isAllDataValid;
     }
 
     private void setUpMediationSettingsForRequest(AdConfig adConfig) {
@@ -151,75 +225,90 @@ private void modifyAdConfig(AdConfig adConfig, VungleMediationSettings mediation
         if (!TextUtils.isEmpty(mediationSettings.title)) {
             adConfig.setIncentivizedCancelDialogTitle(mediationSettings.title);
         }
-        if (!TextUtils.isEmpty(mediationSettings.userId)) {
+        if (!TextUtils.isEmpty(mCustomerId)) {
+            adConfig.setIncentivizedUserId(mCustomerId);
+        } else if (!TextUtils.isEmpty(mediationSettings.userId)) {
             adConfig.setIncentivizedUserId(mediationSettings.userId);
         }
     }
 
-    private void notifyAdAvailable() {
-        MoPubLog.d("Vungle rewarded video ad successfully loaded.");
-        mIsLoading = false;
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(VungleRewardedVideo.class,
-                        VUNGLE_AD_NETWORK_CONSTANT);
-            }
-        });
-    }
-
-    @Override
-    protected void onInvalidate() {
-        mIsLoading = false;
-    }
-
-    private class VungleRewardedVideoListener implements EventListener,
-            CustomEventRewardedVideoListener {
 
+    /*
+     * VungleRewardedRouterListener
+     */
+    private class VungleRewardedRouterListener implements VungleRouterListener {
         @Override
-        public void onAdEnd(final boolean wasCallToActionClicked) {
-            if (wasCallToActionClicked) {
-                MoPubRewardedVideoManager.onRewardedVideoClicked(VungleRewardedVideo.class,
-                        VUNGLE_AD_NETWORK_CONSTANT);
+        public void onAdEnd(@NonNull String placementReferenceId, final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(REWARDED_TAG + "onAdEnd - Placement ID: " + placementReferenceId + ", wasSuccessfulView: " + wasSuccessfulView + ", wasCallToActionClicked: " + wasCallToActionClicked);
+
+                mIsPlaying = false;
+
+                if (wasSuccessfulView) {
+                    // Vungle does not provide a callback when a user should be rewarded.
+                    // You will need to provide your own reward logic if you receive a reward with
+                    // "NO_REWARD_LABEL" && "NO_REWARD_AMOUNT"
+                    MoPubRewardedVideoManager.onRewardedVideoCompleted(VungleRewardedVideo.class,
+                            mPlacementId,
+                            MoPubReward.success(MoPubReward.NO_REWARD_LABEL,
+                                    MoPubReward.NO_REWARD_AMOUNT));
+                }
+
+                if (wasCallToActionClicked) {
+                    MoPubRewardedVideoManager.onRewardedVideoClicked(VungleRewardedVideo.class,
+                            mPlacementId);
+                }
+
+                MoPubRewardedVideoManager.onRewardedVideoClosed(VungleRewardedVideo.class,
+                        mPlacementId);
+
+                sVungleRouter.removeRouterListener(mPlacementId);
             }
-            MoPubRewardedVideoManager.onRewardedVideoClosed(VungleRewardedVideo.class,
-                    VUNGLE_AD_NETWORK_CONSTANT);
         }
 
         @Override
-        public void onAdStart() {
-            MoPubRewardedVideoManager.onRewardedVideoStarted(VungleRewardedVideo.class,
-                    VUNGLE_AD_NETWORK_CONSTANT);
-        }
+        public void onAdStart(@NonNull String placementReferenceId) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(REWARDED_TAG + "onAdStart - Placement ID: " + placementReferenceId);
 
-        @Override
-        public void onAdUnavailable(final String s) {
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class,
-                    VUNGLE_AD_NETWORK_CONSTANT, MoPubErrorCode.NETWORK_NO_FILL);
+                mIsPlaying = true;
+
+                MoPubRewardedVideoManager.onRewardedVideoStarted(VungleRewardedVideo.class,
+                        mPlacementId);
+            }
         }
 
         @Override
-        public void onAdPlayableChanged(final boolean playable) {
-            if (mIsLoading && playable) {
-                notifyAdAvailable();
+        public void onUnableToPlayAd(@NonNull String placementReferenceId, String reason) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(REWARDED_TAG + "onUnableToPlayAd - Placement ID: " + placementReferenceId + ", reason: " + reason);
+
+                mIsPlaying = false;
+                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class,
+                        mPlacementId, MoPubErrorCode.NETWORK_NO_FILL);
             }
         }
 
         @Override
-        public void onVideoView(final boolean isCompletedView, final int watchedMillis, final int videoMillis) {
-            MoPubLog.d(String.format(Locale.US, "%.1f%% of Vungle video watched.",
-                    (double) watchedMillis / videoMillis * 100));
-            if (isCompletedView) {
-                // Vungle does not provide a callback when a user should be rewarded.
-                // You will need to provide your own reward logic if you receive a reward with
-                // "NO_REWARD_LABEL" && "NO_REWARD_AMOUNT"
-                MoPubRewardedVideoManager.onRewardedVideoCompleted(VungleRewardedVideo.class,
-                        VUNGLE_AD_NETWORK_CONSTANT,
-                        MoPubReward.success(MoPubReward.NO_REWARD_LABEL, MoPubReward.NO_REWARD_AMOUNT));
+        public void onAdAvailabilityUpdate(@NonNull String placementReferenceId, boolean isAdAvailable) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                if (!mIsPlaying) {
+                    if (isAdAvailable) {
+                        MoPubLog.d(REWARDED_TAG + "rewarded video ad successfully loaded - Placement ID: " + placementReferenceId);
+                        MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(VungleRewardedVideo.class,
+                                mPlacementId);
+                    }
+                    else {
+                        MoPubLog.d(REWARDED_TAG + "rewarded video ad is not loaded - Placement ID: " + placementReferenceId);
+                        MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class,
+                                mPlacementId, MoPubErrorCode.NETWORK_NO_FILL);
+                    }
+                }
             }
         }
     }
 
+
     public static class VungleMediationSettings implements MediationSettings {
         @Nullable private final String userId;
         @Nullable private final String title;
diff --git a/extras/src/com/mopub/mobileads/VungleRouter.java b/extras/src/com/mopub/mobileads/VungleRouter.java
new file mode 100644
index 00000000..46a499f7
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/VungleRouter.java
@@ -0,0 +1,211 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+import com.mopub.common.BaseLifecycleListener;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.logging.MoPubLog;
+
+import com.vungle.publisher.AdConfig;
+import com.vungle.publisher.VungleAdEventListener;
+import com.vungle.publisher.VungleInitListener;
+import com.vungle.publisher.VunglePub;
+import com.vungle.publisher.env.WrapperFramework;
+import com.vungle.publisher.inject.Injector;
+
+import java.util.HashMap;
+import java.util.Map;
+
+
+/**
+ * Certified with Vungle SDK 5.3.0
+ */
+public class VungleRouter {
+
+    private static final String ROUTER_TAG = "Vungle Router: ";
+
+    // Version of the adapter, intended for Vungle internal use.
+    private static final String VERSION = "5.3.0";
+
+    private static VungleRouter instance = new VungleRouter();
+    private enum SDKInitState {
+        NOTINITIALIZED,
+        INITIALIZING,
+        INITIALIZED;
+    }
+
+    private static SDKInitState sInitState = SDKInitState.NOTINITIALIZED;
+    private static VunglePub sVunglePub;
+    private static Map<String, VungleRouterListener> sVungleRouterListeners = new HashMap<>();
+    private static Map<String, VungleRouterListener> sWaitingList = new HashMap<>();
+
+    private static final LifecycleListener sLifecycleListener = new BaseLifecycleListener() {
+        @Override
+        public void onPause(@NonNull final Activity activity) {
+            super.onPause(activity);
+            sVunglePub.onPause();
+        }
+
+        @Override
+        public void onResume(@NonNull final Activity activity) {
+            super.onResume(activity);
+            sVunglePub.onResume();
+        }
+    };
+
+
+    private VungleRouter() {
+        Injector injector = Injector.getInstance();
+        injector.setWrapperFramework(WrapperFramework.mopub);
+        injector.setWrapperFrameworkVersion(VERSION.replace('.', '_'));
+
+        sVunglePub = VunglePub.getInstance();
+    }
+
+    public static VungleRouter getInstance() {
+        return instance;
+    }
+
+    public LifecycleListener getLifecycleListener() {
+        return sLifecycleListener;
+    }
+
+
+    public void initVungle(Context context, String vungleAppId, String[] placementReferenceIds) {
+        sVunglePub.init(context, vungleAppId, placementReferenceIds, new VungleInitListener() {
+            @Override
+            public void onSuccess() {
+                MoPubLog.d(ROUTER_TAG + "SDK is initialized successfully.");
+
+                sInitState = SDKInitState.INITIALIZED;
+
+                sVunglePub.clearAndSetEventListeners(vungleDefaultListener);
+                clearWaitingList();
+            }
+
+            @Override
+            public void onFailure(Throwable throwable) {
+                MoPubLog.w(ROUTER_TAG + "Initialization is failed.");
+
+                sInitState = SDKInitState.NOTINITIALIZED;
+            }
+        });
+
+        sInitState = SDKInitState.INITIALIZING;
+    }
+
+    public boolean isVungleInitialized() {
+        if (sInitState == SDKInitState.NOTINITIALIZED) {
+            return false;
+        } else if (sInitState == SDKInitState.INITIALIZING) {
+            return true;
+        } else if (sInitState == SDKInitState.INITIALIZED) {
+            return true;
+        }
+
+        return sVunglePub.isInitialized();
+    }
+
+    public void loadAdForPlacement(String placementId, VungleRouterListener routerListener) {
+        switch (sInitState) {
+            case NOTINITIALIZED:
+                MoPubLog.w(ROUTER_TAG + "There should not be this case. loadAdForPlacement is called before initialization starts.");
+                break;
+
+            case INITIALIZING:
+                sWaitingList.put(placementId, routerListener);
+                break;
+
+            case INITIALIZED:
+                addRouterListener(placementId, routerListener);
+                sVunglePub.loadAd(placementId);
+                break;
+        }
+    }
+
+    private void addRouterListener(String placementId, VungleRouterListener routerListener) {
+        sVungleRouterListeners.put(placementId, routerListener);
+    }
+
+    public void removeRouterListener(String placementId) {
+        sVungleRouterListeners.remove(placementId);
+    }
+
+    public boolean isAdPlayableForPlacement(String placementId) {
+        return sVunglePub.isAdPlayable(placementId);
+    }
+
+    public void playAdForPlacement(String placementId, AdConfig adConfig) {
+        if (sVunglePub.isAdPlayable(placementId)) {
+            sVunglePub.playAd(placementId, adConfig);
+        }
+        else {
+            MoPubLog.w(ROUTER_TAG + "There should not be this case. playAdForPlacement is called before an ad is loaded for Placement ID: " + placementId);
+        }
+    }
+
+    private void clearWaitingList() {
+        for (Map.Entry<String, VungleRouterListener> entry : sWaitingList.entrySet()) {
+            sVunglePub.loadAd(entry.getKey());
+            sVungleRouterListeners.put(entry.getKey(),entry.getValue());
+        }
+
+        sWaitingList.clear();
+    }
+
+
+    /*
+     * VungleAdEventListener
+     */
+    private final VungleAdEventListener vungleDefaultListener = new VungleAdEventListener() {
+        @Override
+        public void onAdEnd(@NonNull String placementReferenceId, final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
+            MoPubLog.d(ROUTER_TAG + "onAdEnd - Placement ID: " + placementReferenceId);
+
+            VungleRouterListener targetListener = sVungleRouterListeners.get(placementReferenceId);
+            if (targetListener != null) {
+                targetListener.onAdEnd(placementReferenceId, wasSuccessfulView, wasCallToActionClicked);
+            } else {
+                MoPubLog.w(ROUTER_TAG + "onAdEnd - VungleRouterListener is not found for Placement ID: " + placementReferenceId);
+            }
+        }
+
+        @Override
+        public void onAdStart(@NonNull String placementReferenceId) {
+            MoPubLog.d(ROUTER_TAG + "onAdStart - Placement ID: " + placementReferenceId);
+
+            VungleRouterListener targetListener = sVungleRouterListeners.get(placementReferenceId);
+            if (targetListener != null) {
+                targetListener.onAdStart(placementReferenceId);
+            } else {
+                MoPubLog.w(ROUTER_TAG + "onAdStart - VungleRouterListener is not found for Placement ID: " + placementReferenceId);
+            }
+        }
+
+        @Override
+        public void onUnableToPlayAd(@NonNull String placementReferenceId, String reason) {
+            MoPubLog.d(ROUTER_TAG + "onUnableToPlayAd - Placement ID: " + placementReferenceId);
+
+            VungleRouterListener targetListener = sVungleRouterListeners.get(placementReferenceId);
+            if (targetListener != null) {
+                targetListener.onUnableToPlayAd(placementReferenceId, reason);
+            } else {
+                MoPubLog.w(ROUTER_TAG + "onUnableToPlayAd - VungleRouterListener is not found for Placement ID: " + placementReferenceId);
+            }
+        }
+
+        @Override
+        public void onAdAvailabilityUpdate(@NonNull String placementReferenceId, boolean isAdAvailable) {
+            MoPubLog.d(ROUTER_TAG + "onAdAvailabilityUpdate - Placement ID: " + placementReferenceId);
+
+            VungleRouterListener targetListener = sVungleRouterListeners.get(placementReferenceId);
+            if (targetListener != null) {
+                targetListener.onAdAvailabilityUpdate(placementReferenceId, isAdAvailable);
+            } else {
+                MoPubLog.w(ROUTER_TAG + "onAdAvailabilityUpdate - VungleRouterListener is not found for Placement ID: " + placementReferenceId);
+            }
+        }
+    };
+}
diff --git a/extras/src/com/mopub/mobileads/VungleRouterListener.java b/extras/src/com/mopub/mobileads/VungleRouterListener.java
new file mode 100644
index 00000000..057a8af4
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/VungleRouterListener.java
@@ -0,0 +1,16 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+
+/**
+ * Certified with Vungle SDK 5.3.0
+ */
+public interface VungleRouterListener {
+    void onAdEnd(@NonNull String var1, boolean var2, boolean var3);
+
+    void onAdStart(@NonNull String var1);
+
+    void onUnableToPlayAd(@NonNull String var1, String var2);
+
+    void onAdAvailabilityUpdate(@NonNull String var1, boolean var2);
+}
diff --git a/extras/src/com/mopub/nativeads/FacebookAdRenderer.java b/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
index b27b883f..1429555d 100644
--- a/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
+++ b/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
@@ -19,9 +19,9 @@
  * Include this class if you want to use Facebook native video ads. This renderer handles Facebook
  * static and video native ads. This will automatically replace the main image view with the
  * Facebook MediaView that handles showing the main asset.
+ * Certified with Facebook Audience Network 4.26.1
  */
-public class FacebookAdRenderer
-        implements MoPubAdRenderer<com.mopub.nativeads.FacebookNative.FacebookVideoEnabledNativeAd> {
+public class FacebookAdRenderer implements MoPubAdRenderer<FacebookNative.FacebookVideoEnabledNativeAd> {
     private final ViewBinder mViewBinder;
 
     // This is used instead of View.setTag, which causes a memory leak in 2.3
@@ -82,7 +82,7 @@ public View createAdView(final Context context, final ViewGroup parent) {
 
     @Override
     public void renderAdView(final View view,
-            final com.mopub.nativeads.FacebookNative.FacebookVideoEnabledNativeAd facebookVideoEnabledNativeAd) {
+            final FacebookNative.FacebookVideoEnabledNativeAd facebookVideoEnabledNativeAd) {
         FacebookNativeViewHolder facebookNativeViewHolder = mViewHolderMap.get(view);
         if (facebookNativeViewHolder == null) {
             facebookNativeViewHolder = FacebookNativeViewHolder.fromViewBinder(view, mViewBinder);
@@ -99,11 +99,11 @@ public void renderAdView(final View view,
     @Override
     public boolean supports(final BaseNativeAd nativeAd) {
         Preconditions.checkNotNull(nativeAd);
-        return nativeAd instanceof com.mopub.nativeads.FacebookNative.FacebookVideoEnabledNativeAd;
+        return nativeAd instanceof FacebookNative.FacebookVideoEnabledNativeAd;
     }
 
     private void update(final FacebookNativeViewHolder facebookNativeViewHolder,
-            final com.mopub.nativeads.FacebookNative.FacebookVideoEnabledNativeAd nativeAd) {
+            final FacebookNative.FacebookVideoEnabledNativeAd nativeAd) {
         final ImageView mainImageView = facebookNativeViewHolder.getMainImageView();
         NativeRendererHelper.addTextView(facebookNativeViewHolder.getTitleView(),
                 nativeAd.getTitle());
@@ -207,4 +207,3 @@ public boolean isMainImageViewInRelativeView() {
         }
     }
 }
-
diff --git a/extras/src/com/mopub/nativeads/FacebookNative.java b/extras/src/com/mopub/nativeads/FacebookNative.java
index 8faa9268..4eb9d55f 100644
--- a/extras/src/com/mopub/nativeads/FacebookNative.java
+++ b/extras/src/com/mopub/nativeads/FacebookNative.java
@@ -2,11 +2,11 @@
 
 import android.content.Context;
 import android.view.View;
+import android.view.ViewGroup;
 
 import com.facebook.ads.Ad;
 import com.facebook.ads.AdError;
 import com.facebook.ads.AdListener;
-import com.facebook.ads.ImpressionListener;
 import com.facebook.ads.MediaView;
 import com.facebook.ads.NativeAd;
 import com.facebook.ads.NativeAd.Rating;
@@ -21,10 +21,11 @@
 import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
 
 /**
- * Tested with Facebook SDK 4.8.1. FacebookAdRenderer is also necessary in order to show video ads.
+ * FacebookAdRenderer is also necessary in order to show video ads.
  * Video ads will only be shown if VIDEO_ENABLED is set to true or a server configuration
  * "video_enabled" flag is set to true. The server configuration will override the local
  * configuration.
+ * Certified with Facebook Audience Network 4.26.1
  */
 public class FacebookNative extends CustomEventNative {
     private static final String PLACEMENT_ID_KEY = "placement_id";
@@ -126,7 +127,46 @@ private boolean extrasAreValid(final Map<String, String> serverExtras) {
         return (placementId != null && placementId.length() > 0);
     }
 
-    static class FacebookStaticNativeAd extends StaticNativeAd implements AdListener, ImpressionListener {
+    private static void registerChildViewsForInteraction(final View view, final NativeAd nativeAd) {
+        if (nativeAd == null) {
+            return;
+        }
+
+        final List<View> clickableViews = new ArrayList<>();
+        assembleChildViewsWithLimit(view, clickableViews, 10);
+
+        if (clickableViews.size() == 1) {
+            nativeAd.registerViewForInteraction(view);
+        } else {
+            nativeAd.registerViewForInteraction(view, clickableViews);
+        }
+    }
+
+    private static void assembleChildViewsWithLimit(final View view,
+            final List<View> clickableViews, final int limit) {
+        if (view == null) {
+            MoPubLog.d("View given is null. Ignoring");
+            return;
+        }
+
+        if (limit <= 0) {
+            MoPubLog.d("Depth limit reached; adding this view regardless of its type.");
+            clickableViews.add(view);
+            return;
+        }
+
+        if (view instanceof ViewGroup && ((ViewGroup) view).getChildCount() > 0) {
+            final ViewGroup vg = (ViewGroup) view;
+            for (int i = 0; i < vg.getChildCount(); i++) {
+                assembleChildViewsWithLimit(vg.getChildAt(i), clickableViews, limit - 1);
+            }
+            return;
+        }
+
+        clickableViews.add(view);
+    }
+
+    static class FacebookStaticNativeAd extends StaticNativeAd implements AdListener {
         private static final String SOCIAL_CONTEXT_FOR_AD = "socialContextForAd";
 
         private final Context mContext;
@@ -143,7 +183,6 @@ private boolean extrasAreValid(final Map<String, String> serverExtras) {
 
         void loadAd() {
             mNativeAd.setAdListener(this);
-            mNativeAd.setImpressionListener(this);
             mNativeAd.loadAd();
         }
 
@@ -221,7 +260,6 @@ public void onAdClicked(final Ad ad) {
             notifyAdClicked();
         }
 
-        // ImpressionListener
         @Override
         public void onLoggingImpression(final Ad ad) {
             notifyAdImpressed();
@@ -230,7 +268,7 @@ public void onLoggingImpression(final Ad ad) {
         // BaseForwardingNativeAd
         @Override
         public void prepare(final View view) {
-            mNativeAd.registerViewForInteraction(view);
+            registerChildViewsForInteraction(view, mNativeAd);
         }
 
         @Override
@@ -253,7 +291,7 @@ private Double getDoubleRating(final Rating rating) {
     }
 
 
-    static class FacebookVideoEnabledNativeAd extends BaseNativeAd implements AdListener, ImpressionListener {
+    static class FacebookVideoEnabledNativeAd extends BaseNativeAd implements AdListener {
         private static final String SOCIAL_CONTEXT_FOR_AD = "socialContextForAd";
 
         static final double MIN_STAR_RATING = 0;
@@ -278,7 +316,6 @@ private Double getDoubleRating(final Rating rating) {
 
         void loadAd() {
             mNativeAd.setAdListener(this);
-            mNativeAd.setImpressionListener(this);
             mNativeAd.loadAd();
         }
 
@@ -407,7 +444,6 @@ public void onAdClicked(final Ad ad) {
             notifyAdClicked();
         }
 
-        // ImpressionListener
         @Override
         public void onLoggingImpression(final Ad ad) {
             notifyAdImpressed();
@@ -416,7 +452,7 @@ public void onLoggingImpression(final Ad ad) {
         // BaseForwardingNativeAd
         @Override
         public void prepare(final View view) {
-            mNativeAd.registerViewForInteraction(view);
+            registerChildViewsForInteraction(view, mNativeAd);
         }
 
         @Override
@@ -450,7 +486,7 @@ final public Object getExtra(final String key) {
             return new HashMap<String, Object>(mExtras);
         }
 
-        final public void addExtra( final String key, final Object value) {
+        final public void addExtra(final String key, final Object value) {
             if (!Preconditions.NoThrow.checkNotNull(key, "addExtra key is not allowed to be null")) {
                 return;
             }
diff --git a/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java b/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java
new file mode 100644
index 00000000..3e24799b
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java
@@ -0,0 +1,37 @@
+package com.mopub.nativeads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Certified with Flurry 8.1.0
+ */
+public interface FlurryBaseNativeAd {
+
+    void fetchAd();
+    @NonNull List<String> getImageUrls();
+    boolean isAppInstallAd();
+    void precacheImages();
+
+    @Nullable String getTitle();
+    @Nullable String getText();
+    @Nullable String getCallToAction();
+    @Nullable String getMainImageUrl();
+    @Nullable String getIconImageUrl();
+    @Nullable Double getStarRating();
+    @Nullable Map<String, Object> getExtras();
+
+
+    void setTitle(@Nullable final String title);
+    void setText(@Nullable final String text);
+    void setCallToAction(@Nullable final String callToAction);
+    void setMainImageUrl(@Nullable final String mainImageUrl);
+    void setIconImageUrl(@Nullable final String iconImageUrl);
+    void setStarRating(@Nullable final Double starRating);
+    void addExtra(@NonNull final String key, @Nullable final Object value);
+
+    void onNativeAdLoaded();
+}
diff --git a/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java b/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
new file mode 100644
index 00000000..1fd7d61f
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
@@ -0,0 +1,636 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.flurry.android.FlurryAgentListener;
+import com.flurry.android.ads.FlurryAdErrorType;
+import com.flurry.android.ads.FlurryAdNative;
+import com.flurry.android.ads.FlurryAdNativeAsset;
+import com.flurry.android.ads.FlurryAdNativeListener;
+import com.flurry.android.ads.FlurryAdTargeting;
+import com.mopub.mobileads.FlurryAgentWrapper;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Certified with Flurry 8.1.0
+ */
+public final class FlurryCustomEventNative extends CustomEventNative {
+
+    /**
+     * Extra image asset for the star-rating of app-install ads.
+     */
+    public static final String EXTRA_STAR_RATING_IMG = "flurry_starratingimage";
+    /**
+     * Extra text asset specifying the category for app-install ads.
+     */
+    public static final String EXTRA_APP_CATEGORY = "flurry_appcategorytext";
+    /**
+     * Extra image asset for the Flurry native ad branding logo.
+     */
+    public static final String EXTRA_SEC_BRANDING_LOGO = "flurry_brandingimage";
+    /**
+     * Key for enabling Flurry debug logging. After manually creating a {@link MoPubNative} object,
+     * pass in <code>true</code> as a value for this key in the map passed to
+     * {@link MoPubNative#setLocalExtras(Map)}.
+     *
+     * E.g.
+     *
+     * <blockquote><pre>
+     * {@code
+     * Map<String, Object> adapterExtras = new TreeMap<String, Object>();
+     * adapterExtras.put(FlurryCustomEventNative.LOCAL_EXTRA_TEST_MODE, true);
+     * mMoPubNative.setLocalExtras(adapterExtras);
+     * }
+     * </pre></blockquote>
+     *
+     * Debug logging is disabled on the Flurry SDK by default.
+     */
+    public static final String LOCAL_EXTRA_TEST_MODE = "enableTestMode";
+    private static final String LOG_TAG = FlurryCustomEventNative.class.getSimpleName();
+    private static final String ASSET_SEC_HQ_IMAGE = "secHqImage";
+    private static final String ASSET_SEC_IMAGE = "secImage";
+    private static final String ASSET_SEC_HQ_RATING_IMG = "secHqRatingImg";
+    private static final String ASSET_SEC_HQ_BRANDING_LOGO = "secHqBrandingLogo";
+    private static final String ASSET_SEC_RATING_IMG = "secRatingImg";
+    private static final String ASSET_APP_RATING = "appRating";
+    private static final String ASSET_APP_CATEGORY = "appCategory";
+    private static final String ASSET_HEADLINE = "headline";
+    private static final String ASSET_SUMMARY = "summary";
+    private static final String ASSET_CALL_TO_ACTION = "callToAction";
+    private static final String ASSET_VIDEO = "videoUrl";
+    private static final double MOPUB_STAR_RATING_SCALE = StaticNativeAd.MAX_STAR_RATING;
+
+    private FlurryAgentListener mFlurryAgentListener;
+
+    /* Static reference of the ads to ensure they don't get garbage collected */
+    private final static List<FlurryAdNative> sFlurryNativeAds = new ArrayList<>();
+
+    @Override
+    protected void loadNativeAd(@NonNull final Context context,
+            @NonNull final CustomEventNativeListener customEventNativeListener,
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final Map<String, String> serverExtras) {
+
+        final String flurryApiKey;
+        final String flurryAdSpace;
+
+        //Get the FLURRY_APIKEY and FLURRY_ADSPACE from the server.
+        if (validateExtras(serverExtras)) {
+            flurryApiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+            flurryAdSpace = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+
+            if (FlurryAgentWrapper.getInstance().isSessionActive() || mFlurryAgentListener != null) {
+                fetchFlurryAd(context, flurryAdSpace, localExtras, customEventNativeListener);
+            } else {
+                mFlurryAgentListener = new FlurryAgentListener() {
+                    @Override
+                    public void onSessionStarted() {
+                        fetchFlurryAd(context, flurryAdSpace, localExtras,
+                                customEventNativeListener);
+                    }
+                };
+
+                FlurryAgentWrapper.getInstance().startSession(context, flurryApiKey,
+                        mFlurryAgentListener);
+            }
+        } else {
+            customEventNativeListener.onNativeAdFailed(
+                    NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+            Log.i(LOG_TAG, "Failed Native AdFetch: Missing required server extras" +
+                    " [FLURRY_APIKEY and/or FLURRY_ADSPACE].");
+        }
+    }
+
+    private static synchronized void mapNativeAd(@NonNull final FlurryBaseNativeAd mopubSupportedAd,
+            @NonNull final FlurryAdNative flurryAdNative) {
+        FlurryAdNativeAsset coverImageAsset = flurryAdNative.getAsset(ASSET_SEC_HQ_IMAGE);
+        FlurryAdNativeAsset iconImageAsset = flurryAdNative.getAsset(ASSET_SEC_IMAGE);
+
+        if (coverImageAsset != null && !TextUtils.isEmpty(coverImageAsset.getValue())) {
+            mopubSupportedAd.setMainImageUrl(coverImageAsset.getValue());
+        }
+        if (iconImageAsset != null && !TextUtils.isEmpty(iconImageAsset.getValue())) {
+            mopubSupportedAd.setIconImageUrl(iconImageAsset.getValue());
+        }
+
+        mopubSupportedAd.setTitle(flurryAdNative.getAsset(ASSET_HEADLINE).getValue());
+        mopubSupportedAd.setText(flurryAdNative.getAsset(ASSET_SUMMARY).getValue());
+        mopubSupportedAd.addExtra(EXTRA_SEC_BRANDING_LOGO,
+                flurryAdNative.getAsset(ASSET_SEC_HQ_BRANDING_LOGO).getValue());
+
+        if (mopubSupportedAd.isAppInstallAd()) {
+            // App rating image URL may be null
+            FlurryAdNativeAsset ratingHqImageAsset = flurryAdNative
+                    .getAsset(ASSET_SEC_HQ_RATING_IMG);
+            if (ratingHqImageAsset != null && !TextUtils.isEmpty(ratingHqImageAsset.getValue())) {
+                mopubSupportedAd.addExtra(EXTRA_STAR_RATING_IMG, ratingHqImageAsset.getValue());
+            } else {
+                FlurryAdNativeAsset ratingImageAsset = flurryAdNative
+                        .getAsset(ASSET_SEC_RATING_IMG);
+                if (ratingImageAsset != null && !TextUtils.isEmpty(ratingImageAsset.getValue())) {
+                    mopubSupportedAd.addExtra(EXTRA_STAR_RATING_IMG, ratingImageAsset.getValue());
+                }
+            }
+
+            FlurryAdNativeAsset appCategoryAsset = flurryAdNative.getAsset(ASSET_APP_CATEGORY);
+            if (appCategoryAsset != null) {
+                mopubSupportedAd.addExtra(EXTRA_APP_CATEGORY, appCategoryAsset.getValue());
+            }
+            FlurryAdNativeAsset appRatingAsset = flurryAdNative.getAsset(ASSET_APP_RATING);
+            if (appRatingAsset != null) {
+                mopubSupportedAd.setStarRating(getStarRatingValue(appRatingAsset.getValue()));
+            }
+        }
+
+        FlurryAdNativeAsset ctaAsset = flurryAdNative.getAsset(ASSET_CALL_TO_ACTION);
+        if (ctaAsset != null) {
+            mopubSupportedAd.setCallToAction(ctaAsset.getValue());
+        }
+
+        if (mopubSupportedAd.getImageUrls().isEmpty()) {
+            Log.d(LOG_TAG, "preCacheImages: No images to cache for Flurry Native Ad: " +
+                    flurryAdNative.toString());
+            mopubSupportedAd.onNativeAdLoaded();
+        } else {
+            mopubSupportedAd.precacheImages();
+        }
+    }
+
+    @Nullable
+    private static Double getStarRatingValue(@Nullable final String appRatingString) {
+        // App rating String should be of the form X/Y. E.g. 80/100
+        Double rating = null;
+        if (appRatingString != null) {
+            String[] ratingParts = appRatingString.split("/");
+            if (ratingParts.length == 2) {
+                try {
+                    float numer = Integer.valueOf(ratingParts[0]);
+                    float denom = Integer.valueOf(ratingParts[1]);
+                    rating = (numer / denom) * MOPUB_STAR_RATING_SCALE;
+                } catch (NumberFormatException e) { /*Ignore and return null*/ }
+            }
+        }
+        return rating;
+    }
+
+    private boolean validateExtras(final Map<String, String> serverExtras) {
+        final String flurryApiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+        final String flurryAdSpace = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+        Log.i(LOG_TAG, "ServerInfo fetched from Mopub " + FlurryAgentWrapper.PARAM_API_KEY + " : "
+                + flurryApiKey + " and " + FlurryAgentWrapper.PARAM_AD_SPACE_NAME + " :" +
+                flurryAdSpace);
+        return (!TextUtils.isEmpty(flurryApiKey) && !TextUtils.isEmpty(flurryAdSpace));
+    }
+
+    private void fetchFlurryAd(@NonNull Context context, String flurryAdSpace,
+            @NonNull Map<String, Object> localExtras,
+            @NonNull CustomEventNativeListener customEventNativeListener) {
+        final FlurryAdNative flurryAdNative = new FlurryAdNative(context, flurryAdSpace);
+
+        if (localExtras.containsKey(LOCAL_EXTRA_TEST_MODE) &&
+                localExtras.get(LOCAL_EXTRA_TEST_MODE) instanceof Boolean) {
+            final FlurryAdTargeting targeting = new FlurryAdTargeting();
+            targeting.setEnableTestAds((Boolean) localExtras.get(LOCAL_EXTRA_TEST_MODE));
+        }
+
+        final FlurryBaseNativeAd flurryNativeAd;
+        if (shouldAllowVideoNativeAds()) {
+            flurryNativeAd = new FlurryVideoEnabledNativeAd(context, flurryAdNative,
+                    customEventNativeListener);
+        } else {
+            flurryNativeAd = new FlurryStaticNativeAd(context, flurryAdNative,
+                    customEventNativeListener);
+        }
+
+        // Add to requested ad list
+        sFlurryNativeAds.add(flurryAdNative);
+
+        flurryNativeAd.fetchAd();
+    }
+
+    private boolean shouldAllowVideoNativeAds() {
+        try {
+            Class.forName("com.mopub.nativeads.FlurryNativeAdRenderer");
+        } catch (ClassNotFoundException e) {
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * Class that supports Flurry static native ads with the help of the
+     * {@link MoPubStaticNativeAdRenderer}.
+     *
+     * @see FlurryVideoEnabledNativeAd
+     */
+    private static class FlurryStaticNativeAd extends StaticNativeAd implements FlurryBaseNativeAd {
+
+        @NonNull private final Context mContext;
+        @NonNull private final CustomEventNativeListener mCustomEventNativeListener;
+        @NonNull private final FlurryAdNative mFlurryAdNative;
+        private final FlurryAdNativeListener mFlurryNativelistener = new FlurryBaseAdListener(this) {
+            @Override
+            public void onClicked(final FlurryAdNative flurryAdNative) {
+                super.onClicked(flurryAdNative);
+                notifyAdClicked();
+            }
+
+            @Override
+            public void onImpressionLogged(final FlurryAdNative flurryAdNative) {
+                super.onImpressionLogged(flurryAdNative);
+                notifyAdImpressed();
+            }
+
+            @Override
+            public void onError(final FlurryAdNative adNative,
+                    final FlurryAdErrorType adErrorType,
+                    final int errorCode) {
+                super.onError(adNative, adErrorType, errorCode);
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
+            }
+        };
+
+        FlurryStaticNativeAd(@NonNull Context context, @NonNull FlurryAdNative adNative,
+                @NonNull CustomEventNativeListener customEventNativeListener) {
+            mContext = context;
+            mFlurryAdNative = adNative;
+            mCustomEventNativeListener = customEventNativeListener;
+        }
+
+        // region StaticNativeAd
+
+        @Override
+        public void prepare(@NonNull final View view) {
+            mFlurryAdNative.setTrackingView(view);
+            Log.d(LOG_TAG, "prepare(" + mFlurryAdNative.toString() + " " + view.toString() + ")");
+        }
+
+        @Override
+        public void clear(@NonNull final View view) {
+            mFlurryAdNative.removeTrackingView();
+            Log.d(LOG_TAG, "clear(" + mFlurryAdNative.toString() + ")");
+        }
+
+        @Override
+        public void destroy() {
+            Log.d(LOG_TAG, "destroy(" + mFlurryAdNative.toString() + ") started.");
+            mFlurryAdNative.destroy();
+
+            FlurryAgentWrapper.getInstance().endSession(mContext);
+        }
+
+        //endregion
+
+        // region FlurryBaseNativeAd
+
+        @Override
+        public synchronized void fetchAd() {
+            Log.d(LOG_TAG, "Fetching Flurry Native Ad now.");
+            mFlurryAdNative.setListener(mFlurryNativelistener);
+            mFlurryAdNative.fetchAd();
+        }
+
+        @NonNull
+        public List<String> getImageUrls() {
+            final List<String> imageUrls = new ArrayList<>(2);
+            final String mainImageUrl = getMainImageUrl();
+
+            if (mainImageUrl != null) {
+                imageUrls.add(getMainImageUrl());
+                Log.d(LOG_TAG, "Flurry Native Ad main image found.");
+            }
+
+            final String iconUrl = getIconImageUrl();
+            if (iconUrl != null) {
+                imageUrls.add(this.getIconImageUrl());
+                Log.d(LOG_TAG, "Flurry Native Ad icon image found.");
+            }
+            return imageUrls;
+        }
+
+        public boolean isAppInstallAd() {
+            return mFlurryAdNative.getAsset(ASSET_SEC_RATING_IMG) != null ||
+                    mFlurryAdNative.getAsset(ASSET_SEC_HQ_RATING_IMG) != null ||
+                    mFlurryAdNative.getAsset(ASSET_APP_CATEGORY) != null;
+        }
+
+        @Override
+        public void onNativeAdLoaded() {
+            mCustomEventNativeListener.onNativeAdLoaded(this);
+        }
+
+        @Override
+        public void precacheImages() {
+            NativeImageHelper.preCacheImages(mContext, getImageUrls(),
+                    new NativeImageHelper.ImageListener() {
+                        @Override
+                        public void onImagesCached() {
+                            Log.d(LOG_TAG, "preCacheImages: Ad image cached.");
+                            mCustomEventNativeListener.onNativeAdLoaded(FlurryStaticNativeAd.this);
+                        }
+
+                        @Override
+                        public void onImagesFailedToCache(final NativeErrorCode errorCode) {
+                            mCustomEventNativeListener.onNativeAdFailed(errorCode);
+                            Log.d(LOG_TAG, "preCacheImages: Unable to cache Ad image. Error["
+                                    + errorCode.toString() + "]");
+                        }
+                    });
+        }
+
+        //endregion
+    }
+
+    /**
+     * Class that supports both Flurry static and video native ads with the help of
+     * {@link FlurryNativeAdRenderer}. This class does not need to be included if you
+     * are fetching only static ads. Use {@link FlurryStaticNativeAd} instead.
+     */
+    static class FlurryVideoEnabledNativeAd extends BaseNativeAd implements FlurryBaseNativeAd {
+        private @NonNull final Context mContext;
+        private @NonNull final CustomEventNativeListener mCustomEventNativeListener;
+        private @NonNull final FlurryAdNative mFlurryAdNative;
+        private final FlurryAdNativeListener mFlurryNativelistener = new FlurryBaseAdListener(this) {
+            @Override
+            public void onClicked(final FlurryAdNative flurryAdNative) {
+                super.onClicked(flurryAdNative);
+                notifyAdClicked();
+            }
+
+            @Override
+            public void onImpressionLogged(final FlurryAdNative flurryAdNative) {
+                super.onImpressionLogged(flurryAdNative);
+                notifyAdImpressed();
+            }
+
+            @Override
+            public void onError(final FlurryAdNative adNative,
+                    final FlurryAdErrorType adErrorType,
+                    final int errorCode) {
+                super.onError(adNative, adErrorType, errorCode);
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
+            }
+        };
+
+        // Basic fields
+        @Nullable private String mTitle;
+        @Nullable private String mText;
+        @Nullable private String mCallToAction;
+        @Nullable private String mMainImageUrl;
+        @Nullable private String mIconImageUrl;
+        @Nullable private Double mStarRating;
+
+        // Extras
+        @NonNull private final Map<String, Object> mExtras;
+
+
+        FlurryVideoEnabledNativeAd(@NonNull Context context, @NonNull FlurryAdNative adNative,
+                @NonNull CustomEventNativeListener customEventNativeListener) {
+            mContext = context;
+            mFlurryAdNative = adNative;
+            mCustomEventNativeListener = customEventNativeListener;
+            mExtras = new HashMap<>();
+        }
+
+        // region StaticNativeAd
+
+        @Override
+        public void prepare(@NonNull View view) {
+            mFlurryAdNative.setTrackingView(view);
+            Log.d(LOG_TAG, "prepare(" + mFlurryAdNative.toString() + " " + view.toString() + ")");
+        }
+
+        @Override
+        public void clear(@NonNull View view) {
+            mFlurryAdNative.removeTrackingView();
+            Log.d(LOG_TAG, "clear(" + mFlurryAdNative.toString() + ")");
+        }
+
+        @Override
+        public void destroy() {
+            Log.d(LOG_TAG, "destroy(" + mFlurryAdNative.toString() + ") started.");
+            mFlurryAdNative.destroy();
+
+            FlurryAgentWrapper.getInstance().endSession(mContext);
+        }
+
+        // endregion
+
+        // region FlurryBaseNativeAd
+
+        @Override
+        public synchronized void fetchAd() {
+            Log.d(LOG_TAG, "Fetching Flurry Native Ad now.");
+            mFlurryAdNative.setListener(mFlurryNativelistener);
+            mFlurryAdNative.fetchAd();
+        }
+
+        @Override
+        public boolean isAppInstallAd() {
+            return mFlurryAdNative.getAsset(ASSET_SEC_RATING_IMG) != null ||
+                    mFlurryAdNative.getAsset(ASSET_SEC_HQ_RATING_IMG) != null ||
+                    mFlurryAdNative.getAsset(ASSET_APP_CATEGORY) != null;
+        }
+
+        @Override
+        public void precacheImages() {
+            NativeImageHelper.preCacheImages(mContext, getImageUrls(),
+                    new NativeImageHelper.ImageListener() {
+                        @Override
+                        public void onImagesCached() {
+                            Log.d(LOG_TAG, "preCacheImages: Ad image cached.");
+                            mCustomEventNativeListener.onNativeAdLoaded(
+                                    FlurryVideoEnabledNativeAd.this);
+                        }
+
+                        @Override
+                        public void onImagesFailedToCache(final NativeErrorCode errorCode) {
+                            mCustomEventNativeListener.onNativeAdFailed(errorCode);
+                            Log.d(LOG_TAG, "preCacheImages: Unable to cache Ad image. Error["
+                                    + errorCode.toString() + "]");
+                        }
+                    });
+        }
+
+        @NonNull
+        @Override
+        public List<String> getImageUrls() {
+            final List<String> imageUrls = new ArrayList<>(2);
+            final String mainImageUrl = getMainImageUrl();
+
+            if (mainImageUrl != null) {
+                imageUrls.add(getMainImageUrl());
+                Log.d(LOG_TAG, "Flurry Native Ad main image found.");
+            }
+
+            final String iconUrl = getIconImageUrl();
+            if (iconUrl != null) {
+                imageUrls.add(this.getIconImageUrl());
+                Log.d(LOG_TAG, "Flurry Native Ad icon image found.");
+            }
+            return imageUrls;
+        }
+
+        @Nullable
+        @Override
+        public String getTitle() {
+            return mTitle;
+        }
+
+        @Nullable
+        @Override
+        public String getText() {
+            return mText;
+        }
+
+        @Nullable
+        @Override
+        public String getCallToAction() {
+            return mCallToAction;
+        }
+
+        @Nullable
+        @Override
+        public String getMainImageUrl() {
+            return mMainImageUrl;
+        }
+
+        @Nullable
+        @Override
+        public String getIconImageUrl() {
+            return mIconImageUrl;
+        }
+
+        @Nullable
+        @Override
+        public Double getStarRating() {
+            return mStarRating;
+        }
+
+        @NonNull
+        @Override
+        public Map<String, Object> getExtras() {
+            return mExtras;
+        }
+
+        @Override
+        public void setTitle(@Nullable String title) {
+            mTitle = title;
+        }
+
+        @Override
+        public void setText(@Nullable String text) {
+            mText = text;
+        }
+
+        @Override
+        public void setCallToAction(@Nullable String callToAction) {
+            mCallToAction = callToAction;
+        }
+
+        @Override
+        public void setMainImageUrl(@Nullable String mainImageUrl) {
+            mMainImageUrl = mainImageUrl;
+        }
+
+        @Override
+        public void setIconImageUrl(@Nullable String iconImageUrl) {
+            mIconImageUrl = iconImageUrl;
+        }
+
+        @Override
+        public void setStarRating(@Nullable Double starRating) {
+            mStarRating = starRating;
+        }
+
+        @Override
+        public void addExtra(@NonNull String key, @Nullable Object value) {
+            mExtras.put(key, value);
+        }
+
+        @Override
+        public void onNativeAdLoaded() {
+            mCustomEventNativeListener.onNativeAdLoaded(this);
+        }
+
+        // endregion
+
+        boolean isVideoAd() {
+            return mFlurryAdNative.isVideoAd();
+        }
+
+        void loadVideoIntoView(@NonNull ViewGroup videoView) {
+            mFlurryAdNative.getAsset(ASSET_VIDEO).loadAssetIntoView(videoView);
+        }
+    }
+
+    static abstract class FlurryBaseAdListener implements FlurryAdNativeListener {
+        private final @NonNull FlurryBaseNativeAd mBaseNativeAd;
+
+        FlurryBaseAdListener(@NonNull FlurryBaseNativeAd baseNativeAd) {
+            mBaseNativeAd = baseNativeAd;
+        }
+
+        @Override
+        public void onFetched(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onFetched: Flurry native ad fetched successfully!");
+            mapNativeAd(mBaseNativeAd, flurryAdNative);
+            sFlurryNativeAds.remove(flurryAdNative);
+        }
+
+        @Override
+        public void onShowFullscreen(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onShowFullscreen: Flurry native ad in full-screen");
+        }
+
+        @Override
+        public void onCloseFullscreen(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onCloseFullscreen: Flurry native ad full-screen closed");
+        }
+
+        @Override
+        public void onAppExit(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onAppExit: Flurry native ad exited app");
+        }
+
+        @Override
+        public void onClicked(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onClicked: Flurry native ad clicked");
+        }
+
+        @Override
+        public void onImpressionLogged(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onImpressionLogged: Flurry native ad impression logged");
+        }
+
+        @Override
+        public void onExpanded(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onExpanded: Flurry native ad expanded");
+        }
+
+        @Override
+        public void onCollapsed(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onCollapsed: Flurry native ad collapsed");
+        }
+
+        @Override
+        public void onError(final FlurryAdNative flurryAdNative,
+                final FlurryAdErrorType adErrorType,
+                final int errorCode) {
+            Log.d(LOG_TAG, String.format("onError: Flurry native ad not available. " +
+                    "Error type: %s. Error code: %s", adErrorType.toString(), errorCode));
+            sFlurryNativeAds.remove(flurryAdNative);
+        }
+    }
+}
diff --git a/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java b/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
new file mode 100644
index 00000000..4f1e362d
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
@@ -0,0 +1,103 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import java.util.WeakHashMap;
+
+/**
+ * Include this class if you want to use Flurry native video ads. This will use the FrameLayout
+ * specified in the FlurryNativeViewHolder.videoView to show a video. If a video is not available,
+ * this will still use the mainImageView.
+ *
+ *
+ * Certified with Flurry 8.1.0
+ */
+public class FlurryNativeAdRenderer implements
+        MoPubAdRenderer<FlurryCustomEventNative.FlurryVideoEnabledNativeAd> {
+    @NonNull private final FlurryViewBinder mViewBinder;
+    @NonNull private final WeakHashMap<View, FlurryNativeViewHolder> mViewHolderMap;
+
+    public FlurryNativeAdRenderer(@NonNull final FlurryViewBinder viewBinder) {
+        mViewBinder = viewBinder;
+        mViewHolderMap = new WeakHashMap<>();
+    }
+
+    @NonNull
+    @Override
+    public View createAdView(@NonNull final Context context, @Nullable final ViewGroup parent) {
+        return LayoutInflater.from(context).inflate(
+                mViewBinder.staticViewBinder.layoutId, parent, false);
+    }
+
+    @Override
+    public void renderAdView(@NonNull View view,
+            @NonNull FlurryCustomEventNative.FlurryVideoEnabledNativeAd ad) {
+        FlurryNativeViewHolder flurryNativeViewHolder = mViewHolderMap.get(view);
+        if (flurryNativeViewHolder == null) {
+            flurryNativeViewHolder = FlurryNativeViewHolder.fromViewBinder(view, mViewBinder);
+            mViewHolderMap.put(view, flurryNativeViewHolder);
+        }
+
+        update(flurryNativeViewHolder, ad);
+        NativeRendererHelper.updateExtras(flurryNativeViewHolder.staticNativeViewHolder.mainView,
+                mViewBinder.staticViewBinder.extras, ad.getExtras());
+        setViewVisibility(flurryNativeViewHolder, View.VISIBLE);
+    }
+
+    @Override
+    public boolean supports(@NonNull BaseNativeAd nativeAd) {
+        return nativeAd instanceof FlurryCustomEventNative.FlurryVideoEnabledNativeAd;
+    }
+
+    private void update(final FlurryNativeViewHolder viewHolder,
+            final FlurryCustomEventNative.FlurryVideoEnabledNativeAd ad) {
+        NativeRendererHelper.addTextView(viewHolder.staticNativeViewHolder.titleView,
+                ad.getTitle());
+        NativeRendererHelper.addTextView(viewHolder.staticNativeViewHolder.textView, ad.getText());
+        NativeRendererHelper.addTextView(viewHolder.staticNativeViewHolder.callToActionView,
+                ad.getCallToAction());
+        NativeImageHelper.loadImageView(ad.getIconImageUrl(),
+                viewHolder.staticNativeViewHolder.iconImageView);
+
+        if (ad.isVideoAd()) {
+            ad.loadVideoIntoView(viewHolder.videoView);
+        } else {
+            NativeImageHelper.loadImageView(ad.getMainImageUrl(),
+                    viewHolder.staticNativeViewHolder.mainImageView);
+        }
+    }
+
+    private void setViewVisibility(@NonNull final FlurryNativeViewHolder viewHolder,
+            final int visibility) {
+        if (viewHolder.staticNativeViewHolder.mainView != null) {
+            viewHolder.staticNativeViewHolder.mainView.setVisibility(visibility);
+        }
+    }
+
+    private static class FlurryNativeViewHolder {
+        private final StaticNativeViewHolder staticNativeViewHolder;
+        private final ViewGroup videoView;
+
+        private FlurryNativeViewHolder(final StaticNativeViewHolder staticNativeViewHolder,
+                final ViewGroup videoView) {
+            this.staticNativeViewHolder = staticNativeViewHolder;
+            this.videoView = videoView;
+        }
+
+        static FlurryNativeViewHolder fromViewBinder(
+                final View view,
+                final FlurryViewBinder viewBinder) {
+            StaticNativeViewHolder staticNativeViewHolder = StaticNativeViewHolder
+                    .fromViewBinder(view, viewBinder.staticViewBinder);
+
+            ViewGroup videoView = (ViewGroup) view.findViewById(viewBinder.videoViewId);
+
+            return new FlurryNativeViewHolder(staticNativeViewHolder, videoView);
+        }
+    }
+}
diff --git a/extras/src/com/mopub/nativeads/FlurryViewBinder.java b/extras/src/com/mopub/nativeads/FlurryViewBinder.java
new file mode 100644
index 00000000..b6885793
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/FlurryViewBinder.java
@@ -0,0 +1,36 @@
+package com.mopub.nativeads;
+
+import android.support.annotation.NonNull;
+
+/**
+ * Certified with Flurry 8.1.0
+ */
+public class FlurryViewBinder {
+    ViewBinder staticViewBinder;
+    int videoViewId;
+
+    private FlurryViewBinder(@NonNull Builder builder) {
+        this.staticViewBinder = builder.staticViewBinder;
+        this.videoViewId = builder.videoViewId;
+    }
+
+    public final static class Builder {
+        ViewBinder staticViewBinder;
+        int videoViewId;
+
+        public Builder(final ViewBinder staticViewBinder) {
+            this.staticViewBinder = staticViewBinder;
+        }
+
+        @NonNull
+        public final Builder videoViewId(final int videoViewId) {
+            this.videoViewId = videoViewId;
+            return this;
+        }
+
+        @NonNull
+        public final FlurryViewBinder build() {
+            return new FlurryViewBinder(this);
+        }
+    }
+}
diff --git a/extras/src/com/mopub/nativeads/GooglePlayServicesAdRenderer.java b/extras/src/com/mopub/nativeads/GooglePlayServicesAdRenderer.java
new file mode 100644
index 00000000..3887c33d
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/GooglePlayServicesAdRenderer.java
@@ -0,0 +1,408 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.support.annotation.IdRes;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.google.android.gms.ads.formats.AdChoicesView;
+import com.google.android.gms.ads.formats.NativeAdView;
+import com.google.android.gms.ads.formats.NativeAppInstallAdView;
+import com.google.android.gms.ads.formats.NativeContentAdView;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.nativeads.GooglePlayServicesNative.GooglePlayServicesNativeAd;
+
+import java.util.Locale;
+import java.util.Map;
+import java.util.WeakHashMap;
+
+/**
+ * The {@link GooglePlayServicesAdRenderer} class is used to render
+ * GooglePlayServicesStaticNativeAds.
+ *
+ * Compatible with version 11.4.0 of the Google Play Services SDK.
+ */
+public class GooglePlayServicesAdRenderer implements MoPubAdRenderer<GooglePlayServicesNativeAd> {
+
+    /**
+     * Key to set and get star rating text view as an extra in the view binder.
+     */
+    public static final String VIEW_BINDER_KEY_STAR_RATING = "key_star_rating";
+
+    /**
+     * Key to set and get advertiser text view as an extra in the view binder.
+     */
+    public static final String VIEW_BINDER_KEY_ADVERTISER = "key_advertiser";
+
+    /**
+     * Key to set and get store text view as an extra in the view binder.
+     */
+    public static final String VIEW_BINDER_KEY_STORE = "key_store";
+
+    /**
+     * Key to set and get price text view as an extra in the view binder.
+     */
+    public static final String VIEW_BINDER_KEY_PRICE = "key_price";
+
+    /**
+     * Key to set and get the AdChoices icon view as an extra in the view binder.
+     */
+    public static final String VIEW_BINDER_KEY_AD_CHOICES_ICON_CONTAINER = "ad_choices_container";
+
+    /**
+     * ID for the frame layout that wraps the Google ad view.
+     */
+    @IdRes
+    private static final int ID_WRAPPING_FRAME = 1001;
+
+    /**
+     * ID for the Google native ad view.
+     */
+    @IdRes
+    private static final int ID_GOOGLE_NATIVE_VIEW = 1002;
+
+    /**
+     * A view binder containing the layout resource and views to be rendered by the renderer.
+     */
+    private final ViewBinder mViewBinder;
+
+    /**
+     * A weak hash map used to keep track of view holder so that the views can be properly recycled.
+     */
+    private final WeakHashMap<View, GoogleStaticNativeViewHolder> mViewHolderMap;
+
+    public GooglePlayServicesAdRenderer(ViewBinder viewBinder) {
+        this.mViewBinder = viewBinder;
+        this.mViewHolderMap = new WeakHashMap<>();
+    }
+
+    @NonNull
+    @Override
+    public View createAdView(@NonNull Context context, @Nullable ViewGroup parent) {
+        View view = LayoutInflater.from(context).inflate(mViewBinder.layoutId, parent, false);
+        // Create a frame layout and add the inflated view as a child. This will allow us to add
+        // the Google native ad view into the view hierarchy at render time.
+        FrameLayout wrappingView = new FrameLayout(context);
+        wrappingView.setId(ID_WRAPPING_FRAME);
+        wrappingView.addView(view);
+        Log.i(GooglePlayServicesNative.TAG, "Ad view created.");
+        return wrappingView;
+    }
+
+    @Override
+    public void renderAdView(@NonNull View view,
+            @NonNull GooglePlayServicesNativeAd nativeAd) {
+        GoogleStaticNativeViewHolder viewHolder = mViewHolderMap.get(view);
+        if (viewHolder == null) {
+            viewHolder = GoogleStaticNativeViewHolder.fromViewBinder(view, mViewBinder);
+            mViewHolderMap.put(view, viewHolder);
+        }
+
+        removeGoogleNativeAdView(view, nativeAd.shouldSwapMargins());
+
+        NativeAdView nativeAdView = null;
+        if (nativeAd.isNativeAppInstallAd()) {
+            nativeAdView = new NativeAppInstallAdView(view.getContext());
+            updateAppInstallAdView(nativeAd, viewHolder, (NativeAppInstallAdView) nativeAdView);
+        } else if (nativeAd.isNativeContentAd()) {
+            nativeAdView = new NativeContentAdView(view.getContext());
+            updateContentAdView(nativeAd, viewHolder, (NativeContentAdView) nativeAdView);
+        }
+
+        if (nativeAdView != null) {
+            insertGoogleNativeAdView(nativeAdView, view, nativeAd.shouldSwapMargins());
+        } else {
+            Log.w(GooglePlayServicesNative.TAG,
+                    "Couldn't add Google native ad view. NativeAdView is null.");
+        }
+    }
+
+    /**
+     * This method will add the given Google native ad view into the view hierarchy of the given
+     * MoPub native ad view.
+     *
+     * @param googleNativeAdView Google's native ad view to be added as a parent to the MoPub's
+     *                           view.
+     * @param moPubNativeAdView  MoPub's native ad view created by this renderer.
+     * @param swapMargins        {@code true} if the margins need to be swapped, {@code false}
+     *                           otherwise.
+     */
+    private static void insertGoogleNativeAdView(NativeAdView googleNativeAdView,
+            View moPubNativeAdView,
+            boolean swapMargins) {
+        if (moPubNativeAdView instanceof FrameLayout
+                && moPubNativeAdView.getId() == ID_WRAPPING_FRAME) {
+            googleNativeAdView.setId(ID_GOOGLE_NATIVE_VIEW);
+            FrameLayout outerFrame = (FrameLayout) moPubNativeAdView;
+            View actualView = outerFrame.getChildAt(0);
+
+            if (swapMargins) {
+                // Google native ad view renders the AdChoices icon in one of the four corners of
+                // its view. If a margin is specified on the actual ad view, the AdChoices view
+                // might be rendered outside the actual ad view. Moving the margins from the
+                // actual ad view to Google native ad view will make sure that the AdChoices icon
+                // is being rendered within the bounds of the actual ad view.
+                FrameLayout.LayoutParams googleNativeAdViewParams = new FrameLayout.LayoutParams(
+                        ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
+                FrameLayout.LayoutParams actualViewParams =
+                        (FrameLayout.LayoutParams) actualView.getLayoutParams();
+                googleNativeAdViewParams.setMargins(actualViewParams.leftMargin,
+                        actualViewParams.topMargin,
+                        actualViewParams.rightMargin,
+                        actualViewParams.bottomMargin);
+                googleNativeAdView.setLayoutParams(googleNativeAdViewParams);
+                actualViewParams.setMargins(0, 0, 0, 0);
+            } else {
+                googleNativeAdView.setLayoutParams(new ViewGroup.LayoutParams(
+                        ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
+            }
+
+            outerFrame.removeView(actualView);
+            googleNativeAdView.addView(actualView);
+            outerFrame.addView(googleNativeAdView);
+        } else {
+            Log.w(GooglePlayServicesNative.TAG,
+                    "Couldn't add Google native ad view. Wrapping view not found.");
+        }
+    }
+
+    /**
+     * This method will remove the Google native ad view from the view hierarchy if one is present.
+     *
+     * @param view        the view from which to remove the Google native ad view.
+     * @param swapMargins {@code true} if the margins need to be swapped before removing the
+     *                    Google native ad view, {@code false} otherwise.
+     */
+    protected static void removeGoogleNativeAdView(@NonNull View view, boolean swapMargins) {
+        if (view instanceof FrameLayout && view.getId() == ID_WRAPPING_FRAME) {
+            View adView = view.findViewById(ID_GOOGLE_NATIVE_VIEW);
+            if (adView != null) {
+                ViewGroup outerView = (ViewGroup) view;
+                int index = outerView.indexOfChild(adView);
+                outerView.removeView(adView);
+                View actualNativeView = ((ViewGroup) adView).getChildAt(0);
+                if (actualNativeView != null) {
+                    if (swapMargins) {
+                        FrameLayout.LayoutParams actualViewParams =
+                                (FrameLayout.LayoutParams) actualNativeView.getLayoutParams();
+                        FrameLayout.LayoutParams googleNativeViewParams =
+                                (FrameLayout.LayoutParams) adView.getLayoutParams();
+                        actualViewParams.setMargins(
+                                googleNativeViewParams.leftMargin,
+                                googleNativeViewParams.topMargin,
+                                googleNativeViewParams.rightMargin,
+                                googleNativeViewParams.bottomMargin);
+                    }
+                    ((ViewGroup) adView).removeView(actualNativeView);
+                    outerView.addView(actualNativeView, index);
+                }
+
+                if (adView instanceof NativeAdView) {
+                    ((NativeAdView) adView).destroy();
+                }
+            }
+        }
+    }
+
+    /**
+     * This method will render the given native ad view using the native ad and set the views to
+     * Google's native content ad view.
+     *
+     * @param staticNativeAd         a static native ad object containing the required assets to
+     *                               set to the native ad view.
+     * @param staticNativeViewHolder a static native view holder object containing the mapped
+     *                               views from the view binder.
+     * @param contentAdView          the Google native content ad view in the view hierarchy.
+     */
+    private void updateContentAdView(GooglePlayServicesNativeAd staticNativeAd,
+            GoogleStaticNativeViewHolder staticNativeViewHolder,
+            NativeContentAdView contentAdView) {
+        NativeRendererHelper.addTextView(
+                staticNativeViewHolder.mTitleView, staticNativeAd.getTitle());
+        contentAdView.setHeadlineView(staticNativeViewHolder.mTitleView);
+        NativeRendererHelper.addTextView(
+                staticNativeViewHolder.mTextView, staticNativeAd.getText());
+        contentAdView.setBodyView(staticNativeViewHolder.mTextView);
+        NativeRendererHelper.addTextView(staticNativeViewHolder.mCallToActionView,
+                staticNativeAd.getCallToAction());
+        contentAdView.setCallToActionView(staticNativeViewHolder.mCallToActionView);
+        NativeImageHelper.loadImageView(staticNativeAd.getMainImageUrl(),
+                staticNativeViewHolder.mMainImageView);
+        contentAdView.setImageView(staticNativeViewHolder.mMainImageView);
+        NativeImageHelper.loadImageView(staticNativeAd.getIconImageUrl(),
+                staticNativeViewHolder.mIconImageView);
+        contentAdView.setLogoView(staticNativeViewHolder.mIconImageView);
+        if (staticNativeAd.getAdvertiser() != null) {
+            NativeRendererHelper.addTextView(
+                    staticNativeViewHolder.mAdvertiserTextView, staticNativeAd.getAdvertiser());
+            contentAdView.setAdvertiserView(staticNativeViewHolder.mAdvertiserTextView);
+        }
+
+        // Add the AdChoices icon to the container if one is provided by the publisher.
+        if (staticNativeViewHolder.mAdChoicesIconContainer != null) {
+            AdChoicesView adChoicesView = new AdChoicesView(contentAdView.getContext());
+            staticNativeViewHolder.mAdChoicesIconContainer.removeAllViews();
+            staticNativeViewHolder.mAdChoicesIconContainer.addView(adChoicesView);
+            contentAdView.setAdChoicesView(adChoicesView);
+        }
+
+        // Set the privacy information icon to null as the Google Mobile Ads SDK automatically
+        // renders the AdChoices icon.
+        NativeRendererHelper.addPrivacyInformationIcon(
+                staticNativeViewHolder.mPrivacyInformationIconImageView, null, null);
+
+        contentAdView.setNativeAd(staticNativeAd.getContentAd());
+    }
+
+    /**
+     * This method will render the given native ad view using the native ad and set the views to
+     * Google's native app install ad view.
+     *
+     * @param staticNativeAd         a static native ad object containing the required assets to set
+     *                               to the native ad view.
+     * @param staticNativeViewHolder a static native view holder object containing the mapped
+     *                               views from the view binder.
+     * @param appInstallAdView       the Google native app install ad view in the view hierarchy.
+     */
+    private void updateAppInstallAdView(GooglePlayServicesNativeAd staticNativeAd,
+            GoogleStaticNativeViewHolder staticNativeViewHolder,
+            NativeAppInstallAdView appInstallAdView) {
+
+        NativeRendererHelper.addTextView(
+                staticNativeViewHolder.mTitleView, staticNativeAd.getTitle());
+        appInstallAdView.setHeadlineView(staticNativeViewHolder.mTitleView);
+        NativeRendererHelper.addTextView(
+                staticNativeViewHolder.mTextView, staticNativeAd.getText());
+        appInstallAdView.setBodyView(staticNativeViewHolder.mTextView);
+        NativeRendererHelper.addTextView(
+                staticNativeViewHolder.mCallToActionView, staticNativeAd.getCallToAction());
+        appInstallAdView.setCallToActionView(staticNativeViewHolder.mCallToActionView);
+        NativeImageHelper.loadImageView(
+                staticNativeAd.getMainImageUrl(), staticNativeViewHolder.mMainImageView);
+        appInstallAdView.setImageView(staticNativeViewHolder.mMainImageView);
+        NativeImageHelper.loadImageView(
+                staticNativeAd.getIconImageUrl(), staticNativeViewHolder.mIconImageView);
+        appInstallAdView.setIconView(staticNativeViewHolder.mIconImageView);
+        if (staticNativeAd.getStarRating() != null) {
+            NativeRendererHelper.addTextView(staticNativeViewHolder.mStarRatingTextView,
+                    String.format(
+                            Locale.getDefault(), "%.1f/5 Stars", staticNativeAd.getStarRating()));
+            appInstallAdView.setStarRatingView(staticNativeViewHolder.mStarRatingTextView);
+        }
+        if (staticNativeAd.getPrice() != null) {
+            NativeRendererHelper.addTextView(
+                    staticNativeViewHolder.mPriceTextView, staticNativeAd.getPrice());
+            appInstallAdView.setPriceView(staticNativeViewHolder.mPriceTextView);
+        }
+        if (staticNativeAd.getStore() != null) {
+            NativeRendererHelper.addTextView(
+                    staticNativeViewHolder.mStoreTextView, staticNativeAd.getStore());
+            appInstallAdView.setStoreView(staticNativeViewHolder.mStoreTextView);
+        }
+
+        // Set the privacy information icon to null as the Google Mobile Ads SDK automatically
+        // renders the AdChoices icon.
+        NativeRendererHelper.addPrivacyInformationIcon(
+                staticNativeViewHolder.mPrivacyInformationIconImageView, null, null);
+
+        // Add the AdChoices icon to the container if one is provided by the publisher.
+        if (staticNativeViewHolder.mAdChoicesIconContainer != null) {
+            AdChoicesView adChoicesView = new AdChoicesView(appInstallAdView.getContext());
+            staticNativeViewHolder.mAdChoicesIconContainer.removeAllViews();
+            staticNativeViewHolder.mAdChoicesIconContainer.addView(adChoicesView);
+            appInstallAdView.setAdChoicesView(adChoicesView);
+        }
+
+        appInstallAdView.setNativeAd(staticNativeAd.getAppInstallAd());
+    }
+
+    @Override
+    public boolean supports(@NonNull BaseNativeAd nativeAd) {
+        return nativeAd instanceof GooglePlayServicesNativeAd;
+    }
+
+    private static class GoogleStaticNativeViewHolder {
+        @Nullable
+        View mMainView;
+        @Nullable
+        TextView mTitleView;
+        @Nullable
+        TextView mTextView;
+        @Nullable
+        TextView mCallToActionView;
+        @Nullable
+        ImageView mMainImageView;
+        @Nullable
+        ImageView mIconImageView;
+        @Nullable
+        ImageView mPrivacyInformationIconImageView;
+        @Nullable
+        TextView mStarRatingTextView;
+        @Nullable
+        TextView mAdvertiserTextView;
+        @Nullable
+        TextView mStoreTextView;
+        @Nullable
+        TextView mPriceTextView;
+        @Nullable
+        FrameLayout mAdChoicesIconContainer;
+
+        private static final GoogleStaticNativeViewHolder EMPTY_VIEW_HOLDER =
+                new GoogleStaticNativeViewHolder();
+
+        @NonNull
+        public static GoogleStaticNativeViewHolder fromViewBinder(@NonNull View view,
+                @NonNull ViewBinder viewBinder) {
+            final GoogleStaticNativeViewHolder viewHolder = new GoogleStaticNativeViewHolder();
+            viewHolder.mMainView = view;
+            try {
+                viewHolder.mTitleView = (TextView) view.findViewById(viewBinder.titleId);
+                viewHolder.mTextView = (TextView) view.findViewById(viewBinder.textId);
+                viewHolder.mCallToActionView =
+                        (TextView) view.findViewById(viewBinder.callToActionId);
+                viewHolder.mMainImageView =
+                        (ImageView) view.findViewById(viewBinder.mainImageId);
+                viewHolder.mIconImageView =
+                        (ImageView) view.findViewById(viewBinder.iconImageId);
+                viewHolder.mPrivacyInformationIconImageView =
+                        (ImageView) view.findViewById(viewBinder.privacyInformationIconImageId);
+                Map<String, Integer> extraViews = viewBinder.extras;
+                Integer starRatingTextViewId = extraViews.get(VIEW_BINDER_KEY_STAR_RATING);
+                if (starRatingTextViewId != null) {
+                    viewHolder.mStarRatingTextView =
+                            (TextView) view.findViewById(starRatingTextViewId);
+                }
+                Integer advertiserTextViewId = extraViews.get(VIEW_BINDER_KEY_ADVERTISER);
+                if (advertiserTextViewId != null) {
+                    viewHolder.mAdvertiserTextView =
+                            (TextView) view.findViewById(advertiserTextViewId);
+                }
+                Integer storeTextViewId = extraViews.get(VIEW_BINDER_KEY_STORE);
+                if (storeTextViewId != null) {
+                    viewHolder.mStoreTextView = (TextView) view.findViewById(storeTextViewId);
+                }
+                Integer priceTextViewId = extraViews.get(VIEW_BINDER_KEY_PRICE);
+                if (priceTextViewId != null) {
+                    viewHolder.mPriceTextView = (TextView) view.findViewById(priceTextViewId);
+                }
+                Integer adChoicesIconViewId =
+                        extraViews.get(VIEW_BINDER_KEY_AD_CHOICES_ICON_CONTAINER);
+                if (adChoicesIconViewId != null) {
+                    viewHolder.mAdChoicesIconContainer =
+                            (FrameLayout) view.findViewById(adChoicesIconViewId);
+                }
+                return viewHolder;
+            } catch (ClassCastException exception) {
+                MoPubLog.w("Could not cast from id in ViewBinder to expected View type", exception);
+                return EMPTY_VIEW_HOLDER;
+            }
+        }
+    }
+}
diff --git a/extras/src/com/mopub/nativeads/GooglePlayServicesNative.java b/extras/src/com/mopub/nativeads/GooglePlayServicesNative.java
new file mode 100644
index 00000000..7797c08c
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/GooglePlayServicesNative.java
@@ -0,0 +1,615 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.text.TextUtils;
+import android.util.Log;
+import android.view.View;
+
+import com.google.android.gms.ads.AdListener;
+import com.google.android.gms.ads.AdLoader;
+import com.google.android.gms.ads.AdRequest;
+import com.google.android.gms.ads.MobileAds;
+import com.google.android.gms.ads.formats.NativeAdOptions;
+import com.google.android.gms.ads.formats.NativeAppInstallAd;
+import com.google.android.gms.ads.formats.NativeContentAd;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.atomic.AtomicBoolean;
+
+/**
+ * The {@link GooglePlayServicesNative} class is used to load native Google mobile ads.
+ *
+ * Compatible with version 11.4.0 of the Google Play Services SDK.
+ */
+public class GooglePlayServicesNative extends CustomEventNative {
+    protected static final String TAG = "MoPubToAdMobNative";
+
+    /**
+     * The current version of the adapter.
+     */
+    private static final String ADAPTER_VERSION = "0.3.1";
+
+    /**
+     * Key to obtain AdMob application ID from the server extras provided by MoPub.
+     */
+    private static final String KEY_EXTRA_APPLICATION_ID = "appid";
+
+    /**
+     * Key to obtain AdMob ad unit ID from the extras provided by MoPub.
+     */
+    private static final String KEY_EXTRA_AD_UNIT_ID = "adunit";
+
+    /**
+     * Key to set and obtain the image orientation preference.
+     */
+    public static final String KEY_EXTRA_ORIENTATION_PREFERENCE = "orientation_preference";
+
+    /**
+     * Key to set and obtain the AdChoices icon placement preference.
+     */
+    public static final String KEY_EXTRA_AD_CHOICES_PLACEMENT = "ad_choices_placement";
+
+    /**
+     * Key to set and obtain the experimental swap margins flag.
+     */
+    public static final String KEY_EXPERIMENTAL_EXTRA_SWAP_MARGINS = "swap_margins";
+
+    /**
+     * Flag to determine whether or not the adapter has been initialized.
+     */
+    private static AtomicBoolean sIsInitialized = new AtomicBoolean(false);
+
+    @Override
+    protected void loadNativeAd(@NonNull final Context context,
+            @NonNull final CustomEventNativeListener customEventNativeListener,
+            @NonNull Map<String, Object> localExtras,
+            @NonNull Map<String, String> serverExtras) {
+        if (!sIsInitialized.getAndSet(true)) {
+            Log.i(TAG, "Adapter version - " + ADAPTER_VERSION);
+            if (serverExtras.containsKey(KEY_EXTRA_APPLICATION_ID)
+                    && !TextUtils.isEmpty(serverExtras.get(KEY_EXTRA_APPLICATION_ID))) {
+                MobileAds.initialize(context, serverExtras.get(KEY_EXTRA_APPLICATION_ID));
+            } else {
+                MobileAds.initialize(context);
+            }
+        }
+
+        String adUnitId = serverExtras.get(KEY_EXTRA_AD_UNIT_ID);
+        if (TextUtils.isEmpty(adUnitId)) {
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_REQUEST);
+            return;
+        }
+        GooglePlayServicesNativeAd nativeAd =
+                new GooglePlayServicesNativeAd(customEventNativeListener);
+        nativeAd.loadAd(context, adUnitId, localExtras);
+    }
+
+    /**
+     * The {@link GooglePlayServicesNativeAd} class is used to load and map Google native
+     * ads to MoPub native ads.
+     */
+    static class GooglePlayServicesNativeAd extends BaseNativeAd {
+
+        // Native ad assets.
+        private String mTitle;
+        private String mText;
+        private String mMainImageUrl;
+        private String mIconImageUrl;
+        private String mCallToAction;
+        private Double mStarRating;
+        private String mAdvertiser;
+        private String mStore;
+        private String mPrice;
+
+        /**
+         * Flag to determine whether or not to swap margins from actual ad view to Google native ad
+         * view.
+         */
+        private boolean mSwapMargins;
+
+        /**
+         * A custom event native listener used to forward Google Mobile Ads SDK events to MoPub.
+         */
+        private CustomEventNativeListener mCustomEventNativeListener;
+
+        /**
+         * A Google native ad of type content.
+         */
+        private NativeContentAd mNativeContentAd;
+
+        /**
+         * A Google native ad of type app install.
+         */
+        private NativeAppInstallAd mNativeAppInstallAd;
+
+        public GooglePlayServicesNativeAd(
+                CustomEventNativeListener customEventNativeListener) {
+            this.mCustomEventNativeListener = customEventNativeListener;
+        }
+
+        /**
+         * @return the title string associated with this native ad.
+         */
+        public String getTitle() {
+            return mTitle;
+        }
+
+        /**
+         * @return the text/body string associated with the native ad.
+         */
+        public String getText() {
+            return mText;
+        }
+
+        /**
+         * @return the main image URL associated with the native ad.
+         */
+        public String getMainImageUrl() {
+            return mMainImageUrl;
+        }
+
+        /**
+         * @return the icon image URL associated with the native ad.
+         */
+        public String getIconImageUrl() {
+            return mIconImageUrl;
+        }
+
+        /**
+         * @return the call to action string associated with the native ad.
+         */
+        public String getCallToAction() {
+            return mCallToAction;
+        }
+
+        /**
+         * @return the star rating associated with the native ad.
+         */
+        public Double getStarRating() {
+            return mStarRating;
+        }
+
+        /**
+         * @return the advertiser string associated with the native ad.
+         */
+        public String getAdvertiser() {
+            return mAdvertiser;
+        }
+
+        /**
+         * @return the store string associated with the native ad.
+         */
+        public String getStore() {
+            return mStore;
+        }
+
+        /**
+         * @return the price string associated with the native ad.
+         */
+        public String getPrice() {
+            return mPrice;
+        }
+
+        /**
+         * @param title the title to be set.
+         */
+        public void setTitle(String title) {
+            this.mTitle = title;
+        }
+
+        /**
+         * @param text the text/body to be set.
+         */
+        public void setText(String text) {
+            this.mText = text;
+        }
+
+        /**
+         * @param mainImageUrl the main image URL to be set.
+         */
+        public void setMainImageUrl(String mainImageUrl) {
+            this.mMainImageUrl = mainImageUrl;
+        }
+
+        /**
+         * @param iconImageUrl the icon image URL to be set.
+         */
+        public void setIconImageUrl(String iconImageUrl) {
+            this.mIconImageUrl = iconImageUrl;
+        }
+
+        /**
+         * @param callToAction the call to action string to be set.
+         */
+        public void setCallToAction(String callToAction) {
+            this.mCallToAction = callToAction;
+        }
+
+        /**
+         * @param starRating the star rating value to be set.
+         */
+        public void setStarRating(Double starRating) {
+            this.mStarRating = starRating;
+        }
+
+        /**
+         * @param advertiser the advertiser string to be set.
+         */
+        public void setAdvertiser(String advertiser) {
+            this.mAdvertiser = advertiser;
+        }
+
+        /**
+         * @param store the store string to be set.
+         */
+        public void setStore(String store) {
+            this.mStore = store;
+        }
+
+        /**
+         * @param price the price string to be set.
+         */
+        public void setPrice(String price) {
+            this.mPrice = price;
+        }
+
+        /**
+         * @return whether or not this ad is native content ad.
+         */
+        public boolean isNativeContentAd() {
+            return mNativeContentAd != null;
+        }
+
+        /**
+         * @return whether or not to swap margins when rendering the ad.
+         */
+        public boolean shouldSwapMargins() {
+            return this.mSwapMargins;
+        }
+
+        /**
+         * @return whether or not this ad is native app install ad.
+         */
+        public boolean isNativeAppInstallAd() {
+            return mNativeAppInstallAd != null;
+        }
+
+        /**
+         * @return {@link #mNativeContentAd}.
+         */
+        public NativeContentAd getContentAd() {
+            return mNativeContentAd;
+        }
+
+        /**
+         * @return {@link #mNativeAppInstallAd}.
+         */
+        public NativeAppInstallAd getAppInstallAd() {
+            return mNativeAppInstallAd;
+        }
+
+        /**
+         * This method will load native ads from Google for the given ad unit ID.
+         *
+         * @param context  required to request a Google native ad.
+         * @param adUnitId Google's AdMob Ad Unit ID.
+         */
+        public void loadAd(final Context context, String adUnitId,
+                Map<String, Object> localExtras) {
+            AdLoader.Builder builder = new AdLoader.Builder(context, adUnitId);
+
+            // Get the experimental swap margins extra.
+            if (localExtras.containsKey(KEY_EXPERIMENTAL_EXTRA_SWAP_MARGINS)) {
+                Object swapMarginExtra = localExtras.get(KEY_EXPERIMENTAL_EXTRA_SWAP_MARGINS);
+                if (swapMarginExtra instanceof Boolean) {
+                    mSwapMargins = (boolean) swapMarginExtra;
+                }
+            }
+
+            NativeAdOptions.Builder optionsBuilder = new NativeAdOptions.Builder();
+
+            // MoPub requires the images to be pre-cached using their APIs, so we do not want
+            // Google to download the image assets.
+            optionsBuilder.setReturnUrlsForImageAssets(true);
+
+            // MoPub allows for only one image, so only request for one image.
+            optionsBuilder.setRequestMultipleImages(false);
+
+            // Get the preferred image orientation from the local extras.
+            if (localExtras.containsKey(KEY_EXTRA_ORIENTATION_PREFERENCE)
+                    && isValidOrientationExtra(localExtras.get(KEY_EXTRA_ORIENTATION_PREFERENCE))) {
+                optionsBuilder.setImageOrientation(
+                        (int) localExtras.get(KEY_EXTRA_ORIENTATION_PREFERENCE));
+            }
+
+            // Get the preferred AdChoices icon placement from the local extras.
+            if (localExtras.containsKey(KEY_EXTRA_AD_CHOICES_PLACEMENT)
+                    && isValidAdChoicesPlacementExtra(
+                    localExtras.get(KEY_EXTRA_AD_CHOICES_PLACEMENT))) {
+                optionsBuilder.setAdChoicesPlacement(
+                        (int) localExtras.get(KEY_EXTRA_AD_CHOICES_PLACEMENT));
+            }
+            NativeAdOptions adOptions = optionsBuilder.build();
+
+            AdLoader adLoader =
+                    builder.forContentAd(new NativeContentAd.OnContentAdLoadedListener() {
+                        @Override
+                        public void onContentAdLoaded(final NativeContentAd nativeContentAd) {
+                            if (!isValidContentAd(nativeContentAd)) {
+                                Log.i(TAG, "The Google native content ad is missing one or more "
+                                        + "required assets, failing request.");
+                                mCustomEventNativeListener.onNativeAdFailed(
+                                        NativeErrorCode.INVALID_RESPONSE);
+                                return;
+                            }
+
+                            mNativeContentAd = nativeContentAd;
+                            List<com.google.android.gms.ads.formats.NativeAd.Image> images =
+                                    nativeContentAd.getImages();
+                            List<String> imageUrls = new ArrayList<>();
+                            // Only one image should be in the the list as we turned off request
+                            // for multiple images.
+                            com.google.android.gms.ads.formats.NativeAd.Image mainImage =
+                                    images.get(0);
+                            // Assuming that the URI provided is an URL.
+                            imageUrls.add(mainImage.getUri().toString());
+
+                            com.google.android.gms.ads.formats.NativeAd.Image logoImage =
+                                    nativeContentAd.getLogo();
+                            // Assuming that the URI provided is an URL.
+                            imageUrls.add(logoImage.getUri().toString());
+                            preCacheImages(context, imageUrls);
+                        }
+                    }).forAppInstallAd(new NativeAppInstallAd.OnAppInstallAdLoadedListener() {
+                        @Override
+                        public void onAppInstallAdLoaded(
+                                final NativeAppInstallAd nativeAppInstallAd) {
+                            if (!isValidAppInstallAd(nativeAppInstallAd)) {
+                                Log.i(TAG, "The Google native app install ad is missing one or "
+                                        + "more required assets, failing request.");
+                                mCustomEventNativeListener.onNativeAdFailed(
+                                        NativeErrorCode.INVALID_RESPONSE);
+                                return;
+                            }
+                            mNativeAppInstallAd = nativeAppInstallAd;
+                            List<com.google.android.gms.ads.formats.NativeAd.Image> images =
+                                    nativeAppInstallAd.getImages();
+                            List<String> imageUrls = new ArrayList<>();
+                            // Only one image should be in the the list as we turned off request
+                            // for multiple images.
+                            com.google.android.gms.ads.formats.NativeAd.Image mainImage =
+                                    images.get(0);
+                            // Assuming that the URI provided is an URL.
+                            imageUrls.add(mainImage.getUri().toString());
+
+                            com.google.android.gms.ads.formats.NativeAd.Image iconImage =
+                                    nativeAppInstallAd.getIcon();
+                            // Assuming that the URI provided is an URL.
+                            imageUrls.add(iconImage.getUri().toString());
+                            preCacheImages(context, imageUrls);
+                        }
+                    }).withAdListener(new AdListener() {
+                        @Override
+                        public void onAdClicked() {
+                            super.onAdClicked();
+                            GooglePlayServicesNativeAd.this.notifyAdClicked();
+                        }
+
+                        @Override
+                        public void onAdImpression() {
+                            super.onAdImpression();
+                            GooglePlayServicesNativeAd.this.notifyAdImpressed();
+                        }
+
+                        @Override
+                        public void onAdFailedToLoad(int errorCode) {
+                            super.onAdFailedToLoad(errorCode);
+                            switch (errorCode) {
+                                case AdRequest.ERROR_CODE_INTERNAL_ERROR:
+                                    mCustomEventNativeListener.onNativeAdFailed(
+                                            NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+                                    break;
+                                case AdRequest.ERROR_CODE_INVALID_REQUEST:
+                                    mCustomEventNativeListener.onNativeAdFailed(
+                                            NativeErrorCode.NETWORK_INVALID_REQUEST);
+                                    break;
+                                case AdRequest.ERROR_CODE_NETWORK_ERROR:
+                                    mCustomEventNativeListener.onNativeAdFailed(
+                                            NativeErrorCode.CONNECTION_ERROR);
+                                    break;
+                                case AdRequest.ERROR_CODE_NO_FILL:
+                                    mCustomEventNativeListener.onNativeAdFailed(
+                                            NativeErrorCode.NETWORK_NO_FILL);
+                                    break;
+                                default:
+                                    mCustomEventNativeListener.onNativeAdFailed(
+                                            NativeErrorCode.UNSPECIFIED);
+                            }
+                        }
+                    }).withNativeAdOptions(adOptions).build();
+            adLoader.loadAd(new AdRequest.Builder().setRequestAgent("MoPub").build());
+        }
+
+        /**
+         * This method will check whether or not the provided extra value can be mapped to
+         * NativeAdOptions' orientation constants.
+         *
+         * @param extra to be checked if it is valid.
+         * @return {@code true} if the extra can be mapped to one of {@link NativeAdOptions}
+         * orientation constants, {@code false} otherwise.
+         */
+        private boolean isValidOrientationExtra(Object extra) {
+            if (extra == null || !(extra instanceof Integer)) {
+                return false;
+            }
+            Integer preference = (Integer) extra;
+            return (preference == NativeAdOptions.ORIENTATION_ANY
+                    || preference == NativeAdOptions.ORIENTATION_LANDSCAPE
+                    || preference == NativeAdOptions.ORIENTATION_PORTRAIT);
+        }
+
+        /**
+         * Checks whether or not the provided extra value can be mapped to NativeAdOptions'
+         * AdChoices icon placement constants.
+         *
+         * @param extra to be checked if it is valid.
+         * @return {@code true} if the extra can be mapped to one of {@link NativeAdOptions}
+         * AdChoices icon placement constants, {@code false} otherwise.
+         */
+        private boolean isValidAdChoicesPlacementExtra(Object extra) {
+            if (extra == null || !(extra instanceof Integer)) {
+                return false;
+            }
+            Integer placement = (Integer) extra;
+            return (placement == NativeAdOptions.ADCHOICES_TOP_LEFT
+                    || placement == NativeAdOptions.ADCHOICES_TOP_RIGHT
+                    || placement == NativeAdOptions.ADCHOICES_BOTTOM_LEFT
+                    || placement == NativeAdOptions.ADCHOICES_BOTTOM_RIGHT);
+        }
+
+        /**
+         * This method will check whether or not the given content ad has all the required assets
+         * (title, text, main image url, icon url and call to action) for it to be correctly
+         * mapped to a {@link GooglePlayServicesNativeAd}.
+         *
+         * @param contentAd to be checked if it is valid.
+         * @return {@code true} if the given native content ad has all the necessary assets to
+         * create a {@link GooglePlayServicesNativeAd}, {@code false} otherwise.
+         */
+        private boolean isValidContentAd(NativeContentAd contentAd) {
+            return (contentAd.getHeadline() != null && contentAd.getBody() != null
+                    && contentAd.getImages() != null && contentAd.getImages().size() > 0
+                    && contentAd.getImages().get(0) != null && contentAd.getLogo() != null
+                    && contentAd.getCallToAction() != null);
+        }
+
+        /**
+         * This method will check whether or not the given native app install ad has all the
+         * required assets (title, text, main image url, icon url and call to action) for it to
+         * be correctly mapped to a {@link GooglePlayServicesNativeAd}.
+         *
+         * @param appInstallAd to checked if it is valid.
+         * @return {@code true} if the given native app install ad has all the necessary assets to
+         * to create a {@link GooglePlayServicesNativeAd}, {@code false} otherwise.
+         */
+        private boolean isValidAppInstallAd(NativeAppInstallAd appInstallAd) {
+            return (appInstallAd.getHeadline() != null && appInstallAd.getBody() != null
+                    && appInstallAd.getImages() != null && appInstallAd.getImages().size() > 0
+                    && appInstallAd.getImages().get(0) != null && appInstallAd.getIcon() != null
+                    && appInstallAd.getCallToAction() != null);
+        }
+
+        @Override
+        public void prepare(@NonNull View view) {
+            // Adding click and impression trackers is handled by the GooglePlayServicesRenderer,
+            // do nothing here.
+        }
+
+        @Override
+        public void clear(@NonNull View view) {
+            // Called when an ad is no longer displayed to a user.
+            GooglePlayServicesAdRenderer.removeGoogleNativeAdView(view, shouldSwapMargins());
+        }
+
+        @Override
+        public void destroy() {
+            // Called when the ad will never be displayed again.
+            if (mNativeContentAd != null) {
+                mNativeContentAd.destroy();
+            }
+            if (mNativeAppInstallAd != null) {
+                mNativeAppInstallAd.destroy();
+            }
+        }
+
+        /**
+         * This method will try to cache images and send success/failure callbacks based on
+         * whether or not the image caching succeeded.
+         *
+         * @param context   required to pre-cache images.
+         * @param imageUrls the urls of images that need to be cached.
+         */
+        private void preCacheImages(Context context, List<String> imageUrls) {
+            NativeImageHelper.preCacheImages(context, imageUrls,
+                    new NativeImageHelper.ImageListener() {
+                        @Override
+                        public void onImagesCached() {
+                            if (mNativeContentAd != null) {
+                                prepareNativeContentAd(mNativeContentAd);
+                                mCustomEventNativeListener.onNativeAdLoaded(
+                                        GooglePlayServicesNativeAd.this);
+                            } else if (mNativeAppInstallAd != null) {
+                                prepareNativeAppInstallAd(mNativeAppInstallAd);
+                                mCustomEventNativeListener.onNativeAdLoaded(
+                                        GooglePlayServicesNativeAd.this);
+                            }
+                        }
+
+                        @Override
+                        public void onImagesFailedToCache(NativeErrorCode errorCode) {
+                            mCustomEventNativeListener.onNativeAdFailed(errorCode);
+                        }
+                    });
+        }
+
+        /**
+         * This method will map the Google native content ad loaded to this
+         * {@link GooglePlayServicesNativeAd}.
+         *
+         * @param contentAd that needs to be mapped to this native ad.
+         */
+        private void prepareNativeContentAd(NativeContentAd contentAd) {
+            List<com.google.android.gms.ads.formats.NativeAd.Image> images = contentAd.getImages();
+            setMainImageUrl(images.get(0).getUri().toString());
+
+            com.google.android.gms.ads.formats.NativeAd.Image logo = contentAd.getLogo();
+            setIconImageUrl(logo.getUri().toString());
+
+            setCallToAction(contentAd.getCallToAction().toString());
+
+            setTitle(contentAd.getHeadline().toString());
+
+            setText(contentAd.getBody().toString());
+
+            setAdvertiser(contentAd.getAdvertiser().toString());
+        }
+
+        /**
+         * This method will map the Google native app install ad loaded to this
+         * {@link GooglePlayServicesNativeAd}.
+         *
+         * @param appInstallAd that needs to be mapped to this native ad.
+         */
+        private void prepareNativeAppInstallAd(NativeAppInstallAd appInstallAd) {
+            List<com.google.android.gms.ads.formats.NativeAd.Image> images =
+                    appInstallAd.getImages();
+            setMainImageUrl(images.get(0).getUri().toString());
+
+            com.google.android.gms.ads.formats.NativeAd.Image icon = appInstallAd.getIcon();
+            setIconImageUrl(icon.getUri().toString());
+
+            setCallToAction(appInstallAd.getCallToAction().toString());
+
+            setTitle(appInstallAd.getHeadline().toString());
+
+            setText(appInstallAd.getBody().toString());
+
+            if (appInstallAd.getStarRating() != null) {
+                setStarRating(appInstallAd.getStarRating());
+            }
+
+            // Add store asset if available.
+            if (appInstallAd.getStore() != null) {
+                setStore(appInstallAd.getStore().toString());
+            }
+
+            // Add price asset if available.
+            if (appInstallAd.getPrice() != null) {
+                setPrice(appInstallAd.getPrice().toString());
+            }
+        }
+    }
+}
diff --git a/extras/src/com/mopub/nativeads/MillennialNative.java b/extras/src/com/mopub/nativeads/MillennialNative.java
index 85070c23..5055e47d 100644
--- a/extras/src/com/mopub/nativeads/MillennialNative.java
+++ b/extras/src/com/mopub/nativeads/MillennialNative.java
@@ -1,16 +1,16 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
-import android.os.Handler;
-import android.os.Looper;
 import android.util.Log;
 import android.view.View;
 
 import com.millennialmedia.AppInfo;
+import com.millennialmedia.CreativeInfo;
 import com.millennialmedia.MMException;
+import com.millennialmedia.MMLog;
 import com.millennialmedia.MMSDK;
 import com.millennialmedia.NativeAd;
+import com.mopub.mobileads.MillennialUtils;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -18,182 +18,169 @@
 
 import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
 
+/**
+ * Compatible with version 6.6 of the Millennial Media SDK.
+ */
+
 public class MillennialNative extends CustomEventNative {
-    public static final String DCN_KEY = "dcn";
-    public static final String APID_KEY = "adUnitID";
-    private final static String LOGCAT_TAG = "MoPub->MM-Native";
-    private static final Handler UI_THREAD_HANDLER = new Handler(Looper.getMainLooper());
+    private static final String DCN_KEY = "dcn";
+    private static final String APID_KEY = "adUnitID";
+    private final static String TAG = MillennialNative.class.getSimpleName();
 
-    @Override
-    protected void loadNativeAd(final Context context,
-            final CustomEventNativeListener listener,
-            final Map<String, Object> localExtras,
-            final Map<String, String> serverExtras) {
+    MillennialStaticNativeAd staticNativeAd;
 
-        String placementId;
-        String siteId;
+    public CreativeInfo getCreativeInfo() {
 
-        if ( !MMSDK.isInitialized() ) {
-            try {
-                MMSDK.initialize((Activity) context);
-            } catch ( Exception e ) {
-                Log.e(LOGCAT_TAG, "Unable to initialize the Millennial SDK-- " + e.getMessage());
-                e.printStackTrace();
-                UI_THREAD_HANDLER.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        listener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                    }
-                });
-                return;
-            }
+        if (staticNativeAd == null) {
+            return null;
         }
 
-        if ( extrasAreValid( serverExtras )) {
-            placementId = serverExtras.get(APID_KEY);
-            siteId = serverExtras.get(DCN_KEY);
-        } else {
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    listener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
+        return staticNativeAd.getCreativeInfo();
+    }
+
+
+    @Override
+    protected void loadNativeAd(final Context context, final CustomEventNativeListener customEventNativeListener,
+                                Map<String, Object> localExtras, Map<String, String> serverExtras) {
+
+        if (!MillennialUtils.initSdk(context)) {
+            Log.e(TAG, "MM SDK must be initialized with an Activity or Application context.");
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
             return;
         }
 
-        try {
-            AppInfo ai = new AppInfo().setMediator("mopubsdk");
-            if ( siteId != null && siteId.length() > 0 ) {
-                ai = ai.setSiteId(siteId);
-            } else {
-                ai = ai.setSiteId(null);
-            }
+        String placementId = serverExtras.get(APID_KEY);
+        String siteId = serverExtras.get(DCN_KEY);
+
+        if (MillennialUtils.isEmpty(placementId)) {
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
 
-            MMSDK.setAppInfo(ai);
-        } catch ( IllegalStateException e ) {
-            Log.w(LOGCAT_TAG, "Caught exception: " + e.getMessage());
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    listener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
             return;
         }
 
+        AppInfo ai = new AppInfo().setMediator("mopubsdk").setSiteId(siteId);
+
         try {
+            MMSDK.setAppInfo(ai);
+
             NativeAd nativeAd = NativeAd.createInstance(placementId, NativeAd.NATIVE_TYPE_INLINE);
-            final MillennialStaticNativeAd millennialStaticNativeAd =
-                    new MillennialStaticNativeAd(context,
-                            nativeAd,
-                            new ImpressionTracker(context),
-                            new NativeClickHandler(context),
-                            listener);
-            millennialStaticNativeAd.loadAd();
-        } catch ( MMException e ) {
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    listener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
-        }
-    }
+            staticNativeAd = new MillennialStaticNativeAd(context, nativeAd, new ImpressionTracker(context),
+                    new NativeClickHandler(context), customEventNativeListener);
 
-    private boolean extrasAreValid(final Map<String, String> serverExtras) {
-        String placementId = serverExtras.get(APID_KEY);
-        return (serverExtras.containsKey(APID_KEY) &&
-                placementId != null && placementId.length() > 0 );
+            staticNativeAd.loadAd();
+
+        } catch (MMException e) {
+            Log.e(TAG, "An exception occurred loading a native ad from MM SDK", e);
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+        }
     }
 
 
     static class MillennialStaticNativeAd extends StaticNativeAd implements NativeAd.NativeListener {
-        private final Context mContext;
-        private NativeAd mNativeAd;
-        private final ImpressionTracker mImpressionTracker;
-        private final NativeClickHandler mNativeClickHandler;
-        private final CustomEventNativeListener mListener;
-        private final MillennialStaticNativeAd mMillennialStaticNativeAd;
-
-        public MillennialStaticNativeAd(final Context context,
-                final NativeAd nativeAd,
-                final ImpressionTracker impressionTracker,
-                final NativeClickHandler nativeClickHandler,
-                final CustomEventNativeListener customEventNativeListener) {
-            mContext = context.getApplicationContext();
-            mNativeAd = nativeAd;
-            mImpressionTracker = impressionTracker;
-            mNativeClickHandler = nativeClickHandler;
-            mListener = customEventNativeListener;
-            mMillennialStaticNativeAd = this;
+
+        private final Context context;
+        private NativeAd nativeAd;
+        private final ImpressionTracker impressionTracker;
+        private final NativeClickHandler nativeClickHandler;
+        private final CustomEventNativeListener listener;
+
+
+        public MillennialStaticNativeAd(final Context context, final NativeAd nativeAd,
+                                        final ImpressionTracker impressionTracker, final NativeClickHandler nativeClickHandler,
+                                        final CustomEventNativeListener customEventNativeListener) {
+
+            this.context = context.getApplicationContext();
+            this.nativeAd = nativeAd;
+            this.impressionTracker = impressionTracker;
+            this.nativeClickHandler = nativeClickHandler;
+            listener = customEventNativeListener;
 
             nativeAd.setListener(this);
         }
 
-        void loadAd() {
-            Log.i(LOGCAT_TAG, "Loading native ad...");
-            try {
-                mNativeAd.load(mContext, null);
-            } catch (MMException e) {
-                Log.w(MillennialNative.LOGCAT_TAG, "Caught configuration error Exception.");
-                e.printStackTrace();
-                UI_THREAD_HANDLER.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        mListener.onNativeAdFailed(NativeErrorCode
-                                .NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                    }
-                });
+
+        void loadAd() throws MMException {
+
+            Log.d(TAG, "Millennial native ad loading.");
+
+            nativeAd.load(context, null);
+        }
+
+
+        CreativeInfo getCreativeInfo() {
+
+            if (nativeAd == null) {
+                return null;
             }
+
+            return nativeAd.getCreativeInfo();
         }
 
+
         // Lifecycle Handlers
         @Override
         public void prepare(final View view) {
             // Must access these methods directly to get impressions to fire.
-            mNativeAd.getIconImage();
-            mNativeAd.getDisclaimer();
-            mImpressionTracker.addView(view, this);
-            mNativeClickHandler.setOnClickListener(view, this);
+            nativeAd.getIconImage();
+            nativeAd.getDisclaimer();
+            impressionTracker.addView(view, this);
+            nativeClickHandler.setOnClickListener(view, this);
         }
 
+
         @Override
         public void clear(final View view) {
-            mImpressionTracker.removeView(view);
-            mNativeClickHandler.clearOnClickListener(view);
+
+            impressionTracker.removeView(view);
+            nativeClickHandler.clearOnClickListener(view);
         }
 
+
         @Override
         public void destroy() {
-            mImpressionTracker.destroy();
-            mNativeAd.setListener(null);
-            mNativeAd = null;
+
+            impressionTracker.destroy();
+            nativeAd.destroy();
+            nativeAd = null;
         }
 
+
         // Event Handlers
         @Override
         public void recordImpression(final View view) {
+
             notifyAdImpressed();
+
             try {
-                mNativeAd.fireImpression();
-                Log.i(LOGCAT_TAG, "Millennial native impression recorded.");
-            } catch ( MMException m ) {
-                Log.e(LOGCAT_TAG, "Millennial native impression NOT tracked: " + m.getMessage() );
+                nativeAd.fireImpression();
+                Log.d(TAG, "Millennial native ad impression recorded.");
+            } catch (MMException e) {
+                Log.e(TAG, "Error tracking Millennial native ad impression", e);
             }
         }
 
+
         @Override
         public void handleClick(final View view) {
+
             notifyAdClicked();
-            mNativeClickHandler.openClickDestinationUrl(getClickDestinationUrl(), view);
-            mNativeAd.fireClicked();
-            Log.i(LOGCAT_TAG, "Millennial native ad clicked!");
+
+            nativeClickHandler.openClickDestinationUrl(getClickDestinationUrl(), view);
+            nativeAd.fireCallToActionClicked();
+            Log.d(TAG, "Millennial native ad clicked.");
         }
 
-        // MM'S Native mListener
+
+        // MM'S Native listener
         @Override
         public void onLoaded(NativeAd nativeAd) {
+
+            CreativeInfo creativeInfo = getCreativeInfo();
+            if ((creativeInfo != null) && MMLog.isDebugEnabled()) {
+
+                MMLog.d(TAG, "Native Creative Info: " + creativeInfo);
+            }
+
             // Set assets
             String iconImageUrl = nativeAd.getImageUrl(NativeAd.ComponentName.ICON_IMAGE, 1);
             String mainImageUrl = nativeAd.getImageUrl(NativeAd.ComponentName.MAIN_IMAGE, 1);
@@ -204,13 +191,12 @@ public void onLoaded(NativeAd nativeAd) {
 
             final String clickDestinationUrl = nativeAd.getCallToActionUrl();
             if (clickDestinationUrl == null) {
-                UI_THREAD_HANDLER.post(new Runnable() {
+                MillennialUtils.postOnUiThread(new Runnable() {
                     @Override
                     public void run() {
-                        Log.d(LOGCAT_TAG,
-                                "Millennial native encountered null destination url. Failing over.");
-                        mListener.onNativeAdFailed(
-                                NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+
+                        Log.d(TAG, "Millennial native ad encountered null destination url.");
+                        listener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
                     }
                 });
                 return;
@@ -220,24 +206,31 @@ public void run() {
             setIconImageUrl(iconImageUrl);
             setMainImageUrl(mainImageUrl);
 
-            final List<String> urls = new ArrayList<String>();
-            if ( iconImageUrl != null ) { urls.add(iconImageUrl); }
-            if ( mainImageUrl != null ) { urls.add(mainImageUrl); }
+            final List<String> urls = new ArrayList<>();
+            if (iconImageUrl != null) {
+                urls.add(iconImageUrl);
+            }
+            if (mainImageUrl != null) {
+                urls.add(mainImageUrl);
+            }
+
+            addExtra("disclaimer", nativeAd.getDisclaimer().getText());
 
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
                     // This has to be run on the main thread:
-                    preCacheImages(mContext, urls, new NativeImageHelper.ImageListener() {
+                    preCacheImages(context, urls, new NativeImageHelper.ImageListener() {
                         @Override
                         public void onImagesCached() {
-                            mListener.onNativeAdLoaded(mMillennialStaticNativeAd);
-                            Log.i(LOGCAT_TAG, "Millennial native ad loaded");
+                            listener.onNativeAdLoaded(MillennialStaticNativeAd.this);
+                            Log.d(TAG, "Millennial native ad loaded.");
                         }
 
+
                         @Override
                         public void onImagesFailedToCache(NativeErrorCode errorCode) {
-                            mListener.onNativeAdFailed(errorCode);
+                            listener.onNativeAdFailed(errorCode);
                         }
                     });
 
@@ -245,10 +238,12 @@ public void onImagesFailedToCache(NativeErrorCode errorCode) {
             });
         }
 
+
         @Override
         public void onLoadFailed(NativeAd nativeAd, NativeAd.NativeErrorStatus nativeErrorStatus) {
+
             final NativeErrorCode error;
-            switch ( nativeErrorStatus.getErrorCode() ) {
+            switch (nativeErrorStatus.getErrorCode()) {
                 case NativeAd.NativeErrorStatus.LOAD_TIMED_OUT:
                     error = NativeErrorCode.NETWORK_TIMEOUT;
                     break;
@@ -272,29 +267,36 @@ public void onLoadFailed(NativeAd nativeAd, NativeAd.NativeErrorStatus nativeErr
                 default:
                     error = NativeErrorCode.NETWORK_NO_FILL;
             }
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mListener.onNativeAdFailed(error);
+
+                    listener.onNativeAdFailed(error);
                 }
             });
-            Log.i(LOGCAT_TAG, "Millennial native ad failed: " + nativeErrorStatus.getDescription() );
+            Log.i(TAG, "Millennial native ad failed: " + nativeErrorStatus.getDescription());
         }
 
+
         @Override
         public void onClicked(NativeAd nativeAd, NativeAd.ComponentName componentName, int i) {
-            Log.i(LOGCAT_TAG, "Millennial native SDK's click tracker fired.");
+
+            Log.d(TAG, "Millennial native ad click tracker fired.");
         }
 
+
         @Override
         public void onAdLeftApplication(NativeAd nativeAd) {
-            Log.i(LOGCAT_TAG, "Millennial native SDK has left the application.");
+
+            Log.d(TAG, "Millennial native ad has left the application.");
 
         }
 
+
         @Override
         public void onExpired(NativeAd nativeAd) {
-            Log.i(LOGCAT_TAG, "Millennial native ad has expired!");
+
+            Log.d(TAG, "Millennial native ad has expired!");
         }
 
     }
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 1e12d0b2..8b60e124 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Jun 20 17:07:26 PDT 2016
+#Tue Sep 06 11:08:36 PDT 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-all.zip
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index f7dd6ffc..814b58ea 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,26 +1,35 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="44"
-      android:versionName="4.9.0">
-    <uses-sdk android:minSdkVersion="9"
-              android:targetSdkVersion="23"/>
+      android:versionCode="57"
+      android:versionName="4.19.0">
+    <uses-sdk android:minSdkVersion="16"
+              android:targetSdkVersion="24"/>
 
     <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
 
-    <!-- For MRAID 2 -->
+    <!--WRITE_EXTERNAL_STORAGE is optional and only required for MRAID 2.0 storePicture ads.-->
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
 
-    <application android:icon="@drawable/icon" android:label="@string/app_name">
+    <application android:icon="@drawable/icon" android:label="@string/app_name"
+                 android:networkSecurityConfig="@xml/network_security_config">
 	    <activity android:name="com.mopub.simpleadsdemo.MoPubSampleActivity"
 	            android:label="@string/app_name"
+                android:launchMode="singleInstance"
                 android:configChanges="orientation|screenSize">
 	        <intent-filter>
 	            <action android:name="android.intent.action.MAIN" />
 	            <category android:name="android.intent.category.LAUNCHER" />
 	        </intent-filter>
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <data android:scheme="mopub"
+                      android:host="load" />
+            </intent-filter>
 	    </activity>
         <activity android:name="com.mopub.mobileads.MoPubActivity"
                 android:configChanges="keyboardHidden|orientation|screenSize"/>
@@ -30,6 +39,8 @@
                 android:configChanges="keyboardHidden|orientation|screenSize"/>
         <activity android:name="com.mopub.mobileads.MraidVideoPlayerActivity"
                 android:configChanges="keyboardHidden|orientation|screenSize"/>
+        <activity android:name="com.mopub.mobileads.RewardedMraidActivity"
+                  android:configChanges="keyboardHidden|orientation|screenSize"/>
 
         <meta-data android:name="com.google.android.gms.version"
                    android:value="@integer/google_play_services_version" />
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index b123a744..a54d0f60 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -3,24 +3,26 @@ repositories {
     flatDir {
         dirs '../libs'
     }
+    maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
+    maven { url 'https://maven.google.com' }
 }
 
 apply plugin: 'com.android.application'
 
 project.group = 'com.mopub'
 project.description = '''MoPub Sample App'''
-project.version = '4.9.0'
+project.version = '4.19.0'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion '23.0.2'
+    compileSdkVersion 26
+    buildToolsVersion '26.0.2'
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 44
+        versionCode 57
         versionName version
-        minSdkVersion 9
-        targetSdkVersion 23
+        minSdkVersion 16
+        targetSdkVersion 26
     }
 
     buildTypes {
@@ -55,8 +57,9 @@ android {
 }
 
 dependencies {
-    compile 'com.android.support:support-v4:23.1.1'
-    compile 'com.google.android.gms:play-services-ads:7.8.0'
-    compile 'com.android.support:recyclerview-v7:23.1.1'
+    compile 'com.android.support:support-v4:26.1.0'
+    compile 'com.google.android.gms:play-services-ads:11.4.0'
+    compile 'com.google.android.gms:play-services-base:11.4.0'
+    compile 'com.android.support:recyclerview-v7:26.1.0'
     compile project(':mopub-sdk')
 }
diff --git a/mopub-sample/proguard.cfg b/mopub-sample/proguard.cfg
index 9b84b5cf..bff255cd 100644
--- a/mopub-sample/proguard.cfg
+++ b/mopub-sample/proguard.cfg
@@ -11,6 +11,10 @@
 -keep class * extends com.mopub.mobileads.CustomEventBanner {}
 -keep class * extends com.mopub.mobileads.CustomEventInterstitial {}
 -keep class * extends com.mopub.nativeads.CustomEventNative {}
+-keep class * extends com.mopub.nativeads.CustomEventRewardedAd {}
+
+# Keep methods that are accessed via reflection
+-keepclassmembers class ** { @com.mopub.common.util.ReflectionTarget *; }
 
 # Support for Android Advertiser ID.
 -keep class com.google.android.gms.common.GooglePlayServicesUtil {*;}
diff --git a/mopub-sample/res/layout/interstitial_detail_fragment.xml b/mopub-sample/res/layout/interstitial_detail_fragment.xml
index 37aebae5..6f060ff6 100644
--- a/mopub-sample/res/layout/interstitial_detail_fragment.xml
+++ b/mopub-sample/res/layout/interstitial_detail_fragment.xml
@@ -37,6 +37,16 @@
         android:imeOptions="actionDone"
         android:singleLine="true" />
 
+    <EditText
+        android:id="@+id/custom_data_field"
+        android:visibility="gone"
+        android:hint="@string/custom_data"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:inputType="text|textFilter|textShortMessage"
+        android:imeOptions="actionDone"
+        android:singleLine="true" />
+
     <LinearLayout
         android:orientation="horizontal"
         android:layout_width="match_parent"
@@ -50,7 +60,7 @@
             android:layout_weight="1" />
 
         <Button
-            android:id="@+id/interstitial_show_button"
+            android:id="@+id/show_button"
             android:text="@string/show_ad"
             android:layout_width="0dp"
             android:layout_height="wrap_content"
diff --git a/mopub-sample/res/values/strings.xml b/mopub-sample/res/values/strings.xml
index a1deb782..98143ede 100644
--- a/mopub-sample/res/values/strings.xml
+++ b/mopub-sample/res/values/strings.xml
@@ -2,6 +2,7 @@
 <resources>
     <string name="app_name">MoPub Sample App</string>
     <string name="keywords">Keywords (optional)</string>
+    <string name="custom_data">Custom Data (optional)</string>
     <string name="load_ad">Load Ad</string>
     <string name="refresh_ad">Refresh Ad</string>
     <string name="switch_layout">Switch Layout</string>
@@ -23,6 +24,7 @@
     <string name="ad_unit_id_leaderboard">a8919cca19784497872ae69d48f678e1</string>
     <string name="ad_unit_id_interstitial">24534e1901884e398f1253216226017e</string>
     <string name="ad_unit_id_rewarded_video">920b6145fb1546cf8b5cf2ac34638bb7</string>
+    <string name="ad_unit_id_rewarded_rich_media">15173ac6d3e54c9389b9a5ddca69b34b</string>
     <string name="ad_unit_id_native">11a17b188668469fb0412708c3d16813</string>
     <string name="swipe_text"><![CDATA[< Swipe Left & Right >]]></string>
 </resources>
diff --git a/mopub-sample/res/xml/network_security_config.xml b/mopub-sample/res/xml/network_security_config.xml
new file mode 100644
index 00000000..ed36e236
--- /dev/null
+++ b/mopub-sample/res/xml/network_security_config.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<network-security-config>
+    <base-config>
+        <trust-anchors>
+            <certificates src="system"/>
+        </trust-anchors>
+    </base-config>
+    <debug-overrides>
+        <trust-anchors>
+            <certificates src="user"/>
+        </trust-anchors>
+    </debug-overrides>
+</network-security-config>
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
index f4ee63c9..c92575b3 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
@@ -44,6 +44,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
         layoutParams.height = getHeight();
         mMoPubView.setLayoutParams(layoutParams);
 
+        views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
         hideSoftKeyboard(views.mKeywordsField);
 
         final String adUnitId = mMoPubSampleAdUnit.getAdUnitId();
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
index e95f9bce..3a1b987b 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
@@ -4,7 +4,9 @@
 import android.content.Context;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
+import android.support.annotation.NonNull;
 
+import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
 
 import java.util.ArrayList;
@@ -53,7 +55,10 @@ MoPubSampleAdUnit createSampleAdUnit(final MoPubSampleAdUnit sampleAdUnit) {
     }
 
     private MoPubSampleAdUnit createSampleAdUnit(final MoPubSampleAdUnit sampleAdUnit,
-                                                 final boolean isUserGenerated) {
+            final boolean isUserGenerated) {
+        deleteAllAdUnitsWithAdUnitIdAndAdType(sampleAdUnit.getAdUnitId(),
+                sampleAdUnit.getFragmentClassName());
+
         final ContentValues values = new ContentValues();
         final int userGenerated = isUserGenerated ? 1 : 0;
         values.put(COLUMN_AD_UNIT_ID, sampleAdUnit.getAdUnitId());
@@ -85,6 +90,20 @@ void deleteSampleAdUnit(final MoPubSampleAdUnit adConfiguration) {
         database.close();
     }
 
+    private void deleteAllAdUnitsWithAdUnitIdAndAdType(@NonNull final String adUnitId,
+            @NonNull final String adType) {
+        Preconditions.checkNotNull(adUnitId);
+        Preconditions.checkNotNull(adType);
+
+        final SQLiteDatabase database = mDatabaseHelper.getWritableDatabase();
+        final int numDeletedRows = database.delete(TABLE_AD_CONFIGURATIONS,
+                COLUMN_AD_UNIT_ID + " = '" + adUnitId +
+                "' AND " + COLUMN_USER_GENERATED + " = 1 AND " +
+                COLUMN_AD_TYPE + " = '" + adType + "'", null);
+        MoPubLog.d(numDeletedRows + " rows deleted with adUnitId: " + adUnitId);
+        database.close();
+    }
+
     List<MoPubSampleAdUnit> getAllAdUnits() {
         final List<MoPubSampleAdUnit> adConfigurations = new ArrayList<>();
         SQLiteDatabase database = mDatabaseHelper.getReadableDatabase();
@@ -94,7 +113,9 @@ void deleteSampleAdUnit(final MoPubSampleAdUnit adConfiguration) {
 
         while (!cursor.isAfterLast()) {
             final MoPubSampleAdUnit adConfiguration = cursorToAdConfiguration(cursor);
-            adConfigurations.add(adConfiguration);
+            if (adConfiguration != null) {
+                adConfigurations.add(adConfiguration);
+            }
             cursor.moveToNext();
         }
 
@@ -131,6 +152,12 @@ void deleteSampleAdUnit(final MoPubSampleAdUnit adConfiguration) {
                         REWARDED_VIDEO)
                         .description("MoPub Rewarded Video Sample")
                         .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_rewarded_rich_media),
+                        REWARDED_VIDEO)
+                        .description("MoPub Rewarded Rich Media Sample")
+                        .build());
         adUnitList.add(
                 new MoPubSampleAdUnit
                         .Builder(mContext.getString(R.string.ad_unit_id_native), LIST_VIEW)
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/DetailFragmentViewHolder.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/DetailFragmentViewHolder.java
index ca780f7e..8d870afd 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/DetailFragmentViewHolder.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/DetailFragmentViewHolder.java
@@ -1,31 +1,61 @@
 package com.mopub.simpleadsdemo;
 
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.View;
 import android.widget.Button;
 import android.widget.EditText;
 import android.widget.TextView;
 
+/**
+ * ViewHolder data object that parses and stores named child Views for sample app DetailFragments,
+ * e.g. {@link InterstitialDetailFragment}.
+ */
 class DetailFragmentViewHolder {
-    final TextView mDescriptionView;
-    final Button mLoadButton;
-    final TextView mAdUnitIdView;
-    final EditText mKeywordsField;
+    @NonNull final TextView mDescriptionView;
+    @NonNull final Button mLoadButton;
+    @Nullable final Button mShowButton;
+    @NonNull final TextView mAdUnitIdView;
+    @NonNull final EditText mKeywordsField;
+    @Nullable final EditText mCustomDataField;
 
-    DetailFragmentViewHolder(final TextView descriptionView, final TextView adUnitIdView,
-            final EditText keywordsField, final Button loadButton) {
+    /**
+     * Internal constructor. Use {@link #fromView(View)} to create instances of this class.
+     *
+     * @param descriptionView Displays ad full name, e.g. "MoPub Banner Sample"
+     * @param adUnitIdView Displays adUnitId
+     * @param loadButton Loads an ad. For non-cached ad formats, this will also display the ad
+     * @param showButton Displays an ad. (optional, only defined for interstitial and rewarded ads)
+     * @param keywordsField Keyword entry field. This is eventually passed in the 'q' query
+     *                      parameter in the ad request
+     * @param customDataField Custom data entry field. Used to include arbitrary data to rewarded
+     *                        completion URLs. View visibility defaults to {@link View#GONE}.
+     *                        (optional, only defined for rewarded ads)
+     */
+    private DetailFragmentViewHolder(
+            @NonNull final TextView descriptionView,
+            @NonNull final TextView adUnitIdView,
+            @NonNull final Button loadButton,
+            @Nullable final Button showButton,
+            @NonNull final EditText keywordsField,
+            @Nullable final EditText customDataField) {
         mDescriptionView = descriptionView;
         mAdUnitIdView = adUnitIdView;
-        mKeywordsField = keywordsField;
         mLoadButton = loadButton;
+        mShowButton = showButton;
+        mKeywordsField = keywordsField;
+        mCustomDataField = customDataField;
     }
 
-    static DetailFragmentViewHolder fromView(final View view) {
+    static DetailFragmentViewHolder fromView(@NonNull final View view) {
         final TextView descriptionView = (TextView) view.findViewById(R.id.description);
         final TextView adUnitIdView = (TextView) view.findViewById(R.id.ad_unit_id);
-        final EditText keywordsField = (EditText) view.findViewById(R.id.keywords_field);
         final Button loadButton = (Button) view.findViewById(R.id.load_button);
+        final Button showButton = (Button) view.findViewById(R.id.show_button);
+        final EditText keywordsField = (EditText) view.findViewById(R.id.keywords_field);
+        final EditText customDataField = (EditText) view.findViewById(R.id.custom_data_field);
 
-        return new DetailFragmentViewHolder(descriptionView, adUnitIdView,
-                keywordsField, loadButton);
+        return new DetailFragmentViewHolder(descriptionView, adUnitIdView, loadButton, showButton,
+                keywordsField, customDataField);
     }
 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
index ff1337ac..fec98dd9 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
@@ -25,6 +25,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
                 MoPubSampleAdUnit.fromBundle(getArguments());
         final View view = inflater.inflate(R.layout.interstitial_detail_fragment, container, false);
         final DetailFragmentViewHolder views = DetailFragmentViewHolder.fromView(view);
+        views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
         hideSoftKeyboard(views.mKeywordsField);
 
         final String adUnitId = adConfiguration.getAdUnitId();
@@ -43,7 +44,7 @@ public void onClick(View view) {
                 mMoPubInterstitial.load();
             }
         });
-        mShowButton = (Button) view.findViewById(R.id.interstitial_show_button);
+        mShowButton = views.mShowButton;
         mShowButton.setEnabled(false);
         mShowButton.setOnClickListener(new View.OnClickListener() {
             @Override
@@ -74,6 +75,7 @@ public void onInterstitialLoaded(MoPubInterstitial interstitial) {
 
     @Override
     public void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode) {
+        mShowButton.setEnabled(false);
         final String errorMessage = (errorCode != null) ? errorCode.toString() : "";
         logToast(getActivity(), "Interstitial failed to load: " + errorMessage);
     }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
index d655656c..ce6d1e79 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
@@ -3,11 +3,15 @@
 import android.app.AlertDialog;
 import android.app.Dialog;
 import android.content.DialogInterface;
+import android.net.Uri;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.v4.app.DialogFragment;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentTransaction;
 import android.support.v4.app.ListFragment;
+import android.text.TextUtils;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -20,12 +24,14 @@
 import android.widget.Toast;
 
 import com.mopub.common.MoPub;
+import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
 
 import java.util.ArrayList;
 import java.util.List;
 
 import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType;
+import static com.mopub.simpleadsdemo.Utils.logToast;
 
 
 interface TrashCanClickListener {
@@ -33,6 +39,12 @@
 }
 
 public class MoPubListFragment extends ListFragment implements TrashCanClickListener {
+
+    private static final String AD_UNIT_ID_KEY = "adUnitId";
+    private static final String FORMAT_KEY = "format";
+    static final String KEYWORDS_KEY = "keywords";
+    private static final String NAME_KEY = "name";
+
     private MoPubSampleListAdapter mAdapter;
     private AdUnitDataSource mAdUnitDataSource;
 
@@ -44,6 +56,33 @@ public void onCreate(Bundle savedInstanceState) {
         initializeAdapter();
     }
 
+    void addAdUnitViaDeeplink(@Nullable final Uri deeplinkData) {
+        if (deeplinkData == null) {
+            return;
+        }
+
+        final String adUnitId = deeplinkData.getQueryParameter(AD_UNIT_ID_KEY);
+        try {
+            Utils.validateAdUnitId(adUnitId);
+        } catch (IllegalArgumentException e) {
+            logToast(getContext(), "Ignoring invalid ad unit: " + adUnitId);
+            return;
+        }
+
+        final String format = deeplinkData.getQueryParameter(FORMAT_KEY);
+        final AdType adType = AdType.fromDeeplinkString(format);
+        if (adType == null) {
+            logToast(getContext(), "Ignoring invalid ad format: " + format);
+            return;
+        }
+
+        final String name = deeplinkData.getQueryParameter(NAME_KEY);
+        final MoPubSampleAdUnit adUnit = new MoPubSampleAdUnit.Builder(adUnitId,
+                adType).description(name == null ? "" : name).build();
+        final MoPubSampleAdUnit newAdUnit = addAdUnit(adUnit);
+        enterAdFragment(newAdUnit, deeplinkData.getQueryParameter(KEYWORDS_KEY));
+    }
+
     @Override
     public View onCreateView(final LayoutInflater inflater, final ViewGroup container, final Bundle savedInstanceState) {
         final View view = inflater.inflate(R.layout.ad_unit_list_fragment, container, false);
@@ -67,6 +106,15 @@ public void onListItemClick(ListView listView, View view, int position, long id)
 
         final MoPubSampleAdUnit adConfiguration = mAdapter.getItem(position);
 
+        if (adConfiguration != null) {
+            enterAdFragment(adConfiguration, null);
+        }
+    }
+
+    private void enterAdFragment(@NonNull final MoPubSampleAdUnit adConfiguration,
+            @Nullable final String keywords) {
+        Preconditions.checkNotNull(adConfiguration);
+
         final FragmentTransaction fragmentTransaction =
                 getActivity().getSupportFragmentManager().beginTransaction();
 
@@ -83,7 +131,15 @@ public void onListItemClick(ListView listView, View view, int position, long id)
             return;
         }
 
-        fragment.setArguments(adConfiguration.toBundle());
+        final Bundle bundle = adConfiguration.toBundle();
+        if (!TextUtils.isEmpty(keywords)) {
+            bundle.putString(KEYWORDS_KEY, keywords);
+        }
+        fragment.setArguments(bundle);
+
+        if (getFragmentManager().getBackStackEntryCount() > 0) {
+            getFragmentManager().popBackStack();
+        }
 
         fragmentTransaction
                 .replace(R.id.fragment_container, fragment)
@@ -130,10 +186,28 @@ public void onPause() {
         super.onPause();
     }
 
-    void addAdUnit(final MoPubSampleAdUnit moPubSampleAdUnit) {
-        MoPubSampleAdUnit createdAdUnit = mAdUnitDataSource.createSampleAdUnit(moPubSampleAdUnit);
+    @NonNull
+    MoPubSampleAdUnit addAdUnit(@NonNull final MoPubSampleAdUnit moPubSampleAdUnit) {
+        Preconditions.checkNotNull(moPubSampleAdUnit);
+
+        final MoPubSampleAdUnit createdAdUnit =
+                mAdUnitDataSource.createSampleAdUnit(moPubSampleAdUnit);
+
+        for (int i = 0; i < mAdapter.getCount(); i++) {
+            final MoPubSampleAdUnit currentAdUnit = mAdapter.getItem(i);
+            if (currentAdUnit != null &&
+                    moPubSampleAdUnit.getAdUnitId().equals(currentAdUnit.getAdUnitId()) &&
+                    moPubSampleAdUnit.getFragmentClassName().equals(
+                            currentAdUnit.getFragmentClassName()) &&
+                    currentAdUnit.isUserDefined()) {
+                mAdapter.remove(currentAdUnit);
+                logToast(getContext(), moPubSampleAdUnit.getAdUnitId() + " replaced.");
+                break;
+            }
+        }
         mAdapter.add(createdAdUnit);
         mAdapter.sort(MoPubSampleAdUnit.COMPARATOR);
+        return createdAdUnit;
     }
 
     void deleteAdUnit(final MoPubSampleAdUnit moPubSampleAdUnit) {
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
index fc175ea0..a40e9dfb 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
@@ -1,11 +1,12 @@
 package com.mopub.simpleadsdemo;
 
 import android.annotation.TargetApi;
+import android.content.Intent;
 import android.os.Build;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.support.v4.app.ActivityCompat;
 import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentManager;
 import android.webkit.WebView;
 
 import com.mopub.common.MoPub;
@@ -37,6 +38,9 @@ private static void setWebDebugging() {
         }
     }
 
+    private MoPubListFragment mMoPubListFragment;
+    private Intent mDeeplinkIntent;
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -63,17 +67,35 @@ protected void onCreate(Bundle savedInstanceState) {
         MoPub.setLocationAwareness(MoPub.LocationAwareness.TRUNCATED);
         MoPub.setLocationPrecision(4);
 
-        if (findViewById(R.id.fragment_container) != null) {
-            final MoPubListFragment listFragment = new MoPubListFragment();
-            listFragment.setArguments(getIntent().getExtras());
-            FragmentManager fragmentManager = getSupportFragmentManager();
-            fragmentManager.beginTransaction()
-                    .add(R.id.fragment_container, listFragment)
-                    .commit();
-        }
+        createMoPubListFragment(getIntent());
 
         // Intercepts all logs including Level.FINEST so we can show a toast
         // that is not normally user-facing. This is only used for native ads.
         LoggingUtils.enableCanaryLogging(this);
     }
+
+    private void createMoPubListFragment(@NonNull final Intent intent) {
+        if (findViewById(R.id.fragment_container) != null) {
+            mMoPubListFragment = new MoPubListFragment();
+            mMoPubListFragment.setArguments(intent.getExtras());
+            getSupportFragmentManager().beginTransaction()
+                    .replace(R.id.fragment_container, mMoPubListFragment).commit();
+
+            mDeeplinkIntent = intent;
+        }
+    }
+
+    @Override
+    public void onNewIntent(@NonNull final Intent intent) {
+        mDeeplinkIntent = intent;
+    }
+
+    @Override
+    public void onPostResume() {
+        super.onPostResume();
+        if (mMoPubListFragment != null && mDeeplinkIntent != null) {
+            mMoPubListFragment.addAdUnitViaDeeplink(mDeeplinkIntent.getData());
+            mDeeplinkIntent = null;
+        }
+    }
 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
index f6573175..ea3bb0d3 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
@@ -2,9 +2,11 @@
 
 import android.os.Bundle;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.v4.app.Fragment;
 
 import java.util.Comparator;
+import java.util.Locale;
 
 class MoPubSampleAdUnit implements Comparable<MoPubSampleAdUnit> {
 
@@ -51,6 +53,35 @@ static AdType fromFragmentClassName(final String fragmentClassName) {
 
             return null;
         }
+
+        @Nullable
+        static AdType fromDeeplinkString(@Nullable final String adType) {
+            if (adType == null) {
+                return null;
+            }
+            switch (adType.toLowerCase(Locale.US)) {
+                case "banner":
+                    return BANNER;
+                case "interstitial":
+                    return INTERSTITIAL;
+                case "mrect":
+                    return MRECT;
+                case "leaderboard":
+                    return LEADERBOARD;
+                case "skyscraper":
+                    return SKYSCRAPER;
+                case "rewarded":
+                    return REWARDED_VIDEO;
+                case "native":
+                    return LIST_VIEW;
+                case "nativetableplacer":
+                    return RECYCLER_VIEW;
+                case "nativecollectionplacer":
+                    return CUSTOM_NATIVE;
+                default:
+                    return null;
+            }
+        }
     }
 
     static final Comparator<MoPubSampleAdUnit> COMPARATOR =
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
index b7141689..b62f18c5 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
@@ -69,6 +69,7 @@ public void onClick(View view) {
         final String adUnitId = mAdConfiguration.getAdUnitId();
         views.mDescriptionView.setText(mAdConfiguration.getDescription());
         views.mAdUnitIdView.setText(adUnitId);
+        views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
         mViewPager = (ViewPager) view.findViewById(R.id.gallery_pager);
 
         // Set up a renderer for a static native ad.
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
index b0e6cc5e..6616d4e3 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
@@ -64,6 +64,7 @@ public void onClick(View view) {
         final String adUnitId = mAdConfiguration.getAdUnitId();
         views.mDescriptionView.setText(mAdConfiguration.getDescription());
         views.mAdUnitIdView.setText(adUnitId);
+        views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
 
         final ArrayAdapter<String> adapter = new ArrayAdapter<String>(getActivity(),
                 android.R.layout.simple_list_item_1);
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
index 472a5648..f9b9d095 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
@@ -80,6 +80,7 @@ public void onClick(final View v) {
         final String adUnitId = mAdConfiguration.getAdUnitId();
         viewHolder.mDescriptionView.setText(mAdConfiguration.getDescription());
         viewHolder.mAdUnitIdView.setText(adUnitId);
+        viewHolder.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
 
         final RecyclerView.Adapter originalAdapter = new DemoRecyclerAdapter();
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
index 19e7825b..8f66f3d2 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
@@ -1,21 +1,30 @@
 package com.mopub.simpleadsdemo;
 
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.content.DialogInterface;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.support.v4.app.DialogFragment;
 import android.support.v4.app.Fragment;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.Button;
 
-import com.mopub.common.MoPub;
 import com.mopub.common.MoPubReward;
+import com.mopub.mobileads.CustomEventRewardedVideo;
 import com.mopub.mobileads.MoPubErrorCode;
 import com.mopub.mobileads.MoPubRewardedVideoListener;
 import com.mopub.mobileads.MoPubRewardedVideoManager.RequestParameters;
+import com.mopub.mobileads.MoPubRewardedVideos;
 
+import java.util.HashMap;
+import java.util.LinkedList;
+import java.util.List;
 import java.util.Locale;
+import java.util.Map;
 import java.util.Set;
 
 import static com.mopub.simpleadsdemo.Utils.hideSoftKeyboard;
@@ -25,8 +34,14 @@
 
     private static boolean sRewardedVideoInitialized;
 
+    // Include any custom event rewarded video classes, if available, for initialization.
+    private static final List<Class<? extends CustomEventRewardedVideo>> sNetworksToInit =
+            new LinkedList<>();
+
     @Nullable private Button mShowButton;
     @Nullable private String mAdUnitId;
+    @Nullable private Map<String, MoPubReward> mMoPubRewardsMap;
+    @Nullable private MoPubReward mSelectedReward;
 
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
@@ -35,15 +50,18 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
                 MoPubSampleAdUnit.fromBundle(getArguments());
         final View view = inflater.inflate(R.layout.interstitial_detail_fragment, container, false);
         final DetailFragmentViewHolder views = DetailFragmentViewHolder.fromView(view);
+        views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
         hideSoftKeyboard(views.mKeywordsField);
 
         if (!sRewardedVideoInitialized) {
-            MoPub.initializeRewardedVideo(getActivity());
+            MoPubRewardedVideos.initializeRewardedVideo(getActivity(), sNetworksToInit);
             sRewardedVideoInitialized = true;
         }
-        MoPub.setRewardedVideoListener(this);
+        MoPubRewardedVideos.setRewardedVideoListener(this);
 
         mAdUnitId = adConfiguration.getAdUnitId();
+        mMoPubRewardsMap = new HashMap<>();
+
         views.mDescriptionView.setText(adConfiguration.getDescription());
         views.mAdUnitIdView.setText(mAdUnitId);
         views.mLoadButton.setOnClickListener(new View.OnClickListener() {
@@ -52,7 +70,7 @@ public void onClick(View view) {
                 if (mAdUnitId == null) {
                     return;
                 }
-                MoPub.loadRewardedVideo(mAdUnitId,
+                MoPubRewardedVideos.loadRewardedVideo(mAdUnitId,
                         new RequestParameters(views.mKeywordsField.getText().toString(), null,
                                 "sample_app_customer_id"));
                 if (mShowButton != null) {
@@ -60,7 +78,7 @@ public void onClick(View view) {
                 }
             }
         });
-        mShowButton = (Button) view.findViewById(R.id.interstitial_show_button);
+        mShowButton = views.mShowButton;
         mShowButton.setEnabled(false);
         mShowButton.setOnClickListener(new View.OnClickListener() {
             @Override
@@ -68,9 +86,17 @@ public void onClick(View view) {
                 if (mAdUnitId == null) {
                     return;
                 }
-                MoPub.showRewardedVideo(mAdUnitId);
+
+                final String customData = (views.mCustomDataField != null)
+                        ? views.mCustomDataField.getText().toString()
+                        : null;
+
+                MoPubRewardedVideos.showRewardedVideo(mAdUnitId, customData);
             }
         });
+        if (views.mCustomDataField != null) {
+            views.mCustomDataField.setVisibility(View.VISIBLE);
+        }
 
         return view;
     }
@@ -88,6 +114,32 @@ public void onRewardedVideoLoadSuccess(@NonNull final String adUnitId) {
                 mShowButton.setEnabled(true);
             }
             logToast(getActivity(), "Rewarded video loaded.");
+
+            Set<MoPubReward> availableRewards = MoPubRewardedVideos.getAvailableRewards(mAdUnitId);
+
+            // If there are more than one reward available, pop up alert dialog for reward selection
+            if (availableRewards.size() > 1) {
+                final SelectRewardDialogFragment selectRewardDialogFragment
+                        = SelectRewardDialogFragment.newInstance();
+
+                // The user must select a reward from the dialog
+                selectRewardDialogFragment.setCancelable(false);
+
+                // Reset rewards mapping and selected reward
+                mMoPubRewardsMap.clear();
+                mSelectedReward = null;
+
+                // Initialize mapping between reward string and reward instance
+                for (MoPubReward reward : availableRewards) {
+                    mMoPubRewardsMap.put(reward.getAmount() + " " + reward.getLabel(), reward);
+                }
+
+                selectRewardDialogFragment.loadRewards(mMoPubRewardsMap.keySet()
+                        .toArray(new String[mMoPubRewardsMap.size()]));
+                selectRewardDialogFragment.setTargetFragment(this, 0);
+                selectRewardDialogFragment.show(getActivity().getSupportFragmentManager(),
+                        "selectReward");
+            }
         }
     }
 
@@ -123,6 +175,13 @@ public void onRewardedVideoPlaybackError(@NonNull final String adUnitId, @NonNul
         }
     }
 
+    @Override
+    public void onRewardedVideoClicked(@NonNull final String adUnitId) {
+        if (adUnitId.equals(mAdUnitId)) {
+            logToast(getActivity(), "Rewarded video clicked.");
+        }
+    }
+
     @Override
     public void onRewardedVideoClosed(@NonNull final String adUnitId) {
         if (adUnitId.equals(mAdUnitId)) {
@@ -144,4 +203,57 @@ public void onRewardedVideoCompleted(@NonNull final Set<String> adUnitIds,
                             reward.getLabel()));
         }
     }
+
+    public void selectReward(@NonNull String selectedReward) {
+        mSelectedReward = mMoPubRewardsMap.get(selectedReward);
+        MoPubRewardedVideos.selectReward(mAdUnitId, mSelectedReward);
+    }
+
+    public static class SelectRewardDialogFragment extends DialogFragment {
+        @NonNull private String[] mRewards;
+        @NonNull private String mSelectedReward;
+
+        public static SelectRewardDialogFragment newInstance() {
+            return new SelectRewardDialogFragment();
+        }
+
+        public void loadRewards(@NonNull String[] rewards) {
+            mRewards = rewards;
+        }
+
+        @Override
+        public Dialog onCreateDialog(Bundle savedInstanceState) {
+            AlertDialog dialog = new AlertDialog.Builder(getActivity())
+                    .setTitle("Select a reward")
+                    .setSingleChoiceItems(mRewards, -1, new DialogInterface.OnClickListener() {
+                        public void onClick(DialogInterface dialog, int which) {
+                            mSelectedReward = mRewards[which];
+                        }
+                    })
+                    .setPositiveButton("Select", null)
+                    .create();
+
+            // Overriding onShow() of dialog's OnShowListener() and onClick() of the Select button's
+            // OnClickListener() to prevent the dialog from dismissing upon any button click without
+            // selecting an item first.
+            dialog.setOnShowListener(new DialogInterface.OnShowListener() {
+                @Override
+                public void onShow(DialogInterface dialog) {
+                    Button selectButton = ((AlertDialog) dialog).getButton(AlertDialog.BUTTON_POSITIVE);
+                    selectButton.setOnClickListener(new View.OnClickListener() {
+                        @Override
+                        public void onClick(View v) {
+                            if (mSelectedReward != null) {
+                                ((RewardedVideoDetailFragment) getTargetFragment())
+                                        .selectReward(mSelectedReward);
+                                dismiss();
+                            }
+                        }
+                    });
+                }
+            });
+
+            return dialog;
+        }
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/BannerVisibilityTracker.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/BannerVisibilityTracker.java
new file mode 100644
index 00000000..7649a506
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/BannerVisibilityTracker.java
@@ -0,0 +1,294 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.graphics.Rect;
+import android.os.Handler;
+import android.os.SystemClock;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.view.ViewTreeObserver;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Views;
+
+import java.lang.ref.WeakReference;
+
+import static android.view.ViewTreeObserver.OnPreDrawListener;
+
+/**
+ * Tracks banner views to determine when they become visible, where visibility is determined by
+ * whether a minimum number of dips have been visible for a minimum duration, where both values are
+ * configured by the AdServer via headers.
+ */
+class BannerVisibilityTracker {
+    // Time interval to use for throttling visibility checks.
+    private static final int VISIBILITY_THROTTLE_MILLIS = 100;
+
+    /**
+     * Callback when visibility conditions are satisfied.
+     */
+    interface BannerVisibilityTrackerListener {
+        void onVisibilityChanged();
+    }
+
+    @NonNull @VisibleForTesting final OnPreDrawListener mOnPreDrawListener;
+    @NonNull @VisibleForTesting WeakReference<ViewTreeObserver> mWeakViewTreeObserver;
+
+    /**
+     * Banner view that is being tracked.
+     */
+    @NonNull private final View mTrackedView;
+
+    /**
+     * Root view of banner view being tracked.
+     */
+    @NonNull private final View mRootView;
+
+    /**
+     * Object to check actual visibility.
+     */
+    @NonNull private final BannerVisibilityChecker mVisibilityChecker;
+
+    /**
+     * Callback listener.
+     */
+    @Nullable private BannerVisibilityTrackerListener mBannerVisibilityTrackerListener;
+
+    /**
+     * Runnable to run on each visibility loop.
+     */
+    @NonNull private final BannerVisibilityRunnable mVisibilityRunnable;
+
+    /**
+     * Handler for visibility.
+     */
+    @NonNull private final Handler mVisibilityHandler;
+
+    /**
+     * Whether the visibility runnable is scheduled.
+     */
+    private boolean mIsVisibilityScheduled;
+
+    /**
+     * Whether the imp tracker has been fired already.
+     */
+    private boolean mIsImpTrackerFired;
+
+    @VisibleForTesting
+    public BannerVisibilityTracker(@NonNull final Context context,
+            @NonNull final View rootView,
+            @NonNull final View trackedView,
+            final int minVisibleDips,
+            final int minVisibleMillis) {
+        Preconditions.checkNotNull(rootView);
+        Preconditions.checkNotNull(trackedView);
+
+        mRootView = rootView;
+        mTrackedView = trackedView;
+
+        mVisibilityChecker = new BannerVisibilityChecker(minVisibleDips, minVisibleMillis);
+        mVisibilityHandler = new Handler();
+        mVisibilityRunnable = new BannerVisibilityRunnable();
+
+        mOnPreDrawListener = new OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                scheduleVisibilityCheck();
+                return true;
+            }
+        };
+
+        mWeakViewTreeObserver = new WeakReference<ViewTreeObserver>(null);
+        setViewTreeObserver(context, mTrackedView);
+    }
+
+    private void setViewTreeObserver(@Nullable final Context context, @Nullable final View view) {
+        final ViewTreeObserver originalViewTreeObserver = mWeakViewTreeObserver.get();
+        if (originalViewTreeObserver != null && originalViewTreeObserver.isAlive()) {
+            return;
+        }
+
+        final View rootView = Views.getTopmostView(context, view);
+        if (rootView == null) {
+            MoPubLog.d("Unable to set Visibility Tracker due to no available root view.");
+            return;
+        }
+
+        final ViewTreeObserver viewTreeObserver = rootView.getViewTreeObserver();
+        if (!viewTreeObserver.isAlive()) {
+            MoPubLog.w("Visibility Tracker was unable to track views because the"
+                    + " root view tree observer was not alive");
+            return;
+        }
+
+        mWeakViewTreeObserver = new WeakReference<>(viewTreeObserver);
+        viewTreeObserver.addOnPreDrawListener(mOnPreDrawListener);
+    }
+
+    @Nullable
+    @Deprecated
+    @VisibleForTesting
+    BannerVisibilityTrackerListener getBannerVisibilityTrackerListener() {
+        return mBannerVisibilityTrackerListener;
+    }
+
+    void setBannerVisibilityTrackerListener(
+            @Nullable final BannerVisibilityTrackerListener bannerVisibilityTrackerListener) {
+        mBannerVisibilityTrackerListener = bannerVisibilityTrackerListener;
+    }
+
+    /**
+     * Destroy the visibility tracker, preventing it from future use.
+     */
+    void destroy() {
+        mVisibilityHandler.removeMessages(0);
+        mIsVisibilityScheduled = false;
+        final ViewTreeObserver viewTreeObserver = mWeakViewTreeObserver.get();
+        if (viewTreeObserver != null && viewTreeObserver.isAlive()) {
+            viewTreeObserver.removeOnPreDrawListener(mOnPreDrawListener);
+        }
+        mWeakViewTreeObserver.clear();
+        mBannerVisibilityTrackerListener = null;
+    }
+
+    void scheduleVisibilityCheck() {
+        // Tracking this directly instead of calling hasMessages directly because we measured that
+        // this led to slightly better performance.
+        if (mIsVisibilityScheduled) {
+            return;
+        }
+
+        mIsVisibilityScheduled = true;
+        mVisibilityHandler.postDelayed(mVisibilityRunnable, VISIBILITY_THROTTLE_MILLIS);
+    }
+
+    @NonNull
+    @Deprecated
+    @VisibleForTesting
+    BannerVisibilityChecker getBannerVisibilityChecker() {
+        return mVisibilityChecker;
+    }
+
+    @NonNull
+    @Deprecated
+    @VisibleForTesting
+    Handler getVisibilityHandler() {
+        return mVisibilityHandler;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    boolean isVisibilityScheduled() {
+        return mIsVisibilityScheduled;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    boolean isImpTrackerFired() {
+        return mIsImpTrackerFired;
+    }
+
+    class BannerVisibilityRunnable implements Runnable {
+        @Override
+        public void run() {
+            if (mIsImpTrackerFired) {
+                return;
+            }
+
+            mIsVisibilityScheduled = false;
+
+            // If the view meets the dips count requirement for visibility, then also check the
+            // duration requirement for visibility.
+            if (mVisibilityChecker.isVisible(mRootView, mTrackedView)) {
+                // Start the timer for duration requirement if it hasn't already.
+                if (!mVisibilityChecker.hasBeenVisibleYet()) {
+                    mVisibilityChecker.setStartTimeMillis();
+                }
+
+                if (mVisibilityChecker.hasRequiredTimeElapsed()) {
+                    if (mBannerVisibilityTrackerListener != null) {
+                        mBannerVisibilityTrackerListener.onVisibilityChanged();
+                        mIsImpTrackerFired = true;
+                    }
+                }
+            }
+
+            // If visibility requirements are not met, check again later.
+            if (!mIsImpTrackerFired) {
+                scheduleVisibilityCheck();
+            }
+        }
+    }
+
+    static class BannerVisibilityChecker {
+        private int mMinVisibleDips;
+        private int mMinVisibleMillis;
+        private long mStartTimeMillis = Long.MIN_VALUE;
+
+        // A rect to use for hit testing. Create this once to avoid excess garbage collection
+        private final Rect mClipRect = new Rect();
+
+        BannerVisibilityChecker(final int minVisibleDips, final int minVisibleMillis) {
+            mMinVisibleDips = minVisibleDips;
+            mMinVisibleMillis = minVisibleMillis;
+        }
+
+        boolean hasBeenVisibleYet() {
+            return mStartTimeMillis != Long.MIN_VALUE;
+        }
+
+        void setStartTimeMillis() {
+            mStartTimeMillis = SystemClock.uptimeMillis();
+        }
+
+        /**
+         * Whether the visible time has elapsed from the start time.
+         */
+        boolean hasRequiredTimeElapsed() {
+            if (!hasBeenVisibleYet()) {
+                return false;
+            }
+
+            return SystemClock.uptimeMillis() - mStartTimeMillis >= mMinVisibleMillis;
+        }
+
+        /**
+         * Whether the visible dips count requirement is met.
+         */
+        boolean isVisible(@Nullable final View rootView, @Nullable final View view) {
+            // ListView & GridView both call detachFromParent() for views that can be recycled for
+            // new data. This is one of the rare instances where a view will have a null parent for
+            // an extended period of time and will not be the main window.
+            // view.getGlobalVisibleRect() doesn't check that case, so if the view has visibility
+            // of View.VISIBLE but its group has no parent it is likely in the recycle bin of a
+            // ListView / GridView and not on screen.
+            if (view == null || view.getVisibility() != View.VISIBLE || rootView.getParent() == null) {
+                return false;
+            }
+
+            // If either width or height is non-positive, the view cannot be visible.
+            if (view.getWidth() <= 0 || view.getHeight() <= 0) {
+                return false;
+            }
+
+            // View completely clipped by its parents
+            if (!view.getGlobalVisibleRect(mClipRect)) {
+                return false;
+            }
+
+            // Calculate area of view not clipped by any of its parents
+            final int widthInDips = Dips.pixelsToIntDips((float) mClipRect.width(),
+                    view.getContext());
+            final int heightInDips = Dips.pixelsToIntDips((float) mClipRect.height(),
+                    view.getContext());
+            final long visibleViewAreaInDips = (long) (widthInDips * heightInDips);
+
+            return visibleViewAreaInDips >= mMinVisibleDips;
+        }
+    }
+}
+
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java
index 0db1f408..be3c0062 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java
@@ -37,7 +37,13 @@ protected abstract void loadBanner(Context context,
      * Called when a Custom Event is being invalidated or destroyed. Perform any final cleanup here.
      */
     protected abstract void onInvalidate();
-    
+
+    /*
+     * Fire MPX impression trackers and 3rd-party impression trackers from JS.
+     */
+    protected void trackMpxAndThirdPartyImpressions() {
+    }
+
     public interface CustomEventBannerListener {
         /*
          * Your custom event subclass must call this method when it successfully loads an ad and
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
index a261bd64..9ae515fd 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
@@ -4,12 +4,16 @@
 import android.os.Handler;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.text.TextUtils;
 import android.view.View;
 
 import com.mopub.common.AdReport;
 import com.mopub.common.Constants;
+import com.mopub.common.DataKeys;
 import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.ReflectionTarget;
 import com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
 import com.mopub.mobileads.factories.CustomEventBannerFactory;
 
@@ -37,6 +41,11 @@
     private final Runnable mTimeout;
     private boolean mStoredAutorefresh;
 
+    private int mImpressionMinVisibleDips = Integer.MIN_VALUE;
+    private int mImpressionMinVisibleMs = Integer.MIN_VALUE;
+    private boolean mIsVisibilityImpressionTrackingEnabled = false;
+    @Nullable private BannerVisibilityTracker mVisibilityTracker;
+
     public CustomEventBannerAdapter(@NonNull MoPubView moPubView,
             @NonNull String className,
             @NonNull Map<String, String> serverExtras,
@@ -67,6 +76,9 @@ public void run() {
         // Attempt to load the JSON extras into mServerExtras.
         mServerExtras = new TreeMap<String, String>(serverExtras);
 
+        // Parse banner impression tracking headers to determine if we are in visibility experiment
+        parseBannerImpressionTrackingHeaders();
+
         mLocalExtras = mMoPubView.getLocalExtras();
         if (mMoPubView.getLocation() != null) {
             mLocalExtras.put("location", mMoPubView.getLocation());
@@ -77,6 +89,7 @@ public void run() {
         mLocalExtras.put(AD_HEIGHT, mMoPubView.getAdHeight());
     }
 
+    @ReflectionTarget
     void loadAd() {
         if (isInvalidated() || mCustomEventBanner == null) {
             return;
@@ -94,6 +107,7 @@ void loadAd() {
         }
     }
 
+    @ReflectionTarget
     void invalidate() {
         if (mCustomEventBanner != null) {
             // Custom event classes can be developed by any third party and may not be tested.
@@ -104,6 +118,13 @@ void invalidate() {
                 MoPubLog.d("Invalidating a custom event banner threw an exception", e);
             }
         }
+        if (mVisibilityTracker != null) {
+            try {
+                mVisibilityTracker.destroy();
+            } catch (Exception e) {
+                MoPubLog.d("Destroying a banner visibility tracker threw an exception", e);
+            }
+        }
         mContext = null;
         mCustomEventBanner = null;
         mLocalExtras = null;
@@ -115,6 +136,31 @@ boolean isInvalidated() {
         return mInvalidated;
     }
 
+    @Deprecated
+    @VisibleForTesting
+    int getImpressionMinVisibleDips() {
+        return mImpressionMinVisibleDips;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    int getImpressionMinVisibleMs() {
+        return mImpressionMinVisibleMs;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    boolean isVisibilityImpressionTrackingEnabled() {
+        return mIsVisibilityImpressionTrackingEnabled;
+    }
+
+    @Nullable
+    @Deprecated
+    @VisibleForTesting
+    BannerVisibilityTracker getVisibilityTracker() {
+        return mVisibilityTracker;
+    }
+
     private void cancelTimeout() {
         mHandler.removeCallbacks(mTimeout);
     }
@@ -129,6 +175,34 @@ private int getTimeoutDelayMilliseconds() {
         return mMoPubView.getAdTimeoutDelay() * 1000;
     }
 
+    private void parseBannerImpressionTrackingHeaders() {
+        final String impressionMinVisibleDipsString =
+                mServerExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS);
+        final String impressionMinVisibleMsString =
+                mServerExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS);
+
+        if (!TextUtils.isEmpty(impressionMinVisibleDipsString)
+                && !TextUtils.isEmpty(impressionMinVisibleMsString)) {
+            try {
+                mImpressionMinVisibleDips = Integer.parseInt(impressionMinVisibleDipsString);
+            } catch (NumberFormatException e) {
+                MoPubLog.d("Cannot parse integer from header "
+                        + DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS);
+            }
+
+            try {
+                mImpressionMinVisibleMs = Integer.parseInt(impressionMinVisibleMsString);
+            } catch (NumberFormatException e) {
+                MoPubLog.d("Cannot parse integer from header "
+                        + DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS);
+            }
+
+            if (mImpressionMinVisibleDips > 0 && mImpressionMinVisibleMs >= 0) {
+                    mIsVisibilityImpressionTrackingEnabled = true;
+            }
+        }
+    }
+
     /*
      * CustomEventBanner.Listener implementation
      */
@@ -142,9 +216,36 @@ public void onBannerLoaded(View bannerView) {
 
         if (mMoPubView != null) {
             mMoPubView.nativeAdLoaded();
+
+            // If visibility impression tracking is enabled for banners, fire all impression
+            // tracking URLs (AdServer, MPX, 3rd-party) for both HTML and MRAID banner types when
+            // visibility conditions are met.
+            //
+            // Else, retain old behavior of firing AdServer impression tracking URL if and only if
+            // banner is not HTML.
+            if (mIsVisibilityImpressionTrackingEnabled) {
+                // Set up visibility tracker and listener if in experiment
+                mVisibilityTracker = new BannerVisibilityTracker(mContext, mMoPubView, bannerView,
+                        mImpressionMinVisibleDips, mImpressionMinVisibleMs);
+                mVisibilityTracker.setBannerVisibilityTrackerListener(
+                        new BannerVisibilityTracker.BannerVisibilityTrackerListener() {
+                    @Override
+                    public void onVisibilityChanged() {
+                        mMoPubView.trackNativeImpression();
+                        if (mCustomEventBanner != null) {
+                            mCustomEventBanner.trackMpxAndThirdPartyImpressions();
+                        }
+                    }
+                });
+            }
+
             mMoPubView.setAdContentView(bannerView);
-            if (!(bannerView instanceof HtmlBannerWebView)) {
-                mMoPubView.trackNativeImpression();
+
+            // Old behavior
+            if (!mIsVisibilityImpressionTrackingEnabled) {
+                if (!(bannerView instanceof HtmlBannerWebView)) {
+                    mMoPubView.trackNativeImpression();
+                }
             }
         }
     }
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
index dcdf11bd..1cf274fb 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
@@ -1,21 +1,25 @@
 package com.mopub.mobileads;
 
+import android.app.Activity;
 import android.content.Context;
+import android.support.annotation.Nullable;
 
 import com.mopub.common.AdReport;
 import com.mopub.common.DataKeys;
+import com.mopub.common.ExternalViewabilitySessionManager;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.factories.HtmlBannerWebViewFactory;
 
 import java.util.Map;
 
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
 import static com.mopub.mobileads.MoPubErrorCode.INTERNAL_ERROR;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 
 public class HtmlBanner extends CustomEventBanner {
-
     private HtmlBannerWebView mHtmlBannerWebView;
+    @Nullable private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
 
     @Override
     protected void loadBanner(
@@ -34,6 +38,7 @@ protected void loadBanner(
             redirectUrl = serverExtras.get(DataKeys.REDIRECT_URL_KEY);
             clickthroughUrl = serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY);
             isScrollable = Boolean.valueOf(serverExtras.get(DataKeys.SCROLLABLE_KEY));
+
             try {
                 adReport = (AdReport) localExtras.get(AD_REPORT_KEY);
             } catch (ClassCastException e) {
@@ -48,16 +53,35 @@ protected void loadBanner(
 
         mHtmlBannerWebView = HtmlBannerWebViewFactory.create(context, adReport, customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl);
         AdViewController.setShouldHonorServerDimensions(mHtmlBannerWebView);
+
+        if (context instanceof Activity) {
+            final Activity activity = (Activity) context;
+            mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(activity);
+            mExternalViewabilitySessionManager.createDisplaySession(activity, mHtmlBannerWebView);
+        } else {
+            MoPubLog.d("Unable to start viewability session for HTML banner: Context provided was not an Activity.");
+        }
+
         mHtmlBannerWebView.loadHtmlResponse(htmlData);
     }
 
     @Override
     protected void onInvalidate() {
+        if (mExternalViewabilitySessionManager != null) {
+            mExternalViewabilitySessionManager.endDisplaySession();
+            mExternalViewabilitySessionManager = null;
+        }
+
         if (mHtmlBannerWebView != null) {
             mHtmlBannerWebView.destroy();
         }
     }
 
+    @Override
+    protected void trackMpxAndThirdPartyImpressions() {
+        mHtmlBannerWebView.loadUrl(WEB_VIEW_DID_APPEAR.getUrl());
+    }
+
     private boolean extrasAreValid(Map<String, String> serverExtras) {
         return serverExtras.containsKey(DataKeys.HTML_RESPONSE_BODY_KEY);
     }
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
index 558439d8..5e13128f 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
@@ -6,6 +6,7 @@
 import android.view.View;
 
 import com.mopub.common.AdReport;
+import com.mopub.common.ExternalViewabilitySessionManager;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.AdViewController;
@@ -17,19 +18,20 @@
 
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
 import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
 
 class MraidBanner extends CustomEventBanner {
-
     @Nullable private MraidController mMraidController;
     @Nullable private CustomEventBannerListener mBannerListener;
     @Nullable private MraidWebViewDebugListener mDebugListener;
+    @Nullable private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
 
     @Override
-    protected void loadBanner(@NonNull Context context,
-                    @NonNull CustomEventBannerListener customEventBannerListener,
-                    @NonNull Map<String, Object> localExtras,
-                    @NonNull Map<String, String> serverExtras) {
+    protected void loadBanner(@NonNull final Context context,
+                    @NonNull final CustomEventBannerListener customEventBannerListener,
+                    @NonNull final Map<String, Object> localExtras,
+                    @NonNull final Map<String, String> serverExtras) {
         mBannerListener = customEventBannerListener;
 
         String htmlData;
@@ -80,18 +82,36 @@ public void onClose() {
                 mBannerListener.onBannerCollapsed();
             }
         });
-        mMraidController.loadContent(htmlData);
+
+        mMraidController.fillContent(null, htmlData, new MraidController.MraidWebViewCacheListener() {
+            @Override
+            public void onReady(final @NonNull MraidBridge.MraidWebView webView,
+                    final @Nullable ExternalViewabilitySessionManager viewabilityManager) {
+                webView.getSettings().setJavaScriptEnabled(true);
+                mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(context);
+                mExternalViewabilitySessionManager.createDisplaySession(context, webView);
+            }
+        });
     }
 
     @Override
     protected void onInvalidate() {
+        if (mExternalViewabilitySessionManager != null) {
+            mExternalViewabilitySessionManager.endDisplaySession();
+            mExternalViewabilitySessionManager = null;
+        }
         if (mMraidController != null) {
             mMraidController.setMraidListener(null);
             mMraidController.destroy();
         }
     }
 
-    private boolean extrasAreValid(Map<String, String> serverExtras) {
+    @Override
+    protected void trackMpxAndThirdPartyImpressions() {
+        mMraidController.loadJavascript(WEB_VIEW_DID_APPEAR.getJavascript());
+    }
+
+    private boolean extrasAreValid(@NonNull final Map<String, String> serverExtras) {
         return serverExtras.containsKey(HTML_RESPONSE_BODY_KEY);
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/build.gradle b/mopub-sdk/mopub-sdk-base/build.gradle
index 2ced0308..f039998a 100644
--- a/mopub-sdk/mopub-sdk-base/build.gradle
+++ b/mopub-sdk/mopub-sdk-base/build.gradle
@@ -1,7 +1,23 @@
 apply from: '../shared-build.gradle'
 
+repositories {
+    flatDir {
+        dirs './libs'
+    }
+    maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
+}
+
 dependencies {
     compile 'com.mopub.volley:mopub-volley:1.1.0'
+
+    def avidEnabled = project.hasProperty("mopub.avidEnabled") ? project.getProperty("mopub.avidEnabled").toBoolean() : true
+    if (avidEnabled) {
+        compile('com.mopub:libAvid-mopub:3.6.4')
+    }
+    def moatEnabled = project.hasProperty("mopub.moatEnabled") ? project.getProperty("mopub.moatEnabled").toBoolean() : true
+    if (moatEnabled) {
+        compile 'com.moat.analytics.mobile.mpub:moat-mobile-app-kit:2.1.0'
+    }
 }
 
 project.description = 'MoPub Android SDK - Base'
diff --git a/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml b/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml
index d480f9c5..fac2245b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml
+++ b/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml
@@ -2,3 +2,4 @@
     package="com.mopub.mobileads.base">
     <application/>
 </manifest>
+
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java
index 38f7c2ba..c387b248 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java
@@ -11,6 +11,7 @@
     public static final String STATIC_NATIVE = "json";
     public static final String VIDEO_NATIVE = "json_video";
     public static final String REWARDED_VIDEO = "rewarded_video";
+    public static final String REWARDED_PLAYABLE = "rewarded_playable";
     public static final String CUSTOM = "custom";
     public static final String CLEAR = "clear";
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
index 4975407a..bc09b958 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.location.Location;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
@@ -101,6 +102,15 @@
      */
     private static final String BUNDLE_ID_KEY = "bundle";
 
+    /**
+     * Whether or not this ad is using third-party viewability tracking.
+     * 0: Moat disabled, Avid disabled
+     * 1: Moat disabled, Avid enabled
+     * 2: Moat enabled, Avid disabled
+     * 3: Moat enabled, Avid enabled
+     */
+    private static final String VIEWABILITY_KEY = "vv";
+
     protected Context mContext;
     protected String mAdUnitId;
     protected String mKeywords;
@@ -206,6 +216,12 @@ protected void setBundleId(String bundleId) {
         }
     }
 
+    protected void enableViewability(@NonNull final String vendorKey) {
+        Preconditions.checkNotNull(vendorKey);
+
+        addParam(VIEWABILITY_KEY, vendorKey);
+    }
+
     protected void addBaseParams(final ClientMetadata clientMetadata) {
         setAdUnitId(mAdUnitId);
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java
new file mode 100644
index 00000000..2a65e249
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java
@@ -0,0 +1,441 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.view.View;
+import android.webkit.WebView;
+
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Reflection;
+
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+// API documentation: https://drive.google.com/drive/folders/0B8U0thTyT1GGZTdEWm03VTlfbm8
+class AvidViewabilitySession implements ExternalViewabilitySession {
+    private static final String AVID_MANAGER_PATH =
+            "com.integralads.avid.library.mopub.AvidManager";
+    private static final String EXTERNAL_AVID_AD_SESSION_CONTEXT_PATH =
+            "com.integralads.avid.library.mopub.session.ExternalAvidAdSessionContext";
+    private static final String AVID_AD_SESSION_MANAGER_PATH =
+            "com.integralads.avid.library.mopub.session.AvidAdSessionManager";
+    private static final String AVID_KEY = "avid";
+
+    private static Object sAvidAdSessionContextDeferred;
+    private static Object sAvidAdSessionContextNonDeferred;
+    private static Boolean sIsViewabilityEnabledViaReflection;
+    private static boolean sIsVendorDisabled;
+
+    @Nullable private Object mAvidDisplayAdSession;
+    @Nullable private Object mAvidVideoAdSession;
+
+    static boolean isEnabled() {
+        return !sIsVendorDisabled && isViewabilityEnabledViaReflection();
+    }
+
+    static void disable() {
+        sIsVendorDisabled = true;
+    }
+
+    private static boolean isViewabilityEnabledViaReflection() {
+        if (sIsViewabilityEnabledViaReflection == null) {
+            sIsViewabilityEnabledViaReflection = Reflection.classFound(AVID_AD_SESSION_MANAGER_PATH);
+            MoPubLog.d("Avid is "
+                    + (sIsViewabilityEnabledViaReflection ? "" : "un")
+                    + "available via reflection.");
+        }
+
+        return sIsViewabilityEnabledViaReflection;
+    }
+
+    @Nullable
+    private static Object getAvidAdSessionContextDeferred() {
+        if (sAvidAdSessionContextDeferred == null) {
+            try {
+                // Pre-reflection code:
+                // sAvidAdSessionContextDeferred = new ExternalAvidAdSessionContext(
+                //         MoPub.SDK_VERSION, true);
+
+                sAvidAdSessionContextDeferred = Reflection.instantiateClassWithConstructor(
+                        EXTERNAL_AVID_AD_SESSION_CONTEXT_PATH, Object.class,
+                        new Class[] {String.class, boolean.class},
+                        new Object[] {MoPub.SDK_VERSION, true});
+            } catch (Exception e) {
+                MoPubLog.d("Unable to generate Avid deferred ad session context: "
+                        + e.getMessage());
+            }
+        }
+
+        return sAvidAdSessionContextDeferred;
+    }
+
+    @Nullable
+    private static Object getAvidAdSessionContextNonDeferred() {
+        if (sAvidAdSessionContextNonDeferred == null) {
+            try {
+                // Pre-reflection code:
+                // sAvidAdSessionContextNonDeferred = new ExternalAvidAdSessionContext(
+                //         MoPub.SDK_VERSION);
+
+                sAvidAdSessionContextNonDeferred = Reflection.instantiateClassWithConstructor(
+                        EXTERNAL_AVID_AD_SESSION_CONTEXT_PATH, Object.class,
+                        new Class[] {String.class},
+                        new Object[] {MoPub.SDK_VERSION});
+            } catch (Exception e) {
+                MoPubLog.d("Unable to generate Avid ad session context: "
+                        + e.getMessage());
+            }
+        }
+
+        return sAvidAdSessionContextNonDeferred;
+    }
+
+    @Override
+    @NonNull
+    public String getName() {
+        return "AVID";
+    }
+
+    @Override
+    @Nullable
+    public Boolean initialize(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        // unimplemented by Avid
+        return true;
+    }
+
+    @Override
+    @Nullable
+    public Boolean invalidate() {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        mAvidDisplayAdSession = null;
+        mAvidVideoAdSession = null;
+
+        return true;
+    }
+
+    @Override
+    @Nullable
+    public Boolean createDisplaySession(@NonNull final Context context,
+            @NonNull final WebView webView, boolean isDeferred) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(webView);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        final Object avidAdSessionContext =
+                isDeferred
+                ? getAvidAdSessionContextDeferred()
+                : getAvidAdSessionContextNonDeferred();
+        final Activity activity = (context instanceof Activity) ? (Activity) context : null;
+
+        // Pre-reflection code:
+        // mAvidDisplayAdSession = AvidAdSessionManager.startAvidDisplayAdSession(activity,
+        //         avidAdSessionContext);
+        // mAvidDisplayAdSession.registerAdView(webView, activity);
+
+        try {
+            mAvidDisplayAdSession = new Reflection.MethodBuilder(null, "startAvidDisplayAdSession")
+                    .setStatic(AVID_AD_SESSION_MANAGER_PATH)
+                    .addParam(Context.class, context)
+                    .addParam(EXTERNAL_AVID_AD_SESSION_CONTEXT_PATH, avidAdSessionContext)
+                    .execute();
+
+            new Reflection.MethodBuilder(mAvidDisplayAdSession, "registerAdView")
+                    .addParam(View.class, webView)
+                    .addParam(Activity.class, activity)
+                    .execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Avid start display session: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean startDeferredDisplaySession(@NonNull final Activity activity) {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mAvidDisplayAdSession == null) {
+            MoPubLog.d("Avid DisplayAdSession unexpectedly null.");
+            return false;
+        }
+
+        // Pre-reflection code:
+        // AvidManager.getInstance().registerActivity(activity);
+        // if (mAvidDisplayAdSession.getAvidDeferredAdSessionListener() != null) {
+        //     mAvidDisplayAdSession.getAvidDeferredAdSessionListener().recordReadyEvent();
+        // }
+
+        try {
+            final Object avidManager = new Reflection.MethodBuilder(null, "getInstance")
+                    .setStatic(AVID_MANAGER_PATH)
+                    .execute();
+
+            new Reflection.MethodBuilder(avidManager, "registerActivity")
+                    .addParam(Activity.class, activity)
+                    .execute();
+
+            final Object deferredAdSessionListener =
+                    new Reflection.MethodBuilder(mAvidDisplayAdSession,
+                            "getAvidDeferredAdSessionListener").execute();
+
+            if (deferredAdSessionListener == null) {
+                MoPubLog.d("Avid AdSessionListener unexpectedly null.");
+                return false;
+            }
+
+            new Reflection.MethodBuilder(deferredAdSessionListener, "recordReadyEvent")
+                    .execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Avid record deferred session: "
+                    + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean endDisplaySession() {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mAvidDisplayAdSession == null) {
+            MoPubLog.d("Avid DisplayAdSession unexpectedly null.");
+            return false;
+        }
+
+        // Pre-reflection code:
+        // mAvidDisplayAdSession.endSession();
+
+        try {
+            new Reflection.MethodBuilder(mAvidDisplayAdSession, "endSession").execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Avid end session: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean createVideoSession(@NonNull final Activity activity, @NonNull final View view,
+            @NonNull final Set<String> buyerResources,
+            @NonNull final Map<String, String> videoViewabilityTrackers) {
+        Preconditions.checkNotNull(activity);
+        Preconditions.checkNotNull(view);
+        Preconditions.checkNotNull(buyerResources);
+        Preconditions.checkNotNull(videoViewabilityTrackers);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        // Pre-reflection code:
+        // mAvidVideoAdSession = AvidAdSessionManager.startAvidManagedVideoAdSession(activity,
+        //         (ExternalAvidAdSessionContext) getAvidAdSessionContextNonDeferred());
+        // mAvidVideoAdSession.registerAdView(view, activity);
+        // if (!TextUtils.isEmpty(videoViewabilityTrackers.get(AVID_KEY))) {
+        //     mAvidVideoAdSession.injectJavaScriptResource(videoViewabilityTrackers.get(AVID_KEY));
+        // }
+        // for (final String buyerResource : buyerResources) {
+        //     if (buyerResource != null) {
+        //         mAvidVideoAdSession.injectJavaScriptResource(buyerResource);
+        //     }
+        // }
+
+        try {
+            mAvidVideoAdSession = new Reflection.MethodBuilder(null, "startAvidManagedVideoAdSession")
+                    .setStatic(AVID_AD_SESSION_MANAGER_PATH)
+                    .addParam(Context.class, activity)
+                    .addParam(EXTERNAL_AVID_AD_SESSION_CONTEXT_PATH, getAvidAdSessionContextNonDeferred())
+                    .execute();
+
+            new Reflection.MethodBuilder(mAvidVideoAdSession, "registerAdView")
+                    .addParam(View.class, view)
+                    .addParam(Activity.class, activity)
+                    .execute();
+
+            if (!TextUtils.isEmpty(videoViewabilityTrackers.get(AVID_KEY))) {
+                new Reflection.MethodBuilder(mAvidVideoAdSession, "injectJavaScriptResource")
+                        .addParam(String.class, videoViewabilityTrackers.get(AVID_KEY))
+                        .execute();
+            }
+
+            for (final String buyerResource : buyerResources) {
+                if (!TextUtils.isEmpty(buyerResource)) {
+                    new Reflection.MethodBuilder(mAvidVideoAdSession, "injectJavaScriptResource")
+                            .addParam(String.class, buyerResource)
+                            .execute();
+                }
+            }
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Avid start video session: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean registerVideoObstructions(@NonNull final List<View> views) {
+        Preconditions.checkNotNull(views);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mAvidVideoAdSession == null) {
+            MoPubLog.d("Avid VideoAdSession unexpectedly null.");
+            return false;
+        }
+
+        try {
+            for (final View view : views) {
+                if (view != null) {
+                    // Pre-reflection code:
+                    // mAvidVideoAdSession.registerFriendlyObstruction(view);
+
+                    new Reflection.MethodBuilder(mAvidVideoAdSession, "registerFriendlyObstruction")
+                            .addParam(View.class, view)
+                            .execute();
+                }
+            }
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to register Avid video obstructions: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean onVideoPrepared(@NonNull final View playerView, final int duration) {
+        Preconditions.checkNotNull(playerView);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        // unimplemented by Avid
+        return true;
+    }
+
+    @Override
+    @Nullable
+    public Boolean recordVideoEvent(@NonNull final VideoEvent event, final int playheadMillis) {
+        Preconditions.checkNotNull(event);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mAvidVideoAdSession == null) {
+            MoPubLog.d("Avid VideoAdSession unexpectedly null.");
+            return false;
+        }
+
+        try {
+            switch (event) {
+                case AD_LOADED:
+                case AD_STARTED:
+                case AD_STOPPED:
+                case AD_PAUSED:
+                case AD_PLAYING:
+                case AD_SKIPPED:
+                case AD_IMPRESSED:
+                case AD_CLICK_THRU:
+                case AD_VIDEO_FIRST_QUARTILE:
+                case AD_VIDEO_MIDPOINT:
+                case AD_VIDEO_THIRD_QUARTILE:
+                case AD_COMPLETE:
+                    handleVideoEventReflection(event);
+                    return true;
+
+                case RECORD_AD_ERROR:
+                    handleVideoEventReflection(event, "error");
+                    return true;
+
+                default:
+                    MoPubLog.d("Unexpected video event type: " + event);
+                    return false;
+            }
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Avid video event for "
+                    + event.getAvidMethodName() + ": " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean endVideoSession() {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mAvidVideoAdSession == null) {
+            MoPubLog.d("Avid VideoAdSession unexpectedly null.");
+            return false;
+        }
+
+        // Pre-reflection code:
+        // mAvidVideoAdSession.endSession();
+
+        try {
+            new Reflection.MethodBuilder(mAvidVideoAdSession, "endSession").execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Avid end video session: " + e.getMessage());
+            return false;
+        }
+    }
+
+    private void handleVideoEventReflection(@NonNull final VideoEvent videoEvent) throws Exception {
+        handleVideoEventReflection(videoEvent, null);
+    }
+
+    private void handleVideoEventReflection(@NonNull final VideoEvent videoEvent,
+            @Nullable final String message) throws Exception {
+        // Pre-reflection code:
+        // mAvidVideoAdSession.getAvidVideoPlaybackListener().<videoEventMethodName>();
+
+        final Object playbackListener =
+                new Reflection.MethodBuilder(mAvidVideoAdSession, "getAvidVideoPlaybackListener")
+                .execute();
+
+        Reflection.MethodBuilder methodBuilder =
+                new Reflection.MethodBuilder(playbackListener, videoEvent.getAvidMethodName());
+
+        if (!TextUtils.isEmpty(message)) {
+            methodBuilder.addParam(String.class, message);
+        }
+
+        methodBuilder.execute();
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
index 33d94acb..66de7413 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
@@ -8,7 +8,6 @@
 import android.webkit.WebViewClient;
 
 import com.mopub.common.logging.MoPubLog;
-import com.mopub.exceptions.IntentNotResolvableException;
 
 import java.util.EnumSet;
 
@@ -78,8 +77,6 @@ public void urlHandlingFailed(@NonNull String url,
     @Override
     public void onPageStarted(WebView view, String url, Bitmap favicon) {
         super.onPageStarted(view, url, favicon);
-        mMoPubBrowser.getForwardButton()
-                .setImageDrawable(UNRIGHT_ARROW.createDrawable(mMoPubBrowser));
     }
 
     @Override
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
index d6c76b92..1317ab36 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
@@ -1,5 +1,6 @@
 package com.mopub.common;
 
+import android.content.ContentResolver;
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageInfo;
@@ -11,6 +12,7 @@
 import android.os.Build;
 import android.provider.Settings;
 import android.telephony.TelephonyManager;
+import android.text.TextUtils;
 
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.DeviceUtils;
@@ -36,6 +38,7 @@
     private static final String IFA_PREFIX = "ifa:";
     private static final String SHA_PREFIX = "sha:";
     private static final int UNKNOWN_NETWORK = -1;
+    private static final int MISSING_VALUE = -1;
 
     private String mNetworkOperatorForUrl;
     private final String mNetworkOperator;
@@ -184,8 +187,28 @@ public ClientMetadata(Context context) {
             mSimOperatorName = null;
         }
 
-        // Get the device ID. This will be replaced later when the Play Services callbacks complete.
-        mUdid = getDeviceIdFromContext(mContext);
+        setAmazonAdvertisingInfo();
+        if (!mAdvertisingInfoSet) {
+            // Amazon ad info is not supported on this device, so get the device ID.
+            // This will be replaced later when the Play Services callbacks complete.
+            mUdid = getDeviceIdFromContext(mContext);
+        }
+
+    }
+
+    // For Amazon tablets running Fire OS 5.1+ and TV devices running Fire OS 5.2.1.1+, the
+    // advertising info is available as System Settings.
+    // See https://developer.amazon.com/public/solutions/devices/fire-tv/docs/fire-tv-advertising-id
+    @VisibleForTesting
+    protected void setAmazonAdvertisingInfo() {
+        ContentResolver resolver = mContext.getContentResolver();
+        int limitAdTracking = Settings.Secure.getInt(resolver, "limit_ad_tracking", MISSING_VALUE);
+        String advertisingId = Settings.Secure.getString(resolver, "advertising_id");
+
+        if (limitAdTracking != MISSING_VALUE && !TextUtils.isEmpty(advertisingId)) {
+            boolean doNotTrack = limitAdTracking != 0;
+            setAdvertisingInfo(advertisingId, doNotTrack);
+        }
     }
 
     private static String getAppVersionFromContext(Context context) {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java
index 6a642d16..24111e03 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java
@@ -93,6 +93,8 @@ int getGravity() {
     private final Rect mCloseButtonBounds = new Rect();
     private final Rect mInsetCloseRegionBounds = new Rect();
 
+    private boolean mCloseAlwaysInteractable;
+
     @Nullable
     private UnsetPressedState mUnsetPressedState;
 
@@ -117,6 +119,7 @@ public CloseableLayout(@NonNull Context context) {
         mCloseButtonPadding = Dips.asIntPixels(CLOSE_BUTTON_PADDING_DP, context);
 
         setWillNotDraw(false);
+        mCloseAlwaysInteractable = true;
     }
 
     public void setOnCloseListener(@Nullable OnCloseListener onCloseListener) {
@@ -202,10 +205,11 @@ public boolean onInterceptTouchEvent(@NonNull final MotionEvent event) {
 
     @Override
     public boolean onTouchEvent(@NonNull MotionEvent event) {
-        // Stop receiving touch events if we aren't within the bounds, including some slop.
+        // Stop receiving touch events if we aren't within the bounds (including some slop)
+        // or if we aren't allowing a touch event due to an invisible button.
         final int x = (int) event.getX();
         final int y = (int) event.getY();
-        if (!pointInCloseBounds(x, y, mTouchSlop)) {
+        if (!pointInCloseBounds(x, y, mTouchSlop) || !shouldAllowPress()) {
             setClosePressed(false);
             super.onTouchEvent(event);
             return false;
@@ -234,6 +238,20 @@ public boolean onTouchEvent(@NonNull MotionEvent event) {
         return true;
     }
 
+    /**
+     * Sets it so that touch events are also valid when the button is not visible.
+     *
+     * @param closeAlwaysInteractable True if you want to allow touch events to an invisible button
+     */
+    public void setCloseAlwaysInteractable(boolean closeAlwaysInteractable) {
+        mCloseAlwaysInteractable = closeAlwaysInteractable;
+    }
+
+    @VisibleForTesting
+    boolean shouldAllowPress() {
+        return mCloseAlwaysInteractable || mCloseDrawable.isVisible();
+    }
+
     private void setClosePressed(boolean pressed) {
         if (pressed == isClosePressed()) {
             return;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
index 99efe98b..c0d2d12b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
@@ -17,6 +17,10 @@ private Constants() {}
 
     public static final int TEN_SECONDS_MILLIS = 10 * 1000;
     public static final int THIRTY_SECONDS_MILLIS = 30 * 1000;
+    public static final int FIFTEEN_MINUTES_MILLIS = 15 * 60 * 1000;
+    public static final int FOUR_HOURS_MILLIS = 4 * 60 * 60 * 1000;
+
+    public static final int AD_EXPIRATION_DELAY = FOUR_HOURS_MILLIS;
 
     public static final int TEN_MB = 10 * 1024 * 1024;
 
@@ -24,4 +28,9 @@ private Constants() {}
 
     public static final String NATIVE_VIDEO_ID = "native_video_id";
     public static final String NATIVE_VAST_VIDEO_CONFIG = "native_vast_video_config";
+
+    // Internal Video Tracking nouns, defined in ad server
+    public static final String VIDEO_TRACKING_EVENTS_KEY = "events";
+    public static final String VIDEO_TRACKING_URLS_KEY = "urls";
+    public static final String VIDEO_TRACKING_URL_MACRO = "%%VIDEO_EVENT%%";
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
index aa66cb94..1de41b77 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
@@ -17,16 +17,37 @@
     public static final String AD_WIDTH = "com_mopub_ad_width";
     public static final String AD_HEIGHT = "com_mopub_ad_height";
 
+    // Banner imp tracking fields
+    public static final String BANNER_IMPRESSION_MIN_VISIBLE_DIPS = "Banner-Impression-Min-Pixels";
+    public static final String BANNER_IMPRESSION_MIN_VISIBLE_MS = "Banner-Impression-Min-Ms";
+
+    // Native fields
+    public static final String IMPRESSION_MIN_VISIBLE_PERCENT = "Impression-Min-Visible-Percent";
+    public static final String IMPRESSION_VISIBLE_MS = "Impression-Visible-Ms";
+    public static final String IMPRESSION_MIN_VISIBLE_PX = "Impression-Min-Visible-Px";
+
     // Native Video fields
     public static final String PLAY_VISIBLE_PERCENT = "Play-Visible-Percent";
     public static final String PAUSE_VISIBLE_PERCENT = "Pause-Visible-Percent";
-    public static final String IMPRESSION_MIN_VISIBLE_PERCENT = "Impression-Min-Visible-Percent";
-    public static final String IMPRESSION_VISIBLE_MS = "Impression-Visible-Ms";
     public static final String MAX_BUFFER_MS = "Max-Buffer-Ms";
     public static final String EVENT_DETAILS = "Event-Details";
 
-    // Rewarded Video fields
-    public static final String REWARDED_VIDEO_CURRENCY_NAME_KEY = "Rewarded-Video-Currency-Name";
-    public static final String REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY = "Rewarded-Video-Currency-Value-String";
-    public static final String REWARDED_VIDEO_CUSTOMER_ID = "Rewarded-Video-Customer-Id";
+    // Rewarded Ad fields
+    public static final String REWARDED_AD_CURRENCY_NAME_KEY = "Rewarded-Ad-Currency-Name";
+    public static final String REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY = "Rewarded-Ad-Currency-Value-String";
+    public static final String REWARDED_AD_CUSTOMER_ID_KEY = "Rewarded-Ad-Customer-Id";
+    public static final String REWARDED_AD_DURATION_KEY = "Rewarded-Ad-Duration";
+    public static final String SHOULD_REWARD_ON_CLICK_KEY = "Should-Reward-On-Click";
+
+    // Viewability fields
+    public static final String EXTERNAL_VIDEO_VIEWABILITY_TRACKERS_KEY = "External-Video-Viewability-Trackers";
+
+    /**
+     * @deprecated as of 4.12, replaced by {@link #REWARDED_AD_CUSTOMER_ID_KEY}
+     */
+    @Deprecated
+    public static final String REWARDED_VIDEO_CUSTOMER_ID = "Rewarded-Ad-Customer-Id";
+
+    // Video tracking fields
+    public static final String VIDEO_TRACKERS_KEY = "Video-Trackers";
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java
new file mode 100644
index 00000000..258836f5
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java
@@ -0,0 +1,92 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.webkit.WebView;
+
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+/**
+ * Implementers should use reflection to invoke external APIs as all viewability dependencies are
+ * optional.
+ *
+ * Note that all interface methods return @Nullable Booleans. Return values are as follows:
+ * null - vendor was disabled either via client or server; method calls fast fail
+ * true - successfully called through via reflection
+ * false - error invoking via reflection or unexpected internal session state
+ */
+public interface ExternalViewabilitySession {
+    @NonNull String getName();
+
+    @Nullable Boolean initialize(@NonNull final Context context);
+    @Nullable Boolean invalidate();
+
+    // Display only
+    @Nullable Boolean createDisplaySession(@NonNull final Context context,
+            @NonNull final WebView webView, boolean isDeferred);
+    @Nullable Boolean startDeferredDisplaySession(@NonNull final Activity activity);
+    @Nullable Boolean endDisplaySession();
+
+    // Video only
+    @Nullable Boolean createVideoSession(@NonNull final Activity activity, @NonNull final View view,
+            @NonNull final Set<String> buyerResources,
+            @NonNull final Map<String, String> videoViewabilityTrackers);
+    @Nullable Boolean registerVideoObstructions(@NonNull final List<View> views);
+    @Nullable Boolean onVideoPrepared(@NonNull final View playerView, final int duration);
+    @Nullable Boolean recordVideoEvent(@NonNull final VideoEvent event, final int playheadMillis);
+    @Nullable Boolean endVideoSession();
+
+    enum VideoEvent {
+        AD_LOADED(null, "recordAdLoadedEvent"),
+        AD_STARTED("AD_EVT_START", "recordAdStartedEvent"),
+        AD_STOPPED("AD_EVT_STOPPED", "recordAdStoppedEvent"),
+        AD_PAUSED("AD_EVT_PAUSED", "recordAdPausedEvent"),
+        AD_PLAYING("AD_EVT_PLAYING", "recordAdPlayingEvent"),
+        AD_SKIPPED("AD_EVT_SKIPPED", "recordAdSkippedEvent"),
+
+        AD_IMPRESSED(null, "recordAdImpressionEvent"),
+        AD_CLICK_THRU(null, "recordAdClickThruEvent"),
+
+        AD_VIDEO_FIRST_QUARTILE("AD_EVT_FIRST_QUARTILE", "recordAdVideoFirstQuartileEvent"),
+        AD_VIDEO_MIDPOINT("AD_EVT_MID_POINT", "recordAdVideoMidpointEvent"),
+        AD_VIDEO_THIRD_QUARTILE("AD_EVT_THIRD_QUARTILE", "recordAdVideoThirdQuartileEvent"),
+        AD_COMPLETE("AD_EVT_COMPLETE", "recordAdCompleteEvent"),
+
+        RECORD_AD_ERROR(null, "recordAdError");
+
+        // These are not yet possible with our VAST player. Unimplemented.
+        // AD_EXPANDED_CHANGE,
+        // AD_ENTERED_FULLSCREEN,
+        // AD_EXITED_FULLSCREEN,
+        // RECORD_AD_DURATION_CHANGED,
+        // AD_VOLUME_CHANGE_EVENT,
+
+        // These are not yet possible with our VAST player. Unimplemented.
+        // AD_USER_MINIMIZE,
+        // AD_USER_ACCEPT_INVITATION,
+        // AD_USER_CLOSE,
+
+
+        @Nullable private String moatEnumName;
+        @NonNull private String avidMethodName;
+        VideoEvent(@Nullable final String moatEnumName, @NonNull final String avidMethodName) {
+            this.moatEnumName = moatEnumName;
+            this.avidMethodName = avidMethodName;
+        }
+
+        @Nullable
+        public String getMoatEnumName() {
+            return moatEnumName;
+        }
+
+        @NonNull
+        public String getAvidMethodName() {
+            return avidMethodName;
+        }
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java
new file mode 100644
index 00000000..439a96d3
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java
@@ -0,0 +1,265 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.webkit.WebView;
+
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.VastVideoConfig;
+
+import java.util.HashSet;
+import java.util.List;
+import java.util.Locale;
+import java.util.Set;
+
+/**
+ * Encapsulates all third-party viewability session measurements.
+ */
+public class ExternalViewabilitySessionManager {
+
+    @NonNull private final Set<ExternalViewabilitySession> mViewabilitySessions;
+
+    public enum ViewabilityVendor {
+        AVID, MOAT, ALL;
+
+        public void disable() {
+            switch (this) {
+                case AVID:
+                    AvidViewabilitySession.disable();
+                    break;
+                case MOAT:
+                    MoatViewabilitySession.disable();
+                    break;
+                case ALL:
+                    AvidViewabilitySession.disable();
+                    MoatViewabilitySession.disable();
+                    break;
+                default:
+                    MoPubLog.d("Attempted to disable an invalid viewability vendor: " + this);
+                    return;
+            }
+            MoPubLog.d("Disabled viewability for " + this);
+        }
+
+        /**
+         * @link { AdUrlGenerator#VIEWABILITY_KEY }
+         */
+        @NonNull
+        public static String getEnabledVendorKey() {
+            final boolean avidEnabled = AvidViewabilitySession.isEnabled();
+            final boolean moatEnabled = MoatViewabilitySession.isEnabled();
+
+            String vendorKey = "0";
+            if (avidEnabled && moatEnabled) {
+                vendorKey = "3";
+            } else if (avidEnabled) {
+                vendorKey = "1";
+            } else if (moatEnabled) {
+                vendorKey = "2";
+            }
+
+            return vendorKey;
+        }
+
+        @Nullable
+        public static ViewabilityVendor fromKey(@NonNull final String key) {
+            Preconditions.checkNotNull(key);
+
+            switch (key) {
+                case "1":
+                    return AVID;
+                case "2":
+                    return MOAT;
+                case "3":
+                    return ALL;
+                default:
+                    return null;
+            }
+        }
+    }
+
+    public ExternalViewabilitySessionManager(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        mViewabilitySessions = new HashSet<ExternalViewabilitySession>();
+        mViewabilitySessions.add(new AvidViewabilitySession());
+        mViewabilitySessions.add(new MoatViewabilitySession());
+
+        initialize(context);
+    }
+
+    /**
+     * Allow the viewability session to perform any necessary initialization. Each session
+     * must handle any relevant caching or lazy loading independently.
+     *
+     * @param context Preferably Activity Context. Currently only used to obtain a reference to the
+     *                Application required by some viewability vendors.
+     */
+    private void initialize(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.initialize(context);
+            logEvent(session, "initialize", successful, false);
+        }
+    }
+
+    /**
+     * Perform any necessary clean-up and release of resources.
+     */
+    public void invalidate() {
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.invalidate();
+            logEvent(session, "invalidate", successful, false);
+        }
+    }
+
+    /**
+     * Registers and starts viewability tracking for the given WebView.
+     * @param context Preferably an Activity Context.
+     * @param webView The WebView to be tracked.
+     * @param isDeferred True for cached ads (i.e. interstitials)
+     */
+    public void createDisplaySession(@NonNull final Context context,
+            @NonNull final WebView webView, boolean isDeferred) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(webView);
+
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.createDisplaySession(context, webView, isDeferred);
+            logEvent(session, "start display session", successful, true);
+        }
+    }
+
+    public void createDisplaySession(@NonNull final Context context,
+            @NonNull final WebView webview) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(webview);
+
+        createDisplaySession(context, webview, false);
+    }
+
+    /**
+     * Begins deferred impression tracking. For cached ads (i.e. interstitials) this should be
+     * called separately from {@link ExternalViewabilitySessionManager#createDisplaySession(Context, WebView)}.
+     * @param activity
+     */
+    public void startDeferredDisplaySession(@NonNull final Activity activity) {
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.startDeferredDisplaySession(activity);
+            logEvent(session, "record deferred session", successful, true);
+        }
+    }
+
+    /**
+     * Unregisters and disables all viewability tracking for the given WebView.
+     */
+    public void endDisplaySession() {
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.endDisplaySession();
+            logEvent(session, "end display session", successful, true);
+        }
+    }
+
+    /**
+     * Registers and starts video viewability tracking for the given View.
+     *
+     * @param activity An Activity Context.
+     * @param view The player View.
+     * @param vastVideoConfig Configuration file used to store video viewability tracking tags.
+     */
+    public void createVideoSession(@NonNull final Activity activity, @NonNull final View view,
+            @NonNull final VastVideoConfig vastVideoConfig) {
+        Preconditions.checkNotNull(activity);
+        Preconditions.checkNotNull(view);
+        Preconditions.checkNotNull(vastVideoConfig);
+
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Set<String> buyerResources = new HashSet<String>();
+            if (session instanceof AvidViewabilitySession) {
+                buyerResources.addAll(vastVideoConfig.getAvidJavascriptResources());
+            } else if (session instanceof MoatViewabilitySession) {
+                buyerResources.addAll(vastVideoConfig.getMoatImpressionPixels());
+            }
+
+            final Boolean successful = session.createVideoSession(activity, view, buyerResources,
+                    vastVideoConfig.getExternalViewabilityTrackers());
+            logEvent(session, "start video session", successful, true);
+        }
+    }
+
+    /**
+     * Prevents friendly obstructions from affecting viewability scores.
+     *
+     * @param views Views in the same Window and a higher z-index as the video playing.
+     */
+    public void registerVideoObstructions(@NonNull final List<View> views) {
+        Preconditions.checkNotNull(views);
+
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.registerVideoObstructions(views);
+            logEvent(session, "register friendly obstruction", successful, true);
+        }
+    }
+
+    public void onVideoPrepared(@NonNull final View playerView, final int duration) {
+        Preconditions.checkNotNull(playerView);
+
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.onVideoPrepared(playerView, duration);
+            logEvent(session, "on video prepared", successful, true);
+        }
+    }
+
+    /**
+     * Notify pertinent video lifecycle events (e.g. MediaPlayer onPrepared, first quartile fired).
+     *
+     * @param event Corresponding {@link ExternalViewabilitySession.VideoEvent}.
+     * @param playheadMillis Current video playhead, in milliseconds.
+     */
+    public void recordVideoEvent(@NonNull final ExternalViewabilitySession.VideoEvent event,
+            final int playheadMillis) {
+        Preconditions.checkNotNull(event);
+
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.recordVideoEvent(event, playheadMillis);
+            logEvent(session, "record video event (" + event.name() + ")", successful, true);
+        }
+    }
+
+    /**
+     * Unregisters and disables all viewability tracking for the given View.
+     */
+    public void endVideoSession() {
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.endVideoSession();
+            logEvent(session, "end video session", successful, true);
+        }
+    }
+
+    private void logEvent(@NonNull final ExternalViewabilitySession session,
+            @NonNull final String event,
+            @Nullable final Boolean successful,
+            final boolean isVerbose) {
+        Preconditions.checkNotNull(session);
+        Preconditions.checkNotNull(event);
+
+        if (successful == null) {
+            // Method return values are only null when the corresponding viewability vendor has been
+            // disabled. Do not log in those cases.
+            return;
+        }
+
+        final String failureString = successful ? "" : "failed to ";
+        final String message = String.format(Locale.US, "%s viewability event: %s%s.",
+                session.getName(), failureString, event);
+        if (isVerbose) {
+            MoPubLog.v(message);
+        } else {
+            MoPubLog.d(message);
+        }
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/IntentActions.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/IntentActions.java
index 00dcd8b5..39134208 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/IntentActions.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/IntentActions.java
@@ -11,6 +11,6 @@
     public static final String ACTION_INTERSTITIAL_CLICK = "com.mopub.action.interstitial.click";
 
     public static final String ACTION_REWARDED_VIDEO_COMPLETE = "com.mopub.action.rewardedvideo.complete";
-
+    public static final String ACTION_REWARDED_PLAYABLE_COMPLETE = "com.mopub.action.rewardedplayable.complete";
     private IntentActions() {}
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java
index 77e44feb..8e6e5471 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.location.Location;
 import android.location.LocationManager;
+import android.os.SystemClock;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
@@ -47,6 +48,29 @@
         }
     }
 
+    private static volatile LocationService sInstance;
+    @VisibleForTesting @Nullable Location mLastKnownLocation;
+    @VisibleForTesting long mLocationLastUpdatedMillis;
+
+    private LocationService() {
+    }
+
+    @VisibleForTesting
+    @NonNull
+    static LocationService getInstance() {
+        LocationService locationService = sInstance;
+        if (locationService == null) {
+            synchronized (LocationService.class) {
+                locationService = sInstance;
+                if (locationService == null) {
+                    locationService = new LocationService();
+                    sInstance = locationService;
+                }
+            }
+        }
+        return locationService;
+    }
+
     public enum ValidLocationProvider {
         NETWORK(LocationManager.NETWORK_PROVIDER),
         GPS(LocationManager.GPS_PROVIDER);
@@ -75,12 +99,17 @@ private boolean hasRequiredPermissions(@NonNull final Context context) {
         }
     }
 
-    /*
+    /**
      * Returns the last known location of the device using its GPS and network location providers.
-     * May be null if:
-     * - Location permissions are not requested in the Android manifest file
-     * - The location providers don't exist
-     * - Location awareness is disabled in the parent MoPubView
+     * This only checks Android location providers as often as
+     * {@link MoPub#getMinimumLocationRefreshTimeMillis()} says to, in milliseconds.
+     * <p>
+     * May be {@code null} if:
+     * <ul>
+     * <li> Location permissions are not requested in the Android manifest file
+     * <li> The location providers don't exist
+     * <li> Location awareness is disabled in the parent MoPubView
+     * </ul>
      */
     @Nullable
     public static Location getLastKnownLocation(@NonNull final Context context,
@@ -93,6 +122,12 @@ public static Location getLastKnownLocation(@NonNull final Context context,
             return null;
         }
 
+        final LocationService locationService = getInstance();
+
+        if (isLocationFreshEnough()) {
+            return locationService.mLastKnownLocation;
+        }
+
         final Location gpsLocation = getLocationFromProvider(context, ValidLocationProvider.GPS);
         final Location networkLocation = getLocationFromProvider(context, ValidLocationProvider.NETWORK);
         final Location result = getMostRecentValidLocation(gpsLocation, networkLocation);
@@ -102,6 +137,8 @@ public static Location getLastKnownLocation(@NonNull final Context context,
             truncateLocationLatLon(result, locationPrecision);
         }
 
+        locationService.mLastKnownLocation = result;
+        locationService.mLocationLastUpdatedMillis = SystemClock.elapsedRealtime();
         return result;
     }
 
@@ -151,7 +188,6 @@ static Location getMostRecentValidLocation(@Nullable final Location a, @Nullable
     }
 
     @VisibleForTesting
-    @Nullable
     static void truncateLocationLatLon(@Nullable final Location location,
             final int precision) {
         if (location == null || precision < 0) {
@@ -170,4 +206,19 @@ static void truncateLocationLatLon(@Nullable final Location location,
                 .doubleValue();
         location.setLongitude(truncatedLon);
     }
+
+    private static boolean isLocationFreshEnough() {
+        final LocationService locationService = LocationService.getInstance();
+        if (locationService.mLastKnownLocation == null) {
+            return false;
+        }
+        return SystemClock.elapsedRealtime() - locationService.mLocationLastUpdatedMillis <=
+                MoPub.getMinimumLocationRefreshTimeMillis();
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    public static void clearLastKnownLocation() {
+        getInstance().mLastKnownLocation = null;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
index bf067481..e4b96b6e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
@@ -10,11 +10,44 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
+import static com.mopub.common.ExternalViewabilitySessionManager.ViewabilityVendor;
+
 public class MoPub {
-    public static final String SDK_VERSION = "4.9.0";
+    public static final String SDK_VERSION = "4.19.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
+    /**
+     * Browser agent to handle URIs with scheme HTTP or HTTPS
+     */
+    public enum BrowserAgent {
+        /**
+         * MoPub's in-app browser
+         */
+        IN_APP,
+
+        /**
+         * Default browser application on device
+         */
+        NATIVE;
+
+        /**
+         * Maps header value from MoPub's AdServer to browser agent:
+         * 0 is MoPub's in-app browser (IN_APP), and 1 is device's default browser (NATIVE).
+         * For null or all other undefined values, returns default browser agent IN_APP.
+         * @param browserAgent Integer header value from MoPub's AdServer.
+         * @return IN_APP for 0, NATIVE for 1, and IN_APP for null or all other undefined values.
+         */
+        @NonNull
+        public static BrowserAgent fromHeader(@Nullable final Integer browserAgent) {
+            if (browserAgent == null) {
+                return IN_APP;
+            }
+
+            return browserAgent == 1 ? NATIVE : IN_APP;
+        }
+    }
+
     private static final String MOPUB_REWARDED_VIDEOS =
             "com.mopub.mobileads.MoPubRewardedVideos";
     private static final String MOPUB_REWARDED_VIDEO_MANAGER =
@@ -25,17 +58,27 @@
             "com.mopub.mobileads.MoPubRewardedVideoManager$RequestParameters";
 
     private static final int DEFAULT_LOCATION_PRECISION = 6;
-    private static volatile LocationAwareness sLocationLocationAwareness = LocationAwareness.NORMAL;
+    private static final long DEFAULT_LOCATION_REFRESH_TIME_MILLIS = 60 * 1000;
+
+    @NonNull private static volatile LocationAwareness sLocationAwareness = LocationAwareness.NORMAL;
     private static volatile int sLocationPrecision = DEFAULT_LOCATION_PRECISION;
+    private static volatile long sMinimumLocationRefreshTimeMillis = DEFAULT_LOCATION_REFRESH_TIME_MILLIS;
+    @NonNull private static volatile BrowserAgent sBrowserAgent = BrowserAgent.IN_APP;
+    private static volatile boolean sIsBrowserAgentOverriddenByClient = false;
     private static boolean sSearchedForUpdateActivityMethod = false;
     @Nullable private static Method sUpdateActivityMethod;
 
+    @NonNull
     public static LocationAwareness getLocationAwareness() {
-        return sLocationLocationAwareness;
+        Preconditions.checkNotNull(sLocationAwareness);
+
+        return sLocationAwareness;
     }
 
-    public static void setLocationAwareness(LocationAwareness locationAwareness) {
-        sLocationLocationAwareness = locationAwareness;
+    public static void setLocationAwareness(@NonNull final LocationAwareness locationAwareness) {
+        Preconditions.checkNotNull(locationAwareness);
+
+        sLocationAwareness = locationAwareness;
     }
 
     public static int getLocationPrecision() {
@@ -50,6 +93,51 @@ public static void setLocationPrecision(int precision) {
         sLocationPrecision = Math.min(Math.max(0, precision), DEFAULT_LOCATION_PRECISION);
     }
 
+    public static void setMinimumLocationRefreshTimeMillis(
+            final long minimumLocationRefreshTimeMillis) {
+        sMinimumLocationRefreshTimeMillis = minimumLocationRefreshTimeMillis;
+    }
+
+    public static long getMinimumLocationRefreshTimeMillis() {
+        return sMinimumLocationRefreshTimeMillis;
+    }
+
+    public static void setBrowserAgent(@NonNull final BrowserAgent browserAgent) {
+        Preconditions.checkNotNull(browserAgent);
+
+        sBrowserAgent = browserAgent;
+        sIsBrowserAgentOverriddenByClient = true;
+    }
+
+    public static void setBrowserAgentFromAdServer(
+            @NonNull final BrowserAgent adServerBrowserAgent) {
+        Preconditions.checkNotNull(adServerBrowserAgent);
+
+        if (sIsBrowserAgentOverriddenByClient) {
+            MoPubLog.w("Browser agent already overridden by client with value " + sBrowserAgent);
+        } else {
+            sBrowserAgent = adServerBrowserAgent;
+        }
+    }
+
+    @NonNull
+    public static BrowserAgent getBrowserAgent() {
+        Preconditions.checkNotNull(sBrowserAgent);
+
+        return sBrowserAgent;
+    }
+
+    @VisibleForTesting
+    static boolean isBrowserAgentOverriddenByClient() {
+        return sIsBrowserAgentOverriddenByClient;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    public static void resetBrowserAgent() {
+        sBrowserAgent = BrowserAgent.IN_APP;
+        sIsBrowserAgentOverriddenByClient = false;
+    }
 
     //////// MoPub LifecycleListener messages ////////
 
@@ -89,6 +177,12 @@ public static void onBackPressed(@NonNull final Activity activity) {
         MoPubLifecycleManager.getInstance(activity).onBackPressed(activity);
     }
 
+    public static void disableViewability(@NonNull final ViewabilityVendor vendor) {
+        Preconditions.checkNotNull(vendor);
+
+        vendor.disable();
+    }
+
     ////////// MoPub RewardedVideoControl methods //////////
     // These methods have been deprecated as of release 4.9 due to SDK modularization. MoPub is
     // inside of the base module while MoPubRewardedVideos is inside of the rewarded video module.
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
index 65baca5d..c60702bf 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
@@ -24,12 +24,14 @@
 
 import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
 import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
-import static com.mopub.common.event.BaseEvent.*;
+import static com.mopub.common.event.BaseEvent.Category;
+import static com.mopub.common.event.BaseEvent.Name;
+import static com.mopub.common.event.BaseEvent.SamplingRate;
 import static com.mopub.common.util.Drawables.BACKGROUND;
 import static com.mopub.common.util.Drawables.CLOSE;
-import static com.mopub.common.util.Drawables.LEFT_ARROW;
 import static com.mopub.common.util.Drawables.REFRESH;
-import static com.mopub.common.util.Drawables.RIGHT_ARROW;
+import static com.mopub.common.util.Drawables.UNLEFT_ARROW;
+import static com.mopub.common.util.Drawables.UNRIGHT_ARROW;
 
 public class MoPubBrowser extends Activity {
     public static final String DESTINATION_URL_KEY = "URL";
@@ -172,7 +174,7 @@ protected void onPause() {
     protected void onResume() {
         super.onResume();
         CookieSyncManager.getInstance().startSync();
-        WebViews.onResume(mWebView);
+        mWebView.onResume();
 
         dwellTimeTracker.start();
     }
@@ -200,6 +202,7 @@ protected void onDestroy() {
                 .build());
     }
 
+    @SuppressWarnings("ResourceType") // Using XML resources causes issues in Unity
     private View getMoPubBrowserView() {
         LinearLayout moPubBrowserView = new LinearLayout(this);
         LinearLayout.LayoutParams browserLayoutParams = new LinearLayout.LayoutParams(MATCH_PARENT, MATCH_PARENT);
@@ -219,8 +222,8 @@ private View getMoPubBrowserView() {
         innerLayout.setBackgroundDrawable(BACKGROUND.createDrawable(this));
         outerLayout.addView(innerLayout);
 
-        mBackButton = getButton(LEFT_ARROW.createDrawable(this));
-        mForwardButton = getButton(RIGHT_ARROW.createDrawable(this));
+        mBackButton = getButton(UNLEFT_ARROW.createDrawable(this));
+        mForwardButton = getButton(UNRIGHT_ARROW.createDrawable(this));
         mRefreshButton = getButton(REFRESH.createDrawable(this));
         mCloseButton = getButton(CLOSE.createDrawable(this));
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java
index 41394805..8d7a4e86 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java
@@ -87,14 +87,14 @@ public void onRestart(@NonNull final Activity activity) {
     @Override
     public void onStop(@NonNull final Activity activity) {
         for (LifecycleListener lifecycleListener : mLifecycleListeners) {
-            lifecycleListener.onRestart(activity);
+            lifecycleListener.onStop(activity);
         }
     }
 
     @Override
     public void onDestroy(@NonNull final Activity activity) {
         for (LifecycleListener lifecycleListener : mLifecycleListeners) {
-            lifecycleListener.onRestart(activity);
+            lifecycleListener.onDestroy(activity);
         }
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java
new file mode 100644
index 00000000..8a3b6e9e
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java
@@ -0,0 +1,488 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.app.Application;
+import android.content.Context;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.view.View;
+import android.webkit.WebView;
+
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Reflection;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+// API documentation: https://drive.google.com/drive/folders/0B8U0thTyT1GGLUlweWRVMXk1Qlk
+class MoatViewabilitySession implements ExternalViewabilitySession {
+    private static final String MOAT_FACTORY_PATH = "com.moat.analytics.mobile.mpub.MoatFactory";
+    private static final String MOAT_OPTIONS_PATH = "com.moat.analytics.mobile.mpub.MoatOptions";
+    private static final String MOAT_ANALYTICS_PATH = "com.moat.analytics.mobile.mpub.MoatAnalytics";
+    private static final String MOAT_AD_EVENT_PATH = "com.moat.analytics.mobile.mpub.MoatAdEvent";
+    private static final String MOAT_AD_EVENT_TYPE_PATH = "com.moat.analytics.mobile.mpub.MoatAdEventType";
+    private static final String MOAT_REACTIVE_VIDEO_TRACKER_PLUGIN_PATH = "com.moat.analytics.mobile.mpub.ReactiveVideoTrackerPlugin";
+    private static final String MOAT_PLUGIN_PATH = "com.moat.analytics.mobile.mpub.MoatPlugin";
+
+    private static final String PARTNER_CODE_KEY = "partnerCode";
+    // MoPub's partner identifier with Moat. Partner code is normally parsed from the video
+    // viewability tracking URL, but in case of error, this default value is used instead.
+    private static final String DEFAULT_PARTNER_CODE = "mopubinapphtmvideo468906546585";
+    private static final String MOAT_KEY = "moat";
+    private static final String MOAT_VAST_IDS_KEY = "zMoatVASTIDs";
+
+    private static Boolean sIsViewabilityEnabledViaReflection;
+    private static boolean sIsVendorDisabled;
+    private static boolean sWasInitialized = false;
+
+    private static final Map<String, String> QUERY_PARAM_MAPPING = new HashMap<String, String>();
+    static {
+        QUERY_PARAM_MAPPING.put("moatClientLevel1", "level1");
+        QUERY_PARAM_MAPPING.put("moatClientLevel2", "level2");
+        QUERY_PARAM_MAPPING.put("moatClientLevel3", "level3");
+        QUERY_PARAM_MAPPING.put("moatClientLevel4", "level4");
+        QUERY_PARAM_MAPPING.put("moatClientSlicer1", "slicer1");
+        QUERY_PARAM_MAPPING.put("moatClientSlicer2", "slicer2");
+    }
+
+    @Nullable private Object mMoatWebAdTracker;
+    @Nullable private Object mMoatVideoTracker;
+    @NonNull private Map<String, String> mAdIds = new HashMap<String, String>();
+    private boolean mWasVideoPrepared;
+
+    static boolean isEnabled() {
+        return !sIsVendorDisabled && isViewabilityEnabledViaReflection();
+    }
+
+    static void disable() {
+        sIsVendorDisabled = true;
+    }
+
+    private static boolean isViewabilityEnabledViaReflection() {
+        if (sIsViewabilityEnabledViaReflection == null) {
+            sIsViewabilityEnabledViaReflection = Reflection.classFound(MOAT_FACTORY_PATH);
+            MoPubLog.d("Moat is "
+                    + (sIsViewabilityEnabledViaReflection ? "" : "un")
+                    + "available via reflection.");
+        }
+
+        return sIsViewabilityEnabledViaReflection;
+    }
+
+    @Override
+    @NonNull
+    public String getName() {
+        return "Moat";
+    }
+
+    @Override
+    @Nullable
+    public Boolean initialize(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (sWasInitialized) {
+            return true;
+        }
+
+        final Application application;
+        if (context instanceof Activity) {
+            application = ((Activity) context).getApplication();
+        } else {
+            try {
+                application = (Application) context.getApplicationContext();
+            } catch (ClassCastException e) {
+                MoPubLog.d("Unable to initialize Moat, error obtaining application context.");
+                return false;
+            }
+        }
+
+        // Pre-reflection code:
+        // final MoatOptions options = new MoatOptions();
+        // options.disableAdIdCollection = true;
+        // MoatAnalytics.getInstance().start(options, application);
+
+        try {
+            Object moatOptions = Reflection.instantiateClassWithEmptyConstructor(MOAT_OPTIONS_PATH,
+                    Object.class);
+
+            moatOptions.getClass().getField("disableAdIdCollection")
+                    .setBoolean(moatOptions, true);
+
+            Object moatAnalytics = new Reflection.MethodBuilder(null, "getInstance")
+                    .setStatic(MOAT_ANALYTICS_PATH)
+                    .execute();
+
+            new Reflection.MethodBuilder(moatAnalytics, "start")
+                    .addParam(MOAT_OPTIONS_PATH, moatOptions)
+                    .addParam(Application.class, application)
+                    .execute();
+
+            sWasInitialized = true;
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to initialize Moat: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean invalidate() {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        mMoatWebAdTracker = null;
+        mMoatVideoTracker = null;
+        mAdIds.clear();
+
+        return true;
+    }
+
+    @Override
+    @Nullable
+    public Boolean createDisplaySession(@NonNull final Context context,
+            @NonNull final WebView webView, boolean isDeferred) {
+        Preconditions.checkNotNull(context);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        // Pre-reflection code:
+        // mMoatWebAdTracker = MoatFactory.create().createWebAdTracker(webView);
+        // if (!isDeferred) {
+        //     mMoatWebAdTracker.startTracking();
+        // }
+
+        try {
+            Object moatFactory = new Reflection.MethodBuilder(null, "create")
+                    .setStatic(MOAT_FACTORY_PATH)
+                    .execute();
+
+            mMoatWebAdTracker = new Reflection.MethodBuilder(moatFactory, "createWebAdTracker")
+                    .addParam(WebView.class, webView)
+                    .execute();
+
+            // If we're not dealing with a deferred session, start tracking now
+            if (!isDeferred) {
+                new Reflection.MethodBuilder(mMoatWebAdTracker, "startTracking").execute();
+            }
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Moat start display session: "
+                    + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean startDeferredDisplaySession(@NonNull final Activity activity) {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mMoatWebAdTracker == null) {
+            MoPubLog.d("MoatWebAdTracker unexpectedly null.");
+            return false;
+        }
+
+        // Pre-reflection code:
+        // mMoatWebAdTracker.startTracking();
+
+        try {
+            new Reflection.MethodBuilder(mMoatWebAdTracker, "startTracking").execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to record deferred display session for Moat: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean endDisplaySession() {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mMoatWebAdTracker == null) {
+            MoPubLog.d("Moat WebAdTracker unexpectedly null.");
+            return false;
+        }
+
+        // Pre-reflection code:
+        // mMoatWebAdTracker.stopTracking();
+
+        try {
+            new Reflection.MethodBuilder(mMoatWebAdTracker, "stopTracking").execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Moat end session: " + e.getMessage());
+        }
+
+        return false;
+    }
+
+    @Override
+    @Nullable
+    public Boolean createVideoSession(@NonNull final Activity activity, @NonNull final View view,
+            @NonNull final Set<String> buyerResources,
+            @NonNull final Map<String, String> videoViewabilityTrackers) {
+        Preconditions.checkNotNull(activity);
+        Preconditions.checkNotNull(view);
+        Preconditions.checkNotNull(buyerResources);
+        Preconditions.checkNotNull(videoViewabilityTrackers);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        updateAdIdsFromUrlStringAndBuyerResources(videoViewabilityTrackers.get(MOAT_KEY),
+                buyerResources);
+
+        String partnerCode = mAdIds.get(PARTNER_CODE_KEY);
+        if (TextUtils.isEmpty(partnerCode)) {
+            MoPubLog.d("partnerCode was empty when starting Moat video session");
+            return false;
+        }
+
+        // Pre-reflection code:
+        // MoatPlugin moatPlugin = new ReactiveVideoTrackerPlugin(partnerCode);
+        // mMoatVideoTracker = MoatFactory.create().createCustomTracker(moatPlugin);
+
+        try {
+            final Object moatPlugin = Reflection.instantiateClassWithConstructor(
+                    MOAT_REACTIVE_VIDEO_TRACKER_PLUGIN_PATH, Object.class,
+                    new Class[]{String.class}, new Object[]{partnerCode});
+
+            final Object moatFactory = new Reflection.MethodBuilder(null, "create")
+                    .setStatic(MOAT_FACTORY_PATH)
+                    .execute();
+
+            mMoatVideoTracker = new Reflection.MethodBuilder(moatFactory, "createCustomTracker")
+                    .addParam(MOAT_PLUGIN_PATH, moatPlugin)
+                    .execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Moat start video session: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean registerVideoObstructions(@NonNull final List<View> views) {
+        Preconditions.checkNotNull(views);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        // unimplemented by Moat
+        return true;
+    }
+
+    @Override
+    @Nullable
+    public Boolean onVideoPrepared(@NonNull final View playerView, final int duration) {
+        Preconditions.checkNotNull(playerView);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mMoatVideoTracker == null) {
+            MoPubLog.d("Moat VideoAdTracker unexpectedly null.");
+            return false;
+        }
+
+        if (mWasVideoPrepared) {
+            return false;
+        }
+
+        // Pre-reflection code:
+        // mMoatVideoTracker.trackVideoAd(mAdIds, duration, playerView);
+
+        try {
+            new Reflection.MethodBuilder(mMoatVideoTracker, "trackVideoAd")
+                    .addParam(Map.class, mAdIds)
+                    .addParam(Integer.class, duration)
+                    .addParam(View.class, playerView)
+                    .execute();
+            mWasVideoPrepared = true;
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Moat onVideoPrepared: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean recordVideoEvent(@NonNull final VideoEvent event, final int playheadMillis) {
+        Preconditions.checkNotNull(event);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mMoatVideoTracker == null) {
+            MoPubLog.d("Moat VideoAdTracker unexpectedly null.");
+            return false;
+        }
+
+        try {
+            switch (event) {
+                case AD_STARTED:
+                case AD_STOPPED:
+                case AD_PAUSED:
+                case AD_PLAYING:
+                case AD_SKIPPED:
+                case AD_VIDEO_FIRST_QUARTILE:
+                case AD_VIDEO_MIDPOINT:
+                case AD_VIDEO_THIRD_QUARTILE:
+                case AD_COMPLETE:
+                    handleVideoEventReflection(event, playheadMillis);
+                    return true;
+
+                case AD_LOADED:
+                case AD_IMPRESSED:
+                case AD_CLICK_THRU:
+                case RECORD_AD_ERROR:
+                    // unimplemented
+                    return null;
+
+                default:
+                    MoPubLog.d("Unexpected video event: " + event.getMoatEnumName());
+                    return false;
+            }
+        } catch (Exception e) {
+            MoPubLog.d("Video event " + event.getMoatEnumName() + " failed. "
+                    + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean endVideoSession() {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mMoatVideoTracker == null) {
+            MoPubLog.d("Moat VideoAdTracker unexpectedly null.");
+            return false;
+        }
+
+        // Pre-reflection code:
+        // mMoatVideoTracker.stopTracking();
+
+        try {
+            new Reflection.MethodBuilder(mMoatVideoTracker, "stopTracking").execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Moat end video session: " + e.getMessage());
+            return false;
+        }
+    }
+
+    /**
+     * Generates the adIds map from the video viewability tracking URL and any additional buyer tag
+     * resources.
+     *
+     * @param urlString Used to gather partnerCode and relevant level/slicer information.
+     * Example: https://z.moatads.com/mopubappdisplay698212075271/moatad.js#moatClientLevel1=appname&moatClientLevel2=adunit&moatClientLevel3=creativetype&moatClientSlicer1=adformat
+     *
+     * @param buyerResources Moat buyer-tag impression pixels.
+     *
+     * Example output adIds map:
+     * {
+     *     "level1": “appname",
+     *     "level2": "adunit",
+     *     "level3": "creativetype",
+     *     "slicer1": "adformat",
+     *     "partnerCode": "mopubappdisplay698212075271",
+     *     "zMoatVASTIDs": "<ViewableImpression id="${BUYER_AD_SERVER_MACRO[S]}"><![CDATA[https://px.moatads.com/pixel.gif?moatPartnerCode=${MOAT_PARTNER_CODE}]]</ViewableImpression>"
+     * }
+     */
+    private void updateAdIdsFromUrlStringAndBuyerResources(@Nullable final String urlString,
+            @Nullable final Set<String> buyerResources) {
+        mAdIds.clear();
+        mAdIds.put(PARTNER_CODE_KEY, DEFAULT_PARTNER_CODE);
+        mAdIds.put(MOAT_VAST_IDS_KEY, TextUtils.join(";", buyerResources));
+
+        if (TextUtils.isEmpty(urlString)) {
+            return;
+        }
+
+        final Uri uri = Uri.parse(urlString);
+
+        final List<String> pathSegments = uri.getPathSegments();
+        // If a partnerCode is parsed from the viewability tracking URL, prefer to use that.
+        // Otherwise fallback to the MoPub default that was already added to the map.
+        if (pathSegments.size() > 0 && !TextUtils.isEmpty(pathSegments.get(0))) {
+            mAdIds.put(PARTNER_CODE_KEY, pathSegments.get(0));
+        }
+
+        final String fragment = uri.getFragment();
+        if (!TextUtils.isEmpty(fragment)) {
+            for (final String fragmentPairs : fragment.split("&")) {
+                final String[] fragmentPair = fragmentPairs.split("=");
+                if (fragmentPair.length < 2) {
+                    continue;
+                }
+
+                final String fragmentKey = fragmentPair[0];
+                final String fragmentValue = fragmentPair[1];
+                if (TextUtils.isEmpty(fragmentKey) || TextUtils.isEmpty(fragmentValue)) {
+                    continue;
+                }
+
+                if (QUERY_PARAM_MAPPING.containsKey(fragmentKey)) {
+                    mAdIds.put(QUERY_PARAM_MAPPING.get(fragmentKey), fragmentValue);
+                }
+            }
+        }
+    }
+
+    private boolean handleVideoEventReflection(@NonNull VideoEvent videoEvent,
+            final int playheadMillis) throws Exception {
+        if (videoEvent.getMoatEnumName() == null) {
+            return false;
+        }
+
+        // Pre-reflection code:
+        // MoatAdEvent event = new MoatAdEventType(<moatAdEventType>, playhead);
+        // mMoatVideoTracker.dispatchEvent(event);
+
+        final Class<?> clazz = Class.forName(MOAT_AD_EVENT_TYPE_PATH);
+        final Enum<?> adEventTypeEnum = Enum.valueOf(clazz.asSubclass(Enum.class),
+                videoEvent.getMoatEnumName());
+
+        final Object moatAdEvent = Reflection.instantiateClassWithConstructor(
+                MOAT_AD_EVENT_PATH, Object.class, new Class[]{clazz, Integer.class},
+                new Object[]{adEventTypeEnum, playheadMillis});
+
+        new Reflection.MethodBuilder(mMoatVideoTracker, "dispatchEvent")
+                .addParam(MOAT_AD_EVENT_PATH, moatAdEvent)
+                .execute();
+
+        return true;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java
index f6acc1d8..500910dc 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java
@@ -2,15 +2,26 @@
 
 import android.content.Context;
 import android.content.SharedPreferences;
+import android.support.annotation.NonNull;
 
 import static android.content.Context.MODE_PRIVATE;
 
 public final class SharedPreferencesHelper {
-    public static final String PREFERENCE_NAME = "mopubSettings";
+    public static final String DEFAULT_PREFERENCE_NAME = "mopubSettings";
 
     private SharedPreferencesHelper() {}
     
-    public static SharedPreferences getSharedPreferences(Context context) {
-    	return context.getSharedPreferences(PREFERENCE_NAME, MODE_PRIVATE);
+    public static SharedPreferences getSharedPreferences(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        return context.getSharedPreferences(DEFAULT_PREFERENCE_NAME, MODE_PRIVATE);
+    }
+
+    public static SharedPreferences getSharedPreferences(
+            @NonNull final Context context, @NonNull final String preferenceName) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(preferenceName);
+
+        return context.getSharedPreferences(preferenceName, MODE_PRIVATE);
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java
index b275407c..93b1c0b3 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java
@@ -7,6 +7,7 @@
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
+import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.event.BaseEvent;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Intents;
@@ -18,6 +19,7 @@
 
 import static com.mopub.common.Constants.HTTP;
 import static com.mopub.common.Constants.HTTPS;
+import static com.mopub.common.MoPub.getBrowserAgent;
 import static com.mopub.network.TrackingRequest.makeTrackingHttpRequest;
 
 /**
@@ -102,7 +104,13 @@ protected void performAction(
     /* 3 */ OPEN_NATIVE_BROWSER(true) {
         @Override
         public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
-            return "mopubnativebrowser".equalsIgnoreCase(uri.getScheme());
+            final String scheme = uri.getScheme();
+
+            if (HTTP.equalsIgnoreCase(scheme) || HTTPS.equalsIgnoreCase(scheme)) {
+                return getBrowserAgent() == BrowserAgent.NATIVE;
+            }
+
+            return "mopubnativebrowser".equalsIgnoreCase(scheme);
         }
 
         @Override
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
index c2163480..f9ac664f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
@@ -9,6 +9,7 @@
 import com.mopub.common.util.AsyncTasks;
 
 import java.io.IOException;
+import java.io.InputStream;
 import java.net.HttpURLConnection;
 import java.net.URI;
 import java.net.URISyntaxException;
@@ -59,6 +60,11 @@ protected String doInBackground(@Nullable String... urls) {
                     return locationUrl;
                 }
 
+                // Do not resolve redirects if native browser will handle the URL.
+                if (UrlAction.OPEN_NATIVE_BROWSER.shouldTryHandlingUrl(Uri.parse(locationUrl))) {
+                    return locationUrl;
+                }
+
                 previousUrl = locationUrl;
                 locationUrl = getRedirectLocation(locationUrl);
                 redirectCount++;
@@ -86,6 +92,14 @@ private String getRedirectLocation(@NonNull final String urlString) throws IOExc
             return resolveRedirectLocation(urlString, httpUrlConnection);
         } finally {
             if (httpUrlConnection != null) {
+                final InputStream is = httpUrlConnection.getInputStream();
+                if (is != null) {
+                    try {
+                        is.close();
+                    } catch (IOException e) {
+                        MoPubLog.d("IOException when closing httpUrlConnection. Ignoring.");
+                    }
+                }
                 httpUrlConnection.disconnect();
             }
         }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
index fa140548..fb527fef 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
@@ -1,6 +1,5 @@
 package com.mopub.common.logging;
 
-import android.annotation.SuppressLint;
 import android.support.annotation.NonNull;
 import android.util.Log;
 
@@ -127,7 +126,7 @@ private static void addHandler(@NonNull final Logger logger,
         }
 
         @Override
-        @SuppressLint("LogTagMismatch")
+        @SuppressWarnings({"LogTagMismatch", "WrongConstant"})
         public void publish(final LogRecord logRecord) {
             if (isLoggable(logRecord)) {
                 final int priority;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/AsyncTasks.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/AsyncTasks.java
index b8e25d73..e1da8d52 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/AsyncTasks.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/AsyncTasks.java
@@ -1,15 +1,11 @@
 package com.mopub.common.util;
 
-import android.annotation.TargetApi;
 import android.os.AsyncTask;
-import android.os.Build.VERSION;
-import android.os.Build.VERSION_CODES;
 
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 
 import java.util.concurrent.Executor;
-import java.util.concurrent.Executors;
 
 public class AsyncTasks {
     private static Executor sExecutor;
@@ -19,14 +15,9 @@
     }
 
     // This is in a separate method rather than a static block to pass lint.
-    @TargetApi(VERSION_CODES.HONEYCOMB)
     private static void init() {
-        // Reuse the async task executor if possible
-        if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {
-            sExecutor = AsyncTask.THREAD_POOL_EXECUTOR;
-        } else {
-            sExecutor = Executors.newSingleThreadExecutor();
-        }
+        // Reuse the async task executor
+        sExecutor = AsyncTask.THREAD_POOL_EXECUTOR;
     }
 
     @VisibleForTesting
@@ -36,18 +27,12 @@ public static void setExecutor(Executor executor) {
 
     /**
      * Starting with Honeycomb, default AsyncTask#execute behavior runs the tasks serially. This
-     * method attempts to force these AsyncTasks to run in parallel with a ThreadPoolExecutor, if
-     * possible.
+     * method attempts to force these AsyncTasks to run in parallel with a ThreadPoolExecutor.
      */
-    @TargetApi(VERSION_CODES.HONEYCOMB)
     public static <P> void safeExecuteOnExecutor(AsyncTask<P, ?, ?> asyncTask, P... params) {
         Preconditions.checkNotNull(asyncTask, "Unable to execute null AsyncTask.");
         Preconditions.checkUiThread("AsyncTask must be executed on the main thread");
 
-        if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {
-            asyncTask.executeOnExecutor(sExecutor, params);
-        } else {
-            asyncTask.execute(params);
-        }
+        asyncTask.executeOnExecutor(sExecutor, params);
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java
index ed4142da..c4395a46 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java
@@ -31,8 +31,6 @@
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static android.Manifest.permission.INTERNET;
 import static com.mopub.common.util.Reflection.MethodBuilder;
-import static com.mopub.common.util.VersionCode.HONEYCOMB;
-import static com.mopub.common.util.VersionCode.currentApiLevel;
 
 public class DeviceUtils {
     private static final int MAX_MEMORY_CACHE_SIZE = 30 * 1024 * 1024; // 30 MB
@@ -98,15 +96,13 @@ public static int memoryCacheSizeBytes(final Context context) {
         final ActivityManager activityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
         long memoryClass = activityManager.getMemoryClass();
 
-        if (currentApiLevel().isAtLeast(HONEYCOMB)) {
-            try {
-                final int flagLargeHeap = ApplicationInfo.class.getDeclaredField("FLAG_LARGE_HEAP").getInt(null);
-                if (Utils.bitMaskContainsFlag(context.getApplicationInfo().flags, flagLargeHeap)) {
-                    memoryClass = (Integer) new MethodBuilder(activityManager, "getLargeMemoryClass").execute();
-                }
-            } catch (Exception e) {
-                MoPubLog.d("Unable to reflectively determine large heap size on Honeycomb and above.");
+        try {
+            final int flagLargeHeap = ApplicationInfo.class.getDeclaredField("FLAG_LARGE_HEAP").getInt(null);
+            if (Utils.bitMaskContainsFlag(context.getApplicationInfo().flags, flagLargeHeap)) {
+                memoryClass = (Integer) new MethodBuilder(activityManager, "getLargeMemoryClass").execute();
             }
+        } catch (Exception e) {
+            MoPubLog.d("Unable to reflectively determine large heap size.");
         }
 
         long result = Math.min(MAX_MEMORY_CACHE_SIZE, memoryClass / 8 * 1024 * 1024);
@@ -217,26 +213,24 @@ public static Point getDeviceDimensions(@NonNull final Context context) {
         Integer bestWidthPixels = null;
         Integer bestHeightPixels = null;
 
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
-            final WindowManager windowManager = (WindowManager) context.getSystemService(
-                    Context.WINDOW_SERVICE);
-            final Display display = windowManager.getDefaultDisplay();
-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
-                final Point screenSize = new Point();
-                display.getRealSize(screenSize);
-                bestWidthPixels = screenSize.x;
-                bestHeightPixels = screenSize.y;
-            } else {
-                try {
-                    bestWidthPixels = (Integer) new MethodBuilder(display,
-                            "getRawWidth").execute();
-                    bestHeightPixels = (Integer) new MethodBuilder(display,
-                            "getRawHeight").execute();
-                } catch (Exception e) {
-                    // Best effort. If this fails, just get the height and width normally,
-                    // which may not capture the pixels used in the notification bar.
-                    MoPubLog.v("Display#getRawWidth/Height failed.", e);
-                }
+        final WindowManager windowManager = (WindowManager) context.getSystemService(
+                Context.WINDOW_SERVICE);
+        final Display display = windowManager.getDefaultDisplay();
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            final Point screenSize = new Point();
+            display.getRealSize(screenSize);
+            bestWidthPixels = screenSize.x;
+            bestHeightPixels = screenSize.y;
+        } else {
+            try {
+                bestWidthPixels = (Integer) new MethodBuilder(display,
+                        "getRawWidth").execute();
+                bestHeightPixels = (Integer) new MethodBuilder(display,
+                        "getRawHeight").execute();
+            } catch (Exception e) {
+                // Best effort. If this fails, just get the height and width normally,
+                // which may not capture the pixels used in the notification bar.
+                MoPubLog.v("Display#getRawWidth/Height failed.", e);
             }
         }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java
index 90e7f16a..15177acd 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java
@@ -1,10 +1,7 @@
 package com.mopub.common.util;
 
 import android.graphics.Bitmap;
-import android.os.Build;
 import android.support.annotation.NonNull;
-import android.widget.ImageView;
-
 
 public class ImageUtils {
 
@@ -43,19 +40,4 @@ public static Bitmap applyFastGaussianBlurToBitmap(@NonNull Bitmap mutableBitmap
         mutableBitmap.setPixels(pixels, 0, w, 0, 0, w, h);
         return mutableBitmap;
     }
-
-    /**
-     * Sets the alpha value of the ImageView.
-     * API Level < 16: https://developer.android.com/reference/android/widget/ImageView.html#setAlpha(int)
-     * API Level >= 16: https://developer.android.com/reference/android/widget/ImageView.html#setImageAlpha(int)
-     * @param imageView the ImageView
-     * @param alpha the alpha value being applied to the ImageView
-     */
-    public static void setImageViewAlpha(@NonNull ImageView imageView, int alpha) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
-            imageView.setImageAlpha(alpha);
-        } else {
-            imageView.setAlpha(alpha);
-        }
-    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java
index c0d9b3e8..b54723cb 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java
@@ -13,6 +13,7 @@
 import android.text.TextUtils;
 
 import com.mopub.common.Constants;
+import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.Preconditions;
 import com.mopub.common.UrlAction;
@@ -23,6 +24,7 @@
 import java.util.List;
 
 import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
+import static com.mopub.common.MoPub.getBrowserAgent;
 
 public class Intents {
 
@@ -81,17 +83,38 @@ public static boolean deviceCanHandleIntent(@NonNull final Context context,
      *
      * @param uri The Native Browser Scheme URL to open in the external browser.
      * @return An Intent that will open an app-external browser taking the user to a page specified
-     * in the query parameter of the passed-in url
-     * @throws UrlParseException if the provided url has an invalid format or is non-hierarchical
+     * in the query parameter of the passed-in url.
+     * @throws UrlParseException if the provided url has an invalid format or is non-hierarchical.
      */
     public static Intent intentForNativeBrowserScheme(@NonNull final Uri uri)
             throws UrlParseException {
         Preconditions.checkNotNull(uri);
 
         if (!UrlAction.OPEN_NATIVE_BROWSER.shouldTryHandlingUrl(uri)) {
-            throw new UrlParseException("URL does not have mopubnativebrowser:// scheme.");
+            String supportedSchemes = "mopubnativebrowser://";
+            if (getBrowserAgent() == BrowserAgent.NATIVE) {
+                supportedSchemes += ", http://, or https://";
+            }
+            throw new UrlParseException("URI does not have " + supportedSchemes + " scheme.");
+        }
+
+        if ("mopubnativebrowser".equalsIgnoreCase(uri.getScheme())) {
+            final Uri intentUri = parseMoPubNativeBrowserUri(uri);
+            return new Intent(Intent.ACTION_VIEW, intentUri);
+        }
+
+        if (getBrowserAgent() == BrowserAgent.NATIVE) {
+            return new Intent(Intent.ACTION_VIEW, uri);
         }
 
+        // Should never get here
+        throw new UrlParseException("Invalid URI: " + uri.toString());
+    }
+
+    private static Uri parseMoPubNativeBrowserUri(@NonNull final Uri uri)
+            throws UrlParseException {
+        Preconditions.checkNotNull(uri);
+
         if (!"navigate".equals(uri.getHost())) {
             throw new UrlParseException("URL missing 'navigate' host parameter.");
         }
@@ -110,8 +133,7 @@ public static Intent intentForNativeBrowserScheme(@NonNull final Uri uri)
             throw new UrlParseException("URL missing 'url' query parameter.");
         }
 
-        final Uri intentUri = Uri.parse(urlToOpenInNativeBrowser);
-        return new Intent(Intent.ACTION_VIEW, intentUri);
+        return Uri.parse(urlToOpenInNativeBrowser);
     }
 
     /**
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/JavaScriptWebViewCallbacks.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/JavaScriptWebViewCallbacks.java
new file mode 100644
index 00000000..143dc2e7
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/JavaScriptWebViewCallbacks.java
@@ -0,0 +1,22 @@
+package com.mopub.common.util;
+
+public enum JavaScriptWebViewCallbacks {
+    // The ad server appends these functions to the MRAID javascript to help with third party
+    // impression tracking.
+    WEB_VIEW_DID_APPEAR("webviewDidAppear();"),
+    WEB_VIEW_DID_CLOSE("webviewDidClose();");
+
+    private String mJavascript;
+    
+    JavaScriptWebViewCallbacks(String javascript) {
+        mJavascript = javascript;
+    }
+
+    public String getJavascript() {
+        return mJavascript;
+    }
+
+    public String getUrl() {
+        return "javascript:" + mJavascript;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
index c248acec..791ef1f6 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
@@ -19,14 +19,13 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static com.mopub.common.util.VersionCode.HONEYCOMB_MR2;
-import static com.mopub.common.util.VersionCode.currentApiLevel;
-
 public class ManifestUtils {
     private ManifestUtils() {}
 
     private static final String MOPUB_ACTIVITY = "com.mopub.mobileads.MoPubActivity";
     private static final String MRAID_ACTIVITY = "com.mopub.mobileads.MraidActivity";
+    private static final String REWARDED_MRAID_ACTIVITY =
+            "com.mopub.mobileads.RewardedMraidActivity";
     private static final List<Class<? extends Activity>> REQUIRED_WEB_VIEW_SDK_ACTIVITIES;
     private static FlagCheckUtil sFlagCheckUtil = new FlagCheckUtil();
 
@@ -41,8 +40,10 @@ private ManifestUtils() {}
         try {
             final Class moPubActivityClass = Class.forName(MOPUB_ACTIVITY);
             final Class mraidActivityClass = Class.forName(MRAID_ACTIVITY);
+            final Class rewardedMraidActivityClass = Class.forName(REWARDED_MRAID_ACTIVITY);
             REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(moPubActivityClass);
             REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(mraidActivityClass);
+            REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(rewardedMraidActivityClass);
         } catch (ClassNotFoundException e) {
             MoPubLog.i("ManifestUtils running without interstitial module");
         }
@@ -232,12 +233,7 @@ private static ActivityConfigChanges getActivityConfigChanges(@NonNull Context c
         activityConfigChanges.hasOrientation = sFlagCheckUtil.hasFlag(activity, activityInfo.configChanges, ActivityInfo.CONFIG_ORIENTATION);
         activityConfigChanges.hasScreenSize = true;
 
-        // For screenSize, only set to false if the API level and target API are >= 13
-        // If the target API is < 13, then Android will implement its own backwards compatibility
-        if (currentApiLevel().isAtLeast(HONEYCOMB_MR2) &&
-                context.getApplicationInfo().targetSdkVersion >= VersionCode.HONEYCOMB_MR2.getApiLevel()) {
-            activityConfigChanges.hasScreenSize = sFlagCheckUtil.hasFlag(activity, activityInfo.configChanges, ActivityInfo.CONFIG_SCREEN_SIZE);
-        }
+        activityConfigChanges.hasScreenSize = sFlagCheckUtil.hasFlag(activity, activityInfo.configChanges, ActivityInfo.CONFIG_SCREEN_SIZE);
 
         return activityConfigChanges;
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
index 5755e559..cf94ec5b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
@@ -1,6 +1,7 @@
 package com.mopub.common.util;
 
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import com.mopub.common.Preconditions;
 
@@ -10,18 +11,24 @@
 import java.util.ArrayList;
 import java.util.List;
 
+/**
+ * NOTE: Any methods accessed via this class should be annotated with
+ * {@link com.mopub.common.util.ReflectionTarget}
+ */
 public class Reflection {
     public static class MethodBuilder {
-        private final Object mInstance;
-        private final String mMethodName;
-        private Class<?> mClass;
+        @Nullable private final Object mInstance;
+        @NonNull private final String mMethodName;
+        @Nullable private Class<?> mClass;
 
-        private List<Class<?>> mParameterClasses;
-        private List<Object> mParameters;
+        @NonNull private List<Class<?>> mParameterClasses;
+        @NonNull private List<Object> mParameters;
         private boolean mIsAccessible;
         private boolean mIsStatic;
 
-        public MethodBuilder(final Object instance, final String methodName) {
+        public MethodBuilder(@Nullable final Object instance, @NonNull final String methodName) {
+            Preconditions.checkNotNull(methodName);
+
             mInstance = instance;
             mMethodName = methodName;
 
@@ -31,37 +38,70 @@ public MethodBuilder(final Object instance, final String methodName) {
             mClass = (instance != null) ? instance.getClass() : null;
         }
 
-        public <T> MethodBuilder addParam(Class<T> clazz, T parameter) {
+        @NonNull
+        public <T> MethodBuilder addParam(@NonNull final Class<T> clazz,
+                @Nullable final T parameter) {
+            Preconditions.checkNotNull(clazz);
+
+            mParameterClasses.add(clazz);
+            mParameters.add(parameter);
+
+            return this;
+        }
+
+        @NonNull
+        public MethodBuilder addParam(@NonNull final String className,
+                @Nullable final Object parameter) throws ClassNotFoundException {
+            Preconditions.checkNotNull(className);
+
+            final Class<?> clazz = Class.forName(className);
+
             mParameterClasses.add(clazz);
             mParameters.add(parameter);
 
             return this;
         }
 
+        @NonNull
         public MethodBuilder setAccessible() {
             mIsAccessible = true;
 
             return this;
         }
 
-        public MethodBuilder setStatic(Class<?> clazz) {
+        @NonNull
+        public MethodBuilder setStatic(@NonNull final Class<?> clazz) {
+            Preconditions.checkNotNull(clazz);
+
             mIsStatic = true;
             mClass = clazz;
 
             return this;
         }
 
+        @NonNull
+        public MethodBuilder setStatic(@NonNull final String className)
+                throws ClassNotFoundException {
+            Preconditions.checkNotNull(className);
+
+            mIsStatic = true;
+            mClass = Class.forName(className);
+
+            return this;
+        }
+
+        @Nullable
         public Object execute() throws Exception {
-            Class<?>[] classArray = new Class<?>[mParameterClasses.size()];
-            Class<?>[] parameterTypes = mParameterClasses.toArray(classArray);
+            final Class<?>[] classArray = new Class<?>[mParameterClasses.size()];
+            final Class<?>[] parameterTypes = mParameterClasses.toArray(classArray);
 
-            Method method = getDeclaredMethodWithTraversal(mClass, mMethodName, parameterTypes);
+            final Method method = getDeclaredMethodWithTraversal(mClass, mMethodName, parameterTypes);
 
             if (mIsAccessible) {
                 method.setAccessible(true);
             }
 
-            Object[] parameters = mParameters.toArray();
+            final Object[] parameters = mParameters.toArray();
 
             if (mIsStatic) {
                 return method.invoke(null, parameters);
@@ -71,8 +111,13 @@ public Object execute() throws Exception {
         }
     }
 
-    public static Method getDeclaredMethodWithTraversal(Class<?> clazz, String methodName, Class<?>... parameterTypes)
+    @Nullable
+    public static Method getDeclaredMethodWithTraversal(@Nullable final Class<?> clazz,
+            @NonNull final String methodName, @NonNull final Class<?>... parameterTypes)
             throws NoSuchMethodException {
+        Preconditions.checkNotNull(methodName);
+        Preconditions.checkNotNull(parameterTypes);
+
         Class<?> currentClass = clazz;
 
         while (currentClass != null) {
@@ -86,7 +131,9 @@ public static Method getDeclaredMethodWithTraversal(Class<?> clazz, String metho
         throw new NoSuchMethodException();
     }
 
-    public static boolean classFound(final String className) {
+    public static boolean classFound(@NonNull final String className) {
+        Preconditions.checkNotNull(className);
+
         try {
             Class.forName(className);
             return true;
@@ -95,11 +142,13 @@ public static boolean classFound(final String className) {
         }
     }
 
+    @NonNull
     public static <T> T instantiateClassWithEmptyConstructor(@NonNull final String className,
             @NonNull final Class<? extends T> superclass)
             throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException,
             InvocationTargetException, InstantiationException, NullPointerException {
         Preconditions.checkNotNull(className);
+        Preconditions.checkNotNull(superclass);
 
         final Class<? extends T> clazz = Class.forName(className).asSubclass(superclass);
         // noinspection unchecked
@@ -109,9 +158,10 @@ public static boolean classFound(final String className) {
         return constructor.newInstance();
     }
 
+    @NonNull
     public static <T> T instantiateClassWithConstructor(@NonNull final String className,
-            @NonNull final Class<? extends T> superClass, @NonNull Class[] classes,
-            @NonNull Object[] parameters)
+            @NonNull final Class<? extends T> superClass, @NonNull final Class[] classes,
+            @NonNull final Object[] parameters)
             throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException,
             InvocationTargetException, InstantiationException {
         Preconditions.checkNotNull(className);
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ReflectionTarget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ReflectionTarget.java
new file mode 100644
index 00000000..6f2d46f1
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ReflectionTarget.java
@@ -0,0 +1,7 @@
+package com.mopub.common.util;
+
+/**
+ * Methods that are accessed via reflection should be annotated with this so proguard does not
+ * obfuscate them.
+ */
+public @interface ReflectionTarget { }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
index 002c36b2..ad909dbe 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
@@ -25,18 +25,36 @@
     LOCATION("Location"),
     USER_AGENT("User-Agent"),
     ACCEPT_LANGUAGE("Accept-Language"),
+    BROWSER_AGENT("X-Browser-Agent"),
+
+    // Banner impression tracking fields
+    BANNER_IMPRESSION_MIN_VISIBLE_DIPS("X-Banner-Impression-Min-Pixels"),
+    BANNER_IMPRESSION_MIN_VISIBLE_MS("X-Banner-Impression-Min-Ms"),
+
+    // Native fields
+    IMPRESSION_MIN_VISIBLE_PERCENT("X-Impression-Min-Visible-Percent"),
+    IMPRESSION_VISIBLE_MS("X-Impression-Visible-Ms"),
+    IMPRESSION_MIN_VISIBLE_PX("X-Native-Impression-Min-Px"),
 
     // Native Video fields
     PLAY_VISIBLE_PERCENT("X-Play-Visible-Percent"),
     PAUSE_VISIBLE_PERCENT("X-Pause-Visible-Percent"),
-    IMPRESSION_MIN_VISIBLE_PERCENT("X-Impression-Min-Visible-Percent"),
-    IMPRESSION_VISIBLE_MS("X-Impression-Visible-Ms"),
     MAX_BUFFER_MS("X-Max-Buffer-Ms"),
 
-    // Rewarded Video fields
+    // Rewarded Ad fields
     REWARDED_VIDEO_CURRENCY_NAME("X-Rewarded-Video-Currency-Name"),
     REWARDED_VIDEO_CURRENCY_AMOUNT("X-Rewarded-Video-Currency-Amount"),
+    REWARDED_CURRENCIES("X-Rewarded-Currencies"),
     REWARDED_VIDEO_COMPLETION_URL("X-Rewarded-Video-Completion-Url"),
+    REWARDED_DURATION("X-Rewarded-Duration"),
+    SHOULD_REWARD_ON_CLICK("X-Should-Reward-On-Click"),
+
+    // Internal Video Trackers
+    VIDEO_TRACKERS("X-Video-Trackers"),
+
+    // Viewability fields
+    VIDEO_VIEWABILITY_TRACKERS("X-Video-Viewability-Trackers"),
+    DISABLE_VIEWABILITY("X-Disable-Viewability"),
 
     @Deprecated CUSTOM_SELECTOR("X-Customselector");
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java
index 0572a7cf..fabe6469 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java
@@ -1,5 +1,7 @@
 package com.mopub.common.util;
 
+import com.mopub.common.logging.MoPubLog;
+
 import java.io.Closeable;
 import java.io.IOException;
 import java.io.InputStream;
@@ -60,8 +62,9 @@ public static void closeStream(Closeable stream) {
 
         try {
             stream.close();
-        } catch (IOException e) {
+        } catch (Exception e) {
             // Unable to close the stream
+            MoPubLog.d("Unable to close stream. Ignoring.");
         }
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/VersionCode.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/VersionCode.java
deleted file mode 100644
index fee8713e..00000000
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/VersionCode.java
+++ /dev/null
@@ -1,61 +0,0 @@
-package com.mopub.common.util;
-
-import android.os.Build;
-
-public enum VersionCode {
-    BASE(1),
-    BASE_1_1(2),
-    CUPCAKE(3),
-    DONUT(4),
-    ECLAIR(5),
-    ECLAIR_0_1(6),
-    ECLAIR_MR1(7),
-    FROYO(8),
-    GINGERBREAD(9),
-    GINGERBREAD_MR1(10),
-    HONEYCOMB(11),
-    HONEYCOMB_MR1(12),
-    HONEYCOMB_MR2(13),
-    ICE_CREAM_SANDWICH(14),
-    ICE_CREAM_SANDWICH_MR1(15),
-    JELLY_BEAN(16),
-    JELLY_BEAN_MR1(17),
-    JELLY_BEAN_MR2(18),
-    KITKAT(19),
-    CUR_DEVELOPMENT(10000);
-
-    private int mApiLevel;
-
-    public static VersionCode currentApiLevel() {
-        return forApiLevel(Build.VERSION.SDK_INT);
-    }
-
-    private static VersionCode forApiLevel(int targetApiLevel) {
-        for (VersionCode versionCode : VersionCode.values()) {
-            if (versionCode.getApiLevel() == targetApiLevel) {
-                return versionCode;
-            }
-        }
-        return CUR_DEVELOPMENT;
-    }
-
-    VersionCode(int apiLevel) {
-        this.mApiLevel = apiLevel;
-    }
-
-    public int getApiLevel() {
-        return mApiLevel;
-    }
-
-    public boolean isAtMost(VersionCode that) {
-        return this.getApiLevel() <= that.getApiLevel();
-    }
-
-    public boolean isAtLeast(VersionCode that) {
-        return this.getApiLevel() >= that.getApiLevel();
-    }
-
-    public boolean isBelow(VersionCode that) {
-        return this.getApiLevel() < that.getApiLevel();
-    }
-}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Views.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Views.java
index e0ebd1e5..694ff1c5 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Views.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Views.java
@@ -1,10 +1,16 @@
 package com.mopub.common.util;
 
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.Nullable;
+import android.support.v4.view.ViewCompat;
 import android.view.View;
 import android.view.ViewGroup;
 
+import com.mopub.common.logging.MoPubLog;
+
 public class Views {
-    public static void removeFromParent(View view) {
+    public static void removeFromParent(@Nullable View view) {
         if (view == null || view.getParent() == null) {
             return;
         }
@@ -13,4 +19,59 @@ public static void removeFromParent(View view) {
             ((ViewGroup) view.getParent()).removeView(view);
         }
     }
+
+    /**
+     * Finds the topmost view in the current Activity or current view hierarchy.
+     *
+     * @param context If an Activity Context, used to obtain the Activity's DecorView. This is
+     *                ignored if it is a non-Activity Context.
+     * @param view A View in the currently displayed view hierarchy. If a null or non-Activity
+     *             Context is provided, this View's topmost parent is used to determine the
+     *             rootView.
+     * @return The topmost View in the currency Activity or current view hierarchy. Null if no
+     * applicable View can be found.
+     */
+    @Nullable
+    public static View getTopmostView(@Nullable final Context context, @Nullable final View view) {
+        final View rootViewFromActivity = getRootViewFromActivity(context);
+        final View rootViewFromView = getRootViewFromView(view);
+
+        // Prefer to use the rootView derived from the Activity's DecorView since it provides a
+        // consistent value when the View is not attached to the Window. Fall back to the passed-in
+        // View's hierarchy if necessary.
+        return rootViewFromActivity != null
+                ? rootViewFromActivity
+                : rootViewFromView;
+    }
+
+    @Nullable
+    private static View getRootViewFromActivity(@Nullable final Context context) {
+        if (!(context instanceof Activity)) {
+            return null;
+        }
+
+        return ((Activity) context).getWindow().getDecorView().findViewById(android.R.id.content);
+    }
+
+    @Nullable
+    private static View getRootViewFromView(@Nullable final View view) {
+        if (view == null) {
+            return null;
+        }
+
+        if (!ViewCompat.isAttachedToWindow(view)) {
+            MoPubLog.d("Attempting to call View#getRootView() on an unattached View.");
+        }
+
+        final View rootView = view.getRootView();
+
+        if (rootView == null) {
+            return null;
+        }
+
+        final View rootContentView = rootView.findViewById(android.R.id.content);
+        return rootContentView != null
+                ? rootContentView
+                : rootView;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java
index 10d6625b..d86c7ac9 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java
@@ -5,7 +5,7 @@
 import android.text.TextUtils;
 
 import com.mopub.common.Preconditions;
-import com.mopub.network.AdRequest;
+import com.mopub.common.VisibleForTesting;
 
 import java.util.Map;
 import java.util.TreeMap;
@@ -98,6 +98,12 @@ void clearClickUrl(@NonNull final String adUnitId) {
         }
     }
 
+    @Deprecated
+    @VisibleForTesting
+    void clearMapping() {
+        mAdUnitToAdRequestStatus.clear();
+    }
+
     private static enum LoadingStatus { LOADING, LOADED, PLAYED }
     private static class AdRequestStatus {
         @NonNull
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
index 7cdeb29e..025571bb 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
@@ -14,32 +14,50 @@
 public class AdTypeTranslator {
     public enum CustomEventType {
         // "Special" custom events that we let people choose in the UI.
-        GOOGLE_PLAY_SERVICES_BANNER("admob_native_banner", "com.mopub.mobileads.GooglePlayServicesBanner"),
-        GOOGLE_PLAY_SERVICES_INTERSTITIAL("admob_full_interstitial", "com.mopub.mobileads.GooglePlayServicesInterstitial"),
-        MILLENNIAL_BANNER("millennial_native_banner", "com.mopub.mobileads.MillennialBanner"),
-        MILLENNIAL_INTERSTITIAL("millennial_full_interstitial", "com.mopub.mobileads.MillennialInterstitial"),
+        GOOGLE_PLAY_SERVICES_BANNER("admob_native_banner",
+                "com.mopub.mobileads.GooglePlayServicesBanner", false),
+        GOOGLE_PLAY_SERVICES_INTERSTITIAL("admob_full_interstitial",
+                "com.mopub.mobileads.GooglePlayServicesInterstitial", false),
+        MILLENNIAL_BANNER("millennial_native_banner",
+                "com.mopub.mobileads.MillennialBanner", false),
+        MILLENNIAL_INTERSTITIAL("millennial_full_interstitial",
+                "com.mopub.mobileads.MillennialInterstitial", false),
 
         // MoPub-specific custom events.
-        MRAID_BANNER("mraid_banner", "com.mopub.mraid.MraidBanner"),
-        MRAID_INTERSTITIAL("mraid_interstitial", "com.mopub.mraid.MraidInterstitial"),
-        HTML_BANNER("html_banner", "com.mopub.mobileads.HtmlBanner"),
-        HTML_INTERSTITIAL("html_interstitial", "com.mopub.mobileads.HtmlInterstitial"),
-        VAST_VIDEO_INTERSTITIAL("vast_interstitial", "com.mopub.mobileads.VastVideoInterstitial"),
-        MOPUB_NATIVE("mopub_native", "com.mopub.nativeads.MoPubCustomEventNative"),
-        MOPUB_VIDEO_NATIVE("mopub_video_native", "com.mopub.nativeads.MoPubCustomEventVideoNative"),
-        MOPUB_REWARDED_VIDEO("rewarded_video", "com.mopub.mobileads.MoPubRewardedVideo"),
+        MRAID_BANNER("mraid_banner",
+                "com.mopub.mraid.MraidBanner", true),
+        MRAID_INTERSTITIAL("mraid_interstitial",
+                "com.mopub.mraid.MraidInterstitial", true),
+        HTML_BANNER("html_banner",
+                "com.mopub.mobileads.HtmlBanner", true),
+        HTML_INTERSTITIAL("html_interstitial",
+                "com.mopub.mobileads.HtmlInterstitial", true),
+        VAST_VIDEO_INTERSTITIAL("vast_interstitial",
+                "com.mopub.mobileads.VastVideoInterstitial", true),
+        MOPUB_NATIVE("mopub_native",
+                "com.mopub.nativeads.MoPubCustomEventNative", true),
+        MOPUB_VIDEO_NATIVE("mopub_video_native",
+                "com.mopub.nativeads.MoPubCustomEventVideoNative", true),
+        MOPUB_REWARDED_VIDEO("rewarded_video",
+                "com.mopub.mobileads.MoPubRewardedVideo", true),
+        MOPUB_REWARDED_PLAYABLE("rewarded_playable",
+                "com.mopub.mobileads.MoPubRewardedPlayable", true),
 
-        UNSPECIFIED("", null);
+        UNSPECIFIED("", null, false);
 
+        @NonNull
         private final String mKey;
+        @Nullable
         private final String mClassName;
+        private final boolean mIsMoPubSpecific;
 
-        private CustomEventType(String key, String className) {
+        private CustomEventType(String key, String className, boolean isMoPubSpecific) {
             mKey = key;
             mClassName = className;
+            mIsMoPubSpecific = isMoPubSpecific;
         }
 
-        private static CustomEventType fromString(String key) {
+        private static CustomEventType fromString(@Nullable final String key) {
             for (CustomEventType customEventType : values()) {
                 if (customEventType.mKey.equals(key)) {
                     return customEventType;
@@ -49,10 +67,25 @@ private static CustomEventType fromString(String key) {
             return UNSPECIFIED;
         }
 
+        private static CustomEventType fromClassName(@Nullable final String className) {
+            for (CustomEventType customEventType : values()) {
+                if (customEventType.mClassName != null
+                        && customEventType.mClassName.equals(className)) {
+                    return customEventType;
+                }
+            }
+
+            return UNSPECIFIED;
+        }
+
         @Override
         public String toString() {
             return mClassName;
         }
+
+        public static boolean isMoPubSpecific(@Nullable final String className) {
+            return fromClassName(className).mIsMoPubSpecific;
+        }
     }
 
     public static final String BANNER_SUFFIX = "_banner";
@@ -69,12 +102,14 @@ public static String getCustomEventName(@NonNull AdFormat adFormat,
             @NonNull Map<String, String> headers) {
         if (AdType.CUSTOM.equalsIgnoreCase(adType)) {
             return extractHeader(headers, ResponseHeader.CUSTOM_EVENT_NAME);
-        } else if (AdType.STATIC_NATIVE.equalsIgnoreCase(adType)){
+        } else if (AdType.STATIC_NATIVE.equalsIgnoreCase(adType)) {
             return CustomEventType.MOPUB_NATIVE.toString();
         } else if (AdType.VIDEO_NATIVE.equalsIgnoreCase(adType)) {
             return CustomEventType.MOPUB_VIDEO_NATIVE.toString();
         } else if (AdType.REWARDED_VIDEO.equalsIgnoreCase(adType)) {
             return CustomEventType.MOPUB_REWARDED_VIDEO.toString();
+        } else if (AdType.REWARDED_PLAYABLE.equalsIgnoreCase(adType)) {
+            return CustomEventType.MOPUB_REWARDED_PLAYABLE.toString();
         } else if (AdType.HTML.equalsIgnoreCase(adType) || AdType.MRAID.equalsIgnoreCase(adType)) {
             return (AdFormat.INTERSTITIAL.equals(adFormat)
                     ? CustomEventType.fromString(adType + INTERSTITIAL_SUFFIX)
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
index 98f3d52f..57144826 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -58,6 +58,7 @@
     @Nullable private WebViewAdUrlGenerator mUrlGenerator;
 
     @Nullable private AdResponse mAdResponse;
+    @Nullable private String mCustomEventClassName;
     private final Runnable mRefreshRunnable;
     @NonNull private final AdRequest.Listener mAdListener;
 
@@ -71,8 +72,20 @@
     int mBackoffPower = 1;
 
     private Map<String, Object> mLocalExtras = new HashMap<String, Object>();
-    private boolean mAutoRefreshEnabled = true;
-    private boolean mPreviousAutoRefreshSetting = true;
+
+    /**
+     * This is the current auto refresh status. If this is true, then ads will attempt to refresh.
+     * If mRefreshTimeMillis is null or not greater than 0, the auto refresh runnable will not
+     * be called.
+     */
+    private boolean mCurrentAutoRefreshStatus = true;
+
+    /**
+     * This is the publisher-specified auto refresh flag. AdViewController will only attempt to
+     * refresh ads when this is true. Setting this to false will block refreshing.
+     */
+    private boolean mShouldAllowAutoRefresh = true;
+
     private String mKeywords;
     private Location mLocation;
     private boolean mIsTesting;
@@ -126,6 +139,7 @@ public void run() {
     void onAdLoadSuccess(@NonNull final AdResponse adResponse) {
         mBackoffPower = 1;
         mAdResponse = adResponse;
+        mCustomEventClassName = adResponse.getCustomEventClassName();
         // Do other ad loading setup. See AdFetcher & AdLoadTask.
         mTimeoutMilliseconds = mAdResponse.getAdTimeoutMillis() == null
                 ? mTimeoutMilliseconds
@@ -237,10 +251,15 @@ private void internalLoadAd() {
         loadNonJavascript(adUrl);
     }
 
-    void loadNonJavascript(String url) {
-        if (url == null) return;
+    void loadNonJavascript(@Nullable final String url) {
+        if (url == null) {
+            return;
+        }
+
+        if (!url.startsWith("javascript:")) {
+            MoPubLog.d("Loading url: " + url);
+        }
 
-        MoPubLog.d("Loading url: " + url);
         if (mIsLoading) {
             if (!TextUtils.isEmpty(mAdUnitId)) {  // This shouldn't be able to happen?
                 MoPubLog.i("Already loading an ad for " + mAdUnitId + ", wait to finish.");
@@ -309,6 +328,11 @@ public String getAdUnitId() {
         return mAdUnitId;
     }
 
+    @Nullable
+    public String getCustomEventClassName() {
+        return mCustomEventClassName;
+    }
+
     public void setAdUnitId(@NonNull String adUnitId) {
         mAdUnitId = adUnitId;
     }
@@ -333,35 +357,45 @@ public int getAdHeight() {
         return 0;
     }
 
+    /**
+     * This has been renamed to {@link #getCurrentAutoRefreshStatus()}.
+     */
+    @Deprecated
     public boolean getAutorefreshEnabled() {
-        return mAutoRefreshEnabled;
+        return getCurrentAutoRefreshStatus();
+    }
+
+    public boolean getCurrentAutoRefreshStatus() {
+        return mCurrentAutoRefreshStatus;
     }
 
     void pauseRefresh() {
-        mPreviousAutoRefreshSetting = mAutoRefreshEnabled;
-        setAutorefreshEnabled(false);
+        setAutoRefreshStatus(false);
     }
 
-    void unpauseRefresh() {
-        setAutorefreshEnabled(mPreviousAutoRefreshSetting);
+    void resumeRefresh() {
+        if (mShouldAllowAutoRefresh) {
+            setAutoRefreshStatus(true);
+        }
     }
 
-    void forceSetAutorefreshEnabled(boolean enabled) {
-        mPreviousAutoRefreshSetting = enabled;
-        setAutorefreshEnabled(enabled);
+    void setShouldAllowAutoRefresh(final boolean shouldAllowAutoRefresh) {
+        mShouldAllowAutoRefresh = shouldAllowAutoRefresh;
+        setAutoRefreshStatus(shouldAllowAutoRefresh);
     }
 
-    private void setAutorefreshEnabled(boolean enabled) {
-        final boolean autorefreshChanged = mAdWasLoaded && (mAutoRefreshEnabled != enabled);
-        if (autorefreshChanged) {
-            final String enabledString = (enabled) ? "enabled" : "disabled";
+    private void setAutoRefreshStatus(final boolean newAutoRefreshStatus) {
+        final boolean autoRefreshStatusChanged = mAdWasLoaded &&
+                (mCurrentAutoRefreshStatus != newAutoRefreshStatus);
+        if (autoRefreshStatusChanged) {
+            final String enabledString = (newAutoRefreshStatus) ? "enabled" : "disabled";
             MoPubLog.d("Refresh " + enabledString + " for ad unit (" + mAdUnitId + ").");
         }
 
-        mAutoRefreshEnabled = enabled;
-        if (mAdWasLoaded && mAutoRefreshEnabled) {
+        mCurrentAutoRefreshStatus = newAutoRefreshStatus;
+        if (mAdWasLoaded && mCurrentAutoRefreshStatus) {
             scheduleRefreshTimerIfEnabled();
-        } else if (!mAutoRefreshEnabled) {
+        } else if (!mCurrentAutoRefreshStatus) {
             cancelRefreshTimer();
         }
     }
@@ -399,7 +433,7 @@ void cleanup() {
             mActiveRequest = null;
         }
 
-        setAutorefreshEnabled(false);
+        setAutoRefreshStatus(false);
         cancelRefreshTimer();
 
         // WebView subclasses are not garbage-collected in a timely fashion on Froyo and below,
@@ -480,7 +514,7 @@ void adDidFail(MoPubErrorCode errorCode) {
 
     void scheduleRefreshTimerIfEnabled() {
         cancelRefreshTimer();
-        if (mAutoRefreshEnabled && mRefreshTimeMillis != null && mRefreshTimeMillis > 0) {
+        if (mCurrentAutoRefreshStatus && mRefreshTimeMillis != null && mRefreshTimeMillis > 0) {
 
             mHandler.postDelayed(mRefreshRunnable,
                     Math.min(MAX_REFRESH_TIME_MILLISECONDS,
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AvidBuyerTagXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AvidBuyerTagXmlManager.java
new file mode 100644
index 00000000..01087aa5
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AvidBuyerTagXmlManager.java
@@ -0,0 +1,76 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+/**
+ * Data Object for AVID's VAST Custom Extension.
+ */
+class AvidBuyerTagXmlManager {
+    // Elements
+    private static final String AD_VERIFICATIONS = "AdVerifications";
+    private static final String VERIFICATION = "Verification";
+    private static final String JAVA_SCRIPT_RESOURCE = "JavaScriptResource";
+
+    private final Node mAvidNode;
+
+    AvidBuyerTagXmlManager(@NonNull final Node avidNode) {
+        Preconditions.checkNotNull(avidNode);
+
+        mAvidNode = avidNode;
+    }
+
+    /**
+     * Return the corresponding javascript resources for the AVID-related Extension node.
+     *
+     * Expected Extension node:
+     * <Extension>
+     *   <AVID>
+     *     <AdVerifications>
+     *       <Verification>
+     *         <JavaScriptResource>
+     *           <![CDATA[
+     *             https://temp.avid.com/pixel.gif?avidExtension
+     *           ]]>
+     *         </JavaScriptResource>
+     *       </Verification>
+     *     </AdVerifications>
+     *   </AVID>
+     * </Extension>
+     *
+     * @return Collection of JavaScriptResources in string form, i.e.
+     * [https://temp.avid.com/pixel.gif?avidExtension]
+     */
+    @NonNull
+    Set<String> getJavaScriptResources() {
+        final Set<String> avidJavaScriptResources = new HashSet<String>();
+
+        final Node adVerification = XmlUtils.getFirstMatchingChildNode(mAvidNode, AD_VERIFICATIONS);
+        if (adVerification == null) {
+            return avidJavaScriptResources;
+        }
+
+        final List<Node> verifications = XmlUtils.getMatchingChildNodes(adVerification, VERIFICATION);
+        if (verifications == null) {
+            return avidJavaScriptResources;
+        }
+
+        for (final Node verification : verifications) {
+            final Node javaScriptResource = XmlUtils.getFirstMatchingChildNode(verification,
+                    JAVA_SCRIPT_RESOURCE);
+            if (javaScriptResource != null) {
+                avidJavaScriptResources.add(XmlUtils.getNodeValue(javaScriptResource));
+            }
+        }
+
+        return avidJavaScriptResources;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java
index 9b2e04e4..9f6b7f32 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java
@@ -19,7 +19,7 @@ public BaseBroadcastReceiver(final long broadcastIdentifier) {
         mBroadcastIdentifier = broadcastIdentifier;
     }
 
-    static void broadcastAction(@NonNull final Context context, final long broadcastIdentifier,
+    public static void broadcastAction(@NonNull final Context context, final long broadcastIdentifier,
             @NonNull final String action) {
         Preconditions.checkNotNull(context, "context cannot be null");
         Preconditions.checkNotNull(action, "action cannot be null");
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
index 0710d7dc..b65913eb 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
@@ -2,16 +2,16 @@
 
 import android.content.Context;
 import android.graphics.Color;
+import android.support.annotation.Nullable;
 import android.view.MotionEvent;
 import android.view.View;
+import android.webkit.WebSettings;
 
 import com.mopub.common.AdReport;
 import com.mopub.common.Constants;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.network.Networking;
 
-import static com.mopub.common.util.VersionCode.ICE_CREAM_SANDWICH;
-import static com.mopub.common.util.VersionCode.currentApiLevel;
 import static com.mopub.mobileads.ViewGestureDetector.UserClickListener;
 
 public class BaseHtmlWebView extends BaseWebView implements UserClickListener {
@@ -27,9 +27,7 @@ public BaseHtmlWebView(Context context, AdReport adReport) {
         mViewGestureDetector = new ViewGestureDetector(context, this, adReport);
         mViewGestureDetector.setUserClickListener(this);
 
-        if (currentApiLevel().isAtLeast(ICE_CREAM_SANDWICH)) {
-            enablePlugins(true);
-        }
+        enablePlugins(true);
         setBackgroundColor(Color.TRANSPARENT);
     }
 
@@ -38,13 +36,35 @@ public void init(boolean isScrollable) {
     }
 
     @Override
-    public void loadUrl(String url) {
-        if (url == null) return;
+    public void loadUrl(@Nullable final String url) {
+        if (url == null) {
+            return;
+        }
 
-        MoPubLog.d("Loading url: " + url);
         if (url.startsWith("javascript:")) {
             super.loadUrl(url);
+            return;
+        }
+
+        MoPubLog.d("Loading url: " + url);
+    }
+
+    @Override
+    public void stopLoading() {
+        if (mIsDestroyed) {
+            MoPubLog.w(BaseHtmlWebView.class.getSimpleName() + "#stopLoading() called after destroy()");
+            return;
         }
+
+        final WebSettings webSettings = getSettings();
+        if (webSettings == null) {
+            MoPubLog.w(BaseHtmlWebView.class.getSimpleName() + "#getSettings() returned null");
+            return;
+        }
+
+        webSettings.setJavaScriptEnabled(false);
+        super.stopLoading();
+        webSettings.setJavaScriptEnabled(true);
     }
 
     private void disableScrollingAndZoom() {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
index 6bc577f0..9e31439a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
@@ -13,12 +13,13 @@
 import android.widget.VideoView;
 
 import com.mopub.common.IntentActions;
+import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
 
 public abstract class BaseVideoViewController {
     private final Context mContext;
     private final RelativeLayout mLayout;
-    private final BaseVideoViewControllerListener mBaseVideoViewControllerListener;
+    @NonNull private final BaseVideoViewControllerListener mBaseVideoViewControllerListener;
     @Nullable private Long mBroadcastIdentifier;
 
     public interface BaseVideoViewControllerListener {
@@ -30,7 +31,11 @@ void onStartActivityForResult(final Class<? extends Activity> clazz,
                 final Bundle extras);
     }
 
-    protected BaseVideoViewController(final Context context, @Nullable final Long broadcastIdentifier, final BaseVideoViewControllerListener baseVideoViewControllerListener) {
+    protected BaseVideoViewController(final Context context,
+            @Nullable final Long broadcastIdentifier,
+            @NonNull final BaseVideoViewControllerListener baseVideoViewControllerListener) {
+        Preconditions.checkNotNull(baseVideoViewControllerListener);
+
         mContext = context;
         mBroadcastIdentifier = broadcastIdentifier;
         mBaseVideoViewControllerListener = baseVideoViewControllerListener;
@@ -61,6 +66,7 @@ void onActivityResult(final int requestCode, final int resultCode, final Intent
         // By default, the activity result is ignored
     }
 
+    @NonNull
     protected BaseVideoViewControllerListener getBaseVideoViewControllerListener() {
         return mBaseVideoViewControllerListener;
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java
index 84d1e820..e42aad70 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java
@@ -13,7 +13,6 @@
 import android.webkit.WebView;
 
 import com.mopub.common.VisibleForTesting;
-import com.mopub.common.util.VersionCode;
 import com.mopub.common.util.Views;
 import com.mopub.mobileads.util.WebViews;
 
@@ -52,9 +51,9 @@ public void destroy() {
         super.destroy();
     }
 
-    protected void enablePlugins(final boolean enabled) {
+    public void enablePlugins(final boolean enabled) {
         // Android 4.3 and above has no concept of plugin states
-        if (VersionCode.currentApiLevel().isAtLeast(VersionCode.JELLY_BEAN_MR2)) {
+        if (VERSION.SDK_INT >= VERSION_CODES.JELLY_BEAN_MR2) {
             return;
         }
 
@@ -84,15 +83,9 @@ protected void enableJavascriptCaching() {
      */
     private void restrictDeviceContentAccess() {
         getSettings().setAllowFileAccess(false);
-
-        if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {
-            getSettings().setAllowContentAccess(false);
-        }
-
-        if (VERSION.SDK_INT >= VERSION_CODES.JELLY_BEAN) {
-            getSettings().setAllowFileAccessFromFileURLs(false);
-            getSettings().setAllowUniversalAccessFromFileURLs(false);
-        }
+        getSettings().setAllowContentAccess(false);
+        getSettings().setAllowFileAccessFromFileURLs(false);
+        getSettings().setAllowUniversalAccessFromFileURLs(false);
     }
 
     /**
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
index 29ba40f1..214b4c5f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
@@ -7,8 +7,8 @@
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
 
-import com.mopub.common.UrlHandler;
 import com.mopub.common.UrlAction;
+import com.mopub.common.UrlHandler;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Intents;
 import com.mopub.exceptions.IntentNotResolvableException;
@@ -35,8 +35,8 @@
 
     private final Context mContext;
     private final String mDspCreativeId;
-    private HtmlWebViewListener mHtmlWebViewListener;
-    private BaseHtmlWebView mHtmlWebView;
+    private final HtmlWebViewListener mHtmlWebViewListener;
+    private final BaseHtmlWebView mHtmlWebView;
     private final String mClickthroughUrl;
     private final String mRedirectUrl;
 
@@ -84,6 +84,7 @@ public void onClose() {
 
                     @Override
                     public void onFailLoad() {
+                        mHtmlWebView.stopLoading();
                         mHtmlWebViewListener.onFailed(UNSPECIFIED);
                     }
                 })
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/Interstitial.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/Interstitial.java
new file mode 100644
index 00000000..e2a377da
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/Interstitial.java
@@ -0,0 +1,8 @@
+package com.mopub.mobileads;
+
+/**
+ * Marker interface for denoting an Interstitial without necessarily using the
+ * mopub-sdk-interstitial module.
+ */
+public interface Interstitial {
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
index d3322c04..b7c20a78 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
@@ -8,6 +8,9 @@
     CANCELLED("Ad request was cancelled."),
     NO_CONNECTION("No internet connection detected."),
 
+    /** see {@link com.mopub.common.Constants#AD_EXPIRATION_DELAY } */
+    EXPIRED("Ad expired since it was not shown within 4 hours."),
+
     ADAPTER_NOT_FOUND("Unable to find Native Network or Custom Event adapter."),
     ADAPTER_CONFIGURATION_ERROR("Native Network or Custom Event adapter was configured incorrectly."),
     NETWORK_TIMEOUT("Third-party network failed to respond in a timely manner."),
@@ -20,6 +23,9 @@
     VIDEO_NOT_AVAILABLE("No video loaded for ad unit."),
     VIDEO_PLAYBACK_ERROR("Error playing a video."),
 
+    REWARDED_CURRENCIES_PARSING_ERROR("Error parsing rewarded currencies JSON header."),
+    REWARD_NOT_SELECTED("Reward not selected for rewarded ad."),
+
     UNSPECIFIED("Unspecified error.");
 
     private final String message;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
index fcb0c4ab..4b26ded7 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -36,7 +36,7 @@
         public void onBannerCollapsed(MoPubView banner);
     }
 
-    private final String CUSTOM_EVENT_BANNER_ADAPTER_FACTORY =
+    private static final String CUSTOM_EVENT_BANNER_ADAPTER_FACTORY =
             "com.mopub.mobileads.factories.CustomEventBannerAdapterFactory";
 
     @Nullable
@@ -65,15 +65,22 @@ public MoPubView(Context context, AttributeSet attrs) {
         setHorizontalScrollBarEnabled(false);
         setVerticalScrollBarEnabled(false);
 
-        // There is a rare bug in Froyo/2.2 where creation of a WebView causes a
-        // NullPointerException. (https://code.google.com/p/android/issues/detail?id=10789)
-        // It happens when the WebView can't access the local file store to make a cache file.
-        // Here, we'll work around it by trying to create a file store and then just go inert
-        // if it's not accessible.
-        if (WebViewDatabase.getInstance(context) == null) {
-            MoPubLog.e("Disabling MoPub. Local cache file is inaccessible so MoPub will " +
-                    "fail if we try to create a WebView. Details of this Android bug found at:" +
-                    "https://code.google.com/p/android/issues/detail?id=10789");
+        try {
+            // There is a rare bug in Froyo/2.2 where creation of a WebView causes a
+            // NullPointerException. (https://code.google.com/p/android/issues/detail?id=10789)
+            // It happens when the WebView can't access the local file store to make a cache file.
+            // Here, we'll work around it by trying to create a file store and then just go inert
+            // if it's not accessible.
+            if (WebViewDatabase.getInstance(context) == null) {
+                MoPubLog.e("Disabling MoPub. Local cache file is inaccessible so MoPub will " +
+                        "fail if we try to create a WebView. Details of this Android bug found at:" +
+                        "https://code.google.com/p/android/issues/detail?id=10789");
+                return;
+            }
+        } catch (Exception e) {
+            // If anything goes wrong here, it's most likely due to not having a WebView at all.
+            // This happens when Android updates WebView.
+            MoPubLog.e("Disabling MoPub due to no WebView, or it's being updated", e);
             return;
         }
 
@@ -226,7 +233,7 @@ private void setAdVisibility(final int visibility) {
         }
 
         if (Visibility.isScreenVisible(visibility)) {
-            mAdViewController.unpauseRefresh();
+            mAdViewController.resumeRefresh();
         } else {
             mAdViewController.pauseRefresh();
         }
@@ -328,12 +335,12 @@ public void setLocalExtras(Map<String, Object> localExtras) {
 
     public void setAutorefreshEnabled(boolean enabled) {
         if (mAdViewController != null) {
-            mAdViewController.forceSetAutorefreshEnabled(enabled);
+            mAdViewController.setShouldAllowAutoRefresh(enabled);
         }
     }
 
     public boolean getAutorefreshEnabled() {
-        if (mAdViewController != null) return mAdViewController.getAutorefreshEnabled();
+        if (mAdViewController != null) return mAdViewController.getCurrentAutoRefreshStatus();
         else {
             MoPubLog.d("Can't get autorefresh status for destroyed MoPubView. " +
                     "Returning false.");
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java
new file mode 100644
index 00000000..18a3a137
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java
@@ -0,0 +1,88 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+import java.util.HashSet;
+import java.util.List;
+import java.util.Locale;
+import java.util.Set;
+
+/**
+ * Data Object for Moat's VAST Custom Extension.
+ */
+class MoatBuyerTagXmlManager {
+    // Elements
+    private static final String VIEWABLE_IMPRESSION = "ViewableImpression";
+
+    // Attributes
+    private static final String ID = "id";
+
+    private final List<Node> mMoatVerificationNodes;
+
+    MoatBuyerTagXmlManager(@NonNull final List<Node> moatVerificationNodes) {
+        Preconditions.checkNotNull(moatVerificationNodes);
+
+        mMoatVerificationNodes = moatVerificationNodes;
+    }
+
+    /**
+     * Return the corresponding impression pixels for Moat-related Verification nodes.
+     *
+     * Expected Extension node:
+     * <Extension>
+     *   <AdVerifications>
+     *     <Verification vendor="Moat">
+     *       <ViewableImpression id="${BUYER_AD_SERVER_MACRO[S]}">
+     *         <![CDATA[
+     *           https://px.moatads.com/pixel.gif?moatPartnerCode=${MOAT_PARTNER_CODE}
+     *         ]]
+     *       </ViewableImpression>
+     *     </Verification>
+     *   </AdVerifications>
+     * </Extension>
+     *
+     * @return Collection of impression pixel tags in string form, i.e.
+     * <ViewableImpression id="${BUYER_AD_SERVER_MACRO[S]}">
+     *   <![CDATA[https://px.moatads.com/pixel.gif?moatPartnerCode=${MOAT_PARTNER_CODE}]]
+     * </ViewableImpression>
+     */
+    @NonNull
+    Set<String> getImpressionPixelsXml() {
+        final Set<String> impressionPixelsXml = new HashSet<String>();
+
+        for (final Node verification : mMoatVerificationNodes) {
+            if (verification == null) {
+                continue;
+            }
+
+            final Node viewableImpression = XmlUtils.getFirstMatchingChildNode(verification,
+                    VIEWABLE_IMPRESSION);
+
+            final String viewableImpressionXml = getViewableImpressionXml(viewableImpression);
+            if (viewableImpressionXml != null) {
+                impressionPixelsXml.add(viewableImpressionXml);
+            }
+        }
+
+        return impressionPixelsXml;
+    }
+
+    @Nullable
+    private String getViewableImpressionXml(@Nullable final Node viewableImpression) {
+        if (viewableImpression == null || !viewableImpression.hasAttributes()) {
+            return null;
+        }
+
+        final String idAttribute = XmlUtils.getAttributeValue(viewableImpression, ID);
+        final String content = XmlUtils.getNodeValue(viewableImpression);
+        return String.format(Locale.US,
+                "<ViewableImpression id=\"%s\"><![CDATA[%s]]</ViewableImpression>",
+                idAttribute, content);
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java
index 05a8c05d..ee2512ba 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java
@@ -50,8 +50,9 @@ public void stop() {
         mIsRunning = false;
     }
 
+    @Deprecated
     @VisibleForTesting
-    boolean shouldBeRunning() {
+    public boolean isRunning() {
         return mIsRunning;
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
index 63fd8513..e0006a9b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
@@ -11,16 +11,23 @@
  * A Vast tracking URL with an "absolute" trigger threshold. The tracker should be triggered
  * after a fixed number of milliseconds have been played.
  */
-public class VastAbsoluteProgressTracker extends VastTracker implements Comparable<VastAbsoluteProgressTracker>, Serializable {
+public class VastAbsoluteProgressTracker extends VastTracker
+        implements Comparable<VastAbsoluteProgressTracker>, Serializable {
     private static final long serialVersionUID = 0L;
     private final int mTrackingMilliseconds;
 
-    public VastAbsoluteProgressTracker(@NonNull final String trackingUrl, int trackingMilliseconds) {
-        super(trackingUrl);
+    public VastAbsoluteProgressTracker(@NonNull final MessageType messageType,
+            @NonNull final String content, int trackingMilliseconds) {
+        super(messageType, content);
         Preconditions.checkArgument(trackingMilliseconds >= 0);
         mTrackingMilliseconds = trackingMilliseconds;
     }
 
+    public VastAbsoluteProgressTracker(@NonNull final String trackingUrl,
+            int trackingMilliseconds) {
+        this(MessageType.TRACKING_URL, trackingUrl, trackingMilliseconds);
+    }
+
     public int getTrackingMilliseconds() {
         return mTrackingMilliseconds;
     }
@@ -35,6 +42,6 @@ public int compareTo(@NonNull final VastAbsoluteProgressTracker other) {
 
     @Override
     public String toString() {
-        return String.format(Locale.US, "%dms: %s", mTrackingMilliseconds, mTrackingUrl);
+        return String.format(Locale.US, "%dms: %s", mTrackingMilliseconds, getContent());
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java
index 0e0a1c8a..7b46bd30 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java
@@ -9,15 +9,25 @@
 
 import org.w3c.dom.Node;
 
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
+
 /**
  * This XML manager handles Extension nodes.
  */
 public class VastExtensionXmlManager {
     // Elements
     public static final String VIDEO_VIEWABILITY_TRACKER = "MoPubViewabilityTracker";
+    public static final String AD_VERIFICATIONS = "AdVerifications";
+    public static final String VERIFICATION = "Verification";
+    public static final String AVID = "AVID";
 
     // Attributes
+    public static final String VENDOR = "vendor";
     public static final String TYPE = "type";
+    public static final String ID = "id";
+    public static final String MOAT = "Moat";
 
     private final Node mExtensionNode;
 
@@ -57,6 +67,45 @@ VideoViewabilityTracker getVideoViewabilityTracker() {
                 videoViewabilityTrackerUrl);
     }
 
+    /**
+     * If there is an Extension node with an AVID element, return associated JavaScriptResources
+     * from buyer tags.
+     *
+     * @return Set of JavaScriptResources in string form, or null if AVID node is missing.
+     */
+    @Nullable
+    Set<String> getAvidJavaScriptResources() {
+        final Node avidNode = XmlUtils.getFirstMatchingChildNode(mExtensionNode, AVID);
+        if (avidNode == null) {
+            return null;
+        }
+
+        return new AvidBuyerTagXmlManager(avidNode).getJavaScriptResources();
+    }
+
+    /**
+     * If the Extension node contains Moat-related Verification nodes, return their corresponding
+     * impression pixels from buyer tags.
+     *
+     * @return Set of impression pixels in string form, or null if no Moat Verification nodes
+     * are present.
+     */
+    @Nullable
+    Set<String> getMoatImpressionPixels() {
+        final Node adVerification = XmlUtils.getFirstMatchingChildNode(mExtensionNode, AD_VERIFICATIONS);
+        if (adVerification == null) {
+            return null;
+        }
+
+        final List<Node> moatNodes = XmlUtils.getMatchingChildNodes(adVerification, VERIFICATION,
+                VENDOR, Collections.singletonList(MOAT));
+        if (moatNodes == null || moatNodes.isEmpty()) {
+            return null;
+        }
+
+        return new MoatBuyerTagXmlManager(moatNodes).getImpressionPixelsXml();
+    }
+
     /**
      * If the node has a "type" attribute, return its value.
      *
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java
index 824f9516..a179b4f4 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java
@@ -15,12 +15,17 @@
     private static final long serialVersionUID = 0L;
     private final float mFraction;
 
-    public VastFractionalProgressTracker(@NonNull final String trackingUrl, float trackingFraction) {
-        super(trackingUrl);
+    public VastFractionalProgressTracker(@NonNull final MessageType messageType,
+            @NonNull final String content, float trackingFraction) {
+        super(messageType, content);
         Preconditions.checkArgument(trackingFraction >= 0);
         mFraction = trackingFraction;
     }
 
+    public VastFractionalProgressTracker(@NonNull final String trackingUrl, float trackingFraction) {
+        this(MessageType.TRACKING_URL, trackingUrl, trackingFraction);
+    }
+
     public float trackingFraction() {
         return mFraction;
     }
@@ -35,6 +40,6 @@ public int compareTo(@NonNull final VastFractionalProgressTracker other) {
 
     @Override
     public String toString() {
-        return String.format(Locale.US, "%2f: %s", mFraction, mTrackingUrl);
+        return String.format(Locale.US, "%2f: %s", mFraction, getContent());
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
index 6852e38e..ce6a4b9a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
@@ -51,7 +51,7 @@
     private static final String SKIP = "skip";
 
     private static final int CREATIVE_VIEW_TRACKER_THRESHOLD = 0;
-    private static final int START_TRACKER_THRESHOLD = 2000;
+    private static final int START_TRACKER_THRESHOLD = 0;
     private static final float FIRST_QUARTER_MARKER = 0.25f;
     private static final float MID_POINT_MARKER = 0.50f;
     private static final float THIRD_QUARTER_MARKER = 0.75f;
@@ -105,9 +105,12 @@
                 if (Strings.isPercentageTracker(offsetString)) {
                     String trackingUrl = XmlUtils.getNodeValue(progressNode);
                     try {
-                        float trackingFraction =
+                        final float trackingFraction =
                                 Float.parseFloat(offsetString.replace("%", "")) / 100f;
-                        percentTrackers.add(new VastFractionalProgressTracker(trackingUrl, trackingFraction));
+                        if (trackingFraction >= 0) {
+                            percentTrackers.add(new VastFractionalProgressTracker(trackingUrl,
+                                    trackingFraction));
+                        }
                     } catch (NumberFormatException e) {
                         MoPubLog.d(String.format("Failed to parse VAST progress tracker %s",
                                 offsetString));
@@ -142,7 +145,7 @@
     List<VastAbsoluteProgressTracker> getAbsoluteProgressTrackers() {
         List<VastAbsoluteProgressTracker> trackers = new ArrayList<VastAbsoluteProgressTracker>();
 
-        // Start trackers are treated as absolute trackers with a 2s offset.
+        // Start trackers are treated as absolute trackers set at 0 seconds
         final List<String> startTrackers = getVideoTrackersByAttribute(START);
         for (String url : startTrackers) {
             trackers.add(new VastAbsoluteProgressTracker(url, START_TRACKER_THRESHOLD));
@@ -164,7 +167,7 @@
                     String trackingUrl = XmlUtils.getNodeValue(progressNode);
                     try {
                         Integer trackingMilliseconds = Strings.parseAbsoluteOffset(offsetString);
-                        if (trackingMilliseconds != null) {
+                        if (trackingMilliseconds != null && trackingMilliseconds >= 0) {
                             trackers.add(new VastAbsoluteProgressTracker(trackingUrl, trackingMilliseconds));
                         }
                     } catch (NumberFormatException e) {
@@ -178,9 +181,12 @@
             final List<Node> creativeViewNodes = XmlUtils.getMatchingChildNodes(trackingEvents,
                     VIDEO_TRACKER, EVENT, Collections.singletonList(CREATIVE_VIEW));
             for (Node creativeViewNode : creativeViewNodes) {
-                trackers.add(
-                        new VastAbsoluteProgressTracker(XmlUtils.getNodeValue(creativeViewNode),
-                                CREATIVE_VIEW_TRACKER_THRESHOLD));
+                final String creativeNodeValue = XmlUtils.getNodeValue(creativeViewNode);
+                if (creativeNodeValue != null) {
+                    trackers.add(
+                            new VastAbsoluteProgressTracker(creativeNodeValue,
+                                    CREATIVE_VIEW_TRACKER_THRESHOLD));
+                }
             }
         }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java
index 46019add..4dbde1f8 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java
@@ -11,14 +11,26 @@
  * progress trackers are only called once, but error trackers are repeatable.
  */
 public class VastTracker implements Serializable {
-    private static final long serialVersionUID = 0L;
-    @NonNull protected final String mTrackingUrl;
+    private static final long serialVersionUID = 1L;
+
+    @NonNull private final MessageType mMessageType;
+    @NonNull private final String mContent;
     private boolean mCalled;
     private boolean mIsRepeatable;
 
-    public VastTracker(@NonNull String trackingUrl) {
-        Preconditions.checkNotNull(trackingUrl);
-        mTrackingUrl = trackingUrl;
+    enum MessageType { TRACKING_URL, QUARTILE_EVENT }
+
+    public VastTracker(@NonNull final MessageType messageType, @NonNull final String content) {
+        Preconditions.checkNotNull(messageType);
+        Preconditions.checkNotNull(content);
+
+        mMessageType = messageType;
+        mContent = content;
+    }
+
+    // Legacy implementation implied URL tracking
+    public VastTracker(@NonNull final String trackingUrl) {
+        this(MessageType.TRACKING_URL, trackingUrl);
     }
 
     public VastTracker(@NonNull String trackingUrl, boolean isRepeatable) {
@@ -27,8 +39,13 @@ public VastTracker(@NonNull String trackingUrl, boolean isRepeatable) {
     }
 
     @NonNull
-    public String getTrackingUrl() {
-        return mTrackingUrl;
+    public MessageType getMessageType() {
+        return mMessageType;
+    }
+
+    @NonNull
+    public String getContent() {
+        return mContent;
     }
 
     public void setTracked() {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
index d1075d47..dbf37d7f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
@@ -3,7 +3,6 @@
 import android.graphics.Bitmap;
 import android.media.MediaMetadataRetriever;
 import android.os.AsyncTask;
-import android.os.Build;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.widget.ImageView;
@@ -38,38 +37,34 @@ public VastVideoBlurLastVideoFrameTask(
 
     @Override
     protected Boolean doInBackground(String... videoPaths) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD_MR1) {
-            if (videoPaths == null || videoPaths.length == 0 || videoPaths[0] == null) {
-                return false;
-            }
-
-            try {
-                final String videoPath = videoPaths[0];
-
-                mMediaMetadataRetriever.setDataSource(videoPath);
+        if (videoPaths == null || videoPaths.length == 0 || videoPaths[0] == null) {
+            return false;
+        }
 
-                // This actually gets a frame just before the video ends. If we try to get a frame
-                // that's actually past the end of the video or before 0, this will pick some
-                // arbitrary frame.
-                mLastVideoFrame = mMediaMetadataRetriever.getFrameAtTime(
-                        mVideoDuration * MICROSECONDS_PER_MILLISECOND - OFFSET_IN_MICROSECONDS,
-                        MediaMetadataRetriever.OPTION_CLOSEST);
+        try {
+            final String videoPath = videoPaths[0];
 
-                if (mLastVideoFrame == null) {
-                    return false;
-                }
+            mMediaMetadataRetriever.setDataSource(videoPath);
 
-                mBlurredLastVideoFrame = ImageUtils.applyFastGaussianBlurToBitmap(
-                        mLastVideoFrame, 4);
+            // This actually gets a frame just before the video ends. If we try to get a frame
+            // that's actually past the end of the video or before 0, this will pick some
+            // arbitrary frame.
+            mLastVideoFrame = mMediaMetadataRetriever.getFrameAtTime(
+                    mVideoDuration * MICROSECONDS_PER_MILLISECOND - OFFSET_IN_MICROSECONDS,
+                    MediaMetadataRetriever.OPTION_CLOSEST);
 
-                return true;
-            } catch (Exception e) {
-                MoPubLog.d("Failed to blur last video frame", e);
+            if (mLastVideoFrame == null) {
                 return false;
             }
-        }
 
-        return false;
+            mBlurredLastVideoFrame = ImageUtils.applyFastGaussianBlurToBitmap(
+                    mLastVideoFrame, 4);
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Failed to blur last video frame", e);
+            return false;
+        }
     }
 
     @Override
@@ -81,8 +76,8 @@ protected void onPostExecute(final Boolean success) {
 
         if (success != null && success) {
             mBlurredLastVideoFrameImageView.setImageBitmap(mBlurredLastVideoFrame);
-            ImageUtils.setImageViewAlpha(mBlurredLastVideoFrameImageView,
-                    DrawableConstants.BlurredLastVideoFrame.ALPHA);
+            mBlurredLastVideoFrameImageView.setImageAlpha(DrawableConstants.BlurredLastVideoFrame
+                    .ALPHA);
         }
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
index 9f53d535..77a8d5f4 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
@@ -10,6 +10,7 @@
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
+import com.mopub.common.Constants;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.Preconditions;
 import com.mopub.common.UrlAction;
@@ -20,17 +21,22 @@
 import com.mopub.common.util.Strings;
 import com.mopub.exceptions.IntentNotResolvableException;
 
+import org.json.JSONArray;
+import org.json.JSONObject;
+
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 
 import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
 
 public class VastVideoConfig implements Serializable {
-    private static final long serialVersionUID = 1L;
+    private static final long serialVersionUID = 2L;
 
     @NonNull private final ArrayList<VastTracker> mImpressionTrackers;
     @NonNull private final ArrayList<VastFractionalProgressTracker> mFractionalTrackers;
@@ -42,6 +48,7 @@
     @NonNull private final ArrayList<VastTracker> mSkipTrackers;
     @NonNull private final ArrayList<VastTracker> mClickTrackers;
     @NonNull private final ArrayList<VastTracker> mErrorTrackers;
+
     @Nullable private String mClickThroughUrl;
     @Nullable private String mNetworkMediaFileUrl;
     @Nullable private String mDiskMediaFileUrl;
@@ -58,6 +65,10 @@
     @Nullable private String mCustomCloseIconUrl;
     @NonNull private DeviceUtils.ForceOrientation mCustomForceOrientation = DeviceUtils.ForceOrientation.FORCE_LANDSCAPE; // Default is forcing landscape
     @Nullable private VideoViewabilityTracker mVideoViewabilityTracker;
+    // Viewability
+    @NonNull private final Map<String, String> mExternalViewabilityTrackers;
+    @NonNull private final Set<String> mAvidJavascriptResources;
+    @NonNull private final Set<String> mMoatImpressionPixels;
 
     // MoPub-specific metadata
     private String mDspCreativeId;
@@ -82,6 +93,10 @@ public VastVideoConfig() {
         mErrorTrackers = new ArrayList<VastTracker>();
         mSocialActionsCompanionAds = new HashMap<String, VastCompanionAdConfig>();
         mIsRewardedVideo = false;
+
+        mExternalViewabilityTrackers = new HashMap<String, String>();
+        mAvidJavascriptResources = new HashSet<String>();
+        mMoatImpressionPixels = new HashSet<String>();
     }
 
     /**
@@ -112,7 +127,7 @@ public void addFractionalTrackers(@NonNull final List<VastFractionalProgressTrac
     }
 
     /**
-     * Add trackers for absolute tracking. This includes start trackers, which have an absolute threshold of 2 seconds.
+     * Add trackers for absolute tracking.
      */
     public void addAbsoluteTrackers(@NonNull final List<VastAbsoluteProgressTracker> absoluteTrackers) {
         Preconditions.checkNotNull(absoluteTrackers, "absoluteTrackers cannot be null");
@@ -170,6 +185,92 @@ public void addErrorTrackers(@NonNull final List<VastTracker> errorTrackers) {
         mErrorTrackers.addAll(errorTrackers);
     }
 
+    /**
+     * Adds internal video trackers from a JSONObject in the form:
+     *      {
+     *          urls: [ "...%%VIDEO_EVENT%%...", ... ],
+     *          events: [ "companionAdView", ... ]
+     *      }
+     *
+     * Each event adds a corresponding tracker type with all the listed urls, with %%VIDEO_EVENT%%
+     * replaced with the event name. The currently supported trackers and their mappings are:
+     *      > start: addAbsoluteTrackers(url, 0)
+     *      > firstQuartile: addFractionalTrackers(url, 0.25f)
+     *      > midpoint: addFractionalTrackers(url, 0.5f)
+     *      > thirdQuartile: addFractionalTrackers(url, 0.75f)
+     *      > complete: addCompleteTrackers(url)
+     *      > companionAdView: VastCompanionAdConfig.addCreativeViewTrackers
+     *      > companionAdClick: VastCompanionAdConfig.addClickTrackers
+     *
+     * @param videoTrackers A JSONObject with the urls and events to track
+     */
+    public void addVideoTrackers(@Nullable final JSONObject videoTrackers) {
+        if (videoTrackers == null) {
+            return;
+        }
+
+        final JSONArray urls = videoTrackers.optJSONArray(Constants.VIDEO_TRACKING_URLS_KEY);
+        final JSONArray events = videoTrackers.optJSONArray(Constants.VIDEO_TRACKING_EVENTS_KEY);
+        if (urls == null || events == null) {
+            return;
+        }
+
+        for (int i = 0; i < events.length(); i++) { // JSONArray isn't Iterable -_-)
+            final String eventName = events.optString(i);
+            final List<String> urlsForEvent = hydrateUrls(eventName, urls);
+            final VideoTrackingEvent event = VideoTrackingEvent.fromString(eventName);
+            if (eventName == null || urlsForEvent == null) {
+                continue;
+            }
+
+            switch (event) {
+                case START:
+                    addStartTrackersForUrls(urlsForEvent);
+                    break;
+                case FIRST_QUARTILE:
+                    addFractionalTrackersForUrls(urlsForEvent, 0.25f);
+                    break;
+                case MIDPOINT:
+                    addFractionalTrackersForUrls(urlsForEvent, 0.5f);
+                    break;
+                case THIRD_QUARTILE:
+                    addFractionalTrackersForUrls(urlsForEvent, 0.75f);
+                    break;
+                case COMPLETE:
+                    addCompleteTrackersForUrls(urlsForEvent);
+                    break;
+                case COMPANION_AD_VIEW:
+                    addCompanionAdViewTrackersForUrls(urlsForEvent);
+                    break;
+                case COMPANION_AD_CLICK:
+                    addCompanionAdClickTrackersForUrls(urlsForEvent);
+                    break;
+                case UNKNOWN:
+                default:
+                    MoPubLog.d("Encountered unknown video tracking event: " + eventName);
+            }
+        }
+    }
+
+    public void addExternalViewabilityTrackers(
+            @Nullable final Map<String, String> externalViewabilityTrackers) {
+        if (externalViewabilityTrackers != null) {
+            mExternalViewabilityTrackers.putAll(externalViewabilityTrackers);
+        }
+    }
+
+    public void addAvidJavascriptResources(@Nullable final Set<String> javascriptResources) {
+        if (javascriptResources != null) {
+            mAvidJavascriptResources.addAll(javascriptResources);
+        }
+    }
+
+    public void addMoatImpressionPixels(@Nullable final Set<String> impressionPixels) {
+        if (impressionPixels != null) {
+            mMoatImpressionPixels.addAll(impressionPixels);
+        }
+    }
+
     public void setClickThroughUrl(@Nullable final String clickThroughUrl) {
         mClickThroughUrl = clickThroughUrl;
     }
@@ -354,6 +455,21 @@ public VideoViewabilityTracker getVideoViewabilityTracker() {
         return mVideoViewabilityTracker;
     }
 
+    @NonNull
+    public Map<String, String> getExternalViewabilityTrackers() {
+        return mExternalViewabilityTrackers;
+    }
+
+    @NonNull
+    public Set<String> getAvidJavascriptResources() {
+        return mAvidJavascriptResources;
+    }
+
+    @NonNull
+    public Set<String> getMoatImpressionPixels() {
+        return mMoatImpressionPixels;
+    }
+
     public boolean isCustomForceOrientationSet() {
         return mIsForceOrientationSet;
     }
@@ -619,12 +735,13 @@ public void handleError(@NonNull Context context, @Nullable VastErrorCode errorC
      * @param videoLengthMillis the total video length.
      */
     @NonNull
-    public List<VastTracker> getUntriggeredTrackersBefore(int currentPositionMillis, int videoLengthMillis) {
-        if (Preconditions.NoThrow.checkArgument(videoLengthMillis > 0)) {
+    public List<VastTracker> getUntriggeredTrackersBefore(final int currentPositionMillis, final int videoLengthMillis) {
+        if (Preconditions.NoThrow.checkArgument(videoLengthMillis > 0) && currentPositionMillis >= 0) {
             float progressFraction = currentPositionMillis / (float) (videoLengthMillis);
             List<VastTracker> untriggeredTrackers = new ArrayList<VastTracker>();
 
-            VastAbsoluteProgressTracker absoluteTest = new VastAbsoluteProgressTracker("", currentPositionMillis);
+            VastAbsoluteProgressTracker absoluteTest = new VastAbsoluteProgressTracker("",
+                    currentPositionMillis);
             int absoluteTrackerCount = mAbsoluteTrackers.size();
             for (int i = 0; i < absoluteTrackerCount; i++) {
                 VastAbsoluteProgressTracker tracker = mAbsoluteTrackers.get(i);
@@ -699,4 +816,81 @@ public Integer getSkipOffsetMillis(final int videoDuration) {
         }
         return null;
     }
+
+    @Nullable
+    private List<String> hydrateUrls(@Nullable final String event, @NonNull final JSONArray urls) {
+        Preconditions.checkNotNull(urls);
+
+        if (event == null) {
+            return null;
+        }
+
+        final List<String> hydratedUrls = new ArrayList<String>();
+        for (int i = 0; i < urls.length(); i++) {
+            final String url = urls.optString(i);
+            if (url == null) {
+                continue;
+            }
+            hydratedUrls.add(url.replace(Constants.VIDEO_TRACKING_URL_MACRO, event));
+        }
+        return hydratedUrls;
+    }
+
+    private List<VastTracker> createVastTrackersForUrls(@NonNull final List<String> urls) {
+        Preconditions.checkNotNull(urls);
+
+        final List<VastTracker> trackers = new ArrayList<VastTracker>();
+        for (String url : urls) {
+            trackers.add(new VastTracker(url));
+        }
+        return trackers;
+    }
+
+    private void addCompleteTrackersForUrls(@NonNull final List<String> urls) {
+        Preconditions.checkNotNull(urls);
+
+        addCompleteTrackers(createVastTrackersForUrls(urls));
+    }
+
+    private void addStartTrackersForUrls(@NonNull final List<String> urls) {
+        Preconditions.checkNotNull(urls);
+
+        final List<VastAbsoluteProgressTracker> startTrackers = new ArrayList<VastAbsoluteProgressTracker>();
+        for (String url : urls) {
+            startTrackers.add(new VastAbsoluteProgressTracker(url, 0));
+        }
+        addAbsoluteTrackers(startTrackers);
+    }
+
+    private void addFractionalTrackersForUrls(@NonNull final List<String> urls,
+            final float fraction) {
+        Preconditions.checkNotNull(urls);
+
+        final List<VastFractionalProgressTracker> fractionalTrackers = new ArrayList<VastFractionalProgressTracker>();
+        for (String url : urls) {
+            fractionalTrackers.add(new VastFractionalProgressTracker(url, fraction));
+        }
+        addFractionalTrackers(fractionalTrackers);
+    }
+
+    private void addCompanionAdViewTrackersForUrls(@NonNull final List<String> urls) {
+        Preconditions.checkNotNull(urls);
+
+        if (hasCompanionAd()) {
+            final List<VastTracker> companionAdViewTrackers = createVastTrackersForUrls(urls);
+            mLandscapeVastCompanionAdConfig.addCreativeViewTrackers(companionAdViewTrackers);
+            mPortraitVastCompanionAdConfig.addCreativeViewTrackers(companionAdViewTrackers);
+        }
+    }
+
+    private void addCompanionAdClickTrackersForUrls(@NonNull final List<String> urls) {
+        Preconditions.checkNotNull(urls);
+
+        if (hasCompanionAd()) {
+            final List<VastTracker> companionAdClickTrackers = createVastTrackersForUrls(urls);
+            mLandscapeVastCompanionAdConfig.addClickTrackers(companionAdClickTrackers);
+            mPortraitVastCompanionAdConfig.addClickTrackers(companionAdClickTrackers);
+        }
+    }
+
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java
index 8fe0e8fd..8704e0fe 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java
@@ -37,12 +37,12 @@ public VastVideoRadialCountdownWidget(@NonNull final Context context) {
         setLayoutParams(layoutParams);
     }
 
-    void calibrateAndMakeVisible(final int initialCountdownMilliseconds) {
+    public void calibrateAndMakeVisible(final int initialCountdownMilliseconds) {
         mRadialCountdownDrawable.setInitialCountdown(initialCountdownMilliseconds);
         setVisibility(VISIBLE);
     }
 
-    void updateCountdownProgress(final int initialCountdownMilliseconds, final int currentProgressMilliseconds) {
+    public void updateCountdownProgress(final int initialCountdownMilliseconds, final int currentProgressMilliseconds) {
         // There exists an Android video player bug where VideoView.getCurrentPosition()
         // temporarily returns 0 right after backgrounding and switching back to the app.
         // Therefore, we check against the last known current position to ensure that it's
@@ -65,14 +65,14 @@ void updateCountdownProgress(final int initialCountdownMilliseconds, final int c
     // for testing
     @Deprecated
     @VisibleForTesting
-    RadialCountdownDrawable getImageViewDrawable() {
+    public RadialCountdownDrawable getImageViewDrawable() {
         return mRadialCountdownDrawable;
     }
 
     // for testing
     @Deprecated
     @VisibleForTesting
-    void setImageViewDrawable(RadialCountdownDrawable drawable) {
+    public void setImageViewDrawable(RadialCountdownDrawable drawable) {
         mRadialCountdownDrawable = drawable;
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java
index 32904efb..a34b447b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java
@@ -2,9 +2,7 @@
 
 import android.content.Context;
 import android.media.MediaMetadataRetriever;
-import android.media.MediaPlayer;
 import android.os.AsyncTask;
-import android.os.Build;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.widget.ImageView;
@@ -14,10 +12,6 @@
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.AsyncTasks;
-import com.mopub.common.util.Streams;
-
-import java.io.File;
-import java.io.FileInputStream;
 
 /**
  * Custom VideoView dedicated for VAST videos. This primarily deals with the blurring of the last
@@ -30,12 +24,11 @@
 
     @Nullable private VastVideoBlurLastVideoFrameTask mBlurLastVideoFrameTask;
     @Nullable private MediaMetadataRetriever mMediaMetadataRetriever;
-    private int mVideoRetries;
 
     public VastVideoView(@NonNull final Context context) {
         super(context);
         Preconditions.checkNotNull(context, "context cannot be null");
-        mMediaMetadataRetriever = createMediaMetadataRetriever();
+        mMediaMetadataRetriever = new MediaMetadataRetriever();
     }
 
     /**
@@ -74,63 +67,6 @@ public void onDestroy() {
         }
     }
 
-    boolean retryMediaPlayer(final MediaPlayer mediaPlayer, final int what, final int extra,
-            @NonNull final String diskMediaFileUrl) {
-        // XXX
-        // VideoView has a bug in versions lower than Jelly Bean, Api Level 16, Android 4.1
-        // For api < 16, VideoView is not able to read files written to disk since it reads them in
-        // a Context different from the Application and therefore does not have correct permission.
-        // To solve this problem we obtain the video file descriptor ourselves with valid permissions
-        // and pass it to the underlying MediaPlayer in VideoView.
-        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN
-                && what == MediaPlayer.MEDIA_ERROR_UNKNOWN
-                && extra == VIDEO_VIEW_FILE_PERMISSION_ERROR
-                && mVideoRetries < MAX_VIDEO_RETRIES) {
-
-            FileInputStream inputStream = null;
-            try {
-                mediaPlayer.reset();
-                final File file = new File(diskMediaFileUrl);
-                inputStream = new FileInputStream(file);
-                mediaPlayer.setDataSource(inputStream.getFD());
-
-                // XXX
-                // VideoView has a callback registered with the MediaPlayer to set a flag when the
-                // media file has been prepared. Start also sets a flag in VideoView indicating the
-                // desired state is to play the video. Therefore, whichever method finishes last
-                // will check both flags and begin playing the video.
-                mediaPlayer.prepareAsync();
-                start();
-                return true;
-            } catch (Exception e) {
-                return false;
-            } finally {
-                Streams.closeStream(inputStream);
-                mVideoRetries++;
-            }
-        }
-        return false;
-    }
-
-    /**
-     * Called when the activity enclosing this view is resumed.
-     */
-    public void onResume() {
-        // When resuming, VideoView needs to reinitialize its MediaPlayer with the video path
-        // and therefore reset the count to zero, to let it retry on error
-        mVideoRetries = 0;
-    }
-
-    @VisibleForTesting
-    @Nullable
-    MediaMetadataRetriever createMediaMetadataRetriever() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD_MR1) {
-            return new MediaMetadataRetriever();
-        }
-
-        return null;
-    }
-
     // for testing
     @Deprecated
     @VisibleForTesting
@@ -153,10 +89,4 @@ void setBlurLastVideoFrameTask(@NonNull VastVideoBlurLastVideoFrameTask blurLast
         mBlurLastVideoFrameTask = blurLastVideoFrameTask;
     }
 
-    // for testing
-    @Deprecated
-    @VisibleForTesting
-    int getVideoRetries() {
-        return mVideoRetries;
-    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
index 2015a857..128282f9 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
@@ -23,6 +23,8 @@
 import android.widget.RelativeLayout;
 import android.widget.VideoView;
 
+import com.mopub.common.ExternalViewabilitySession.VideoEvent;
+import com.mopub.common.ExternalViewabilitySessionManager;
 import com.mopub.common.IntentActions;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
@@ -31,10 +33,11 @@
 import com.mopub.mobileads.resource.DrawableConstants;
 
 import java.io.Serializable;
+import java.util.Arrays;
 import java.util.Map;
 
-import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
+import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE;
 import static com.mopub.common.MoPubBrowser.MOPUB_BROWSER_REQUEST_CODE;
 import static com.mopub.mobileads.VastXmlManagerAggregator.ADS_BY_AD_SLOT_ID;
 import static com.mopub.mobileads.VastXmlManagerAggregator.SOCIAL_ACTIONS_AD_SLOT_ID;
@@ -63,6 +66,7 @@
     private final VastVideoConfig mVastVideoConfig;
 
     @NonNull private final VastVideoView mVideoView;
+    @NonNull private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
     @NonNull private VastVideoGradientStripWidget mTopGradientStripWidget;
     @NonNull private VastVideoGradientStripWidget mBottomGradientStripWidget;
     @NonNull private ImageView mBlurredLastVideoFrameImageView;
@@ -139,6 +143,8 @@
             @Override
             public boolean onTouch(View view, MotionEvent motionEvent) {
                 if (motionEvent.getAction() == MotionEvent.ACTION_UP && shouldAllowClickThrough()) {
+                    mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_CLICK_THRU,
+                            getCurrentPosition());
                     mIsClosing = true;
                     broadcastAction(IntentActions.ACTION_INTERSTITIAL_CLICK);
                     mVastVideoConfig.handleClickForResult(activity,
@@ -162,6 +168,11 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
         mVideoView = createVideoView(activity, View.VISIBLE);
         mVideoView.requestFocus();
 
+        // Viewability measurements
+        mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(activity);
+        mExternalViewabilitySessionManager.createVideoSession(activity, mVideoView,
+                mVastVideoConfig);
+
         // Companion ad view, set to invisible initially to have it be drawn to calculate size
         mLandscapeCompanionAdView = createCompanionAdView(activity,
                 mVastVideoConfig.getVastCompanionAd(Configuration.ORIENTATION_LANDSCAPE),
@@ -210,6 +221,10 @@ public void onGlobalLayout() {
         // Always add last to layout since it must be visible above all other views
         addCloseButtonWidget(activity, View.GONE);
 
+        mExternalViewabilitySessionManager.registerVideoObstructions(Arrays.asList(
+                mTopGradientStripWidget, mProgressBarWidget, mBottomGradientStripWidget,
+                mRadialCountdownWidget, mCtaButtonWidget, mSocialActionsView, mCloseButtonWidget));
+
         Handler mainHandler = new Handler(Looper.getMainLooper());
         mProgressCheckerRunnable = new VastVideoViewProgressRunnable(this, mVastVideoConfig,
                 mainHandler);
@@ -252,7 +267,7 @@ protected void onCreate() {
                 getBaseVideoViewControllerListener().onSetRequestedOrientation(SCREEN_ORIENTATION_PORTRAIT);
                 break;
             case FORCE_LANDSCAPE:
-                getBaseVideoViewControllerListener().onSetRequestedOrientation(SCREEN_ORIENTATION_LANDSCAPE);
+                getBaseVideoViewControllerListener().onSetRequestedOrientation(SCREEN_ORIENTATION_SENSOR_LANDSCAPE);
                 break;
             case DEVICE_ORIENTATION:
                 break;  // don't do anything
@@ -271,8 +286,12 @@ protected void onResume() {
         startRunnables();
 
         if (mSeekerPositionOnPause > 0) {
+            mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_PLAYING, mSeekerPositionOnPause);
             mVideoView.seekTo(mSeekerPositionOnPause);
+        } else {
+            mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_LOADED, getCurrentPosition());
         }
+
         if (!mIsVideoFinishedPlaying) {
             mVideoView.start();
         }
@@ -287,6 +306,7 @@ protected void onPause() {
         mSeekerPositionOnPause = getCurrentPosition();
         mVideoView.pause();
         if (!mIsVideoFinishedPlaying && !mIsClosing) {
+            mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_PAUSED, getCurrentPosition());
             mVastVideoConfig.handlePause(getContext(), mSeekerPositionOnPause);
         }
     }
@@ -294,6 +314,8 @@ protected void onPause() {
     @Override
     protected void onDestroy() {
         stopRunnables();
+        mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_STOPPED, getCurrentPosition());
+        mExternalViewabilitySessionManager.endVideoSession();
         broadcastAction(IntentActions.ACTION_INTERSTITIAL_DISMISS);
 
         mVideoView.onDestroy();
@@ -325,7 +347,11 @@ protected void onConfigurationChanged(final Configuration newConfig) {
     }
 
     @Override
-    protected void onBackPressed() { }
+    protected void onBackPressed() {
+        if (!mIsVideoFinishedPlaying) {
+            mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_SKIPPED, getCurrentPosition());
+        }
+    }
 
     // Enable the device's back button when the video close button has been displayed
     @Override
@@ -377,6 +403,7 @@ public void onPrepared(MediaPlayer mp) {
                 // The VideoView duration defaults to -1 when the video is not prepared or playing;
                 // Therefore set it here so that we have access to it at all times
                 mDuration = mVideoView.getDuration();
+                mExternalViewabilitySessionManager.onVideoPrepared(getLayout(), mDuration);
                 adjustSkipOffset();
                 if (mVastCompanionAdConfig == null || mHasSocialActions) {
                     videoView.prepareBlurredLastVideoFrame(mBlurredLastVideoFrameImageView,
@@ -394,7 +421,6 @@ public void onPrepared(MediaPlayer mp) {
             public void onCompletion(MediaPlayer mp) {
                 stopRunnables();
                 makeVideoInteractable();
-
                 videoCompleted(false);
                 mIsVideoFinishedPlaying = true;
                 if (mVastVideoConfig.isRewardedVideo()) {
@@ -404,6 +430,7 @@ public void onCompletion(MediaPlayer mp) {
                 // Only fire the completion tracker if we hit all the progress marks. Some Android implementations
                 // fire the completion event even if the whole video isn't watched.
                 if (!mVideoError && mVastVideoConfig.getRemainingProgressTrackerCount() == 0) {
+                    mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_COMPLETE, getCurrentPosition());
                     mVastVideoConfig.handleComplete(getContext(), getCurrentPosition());
                 }
 
@@ -446,20 +473,17 @@ public void onCompletion(MediaPlayer mp) {
         videoView.setOnErrorListener(new MediaPlayer.OnErrorListener() {
             @Override
             public boolean onError(final MediaPlayer mediaPlayer, final int what, final int extra) {
-                if (videoView.retryMediaPlayer(mediaPlayer, what, extra,
-                        mVastVideoConfig.getDiskMediaFileUrl())) {
-                    return true;
-                } else {
-                    stopRunnables();
-                    makeVideoInteractable();
-                    videoError(false);
-                    mVideoError = true;
+                mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.RECORD_AD_ERROR,
+                        getCurrentPosition());
+                stopRunnables();
+                makeVideoInteractable();
+                videoError(false);
+                mVideoError = true;
 
-                    mVastVideoConfig.handleError(getContext(),
-                            VastErrorCode.GENERAL_LINEAR_AD_ERROR, getCurrentPosition());
+                mVastVideoConfig.handleError(getContext(),
+                        VastErrorCode.GENERAL_LINEAR_AD_ERROR, getCurrentPosition());
 
-                    return false;
-                }
+                return false;
             }
         });
 
@@ -544,6 +568,9 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
                 }
                 if (motionEvent.getAction() == MotionEvent.ACTION_UP) {
                     mIsClosing = true;
+                    if (!mIsVideoFinishedPlaying) {
+                        mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_SKIPPED, getCurrentPosition());
+                    }
                     mVastVideoConfig.handleClose(getContext(), currentPosition);
                     getBaseVideoViewControllerListener().onFinish();
                 }
@@ -793,6 +820,12 @@ void handleIconDisplay(int currentPosition) {
         }
     }
 
+    void handleViewabilityQuartileEvent(@NonNull final String enumValue) {
+        final VideoEvent videoEvent = Enum.valueOf(VideoEvent.class, enumValue);
+
+        mExternalViewabilitySessionManager.recordVideoEvent(videoEvent, getCurrentPosition());
+    }
+
     private boolean shouldAllowClickThrough() {
         return mShowCloseButtonEventFired;
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
index c3602e9f..b7c6319c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
@@ -6,8 +6,8 @@
 import com.mopub.common.Preconditions;
 
 /**
- * This class is used to update a {@link VastVideoViewController}'s countdown display according to rules
- * contained in the {@link VastVideoViewController}
+ * A runnable that is used to update a {@link VastVideoViewController}'s countdown display according
+ * to rules contained in the {@link VastVideoViewController}
  */
 public class VastVideoViewCountdownRunnable extends RepeatingHandlerRunnable {
 
@@ -19,7 +19,6 @@ public VastVideoViewCountdownRunnable(@NonNull VastVideoViewController videoView
         Preconditions.checkNotNull(handler);
         Preconditions.checkNotNull(videoViewController);
 
-
         mVideoViewController = videoViewController;
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
index d7abf6c3..3e9e8970 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
@@ -3,7 +3,9 @@
 import android.os.Handler;
 import android.support.annotation.NonNull;
 
+import com.mopub.common.ExternalViewabilitySession.VideoEvent;
 import com.mopub.common.Preconditions;
+import com.mopub.mobileads.VastTracker.MessageType;
 import com.mopub.network.TrackingRequest;
 
 import java.util.ArrayList;
@@ -27,6 +29,21 @@ public VastVideoViewProgressRunnable(@NonNull VastVideoViewController videoViewC
         Preconditions.checkNotNull(vastVideoConfig);
         mVideoViewController = videoViewController;
         mVastVideoConfig = vastVideoConfig;
+
+        // Keep track of quartile measurement for ExternalViewabilitySessions
+        final List<VastFractionalProgressTracker> trackers =
+                new ArrayList<VastFractionalProgressTracker>();
+        trackers.add(new VastFractionalProgressTracker(MessageType.QUARTILE_EVENT,
+                VideoEvent.AD_STARTED.name(), 0f));
+        trackers.add(new VastFractionalProgressTracker(MessageType.QUARTILE_EVENT,
+                VideoEvent.AD_IMPRESSED.name(), 0f));
+        trackers.add(new VastFractionalProgressTracker(MessageType.QUARTILE_EVENT,
+                VideoEvent.AD_VIDEO_FIRST_QUARTILE.name(), 0.25f));
+        trackers.add(new VastFractionalProgressTracker(MessageType.QUARTILE_EVENT,
+                VideoEvent.AD_VIDEO_MIDPOINT.name(), 0.5f));
+        trackers.add(new VastFractionalProgressTracker(MessageType.QUARTILE_EVENT,
+                VideoEvent.AD_VIDEO_THIRD_QUARTILE.name(), 0.75f));
+        mVastVideoConfig.addFractionalTrackers(trackers);
     }
 
     @Override
@@ -42,7 +59,11 @@ public void doWork() {
             if (!trackersToTrack.isEmpty()) {
                 final List<String> trackUrls = new ArrayList<String>();
                 for (VastTracker tracker : trackersToTrack) {
-                    trackUrls.add(tracker.getTrackingUrl());
+                    if (tracker.getMessageType() == MessageType.TRACKING_URL) {
+                        trackUrls.add(tracker.getContent());
+                    } else if (tracker.getMessageType() == MessageType.QUARTILE_EVENT) {
+                        mVideoViewController.handleViewabilityQuartileEvent(tracker.getContent());
+                    }
                     tracker.setTracked();
                 }
                 TrackingRequest.makeTrackingHttpRequest(
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWebView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWebView.java
index 673dc07f..ba8288f1 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWebView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWebView.java
@@ -11,11 +11,8 @@
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.util.Utils;
-import com.mopub.common.util.VersionCode;
 import com.mopub.network.Networking;
 
-import static com.mopub.common.util.VersionCode.currentApiLevel;
-
 /**
  * A WebView customized for Vast video needs.
  */
@@ -32,9 +29,7 @@
         disableScrollingAndZoom();
         getSettings().setJavaScriptEnabled(true);
 
-        if (currentApiLevel().isAtLeast(VersionCode.ICE_CREAM_SANDWICH)) {
-            enablePlugins(true);
-        }
+        enablePlugins(true);
 
         setBackgroundColor(Color.TRANSPARENT);
         setOnTouchListener(new VastWebViewOnTouchListener());
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
index 0bf3c15a..a7028079 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
@@ -8,9 +8,6 @@
 
 import org.w3c.dom.Node;
 
-import java.util.ArrayList;
-import java.util.List;
-
 /**
  * This XML manager handles Wrapper nodes. Wrappers redirect to other VAST documents (which may
  * in turn redirect to more wrappers). Wrappers can also contain impression trackers,
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
index 5f024d94..e646cae9 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
@@ -31,6 +31,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 
 import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
 
@@ -234,6 +235,7 @@ VastVideoConfig evaluateVastXmlManager(@NonNull final String vastXml,
                     populateLinearTrackersAndIcon(linearXmlManager, vastVideoConfig);
                 }
                 populateVideoViewabilityTracker(vastWrapperXmlManager, vastVideoConfig);
+                populateViewabilityMetadata(vastWrapperXmlManager, vastVideoConfig);
 
                 final List<VastCompanionAdXmlManager> companionAdXmlManagers =
                         vastWrapperXmlManager.getCompanionAdXmlManagers();
@@ -328,6 +330,7 @@ private VastVideoConfig evaluateInLineXmlManager(
                 errorTrackers.addAll(vastInLineXmlManager.getErrorTrackers());
                 vastVideoConfig.addErrorTrackers(errorTrackers);
                 populateVideoViewabilityTracker(vastInLineXmlManager, vastVideoConfig);
+                populateViewabilityMetadata(vastInLineXmlManager, vastVideoConfig);
 
                 return vastVideoConfig;
             }
@@ -361,6 +364,26 @@ private void populateVideoViewabilityTracker(
         }
     }
 
+    private void populateViewabilityMetadata(
+            @NonNull final VastBaseInLineWrapperXmlManager vastInLineXmlManager,
+            @NonNull VastVideoConfig vastVideoConfig) {
+        final VastExtensionParentXmlManager vastExtensionParentXmlManager =
+                vastInLineXmlManager.getVastExtensionParentXmlManager();
+        if (vastExtensionParentXmlManager != null) {
+            final List<VastExtensionXmlManager> vastExtensionXmlManagers =
+                    vastExtensionParentXmlManager.getVastExtensionXmlManagers();
+            for (VastExtensionXmlManager vastExtensionXmlManager : vastExtensionXmlManagers) {
+                if (vastExtensionXmlManager != null) {
+                    final Set<String> avid = vastExtensionXmlManager.getAvidJavaScriptResources();
+                    vastVideoConfig.addAvidJavascriptResources(avid);
+
+                    final Set<String> moat = vastExtensionXmlManager.getMoatImpressionPixels();
+                    vastVideoConfig.addMoatImpressionPixels(moat);
+                }
+            }
+        }
+    }
+
     /**
      * Retrieves the Wrapper's redirect uri and follows it to return the next VAST xml String.
      *
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoTrackingEvent.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoTrackingEvent.java
new file mode 100644
index 00000000..4a041f44
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoTrackingEvent.java
@@ -0,0 +1,44 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+/**
+ * Internal Video Tracking events, defined in ad server
+ */
+enum VideoTrackingEvent {
+    START("start"),
+    FIRST_QUARTILE("firstQuartile"),
+    MIDPOINT("midpoint"),
+    THIRD_QUARTILE("thirdQuartile"),
+    COMPLETE("complete"),
+    COMPANION_AD_VIEW("companionAdView"),
+    COMPANION_AD_CLICK("companionAdClick"),
+    UNKNOWN("");
+
+    private final String name;
+
+    VideoTrackingEvent(@NonNull final String name) {
+        this.name = name;
+    }
+
+    @NonNull
+    public String getName() {
+        return name;
+    }
+
+    @NonNull
+    public static VideoTrackingEvent fromString(@Nullable final String name) {
+        if (name == null) {
+            return UNKNOWN;
+        }
+
+        for (VideoTrackingEvent event : VideoTrackingEvent.values()) {
+            if (name.equals(event.getName())) {
+                return event;
+            }
+        }
+
+        return UNKNOWN;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
index 975b69cb..e1d2cb3d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
@@ -6,6 +6,8 @@
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.Constants;
 
+import static com.mopub.common.ExternalViewabilitySessionManager.ViewabilityVendor;
+
 public class WebViewAdUrlGenerator extends AdUrlGenerator {
     private final boolean mIsStorePictureSupported;
 
@@ -27,6 +29,8 @@ public String generateUrlString(String serverHostname) {
 
         setExternalStoragePermission(mIsStorePictureSupported);
 
+        enableViewability(ViewabilityVendor.getEnabledVendorKey());
+
         return getFinalUrlString();
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewCacheService.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewCacheService.java
new file mode 100644
index 00000000..1cbb4a40
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewCacheService.java
@@ -0,0 +1,170 @@
+package com.mopub.mobileads;
+
+import android.annotation.SuppressLint;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.ExternalViewabilitySessionManager;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+
+import java.lang.ref.WeakReference;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+import static com.mopub.common.Constants.FIFTEEN_MINUTES_MILLIS;
+
+/**
+ * Holds WebViews in memory until they are used.
+ */
+public class WebViewCacheService {
+    public static class Config {
+        @NonNull
+        private final BaseWebView mWebView;
+        @NonNull
+        private final WeakReference<Interstitial> mWeakInterstitial;
+        @NonNull
+        private final ExternalViewabilitySessionManager mViewabilityManager;
+
+        Config(@NonNull final BaseWebView baseWebView,
+                @NonNull final Interstitial baseInterstitial,
+                @NonNull final ExternalViewabilitySessionManager viewabilityManager) {
+            mWebView = baseWebView;
+            mWeakInterstitial = new WeakReference<Interstitial>(baseInterstitial);
+            mViewabilityManager = viewabilityManager;
+        }
+
+        @NonNull
+        public BaseWebView getWebView() {
+            return mWebView;
+        }
+
+        @NonNull
+        public WeakReference<Interstitial> getWeakInterstitial() {
+            return mWeakInterstitial;
+        }
+
+        @NonNull
+        public ExternalViewabilitySessionManager getViewabilityManager() {
+            return mViewabilityManager;
+        }
+    }
+
+    /**
+     * Maximum number of {@link BaseWebView}s that are cached. This limit is intended to be very
+     * conservative; it is not recommended to cache more than a few BaseWebViews.
+     */
+    @VisibleForTesting
+    static final int MAX_SIZE = 50;
+
+    /**
+     * Trim the cache at least this frequently. Trimming only removes a {@link Config}s when its
+     * associated {@link Interstitial} is no longer in memory. The cache is also
+     * trimmed every time {@link #storeWebViewConfig(Long, Interstitial, BaseWebView, ExternalViewabilitySessionManager)} is called.
+     */
+    @VisibleForTesting
+    static final long TRIM_CACHE_FREQUENCY_MILLIS = FIFTEEN_MINUTES_MILLIS;
+
+    @SuppressLint("UseSparseArrays")
+    @NonNull
+    private static final Map<Long, Config> sWebViewConfigs =
+            Collections.synchronizedMap(new HashMap<Long, Config>());
+
+    @VisibleForTesting
+    @NonNull
+    static final TrimCacheRunnable sTrimCacheRunnable = new TrimCacheRunnable();
+    @NonNull
+    private static Handler sHandler = new Handler();
+
+    private WebViewCacheService() {
+    }
+
+    /**
+     * Stores the {@link BaseWebView} in the cache. This WebView will live until it is retrieved via
+     * {@link #popWebViewConfig(Long)} or when the base interstitial object is removed from memory.
+     *
+     * @param broadcastIdentifier The unique identifier associated with both the interstitial and the WebView
+     * @param baseInterstitial    The interstitial managing this WebView
+     * @param baseWebView         The BaseWebView to be stored
+     * @param viewabilityManager  The associated viewability manager, which needs to be created
+     *                            during Interstitial load and reutilized on show
+     */
+    @VisibleForTesting
+    public static void storeWebViewConfig(@NonNull final Long broadcastIdentifier,
+            @NonNull final Interstitial baseInterstitial,
+            @NonNull final BaseWebView baseWebView,
+            @NonNull final ExternalViewabilitySessionManager viewabilityManager) {
+        Preconditions.checkNotNull(broadcastIdentifier);
+        Preconditions.checkNotNull(baseInterstitial);
+        Preconditions.checkNotNull(baseWebView);
+
+        trimCache();
+        // Ignore request when max size is reached.
+        if (sWebViewConfigs.size() >= MAX_SIZE) {
+            MoPubLog.w(
+                    "Unable to cache web view. Please destroy some via MoPubInterstitial#destroy() and try again.");
+            return;
+        }
+
+        sWebViewConfigs.put(broadcastIdentifier,
+                new Config(baseWebView, baseInterstitial, viewabilityManager));
+    }
+
+    @Nullable
+    public static Config popWebViewConfig(@NonNull final Long broadcastIdentifier) {
+        Preconditions.checkNotNull(broadcastIdentifier);
+
+        return sWebViewConfigs.remove(broadcastIdentifier);
+    }
+
+    @VisibleForTesting
+    static synchronized void trimCache() {
+        final Iterator<Map.Entry<Long, Config>> iterator = sWebViewConfigs.entrySet().iterator();
+        while (iterator.hasNext()) {
+            final Map.Entry<Long, Config> entry = iterator.next();
+
+            // If the Interstitial was removed from memory, end viewability manager tracking and
+            // discard the entire associated Config.
+            if (entry.getValue().getWeakInterstitial().get() == null) {
+                entry.getValue().getViewabilityManager().endDisplaySession();
+                iterator.remove();
+            }
+        }
+
+        if (!sWebViewConfigs.isEmpty()) {
+            sHandler.removeCallbacks(sTrimCacheRunnable);
+            sHandler.postDelayed(sTrimCacheRunnable, TRIM_CACHE_FREQUENCY_MILLIS);
+        }
+    }
+
+    private static class TrimCacheRunnable implements Runnable {
+        @Override
+        public void run() {
+            trimCache();
+        }
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    public static void clearAll() {
+        sWebViewConfigs.clear();
+        sHandler.removeCallbacks(sTrimCacheRunnable);
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    @NonNull
+    static Map<Long, Config> getWebViewConfigs() {
+        return sWebViewConfigs;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    static void setHandler(@NonNull final Handler handler) {
+        sHandler = handler;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
index d12bf8e1..dbe95757 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
@@ -3,6 +3,7 @@
 import android.graphics.Canvas;
 import android.graphics.ColorFilter;
 import android.graphics.Paint;
+import android.graphics.PixelFormat;
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
 import android.support.annotation.NonNull;
@@ -29,6 +30,6 @@ public void setColorFilter(ColorFilter colorFilter) {
 
     @Override
     public int getOpacity() {
-        return 0;
+        return PixelFormat.UNKNOWN;
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
index 0cdb4fa7..123f33e3 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
@@ -1,7 +1,6 @@
 package com.mopub.mobileads.resource;
 
 import android.graphics.Canvas;
-import android.graphics.Color;
 import android.graphics.Paint;
 
 public class CloseButtonDrawable extends BaseWidgetDrawable {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
index b3dd1bff..68f20059 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
@@ -66,10 +66,10 @@
     }
     
     public static class CloseButton {
-        public static final int WIDGET_HEIGHT_DIPS = 46;
-        public static final int EDGE_PADDING = 16;
-        public static final int IMAGE_PADDING_DIPS = 5;
-        public static final int TEXT_RIGHT_MARGIN_DIPS = 7;
+        public static final int WIDGET_HEIGHT_DIPS = 56;
+        public static final int EDGE_PADDING = 6;
+        public static final int IMAGE_PADDING_DIPS = 15;
+        public static final int TEXT_RIGHT_MARGIN_DIPS = 0;
         public static final float TEXT_SIZE_SP = 20f;
 
         public static final int STROKE_COLOR = Color.WHITE;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
index 7071ffa0..cc0791a9 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
@@ -884,5 +884,5 @@
             "      }\n" +
             "    }\n" +
             "  };\n" +
-            "}());\n";
+            "}());\n".replaceAll("(?m)^\\s+", "").replaceAll("(?m)^//.*(?=\\n)", "");
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/WebViews.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/WebViews.java
index 12170703..f97898a0 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/WebViews.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/WebViews.java
@@ -1,8 +1,5 @@
 package com.mopub.mobileads.util;
 
-import android.annotation.TargetApi;
-import android.os.Build.VERSION;
-import android.os.Build.VERSION_CODES;
 import android.support.annotation.NonNull;
 import android.webkit.JsPromptResult;
 import android.webkit.JsResult;
@@ -10,25 +7,8 @@
 import android.webkit.WebView;
 
 import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.Reflection.MethodBuilder;
 
 public class WebViews {
-    @TargetApi(VERSION_CODES.HONEYCOMB)
-    public static void onResume(@NonNull final WebView webView) {
-        if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {
-            webView.onResume();
-            return;
-        }
-
-        // Method is still available, but hidden. Invoke using reflection.
-        try {
-            new MethodBuilder(webView, "onResume").setAccessible().execute();
-        } catch (Exception e) {
-            // no-op
-        }
-    }
-
-    @TargetApi(VERSION_CODES.HONEYCOMB)
     public static void onPause(@NonNull final WebView webView, boolean isFinishing) {
         // XXX
         // We need to call WebView#stopLoading and WebView#loadUrl here due to an Android
@@ -40,17 +20,7 @@ public static void onPause(@NonNull final WebView webView, boolean isFinishing)
             webView.loadUrl("");
         }
 
-        if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {
-            webView.onPause();
-            return;
-        }
-
-        // Method is still available, but hidden. Invoke using reflection.
-        try {
-            new MethodBuilder(webView, "onPause").setAccessible().execute();
-        } catch (Exception e) {
-            // no-op
-        }
+        webView.onPause();
     }
 
     public static void setDisableJSChromeClient(@NonNull final WebView webView) {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java
index 897b22a0..00ccf7bd 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java
@@ -27,7 +27,6 @@
 import com.mopub.mobileads.BaseWebView;
 import com.mopub.mobileads.ViewGestureDetector;
 import com.mopub.mobileads.ViewGestureDetector.UserClickListener;
-import com.mopub.mobileads.resource.MraidJavascript;
 import com.mopub.mraid.MraidBridge.MraidWebView.OnVisibilityChangedListener;
 import com.mopub.mraid.MraidNativeCommandHandler.MraidCommandFailureListener;
 import com.mopub.network.Networking;
@@ -73,10 +72,6 @@ void onSetOrientationProperties(boolean allowOrientationChange, MraidOrientation
         void onPlayVideo(URI uri);
     }
 
-    private final String FILTERED_JAVASCRIPT_SOURCE = MraidJavascript.JAVASCRIPT_SOURCE
-            .replaceAll("(?m)^\\s+", "")
-            .replaceAll("(?m)^//.*(?=\\n)", "");
-
     @NonNull private final PlacementType mPlacementType;
 
     @NonNull private final MraidNativeCommandHandler mMraidNativeCommandHandler;
@@ -115,7 +110,6 @@ void attachView(@NonNull MraidWebView mraidWebView) {
             }
         }
 
-        mMraidWebView.loadUrl("javascript:" + FILTERED_JAVASCRIPT_SOURCE);
         mMraidWebView.setScrollContainer(false);
         mMraidWebView.setVerticalScrollBarEnabled(false);
         mMraidWebView.setHorizontalScrollBarEnabled(false);
@@ -274,13 +268,7 @@ public boolean isVisible() {
         }
     }
 
-    private final WebViewClient mMraidWebViewClient = new WebViewClient() {
-        @Override
-        public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
-            MoPubLog.d("Error: " + description);
-            super.onReceivedError(view, errorCode, description, failingUrl);
-        }
-
+    private final WebViewClient mMraidWebViewClient = new MraidWebViewClient() {
         @Override
         public boolean shouldOverrideUrlLoading(@NonNull WebView view, @NonNull String url) {
             return handleShouldOverrideUrl(url);
@@ -290,6 +278,13 @@ public boolean shouldOverrideUrlLoading(@NonNull WebView view, @NonNull String u
         public void onPageFinished(@NonNull WebView view, @NonNull String url) {
             handlePageFinished();
         }
+
+        @Override
+        public void onReceivedError(@NonNull WebView view, int errorCode,
+                @NonNull String description, @NonNull String failingUrl) {
+            MoPubLog.d("Error: " + description);
+            super.onReceivedError(view, errorCode, description, failingUrl);
+        }
     };
 
     @VisibleForTesting
@@ -587,7 +582,7 @@ public void notifyScreenMetrics(@NonNull final MraidScreenMetrics screenMetrics)
                 + stringifyRect(screenMetrics.getDefaultAdRectDips())
                 + ")");
         injectJavaScript("mraidbridge.notifySizeChangeEvent("
-                + stringifySize(screenMetrics.getCurrentAdRect())
+                + stringifySize(screenMetrics.getCurrentAdRectDips())
                 + ")");
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
index aaf3ce0c..834483a9 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
@@ -1,6 +1,5 @@
 package com.mopub.mraid;
 
-import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.BroadcastReceiver;
 import android.content.ComponentName;
@@ -10,8 +9,6 @@
 import android.content.pm.ActivityInfo;
 import android.content.pm.PackageManager;
 import android.graphics.Rect;
-import android.os.Build.VERSION;
-import android.os.Build.VERSION_CODES;
 import android.os.Handler;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -28,6 +25,7 @@
 import android.widget.FrameLayout.LayoutParams;
 
 import com.mopub.common.AdReport;
+import com.mopub.common.ExternalViewabilitySessionManager;
 import com.mopub.common.UrlHandler;
 import com.mopub.common.CloseableLayout;
 import com.mopub.common.CloseableLayout.ClosePosition;
@@ -40,6 +38,7 @@
 import com.mopub.common.util.Dips;
 import com.mopub.common.util.Views;
 import com.mopub.mobileads.MraidVideoPlayerActivity;
+import com.mopub.mobileads.WebViewCacheService;
 import com.mopub.mobileads.util.WebViews;
 import com.mopub.mraid.MraidBridge.MraidBridgeListener;
 import com.mopub.mraid.MraidBridge.MraidWebView;
@@ -66,6 +65,10 @@
         public void useCustomCloseChanged(boolean useCustomClose);
     }
 
+    public interface MraidWebViewCacheListener {
+        void onReady(final MraidWebView webView, final ExternalViewabilitySessionManager viewabilityManager);
+    }
+
     /**
      * Holds a weak reference to the activity if the context that is passed in is an activity.
      * While this field is never null, the reference could become null. This reference starts out
@@ -329,16 +332,69 @@ public void setDebugListener(@Nullable MraidWebViewDebugListener debugListener)
         mDebugListener = debugListener;
     }
 
-    public void loadContent(@NonNull String htmlData) {
-        Preconditions.checkState(mMraidWebView == null, "loadContent should only be called once");
+    /**
+     * Gets an MraidWebView and fills it with data. In the case that the MraidWebView is retrieved
+     * from the cache, this also notifies that the ad has been loaded. If the broadcast identifier
+     * is null or there is a cache miss, a new MraidWebView is created and is filled with htmlData.
+     * @param broadcastIdentifier The unique identifier of an interstitial. This can be null,
+     *                            especially when there is no interstitial.
+     * @param htmlData            The HTML of the ad. This will only be loaded if a cached WebView
+     *                            is not found.
+     * @param listener            Optional listener that (if non-null) is notified when an
+     *                            MraidWebView is loaded from the cache or created.
+     */
+    public void fillContent(@Nullable final Long broadcastIdentifier,
+            @NonNull final String htmlData,
+            @Nullable final MraidWebViewCacheListener listener) {
+        Preconditions.checkNotNull(htmlData, "htmlData cannot be null");
+
+        final boolean cacheHit = hydrateMraidWebView(broadcastIdentifier, listener);
+        Preconditions.NoThrow.checkNotNull(mMraidWebView, "mMraidWebView cannot be null");
 
-        mMraidWebView = new MraidWebView(mContext);
         mMraidBridge.attachView(mMraidWebView);
         mDefaultAdContainer.addView(mMraidWebView,
                 new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
 
-        // onPageLoaded gets fired once the html is loaded into the webView
-        mMraidBridge.setContentHtml(htmlData);
+        // If the WebView was retrieved from the cache, notify that the ad is already loaded.
+        if (cacheHit) {
+            handlePageLoad();
+        } else {
+            // Otherwise, load the content into the MraidWebView
+            mMraidBridge.setContentHtml(htmlData);
+        }
+    }
+
+    /**
+     * Gets and sets the MraidWebView. Returns true if the MraidWebView was from the cache, and
+     * false if a new one was created. If the broadcast identifier is {@code null}, then this
+     * will always return false and create a new MraidWebView.
+     *
+     * @param broadcastIdentifier The unique identifier associated with the MraidWebView in the cache.
+     * @param listener            Listener passed in from {@link #fillContent(Long, String, MraidWebViewCacheListener)}
+     * @return {@code true} if there was a cache hit, {@code false} if a new MraidWebView was created.
+     */
+    private boolean hydrateMraidWebView(@Nullable final Long broadcastIdentifier,
+            @Nullable final MraidWebViewCacheListener listener) {
+        if (broadcastIdentifier != null) {
+            final WebViewCacheService.Config config =
+                    WebViewCacheService.popWebViewConfig(broadcastIdentifier);
+            if (config != null && config.getWebView() instanceof MraidWebView) {
+                mMraidWebView = (MraidWebView) config.getWebView();
+                mMraidWebView.enablePlugins(true);
+
+                if (listener != null) {
+                    listener.onReady(mMraidWebView, config.getViewabilityManager());
+                }
+                return true;
+            }
+        }
+        MoPubLog.d("WebView cache miss. Creating a new MraidWebView.");
+        mMraidWebView = new MraidWebView(mContext);
+
+        if (listener != null) {
+            listener.onReady(mMraidWebView, null);
+        }
+        return false;
     }
 
     // onPageLoaded gets fired once the html is loaded into the webView.
@@ -441,7 +497,7 @@ void cancelLastRequest() {
     }
 
     @Nullable
-    private View getCurrentWebView() {
+    public MraidWebView getCurrentWebView() {
         return mTwoPartBridge.isAttached() ? mTwoPartWebView : mMraidWebView;
     }
 
@@ -571,10 +627,10 @@ public void resume() {
 
         // This causes an inline video to resume if it was playing previously
         if (mMraidWebView != null) {
-            WebViews.onResume(mMraidWebView);
+            mMraidWebView.onResume();
         }
         if (mTwoPartWebView != null) {
-            WebViews.onResume(mTwoPartWebView);
+            mTwoPartWebView.onResume();
         }
     }
 
@@ -724,7 +780,7 @@ void handleResize(final int widthDips, final int heightDips, final int offsetXDi
             mDefaultAdContainer.setVisibility(View.INVISIBLE);
             mCloseableAdContainer.addView(mMraidWebView,
                     new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
-            getRootView().addView(mCloseableAdContainer, layoutParams);
+            getAndMemoizeRootView().addView(mCloseableAdContainer, layoutParams);
         } else if (mViewState == ViewState.RESIZED) {
             mCloseableAdContainer.setLayoutParams(layoutParams);
         }
@@ -772,7 +828,7 @@ void handleExpand(@Nullable URI uri, boolean shouldUseCustomClose)
                 mDefaultAdContainer.setVisibility(View.INVISIBLE);
                 mCloseableAdContainer.addView(mMraidWebView, layoutParams);
             }
-            getRootView().addView(mCloseableAdContainer,
+            getAndMemoizeRootView().addView(mCloseableAdContainer,
                     new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
         } else if (mViewState == ViewState.RESIZED) {
             if (isTwoPart) {
@@ -794,7 +850,7 @@ void handleExpand(@Nullable URI uri, boolean shouldUseCustomClose)
     }
 
     @VisibleForTesting
-    void handleClose() {
+    protected void handleClose() {
         if (mMraidWebView == null) {
             // Doesn't throw an exception because the ad has been destroyed
             return;
@@ -821,7 +877,7 @@ void handleClose() {
                         LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
                 mDefaultAdContainer.setVisibility(View.VISIBLE);
             }
-            getRootView().removeView(mCloseableAdContainer);
+            Views.removeFromParent(mCloseableAdContainer);
 
             // Set the view state to default
             setViewState(ViewState.DEFAULT);
@@ -831,18 +887,28 @@ void handleClose() {
         }
     }
 
+    /*
+     * Prefer this method over getAndMemoizeRootView() when the rootView is only being used for
+     * screen size calculations (and not for adding/removing anything from the view hierarchy).
+     * Having consistent return values is less important in the former case.
+     */
     @NonNull
-    @TargetApi(VERSION_CODES.KITKAT)
     private ViewGroup getRootView() {
-        if (mRootView == null) {
-            // This method should never be called this method before the container is ready, ie before
-            // handlePageLoad.
-            if (VERSION.SDK_INT >= VERSION_CODES.KITKAT) {
-                Preconditions.checkState(mDefaultAdContainer.isAttachedToWindow());
-            }
+        if (mRootView != null) {
+            return mRootView;
+        }
+
+        final View bestRootView = Views.getTopmostView(mWeakActivity.get(),
+                mDefaultAdContainer);
+        return bestRootView instanceof ViewGroup
+                ? (ViewGroup) bestRootView
+                : mDefaultAdContainer;
+    }
 
-            mRootView = (ViewGroup) mDefaultAdContainer.getRootView().findViewById(
-                    android.R.id.content);
+    @NonNull
+    private ViewGroup getAndMemoizeRootView() {
+        if (mRootView == null) {
+            mRootView = getRootView();
         }
 
         return mRootView;
@@ -901,7 +967,6 @@ void unApplyOrientation() {
         mOriginalActivityOrientation = null;
     }
 
-    @TargetApi(VERSION_CODES.HONEYCOMB_MR2)
     @VisibleForTesting
     boolean shouldAllowForceOrientation(final MraidOrientation newOrientation) {
         // NONE is the default and always allowed
@@ -934,17 +999,15 @@ boolean shouldAllowForceOrientation(final MraidOrientation newOrientation) {
         boolean containsNecessaryConfigChanges =
                 bitMaskContainsFlag(activityInfo.configChanges, CONFIG_ORIENTATION);
 
-        // And on API 13+, configChanges must also include "screenSize"
-        if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB_MR2) {
-            containsNecessaryConfigChanges = containsNecessaryConfigChanges
-                    && bitMaskContainsFlag(activityInfo.configChanges, CONFIG_SCREEN_SIZE);
-        }
+        // configChanges must also include "screenSize"
+        containsNecessaryConfigChanges = containsNecessaryConfigChanges
+                && bitMaskContainsFlag(activityInfo.configChanges, CONFIG_SCREEN_SIZE);
 
         return containsNecessaryConfigChanges;
     }
 
     @VisibleForTesting
-    void handleCustomClose(boolean useCustomClose) {
+    protected void handleCustomClose(boolean useCustomClose) {
         boolean wasUsingCustomClose = !mCloseableAdContainer.isCloseVisible();
         if (useCustomClose == wasUsingCustomClose) {
             return;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java
index b90b60ab..26963641 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java
@@ -1,22 +1,18 @@
 package com.mopub.mraid;
 
-import android.annotation.TargetApi;
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.ActivityNotFoundException;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
-import android.content.pm.PackageManager;
 import android.media.MediaScannerConnection;
 import android.net.Uri;
 import android.os.AsyncTask;
-import android.os.Build.VERSION_CODES;
 import android.os.Environment;
 import android.provider.CalendarContract;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.support.v4.content.ContextCompat;
 import android.text.TextUtils;
 import android.view.View;
 import android.view.Window;
@@ -32,7 +28,6 @@
 import com.mopub.common.util.Intents;
 import com.mopub.common.util.Streams;
 import com.mopub.common.util.Utils;
-import com.mopub.common.util.VersionCode;
 
 import java.io.BufferedInputStream;
 import java.io.File;
@@ -147,8 +142,7 @@ public static boolean isStorePictureSupported(Context context) {
     static boolean isCalendarAvailable(Context context) {
         Intent calendarIntent = new Intent(Intent.ACTION_INSERT).setType(ANDROID_CALENDAR_CONTENT_TYPE);
 
-        return VersionCode.currentApiLevel().isAtLeast(VersionCode.ICE_CREAM_SANDWICH)
-                && Intents.deviceCanHandleIntent(context, calendarIntent);
+        return Intents.deviceCanHandleIntent(context, calendarIntent);
     }
 
     /**
@@ -156,16 +150,7 @@ static boolean isCalendarAvailable(Context context) {
      * enabled in its foreground window and only if the View or any ParentView in the view tree
      * has not had hardware acceleration explicitly turned off.
      */
-    // TargetApi is needed to access hardware accelerated flags
-    @TargetApi(11)
     boolean isInlineVideoAvailable(@NonNull Activity activity, @NonNull View view) {
-        // In addition to potential hardware acceleration problems, there is a problem in the WebKit
-        // HTML5VideoView implementation pre-Gingerbread that would result in HTML5VideoViewProxy
-        // holding on to an instance of the WebView even after the WebView is destroyed. For
-        // this reason, we never allow inline video on Gingerbread devices.
-        if (VersionCode.currentApiLevel().isBelow(VersionCode.HONEYCOMB_MR1)) {
-            return false;
-        }
 
         // Hardware Acceleration
         // Hardware acceleration for the application and activity is enabled by default
@@ -211,7 +196,6 @@ boolean isInlineVideoAvailable(@NonNull Activity activity, @NonNull View view) {
         return false;
     }
 
-    @TargetApi(VERSION_CODES.ICE_CREAM_SANDWICH)
     private Map<String, Object> translateJSParamsToAndroidCalendarEventMapping(Map<String, String> params) {
         Map<String, Object> validatedParamsMapping = new HashMap<String, Object>();
         if (!params.containsKey("description") || !params.containsKey("start")) {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewClient.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewClient.java
new file mode 100644
index 00000000..b2864ed4
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewClient.java
@@ -0,0 +1,46 @@
+package com.mopub.mraid;
+
+import android.net.Uri;
+import android.support.annotation.NonNull;
+import android.support.annotation.VisibleForTesting;
+import android.webkit.WebResourceResponse;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
+
+import com.mopub.mobileads.resource.MraidJavascript;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.util.Locale;
+
+/**
+ * Handles injecting the MRAID javascript when encountering mraid.js urls
+ */
+public class MraidWebViewClient extends WebViewClient {
+
+    private static final String MRAID_JS = "mraid.js";
+    private static final String MRAID_INJECTION_JAVASCRIPT = "javascript:"
+            + MraidJavascript.JAVASCRIPT_SOURCE;
+
+    @SuppressWarnings("deprecation") // new method will simply call this one
+    @Override
+    public WebResourceResponse shouldInterceptRequest(@NonNull final WebView view,
+            @NonNull final String url) {
+        if (matchesInjectionUrl(url)) {
+            return createMraidInjectionResponse();
+        } else {
+            return super.shouldInterceptRequest(view, url);
+        }
+    }
+
+    @VisibleForTesting
+    boolean matchesInjectionUrl(@NonNull final String url) {
+        final Uri uri = Uri.parse(url.toLowerCase(Locale.US));
+        return MRAID_JS.equals(uri.getLastPathSegment());
+    }
+
+    private WebResourceResponse createMraidInjectionResponse() {
+        InputStream data = new ByteArrayInputStream(MRAID_INJECTION_JAVASCRIPT.getBytes());
+        return new WebResourceResponse("text/javascript", "UTF-8", data);
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
index 2118eaa2..bd4ba50e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
@@ -3,7 +3,6 @@
 import android.content.Context;
 import android.location.Location;
 import android.net.Uri;
-import android.os.Build;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
@@ -14,6 +13,7 @@
 import com.mopub.common.FullAdType;
 import com.mopub.common.LocationService;
 import com.mopub.common.MoPub;
+import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.event.BaseEvent;
@@ -38,6 +38,7 @@
 import java.util.Map;
 import java.util.TreeMap;
 
+import static com.mopub.common.ExternalViewabilitySessionManager.ViewabilityVendor;
 import static com.mopub.network.HeaderUtils.extractBooleanHeader;
 import static com.mopub.network.HeaderUtils.extractHeader;
 import static com.mopub.network.HeaderUtils.extractIntegerHeader;
@@ -108,6 +109,7 @@ public Listener getListener() {
         // error listener.
 
         Map<String, String> headers = networkResponse.headers;
+
         if (extractBooleanHeader(headers, ResponseHeader.WARMUP, false)) {
             return Response.error(new MoPubNetworkError("Ad Unit is warming up.", MoPubNetworkError.Reason.WARMING_UP));
         }
@@ -199,6 +201,12 @@ public Listener getListener() {
                 fullAdTypeString, headers);
         builder.setCustomEventClassName(customEventClassName);
 
+        // Default browser agent from X-Browser-Agent header
+        BrowserAgent browserAgent = BrowserAgent.fromHeader(
+                extractIntegerHeader(headers, ResponseHeader.BROWSER_AGENT));
+        MoPub.setBrowserAgentFromAdServer(browserAgent);
+        builder.setBrowserAgent(browserAgent);
+
         // Process server extras if they are present:
         String customEventData = extractHeader(headers, ResponseHeader.CUSTOM_EVENT_DATA);
 
@@ -230,22 +238,29 @@ public Listener getListener() {
             serverExtras.put(DataKeys.SCROLLABLE_KEY, Boolean.toString(isScrollable));
             serverExtras.put(DataKeys.CREATIVE_ORIENTATION_KEY, extractHeader(headers, ResponseHeader.ORIENTATION));
         }
-        if (AdType.VIDEO_NATIVE.equals(adTypeString)) {
-            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
-                return Response.error(new MoPubNetworkError("Native Video ads are only supported" +
-                        " for Android API Level 16 (JellyBean) and above.",
-                        MoPubNetworkError.Reason.UNSPECIFIED));
-
+        if (AdType.STATIC_NATIVE.equals(adTypeString) || AdType.VIDEO_NATIVE.equals(adTypeString)) {
+            final String impressionMinVisiblePercent = extractPercentHeaderString(headers,
+                    ResponseHeader.IMPRESSION_MIN_VISIBLE_PERCENT);
+            final String impressionVisibleMS = extractHeader(headers,
+                    ResponseHeader.IMPRESSION_VISIBLE_MS);
+            final String impressionMinVisiblePx = extractHeader(headers,
+                    ResponseHeader.IMPRESSION_MIN_VISIBLE_PX);
+            if (!TextUtils.isEmpty(impressionMinVisiblePercent)) {
+                serverExtras.put(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT,
+                        impressionMinVisiblePercent);
             }
+            if (!TextUtils.isEmpty(impressionVisibleMS)) {
+                serverExtras.put(DataKeys.IMPRESSION_VISIBLE_MS, impressionVisibleMS);
+            }
+            if (!TextUtils.isEmpty(impressionMinVisiblePx)) {
+                serverExtras.put(DataKeys.IMPRESSION_MIN_VISIBLE_PX, impressionMinVisiblePx);
+            }
+        }
+        if (AdType.VIDEO_NATIVE.equals(adTypeString)) {
             serverExtras.put(DataKeys.PLAY_VISIBLE_PERCENT,
                     extractPercentHeaderString(headers, ResponseHeader.PLAY_VISIBLE_PERCENT));
             serverExtras.put(DataKeys.PAUSE_VISIBLE_PERCENT,
                     extractPercentHeaderString(headers, ResponseHeader.PAUSE_VISIBLE_PERCENT));
-            serverExtras.put(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT,
-                    extractPercentHeaderString(headers,
-                            ResponseHeader.IMPRESSION_MIN_VISIBLE_PERCENT));
-            serverExtras.put(DataKeys.IMPRESSION_VISIBLE_MS, extractHeader(headers,
-                    ResponseHeader.IMPRESSION_VISIBLE_MS));
             serverExtras.put(DataKeys.MAX_BUFFER_MS, extractHeader(headers,
                     ResponseHeader.MAX_BUFFER_MS));
 
@@ -266,18 +281,60 @@ public Listener getListener() {
                             .build()
             );
         }
+
+        // Extract internal video trackers, if available
+        final String videoTrackers = extractHeader(headers, ResponseHeader.VIDEO_TRACKERS);
+        if (videoTrackers != null) {
+            serverExtras.put(DataKeys.VIDEO_TRACKERS_KEY, videoTrackers);
+        }
+        if (AdType.REWARDED_VIDEO.equals(adTypeString) ||
+                (AdType.INTERSTITIAL.equals(adTypeString) &&
+                        FullAdType.VAST.equals(fullAdTypeString))) {
+            serverExtras.put(DataKeys.EXTERNAL_VIDEO_VIEWABILITY_TRACKERS_KEY,
+                    extractHeader(headers, ResponseHeader.VIDEO_VIEWABILITY_TRACKERS));
+        }
+
+        // Banner imp tracking
+        if (AdFormat.BANNER.equals(mAdFormat)) {
+            serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS,
+                    extractHeader(headers, ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_MS));
+            serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS,
+                    extractHeader(headers, ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_DIPS));
+        }
+
+        // Disable viewability vendors, if any
+        final String disabledViewabilityVendors = extractHeader(headers,
+                ResponseHeader.DISABLE_VIEWABILITY);
+        if (!TextUtils.isEmpty(disabledViewabilityVendors)) {
+            final ViewabilityVendor disabledVendors =
+                    ViewabilityVendor.fromKey(disabledViewabilityVendors);
+            if (disabledVendors != null) {
+                disabledVendors.disable();
+            }
+        }
+
         builder.setServerExtras(serverExtras);
 
-        if (AdType.REWARDED_VIDEO.equals(adTypeString) || AdType.CUSTOM.equals(adTypeString)) {
+        if (AdType.REWARDED_VIDEO.equals(adTypeString) || AdType.CUSTOM.equals(adTypeString) ||
+                AdType.REWARDED_PLAYABLE.equals(adTypeString)) {
             final String rewardedVideoCurrencyName = extractHeader(headers,
                     ResponseHeader.REWARDED_VIDEO_CURRENCY_NAME);
             final String rewardedVideoCurrencyAmount = extractHeader(headers,
                     ResponseHeader.REWARDED_VIDEO_CURRENCY_AMOUNT);
+            final String rewardedCurrencies = extractHeader(headers,
+                    ResponseHeader.REWARDED_CURRENCIES);
             final String rewardedVideoCompletionUrl = extractHeader(headers,
                     ResponseHeader.REWARDED_VIDEO_COMPLETION_URL);
+            final Integer rewardedDuration = extractIntegerHeader(headers,
+                    ResponseHeader.REWARDED_DURATION);
+            final boolean shouldRewardOnClick = extractBooleanHeader(headers,
+                    ResponseHeader.SHOULD_REWARD_ON_CLICK, false);
             builder.setRewardedVideoCurrencyName(rewardedVideoCurrencyName);
             builder.setRewardedVideoCurrencyAmount(rewardedVideoCurrencyAmount);
+            builder.setRewardedCurrencies(rewardedCurrencies);
             builder.setRewardedVideoCompletionUrl(rewardedVideoCompletionUrl);
+            builder.setRewardedDuration(rewardedDuration);
+            builder.setShouldRewardOnClick(shouldRewardOnClick);
         }
 
         AdResponse adResponse = builder.build();
@@ -291,7 +348,8 @@ private boolean eventDataIsInResponseBody(@Nullable String adType,
             @Nullable String fullAdType) {
         return AdType.MRAID.equals(adType) || AdType.HTML.equals(adType) ||
                 (AdType.INTERSTITIAL.equals(adType) && FullAdType.VAST.equals(fullAdType)) ||
-                (AdType.REWARDED_VIDEO.equals(adType) && FullAdType.VAST.equals(fullAdType));
+                (AdType.REWARDED_VIDEO.equals(adType) && FullAdType.VAST.equals(fullAdType)) ||
+                AdType.REWARDED_PLAYABLE.equals(adType);
     }
 
     // Based on Volley's StringResponse class.
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
index 29b29c71..7e034601 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
@@ -3,6 +3,7 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
+import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.event.EventDetails;
 import com.mopub.common.util.DateAndTime;
 
@@ -31,7 +32,12 @@
     @Nullable
     private final String mRewardedVideoCurrencyAmount;
     @Nullable
+    private final String mRewardedCurrencies;
+    @Nullable
     private final String mRewardedVideoCompletionUrl;
+    @Nullable
+    private final Integer mRewardedDuration;
+    private final boolean mShouldRewardOnClick;
 
     @Nullable
     private final String mRedirectUrl;
@@ -67,6 +73,8 @@
 
     @Nullable
     private final String mCustomEventClassName;
+    @Nullable
+    private final BrowserAgent mBrowserAgent;
     @NonNull
     private final Map<String, String> mServerExtras;
 
@@ -81,7 +89,10 @@ private AdResponse(@NonNull Builder builder) {
 
         mRewardedVideoCurrencyName = builder.rewardedVideoCurrencyName;
         mRewardedVideoCurrencyAmount = builder.rewardedVideoCurrencyAmount;
+        mRewardedCurrencies = builder.rewardedCurrencies;
         mRewardedVideoCompletionUrl = builder.rewardedVideoCompletionUrl;
+        mRewardedDuration = builder.rewardedDuration;
+        mShouldRewardOnClick = builder.shouldRewardOnClick;
 
         mRedirectUrl = builder.redirectUrl;
         mClickTrackingUrl = builder.clickTrackingUrl;
@@ -98,6 +109,7 @@ private AdResponse(@NonNull Builder builder) {
         mJsonBody = builder.jsonBody;
         mEventDetails = builder.eventDetails;
         mCustomEventClassName = builder.customEventClassName;
+        mBrowserAgent = builder.mBrowserAgent;
         mServerExtras = builder.serverExtras;
         mTimestamp = DateAndTime.now().getTime();
     }
@@ -151,11 +163,25 @@ public String getRewardedVideoCurrencyAmount() {
         return mRewardedVideoCurrencyAmount;
     }
 
+    @Nullable
+    public String getRewardedCurrencies() {
+        return mRewardedCurrencies;
+    }
+
     @Nullable
     public String getRewardedVideoCompletionUrl() {
         return mRewardedVideoCompletionUrl;
     }
 
+    @Nullable
+    public Integer getRewardedDuration() {
+        return mRewardedDuration;
+    }
+
+    public boolean shouldRewardOnClick() {
+        return mShouldRewardOnClick;
+    }
+
     @Nullable
     public String getRedirectUrl() {
         return mRedirectUrl;
@@ -215,6 +241,9 @@ public String getCustomEventClassName() {
         return mCustomEventClassName;
     }
 
+    @Nullable
+    public BrowserAgent getBrowserAgent() { return mBrowserAgent; }
+
     @NonNull
     public Map<String, String> getServerExtras() {
         // Strings are immutable, so this works as a "deep" copy.
@@ -229,6 +258,12 @@ public Builder toBuilder() {
         return new Builder()
                 .setAdType(mAdType)
                 .setNetworkType(mNetworkType)
+                .setRewardedVideoCurrencyName(mRewardedVideoCurrencyName)
+                .setRewardedVideoCurrencyAmount(mRewardedVideoCurrencyAmount)
+                .setRewardedCurrencies(mRewardedCurrencies)
+                .setRewardedVideoCompletionUrl(mRewardedVideoCompletionUrl)
+                .setRewardedDuration(mRewardedDuration)
+                .setShouldRewardOnClick(mShouldRewardOnClick)
                 .setRedirectUrl(mRedirectUrl)
                 .setClickTrackingUrl(mClickTrackingUrl)
                 .setImpressionTrackingUrl(mImpressionTrackingUrl)
@@ -242,6 +277,7 @@ public Builder toBuilder() {
                 .setJsonBody(mJsonBody)
                 .setEventDetails(mEventDetails)
                 .setCustomEventClassName(mCustomEventClassName)
+                .setBrowserAgent(mBrowserAgent)
                 .setServerExtras(mServerExtras);
     }
 
@@ -253,7 +289,10 @@ public Builder toBuilder() {
 
         private String rewardedVideoCurrencyName;
         private String rewardedVideoCurrencyAmount;
+        private String rewardedCurrencies;
         private String rewardedVideoCompletionUrl;
+        private Integer rewardedDuration;
+        private boolean shouldRewardOnClick;
 
         private String redirectUrl;
         private String clickTrackingUrl;
@@ -275,6 +314,7 @@ public Builder toBuilder() {
         private EventDetails eventDetails;
 
         private String customEventClassName;
+        private BrowserAgent mBrowserAgent;
         private Map<String, String> serverExtras = new TreeMap<String, String>();
 
         public Builder setAdType(@Nullable final String adType) {
@@ -309,12 +349,27 @@ public Builder setRewardedVideoCurrencyAmount(
             return this;
         }
 
+        public Builder setRewardedCurrencies(@Nullable final String rewardedCurrencies) {
+            this.rewardedCurrencies = rewardedCurrencies;
+            return this;
+        }
+
         public Builder setRewardedVideoCompletionUrl(
                 @Nullable final String rewardedVideoCompletionUrl) {
             this.rewardedVideoCompletionUrl = rewardedVideoCompletionUrl;
             return this;
         }
 
+        public Builder setRewardedDuration(@Nullable final Integer rewardedDuration) {
+            this.rewardedDuration = rewardedDuration;
+            return this;
+        }
+
+        public Builder setShouldRewardOnClick(final boolean shouldRewardOnClick) {
+            this.shouldRewardOnClick = shouldRewardOnClick;
+            return this;
+        }
+
         public Builder setRedirectUrl(@Nullable final String redirectUrl) {
             this.redirectUrl = redirectUrl;
             return this;
@@ -387,6 +442,11 @@ public Builder setCustomEventClassName(@Nullable final String customEventClassNa
             return this;
         }
 
+        public Builder setBrowserAgent(@Nullable final BrowserAgent browserAgent) {
+            this.mBrowserAgent = browserAgent;
+            return this;
+        }
+
         public Builder setServerExtras(@Nullable final Map<String, String> serverExtras) {
             if (serverExtras == null) {
                 this.serverExtras = new TreeMap<String, String>();
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
index 21c48ac1..5cd1d30f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
@@ -1,12 +1,24 @@
 package com.mopub.network;
 
 import android.net.SSLCertificateSocketFactory;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Reflection;
 
 import java.io.IOException;
 import java.net.InetAddress;
 import java.net.Socket;
+import java.net.SocketException;
 import java.net.UnknownHostException;
 
+import javax.net.ssl.HostnameVerifier;
+import javax.net.ssl.HttpsURLConnection;
+import javax.net.ssl.SSLHandshakeException;
 import javax.net.ssl.SSLSocket;
 import javax.net.ssl.SSLSocketFactory;
 
@@ -15,10 +27,11 @@
  */
 public class CustomSSLSocketFactory extends SSLSocketFactory {
 
-    private SSLSocketFactory mCertificateSocketFactory;
+    @Nullable private SSLSocketFactory mCertificateSocketFactory;
 
     private CustomSSLSocketFactory() {}
 
+    @NonNull
     public static CustomSSLSocketFactory getDefault(final int handshakeTimeoutMillis) {
         CustomSSLSocketFactory factory = new CustomSSLSocketFactory();
         factory.mCertificateSocketFactory = SSLCertificateSocketFactory.getDefault(handshakeTimeoutMillis, null);
@@ -31,6 +44,9 @@ public static CustomSSLSocketFactory getDefault(final int handshakeTimeoutMillis
     // SocketFactory overrides
     @Override
     public Socket createSocket() throws IOException {
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
         final Socket socket = mCertificateSocketFactory.createSocket();
         enableTlsIfAvailable(socket);
         return socket;
@@ -38,6 +54,9 @@ public Socket createSocket() throws IOException {
 
     @Override
     public Socket createSocket(final String host, final int i) throws IOException, UnknownHostException {
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
         final Socket socket = mCertificateSocketFactory.createSocket(host, i);
         enableTlsIfAvailable(socket);
         return socket;
@@ -45,6 +64,9 @@ public Socket createSocket(final String host, final int i) throws IOException, U
 
     @Override
     public Socket createSocket(final String host, final int port, final InetAddress localhost, final int localPort) throws IOException, UnknownHostException {
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
         final Socket socket = mCertificateSocketFactory.createSocket(host, port, localhost, localPort);
         enableTlsIfAvailable(socket);
         return socket;
@@ -52,6 +74,9 @@ public Socket createSocket(final String host, final int port, final InetAddress
 
     @Override
     public Socket createSocket(final InetAddress address, final int port) throws IOException {
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
         final Socket socket = mCertificateSocketFactory.createSocket(address, port);
         enableTlsIfAvailable(socket);
         return socket;
@@ -59,6 +84,9 @@ public Socket createSocket(final InetAddress address, final int port) throws IOE
 
     @Override
     public Socket createSocket(final InetAddress address, final int port, final InetAddress localhost, final int localPort) throws IOException {
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
         final Socket socket = mCertificateSocketFactory.createSocket(address, port, localhost, localPort);
         enableTlsIfAvailable(socket);
         return socket;
@@ -68,22 +96,114 @@ public Socket createSocket(final InetAddress address, final int port, final Inet
 
     @Override
     public String[] getDefaultCipherSuites() {
+        if (mCertificateSocketFactory == null) {
+            return new String[]{};
+        }
         return mCertificateSocketFactory.getDefaultCipherSuites();
     }
 
     @Override
     public String[] getSupportedCipherSuites() {
+        if (mCertificateSocketFactory == null) {
+            return new String[]{};
+        }
         return mCertificateSocketFactory.getSupportedCipherSuites();
     }
 
     @Override
     public Socket createSocket(final Socket socketParam, final String host, final int port, final boolean autoClose) throws IOException {
-        Socket socket = mCertificateSocketFactory.createSocket(socketParam, host, port, autoClose);
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
+
+        // There is a bug in Android before version 6.0 where SNI does not work, so we try to do
+        // it manually here.
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
+            // Don't use the original socket and create a new one. This closes the original socket
+            // if the autoClose flag is set.
+            if (autoClose && socketParam != null) {
+                socketParam.close();
+            }
+
+            final Socket socket = mCertificateSocketFactory.createSocket(
+                    InetAddressUtils.getInetAddressByName(host), port);
+            enableTlsIfAvailable(socket);
+            doManualServerNameIdentification(socket, host);
+            return socket;
+        }
+
+        final Socket socket = mCertificateSocketFactory.createSocket(socketParam, host, port,
+                autoClose);
         enableTlsIfAvailable(socket);
         return socket;
     }
 
-    private void enableTlsIfAvailable(Socket socket) {
+    /**
+     * Some versions of Android fail to do server name identification (SNI) even though they are
+     * able to. This method forces SNI to happen, if possible. SNI is only used in https
+     * connections, and this method will no-op for http connections. This method throws an
+     * SSLHandshakeException if SNI fails. This method may also throw other socket-related
+     * IOExceptions.
+     *
+     * @param socket The socket to do SNI on
+     * @param host   The host to verify the server name
+     * @throws IOException
+     */
+    private void doManualServerNameIdentification(@NonNull final Socket socket,
+            @Nullable final String host) throws IOException {
+        Preconditions.checkNotNull(socket);
+
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
+
+        if (socket instanceof SSLSocket) {
+            final SSLSocket sslSocket = (SSLSocket) socket;
+            setHostnameOnSocket((SSLCertificateSocketFactory) mCertificateSocketFactory, sslSocket,
+                    host);
+            verifyServerName(sslSocket, host);
+        }
+    }
+
+    /**
+     * Calling setHostname on a socket turns on the server name identification feature.
+     * Unfortunately, this was introduced in Android version 17, so we do what we can.
+     */
+    @VisibleForTesting
+    static void setHostnameOnSocket(@NonNull final SSLCertificateSocketFactory certificateSocketFactory,
+            @NonNull final SSLSocket sslSocket, @Nullable final String host) {
+        Preconditions.checkNotNull(certificateSocketFactory);
+        Preconditions.checkNotNull(sslSocket);
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            certificateSocketFactory.setHostname(sslSocket, host);
+        } else {
+            try {
+                new Reflection.MethodBuilder(sslSocket, "setHostname")
+                        .addParam(String.class, host)
+                        .execute();
+            } catch (Exception e) {
+                MoPubLog.d("Unable to call setHostname() on the socket");
+            }
+        }
+    }
+
+    /**
+     * This actually performs server name identification.
+     */
+    @VisibleForTesting
+    static void verifyServerName(@NonNull final SSLSocket sslSocket,
+            @Nullable final String host) throws IOException {
+        Preconditions.checkNotNull(sslSocket);
+
+        sslSocket.startHandshake();
+        final HostnameVerifier hostnameVerifier = HttpsURLConnection.getDefaultHostnameVerifier();
+        if (!hostnameVerifier.verify(host, sslSocket.getSession())) {
+            throw new SSLHandshakeException("Server Name Identification failed.");
+        }
+    }
+
+    private void enableTlsIfAvailable(@Nullable Socket socket) {
         if (socket instanceof SSLSocket) {
             SSLSocket sslSocket = (SSLSocket) socket;
             String[] supportedProtocols = sslSocket.getSupportedProtocols();
@@ -92,4 +212,10 @@ private void enableTlsIfAvailable(Socket socket) {
             sslSocket.setEnabledProtocols(supportedProtocols);
         }
     }
+
+    @Deprecated
+    @VisibleForTesting
+    void setCertificateSocketFactory(@NonNull final SSLSocketFactory sslSocketFactory) {
+        mCertificateSocketFactory = sslSocketFactory;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java
index 3010a77e..55fba8cc 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java
@@ -68,6 +68,14 @@ private static boolean formatBooleanHeader(@Nullable String headerValue, boolean
     }
 
     private static Integer formatIntHeader(String headerValue) {
+        try {
+            return Integer.parseInt(headerValue);
+        } catch (Exception e) {
+            // Continue below if we can't parse it quickly
+        }
+
+        // The number format way of parsing integers is way slower than Integer.parseInt, but
+        // for numbers like 3.14, we would like to return 3, not null.
         NumberFormat numberFormat = NumberFormat.getInstance(Locale.US);
         numberFormat.setParseIntegerOnly(true);
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/InetAddressUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/InetAddressUtils.java
new file mode 100644
index 00000000..b522e707
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/InetAddressUtils.java
@@ -0,0 +1,20 @@
+package com.mopub.network;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+
+/**
+ * This class exists to wrap InetAddress static calls since java.net classes cannot be mocked
+ */
+public class InetAddressUtils {
+    @NonNull
+    public static InetAddress getInetAddressByName(@Nullable final String host) throws UnknownHostException {
+        return InetAddress.getByName(host);
+    }
+
+    private InetAddressUtils() {
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MaxWidthImageLoader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MaxWidthImageLoader.java
index 6927dd96..99851c23 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MaxWidthImageLoader.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MaxWidthImageLoader.java
@@ -1,9 +1,7 @@
 package com.mopub.network;
 
-import android.annotation.TargetApi;
 import android.content.Context;
 import android.graphics.Point;
-import android.os.Build;
 import android.view.Display;
 import android.view.WindowManager;
 
@@ -13,7 +11,6 @@
     private final int mMaxImageWidth;
 
 
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
     public MaxWidthImageLoader(final RequestQueue queue, final Context context, final ImageCache imageCache) {
         super(queue, imageCache);
 
@@ -21,11 +18,7 @@ public MaxWidthImageLoader(final RequestQueue queue, final Context context, fina
         WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
         Display display = wm.getDefaultDisplay();
         Point size = new Point();
-        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB_MR2) {
-            size.set(display.getWidth(), display.getHeight());
-        } else {
-            display.getSize(size);
-        }
+        display.getSize(size);
 
         // Make our images no wider than the skinny side of the display.
         mMaxImageWidth = Math.min(size.x, size.y);
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
index e55db850..f55a88fa 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
@@ -2,10 +2,12 @@
 
 import android.content.Context;
 import android.graphics.Bitmap;
+import android.os.Build;
 import android.os.Looper;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.v4.util.LruCache;
+import android.webkit.WebSettings;
 import android.webkit.WebView;
 
 import com.mopub.common.ClientMetadata;
@@ -127,16 +129,19 @@ public static String getUserAgent(@NonNull Context context) {
             synchronized (Networking.class) {
                 userAgent = sUserAgent;
                 if (userAgent == null) {
-                    // As of Android 4.4, WebViews may only be instantiated on the UI thread
-                    if (Looper.myLooper() == Looper.getMainLooper()) {
-                        try {
+                    try {
+                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+                            userAgent = WebSettings.getDefaultUserAgent(context);
+                        } else if (Looper.myLooper() == Looper.getMainLooper()) {
+                            // WebViews may only be instantiated on the UI thread. If anything goes
+                            // wrong with getting a user agent, use the system-specific user agent.
                             userAgent = new WebView(context).getSettings().getUserAgentString();
-                        } catch (Exception e) {
+                        } else {
                             userAgent = DEFAULT_USER_AGENT;
                         }
-                    } else {
-                        // In the exceptional case where we can't access the WebView user agent,
-                        // fall back to the System-specific user agent.
+                    } catch (Exception e) {
+                        // Some custom ROMs may fail to get a user agent. If that happens, return
+                        // the Android system user agent.
                         userAgent = DEFAULT_USER_AGENT;
                     }
                     sUserAgent = userAgent;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
index 7d310976..aa13cdf2 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
@@ -82,7 +82,7 @@ public static void makeVastTrackingHttpRequest(
             if (vastTracker.isTracked() && !vastTracker.isRepeatable()) {
                 continue;
             }
-            trackers.add(vastTracker.getTrackingUrl());
+            trackers.add(vastTracker.getContent());
             vastTracker.setTracked();
         }
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
index 122787a0..3e4f0c17 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
@@ -17,30 +17,9 @@
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 
 abstract class BaseInterstitialActivity extends Activity {
-    protected AdReport mAdReport;
-
-    enum JavaScriptWebViewCallbacks {
-        // The ad server appends these functions to the MRAID javascript to help with third party
-        // impression tracking.
-        WEB_VIEW_DID_APPEAR("webviewDidAppear();"),
-        WEB_VIEW_DID_CLOSE("webviewDidClose();");
-
-        private String mJavascript;
-        private JavaScriptWebViewCallbacks(String javascript) {
-            mJavascript = javascript;
-        }
-
-        protected String getJavascript() {
-            return mJavascript;
-        }
-
-        protected String getUrl() {
-            return "javascript:" + mJavascript;
-        }
-    }
-
-    private CloseableLayout mCloseableLayout;
-    private Long mBroadcastIdentifier;
+    @Nullable protected AdReport mAdReport;
+    @Nullable private CloseableLayout mCloseableLayout;
+    @Nullable private Long mBroadcastIdentifier;
 
     public abstract View getAdView();
 
@@ -71,20 +50,32 @@ public void onClose() {
 
     @Override
     protected void onDestroy() {
-        mCloseableLayout.removeAllViews();
+        if (mCloseableLayout != null) {
+            mCloseableLayout.removeAllViews();
+        }
         super.onDestroy();
     }
 
+    @Nullable
+    protected CloseableLayout getCloseableLayout() {
+        return mCloseableLayout;
+    }
+
+    @Nullable
     Long getBroadcastIdentifier() {
         return mBroadcastIdentifier;
     }
 
     protected void showInterstitialCloseButton() {
-        mCloseableLayout.setCloseVisible(true);
+        if (mCloseableLayout != null) {
+            mCloseableLayout.setCloseVisible(true);
+        }
     }
 
     protected void hideInterstitialCloseButton() {
-        mCloseableLayout.setCloseVisible(false);
+        if (mCloseableLayout != null) {
+            mCloseableLayout.setCloseVisible(false);
+        }
     }
 
     protected static Long getBroadcastIdentifierFromIntent(Intent intent) {
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
index 22e62819..55ec4bb1 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
@@ -13,7 +13,7 @@
  * At runtime, the MoPub SDK will find and instantiate a CustomEventInterstitial subclass as needed
  * and invoke its loadInterstitial() method.
  */
-public abstract class CustomEventInterstitial {
+public abstract class CustomEventInterstitial implements Interstitial {
     
     /*
      * When the MoPub SDK receives a response indicating it should load a custom event, it will send
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
index 47feb16c..73c57c5c 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
@@ -31,6 +31,7 @@
     private Context mContext;
     private Map<String, Object> mLocalExtras;
     private Map<String, String> mServerExtras;
+    private long mBroadcastIdentifier;
     private final Handler mHandler;
     private final Runnable mTimeout;
 
@@ -42,6 +43,7 @@ public CustomEventInterstitialAdapter(@NonNull final MoPubInterstitial moPubInte
         Preconditions.checkNotNull(serverExtras);
         mHandler = new Handler();
         mMoPubInterstitial = moPubInterstitial;
+        mBroadcastIdentifier = broadcastIdentifier;
         mContext = mMoPubInterstitial.getActivity();
         mTimeout = new Runnable() {
             @Override
@@ -118,6 +120,11 @@ void invalidate() {
         mServerExtras = null;
         mLocalExtras = null;
         mCustomEventInterstitialAdapterListener = null;
+        final WebViewCacheService.Config config =
+                WebViewCacheService.popWebViewConfig(mBroadcastIdentifier);
+        if (config != null) {
+            config.getWebView().destroy();
+        }
         mInvalidated = true;
     }
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
index f0643055..370b2fe0 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
@@ -31,7 +31,8 @@ protected void extractExtras(Map<String, String> serverExtras) {
 
     @Override
     protected void preRenderHtml(CustomEventInterstitialListener customEventInterstitialListener) {
-        MoPubActivity.preRenderHtml(mContext, mAdReport, customEventInterstitialListener, mHtmlData);
+        MoPubActivity.preRenderHtml(this, mContext, mAdReport, customEventInterstitialListener, mHtmlData,
+                mIsScrollable, mRedirectUrl, mClickthroughUrl, mBroadcastIdentifier);
     }
 
     @Override
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
index 0c5bfb63..03921c02 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
@@ -4,6 +4,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
+import android.support.annotation.Nullable;
 import android.util.Log;
 import android.view.View;
 import android.webkit.WebView;
@@ -12,6 +13,8 @@
 import com.mopub.common.AdReport;
 import com.mopub.common.CreativeOrientation;
 import com.mopub.common.DataKeys;
+import com.mopub.common.ExternalViewabilitySessionManager;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.DeviceUtils;
 import com.mopub.mobileads.factories.HtmlInterstitialWebViewFactory;
 
@@ -24,19 +27,20 @@
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
 import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
+import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
 import static com.mopub.mobileads.HtmlWebViewClient.MOPUB_FAIL_LOAD;
 import static com.mopub.mobileads.HtmlWebViewClient.MOPUB_FINISH_LOAD;
 
 public class MoPubActivity extends BaseInterstitialActivity {
-    private HtmlInterstitialWebView mHtmlInterstitialWebView;
+    @Nullable private HtmlInterstitialWebView mHtmlInterstitialWebView;
+    @Nullable private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
 
     public static void start(Context context, String htmlData, AdReport adReport,
             boolean isScrollable, String redirectUrl, String clickthroughUrl,
@@ -65,16 +69,23 @@ static Intent createIntent(Context context,
         return intent;
     }
 
-    static void preRenderHtml(final Context context, final AdReport adReport,
+    static void preRenderHtml(final Interstitial baseInterstitial,
+            final Context context,
+            final AdReport adReport,
             final CustomEventInterstitialListener customEventInterstitialListener,
-            final String htmlData) {
-        final HtmlInterstitialWebView dummyWebView = HtmlInterstitialWebViewFactory.create(context,
-                adReport, customEventInterstitialListener, false, null, null);
-
-        dummyWebView.enablePlugins(false);
-        dummyWebView.enableJavascriptCaching();
-
-        dummyWebView.setWebViewClient(new WebViewClient() {
+            final String htmlData,
+            final boolean isScrollable,
+            final String redirectUrl,
+            final String clickthroughUrl,
+            final long broadcastIdentifier) {
+        final HtmlInterstitialWebView htmlInterstitialWebView = HtmlInterstitialWebViewFactory.create(
+                context.getApplicationContext(), adReport, customEventInterstitialListener,
+                isScrollable, redirectUrl, clickthroughUrl);
+
+        htmlInterstitialWebView.enablePlugins(false);
+        htmlInterstitialWebView.enableJavascriptCaching();
+
+        htmlInterstitialWebView.setWebViewClient(new WebViewClient() {
             @Override
             public boolean shouldOverrideUrlLoading(WebView view, String url) {
                 if (MOPUB_FINISH_LOAD.equals(url)) {
@@ -86,7 +97,14 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
                 return true;
             }
         });
-        dummyWebView.loadHtmlResponse(htmlData);
+
+        final ExternalViewabilitySessionManager externalViewabilitySessionManager =
+                new ExternalViewabilitySessionManager(context);
+        externalViewabilitySessionManager.createDisplaySession(context, htmlInterstitialWebView, true);
+
+        htmlInterstitialWebView.loadHtmlResponse(htmlData);
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, baseInterstitial,
+                htmlInterstitialWebView, externalViewabilitySessionManager);
     }
 
     @Override
@@ -97,9 +115,33 @@ public View getAdView() {
         String clickthroughUrl = intent.getStringExtra(CLICKTHROUGH_URL_KEY);
         String htmlResponse = intent.getStringExtra(HTML_RESPONSE_BODY_KEY);
 
-        mHtmlInterstitialWebView = HtmlInterstitialWebViewFactory.create(getApplicationContext(), mAdReport, new BroadcastingInterstitialListener(), isScrollable, redirectUrl, clickthroughUrl);
-        mHtmlInterstitialWebView.loadHtmlResponse(htmlResponse);
+        final Long broadcastIdentifier = getBroadcastIdentifier();
+        if (broadcastIdentifier != null) {
+            // If a cache hit happens, the content is already loaded; therefore, this re-initializes
+            // the WebView with a new {@link BroadcastingInterstitialListener}, enables plugins,
+            // and fires the impression tracker.
+            final WebViewCacheService.Config config =
+                    WebViewCacheService.popWebViewConfig(broadcastIdentifier);
+            if (config != null && config.getWebView() instanceof HtmlInterstitialWebView) {
+                mHtmlInterstitialWebView = (HtmlInterstitialWebView) config.getWebView();
+                mHtmlInterstitialWebView.init(new BroadcastingInterstitialListener(), isScrollable,
+                        redirectUrl, clickthroughUrl, mAdReport != null ? mAdReport.getDspCreativeId(): null);
+                mHtmlInterstitialWebView.enablePlugins(true);
+                mHtmlInterstitialWebView.loadUrl(WEB_VIEW_DID_APPEAR.getUrl());
+
+                mExternalViewabilitySessionManager = config.getViewabilityManager();
+
+                return mHtmlInterstitialWebView;
+            }
+        }
 
+        MoPubLog.d("WebView cache miss. Recreating the WebView.");
+        mHtmlInterstitialWebView = HtmlInterstitialWebViewFactory.create(getApplicationContext(),
+                mAdReport, new BroadcastingInterstitialListener(), isScrollable, redirectUrl, clickthroughUrl);
+        
+        mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(this);
+        mExternalViewabilitySessionManager.createDisplaySession(this, mHtmlInterstitialWebView, true);
+        mHtmlInterstitialWebView.loadHtmlResponse(htmlResponse);
         return mHtmlInterstitialWebView;
     }
 
@@ -116,13 +158,23 @@ protected void onCreate(Bundle savedInstanceState) {
             requestedOrientation = (CreativeOrientation) orientationExtra;
         }
         DeviceUtils.lockOrientation(this, requestedOrientation);
+
+        if (mExternalViewabilitySessionManager != null) {
+            mExternalViewabilitySessionManager.startDeferredDisplaySession(this);
+        }
         broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_SHOW);
     }
 
     @Override
     protected void onDestroy() {
-        mHtmlInterstitialWebView.loadUrl(WEB_VIEW_DID_CLOSE.getUrl());
-        mHtmlInterstitialWebView.destroy();
+        if (mExternalViewabilitySessionManager != null) {
+            mExternalViewabilitySessionManager.endDisplaySession();
+            mExternalViewabilitySessionManager = null;
+        }
+        if (mHtmlInterstitialWebView != null) {
+            mHtmlInterstitialWebView.loadUrl(WEB_VIEW_DID_CLOSE.getUrl());
+            mHtmlInterstitialWebView.destroy();
+        }
         broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_DISMISS);
         super.onDestroy();
     }
@@ -130,7 +182,9 @@ protected void onDestroy() {
     class BroadcastingInterstitialListener implements CustomEventInterstitialListener {
         @Override
         public void onInterstitialLoaded() {
-            mHtmlInterstitialWebView.loadUrl(WEB_VIEW_DID_APPEAR.getUrl());
+            if (mHtmlInterstitialWebView != null) {
+                mHtmlInterstitialWebView.loadUrl(WEB_VIEW_DID_APPEAR.getUrl());
+            }
         }
 
         @Override
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
index 92bcde01..fe5a4a0a 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
@@ -3,6 +3,7 @@
 import android.app.Activity;
 import android.content.Context;
 import android.location.Location;
+import android.os.Handler;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
@@ -15,12 +16,14 @@
 
 import java.util.Map;
 
+import static com.mopub.common.Constants.AD_EXPIRATION_DELAY;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
+import static com.mopub.mobileads.MoPubErrorCode.EXPIRED;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.DESTROYED;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.IDLE;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.LOADING;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.READY;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.SHOWING;
-import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.DESTROYED;
 
 public class MoPubInterstitial implements CustomEventInterstitialAdapter.CustomEventInterstitialAdapterListener {
     @VisibleForTesting
@@ -55,7 +58,9 @@
     @Nullable private CustomEventInterstitialAdapter mCustomEventInterstitialAdapter;
     @Nullable private InterstitialAdListener mInterstitialAdListener;
     @NonNull private Activity mActivity;
-    @NonNull private InterstitialState mCurrentInterstitialState;
+    @NonNull private Handler mHandler;
+    @NonNull private final Runnable mAdExpiration;
+    @NonNull private volatile InterstitialState mCurrentInterstitialState;
 
     public interface InterstitialAdListener {
         void onInterstitialLoaded(MoPubInterstitial interstitial);
@@ -72,6 +77,21 @@ public MoPubInterstitial(@NonNull final Activity activity, @NonNull final String
         mInterstitialView.setAdUnitId(adUnitId);
 
         mCurrentInterstitialState = IDLE;
+
+        mHandler = new Handler();
+        mAdExpiration = new Runnable() {
+            @Override
+            public void run() {
+                MoPubLog.d("Expiring unused Interstitial ad.");
+                attemptStateTransition(IDLE, true);
+                if (!SHOWING.equals(mCurrentInterstitialState) &&
+                        !DESTROYED.equals(mCurrentInterstitialState)) {
+                    // double-check the state in case the runnable fires right after the state
+                    // transition but before it's cancelled
+                    mInterstitialView.adFailed(EXPIRED);
+                }
+            }
+        };
     }
 
     private boolean attemptStateTransition(@NonNull final InterstitialState endState) {
@@ -83,14 +103,14 @@ private boolean attemptStateTransition(@NonNull final InterstitialState endState
      * Other methods should not be modifying mCurrentInterstitialState.
      *
      * @param endState     The desired end state.
-     * @param forceRefresh Whether or not this is part of a forceRefresh transition. Force
-     *                     refresh can happen from IDLE, LOADING, or READY. It will ignore
+     * @param force Whether or not this is part of a force transition. Force transitions
+     *                     can happen from IDLE, LOADING, or READY. It will ignore
      *                     the currently loading or loaded ad and attempt to load another.
      * @return {@code true} if a state change happened, {@code false} if no state change happened.
      */
     @VisibleForTesting
-    boolean attemptStateTransition(@NonNull final InterstitialState endState,
-            boolean forceRefresh) {
+    synchronized boolean attemptStateTransition(@NonNull final InterstitialState endState,
+            boolean force) {
         Preconditions.checkNotNull(endState);
 
         final InterstitialState startState = mCurrentInterstitialState;
@@ -110,7 +130,7 @@ boolean attemptStateTransition(@NonNull final InterstitialState endState,
                         // Going from IDLE to LOADING is the usual load case
                         invalidateInterstitialAdapter();
                         mCurrentInterstitialState = LOADING;
-                        if (forceRefresh) {
+                        if (force) {
                             // Force-load means a pub-initiated force refresh.
                             mInterstitialView.forceRefresh();
                         } else {
@@ -137,7 +157,7 @@ boolean attemptStateTransition(@NonNull final InterstitialState endState,
                         mCurrentInterstitialState = IDLE;
                         return true;
                     case LOADING:
-                        if (!forceRefresh) {
+                        if (!force) {
                             // Cannot load more than one interstitial at a time
                             MoPubLog.d("Already loading an interstitial.");
                         }
@@ -145,6 +165,11 @@ boolean attemptStateTransition(@NonNull final InterstitialState endState,
                     case READY:
                         // This is the usual load finished transition
                         mCurrentInterstitialState = READY;
+                        // Expire MoPub ads to synchronize with MoPub Ad Server tracking window
+                        if (AdTypeTranslator.CustomEventType
+                                .isMoPubSpecific(mInterstitialView.getCustomEventClassName())) {
+                            mHandler.postDelayed(mAdExpiration, AD_EXPIRATION_DELAY);
+                        }
                         return true;
                     case SHOWING:
                         MoPubLog.d("Interstitial is not ready to be shown yet.");
@@ -158,8 +183,8 @@ boolean attemptStateTransition(@NonNull final InterstitialState endState,
             case READY:
                 switch (endState) {
                     case IDLE:
-                        if (forceRefresh) {
-                            // This happens on a force refresh
+                        if (force) {
+                            // This happens on a force refresh or an ad expiration
                             invalidateInterstitialAdapter();
                             mCurrentInterstitialState = IDLE;
                             return true;
@@ -177,6 +202,7 @@ boolean attemptStateTransition(@NonNull final InterstitialState endState,
                         // This is the usual transition from ready to showing
                         showCustomEventInterstitial();
                         mCurrentInterstitialState = SHOWING;
+                        mHandler.removeCallbacks(mAdExpiration);
                         return true;
                     case DESTROYED:
                         setInterstitialStateDestroyed();
@@ -187,7 +213,7 @@ boolean attemptStateTransition(@NonNull final InterstitialState endState,
             case SHOWING:
                 switch(endState) {
                     case IDLE:
-                        if (forceRefresh) {
+                        if (force) {
                             MoPubLog.d("Cannot force refresh while showing an interstitial.");
                             return false;
                         }
@@ -196,7 +222,7 @@ boolean attemptStateTransition(@NonNull final InterstitialState endState,
                         mCurrentInterstitialState = IDLE;
                         return true;
                     case LOADING:
-                        if (!forceRefresh) {
+                        if (!force) {
                             MoPubLog.d("Interstitial already showing. Not loading another.");
                         }
                         return false;
@@ -225,6 +251,7 @@ private void setInterstitialStateDestroyed() {
         invalidateInterstitialAdapter();
         mInterstitialView.setBannerAdListener(null);
         mInterstitialView.destroy();
+        mHandler.removeCallbacks(mAdExpiration);
         mCurrentInterstitialState = DESTROYED;
     }
 
@@ -398,6 +425,10 @@ public MoPubInterstitialView(Context context) {
             setAutorefreshEnabled(false);
         }
 
+        @Nullable String getCustomEventClassName() {
+            return mAdViewController.getCustomEventClassName();
+        }
+
         @Override
         public AdFormat getAdFormat() {
             return AdFormat.INTERSTITIAL;
@@ -445,6 +476,12 @@ protected void adFailed(MoPubErrorCode errorCode) {
         }
     }
 
+    @VisibleForTesting
+    @Deprecated
+    void setHandler(@NonNull final Handler handler) {
+        mHandler = handler;
+    }
+
     @VisibleForTesting
     @Deprecated
     void setInterstitialView(@NonNull MoPubInterstitialView interstitialView) {
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
index 7431b47d..a2bee5e7 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
@@ -3,8 +3,6 @@
 import android.content.ActivityNotFoundException;
 import android.content.Context;
 import android.content.Intent;
-import android.os.Build.VERSION;
-import android.os.Build.VERSION_CODES;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -12,16 +10,19 @@
 import android.view.View;
 import android.view.WindowManager;
 import android.webkit.WebView;
-import android.webkit.WebViewClient;
 
 import com.mopub.common.AdReport;
 import com.mopub.common.Constants;
+import com.mopub.common.ExternalViewabilitySessionManager;
+import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+import com.mopub.mraid.MraidBridge;
 import com.mopub.mraid.MraidController;
 import com.mopub.mraid.MraidController.MraidListener;
 import com.mopub.mraid.MraidController.UseCustomCloseListener;
+import com.mopub.mraid.MraidWebViewClient;
 import com.mopub.mraid.MraidWebViewDebugListener;
 import com.mopub.mraid.PlacementType;
 import com.mopub.network.Networking;
@@ -29,42 +30,63 @@
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
+import static com.mopub.mobileads.HtmlWebViewClient.MOPUB_FAIL_LOAD;
 
 public class MraidActivity extends BaseInterstitialActivity {
     @Nullable private MraidController mMraidController;
     @Nullable private MraidWebViewDebugListener mDebugListener;
+    @Nullable private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
 
-    public static void preRenderHtml(@NonNull final Context context,
+    public static void preRenderHtml(@NonNull final Interstitial mraidInterstitial,
+            @NonNull final Context context,
             @NonNull final CustomEventInterstitialListener customEventInterstitialListener,
-            @NonNull final String htmlData) {
-        preRenderHtml(customEventInterstitialListener, htmlData, new BaseWebView(context));
+            @Nullable final String htmlData,
+            @NonNull final Long broadcastIdentifier) {
+        Preconditions.checkNotNull(mraidInterstitial);
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(customEventInterstitialListener);
+        Preconditions.checkNotNull(broadcastIdentifier);
+
+        preRenderHtml(mraidInterstitial, customEventInterstitialListener, htmlData,
+                new MraidBridge.MraidWebView(context), broadcastIdentifier);
     }
 
     @VisibleForTesting
-    static void preRenderHtml(
+    static void preRenderHtml(@NonNull final Interstitial mraidInterstitial,
             @NonNull final CustomEventInterstitialListener customEventInterstitialListener,
-            @NonNull final String htmlData, @NonNull final BaseWebView dummyWebView) {
-        dummyWebView.enablePlugins(false);
-        dummyWebView.enableJavascriptCaching();
+            @Nullable final String htmlData,
+            @NonNull final BaseWebView mraidWebView,
+            @NonNull final Long broadcastIdentifier) {
+        Preconditions.checkNotNull(mraidInterstitial);
+        Preconditions.checkNotNull(customEventInterstitialListener);
+        Preconditions.checkNotNull(mraidWebView);
+        Preconditions.checkNotNull(broadcastIdentifier);
 
-        dummyWebView.setWebViewClient(new WebViewClient() {
-            @Override
-            public void onPageFinished(final WebView view, final String url) {
-                customEventInterstitialListener.onInterstitialLoaded();
-            }
+        mraidWebView.enablePlugins(false);
+        mraidWebView.enableJavascriptCaching();
 
+        mraidWebView.setWebViewClient(new MraidWebViewClient() {
             @Override
             public boolean shouldOverrideUrlLoading(WebView view, String url) {
+                if (MOPUB_FAIL_LOAD.equals(url)) {
+                    customEventInterstitialListener.onInterstitialFailed(
+                            MoPubErrorCode.MRAID_LOAD_ERROR);
+                }
                 return true;
             }
 
+            @Override
+            public void onPageFinished(final WebView view, final String url) {
+                customEventInterstitialListener.onInterstitialLoaded();
+            }
+
             @Override
             public void onReceivedError(final WebView view, final int errorCode,
                     final String description,
@@ -75,11 +97,17 @@ public void onReceivedError(final WebView view, final int errorCode,
             }
         });
 
-        dummyWebView.loadDataWithBaseURL(Networking.getBaseUrlScheme() + "://" + Constants.HOST + "/",
+        final Context context = mraidWebView.getContext();
+        final ExternalViewabilitySessionManager externalViewabilitySessionManager =
+                new ExternalViewabilitySessionManager(context);
+        externalViewabilitySessionManager.createDisplaySession(context, mraidWebView, true);
+
+        mraidWebView.loadDataWithBaseURL(Networking.getBaseUrlScheme() + "://" + Constants.HOST + "/",
                 htmlData, "text/html", "UTF-8", null);
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, mraidInterstitial, mraidWebView, externalViewabilitySessionManager);
     }
 
-    public static void start(@NonNull Context context, @Nullable AdReport adreport, @NonNull String htmlData, long broadcastIdentifier) {
+    public static void start(@NonNull Context context, @Nullable AdReport adreport, @Nullable String htmlData, long broadcastIdentifier) {
         Intent intent = createIntent(context, adreport, htmlData, broadcastIdentifier);
         try {
             context.startActivity(intent);
@@ -90,7 +118,7 @@ public static void start(@NonNull Context context, @Nullable AdReport adreport,
 
     @VisibleForTesting
     protected static Intent createIntent(@NonNull Context context, @Nullable AdReport adReport,
-            @NonNull String htmlData, long broadcastIdentifier) {
+            @Nullable String htmlData, long broadcastIdentifier) {
         Intent intent = new Intent(context, MraidActivity.class);
         intent.putExtra(HTML_RESPONSE_BODY_KEY, htmlData);
         intent.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
@@ -123,8 +151,10 @@ public void onLoaded(View view) {
             @Override
             public void onFailedToLoad() {
                 MoPubLog.d("MraidActivity failed to load. Finishing the activity");
-                broadcastAction(MraidActivity.this, getBroadcastIdentifier(),
-                        ACTION_INTERSTITIAL_FAIL);
+                if (getBroadcastIdentifier() != null) {
+                    broadcastAction(MraidActivity.this, getBroadcastIdentifier(),
+                            ACTION_INTERSTITIAL_FAIL);
+                }
                 finish();
             }
 
@@ -140,8 +170,10 @@ public void onExpand() {
 
             @Override
             public void onOpen() {
-                broadcastAction(MraidActivity.this, getBroadcastIdentifier(),
-                        ACTION_INTERSTITIAL_CLICK);
+                if (getBroadcastIdentifier()!= null) {
+                    broadcastAction(MraidActivity.this, getBroadcastIdentifier(),
+                            ACTION_INTERSTITIAL_CLICK);
+                }
             }
         });
 
@@ -157,20 +189,37 @@ public void useCustomCloseChanged(boolean useCustomClose) {
             }
         });
 
-        mMraidController.loadContent(htmlData);
+        mMraidController.fillContent(getBroadcastIdentifier(), htmlData,
+                new MraidController.MraidWebViewCacheListener() {
+                    @Override
+                    public void onReady(@NonNull final MraidBridge.MraidWebView webView,
+                            @Nullable final ExternalViewabilitySessionManager viewabilityManager) {
+                        if (viewabilityManager != null) {
+                            mExternalViewabilitySessionManager = viewabilityManager;
+                        } else {
+                            mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(MraidActivity.this);
+                            mExternalViewabilitySessionManager.createDisplaySession(MraidActivity.this, webView, true);
+                        }
+                    }
+                });
+
         return mMraidController.getAdContainer();
     }
 
     @Override
     public void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_SHOW);
 
-        if (VERSION.SDK_INT >= VERSION_CODES.ICE_CREAM_SANDWICH) {
-            getWindow().setFlags(
-                    WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,
-                    WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
+        if (mExternalViewabilitySessionManager != null) {
+            mExternalViewabilitySessionManager.startDeferredDisplaySession(this);
         }
+        if (getBroadcastIdentifier()!= null) {
+            broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_SHOW);
+        }
+
+        getWindow().setFlags(
+                WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,
+                WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
     }
 
     @Override
@@ -191,11 +240,17 @@ protected void onResume() {
 
     @Override
     protected void onDestroy() {
+        if (mExternalViewabilitySessionManager != null) {
+            mExternalViewabilitySessionManager.endDisplaySession();
+            mExternalViewabilitySessionManager = null;
+        }
         if (mMraidController != null) {
             mMraidController.destroy();
         }
 
-        broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_DISMISS);
+        if (getBroadcastIdentifier()!= null) {
+            broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_DISMISS);
+        }
         super.onDestroy();
     }
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
index aa84f691..2bc42b13 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
@@ -3,6 +3,7 @@
 import android.content.Context;
 
 import com.mopub.common.AdReport;
+import com.mopub.common.ExternalViewabilitySessionManager;
 import com.mopub.common.logging.MoPubLog;
 
 import java.util.Map;
@@ -17,6 +18,7 @@
     protected Context mContext;
     protected AdReport mAdReport;
     protected long mBroadcastIdentifier;
+    protected ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
 
     abstract protected void extractExtras(Map<String, String> serverExtras);
     abstract protected void preRenderHtml(CustomEventInterstitialListener customEventInterstitialListener);
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
index 293336d2..89fcd4ec 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
@@ -1,9 +1,17 @@
 package com.mopub.mobileads;
 
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
 import com.mopub.common.CacheService;
 import com.mopub.common.DataKeys;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Json;
 import com.mopub.mobileads.factories.VastManagerFactory;
 
+import org.json.JSONException;
+import org.json.JSONObject;
+
 import java.util.Map;
 
 class VastVideoInterstitial extends ResponseBodyInterstitial implements VastManager.VastManagerListener {
@@ -11,10 +19,32 @@
     private String mVastResponse;
     private VastManager mVastManager;
     private VastVideoConfig mVastVideoConfig;
+    @Nullable private JSONObject mVideoTrackers;
+    @Nullable private Map<String, String> mExternalViewabilityTrackers;
 
     @Override
     protected void extractExtras(Map<String, String> serverExtras) {
         mVastResponse = serverExtras.get(DataKeys.HTML_RESPONSE_BODY_KEY);
+
+        final String externalViewabilityTrackers =
+                serverExtras.get(DataKeys.EXTERNAL_VIDEO_VIEWABILITY_TRACKERS_KEY);
+        try {
+            mExternalViewabilityTrackers = Json.jsonStringToMap(externalViewabilityTrackers);
+        } catch (JSONException e) {
+            MoPubLog.d("Failed to parse video viewability trackers to JSON: " +
+                    externalViewabilityTrackers);
+        }
+
+        final String videoTrackers = serverExtras.get(DataKeys.VIDEO_TRACKERS_KEY);
+        if (TextUtils.isEmpty(videoTrackers)) {
+            return;
+        }
+        try {
+            mVideoTrackers = new JSONObject(videoTrackers);
+        } catch (JSONException e) {
+            MoPubLog.d("Failed to parse video trackers to JSON: " + videoTrackers, e);
+            mVideoTrackers = null;
+        }
     }
 
     @Override
@@ -52,11 +82,14 @@ public void onInvalidate() {
     @Override
     public void onVastVideoConfigurationPrepared(final VastVideoConfig vastVideoConfig) {
         if (vastVideoConfig == null) {
-            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.VIDEO_DOWNLOAD_ERROR);
+            mCustomEventInterstitialListener
+                    .onInterstitialFailed(MoPubErrorCode.VIDEO_DOWNLOAD_ERROR);
             return;
         }
 
         mVastVideoConfig = vastVideoConfig;
+        mVastVideoConfig.addVideoTrackers(mVideoTrackers);
+        mVastVideoConfig.addExternalViewabilityTrackers(mExternalViewabilityTrackers);
         mCustomEventInterstitialListener.onInterstitialLoaded();
     }
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
index f7e1ae39..34ecd599 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
@@ -2,6 +2,7 @@
 
 
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import com.mopub.mobileads.MraidActivity;
 import com.mopub.mobileads.ResponseBodyInterstitial;
@@ -11,7 +12,7 @@
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 
 class MraidInterstitial extends ResponseBodyInterstitial {
-    private String mHtmlData;
+    @Nullable protected String mHtmlData;
 
     @Override
     protected void extractExtras(Map<String, String> serverExtras) {
@@ -21,7 +22,8 @@ protected void extractExtras(Map<String, String> serverExtras) {
     @Override
     protected void preRenderHtml(@NonNull CustomEventInterstitialListener
             customEventInterstitialListener) {
-        MraidActivity.preRenderHtml(mContext, customEventInterstitialListener, mHtmlData);
+        MraidActivity.preRenderHtml(this, mContext, customEventInterstitialListener, mHtmlData,
+                mBroadcastIdentifier);
     }
 
     @Override
diff --git a/mopub-sdk/mopub-sdk-native-static/build.gradle b/mopub-sdk/mopub-sdk-native-static/build.gradle
index 26111f70..ba206ef6 100644
--- a/mopub-sdk/mopub-sdk-native-static/build.gradle
+++ b/mopub-sdk/mopub-sdk-native-static/build.gradle
@@ -2,7 +2,7 @@ apply from: '../shared-build.gradle'
 
 dependencies {
     compile project(':mopub-sdk:mopub-sdk-base')
-    compile 'com.android.support:recyclerview-v7:23.1.1'
+    compile 'com.android.support:recyclerview-v7:26.1.0'
 }
 
 project.description = 'MoPub Android SDK - Native Static'
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdapterHelper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdapterHelper.java
index 21206b09..9318e2ce 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdapterHelper.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdapterHelper.java
@@ -55,11 +55,18 @@ public View getAdView(@Nullable final View convertView,
                 convertView,
                 parent,
                 context,
-                nativeAd,
-                viewBinder
+                nativeAd
         );
     }
 
+    @Deprecated
+    @NonNull
+    public View getAdView(@Nullable final View convertView,
+            @Nullable final ViewGroup parent,
+            @Nullable final NativeAd nativeAd) {
+        return getAdView(convertView, parent, nativeAd, null);
+    }
+
     // Total number of content rows + ad rows
     @Deprecated
     public int shiftedCount(final int originalCount) {
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java
index 6f84021f..6931c414 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java
@@ -8,6 +8,7 @@
  */
 public interface ImpressionInterface {
     int getImpressionMinPercentageViewed();
+    Integer getImpressionMinVisiblePx();
     int getImpressionMinTimeViewed();
     void recordImpression(View view);
     boolean isImpressionRecorded();
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java
index d7775eab..d4989636 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java
@@ -117,7 +117,8 @@ public void addView(final View view, @NonNull final ImpressionInterface impressi
         }
 
         mTrackedViews.put(view, impressionInterface);
-        mVisibilityTracker.addView(view, impressionInterface.getImpressionMinPercentageViewed());
+        mVisibilityTracker.addView(view, impressionInterface.getImpressionMinPercentageViewed(),
+                impressionInterface.getImpressionMinVisiblePx());
     }
 
     public void removeView(final View view) {
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
index 18ec136c..c1aaa849 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
@@ -342,7 +342,7 @@ public View getView(final int position, final View view, final ViewGroup viewGro
                     mStreamAdPlacer.getOriginalPosition(position), view, viewGroup);
         }
         mViewPositionMap.put(resultView, position);
-        mVisibilityTracker.addView(resultView, 0);
+        mVisibilityTracker.addView(resultView, 0, null);
 
         return resultView;
     }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
index 9d31f0d3..68209727 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
@@ -5,6 +5,7 @@
 import android.support.annotation.Nullable;
 import android.view.View;
 
+import com.mopub.common.DataKeys;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.nativeads.NativeImageHelper.ImageListener;
@@ -46,6 +47,36 @@ protected void loadNativeAd(@NonNull final Context context,
                         new NativeClickHandler(context),
                         customEventNativeListener);
 
+        if (serverExtras.containsKey(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)) {
+            try {
+                moPubStaticNativeAd.setImpressionMinPercentageViewed(Integer.parseInt(
+                        serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)));
+            } catch (final NumberFormatException e) {
+                MoPubLog.d("Unable to format min visible percent: " +
+                        serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT));
+            }
+        }
+
+        if (serverExtras.containsKey(DataKeys.IMPRESSION_VISIBLE_MS)) {
+            try {
+                moPubStaticNativeAd.setImpressionMinTimeViewed(
+                        Integer.parseInt(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)));
+            } catch (final NumberFormatException e) {
+                MoPubLog.d("Unable to format min time: " +
+                        serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS));
+            }
+        }
+
+        if (serverExtras.containsKey(DataKeys.IMPRESSION_MIN_VISIBLE_PX)) {
+            try {
+                moPubStaticNativeAd.setImpressionMinVisiblePx(Integer.parseInt(
+                        serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX)));
+            } catch (final NumberFormatException e) {
+                MoPubLog.d("Unable to format min visible px: " +
+                        serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX));
+            }
+        }
+
         try {
             moPubStaticNativeAd.loadAd();
         } catch (IllegalArgumentException e) {
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
index 21d2e3d2..7afb0337 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
@@ -316,7 +316,6 @@ public void refreshAds(@NonNull String adUnitId,
             loadAds(adUnitId, requestParameters);
         } else {
             MoPubLog.w("This LayoutManager can't be refreshed.");
-            return;
         }
     }
 
@@ -420,7 +419,7 @@ public void onBindViewHolder(final RecyclerView.ViewHolder holder, final int pos
         }
 
         mViewPositionMap.put(holder.itemView, position);
-        mVisibilityTracker.addView(holder.itemView, 0);
+        mVisibilityTracker.addView(holder.itemView, 0, null);
 
         //noinspection unchecked
         mOriginalAdapter.onBindViewHolder(holder, mStreamAdPlacer.getOriginalPosition(position));
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java
index afa9e583..2c13abdd 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java
@@ -32,8 +32,8 @@
  * When you have a {@link NativeAd} instance and wish to show a view you should:
  *
  * 1. Call {@link #createAdView(Context, ViewGroup)} to inflate a {@link View} that can show this ad.
- * 2. Call {@link #renderAdView(View)} with a compatible {@link View} to render the ad data into the view.
- * 3. Just before the ad is shown to the user, call {@link #prepare(View)}.
+ * 2. Just before the ad is shown to the user, call {@link #prepare(View)}.
+ * 3. Call {@link #renderAdView(View)} with a compatible {@link View} to render the ad data into the view.
  * 4. When the ad view is no longer shown to the user, call {@link #clear(View)}. You can later
  *    call {@link #prepare(View)} again if the ad will be shown to users.
  * 5. When the ad will never be shown again, call {@link #destroy()}.
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java
index 7d2b43be..92a6e2d5 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java
@@ -11,6 +11,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import static com.mopub.common.Constants.AD_EXPIRATION_DELAY;
 import static com.mopub.nativeads.MoPubNative.MoPubNativeNetworkListener;
 
 /**
@@ -35,7 +36,7 @@
      */
     private static final int CACHE_LIMIT = 1;
 
-    private static final int EXPIRATION_TIME_MILLISECONDS = 15 * 60 * 1000; // 15 minutes
+    private static final int EXPIRATION_TIME_MILLISECONDS = AD_EXPIRATION_DELAY;
     private static final int MAXIMUM_RETRY_TIME_MILLISECONDS = 5 * 60 * 1000; // 5 minutes.
     @VisibleForTesting static final int[] RETRY_TIME_ARRAY_MILLISECONDS = new int[]{1000, 3000, 5000, 25000, 60000, MAXIMUM_RETRY_TIME_MILLISECONDS};
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
index 0b275866..50db633a 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
@@ -6,7 +6,6 @@
 import android.view.View;
 import android.view.ViewGroup;
 
-import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 
@@ -38,17 +37,14 @@ private NativeAdViewHelper() {
     static View getAdView(@Nullable View convertView,
             @Nullable final ViewGroup parent,
             @NonNull final Context context,
-            @Nullable final NativeAd nativeAd,
-            @Nullable final ViewBinder viewBinder) {
-
-        Preconditions.NoThrow.checkNotNull(viewBinder, "ViewBinder is null.");
+            @Nullable final NativeAd nativeAd) {
 
         if (convertView != null) {
-            clearNativeAd(context, convertView);
+            clearNativeAd(convertView);
         }
 
-        if (nativeAd == null || nativeAd.isDestroyed() || viewBinder == null) {
-            MoPubLog.d("NativeAd or viewBinder null or invalid. Returning empty view");
+        if (nativeAd == null || nativeAd.isDestroyed()) {
+            MoPubLog.d("NativeAd null or invalid. Returning empty view");
             // Only create a view if one hasn't been created already
             if (convertView == null || !ViewType.EMPTY.equals(convertView.getTag())) {
                 convertView = new View(context);
@@ -61,23 +57,21 @@ static View getAdView(@Nullable View convertView,
                 convertView = nativeAd.createAdView(context, parent);
                 convertView.setTag(ViewType.AD);
             }
-            prepareNativeAd(context, convertView, nativeAd);
+            prepareNativeAd(convertView, nativeAd);
             nativeAd.renderAdView(convertView);
         }
 
         return convertView;
     }
 
-    private static void clearNativeAd(@NonNull final Context context,
-            @NonNull final View view) {
+    private static void clearNativeAd(@NonNull final View view) {
         final NativeAd nativeAd = sNativeAdMap.get(view);
         if (nativeAd != null) {
             nativeAd.clear(view);
         }
     }
 
-    private static void prepareNativeAd(@NonNull final Context context,
-            @NonNull final View view,
+    private static void prepareNativeAd(@NonNull final View view,
             @NonNull final NativeAd nativeAd) {
         sNativeAdMap.put(view, nativeAd);
         nativeAd.prepare(view);
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java
index 9fa5d9ff..ff220440 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java
@@ -3,7 +3,6 @@
 import android.content.Context;
 import android.graphics.Color;
 import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 import android.view.Gravity;
 import android.view.View;
 import android.view.ViewGroup;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java
index e306e1fe..a2b90337 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java
@@ -14,7 +14,8 @@
  * This the base class for implementations of the static native ad format.
  */
 public abstract class StaticNativeAd extends BaseNativeAd implements ImpressionInterface, ClickInterface {
-    private static final int IMPRESSION_MIN_PERCENTAGE_VIEWED = 50;
+    private static final int DEFAULT_IMPRESSION_MIN_TIME_VIEWED_MS = 1000;
+    private static final int DEFAULT_IMPRESSION_MIN_PERCENTAGE_VIEWED = 50;
 
     static final double MIN_STAR_RATING = 0;
     static final double MAX_STAR_RATING = 5;
@@ -33,12 +34,16 @@
     // Impression logistics
     private boolean mImpressionRecorded;
     private int mImpressionMinTimeViewed;
+    private int mImpressionMinPercentageViewed;
+    private Integer mImpressionMinVisiblePx;
 
     // Extras
     @NonNull private final Map<String, Object> mExtras;
 
     public StaticNativeAd() {
-        mImpressionMinTimeViewed = 1000;
+        mImpressionMinTimeViewed = DEFAULT_IMPRESSION_MIN_TIME_VIEWED_MS;
+        mImpressionMinPercentageViewed = DEFAULT_IMPRESSION_MIN_PERCENTAGE_VIEWED;
+        mImpressionMinVisiblePx = null;
 
         mExtras = new HashMap<String, Object>();
     }
@@ -200,9 +205,47 @@ final public void addExtra(@NonNull final String key, @Nullable final Object val
         mExtras.put(key, value);
     }
 
+    /**
+     * Sets the minimum time for the ad to be on screen before impression trackers are fired.
+     * This int must be greater than 0.
+     *
+     * @param impressionMinTimeViewed Time in milliseconds (ignored if negative or 0).
+     */
     final public void setImpressionMinTimeViewed(final int impressionMinTimeViewed) {
-        if (impressionMinTimeViewed >= 0) {
+        if (impressionMinTimeViewed > 0) {
             mImpressionMinTimeViewed = impressionMinTimeViewed;
+        } else {
+            MoPubLog.d("Ignoring non-positive impressionMinTimeViewed: " + impressionMinTimeViewed);
+        }
+    }
+
+    /**
+     * Sets the minimum percent of the ad to be on screen before impression trackers are fired.
+     * This must be a percentage between 0 and 100, inclusive.
+     *
+     * @param impressionMinPercentageViewed Percent of ad (must be between 0 and 100 inclusive).
+     */
+    final public void setImpressionMinPercentageViewed(final int impressionMinPercentageViewed) {
+        if (impressionMinPercentageViewed >= 0 && impressionMinPercentageViewed <= 100) {
+            mImpressionMinPercentageViewed = impressionMinPercentageViewed;
+        } else {
+            MoPubLog.d("Ignoring impressionMinTimeViewed that's not a percent [0, 100]: " +
+                    impressionMinPercentageViewed);
+        }
+    }
+
+    /**
+     * Sets the minimum number of pixels of the ad to be on screen before impression trackers are
+     * fired. This must be an Integer greater than 0.
+     *
+     * @param impressionMinVisiblePx Number of pixels of an ad (ignored if negative or 0).
+     */
+    final public void setImpressionMinVisiblePx(@Nullable final Integer impressionMinVisiblePx) {
+        if (impressionMinVisiblePx != null && impressionMinVisiblePx > 0) {
+            mImpressionMinVisiblePx = impressionMinVisiblePx;
+        } else {
+            MoPubLog.d("Ignoring null or non-positive impressionMinVisiblePx: " +
+                    impressionMinVisiblePx);
         }
     }
 
@@ -233,7 +276,7 @@ public void recordImpression(@NonNull final View view) { }
      */
     @Override
     final public int getImpressionMinPercentageViewed() {
-        return IMPRESSION_MIN_PERCENTAGE_VIEWED;
+        return mImpressionMinPercentageViewed;
     }
 
     /**
@@ -246,6 +289,17 @@ final public int getImpressionMinTimeViewed() {
         return mImpressionMinTimeViewed;
     }
 
+    /**
+     * Returns the minimum viewable number of pixels of the ad that must be onscreen for it to be
+     * considered visible. This value, if present and positive will override the min percentage.
+     * See {@link StaticNativeAd#getImpressionMinTimeViewed()} for additional impression
+     * tracking considerations.
+     */
+    @Override
+    final public Integer getImpressionMinVisiblePx() {
+        return mImpressionMinVisiblePx;
+    }
+
     @Override
     final public boolean isImpressionRecorded() {
         return mImpressionRecorded;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java
index a13163c7..4b9df9ee 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java
@@ -1,10 +1,8 @@
 package com.mopub.nativeads;
 
 import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 
 import com.mopub.common.Preconditions;
-import com.mopub.common.Preconditions.NoThrow;
 
 import java.util.Collections;
 import java.util.HashMap;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java
index 39cbfc39..424e97d0 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.graphics.Rect;
 import android.os.Handler;
@@ -12,6 +11,7 @@
 
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Views;
 
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
@@ -54,6 +54,12 @@
         int mMaxInvisiblePercent;
         long mAccessOrder;
         View mRootView;
+
+        /**
+         * If this number is set, then use this as the minimum amount of the view seen before it is
+         * considered visible. This is in real pixels.
+         */
+        @Nullable Integer mMinVisiblePx;
     }
 
     // Views that are being tracked, mapped to the min viewable percentage
@@ -110,7 +116,7 @@ private void setViewTreeObserver(@Nullable final Context context, @Nullable fina
             return;
         }
 
-        final View rootView = getBestRootView(context, view);
+        final View rootView = Views.getTopmostView(context, view);
         if (rootView == null) {
             MoPubLog.d("Unable to set Visibility Tracker due to no available root view.");
             return;
@@ -127,24 +133,6 @@ private void setViewTreeObserver(@Nullable final Context context, @Nullable fina
         viewTreeObserver.addOnPreDrawListener(mOnPreDrawListener);
     }
 
-    @VisibleForTesting
-    @Nullable
-    static View getBestRootView(@Nullable final Context context, @Nullable final View view) {
-        if (context instanceof Activity) {
-            return ((Activity) context).getWindow().getDecorView();
-        }
-
-        if (view != null) {
-            final View rootView = view.getRootView();
-            if (rootView != null) {
-                final View rootContentView = rootView.findViewById(android.R.id.content);
-                return rootContentView != null ? rootContentView : rootView;
-            }
-        }
-
-        return null;
-    }
-
     void setVisibilityTrackerListener(
             @Nullable final VisibilityTrackerListener visibilityTrackerListener) {
         mVisibilityTrackerListener = visibilityTrackerListener;
@@ -153,15 +141,19 @@ void setVisibilityTrackerListener(
     /**
      * Tracks the given view for visibility.
      */
-    void addView(@NonNull final View view, final int minPercentageViewed) {
-        addView(view, view, minPercentageViewed);
+    void addView(@NonNull final View view, final int minPercentageViewed,
+            @Nullable final Integer minVisiblePx) {
+        addView(view, view, minPercentageViewed, minVisiblePx);
     }
 
-    void addView(@NonNull View rootView, @NonNull final View view, final int minPercentageViewed) {
-      addView(rootView, view, minPercentageViewed, minPercentageViewed);
+    void addView(@NonNull View rootView, @NonNull final View view, final int minPercentageViewed,
+            @Nullable final Integer minVisiblePx) {
+        addView(rootView, view, minPercentageViewed, minPercentageViewed, minVisiblePx);
     }
 
-    void addView(@NonNull View rootView, @NonNull final View view, final int minVisiblePercentageViewed, final int maxInvisiblePercentageViewed) {
+    void addView(@NonNull View rootView, @NonNull final View view,
+            final int minVisiblePercentageViewed, final int maxInvisiblePercentageViewed,
+            @Nullable final Integer minVisiblePx) {
         setViewTreeObserver(view.getContext(), view);
 
         // Find the view if already tracked
@@ -178,6 +170,7 @@ void addView(@NonNull View rootView, @NonNull final View view, final int minVisi
         trackingInfo.mMinViewablePercent = minVisiblePercentageViewed;
         trackingInfo.mMaxInvisiblePercent = maxInvisiblePercent;
         trackingInfo.mAccessOrder = mAccessCounter;
+        trackingInfo.mMinVisiblePx = minVisiblePx;
 
         // Trim the number of tracked views to a reasonable number
         mAccessCounter++;
@@ -258,11 +251,14 @@ public void run() {
                 final View view = entry.getKey();
                 final int minPercentageViewed = entry.getValue().mMinViewablePercent;
                 final int maxInvisiblePercent = entry.getValue().mMaxInvisiblePercent;
+                final Integer minVisiblePx = entry.getValue().mMinVisiblePx;
                 final View rootView = entry.getValue().mRootView;
 
-                if (mVisibilityChecker.isVisible(rootView, view, minPercentageViewed)) {
+                if (mVisibilityChecker.isVisible(rootView, view, minPercentageViewed,
+                        minVisiblePx)) {
                     mVisibleViews.add(view);
-                } else if (!mVisibilityChecker.isVisible(rootView, view, maxInvisiblePercent)){
+                } else if (!mVisibilityChecker.isVisible(rootView, view, maxInvisiblePercent,
+                        null)) {
                     mInvisibleViews.add(view);
                 }
             }
@@ -289,9 +285,11 @@ boolean hasRequiredTimeElapsed(final long startTimeMillis, final int minTimeView
         }
 
         /**
-         * Whether the view is at least certain % visible
+         * Whether the view is at least certain amount visible. If the min pixel amount is set,
+         * use that. Otherwise, use the min percentage visible.
          */
-        boolean isVisible(@Nullable final View rootView, @Nullable final View view, final int minPercentageViewed) {
+        boolean isVisible(@Nullable final View rootView, @Nullable final View view,
+                final int minPercentageViewed, @Nullable final Integer minVisiblePx) {
             // ListView & GridView both call detachFromParent() for views that can be recycled for
             // new data. This is one of the rare instances where a view will have a null parent for
             // an extended period of time and will not be the main window.
@@ -315,6 +313,10 @@ boolean isVisible(@Nullable final View rootView, @Nullable final View view, fina
                 return false;
             }
 
+            if (minVisiblePx != null && minVisiblePx > 0) {
+                return visibleViewArea >= minVisiblePx;
+            }
+
             return 100 * visibleViewArea >= minPercentageViewed * totalViewArea;
         }
     }
diff --git a/mopub-sdk/mopub-sdk-native-video/build.gradle b/mopub-sdk/mopub-sdk-native-video/build.gradle
index 224045ef..6e83c328 100644
--- a/mopub-sdk/mopub-sdk-native-video/build.gradle
+++ b/mopub-sdk/mopub-sdk-native-video/build.gradle
@@ -2,7 +2,7 @@ apply from: '../shared-build.gradle'
 
 dependencies {
     compile project(':mopub-sdk:mopub-sdk-native-static')
-    compile 'com.google.android.exoplayer:exoplayer:r1.5.6'
+    compile 'com.google.android.exoplayer:exoplayer:r2.4.4'
 }
 
 project.description = 'MoPub Android SDK - Native Video'
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
index 069bf59a..1bbdd628 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
@@ -1,14 +1,15 @@
 package com.mopub.nativeads;
 
 import android.content.Context;
+import android.net.Uri;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
-import com.google.android.exoplayer.upstream.DataSource;
-import com.google.android.exoplayer.upstream.DataSpec;
-import com.google.android.exoplayer.upstream.DefaultHttpDataSource;
-import com.google.android.exoplayer.upstream.HttpDataSource;
+import com.google.android.exoplayer2.upstream.DataSource;
+import com.google.android.exoplayer2.upstream.DataSpec;
+import com.google.android.exoplayer2.upstream.DefaultHttpDataSource;
+import com.google.android.exoplayer2.upstream.HttpDataSource;
 import com.mopub.common.CacheService;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
@@ -135,11 +136,7 @@
 
     public HttpDiskCompositeDataSource(@NonNull final Context context,
             @NonNull final String userAgent, @Nullable final EventDetails eventDetails) {
-        this(context, userAgent, eventDetails,
-                new DefaultHttpDataSource(userAgent, null, null,
-                        DefaultHttpDataSource.DEFAULT_CONNECT_TIMEOUT_MILLIS,
-                        DefaultHttpDataSource.DEFAULT_READ_TIMEOUT_MILLIS,
-                        false));
+        this(context, userAgent, eventDetails, new DefaultHttpDataSource(userAgent, null));
     }
 
     @VisibleForTesting
@@ -279,6 +276,11 @@ private static Integer getExpectedFileLengthFromDisk(@NonNull final String key)
         return null;
     }
 
+    @Override
+    public Uri getUri() {
+        return mDataSpec != null ? mDataSpec.uri : null;
+    }
+
     @Override
     public void close() throws IOException {
         if (!TextUtils.isEmpty(mKey) && mCachedBytes != null) {
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaLayout.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaLayout.java
index 8cfd81bc..43de589e 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaLayout.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaLayout.java
@@ -1,12 +1,10 @@
 package com.mopub.nativeads;
 
-import android.annotation.TargetApi;
 import android.content.Context;
 import android.graphics.Color;
 import android.graphics.SurfaceTexture;
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.GradientDrawable;
-import android.os.Build;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.util.AttributeSet;
@@ -24,7 +22,6 @@
 import com.mopub.mobileads.VastVideoProgressBarWidget;
 import com.mopub.mobileads.resource.DrawableConstants.GradientStrip;
 
-@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
 public class MediaLayout extends RelativeLayout {
     public enum Mode { IMAGE, PLAYING, LOADING, BUFFERING, PAUSED, FINISHED }
     public enum MuteState { MUTED, UNMUTED }
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
index 67f0655d..ac405b11 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
@@ -1,10 +1,8 @@
 package com.mopub.nativeads;
 
-import android.annotation.TargetApi;
 import android.content.Context;
 import android.graphics.SurfaceTexture;
 import android.media.AudioManager;
-import android.os.Build;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
@@ -30,6 +28,7 @@
 import com.mopub.network.TrackingRequest;
 
 import org.json.JSONArray;
+import org.json.JSONException;
 import org.json.JSONObject;
 
 import java.lang.ref.WeakReference;
@@ -43,15 +42,16 @@
 
 import static com.mopub.common.DataKeys.EVENT_DETAILS;
 import static com.mopub.common.DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT;
+import static com.mopub.common.DataKeys.IMPRESSION_MIN_VISIBLE_PX;
 import static com.mopub.common.DataKeys.IMPRESSION_VISIBLE_MS;
 import static com.mopub.common.DataKeys.JSON_BODY_KEY;
 import static com.mopub.common.DataKeys.MAX_BUFFER_MS;
 import static com.mopub.common.DataKeys.PAUSE_VISIBLE_PERCENT;
 import static com.mopub.common.DataKeys.PLAY_VISIBLE_PERCENT;
+import static com.mopub.common.DataKeys.VIDEO_TRACKERS_KEY;
 import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
 import static com.mopub.nativeads.NativeVideoController.VisibilityTrackingEvent;
 
-@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
 public class MoPubCustomEventVideoNative extends CustomEventNative {
 
     @Override
@@ -96,7 +96,6 @@ protected void loadNativeAd(@NonNull final Context context,
         }
     }
 
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
     public static class MoPubVideoNativeAd extends VideoNativeAd
             implements VastManager.VastManagerListener, NativeVideoProgressRunnable.ProgressListener,
             AudioManager.OnAudioFocusChangeListener {
@@ -307,6 +306,23 @@ public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideo
             visibilityTrackingEvent.totalRequiredPlayTimeMs =
                     mVideoResponseHeaders.getImpressionVisibleMs();
             visibilityTrackingEvents.add(visibilityTrackingEvent);
+            visibilityTrackingEvent.minimumVisiblePx =
+                    mVideoResponseHeaders.getImpressionVisiblePx();
+
+            // VAST impression trackers
+            for (final VastTracker vastTracker : vastVideoConfig.getImpressionTrackers()) {
+                final VisibilityTrackingEvent vastImpressionTrackingEvent =
+                        new VisibilityTrackingEvent();
+                vastImpressionTrackingEvent.strategy = new PayloadVisibilityStrategy(mContext,
+                        vastTracker.getContent());
+                vastImpressionTrackingEvent.minimumPercentageVisible =
+                        mVideoResponseHeaders.getImpressionMinVisiblePercent();
+                vastImpressionTrackingEvent.totalRequiredPlayTimeMs =
+                        mVideoResponseHeaders.getImpressionVisibleMs();
+                visibilityTrackingEvents.add(vastImpressionTrackingEvent);
+                vastImpressionTrackingEvent.minimumVisiblePx =
+                        mVideoResponseHeaders.getImpressionVisiblePx();
+            }
 
             // Visibility tracking event from http response Vast payload
             mVastVideoConfig = vastVideoConfig;
@@ -317,7 +333,7 @@ public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideo
                         new VisibilityTrackingEvent();
                 vastVisibilityTrackingEvent.strategy =
                         new PayloadVisibilityStrategy(mContext,
-                                vastVideoViewabilityTracker.getTrackingUrl());
+                                vastVideoViewabilityTracker.getContent());
                 vastVisibilityTrackingEvent.minimumPercentageVisible =
                         vastVideoViewabilityTracker.getPercentViewable();
                 vastVisibilityTrackingEvent.totalRequiredPlayTimeMs =
@@ -342,6 +358,12 @@ public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideo
                     mId, mContext, visibilityTrackingEvents, mVastVideoConfig, mEventDetails);
 
             mCustomEventNativeListener.onNativeAdLoaded(this);
+
+            // Internal Video Trackers
+            final JSONObject videoTrackers = mVideoResponseHeaders.getVideoTrackers();
+            if (videoTrackers != null) {
+                mVastVideoConfig.addVideoTrackers(videoTrackers);
+            }
         }
 
         private boolean containsRequiredKeys(@NonNull final JSONObject jsonObject) {
@@ -418,7 +440,8 @@ public void render(@NonNull MediaLayout mediaLayout) {
             mVideoVisibleTracking.addView(mRootView,
                     mediaLayout,
                     mVideoResponseHeaders.getPlayVisiblePercent(),
-                    mVideoResponseHeaders.getPauseVisiblePercent());
+                    mVideoResponseHeaders.getPauseVisiblePercent(),
+                    mVideoResponseHeaders.getImpressionVisiblePx());
 
             mMediaLayout = mediaLayout;
             mMediaLayout.initForVideo();
@@ -605,8 +628,7 @@ private void maybeChangeState() {
             } else if (mEnded) {
                 newState = VideoState.ENDED;
             } else {
-                if (mLatestVideoControllerState == NativeVideoController.STATE_PREPARING
-                        || mLatestVideoControllerState == NativeVideoController.STATE_IDLE) {
+                if (mLatestVideoControllerState == NativeVideoController.STATE_IDLE) {
                     newState = VideoState.LOADING;
                 } else if (mLatestVideoControllerState == NativeVideoController.STATE_BUFFERING) {
                     newState = VideoState.BUFFERING;
@@ -834,7 +856,6 @@ MediaLayout getMediaLayout() {
     }
 
     @VisibleForTesting
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
     static class HeaderVisibilityStrategy implements VisibilityTrackingEvent.OnTrackedStrategy {
         @NonNull private final WeakReference<MoPubVideoNativeAd> mMoPubVideoNativeAd;
 
@@ -852,7 +873,6 @@ public void execute() {
     }
 
     @VisibleForTesting
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
     static class PayloadVisibilityStrategy implements VisibilityTrackingEvent.OnTrackedStrategy {
         @NonNull private final Context mContext;
         @NonNull private final String mUrl;
@@ -872,7 +892,6 @@ public void execute() {
      * Created purely for the purpose of mocking to ease testing.
      */
     @VisibleForTesting
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
     static class NativeVideoControllerFactory {
         public NativeVideoController createForId(final long id,
                 @NonNull final Context context,
@@ -885,7 +904,6 @@ public NativeVideoController createForId(final long id,
     }
 
     @VisibleForTesting
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
     static class VideoResponseHeaders {
         private boolean mHeadersAreValid;
         private int mPlayVisiblePercent;
@@ -893,19 +911,50 @@ public NativeVideoController createForId(final long id,
         private int mImpressionMinVisiblePercent;
         private int mImpressionVisibleMs;
         private int mMaxBufferMs;
+        private Integer mImpressionVisiblePx;
+        private JSONObject mVideoTrackers;
 
         VideoResponseHeaders(@NonNull final Map<String, String> serverExtras) {
             try {
                 mPlayVisiblePercent = Integer.parseInt(serverExtras.get(PLAY_VISIBLE_PERCENT));
                 mPauseVisiblePercent = Integer.parseInt(serverExtras.get(PAUSE_VISIBLE_PERCENT));
-                mImpressionMinVisiblePercent =
-                        Integer.parseInt(serverExtras.get(IMPRESSION_MIN_VISIBLE_PERCENT));
                 mImpressionVisibleMs = Integer.parseInt(serverExtras.get(IMPRESSION_VISIBLE_MS));
                 mMaxBufferMs = Integer.parseInt(serverExtras.get(MAX_BUFFER_MS));
                 mHeadersAreValid = true;
             } catch (NumberFormatException e) {
                 mHeadersAreValid = false;
             }
+
+            final String impressionVisiblePxString = serverExtras.get(IMPRESSION_MIN_VISIBLE_PX);
+            if (!TextUtils.isEmpty(impressionVisiblePxString)) {
+                try {
+                    mImpressionVisiblePx = Integer.parseInt(impressionVisiblePxString);
+                } catch (NumberFormatException e) {
+                    MoPubLog.d("Unable to parse impression min visible px from server extras.");
+                }
+            }
+            try {
+                mImpressionMinVisiblePercent =
+                        Integer.parseInt(serverExtras.get(IMPRESSION_MIN_VISIBLE_PERCENT));
+            } catch (NumberFormatException e) {
+                MoPubLog.d("Unable to parse impression min visible percent from server extras.");
+                if (mImpressionVisiblePx == null || mImpressionVisiblePx < 0) {
+                    mHeadersAreValid = false;
+                }
+            }
+
+
+            final String videoTrackers = serverExtras.get(VIDEO_TRACKERS_KEY);
+            if (TextUtils.isEmpty(videoTrackers)) {
+                return;
+            }
+
+            try {
+                mVideoTrackers = new JSONObject(videoTrackers);
+            } catch (JSONException e) {
+                MoPubLog.d("Failed to parse video trackers to JSON: " + videoTrackers, e);
+                mVideoTrackers = null;
+            }
         }
 
         boolean hasValidHeaders() {
@@ -931,5 +980,14 @@ int getImpressionVisibleMs() {
         int getMaxBufferMs() {
             return mMaxBufferMs;
         }
+
+        @Nullable
+        Integer getImpressionVisiblePx() {
+            return mImpressionVisiblePx;
+        }
+
+        JSONObject getVideoTrackers() {
+            return mVideoTrackers;
+        }
     }
 }
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
index 91ea4256..eb3a94ff 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.annotation.TargetApi;
 import android.content.Context;
 import android.content.res.Configuration;
 import android.graphics.Bitmap;
@@ -8,12 +7,12 @@
 import android.graphics.Color;
 import android.graphics.ColorFilter;
 import android.graphics.Paint;
+import android.graphics.PixelFormat;
 import android.graphics.RectF;
 import android.graphics.SurfaceTexture;
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.GradientDrawable;
 import android.graphics.drawable.GradientDrawable.Orientation;
-import android.os.Build;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
@@ -36,7 +35,6 @@
 import com.mopub.mobileads.resource.DrawableConstants;
 import com.mopub.mobileads.resource.DrawableConstants.GradientStrip;
 
-@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
 public class NativeFullScreenVideoView extends RelativeLayout {
 
     public enum Mode { LOADING, PLAYING, PAUSED, FINISHED }
@@ -422,9 +420,9 @@ public void setColorFilter(ColorFilter cf) { }
 
         @Override
         public int getOpacity() {
-            return 0;
+            return PixelFormat.UNKNOWN;
         }
-    };
+    }
 
     @Deprecated
     @VisibleForTesting
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
index 33e80e12..d2e8f3e0 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
@@ -1,14 +1,11 @@
 package com.mopub.nativeads;
 
-import android.annotation.TargetApi;
 import android.content.Context;
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 import android.media.AudioManager;
 import android.media.AudioManager.OnAudioFocusChangeListener;
-import android.media.MediaCodec;
 import android.net.Uri;
-import android.os.Build;
 import android.os.Handler;
 import android.os.Looper;
 import android.support.annotation.NonNull;
@@ -16,23 +13,36 @@
 import android.view.Surface;
 import android.view.TextureView;
 
-import com.google.android.exoplayer.ExoPlaybackException;
-import com.google.android.exoplayer.ExoPlayer;
-import com.google.android.exoplayer.MediaCodecAudioTrackRenderer;
-import com.google.android.exoplayer.MediaCodecSelector;
-import com.google.android.exoplayer.MediaCodecVideoTrackRenderer;
-import com.google.android.exoplayer.extractor.Extractor;
-import com.google.android.exoplayer.extractor.ExtractorSampleSource;
-import com.google.android.exoplayer.extractor.mp4.Mp4Extractor;
-import com.google.android.exoplayer.upstream.Allocator;
-import com.google.android.exoplayer.upstream.DataSource;
-import com.google.android.exoplayer.upstream.DefaultAllocator;
+import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.DefaultLoadControl;
+import com.google.android.exoplayer2.ExoPlaybackException;
+import com.google.android.exoplayer2.ExoPlayer;
+import com.google.android.exoplayer2.ExoPlayerFactory;
+import com.google.android.exoplayer2.LoadControl;
+import com.google.android.exoplayer2.PlaybackParameters;
+import com.google.android.exoplayer2.Renderer;
+import com.google.android.exoplayer2.Timeline;
+import com.google.android.exoplayer2.audio.MediaCodecAudioRenderer;
+import com.google.android.exoplayer2.extractor.ExtractorsFactory;
+import com.google.android.exoplayer2.mediacodec.MediaCodecSelector;
+import com.google.android.exoplayer2.source.ExtractorMediaSource;
+import com.google.android.exoplayer2.source.MediaSource;
+import com.google.android.exoplayer2.source.TrackGroupArray;
+import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
+import com.google.android.exoplayer2.trackselection.TrackSelectionArray;
+import com.google.android.exoplayer2.trackselection.TrackSelector;
+import com.google.android.exoplayer2.upstream.DefaultAllocator;
+import com.google.android.exoplayer2.video.MediaCodecVideoRenderer;
+import com.google.android.exoplayer2.extractor.Extractor;
+import com.google.android.exoplayer2.extractor.mp4.Mp4Extractor;
+import com.google.android.exoplayer2.upstream.DataSource;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.event.BaseEvent;
 import com.mopub.common.event.Event;
 import com.mopub.common.event.EventDetails;
 import com.mopub.common.event.MoPubEvents;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.RepeatingHandlerRunnable;
 import com.mopub.mobileads.VastTracker;
 import com.mopub.mobileads.VastVideoConfig;
@@ -50,8 +60,7 @@
  * Wrapper class around the {@link ExoPlayer} to provide a nice interface into the player along
  * with some helper methods. This class is not thread safe.
  */
-@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
-public class NativeVideoController implements ExoPlayer.Listener,OnAudioFocusChangeListener {
+public class NativeVideoController implements ExoPlayer.EventListener, OnAudioFocusChangeListener {
 
     public interface Listener {
         void onStateChanged(boolean playWhenReady, int playbackState);
@@ -64,7 +73,6 @@
     public static final int STATE_READY = ExoPlayer.STATE_READY;
     public static final int STATE_BUFFERING = ExoPlayer.STATE_BUFFERING;
     public static final int STATE_IDLE = ExoPlayer.STATE_IDLE;
-    public static final int STATE_PREPARING = ExoPlayer.STATE_PREPARING;
     public static final int STATE_ENDED = ExoPlayer.STATE_ENDED;
     public static final int STATE_CLEARED = ExoPlayer.STATE_ENDED + 1;
 
@@ -75,7 +83,7 @@
 
     @NonNull private final Context mContext;
     @NonNull private final Handler mHandler;
-    @NonNull private final ExoPlayerFactory mExoPlayerFactory;
+    @NonNull private final MoPubExoPlayerFactory mMoPubExoPlayerFactory;
     @NonNull private VastVideoConfig mVastVideoConfig;
     @NonNull private NativeVideoProgressRunnable mNativeVideoProgressRunnable;
     @NonNull private AudioManager mAudioManager;
@@ -87,8 +95,8 @@
     @Nullable private WeakReference<Object> mOwnerRef;
     @Nullable private volatile ExoPlayer mExoPlayer;
     @Nullable private BitmapDrawable mFinalFrame;
-    @Nullable private MediaCodecAudioTrackRenderer mAudioTrackRenderer;
-    @Nullable private MediaCodecVideoTrackRenderer mVideoTrackRenderer;
+    @Nullable private MediaCodecAudioRenderer mAudioRenderer;
+    @Nullable private MediaCodecVideoRenderer mVideoRenderer;
     @Nullable private EventDetails mEventDetails;
 
     private boolean mPlayWhenReady;
@@ -122,11 +130,11 @@ public static NativeVideoController createForId(final long id,
             @NonNull final Context context,
             @NonNull final VastVideoConfig vastVideoConfig,
             @NonNull final NativeVideoProgressRunnable nativeVideoProgressRunnable,
-            @NonNull final ExoPlayerFactory exoPlayerFactory,
+            @NonNull final MoPubExoPlayerFactory moPubExoPlayerFactory,
             @Nullable final EventDetails eventDetails,
             @NonNull final AudioManager audioManager) {
         NativeVideoController nvc = new NativeVideoController(context, vastVideoConfig,
-                nativeVideoProgressRunnable, exoPlayerFactory, eventDetails, audioManager);
+                nativeVideoProgressRunnable, moPubExoPlayerFactory, eventDetails, audioManager);
         sManagerMap.put(id, nvc);
         return nvc;
     }
@@ -156,7 +164,7 @@ private NativeVideoController(@NonNull final Context context,
                         new Handler(Looper.getMainLooper()),
                         visibilityTrackingEvents,
                         vastVideoConfig),
-                new ExoPlayerFactory(),
+                new MoPubExoPlayerFactory(),
                 eventDetails, 
                 (AudioManager) context.getSystemService(Context.AUDIO_SERVICE));
     }
@@ -164,19 +172,19 @@ private NativeVideoController(@NonNull final Context context,
     private NativeVideoController(@NonNull final Context context,
             @NonNull final VastVideoConfig vastVideoConfig,
             @NonNull final NativeVideoProgressRunnable nativeVideoProgressRunnable,
-            @NonNull final ExoPlayerFactory exoPlayerFactory,
+            @NonNull final MoPubExoPlayerFactory moPubExoPlayerFactory,
             @Nullable final EventDetails eventDetails,
             @NonNull final AudioManager audioManager) {
         Preconditions.checkNotNull(context);
         Preconditions.checkNotNull(vastVideoConfig);
-        Preconditions.checkNotNull(exoPlayerFactory);
+        Preconditions.checkNotNull(moPubExoPlayerFactory);
         Preconditions.checkNotNull(audioManager);
 
         mContext = context.getApplicationContext();
         mHandler = new Handler(Looper.getMainLooper());
         mVastVideoConfig = vastVideoConfig;
         mNativeVideoProgressRunnable = nativeVideoProgressRunnable;
-        mExoPlayerFactory = exoPlayerFactory;
+        mMoPubExoPlayerFactory = moPubExoPlayerFactory;
         mEventDetails = eventDetails;
         mAudioManager = audioManager;
     }
@@ -291,9 +299,23 @@ public void release(@NonNull final Object owner) {
         }
     }
 
+    @Override
+    public void onTimelineChanged(Timeline timeline, Object manifest) {}
+
+    @Override
+    public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {}
+
+    @Override
+    public void onLoadingChanged(boolean isLoading) {}
+
     @Override
     public void onPlayerStateChanged(final boolean playWhenReady, final int newState) {
         if (newState == STATE_ENDED && mFinalFrame == null) {
+            if (mExoPlayer == null || mSurface == null || mTextureView == null) {
+                MoPubLog.w("onPlayerStateChanged called afer view has been recycled.");
+                return;
+            }
+
             mFinalFrame = new BitmapDrawable(mContext.getResources(), mTextureView.getBitmap());
             mNativeVideoProgressRunnable.requestStop();
         }
@@ -345,9 +367,6 @@ public long getDuration() {
         return mNativeVideoProgressRunnable.getDuration();
     }
 
-    @Override
-    public void onPlayWhenReadyCommitted() {}
-
     @Override
     public void onPlayerError(ExoPlaybackException e) {
         if (mListener == null) {
@@ -364,6 +383,12 @@ public void onPlayerError(ExoPlaybackException e) {
         mNativeVideoProgressRunnable.requestStop();
     }
 
+    @Override
+    public void onPositionDiscontinuity() {}
+
+    @Override
+    public void onPlaybackParametersChanged(PlaybackParameters playbackParameters) {}
+
     /**
      * Handles forwarding the user to the specified click through url. Also, fires all unfired
      * impression trackers (which should already have been handled in the transition from in-stream
@@ -403,28 +428,43 @@ private void clearExistingPlayer() {
 
     private void preparePlayer() {
         if (mExoPlayer == null) {
-            mExoPlayer = mExoPlayerFactory.newInstance(2, 1000, 5000);
+            mVideoRenderer = new MediaCodecVideoRenderer(mContext,
+                    MediaCodecSelector.DEFAULT, 0, mHandler, null, 10);
+            mAudioRenderer = new MediaCodecAudioRenderer(MediaCodecSelector.DEFAULT);
+            final DefaultAllocator allocator = new DefaultAllocator(true, BUFFER_SEGMENT_SIZE,
+                    BUFFER_SEGMENT_COUNT);
+
+            mExoPlayer = mMoPubExoPlayerFactory.newInstance(
+                    new Renderer[] {mVideoRenderer, mAudioRenderer},
+                    new DefaultTrackSelector(),
+                    new DefaultLoadControl(allocator));
+
             mNativeVideoProgressRunnable.setExoPlayer(mExoPlayer);
             mExoPlayer.addListener(this);
 
-            // Set up data sources
-            final Allocator allocator = new DefaultAllocator(BUFFER_SEGMENT_SIZE);
-            final Extractor extractor = new Mp4Extractor();
+            final DataSource.Factory dataSourceFactory = new DataSource.Factory() {
+                @Override
+                public DataSource createDataSource() {
+                    return new HttpDiskCompositeDataSource(mContext, "exo_demo", mEventDetails);
+                }
+            };
 
-            final DataSource httpSource = new HttpDiskCompositeDataSource(mContext, "exo_demo",
-                    mEventDetails);
+            final ExtractorsFactory extractorsFactory = new ExtractorsFactory() {
+                @Override
+                public Extractor[] createExtractors() {
+                    return new Extractor[] {new Mp4Extractor()};
+                }
+            };
 
-            final String videoUrl = mVastVideoConfig.getNetworkMediaFileUrl();
+            final MediaSource mediaSource = new ExtractorMediaSource(
+                    Uri.parse(mVastVideoConfig.getNetworkMediaFileUrl()),
+                    dataSourceFactory,
+                    extractorsFactory,
+                    mHandler,
+                    null
+            );
 
-            final ExtractorSampleSource sampleSource = new ExtractorSampleSource(Uri.parse(videoUrl),
-                    httpSource, allocator, BUFFER_SEGMENT_SIZE * BUFFER_SEGMENT_COUNT, extractor);
-            mVideoTrackRenderer = new MediaCodecVideoTrackRenderer(mContext, sampleSource,
-                    MediaCodecSelector.DEFAULT,
-                    MediaCodec.VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING, 0, mHandler, null,
-                    10);
-            mAudioTrackRenderer = new MediaCodecAudioTrackRenderer(sampleSource,
-                    MediaCodecSelector.DEFAULT);
-            mExoPlayer.prepare(mAudioTrackRenderer, mVideoTrackRenderer);
+            mExoPlayer.prepare(mediaSource);
             mNativeVideoProgressRunnable.startRepeating(50);
         }
 
@@ -450,8 +490,9 @@ private void setExoAudio(final float volume) {
             return;
         }
 
-        mExoPlayer.sendMessage(
-                mAudioTrackRenderer, MediaCodecAudioTrackRenderer.MSG_SET_VOLUME, volume);
+        mExoPlayer.sendMessages(
+                new ExoPlayer.ExoPlayerMessage(mAudioRenderer, C.MSG_SET_VOLUME, volume)
+        );
     }
 
     private void setExoSurface(@Nullable final Surface surface) {
@@ -459,17 +500,19 @@ private void setExoSurface(@Nullable final Surface surface) {
             return;
         }
 
-        mExoPlayer.sendMessage(
-                mVideoTrackRenderer, MediaCodecVideoTrackRenderer.MSG_SET_SURFACE, surface);
+        mExoPlayer.sendMessages(
+            new ExoPlayer.ExoPlayerMessage(mVideoRenderer, C.MSG_SET_SURFACE, surface)
+        );
     }
 
     /**
      * Created purely for the purpose of mocking to ease testing.
      */
     @VisibleForTesting
-    static class ExoPlayerFactory {
-        public ExoPlayer newInstance(int rendererCount, int minBufferMs, int minRebufferMs) {
-            return ExoPlayer.Factory.newInstance(rendererCount, minBufferMs, minRebufferMs);
+    static class MoPubExoPlayerFactory {
+        public ExoPlayer newInstance(@NonNull final Renderer[] renderers,
+                @NonNull final TrackSelector trackSelector, @Nullable LoadControl loadControl) {
+            return ExoPlayerFactory.newInstance(renderers, trackSelector, loadControl);
         }
     }
 
@@ -483,6 +526,7 @@ public ExoPlayer newInstance(int rendererCount, int minBufferMs, int minRebuffer
         int totalRequiredPlayTimeMs;
         int totalQualifiedPlayCounter;
         boolean isTracked;
+        Integer minimumVisiblePx;
     }
 
     static class NativeVideoProgressRunnable extends RepeatingHandlerRunnable {
@@ -570,7 +614,7 @@ void checkImpressionTrackers(final boolean forceTrigger) {
                     continue;
                 }
                 if (forceTrigger || mVisibilityChecker.isVisible(mTextureView, mTextureView,
-                        event.minimumPercentageVisible)) {
+                        event.minimumPercentageVisible, event.minimumVisiblePx)) {
                     event.totalQualifiedPlayCounter += mUpdateIntervalMillis;
                     if (forceTrigger ||
                             event.totalQualifiedPlayCounter >= event.totalRequiredPlayTimeMs) {
@@ -610,7 +654,7 @@ public void doWork() {
                     if (tracker.isTracked()) {
                         continue;
                     }
-                    trackingUrls.add(tracker.getTrackingUrl());
+                    trackingUrls.add(tracker.getContent());
                     tracker.setTracked();
                 }
                 TrackingRequest.makeTrackingHttpRequest(trackingUrls, mContext);
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
index 4d8e4e55..e98c9b1f 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
@@ -1,13 +1,11 @@
 package com.mopub.nativeads;
 
-import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.Context;
 import android.content.res.Configuration;
 import android.graphics.Bitmap;
 import android.graphics.SurfaceTexture;
 import android.media.AudioManager;
-import android.os.Build;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -28,7 +26,6 @@
 import com.mopub.nativeads.NativeFullScreenVideoView.Mode;
 import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable;
 
-@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
 public class NativeVideoViewController extends BaseVideoViewController implements TextureView
         .SurfaceTextureListener, NativeVideoController.Listener,
         AudioManager.OnAudioFocusChangeListener {
@@ -244,8 +241,7 @@ private void maybeChangeState() {
         } else if (mEnded) {
             newState = VideoState.ENDED;
         } else {
-            if (mLatestVideoControllerState == NativeVideoController.STATE_PREPARING
-                    || mLatestVideoControllerState == NativeVideoController.STATE_IDLE) {
+            if (mLatestVideoControllerState == NativeVideoController.STATE_IDLE) {
                 newState = VideoState.LOADING;
             } else if (mLatestVideoControllerState == NativeVideoController.STATE_BUFFERING) {
                 newState = VideoState.BUFFERING;
@@ -260,7 +256,6 @@ private void maybeChangeState() {
         applyState(newState);
     }
 
-
     @VisibleForTesting
     void applyState(@NonNull final VideoState videoState) {
         applyState(videoState, false);
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java
index 71f3fa9a..97d19869 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java
@@ -1,7 +1,5 @@
 package com.mopub.nativeads;
 
-import android.annotation.TargetApi;
-import android.os.Build;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.view.View;
@@ -11,7 +9,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
 public abstract class VideoNativeAd extends BaseNativeAd implements NativeVideoController.Listener {
 
     // Basic fields
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/common/MoPubReward.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/common/MoPubReward.java
index 0c2b0ce3..60014242 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/common/MoPubReward.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/common/MoPubReward.java
@@ -35,7 +35,7 @@ private MoPubReward(boolean success, @NonNull String label, int amount) {
 
     @NonNull
     public static MoPubReward failure() {
-        return new MoPubReward(false, NO_REWARD_LABEL, 0);
+        return new MoPubReward(false, NO_REWARD_LABEL, DEFAULT_REWARD_AMOUNT);
     }
 
     @NonNull
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedAd.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedAd.java
new file mode 100644
index 00000000..c9b15d97
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedAd.java
@@ -0,0 +1,111 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MoPubLifecycleManager;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+
+import java.util.Map;
+
+/**
+ * The base class when dealing with rewarded formats.
+ */
+public abstract class CustomEventRewardedAd {
+
+    /**
+     * Provides a {@link LifecycleListener} if the custom event's ad network wishes to be notified of
+     * activity lifecycle events in the application.
+     *
+     * @return a LifecycleListener. May be null.
+     */
+    @Nullable
+    @VisibleForTesting
+    protected abstract LifecycleListener getLifecycleListener();
+
+    /**
+     * The MoPub ad loading system calls this after MoPub indicates that this custom event should
+     * be loaded.
+     *
+     * @param launcherActivity the "main activity" of the app. Useful for initializing sdks.
+     * @param localExtras      a map containing additional custom data set in app
+     * @param serverExtras     a map containing additional custom data configurable on the mopub website
+     */
+    final void loadCustomEvent(@NonNull Activity launcherActivity,
+            @NonNull Map<String, Object> localExtras,
+            @NonNull Map<String, String> serverExtras) {
+        try {
+            if (checkAndInitializeSdk(launcherActivity, localExtras, serverExtras)) {
+                MoPubLifecycleManager.getInstance(launcherActivity).addLifecycleListener(
+                        getLifecycleListener());
+            }
+            loadWithSdkInitialized(launcherActivity, localExtras, serverExtras);
+        } catch (Exception e) {
+            MoPubLog.e(e.getMessage());
+        }
+    }
+
+    /**
+     * Sets up the 3rd party ads SDK if it needs configuration. Extenders should use this
+     * to do any static initialization the first time this method is run by any class instance.
+     * From then on, the SDK should be reused without initialization.
+     *
+     * @return true if the SDK performed initialization, false if the SDK was already initialized.
+     */
+    protected abstract boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
+            @NonNull Map<String, Object> localExtras,
+            @NonNull Map<String, String> serverExtras)
+            throws Exception;
+
+    /**
+     * Runs the ad-loading logic for the 3rd party SDK. localExtras & serverExtras should together
+     * contain all the data needed to load an ad.
+     * <p/>
+     * Implementers should also use this method (or checkAndInitializeSdk)
+     * to register a listener for their SDK.
+     * <p/>
+     * This method should not call any {@link MoPubRewardedVideoManager} event methods directly
+     * (onAdLoadSuccess, etc). Instead the SDK delegate/listener should call these methods.
+     *
+     * @param activity     the "main activity" of the app. Useful for initializing sdks.
+     * @param localExtras  a map containing additional custom data set in app
+     * @param serverExtras a map containing additional custom data configurable on the mopub website
+     */
+    protected abstract void loadWithSdkInitialized(@NonNull Activity activity,
+            @NonNull Map<String, Object> localExtras,
+            @NonNull Map<String, String> serverExtras)
+            throws Exception;
+
+    /**
+     * Called by the {@link MoPubRewardedVideoManager} after loading the custom event.
+     * This should return the "ad unit id", "zone id" or similar identifier for the network.
+     * May be empty if the network does not have anything more specific than an application ID.
+     *
+     * @return the id string for this ad unit with the ad network.
+     */
+    @NonNull
+    protected abstract String getAdNetworkId();
+
+    /**
+     * Called to when the custom event is no longer used. Implementers should cancel any
+     * pending requests. The initialized SDK may be reused by another CustomEvent instance
+     * and should not be shut down or cleaned up.
+     */
+    protected abstract void onInvalidate();
+
+    /**
+     * Implementers should query the 3rd party SDK for whether the 3rd party SDK & ID represented
+     * by the custom event is ready to be shown.
+     *
+     * @return true iff a video is available to play.
+     */
+    protected abstract boolean isReady();
+
+    /**
+     * Implementers should now play the rewarded item for this custom event.
+     */
+    protected abstract void show();
+}
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedPlayable.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedPlayable.java
new file mode 100644
index 00000000..9858e2a9
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedPlayable.java
@@ -0,0 +1,7 @@
+package com.mopub.mobileads;
+
+/**
+ * Extend this class to mediate 3rd party rewarded playables.
+ */
+public abstract class CustomEventRewardedPlayable extends CustomEventRewardedAd {
+}
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
index 9e1c961b..f3ecfad6 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
@@ -1,126 +1,49 @@
 package com.mopub.mobileads;
 
-import android.app.Activity;
-import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
-import com.mopub.common.DataKeys;
-import com.mopub.common.LifecycleListener;
-import com.mopub.common.MoPubLifecycleManager;
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-
-import java.util.Map;
-
 /**
- *
+ * Extend this class to mediate 3rd party rewarded videos.
  */
-public abstract class CustomEventRewardedVideo {
+public abstract class CustomEventRewardedVideo extends CustomEventRewardedAd {
 
-    /**
-     * This marker interface is used to indicate that an object is a listener for a 3rd party SDKs
-     * rewarded video system.
-     */
-    @VisibleForTesting
-    protected static interface CustomEventRewardedVideoListener {}
-
-    /**
-     * Called by the {@link MoPubRewardedVideoManager} after loading the custom event.
-     */
-    @Nullable
-    @VisibleForTesting
-    protected abstract CustomEventRewardedVideoListener getVideoListenerForSdk();
+    @Deprecated
+    protected interface CustomEventRewardedVideoListener {
+    }
 
-    /**
-     * Provides a {@link LifecycleListener} if the custom event's ad network wishes to be notified of
-     * activity lifecycle events in the application.
-     *
-     * @return a LifecycleListener. May be null.
-     */
+    @Deprecated
     @Nullable
-    @VisibleForTesting
-    protected abstract LifecycleListener getLifecycleListener();
-
-    /**
-     * Called by the {@link MoPubRewardedVideoManager} after loading the custom event.
-     * This should return the "ad unit id", "zone id" or similar identifier for the network.
-     * May be empty if the network does not have anything more specific than an application ID.
-     *
-     * @return the id string for this ad unit with the ad network.
-     */
-    @NonNull
-    protected abstract String getAdNetworkId();
-
-    /**
-     * Called to when the custom event is no longer used. Implementers should cancel any
-     * pending requests. The initialized SDK may be reused by another CustomEvent instance
-     * and should not be shut down or cleaned up.
-     */
-    protected abstract void onInvalidate();
-
     /**
-     * The MoPub ad loading system calls this after MoPub indicates that this custom event should
-     * be loaded.
-     *
-     * @param launcherActivity the "main activity" of the app. Useful for initializing sdks.
-     * @param localExtras a map containing additional custom data set in app
-     * @param serverExtras a map containing additional custom data configurable on the mopub website
+     * This is no longer used. Implementing this does not do anything.
      */
-    final void loadCustomEvent(@NonNull Activity launcherActivity,
-            @NonNull Map<String, Object> localExtras,
-            @NonNull Map<String, String> serverExtras) {
-        try {
-            if (checkAndInitializeSdk(launcherActivity, localExtras, serverExtras)) {
-                MoPubLifecycleManager.getInstance(launcherActivity).addLifecycleListener(getLifecycleListener());
-            }
-            loadWithSdkInitialized(launcherActivity, localExtras, serverExtras);
-        } catch (Exception e) {
-            MoPubLog.e(e.getMessage());
-        }
+    protected CustomEventRewardedVideoListener getVideoListenerForSdk() {
+        return null;
     }
 
     /**
-     * Sets up the 3rd party ads SDK if it needs configuration. Extenders should use this
-     * to do any static initialization the first time this method is run by any class instance.
-     * From then on, the SDK should be reused without initialization.
-     *
-     * @return true if the SDK performed initialization, false if the SDK was already initialized.
-     */
-    protected abstract boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
-            @NonNull Map<String, Object> localExtras,
-            @NonNull Map<String, String> serverExtras)
-            throws Exception;
-
-    /**
-     * Runs the ad-loading logic for the 3rd party SDK. localExtras & serverExtras should together
-     * contain all the data needed to load an ad.
-     *
-     * Implementers should also use this method (or checkAndInitializeSdk)
-     * to register a listener for their SDK, wrap it in a
-     * {@link com.mopub.mobileads.CustomEventRewardedVideo.CustomEventRewardedVideoListener}
-     *
-     * This method should not call any {@link MoPubRewardedVideoManager} event methods directly
-     * (onAdLoadSuccess, etc). Instead the SDK delegate/listener should call these methods.
-     *
-     * @param activity the "main activity" of the app. Useful for initializing sdks.
-     * @param localExtras a map containing additional custom data set in app
-     * @param serverExtras a map containing additional custom data configurable on the mopub website
-     */
-    protected abstract void loadWithSdkInitialized(@NonNull Activity activity,
-            @NonNull Map<String, Object> localExtras,
-            @NonNull Map<String, String> serverExtras)
-            throws Exception;
-
-    /**
-     * Implementers should query the 3rd party SDK for whether there is a video available for the
-     * 3rd party SDK & ID represented by the custom event.
-     *
-     * @return true iff a video is available to play.
+     * Legacy proxy for {@link CustomEventRewardedAd#isReady}. Implementers should query the 3rd
+     * party SDK for whether there is a video available for the 3rd party SDK & ID represented by
+     * the custom event. This has been deprecated in favor of isReady(), but isReady() will call
+     * hasVideoAvailable() if not overridden.
      */
+    @Deprecated
     protected abstract boolean hasVideoAvailable();
 
     /**
-     * Implementers should now play the rewarded video for this custom event.
+     * Legacy proxy for {@link CustomEventRewardedAd#show}. Implementers should now play the
+     * rewarded video for this custom event. This has been deprecated in favor of show(), but
+     * show() will call showVideo() if not overridden.
      */
+    @Deprecated
     protected abstract void showVideo();
+
+    @Override
+    protected boolean isReady() {
+        return hasVideoAvailable();
+    }
+
+    @Override
+    protected void show() {
+        showVideo();
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
new file mode 100644
index 00000000..7298bf8c
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
@@ -0,0 +1,206 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.DataKeys;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MoPubReward;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+
+import java.util.Map;
+
+import static com.mopub.common.Constants.AD_EXPIRATION_DELAY;
+import static com.mopub.mobileads.MoPubErrorCode.EXPIRED;
+
+/**
+ * Contains the common logic for rewarded ads.
+ */
+public abstract class MoPubRewardedAd extends CustomEventRewardedAd {
+
+    private boolean mIsLoaded;
+    @Nullable private String mRewardedAdCurrencyName;
+    private int mRewardedAdCurrencyAmount;
+    @Nullable protected String mAdUnitId;
+
+    @Nullable
+    @Override
+    protected LifecycleListener getLifecycleListener() {
+        // This custom event does not need additional lifecycle listeners.
+        return null;
+    }
+
+    @Override
+    protected boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final Map<String, String> serverExtras) throws Exception {
+        // No additional initialization is necessary.
+        return false;
+    }
+
+    @Override
+    protected void loadWithSdkInitialized(@NonNull final Activity activity,
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final Map<String, String> serverExtras) throws Exception {
+        Preconditions.checkNotNull(activity, "activity cannot be null");
+        Preconditions.checkNotNull(localExtras, "localExtras cannot be null");
+        Preconditions.checkNotNull(serverExtras, "serverExtras cannot be null");
+
+        final Object rewardedAdCurrencyName = localExtras.get(
+                DataKeys.REWARDED_AD_CURRENCY_NAME_KEY);
+        if (rewardedAdCurrencyName instanceof String) {
+            mRewardedAdCurrencyName = (String) rewardedAdCurrencyName;
+        } else {
+            MoPubLog.d("No currency name specified for rewarded video. Using the default name.");
+            mRewardedAdCurrencyName = MoPubReward.NO_REWARD_LABEL;
+        }
+
+        final Object rewardedAdCurrencyAmount = localExtras.get(
+                DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY);
+        if (rewardedAdCurrencyAmount instanceof String) {
+            try {
+                mRewardedAdCurrencyAmount = Integer.parseInt(
+                        (String) rewardedAdCurrencyAmount);
+            } catch (NumberFormatException e) {
+                MoPubLog.d(
+                        "Unable to convert currency amount: " + rewardedAdCurrencyAmount +
+                                ". Using the default reward amount: " +
+                                MoPubReward.DEFAULT_REWARD_AMOUNT);
+                mRewardedAdCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
+            }
+        } else {
+            MoPubLog.d(
+                    "No currency amount specified for rewarded ad. Using the default reward amount: " +
+                            MoPubReward.DEFAULT_REWARD_AMOUNT);
+            mRewardedAdCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
+        }
+
+        if (mRewardedAdCurrencyAmount < 0) {
+            MoPubLog.d(
+                    "Negative currency amount specified for rewarded ad. Using the default reward amount: " +
+                            MoPubReward.DEFAULT_REWARD_AMOUNT);
+            mRewardedAdCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
+        }
+
+        final Object adUnitId = localExtras.get(DataKeys.AD_UNIT_ID_KEY);
+        if (adUnitId instanceof String) {
+            mAdUnitId = (String) adUnitId;
+        } else {
+            MoPubLog.d("Unable to set ad unit for rewarded ad.");
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        mIsLoaded = false;
+    }
+
+    @Override
+    protected boolean isReady() {
+        return mIsLoaded;
+    }
+
+    protected class MoPubRewardedAdListener implements CustomEventInterstitial.CustomEventInterstitialListener {
+
+        @NonNull final Class<? extends MoPubRewardedAd>  mCustomEventClass;
+
+        @NonNull private final Runnable mAdExpiration;
+        @NonNull private Handler mHandler;
+
+        public MoPubRewardedAdListener(@NonNull final Class<? extends MoPubRewardedAd>
+                customEventClass) {
+            Preconditions.checkNotNull(customEventClass);
+
+            mCustomEventClass = customEventClass;
+
+            mHandler = new Handler();
+            mAdExpiration = new Runnable() {
+                @Override
+                public void run() {
+                    MoPubLog.d("Expiring unused Rewarded ad.");
+                    onInterstitialFailed(EXPIRED);
+                }
+            };
+
+        }
+
+        @Override
+        public void onInterstitialLoaded() {
+            mIsLoaded = true;
+            // Expire MoPub ads to synchronize with MoPub Ad Server tracking window
+            if (AdTypeTranslator.CustomEventType.isMoPubSpecific(mCustomEventClass.getName())) {
+                mHandler.postDelayed(mAdExpiration, AD_EXPIRATION_DELAY);
+            }
+            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(mCustomEventClass,
+                    getAdNetworkId());
+        }
+
+        @Override
+        public void onInterstitialFailed(final MoPubErrorCode errorCode) {
+            mHandler.removeCallbacks(mAdExpiration);
+            switch (errorCode) {
+                case VIDEO_PLAYBACK_ERROR:
+                    MoPubRewardedVideoManager.onRewardedVideoPlaybackError(mCustomEventClass,
+                            getAdNetworkId(), errorCode);
+                    break;
+                default:
+                    MoPubRewardedVideoManager.onRewardedVideoLoadFailure(mCustomEventClass,
+                            getAdNetworkId(), errorCode);
+            }
+        }
+
+        @Override
+        public void onInterstitialShown() {
+            mHandler.removeCallbacks(mAdExpiration);
+            MoPubRewardedVideoManager.onRewardedVideoStarted(mCustomEventClass, getAdNetworkId());
+        }
+
+        @Override
+        public void onInterstitialClicked() {
+            MoPubRewardedVideoManager.onRewardedVideoClicked(mCustomEventClass, getAdNetworkId());
+        }
+
+        @Override
+        public void onLeaveApplication() {
+        }
+
+        @Override
+        public void onInterstitialDismissed() {
+            MoPubRewardedVideoManager.onRewardedVideoClosed(mCustomEventClass, getAdNetworkId());
+            onInvalidate();
+        }
+
+        @Deprecated
+        @VisibleForTesting
+        void setHandler(@NonNull final Handler handler) {
+            mHandler = handler;
+        }
+    }
+
+    @Nullable
+    protected String getRewardedAdCurrencyName() {
+        return mRewardedAdCurrencyName;
+    }
+
+    protected int getRewardedAdCurrencyAmount() {
+        return mRewardedAdCurrencyAmount;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    void setIsLoaded(final boolean isLoaded) {
+        mIsLoaded = isLoaded;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    MoPubRewardedAdListener createListener(@NonNull final Class<? extends MoPubRewardedAd>
+            customEventClass) {
+        return new MoPubRewardedAdListener(customEventClass);
+    }
+
+}
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java
new file mode 100644
index 00000000..963ec1cb
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java
@@ -0,0 +1,97 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.MoPubReward;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mraid.RewardedMraidInterstitial;
+
+import java.util.Map;
+
+/**
+ * A custom event for showing MoPub rewarded playables.
+ */
+public class MoPubRewardedPlayable extends MoPubRewardedAd {
+
+    @NonNull static final String MOPUB_REWARDED_PLAYABLE_ID = "mopub_rewarded_playable_id";
+    @Nullable private RewardedMraidInterstitial mRewardedMraidInterstitial;
+
+    public MoPubRewardedPlayable() {
+        mRewardedMraidInterstitial = new RewardedMraidInterstitial();
+    }
+
+    @Override
+    protected void loadWithSdkInitialized(@NonNull final Activity activity,
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final Map<String, String> serverExtras) throws Exception {
+        super.loadWithSdkInitialized(activity, localExtras, serverExtras);
+
+        if (mRewardedMraidInterstitial == null) {
+            MoPubLog.w("mRewardedMraidInterstitial is null. Has this class been invalidated?");
+            return;
+        }
+        mRewardedMraidInterstitial.loadInterstitial(activity, new MoPubRewardedPlayableListener(),
+                localExtras, serverExtras);
+    }
+
+    @NonNull
+    @Override
+    protected String getAdNetworkId() {
+        return mAdUnitId != null ? mAdUnitId : MOPUB_REWARDED_PLAYABLE_ID;
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mRewardedMraidInterstitial != null) {
+            mRewardedMraidInterstitial.onInvalidate();
+        }
+        mRewardedMraidInterstitial = null;
+        super.onInvalidate();
+    }
+
+    @Override
+    protected void show() {
+        if (isReady() && mRewardedMraidInterstitial != null) {
+            MoPubLog.d("Showing MoPub rewarded playable.");
+            mRewardedMraidInterstitial.showInterstitial();
+        } else {
+            MoPubLog.d("MoPub rewarded playable not loaded. Unable to show playable.");
+        }
+    }
+
+    private class MoPubRewardedPlayableListener extends MoPubRewardedAdListener implements RewardedMraidInterstitial.RewardedMraidInterstitialListener {
+
+        public MoPubRewardedPlayableListener() {
+            super(MoPubRewardedPlayable.class);
+        }
+
+        @Override
+        public void onMraidComplete() {
+            if (getRewardedAdCurrencyName() == null) {
+                MoPubLog.d("No rewarded video was loaded, so no reward is possible");
+            } else {
+                MoPubRewardedVideoManager.onRewardedVideoCompleted(mCustomEventClass,
+                        getAdNetworkId(),
+                        MoPubReward.success(getRewardedAdCurrencyName(),
+                                getRewardedAdCurrencyAmount()));
+            }
+        }
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    void setRewardedMraidInterstitial(
+            @NonNull final RewardedMraidInterstitial rewardedMraidInterstitial) {
+        mRewardedMraidInterstitial = rewardedMraidInterstitial;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    @Nullable
+    RewardedMraidInterstitial getRewardedMraidInterstitial() {
+        return mRewardedMraidInterstitial;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
index 9715fdb0..ca70f8b3 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
@@ -4,10 +4,7 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
-import com.mopub.common.DataKeys;
-import com.mopub.common.LifecycleListener;
 import com.mopub.common.MoPubReward;
-import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 
@@ -16,110 +13,49 @@
 /**
  * A custom event for showing MoPub rewarded videos.
  */
-public class MoPubRewardedVideo extends CustomEventRewardedVideo {
+public class MoPubRewardedVideo extends MoPubRewardedAd {
 
-    @NonNull private static final String MOPUB_REWARDED_VIDEO_ID = "mopub_rewarded_video_id";
+    @NonNull static final String MOPUB_REWARDED_VIDEO_ID = "mopub_rewarded_video_id";
 
-    @NonNull private RewardedVastVideoInterstitial mRewardedVastVideoInterstitial;
-    @Nullable private String mRewardedVideoCurrencyName;
-    private int mRewardedVideoCurrencyAmount;
-    private boolean mIsLoaded;
+    @Nullable private RewardedVastVideoInterstitial mRewardedVastVideoInterstitial;
 
     public MoPubRewardedVideo() {
         mRewardedVastVideoInterstitial = new RewardedVastVideoInterstitial();
     }
 
-    @Nullable
-    @Override
-    protected CustomEventRewardedVideoListener getVideoListenerForSdk() {
-        // Since MoPub is the SDK, there is no reason to get the SDK video listener
-        // since we have direct access.
-        return null;
-    }
-
-    @Nullable
-    @Override
-    protected LifecycleListener getLifecycleListener() {
-        // RewardedVastVideoInterstitial will handle all lifecycle events.
-        return null;
-    }
-
     @NonNull
     @Override
     protected String getAdNetworkId() {
-        return MOPUB_REWARDED_VIDEO_ID;
+        return mAdUnitId != null ?  mAdUnitId : MOPUB_REWARDED_VIDEO_ID;
     }
 
     @Override
     protected void onInvalidate() {
-        mRewardedVastVideoInterstitial.onInvalidate();
-        mIsLoaded = false;
-    }
-
-    @Override
-    protected boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
-            @NonNull final Map<String, Object> localExtras,
-            @NonNull final Map<String, String> serverExtras) throws Exception {
-        // No additional initialization is necessary.
-        return false;
+        if (mRewardedVastVideoInterstitial != null) {
+            mRewardedVastVideoInterstitial.onInvalidate();
+        }
+        mRewardedVastVideoInterstitial = null;
+        super.onInvalidate();
     }
 
     @Override
     protected void loadWithSdkInitialized(@NonNull final Activity activity,
             @NonNull final Map<String, Object> localExtras,
             @NonNull final Map<String, String> serverExtras) throws Exception {
-        Preconditions.checkNotNull(activity, "activity cannot be null");
-        Preconditions.checkNotNull(localExtras, "localExtras cannot be null");
-        Preconditions.checkNotNull(serverExtras, "serverExtras cannot be null");
-
-        final Object rewardedVideoCurrencyName = localExtras.get(
-                DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY);
-        if (rewardedVideoCurrencyName instanceof String) {
-            mRewardedVideoCurrencyName = (String) rewardedVideoCurrencyName;
-        } else {
-            MoPubLog.d("No currency name specified for rewarded video. Using the default name.");
-            mRewardedVideoCurrencyName = MoPubReward.NO_REWARD_LABEL;
-        }
-
-        final Object rewardedVideoCurrencyAmount = localExtras.get(
-                DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY);
-        if (rewardedVideoCurrencyAmount instanceof String) {
-            try {
-                mRewardedVideoCurrencyAmount = Integer.parseInt(
-                        (String) rewardedVideoCurrencyAmount);
-            } catch (NumberFormatException e) {
-                MoPubLog.d(
-                        "Unable to convert currency amount: " + rewardedVideoCurrencyAmount +
-                                ". Using the default reward amount: " +
-                                MoPubReward.DEFAULT_REWARD_AMOUNT);
-                mRewardedVideoCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
-            }
-        } else {
-            MoPubLog.d(
-                    "No currency amount specified for rewarded video. Using the default reward amount: " +
-                            MoPubReward.DEFAULT_REWARD_AMOUNT);
-            mRewardedVideoCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
-        }
+        super.loadWithSdkInitialized(activity, localExtras, serverExtras);
 
-        if (mRewardedVideoCurrencyAmount < 0) {
-            MoPubLog.d(
-                    "Negative currency amount specified for rewarded video. Using the default reward amount: " +
-                            MoPubReward.DEFAULT_REWARD_AMOUNT);
-            mRewardedVideoCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
+        if (mRewardedVastVideoInterstitial == null) {
+            MoPubLog.w("mRewardedVastVideoInterstitial is null. Has this class been invalidated?");
+            return;
         }
-
-        mRewardedVastVideoInterstitial.loadInterstitial(activity, new MoPubRewardedVideoListener(),
-                localExtras, serverExtras);
-    }
-
-    @Override
-    protected boolean hasVideoAvailable() {
-        return mIsLoaded;
+        mRewardedVastVideoInterstitial.loadInterstitial(activity,
+                    new MoPubRewardedVideoListener(),
+                    localExtras, serverExtras);
     }
 
     @Override
-    protected void showVideo() {
-        if (hasVideoAvailable()) {
+    protected void show() {
+        if (isReady() && mRewardedVastVideoInterstitial != null) {
             MoPubLog.d("Showing MoPub rewarded video.");
             mRewardedVastVideoInterstitial.showInterstitial();
         } else {
@@ -127,58 +63,22 @@ protected void showVideo() {
         }
     }
 
-    private class MoPubRewardedVideoListener implements CustomEventInterstitial.CustomEventInterstitialListener, RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener {
-        @Override
-        public void onInterstitialLoaded() {
-            mIsLoaded = true;
-            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(MoPubRewardedVideo.class,
-                    MOPUB_REWARDED_VIDEO_ID);
-        }
-
-        @Override
-        public void onInterstitialFailed(final MoPubErrorCode errorCode) {
-            switch (errorCode) {
-                case VIDEO_PLAYBACK_ERROR:
-                    MoPubRewardedVideoManager.onRewardedVideoPlaybackError(MoPubRewardedVideo.class,
-                            MOPUB_REWARDED_VIDEO_ID, errorCode);
-                    break;
-                default:
-                    MoPubRewardedVideoManager.onRewardedVideoLoadFailure(MoPubRewardedVideo.class,
-                            MOPUB_REWARDED_VIDEO_ID, errorCode);
-            }
-        }
+    private class MoPubRewardedVideoListener extends MoPubRewardedAdListener implements RewardedVastVideoInterstitial.RewardedVideoInterstitialListener {
 
-        @Override
-        public void onInterstitialShown() {
-            MoPubRewardedVideoManager.onRewardedVideoStarted(MoPubRewardedVideo.class,
-                    MOPUB_REWARDED_VIDEO_ID);
-        }
-
-        @Override
-        public void onInterstitialClicked() {
-            MoPubRewardedVideoManager.onRewardedVideoClicked(MoPubRewardedVideo.class,
-                    MOPUB_REWARDED_VIDEO_ID);
+        public MoPubRewardedVideoListener() {
+            super(MoPubRewardedVideo.class);
         }
 
-        @Override
-        public void onLeaveApplication() {
-        }
-
-        @Override
-        public void onInterstitialDismissed() {
-            MoPubRewardedVideoManager.onRewardedVideoClosed(MoPubRewardedVideo.class,
-                    MOPUB_REWARDED_VIDEO_ID);
-        }
 
         @Override
         public void onVideoComplete() {
-            if (mRewardedVideoCurrencyName == null) {
+            if (getRewardedAdCurrencyName() == null) {
                 MoPubLog.d("No rewarded video was loaded, so no reward is possible");
             } else {
-                MoPubRewardedVideoManager.onRewardedVideoCompleted(MoPubRewardedVideo.class,
-                        MOPUB_REWARDED_VIDEO_ID,
-                        MoPubReward.success(mRewardedVideoCurrencyName,
-                                mRewardedVideoCurrencyAmount));
+                MoPubRewardedVideoManager.onRewardedVideoCompleted(mCustomEventClass,
+                        getAdNetworkId(),
+                        MoPubReward.success(getRewardedAdCurrencyName(),
+                                getRewardedAdCurrencyAmount()));
             }
         }
     }
@@ -186,26 +86,14 @@ public void onVideoComplete() {
     @Deprecated
     @VisibleForTesting
     void setRewardedVastVideoInterstitial(
-            @NonNull final RewardedVastVideoInterstitial rewardedVastVideoInterstitial) {
+            @Nullable final RewardedVastVideoInterstitial rewardedVastVideoInterstitial) {
         mRewardedVastVideoInterstitial = rewardedVastVideoInterstitial;
     }
 
     @Deprecated
     @VisibleForTesting
     @Nullable
-    String getRewardedVideoCurrencyName() {
-        return mRewardedVideoCurrencyName;
-    }
-
-    @Deprecated
-    @VisibleForTesting
-    int getRewardedVideoCurrencyAmount() {
-        return mRewardedVideoCurrencyAmount;
-    }
-
-    @Deprecated
-    @VisibleForTesting
-    void setIsLoaded(final boolean isLoaded) {
-        mIsLoaded = isLoaded;
+    RewardedVastVideoInterstitial getRewardedVastVideoInterstitial() {
+        return mRewardedVastVideoInterstitial;
     }
 }
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java
index ff9361f1..bf5a12f8 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java
@@ -34,6 +34,11 @@
      */
     public void onRewardedVideoPlaybackError(@NonNull String adUnitId, @NonNull MoPubErrorCode errorCode);
 
+    /**
+     * Called when a rewarded video is clicked.
+     */
+    public void onRewardedVideoClicked(@NonNull String adUnitId);
+
     /**
      * Called when a rewarded video is closed. At this point your application should resume.
      */
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
index 534d2c6a..c7228b7c 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 import android.content.Context;
+import android.content.SharedPreferences;
 import android.location.Location;
 import android.os.Handler;
 import android.os.Looper;
@@ -18,10 +19,13 @@
 import com.mopub.common.MediationSettings;
 import com.mopub.common.MoPubReward;
 import com.mopub.common.Preconditions;
+import com.mopub.common.SharedPreferencesHelper;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Json;
 import com.mopub.common.util.MoPubCollections;
 import com.mopub.common.util.Reflection;
+import com.mopub.common.util.ReflectionTarget;
 import com.mopub.common.util.Utils;
 import com.mopub.network.AdRequest;
 import com.mopub.network.AdResponse;
@@ -31,21 +35,37 @@
 import com.mopub.volley.RequestQueue;
 import com.mopub.volley.VolleyError;
 
+import org.json.JSONException;
+import org.json.JSONObject;
+
 import java.lang.ref.WeakReference;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.LinkedHashSet;
+import java.util.LinkedList;
+import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.TreeMap;
 
+import static com.mopub.mobileads.MoPubErrorCode.EXPIRED;
+
 /**
- * Handles requesting Rewarded Video ads and mapping Rewarded Video SDK settings to the CustomEvent
+ * Handles requesting Rewarded ads and mapping Rewarded Ad SDK settings to the CustomEvent
  * that is being loaded.
  */
 public class MoPubRewardedVideoManager {
     private static MoPubRewardedVideoManager sInstance;
+    @NonNull private static SharedPreferences sCustomEventSharedPrefs;
+    private static final String CUSTOM_EVENT_PREF_NAME = "mopubCustomEventSettings";
     private static final int DEFAULT_LOAD_TIMEOUT = Constants.THIRTY_SECONDS_MILLIS;
+    private static final String CURRENCIES_JSON_REWARDS_MAP_KEY = "rewards";
+    private static final String CURRENCIES_JSON_REWARD_NAME_KEY = "name";
+    private static final String CURRENCIES_JSON_REWARD_AMOUNT_KEY = "amount";
+    @VisibleForTesting
+    static final int CUSTOM_DATA_MAX_LENGTH_BYTES = 8192;
 
     /**
      * This must an integer because the backend only supports int types for api version.
@@ -56,7 +76,7 @@
     @NonNull private WeakReference<Activity> mMainActivity;
     @NonNull private final Context mContext;
     @NonNull private final AdRequestStatusMapping mAdRequestStatus;
-    @NonNull private final RewardedVideoData mRewardedVideoData;
+    @NonNull private final RewardedAdData mRewardedAdData;
     @Nullable private MoPubRewardedVideoListener mVideoListener;
 
     @NonNull private final Set<MediationSettings> mGlobalMediationSettings;
@@ -111,7 +131,7 @@ public RequestParameters(@Nullable final String keywords, @Nullable final Locati
     private MoPubRewardedVideoManager(@NonNull Activity mainActivity, MediationSettings... mediationSettings) {
         mMainActivity = new WeakReference<Activity>(mainActivity);
         mContext = mainActivity.getApplicationContext();
-        mRewardedVideoData = new RewardedVideoData();
+        mRewardedAdData = new RewardedAdData();
         mCallbackHandler = new Handler(Looper.getMainLooper());
         mGlobalMediationSettings = new HashSet<MediationSettings>();
         MoPubCollections.addAllNonNull(mGlobalMediationSettings, mediationSettings);
@@ -120,6 +140,68 @@ private MoPubRewardedVideoManager(@NonNull Activity mainActivity, MediationSetti
         mTimeoutMap = new HashMap<String, Runnable>();
 
         mAdRequestStatus = new AdRequestStatusMapping();
+
+        sCustomEventSharedPrefs =
+                SharedPreferencesHelper.getSharedPreferences(mContext, CUSTOM_EVENT_PREF_NAME);
+    }
+
+    @NonNull
+    public static synchronized List<CustomEventRewardedVideo> initNetworks(
+            @NonNull final Activity mainActivity,
+            @NonNull final List<Class<? extends CustomEventRewardedVideo>> networksToInit) {
+        Preconditions.checkNotNull(mainActivity);
+        Preconditions.checkNotNull(networksToInit);
+
+        if (sInstance == null) {
+            logErrorNotInitialized();
+            return Collections.emptyList();
+        }
+
+        // List of networks that end up getting initialized.
+        List<CustomEventRewardedVideo> initializedNetworksList = new LinkedList<>();
+
+        // Fetch saved network init settings from SharedPrefs.
+        final Map<String, ?> networkInitSettings = sCustomEventSharedPrefs.getAll();
+        MoPubLog.d(String.format(Locale.US, "fetched init settings for %s networks: %s",
+                networkInitSettings.size(), networkInitSettings.keySet()));
+
+        // Dedupe array of networks to init.
+        final LinkedHashSet<Class<? extends CustomEventRewardedVideo>> uniqueNetworksToInit =
+                new LinkedHashSet<>(networksToInit);
+
+        for (Class<? extends CustomEventRewardedVideo> networkClass : uniqueNetworksToInit) {
+            final String networkClassName = networkClass.getName();
+            if (networkInitSettings.containsKey(networkClassName)) {
+                try {
+                    final String networkInitParamsJsonString =
+                            (String) networkInitSettings.get(networkClassName);
+
+                    final Map<String, String> networkInitParamsMap =
+                            Json.jsonStringToMap(networkInitParamsJsonString);
+
+                    final CustomEventRewardedVideo customEvent =
+                            Reflection.instantiateClassWithEmptyConstructor(
+                                    networkClassName,
+                                    CustomEventRewardedVideo.class);
+
+                    MoPubLog.d(String.format(Locale.US, "Initializing %s with params %s",
+                            networkClassName, networkInitParamsMap));
+
+                    customEvent.checkAndInitializeSdk(
+                            mainActivity,
+                            Collections.<String, Object>emptyMap(),
+                            networkInitParamsMap);
+
+                    initializedNetworksList.add(customEvent);
+                } catch (Exception e) {
+                    MoPubLog.e("Error fetching init settings for network " + networkClassName);
+                }
+            } else {
+                MoPubLog.d("Init settings not found for " + networkClassName);
+            }
+        }
+
+        return initializedNetworksList;
     }
 
     public static synchronized void init(@NonNull Activity mainActivity, MediationSettings... mediationSettings) {
@@ -131,6 +213,7 @@ public static synchronized void init(@NonNull Activity mainActivity, MediationSe
         }
     }
 
+    @ReflectionTarget
     public static void updateActivity(@NonNull Activity activity) {
         if (sInstance != null) {
             sInstance.mMainActivity = new WeakReference<Activity>(activity);
@@ -222,16 +305,32 @@ public static void setVideoListener(@Nullable MoPubRewardedVideoListener listene
     public static void loadVideo(@NonNull final String adUnitId,
             @Nullable final RequestParameters requestParameters,
             @Nullable final MediationSettings... mediationSettings) {
+        Preconditions.checkNotNull(adUnitId);
+
         if (sInstance == null) {
             logErrorNotInitialized();
             return;
         }
 
         final String currentlyShowingAdUnitId =
-                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
-        if (!TextUtils.isEmpty(currentlyShowingAdUnitId)) {
-            MoPubLog.d(String.format(Locale.US, "Did not queue rewarded video request for ad " +
-                    "unit %s. The video is already showing.", adUnitId));
+                sInstance.mRewardedAdData.getCurrentlyShowingAdUnitId();
+        if (adUnitId.equals(currentlyShowingAdUnitId)) {
+            MoPubLog.d(String.format(Locale.US, "Did not queue rewarded ad request for ad " +
+                    "unit %s. The ad is already showing.", adUnitId));
+            return;
+        }
+
+        if (sInstance.mAdRequestStatus.canPlay(adUnitId)) {
+            MoPubLog.d(String.format(Locale.US, "Did not queue rewarded ad request for ad " +
+            "unit %s. This ad unit already finished loading and is ready to show.", adUnitId));
+            postToInstance(new Runnable() {
+                @Override
+                public void run() {
+                    if (sInstance.mVideoListener != null) {
+                        sInstance.mVideoListener.onRewardedVideoLoadSuccess(adUnitId);
+                    }
+                }
+            });
             return;
         }
 
@@ -245,7 +344,7 @@ public static void loadVideo(@NonNull final String adUnitId,
 
         final String customerId = requestParameters == null ? null : requestParameters.mCustomerId;
         if (!TextUtils.isEmpty(customerId)) {
-            sInstance.mRewardedVideoData.setCustomerId(customerId);
+            sInstance.mRewardedAdData.setCustomerId(customerId);
         }
 
         final AdUrlGenerator urlGenerator = new WebViewAdUrlGenerator(sInstance.mContext, false);
@@ -264,7 +363,7 @@ private static void loadVideo(@NonNull String adUnitId, @NonNull String adUrlStr
         }
 
         if (sInstance.mAdRequestStatus.isLoading(adUnitId)) {
-            MoPubLog.d(String.format(Locale.US, "Did not queue rewarded video request for ad " +
+            MoPubLog.d(String.format(Locale.US, "Did not queue rewarded ad request for ad " +
                     "unit %s. A request is already pending.", adUnitId));
             return;
         }
@@ -280,11 +379,13 @@ private static void loadVideo(@NonNull String adUnitId, @NonNull String adUrlStr
         final RequestQueue requestQueue = Networking.getRequestQueue(sInstance.mContext);
         requestQueue.add(request);
         sInstance.mAdRequestStatus.markLoading(adUnitId);
+        MoPubLog.d(String.format(Locale.US,
+                "Loading rewarded ad request for ad unit %s with URL %s", adUnitId, adUrlString));
     }
 
     public static boolean hasVideo(@NonNull String adUnitId) {
         if (sInstance != null) {
-            final CustomEventRewardedVideo customEvent = sInstance.mRewardedVideoData.getCustomEvent(adUnitId);
+            final CustomEventRewardedAd customEvent = sInstance.mRewardedAdData.getCustomEvent(adUnitId);
             return isPlayable(adUnitId, customEvent);
         } else {
             logErrorNotInitialized();
@@ -293,28 +394,86 @@ public static boolean hasVideo(@NonNull String adUnitId) {
     }
 
     public static void showVideo(@NonNull String adUnitId) {
-        if (sInstance != null) {
-            final CustomEventRewardedVideo customEvent = sInstance.mRewardedVideoData.getCustomEvent(adUnitId);
-            if (isPlayable(adUnitId, customEvent)) {
-                sInstance.mRewardedVideoData.updateCustomEventLastShownRewardMapping(
-                        customEvent.getClass(),
-                        sInstance.mRewardedVideoData.getMoPubReward(adUnitId));
-                sInstance.mRewardedVideoData.setCurrentlyShowingAdUnitId(adUnitId);
-                sInstance.mAdRequestStatus.markPlayed(adUnitId);
-                customEvent.showVideo();
-            } else {
-                sInstance.failover(adUnitId, MoPubErrorCode.VIDEO_NOT_AVAILABLE);
+        showVideo(adUnitId, null);
+    }
+
+    public static void showVideo(@NonNull String adUnitId,
+            @Nullable String customData) {
+        if (sInstance == null) {
+            logErrorNotInitialized();
+            return;
+        }
+
+        if (customData != null && customData.length() > CUSTOM_DATA_MAX_LENGTH_BYTES) {
+            MoPubLog.w(String.format(
+                    Locale.US,
+                    "Provided rewarded ad custom data parameter longer than supported" +
+                            "(%d bytes, %d maximum)",
+                    customData.length(), CUSTOM_DATA_MAX_LENGTH_BYTES));
+        }
+
+        final CustomEventRewardedAd customEvent = sInstance.mRewardedAdData.getCustomEvent(adUnitId);
+        if (isPlayable(adUnitId, customEvent)) {
+            // If there are rewards available but no reward is selected, fail over.
+            if (!sInstance.mRewardedAdData.getAvailableRewards(adUnitId).isEmpty()
+                    && sInstance.mRewardedAdData.getMoPubReward(adUnitId) == null) {
+                sInstance.failover(adUnitId, MoPubErrorCode.REWARD_NOT_SELECTED);
+                return;
             }
+
+            sInstance.mRewardedAdData.updateCustomEventLastShownRewardMapping(
+                    customEvent.getClass(),
+                    sInstance.mRewardedAdData.getMoPubReward(adUnitId));
+            sInstance.mRewardedAdData.updateAdUnitToCustomDataMapping(adUnitId, customData);
+            sInstance.mRewardedAdData.setCurrentlyShowingAdUnitId(adUnitId);
+            sInstance.mAdRequestStatus.markPlayed(adUnitId);
+            customEvent.show();
         } else {
-            logErrorNotInitialized();
+            if (sInstance.mAdRequestStatus.isLoading(adUnitId)) {
+                MoPubLog.d("Rewarded ad is not ready to be shown yet.");
+            } else {
+                MoPubLog.d("No rewarded ad loading or loaded.");
+            }
+
+            sInstance.failover(adUnitId, MoPubErrorCode.VIDEO_NOT_AVAILABLE);
         }
     }
 
-    private static boolean isPlayable(String adUnitId, @Nullable CustomEventRewardedVideo customEvent) {
+    private static boolean isPlayable(String adUnitId, @Nullable CustomEventRewardedAd customEvent) {
         return (sInstance != null
                 && sInstance.mAdRequestStatus.canPlay(adUnitId)
                 && customEvent != null
-                && customEvent.hasVideoAvailable());
+                && customEvent.isReady());
+    }
+
+    /**
+     * Retrieves the set of available {@link MoPubReward} instance(s) for this AdUnit.
+     * @param adUnitId MoPub adUnitId String
+     * @return a set of {@link MoPubReward} instance(s) if available, else an empty set.
+     */
+    @NonNull
+    public static Set<MoPubReward> getAvailableRewards(@NonNull String adUnitId) {
+        if (sInstance != null) {
+            return sInstance.mRewardedAdData.getAvailableRewards(adUnitId);
+        } else {
+            logErrorNotInitialized();
+            return Collections.<MoPubReward>emptySet();
+        }
+    }
+
+    /**
+     * Selects the reward for this AdUnit from available {@link MoPubReward} instances.
+     * If this AdUnit does not have any rewards, or if the selected reward is not available
+     * for this AdUnit, then no reward will be selected for this AdUnit.
+     * @param adUnitId MoPub adUnitId String
+     * @param selectedReward selected {@link MoPubReward}
+     */
+    public static void selectReward(@NonNull String adUnitId, @NonNull MoPubReward selectedReward) {
+        if (sInstance != null) {
+            sInstance.mRewardedAdData.selectReward(adUnitId, selectedReward);
+        } else {
+            logErrorNotInitialized();
+        }
     }
 
     ///// Ad Request / Response methods /////
@@ -337,9 +496,9 @@ private void onAdSuccess(AdResponse adResponse, String adUnitId) {
             return;
         }
 
-        // We only allow one rewarded video to be loaded at a time for each ad unit. This should
-        // clear out the old rewarded video if there already was one loaded and not played.
-        final CustomEventRewardedVideo oldRewardedVideo = mRewardedVideoData.getCustomEvent(
+        // We only allow one rewarded ad to be loaded at a time for each ad unit. This should
+        // clear out the old rewarded ad if there already was one loaded and not played.
+        final CustomEventRewardedAd oldRewardedVideo = mRewardedAdData.getCustomEvent(
                 adUnitId);
         if (oldRewardedVideo != null) {
             oldRewardedVideo.onInvalidate();
@@ -347,34 +506,61 @@ private void onAdSuccess(AdResponse adResponse, String adUnitId) {
 
         try {
             // Instantiate a custom event
-            final CustomEventRewardedVideo customEvent =
+            final CustomEventRewardedAd customEvent =
                     Reflection.instantiateClassWithEmptyConstructor(
                             customEventClassName,
-                            CustomEventRewardedVideo.class);
+                            CustomEventRewardedAd.class);
 
             // Put important data into localExtras...
             final Map<String, Object> localExtras = new TreeMap<String, Object>();
             localExtras.put(DataKeys.AD_UNIT_ID_KEY, adUnitId);
-            localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY,
+            localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY,
                     adResponse.getRewardedVideoCurrencyName());
-            localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY,
+            localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY,
                     adResponse.getRewardedVideoCurrencyAmount());
+            localExtras.put(DataKeys.REWARDED_AD_DURATION_KEY,
+                    adResponse.getRewardedDuration());
+            localExtras.put(DataKeys.SHOULD_REWARD_ON_CLICK_KEY,
+                    adResponse.shouldRewardOnClick());
             localExtras.put(DataKeys.AD_REPORT_KEY,
                     new AdReport(adUnitId, ClientMetadata.getInstance(mContext), adResponse));
             localExtras.put(DataKeys.BROADCAST_IDENTIFIER_KEY, Utils.generateUniqueId());
 
-            localExtras.put(DataKeys.REWARDED_VIDEO_CUSTOMER_ID,
-                    mRewardedVideoData.getCustomerId());
-            mRewardedVideoData.updateAdUnitRewardMapping(adUnitId,
-                    adResponse.getRewardedVideoCurrencyName(),
-                    adResponse.getRewardedVideoCurrencyAmount());
-            mRewardedVideoData.updateAdUnitToServerCompletionUrlMapping(adUnitId,
+            localExtras.put(DataKeys.REWARDED_AD_CUSTOMER_ID_KEY,
+                    mRewardedAdData.getCustomerId());
+
+            // Check for new multi-currency header X-Rewarded-Currencies.
+            final String rewardedCurrencies = adResponse.getRewardedCurrencies();
+
+            // Clear any available rewards for this AdUnit.
+            mRewardedAdData.resetAvailableRewards(adUnitId);
+
+            // Clear any reward previously selected for this AdUnit.
+            mRewardedAdData.resetSelectedReward(adUnitId);
+
+            // If the new multi-currency header doesn't exist, fallback to parsing legacy headers
+            // X-Rewarded-Video-Currency-Name and X-Rewarded-Video-Currency-Amount.
+            if (TextUtils.isEmpty(rewardedCurrencies)) {
+                mRewardedAdData.updateAdUnitRewardMapping(adUnitId,
+                        adResponse.getRewardedVideoCurrencyName(),
+                        adResponse.getRewardedVideoCurrencyAmount());
+            } else {
+                try {
+                    parseMultiCurrencyJson(adUnitId, rewardedCurrencies);
+                } catch (Exception e) {
+                    MoPubLog.e("Error parsing rewarded currencies JSON header: " + rewardedCurrencies);
+                    failover(adUnitId, MoPubErrorCode.REWARDED_CURRENCIES_PARSING_ERROR);
+                    return;
+                }
+            }
+
+            mRewardedAdData.updateAdUnitToServerCompletionUrlMapping(adUnitId,
                     adResponse.getRewardedVideoCompletionUrl());
 
             Activity mainActivity = mMainActivity.get();
             if (mainActivity == null) {
                 MoPubLog.d("Could not load custom event because Activity reference was null. Call" +
-                        " MoPub#updateActivity before requesting more rewarded videos.");
+                        " MoPub#updateActivity before requesting more rewarded ads.");
 
                 // Don't go through the ordinary failover process since we have
                 // no activity for the failover to use.
@@ -386,7 +572,7 @@ private void onAdSuccess(AdResponse adResponse, String adUnitId) {
             Runnable timeout = new Runnable() {
                 @Override
                 public void run() {
-                    MoPubLog.d("Custom Event failed to load rewarded video in a timely fashion.");
+                    MoPubLog.d("Custom Event failed to load rewarded ad in a timely fashion.");
                     onRewardedVideoLoadFailure(customEvent.getClass(), customEvent.getAdNetworkId(),
                             MoPubErrorCode.NETWORK_TIMEOUT);
                     customEvent.onInvalidate();
@@ -395,15 +581,35 @@ public void run() {
             mCustomEventTimeoutHandler.postDelayed(timeout, timeoutMillis);
             mTimeoutMap.put(adUnitId, timeout);
 
+            // Fetch the server extras mappings.
+            final Map<String, String> serverExtras = adResponse.getServerExtras();
+
+            // If the custom event is a third-party rewarded video, the server extras mappings
+            // contain init parameters for this custom event class. Serialize the mappings into a
+            // JSON string, then update SharedPreferences keying on the custom event class name.
+            if (customEvent instanceof CustomEventRewardedVideo) {
+                final String serverExtrasJsonString = (new JSONObject(serverExtras)).toString();
+
+                MoPubLog.d(String.format(Locale.US,
+                        "Updating init settings for custom event %s with params %s",
+                        customEventClassName, serverExtrasJsonString));
+
+                sCustomEventSharedPrefs
+                        .edit()
+                        .putString(customEventClassName, serverExtrasJsonString)
+                        .apply();
+            }
+
             // Load custom event
-            customEvent.loadCustomEvent(mainActivity, localExtras, adResponse.getServerExtras());
+            MoPubLog.d(String.format(Locale.US,
+                    "Loading custom event with class name %s", customEventClassName));
+            customEvent.loadCustomEvent(mainActivity, localExtras, serverExtras);
 
-            final CustomEventRewardedVideo.CustomEventRewardedVideoListener listener =
-                    customEvent.getVideoListenerForSdk();
             final String adNetworkId = customEvent.getAdNetworkId();
-            mRewardedVideoData.updateAdUnitCustomEventMapping(adUnitId, customEvent, listener, adNetworkId);
+            mRewardedAdData.updateAdUnitCustomEventMapping(adUnitId, customEvent, adNetworkId);
         } catch (Exception e) {
-            MoPubLog.e(String.format(Locale.US, "Couldn't create custom event with class name %s", customEventClassName));
+            MoPubLog.e(String.format(Locale.US,
+                    "Couldn't create custom event with class name %s", customEventClassName));
             failover(adUnitId, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
         }
     }
@@ -429,14 +635,53 @@ private void onAdError(@NonNull VolleyError volleyError, @NonNull String adUnitI
         failover(adUnitId, errorCode);
     }
 
+    private void parseMultiCurrencyJson(@NonNull String adUnitId,
+            @NonNull String rewardedCurrencies) throws JSONException {
+        /* Parse multi-currency JSON string, an example below:
+            {
+                "rewards": [
+                    { "name": "Coins", "amount": 8 },
+                    { "name": "Diamonds", "amount": 1 },
+                    { "name": "Diamonds", "amount": 10 },
+                    { "name": "Energy", "amount": 20 }
+                ]
+            }
+         */
+
+        final Map<String, String> rewardsMap = Json.jsonStringToMap(rewardedCurrencies);
+        final String[] rewardsArray =
+                Json.jsonArrayToStringArray(rewardsMap.get(CURRENCIES_JSON_REWARDS_MAP_KEY));
+
+        // If there's only one reward, update adunit-to-reward mapping now
+        if (rewardsArray.length == 1) {
+            Map<String, String> rewardData = Json.jsonStringToMap(rewardsArray[0]);
+            mRewardedAdData.updateAdUnitRewardMapping(
+                    adUnitId,
+                    rewardData.get(CURRENCIES_JSON_REWARD_NAME_KEY),
+                    rewardData.get(CURRENCIES_JSON_REWARD_AMOUNT_KEY));
+        }
+
+        // Loop through awards array and create a set of available reward(s) for this adunit
+        for (String rewardDataStr : rewardsArray) {
+            Map<String, String> rewardData = Json.jsonStringToMap(rewardDataStr);
+            mRewardedAdData.addAvailableReward(
+                    adUnitId,
+                    rewardData.get(CURRENCIES_JSON_REWARD_NAME_KEY),
+                    rewardData.get(CURRENCIES_JSON_REWARD_AMOUNT_KEY));
+        }
+    }
+
     private void failover(@NonNull final String adUnitId, @NonNull final MoPubErrorCode errorCode) {
+        Preconditions.checkNotNull(adUnitId);
+        Preconditions.checkNotNull(errorCode);
+
         final String failoverUrl = mAdRequestStatus.getFailoverUrl(adUnitId);
         mAdRequestStatus.markFail(adUnitId);
 
-        if (failoverUrl != null) {
+        if (failoverUrl != null && !errorCode.equals(EXPIRED)) {
             loadVideo(adUnitId, failoverUrl);
-        } else if (mVideoListener != null) {
-            mVideoListener.onRewardedVideoLoadFailure(adUnitId, errorCode);
+        } else if (sInstance.mVideoListener != null) {
+            sInstance.mVideoListener.onRewardedVideoLoadFailure(adUnitId, errorCode);
         }
     }
 
@@ -450,15 +695,15 @@ private void cancelTimeouts(@NonNull String moPubId) {
     //////// Listener methods that should be called by third-party SDKs. //////////
 
     /**
-     * Notify the manager that a rewarded video loaded successfully.
+     * Notify the manager that a rewarded ad loaded successfully.
      *
      * @param customEventClass - the Class of the third-party custom event object.
      * @param thirdPartyId - the ad id of the third party SDK. This may be an empty String if the
      *                     SDK does not use ad ids, zone ids, or a analogous concept.
-     * @param <T> - a class that extends {@link CustomEventRewardedVideo}. Only rewarded video
+     * @param <T> - a class that extends {@link CustomEventRewardedAd}. Only rewarded ad
      *           custom events should use these methods.
      */
-    public static <T extends CustomEventRewardedVideo>
+    public static <T extends CustomEventRewardedAd>
     void onRewardedVideoLoadSuccess(@NonNull final Class<T> customEventClass, @NonNull final String thirdPartyId) {
         postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
             @Override
@@ -471,7 +716,7 @@ protected void forEach(@NonNull final String moPubId) {
         });
     }
 
-    public static <T extends CustomEventRewardedVideo>
+    public static <T extends CustomEventRewardedAd>
     void onRewardedVideoLoadFailure(@NonNull final Class<T> customEventClass, final String thirdPartyId, final MoPubErrorCode errorCode) {
         postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
             @Override
@@ -482,10 +727,10 @@ protected void forEach(@NonNull final String moPubId) {
         });
     }
 
-    public static <T extends CustomEventRewardedVideo>
+    public static <T extends CustomEventRewardedAd>
     void onRewardedVideoStarted(@NonNull final Class<T> customEventClass, final String thirdPartyId) {
         final String currentlyShowingAdUnitId =
-                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
+                sInstance.mRewardedAdData.getCurrentlyShowingAdUnitId();
         if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
             postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
                 @Override
@@ -514,10 +759,10 @@ private static void onRewardedVideoStartedAction(@NonNull final String adUnitId)
         sInstance.mAdRequestStatus.clearImpressionUrl(adUnitId);
     }
 
-    public static <T extends CustomEventRewardedVideo>
+    public static <T extends CustomEventRewardedAd>
     void onRewardedVideoPlaybackError(@NonNull final Class<T> customEventClass, final String thirdPartyId, final MoPubErrorCode errorCode) {
         final String currentlyShowingAdUnitId =
-                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
+                sInstance.mRewardedAdData.getCurrentlyShowingAdUnitId();
         if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
             postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
                 @Override
@@ -543,10 +788,10 @@ private static void onRewardedVideoPlaybackErrorAction(@NonNull final String adU
         }
     }
 
-    public static <T extends CustomEventRewardedVideo>
+    public static <T extends CustomEventRewardedAd>
     void onRewardedVideoClicked(@NonNull final Class<T> customEventClass, final String thirdPartyId) {
         final String currentlyShowingAdUnitId =
-                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
+                sInstance.mRewardedAdData.getCurrentlyShowingAdUnitId();
         if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
             postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
                 @Override
@@ -566,16 +811,21 @@ public void run() {
 
     private static void onRewardedVideoClickedAction(@NonNull final String adUnitId) {
         Preconditions.checkNotNull(adUnitId);
+
+        if (sInstance.mVideoListener != null) {
+            sInstance.mVideoListener.onRewardedVideoClicked(adUnitId);
+        }
+
         TrackingRequest.makeTrackingHttpRequest(
                 sInstance.mAdRequestStatus.getClickTrackerUrlString(adUnitId),
                 sInstance.mContext);
         sInstance.mAdRequestStatus.clearClickUrl(adUnitId);
     }
 
-    public static <T extends CustomEventRewardedVideo>
+    public static <T extends CustomEventRewardedAd>
     void onRewardedVideoClosed(@NonNull final Class<T> customEventClass, final String thirdPartyId) {
         final String currentlyShowingAdUnitId =
-                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
+                sInstance.mRewardedAdData.getCurrentlyShowingAdUnitId();
         if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
             postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
                 @Override
@@ -591,7 +841,7 @@ public void run() {
                 }
             });
         }
-        sInstance.mRewardedVideoData.setCurrentlyShowingAdUnitId(null);
+        sInstance.mRewardedAdData.setCurrentlyShowingAdUnitId(null);
     }
 
     private static void onRewardedVideoClosedAction(@NonNull final String adUnitId) {
@@ -601,51 +851,88 @@ private static void onRewardedVideoClosedAction(@NonNull final String adUnitId)
         }
     }
 
-    public static <T extends CustomEventRewardedVideo>
-    void onRewardedVideoCompleted(@NonNull final Class<T> customEventClass, final String thirdPartyId, @NonNull final MoPubReward moPubReward) {
-        // Unlike other callbacks in this class, only call the listener once with all the MoPubIds in the matching set.
+    public static <T extends CustomEventRewardedAd>
+    void onRewardedVideoCompleted(@NonNull final Class<T> customEventClass,
+            final String thirdPartyId, @NonNull final MoPubReward moPubReward) {
+        // Unlike other callbacks in this class, only call the listener once with all the MoPubIds
+        // in the matching set.
         final String currentlyShowingAdUnitId =
-                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
-        final String serverCompletionUrl = sInstance.mRewardedVideoData.getServerCompletionUrl(
+                sInstance.mRewardedAdData.getCurrentlyShowingAdUnitId();
+
+        rewardOnClient(customEventClass, thirdPartyId, moPubReward, currentlyShowingAdUnitId);
+        rewardOnServer(currentlyShowingAdUnitId);
+    }
+
+    private static void rewardOnServer(@Nullable final String currentlyShowingAdUnitId) {
+        final String serverCompletionUrl = sInstance.mRewardedAdData.getServerCompletionUrl(
                 currentlyShowingAdUnitId);
-        if (TextUtils.isEmpty(serverCompletionUrl)) {
+        if (!TextUtils.isEmpty(serverCompletionUrl)) {
             postToInstance(new Runnable() {
                 @Override
                 public void run() {
-                    final MoPubReward chosenReward = chooseReward(
-                            sInstance.mRewardedVideoData.getLastShownMoPubReward(customEventClass),
-                            moPubReward);
-
-                    Set<String> rewardedIds = new HashSet<String>();
-                    if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
-                        final Set<String> moPubIds = sInstance.mRewardedVideoData.getMoPubIdsForAdNetwork(
-                                customEventClass, thirdPartyId);
-                        rewardedIds.addAll(moPubIds);
-                    } else {
-                        // If we know which ad unit is showing, only reward the currently showing
-                        // ad unit.
-                        rewardedIds.add(currentlyShowingAdUnitId);
-                    }
+                    final MoPubReward reward
+                            = sInstance.mRewardedAdData.getMoPubReward(currentlyShowingAdUnitId);
+
+                    final String rewardName = (reward == null)
+                            ? MoPubReward.NO_REWARD_LABEL
+                            : reward.getLabel();
+                    final String rewardAmount = (reward == null)
+                            ? Integer.toString(MoPubReward.DEFAULT_REWARD_AMOUNT)
+                            : Integer.toString(reward.getAmount());
+
+                    final CustomEventRewardedAd customEvent =
+                            sInstance.mRewardedAdData.getCustomEvent(currentlyShowingAdUnitId);
+                    final String className = (customEvent == null || customEvent.getClass() == null)
+                            ? null
+                            : customEvent.getClass().getName();
+
+                    final String customData = sInstance.mRewardedAdData.getCustomData(
+                            currentlyShowingAdUnitId);
 
-                    if (sInstance.mVideoListener != null) {
-                        sInstance.mVideoListener.onRewardedVideoCompleted(rewardedIds,
-                                chosenReward);
-                    }
-                }
-            });
-        } else {
-            postToInstance(new Runnable() {
-                @Override
-                public void run() {
                     RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(
                             sInstance.mContext,
                             serverCompletionUrl,
-                            sInstance.mRewardedVideoData.getCustomerId());
+                            sInstance.mRewardedAdData.getCustomerId(),
+                            rewardName,
+                            rewardAmount,
+                            className,
+                            customData);
                 }
             });
         }
     }
 
+    private static <T extends CustomEventRewardedAd> void rewardOnClient(
+            @NonNull final Class<T> customEventClass,
+            @Nullable final String thirdPartyId,
+            @NonNull final MoPubReward moPubReward,
+            @Nullable final String currentlyShowingAdUnitId) {
+        postToInstance(new Runnable() {
+            @Override
+            public void run() {
+                final MoPubReward chosenReward = chooseReward(
+                        sInstance.mRewardedAdData.getLastShownMoPubReward(customEventClass),
+                        moPubReward);
+
+                Set<String> rewardedIds = new HashSet<String>();
+                if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
+                    final Set<String> moPubIds = sInstance.mRewardedAdData.getMoPubIdsForAdNetwork(
+                            customEventClass, thirdPartyId);
+                    rewardedIds.addAll(moPubIds);
+                } else {
+                    // If we know which ad unit is showing, only reward the currently showing
+                    // ad unit.
+                    rewardedIds.add(currentlyShowingAdUnitId);
+                }
+
+                if (sInstance.mVideoListener != null) {
+                    sInstance.mVideoListener.onRewardedVideoCompleted(rewardedIds,
+                            chosenReward);
+                }
+            }
+        });
+    }
+
     @VisibleForTesting
     static MoPubReward chooseReward(@Nullable final MoPubReward moPubReward, @NonNull final MoPubReward networkReward) {
         if (!networkReward.isSuccessful()) {
@@ -667,20 +954,20 @@ private static void postToInstance(@NonNull Runnable runnable) {
     }
 
     private static void logErrorNotInitialized() {
-        MoPubLog.e("MoPub rewarded video was not initialized. You must call " +
+        MoPubLog.e("MoPub rewarded ad was not initialized. You must call " +
                 "MoPub.initializeRewardedVideo() before loading or attempting " +
-                "to play video ads.");
+                "to play rewarded ads.");
     }
 
     /**
-     * A runnable that calls forEach on each member of the rewarded video data passed to the runnable.
+     * A runnable that calls forEach on each member of the rewarded ad data passed to the runnable.
      */
     private static abstract class ForEachMoPubIdRunnable implements Runnable {
 
-        @NonNull private final Class<? extends CustomEventRewardedVideo> mCustomEventClass;
+        @NonNull private final Class<? extends CustomEventRewardedAd> mCustomEventClass;
         @NonNull private final String mThirdPartyId;
 
-        ForEachMoPubIdRunnable(@NonNull final Class<? extends CustomEventRewardedVideo> customEventClass,
+        ForEachMoPubIdRunnable(@NonNull final Class<? extends CustomEventRewardedAd> customEventClass,
                 @NonNull final String thirdPartyId) {
             Preconditions.checkNotNull(customEventClass);
             Preconditions.checkNotNull(thirdPartyId);
@@ -692,7 +979,7 @@ private static void logErrorNotInitialized() {
 
         @Override
         public void run() {
-            final Set<String> moPubIds = sInstance.mRewardedVideoData
+            final Set<String> moPubIds = sInstance.mRewardedAdData
                     .getMoPubIdsForAdNetwork(mCustomEventClass, mThirdPartyId);
             for (String moPubId : moPubIds) {
                 forEach(moPubId);
@@ -703,10 +990,28 @@ public void run() {
     @Deprecated
     @VisibleForTesting
     @Nullable
-    static RewardedVideoData getRewardedVideoData() {
+    static RewardedAdData getRewardedAdData() {
         if (sInstance != null) {
-            return sInstance.mRewardedVideoData;
+            return sInstance.mRewardedAdData;
         }
         return null;
     }
+
+    @Deprecated
+    @VisibleForTesting
+    @Nullable
+    static AdRequestStatusMapping getAdRequestStatusMapping() {
+        if (sInstance != null) {
+            return sInstance.mAdRequestStatus;
+        }
+        return null;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    static void setCustomEventSharedPrefs(@NonNull SharedPreferences sharedPrefs) {
+        Preconditions.checkNotNull(sharedPrefs);
+
+        sCustomEventSharedPrefs = sharedPrefs;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
index 7380fbf2..17a641e8 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
@@ -5,7 +5,12 @@
 import android.support.annotation.Nullable;
 
 import com.mopub.common.MediationSettings;
+import com.mopub.common.MoPubReward;
 import com.mopub.common.Preconditions;
+import com.mopub.common.util.ReflectionTarget;
+
+import java.util.List;
+import java.util.Set;
 
 /**
  * MoPubRewardedVideos is a utility class that holds controller methods for other MoPub rewarded
@@ -13,17 +18,31 @@
  */
 public class MoPubRewardedVideos {
 
+    @ReflectionTarget
+    public static void initializeRewardedVideo(@NonNull Activity activity,
+            MediationSettings... mediationSettings) {
+        Preconditions.checkNotNull(activity);
+
+        MoPubRewardedVideoManager.init(activity, mediationSettings);
+    }
+
+    @ReflectionTarget
     public static void initializeRewardedVideo(@NonNull Activity activity,
+            @NonNull List<Class<? extends CustomEventRewardedVideo>> networksToInit,
             MediationSettings... mediationSettings) {
         Preconditions.checkNotNull(activity);
+        Preconditions.checkNotNull(networksToInit);
 
         MoPubRewardedVideoManager.init(activity, mediationSettings);
+        MoPubRewardedVideoManager.initNetworks(activity, networksToInit);
     }
 
+    @ReflectionTarget
     public static void setRewardedVideoListener(@Nullable MoPubRewardedVideoListener listener) {
         MoPubRewardedVideoManager.setVideoListener(listener);
     }
 
+    @ReflectionTarget
     public static void loadRewardedVideo(@NonNull String adUnitId,
             @Nullable MediationSettings... mediationSettings) {
         Preconditions.checkNotNull(adUnitId);
@@ -31,6 +50,7 @@ public static void loadRewardedVideo(@NonNull String adUnitId,
         MoPubRewardedVideoManager.loadVideo(adUnitId, null, mediationSettings);
     }
 
+    @ReflectionTarget
     public static void loadRewardedVideo(@NonNull String adUnitId,
             @Nullable MoPubRewardedVideoManager.RequestParameters requestParameters,
             @Nullable MediationSettings... mediationSettings) {
@@ -39,15 +59,39 @@ public static void loadRewardedVideo(@NonNull String adUnitId,
         MoPubRewardedVideoManager.loadVideo(adUnitId, requestParameters, mediationSettings);
     }
 
+    @ReflectionTarget
     public static boolean hasRewardedVideo(@NonNull String adUnitId) {
         Preconditions.checkNotNull(adUnitId);
 
         return MoPubRewardedVideoManager.hasVideo(adUnitId);
     }
 
+    @ReflectionTarget
     public static void showRewardedVideo(@NonNull String adUnitId) {
         Preconditions.checkNotNull(adUnitId);
 
         MoPubRewardedVideoManager.showVideo(adUnitId);
     }
+
+    @ReflectionTarget
+    public static void showRewardedVideo(@NonNull String adUnitId, @Nullable String customData) {
+        Preconditions.checkNotNull(adUnitId);
+
+        MoPubRewardedVideoManager.showVideo(adUnitId, customData);
+    }
+
+    @ReflectionTarget
+    public static Set<MoPubReward> getAvailableRewards(@NonNull String adUnitId) {
+        Preconditions.checkNotNull(adUnitId);
+
+        return MoPubRewardedVideoManager.getAvailableRewards(adUnitId);
+    }
+
+    @ReflectionTarget
+    public static void selectReward(@NonNull String adUnitId, @NonNull MoPubReward selectedReward) {
+        Preconditions.checkNotNull(adUnitId);
+        Preconditions.checkNotNull(selectedReward);
+
+        MoPubRewardedVideoManager.selectReward(adUnitId, selectedReward);
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoData.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdData.java
similarity index 53%
rename from mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoData.java
rename to mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdData.java
index 1023820d..c9cec328 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoData.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdData.java
@@ -8,48 +8,53 @@
 import com.mopub.common.MoPubReward;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
 
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.TreeMap;
 
 /**
- * Used to manage the mapping between MoPub ad unit ids and third-party ad network ids for rewarded videos.
+ * Used to manage the mapping between MoPub ad unit ids and third-party ad network ids for rewarded ads.
  */
-class RewardedVideoData {
+class RewardedAdData {
     @NonNull
-    private final Map<String, CustomEventRewardedVideo> mAdUnitToCustomEventMap;
+    private final Map<String, CustomEventRewardedAd> mAdUnitToCustomEventMap;
     @NonNull
     private final Map<String, MoPubReward> mAdUnitToRewardMap;
     @NonNull
+    private final Map<String, Set<MoPubReward>> mAdUnitToAvailableRewardsMap;
+    @NonNull
     private final Map<String, String> mAdUnitToServerCompletionUrlMap;
     @NonNull
-    private final Map<Class<? extends CustomEventRewardedVideo>, MoPubReward> mCustomEventToRewardMap;
+    private final Map<String, String> mAdUnitToCustomDataMap;
     @NonNull
-    private final Map<TwoPartKey, Set<String>> mCustomEventToMoPubIdMap;
+    private final Map<Class<? extends CustomEventRewardedAd>, MoPubReward> mCustomEventToRewardMap;
     @NonNull
-    private final Set<CustomEventRewardedVideo.CustomEventRewardedVideoListener> mAdNetworkListeners;
+    private final Map<TwoPartKey, Set<String>> mCustomEventToMoPubIdMap;
     @Nullable
     private String mCurrentlyShowingAdUnitId;
     @Nullable
     private String mCustomerId;
 
 
-    RewardedVideoData() {
-        mAdUnitToCustomEventMap = new TreeMap<String, CustomEventRewardedVideo>();
+    RewardedAdData() {
+        mAdUnitToCustomEventMap = new TreeMap<String, CustomEventRewardedAd>();
         mAdUnitToRewardMap = new TreeMap<String, MoPubReward>();
+        mAdUnitToAvailableRewardsMap = new TreeMap<String, Set<MoPubReward>>();
         mAdUnitToServerCompletionUrlMap = new TreeMap<String, String>();
-        mCustomEventToRewardMap = new HashMap<Class<? extends CustomEventRewardedVideo>, MoPubReward>();
+        mAdUnitToCustomDataMap = new TreeMap<String, String>();
+        mCustomEventToRewardMap = new HashMap<Class<? extends CustomEventRewardedAd>, MoPubReward>();
         mCustomEventToMoPubIdMap = new HashMap<TwoPartKey, Set<String>>();
-        mAdNetworkListeners = new HashSet<CustomEventRewardedVideo.CustomEventRewardedVideoListener>();
     }
 
     @Nullable
-    CustomEventRewardedVideo getCustomEvent(@NonNull String moPubId) {
+    CustomEventRewardedAd getCustomEvent(@Nullable String moPubId) {
         return mAdUnitToCustomEventMap.get(moPubId);
     }
 
@@ -58,6 +63,90 @@ MoPubReward getMoPubReward(@Nullable String moPubId) {
         return mAdUnitToRewardMap.get(moPubId);
     }
 
+    @Nullable
+    String getCustomData(@Nullable String moPubId) {
+        return mAdUnitToCustomDataMap.get(moPubId);
+    }
+
+    void addAvailableReward(
+            @NonNull String moPubId,
+            @Nullable String currencyName,
+            @Nullable String currencyAmount) {
+        Preconditions.checkNotNull(moPubId);
+        if (currencyName == null || currencyAmount == null) {
+            MoPubLog.e(String.format(Locale.US, "Currency name and amount cannot be null: " +
+                    "name = %s, amount = %s", currencyName, currencyAmount));
+            return;
+        }
+
+        int intCurrencyAmount;
+        try {
+            intCurrencyAmount = Integer.parseInt(currencyAmount);
+        } catch(NumberFormatException e) {
+            MoPubLog.e(String.format(Locale.US, "Currency amount must be an integer: %s",
+                    currencyAmount));
+            return;
+        }
+
+        if (intCurrencyAmount < 0) {
+            MoPubLog.e(String.format(Locale.US, "Currency amount cannot be negative: %s",
+                    currencyAmount));
+            return;
+        }
+
+        if (mAdUnitToAvailableRewardsMap.containsKey(moPubId)) {
+            mAdUnitToAvailableRewardsMap.get(moPubId)
+                    .add(MoPubReward.success(currencyName, intCurrencyAmount));
+        } else {
+            HashSet<MoPubReward> availableRewards = new HashSet<>();
+            availableRewards.add(MoPubReward.success(currencyName, intCurrencyAmount));
+            mAdUnitToAvailableRewardsMap.put(moPubId, availableRewards);
+        }
+    }
+
+    @NonNull
+    Set<MoPubReward> getAvailableRewards(@NonNull String moPubId) {
+        Preconditions.checkNotNull(moPubId);
+        Set<MoPubReward> availableRewards = mAdUnitToAvailableRewardsMap.get(moPubId);
+        return (availableRewards == null) ? Collections.<MoPubReward>emptySet() : availableRewards;
+    }
+
+    void selectReward(@NonNull String moPubId, @NonNull MoPubReward selectedReward) {
+        Preconditions.checkNotNull(moPubId);
+        Preconditions.checkNotNull(selectedReward);
+
+        Set<MoPubReward> availableRewards = mAdUnitToAvailableRewardsMap.get(moPubId);
+        if (availableRewards == null || availableRewards.isEmpty()) {
+            MoPubLog.e(String.format(
+                    Locale.US, "AdUnit %s does not have any rewards.", moPubId));
+            return;
+        }
+
+        if (!availableRewards.contains(selectedReward)) {
+            MoPubLog.e(String.format(
+                    Locale.US, "Selected reward is invalid for AdUnit %s.", moPubId));
+            return;
+        }
+
+        updateAdUnitRewardMapping(moPubId, selectedReward.getLabel(),
+                Integer.toString(selectedReward.getAmount()));
+    }
+
+    void resetAvailableRewards(@NonNull String moPubId) {
+        Preconditions.checkNotNull(moPubId);
+        Set<MoPubReward> availableRewards = mAdUnitToAvailableRewardsMap.get(moPubId);
+        if (availableRewards != null && !availableRewards.isEmpty()) {
+            availableRewards.clear();
+        }
+    }
+
+    void resetSelectedReward(@NonNull String moPubId) {
+        Preconditions.checkNotNull(moPubId);
+
+        // Clear any reward previously selected for this AdUnit
+        updateAdUnitRewardMapping(moPubId, null, null);
+    }
+
     @Nullable
     String getServerCompletionUrl(@Nullable final String moPubId) {
         if (TextUtils.isEmpty(moPubId)) {
@@ -67,13 +156,13 @@ String getServerCompletionUrl(@Nullable final String moPubId) {
     }
 
     @Nullable
-    MoPubReward getLastShownMoPubReward(@NonNull Class<? extends CustomEventRewardedVideo> customEventClass) {
+    MoPubReward getLastShownMoPubReward(@NonNull Class<? extends CustomEventRewardedAd> customEventClass) {
         return mCustomEventToRewardMap.get(customEventClass);
     }
 
     @NonNull
     Set<String> getMoPubIdsForAdNetwork(
-            @NonNull Class<? extends CustomEventRewardedVideo> customEventClass,
+            @NonNull Class<? extends CustomEventRewardedAd> customEventClass,
             @Nullable String adNetworkId) {
         if (adNetworkId == null) {
             final Set<String> allIds = new HashSet<String>();
@@ -94,11 +183,9 @@ MoPubReward getLastShownMoPubReward(@NonNull Class<? extends CustomEventRewarded
 
     void updateAdUnitCustomEventMapping(
             @NonNull String moPubId,
-            @NonNull CustomEventRewardedVideo customEvent,
-            @Nullable CustomEventRewardedVideo.CustomEventRewardedVideoListener listener,
+            @NonNull CustomEventRewardedAd customEvent,
             @NonNull String adNetworkId) {
         mAdUnitToCustomEventMap.put(moPubId, customEvent);
-        mAdNetworkListeners.add(listener);
         associateCustomEventWithMoPubId(customEvent.getClass(), adNetworkId, moPubId);
     }
 
@@ -117,10 +204,14 @@ void updateAdUnitRewardMapping(
         try {
             intCurrencyAmount = Integer.parseInt(currencyAmount);
         } catch(NumberFormatException e) {
+            MoPubLog.e(String.format(Locale.US, "Currency amount must be an integer: %s",
+                    currencyAmount));
             return;
         }
 
         if (intCurrencyAmount < 0) {
+            MoPubLog.e(String.format(Locale.US, "Currency amount cannot be negative: %s",
+                    currencyAmount));
             return;
         }
 
@@ -134,23 +225,23 @@ void updateAdUnitToServerCompletionUrlMapping(@NonNull final String moPubId,
     }
 
     /**
-     * This method should be called right before the rewarded video is shown in order to store the
+     * This method should be called right before the rewarded ad is shown in order to store the
      * reward associated with the custom event class. If called earlier in the rewarded lifecycle,
-     * it's possible that this mapping will be overridden by another reward value before the video
+     * it's possible that this mapping will be overridden by another reward value before the ad
      * is shown.
      *
-     * @param customEventClass the rewarded video custom event class
-     * @param moPubReward the reward from teh MoPub ad server returned in HTTP headers
+     * @param customEventClass the rewarded ad custom event class
+     * @param moPubReward the reward from the MoPub ad server returned in HTTP headers
      */
     void updateCustomEventLastShownRewardMapping(
-            @NonNull final Class<? extends CustomEventRewardedVideo> customEventClass,
+            @NonNull final Class<? extends CustomEventRewardedAd> customEventClass,
             @Nullable final MoPubReward moPubReward) {
         Preconditions.checkNotNull(customEventClass);
         mCustomEventToRewardMap.put(customEventClass, moPubReward);
     }
 
     void associateCustomEventWithMoPubId(
-            @NonNull Class<? extends CustomEventRewardedVideo> customEventClass,
+            @NonNull Class<? extends CustomEventRewardedAd> customEventClass,
             @NonNull String adNetworkId,
             @NonNull String moPubId) {
         final TwoPartKey newCustomEventMapping = new TwoPartKey(customEventClass, adNetworkId);
@@ -188,6 +279,13 @@ void setCurrentlyShowingAdUnitId(@Nullable final String currentAdUnitId) {
         mCurrentlyShowingAdUnitId = currentAdUnitId;
     }
 
+    void updateAdUnitToCustomDataMapping(@NonNull final String moPubId,
+            @Nullable String customData) {
+        Preconditions.NoThrow.checkNotNull(moPubId);
+
+        mAdUnitToCustomDataMap.put(moPubId, customData);
+    }
+
     @Nullable
     String getCurrentlyShowingAdUnitId() {
         return mCurrentlyShowingAdUnitId;
@@ -207,22 +305,45 @@ String getCustomerId() {
     void clear() {
         mAdUnitToCustomEventMap.clear();
         mAdUnitToRewardMap.clear();
+        mAdUnitToAvailableRewardsMap.clear();
         mAdUnitToServerCompletionUrlMap.clear();
+        mAdUnitToCustomDataMap.clear();
         mCustomEventToRewardMap.clear();
         mCustomEventToMoPubIdMap.clear();
-        mAdNetworkListeners.clear();
         mCurrentlyShowingAdUnitId = null;
         mCustomerId = null;
     }
 
-    private static class TwoPartKey extends Pair<Class<? extends CustomEventRewardedVideo>, String> {
+    @VisibleForTesting
+    @Deprecated
+    /**
+     * This method is purely used as a helper method in unit tests. Note that calling
+     * {@link MoPubReward#success(String, int)} creates a new instance, even with the same reward
+     * label and amount as an existing reward. Therefore, existence of a reward cannot be asserted
+     * simply by comparing objects in the unit tests.
+     */
+    boolean existsInAvailableRewards(@NonNull String moPubId, @NonNull String currencyName,
+            int currencyAmount) {
+        Preconditions.checkNotNull(moPubId);
+        Preconditions.checkNotNull(currencyName);
+
+        for (MoPubReward reward : getAvailableRewards(moPubId)) {
+            if (reward.getLabel().equals(currencyName) && reward.getAmount() == currencyAmount) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    private static class TwoPartKey extends Pair<Class<? extends CustomEventRewardedAd>, String> {
         @NonNull
-        final Class<? extends CustomEventRewardedVideo> customEventClass;
+        final Class<? extends CustomEventRewardedAd> customEventClass;
         @NonNull
         final String adNetworkId;
 
         public TwoPartKey(
-                @NonNull final Class<? extends CustomEventRewardedVideo> customEventClass,
+                @NonNull final Class<? extends CustomEventRewardedAd> customEventClass,
                 @NonNull final String adNetworkId) {
             super(customEventClass, adNetworkId);
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
new file mode 100644
index 00000000..5855cc69
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
@@ -0,0 +1,182 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.util.Log;
+import android.view.View;
+
+import com.mopub.common.AdReport;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Intents;
+import com.mopub.exceptions.IntentNotResolvableException;
+import com.mopub.mraid.MraidController.MraidListener;
+import com.mopub.mraid.MraidWebViewDebugListener;
+import com.mopub.mraid.PlacementType;
+import com.mopub.mraid.RewardedMraidController;
+
+import static com.mopub.common.DataKeys.AD_REPORT_KEY;
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
+import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.common.DataKeys.REWARDED_AD_DURATION_KEY;
+import static com.mopub.common.DataKeys.SHOULD_REWARD_ON_CLICK_KEY;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
+
+public class RewardedMraidActivity extends MraidActivity {
+    @Nullable private RewardedMraidController mRewardedMraidController;
+    @Nullable private MraidWebViewDebugListener mDebugListener;
+
+    public static void start(@NonNull Context context, @Nullable AdReport adreport,
+            @Nullable String htmlData, long broadcastIdentifier, int rewardedDuration,
+            boolean shouldRewardOnClick) {
+        final Intent intent = createIntent(context, adreport, htmlData, broadcastIdentifier,
+                rewardedDuration, shouldRewardOnClick);
+        try {
+            Intents.startActivity(context, intent);
+        } catch (IntentNotResolvableException exception) {
+            Log.d("RewardedMraidActivity", "RewardedMraidActivity.class not found. " +
+                    "Did you declare RewardedMraidActivity in your manifest?");
+        }
+    }
+
+    @VisibleForTesting
+    protected static Intent createIntent(@NonNull Context context, @Nullable AdReport adReport,
+            @Nullable String htmlData, long broadcastIdentifier, int rewardedDuration,
+            boolean shouldRewardOnClick) {
+        Intent intent = new Intent(context, RewardedMraidActivity.class);
+        intent.putExtra(HTML_RESPONSE_BODY_KEY, htmlData);
+        intent.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
+        intent.putExtra(AD_REPORT_KEY, adReport);
+        intent.putExtra(REWARDED_AD_DURATION_KEY, rewardedDuration);
+        intent.putExtra(SHOULD_REWARD_ON_CLICK_KEY, shouldRewardOnClick);
+        return intent;
+    }
+
+    @Override
+    public View getAdView() {
+        final Intent intent = getIntent();
+        final String htmlData = intent.getStringExtra(HTML_RESPONSE_BODY_KEY);
+        if (TextUtils.isEmpty(htmlData)) {
+            MoPubLog.w("RewardedMraidActivity received a null HTML body. Finishing the activity.");
+            finish();
+            return new View(this);
+        } else if (getBroadcastIdentifier() == null) {
+            MoPubLog.w("RewardedMraidActivity received a null broadcast id. Finishing the activity.");
+            finish();
+            return new View(this);
+        }
+
+        final int rewardedDurationInSeconds = intent.getIntExtra(REWARDED_AD_DURATION_KEY,
+                RewardedMraidController.DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_SECONDS);
+        final boolean shouldRewardOnClick = intent.getBooleanExtra(SHOULD_REWARD_ON_CLICK_KEY,
+                RewardedMraidController.DEFAULT_PLAYABLE_SHOULD_REWARD_ON_CLICK);
+
+        mRewardedMraidController = new RewardedMraidController(
+                this, mAdReport, PlacementType.INTERSTITIAL, rewardedDurationInSeconds,
+                getBroadcastIdentifier());
+
+        mRewardedMraidController.setDebugListener(mDebugListener);
+        mRewardedMraidController.setMraidListener(new MraidListener() {
+            @Override
+            public void onLoaded(View view) {
+                // This is only done for the interstitial. Banners have a different mechanism
+                // for tracking third party impressions.
+                mRewardedMraidController.loadJavascript(WEB_VIEW_DID_APPEAR.getJavascript());
+            }
+
+            @Override
+            public void onFailedToLoad() {
+                MoPubLog.d("RewardedMraidActivity failed to load. Finishing the activity");
+                broadcastAction(RewardedMraidActivity.this, getBroadcastIdentifier(),
+                        ACTION_INTERSTITIAL_FAIL);
+                finish();
+            }
+
+            public void onClose() {
+                mRewardedMraidController.loadJavascript(WEB_VIEW_DID_CLOSE.getJavascript());
+                finish();
+            }
+
+            @Override
+            public void onExpand() {
+                // No-op. The interstitial is always expanded.
+            }
+
+            @Override
+            public void onOpen() {
+                if (shouldRewardOnClick) {
+                    mRewardedMraidController.showPlayableCloseButton();
+                }
+                broadcastAction(RewardedMraidActivity.this, getBroadcastIdentifier(),
+                        ACTION_INTERSTITIAL_CLICK);
+            }
+        });
+
+        mRewardedMraidController.fillContent(getBroadcastIdentifier(), htmlData, null);
+        return mRewardedMraidController.getAdContainer();
+    }
+
+    @Override
+    public void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (mRewardedMraidController != null) {
+            mRewardedMraidController.create(RewardedMraidActivity.this, getCloseableLayout());
+        }
+    }
+
+    @Override
+    protected void onPause() {
+        if (mRewardedMraidController != null) {
+            mRewardedMraidController.pause();
+        }
+        super.onPause();
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        if (mRewardedMraidController != null) {
+            mRewardedMraidController.resume();
+        }
+    }
+
+    @Override
+    protected void onDestroy() {
+        if (mRewardedMraidController != null) {
+            mRewardedMraidController.destroy();
+        }
+
+        super.onDestroy();
+    }
+
+    @Override
+    public void onBackPressed() {
+        if (mRewardedMraidController == null || mRewardedMraidController.backButtonEnabled()) {
+            super.onBackPressed();
+        }
+    }
+
+    @VisibleForTesting
+    public void setDebugListener(@Nullable MraidWebViewDebugListener debugListener) {
+        mDebugListener = debugListener;
+        if (mRewardedMraidController != null) {
+            mRewardedMraidController.setDebugListener(debugListener);
+        }
+    }
+
+    @Nullable
+    @Deprecated
+    @VisibleForTesting
+    public RewardedMraidController getRewardedMraidController() {
+        return mRewardedMraidController;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidCountdownRunnable.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidCountdownRunnable.java
new file mode 100644
index 00000000..530b41b0
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidCountdownRunnable.java
@@ -0,0 +1,42 @@
+package com.mopub.mobileads;
+
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.VisibleForTesting;
+
+import com.mopub.common.Preconditions;
+import com.mopub.mraid.RewardedMraidController;
+
+/**
+ * A runnable that is used to update a {@link RewardedMraidController}'s countdown display according
+ * to rules contained in the {@link RewardedMraidController}
+ */
+public class RewardedMraidCountdownRunnable extends RepeatingHandlerRunnable {
+    @NonNull private final RewardedMraidController mRewardedMraidController;
+    private int mCurrentElapsedTimeMillis;
+
+    public RewardedMraidCountdownRunnable(@NonNull RewardedMraidController rewardedMraidController,
+            @NonNull Handler handler) {
+        super(handler);
+        Preconditions.checkNotNull(handler);
+        Preconditions.checkNotNull(rewardedMraidController);
+
+        mRewardedMraidController = rewardedMraidController;
+    }
+
+    @Override
+    public void doWork() {
+        mCurrentElapsedTimeMillis += mUpdateIntervalMillis;
+        mRewardedMraidController.updateCountdown(mCurrentElapsedTimeMillis);
+
+        if (mRewardedMraidController.isPlayableCloseable()) {
+            mRewardedMraidController.showPlayableCloseButton();
+        }
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    int getCurrentElapsedTimeMillis() {
+        return mCurrentElapsedTimeMillis;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java
index 3e1b6c7d..6b0c4ecd 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java
@@ -9,16 +9,12 @@
 
 class RewardedVastVideoInterstitial extends VastVideoInterstitial {
 
-    interface CustomEventRewardedVideoInterstitialListener extends CustomEventInterstitialListener {
+    interface RewardedVideoInterstitialListener extends CustomEventInterstitialListener {
         void onVideoComplete();
     }
 
     @Nullable private RewardedVideoBroadcastReceiver mRewardedVideoBroadcastReceiver;
 
-    public RewardedVastVideoInterstitial() {
-        super();
-    }
-
     @Override
     public void loadInterstitial(
             Context context,
@@ -27,9 +23,9 @@ public void loadInterstitial(
             Map<String, String> serverExtras) {
         super.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
 
-        if (customEventInterstitialListener instanceof CustomEventRewardedVideoInterstitialListener) {
+        if (customEventInterstitialListener instanceof RewardedVideoInterstitialListener) {
             mRewardedVideoBroadcastReceiver = new RewardedVideoBroadcastReceiver(
-                    (CustomEventRewardedVideoInterstitialListener) customEventInterstitialListener,
+                    (RewardedVideoInterstitialListener) customEventInterstitialListener,
                     mBroadcastIdentifier);
             mRewardedVideoBroadcastReceiver.register(mRewardedVideoBroadcastReceiver, context);
         }
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
index 4ec3c111..506d38b7 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
@@ -7,16 +7,17 @@
 import android.support.annotation.Nullable;
 
 import com.mopub.common.IntentActions;
+import com.mopub.common.Preconditions;
 
 public class RewardedVideoBroadcastReceiver extends BaseBroadcastReceiver {
 
     private static IntentFilter sIntentFilter;
 
     @Nullable
-    private RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener mRewardedVideoListener;
+    private RewardedVastVideoInterstitial.RewardedVideoInterstitialListener mRewardedVideoListener;
 
     public RewardedVideoBroadcastReceiver(
-            @Nullable RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener rewardedVideoListener,
+            @Nullable RewardedVastVideoInterstitial.RewardedVideoInterstitialListener rewardedVideoListener,
             final long broadcastIdentifier) {
         super(broadcastIdentifier);
         mRewardedVideoListener = rewardedVideoListener;
@@ -34,6 +35,9 @@ public IntentFilter getIntentFilter() {
 
     @Override
     public void onReceive(@NonNull final Context context, @NonNull final Intent intent) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(intent);
+
         if (mRewardedVideoListener == null) {
             return;
         }
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
index 5e37c66b..a046e41e 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
@@ -38,6 +38,10 @@
     private static final String CUSTOMER_ID_KEY = "&customer_id=";
     private static final String SDK_VERSION_KEY = "&nv=";
     private static final String API_VERSION_KEY = "&v=";
+    private static final String REWARD_NAME_KEY = "&rcn=";
+    private static final String REWARD_AMOUNT_KEY = "&rca=";
+    private static final String CUSTOM_EVENT_CLASS_NAME_KEY = "&cec=";
+    private static final String CUSTOM_DATA_KEY = "&rcd=";
 
     @NonNull private final String mUrl;
     @NonNull private final Handler mHandler;
@@ -46,17 +50,32 @@
     private volatile boolean mShouldStop;
 
     RewardedVideoCompletionRequestHandler(@NonNull final Context context,
-            @NonNull final String url, @Nullable final String customerId) {
-        this(context, url, customerId, new Handler());
+            @NonNull final String url,
+            @Nullable final String customerId,
+            @NonNull final String rewardName,
+            @NonNull final String rewardAmount,
+            @Nullable final String className,
+            @Nullable final String customData) {
+        this(context, url, customerId, rewardName, rewardAmount, className, customData,
+                new Handler());
     }
 
+    @VisibleForTesting
     RewardedVideoCompletionRequestHandler(@NonNull final Context context,
             @NonNull final String url,
             @Nullable final String customerId,
+            @NonNull final String rewardName,
+            @NonNull final String rewardAmount,
+            @Nullable final String className,
+            @Nullable final String customData,
             @NonNull final Handler handler) {
         Preconditions.checkNotNull(context);
         Preconditions.checkNotNull(url);
-        mUrl = appendParameters(url, customerId);
+        Preconditions.checkNotNull(rewardName);
+        Preconditions.checkNotNull(rewardAmount);
+        Preconditions.checkNotNull(handler);
+
+        mUrl = appendParameters(url, customerId, rewardName, rewardAmount, className, customData);
         mRetryCount = 0;
         mHandler = handler;
         mRequestQueue = Networking.getRequestQueue(context);
@@ -109,13 +128,19 @@ public void onErrorResponse(final VolleyError volleyError) {
 
     public static void makeRewardedVideoCompletionRequest(@Nullable final Context context,
             @Nullable final String url,
-            @Nullable final String customerId) {
-        if (TextUtils.isEmpty(url) || context == null) {
+            @Nullable final String customerId,
+            @NonNull final String rewardName,
+            @NonNull final String rewardAmount,
+            @Nullable final String rewardedAd,
+            @Nullable final String customData) {
+        if (context == null || TextUtils.isEmpty(url) || rewardName == null ||
+                rewardAmount == null) {
             return;
         }
 
-        new RewardedVideoCompletionRequestHandler(context,
-                url, customerId).makeRewardedVideoCompletionRequest();
+        new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                rewardAmount, rewardedAd, customData)
+                .makeRewardedVideoCompletionRequest();
     }
 
     static int getTimeout(int retryCount) {
@@ -127,13 +152,31 @@ static int getTimeout(int retryCount) {
     }
 
     private static String appendParameters(@NonNull final String url,
-            @Nullable final String customerId) {
+            @Nullable final String customerId,
+            @NonNull final String rewardName,
+            @NonNull final String rewardAmount,
+            @Nullable final String className,
+            @Nullable final String customData) {
         Preconditions.checkNotNull(url);
+        Preconditions.checkNotNull(rewardName);
+        Preconditions.checkNotNull(rewardAmount);
+
+        final StringBuilder stringBuilder = new StringBuilder(url);
+        stringBuilder
+                .append(CUSTOMER_ID_KEY).append((customerId == null) ? "" : Uri.encode(customerId))
+                .append(REWARD_NAME_KEY).append(Uri.encode(rewardName))
+                .append(REWARD_AMOUNT_KEY).append(Uri.encode(rewardAmount))
+                .append(SDK_VERSION_KEY).append(Uri.encode(MoPub.SDK_VERSION))
+                // Does not need to be encoded as it's an int
+                .append(API_VERSION_KEY).append(MoPubRewardedVideoManager.API_VERSION)
+                .append(CUSTOM_EVENT_CLASS_NAME_KEY)
+                .append((className == null) ? "" : Uri.encode(className));
+
+        if (!TextUtils.isEmpty(customData)) {
+            stringBuilder.append(CUSTOM_DATA_KEY).append(Uri.encode(customData));
+        }
 
-        return url +
-                CUSTOMER_ID_KEY + (customerId == null ? "" : Uri.encode(customerId)) +
-                SDK_VERSION_KEY + Uri.encode(MoPub.SDK_VERSION) +
-                API_VERSION_KEY + MoPubRewardedVideoManager.API_VERSION;
+        return stringBuilder.toString();
     }
 
     @VisibleForTesting
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidController.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidController.java
new file mode 100644
index 00000000..ad96fbdc
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidController.java
@@ -0,0 +1,197 @@
+package com.mopub.mraid;
+
+
+import android.content.Context;
+import android.os.Handler;
+import android.os.Looper;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.Gravity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+
+import com.mopub.common.AdReport;
+import com.mopub.common.CloseableLayout;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.mobileads.RewardedMraidCountdownRunnable;
+import com.mopub.mobileads.VastVideoRadialCountdownWidget;
+
+import static com.mopub.common.IntentActions.ACTION_REWARDED_PLAYABLE_COMPLETE;
+import static com.mopub.mobileads.BaseBroadcastReceiver.broadcastAction;
+
+public class RewardedMraidController extends MraidController {
+
+    /**
+     * Should reward on click is for when the user should be rewarded when clicking on the
+     * creative. This is defaulted to false so the user must wait for the entire countdown
+     * before able to leave the app.
+     */
+    public static final boolean DEFAULT_PLAYABLE_SHOULD_REWARD_ON_CLICK = false;
+
+    /**
+     * If a duration is not specified, this duration is used. 30 seconds is also the maximum
+     * amount of time that we currently allow rewarded playables to be not closeable.
+     */
+    public static final int DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_SECONDS = 30;
+
+    public static final int MILLIS_IN_SECOND = 1000;
+
+    @VisibleForTesting
+    static final int DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_MILLIS =
+            DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_SECONDS * MILLIS_IN_SECOND;
+    @VisibleForTesting
+    static final long PLAYABLE_COUNTDOWN_UPDATE_INTERVAL_MILLIS = 250;
+
+    @NonNull private CloseableLayout mCloseableLayout;
+    @NonNull private VastVideoRadialCountdownWidget mRadialCountdownWidget;
+    @NonNull private RewardedMraidCountdownRunnable mCountdownRunnable;
+
+    private final int mShowCloseButtonDelay;
+    private final long mBroadcastIdentifier;
+
+    private int mCurrentElapsedTimeMillis;
+    private boolean mShowCloseButtonEventFired;
+    private boolean mIsCalibrationDone;
+    private boolean mIsRewarded;
+
+    @VisibleForTesting
+    public RewardedMraidController(@NonNull Context context, @Nullable AdReport adReport,
+            @NonNull PlacementType placementType, int rewardedDurationInSeconds,
+            long broadcastIdentifier) {
+        super(context, adReport, placementType);
+        final int rewardedDurationInMillis = rewardedDurationInSeconds * MILLIS_IN_SECOND;
+        if (rewardedDurationInMillis < 0
+                || rewardedDurationInMillis > DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_MILLIS) {
+            mShowCloseButtonDelay = DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_MILLIS;
+        } else {
+            mShowCloseButtonDelay = rewardedDurationInMillis;
+        }
+        mBroadcastIdentifier = broadcastIdentifier;
+    }
+
+    public void create(@NonNull Context context, CloseableLayout closeableLayout) {
+        mCloseableLayout = closeableLayout;
+        mCloseableLayout.setCloseAlwaysInteractable(false);
+        mCloseableLayout.setCloseVisible(false);
+
+        addRadialCountdownWidget(context, View.INVISIBLE);
+        mRadialCountdownWidget.calibrateAndMakeVisible(mShowCloseButtonDelay);
+        mIsCalibrationDone = true;
+
+        Handler mainHandler = new Handler(Looper.getMainLooper());
+        mCountdownRunnable = new RewardedMraidCountdownRunnable(this, mainHandler);
+    }
+
+    public void pause() {
+        stopRunnables();
+    }
+
+    @Override
+    public void resume() {
+        startRunnables();
+    }
+
+    @Override
+    public void destroy() {
+        stopRunnables();
+    }
+
+    @Override
+    protected void handleCustomClose(boolean useCustomClose) {
+    }
+
+    @Override
+    protected void handleClose() {
+        if (mShowCloseButtonEventFired) {
+            super.handleClose();
+        }
+    }
+
+    public boolean backButtonEnabled() {
+        return mShowCloseButtonEventFired;
+    }
+
+    public boolean isPlayableCloseable() {
+        return !mShowCloseButtonEventFired && mCurrentElapsedTimeMillis >= mShowCloseButtonDelay;
+    }
+
+    public void showPlayableCloseButton() {
+        mShowCloseButtonEventFired = true;
+
+        mRadialCountdownWidget.setVisibility(View.GONE);
+        mCloseableLayout.setCloseVisible(true);
+
+        if (!mIsRewarded) {
+            broadcastAction(getContext(), mBroadcastIdentifier, ACTION_REWARDED_PLAYABLE_COMPLETE);
+            mIsRewarded = true;
+        }
+    }
+
+    public void updateCountdown(int currentElapsedTimeMillis) {
+        mCurrentElapsedTimeMillis = currentElapsedTimeMillis;
+        if (mIsCalibrationDone) {
+            mRadialCountdownWidget.updateCountdownProgress(mShowCloseButtonDelay,
+                    mCurrentElapsedTimeMillis);
+        }
+    }
+
+    private void startRunnables() {
+        mCountdownRunnable.startRepeating(PLAYABLE_COUNTDOWN_UPDATE_INTERVAL_MILLIS);
+    }
+
+    private void stopRunnables() {
+        mCountdownRunnable.stop();
+    }
+
+    private void addRadialCountdownWidget(@NonNull final Context context, int initialVisibility) {
+        mRadialCountdownWidget = new VastVideoRadialCountdownWidget(context);
+        mRadialCountdownWidget.setVisibility(initialVisibility);
+
+        ViewGroup.MarginLayoutParams lp =
+                (ViewGroup.MarginLayoutParams) mRadialCountdownWidget.getLayoutParams();
+        final int widgetWidth = lp.width + lp.leftMargin + lp.rightMargin;
+        final int widgetHeight = lp.height + lp.topMargin + lp.bottomMargin;
+
+        FrameLayout.LayoutParams widgetLayoutParams =
+                new FrameLayout.LayoutParams(widgetWidth, widgetHeight);
+        widgetLayoutParams.gravity = Gravity.TOP | Gravity.RIGHT;
+        mCloseableLayout.addView(mRadialCountdownWidget, widgetLayoutParams);
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    public int getShowCloseButtonDelay() {
+        return mShowCloseButtonDelay;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    public VastVideoRadialCountdownWidget getRadialCountdownWidget() {
+        return mRadialCountdownWidget;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    public RewardedMraidCountdownRunnable getCountdownRunnable() {
+        return mCountdownRunnable;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    public boolean isCalibrationDone() {
+        return mIsCalibrationDone;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    public boolean isShowCloseButtonEventFired() {
+        return mShowCloseButtonEventFired;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    public boolean isRewarded() {
+        return mIsRewarded;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidInterstitial.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidInterstitial.java
new file mode 100644
index 00000000..32bf7b3f
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidInterstitial.java
@@ -0,0 +1,80 @@
+package com.mopub.mraid;
+
+import android.content.Context;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.RewardedMraidActivity;
+
+import java.util.Map;
+
+import static com.mopub.common.DataKeys.REWARDED_AD_DURATION_KEY;
+import static com.mopub.common.DataKeys.SHOULD_REWARD_ON_CLICK_KEY;
+
+/**
+ * Handles the showing of rewarded MRAID interstitials. 'Rewarded duration' and 'should reward on
+ * click' are optional and will default to the values set in {@link RewardedMraidController}.
+ */
+public class RewardedMraidInterstitial extends MraidInterstitial {
+
+    public interface RewardedMraidInterstitialListener extends CustomEventInterstitial.CustomEventInterstitialListener {
+        void onMraidComplete();
+    }
+
+    @Nullable private RewardedPlayableBroadcastReceiver mRewardedPlayableBroadcastReceiver;
+    private int mRewardedDuration;
+    private boolean mShouldRewardOnClick;
+
+    @Override
+    public void loadInterstitial(
+            Context context,
+            CustomEventInterstitialListener customEventInterstitialListener,
+            Map<String, Object> localExtras,
+            Map<String, String> serverExtras) {
+        super.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+
+        if (customEventInterstitialListener instanceof RewardedMraidInterstitialListener) {
+            mRewardedPlayableBroadcastReceiver = new RewardedPlayableBroadcastReceiver(
+                    (RewardedMraidInterstitialListener) customEventInterstitialListener,
+                    mBroadcastIdentifier);
+            mRewardedPlayableBroadcastReceiver.register(mRewardedPlayableBroadcastReceiver, context);
+        }
+
+        final Object rewardedDurationObject = localExtras.get(REWARDED_AD_DURATION_KEY);
+        mRewardedDuration = rewardedDurationObject instanceof Integer ?
+                (int) rewardedDurationObject :
+                RewardedMraidController.DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_SECONDS;
+        final Object shouldRewardOnClickObject = localExtras.get(SHOULD_REWARD_ON_CLICK_KEY);
+        mShouldRewardOnClick = shouldRewardOnClickObject instanceof Boolean ?
+                (boolean) shouldRewardOnClickObject :
+                RewardedMraidController.DEFAULT_PLAYABLE_SHOULD_REWARD_ON_CLICK;
+    }
+
+    @Override
+    public void showInterstitial() {
+        RewardedMraidActivity.start(mContext, mAdReport, mHtmlData, mBroadcastIdentifier,
+                mRewardedDuration, mShouldRewardOnClick);
+    }
+
+
+    @Override
+    public void onInvalidate() {
+        super.onInvalidate();
+        if (mRewardedPlayableBroadcastReceiver != null) {
+            mRewardedPlayableBroadcastReceiver.unregister(mRewardedPlayableBroadcastReceiver);
+        }
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    int getRewardedDuration() {
+        return mRewardedDuration;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    boolean isShouldRewardOnClick() {
+        return mShouldRewardOnClick;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedPlayableBroadcastReceiver.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedPlayableBroadcastReceiver.java
new file mode 100644
index 00000000..4599a175
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedPlayableBroadcastReceiver.java
@@ -0,0 +1,55 @@
+package com.mopub.mraid;
+
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.IntentActions;
+import com.mopub.mobileads.BaseBroadcastReceiver;
+
+/**
+ * Handles the rewarded playable complete broadcast.
+ */
+public class RewardedPlayableBroadcastReceiver extends BaseBroadcastReceiver {
+
+    private static IntentFilter sIntentFilter;
+
+    @Nullable
+    private RewardedMraidInterstitial.RewardedMraidInterstitialListener mRewardedMraidListener;
+
+    public RewardedPlayableBroadcastReceiver(
+            @Nullable RewardedMraidInterstitial.RewardedMraidInterstitialListener rewardedVideoListener,
+            final long broadcastIdentifier) {
+        super(broadcastIdentifier);
+        mRewardedMraidListener = rewardedVideoListener;
+        getIntentFilter();
+    }
+
+    @NonNull
+    public IntentFilter getIntentFilter() {
+        if (sIntentFilter == null) {
+            sIntentFilter = new IntentFilter();
+            sIntentFilter.addAction(IntentActions.ACTION_REWARDED_PLAYABLE_COMPLETE);
+        }
+        return sIntentFilter;
+    }
+
+    @Override
+    public void onReceive(@NonNull final Context context, @NonNull final Intent intent) {
+        if (mRewardedMraidListener == null) {
+            return;
+        }
+
+        if (!shouldConsumeBroadcast(intent)) {
+            return;
+        }
+
+        final String action = intent.getAction();
+        if (IntentActions.ACTION_REWARDED_PLAYABLE_COMPLETE.equals(action)) {
+            mRewardedMraidListener.onMraidComplete();
+            unregister(this);
+        }
+    }
+}
diff --git a/mopub-sdk/proguard.txt b/mopub-sdk/proguard.txt
index 3ad22097..21b8b752 100644
--- a/mopub-sdk/proguard.txt
+++ b/mopub-sdk/proguard.txt
@@ -5,19 +5,43 @@
 # Keep public classes and methods.
 -keepclassmembers class com.mopub.** { public *; }
 -keep public class com.mopub.**
+-keep public class android.webkit.JavascriptInterface {}
 
 # Explicitly keep any custom event classes in any package.
 -keep class * extends com.mopub.mobileads.CustomEventBanner {}
 -keep class * extends com.mopub.mobileads.CustomEventInterstitial {}
 -keep class * extends com.mopub.nativeads.CustomEventNative {}
--keep class * extends com.mopub.mobileads.CustomEventRewardedVideo {}
+-keep class * extends com.mopub.nativeads.CustomEventRewardedAd {}
+
+# Keep methods that are accessed via reflection
+-keepclassmembers class ** { @com.mopub.common.util.ReflectionTarget *; }
+
+# Viewability support
+-keepclassmembers class com.integralads.avid.library.mopub.** { public *; }
+-keep public class com.integralads.avid.library.mopub.**
+-keepclassmembers class com.moat.analytics.mobile.mpub.** { public *; }
+-keep public class com.moat.analytics.mobile.mpub.**
 
 # Support for Android Advertiser ID.
 -keep class com.google.android.gms.common.GooglePlayServicesUtil {*;}
 -keep class com.google.android.gms.ads.identifier.AdvertisingIdClient {*;}
 -keep class com.google.android.gms.ads.identifier.AdvertisingIdClient$Info {*;}
--dontwarn com.google.android.gms.**
 
-# Filter out warnings that refer to legacy Code.
--dontwarn org.apache.http.**
--dontwarn com.mopub.volley.toolbox.**
+# Support for Google Play Services
+# http://developer.android.com/google/play-services/setup.html
+-keep class * extends java.util.ListResourceBundle {
+    protected Object[][] getContents();
+}
+
+-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {
+    public static final *** NULL;
+}
+
+-keepnames @com.google.android.gms.common.annotation.KeepName class *
+-keepclassmembernames class * {
+    @com.google.android.gms.common.annotation.KeepName *;
+}
+
+-keepnames class * implements android.os.Parcelable {
+    public static final ** CREATOR;
+}
diff --git a/mopub-sdk/publisher.gradle b/mopub-sdk/publisher.gradle
index ee0f09ea..9c40f84a 100644
--- a/mopub-sdk/publisher.gradle
+++ b/mopub-sdk/publisher.gradle
@@ -23,7 +23,7 @@ android.libraryVariants.all { variant ->
 
     task.dependsOn variant.javaCompile
     task.from variant.javaCompile.destinationDir
-    artifacts.add('archives', task);
+    artifacts.add('archives', task)
 }
 
 android.libraryVariants.all { variant ->
@@ -58,6 +58,5 @@ publish {
     bintrayUser = project.hasProperty("bintray.user") ? project.getProperty("bintray.user") : ""
     bintrayKey = project.hasProperty("bintray.apikey") ? project.getProperty("bintray.apikey") : ""
 
-    autoPublish = true
     dryRun = false
 }
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index 9b65bf09..7a2d3340 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -6,22 +6,24 @@ repositories {
     flatDir {
         dirs project(':mopub-sdk').file('../libs')
     }
+    maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
+    maven { url 'https://maven.google.com' }
 }
 
 project.group = 'com.mopub'
-project.version = '4.9.0'
+project.version = '4.19.0'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion '23.0.2'
+    compileSdkVersion 26
+    buildToolsVersion '26.0.2'
     lintOptions { abortOnError false }
     useLibrary 'org.apache.http.legacy'
 
     defaultConfig {
-        versionCode 44
+        versionCode 57
         versionName version
-        minSdkVersion 9
-        targetSdkVersion 23
+        minSdkVersion 16
+        targetSdkVersion 26
         consumerProguardFiles project(':mopub-sdk').file('proguard.txt')
     }
 
@@ -49,7 +51,7 @@ android {
 
             // Test JVM settings since we have a lot of classes loaded.
             all {
-                jvmArgs '-XX:MaxPermSize=4096m', '-Xmx8192m'
+                jvmArgs '-XX:MaxPermSize=4096m', '-Xmx8192m', '-noverify'
                 forkEvery 200
             }
         }
@@ -74,6 +76,6 @@ android {
 }
 
 dependencies {
-    compile 'com.android.support:support-v4:23.1.1'
-    compile 'com.android.support:support-annotations:23.1.1'
+    compile 'com.android.support:support-v4:26.1.0'
+    compile 'com.android.support:support-annotations:26.1.0'
 }
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
index 511b8e04..208a5002 100644
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=4.9.0+kit
+fabric-version=4.19.0+kit
 fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
index 46823d17..a9f91333 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
@@ -9,6 +9,7 @@
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
+import com.mopub.network.Networking;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -49,6 +50,7 @@ public void setUp() {
 
         mockMoPubBrowser.setWebView(mockWebView);
         subject = new BrowserWebViewClient(mockMoPubBrowser);
+        Networking.setUserAgentForTesting("user_agent");
     }
 
     @Test
@@ -153,7 +155,7 @@ public void shouldOverrideUrlLoading_withEmptyUrl_shouldReturnFalse_shouldDoNoth
 
     @Test
     public void shouldOverrideUrlLoading_withNullUrl_shouldReturnFalse_shouldDoNothing() {
-        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, null)).isFalse();
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, (String) null)).isFalse();
         verify(mockWebView, never()).loadUrl(anyString());
         verify(mockMoPubBrowser, never()).finish();
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java b/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
index 31f38117..9f1ef0b6 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
@@ -1,17 +1,21 @@
 package com.mopub.common;
 
 import android.app.Activity;
+import android.content.ContentResolver;
 import android.content.Context;
+import android.provider.Settings;
 import android.telephony.TelephonyManager;
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
 
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 
@@ -34,6 +38,13 @@ public void setUp() throws Exception {
                 Shadows.shadowOf((TelephonyManager) activityContext.getSystemService(Context.TELEPHONY_SERVICE));
     }
 
+    @After
+    public void tearDown() throws Exception {
+        ContentResolver resolver = RuntimeEnvironment.application.getContentResolver();
+        Settings.Secure.putString(resolver, "limit_ad_tracking", null);
+        Settings.Secure.putString(resolver, "advertising_id", null);
+    }
+
     // This has to be first or the singleton will be initialized by an earlier test. We should
     // destroy the application between tests to get around this.
     @Test
@@ -71,4 +82,63 @@ public void testCachedData_shouldBeAvailable() {
         // Other cached data.
         assertThat(clientMetadata.getDeviceId()).isNotNull().isNotEmpty();
     }
+
+    @Test
+    public void constructor_onAmazonDevice_shouldSetAmazonAdvertisingInfo() {
+        ContentResolver resolver = RuntimeEnvironment.application.getContentResolver();
+        Settings.Secure.putInt(resolver, "limit_ad_tracking", 1);
+        Settings.Secure.putString(resolver, "advertising_id", "this-is-an-ifa");
+
+        final ClientMetadata clientMetadata = ClientMetadata.getInstance(activityContext);
+
+        assertThat(clientMetadata.getDeviceId()).isEqualTo("ifa:this-is-an-ifa");
+        assertThat(clientMetadata.isDoNotTrackSet()).isTrue();
+        assertThat(clientMetadata.isAdvertisingInfoSet()).isTrue();
+    }
+
+    @Test
+    public void constructor_onNonAmazonDevice_shouldSetSha() {
+        final ClientMetadata clientMetadata = ClientMetadata.getInstance(activityContext);
+
+        assertThat(clientMetadata.getDeviceId()).startsWith("sha:");
+        assertThat(clientMetadata.isDoNotTrackSet()).isFalse();
+        assertThat(clientMetadata.isAdvertisingInfoSet()).isFalse();
+    }
+
+    @Test
+    public void constructor_onAmazonDevice_withoutLimitAdTracking_shouldSetSha() {
+        ContentResolver resolver = RuntimeEnvironment.application.getContentResolver();
+        Settings.Secure.putString(resolver, "advertising_id", "this-is-an-ifa");
+
+        final ClientMetadata clientMetadata = ClientMetadata.getInstance(activityContext);
+
+        assertThat(clientMetadata.getDeviceId()).startsWith("sha:");
+        assertThat(clientMetadata.isDoNotTrackSet()).isFalse();
+        assertThat(clientMetadata.isAdvertisingInfoSet()).isFalse();
+    }
+
+    @Test
+    public void constructor_onAmazonDevice_withoutAdvertisingId_shouldSetSha() {
+        ContentResolver resolver = RuntimeEnvironment.application.getContentResolver();
+        Settings.Secure.putInt(resolver, "limit_ad_tracking", 1);
+
+        final ClientMetadata clientMetadata = ClientMetadata.getInstance(activityContext);
+
+        assertThat(clientMetadata.getDeviceId()).startsWith("sha:");
+        assertThat(clientMetadata.isDoNotTrackSet()).isFalse();
+        assertThat(clientMetadata.isAdvertisingInfoSet()).isFalse();
+    }
+
+    @Test
+    public void constructor_onAmazonDevice_withEmptyAdvertisingId_shouldSetSha() {
+        ContentResolver resolver = RuntimeEnvironment.application.getContentResolver();
+        Settings.Secure.putInt(resolver, "limit_ad_tracking", 1);
+        Settings.Secure.putString(resolver, "advertising_id", "");
+
+        final ClientMetadata clientMetadata = ClientMetadata.getInstance(activityContext);
+
+        assertThat(clientMetadata.getDeviceId()).startsWith("sha:");
+        assertThat(clientMetadata.isDoNotTrackSet()).isFalse();
+        assertThat(clientMetadata.isAdvertisingInfoSet()).isFalse();
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java b/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java
index 5ebd9c47..aab8e358 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java
@@ -1,10 +1,8 @@
 package com.mopub.common;
 
-import android.annotation.TargetApi;
 import android.app.Activity;
 import android.graphics.Canvas;
 import android.graphics.Rect;
-import android.os.Build.VERSION_CODES;
 import android.view.MotionEvent;
 
 import com.mopub.common.CloseableLayout.ClosePosition;
@@ -86,9 +84,6 @@ public void setCloseVisible_shouldToggleCloseDrawable() {
         assertThat(subject.isCloseVisible()).isTrue();
     }
 
-    // setLeft, setTop, setRight, and setBottom, are not available before honeycomb. This
-    // annotation just supresses a warning.
-    @TargetApi(VERSION_CODES.HONEYCOMB)
     @Test
     public void draw_shouldUpdateCloseBounds() {
         subject.setLeft(0);
@@ -163,6 +158,22 @@ public void onTouchEvent_closeRegionDown_thenContentRegionCancel_shouldTogglePre
         assertThat(subject.isClosePressed()).isFalse();
     }
 
+    @Test
+    public void onTouchEvent_closeRegionDown_withCloseNotVisible_withSetCloseAlwaysInteractableFalse_shouldTogglePressedState() {
+        subject.setCloseAlwaysInteractable(false);
+        subject.setCloseVisible(false);
+        subject.onTouchEvent(closeRegionDown);
+        assertThat(subject.isClosePressed()).isFalse();
+    }
+
+    @Test
+    public void onTouchEvent_closeRegionDown_withCloseNotVisible_withSetCloseAlwaysInteractableDefault_shouldTogglePressedState() {
+        // The default of mCloseAlwaysInteractable is true
+        subject.setCloseVisible(false);
+        subject.onTouchEvent(closeRegionDown);
+        assertThat(subject.isClosePressed()).isTrue();
+    }
+
     @Test
     public void pointInCloseBounds_noSlop_shouldReturnValidValues() {
         Rect bounds = new Rect();
@@ -222,4 +233,23 @@ public void pointInCloseBounds_slop_shouldReturnValidValues() {
         assertThat(subject.pointInCloseBounds(20, 199, slop)).isFalse();
         assertThat(subject.pointInCloseBounds(20, 200, slop)).isFalse();
     }
+
+    @Test
+    public void shouldAllowPress_shouldRespectSetCloseAlwaysInteractable() {
+        subject.setCloseVisible(false);
+        subject.setCloseAlwaysInteractable(false);
+        assertThat(subject.shouldAllowPress()).isFalse();
+
+        subject.setCloseVisible(false);
+        subject.setCloseAlwaysInteractable(true);
+        assertThat(subject.shouldAllowPress()).isTrue();
+
+        subject.setCloseVisible(true);
+        subject.setCloseAlwaysInteractable(false);
+        assertThat(subject.shouldAllowPress()).isTrue();
+
+        subject.setCloseVisible(true);
+        subject.setCloseAlwaysInteractable(true);
+        assertThat(subject.shouldAllowPress()).isTrue();
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/LocationServiceTest.java b/mopub-sdk/src/test/java/com/mopub/common/LocationServiceTest.java
index 70c7ec4b..498bac8b 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/LocationServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/LocationServiceTest.java
@@ -4,10 +4,12 @@
 import android.content.Context;
 import android.location.Location;
 import android.location.LocationManager;
+import android.os.SystemClock;
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -28,12 +30,15 @@
     private Activity activity;
     private Location networkLocation;
     private Location gpsLocation;
+    private Location cachedLocation;
     private ShadowLocationManager shadowLocationManager;
 
     @Before
     public void setUp() {
         activity = Robolectric.buildActivity(Activity.class).create().get();
 
+        LocationService.clearLastKnownLocation();
+
         networkLocation = new Location("networkLocation");
         networkLocation.setLatitude(3.1415926535);
         networkLocation.setLongitude(-27.18281828459);
@@ -46,12 +51,22 @@ public void setUp() {
         gpsLocation.setAccuracy(1000);
         gpsLocation.setTime(200);
 
+        cachedLocation = new Location("cachedLocation");
+        cachedLocation.setLatitude(37.776822);
+        cachedLocation.setLongitude(-122.416604);
+        cachedLocation.setAccuracy(25);
+
         shadowLocationManager = shadowOf(
                 (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
         shadowLocationManager.setLastKnownLocation(LocationManager.NETWORK_PROVIDER, networkLocation);
         shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, gpsLocation);
     }
 
+    @After
+    public void tearDown() {
+        LocationService.clearLastKnownLocation();
+    }
+
     @Test
     public void getLastKnownLocation_withFinePermission_shouldReturnMoreRecentLocation() {
         Shadows.shadowOf(activity).grantPermissions(ACCESS_FINE_LOCATION);
@@ -120,6 +135,36 @@ public void getLastKnownLocation_withLocationAwarenessDisabled_shouldReturnNull(
         assertThat(result).isNull();
     }
 
+    @Test
+    public void getLastKnownLocation_withFreshPreviousKnownLocation_shouldReturnPreviousKnownLocation() {
+        LocationService locationService = LocationService.getInstance();
+        locationService.mLastKnownLocation = cachedLocation;
+        // Setting the location updated time to be more recent than minimum location refresh time,
+        // in milliseconds.
+        locationService.mLocationLastUpdatedMillis = SystemClock.elapsedRealtime() -
+                MoPub.getMinimumLocationRefreshTimeMillis() / 2;
+
+        final Location result = LocationService.getLastKnownLocation(activity, 10,
+                MoPub.LocationAwareness.NORMAL);
+
+        assertThat(result).isEqualTo(cachedLocation);
+    }
+
+    @Test
+    public void getLastKnownLocation_withStalePreviousKnownLocation_shouldReturnNull() {
+        LocationService locationService = LocationService.getInstance();
+        locationService.mLastKnownLocation = cachedLocation;
+        // Setting the location updated time to be older than minimum location refresh time,
+        // in milliseconds.
+        locationService.mLocationLastUpdatedMillis = SystemClock.elapsedRealtime() -
+                MoPub.getMinimumLocationRefreshTimeMillis() * 2;
+
+        final Location result = LocationService.getLastKnownLocation(activity, 10,
+                MoPub.LocationAwareness.NORMAL);
+
+        assertThat(result).isNull();
+    }
+
     @Test
     public void getLocationFromProvider_withNetworkProvider_withCoarsePermission_shouldReturnNetworkLocation() {
         Shadows.shadowOf(activity).grantPermissions(ACCESS_COARSE_LOCATION);
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
index 7ecf4ae8..eb92fcc5 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
@@ -1,7 +1,5 @@
 package com.mopub.common;
 
-import android.annotation.TargetApi;
-import android.os.Build;
 import android.webkit.CookieSyncManager;
 import android.webkit.WebView;
 
@@ -34,7 +32,6 @@ public void setUp() {
         subject.setWebView(mockWebView);
     }
 
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
     @Test
     public void onPause_withIsFinishingTrue_shouldStopLoading_shouldLoadBlankUrl_shouldPauseWebView() throws Exception {
         // We have to manually call #onPause here after #finish since the activity is not being managed by Android
@@ -48,7 +45,6 @@ public void onPause_withIsFinishingTrue_shouldStopLoading_shouldLoadBlankUrl_sho
         verify(mockWebView).onPause();
     }
 
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
     @Test
     public void onPause_withIsFinishingFalse_shouldPauseWebView() throws Exception {
         subject.onPause();
@@ -58,7 +54,6 @@ public void onPause_withIsFinishingFalse_shouldPauseWebView() throws Exception {
         verify(mockWebView).onPause();
     }
 
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
     @Test
     public void onResume_shouldResumeWebView() throws Exception {
         subject.onResume();
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
index b54eb796..27a9597a 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 
+import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Reflection;
 import com.mopub.mobileads.BuildConfig;
@@ -53,6 +54,47 @@ public void setup() {
         mockRequestParameters = mock(MoPubRewardedVideoManager.RequestParameters.class);
 
         mockStatic(MoPubRewardedVideoManager.class);
+
+        MoPub.resetBrowserAgent();
+    }
+
+    @Test
+    public void setBrowserAgent_withDefaultValue_shouldNotChangeBrowserAgent_shouldSetOverriddenFlag() {
+        MoPub.setBrowserAgent(BrowserAgent.IN_APP);
+        assertThat(MoPub.getBrowserAgent()).isEqualTo(BrowserAgent.IN_APP);
+        assertThat(MoPub.isBrowserAgentOverriddenByClient()).isTrue();
+    }
+
+    @Test
+    public void setBrowserAgent_withNonDefaultValue_shouldChangeBrowserAgent_shouldSetOverriddenFlag() {
+        MoPub.setBrowserAgent(BrowserAgent.NATIVE);
+        assertThat(MoPub.getBrowserAgent()).isEqualTo(BrowserAgent.NATIVE);
+        assertThat(MoPub.isBrowserAgentOverriddenByClient()).isTrue();
+    }
+
+    @Test
+    public void setBrowserAgentFromAdServer_whenNotAlreadyOverriddenByClient_shouldSetBrowserAgentFromAdServer() {
+        MoPub.setBrowserAgentFromAdServer(BrowserAgent.NATIVE);
+        assertThat(MoPub.getBrowserAgent()).isEqualTo(BrowserAgent.NATIVE);
+        assertThat(MoPub.isBrowserAgentOverriddenByClient()).isFalse();
+    }
+
+    @Test
+    public void setBrowserAgentFromAdServer_whenAlreadyOverriddenByClient_shouldNotChangeBrowserAgent() {
+        MoPub.setBrowserAgent(BrowserAgent.NATIVE);
+        MoPub.setBrowserAgentFromAdServer(BrowserAgent.IN_APP);
+        assertThat(MoPub.getBrowserAgent()).isEqualTo(BrowserAgent.NATIVE);
+        assertThat(MoPub.isBrowserAgentOverriddenByClient()).isTrue();
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void setBrowserAgent_withNullValue_shouldThrowException() {
+        MoPub.setBrowserAgent(null);
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void setBrowserAgentFromAdServer_withNullValue_shouldThrowException() {
+        MoPub.setBrowserAgentFromAdServer(null);
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
index bde01702..dadf0efa 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
@@ -4,28 +4,35 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
+import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 
+import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
 
+import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK;
+import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK;
 import static com.mopub.common.UrlAction.HANDLE_MOPUB_SCHEME;
-import static com.mopub.common.UrlAction.IGNORE_ABOUT_SCHEME;
 import static com.mopub.common.UrlAction.HANDLE_PHONE_SCHEME;
-import static com.mopub.common.UrlAction.OPEN_NATIVE_BROWSER;
+import static com.mopub.common.UrlAction.HANDLE_SHARE_TWEET;
+import static com.mopub.common.UrlAction.IGNORE_ABOUT_SCHEME;
 import static com.mopub.common.UrlAction.OPEN_APP_MARKET;
 import static com.mopub.common.UrlAction.OPEN_IN_APP_BROWSER;
-import static com.mopub.common.UrlAction.HANDLE_SHARE_TWEET;
-import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK;
-import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK;
+import static com.mopub.common.UrlAction.OPEN_NATIVE_BROWSER;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class UrlActionTest {
 
+    @Before
+    public void setUp() {
+        MoPub.resetBrowserAgent();
+    }
+
     @Test
     public void handleMopubScheme_shouldBeCaseInsensitive() throws Exception {
         assertUrlActionMatching(HANDLE_MOPUB_SCHEME, "mopub:", true);
@@ -59,6 +66,21 @@ public void handlePhoneScheme_shouldBeCaseInsensitive() throws Exception {
     public void openNativeBrowser_shouldBeCaseInsensitive() throws Exception {
         assertUrlActionMatching(OPEN_NATIVE_BROWSER, "mopubnativebrowser:", true);
         assertUrlActionMatching(OPEN_NATIVE_BROWSER, "MoPuBnAtIvEbRoWsEr:", true);
+        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "http:", false);
+        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "HtTp:", false);
+        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "https:", false);
+        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "HtTpS:", false);
+    }
+
+    @Test
+    public void openNativeBrowser_withNativeBrowserAgent_shouldAlsoMatchHttpSchemes() throws Exception {
+        MoPub.setBrowserAgent(BrowserAgent.NATIVE);
+        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "mopubnativebrowser:", true);
+        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "MoPuBnAtIvEbRoWsEr:", true);
+        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "http:", true);
+        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "HtTp:", true);
+        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "https:", true);
+        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "HtTpS:", true);
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
index 66ccbdd2..909292e8 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
@@ -13,7 +13,6 @@
 import com.mopub.network.Networking;
 
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java
index df0626ea..509175ed 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java
@@ -5,6 +5,8 @@
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 
+import org.junit.After;
+import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
@@ -15,14 +17,26 @@
 import java.net.URISyntaxException;
 
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class UrlResolutionTaskTest {
-    private final String BASE_URL =  "https://a.example.com/b/c/d?e=f";
     @Mock private HttpURLConnection mockHttpUrlConnection;
+    @Mock private UrlResolutionTask.UrlResolutionListener mockListener;
+
+    private UrlResolutionTask subject;
+    private final String BASE_URL =  "https://a.example.com/b/c/d?e=f";
+
+    @Before
+    public void setUp() throws Exception {
+        subject = new UrlResolutionTask(mockListener);
+    }
+
+    @After
+    public void tearDown() {
+        MoPub.setBrowserAgent(MoPub.BrowserAgent.IN_APP);
+    }
 
     @Test
     public void resolveRedirectLocation_withAbsoluteRedirect_shouldReturnAbsolutePath() throws Exception {
@@ -135,9 +149,48 @@ public void resolveRedirectLocation_withInvalidUrl_shouldThrowURISyntaxException
         UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection);
     }
 
+    @Test
+    public void doInBackground_withInAppBrowserAgent_withHttpScheme_shouldTryToResolveRedirectAndReturnNull() throws Exception {
+        // Since BASE_URL is not resolvable, attempting to resolve any redirects would result in
+        // catching an IOException and returning null. Hence, a null return value implies that
+        // redirect resolution was tried instead of just returning the URL.
+        assertThat(subject.doInBackground(BASE_URL)).isEqualTo(null);
+    }
+
+    @Test
+    public void doInBackground_withNativeBrowserAgent_withHttpScheme_shouldReturnUrlWithoutRedirectResolution() throws Exception {
+        MoPub.setBrowserAgent(MoPub.BrowserAgent.NATIVE);
+        assertThat(subject.doInBackground(BASE_URL)).isEqualTo(BASE_URL);
+    }
+
+    @Test
+    public void doInBackground_withInAppBrowserAgent_withNonHttpScheme_shouldReturnUrlWithoutRedirectResolution() throws Exception {
+        final String nonHttpUrl = "nonhttps://a.example.com/b/c/d?e=f";
+        assertThat(subject.doInBackground(nonHttpUrl)).isEqualTo(nonHttpUrl);
+    }
+
+    @Test
+    public void doInBackground_withNativeBrowserAgent_withNonHttpScheme_shouldReturnUrlWithoutRedirectResolution() throws Exception {
+        MoPub.setBrowserAgent(MoPub.BrowserAgent.NATIVE);
+        final String nonHttpUrl = "nonhttps://a.example.com/b/c/d?e=f";
+        assertThat(subject.doInBackground(nonHttpUrl)).isEqualTo(nonHttpUrl);
+    }
+
+    @Test
+    public void doInBackground_withInAppBrowserAgent_withMoPubNativeBrowserScheme_shouldReturnUrlWithoutRedirectResolution() throws Exception {
+        final String mopubNativeBrowserUrl = "mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.twitter.com";
+        assertThat(subject.doInBackground(mopubNativeBrowserUrl)).isEqualTo(mopubNativeBrowserUrl);
+    }
+
+    @Test
+    public void doInBackground_withNativeBrowserAgent_withMoPubNativeBrowserScheme_shouldReturnUrlWithoutRedirectResolution() throws Exception {
+        MoPub.setBrowserAgent(MoPub.BrowserAgent.NATIVE);
+        final String mopubNativeBrowserUrl = "mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.twitter.com";
+        assertThat(subject.doInBackground(mopubNativeBrowserUrl)).isEqualTo(mopubNativeBrowserUrl);
+    }
+
     private void setupMockHttpUrlConnection(final int responseCode,
             @Nullable final String absolutePathUrl) throws IOException {
-        mockHttpUrlConnection = mock(HttpURLConnection.class);
         when(mockHttpUrlConnection.getResponseCode()).thenReturn(responseCode);
         when(mockHttpUrlConnection.getHeaderField("Location")).thenReturn(absolutePathUrl);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
index 19552de1..7a5f2917 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
@@ -44,7 +44,11 @@
 import org.robolectric.DefaultTestLifecycle;
 import org.robolectric.RobolectricGradleTestRunner;
 import org.robolectric.TestLifecycle;
+import org.robolectric.annotation.Config;
 import org.robolectric.internal.bytecode.InstrumentationConfiguration;
+import org.robolectric.manifest.AndroidManifest;
+import org.robolectric.res.FileFsFile;
+import org.robolectric.res.FsFile;
 import org.robolectric.util.concurrent.RoboExecutorService;
 
 import static com.mopub.common.MoPub.LocationAwareness;
@@ -108,4 +112,26 @@ public void prepareTest(Object test) {
             CacheService.clearAndNullCaches();
         }
     }
+
+    // custom AppManifest logic adapted from:
+    // https://gist.github.com/venator85/282df3677af9ecac56e5e4b91471cd8f
+    @Override
+    protected AndroidManifest getAppManifest(Config config) {
+        final AndroidManifest appManifest = super.getAppManifest(config);
+
+        if (appManifest.getAndroidManifestFile().exists()) {
+            return appManifest;
+        }
+
+        final FsFile androidManifestFile = FileFsFile.from(getModuleRootPath(config),
+                appManifest.getAndroidManifestFile().getPath()
+                        .replace("manifests/full", "manifests/aapt"));
+        return new AndroidManifest(androidManifestFile, appManifest.getResDirectory(),
+                appManifest.getAssetsDirectory());
+    }
+
+    private String getModuleRootPath(Config config) {
+        final String moduleRoot = config.constants().getResource("").toString().replace("file:", "");
+        return moduleRoot.substring(0, moduleRoot.indexOf("/build"));
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
index 63212fdb..2d44074a 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
@@ -1,12 +1,9 @@
 package com.mopub.common.util;
 
-import android.annotation.TargetApi;
 import android.os.AsyncTask;
-import android.os.Build.VERSION_CODES;
 import android.os.Handler;
 import android.os.Looper;
 
-import com.mopub.TestSdkHelper;
 import com.mopub.mobileads.test.support.ThreadUtils;
 
 import org.junit.Before;
@@ -39,77 +36,21 @@ protected Void doInBackground(String... strings) {
     }
 
     @Test
-    public void safeExecuteOnExecutor_beforeHoneycomb_shouldCallExecuteWithParams() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.GINGERBREAD_MR1);
-        AsyncTasks.safeExecuteOnExecutor(asyncTask, "hello");
-
-        verify(asyncTask).execute(eq("hello"));
-    }
-
-
-    @Test
-    public void safeExecutorOnExecutor_beforeHoneycomb_withNullParam_shouldCallExecute() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.GINGERBREAD_MR1);
-
-        AsyncTasks.safeExecuteOnExecutor(asyncTask, (String) null);
-
-        verify(asyncTask).execute(eq((String) null));
-    }
-
-
-    @Test
-    public void safeExecutorOnExecutor_beforeHoneycomb_withNullAsyncTask_shouldThrowIllegalArgumentException() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.GINGERBREAD_MR1);
-        try {
-            AsyncTasks.safeExecuteOnExecutor(null, "hello");
-            fail("Should have thrown NullPointerException");
-        } catch (NullPointerException exception) {
-            // pass
-        }
-    }
-
-
-    @Test
-    public void safeExecutorOnExecutor_beforeHoneycomb_runningOnABackgroundThread_shouldThrowIllegalStateException() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.GINGERBREAD_MR1);
-        ensureFastFailWhenTaskIsRunOnBackgroundThread();
-    }
-
-
-    @TargetApi(VERSION_CODES.HONEYCOMB)
-    @Test
-    public void safeExecuteOnExecutor_atLeastHoneycomb_shouldCallExecuteWithParamsWithExecutor() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.HONEYCOMB);
-        AsyncTasks.safeExecuteOnExecutor(asyncTask, "goodbye");
-
-        verify(asyncTask).executeOnExecutor(any(Executor.class), eq("goodbye"));
-    }
-
-    @TargetApi(VERSION_CODES.HONEYCOMB)
-    @Test
-    public void safeExecutorOnExecutor_atLeastHoneycomb_withNullParam_shouldCallExecuteWithParamsWithExecutor() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.HONEYCOMB);
+    public void safeExecuteOnExecutor_withNullParam_shouldCallExecuteWithParamsWithExecutor() throws Exception {
         AsyncTasks.safeExecuteOnExecutor(asyncTask, (String) null);
 
         verify(asyncTask).executeOnExecutor(any(Executor.class), eq((String) null));
     }
 
 
-    @Test
-    public void safeExecutorOnExecutor_atLeastHoneycomb_withNullAsyncTask_shouldThrowIllegalArgumentException() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.HONEYCOMB);
-        try {
-            AsyncTasks.safeExecuteOnExecutor(null, "hello");
-            fail("Should have thrown NullPointerException");
-        } catch (NullPointerException exception) {
-            // pass
-        }
+    @Test(expected = NullPointerException.class)
+    public void safeExecuteOnExecutor_withNullAsyncTask_shouldThrowNullPointerException() throws Exception {
+        AsyncTasks.safeExecuteOnExecutor(null, "hello");
     }
 
 
     @Test
-    public void safeExecutorOnExecutor_atLeastHoneycomb_runningOnABackgroundThread_shouldThrowIllegalStateException() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.HONEYCOMB);
+    public void safeExecuteOnExecutor_runningOnABackgroundThread_shouldThrowIllegalStateException() throws Exception {
         ensureFastFailWhenTaskIsRunOnBackgroundThread();
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
index 159d9b32..dd4a3ea5 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
@@ -8,6 +8,8 @@
 import android.net.Uri;
 import android.os.Bundle;
 
+import com.mopub.common.MoPub;
+import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.exceptions.IntentNotResolvableException;
 import com.mopub.exceptions.UrlParseException;
@@ -38,6 +40,7 @@
     public void setUp() {
         activityContext = Robolectric.buildActivity(Activity.class).create().get();
         applicationContext = activityContext.getApplicationContext();
+        MoPub.resetBrowserAgent();
     }
 
     @Test
@@ -151,6 +154,53 @@ public void intentForNativeBrowserScheme_whenUrlParameterMissing_shouldThrowExce
         Intents.intentForNativeBrowserScheme(Uri.parse("mopubnativebrowser://navigate"));
     }
 
+    @Test
+    public void intentForNativeBrowserScheme_whenBrowserAgentSetToNative_whenSchemeIsMoPubNativeBrowser_shouldProperlyHandleEncodedUrls() throws UrlParseException {
+        MoPub.setBrowserAgent(BrowserAgent.NATIVE);
+
+        intentForNativeBrowserScheme_shouldProperlyHandleEncodedUrls();
+    }
+
+    @Test(expected = UrlParseException.class)
+    public void intentForNativeBrowserScheme_whenBrowserAgentSetToNative_whenSchemeIsMoPubNativeBrowser_whenHostIsNotNavigate_shouldThrowException() throws UrlParseException {
+        MoPub.setBrowserAgent(BrowserAgent.NATIVE);
+
+        intentForNativeBrowserScheme_whenNotNavigate_shouldThrowException();
+    }
+
+    @Test(expected = UrlParseException.class)
+    public void intentForNativeBrowserScheme_whenBrowserAgentSetToNative_whenSchemeIsMoPubNativeBrowserButUrlParameterMissing_shouldThrowException() throws UrlParseException {
+        MoPub.setBrowserAgent(BrowserAgent.NATIVE);
+
+        intentForNativeBrowserScheme_whenUrlParameterMissing_shouldThrowException();
+    }
+
+    @Test
+    public void intentForNativeBrowserScheme_whenBrowserAgentSetToNative_whenSchemeIsHttpOrHttps_shouldProperlyHandleEncodedUrls() throws UrlParseException {
+        MoPub.setBrowserAgent(BrowserAgent.NATIVE);
+
+        Intent intent;
+
+        intent = Intents.intentForNativeBrowserScheme(Uri.parse("http://www.example.com"));
+        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
+        assertThat(intent.getDataString()).isEqualTo("http://www.example.com");
+
+        intent = Intents.intentForNativeBrowserScheme(Uri.parse("https://www.example.com/?query=1&two=2"));
+        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
+        assertThat(intent.getDataString()).isEqualTo("https://www.example.com/?query=1&two=2");
+
+        intent = Intents.intentForNativeBrowserScheme(Uri.parse("https://www.example.com/?query=1%26two%3D2"));
+        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
+        assertThat(intent.getDataString()).isEqualTo("https://www.example.com/?query=1%26two%3D2");
+    }
+
+    @Test(expected = UrlParseException.class)
+    public void intentForNativeBrowserScheme_whenBrowserAgentSetToNative_whenSchemeNotMoPubNativeBrowserOrHttpOrHttps_shouldThrowException() throws UrlParseException {
+        MoPub.setBrowserAgent(BrowserAgent.NATIVE);
+
+        Intents.intentForNativeBrowserScheme(Uri.parse("foo://www.example.com"));
+    }
+
     @Test
     public void intentForShareTweetScheme_whenValidUri_shouldReturnShareTweetIntent() throws UrlParseException {
         Intent intent;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
index a42b716d..cfaa764b 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
@@ -7,13 +7,12 @@
 import android.content.pm.ActivityInfo;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.ResolveInfo;
-import android.os.Build;
 
-import com.mopub.TestSdkHelper;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.mobileads.MoPubActivity;
 import com.mopub.mobileads.MraidActivity;
 import com.mopub.mobileads.MraidVideoPlayerActivity;
+import com.mopub.mobileads.RewardedMraidActivity;
 
 import org.junit.After;
 import org.junit.Before;
@@ -75,6 +74,7 @@ public void checkWebViewSdkActivitiesDeclared_shouldIncludeFourActivityDeclarati
         assertLogIncludes(
                 "com.mopub.mobileads.MoPubActivity",
                 "com.mopub.mobileads.MraidActivity",
+                "com.mopub.mobileads.RewardedMraidActivity",
                 "com.mopub.mobileads.MraidVideoPlayerActivity",
                 "com.mopub.common.MoPubBrowser"
         );
@@ -98,6 +98,7 @@ public void checkNativeSdkActivitiesDeclared_shouldIncludeOneActivityDeclaration
     public void displayWarningForMissingActivities_withAllActivitiesDeclared_shouldNotShowLogOrToast() throws Exception {
         RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
         RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, RewardedMraidActivity.class), mockResolveInfo);
         RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
         RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
 
@@ -129,6 +130,7 @@ public void displayWarningForMissingActivities_withoutInterstitialModule_without
      public void displayWarningForMissingActivities_withOneMissingActivity_shouldLogOnlyThatOne() throws Exception {
         RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
         RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, RewardedMraidActivity.class), mockResolveInfo);
         RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
         // Here, we leave out MoPubBrowser on purpose
 
@@ -140,6 +142,7 @@ public void displayWarningForMissingActivities_withOneMissingActivity_shouldLogO
         assertLogDoesntInclude(
                 "com.mopub.mobileads.MoPubActivity",
                 "com.mopub.mobileads.MraidActivity",
+                "com.mopub.mobileads.RewardedMraidActivity",
                 "com.mopub.mobileads.MraidVideoPlayerActivity"
         );
     }
@@ -156,6 +159,7 @@ public void displayWarningForMissingActivities_withAllMissingActivities_shouldLo
         assertLogIncludes(
                 "com.mopub.mobileads.MoPubActivity",
                 "com.mopub.mobileads.MraidActivity",
+                "com.mopub.mobileads.RewardedMraidActivity",
                 "com.mopub.mobileads.MraidVideoPlayerActivity",
                 "com.mopub.common.MoPubBrowser"
         );
@@ -182,7 +186,6 @@ public void displayWarningForMissingActivities_withMissingActivities_withDebugFa
     }
 
     @SuppressWarnings("unchecked")
-    @TargetApi(13)
     @Test
     public void displayWarningForMisconfiguredActivities_withAllActivitiesConfigured_shouldNotLogOrShowToast() throws Exception {
         ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
@@ -193,6 +196,7 @@ public void displayWarningForMisconfiguredActivities_withAllActivitiesConfigured
 
         RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
         RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, RewardedMraidActivity.class), mockResolveInfo);
         RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
         RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
 
@@ -226,6 +230,7 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
 
         RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
         RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, RewardedMraidActivity.class), mockResolveInfo);
         RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
         RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
 
@@ -237,6 +242,7 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         assertLogIncludes("The android:configChanges param for activity " + MoPubActivity.class.getName() + " must include keyboardHidden.");
         assertLogDoesntInclude(
                 "com.mopub.mobileads.MraidActivity",
+                "com.mopub.mobileads.RewardedMraidActivity",
                 "com.mopub.mobileads.MraidVideoPlayerActivity",
                 "com.mopub.common.MoPubBrowser"
         );
@@ -245,7 +251,6 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
     }
 
     @SuppressWarnings("unchecked")
-    @TargetApi(13)
     @Test
     public void displayWarningForMisconfiguredActivities_withOneMisconfiguredActivity_withMissingAllConfigChangesValues_shouldLogAllConfigChangesValues() throws Exception {
         ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
@@ -267,56 +272,6 @@ public void displayWarningForMisconfiguredActivities_withOneMisconfiguredActivit
     }
 
     @SuppressWarnings("unchecked")
-
-    @TargetApi(13)
-    @Test
-    public void displayWarningForMisconfiguredActivities_withMissingScreenSize_withApiLessThan13_shouldNotLogOrShowToast() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.HONEYCOMB);
-        ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_KEYBOARD_HIDDEN))).thenReturn(true);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_ORIENTATION))).thenReturn(true);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(false);
-        ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
-
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-
-        ShadowLog.setupLogging();
-        setDebugMode(true);
-
-        ManifestUtils.displayWarningForMisconfiguredActivities(context, requiredWebViewSdkActivities);
-
-        assertThat(ShadowToast.getLatestToast()).isNull();
-        assertThat(ShadowLog.getLogs()).isEmpty();
-    }
-
-    @SuppressWarnings("unchecked")
-    @TargetApi(13)
-    @Test
-    public void displayWarningForMisconfiguredActivities_withMissingScreenSize_withTargetApiLessThan13_shouldNotLogOrShowToast() throws Exception {
-        // Set target API to < 13
-        ApplicationInfo applicationInfo = context.getApplicationInfo();
-        applicationInfo.targetSdkVersion = Build.VERSION_CODES.HONEYCOMB_MR1;
-        when(context.getApplicationInfo()).thenReturn(applicationInfo);
-
-        ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_KEYBOARD_HIDDEN))).thenReturn(true);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_ORIENTATION))).thenReturn(true);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(false);
-        ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
-
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-
-        ShadowLog.setupLogging();
-        setDebugMode(true);
-
-        ManifestUtils.displayWarningForMisconfiguredActivities(context, requiredWebViewSdkActivities);
-
-        assertThat(ShadowToast.getLatestToast()).isNull();
-        assertThat(ShadowLog.getLogs()).isEmpty();
-    }
-
-    @SuppressWarnings("unchecked")
-    @TargetApi(13)
     @Test
     public void displayWarningForMisconfiguredActivities_withMisconfiguredActivities_withDebugTrue_shouldShowToast() throws Exception {
         ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
@@ -337,7 +292,6 @@ public void displayWarningForMisconfiguredActivities_withMisconfiguredActivities
     }
 
     @SuppressWarnings("unchecked")
-    @TargetApi(13)
     @Test
     public void displayWarningForMisconfiguredActivities_withMisconfiguredActivities_withDebugFalse_shouldNotShowToast() throws Exception {
         ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
@@ -375,6 +329,7 @@ public void getRequiredWebViewSdkActivities_shouldIncludeRequiredActivities() th
         assertThat(requiredWebViewSdkActivities).containsOnly(
                 MoPubActivity.class,
                 MraidActivity.class,
+                RewardedMraidActivity.class,
                 MraidVideoPlayerActivity.class,
                 MoPubBrowser.class
         );
@@ -400,19 +355,25 @@ public void getRequiredNativeSdkActivities_shouldIncludeRequiredActivities() thr
     private void addInterstitialModule() {
         Class moPubActivityClass = com.mopub.mobileads.MoPubActivity.class;
         Class mraidActivityClass = com.mopub.mobileads.MraidActivity.class;
+        Class rewardedMraidActivityClass = com.mopub.mobileads.RewardedMraidActivity.class;
         if (!ManifestUtils.getRequiredWebViewSdkActivities().contains(moPubActivityClass)) {
             ManifestUtils.getRequiredWebViewSdkActivities().add(moPubActivityClass);
         }
         if (!ManifestUtils.getRequiredWebViewSdkActivities().contains(mraidActivityClass)) {
             ManifestUtils.getRequiredWebViewSdkActivities().add(mraidActivityClass);
         }
+        if (!ManifestUtils.getRequiredWebViewSdkActivities().contains(rewardedMraidActivityClass)) {
+            ManifestUtils.getRequiredWebViewSdkActivities().add(rewardedMraidActivityClass);
+        }
     }
 
     private void removeInterstitialModule() {
         Class moPubActivityClass = com.mopub.mobileads.MoPubActivity.class;
         Class mraidActivityClass = com.mopub.mobileads.MraidActivity.class;
+        Class rewardedMraidActivityClass = com.mopub.mobileads.RewardedMraidActivity.class;
         ManifestUtils.getRequiredWebViewSdkActivities().remove(moPubActivityClass);
         ManifestUtils.getRequiredWebViewSdkActivities().remove(mraidActivityClass);
+        ManifestUtils.getRequiredWebViewSdkActivities().remove(rewardedMraidActivityClass);
     }
 
     private void setDebugMode(boolean enabled) {
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/VersionCodeTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/VersionCodeTest.java
deleted file mode 100644
index 2dcaa3fd..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/VersionCodeTest.java
+++ /dev/null
@@ -1,58 +0,0 @@
-package com.mopub.common.util;
-
-import android.os.Build;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.util.ReflectionHelpers;
-
-import static com.mopub.common.util.VersionCode.BASE;
-import static com.mopub.common.util.VersionCode.CUR_DEVELOPMENT;
-import static com.mopub.common.util.VersionCode.DONUT;
-import static com.mopub.common.util.VersionCode.FROYO;
-import static com.mopub.common.util.VersionCode.ICE_CREAM_SANDWICH;
-import static com.mopub.common.util.VersionCode.JELLY_BEAN;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(RobolectricTestRunner.class)
-public class VersionCodeTest {
-    @Test
-    public void currentApiLevel_shouldReflectActualApiLevel() throws Exception {
-        ReflectionHelpers.setStaticField(Build.VERSION.class, "SDK_INT", 4);
-        assertThat(VersionCode.currentApiLevel()).isEqualTo(DONUT);
-
-        ReflectionHelpers.setStaticField(Build.VERSION.class, "SDK_INT", 8);
-        assertThat(VersionCode.currentApiLevel()).isEqualTo(FROYO);
-
-        ReflectionHelpers.setStaticField(Build.VERSION.class, "SDK_INT", 14);
-        assertThat(VersionCode.currentApiLevel()).isEqualTo(ICE_CREAM_SANDWICH);
-    }
-
-    @Test
-    public void currentApiLevel_whenUnknownApiLevel_shouldReturnCurDevelopment() throws Exception {
-        ReflectionHelpers.setStaticField(Build.VERSION.class, "SDK_INT", 900);
-        assertThat(VersionCode.currentApiLevel()).isEqualTo(CUR_DEVELOPMENT);
-    }
-
-    @Test
-    public void isAtMost_shouldCompareVersions() throws Exception {
-        assertThat(ICE_CREAM_SANDWICH.isAtMost(BASE)).isFalse();
-        assertThat(ICE_CREAM_SANDWICH.isAtMost(JELLY_BEAN)).isTrue();
-        assertThat(ICE_CREAM_SANDWICH.isAtMost(ICE_CREAM_SANDWICH)).isTrue();
-    }
-
-    @Test
-    public void isAtLeast_shouldCompareVersions() throws Exception {
-        assertThat(ICE_CREAM_SANDWICH.isAtLeast(BASE)).isTrue();
-        assertThat(ICE_CREAM_SANDWICH.isAtLeast(JELLY_BEAN)).isFalse();
-        assertThat(ICE_CREAM_SANDWICH.isAtLeast(ICE_CREAM_SANDWICH)).isTrue();
-    }
-
-    @Test
-    public void isBelow_shouldCompareVersions() throws Exception {
-        assertThat(ICE_CREAM_SANDWICH.isBelow(BASE)).isFalse();
-        assertThat(ICE_CREAM_SANDWICH.isBelow(JELLY_BEAN)).isTrue();
-        assertThat(ICE_CREAM_SANDWICH.isBelow(ICE_CREAM_SANDWICH)).isFalse();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java
index 48fa3198..a9eb7a6b 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java
@@ -1,12 +1,11 @@
 package com.mopub.common.util;
 
 import android.app.Activity;
-import android.content.Context;
-import android.content.res.Resources;
 import android.view.View;
 import android.widget.RelativeLayout;
 import android.widget.TextView;
 
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -17,63 +16,114 @@
 
 @RunWith(RobolectricTestRunner.class)
 public class ViewsTest {
-    private Context context;
-    private View subject;
-    private RelativeLayout parent;
-    private Activity testActivity;
-    private Resources testResources;
+    private Activity activity;
+    private View frameLayout;
+    private RelativeLayout relativeLayout;
+    private View view;
 
     @Before
     public void setup() {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        subject = new View(context);
-        parent = new RelativeLayout(context);
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+
+        // Expected view hierarchy:
+        // - FrameLayout
+        // -- RelativeLayout
+        // --- View
+        frameLayout = activity.findViewById(android.R.id.content);
+        relativeLayout = new RelativeLayout(activity);
+        view = new View(activity);
 
+        activity.setContentView(relativeLayout);
     }
 
     @Test
     public void removeFromParent_shouldRemoveViewFromParent() throws Exception {
-        assertThat(parent.getChildCount()).isEqualTo(0);
+        assertThat(relativeLayout.getChildCount()).isEqualTo(0);
 
-        parent.addView(subject);
-        assertThat(parent.getChildCount()).isEqualTo(1);
-        assertThat(subject.getParent()).isEqualTo(parent);
+        relativeLayout.addView(view);
+        assertThat(relativeLayout.getChildCount()).isEqualTo(1);
+        assertThat(view.getParent()).isEqualTo(relativeLayout);
 
-        Views.removeFromParent(subject);
+        Views.removeFromParent(view);
 
-        assertThat(parent.getChildCount()).isEqualTo(0);
-        assertThat(subject.getParent()).isNull();
+        assertThat(relativeLayout.getChildCount()).isEqualTo(0);
+        assertThat(view.getParent()).isNull();
     }
 
     @Test
     public void removeFromParent_withMultipleChildren_shouldRemoveCorrectChild() throws Exception {
-        parent.addView(new TextView(context));
+        relativeLayout.addView(new TextView(activity));
 
-        assertThat(parent.getChildCount()).isEqualTo(1);
+        assertThat(relativeLayout.getChildCount()).isEqualTo(1);
 
-        parent.addView(subject);
+        relativeLayout.addView(view);
 
-        assertThat(parent.getChildCount()).isEqualTo(2);
+        assertThat(relativeLayout.getChildCount()).isEqualTo(2);
 
-        Views.removeFromParent(subject);
-        assertThat(parent.getChildCount()).isEqualTo(1);
+        Views.removeFromParent(view);
+        assertThat(relativeLayout.getChildCount()).isEqualTo(1);
 
-        assertThat(parent.getChildAt(0)).isInstanceOf(TextView.class);
+        assertThat(relativeLayout.getChildAt(0)).isInstanceOf(TextView.class);
     }
 
     @Test
-    public void removeFromParent_whenViewIsNull_shouldPass() throws Exception {
+    public void removeFromParent_whenViewIsNull_shouldNotThrowException() throws Exception {
         Views.removeFromParent(null);
 
         // pass
     }
 
     @Test
-    public void removeFromParent_whenViewsParentIsNull_shouldPass() throws Exception {
-        assertThat(subject.getParent()).isNull();
+    public void removeFromParent_whenViewsParentIsNull_shouldNotThrowException() throws Exception {
+        assertThat(view.getParent()).isNull();
 
-        Views.removeFromParent(subject);
+        Views.removeFromParent(view);
 
         // pass
     }
+
+    @Test
+    public void getTopmostView_withActivityContext_shouldReturnRootView() {
+        relativeLayout.addView(view);
+
+        View rootView = Views.getTopmostView(activity, view);
+
+        assertThat(rootView).isEqualTo(frameLayout);
+    }
+
+    @Test
+    public void getTopmostView_withNonActivityContext_shouldReturnRootView() {
+        relativeLayout.addView(view);
+
+        View rootView = Views.getTopmostView(activity.getApplicationContext(), view);
+
+        assertThat(rootView).isEqualTo(frameLayout);
+    }
+
+    @Test
+    public void getTopmostView_withNonActivityContext_withUnattachedView_shouldReturnView() {
+        // don't add "view" to the view hierarchy
+
+        View rootView = Views.getTopmostView(activity.getApplicationContext(), view);
+
+        assertThat(rootView).isEqualTo(view);
+    }
+
+    @Test
+    public void getTopmostView_withNonActivityContext_withNullView_shouldReturnNull() {
+        relativeLayout.addView(view);
+
+        View rootView = Views.getTopmostView(activity.getApplicationContext(), null);
+
+        assertThat(rootView).isNull();
+    }
+
+    @Test
+    public void getTopmostView_withNullArguments_shouldReturnNull() {
+        relativeLayout.addView(view);
+
+        View rootView = Views.getTopmostView(null, null);
+
+        assertThat(rootView).isNull();
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
index 3446601f..a2971b0f 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
@@ -1,5 +1,7 @@
 package com.mopub.common.util.test.support;
 
+import android.support.annotation.NonNull;
+
 import com.mopub.common.util.Reflection;
 
 import org.robolectric.annotation.Implementation;
@@ -17,7 +19,7 @@ public static void reset() {
     }
 
     @Implementation
-    public static boolean classFound(final String className) throws Exception {
+    public static boolean classFound(@NonNull final String className) {
         if (sNextClassNotFound) {
             sNextClassNotFound = false;
             return false;
@@ -30,4 +32,4 @@ public static boolean classFound(final String className) throws Exception {
     public static void setNextClassNotFound(final boolean nextNotFound) {
         sNextClassNotFound = nextNotFound;
     }
-}
\ No newline at end of file
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
index 64071c25..b28dc1c4 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
@@ -139,4 +139,40 @@ public void getCustomEventName_withRewardedVideoFormat_shouldBeMoPubRewardedVide
 
         assertThat(customEventName).isEqualTo("com.mopub.mobileads.MoPubRewardedVideo");
     }
+
+    @Test
+    public void getCustomEventName_withRewardedPlayableFormat_shouldBeMoPubRewardedPlayable() {
+        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.INTERSTITIAL,
+                AdType.REWARDED_PLAYABLE, null, headers);
+
+        assertThat(customEventName).isEqualTo("com.mopub.mobileads.MoPubRewardedPlayable");
+    }
+
+    @Test
+    public void isMoPubSpecific_withMoPubInterstitialClassNames_shouldBeTrue() {
+        assertThat(AdTypeTranslator.CustomEventType
+                .isMoPubSpecific("com.mopub.mraid.MraidInterstitial")).isTrue();
+        assertThat(AdTypeTranslator.CustomEventType
+                .isMoPubSpecific("com.mopub.mobileads.HtmlInterstitial")).isTrue();
+        assertThat(AdTypeTranslator.CustomEventType
+                .isMoPubSpecific("com.mopub.mobileads.VastVideoInterstitial")).isTrue();
+    }
+
+    @Test
+    public void isMoPubSpecific_withMoPubRewardedClassNames_shouldBeTrue() {
+        assertThat(AdTypeTranslator.CustomEventType
+                .isMoPubSpecific("com.mopub.mobileads.MoPubRewardedVideo")).isTrue();
+        assertThat(AdTypeTranslator.CustomEventType
+                .isMoPubSpecific("com.mopub.mobileads.MoPubRewardedPlayable")).isTrue();
+    }
+
+    @Test
+    public void isMoPubSpecific_withNonMoPubClassNames_shouldBeFalse() {
+        assertThat(AdTypeTranslator.CustomEventType
+                .isMoPubSpecific("com.mopub.mobileads.GooglePlayServicesBanner")).isFalse();
+        assertThat(AdTypeTranslator.CustomEventType
+                .isMoPubSpecific("com.whatever.ads.SomeRandomAdFormat")).isFalse();
+        assertThat(AdTypeTranslator.CustomEventType
+                .isMoPubSpecific(null)).isFalse();
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
index 9728aa1b..2cd5ee27 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
@@ -176,14 +176,14 @@ public void scheduleRefreshTimerIfEnabled_shouldCancelOldRefreshAndScheduleANewO
     }
 
     @Test
-    public void scheduleRefreshTimer_shouldNotScheduleRefreshIfAutorefreshIsOff() throws Exception {
+    public void scheduleRefreshTimer_shouldNotScheduleRefreshIfAutoRefreshIsOff() throws Exception {
         response = response.toBuilder().setRefreshTimeMilliseconds(30).build();
         subject.onAdLoadSuccess(response);
 
         ShadowLooper.pauseMainLooper();
         assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
 
-        subject.forceSetAutorefreshEnabled(false);
+        subject.setShouldAllowAutoRefresh(false);
 
         subject.scheduleRefreshTimerIfEnabled();
 
@@ -206,42 +206,53 @@ public void scheduleRefreshTimer_whenAdViewControllerNotConfiguredByResponse_sho
     }
 
     @Test
-    public void forceSetAutoRefreshEnabled_shouldSetAutoRefreshSetting() throws Exception {
-        assertThat(subject.getAutorefreshEnabled()).isTrue();
+    public void setShouldAllowAutoRefresh_shouldSetCurrentAutoRefreshStatus() throws Exception {
+        assertThat(subject.getCurrentAutoRefreshStatus()).isTrue();
 
-        subject.forceSetAutorefreshEnabled(false);
-        assertThat(subject.getAutorefreshEnabled()).isFalse();
+        subject.setShouldAllowAutoRefresh(false);
+        assertThat(subject.getCurrentAutoRefreshStatus()).isFalse();
 
-        subject.forceSetAutorefreshEnabled(true);
-        assertThat(subject.getAutorefreshEnabled()).isTrue();
+        subject.setShouldAllowAutoRefresh(true);
+        assertThat(subject.getCurrentAutoRefreshStatus()).isTrue();
     }
 
     @Test
-    public void pauseRefresh_shouldDisableAutorefresh() throws Exception {
-        assertThat(subject.getAutorefreshEnabled()).isTrue();
+    public void pauseRefresh_shouldDisableAutoRefresh() throws Exception {
+        assertThat(subject.getCurrentAutoRefreshStatus()).isTrue();
 
         subject.pauseRefresh();
-        assertThat(subject.getAutorefreshEnabled()).isFalse();
+        assertThat(subject.getCurrentAutoRefreshStatus()).isFalse();
     }
 
     @Test
-    public void unpauseRefresh_afterUnpauseRefresh_shouldEnableRefresh() throws Exception {
+    public void resumeRefresh_afterPauseRefresh_shouldEnableRefresh() throws Exception {
         subject.pauseRefresh();
 
-        subject.unpauseRefresh();
-        assertThat(subject.getAutorefreshEnabled()).isTrue();
+        subject.resumeRefresh();
+        assertThat(subject.getCurrentAutoRefreshStatus()).isTrue();
     }
 
     @Test
-    public void pauseAndUnpauseRefresh_withRefreshForceDisabled_shouldAlwaysHaveRefreshFalse() throws Exception {
-        subject.forceSetAutorefreshEnabled(false);
-        assertThat(subject.getAutorefreshEnabled()).isFalse();
+    public void pauseAndResumeRefresh_withShouldAllowAutoRefreshFalse_shouldAlwaysHaveRefreshFalse() throws Exception {
+        subject.setShouldAllowAutoRefresh(false);
+        assertThat(subject.getCurrentAutoRefreshStatus()).isFalse();
 
         subject.pauseRefresh();
-        assertThat(subject.getAutorefreshEnabled()).isFalse();
+        assertThat(subject.getCurrentAutoRefreshStatus()).isFalse();
 
-        subject.unpauseRefresh();
-        assertThat(subject.getAutorefreshEnabled()).isFalse();
+        subject.resumeRefresh();
+        assertThat(subject.getCurrentAutoRefreshStatus()).isFalse();
+    }
+
+    @Test
+    public void multiplePausesBeforeResumeRefresh_shouldEnableAutoRefresh() {
+        assertThat(subject.getCurrentAutoRefreshStatus()).isTrue();
+
+        subject.pauseRefresh();
+        subject.pauseRefresh();
+        subject.resumeRefresh();
+
+        assertThat(subject.getCurrentAutoRefreshStatus()).isTrue();
     }
 
     @Test
@@ -250,7 +261,7 @@ public void enablingAutoRefresh_afterLoadAd_shouldScheduleNewRefreshTimer() thro
         final AdViewController adViewControllerSpy = spy(subject);
 
         adViewControllerSpy.loadAd();
-        adViewControllerSpy.forceSetAutorefreshEnabled(true);
+        adViewControllerSpy.setShouldAllowAutoRefresh(true);
         verify(adViewControllerSpy).scheduleRefreshTimerIfEnabled();
     }
 
@@ -258,7 +269,7 @@ public void enablingAutoRefresh_afterLoadAd_shouldScheduleNewRefreshTimer() thro
     public void enablingAutoRefresh_withoutCallingLoadAd_shouldNotScheduleNewRefreshTimer() throws Exception {
         final AdViewController adViewControllerSpy = spy(subject);
 
-        adViewControllerSpy.forceSetAutorefreshEnabled(true);
+        adViewControllerSpy.setShouldAllowAutoRefresh(true);
         verify(adViewControllerSpy, never()).scheduleRefreshTimerIfEnabled();
     }
 
@@ -269,10 +280,10 @@ public void disablingAutoRefresh_shouldCancelRefreshTimers() throws Exception {
         ShadowLooper.pauseMainLooper();
 
         subject.loadAd();
-        subject.forceSetAutorefreshEnabled(true);
+        subject.setShouldAllowAutoRefresh(true);
         assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
 
-        subject.forceSetAutorefreshEnabled(false);
+        subject.setShouldAllowAutoRefresh(false);
         assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java
new file mode 100644
index 00000000..73423b79
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java
@@ -0,0 +1,310 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.graphics.Rect;
+import android.os.Handler;
+import android.view.View;
+import android.view.ViewParent;
+import android.view.ViewTreeObserver;
+import android.view.Window;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowSystemClock;
+
+import static android.view.ViewTreeObserver.OnPreDrawListener;
+import static com.mopub.mobileads.BannerVisibilityTracker.BannerVisibilityChecker;
+import static com.mopub.mobileads.BannerVisibilityTracker.BannerVisibilityTrackerListener;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class BannerVisibilityTrackerTest {
+    private static final int MIN_VISIBLE_DIPS = 1;
+    private static final int MIN_VISIBLE_MILLIS = 0;
+
+    private Activity activity;
+    private BannerVisibilityTracker subject;
+    private BannerVisibilityChecker visibilityChecker;
+    private Handler visibilityHandler;
+
+    private View mockView;
+    @Mock
+    private BannerVisibilityTrackerListener visibilityTrackerListener;
+
+    @Before
+    public void setUp() throws Exception {
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+        mockView = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
+        subject = new BannerVisibilityTracker(activity, mockView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+
+        subject.setBannerVisibilityTrackerListener(visibilityTrackerListener);
+
+        visibilityChecker = subject.getBannerVisibilityChecker();
+        visibilityHandler = subject.getVisibilityHandler();
+
+        // XXX We need this to ensure that our SystemClock starts
+        ShadowSystemClock.uptimeMillis();
+    }
+
+    @Test
+    public void constructor_shouldSetOnPreDrawListenerForDecorView() throws Exception {
+        Activity spyActivity = spy(Robolectric.buildActivity(Activity.class).create().get());
+        Window window = mock(Window.class);
+        View decorView = mock(View.class);
+        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
+
+        when(spyActivity.getWindow()).thenReturn(window);
+        when(window.getDecorView()).thenReturn(decorView);
+        when(decorView.findViewById(anyInt())).thenReturn(decorView);
+        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
+        when(viewTreeObserver.isAlive()).thenReturn(true);
+
+        subject = new BannerVisibilityTracker(spyActivity, mockView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+        assertThat(subject.mOnPreDrawListener).isNotNull();
+        verify(viewTreeObserver).addOnPreDrawListener(subject.mOnPreDrawListener);
+        assertThat(subject.mWeakViewTreeObserver.get()).isEqualTo(viewTreeObserver);
+    }
+
+    @Test
+    public void constructor_withNonAliveViewTreeObserver_shouldNotSetOnPreDrawListenerForDecorView() throws Exception {
+        Activity mockActivity = mock(Activity.class);
+        Window window = mock(Window.class);
+        View decorView = mock(View.class);
+        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
+
+        when(mockActivity.getWindow()).thenReturn(window);
+        when(window.getDecorView()).thenReturn(decorView);
+        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
+        when(viewTreeObserver.isAlive()).thenReturn(false);
+
+        subject = new BannerVisibilityTracker(mockActivity, mockView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+        verify(viewTreeObserver, never()).addOnPreDrawListener(subject.mOnPreDrawListener);
+        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
+    }
+
+    @Test
+    public void constructor_withApplicationContext_shouldNotSetOnPreDrawListener() {
+        subject = new BannerVisibilityTracker(activity.getApplicationContext(), mockView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+
+        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
+    }
+
+    @Test
+    public void constructor_withViewTreeObserverNotSet_shouldSetViewTreeObserver() {
+        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
+        View rootView = mock(View.class);
+
+        when(mockView.getContext()).thenReturn(activity.getApplicationContext());
+        when(mockView.getRootView()).thenReturn(rootView);
+        when(rootView.getViewTreeObserver()).thenReturn(viewTreeObserver);
+        when(viewTreeObserver.isAlive()).thenReturn(true);
+
+        subject = new BannerVisibilityTracker(activity.getApplicationContext(), rootView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+        assertThat(subject.mWeakViewTreeObserver.get()).isEqualTo(viewTreeObserver);
+    }
+
+    @Test
+    public void destroy_shouldRemoveListenerFromDecorView() throws Exception {
+        Activity spyActivity = spy(Robolectric.buildActivity(Activity.class).create().get());
+        Window window = mock(Window.class);
+        View decorView = mock(View.class);
+        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
+
+        when(spyActivity.getWindow()).thenReturn(window);
+        when(window.getDecorView()).thenReturn(decorView);
+        when(decorView.findViewById(anyInt())).thenReturn(decorView);
+        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
+        when(viewTreeObserver.isAlive()).thenReturn(true);
+
+        subject = new BannerVisibilityTracker(spyActivity, mockView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+        subject.destroy();
+
+        assertThat(visibilityHandler.hasMessages(0)).isFalse();
+        assertThat(subject.isVisibilityScheduled()).isFalse();
+        verify(viewTreeObserver).removeOnPreDrawListener(any(OnPreDrawListener.class));
+        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
+        assertThat(subject.getBannerVisibilityTrackerListener()).isNull();
+    }
+
+    // BannerVisibilityRunnable Tests
+    @Test
+    public void visibilityRunnable_run_withViewVisibleForAtLeastMinDuration_shouldCallOnVisibilityChangedCallback_shouldMarkImpTrackerAsFired_shouldNotScheduleVisibilityCheck() throws Exception {
+        subject.new BannerVisibilityRunnable().run();
+
+        verify(visibilityTrackerListener).onVisibilityChanged();
+        assertThat(subject.isImpTrackerFired()).isTrue();
+        assertThat(subject.isVisibilityScheduled()).isFalse();
+    }
+
+    @Test
+    public void visibilityRunnable_run_withViewNotVisible_shouldNotCallOnVisibilityChangedCallback_shouldNotMarkImpTrackerAsFired_shouldScheduleVisibilityCheck() throws Exception {
+        when(mockView.getVisibility()).thenReturn(View.INVISIBLE);
+
+        subject.new BannerVisibilityRunnable().run();
+
+        verify(visibilityTrackerListener, never()).onVisibilityChanged();
+        assertThat(subject.isImpTrackerFired()).isFalse();
+        assertThat(subject.isVisibilityScheduled()).isTrue();
+    }
+
+    @Test
+    public void visibilityRunnable_run_witViewVisibleForLessThanMinDuration_shouldNotCallOnVisibilityChangedCallback_shouldNotMarkImpTrackerAsFired_shouldScheduleVisibilityCheck() throws Exception {
+        subject = new BannerVisibilityTracker(activity, mockView, mockView, 1, 1000);
+        subject.new BannerVisibilityRunnable().run();
+
+        verify(visibilityTrackerListener, never()).onVisibilityChanged();
+        assertThat(subject.isImpTrackerFired()).isFalse();
+        assertThat(subject.isVisibilityScheduled()).isTrue();
+    }
+
+    // BannerVisibilityChecker Tests
+    @Test
+    public void hasRequiredTimeElapsed_withStartTimeNotSetYet_shouldReturnFalse() throws Exception {
+        assertThat(visibilityChecker.hasRequiredTimeElapsed()).isFalse();
+    }
+
+    @Test
+    public void hasRequiredTimeElapsed_withStartTimeSet_withElapsedTimeGreaterThanMinTimeViewed_shouldReturnTrue() throws Exception {
+        visibilityChecker.setStartTimeMillis();
+
+        // minVisibleMillis is 0 ms as defined by constant MIN_VISIBLE_MILLIS
+        assertThat(visibilityChecker.hasRequiredTimeElapsed()).isTrue();
+    }
+
+    @Test
+    public void hasRequiredTimeElapsed_withStartTimeSet_withElapsedTimeLessThanMinTimeViewed_shouldReturnFalse() throws Exception {
+        subject = new BannerVisibilityTracker(activity, mockView, mockView, 1, 1000);
+        visibilityChecker = subject.getBannerVisibilityChecker();
+        visibilityChecker.setStartTimeMillis();
+
+        // minVisibleMillis is 1 sec, should return false since we are checking immediately before 1 sec elapses
+        assertThat(visibilityChecker.hasRequiredTimeElapsed()).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenParentIsNull_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 100, 100, 100, 100, false, true);
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewIsOffScreen_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, false);
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewIsEntirelyOnScreen_shouldReturnTrue() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isTrue();
+    }
+
+    @Test
+    public void isVisible_whenViewHasMoreVisibleDipsThanMinVisibleDips_shouldReturnTrue() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 1, 2, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isTrue();
+    }
+
+    @Test
+    public void isVisible_whenViewHasExactlyMinVisibleDips_shouldReturnTrue() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 1, 1, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isTrue();
+    }
+
+    @Test
+    public void isVisible_whenViewHasLessVisibleDipsThanMinVisibleDips_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 0, 1, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenVisibleAreaIsZero_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 0, 0, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewIsInvisibleOrGone_shouldReturnFalse() throws Exception {
+        View view = createViewMock(View.INVISIBLE, 100, 100, 100, 100, true, true);
+        assertThat(visibilityChecker.isVisible(view, view)).isFalse();
+
+        reset(view);
+        view = createViewMock(View.GONE, 100, 100, 100, 100, true, true);
+        assertThat(visibilityChecker.isVisible(view, view)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewHasZeroWidth_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 100, 100, 0, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewHasZeroHeight_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 100, 100, 100, 0, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewIsNull_shouldReturnFalse() throws Exception {
+        assertThat(visibilityChecker.isVisible(null, null)).isFalse();
+    }
+
+    static View createViewMock(final int visibility,
+            final int visibleWidth,
+            final int visibleHeight,
+            final int viewWidth,
+            final int viewHeight,
+            final boolean isParentSet,
+            final boolean isOnScreen) {
+        View view = mock(View.class);
+        when(view.getContext()).thenReturn(new Activity());
+        when(view.getVisibility()).thenReturn(visibility);
+
+        when(view.getGlobalVisibleRect(any(Rect.class)))
+                .thenAnswer(new Answer<Boolean>() {
+                    @Override
+                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {
+                        Object[] args = invocationOnMock.getArguments();
+                        Rect rect = (Rect) args[0];
+                        rect.set(0, 0, visibleWidth, visibleHeight);
+                        return isOnScreen;
+                    }
+                });
+
+        when(view.getWidth()).thenReturn(viewWidth);
+        when(view.getHeight()).thenReturn(viewHeight);
+
+        if (isParentSet) {
+            when(view.getParent()).thenReturn(mock(ViewParent.class));
+        }
+
+        when(view.getViewTreeObserver()).thenCallRealMethod();
+
+        return view;
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
index d1d56c5c..d6f00d40 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
@@ -55,8 +55,8 @@ public void pluginState_atLeastJellybeanMr2_shouldDefaultToOff_shouldNeverBeEnab
     }
 
     @Test
-    public void pluginState_atLeastIcsButBelowJellybeanMr2_shouldDefaultToOn_shouldAllowToggling() {
-        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.ICE_CREAM_SANDWICH);
+    public void pluginState_BelowJellybeanMr2_shouldDefaultToOn_shouldAllowToggling() {
+        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.JELLY_BEAN);
         subject = new BaseHtmlWebView(testActivity, mockAdReport);
         assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.ON);
 
@@ -67,20 +67,6 @@ public void pluginState_atLeastIcsButBelowJellybeanMr2_shouldDefaultToOn_shouldA
         assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.ON);
     }
 
-    @Test
-    public void pluginState_beforeIcs_shouldDefaultToOff_shouldAllowToggling() {
-        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.GINGERBREAD_MR1);
-
-        subject = new BaseHtmlWebView(testActivity, mockAdReport);
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.OFF);
-
-        subject.enablePlugins(true);
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.ON);
-
-        subject.enablePlugins(false);
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.OFF);
-    }
-
     @Test
     public void init_shouldSetWebViewScrollability() throws Exception {
         subject.init(false);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
index 4dc63c99..fa3edbba 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
@@ -4,7 +4,6 @@
 import android.content.Context;
 import android.content.Intent;
 import android.view.View;
-import android.view.ViewGroup;
 import android.widget.FrameLayout;
 
 import com.mopub.common.test.support.SdkTestRunner;
@@ -83,6 +82,6 @@ public void getBroadcastIdentifier_withMissingBroadCastId_shouldReturnNull() thr
     }
 
     protected FrameLayout getContentView(BaseInterstitialActivity subject) {
-        return (FrameLayout) ((ViewGroup) subject.findViewById(android.R.id.content)).getChildAt(0);
+        return subject.getCloseableLayout();
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
index 89eb1187..619ae104 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
@@ -33,9 +33,9 @@ public void setup() {
         context = Robolectric.buildActivity(Activity.class).create().get();
     }
 
-    @Config(sdk = VERSION_CODES.JELLY_BEAN_MR1)
+    @Config(sdk = VERSION_CODES.JELLY_BEAN)
     @Test
-    public void beforeJellyBeanMr1_shouldDisablePluginsByDefault() throws Exception {
+    public void constructor_beforeJellyBeanMr1_shouldDisablePluginsByDefault() throws Exception {
         subject = new BaseWebView(context);
 
         WebSettings webSettings = subject.getSettings();
@@ -46,25 +46,23 @@ public void beforeJellyBeanMr1_shouldDisablePluginsByDefault() throws Exception
     }
 
     @Test
-    public void allPlatforms_shouldDisableFileAccess() {
+    public void constructor_shouldDisableFileAccess() {
         subject = new BaseWebView(context);
 
         final WebSettings webSettings = subject.getSettings();
         assertThat(webSettings.getAllowFileAccess()).isEqualTo(false);
     }
 
-    @Config(sdk = VERSION_CODES.JELLY_BEAN) // Robo doesn't go earlier than this.
     @Test
-    public void atLeastHoneyComb_shouldDisableContentAccess() {
+    public void constructor_shouldDisableContentAccess() {
         subject = new BaseWebView(context);
 
         final WebSettings webSettings = subject.getSettings();
         assertThat(webSettings.getAllowContentAccess()).isEqualTo(false);
     }
 
-    @Config(sdk = VERSION_CODES.JELLY_BEAN)
     @Test
-    public void atLeastJellybean_shouldDisableAccessFromFileUrls() {
+    public void constructor_shouldDisableAccessFromFileUrls() {
         subject = new BaseWebView(context);
 
         final WebSettings webSettings = subject.getSettings();
@@ -74,7 +72,7 @@ public void atLeastJellybean_shouldDisableAccessFromFileUrls() {
 
     @Config(sdk = VERSION_CODES.JELLY_BEAN_MR2)
     @Test
-    public void atLeastJellybeanMr2_shouldPass() throws Exception {
+    public void constructor_atLeastJellybeanMr2_shouldPass() throws Exception {
         subject = new BaseWebView(context);
 
         subject.enablePlugins(true);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
index 1dd64a58..18dd5961 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
@@ -55,7 +55,6 @@
 
     @Before
     public void setUp() throws Exception {
-
         when(moPubView.getAdTimeoutDelay()).thenReturn(null);
         when(moPubView.getAdWidth()).thenReturn(320);
         when(moPubView.getAdHeight()).thenReturn(50);
@@ -128,7 +127,6 @@ public void timeout_withNonNullAdTimeoutDelay_shouldSignalFailureAndInvalidateWi
         assertThat(subject.isInvalidated()).isTrue();
     }
 
-
     @Test
     public void loadAd_shouldPropagateLocationInLocalExtras() throws Exception {
         Location expectedLocation = new Location("");
@@ -210,7 +208,6 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         subject.loadAd();
     }
 
-
     @Test
     public void loadAd_whenCallingOnBannerFailed_shouldCancelExistingTimeoutRunnable() throws Exception {
         ShadowLooper.pauseMainLooper();
@@ -241,25 +238,77 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
     }
 
     @Test
-    public void onBannerLoaded_shouldSignalMoPubView() throws Exception {
+    public void onBannerLoaded_whenViewIsHtmlBannerWebView_shouldNotTrackImpression() throws Exception {
+        View mockHtmlBannerWebView = mock(HtmlBannerWebView.class);
+        subject.onBannerLoaded(mockHtmlBannerWebView);
+
+        verify(moPubView).nativeAdLoaded();
+        verify(moPubView).setAdContentView(eq(mockHtmlBannerWebView));
+        verify(moPubView, never()).trackNativeImpression();
+
+        // Since there are no visibility imp tracking headers, imp tracking should not be enabled.
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isFalse();
+        assertThat(subject.getVisibilityTracker()).isNull();
+    }
+
+    @Test
+    public void onBannerLoaded_whenViewIsNotHtmlBannerWebView_shouldSignalMoPubView() throws Exception {
         View view = new View(Robolectric.buildActivity(Activity.class).create().get());
         subject.onBannerLoaded(view);
 
         verify(moPubView).nativeAdLoaded();
         verify(moPubView).setAdContentView(eq(view));
         verify(moPubView).trackNativeImpression();
+
+        // Since there are no visibility imp tracking headers, imp tracking should not be enabled.
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isFalse();
+        assertThat(subject.getVisibilityTracker()).isNull();
     }
 
     @Test
-    public void onBannerLoaded_whenViewIsHtmlBannerWebView_shouldNotTrackImpression() throws Exception {
+    public void onBannerLoaded_whenViewIsHtmlBannerWebView_withVisibilityImpressionTrackingEnabled_shouldSetUpVisibilityTrackerWithListener_shouldNotTrackNativeImpressionImmediately() {
         View mockHtmlBannerWebView = mock(HtmlBannerWebView.class);
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS, "1");
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS, "0");
+
+        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
         subject.onBannerLoaded(mockHtmlBannerWebView);
 
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(1);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(0);
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isTrue();
+        assertThat(subject.getVisibilityTracker()).isNotNull();
+        assertThat(subject.getVisibilityTracker().getBannerVisibilityTrackerListener()).isNotNull();
         verify(moPubView).nativeAdLoaded();
         verify(moPubView).setAdContentView(eq(mockHtmlBannerWebView));
         verify(moPubView, never()).trackNativeImpression();
     }
 
+    @Test
+    public void onBannerLoaded_whenViewIsNotHtmlBannerWebView_withVisibilityImpressionTrackingEnabled_shouldSetUpVisibilityTrackerWithListener_shouldNotTrackNativeImpressionImmediately() {
+        View view = new View(Robolectric.buildActivity(Activity.class).create().get());
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS, "1");
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS, "0");
+
+        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
+        subject.onBannerLoaded(view);
+
+        // When visibility impression tracking is enabled, regardless of whether the banner view is
+        // HtmlBannerWebView or not, the behavior should be the same.
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(1);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(0);
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isTrue();
+        assertThat(subject.getVisibilityTracker()).isNotNull();
+        assertThat(subject.getVisibilityTracker().getBannerVisibilityTrackerListener()).isNotNull();
+        verify(moPubView).nativeAdLoaded();
+        verify(moPubView).setAdContentView(eq(view));
+        verify(moPubView, never()).trackNativeImpression();
+    }
+
     @Test
     public void onBannerFailed_shouldLoadFailUrl() throws Exception {
         subject.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
@@ -347,4 +396,106 @@ public void invalidate_shouldCauseBannerListenerMethodsToDoNothing() throws Exce
         verify(moPubView, never()).adClosed();
         verify(moPubView, never()).registerClick();
     }
+
+    @Test
+    public void parseBannerImpressionTrackingHeaders_whenMissingInServerExtras_shouldUseDefaultValues_shouldNotEnableVisibilityImpressionTracking() {
+        // If headers are missing, use default values
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isFalse();
+    }
+
+    @Test
+    public void parseBannerImpressionTrackingHeaders_withBothValuesNonInteger_shouldUseDefaultValues_shouldNotEnableVisibilityImpressionTracking() {
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS, "");
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS, null);
+
+        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
+
+        // Both header values must be Integers in order to be parsed
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isFalse();
+    }
+
+    @Test
+    public void parseBannerImpressionTrackingHeaders_withNonIntegerMinVisibleDipsValue_shouldUseDefaultValues_shouldNotEnableVisibilityImpressionTracking() {
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS, null);
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS, "0");
+
+        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
+
+        // Both header values must be Integers in order to be parsed
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isFalse();
+    }
+
+    @Test
+    public void parseBannerImpressionTrackingHeaders_withNonIntegerMinVisibleMsValue_shouldUseDefaultValues_shouldNotEnableVisibilityImpressionTracking() {
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS, "1");
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS, "");
+
+        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
+
+        // Both header values must be Integers in order to be parsed
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isFalse();
+    }
+
+    @Test
+    public void parseBannerImpressionTrackingHeaders_withBothValuesValid_shouldParseValues_shouldEnableVisibilityImpressionTracking() {
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS, "1");
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS, "0");
+
+        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
+
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(1);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(0);
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isTrue();
+    }
+
+    @Test
+    public void parseBannerImpressionTrackingHeaders_withBothValuesInvalid_shouldParseValues_shouldNotEnableVisibilityImpressionTracking() {
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS, "0");
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS, "-1");
+
+        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
+
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(0);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(-1);
+
+        // ImpressionMinVisibleDips must be > 0 AND ImpressionMinVisibleMs must be >= 0 in order to
+        // enable viewable impression tracking
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isFalse();
+    }
+
+    @Test
+    public void parseBannerImpressionTrackingHeaders_withInvalidMinVisibleDipsValue_shouldParseValues_shouldNotEnableVisibilityImpressionTracking() {
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS, "0");
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS, "0");
+
+        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
+
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(0);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(0);
+
+        // ImpressionMinVisibleDips must be > 0 in order to enable viewable impression tracking
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isFalse();
+    }
+
+    @Test
+    public void parseBannerImpressionTrackingHeaders_withInvalidMinVisibleMsValue_shouldParseValues_shouldNotEnableVisibilityImpressionTracking() {
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS, "1");
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS, "-1");
+
+        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
+
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(1);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(-1);
+
+        // ImpressionMinVisibleMs must be >= 0 in order to enable viewable impression tracking
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isFalse();
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
index 2fdd7a26..f824f149 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
@@ -13,6 +13,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
+import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
 import java.util.HashMap;
@@ -48,7 +49,7 @@ public void setup() {
         subject = new HtmlBanner();
         htmlBannerWebView = TestHtmlBannerWebViewFactory.getSingletonMock();
         customEventBannerListener = mock(CustomEventBanner.CustomEventBannerListener.class);
-        context = new Activity();
+        context = Robolectric.buildActivity(Activity.class).create().get();
         localExtras = new HashMap<String, Object>();
         serverExtras = new HashMap<String, String>();
         responseBody = "expected response body";
@@ -122,4 +123,13 @@ public void loadBanner_shouldCauseServerDimensionsToBeHonoredWhenLayingOutView()
         assertThat(layoutParams.height).isEqualTo(50);
         assertThat(layoutParams.gravity).isEqualTo(Gravity.CENTER);
     }
+
+    @Test
+    public void trackMpxAndThirdPartyImpressions_shouldFireJavascriptWebViewDidAppear() throws Exception {
+        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
+        subject.trackMpxAndThirdPartyImpressions();
+
+        verify(htmlBannerWebView).loadHtmlResponse(responseBody);
+        verify(htmlBannerWebView).loadUrl(eq("javascript:webviewDidAppear();"));
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
index ddc9feb7..c0bee0bb 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
@@ -71,11 +71,12 @@ public void shouldOverrideUrlLoading_withMoPubClose_shouldCallAdDidClose() throw
     }
 
     @Test
-    public void shouldOverrideUrlLoading_withMoPubFailLoad_shouldCallLoadFailUrl() throws Exception {
+    public void shouldOverrideUrlLoading_withMoPubFailLoad_shouldCallLoadFailUrl_shouldStopCurrentLoad() throws Exception {
         boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://failLoad");
 
         assertThat(didOverrideUrl).isTrue();
         verify(htmlWebViewListener).onFailed(UNSPECIFIED);
+        verify(htmlWebView).stopLoading();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
index 10dd9951..b4422c18 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
@@ -64,6 +64,7 @@
 
     private HtmlInterstitialWebView htmlInterstitialWebView;
     private CustomEventInterstitialListener customEventInterstitialListener;
+    @Mock private HtmlInterstitial htmlInterstitial;
 
     private MoPubActivity subject;
 
@@ -98,7 +99,9 @@ public void onCreate_shouldHaveLockedOrientation() {
     @Test
     public void preRenderHtml_shouldPreloadTheHtml() throws Exception {
         String htmlData = "this is nonsense";
-        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener, htmlData);
+        MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
+                customEventInterstitialListener, htmlData, true, "redirectUrl",
+                "clickthroughUrl", testBroadcastIdentifier);
 
         verify(htmlInterstitialWebView).enablePlugins(eq(false));
         verify(htmlInterstitialWebView).loadHtmlResponse(htmlData);
@@ -106,15 +109,18 @@ public void preRenderHtml_shouldPreloadTheHtml() throws Exception {
 
     @Test
     public void preRenderHtml_shouldEnableJavascriptCachingForDummyWebView() {
-        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener,
-                "html_data");
+        MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
+                customEventInterstitialListener, "html_data", true, "redirectUrl",
+                "clickthroughUrl", testBroadcastIdentifier);
 
         verify(htmlInterstitialWebView).enableJavascriptCaching();
     }
 
     @Test
     public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFinishLoad() throws Exception {
-        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener, null);
+        MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
+                customEventInterstitialListener, null, true, "redirectUrl",
+                "clickthroughUrl", testBroadcastIdentifier);
 
         ArgumentCaptor<WebViewClient> webViewClientCaptor = ArgumentCaptor.forClass(WebViewClient.class);
         verify(htmlInterstitialWebView).setWebViewClient(webViewClientCaptor.capture());
@@ -128,7 +134,9 @@ public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFinishLoad() throw
 
     @Test
     public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFailLoad() throws Exception {
-        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener, null);
+        MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
+                customEventInterstitialListener, null, true, "redirectUrl",
+                "clickthroughUrl", testBroadcastIdentifier);
 
         ArgumentCaptor<WebViewClient> webViewClientCaptor = ArgumentCaptor.forClass(WebViewClient.class);
         verify(htmlInterstitialWebView).setWebViewClient(webViewClientCaptor.capture());
@@ -147,18 +155,6 @@ public void onCreate_shouldSetContentView() throws Exception {
         assertThat(getContentView().getChildCount()).isEqualTo(1);
     }
 
-    @Test
-    public void onCreate_shouldLayoutWebView() throws Exception {
-        // onCreate is called in #setup
-
-        ArgumentCaptor<FrameLayout.LayoutParams> captor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
-        verify(htmlInterstitialWebView).setLayoutParams(captor.capture());
-        FrameLayout.LayoutParams actualLayoutParams = captor.getValue();
-
-        assertThat(actualLayoutParams.width).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT);
-        assertThat(actualLayoutParams.height).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT);
-    }
-
     @Test
     public void getAdView_shouldReturnPopulatedHtmlWebView() throws Exception {
         // This is needed because we preload in onCreate and the mock gets triggered.
@@ -252,8 +248,9 @@ public void getAdView_shouldSetUpForBroadcastingFail() throws Exception {
     }
 
     @Test
-    public void broadcastingInterstitialListener_onInterstitialLoaded_shouldCallJavascriptWebViewDidAppear() throws Exception {
+    public void broadcastingInterstitialListener_onInterstitialLoaded_withWebViewCacheMiss_shouldCallJavascriptWebViewDidAppear() throws Exception {
         MoPubActivity.BroadcastingInterstitialListener broadcastingInterstitialListener = ((MoPubActivity) subject).new BroadcastingInterstitialListener();
+        WebViewCacheService.clearAll();
 
         broadcastingInterstitialListener.onInterstitialLoaded();
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
index c81d7166..201321c3 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
@@ -1,6 +1,7 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
+import android.os.Handler;
 import android.support.annotation.NonNull;
 
 import com.mopub.common.test.support.SdkTestRunner;
@@ -11,6 +12,7 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mock;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
@@ -18,6 +20,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import static com.mopub.common.Constants.FOUR_HOURS_MILLIS;
 import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
 import static com.mopub.mobileads.MoPubErrorCode.CANCELLED;
@@ -29,12 +32,15 @@
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.READY;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.SHOWING;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.when;
+
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class MoPubInterstitialTest {
@@ -51,6 +57,7 @@
     private MoPubInterstitial.MoPubInterstitialView interstitialView;
     private AdViewController adViewController;
     private String customEventClassName;
+    @Mock private Handler mockHandler;
 
     @Before
     public void setUp() throws Exception {
@@ -58,6 +65,7 @@ public void setUp() throws Exception {
         subject = new MoPubInterstitial(activity, AD_UNIT_ID_VALUE);
         interstitialAdListener = mock(MoPubInterstitial.InterstitialAdListener.class);
         subject.setInterstitialAdListener(interstitialAdListener);
+        subject.setHandler(mockHandler);
 
         interstitialView = mock(MoPubInterstitial.MoPubInterstitialView.class);
 
@@ -422,6 +430,7 @@ public void attemptStateTransition_withLoadingStartState() {
 
         subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
         subject.setCurrentInterstitialState(LOADING);
+        subject.setInterstitialView(interstitialView);
         boolean stateDidChange = subject.attemptStateTransition(IDLE, false);
         assertThat(stateDidChange).isTrue();
         assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
@@ -446,10 +455,13 @@ public void attemptStateTransition_withLoadingStartState() {
         verifyZeroInteractions(customEventInterstitialAdapter);
 
         resetMoPubInterstitial(LOADING);
+        when(interstitialView.getCustomEventClassName())
+                .thenReturn(AdTypeTranslator.CustomEventType.HTML_INTERSTITIAL.toString());
         stateDidChange = subject.attemptStateTransition(READY, false);
         assertThat(stateDidChange).isTrue();
         assertThat(subject.getCurrentInterstitialState()).isEqualTo(READY);
         verifyZeroInteractions(customEventInterstitialAdapter);
+        verify(mockHandler).postDelayed(any(Runnable.class), eq((long) FOUR_HOURS_MILLIS));
 
         resetMoPubInterstitial(LOADING);
         stateDidChange = subject.attemptStateTransition(READY, true);
@@ -533,18 +545,23 @@ public void attemptStateTransition_withReadyStartState() {
         assertThat(stateDidChange).isTrue();
         assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
         verify(customEventInterstitialAdapter).showInterstitial();
+        verify(mockHandler).removeCallbacks(any(Runnable.class));
+        reset(mockHandler);
 
         resetMoPubInterstitial(READY);
         stateDidChange = subject.attemptStateTransition(SHOWING, true);
         assertThat(stateDidChange).isTrue();
         assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
         verify(customEventInterstitialAdapter).showInterstitial();
+        verify(mockHandler).removeCallbacks(any(Runnable.class));
+        reset(mockHandler);
 
         resetMoPubInterstitial(READY);
         stateDidChange = subject.attemptStateTransition(DESTROYED, false);
         assertThat(stateDidChange).isTrue();
         assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
         verify(customEventInterstitialAdapter).invalidate();
+        verify(mockHandler).removeCallbacks(any(Runnable.class));
 
         resetMoPubInterstitial(READY);
         stateDidChange = subject.attemptStateTransition(DESTROYED, true);
@@ -685,6 +702,43 @@ public void attemptStateTransition_withDestroyedStartState() {
         assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
     }
 
+    @Test
+    public void attemptStateTransition_withLoadingStartState_withReadyEndState_withMoPubCustomEvent_shouldExpireAd() {
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(LOADING);
+        subject.setInterstitialView(interstitialView);
+
+        when(interstitialView.getCustomEventClassName())
+                .thenReturn(AdTypeTranslator.CustomEventType.MRAID_INTERSTITIAL.toString());
+        subject.attemptStateTransition(READY, false);
+        verify(mockHandler).postDelayed(any(Runnable.class), eq((long) FOUR_HOURS_MILLIS));
+        reset(mockHandler);
+
+        resetMoPubInterstitial(LOADING);
+        when(interstitialView.getCustomEventClassName())
+                .thenReturn(AdTypeTranslator.CustomEventType.HTML_INTERSTITIAL.toString());
+        subject.attemptStateTransition(READY, false);
+        verify(mockHandler).postDelayed(any(Runnable.class), eq((long) FOUR_HOURS_MILLIS));
+        reset(mockHandler);
+
+        resetMoPubInterstitial(LOADING);
+        when(interstitialView.getCustomEventClassName())
+                .thenReturn(AdTypeTranslator.CustomEventType.VAST_VIDEO_INTERSTITIAL.toString());
+        subject.attemptStateTransition(READY, false);
+        verify(mockHandler).postDelayed(any(Runnable.class), eq((long) FOUR_HOURS_MILLIS));
+    }
+
+    @Test
+    public void attemptStateTransition_withLoadingStartState_withReadyEndState_withNonMoPubCustomEvent_shouldNotExpireAd() {
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(LOADING);
+        subject.setInterstitialView(interstitialView);
+
+        when(interstitialView.getCustomEventClassName()).thenReturn("thirdPartyAd");
+        subject.attemptStateTransition(READY, false);
+        verifyZeroInteractions(mockHandler);
+    }
+
     private void loadCustomEvent() {
         MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedPlayableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedPlayableTest.java
new file mode 100644
index 00000000..1b4708c8
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedPlayableTest.java
@@ -0,0 +1,133 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+
+import com.mopub.common.DataKeys;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mraid.RewardedMraidInterstitial;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.verifyZeroInteractions;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class MoPubRewardedPlayableTest {
+    private Activity activity;
+    private MoPubRewardedPlayable subject;
+
+    @Mock private RewardedMraidInterstitial mockRewardedMraidInterstitial;
+
+    @Before
+    public void setup() {
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+        MoPubRewardedVideoManager.init(activity);
+
+        subject = new MoPubRewardedPlayable();
+    }
+
+    @Test
+    public void onInvalidate_withRewardedMraidActivity_shouldInvalidateRewardedMraidActivity() {
+        subject.setRewardedMraidInterstitial(mockRewardedMraidInterstitial);
+
+        subject.onInvalidate();
+
+        verify(mockRewardedMraidInterstitial).onInvalidate();
+    }
+
+    @Test
+    public void onInvalidate_withNullRewardedMraidActivity_shouldNotInvalidateRewardedMraidActivity() {
+        subject.setRewardedMraidInterstitial(null);
+
+        subject.onInvalidate();
+
+        verifyZeroInteractions(mockRewardedMraidInterstitial);
+    }
+
+    @Test
+    public void loadWithSdkInitialized_withCorrectLocalExtras_shouldLoadVastVideoInterstitial() throws Exception {
+        subject.setRewardedMraidInterstitial(mockRewardedMraidInterstitial);
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
+        final Map<String, String> serverExtras = new HashMap<String, String>();
+        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, "currencyName");
+        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, "10");
+        localExtras.put(DataKeys.HTML_RESPONSE_BODY_KEY, "body");
+        localExtras.put(DataKeys.REWARDED_AD_DURATION_KEY, "30");
+        localExtras.put(DataKeys.SHOULD_REWARD_ON_CLICK_KEY, "0");
+
+        subject.loadWithSdkInitialized(activity, localExtras, serverExtras);
+
+        verify(mockRewardedMraidInterstitial).loadInterstitial(eq(activity),
+                any(CustomEventInterstitial.CustomEventInterstitialListener.class), eq(localExtras),
+                eq(serverExtras));
+        verifyNoMoreInteractions(mockRewardedMraidInterstitial);
+        assertThat(subject.getRewardedAdCurrencyName()).isEqualTo("currencyName");
+        assertThat(subject.getRewardedAdCurrencyAmount()).isEqualTo(10);
+    }
+
+    @Test
+    public void loadWithSdkInitialized_withAdUnitId_shouldSetAdNetworkId() throws Exception {
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
+        localExtras.put(DataKeys.AD_UNIT_ID_KEY, "adUnit");
+
+        subject.loadWithSdkInitialized(activity, localExtras, new HashMap<String, String>());
+
+        assertThat(subject.getAdNetworkId()).isEqualTo("adUnit");
+    }
+
+    @Test
+    public void loadWithSdkInitialized_withNoAdUnitId_shouldUseDefaultAdNetworkId() throws Exception {
+        subject.loadWithSdkInitialized(activity, new HashMap<String, Object>(),
+                new HashMap<String, String>());
+
+        assertThat(subject.getAdNetworkId()).isEqualTo(
+                MoPubRewardedPlayable.MOPUB_REWARDED_PLAYABLE_ID);
+    }
+
+    @Test
+    public void show_withMraidLoaded_shouldShowRewardedMraidInterstitial() {
+        subject.setRewardedMraidInterstitial(mockRewardedMraidInterstitial);
+        subject.setIsLoaded(true);
+
+        subject.show();
+
+        verify(mockRewardedMraidInterstitial).showInterstitial();
+        verifyNoMoreInteractions(mockRewardedMraidInterstitial);
+    }
+
+    @Test
+    public void show_withVideoNotLoaded_shouldDoNothing() {
+        subject.setRewardedMraidInterstitial(mockRewardedMraidInterstitial);
+        subject.setIsLoaded(false);
+
+        subject.show();
+
+        verifyZeroInteractions(mockRewardedMraidInterstitial);
+    }
+
+    @Test
+    public void show_whenInvalidated_shouldDoNothing() {
+        subject.setRewardedMraidInterstitial(mockRewardedMraidInterstitial);
+        subject.setIsLoaded(true);
+        subject.onInvalidate();
+
+        subject.show();
+
+        verify(mockRewardedMraidInterstitial).onInvalidate();
+        verifyNoMoreInteractions(mockRewardedMraidInterstitial);
+        assertThat(subject.getRewardedMraidInterstitial()).isNull();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
index 112b3ff3..a0f28b9a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -1,6 +1,7 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
+import android.content.SharedPreferences;
 import android.net.Uri;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -9,6 +10,7 @@
 import com.mopub.common.DataKeys;
 import com.mopub.common.LifecycleListener;
 import com.mopub.common.MoPubReward;
+import com.mopub.common.SharedPreferencesHelper;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.network.AdRequest;
 import com.mopub.network.AdResponse;
@@ -28,12 +30,18 @@
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowLog;
 import org.robolectric.shadows.ShadowLooper;
 
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.fest.assertions.api.Assertions.fail;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.argThat;
@@ -51,15 +59,32 @@
         MoPubRewardedVideoManagerTest {
 
     public static final String MOPUB_REWARD = "mopub_reward";
+    public static final String REWARDED_CURRENCY_NAME = "Coins";
+    public static final String REWARDED_CURRENCY_AMOUNT_STR = "15";
+    public static final String SINGLE_REWARDED_CURRENCY_JSON =
+            "{\"rewards\": [ { \"name\": \"Coins\", \"amount\": 25 } ] }";
+    public static final String MULTI_REWARDED_CURRENCIES_JSON =
+            "{\n" +
+                    "  \"rewards\": [\n" +
+                    "    { \"name\": \"Coins\", \"amount\": 8 },\n" +
+                    "    { \"name\": \"Diamonds\", \"amount\": 1 },\n" +
+                    "    { \"name\": \"Diamonds\", \"amount\": 10 },\n" +
+                    "    { \"name\": \"Energy\", \"amount\": 20 }\n" +
+                    "  ]\n" +
+                    "}\n";
+    public static final String TEST_CUSTOM_EVENT_PREF_NAME = "mopubTestCustomEventSettings";
+    private static final String CUSTOM_DATA_MAX_LENGTH_EXCEEDED_MESSAGE = "provided rewarded ad custom data parameter longer than supported";
 
     @Mock
     MoPubRequestQueue mockRequestQueue;
     @Mock
     MoPubRewardedVideoListener mockVideoListener;
 
-    AdRequest.Listener requestListener;
+    private AdRequest.Listener requestListener;
     private AdRequest request;
+    private RewardedVideoCompletionRequest rewardedVideoCompletionRequest;
     private Activity mActivity;
+    private SharedPreferences mTestCustomEventSharedPrefs;
 
     @Before
     public void setup() {
@@ -67,12 +92,26 @@ public void setup() {
         MoPubRewardedVideoManager.init(mActivity);
         MoPubRewardedVideoManager.setVideoListener(mockVideoListener);
 
-        when(mockRequestQueue.add(any(AdRequest.class))).then(new Answer<Object>() {
+        mTestCustomEventSharedPrefs = SharedPreferencesHelper.getSharedPreferences(
+                        mActivity, TEST_CUSTOM_EVENT_PREF_NAME);
+        MoPubRewardedVideoManager.setCustomEventSharedPrefs(mTestCustomEventSharedPrefs);
+
+        when(mockRequestQueue.add(any(Request.class))).then(new Answer<Object>() {
             @Override
             public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
-                request = ((AdRequest) invocationOnMock.getArguments()[0]);
-                requestListener = request.getListener();
-                return null;
+                Request req = ((Request) invocationOnMock.getArguments()[0]);
+                if (req.getClass().equals(AdRequest.class)) {
+                    request = (AdRequest) req;
+                    requestListener = request.getListener();
+                    return null;
+                } else if (req.getClass().equals(RewardedVideoCompletionRequest.class)) {
+                    rewardedVideoCompletionRequest = (RewardedVideoCompletionRequest) req;
+                    return null;
+                } else {
+                    throw new Exception(String.format("Request object added to RequestQueue can " +
+                            "only be of type AdRequest or RewardedVideoCompletionRequest, " +
+                            "saw %s instead.", req.getClass()));
+                }
             }
         });
 
@@ -83,7 +122,108 @@ public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
     public void tearDown() {
         // Unpause the main looper in case a test terminated while the looper was paused.
         ShadowLooper.unPauseMainLooper();
-        MoPubRewardedVideoManager.getRewardedVideoData().clear();
+        MoPubRewardedVideoManager.getRewardedAdData().clear();
+        MoPubRewardedVideoManager.getAdRequestStatusMapping().clearMapping();
+        mTestCustomEventSharedPrefs.edit().clear().commit();
+    }
+
+    @Test
+    public void initNetworks_withEmptySharedPrefs_shouldNotInitAnyNetworks() {
+        List<Class<? extends CustomEventRewardedVideo>> networksToInit =
+                Arrays.asList(
+                        CustomEventRewardedVideo.class,
+                        TestCustomEvent.class,
+                        NoVideoCustomEvent.class
+                );
+
+        List<CustomEventRewardedVideo> initializedNetworksList =
+                MoPubRewardedVideoManager.initNetworks(mActivity, networksToInit);
+
+        // Verify that no networks got initialized.
+        assertThat(initializedNetworksList.size()).isEqualTo(0);
+    }
+
+    @Test
+    public void initNetworks_shouldOnlyInitNetworksWithSettingsSavedInSharedPrefs() {
+        // Only TestCustomEvent has settings saved in SharedPrefs.
+        mTestCustomEventSharedPrefs.edit().putString(
+                TestCustomEvent.class.getName(),
+                "{\"k1\":\"v1\",\"k2\":\"v2\"}").commit();
+
+        List<Class<? extends CustomEventRewardedVideo>> networksToInit =
+                Arrays.asList(
+                        CustomEventRewardedVideo.class,
+                        TestCustomEvent.class,
+                        NoVideoCustomEvent.class
+                );
+
+        List<CustomEventRewardedVideo> networksInitialized =
+                MoPubRewardedVideoManager.initNetworks(mActivity, networksToInit);
+
+        // Verify that only TestCustomEvent got initialized.
+        assertThat(networksInitialized.size()).isEqualTo(1);
+        assertThat(networksInitialized.get(0).getClass().getName())
+                .isEqualTo(TestCustomEvent.class.getName());
+    }
+
+    @Test
+    public void initNetworks_withDuplicatedNetworks_shouldOnlyInitDedupedNetworks() {
+        // Only TestCustomEvent has settings saved in SharedPrefs.
+        mTestCustomEventSharedPrefs.edit().putString(
+                TestCustomEvent.class.getName(),
+                "{\"k1\":\"v1\",\"k2\":\"v2\"}").commit();
+
+        // All networks are duplicated.
+        List<Class<? extends CustomEventRewardedVideo>> networksToInit =
+                Arrays.asList(
+                        CustomEventRewardedVideo.class,
+                        TestCustomEvent.class,
+                        NoVideoCustomEvent.class,
+                        TestCustomEvent.class,
+                        NoVideoCustomEvent.class,
+                        CustomEventRewardedVideo.class
+                );
+
+        List<CustomEventRewardedVideo> networksInitialized =
+                MoPubRewardedVideoManager.initNetworks(mActivity, networksToInit);
+
+        // Verify that only TestCustomEvent got initialized, and only once.
+        assertThat(networksInitialized.size()).isEqualTo(1);
+        assertThat(networksInitialized.get(0).getClass().getName())
+                .isEqualTo(TestCustomEvent.class.getName());
+    }
+
+    @Test
+    public void initNetworks_shouldObeyOrderDuringInit() {
+        // Both TestCustomEvent and NoVideoCustomEvent have settings saved in SharedPrefs.
+        mTestCustomEventSharedPrefs.edit().putString(
+                TestCustomEvent.class.getName(),
+                "{\"k1\":\"v1\",\"k2\":\"v2\"}").commit();
+        mTestCustomEventSharedPrefs.edit().putString(
+                NoVideoCustomEvent.class.getName(),
+                "{\"k3\":\"v3\",\"k4\":\"v4\"}").commit();
+
+        // All networks are duplicated.
+        List<Class<? extends CustomEventRewardedVideo>> networksToInit =
+                Arrays.asList(
+                        NoVideoCustomEvent.class,
+                        TestCustomEvent.class,
+                        CustomEventRewardedVideo.class,
+                        TestCustomEvent.class,
+                        CustomEventRewardedVideo.class,
+                        NoVideoCustomEvent.class
+                );
+
+        List<CustomEventRewardedVideo> networksInitialized =
+                MoPubRewardedVideoManager.initNetworks(mActivity, networksToInit);
+
+        // Verify that only NoVideoCustomEvent and TestCustomEvent got initialized,
+        // in that order, and each only once.
+        assertThat(networksInitialized.size()).isEqualTo(2);
+        assertThat(networksInitialized.get(0).getClass().getName())
+                .isEqualTo(NoVideoCustomEvent.class.getName());
+        assertThat(networksInitialized.get(1).getClass().getName())
+                .isEqualTo(TestCustomEvent.class.getName());
     }
 
     @Test
@@ -109,7 +249,7 @@ public void loadVideo_withCustomerIdInRequestParameters_shouldSetCustomerId() {
 
         MoPubRewardedVideoManager.loadVideo("testAdUnit", new MoPubRewardedVideoManager.RequestParameters("keywords", null, "testCustomerId"));
 
-        assertThat(MoPubRewardedVideoManager.getRewardedVideoData().getCustomerId()).isEqualTo("testCustomerId");
+        assertThat(MoPubRewardedVideoManager.getRewardedAdData().getCustomerId()).isEqualTo("testCustomerId");
 
         // Finish the request
         requestListener.onErrorResponse(new VolleyError("end test"));
@@ -119,7 +259,7 @@ public void loadVideo_withCustomerIdInRequestParameters_shouldSetCustomerId() {
     @Test
     public void loadVideo_withVideoAlreadyShowing_shouldNotLoadVideo() {
         // To simulate that a video is showing
-        MoPubRewardedVideoManager.getRewardedVideoData().setCurrentlyShowingAdUnitId("testAdUnit");
+        MoPubRewardedVideoManager.getRewardedAdData().setCurrentlyShowingAdUnitId("testAdUnit");
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
@@ -132,6 +272,66 @@ public void loadVideo_withVideoAlreadyShowing_shouldNotLoadVideo() {
         verifyZeroInteractions(mockRequestQueue);
     }
 
+    @Test
+    public void loadVideo_withDifferentVideoAlreadyShowing_shouldLoadVideo() {
+        // To simulate that a video is showing
+        MoPubRewardedVideoManager.getRewardedAdData().setCurrentlyShowingAdUnitId("testAdUnit");
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("anotherTestAdUnit", null);
+
+        ShadowLooper.unPauseMainLooper();
+
+        verify(mockRequestQueue).add(any(AdRequest.class));
+    }
+
+    @Test
+    public void loadVideo_withCustomEventAlreadyLoaded_shouldNotLoadAnotherVideo() throws Exception {
+        final CustomEventRewardedVideo mockCustomEvent = mock(CustomEventRewardedVideo.class);
+        MoPubRewardedVideoManager.getRewardedAdData().updateAdUnitCustomEventMapping(
+                "testAdUnit", mockCustomEvent, TestCustomEvent.AD_NETWORK_ID);
+
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        // Load the first custom event
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        // Verify the first custom event
+        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
+        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
+        verifyNoMoreInteractions(mockVideoListener);
+        verify(mockRequestQueue).add(any(Request.class));
+        reset(mockVideoListener);
+
+        ShadowLooper.pauseMainLooper();
+
+        // Load the second custom event
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+
+        ShadowLooper.unPauseMainLooper();
+
+        // Verify the first custom event is still available
+        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
+        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
+        verifyNoMoreInteractions(mockVideoListener);
+        // Make sure the second load does not attempt to load another ad
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
     @Test
     public void callbackMethods_withNullListener_shouldNotError() {
         // Clients can set RVM null.
@@ -162,7 +362,7 @@ public void callbackMethods_withNullListener_shouldNotError() {
                 TestCustomEvent.AD_NETWORK_ID,
                 MoPubReward.success("test", 111));
 
-        // The test passed because none of the above calls thew an exception even though the listener is null.
+        // The test passed because none of the above calls threw an exception even though the listener is null.
     }
 
     @Test
@@ -219,7 +419,7 @@ public void onAdSuccess_noCEFound_shouldLoadFailUrl() {
     }
 
     @Test
-    public void onAdSuccess_shouldInstantiateCustomEvent_andLoad() {
+    public void onAdSuccess_shouldInstantiateCustomEvent_shouldLoad() {
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName(
                         "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
@@ -241,49 +441,281 @@ public void onAdSuccess_shouldInstantiateCustomEvent_andLoad() {
     }
 
     @Test
-    public void onAdSuccess_withCustomEventAlreadyLoaded_shouldInvalidateOldCustomEvent() throws Exception {
-        final CustomEventRewardedVideo mockCustomEvent = mock(CustomEventRewardedVideo.class);
-        MoPubRewardedVideoManager.getRewardedVideoData().updateAdUnitCustomEventMapping(
-                "testAdUnit", mockCustomEvent, null, TestCustomEvent.AD_NETWORK_ID);
+    public void onAdSuccess_withLegacyRewardedCurrencyHeaders_shouldMapAdUnitIdToReward_shouldLoad() {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .setRewardedVideoCurrencyName(REWARDED_CURRENCY_NAME)
+                .setRewardedVideoCurrencyAmount(REWARDED_CURRENCY_AMOUNT_STR)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
 
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
+        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
+        verifyNoMoreInteractions(mockVideoListener);
+
+        // Verify that the reward is mapped to the adunit
+        RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
+        assertThat(rewardedVideoData.getMoPubReward("testAdUnit")).isNotNull();
+        assertThat(rewardedVideoData.getMoPubReward("testAdUnit").getLabel()).isEqualTo(REWARDED_CURRENCY_NAME);
+        assertThat(rewardedVideoData.getMoPubReward("testAdUnit").getAmount()).isEqualTo(Integer.parseInt(REWARDED_CURRENCY_AMOUNT_STR));
+        assertThat(rewardedVideoData.getAvailableRewards("testAdUnit")).isEmpty();
+    }
+
+    @Test
+    public void onAdSuccess_withMultiRewardedCurrenciesJsonHeader_shouldMapAdUnitToAvailableRewards_shouldLoad() {
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName(
                         "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
                 .setAdType(AdType.CUSTOM)
+                .setRewardedCurrencies(MULTI_REWARDED_CURRENCIES_JSON)
                 .build();
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        // Load the first custom event
         MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
         requestListener.onSuccess(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
-        // Verify the first custom event
         assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
         verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
         verifyNoMoreInteractions(mockVideoListener);
-        reset(mockVideoListener);
 
+        // Verify that only available rewards are updated, not the final reward mapped to the adunit
+        RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
+        assertThat(rewardedVideoData.getMoPubReward("testAdUnit")).isNull();
+        assertThat(rewardedVideoData.getAvailableRewards("testAdUnit").size()).isEqualTo(4);
+        assertThat(rewardedVideoData.existsInAvailableRewards("testAdUnit", "Coins", 8)).isTrue();
+        assertThat(rewardedVideoData.existsInAvailableRewards("testAdUnit", "Diamonds", 1)).isTrue();
+        assertThat(rewardedVideoData.existsInAvailableRewards("testAdUnit", "Diamonds", 10)).isTrue();
+        assertThat(rewardedVideoData.existsInAvailableRewards("testAdUnit", "Energy", 20)).isTrue();
+    }
+
+    @Test
+    public void onAdSuccess_withSingleRewardedCurrencyJsonHeader_shouldMapAdUnitToRewardAndUpdateAvailableRewards_shouldLoad() {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .setRewardedCurrencies(SINGLE_REWARDED_CURRENCY_JSON)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        // Load the second custom event
         MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
         requestListener.onSuccess(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
-        // Verify the second custom event was loaded
         assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
         verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
         verifyNoMoreInteractions(mockVideoListener);
 
-        // Verify that the first custom event was invalidated
-        verify(mockCustomEvent).onInvalidate();
-        verifyNoMoreInteractions(mockCustomEvent);
+        // Verify that the single reward is mapped to the adunit, and it's the only available reward
+        RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
+        assertThat(rewardedVideoData.getMoPubReward("testAdUnit")).isNotNull();
+        assertThat(rewardedVideoData.getMoPubReward("testAdUnit").getLabel()).isEqualTo("Coins");
+        assertThat(rewardedVideoData.getMoPubReward("testAdUnit").getAmount()).isEqualTo(25);
+        assertThat(rewardedVideoData.getAvailableRewards("testAdUnit").size()).isEqualTo(1);
+        assertThat(rewardedVideoData.existsInAvailableRewards("testAdUnit", "Coins", 25)).isTrue();
+    }
+
+    @Test
+    public void onAdSuccess_withBothLegacyAndJsonHeaders_shouldIgnoreLegacyHeaders_shouldLoad() {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .setRewardedVideoCurrencyName(REWARDED_CURRENCY_NAME)
+                .setRewardedVideoCurrencyAmount(REWARDED_CURRENCY_AMOUNT_STR)
+                .setRewardedCurrencies(MULTI_REWARDED_CURRENCIES_JSON)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
+        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
+        verifyNoMoreInteractions(mockVideoListener);
+
+        // Verify that the legacy headers are ignored, and available rewards are updated from the JSON header
+        RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
+        assertThat(rewardedVideoData.getMoPubReward("testAdUnit")).isNull();
+        assertThat(rewardedVideoData.getAvailableRewards("testAdUnit").size()).isEqualTo(4);
+        assertThat(rewardedVideoData.existsInAvailableRewards("testAdUnit", "Coins", 8)).isTrue();
+        assertThat(rewardedVideoData.existsInAvailableRewards("testAdUnit", "Diamonds", 1)).isTrue();
+        assertThat(rewardedVideoData.existsInAvailableRewards("testAdUnit", "Diamonds", 10)).isTrue();
+        assertThat(rewardedVideoData.existsInAvailableRewards("testAdUnit", "Energy", 20)).isTrue();
+    }
+
+    @Test
+    public void onAdSuccess_withMalformedRewardedCurrenciesJsonHeader_shouldNotUpdateRewardMappings_andNotLoad() {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .setRewardedCurrencies("not json")
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isFalse();
+        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"),
+                eq(MoPubErrorCode.REWARDED_CURRENCIES_PARSING_ERROR));
+        verifyNoMoreInteractions(mockVideoListener);
+
+        // Verify that no reward mappings are updated
+        RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
+        assertThat(rewardedVideoData.getMoPubReward("testAdUnit")).isNull();
+        assertThat(rewardedVideoData.getAvailableRewards("testAdUnit").isEmpty());
+    }
+
+    @Test
+    public void onAdSuccess_withEmptyServerExtras_shouldStillSaveEmptyMapInSharedPrefs() {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        Map<String, ?> networkInitSettings = mTestCustomEventSharedPrefs.getAll();
+        String testCustomEventClassName = TestCustomEvent.class.getName();
+
+        // Verify that TestCustomEvent has an empty map saved in SharedPrefs.
+        assertThat(networkInitSettings.size()).isEqualTo(1);
+        assertThat(networkInitSettings.containsKey(testCustomEventClassName)).isTrue();
+        assertThat(networkInitSettings.get(testCustomEventClassName)).isEqualTo("{}");
+    }
+
+    @Test
+    public void onAdSuccess_withServerExtras_shouldSaveInitParamsInSharedPrefs() {
+        Map<String, String> serverExtras = new HashMap<>();
+        serverExtras.put("k1", "v1");
+        serverExtras.put("k2", "v2");
+
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .setServerExtras(serverExtras)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        Map<String, ?> networkInitSettings = mTestCustomEventSharedPrefs.getAll();
+        String testCustomEventClassName = TestCustomEvent.class.getName();
+
+        // Verify that TestCustomEvent has init params saved in SharedPrefs.
+        assertThat(networkInitSettings.size()).isEqualTo(1);
+        assertThat(networkInitSettings.containsKey(testCustomEventClassName)).isTrue();
+        assertThat(networkInitSettings.get(testCustomEventClassName))
+                .isEqualTo("{\"k1\":\"v1\",\"k2\":\"v2\"}");
+    }
+
+    @Test
+    public void onAdSuccess_withNewInitParams_shouldUpdateInitParamsInSharedPrefs() {
+        // Put in {"k1":"v1","k2":"v2"} as existing init params.
+        mTestCustomEventSharedPrefs.edit().putString(
+                TestCustomEvent.class.getName(),
+                "{\"k1\":\"v1\",\"k2\":\"v2\"}").commit();
+
+        // New init params are {"k3":"v3"}.
+        Map<String, String> serverExtras = new HashMap<>();
+        serverExtras.put("k3", "v3");
+
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .setServerExtras(serverExtras)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        Map<String, ?> networkInitSettings = mTestCustomEventSharedPrefs.getAll();
+        String testCustomEventClassName = TestCustomEvent.class.getName();
+
+        // Verify that TestCustomEvent has new init params saved in SharedPrefs.
+        assertThat(networkInitSettings.size()).isEqualTo(1);
+        assertThat(networkInitSettings.containsKey(testCustomEventClassName)).isTrue();
+        assertThat(networkInitSettings.get(testCustomEventClassName)).isEqualTo("{\"k3\":\"v3\"}");
+    }
+
+    @Test
+    public void onAdSuccess_witNonCustomEventRewardedVideo_shouldNotSaveAnythingInSharedPrefs() {
+        Map<String, String> serverExtras = new HashMap<>();
+        serverExtras.put("k1", "v1");
+        serverExtras.put("k2", "v2");
+
+        // MoPubRewardedVideo does not extend from CustomEventRewardedVideo
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideo")
+                .setAdType(AdType.CUSTOM)
+                .setServerExtras(serverExtras)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        // Verify that nothing got saved in SharedPrefs.
+        assertThat(mTestCustomEventSharedPrefs.getAll().size()).isEqualTo(0);
     }
 
     @Test
@@ -306,7 +738,7 @@ public void onAdSuccess_shouldHaveUniqueBroadcastIdsSetForEachCustomEvent() thro
 
         // Get the first custom event's broadcast id
         TestCustomEvent testCustomEvent1 = (TestCustomEvent)
-                MoPubRewardedVideoManager.getRewardedVideoData().getCustomEvent("testAdUnit1");
+                MoPubRewardedVideoManager.getRewardedAdData().getCustomEvent("testAdUnit1");
         Long broadcastId1 = (Long) testCustomEvent1.getLocalExtras().get(
                 DataKeys.BROADCAST_IDENTIFIER_KEY);
         assertThat(broadcastId1).isNotNull();
@@ -321,7 +753,7 @@ public void onAdSuccess_shouldHaveUniqueBroadcastIdsSetForEachCustomEvent() thro
 
         // Get the second custom event's broadcast id
         TestCustomEvent testCustomEvent2 = (TestCustomEvent)
-                MoPubRewardedVideoManager.getRewardedVideoData().getCustomEvent("testAdUnit2");
+                MoPubRewardedVideoManager.getRewardedAdData().getCustomEvent("testAdUnit2");
         Long broadcastId2 = (Long) testCustomEvent2.getLocalExtras().get(
                 DataKeys.BROADCAST_IDENTIFIER_KEY);
         assertThat(broadcastId2).isNotNull();
@@ -350,13 +782,13 @@ public void onAdSuccess_shouldUpdateAdUnitRewardMapping() throws Exception {
         ShadowLooper.unPauseMainLooper();
 
         MoPubReward moPubReward =
-                MoPubRewardedVideoManager.getRewardedVideoData().getMoPubReward("testAdUnit");
+                MoPubRewardedVideoManager.getRewardedAdData().getMoPubReward("testAdUnit");
         assertThat(moPubReward.getAmount()).isEqualTo(123);
         assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
     }
-
+    
     @Test
-    public void playVideo_shouldSetHasVideoFalse() {
+    public void showVideo_shouldSetHasVideoFalse() {
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
                 .setAdType(AdType.CUSTOM)
@@ -379,7 +811,7 @@ public void playVideo_shouldSetHasVideoFalse() {
     }
     
     @Test
-    public void playVideo_whenNotHasVideo_shouldFail() {
+    public void showVideo_whenNotHasVideo_shouldFail() {
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$NoVideoCustomEvent")
                 .setAdType(AdType.CUSTOM)
@@ -402,7 +834,170 @@ public void playVideo_whenNotHasVideo_shouldFail() {
     }
 
     @Test
-    public void playVideo_shouldUpdateLastShownCustomEventRewardMapping() throws Exception {
+    public void showVideo_withMultiRewardedCurrenciesJsonHeader_whenRewardNotSelected_shouldFail() {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .setRewardedCurrencies(MULTI_REWARDED_CURRENCIES_JSON)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        // Multiple rewards are available, but a reward is not selected before showing video
+        MoPubRewardedVideoManager.showVideo("testAdUnit");
+        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"), eq(MoPubErrorCode.REWARD_NOT_SELECTED));
+    }
+
+    @Test
+    public void showVideo_withMultiRewardedCurrenciesJsonHeader_whenValidRewardIsSelected_shouldUpdateRewardMappings() {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .setRewardedCurrencies(MULTI_REWARDED_CURRENCIES_JSON)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        Set<MoPubReward> availableRewards = MoPubRewardedVideoManager.getAvailableRewards("testAdUnit");
+        assertThat(availableRewards.size()).isEqualTo(4);
+
+        // Select the 10 Diamonds reward
+        for (MoPubReward reward : availableRewards) {
+            if (reward.getLabel().equals("Diamonds") && reward.getAmount() == 10) {
+                MoPubRewardedVideoManager.selectReward("testAdUnit", reward);
+                break;
+            }
+        }
+
+        // AdUnit to MoPubReward mapping
+        RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
+        MoPubReward moPubReward = rewardedVideoData.getMoPubReward("testAdUnit");
+        assertThat(moPubReward.getLabel()).isEqualTo("Diamonds");
+        assertThat(moPubReward.getAmount()).isEqualTo(10);
+
+        ShadowLooper.unPauseMainLooper();
+
+        MoPubRewardedVideoManager.showVideo("testAdUnit");
+
+        // CustomEventRewardedAd class to MoPubReward mapping
+        moPubReward = rewardedVideoData.getLastShownMoPubReward(TestCustomEvent.class);
+        assertThat(moPubReward.getLabel()).isEqualTo("Diamonds");
+        assertThat(moPubReward.getAmount()).isEqualTo(10);
+    }
+
+    @Test
+    public void showVideo_withMultiRewardedCurrenciesJsonHeader_whenSelectRewardWithWrongAdUnit_shouldFail() {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .setRewardedCurrencies(MULTI_REWARDED_CURRENCIES_JSON)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        Set<MoPubReward> availableRewards = MoPubRewardedVideoManager.getAvailableRewards("testAdUnit");
+        assertThat(availableRewards.size()).isEqualTo(4);
+
+        // Select the 10 Diamonds reward, but to a wrong AdUnit
+        for (MoPubReward reward : availableRewards) {
+            if (reward.getLabel().equals("Diamonds") && reward.getAmount() == 10) {
+                MoPubRewardedVideoManager.selectReward("wrongAdUnit", reward);
+                break;
+            }
+        }
+
+        // No selected reward is mapped to AdUnit
+        assertThat(MoPubRewardedVideoManager.getRewardedAdData().getMoPubReward("testAdUnit")).isNull();
+
+        ShadowLooper.unPauseMainLooper();
+
+        MoPubRewardedVideoManager.showVideo("testAdUnit");
+        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"), eq(MoPubErrorCode.REWARD_NOT_SELECTED));
+    }
+
+    @Test
+    public void showVideo_withMultiRewardedCurrenciesJsonHeader_whenSelectedRewardIsNotAvailable_shouldFail() {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .setRewardedCurrencies(MULTI_REWARDED_CURRENCIES_JSON)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        Set<MoPubReward> availableRewards = MoPubRewardedVideoManager.getAvailableRewards("testAdUnit");
+        assertThat(availableRewards.size()).isEqualTo(4);
+
+        // Select a reward that's not in the returned set of available rewards
+        MoPubRewardedVideoManager.selectReward("testAdUnit", MoPubReward.success("fake reward", 99));
+
+        // No selected reward is mapped to AdUnit
+        assertThat(MoPubRewardedVideoManager.getRewardedAdData().getMoPubReward("testAdUnit")).isNull();
+
+        ShadowLooper.unPauseMainLooper();
+
+        MoPubRewardedVideoManager.showVideo("testAdUnit");
+        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"), eq(MoPubErrorCode.REWARD_NOT_SELECTED));
+    }
+
+    @Test
+    public void showVideo_withSingleRewardedCurrencyJsonHeader_whenRewardNotSelected_shouldSelectOnlyRewardAutomatically() {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .setRewardedCurrencies(SINGLE_REWARDED_CURRENCY_JSON)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        // There's only one reward in the set of available rewards for this AdUnit
+        assertThat(MoPubRewardedVideoManager.getAvailableRewards("testAdUnit").size()).isEqualTo(1);
+
+        // The only reward is automatically mapped to this AdUnit
+        RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
+        MoPubReward moPubReward = rewardedVideoData.getMoPubReward("testAdUnit");
+        assertThat(moPubReward.getLabel()).isEqualTo("Coins");
+        assertThat(moPubReward.getAmount()).isEqualTo(25);
+
+        ShadowLooper.unPauseMainLooper();
+
+        MoPubRewardedVideoManager.showVideo("testAdUnit");
+
+        // CustomEventRewardedAd class to MoPubReward mapping
+        moPubReward = rewardedVideoData.getLastShownMoPubReward(TestCustomEvent.class);
+        assertThat(moPubReward.getLabel()).isEqualTo("Coins");
+        assertThat(moPubReward.getAmount()).isEqualTo(25);
+    }
+
+    @Test
+    public void showVideo_withLegacyRewardedCurrencyHeaders_shouldUpdateLastShownCustomEventRewardMapping() throws Exception {
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName(
                         "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
@@ -423,11 +1018,66 @@ public void playVideo_shouldUpdateLastShownCustomEventRewardMapping() throws Exc
         MoPubRewardedVideoManager.showVideo("testAdUnit");
 
         MoPubReward moPubReward =
-                MoPubRewardedVideoManager.getRewardedVideoData().getLastShownMoPubReward(TestCustomEvent.class);
+                MoPubRewardedVideoManager.getRewardedAdData().getLastShownMoPubReward(TestCustomEvent.class);
         assertThat(moPubReward.getAmount()).isEqualTo(123);
         assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
     }
 
+    @Test
+    public void showVideo_withCustomDataShorterThanLengthMaximum_shouldNotLogWarning() {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        MoPubRewardedVideoManager.showVideo("testAdUnit",
+                createStringWithLength(MoPubRewardedVideoManager.CUSTOM_DATA_MAX_LENGTH_BYTES - 1));
+
+        for (final ShadowLog.LogItem logItem : ShadowLog.getLogs()) {
+            if (logItem.msg.toLowerCase().contains(CUSTOM_DATA_MAX_LENGTH_EXCEEDED_MESSAGE)) {
+                fail(String.format(Locale.US, "Log item '%s' not expected, found.", CUSTOM_DATA_MAX_LENGTH_EXCEEDED_MESSAGE));
+            }
+        }
+    }
+
+    @Test
+    public void showVideo_withCustomDataGreaterThanLengthMaximum_shouldLogWarning() {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        MoPubRewardedVideoManager.showVideo("testAdUnit",
+                createStringWithLength(MoPubRewardedVideoManager.CUSTOM_DATA_MAX_LENGTH_BYTES  + 1));
+
+        for (final ShadowLog.LogItem logItem : ShadowLog.getLogs()) {
+            if (logItem.msg.toLowerCase().contains(CUSTOM_DATA_MAX_LENGTH_EXCEEDED_MESSAGE)) {
+                // Test passes the first time we see the warning log message
+                return;
+            }
+        }
+        fail(String.format(Locale.US, "Expected log item '%s' not found.",
+                CUSTOM_DATA_MAX_LENGTH_EXCEEDED_MESSAGE));
+    }
+
     @Test
     public void onAdFailure_shouldCallFailCallback() {
         VolleyError e = new VolleyError("testError!");
@@ -463,11 +1113,11 @@ public void chooseReward_withNetworkRewardNotSuccessful_shouldReturnNetworkRewar
     @Test
     public void onRewardedVideoCompleted_withEmptyServerCompletionUrl_withCurrentlyShowingAdUnitId_shouldNotifyRewardedVideoCompletedForOneAdUnitId() {
         MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
-        RewardedVideoData rewardedVideoData = MoPubRewardedVideoManager.getRewardedVideoData();
+        RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
         rewardedVideoData.setCurrentlyShowingAdUnitId("testAdUnit1");
-        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit1", new TestCustomEvent(), null,
+        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit1", new TestCustomEvent(),
                 TestCustomEvent.AD_NETWORK_ID);
-        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit2", new TestCustomEvent(), null,
+        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit2", new TestCustomEvent(),
                 TestCustomEvent.AD_NETWORK_ID);
         // Server completion url empty and custom event has no server reward set
 
@@ -487,13 +1137,13 @@ public void onRewardedVideoCompleted_withEmptyServerCompletionUrl_withCurrentlyS
     @Test
     public void onRewardedVideoCompleted_withEmptyServerCompletionUrl_withNoCurrentlyShowingAdUnitId_shouldNotifyRewardedVideoCompletedForAllAdUnitIds() {
         MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
-        RewardedVideoData rewardedVideoData = MoPubRewardedVideoManager.getRewardedVideoData();
+        RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
         rewardedVideoData.setCurrentlyShowingAdUnitId(null);
-        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit1", new TestCustomEvent(), null,
+        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit1", new TestCustomEvent(),
                 TestCustomEvent.AD_NETWORK_ID);
-        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit2", new TestCustomEvent(), null,
+        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit2", new TestCustomEvent(),
                 TestCustomEvent.AD_NETWORK_ID);
-        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit3", new TestCustomEvent(), null,
+        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit3", new TestCustomEvent(),
                 TestCustomEvent.AD_NETWORK_ID);
         // Server completion url empty and custom event has no server reward set
 
@@ -511,18 +1161,156 @@ public void onRewardedVideoCompleted_withEmptyServerCompletionUrl_withNoCurrentl
                 "testAdUnit3");
     }
 
+    @Test
+    public void onRewardedVideoCompleted_withServerCompletionUrl_shouldMakeRewardedVideoCompletionRequest_shouldNotifyRewardedVideoCompleted() {
+        MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
+        RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
+        rewardedVideoData.setCurrentlyShowingAdUnitId("testAdUnit1");
+
+        // Set server-side reward, different from moPubReward, and corresponding server completion URL
+        rewardedVideoData.updateAdUnitRewardMapping("testAdUnit1", "server-side currency", "777");
+        rewardedVideoData.updateAdUnitToServerCompletionUrlMapping("testAdUnit1", "testUrl");
+
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.onRewardedVideoCompleted(TestCustomEvent.class, TestCustomEvent.AD_NETWORK_ID,
+                moPubReward);
+
+        ShadowLooper.unPauseMainLooper();
+
+        verify(mockRequestQueue).add(any(RewardedVideoCompletionRequest.class));
+        assertThat(rewardedVideoCompletionRequest.getUrl()).contains("testUrl");
+        assertThat(rewardedVideoCompletionRequest.getUrl()).contains("&rcn=server-side%20currency");
+        assertThat(rewardedVideoCompletionRequest.getUrl()).contains("&rca=777");
+        ArgumentCaptor<Set<String>> rewardedIdsCaptor = ArgumentCaptor.forClass((Class) Set.class);
+        verify(mockVideoListener).onRewardedVideoCompleted(rewardedIdsCaptor.capture(),
+                eq(moPubReward));
+        assertThat(rewardedIdsCaptor.getValue()).containsOnly("testAdUnit1");
+    }
+
+    @Test
+    public void onRewardedVideoCompleted_shouldMakeRewardedVideoCompletionRequestIncludingClassName() {
+        MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
+        RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
+        rewardedVideoData.setCurrentlyShowingAdUnitId("testAdUnit1");
+
+        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit1", new TestCustomEvent(),
+                TestCustomEvent.AD_NETWORK_ID);
+        rewardedVideoData.updateAdUnitToServerCompletionUrlMapping("testAdUnit1", "testUrl");
+
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.onRewardedVideoCompleted(TestCustomEvent.class,
+                TestCustomEvent.AD_NETWORK_ID, moPubReward);
+
+        ShadowLooper.unPauseMainLooper();
+
+        verify(mockRequestQueue).add(any(RewardedVideoCompletionRequest.class));
+        assertThat(rewardedVideoCompletionRequest.getUrl()).contains(
+                "cec=com.mopub.mobileads.MoPubRewardedVideoManagerTest%24TestCustomEvent");
+    }
+
+    @Test
+    public void onRewardedVideoCompleted_withCustomData_shouldMakeRewardedVideoCompletionRequestIncludingCustomData() {
+        MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
+        RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
+        rewardedVideoData.setCurrentlyShowingAdUnitId("testAdUnit1");
+
+        rewardedVideoData.updateAdUnitToServerCompletionUrlMapping("testAdUnit1", "testUrl");
+        rewardedVideoData.updateAdUnitToCustomDataMapping("testAdUnit1", "very%=custom@[data]");
+
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.onRewardedVideoCompleted(TestCustomEvent.class,
+                TestCustomEvent.AD_NETWORK_ID, moPubReward);
+
+        ShadowLooper.unPauseMainLooper();
+
+        verify(mockRequestQueue).add(any(RewardedVideoCompletionRequest.class));
+        assertThat(rewardedVideoCompletionRequest.getUrl()).contains(
+                "&rcd=very%25%3Dcustom%40%5Bdata%5D");
+    }
+
+    @Test
+    public void onRewardedVideoCompleted_withNullCustomData_shouldMakeRewardedVideoCompletionRequestWithoutCustomData() {
+        MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
+        RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
+        rewardedVideoData.setCurrentlyShowingAdUnitId("testAdUnit1");
+
+        rewardedVideoData.updateAdUnitToServerCompletionUrlMapping("testAdUnit1", "testUrl");
+        rewardedVideoData.updateAdUnitToCustomDataMapping("testAdUnit1", null);
+
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.onRewardedVideoCompleted(TestCustomEvent.class,
+                TestCustomEvent.AD_NETWORK_ID, moPubReward);
+
+        ShadowLooper.unPauseMainLooper();
+
+        verify(mockRequestQueue).add(any(RewardedVideoCompletionRequest.class));
+        assertThat(rewardedVideoCompletionRequest.getUrl()).doesNotContain("&rcd=");
+    }
+
+    @Test
+    public void onRewardedVideoCompleted_withServerCompletionUrl_withNullRewardForCurrentlyShowingAdUnitId_shouldMakeRewardedVideoCompletionRequestWithDefaultRewardValues() {
+        MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
+        RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
+        rewardedVideoData.setCurrentlyShowingAdUnitId("testAdUnit1");
+
+        // Set reward fields to nulls
+        rewardedVideoData.updateAdUnitRewardMapping("testAdUnit1", null, null);
+        rewardedVideoData.updateAdUnitToServerCompletionUrlMapping("testAdUnit1", "testUrl");
+
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.onRewardedVideoCompleted(TestCustomEvent.class, TestCustomEvent.AD_NETWORK_ID,
+                moPubReward);
+
+        ShadowLooper.unPauseMainLooper();
+
+        verify(mockRequestQueue).add(any(RewardedVideoCompletionRequest.class));
+        assertThat(rewardedVideoCompletionRequest.getUrl()).contains("testUrl");
+        // Default reward values
+        assertThat(rewardedVideoCompletionRequest.getUrl()).contains("&rcn=&rca=0");
+    }
+
+    @Test
+    public void onRewardedVideoLoadFailure_withExpirationErrorCode_shouldCallFailCallback_shouldNotLoadFailUrl() {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setAdType(AdType.CUSTOM)
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setFailoverUrl("fail.url")
+                .build();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.onRewardedVideoLoadFailure(TestCustomEvent.class,
+                TestCustomEvent.AD_NETWORK_ID, MoPubErrorCode.EXPIRED);
+
+        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"),
+                eq(MoPubErrorCode.EXPIRED));
+        verifyNoMoreInteractions(mockVideoListener);
+        verify(mockRequestQueue).add(any(AdRequest.class));
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+    private String createStringWithLength(int length) {
+        if (length < 1) {
+            return "";
+        }
+
+        char[] chars = new char[length];
+        Arrays.fill(chars, '*');
+        return new String(chars);
+    }
+
     public static class TestCustomEvent extends CustomEventRewardedVideo {
         public static final String AD_NETWORK_ID = "id!";
 
         boolean mPlayable = false;
         private Map<String, Object> mLocalExtras;
 
-        @Nullable
-        @Override
-        protected CustomEventRewardedVideoListener getVideoListenerForSdk() {
-            return null;
-        }
-
         @Nullable
         @Override
         protected LifecycleListener getLifecycleListener() {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
index 5d64984d..bfeb5d34 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
@@ -1,6 +1,7 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
+import android.os.Handler;
 
 import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
@@ -14,8 +15,9 @@
 
 import java.util.HashMap;
 import java.util.Map;
-import java.util.TreeMap;
 
+import static com.mopub.common.Constants.FOUR_HOURS_MILLIS;
+import static com.mopub.mobileads.MoPubErrorCode.EXPIRED;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
@@ -29,8 +31,10 @@
 
     private Activity activity;
     private MoPubRewardedVideo subject;
+    private MoPubRewardedAd.MoPubRewardedAdListener listener;
 
     @Mock private RewardedVastVideoInterstitial mockRewardedVastVideoInterstitial;
+    @Mock private Handler mockHandler;
 
     @Before
     public void setup() {
@@ -52,6 +56,8 @@ public void onInvalidate_withVastVideoInterstitial_shouldInvalidateVastVideoInte
 
     @Test
     public void onInvalidate_withNullVastVideoInterstitial_shouldNotInvalidateVastVideoInterstitial() {
+        subject.setRewardedVastVideoInterstitial(null);
+
         subject.onInvalidate();
 
         verifyZeroInteractions(mockRewardedVastVideoInterstitial);
@@ -60,24 +66,24 @@ public void onInvalidate_withNullVastVideoInterstitial_shouldNotInvalidateVastVi
     @Test
     public void loadWithSdkInitialized_withLocalExtrasIncomplete_shouldLoadVastVideoInterstitial() throws Exception {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        subject.loadWithSdkInitialized(activity, new TreeMap<String, Object>(),
+        subject.loadWithSdkInitialized(activity, new HashMap<String, Object>(),
                 new HashMap<String, String>());
 
         verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity), any(
                         CustomEventInterstitial.CustomEventInterstitialListener.class),
-                eq(new TreeMap<String, Object>()),
+                eq(new HashMap<String, Object>()),
                 eq(new HashMap<String, String>()));
         verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
-        assertThat(subject.getRewardedVideoCurrencyName()).isEqualTo("");
-        assertThat(subject.getRewardedVideoCurrencyAmount()).isEqualTo(0);
+        assertThat(subject.getRewardedAdCurrencyName()).isEqualTo("");
+        assertThat(subject.getRewardedAdCurrencyAmount()).isEqualTo(0);
     }
 
     @Test
     public void loadWithSdkInitialized_withRewardedVideoCurrencyNameIncorrectType_shouldLoadVastVideoInterstitial_shouldSetCurrencyNameToEmptyString() throws Exception {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
-        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY, new Object());
-        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY, "10");
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
+        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, new Object());
+        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, "10");
 
         subject.loadWithSdkInitialized(activity, localExtras, new HashMap<String, String>());
 
@@ -86,16 +92,16 @@ public void loadWithSdkInitialized_withRewardedVideoCurrencyNameIncorrectType_sh
                 eq(localExtras),
                 eq(new HashMap<String, String>()));
         verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
-        assertThat(subject.getRewardedVideoCurrencyName()).isEqualTo("");
-        assertThat(subject.getRewardedVideoCurrencyAmount()).isEqualTo(10);
+        assertThat(subject.getRewardedAdCurrencyName()).isEqualTo("");
+        assertThat(subject.getRewardedAdCurrencyAmount()).isEqualTo(10);
     }
 
     @Test
     public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountIncorrectType_shouldLoadVastVideoInterstitial_shouldSetCurrencyAmountToZero() throws Exception {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
-        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY, "currencyName");
-        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY, new Object());
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
+        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, "currencyName");
+        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, new Object());
 
         subject.loadWithSdkInitialized(activity, localExtras, new HashMap<String, String>());
 
@@ -104,16 +110,16 @@ public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountIncorrectType_
                 eq(localExtras),
                 eq(new HashMap<String, String>()));
         verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
-        assertThat(subject.getRewardedVideoCurrencyName()).isEqualTo("currencyName");
-        assertThat(subject.getRewardedVideoCurrencyAmount()).isEqualTo(0);
+        assertThat(subject.getRewardedAdCurrencyName()).isEqualTo("currencyName");
+        assertThat(subject.getRewardedAdCurrencyAmount()).isEqualTo(0);
     }
 
     @Test
     public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountNotInteger_shouldLoadVastVideoInterstitial_shouldSetCurrencyAmountToZero() throws Exception {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
-        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY, "currencyName");
-        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY, "foo");
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
+        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, "currencyName");
+        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, "foo");
 
         subject.loadWithSdkInitialized(activity, localExtras, new HashMap<String, String>());
 
@@ -122,16 +128,16 @@ public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountNotInteger_sho
                 eq(localExtras),
                 eq(new HashMap<String, String>()));
         verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
-        assertThat(subject.getRewardedVideoCurrencyName()).isEqualTo("currencyName");
-        assertThat(subject.getRewardedVideoCurrencyAmount()).isEqualTo(0);
+        assertThat(subject.getRewardedAdCurrencyName()).isEqualTo("currencyName");
+        assertThat(subject.getRewardedAdCurrencyAmount()).isEqualTo(0);
     }
 
     @Test
     public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountNegative_shouldLoadVastVideoInterstitial_shouldSetCurrencyAmountToZero() throws Exception {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
-        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY, "currencyName");
-        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY, "-42");
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
+        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, "currencyName");
+        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, "-42");
 
         subject.loadWithSdkInitialized(activity, localExtras, new HashMap<String, String>());
 
@@ -140,17 +146,17 @@ public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountNegative_shoul
                 eq(localExtras),
                 eq(new HashMap<String, String>()));
         verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
-        assertThat(subject.getRewardedVideoCurrencyName()).isEqualTo("currencyName");
-        assertThat(subject.getRewardedVideoCurrencyAmount()).isEqualTo(0);
+        assertThat(subject.getRewardedAdCurrencyName()).isEqualTo("currencyName");
+        assertThat(subject.getRewardedAdCurrencyAmount()).isEqualTo(0);
     }
 
     @Test
     public void loadWithSdkInitialized_withCorrectLocalExtras_shouldLoadVastVideoInterstitial() throws Exception {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
         final Map<String, String> serverExtras = new HashMap<String, String>();
-        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY, "currencyName");
-        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY, "10");
+        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, "currencyName");
+        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, "10");
 
         subject.loadWithSdkInitialized(activity, localExtras, serverExtras);
 
@@ -158,8 +164,8 @@ public void loadWithSdkInitialized_withCorrectLocalExtras_shouldLoadVastVideoInt
                 any(CustomEventInterstitial.CustomEventInterstitialListener.class), eq(localExtras),
                 eq(serverExtras));
         verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
-        assertThat(subject.getRewardedVideoCurrencyName()).isEqualTo("currencyName");
-        assertThat(subject.getRewardedVideoCurrencyAmount()).isEqualTo(10);
+        assertThat(subject.getRewardedAdCurrencyName()).isEqualTo("currencyName");
+        assertThat(subject.getRewardedAdCurrencyAmount()).isEqualTo(10);
     }
 
     @Test
@@ -167,10 +173,10 @@ public void loadWithSdkInitialized_withEmptyCurrencyName_withNegativeCurrencyAmo
         // We pass whatever was sent to this custom event to the app as long as it exists, but
         // if the currency value is negative, set it to 0
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
         final Map<String, String> serverExtras = new HashMap<String, String>();
-        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY, "");
-        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY, "-10");
+        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, "");
+        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, "-10");
 
         subject.loadWithSdkInitialized(activity, localExtras, serverExtras);
 
@@ -178,28 +184,109 @@ public void loadWithSdkInitialized_withEmptyCurrencyName_withNegativeCurrencyAmo
                 any(CustomEventInterstitial.CustomEventInterstitialListener.class), eq(localExtras),
                 eq(serverExtras));
         verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
-        assertThat(subject.getRewardedVideoCurrencyName()).isEqualTo("");
-        assertThat(subject.getRewardedVideoCurrencyAmount()).isEqualTo(0);
+        assertThat(subject.getRewardedAdCurrencyName()).isEqualTo("");
+        assertThat(subject.getRewardedAdCurrencyAmount()).isEqualTo(0);
+    }
+
+    @Test
+    public void loadWithSdkInitialized_withAdUnitId_shouldSetAdNetworkId() throws Exception {
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
+        localExtras.put(DataKeys.AD_UNIT_ID_KEY, "adUnit");
+
+        subject.loadWithSdkInitialized(activity, localExtras, new HashMap<String, String>());
+
+        assertThat(subject.getAdNetworkId()).isEqualTo("adUnit");
+    }
+
+    @Test
+    public void loadWithSdkInitialized_withNoAdUnitId_shouldUseDefaultAdNetworkId() throws Exception {
+        subject.loadWithSdkInitialized(activity, new HashMap<String, Object>(),
+                new HashMap<String, String>());
+
+        assertThat(subject.getAdNetworkId()).isEqualTo(MoPubRewardedVideo.MOPUB_REWARDED_VIDEO_ID);
     }
 
     @Test
-    public void showVideo_withVideoLoaded_shouldShowVastVideoInterstitial() {
+    public void show_withVideoLoaded_shouldShowVastVideoInterstitial() {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
         subject.setIsLoaded(true);
 
-        subject.showVideo();
+        subject.show();
 
         verify(mockRewardedVastVideoInterstitial).showInterstitial();
         verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
     }
 
     @Test
-    public void showVideo_withVideoNotLoaded_shouldDoNothing() {
+    public void show_withVideoNotLoaded_shouldDoNothing() {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
         subject.setIsLoaded(false);
 
-        subject.showVideo();
+        subject.show();
 
         verifyZeroInteractions(mockRewardedVastVideoInterstitial);
     }
+
+    @Test
+    public void show_whenInvalidated_shouldDoNothing() {
+        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
+        subject.setIsLoaded(true);
+        subject.onInvalidate();
+
+        subject.show();
+
+        verify(mockRewardedVastVideoInterstitial).onInvalidate();
+        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
+        assertThat(subject.getRewardedVastVideoInterstitial()).isNull();
+    }
+
+    @Test
+    public void moPubRewardedAdListener_onInterstitialLoaded_withMoPubRewardedVideo_shouldPostExpirationRunnable() {
+        listener = subject.createListener(MoPubRewardedVideo.class);
+        listener.setHandler(mockHandler);
+
+        listener.onInterstitialLoaded();
+
+        verify(mockHandler).postDelayed(any(Runnable.class), eq((long) FOUR_HOURS_MILLIS));
+    }
+
+    @Test
+    public void moPubRewardedAdListener_onInterstitialLoaded_withMoPubRewardedPlayable_shouldPostExpirationRunnable() {
+        listener = subject.createListener(MoPubRewardedPlayable.class);
+        listener.setHandler(mockHandler);
+
+        listener.onInterstitialLoaded();
+
+        verify(mockHandler).postDelayed(any(Runnable.class), eq((long) FOUR_HOURS_MILLIS));
+    }
+
+    @Test
+    public void moPubRewardedAdListener_onInterstitialLoaded_withOtherCustomEvents_shouldNotPostExpirationRunnable() {
+        listener = subject.createListener(MoPubRewardedAd.class);
+        listener.setHandler(mockHandler);
+
+        listener.onInterstitialLoaded();
+
+        verifyNoMoreInteractions(mockHandler);
+    }
+
+    @Test
+    public void moPubRewardedAdListener_onInterstitialFailed_shouldRemoveExpirationRunnable() {
+        listener = subject.createListener(MoPubRewardedVideo.class);
+        listener.setHandler(mockHandler);
+
+        listener.onInterstitialFailed(EXPIRED);
+
+        verify(mockHandler).removeCallbacks(any(Runnable.class));
+    }
+
+    @Test
+    public void moPubRewardedAdListener_onInterstitialShown_shouldRemoveExpirationRunnable() {
+        listener = subject.createListener(MoPubRewardedVideo.class);
+        listener.setHandler(mockHandler);
+
+        listener.onInterstitialShown();
+
+        verify(mockHandler).removeCallbacks(any(Runnable.class));
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
index 0b440d17..71e4b64f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
@@ -11,7 +11,6 @@
 import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
 import com.mopub.mobileads.test.support.TestCustomEventBannerAdapterFactory;
 
-import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -48,16 +47,11 @@ public void setup() {
         adViewController = TestAdViewControllerFactory.getSingletonMock();
     }
 
-    @After
-    public void tearDown() {
-        ShadowReflection.reset();
-    }
-
     @Test
     public void screenStateBroadcastReceiver_withActionUserPresent_shouldUnpauseRefresh() throws Exception {
         broadcastIntent(new Intent(Intent.ACTION_USER_PRESENT));
 
-        verify(adViewController).unpauseRefresh();
+        verify(adViewController).resumeRefresh();
     }
 
     @Test
@@ -72,7 +66,7 @@ public void screenStateBroadcastReceiver_withNullIntent_shouldDoNothing() throws
         broadcastIntent(null);
 
         verify(adViewController, never()).pauseRefresh();
-        verify(adViewController, never()).unpauseRefresh();
+        verify(adViewController, never()).resumeRefresh();
     }
 
     @Test
@@ -80,7 +74,7 @@ public void screenStateBroadcastReceiver_withRandomIntent_shouldDoNothing() thro
         broadcastIntent(new Intent(Intent.ACTION_BATTERY_LOW));
 
         verify(adViewController, never()).pauseRefresh();
-        verify(adViewController, never()).unpauseRefresh();
+        verify(adViewController, never()).resumeRefresh();
     }
 
     @Test
@@ -89,7 +83,7 @@ public void screenStateBroadcastReceiver_whenAdInBackground_shouldDoNothing() th
         reset(adViewController);
 
         broadcastIntent(new Intent(Intent.ACTION_USER_PRESENT));
-        verify(adViewController, never()).unpauseRefresh();
+        verify(adViewController, never()).resumeRefresh();
 
         broadcastIntent(new Intent(Intent.ACTION_SCREEN_OFF));
         verify(adViewController, never()).pauseRefresh();
@@ -100,7 +94,7 @@ public void screenStateBroadcastReceiver_afterOnDestroy_shouldDoNothing() throws
         subject.destroy();
 
         broadcastIntent(new Intent(Intent.ACTION_USER_PRESENT));
-        verify(adViewController, never()).unpauseRefresh();
+        verify(adViewController, never()).resumeRefresh();
 
         broadcastIntent(new Intent(Intent.ACTION_SCREEN_OFF));
         verify(adViewController, never()).pauseRefresh();
@@ -112,7 +106,7 @@ public void onWindowVisibilityChanged_fromVisibleToInvisible_shouldPauseRefresh(
         subject.onWindowVisibilityChanged(View.INVISIBLE);
 
         verify(adViewController).pauseRefresh();
-        verify(adViewController, never()).unpauseRefresh();
+        verify(adViewController, never()).resumeRefresh();
     }
 
 
@@ -124,7 +118,7 @@ public void onWindowVisibilityChanged_fromInvisibleToVisible_shouldUnpauseRefres
         subject.onWindowVisibilityChanged(View.VISIBLE);
 
         verify(adViewController, never()).pauseRefresh();
-        verify(adViewController).unpauseRefresh();
+        verify(adViewController).resumeRefresh();
     }
 
     @Test
@@ -133,7 +127,7 @@ public void onWindowVisibilityChanged_fromVisibleToVisible_shouldDoNothing() thr
         subject.onWindowVisibilityChanged(View.VISIBLE);
 
         verify(adViewController, never()).pauseRefresh();
-        verify(adViewController, never()).unpauseRefresh();
+        verify(adViewController, never()).resumeRefresh();
     }
 
     @Test
@@ -144,7 +138,7 @@ public void onWindowVisibilityChanged_fromInvisibleToGone_shouldDoNothing() thro
         subject.onWindowVisibilityChanged(View.GONE);
 
         verify(adViewController, never()).pauseRefresh();
-        verify(adViewController, never()).unpauseRefresh();
+        verify(adViewController, never()).resumeRefresh();
     }
 
     @Test
@@ -155,21 +149,21 @@ public void onWindowVisibilityChanged_fromGoneToInvisible_shouldDoNothing() thro
         subject.onWindowVisibilityChanged(View.INVISIBLE);
 
         verify(adViewController, never()).pauseRefresh();
-        verify(adViewController, never()).unpauseRefresh();
+        verify(adViewController, never()).resumeRefresh();
     }
 
     @Test
     public void setAutorefreshEnabled_withRefreshTrue_shouldForwardToAdViewController() throws Exception {
         subject.setAutorefreshEnabled(true);
 
-        verify(adViewController).forceSetAutorefreshEnabled(true);
+        verify(adViewController).setShouldAllowAutoRefresh(true);
     }
 
     @Test
     public void setAutorefreshEnabled_withRefreshFalse_shouldForwardToAdViewController() throws Exception {
         subject.setAutorefreshEnabled(false);
 
-        verify(adViewController).forceSetAutorefreshEnabled(false);
+        verify(adViewController).setShouldAllowAutoRefresh(false);
     }
     
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
index 189d3ad8..a12135a7 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
@@ -5,7 +5,6 @@
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
-import android.os.Build.VERSION_CODES;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.WindowManager;
@@ -43,6 +42,7 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 
 @RunWith(SdkTestRunner.class)
@@ -57,6 +57,7 @@
     @Mock CustomEventInterstitial.CustomEventInterstitialListener
             customEventInterstitialListener;
     @Mock BroadcastReceiver broadcastReceiver;
+    @Mock ResponseBodyInterstitial mraidInterstitial;
 
     Context context;
 
@@ -70,25 +71,29 @@
     @Before
     public void setUp() throws Exception {
         context = Robolectric.buildActivity(Activity.class).create().get();
+        when(mockMraidWebView.getContext()).thenReturn(context);
     }
 
     @Test
     public void preRenderHtml_shouldEnableJavascriptCachingForDummyWebView() {
-        MraidActivity.preRenderHtml(customEventInterstitialListener, HTML_DATA, mockMraidWebView);
+        MraidActivity.preRenderHtml(mraidInterstitial, customEventInterstitialListener, HTML_DATA,
+                mockMraidWebView, testBroadcastIdentifier);
 
         verify(mockMraidWebView).enableJavascriptCaching();
     }
 
     @Test
     public void preRenderHtml_shouldDisablePluginsForDummyWebView() {
-        MraidActivity.preRenderHtml(customEventInterstitialListener, HTML_DATA, mockMraidWebView);
+        MraidActivity.preRenderHtml(mraidInterstitial, customEventInterstitialListener, HTML_DATA,
+                mockMraidWebView, testBroadcastIdentifier);
 
         verify(mockMraidWebView).enablePlugins(false);
     }
 
     @Test
     public void preRenderHtml_shouldLoadHtml() {
-        MraidActivity.preRenderHtml(customEventInterstitialListener, HTML_DATA, mockMraidWebView);
+        MraidActivity.preRenderHtml(mraidInterstitial, customEventInterstitialListener, HTML_DATA,
+                mockMraidWebView, testBroadcastIdentifier);
 
         verify(mockMraidWebView).loadDataWithBaseURL(
                 "http://ads.mopub.com/",
@@ -102,7 +107,8 @@ public void preRenderHtml_shouldLoadHtml() {
     @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_shouldSetWebViewClient() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "3:27");
+        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener,
+                "3:27", testBroadcastIdentifier);
 
         verify(mockMraidWebView).enablePlugins(eq(false));
         verify(mraidController).setMraidListener(any(MraidListener.class));
@@ -113,7 +119,8 @@ public void preRenderHtml_shouldSetWebViewClient() throws Exception {
     @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_whenMraidListenerOnReady() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
+        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener, "",
+                testBroadcastIdentifier);
 
         ArgumentCaptor<MraidListener> mraidListenerArgumentCaptorr = ArgumentCaptor.forClass(MraidListener.class);
         verify(mraidController).setMraidListener(mraidListenerArgumentCaptorr.capture());
@@ -127,7 +134,8 @@ public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_
     @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialFailed_whenMraidListenerOnFailure() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
+        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener, "",
+                testBroadcastIdentifier);
 
         ArgumentCaptor<MraidListener> mraidListenerArgumentCaptorr = ArgumentCaptor.forClass(MraidListener.class);
         verify(mraidController).setMraidListener(mraidListenerArgumentCaptorr.capture());
@@ -141,13 +149,14 @@ public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialFailed_
     @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_whenWebViewClientShouldOverrideUrlLoading_shouldReturnTrue() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
+        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener, "",
+                testBroadcastIdentifier);
 
         ArgumentCaptor<WebViewClient> webViewClientArgumentCaptor = ArgumentCaptor.forClass(WebViewClient.class);
         verify(mockMraidWebView).setWebViewClient(webViewClientArgumentCaptor.capture());
         WebViewClient webViewClient = webViewClientArgumentCaptor.getValue();
 
-        boolean consumeUrlLoading = webViewClient.shouldOverrideUrlLoading(null, null);
+        boolean consumeUrlLoading = webViewClient.shouldOverrideUrlLoading(null, (String) null);
 
         assertThat(consumeUrlLoading).isTrue();
         verify(customEventInterstitialListener, never()).onInterstitialLoaded();
@@ -158,7 +167,8 @@ public void preRenderHtml_whenWebViewClientShouldOverrideUrlLoading_shouldReturn
     @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_whenWebViewClientOnPageFinished() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
+        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener, "",
+                testBroadcastIdentifier);
 
         ArgumentCaptor<WebViewClient> webViewClientArgumentCaptor = ArgumentCaptor.forClass(WebViewClient.class);
         verify(mockMraidWebView).setWebViewClient(webViewClientArgumentCaptor.capture());
@@ -202,26 +212,15 @@ public void onCreate_shouldSetLayoutOfMraidView() throws Exception {
         assertThat(actualLayoutParams.height).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT);
     }
 
-    @Config(sdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Ignore("Mraid 2.0")
     @Test
-    public void onCreate_atLeastIcs_shouldSetHardwareAcceleratedFlag() throws Exception {
+    public void onCreate_shouldSetHardwareAcceleratedFlag() throws Exception {
         subject.onCreate(null);
 
         boolean hardwareAccelerated = Shadows.shadowOf(subject.getWindow()).getFlag(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
         assertThat(hardwareAccelerated).isTrue();
     }
 
-    @Config(sdk = VERSION_CODES.HONEYCOMB_MR2)
-    @Ignore("Mraid 2.0")
-    @Test
-    public void onCreate_beforeIcs_shouldNotSetHardwareAcceleratedFlag() throws Exception {
-        subject.onCreate(null);
-
-        boolean hardwareAccelerated = Shadows.shadowOf(subject.getWindow()).getFlag(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
-        assertThat(hardwareAccelerated).isFalse();
-    }
-
     @Ignore("Mraid 2.0")
     @Test
     public void onDestroy_DestroyMraidView() throws Exception {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
index 8c120a01..49eea165 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
@@ -1,12 +1,10 @@
 package com.mopub.mobileads;
 
-import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.ActivityInfo;
 import android.graphics.Bitmap;
-import android.os.Build;
 import android.os.Bundle;
 import android.view.TextureView;
 import android.view.View;
@@ -218,7 +216,6 @@ private void initializeSubjectForVast() {
                 .get();
     }
 
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
     private void initializeSubjectForNative() {
         intent.putExtra(BaseVideoPlayerActivity.VIDEO_CLASS_EXTRAS_KEY, "native");
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdDataTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdDataTest.java
new file mode 100644
index 00000000..e7e5e862
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdDataTest.java
@@ -0,0 +1,225 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.MoPubReward;
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import java.util.Set;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class RewardedAdDataTest {
+
+    private RewardedAdData subject;
+
+    @Before
+    public void setup() {
+        subject = new RewardedAdData();
+    }
+
+    @Test
+    public void updateAdUnitRewardMapping_shouldMapAdUnitIdToReward() throws Exception {
+        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "123");
+        MoPubReward moPubReward = subject.getMoPubReward("mopub_id");
+        assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
+        assertThat(moPubReward.getAmount()).isEqualTo(123);
+    }
+
+    @Test
+    public void updateAdUnitRewardMapping_withNullCurrencyName_shouldRemoveExistingAdUnitMapping_shouldNotMapAdUnitIdToReward() throws Exception {
+        // Insert initial value to be removed with next call
+        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "123");
+        MoPubReward moPubReward = subject.getMoPubReward("mopub_id");
+        assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
+        assertThat(moPubReward.getAmount()).isEqualTo(123);
+
+        subject.updateAdUnitRewardMapping("mopub_id", null, "123");
+        assertThat(subject.getMoPubReward("mopub_id")).isNull();
+    }
+
+    @Test
+    public void updateAdUnitRewardMapping_withNullCurrencyName_shouldNotMapAdUnitIdToReward() throws Exception {
+        // Insert initial value to be removed with next call
+        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "123");
+        MoPubReward moPubReward = subject.getMoPubReward("mopub_id");
+        assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
+        assertThat(moPubReward.getAmount()).isEqualTo(123);
+
+        subject.updateAdUnitRewardMapping("mopub_id", null, "123");
+        assertThat(subject.getMoPubReward("mopub_id")).isNull();
+    }
+
+    @Test
+    public void updateAdUnitRewardMapping_withNullCurrencyAmount_shouldNotMapAdUnitIdToReward() throws Exception {
+        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", null);
+        assertThat(subject.getMoPubReward("mopub_id")).isNull();
+    }
+
+    @Test
+    public void updateAdUnitRewardMapping_withNonNumberCurrencyAmount_shouldNotMapAdUnitIdToReward() throws Exception {
+        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "abc");
+        assertThat(subject.getMoPubReward("mopub_id")).isNull();
+    }
+
+    @Test
+    public void updateAdUnitRewardMapping_withCurrencyAmountLessThanZero_shouldNotMapAdUnitIdToReward() throws Exception {
+        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "-1");
+        assertThat(subject.getMoPubReward("mopub_id")).isNull();
+    }
+
+    @Test
+    public void addAvailableReward_shouldAddRewardToSetOfAvailableRewards() throws Exception {
+        subject.addAvailableReward("mopub_id", "currency1", "123");
+        Set<MoPubReward> availableRewards = subject.getAvailableRewards("mopub_id");
+        assertThat(availableRewards.size()).isEqualTo(1);
+        assertThat(subject.existsInAvailableRewards("mopub_id", "currency1", 123)).isTrue();
+
+        // add another reward for the same adunit
+        subject.addAvailableReward("mopub_id", "currency2", "321");
+        assertThat(availableRewards.size()).isEqualTo(2);
+        assertThat(subject.existsInAvailableRewards("mopub_id", "currency1", 123)).isTrue();
+        assertThat(subject.existsInAvailableRewards("mopub_id", "currency2", 321)).isTrue();
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void addAvailableReward_withNullAdUnitId_shouldThrowNPE() throws Exception {
+        subject.addAvailableReward(null, "currency_name", "123");
+    }
+
+    @Test
+    public void addAvailableReward_withNullCurrencyName_shouldNotAddRewardToSetOfAvailableRewards() throws Exception {
+        subject.addAvailableReward("mopub_id", null, "123");
+        assertThat(subject.getAvailableRewards("mopub_id")).isEmpty();
+    }
+
+    @Test
+    public void addAvailableReward_withNullCurrencyAmount_shouldNotAddRewardToSetOfAvailableRewards() throws Exception {
+        subject.addAvailableReward("mopub_id", "currency_name", null);
+        assertThat(subject.getAvailableRewards("mopub_id")).isEmpty();
+    }
+
+    @Test
+    public void addAvailableReward_withNonNumberCurrencyAmount_shouldNotAddRewardToSetOfAvailableRewards() throws Exception {
+        subject.addAvailableReward("mopub_id", "currency_name", "abc");
+        assertThat(subject.getAvailableRewards("mopub_id")).isEmpty();
+    }
+
+    @Test
+    public void addAvailableReward_withCurrencyAmountLessThanZero_shouldNotAddRewardToSetOfAvailableRewards() throws Exception {
+        subject.addAvailableReward("mopub_id", "currency_name", "-1");
+        assertThat(subject.getAvailableRewards("mopub_id")).isEmpty();
+    }
+
+    @Test
+    public void getAvailableRewards_shouldReturnSetOfAvailableRewards() throws Exception {
+        subject.addAvailableReward("mopub_id_A", "currency1", "123");
+        subject.addAvailableReward("mopub_id_A", "currency2", "321");
+        subject.addAvailableReward("mopub_id_B", "currency3", "456");
+
+        assertThat(subject.getAvailableRewards("mopub_id_A").size()).isEqualTo(2);
+        assertThat(subject.getAvailableRewards("mopub_id_B").size()).isEqualTo(1);
+
+        assertThat(subject.existsInAvailableRewards("mopub_id_A", "currency1", 123)).isTrue();
+        assertThat(subject.existsInAvailableRewards("mopub_id_A", "currency1", 123)).isTrue();
+        assertThat(subject.existsInAvailableRewards("mopub_id_B", "currency3", 456)).isTrue();
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void getAvailableRewards_withNullAdUnitId_shouldThrowNPE() throws Exception {
+        subject.addAvailableReward("mopub_id", "currency_name", "123");
+        subject.getAvailableRewards(null);
+    }
+
+    @Test
+    public void getAvailableRewards_whenAdUnitDoesNotHaveAvailableRewards_shouldReturnEmptySet() throws Exception {
+        subject.addAvailableReward("mopub_id", "currency_name", "123");
+        assertThat(subject.getAvailableRewards("foo_id")).isEmpty();
+    }
+
+    @Test
+    public void selectReward_shouldMapAdUnitIdToReward() throws Exception {
+        subject.addAvailableReward("mopub_id", "currency1", "123");
+        subject.addAvailableReward("mopub_id", "currency2", "321");
+
+        // Select the currency2 reward
+        for (MoPubReward reward : subject.getAvailableRewards("mopub_id")) {
+            if (reward.getLabel().equals("currency2") && reward.getAmount() == 321) {
+                subject.selectReward("mopub_id", reward);
+                break;
+            }
+        }
+
+        MoPubReward selectedReward = subject.getMoPubReward("mopub_id");
+        assertThat(selectedReward.getLabel()).isEqualTo("currency2");
+        assertThat(selectedReward.getAmount()).isEqualTo(321);
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void selectReward_withNullAdUnitId_shouldThrowNPE() throws Exception {
+        subject.selectReward(null, MoPubReward.success("currency_name", 123));
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void selectReward_withNullSelectedReward_shouldThrowNPE() throws Exception {
+        subject.selectReward("mopub_id", null);
+    }
+
+    @Test
+    public void selectReward_whenAdUnitDoesNotHaveAvailableRewards_shouldNotSelectReward() throws Exception {
+        subject.addAvailableReward("mopub_id", "currency1", "123");
+        MoPubReward reward = subject.getAvailableRewards("mopub_id").toArray(new MoPubReward[1])[0];
+        subject.selectReward("foo_id", reward);
+
+        assertThat(subject.getMoPubReward("mopub_id")).isNull();
+        assertThat(subject.getMoPubReward("foo_id")).isNull();
+    }
+
+    @Test
+    public void selectReward_whenSelectedRewardNotAmongAvailableRewards_shouldNotSelectReward() throws Exception {
+        subject.addAvailableReward("mopub_id", "currency1", "123");
+        subject.selectReward("mopub_id", MoPubReward.success("currency2", 321));
+
+        assertThat(subject.getMoPubReward("mopub_id")).isNull();
+    }
+
+    @Test
+    public void resetAvailableRewards_shouldClearAvailableRewardsMap() {
+        subject.addAvailableReward("mopub_id", "currency1", "123");
+        subject.addAvailableReward("mopub_id", "currency2", "321");
+        assertThat(subject.getAvailableRewards("mopub_id").size()).isEqualTo(2);
+
+        subject.resetAvailableRewards("mopub_id");
+        assertThat(subject.getAvailableRewards("mopub_id")).isEmpty();
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void resetAvailableRewards_withNullAdUnitId_shouldThrowNPE() throws Exception {
+        subject.resetAvailableRewards(null);
+    }
+
+    @Test
+    public void resetSelectedReward_shouldClearRewardPreviouslySelectedForAdUnit() {
+        subject.addAvailableReward("mopub_id", "currency1", "123");
+        MoPubReward reward = subject.getAvailableRewards("mopub_id").toArray(new MoPubReward[1])[0];
+        subject.selectReward("mopub_id", reward);
+
+        MoPubReward selectedReward = subject.getMoPubReward("mopub_id");
+        assertThat(selectedReward.getLabel()).isEqualTo("currency1");
+        assertThat(selectedReward.getAmount()).isEqualTo(123);
+
+        // Reset reward previously selected for AdUnit "mopub_id"
+        subject.resetSelectedReward("mopub_id");
+        assertThat(subject.getMoPubReward("mopub_id")).isNull();
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void resetSelectedReward_withNullAdUnitId_shouldThrowNPE() throws Exception {
+        subject.resetSelectedReward(null);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidActivityTest.java
new file mode 100644
index 00000000..540e6e2b
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidActivityTest.java
@@ -0,0 +1,104 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.view.View;
+
+import com.mopub.common.AdReport;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mraid.RewardedMraidController;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import static com.mopub.mraid.RewardedMraidController.MILLIS_IN_SECOND;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class RewardedMraidActivityTest {
+    private long broadcastIdentifier;
+    private boolean shouldRewardOnClick;
+    private RewardedMraidActivity subject;
+
+    private static final String HTML_DATA = "TEST HTML DATA";
+    private static final int REWARDED_DURATION_IN_SECONDS = 25;
+
+    @Mock
+    AdReport mockAdReport;
+
+    @Mock
+    RewardedMraidController mockRewardedMraidController;
+
+    @Before
+    public void setup() {
+        broadcastIdentifier = 3333;
+        shouldRewardOnClick = false;
+
+        Context context = Robolectric.buildActivity(Activity.class).create().get();
+        Intent intent = RewardedMraidActivity.createIntent(context, mockAdReport, HTML_DATA,
+                broadcastIdentifier, REWARDED_DURATION_IN_SECONDS, shouldRewardOnClick);
+        subject = Robolectric.buildActivity(RewardedMraidActivity.class)
+                .withIntent(intent).create().get();
+    }
+
+    @Test
+    public void onCreate_shouldCreateView() throws Exception {
+        View adView = subject.getCloseableLayout().getChildAt(0);
+        assertThat(adView).isNotNull();
+    }
+
+    @Test
+    public void onCreate_shouldCallOnCreateForController() throws Exception {
+        // Close button should not be visible
+        assertThat(subject.getCloseableLayout().isCloseVisible()).isFalse();
+
+        RewardedMraidController controller = subject.getRewardedMraidController();
+        VastVideoRadialCountdownWidget countdownWidget = controller.getRadialCountdownWidget();
+
+        // Radial countdown widget should be calibrated
+        assertThat(countdownWidget).isNotNull();
+        assertThat(countdownWidget.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(countdownWidget.getImageViewDrawable().getInitialCountdownMilliseconds())
+                .isEqualTo(REWARDED_DURATION_IN_SECONDS * MILLIS_IN_SECOND);
+        assertThat(controller.isCalibrationDone()).isTrue();
+
+        // Countdown runnable should be created
+        assertThat(controller.getCountdownRunnable()).isNotNull();
+    }
+
+    @Test
+    public void onPause_shouldCallPauseOnController() {
+        subject.onResume();
+        subject.onPause();
+
+        // Countdown runnable should be stopped
+        assertThat(subject.getRewardedMraidController().getCountdownRunnable().isRunning())
+                .isFalse();
+    }
+
+    @Test
+    public void onResume_shouldCallResumeOnController() {
+        subject.onPause();
+        subject.onResume();
+
+        // Countdown runnable should be resumed
+        assertThat(subject.getRewardedMraidController().getCountdownRunnable().isRunning())
+                .isTrue();
+    }
+
+    @Test
+    public void onDestroy_shouldCallDestroyOnController() {
+        subject.onResume();
+        subject.onDestroy();
+
+        // Countdown runnable should be stopped
+        assertThat(subject.getRewardedMraidController().getCountdownRunnable().isRunning())
+                .isFalse();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidCountdownRunnableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidCountdownRunnableTest.java
new file mode 100644
index 00000000..4060bde7
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidCountdownRunnableTest.java
@@ -0,0 +1,54 @@
+package com.mopub.mobileads;
+
+import android.os.Handler;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mraid.RewardedMraidController;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.annotation.Config;
+
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class RewardedMraidCountdownRunnableTest {
+
+    @Mock
+    RewardedMraidController mockRewardedMraidController;
+    @Mock Handler mockHandler;
+
+    RewardedMraidCountdownRunnable subject;
+
+    @Before
+    public void setup() {
+        subject = new RewardedMraidCountdownRunnable(mockRewardedMraidController, mockHandler);
+    }
+
+    @Test
+    public void doWork_whenPlayableIsCloseable_shouldMakePlayableCloseable() {
+        when(mockRewardedMraidController.isPlayableCloseable()).thenReturn(true);
+
+        subject.doWork();
+
+        int currentElapsedTimeMillis = subject.getCurrentElapsedTimeMillis();
+        verify(mockRewardedMraidController).updateCountdown(currentElapsedTimeMillis);
+        verify(mockRewardedMraidController).showPlayableCloseButton();
+    }
+
+    @Test
+    public void doWork_whenPlayableIsNotCloseable_shouldNotMakePlayableCloseable() {
+        when(mockRewardedMraidController.isPlayableCloseable()).thenReturn(false);
+
+        subject.doWork();
+
+        int currentElapsedTimeMillis = subject.getCurrentElapsedTimeMillis();
+        verify(mockRewardedMraidController).updateCountdown(currentElapsedTimeMillis);
+        verify(mockRewardedMraidController, never()).showPlayableCloseButton();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVastVideoInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVastVideoInterstitialTest.java
index 9e840b27..cbc4cf92 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVastVideoInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVastVideoInterstitialTest.java
@@ -29,7 +29,7 @@
 public class RewardedVastVideoInterstitialTest {
 
     private Context context;
-    private RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener customEventRewardedVideoInterstitialListener;
+    private RewardedVastVideoInterstitial.RewardedVideoInterstitialListener mRewardedVideoInterstitialListener;
     private Map<String, Object> localExtras;
     private Map<String, String> serverExtras;
     private RewardedVastVideoInterstitial subject;
@@ -43,8 +43,8 @@ public void setUp() throws Exception {
         final String expectedResponse = "<VAST>hello</VAST>";
 
         context = Robolectric.buildActivity(Activity.class).create().get();
-        customEventRewardedVideoInterstitialListener = mock(
-                RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener.class);
+        mRewardedVideoInterstitialListener = mock(
+                RewardedVastVideoInterstitial.RewardedVideoInterstitialListener.class);
         localExtras = new HashMap<String, Object>();
         serverExtras = new HashMap<String, String>();
         serverExtras.put(DataKeys.HTML_RESPONSE_BODY_KEY, expectedResponse);
@@ -57,7 +57,7 @@ public void setUp() throws Exception {
 
     @Test
     public void loadInterstitial_withCustomEventRewardedVideoInterstitialListener_shouldRegisterRewardedVideoBroadcastReceiver() {
-        subject.loadInterstitial(context, customEventRewardedVideoInterstitialListener, localExtras,
+        subject.loadInterstitial(context, mRewardedVideoInterstitialListener, localExtras,
                 serverExtras);
 
         assertThat(subject.getRewardedVideoBroadcastReceiver()).isNotNull();
@@ -65,7 +65,7 @@ public void loadInterstitial_withCustomEventRewardedVideoInterstitialListener_sh
 
     @Test
     public void onVastVideoConfigurationPrepared_withProperVastConfig_shouldSetRewardedVideoFlag() {
-        subject.loadInterstitial(context, customEventRewardedVideoInterstitialListener, localExtras,
+        subject.loadInterstitial(context, mRewardedVideoInterstitialListener, localExtras,
                 serverExtras);
         final VastVideoConfig mockVastVideoConfig = mock(VastVideoConfig.class);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java
index 97a711ec..fdbec0c4 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java
@@ -24,17 +24,17 @@
 @Config(constants = BuildConfig.class)
 public class RewardedVideoBroadcastReceiverTest {
 
-    private RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener customEventRewardedVideoInterstitialListener;
+    private RewardedVastVideoInterstitial.RewardedVideoInterstitialListener mRewardedVideoInterstitialListener;
     private RewardedVideoBroadcastReceiver subject;
     private Activity context;
     private long broadcastIdentifier;
 
     @Before
     public void setUp() throws Exception {
-        customEventRewardedVideoInterstitialListener = mock(
-                RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener.class);
+        mRewardedVideoInterstitialListener = mock(
+                RewardedVastVideoInterstitial.RewardedVideoInterstitialListener.class);
         broadcastIdentifier = 123456L;
-        subject = new RewardedVideoBroadcastReceiver(customEventRewardedVideoInterstitialListener,
+        subject = new RewardedVideoBroadcastReceiver(mRewardedVideoInterstitialListener,
                 broadcastIdentifier);
         context = new Activity();
     }
@@ -63,6 +63,6 @@ public void onReceive_withActionRewardedVideoComplete_shouldNotifyListener() {
 
         subject.onReceive(context, rewardedVideoCompleteIntent);
 
-        verify(customEventRewardedVideoInterstitialListener).onVideoComplete();
+        verify(mRewardedVideoInterstitialListener).onVideoComplete();
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java
index d73f8bd8..43b3fadb 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java
@@ -35,23 +35,130 @@
     private MoPubRequestQueue mockRequestQueue;
     private Context context;
     private String url;
+    private String customerId;
+    private String rewardName;
+    private String rewardAmount;
+    private String className;
+    private String customData;
 
     @Before
     public void setup() {
         context = Robolectric.buildActivity(Activity.class).create().get();
         url = "testUrl";
+        customerId = "customer id";
+        rewardName = "gold coins";
+        rewardAmount = "25";
+        className = "com.mopub.mobileads.MoPubRewardedVideo";
+        customData = "custom data";
         Networking.setRequestQueueForTesting(mockRequestQueue);
     }
 
     @Test
     public void makeRewardedVideoCompletionRequest_shouldAddMacros_shouldMakeVideoCompletionRequest() throws Exception {
         RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(context, url,
-                "customer id");
+                customerId, rewardName, rewardAmount, className, customData);
 
         verify(mockRequestQueue).add(argThat(isUrl(
-                "testUrl&customer_id=customer%20id&nv=" +
-                        Uri.encode(MoPub.SDK_VERSION) + "&v=" +
-                        MoPubRewardedVideoManager.API_VERSION)));
+                "testUrl&customer_id=customer%20id&rcn=gold%20coins&rca=25"
+                        + "&nv=" + Uri.encode(MoPub.SDK_VERSION)
+                        + "&v=" + MoPubRewardedVideoManager.API_VERSION
+                        + "&cec=com.mopub.mobileads.MoPubRewardedVideo"
+                        + "&rcd=custom%20data"
+                ))
+        );
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_withNullContext_shouldNotMakeVideoCompletionRequest() throws Exception {
+        RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(null, url,
+                customerId, rewardName, rewardAmount, className, customData);
+        verifyZeroInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_withNullUrl_shouldNotMakeVideoCompletionRequest() throws Exception {
+        RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(context, null,
+                customerId, rewardName, rewardAmount, className, customData);
+        verifyZeroInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_withEmptyUrl_shouldNotMakeVideoCompletionRequest() throws Exception {
+        RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(context, "",
+                customerId, rewardName, rewardAmount, className, customData);
+        verifyZeroInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_withNullRewardName_shouldNotMakeVideoCompletionRequest() throws Exception {
+        RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(context, url,
+                customerId, null, rewardAmount, className, customData);
+        verifyZeroInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_withNullRewardAmount_shouldNotMakeVideoCompletionRequest() throws Exception {
+        RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(context, url,
+                customerId, rewardName, null, className, customData);
+        verifyZeroInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_withNullCustomEvent_shouldPassEmptyCustomEventQueryParam_shouldMakeVideoCompletionRequest() throws Exception {
+        RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(context, url,
+                customerId, rewardName, rewardAmount, null, customData);
+
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "testUrl&customer_id=customer%20id&rcn=gold%20coins&rca=25"
+                        + "&nv=" + Uri.encode(MoPub.SDK_VERSION)
+                        + "&v=" + MoPubRewardedVideoManager.API_VERSION
+                        + "&cec="
+                        + "&rcd=custom%20data"
+                ))
+        );
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_withAlreadyEncodedCustomData_shouldDoubleEncodeCustomData_shouldMakeVideoCompletionRequest() throws Exception {
+        RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(context, url,
+                customerId, rewardName, rewardAmount, className, Uri.encode(customData));
+
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "testUrl&customer_id=customer%20id&rcn=gold%20coins&rca=25"
+                        + "&nv=" + Uri.encode(MoPub.SDK_VERSION)
+                        + "&v=" + MoPubRewardedVideoManager.API_VERSION
+                        + "&cec=com.mopub.mobileads.MoPubRewardedVideo"
+                        + "&rcd=custom%2520data"
+                ))
+        );
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_withNullCustomData_shouldAddAllOtherMacros_shouldMakeVideoCompletionRequest() throws Exception {
+        RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(context, url,
+                customerId, rewardName, rewardAmount, className, null);
+
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "testUrl&customer_id=customer%20id&rcn=gold%20coins&rca=25"
+                        + "&nv=" + Uri.encode(MoPub.SDK_VERSION)
+                        + "&v=" + MoPubRewardedVideoManager.API_VERSION
+                        + "&cec=com.mopub.mobileads.MoPubRewardedVideo"
+                ))
+        );
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_withEmptyCustomData_shouldAddAllOtherMacros_shouldMakeVideoCompletionRequest() throws Exception {
+        RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(context, url,
+                customerId, rewardName, rewardAmount, className, "");
+
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "testUrl&customer_id=customer%20id&rcn=gold%20coins&rca=25"
+                        + "&nv=" + Uri.encode(MoPub.SDK_VERSION)
+                        + "&v=" + MoPubRewardedVideoManager.API_VERSION
+                        + "&cec=com.mopub.mobileads.MoPubRewardedVideo"
+                ))
+        );
     }
 
     @Test
@@ -82,30 +189,36 @@ public void retryTimes_shouldAllBeGreaterThanRequestTimeoutDelay() {
     @Test
     public void onErrorResponse_shouldSetShouldStopToTrueWhenResponseNot500To599() {
         RewardedVideoCompletionRequestHandler subject =
-                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+                new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                        rewardAmount, className, customData);
 
         assertThat(subject.getShouldStop()).isEqualTo(false);
 
         subject.onErrorResponse(new VolleyError(new NetworkResponse(500, null, null, true)));
         assertThat(subject.getShouldStop()).isEqualTo(false);
 
-        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                rewardAmount, className, customData);
         subject.onErrorResponse(new VolleyError(new NetworkResponse(501, null, null, true)));
         assertThat(subject.getShouldStop()).isEqualTo(false);
 
-        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                rewardAmount, className, customData);
         subject.onErrorResponse(new VolleyError(new NetworkResponse(599, null, null, true)));
         assertThat(subject.getShouldStop()).isEqualTo(false);
 
-        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                rewardAmount, className, customData);
         subject.onErrorResponse(new VolleyError(new NetworkResponse(200, null, null, true)));
         assertThat(subject.getShouldStop()).isEqualTo(true);
 
-        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                rewardAmount, className, customData);
         subject.onErrorResponse(new VolleyError(new NetworkResponse(499, null, null, true)));
         assertThat(subject.getShouldStop()).isEqualTo(true);
 
-        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                rewardAmount, className, customData);
         subject.onErrorResponse(new VolleyError(new NetworkResponse(600, null, null, true)));
         assertThat(subject.getShouldStop()).isEqualTo(true);
     }
@@ -113,30 +226,36 @@ public void onErrorResponse_shouldSetShouldStopToTrueWhenResponseNot500To599() {
     @Test
     public void onResponse_shouldSetShouldStopToTrueWhenResponseNot500To599() {
         RewardedVideoCompletionRequestHandler subject =
-                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+                new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                        rewardAmount, className, customData);
 
         assertThat(subject.getShouldStop()).isEqualTo(false);
 
         subject.onResponse(500);
         assertThat(subject.getShouldStop()).isEqualTo(false);
 
-        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                rewardAmount, className, customData);
         subject.onResponse(501);
         assertThat(subject.getShouldStop()).isEqualTo(false);
 
-        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                rewardAmount, className, customData);
         subject.onResponse(599);
         assertThat(subject.getShouldStop()).isEqualTo(false);
 
-        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                rewardAmount, className, customData);
         subject.onResponse(200);
         assertThat(subject.getShouldStop()).isEqualTo(true);
 
-        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                rewardAmount, className, customData);
         subject.onResponse(499);
         assertThat(subject.getShouldStop()).isEqualTo(true);
 
-        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                rewardAmount, className, customData);
         subject.onResponse(600);
         assertThat(subject.getShouldStop()).isEqualTo(true);
     }
@@ -145,8 +264,8 @@ public void onResponse_shouldSetShouldStopToTrueWhenResponseNot500To599() {
     public void makeRewardedVideoCompletionRequest_shouldRetry() {
         Handler mockHandler = mock(Handler.class);
         RewardedVideoCompletionRequestHandler subject =
-                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id",
-                        mockHandler);
+                new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                        rewardAmount, className, customData, mockHandler);
 
         subject.makeRewardedVideoCompletionRequest();
 
@@ -159,8 +278,8 @@ public void makeRewardedVideoCompletionRequest_shouldRetry() {
     public void makeRewardedVideoCompletionRequest_shouldNotRetryIfShouldStopIsSetToTrue() {
         Handler mockHandler = mock(Handler.class);
         RewardedVideoCompletionRequestHandler subject =
-                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id",
-                        mockHandler);
+                new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                        rewardAmount, className, customData, mockHandler);
         // This should set shouldStop to true.
         subject.onResponse(200);
 
@@ -174,8 +293,8 @@ public void makeRewardedVideoCompletionRequest_shouldNotRetryIfShouldStopIsSetTo
     public void makeRewardedVideoCompletionRequest_shouldNotRetryIfMaxRetriesReached() {
         Handler mockHandler = mock(Handler.class);
         RewardedVideoCompletionRequestHandler subject =
-                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id",
-                        mockHandler);
+                new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                        rewardAmount, className, customData, mockHandler);
         subject.setRetryCount(RewardedVideoCompletionRequestHandler.MAX_RETRIES);
 
         subject.makeRewardedVideoCompletionRequest();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoDataTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoDataTest.java
deleted file mode 100644
index 512ac0e7..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoDataTest.java
+++ /dev/null
@@ -1,73 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.MoPubReward;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class RewardedVideoDataTest {
-
-    private RewardedVideoData subject;
-
-    @Before
-    public void setup() {
-        subject = new RewardedVideoData();
-    }
-
-    @Test
-    public void updateAdUnitRewardMapping_shouldMapAdUnitIdToReward() throws Exception {
-        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "123");
-        MoPubReward moPubReward = subject.getMoPubReward("mopub_id");
-        assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
-        assertThat(moPubReward.getAmount()).isEqualTo(123);
-    }
-
-    @Test
-    public void updateAdUnitRewardMapping_withNullCurrencyName_shouldRemoveExistingAdUnitMapping_shouldNotMapAdUnitIdToReward() throws Exception {
-        // Insert initial value to be removed with next call
-        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "123");
-        MoPubReward moPubReward = subject.getMoPubReward("mopub_id");
-        assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
-        assertThat(moPubReward.getAmount()).isEqualTo(123);
-
-        subject.updateAdUnitRewardMapping("mopub_id", null, "123");
-        assertThat(subject.getMoPubReward("mopub_id")).isNull();
-    }
-
-    @Test
-    public void updateAdUnitRewardMapping_withNullCurrencyName_shouldNotMapAdUnitIdToReward() throws Exception {
-        // Insert initial value to be removed with next call
-        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "123");
-        MoPubReward moPubReward = subject.getMoPubReward("mopub_id");
-        assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
-        assertThat(moPubReward.getAmount()).isEqualTo(123);
-
-        subject.updateAdUnitRewardMapping("mopub_id", null, "123");
-        assertThat(subject.getMoPubReward("mopub_id")).isNull();
-    }
-
-    @Test
-    public void updateAdUnitRewardMapping_withNullCurrencyAmount_shouldNotMapAdUnitIdToReward() throws Exception {
-        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", null);
-        assertThat(subject.getMoPubReward("mopub_id")).isNull();
-    }
-
-    @Test
-    public void updateAdUnitRewardMapping_withNonNumberCurrencyAmount_shouldNotMapAdUnitIdToReward() throws Exception {
-        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "abc");
-        assertThat(subject.getMoPubReward("mopub_id")).isNull();
-    }
-
-    @Test
-    public void updateAdUnitRewardMapping_withCurrencyAmountLessThanZero_shouldNotMapAdUnitIdToReward() throws Exception {
-        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "-1");
-        assertThat(subject.getMoPubReward("mopub_id")).isNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java
index 395b2ee6..ab3d313a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java
@@ -39,7 +39,7 @@ public void getVideoViewabilityTracker_shouldReturnVideoViewabilityTracker() thr
         assertThat(tracker).isNotNull();
         assertThat(tracker.getViewablePlaytimeMS()).isEqualTo(2500);
         assertThat(tracker.getPercentViewable()).isEqualTo(50);
-        assertThat(tracker.getTrackingUrl()).isEqualTo("https://ad.server.com/impression/dot.gif");
+        assertThat(tracker.getContent()).isEqualTo("https://ad.server.com/impression/dot.gif");
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
index c16f52b6..ef132fcd 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
@@ -36,6 +36,8 @@ public void setup() throws Exception {
                 "        https://creativeView/two" +
                 "        ]]>" +
                 "    </Tracking>" +
+                // Ensure empty creativeView event is ignored
+                "    <Tracking event=\"creativeView\"/>" +
                 "    <Tracking event=\"start\">" +
                 "        <![CDATA[" +
                 "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
@@ -75,6 +77,12 @@ public void setup() throws Exception {
                 "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
                 "        ]]>" +
                 "    </Tracking>" +
+                // Invalid tracking due to a negative offset
+                "    <Tracking event=\"progress\" offset=\"-05:01\">" +
+                "        <![CDATA[" +
+                "        https://negative.tracker.net" +
+                "        ]]>" +
+                "    </Tracking>" +
                 "    <Tracking event=\"midpoint\">" +
                 "        <![CDATA[" +
                 "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;" +
@@ -236,31 +244,31 @@ public void getFractionalTrackers_shouldReturnCorrectValues() {
 
         VastFractionalProgressTracker tracker0 = trackers.get(0);
         assertThat(tracker0.trackingFraction()).isEqualTo(0.13f);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+        assertThat(tracker0.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker1 = trackers.get(1);
         assertThat(tracker1.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
+        assertThat(tracker1.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker2 = trackers.get(2);
         assertThat(tracker2.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker2.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
+        assertThat(tracker2.getContent()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
 
         VastFractionalProgressTracker tracker3 = trackers.get(3);
         assertThat(tracker3.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker3.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
+        assertThat(tracker3.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker4 = trackers.get(4);
         assertThat(tracker4.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker4.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
+        assertThat(tracker4.getContent()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
 
         VastFractionalProgressTracker tracker5 = trackers.get(5);
         assertThat(tracker5.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker5.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
+        assertThat(tracker5.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker6 = trackers.get(6);
         assertThat(tracker6.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker6.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
+        assertThat(tracker6.getContent()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
     }
 
     @Test
@@ -272,19 +280,19 @@ public void getAbsoluteProgressTrackers_shouldReturnCorrectValues() {
 
         VastAbsoluteProgressTracker tracker0 = trackers.get(0);
         assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://creativeView/one");
+        assertThat(tracker0.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
 
         VastAbsoluteProgressTracker tracker1 = trackers.get(1);
         assertThat(tracker1.getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://creativeView/two");
+        assertThat(tracker1.getContent()).isEqualTo("https://creativeView/one");
 
         VastAbsoluteProgressTracker tracker2 = trackers.get(2);
-        assertThat(tracker2.getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(tracker2.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+        assertThat(tracker2.getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(tracker2.getContent()).isEqualTo("https://creativeView/two");
 
         VastAbsoluteProgressTracker tracker3 = trackers.get(3);
         assertThat(tracker3.getTrackingMilliseconds()).isEqualTo(3670300);
-        assertThat(tracker3.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;" +
+        assertThat(tracker3.getContent()).isEqualTo("https://ad.doubleclick.net/activity;" +
                 "src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;" +
                 "rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
index d53c7cc3..7f0d8b98 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
@@ -103,7 +103,7 @@ public void prepareVastVideoConfiguration_shouldNotifyTheListenerAndContainTheCo
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(0).getTrackingMilliseconds())
                 .isEqualTo(0);
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(1).getTrackingMilliseconds())
-                .isEqualTo(2000);
+                .isEqualTo(0);
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(2).getTrackingMilliseconds())
                 .isEqualTo(3100);
 
@@ -158,9 +158,9 @@ public void prepareVastVideoConfiguration_shouldHandleMultipleRedirects() throws
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(0).getTrackingMilliseconds()).isEqualTo(0);
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(1).getTrackingMilliseconds()).isEqualTo(0);
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(2).getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(3).getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(4).getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(5).getTrackingMilliseconds()).isEqualTo(2000);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(3).getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(4).getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(5).getTrackingMilliseconds()).isEqualTo(0);
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(6).getTrackingMilliseconds()).isEqualTo(3100);
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(7).getTrackingMilliseconds()).isEqualTo(3100);
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(8).getTrackingMilliseconds()).isEqualTo(3100);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java
index 59262336..eeaace59 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java
@@ -1,12 +1,9 @@
 package com.mopub.mobileads;
 
-import android.annotation.TargetApi;
 import android.graphics.Bitmap;
 import android.media.MediaMetadataRetriever;
-import android.os.Build;
 import android.widget.ImageView;
 
-import com.mopub.TestSdkHelper;
 import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
@@ -37,7 +34,6 @@
     private String videoPath;
     private int videoDuration;
 
-    @TargetApi(Build.VERSION_CODES.GINGERBREAD_MR1)
     @Before
     public void setUp() throws Exception {
         videoPath = "disk_video_path";
@@ -50,17 +46,7 @@ public void setUp() throws Exception {
     }
 
     @Test
-    public void doInBackground_beforeGingerbreadMr1_shouldReturnFalse() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.GINGERBREAD);
-        assertThat(subject.doInBackground(videoPath)).isFalse();
-        verifyNoMoreInteractions(mockMediaMetadataRetriever);
-        assertThat(subject.getBlurredLastVideoFrame()).isNull();
-    }
-
-    @TargetApi(Build.VERSION_CODES.GINGERBREAD_MR1)
-    @Test
-    public void doInBackground_atLeastGingerbreadMr1_shouldSetVideoPath_shouldUseVideoDurationMinusOffset_shouldReturnTrue() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.GINGERBREAD_MR1);
+    public void doInBackground_shouldSetVideoPath_shouldUseVideoDurationMinusOffset_shouldReturnTrue() throws Exception {
         assertThat(subject.doInBackground(videoPath)).isTrue();
         verify(mockMediaMetadataRetriever).setDataSource(videoPath);
         verify(mockMediaMetadataRetriever).getFrameAtTime(9800000,
@@ -69,7 +55,6 @@ public void doInBackground_atLeastGingerbreadMr1_shouldSetVideoPath_shouldUseVid
         assertThat(subject.getBlurredLastVideoFrame()).isEqualTo(mockBitmap);
     }
 
-    @TargetApi(Build.VERSION_CODES.GINGERBREAD_MR1)
     @Test
     public void doInBackground_whenSetDataSourceThrowsRuntimeException_shouldCatchExceptionAndReturnFalse() throws Exception {
         doThrow(new RuntimeException()).when(mockMediaMetadataRetriever).setDataSource(anyString());
@@ -78,7 +63,6 @@ public void doInBackground_whenSetDataSourceThrowsRuntimeException_shouldCatchEx
         assertThat(subject.getBlurredLastVideoFrame()).isNull();
     }
 
-    @TargetApi(Build.VERSION_CODES.GINGERBREAD_MR1)
     @Test
     public void doInBackground_whenGetLastFrameReturnsNull_shouldReturnFalse() throws Exception {
         when(mockMediaMetadataRetriever.getFrameAtTime(anyLong(), anyInt())).thenReturn(null);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java
index 9d38dd63..76639db5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java
@@ -2,11 +2,14 @@
 
 import android.app.Activity;
 import android.content.Intent;
+import android.content.res.Configuration;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.VastUtils;
 import com.mopub.network.MoPubRequestQueue;
 import com.mopub.network.Networking;
 
+import org.json.JSONObject;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -82,6 +85,274 @@ public void addAbsoluteTrackers_multipleTimes_shouldBesSorted() throws Exception
         assertThat(subject.getAbsoluteTrackers()).isSorted();
     }
 
+    @Test
+    public void addVideoTrackers_withValidJSON_shouldHydrateUrls() throws Exception {
+        final JSONObject videoTrackers = new JSONObject("{" +
+                    "urls: [" +
+                        "\"http://mopub.com/%%VIDEO_EVENT%%/foo\"," +
+                        "\"http://mopub.com/%%VIDEO_EVENT%%/bar\"" +
+                    "]," +
+                    "events: [ \"start\" ]" +
+                "}");
+        VastVideoConfig subject = new VastVideoConfig();
+
+        subject.addVideoTrackers(videoTrackers);
+
+        final List<VastAbsoluteProgressTracker> trackers = subject.getAbsoluteTrackers();
+        assertThat(trackers.size()).isEqualTo(2);
+        assertAbsoluteTracker(trackers.get(0), "http://mopub.com/start/foo", 0);
+        assertAbsoluteTracker(trackers.get(1), "http://mopub.com/start/bar", 0);
+    }
+
+    @Test
+    public void addVideoTrackers_withStartEvent_shouldAddAbsoluteTrackerWith0Ms() throws Exception {
+        final JSONObject videoTrackers = new JSONObject("{" +
+                    "urls: [ \"http://mopub.com/%%VIDEO_EVENT%%/foo\" ]," +
+                    "events: [ \"start\" ]" +
+                "}");
+        VastVideoConfig subject = new VastVideoConfig();
+
+        subject.addVideoTrackers(videoTrackers);
+
+        final List<VastAbsoluteProgressTracker> trackers = subject.getAbsoluteTrackers();
+        assertThat(trackers.size()).isEqualTo(1);
+        assertAbsoluteTracker(trackers.get(0), "http://mopub.com/start/foo", 0);
+    }
+
+    @Test
+    public void addVideoTrackers_withFirstQuartileEvent_shouldAddFractionalTrackerWithQuarterFraction() throws Exception {
+        final JSONObject videoTrackers = new JSONObject("{" +
+                    "urls: [ \"http://mopub.com/%%VIDEO_EVENT%%/foo\" ]," +
+                    "events: [ \"firstQuartile\" ]" +
+                "}");
+        VastVideoConfig subject = new VastVideoConfig();
+
+        subject.addVideoTrackers(videoTrackers);
+
+        final List<VastFractionalProgressTracker> trackers = subject.getFractionalTrackers();
+        assertThat(trackers.size()).isEqualTo(1);
+        assertFractionalTracker(trackers.get(0), "http://mopub.com/firstQuartile/foo", 0.25f);
+    }
+
+    @Test
+    public void addVideoTrackers_withMidpointEvent_shouldAddFractionalTrackerWithHalfFraction() throws Exception {
+        final JSONObject videoTrackers = new JSONObject("{" +
+                    "urls: [ \"http://mopub.com/%%VIDEO_EVENT%%/foo\" ]," +
+                    "events: [ \"midpoint\" ]" +
+                "}");
+        VastVideoConfig subject = new VastVideoConfig();
+
+        subject.addVideoTrackers(videoTrackers);
+
+        final List<VastFractionalProgressTracker> trackers = subject.getFractionalTrackers();
+        assertThat(trackers.size()).isEqualTo(1);
+        assertFractionalTracker(trackers.get(0), "http://mopub.com/midpoint/foo", 0.5f);
+    }
+
+    @Test
+    public void addVideoTrackers_withThirdQuartileEvent_shouldAddFractionalTrackerWithThirdFraction() throws Exception {
+        final JSONObject videoTrackers = new JSONObject("{" +
+                    "urls: [ \"http://mopub.com/%%VIDEO_EVENT%%/foo\" ]," +
+                    "events: [ \"thirdQuartile\" ]" +
+                "}");
+        VastVideoConfig subject = new VastVideoConfig();
+
+        subject.addVideoTrackers(videoTrackers);
+
+        final List<VastFractionalProgressTracker> trackers = subject.getFractionalTrackers();
+        assertThat(trackers.size()).isEqualTo(1);
+        assertFractionalTracker(trackers.get(0), "http://mopub.com/thirdQuartile/foo", 0.75f);
+    }
+
+    @Test
+    public void addVideoTrackers_withCompleteEvent_shouldAddCompleteTracker() throws Exception {
+        final JSONObject videoTrackers = new JSONObject("{" +
+                    "urls: [ \"http://mopub.com/%%VIDEO_EVENT%%/foo\" ]," +
+                    "events: [ \"complete\" ]" +
+                "}");
+        VastVideoConfig subject = new VastVideoConfig();
+
+        subject.addVideoTrackers(videoTrackers);
+
+        final List<VastTracker> trackers = subject.getCompleteTrackers();
+        assertThat(trackers.size()).isEqualTo(1);
+        assertTracker(trackers.get(0), "http://mopub.com/complete/foo");
+    }
+
+    @Test
+    public void addVideoTrackers_withCompanionAdViewEvent_shouldAddCreativeViewTracker() throws Exception {
+        final JSONObject videoTrackers = new JSONObject("{" +
+                    "urls: [ \"http://mopub.com/%%VIDEO_EVENT%%/foo\" ]," +
+                    "events: [ \"companionAdView\" ]" +
+                "}");
+        VastVideoConfig subject = new VastVideoConfig();
+        addCompanionAds(subject);
+
+        subject.addVideoTrackers(videoTrackers);
+
+        final List<VastTracker> landscapeTrackers = subject.getVastCompanionAd(
+                Configuration.ORIENTATION_LANDSCAPE).getCreativeViewTrackers();
+        final List<VastTracker> portraitTrackers = subject.getVastCompanionAd(
+                Configuration.ORIENTATION_PORTRAIT).getCreativeViewTrackers();
+        assertThat(landscapeTrackers.size()).isEqualTo(2);
+        assertThat(portraitTrackers.size()).isEqualTo(2);
+        // First tracker is irrelevant and just necessary for test setup
+        assertTracker(landscapeTrackers.get(1), "http://mopub.com/companionAdView/foo");
+        assertTracker(portraitTrackers.get(1), "http://mopub.com/companionAdView/foo");
+    }
+
+    @Test
+    public void addVideoTrackers_withCompanionClickEvent_shouldAddCreativeClickTracker() throws Exception {
+        final JSONObject videoTrackers = new JSONObject("{" +
+                    "urls: [ \"http://mopub.com/%%VIDEO_EVENT%%/foo\" ]," +
+                    "events: [ \"companionAdClick\" ]" +
+                "}");
+        VastVideoConfig subject = new VastVideoConfig();
+        addCompanionAds(subject);
+
+        subject.addVideoTrackers(videoTrackers);
+
+        final List<VastTracker> landscapeTrackers = subject.getVastCompanionAd(
+                Configuration.ORIENTATION_LANDSCAPE).getClickTrackers();
+        final List<VastTracker> portraitTrackers = subject.getVastCompanionAd(
+                Configuration.ORIENTATION_PORTRAIT).getClickTrackers();
+        assertThat(landscapeTrackers.size()).isEqualTo(2);
+        assertThat(portraitTrackers.size()).isEqualTo(2);
+        // First tracker is irrelevant and just necessary for test setup
+        assertTracker(landscapeTrackers.get(1), "http://mopub.com/companionAdClick/foo");
+        assertTracker(portraitTrackers.get(1), "http://mopub.com/companionAdClick/foo");
+    }
+
+    @Test
+    public void addVideoTrackers_withMultipleUrls_withMultipleEvents_shouldAddCorrespondingTrackers() throws Exception {
+        final JSONObject videoTrackers = new JSONObject("{" +
+                    "urls: [" +
+                        "\"http://mopub.com/%%VIDEO_EVENT%%/foo\"," +
+                        "\"http://mopub.com/%%VIDEO_EVENT%%/bar\"" +
+                    "]," +
+                    "events: [" +
+                        "\"start\"," +
+                        "\"firstQuartile\"," +
+                        "\"midpoint\"," +
+                        "\"thirdQuartile\"," +
+                        "\"complete\"," +
+                        "\"companionAdView\"," +
+                        "\"companionAdClick\"" +
+                    "]" +
+                "}");
+        VastVideoConfig subject = new VastVideoConfig();
+        addCompanionAds(subject);
+
+        subject.addVideoTrackers(videoTrackers);
+
+        final List<VastAbsoluteProgressTracker> startTrackers = subject.getAbsoluteTrackers();
+        final List<VastFractionalProgressTracker> fractionalTrackers = // quartile trackers
+                subject.getFractionalTrackers();
+        final List<VastTracker> completeTrackers = subject.getCompleteTrackers();
+        final List<VastTracker> landscapeCompanionViewTrackers = subject.getVastCompanionAd(
+                Configuration.ORIENTATION_LANDSCAPE).getCreativeViewTrackers();
+        final List<VastTracker> portraitCompanionViewTrackers = subject.getVastCompanionAd(
+                Configuration.ORIENTATION_PORTRAIT).getCreativeViewTrackers();
+        final List<VastTracker> landscapeCompanionClickTrackers = subject.getVastCompanionAd(
+                Configuration.ORIENTATION_LANDSCAPE).getClickTrackers();
+        final List<VastTracker> portraitCompanionClickTrackers = subject.getVastCompanionAd(
+                Configuration.ORIENTATION_PORTRAIT).getClickTrackers();
+        assertThat(startTrackers.size()).isEqualTo(2);
+        assertThat(fractionalTrackers.size()).isEqualTo(6);
+        assertThat(completeTrackers.size()).isEqualTo(2);
+        assertThat(landscapeCompanionViewTrackers.size()).isEqualTo(3);
+        assertThat(portraitCompanionViewTrackers.size()).isEqualTo(3);
+        assertThat(landscapeCompanionClickTrackers.size()).isEqualTo(3);
+        assertThat(portraitCompanionClickTrackers.size()).isEqualTo(3);
+        assertAbsoluteTracker(startTrackers.get(0), "http://mopub.com/start/foo", 0);
+        assertAbsoluteTracker(startTrackers.get(1), "http://mopub.com/start/bar", 0);
+        assertFractionalTracker(fractionalTrackers.get(0),
+                "http://mopub.com/firstQuartile/foo", 0.25f);
+        assertFractionalTracker(fractionalTrackers.get(1),
+                "http://mopub.com/firstQuartile/bar", 0.25f);
+        assertFractionalTracker(fractionalTrackers.get(2), "http://mopub.com/midpoint/foo", 0.5f);
+        assertFractionalTracker(fractionalTrackers.get(3), "http://mopub.com/midpoint/bar", 0.5f);
+        assertFractionalTracker(fractionalTrackers.get(4),
+                "http://mopub.com/thirdQuartile/foo", 0.75f);
+        assertFractionalTracker(fractionalTrackers.get(5),
+                "http://mopub.com/thirdQuartile/bar", 0.75f);
+        assertTracker(completeTrackers.get(0), "http://mopub.com/complete/foo");
+        assertTracker(completeTrackers.get(1), "http://mopub.com/complete/bar");
+        // First tracker is irrelevant and just necessary for test setup
+        assertTracker(landscapeCompanionViewTrackers.get(1),
+                "http://mopub.com/companionAdView/foo");
+        assertTracker(landscapeCompanionViewTrackers.get(2),
+                "http://mopub.com/companionAdView/bar");
+        assertTracker(portraitCompanionViewTrackers.get(1),
+                "http://mopub.com/companionAdView/foo");
+        assertTracker(portraitCompanionViewTrackers.get(2),
+                "http://mopub.com/companionAdView/bar");
+        assertTracker(landscapeCompanionClickTrackers.get(1),
+                "http://mopub.com/companionAdClick/foo");
+        assertTracker(landscapeCompanionClickTrackers.get(2),
+                "http://mopub.com/companionAdClick/bar");
+        assertTracker(portraitCompanionClickTrackers.get(1),
+                "http://mopub.com/companionAdClick/foo");
+        assertTracker(portraitCompanionClickTrackers.get(2),
+                "http://mopub.com/companionAdClick/bar");
+    }
+
+    @Test
+    public void addVideoTrackers_withCompanionAdViewEvent_withoutCompanionAd_shouldDoNothing() throws Exception {
+        final JSONObject videoTrackers = new JSONObject("{" +
+                "urls: [ \"http://mopub.com/%%VIDEO_EVENT%%/foo\" ]," +
+                "events: [ \"companionAdView\" ]" +
+                "}");
+        VastVideoConfig subject = new VastVideoConfig();
+        // Note companion ads were NOT added
+
+        subject.addVideoTrackers(videoTrackers);
+
+        // Trackers would be in companion ad, so just make sure they are still null
+        assertThat(subject.getVastCompanionAd(Configuration.ORIENTATION_LANDSCAPE)).isNull();
+        assertThat(subject.getVastCompanionAd(Configuration.ORIENTATION_PORTRAIT)).isNull();
+    }
+
+    @Test
+    public void addVideoTrackers_withoutUrls_shouldDoNothing() throws Exception {
+        final JSONObject videoTrackers = new JSONObject("{" +
+                "events: [ \"start\" ]" +
+                "}");
+        VastVideoConfig subject = new VastVideoConfig();
+
+        subject.addVideoTrackers(videoTrackers);
+
+        final List<VastAbsoluteProgressTracker> trackers = subject.getAbsoluteTrackers();
+        assertThat(trackers).isEmpty();
+    }
+
+    @Test
+    public void addVideoTrackers_withoutEvents_shouldDoNothing() throws Exception {
+        final JSONObject videoTrackers = new JSONObject("{" +
+                "urls: [ \"http://mopub.com/%%VIDEO_EVENT%%/foo\" ]" +
+                "}");
+        VastVideoConfig subject = new VastVideoConfig();
+
+        subject.addVideoTrackers(videoTrackers);
+
+        final List<VastAbsoluteProgressTracker> trackers = subject.getAbsoluteTrackers();
+        assertThat(trackers).isEmpty();
+    }
+
+    @Test
+    public void addVideoTrackers_withInvalidEvent_shouldSkipInvalidEvent() throws Exception {
+        final JSONObject videoTrackers = new JSONObject("{" +
+                "urls: [ \"http://mopub.com/%%VIDEO_EVENT%%/foo\" ]," +
+                "events: [ \"start\", \"INVALID\" ]" +
+                "}");
+        VastVideoConfig subject = new VastVideoConfig();
+
+        subject.addVideoTrackers(videoTrackers);
+
+        final List<VastAbsoluteProgressTracker> trackers = subject.getAbsoluteTrackers();
+        assertThat(trackers.size()).isEqualTo(1);
+        assertThat(trackers.get(0).getContent()).isEqualTo("http://mopub.com/start/foo");
+    }
 
     @Test
     public void getUntriggeredTrackersBefore_withTriggeredTrackers_shouldNotReturnTriggered() throws Exception {
@@ -146,6 +417,22 @@ public void getUntriggeredTrackersBefore_shouldReturnAllTrackersSorted() throws
         assertThat(((VastFractionalProgressTracker) tracker4).trackingFraction()).isEqualTo(0.75f);
     }
 
+    @Test
+    public void getUntriggeredTrackersBefore_withNegativeCurrentTime_shouldReturnNoTrackers() throws Exception {
+        VastVideoConfig subject = new VastVideoConfig();
+        subject.setDiskMediaFileUrl("disk_video_path");
+        subject.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("zero", 0f),
+                        new VastFractionalProgressTracker("half", 0.5f)));
+        subject.addAbsoluteTrackers(
+                Arrays.asList(new VastAbsoluteProgressTracker("5secs", 5000),
+                        new VastAbsoluteProgressTracker("10secs", 10000)));
+
+        final List<VastTracker> untriggeredTrackers = subject.getUntriggeredTrackersBefore(-2000,
+                11000);
+        assertThat(untriggeredTrackers).isEmpty();
+    }
+
     @Test
     public void handleClickForResult_withNullClickThroughUrl_shouldNotOpenNewActivity() throws Exception {
         subject.handleClickForResult(activity, 1234, 1);
@@ -213,4 +500,36 @@ public void handleClickForResult_withAboutBlankClickThroughUrl_shouldFailSilentl
 
         assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
     }
+
+    private void assertAbsoluteTracker(final VastAbsoluteProgressTracker actualTracker,
+            final String expectedUrl, final int expectedMs) {
+        assertThat(actualTracker.getContent()).isEqualTo(expectedUrl);
+        assertThat(actualTracker.getTrackingMilliseconds()).isEqualTo(expectedMs);
+    }
+
+    private void assertFractionalTracker(final VastFractionalProgressTracker actualTracker,
+            final String expectedUrl, final float expectedFraction) {
+        assertThat(actualTracker.getContent()).isEqualTo(expectedUrl);
+        assertThat(actualTracker.trackingFraction()).isEqualTo(expectedFraction);
+    }
+
+    private void assertTracker(final VastTracker actualTracker, final String expectedUrl) {
+        assertThat(actualTracker.getContent()).isEqualTo(expectedUrl);
+    }
+
+    private void addCompanionAds(VastVideoConfig subject) {
+        VastCompanionAdConfig companionLandscape = new VastCompanionAdConfig(123, 456,
+                new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
+                        .CreativeType.IMAGE, 123, 456),
+                "http://mopub.com",
+                VastUtils.stringsToVastTrackers("clickTracker"),
+                VastUtils.stringsToVastTrackers("viewTracker"));
+        VastCompanionAdConfig companionPortrait = new VastCompanionAdConfig(123, 456,
+                new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
+                        .CreativeType.IMAGE, 123, 456),
+                "http://mopub.com",
+                VastUtils.stringsToVastTrackers("clickTracker"),
+                VastUtils.stringsToVastTrackers("viewTracker"));
+        subject.setVastCompanionAd(companionLandscape, companionPortrait);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
index 1c063c3a..461d72a4 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
@@ -1,6 +1,5 @@
 package com.mopub.mobileads;
 
-import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
@@ -11,17 +10,15 @@
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
 import android.media.MediaMetadataRetriever;
-import android.media.MediaPlayer;
 import android.net.Uri;
 import android.os.AsyncTask;
-import android.os.Build.VERSION_CODES;
 import android.os.Bundle;
 import android.view.View;
 import android.webkit.WebView;
 import android.widget.ImageView;
 import android.widget.VideoView;
 
-import com.mopub.TestSdkHelper;
+import com.mopub.common.ExternalViewabilitySession;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.DeviceUtils.ForceOrientation;
@@ -54,20 +51,19 @@
 import org.robolectric.shadows.httpclient.TestHttpResponse;
 import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
 
-import java.io.File;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
 
-import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
+import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE;
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
-import static com.mopub.common.VolleyRequestMatcher.isUrl;
-import static com.mopub.mobileads.BaseVideoViewController.BaseVideoViewControllerListener;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.VolleyRequestMatcher.isUrl;
+import static com.mopub.mobileads.BaseVideoViewController.BaseVideoViewControllerListener;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.VastVideoViewController.CURRENT_POSITION;
 import static com.mopub.mobileads.VastVideoViewController.DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON;
@@ -138,7 +134,6 @@
     private VastVideoViewProgressRunnable spyProgressRunnable;
     private VideoView spyVideoView;
 
-    @TargetApi(VERSION_CODES.GINGERBREAD_MR1)
     @Before
     public void setUp() throws Exception {
         Networking.setRequestQueueForTesting(mockRequestQueue);
@@ -390,7 +385,6 @@ public void constructor_shouldNotChangeCloseButtonDelay() throws Exception {
                 DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
     }
 
-    @TargetApi(VERSION_CODES.HONEYCOMB)
     @Test
     public void constructor_shouldAddBlackBackgroundToLayout() throws Exception {
         initializeSubject();
@@ -570,7 +564,7 @@ public void onCreate_whenCustomForceOrientationNotSpecified_shouldForceLandscape
         subject.onCreate();
 
         verify(baseVideoViewControllerListener).onSetRequestedOrientation(
-                SCREEN_ORIENTATION_LANDSCAPE);
+                SCREEN_ORIENTATION_SENSOR_LANDSCAPE);
     }
 
     @Test
@@ -611,7 +605,7 @@ public void onCreate_whenCustomForceOrientationIsLandscapeOrientation_shouldForc
         subject.onCreate();
 
         verify(baseVideoViewControllerListener).onSetRequestedOrientation(
-                SCREEN_ORIENTATION_LANDSCAPE);
+                SCREEN_ORIENTATION_SENSOR_LANDSCAPE);
     }
 
     @Test
@@ -880,19 +874,6 @@ public void onTouch_whenCloseButtonNotVisible_shouldNotPingClickThroughTrackers(
         assertThat(FakeHttp.httpRequestWasMade()).isFalse();
     }
 
-    @Test
-    public void onTouch_withNullBaseVideoViewListener_andActionTouchUp_shouldReturnTrueAndNotBlowUp() throws Exception {
-        subject = new VastVideoViewController((Activity) context, bundle, null,
-                testBroadcastIdentifier, null);
-
-        boolean result = getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(
-                0, 0));
-
-        // pass
-
-        assertThat(result).isTrue();
-    }
-
     @Test
     public void onTouch_withActionTouchDown_shouldConsumeMotionEvent() throws Exception {
         initializeSubject();
@@ -1199,29 +1180,7 @@ public void onPrepared_shouldCalibrateAndMakeVisibleProgressBarWidget() throws E
     }
 
     @Test
-    public void onPrepared_beforeGingerbreadMr1_shouldNotSetBlurredLastVideoFrame() throws Exception {
-
-        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.GINGERBREAD);
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-        Robolectric.getBackgroundThreadScheduler().unPause();
-        Robolectric.getForegroundThreadScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
-
-        assertThat(subject.getBlurredLastVideoFrameImageView().getDrawable()).isNull();
-
-        ShadowImageView imageView = Shadows.shadowOf(subject.getBlurredLastVideoFrameImageView());
-        assertThat(imageView.getOnTouchListener()).isNull();
-    }
-
-    @Test
-    public void onPrepared_atLeastGingerbreadMr1_shouldSetBlurredLastVideoFrame() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.GINGERBREAD_MR1);
+    public void onPrepared_shouldSetBlurredLastVideoFrame() throws Exception {
         VastVideoConfig vastVideoConfig = new VastVideoConfig();
         vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
         bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
@@ -1266,6 +1225,7 @@ public void onCompletion_whenAllTrackersTracked_whenNoPlaybackErrors_shouldPingC
 
         initializeSubject();
         testTracker.setTracked();
+        setViewabilityTrackersTracked(vastVideoConfig);
         spyOnVideoView();
         setVideoViewParams(15000, 15000);
 
@@ -1446,8 +1406,7 @@ public void onCompletion_whenCompanionAdNotAvailable_shouldHideBothGradientStrip
         assertThat(topGradientStripWidget.getVisibility()).isEqualTo(View.GONE);
         assertThat(bottomGradientStripWidget.getVisibility()).isEqualTo(View.GONE);
     }
-
-    @TargetApi(VERSION_CODES.HONEYCOMB)
+    
     @Test
     public void onCompletion_whenCompanionAdNotAvailableAndBlurredLastVideoFrameNotPrepared_shouldShowBlackBackground() throws Exception {
         VastVideoConfig vastVideoConfig = new VastVideoConfig();
@@ -1545,33 +1504,6 @@ public void onError_shouldStopProgressChecker() throws Exception {
         verify(spyCountdownRunnable).stop();
     }
 
-
-    @Test
-    @Config(shadows = {MoPubShadowMediaPlayer.class})
-    public void onError_withVideoFilePermissionErrorBelowJellyBean_shouldRetryPlayingTheVideo() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.ICE_CREAM_SANDWICH);
-
-        File file = new File("disk_video_path");
-        file.createNewFile();
-
-        // ShadowMediaPlayer setup needed to
-
-        initializeSubject();
-
-        assertThat(getShadowVideoView().getCurrentVideoState()).isEqualTo(-1);
-
-        assertThat(subject.getVastVideoView().getVideoRetries()).isEqualTo(0);
-        getShadowVideoView().getOnErrorListener().onError(new MediaPlayer(), 1, Integer.MIN_VALUE);
-
-        // Robo 3.0 introduces a requirement that ShadowMediaPlayer be set up with MediaInfo for a data source.
-        // Because we generate a file descriptor datasource at runtime, we can't set it up easily in this test.
-
-        assertThat(getShadowVideoView().isPlaying()).isTrue();
-        assertThat(subject.getVastVideoView().getVideoRetries()).isEqualTo(1);
-
-        file.delete();
-    }
-
     @Test
     public void onError_shouldFireErrorTrackers() throws Exception {
         VastVideoConfig vastVideoConfig = new VastVideoConfig();
@@ -2309,4 +2241,17 @@ private void setVideoViewParams(int currentPosition, int duration) throws Illega
     private ShadowVastVideoView getShadowVideoView() {
         return (ShadowVastVideoView) ShadowExtractor.extract(subject.getVastVideoView());
     }
+
+    private void setViewabilityTrackersTracked(VastVideoConfig vastVideoConfig) {
+        for (VastFractionalProgressTracker tracker : vastVideoConfig.getFractionalTrackers()) {
+            final String content = tracker.getContent();
+            try {
+                // Only mark trackers that match with viewability's VideoEvent enum
+                Enum.valueOf(ExternalViewabilitySession.VideoEvent.class, content);
+                tracker.setTracked();
+            } catch (IllegalArgumentException e) {
+                // pass
+            }
+        }
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java
index 0842ecda..30b8ccba 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java
@@ -1,15 +1,11 @@
 package com.mopub.mobileads;
 
-import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.media.MediaMetadataRetriever;
-import android.media.MediaPlayer;
 import android.os.AsyncTask;
-import android.os.Build;
 
-import com.mopub.TestSdkHelper;
 import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
@@ -19,9 +15,6 @@
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
-import java.io.File;
-
-import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.anyBoolean;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.anyLong;
@@ -40,7 +33,6 @@
     private Context context;
     private VastVideoView subject;
 
-    @TargetApi(Build.VERSION_CODES.GINGERBREAD_MR1)
     @Before
     public void setUp() throws Exception {
         context = Robolectric.buildActivity(Activity.class).create().get();
@@ -85,116 +77,4 @@ public void onDestroy_withBlurLastVideoFrameTaskFinished_shouldNotCancelTask() t
 
         verify(mockBlurLastVideoFrameTask, never()).cancel(anyBoolean());
     }
-
-    @Test
-    @Config(shadows = {MoPubShadowMediaPlayer.class})
-    public void retryMediaPlayer_withVideoFilePermissionErrorAndBelowJellyBean_shouldReturnTrue() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1);
-        File file = new File("disk_video_path");
-        file.createNewFile();
-
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
-        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1,
-                Integer.MIN_VALUE, "disk_video_path")).isTrue();
-        assertThat(subject.getVideoRetries()).isEqualTo(1);
-
-        file.delete();
-    }
-
-    @Test
-    @Config(shadows = {MoPubShadowMediaPlayer.class})
-    public void retryMediaPlayer_shouldNotRunMoreThanOnce() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1);
-        File file = new File("disk_video_path");
-        file.createNewFile();
-
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
-        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1,
-                Integer.MIN_VALUE, "disk_video_path")).isTrue();
-        assertThat(subject.getVideoRetries()).isEqualTo(1);
-
-        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1,
-                Integer.MIN_VALUE, "disk_video_path")).isFalse();
-        assertThat(subject.getVideoRetries()).isEqualTo(1);
-
-        file.delete();
-    }
-
-    @Config(sdk= Build.VERSION_CODES.JELLY_BEAN)
-    @Test
-    public void retryMediaPlayer_withAndroidVersionAboveJellyBean_shouldReturnFalse() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.JELLY_BEAN);
-        File file = new File("disk_video_path");
-        file.createNewFile();
-
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
-        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE,
-                "disk_video_path")).isFalse();
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
-
-        file.delete();
-    }
-
-    @Test
-    public void retryMediaPlayer_withOtherVideoError_shouldReturnFalse() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.ICE_CREAM_SANDWICH);
-        File file = new File("disk_video_path");
-        file.createNewFile();
-
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
-        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 2, Integer.MIN_VALUE,
-                "disk_video_path")).isFalse();
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
-
-        file.delete();
-    }
-
-    @Test
-    public void retryMediaPlayer_withExceptionThrown_shouldReturnFalseAndIncrementRetryCount() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.ICE_CREAM_SANDWICH);
-        File file = new File("disk_video_path");
-        if (file.exists()) {
-            assertThat(file.delete()).isTrue();
-        }
-
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
-        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE,
-                "disk_video_path")).isFalse();
-        assertThat(subject.getVideoRetries()).isEqualTo(1);
-    }
-
-    @Test
-    @Config(shadows = {MoPubShadowMediaPlayer.class})
-    public void onResume_shouldResetVideoRetryCountToZero() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1);
-
-        File file = new File("disk_video_path");
-        file.createNewFile();
-
-        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE,
-                "disk_video_path")).isTrue();
-        assertThat(subject.getVideoRetries()).isEqualTo(1);
-
-        subject.onResume();
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
-
-        file.delete();
-    }
-
-    @Test
-    public void createMediaMetadataRetriever_beforeGingerbreadMr1_shouldReturnNull() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.GINGERBREAD);
-        MediaMetadataRetriever mediaMetadataRetriever = subject.createMediaMetadataRetriever();
-
-        assertThat(mediaMetadataRetriever).isNull();
-    }
-
-    @Test
-    public void createMediaMetadataRetriever_atLeastGingerbreadMr1_shouldReturnNewMediaMetadataRetriever() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.GINGERBREAD_MR1);
-        MediaMetadataRetriever mediaMetadataRetriever = subject.createMediaMetadataRetriever();
-
-        assertThat(mediaMetadataRetriever).isNotNull();
-        assertThat(mediaMetadataRetriever).isInstanceOf(MediaMetadataRetriever.class);
-    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java
index c103d26d..cec7dcad 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java
@@ -58,8 +58,8 @@ public void pluginState_atLeastJellybeanMr2_shouldDefaultToOff_shouldNeverBeEnab
     }
 
     @Test
-    public void pluginState_atLeastIcsButBelowJellybeanMr2_shouldDefaultToOn_shouldAllowToggling() {
-        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.ICE_CREAM_SANDWICH);
+    public void pluginState_BelowJellybeanMr2_shouldDefaultToOn_shouldAllowToggling() {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.JELLY_BEAN);
         subject = new VastWebView(context);
         assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.ON);
 
@@ -70,19 +70,6 @@ public void pluginState_atLeastIcsButBelowJellybeanMr2_shouldDefaultToOn_shouldA
         assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.ON);
     }
 
-    @Test
-    public void pluginState_beforeIcs_shouldDefaultToOff_shouldAllowToggling() {
-        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.GINGERBREAD_MR1);
-        subject = new VastWebView(context);
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.OFF);
-
-        subject.enablePlugins(true);
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.ON);
-
-        subject.enablePlugins(false);
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.OFF);
-    }
-
     @Test
     public void loadData_shouldCallLoadDataWithBaseURL() throws Exception {
         String data = "some random html response";
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
index 5b7e6444..c7a9b243 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
@@ -1620,7 +1620,7 @@ public void evaluateVastXmlManager_withVideoViewabilityTrackerInLine_shouldRetur
         VideoViewabilityTracker tracker = vastVideoConfig.getVideoViewabilityTracker();
         assertThat(tracker.getPercentViewable()).isEqualTo(70);
         assertThat(tracker.getViewablePlaytimeMS()).isEqualTo(3500);
-        assertThat(tracker.getTrackingUrl()).isEqualTo("https://ad.server.com/impression/dot.png");
+        assertThat(tracker.getContent()).isEqualTo("https://ad.server.com/impression/dot.png");
     }
 
     @Test
@@ -1632,7 +1632,7 @@ public void evaluateVastXmlManager_withVideoViewabilityTrackerInWrapper_shouldRe
         VideoViewabilityTracker tracker = vastVideoConfig.getVideoViewabilityTracker();
         assertThat(tracker.getPercentViewable()).isEqualTo(50);
         assertThat(tracker.getViewablePlaytimeMS()).isEqualTo(2500);
-        assertThat(tracker.getTrackingUrl()).isEqualTo("https://ad.server.com/impression/dot.gif");
+        assertThat(tracker.getContent()).isEqualTo("https://ad.server.com/impression/dot.gif");
     }
 
     @Test
@@ -1645,7 +1645,7 @@ public void evaluateVastXmlManager_withVideoViewabilityTrackerBothInWrapperAndIn
         VideoViewabilityTracker tracker = vastVideoConfig.getVideoViewabilityTracker();
         assertThat(tracker.getPercentViewable()).isEqualTo(70);
         assertThat(tracker.getViewablePlaytimeMS()).isEqualTo(3500);
-        assertThat(tracker.getTrackingUrl()).isEqualTo("https://ad.server.com/impression/dot.png");
+        assertThat(tracker.getContent()).isEqualTo("https://ad.server.com/impression/dot.png");
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
index 3f2a1ddd..a2b0f541 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
@@ -602,12 +602,12 @@ public void getAbsoluteProgressTrackers_withLinearXmlManager_shouldReturnCorrect
         assertThat(trackers.size()).isEqualTo(2);
 
         VastAbsoluteProgressTracker tracker0 = trackers.get(0);
-        assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+        assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(tracker0.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
 
         VastAbsoluteProgressTracker tracker1 = trackers.get(1);
         assertThat(tracker1.getTrackingMilliseconds()).isEqualTo(3670300);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;" +
+        assertThat(tracker1.getContent()).isEqualTo("https://ad.doubleclick.net/activity;" +
                 "src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;" +
                 "rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
     }
@@ -621,31 +621,31 @@ public void getFractionalTrackers_withLinearXmlManager_shouldReturnCorrectValues
 
         VastFractionalProgressTracker tracker0 = trackers.get(0);
         assertThat(tracker0.trackingFraction()).isEqualTo(0.13f);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+        assertThat(tracker0.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker1 = trackers.get(1);
         assertThat(tracker1.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
+        assertThat(tracker1.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker2 = trackers.get(2);
         assertThat(tracker2.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker2.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
+        assertThat(tracker2.getContent()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
 
         VastFractionalProgressTracker tracker3 = trackers.get(3);
         assertThat(tracker3.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker3.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
+        assertThat(tracker3.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker4 = trackers.get(4);
         assertThat(tracker4.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker4.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
+        assertThat(tracker4.getContent()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
 
         VastFractionalProgressTracker tracker5 = trackers.get(5);
         assertThat(tracker5.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker5.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
+        assertThat(tracker5.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker6 = trackers.get(6);
         assertThat(tracker6.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker6.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
+        assertThat(tracker6.getContent()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
index af013817..9053b737 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
@@ -21,6 +21,7 @@
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.GpsHelper;
 import com.mopub.common.GpsHelperTest;
+import com.mopub.common.LocationService;
 import com.mopub.common.MoPub;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Reflection.MethodBuilder;
@@ -127,6 +128,8 @@ public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
         shadowTelephonyManager = (MoPubShadowTelephonyManager) Shadows.shadowOf((TelephonyManager) RuntimeEnvironment.application.getSystemService(Context.TELEPHONY_SERVICE));
         shadowConnectivityManager = Shadows.shadowOf((ConnectivityManager) RuntimeEnvironment.application.getSystemService(Context.CONNECTIVITY_SERVICE));
         methodBuilder = TestMethodBuilderFactory.getSingletonMock();
+
+        LocationService.clearLastKnownLocation();
     }
 
     @After
@@ -729,11 +732,12 @@ public String build() {
                     paramIfNotEmpty("iso", countryIso) +
                     paramIfNotEmpty("cn", carrierName) +
                     "&ct=" + networkType +
-                    "&av=" + BuildConfig.VERSION_NAME +
+                    "&av=" + Uri.encode(BuildConfig.VERSION_NAME) +
                     "&udid=" + PlayServicesUrlRewriter.UDID_TEMPLATE +
                     "&dnt=" + PlayServicesUrlRewriter.DO_NOT_TRACK_TEMPLATE +
                     "&mr=1" +
-                    "&android_perms_ext_storage=" + externalStoragePermission;
+                    "&android_perms_ext_storage=" + externalStoragePermission +
+                    "&vv=3";
         }
 
         public AdUrlBuilder withAdUnitId(String adUnitId) {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java
new file mode 100644
index 00000000..02e3b6d9
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java
@@ -0,0 +1,138 @@
+package com.mopub.mobileads;
+
+import android.os.Handler;
+
+import com.mopub.common.ExternalViewabilitySessionManager;
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.annotation.Config;
+
+import java.util.Map;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.verifyZeroInteractions;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class WebViewCacheServiceTest {
+
+    @Mock private BaseWebView baseWebView;
+    @Mock private Interstitial interstitial;
+    @Mock private ExternalViewabilitySessionManager viewabilityManager;
+    @Mock private Handler handler;
+    private long broadcastIdentifier;
+
+    @Before
+    public void setUp() throws Exception {
+        WebViewCacheService.clearAll();
+        WebViewCacheService.setHandler(handler);
+        broadcastIdentifier = 12345;
+    }
+
+    @Test
+    public void storeWebView_shouldPopulateMap() {
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, interstitial,
+                baseWebView, viewabilityManager);
+
+        final Map<Long, WebViewCacheService.Config> configs = WebViewCacheService.getWebViewConfigs();
+        assertThat(configs.size()).isEqualTo(1);
+        assertThat(configs.get(broadcastIdentifier).getWebView()).isEqualTo(baseWebView);
+        assertThat(configs.get(broadcastIdentifier).getWeakInterstitial().get()).isEqualTo(interstitial);
+        assertThat(configs.get(broadcastIdentifier).getViewabilityManager()).isEqualTo(viewabilityManager);
+    }
+
+    @Test
+    public void storeWebView_withEmptyCache_shouldNotSetRunnableForTrimCache() {
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, interstitial,
+                baseWebView, viewabilityManager);
+
+        verifyZeroInteractions(handler);
+        final Map<Long, WebViewCacheService.Config> configs = WebViewCacheService.getWebViewConfigs();
+        assertThat(configs.size()).isEqualTo(1);
+        assertThat(configs.get(broadcastIdentifier).getWebView()).isEqualTo(baseWebView);
+        assertThat(configs.get(broadcastIdentifier).getWeakInterstitial().get()).isEqualTo(interstitial);
+        assertThat(configs.get(broadcastIdentifier).getViewabilityManager()).isEqualTo(viewabilityManager);
+    }
+
+    @Test
+    public void storeWebView_withNonEmptyCache_shouldSetRunnableForTrimCache() {
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, interstitial,
+                baseWebView, viewabilityManager);
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier + 1, interstitial,
+                baseWebView, viewabilityManager);
+
+        verify(handler).removeCallbacks(WebViewCacheService.sTrimCacheRunnable);
+        verify(handler).postDelayed(WebViewCacheService.sTrimCacheRunnable,
+                WebViewCacheService.TRIM_CACHE_FREQUENCY_MILLIS);
+        verifyNoMoreInteractions(handler);
+    }
+
+    @Test
+    public void storeWebView_withMaxSizeReached_shouldTrimCache_shouldIgnoreStoreRequest() {
+        for(int i = 0; i < WebViewCacheService.MAX_SIZE; i++) {
+            WebViewCacheService.storeWebViewConfig(broadcastIdentifier + i, interstitial,
+                    baseWebView, viewabilityManager);
+        }
+        final Map<Long, WebViewCacheService.Config> configs = WebViewCacheService.getWebViewConfigs();
+        assertThat(configs.size()).isEqualTo(WebViewCacheService.MAX_SIZE);
+
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier - 1, interstitial, baseWebView,
+                viewabilityManager);
+
+        // This is called MAX_SIZE - 1 times since trim() is not called on the first run due to
+        // the maps being empty. And then this is called an additional time to test the one
+        // after MAX_SIZE is reached.
+        verify(handler, times(WebViewCacheService.MAX_SIZE)).removeCallbacks(
+                WebViewCacheService.sTrimCacheRunnable);
+        verify(handler, times(WebViewCacheService.MAX_SIZE)).postDelayed(
+                WebViewCacheService.sTrimCacheRunnable,
+                WebViewCacheService.TRIM_CACHE_FREQUENCY_MILLIS);
+
+        assertThat(configs.size()).isEqualTo(WebViewCacheService.MAX_SIZE);
+        assertThat(configs.get(broadcastIdentifier-1)).isNull();
+    }
+
+    @Test
+    public void popWebView_shouldReturnWebView_shouldRemoveMappings() {
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, interstitial,
+                baseWebView, viewabilityManager);
+
+        final WebViewCacheService.Config result = WebViewCacheService.popWebViewConfig(broadcastIdentifier);
+
+        assertThat(WebViewCacheService.getWebViewConfigs()).isEmpty();
+        assertThat(result.getWebView()).isEqualTo(baseWebView);
+        assertThat(result.getWeakInterstitial().get()).isEqualTo(interstitial);
+        assertThat(result.getViewabilityManager()).isEqualTo(viewabilityManager);
+    }
+
+    @Test
+    public void trimCache_shouldRemoveStaleWebViews() {
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, interstitial,
+                baseWebView, viewabilityManager);
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier + 1, mock(ResponseBodyInterstitial.class),
+                baseWebView, viewabilityManager);
+
+        final Map<Long, WebViewCacheService.Config> configs = WebViewCacheService.getWebViewConfigs();
+        // This clears the WeakReference, which allows the cache to remove the WebView associated
+        // with that interstitial.
+        configs.get(broadcastIdentifier + 1).getWeakInterstitial().clear();
+
+        WebViewCacheService.trimCache();
+
+        final Map<Long, WebViewCacheService.Config> configsResult = WebViewCacheService.getWebViewConfigs();
+
+        assertThat(configsResult.size()).isEqualTo(1);
+        assertThat(configs.get(broadcastIdentifier).getWebView()).isEqualTo(baseWebView);
+        assertThat(configs.get(broadcastIdentifier).getWeakInterstitial().get()).isEqualTo(interstitial);
+        assertThat(configs.get(broadcastIdentifier).getViewabilityManager()).isEqualTo(viewabilityManager);
+        assertThat(configsResult.get(broadcastIdentifier + 1)).isNull();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java
index 65eb1f81..088d6f22 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java
@@ -33,7 +33,7 @@ public static Node createNode(String xml) throws Exception {
     public static List<String> vastTrackersToStrings(List<VastTracker> vastTrackers) {
         List<String> strings = new ArrayList<String>(vastTrackers.size());
         for (VastTracker vastTracker : vastTrackers) {
-            strings.add(vastTracker.getTrackingUrl());
+            strings.add(vastTracker.getContent());
         }
         return strings;
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java
index 08372f7f..4bb1343d 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java
@@ -1,7 +1,5 @@
 package com.mopub.mobileads.util;
 
-import android.annotation.TargetApi;
-import android.os.Build;
 import android.webkit.WebView;
 
 import com.mopub.common.test.support.SdkTestRunner;
@@ -19,7 +17,6 @@
 @Config(constants = BuildConfig.class)
 public class WebViewsTest {
 
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
     @Test
     public void pause_withIsFinishingTrue_shouldStopLoading_shouldLoadBlankUrl_shouldPauseWebView() throws Exception {
         WebView mockWebView = mock(WebView.class);
@@ -31,7 +28,6 @@ public void pause_withIsFinishingTrue_shouldStopLoading_shouldLoadBlankUrl_shoul
         verify(mockWebView).onPause();
     }
 
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
     @Test
     public void pause_withIsFinishingFalse_shouldPauseWebView() throws Exception {
         WebView mockWebView = mock(WebView.class);
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
index 7a3ba220..ff0c47be 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
@@ -110,6 +110,16 @@ public void bannerMraidListener_onClose_shouldNotifyBannerCollapsed() {
         verify(mockBannerListener).onBannerCollapsed();
     }
 
+    @Test
+    public void trackMpxAndThirdPartyImpressions_shouldFireJavascriptWebViewDidAppear() {
+        MraidListener mraidListener = captureMraidListener();
+        mraidListener.onLoaded(null);
+        verify(mockBannerListener).onBannerLoaded(any(View.class));
+
+        subject.trackMpxAndThirdPartyImpressions();
+        verify(mockMraidController).loadJavascript(eq("webviewDidAppear();"));
+    }
+
     private MraidListener captureMraidListener() {
         subject.loadBanner(context, mockBannerListener, localExtras, serverExtras);
         ArgumentCaptor<MraidListener> listenerCaptor = ArgumentCaptor.forClass(MraidListener.class);
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
index 03d09d1a..fdc71bda 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
@@ -93,7 +93,6 @@ public void attachView_atLeastJellyBeanMr1_withInline_shouldNotAutoPlayVideo() {
         verify(mockWebSettings, never()).setMediaPlaybackRequiresUserGesture(anyBoolean());
     }
 
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
     @Config(sdk = Build.VERSION_CODES.JELLY_BEAN)
     @Test
     public void attachView_belowJellyBeanMr1_withInterstitial_shouldNotAutoPlayVideo() {
@@ -107,7 +106,6 @@ public void attachView_belowJellyBeanMr1_withInterstitial_shouldNotAutoPlayVideo
         verifyNoMoreInteractions(mockWebSettings);
     }
 
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
     @Config(sdk = Build.VERSION_CODES.JELLY_BEAN)
     @Test
     public void attachView_belowJellyBeanMr1_withInline_shouldNotAutoPlayVideo() {
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
index 4d79a2e2..f439272b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
@@ -7,18 +7,19 @@
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
 import android.net.Uri;
-import android.os.Build;
 import android.view.View;
 import android.widget.FrameLayout;
 
-import com.mopub.TestSdkHelper;
 import com.mopub.common.AdReport;
 import com.mopub.common.CloseableLayout.ClosePosition;
+import com.mopub.common.ExternalViewabilitySessionManager;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Utils;
 import com.mopub.mobileads.BaseVideoPlayerActivityTest;
 import com.mopub.mobileads.BuildConfig;
+import com.mopub.mobileads.Interstitial;
 import com.mopub.mobileads.MraidVideoPlayerActivity;
+import com.mopub.mobileads.WebViewCacheService;
 import com.mopub.mraid.MraidBridge.MraidBridgeListener;
 import com.mopub.mraid.MraidBridge.MraidWebView;
 import com.mopub.mraid.MraidController.MraidListener;
@@ -69,6 +70,8 @@
     @Mock private MraidListener mockMraidListener;
     @Mock private UseCustomCloseListener mockUseCustomCloseListener;
     @Mock private OrientationBroadcastReceiver mockOrientationBroadcastReceiver;
+    @Mock private MraidWebView mockWebView;
+    @Mock private ExternalViewabilitySessionManager mockViewabilityManager;
     @Captor private ArgumentCaptor<MraidBridgeListener> bridgeListenerCaptor;
     @Captor private ArgumentCaptor<MraidBridgeListener> twoPartBridgeListenerCaptor;
 
@@ -80,6 +83,7 @@
     @Before
     public void setUp() {
         ShadowApplication.setDisplayMetricsDensity(1.0f);
+        WebViewCacheService.clearAll();
 
         activity = spy(Robolectric.buildActivity(Activity.class).create().get());
         activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
@@ -106,7 +110,7 @@ public Void answer(final InvocationOnMock invocation) throws Throwable {
         subject.setMraidListener(mockMraidListener);
         subject.setOrientationBroadcastReceiver(mockOrientationBroadcastReceiver);
         subject.setRootView(rootView);
-        subject.loadContent("fake_html_data");
+        subject.fillContent(null, "fake_html_data", null);
 
         verify(mockBridge).setMraidBridgeListener(bridgeListenerCaptor.capture());
         verify(mockTwoPartBridge).setMraidBridgeListener(twoPartBridgeListenerCaptor.capture());
@@ -209,7 +213,7 @@ public void handleResize_shouldThrowExceptionForInterstitial() throws MraidComma
         subject.setRootView(rootView);
 
         // Move to DEFAULT state
-        subject.loadContent("fake_html_data");
+        subject.fillContent(null, "fake_html_data", null);
         subject.handlePageLoad();
 
         subject.handleResize(100, 200, 0, 0, ClosePosition.TOP_RIGHT, true);
@@ -341,7 +345,7 @@ public void handleExpand_shouldBeIgnoredForInterstitial() throws MraidCommandExc
         subject.setRootView(rootView);
 
         // Move to DEFAULT state
-        subject.loadContent("fake_html_data");
+        subject.fillContent(null, "fake_html_data", null);
         subject.handlePageLoad();
 
         subject.handleExpand(null, false);
@@ -559,6 +563,40 @@ public void handleOpen_withAboutBlankUrl_shouldFailSilently() {
         assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
     }
 
+    @Test
+    public void fillContent_withCacheHit_shouldNotLoadHtmlData_shouldCallMraidListenerOnLoaded() {
+        subject = new MraidController(
+                activity, mockAdReport, PlacementType.INLINE,
+                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
+        subject.setMraidListener(mockMraidListener);
+        reset(mockMraidListener, mockBridge);
+        subject.setOrientationBroadcastReceiver(mockOrientationBroadcastReceiver);
+        subject.setRootView(rootView);
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, new Interstitial() {},
+                mockWebView, mockViewabilityManager);
+
+        subject.fillContent(broadcastIdentifier, "fake_html_data", null);
+
+        verify(mockBridge, never()).setContentHtml("fake_html_data");
+        verify(mockMraidListener).onLoaded(subject.getAdContainer());
+    }
+
+    @Test
+    public void fillContent_withCacheMiss_shouldLoadHtmlData() {
+        subject = new MraidController(
+                activity, mockAdReport, PlacementType.INLINE,
+                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
+        subject.setMraidListener(mockMraidListener);
+        reset(mockMraidListener, mockBridge);
+        subject.setOrientationBroadcastReceiver(mockOrientationBroadcastReceiver);
+        subject.setRootView(rootView);
+
+        subject.fillContent(broadcastIdentifier, "fake_html_data", null);
+
+        verify(mockBridge).setContentHtml("fake_html_data");
+        verify(mockMraidListener, never()).onLoaded(any(View.class));
+    }
+
     @Test
     public void orientationBroadcastReceiver_whenUnregistered_shouldIgnoreOnReceive() {
         Intent intent = mock(Intent.class);
@@ -685,31 +723,13 @@ public void handleSetOrientationProperties_withForcedOrientation_withMissingConf
         assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
     }
 
-    @Test
-    public void handleSetOrientationProperties_beforeHoneycombMr2_withMissingConfigChangeScreenSize_shouldUpdateProperties() throws Exception {
+    @Test(expected = MraidCommandException.class)
+    public void handleSetOrientationProperties_withMissingConfigChangeScreenSize_shouldThrowMraidCommandException() throws Exception {
         setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
                 ActivityInfo.CONFIG_ORIENTATION);
-        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.HONEYCOMB_MR1);
 
         subject.handleSetOrientationProperties(false, MraidOrientation.LANDSCAPE);
 
-        assertThat(subject.getAllowOrientationChange()).isFalse();
-        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.LANDSCAPE);
-    }
-
-    @Test
-    public void handleSetOrientationProperties_atLeastHoneycombMr2_withMissingConfigChangeScreenSize_shouldThrowMraidCommandException() throws Exception {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION);
-        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.HONEYCOMB_MR2);
-
-        try {
-            subject.handleSetOrientationProperties(false, MraidOrientation.LANDSCAPE);
-            fail("Expected MraidCommandException");
-        } catch (MraidCommandException e) {
-            // pass
-        }
-
         assertThat(subject.getAllowOrientationChange()).isTrue();
         assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
index e8ee9387..e9d5b008 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
@@ -1,14 +1,12 @@
 package com.mopub.mraid;
 
 import android.Manifest;
-import android.annotation.TargetApi;
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
-import android.os.Build;
 import android.os.Environment;
 import android.provider.CalendarContract;
 import android.support.annotation.NonNull;
@@ -17,7 +15,6 @@
 import android.view.WindowManager;
 import android.widget.LinearLayout;
 
-import com.mopub.TestSdkHelper;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.test.support.ShadowAsyncTasks;
 import com.mopub.common.util.test.support.ShadowMoPubHttpUrlConnection;
@@ -321,9 +318,8 @@ public void downloadImage_withMimeTypeAndFileExtension_shouldSavePictureWithFile
     }
 
     @Ignore("Mraid 2.0")
-    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
-    public void createCalendarEvent_withMinimumValidParams_atLeastICS_shouldCreateEventIntent() throws Exception {
+    public void createCalendarEvent_withMinimumValidParams_shouldCreateEventIntent() throws Exception {
         setupCalendarParams();
 
         subject.createCalendarEvent(context, params);
@@ -339,9 +335,8 @@ public void createCalendarEvent_withMinimumValidParams_atLeastICS_shouldCreateEv
     }
 
     @Ignore("Mraid 2.0")
-    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
-    public void createCalendarEvent_withoutSecondsOnStartDate_atLeastICS_shouldCreateEventIntent() throws Exception {
+    public void createCalendarEvent_withoutSecondsOnStartDate_shouldCreateEventIntent() throws Exception {
         setupCalendarParams();
         params.put("start", "2012-12-21T00:00-0500");
 
@@ -358,7 +353,6 @@ public void createCalendarEvent_withoutSecondsOnStartDate_atLeastICS_shouldCreat
     }
 
     @Ignore("Mraid 2.0")
-    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withDailyRecurrence_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -373,7 +367,6 @@ public void createCalendarEvent_withDailyRecurrence_shouldCreateCalendarIntent()
     }
 
     @Ignore("Mraid 2.0")
-    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withDailyRecurrence_withInterval_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -387,7 +380,6 @@ public void createCalendarEvent_withDailyRecurrence_withInterval_shouldCreateCal
     }
 
     @Ignore("Mraid 2.0")
-    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withWeeklyRecurrence_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -400,7 +392,6 @@ public void createCalendarEvent_withWeeklyRecurrence_shouldCreateCalendarIntent(
     }
 
     @Ignore("Mraid 2.0")
-    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withWeeklyRecurrence_withInterval_withOutWeekday_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -414,7 +405,6 @@ public void createCalendarEvent_withWeeklyRecurrence_withInterval_withOutWeekday
     }
 
     @Ignore("Mraid 2.0")
-    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withWeeklyRecurrence_onAllWeekDays_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -428,7 +418,6 @@ public void createCalendarEvent_withWeeklyRecurrence_onAllWeekDays_shouldCreateC
     }
 
     @Ignore("Mraid 2.0")
-    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withWeeklyRecurrence_onDuplicateWeekDays_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -442,7 +431,6 @@ public void createCalendarEvent_withWeeklyRecurrence_onDuplicateWeekDays_shouldC
     }
 
     @Ignore("Mraid 2.0")
-    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withWeeklyRecurrence_withInterval_withWeekDay_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -457,7 +445,6 @@ public void createCalendarEvent_withWeeklyRecurrence_withInterval_withWeekDay_sh
     }
 
     @Ignore("Mraid 2.0")
-    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withDailyRecurrence_withWeeklyRecurrence_withMonthlyOccurence_shouldCreateDailyCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -474,7 +461,6 @@ public void createCalendarEvent_withDailyRecurrence_withWeeklyRecurrence_withMon
     }
 
     @Ignore("Mraid 2.0")
-    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withMonthlyRecurrence_withOutInterval_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -487,7 +473,6 @@ public void createCalendarEvent_withMonthlyRecurrence_withOutInterval_shouldCrea
     }
 
     @Ignore("Mraid 2.0")
-    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withMonthlyRecurrence_withInterval_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -501,7 +486,6 @@ public void createCalendarEvent_withMonthlyRecurrence_withInterval_shouldCreateC
     }
 
     @Ignore("Mraid 2.0")
-    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withMonthlyRecurrence_withOutInterval_withDaysOfMonth_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -544,15 +528,6 @@ public void createCalendarEvent_withWeeklyRecurrence_withInvalidDaysOfWeek_shoul
         assertThat(ShadowLog.getLogs().size()).isEqualTo(1);
     }
 
-    @Ignore("Mraid 2.0")
-    @Config(sdk = Build.VERSION_CODES.HONEYCOMB_MR2)
-    @Test
-    public void createCalendarEvent_beforeIcs_shouldFireErrorEvent() throws Exception {
-        subject.createCalendarEvent(context, params);
-
-        verify(mockMraidCommandFailureListener).onFailure(any(MraidCommandException.class));
-    }
-
     @Ignore("Mraid 2.0")
     @Test
     public void createCalendarEvent_withInvalidDate_shouldFireErrorEvent() throws Exception {
@@ -587,10 +562,9 @@ public void createCalendarEvent_withNullDate_shouldFireErrorEvent() throws Excep
     }
 
     @Ignore("Mraid 2.0")
-    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void
-    createCalendarEvent_withValidParamsAllExceptRecurrence_atLeastICS_shouldCreateEventIntent() throws Exception {
+    createCalendarEvent_withValidParamsAllExceptRecurrence_shouldCreateEventIntent() throws Exception {
         setupCalendarParams();
         params.put("location", "my house");
         params.put("end", "2013-08-14T22:01:01-0000");
@@ -664,30 +638,20 @@ public void isStorePictureAvailable_whenMediaUnmounted_shouldReturnFalse() throw
     }
 
     @Test
-    public void isCalendarAvailable_atLeastIcs_shouldReturnTrue() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.ICE_CREAM_SANDWICH);
+    public void isCalendarAvailable_shouldReturnTrue() throws Exception {
         context = createMockContextWithSpecificIntentData(null, null, ANDROID_CALENDAR_CONTENT_TYPE, "android.intent.action.INSERT");
         assertThat(subject.isCalendarAvailable(context)).isTrue();
     }
 
     @Test
-    public void isCalendarAvailable_beforeIcs_shouldReturnFalse() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.HONEYCOMB_MR2);
-        context = createMockContextWithSpecificIntentData(null, null, ANDROID_CALENDAR_CONTENT_TYPE, "android.intent.action.INSERT");
-        assertThat(subject.isCalendarAvailable(context)).isFalse();
-    }
-
-    @Test
-    public void isCalendarAvailable_atLeastIcs_butCanNotAcceptIntent_shouldReturnFalse() throws
+    public void isCalendarAvailable_butCanNotAcceptIntent_shouldReturnFalse() throws
             Exception {
-        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.ICE_CREAM_SANDWICH);
         context = createMockContextWithSpecificIntentData(null, null, "vnd.android.cursor.item/NOPE", "android.intent.action.INSERT");
         assertThat(subject.isCalendarAvailable(context)).isFalse();
     }
 
-    @TargetApi(11)
     @Test
-    public void isInlineVideoAvailable_whenViewsAreHardwareAccelerated_whenWindowIsHardwareAccelerated_whenApiLevelIsAtLeastHoneycombMR1_shouldReturnTrue() throws Exception {
+    public void isInlineVideoAvailable_whenViewsAreHardwareAccelerated_whenWindowIsHardwareAccelerated_shouldReturnTrue() throws Exception {
         Activity activity = Robolectric.buildActivity(Activity.class).create().get();
         activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
 
@@ -698,9 +662,8 @@ public void isInlineVideoAvailable_whenViewsAreHardwareAccelerated_whenWindowIsH
         assertThat(subject.isInlineVideoAvailable(activity, mockView)).isTrue();
     }
 
-    @TargetApi(11)
     @Test
-    public void isInlineVideoAvailable_whenViewsAreHardwareAccelerated_whenWindowIsNotHardwareAccelerated_whenApiLevelIsAtLeastHoneycombMR1_shouldReturnFalse() throws Exception {
+    public void isInlineVideoAvailable_whenViewsAreHardwareAccelerated_whenWindowIsNotHardwareAccelerated_shouldReturnFalse() throws Exception {
         Activity activity = Robolectric.buildActivity(Activity.class).create().get();
 
         View mockView = mock(View.class);
@@ -710,24 +673,8 @@ public void isInlineVideoAvailable_whenViewsAreHardwareAccelerated_whenWindowIsN
         assertThat(subject.isInlineVideoAvailable(activity, mockView)).isFalse();
     }
 
-    @TargetApi(11)
-    @Test
-    public void isInlineVideoAvailable_whenViewsAreHardwareAccelerated_whenWindowIsHardwareAccelerated_whenApiLevelIsLessThanHoneycombMR1_shouldReturnFalse() throws Exception {
-        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
-
-        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.HONEYCOMB);
-
-        View mockView = mock(View.class);
-        when(mockView.isHardwareAccelerated()).thenReturn(true);
-        when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);
-
-        assertThat(subject.isInlineVideoAvailable(activity, mockView)).isFalse();
-    }
-
-    @TargetApi(11)
     @Test
-    public void isInlineVideoAvailable_whenViewsAreNotHardwareAccelerated_whenWindowIsHardwareAccelerated_whenApiLevelIsAtLeastHoneycombMR1_shouldReturnFalse() throws Exception {
+    public void isInlineVideoAvailable_whenViewsAreNotHardwareAccelerated_whenWindowIsHardwareAccelerated_shouldReturnFalse() throws Exception {
         Activity activity = Robolectric.buildActivity(Activity.class).create().get();
         activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
 
@@ -738,9 +685,8 @@ public void isInlineVideoAvailable_whenViewsAreNotHardwareAccelerated_whenWindow
         assertThat(subject.isInlineVideoAvailable(activity, mockView)).isFalse();
     }
 
-    @TargetApi(11)
     @Test
-    public void isInlineVideoAvailable_whenViewParentIsNotHardwareAccelerated_whenWindowIsHardwareAccelerated_whenApiLevelIsAtLeastHoneycombMR1_shouldReturnFalse() throws Exception {
+    public void isInlineVideoAvailable_whenViewParentIsNotHardwareAccelerated_whenWindowIsHardwareAccelerated_shouldReturnFalse() throws Exception {
         Activity activity = Robolectric.buildActivity(Activity.class).create().get();
         activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
index b46389de..ba9c96b0 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
@@ -132,10 +132,6 @@ public void onCompletionListener_shouldShowCloseButton() throws Exception {
         assertThat(getCloseButton().getVisibility()).isEqualTo(VISIBLE);
     }
 
-    @Test
-    public void onCompletionListener_withNullBaseVideoViewControllerListener_shouldNotCallOnFinish() throws Exception {
-    }
-
     @Test
     public void onErrorListener_shouldReturnFalseAndNotCallBaseVideoControllerListenerOnFinish() throws Exception {
         initializeSubject();
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidWebViewClientTest.java
new file mode 100644
index 00000000..b69bf424
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidWebViewClientTest.java
@@ -0,0 +1,65 @@
+package com.mopub.mraid;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class MraidWebViewClientTest {
+
+    private MraidWebViewClient subject;
+
+    @Before
+    public void setUp() throws  Exception {
+        subject = new MraidWebViewClient();
+    }
+
+    @Test
+    public void matchesInjectionUrl_withMopubMraidJsUrls_shouldMatch() throws Exception {
+        assertThat(subject.matchesInjectionUrl("http://ads.mopub.com/mraid.js")).isTrue();
+        assertThat(subject.matchesInjectionUrl("https://ads.mopub.com/mraid.js")).isTrue();
+    }
+
+    @Test
+    public void matchesInjectionUrl_withOtherMraidJsUrls_shouldMatch() throws Exception {
+        assertThat(subject.matchesInjectionUrl("http://mraid.iab.net/compliance/mraid.js"))
+                .isTrue();
+        assertThat(subject.matchesInjectionUrl("https://mraid.iab.net/compliance/mraid.js"))
+                .isTrue();
+    }
+
+    @Test
+    public void matchesInjectionUrl_withRelativeMraidJsUrl_shouldMatch() throws Exception {
+        assertThat(subject.matchesInjectionUrl("mraid.js")).isTrue();
+    }
+
+    @Test
+    public void matchesInjectionUrl_withCasedMraidJsUrl_shouldMatch() throws Exception {
+        assertThat(subject.matchesInjectionUrl("mrAid.Js")).isTrue();
+    }
+
+    @Test
+    public void matchesInjectionUrl_withMraidJsUrl_withQueryParams_shouldMatch() throws Exception {
+        assertThat(subject.matchesInjectionUrl("mraid.js?foo=bar")).isTrue();
+    }
+
+    @Test
+    public void matchesInjectionUrl_withoutMraidJs_shouldNotMatch() throws Exception {
+        assertThat(subject.matchesInjectionUrl("mmraid.js")).isFalse();
+        assertThat(subject.matchesInjectionUrl("maid.js")).isFalse();
+        assertThat(subject.matchesInjectionUrl("mraidjs")).isFalse();
+        assertThat(subject.matchesInjectionUrl("mraid.jsS")).isFalse();
+    }
+
+    @Test
+    public void matchesInjectionUrl_withOpaqueUri_shouldNotMatch() throws Exception {
+        assertThat(subject.matchesInjectionUrl("mailto:mraid.js@js.com")).isFalse();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidControllerTest.java
new file mode 100644
index 00000000..e7f52cc2
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidControllerTest.java
@@ -0,0 +1,143 @@
+package com.mopub.mraid;
+
+import android.app.Activity;
+import android.content.Context;
+import android.view.View;
+
+import com.mopub.common.AdReport;
+import com.mopub.common.CloseableLayout;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.mobileads.VastVideoRadialCountdownWidget;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import static com.mopub.mraid.RewardedMraidController.DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_MILLIS;
+import static com.mopub.mraid.RewardedMraidController.MILLIS_IN_SECOND;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class RewardedMraidControllerTest {
+    private Context context;
+    private long testBroadcastIdentifier;
+    private RewardedMraidController subject;
+
+    private static final int REWARDED_DURATION_IN_SECONDS = 25;
+    private static final int SHOW_CLOSE_BUTTON_DELAY = REWARDED_DURATION_IN_SECONDS * MILLIS_IN_SECOND;
+
+    @Mock
+    AdReport mockAdReport;
+
+    @Mock
+    CloseableLayout mockCloseableLayout;
+
+    @Before
+    public void setUp() throws Exception {
+        context = spy(Robolectric.buildActivity(Activity.class).create().get());
+        testBroadcastIdentifier = 1111;
+
+        subject = new RewardedMraidController(context, mockAdReport, PlacementType.INTERSTITIAL,
+                REWARDED_DURATION_IN_SECONDS, testBroadcastIdentifier);
+    }
+
+    @Test
+    public void constructor_shouldInitializeShowCloseButtonDelay() {
+        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(SHOW_CLOSE_BUTTON_DELAY);
+    }
+
+    @Test
+    public void constructor_whenRewardedDurationIsNegative_shouldUseDefaultRewardedDuration() {
+        subject = new RewardedMraidController(context, mockAdReport, PlacementType.INTERSTITIAL, -1,
+                testBroadcastIdentifier);
+
+        assertThat(subject.getShowCloseButtonDelay())
+                .isEqualTo(DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_MILLIS);
+    }
+
+    @Test
+    public void constructor_whenRewardedDurationIsLongerThanDefault_shouldUseDefaultRewardedDuration() {
+        subject = new RewardedMraidController(context, mockAdReport, PlacementType.INTERSTITIAL,
+                DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_MILLIS+1, testBroadcastIdentifier);
+
+        assertThat(subject.getShowCloseButtonDelay())
+                .isEqualTo(DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_MILLIS);
+    }
+
+    @Test
+    public void create_shouldSetCloseableLayoutToInvisible() {
+        subject.create(context, mockCloseableLayout);
+
+        verify(mockCloseableLayout).setCloseVisible(false);
+    }
+
+    @Test
+    public void create_shouldInitializeRadialCountdownWidget() {
+        subject.create(context, mockCloseableLayout);
+        VastVideoRadialCountdownWidget radialCountdownWidget = subject.getRadialCountdownWidget();
+
+        assertThat(subject.isCalibrationDone()).isEqualTo(true);
+        assertThat(radialCountdownWidget.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(radialCountdownWidget.getImageViewDrawable().getInitialCountdownMilliseconds())
+                .isEqualTo(SHOW_CLOSE_BUTTON_DELAY);
+    }
+
+    @Test
+    public void create_shouldInitializeCountdownRunnable() {
+        subject.create(context, mockCloseableLayout);
+
+        assertThat(subject.getCountdownRunnable()).isNotNull();
+    }
+
+    @Test
+    public void pause_shouldStopRunnables() {
+        subject.create(context, mockCloseableLayout);
+        subject.resume();
+        subject.pause();
+
+        assertThat(subject.getCountdownRunnable().isRunning()).isFalse();
+    }
+
+    @Test
+    public void resume_shouldStartRunnables() {
+        subject.create(context, mockCloseableLayout);
+        subject.resume();
+
+        assertThat(subject.getCountdownRunnable().isRunning()).isTrue();
+    }
+
+    @Test
+    public void destroy_shouldStopRunnables() {
+        subject.create(context, mockCloseableLayout);
+        subject.resume();
+        subject.destroy();
+
+        assertThat(subject.getCountdownRunnable().isRunning()).isFalse();
+    }
+
+    @Test
+    public void showPlayableCloseButton_shouldToggleVisibilityStatesAndFireEvents() {
+        subject.create(context, mockCloseableLayout);
+        VastVideoRadialCountdownWidget radialCountdownWidget = subject.getRadialCountdownWidget();
+
+        verify(mockCloseableLayout).setCloseVisible(false);
+        assertThat(radialCountdownWidget.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.isShowCloseButtonEventFired()).isFalse();
+        assertThat(subject.isRewarded()).isFalse();
+
+        subject.resume();
+        subject.showPlayableCloseButton();
+
+        verify(mockCloseableLayout).setCloseVisible(true);
+        assertThat(radialCountdownWidget.getVisibility()).isEqualTo(View.GONE);
+        assertThat(subject.isShowCloseButtonEventFired()).isTrue();
+        assertThat(subject.isRewarded()).isTrue();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidInterstitialTest.java
new file mode 100644
index 00000000..fd400db3
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidInterstitialTest.java
@@ -0,0 +1,159 @@
+package com.mopub.mraid;
+
+import android.app.Activity;
+import android.content.Intent;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.mobileads.ResponseBodyInterstitialTest;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.Shadows;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowActivity;
+import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
+import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.common.DataKeys.REWARDED_AD_DURATION_KEY;
+import static com.mopub.common.DataKeys.SHOULD_REWARD_ON_CLICK_KEY;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.IntentActions.ACTION_REWARDED_PLAYABLE_COMPLETE;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class RewardedMraidInterstitialTest extends ResponseBodyInterstitialTest {
+    private static final String EXPECTED_HTML_DATA = "<html></html>";
+    private static final int EXPECTED_REWARDED_DURATION_SECONDS = 15;
+    private static final Boolean EXPECTED_SHOULD_REWARD_ON_CLICK = true;
+    private long broadcastIdentifier;
+
+    @Mock RewardedMraidInterstitial.RewardedMraidInterstitialListener customEventInterstitialListener;
+
+    private Map<String, Object> localExtras;
+    private Map<String, String> serverExtras;
+    private Activity context;
+
+    @Before
+    public void setUp() throws Exception {
+        broadcastIdentifier = 4321;
+
+        localExtras = new HashMap<String, Object>();
+        serverExtras = new HashMap<String, String>();
+        serverExtras.put(HTML_RESPONSE_BODY_KEY, EXPECTED_HTML_DATA);
+        localExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
+        localExtras.put(REWARDED_AD_DURATION_KEY, EXPECTED_REWARDED_DURATION_SECONDS);
+        localExtras.put(SHOULD_REWARD_ON_CLICK_KEY, EXPECTED_SHOULD_REWARD_ON_CLICK);
+
+        context = Robolectric.buildActivity(Activity.class).create().get();
+
+        subject = new RewardedMraidInterstitial();
+    }
+
+    @Test
+    public void loadInterstitial_withLocalExtras_shouldSetRewardedDuration_shouldSetShouldRewardOnClick() {
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
+                serverExtras);
+
+        assertThat(((RewardedMraidInterstitial) subject).getRewardedDuration()).isEqualTo(
+                EXPECTED_REWARDED_DURATION_SECONDS);
+        assertThat(((RewardedMraidInterstitial) subject).isShouldRewardOnClick()).isEqualTo(
+                EXPECTED_SHOULD_REWARD_ON_CLICK);
+    }
+
+    @Test
+    public void loadInterstitial_withLocalExtrasNotComplete_shouldUseDefaultRewardedDurationAndShouldRewardOnClick() {
+        localExtras.remove(REWARDED_AD_DURATION_KEY);
+        localExtras.remove(SHOULD_REWARD_ON_CLICK_KEY);
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
+                serverExtras);
+
+        assertThat(((RewardedMraidInterstitial) subject).getRewardedDuration()).isEqualTo(
+                RewardedMraidController.DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_SECONDS);
+        assertThat(((RewardedMraidInterstitial) subject).isShouldRewardOnClick()).isEqualTo(
+                RewardedMraidController.DEFAULT_PLAYABLE_SHOULD_REWARD_ON_CLICK);
+
+    }
+
+    @Test
+    public void loadInterstitial_shouldConnectListenerToBroadcastReceiver() throws Exception {
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
+                serverExtras);
+
+        Intent intent =
+                getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
+        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        verify(customEventInterstitialListener).onInterstitialShown();
+
+        intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, broadcastIdentifier);
+        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        verify(customEventInterstitialListener).onInterstitialClicked();
+
+        intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, broadcastIdentifier);
+        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        verify(customEventInterstitialListener).onInterstitialDismissed();
+
+        intent = getIntentForActionAndIdentifier(ACTION_REWARDED_PLAYABLE_COMPLETE,
+                broadcastIdentifier);
+        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        verify(customEventInterstitialListener).onMraidComplete();
+    }
+
+    @Test
+    public void showInterstitial_shouldStartActivityWithIntent() throws Exception {
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
+                serverExtras);
+        subject.showInterstitial();
+
+        ShadowActivity shadowActivity = Shadows.shadowOf(context);
+        Intent intent = shadowActivity.getNextStartedActivityForResult().intent;
+
+        assertThat(intent.getComponent().getClassName())
+                .isEqualTo("com.mopub.mobileads.RewardedMraidActivity");
+        assertThat(intent.getExtras().get(HTML_RESPONSE_BODY_KEY)).isEqualTo(EXPECTED_HTML_DATA);
+        assertThat(intent.getExtras().get(REWARDED_AD_DURATION_KEY)).isEqualTo(
+                EXPECTED_REWARDED_DURATION_SECONDS);
+        assertThat(intent.getExtras().get(SHOULD_REWARD_ON_CLICK_KEY)).isEqualTo(
+                EXPECTED_SHOULD_REWARD_ON_CLICK);
+    }
+
+    @Test
+    public void onInvalidate_shouldDisconnectListenerToBroadcastReceiver() throws Exception {
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
+                serverExtras);
+        subject.onInvalidate();
+
+        Intent intent;
+        intent = new Intent(ACTION_INTERSTITIAL_SHOW);
+        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        verify(customEventInterstitialListener, never()).onInterstitialShown();
+
+        intent = new Intent(ACTION_INTERSTITIAL_DISMISS);
+        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        verify(customEventInterstitialListener, never()).onInterstitialDismissed();
+
+        intent = new Intent(ACTION_REWARDED_PLAYABLE_COMPLETE);
+        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        verify(customEventInterstitialListener, never()).onMraidComplete();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java
index a369b0ef..96f461f3 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java
@@ -4,8 +4,8 @@
 import android.content.Context;
 import android.net.Uri;
 
-import com.google.android.exoplayer.upstream.DataSpec;
-import com.google.android.exoplayer.upstream.HttpDataSource;
+import com.google.android.exoplayer2.upstream.DataSpec;
+import com.google.android.exoplayer2.upstream.HttpDataSource;
 import com.mopub.common.CacheService;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java
index 6df8b430..0a0b0d71 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java
@@ -56,8 +56,10 @@ public void setUp() {
 
         when(impressionInterface.getImpressionMinPercentageViewed()).thenReturn(50);
         when(impressionInterface.getImpressionMinTimeViewed()).thenReturn(1000);
+        when(impressionInterface.getImpressionMinVisiblePx()).thenReturn(null);
         when(impressionInterface2.getImpressionMinPercentageViewed()).thenReturn(50);
         when(impressionInterface2.getImpressionMinTimeViewed()).thenReturn(1000);
+        when(impressionInterface2.getImpressionMinVisiblePx()).thenReturn(null);
 
         // XXX We need this to ensure that our SystemClock starts
         ShadowSystemClock.uptimeMillis();
@@ -70,7 +72,7 @@ public void addView_shouldAddViewToTrackedViews_shouldAddViewToVisibilityTracker
         assertThat(trackedViews).hasSize(1);
         assertThat(trackedViews.get(view)).isEqualTo(impressionInterface);
         verify(visibilityTracker).addView(view, impressionInterface
-                .getImpressionMinPercentageViewed());
+                .getImpressionMinPercentageViewed(), null);
     }
 
     @Test
@@ -81,7 +83,8 @@ public void addView_withRecordedImpression_shouldNotAddView() {
 
         assertThat(trackedViews).hasSize(0);
         verify(visibilityTracker, never())
-                .addView(view, impressionInterface.getImpressionMinPercentageViewed());
+                .addView(view, impressionInterface.getImpressionMinPercentageViewed(),
+                        null);
     }
 
     @Test
@@ -90,7 +93,8 @@ public void addView_withDifferentImpressionInterface_shouldRemoveFromPollingView
 
         assertThat(trackedViews).hasSize(1);
         assertThat(trackedViews.get(view)).isEqualTo(impressionInterface);
-        verify(visibilityTracker).addView(view, impressionInterface.getImpressionMinPercentageViewed());
+        verify(visibilityTracker).addView(view,
+                impressionInterface.getImpressionMinPercentageViewed(), null);
 
         pollingViews.put(view, timeStampWrapper);
 
@@ -100,7 +104,7 @@ public void addView_withDifferentImpressionInterface_shouldRemoveFromPollingView
         assertThat(trackedViews.get(view)).isEqualTo(impressionInterface2);
         assertThat(pollingViews).isEmpty();
         verify(visibilityTracker, times(2))
-                .addView(view, impressionInterface.getImpressionMinPercentageViewed());
+                .addView(view, impressionInterface.getImpressionMinPercentageViewed(), null);
     }
 
     @Test
@@ -111,7 +115,8 @@ public void addView_withDifferentAlreadyImpressedImpressionInterface_shouldRemov
 
         assertThat(trackedViews).hasSize(1);
         assertThat(trackedViews.get(view)).isEqualTo(impressionInterface);
-        verify(visibilityTracker).addView(view, impressionInterface.getImpressionMinPercentageViewed());
+        verify(visibilityTracker).addView(view,
+                impressionInterface.getImpressionMinPercentageViewed(), null);
 
         pollingViews.put(view, timeStampWrapper);
 
@@ -120,7 +125,8 @@ public void addView_withDifferentAlreadyImpressedImpressionInterface_shouldRemov
         assertThat(trackedViews).hasSize(0);
         assertThat(trackedViews.get(view)).isNull();
         assertThat(pollingViews).isEmpty();
-        verify(visibilityTracker).addView(view, impressionInterface.getImpressionMinPercentageViewed());
+        verify(visibilityTracker).addView(view,
+                impressionInterface.getImpressionMinPercentageViewed(), null);
     }
 
     @Test
@@ -129,7 +135,8 @@ public void addView_withSameImpressionInterface_shouldNotAddView() {
 
         assertThat(trackedViews).hasSize(1);
         assertThat(trackedViews.get(view)).isEqualTo(impressionInterface);
-        verify(visibilityTracker).addView(view, impressionInterface.getImpressionMinPercentageViewed());
+        verify(visibilityTracker).addView(view,
+                impressionInterface.getImpressionMinPercentageViewed(), null);
 
         pollingViews.put(view, timeStampWrapper);
 
@@ -140,14 +147,16 @@ public void addView_withSameImpressionInterface_shouldNotAddView() {
         assertThat(pollingViews.keySet()).containsOnly(view);
 
         // Still only one call
-        verify(visibilityTracker).addView(view, impressionInterface.getImpressionMinPercentageViewed());
+        verify(visibilityTracker).addView(view,
+                impressionInterface.getImpressionMinPercentageViewed(), null);
     }
 
     @Test
     public void removeView_shouldRemoveViewFromViewTrackedViews_shouldRemoveViewFromPollingMap_shouldRemoveViewFromVisibilityTracker() {
         trackedViews.put(view, impressionInterface);
         pollingViews.put(view, new TimestampWrapper<ImpressionInterface>(impressionInterface));
-        visibilityTracker.addView(view, impressionInterface.getImpressionMinPercentageViewed());
+        visibilityTracker.addView(view,
+                impressionInterface.getImpressionMinPercentageViewed(), null);
 
         subject.removeView(view);
 
@@ -162,8 +171,10 @@ public void clear_shouldClearViewTrackedViews_shouldClearPollingViews_shouldClea
         trackedViews.put(view2, impressionInterface);
         pollingViews.put(view, timeStampWrapper);
         pollingViews.put(view2, timeStampWrapper);
-        visibilityTracker.addView(view, impressionInterface.getImpressionMinPercentageViewed());
-        visibilityTracker.addView(view2, impressionInterface.getImpressionMinPercentageViewed());
+        visibilityTracker.addView(view,
+                impressionInterface.getImpressionMinPercentageViewed(), null);
+        visibilityTracker.addView(view2,
+                impressionInterface.getImpressionMinPercentageViewed(), null);
 
         subject.clear();
 
@@ -179,8 +190,10 @@ public void destroy_shouldCallClear_shouldDestroyVisibilityTracker_shouldSetVisi
         trackedViews.put(view2, impressionInterface);
         pollingViews.put(view, timeStampWrapper);
         pollingViews.put(view2, timeStampWrapper);
-        visibilityTracker.addView(view, impressionInterface.getImpressionMinPercentageViewed());
-        visibilityTracker.addView(view2, impressionInterface.getImpressionMinPercentageViewed());
+        visibilityTracker.addView(view,
+                impressionInterface.getImpressionMinPercentageViewed(), null);
+        visibilityTracker.addView(view2,
+                impressionInterface.getImpressionMinPercentageViewed(), null);
         assertThat(subject.getVisibilityTrackerListener()).isNotNull();
 
         subject.destroy();
@@ -293,4 +306,4 @@ public void pollingRunnableRun_whenImpressionInterfaceIsNull_shouldThrowNPE() {
 
         verify(impressionInterface, never()).recordImpression(view);
     }
-}
\ No newline at end of file
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
index 7e91e7db..669006f8 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
@@ -18,6 +18,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
+import org.mockito.Matchers;
 import org.mockito.Mock;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
@@ -331,7 +332,8 @@ public void getView_withAdPosition_shouldReturnAdView_shouldTrackVisibility() {
 
         assertThat(view).isEqualTo(mockAdView);
 
-        verify(mockVisibilityTracker).addView(eq(mockAdView), anyInt());
+        verify(mockVisibilityTracker).addView(eq(mockAdView), anyInt(),
+                Matchers.isNull(Integer.class));
     }
 
     @Test
@@ -340,7 +342,8 @@ public void getView_withNonAdPosition_shouldOriginalAdapterView_shouldTrackVisib
 
         assertThat(view).isNotEqualTo(mockAdView);
 
-        verify(mockVisibilityTracker).addView(any(View.class), anyInt());
+        verify(mockVisibilityTracker).addView(any(View.class), anyInt(),
+                Matchers.isNull(Integer.class));
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java
index 535d0992..df3fb4de 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java
@@ -1,8 +1,6 @@
 package com.mopub.nativeads;
 
-import android.annotation.TargetApi;
 import android.app.Activity;
-import android.os.Build;
 
 import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
@@ -31,7 +29,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 
-@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class MoPubCustomEventVideoNativeTest {
@@ -65,6 +62,21 @@ public void setUp() throws Exception {
         serverExtras.put("Impression-Min-Visible-Percent", "15");
         serverExtras.put("Impression-Visible-Ms", "100");
         serverExtras.put("Max-Buffer-Ms", "20");
+        serverExtras.put("Video-Trackers", "{" +
+                "urls: [" +
+                    "\"http://mopub.com/%%VIDEO_EVENT%%/foo\"," +
+                    "\"http://mopub.com/%%VIDEO_EVENT%%/bar\"" +
+                "]," +
+                "events: [" +
+                    "\"start\"," +
+                    "\"firstQuartile\"," +
+                    "\"midpoint\"," +
+                    "\"thirdQuartile\"," +
+                    "\"complete\"," +
+                    "\"companionAdView\"," +
+                    "\"companionAdClick\"" +
+                "]" +
+            "}");
 
     }
 
@@ -149,7 +161,30 @@ public void VideoResponseHeaders_constructor_withValidNumberString_shouldInitial
     }
 
     @Test
-    public void VideoResponseHeaders_constructor_withInvalidNumberString_shouldSetHeadersAreValidToFalse() {
+    public void VideoResponseHeaders_constructor_withValidJson_shouldSetVideoTrackersToJsonObject() throws Exception {
+        VideoResponseHeaders videoResponseHeaders = new VideoResponseHeaders(serverExtras);
+        JSONObject expectedVideoTrackers = new JSONObject("{" +
+                "urls: [" +
+                    "\"http://mopub.com/%%VIDEO_EVENT%%/foo\"," +
+                    "\"http://mopub.com/%%VIDEO_EVENT%%/bar\"" +
+                "]," +
+                "events: [" +
+                    "\"start\"," +
+                    "\"firstQuartile\"," +
+                    "\"midpoint\"," +
+                    "\"thirdQuartile\"," +
+                    "\"complete\"," +
+                    "\"companionAdView\"," +
+                    "\"companionAdClick\"" +
+                "]" +
+            "}");
+
+        assertThat(videoResponseHeaders.getVideoTrackers().toString())
+                .isEqualTo(expectedVideoTrackers.toString());
+    }
+
+    @Test
+    public void VideoResponseHeaders_constructor_withInvalidNumberString_withInvalidJson_shouldSetHeadersAreValidToFalse() {
         serverExtras.put("Play-Visible-Percent", "not_a_number");
         VideoResponseHeaders videoResponseHeaders = new VideoResponseHeaders(serverExtras);
         assertThat(videoResponseHeaders.hasValidHeaders()).isFalse();
@@ -178,4 +213,12 @@ public void VideoResponseHeaders_constructor_withInvalidNumberString_shouldSetHe
         videoResponseHeaders = new VideoResponseHeaders(serverExtras);
         assertThat(videoResponseHeaders.hasValidHeaders()).isTrue();
     }
+
+    @Test
+    public void VideoResponseHeaders_constructor_withInvalidJson_shouldSetVideoTrackersToNull() throws Exception {
+        serverExtras.put("Video-Trackers", "not_a_json_object");
+        VideoResponseHeaders videoResponseHeaders = new VideoResponseHeaders(serverExtras);
+
+        assertThat(videoResponseHeaders.getVideoTrackers()).isNull();
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
index 63b43fc0..eb145575 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
@@ -18,7 +18,6 @@
 import com.mopub.volley.toolbox.ImageLoader;
 
 import org.json.JSONArray;
-import org.json.JSONException;
 import org.json.JSONObject;
 import org.junit.Before;
 import org.junit.Test;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
index f3cd7f58..f373be7b 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
@@ -8,7 +7,6 @@
 import android.graphics.SurfaceTexture;
 import android.graphics.drawable.Drawable;
 import android.media.AudioManager;
-import android.os.Build;
 import android.view.TextureView;
 import android.view.TextureView.SurfaceTextureListener;
 import android.view.View;
@@ -42,6 +40,7 @@
 import org.json.JSONObject;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
@@ -72,7 +71,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class MoPubVideoNativeAdTest {
@@ -127,6 +125,12 @@ public void setUp() throws Exception {
         when(mockVastVideoConfig.getVideoViewabilityTracker())
                 .thenReturn(new VideoViewabilityTracker(98, 76, "viewabilityTracker"));
 
+        List<VastTracker> vastTrackers = new ArrayList<VastTracker>();
+        vastTrackers.add(new VastTracker("vastimpression1"));
+        vastTrackers.add(new VastTracker("vastimpression2"));
+
+        when(mockVastVideoConfig.getImpressionTrackers()).thenReturn(vastTrackers);
+
         subject = new MoPubVideoNativeAd(
                 activity, jsonObject, mockCustomEventNativeListener, videoResponseHeaders,
                 mockVisibilityTracker, mockNativeVideoControllerFactory, null,
@@ -238,14 +242,24 @@ public void onVastVideoConfigurationPrepared_shouldConstructNativeVideoControlle
         assertThat(visibilityTrackingEvents.get(0).totalRequiredPlayTimeMs).isEqualTo(100);
 
         assertThat(visibilityTrackingEvents.get(1).strategy).isInstanceOf(PayloadVisibilityStrategy.class);
-        assertThat(visibilityTrackingEvents.get(1).minimumPercentageVisible).isEqualTo(76);
-        assertThat(visibilityTrackingEvents.get(1).totalRequiredPlayTimeMs).isEqualTo(98);
+        assertThat(visibilityTrackingEvents.get(1).minimumPercentageVisible).isEqualTo(15);
+        assertThat(visibilityTrackingEvents.get(1).totalRequiredPlayTimeMs).isEqualTo(100);
+
+        assertThat(visibilityTrackingEvents.get(2).strategy).isInstanceOf(PayloadVisibilityStrategy.class);
+        assertThat(visibilityTrackingEvents.get(2).minimumPercentageVisible).isEqualTo(15);
+        assertThat(visibilityTrackingEvents.get(2).totalRequiredPlayTimeMs).isEqualTo(100);
 
+        assertThat(visibilityTrackingEvents.get(3).strategy).isInstanceOf(PayloadVisibilityStrategy.class);
+        assertThat(visibilityTrackingEvents.get(3).minimumPercentageVisible).isEqualTo(76);
+        assertThat(visibilityTrackingEvents.get(3).totalRequiredPlayTimeMs).isEqualTo(98);
+
+        verify(mockVastVideoConfig).getImpressionTrackers();
         verify(mockVastVideoConfig).addClickTrackers(any(List.class));
         verify(mockVastVideoConfig).setClickThroughUrl("clk");
         verify(mockCustomEventNativeListener).onNativeAdLoaded(subject);
     }
 
+    @Ignore("This test is broken")
     @SuppressWarnings("unchecked")
     @Test
     public void onVastVideoConfigurationPrepared_shouldMergeHeaderAndJsonClickTrackers() {
@@ -259,9 +273,9 @@ public void onVastVideoConfigurationPrepared_shouldMergeHeaderAndJsonClickTracke
         assertThat(actualClickTrackers.size()).isEqualTo(2);
         final VastTracker headerClickTracker = actualClickTrackers.get(0);
         final VastTracker jsonClickTracker = actualClickTrackers.get(1);
-        assertThat(headerClickTracker.getTrackingUrl()).isEqualTo("header click tracker");
+        assertThat(headerClickTracker.getContent()).isEqualTo("header click tracker");
         assertThat(headerClickTracker.isRepeatable()).isFalse();
-        assertThat(jsonClickTracker.getTrackingUrl()).isEqualTo("json click tracker");
+        assertThat(jsonClickTracker.getContent()).isEqualTo("json click tracker");
         assertThat(jsonClickTracker.isRepeatable()).isFalse();
     }
 
@@ -279,10 +293,11 @@ public void onVastVideoConfigurationPrepared_shouldDedupeHeaderAndJsonClickTrack
         final List<VastTracker> actualClickTrackers = (List<VastTracker>) argumentCaptor.getValue();
         assertThat(actualClickTrackers.size()).isEqualTo(1);
         final VastTracker clickTracker = actualClickTrackers.get(0);
-        assertThat(clickTracker.getTrackingUrl()).isEqualTo("header click tracker");
+        assertThat(clickTracker.getContent()).isEqualTo("header click tracker");
         assertThat(clickTracker.isRepeatable()).isFalse();
     }
 
+    @Ignore("This test is broken")
     @SuppressWarnings("unchecked")
     @Test
     public void onVastVideoConfigurationPrepared_shouldAcceptJsonArrayClickTrackers() throws Exception {
@@ -300,14 +315,15 @@ public void onVastVideoConfigurationPrepared_shouldAcceptJsonArrayClickTrackers(
         final VastTracker jsonClickTracker1 = actualClickTrackers.get(0);
         final VastTracker jsonClickTracker2 = actualClickTrackers.get(1);
         final VastTracker headerClickTracker = actualClickTrackers.get(2);
-        assertThat(jsonClickTracker1.getTrackingUrl()).isEqualTo("json click tracker 1");
+        assertThat(jsonClickTracker1.getContent()).isEqualTo("json click tracker 1");
         assertThat(jsonClickTracker1.isRepeatable()).isFalse();
-        assertThat(jsonClickTracker2.getTrackingUrl()).isEqualTo("json click tracker 2");
+        assertThat(jsonClickTracker2.getContent()).isEqualTo("json click tracker 2");
         assertThat(jsonClickTracker2.isRepeatable()).isFalse();
-        assertThat(headerClickTracker.getTrackingUrl()).isEqualTo("header click tracker");
+        assertThat(headerClickTracker.getContent()).isEqualTo("header click tracker");
         assertThat(headerClickTracker.isRepeatable()).isFalse();
     }
 
+    @Ignore("This test is broken")
     @SuppressWarnings("unchecked")
     @Test
     public void onVastVideoConfigurationPrepared_shouldDedupeJsonArrayClickTrackers() throws Exception {
@@ -324,9 +340,9 @@ public void onVastVideoConfigurationPrepared_shouldDedupeJsonArrayClickTrackers(
         assertThat(actualClickTrackers.size()).isEqualTo(2);
         final VastTracker headerClickTracker = actualClickTrackers.get(0);
         final VastTracker jsonClickTracker = actualClickTrackers.get(1);
-        assertThat(headerClickTracker.getTrackingUrl()).isEqualTo("header click tracker");
+        assertThat(headerClickTracker.getContent()).isEqualTo("header click tracker");
         assertThat(headerClickTracker.isRepeatable()).isFalse();
-        assertThat(jsonClickTracker.getTrackingUrl()).isEqualTo("json click tracker");
+        assertThat(jsonClickTracker.getContent()).isEqualTo("json click tracker");
         assertThat(jsonClickTracker.isRepeatable()).isFalse();
     }
 
@@ -337,7 +353,7 @@ public void render_shouldAddViewToVisibilityTracker() {
         subject.prepare(mockRootView);
         subject.render(mockMediaLayout);
 
-        verify(mockVisibilityTracker).addView(mockRootView, mockMediaLayout, 10, 5);
+        verify(mockVisibilityTracker).addView(mockRootView, mockMediaLayout, 10, 5, null);
     }
 
     @Test
@@ -616,9 +632,6 @@ public void onStateChanged_shouldAppropriatelySetVideoState() {
         subject.prepare(mockRootView);
         subject.render(mockMediaLayout);
 
-        subject.onStateChanged(true, NativeVideoController.STATE_PREPARING);
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.LOADING);
-
         subject.onStateChanged(true, NativeVideoController.STATE_IDLE);
         assertThat(subject.getVideoState()).isEqualTo(VideoState.LOADING);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
index 6946d3af..413ef327 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
@@ -188,7 +188,7 @@ public void dequeueAd_withStaleAd_shouldReturnNativeAd() {
 
         TimestampWrapper<NativeAd> timestampWrapper = new TimestampWrapper<NativeAd>(
                 mMockNativeAd);
-        timestampWrapper.mCreatedTimestamp = SystemClock.uptimeMillis() - (15*60*1000+1);
+        timestampWrapper.mCreatedTimestamp = SystemClock.uptimeMillis() - (4*60*60*1000+1);
         nativeAdCache.add(timestampWrapper);
 
         assertThat(subject.dequeueAd()).isNull();
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
index 62b74958..4404ab8c 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
@@ -25,7 +25,6 @@
     private Activity activity;
     @Mock private View mockView;
     @Mock private ViewGroup mockViewGroup;
-    @Mock private ViewBinder mockViewBinder;
     @Mock private NativeAd mMockNativeAd1;
     @Mock private NativeAd mMockNativeAd2;
 
@@ -42,8 +41,7 @@ public void setUp() throws Exception {
 
     @Test
     public void getAdView_shouldRenderView() throws Exception {
-        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1,
-                mockViewBinder);
+        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1);
 
         verify(mMockNativeAd1).createAdView(activity, mockViewGroup);
         verify(mMockNativeAd1).renderAdView(mockView);
@@ -53,8 +51,7 @@ public void getAdView_shouldRenderView() throws Exception {
     public void getAdView_withDestroyedNativeAd_shouldReturnEmptyAndGoneConvertView() throws Exception {
         when(mMockNativeAd1.isDestroyed()).thenReturn(true);
 
-        View view = NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1,
-                mockViewBinder);
+        View view = NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1);
 
         assertThat(view).isNotEqualTo(mockView);
         assertThat(view.getTag()).isEqualTo(NativeAdViewHelper.ViewType.EMPTY);
@@ -63,24 +60,20 @@ public void getAdView_withDestroyedNativeAd_shouldReturnEmptyAndGoneConvertView(
 
     @Test
     public void getAdView_shouldClearPreviousNativeAd() throws Exception {
-        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1,
-                mockViewBinder);
+        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1);
 
         // Second call should clear the first NativeAd
-        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd2,
-                mockViewBinder);
+        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd2);
         verify(mMockNativeAd1).clear(mockView);
 
         // Third call should clear the second NativeAd
-        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1,
-                mockViewBinder);
+        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1);
         verify(mMockNativeAd2).clear(mockView);
     }
 
     @Test
     public void getAdView_shouldPrepareNativeAd() throws Exception {
-        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1,
-                mockViewBinder);
+        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1);
 
         verify(mMockNativeAd1).prepare(mockView);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeClickHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeClickHandlerTest.java
index b1574b84..4de2593b 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeClickHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeClickHandlerTest.java
@@ -1,8 +1,6 @@
 package com.mopub.nativeads;
 
-import android.annotation.TargetApi;
 import android.app.Activity;
-import android.os.Build;
 import android.view.View;
 import android.widget.RelativeLayout;
 import android.widget.TextView;
@@ -56,7 +54,6 @@ public void setUp() {
         relativeLayout2.addView(relativeLayout);
     }
 
-    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
     @Test
     public void setOnClickListener_shouldSetClickListenerOnViewHierarchy() {
         subject.setOnClickListener(relativeLayout2, mockClickInterface);
@@ -70,7 +67,6 @@ public void setOnClickListener_shouldSetClickListenerOnViewHierarchy() {
         verify(mockClickInterface).handleClick(relativeLayout2);
     }
 
-    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
     @Test
     public void clearOnClickListener_shouldClearClickListenerFromViewHierarchy() throws Exception {
         subject.setOnClickListener(relativeLayout2, mockClickInterface);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java
index bb40db82..9b484696 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.Context;
 import android.content.res.Configuration;
@@ -9,7 +8,6 @@
 import android.graphics.RectF;
 import android.graphics.SurfaceTexture;
 import android.graphics.drawable.GradientDrawable;
-import android.os.Build;
 import android.view.TextureView;
 import android.view.View;
 import android.widget.ImageView;
@@ -44,7 +42,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class NativeFullScreenVideoViewTest {
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
index b7f167b6..59be34df 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
@@ -14,6 +14,7 @@
 import android.view.Display;
 import android.view.WindowManager;
 
+import com.mopub.common.LocationService;
 import com.mopub.common.MoPub;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
@@ -92,6 +93,8 @@ public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
             when(spyApplicationContext.getSystemService(Context.WINDOW_SERVICE)).thenReturn(mockWindowManager);
             when(context.getApplicationContext()).thenReturn(spyApplicationContext);
         }
+
+        LocationService.clearLastKnownLocation();
     }
 
     @Test
@@ -301,7 +304,7 @@ public void generateUrlString_withOnlyAdUnitSet_shouldReturnMinimumUrl() {
                         TEST_SCREEN_HEIGHT +
                         "&sc_a=" +
                         TEST_DENSITY +
-                        "&ct=3&av=" + BuildConfig.VERSION_NAME +
+                        "&ct=3&av=" + Uri.encode(BuildConfig.VERSION_NAME) +
                         "&udid=mp_tmpl_advertising_id&dnt=mp_tmpl_do_not_track");
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java
index c31c2167..a3ef9e69 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java
@@ -1,26 +1,32 @@
 package com.mopub.nativeads;
 
-import android.annotation.TargetApi;
 import android.app.Activity;
 import android.graphics.Bitmap;
 import android.graphics.SurfaceTexture;
 import android.graphics.drawable.BitmapDrawable;
 import android.media.AudioManager;
-import android.os.Build;
 import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.Surface;
 import android.view.TextureView;
 
-import com.google.android.exoplayer.ExoPlaybackException;
-import com.google.android.exoplayer.ExoPlayer;
-import com.google.android.exoplayer.MediaCodecAudioTrackRenderer;
-import com.google.android.exoplayer.MediaCodecVideoTrackRenderer;
+import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.ExoPlaybackException;
+import com.google.android.exoplayer2.ExoPlayer;
+import com.google.android.exoplayer2.ExoPlayer.ExoPlayerMessage;
+import com.google.android.exoplayer2.LoadControl;
+import com.google.android.exoplayer2.Renderer;
+import com.google.android.exoplayer2.audio.MediaCodecAudioRenderer;
+import com.google.android.exoplayer2.source.MediaSource;
+import com.google.android.exoplayer2.trackselection.TrackSelector;
+import com.google.android.exoplayer2.video.MediaCodecVideoRenderer;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.VastTracker;
 import com.mopub.mobileads.VastVideoConfig;
-import com.mopub.nativeads.NativeVideoController.ExoPlayerFactory;
 import com.mopub.nativeads.NativeVideoController.Listener;
+import com.mopub.nativeads.NativeVideoController.MoPubExoPlayerFactory;
 import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable;
 import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable.ProgressListener;
 import com.mopub.nativeads.NativeVideoController.VisibilityTrackingEvent;
@@ -32,12 +38,14 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Matchers;
 import org.mockito.Mock;
 import org.mockito.Mockito;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
-import org.robolectric.util.ReflectionHelpers;
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -46,7 +54,6 @@
 import static com.mopub.nativeads.NativeVideoController.STATE_CLEARED;
 import static com.mopub.nativeads.NativeVideoController.STATE_ENDED;
 import static com.mopub.nativeads.NativeVideoController.STATE_IDLE;
-import static com.mopub.nativeads.NativeVideoController.STATE_PREPARING;
 import static com.mopub.nativeads.NativeVideoController.STATE_READY;
 import static com.mopub.nativeads.NativeVideoController.createForId;
 import static com.mopub.nativeads.NativeVideoController.getForId;
@@ -56,14 +63,15 @@
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.argThat;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.atLeast;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
 
-@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class NativeVideoControllerTest {
@@ -85,12 +93,14 @@
     @Mock private VisibilityChecker mockVisibilityChecker;
     @Mock private MoPubRequestQueue mockRequestQueue;
     @Mock private AudioManager mockAudioManager;
+    @Mock private MediaCodecVideoRenderer mockVideoRenderer;
+    @Mock private MediaCodecAudioRenderer mockAudioRenderer;
+    @Mock private TrackSelector mockTrackSelector;
+    @Mock private LoadControl mockLoadControl;
 
     @Before
     public void setUp() {
         activity = Robolectric.buildActivity(Activity.class).create().get();
-        ReflectionHelpers.setStaticField(
-                Build.VERSION.class, "SDK_INT", Build.VERSION_CODES.JELLY_BEAN);
         visibilityTrackingEvents = new ArrayList<VisibilityTrackingEvent>();
 
         VisibilityTrackingEvent visibilityTrackingEvent = new VisibilityTrackingEvent();
@@ -148,10 +158,10 @@ public void execute() {
                 activity,
                 vastVideoConfig,
                 mockNativeVideoProgressRunnable,
-                new ExoPlayerFactory() {
+                new MoPubExoPlayerFactory() {
                     @Override
-                    public ExoPlayer newInstance(int rendererCount, int minBufferMs,
-                            int minRebufferMs) {
+                    public ExoPlayer newInstance(@NonNull final Renderer[] renderers,
+                            @NonNull final TrackSelector trackSelector, @Nullable LoadControl loadControl) {
                         return mockExoPlayer;
                     }
                 },
@@ -224,12 +234,16 @@ public void getPlaybackState_withNonNullExoPlayer_shouldReturnExoPlayerState() {
     @Test
     public void setAudioEnabled_withTrue_shouldSetVolumeOnExoPlayer() {
         subject.prepare(this);
+        reset(mockExoPlayer);
         subject.setAudioEnabled(true);
 
-        verify(mockExoPlayer).sendMessage(
-                any(MediaCodecAudioTrackRenderer.class),
-                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
-                eq(1.0f));
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer).sendMessages(captor.capture());
+
+        ExoPlayerMessage message = captor.getValue();
+        assertThat(message.target).isInstanceOf(MediaCodecAudioRenderer.class);
+        assertThat(message.messageType).isEqualTo(C.MSG_SET_VOLUME);
+        assertThat(message.message).isEqualTo(1.0f);
     }
 
     @Test
@@ -241,10 +255,13 @@ public void setAudioEnabled_withFalse_shouldDisableVolumeOnExoPlayer() {
 
         subject.setAudioEnabled(false);
 
-        verify(mockExoPlayer).sendMessage(
-                any(MediaCodecAudioTrackRenderer.class),
-                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
-                eq(0.0f));
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer).sendMessages(captor.capture());
+
+        ExoPlayerMessage message = captor.getValue();
+        assertThat(message.target).isInstanceOf(MediaCodecAudioRenderer.class);
+        assertThat(message.messageType).isEqualTo(C.MSG_SET_VOLUME);
+        assertThat(message.message).isEqualTo(0.0f);
     }
 
     @Test
@@ -268,25 +285,27 @@ public void setAppAudioEnabled_withFalse_shouldAbandonAudioFocus() throws Except
     public void setAudioVolume_withAudioEnabled_shouldSetExoPlayerVolume() throws Exception {
         subject.prepare(this);
         subject.setAudioEnabled(true);
+        reset(mockExoPlayer);
 
         subject.setAudioVolume(0.3f);
 
-        verify(mockExoPlayer).sendMessage(
-                any(MediaCodecAudioTrackRenderer.class),
-                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
-                eq(0.3f));
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer).sendMessages(captor.capture());
+
+        ExoPlayerMessage message = captor.getValue();
+        assertThat(message.target).isInstanceOf(MediaCodecAudioRenderer.class);
+        assertThat(message.messageType).isEqualTo(C.MSG_SET_VOLUME);
+        assertThat(message.message).isEqualTo(0.3f);
     }
 
     @Test
     public void setAudioVolume_withAudioDisabled_shouldDoNothing() throws Exception {
         subject.prepare(this);
+        reset(mockExoPlayer);
 
         subject.setAudioVolume(0.3f);
 
-        verify(mockExoPlayer, never()).sendMessage(
-                any(MediaCodecAudioTrackRenderer.class),
-                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
-                eq(0.3f));
+        verify(mockExoPlayer, never()).sendMessages(any(ExoPlayerMessage.class));
     }
 
     @Test
@@ -296,10 +315,13 @@ public void setTextureView_shouldSetTextureViewOnVideoProgressRunnable_shouldSet
 
         subject.setTextureView(mockTextureView);
 
-        verify(mockNativeVideoProgressRunnable).setTextureView(mockTextureView);
-        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
-                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE),
-                any(Surface.class));
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer).sendMessages(captor.capture());
+
+        ExoPlayerMessage message = captor.getValue();
+        assertThat(message.target).isInstanceOf(MediaCodecVideoRenderer.class);
+        assertThat(message.messageType).isEqualTo(C.MSG_SET_SURFACE);
+        assertThat(message.message).isInstanceOf(Surface.class);
     }
 
     @Test
@@ -313,8 +335,19 @@ public void prepare_shouldClearExistingPlayer() {
         // This will clear the previous player
         subject.prepare(this);
 
-        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
-                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE), eq(null));
+        // Ensure the first two calls zero out the surface and disable audio
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer, atLeast(2)).sendMessages(captor.capture());
+
+        List<ExoPlayerMessage> messages = captor.getAllValues();
+
+        assertThat(messages.get(0).target).isInstanceOf(MediaCodecVideoRenderer.class);
+        assertThat(messages.get(0).messageType).isEqualTo(C.MSG_SET_SURFACE);
+        assertThat(messages.get(0).message).isNull();
+        assertThat(messages.get(1).target).isInstanceOf(MediaCodecAudioRenderer.class);
+        assertThat(messages.get(1).messageType).isEqualTo(C.MSG_SET_VOLUME);
+        assertThat(messages.get(1).message).isEqualTo(0f);
+
         verify(mockExoPlayer).stop();
         verify(mockExoPlayer).release();
         verify(mockNativeVideoProgressRunnable).stop();
@@ -323,37 +356,42 @@ public void prepare_shouldClearExistingPlayer() {
 
     @Test
     public void prepare_shouldPreparePlayer() {
-        ExoPlayerFactory mockExoPlayerFactory = mock(ExoPlayerFactory.class);
-        when(mockExoPlayerFactory.newInstance(2, 1000, 5000)).thenReturn(mockExoPlayer);
+        MoPubExoPlayerFactory mockMoPubExoPlayerFactory = mock(MoPubExoPlayerFactory.class);
+        when(mockMoPubExoPlayerFactory.newInstance(
+                any(Renderer[].class),
+                any(TrackSelector.class),
+                any(LoadControl.class))
+        ).thenReturn(mockExoPlayer);
         subject = createForId(123,
                 activity,
                 vastVideoConfig,
                 mockNativeVideoProgressRunnable,
-                mockExoPlayerFactory,
+                mockMoPubExoPlayerFactory,
                 null,
                 mockAudioManager);
         subject.prepare(this);
 
-        verify(mockExoPlayerFactory).newInstance(2, 1000, 5000);
+        verify(mockMoPubExoPlayerFactory).newInstance(any(Renderer[].class),
+                any(TrackSelector.class), any(LoadControl.class));
         verify(mockNativeVideoProgressRunnable).setExoPlayer(mockExoPlayer);
         verify(mockNativeVideoProgressRunnable).startRepeating(50);
         verify(mockExoPlayer).addListener(subject);
-        verify(mockExoPlayer).prepare(any(MediaCodecAudioTrackRenderer.class),
-                any(MediaCodecVideoTrackRenderer.class));
+        verify(mockExoPlayer).prepare(any(MediaSource.class));
 
-        // set audio
-        verify(mockExoPlayer).sendMessage(
-                any(MediaCodecAudioTrackRenderer.class),
-                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
-                eq(0.0f));
+        // set audio and surface
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer, times(2)).sendMessages(captor.capture());
+
+        List<ExoPlayerMessage> messages = captor.getAllValues();
+        assertThat(messages.get(0).target).isInstanceOf(MediaCodecAudioRenderer.class);
+        assertThat(messages.get(0).messageType).isEqualTo(C.MSG_SET_VOLUME);
+        assertThat(messages.get(0).message).isEqualTo(0f);
+        assertThat(messages.get(1).target).isInstanceOf(MediaCodecVideoRenderer.class);
+        assertThat(messages.get(1).messageType).isEqualTo(C.MSG_SET_SURFACE);
+        assertThat(messages.get(1).message).isNull();
 
         // play when ready
         verify(mockExoPlayer).setPlayWhenReady(false);
-
-        // set surface
-        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
-                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE),
-                eq(null));
     }
 
     @Test
@@ -369,8 +407,13 @@ public void clear_shouldSetPlayWhenReadyFalse_shouldClearExistingPlayer() {
         verify(mockExoPlayer).setPlayWhenReady(false);
 
         // clear exo player
-        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
-                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE), eq(null));
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer).sendMessages(captor.capture());
+        ExoPlayerMessage message = captor.getValue();
+        assertThat(message.target).isInstanceOf(MediaCodecVideoRenderer.class);
+        assertThat(message.messageType).isEqualTo(C.MSG_SET_SURFACE);
+        assertThat(message.message).isNull();
+
         verify(mockExoPlayer).stop();
         verify(mockExoPlayer).release();
         verify(mockNativeVideoProgressRunnable).setExoPlayer(null);
@@ -385,8 +428,12 @@ public void release_withMatchingOwner_shouldClearExistingPlayer() {
         subject.release(this);
 
         // clear exo player
-        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
-                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE), eq(null));
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer).sendMessages(captor.capture());
+        ExoPlayerMessage message = captor.getValue();
+        assertThat(message.target).isInstanceOf(MediaCodecVideoRenderer.class);
+        assertThat(message.messageType).isEqualTo(C.MSG_SET_SURFACE);
+        assertThat(message.message).isNull();
         verify(mockExoPlayer).stop();
         verify(mockExoPlayer).release();
         verify(mockNativeVideoProgressRunnable).setExoPlayer(null);
@@ -457,7 +504,7 @@ public void getDuration_shouldReturnProgressRunnableDuration() {
 
     @Test
     public void onPlayerError_shouldNotifyListener_shouldRequestProgressRunnableToStop() {
-        ExoPlaybackException exoPlaybackException = new ExoPlaybackException("exception");
+        ExoPlaybackException exoPlaybackException = ExoPlaybackException.createForSource(new IOException(""));
         subject.setListener(mockListener);
         subject.onPlayerError(exoPlaybackException);
 
@@ -471,10 +518,10 @@ public void handleCtaClick_shouldInvokeVastVideoConfigHandleClick() {
                 activity,
                 mockVastVideoConfig,
                 mockNativeVideoProgressRunnable,
-                new ExoPlayerFactory() {
+                new MoPubExoPlayerFactory() {
                     @Override
-                    public ExoPlayer newInstance(int rendererCount, int minBufferMs,
-                            int minRebufferMs) {
+                    public ExoPlayer newInstance(Renderer[] renderers, TrackSelector trackSelector,
+                            LoadControl loadControl) {
                         return mockExoPlayer;
                     }
                 },
@@ -492,8 +539,10 @@ public void NativeVideoProgressRunnable_doWork_shouldTrackEventsWithMinimumPerce
         when(mockExoPlayer.getCurrentPosition()).thenReturn(10L);
         when(mockExoPlayer.getDuration()).thenReturn(25L);
         when(mockExoPlayer.getPlayWhenReady()).thenReturn(true);
-        when(mockVisibilityChecker.isVisible(mockTextureView, mockTextureView, 10)).thenReturn(true);
-        when(mockVisibilityChecker.isVisible(mockTextureView, mockTextureView, 20)).thenReturn(false);
+        when(mockVisibilityChecker.isVisible(mockTextureView, mockTextureView,
+                10, null)).thenReturn(true);
+        when(mockVisibilityChecker.isVisible(mockTextureView, mockTextureView,
+                20, null)).thenReturn(false);
 
         nativeVideoProgressRunnable.setUpdateIntervalMillis(10);
         nativeVideoProgressRunnable.doWork();
@@ -593,7 +642,8 @@ public void NativeVideoProgressRunnable_doWork_withExoPlayerGetPlayWhenReadyFals
     public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTriggerFalse_shouldOnlyTriggerNotTrackedEvents_shouldNotStopRunnable() {
         when(mockExoPlayer.getCurrentPosition()).thenReturn(50L);
         when(mockExoPlayer.getDuration()).thenReturn(50L);
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt()))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt(),
+                Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         spyNativeVideoProgressRunnable.setUpdateIntervalMillis(50);
 
@@ -613,7 +663,8 @@ public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTrigger
         // Enough time has passed for all impressions to trigger organically
         when(mockExoPlayer.getCurrentPosition()).thenReturn(50L);
         when(mockExoPlayer.getDuration()).thenReturn(50L);
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt()))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt(),
+                Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         spyNativeVideoProgressRunnable.setUpdateIntervalMillis(50);
         spyNativeVideoProgressRunnable.requestStop();
@@ -635,7 +686,8 @@ public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTrigger
         // be triggered because forceTrigger is true
         when(mockExoPlayer.getCurrentPosition()).thenReturn(5L);
         when(mockExoPlayer.getDuration()).thenReturn(50L);
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt()))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt(),
+                Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         spyNativeVideoProgressRunnable.setUpdateIntervalMillis(50);
 
@@ -654,7 +706,8 @@ public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTrigger
     public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTriggerTrue_withStopRequested_shouldOnlyTriggerNotTrackedEvents_shouldStopRunnable() {
         when(mockExoPlayer.getCurrentPosition()).thenReturn(50L);
         when(mockExoPlayer.getDuration()).thenReturn(50L);
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt()))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt(),
+                Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         spyNativeVideoProgressRunnable.setUpdateIntervalMillis(50);
         spyNativeVideoProgressRunnable.requestStop();
@@ -680,16 +733,20 @@ public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTrigger
         // track: whether the impression should be organically triggered
 
         // trackingUrl1: visible & played = track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(10)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(10), Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         // trackingUrl2: visible & !played = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(20)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(20), Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         // trackingUrl3: already tracked = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(30)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(30), Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         // trackingUrl4: !visible & played = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(9)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(9), Matchers.isNull(Integer.class)))
                 .thenReturn(false);
         spyNativeVideoProgressRunnable.setUpdateIntervalMillis(10);
         spyNativeVideoProgressRunnable.requestStop();
@@ -717,16 +774,20 @@ public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTrigger
         // track: whether the impression should be organically triggered
 
         // trackingUrl1: visible & played = track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(10)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(10), Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         // trackingUrl2: visible & !played = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(20)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(20), Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         // trackingUrl3: already tracked = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(30)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(30), Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         // trackingUrl4: !visible & played = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(9)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(9), Matchers.isNull(Integer.class)))
                 .thenReturn(false);
         spyNativeVideoProgressRunnable.setUpdateIntervalMillis(10);
 
@@ -754,16 +815,20 @@ public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTrigger
         // track: whether the impression should be organically triggered
 
         // trackingUrl1: visible & played = track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(10)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(10), Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         // trackingUrl2: visible & !played = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(20)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(20), Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         // trackingUrl3: already tracked = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(30)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(30), Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         // trackingUrl4: !visible & played = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(9)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(9), Matchers.isNull(Integer.class)))
                 .thenReturn(false);
         spyNativeVideoProgressRunnable.setUpdateIntervalMillis(10);
         spyNativeVideoProgressRunnable.requestStop();
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
index 6c35d102..6204075d 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
@@ -1,12 +1,10 @@
 package com.mopub.nativeads;
 
-import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.graphics.Bitmap;
 import android.media.AudioManager;
-import android.os.Build;
 import android.os.Bundle;
 import android.view.TextureView;
 import android.view.View;
@@ -43,7 +41,6 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
 
-@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class NativeVideoViewControllerTest {
@@ -257,9 +254,6 @@ public void onSurfaceTextureDestroyed_shouldReleaseVideoController_shouldApplySt
 
     @Test
     public void onStateChanged_shouldAppropriatelySetVideoState() {
-        subject.onStateChanged(true, NativeVideoController.STATE_PREPARING);
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.LOADING);
-
         subject.onStateChanged(true, NativeVideoController.STATE_IDLE);
         assertThat(subject.getVideoState()).isEqualTo(VideoState.LOADING);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
index b33c03ff..75f71afe 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
@@ -29,6 +29,7 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLog;
 
+import java.util.HashSet;
 import java.util.List;
 import java.util.logging.Level;
 
@@ -204,9 +205,13 @@ public void loadPositions_withNoConnection_shouldLogMoPubErrorCodeNoConnection_s
 
         verify(mockPositioningListener).onFailed();
 
-        final List<ShadowLog.LogItem> allLogMessages = ShadowLog.getLogs();
-        final ShadowLog.LogItem latestLogMessage = allLogMessages.get(allLogMessages.size() - 2);
-        // All log messages end with a newline character.
-        assertThat(latestLogMessage.msg.trim()).isEqualTo(MoPubErrorCode.NO_CONNECTION.toString());
+        final List<ShadowLog.LogItem> allLogItems = ShadowLog.getLogs();
+        HashSet<String> allLogMessages = new HashSet<>(allLogItems.size());
+
+        for (ShadowLog.LogItem logItem : allLogItems) {
+            allLogMessages.add(logItem.msg.trim());
+        }
+
+        assertThat(allLogMessages).contains(MoPubErrorCode.NO_CONNECTION.toString());
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java
index 22a34c85..c4cf34fb 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java
@@ -33,6 +33,7 @@ public void setUp() throws Exception {
         subject.addExtra("extraImage", "extraImageUrl");
         subject.addImpressionTracker("impressionUrl");
         subject.setImpressionMinTimeViewed(500);
+        subject.setImpressionMinPercentageViewed(10);
     }
 
     @Test
@@ -53,7 +54,7 @@ public void getters_shouldReturnCorrectValues() throws Exception {
         assertThat(subject.getExtras()).hasSize(2);
         assertThat(subject.getImpressionTrackers()).containsOnly("impressionUrl");
         assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(500);
-        assertThat(subject.getImpressionMinPercentageViewed()).isEqualTo(50);
+        assertThat(subject.getImpressionMinPercentageViewed()).isEqualTo(10);
     }
 
     @Test
@@ -71,6 +72,39 @@ public void setImpressionMinTimeViewed_whenTimeIsLessThan0_shouldNotSetTime() th
         assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(250);
     }
 
+    @Test
+    public void setImpressionMinTimeViewed_whenTimeIs0_shouldNotSetTime() throws Exception {
+        subject.setImpressionMinTimeViewed(250);
+        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(250);
+
+        subject.setImpressionMinTimeViewed(0);
+        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(250);
+    }
+
+    @Test
+    public void setImpressionMinPercentageViewed_whenPercentIsLessThan0_shouldNotSetPercentageViewed() {
+        subject.setImpressionMinPercentageViewed(-1);
+        assertThat(subject.getImpressionMinPercentageViewed()).isEqualTo(10);
+    }
+
+    @Test
+    public void setImpressionMinPercentageViewed_whenPercentIs0_shouldSetPercentageViewed() {
+        subject.setImpressionMinPercentageViewed(0);
+        assertThat(subject.getImpressionMinPercentageViewed()).isEqualTo(0);
+    }
+
+    @Test
+    public void setImpressionMinPercentageViewed_whenPercentIsGreaterThan100_shouldNotSetPercentageViewed() {
+        subject.setImpressionMinPercentageViewed(101);
+        assertThat(subject.getImpressionMinPercentageViewed()).isEqualTo(10);
+    }
+
+    @Test
+    public void setImpressionMinPercentageViewed_whenPercentIsNormal_shouldSetPercentageViewed() {
+        subject.setImpressionMinPercentageViewed(35);
+        assertThat(subject.getImpressionMinPercentageViewed()).isEqualTo(35);
+    }
+
     @Test
     public void setStarRating_withinValidRange_shouldSetStarRating() throws Exception {
         subject.setStarRating(0.0);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/VideoNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/VideoNativeAdTest.java
index 8c271a6d..2b3eae82 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/VideoNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/VideoNativeAdTest.java
@@ -1,8 +1,5 @@
 package com.mopub.nativeads;
 
-import android.annotation.TargetApi;
-import android.os.Build;
-
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 
@@ -13,7 +10,6 @@
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
-@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class VideoNativeAdTest {
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
index c176e2a4..4a903940 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
@@ -35,9 +35,11 @@
 import static com.mopub.nativeads.VisibilityTracker.VisibilityTrackerListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -45,6 +47,7 @@
 @Config(constants = BuildConfig.class)
 public class VisibilityTrackerTest {
     private static final int MIN_PERCENTAGE_VIEWED = 50;
+    private static final Integer DEFAULT_MIN_VISIBLE_PX = 1;
 
     private Activity activity;
     private VisibilityTracker subject;
@@ -82,13 +85,14 @@ public void onVisibilityChanged(List<View> visibleViews, List<View> invisibleVie
 
     @Test
     public void constructor_shouldSetOnPreDrawListenerForDecorView() throws Exception {
-        Activity activity1 = mock(Activity.class);
+        Activity activity1 = spy(Robolectric.buildActivity(Activity.class).create().get());
         Window window = mock(Window.class);
         View decorView = mock(View.class);
         ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
 
         when(activity1.getWindow()).thenReturn(window);
         when(window.getDecorView()).thenReturn(decorView);
+        when(decorView.findViewById(anyInt())).thenReturn(decorView);
         when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
         when(viewTreeObserver.isAlive()).thenReturn(true);
 
@@ -123,65 +127,9 @@ public void constructor_withApplicationContext_shouldNotSetOnPreDrawListener() {
         assertThat(subject.mWeakViewTreeObserver.get()).isNull();
     }
 
-    @Test
-    public void getBestRootView_withActivity_withNullView_shouldReturnActivityDecorView() {
-        Activity activity1 = mock(Activity.class);
-        Window window = mock(Window.class);
-        View decorView = mock(View.class);
-        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
-
-        when(activity1.getWindow()).thenReturn(window);
-        when(window.getDecorView()).thenReturn(decorView);
-        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
-        when(viewTreeObserver.isAlive()).thenReturn(true);
-
-        View view = VisibilityTracker.getBestRootView(activity1, null);
-
-        assertThat(view).isEqualTo(decorView);
-    }
-
-    @Test
-    public void getBestRootView_withApplicationContext_withRootView_shouldReturnRootView() {
-        View rootView = new View(activity.getApplicationContext());
-
-        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), rootView);
-
-        assertThat(view).isEqualTo(rootView);
-    }
-
-    @Test
-    public void getBestRootView_withApplicationContext_withContentView_shouldReturnContentView() {
-        View rootView = mock(View.class);
-        View contentView = mock(View.class);
-
-        when(rootView.findViewById(android.R.id.content)).thenReturn(contentView);
-        when(rootView.getRootView()).thenReturn(rootView);
-
-        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), rootView);
-
-        assertThat(view).isEqualTo(contentView);
-    }
-
-    @Test
-    public void getBestRootView_withApplicationContext_withNullView_shouldReturnNull() {
-        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), null);
-
-        assertThat(view).isNull();
-    }
-
-    @Test
-    public void getBestRootView_withApplicationContext_withNullRootView_withNullParentView_shouldReturnNull() {
-        View originalView = mock(View.class);
-        when(originalView.getRootView()).thenReturn(null);
-
-        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), originalView);
-
-        assertThat(view).isNull();
-    }
-
     @Test
     public void addView_withVisibleView_shouldAddVisibleViewToTrackedViews() throws Exception {
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
 
         assertThat(trackedViews).hasSize(1);
     }
@@ -198,21 +146,21 @@ public void addView_withViewTreeObserverNotSet_shouldSetViewTreeObserver() {
 
         subject = new VisibilityTracker(activity.getApplicationContext(), trackedViews,
                 visibilityChecker, visibilityHandler);
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
 
         assertThat(subject.mWeakViewTreeObserver.get()).isEqualTo(viewTreeObserver);
     }
 
     @Test(expected = NullPointerException.class)
     public void addView_whenViewIsNull_shouldThrowNPE() throws Exception {
-        subject.addView(null, MIN_PERCENTAGE_VIEWED);
+        subject.addView(null, MIN_PERCENTAGE_VIEWED, null);
 
         assertThat(trackedViews).isEmpty();
     }
 
     @Test
     public void removeView_shouldRemoveFromTrackedViews() throws Exception {
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
 
         assertThat(trackedViews).hasSize(1);
         assertThat(trackedViews).containsKey(view);
@@ -224,8 +172,8 @@ public void removeView_shouldRemoveFromTrackedViews() throws Exception {
 
     @Test
     public void clear_shouldRemoveAllViewsFromTrackedViews_shouldRemoveMessagesFromVisibilityHandler_shouldResetIsVisibilityScheduled() throws Exception {
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
-        subject.addView(view2, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
+        subject.addView(view2, MIN_PERCENTAGE_VIEWED, null);
         assertThat(trackedViews).hasSize(2);
 
         subject.clear();
@@ -236,20 +184,21 @@ public void clear_shouldRemoveAllViewsFromTrackedViews_shouldRemoveMessagesFromV
 
     @Test
     public void destroy_shouldCallClear_shouldRemoveListenerFromDecorView() throws Exception {
-        Activity activity1 = mock(Activity.class);
+        Activity activity1 = spy(Robolectric.buildActivity(Activity.class).create().get());
         Window window = mock(Window.class);
         View decorView = mock(View.class);
         ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
 
         when(activity1.getWindow()).thenReturn(window);
         when(window.getDecorView()).thenReturn(decorView);
+        when(decorView.findViewById(anyInt())).thenReturn(decorView);
         when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
         when(viewTreeObserver.isAlive()).thenReturn(true);
 
         subject = new VisibilityTracker(activity1, trackedViews, visibilityChecker, visibilityHandler);
 
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
-        subject.addView(view2, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
+        subject.addView(view2, MIN_PERCENTAGE_VIEWED, null);
         assertThat(trackedViews).hasSize(2);
 
         subject.destroy();
@@ -262,7 +211,7 @@ public void destroy_shouldCallClear_shouldRemoveListenerFromDecorView() throws E
 
     @Test
     public void visibilityRunnable_run_withVisibleView_shouldCallOnVisibleCallback() throws Exception {
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
 
         subject.new VisibilityRunnable().run();
 
@@ -273,7 +222,7 @@ public void visibilityRunnable_run_withVisibleView_shouldCallOnVisibleCallback()
     @Test
     public void visibilityRunnable_run_withNonVisibleView_shouldCallOnNonVisibleCallback() throws Exception {
         when(view.getVisibility()).thenReturn(View.INVISIBLE);
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
 
         subject.new VisibilityRunnable().run();
 
@@ -301,89 +250,121 @@ public void hasRequiredTimeElapsed_withElapsedTimeLessThanMinTimeViewed_shouldRe
     @Test
     public void isMostlyVisible_whenParentIsNull_shouldReturnFalse() throws Exception {
         view = createViewMock(View.VISIBLE, 100, 100, 100, 100, false, true);
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenViewIsOffScreen_shouldReturnFalse() throws Exception {
         view = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, false);
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenViewIsEntirelyOnScreen_shouldReturnTrue() throws Exception {
         view = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
 
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isTrue();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isTrue();
     }
 
     @Test
     public void isMostlyVisible_whenViewIs50PercentVisible_shouldReturnTrue() throws Exception {
         view = createViewMock(View.VISIBLE, 50, 100, 100, 100, true, true);
 
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isTrue();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isTrue();
     }
 
     @Test
     public void isMostlyVisible_whenViewIs49PercentVisible_shouldReturnFalse() throws Exception {
         view = createViewMock(View.VISIBLE, 49, 100, 100, 100, true, true);
 
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenVisibleAreaIsZero_shouldReturnFalse() throws Exception {
         view = createViewMock(View.VISIBLE, 0, 0, 100, 100, true, true);
 
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenViewIsInvisibleOrGone_shouldReturnFalse() throws Exception {
         View view = createViewMock(View.INVISIBLE, 100, 100, 100, 100, true, true);
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isFalse();
 
         reset(view);
         view = createViewMock(View.GONE, 100, 100, 100, 100, true, true);
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenViewHasZeroWidthAndHeight_shouldReturnFalse() throws Exception {
         view = createViewMock(View.VISIBLE, 100, 100, 0, 0, true, true);
 
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenViewIsNull_shouldReturnFalse() throws Exception {
-        assertThat(visibilityChecker.isVisible(null, null, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(null, null, MIN_PERCENTAGE_VIEWED, null)).isFalse();
+    }
+
+    @Test
+    public void isMostlyVisible_whenVisibleAreaIsCheckedByPixel_shouldReturnTrue() throws Exception {
+        view = createViewMock(View.VISIBLE, 90, 90, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED,
+                DEFAULT_MIN_VISIBLE_PX)).isTrue();
+    }
+
+    @Test
+    public void isVisible_whenVisibleAreaIsCheckedByPixel_withExactlyOnePixelVisible_shouldReturnTrue() throws Exception {
+        view = createViewMock(View.VISIBLE, 1, 1, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED,
+                DEFAULT_MIN_VISIBLE_PX)).isTrue();
+    }
+
+    @Test
+    public void isVisible_whenVisibleAreaIsCheckedByPixel_withLargeNonDefaultMinimumPixel_shouldReturnFalse() throws Exception {
+        view = createViewMock(View.VISIBLE, 3, 3, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED,
+                25)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenVisibleAreaIsCheckedByPixel_withSmallNonDefaultMinimumPixel_shouldReturnTrue() throws Exception {
+        view = createViewMock(View.VISIBLE, 3, 3, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED,
+                5)).isTrue();
     }
 
     @Test
     public void addView_shouldClearViewAfterNumAccesses() {
         // Access 1 time
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
         assertThat(trackedViews).hasSize(1);
 
         // Access 2-49 times
         for (int i = 0; i < VisibilityTracker.NUM_ACCESSES_BEFORE_TRIMMING - 2; ++i) {
-            subject.addView(view2, MIN_PERCENTAGE_VIEWED);
+            subject.addView(view2, MIN_PERCENTAGE_VIEWED, null);
         }
         assertThat(trackedViews).hasSize(2);
 
         // 50th time
-        subject.addView(view2, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view2, MIN_PERCENTAGE_VIEWED, null);
         assertThat(trackedViews).hasSize(2);
 
         // 51-99
         for (int i = 0; i < VisibilityTracker.NUM_ACCESSES_BEFORE_TRIMMING - 1; ++i) {
-            subject.addView(view2, MIN_PERCENTAGE_VIEWED);
+            subject.addView(view2, MIN_PERCENTAGE_VIEWED, null);
         }
         assertThat(trackedViews).hasSize(2);
 
         // 100
-        subject.addView(view2, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view2, MIN_PERCENTAGE_VIEWED, null);
         assertThat(trackedViews).hasSize(1);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
index 56f0bc59..5db56a21 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
@@ -1,20 +1,19 @@
 package com.mopub.nativeads.factories;
 
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 import com.mopub.nativeads.CustomEventNative;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
 import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 
-
 @Config(constants = BuildConfig.class)
-@RunWith(RobolectricGradleTestRunner.class)
+@RunWith(SdkTestRunner.class)
 public class CustomEventNativeFactoryTest {
 
     @Before
diff --git a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
index 4c3c70e8..094878e1 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
@@ -2,12 +2,11 @@
 
 import android.app.Activity;
 import android.location.Location;
-import android.os.Build;
 
-import com.mopub.TestSdkHelper;
 import com.mopub.common.AdFormat;
 import com.mopub.common.AdType;
 import com.mopub.common.DataKeys;
+import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.event.BaseEvent;
 import com.mopub.common.event.EventDispatcher;
 import com.mopub.common.event.MoPubEvents;
@@ -72,6 +71,7 @@ public void setup() {
         defaultHeaders.put(ResponseHeader.PAUSE_VISIBLE_PERCENT.getKey(), "25");
         defaultHeaders.put(ResponseHeader.IMPRESSION_MIN_VISIBLE_PERCENT.getKey(), "33%");
         defaultHeaders.put(ResponseHeader.IMPRESSION_VISIBLE_MS.getKey(), "2000");
+        defaultHeaders.put(ResponseHeader.IMPRESSION_MIN_VISIBLE_PX.getKey(), "1");
         defaultHeaders.put(ResponseHeader.MAX_BUFFER_MS.getKey(), "1000");
 
         MoPubEvents.setEventDispatcher(mockEventDispatcher);
@@ -155,7 +155,6 @@ public void parseNetworkResponse_nonJsonStringBodyForNative_shouldNotLogScribeEv
     }
 
     @Test
-    @Config(sdk = Build.VERSION_CODES.JELLY_BEAN)
     public void parseNetworkResponse_forNativeVideo_shouldSucceed() throws Exception {
         defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.VIDEO_NATIVE);
         NetworkResponse testResponse = new NetworkResponse(200,
@@ -171,11 +170,28 @@ public void parseNetworkResponse_forNativeVideo_shouldSucceed() throws Exception
         assertThat(serverExtras.get(DataKeys.PAUSE_VISIBLE_PERCENT)).isEqualTo("25");
         assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isEqualTo("33");
         assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("2000");
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX)).isEqualTo("1");
         assertThat(serverExtras.get(DataKeys.MAX_BUFFER_MS)).isEqualTo("1000");
     }
 
     @Test
-    @Config(sdk = Build.VERSION_CODES.JELLY_BEAN)
+    public void parseNetworkResponse_forNativeStatic_shouldSucceed() throws Exception {
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
+        NetworkResponse testResponse = new NetworkResponse(200,
+                "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        // Check the server extras
+        final Map<String, String> serverExtras = response.result.getServerExtras();
+        assertThat(serverExtras).isNotNull();
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isEqualTo("33");
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("2000");
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX)).isEqualTo("1");
+    }
+
+    @Test
     public void parseNetworkResponse_forNativeVideo_shouldCombineServerExtrasAndEventData() throws Exception {
         defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.VIDEO_NATIVE);
         defaultHeaders.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "class name");
@@ -195,6 +211,7 @@ public void parseNetworkResponse_forNativeVideo_shouldCombineServerExtrasAndEven
         assertThat(serverExtras.get(DataKeys.PAUSE_VISIBLE_PERCENT)).isEqualTo("25");
         assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isEqualTo("33");
         assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("2000");
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX)).isEqualTo("1");
         assertThat(serverExtras.get(DataKeys.MAX_BUFFER_MS)).isEqualTo("1000");
 
         assertThat(serverExtras.get("customEventKey1")).isEqualTo("value1");
@@ -202,27 +219,11 @@ public void parseNetworkResponse_forNativeVideo_shouldCombineServerExtrasAndEven
     }
 
     @Test
-    public void parseNetworkResponse_forNativeVideo_onAPILevelBefore16_shouldError() throws Exception {
-        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1);
-
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.VIDEO_NATIVE);
-        NetworkResponse testResponse = new NetworkResponse(200,
-                "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        assertThat(response.error).isNotNull();
-        assertThat(response.error).isInstanceOf(MoPubNetworkError.class);
-        assertThat(((MoPubNetworkError) response.error).getReason())
-                .isEqualTo(MoPubNetworkError.Reason.UNSPECIFIED);
-    }
-
-    @Test
-    @Config(sdk = Build.VERSION_CODES.JELLY_BEAN)
     public void parseNetworkResponse_forNativeVideo_withInvalidValues_shouldSucceed_shouldParseNull() throws Exception {
         defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.VIDEO_NATIVE);
         defaultHeaders.put(ResponseHeader.PLAY_VISIBLE_PERCENT.getKey(), "-1");
         defaultHeaders.put(ResponseHeader.PAUSE_VISIBLE_PERCENT.getKey(), "101%");
+        defaultHeaders.put(ResponseHeader.IMPRESSION_MIN_VISIBLE_PX.getKey(), "bob");
         defaultHeaders.put(ResponseHeader.IMPRESSION_MIN_VISIBLE_PERCENT.getKey(), "XX%");
         NetworkResponse testResponse = new NetworkResponse(200,
                 "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
@@ -237,6 +238,7 @@ public void parseNetworkResponse_forNativeVideo_withInvalidValues_shouldSucceed_
         assertThat(serverExtras.get(DataKeys.PAUSE_VISIBLE_PERCENT)).isNull();
         assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isNull();
         assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("2000");
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX)).isEqualTo("bob");
         assertThat(serverExtras.get(DataKeys.MAX_BUFFER_MS)).isEqualTo("1000");
     }
 
@@ -343,12 +345,23 @@ public void parseNetworkResponse_withBadJSON_shouldReturnError() {
     }
 
     @Test
-    public void parseNetworkResponse_forRewardedVideo_shouldSucceed() {
+    public void parseNetworkResponse_forRewardedAds_shouldSucceed() {
         defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.REWARDED_VIDEO);
         defaultHeaders.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_NAME.getKey(), "currencyName");
         defaultHeaders.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_AMOUNT.getKey(), "25");
+
+        final String rewardedCurrenciesJson = "{\"rewards\": ["
+                + "{\"name\": \"Coins\", \"amount\": 8},"
+                + "{\"name\": \"Diamonds\", \"amount\": 1},"
+                + "{\"name\": \"Diamonds\", \"amount\": 10 },"
+                + "{\"name\": \"Energy\", \"amount\": 20}"
+                + "]}";
+        defaultHeaders.put(ResponseHeader.REWARDED_CURRENCIES.getKey(), rewardedCurrenciesJson);
+
         defaultHeaders.put(ResponseHeader.REWARDED_VIDEO_COMPLETION_URL.getKey(),
                 "http://completionUrl");
+        defaultHeaders.put(ResponseHeader.REWARDED_DURATION.getKey(), "15000");
+        defaultHeaders.put(ResponseHeader.SHOULD_REWARD_ON_CLICK.getKey(), "1");
         NetworkResponse testResponse = new NetworkResponse(200,
                 "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
 
@@ -357,8 +370,122 @@ public void parseNetworkResponse_forRewardedVideo_shouldSucceed() {
         assertThat(response.result.getAdType()).isEqualTo(AdType.REWARDED_VIDEO);
         assertThat(response.result.getRewardedVideoCurrencyName()).isEqualTo("currencyName");
         assertThat(response.result.getRewardedVideoCurrencyAmount()).isEqualTo("25");
+        assertThat(response.result.getRewardedCurrencies()).isEqualTo(rewardedCurrenciesJson);
         assertThat(response.result.getRewardedVideoCompletionUrl()).isEqualTo(
                 "http://completionUrl");
+        assertThat(response.result.getRewardedDuration()).isEqualTo(15000);
+        assertThat(response.result.shouldRewardOnClick()).isTrue();
+    }
+
+    @Test
+    public void parseNetworkResponse_withInAppBrowserAgent_shouldSucceed() {
+        defaultHeaders.put(ResponseHeader.BROWSER_AGENT.getKey(), "0");
+
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+        assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.IN_APP);
+    }
+
+    @Test
+    public void parseNetworkResponse_withNativeBrowserAgent_shouldSucceed() {
+        defaultHeaders.put(ResponseHeader.BROWSER_AGENT.getKey(), "1");
+
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+        assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.NATIVE);
+    }
+
+    @Test
+    public void parseNetworkResponse_withNullBrowserAgent_shouldDefaultToInApp() {
+        defaultHeaders.put(ResponseHeader.BROWSER_AGENT.getKey(), null);
+
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+        assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.IN_APP);
+    }
+
+    @Test
+    public void parseNetworkResponse_withUndefinedBrowserAgent_shouldDefaultToInApp() {
+        defaultHeaders.put(ResponseHeader.BROWSER_AGENT.getKey(), "foo");
+
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+        assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.IN_APP);
+    }
+
+    @Test
+    public void parseNetworkResponse_forBannerAdFormat_withoutImpTrackingHeaders_shouldSucceed() {
+        subject = new AdRequest("testUrl", AdFormat.BANNER, "testAdUnitId", activity, mockListener);
+
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.result).isNotNull();
+        assertThat(response.result.getStringBody()).isEqualTo("abc");
+
+        // Check the server extras
+        final Map<String, String> serverExtras = response.result.getServerExtras();
+        assertThat(serverExtras).isNotNull();
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS)).isNull();
+        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS)).isNull();
+    }
+
+    @Test
+    public void parseNetworkResponse_forBannerAdFormat_withImpTrackingHeaders_shouldSucceed_shouldStoreHeadersInServerExtras() {
+        defaultHeaders.put(ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_DIPS.getKey(), "1");
+        defaultHeaders.put(ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_MS.getKey(), "0");
+
+        subject = new AdRequest("testUrl", AdFormat.BANNER, "testAdUnitId", activity, mockListener);
+
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.result).isNotNull();
+        assertThat(response.result.getStringBody()).isEqualTo("abc");
+
+        // Check the server extras
+        final Map<String, String> serverExtras = response.result.getServerExtras();
+        assertThat(serverExtras).isNotNull();
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS)).isEqualTo("1");
+        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS)).isEqualTo("0");
+    }
+
+    @Test
+    public void parseNetworkResponse_forNonBannerAdFormat_withImpTrackingHeaders_shouldSucceed_shouldIgnoreHeaders() {
+        defaultHeaders.put(ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_DIPS.getKey(), "1");
+        defaultHeaders.put(ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_MS.getKey(), "0");
+
+        // Non-banner AdFormat
+        subject = new AdRequest("testUrl", AdFormat.INTERSTITIAL, "testAdUnitId", activity, mockListener);
+
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.result).isNotNull();
+        assertThat(response.result.getStringBody()).isEqualTo("abc");
+
+        // Check the server extras
+        final Map<String, String> serverExtras = response.result.getServerExtras();
+        assertThat(serverExtras).isNotNull();
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS)).isNull();
+        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS)).isNull();
     }
 
     @Test
@@ -436,8 +563,6 @@ public void getHeaders_withLocaleLanguageAsEmptyString_shouldNotAddLanguageHeade
         activity.getResources().getConfiguration().locale = new Locale(" ");
 
         assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
-
-
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java
new file mode 100644
index 00000000..01ba66f4
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java
@@ -0,0 +1,149 @@
+package com.mopub.network;
+
+import android.annotation.SuppressLint;
+import android.annotation.TargetApi;
+import android.net.SSLCertificateSocketFactory;
+import android.os.Build;
+import android.support.annotation.Nullable;
+
+import com.mopub.TestSdkHelper;
+import com.mopub.mobileads.BuildConfig;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mockito;
+import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.PowerMockRunner;
+import org.robolectric.annotation.Config;
+
+import java.net.InetAddress;
+import java.net.Socket;
+
+import javax.net.ssl.HostnameVerifier;
+import javax.net.ssl.HttpsURLConnection;
+import javax.net.ssl.SSLHandshakeException;
+import javax.net.ssl.SSLSession;
+import javax.net.ssl.SSLSocket;
+
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.powermock.api.mockito.PowerMockito.mockStatic;
+
+@PrepareForTest(InetAddressUtils.class)
+@RunWith(PowerMockRunner.class)
+@Config(constants = BuildConfig.class)
+public class CustomSSLSocketFactoryTest {
+
+    private CustomSSLSocketFactory subject;
+    private SSLCertificateSocketFactory mockSSLCertificateSocketFactory;
+    private SSLSocketWithSetHostname mockSSLSocket;
+
+    @SuppressLint("SSLCertificateSocketFactoryCreateSocket")
+    @Before
+    public void setUp() throws Exception {
+        mockStatic(InetAddressUtils.class);
+        mockSSLCertificateSocketFactory = mock(SSLCertificateSocketFactory.class);
+        mockSSLSocket = mock(SSLSocketWithSetHostname.class);
+        Mockito.when(mockSSLCertificateSocketFactory.createSocket(any(InetAddress.class),
+                anyInt())).thenReturn(mockSSLSocket);
+        InetAddress mockInetAddress = mock(InetAddress.class);
+        PowerMockito.when(InetAddressUtils.getInetAddressByName(anyString())).thenReturn(
+                mockInetAddress);
+        subject = CustomSSLSocketFactory.getDefault(0);
+        subject.setCertificateSocketFactory(mockSSLCertificateSocketFactory);
+    }
+
+    @Test
+    public void createSocket_withSocketParam_withAutoCloseTrue_shouldCloseOriginalSocket() throws Exception {
+        final Socket mockSocket = mock(Socket.class);
+        final HostnameVerifier mockHostnameVerifier = mock(HostnameVerifier.class);
+        Mockito.when(mockHostnameVerifier.verify(eq("hostname"), any(SSLSession.class))).thenReturn(true);
+        HttpsURLConnection.setDefaultHostnameVerifier(mockHostnameVerifier);
+
+        subject.createSocket(mockSocket, "hostname", 443, true);
+
+        verify(mockSocket).close();
+        verifyNoMoreInteractions(mockSocket);
+    }
+
+    @Test
+    public void createSocket_withSocketParam_withAutoCloseFalse_shouldNotCloseOriginalSocket_shouldCallSetHostname() throws Exception {
+        final Socket mockSocket = mock(Socket.class);
+        final HostnameVerifier mockHostnameVerifier = mock(HostnameVerifier.class);
+        Mockito.when(mockHostnameVerifier.verify(eq("hostname"), any(SSLSession.class))).thenReturn(true);
+        HttpsURLConnection.setDefaultHostnameVerifier(mockHostnameVerifier);
+
+        subject.createSocket(mockSocket, "hostname", 443, false);
+
+        verify(mockSocket, never()).close();
+        verify(mockSSLSocket).getSupportedProtocols();
+        verify(mockSSLSocket).setEnabledProtocols(any(String[].class));
+        verify(mockSSLSocket).startHandshake();
+        verify(mockSSLSocket).getSession();
+        verify(mockSSLSocket).setHostname(any(String.class));
+        verifyNoMoreInteractions(mockSSLSocket);
+    }
+
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Test
+    public void setHostnameOnSocket_withAtLeastJellyBeanMR1_shouldEnableServerNameIdentification() {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.JELLY_BEAN_MR1);
+
+        final SSLSocket mockSSLSocket = mock(SSLSocket.class);
+
+        CustomSSLSocketFactory.setHostnameOnSocket(mockSSLCertificateSocketFactory, mockSSLSocket,
+                "hostname");
+
+        verify(mockSSLCertificateSocketFactory).setHostname(mockSSLSocket, "hostname");
+    }
+
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Test
+    public void setHostnameOnSocket_withBelowJellyBeanMR1_shouldEnableServerNameIdentification() {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.JELLY_BEAN);
+
+        final SSLSocket mockSSLSocket = mock(SSLSocket.class);
+
+        CustomSSLSocketFactory.setHostnameOnSocket(mockSSLCertificateSocketFactory, mockSSLSocket,
+                "hostname");
+
+        verify(mockSSLCertificateSocketFactory, never()).setHostname(mockSSLSocket, "hostname");
+    }
+
+    @Test
+    public void verifyServerName_withValidServerNameIdentification_shouldNotThrowSSLHandshakeException() throws Exception {
+        final SSLSocket mockSslSocket = mock(SSLSocket.class);
+        final HostnameVerifier mockHostnameVerifier = mock(HostnameVerifier.class);
+        Mockito.when(mockHostnameVerifier.verify(eq("hostname"), any(SSLSession.class))).thenReturn(true);
+        HttpsURLConnection.setDefaultHostnameVerifier(mockHostnameVerifier);
+
+        CustomSSLSocketFactory.verifyServerName(mockSslSocket, "hostname");
+    }
+
+    @Test(expected = SSLHandshakeException.class)
+    public void verifyServerName_withInvalidServerNameIdentification_shouldThrowSSLHandshakeException() throws Exception {
+        final SSLSocket mockSslSocket = mock(SSLSocket.class);
+        final HostnameVerifier mockHostnameVerifier = mock(HostnameVerifier.class);
+        Mockito.when(mockHostnameVerifier.verify(eq("hostname"), any(SSLSession.class))).thenReturn(false);
+        HttpsURLConnection.setDefaultHostnameVerifier(mockHostnameVerifier);
+
+        CustomSSLSocketFactory.verifyServerName(mockSslSocket, "hostname");
+    }
+
+    /**
+     * This class has the setHostname() method that CustomSSLSocketFactory#setHostnameOnSocket uses
+     * via reflection. This exists so we can Mockito.verify the method setHostname().
+     */
+    private abstract class SSLSocketWithSetHostname extends SSLSocket {
+        public void setHostname(@Nullable final String hostname) {
+        }
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
index 8af5748e..cd0ab708 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
@@ -56,8 +56,7 @@ public void setUp() {
         final HurlStack.UrlRewriter urlRewriter = new PlayServicesUrlRewriter(clientMetadata.getDeviceId(), activity);
         // No Custom SSL Factory
 
-        final String userAgent = Networking.getUserAgent(activity.getApplicationContext());
-        HttpStack httpStack = new RequestQueueHttpStack(userAgent, urlRewriter);
+        HttpStack httpStack = new RequestQueueHttpStack("test_user_agent", urlRewriter);
 
         Network network = new BasicNetwork(httpStack);
         File volleyCacheDir = new File(activity.getCacheDir().getPath() + File.separator
diff --git a/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java b/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
index de48343a..ba472d52 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
@@ -1,20 +1,19 @@
 package com.mopub.network;
 
+import android.annotation.TargetApi;
 import android.app.Activity;
+import android.os.Build;
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 
 import org.junit.After;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
-import java.util.concurrent.Semaphore;
-
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
@@ -42,36 +41,25 @@ public void getUserAgent_usesCachedUserAgent() {
         assertThat(userAgent).isEqualTo("some cached user agent");
     }
 
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+    @Config(sdk = Build.VERSION_CODES.JELLY_BEAN)
     @Test
-    public void getUserAgent_fromMainThread_shouldIncludeAndroid() throws InterruptedException {
-        context.runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                String userAgent = Networking.getUserAgent(context);
-                assertThat(userAgent).containsIgnoringCase("android");
-            }
-        });
+    public void getUserAgent_withSdkVersion16_shouldIncludeAndroid() {
+        String userAgent = Networking.getUserAgent(context);
+
+        assertThat(userAgent).containsIgnoringCase("android");
     }
 
-    @Ignore("Flaky - setProperty + threading is unreliable in the test environment.")
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Config(sdk = Build.VERSION_CODES.JELLY_BEAN_MR1)
     @Test
-    public void getUserAgent_fromBackgroundThread_shouldIncludeAndroid() throws InterruptedException {
-        System.setProperty("http.agent", "system level user agent");
-
-        final Semaphore semaphore = new Semaphore(0);
-
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                sUserAgent = Networking.getUserAgent(context);
-                semaphore.release();
-            }
-        }).start();
+    public void getUserAgent_withSdkVersionGreaterThan16_shouldIncludeAndroid() {
+        String userAgent = Networking.getUserAgent(context);
 
-        semaphore.acquire();
-        assertThat(sUserAgent).isEqualTo("system level user agent");
+        assertThat(userAgent).containsIgnoringCase("android");
     }
 
+    @Test
     public void getCachedUserAgent_usesCachedUserAgent() {
         Networking.setUserAgentForTesting("some cached user agent");
         String userAgent = Networking.getCachedUserAgent();
diff --git a/mopub-sdk/src/test/resources/robolectric.properties b/mopub-sdk/src/test/resources/robolectric.properties
index 3cbe9a8d..f339de43 100644
--- a/mopub-sdk/src/test/resources/robolectric.properties
+++ b/mopub-sdk/src/test/resources/robolectric.properties
@@ -1,3 +1,3 @@
 sdk=21
-shadows=com.mopub.nativeads.test.support.MoPubShadowDisplay,com.mopub.nativeads.test.support.MoPubShadowBitmap,com.mopub.mobileads.test.support.ShadowVastVideoView
-manifest=src/main/AndroidManifest.xml
\ No newline at end of file
+shadows=com.mopub.nativeads.test.support.MoPubShadowDisplay,com.mopub.nativeads.test.support.MoPubShadowBitmap,com.mopub.mobileads.test.support.ShadowVastVideoView,com.mopub.common.util.test.support.ShadowReflection
+manifest=src/main/AndroidManifest.xml
