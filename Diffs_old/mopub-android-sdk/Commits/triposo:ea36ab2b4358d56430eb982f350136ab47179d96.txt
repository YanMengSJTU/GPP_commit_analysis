diff --git a/CHANGELOG.md b/CHANGELOG.md
index 9e2ee647..7689617d 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,12 @@
+## Version 3.4.0 (January 30, 2015)
+  
+  - **Volley networking stack** MoPub for Android now uses Google's Volley library for HTTP requests. You will need to add our bundled Volley JAR (available at `mopub-sdk/libs/mopub-volley-1.0.0.jar`) as a compile-time dependency. See instructions in our [integration page](https://dev.twitter.com/mopub/android/getting-started).
+  - **Updated Vungle Support** Certified the `VungleInterstitial` custom event against Vungle SDK 3.2.2
+  - **VAST Video Bug Fixes**
+    - Fixed inability to parse VAST tags referencing URLs that contain 3rd party macros
+    - VAST videos no longer fire completion trackers upon video playback error
+  - Added support for the `mopubnativebrowser://` click-destination scheme for Native, MRAID, and VAST ads (it was already supported for HTML ads). Links of this type (e.g. `mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.mopub.com`) will open the specified URL in the device's default browser, rather than in MoPub's in-app browser.
+
 ## Version 3.3.0 (December 8, 2014)
 
   - **MRAID 2.0 Support** - The MoPub SDK is now compliant with the MRAID 2.0 specification to enable rich media ads in banners and interstitial ad units. Learn more about MRAID from the [IAB](http://www.iab.net/MRAID#MRAID).
@@ -5,6 +14,7 @@
     
     As before, you may still disable MoPub SDK's location polling by calling `MoPub.setLocationAwareness(LocationAwareness.DISABLED)`.
   - **Updated Chartboost SDK** Updated the `ChartboostInterstitial` custom event to support Chartboost SDK 5.0.4
+  - **Android Support Annotations** Introduced a dependency on android-support-annotations.jar to support code analysis of `@Nullable` and `@NonNull` annotations.
   
 #### Version 3.2.2 (October 29, 2014)
   - **Bug Fix** Fixes a bug in fetching the Google Advertising ID from Google Play Services. 
@@ -308,4 +318,4 @@ To allow users to play videos using the native video player:
 ## Version 1.2 (February 29, 2012)
   - Added support for custom events
   - Added network connectivity check before loading an ad
-  - Added `OnAdPresentedOverlay` listener methods
\ No newline at end of file
+  - Added `OnAdPresentedOverlay` listener methods
diff --git a/README.md b/README.md
index da7bcd09..c60aa6c9 100644
--- a/README.md
+++ b/README.md
@@ -27,15 +27,23 @@ Integration instructions are available on the [wiki](https://github.com/mopub/mo
 
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for details.
 
-  - **MRAID 2.0 Support** - The MoPub SDK is now compliant with the MRAID 2.0 specification to enable rich media ads in banners and interstitial ad units. Learn more about MRAID from the [IAB](http://www.iab.net/MRAID#MRAID).
-  - **Location Polling Updates** - Changed the interaction between application- and device-provided location data: more recent location data is now always used (in the past, application-provided location data was always preferred).
-    
-    As before, you may still disable MoPub SDK's location polling by calling `MoPub.setLocationAwareness(LocationAwareness.DISABLED)`.
-  - **Updated Chartboost SDK** Updated the `ChartboostInterstitial` custom event to support Chartboost SDK 5.0.4
+  - **Volley networking stack** MoPub for Android now uses Google's Volley library for HTTP requests. You will need to add our bundled Volley JAR (available at `mopub-sdk/libs/mopub-volley-1.0.0.jar`) as a compile-time dependency. See instructions in our [integration page](https://dev.twitter.com/mopub/android/getting-started).
+  - **Updated Vungle Support** Certified the `VungleInterstitial` custom event against Vungle SDK 3.2.2
+  - **VAST Video Bug Fixes**
+    - Fixed inability to parse VAST tags referencing URLs that contain 3rd party macros
+    - VAST videos no longer fire completion trackers upon video playback error
+  - Added support for the `mopubnativebrowser://` click-destination scheme for Native, MRAID, and VAST ads (it was already supported for HTML ads). Links of this type (e.g. `mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.mopub.com`) will open the specified URL in the device's default browser, rather than in MoPub's in-app browser.
 
 ## Requirements
 
-Android 2.3.1 (API Version 9) and up
+- Android 2.3.1 (API Version 9) and up
+- android-support-v4.jar
+- android-support-annotations.jar (**New in 3.3.0**)
+- Bundled Volley MoPub JAR (mopub-volley-1.0.0.jar) (**New in 3.4.0**)
+- **Recommended** Google Play Services 5.0.89 & up.
+
+## Upgrading from 3.2.0 and Prior
+In 3.3.0 a dependency on android-support-annotations.jar was added. If you are using Maven or Gradle to include the MoPub SDK, this dependency is included in the build scripts. For instructions on adding dependencies for Eclipse projects, see our [Getting Started Guide](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started#adding-the-support-libraries-to-your-project)
 
 ## License
 
diff --git a/build.gradle b/build.gradle
index 71019251..51c2aa00 100644
--- a/build.gradle
+++ b/build.gradle
@@ -2,26 +2,12 @@ buildscript {
     repositories {
         mavenCentral()
     }
+
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.0.0'
+        classpath 'com.android.tools.build:gradle:0.14.2+'
     }
 }
 
-apply plugin: 'com.android.library'
-
-dependencies {
-    compile 'com.android.support:support-v4:21.0.3'
-}
-
-android {
-    compileSdkVersion 21
-    buildToolsVersion "21.1.2"
-
-    sourceSets {
-        main {
-            manifest.srcFile 'mopub-sdk/AndroidManifest.xml'
-            java.srcDirs = ['mopub-sdk/src/main/java']
-            res.srcDirs = ['mopub-sdk/res']
-        }
-    }
+task wrapper(type: Wrapper) {
+    gradleVersion = '2.1'
 }
diff --git a/extras/src/com/mopub/mobileads/VungleInterstitial.java b/extras/src/com/mopub/mobileads/VungleInterstitial.java
index b662a2b7..0997aaeb 100644
--- a/extras/src/com/mopub/mobileads/VungleInterstitial.java
+++ b/extras/src/com/mopub/mobileads/VungleInterstitial.java
@@ -14,7 +14,7 @@
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 
 /*
- * Tested with Vungle SDK 3.1.0.
+ * Tested with Vungle SDK 3.2.2.
  */
 public class VungleInterstitial extends CustomEventInterstitial implements EventListener {
 
@@ -60,8 +60,9 @@ protected void loadInterstitial(Context context,
             appId = DEFAULT_VUNGLE_APP_ID;
         }
 
-        mVunglePub.setEventListener(this);
+        // init clears the event listener.
         mVunglePub.init(context, appId);
+        mVunglePub.setEventListener(this);
         scheduleOnInterstitialLoaded();
     }
 
@@ -131,7 +132,7 @@ public void run() {
     }
 
     @Override
-    public void onAdEnd() {
+    public void onAdEnd(final boolean wasCallToActionClicked) {
         mHandler.post(new Runnable() {
             @Override
             public void run() {
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index fe6bfcd2..9f08ae71 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,9 +1,9 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="19"
-      android:versionName="3.3.0">
-    <uses-sdk android:minSdkVersion="9"
+      android:versionCode="20"
+      android:versionName="3.4.0">
+    <uses-sdk android:minSdkVersion="9" 
               android:targetSdkVersion="19"/>
 
     <uses-permission android:name="android.permission.INTERNET" />
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index 7d281313..f6f73e9f 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -9,8 +9,8 @@ android {
     buildToolsVersion '21.1.1'
 
     defaultConfig {
-        versionCode 1
-        versionName "3.3.0"
+        versionCode 20
+        versionName "3.4.0"
         minSdkVersion 9
         targetSdkVersion 19
     }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
index dfeacd95..0192728d 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
@@ -1,6 +1,7 @@
 package com.mopub.simpleadsdemo;
 
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.support.v4.app.Fragment;
 
 import java.util.Comparator;
@@ -158,7 +159,7 @@ static MoPubSampleAdUnit fromBundle(final Bundle bundle) {
     }
 
     @Override
-    public int compareTo(MoPubSampleAdUnit that) {
+    public int compareTo(@NonNull MoPubSampleAdUnit that) {
         if (mAdType != that.mAdType) {
             return mAdType.ordinal() - that.mAdType.ordinal();
         }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/Utils.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/Utils.java
index f63af8fe..734e777b 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/Utils.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/Utils.java
@@ -35,6 +35,9 @@ static boolean isAlphaNumeric(final String input) {
 
     static void logToast(Context context, String message) {
         Log.d(LOGTAG, message);
-        Toast.makeText(context, message, Toast.LENGTH_SHORT).show();
+
+        if (context != null) {
+            Toast.makeText(context, message, Toast.LENGTH_SHORT).show();
+        }
     }
 }
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index 9fd77b3b..bac37b37 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -15,8 +15,8 @@ android {
     buildToolsVersion '21.1.1'
 
     defaultConfig {
-        versionCode 1
-        versionName "3.3.0"
+        versionCode 20
+        versionName "3.4.0"
         minSdkVersion 9
         targetSdkVersion 19
         consumerProguardFiles 'proguard.txt'
@@ -50,6 +50,7 @@ android {
 dependencies {
     compile 'com.android.support:support-v4:19.1.+'
     compile 'com.android.support:support-annotations:20.0.0'
+    compile files('libs/mopub-volley-1.0.0.jar')
 }
 
 // Don't run the Robolectric Unit Tests. They don't build properly in Gradle or Android Studio in this version.
diff --git a/mopub-sdk/libs/mopub-volley-1.0.0.jar b/mopub-sdk/libs/mopub-volley-1.0.0.jar
new file mode 100644
index 00000000..6b22d65f
Binary files /dev/null and b/mopub-sdk/libs/mopub-volley-1.0.0.jar differ
diff --git a/mopub-sdk/pom.xml b/mopub-sdk/pom.xml
index e6a407c6..1e5554e9 100644
--- a/mopub-sdk/pom.xml
+++ b/mopub-sdk/pom.xml
@@ -34,6 +34,12 @@
             <version>19.1.0</version>
         </dependency>
 
+        <dependency>
+            <groupId>com.mopub.volley</groupId>
+            <artifactId>volley</artifactId>
+            <version>1.0.0</version>
+        </dependency>
+
         <!--test-->
         <dependency>
             <groupId>org.apache.httpcomponents</groupId>
diff --git a/mopub-sdk/src/main/java/com/mopub/common/AdFormat.java b/mopub-sdk/src/main/java/com/mopub/common/AdFormat.java
new file mode 100644
index 00000000..08aab4c8
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/AdFormat.java
@@ -0,0 +1,7 @@
+package com.mopub.common;
+
+public enum AdFormat {
+    BANNER,
+    INTERSTITIAL,
+    NATIVE,
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/AdReport.java b/mopub-sdk/src/main/java/com/mopub/common/AdReport.java
new file mode 100644
index 00000000..0415b271
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/AdReport.java
@@ -0,0 +1,81 @@
+package com.mopub.common;
+
+import android.os.Build;
+import android.support.annotation.NonNull;
+
+import com.mopub.network.AdResponse;
+
+import java.io.Serializable;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Locale;
+
+/**
+ * A value class used for generating reports to send data back to MoPub
+ */
+public class AdReport implements Serializable {
+    private static final long serialVersionUID = 1L;
+
+    private static final String DATE_FORMAT_PATTERN = "M/d/yy hh:mm:ss a z";
+    private final AdResponse mAdResponse;
+    private final String mAdUnitId;
+    private final String mSdkVersion;
+    private final String mDeviceModel;
+    private final Locale mDeviceLocale;
+    private final String mUdid;
+
+    public AdReport(@NonNull String adUnitId, @NonNull ClientMetadata clientMetadata, @NonNull AdResponse adResponse) {
+        mAdUnitId = adUnitId;
+        mSdkVersion = clientMetadata.getSdkVersion();
+        mDeviceModel = clientMetadata.getDeviceModel();
+        mDeviceLocale = clientMetadata.getDeviceLocale();
+        mUdid = clientMetadata.getDeviceId();
+        mAdResponse = adResponse;
+    }
+
+    @Override
+    public String toString() {
+        StringBuilder parameters = new StringBuilder();
+        appendKeyValue(parameters, "sdk_version", mSdkVersion);
+        appendKeyValue(parameters, "creative_id", mAdResponse.getDspCreativeId());
+        appendKeyValue(parameters, "platform_version", Integer.toString(Build.VERSION.SDK_INT));
+        appendKeyValue(parameters, "device_model", mDeviceModel);
+        appendKeyValue(parameters, "ad_unit_id", mAdUnitId);
+        appendKeyValue(parameters, "device_locale",
+                mDeviceLocale == null ? null : mDeviceLocale.toString());
+        appendKeyValue(parameters, "device_id", mUdid);
+        appendKeyValue(parameters, "network_type", mAdResponse.getNetworkType());
+        appendKeyValue(parameters, "platform", "android");
+        appendKeyValue(parameters, "timestamp", getFormattedTimeStamp(mAdResponse.getTimestamp()));
+        appendKeyValue(parameters, "ad_type", mAdResponse.getAdType());
+        Integer width = mAdResponse.getWidth();
+        Integer height = mAdResponse.getHeight();
+        appendKeyValue(parameters, "ad_size", "{"
+                + (width == null ? "0" : width)
+                + ", "
+                + (height == null ? "0" : height)
+                + "}");
+
+        return parameters.toString();
+    }
+
+    public String getResponseString() {
+        return mAdResponse.getStringBody();
+    }
+
+    private void appendKeyValue(StringBuilder parameters, String key, String value) {
+        parameters.append(key);
+        parameters.append(" : ");
+        parameters.append(value);
+        parameters.append("\n");
+    }
+
+    private String getFormattedTimeStamp(long timeStamp) {
+        if (timeStamp != -1) {
+            SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN, Locale.US);
+            return dateFormat.format(new Date(timeStamp));
+        } else {
+            return null;
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/AdType.java b/mopub-sdk/src/main/java/com/mopub/common/AdType.java
new file mode 100644
index 00000000..86543d5a
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/AdType.java
@@ -0,0 +1,14 @@
+package com.mopub.common;
+
+/**
+ * Valid values for the "X-Adtype" header from the MoPub ad server. The value of this header
+ * controls the custom event loading behavior.
+ */
+public class AdType {
+    public static final String HTML = "html";
+    public static final String MRAID = "mraid";
+    public static final String INTERSTITIAL = "interstitial";
+    public static final String NATIVE = "json";
+    public static final String CUSTOM = "custom";
+    public static final String CLEAR = "clear";
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java
index dcbec7dd..f2a83cc6 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java
@@ -4,7 +4,7 @@
 import android.location.Location;
 import android.support.annotation.Nullable;
 
-import com.mopub.common.util.IntentUtils;
+import com.mopub.common.util.Intents;
 
 import static com.mopub.common.ClientMetadata.MoPubNetworkType;
 
@@ -131,7 +131,7 @@ protected void setTwitterAppInstalledFlag() {
     }
 
     public TwitterAppInstalledStatus getTwitterAppInstallStatus() {
-        return IntentUtils.canHandleTwitterUrl(mContext) ? TwitterAppInstalledStatus.INSTALLED : TwitterAppInstalledStatus.NOT_INSTALLED;
+        return Intents.canHandleTwitterUrl(mContext) ? TwitterAppInstalledStatus.INSTALLED : TwitterAppInstalledStatus.NOT_INSTALLED;
     }
 
     @Deprecated // for testing
diff --git a/mopub-sdk/src/main/java/com/mopub/common/BaseUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/common/BaseUrlGenerator.java
index 4bae8ed4..495f1bfc 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/BaseUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/BaseUrlGenerator.java
@@ -3,9 +3,11 @@
 import android.net.Uri;
 import android.text.TextUtils;
 
+import com.mopub.network.PlayServicesUrlRewriter;
+
 public abstract class BaseUrlGenerator {
-    private static final String IFA_PREFIX = "ifa:";
-    private static final String SHA_PREFIX = "sha:";
+
+
 
     private StringBuilder mStringBuilder;
     private boolean mFirstParam;
@@ -75,4 +77,13 @@ protected void setDoNotTrack(boolean dnt) {
     protected void setUdid(String udid) {
         addParam("udid", udid);
     }
+
+    /**
+     * Appends special keys/values for advertising id and do-not-track. PlayServicesUrlRewriter will
+     * replace these templates wiht the correct values when the request is processed.
+     */
+    protected void appendAdvertisingInfoTemplates() {
+        addParam("udid", PlayServicesUrlRewriter.UDID_TEMPLATE);
+        addParam("dnt", PlayServicesUrlRewriter.DO_NOT_TRACK_TEMPLATE);
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/CacheService.java b/mopub-sdk/src/main/java/com/mopub/common/CacheService.java
index fcc5fad2..81f77af7 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/CacheService.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/CacheService.java
@@ -32,19 +32,6 @@
     private static final int DISK_CACHE_INDEX = 0;
 
     private static DiskLruCache sDiskLruCache;
-    private static BitmapLruCache sBitmapLruCache;
-
-    public static boolean initializeBitmapCache(final Context context) {
-        if (context == null) {
-            return false;
-        }
-
-        if (sBitmapLruCache == null) {
-            final int memoryCacheSizeBytes = DeviceUtils.memoryCacheSizeBytes(context);
-            sBitmapLruCache = new BitmapLruCache(memoryCacheSizeBytes);
-        }
-        return true;
-    }
 
     public static boolean initializeDiskCache(final Context context) {
         if (context == null) {
@@ -69,7 +56,6 @@ public static boolean initializeDiskCache(final Context context) {
     }
 
     public static void initialize(final Context context) {
-        initializeBitmapCache(context);
         initializeDiskCache(context);
     }
 
@@ -110,14 +96,6 @@ public static String getFilePathDiskCache(final String key) {
                 + DISK_CACHE_INDEX;
     }
 
-    public static Bitmap getFromBitmapCache(final String key) {
-        if (sBitmapLruCache == null) {
-            return null;
-        }
-
-        return sBitmapLruCache.get(key);
-    }
-
     public static byte[] getFromDiskCache(final String key) {
         if (sDiskLruCache == null) {
             return null;
@@ -156,14 +134,6 @@ public static void getFromDiskCacheAsync(final String key, final DiskLruCacheGet
         new DiskLruCacheGetTask(key, diskLruCacheGetListener).execute();
     }
 
-    public static void putToBitmapCache(final String key, final Bitmap bitmap) {
-        if (sBitmapLruCache == null) {
-            return;
-        }
-
-        sBitmapLruCache.put(key, bitmap);
-    }
-
     public static boolean putToDiskCache(final String key, final byte[] content) {
         return putToDiskCache(key, new ByteArrayInputStream(content));
     }
@@ -208,21 +178,6 @@ public static void putToDiskCacheAsync(final String key, final byte[] content) {
         new DiskLruCachePutTask(key, content).execute();
     }
 
-    private static class BitmapLruCache extends LruCache<String, Bitmap> {
-        public BitmapLruCache(final int maxSize) {
-            super(maxSize);
-        }
-
-        @Override
-        protected int sizeOf(final String key, final Bitmap bitmap) {
-            if (bitmap != null) {
-                return bitmap.getRowBytes() * bitmap.getHeight();
-            }
-
-            return super.sizeOf(key, bitmap);
-        }
-    }
-
     private static class DiskLruCacheGetTask extends AsyncTask<Void, Void, byte[]> {
         private final DiskLruCacheGetListener mDiskLruCacheGetListener;
         private final String mKey;
@@ -285,17 +240,6 @@ public static void clearAndNullCaches() {
                 sDiskLruCache = null;
             }
         }
-        if (sBitmapLruCache != null) {
-            sBitmapLruCache.evictAll();
-            sBitmapLruCache = null;
-        }
-    }
-
-    // Testing
-    @Deprecated
-    @VisibleForTesting
-    public static LruCache<String, Bitmap> getBitmapLruCache() {
-        return sBitmapLruCache;
     }
 
     // Testing
diff --git a/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java b/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java
index d04724b8..6377f30d 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java
@@ -16,6 +16,8 @@
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Utils;
 
+import java.util.Locale;
+
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static android.content.pm.PackageManager.NameNotFoundException;
 import static android.content.pm.PackageManager.PERMISSION_GRANTED;
@@ -259,6 +261,10 @@ public String getNetworkOperator() {
         return mNetworkOperator;
     }
 
+    public Locale getDeviceLocale() {
+        return mContext.getResources().getConfiguration().locale;
+    }
+
     /**
      * @return the sim operator.
      */
@@ -297,7 +303,7 @@ public String getSimOperatorName() {
     /**
      * @return the stored device ID.
      */
-    public synchronized String getAdvertisingId() {
+    public synchronized String getDeviceId() {
         return mUdid;
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java b/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java
new file mode 100644
index 00000000..38c91ec7
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java
@@ -0,0 +1,14 @@
+package com.mopub.common;
+
+/**
+ * Keys used in localExtras and serverExtras maps for MoPub custom events.
+ */
+public class DataKeys {
+    public static final String AD_REPORT_KEY = "mopub-intent-ad-report";
+    public static final String HTML_RESPONSE_BODY_KEY = "Html-Response-Body";
+    public static final String REDIRECT_URL_KEY = "Redirect-Url";
+    public static final String CLICKTHROUGH_URL_KEY = "Clickthrough-Url";
+    public static final String SCROLLABLE_KEY = "Scrollable";
+    public static final String JSON_BODY_KEY = "com_mopub_native_json";
+    public static final String BROADCAST_IDENTIFIER_KEY = "broadcastIdentifier";
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java b/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
index 274f7752..e26371b0 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.os.AsyncTask;
+import android.support.annotation.Nullable;
 
 import com.mopub.common.factories.MethodBuilderFactory;
 import com.mopub.common.logging.MoPubLog;
@@ -19,11 +20,21 @@
     private static String sPlayServicesUtilClassName = "com.google.android.gms.common.GooglePlayServicesUtil";
     private static String sAdvertisingIdClientClassName = "com.google.android.gms.ads.identifier.AdvertisingIdClient";
 
+    public static class AdvertisingInfo {
+        public final String advertisingId;
+        public final boolean limitAdTracking;
+
+        public AdvertisingInfo(String adId, boolean limitAdTrackingEnabled) {
+            advertisingId = adId;
+            limitAdTracking = limitAdTrackingEnabled;
+        }
+    }
+
     public interface GpsHelperListener {
         public void onFetchAdInfoCompleted();
     }
 
-    static boolean isPlayServicesAvailable(final Context context) {
+    public static boolean isPlayServicesAvailable(final Context context) {
         try {
             MethodBuilder methodBuilder = MethodBuilderFactory.create(null, "isGooglePlayServicesAvailable")
                     .setStatic(Class.forName(sPlayServicesUtilClassName))
@@ -69,6 +80,29 @@ static public void fetchAdvertisingInfoAsync(final Context context, final GpsHel
         }
     }
 
+    @Nullable
+    static public AdvertisingInfo fetchAdvertisingInfoSync(final Context context) {
+        if (context == null) {
+            return null;
+        }
+        Object adInfo = null;
+        try {
+            MethodBuilder methodBuilder = MethodBuilderFactory.create(null, "getAdvertisingIdInfo")
+                    .setStatic(Class.forName(sAdvertisingIdClientClassName))
+                    .addParam(Context.class, context);
+
+            adInfo = methodBuilder.execute();
+        } catch (Exception e) {
+            MoPubLog.d("Unable to obtain Google AdvertisingIdClient.Info via reflection.");
+            return null;
+        }
+
+        String advertisingId = reflectedGetAdvertisingId(adInfo, null);
+        boolean isLimitAdTrackingEnabled = reflectedIsLimitAdTrackingEnabled(adInfo, false);
+
+        return new AdvertisingInfo(advertisingId, isLimitAdTrackingEnabled);
+    }
+
     static private void internalFetchAdvertisingInfoAsync(final Context context, final GpsHelperListener gpsHelperListener) {
         if (!classFound(sAdvertisingIdClientClassName)) {
             if (gpsHelperListener != null) {
diff --git a/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java b/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java
index e1d227fd..c1161d70 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java
@@ -2,35 +2,34 @@
 
 import android.content.Context;
 import android.net.http.AndroidHttpClient;
-import android.os.Handler;
-import android.os.Looper;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.text.TextUtils;
 import android.webkit.WebView;
 
-import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.AsyncTasks;
-import com.mopub.common.util.DeviceUtils;
 
-import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.client.params.HttpClientParams;
 import org.apache.http.params.HttpConnectionParams;
 import org.apache.http.params.HttpParams;
 
-import java.util.Arrays;
+import java.io.UnsupportedEncodingException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.URL;
+import java.net.URLDecoder;
 
 import static com.mopub.common.util.ResponseHeader.USER_AGENT;
 
 public class HttpClient {
     private static final int CONNECTION_TIMEOUT = 10000;
     private static final int SOCKET_TIMEOUT = 10000;
+    private static final String DEFAULT_USER_AGENT = System.getProperty("http.agent");
     private static String sWebViewUserAgent;
 
     public static AndroidHttpClient getHttpClient() {
-
-        String defaultUserAgent = DeviceUtils.getUserAgent();
-        String userAgent = getWebViewUserAgent(defaultUserAgent);
+        final String userAgent = getWebViewUserAgent(DEFAULT_USER_AGENT);
 
         AndroidHttpClient httpClient = AndroidHttpClient.newInstance(userAgent);
 
@@ -42,8 +41,22 @@ public static AndroidHttpClient getHttpClient() {
         return httpClient;
     }
 
-    public static HttpGet initializeHttpGet(final String url, final Context context) {
-        final HttpGet httpGet = new HttpGet(url);
+    public static HttpGet initializeHttpGet(@NonNull final String url) {
+        return initializeHttpGet(url, null);
+    }
+
+    public static HttpGet initializeHttpGet(@NonNull String url, @Nullable final Context context) {
+        Preconditions.checkNotNull(url);
+
+        // Try to encode url. If this fails, then fallback on the original url
+        String getUrl;
+        try {
+            getUrl = urlEncode(url);
+        } catch (Exception e) {
+            getUrl = url;
+        }
+
+        final HttpGet httpGet = new HttpGet(getUrl);
 
         if (getWebViewUserAgent() == null && context != null) {
             // Memoize the user agent since creating WebViews is expensive
@@ -59,65 +72,70 @@ public static HttpGet initializeHttpGet(final String url, final Context context)
         return httpGet;
     }
 
-    public static void makeTrackingHttpRequest(final Iterable<String> urls, final Context context) {
-        makeTrackingHttpRequest(urls, context, null);
-    }
+    /**
+     * This method constructs a properly encoded and valid URI adhering to legal characters for
+     * each component. See Android docs on these classes for reference.
+     */
+    public static String urlEncode(@NonNull final String url) throws Exception {
+        Preconditions.checkNotNull(url);
+
+        // If the URL is improperly encoded, then fail
+        if (isUrlImproperlyEncoded(url)) {
+            throw new UnsupportedEncodingException("URL is improperly encoded: " + url);
+        }
 
-    public static void makeTrackingHttpRequest(final Iterable<String> urls,
-            final Context context,
-            final MoPubEvents.Type type) {
-        if (urls == null || context == null) {
-            return;
+        // If the url is unencoded, then encode it. Otherwise it is already properly encoded
+        // and leave it as is.
+        URI uri;
+        if (isUrlUnencoded(url)) {
+            uri = encodeUrl(url);
+        } else {
+            uri = new URI(url);
         }
 
-        final DownloadTask.DownloadTaskListener downloadTaskListener = new DownloadTask.DownloadTaskListener() {
-            @Override
-            public void onComplete(final String url, final DownloadResponse downloadResponse) {
-                if (downloadResponse == null || downloadResponse.getStatusCode() != HttpStatus.SC_OK) {
-                    MoPubLog.d("Failed to hit tracking endpoint: " + url);
-                    return;
-                }
-
-                final String result = HttpResponses.asResponseString(downloadResponse);
-                if (result != null) {
-                    MoPubLog.d("Successfully hit tracking endpoint: " + url);
-                } else {
-                    MoPubLog.d("Failed to hit tracking endpoint: " + url);
-                }
-            }
-        };
-
-        // Hold onto the application context in closure instead of activity context
-        final Context appContext = context.getApplicationContext();
-        final Runnable trackingHttpRequestRunnable = new Runnable() {
-            @Override
-            public void run() {
-                for (final String url : urls) {
-                    try {
-                        final HttpGet httpGet = initializeHttpGet(url, appContext);
-                        AsyncTasks.safeExecuteOnExecutor(
-                                new DownloadTask(downloadTaskListener, type),
-                                httpGet
-                        );
-                    } catch (Exception e) {
-                        MoPubLog.d("Failed to hit tracking endpoint: " + url);
-                    }
-                }
-            }
-        };
-
-        new Handler(Looper.getMainLooper()).post(trackingHttpRequestRunnable);
+        return uri.toURL().toString();
     }
 
-    public static void makeTrackingHttpRequest(final String url,
-            final Context context) {
-        makeTrackingHttpRequest(url, context, null);
+    /**
+     * This method tries to decode the URL and returns false if it can't due to improper encoding.
+     */
+    static boolean isUrlImproperlyEncoded(@NonNull String url) {
+        try {
+            URLDecoder.decode(url, "UTF-8");
+        } catch (UnsupportedEncodingException e) {
+            MoPubLog.w("Url is improperly encoded: " + url);
+            return true;
+        }
+        return false;
     }
 
-    public static void makeTrackingHttpRequest(final String url,
-            final Context context,
-            final MoPubEvents.Type type) {
-        makeTrackingHttpRequest(Arrays.asList(url), context, type);
+    /**
+     * This method tries to construct a URI and returns true if it can't due to illegal characters
+     * in the url.
+     */
+    static boolean isUrlUnencoded(@NonNull String url) {
+        try {
+            new URI(url);
+        } catch (URISyntaxException e) {
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * This method encodes each component of the URL into a valid URI.
+     */
+    static URI encodeUrl(@NonNull String urlString) throws Exception {
+        URI uri;
+        try {
+            URL url = new URL(urlString);
+            uri = new URI(url.getProtocol(), url.getUserInfo(), url.getHost(), url.getPort(),
+                    url.getPath(), url.getQuery(), url.getRef());
+        } catch (Exception e) {
+            MoPubLog.w("Failed to encode url: " + urlString);
+            throw e;
+        }
+        return uri;
     }
 
     /**
@@ -132,7 +150,7 @@ public synchronized static String getWebViewUserAgent(String defaultUserAgent) {
     }
 
     /**
-     * @return the user agent of an Androd WebView or {@code null}
+     * @return the user agent of an Android WebView or {@code null}
      */
     public synchronized static String getWebViewUserAgent() {
         return getWebViewUserAgent(null);
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
index 9700f871..83de6b15 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
@@ -1,7 +1,7 @@
 package com.mopub.common;
 
 public class MoPub {
-    public static final String SDK_VERSION = "3.3.0";
+    public static final String SDK_VERSION = "3.4.0";
 
     public static enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java b/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
index e84ef15b..9a1b5159 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
@@ -32,8 +32,8 @@
 import static com.mopub.common.util.Drawables.RIGHT_ARROW;
 import static com.mopub.common.util.Drawables.UNLEFT_ARROW;
 import static com.mopub.common.util.Drawables.UNRIGHT_ARROW;
-import static com.mopub.common.util.IntentUtils.deviceCanHandleIntent;
-import static com.mopub.common.util.IntentUtils.isDeepLink;
+import static com.mopub.common.util.Intents.deviceCanHandleIntent;
+import static com.mopub.common.util.Intents.isDeepLink;
 
 public class MoPubBrowser extends Activity {
     public static final String DESTINATION_URL_KEY = "URL";
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/BaseEvent.java b/mopub-sdk/src/main/java/com/mopub/common/event/BaseEvent.java
index 439ec8f0..abe3b8b4 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/event/BaseEvent.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/BaseEvent.java
@@ -126,14 +126,6 @@ public String getAppVersion() {
         return ClientMetadata.getInstance().getAppVersion();
     }
 
-    public String getClientAdvertisingId() {
-        return ClientMetadata.getInstance().getAdvertisingId();
-    }
-
-    public Boolean getClientDoNotTrack() {
-        return ClientMetadata.getInstance().isDoNotTrackSet();
-    }
-
     public String getDeviceManufacturer() {
         return ClientMetadata.getInstance().getDeviceManufacturer();
     }
@@ -239,8 +231,6 @@ public String toString() {
                 "AppName: " + getAppName() + "\n" +
                 "AppPackageName: " + getAppPackageName() + "\n" +
                 "AppVersion: " + getAppVersion() + "\n" +
-                "ClientAdvertisingId: " + getClientAdvertisingId() + "\n" +
-                "ClientDoNotTrack: " + getClientDoNotTrack() + "\n" +
                 "DeviceManufacturer: " + getDeviceManufacturer() + "\n" +
                 "DeviceModel: " + getDeviceModel() + "\n" +
                 "DeviceProduct: " + getDeviceProduct() + "\n" +
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java b/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java
index c777c28c..7d54c21d 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java
@@ -89,10 +89,6 @@ public static String getHashedUdid(final Context context) {
         return Utils.sha1(udid);
     }
 
-    public static String getUserAgent() {
-        return System.getProperty("http.agent");
-    }
-
     public static boolean isNetworkAvailable(final Context context) {
         if (context == null) {
             return false;
@@ -143,9 +139,8 @@ public static int memoryCacheSizeBytes(final Context context) {
         return (int) result;
     }
 
-    public static long diskCacheSizeBytes(File dir) {
-        long size = MIN_DISK_CACHE_SIZE;
-
+    public static long diskCacheSizeBytes(File dir, long minSize) {
+        long size = minSize;
         try {
             StatFs statFs = new StatFs(dir.getAbsolutePath());
             long availableBytes = ((long) statFs.getBlockCount()) * statFs.getBlockSize();
@@ -158,6 +153,10 @@ public static long diskCacheSizeBytes(File dir) {
         return Math.max(Math.min(size, MAX_DISK_CACHE_SIZE), MIN_DISK_CACHE_SIZE);
     }
 
+    public static long diskCacheSizeBytes(File dir) {
+        return diskCacheSizeBytes(dir, MIN_DISK_CACHE_SIZE);
+    }
+
     public static int getScreenOrientation(@NonNull final Activity activity) {
         final int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();
         final DisplayMetrics displayMetrics = new DisplayMetrics();
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/IntentUtils.java b/mopub-sdk/src/main/java/com/mopub/common/util/IntentUtils.java
deleted file mode 100644
index 5eee55f5..00000000
--- a/mopub-sdk/src/main/java/com/mopub/common/util/IntentUtils.java
+++ /dev/null
@@ -1,112 +0,0 @@
-package com.mopub.common.util;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.content.pm.ResolveInfo;
-import android.net.Uri;
-import android.os.Bundle;
-
-import com.mopub.common.logging.MoPubLog;
-
-import java.util.List;
-
-import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
-
-public class IntentUtils {
-    private static final String TWITTER_APPLICATION_DEEPLINK_URL = "twitter://timeline";
-    private static final String PLAY_GOOGLE_COM = "play.google.com";
-    private static final String MARKET_ANDROID_COM = "market.android.com";
-    private static final String MARKET = "market";
-    private static final String HTTP = "http";
-    private static final String HTTPS = "https";
-
-    private IntentUtils() {}
-
-    /**
-     * Adding FLAG_ACTIVITY_NEW_TASK with startActivityForResult will always result in a
-     * RESULT_CANCELED, so don't use it for Activity contexts.
-     */
-    public static Intent getStartActivityIntent(final Context context, final Class clazz, final Bundle extras) {
-        final Intent intent = new Intent(context, clazz);
-
-        if (!(context instanceof Activity)) {
-            intent.addFlags(FLAG_ACTIVITY_NEW_TASK);
-        }
-
-        if (extras != null) {
-            intent.putExtras(extras);
-        }
-
-        return intent;
-    }
-
-    public static boolean deviceCanHandleIntent(final Context context, final Intent intent) {
-        try {
-            final PackageManager packageManager = context.getPackageManager();
-            final List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
-            return !activities.isEmpty();
-        } catch (NullPointerException e) {
-            return false;
-        }
-    }
-
-    public static boolean isHttpUrl(final String url) {
-        if (url == null) {
-            return false;
-        }
-
-        final String scheme = Uri.parse(url).getScheme();
-        return (HTTP.equals(scheme) || HTTPS.equals(scheme));
-    }
-
-    private static boolean isAppStoreUrl(final String url) {
-        if (url == null) {
-            return false;
-        }
-
-        final Uri uri = Uri.parse(url);
-        final String scheme = uri.getScheme();
-        final String host = uri.getHost();
-
-        if (PLAY_GOOGLE_COM.equals(host) || MARKET_ANDROID_COM.equals(host)) {
-            return true;
-        }
-
-        if (MARKET.equals(scheme)) {
-            return true;
-        }
-
-        return false;
-    }
-
-    public static boolean isDeepLink(final String url) {
-        return isAppStoreUrl(url) || !isHttpUrl(url);
-    }
-
-    public static boolean canHandleTwitterUrl(Context context) {
-        return canHandleApplicationUrl(context, TWITTER_APPLICATION_DEEPLINK_URL, false);
-    }
-
-    public static boolean canHandleApplicationUrl(Context context, String url) {
-        return canHandleApplicationUrl(context, url, true);
-    }
-
-    public static boolean canHandleApplicationUrl(Context context, String url, boolean logError) {
-        // Determine which activities can handle the intent
-        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
-
-        // If there are no relevant activities, don't follow the link
-        if (!IntentUtils.deviceCanHandleIntent(context, intent)) {
-            if (logError) {
-                MoPubLog.w("Could not handle application specific action: " + url + ". " +
-                        "You may be running in the emulator or another device which does not " +
-                        "have the required application.");
-            }
-            return false;
-        }
-
-        return true;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java b/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
new file mode 100644
index 00000000..a3da48c9
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
@@ -0,0 +1,183 @@
+package com.mopub.common.util;
+
+import android.app.Activity;
+import android.content.ActivityNotFoundException;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.exceptions.IntentNotResolvableException;
+import com.mopub.exceptions.UrlParseException;
+
+import java.util.List;
+
+import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
+
+public class Intents {
+    private static final String TWITTER_APPLICATION_DEEPLINK_URL = "twitter://timeline";
+    private static final String PLAY_GOOGLE_COM = "play.google.com";
+    private static final String MARKET_ANDROID_COM = "market.android.com";
+    private static final String MARKET = "market";
+    private static final String HTTP = "http";
+    private static final String HTTPS = "https";
+
+    private Intents() {}
+
+    public static void startActivity(@NonNull final Context context, @NonNull final Intent intent)
+            throws IntentNotResolvableException {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(intent);
+
+        if (!(context instanceof Activity)) {
+            intent.addFlags(FLAG_ACTIVITY_NEW_TASK);
+        }
+
+        try {
+            context.startActivity(intent);
+        } catch (ActivityNotFoundException e) {
+            throw new IntentNotResolvableException(e);
+        }
+    }
+
+    /**
+     * Adding FLAG_ACTIVITY_NEW_TASK with startActivityForResult will always result in a
+     * RESULT_CANCELED, so don't use it for Activity contexts.
+     */
+    public static Intent getStartActivityIntent(@NonNull final Context context,
+            @NonNull final Class clazz, @Nullable final Bundle extras) {
+        final Intent intent = new Intent(context, clazz);
+
+        if (!(context instanceof Activity)) {
+            intent.addFlags(FLAG_ACTIVITY_NEW_TASK);
+        }
+
+        if (extras != null) {
+            intent.putExtras(extras);
+        }
+
+        return intent;
+    }
+
+    public static boolean deviceCanHandleIntent(@NonNull final Context context,
+            @NonNull final Intent intent) {
+        try {
+            final PackageManager packageManager = context.getPackageManager();
+            final List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
+            return !activities.isEmpty();
+        } catch (NullPointerException e) {
+            return false;
+        }
+    }
+
+    public static boolean isHttpUrl(final String url) {
+        if (url == null) {
+            return false;
+        }
+
+        final String scheme = Uri.parse(url).getScheme();
+        return (HTTP.equals(scheme) || HTTPS.equals(scheme));
+    }
+
+    private static boolean isAppStoreUrl(final String url) {
+        if (url == null) {
+            return false;
+        }
+
+        final Uri uri = Uri.parse(url);
+        final String scheme = uri.getScheme();
+        final String host = uri.getHost();
+
+        if (PLAY_GOOGLE_COM.equals(host) || MARKET_ANDROID_COM.equals(host)) {
+            return true;
+        }
+
+        if (MARKET.equals(scheme)) {
+            return true;
+        }
+
+        return false;
+    }
+
+    public static boolean isDeepLink(final String url) {
+        return isAppStoreUrl(url) || !isHttpUrl(url);
+    }
+
+    public static boolean canHandleTwitterUrl(final Context context) {
+        return canHandleApplicationUrl(context, TWITTER_APPLICATION_DEEPLINK_URL, false);
+    }
+
+    public static boolean canHandleApplicationUrl(final Context context, final String url) {
+        return canHandleApplicationUrl(context, url, true);
+    }
+
+    public static boolean canHandleApplicationUrl(final Context context, final String url,
+            final boolean logError) {
+        // Determine which activities can handle the intent
+        final Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
+
+        // If there are no relevant activities, don't follow the link
+        if (!Intents.deviceCanHandleIntent(context, intent)) {
+            if (logError) {
+                MoPubLog.w("Could not handle application specific action: " + url + ". " +
+                        "You may be running in the emulator or another device which does not " +
+                        "have the required application.");
+            }
+            return false;
+        }
+
+        return true;
+    }
+
+    public static boolean isNativeBrowserScheme(@NonNull final String url) {
+        return url.startsWith("mopubnativebrowser://");
+    }
+
+    /**
+     * Native Browser Scheme URLs provide a means for advertisers to include links that click out to
+     * an external browser, rather than the MoPub in-app browser. Properly formatted native browser
+     * URLs take the form of "mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.mopub.com".
+     *
+     * @param url
+     * @return An Intent that will open an app-external browser taking the user to a page specified
+     * in the query parameter of the passed-in url
+     * @throws UrlParseException if the provided url has an invalid format or is non-hierarchical
+     */
+    public static Intent intentForNativeBrowserScheme(@NonNull final String url)
+            throws UrlParseException {
+        Preconditions.checkNotNull(url);
+
+        if (!isNativeBrowserScheme(url)) {
+            throw new UrlParseException("URL does not have mopubnativebrowser:// scheme.");
+        }
+
+        final Uri uri = Uri.parse(url);
+
+        if (!"navigate".equals(uri.getHost())) {
+            throw new UrlParseException("URL missing 'navigate' host parameter.");
+        }
+
+        final String urlToOpenInNativeBrowser;
+        try {
+            urlToOpenInNativeBrowser = uri.getQueryParameter("url");
+        } catch (UnsupportedOperationException e) {
+            // Accessing query parameters only makes sense for hierarchical URIs as per:
+            // http://developer.android.com/reference/android/net/Uri.html#getQueryParameter(java.lang.String)
+            MoPubLog.w("Could not handle url: " + url);
+            throw new UrlParseException("Passed-in URL did not create a hierarchical URI.");
+        }
+
+        if (urlToOpenInNativeBrowser == null) {
+            throw new UrlParseException("URL missing 'url' query parameter.");
+        }
+
+        final Uri intentUri = Uri.parse(urlToOpenInNativeBrowser);
+        return new Intent(Intent.ACTION_VIEW, intentUri);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Json.java b/mopub-sdk/src/main/java/com/mopub/common/util/Json.java
index e33ac0b3..91e0e614 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Json.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Json.java
@@ -1,5 +1,7 @@
 package com.mopub.common.util;
 
+import android.text.TextUtils;
+
 import com.mopub.common.logging.MoPubLog;
 
 import org.json.JSONArray;
@@ -12,10 +14,10 @@
 import java.util.Map;
 
 public class Json {
-    public static Map<String, String> jsonStringToMap(String jsonParams) throws Exception {
+    public static Map<String, String> jsonStringToMap(String jsonParams) throws JSONException {
         Map<String, String> jsonMap = new HashMap<String, String>();
 
-        if (jsonParams == null || jsonParams.equals("")) return jsonMap;
+        if (TextUtils.isEmpty(jsonParams)) return jsonMap;
 
         JSONObject jsonObject = (JSONObject) new JSONTokener(jsonParams).nextValue();
         Iterator<?> keys = jsonObject.keys();
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java b/mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java
index 4a1abecf..aaf7b4bf 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java
@@ -137,7 +137,7 @@ public static boolean isDebuggable(@NonNull final Context context) {
         for (final Class<? extends Activity> activityClass : requiredActivities) {
             final Intent intent = new Intent(context, activityClass);
 
-            if (IntentUtils.deviceCanHandleIntent(context, intent) == isDeclared) {
+            if (Intents.deviceCanHandleIntent(context, intent) == isDeclared) {
                 activities.add(activityClass);
             }
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/exceptions/IntentNotResolvableException.java b/mopub-sdk/src/main/java/com/mopub/exceptions/IntentNotResolvableException.java
new file mode 100644
index 00000000..aa114d2a
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/exceptions/IntentNotResolvableException.java
@@ -0,0 +1,7 @@
+package com.mopub.exceptions;
+
+public class IntentNotResolvableException extends Exception {
+    public IntentNotResolvableException(Throwable throwable) {
+        super(throwable);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/exceptions/UrlParseException.java b/mopub-sdk/src/main/java/com/mopub/exceptions/UrlParseException.java
new file mode 100644
index 00000000..cca732da
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/exceptions/UrlParseException.java
@@ -0,0 +1,11 @@
+package com.mopub.exceptions;
+
+public class UrlParseException extends Exception {
+    public UrlParseException(final String detailMessage) {
+        super(detailMessage);
+    }
+
+    public UrlParseException(final Throwable throwable) {
+        super(throwable);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java
index 57567c9e..ced94fa6 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java
@@ -1,13 +1,17 @@
 package com.mopub.mobileads;
 
+import android.support.annotation.Nullable;
 import android.view.GestureDetector;
 import android.view.MotionEvent;
 import android.view.View;
 
+import com.mopub.common.AdReport;
+
 public class AdAlertGestureListener extends GestureDetector.SimpleOnGestureListener{
     private static final int MINIMUM_NUMBER_OF_ZIGZAGS_TO_FLAG = 4;
     private static final float MAXIMUM_THRESHOLD_X_IN_DIPS = 100;
-    private static final float MAXIMUM_THRESHOLD_Y_IN_DIPS = 50;
+    private static final float MAXIMUM_THRESHOLD_Y_IN_DIPS = 100;
+    @Nullable private final AdReport mAdReport;
 
     private float mCurrentThresholdInDips = MAXIMUM_THRESHOLD_X_IN_DIPS;
     private float mPreviousPositionX;
@@ -21,15 +25,14 @@
     private ZigZagState mCurrentZigZagState = ZigZagState.UNSET;
 
     private View mView;
-    private AdConfiguration mAdConfiguration;
 
-    AdAlertGestureListener(View view, AdConfiguration adConfiguration) {
+    AdAlertGestureListener(View view, @Nullable AdReport adReport) {
         super();
         if (view != null && view.getWidth() > 0) {
             mCurrentThresholdInDips = Math.min(MAXIMUM_THRESHOLD_X_IN_DIPS, view.getWidth() / 3f);
         }
         mView = view;
-        mAdConfiguration = adConfiguration;
+        mAdReport = adReport;
     }
 
     @Override
@@ -69,7 +72,7 @@ public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float d
 
     void finishGestureDetection() {
         if (mCurrentZigZagState == mCurrentZigZagState.FINISHED) {
-            mAdAlertReporter = new AdAlertReporter(mView.getContext(), mView, mAdConfiguration);
+            mAdAlertReporter = new AdAlertReporter(mView.getContext(), mView, mAdReport);
             mAdAlertReporter.send();
         }
         reset();
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
index 8b49b4c9..c713f193 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
@@ -4,8 +4,10 @@
 import android.content.Intent;
 import android.graphics.Bitmap;
 import android.net.Uri;
+import android.support.annotation.Nullable;
 import android.view.View;
 
+import com.mopub.common.AdReport;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.DateAndTime;
 import com.mopub.common.util.Streams;
@@ -16,7 +18,6 @@
 import java.io.FileOutputStream;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
-import java.util.Date;
 import java.util.Locale;
 
 public class AdAlertReporter {
@@ -33,16 +34,14 @@
 
     private final View mView;
     private final Context mContext;
-    private final AdConfiguration mAdConfiguration;
     private Intent mEmailIntent;
     private ArrayList<Uri> mEmailAttachments;
     private String mParameters;
     private String mResponse;
 
-    public AdAlertReporter(final Context context, final View view, final AdConfiguration adConfiguration) {
+    public AdAlertReporter(final Context context, final View view, @Nullable final AdReport adReport) {
         mView = view;
         mContext = context;
-        mAdConfiguration = adConfiguration;
 
         mEmailAttachments = new ArrayList<Uri>();
 
@@ -52,11 +51,15 @@ public AdAlertReporter(final Context context, final View view, final AdConfigura
         initEmailIntent();
         Bitmap screenShot = takeScreenShot();
         String screenShotString = convertBitmapInWEBPToBase64EncodedString(screenShot);
-        mParameters = formParameters();
-        mResponse = getResponseString();
+        mParameters = "";
+        mResponse = "";
+        if (adReport != null) {
+            mParameters = adReport.toString();
+            mResponse = adReport.getResponseString();
+        }
 
         addEmailSubject();
-        addEmailBody( new String[]{ mParameters, mResponse, screenShotString });
+        addEmailBody(mParameters, mResponse, screenShotString);
         addTextAttachment(PARAMETERS_FILENAME, mParameters);
         addTextAttachment(MARKUP_FILENAME, mResponse);
         addImageAttachment(SCREEN_SHOT_FILENAME, screenShot);
@@ -112,38 +115,6 @@ private String convertBitmapInWEBPToBase64EncodedString(Bitmap bitmap) {
         return result;
     }
 
-    private String formParameters() {
-        StringBuilder parameters = new StringBuilder();
-
-        if (mAdConfiguration != null) {
-            appendKeyValue(parameters, "sdk_version", mAdConfiguration.getSdkVersion());
-            appendKeyValue(parameters, "creative_id", mAdConfiguration.getDspCreativeId());
-            appendKeyValue(parameters, "platform_version", Integer.toString(mAdConfiguration.getPlatformVersion()));
-            appendKeyValue(parameters, "device_model", mAdConfiguration.getDeviceModel());
-            appendKeyValue(parameters, "ad_unit_id", mAdConfiguration.getAdUnitId());
-            appendKeyValue(parameters, "device_locale", mAdConfiguration.getDeviceLocale());
-            appendKeyValue(parameters, "device_id", mAdConfiguration.getHashedUdid());
-            appendKeyValue(parameters, "network_type", mAdConfiguration.getNetworkType());
-            appendKeyValue(parameters, "platform", mAdConfiguration.getPlatform());
-            appendKeyValue(parameters, "timestamp", getFormattedTimeStamp(mAdConfiguration.getTimeStamp()));
-            appendKeyValue(parameters, "ad_type", mAdConfiguration.getAdType());
-            appendKeyValue(parameters, "ad_size", "{" + mAdConfiguration.getWidth() + ", " + mAdConfiguration.getHeight() + "}");
-        }
-
-        return parameters.toString();
-    }
-
-    private String getResponseString() {
-        return (mAdConfiguration != null) ? mAdConfiguration.getResponseString() : "";
-    }
-
-    private void appendKeyValue(StringBuilder parameters, String key, String value) {
-        parameters.append(key);
-        parameters.append(" : ");
-        parameters.append(value);
-        parameters.append("\n");
-    }
-
     private void addEmailSubject() {
         mEmailIntent.putExtra(Intent.EXTRA_SUBJECT, "New creative violation report - " + mDateString);
     }
@@ -202,15 +173,6 @@ private void addTextAttachment(String fileName, String body) {
         }
     }
 
-    private String getFormattedTimeStamp(long timeStamp) {
-        if (timeStamp != -1) {
-            SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN, Locale.US);
-            return dateFormat.format(new Date(timeStamp));
-        } else {
-            return null;
-        }
-    }
-
     @Deprecated // for testing
     Intent getEmailIntent() {
         return mEmailIntent;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java
deleted file mode 100644
index 1be6646a..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java
+++ /dev/null
@@ -1,295 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.os.Build;
-import android.provider.Settings;
-import android.webkit.WebView;
-
-import com.mopub.common.MoPub;
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.util.DateAndTime;
-import com.mopub.common.util.Utils;
-import com.mopub.common.util.VersionCode;
-
-import org.apache.http.HttpResponse;
-
-import java.io.Serializable;
-import java.util.Map;
-
-import static com.mopub.common.util.ResponseHeader.AD_TIMEOUT;
-import static com.mopub.common.util.ResponseHeader.AD_TYPE;
-import static com.mopub.common.util.ResponseHeader.CLICK_TRACKING_URL;
-import static com.mopub.common.util.ResponseHeader.DSP_CREATIVE_ID;
-import static com.mopub.common.util.ResponseHeader.FAIL_URL;
-import static com.mopub.common.util.ResponseHeader.HEIGHT;
-import static com.mopub.common.util.ResponseHeader.IMPRESSION_URL;
-import static com.mopub.common.util.ResponseHeader.NETWORK_TYPE;
-import static com.mopub.common.util.ResponseHeader.REDIRECT_URL;
-import static com.mopub.common.util.ResponseHeader.REFRESH_TIME;
-import static com.mopub.common.util.ResponseHeader.WIDTH;
-import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
-import static com.mopub.common.network.HeaderUtils.extractHeader;
-import static com.mopub.common.network.HeaderUtils.extractIntHeader;
-import static com.mopub.common.network.HeaderUtils.extractIntegerHeader;
-
-public class AdConfiguration implements Serializable {
-    private static final long serialVersionUID = 0L;
-
-    private static final int MINIMUM_REFRESH_TIME_MILLISECONDS = 10000;
-    private static final int DEFAULT_REFRESH_TIME_MILLISECONDS = 60000;
-    private static final String mPlatform = "Android";
-    private final String mSdkVersion;
-
-    private final String mHashedUdid;
-    private final String mUserAgent;
-    private final String mDeviceLocale;
-    private final String mDeviceModel;
-    private final int mPlatformVersion;
-
-    private long mBroadcastIdentifier;
-    private String mResponseString;
-    private String mAdUnitId;
-
-    private String mAdType;
-    private String mNetworkType;
-    private String mRedirectUrl;
-    private String mClickthroughUrl;
-    private String mFailUrl;
-    private String mImpressionUrl;
-    private long mTimeStamp;
-    private int mWidth;
-    private int mHeight;
-    private Integer mAdTimeoutDelay;
-    private int mRefreshTimeMilliseconds;
-    private String mDspCreativeId;
-
-    public static AdConfiguration extractFromMap(Map<String, Object> map) {
-        if (map == null) {
-            return null;
-        }
-
-        Object adConfiguration = map.get(AD_CONFIGURATION_KEY);
-
-        if (adConfiguration instanceof AdConfiguration) {
-            return (AdConfiguration) adConfiguration;
-        }
-
-        return null;
-    }
-
-    @VisibleForTesting
-    public AdConfiguration(final Context context) {
-        setDefaults();
-
-        if (context != null) {
-            String udid = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);
-            mHashedUdid = Utils.sha1((udid != null) ? udid : "");
-
-            mUserAgent = new WebView(context).getSettings().getUserAgentString();
-            mDeviceLocale = context.getResources().getConfiguration().locale.toString();
-        } else {
-            mHashedUdid = null;
-            mUserAgent = null;
-            mDeviceLocale = null;
-        }
-
-        mBroadcastIdentifier = Utils.generateUniqueId();
-        mDeviceModel = Build.MANUFACTURER + " " + Build.MODEL;
-        mPlatformVersion = VersionCode.currentApiLevel().getApiLevel();
-        mSdkVersion = MoPub.SDK_VERSION;
-    }
-
-    void cleanup() {
-        setDefaults();
-    }
-
-    void addHttpResponse(final HttpResponse httpResponse) {
-        // Set the type of ad that has been returned, i.e. "html", "mraid"
-        // For interstitials, this header is set to "interstitial" and the type of interstitial
-        // is stored in the FULL_AD_TYPE header
-        mAdType = extractHeader(httpResponse, AD_TYPE);
-
-        // Set the network type of the ad.
-        mNetworkType = extractHeader(httpResponse, NETWORK_TYPE);
-
-        // Set the redirect URL prefix: navigating to any matching URLs will send us to the browser.
-        mRedirectUrl = extractHeader(httpResponse, REDIRECT_URL);
-
-        // Set the URL that is prepended to links for click-tracking purposes.
-        mClickthroughUrl = extractHeader(httpResponse, CLICK_TRACKING_URL);
-
-        // Set the fall-back URL to be used if the current request fails.
-        mFailUrl = extractHeader(httpResponse, FAIL_URL);
-
-        // Set the URL to be used for impression tracking.
-        mImpressionUrl = extractHeader(httpResponse, IMPRESSION_URL);
-
-        // Set the timestamp used for Ad Alert Reporting.
-        mTimeStamp = DateAndTime.now().getTime();
-
-        // Set the width and height.
-        mWidth = extractIntHeader(httpResponse, WIDTH, 0);
-        mHeight = extractIntHeader(httpResponse, HEIGHT, 0);
-
-        // Set the allowable amount of time an ad has before it automatically fails.
-        mAdTimeoutDelay = extractIntegerHeader(httpResponse, AD_TIMEOUT);
-
-        // Set the auto-refresh time. A timer will be scheduled upon ad success or failure.
-        if (!httpResponse.containsHeader(REFRESH_TIME.getKey())) {
-            mRefreshTimeMilliseconds = 0;
-        } else {
-            mRefreshTimeMilliseconds = extractIntHeader(httpResponse, REFRESH_TIME, 0) * 1000;
-            mRefreshTimeMilliseconds = Math.max(
-                    mRefreshTimeMilliseconds,
-                    MINIMUM_REFRESH_TIME_MILLISECONDS);
-        }
-
-        // Set the unique identifier for the creative that was returned.
-        mDspCreativeId = extractHeader(httpResponse, DSP_CREATIVE_ID);
-    }
-
-    /*
-     * MoPubView
-     */
-
-    String getAdUnitId() {
-        return mAdUnitId;
-    }
-
-    void setAdUnitId(String adUnitId) {
-        mAdUnitId = adUnitId;
-    }
-
-    String getResponseString() {
-        return mResponseString;
-    }
-
-    @VisibleForTesting
-    public void setResponseString(String responseString) {
-        mResponseString = responseString;
-    }
-
-    public long getBroadcastIdentifier() {
-        return mBroadcastIdentifier;
-    }
-
-    /*
-     * HttpResponse
-     */
-
-    String getAdType() {
-        return mAdType;
-    }
-
-    String getNetworkType() {
-        return mNetworkType;
-    }
-
-    String getRedirectUrl() {
-        return mRedirectUrl;
-    }
-
-    String getClickthroughUrl() {
-        return mClickthroughUrl;
-    }
-
-    @Deprecated
-    void setClickthroughUrl(String clickthroughUrl) {
-        mClickthroughUrl = clickthroughUrl;
-    }
-
-    String getFailUrl() {
-        return mFailUrl;
-    }
-
-    void setFailUrl(String failUrl) {
-        mFailUrl = failUrl;
-    }
-
-    String getImpressionUrl() {
-        return mImpressionUrl;
-    }
-
-    long getTimeStamp() {
-        return mTimeStamp;
-    }
-
-    int getWidth() {
-        return mWidth;
-    }
-
-    int getHeight() {
-        return mHeight;
-    }
-
-    Integer getAdTimeoutDelay() {
-        return mAdTimeoutDelay;
-    }
-
-    int getRefreshTimeMilliseconds() {
-        return mRefreshTimeMilliseconds;
-    }
-
-    @Deprecated
-    void setRefreshTimeMilliseconds(int refreshTimeMilliseconds) {
-        mRefreshTimeMilliseconds = refreshTimeMilliseconds;
-    }
-
-    String getDspCreativeId() {
-        return mDspCreativeId;
-    }
-
-    /*
-     * Context
-     */
-
-    String getHashedUdid() {
-        return mHashedUdid;
-    }
-
-    String getUserAgent() {
-        return mUserAgent;
-    }
-
-    String getDeviceLocale() {
-        return mDeviceLocale;
-    }
-
-    String getDeviceModel() {
-        return mDeviceModel;
-    }
-
-    int getPlatformVersion() {
-        return mPlatformVersion;
-    }
-
-    String getPlatform() {
-        return mPlatform;
-    }
-
-    /*
-     * Misc.
-     */
-
-    String getSdkVersion() {
-        return mSdkVersion;
-    }
-
-    private void setDefaults() {
-        mBroadcastIdentifier = 0;
-        mAdUnitId = null;
-        mResponseString = null;
-        mAdType = null;
-        mNetworkType = null;
-        mRedirectUrl = null;
-        mClickthroughUrl = null;
-        mImpressionUrl = null;
-        mTimeStamp = DateAndTime.now().getTime();
-        mWidth = 0;
-        mHeight = 0;
-        mAdTimeoutDelay = null;
-        mRefreshTimeMilliseconds = DEFAULT_REFRESH_TIME_MILLISECONDS;
-        mFailUrl = null;
-        mDspCreativeId = null;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
deleted file mode 100644
index b95f4659..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
+++ /dev/null
@@ -1,254 +0,0 @@
-package com.mopub.mobileads;
-
-import android.os.AsyncTask;
-
-import com.mopub.common.event.MoPubEvents;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.mobileads.factories.HttpClientFactory;
-
-import org.apache.http.HttpResponse;
-import org.apache.http.HttpStatus;
-import org.apache.http.client.HttpClient;
-import org.apache.http.client.methods.HttpGet;
-import org.apache.http.conn.ClientConnectionManager;
-
-import static com.mopub.common.util.ResponseHeader.AD_TYPE;
-import static com.mopub.common.util.ResponseHeader.USER_AGENT;
-import static com.mopub.common.util.ResponseHeader.WARMUP;
-import static com.mopub.common.network.HeaderUtils.extractHeader;
-
-public class AdFetchTask extends AsyncTask<String, Void, AdLoadTask> {
-    private TaskTracker mTaskTracker;
-    private AdViewController mAdViewController;
-    private Exception mException;
-    private HttpClient mHttpClient;
-    private long mTaskId;
-    private String mUserAgent;
-
-    private AdFetcher.FetchStatus mFetchStatus = AdFetcher.FetchStatus.NOT_SET;
-    private static final int MAXIMUM_REFRESH_TIME_MILLISECONDS = 600000;
-    private static final double EXPONENTIAL_BACKOFF_FACTOR = 1.5;
-    private static final MoPubEvents.Type EVENT_TYPE = MoPubEvents.Type.AD_REQUEST;
-
-    public AdFetchTask(TaskTracker taskTracker, AdViewController adViewController, String userAgent, int timeoutMilliseconds) {
-        mTaskTracker = taskTracker;
-
-        mAdViewController = adViewController;
-        mHttpClient = HttpClientFactory.create(timeoutMilliseconds);
-        mTaskId = mTaskTracker.getCurrentTaskId();
-        mUserAgent = userAgent;
-    }
-
-    @Override
-    protected AdLoadTask doInBackground(String... urls) {
-        AdLoadTask result = null;
-        try {
-            result = fetch(urls[0]);
-        } catch (Exception exception) {
-            mException = exception;
-        } finally {
-            shutdownHttpClient();
-        }
-        return result;
-    }
-
-    private AdLoadTask fetch(String url) throws Exception {
-        HttpGet httpget = new HttpGet(url);
-        httpget.addHeader(USER_AGENT.getKey(), mUserAgent);
-
-        if (!isStateValid()) return null;
-
-        HttpResponse response = mHttpClient.execute(httpget);
-
-        if (!isResponseValid(response)) return null;
-
-        mAdViewController.configureUsingHttpResponse(response);
-
-        if (!responseContainsContent(response)) return null;
-
-        return AdLoadTask.fromHttpResponse(response, mAdViewController);
-    }
-
-    private boolean responseContainsContent(HttpResponse response) {
-        // Ensure that the ad is not warming up.
-        if ("1".equals(extractHeader(response, WARMUP))) {
-            MoPubLog.d("Ad Unit (" + mAdViewController.getAdUnitId() + ") is still warming up. " +
-                    "Please try again in a few minutes.");
-            mFetchStatus = AdFetcher.FetchStatus.AD_WARMING_UP;
-            return false;
-        }
-
-        // Ensure that the ad type header is valid and not "clear".
-        String adType = extractHeader(response, AD_TYPE);
-        if ("clear".equals(adType)) {
-            MoPubLog.d("No ads found for adunit (" + mAdViewController.getAdUnitId() + ").");
-            mFetchStatus = AdFetcher.FetchStatus.CLEAR_AD_TYPE;
-            return false;
-        }
-
-        return true;
-    }
-
-    private boolean isResponseValid(HttpResponse response) {
-        if (response == null || response.getEntity() == null) {
-            MoPubLog.d("MoPub server returned null response.");
-            mFetchStatus = AdFetcher.FetchStatus.INVALID_SERVER_RESPONSE_NOBACKOFF;
-            return false;
-        }
-
-        final int statusCode = response.getStatusLine().getStatusCode();
-
-        // Client and Server HTTP errors should result in an exponential backoff
-        if (statusCode >= 400) {
-            MoPubLog.d("Server error: returned HTTP status code " + Integer.toString(statusCode) +
-                    ". Please try again.");
-            mFetchStatus = AdFetcher.FetchStatus.INVALID_SERVER_RESPONSE_BACKOFF;
-            return false;
-        }
-        // Other non-200 HTTP status codes should still fail
-        else if (statusCode != HttpStatus.SC_OK) {
-            MoPubLog.d("MoPub server returned invalid response: HTTP status code " +
-                    Integer.toString(statusCode) + ".");
-            mFetchStatus = AdFetcher.FetchStatus.INVALID_SERVER_RESPONSE_NOBACKOFF;
-            return false;
-        }
-        return true;
-    }
-
-    private boolean isStateValid() {
-        // We check to see if this AsyncTask was cancelled, as per
-        // http://developer.android.com/reference/android/os/AsyncTask.html
-        if (isCancelled()) {
-            mFetchStatus = AdFetcher.FetchStatus.FETCH_CANCELLED;
-            return false;
-        }
-
-        if (mAdViewController == null || mAdViewController.isDestroyed()) {
-            MoPubLog.d("Error loading ad: AdViewController has already been GCed or destroyed.");
-            return false;
-        }
-        return true;
-    }
-
-    @Override
-    protected void onPostExecute(AdLoadTask adLoadTask) {
-        if (!isMostCurrentTask()) {
-            MoPubLog.d("Ad response is stale.");
-            cleanup();
-            return;
-        }
-
-        // If cleanup() has already been called on the AdViewController, don't proceed.
-        if (mAdViewController == null || mAdViewController.isDestroyed()) {
-            if (adLoadTask != null) {
-                adLoadTask.cleanup();
-            }
-            mTaskTracker.markTaskCompleted(mTaskId);
-            cleanup();
-            return;
-        }
-
-        if (adLoadTask == null) {
-            if (mException != null) {
-                MoPubLog.d("Exception caught while loading ad: " + mException);
-            }
-
-            MoPubErrorCode errorCode;
-            switch (mFetchStatus) {
-                case NOT_SET:
-                    errorCode = MoPubErrorCode.UNSPECIFIED;
-                    break;
-                case FETCH_CANCELLED:
-                    errorCode = MoPubErrorCode.CANCELLED;
-                    break;
-                case INVALID_SERVER_RESPONSE_BACKOFF:
-                case INVALID_SERVER_RESPONSE_NOBACKOFF:
-                    errorCode = MoPubErrorCode.SERVER_ERROR;
-                    break;
-                case CLEAR_AD_TYPE:
-                case AD_WARMING_UP:
-                    errorCode = MoPubErrorCode.NO_FILL;
-                    break;
-                default:
-                    errorCode = MoPubErrorCode.UNSPECIFIED;
-                    break;
-            }
-
-            mAdViewController.adDidFail(errorCode);
-
-            /*
-             * There are numerous reasons for the ad fetch to fail, but only in the specific
-             * case of actual server failure should we exponentially back off.
-             *
-             * Note: We place the exponential backoff after AdViewController's adDidFail because we only
-             * want to increase refresh times after the first failure refresh timer is
-             * scheduled, and not before.
-             */
-            if (mFetchStatus == AdFetcher.FetchStatus.INVALID_SERVER_RESPONSE_BACKOFF) {
-                exponentialBackoff();
-                mFetchStatus = AdFetcher.FetchStatus.NOT_SET;
-            }
-        } else {
-            adLoadTask.execute();
-            adLoadTask.cleanup();
-        }
-
-        mTaskTracker.markTaskCompleted(mTaskId);
-        cleanup();
-    }
-
-    @Override
-    protected void onCancelled() {
-        if (!isMostCurrentTask()) {
-            MoPubLog.d("Ad response is stale.");
-            cleanup();
-            return;
-        }
-
-        MoPubLog.d("Ad loading was cancelled.");
-        if (mException != null) {
-            MoPubLog.d("Exception caught while loading ad: " + mException);
-        }
-        mTaskTracker.markTaskCompleted(mTaskId);
-        cleanup();
-    }
-
-    /* This helper function is called when a 4XX or 5XX error is received during an ad fetch.
-     * It exponentially increases the parent AdViewController's refreshTime up to a specified cap.
-     */
-    private void exponentialBackoff() {
-        if (mAdViewController == null) {
-            return;
-        }
-
-        int refreshTimeMilliseconds = mAdViewController.getRefreshTimeMilliseconds();
-
-        refreshTimeMilliseconds = (int) (refreshTimeMilliseconds * EXPONENTIAL_BACKOFF_FACTOR);
-        if (refreshTimeMilliseconds > MAXIMUM_REFRESH_TIME_MILLISECONDS) {
-            refreshTimeMilliseconds = MAXIMUM_REFRESH_TIME_MILLISECONDS;
-        }
-
-        mAdViewController.setRefreshTimeMilliseconds(refreshTimeMilliseconds);
-    }
-
-    private void cleanup() {
-        mTaskTracker = null;
-        mException = null;
-        mFetchStatus = AdFetcher.FetchStatus.NOT_SET;
-    }
-
-    private void shutdownHttpClient() {
-        if (mHttpClient != null) {
-            ClientConnectionManager manager = mHttpClient.getConnectionManager();
-            if (manager != null) {
-                manager.shutdown();
-            }
-            mHttpClient = null;
-        }
-    }
-
-    private boolean isMostCurrentTask() {
-        // if we've been cleaned up already, then we're definitely not the current task
-        return (mTaskTracker == null) ? false : mTaskTracker.isMostCurrentTask(mTaskId);
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java
deleted file mode 100644
index 79486a06..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java
+++ /dev/null
@@ -1,82 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.AsyncTasks;
-import com.mopub.mobileads.factories.AdFetchTaskFactory;
-
-/*
- * AdFetcher is a delegate of an AdViewController that handles loading ad data over a
- * network connection. The ad is fetched in a background thread by executing
- * AdFetchTask, which is an AsyncTask subclass. This class gracefully handles
- * the changes to AsyncTask in Android 4.0.1 (we continue to run parallel to
- * the app developer's background tasks). Further, AdFetcher keeps track of
- * the last completed task to prevent out-of-order execution.
- */
-public class AdFetcher {
-    public static final String HTML_RESPONSE_BODY_KEY = "Html-Response-Body";
-    public static final String REDIRECT_URL_KEY = "Redirect-Url";
-    public static final String CLICKTHROUGH_URL_KEY = "Clickthrough-Url";
-    public static final String SCROLLABLE_KEY = "Scrollable";
-    public static final String AD_CONFIGURATION_KEY = "Ad-Configuration";
-
-    private int mTimeoutMilliseconds = 10000;
-    private AdViewController mAdViewController;
-
-    private AdFetchTask mCurrentTask;
-    private String mUserAgent;
-    private final TaskTracker mTaskTracker;
-
-    enum FetchStatus {
-        NOT_SET,
-        FETCH_CANCELLED,
-        INVALID_SERVER_RESPONSE_BACKOFF,
-        INVALID_SERVER_RESPONSE_NOBACKOFF,
-        CLEAR_AD_TYPE,
-        AD_WARMING_UP;
-    }
-
-    public AdFetcher(AdViewController adview, String userAgent) {
-        mAdViewController = adview;
-        mUserAgent = userAgent;
-        mTaskTracker = new TaskTracker();
-    }
-
-    public void fetchAdForUrl(String url) {
-        mTaskTracker.newTaskStarted();
-        MoPubLog.i("Fetching ad for task #" + getCurrentTaskId());
-
-        if (mCurrentTask != null) {
-            mCurrentTask.cancel(true);
-        }
-
-        mCurrentTask = AdFetchTaskFactory.create(mTaskTracker, mAdViewController, mUserAgent, mTimeoutMilliseconds);
-
-        try {
-            AsyncTasks.safeExecuteOnExecutor(mCurrentTask, url);
-        } catch (Exception exception) {
-            MoPubLog.d("Error executing AdFetchTask", exception);
-        }
-    }
-
-    public void cancelFetch() {
-        if (mCurrentTask != null) {
-            MoPubLog.i("Canceling fetch ad for task #" + getCurrentTaskId());
-            mCurrentTask.cancel(true);
-        }
-    }
-
-    void cleanup() {
-        cancelFetch();
-
-        mAdViewController = null;
-        mUserAgent = "";
-    }
-
-    protected void setTimeout(int milliseconds) {
-        mTimeoutMilliseconds = milliseconds;
-    }
-
-    private long getCurrentTaskId() {
-        return mTaskTracker.getCurrentTaskId();
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
deleted file mode 100644
index 072c17a8..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
+++ /dev/null
@@ -1,242 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.net.Uri;
-
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.Json;
-import com.mopub.common.util.Strings;
-
-import org.apache.http.Header;
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpResponse;
-
-import java.io.IOException;
-import java.lang.ref.WeakReference;
-import java.lang.reflect.Method;
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.common.network.HeaderUtils.extractBooleanHeader;
-import static com.mopub.common.network.HeaderUtils.extractHeader;
-import static com.mopub.common.util.ResponseHeader.AD_TYPE;
-import static com.mopub.common.util.ResponseHeader.CLICK_TRACKING_URL;
-import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
-import static com.mopub.common.util.ResponseHeader.CUSTOM_SELECTOR;
-import static com.mopub.common.util.ResponseHeader.FULL_AD_TYPE;
-import static com.mopub.common.util.ResponseHeader.NATIVE_PARAMS;
-import static com.mopub.common.util.ResponseHeader.REDIRECT_URL;
-import static com.mopub.common.util.ResponseHeader.SCROLLABLE;
-import static com.mopub.mobileads.AdFetcher.CLICKTHROUGH_URL_KEY;
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
-import static com.mopub.mobileads.AdFetcher.SCROLLABLE_KEY;
-
-abstract class AdLoadTask {
-    WeakReference<AdViewController> mWeakAdViewController;
-    AdLoadTask(AdViewController adViewController) {
-        mWeakAdViewController = new WeakReference<AdViewController>(adViewController);
-    }
-
-    abstract void execute();
-
-    /*
-     * The AsyncTask thread pool often appears to keep references to these
-     * objects, preventing GC. This method should be used to release
-     * resources to mitigate the GC issue.
-     */
-    abstract void cleanup();
-
-    static AdLoadTask fromHttpResponse(HttpResponse response, AdViewController adViewController) throws IOException {
-        return new TaskExtractor(response, adViewController).extract();
-    }
-
-    private static class TaskExtractor {
-        private final HttpResponse response;
-        private final AdViewController adViewController;
-        private String adType;
-        private String adTypeCustomEventName;
-        private String fullAdType;
-
-        TaskExtractor(HttpResponse response, AdViewController adViewController){
-            this.response = response;
-            this.adViewController = adViewController;
-        }
-
-        AdLoadTask extract() throws IOException {
-            adType = extractHeader(response, AD_TYPE);
-            fullAdType = extractHeader(response, FULL_AD_TYPE);
-
-            MoPubLog.d("Loading ad type: " + AdTypeTranslator.getAdNetworkType(adType, fullAdType));
-
-            adTypeCustomEventName = AdTypeTranslator.getCustomEventNameForAdType(
-                    adViewController.getMoPubView(), adType, fullAdType);
-
-            if ("custom".equals(adType)) {
-                return extractCustomEventAdLoadTask();
-            } else if (eventDataIsInResponseBody(adType)) {
-                return extractCustomEventAdLoadTaskFromResponseBody();
-            } else {
-                return extractCustomEventAdLoadTaskFromNativeParams();
-            }
-        }
-
-        private AdLoadTask extractCustomEventAdLoadTask() {
-            MoPubLog.i("Performing custom event.");
-
-            // If applicable, try to invoke the new custom event system (which uses custom classes)
-            adTypeCustomEventName = extractHeader(response, CUSTOM_EVENT_NAME);
-            if (adTypeCustomEventName != null) {
-                String customEventData = extractHeader(response, CUSTOM_EVENT_DATA);
-                return createCustomEventAdLoadTask(customEventData);
-            }
-
-            // Otherwise, use the (deprecated) legacy custom event system for older clients
-            Header oldCustomEventHeader = response.getFirstHeader(CUSTOM_SELECTOR.getKey());
-            return new AdLoadTask.LegacyCustomEventAdLoadTask(adViewController, oldCustomEventHeader);
-        }
-
-        private AdLoadTask extractCustomEventAdLoadTaskFromResponseBody() throws IOException {
-            HttpEntity entity = response.getEntity();
-            String htmlData = entity != null ? Strings.fromStream(entity.getContent()) : "";
-
-            adViewController.getAdConfiguration().setResponseString(htmlData);
-
-            String redirectUrl = extractHeader(response, REDIRECT_URL);
-            String clickthroughUrl = extractHeader(response, CLICK_TRACKING_URL);
-            boolean scrollingEnabled = extractBooleanHeader(response, SCROLLABLE, false);
-
-            Map<String, String> eventDataMap = new HashMap<String, String>();
-            eventDataMap.put(HTML_RESPONSE_BODY_KEY, Uri.encode(htmlData));
-            eventDataMap.put(SCROLLABLE_KEY, Boolean.toString(scrollingEnabled));
-            if (redirectUrl != null) {
-                eventDataMap.put(REDIRECT_URL_KEY, redirectUrl);
-            }
-            if (clickthroughUrl != null) {
-                eventDataMap.put(CLICKTHROUGH_URL_KEY, clickthroughUrl);
-            }
-
-            String eventData = Json.mapToJsonString(eventDataMap);
-            return createCustomEventAdLoadTask(eventData);
-        }
-
-        private AdLoadTask extractCustomEventAdLoadTaskFromNativeParams() throws IOException {
-            String eventData = extractHeader(response, NATIVE_PARAMS);
-
-            return createCustomEventAdLoadTask(eventData);
-        }
-
-        private AdLoadTask createCustomEventAdLoadTask(String customEventData) {
-            Map<String, String> paramsMap = new HashMap<String, String>();
-            paramsMap.put(CUSTOM_EVENT_NAME.getKey(), adTypeCustomEventName);
-
-            if (customEventData != null) {
-                paramsMap.put(CUSTOM_EVENT_DATA.getKey(), customEventData);
-            }
-
-            return new AdLoadTask.CustomEventAdLoadTask(adViewController, paramsMap);
-        }
-
-        private boolean eventDataIsInResponseBody(String adType) {
-            // XXX Hack
-            return "mraid".equals(adType) || "html".equals(adType) || ("interstitial".equals(adType) && "vast".equals(fullAdType));
-        }
-    }
-
-    /*
-     * This is the new way of performing Custom Events. This will be invoked on new clients when
-     * X-Adtype is "custom" and the X-Custom-Event-Class-Name header is specified.
-     */
-    static class CustomEventAdLoadTask extends AdLoadTask {
-        private Map<String,String> mParamsMap;
-
-        public CustomEventAdLoadTask(AdViewController adViewController, Map<String, String> paramsMap) {
-            super(adViewController);
-            mParamsMap = paramsMap;
-        }
-
-        @Override
-        void execute() {
-            AdViewController adViewController = mWeakAdViewController.get();
-
-            if (adViewController == null || adViewController.isDestroyed()) {
-                return;
-            }
-
-            adViewController.setNotLoading();
-            adViewController.getMoPubView().loadCustomEvent(mParamsMap);
-        }
-
-        @Override
-        void cleanup() {
-            mParamsMap = null;
-        }
-
-        @Deprecated // for testing
-        Map<String, String> getParamsMap() {
-            return mParamsMap;
-        }
-    }
-
-    /*
-     * This is the old way of performing Custom Events, and is now deprecated. This will still be
-     * invoked on old clients when X-Adtype is "custom" and the new X-Custom-Event-Class-Name header
-     * is not specified (legacy custom events parse the X-Customselector header instead).
-     */
-    @Deprecated
-    static class LegacyCustomEventAdLoadTask extends AdLoadTask {
-        private Header mHeader;
-
-        public LegacyCustomEventAdLoadTask(AdViewController adViewController, Header header) {
-            super(adViewController);
-            mHeader = header;
-        }
-
-        @Override
-        void execute() {
-            AdViewController adViewController = mWeakAdViewController.get();
-            if (adViewController == null || adViewController.isDestroyed()) {
-                return;
-            }
-
-            adViewController.setNotLoading();
-            MoPubView mpv = adViewController.getMoPubView();
-
-            if (mHeader == null) {
-                MoPubLog.i("Couldn't call custom method because the server did not specify one.");
-                mpv.loadFailUrl(MoPubErrorCode.ADAPTER_NOT_FOUND);
-                return;
-            }
-
-            String methodName = mHeader.getValue();
-            MoPubLog.i("Trying to call method named " + methodName);
-
-            Class<? extends Activity> c;
-            Method method;
-            Activity userActivity = mpv.getActivity();
-            try {
-                c = userActivity.getClass();
-                method = c.getMethod(methodName, MoPubView.class);
-                method.invoke(userActivity, mpv);
-            } catch (NoSuchMethodException e) {
-                MoPubLog.d("Couldn't perform custom method named " + methodName +
-                        "(MoPubView view) because your activity class has no such method");
-                mpv.loadFailUrl(MoPubErrorCode.ADAPTER_NOT_FOUND);
-            } catch (Exception e) {
-                MoPubLog.d("Couldn't perform custom method named " + methodName);
-                mpv.loadFailUrl(MoPubErrorCode.ADAPTER_NOT_FOUND);
-            }
-        }
-
-        @Override
-        void cleanup() {
-            mHeader = null;
-        }
-
-        @Deprecated // for testing
-        Header getHeader() {
-            return mHeader;
-        }
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoader.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoader.java
new file mode 100644
index 00000000..f8d0c9b3
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoader.java
@@ -0,0 +1,67 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.network.AdResponse;
+
+import java.lang.ref.WeakReference;
+import java.util.*;
+
+abstract class AdLoader {
+
+    WeakReference<AdViewController> mWeakAdViewController;
+    AdLoader(AdViewController adViewController) {
+        mWeakAdViewController = new WeakReference<AdViewController>(adViewController);
+    }
+
+    abstract void load();
+
+    @Nullable
+    static AdLoader fromAdResponse(AdResponse response, AdViewController adViewController) {
+        MoPubLog.i("Performing custom event.");
+
+        // If applicable, try to invoke the new custom event system (which uses custom classes)
+        String adTypeCustomEventName = response.getCustomEventClassName();
+        if (adTypeCustomEventName != null) {
+            Map<String, String> customEventData = response.getServerExtras();
+            return new CustomEventAdLoader(adViewController, adTypeCustomEventName, customEventData);
+        }
+
+        MoPubLog.i("Failed to create custom event.");
+        return null;
+    }
+
+    static class CustomEventAdLoader extends AdLoader {
+        private String mCustomEventClassName;
+        private Map<String,String> mServerExtras;
+
+        public CustomEventAdLoader(AdViewController adViewController,
+                String customEventCLassName,
+                Map<String, String> serverExtras) {
+            super(adViewController);
+            mCustomEventClassName = customEventCLassName;
+            mServerExtras = serverExtras;
+        }
+
+        @Override
+        void load() {
+            AdViewController adViewController = mWeakAdViewController.get();
+
+            if (adViewController == null
+                    || adViewController.isDestroyed()
+                    || TextUtils.isEmpty(mCustomEventClassName)) {
+                return;
+            }
+
+            adViewController.setNotLoading();
+            adViewController.getMoPubView().loadCustomEvent(mCustomEventClassName, mServerExtras);
+        }
+
+        @VisibleForTesting
+        Map<String, String> getServerExtras() {
+            return mServerExtras;
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
index a2a59672..f2d5e8c9 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
@@ -1,18 +1,31 @@
 package com.mopub.mobileads;
 
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.AdFormat;
+import com.mopub.common.AdType;
+import com.mopub.common.util.ResponseHeader;
+
+import java.util.Map;
+
+import static com.mopub.network.HeaderUtils.extractHeader;
+
 public class AdTypeTranslator {
     public enum CustomEventType {
-        // With the deprecation of a standalone AdMob SDK, these now point to Google Play Services
+        // "Special" custom events that we let people choose in the UI.
         GOOGLE_PLAY_SERVICES_BANNER("admob_native_banner", "com.mopub.mobileads.GooglePlayServicesBanner"),
         GOOGLE_PLAY_SERVICES_INTERSTITIAL("admob_full_interstitial", "com.mopub.mobileads.GooglePlayServicesInterstitial"),
-
         MILLENNIAL_BANNER("millennial_native_banner", "com.mopub.mobileads.MillennialBanner"),
         MILLENNIAL_INTERSTITIAL("millennial_full_interstitial", "com.mopub.mobileads.MillennialInterstitial"),
+
+        // MoPub-specific custom events.
         MRAID_BANNER("mraid_banner", "com.mopub.mraid.MraidBanner"),
         MRAID_INTERSTITIAL("mraid_interstitial", "com.mopub.mraid.MraidInterstitial"),
         HTML_BANNER("html_banner", "com.mopub.mobileads.HtmlBanner"),
         HTML_INTERSTITIAL("html_interstitial", "com.mopub.mobileads.HtmlInterstitial"),
         VAST_VIDEO_INTERSTITIAL("vast_interstitial", "com.mopub.mobileads.VastVideoInterstitial"),
+        MOPUB_NATIVE("mopub_native", "com.mopub.nativeads.MoPubCustomEventNative"),
 
         UNSPECIFIED("", null);
 
@@ -40,28 +53,30 @@ public String toString() {
         }
     }
 
+    public static final String BANNER_SUFFIX = "_banner";
+    public static final String INTERSTITIAL_SUFFIX = "_interstitial";
+
     static String getAdNetworkType(String adType, String fullAdType) {
-        String adNetworkType = "interstitial".equals(adType) ? fullAdType : adType;
+        String adNetworkType = AdType.INTERSTITIAL.equals(adType) ? fullAdType : adType;
         return adNetworkType != null ? adNetworkType : "unknown";
     }
 
-    static String getCustomEventNameForAdType(MoPubView moPubView, String adType, String fullAdType) {
-        CustomEventType customEventType;
-
-        if ("html".equals(adType) || "mraid".equals(adType)) {
-            customEventType = (isInterstitial(moPubView))
-                    ? CustomEventType.fromString(adType + "_interstitial")
-                    : CustomEventType.fromString(adType + "_banner");
+    public static String getCustomEventName(@NonNull AdFormat adFormat,
+            @NonNull String adType,
+            @Nullable String fullAdType,
+            @NonNull Map<String, String> headers) {
+        if (AdType.CUSTOM.equalsIgnoreCase(adType)) {
+            return extractHeader(headers, ResponseHeader.CUSTOM_EVENT_NAME);
+        } else if (AdType.NATIVE.equalsIgnoreCase(adType)){
+            return CustomEventType.MOPUB_NATIVE.toString();
+        } else if (AdType.HTML.equalsIgnoreCase(adType) || AdType.MRAID.equalsIgnoreCase(adType)) {
+            return (AdFormat.INTERSTITIAL.equals(adFormat)
+                    ? CustomEventType.fromString(adType + INTERSTITIAL_SUFFIX)
+                    : CustomEventType.fromString(adType + BANNER_SUFFIX)).toString();
+        } else if (AdType.INTERSTITIAL.equalsIgnoreCase(adType)) {
+            return CustomEventType.fromString(fullAdType + INTERSTITIAL_SUFFIX).toString();
         } else {
-            customEventType = ("interstitial".equals(adType))
-                    ? CustomEventType.fromString(fullAdType + "_interstitial")
-                    : CustomEventType.fromString(adType + "_banner");
+            return CustomEventType.fromString(adType + BANNER_SUFFIX).toString();
         }
-
-        return customEventType.toString();
-    }
-
-    private static boolean isInterstitial(MoPubView moPubView) {
-        return moPubView instanceof MoPubInterstitial.MoPubInterstitialView;
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
index d6d61270..f0a5794d 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -6,54 +6,71 @@
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
 import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.Gravity;
 import android.view.View;
 import android.widget.FrameLayout;
 
+import com.mopub.common.AdReport;
+import com.mopub.common.ClientMetadata;
 import com.mopub.common.Constants;
-import com.mopub.common.GpsHelper;
-import com.mopub.common.MoPub;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Dips;
-import com.mopub.mobileads.factories.AdFetcherFactory;
-import com.mopub.mobileads.factories.HttpClientFactory;
+import com.mopub.common.util.Utils;
 import com.mopub.mraid.MraidNativeCommandHandler;
-
-import org.apache.http.HttpResponse;
-import org.apache.http.client.methods.HttpGet;
-import org.apache.http.impl.client.DefaultHttpClient;
+import com.mopub.network.AdRequest;
+import com.mopub.network.AdResponse;
+import com.mopub.network.MoPubNetworkError;
+import com.mopub.network.Networking;
+import com.mopub.network.TrackingRequest;
+import com.mopub.volley.RequestQueue;
+import com.mopub.volley.VolleyError;
 
 import java.util.HashMap;
 import java.util.Map;
+import java.util.TreeMap;
 import java.util.WeakHashMap;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
-import static com.mopub.common.GpsHelper.GpsHelperListener;
+import static com.mopub.network.MoPubNetworkError.Reason.NO_FILL;
+import static com.mopub.network.MoPubNetworkError.Reason.WARMING_UP;
 
 public class AdViewController {
-    static final int MINIMUM_REFRESH_TIME_MILLISECONDS = 10000;
-    static final int DEFAULT_REFRESH_TIME_MILLISECONDS = 60000;
+    static final int MINIMUM_REFRESH_TIME_MILLISECONDS = 10000;  // 10 seconds
+    static final int DEFAULT_REFRESH_TIME_MILLISECONDS = 60000;  // 1 minute
+    static final int MAX_REFRESH_TIME_MILLISECONDS = 600000; // 10 minutes
+    static final double BACKOFF_FACTOR = 1.5;
     private static final FrameLayout.LayoutParams WRAP_AND_CENTER_LAYOUT_PARAMS =
             new FrameLayout.LayoutParams(
                     FrameLayout.LayoutParams.WRAP_CONTENT,
                     FrameLayout.LayoutParams.WRAP_CONTENT,
                     Gravity.CENTER);
-    private static WeakHashMap<View,Boolean> sViewShouldHonorServerDimensions = new WeakHashMap<View, Boolean>();;
+    private final static WeakHashMap<View,Boolean> sViewShouldHonorServerDimensions = new WeakHashMap<View, Boolean>();
 
     private final Context mContext;
-    private GpsHelperListener mGpsHelperListener;
+    private final long mBroadcastIdentifier;
     private MoPubView mMoPubView;
     private final WebViewAdUrlGenerator mUrlGenerator;
-    private AdFetcher mAdFetcher;
-    private AdConfiguration mAdConfiguration;
+
+    @Nullable
+    private AdResponse mAdResponse;
     private final Runnable mRefreshRunnable;
+    @Nullable
+    private final AdRequest.Listener mAdListener;
 
     private boolean mIsDestroyed;
     private Handler mHandler;
     private boolean mIsLoading;
     private String mUrl;
 
+    // This is the power of the exponential term in the exponential backoff calculation.
+    private int mBackoffPower = 1;
+
     private Map<String, Object> mLocalExtras = new HashMap<String, Object>();
     private boolean mAutoRefreshEnabled = true;
     private boolean mPreviousAutoRefreshSetting = true;
@@ -61,6 +78,13 @@
     private Location mLocation;
     private boolean mIsTesting;
     private boolean mAdWasLoaded;
+    @Nullable
+    private String mAdUnitId;
+    private int mTimeoutMilliseconds;
+    @Nullable
+    private AdRequest mActiveRequest;
+    @Nullable
+    private Integer mRefreshTimeMillis;
 
     public static void setShouldHonorServerDimensions(View view) {
         sViewShouldHonorServerDimensions.put(view, true);
@@ -73,34 +97,89 @@ private static boolean getShouldHonorServerDimensions(View view) {
     public AdViewController(Context context, MoPubView view) {
         mContext = context;
         mMoPubView = view;
+        // Default timeout means "never refresh"
+        mTimeoutMilliseconds = -1;
+        mBroadcastIdentifier = Utils.generateUniqueId();
 
         mUrlGenerator = new WebViewAdUrlGenerator(context,
-                new MraidNativeCommandHandler().isStorePictureSupported(context));
-        mAdConfiguration = new AdConfiguration(mContext);
+                MraidNativeCommandHandler.isStorePictureSupported(mContext));
 
-        mAdFetcher = AdFetcherFactory.create(this, mAdConfiguration.getUserAgent());
-
-        mGpsHelperListener = new AdViewControllerGpsHelperListener();
+        mAdListener = new AdRequest.Listener() {
+            @Override
+            public void onSuccess(final AdResponse response) {
+                onAdLoadSuccess(response);
+            }
 
-        GpsHelper.fetchAdvertisingInfoAsync(mContext, null);
+            @Override
+            public void onErrorResponse(final VolleyError volleyError) {
+                onAdLoadError(volleyError);
+            }
+        };
 
         mRefreshRunnable = new Runnable() {
             public void run() {
-                loadAd();
+                internalLoadAd();
             }
         };
-
+        mRefreshTimeMillis = DEFAULT_REFRESH_TIME_MILLISECONDS;
         mHandler = new Handler();
     }
 
+    @VisibleForTesting
+    void onAdLoadSuccess(@NonNull final AdResponse adResponse) {
+        mBackoffPower = 1;
+        mAdResponse = adResponse;
+        // Do other ad loading setup. See AdFetcher & AdLoadTask.
+        mTimeoutMilliseconds = mAdResponse.getAdTimeoutMillis() == null
+                ? mTimeoutMilliseconds : mAdResponse.getAdTimeoutMillis();
+        Integer refreshTime = mAdResponse.getRefreshTimeMillis();
+        if (refreshTime != null) {
+            mRefreshTimeMillis = refreshTime;
+        }
+        setNotLoading();
+
+        // Get our custom event from the ad response and load into the view.
+        AdLoader adLoader = AdLoader.fromAdResponse(mAdResponse, this);
+        if (adLoader != null) {
+            adLoader.load();
+        }
+        scheduleRefreshTimerIfEnabled();
+    }
+
+    @VisibleForTesting
+    void onAdLoadError(final VolleyError error) {
+        MoPubErrorCode errorCode = MoPubErrorCode.UNSPECIFIED;
+        // Handle errors. Do backoff & retry if it makes sense.
+        if (error instanceof MoPubNetworkError) {
+            MoPubNetworkError mpError = (MoPubNetworkError) error;
+            if (mpError.getReason() == NO_FILL || mpError.getReason() == WARMING_UP) {
+                errorCode = MoPubErrorCode.NO_FILL;
+            }
+        }
+
+        if (error.networkResponse != null && error.networkResponse.statusCode >= 400) {
+            // Backoff with the retry timer.
+            mBackoffPower += 1;
+            errorCode = MoPubErrorCode.SERVER_ERROR;
+        }
+
+        setNotLoading();
+        adDidFail(errorCode);
+    }
+
     public MoPubView getMoPubView() {
         return mMoPubView;
     }
 
     public void loadAd() {
+        mBackoffPower = 1;
+        internalLoadAd();
+    }
+
+    private void internalLoadAd() {
         mAdWasLoaded = true;
-        if (mAdConfiguration.getAdUnitId() == null) {
-            MoPubLog.d("Can't load an ad in this ad view because the ad unit ID is null. " +
+        if (TextUtils.isEmpty(mAdUnitId)) {
+            MoPubLog.d("Can't load an ad in this ad view because the ad unit ID is not set. " +
                     "Did you forget to call setAdUnitId()?");
             return;
         }
@@ -111,10 +190,8 @@ public void loadAd() {
             return;
         }
 
-        // If we have access to Google Play Services (GPS) but the advertising info
-        // is not cached then guarantee we get it before building the ad request url
-        // in the callback, this is a requirement from Google
-        GpsHelper.fetchAdvertisingInfoAsync(mContext, mGpsHelperListener);
+        String adUrl = generateAdUrl();
+        loadNonJavascript(adUrl);
     }
 
     void loadNonJavascript(String url) {
@@ -122,14 +199,13 @@ void loadNonJavascript(String url) {
 
         MoPubLog.d("Loading url: " + url);
         if (mIsLoading) {
-            if (mAdConfiguration.getAdUnitId() != null) {
-                MoPubLog.i("Already loading an ad for " + mAdConfiguration.getAdUnitId() + ", wait to finish.");
+            if (!TextUtils.isEmpty(mAdUnitId)) {  // This shouldn't be able to happen?
+                MoPubLog.i("Already loading an ad for " + mAdUnitId + ", wait to finish.");
             }
             return;
         }
 
         mUrl = url;
-        mAdConfiguration.setFailUrl(null);
         mIsLoading = true;
 
         fetchAd(mUrl);
@@ -145,21 +221,29 @@ void loadFailUrl(MoPubErrorCode errorCode) {
 
         Log.v("MoPub", "MoPubErrorCode: " + (errorCode == null ? "" : errorCode.toString()));
 
-        if (mAdConfiguration.getFailUrl() != null) {
-            MoPubLog.d("Loading failover url: " + mAdConfiguration.getFailUrl());
-            loadNonJavascript(mAdConfiguration.getFailUrl());
+        final String failUrl = mAdResponse == null ? "" : mAdResponse.getFailoverUrl();
+        if (!TextUtils.isEmpty(failUrl)) {
+            MoPubLog.d("Loading failover url: " + failUrl);
+            loadNonJavascript(failUrl);
         } else {
             // No other URLs to try, so signal a failure.
             adDidFail(MoPubErrorCode.NO_FILL);
         }
     }
 
+    @Deprecated
     void setFailUrl(String failUrl) {
-        mAdConfiguration.setFailUrl(failUrl);
+        // Does nothing.
     }
 
     void setNotLoading() {
         this.mIsLoading = false;
+        if (mActiveRequest != null) {
+            if (!mActiveRequest.isCanceled()) {
+                mActiveRequest.cancel();
+            }
+            mActiveRequest = null;
+        }
     }
 
     public String getKeywords() {
@@ -179,37 +263,50 @@ public void setLocation(Location location) {
     }
 
     public String getAdUnitId() {
-        return mAdConfiguration.getAdUnitId();
+        return mAdUnitId;
     }
 
     public void setAdUnitId(String adUnitId) {
-        mAdConfiguration.setAdUnitId(adUnitId);
+        mAdUnitId = adUnitId;
+    }
+
+    public long getBroadcastIdentifier() {
+        return mBroadcastIdentifier;
     }
 
     public void setTimeout(int milliseconds) {
-        if (mAdFetcher != null) {
-            mAdFetcher.setTimeout(milliseconds);
-        }
+       mTimeoutMilliseconds = milliseconds;
     }
 
     public int getAdWidth() {
-        return mAdConfiguration.getWidth();
+        if (mAdResponse != null && mAdResponse.getWidth() != null) {
+            return mAdResponse.getWidth();
+        }
+
+        return 0;
     }
 
     public int getAdHeight() {
-        return mAdConfiguration.getHeight();
+        if (mAdResponse != null && mAdResponse.getHeight() != null) {
+            return mAdResponse.getHeight();
+        }
+
+        return 0;
     }
 
-    public String getClickthroughUrl() {
-        return mAdConfiguration.getClickthroughUrl();
+    @Deprecated
+    public String getClickTrackingUrl() {
+        return mAdResponse == null ? null : mAdResponse.getClickTrackingUrl();
     }
 
+    @Deprecated
     public String getRedirectUrl() {
-        return mAdConfiguration.getRedirectUrl();
+        return mAdResponse == null ? null : mAdResponse.getRedirectUrl();
     }
 
+    @Deprecated
     public String getResponseString() {
-        return mAdConfiguration.getResponseString();
+        return mAdResponse == null ? null : mAdResponse.getStringBody();
     }
 
     public boolean getAutorefreshEnabled() {
@@ -234,9 +331,7 @@ private void setAutorefreshEnabled(boolean enabled) {
         final boolean autorefreshChanged = mAdWasLoaded && (mAutoRefreshEnabled != enabled);
         if (autorefreshChanged) {
             final String enabledString = (enabled) ? "enabled" : "disabled";
-            final String adUnitId = (mAdConfiguration != null) ? mAdConfiguration.getAdUnitId() : null;
-
-            MoPubLog.d("Refresh " + enabledString + " for ad unit (" + adUnitId + ").");
+            MoPubLog.d("Refresh " + enabledString + " for ad unit (" + mAdUnitId + ").");
         }
 
         mAutoRefreshEnabled = enabled;
@@ -247,6 +342,14 @@ private void setAutorefreshEnabled(boolean enabled) {
         }
     }
 
+    @Nullable
+    public AdReport getAdReport() {
+        if (mAdUnitId != null && mAdResponse != null) {
+            return new AdReport(mAdUnitId, ClientMetadata.getInstance(mContext), mAdResponse);
+        }
+        return null;
+    }
+
     public boolean getTesting() {
         return mIsTesting;
     }
@@ -255,8 +358,9 @@ public void setTesting(boolean enabled) {
         mIsTesting = enabled;
     }
 
-    AdConfiguration getAdConfiguration() {
-        return mAdConfiguration;
+    @Deprecated
+    Object getAdConfiguration() {
+        return null;
     }
 
     boolean isDestroyed() {
@@ -271,84 +375,49 @@ void cleanup() {
             return;
         }
 
+        if (mActiveRequest != null) {
+            mActiveRequest.cancel();
+            mActiveRequest = null;
+        }
+
         setAutorefreshEnabled(false);
         cancelRefreshTimer();
 
         // WebView subclasses are not garbage-collected in a timely fashion on Froyo and below,
         // thanks to some persistent references in WebViewCore. We manually release some resources
         // to compensate for this "leak".
-
-        mAdFetcher.cleanup();
-        mAdFetcher = null;
-
-        mAdConfiguration.cleanup();
-
         mMoPubView = null;
 
         // Flag as destroyed. LoadUrlTask checks this before proceeding in its onPostExecute().
         mIsDestroyed = true;
     }
 
-    void configureUsingHttpResponse(final HttpResponse response) {
-        mAdConfiguration.addHttpResponse(response);
-    }
-
     Integer getAdTimeoutDelay() {
-        return mAdConfiguration.getAdTimeoutDelay();
-    }
-
-    int getRefreshTimeMilliseconds() {
-        return mAdConfiguration.getRefreshTimeMilliseconds();
-    }
-
-    @Deprecated
-    void setRefreshTimeMilliseconds(int refreshTimeMilliseconds) {
-        mAdConfiguration.setRefreshTimeMilliseconds(refreshTimeMilliseconds);
+        return mAdResponse == null ? null : mAdResponse.getAdTimeoutMillis();
     }
 
     void trackImpression() {
-        new Thread(new Runnable() {
-            public void run () {
-                if (mAdConfiguration.getImpressionUrl() == null) return;
-
-                DefaultHttpClient httpClient = HttpClientFactory.create();
-                try {
-                    HttpGet httpget = new HttpGet(mAdConfiguration.getImpressionUrl());
-                    httpget.addHeader("User-Agent", mAdConfiguration.getUserAgent());
-                    httpClient.execute(httpget);
-                } catch (Exception e) {
-                    MoPubLog.d("Impression tracking failed : " + mAdConfiguration.getImpressionUrl(), e);
-                } finally {
-                    httpClient.getConnectionManager().shutdown();
-                }
-            }
-        }).start();
+        if (mAdResponse != null) {
+            TrackingRequest.makeTrackingHttpRequest(mAdResponse.getImpressionTrackingUrl(),
+                    mContext, MoPubEvents.Type.IMPRESSION_REQUEST);
+        }
     }
 
     void registerClick() {
-        new Thread(new Runnable() {
-            public void run () {
-                if (mAdConfiguration.getClickthroughUrl() == null) return;
-
-                DefaultHttpClient httpClient = HttpClientFactory.create();
-                try {
-                    MoPubLog.d("Tracking click for: " + mAdConfiguration.getClickthroughUrl());
-                    HttpGet httpget = new HttpGet(mAdConfiguration.getClickthroughUrl());
-                    httpget.addHeader("User-Agent", mAdConfiguration.getUserAgent());
-                    httpClient.execute(httpget);
-                } catch (Exception e) {
-                    MoPubLog.d("Click tracking failed: " + mAdConfiguration.getClickthroughUrl(), e);
-                } finally {
-                    httpClient.getConnectionManager().shutdown();
-                }
-            }
-        }).start();
+        if (mAdResponse != null) {
+            TrackingRequest.makeTrackingHttpRequest(mAdResponse.getClickTrackingUrl(),
+                    mContext, MoPubEvents.Type.CLICK_REQUEST);
+        }
     }
 
-    void fetchAd(String mUrl) {
-        if (mAdFetcher != null) {
-            mAdFetcher.fetchAdForUrl(mUrl);
-        }
+    void fetchAd(String url) {
+        AdRequest adRequest = new AdRequest(url,
+                mMoPubView.getAdFormat(),
+                mAdListener
+        );
+        RequestQueue requestQueue = Networking.getRequestQueue(mContext);
+        requestQueue.add(adRequest);
+        mActiveRequest = adRequest;
     }
 
     void forceRefresh() {
@@ -358,7 +427,7 @@ void forceRefresh() {
 
     String generateAdUrl() {
         return mUrlGenerator
-                .withAdUnitId(mAdConfiguration.getAdUnitId())
+                .withAdUnitId(mAdUnitId)
                 .withKeywords(mKeywords)
                 .withLocation(mLocation)
                 .generateUrlString(Constants.HOST);
@@ -373,22 +442,27 @@ void adDidFail(MoPubErrorCode errorCode) {
 
     void scheduleRefreshTimerIfEnabled() {
         cancelRefreshTimer();
-        if (mAutoRefreshEnabled && mAdConfiguration.getRefreshTimeMilliseconds() > 0) {
-            mHandler.postDelayed(mRefreshRunnable, mAdConfiguration.getRefreshTimeMilliseconds());
-        }
+        if (mAutoRefreshEnabled && mRefreshTimeMillis != null && mRefreshTimeMillis > 0) {
 
+            mHandler.postDelayed(mRefreshRunnable,
+                    Math.min(MAX_REFRESH_TIME_MILLISECONDS,
+                            mRefreshTimeMillis * (long) Math.pow(BACKOFF_FACTOR, mBackoffPower)));
+        }
     }
 
     void setLocalExtras(Map<String, Object> localExtras) {
         mLocalExtras = (localExtras != null)
-                ? new HashMap<String,Object>(localExtras)
-                : new HashMap<String,Object>();
+                ? new TreeMap<String,Object>(localExtras)
+                : new TreeMap<String,Object>();
     }
 
+    /**
+     * Returns a copied map of localExtras
+     */
     Map<String, Object> getLocalExtras() {
         return (mLocalExtras != null)
-                ? new HashMap<String,Object>(mLocalExtras)
-                : new HashMap<String,Object>();
+                ? new TreeMap<String,Object>(mLocalExtras)
+                : new TreeMap<String,Object>();
     }
 
     private void cancelRefreshTimer() {
@@ -425,10 +499,14 @@ public void run() {
     }
 
     private FrameLayout.LayoutParams getAdLayoutParams(View view) {
-        int width = mAdConfiguration.getWidth();
-        int height = mAdConfiguration.getHeight();
+        Integer width = null;
+        Integer height = null;
+        if (mAdResponse != null) {
+            width = mAdResponse.getWidth();
+            height = mAdResponse.getHeight();
+        }
 
-        if (getShouldHonorServerDimensions(view) && width > 0 && height > 0) {
+        if (width != null && height != null && getShouldHonorServerDimensions(view) && width > 0 && height > 0) {
             int scaledWidth = Dips.asIntPixels(width, mContext);
             int scaledHeight = Dips.asIntPixels(height, mContext);
 
@@ -438,19 +516,6 @@ public void run() {
         }
     }
 
-    class AdViewControllerGpsHelperListener implements GpsHelperListener {
-        @Override
-        public void onFetchAdInfoCompleted() {
-            String adUrl = generateAdUrl();
-            loadNonJavascript(adUrl);
-        }
-    }
-
-    @Deprecated
-    void setGpsHelperListener(GpsHelperListener gpsHelperListener) {
-        mGpsHelperListener = gpsHelperListener;
-    }
-
     @Deprecated
     public void customEventDidLoadAd() {
         setNotLoading();
@@ -470,7 +535,7 @@ public void customEventActionWillBegin() {
 
     @Deprecated
     public void setClickthroughUrl(String clickthroughUrl) {
-        mAdConfiguration.setClickthroughUrl(clickthroughUrl);
+        // Does nothing
     }
 
     /**
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
index 25a0c774..6af45e32 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
@@ -5,6 +5,7 @@
 import android.view.MotionEvent;
 import android.view.View;
 
+import com.mopub.common.AdReport;
 import com.mopub.common.Constants;
 import com.mopub.common.logging.MoPubLog;
 
@@ -16,13 +17,13 @@
     private final ViewGestureDetector mViewGestureDetector;
     private boolean mClicked;
 
-    public BaseHtmlWebView(Context context, AdConfiguration adConfiguration) {
+    public BaseHtmlWebView(Context context, AdReport adReport) {
         super(context);
 
         disableScrollingAndZoom();
         getSettings().setJavaScriptEnabled(true);
 
-        mViewGestureDetector = new ViewGestureDetector(context, this, adConfiguration);
+        mViewGestureDetector = new ViewGestureDetector(context, this, adReport);
         mViewGestureDetector.setUserClickListener(this);
 
         if (currentApiLevel().isAtLeast(ICE_CREAM_SANDWICH)) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
index b84ae93d..1b1ddf21 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
@@ -1,18 +1,24 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
+import android.content.Intent;
 import android.os.Bundle;
+import android.support.annotation.Nullable;
 import android.view.View;
 import android.view.Window;
 import android.view.WindowManager;
 import android.widget.FrameLayout.LayoutParams;
 
+import com.mopub.common.AdReport;
 import com.mopub.common.CloseableLayout;
 import com.mopub.common.CloseableLayout.OnCloseListener;
+import com.mopub.common.DataKeys;
 
-import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 
 abstract class BaseInterstitialActivity extends Activity {
+    protected AdReport mAdReport;
+
     enum JavaScriptWebViewCallbacks {
         // The ad server appends these functions to the MRAID javascript to help with third party
         // impression tracking.
@@ -34,7 +40,7 @@ protected String getUrl() {
     }
 
     private CloseableLayout mCloseableLayout;
-    private long mBroadcastIdentifier;
+    private Long mBroadcastIdentifier;
 
     public abstract View getAdView();
 
@@ -42,6 +48,10 @@ protected String getUrl() {
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
+        Intent intent = getIntent();
+        mBroadcastIdentifier = getBroadcastIdentifierFromIntent(intent);
+        mAdReport = getAdReportFromIntent(intent);
+
         requestWindowFeature(Window.FEATURE_NO_TITLE);
         getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
 
@@ -58,10 +68,7 @@ public void onClose() {
                 new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
         setContentView(mCloseableLayout);
 
-        final AdConfiguration adConfiguration = getAdConfiguration();
-        if (adConfiguration != null) {
-            mBroadcastIdentifier = adConfiguration.getBroadcastIdentifier();
-        }
+
     }
 
     @Override
@@ -70,7 +77,7 @@ protected void onDestroy() {
         super.onDestroy();
     }
 
-    long getBroadcastIdentifier() {
+    Long getBroadcastIdentifier() {
         return mBroadcastIdentifier;
     }
 
@@ -82,13 +89,19 @@ protected void hideInterstitialCloseButton() {
         mCloseableLayout.setCloseVisible(false);
     }
 
-    protected AdConfiguration getAdConfiguration() {
-        AdConfiguration adConfiguration;
+    protected static Long getBroadcastIdentifierFromIntent(Intent intent) {
+        if (intent.hasExtra(BROADCAST_IDENTIFIER_KEY)) {
+            return intent.getLongExtra(BROADCAST_IDENTIFIER_KEY, -1L);
+        }
+        return null;
+    }
+
+    @Nullable
+    protected static AdReport getAdReportFromIntent(Intent intent) {
         try {
-            adConfiguration = (AdConfiguration) getIntent().getSerializableExtra(AD_CONFIGURATION_KEY);
+            return (AdReport) intent.getSerializableExtra(DataKeys.AD_REPORT_KEY);
         } catch (ClassCastException e) {
-            adConfiguration = null;
+            return null;
         }
-        return adConfiguration;
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
index 83c3c006..ba2482a7 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
@@ -9,15 +9,15 @@
 import com.mopub.mobileads.util.vast.VastVideoConfiguration;
 
 import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
-import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.mobileads.VastVideoViewController.VAST_VIDEO_CONFIGURATION;
 
 public class BaseVideoPlayerActivity extends Activity {
     static final String VIDEO_CLASS_EXTRAS_KEY = "video_view_class_name";
     public static final String VIDEO_URL = "video_url";
 
-    public static void startMraid(final Context context, final String videoUrl, final AdConfiguration adConfiguration) {
-        final Intent intentVideoPlayerActivity = createIntentMraid(context, videoUrl, adConfiguration);
+    public static void startMraid(final Context context, final String videoUrl) {
+        final Intent intentVideoPlayerActivity = createIntentMraid(context, videoUrl);
         try {
             context.startActivity(intentVideoPlayerActivity);
         } catch (ActivityNotFoundException e) {
@@ -26,20 +26,18 @@ public static void startMraid(final Context context, final String videoUrl, fina
     }
 
     static Intent createIntentMraid(final Context context,
-            final String videoUrl,
-            final AdConfiguration adConfiguration) {
+            final String videoUrl) {
         final Intent intentVideoPlayerActivity = new Intent(context, MraidVideoPlayerActivity.class);
         intentVideoPlayerActivity.setFlags(FLAG_ACTIVITY_NEW_TASK);
         intentVideoPlayerActivity.putExtra(VIDEO_CLASS_EXTRAS_KEY, "mraid");
         intentVideoPlayerActivity.putExtra(VIDEO_URL, videoUrl);
-        intentVideoPlayerActivity.putExtra(AD_CONFIGURATION_KEY, adConfiguration);
         return intentVideoPlayerActivity;
     }
 
     static void startVast(final Context context,
             final VastVideoConfiguration vastVideoConfiguration,
-            final AdConfiguration adConfiguration) {
-        final Intent intentVideoPlayerActivity = createIntentVast(context, vastVideoConfiguration, adConfiguration);
+            final long broadcastIdentifier) {
+        final Intent intentVideoPlayerActivity = createIntentVast(context, vastVideoConfiguration, broadcastIdentifier);
         try {
             context.startActivity(intentVideoPlayerActivity);
         } catch (ActivityNotFoundException e) {
@@ -49,12 +47,12 @@ static void startVast(final Context context,
 
     static Intent createIntentVast(final Context context,
             final VastVideoConfiguration vastVideoConfiguration,
-            final AdConfiguration adConfiguration) {
+            final long broadcastIdentifier) {
         final Intent intentVideoPlayerActivity = new Intent(context, MraidVideoPlayerActivity.class);
         intentVideoPlayerActivity.setFlags(FLAG_ACTIVITY_NEW_TASK);
         intentVideoPlayerActivity.putExtra(VIDEO_CLASS_EXTRAS_KEY, "vast");
         intentVideoPlayerActivity.putExtra(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
-        intentVideoPlayerActivity.putExtra(AD_CONFIGURATION_KEY, adConfiguration);
+        intentVideoPlayerActivity.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
         return intentVideoPlayerActivity;
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
index 15031eb3..f609917d 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
@@ -4,21 +4,20 @@
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
+import android.support.annotation.Nullable;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.RelativeLayout;
 import android.widget.VideoView;
-
 import com.mopub.common.logging.MoPubLog;
 
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
 
 public abstract class BaseVideoViewController {
     private final Context mContext;
     private final RelativeLayout mLayout;
     private final BaseVideoViewControllerListener mBaseVideoViewControllerListener;
-    private long mBroadcastIdentifier;
+    @Nullable private Long mBroadcastIdentifier;
 
     public interface BaseVideoViewControllerListener {
         void onSetContentView(final View view);
@@ -29,7 +28,7 @@ void onStartActivityForResult(final Class<? extends Activity> clazz,
                 final Bundle extras);
     }
 
-    protected BaseVideoViewController(final Context context, final long broadcastIdentifier, final BaseVideoViewControllerListener baseVideoViewControllerListener) {
+    protected BaseVideoViewController(final Context context, @Nullable final Long broadcastIdentifier, final BaseVideoViewControllerListener baseVideoViewControllerListener) {
         mContext = context.getApplicationContext();
         mBroadcastIdentifier = broadcastIdentifier;
         mBaseVideoViewControllerListener = baseVideoViewControllerListener;
@@ -83,11 +82,11 @@ protected void videoCompleted(boolean shouldFinish) {
         }
     }
 
-    void videoClicked() {
-        broadcastAction(ACTION_INTERSTITIAL_CLICK);
-    }
-
     void broadcastAction(final String action) {
-        EventForwardingBroadcastReceiver.broadcastAction(mContext, mBroadcastIdentifier, action);
+        if (mBroadcastIdentifier != null) {
+            EventForwardingBroadcastReceiver.broadcastAction(mContext, mBroadcastIdentifier, action);
+        } else {
+            MoPubLog.w("Tried to broadcast a video event without a braodcast identifier to send to.");
+        }
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
index 5cdad507..da484a36 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
@@ -2,17 +2,21 @@
 
 import android.content.Context;
 import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.View;
 
+import com.mopub.common.AdReport;
+import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.Json;
 import com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
 import com.mopub.mobileads.factories.CustomEventBannerFactory;
 
-import java.util.HashMap;
 import java.util.Map;
+import java.util.TreeMap;
 
-import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
+import static com.mopub.common.DataKeys.AD_REPORT_KEY;
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_TIMEOUT;
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
@@ -30,12 +34,15 @@
     private final Runnable mTimeout;
     private boolean mStoredAutorefresh;
 
-    public CustomEventBannerAdapter(MoPubView moPubView, String className, String classData) {
+    public CustomEventBannerAdapter(@NonNull MoPubView moPubView,
+            @NonNull String className,
+            @NonNull Map<String, String> serverExtras,
+            long broadcastIdentifier,
+            @Nullable AdReport adReport) {
+        Preconditions.checkNotNull(serverExtras);
         mHandler = new Handler();
         mMoPubView = moPubView;
         mContext = moPubView.getContext();
-        mLocalExtras = new HashMap<String, Object>();
-        mServerExtras = new HashMap<String, String>();
         mTimeout = new Runnable() {
             @Override
             public void run() {
@@ -55,19 +62,14 @@ public void run() {
         }
 
         // Attempt to load the JSON extras into mServerExtras.
-        try {
-            mServerExtras = Json.jsonStringToMap(classData);
-        } catch (Exception exception) {
-            MoPubLog.d("Failed to create Map from JSON: " + classData + exception.toString());
-        }
+        mServerExtras = new TreeMap<String,String>(serverExtras);
 
         mLocalExtras = mMoPubView.getLocalExtras();
         if (mMoPubView.getLocation() != null) {
             mLocalExtras.put("location", mMoPubView.getLocation());
         }
-        if (mMoPubView.getAdViewController() != null) {
-            mLocalExtras.put(AD_CONFIGURATION_KEY, mMoPubView.getAdViewController().getAdConfiguration());
-        }
+        mLocalExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
+        mLocalExtras.put(AD_REPORT_KEY, adReport);
     }
 
     void loadAd() {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
index f4a74c41..65aceb03 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
@@ -2,16 +2,20 @@
 
 import android.content.Context;
 import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
+import com.mopub.common.AdReport;
+import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.Json;
 import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import com.mopub.mobileads.factories.CustomEventInterstitialFactory;
 
-import java.util.HashMap;
 import java.util.Map;
+import java.util.TreeMap;
 
-import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
+import static com.mopub.common.DataKeys.AD_REPORT_KEY;
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_TIMEOUT;
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
@@ -29,11 +33,14 @@
     private final Handler mHandler;
     private final Runnable mTimeout;
 
-    public CustomEventInterstitialAdapter(final MoPubInterstitial moPubInterstitial, final String className, final String jsonParams) {
+    public CustomEventInterstitialAdapter(@NonNull final MoPubInterstitial moPubInterstitial,
+            @NonNull final String className,
+            @NonNull final Map<String, String> serverExtras,
+            long broadcastIdentifier,
+            @Nullable AdReport adReport) {
+        Preconditions.checkNotNull(serverExtras);
         mHandler = new Handler();
         mMoPubInterstitial = moPubInterstitial;
-        mServerExtras = new HashMap<String, String>();
-        mLocalExtras = new HashMap<String, Object>();
         mContext = mMoPubInterstitial.getActivity();
         mTimeout = new Runnable() {
             @Override
@@ -53,22 +60,13 @@ public void run() {
             return;
         }
 
-        // Attempt to load the JSON extras into mServerExtras.
-        try {
-            mServerExtras = Json.jsonStringToMap(jsonParams);
-        } catch (Exception exception) {
-            MoPubLog.d("Failed to create Map from JSON: " + jsonParams);
-        }
-
+        mServerExtras = new TreeMap<String, String>(serverExtras);
         mLocalExtras = mMoPubInterstitial.getLocalExtras();
         if (mMoPubInterstitial.getLocation() != null) {
             mLocalExtras.put("location", mMoPubInterstitial.getLocation());
         }
-
-        final AdViewController adViewController = mMoPubInterstitial.getMoPubInterstitialView().getAdViewController();
-        if (adViewController != null) {
-            mLocalExtras.put(AD_CONFIGURATION_KEY, adViewController.getAdConfiguration());
-        }
+        mLocalExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
+        mLocalExtras.put(AD_REPORT_KEY, adReport);
     }
     
     void loadInterstitial() {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java b/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
index 06edb181..d5561d92 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
@@ -6,6 +6,8 @@
 import android.content.IntentFilter;
 import android.support.v4.content.LocalBroadcastManager;
 
+import com.mopub.common.DataKeys;
+
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 
@@ -14,7 +16,6 @@
     private final long mBroadcastIdentifier;
     private Context mContext;
 
-    static final String BROADCAST_IDENTIFIER_KEY = "broadcastIdentifier";
     public static final String ACTION_INTERSTITIAL_FAIL = "com.mopub.action.interstitial.fail";
     public static final String ACTION_INTERSTITIAL_SHOW = "com.mopub.action.interstitial.show";
     public static final String ACTION_INTERSTITIAL_DISMISS = "com.mopub.action.interstitial.dismiss";
@@ -30,7 +31,7 @@ public EventForwardingBroadcastReceiver(CustomEventInterstitialListener customEv
 
     static void broadcastAction(final Context context, final long broadcastIdentifier, final String action) {
         Intent intent = new Intent(action);
-        intent.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
+        intent.putExtra(DataKeys.BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
         LocalBroadcastManager.getInstance(context.getApplicationContext()).sendBroadcast(intent);
     }
 
@@ -57,7 +58,7 @@ public void onReceive(Context context, Intent intent) {
          * this here because there is no appropriate IntentFilter condition that can recreate this
          * behavior.
          */
-        final long receivedIdentifier = intent.getLongExtra(BROADCAST_IDENTIFIER_KEY, -1);
+        final long receivedIdentifier = intent.getLongExtra(DataKeys.BROADCAST_IDENTIFIER_KEY, -1);
         if (mBroadcastIdentifier != receivedIdentifier) {
             return;
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBanner.java
index c8a4942b..dcdf11bd 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBanner.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBanner.java
@@ -1,16 +1,16 @@
 package com.mopub.mobileads;
 
 import android.content.Context;
-import android.net.Uri;
 
+import com.mopub.common.AdReport;
+import com.mopub.common.DataKeys;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.factories.HtmlBannerWebViewFactory;
 
 import java.util.Map;
 
-import static com.mopub.mobileads.AdFetcher.CLICKTHROUGH_URL_KEY;
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
-import static com.mopub.mobileads.AdFetcher.SCROLLABLE_KEY;
+import static com.mopub.common.DataKeys.AD_REPORT_KEY;
+import static com.mopub.mobileads.MoPubErrorCode.INTERNAL_ERROR;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 
 public class HtmlBanner extends CustomEventBanner {
@@ -28,18 +28,25 @@ protected void loadBanner(
         String redirectUrl;
         String clickthroughUrl;
         Boolean isScrollable;
+        AdReport adReport;
         if (extrasAreValid(serverExtras)) {
-            htmlData = Uri.decode(serverExtras.get(HTML_RESPONSE_BODY_KEY));
-            redirectUrl = serverExtras.get(REDIRECT_URL_KEY);
-            clickthroughUrl = serverExtras.get(CLICKTHROUGH_URL_KEY);
-            isScrollable = Boolean.valueOf(serverExtras.get(SCROLLABLE_KEY));
+            htmlData = serverExtras.get(DataKeys.HTML_RESPONSE_BODY_KEY);
+            redirectUrl = serverExtras.get(DataKeys.REDIRECT_URL_KEY);
+            clickthroughUrl = serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY);
+            isScrollable = Boolean.valueOf(serverExtras.get(DataKeys.SCROLLABLE_KEY));
+            try {
+                adReport = (AdReport) localExtras.get(AD_REPORT_KEY);
+            } catch (ClassCastException e) {
+                MoPubLog.e("LocalExtras contained an incorrect type.");
+                customEventBannerListener.onBannerFailed(INTERNAL_ERROR);
+                return;
+            }
         } else {
             customEventBannerListener.onBannerFailed(NETWORK_INVALID_STATE);
             return;
         }
 
-        AdConfiguration adConfiguration = AdConfiguration.extractFromMap(localExtras);
-        mHtmlBannerWebView = HtmlBannerWebViewFactory.create(context, customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl, adConfiguration);
+        mHtmlBannerWebView = HtmlBannerWebViewFactory.create(context, adReport, customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl);
         AdViewController.setShouldHonorServerDimensions(mHtmlBannerWebView);
         mHtmlBannerWebView.loadHtmlResponse(htmlData);
     }
@@ -52,6 +59,6 @@ protected void onInvalidate() {
     }
 
     private boolean extrasAreValid(Map<String, String> serverExtras) {
-        return serverExtras.containsKey(HTML_RESPONSE_BODY_KEY);
+        return serverExtras.containsKey(DataKeys.HTML_RESPONSE_BODY_KEY);
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java
index b707d66f..358ea16c 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java
@@ -2,13 +2,15 @@
 
 import android.content.Context;
 
+import com.mopub.common.AdReport;
+
 import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
 
 public class HtmlBannerWebView extends BaseHtmlWebView {
     public static final String EXTRA_AD_CLICK_DATA = "com.mopub.intent.extra.AD_CLICK_DATA";
 
-    public HtmlBannerWebView(Context context, AdConfiguration adConfiguration) {
-        super(context, adConfiguration);
+    public HtmlBannerWebView(Context context, AdReport adReport) {
+        super(context, adReport);
     }
 
     public void init(CustomEventBannerListener customEventBannerListener, boolean isScrollable, String redirectUrl, String clickthroughUrl) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
index 12775a4b..dd1e5bc7 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
@@ -1,13 +1,11 @@
 package com.mopub.mobileads;
 
-import android.net.Uri;
-
 import java.util.Map;
 
-import static com.mopub.mobileads.AdFetcher.CLICKTHROUGH_URL_KEY;
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
-import static com.mopub.mobileads.AdFetcher.SCROLLABLE_KEY;
+import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
+import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
+import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
 
 public class HtmlInterstitial extends ResponseBodyInterstitial {
     private String mHtmlData;
@@ -17,7 +15,7 @@
 
     @Override
     protected void extractExtras(Map<String, String> serverExtras) {
-        mHtmlData = Uri.decode(serverExtras.get(HTML_RESPONSE_BODY_KEY));
+        mHtmlData = serverExtras.get(HTML_RESPONSE_BODY_KEY);
         mIsScrollable = Boolean.valueOf(serverExtras.get(SCROLLABLE_KEY));
         mRedirectUrl = serverExtras.get(REDIRECT_URL_KEY);
         mClickthroughUrl = serverExtras.get(CLICKTHROUGH_URL_KEY);
@@ -25,11 +23,11 @@ protected void extractExtras(Map<String, String> serverExtras) {
 
     @Override
     protected void preRenderHtml(CustomEventInterstitialListener customEventInterstitialListener) {
-        MoPubActivity.preRenderHtml(mContext, customEventInterstitialListener, mHtmlData);
+        MoPubActivity.preRenderHtml(mContext, mAdReport, customEventInterstitialListener, mHtmlData);
     }
 
     @Override
     public void showInterstitial() {
-        MoPubActivity.start(mContext, mHtmlData, mIsScrollable, mRedirectUrl, mClickthroughUrl, mAdConfiguration);
+        MoPubActivity.start(mContext, mHtmlData, mAdReport, mIsScrollable, mRedirectUrl, mClickthroughUrl, mBroadcastIdentifier);
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
index 54f10701..76210e87 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
@@ -5,6 +5,8 @@
 import android.os.Handler;
 import android.webkit.JavascriptInterface;
 
+import com.mopub.common.AdReport;
+
 import static com.mopub.common.util.VersionCode.HONEYCOMB;
 import static com.mopub.common.util.VersionCode.currentApiLevel;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
@@ -18,8 +20,8 @@
         abstract void onInterstitialLoaded();
     }
 
-    public HtmlInterstitialWebView(Context context, AdConfiguration adConfiguration) {
-        super(context, adConfiguration);
+    public HtmlInterstitialWebView(Context context, AdReport adReport) {
+        super(context, adReport);
 
         mHandler = new Handler();
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
index 1b8726d3..50781c27 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
@@ -4,13 +4,17 @@
 import android.content.Intent;
 import android.graphics.Bitmap;
 import android.net.Uri;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
-
 import com.mopub.common.MoPubBrowser;
+import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.IntentUtils;
-import com.mopub.mobileads.util.Utils;
+import com.mopub.common.util.Intents;
+import com.mopub.exceptions.IntentNotResolvableException;
+import com.mopub.exceptions.UrlParseException;
 
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 
@@ -32,19 +36,36 @@
         mContext = htmlWebView.getContext();
     }
 
+    /**
+     * Called upon user click, when the WebView attempts to load a new URL. Attempts to handle mopub
+     * and phone-specific schemes, open mopubnativebrowser links in the device browser, deep-links
+     * in the corresponding application, and all other links in the MoPub in-app browser.
+     */
     @Override
     public boolean shouldOverrideUrlLoading(WebView view, String url) {
-        if (handleSpecialMoPubScheme(url) || handlePhoneScheme(url) || handleNativeBrowserScheme(url)) {
+        MoPubLog.d("Ad clicked. Click URL: " + url);
+
+        if (handleSpecialMoPubScheme(url) || handlePhoneScheme(url)) {
             return true;
         }
 
-        MoPubLog.d("Ad clicked. Click URL: " + url);
-
-        // this is added because http/s can also be intercepted
-        if (!isWebSiteUrl(url) && IntentUtils.canHandleApplicationUrl(mContext, url)) {
-            if (launchApplicationUrl(url)) {
-                return true;
+        // MoPubNativeBrowser URLs
+        if (Intents.isNativeBrowserScheme(url)) {
+            final String errorMessage = "Unable to load mopub native browser url: " + url;
+            try {
+                final Intent intent = Intents.intentForNativeBrowserScheme(url);
+                launchIntentForUserClick(mContext, intent, errorMessage);
+            } catch (UrlParseException e) {
+                MoPubLog.d(errorMessage + ". " + e.getMessage());
             }
+
+            return true;
+        }
+
+        // Non-http(s) URLs
+        if (!Intents.isHttpUrl(url) && Intents.canHandleApplicationUrl(mContext, url)) {
+            launchApplicationUrl(url);
+            return true;
         }
 
         showMoPubBrowserForUrl(url);
@@ -105,46 +126,6 @@ private boolean handlePhoneScheme(String url) {
         return true;
     }
 
-    private boolean isNativeBrowserScheme(String url) {
-        return url.startsWith("mopubnativebrowser://");
-    }
-
-    private boolean handleNativeBrowserScheme(String url) {
-        if (!isNativeBrowserScheme(url)) {
-            return false;
-        }
-
-        Uri uri = Uri.parse(url);
-
-        String urlToOpenInNativeBrowser;
-        try {
-            urlToOpenInNativeBrowser = uri.getQueryParameter("url");
-        } catch (UnsupportedOperationException e) {
-            MoPubLog.w("Could not handle url: " + url);
-            return false;
-        }
-
-        if (!"navigate".equals(uri.getHost()) || urlToOpenInNativeBrowser == null) {
-            return false;
-        }
-
-        Uri intentUri = Uri.parse(urlToOpenInNativeBrowser);
-
-        Intent intent = new Intent(Intent.ACTION_VIEW, intentUri);
-        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-
-        String errorMessage = "Could not handle intent with URI: " + url
-                + ". Is this intent supported on your phone?";
-
-        launchIntentForUserClick(mContext, intent, errorMessage);
-
-        return true;
-    }
-
-    private boolean isWebSiteUrl(String url) {
-        return url.startsWith("http://") || url.startsWith("https://");
-    }
-
     private boolean launchApplicationUrl(String url) {
         Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
         intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
@@ -155,11 +136,14 @@ private boolean launchApplicationUrl(String url) {
     }
 
     private void showMoPubBrowserForUrl(String url) {
-        if (url == null || url.equals("")) url = "about:blank";
+        if (url == null || url.equals("")) {
+            url = "about:blank";
+        }
         MoPubLog.d("Final URI to show in browser: " + url);
-        Intent intent = new Intent(mContext, MoPubBrowser.class);
-        intent.putExtra(MoPubBrowser.DESTINATION_URL_KEY, url);
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+
+        final Bundle extras = new Bundle();
+        extras.putString(MoPubBrowser.DESTINATION_URL_KEY, url);
+        Intent intent = Intents.getStartActivityIntent(mContext, MoPubBrowser.class, extras);
 
         String errorMessage = "Could not handle intent action. "
                 + ". Perhaps you forgot to declare com.mopub.common.MoPubBrowser"
@@ -195,17 +179,27 @@ private void handleCustomIntentFromUri(Uri uri) {
         launchIntentForUserClick(mContext, customIntent, errorMessage);
     }
 
-    boolean launchIntentForUserClick(Context context, Intent intent, String errorMessage) {
+    boolean launchIntentForUserClick(@Nullable final Context context, @NonNull final Intent intent,
+            @Nullable final String errorMessage) {
+        Preconditions.NoThrow.checkNotNull(intent);
+
+        if (context == null) {
+            MoPubLog.d(errorMessage);
+            return false;
+        }
+
         if (!mHtmlWebView.wasClicked()) {
             return false;
         }
 
-        boolean wasIntentStarted = Utils.executeIntent(context, intent, errorMessage);
-        if (wasIntentStarted) {
+        try {
+            Intents.startActivity(context, intent);
             mHtmlWebViewListener.onClicked();
             mHtmlWebView.onResetUserClick();
+            return true;
+        } catch (IntentNotResolvableException e) {
+            MoPubLog.d(errorMessage);
+            return false;
         }
-
-        return wasIntentStarted;
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java
index 223c015e..1a1db4ec 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java
@@ -9,13 +9,9 @@
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
 
+import com.mopub.common.AdReport;
 import com.mopub.mobileads.factories.HtmlInterstitialWebViewFactory;
 
-import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
-import static com.mopub.mobileads.AdFetcher.CLICKTHROUGH_URL_KEY;
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
-import static com.mopub.mobileads.AdFetcher.SCROLLABLE_KEY;
 import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
 import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
@@ -23,15 +19,21 @@
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
+import static com.mopub.common.DataKeys.AD_REPORT_KEY;
+import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
+import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
+import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
 import static com.mopub.mobileads.HtmlWebViewClient.MOPUB_FAIL_LOAD;
 import static com.mopub.mobileads.HtmlWebViewClient.MOPUB_FINISH_LOAD;
 
 public class MoPubActivity extends BaseInterstitialActivity {
     private HtmlInterstitialWebView mHtmlInterstitialWebView;
 
-    public static void start(Context context, String htmlData, boolean isScrollable, String redirectUrl, String clickthroughUrl, AdConfiguration adConfiguration) {
-        Intent intent = createIntent(context, htmlData, isScrollable, redirectUrl, clickthroughUrl, adConfiguration);
+    public static void start(Context context, String htmlData, AdReport adReport, boolean isScrollable, String redirectUrl, String clickthroughUrl, long broadcastIdentifier) {
+        Intent intent = createIntent(context, htmlData, adReport, isScrollable, redirectUrl, clickthroughUrl, broadcastIdentifier);
         try {
             context.startActivity(intent);
         } catch (ActivityNotFoundException anfe) {
@@ -39,19 +41,20 @@ public static void start(Context context, String htmlData, boolean isScrollable,
         }
     }
 
-    static Intent createIntent(Context context, String htmlData, boolean isScrollable, String redirectUrl, String clickthroughUrl, AdConfiguration adConfiguration) {
+    static Intent createIntent(Context context, String htmlData, AdReport adReport, boolean isScrollable, String redirectUrl, String clickthroughUrl, long broadcastIdentifier) {
         Intent intent = new Intent(context, MoPubActivity.class);
         intent.putExtra(HTML_RESPONSE_BODY_KEY, htmlData);
         intent.putExtra(SCROLLABLE_KEY, isScrollable);
         intent.putExtra(CLICKTHROUGH_URL_KEY, clickthroughUrl);
         intent.putExtra(REDIRECT_URL_KEY, redirectUrl);
-        intent.putExtra(AD_CONFIGURATION_KEY, adConfiguration);
+        intent.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
+        intent.putExtra(AD_REPORT_KEY, adReport);
         intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
         return intent;
     }
 
-    static void preRenderHtml(final Context context, final CustomEventInterstitialListener customEventInterstitialListener, String htmlData) {
-        HtmlInterstitialWebView dummyWebView = HtmlInterstitialWebViewFactory.create(context, customEventInterstitialListener, false, null, null, null);
+    static void preRenderHtml(final Context context, final AdReport adReport, final CustomEventInterstitialListener customEventInterstitialListener, String htmlData) {
+        HtmlInterstitialWebView dummyWebView = HtmlInterstitialWebViewFactory.create(context, adReport, customEventInterstitialListener, false, null, null);
         dummyWebView.enablePlugins(false);
 
         dummyWebView.addMoPubUriJavascriptInterface(new HtmlInterstitialWebView.MoPubUriJavascriptFireFinishLoadListener() {
@@ -83,7 +86,7 @@ public View getAdView() {
         String clickthroughUrl = intent.getStringExtra(CLICKTHROUGH_URL_KEY);
         String htmlResponse = intent.getStringExtra(HTML_RESPONSE_BODY_KEY);
 
-        mHtmlInterstitialWebView = HtmlInterstitialWebViewFactory.create(getApplicationContext(), new BroadcastingInterstitialListener(), isScrollable, redirectUrl, clickthroughUrl, getAdConfiguration());
+        mHtmlInterstitialWebView = HtmlInterstitialWebViewFactory.create(getApplicationContext(), mAdReport, new BroadcastingInterstitialListener(), isScrollable, redirectUrl, clickthroughUrl);
         mHtmlInterstitialWebView.loadHtmlResponse(htmlResponse);
 
         return mHtmlInterstitialWebView;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
index 677f3fa0..ced697be 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
@@ -6,18 +6,10 @@
 import com.mopub.common.BaseUrlGenerator;
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.Constants;
-import com.mopub.common.GpsHelper;
 import com.mopub.common.SharedPreferencesHelper;
 import com.mopub.common.logging.MoPubLog;
-import com.mopub.mobileads.factories.HttpClientFactory;
-
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpResponse;
-import org.apache.http.HttpStatus;
-import org.apache.http.client.methods.HttpGet;
-import org.apache.http.impl.client.DefaultHttpClient;
-
-import static com.mopub.common.GpsHelper.GpsHelperListener;
+import com.mopub.network.TrackingRequest;
+import com.mopub.volley.VolleyError;
 
 public class MoPubConversionTracker {
     private Context mContext;
@@ -36,11 +28,18 @@ public void reportAppOpen(Context context) {
         mSharedPreferences = SharedPreferencesHelper.getSharedPreferences(mContext);
 
         if (!isAlreadyTracked()) {
-            GpsHelper.fetchAdvertisingInfoAsync(mContext, new GpsHelperListener() {
+            TrackingRequest.makeTrackingHttpRequest(new ConversionUrlGenerator().generateUrlString(Constants.HOST),
+                    mContext, new TrackingRequest.Listener() {
                 @Override
-                public void onFetchAdInfoCompleted() {
-                    new Thread(new TrackOpen()).start();
+                public void onResponse() {
+                    mSharedPreferences
+                            .edit()
+                            .putBoolean(mIsTrackedKey, true)
+                            .commit();
                 }
+
+                @Override
+                public void onErrorResponse(final VolleyError volleyError) { }
             });
         } else {
             MoPubLog.d("Conversion already tracked");
@@ -55,13 +54,11 @@ private boolean isAlreadyTracked() {
         @Override
         public String generateUrlString(String serverHostname) {
             initUrlString(serverHostname, Constants.CONVERSION_TRACKING_HANDLER);
-
             setApiVersion("6");
             setPackageId(mPackageName);
             ClientMetadata clientMetadata = ClientMetadata.getInstance(mContext);
-            setUdid(clientMetadata.getAdvertisingId());
-            setDoNotTrack(clientMetadata.isDoNotTrackSet());
             setAppVersion(clientMetadata.getAppVersion());
+            appendAdvertisingInfoTemplates();
             return getFinalUrlString();
         }
 
@@ -69,39 +66,4 @@ private void setPackageId(String packageName) {
             addParam("id", packageName);
         }
     }
-
-    private class TrackOpen implements Runnable {
-        public void run() {
-            String url = new ConversionUrlGenerator().generateUrlString(Constants.HOST);
-            MoPubLog.d("Conversion track: " + url);
-
-            DefaultHttpClient httpClient = HttpClientFactory.create();
-            HttpResponse response;
-            try {
-                HttpGet httpget = new HttpGet(url);
-                response = httpClient.execute(httpget);
-            } catch (Exception e) {
-                MoPubLog.d("Conversion track failed [" + e.getClass().getSimpleName() + "]: " + url);
-                return;
-            }
-
-            if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
-                MoPubLog.d("Conversion track failed: Status code != 200.");
-                return;
-            }
-
-            HttpEntity entity = response.getEntity();
-            if (entity == null || entity.getContentLength() == 0) {
-                MoPubLog.d("Conversion track failed: Response was empty.");
-                return;
-            }
-
-            // If we made it here, the request has been tracked
-            MoPubLog.d("Conversion track successful.");
-            mSharedPreferences
-                    .edit()
-                    .putBoolean(mIsTrackedKey, true)
-                    .commit();
-        }
-    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
index be773f6c..5aa4176d 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
@@ -3,7 +3,9 @@
 import android.app.Activity;
 import android.content.Context;
 import android.location.Location;
+import android.text.TextUtils;
 
+import com.mopub.common.AdFormat;
 import com.mopub.common.MoPub;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
@@ -11,8 +13,6 @@
 import java.util.Map;
 
 import static com.mopub.common.LocationService.LocationAwareness;
-import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
 
 public class MoPubInterstitial implements CustomEventInterstitialAdapter.CustomEventInterstitialAdapterListener {
@@ -253,8 +253,17 @@ public MoPubInterstitialView(Context context) {
         }
 
         @Override
-        protected void loadCustomEvent(Map<String, String> paramsMap) {
-            if (paramsMap == null) {
+        public AdFormat getAdFormat() {
+            return AdFormat.INTERSTITIAL;
+        }
+
+        @Override
+        protected void loadCustomEvent(String customEventClassName, Map<String, String> serverExtras) {
+            if (mAdViewController == null) {
+                return;
+            }
+
+            if (TextUtils.isEmpty(customEventClassName)) {
                 MoPubLog.d("Couldn't invoke custom event because the server did not specify one.");
                 loadFailUrl(ADAPTER_NOT_FOUND);
                 return;
@@ -268,8 +277,10 @@ protected void loadCustomEvent(Map<String, String> paramsMap) {
 
             mCustomEventInterstitialAdapter = CustomEventInterstitialAdapterFactory.create(
                     MoPubInterstitial.this,
-                    paramsMap.get(CUSTOM_EVENT_NAME.getKey()),
-                    paramsMap.get(CUSTOM_EVENT_DATA.getKey()));
+                    customEventClassName,
+                    serverExtras,
+                    mAdViewController.getBroadcastIdentifier(),
+                    mAdViewController.getAdReport());
             mCustomEventInterstitialAdapter.setAdapterListener(MoPubInterstitial.this);
             mCustomEventInterstitialAdapter.loadInterstitial();
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
index f1fe7068..0e97bcf5 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -6,12 +6,13 @@
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.location.Location;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
 import android.util.AttributeSet;
 import android.view.View;
 import android.webkit.WebViewDatabase;
 import android.widget.FrameLayout;
-
-import com.mopub.common.Constants;
+import com.mopub.common.AdFormat;
 import com.mopub.common.MoPub;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.ManifestUtils;
@@ -19,12 +20,9 @@
 import com.mopub.mobileads.factories.AdViewControllerFactory;
 import com.mopub.mobileads.factories.CustomEventBannerAdapterFactory;
 
-import java.util.Collections;
-import java.util.Map;
+import java.util.*;
 
 import static com.mopub.common.LocationService.LocationAwareness;
-import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
 
 public class MoPubView extends FrameLayout {
@@ -37,7 +35,7 @@
     }
 
     public static final int DEFAULT_LOCATION_PRECISION = 6;
-
+    @Nullable
     protected AdViewController mAdViewController;
     protected CustomEventBannerAdapter mCustomEventBannerAdapter;
 
@@ -148,8 +146,11 @@ protected void loadFailUrl(MoPubErrorCode errorCode) {
         if (mAdViewController != null) mAdViewController.loadFailUrl(errorCode);
     }
 
-    protected void loadCustomEvent(Map<String, String> paramsMap) {
-        if (paramsMap == null) {
+    protected void loadCustomEvent(String customEventClassName, Map<String, String> serverExtras) {
+        if (mAdViewController == null) {
+            return;
+        }
+        if (TextUtils.isEmpty(customEventClassName)) {
             MoPubLog.d("Couldn't invoke custom event because the server did not specify one.");
             loadFailUrl(ADAPTER_NOT_FOUND);
             return;
@@ -163,8 +164,10 @@ protected void loadCustomEvent(Map<String, String> paramsMap) {
 
         mCustomEventBannerAdapter = CustomEventBannerAdapterFactory.create(
                 this,
-                paramsMap.get(CUSTOM_EVENT_NAME.getKey()),
-                paramsMap.get(CUSTOM_EVENT_DATA.getKey()));
+                customEventClassName,
+                serverExtras,
+                mAdViewController.getBroadcastIdentifier(),
+                mAdViewController.getAdReport());
         mCustomEventBannerAdapter.loadAd();
     }
 
@@ -292,12 +295,18 @@ public String getResponseString() {
         return (mAdViewController != null) ? mAdViewController.getResponseString() : null;
     }
 
+    @Deprecated
     public void setClickthroughUrl(String url) {
-        if (mAdViewController != null) mAdViewController.setClickthroughUrl(url);
+        // Does nothing.
     }
 
+    public String getClickTrackingUrl() {
+        return (mAdViewController != null) ? mAdViewController.getClickTrackingUrl() : null;
+    }
+
+    @Deprecated
     public String getClickthroughUrl() {
-        return (mAdViewController != null) ? mAdViewController.getClickthroughUrl() : null;
+        return getClickTrackingUrl();
     }
 
     public Activity getActivity() {
@@ -317,8 +326,10 @@ public void setLocalExtras(Map<String, Object> localExtras) {
     }
 
     public Map<String, Object> getLocalExtras() {
-        if (mAdViewController != null) return mAdViewController.getLocalExtras();
-        return Collections.emptyMap();
+        if (mAdViewController != null) {
+            return mAdViewController.getLocalExtras();
+        }
+        return new TreeMap<String, Object>();
     }
 
     public void setAutorefreshEnabled(boolean enabled) {
@@ -366,6 +377,10 @@ AdViewController getAdViewController() {
         return mAdViewController;
     }
 
+    public AdFormat getAdFormat() {
+        return AdFormat.BANNER;
+    }
+
     @Deprecated
     public void setLocationAwareness(LocationAwareness locationAwareness) {
         MoPub.setLocationAwareness(locationAwareness.getNewLocationAwareness());
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
index 42f7e7df..91293ca5 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
@@ -1,10 +1,8 @@
 package com.mopub.mobileads;
 
-import android.annotation.TargetApi;
 import android.content.ActivityNotFoundException;
 import android.content.Context;
 import android.content.Intent;
-import android.os.Build;
 import android.os.Build.VERSION;
 import android.os.Build.VERSION_CODES;
 import android.os.Bundle;
@@ -16,6 +14,7 @@
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
 
+import com.mopub.common.AdReport;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
@@ -25,16 +24,14 @@
 import com.mopub.mraid.MraidWebViewDebugListener;
 import com.mopub.mraid.PlacementType;
 
-import static com.mopub.common.util.VersionCode.ICE_CREAM_SANDWICH;
-import static com.mopub.common.util.VersionCode.currentApiLevel;
-import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks
-        .WEB_VIEW_DID_APPEAR;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks
-        .WEB_VIEW_DID_CLOSE;
+import static com.mopub.common.DataKeys.AD_REPORT_KEY;
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
+import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
+import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
 
@@ -59,27 +56,35 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
                 return true;
             }
 
+            @Override
+            public void onReceivedError(final WebView view, final int errorCode,
+                    final String description,
+                    final String failingUrl) {
+                super.onReceivedError(view, errorCode, description, failingUrl);
+                customEventInterstitialListener.onInterstitialFailed(
+                        MoPubErrorCode.MRAID_LOAD_ERROR);
+            }
         });
 
         dummyWebView.loadDataWithBaseURL(null, htmlData, "text/html", "UTF-8", null);
     }
 
-    public static void start(@NonNull Context context, @NonNull String htmlData,
-            @NonNull AdConfiguration adConfiguration) {
-        Intent intent = createIntent(context, htmlData, adConfiguration);
+    public static void start(@NonNull Context context, @Nullable AdReport adreport, @NonNull String htmlData, long broadcastIdentifier) {
+        Intent intent = createIntent(context, adreport, htmlData, broadcastIdentifier);
         try {
             context.startActivity(intent);
-        } catch (ActivityNotFoundException anfe) {
+        } catch (ActivityNotFoundException exception) {
             Log.d("MraidInterstitial", "MraidActivity.class not found. Did you declare MraidActivity in your manifest?");
         }
     }
 
     @VisibleForTesting
-    protected static Intent createIntent(@NonNull Context context, @NonNull String htmlData,
-            @NonNull AdConfiguration adConfiguration) {
+    protected static Intent createIntent(@NonNull Context context, @Nullable AdReport adReport,
+            @NonNull String htmlData, long broadcastIdentifier) {
         Intent intent = new Intent(context, MraidActivity.class);
         intent.putExtra(HTML_RESPONSE_BODY_KEY, htmlData);
-        intent.putExtra(AD_CONFIGURATION_KEY, adConfiguration);
+        intent.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
+        intent.putExtra(AD_REPORT_KEY, adReport);
         intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
         return intent;
     }
@@ -92,15 +97,9 @@ public View getAdView() {
             finish();
             return new View(this);
         }
-        AdConfiguration adConfiguration = getAdConfiguration();
-        if (adConfiguration == null) {
-            MoPubLog.w("MraidActivity received a null ad configuration. Finishing the activity.");
-            finish();
-            return new View(this);
-        }
 
         mMraidController = new MraidController(
-                this, adConfiguration, PlacementType.INTERSTITIAL);
+                this, mAdReport, PlacementType.INTERSTITIAL);
 
         mMraidController.setDebugListener(mDebugListener);
         mMraidController.setMraidListener(new MraidListener() {
@@ -113,6 +112,10 @@ public void onLoaded(View view) {
 
             @Override
             public void onFailedToLoad() {
+                MoPubLog.d("MraidActivity failed to load. Finishing the activity");
+                broadcastAction(MraidActivity.this, getBroadcastIdentifier(),
+                        ACTION_INTERSTITIAL_FAIL);
+                finish();
             }
 
             public void onClose() {
@@ -181,6 +184,7 @@ protected void onDestroy() {
         if (mMraidController != null) {
             mMraidController.destroy();
         }
+
         broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_DISMISS);
         super.onDestroy();
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
index d3f7fb04..8f1be8d9 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
@@ -8,11 +8,11 @@
 import android.view.View;
 import android.view.Window;
 import android.view.WindowManager;
-
 import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.IntentUtils;
+import com.mopub.common.util.Intents;
 import com.mopub.mraid.MraidVideoViewController;
 
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
 
@@ -27,12 +27,7 @@ protected void onCreate(Bundle savedInstanceState) {
         requestWindowFeature(Window.FEATURE_NO_TITLE);
         getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
 
-        final AdConfiguration adConfiguration = getAdConfiguration();
-        if (adConfiguration != null) {
-            mBroadcastIdentifier = adConfiguration.getBroadcastIdentifier();
-        } else {
-            MoPubLog.d("Unable to obtain broadcast identifier. Video interactions cannot be tracked.");
-        }
+        mBroadcastIdentifier = getBroadcastIdentifierFromIntent(getIntent());
 
         try {
             mBaseVideoController = createVideoViewController();
@@ -86,23 +81,13 @@ protected void onActivityResult(final int requestCode, final int resultCode, fin
         }
     }
 
-    private AdConfiguration getAdConfiguration() {
-        AdConfiguration adConfiguration;
-        try {
-            adConfiguration = (AdConfiguration) getIntent().getSerializableExtra(AdFetcher.AD_CONFIGURATION_KEY);
-        } catch (ClassCastException e) {
-            adConfiguration = null;
-        }
-        return adConfiguration;
-    }
-
     private BaseVideoViewController createVideoViewController() throws IllegalStateException {
         String clazz = getIntent().getStringExtra(VIDEO_CLASS_EXTRAS_KEY);
 
         if ("vast".equals(clazz)) {
             return new VastVideoViewController(this, getIntent().getExtras(), mBroadcastIdentifier, this);
         } else if ("mraid".equals(clazz)) {
-            return new MraidVideoViewController(this, getIntent().getExtras(), mBroadcastIdentifier, this);
+            return new MraidVideoViewController(this, getIntent().getExtras(), this);
         } else {
             throw new IllegalStateException("Unsupported video type: " + clazz);
         }
@@ -135,7 +120,7 @@ public void onStartActivityForResult(final Class<? extends Activity> clazz,
             return;
         }
 
-        final Intent intent = IntentUtils.getStartActivityIntent(this, clazz, extras);
+        final Intent intent = Intents.getStartActivityIntent(this, clazz, extras);
 
         try {
             startActivityForResult(intent, requestCode);
@@ -144,6 +129,10 @@ public void onStartActivityForResult(final Class<? extends Activity> clazz,
         }
     }
 
+    protected static long getBroadcastIdentifierFromIntent(Intent intent) {
+        return intent.getLongExtra(BROADCAST_IDENTIFIER_KEY, -1);
+    }
+
     @Deprecated // for testing
     BaseVideoViewController getBaseVideoViewController() {
         return mBaseVideoController;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
index cf0f57b5..a6b3c625 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
@@ -2,16 +2,21 @@
 
 import android.content.Context;
 
+import com.mopub.common.AdReport;
+import com.mopub.common.logging.MoPubLog;
+
 import java.util.Map;
 
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.common.DataKeys.AD_REPORT_KEY;
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
+import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 
 public abstract class ResponseBodyInterstitial extends CustomEventInterstitial {
     private EventForwardingBroadcastReceiver mBroadcastReceiver;
     protected Context mContext;
-    protected AdConfiguration mAdConfiguration;
-    long mBroadcastIdentifier;
+    protected AdReport mAdReport;
+    protected long mBroadcastIdentifier;
 
     abstract protected void extractExtras(Map<String, String> serverExtras);
     abstract protected void preRenderHtml(CustomEventInterstitialListener customEventInterstitialListener);
@@ -33,12 +38,24 @@ public void loadInterstitial(
             return;
         }
 
-        mAdConfiguration = AdConfiguration.extractFromMap(localExtras);
-        if (mAdConfiguration != null) {
-            mBroadcastIdentifier = mAdConfiguration.getBroadcastIdentifier();
+
+        try {
+            mAdReport = (AdReport) localExtras.get(AD_REPORT_KEY);
+            Long boxedBroadcastId = (Long) localExtras.get(BROADCAST_IDENTIFIER_KEY);
+            if (boxedBroadcastId == null) {
+                MoPubLog.e("Broadcast Identifier was not set in localExtras");
+                customEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+                return;
+            }
+            mBroadcastIdentifier = boxedBroadcastId;
+        } catch (ClassCastException e) {
+            MoPubLog.e("LocalExtras contained an incorrect type.");
+            customEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+            return;
         }
 
-        mBroadcastReceiver = new EventForwardingBroadcastReceiver(customEventInterstitialListener, mBroadcastIdentifier);
+        mBroadcastReceiver = new EventForwardingBroadcastReceiver(customEventInterstitialListener,
+                mBroadcastIdentifier);
         mBroadcastReceiver.register(context);
 
         preRenderHtml(customEventInterstitialListener);
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoDownloadTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoDownloadTask.java
index 778d7de1..9077525a 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoDownloadTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoDownloadTask.java
@@ -37,7 +37,7 @@ protected Boolean doInBackground(final String... params) {
         AndroidHttpClient httpClient = null;
         try {
             httpClient = HttpClient.getHttpClient();
-            final HttpGet httpget = new HttpGet(videoUrl);
+            final HttpGet httpget = HttpClient.initializeHttpGet(videoUrl);
             final HttpResponse response = httpClient.execute(httpget);
 
             if (response == null || response.getEntity() == null) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
index 7c85da5f..3ca5a8d3 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
@@ -1,8 +1,7 @@
 package com.mopub.mobileads;
 
-import android.net.Uri;
-
 import com.mopub.common.CacheService;
+import com.mopub.common.DataKeys;
 import com.mopub.mobileads.factories.VastManagerFactory;
 import com.mopub.mobileads.util.vast.VastManager;
 import com.mopub.mobileads.util.vast.VastVideoConfiguration;
@@ -17,7 +16,7 @@
 
     @Override
     protected void extractExtras(Map<String, String> serverExtras) {
-        mVastResponse = Uri.decode(serverExtras.get(AdFetcher.HTML_RESPONSE_BODY_KEY));
+        mVastResponse = serverExtras.get(DataKeys.HTML_RESPONSE_BODY_KEY);
     }
 
     @Override
@@ -35,7 +34,7 @@ protected void preRenderHtml(CustomEventInterstitialListener customEventIntersti
 
     @Override
     public void showInterstitial() {
-        MraidVideoPlayerActivity.startVast(mContext, mVastVideoConfiguration, mAdConfiguration);
+        MraidVideoPlayerActivity.startVast(mContext, mVastVideoConfiguration, mBroadcastIdentifier);
     }
 
     @Override
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
index 570981cf..f2348078 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
@@ -17,37 +17,35 @@
 import android.widget.ImageView;
 import android.widget.RelativeLayout;
 import android.widget.VideoView;
-
 import com.mopub.common.DownloadResponse;
 import com.mopub.common.DownloadTask;
 import com.mopub.common.HttpResponses;
 import com.mopub.common.MoPubBrowser;
-import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.VisibleForTesting;
 import com.mopub.common.event.MoPubEvents;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.Dips;
 import com.mopub.common.util.Drawables;
+import com.mopub.common.util.Intents;
 import com.mopub.common.util.Streams;
 import com.mopub.common.util.VersionCode;
+import com.mopub.exceptions.IntentNotResolvableException;
+import com.mopub.exceptions.UrlParseException;
 import com.mopub.mobileads.util.vast.VastCompanionAd;
 import com.mopub.mobileads.util.vast.VastVideoConfiguration;
-
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.HttpGet;
 
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.Serializable;
-import java.util.List;
-import java.util.concurrent.LinkedBlockingQueue;
-import java.util.concurrent.ThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
+import java.io.*;
+import java.util.*;
 
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
 import static com.mopub.common.HttpClient.initializeHttpGet;
-import static com.mopub.common.HttpClient.makeTrackingHttpRequest;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.network.TrackingRequest.makeTrackingHttpRequest;
 
 public class VastVideoViewController extends BaseVideoViewController implements DownloadTask.DownloadTaskListener {
     static final String VAST_VIDEO_CONFIGURATION = "vast_video_configuration";
@@ -60,9 +58,9 @@
     private static final int MAX_VIDEO_RETRIES = 1;
     private static final int VIDEO_VIEW_FILE_PERMISSION_ERROR = Integer.MIN_VALUE;
 
-    private static final ThreadPoolExecutor sThreadPoolExecutor = new ThreadPoolExecutor(10, 50, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());
     static final int DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON = 5 * 1000;
     static final int MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON = 16 * 1000;
+    static final int START_MARK_THRESHOLD = 2000;
 
     private final VastVideoConfiguration mVastVideoConfiguration;
     private final VastCompanionAd mVastCompanionAd;
@@ -81,10 +79,19 @@
     private boolean mIsFirstMarkHit;
     private boolean mIsSecondMarkHit;
     private boolean mIsThirdMarkHit;
+    // This flag indicates that the final video checkpoint has been reached, therefore allowing
+    // us to fire the video completion tracker in MediaPlayer#onCompletion.
+    // This is a safeguard against inconsistent MediaPlayer#onCompletion callbacks due to differing
+    // implementations across Android versions and devices.
+    private boolean mIsFinalMarkHit;
+
     private int mSeekerPositionOnPause;
     private boolean mIsVideoFinishedPlaying;
     private int mVideoRetries;
 
+    private boolean mVideoError;
+    private boolean mCompletionTrackerFired;
+
     VastVideoViewController(final Context context,
             final Bundle bundle,
             final long broadcastIdentifier,
@@ -131,13 +138,6 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
         getLayout().addView(mVastVideoToolbar);
 
         mCompanionAdImageView = createCompanionAdImageView(context);
-
-        makeTrackingHttpRequest(
-                mVastVideoConfiguration.getImpressionTrackers(),
-                context,
-                MoPubEvents.Type.IMPRESSION_REQUEST
-        );
-
         mVideoProgressCheckerRunnable = createVideoProgressCheckerRunnable();
     }
 
@@ -150,10 +150,14 @@ protected VideoView getVideoView() {
     protected void onCreate() {
         super.onCreate();
         getBaseVideoViewControllerListener().onSetRequestedOrientation(SCREEN_ORIENTATION_LANDSCAPE);
+        downloadCompanionAd();
 
+        makeTrackingHttpRequest(
+                mVastVideoConfiguration.getImpressionTrackers(),
+                getContext(),
+                MoPubEvents.Type.IMPRESSION_REQUEST
+        );
         broadcastAction(ACTION_INTERSTITIAL_SHOW);
-
-        downloadCompanionAd();
     }
 
     @Override
@@ -250,7 +254,7 @@ public void run() {
                 if (videoLength > 0) {
                     float progressPercentage = currentPosition / videoLength;
 
-                    if (!mIsStartMarkHit && currentPosition >= 1000) {
+                    if (!mIsStartMarkHit && currentPosition >= START_MARK_THRESHOLD) {
                         mIsStartMarkHit = true;
                         makeTrackingHttpRequest(mVastVideoConfiguration.getStartTrackers(), getContext());
                     }
@@ -267,6 +271,7 @@ public void run() {
 
                     if (!mIsThirdMarkHit && progressPercentage > THIRD_QUARTER_MARKER) {
                         mIsThirdMarkHit = true;
+                        mIsFinalMarkHit = true;
                         makeTrackingHttpRequest(mVastVideoConfiguration.getThirdQuartileTrackers(), getContext());
                     }
 
@@ -335,10 +340,13 @@ public void onCompletion(MediaPlayer mp) {
                 makeVideoInteractable();
 
                 videoCompleted(false);
-
-                makeTrackingHttpRequest(mVastVideoConfiguration.getCompleteTrackers(), context);
                 mIsVideoFinishedPlaying = true;
 
+                if (!mVideoError && mIsFinalMarkHit && !mCompletionTrackerFired) {
+                    makeTrackingHttpRequest(mVastVideoConfiguration.getCompleteTrackers(), context);
+                    mCompletionTrackerFired = true;
+                }
+
                 videoView.setVisibility(View.GONE);
                 // check the drawable to see if the image view was populated with content
                 if (mCompanionAdImageView.getDrawable() != null) {
@@ -356,6 +364,7 @@ public boolean onError(final MediaPlayer mediaPlayer, final int what, final int
                     stopProgressChecker();
                     makeVideoInteractable();
                     videoError(false);
+                    mVideoError = true;
                     return false;
                 }
             }
@@ -403,6 +412,42 @@ boolean retryMediaPlayer(final MediaPlayer mediaPlayer, final int what, final in
         return false;
     }
 
+    /**
+     * Called upon user click. Attempts open mopubnativebrowser links in the device browser and all
+     * other links in the MoPub in-app browser.
+     */
+    @VisibleForTesting
+    void handleClick(final List<String> clickThroughTrackers, final String clickThroughUrl) {
+        makeTrackingHttpRequest(clickThroughTrackers, getContext(), MoPubEvents.Type.CLICK_REQUEST);
+
+        if (clickThroughUrl == null) {
+            return;
+        }
+
+        broadcastAction(ACTION_INTERSTITIAL_CLICK);
+
+        if (Intents.isNativeBrowserScheme(clickThroughUrl)) {
+            try {
+                final Intent intent = Intents.intentForNativeBrowserScheme(clickThroughUrl);
+                Intents.startActivity(getContext(), intent);
+                return;
+            } catch (UrlParseException e) {
+                MoPubLog.d(e.getMessage());
+            } catch (IntentNotResolvableException e) {
+                MoPubLog.d("Could not handle intent for URI: " + clickThroughUrl + ". "
+                        + e.getMessage());
+            }
+
+            return;
+        }
+
+        Bundle bundle = new Bundle();
+        bundle.putString(MoPubBrowser.DESTINATION_URL_KEY, clickThroughUrl);
+
+        getBaseVideoViewControllerListener().onStartActivityForResult(MoPubBrowser.class,
+                MOPUB_BROWSER_REQUEST_CODE, bundle);
+    }
+
     private ImageView createCompanionAdImageView(final Context context) {
         RelativeLayout relativeLayout = new RelativeLayout(context);
         relativeLayout.setGravity(Gravity.CENTER);
@@ -426,18 +471,6 @@ private ImageView createCompanionAdImageView(final Context context) {
         return imageView;
     }
 
-    private void handleClick(final List<String> clickThroughTrackers, final String clickThroughUrl) {
-        makeTrackingHttpRequest(clickThroughTrackers, getContext(), MoPubEvents.Type.CLICK_REQUEST);
-
-        videoClicked();
-
-        Bundle bundle = new Bundle();
-        bundle.putString(MoPubBrowser.DESTINATION_URL_KEY, clickThroughUrl);
-
-        getBaseVideoViewControllerListener().onStartActivityForResult(MoPubBrowser.class,
-                MOPUB_BROWSER_REQUEST_CODE, bundle);
-    }
-
     private boolean isLongVideo(final int duration) {
         return (duration >= MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON);
     }
@@ -471,43 +504,71 @@ private void stopProgressChecker() {
 
     // for testing
     @Deprecated
+    @VisibleForTesting
     boolean getIsVideoProgressShouldBeChecked() {
         return mIsVideoProgressShouldBeChecked;
     }
 
     // for testing
     @Deprecated
+    @VisibleForTesting
     int getVideoRetries() {
         return mVideoRetries;
     }
 
     // for testing
     @Deprecated
+    @VisibleForTesting
     int getShowCloseButtonDelay() {
         return mShowCloseButtonDelay;
     }
 
     // for testing
     @Deprecated
+    @VisibleForTesting
     boolean isShowCloseButtonEventFired() {
         return mShowCloseButtonEventFired;
     }
 
     // for testing
     @Deprecated
+    @VisibleForTesting
     void setCloseButtonVisible(boolean visible) {
         mShowCloseButtonEventFired = visible;
     }
 
     // for testing
     @Deprecated
+    @VisibleForTesting
     boolean isVideoFinishedPlaying() {
         return mIsVideoFinishedPlaying;
     }
 
     // for testing
     @Deprecated
+    @VisibleForTesting
     ImageView getCompanionAdImageView() {
         return mCompanionAdImageView;
     }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    void setFinalMarkHit() {
+        mIsFinalMarkHit = true;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    void setVideoError() {
+        mVideoError = true;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    boolean getVideoError() {
+        return mVideoError;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/ViewGestureDetector.java b/mopub-sdk/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
index e554f3df..cdb92180 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
@@ -1,10 +1,13 @@
 package com.mopub.mobileads;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.GestureDetector;
 import android.view.MotionEvent;
 import android.view.View;
 
+import com.mopub.common.AdReport;
 import com.mopub.common.logging.MoPubLog;
 
 public class ViewGestureDetector extends GestureDetector {
@@ -19,8 +22,8 @@
     private AdAlertGestureListener mAdAlertGestureListener;
     private UserClickListener mUserClickListener;
 
-    public ViewGestureDetector(Context context, View view, AdConfiguration adConfiguration)  {
-        this(context, view, new AdAlertGestureListener(view, adConfiguration));
+    public ViewGestureDetector(@NonNull Context context, @NonNull View view, @Nullable AdReport adReport)  {
+        this(context, view, new AdAlertGestureListener(view, adReport));
     }
 
     private ViewGestureDetector(Context context, View view, AdAlertGestureListener adAlertGestureListener) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
index 36f740e8..40fcd236 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
@@ -1,13 +1,10 @@
 package com.mopub.mobileads;
 
 import android.content.Context;
-import android.location.Location;
 
 import com.mopub.common.AdUrlGenerator;
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.Constants;
-import com.mopub.common.LocationService;
-import com.mopub.common.MoPub;
 import com.mopub.common.util.DateAndTime;
 
 public class WebViewAdUrlGenerator extends AdUrlGenerator {
@@ -34,10 +31,6 @@ public String generateUrlString(String serverHostname) {
                 clientMetadata.getDeviceModel(),
                 clientMetadata.getDeviceProduct());
 
-        setUdid(clientMetadata.getAdvertisingId());
-
-        setDoNotTrack(clientMetadata.isDoNotTrackSet());
-
         setKeywords(mKeywords);
 
         setLocation(mLocation);
@@ -65,6 +58,8 @@ public String generateUrlString(String serverHostname) {
 
         setTwitterAppInstalledFlag();
 
+        appendAdvertisingInfoTemplates();
+
         return getFinalUrlString();
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdFetchTaskFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdFetchTaskFactory.java
deleted file mode 100644
index 23c463be..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdFetchTaskFactory.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package com.mopub.mobileads.factories;
-
-import com.mopub.mobileads.AdFetchTask;
-import com.mopub.mobileads.AdViewController;
-import com.mopub.mobileads.TaskTracker;
-
-public class AdFetchTaskFactory {
-    protected static AdFetchTaskFactory instance = new AdFetchTaskFactory();
-
-    @Deprecated // for testing
-    public static void setInstance(AdFetchTaskFactory factory) {
-        instance = factory;
-    }
-
-    public static AdFetchTask create(TaskTracker taskTracker, AdViewController adViewController, String userAgent, int timeoutMilliseconds) {
-        return instance.internalCreate(taskTracker, adViewController, userAgent, timeoutMilliseconds);
-    }
-
-    protected AdFetchTask internalCreate(TaskTracker taskTracker, AdViewController adViewController, String userAgent, int timeoutMilliseconds) {
-        return new AdFetchTask(taskTracker, adViewController, userAgent, timeoutMilliseconds);
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdFetcherFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdFetcherFactory.java
deleted file mode 100644
index 7490ced8..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdFetcherFactory.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package com.mopub.mobileads.factories;
-
-import com.mopub.mobileads.AdFetcher;
-import com.mopub.mobileads.AdViewController;
-
-public class AdFetcherFactory {
-    protected static AdFetcherFactory instance = new AdFetcherFactory();
-
-    @Deprecated // for testing
-    public static void setInstance(AdFetcherFactory factory) {
-        instance = factory;
-    }
-
-    public static AdFetcher create(AdViewController adViewController, String userAgent) {
-        return instance.internalCreate(adViewController, userAgent);
-    }
-
-    protected AdFetcher internalCreate(AdViewController adViewController, String userAgent) {
-        return new AdFetcher(adViewController, userAgent);
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java
index bf363e57..d6a53767 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java
@@ -1,8 +1,13 @@
 package com.mopub.mobileads.factories;
 
+import android.support.annotation.NonNull;
+
+import com.mopub.common.AdReport;
 import com.mopub.mobileads.CustomEventBannerAdapter;
 import com.mopub.mobileads.MoPubView;
 
+import java.util.Map;
+
 public class CustomEventBannerAdapterFactory {
     protected static CustomEventBannerAdapterFactory instance = new CustomEventBannerAdapterFactory();
 
@@ -11,11 +16,19 @@ public static void setInstance(CustomEventBannerAdapterFactory factory) {
         instance = factory;
     }
 
-    public static CustomEventBannerAdapter create(MoPubView moPubView, String className, String classData) {
-        return instance.internalCreate(moPubView, className, classData);
+    public static CustomEventBannerAdapter create(@NonNull MoPubView moPubView,
+            @NonNull String className,
+            @NonNull Map<String, String> serverExtras,
+            long broadcastIdentifier,
+            @NonNull AdReport adReport) {
+        return instance.internalCreate(moPubView, className, serverExtras, broadcastIdentifier, adReport);
     }
 
-    protected CustomEventBannerAdapter internalCreate(MoPubView moPubView, String className, String classData) {
-        return new CustomEventBannerAdapter(moPubView, className, classData);
+    protected CustomEventBannerAdapter internalCreate(@NonNull MoPubView moPubView,
+            @NonNull String className,
+            @NonNull Map<String, String> serverExtras,
+            long broadcastIdentifier,
+            @NonNull AdReport adReport) {
+        return new CustomEventBannerAdapter(moPubView, className, serverExtras, broadcastIdentifier, adReport);
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java
index f6534dda..e7042f5c 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java
@@ -1,8 +1,11 @@
 package com.mopub.mobileads.factories;
 
+import com.mopub.common.AdReport;
 import com.mopub.mobileads.CustomEventInterstitialAdapter;
 import com.mopub.mobileads.MoPubInterstitial;
 
+import java.util.Map;
+
 public class CustomEventInterstitialAdapterFactory {
     protected static CustomEventInterstitialAdapterFactory instance = new CustomEventInterstitialAdapterFactory();
 
@@ -11,11 +14,11 @@ public static void setInstance(CustomEventInterstitialAdapterFactory factory) {
         instance = factory;
     }
 
-    public static CustomEventInterstitialAdapter create(MoPubInterstitial moPubInterstitial, String className, String classData) {
-        return instance.internalCreate(moPubInterstitial, className, classData);
+    public static CustomEventInterstitialAdapter create(MoPubInterstitial moPubInterstitial, String className, Map<String, String> serverExtras, long broadcastIdentifier, AdReport adReport) {
+        return instance.internalCreate(moPubInterstitial, className, serverExtras, broadcastIdentifier, adReport);
     }
 
-    protected CustomEventInterstitialAdapter internalCreate(MoPubInterstitial moPubInterstitial, String className, String classData) {
-        return new CustomEventInterstitialAdapter(moPubInterstitial, className, classData);
+    protected CustomEventInterstitialAdapter internalCreate(MoPubInterstitial moPubInterstitial, String className, Map<String, String> serverExtras, long broadcastIdentifier, AdReport adReport) {
+        return new CustomEventInterstitialAdapter(moPubInterstitial, className, serverExtras, broadcastIdentifier, adReport);
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
index e7d300b1..59b9544d 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
@@ -2,7 +2,7 @@
 
 import android.content.Context;
 
-import com.mopub.mobileads.AdConfiguration;
+import com.mopub.common.AdReport;
 import com.mopub.mobileads.HtmlBannerWebView;
 
 import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
@@ -12,22 +12,22 @@
 
     public static HtmlBannerWebView create(
             Context context,
+            AdReport adReport,
             CustomEventBannerListener customEventBannerListener,
             boolean isScrollable,
             String redirectUrl,
-            String clickthroughUrl,
-            AdConfiguration adConfiguration) {
-        return instance.internalCreate(context, customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl, adConfiguration);
+            String clickthroughUrl) {
+        return instance.internalCreate(context, adReport, customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl);
     }
 
     public HtmlBannerWebView internalCreate(
             Context context,
+            AdReport adReport,
             CustomEventBannerListener customEventBannerListener,
             boolean isScrollable,
             String redirectUrl,
-            String clickthroughUrl,
-            AdConfiguration adConfiguration) {
-        HtmlBannerWebView htmlBannerWebView = new HtmlBannerWebView(context, adConfiguration);
+            String clickthroughUrl) {
+        HtmlBannerWebView htmlBannerWebView = new HtmlBannerWebView(context, adReport);
         htmlBannerWebView.init(customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl);
         return htmlBannerWebView;
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java
index ab8c4490..65d97a39 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java
@@ -2,7 +2,7 @@
 
 import android.content.Context;
 
-import com.mopub.mobileads.AdConfiguration;
+import com.mopub.common.AdReport;
 import com.mopub.mobileads.HtmlInterstitialWebView;
 
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
@@ -12,22 +12,22 @@
 
     public static HtmlInterstitialWebView create(
             Context context,
+            AdReport adReport,
             CustomEventInterstitialListener customEventInterstitialListener,
             boolean isScrollable,
             String redirectUrl,
-            String clickthroughUrl,
-            AdConfiguration adConfiguration) {
-        return instance.internalCreate(context, customEventInterstitialListener, isScrollable, redirectUrl, clickthroughUrl, adConfiguration);
+            String clickthroughUrl) {
+        return instance.internalCreate(context, adReport, customEventInterstitialListener, isScrollable, redirectUrl, clickthroughUrl);
     }
 
     public HtmlInterstitialWebView internalCreate(
             Context context,
+            AdReport adReport,
             CustomEventInterstitialListener customEventInterstitialListener,
             boolean isScrollable,
             String redirectUrl,
-            String clickthroughUrl,
-            AdConfiguration adConfiguration) {
-        HtmlInterstitialWebView htmlInterstitialWebView = new HtmlInterstitialWebView(context, adConfiguration);
+            String clickthroughUrl) {
+        HtmlInterstitialWebView htmlInterstitialWebView = new HtmlInterstitialWebView(context, adReport);
         htmlInterstitialWebView.init(customEventInterstitialListener, isScrollable, redirectUrl, clickthroughUrl);
         return htmlInterstitialWebView;
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MraidControllerFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MraidControllerFactory.java
index 59ee225c..50c5391e 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MraidControllerFactory.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MraidControllerFactory.java
@@ -1,9 +1,10 @@
 package com.mopub.mobileads.factories;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 
+import com.mopub.common.AdReport;
 import com.mopub.common.VisibleForTesting;
-import com.mopub.mobileads.AdConfiguration;
 import com.mopub.mraid.MraidController;
 import com.mopub.mraid.PlacementType;
 
@@ -15,13 +16,15 @@ public static void setInstance(MraidControllerFactory factory) {
         instance = factory;
     }
 
-    public static MraidController create(final Context context,
-            final AdConfiguration adConfiguration, final PlacementType placementType) {
-        return instance.internalCreate(context, adConfiguration, placementType);
+    public static MraidController create(@NonNull final Context context, 
+            @NonNull final AdReport adReport, 
+            @NonNull final PlacementType placementType) {
+        return instance.internalCreate(context, adReport, placementType);
     }
 
-    protected MraidController internalCreate(final Context context,
-            final AdConfiguration adConfiguration, final PlacementType placementType) {
-        return new MraidController(context, adConfiguration, placementType);
+    protected MraidController internalCreate(@NonNull final Context context, 
+            @NonNull final AdReport adReport, 
+            @NonNull final PlacementType placementType) {
+        return new MraidController(context, adReport, placementType);
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/ViewGestureDetectorFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/ViewGestureDetectorFactory.java
deleted file mode 100644
index d8e377c0..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/ViewGestureDetectorFactory.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package com.mopub.mobileads.factories;
-
-import android.content.Context;
-import android.view.View;
-
-import com.mopub.mobileads.AdConfiguration;
-import com.mopub.mobileads.ViewGestureDetector;
-
-public class ViewGestureDetectorFactory {
-    protected static ViewGestureDetectorFactory instance = new ViewGestureDetectorFactory();
-
-    @Deprecated // for testing
-    public static void setInstance(ViewGestureDetectorFactory factory) {
-        instance = factory;
-    }
-
-    public static ViewGestureDetector create(Context context, View view, AdConfiguration adConfiguration) {
-        return instance.internalCreate(context, view, adConfiguration);
-    }
-
-    protected ViewGestureDetector internalCreate(Context context, View view, AdConfiguration adConfiguration) {
-        return new ViewGestureDetector(context, view, adConfiguration);
-    }
-}
-
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Utils.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/Utils.java
deleted file mode 100644
index d96476f4..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Utils.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.mopub.mobileads.util;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-
-import com.mopub.common.logging.MoPubLog;
-
-public class Utils {
-    private Utils() {}
-
-    public static boolean executeIntent(Context context, Intent intent, String errorMessage) {
-        try {
-            if (!(context instanceof Activity)) {
-                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-            }
-            context.startActivity(intent);
-        } catch (Exception e) {
-            MoPubLog.d((errorMessage != null)
-                    ? errorMessage
-                    : "Unable to start intent.");
-            return false;
-        }
-        return true;
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregator.java
index e9d377ed..9248a3e8 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregator.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregator.java
@@ -79,7 +79,7 @@ String followVastRedirect(final AndroidHttpClient httpClient, final String redir
         if (redirectUrl != null && mTimesFollowedVastRedirect < MAX_TIMES_TO_FOLLOW_VAST_REDIRECT) {
             mTimesFollowedVastRedirect++;
 
-            final HttpGet httpget = new HttpGet(redirectUrl);
+            final HttpGet httpget = HttpClient.initializeHttpGet(redirectUrl);
             final HttpResponse response = httpClient.execute(httpget);
             final HttpEntity entity = response.getEntity();
             return (entity != null) ? Strings.fromStream(entity.getContent()) : null;
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidBanner.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidBanner.java
index 1295c93e..d78fedd3 100644
--- a/mopub-sdk/src/main/java/com/mopub/mraid/MraidBanner.java
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidBanner.java
@@ -1,13 +1,13 @@
 package com.mopub.mraid;
 
 import android.content.Context;
-import android.net.Uri;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.view.View;
 
+import com.mopub.common.AdReport;
 import com.mopub.common.VisibleForTesting;
-import com.mopub.mobileads.AdConfiguration;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.AdViewController;
 import com.mopub.mobileads.CustomEventBanner;
 import com.mopub.mobileads.factories.MraidControllerFactory;
@@ -15,7 +15,9 @@
 
 import java.util.Map;
 
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.common.DataKeys.AD_REPORT_KEY;
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
+import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
 
 class MraidBanner extends CustomEventBanner {
@@ -33,21 +35,22 @@ protected void loadBanner(@NonNull Context context,
 
         String htmlData;
         if (extrasAreValid(serverExtras)) {
-            htmlData = Uri.decode(serverExtras.get(HTML_RESPONSE_BODY_KEY));
+            htmlData = serverExtras.get(HTML_RESPONSE_BODY_KEY);
         } else {
             mBannerListener.onBannerFailed(MRAID_LOAD_ERROR);
             return;
         }
 
-        AdConfiguration adConfiguration = AdConfiguration.extractFromMap(localExtras);
-        if (htmlData == null || adConfiguration == null) {
+        try {
+            AdReport adReport = (AdReport) localExtras.get(AD_REPORT_KEY);
+            mMraidController = MraidControllerFactory.create(
+                    context, adReport, PlacementType.INLINE);
+        } catch (ClassCastException e) {
+            MoPubLog.w("MRAID banner creating failed:", e);
             mBannerListener.onBannerFailed(MRAID_LOAD_ERROR);
             return;
         }
 
-        mMraidController = MraidControllerFactory.create(
-                    context, adConfiguration, PlacementType.INLINE);
-
         mMraidController.setDebugListener(mDebugListener);
         mMraidController.setMraidListener(new MraidListener() {
             @Override
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java
index 1e72953b..df44c239 100644
--- a/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java
@@ -17,28 +17,27 @@
 import android.webkit.WebChromeClient;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
-
+import com.mopub.common.AdReport;
 import com.mopub.common.CloseableLayout.ClosePosition;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
-import com.mopub.mobileads.AdConfiguration;
 import com.mopub.mobileads.BaseWebView;
 import com.mopub.mobileads.ViewGestureDetector;
 import com.mopub.mobileads.ViewGestureDetector.UserClickListener;
 import com.mopub.mobileads.resource.MraidJavascript;
 import com.mopub.mraid.MraidBridge.MraidWebView.OnVisibilityChangedListener;
 import com.mopub.mraid.MraidNativeCommandHandler.MraidCommandFailureListener;
-
 import org.apache.http.NameValuePair;
 import org.apache.http.client.utils.URLEncodedUtils;
 import org.json.JSONObject;
 
 import java.net.URI;
 import java.net.URISyntaxException;
-import java.util.HashMap;
-import java.util.Map;
+import java.util.*;
 
 public class MraidBridge {
+    private final AdReport mAdReport;
+
     public interface MraidBridgeListener {
         void onPageLoaded();
 
@@ -70,7 +69,6 @@ void onSetOrientationProperties(boolean allowOrientationChange, MraidOrientation
             .replaceAll("(?m)^\\s+", "")
             .replaceAll("(?m)^//.*(?=\\n)", "");
 
-    @NonNull private final AdConfiguration mAdConfiguration;
     @NonNull private final PlacementType mPlacementType;
 
     @NonNull private final MraidNativeCommandHandler mMraidNativeCommandHandler;
@@ -83,16 +81,14 @@ void onSetOrientationProperties(boolean allowOrientationChange, MraidOrientation
 
     private boolean mHasLoaded;
 
-    MraidBridge(@NonNull AdConfiguration adConfiguration,
-            @NonNull PlacementType placementType) {
-        this(adConfiguration, placementType, new MraidNativeCommandHandler());
+    MraidBridge(@Nullable AdReport adReport, @NonNull PlacementType placementType) {
+        this(adReport, placementType, new MraidNativeCommandHandler());
     }
 
     @VisibleForTesting
-    MraidBridge(@NonNull AdConfiguration adConfiguration,
-            @NonNull PlacementType placementType,
+    MraidBridge(@Nullable AdReport adReport, @NonNull PlacementType placementType,
             @NonNull MraidNativeCommandHandler mraidNativeCommandHandler) {
-        mAdConfiguration = adConfiguration;
+        mAdReport = adReport;
         mPlacementType = placementType;
         mMraidNativeCommandHandler = mraidNativeCommandHandler;
     }
@@ -138,7 +134,7 @@ public void onShowCustomView(final View view, final CustomViewCallback callback)
         });
 
         final ViewGestureDetector gestureDetector = new ViewGestureDetector(
-                mMraidWebView.getContext(), mMraidWebView, mAdConfiguration);
+                mMraidWebView.getContext(), mMraidWebView, mAdReport);
         gestureDetector.setUserClickListener(new UserClickListener() {
             @Override
             public void onUserClick() {
@@ -315,6 +311,9 @@ boolean handleShouldOverrideUrl(@NonNull final String url) {
             return true;
         }
 
+        // This block handles all other URLs, including sms://, tel://,
+        // clicking a hyperlink, or setting window.location directly in Javascript. It checks for
+        // clicked in order to avoid interfering with automatically browser redirects.
         if (mIsClicked) {
             Intent intent = new Intent();
             intent.setAction(Intent.ACTION_VIEW);
@@ -339,8 +338,10 @@ boolean handleShouldOverrideUrl(@NonNull final String url) {
 
     @VisibleForTesting
     private void handlePageFinished() {
-        // This can happen a second time if the user sets window.location directly. We only want
-        // to fire onPageLoaded once.
+        // This can happen a second time if the ad does something that changes the window location,
+        // such as a redirect, changing window.location in Javascript, or programmatically clicking
+        // a hyperlink. Note that the handleShouldOverrideUrl method skips doing its own
+        // processing if the user hasn't clicked the ad.
         if (mHasLoaded) {
             return;
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
index 9be3ab88..c8889cc2 100644
--- a/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
@@ -13,12 +13,12 @@
 import android.net.Uri;
 import android.os.Build.VERSION;
 import android.os.Build.VERSION_CODES;
+import android.os.Bundle;
 import android.os.Handler;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.util.DisplayMetrics;
 import android.view.MotionEvent;
-import android.view.Surface;
 import android.view.View;
 import android.view.View.OnTouchListener;
 import android.view.ViewGroup;
@@ -26,10 +26,9 @@
 import android.view.WindowManager;
 import android.webkit.ConsoleMessage;
 import android.webkit.JsResult;
-import android.webkit.WebView;
 import android.widget.FrameLayout;
 import android.widget.FrameLayout.LayoutParams;
-
+import com.mopub.common.AdReport;
 import com.mopub.common.CloseableLayout;
 import com.mopub.common.CloseableLayout.ClosePosition;
 import com.mopub.common.CloseableLayout.OnCloseListener;
@@ -39,12 +38,11 @@
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.DeviceUtils;
 import com.mopub.common.util.Dips;
-import com.mopub.common.util.IntentUtils;
+import com.mopub.common.util.Intents;
 import com.mopub.common.util.Views;
-import com.mopub.mobileads.AdConfiguration;
-import com.mopub.mobileads.BaseWebView;
+import com.mopub.exceptions.IntentNotResolvableException;
+import com.mopub.exceptions.UrlParseException;
 import com.mopub.mobileads.MraidVideoPlayerActivity;
-import com.mopub.mobileads.util.Utils;
 import com.mopub.mobileads.util.WebViews;
 import com.mopub.mraid.MraidBridge.MraidBridgeListener;
 import com.mopub.mraid.MraidBridge.MraidWebView;
@@ -56,6 +54,8 @@
 import static com.mopub.common.util.Utils.bitMaskContainsFlag;
 
 public class MraidController {
+    private final AdReport mAdReport;
+
     public interface MraidListener {
         public void onLoaded(View view);
         public void onFailedToLoad();
@@ -70,7 +70,6 @@
 
     @Nullable private Activity mActivity;
     @NonNull private final Context mContext;
-    @NonNull private final AdConfiguration mAdConfiguration;
     @NonNull private final PlacementType mPlacementType;
 
     // An ad container, which contains the ad web view in default state, but is empty when expanded.
@@ -118,26 +117,25 @@
 
     private boolean mIsPaused;
 
-    public MraidController(@NonNull Context context, @NonNull AdConfiguration adConfiguration,
+    public MraidController(@NonNull Context context, @Nullable AdReport adReport,
             @NonNull PlacementType placementType) {
-        this(context, adConfiguration, placementType,
-                new MraidBridge(adConfiguration, placementType),
-                new MraidBridge(adConfiguration, PlacementType.INTERSTITIAL),
+        this(context, adReport, placementType,
+                new MraidBridge(adReport, placementType),
+                new MraidBridge(adReport, PlacementType.INTERSTITIAL),
                 new ScreenMetricsWaiter());
     }
 
     @VisibleForTesting
-    MraidController(@NonNull Context context, @NonNull AdConfiguration adConfiguration,
+    MraidController(@NonNull Context context, @Nullable AdReport adReport,
             @NonNull PlacementType placementType,
             @NonNull MraidBridge bridge, @NonNull MraidBridge twoPartBridge,
             @NonNull ScreenMetricsWaiter screenMetricsWaiter) {
         mContext = context;
-
+        mAdReport = adReport;
         if (mContext instanceof Activity) {
             mActivity = (Activity) mContext;
         }
 
-        mAdConfiguration = adConfiguration;
         mPlacementType = placementType;
         mMraidBridge = bridge;
         mTwoPartBridge = twoPartBridge;
@@ -444,8 +442,8 @@ public void run() {
                 mMraidBridge.notifySupports(
                         mMraidNativeCommandHandler.isSmsAvailable(mContext),
                         mMraidNativeCommandHandler.isTelAvailable(mContext),
-                        mMraidNativeCommandHandler.isCalendarAvailable(mContext),
-                        mMraidNativeCommandHandler.isStorePictureSupported(mContext),
+                        MraidNativeCommandHandler.isCalendarAvailable(mContext),
+                        MraidNativeCommandHandler.isStorePictureSupported(mContext),
                         isInlineVideoAvailable());
                 mMraidBridge.notifyPlacementType(mPlacementType);
                 mMraidBridge.notifyViewability(mMraidBridge.isVisible());
@@ -828,7 +826,7 @@ private ViewGroup getRootView() {
 
     @VisibleForTesting
     void handleShowVideo(@NonNull String videoUrl) {
-        MraidVideoPlayerActivity.startMraid(mContext, videoUrl, mAdConfiguration);
+        MraidVideoPlayerActivity.startMraid(mContext, videoUrl);
     }
 
     @VisibleForTesting
@@ -999,6 +997,10 @@ void handleSetOrientationProperties(final boolean allowOrientationChange,
         }
     }
 
+    /**
+     * Attempts to handle mopubnativebrowser links in the device browser, deep-links in the
+     * corresponding application, and all other links in the MoPub in-app browser.
+     */
     @VisibleForTesting
     void handleOpen(@NonNull String url) {
         MoPubLog.d("Opening url: " + url);
@@ -1007,30 +1009,44 @@ void handleOpen(@NonNull String url) {
             mMraidListener.onOpen();
         }
 
-        // this is added because http/s can also be intercepted
-        if (!isWebSiteUrl(url) && IntentUtils.canHandleApplicationUrl(mContext, url)) {
-            launchApplicationUrl(url);
+        // MoPubNativeBrowser URLs
+        if (Intents.isNativeBrowserScheme(url)) {
+            try {
+                final Intent intent = Intents.intentForNativeBrowserScheme(url);
+                Intents.startActivity(mContext, intent);
+            } catch (UrlParseException e) {
+                MoPubLog.d("Unable to load mopub native browser url: " + url + ". "
+                        + e.getMessage());
+            } catch (IntentNotResolvableException e) {
+                MoPubLog.d("Unable to load mopub native browser url: " + url + ". "
+                        + e.getMessage());
+            }
+
             return;
         }
 
-        Intent i = new Intent(mContext, MoPubBrowser.class);
-        i.putExtra(MoPubBrowser.DESTINATION_URL_KEY, url);
-        i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        mContext.startActivity(i);
-    }
-
+        // Non-http(s) URLs
+        if (!Intents.isHttpUrl(url) && Intents.canHandleApplicationUrl(mContext, url)) {
+            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
 
-    private boolean launchApplicationUrl(String url) {
-        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+            try {
+                Intents.startActivity(mContext, intent);
+            } catch (IntentNotResolvableException e) {
+                MoPubLog.d("Unable to resolve application url: " + url);
+            }
 
-        String errorMessage = "Unable to open intent.";
+            return;
+        }
 
-        return Utils.executeIntent(mContext, intent, errorMessage);
-    }
+        final Bundle extras = new Bundle();
+        extras.putString(MoPubBrowser.DESTINATION_URL_KEY, url);
 
-    private boolean isWebSiteUrl(@NonNull String url) {
-        return url.startsWith("http://") || url.startsWith("https://");
+        final Intent intent = Intents.getStartActivityIntent(mContext, MoPubBrowser.class, extras);
+        try {
+            Intents.startActivity(mContext, intent);
+        } catch (IntentNotResolvableException e) {
+            MoPubLog.d("Unable to launch intent for URL: " + url +  ".");
+        }
     }
 
     @VisibleForTesting
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidInterstitial.java
index d19b9556..f7e1ae39 100644
--- a/mopub-sdk/src/main/java/com/mopub/mraid/MraidInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidInterstitial.java
@@ -1,7 +1,6 @@
 package com.mopub.mraid;
 
 
-import android.net.Uri;
 import android.support.annotation.NonNull;
 
 import com.mopub.mobileads.MraidActivity;
@@ -9,14 +8,14 @@
 
 import java.util.Map;
 
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 
 class MraidInterstitial extends ResponseBodyInterstitial {
     private String mHtmlData;
 
     @Override
-    protected void extractExtras(@NonNull Map<String, String> serverExtras) {
-        mHtmlData = Uri.decode(serverExtras.get(HTML_RESPONSE_BODY_KEY));
+    protected void extractExtras(Map<String, String> serverExtras) {
+        mHtmlData = serverExtras.get(HTML_RESPONSE_BODY_KEY);
     }
 
     @Override
@@ -27,6 +26,6 @@ protected void preRenderHtml(@NonNull CustomEventInterstitialListener
 
     @Override
     public void showInterstitial() {
-        MraidActivity.start(mContext, mHtmlData, mAdConfiguration);
+        MraidActivity.start(mContext, mAdReport, mHtmlData, mBroadcastIdentifier);
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java
index 7f7b347f..bc0a2d82 100644
--- a/mopub-sdk/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java
@@ -24,11 +24,12 @@
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.AsyncTasks;
-import com.mopub.common.util.IntentUtils;
+import com.mopub.common.util.Intents;
 import com.mopub.common.util.Streams;
 import com.mopub.common.util.Utils;
 import com.mopub.common.util.VersionCode;
 import com.mopub.mobileads.factories.HttpClientFactory;
+import com.mopub.network.HeaderUtils;
 
 import org.apache.http.Header;
 import org.apache.http.HttpResponse;
@@ -50,7 +51,7 @@
 
 import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
 import static android.os.Environment.MEDIA_MOUNTED;
-import static com.mopub.common.network.HeaderUtils.extractHeader;
+import static com.mopub.common.HttpClient.*;
 import static com.mopub.common.util.ResponseHeader.LOCATION;
 
 public class MraidNativeCommandHandler {
@@ -129,26 +130,26 @@ boolean isTelAvailable(Context context) {
         Intent telIntent = new Intent(Intent.ACTION_DIAL);
         telIntent.setData(Uri.parse("tel:"));
 
-        return IntentUtils.deviceCanHandleIntent(context, telIntent);
+        return Intents.deviceCanHandleIntent(context, telIntent);
     }
 
     boolean isSmsAvailable(Context context) {
         Intent smsIntent = new Intent(Intent.ACTION_VIEW);
         smsIntent.setData(Uri.parse("sms:"));
 
-        return IntentUtils.deviceCanHandleIntent(context, smsIntent);
+        return Intents.deviceCanHandleIntent(context, smsIntent);
     }
 
-    public boolean isStorePictureSupported(Context context) {
+    public static boolean isStorePictureSupported(Context context) {
         return MEDIA_MOUNTED.equals(Environment.getExternalStorageState())
                 && context.checkCallingOrSelfPermission(WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
     }
 
-    boolean isCalendarAvailable(Context context) {
+    static boolean isCalendarAvailable(Context context) {
         Intent calendarIntent = new Intent(Intent.ACTION_INSERT).setType(ANDROID_CALENDAR_CONTENT_TYPE);
 
         return VersionCode.currentApiLevel().isAtLeast(VersionCode.ICE_CREAM_SANDWICH)
-                && IntentUtils.deviceCanHandleIntent(context, calendarIntent);
+                && Intents.deviceCanHandleIntent(context, calendarIntent);
     }
 
     /**
@@ -469,7 +470,7 @@ protected Boolean doInBackground(@NonNull String[] params) {
             URI uri = URI.create(uriString);
 
             final HttpClient httpClient = HttpClientFactory.create();
-            final HttpGet httpGet = new HttpGet(uri);
+            final HttpGet httpGet = initializeHttpGet(uri.toString());
 
             InputStream pictureInputStream = null;
             OutputStream pictureOutputStream = null;
@@ -477,7 +478,7 @@ protected Boolean doInBackground(@NonNull String[] params) {
                 final HttpResponse httpResponse = httpClient.execute(httpGet);
                 pictureInputStream = httpResponse.getEntity().getContent();
 
-                final String redirectLocation = extractHeader(httpResponse, LOCATION);
+                final String redirectLocation = HeaderUtils.extractHeader(httpResponse, LOCATION);
                 if (redirectLocation != null) {
                     uri = URI.create(redirectLocation);
                 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidVideoViewController.java
index 2ae9c15e..ddf7e408 100644
--- a/mopub-sdk/src/main/java/com/mopub/mraid/MraidVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidVideoViewController.java
@@ -28,8 +28,9 @@
     private int mButtonPadding;
     private int mButtonSize;
 
-    public MraidVideoViewController(final Context context, final Bundle bundle, final long broadcastIdentifier, final BaseVideoViewControllerListener baseVideoViewControllerListener) {
-        super(context, broadcastIdentifier, baseVideoViewControllerListener);
+    public MraidVideoViewController(final Context context, final Bundle bundle, final BaseVideoViewControllerListener baseVideoViewControllerListener) {
+        // No broadcast identifiers are used by MraidVideoViews.
+        super(context, null, baseVideoViewControllerListener);
 
         mVideoView = new VideoView(context);
         mVideoView.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java b/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java
index c16be5cc..4f463ba5 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java
@@ -1,19 +1,24 @@
 package com.mopub.nativeads;
 
 import android.content.Context;
-import android.graphics.Bitmap;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.text.TextUtils;
 import android.view.View;
 
 import com.mopub.common.Preconditions.NoThrow;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.network.Networking;
+import com.mopub.volley.VolleyError;
+import com.mopub.volley.toolbox.ImageLoader;
 
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
 
 import static com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
 import static com.mopub.nativeads.CustomEventNative.ImageListener;
@@ -356,16 +361,42 @@ protected final void notifyAdClicked() {
     static void preCacheImages(@NonNull final Context context,
             @NonNull final List<String> imageUrls,
             @NonNull final ImageListener imageListener) {
-        ImageService.get(context, imageUrls, new ImageService.ImageServiceListener() {
+        final ImageLoader imageLoader = Networking.getImageLoader(context);
+        // These Atomics are only accessed on the main thread.
+        // We use Atomics here so we can change their values while keeping a reference for the inner class.
+        final AtomicInteger imageCounter = new AtomicInteger(imageUrls.size());
+        final AtomicBoolean anyFailures = new AtomicBoolean(false);
+        ImageLoader.ImageListener volleyImageListener = new ImageLoader.ImageListener() {
             @Override
-            public void onSuccess(final Map<String, Bitmap> bitmaps) {
-                imageListener.onImagesCached();
+            public void onResponse(final ImageLoader.ImageContainer imageContainer, final boolean isImmediate) {
+                // Image Loader returns a "default" response immediately. We want to ignore this
+                // unless the image is already cached.
+                if (imageContainer.getBitmap() != null) {
+                    final int count = imageCounter.decrementAndGet();
+                    if (count == 0 && !anyFailures.get()) {
+                        imageListener.onImagesCached();
+                    }
+                }
             }
 
             @Override
-            public void onFail() {
+            public void onErrorResponse(final VolleyError volleyError) {
+                MoPubLog.d("Failed to download a native ads image:", volleyError);
+                boolean anyPreviousErrors = anyFailures.getAndSet(true);
+                imageCounter.decrementAndGet();
+                if (!anyPreviousErrors) {
+                    imageListener.onImagesFailedToCache(NativeErrorCode.IMAGE_DOWNLOAD_FAILURE);
+                }
+            }
+        };
+
+        for (String url : imageUrls) {
+            if (TextUtils.isEmpty(url)) {
+                anyFailures.set(true);
                 imageListener.onImagesFailedToCache(NativeErrorCode.IMAGE_DOWNLOAD_FAILURE);
+                return;
             }
-        });
+            imageLoader.get(url, volleyImageListener);
+        }
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ClickDestinationResolutionListener.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ClickDestinationResolutionListener.java
new file mode 100644
index 00000000..cee3d93c
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ClickDestinationResolutionListener.java
@@ -0,0 +1,99 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+import com.mopub.common.MoPubBrowser;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Intents;
+import com.mopub.exceptions.IntentNotResolvableException;
+import com.mopub.exceptions.UrlParseException;
+
+import java.lang.ref.WeakReference;
+import java.util.*;
+
+class ClickDestinationResolutionListener implements UrlResolutionTask.UrlResolutionListener {
+    private final Context mContext;
+    private final Iterator<String> mUrlIterator;
+    private final WeakReference<SpinningProgressView> mSpinningProgressView;
+
+    public ClickDestinationResolutionListener(@NonNull final Context context,
+            @NonNull final Iterator<String> urlIterator,
+            @NonNull final SpinningProgressView spinningProgressView) {
+        mContext = context.getApplicationContext();
+        mUrlIterator = urlIterator;
+        mSpinningProgressView = new WeakReference<SpinningProgressView>(spinningProgressView);
+    }
+
+    /**
+     * Called upon user click, after the corresponding UrlResolutionTask has followed all redirects
+     * successfully. Attempts to open mopubnativebrowser links in the device browser, deep-links in
+     * the corresponding application, and all other links in the MoPub in-app browser. In the first
+     * two cases, malformed URLs will try to fallback to the next entry in mUrlIterator, and failing
+     * that, will no-op.
+     */
+    @Override
+    public void onSuccess(@NonNull final String resolvedUrl) {
+        // Handle MoPubNativeBrowser schemes
+        if (Intents.isNativeBrowserScheme(resolvedUrl)) {
+            try {
+                final Intent intent = Intents.intentForNativeBrowserScheme(resolvedUrl);
+                Intents.startActivity(mContext, intent);
+                removeSpinningProgressView();
+                return;
+            } catch (UrlParseException e) {
+                MoPubLog.d(e.getMessage());
+            } catch (IntentNotResolvableException e) {
+                MoPubLog.d("Could not handle intent for URI: " + resolvedUrl);
+            }
+
+            if (mUrlIterator.hasNext()) {
+                UrlResolutionTask.getResolvedUrl(mUrlIterator.next(), this);
+            } else {
+                removeSpinningProgressView();
+            }
+            return;
+        }
+
+        // Handle Android deeplinks
+        if (Intents.isDeepLink(resolvedUrl)) {
+            final Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(resolvedUrl));
+
+            // Open another Android app from the deep link
+            if (Intents.deviceCanHandleIntent(mContext, intent)) {
+                try {
+                    Intents.startActivity(mContext, intent);
+                    return;
+                } catch (IntentNotResolvableException e) {
+                    MoPubLog.d("Could not handle intent with URI: " + resolvedUrl);
+                } finally {
+                    removeSpinningProgressView();
+                }
+            }
+
+            if (mUrlIterator.hasNext()) {
+                UrlResolutionTask.getResolvedUrl(mUrlIterator.next(), this);
+            } else {
+                removeSpinningProgressView();
+            }
+            return;
+        }
+
+        removeSpinningProgressView();
+        MoPubBrowser.open(mContext, resolvedUrl);
+    }
+
+    @Override
+    public void onFailure() {
+        MoPubLog.d("Failed to resolve URL for click.");
+        removeSpinningProgressView();
+    }
+
+    private void removeSpinningProgressView() {
+        final SpinningProgressView spinningProgressView = mSpinningProgressView.get();
+        if (spinningProgressView != null) {
+            spinningProgressView.removeFromRoot();
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
index 15e38c1a..2f91b815 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
@@ -3,30 +3,23 @@
 import android.content.Context;
 import android.support.annotation.NonNull;
 
-import com.mopub.common.DownloadResponse;
-import com.mopub.common.HttpResponses;
-import com.mopub.common.util.Json;
+import com.mopub.common.DataKeys;
 import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.ResponseHeader;
 import com.mopub.nativeads.factories.CustomEventNativeFactory;
+import com.mopub.network.AdResponse;
 
-import java.util.HashMap;
 import java.util.Map;
 
 final class CustomEventNativeAdapter {
     private CustomEventNativeAdapter() {}
 
-    static final String RESPONSE_BODY_KEY = "response_body_key";
-
     public static void loadNativeAd(@NonNull final Context context,
             @NonNull final Map<String, Object> localExtras,
-            @NonNull final DownloadResponse downloadResponse,
+            @NonNull final AdResponse adResponse,
             @NonNull final CustomEventNative.CustomEventNativeListener customEventNativeListener) {
 
-        final String customEventNativeData = downloadResponse.getFirstHeader(ResponseHeader.CUSTOM_EVENT_DATA);
-        final String customEventNativeClassName = downloadResponse.getFirstHeader(ResponseHeader.CUSTOM_EVENT_NAME);
-
         final CustomEventNative customEventNative;
+        String customEventNativeClassName = adResponse.getCustomEventClassName();
         try {
             customEventNative = CustomEventNativeFactory.create(customEventNativeClassName);
         } catch (Exception e) {
@@ -35,21 +28,15 @@ public static void loadNativeAd(@NonNull final Context context,
             return;
         }
 
-        Map<String, String> serverExtras = new HashMap<String, String>();
-        // Attempt to load the JSON extras into mServerExtras.
-        try {
-            serverExtras = Json.jsonStringToMap(customEventNativeData);
-        } catch (Exception e) {
-            MoPubLog.w("Failed to create Map from JSON: " + customEventNativeData, e);
+        if (adResponse.hasJson()) {
+            localExtras.put(DataKeys.JSON_BODY_KEY, adResponse.getJsonBody());
         }
 
-        serverExtras.put(RESPONSE_BODY_KEY, HttpResponses.asResponseString(downloadResponse));
-
         customEventNative.loadNativeAd(
                 context,
                 customEventNativeListener,
                 localExtras,
-                serverExtras
+                adResponse.getServerExtras()
         );
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java
deleted file mode 100644
index ef20fcaf..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java
+++ /dev/null
@@ -1,70 +0,0 @@
-package com.mopub.nativeads;
-
-import android.graphics.Bitmap;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import com.mopub.common.CacheService;
-
-import java.util.List;
-
-import static com.mopub.common.CacheService.DiskLruCacheGetListener;
-
-class ImageDiskTaskManager extends TaskManager<Bitmap> {
-    @NonNull private final List<String> mUrls;
-    private final int mMaxImageWidth;
-
-    ImageDiskTaskManager(@NonNull final List<String> urls,
-            @NonNull final TaskManagerListener<Bitmap> imageTaskManagerListener,
-            final int maxImageWidth)
-            throws IllegalArgumentException {
-        super(urls, imageTaskManagerListener);
-        mMaxImageWidth = maxImageWidth;
-        mUrls = urls;
-    }
-
-    @Override
-    void execute() {
-        if (mUrls.isEmpty()) {
-            mImageTaskManagerListener.onSuccess(mResults);
-        }
-
-        ImageDiskTaskListener imageDiskTaskListener = new ImageDiskTaskListener(mMaxImageWidth);
-        for (final String url : mUrls) {
-            CacheService.getFromDiskCacheAsync(url, imageDiskTaskListener);
-        }
-    }
-
-    void failAllTasks() {
-        if (mFailed.compareAndSet(false, true)) {
-            mImageTaskManagerListener.onFail();
-        }
-    }
-
-    private class ImageDiskTaskListener implements DiskLruCacheGetListener {
-
-        private final int mTargetWidth;
-
-        ImageDiskTaskListener(final int targetWidth) {
-            mTargetWidth = targetWidth;
-        }
-
-        @Override
-        public void onComplete(@Nullable final String key, @Nullable final byte[] content) {
-            if (key == null) {
-                failAllTasks();
-                return;
-            } else {
-                Bitmap bitmap = null;
-                if (content != null) {
-                     bitmap = ImageService.byteArrayToBitmap(content, mTargetWidth);
-                }
-                mResults.put(key, bitmap);
-            }
-
-            if (mCompletedCount.incrementAndGet() == mSize) {
-                mImageTaskManagerListener.onSuccess(mResults);
-            }
-        }
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDownloadTaskManager.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDownloadTaskManager.java
deleted file mode 100644
index 3ab2381c..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDownloadTaskManager.java
+++ /dev/null
@@ -1,89 +0,0 @@
-package com.mopub.nativeads;
-
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import com.mopub.common.DownloadResponse;
-import com.mopub.common.DownloadTask;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.AsyncTasks;
-
-import org.apache.http.HttpStatus;
-import org.apache.http.client.methods.HttpGet;
-import org.apache.http.client.methods.HttpUriRequest;
-
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import static com.mopub.common.DownloadTask.DownloadTaskListener;
-import static java.util.Map.Entry;
-
-class ImageDownloadTaskManager extends TaskManager<DownloadResponse> {
-
-    @NonNull private final Map<HttpUriRequest, DownloadTask> mDownloadTasks;
-    private final int mRequestedWidth;
-
-    ImageDownloadTaskManager(@NonNull final List<String> urls,
-                             @NonNull final TaskManagerListener<DownloadResponse> imageTaskManagerListener,
-                             final int requestedWidth)
-            throws IllegalArgumentException {
-        super(urls, imageTaskManagerListener);
-
-        mRequestedWidth = requestedWidth;
-
-        final DownloadTaskListener downloadTaskListener = new ImageDownloadTaskListener();
-        mDownloadTasks = new HashMap<HttpUriRequest, DownloadTask>(urls.size());
-        for (final String url : urls) {
-            final HttpGet httpGet = new HttpGet(url);
-            mDownloadTasks.put(httpGet, new DownloadTask(downloadTaskListener));
-        }
-    }
-
-    @Override
-    void execute() {
-        if (mDownloadTasks.isEmpty()) {
-            mImageTaskManagerListener.onSuccess(mResults);
-        }
-
-        for (final Entry<HttpUriRequest, DownloadTask> entry : mDownloadTasks.entrySet()) {
-            final HttpUriRequest httpUriRequest = entry.getKey();
-            final DownloadTask downloadTask = entry.getValue();
-
-            try {
-                AsyncTasks.safeExecuteOnExecutor(downloadTask, httpUriRequest);
-            } catch (Exception e) {
-                MoPubLog.d("Failed to download image", e);
-
-                mImageTaskManagerListener.onFail();
-            }
-        }
-    }
-
-    void failAllTasks() {
-        if (mFailed.compareAndSet(false, true)) {
-            for (final DownloadTask downloadTask : mDownloadTasks.values()) {
-                downloadTask.cancel(true);
-            }
-            mImageTaskManagerListener.onFail();
-        }
-    }
-
-    private class ImageDownloadTaskListener implements DownloadTaskListener {
-        @Override
-        public void onComplete(@Nullable final String url, @Nullable final DownloadResponse
-                downloadResponse) {
-            if (downloadResponse == null || downloadResponse.getStatusCode() != HttpStatus.SC_OK) {
-                MoPubLog.d("Failed to download image: " + url);
-                failAllTasks();
-                return;
-            }
-
-            MoPubLog.d("Successfully downloaded image bye array: " + url);
-            mResults.put(url, downloadResponse);
-            if (mCompletedCount.incrementAndGet() == mSize) {
-                mImageTaskManagerListener.onSuccess(mResults);
-            }
-        }
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageService.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageService.java
deleted file mode 100644
index eac042bc..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageService.java
+++ /dev/null
@@ -1,293 +0,0 @@
-package com.mopub.nativeads;
-
-import android.annotation.TargetApi;
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.Point;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.view.Display;
-import android.view.WindowManager;
-
-import com.mopub.common.CacheService;
-import com.mopub.common.DownloadResponse;
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.VersionCode;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import static android.graphics.BitmapFactory.Options;
-import static android.graphics.BitmapFactory.decodeByteArray;
-import static com.mopub.common.util.VersionCode.HONEYCOMB_MR2;
-import static com.mopub.nativeads.TaskManager.TaskManagerListener;
-import static java.util.Map.Entry;
-
-class ImageService {
-    private static final int TWO_MEGABYTES = 2097152;
-    private static int sTargetWidth = -1;
-
-    interface ImageServiceListener {
-        void onSuccess(Map<String, Bitmap> bitmaps);
-        void onFail();
-    }
-
-    @TargetApi(13)
-    @VisibleForTesting
-    static void initialize(@NonNull Context context) {
-        if (sTargetWidth == -1) {
-            // Get Display Options
-            WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
-            Display display = wm.getDefaultDisplay();
-            Point size = new Point();
-            if (VersionCode.currentApiLevel().isBelow(HONEYCOMB_MR2)) {
-                size.set(display.getWidth(), display.getHeight());
-            } else {
-                display.getSize(size);
-            }
-
-            // Make our images no wider than the skinny side of the display.
-            sTargetWidth = Math.min(size.x, size.y);
-        }
-    }
-
-    static void get(@NonNull final Context context, @NonNull final List<String> urls,
-            @NonNull final ImageServiceListener imageServiceListener) {
-        initialize(context);
-        CacheService.initialize(context);
-        get(urls, imageServiceListener);
-    }
-
-    static void get(@NonNull final List<String> urls,
-            @NonNull final ImageServiceListener imageServiceListener) {
-        final Map<String, Bitmap> cacheBitmaps = new HashMap<String, Bitmap>(urls.size());
-        final List<String> urlCacheMisses = getBitmapsFromMemoryCache(urls, cacheBitmaps);
-
-        if (urlCacheMisses.isEmpty()) {
-            imageServiceListener.onSuccess(cacheBitmaps);
-            return;
-        }
-
-        final ImageDiskTaskManager imageDiskTaskManager;
-        try {
-            imageDiskTaskManager = new ImageDiskTaskManager(
-                    urlCacheMisses,
-                    new ImageDiskTaskManagerListener(imageServiceListener, cacheBitmaps),
-                    sTargetWidth
-            );
-        } catch (IllegalArgumentException e) {
-            MoPubLog.d("Unable to initialize ImageDiskTaskManager", e);
-            imageServiceListener.onFail();
-            return;
-        }
-
-        imageDiskTaskManager.execute();
-    }
-
-
-
-    static void putBitmapInCache(final String key, final Bitmap bitmap) {
-        CacheService.putToBitmapCache(key, bitmap);
-    }
-
-    static void putDataInCache(final String key, final Bitmap bitmap, final byte[] byteData) {
-        CacheService.putToBitmapCache(key, bitmap);
-        CacheService.putToDiskCacheAsync(key, byteData);
-    }
-
-    @NonNull
-    static List<String> getBitmapsFromMemoryCache(@NonNull final List<String> urls,
-            @NonNull final Map<String, Bitmap> hits) {
-        final List<String> cacheMisses = new ArrayList<String>();
-        for (final String url : urls) {
-            final Bitmap bitmap = getBitmapFromMemoryCache(url);
-
-            if (bitmap != null) {
-                hits.put(url, bitmap);
-            } else {
-                cacheMisses.add(url);
-            }
-        }
-
-        return cacheMisses;
-    }
-
-    @Nullable
-    static Bitmap getBitmapFromMemoryCache(final String key) {
-        return CacheService.getFromBitmapCache(key);
-    }
-
-    private static class ImageDiskTaskManagerListener implements TaskManagerListener<Bitmap> {
-        final private ImageServiceListener mImageServiceListener;
-        final private Map<String, Bitmap> mBitmaps;
-
-        ImageDiskTaskManagerListener(final ImageServiceListener imageServiceListener,
-                final Map<String, Bitmap> bitmaps) {
-            mImageServiceListener = imageServiceListener;
-            mBitmaps = bitmaps;
-        }
-
-        @Override
-        public void onSuccess(@NonNull final Map<String, Bitmap> diskBitmaps) {
-            final List<String> urlDiskMisses = new ArrayList<String>();
-            for (final Entry <String, Bitmap> entry : diskBitmaps.entrySet()) {
-                if (entry.getValue() == null) {
-                    urlDiskMisses.add(entry.getKey());
-                } else {
-                    putBitmapInCache(entry.getKey(), entry.getValue());
-                    mBitmaps.put(entry.getKey(), entry.getValue());
-                }
-            }
-
-            if (urlDiskMisses.isEmpty()) {
-                mImageServiceListener.onSuccess(mBitmaps);
-            } else {
-
-                final ImageDownloadTaskManager imageDownloadTaskManager;
-                try {
-                    imageDownloadTaskManager = new ImageDownloadTaskManager(
-                            urlDiskMisses,
-                            new ImageDownloadResponseListener(mImageServiceListener, mBitmaps),
-                            sTargetWidth
-                    );
-                } catch (IllegalArgumentException e) {
-                    MoPubLog.d("Unable to initialize ImageDownloadTaskManager", e);
-                    mImageServiceListener.onFail();
-                    return;
-                }
-
-                imageDownloadTaskManager.execute();
-            }
-        }
-
-        @Override
-        public void onFail() {
-            mImageServiceListener.onFail();
-        }
-    }
-
-    private static class ImageDownloadResponseListener implements TaskManagerListener<DownloadResponse> {
-        private final ImageServiceListener mImageServiceListener;
-        private final Map<String, Bitmap> mBitmaps;
-
-        ImageDownloadResponseListener(final ImageServiceListener imageServiceListener,
-                final Map<String, Bitmap> bitmaps) {
-            mImageServiceListener = imageServiceListener;
-            mBitmaps = bitmaps;
-        }
-
-        @Override
-        public void onSuccess(@NonNull final Map<String, DownloadResponse> responses) {
-            for (final Entry<String, DownloadResponse> entry : responses.entrySet()) {
-                final Bitmap bitmap = asBitmap(entry.getValue(), sTargetWidth);
-                final String key = entry.getKey();
-                if (bitmap == null) {
-                    MoPubLog.d("Error decoding image for url: " + entry.getKey());
-                    onFail();
-                    return;
-                }
-
-                putDataInCache(key, bitmap, entry.getValue().getByteArray());
-                mBitmaps.put(key, bitmap);
-            }
-            mImageServiceListener.onSuccess(mBitmaps);
-        }
-
-        @Override
-        public void onFail() {
-            mImageServiceListener.onFail();
-        }
-    }
-
-    @Nullable
-    public static Bitmap asBitmap(@NonNull final DownloadResponse downloadResponse, final int requestedWidth) {
-        final byte[] bytes = downloadResponse.getByteArray();
-        return byteArrayToBitmap(bytes, requestedWidth);
-    }
-
-    @Nullable
-    public static Bitmap byteArrayToBitmap(@NonNull final byte[] bytes, final int requestedWidth) {
-        if (requestedWidth <= 0) {
-            return null;
-        }
-
-        Options options = new Options();
-        options.inJustDecodeBounds = true;
-        decodeByteArray(bytes, 0, bytes.length, options);
-        options.inSampleSize = calculateInSampleSize(options.outWidth, requestedWidth);
-
-        // If the bitmap will be very large, downsample more to avoid blowing up the heap.
-        while (getMemBytes(options) > TWO_MEGABYTES) {
-            options.inSampleSize *= 2;
-        }
-
-        options.inJustDecodeBounds = false;
-        Bitmap bitmap = decodeByteArray(bytes, 0, bytes.length, options);
-        if (bitmap == null) {
-            return null;
-        }
-
-        final int subsampleWidth = bitmap.getWidth();
-
-        // If needed, scale the bitmap so it's exactly the requested width.
-        if (subsampleWidth > requestedWidth) {
-            final int requestedHeight = (int)(bitmap.getHeight() * (double) requestedWidth / bitmap.getWidth());
-            Bitmap subsampledBitmap = bitmap;
-            bitmap = Bitmap.createScaledBitmap(subsampledBitmap, requestedWidth, requestedHeight, true);
-            subsampledBitmap.recycle();
-        }
-        
-        return bitmap;
-    }
-
-    /**
-     * Returns the size of the byte array that the bitmap described by the options object will consume.
-     */
-    public static long getMemBytes(@NonNull Options options) {
-        long memBytes = 4 * (long) options.outWidth * (long) options.outHeight / options.inSampleSize / options.inSampleSize;
-        return memBytes;
-    }
-
-    /**
-     * Calculate the largest inSampleSize value that is a power of 2 and keeps the
-     * width greater than or equal to the requested width.
-     */
-    public static int calculateInSampleSize(final int nativeWidth, int requestedWidth) {
-        int inSampleSize = 1;
-
-        if (nativeWidth > requestedWidth) {
-            final int halfWidth = nativeWidth / 2;
-
-            while ((halfWidth / inSampleSize) >= requestedWidth) {
-                inSampleSize *= 2;
-            }
-        }
-
-        return inSampleSize;
-    }
-
-    // Testing, also performs disk IO
-    @Nullable
-    @Deprecated
-    static Bitmap getBitmapFromDiskCache(@NonNull final String key) {
-        Bitmap bitmap = null;
-        byte[] bytes = CacheService.getFromDiskCache(key);
-        if (bytes != null) {
-            bitmap = byteArrayToBitmap(bytes, sTargetWidth);
-        }
-        return bitmap;
-    }
-
-    @VisibleForTesting
-    static void clear() {
-        sTargetWidth = -1;
-    }
-
-    @VisibleForTesting
-    static int getTargetWidth() {
-        return sTargetWidth;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageViewService.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageViewService.java
deleted file mode 100644
index 20d30e85..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageViewService.java
+++ /dev/null
@@ -1,89 +0,0 @@
-package com.mopub.nativeads;
-
-import android.graphics.Bitmap;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.widget.ImageView;
-
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.Utils;
-
-import java.lang.ref.WeakReference;
-import java.util.Arrays;
-import java.util.Map;
-import java.util.WeakHashMap;
-
-import static com.mopub.nativeads.ImageService.ImageServiceListener;
-
-class ImageViewService {
-    // This is used instead of View.setTag, which causes a memory leak in 2.3
-    // and earlier: https://code.google.com/p/android/issues/detail?id=18273
-    private static final WeakHashMap<ImageView, Long> sImageViewRequestIds =
-            new WeakHashMap<ImageView, Long>();
-
-    private ImageViewService(){}
-
-    static void loadImageView(@Nullable final String url, @Nullable final ImageView imageView) {
-        if (imageView == null) {
-            MoPubLog.d("Attempted to load an image into a null ImageView");
-            return;
-        }
-
-        // Blank out previous image content while waiting for request to return
-        imageView.setImageDrawable(null);
-
-        if (url != null) {
-            // Unique id to identify this async image request
-            long uniqueId = Utils.generateUniqueId();
-            sImageViewRequestIds.put(imageView, uniqueId);
-
-            // Async call to get image from memory cache, disk and then network
-            ImageService.get(
-                    Arrays.asList(url),
-                    new MyImageViewServiceListener(url, imageView, uniqueId)
-            );
-        }
-    }
-
-    private static class MyImageViewServiceListener implements ImageServiceListener {
-        @NonNull private final WeakReference<ImageView> mImageView;
-        private final String mUrl;
-        private final long mUniqueId;
-
-        MyImageViewServiceListener(final String url, final ImageView imageView, final long uniqueId) {
-            mUrl = url;
-            mImageView = new WeakReference<ImageView>(imageView);
-            mUniqueId = uniqueId;
-        }
-
-        @Override
-        public void onSuccess(@Nullable final Map<String, Bitmap> bitmaps) {
-            final ImageView imageView = mImageView.get();
-            if (imageView == null || bitmaps == null || !bitmaps.containsKey(mUrl)) {
-                return;
-            }
-            final Long uniqueId = sImageViewRequestIds.get(imageView);
-            if (uniqueId != null && mUniqueId == uniqueId) {
-                imageView.setImageBitmap(bitmaps.get(mUrl));
-            }
-        }
-
-        @Override
-        public void onFail() {
-            MoPubLog.d("Failed to load image for ImageView");
-        }
-    }
-
-    @VisibleForTesting
-    @Deprecated
-    static Long getImageViewUniqueId(final ImageView imageView) {
-        return sImageViewRequestIds.get(imageView);
-    }
-
-    @VisibleForTesting
-    @Deprecated
-    static void setImageViewUniqueId(final ImageView imageView, final long uniqueId) {
-        sImageViewRequestIds.put(imageView, uniqueId);
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
index db2b6591..2585c9d3 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
@@ -3,28 +3,17 @@
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-
-import com.mopub.common.ClientMetadata;
 import com.mopub.common.event.ErrorEvent;
-import com.mopub.common.event.Event;
 import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.logging.MoPubLog;
-
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
-import org.json.JSONTokener;
 
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Set;
+import java.util.*;
 
+import static com.mopub.common.DataKeys.JSON_BODY_KEY;
 import static com.mopub.common.util.Numbers.parseDouble;
-import static com.mopub.nativeads.CustomEventNativeAdapter.RESPONSE_BODY_KEY;
 import static com.mopub.nativeads.NativeResponse.Parameter;
 
 public class MoPubCustomEventNative extends CustomEventNative {
@@ -35,9 +24,16 @@ protected void loadNativeAd(@NonNull final Context context,
             @NonNull final Map<String, Object> localExtras,
             @NonNull final Map<String, String> serverExtras) {
 
+        Object json = localExtras.get(JSON_BODY_KEY);
+        // null or non-JSONObjects should not be passed in localExtras as JSON_BODY_KEY
+        if (!(json instanceof JSONObject)) {
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_JSON);
+            return;
+        }
+
         final MoPubForwardingNativeAd moPubForwardingNativeAd =
                 new MoPubForwardingNativeAd(context.getApplicationContext(),
-                        serverExtras.get(RESPONSE_BODY_KEY),
+                        (JSONObject) json,
                         customEventNativeListener);
 
         try {
@@ -45,50 +41,40 @@ protected void loadNativeAd(@NonNull final Context context,
         } catch (IllegalArgumentException e) {
             customEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
             MoPubEvents.log(new ErrorEvent.Builder("","").withException(e).build());
-        } catch (JSONException e) {
-            customEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_JSON);
-            MoPubEvents.log(new ErrorEvent.Builder("","").withException(e).build());
         }
     }
 
     static class MoPubForwardingNativeAd extends BaseForwardingNativeAd {
-        private final Context mContext;
-        private final String mJsonString;
-        private final CustomEventNativeListener mCustomEventNativeListener;
-
-        MoPubForwardingNativeAd(final Context context,
-                final String jsonString,
-                final CustomEventNativeListener customEventNativeListener) {
+        @NonNull private final Context mContext;
+        @NonNull private final CustomEventNativeListener mCustomEventNativeListener;
+        @NonNull private final JSONObject mJsonObject;
+
+        MoPubForwardingNativeAd(@NonNull final Context context,
+                @NonNull final JSONObject jsonBody,
+                @NonNull final CustomEventNativeListener customEventNativeListener) {
+            mJsonObject = jsonBody;
             mContext = context;
-            mJsonString = jsonString;
             mCustomEventNativeListener = customEventNativeListener;
         }
 
-        void loadAd() throws IllegalArgumentException, JSONException {
-            if (mJsonString == null) {
-                throw new IllegalArgumentException("Json String cannot be null");
-            }
-
-            final JSONTokener jsonTokener = new JSONTokener(mJsonString);
-            final JSONObject jsonObject = new JSONObject(jsonTokener);
-
-            if (!containsRequiredKeys(jsonObject)) {
+        void loadAd() throws IllegalArgumentException {
+            if (!containsRequiredKeys(mJsonObject)) {
                 throw new IllegalArgumentException("JSONObject did not contain required keys.");
             }
 
-            final Iterator<String> keys = jsonObject.keys();
+            final Iterator<String> keys = mJsonObject.keys();
             while (keys.hasNext()) {
                 final String key = keys.next();
                 final Parameter parameter = Parameter.from(key);
 
                 if (parameter != null) {
                     try {
-                        addInstanceVariable(parameter, jsonObject.opt(key));
+                        addInstanceVariable(parameter, mJsonObject.opt(key));
                     } catch (ClassCastException e) {
                         throw new IllegalArgumentException("JSONObject key (" + key + ") contained unexpected value.");
                     }
                 } else {
-                    addExtra(key, jsonObject.opt(key));
+                    addExtra(key, mJsonObject.opt(key));
                 }
             }
 
@@ -107,7 +93,6 @@ public void onImagesFailedToCache(final NativeErrorCode errorCode) {
 
         private boolean containsRequiredKeys(@NonNull final JSONObject jsonObject) {
             final Set<String> keys = new HashSet<String>();
-
             final Iterator<String> jsonKeys = jsonObject.keys();
             while (jsonKeys.hasNext()) {
                 keys.add(jsonKeys.next());
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
index dd1420ce..dcb49e5a 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
@@ -5,40 +5,36 @@
 import android.support.annotation.Nullable;
 import android.view.View;
 
+import com.mopub.common.AdFormat;
 import com.mopub.common.Constants;
-import com.mopub.common.DownloadResponse;
-import com.mopub.common.DownloadTask;
-import com.mopub.common.GpsHelper;
-import com.mopub.common.HttpClient;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.event.MoPubEvents;
-import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.DeviceUtils;
 import com.mopub.common.util.ManifestUtils;
-import com.mopub.common.util.ResponseHeader;
-
-import org.apache.http.HttpStatus;
-import org.apache.http.client.methods.HttpGet;
-import org.apache.http.client.methods.HttpUriRequest;
+import com.mopub.network.AdRequest;
+import com.mopub.network.AdResponse;
+import com.mopub.network.MoPubNetworkError;
+import com.mopub.network.Networking;
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.RequestQueue;
+import com.mopub.volley.VolleyError;
 
 import java.lang.ref.WeakReference;
-import java.util.Collections;
-import java.util.HashMap;
 import java.util.Map;
+import java.util.TreeMap;
 
-import static com.mopub.common.GpsHelper.GpsHelperListener;
 import static com.mopub.common.GpsHelper.fetchAdvertisingInfoAsync;
 import static com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
 import static com.mopub.nativeads.NativeErrorCode.CONNECTION_ERROR;
 import static com.mopub.nativeads.NativeErrorCode.EMPTY_AD_RESPONSE;
+import static com.mopub.nativeads.NativeErrorCode.INVALID_JSON;
 import static com.mopub.nativeads.NativeErrorCode.INVALID_REQUEST_URL;
 import static com.mopub.nativeads.NativeErrorCode.SERVER_ERROR_RESPONSE_CODE;
-import static com.mopub.nativeads.NativeErrorCode.UNEXPECTED_RESPONSE_CODE;
 import static com.mopub.nativeads.NativeErrorCode.UNSPECIFIED;
 
 public class MoPubNative {
+
     public interface MoPubNativeNetworkListener {
         public void onNativeLoad(final NativeResponse nativeResponse);
         public void onNativeFail(final NativeErrorCode errorCode);
@@ -85,7 +81,11 @@ public void onNativeClick(@Nullable final View view) {
     @NonNull private final String mAdUnitId;
     @NonNull private MoPubNativeNetworkListener mMoPubNativeNetworkListener;
     @NonNull private MoPubNativeEventListener mMoPubNativeEventListener;
-    @NonNull private Map<String, Object> mLocalExtras = Collections.emptyMap();
+
+    // For small sets TreeMap, takes up less memory than HashMap
+    @NonNull private Map<String, Object> mLocalExtras = new TreeMap<String, Object>();
+    @NonNull private final AdRequest.Listener mVolleyListener;
+    @Nullable private AdRequest mNativeRequest;
 
     /**
      * @deprecated As of release 2.4, use {@link MoPubNative(Context, String,
@@ -96,7 +96,7 @@ public void onNativeClick(@Nullable final View view) {
     public MoPubNative(@NonNull final Context context,
             @NonNull final String adUnitId,
             @NonNull final MoPubNativeListener moPubNativeListener) {
-        this(context, adUnitId, (MoPubNativeNetworkListener)moPubNativeListener);
+        this(context, adUnitId, (MoPubNativeNetworkListener) moPubNativeListener);
         setNativeEventListener(moPubNativeListener);
     }
 
@@ -113,6 +113,17 @@ public MoPubNative(@NonNull final Context context,
         mAdUnitId = adUnitId;
         mMoPubNativeNetworkListener = moPubNativeNetworkListener;
         mMoPubNativeEventListener = EMPTY_EVENT_LISTENER;
+        mVolleyListener = new AdRequest.Listener() {
+            @Override
+            public void onSuccess(@NonNull final AdResponse response) {
+                onAdLoad(response);
+            }
+
+            @Override
+            public void onErrorResponse(@NonNull final VolleyError volleyError) {
+                onAdError(volleyError);
+            }
+        };
 
         // warm up cache for google play services info
         fetchAdvertisingInfoAsync(context, null);
@@ -125,15 +136,19 @@ public void setNativeEventListener(@Nullable final MoPubNativeEventListener nati
 
     public void destroy() {
         mContext.clear();
+        if (mNativeRequest != null) {
+            mNativeRequest.cancel();
+            mNativeRequest = null;
+        }
         mMoPubNativeNetworkListener = EMPTY_NETWORK_LISTENER;
         mMoPubNativeEventListener = EMPTY_EVENT_LISTENER;
     }
 
     public void setLocalExtras(@Nullable final Map<String, Object> localExtras) {
         if (localExtras == null) {
-            mLocalExtras = Collections.emptyMap();
+            mLocalExtras = new TreeMap<String, Object>();
         } else {
-            mLocalExtras = new HashMap<String, Object>(localExtras);
+            mLocalExtras = new TreeMap<String, Object>(localExtras);
         }
     }
 
@@ -147,10 +162,6 @@ public void makeRequest(@Nullable final RequestParameters requestParameters) {
 
     public void makeRequest(@Nullable final RequestParameters requestParameters,
             @Nullable Integer sequenceNumber) {
-        makeRequest(new NativeGpsHelperListener(requestParameters, sequenceNumber));
-    }
-
-    void makeRequest(@NonNull final NativeGpsHelperListener nativeGpsHelperListener) {
         final Context context = getContextOrDestroy();
         if (context == null) {
             return;
@@ -161,13 +172,7 @@ void makeRequest(@NonNull final NativeGpsHelperListener nativeGpsHelperListener)
             return;
         }
 
-        // If we have access to Google Play Services (GPS) but the advertising info
-        // is not cached then guarantee we get it before building the ad request url
-        // in the callback, this is a requirement from Google
-        GpsHelper.fetchAdvertisingInfoAsync(
-                context,
-                nativeGpsHelperListener
-        );
+        loadNativeAd(requestParameters, sequenceNumber);
     }
 
     private void loadNativeAd(
@@ -195,10 +200,6 @@ private void loadNativeAd(
         requestNativeAd(endpointUrl);
     }
 
-    void loadNativeAd(final RequestParameters requestParameters) {
-        loadNativeAd(requestParameters, null);
-    }
-
     void requestNativeAd(@Nullable final String endpointUrl) {
         final Context context = getContextOrDestroy();
         if (context == null) {
@@ -210,30 +211,78 @@ void requestNativeAd(@Nullable final String endpointUrl) {
             return;
         }
 
-        final HttpGet httpGet;
-        try {
-            httpGet = HttpClient.initializeHttpGet(endpointUrl, context);
-        } catch (IllegalArgumentException e) {
-            mMoPubNativeNetworkListener.onNativeFail(INVALID_REQUEST_URL);
-            return;
-        }
-
-        downloadJson(httpGet);
+        mNativeRequest = new AdRequest(endpointUrl, AdFormat.NATIVE, mVolleyListener);
+        RequestQueue requestQueue = Networking.getRequestQueue(context);
+        requestQueue.add(mNativeRequest);
     }
 
-    private void downloadJson(final HttpUriRequest httpUriRequest) {
-        final DownloadTask jsonDownloadTask = new DownloadTask(
-                new AdRequestListener(),
-                MoPubEvents.Type.AD_REQUEST
+    private void onAdLoad(@NonNull final AdResponse response) {
+        final Context context = getContextOrDestroy();
+        if (context == null) {
+            return;
+        }
+        final CustomEventNativeListener customEventNativeListener =
+                new CustomEventNativeListener() {
+                    @Override
+                    public void onNativeAdLoaded(@NonNull final NativeAdInterface nativeAd) {
+                        final Context context = getContextOrDestroy();
+                        if (context == null) {
+                            return;
+                        }
+                        mMoPubNativeNetworkListener.onNativeLoad(new NativeResponse(context,
+                                response.getImpressionTrackingUrl(),
+                                response.getClickTrackingUrl(),
+                                mAdUnitId,
+                                nativeAd,
+                                mMoPubNativeEventListener));
+                    }
+
+                    @Override
+                    public void onNativeAdFailed(final NativeErrorCode errorCode) {
+                        requestNativeAd(response.getFailoverUrl());
+                    }
+                };
+
+
+
+        CustomEventNativeAdapter.loadNativeAd(
+                context,
+                mLocalExtras,
+                response,
+                customEventNativeListener
         );
+    }
 
-        try {
-            AsyncTasks.safeExecuteOnExecutor(jsonDownloadTask, httpUriRequest);
-        } catch (Exception e) {
-            MoPubLog.d("Failed to download json", e);
-            mMoPubNativeNetworkListener.onNativeFail(UNSPECIFIED);
+    @VisibleForTesting
+    void onAdError(@NonNull final VolleyError volleyError) {
+        MoPubLog.d("Native ad request failed.", volleyError);
+        if (volleyError instanceof MoPubNetworkError) {
+            MoPubNetworkError error = (MoPubNetworkError) volleyError;
+            switch (error.getReason()) {
+                case BAD_BODY:
+                    mMoPubNativeNetworkListener.onNativeFail(INVALID_JSON);
+                    return;
+                case BAD_HEADER_DATA:
+                    mMoPubNativeNetworkListener.onNativeFail(INVALID_JSON);
+                    return;
+                case WARMING_UP:
+                case NO_FILL:
+                    mMoPubNativeNetworkListener.onNativeFail(EMPTY_AD_RESPONSE);
+                    return;
+                case UNSPECIFIED:
+                default:
+                    mMoPubNativeNetworkListener.onNativeFail(UNSPECIFIED);
+                    return;
+            }
+        } else {
+            // Process our other status code errors.
+            NetworkResponse response = volleyError.networkResponse;
+            if (response != null && response.statusCode >= 500 && response.statusCode < 600) {
+                mMoPubNativeNetworkListener.onNativeFail(SERVER_ERROR_RESPONSE_CODE);
+            } else {
+                mMoPubNativeNetworkListener.onNativeFail(UNSPECIFIED);
+            }
         }
-
     }
 
     Context getContextOrDestroy() {
@@ -246,77 +295,6 @@ Context getContextOrDestroy() {
         return context;
     }
 
-    // Do not store this class as a member of MoPubNative; will result in circular reference
-    class NativeGpsHelperListener implements GpsHelperListener {
-        private final RequestParameters mRequestParameters;
-        private final Integer mSequenceNumber;
-
-        NativeGpsHelperListener(RequestParameters requestParameters, Integer sequenceNumber) {
-            mRequestParameters = requestParameters;
-            mSequenceNumber = sequenceNumber;
-        }
-
-        NativeGpsHelperListener(RequestParameters requestParameters) {
-            this(requestParameters, null);
-        }
-
-        @Override
-        public void onFetchAdInfoCompleted() {
-
-            loadNativeAd(mRequestParameters, mSequenceNumber);
-        }
-    }
-
-    private class AdRequestListener implements DownloadTask.DownloadTaskListener {
-        @Override
-        public void onComplete(@Nullable final String url,
-                @Nullable final DownloadResponse downloadResponse) {
-            if (downloadResponse == null) {
-                mMoPubNativeNetworkListener.onNativeFail(UNSPECIFIED);
-            } else if (downloadResponse.getStatusCode() >= 500 &&
-                    downloadResponse.getStatusCode() < 600) {
-                mMoPubNativeNetworkListener.onNativeFail(SERVER_ERROR_RESPONSE_CODE);
-            } else if (downloadResponse.getStatusCode() != HttpStatus.SC_OK) {
-                mMoPubNativeNetworkListener.onNativeFail(UNEXPECTED_RESPONSE_CODE);
-            } else if (downloadResponse.getContentLength() == 0) {
-                mMoPubNativeNetworkListener.onNativeFail(EMPTY_AD_RESPONSE);
-            } else {
-                final CustomEventNativeListener customEventNativeListener =
-                        new CustomEventNativeListener() {
-                            @Override
-                            public void onNativeAdLoaded(@NonNull final NativeAdInterface nativeAd) {
-                                final Context context = getContextOrDestroy();
-                                if (context == null) {
-                                    return;
-                                }
-                                mMoPubNativeNetworkListener.onNativeLoad(new NativeResponse(context,
-                                        downloadResponse,
-                                        mAdUnitId,
-                                        nativeAd,
-                                        mMoPubNativeEventListener));
-                            }
-
-                            @Override
-                            public void onNativeAdFailed(final NativeErrorCode errorCode) {
-                                requestNativeAd(downloadResponse.getFirstHeader(ResponseHeader.FAIL_URL));
-                            }
-                        };
-
-                final Context context = getContextOrDestroy();
-                if (context == null) {
-                    return;
-                }
-
-                CustomEventNativeAdapter.loadNativeAd(
-                        context,
-                        mLocalExtras,
-                        downloadResponse,
-                        customEventNativeListener
-                );
-            }
-        }
-    }
-
     @NonNull
     @VisibleForTesting
     @Deprecated
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
index cdb8fae0..97d4a693 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
@@ -1,25 +1,21 @@
 package com.mopub.nativeads;
 
 import android.content.Context;
-import android.content.Intent;
-import android.net.Uri;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ImageView;
 
-import com.mopub.common.DownloadResponse;
-import com.mopub.common.HttpClient;
-import com.mopub.common.MoPubBrowser;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.IntentUtils;
-import com.mopub.common.util.ResponseHeader;
 import com.mopub.nativeads.MoPubNative.MoPubNativeEventListener;
+import com.mopub.network.Networking;
+import com.mopub.network.TrackingRequest;
+import com.mopub.volley.VolleyError;
+import com.mopub.volley.toolbox.ImageLoader;
 
-import java.lang.ref.SoftReference;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashSet;
@@ -39,8 +35,6 @@
 import static com.mopub.nativeads.NativeResponse.Parameter.STAR_RATING;
 import static com.mopub.nativeads.NativeResponse.Parameter.TEXT;
 import static com.mopub.nativeads.NativeResponse.Parameter.TITLE;
-import static com.mopub.nativeads.UrlResolutionTask.UrlResolutionListener;
-import static com.mopub.nativeads.UrlResolutionTask.getResolvedUrl;
 
 public class NativeResponse {
     enum Parameter {
@@ -89,6 +83,7 @@ static Parameter from(@NonNull final String name) {
     }
 
     @NonNull private final Context mContext;
+    @NonNull private final ImageLoader mImageLoader;
     @NonNull private MoPubNativeEventListener mMoPubNativeEventListener;
     @NonNull private final NativeAdInterface mNativeAd;
 
@@ -102,7 +97,8 @@ static Parameter from(@NonNull final String name) {
     private boolean mIsDestroyed;
 
     public NativeResponse(@NonNull final Context context,
-            @NonNull final DownloadResponse downloadResponse,
+            @NonNull final String impressionUrl,
+            @NonNull final String clickUrl,
             @NonNull final String adUnitId,
             @NonNull final NativeAdInterface nativeAd,
             @NonNull final MoPubNativeEventListener moPubNativeEventListener) {
@@ -123,8 +119,9 @@ public void onAdClicked() {
         });
 
         mMoPubImpressionTrackers = new HashSet<String>();
-        mMoPubImpressionTrackers.add(downloadResponse.getFirstHeader(ResponseHeader.IMPRESSION_URL));
-        mMoPubClickTracker = downloadResponse.getFirstHeader(ResponseHeader.CLICK_TRACKING_URL);
+        mMoPubImpressionTrackers.add(impressionUrl);
+        mMoPubClickTracker = clickUrl;
+        mImageLoader = Networking.getImageLoader(context);
     }
 
     @Override
@@ -247,7 +244,7 @@ public void recordImpression(@Nullable final View view) {
         }
 
         for (final String impressionTracker : getImpressionTrackers()) {
-            HttpClient.makeTrackingHttpRequest(
+            TrackingRequest.makeTrackingHttpRequest(
                     impressionTracker, mContext, MoPubEvents.Type.IMPRESSION_REQUEST);
         }
 
@@ -263,7 +260,7 @@ public void handleClick(@Nullable final View view) {
         }
 
         if (!isClicked()) {
-            HttpClient.makeTrackingHttpRequest(
+            TrackingRequest.makeTrackingHttpRequest(
                     mMoPubClickTracker, mContext, MoPubEvents.Type.CLICK_REQUEST);
         }
 
@@ -328,7 +325,22 @@ private void loadImageView(@Nullable final String url, @Nullable final ImageView
         if (url == null) {
             imageView.setImageDrawable(null);
         } else {
-            ImageViewService.loadImageView(url, imageView);
+            mImageLoader.get(url, new ImageLoader.ImageListener() {
+                @Override
+                public void onResponse(final ImageLoader.ImageContainer imageContainer,
+                        final boolean isImmediate) {
+                    if (!isImmediate) {
+                        MoPubLog.d("Image was not loaded immediately into your ad view. You should call preCacheImages as part of your custom event loading process.");
+                    }
+                    imageView.setImageBitmap(imageContainer.getBitmap());
+                }
+
+                @Override
+                public void onErrorResponse(final VolleyError volleyError) {
+                    MoPubLog.d("Failed to load image.", volleyError);
+                    imageView.setImageDrawable(null);
+                }
+            });
         }
     }
 
@@ -344,13 +356,9 @@ private void openClickDestinationUrl(@Nullable final View view) {
         }
 
         final Iterator<String> urlIterator = Arrays.asList(getClickDestinationUrl()).iterator();
-        final ClickDestinationUrlResolutionListener urlResolutionListener = new ClickDestinationUrlResolutionListener(
-                mContext,
-                urlIterator,
-                spinningProgressView
-        );
-
-        getResolvedUrl(urlIterator.next(), urlResolutionListener);
+        final ClickDestinationResolutionListener urlResolutionListener =
+                new ClickDestinationResolutionListener(mContext, urlIterator, spinningProgressView);
+        UrlResolutionTask.getResolvedUrl(urlIterator.next(), urlResolutionListener);
     }
 
     private void setOnClickListener(@NonNull final View view,
@@ -363,55 +371,6 @@ private void setOnClickListener(@NonNull final View view,
         }
     }
 
-    private static class ClickDestinationUrlResolutionListener implements UrlResolutionListener {
-        private final Context mContext;
-        private final Iterator<String> mUrlIterator;
-        @NonNull private final SoftReference<SpinningProgressView> mSpinningProgressView;
-
-        public ClickDestinationUrlResolutionListener(@NonNull final Context context,
-                final Iterator<String> urlIterator,
-                final SpinningProgressView spinningProgressView) {
-            mContext = context.getApplicationContext();
-            mUrlIterator = urlIterator;
-            mSpinningProgressView = new SoftReference<SpinningProgressView>(spinningProgressView);
-        }
-
-        @Override
-        public void onSuccess(@NonNull final String resolvedUrl) {
-            final Intent intent = new Intent(Intent.ACTION_VIEW);
-            intent.setData(Uri.parse(resolvedUrl));
-            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-
-            if (IntentUtils.isDeepLink(resolvedUrl) && IntentUtils.deviceCanHandleIntent(mContext, intent)) {
-                // Open another Android app from deep link
-                mContext.startActivity(intent);
-            } else if (mUrlIterator.hasNext()) {
-                // If we can't handle a deep link then try the fallback url
-                getResolvedUrl(mUrlIterator.next(), this);
-                return;
-            } else {
-                // If we can't open the deep link and there are no backup links
-                // Or the link is a browser link then handle it here
-                MoPubBrowser.open(mContext, resolvedUrl);
-            }
-
-            removeSpinningProgressView();
-        }
-
-        @Override
-        public void onFailure() {
-            MoPubLog.d("Failed to resolve URL for click.");
-            removeSpinningProgressView();
-        }
-
-        private void removeSpinningProgressView() {
-            final SpinningProgressView spinningProgressView = mSpinningProgressView.get();
-            if (spinningProgressView != null) {
-                spinningProgressView.removeFromRoot();
-            }
-        }
-    }
-
     @VisibleForTesting
     class NativeViewClickListener implements OnClickListener {
         @Override
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
index 1fda77e0..3692eec9 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
@@ -1,16 +1,12 @@
 package com.mopub.nativeads;
 
 import android.content.Context;
-import android.location.Location;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
-
 import com.mopub.common.AdUrlGenerator;
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.Constants;
-import com.mopub.common.LocationService;
-import com.mopub.common.MoPub;
 import com.mopub.common.util.DateAndTime;
 
 class NativeUrlGenerator extends AdUrlGenerator {
@@ -61,10 +57,6 @@ public String generateUrlString(final String serverHostname) {
                 clientMetadata.getDeviceModel(),
                 clientMetadata.getDeviceProduct());
 
-        setUdid(clientMetadata.getAdvertisingId());
-
-        setDoNotTrack(clientMetadata.isDoNotTrackSet());
-
         setTimezone(DateAndTime.getTimeZoneOffsetString());
 
         setOrientation(clientMetadata.getOrientationString());
@@ -88,6 +80,8 @@ public String generateUrlString(final String serverHostname) {
 
         setSequenceNumber();
 
+        appendAdvertisingInfoTemplates();
+
         return getFinalUrlString();
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningRequest.java b/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningRequest.java
new file mode 100644
index 00000000..9446d7a5
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningRequest.java
@@ -0,0 +1,127 @@
+package com.mopub.nativeads;
+
+import android.support.annotation.NonNull;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.network.MoPubNetworkError;
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.Response;
+import com.mopub.volley.VolleyError;
+import com.mopub.volley.toolbox.HttpHeaderParser;
+import com.mopub.volley.toolbox.JsonRequest;
+
+import org.apache.http.HttpStatus;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.UnsupportedEncodingException;
+
+import static com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
+
+public class PositioningRequest extends JsonRequest<MoPubClientPositioning> {
+    private static final String FIXED_KEY = "fixed";
+    private static final String SECTION_KEY = "section";
+    private static final String POSITION_KEY = "position";
+    private static final String REPEATING_KEY = "repeating";
+    private static final String INTERVAL_KEY = "interval";
+
+    // Max value to avoid bad integer math calculations. This is 2 ^ 16.
+    private static final int MAX_VALUE = 1 << 16;
+
+    public PositioningRequest(final String url,
+            final Response.Listener<MoPubClientPositioning> listener,
+            final Response.ErrorListener errorListener) {
+        super(Method.GET, url, null, listener, errorListener);
+    }
+
+    // This is done just for unit testing visibolity.
+    @Override
+    protected void deliverResponse(final MoPubClientPositioning response) {
+        super.deliverResponse(response);
+    }
+
+    @Override
+    protected Response<MoPubClientPositioning> parseNetworkResponse(final NetworkResponse response) {
+        if (response.statusCode != HttpStatus.SC_OK) {
+            return Response.error(new VolleyError(response));
+        }
+
+        if (response.data.length == 0) {
+            return Response.error(new VolleyError("Empty positioning response", new JSONException("Empty response")));
+        }
+
+        try {
+            String jsonString = new String(response.data,
+                    HttpHeaderParser.parseCharset(response.headers));
+
+            return Response.success(parseJson(jsonString), HttpHeaderParser.parseCacheHeaders(response));
+        } catch (UnsupportedEncodingException e) {
+            return Response.error(new VolleyError("Couldn't parse JSON from Charset", e));
+        } catch (JSONException e) {
+            return Response.error(new VolleyError("JSON Parsing Error", e));
+        } catch (MoPubNetworkError e) {
+            return Response.error(e);
+        }
+    }
+
+    @NonNull
+    @VisibleForTesting
+    MoPubClientPositioning parseJson(@NonNull String jsonString) throws  JSONException, MoPubNetworkError {
+        JSONObject jsonObject = new JSONObject(jsonString);
+
+        // If the server returns an error explicitly, throw an exception with the message.
+        String error = jsonObject.optString("error", null);
+        if (error != null) {
+            if (error.equalsIgnoreCase("WARMING_UP")) {
+                throw new MoPubNetworkError(MoPubNetworkError.Reason.WARMING_UP);
+            }
+            throw new JSONException(error);
+        }
+
+        // Parse fixed and repeating rules.
+        JSONArray fixed = jsonObject.optJSONArray(FIXED_KEY);
+        JSONObject repeating = jsonObject.optJSONObject(REPEATING_KEY);
+        if (fixed == null && repeating == null) {
+            throw new JSONException("Must contain fixed or repeating positions");
+        }
+
+        MoPubClientPositioning positioning = new MoPubClientPositioning();
+        if (fixed != null) {
+            parseFixedJson(fixed, positioning);
+        }
+        if (repeating != null) {
+            parseRepeatingJson(repeating, positioning);
+        }
+        return positioning;
+    }
+
+    private void parseFixedJson(@NonNull final JSONArray fixed,
+            @NonNull final MoPubClientPositioning positioning) throws JSONException {
+        for (int i = 0; i < fixed.length(); ++i) {
+            JSONObject positionObject = fixed.getJSONObject(i);
+            int section = positionObject.optInt(SECTION_KEY, 0);
+            if (section < 0) {
+                throw new JSONException("Invalid section " + section + " in JSON response");
+            }
+            if (section > 0) {
+                // Ignore sections > 0.
+                continue;
+            }
+            int position = positionObject.getInt(POSITION_KEY);
+            if (position < 0 || position > MAX_VALUE) {
+                throw new JSONException("Invalid position " + position + " in JSON response");
+            }
+            positioning.addFixedPosition(position);
+        }
+    }
+
+    private void parseRepeatingJson(@NonNull final JSONObject repeatingObject,
+            @NonNull final MoPubClientPositioning positioning) throws JSONException {
+        int interval = repeatingObject.getInt(INTERVAL_KEY);
+        if (interval < 2 || interval > MAX_VALUE) {
+            throw new JSONException("Invalid interval " + interval + " in JSON response");
+        }
+        positioning.enableRepeatingPositions(interval);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
index 979ca8c9..f9b0fafb 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
@@ -39,10 +39,10 @@ public String generateUrlString(@NonNull final String serverHostname) {
                 clientMetadata.getDeviceModel(),
                 clientMetadata.getDeviceProduct());
 
-        setUdid(clientMetadata.getAdvertisingId());
-
         setAppVersion(clientMetadata.getAppVersion());
 
+        appendAdvertisingInfoTemplates();
+
         return getFinalUrlString();
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
index 5d59cc05..ef207c4d 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
@@ -5,25 +5,15 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
-import com.mopub.common.ClientMetadata;
 import com.mopub.common.Constants;
-import com.mopub.common.DownloadResponse;
-import com.mopub.common.DownloadTask;
-import com.mopub.common.DownloadTask.DownloadTaskListener;
-import com.mopub.common.HttpClient;
-import com.mopub.common.HttpResponses;
 import com.mopub.common.VisibleForTesting;
-import com.mopub.common.event.Event;
-import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.AsyncTasks;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
-
-import org.apache.http.HttpStatus;
-import org.apache.http.client.methods.HttpGet;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
+import com.mopub.network.MoPubNetworkError;
+import com.mopub.network.Networking;
+import com.mopub.volley.RequestQueue;
+import com.mopub.volley.Response;
+import com.mopub.volley.VolleyError;
 
 /**
  * Requests positioning information from the MoPub ad server.
@@ -60,39 +50,22 @@
     @VisibleForTesting
     static int MAXIMUM_RETRY_TIME_MILLISECONDS = 5 * 60 * 1000; // 5 minutes.
 
-    private static final String FIXED_KEY = "fixed";
-    private static final String SECTION_KEY = "section";
-    private static final String POSITION_KEY = "position";
-    private static final String REPEATING_KEY = "repeating";
-    private static final String INTERVAL_KEY = "interval";
-
-    // Max value to avoid bad integer math calculations. This is 2 ^ 16.
-    private static final int MAX_VALUE = 1 << 16;
-
     @NonNull private final Context mContext;
 
-    @NonNull private final DownloadTaskProvider mDownloadTaskProvider;
-
     // Handler and runnable for retrying after a failed response.
     @NonNull private final Handler mRetryHandler;
     @NonNull private final Runnable mRetryRunnable;
-
-    // Only exists while a request is in flight.
-    @Nullable private DownloadTask mDownloadTask;
+    private final Response.Listener<MoPubClientPositioning> mPositioningListener;
+    private final Response.ErrorListener mErrorListener;
 
     @Nullable private PositioningListener mListener;
     private int mRetryCount;
     @Nullable private String mRetryUrl;
+    @Nullable private PositioningRequest mRequest;
 
     ServerPositioningSource(@NonNull final Context context) {
-        this(context, new DownloadTaskProvider());
-    }
-
-    @VisibleForTesting
-    ServerPositioningSource(@NonNull final Context context,
-            @NonNull final DownloadTaskProvider downloadTaskProvider) {
         mContext = context.getApplicationContext();
-        mDownloadTaskProvider = downloadTaskProvider;
+
         mRetryHandler = new Handler();
         mRetryRunnable = new Runnable() {
             @Override
@@ -100,14 +73,34 @@ public void run() {
                 requestPositioningInternal();
             }
         };
+
+        mPositioningListener = new Response.Listener<MoPubClientPositioning>() {
+            @Override
+            public void onResponse(final MoPubClientPositioning clientPositioning) {
+                handleSuccess(clientPositioning);
+            }
+        };
+
+        mErrorListener = new Response.ErrorListener() {
+            @Override
+            public void onErrorResponse(final VolleyError error) {
+                // Don't log a stack trace when we're just warming up.
+                if (!(error instanceof MoPubNetworkError) ||
+                        ((MoPubNetworkError) error).getReason().equals(MoPubNetworkError.Reason.WARMING_UP)) {
+                    MoPubLog.e("Failed to load positioning data", error);
+                }
+
+                handleFailure();
+            }
+        };
     }
 
     @Override
     public void loadPositions(@NonNull String adUnitId, @NonNull PositioningListener listener) {
         // If a request is in flight, remove it.
-        if (mDownloadTask != null) {
-            mDownloadTask.cancel(true);
-            mDownloadTask = null;
+        if (mRequest != null) {
+            mRequest.cancel();
+            mRequest = null;
         }
 
         // If a retry is pending remove it.
@@ -125,45 +118,10 @@ public void loadPositions(@NonNull String adUnitId, @NonNull PositioningListener
 
     private void requestPositioningInternal() {
         MoPubLog.d("Loading positioning from: " + mRetryUrl);
-        mDownloadTask = mDownloadTaskProvider.get(mTaskListener);
-        final HttpGet httpGet = HttpClient.initializeHttpGet(mRetryUrl, mContext);
-        AsyncTasks.safeExecuteOnExecutor(mDownloadTask, httpGet);
-    }
-
-    @NonNull
-    @VisibleForTesting
-    DownloadTaskListener mTaskListener = new DownloadTask.DownloadTaskListener() {
-        @Override
-        public void onComplete(@Nullable final String url,
-                @Nullable final DownloadResponse downloadResponse) {
-            mDownloadTask = null;
-            if (downloadResponse == null || downloadResponse.getStatusCode() != HttpStatus.SC_OK) {
-                MoPubLog.e("Invalid positioning download response");
-                handleFailure();
-                return;
-            }
-
-            String responseText = HttpResponses.asResponseString(downloadResponse);
-            MoPubClientPositioning positioning;
-            try {
-                positioning = parseJsonResponse(responseText);
-            } catch (JSONException exception) {
-                MoPubLog.e("Error parsing JSON: ", exception);
-                MoPubEvents.log(new Event.Builder("", "").build());
-                handleFailure();
-                return;
-            }
-
-            handleSuccess(positioning);
-        }
-    };
 
-    @VisibleForTesting
-    static class DownloadTaskProvider {
-        @NonNull
-        DownloadTask get(DownloadTaskListener listener) {
-            return new DownloadTask(listener, MoPubEvents.Type.POSITIONING_REQUEST);
-        }
+        mRequest = new PositioningRequest(mRetryUrl, mPositioningListener, mErrorListener);
+        final RequestQueue requestQueue = Networking.getRequestQueue(mContext);
+        requestQueue.add(mRequest);
     }
 
     private void handleSuccess(@NonNull MoPubClientPositioning positioning) {
@@ -189,63 +147,4 @@ private void handleFailure() {
         mRetryCount++;
         mRetryHandler.postDelayed(mRetryRunnable, delay);
     }
-
-    @NonNull
-    @VisibleForTesting
-    MoPubClientPositioning parseJsonResponse(@Nullable String json) throws JSONException {
-        if (json == null || json.equals("")) {
-            throw new JSONException("Empty response");
-        }
-
-        // If the server returns an error explicitly, throw an error with the message.
-        JSONObject jsonObject = new JSONObject(json);
-        String error = jsonObject.optString("error", null);
-        if (error != null) {
-            throw new JSONException(error);
-        }
-
-        // Parse fixed and repeating rules.
-        JSONArray fixed = jsonObject.optJSONArray(FIXED_KEY);
-        JSONObject repeating = jsonObject.optJSONObject(REPEATING_KEY);
-        MoPubClientPositioning positioning = new MoPubClientPositioning();
-        if (fixed == null && repeating == null) {
-            throw new JSONException("Must contain fixed or repeating positions");
-        }
-        if (fixed != null) {
-            parseFixedJson(fixed, positioning);
-        }
-        if (repeating != null) {
-            parseRepeatingJson(repeating, positioning);
-        }
-        return positioning;
-    }
-
-    private void parseFixedJson(@NonNull final JSONArray fixed,
-            @NonNull final MoPubClientPositioning positioning) throws JSONException {
-        for (int i = 0; i < fixed.length(); ++i) {
-            JSONObject positionObject = fixed.getJSONObject(i);
-            int section = positionObject.optInt(SECTION_KEY, 0);
-            if (section < 0) {
-                throw new JSONException("Invalid section " + section + " in JSON response");
-            }
-            if (section > 0) {
-                // Ignore sections > 0.
-                continue;
-            }
-            int position = positionObject.getInt(POSITION_KEY);
-            if (position < 0 || position > MAX_VALUE) {
-                throw new JSONException("Invalid position " + position + " in JSON response");
-            }
-            positioning.addFixedPosition(position);
-        }
-    }
-
-    private void parseRepeatingJson(@NonNull final JSONObject repeatingObject,
-            @NonNull final MoPubClientPositioning positioning) throws JSONException {
-        int interval = repeatingObject.getInt(INTERVAL_KEY);
-        if (interval < 2 || interval > MAX_VALUE) {
-            throw new JSONException("Invalid interval " + interval + " in JSON response");
-        }
-        positioning.enableRepeatingPositions(interval);
-    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/UrlResolutionTask.java b/mopub-sdk/src/main/java/com/mopub/nativeads/UrlResolutionTask.java
index 3a447c96..9c690202 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/UrlResolutionTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/UrlResolutionTask.java
@@ -4,9 +4,9 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
-import com.mopub.common.util.AsyncTasks;
-import com.mopub.common.util.IntentUtils;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.AsyncTasks;
+import com.mopub.common.util.Intents;
 
 import java.io.IOException;
 import java.net.HttpURLConnection;
@@ -54,7 +54,7 @@ protected String doInBackground(@Nullable String... urls) {
             while (locationUrl != null && redirectCount < REDIRECT_LIMIT) {
                 // if location url is not http(s), assume it's an Android deep link
                 // this scheme will fail URL validation so we have to check early
-                if (!IntentUtils.isHttpUrl(locationUrl)) {
+                if (!Intents.isHttpUrl(locationUrl)) {
                     return locationUrl;
                 }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java b/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java
new file mode 100644
index 00000000..674354de
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java
@@ -0,0 +1,164 @@
+package com.mopub.network;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import com.mopub.common.AdFormat;
+import com.mopub.common.AdType;
+import com.mopub.common.DataKeys;
+import com.mopub.common.util.Json;
+import com.mopub.common.util.ResponseHeader;
+import com.mopub.mobileads.AdTypeTranslator;
+import com.mopub.volley.DefaultRetryPolicy;
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.Request;
+import com.mopub.volley.Response;
+import com.mopub.volley.toolbox.HttpHeaderParser;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.*;
+import java.util.*;
+
+import static com.mopub.network.HeaderUtils.extractBooleanHeader;
+import static com.mopub.network.HeaderUtils.extractHeader;
+import static com.mopub.network.HeaderUtils.extractIntegerHeader;
+
+public class AdRequest extends Request<AdResponse> {
+
+    @NonNull private final AdRequest.Listener mListener;
+    @NonNull private final AdFormat mAdFormat;
+
+    public interface Listener extends Response.ErrorListener {
+        public void onSuccess(AdResponse response);
+    }
+
+    public AdRequest(@NonNull final String url, @NonNull final AdFormat adFormat,
+            @NonNull final Listener listener) {
+        super(Method.GET, url, listener);
+        mListener = listener;
+        mAdFormat = adFormat;
+        DefaultRetryPolicy retryPolicy = new DefaultRetryPolicy(
+                DefaultRetryPolicy.DEFAULT_TIMEOUT_MS,
+                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
+                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT);
+        setRetryPolicy(retryPolicy);
+        setShouldCache(false);
+    }
+
+    @Override
+    protected Response<AdResponse> parseNetworkResponse(final NetworkResponse networkResponse) {
+        // NOTE: We never get status codes outside of {[200, 299], 304}. Those errors are sent to the
+        // error listener.
+
+        Map<String, String> headers = networkResponse.headers;
+        if (extractBooleanHeader(headers, ResponseHeader.WARMUP, false)) {
+            return Response.error(new MoPubNetworkError("Ad Unit is warming up.", MoPubNetworkError.Reason.WARMING_UP));
+        }
+
+
+
+        AdResponse.Builder builder = new AdResponse.Builder();
+
+        String adTypeString = extractHeader(headers, ResponseHeader.AD_TYPE);
+        String fullAdTypeString = extractHeader(headers, ResponseHeader.FULL_AD_TYPE);
+
+        builder.setAdType(adTypeString);
+        builder.setFullAdType(fullAdTypeString);
+        if (AdType.CLEAR.equals(adTypeString)) {
+            return Response.error(new MoPubNetworkError("No ads found for ad unit.", MoPubNetworkError.Reason.NO_FILL));
+        }
+
+        builder.setNetworkType(extractHeader(headers, ResponseHeader.NETWORK_TYPE));
+        String redirectUrl = extractHeader(headers, ResponseHeader.REDIRECT_URL);
+        builder.setRedirectUrl(redirectUrl);
+        String clickTrackingUrl = extractHeader(headers, ResponseHeader.CLICK_TRACKING_URL);
+        builder.setClickTrackingUrl(clickTrackingUrl);
+        builder.setImpressionTrackingUrl(extractHeader(headers, ResponseHeader.IMPRESSION_URL));
+        builder.setFailoverUrl(extractHeader(headers, ResponseHeader.FAIL_URL));
+        boolean isScrollable = extractBooleanHeader(headers, ResponseHeader.SCROLLABLE, false);
+        builder.setScrollable(isScrollable);
+        builder.setDimensions(extractIntegerHeader(headers, ResponseHeader.WIDTH),
+                extractIntegerHeader(headers, ResponseHeader.HEIGHT));
+
+        Integer adTimeoutDelaySeconds = extractIntegerHeader(headers, ResponseHeader.AD_TIMEOUT);
+        builder.setAdTimeoutDelayMilliseconds(
+                adTimeoutDelaySeconds == null ? null : adTimeoutDelaySeconds * 1000);
+
+        Integer refreshTimeSeconds = extractIntegerHeader(headers, ResponseHeader.REFRESH_TIME);
+        builder.setRefreshTimeMilliseconds(
+                refreshTimeSeconds == null ? null : refreshTimeSeconds * 1000);
+
+        // Response Body encoding / decoding
+        String responseBody = parseStringBody(networkResponse);
+        builder.setResponseBody(responseBody);
+        if (AdType.NATIVE.equals(adTypeString)) {
+            try {
+                builder.setJsonBody(new JSONObject(responseBody));
+            } catch (JSONException e) {
+                return Response.error(
+                        new MoPubNetworkError("Failed to decode body JSON for native ad format",
+                                e, MoPubNetworkError.Reason.BAD_BODY));
+            }
+        }
+
+        // Derive custom event fields
+        String customEventClassName = AdTypeTranslator.getCustomEventName(mAdFormat, adTypeString,
+                fullAdTypeString, headers);
+        builder.setCustomEventClassName(customEventClassName);
+
+        // Process server extras if they are present:
+        String customEventData = extractHeader(headers, ResponseHeader.CUSTOM_EVENT_DATA);
+
+        // Some server-supported custom events (like Millennial banners) use a different header field
+        if (TextUtils.isEmpty(customEventData)) {
+            customEventData = extractHeader(headers, ResponseHeader.NATIVE_PARAMS);
+        }
+        try {
+            builder.setServerExtras(Json.jsonStringToMap(customEventData));
+        } catch (JSONException e) {
+            return Response.error(
+                    new MoPubNetworkError("Failed to decode server extras for custom event data.",
+                            e, MoPubNetworkError.Reason.BAD_HEADER_DATA));
+        }
+
+        // Some MoPub-specific custom events get their serverExtras from the response itself:
+        if (eventDataIsInResponseBody(adTypeString, fullAdTypeString)) {
+            Map<String, String> eventDataMap = new TreeMap<String, String>();
+            eventDataMap.put(DataKeys.HTML_RESPONSE_BODY_KEY, responseBody);
+            eventDataMap.put(DataKeys.SCROLLABLE_KEY, Boolean.toString(isScrollable));
+            if (redirectUrl != null) {
+                eventDataMap.put(DataKeys.REDIRECT_URL_KEY, redirectUrl);
+            }
+            if (clickTrackingUrl != null) {
+                eventDataMap.put(DataKeys.CLICKTHROUGH_URL_KEY, clickTrackingUrl);
+            }
+            builder.setServerExtras(eventDataMap);
+        }
+
+        return Response.success(builder.build(),  // Cast needed for Response generic.
+                HttpHeaderParser.parseCacheHeaders(networkResponse));
+    }
+
+    private boolean eventDataIsInResponseBody(@Nullable String adType,
+            @Nullable String fullAdType) {
+        return "mraid".equals(adType) || "html".equals(adType) ||
+                ("interstitial".equals(adType) && "vast".equals(fullAdType));
+    }
+
+    // Based on Volley's StringResponse class.
+    protected String parseStringBody(NetworkResponse response) {
+        String parsed;
+        try {
+            parsed = new String(response.data, HttpHeaderParser.parseCharset(response.headers));
+        } catch (UnsupportedEncodingException e) {
+            parsed = new String(response.data);
+        }
+        return parsed;
+    }
+
+    @Override
+    protected void deliverResponse(final AdResponse adResponse) {
+        mListener.onSuccess(adResponse);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java b/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java
new file mode 100644
index 00000000..ea0ba0c5
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java
@@ -0,0 +1,306 @@
+package com.mopub.network;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.util.DateAndTime;
+
+import org.json.JSONObject;
+
+import java.io.Serializable;
+import java.util.Map;
+import java.util.TreeMap;
+
+public class AdResponse implements Serializable {
+    private static final long serialVersionUID = 1L;
+
+    @Nullable
+    private final String mAdType;
+    @Nullable
+    private final String mFullAdType;
+    @Nullable
+    private final String mNetworkType;
+
+    @Nullable
+    private final String mRedirectUrl;
+    @Nullable
+    private final String mClickTrackingUrl;
+    @Nullable
+    private final String mImpressionTrackingUrl;
+    @Nullable
+    private final String mFailoverUrl;
+
+    @Nullable
+    private final Integer mWidth;
+    @Nullable
+    private final Integer mHeight;
+    @Nullable
+    private final Integer mAdTimeoutDelayMillis;
+    @Nullable
+    private final Integer mRefreshTimeMillis;
+    @Nullable
+    private final String mDspCreativeId;
+
+    private final boolean mScrollable;
+
+    @Nullable
+    private final String mResponseBody;
+    @Nullable
+    private final JSONObject mJsonBody;
+
+    @Nullable
+    private final String mCustomEventClassName;
+    @NonNull
+    private final Map<String, String> mServerExtras;
+
+    private final long mTimestamp;
+
+    private AdResponse(@NonNull Builder builder) {
+
+        mAdType = builder.adType;
+        mFullAdType = builder.fullAdType;
+        mNetworkType = builder.networkType;
+        mRedirectUrl = builder.redirectUrl;
+        mClickTrackingUrl = builder.clickTrackingUrl;
+        mImpressionTrackingUrl = builder.impressionTrackingUrl;
+        mFailoverUrl = builder.failoverUrl;
+        mWidth = builder.width;
+        mHeight = builder.height;
+        mAdTimeoutDelayMillis = builder.adTimeoutDelayMillis;
+        mRefreshTimeMillis = builder.refreshTimeMillis;
+        mDspCreativeId = builder.dspCreativeId;
+        mScrollable = builder.scrollable;
+        mResponseBody = builder.responseBody;
+        mJsonBody = builder.jsonBody;
+        mCustomEventClassName = builder.customEventClassName;
+        mServerExtras = builder.serverExtras;
+        mTimestamp = DateAndTime.now().getTime();
+    }
+
+    public boolean hasJson() {
+        return mJsonBody != null;
+    }
+
+    @Nullable
+    public JSONObject getJsonBody() {
+        return mJsonBody;
+    }
+
+    @Nullable
+    public String getStringBody() {
+        return mResponseBody;
+    }
+
+    @Nullable
+    public String getAdType() {
+        return mAdType;
+    }
+
+    @Nullable
+    public String getFullAdType() {
+        return mFullAdType;
+    }
+
+    @Nullable
+    public String getNetworkType() {
+        return mNetworkType;
+    }
+
+    @Nullable
+    public String getRedirectUrl() {
+        return mRedirectUrl;
+    }
+
+    @Nullable
+    public String getClickTrackingUrl() {
+        return mClickTrackingUrl;
+    }
+
+    @Nullable
+    public String getImpressionTrackingUrl() {
+        return mImpressionTrackingUrl;
+    }
+
+    @Nullable
+    public String getFailoverUrl() {
+        return mFailoverUrl;
+    }
+
+    public boolean isScrollable() {
+        return mScrollable;
+    }
+
+    @Nullable
+    public Integer getWidth() {
+        return mWidth;
+    }
+
+    @Nullable
+    public Integer getHeight() {
+        return mHeight;
+    }
+
+    @Nullable
+    public Integer getAdTimeoutMillis() {
+        return mAdTimeoutDelayMillis;
+    }
+
+    @Nullable
+    public Integer getRefreshTimeMillis() {
+        return mRefreshTimeMillis;
+    }
+
+    @Nullable
+    public String getDspCreativeId() {
+        return mDspCreativeId;
+    }
+
+    @Nullable
+    public String getCustomEventClassName() {
+        return mCustomEventClassName;
+    }
+
+    @NonNull
+    public Map<String, String> getServerExtras() {
+        // Strings are immutable, so this works as a "deep" copy.
+        return new TreeMap<String, String>(mServerExtras);
+    }
+
+    public long getTimestamp() {
+        return mTimestamp;
+    }
+
+    public Builder toBuilder() {
+        return new Builder()
+                .setAdType(mAdType)
+                .setNetworkType(mNetworkType)
+                .setRedirectUrl(mRedirectUrl)
+                .setClickTrackingUrl(mClickTrackingUrl)
+                .setImpressionTrackingUrl(mImpressionTrackingUrl)
+                .setFailoverUrl(mFailoverUrl)
+                .setDimensions(mWidth, mHeight)
+                .setAdTimeoutDelayMilliseconds(mAdTimeoutDelayMillis)
+                .setRefreshTimeMilliseconds(mRefreshTimeMillis)
+                .setDspCreativeId(mDspCreativeId)
+                .setScrollable(mScrollable)
+                .setResponseBody(mResponseBody)
+                .setJsonBody(mJsonBody)
+                .setCustomEventClassName(mCustomEventClassName)
+                .setServerExtras(mServerExtras);
+    }
+
+    public static class Builder {
+        private String adType;
+        private String fullAdType;
+        private String networkType;
+
+        private String redirectUrl;
+        private String clickTrackingUrl;
+        private String impressionTrackingUrl;
+        private String failoverUrl;
+
+        private Integer width;
+        private Integer height;
+        private Integer adTimeoutDelayMillis;
+        private Integer refreshTimeMillis;
+        private String dspCreativeId;
+
+        private boolean scrollable = false;
+
+        private String responseBody;
+        private JSONObject jsonBody;
+
+        private String customEventClassName;
+        private Map<String, String> serverExtras;
+
+        public Builder setAdType(@Nullable final String adType) {
+            this.adType = adType;
+            return this;
+        }
+
+        public Builder setFullAdType(@Nullable final String fullAdType) {
+            this.fullAdType = fullAdType;
+            return this;
+        }
+
+        public Builder setNetworkType(@Nullable final String networkType) {
+            this.networkType = networkType;
+            return this;
+        }
+
+        public Builder setRedirectUrl(@Nullable final String redirectUrl) {
+            this.redirectUrl = redirectUrl;
+            return this;
+        }
+
+        public Builder setClickTrackingUrl(@Nullable final String clickTrackingUrl) {
+            this.clickTrackingUrl = clickTrackingUrl;
+            return this;
+        }
+
+        public Builder setImpressionTrackingUrl(@Nullable final String impressionTrackingUrl) {
+            this.impressionTrackingUrl = impressionTrackingUrl;
+            return this;
+        }
+
+        public Builder setFailoverUrl(@Nullable final String failoverUrl) {
+            this.failoverUrl = failoverUrl;
+            return this;
+        }
+
+        public Builder setDimensions(@Nullable final Integer width,
+                @Nullable final Integer height) {
+            this.width = width;
+            this.height = height;
+            return this;
+        }
+
+        public Builder setAdTimeoutDelayMilliseconds(@Nullable final Integer adTimeoutDelayMilliseconds) {
+            this.adTimeoutDelayMillis = adTimeoutDelayMilliseconds;
+            return this;
+        }
+
+        public Builder setRefreshTimeMilliseconds(@Nullable final Integer refreshTimeMilliseconds) {
+            this.refreshTimeMillis = refreshTimeMilliseconds;
+            return this;
+        }
+
+        public Builder setScrollable(@Nullable final Boolean scrollable) {
+            this.scrollable = scrollable == null ? this.scrollable : scrollable;
+            return this;
+        }
+
+        public Builder setDspCreativeId(@Nullable final String dspCreativeId) {
+            this.dspCreativeId = dspCreativeId;
+            return this;
+        }
+
+        public Builder setResponseBody(@Nullable final String responseBody) {
+            this.responseBody = responseBody;
+            return this;
+        }
+
+        public Builder setJsonBody(@Nullable final JSONObject jsonBody) {
+            this.jsonBody = jsonBody;
+            return this;
+        }
+
+        public Builder setCustomEventClassName(@Nullable final String customEventClassName) {
+            this.customEventClassName = customEventClassName;
+            return this;
+        }
+
+        public Builder setServerExtras(@Nullable final Map<String, String> serverExtras) {
+            if (serverExtras == null) {
+                this.serverExtras = new TreeMap<String, String>();
+            } else {
+                this.serverExtras = new TreeMap<String, String>(serverExtras);
+            }
+            return this;
+        }
+
+        public AdResponse build() {
+            return new AdResponse(this);
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/network/HeaderUtils.java b/mopub-sdk/src/main/java/com/mopub/network/HeaderUtils.java
similarity index 64%
rename from mopub-sdk/src/main/java/com/mopub/common/network/HeaderUtils.java
rename to mopub-sdk/src/main/java/com/mopub/network/HeaderUtils.java
index 8c9858e3..f96c70d0 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/network/HeaderUtils.java
+++ b/mopub-sdk/src/main/java/com/mopub/network/HeaderUtils.java
@@ -1,4 +1,6 @@
-package com.mopub.common.network;
+package com.mopub.network;
+
+import android.support.annotation.Nullable;
 
 import com.mopub.common.util.ResponseHeader;
 
@@ -14,30 +16,26 @@ public static String extractHeader(Map<String, String> headers, ResponseHeader r
         return headers.get(responseHeader.getKey());
     }
 
+    public static Integer extractIntegerHeader(Map<String, String> headers, ResponseHeader responseHeader) {
+        return formatIntHeader(extractHeader(headers, responseHeader));
+    }
+
+    public static boolean extractBooleanHeader(Map<String, String> headers, ResponseHeader responseHeader, boolean defaultValue) {
+        return formatBooleanHeader(extractHeader(headers, responseHeader), defaultValue);
+    }
+
     public static String extractHeader(HttpResponse response, ResponseHeader responseHeader) {
         Header header = response.getFirstHeader(responseHeader.getKey());
         return header != null ? header.getValue() : null;
     }
 
     public static boolean extractBooleanHeader(HttpResponse response, ResponseHeader responseHeader, boolean defaultValue) {
-        String header = extractHeader(response, responseHeader);
-        if (header == null) {
-            return defaultValue;
-        }
-        return header.equals("1");
+        return formatBooleanHeader(extractHeader(response, responseHeader), defaultValue);
     }
 
     public static Integer extractIntegerHeader(HttpResponse response, ResponseHeader responseHeader) {
-        NumberFormat numberFormat = NumberFormat.getInstance(Locale.US);
-        numberFormat.setParseIntegerOnly(true);
-
         String headerValue = extractHeader(response, responseHeader);
-        try {
-            Number value = numberFormat.parse(headerValue.trim());
-            return value.intValue();
-        } catch (Exception e) {
-            return null;
-        }
+        return formatIntHeader(headerValue);
     }
 
     public static int extractIntHeader(HttpResponse response, ResponseHeader responseHeader, int defaultValue) {
@@ -48,4 +46,23 @@ public static int extractIntHeader(HttpResponse response, ResponseHeader respons
 
         return headerValue;
     }
+
+    private static boolean formatBooleanHeader(@Nullable String headerValue, boolean defaultValue) {
+        if (headerValue == null) {
+            return defaultValue;
+        }
+        return headerValue.equals("1");
+    }
+
+    private static Integer formatIntHeader(String headerValue) {
+        NumberFormat numberFormat = NumberFormat.getInstance(Locale.US);
+        numberFormat.setParseIntegerOnly(true);
+
+        try {
+            Number value = numberFormat.parse(headerValue.trim());
+            return value.intValue();
+        } catch (Exception e) {
+            return null;
+        }
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/network/MaxWidthImageLoader.java b/mopub-sdk/src/main/java/com/mopub/network/MaxWidthImageLoader.java
new file mode 100644
index 00000000..6927dd96
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/network/MaxWidthImageLoader.java
@@ -0,0 +1,38 @@
+package com.mopub.network;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.graphics.Point;
+import android.os.Build;
+import android.view.Display;
+import android.view.WindowManager;
+
+import com.mopub.volley.RequestQueue;
+
+public class MaxWidthImageLoader extends com.mopub.volley.toolbox.ImageLoader {
+    private final int mMaxImageWidth;
+
+
+    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
+    public MaxWidthImageLoader(final RequestQueue queue, final Context context, final ImageCache imageCache) {
+        super(queue, imageCache);
+
+        // Get Display Options
+        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
+        Display display = wm.getDefaultDisplay();
+        Point size = new Point();
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB_MR2) {
+            size.set(display.getWidth(), display.getHeight());
+        } else {
+            display.getSize(size);
+        }
+
+        // Make our images no wider than the skinny side of the display.
+        mMaxImageWidth = Math.min(size.x, size.y);
+    }
+
+    @Override
+    public ImageContainer get(final String requestUrl, final ImageListener listener) {
+        return super.get(requestUrl, listener, mMaxImageWidth, 0 /* no height limit */);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/network/MoPubNetworkError.java b/mopub-sdk/src/main/java/com/mopub/network/MoPubNetworkError.java
new file mode 100644
index 00000000..9b4f61cb
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/network/MoPubNetworkError.java
@@ -0,0 +1,49 @@
+package com.mopub.network;
+
+import android.support.annotation.NonNull;
+
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.VolleyError;
+
+public class MoPubNetworkError extends VolleyError {
+    public static enum Reason {
+        WARMING_UP,
+        NO_FILL,
+        BAD_HEADER_DATA,
+        BAD_BODY,
+        TRACKING_FAILURE,
+        UNSPECIFIED
+    }
+
+    @NonNull private final Reason mReason;
+
+    public MoPubNetworkError(@NonNull Reason reason) {
+        super();
+        mReason = reason;
+    }
+
+    public MoPubNetworkError(@NonNull NetworkResponse networkResponse, @NonNull Reason reason) {
+        super(networkResponse);
+        mReason = reason;
+    }
+
+    public MoPubNetworkError(@NonNull Throwable cause, @NonNull Reason reason) {
+        super(cause);
+        mReason = reason;
+    }
+
+    public MoPubNetworkError(@NonNull String message, @NonNull Reason reason) {
+        super(message);
+        mReason = reason;
+    }
+
+    public MoPubNetworkError(@NonNull String message, @NonNull Throwable cause, @NonNull Reason reason) {
+        super(message, cause);
+        mReason = reason;
+    }
+
+    @NonNull
+    public Reason getReason() {
+        return mReason;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/network/Networking.java b/mopub-sdk/src/main/java/com/mopub/network/Networking.java
new file mode 100644
index 00000000..26df7aa7
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/network/Networking.java
@@ -0,0 +1,150 @@
+package com.mopub.network;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.os.Looper;
+import android.support.annotation.NonNull;
+import android.support.v4.util.LruCache;
+import android.webkit.WebView;
+
+import com.mopub.common.ClientMetadata;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.util.DeviceUtils;
+import com.mopub.volley.Cache;
+import com.mopub.volley.Network;
+import com.mopub.volley.RequestQueue;
+import com.mopub.volley.toolbox.BasicNetwork;
+import com.mopub.volley.toolbox.DiskBasedCache;
+import com.mopub.volley.toolbox.HttpStack;
+import com.mopub.volley.toolbox.HurlStack;
+import com.mopub.volley.toolbox.ImageLoader;
+
+import java.io.File;
+
+public class Networking {
+    private static final String CACHE_DIRECTORY_NAME = "mopub-volley-cache";
+    private static final int TEN_MB = 10 * 1024 * 1024;
+
+    private static RequestQueue sRequestQueue;
+    private static String sUserAgent;
+    private static MaxWidthImageLoader sMaxWidthImageLoader;
+
+    @NonNull
+    public static RequestQueue getRequestQueue(@NonNull Context context) {
+        RequestQueue requestQueue = sRequestQueue;
+        // Double-check locking to initialize.
+        if (requestQueue == null) {
+            synchronized (Networking.class) {
+                requestQueue = sRequestQueue;
+                if (requestQueue == null) {
+                    // Guarantee ClientMetadata is set up.
+                    final ClientMetadata clientMetadata = ClientMetadata.getInstance(context);
+                    HurlStack.UrlRewriter urlRewriter = new PlayServicesUrlRewriter(clientMetadata.getDeviceId(), context);
+
+                    final String userAgent = Networking.getUserAgent(context.getApplicationContext());
+                    HttpStack httpStack = new RequestQueueHttpStack(userAgent, urlRewriter);
+
+                    Network network = new BasicNetwork(httpStack);
+                    File volleyCacheDir = new File(context.getCacheDir().getPath() + File.separator
+                            + CACHE_DIRECTORY_NAME);
+                    Cache cache = new DiskBasedCache(volleyCacheDir, (int) DeviceUtils.diskCacheSizeBytes(volleyCacheDir, TEN_MB));
+                    requestQueue = new RequestQueue(cache, network);
+                    sRequestQueue = requestQueue;
+                    sRequestQueue.start();
+                }
+            }
+        }
+
+        return requestQueue;
+    }
+
+    @NonNull
+    public static ImageLoader getImageLoader(@NonNull Context context) {
+        MaxWidthImageLoader imageLoader = sMaxWidthImageLoader;
+        // Double-check locking to initialize.
+        if (imageLoader == null) {
+            synchronized (Networking.class) {
+                imageLoader = sMaxWidthImageLoader;
+                if (imageLoader == null) {
+                    RequestQueue queue = getRequestQueue(context);
+                    int cacheSize = DeviceUtils.memoryCacheSizeBytes(context);
+                    final LruCache<String, Bitmap> imageCache = new LruCache<String, Bitmap>(cacheSize) {
+                        @Override
+                        protected int sizeOf(String key, Bitmap value) {
+                            if (value != null) {
+                                return value.getRowBytes() * value.getHeight();
+                            }
+
+                            return super.sizeOf(key, value);
+                        }
+                    };
+                    imageLoader = new MaxWidthImageLoader(queue, context, new MaxWidthImageLoader.ImageCache() {
+                        @Override
+                        public Bitmap getBitmap(final String key) {
+                            return imageCache.get(key);
+                        }
+
+                        @Override
+                        public void putBitmap(final String key, final Bitmap bitmap) {
+                            imageCache.put(key, bitmap);
+                        }
+                    });
+                    sMaxWidthImageLoader = imageLoader;
+                }
+            }
+        }
+        return imageLoader;
+    }
+
+    /**
+     * Caches and returns the WebView user agent to be used across all SDK requests. This is
+     * important because advertisers expect the same user agent across all request, impression, and
+     * click events.
+     */
+    @NonNull
+    public static String getUserAgent(@NonNull Context context) {
+        Preconditions.checkNotNull(context);
+
+        String userAgent = sUserAgent;
+        if (userAgent == null) {
+            synchronized (Networking.class) {
+                userAgent = sUserAgent;
+                if (userAgent == null) {
+                    // As of Android 4.4, WebViews may only be instantiated on the UI thread
+                    if (Looper.myLooper() == Looper.getMainLooper()) {
+                        sUserAgent = new WebView(context).getSettings().getUserAgentString();
+                    } else {
+                        // In the exceptional case where we can't access the WebView user agent,
+                        // fall back to the System-specific user agent.
+                        sUserAgent = System.getProperty("http.agent");
+                    }
+                }
+            }
+        }
+
+        return sUserAgent;
+    }
+
+    @VisibleForTesting
+    public static synchronized void clearForTesting() {
+        sRequestQueue = null;
+        sMaxWidthImageLoader = null;
+        sUserAgent = null;
+    }
+
+    @VisibleForTesting
+    public static synchronized void setRequestQueueForTesting(RequestQueue queue) {
+        sRequestQueue = queue;
+    }
+
+    @VisibleForTesting
+    public static synchronized void setImageLoaderForTesting(MaxWidthImageLoader imageLoader) {
+        sMaxWidthImageLoader = imageLoader;
+    }
+
+    @VisibleForTesting
+    public static synchronized void setUserAgentForTesting(String userAgent) {
+        sUserAgent = userAgent;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/network/PlayServicesUrlRewriter.java b/mopub-sdk/src/main/java/com/mopub/network/PlayServicesUrlRewriter.java
new file mode 100644
index 00000000..42438bbd
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/network/PlayServicesUrlRewriter.java
@@ -0,0 +1,51 @@
+package com.mopub.network;
+
+import android.content.Context;
+import android.net.Uri;
+
+import com.mopub.common.GpsHelper;
+import com.mopub.volley.toolbox.HurlStack;
+
+/**
+ * Url Rewriter that replaces MoPub templates for Google Advertising ID and Do Not Track settings
+ * when a request is queued for dispatch by the HurlStack in Volley.
+ */
+public class PlayServicesUrlRewriter implements HurlStack.UrlRewriter {
+    private static final String IFA_PREFIX = "ifa:";
+
+    public static final String UDID_TEMPLATE = "mp_tmpl_advertising_id";
+    public static final String DO_NOT_TRACK_TEMPLATE = "mp_tmpl_do_not_track";
+
+    private final String deviceIdentifier;
+    private final Context applicationContext;
+
+    public PlayServicesUrlRewriter(String deviceId, Context context) {
+        deviceIdentifier = deviceId;
+        applicationContext = context.getApplicationContext();
+    }
+
+    @Override
+    public String rewriteUrl(final String url) {
+        if (!url.contains(UDID_TEMPLATE) && !url.contains(DO_NOT_TRACK_TEMPLATE)) {
+            return url;
+        }
+
+        String prefix = "";
+        GpsHelper.AdvertisingInfo advertisingInfo = new GpsHelper.AdvertisingInfo(deviceIdentifier, false);
+
+        // Attempt to fetch the Google Play Services fields
+        if (GpsHelper.isPlayServicesAvailable(applicationContext)) {
+            // We can do this synchronously because urlRewrite happens in a background thread.
+            GpsHelper.AdvertisingInfo playServicesAdInfo = GpsHelper.fetchAdvertisingInfoSync(applicationContext);
+            if (playServicesAdInfo != null) {
+                prefix = IFA_PREFIX;
+                advertisingInfo = playServicesAdInfo;
+            }
+        }
+
+        // Fill in the templates
+        String toReturn = url.replace(UDID_TEMPLATE, Uri.encode(prefix + advertisingInfo.advertisingId));
+        toReturn = toReturn.replace(DO_NOT_TRACK_TEMPLATE, advertisingInfo.limitAdTracking ? "1" : "0");
+        return toReturn;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/network/RequestQueueHttpStack.java b/mopub-sdk/src/main/java/com/mopub/network/RequestQueueHttpStack.java
new file mode 100644
index 00000000..f2df816c
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/network/RequestQueueHttpStack.java
@@ -0,0 +1,54 @@
+package com.mopub.network;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.util.ResponseHeader;
+import com.mopub.volley.AuthFailureError;
+import com.mopub.volley.Request;
+import com.mopub.volley.toolbox.HurlStack;
+
+import org.apache.http.HttpResponse;
+
+import java.io.IOException;
+import java.util.Map;
+import java.util.TreeMap;
+
+import javax.net.ssl.SSLSocketFactory;
+
+/**
+ * Modified Volley HurlStack with explicitly specified User-Agent.
+ *
+ * Used by Networking's singleton RequestQueue to ensure all network requests use WebView's
+ * User-Agent.
+ */
+public class RequestQueueHttpStack extends HurlStack {
+    @NonNull private final String mUserAgent;
+
+    public RequestQueueHttpStack(@NonNull final String userAgent) {
+        this(userAgent, null);
+    }
+
+    public RequestQueueHttpStack(@NonNull final String userAgent, @Nullable final UrlRewriter urlRewriter) {
+        this(userAgent, urlRewriter, null);
+    }
+
+    public RequestQueueHttpStack(@NonNull final String userAgent, @Nullable final UrlRewriter urlRewriter,
+                                 @Nullable final SSLSocketFactory sslSocketFactory) {
+        super(urlRewriter, sslSocketFactory);
+
+        mUserAgent = userAgent;
+    }
+
+    @Override
+    public HttpResponse performRequest(@NonNull final Request<?> request,
+            @Nullable Map<String, String> additionalHeaders) throws IOException, AuthFailureError {
+        if (additionalHeaders == null) {
+            additionalHeaders = new TreeMap<String, String>();
+        }
+
+        additionalHeaders.put(ResponseHeader.USER_AGENT.getKey(), mUserAgent);
+
+        return super.performRequest(request, additionalHeaders);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java b/mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java
new file mode 100644
index 00000000..1f2795af
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java
@@ -0,0 +1,126 @@
+package com.mopub.network;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import com.mopub.common.event.MoPubEvents;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.volley.DefaultRetryPolicy;
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.Request;
+import com.mopub.volley.RequestQueue;
+import com.mopub.volley.Response;
+import com.mopub.volley.VolleyError;
+import com.mopub.volley.toolbox.HttpHeaderParser;
+
+import java.util.*;
+
+public class TrackingRequest extends Request<Void> {
+
+    public interface Listener extends Response.ErrorListener {
+        public void onResponse();
+    }
+
+    @Nullable private final TrackingRequest.Listener mListener;
+
+    private TrackingRequest(@NonNull final String url, @Nullable final Listener listener) {
+        super(Method.GET, url, listener);
+        mListener = listener;
+        setShouldCache(false);
+        setRetryPolicy(new DefaultRetryPolicy(
+                DefaultRetryPolicy.DEFAULT_TIMEOUT_MS,
+                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
+                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
+    }
+
+    @Override
+    protected Response<Void> parseNetworkResponse(final NetworkResponse networkResponse) {
+        if (networkResponse.statusCode != 200) {
+            return Response.error(
+                    new MoPubNetworkError("Failed to log tracking request. Response code: "
+                            + networkResponse.statusCode + " for url: " + getUrl(),
+                            MoPubNetworkError.Reason.TRACKING_FAILURE));
+        }
+        return Response.success(null, HttpHeaderParser.parseCacheHeaders(networkResponse));
+    }
+
+    @Override
+    public void deliverResponse(final Void aVoid) {
+        if (mListener != null) {
+            mListener.onResponse();
+        }
+    }
+
+    ///////////////////////////////////////////////////////////////
+    // Static helper methods that can be used as utilities:
+    //////////////////////////////////////////////////////////////
+
+    public static void makeTrackingHttpRequest(final Iterable<String> urls, final Context context) {
+        makeTrackingHttpRequest(urls, context, null, null);
+    }
+
+    public static void makeTrackingHttpRequest(final Iterable<String> urls,
+            final Context context,
+            final MoPubEvents.Type type) {
+        makeTrackingHttpRequest(urls, context, null, type);
+    }
+
+    public static void makeTrackingHttpRequest(final Iterable<String> urls,
+            final Context context,
+            @Nullable final Listener listener,
+            final MoPubEvents.Type type) {
+        if (urls == null || context == null) {
+            return;
+        }
+
+        final RequestQueue requestQueue = Networking.getRequestQueue(context);
+        for (final String url : urls) {
+            if (TextUtils.isEmpty(url)) {
+                continue;
+            }
+
+            final TrackingRequest.Listener internalListener = new TrackingRequest.Listener() {
+                @Override
+                public void onResponse() {
+                    MoPubLog.d("Successfully hit tracking endpoint: " + url);
+                    if (listener != null) {
+                        listener.onResponse();
+                    }
+                }
+
+                @Override
+                public void onErrorResponse(final VolleyError volleyError) {
+                    MoPubLog.d("Failed to hit tracking endpoint: " + url);
+                    if (listener != null) {
+                        listener.onErrorResponse(volleyError);
+                    }
+                }
+            };
+            final TrackingRequest trackingRequest = new TrackingRequest(url, internalListener);
+            requestQueue.add(trackingRequest);
+        }
+    }
+
+    public static void makeTrackingHttpRequest(final String url,
+            final Context context) {
+        makeTrackingHttpRequest(url, context, null, null);
+    }
+
+    public static void makeTrackingHttpRequest(final String url,
+            final Context context, @Nullable Listener listener) {
+        makeTrackingHttpRequest(url, context, listener, null);
+    }
+
+    public static void makeTrackingHttpRequest(final String url,
+            final Context context, final MoPubEvents.Type type) {
+        makeTrackingHttpRequest(url, context, null, type);
+    }
+
+    public static void makeTrackingHttpRequest(final String url,
+            final Context context,
+            @Nullable Listener listener,
+            final MoPubEvents.Type type) {
+        makeTrackingHttpRequest(Arrays.asList(url), context, listener, type);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java b/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java
new file mode 100644
index 00000000..6bdefe59
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java
@@ -0,0 +1,104 @@
+package com.mopub.common;
+
+import android.os.Build;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.test.support.TestDateAndTime;
+import com.mopub.network.AdResponse;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Locale;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.stub;
+
+@RunWith(SdkTestRunner.class)
+public class AdReportTest {
+
+    public AdReport subject;
+    @Mock
+    ClientMetadata mockClientMetadata;
+    @Mock
+    AdResponse mockAdResponse;
+    private Date now;
+
+    @Before
+    public void setup() {
+        now = new Date();
+        TestDateAndTime.getInstance().setNow(now);
+    }
+
+    @Test
+    public void testToString_shouldProperlyConstructParametersTextFile() throws Exception {
+        String expectedParameters =
+                "sdk_version : 1.15.2.2\n" +
+                        "creative_id : \n" +
+                        "platform_version : "+ Integer.toString(Build.VERSION.SDK_INT) +"\n" +
+                        "device_model : android\n" +
+                        "ad_unit_id : testAdUnit\n" +
+                        "device_locale : en_US\n" +
+                        "device_id : UDID\n" +
+                        "network_type : unknown\n" +
+                        "platform : android\n" +
+                        "timestamp : " + getCurrentDateTime() + "\n" +
+                        "ad_type : interstitial\n" +
+                        "ad_size : {480, 320}\n";
+
+        stub(mockClientMetadata.getSdkVersion()).toReturn("1.15.2.2");
+        stub(mockAdResponse.getDspCreativeId()).toReturn("");
+        stub(mockClientMetadata.getDeviceModel()).toReturn("android");
+        stub(mockClientMetadata.getDeviceLocale()).toReturn(Locale.US);
+        stub(mockClientMetadata.getDeviceId()).toReturn("UDID");
+        stub(mockAdResponse.getNetworkType()).toReturn("unknown");
+
+        stub(mockAdResponse.getTimestamp()).toReturn(now.getTime());
+        stub(mockAdResponse.getAdType()).toReturn("interstitial");
+        stub(mockAdResponse.getWidth()).toReturn(480);
+        stub(mockAdResponse.getHeight()).toReturn(320);
+
+        subject = new AdReport("testAdUnit", mockClientMetadata, mockAdResponse);
+        assertThat(subject.toString()).isEqualTo(expectedParameters);
+    }
+
+    @Test
+    public void constructor_shouldHandleInvalidAdConfigurationValues() throws Exception {
+        String expectedParameters =
+                "sdk_version : null\n" +
+                        "creative_id : null\n" +
+                        "platform_version : "+ Integer.toString(Build.VERSION.SDK_INT) +"\n" +
+                        "device_model : null\n" +
+                        "ad_unit_id : testAdUnit\n" +
+                        "device_locale : null\n" +
+                        "device_id : null\n" +
+                        "network_type : null\n" +
+                        "platform : android\n" +
+                        "timestamp : null" + "\n" +
+                        "ad_type : null\n" +
+                        "ad_size : {0, 0}\n";
+
+        stub(mockClientMetadata.getSdkVersion()).toReturn(null);
+        stub(mockAdResponse.getDspCreativeId()).toReturn(null);
+        stub(mockClientMetadata.getDeviceLocale()).toReturn(null);
+        stub(mockClientMetadata.getDeviceId()).toReturn(null);
+        stub(mockAdResponse.getNetworkType()).toReturn(null);
+
+        stub(mockAdResponse.getTimestamp()).toReturn(-1L);
+        stub(mockAdResponse.getAdType()).toReturn(null);
+        stub(mockAdResponse.getWidth()).toReturn(null);
+        stub(mockAdResponse.getHeight()).toReturn(null);
+
+        subject = new AdReport("testAdUnit", mockClientMetadata, mockAdResponse);
+        assertThat(subject.toString()).isEqualTo(expectedParameters);
+    }
+
+    private String getCurrentDateTime() {
+        SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yy hh:mm:ss a z", Locale.US);
+        return dateFormat.format(now);
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java b/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
index 0ad16203..025cd79d 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
@@ -1,12 +1,9 @@
 package com.mopub.common;
 
 import android.app.Activity;
-import android.graphics.Bitmap;
-import android.support.v4.util.LruCache;
 
 import com.mopub.common.test.support.SdkTestRunner;
 
-import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -58,18 +55,15 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
     }
 
     @Test
-    public void initializeCaches_withValidContext_shouldCreateNewCachesIdempotently() throws Exception {
+    public void initializeCache_withValidContext_shouldCreateNewCachesIdempotently() throws Exception {
         assertThat(CacheService.getDiskLruCache()).isNull();
 
         CacheService.initialize(context);
         DiskLruCache diskLruCache = CacheService.getDiskLruCache();
         assertThat(diskLruCache).isNotNull();
-        LruCache<String, Bitmap> memoryLruCache = CacheService.getBitmapLruCache();
-        assertThat(memoryLruCache).isNotNull();
 
         CacheService.initialize(context);
         assertThat(diskLruCache).isEqualTo(CacheService.getDiskLruCache());
-        assertThat(memoryLruCache).isEqualTo(CacheService.getBitmapLruCache());
     }
     
     @Test
@@ -158,8 +152,6 @@ public static void assertDiskCacheIsEmpty() {
     }
 
     public static void assertCachesAreEmpty() {
-        assertThat(CacheService.getBitmapLruCache()).isNotNull();
-        assertThat(CacheService.getBitmapLruCache().size()).isEqualTo(0);
         assertDiskCacheIsEmpty();
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java b/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
index a98a1cf0..ba6fcd75 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
@@ -67,6 +67,6 @@ public void testCachedData_shouldBeAvailable() {
         assertThat(clientMetadata.getIsoCountryCode()).isEqualTo("1");
 
         // Other cached data.
-        assertThat(clientMetadata.getAdvertisingId()).isNotNull().isNotEmpty();
+        assertThat(clientMetadata.getDeviceId()).isNotNull().isNotEmpty();
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
index a35aa96f..f5b8a175 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
@@ -300,7 +300,7 @@ private void safeAcquireSemaphore() throws Exception {
 
     static public void verifyClientMetadata(Context context, TestAdInfo adInfo) {
         ClientMetadata clientMetadata = ClientMetadata.getInstance(context);
-        assertThat(clientMetadata.getAdvertisingId()).isEqualTo("ifa:" + adInfo.getId());
+        assertThat(clientMetadata.getDeviceId()).isEqualTo("ifa:" + adInfo.getId());
         assertThat(clientMetadata.isDoNotTrackSet()).isEqualTo(adInfo.isLimitAdTrackingEnabled());
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/HttpClientTest.java b/mopub-sdk/src/test/java/com/mopub/common/HttpClientTest.java
index b81a6252..c00f14fb 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/HttpClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/HttpClientTest.java
@@ -4,7 +4,6 @@
 import android.webkit.WebView;
 
 import com.mopub.common.util.ResponseHeader;
-import com.mopub.common.util.test.support.CommonUtils;
 
 import org.apache.http.HttpRequest;
 import org.apache.http.client.methods.HttpGet;
@@ -19,6 +18,7 @@
 
 import static com.mopub.common.HttpClient.getWebViewUserAgent;
 import static com.mopub.common.HttpClient.initializeHttpGet;
+import static com.mopub.common.HttpClient.urlEncode;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(RobolectricTestRunner.class)
@@ -29,7 +29,7 @@
 
     @Before
     public void setup() {
-        context = new Activity();
+        context = Robolectric.buildActivity(Activity.class).create().get();
         userAgent = new WebView(context).getSettings().getUserAgentString();
 
         Robolectric.addHttpResponseRule(new RequestMatcher() {
@@ -69,50 +69,86 @@ public void initializeHttpGet_shouldPopulateStaticWebViewUserAgent() throws Exce
     }
 
     @Test
-    public void getWebViewUserAgent_whenUserAgentNotSet_shouldReturnDefault() {
-        assertThat(getWebViewUserAgent("test")).isEqualTo("test");
+    public void initializeHttpGet_withNullContext_shouldNotSetUserAgent() throws Exception {
+        HttpGet httpGet = initializeHttpGet("http://www.mopub.com/");
+        assertThat(httpGet.getFirstHeader(ResponseHeader.USER_AGENT.getKey())).isNull();
     }
 
-    @Test(expected = NullPointerException.class)
-    public void initializeHttpGet_withNullUrl_shouldThrowNullPointerException() throws Exception {
-        HttpGet httpGet = initializeHttpGet(null, context);
+    @Test
+    public void initializeHttpGet_shouldProperlyEncodeUrl() throws Exception {
+        HttpGet httpGet = initializeHttpGet("http://host:80/doc|search?q=green robots#over 6\"");
+        assertThat(httpGet.getURI().toString())
+                .isEqualTo("http://host:80/doc%7Csearch?q=green%20robots#over%206%22");
     }
 
-    @Test
-    public void initializeHttpGet_withNullContext_shouldNotPopulateUserAgentHeader() throws Exception {
-        HttpGet httpGet = initializeHttpGet(url, null);
+    @Test(expected = IllegalArgumentException.class)
+    public void initializeHttpGet_withImproperlyEncodedUrl_shouldThrowIllegalArgumentException() throws Exception {
+        initializeHttpGet("http://user:passwrd@host:80/doc%7ZZZC");
+    }
 
-        assertThat(httpGet.getURI().toURL().toString()).isEqualTo(url);
-        assertThat(httpGet.getFirstHeader(ResponseHeader.USER_AGENT.getKey())).isNull();
+    @Test(expected = IllegalArgumentException.class)
+    public void initializeHttpGet_withMalformedUrl_shouldThrowIllegalArgumentException() throws Exception {
+        initializeHttpGet("bad://host:80/doc|search?q=green robots#over 6\"");
     }
 
     @Test
-    public void makeTrackingHttpRequest_shouldMakeTrackingHttpRequestWithWebViewUserAgent() throws Exception {
-        HttpClient.makeTrackingHttpRequest(url, context);
+    public void urlEncode_shouldProperlyEncodeUrls() throws Exception {
+        // Example url borrowed from: http://developer.android.com/reference/java/net/URI.html
+        assertThat(urlEncode("http://user:passwrd@host:80/doc|search?q=green robots#over 6\""))
+                .isEqualTo("http://user:passwrd@host:80/doc%7Csearch?q=green%20robots#over%206%22");
 
-        Robolectric.getBackgroundScheduler().unPause();
-        Thread.sleep(500);
+        assertThat(urlEncode("http://www.example.com/?key=value\"\"&key2=value2?"))
+                .isEqualTo("http://www.example.com/?key=value%22%22&key2=value2?");
 
-        CommonUtils.assertHttpRequestsMade(userAgent, url);
+        assertThat(urlEncode("http://user:passwrd@host:80/doc?q=green#robots"))
+                .isEqualTo("http://user:passwrd@host:80/doc?q=green#robots");
+
+        assertThat(urlEncode("http://rtr.innovid.com/r1.5460f51c393410.96367393;cb=[timestamp]"))
+                .isEqualTo("http://rtr.innovid.com/r1.5460f51c393410.96367393;cb=%5Btimestamp%5D");
     }
 
     @Test
-    public void makeTrackingHttpRequest_withNullUrl_shouldNotMakeTrackingHttpRequest() throws Exception {
-        HttpClient.makeTrackingHttpRequest((String) null, context);
+    public void urlEncode_withProperlyEncodedUrl_shouldReturnUrlWithSameEncoding() throws Exception {
+        assertThat(urlEncode("http://user:passwrd@host:80/doc%7Csearch?q=green%20robots#over%206%22"))
+                .isEqualTo("http://user:passwrd@host:80/doc%7Csearch?q=green%20robots#over%206%22");
 
-        Robolectric.getBackgroundScheduler().unPause();
-        Thread.sleep(500);
+        assertThat(urlEncode("https://www.mywebsite.com%2Fd+ocs%2Fenglish%2Fsite%2Fmybook.do%3Fkey%3Dvalue%3B%23fragment"))
+                .isEqualTo("https://www.mywebsite.com%2Fd+ocs%2Fenglish%2Fsite%2Fmybook.do%3Fkey%3Dvalue%3B%23fragment");
+    }
 
-        CommonUtils.assertHttpRequestsMade(null);
+    @Test(expected = Exception.class)
+    public void urlEncode_withImproperlyEncodedUrl_shouldThowException() throws Exception {
+        urlEncode("http://user:passwrd@host:80/doc%7ZZZC");
+    }
+
+
+    @Test(expected = Exception.class)
+    public void urlEncode_withImproperlyEncodedUrlScheme_shouldThowException() throws Exception {
+        // From: http://developer.android.com/reference/java/net/URI.html
+        // A URI's host, port and scheme are not eligible for encoding and must not contain illegal characters.
+        urlEncode("https%3A%2F%2Fwww.mywebsite.com%2Fdocs%2Fenglish%2Fsite%2Fmybook.do%3Fkey%3Dvalue%3B%23fragment");
+    }
+
+    @Test(expected = Exception.class)
+    public void urlEncode_withMalformedUrl_shouldThrowException() throws Exception {
+        urlEncode("derp://www.mopub.com/");
     }
 
     @Test
-    public void makeTrackingHttpRequest_withNullContext_shouldNotMakeTrackingHttpRequest() throws Exception {
-        HttpClient.makeTrackingHttpRequest(url, null);
+    public void getWebViewUserAgent_whenUserAgentNotSet_shouldReturnDefault() {
+        assertThat(getWebViewUserAgent("test")).isEqualTo("test");
+    }
 
-        Robolectric.getBackgroundScheduler().unPause();
-        Thread.sleep(500);
+    @Test(expected = NullPointerException.class)
+    public void initializeHttpGet_withNullUrl_shouldThrowNullPointerException() throws Exception {
+        initializeHttpGet(null, context);
+    }
 
-        CommonUtils.assertHttpRequestsMade(null);
+    @Test
+    public void initializeHttpGet_withNullContext_shouldNotPopulateUserAgentHeader() throws Exception {
+        HttpGet httpGet = initializeHttpGet(url, null);
+
+        assertThat(httpGet.getURI().toURL().toString()).isEqualTo(url);
+        assertThat(httpGet.getFirstHeader(ResponseHeader.USER_AGENT.getKey())).isNull();
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/VolleyRequestMatcher.java b/mopub-sdk/src/test/java/com/mopub/common/VolleyRequestMatcher.java
new file mode 100644
index 00000000..8afeb57d
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/VolleyRequestMatcher.java
@@ -0,0 +1,33 @@
+package com.mopub.common;
+
+import android.support.annotation.Nullable;
+
+import com.mopub.volley.Request;
+
+import org.mockito.ArgumentMatcher;
+
+/**
+ * A Mockito Request Matcher, used in tests to allow verifying that Volley Requests match a given
+ * url.
+ *
+ * "verify(mock).add(argThat(VolleyRequestMatcher.isUrl("testUrl")));"
+ */
+public class VolleyRequestMatcher extends ArgumentMatcher<Request> {
+
+     @Nullable private final String mUrl;
+
+     private VolleyRequestMatcher(@Nullable final String url) {
+         mUrl = url;
+     }
+
+     public static VolleyRequestMatcher isUrl(@Nullable String url) {
+         return new VolleyRequestMatcher(url);
+     }
+
+     @Override
+     public boolean matches(final Object that) {
+         return that instanceof Request
+                 && ((this.mUrl == null && ((Request) that).getUrl() == null)
+                    || ((Request) that).getUrl().equals(mUrl));
+     }
+ }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
index 6fcd2c35..7c03ac03 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
@@ -11,7 +11,6 @@
 import com.mopub.common.util.test.support.ShadowAsyncTasks;
 import com.mopub.common.util.test.support.TestDateAndTime;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
-import com.mopub.mobileads.factories.AdFetcherFactory;
 import com.mopub.mobileads.factories.AdViewControllerFactory;
 import com.mopub.mobileads.factories.CustomEventBannerAdapterFactory;
 import com.mopub.mobileads.factories.CustomEventBannerFactory;
@@ -24,8 +23,6 @@
 import com.mopub.mobileads.factories.MraidControllerFactory;
 import com.mopub.mobileads.factories.VastManagerFactory;
 import com.mopub.mobileads.factories.VastVideoDownloadTaskFactory;
-import com.mopub.mobileads.factories.ViewGestureDetectorFactory;
-import com.mopub.mobileads.test.support.TestAdFetcherFactory;
 import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
 import com.mopub.mobileads.test.support.TestCustomEventBannerAdapterFactory;
 import com.mopub.mobileads.test.support.TestCustomEventBannerFactory;
@@ -38,7 +35,6 @@
 import com.mopub.mobileads.test.support.TestMraidControllerFactory;
 import com.mopub.mobileads.test.support.TestVastManagerFactory;
 import com.mopub.mobileads.test.support.TestVastVideoDownloadTaskFactory;
-import com.mopub.mobileads.test.support.TestViewGestureDetectorFactory;
 import com.mopub.nativeads.factories.CustomEventNativeFactory;
 import com.mopub.nativeads.test.support.TestCustomEventNativeFactory;
 
@@ -82,7 +78,6 @@ public boolean shouldInstrument(ClassInfo classInfo) {
         public void prepareTest(Object test) {
             ClientMetadata.clearForTesting();
 
-            AdFetcherFactory.setInstance(new TestAdFetcherFactory());
             HttpClientFactory.setInstance(new TestHttpClientFactory());
             DateAndTime.setInstance(new TestDateAndTime());
             CustomEventBannerFactory.setInstance(new TestCustomEventBannerFactory());
@@ -93,7 +88,6 @@ public void prepareTest(Object test) {
             HtmlBannerWebViewFactory.setInstance(new TestHtmlBannerWebViewFactory());
             HtmlInterstitialWebViewFactory.setInstance(new TestHtmlInterstitialWebViewFactory());
             AdViewControllerFactory.setInstance(new TestAdViewControllerFactory());
-            ViewGestureDetectorFactory.setInstance(new TestViewGestureDetectorFactory());
             VastManagerFactory.setInstance(new TestVastManagerFactory());
             VastVideoDownloadTaskFactory.setInstance(new TestVastVideoDownloadTaskFactory());
             MethodBuilderFactory.setInstance(new TestMethodBuilderFactory());
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/FilesTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/FilesTest.java
index ca2e55c0..0b65e22e 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/FilesTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/FilesTest.java
@@ -8,7 +8,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import java.io.*;
+import java.io.File;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/IntentUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
similarity index 53%
rename from mopub-sdk/src/test/java/com/mopub/common/util/IntentUtilsTest.java
rename to mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
index 2630da5e..ee879eae 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/IntentUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
@@ -9,15 +9,17 @@
 import android.os.Bundle;
 
 import com.mopub.common.MoPubBrowser;
+import com.mopub.exceptions.IntentNotResolvableException;
+import com.mopub.exceptions.UrlParseException;
 
+import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
 
 import java.util.ArrayList;
-import java.util.HashSet;
 import java.util.List;
-import java.util.Set;
 
 import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -26,12 +28,29 @@
 import static org.mockito.Mockito.stub;
 
 @RunWith(RobolectricTestRunner.class)
-public class IntentUtilsTest {
+public class IntentsTest {
+    private Activity activityContext;
+    private Context applicationContext;
+
+    @Before
+    public void setUp() {
+        activityContext = Robolectric.buildActivity(Activity.class).create().get();
+        applicationContext = activityContext.getApplicationContext();
+    }
+
+    @Test
+    public void startActivity_withActivityContext_shouldStartActivityWithNoNewFlags() throws IntentNotResolvableException {
+        Intents.startActivity(activityContext, new Intent());
+
+        final Intent intent = Robolectric.getShadowApplication().peekNextStartedActivity();
+        assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), FLAG_ACTIVITY_NEW_TASK)).isFalse();
+    }
+
     @Test
     public void getStartActivityIntent_withActivityContext_shouldReturnIntentWithoutNewTaskFlag() throws Exception {
         Context context = new Activity();
 
-        final Intent intent = IntentUtils.getStartActivityIntent(context, MoPubBrowser.class, null);
+        final Intent intent = Intents.getStartActivityIntent(context, MoPubBrowser.class, null);
 
         assertThat(intent.getComponent().getClassName()).isEqualTo(MoPubBrowser.class.getName());
         assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), FLAG_ACTIVITY_NEW_TASK)).isFalse();
@@ -42,7 +61,7 @@ public void getStartActivityIntent_withActivityContext_shouldReturnIntentWithout
     public void getStartActivityIntent_withApplicationContext_shouldReturnIntentWithNewTaskFlag() throws Exception {
         Context context = new Activity().getApplicationContext();
 
-        final Intent intent = IntentUtils.getStartActivityIntent(context, MoPubBrowser.class, null);
+        final Intent intent = Intents.getStartActivityIntent(context, MoPubBrowser.class, null);
 
         assertThat(intent.getComponent().getClassName()).isEqualTo(MoPubBrowser.class.getName());
         assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), FLAG_ACTIVITY_NEW_TASK)).isTrue();
@@ -55,7 +74,7 @@ public void getStartActivityIntent_withBundle_shouldReturnIntentWithExtras() thr
         Bundle bundle = new Bundle();
         bundle.putString("arbitrary key", "even more arbitrary value");
 
-        final Intent intent = IntentUtils.getStartActivityIntent(context, MoPubBrowser.class, bundle);
+        final Intent intent = Intents.getStartActivityIntent(context, MoPubBrowser.class, bundle);
 
         assertThat(intent.getComponent().getClassName()).isEqualTo(MoPubBrowser.class.getName());
         assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), FLAG_ACTIVITY_NEW_TASK)).isFalse();
@@ -76,7 +95,7 @@ public void deviceCanHandleIntent_whenActivityCanResolveIntent_shouldReturnTrue(
 
         stub(packageManager.queryIntentActivities(eq(specificIntent), eq(0))).toReturn(resolveInfos);
 
-        assertThat(IntentUtils.deviceCanHandleIntent(context, specificIntent)).isTrue();
+        assertThat(Intents.deviceCanHandleIntent(context, specificIntent)).isTrue();
     }
 
     @Test
@@ -95,19 +114,38 @@ public void deviceCanHandleIntent_whenActivityCanNotResolveIntent_shouldReturnFa
         otherIntent.setData(Uri.parse("other:"));
         stub(packageManager.queryIntentActivities(eq(specificIntent), eq(0))).toReturn(resolveInfos);
 
-        assertThat(IntentUtils.deviceCanHandleIntent(context, otherIntent)).isFalse();
+        assertThat(Intents.deviceCanHandleIntent(context, otherIntent)).isFalse();
     }
 
     @Test
-    public void generateUniqueId_withMultipleInvocations_shouldReturnUniqueValues() throws Exception {
-        final int expectedIdCount = 100;
+    public void intentForNativeBrowserScheme_shouldProperlyHandleEncodedUrls() throws UrlParseException {
+        Intent intent;
 
-        Set<Long> ids = new HashSet<Long>(expectedIdCount);
-        for (int i = 0; i < expectedIdCount; i++) {
-            final long id = Utils.generateUniqueId();
-            ids.add(id);
-        }
+        intent = Intents.intentForNativeBrowserScheme("mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.example.com");
+        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
+        assertThat(intent.getDataString()).isEqualTo("http://www.example.com");
+
+        intent = Intents.intentForNativeBrowserScheme("mopubnativebrowser://navigate?url=http://www.example.com/?query=1&two=2");
+        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
+        assertThat(intent.getDataString()).isEqualTo("http://www.example.com/?query=1");
+
+        intent = Intents.intentForNativeBrowserScheme("mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.example.com%2F%3Fquery%3D1%26two%3D2");
+        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
+        assertThat(intent.getDataString()).isEqualTo("http://www.example.com/?query=1&two=2");
+    }
+
+    @Test(expected = UrlParseException.class)
+    public void intentForNativeBrowserScheme_whenNotMoPubNativeBrowser_shouldThrowException() throws UrlParseException {
+        Intents.intentForNativeBrowserScheme("mailto://navigate?url=http://www.example.com");
+    }
+
+    @Test(expected = UrlParseException.class)
+    public void intentForNativeBrowserScheme_whenNotNavigate_shouldThrowException() throws UrlParseException {
+        Intents.intentForNativeBrowserScheme("mopubnativebrowser://getout?url=http://www.example.com");
+    }
 
-        assertThat(ids).hasSize(expectedIdCount);
+    @Test(expected = UrlParseException.class)
+    public void intentForNativeBrowserScheme_whenUrlParameterMissing_shouldThrowException() throws UrlParseException {
+        Intents.intentForNativeBrowserScheme("mopubnativebrowser://navigate");
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/UtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/UtilsTest.java
new file mode 100644
index 00000000..384e40b8
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/UtilsTest.java
@@ -0,0 +1,27 @@
+package com.mopub.common.util;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import java.util.HashSet;
+import java.util.Set;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class UtilsTest {
+    @Test
+    public void generateUniqueId_withMultipleInvocations_shouldReturnUniqueValues() throws Exception {
+        final int expectedIdCount = 100;
+
+        Set<Long> ids = new HashSet<Long>(expectedIdCount);
+        for (int i = 0; i < expectedIdCount; i++) {
+            final long id = Utils.generateUniqueId();
+            ids.add(id);
+        }
+
+        assertThat(ids).hasSize(expectedIdCount);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
index 961ee9c0..09ae4f1d 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
@@ -4,12 +4,14 @@
 import android.view.MotionEvent;
 import android.view.View;
 
+import com.mopub.common.AdReport;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.GestureUtils;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mock;
 
 import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.FAILED;
 import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.FINISHED;
@@ -17,13 +19,14 @@
 import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.GOING_RIGHT;
 import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.UNSET;
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.stub;
 
 @RunWith(SdkTestRunner.class)
 public class AdAlertGestureListenerTest {
-
-    private View view;
+    @Mock
+    private View mockView;
+    @Mock
+    private AdReport mockAdReport;
     private AdAlertGestureListener subject;
     private float threshold;
     private static final float INITIAL_X = 20;
@@ -31,17 +34,14 @@
     private float savedX;
     private float savedY;
     private MotionEvent actionDown;
-    private AdConfiguration adConfiguration;
-    private Context context;
+    @Mock
+    private Context mockContext;
 
     @Before
     public void setup() {
-        view = mock(View.class);
-        adConfiguration = mock(AdConfiguration.class);
-        context = mock(Context.class);
-        stub(view.getContext()).toReturn(context);
+        stub(mockView.getContext()).toReturn(mockContext);
 
-        subject = new AdAlertGestureListener(view, adConfiguration);
+        subject = new AdAlertGestureListener(mockView, mockAdReport);
 
         savedX = INITIAL_X;
         savedY = INITIAL_Y;
@@ -52,22 +52,22 @@ public void setup() {
 
     @Test
     public void constructor_shouldSetThresholdToOneThirdOfViewsWidth() throws Exception {
-        stub(view.getWidth()).toReturn(150);
-        subject = new AdAlertGestureListener(view, adConfiguration);
+        stub(mockView.getWidth()).toReturn(150);
+        subject = new AdAlertGestureListener(mockView, mockAdReport);
         assertThat(subject.getMinimumDipsInZigZag()).isEqualTo(50);
     }
 
     @Test
     public void constructor_whenViewWidthIsWiderThanThreeTimesMaxThreshold_shouldSetThresholdTo100() throws Exception {
-        stub(view.getWidth()).toReturn(500);
-        subject = new AdAlertGestureListener(view, adConfiguration);
+        stub(mockView.getWidth()).toReturn(500);
+        subject = new AdAlertGestureListener(mockView, mockAdReport);
         assertThat(subject.getMinimumDipsInZigZag()).isEqualTo(100);
     }
 
     @Test
     public void constructor_whenViewWidthIs0_shouldSetThresholdTo100() throws Exception {
-        stub(view.getWidth()).toReturn(0);
-        subject = new AdAlertGestureListener(view, adConfiguration);
+        stub(mockView.getWidth()).toReturn(0);
+        subject = new AdAlertGestureListener(mockView, mockAdReport);
         assertThat(subject.getMinimumDipsInZigZag()).isEqualTo(100);
     }
 
@@ -114,7 +114,7 @@ public void onScroll_withInitialLeftThenRightMovement_BeforeZigCompletes_MovesOu
         assertZigZagState(GOING_RIGHT);
         assertThat(subject.getNumberOfZigzags()).isEqualTo(0);
 
-        simulateScroll(savedX, INITIAL_Y + 52);
+        simulateScroll(savedX, INITIAL_Y + 102);
         assertZigZagState(FAILED);
     }
 
@@ -130,7 +130,7 @@ public void onScroll_withInitialLeftThenRightMovement_BeforeZigCompletes_MovesOu
         assertZigZagState(GOING_RIGHT);
         assertThat(subject.getNumberOfZigzags()).isEqualTo(0);
 
-        simulateScroll(savedX, INITIAL_Y - 51);
+        simulateScroll(savedX, INITIAL_Y - 101);
         assertZigZagState(FAILED);
     }
 
@@ -145,7 +145,7 @@ public void onScroll_withZigZagZigZagZigZagZig_BeforeNextZagCompletes_MovesOutOf
         assertZigZagState(GOING_RIGHT);
         assertThat(subject.getNumberOfZigzags()).isEqualTo(3);
 
-        simulateScroll(savedX, INITIAL_Y + 51);
+        simulateScroll(savedX, INITIAL_Y + 101);
         assertZigZagState(FAILED);
     }
 
@@ -160,14 +160,14 @@ public void onScroll_withZigZagZigZagZigZagZig_BeforeNextZagCompletes_MovesOutOf
         assertZigZagState(GOING_LEFT);
         assertThat(subject.getNumberOfZigzags()).isEqualTo(3);
 
-        simulateScroll(savedX, INITIAL_Y - 51);
+        simulateScroll(savedX, INITIAL_Y - 101);
         assertZigZagState(FAILED);
     }
 
     @Test
     public void onScroll_withStateFailed_withAnyMotion_shouldStayFailed() throws Exception {
         simulateScroll(savedX, INITIAL_Y + 49);
-        simulateScroll(savedX, INITIAL_Y + 51);
+        simulateScroll(savedX, INITIAL_Y + 101);
         assertZigZagState(FAILED);
 
         performZigZag();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
index 907e4077..89cf32d8 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
@@ -8,6 +8,7 @@
 import android.view.View;
 import android.widget.TextView;
 
+import com.mopub.common.AdReport;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.test.support.TestDateAndTime;
 
@@ -15,6 +16,7 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mock;
 import org.robolectric.Robolectric;
 
 import java.io.File;
@@ -27,15 +29,21 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
 public class AdAlertReporterTest {
     private final static String EMAIL_ADDRESS = "creative-review@mopub.com";
     private AdAlertReporter subject;
-    private Context context;
-    private View view;
-    private AdConfiguration adConfiguration;
+    @Mock
+    private AdReport mockAdReport;
+    @Mock
+    private Context mockContext;
+    @Mock
+    private View mockView;
     private Intent emailIntent;
     private Bitmap bitmap;
     private ArrayList<Uri> emailAttachments;
@@ -43,15 +51,10 @@
 
     @Before
     public void setup() {
-        context = mock(Context.class);
-
         bitmap = Bitmap.createBitmap(10, 10, Bitmap.Config.ARGB_8888);
 
-        view = mock(View.class);
-        stub(view.getRootView()).toReturn(view);
-        stub(view.getDrawingCache()).toReturn(bitmap);
-
-        adConfiguration = mock(AdConfiguration.class);
+        stub(mockView.getRootView()).toReturn(mockView);
+        stub(mockView.getDrawingCache()).toReturn(bitmap);
 
         now = new Date();
         TestDateAndTime.getInstance().setNow(now);
@@ -59,7 +62,7 @@ public void setup() {
 
     @Test
     public void constructor_shouldCreateSendToIntentWithEmailAddress() throws Exception {
-        subject = new AdAlertReporter(context, view, adConfiguration);
+        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
         emailIntent = subject.getEmailIntent();
 
         assertThat(emailIntent.getAction()).isEqualTo(Intent.ACTION_SEND_MULTIPLE);
@@ -70,7 +73,7 @@ public void constructor_shouldCreateSendToIntentWithEmailAddress() throws Except
 
     @Test
     public void constructor_shouldCreateIntentWithDatestampInSubject() throws Exception {
-        subject = new AdAlertReporter(context, view, adConfiguration);
+        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
         emailIntent = subject.getEmailIntent();
 
         String emailSubject = emailIntent.getStringExtra(Intent.EXTRA_SUBJECT);
@@ -92,23 +95,11 @@ public void constructor_shouldCreateIntentWithImageStringAndParametersAndRespons
         TextView textView = mock(TextView.class);
         Bitmap sampleBitmap = Bitmap.createBitmap(10, 10, Bitmap.Config.ALPHA_8);
         stub(textView.getDrawingCache()).toReturn(sampleBitmap);
-        stub(view.getRootView()).toReturn(textView);
-
-        stub(adConfiguration.getResponseString()).toReturn("<html>a valid response</html>");
-        stub(adConfiguration.getDspCreativeId()).toReturn("");
-        stub(adConfiguration.getPlatformVersion()).toReturn(1);
-        stub(adConfiguration.getDeviceModel()).toReturn("android");
-        stub(adConfiguration.getAdUnitId()).toReturn("abc");
-        stub(adConfiguration.getDeviceLocale()).toReturn("US");
-        stub(adConfiguration.getHashedUdid()).toReturn("UDID");
-        stub(adConfiguration.getNetworkType()).toReturn("unknown");
-        stub(adConfiguration.getPlatform()).toReturn("android");
-        stub(adConfiguration.getTimeStamp()).toReturn(now.getTime());
-        stub(adConfiguration.getAdType()).toReturn("interstitial");
-        stub(adConfiguration.getWidth()).toReturn(480);
-        stub(adConfiguration.getHeight()).toReturn(320);
-
-        subject = new AdAlertReporter(context, view, adConfiguration);
+        stub(mockView.getRootView()).toReturn(textView);
+
+        stub(mockAdReport.toString()).toReturn("Ad Report data - this is a long list of newlined params.");
+        stub(mockAdReport.getResponseString()).toReturn("Test ad string.");
+        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
 
         emailIntent = subject.getEmailIntent();
         String emailSubject = emailIntent.getStringExtra(Intent.EXTRA_TEXT);
@@ -126,9 +117,9 @@ public void constructor_shouldCreateIntentWithImageStringAndParametersAndRespons
 
     @Test
     public void constructor_shouldAddBitmapToAttachmentArray() throws Exception {
-        stub(context.getFilesDir()).toReturn(new File("filesDir"));
-        stub(context.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
-        subject = new AdAlertReporter(context, view, adConfiguration);
+        stub(mockContext.getFilesDir()).toReturn(new File("filesDir"));
+        stub(mockContext.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
+        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
 
         emailAttachments = subject.getEmailAttachments();
         Uri fileUri = Uri.fromFile(new File("filesDir/mp_adalert_screenshot.png"));
@@ -138,9 +129,9 @@ public void constructor_shouldAddBitmapToAttachmentArray() throws Exception {
 
     @Test
     public void constructor_shouldAddParametersTextFileToAttachmentArray() throws Exception {
-        stub(context.getFilesDir()).toReturn(new File("filesDir"));
-        stub(context.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
-        subject = new AdAlertReporter(context, view, adConfiguration);
+        stub(mockContext.getFilesDir()).toReturn(new File("filesDir"));
+        stub(mockContext.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
+        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
 
         emailAttachments = subject.getEmailAttachments();
         Uri fileUri = Uri.fromFile(new File("filesDir/mp_adalert_parameters.txt"));
@@ -149,100 +140,29 @@ public void constructor_shouldAddParametersTextFileToAttachmentArray() throws Ex
     }
 
     @Test
-    public void constructor_shouldProperlyConstructParametersTextFile() throws Exception {
-        String expectedParameters =
-                "sdk_version : 1.15.2.2\n" +
-                "creative_id : \n" +
-                "platform_version : 1\n" +
-                "device_model : android\n" +
-                "ad_unit_id : abc\n" +
-                "device_locale : US\n" +
-                "device_id : UDID\n" +
-                "network_type : unknown\n" +
-                "platform : android\n" +
-                "timestamp : " + getCurrentDateTime() + "\n" +
-                "ad_type : interstitial\n" +
-                "ad_size : {480, 320}\n";
-
-        stub(adConfiguration.getSdkVersion()).toReturn("1.15.2.2");
-        stub(adConfiguration.getDspCreativeId()).toReturn("");
-        stub(adConfiguration.getPlatformVersion()).toReturn(1);
-        stub(adConfiguration.getDeviceModel()).toReturn("android");
-        stub(adConfiguration.getAdUnitId()).toReturn("abc");
-        stub(adConfiguration.getDeviceLocale()).toReturn("US");
-        stub(adConfiguration.getHashedUdid()).toReturn("UDID");
-        stub(adConfiguration.getNetworkType()).toReturn("unknown");
-        stub(adConfiguration.getPlatform()).toReturn("android");
-        stub(adConfiguration.getTimeStamp()).toReturn(now.getTime());
-        stub(adConfiguration.getAdType()).toReturn("interstitial");
-        stub(adConfiguration.getWidth()).toReturn(480);
-        stub(adConfiguration.getHeight()).toReturn(320);
-
-        subject = new AdAlertReporter(context, view, adConfiguration);
-
-        assertThat(subject.getParameters()).isEqualTo(expectedParameters);
-    }
-
-    @Test
-    public void constructor_withInvalidAdConfigurationValues_shouldReturnSomethingSensible() throws Exception {
-        String expectedParameters =
-                "sdk_version : null\n" +
-                "creative_id : null\n" +
-                "platform_version : -1\n" +
-                "device_model : null\n" +
-                "ad_unit_id : null\n" +
-                "device_locale : null\n" +
-                "device_id : null\n" +
-                "network_type : null\n" +
-                "platform : null\n" +
-                "timestamp : null" + "\n" +
-                "ad_type : null\n" +
-                "ad_size : {-1, -1}\n";
-
-        stub(adConfiguration.getSdkVersion()).toReturn(null);
-        stub(adConfiguration.getDspCreativeId()).toReturn(null);
-        stub(adConfiguration.getPlatformVersion()).toReturn(-1);
-        stub(adConfiguration.getDeviceModel()).toReturn(null);
-        stub(adConfiguration.getAdUnitId()).toReturn(null);
-        stub(adConfiguration.getDeviceLocale()).toReturn(null);
-        stub(adConfiguration.getHashedUdid()).toReturn(null);
-        stub(adConfiguration.getNetworkType()).toReturn(null);
-        stub(adConfiguration.getPlatform()).toReturn(null);
-        stub(adConfiguration.getTimeStamp()).toReturn(-1l);
-        stub(adConfiguration.getAdType()).toReturn(null);
-        stub(adConfiguration.getWidth()).toReturn(-1);
-        stub(adConfiguration.getHeight()).toReturn(-1);
-
-        subject = new AdAlertReporter(context, view, adConfiguration);
-
-        assertThat(subject.getParameters()).isEqualTo(expectedParameters);
-    }
-
-    @Test
-    public void constructor_whenAdConfigurationIsNull_shouldReturnEmptyString() throws Exception {
-        subject = new AdAlertReporter(context, view, null);
+    public void constructor_whenAdReportIsNull_shouldReturnEmptyString() throws Exception {
+        subject = new AdAlertReporter(mockContext, mockView, null);
 
         assertThat(subject.getParameters()).isEmpty();
         assertThat(subject.getResponse()).isEmpty();
     }
 
     @Test
-    public void constructor_shouldReturnCorrectResponseString() throws Exception {
+    public void constructor_shouldSetCorrectResponseString() throws Exception {
         String expectedResponse = "response";
 
-        stub(adConfiguration.getResponseString()).toReturn(expectedResponse);
-        subject = new AdAlertReporter(context, view, adConfiguration);
+        stub(mockAdReport.getResponseString()).toReturn(expectedResponse);
+        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
 
         assertThat(subject.getResponse()).isEqualTo(expectedResponse);
     }
 
     @Test
     public void constructor_shouldAddMarkupTextFileToAttachmentArray() throws Exception {
-        stub(adConfiguration.getResponseString()).toReturn(" ");
-
-        stub(context.getFilesDir()).toReturn(new File("filesDir"));
-        stub(context.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
-        subject = new AdAlertReporter(context, view, adConfiguration);
+        stub(mockAdReport.getResponseString()).toReturn("anything!");
+        stub(mockContext.getFilesDir()).toReturn(new File("filesDir"));
+        stub(mockContext.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
+        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
 
         emailAttachments = subject.getEmailAttachments();
         Uri fileUri = Uri.fromFile(new File("filesDir/mp_adalert_markup.html"));
@@ -252,11 +172,10 @@ public void constructor_shouldAddMarkupTextFileToAttachmentArray() throws Except
 
     @Test
     public void send_shouldAddAttachmentsToIntent() throws Exception {
-        stub(adConfiguration.getResponseString()).toReturn("response!");
-        stub(context.getFilesDir()).toReturn(new File("filesDir"));
-        stub(context.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
-
-        subject = new AdAlertReporter(context, view, adConfiguration);
+        stub(mockContext.getFilesDir()).toReturn(new File("filesDir"));
+        stub(mockContext.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
+        stub(mockAdReport.getResponseString()).toReturn("anything!");
+        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
         subject.send();
 
         emailIntent = subject.getEmailIntent();
@@ -270,9 +189,8 @@ public void send_shouldAddAttachmentsToIntent() throws Exception {
 
     @Test
     public void send_shouldCreateEmailChooserIntent() throws Exception {
-        stub(adConfiguration.getResponseString()).toReturn("response!");
 
-        subject = new AdAlertReporter(new Activity(), view, adConfiguration);
+        subject = new AdAlertReporter(Robolectric.buildActivity(Activity.class).create().get(), mockView, mockAdReport);
         subject.send();
 
         Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
@@ -284,55 +202,49 @@ public void send_shouldCreateEmailChooserIntent() throws Exception {
     @Ignore("pending")
     @Test
     public void getScreenshot_whenIsDrawingCacheEnabled_shouldKeepDrawingCacheEnabled() throws Exception {
-//        reset(view);
-//        stub(view.getRootView()).toReturn(view);
-//        stub(view.isDrawingCacheEnabled()).toReturn(true);
-//
-//        subject = new AdAlertReporter(context, view, adConfiguration);
-//
-//        verify(view, never()).setDrawingCacheEnabled(false);
+        reset(mockView);
+        stub(mockView.getRootView()).toReturn(mockView);
+        stub(mockView.isDrawingCacheEnabled()).toReturn(true);
+
+        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
+
+        verify(mockView, never()).setDrawingCacheEnabled(false);
     }
 
     @Ignore("pending")
     @Test
     public void getScreenshot_whenIsDrawingCacheDisabled_shouldKeepDrawingCacheDisabled() throws Exception {
-//        reset(view);
-//        stub(view.getRootView()).toReturn(view);
-//        stub(view.isDrawingCacheEnabled()).toReturn(false);
-//
-//        subject = new AdAlertReporter(context, view, adConfiguration);
-//
-//        verify(view).setDrawingCacheEnabled(false);
+        reset(mockView);
+        stub(mockView.getRootView()).toReturn(mockView);
+        stub(mockView.isDrawingCacheEnabled()).toReturn(false);
+
+        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
+
+        verify(mockView).setDrawingCacheEnabled(false);
     }
 
     @Test
     public void getScreenshot_whenViewIsNull_shouldPass() throws Exception {
-        subject = new AdAlertReporter(context, null, adConfiguration);
+        subject = new AdAlertReporter(mockContext, null, mockAdReport);
 
         // pass
     }
 
     @Test
     public void getScreenshot_whenRootViewIsNull_shouldPass() throws Exception {
-        stub(view.getRootView()).toReturn(null);
+        stub(mockView.getRootView()).toReturn(null);
 
-        subject = new AdAlertReporter(context, view, adConfiguration);
+        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
 
         // pass
     }
 
     @Test
     public void getScreenshot_whenRootViewDrawingCacheIsNull_shouldPass() throws Exception {
-        stub(view.getDrawingCache()).toReturn(null);
+        stub(mockView.getDrawingCache()).toReturn(null);
 
-        subject = new AdAlertReporter(context, view, adConfiguration);
+        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
 
         // pass
     }
-
-    private String getCurrentDateTime() {
-        SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yy hh:mm:ss a z", Locale.US);
-        return dateFormat.format(now);
-    }
 }
-
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdConfigurationTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdConfigurationTest.java
deleted file mode 100644
index 213bc956..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdConfigurationTest.java
+++ /dev/null
@@ -1,277 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.os.Build;
-
-import com.mopub.common.MoPub;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.test.support.TestDateAndTime;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-
-import java.util.*;
-
-import static com.mopub.mobileads.AdViewController.MINIMUM_REFRESH_TIME_MILLISECONDS;
-import static com.mopub.common.util.ResponseHeader.AD_TIMEOUT;
-import static com.mopub.common.util.ResponseHeader.AD_TYPE;
-import static com.mopub.common.util.ResponseHeader.CLICK_TRACKING_URL;
-import static com.mopub.common.util.ResponseHeader.DSP_CREATIVE_ID;
-import static com.mopub.common.util.ResponseHeader.FAIL_URL;
-import static com.mopub.common.util.ResponseHeader.HEIGHT;
-import static com.mopub.common.util.ResponseHeader.IMPRESSION_URL;
-import static com.mopub.common.util.ResponseHeader.NETWORK_TYPE;
-import static com.mopub.common.util.ResponseHeader.REDIRECT_URL;
-import static com.mopub.common.util.ResponseHeader.REFRESH_TIME;
-import static com.mopub.common.util.ResponseHeader.WIDTH;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-public class AdConfigurationTest {
-    private AdConfiguration subject;
-    private Context context;
-    private TestHttpResponseWithHeaders httpResponse;
-
-    @Before
-    public void setUp() throws Exception {
-        context = new Activity();
-
-        subject = new AdConfiguration(context);
-
-        httpResponse = new TestHttpResponseWithHeaders(200, "I ain't got no-body");
-    }
-
-    @Test
-    public void constructor_shouldSetDefaults() throws Exception {
-        assertThat(subject.getAdUnitId()).isNull();
-        assertThat(subject.getResponseString()).isNull();
-        assertThat(subject.getAdType()).isNull();
-        assertThat(subject.getNetworkType()).isNull();
-        assertThat(subject.getRedirectUrl()).isNull();
-        assertThat(subject.getClickthroughUrl()).isNull();
-        assertThat(subject.getImpressionUrl()).isNull();
-        assertThat(subject.getTimeStamp()).isEqualTo(TestDateAndTime.now().getTime());
-        assertThat(subject.getWidth()).isEqualTo(0);
-        assertThat(subject.getHeight()).isEqualTo(0);
-        assertThat(subject.getAdTimeoutDelay()).isNull();
-        assertThat(subject.getRefreshTimeMilliseconds()).isEqualTo(60000);
-        assertThat(subject.getFailUrl()).isNull();
-        assertThat(subject.getDspCreativeId()).isNull();
-    }
-
-    @Test
-    public void constructor_shouldSetHashedUdid() throws Exception {
-        // this is sha1 of null
-        assertThat(subject.getHashedUdid()).isEqualTo("da39a3ee5e6b4b0d3255bfef95601890afd80709");
-    }
-
-    @Test
-    public void constructor_withNullContext_shouldNotSetHashedUdid() throws Exception {
-        subject = new AdConfiguration(null);
-
-        assertThat(subject.getHashedUdid()).isNull();
-    }
-
-    @Test
-    public void constructor_shouldSetUserAgent() throws Exception {
-        assertThat(subject.getUserAgent()).isEqualTo("Mozilla/5.0 (Linux; U; Android 4.0.3; ko-kr; LG-L160L Build/IML74K) AppleWebkit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30");
-    }
-
-    @Test
-    public void constructor_withNullContext_shouldSetUserAgent() throws Exception {
-        subject = new AdConfiguration(null);
-
-        assertThat(subject.getUserAgent()).isNull();
-    }
-
-    @Test
-    public void constructor_shouldSetDeviceLocale() throws Exception {
-        Robolectric.getShadowApplication().getResources().getConfiguration().locale = Locale.FRANCE;
-
-        subject = new AdConfiguration(context);
-
-        assertThat(subject.getDeviceLocale()).isEqualTo("fr_FR");
-    }
-
-    @Test
-    public void constructor_withNullContext_shouldNotSetDeviceLocale() throws Exception {
-        Robolectric.getShadowApplication().getResources().getConfiguration().locale = Locale.FRANCE;
-
-        subject = new AdConfiguration(null);
-
-        assertThat(subject.getDeviceLocale()).isNull();
-    }
-
-    @Test
-    public void constructor_shouldSetDeviceModelAndPlatformVersionAndSdkVersion() throws Exception {
-        assertThat(subject.getDeviceModel()).isNotNull();
-        assertThat(subject.getPlatformVersion()).isEqualTo(Build.VERSION.SDK_INT);
-        assertThat(subject.getSdkVersion()).isEqualTo(MoPub.SDK_VERSION);
-    }
-
-    @Test
-    public void constructor_shouldSetBroadcastIdentifier() throws Exception {
-        assertThat(subject.getBroadcastIdentifier()).isGreaterThan(0);
-    }
-
-    @Test
-    public void addHttpResponse_shouldSetFields() throws Exception {
-        Date now = new Date();
-        TestDateAndTime.getInstance().setNow(now);
-
-        httpResponse.addHeader(AD_TYPE.getKey(), "this is an ad type");
-        httpResponse.addHeader(NETWORK_TYPE.getKey(), "network type!");
-        httpResponse.addHeader(REDIRECT_URL.getKey(), "redirect url");
-        httpResponse.addHeader(CLICK_TRACKING_URL.getKey(), "clickthrough url");
-        httpResponse.addHeader(FAIL_URL.getKey(), "fail url");
-        httpResponse.addHeader(IMPRESSION_URL.getKey(), "impression url");
-        httpResponse.addHeader(WIDTH.getKey(), "320  ");
-        httpResponse.addHeader(HEIGHT.getKey(), "  50");
-        httpResponse.addHeader(AD_TIMEOUT.getKey(), "  12  ");
-        httpResponse.addHeader(REFRESH_TIME.getKey(), "70");
-        httpResponse.addHeader(DSP_CREATIVE_ID.getKey(), "1534363");
-
-        subject.addHttpResponse(httpResponse);
-
-        assertThat(subject.getAdType()).isEqualTo("this is an ad type");
-        assertThat(subject.getNetworkType()).isEqualTo("network type!");
-        assertThat(subject.getRedirectUrl()).isEqualTo("redirect url");
-        assertThat(subject.getClickthroughUrl()).isEqualTo("clickthrough url");
-        assertThat(subject.getFailUrl()).isEqualTo("fail url");
-        assertThat(subject.getImpressionUrl()).isEqualTo("impression url");
-        assertThat(subject.getTimeStamp()).isEqualTo(now.getTime());
-        assertThat(subject.getWidth()).isEqualTo(320);
-        assertThat(subject.getHeight()).isEqualTo(50);
-        assertThat(subject.getAdTimeoutDelay()).isEqualTo(12);
-        assertThat(subject.getRefreshTimeMilliseconds()).isEqualTo(70000);
-        assertThat(subject.getDspCreativeId()).isEqualTo("1534363");
-    }
-
-    @Test
-    public void addHttpResponse_withMissingWidthHeader_shouldSetWidthTo0() throws Exception {
-        httpResponse.addHeader(HEIGHT.getKey(), "25");
-
-        subject.addHttpResponse(httpResponse);
-
-        assertThat(subject.getWidth()).isEqualTo(0);
-    }
-
-    @Test
-    public void addHttpResponse_withMissingHeightHeader_shouldSetHeightTo0() throws Exception {
-        subject.addHttpResponse(httpResponse);
-
-        assertThat(subject.getHeight()).isEqualTo(0);
-    }
-
-    @Test
-    public void addHttpResponse_withFloatTimeoutDelay_shouldTruncateTimeoutDelay() throws Exception {
-        httpResponse.addHeader("X-AdTimeout", "3.14");
-        subject.addHttpResponse(httpResponse);
-        assertThat(subject.getAdTimeoutDelay()).isEqualTo(3);
-
-        httpResponse = new TestHttpResponseWithHeaders(200, "I ain't got no-body");
-        httpResponse.addHeader("X-AdTimeout", "-3.14");
-        subject.addHttpResponse(httpResponse);
-        assertThat(subject.getAdTimeoutDelay()).isEqualTo(-3);
-    }
-
-    @Test
-    public void addHttpResponse_withInvalidTimeoutDelay_shouldSetAdTimeoutDelayToNull() throws Exception {
-        // no X-AdTimeout header
-        subject.addHttpResponse(httpResponse);
-        assertThat(subject.getAdTimeoutDelay()).isNull();
-
-        httpResponse = new TestHttpResponseWithHeaders(200, "I ain't got no-body");
-        httpResponse.addHeader("X-AdTimeout", "not a number, i promise");
-        subject.addHttpResponse(httpResponse);
-        assertThat(subject.getAdTimeoutDelay()).isNull();
-    }
-
-    @Test
-    public void addHttpResponse_shouldSetRefreshTimeToMinimumOf10Seconds() throws Exception {
-        httpResponse.addHeader("X-Refreshtime", "0");
-
-        subject.addHttpResponse(httpResponse);
-        assertThat(subject.getRefreshTimeMilliseconds()).isEqualTo(MINIMUM_REFRESH_TIME_MILLISECONDS);
-    }
-
-    @Test
-    public void addHttpResponse_whenRefreshTimeNotSpecified_shouldResetRefreshTimeTo0Seconds() throws Exception {
-        httpResponse.addHeader("X-Refreshtime", "5");
-        subject.addHttpResponse(httpResponse);
-
-        assertThat(subject.getRefreshTimeMilliseconds()).isEqualTo(MINIMUM_REFRESH_TIME_MILLISECONDS);
-        httpResponse = new TestHttpResponseWithHeaders(200, "I ain't got no-body");
-        // no X-Refreshtime header
-        subject.addHttpResponse(httpResponse);
-
-        assertThat(subject.getRefreshTimeMilliseconds()).isEqualTo(0);
-    }
-
-    @Test
-    public void cleanup_shouldClearAllFields() throws Exception {
-        Date now = new Date();
-        TestDateAndTime.getInstance().setNow(now);
-
-        httpResponse.addHeader(AD_TYPE.getKey(), "this is an ad type");
-        httpResponse.addHeader(NETWORK_TYPE.getKey(), "network type!");
-        httpResponse.addHeader(REDIRECT_URL.getKey(), "redirect url");
-        httpResponse.addHeader(CLICK_TRACKING_URL.getKey(), "clickthrough url");
-        httpResponse.addHeader(FAIL_URL.getKey(), "fail url");
-        httpResponse.addHeader(IMPRESSION_URL.getKey(), "impression url");
-        httpResponse.addHeader(WIDTH.getKey(), "320  ");
-        httpResponse.addHeader(HEIGHT.getKey(), "  50");
-        httpResponse.addHeader(AD_TIMEOUT.getKey(), "  12  ");
-        httpResponse.addHeader(REFRESH_TIME.getKey(), "70");
-        httpResponse.addHeader(DSP_CREATIVE_ID.getKey(), "1534363");
-
-        subject.addHttpResponse(httpResponse);
-        subject.cleanup();
-
-        assertThat(subject.getBroadcastIdentifier()).isEqualTo(0);
-        assertThat(subject.getAdUnitId()).isNull();
-        assertThat(subject.getResponseString()).isNull();
-        assertThat(subject.getAdType()).isNull();
-        assertThat(subject.getNetworkType()).isNull();
-        assertThat(subject.getRedirectUrl()).isNull();
-        assertThat(subject.getClickthroughUrl()).isNull();
-        assertThat(subject.getImpressionUrl()).isNull();
-        assertThat(subject.getTimeStamp()).isEqualTo(TestDateAndTime.now().getTime());
-        assertThat(subject.getWidth()).isEqualTo(0);
-        assertThat(subject.getHeight()).isEqualTo(0);
-        assertThat(subject.getAdTimeoutDelay()).isNull();
-        assertThat(subject.getRefreshTimeMilliseconds()).isEqualTo(60000);
-        assertThat(subject.getFailUrl()).isNull();
-        assertThat(subject.getDspCreativeId()).isNull();
-    }
-
-    @Test
-    public void extractFromMap_shouldReturnValidAdConfiguration() throws Exception {
-        Map<String, Object> map = new HashMap<String, Object>();
-        map.put(AdFetcher.AD_CONFIGURATION_KEY, subject);
-
-        AdConfiguration returnValue = AdConfiguration.extractFromMap(map);
-
-        assertThat(returnValue).isEqualTo(subject);
-    }
-
-    @Test
-    public void extractFromMap_withNullMap_shouldReturnNull() throws Exception {
-        AdConfiguration returnValue = AdConfiguration.extractFromMap(null);
-
-        assertThat(returnValue).isEqualTo(null);
-    }
-
-    @Test
-    public void extractFromMap_withNonAdConfigurationObjectInMap_shouldReturnNull() throws Exception {
-        Map<String, Object> map = new HashMap<String, Object>();
-        map.put(AdFetcher.AD_CONFIGURATION_KEY, "not_an_ad_configuration");
-
-        AdConfiguration returnValue = AdConfiguration.extractFromMap(map);
-
-        assertThat(returnValue).isEqualTo(null);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java
deleted file mode 100644
index 10e25edf..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java
+++ /dev/null
@@ -1,123 +0,0 @@
-package com.mopub.mobileads;
-
-import android.os.Build.VERSION_CODES;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.factories.AdFetchTaskFactory;
-import com.mopub.mobileads.test.support.TestAdFetchTaskFactory;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-
-import org.apache.http.HttpResponse;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.concurrent.Executor;
-
-import static com.mopub.common.util.ResponseHeader.AD_TYPE;
-import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
-import static com.mopub.common.util.ResponseHeader.FULL_AD_TYPE;
-import static com.mopub.common.util.ResponseHeader.NATIVE_PARAMS;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class AdFetcherTest {
-    private AdFetcher subject;
-    private AdViewController adViewController;
-    private MoPubView moPubView;
-    private HttpResponse response;
-
-    @Before
-    public void setup() {
-        adViewController = mock(AdViewController.class);
-        moPubView = mock(MoPubView.class);
-        stub(adViewController.getMoPubView()).toReturn(moPubView);
-
-        subject = new AdFetcher(adViewController, "expected userAgent");
-        response = new TestHttpResponseWithHeaders(200, "yahoo!!!");
-    }
-
-    @Test
-    public void shouldSendResponseToAdView() {
-        Robolectric.addPendingHttpResponse(response);
-
-        subject.fetchAdForUrl("url");
-
-        verify(adViewController).configureUsingHttpResponse(eq(response));
-    }
-
-    @Test
-    public void fetchAdForUrl_shouldRouteMillennialBannerToCustomEventHandling() throws Exception {
-        String json = "{\"adWidth\": 320, \"adHeight\": 50, \"adUnitID\": \"44310\"}";
-        stub(adViewController.getAdConfiguration()).toReturn(mock(AdConfiguration.class));
-        response.addHeader(AD_TYPE.getKey(), "millennial_native");
-        response.addHeader(NATIVE_PARAMS.getKey(), json);
-        Robolectric.addPendingHttpResponse(response);
-
-        subject.fetchAdForUrl("ignored_url");
-
-        Map<String, String> paramsMap = new HashMap<String, String>();
-        paramsMap.put(CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MillennialBanner");
-        paramsMap.put(CUSTOM_EVENT_DATA.getKey(), json);
-
-        verify(moPubView).loadCustomEvent(eq(paramsMap));
-    }
-
-    @Test
-    public void fetchAdForUrl_shouldRouteMillennialInterstitialToCustomEventHandling() throws Exception {
-        AdViewController interstitialAdViewController = mock(AdViewController.class);
-        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = mock(MoPubInterstitial.MoPubInterstitialView.class);
-        stub(interstitialAdViewController.getMoPubView()).toReturn(moPubInterstitialView);
-        stub(interstitialAdViewController.getAdConfiguration()).toReturn(mock(AdConfiguration.class));
-        subject = new AdFetcher(interstitialAdViewController, "expected userAgent");
-
-        String json = "{\"adWidth\": 320, \"adHeight\": 480, \"adUnitID\": \"44310\"}";
-        response.addHeader(AD_TYPE.getKey(), "interstitial");
-        response.addHeader(FULL_AD_TYPE.getKey(), "millennial_full");
-        response.addHeader(NATIVE_PARAMS.getKey(), json);
-        Robolectric.addPendingHttpResponse(response);
-
-        subject.fetchAdForUrl("ignored_url");
-
-        Map<String, String> paramsMap = new HashMap<String, String>();
-        paramsMap.put(CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MillennialInterstitial");
-        paramsMap.put(CUSTOM_EVENT_DATA.getKey(), json);
-
-        verify(moPubInterstitialView).loadCustomEvent(eq(paramsMap));
-    }
-
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void fetchAdForUrl_atLeastIcs_shouldExecuteUsingAnExecutor() throws Exception {
-        AdFetchTaskFactory.setInstance(new TestAdFetchTaskFactory());
-        AdFetchTask adFetchTask = TestAdFetchTaskFactory.getSingletonMock();
-
-        subject.fetchAdForUrl("some url");
-
-        verify(adFetchTask).executeOnExecutor(any(Executor.class), eq("some url"));
-        verify(adFetchTask, never()).execute(anyString());
-    }
-
-    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
-    @Test
-    public void fetchAdForUrl_beforeHoneycomb_shouldExecuteWithoutAnExecutor() throws Exception {
-        AdFetchTaskFactory.setInstance(new TestAdFetchTaskFactory());
-        AdFetchTask adFetchTask = TestAdFetchTaskFactory.getSingletonMock();
-
-        subject.fetchAdForUrl("some url");
-
-        verify(adFetchTask, never()).executeOnExecutor(any(Executor.class), anyString());
-        verify(adFetchTask).execute(eq("some url"));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
deleted file mode 100644
index 2819c1c9..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
+++ /dev/null
@@ -1,193 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.JsonUtils;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-
-import org.apache.http.Header;
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpResponse;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static com.mopub.common.util.ResponseHeader.AD_TYPE;
-import static com.mopub.common.util.ResponseHeader.CLICK_TRACKING_URL;
-import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
-import static com.mopub.common.util.ResponseHeader.CUSTOM_SELECTOR;
-import static com.mopub.common.util.ResponseHeader.NATIVE_PARAMS;
-import static com.mopub.common.util.ResponseHeader.REDIRECT_URL;
-import static com.mopub.common.util.ResponseHeader.SCROLLABLE;
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.GOOGLE_PLAY_SERVICES_BANNER;
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.HTML_BANNER;
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.HTML_INTERSTITIAL;
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MRAID_BANNER;
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MRAID_INTERSTITIAL;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
-
-@RunWith(SdkTestRunner.class)
-public class AdLoadTaskTest {
-
-    private AdViewController adViewController;
-    private HttpResponse response;
-    private String standardExpectedJson;
-
-    @Before
-    public void setup() {
-        adViewController = mock(AdViewController.class);
-        AdConfiguration adConfiguration = mock(AdConfiguration.class);
-        stub(adViewController.getAdConfiguration()).toReturn(adConfiguration);
-        response = new TestHttpResponseWithHeaders(200, "");
-        standardExpectedJson = "{\"Scrollable\":\"false\",\"Redirect-Url\":\"redirect\",\"Clickthrough-Url\":\"clickthrough\",\"Html-Response-Body\":\"%3Chtml%3E%3C%2Fhtml%3E\"}";
-    }
-
-    @Test
-    public void fromHttpResponse_whenCustomEvent_shouldGetNameAndData() throws Exception {
-        String expectedCustomData = "Custom data";
-        response.addHeader(AD_TYPE.getKey(), "custom");
-        String expectedCustomEventName = "custom event name";
-        response.addHeader(CUSTOM_EVENT_NAME.getKey(), expectedCustomEventName);
-        response.addHeader(CUSTOM_EVENT_DATA.getKey(), expectedCustomData);
-
-        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(expectedCustomEventName);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey())).isEqualTo(expectedCustomData);
-    }
-
-    @Test
-    public void fromHttpResponse_whenNoCustomEventName_shouldCreateLegacyCustomEventAdLoadTaskWithAHeader() throws Exception {
-        String expectedCustomData = "Custom data";
-        String expectedHeaderValue = "some stuff";
-        response.addHeader(AD_TYPE.getKey(), "custom");
-        response.addHeader(CUSTOM_EVENT_DATA.getKey(), expectedCustomData);
-        response.addHeader(CUSTOM_SELECTOR.getKey(), expectedHeaderValue);
-
-        AdLoadTask.LegacyCustomEventAdLoadTask customEventTask = (AdLoadTask.LegacyCustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        Header taskHeader = customEventTask.getHeader();
-        assertThat(taskHeader).isNotNull();
-        assertThat(taskHeader.getName()).isEqualTo(CUSTOM_SELECTOR.getKey());
-        assertThat(taskHeader.getValue()).isEqualTo(expectedHeaderValue);
-    }
-
-    @Test
-    public void fromHttpResponse_whenMraidBanner_shouldCreateAnEncodedJsonString() throws Exception {
-        String htmlData = "<html></html>";
-        response = new TestHttpResponseWithHeaders(200, htmlData);
-        addExpectedResponseHeaders("mraid");
-
-        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(MRAID_BANNER.toString());
-
-        String actualJsonData = customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey());
-        JsonUtils.assertJsonStringMapsEqual(actualJsonData, standardExpectedJson);
-    }
-
-    @Test
-    public void fromHttpResponse_whenMraidInterstitial_shouldCreateAnEncodedJsonString() throws Exception {
-        String htmlData = "<html></html>";
-        response = new TestHttpResponseWithHeaders(200, htmlData);
-        addExpectedResponseHeaders("mraid");
-        stub(adViewController.getMoPubView()).toReturn(mock(MoPubInterstitial.MoPubInterstitialView.class));
-
-        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(MRAID_INTERSTITIAL.toString());
-
-        String actualJsonData = customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey());
-        JsonUtils.assertJsonStringMapsEqual(actualJsonData, standardExpectedJson);
-    }
-
-    @Test
-    public void fromHttpResponse_whenCustomEventDelegate_shouldConvertAdMobToCustomEvent() throws Exception {
-        String expectedNativeParams = "{\"this is a json\":\"map\",\"whee\":\"look at me\"}";
-        response.addHeader(AD_TYPE.getKey(), "admob_native");
-        response.addHeader(NATIVE_PARAMS.getKey(), expectedNativeParams);
-
-        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(GOOGLE_PLAY_SERVICES_BANNER.toString());
-
-        String actualNativeParams = customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey());
-        JsonUtils.assertJsonStringMapsEqual(actualNativeParams, expectedNativeParams);
-    }
-
-    @Test
-    public void fromHttpResponse_whenHtmlBanner_shouldConvertToCustomEventBanner() throws Exception {
-        String htmlData = "<html></html>";
-        response = new TestHttpResponseWithHeaders(200, htmlData);
-        addExpectedResponseHeaders("html");
-
-        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(HTML_BANNER.toString());
-
-        String actualJsonData = customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey());
-        JsonUtils.assertJsonStringMapsEqual(actualJsonData, standardExpectedJson);
-    }
-
-    @Test
-    public void fromHttpResponse_whenHtmlInterstitial_shouldConvertToCustomEventInterstitial() throws Exception {
-        String htmlData = "<html></html>";
-        response = new TestHttpResponseWithHeaders(200, htmlData);
-        addExpectedResponseHeaders("html");
-        stub(adViewController.getMoPubView()).toReturn(mock(MoPubInterstitial.MoPubInterstitialView.class));
-
-        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(HTML_INTERSTITIAL.toString());
-
-        String actualJsonData = customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey());
-        JsonUtils.assertJsonStringMapsEqual(actualJsonData, standardExpectedJson);
-    }
-
-    @Test
-    public void fromHttpResponse_whenEntityIsNull_shouldCreateMinimumJsonString() throws Exception {
-        String htmlData = "<html></html>";
-        String expectedJson = "{\"Scrollable\":\"false\",\"Html-Response-Body\":\"\"}";
-        response = new TestHttpResponseWithHeaders(200, htmlData) {
-            @Override
-            public HttpEntity getEntity() {
-                return null;
-            }
-        };
-        response.addHeader(AD_TYPE.getKey(), "html");
-
-        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(HTML_BANNER.toString());
-
-        String actualJsonData = customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey());
-        JsonUtils.assertJsonStringMapsEqual(actualJsonData, expectedJson);
-    }
-
-    @Test
-    public void fromHttpResponse_whenScrollableIsOne_shouldBeReflectedInJson() throws Exception {
-        String expectedJson = "{\"Scrollable\":\"true\",\"Html-Response-Body\":\"\"}";
-        response.addHeader(SCROLLABLE.getKey(), "1");
-        response.addHeader(AD_TYPE.getKey(), "html");
-
-
-        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(HTML_BANNER.toString());
-
-        String actualJsonData = customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey());
-        JsonUtils.assertJsonStringMapsEqual(actualJsonData, expectedJson);
-    }
-
-    @Test
-    public void fromHttpResponse_whenScrollableIsNotSpecified_shouldDefaultToFalseInJson() throws Exception {
-        String expectedJson = "{\"Scrollable\":\"false\",\"Html-Response-Body\":\"\"}";
-        response.addHeader(AD_TYPE.getKey(), "html");
-
-        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(HTML_BANNER.toString());
-
-        String actualJsonData = customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey());
-        JsonUtils.assertJsonStringMapsEqual(actualJsonData, expectedJson);
-    }
-
-    private void addExpectedResponseHeaders(String adType) {
-        response.addHeader(SCROLLABLE.getKey(), "0");
-        response.addHeader(AD_TYPE.getKey(), adType);
-        response.addHeader(REDIRECT_URL.getKey(), "redirect");
-        response.addHeader(CLICK_TRACKING_URL.getKey(), "clickthrough");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoaderTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoaderTest.java
new file mode 100644
index 00000000..1c253ed9
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoaderTest.java
@@ -0,0 +1,122 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.network.AdResponse;
+
+import org.fest.assertions.core.Condition;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.anyMapOf;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+public class AdLoaderTest {
+
+    @Mock
+    private AdViewController adViewController;
+    @Mock
+    private MoPubView moPubView;
+    private AdResponse adResponse;
+    private Map<String, String> serverExtras;
+
+    @Before
+    public void setup() {
+        adResponse = new AdResponse.Builder()
+                .setResponseBody("<html></html>")
+                .setClickTrackingUrl("clickthrough")
+                .setRedirectUrl("redirect")
+                .setScrollable(false)
+                .build();
+        serverExtras = new HashMap<String, String>();
+        serverExtras.put("test", "hi");
+        when(adViewController.getMoPubView()).thenReturn(moPubView);
+    }
+
+    @Test
+    public void fromAdResponse_whenCustomEvent_shouldCreateAdLoadTask() throws Exception {
+        adResponse = adResponse.toBuilder()
+                .setAdType("custom")
+                .setCustomEventClassName("custom event name")
+                .setServerExtras(serverExtras)
+                .build();
+
+
+        AdLoader.CustomEventAdLoader customEventTask = (AdLoader.CustomEventAdLoader) AdLoader.fromAdResponse(adResponse, adViewController);
+        assertThat(customEventTask).isNotNull();
+        assertThat(customEventTask.getServerExtras()).isEqualTo(serverExtras);
+    }
+
+
+    @Test
+    public void fromAdResponse_whenHtml_shouldBeModernAdLoadTask() {
+        adResponse = adResponse.toBuilder()
+                .setAdType("html")
+                .setCustomEventClassName("com.mopub.mobileads.HtmlBanner")
+                .setServerExtras(serverExtras)
+                .build();
+
+        AdLoader.CustomEventAdLoader customEventTask = (AdLoader.CustomEventAdLoader) AdLoader.fromAdResponse(adResponse, adViewController);
+        assertThat(customEventTask).isNotNull();
+        assertThat(customEventTask.getServerExtras()).has(new Condition<Map<String, String>>() {
+            @Override
+            public boolean matches(final Map<String, String> stringStringMap) {
+                return stringStringMap.containsKey("test");
+            }
+        });
+    }
+
+    @Test
+    public void fromAdResponse_whenCustomMethod_shouldReturnNull() {
+        adResponse = adResponse.toBuilder()
+                .setCustomEventClassName(null)
+                .build();
+
+        assertThat(AdLoader.fromAdResponse(adResponse, adViewController)).isNull();
+    }
+
+    @Test
+    public void load_shouldCallAdViewController() {
+        adResponse = adResponse.toBuilder()
+                .setAdType("custom")
+                .setCustomEventClassName("custom event name")
+                .setServerExtras(serverExtras)
+                .build();
+
+
+        AdLoader.CustomEventAdLoader customEventTask = (AdLoader.CustomEventAdLoader) AdLoader.fromAdResponse(adResponse, adViewController);
+
+        customEventTask.load();
+        verify(adViewController).getMoPubView();
+        verify(moPubView).loadCustomEvent(eq("custom event name"), anyMapOf(String.class, String.class));
+    }
+
+    @Test
+    public void load_controllerDestroyed_shouldDoNothing() {
+        when(adViewController.isDestroyed()).thenReturn(true);
+
+        adResponse = adResponse.toBuilder()
+                .setAdType("custom")
+                .setCustomEventClassName("custom event name")
+                .setServerExtras(serverExtras)
+                .build();
+
+
+        AdLoader.CustomEventAdLoader customEventTask = (AdLoader.CustomEventAdLoader) AdLoader.fromAdResponse(adResponse, adViewController);
+
+        customEventTask.load();
+        verify(adViewController).isDestroyed();
+        verifyNoMoreInteractions(adViewController);
+        verifyZeroInteractions(moPubView);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
index 64456de0..1461d2c8 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
@@ -3,12 +3,17 @@
 import android.app.Activity;
 import android.content.Context;
 
+import com.mopub.common.AdFormat;
+import com.mopub.common.AdType;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.ResponseHeader;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import java.util.HashMap;
+
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.stub;
@@ -19,6 +24,7 @@
     private MoPubView moPubView;
     private MoPubInterstitial.MoPubInterstitialView moPubInterstitialView;
     private Context context;
+    HashMap<String, String> headers;
 
     @Before
     public void setUp() throws Exception {
@@ -28,75 +34,99 @@ public void setUp() throws Exception {
         context = new Activity();
         stub(moPubView.getContext()).toReturn(context);
         stub(moPubInterstitialView.getContext()).toReturn(context);
+
+        headers = new HashMap<String, String>();
     }
 
     @Test
-    public void getAdMobBannerReturnsGooglePlayServicesBanner() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubView, "admob_native", null);
+    public void getCustomEventName_shouldBeGoogleBanner() {
+        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, "admob_native", null, headers);
 
         assertThat(customEventName).isEqualTo("com.mopub.mobileads.GooglePlayServicesBanner");
     }
 
     @Test
-    public void getAdMobInterstitialReturnsGooglePlayServicesInterstitial() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubInterstitialView, "interstitial", "admob_full");
+    public void getCustomEventName_shouldBeGoogleInterstitial() {
+        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, "interstitial", "admob_full", headers);
 
         assertThat(customEventName).isEqualTo("com.mopub.mobileads.GooglePlayServicesInterstitial");
     }
 
     @Test
-    public void getMillennialBanner() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubView, "millennial_native", null);
+    public void getCustomEventName_shouldBeMillenialBanner() {
+        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, "millennial_native", null, headers);
 
         assertThat(customEventName).isEqualTo("com.mopub.mobileads.MillennialBanner");
     }
 
     @Test
-    public void getMillennnialInterstitial() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubInterstitialView, "interstitial", "millennial_full");
+    public void getCustomEventName_shouldBeMillennialIntersitial() {
+        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.INTERSTITIAL, "interstitial", "millennial_full", headers);
 
         assertThat(customEventName).isEqualTo("com.mopub.mobileads.MillennialInterstitial");
     }
 
     @Test
-    public void getMraidBanner() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubView, "mraid", null);
+    public void getCustomEventName_shouldBeMraidBanner() {
+        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, AdType.MRAID, null, headers);
 
         assertThat(customEventName).isEqualTo("com.mopub.mraid.MraidBanner");
     }
 
     @Test
-    public void getMraidInterstitial() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubInterstitialView, "mraid", null);
+    public void getCustomEventName_shouldBeMraidInterstitial() {
+        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.INTERSTITIAL, AdType.MRAID, null, headers);
 
         assertThat(customEventName).isEqualTo("com.mopub.mraid.MraidInterstitial");
     }
 
     @Test
-    public void getHtmlBanner() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubView, "html", null);
+    public void getCustomEventName_shouldBeHtmlBanner() {
+        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, "html", null, headers);
 
         assertThat(customEventName).isEqualTo("com.mopub.mobileads.HtmlBanner");
     }
 
     @Test
-    public void getHtmlInterstitial() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubInterstitialView, "html", null);
+    public void getCustomEventName_shouldBeHtmlInterstitial() {
+        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.INTERSTITIAL, "html", null, headers);
 
         assertThat(customEventName).isEqualTo("com.mopub.mobileads.HtmlInterstitial");
     }
 
     @Test
-    public void getVastInterstitial() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubInterstitialView, "interstitial", "vast");
+    public void getCustomEventName_shouldBeVastInterstitial() {
+        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.INTERSTITIAL, "interstitial", "vast", headers);
 
         assertThat(customEventName).isEqualTo("com.mopub.mobileads.VastVideoInterstitial");
     }
 
     @Test
-    public void getCustomEventNameForAdType_whenSendingNonsense_shouldReturnNull() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType(null, null, null);
+    public void getCustomEventName_shouldBeCustomClassName() {
+        headers.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.example.CustomClass");
+        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, AdType.CUSTOM, null, headers);
+
+        assertThat(customEventName).isEqualTo("com.example.CustomClass");
+    }
+
+    @Test
+    public void getCustomEventName_whenNameNotInHeaders_shouldBeNull() {
+        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, AdType.CUSTOM, null, headers);
+
+        assertThat(customEventName).isNull();
+    }
+
+    @Test
+    public void getCustomEventName_withNativeFormat_shouldBeMoPubNative() {
+        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.NATIVE, AdType.NATIVE, null, headers);
 
+        assertThat(customEventName).isEqualTo("com.mopub.nativeads.MoPubCustomEventNative");
+    }
+
+    @Test
+    public void getCustomEventName_whenInvalidAdTypeAndInvalidFullAdType_shouldReturnNull() {
+        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, "garbage", "garbage",
+                headers);
         assertThat(customEventName).isNull();
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
index 2fe92c3f..4ab76542 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
@@ -2,85 +2,80 @@
 
 import android.app.Activity;
 import android.content.Context;
-import android.location.Location;
 import android.net.ConnectivityManager;
-import android.os.Build;
 import android.view.Gravity;
 import android.view.View;
-import android.webkit.WebView;
 import android.widget.FrameLayout;
 
-import com.mopub.common.GpsHelper;
-import com.mopub.common.GpsHelperTest;
-import com.mopub.common.MoPub;
-import com.mopub.common.SharedPreferencesHelper;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Reflection;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
-import com.mopub.mobileads.factories.HttpClientFactory;
-import com.mopub.mobileads.test.support.TestAdFetcherFactory;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.mobileads.test.support.ThreadUtils;
+import com.mopub.network.AdResponse;
+import com.mopub.network.Networking;
+import com.mopub.volley.Request;
+import com.mopub.volley.RequestQueue;
 
-import org.apache.http.HttpRequest;
-import org.apache.http.HttpResponse;
-import org.apache.http.client.HttpClient;
-import org.apache.http.conn.ClientConnectionManager;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
+import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.tester.org.apache.http.FakeHttpLayer;
 
-import java.lang.reflect.InvocationTargetException;
+import edu.emory.mathcs.backport.java.util.Collections;
 
-import static android.Manifest.permission.ACCESS_NETWORK_STATE;
-import static com.mopub.common.util.Reflection.MethodBuilder;
-import static com.mopub.mobileads.AdViewController.DEFAULT_REFRESH_TIME_MILLISECONDS;
-import static com.mopub.mobileads.MoPubErrorCode.INTERNAL_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.NO_FILL;
-import static com.mopub.mobileads.test.support.ThreadUtils.NETWORK_DELAY;
+import static com.mopub.common.VolleyRequestMatcher.isUrl;
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Fail.fail;
 import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Matchers.argThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyZeroInteractions;
 import static org.mockito.Mockito.when;
-import static org.robolectric.Robolectric.application;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
 public class AdViewControllerTest {
     private AdViewController subject;
-    private MoPubView moPubView;
-    private HttpResponse response;
-    private HttpClient httpClient;
-    private AdFetcher adFetcher;
-    private MethodBuilder methodBuilder;
+    @Mock
+    private MoPubView mockMoPubView;
+    @Mock
+    private RequestQueue mockRequestQueue;
+    private Reflection.MethodBuilder methodBuilder;
     private Activity context;
+    private AdResponse response;
 
     @Before
     public void setup() {
-        context = new Activity();
-        shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        shadowOf(context).grantPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE);
 
-        moPubView = mock(MoPubView.class);
-        stub(moPubView.getContext()).toReturn(context);
 
-        httpClient = HttpClientFactory.create();
+        when(mockMoPubView.getContext()).thenReturn(context);
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+
+        subject = new AdViewController(context, mockMoPubView);
 
-        subject = new AdViewController(context, moPubView);
-        response = new TestHttpResponseWithHeaders(200, "I ain't got no-body");
-        adFetcher = TestAdFetcherFactory.getSingletonMock();
         methodBuilder = TestMethodBuilderFactory.getSingletonMock();
         reset(methodBuilder);
+        response = new AdResponse.Builder()
+                .setCustomEventClassName("customEvent")
+                .setClickTrackingUrl("clickUrl")
+                .setImpressionTrackingUrl("impressionUrl")
+                .setRedirectUrl("redirectUrl")
+                .setScrollable(false)
+                .setDimensions(320, 50)
+                .setAdType("html")
+                .setFailoverUrl("failUrl")
+                .setResponseBody("testResponseBody")
+                .setServerExtras(Collections.emptyMap())
+                .build();
     }
 
     @After
@@ -89,14 +84,26 @@ public void tearDown() throws Exception {
     }
 
     @Test
-    public void scheduleRefreshTimerIfEnabled_shouldCancelOldRefreshAndScheduleANewOne() throws Exception {
-        response.addHeader("X-Refreshtime", "30");
-        subject.configureUsingHttpResponse(response);
+    public void scheduleRefreshTimer_shouldNotScheduleIfRefreshTimeIsZero() {
+        response = response.toBuilder().setRefreshTimeMilliseconds(0).build();
+        subject.onAdLoadSuccess(response);
         Robolectric.pauseMainLooper();
         assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
 
         subject.scheduleRefreshTimerIfEnabled();
 
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+    }
+
+    @Test
+    public void scheduleRefreshTimerIfEnabled_shouldCancelOldRefreshAndScheduleANewOne() throws Exception {
+        response = response.toBuilder().setRefreshTimeMilliseconds(30).build();
+        subject.onAdLoadSuccess(response);
+        Robolectric.pauseMainLooper();
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+
+        subject.scheduleRefreshTimerIfEnabled();
+
         assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
 
         subject.scheduleRefreshTimerIfEnabled();
@@ -106,11 +113,11 @@ public void scheduleRefreshTimerIfEnabled_shouldCancelOldRefreshAndScheduleANewO
 
     @Test
     public void scheduleRefreshTimer_shouldNotScheduleRefreshIfAutorefreshIsOff() throws Exception {
-        response.addHeader("X-Refreshtime", "30");
-        subject.configureUsingHttpResponse(response);
+        response = response.toBuilder().setRefreshTimeMilliseconds(30).build();
+        subject.onAdLoadSuccess(response);
 
         Robolectric.pauseMainLooper();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
 
         subject.forceSetAutorefreshEnabled(false);
 
@@ -127,26 +134,13 @@ public void scheduleRefreshTimer_whenAdViewControllerNotConfiguredByResponse_sho
         subject.scheduleRefreshTimerIfEnabled();
         assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
 
-        Robolectric.idleMainLooper(DEFAULT_REFRESH_TIME_MILLISECONDS - 1);
+        Robolectric.idleMainLooper(AdViewController.DEFAULT_REFRESH_TIME_MILLISECONDS - 1);
         assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
 
         Robolectric.idleMainLooper(1);
         assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
     }
 
-    @Test
-    public void scheduleRefreshTimer_shouldNotScheduleRefreshIfRefreshTimeIsZero() throws Exception {
-//        response.addHeader("X-Refreshtime", "0");
-        subject.configureUsingHttpResponse(response);
-        Robolectric.pauseMainLooper();
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-
-        subject.scheduleRefreshTimerIfEnabled();
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-    }
-    
     @Test
     public void forceSetAutoRefreshEnabled_shouldSetAutoRefreshSetting() throws Exception {
         assertThat(subject.getAutorefreshEnabled()).isTrue();
@@ -169,7 +163,7 @@ public void pauseRefresh_shouldDisableAutorefresh() throws Exception {
     @Test
     public void unpauseRefresh_afterUnpauseRefresh_shouldEnableRefresh() throws Exception {
         subject.pauseRefresh();
-        
+
         subject.unpauseRefresh();
         assertThat(subject.getAutorefreshEnabled()).isTrue();
     }
@@ -188,6 +182,7 @@ public void pauseAndUnpauseRefresh_withRefreshForceDisabled_shouldAlwaysHaveRefr
 
     @Test
     public void enablingAutoRefresh_afterLoadAd_shouldScheduleNewRefreshTimer() throws Exception {
+
         final AdViewController adViewControllerSpy = spy(subject);
 
         adViewControllerSpy.loadAd();
@@ -205,9 +200,8 @@ public void enablingAutoRefresh_withoutCallingLoadAd_shouldNotScheduleNewRefresh
 
     @Test
     public void disablingAutoRefresh_shouldCancelRefreshTimers() throws Exception {
-        response.addHeader("X-Refreshtime", "30");
-        subject.configureUsingHttpResponse(response);
-
+        response = response.toBuilder().setRefreshTimeMilliseconds(30).build();
+        subject.onAdLoadSuccess(response);
         Robolectric.pauseMainLooper();
 
         subject.loadAd();
@@ -219,182 +213,48 @@ public void disablingAutoRefresh_shouldCancelRefreshTimers() throws Exception {
     }
 
     @Test
-    public void trackImpression_shouldHttpGetTheImpressionUrl() throws Exception {
-        response.addHeader("X-Imptracker", "http://trackingUrl");
-        subject.configureUsingHttpResponse(response);
-        String expectedUserAgent = new WebView(context).getSettings().getUserAgentString();
-        FakeHttpLayer fakeHttpLayer = Robolectric.getFakeHttpLayer();
-        fakeHttpLayer.addPendingHttpResponse(200, "");
+    public void trackImpression_shouldAddToRequestQueue() throws Exception {
+        subject.onAdLoadSuccess(response);
+        subject.trackImpression();
 
-        assertThat(expectedUserAgent).isNotNull();
+        verify(mockRequestQueue).add(argThat(isUrl("impressionUrl")));
+    }
 
+    @Test
+    public void trackImpression_noAdResponse_shouldNotAddToQueue() {
         subject.trackImpression();
-        ThreadUtils.pause(NETWORK_DELAY); // does this make the test flaky?
-
-        HttpRequest request = fakeHttpLayer.getLastSentHttpRequestInfo().getHttpRequest();
-        assertThat(request.getFirstHeader("User-Agent").getValue()).isEqualTo(expectedUserAgent);
-        assertThat(request.getRequestLine().getUri()).isEqualTo("http://trackingUrl");
-
-        ClientConnectionManager connectionManager = httpClient.getConnectionManager();
-        try {
-            new MethodBuilder(connectionManager, "assertStillUp").setAccessible().execute();
-            fail("should have thrown an exception");
-        } catch (InvocationTargetException expected) {
-            assertThat(expected.getCause()).isInstanceOf(IllegalStateException.class);
-        }
+
+        verifyZeroInteractions(mockRequestQueue);
     }
 
     @Test
     public void registerClick_shouldHttpGetTheClickthroughUrl() throws Exception {
-        response.addHeader("X-Clickthrough", "http://clickUrl");
-        subject.configureUsingHttpResponse(response);
-        String expectedUserAgent = new WebView(context).getSettings().getUserAgentString();
-        FakeHttpLayer fakeHttpLayer = Robolectric.getFakeHttpLayer();
-        fakeHttpLayer.addPendingHttpResponse(200, "");
-
-        assertThat(expectedUserAgent).isNotNull();
+        subject.onAdLoadSuccess(response);
 
         subject.registerClick();
-        Thread.sleep(200); // does this make the test flaky?
-
-        HttpRequest request = fakeHttpLayer.getLastSentHttpRequestInfo().getHttpRequest();
-        assertThat(request.getFirstHeader("User-Agent").getValue()).isEqualTo(expectedUserAgent);
-        assertThat(request.getRequestLine().getUri()).isEqualTo("http://clickUrl");
-
-        ClientConnectionManager connectionManager = httpClient.getConnectionManager();
-        try {
-            new MethodBuilder(connectionManager, "assertStillUp").setAccessible().execute();
-            fail("should have thrown an exception");
-        } catch (InvocationTargetException expected) {
-            assertThat(expected.getCause()).isInstanceOf(IllegalStateException.class);
-        }
-    }
-
-    @Test
-    public void generateAdUrl_shouldIncludeMinFields() throws Exception {
-        String expectedAdUrl = "http://ads.mopub.com/m/ad" +
-                "?v=6" +
-                "&nv=" + MoPub.SDK_VERSION +
-                "&dn=" + Build.MANUFACTURER +
-                "%2C" + Build.MODEL +
-                "%2C" + Build.PRODUCT +
-                "&udid=sha%3A" +
-                "&z=-0700" +
-                "&o=u" +
-                "&sc_a=1.0" +
-                "&mr=1" +
-                "&ct=3" +
-                "&av=1.0" +
-                "&android_perms_ext_storage=0";
-
-        String adUrl = subject.generateAdUrl();
-
-        assertThat(adUrl).isEqualTo(expectedAdUrl);
+        verify(mockRequestQueue).add(argThat(isUrl("clickUrl")));
     }
 
     @Test
-    public void loadAd_shouldNotLoadUrlIfAdUnitIdIsNull() throws Exception {
-        FakeHttpLayer fakeHttpLayer = Robolectric.getFakeHttpLayer();
-
-        subject.loadAd();
-
-        assertThat(fakeHttpLayer.getLastSentHttpRequestInfo()).isNull();
+    public void registerClick_NoAdResponse_shouldNotAddToQueue() {
+        subject.registerClick();
+        verifyZeroInteractions(mockRequestQueue);
     }
 
     @Test
-    public void loadAd_shouldScheduleRefreshIfNoNetworkConnectivity() throws Exception {
-        FakeHttpLayer fakeHttpLayer = Robolectric.getFakeHttpLayer();
-        Robolectric.pauseMainLooper();
-        ConnectivityManager connectivityManager = (ConnectivityManager) application.getSystemService(Context.CONNECTIVITY_SERVICE);
+    public void loadAd_shouldNotLoadWithoutConnectivity() throws Exception {
+        ConnectivityManager connectivityManager = (ConnectivityManager) Robolectric.application.getSystemService(Context.CONNECTIVITY_SERVICE);
         shadowOf(connectivityManager.getActiveNetworkInfo()).setConnectionStatus(false);
-        response.addHeader("X-Refreshtime", "30");
-        subject.configureUsingHttpResponse(response);
-        subject.setAdUnitId("adUnitId");
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-
-        subject.loadAd();
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-        assertThat(fakeHttpLayer.getLastSentHttpRequestInfo()).isNull();
-    }
 
-    @Test
-    public void loadAd_whenGooglePlayServicesIsLinkedAndAdInfoIsNotCached_shouldCacheAdInfoBeforeFetchingAd() throws Exception {
-        SharedPreferencesHelper.getSharedPreferences(context).edit().clear().commit();
-        GpsHelperTest.verifyCleanClientMetadata(context);
-
-        GpsHelper.setClassNamesForTesting();
-        GpsHelperTest.TestAdInfo adInfo = new GpsHelperTest.TestAdInfo();
-
-        when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
-        when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
-        when(methodBuilder.execute()).thenReturn(
-                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE,
-                adInfo,
-                adInfo.ADVERTISING_ID,
-                adInfo.LIMIT_AD_TRACKING_ENABLED
-        );
-
-        final AdViewController.AdViewControllerGpsHelperListener mockAdViewControllerGpsHelperListener
-                = mock(AdViewController.AdViewControllerGpsHelperListener.class);
-        subject.setGpsHelperListener(mockAdViewControllerGpsHelperListener);
-        subject.setAdUnitId("adUnitId");
-        subject.setLocation(new Location(""));
         subject.loadAd();
-        Thread.sleep(500);
-
-        verify(mockAdViewControllerGpsHelperListener).onFetchAdInfoCompleted();
-        GpsHelperTest.verifyClientMetadata(context, adInfo);
+        verifyZeroInteractions(mockRequestQueue);
     }
 
     @Test
-    public void loadAd_whenGooglePlayServicesIsNotLinked_shouldFetchAdFast() throws Exception {
-        GpsHelperTest.verifyCleanClientMetadata(context);
-
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
-        when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
-        // return error code so it fails
-        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE + 1);
-
-        final AdViewController.AdViewControllerGpsHelperListener mockAdViewControllerGpsHelperListener
-                = mock(AdViewController.AdViewControllerGpsHelperListener.class);
-        subject.setGpsHelperListener(mockAdViewControllerGpsHelperListener);
-        subject.setAdUnitId("adUnitId");
-        subject.setLocation(new Location(""));
-        subject.loadAd();
-        // no need to sleep since it run the callback without an async task
-
-        verify(mockAdViewControllerGpsHelperListener).onFetchAdInfoCompleted();
-        GpsHelperTest.verifyCleanClientMetadata(context);
-    }
-
-    @Test
-    public void loadAd_whenGooglePlayServicesIsLinkedAndAdInfoIsCached_shouldFetchAdFast() throws Exception {
-        GpsHelperTest.TestAdInfo adInfo = new GpsHelperTest.TestAdInfo();
-        GpsHelperTest.populateAndVerifyClientMetadata(context, adInfo);
-        GpsHelper.setClassNamesForTesting();
-
-        when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
-        when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
-        when(methodBuilder.execute()).thenReturn(
-                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE,
-                adInfo,
-                adInfo.mAdId,
-                adInfo.mLimitAdTrackingEnabled
-        );
-
-        final AdViewController.AdViewControllerGpsHelperListener mockAdViewControllerGpsHelperListener
-                = mock(AdViewController.AdViewControllerGpsHelperListener.class);
-        subject.setGpsHelperListener(mockAdViewControllerGpsHelperListener);
-        subject.setAdUnitId("adUnitId");
-        subject.setLocation(new Location(""));
+    public void loadAd_shouldNotLoadUrlIfAdUnitIdIsNull() throws Exception {
         subject.loadAd();
-        // no need to sleep since it run the callback without an async task
 
-        verify(mockAdViewControllerGpsHelperListener).onFetchAdInfoCompleted();
-        GpsHelperTest.verifyClientMetadata(context, adInfo);
+        verifyZeroInteractions(mockRequestQueue);
     }
 
     @Test
@@ -402,28 +262,17 @@ public void loadNonJavascript_shouldFetchAd() throws Exception {
         String url = "http://www.guy.com";
         subject.loadNonJavascript(url);
 
-        verify(adFetcher).fetchAdForUrl(eq(url));
+        verify(mockRequestQueue).add(argThat(isUrl(url)));
     }
 
     @Test
     public void loadNonJavascript_whenAlreadyLoading_shouldNotFetchAd() throws Exception {
         String url = "http://www.guy.com";
         subject.loadNonJavascript(url);
-        reset(adFetcher);
+        reset(mockRequestQueue);
         subject.loadNonJavascript(url);
 
-        verify(adFetcher, never()).fetchAdForUrl(anyString());
-    }
-
-    @Test
-    public void loadNonJavascript_shouldClearTheFailUrl() throws Exception {
-        subject.setFailUrl("blarg:");
-        subject.loadNonJavascript("http://www.goodness.com");
-        reset(adFetcher);
-        subject.loadFailUrl(null);
-
-        verify(adFetcher, never()).fetchAdForUrl(anyString());
-        verify(moPubView).adFailed(eq(NO_FILL));
+        verify(mockRequestQueue, never()).add(any(Request.class));
     }
 
     @Test
@@ -437,20 +286,19 @@ public void reload_shouldReuseOldUrl() throws Exception {
         String url = "http://www.guy.com";
         subject.loadNonJavascript(url);
         subject.setNotLoading();
-        reset(adFetcher);
+        reset(mockRequestQueue);
         subject.reload();
 
-        verify(adFetcher).fetchAdForUrl(eq(url));
+        verify(mockRequestQueue).add(argThat(isUrl(url)));
     }
 
     @Test
     public void loadFailUrl_shouldLoadFailUrl() throws Exception {
-        String failUrl = "http://www.bad.man";
-        subject.setFailUrl(failUrl);
-        subject.loadFailUrl(INTERNAL_ERROR);
+        subject.onAdLoadSuccess(response);
+        subject.loadFailUrl(MoPubErrorCode.INTERNAL_ERROR);
 
-        verify(adFetcher).fetchAdForUrl(eq(failUrl));
-        verify(moPubView, never()).adFailed(any(MoPubErrorCode.class));
+        verify(mockRequestQueue).add(argThat(isUrl("failUrl")));
+        verify(mockMoPubView, never()).adFailed(any(MoPubErrorCode.class));
     }
 
     @Test
@@ -461,20 +309,18 @@ public void loadFailUrl_shouldAcceptNullErrorCode() throws Exception {
 
     @Test
     public void loadFailUrl_whenFailUrlIsNull_shouldCallAdDidFail() throws Exception {
-        subject.setFailUrl(null);
-        subject.loadFailUrl(INTERNAL_ERROR);
+        response.toBuilder().setFailoverUrl(null).build();
+        subject.loadFailUrl(MoPubErrorCode.INTERNAL_ERROR);
 
-        verify(moPubView).adFailed(eq(NO_FILL));
-        verify(adFetcher, never()).fetchAdForUrl(anyString());
+        verify(mockMoPubView).adFailed(eq(MoPubErrorCode.NO_FILL));
+        verifyZeroInteractions(mockRequestQueue);
     }
 
     @Test
     public void setAdContentView_whenCalledFromWrongUiThread_shouldStillSetContentView() throws Exception {
-        response.addHeader("X-Width", "320");
-        response.addHeader("X-Height", "50");
         final View view = mock(View.class);
         AdViewController.setShouldHonorServerDimensions(view);
-        subject.configureUsingHttpResponse(response);
+        subject.onAdLoadSuccess(response);
 
         new Thread(new Runnable() {
             @Override
@@ -485,9 +331,9 @@ public void run() {
         ThreadUtils.pause(100);
         Robolectric.runUiThreadTasks();
 
-        verify(moPubView).removeAllViews();
+        verify(mockMoPubView).removeAllViews();
         ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
-        verify(moPubView).addView(eq(view), layoutParamsCaptor.capture());
+        verify(mockMoPubView).addView(eq(view), layoutParamsCaptor.capture());
         FrameLayout.LayoutParams layoutParams = layoutParamsCaptor.getValue();
 
         assertThat(layoutParams.width).isEqualTo(320);
@@ -497,11 +343,9 @@ public void run() {
 
     @Test
     public void setAdContentView_whenCalledAfterCleanUp_shouldNotRemoveViewsAndAddView() throws Exception {
-        response.addHeader("X-Width", "320");
-        response.addHeader("X-Height", "50");
         final View view = mock(View.class);
         AdViewController.setShouldHonorServerDimensions(view);
-        subject.configureUsingHttpResponse(response);
+        subject.onAdLoadSuccess(response);
 
         subject.cleanup();
         new Thread(new Runnable() {
@@ -513,23 +357,21 @@ public void run() {
         ThreadUtils.pause(10);
         Robolectric.runUiThreadTasks();
 
-        verify(moPubView, never()).removeAllViews();
-        verify(moPubView, never()).addView(any(View.class), any(FrameLayout.LayoutParams.class));
+        verify(mockMoPubView, never()).removeAllViews();
+        verify(mockMoPubView, never()).addView(any(View.class), any(FrameLayout.LayoutParams.class));
     }
 
     @Test
     public void setAdContentView_whenHonorServerDimensionsAndHasDimensions_shouldSizeAndCenterView() throws Exception {
-        response.addHeader("X-Width", "320");
-        response.addHeader("X-Height", "50");
         View view = mock(View.class);
         AdViewController.setShouldHonorServerDimensions(view);
-        subject.configureUsingHttpResponse(response);
+        subject.onAdLoadSuccess(response);
 
         subject.setAdContentView(view);
 
-        verify(moPubView).removeAllViews();
+        verify(mockMoPubView).removeAllViews();
         ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
-        verify(moPubView).addView(eq(view), layoutParamsCaptor.capture());
+        verify(mockMoPubView).addView(eq(view), layoutParamsCaptor.capture());
         FrameLayout.LayoutParams layoutParams = layoutParamsCaptor.getValue();
 
         assertThat(layoutParams.width).isEqualTo(320);
@@ -539,15 +381,16 @@ public void setAdContentView_whenHonorServerDimensionsAndHasDimensions_shouldSiz
 
     @Test
     public void setAdContentView_whenHonorServerDimensionsAndDoesntHaveDimensions_shouldWrapAndCenterView() throws Exception {
+        response = response.toBuilder().setDimensions(null, null).build();
         View view = mock(View.class);
         AdViewController.setShouldHonorServerDimensions(view);
-        subject.configureUsingHttpResponse(response);
+        subject.onAdLoadSuccess(response);
 
         subject.setAdContentView(view);
 
-        verify(moPubView).removeAllViews();
+        verify(mockMoPubView).removeAllViews();
         ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
-        verify(moPubView).addView(eq(view), layoutParamsCaptor.capture());
+        verify(mockMoPubView).addView(eq(view), layoutParamsCaptor.capture());
         FrameLayout.LayoutParams layoutParams = layoutParamsCaptor.getValue();
 
         assertThat(layoutParams.width).isEqualTo(FrameLayout.LayoutParams.WRAP_CONTENT);
@@ -557,16 +400,14 @@ public void setAdContentView_whenHonorServerDimensionsAndDoesntHaveDimensions_sh
 
     @Test
     public void setAdContentView_whenNotServerDimensions_shouldWrapAndCenterView() throws Exception {
-        response.addHeader("X-Width", "320");
-        response.addHeader("X-Height", "50");
-        subject.configureUsingHttpResponse(response);
+        subject.onAdLoadSuccess(response);
         View view = mock(View.class);
 
         subject.setAdContentView(view);
 
-        verify(moPubView).removeAllViews();
+        verify(mockMoPubView).removeAllViews();
         ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
-        verify(moPubView).addView(eq(view), layoutParamsCaptor.capture());
+        verify(mockMoPubView).addView(eq(view), layoutParamsCaptor.capture());
         FrameLayout.LayoutParams layoutParams = layoutParamsCaptor.getValue();
 
         assertThat(layoutParams.width).isEqualTo(FrameLayout.LayoutParams.WRAP_CONTENT);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
index c2f9c559..18e64903 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
@@ -6,11 +6,14 @@
 import android.view.View;
 import android.view.ViewGroup;
 
+import com.mopub.common.AdReport;
 import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowWebView;
 
@@ -24,15 +27,15 @@
 @RunWith(SdkTestRunner.class)
 public class BaseHtmlWebViewTest {
 
+    @Mock
+    AdReport mockAdReport;
     private BaseHtmlWebView subject;
     private MotionEvent touchDown;
     private MotionEvent touchUp;
-    private AdConfiguration adConfiguration;
 
     @Before
     public void setUp() throws Exception {
-        adConfiguration = mock(AdConfiguration.class);
-        subject = new BaseHtmlWebView(new Activity(), adConfiguration);
+        subject = new BaseHtmlWebView(Robolectric.buildActivity(Activity.class).create().get(), mockAdReport);
 
         touchDown = createMotionEvent(MotionEvent.ACTION_DOWN);
         touchUp = createMotionEvent(MotionEvent.ACTION_UP);
@@ -41,7 +44,7 @@ public void setUp() throws Exception {
     @Config(reportSdk = VERSION_CODES.JELLY_BEAN_MR2)
     @Test
     public void pluginState_atLeastJellybeanMr2_shouldDefaultToOff_shouldNeverBeEnabled()  {
-        subject = new BaseHtmlWebView(new Activity(), adConfiguration);
+        subject = new BaseHtmlWebView(Robolectric.buildActivity(Activity.class).create().get(), mockAdReport);
         assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.OFF);
 
         subject.enablePlugins(true);
@@ -51,7 +54,7 @@ public void pluginState_atLeastJellybeanMr2_shouldDefaultToOff_shouldNeverBeEnab
     @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void pluginState_atLeastIcsButBelowJellybeanMr2_shouldDefaultToOn_shouldAllowToggling() {
-        subject = new BaseHtmlWebView(new Activity(), adConfiguration);
+        subject = new BaseHtmlWebView(Robolectric.buildActivity(Activity.class).create().get(), mockAdReport);
         assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.ON);
 
         subject.enablePlugins(false);
@@ -64,7 +67,7 @@ public void pluginState_atLeastIcsButBelowJellybeanMr2_shouldDefaultToOn_shouldA
     @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
     @Test
     public void pluginState_beforeIcs_shouldDefaultToOff_shouldAllowToggling() {
-        subject = new BaseHtmlWebView(new Activity(), adConfiguration);
+        subject = new BaseHtmlWebView(Robolectric.buildActivity(Activity.class).create().get(), mockAdReport);
         assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.OFF);
 
         subject.enablePlugins(true);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
index 559954dc..0154afd5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
@@ -12,10 +12,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.Mock;
 import org.robolectric.Robolectric;
 
-import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.stub;
@@ -23,7 +22,7 @@
 @RunWith(SdkTestRunner.class)
 public class BaseInterstitialActivityTest {
     private BaseInterstitialActivity subject;
-    @Mock private AdConfiguration adConfiguration;
+    private long broadcastIdentifier;
 
     // Make a concrete version of the abstract class for testing purposes.
     private static class TestInterstitialActivity extends BaseInterstitialActivity {
@@ -40,7 +39,7 @@ public View getAdView() {
 
     @Before
     public void setup() {
-
+        broadcastIdentifier = 2222;
     }
 
     @Test
@@ -60,28 +59,28 @@ public void onDestroy_shouldCleanUpContentView() throws Exception {
     }
 
     @Test
-    public void getAdConfiguration_shouldReturnAdConfigurationFromIntent() throws Exception {
+    public void getBroadcastIdentifier_shouldReturnBroadcastIdFromIntent() throws Exception {
         Context context = Robolectric.buildActivity(Activity.class).create().get();
         Intent intent = new Intent(context, TestInterstitialActivity.class);
-        intent.putExtra(AD_CONFIGURATION_KEY, adConfiguration);
+        intent.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
 
         subject = Robolectric.buildActivity(TestInterstitialActivity.class)
                 .withIntent(intent)
                 .create().get();
-        assertThat(subject.getAdConfiguration()).isNotNull();
+        assertThat(subject.getBroadcastIdentifier()).isEqualTo(2222L);
     }
 
     @Test
-    public void getAdConfiguration_withMissingOrWrongAdConfiguration_shouldReturnNull() throws Exception {
+    public void getBroadcastIdentifier_withMissingBroadCastId_shouldReturnNull() throws Exception {
         Context context = Robolectric.buildActivity(Activity.class).create().get();
         Intent intent = new Intent(context, TestInterstitialActivity.class);
-        // This intent is missing an AdConfiguration extra.
+        // This intent is missing a broadcastidentifier extra.
 
         subject = Robolectric.buildActivity(TestInterstitialActivity.class)
                 .withIntent(intent)
                 .create().get();
 
-        assertThat(subject.getAdConfiguration()).isNull();
+        assertThat(subject.getBroadcastIdentifier()).isNull();
     }
 
     protected FrameLayout getContentView(BaseInterstitialActivity subject) {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivitiyTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java
similarity index 65%
rename from mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivitiyTest.java
rename to mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java
index 1f23c7df..bd7a88b1 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivitiyTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java
@@ -12,70 +12,66 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 
-import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.mobileads.BaseVideoPlayerActivity.VIDEO_URL;
 import static com.mopub.mobileads.BaseVideoPlayerActivity.startMraid;
 import static com.mopub.mobileads.BaseVideoPlayerActivity.startVast;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 import static org.mockito.Mockito.withSettings;
 
 @RunWith(SdkTestRunner.class)
-public class BaseVideoPlayerActivitiyTest {
+public class BaseVideoPlayerActivityTest {
     private static final String MRAID_VIDEO_URL = "http://mraidVideo";
 
-    private AdConfiguration adConfiguration;
     private long testBroadcastIdentifier;
     private VastVideoConfiguration vastVideoConfiguration;
 
     @Before
     public void setup() throws Exception {
-        adConfiguration = mock(AdConfiguration.class, withSettings().serializable());
         vastVideoConfiguration = mock(VastVideoConfiguration.class, withSettings().serializable());
-
         testBroadcastIdentifier = 1234;
-        when(adConfiguration.getBroadcastIdentifier()).thenReturn(testBroadcastIdentifier);
     }
 
     @Test
     public void startMraid_shouldStartMraidVideoPlayerActivity() throws Exception {
-        startMraid(new Activity(), MRAID_VIDEO_URL, adConfiguration);
-        assertMraidVideoPlayerActivityStarted(MraidVideoPlayerActivity.class, MRAID_VIDEO_URL, adConfiguration);
+        startMraid(new Activity(), MRAID_VIDEO_URL);
+        assertMraidVideoPlayerActivityStarted(MraidVideoPlayerActivity.class, MRAID_VIDEO_URL);
     }
 
     @Test
     public void startVast_shouldStartMraidVideoPlayerActivity() throws Exception {
-        startVast(new Activity(), vastVideoConfiguration, adConfiguration);
-        assertVastVideoPlayerActivityStarted(MraidVideoPlayerActivity.class, vastVideoConfiguration, adConfiguration);
+        startVast(new Activity(), vastVideoConfiguration, testBroadcastIdentifier);
+        assertVastVideoPlayerActivityStarted(MraidVideoPlayerActivity.class, vastVideoConfiguration, testBroadcastIdentifier);
     }
 
     static void assertVastVideoPlayerActivityStarted(final Class clazz,
             final VastVideoConfiguration vastVideoConfiguration,
-            final AdConfiguration adConfiguration) {
+            final long broadcastIdentifier) {
         final Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertIntentAndAdConfigurationAreCorrect(intent, clazz, adConfiguration);
+        assertIntentAndBroadcastIdentifierAreCorrect(intent, clazz, broadcastIdentifier);
 
         final VastVideoConfiguration expectedVastVideoConfiguration =
                 (VastVideoConfiguration) intent.getSerializableExtra(VastVideoViewController.VAST_VIDEO_CONFIGURATION);
         assertThat(expectedVastVideoConfiguration).isEqualsToByComparingFields(vastVideoConfiguration);
     }
 
-    public static void assertMraidVideoPlayerActivityStarted(final Class clazz, final String url,
-            final AdConfiguration adConfiguration) {
+    public static void assertMraidVideoPlayerActivityStarted(final Class clazz, final String url) {
         final Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertIntentAndAdConfigurationAreCorrect(intent, clazz, adConfiguration);
+        assertIntentAndBroadcastIdentifierAreCorrect(intent, clazz, null);
 
         assertThat(intent.getStringExtra(VIDEO_URL)).isEqualTo(url);
     }
 
-    static void assertIntentAndAdConfigurationAreCorrect(final Intent intent,
+    static void assertIntentAndBroadcastIdentifierAreCorrect(final Intent intent,
             final Class clazz,
-            final AdConfiguration adConfiguration) {
+            final Long expectedBroadcastId) {
         assertThat(intent.getComponent().getClassName()).isEqualTo(clazz.getCanonicalName());
         assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), Intent.FLAG_ACTIVITY_NEW_TASK)).isTrue();
 
-        final AdConfiguration expectedAdConfiguration = (AdConfiguration) intent.getSerializableExtra(AD_CONFIGURATION_KEY);
-        assertThat(expectedAdConfiguration).isEqualsToByComparingFields(adConfiguration);
+        if (expectedBroadcastId != null) {
+            final long actualBroadcastId = (Long) intent.getSerializableExtra(BROADCAST_IDENTIFIER_KEY);
+            assertThat(actualBroadcastId).isEqualTo(expectedBroadcastId);
+        }
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventAdLoadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventAdLoaderTest.java
similarity index 52%
rename from mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventAdLoadTaskTest.java
rename to mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventAdLoaderTest.java
index 944e8378..c3dbf03d 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventAdLoadTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventAdLoaderTest.java
@@ -16,11 +16,12 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-public class CustomEventAdLoadTaskTest {
+public class CustomEventAdLoaderTest {
 
     private AdViewController adViewController;
-    private AdLoadTask.CustomEventAdLoadTask subject;
-    private Map<String, String> paramsMap;
+    private AdLoader.CustomEventAdLoader subject;
+    private String customEventName;
+    private Map<String, String> serverExtras;
     private MoPubView moPubView;
 
     @Before
@@ -28,23 +29,25 @@ public void setup() {
         moPubView = mock(MoPubView.class);
         adViewController = mock(AdViewController.class);
         stub(adViewController.getMoPubView()).toReturn(moPubView);
-        paramsMap = new HashMap<String, String>();
-        subject = new AdLoadTask.CustomEventAdLoadTask(adViewController, paramsMap);
+        customEventName = "testCustomEvent";
+        serverExtras = new HashMap<String, String>();
+        subject = new AdLoader.CustomEventAdLoader(adViewController,
+                customEventName, serverExtras);
     }
 
     @Test
     public void execute_shouldCallLoadCustomEvent() throws Exception {
-        subject.execute();
+        subject.load();
 
         verify(adViewController).setNotLoading();
-        verify(moPubView).loadCustomEvent(eq(paramsMap));
+        verify(moPubView).loadCustomEvent(eq(customEventName), eq(serverExtras));
     }
 
     @Test
     public void execute_whenAdViewControllerIsNull_shouldDoNothing() throws Exception {
-        subject = new AdLoadTask.CustomEventAdLoadTask(null, paramsMap);
+        subject = new AdLoader.CustomEventAdLoader(null, customEventName, serverExtras);
 
-        subject.execute();
+        subject.load();
         // pass
     }
 
@@ -52,28 +55,29 @@ public void execute_whenAdViewControllerIsNull_shouldDoNothing() throws Exceptio
     public void execute_whenAdViewControllerIsDestroyed_shouldDoNothing() throws Exception {
         stub(adViewController.isDestroyed()).toReturn(true);
 
-        subject.execute();
+        subject.load();
 
         verify(adViewController, never()).setNotLoading();
-        verify(moPubView, never()).loadCustomEvent(eq(paramsMap));
+        verify(moPubView, never()).loadCustomEvent(eq(customEventName), eq(serverExtras));
     }
 
     @Test
-    public void execute_whenParamsMapIsNull_shouldLoadNullParamsMap() throws Exception {
-        subject = new AdLoadTask.CustomEventAdLoadTask(adViewController, null);
+    public void execute_whenCustomEventIsNull_shouldDoNothing() {
+        subject = new AdLoader.CustomEventAdLoader(adViewController, null, serverExtras);
 
-        subject.execute();
+        subject.load();
 
-        verify(adViewController).setNotLoading();
-        verify(moPubView).loadCustomEvent((Map<String, String>) eq(null));
+        verify(adViewController, never()).setNotLoading();
+        verify(moPubView, never()).loadCustomEvent((String) eq(null), eq(serverExtras));
     }
 
     @Test
-    public void execute_afterCleanup_shouldLoadNullParamsMap() throws Exception {
-        subject.cleanup();
-        subject.execute();
+    public void execute_whenParamsMapIsNull_shouldLoadNullParamsMap() throws Exception {
+        subject = new AdLoader.CustomEventAdLoader(adViewController, customEventName, null);
+
+        subject.load();
 
         verify(adViewController).setNotLoading();
-        verify(moPubView).loadCustomEvent((Map<String, String>) eq(null));
+        verify(moPubView).loadCustomEvent(eq(customEventName), (Map<String, String>) eq(null));
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
index bba3f049..6067d6df 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
@@ -5,12 +5,15 @@
 import android.location.Location;
 import android.view.View;
 
+import com.mopub.common.AdReport;
+import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.factories.CustomEventBannerFactory;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mock;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
@@ -18,7 +21,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_TIMEOUT;
@@ -30,27 +32,35 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 public class CustomEventBannerAdapterTest {
     private CustomEventBannerAdapter subject;
+    @Mock
     private MoPubView moPubView;
+    @Mock
+    private AdReport mockAdReport;
     private static final String CLASS_NAME = "arbitrary_banner_adapter_class_name";
-    private static final String JSON_PARAMS = "{\"key\":\"value\",\"a different key\":\"a different value\"}";
+    private static final long BROADCAST_IDENTIFIER = 123;
+    private Map<String, String> serverExtras;
     private CustomEventBanner banner;
     private Map<String,Object> expectedLocalExtras;
     private HashMap<String,String> expectedServerExtras;
 
     @Before
     public void setUp() throws Exception {
-        moPubView = mock(MoPubView.class);
-        stub(moPubView.getAdTimeoutDelay()).toReturn(null);
 
-        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, JSON_PARAMS);
+        when(moPubView.getAdTimeoutDelay()).thenReturn(null);
+        serverExtras = new HashMap<String, String>();
+        serverExtras.put("key", "value");
+        serverExtras.put("another_key", "another_value");
+        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
 
         expectedLocalExtras = new HashMap<String, Object>();
+        expectedLocalExtras.put(DataKeys.AD_REPORT_KEY, mockAdReport);
+        expectedLocalExtras.put("broadcastIdentifier", BROADCAST_IDENTIFIER);
         expectedServerExtras = new HashMap<String, String>();
 
         banner = CustomEventBannerFactory.create(CLASS_NAME);
@@ -71,7 +81,7 @@ public void timeout_shouldSignalFailureAndInvalidateWithDefaultDelay() throws Ex
 
     @Test
     public void timeout_withNegativeAdTimeoutDelay_shouldSignalFailureAndInvalidateWithDefaultDelay() throws Exception {
-        stub(moPubView.getAdTimeoutDelay()).toReturn(-1);
+        when(moPubView.getAdTimeoutDelay()).thenReturn(-1);
 
         subject.loadAd();
 
@@ -86,7 +96,7 @@ public void timeout_withNegativeAdTimeoutDelay_shouldSignalFailureAndInvalidateW
 
     @Test
     public void timeout_withNonNullAdTimeoutDelay_shouldSignalFailureAndInvalidateWithCustomDelay() throws Exception {
-        stub(moPubView.getAdTimeoutDelay()).toReturn(77);
+       when(moPubView.getAdTimeoutDelay()).thenReturn(77);
 
         subject.loadAd();
 
@@ -99,18 +109,6 @@ public void timeout_withNonNullAdTimeoutDelay_shouldSignalFailureAndInvalidateWi
         assertThat(subject.isInvalidated()).isTrue();
     }
 
-    @Test
-    public void loadAd_shouldHaveEmptyServerExtrasOnInvalidJsonParams() throws Exception {
-        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, "{this is terrible JSON");
-        subject.loadAd();
-
-        verify(banner).loadBanner(
-                any(Context.class),
-                eq(subject),
-                eq(expectedLocalExtras),
-                eq(expectedServerExtras)
-        );
-    }
 
     @Test
     public void loadAd_shouldPropagateLocationInLocalExtras() throws Exception {
@@ -118,8 +116,8 @@ public void loadAd_shouldPropagateLocationInLocalExtras() throws Exception {
         expectedLocation.setLongitude(10.0);
         expectedLocation.setLongitude(20.1);
 
-        stub(moPubView.getLocation()).toReturn(expectedLocation);
-        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, null);
+        when(moPubView.getLocation()).thenReturn(expectedLocation);
+        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, new HashMap<String, String>(), BROADCAST_IDENTIFIER, mockAdReport);
         subject.loadAd();
 
         expectedLocalExtras.put("location", moPubView.getLocation());
@@ -133,11 +131,11 @@ public void loadAd_shouldPropagateLocationInLocalExtras() throws Exception {
     }
 
     @Test
-    public void loadAd_shouldPropagateJsonParamsInServerExtras() throws Exception {
+    public void loadAd_shouldPropagateServerExtrasToLoadBanner() throws Exception {
         subject.loadAd();
 
         expectedServerExtras.put("key", "value");
-        expectedServerExtras.put("a different key", "a different value");
+        expectedServerExtras.put("another_key", "another_value");
 
         verify(banner).loadBanner(
                 any(Context.class),
@@ -211,7 +209,7 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
                 .when(banner)
                 .loadBanner(
                         any(Context.class),
-                        any(CustomEventBanner.CustomEventBannerListener.class),
+                        any(CustomEventBannerListener.class),
                         any(Map.class),
                         any(Map.class)
                 );
@@ -225,7 +223,7 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
     public void onBannerLoaded_shouldSignalMoPubView() throws Exception {
         View view = new View(new Activity());
         subject.onBannerLoaded(view);
-        
+
         verify(moPubView).nativeAdLoaded();
         verify(moPubView).setAdContentView(eq(view));
         verify(moPubView).trackNativeImpression();
@@ -265,14 +263,14 @@ public void onBannerExpanded_shouldPauseRefreshAndCallAdPresentOverlay() throws
 
     @Test
     public void onBannerCollapsed_shouldRestoreRefreshSettingAndCallAdClosed() throws Exception {
-        stub(moPubView.getAutorefreshEnabled()).toReturn(true);
+        when(moPubView.getAutorefreshEnabled()).thenReturn(true);
         subject.onBannerExpanded();
         reset(moPubView);
         subject.onBannerCollapsed();
         verify(moPubView).setAutorefreshEnabled(eq(true));
         verify(moPubView).adClosed();
 
-        stub(moPubView.getAutorefreshEnabled()).toReturn(false);
+        when(moPubView.getAutorefreshEnabled()).thenReturn(false);
         subject.onBannerExpanded();
         reset(moPubView);
         subject.onBannerCollapsed();
@@ -327,19 +325,4 @@ public void invalidate_shouldCauseBannerListenerMethodsToDoNothing() throws Exce
         verify(moPubView, never()).adClosed();
         verify(moPubView, never()).registerClick();
     }
-
-    @Test
-    public void init_whenPassedHtmlData_shouldPutItInLocalExtras() throws Exception {
-        String expectedHtmlData = "expected html data";
-        expectedServerExtras.put(HTML_RESPONSE_BODY_KEY, expectedHtmlData);
-        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, "{\"Html-Response-Body\":\"expected html data\"}");
-        subject.loadAd();
-
-        verify(banner).loadBanner(
-                any(Context.class),
-                eq(subject),
-                eq(expectedLocalExtras),
-                eq(expectedServerExtras)
-        );
-    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
index 238a58d7..3649c405 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
@@ -3,18 +3,22 @@
 import android.content.Context;
 import android.location.Location;
 
+import com.mopub.common.AdReport;
+import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.factories.CustomEventInterstitialFactory;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mock;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
 
 import java.util.HashMap;
 import java.util.Map;
+import java.util.TreeMap;
 
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
@@ -32,27 +36,35 @@
 
 @RunWith(SdkTestRunner.class)
 public class CustomEventInterstitialAdapterTest {
+    private static long BROADCAST_IDENTIFER = 123;
     private CustomEventInterstitialAdapter subject;
-    private MoPubInterstitial moPubInterstitial;
+    @Mock
+    private MoPubInterstitial mockMoPubInterstitial;
     private CustomEventInterstitial interstitial;
     private Map<String, Object> expectedLocalExtras;
     private HashMap<String, String> expectedServerExtras;
-    private AdViewController adViewController;
+    @Mock
+    private AdViewController mockAdViewController;
+    @Mock
+    private AdReport mockAdReport;
     private MoPubInterstitial.MoPubInterstitialView moPubInterstitialView;
     private static final String CLASS_NAME = "arbitrary_interstitial_adapter_class_name";
-    private static final String JSON_PARAMS = "{\"key\":\"value\",\"a different key\":\"a different value\"}";
+    private Map<String, String> serverExtras;
     private CustomEventInterstitialAdapter.CustomEventInterstitialAdapterListener interstitialAdapterListener;
 
     @Before
     public void setUp() throws Exception {
-        moPubInterstitial = mock(MoPubInterstitial.class);
-        stub(moPubInterstitial.getAdTimeoutDelay()).toReturn(null);
+
+        stub(mockMoPubInterstitial.getAdTimeoutDelay()).toReturn(null);
         moPubInterstitialView = mock(MoPubInterstitial.MoPubInterstitialView.class);
-        adViewController = mock(AdViewController.class);
-        stub(moPubInterstitialView.getAdViewController()).toReturn(adViewController);
-        stub(moPubInterstitial.getMoPubInterstitialView()).toReturn(moPubInterstitialView);
+        stub(moPubInterstitialView.getAdViewController()).toReturn(mockAdViewController);
+        stub(mockAdViewController.getAdReport()).toReturn(mockAdReport);
+        stub(mockMoPubInterstitial.getMoPubInterstitialView()).toReturn(moPubInterstitialView);
+
+        serverExtras = new HashMap<String, String>();
+        serverExtras.put("key", "value");
 
-        subject = new CustomEventInterstitialAdapter(moPubInterstitial, CLASS_NAME, JSON_PARAMS);
+        subject = new CustomEventInterstitialAdapter(mockMoPubInterstitial, CLASS_NAME, serverExtras, BROADCAST_IDENTIFER, mockAdViewController.getAdReport());
 
         expectedLocalExtras = new HashMap<String, Object>();
         expectedServerExtras = new HashMap<String, String>();
@@ -68,8 +80,8 @@ public void constructor_withInvalidClassName_shouldCallOnCustomEventInterstitial
         // Remove testing mock and use the real thing
         CustomEventInterstitialFactory.setInstance(new CustomEventInterstitialFactory());
 
-        new CustomEventInterstitialAdapter(moPubInterstitial, "bad_class_name_11i234jb", null);
-        verify(moPubInterstitial).onCustomEventInterstitialFailed(ADAPTER_NOT_FOUND);
+        new CustomEventInterstitialAdapter(mockMoPubInterstitial, "bad_class_name_11i234jb", new TreeMap<String, String>(), BROADCAST_IDENTIFER, mockAdViewController.getAdReport());
+        verify(mockMoPubInterstitial).onCustomEventInterstitialFailed(ADAPTER_NOT_FOUND);
     }
 
     @Test
@@ -86,7 +98,7 @@ public void timeout_shouldSignalFailureAndInvalidateWithDefaultDelay() throws Ex
 
     @Test
     public void timeout_withNegativeAdTimeoutDelay_shouldSignalFailureAndInvalidateWithDefaultDelay() throws Exception {
-        stub(moPubInterstitial.getAdTimeoutDelay()).toReturn(-1);
+        stub(mockMoPubInterstitial.getAdTimeoutDelay()).toReturn(-1);
 
         subject.loadInterstitial();
         Robolectric.idleMainLooper(CustomEventInterstitialAdapter.DEFAULT_INTERSTITIAL_TIMEOUT_DELAY - 1);
@@ -100,7 +112,7 @@ public void timeout_withNegativeAdTimeoutDelay_shouldSignalFailureAndInvalidateW
 
     @Test
     public void timeout_withNonNullAdTimeoutDelay_shouldSignalFailureAndInvalidateWithCustomDelay() throws Exception {
-        stub(moPubInterstitial.getAdTimeoutDelay()).toReturn(77);
+        stub(mockMoPubInterstitial.getAdTimeoutDelay()).toReturn(77);
 
         subject.loadInterstitial();
         Robolectric.idleMainLooper(77000 - 1);
@@ -112,31 +124,18 @@ public void timeout_withNonNullAdTimeoutDelay_shouldSignalFailureAndInvalidateWi
         assertThat(subject.isInvalidated()).isTrue();
     }
 
-    @Test
-    public void loadInterstitial_shouldHaveEmptyServerExtrasOnInvalidJsonParams() throws Exception {
-        subject = new CustomEventInterstitialAdapter(moPubInterstitial, CLASS_NAME, "{this is terrible JSON");
-        subject.loadInterstitial();
-        expectedLocalExtras.put("Ad-Configuration", null);
-
-        verify(interstitial).loadInterstitial(
-                any(Context.class),
-                eq(subject),
-                eq(expectedLocalExtras),
-                eq(expectedServerExtras)
-        );
-    }
-
     @Test
     public void loadInterstitial_shouldPropagateLocationInLocalExtras() throws Exception {
         Location expectedLocation = new Location("");
         expectedLocation.setLongitude(10.0);
         expectedLocation.setLongitude(20.1);
-        stub(moPubInterstitial.getLocation()).toReturn(expectedLocation);
-        subject = new CustomEventInterstitialAdapter(moPubInterstitial, CLASS_NAME, null);
+        stub(mockMoPubInterstitial.getLocation()).toReturn(expectedLocation);
+        subject = new CustomEventInterstitialAdapter(mockMoPubInterstitial, CLASS_NAME, new HashMap<String, String>(), BROADCAST_IDENTIFER, mockAdViewController.getAdReport());
         subject.loadInterstitial();
 
-        expectedLocalExtras.put("Ad-Configuration", null);
-        expectedLocalExtras.put("location", moPubInterstitial.getLocation());
+        expectedLocalExtras.put("broadcastIdentifier", BROADCAST_IDENTIFER);
+        expectedLocalExtras.put(DataKeys.AD_REPORT_KEY, mockAdReport);
+        expectedLocalExtras.put("location", mockMoPubInterstitial.getLocation());
 
         verify(interstitial).loadInterstitial(
                 any(Context.class),
@@ -147,11 +146,11 @@ public void loadInterstitial_shouldPropagateLocationInLocalExtras() throws Excep
     }
 
     @Test
-    public void loadInterstitial_shouldPropagateJsonParamsInServerExtras() throws Exception {
+    public void loadInterstitial_shouldPropagateServerExtrasToInterstitial() throws Exception {
         subject.loadInterstitial();
-        expectedLocalExtras.put("Ad-Configuration", null);
+        expectedLocalExtras.put("broadcastIdentifier", BROADCAST_IDENTIFER);
+        expectedLocalExtras.put(DataKeys.AD_REPORT_KEY, mockAdReport);
         expectedServerExtras.put("key", "value");
-        expectedServerExtras.put("a different key", "a different value");
 
         verify(interstitial).loadInterstitial(
                 any(Context.class),
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
index eea9133c..e028844b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
@@ -5,6 +5,7 @@
 import android.content.IntentFilter;
 import android.support.v4.content.LocalBroadcastManager;
 
+import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
 
@@ -15,10 +16,11 @@
 import org.junit.runner.RunWith;
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
 
+import java.util.HashMap;
 import java.util.Iterator;
+import java.util.Map;
 import java.util.Set;
 
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
@@ -60,11 +62,14 @@ public void twoDifferentInterstitials_shouldNotHearEachOthersBroadcasts() throws
         final InterstitialAdListener listenerB = mock(InterstitialAdListener.class);
         interstitialB.setInterstitialAdListener(listenerB);
 
+        Map<String, String> serverExtras = new HashMap<String, String>();
+        serverExtras.put(DataKeys.HTML_RESPONSE_BODY_KEY, "response");
         final CustomEventInterstitialAdapter customEventInterstitialAdapter =
                 CustomEventInterstitialAdapterFactory.create(
                         interstitialA,
                         "com.mopub.mobileads.HtmlInterstitial",
-                        "{" + HTML_RESPONSE_BODY_KEY + ":response}");
+                        serverExtras, broadcastIdentifier, null);
+
 
         customEventInterstitialAdapter.loadInterstitial();
         verify(listenerA).onInterstitialLoaded(interstitialA);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
index d541d73d..4b7f81c9 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
@@ -1,16 +1,14 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
-import android.net.Uri;
 import android.view.Gravity;
 import android.widget.FrameLayout;
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHtmlBannerWebViewFactory;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.mobileads.test.support.TestMoPubViewFactory;
+import com.mopub.network.AdResponse;
 
-import org.apache.http.HttpResponse;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -19,10 +17,10 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import static com.mopub.mobileads.AdFetcher.CLICKTHROUGH_URL_KEY;
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
-import static com.mopub.mobileads.AdFetcher.SCROLLABLE_KEY;
+import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
+import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
+import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.anyString;
@@ -52,7 +50,7 @@ public void setup() {
         localExtras = new HashMap<String, Object>();
         serverExtras = new HashMap<String, String>();
         responseBody = "expected response body";
-        serverExtras.put(HTML_RESPONSE_BODY_KEY, Uri.encode(responseBody));
+        serverExtras.put(HTML_RESPONSE_BODY_KEY, responseBody);
         serverExtras.put(SCROLLABLE_KEY, "false");
     }
 
@@ -109,10 +107,9 @@ public void loadBanner_shouldCauseServerDimensionsToBeHonoredWhenLayingOutView()
         stub(moPubView.getContext()).toReturn(context);
         AdViewController adViewController = new AdViewController(context, moPubView);
 
-        HttpResponse response = new TestHttpResponseWithHeaders(200, "I ain't got no-body");
-        response.addHeader("X-Width", "320");
-        response.addHeader("X-Height", "50");
-        adViewController.configureUsingHttpResponse(response);
+
+        AdResponse adResponse = new AdResponse.Builder().setDimensions(320, 50).build();
+        adViewController.onAdLoadSuccess(adResponse);
 
         adViewController.setAdContentView(htmlBannerWebView);
         ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java
index aaf8a188..aea2d409 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java
@@ -3,11 +3,14 @@
 import android.app.Activity;
 import android.webkit.WebViewClient;
 
+import com.mopub.common.AdReport;
 import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
 
 import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
@@ -19,17 +22,17 @@
 
 @RunWith(SdkTestRunner.class)
 public class HtmlBannerWebViewTest {
-
-    private AdConfiguration adConfiguration;
     private HtmlBannerWebView subject;
+    @Mock
+    private AdReport mockAdReport;
     private CustomEventBannerListener customEventBannerListener;
     private String clickthroughUrl;
     private String redirectUrl;
 
     @Before
     public void setup() throws Exception {
-        adConfiguration = mock(AdConfiguration.class);
-        subject = new HtmlBannerWebView(new Activity(), adConfiguration);
+        subject = new HtmlBannerWebView(Robolectric.buildActivity(Activity.class).create().get(),
+                mockAdReport);
         customEventBannerListener = mock(CustomEventBannerListener.class);
         clickthroughUrl = "clickthroughUrl";
         redirectUrl = "redirectUrl";
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
index bceb9773..19d7184e 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
@@ -2,7 +2,6 @@
 
 import android.app.Activity;
 import android.content.Intent;
-import android.net.Uri;
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHtmlInterstitialWebViewFactory;
@@ -17,23 +16,21 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
-import static com.mopub.mobileads.AdFetcher.CLICKTHROUGH_URL_KEY;
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
-import static com.mopub.mobileads.AdFetcher.SCROLLABLE_KEY;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
+import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
+import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
+import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.withSettings;
 
 @RunWith(SdkTestRunner.class)
 public class HtmlInterstitialTest extends ResponseBodyInterstitialTest {
@@ -55,12 +52,10 @@ public void setUp() throws Exception {
         customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
         localExtras = new HashMap<String, Object>();
         serverExtras = new HashMap<String, String>();
-        serverExtras.put(HTML_RESPONSE_BODY_KEY, Uri.encode(expectedResponse));
+        serverExtras.put(HTML_RESPONSE_BODY_KEY, expectedResponse);
 
         broadcastIdentifier = 2222;
-        final AdConfiguration adConfiguration = mock(AdConfiguration.class, withSettings().serializable());
-        stub(adConfiguration.getBroadcastIdentifier()).toReturn(broadcastIdentifier);
-        localExtras.put(AD_CONFIGURATION_KEY, adConfiguration);
+        localExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
     }
 
     @Ignore("pending")
@@ -121,12 +116,12 @@ public void showInterstitial_shouldStartMoPubActivityWithAllExtras() throws Exce
     public void loadInterstitial_shouldConnectListenerToBroadcastReceiver() throws Exception {
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
 
-        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, subject.mAdConfiguration.getBroadcastIdentifier());
+        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
         ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
 
         verify(customEventInterstitialListener).onInterstitialShown();
 
-        intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, subject.mAdConfiguration.getBroadcastIdentifier());
+        intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, broadcastIdentifier);
         ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
 
         verify(customEventInterstitialListener).onInterstitialDismissed();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
index 7b34b996..20b99d54 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
@@ -4,11 +4,13 @@
 import android.os.Build.VERSION_CODES;
 import android.webkit.WebViewClient;
 
+import com.mopub.common.AdReport;
 import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mock;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
@@ -29,17 +31,17 @@
 @RunWith(SdkTestRunner.class)
 public class HtmlInterstitialWebViewTest {
 
+    @Mock AdReport mockAdReport;
     private HtmlInterstitialWebView subject;
     private CustomEventInterstitialListener customEventInterstitialListener;
     private String clickthroughUrl;
     private boolean isScrollable;
     private String redirectUrl;
-    private AdConfiguration adConfiguration;
 
     @Before
     public void setUp() throws Exception {
-        adConfiguration = mock(AdConfiguration.class);
-        subject = new HtmlInterstitialWebView(new Activity(), adConfiguration);
+        subject = new HtmlInterstitialWebView(Robolectric.buildActivity(Activity.class).create().get(),
+                mockAdReport);
         customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
         isScrollable = false;
         clickthroughUrl = "clickthroughUrl";
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
index 1087c207..69e8a19b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
@@ -28,6 +28,7 @@
 import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 public class HtmlWebViewClientTest {
@@ -35,12 +36,14 @@
     private HtmlWebViewClient subject;
     private HtmlWebViewListener htmlWebViewListener;
     private BaseHtmlWebView htmlWebView;
+    private Context context;
 
     @Before
     public void setUp() throws Exception {
         htmlWebViewListener = mock(HtmlWebViewListener.class);
         htmlWebView = mock(BaseHtmlWebView.class);
-        stub(htmlWebView.getContext()).toReturn(new Activity());
+        context = Robolectric.buildActivity(Activity.class).create().get().getApplicationContext();
+        when(htmlWebView.getContext()).thenReturn(context);
         subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, "clickthrough", "redirect");
     }
 
@@ -143,7 +146,8 @@ public void shouldOverrideUrlLoading_withCustomApplicationIntent_withUserClick_a
 
         assertThat(didOverrideUrl).isTrue();
         verify(htmlWebViewListener).onClicked();
-        assertActivityStarted();
+        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(intent).isNotNull();
     }
 
     @Test
@@ -184,7 +188,7 @@ public void shouldOverrideUrlLoading_withHttpUrl_withUserClick_shouldOpenBrowser
         assertThat(didOverrideUrl).isTrue();
         verify(htmlWebViewListener).onClicked();
 
-        Intent startedActivity = assertActivityStarted();
+        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(startedActivity.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
         assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(validUrl);
         assertThat(startedActivity.getData()).isNull();
@@ -210,7 +214,7 @@ public void shouldOverrideUrlLoading_withClickTrackingRedirect_withUserClick_sho
 
         subject.shouldOverrideUrlLoading(htmlWebView, validUrl);
 
-        Intent startedActivity = assertActivityStarted();
+        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(validUrl);
     }
 
@@ -231,7 +235,7 @@ public void shouldOverrideUrlLoading_withEmptyUrl_withUserClick_shouldLoadAboutB
 
         subject.shouldOverrideUrlLoading(htmlWebView, "");
 
-        Intent startedActivity = assertActivityStarted();
+        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(startedActivity.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
         assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo("about:blank");
         assertThat(startedActivity.getData()).isNull();
@@ -252,12 +256,14 @@ public void shouldOverrideUrlLoading_withNativeBrowserScheme_withUserClick_shoul
         stub(htmlWebView.wasClicked()).toReturn(true);
         subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
 
-        subject.shouldOverrideUrlLoading(htmlWebView, "mopubnativebrowser://navigate?url=http://mopub.com");
+        boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView,
+                "mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.mopub.com");
 
-        Intent startedActivity = assertActivityStarted();
-        assertThat(isWebsiteUrl(startedActivity.getData().toString()));
-        assertThat(startedActivity.getAction()).isEqualTo("android.intent.action.VIEW");
+        assertThat(shouldOverrideUrl).isTrue();
         verify(htmlWebViewListener).onClicked();
+        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(startedActivity.getAction()).isEqualTo("android.intent.action.VIEW");
+        assertThat(startedActivity.getData().toString()).isEqualTo("http://www.mopub.com");
     }
 
     @Test
@@ -265,8 +271,10 @@ public void shouldOverrideUrlLoading_withNativeBrowserScheme_withoutUserClick_sh
         stub(htmlWebView.wasClicked()).toReturn(false);
         subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
 
-        subject.shouldOverrideUrlLoading(htmlWebView, "mopubnativebrowser://navigate?url=http://mopub.com");
+        boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView,
+                "mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.mopub.com");
 
+        assertThat(shouldOverrideUrl).isTrue();
         verify(htmlWebViewListener, never()).onClicked();
         assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
     }
@@ -274,26 +282,29 @@ public void shouldOverrideUrlLoading_withNativeBrowserScheme_withoutUserClick_sh
     @Test
     public void shouldOverrideUrlLoading_withNativeBrowserScheme_butOpaqueUri_withUserClick_shouldNotBeHandledByNativeBrowser() throws Exception {
         stub(htmlWebView.wasClicked()).toReturn(true);
-        String opaqueNativeBrowserUriString = "mopubnativebrowser:navigate?url=http://mopub.com";
+        String opaqueNativeBrowserUriString = "mopubnativebrowser:navigate?url=http%3A%2F%2Fwww.mopub.com";
         subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
 
-        subject.shouldOverrideUrlLoading(htmlWebView, opaqueNativeBrowserUriString);
+        boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, opaqueNativeBrowserUriString);
 
-        Intent startedActivity = assertActivityStarted();
+        assertThat(shouldOverrideUrl).isTrue();
+        verify(htmlWebViewListener).onClicked();
+        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(startedActivity.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
         assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(opaqueNativeBrowserUriString);
         assertThat(startedActivity.getData()).isNull();
-        verify(htmlWebViewListener).onClicked();
     }
 
     @Test
     public void shouldOverrideUrlLoading_withNativeBrowserScheme_butOpaqueUri_withoutUserClick_shouldNotLoad() throws Exception {
         stub(htmlWebView.wasClicked()).toReturn(false);
-        String opaqueNativeBrowserUriString = "mopubnativebrowser:navigate?url=http://mopub.com";
+        String opaqueNativeBrowserUriString = "mopubnativebrowser:navigate?url=http%3A%2F%2Fwww.mopub.com";
         subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
 
-        subject.shouldOverrideUrlLoading(htmlWebView, opaqueNativeBrowserUriString);
+        boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, opaqueNativeBrowserUriString);
 
+        assertThat(shouldOverrideUrl).isTrue();
+        verify(htmlWebViewListener, never()).onClicked();
         assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
     }
 
@@ -302,9 +313,10 @@ public void shouldOverrideUrlLoading_withNativeBrowserScheme_withInvalidHostSche
         stub(htmlWebView.wasClicked()).toReturn(true);
         subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
 
-        subject.shouldOverrideUrlLoading(htmlWebView, "something://blah?url=invalid");
+        boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "something://blah?url=invalid");
 
-        Intent startedActivity = assertActivityStarted();
+        assertThat(shouldOverrideUrl).isTrue();
+        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(startedActivity.getAction()).isNotEqualTo("android.intent.action.VIEW");
         verify(htmlWebViewListener).onClicked();
     }
@@ -314,15 +326,13 @@ public void shouldOverrideUrlLoading_withNativeBrowserScheme_withInvalidHostSche
         stub(htmlWebView.wasClicked()).toReturn(false);
         subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
 
-        subject.shouldOverrideUrlLoading(htmlWebView, "something://blah?url=invalid");
+        boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "something://blah?url=invalid");
 
+        assertThat(shouldOverrideUrl).isTrue();
+        verify(htmlWebViewListener, never()).onClicked();
         assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
     }
 
-    private boolean isWebsiteUrl(String url){
-        return url.startsWith("http://") || url.startsWith("https://");
-    }
-
     @Test
     public void onPageStarted_whenLoadedUrlStartsWithRedirect_withUserClick_shouldOpenInBrowser() throws Exception {
         String url = "redirectUrlToLoad";
@@ -473,7 +483,7 @@ private void assertPhoneUrlStartedCorrectIntent(String url) {
 
         stub(htmlWebView.wasClicked()).toReturn(true);
         didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, url);
-        Intent startedActivity = assertActivityStarted();
+        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_VIEW);
         assertThat(startedActivity.getData().toString()).isEqualTo(url);
         assertThat(didOverrideUrl).isTrue();
@@ -487,11 +497,4 @@ private void assertPhoneUrlStartedCorrectIntent(String url) {
         verify(htmlWebViewListener, never()).onClicked();
         reset(htmlWebViewListener);
     }
-
-    private Intent assertActivityStarted() {
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedActivity).isNotNull();
-        assertThat(startedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        return startedActivity;
-    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
index 1a1a3660..2b7b32f2 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
@@ -9,6 +9,7 @@
 import android.webkit.WebViewClient;
 import android.widget.FrameLayout;
 
+import com.mopub.common.AdReport;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHtmlInterstitialWebViewFactory;
 
@@ -20,18 +21,17 @@
 import org.robolectric.Robolectric;
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
 
-import static com.mopub.mobileads.AdFetcher.CLICKTHROUGH_URL_KEY;
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
-import static com.mopub.mobileads.AdFetcher.SCROLLABLE_KEY;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest
-        .getIntentForActionAndIdentifier;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
+import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
+import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
+import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
 import static com.mopub.mobileads.HtmlInterstitialWebView.MoPubUriJavascriptFireFinishLoadListener;
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -40,21 +40,19 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
-import static org.mockito.Mockito.withSettings;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
 public class MoPubActivityTest {
     private static final String EXPECTED_HTML_DATA = "htmlData";
     private static final boolean EXPECTED_IS_SCROLLABLE = true;
+    @Mock private AdReport mockAdReport;
     private static final String EXPECTED_REDIRECT_URL = "redirectUrl";
     private static final String EXPECTED_CLICKTHROUGH_URL = "http://expected_url";
 
     @Mock private BroadcastReceiver broadcastReceiver;
-    private AdConfiguration adConfiguration;
     private long testBroadcastIdentifier = 2222;
 
     private HtmlInterstitialWebView htmlInterstitialWebView;
@@ -67,14 +65,11 @@ public void setUp() throws Exception {
         htmlInterstitialWebView = TestHtmlInterstitialWebViewFactory.getSingletonMock();
         resetMockedView(htmlInterstitialWebView);
 
-        adConfiguration = mock(AdConfiguration.class, withSettings().serializable());
-        when(adConfiguration.getBroadcastIdentifier()).thenReturn(testBroadcastIdentifier);
-
         Context context = Robolectric.buildActivity(Activity.class).create().get();
         Intent moPubActivityIntent = MoPubActivity.createIntent(context,
-                EXPECTED_HTML_DATA, EXPECTED_IS_SCROLLABLE,
+                EXPECTED_HTML_DATA, mockAdReport, EXPECTED_IS_SCROLLABLE,
                 EXPECTED_REDIRECT_URL,
-                EXPECTED_CLICKTHROUGH_URL, adConfiguration);
+                EXPECTED_CLICKTHROUGH_URL, testBroadcastIdentifier);
 
         subject = Robolectric.buildActivity(MoPubActivity.class).withIntent(moPubActivityIntent).create().get();
         customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
@@ -85,7 +80,7 @@ public void setUp() throws Exception {
     @Test
     public void preRenderHtml_shouldPreloadTheHtml() throws Exception {
         String htmlData = "this is nonsense";
-        MoPubActivity.preRenderHtml(subject, customEventInterstitialListener, htmlData);
+        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener, htmlData);
 
         verify(htmlInterstitialWebView).enablePlugins(eq(false));
         verify(htmlInterstitialWebView).addMoPubUriJavascriptInterface(any(MoPubUriJavascriptFireFinishLoadListener.class));
@@ -94,7 +89,7 @@ public void preRenderHtml_shouldPreloadTheHtml() throws Exception {
 
     @Test
     public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFinishLoad() throws Exception {
-        MoPubActivity.preRenderHtml(subject, customEventInterstitialListener, null);
+        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener, null);
 
         ArgumentCaptor<WebViewClient> webViewClientCaptor = ArgumentCaptor.forClass(WebViewClient.class);
         verify(htmlInterstitialWebView).setWebViewClient(webViewClientCaptor.capture());
@@ -108,7 +103,7 @@ public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFinishLoad() throw
 
     @Test
     public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFailLoad() throws Exception {
-        MoPubActivity.preRenderHtml(subject, customEventInterstitialListener, null);
+        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener, null);
 
         ArgumentCaptor<WebViewClient> webViewClientCaptor = ArgumentCaptor.forClass(WebViewClient.class);
         verify(htmlInterstitialWebView).setWebViewClient(webViewClientCaptor.capture());
@@ -122,7 +117,7 @@ public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFailLoad() throws
 
     @Test
     public void preRenderHtml_shouldHaveAMoPubUriInterfaceThatForwardsOnInterstitialLoaded() throws Exception {
-        MoPubActivity.preRenderHtml(subject, customEventInterstitialListener, null);
+        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener, null);
 
         ArgumentCaptor<MoPubUriJavascriptFireFinishLoadListener> moPubUriJavascriptFireFinishLoadListenerCaptor = ArgumentCaptor.forClass(MoPubUriJavascriptFireFinishLoadListener.class);
         verify(htmlInterstitialWebView).addMoPubUriJavascriptInterface(moPubUriJavascriptFireFinishLoadListenerCaptor.capture());
@@ -183,7 +178,7 @@ public void onDestroy_shouldFireJavascriptWebviewDidClose() throws Exception {
 
     @Test
     public void start_shouldStartMoPubActivityWithCorrectParameters() throws Exception {
-        MoPubActivity.start(subject, "expectedResponse", true, "redirectUrl", "clickthroughUrl", adConfiguration);
+        MoPubActivity.start(subject, "expectedResponse", mockAdReport, true, "redirectUrl", "clickthroughUrl", testBroadcastIdentifier);
 
         Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo("expectedResponse");
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
index 3ca84fce..f00385a4 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
@@ -1,37 +1,34 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
-import android.provider.Settings;
 
-import com.mopub.common.GpsHelper;
-import com.mopub.common.GpsHelperTest;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Reflection.MethodBuilder;
-import com.mopub.common.util.Utils;
-import com.mopub.common.util.test.support.TestMethodBuilderFactory;
+import com.mopub.network.Networking;
+import com.mopub.network.TrackingRequest;
+import com.mopub.volley.RequestQueue;
+import com.mopub.volley.VolleyError;
 
-import org.apache.http.HttpRequest;
-import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.tester.org.apache.http.FakeHttpLayer;
-import org.robolectric.tester.org.apache.http.HttpRequestInfo;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Captor;
+import org.mockito.Mock;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
 import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.when;
-import static org.robolectric.Robolectric.application;
+import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
 public class MoPubConversionTrackerTest {
     private MoPubConversionTracker subject;
     private Activity context;
-    private FakeHttpLayer fakeHttpLayer;
-    private MethodBuilder methodBuilder;
+    @Mock
+    RequestQueue mockRequestQueue;
+    @Captor
+    ArgumentCaptor<TrackingRequest> requestCaptor;
+
     private String expectedUdid;
     private boolean dnt = false;
     private static final String TEST_UDID = "20b013c721c";
@@ -40,101 +37,31 @@
     public void setUp() throws Exception {
         subject = new MoPubConversionTracker();
         context = new Activity();
-        fakeHttpLayer = Robolectric.getFakeHttpLayer();
-        methodBuilder = TestMethodBuilderFactory.getSingletonMock();
-        Settings.Secure.putString(application.getContentResolver(), Settings.Secure.ANDROID_ID, TEST_UDID);
-        expectedUdid = "sha%3A" + Utils.sha1(TEST_UDID);
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        reset(methodBuilder);
+        Networking.setRequestQueueForTesting(mockRequestQueue);
     }
 
     @Test
-    public void reportAppOpen_onValidHttpResponse_isIdempotent() throws Exception {
-        fakeHttpLayer.addPendingHttpResponse(200, "doesn't matter what this is as long as it's not nothing");
-        subject.reportAppOpen(context);
-        assertRequestMade(true);
-
-        fakeHttpLayer.addPendingHttpResponse(200, "doesn't matter what this is as long as it's not nothing");
+    public void reportAppOpen_Twice_shouldCallOnlyOnce() {
         subject.reportAppOpen(context);
-        assertRequestMade(false);
-    }
+        verify(mockRequestQueue).add(requestCaptor.capture());
 
-    @Test
-    public void reportAppOpen_onInvalidStatusCode_shouldMakeSecondRequest() throws Exception {
-        fakeHttpLayer.addPendingHttpResponse(404, "doesn't matter what this is as long as it's not nothing");
-        subject.reportAppOpen(context);
-        assertRequestMade(true);
+        reset(mockRequestQueue);
+        requestCaptor.getValue().deliverResponse(null);
 
-        fakeHttpLayer.addPendingHttpResponse(404, "doesn't matter what this is as long as it's not nothing");
         subject.reportAppOpen(context);
-        assertRequestMade(true);
+        verify(mockRequestQueue, never()).add(any(TrackingRequest.class));
     }
 
     @Test
-    public void reportAppOpen_onEmptyResponse_shouldMakeSecondRequest() throws Exception {
-        fakeHttpLayer.addPendingHttpResponse(200, "");
+    public void reportAppOpen_fails_shouldCallAgain() {
         subject.reportAppOpen(context);
-        assertRequestMade(true);
+        verify(mockRequestQueue).add(requestCaptor.capture());
 
-        fakeHttpLayer.addPendingHttpResponse(200, "");
-        subject.reportAppOpen(context);
-        assertRequestMade(true);
-    }
+        reset(mockRequestQueue);
+        requestCaptor.getValue().deliverError(new VolleyError());
 
-    @Test
-    public void reportAppOpen_whenGooglePlayServicesIsLinkedAndAdInfoIsNotCached_shouldUseAdInfoParams() throws Exception {
-        GpsHelper.setClassNamesForTesting();
-        GpsHelperTest.verifyCleanClientMetadata(context);
-        GpsHelperTest.TestAdInfo adInfo = new GpsHelperTest.TestAdInfo();
-
-        when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
-        when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
-        when(methodBuilder.execute()).thenReturn(
-                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE,
-                adInfo,
-                adInfo.mAdId,
-                adInfo.mLimitAdTrackingEnabled,
-                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE
-        );
-
-        expectedUdid = "ifa%3A" + adInfo.mAdId;
-        dnt = true;
-
-        fakeHttpLayer.addPendingHttpResponse(200, "doesn't matter what this is as long as it's not nothing");
         subject.reportAppOpen(context);
-        Thread.sleep(500); // extra sleep since there are 2 async tasks
-        assertRequestMade(true);
-    }
-
-    private void assertRequestMade(boolean shouldRequestBeMade) throws Exception {
-        StringBuilder stringBuilder = new StringBuilder("http://ads.mopub.com/m/open")
-                .append("?v=6")
-                .append("&id=").append("com.mopub.mobileads")
-                .append("&udid=").append(expectedUdid);
-
-        if (dnt) {
-            stringBuilder.append("&dnt=1");
-        }
-
-        String expectedUrl = stringBuilder.append("&av=")
-                .append("1.0")
-                .toString();
-
-        Thread.sleep(500);
-        HttpRequestInfo lastSentHttpRequestInfo = fakeHttpLayer.getLastSentHttpRequestInfo();
-        if (lastSentHttpRequestInfo == null) {
-            if (shouldRequestBeMade) {
-                fail("No request info in the http layer");
-            }
-            return;
-        }
-        HttpRequest request = lastSentHttpRequestInfo.getHttpRequest();
-        fakeHttpLayer.clearRequestInfos();
-        String actualUrl = request.getRequestLine().getUri();
-        assertThat(actualUrl).isEqualTo(expectedUrl);
+        verify(mockRequestQueue).add(any(TrackingRequest.class));
     }
 }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
index 274a7e04..f1ae01ae 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
@@ -18,8 +18,6 @@
 import java.util.Map;
 
 import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_HTML_DATA;
-import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
 import static com.mopub.mobileads.MoPubErrorCode.CANCELLED;
 import static com.mopub.mobileads.MoPubErrorCode.INTERNAL_ERROR;
@@ -40,11 +38,12 @@
     private static final String CLICKTHROUGH_URL_VALUE = "expected_clickthrough_url";
     private Activity activity;
     private MoPubInterstitial subject;
-    private Map<String, String> paramsMap;
+    private Map<String, String> serverExtras;
     private CustomEventInterstitialAdapter customEventInterstitialAdapter;
     private MoPubInterstitial.InterstitialAdListener interstitialAdListener;
     private MoPubInterstitial.MoPubInterstitialView interstitialView;
     private AdViewController adViewController;
+    private String customEventClassName;
 
     @Before
     public void setUp() throws Exception {
@@ -55,9 +54,9 @@ public void setUp() throws Exception {
 
         interstitialView = mock(MoPubInterstitial.MoPubInterstitialView.class);
 
-        paramsMap = new HashMap<String, String>();
-        paramsMap.put(CUSTOM_EVENT_NAME.getKey(), "class name");
-        paramsMap.put(CUSTOM_EVENT_DATA.getKey(), "class data");
+        customEventClassName = "class name";
+        serverExtras = new HashMap<String, String>();
+        serverExtras.put("testExtra", "class data");
 
         customEventInterstitialAdapter = TestCustomEventInterstitialAdapterFactory.getSingletonMock();
         reset(customEventInterstitialAdapter);
@@ -134,11 +133,11 @@ public void setLocalExtrasTest() throws Exception {
     @Test
     public void loadCustomEvent_shouldCreateAndLoadCustomEventInterstitialAdapter() throws Exception {
         MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
-        moPubInterstitialView.loadCustomEvent(paramsMap);
+        moPubInterstitialView.loadCustomEvent(customEventClassName, serverExtras);
 
         assertThat(TestCustomEventInterstitialAdapterFactory.getLatestMoPubInterstitial()).isSameAs(subject);
         assertThat(TestCustomEventInterstitialAdapterFactory.getLatestClassName()).isEqualTo("class name");
-        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestClassData()).isEqualTo("class data");
+        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestServerExtras().get("testExtra")).isEqualTo("class data");
     }
 
     @Test
@@ -307,17 +306,15 @@ public void dismissingCustomEventInterstitial_shouldNotBecomeReadyToShowCustomEv
     }
 
     @Test
-    public void loadCustomEvent_shouldInitializeCustomEventBannerAdapter() throws Exception {
+    public void loadCustomEvent_shouldInitializeCustomEventInterstitialAdapter() throws Exception {
         MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
 
-        paramsMap.put(CUSTOM_EVENT_NAME.getKey(), "name");
-        paramsMap.put(CUSTOM_EVENT_DATA.getKey(), "data");
-        paramsMap.put(CUSTOM_EVENT_HTML_DATA.getKey(), "html");
-        moPubInterstitialView.loadCustomEvent(paramsMap);
+        serverExtras.put("testExtra", "data");
+        moPubInterstitialView.loadCustomEvent("name", serverExtras);
 
         assertThat(TestCustomEventInterstitialAdapterFactory.getLatestMoPubInterstitial()).isEqualTo(subject);
         assertThat(TestCustomEventInterstitialAdapterFactory.getLatestClassName()).isEqualTo("name");
-        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestClassData()).isEqualTo("data");
+        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestServerExtras().get("testExtra")).isEqualTo("data");
 
         verify(customEventInterstitialAdapter).setAdapterListener(eq(subject));
         verify(customEventInterstitialAdapter).loadInterstitial();
@@ -327,7 +324,7 @@ public void loadCustomEvent_shouldInitializeCustomEventBannerAdapter() throws Ex
     public void loadCustomEvent_whenParamsMapIsNull_shouldCallLoadFailUrl() throws Exception {
         MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
 
-        moPubInterstitialView.loadCustomEvent(null);
+        moPubInterstitialView.loadCustomEvent(null, null);
 
         verify(adViewController).loadFailUrl(eq(ADAPTER_NOT_FOUND));
         verify(customEventInterstitialAdapter, never()).invalidate();
@@ -345,15 +342,13 @@ public void adFailed_shouldNotifyInterstitialAdListener() throws Exception {
     private void loadCustomEvent() {
         MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
 
-        paramsMap.put(CUSTOM_EVENT_NAME.getKey(), "name");
-        paramsMap.put(CUSTOM_EVENT_DATA.getKey(), "data");
-        paramsMap.put(CUSTOM_EVENT_HTML_DATA.getKey(), "html");
-        moPubInterstitialView.loadCustomEvent(paramsMap);
+        serverExtras.put(CUSTOM_EVENT_DATA.getKey(), "data");
+        moPubInterstitialView.loadCustomEvent("name", serverExtras);
     }
 
     private void assertShowsCustomEventInterstitial(boolean shouldBeReady) {
         MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
-        moPubInterstitialView.loadCustomEvent(paramsMap);
+        moPubInterstitialView.loadCustomEvent(customEventClassName, serverExtras);
 
         assertThat(subject.isReady()).isEqualTo(shouldBeReady);
         assertThat(subject.show()).isEqualTo(shouldBeReady);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
index 57095db9..cffcf3dc 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
@@ -21,9 +21,6 @@
 import java.util.List;
 import java.util.Map;
 
-import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_HTML_DATA;
-import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.eq;
@@ -176,21 +173,18 @@ public void nativeAdLoaded_shouldScheduleRefreshTimer() throws Exception {
 
     @Test
     public void loadCustomEvent_shouldInitializeCustomEventBannerAdapter() throws Exception {
-        paramsMap.put(CUSTOM_EVENT_NAME.getKey(), "name");
-        paramsMap.put(CUSTOM_EVENT_DATA.getKey(), "data");
-        paramsMap.put(CUSTOM_EVENT_HTML_DATA.getKey(), "html");
-        subject.loadCustomEvent(paramsMap);
+        subject.loadCustomEvent("name", paramsMap);
 
         assertThat(TestCustomEventBannerAdapterFactory.getLatestMoPubView()).isEqualTo(subject);
         assertThat(TestCustomEventBannerAdapterFactory.getLatestClassName()).isEqualTo("name");
-        assertThat(TestCustomEventBannerAdapterFactory.getLatestClassData()).isEqualTo("data");
+        assertThat(TestCustomEventBannerAdapterFactory.getLatestClassData()).isEqualTo(paramsMap);
 
         verify(customEventBannerAdapter).loadAd();
     }
 
     @Test
     public void loadCustomEvent_whenParamsMapIsNull_shouldCallLoadFailUrl() throws Exception {
-        subject.loadCustomEvent(null);
+        subject.loadCustomEvent(null, null);
 
         verify(adViewController).loadFailUrl(eq(ADAPTER_NOT_FOUND));
         verify(customEventBannerAdapter, never()).invalidate();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
index 5d41d5f6..26c495aa 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
@@ -28,22 +28,19 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
 
-import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
+import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.withSettings;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
@@ -55,7 +52,6 @@
     @Mock MraidController mraidController;
     @Mock CustomEventInterstitial.CustomEventInterstitialListener
             customEventInterstitialListener;
-    @Mock AdConfiguration adConfiguration;
     @Mock BroadcastReceiver broadcastReceiver;
 
     long testBroadcastIdentifier = 2222;
@@ -320,9 +316,7 @@ private Intent createMraidActivityIntent(String expectedSource) {
         mraidActivityIntent.setComponent(new ComponentName("", ""));
         mraidActivityIntent.putExtra(HTML_RESPONSE_BODY_KEY, expectedSource);
 
-        adConfiguration = mock(AdConfiguration.class, withSettings().serializable());
-        stub(adConfiguration.getBroadcastIdentifier()).toReturn(testBroadcastIdentifier);
-        mraidActivityIntent.putExtra(AD_CONFIGURATION_KEY, adConfiguration);
+        mraidActivityIntent.putExtra(BROADCAST_IDENTIFIER_KEY, testBroadcastIdentifier);
 
         return mraidActivityIntent;
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
index fc85d6a2..05bc9bc7 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
@@ -20,12 +20,11 @@
 import org.robolectric.Robolectric;
 import org.robolectric.shadows.ShadowActivity;
 
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-import static org.mockito.Mockito.withSettings;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
@@ -45,10 +44,7 @@ public void setup() {
         intent = new Intent(context, MraidVideoPlayerActivity.class);
 
         testBroadcastIdentifier = 1001;
-        AdConfiguration adConfiguration = mock(AdConfiguration.class, withSettings().serializable());
-        when(adConfiguration.getBroadcastIdentifier()).thenReturn(testBroadcastIdentifier);
-        intent.putExtra(AdFetcher.AD_CONFIGURATION_KEY, adConfiguration);
-
+        intent.putExtra(BROADCAST_IDENTIFIER_KEY, testBroadcastIdentifier);
         baseVideoViewController = mock(BaseVideoViewController.class);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
index a63cec8f..0b820fb3 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
@@ -3,9 +3,9 @@
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
-import android.net.Uri;
 
 import com.mopub.common.CacheServiceTest;
+import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.mobileads.test.support.TestVastManagerFactory;
@@ -25,8 +25,8 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
+import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
@@ -40,7 +40,6 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.withSettings;
 
@@ -56,7 +55,6 @@
     private String videoUrl;
     private VastVideoDownloadTask vastVideoDownloadTask;
     private long broadcastIdentifier;
-    private AdConfiguration adConfiguration;
 
     @Before
     public void setUp() throws Exception {
@@ -71,14 +69,12 @@ public void setUp() throws Exception {
         customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
         localExtras = new HashMap<String, Object>();
         serverExtras = new HashMap<String, String>();
-        serverExtras.put(AdFetcher.HTML_RESPONSE_BODY_KEY, Uri.encode(expectedResponse));
+        serverExtras.put(DataKeys.HTML_RESPONSE_BODY_KEY, expectedResponse);
 
         response = new TestHttpResponseWithHeaders(200, expectedResponse);
 
         broadcastIdentifier = 2222;
-        adConfiguration = mock(AdConfiguration.class, withSettings().serializable());
-        stub(adConfiguration.getBroadcastIdentifier()).toReturn(broadcastIdentifier);
-        localExtras.put(AD_CONFIGURATION_KEY, adConfiguration);
+        localExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
     }
 
     @After
@@ -163,10 +159,10 @@ public void showInterstitial_shouldStartVideoPlayerActivityWithAllValidTrackers(
         ((VastVideoInterstitial) subject).onVastVideoConfigurationPrepared(vastVideoConfiguration);
 
         subject.showInterstitial();
-        BaseVideoPlayerActivitiyTest.assertVastVideoPlayerActivityStarted(
+        BaseVideoPlayerActivityTest.assertVastVideoPlayerActivityStarted(
                 MraidVideoPlayerActivity.class,
                 vastVideoConfiguration,
-                adConfiguration
+                broadcastIdentifier
                 );
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
index 4133c52f..d0e20722 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
@@ -23,6 +23,9 @@
 import com.mopub.mobileads.test.support.GestureUtils;
 import com.mopub.mobileads.util.vast.VastCompanionAd;
 import com.mopub.mobileads.util.vast.VastVideoConfiguration;
+import com.mopub.network.Networking;
+import com.mopub.volley.Request;
+import com.mopub.volley.RequestQueue;
 
 import org.apache.http.HttpRequest;
 import org.apache.maven.artifact.ant.shaded.ReflectionUtils;
@@ -32,6 +35,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
+import org.mockito.Mock;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
@@ -45,8 +49,10 @@
 
 import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
 import static com.mopub.common.MoPubBrowser.DESTINATION_URL_KEY;
+import static com.mopub.common.VolleyRequestMatcher.isUrl;
 import static com.mopub.common.util.test.support.CommonUtils.assertHttpRequestsMade;
 import static com.mopub.mobileads.BaseVideoViewController.BaseVideoViewControllerListener;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
@@ -58,18 +64,21 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.argThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.verifyZeroInteractions;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
 public class VastVideoViewControllerTest {
     public static final int NETWORK_DELAY = 500;
-    private MediaPlayer mediaPlayer;
+
     private Context context;
     private Bundle bundle;
     private long testBroadcastIdentifier;
@@ -79,9 +88,14 @@
     private int expectedBrowserRequestCode;
     private String expectedUserAgent;
 
+    @Mock
+    RequestQueue mockRequestQueue;
+    @Mock
+    private MediaPlayer mockMediaPlayer;
+
     @Before
     public void setUp() throws Exception {
-        mediaPlayer = mock(MediaPlayer.class);
+        Networking.setRequestQueueForTesting(mockRequestQueue);
         context = new Activity();
         bundle = new Bundle();
         testBroadcastIdentifier = 1111;
@@ -117,6 +131,7 @@ public void setUp() throws Exception {
         Robolectric.getBackgroundScheduler().pause();
         Robolectric.clearPendingHttpResponses();
 
+        // Used to give responses to Vast Download Tasks.
         Robolectric.addHttpResponseRule(new RequestMatcher() {
             @Override
             public boolean matches(HttpRequest request) {
@@ -133,32 +148,10 @@ public boolean matches(HttpRequest request) {
     public void tearDown() throws Exception {
         Robolectric.getUiThreadScheduler().reset();
         Robolectric.getBackgroundScheduler().reset();
-        Robolectric.clearPendingHttpResponses();
 
         ShadowLocalBroadcastManager.getInstance(context).unregisterReceiver(broadcastReceiver);
     }
 
-    @Test
-    public void constructor_shouldPingImpressionTrackers() throws Exception {
-        // XXX this test needs to be at the top of the constructor tests since it checks for async
-        // http requests. If it's below any other constructor tests, there is a chance outstanding
-        // async requests will not run until this tests starts, thus polluting the http requests
-
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addStartTrackers(Arrays.asList("start"));
-        vastVideoConfiguration.addImpressionTrackers(Arrays.asList("imp"));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
-
-        initializeSubject();
-
-        Robolectric.getUiThreadScheduler().unPause();
-        Robolectric.getBackgroundScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
-
-        assertHttpRequestsMade(expectedUserAgent, "imp");
-    }
-
     @Test
     public void constructor_shouldAddVastVideoToolbarToLayout() throws Exception {
         initializeSubject();
@@ -230,18 +223,6 @@ public void constructor_withNullVastVideoConfigurationDiskMediaFileUrl_shouldThr
         }
     }
 
-    @Test
-    public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, testBroadcastIdentifier);
-
-        initializeSubject();
-
-        subject.onCreate();
-        Robolectric.getUiThreadScheduler().unPause();
-
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-    }
-
     @Test
     public void onCreate_withCompanionAd_shouldDownloadCompanionAd() throws Exception {
         initializeSubject();
@@ -257,6 +238,25 @@ public void onCreate_withCompanionAd_shouldDownloadCompanionAd() throws Exceptio
         assertThat(shadowOf(((BitmapDrawable) imageView.getDrawable()).getBitmap()).getCreatedFromBytes()).isEqualTo("body".getBytes());
     }
 
+    @Test
+    public void onCreate_shouldFireImpressionTracker() throws Exception {
+        initializeSubject();
+
+        subject.onCreate();
+        verify(mockRequestQueue).add(argThat(isUrl("imp")));
+    }
+
+    @Test
+    public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
+        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, testBroadcastIdentifier);
+
+        initializeSubject();
+
+        Robolectric.getUiThreadScheduler().unPause();
+        subject.onCreate();
+        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
+    }
+
     @Test
     public void onComplete_withNullDownloadResponse_shouldNotSetCompanionAdImageBitmap() throws Exception {
         initializeSubject();
@@ -282,15 +282,12 @@ public void onClick_withCompanionAd_shouldFireCompanionAdClickTrackersAndStartMo
         Thread.sleep(NETWORK_DELAY);
 
         assertThat(imageView.performClick()).isTrue();
-        Thread.sleep(NETWORK_DELAY);
 
-        assertHttpRequestsMade(
-                expectedUserAgent,
-                "companion_image_url",
-                "imp",
-                "companion_click_tracking_url_1",
-                "companion_click_tracking_url_2"
-        );
+        // This request is still made by the older http stack.
+        assertHttpRequestsMade(expectedUserAgent, "companion_image_url");
+
+        verify(mockRequestQueue).add(argThat(isUrl("companion_click_tracking_url_1")));
+        verify(mockRequestQueue).add(argThat(isUrl("companion_click_tracking_url_2")));
 
         ArgumentCaptor<Bundle> bundleCaptor = ArgumentCaptor.forClass(Bundle.class);
         verify(baseVideoViewControllerListener).onStartActivityForResult(
@@ -350,11 +347,11 @@ public void onActivityResult_withIncorrectResultCode_shouldNotCallFinish() throw
 
     @Test
     public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickBeforeEnd_shouldDoNothing() throws Exception {
-        stub(mediaPlayer.getDuration()).toReturn(15999);
-        stub(mediaPlayer.getCurrentPosition()).toReturn(15990);
+        stub(mockMediaPlayer.getDuration()).toReturn(15999);
+        stub(mockMediaPlayer.getCurrentPosition()).toReturn(15990);
 
         initializeSubject();
-        setMediaPlayer(mediaPlayer);
+        setMockMediaPlayer(mockMediaPlayer);
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
 
         Robolectric.getUiThreadScheduler().unPause();
@@ -367,13 +364,13 @@ public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickBeforeEnd_sho
 
     @Test
     public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickAfterEnd_shouldStartMoPubBrowser() throws Exception {
-        stub(mediaPlayer.getDuration()).toReturn(15999);
-        stub(mediaPlayer.getCurrentPosition()).toReturn(16000);
+        stub(mockMediaPlayer.getDuration()).toReturn(15999);
+        stub(mockMediaPlayer.getCurrentPosition()).toReturn(16000);
 
         initializeSubject();
         subject.onResume();
 
-        setMediaPlayer(mediaPlayer);
+        setMockMediaPlayer(mockMediaPlayer);
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
 
         Robolectric.getUiThreadScheduler().unPause();
@@ -392,13 +389,13 @@ public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickAfterEnd_shou
 
     @Test
     public void onTouch_withTouchUp_whenVideoLongerThan16Seconds_andClickBefore5Seconds_shouldDoNothing() throws Exception {
-        stub(mediaPlayer.getDuration()).toReturn(100000);
-        stub(mediaPlayer.getCurrentPosition()).toReturn(4999);
+        stub(mockMediaPlayer.getDuration()).toReturn(100000);
+        stub(mockMediaPlayer.getCurrentPosition()).toReturn(4999);
 
         initializeSubject();
         subject.onResume();
 
-        setMediaPlayer(mediaPlayer);
+        setMockMediaPlayer(mockMediaPlayer);
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
 
         Robolectric.getUiThreadScheduler().unPause();
@@ -411,13 +408,13 @@ public void onTouch_withTouchUp_whenVideoLongerThan16Seconds_andClickBefore5Seco
 
     @Test
     public void onTouch_withTouchUp_whenVideoLongerThan16Seconds_andClickAfter5Seconds_shouldStartMoPubBrowser() throws Exception {
-        stub(mediaPlayer.getDuration()).toReturn(100000);
-        stub(mediaPlayer.getCurrentPosition()).toReturn(5001);
+        stub(mockMediaPlayer.getDuration()).toReturn(100000);
+        stub(mockMediaPlayer.getCurrentPosition()).toReturn(5001);
 
         initializeSubject();
         subject.onResume();
 
-        setMediaPlayer(mediaPlayer);
+        setMockMediaPlayer(mockMediaPlayer);
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
 
         Robolectric.getUiThreadScheduler().unPause();
@@ -446,11 +443,8 @@ public void onTouch_whenCloseButtonVisible_shouldPingClickThroughTrackers() thro
         subject.setCloseButtonVisible(true);
 
         getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
-        Robolectric.getUiThreadScheduler().unPause();
-        Robolectric.getBackgroundScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
-
-        assertHttpRequestsMade(expectedUserAgent, "click_1", "click_2");
+        verify(mockRequestQueue).add(argThat(isUrl("click_1")));
+        verify(mockRequestQueue).add(argThat(isUrl("click_2")));
     }
 
     @Test
@@ -465,9 +459,6 @@ public void onTouch_whenCloseButtonNotVisible_shouldNotPingClickThroughTrackers(
         subject.setCloseButtonVisible(false);
 
         getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
-        Robolectric.getBackgroundScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
-
         assertThat(Robolectric.httpRequestWasMade()).isFalse();
     }
 
@@ -495,8 +486,8 @@ public void onTouch_withActionTouchDown_shouldConsumeMotionEvent() throws Except
     public void onPrepared_whenDurationIsLessThanMaxVideoDurationForCloseButton_shouldSetShowCloseButtonDelayToDuration() throws Exception {
         initializeSubject();
 
-        stub(mediaPlayer.getDuration()).toReturn(1000);
-        setMediaPlayer(mediaPlayer);
+        stub(mockMediaPlayer.getDuration()).toReturn(1000);
+        setMockMediaPlayer(mockMediaPlayer);
 
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
 
@@ -507,8 +498,8 @@ public void onPrepared_whenDurationIsLessThanMaxVideoDurationForCloseButton_shou
     public void onPrepared_whenDurationIsGreaterThanMaxVideoDurationForCloseButton_shouldNotSetShowCloseButtonDelay() throws Exception {
         initializeSubject();
 
-        stub(mediaPlayer.getDuration()).toReturn(MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON + 1);
-        setMediaPlayer(mediaPlayer);
+        stub(mockMediaPlayer.getDuration()).toReturn(MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON + 1);
+        setMockMediaPlayer(mockMediaPlayer);
 
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
 
@@ -525,21 +516,53 @@ public void onCompletion_shouldMarkVideoAsFinished() throws Exception {
     }
 
     @Test
-    public void onCompletion_shouldPingCompletionTrackers() throws Exception {
+    public void onCompletion_whenFinalMarkHit_whenNoPlaybackErrors_shouldPingCompletionTrackersOnlyOnce() throws Exception {
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
         vastVideoConfiguration.addCompleteTrackers(Arrays.asList("complete_1", "complete_2"));
         bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
 
         initializeSubject();
+        subject.setFinalMarkHit();
 
         getShadowVideoView().getOnCompletionListener().onCompletion(null);
+        verify(mockRequestQueue).add(argThat(isUrl("complete_1")));
+        verify(mockRequestQueue).add(argThat(isUrl("complete_2")));
 
-        Robolectric.getUiThreadScheduler().unPause();
-        Robolectric.getBackgroundScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
+        // Completion trackers should still only be hit once
+        getShadowVideoView().getOnCompletionListener().onCompletion(null);
+        verify(mockRequestQueue).add(argThat(isUrl("complete_1")));
+        verify(mockRequestQueue).add(argThat(isUrl("complete_2")));
+    }
+
+    @Test
+    public void onCompletion_whenFinalMarkNotHit_shouldNotPingCompletionTrackers() throws Exception {
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfiguration.addCompleteTrackers(Arrays.asList("complete_1", "complete_2"));
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+
+        initializeSubject();
+        // explicitly do not call subject.setFinalMarkHit();
+
+        getShadowVideoView().getOnCompletionListener().onCompletion(null);
+        verify(mockRequestQueue, never()).add(argThat(isUrl("complete_1")));
+        verify(mockRequestQueue, never()).add(argThat(isUrl("complete_2")));
+    }
+
+    @Test
+    public void onCompletion_whenPlaybackError_shouldNotPingCompletionTrackers() throws Exception {
+        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
+        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfiguration.addCompleteTrackers(Arrays.asList("complete_1", "complete_2"));
+        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+
+        initializeSubject();
+        subject.setVideoError();
 
-        assertHttpRequestsMade(expectedUserAgent, "complete_1", "complete_2");
+        getShadowVideoView().getOnCompletionListener().onCompletion(null);
+        verify(mockRequestQueue, never()).add(argThat(isUrl("complete_1")));
+        verify(mockRequestQueue, never()).add(argThat(isUrl("complete_2")));
     }
 
     @Test
@@ -612,6 +635,7 @@ public void onError_shouldFireVideoErrorAndReturnFalse() throws Exception {
 
         assertThat(result).isFalse();
         verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
+        assertThat(subject.getVideoError()).isTrue();
     }
 
     @Test
@@ -723,10 +747,62 @@ public void retryMediaPlayer_withExceptionThrown_shouldReturnFalseAndIncrementRe
         assertThat(subject.getVideoRetries()).isEqualTo(1);
     }
 
+    @Test
+    public void handleClick_shouldMakeRequestsToClickTrackingUrls() {
+        initializeSubject();
+        subject.handleClick(Arrays.asList("clicktracker1", "clicktracker2"), "clickthrough");
+
+        verify(mockRequestQueue).add(argThat(isUrl("clicktracker1")));
+        verify(mockRequestQueue).add(argThat(isUrl("clicktracker2")));
+    }
+
+    @Test
+    public void handleClick_withNullClickTrackers_shouldNotThrowAnException() {
+        initializeSubject();
+        subject.handleClick(null, "clickthrough");
+
+        // pass
+    }
+
+    @Test
+    public void handleClick_withNullClickThroughUrl_shouldNotBroadcastClickOrOpenNewActivity() {
+        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, testBroadcastIdentifier);
+
+        initializeSubject();
+        subject.handleClick(Arrays.asList("clicktracker"), null);
+
+        Robolectric.getUiThreadScheduler().unPause();
+        verify(broadcastReceiver, never()).onReceive(any(Context.class), eq(expectedIntent));
+        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+    }
+
+    @Test
+    public void handleClick_withMoPubNativeBrowserClickThroughUrl_shouldOpenExternalBrowser() {
+        initializeSubject();
+
+        subject.handleClick(Arrays.asList("clicktracker"),
+                "mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.mopub.com");
+
+        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(intent.getDataString()).isEqualTo("http://www.mopub.com");
+        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
+    }
+
+    @Test
+    public void handleClick_withMalformedMoPubNativeBrowserClickThroughUrl_shouldNotOpenANewActivity() {
+        initializeSubject();
+
+        // url2 is an invalid query parameter
+        subject.handleClick(Arrays.asList("clicktracker"),
+                "mopubnativebrowser://navigate?url2=http%3A%2F%2Fwww.mopub.com");
+
+        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+    }
+
     @Test
     public void videoProgressCheckerRunnableRun_shouldFireOffAllProgressTrackers() throws Exception {
-        stub(mediaPlayer.getDuration()).toReturn(9001);
-        stub(mediaPlayer.getCurrentPosition()).toReturn(9002);
+        stub(mockMediaPlayer.getDuration()).toReturn(9001);
+        stub(mockMediaPlayer.getCurrentPosition()).toReturn(9002);
 
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
@@ -737,109 +813,95 @@ public void videoProgressCheckerRunnableRun_shouldFireOffAllProgressTrackers() t
 
         initializeSubject();
         subject.onResume();
-        setMediaPlayer(mediaPlayer);
+        setMockMediaPlayer(mockMediaPlayer);
 
         // this runs the videoProgressChecker
         Robolectric.getUiThreadScheduler().unPause();
-        Robolectric.getBackgroundScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
 
-        assertHttpRequestsMade(expectedUserAgent, "first", "second", "third");
+        verify(mockRequestQueue).add(argThat(isUrl("first")));
+        verify(mockRequestQueue).add(argThat(isUrl("second")));
+        verify(mockRequestQueue).add(argThat(isUrl("third")));
     }
 
     @Test
     public void videoProgressCheckerRunnableRun_whenDurationIsInvalid_shouldNotMakeAnyNetworkCalls() throws Exception {
-        stub(mediaPlayer.getDuration()).toReturn(0);
-        stub(mediaPlayer.getCurrentPosition()).toReturn(100);
+        stub(mockMediaPlayer.getDuration()).toReturn(0);
+        stub(mockMediaPlayer.getCurrentPosition()).toReturn(100);
 
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
         bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
 
         initializeSubject();
-        setMediaPlayer(mediaPlayer);
+        setMockMediaPlayer(mockMediaPlayer);
         subject.onResume();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
 
         Robolectric.getUiThreadScheduler().runOneTask();
         // make sure the repeated task hasn't run yet
         assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        Thread.sleep(NETWORK_DELAY);
-
-        assertThat(Robolectric.httpRequestWasMade()).isFalse();
+        verifyZeroInteractions(mockRequestQueue);
     }
 
     @Test
-    public void videoProgressCheckerRunnableRun_whenCurrentTimeLessThanOneSecond_shouldNotFireStartTracker() throws Exception {
+    public void videoProgressCheckerRunnableRun_whenCurrentTimeLessThanTwoSeconds_shouldNotFireStartTracker() throws Exception {
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
         vastVideoConfiguration.addStartTrackers(Arrays.asList("start"));
         bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
 
-        stub(mediaPlayer.getDuration()).toReturn(100000);
-        stub(mediaPlayer.getCurrentPosition()).toReturn(999);
+        stub(mockMediaPlayer.getDuration()).toReturn(100000);
+        stub(mockMediaPlayer.getCurrentPosition()).toReturn(1999);
 
         initializeSubject();
         subject.onResume();
-        setMediaPlayer(mediaPlayer);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
+        setMockMediaPlayer(mockMediaPlayer);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
 
         Robolectric.getUiThreadScheduler().runOneTask();
         // make sure the repeated task hasn't run yet
         assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
 
-        Thread.sleep(NETWORK_DELAY);
-
         // Since it has not yet been a second, we expect that the start tracker has not been fired
-        assertHttpRequestsMade(expectedUserAgent);
-        Robolectric.getFakeHttpLayer().clearRequestInfos();
+        verifyZeroInteractions(mockRequestQueue);
 
         // run checker another time
         assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
         Robolectric.getUiThreadScheduler().runOneTask();
 
-        Thread.sleep(NETWORK_DELAY);
-
-        assertThat(Robolectric.httpRequestWasMade()).isFalse();
+        verifyZeroInteractions(mockRequestQueue);
     }
 
     @Test
-    public void videoProgressCheckerRunnableRun_whenCurrentTimeGreaterThanOneSecond_shouldFireStartTracker() throws Exception {
+    public void videoProgressCheckerRunnableRun_whenCurrentTimeGreaterThanTwoSeconds_shouldFireStartTracker() throws Exception {
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
         vastVideoConfiguration.addStartTrackers(Arrays.asList("start"));
         bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
 
-        stub(mediaPlayer.getDuration()).toReturn(100000);
-        stub(mediaPlayer.getCurrentPosition()).toReturn(1000);
+        stub(mockMediaPlayer.getDuration()).toReturn(100000);
+        stub(mockMediaPlayer.getCurrentPosition()).toReturn(2000);
 
         initializeSubject();
         subject.onResume();
-        setMediaPlayer(mediaPlayer);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
+        setMockMediaPlayer(mockMediaPlayer);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
 
         Robolectric.getUiThreadScheduler().unPause();
-        Robolectric.getBackgroundScheduler().unPause();
 
-        Thread.sleep(NETWORK_DELAY);
-
-        assertHttpRequestsMade(expectedUserAgent, "start");
-        Robolectric.getFakeHttpLayer().clearRequestInfos();
+        verify(mockRequestQueue).add(argThat(isUrl("start")));
 
         // run checker another time
         assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
         Robolectric.getUiThreadScheduler().runOneTask();
 
-        Thread.sleep(NETWORK_DELAY);
-
-        assertThat(Robolectric.httpRequestWasMade()).isFalse();
+        verifyNoMoreInteractions(mockRequestQueue);
     }
 
     @Test
     public void videoProgressCheckerRunnableRun_whenProgressIsPastFirstQuartile_shouldOnlyPingFirstQuartileTrackersOnce() throws Exception {
-        stub(mediaPlayer.getDuration()).toReturn(100);
-        stub(mediaPlayer.getCurrentPosition()).toReturn(26);
+        stub(mockMediaPlayer.getDuration()).toReturn(100);
+        stub(mockMediaPlayer.getCurrentPosition()).toReturn(26);
 
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
@@ -848,27 +910,23 @@ public void videoProgressCheckerRunnableRun_whenProgressIsPastFirstQuartile_shou
 
         initializeSubject();
         subject.onResume();
-        setMediaPlayer(mediaPlayer);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
+        setMockMediaPlayer(mockMediaPlayer);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
 
         Robolectric.getUiThreadScheduler().unPause();
-        Robolectric.getBackgroundScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
 
-        assertHttpRequestsMade(expectedUserAgent, "first");
-        Robolectric.getFakeHttpLayer().clearRequestInfos();
+        verify(mockRequestQueue).add(argThat(isUrl("first")));
 
         // run checker another time
         Robolectric.getUiThreadScheduler().runOneTask();
-        Thread.sleep(NETWORK_DELAY);
 
-        assertThat(Robolectric.httpRequestWasMade()).isFalse();
+        verifyNoMoreInteractions(mockRequestQueue);
     }
 
     @Test
     public void videoProgressCheckerRunnableRun_whenProgressIsPastMidQuartile_shouldPingFirstQuartileTrackers_andMidQuartileTrackersBothOnlyOnce() throws Exception {
-        stub(mediaPlayer.getDuration()).toReturn(100);
-        stub(mediaPlayer.getCurrentPosition()).toReturn(51);
+        stub(mockMediaPlayer.getDuration()).toReturn(100);
+        stub(mockMediaPlayer.getCurrentPosition()).toReturn(51);
 
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
@@ -878,26 +936,23 @@ public void videoProgressCheckerRunnableRun_whenProgressIsPastMidQuartile_should
 
         initializeSubject();
         subject.onResume();
-        setMediaPlayer(mediaPlayer);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
+        setMockMediaPlayer(mockMediaPlayer);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
 
         Robolectric.getUiThreadScheduler().unPause();
-        Robolectric.getBackgroundScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
 
-        assertHttpRequestsMade(expectedUserAgent, "first", "second");
-        Robolectric.getFakeHttpLayer().clearRequestInfos();
+        verify(mockRequestQueue).add(argThat(isUrl("first")));
+        verify(mockRequestQueue).add(argThat(isUrl("second")));
 
         Robolectric.getUiThreadScheduler().runOneTask();
-        Thread.sleep(NETWORK_DELAY);
 
-        assertThat(Robolectric.httpRequestWasMade()).isFalse();
+        verifyNoMoreInteractions(mockRequestQueue);
     }
 
     @Test
     public void videoProgressCheckerRunnableRun_whenProgressIsPastThirdQuartile_shouldPingFirstQuartileTrackers_andMidQuartileTrackers_andThirdQuartileTrackersAllOnlyOnce() throws Exception {
-        stub(mediaPlayer.getDuration()).toReturn(100);
-        stub(mediaPlayer.getCurrentPosition()).toReturn(76);
+        stub(mockMediaPlayer.getDuration()).toReturn(100);
+        stub(mockMediaPlayer.getCurrentPosition()).toReturn(76);
 
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
@@ -908,25 +963,23 @@ public void videoProgressCheckerRunnableRun_whenProgressIsPastThirdQuartile_shou
 
         initializeSubject();
         subject.onResume();
-        setMediaPlayer(mediaPlayer);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
+        setMockMediaPlayer(mockMediaPlayer);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
 
         Robolectric.getUiThreadScheduler().unPause();
-        Robolectric.getBackgroundScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
 
-        assertHttpRequestsMade(expectedUserAgent, "first", "second", "third");
-        Robolectric.getFakeHttpLayer().clearRequestInfos();
+        verify(mockRequestQueue).add(argThat(isUrl("first")));
+        verify(mockRequestQueue).add(argThat(isUrl("second")));
+        verify(mockRequestQueue).add(argThat(isUrl("third")));
 
         Robolectric.getUiThreadScheduler().runOneTask();
-        Thread.sleep(NETWORK_DELAY);
 
-        assertThat(Robolectric.httpRequestWasMade()).isFalse();
+        verifyNoMoreInteractions(mockRequestQueue);
     }
 
     @Test
     public void videoProgressCheckerRunnableRun_asVideoPlays_shouldPingAllThreeTrackersIndividuallyOnce() throws Exception {
-        stub(mediaPlayer.getDuration()).toReturn(100);
+        stub(mockMediaPlayer.getDuration()).toReturn(100);
 
         VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
         vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
@@ -937,7 +990,7 @@ public void videoProgressCheckerRunnableRun_asVideoPlays_shouldPingAllThreeTrack
 
         initializeSubject();
         subject.onResume();
-        setMediaPlayer(mediaPlayer);
+        setMockMediaPlayer(mockMediaPlayer);
 
         // before any trackers are fired
         fastForwardMediaPlayerAndAssertRequestMade(1);
@@ -965,12 +1018,12 @@ public void videoProgressCheckerRunnableRun_asVideoPlays_shouldPingAllThreeTrack
 
     @Test
     public void videoProgressCheckerRunnableRun_whenCurrentPositionIsGreaterThanShowCloseButtonDelay_shouldShowCloseButton() throws Exception {
-        stub(mediaPlayer.getDuration()).toReturn(5002);
-        stub(mediaPlayer.getCurrentPosition()).toReturn(5001);
+        stub(mockMediaPlayer.getDuration()).toReturn(5002);
+        stub(mockMediaPlayer.getCurrentPosition()).toReturn(5001);
 
         initializeSubject();
         subject.onResume();
-        setMediaPlayer(mediaPlayer);
+        setMockMediaPlayer(mockMediaPlayer);
 
         assertThat(subject.isShowCloseButtonEventFired()).isFalse();
         Robolectric.getUiThreadScheduler().unPause();
@@ -1039,16 +1092,16 @@ public void onResume_shouldResetVideoRetryCountToZero() throws Exception {
     @Ignore("pending")
     @Test
     public void onResume_shouldSeekToPrePausedPosition() throws Exception {
-        stub(mediaPlayer.getDuration()).toReturn(10000);
-        stub(mediaPlayer.getCurrentPosition()).toReturn(7000);
+        stub(mockMediaPlayer.getDuration()).toReturn(10000);
+        stub(mockMediaPlayer.getCurrentPosition()).toReturn(7000);
 
         initializeSubject();
-        setMediaPlayer(mediaPlayer);
+        setMockMediaPlayer(mockMediaPlayer);
         final VideoView videoView = spy(subject.getVideoView());
 
         subject.onPause();
 
-        stub(mediaPlayer.getCurrentPosition()).toReturn(1000);
+        stub(mockMediaPlayer.getCurrentPosition()).toReturn(1000);
 
         subject.onResume();
         verify(videoView).seekTo(eq(7000));
@@ -1074,9 +1127,9 @@ private void initializeSubject() {
         subject = new VastVideoViewController(context, bundle, testBroadcastIdentifier, baseVideoViewControllerListener);
     }
 
-    private void setMediaPlayer(final MediaPlayer mediaPlayer) throws IllegalAccessException {
+    private void setMockMediaPlayer(final MediaPlayer mockMediaPlayer) throws IllegalAccessException {
         final VideoView videoView = subject.getVideoView();
-        ReflectionUtils.setVariableValueInObject(videoView, "mMediaPlayer", mediaPlayer);
+        ReflectionUtils.setVariableValueInObject(videoView, "mMediaPlayer", mockMediaPlayer);
 
         int state = (Integer) ReflectionUtils.getValueIncludingSuperclasses("STATE_PLAYING", videoView);
 
@@ -1084,15 +1137,13 @@ private void setMediaPlayer(final MediaPlayer mediaPlayer) throws IllegalAccessE
     }
 
     private void fastForwardMediaPlayerAndAssertRequestMade(int time, String... urls) throws Exception {
-        stub(mediaPlayer.getCurrentPosition()).toReturn(time);
+        stub(mockMediaPlayer.getCurrentPosition()).toReturn(time);
         Robolectric.getUiThreadScheduler().unPause();
         Robolectric.getBackgroundScheduler().unPause();
         Thread.sleep(NETWORK_DELAY);
 
-        if (urls == null) {
-            assertThat(Robolectric.getNextSentHttpRequest()).isNull();
-        } else {
-            assertHttpRequestsMade(expectedUserAgent, urls);
+        for (String url : urls) {
+            verify(mockRequestQueue).add(argThat(isUrl(url)));
         }
 
         Robolectric.getFakeHttpLayer().clearRequestInfos();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
index cbc01aae..0c0935ef 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
@@ -4,11 +4,13 @@
 import android.view.MotionEvent;
 import android.view.View;
 
+import com.mopub.common.AdReport;
 import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mock;
 import org.robolectric.shadows.ShadowGestureDetector;
 
 import static com.mopub.mobileads.ViewGestureDetector.UserClickListener;
@@ -25,7 +27,7 @@
     private ViewGestureDetector subject;
     private AdAlertGestureListener adAlertGestureListener;
     private View view;
-    private AdConfiguration adConfiguration;
+    @Mock AdReport mockAdReport;
 
     @Before
     public void setUp() throws Exception {
@@ -35,15 +37,14 @@ public void setUp() throws Exception {
         stub(view.getHeight()).toReturn(50);
 
         adAlertGestureListener = mock(AdAlertGestureListener.class);
-        adConfiguration = mock(AdConfiguration.class);
 
-        subject = new ViewGestureDetector(context, view, adConfiguration);
+        subject = new ViewGestureDetector(context, view, mockAdReport);
         subject.setAdAlertGestureListener(adAlertGestureListener);
     }
 
     @Test
     public void constructor_shouldDisableLongPressAndSetGestureListener() throws Exception {
-        subject = new ViewGestureDetector(context, view, adConfiguration);
+        subject = new ViewGestureDetector(context, view, mockAdReport);
 
         ShadowGestureDetector shadowGestureDetector = shadowOf(subject);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
index 8385743f..da49ac52 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
@@ -12,7 +12,6 @@
 import android.provider.Settings;
 import android.telephony.TelephonyManager;
 import android.text.TextUtils;
-
 import com.mopub.common.AdUrlGenerator;
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.GpsHelper;
@@ -24,7 +23,7 @@
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
 import com.mopub.mraid.MraidNativeCommandHandler;
-
+import com.mopub.network.PlayServicesUrlRewriter;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -513,8 +512,7 @@ public String build() {
                     "&dn=" + Build.MANUFACTURER +
                     "%2C" + Build.MODEL +
                     "%2C" + Build.PRODUCT +
-                    "&udid=" + expectedUdid +
-                    paramIfNotEmpty("dnt", dnt) +
+
                     paramIfNotEmpty("q", query) +
                     (TextUtils.isEmpty(latLon) ? "" : "&ll=" + latLon + "&lla=" + locationAccuracy) +
                     "&z=-0700" +
@@ -528,7 +526,9 @@ public String build() {
                     "&ct=" + networkType +
                     "&av=1.0" +
                     "&android_perms_ext_storage=" + externalStoragePermission +
-                    ((twitterAppInstalledStatus == TwitterAppInstalledStatus.INSTALLED) ? "&ts=1" : "");
+                    ((twitterAppInstalledStatus == TwitterAppInstalledStatus.INSTALLED) ? "&ts=1" : "") +
+                    "&udid=" + PlayServicesUrlRewriter.UDID_TEMPLATE +
+                    "&dnt=" + PlayServicesUrlRewriter.DO_NOT_TRACK_TEMPLATE;
 
         }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdFetchTaskFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdFetchTaskFactory.java
deleted file mode 100644
index 599de6b1..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdFetchTaskFactory.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.mobileads.AdFetchTask;
-import com.mopub.mobileads.AdViewController;
-import com.mopub.mobileads.TaskTracker;
-import com.mopub.mobileads.factories.AdFetchTaskFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestAdFetchTaskFactory extends AdFetchTaskFactory {
-    private AdFetchTask mockAdFetchTask = mock(AdFetchTask.class);
-
-    public static AdFetchTask getSingletonMock() {
-        return getTestFactory().mockAdFetchTask;
-    }
-
-    private static TestAdFetchTaskFactory getTestFactory() {
-        return ((TestAdFetchTaskFactory) AdFetchTaskFactory.instance);
-    }
-
-    @Override
-    protected AdFetchTask internalCreate(TaskTracker taskTracker, AdViewController adViewController, String userAgent, int timeoutMilliseconds) {
-        return mockAdFetchTask;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdFetcherFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdFetcherFactory.java
deleted file mode 100644
index d36df69b..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdFetcherFactory.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.mobileads.AdFetcher;
-import com.mopub.mobileads.AdViewController;
-import com.mopub.mobileads.factories.AdFetcherFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestAdFetcherFactory extends AdFetcherFactory {
-    private AdFetcher mockAdFetcher = mock(AdFetcher.class);
-
-    public static AdFetcher getSingletonMock() {
-        return getTestFactory().mockAdFetcher;
-    }
-
-    private static TestAdFetcherFactory getTestFactory() {
-        return ((TestAdFetcherFactory) AdFetcherFactory.instance);
-    }
-
-    @Override
-    public AdFetcher internalCreate(AdViewController adViewController, String userAgent) {
-        return mockAdFetcher;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java
index a26bf457..b6301488 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java
@@ -1,16 +1,21 @@
 package com.mopub.mobileads.test.support;
 
+import android.support.annotation.NonNull;
+
+import com.mopub.common.AdReport;
 import com.mopub.mobileads.CustomEventBannerAdapter;
 import com.mopub.mobileads.MoPubView;
 import com.mopub.mobileads.factories.CustomEventBannerAdapterFactory;
 
+import java.util.Map;
+
 import static org.mockito.Mockito.mock;
 
 public class TestCustomEventBannerAdapterFactory extends CustomEventBannerAdapterFactory {
     private CustomEventBannerAdapter mockCustomEventBannerAdapter = mock(CustomEventBannerAdapter.class);
     private MoPubView moPubView;
     private String className;
-    private String classData;
+    private Map<String, String> classData;
 
     public static CustomEventBannerAdapter getSingletonMock() {
         return getTestFactory().mockCustomEventBannerAdapter;
@@ -21,10 +26,14 @@ private static TestCustomEventBannerAdapterFactory getTestFactory() {
     }
 
     @Override
-    protected CustomEventBannerAdapter internalCreate(MoPubView moPubView, String className, String classData) {
+    protected CustomEventBannerAdapter internalCreate(@NonNull final MoPubView moPubView,
+            @NonNull final String className,
+            @NonNull final Map<String, String> serverExtras,
+            final long broadcastIdentifier,
+            @NonNull final AdReport adReport) {
         this.moPubView = moPubView;
         this.className = className;
-        this.classData = classData;
+        this.classData = serverExtras;
         return mockCustomEventBannerAdapter;
     }
 
@@ -36,7 +45,7 @@ public static String getLatestClassName() {
         return getTestFactory().className;
     }
 
-    public static String getLatestClassData() {
+    public static Map<String, String> getLatestClassData() {
         return getTestFactory().classData;
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java
index 10893134..a392ad53 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java
@@ -1,16 +1,19 @@
 package com.mopub.mobileads.test.support;
 
+import com.mopub.common.AdReport;
 import com.mopub.mobileads.CustomEventInterstitialAdapter;
 import com.mopub.mobileads.MoPubInterstitial;
 import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
 
+import java.util.Map;
+
 import static org.mockito.Mockito.mock;
 
 public class TestCustomEventInterstitialAdapterFactory extends CustomEventInterstitialAdapterFactory{
     private CustomEventInterstitialAdapter mockCustomEventInterstitalAdapter = mock(CustomEventInterstitialAdapter.class);
     private MoPubInterstitial latestMoPubInterstitial;
     private String latestClassName;
-    private String latestClassData;
+    private Map<String, String> latestClassData;
 
     public static CustomEventInterstitialAdapter getSingletonMock() {
         return getTestFactory().mockCustomEventInterstitalAdapter;
@@ -28,15 +31,15 @@ public static String getLatestClassName() {
         return getTestFactory().latestClassName;
     }
 
-    public static String getLatestClassData() {
+    public static Map<String, String> getLatestServerExtras() {
         return getTestFactory().latestClassData;
     }
 
     @Override
-    protected CustomEventInterstitialAdapter internalCreate(MoPubInterstitial moPubInterstitial, String className, String classData) {
+    protected CustomEventInterstitialAdapter internalCreate(MoPubInterstitial moPubInterstitial, String className, Map<String, String> serverExtras, long broadcastIdentifier, AdReport adReport) {
         latestMoPubInterstitial = moPubInterstitial;
         latestClassName = className;
-        latestClassData = classData;
+        latestClassData = serverExtras;
         return mockCustomEventInterstitalAdapter;
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java
index 0909e309..84c91fc5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java
@@ -3,7 +3,7 @@
 import android.content.Context;
 import android.webkit.WebSettings;
 
-import com.mopub.mobileads.AdConfiguration;
+import com.mopub.common.AdReport;
 import com.mopub.mobileads.HtmlBannerWebView;
 import com.mopub.mobileads.factories.HtmlBannerWebViewFactory;
 
@@ -17,6 +17,7 @@
     private boolean latestIsScrollable;
     private String latestRedirectUrl;
     private String latestClickthroughUrl;
+    private AdReport latestAdReport;
 
     public TestHtmlBannerWebViewFactory() {
         WebSettings webSettings = mock(WebSettings.class);
@@ -34,15 +35,17 @@ private static TestHtmlBannerWebViewFactory getTestFactory() {
 
     @Override
     public HtmlBannerWebView internalCreate(
-            Context context, CustomEventBannerListener
-            customEventBannerListener,
+            Context context,
+            AdReport adReport,
+            CustomEventBannerListener customEventBannerListener,
             boolean isScrollable,
             String redirectUrl,
-            String clickthroughUrl, AdConfiguration adConfiguration) {
+            String clickthroughUrl) {
         latestListener = customEventBannerListener;
         latestIsScrollable = isScrollable;
         latestRedirectUrl = redirectUrl;
         latestClickthroughUrl = clickthroughUrl;
+        latestAdReport = adReport;
         return mockHtmlBannerWebView;
     }
 
@@ -61,4 +64,8 @@ public static String getLatestRedirectUrl() {
     public static String getLatestClickthroughUrl() {
         return getTestFactory().latestClickthroughUrl;
     }
+
+    public static AdReport getLatestAdReport() {
+        return getTestFactory().latestAdReport;
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java
index d5fea284..c9dc4c47 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java
@@ -2,7 +2,7 @@
 
 import android.content.Context;
 
-import com.mopub.mobileads.AdConfiguration;
+import com.mopub.common.AdReport;
 import com.mopub.mobileads.HtmlInterstitialWebView;
 import com.mopub.mobileads.factories.HtmlInterstitialWebViewFactory;
 
@@ -16,7 +16,6 @@
     private boolean latestIsScrollable;
     private String latestRedirectUrl;
     private String latestClickthroughUrl;
-    private AdConfiguration latestAdConfiguration;
 
     public static HtmlInterstitialWebView getSingletonMock() {
         return getTestFactory().mockHtmlInterstitialWebView;
@@ -27,12 +26,11 @@ private static TestHtmlInterstitialWebViewFactory getTestFactory() {
     }
 
     @Override
-    public HtmlInterstitialWebView internalCreate(Context context, CustomEventInterstitialListener customEventInterstitialListener, boolean isScrollable, String redirectUrl, String clickthroughUrl, AdConfiguration adConfiguration) {
+    public HtmlInterstitialWebView internalCreate(Context context, AdReport adReport, CustomEventInterstitialListener customEventInterstitialListener, boolean isScrollable, String redirectUrl, String clickthroughUrl) {
         latestListener = customEventInterstitialListener;
         latestIsScrollable = isScrollable;
         latestRedirectUrl = redirectUrl;
         latestClickthroughUrl = clickthroughUrl;
-        latestAdConfiguration = adConfiguration;
         return getTestFactory().mockHtmlInterstitialWebView;
     }
 
@@ -50,8 +48,4 @@ public static String getLatestRedirectUrl() {
     public static String getLatestClickthroughUrl() {
         return getTestFactory().latestClickthroughUrl;
     }
-
-    public static AdConfiguration getLatestAdConfiguration() {
-        return getTestFactory().latestAdConfiguration;
-    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java
index 81787c01..511499fe 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java
@@ -1,8 +1,9 @@
 package com.mopub.mobileads.test.support;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 
-import com.mopub.mobileads.AdConfiguration;
+import com.mopub.common.AdReport;
 import com.mopub.mobileads.factories.MraidControllerFactory;
 import com.mopub.mraid.MraidController;
 import com.mopub.mraid.PlacementType;
@@ -21,8 +22,9 @@ private static TestMraidControllerFactory getTestFactory() {
     }
 
     @Override
-    protected MraidController internalCreate(final Context context,
-            final AdConfiguration adConfiguration, final PlacementType placementType) {
+    protected MraidController internalCreate(@NonNull final Context context,
+            @NonNull AdReport adReport,
+            @NonNull final PlacementType placementType) {
         return mockMraidController;
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestViewGestureDetectorFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestViewGestureDetectorFactory.java
deleted file mode 100644
index 1bce3891..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestViewGestureDetectorFactory.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.content.Context;
-import android.view.View;
-
-import com.mopub.mobileads.AdConfiguration;
-import com.mopub.mobileads.ViewGestureDetector;
-import com.mopub.mobileads.factories.ViewGestureDetectorFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestViewGestureDetectorFactory extends ViewGestureDetectorFactory {
-    private ViewGestureDetector mockViewGestureDetector = mock(ViewGestureDetector.class);
-
-    public static ViewGestureDetector getSingletonMock() {
-        return getTestFactory().mockViewGestureDetector;
-    }
-
-    private static TestViewGestureDetectorFactory getTestFactory() {
-        return ((TestViewGestureDetectorFactory) instance);
-    }
-
-    @Override
-    protected ViewGestureDetector internalCreate(Context context, View view, AdConfiguration adConfiguration) {
-        return mockViewGestureDetector;
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
index 702e58f1..79d601c8 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
@@ -5,7 +5,6 @@
 import android.view.View;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.AdConfiguration;
 import com.mopub.mobileads.test.support.TestMraidControllerFactory;
 import com.mopub.mraid.MraidController.MraidListener;
 
@@ -18,8 +17,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
 import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
 import static org.mockito.Matchers.any;
@@ -31,7 +29,6 @@
     private static final String INPUT_HTML_DATA = "%3Chtml%3E%3C%2Fhtml%3E";
 
     MraidController mockMraidController;
-    @Mock AdConfiguration mockAdConfiguration;
     @Mock CustomEventBannerListener mockBannerListener;
 
     private Context context;
@@ -47,8 +44,7 @@ public void setUp() {
 
         context = new Activity();
         localExtras = new HashMap<String, Object>();
-        localExtras.put(AD_CONFIGURATION_KEY, mockAdConfiguration);
-
+        localExtras.put("broadcastIdentifier", 123L);
         serverExtras = new HashMap<String, String>();
         serverExtras.put(HTML_RESPONSE_BODY_KEY, INPUT_HTML_DATA);
     }
@@ -62,15 +58,6 @@ public void loadBanner_whenExtrasAreMalformed_shouldNotifyBannerListenerFailureA
         verify(mockBannerListener).onBannerFailed(eq(MRAID_LOAD_ERROR));
     }
 
-    @Test
-    public void loadBanner_whenAdConfigurationMissing_shouldNotifyBannerListenerFailureAndReturn() {
-        localExtras.remove(AD_CONFIGURATION_KEY);
-
-        subject.loadBanner(context, mockBannerListener, localExtras, serverExtras);
-
-        verify(mockBannerListener).onBannerFailed(eq(MRAID_LOAD_ERROR));
-    }
-
     @Test
     public void invalidate_shouldDestroyMraidController() {
         subject.loadBanner(context, mockBannerListener, localExtras, serverExtras);
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
index d90b6e33..8c4ddcda 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
@@ -5,8 +5,8 @@
 import android.content.Intent;
 import android.webkit.WebViewClient;
 
+import com.mopub.common.AdReport;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.AdConfiguration;
 import com.mopub.mraid.MraidBridge.MraidBridgeListener;
 import com.mopub.mraid.MraidBridge.MraidWebView;
 import com.mopub.mraid.MraidNativeCommandHandler.MraidCommandFailureListener;
@@ -38,9 +38,9 @@
 
 @RunWith(SdkTestRunner.class)
 public class MraidBridgeTest {
-    @Mock AdConfiguration mockAdConfiguration;
     @Mock MraidNativeCommandHandler mockNativeCommandHandler;
     @Mock MraidBridgeListener mockBridgeListener;
+    @Mock AdReport mockAdReport;
     @Mock(answer = Answers.RETURNS_DEEP_STUBS) MraidWebView mockBannerWebView;
     @Mock(answer = Answers.RETURNS_DEEP_STUBS) MraidWebView mockInterstitialWebView;
     @Captor ArgumentCaptor<WebViewClient> bannerWebViewClientCaptor;
@@ -53,13 +53,11 @@
     public void setUp() {
         activity = Robolectric.buildActivity(Activity.class).create().get();
 
-        subjectBanner = new MraidBridge(
-                mockAdConfiguration, PlacementType.INLINE, mockNativeCommandHandler);
+        subjectBanner = new MraidBridge(mockAdReport, PlacementType.INLINE, mockNativeCommandHandler);
         subjectBanner.setMraidBridgeListener(mockBridgeListener);
         subjectBanner.attachView(mockBannerWebView);
 
-        subjectInterstitial = new MraidBridge(
-                mockAdConfiguration, PlacementType.INTERSTITIAL, mockNativeCommandHandler);
+        subjectInterstitial = new MraidBridge(mockAdReport, PlacementType.INTERSTITIAL, mockNativeCommandHandler);
         subjectInterstitial.setMraidBridgeListener(mockBridgeListener);
         subjectInterstitial.attachView(mockInterstitialWebView);
 
@@ -156,7 +154,7 @@ public void handleShouldOverrideUrl_normalUrl_shouldReturnFalse() {
     @Test(expected = MraidCommandException.class)
     public void runCommand_requiresClick_notClicked_shouldThrowException()
             throws MraidCommandException {
-        subjectBanner = new MraidBridge(mockAdConfiguration, PlacementType.INLINE);
+        subjectBanner = new MraidBridge(mockAdReport, PlacementType.INLINE);
         subjectBanner.attachView(mockBannerWebView);
         subjectBanner.setClicked(false);
         Map<String, String> params = new HashMap<String, String>();
@@ -198,7 +196,7 @@ public void runCommand_interstitial_requiresClick_clicked_shouldNotThrowExceptio
     public void runCommand_close_shouldCallListener()
             throws MraidCommandException {
         Map<String, String> params = new HashMap<String, String>();
-
+        
         subjectBanner.runCommand(MraidJavascriptCommand.CLOSE, params);
 
         verify(mockBridgeListener).onClose();
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
index a55b1221..69c2cd46 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
@@ -11,11 +11,11 @@
 import android.view.View;
 import android.widget.FrameLayout;
 
+import com.mopub.common.AdReport;
 import com.mopub.common.CloseableLayout.ClosePosition;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.AdConfiguration;
-import com.mopub.mobileads.BaseVideoPlayerActivitiyTest;
+import com.mopub.mobileads.BaseVideoPlayerActivityTest;
 import com.mopub.mobileads.MraidVideoPlayerActivity;
 import com.mopub.mraid.MraidBridge.MraidBridgeListener;
 import com.mopub.mraid.MraidBridge.MraidWebView;
@@ -52,11 +52,11 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
-import static org.mockito.Mockito.withSettings;
 
 @RunWith(SdkTestRunner.class)
 public class MraidControllerTest {
-    private AdConfiguration mockAdConfiguration;
+    private long broadcastIdentifier = 123;
+    @Mock private AdReport mockAdReport;
     @Mock private MraidBridge mockBridge;
     @Mock private MraidBridge mockTwoPartBridge;
     @Mock private ScreenMetricsWaiter mockScreenMetricsWaiter;
@@ -75,9 +75,6 @@
     public void setUp() {
         Robolectric.setDisplayMetricsDensity(1.0f);
 
-        // Needs to be serializable because we put this into an Intent
-        mockAdConfiguration = mock(AdConfiguration.class, withSettings().serializable());
-
         activity = spy(Robolectric.buildActivity(Activity.class).create().get());
         activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
 
@@ -98,7 +95,7 @@ public Void answer(final InvocationOnMock invocation) throws Throwable {
         }).when(mockWaitRequest).start(any(Runnable.class));
 
         subject = new MraidController(
-                activity, mockAdConfiguration, PlacementType.INLINE,
+                activity, mockAdReport, PlacementType.INLINE,
                 mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
         subject.setMraidListener(mockMraidListener);
         subject.setOrientationBroadcastReceiver(mockOrientationBroadcastReceiver);
@@ -185,7 +182,7 @@ public void handleResize_shouldThrowExceptionWhenExpanded() throws MraidCommandE
     @Test(expected = MraidCommandException.class)
     public void handleResize_shouldThrowExceptionForInterstitial() throws MraidCommandException {
         MraidListener listener = mock(MraidListener.class);
-        subject = new MraidController(activity, mockAdConfiguration, PlacementType.INTERSTITIAL,
+        subject = new MraidController(activity, mockAdReport, PlacementType.INTERSTITIAL,
                 mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
         subject.setMraidListener(listener);
         subject.setRootView(rootView);
@@ -314,7 +311,7 @@ public void handleExpand_afterDestroy_shouldThrowException() throws MraidCommand
     @Test
     public void handleExpand_shouldBeIgnoredForInterstitial() throws MraidCommandException {
         MraidListener listener = mock(MraidListener.class);
-        subject = new MraidController(activity, mockAdConfiguration, PlacementType.INTERSTITIAL,
+        subject = new MraidController(activity, mockAdReport, PlacementType.INTERSTITIAL,
                 mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
         subject.setMraidListener(listener);
         subject.setRootView(rootView);
@@ -438,8 +435,8 @@ public void handleClose_fromDefaultState_shouldHideAdContainer_shouldCallOnClose
     @Test
     public void handleShowVideo_shouldStartVideoPlayerActivity() {
         subject.handleShowVideo("http://video");
-        BaseVideoPlayerActivitiyTest.assertMraidVideoPlayerActivityStarted(
-                MraidVideoPlayerActivity.class, "http://video", mockAdConfiguration);
+        BaseVideoPlayerActivityTest.assertMraidVideoPlayerActivityStarted(
+                MraidVideoPlayerActivity.class, "http://video");
     }
 
     @Test
@@ -463,6 +460,23 @@ public void handleCustomClose_shouldCallCustomCloseChangedListener() {
         verify(mockUseCustomCloseListener).useCustomCloseChanged(false);
     }
 
+    @Test
+    public void handleOpen_withMoPubNativeBrowserUrl_shouldOpenExternalBrowser() {
+        subject.handleOpen("mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.example.com");
+
+        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(intent.getDataString()).isEqualTo("https://www.example.com");
+        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
+    }
+
+    @Test
+    public void handleOpen_withMalformedMoPubNativeBrowserUrl_shouldNotStartNewActivity() {
+        // invalid host parameter 'nav'
+        subject.handleOpen("mopubnativebrowser://nav?url=https%3A%2F%2Fwww.example.com");
+
+        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+    }
+
     @Test
     public void handleOpen_withApplicationUrl_shouldStartNewIntent() {
         String applicationUrl = "amzn://blah";
@@ -473,7 +487,8 @@ public void handleOpen_withApplicationUrl_shouldStartNewIntent() {
 
         Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(startedIntent).isNotNull();
-        assertThat(startedIntent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
+        // Since we are using an Activity context, we do not need FLAG_ACTIVITY_NEW_TASK
+        assertThat(startedIntent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isEqualTo(0);
         assertThat(startedIntent.getComponent()).isNull();
 
         verify(mockMraidListener).onOpen();
@@ -487,7 +502,8 @@ public void handleOpen_withHttpApplicationUrl_shouldStartMoPubBrowser() {
 
         Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(startedIntent).isNotNull();
-        assertThat(startedIntent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
+        // Since we are using an Activity context, we do not need FLAG_ACTIVITY_NEW_TASK
+        assertThat(startedIntent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isEqualTo(0);
         assertThat(startedIntent.getComponent().getClassName())
                 .isEqualTo("com.mopub.common.MoPubBrowser");
 
@@ -503,7 +519,8 @@ public void handleOpen_withApplicationUrlThatCantBeHandled_shouldDefaultToMoPubB
 
         Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(startedIntent).isNotNull();
-        assertThat(startedIntent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
+        // Since we are using an Activity context, we do not need FLAG_ACTIVITY_NEW_TASK
+        assertThat(startedIntent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isEqualTo(0);
         assertThat(startedIntent.getComponent().getClassName())
                 .isEqualTo("com.mopub.common.MoPubBrowser");
         assertThat(startedIntent.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY))
@@ -550,7 +567,7 @@ public void handleSetOrientationProperties_withOrientationNone_withApplicationCo
                 ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
 
         subject = new MraidController(
-                activity.getApplicationContext(), mockAdConfiguration, PlacementType.INLINE,
+                activity.getApplicationContext(), mockAdReport, PlacementType.INLINE,
                 mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
 
         subject.handleSetOrientationProperties(false, MraidOrientation.NONE);
@@ -565,7 +582,7 @@ public void handleSetOrientationProperties_withForcedOrientation_withApplication
                 ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
 
         subject = new MraidController(
-                activity.getApplicationContext(), mockAdConfiguration, PlacementType.INLINE,
+                activity.getApplicationContext(), mockAdReport, PlacementType.INLINE,
                 mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
 
         try {
@@ -716,7 +733,7 @@ public void handleSetOrientationProperties_forInterstitial_shouldChangeScreenOri
                 ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
 
         subject = new MraidController(
-                activity, mockAdConfiguration, PlacementType.INTERSTITIAL,
+                activity, mockAdReport, PlacementType.INTERSTITIAL,
                 mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
 
         assertThat(activity.getRequestedOrientation()).isEqualTo(ActivityInfo
@@ -745,7 +762,7 @@ public void shouldAllowForceOrientation_withApplicationContext_shouldReturnFalse
                 ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
 
         subject = new MraidController(
-                activity.getApplicationContext(), mockAdConfiguration, PlacementType.INLINE,
+                activity.getApplicationContext(), mockAdReport, PlacementType.INLINE,
                 mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
 
         final boolean result = subject.shouldAllowForceOrientation(MraidOrientation.PORTRAIT);
@@ -759,7 +776,7 @@ public void lockOrientation_withApplicationContext_shouldThrowMraidCommandExcept
                 ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
 
         subject = new MraidController(
-                activity.getApplicationContext(), mockAdConfiguration, PlacementType.INLINE,
+                activity.getApplicationContext(), mockAdReport, PlacementType.INLINE,
                 mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
 
         subject.lockOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
index eef1015f..5424e6f2 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
@@ -5,7 +5,6 @@
 import android.content.Intent;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.AdConfiguration;
 import com.mopub.mobileads.ResponseBodyInterstitialTest;
 
 import org.junit.Before;
@@ -20,26 +19,21 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest
-        .getIntentForActionAndIdentifier;
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
+import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-import static org.mockito.Mockito.withSettings;
 import static org.robolectric.Robolectric.shadowOf_;
 
 @RunWith(SdkTestRunner.class)
 public class MraidInterstitialTest extends ResponseBodyInterstitialTest {
-    private static final String INPUT_HTML_DATA = "%3Chtml%3E%3C%2Fhtml%3E";
     private static final String EXPECTED_HTML_DATA = "<html></html>";
     private long broadcastIdentifier;
 
@@ -51,15 +45,12 @@
 
     @Before
     public void setUp() throws Exception {
-        AdConfiguration adConfiguration =
-                mock(AdConfiguration.class, withSettings().serializable());
         broadcastIdentifier = 2222;
-        when(adConfiguration.getBroadcastIdentifier()).thenReturn(broadcastIdentifier);
 
         localExtras = new HashMap<String, Object>();
         serverExtras = new HashMap<String, String>();
-        serverExtras.put(HTML_RESPONSE_BODY_KEY, INPUT_HTML_DATA);
-        localExtras.put(AD_CONFIGURATION_KEY, adConfiguration);
+        serverExtras.put(HTML_RESPONSE_BODY_KEY, EXPECTED_HTML_DATA);
+        localExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
 
         context = Robolectric.buildActivity(Activity.class).create().get();
 
@@ -117,7 +108,6 @@ public void showInterstitial_shouldStartActivityWithIntent() throws Exception {
         ShadowActivity shadowActivity = shadowOf_(context);
         Intent intent = shadowActivity.getNextStartedActivityForResult().intent;
 
-        assertThat(intent.getComponent().getPackageName()).isEqualTo("com.mopub.mobileads");
         assertThat(intent.getComponent().getClassName())
                 .isEqualTo("com.mopub.mobileads.MraidActivity");
         assertThat(intent.getExtras().get(HTML_RESPONSE_BODY_KEY)).isEqualTo(EXPECTED_HTML_DATA);
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
index a589258d..fb0620b4 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
@@ -2,7 +2,6 @@
 
 import android.app.Activity;
 import android.content.Context;
-import android.content.Intent;
 import android.os.Bundle;
 import android.widget.ImageButton;
 
@@ -25,12 +24,8 @@
 import static android.view.View.VISIBLE;
 import static com.mopub.mobileads.BaseVideoPlayerActivity.VIDEO_URL;
 import static com.mopub.mobileads.BaseVideoViewController.BaseVideoViewControllerListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
@@ -40,7 +35,6 @@
 public class MraidVideoViewControllerTest {
     private Context context;
     private Bundle bundle;
-    private long testBroadcastIdentifier;
     private MraidVideoViewController subject;
     private BaseVideoViewControllerListener baseVideoViewControllerListener;
     private EventForwardingBroadcastReceiver broadcastReceiver;
@@ -49,8 +43,6 @@
     public void setUp() throws Exception {
         context = new Activity();
         bundle = new Bundle();
-        testBroadcastIdentifier = 1111;
-        broadcastReceiver = mock(EventForwardingBroadcastReceiver.class);
         baseVideoViewControllerListener = mock(BaseVideoViewControllerListener.class);
 
         bundle.putString(VIDEO_URL, "http://video_url");
@@ -163,21 +155,8 @@ public void onErrorListener_shouldShowCloseButton() throws Exception {
         assertThat(getCloseButton().getVisibility()).isEqualTo(VISIBLE);
     }
 
-    @Test
-    public void onErrorListener_shouldBroadcastInterstitialError() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_FAIL, testBroadcastIdentifier);
-
-        initializeSubject();
-        subject.onCreate();
-
-        assertThat(getShadowVideoView().getOnErrorListener().onError(null, 0, 0)).isEqualTo(false);
-        Robolectric.getUiThreadScheduler().unPause();
-
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-    }
-
     private void initializeSubject() {
-        subject = new MraidVideoViewController(context, bundle, testBroadcastIdentifier, baseVideoViewControllerListener);
+        subject = new MraidVideoViewController(context, bundle, baseVideoViewControllerListener);
     }
 
     private ShadowVideoView getShadowVideoView() {
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ClickDestinationResolutionListenerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ClickDestinationResolutionListenerTest.java
new file mode 100644
index 00000000..42b94285
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ClickDestinationResolutionListenerTest.java
@@ -0,0 +1,135 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.content.pm.ResolveInfo;
+import android.net.Uri;
+
+import com.mopub.common.MoPubBrowser;
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.robolectric.Robolectric;
+
+import java.util.Iterator;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+public class ClickDestinationResolutionListenerTest {
+
+    private Activity context;
+    private Iterator mockIterator;
+    private SpinningProgressView mockSpinningProgressView;
+    private ClickDestinationResolutionListener subject;
+
+    @Before
+    public void setUp() throws Exception {
+        context = spy(Robolectric.buildActivity(Activity.class).create().get());
+        when(context.getApplicationContext()).thenReturn(context);
+        mockIterator = mock(Iterator.class);
+        mockSpinningProgressView = mock(SpinningProgressView.class);
+
+        subject = new ClickDestinationResolutionListener(context, mockIterator,
+                mockSpinningProgressView);
+    }
+
+    @Test
+    public void onSuccess_withMoPubNativeBrowserUrl_shouldOpenExternalBrowserAndHideProgressView() {
+        subject.onSuccess("mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.example.com");
+
+        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(intent.getDataString()).isEqualTo("https://www.example.com");
+        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
+        verify(mockSpinningProgressView).removeFromRoot();
+    }
+
+    @Test
+    public void onSuccess_withMalformedMoPubNativeBrowserUrl_shouldHideProgressViewButNotOpenExternalBrowser() {
+        // url2 is the wrong query parameter
+        subject.onSuccess("mopubnativebrowser://navigate?url2=https%3A%2F%2Fwww.example.com");
+
+        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+        verify(mockSpinningProgressView).removeFromRoot();
+    }
+
+    @Test
+    public void onSuccess_withDeepLinkThatIsResolvable_shouldStartActionViewIntent_shouldRemoveSpinningProgressView() {
+        String deepLinkUrl = "appscheme://host";
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
+                Uri.parse(deepLinkUrl)), new ResolveInfo());
+
+        subject.onSuccess(deepLinkUrl);
+
+        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
+        assertThat(intent.getDataString()).isEqualTo("appscheme://host");
+        verify(mockSpinningProgressView).removeFromRoot();
+    }
+
+    @Test
+    public void onSuccess_withDeepLinkThatIsUnresolvable_shouldNotStartNewIntent_shouldRemoveSpinningProgressView() {
+        String deepLinkUrl = "appscheme://host";
+        // don't add any relevant ResolveInfos to the Robolectric packageManager
+
+        subject.onSuccess(deepLinkUrl);
+
+        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+        verify(mockSpinningProgressView).removeFromRoot();
+    }
+
+    @Test
+    public void onSuccess_withAppStoreUrl_shouldStartAppStoreIntent_shouldRemoveSpinningProgressView() {
+        String appStoreUrl = "play.google.com";
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
+                Uri.parse(appStoreUrl)), new ResolveInfo());
+
+        subject.onSuccess(appStoreUrl);
+
+        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
+        assertThat(intent.getDataString()).isEqualTo("play.google.com");
+        verify(mockSpinningProgressView).removeFromRoot();
+    }
+
+    @Test
+    public void onSuccess_withHttpUrl_showOpenInMoPubBrowser_shouldRemoveSpinningProgressViewFromRoot() {
+        String httpUrl = "http://www.dotcom.com";
+
+        subject.onSuccess(httpUrl);
+
+        ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);
+        verify(context).startActivity(intentCaptor.capture());
+
+        Intent intent = intentCaptor.getValue();
+
+        assertThat(intent.getComponent().getPackageName()).isEqualTo("com.mopub.mobileads");
+        assertThat(intent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
+        assertThat(intent.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(httpUrl);
+        verify(mockSpinningProgressView).removeFromRoot();
+    }
+
+    @Test
+    public void onSuccess_withHttpsUrl_showOpenInMoPubBrowser_shouldRemoveSpinningProgressViewFromRoot() {
+        String httpsUrl = "https://www.comdot.com";
+
+        subject.onSuccess(httpsUrl);
+
+        ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);
+        verify(context).startActivity(intentCaptor.capture());
+
+        Intent intent = intentCaptor.getValue();
+
+        assertThat(intent.getComponent().getPackageName()).isEqualTo("com.mopub.mobileads");
+        assertThat(intent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
+        assertThat(intent.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(httpsUrl);
+        verify(mockSpinningProgressView).removeFromRoot();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java
index 85fe6d61..6a067014 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java
@@ -2,11 +2,10 @@
 
 import android.app.Activity;
 
-import com.mopub.common.DownloadResponse;
-import com.mopub.common.util.ResponseHeader;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
+import com.mopub.common.AdType;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.nativeads.test.support.TestCustomEventNativeFactory;
+import com.mopub.network.AdResponse;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -15,6 +14,7 @@
 import java.util.HashMap;
 
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
@@ -23,12 +23,11 @@
 public class CustomEventNativeAdapterTest {
 
     private Activity context;
-    private DownloadResponse downloadResponse;
     private HashMap<String, Object> localExtras;
     private CustomEventNative.CustomEventNativeListener mCustomEventNativeListener;
     private CustomEventNative mCustomEventNative;
     private HashMap<String, String> serverExtras;
-    private TestHttpResponseWithHeaders testHttpResponseWithHeaders;
+    private AdResponse testAdResponse;
 
     @Before
     public void setUp() throws Exception {
@@ -37,12 +36,13 @@ public void setUp() throws Exception {
         localExtras = new HashMap<String, Object>();
         serverExtras = new HashMap<String, String>();
         serverExtras.put("key", "value");
-        serverExtras.put(CustomEventNativeAdapter.RESPONSE_BODY_KEY, "body");
 
-        testHttpResponseWithHeaders = new TestHttpResponseWithHeaders(200, "body");
-        testHttpResponseWithHeaders.addHeader(ResponseHeader.CUSTOM_EVENT_DATA.getKey(), "{ \"key\" : \"value\" }");
-        testHttpResponseWithHeaders.addHeader(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.nativeads.MoPubCustomEventNative");
-        downloadResponse = new DownloadResponse(testHttpResponseWithHeaders);
+        testAdResponse = new AdResponse.Builder()
+                .setAdType(AdType.NATIVE)
+                .setCustomEventClassName("com.mopub.nativeads.MoPubCustomEventNative")
+                .setResponseBody("body")
+                .setServerExtras(serverExtras)
+                .build();
 
         mCustomEventNativeListener = mock(CustomEventNative.CustomEventNativeListener.class);
 
@@ -51,7 +51,7 @@ public void setUp() throws Exception {
 
     @Test
     public void loadNativeAd_withValidInput_shouldCallLoadNativeAdOnTheCustomEvent() throws Exception {
-        CustomEventNativeAdapter.loadNativeAd(context, localExtras, downloadResponse, mCustomEventNativeListener);
+        CustomEventNativeAdapter.loadNativeAd(context, localExtras, testAdResponse, mCustomEventNativeListener);
         verify(mCustomEventNative).loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
         verify(mCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));
         verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(NativeAdInterface.class));
@@ -59,10 +59,11 @@ public void loadNativeAd_withValidInput_shouldCallLoadNativeAdOnTheCustomEvent()
 
     @Test
     public void loadNativeAd_withInvalidClassName_shouldNotifyListenerOfOnNativeAdFailedAndReturn() throws Exception {
-        testHttpResponseWithHeaders.addHeader(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.baaad.invalidinvalid123143");
-        downloadResponse = new DownloadResponse(testHttpResponseWithHeaders);
+        testAdResponse = testAdResponse.toBuilder()
+                .setCustomEventClassName("com.mopub.baaad.invalidinvalid123143")
+                .build();
 
-        CustomEventNativeAdapter.loadNativeAd(context, localExtras, downloadResponse, mCustomEventNativeListener);
+        CustomEventNativeAdapter.loadNativeAd(context, localExtras, testAdResponse, mCustomEventNativeListener);
         verify(mCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND);
         verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(NativeAdInterface.class));
         verify(mCustomEventNative, never()).loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
@@ -70,12 +71,12 @@ public void loadNativeAd_withInvalidClassName_shouldNotifyListenerOfOnNativeAdFa
 
     @Test
     public void loadNativeAd_withInvalidCustomEventNativeData_shouldNotAddToServerExtras() throws Exception {
-        testHttpResponseWithHeaders.addHeader(ResponseHeader.CUSTOM_EVENT_DATA.getKey(), "{ \"bad json");
-        downloadResponse = new DownloadResponse(testHttpResponseWithHeaders);
-        serverExtras.remove("key");
+        testAdResponse = testAdResponse.toBuilder()
+                .setServerExtras(null)
+                .build();
 
-        CustomEventNativeAdapter.loadNativeAd(context, localExtras, downloadResponse, mCustomEventNativeListener);
-        verify(mCustomEventNative).loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
+        CustomEventNativeAdapter.loadNativeAd(context, localExtras, testAdResponse, mCustomEventNativeListener);
+        verify(mCustomEventNative).loadNativeAd(eq(context), eq(mCustomEventNativeListener), eq(localExtras), eq(new HashMap<String, String>()));
         verify(mCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));
         verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(NativeAdInterface.class));
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDiskTaskManagerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDiskTaskManagerTest.java
deleted file mode 100644
index 903fb9b1..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDiskTaskManagerTest.java
+++ /dev/null
@@ -1,142 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.graphics.Bitmap;
-
-import com.mopub.common.CacheService;
-import com.mopub.common.CacheServiceTest;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.tester.org.apache.http.FakeHttpLayer;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.Semaphore;
-
-import static com.mopub.nativeads.TaskManager.TaskManagerListener;
-import static junit.framework.Assert.fail;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyMap;
-import static org.mockito.Mockito.doAnswer;
-
-@RunWith(SdkTestRunner.class)
-public class ImageDiskTaskManagerTest {
-
-    @Mock private TaskManagerListener<Bitmap> imageTaskManagerListener;
-    private Semaphore semaphore;
-    private Map<String, Bitmap> bitmaps;
-    private FakeHttpLayer fakeHttpLayer;
-    private String url1;
-    private String url2;
-    private String url3;
-    private String imageData1;
-    private String imageData2;
-    private String imageData3;
-    private List<String> list;
-    private Context context;
-    private static final int TEST_WIDTH = 400;
-
-    @Before
-    public void setUp() {
-        context = new Activity();
-        semaphore = new Semaphore(0);
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                Object[] args = invocationOnMock.getArguments();
-                Map<String, Bitmap> bitmaps = (Map)args[0];
-                ImageDiskTaskManagerTest.this.bitmaps = bitmaps;
-                semaphore.release();
-                return null;
-            }
-        }).when(imageTaskManagerListener).onSuccess(anyMap());
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                semaphore.release();
-                return null;
-            }
-        }).when(imageTaskManagerListener).onFail();
-
-        fakeHttpLayer = Robolectric.getFakeHttpLayer();
-        url1 = "http://www.mopub.com/";
-        url2 = "http://www.twitter.com";
-        url3 = "http://www.guydot.com";
-        imageData1 = "image_data_1";
-        imageData2 = "image_data_2";
-        imageData3 = "image_data_3";
-
-        list = new ArrayList<String>();
-        list.add(url1);
-        list.add(url2);
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void constructor_withNullUrlsList_shouldThrowNullPointerException() {
-        new ImageDiskTaskManager(null, imageTaskManagerListener, TEST_WIDTH);
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void constructor_withNullInUrlsList_shouldThrowIllegalStateException() {
-        List<String> myList = new ArrayList<String>();
-        myList.add(null);
-        new ImageDiskTaskManager(myList, imageTaskManagerListener, TEST_WIDTH);
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void constructor_withNullImageTaskManagerListener_shouldThrowNullPointerException() {
-        new ImageDiskTaskManager(list, null, TEST_WIDTH);
-    }
-
-    @Test
-    public void execute_withEmptyDiskCache_shouldReturnNullsInMap() throws Exception {
-        new ImageDiskTaskManager(list, imageTaskManagerListener, TEST_WIDTH).execute();
-        semaphore.acquire();
-
-        assertThat(bitmaps.size()).isEqualTo(2);
-        assertThat(bitmaps.containsKey(url1)).isTrue();
-        assertThat(bitmaps.containsKey(url2)).isTrue();
-        assertThat(bitmaps.get(url1)).isNull();
-        assertThat(bitmaps.get(url2)).isNull();
-    }
-
-    @Test
-    public void execute_withPopulatedDiskCache_shouldReturnImagesInMap() throws Exception {
-        CacheService.initialize(context);
-        CacheServiceTest.assertCachesAreEmpty();
-        CacheService.putToDiskCache(url1, imageData1.getBytes());
-        CacheService.putToDiskCache(url2, imageData2.getBytes());
-
-        new ImageDiskTaskManager(list, imageTaskManagerListener, TEST_WIDTH).execute();
-        semaphore.acquire();
-
-        assertThat(bitmaps.size()).isEqualTo(2);
-        assertThat(bitmaps.get(url1)).isNotNull();
-        assertThat(bitmaps.get(url2)).isNotNull();
-    }
-
-    @Test
-    public void execute_withPartiallyPopulatedDiskCache_shouldReturnSomeImagesInMap() throws Exception {
-        CacheService.initialize(context);
-        CacheServiceTest.assertCachesAreEmpty();
-        CacheService.putToDiskCache(url1, imageData1.getBytes());
-
-        new ImageDiskTaskManager(list, imageTaskManagerListener, TEST_WIDTH).execute();
-        semaphore.acquire();
-
-        assertThat(bitmaps.size()).isEqualTo(2);
-        assertThat(bitmaps.get(url1)).isNotNull();
-        assertThat(bitmaps.containsKey(url2)).isTrue();
-        assertThat(bitmaps.get(url2)).isNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDownloadTaskManagerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDownloadTaskManagerTest.java
deleted file mode 100644
index 02e9ed01..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDownloadTaskManagerTest.java
+++ /dev/null
@@ -1,261 +0,0 @@
-package com.mopub.nativeads;
-
-import com.mopub.common.DownloadResponse;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpResponse;
-import org.apache.http.params.BasicHttpParams;
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.tester.org.apache.http.FakeHttpLayer;
-import org.robolectric.tester.org.apache.http.TestHttpResponse;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Map;
-import java.util.concurrent.Semaphore;
-
-import static com.mopub.nativeads.TaskManager.TaskManagerListener;
-import static junit.framework.Assert.fail;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyMap;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class ImageDownloadTaskManagerTest {
-
-    private ImageDownloadTaskManager subject;
-    @Mock private TaskManagerListener<DownloadResponse> mMockImageTaskManagerListener;
-    private Semaphore semaphore;
-    private Map<String, DownloadResponse> networkImages;
-    private int testMaxWidth;
-    private FakeHttpLayer fakeHttpLayer;
-    private String url1;
-    private String url2;
-
-    @Before
-    public void setUp() throws Exception {
-        semaphore = new Semaphore(0);
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                Object[] args = invocationOnMock.getArguments();
-                Map<String, DownloadResponse> map = (Map)args[0];
-                ImageDownloadTaskManagerTest.this.networkImages = map;
-                semaphore.release();
-                return null;
-            }
-        }).when(mMockImageTaskManagerListener).onSuccess(anyMap());
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                semaphore.release();
-                return null;
-            }
-        }).when(mMockImageTaskManagerListener).onFail();
-        testMaxWidth = 30;
-
-        fakeHttpLayer = Robolectric.getFakeHttpLayer();
-        url1 = "http://www.mopub.com/";
-        url2 = "http://www.twitter.com";
-    }
-
-    @Test
-    public void constructor_withValidUrlListAndListener_shouldReturnNewImageDownloadTaskManager() throws Exception {
-        subject = new ImageDownloadTaskManager(
-                Arrays.asList(url1, url2),
-                mMockImageTaskManagerListener,
-                testMaxWidth
-        );
-    }
-
-    @Test
-    public void constructor_withEmptyUrlListAndListener_shouldReturnNewImageDownloadTaskManager() throws Exception {
-        subject = new ImageDownloadTaskManager(
-                new ArrayList<String>(),
-                mMockImageTaskManagerListener,
-                testMaxWidth
-        );
-    }
-
-    @Test
-    public void constructor_withInvalidUrlList_shouldThrowIllegalArgumentException() throws Exception {
-        try {
-            subject = new ImageDownloadTaskManager(
-                    Arrays.asList("BAD URL", url2),
-                    mMockImageTaskManagerListener,
-                    testMaxWidth
-            );
-            fail("ImageDownloadTaskManager didn't throw an illegal argument exception");
-        } catch (IllegalArgumentException e) {
-            // pass
-        }
-
-        try {
-            subject = new ImageDownloadTaskManager(
-                    Arrays.asList(url1, null),
-                    mMockImageTaskManagerListener,
-                    testMaxWidth
-            );
-            fail("ImageDownloadTaskManager didn't throw an illegal state exception");
-        } catch (IllegalStateException e) {
-            // pass
-        }
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void constructor_withNullUrlsList_shouldThrowNullPointerException() {
-        subject = new ImageDownloadTaskManager(
-                null,
-                mMockImageTaskManagerListener,
-                testMaxWidth
-        );
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void constructor_withAnyNullUrls_shouldThrowIllegalStateException() {
-        subject = new ImageDownloadTaskManager(
-                Arrays.asList(url1, null),
-                mMockImageTaskManagerListener,
-                testMaxWidth
-        );
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void constructor_withAnyNullListener_shouldThrowNullPointerException() {
-        subject = new ImageDownloadTaskManager(
-                Arrays.asList(url1, url2),
-                null,
-                testMaxWidth
-        );
-    }
-
-    @Test
-    public void execute_withValidUrlListAndListenerAndHttpResponses_shouldReturnMapOfUrlToDownloadResponse() throws Exception {
-        subject = new ImageDownloadTaskManager(
-                Arrays.asList(url1, url2),
-                mMockImageTaskManagerListener,
-                testMaxWidth
-        );
-
-        String imageData1 = "image_data_1";
-        String imageData2 = "image_data_2";
-        fakeHttpLayer.addPendingHttpResponse(200, imageData1);
-        fakeHttpLayer.addPendingHttpResponse(200, imageData2);
-
-        subject.execute();
-        semaphore.acquire();
-
-        assertThat(networkImages.keySet()).containsOnly(url1, url2);
-
-        // These statements will fail if the objects are not of the correct type.
-        DownloadResponse bitmap1 = networkImages.get(url1);
-        DownloadResponse bitmap2 = networkImages.get(url2);
-
-        verify(mMockImageTaskManagerListener).onSuccess(anyMap());
-        verify(mMockImageTaskManagerListener, never()).onFail();
-    }
-
-    @Test
-    public void execute_withEmptyUrlList_shouldReturnEmptyMap() throws Exception {
-        subject = new ImageDownloadTaskManager(
-                new ArrayList<String>(),
-                mMockImageTaskManagerListener,
-                testMaxWidth
-        );
-
-        subject.execute();
-        semaphore.acquire();
-
-        assertThat(networkImages.isEmpty()).isTrue();
-        verify(mMockImageTaskManagerListener).onSuccess(anyMap());
-        verify(mMockImageTaskManagerListener, never()).onFail();
-    }
-
-    @Test
-    public void execute_withSingleNon200Response_shouldFailAllTasks() throws Exception {
-        subject = new ImageDownloadTaskManager(
-                Arrays.asList(url1, url1, url1, url1, url1),
-                mMockImageTaskManagerListener,
-                testMaxWidth
-        );
-
-        fakeHttpLayer.addPendingHttpResponse(200, "");
-        fakeHttpLayer.addPendingHttpResponse(200, "");
-        fakeHttpLayer.addPendingHttpResponse(200, "");
-        fakeHttpLayer.addPendingHttpResponse(200, "");
-        fakeHttpLayer.addPendingHttpResponse(599, "");
-
-        subject.execute();
-        semaphore.acquire();
-
-        verify(mMockImageTaskManagerListener, never()).onSuccess(anyMap());
-        verify(mMockImageTaskManagerListener).onFail();
-    }
-
-    @Test
-    public void execute_withMultipleNon200Response_shouldFailAllTasks() throws Exception {
-        subject = new ImageDownloadTaskManager(
-                Arrays.asList(url1, url1, url1, url1, url1),
-                mMockImageTaskManagerListener,
-                testMaxWidth
-        );
-
-        fakeHttpLayer.addPendingHttpResponse(599, "");
-        fakeHttpLayer.addPendingHttpResponse(599, "");
-        fakeHttpLayer.addPendingHttpResponse(599, "");
-        fakeHttpLayer.addPendingHttpResponse(599, "");
-        fakeHttpLayer.addPendingHttpResponse(599, "");
-
-        subject.execute();
-        semaphore.acquire();
-
-        verify(mMockImageTaskManagerListener, never()).onSuccess(anyMap());
-        verify(mMockImageTaskManagerListener).onFail();
-    }
-
-    @Ignore("need to fix concurrency logic")
-    @Test
-    public void execute_withSingleInvalidHttpResponse_shouldFailAllTasks() throws Exception {
-        subject = new ImageDownloadTaskManager(
-                Arrays.asList(url1, url1, url1, url1, url1),
-                mMockImageTaskManagerListener,
-                testMaxWidth
-        );
-
-        fakeHttpLayer.addPendingHttpResponse(200, "");
-        fakeHttpLayer.addPendingHttpResponse(200, "");
-        fakeHttpLayer.addPendingHttpResponse(200, "");
-        fakeHttpLayer.addPendingHttpResponse(200, "");
-        fakeHttpLayer.addPendingHttpResponse(createMockHttpResponseThatThrowsOnGetContent());
-
-        subject.execute();
-        semaphore.acquire();
-
-        verify(mMockImageTaskManagerListener, never()).onSuccess(anyMap());
-        verify(mMockImageTaskManagerListener).onFail();
-    }
-
-    private static HttpResponse createMockHttpResponseThatThrowsOnGetContent() throws IOException {
-        HttpEntity mockHttpEntity = mock(HttpEntity.class);
-        when(mockHttpEntity.getContent()).thenThrow(new IOException());
-
-        TestHttpResponse mockHttpResponse = mock(TestHttpResponse.class);
-        when(mockHttpResponse.getStatusLine()).thenReturn(mockHttpResponse.new TestStatusLine());
-        when(mockHttpResponse.getParams()).thenReturn(new BasicHttpParams());
-        when(mockHttpResponse.getEntity()).thenReturn(mockHttpEntity);
-        return mockHttpResponse;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageServiceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageServiceTest.java
deleted file mode 100644
index 47e2e386..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageServiceTest.java
+++ /dev/null
@@ -1,394 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-
-import com.mopub.common.CacheService;
-import com.mopub.common.CacheServiceTest;
-import com.mopub.common.DownloadResponse;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.tester.org.apache.http.FakeHttpLayer;
-
-import java.io.ByteArrayInputStream;
-import java.io.InputStream;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.Semaphore;
-
-import static com.mopub.nativeads.ImageService.ImageServiceListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyMap;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.when;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class ImageServiceTest {
-    private ImageServiceListener imageServiceListener;
-    private Semaphore semaphore;
-    private Map<String, Bitmap> bitmaps;
-    private FakeHttpLayer fakeHttpLayer;
-    private String url1;
-    private String url2;
-    private String url3;
-    private String imageData1;
-    private String imageData2;
-    private String imageData3;
-    private Context context;
-    private Bitmap image2;
-    private Bitmap image1;
-    private DownloadResponse downloadResponse;
-
-    @Before
-    public void setUp() throws Exception {
-        semaphore = new Semaphore(0);
-        imageServiceListener = mock(ImageServiceListener.class);
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                Object[] args = invocationOnMock.getArguments();
-                Map<String, Bitmap> bitmaps = (Map)args[0];
-                ImageServiceTest.this.bitmaps = bitmaps;
-                semaphore.release();
-                return null;
-            }
-        }).when(imageServiceListener).onSuccess(anyMap());
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                semaphore.release();
-                return null;
-            }
-        }).when(imageServiceListener).onFail();
-
-        downloadResponse = mock(DownloadResponse.class);
-        fakeHttpLayer = Robolectric.getFakeHttpLayer();
-        url1 = "http://www.mopub.com/";
-        url2 = "http://www.twitter.com";
-        url3 = "http://www.guydot.com";
-        imageData1 = "image_data_1";
-        imageData2 = "image_data_2";
-        imageData3 = "image_data_3";
-        image1 = BitmapFactory.decodeByteArray(imageData1.getBytes(), 0, imageData1.getBytes().length);
-        image2 = BitmapFactory.decodeByteArray(imageData2.getBytes(), 0, imageData2.getBytes().length);
-        context = new Activity();
-
-        ImageService.initialize(context);
-    }
-
-    @Test
-    public void get_shouldInitializeCaches() throws Exception {
-        assertThat(CacheService.getBitmapLruCache()).isNull();
-        assertThat(CacheService.getDiskLruCache()).isNull();
-
-        ImageService.get(context, new ArrayList<String>(), imageServiceListener);
-
-        assertThat(CacheService.getBitmapLruCache()).isNotNull();
-        assertThat(CacheService.getDiskLruCache()).isNotNull();
-    }
-
-    @Test
-    public void get_shouldGetDisplaySize() {
-        ImageService.clear();
-        assertThat(ImageService.getTargetWidth()).isEqualTo(-1);
-
-        ImageService.get(context, new ArrayList<String>(), imageServiceListener);
-        assertThat(ImageService.getTargetWidth()).isGreaterThan(-1);
-    }
-
-    @Test
-    public void get_withImageInMemoryCache_shouldReturnImage() throws Exception {
-        CacheService.initialize(context);
-        CacheServiceTest.assertCachesAreEmpty();
-        CacheService.putToBitmapCache(url1, image1);
-
-        ImageService.get(context, Arrays.asList(url1), imageServiceListener);
-        // no need for semaphore since memory cache is synchronous
-
-        assertThat(shadowOf(bitmaps.get(url1)).getDescription())
-                .isEqualTo("Bitmap for image_data_1");
-    }
-
-    @Test
-    public void get_withImageInDiskCache_shouldReturnImage() throws Exception {
-        CacheService.initialize(context);
-        CacheServiceTest.assertCachesAreEmpty();
-        CacheService.putToDiskCache(url1, imageData1.getBytes());
-
-        ImageService.get(context, Arrays.asList(url1), imageServiceListener);
-        semaphore.acquire();
-
-        assertThat(fakeHttpLayer.getLastSentHttpRequestInfo()).isNull();
-        assertThat(shadowOf(bitmaps.get(url1)).getDescription())
-                .isEqualTo("Bitmap for image_data_1");
-    }
-
-    @Test
-    public void get_withEmptyCaches_shouldGetImageFromNetwork() throws Exception {
-        CacheService.initialize(context);
-        CacheServiceTest.assertCachesAreEmpty();
-
-        fakeHttpLayer.addPendingHttpResponse(200, imageData1);
-
-        ImageService.get(context, Arrays.asList(url1), imageServiceListener);
-        semaphore.acquire();
-
-        assertThat(shadowOf(bitmaps.get(url1)).getDescription())
-                .isEqualTo("Bitmap for image_data_1");
-    }
-
-    @Test
-    public void get_withImagesInMemoryCacheAndDiskCache_shouldReturnBothImages() throws Exception {
-        CacheService.initialize(context);
-        CacheServiceTest.assertCachesAreEmpty();
-
-        CacheService.putToBitmapCache(url1, image1);
-        CacheService.putToDiskCache(url2, imageData2.getBytes());
-
-        ImageService.get(context, Arrays.asList(url1, url2), imageServiceListener);
-        semaphore.acquire();
-
-        assertThat(bitmaps.get(url1)).isEqualTo(image1);
-        assertThat(fakeHttpLayer.getLastSentHttpRequestInfo()).isNull();
-        assertThat(shadowOf(bitmaps.get(url2)).getDescription())
-                .isEqualTo("Bitmap for image_data_2");
-    }
-
-    @Test
-    public void get_withImagesInMemoryAndNetwork_shouldReturnBothImages() throws Exception {
-        CacheService.initialize(context);
-        CacheServiceTest.assertCachesAreEmpty();
-
-        CacheService.putToBitmapCache(url1, image1);
-        fakeHttpLayer.addPendingHttpResponse(200, imageData2);
-
-        ImageService.get(context, Arrays.asList(url1, url2), imageServiceListener);
-        semaphore.acquire();
-
-        assertThat(shadowOf(bitmaps.get(url1)).getCreatedFromBytes()).isEqualTo(imageData1.getBytes());
-        assertThat(fakeHttpLayer.getLastSentHttpRequestInfo().getHttpHost().toString()).isEqualTo(url2);
-        assertThat(shadowOf(bitmaps.get(url2)).getDescription())
-                .isEqualTo("Bitmap for image_data_2");
-    }
-
-    @Test
-    public void get_withImagesInDiskAndNetwork_shouldReturnBothImages() throws Exception {
-        CacheService.initialize(context);
-        CacheServiceTest.assertCachesAreEmpty();
-
-        CacheService.putToDiskCache(url1, imageData1.getBytes());
-        fakeHttpLayer.addPendingHttpResponse(200, imageData2);
-
-        ImageService.get(context, Arrays.asList(url1, url2), imageServiceListener);
-        semaphore.acquire();
-
-        assertThat(shadowOf(bitmaps.get(url1)).getDescription())
-                .isEqualTo("Bitmap for image_data_1");
-        assertThat(fakeHttpLayer.getLastSentHttpRequestInfo().getHttpHost().toString()).isEqualTo(url2);
-        assertThat(shadowOf(bitmaps.get(url2)).getDescription())
-                .isEqualTo("Bitmap for image_data_2");
-    }
-
-    @Test
-    public void get_withImagesInMemoryAndDiskAndNetwork_shouldReturnAllImages() throws Exception {
-        CacheService.initialize(context);
-        CacheServiceTest.assertCachesAreEmpty();
-
-        CacheService.putToBitmapCache(url1, image1);
-        CacheService.putToDiskCache(url2, imageData2.getBytes());
-        fakeHttpLayer.addPendingHttpResponse(200, imageData3);
-
-        ImageService.get(context, Arrays.asList(url1, url2, url3), imageServiceListener);
-        semaphore.acquire();
-
-        assertThat(shadowOf(bitmaps.get(url1)).getCreatedFromBytes()).isEqualTo(imageData1.getBytes());
-        assertThat(shadowOf(bitmaps.get(url2)).getDescription())
-                .isEqualTo("Bitmap for image_data_2");
-        assertThat(shadowOf(bitmaps.get(url3)).getDescription())
-                .isEqualTo("Bitmap for image_data_3");
-    }
-
-    @Test
-    public void get_withSameKeysInMemoryAndDiskCache_shouldReturnValueFromMemoryCache() throws Exception {
-        CacheService.initialize(context);
-        CacheServiceTest.assertCachesAreEmpty();
-
-        CacheService.putToBitmapCache(url1, image2);
-        CacheService.putToDiskCache(url1, imageData1.getBytes());
-
-        ImageService.get(context, Arrays.asList(url1), imageServiceListener);
-        semaphore.acquire();
-
-        assertThat(shadowOf(bitmaps.get(url1)).getCreatedFromBytes()).isEqualTo(imageData2.getBytes());
-    }
-
-    @Test
-    public void get_withSameKeysInMemoryAndNetwork_shouldReturnValueFromMemoryCache() throws Exception {
-        CacheService.initialize(context);
-        CacheServiceTest.assertCachesAreEmpty();
-
-        CacheService.putToBitmapCache(url1, image2);
-        fakeHttpLayer.addPendingHttpResponse(200, imageData1);
-
-        ImageService.get(context, Arrays.asList(url1), imageServiceListener);
-        semaphore.acquire();
-
-        assertThat(shadowOf(bitmaps.get(url1)).getCreatedFromBytes()).isEqualTo(imageData2.getBytes());
-    }
-
-    @Test
-    public void get_withSameKeysInDiskAndNetwork_shouldReturnValueFromDiskCache() throws Exception {
-        CacheService.initialize(context);
-        CacheServiceTest.assertCachesAreEmpty();
-
-        CacheService.putToDiskCache(url1, imageData2.getBytes());
-        fakeHttpLayer.addPendingHttpResponse(200, imageData1);
-
-        ImageService.get(context, Arrays.asList(url1), imageServiceListener);
-        semaphore.acquire();
-
-        assertThat(fakeHttpLayer.getLastSentHttpRequestInfo()).isNull();
-        assertThat(shadowOf(bitmaps.get(url1)).getDescription())
-                .isEqualTo("Bitmap for image_data_2");
-    }
-
-    @Test
-    public void get_withNetworkFailure_shouldFail() throws Exception {
-        CacheService.initialize(context);
-        CacheServiceTest.assertCachesAreEmpty();
-
-        CacheService.putToBitmapCache(url1, image1);
-        CacheService.putToDiskCache(url2, imageData2.getBytes());
-        fakeHttpLayer.addPendingHttpResponse(500, imageData3);
-
-        ImageService.get(context, Arrays.asList(url1, url2, url3), imageServiceListener);
-        semaphore.acquire();
-
-        assertThat(bitmaps).isNull();
-    }
-
-    @Test
-    public void get_withMultipleNetworkSuccessAndOneFailure_shouldFail() throws Exception {
-        CacheService.initialize(context);
-        CacheServiceTest.assertCachesAreEmpty();
-
-        fakeHttpLayer.addPendingHttpResponse(200, imageData1);
-        fakeHttpLayer.addPendingHttpResponse(200, imageData2);
-        fakeHttpLayer.addPendingHttpResponse(500, imageData3);
-
-        ImageService.get(context, Arrays.asList(url1, url2, url3), imageServiceListener);
-        semaphore.acquire();
-
-        assertThat(bitmaps).isNull();
-    }
-
-    @Test
-    public void putDataInCache_populatesCaches() throws Exception {
-        CacheService.initialize(context);
-
-        Bitmap bitmap1 = BitmapFactory.decodeStream(getInputStreamFromString(imageData1));
-        Bitmap bitmap2 = BitmapFactory.decodeStream(getInputStreamFromString(imageData2));
-
-        assertThat(ImageService.getBitmapFromDiskCache(url1)).isNull();
-        assertThat(ImageService.getBitmapFromDiskCache(url2)).isNull();
-        assertThat(ImageService.getBitmapFromMemoryCache(url1)).isNull();
-        assertThat(ImageService.getBitmapFromMemoryCache(url2)).isNull();
-
-        ImageService.putDataInCache(url1, bitmap1, imageData1.getBytes());
-        ImageService.putDataInCache(url2, bitmap2, imageData2.getBytes());
-
-        Thread.sleep(500); // disk cache put is async
-
-        assertThat(shadowOf(ImageService.getBitmapFromDiskCache(url1)).getDescription())
-                .isEqualTo("Bitmap for image_data_1");
-        assertThat(shadowOf(ImageService.getBitmapFromDiskCache(url2)).getDescription())
-                .isEqualTo("Bitmap for image_data_2");
-        assertThat(ImageService.getBitmapFromMemoryCache(url1)).isEqualTo(bitmap1);
-        assertThat(ImageService.getBitmapFromMemoryCache(url2)).isEqualTo(bitmap2);
-    }
-
-    @Test
-    public void getBitmapsFromMemoryCache_withEmptyCacheAndTwoUrls_returnsNoCacheHitsAndTwoCacheMisses() throws Exception {
-        CacheService.initialize(context);
-        assertThat(CacheService.getBitmapLruCache().size()).isEqualTo(0);
-
-        Map<String, Bitmap> cacheHits = new HashMap<String, Bitmap>(2);
-        List<String> cacheMisses =
-                ImageService.getBitmapsFromMemoryCache(Arrays.asList(url1, url2), cacheHits);
-
-        assertThat(cacheHits).isEmpty();
-        assertThat(cacheMisses).containsOnly(url1, url2);
-    }
-
-    @Test
-    public void getBitmapsFromMemoryCache_withOneCacheEntryAndTwoUrls_returnsOneCacheHitAndOneCacheMiss() throws Exception {
-        CacheService.initialize(context);
-
-        assertThat(CacheService.getBitmapLruCache().size()).isEqualTo(0);
-
-        CacheService.putToBitmapCache(url1, image1);
-
-        Map<String, Bitmap> cacheHits = new HashMap<String, Bitmap>(2);
-        List<String> cacheMisses =
-                ImageService.getBitmapsFromMemoryCache(Arrays.asList(url1, url2), cacheHits);
-
-        assertThat(cacheHits.keySet()).containsOnly(url1);
-        assertThat(cacheMisses).containsOnly(url2);
-    }
-
-    @Test
-    public void asBitmap_withMaxSize_shouldReturnBitmap() {
-
-        String imageData = "fake_bitmap_data";
-        when(downloadResponse.getByteArray()).thenReturn(imageData.getBytes());
-
-        final Bitmap bitmap = ImageService.asBitmap(downloadResponse, 30);
-
-        assertThat(bitmap).isNotNull();
-        assertThat(bitmap).isInstanceOf(Bitmap.class);
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void asBitmap_withNullResponse_shouldThrowNullPointerException() throws Exception {
-        ImageService.asBitmap(null, 30);
-    }
-
-    @Test
-    public void calculateInSampleSize_withImageSmallerThanRequested_shouldBe1() {
-        int nativeWidth = 1024;
-        assertThat(ImageService.calculateInSampleSize(nativeWidth, 2046)).isEqualTo(1);
-    }
-
-    @Test
-    public void calculateInSampleSize_withImageSlightlyBiggerThanRequest_shouldBe1() {
-        int nativeWidth = 1024;
-        assertThat(ImageService.calculateInSampleSize(nativeWidth, 800)).isEqualTo(1);
-
-    }
-
-    @Test
-    public void calculateInSampleSize_withImageMuchBiggerThanRequest_shouldBe4() {
-        int nativeWidth = 2048;
-        int nativeHeight = 1024;
-        assertThat(ImageService.calculateInSampleSize(nativeWidth, 512)).isEqualTo(4);
-    }
-
-    private static InputStream getInputStreamFromString(final String string) {
-        return spy(new ByteArrayInputStream(string.getBytes()));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageViewServiceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageViewServiceTest.java
deleted file mode 100644
index 9bad0526..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageViewServiceTest.java
+++ /dev/null
@@ -1,196 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.graphics.drawable.BitmapDrawable;
-import android.widget.ImageView;
-
-import com.mopub.common.CacheService;
-import com.mopub.common.CacheServiceTest;
-import com.mopub.nativeads.test.support.MoPubShadowBitmap;
-import com.mopub.nativeads.test.support.MoPubShadowDisplay;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.tester.org.apache.http.FakeHttpLayer;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class ImageViewServiceTest {
-
-    private ImageView imageView;
-    private String url1;
-    private String url2;
-    private String imageData1;
-    private String imageData2;
-    private FakeHttpLayer fakeHttpLayer;
-    private Bitmap image1;
-
-    @Before
-    public void setUp() throws Exception {
-        Context context = new Activity();
-        imageView = new ImageView(context);
-        CacheService.initialize(context);
-        ImageService.initialize(context);
-        url1 = "http://www.mopub.com/";
-        url2 = "http://www.twitter.com/";
-        imageData1 = "image_data_1";
-        imageData2 = "image_data_2";
-        image1 = BitmapFactory.decodeByteArray(imageData1.getBytes(), 0, imageData1.getBytes().length);
-        fakeHttpLayer = Robolectric.getFakeHttpLayer();
-    }
-
-    @Test
-    public void loadImageView_withImageInMemoryCache_shouldLoadImageData() throws Exception {
-        CacheServiceTest.assertCachesAreEmpty();
-        CacheService.putToBitmapCache(url1, image1);
-
-        assertThat(ImageViewService.getImageViewUniqueId(imageView)).isNull();
-
-        ImageViewService.loadImageView(url1, imageView);
-
-        assertThat(ImageViewService.getImageViewUniqueId(imageView)).isNotNull();
-        assertThat(shadowOf(getBitmapFromImageView(imageView)).getCreatedFromBytes())
-                .isEqualTo(imageData1.getBytes());
-    }
-
-    @Test
-    public void loadImageView_withImageInDiskCache_shouldLoadImageDataAsync() throws Exception {
-        CacheServiceTest.assertCachesAreEmpty();
-        CacheService.putToDiskCache(url1, imageData1.getBytes());
-        assertThat(CacheService.containsKeyDiskCache(url1)).isTrue();
-
-        assertThat(ImageViewService.getImageViewUniqueId(imageView)).isNull();
-
-        ImageViewService.loadImageView(url1, imageView);
-        Thread.sleep(500);
-
-        assertThat(ImageViewService.getImageViewUniqueId(imageView)).isNotNull();
-        assertThat(shadowOf(getBitmapFromImageView(imageView)).getDescription())
-                .isEqualTo("Bitmap for image_data_1");
-    }
-
-    @Test
-    public void loadImageView_withImageInNetwork_shouldLoadImageDataAsync() throws Exception {
-        CacheServiceTest.assertCachesAreEmpty();
-        fakeHttpLayer.addPendingHttpResponse(200, imageData1);
-
-        assertThat(ImageViewService.getImageViewUniqueId(imageView)).isNull();
-        assertThat(imageView.getDrawable()).isNull();
-
-        ImageViewService.loadImageView(url1, imageView);
-        Thread.sleep(500);
-
-        assertThat(ImageViewService.getImageViewUniqueId(imageView)).isNotNull();
-        assertThat(shadowOf(getBitmapFromImageView(imageView)).getDescription())
-                .isEqualTo("Bitmap for image_data_1");
-    }
-
-    @Test
-    public void loadImageView_withImageInNetworkAndUniqueIdChanges_shouldNotLoadImageData() throws Exception {
-        CacheServiceTest.assertCachesAreEmpty();
-        assertThat(imageView.getDrawable()).isNull();
-        fakeHttpLayer.addPendingHttpResponse(200, imageData1);
-
-        assertThat(ImageViewService.getImageViewUniqueId(imageView)).isNull();
-
-        Robolectric.getBackgroundScheduler().pause();
-        ImageViewService.loadImageView(url1, imageView);
-
-        // Change unique id before running async task to simulate another image load
-        ImageViewService.setImageViewUniqueId(imageView, -1);
-
-        Robolectric.getBackgroundScheduler().runOneTask();
-        Robolectric.getBackgroundScheduler().unPause();
-        Thread.sleep(500);
-
-        assertThat(imageView.getDrawable()).isNull();
-    }
-
-    @Test
-    public void loadImageView_withImageInNetworkAndUniqueIdIsNull_shouldNotLoadImageData() throws Exception {
-        CacheServiceTest.assertCachesAreEmpty();
-        assertThat(imageView.getDrawable()).isNull();
-        fakeHttpLayer.addPendingHttpResponse(200, imageData1);
-
-        assertThat(ImageViewService.getImageViewUniqueId(imageView)).isNull();
-
-        Robolectric.getBackgroundScheduler().pause();
-        ImageViewService.loadImageView(url1, imageView);
-
-        // Change unique id before running async task to simulate another image load
-        ImageViewService.setImageViewUniqueId(imageView, -1);
-
-        Robolectric.getBackgroundScheduler().runOneTask();
-        Robolectric.getBackgroundScheduler().unPause();
-        Thread.sleep(500);
-
-        assertThat(imageView.getDrawable()).isNull();
-    }
-
-    @Test
-    public void loadImageView_withTwoNetworkRequests_shouldLoadSecondImageData() throws Exception {
-        CacheServiceTest.assertCachesAreEmpty();
-        assertThat(imageView.getDrawable()).isNull();
-        fakeHttpLayer.addPendingHttpResponse(200, imageData1);
-        fakeHttpLayer.addPendingHttpResponse(200, imageData2);
-
-        assertThat(ImageViewService.getImageViewUniqueId(imageView)).isNull();
-
-        Robolectric.getBackgroundScheduler().pause();
-        ImageViewService.loadImageView(url1, imageView);
-        ImageViewService.loadImageView(url2, imageView);
-
-        Robolectric.getBackgroundScheduler().runOneTask();
-        Robolectric.getBackgroundScheduler().runOneTask();
-        Robolectric.getBackgroundScheduler().unPause();
-        Thread.sleep(500);
-
-        assertThat(shadowOf(getBitmapFromImageView(imageView)).getDescription())
-                .isEqualTo("Bitmap for image_data_2");
-    }
-
-    @Test
-    public void loadImageView_shouldClearDrawable() throws Exception {
-        CacheServiceTest.assertCachesAreEmpty();
-        assertThat(imageView.getDrawable()).isNull();
-        fakeHttpLayer.addPendingHttpResponse(200, imageData1);
-        fakeHttpLayer.addPendingHttpResponse(200, imageData2);
-
-        assertThat(ImageViewService.getImageViewUniqueId(imageView)).isNull();
-
-        ImageViewService.loadImageView(url1, imageView);
-        Thread.sleep(500);
-        assertThat(shadowOf(getBitmapFromImageView(imageView)).getDescription())
-                .isEqualTo("Bitmap for image_data_1");
-
-        Robolectric.getBackgroundScheduler().pause();
-        ImageViewService.loadImageView(url2, imageView);
-        assertThat(imageView.getDrawable()).isNull();
-    }
-
-    @Test
-    public void loadImageView_withEmptyCachesAndNetworkFailure_shouldNotLoadImageDataAsync() throws Exception {
-        CacheServiceTest.assertCachesAreEmpty();
-        fakeHttpLayer.addPendingHttpResponse(500, imageData1);
-
-        ImageViewService.loadImageView(url1, imageView);
-        Thread.sleep(500);
-
-        assertThat(ImageViewService.getImageViewUniqueId(imageView)).isNotNull();
-        assertThat(imageView.getDrawable()).isNull();
-    }
-
-    static Bitmap getBitmapFromImageView(final ImageView imageView) {
-        return ((BitmapDrawable)imageView.getDrawable()).getBitmap();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
index 9f67e204..361e8fce 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 
+import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
 
 import org.json.JSONArray;
@@ -45,7 +46,7 @@ public void setUp() throws Exception {
         fakeJsonObject.put("iconimage", "iconimageurl");
         fakeJsonObject.put("extraimage", "extraimageurl");
 
-        serverExtras.put(CustomEventNativeAdapter.RESPONSE_BODY_KEY, fakeJsonObject.toString());
+        localExtras.put(DataKeys.JSON_BODY_KEY, fakeJsonObject);
 
         mCustomEventNativeListener = mock(CustomEventNativeListener.class);
     }
@@ -55,21 +56,12 @@ public void tearDown() throws Exception {
         reset(mCustomEventNativeListener);
     }
 
-    @Test
-    public void loadNativeAd_withInvalidResponseBody_shouldNotifyListenerOfOnNativeAdFailed() throws Exception {
-        serverExtras.put(CustomEventNativeAdapter.RESPONSE_BODY_KEY, "{ \"bad json");
-
-        subject.loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
-        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(MoPubCustomEventNative.MoPubForwardingNativeAd.class));
-        verify(mCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.INVALID_JSON);
-    }
-
     @Test
     public void loadNativeAd_withNullResponseBody_shouldNotifyListenerOfOnNativeAdFailed() throws Exception {
-        serverExtras.put(CustomEventNativeAdapter.RESPONSE_BODY_KEY, null);
+        localExtras.remove(DataKeys.JSON_BODY_KEY);
 
         subject.loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
         verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(MoPubCustomEventNative.MoPubForwardingNativeAd.class));
-        verify(mCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+        verify(mCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.INVALID_JSON);
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java
index 7ae673b8..b868229a 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java
@@ -1,24 +1,26 @@
 package com.mopub.nativeads;
 
 import android.app.Activity;
+import android.graphics.Bitmap;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.test.support.CommonUtils;
 import com.mopub.nativeads.test.support.MoPubShadowBitmap;
 import com.mopub.nativeads.test.support.MoPubShadowDisplay;
+import com.mopub.network.MaxWidthImageLoader;
+import com.mopub.network.Networking;
+import com.mopub.volley.RequestQueue;
+import com.mopub.volley.VolleyError;
+import com.mopub.volley.toolbox.ImageLoader;
 
-import org.apache.http.HttpRequest;
 import org.json.JSONArray;
 import org.json.JSONObject;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
+import org.mockito.Mock;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
 import org.robolectric.annotation.Config;
-import org.robolectric.tester.org.apache.http.FakeHttpLayer;
-import org.robolectric.tester.org.apache.http.RequestMatcher;
-import org.robolectric.tester.org.apache.http.TestHttpResponse;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -28,12 +30,17 @@
 
 import static com.mopub.nativeads.NativeResponse.Parameter;
 import static com.mopub.nativeads.NativeResponse.Parameter.requiredKeys;
+import static com.mopub.volley.toolbox.ImageLoader.ImageListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.fest.assertions.api.Assertions.fail;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 @Config(shadows={MoPubShadowBitmap.class, MoPubShadowDisplay.class})
@@ -42,27 +49,25 @@
     private JSONObject fakeJsonObject;
     private MoPubCustomEventNative.MoPubForwardingNativeAd subject;
     private Activity context;
+
+    @Mock
     private CustomEventNative.CustomEventNativeListener mockCustomEventNativeListener;
-    private FakeHttpLayer fakeHttpLayer;
+    @Mock
+    private RequestQueue mockRequestQueue;
+    @Mock
+    private MaxWidthImageLoader mockImageLoader;
+    @Mock
+    private ImageLoader.ImageContainer mockImageContainer;
 
     @Before
     public void setUp() throws Exception {
         context = new Activity();
-        mockCustomEventNativeListener = mock(CustomEventNative.CustomEventNativeListener.class);
         fakeJsonObject = new JSONObject();
         fakeJsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
         fakeJsonObject.put("clktracker", "expected clicktracker");
-
-        fakeHttpLayer = Robolectric.getFakeHttpLayer();
-        fakeHttpLayer.addHttpResponseRule(
-                new RequestMatcher() {
-                    @Override
-                    public boolean matches(HttpRequest request) {
-                        return true;
-                    }
-                },
-                new TestHttpResponse(200, "body")
-        );
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+        Networking.setImageLoaderForTesting(mockImageLoader);
+        stub(mockImageContainer.getBitmap()).toReturn(mock(Bitmap.class));
     }
 
     @Test
@@ -93,7 +98,7 @@ public void loadAd_whenMissingRequiredKeys_shouldThrowIllegalArgumentException()
         fakeJsonObject.remove("imptracker");
 
         try {
-            subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+            subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
             subject.loadAd();
             fail("Expected IllegalArgumentException");
         } catch (IllegalArgumentException e) {
@@ -106,7 +111,7 @@ public void loadAd_whenRequiredKeyOfWrongType_shouldThrowIllegalArgumentExceptio
         fakeJsonObject.put("imptracker", 12345);
 
         try {
-            subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+            subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
             subject.loadAd();
             fail("Expected IllegalArgumentException");
         } catch (IllegalArgumentException e) {
@@ -116,7 +121,7 @@ public void loadAd_whenRequiredKeyOfWrongType_shouldThrowIllegalArgumentExceptio
 
     @Test
     public void loadAd_shouldSetRequiredExpectedFields() throws Exception {
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
         subject.loadAd();
         assertThat(subject.getImpressionTrackers()).containsOnly("url1", "url2");
     }
@@ -134,7 +139,7 @@ public void loadAd_shouldSetOptionalExpectedFields() throws Exception {
         fakeJsonObject.put("ctatext", "expected ctatext");
         fakeJsonObject.put("starrating", 5.0);
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
         subject.loadAd();
 
         assertThat(subject.getTitle()).isEqualTo("expected title");
@@ -154,7 +159,7 @@ public void loadAd_shouldSetOptionalExpectedFields() throws Exception {
     public void loadAd_withIntegerStarRating_shouldSetStarRating() throws Exception {
         fakeJsonObject.put("starrating", 3);
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
         subject.loadAd();
 
         assertThat(subject.getStarRating()).isEqualTo(3.0);
@@ -164,7 +169,7 @@ public void loadAd_withIntegerStarRating_shouldSetStarRating() throws Exception
     public void loadAd_withStringStarRating_shouldSetStarRating() throws Exception {
         fakeJsonObject.put("starrating", "2.3");
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
         subject.loadAd();
 
         assertThat(subject.getStarRating()).isEqualTo(2.3);
@@ -174,7 +179,7 @@ public void loadAd_withStringStarRating_shouldSetStarRating() throws Exception {
     public void loadAd_withInvalidStringStarRating_shouldNotSetStarRating() throws Exception {
         fakeJsonObject.put("starrating", "this is not a number");
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
         subject.loadAd();
 
         assertThat(subject.getStarRating()).isNull();
@@ -184,7 +189,7 @@ public void loadAd_withInvalidStringStarRating_shouldNotSetStarRating() throws E
     public void loadAd_withInvalidlyTypedStarRating_shouldNotSetStarRating() throws Exception {
         fakeJsonObject.put("starrating", new Activity());
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
         subject.loadAd();
 
         assertThat(subject.getStarRating()).isNull();
@@ -202,7 +207,7 @@ public void loadAd_whenImpressionTrackersContainsNonStrings_willCoerceToString()
         impressionTrackers.put(2.12);
         fakeJsonObject.put("imptracker", impressionTrackers);
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
         subject.loadAd();
 
         assertThat(subject.getImpressionTrackers()).containsOnly("url1", "null", "2.12");
@@ -223,7 +228,7 @@ public void loadAd_shouldSetExtraFields() throws Exception {
         fakeJsonObject.put("key3", new JSONArray(array));
         fakeJsonObject.put("key4", new JSONObject(map));
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
         subject.loadAd();
 
         assertThat(subject.getExtra("key1")).isEqualTo("yay json");
@@ -238,10 +243,22 @@ public void loadAd_shouldDownloadImages_shouldNotifyListenerOfOnNativeAdLoaded()
         fakeJsonObject.put("iconimage", "iconimageurl");
         fakeJsonObject.put("extraimage", "extraimageurl");
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        when(mockImageLoader.get(anyString(), any(ImageListener.class)))
+                .then(new Answer<Void>() {
+                    @Override
+                    public Void answer(final InvocationOnMock invocationOnMock) throws Throwable {
+                        ImageListener listener = ((ImageListener) invocationOnMock.getArguments()[1]);
+                        listener.onResponse(mockImageContainer, false);
+                        return null;
+                    }
+                });
+
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
         subject.loadAd();
 
-        CommonUtils.assertHttpRequestsMade(null, "mainimageurl", "iconimageurl", "extraimageurl");
+        verify(mockImageLoader).get(eq("mainimageurl"), any(ImageListener.class));
+        verify(mockImageLoader).get(eq("iconimageurl"), any(ImageListener.class));
+        verify(mockImageLoader).get(eq("extraimageurl"), any(ImageListener.class));
 
         verify(mockCustomEventNativeListener).onNativeAdLoaded(subject);
         verify(mockCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));
@@ -253,23 +270,23 @@ public void loadAd_withFailedImageDownload_shouldNotDownloadImages_shouldNotifyL
         fakeJsonObject.put("iconimage", "iconimageurl");
         fakeJsonObject.put("extraimage", "extraimageurl");
 
-        fakeHttpLayer.clearHttpResponseRules();
-        fakeHttpLayer.addPendingHttpResponse(500, "body");
+        when(mockImageLoader.get(anyString(), any(ImageListener.class)))
+                .then(new Answer<Void>() {
+                    @Override
+                    public Void answer(final InvocationOnMock invocationOnMock) throws Throwable {
+                        ImageListener listener = ((ImageListener) invocationOnMock.getArguments()[1]);
+                        listener.onErrorResponse(new VolleyError());
+                        return null;
+                    }
+                });
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
         subject.loadAd();
 
         verify(mockCustomEventNativeListener, never()).onNativeAdLoaded(subject);
         verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.IMAGE_DOWNLOAD_FAILURE);
     }
 
-    @Ignore("pending")
-    @Test
-    public void loadMainAndIconImages_shouldAsyncLoadImages() throws Exception {
-        // no easy way to test this since nothing can be mocked
-        // also not a critical test since it directly calls another service
-    }
-
     @Test
     public void getExtrasImageUrls_whenExtrasContainsImages_shouldReturnImageUrls() throws Exception {
         // getExtrasImageUrls requires the key to end with a case-insensitive "image" to be counted as an image
@@ -278,7 +295,7 @@ public void getExtrasImageUrls_whenExtrasContainsImages_shouldReturnImageUrls()
         fakeJsonObject.put("otherIMAGE", "image_url_2");
         fakeJsonObject.put("more filler", "ignored");
         fakeJsonObject.put("lastimage", "image_url_3");
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
         subject.loadAd();
 
         assertThat(subject.getExtrasImageUrls()).containsOnly("image_url_1", "image_url_2", "image_url_3");
@@ -291,7 +308,7 @@ public void getExtrasImageUrls_whenExtrasDoesNotContainImageKeys_shouldReturnEmp
         fakeJsonObject.put("imageAtFront", "ignored");
         fakeJsonObject.put("middle_image_in_key", "ignored");
         fakeJsonObject.put("other", "ignored");
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
         subject.loadAd();
 
         assertThat(subject.getExtrasImageUrls()).isEmpty();
@@ -302,7 +319,7 @@ public void getAllImageUrls_withExtraImagesAndMainAndIconImages_shouldReturnAllU
         fakeJsonObject.put("mainimage", "mainImageUrl");
         fakeJsonObject.put("iconimage", "iconImageUrl");
         fakeJsonObject.put("extraimage", "extraImageUrl");
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
         subject.loadAd();
 
         assertThat(subject.getAllImageUrls()).containsOnly(
@@ -316,7 +333,7 @@ public void getAllImageUrls_withExtraImagesAndMainAndIconImages_shouldReturnAllU
     public void getAllImageUrls_withOnlyExtrasImages_shouldNotIncludeMainOrIconImages() throws Exception {
         fakeJsonObject.put("extra1_image", "expected extra1_image");
         fakeJsonObject.put("extra2_image", "expected extra2_image");
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
         subject.loadAd();
 
         assertThat(subject.getAllImageUrls()).containsOnly("expected extra1_image", "expected extra2_image");
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java
index 7a282468..ff855e7e 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java
@@ -8,11 +8,8 @@
 import android.widget.RelativeLayout;
 import android.widget.TextView;
 
-import com.mopub.common.DownloadResponse;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.ResponseHeader;
 import com.mopub.common.util.Utils;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 
 import org.junit.Before;
 import org.junit.Rule;
@@ -20,7 +17,6 @@
 import org.junit.rules.ExpectedException;
 import org.junit.runner.RunWith;
 
-import static com.mopub.nativeads.MoPubNative.MoPubNativeListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 
@@ -53,10 +49,11 @@ public void setUp() throws Exception {
         mNativeAd.setCallToAction("test call to action");
         mNativeAd.setClickDestinationUrl("destinationUrl");
 
-        final TestHttpResponseWithHeaders testHttpResponseWithHeaders = new TestHttpResponseWithHeaders(200, "");
-        testHttpResponseWithHeaders.addHeader(ResponseHeader.CLICK_TRACKING_URL.getKey(), "clickTrackerUrl");
-        final DownloadResponse downloadResponse = new DownloadResponse(testHttpResponseWithHeaders);
-        nativeResponse = new NativeResponse(context, downloadResponse, "test ID", mNativeAd, mock(MoPubNativeListener.class));
+        nativeResponse = new NativeResponse(context,
+                "impressionTrackerUrl",
+                "clickTrackerUrl",
+                "test ID", mNativeAd,
+                mock(MoPubNative.MoPubNativeListener.class));
 
         titleView = new TextView(context);
         titleView.setId((int) Utils.generateUniqueId());
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
index b015d460..fd3efed5 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
@@ -2,20 +2,19 @@
 
 import android.app.Activity;
 
-import com.mopub.common.DownloadTask;
-import com.mopub.common.GpsHelper;
-import com.mopub.common.GpsHelperTest;
-import com.mopub.common.SharedPreferencesHelper;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.test.support.ShadowAsyncTasks;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.nativeads.MoPubNative.MoPubNativeEventListener;
 import com.mopub.nativeads.MoPubNative.MoPubNativeNetworkListener;
+import com.mopub.network.MoPubNetworkError;
+import com.mopub.network.Networking;
+import com.mopub.volley.Request;
+import com.mopub.volley.RequestQueue;
+import com.mopub.volley.VolleyError;
 
-import org.apache.http.client.methods.HttpGet;
 import org.junit.After;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
@@ -24,18 +23,19 @@
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
-import java.util.List;
+import java.net.MalformedURLException;
 import java.util.concurrent.Semaphore;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static android.Manifest.permission.INTERNET;
+import static com.mopub.common.VolleyRequestMatcher.isUrl;
 import static com.mopub.common.util.Reflection.MethodBuilder;
 import static com.mopub.nativeads.MoPubNative.EMPTY_EVENT_LISTENER;
 import static com.mopub.nativeads.MoPubNative.EMPTY_NETWORK_LISTENER;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
+import static org.mockito.Matchers.argThat;
+import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
@@ -48,14 +48,15 @@
     private MoPubNative subject;
     private MethodBuilder methodBuilder;
     private Activity context;
-    private MoPubNative.NativeGpsHelperListener nativeGpsHelperListener;
     private Semaphore semaphore;
     private static final String adUnitId = "test_adunit_id";
     
     @Mock private MoPubNativeEventListener mockEventListener;
 
     @Mock private MoPubNativeNetworkListener mockNetworkListener;
-    
+    @Mock private RequestQueue mockRequestQueue;
+
+
     @Before
     public void setup() {
         context = new Activity();
@@ -63,15 +64,8 @@ public void setup() {
         shadowOf(context).grantPermissions(INTERNET);
         subject = new MoPubNative(context, adUnitId, mockNetworkListener);
         methodBuilder = TestMethodBuilderFactory.getSingletonMock();
-        nativeGpsHelperListener = mock(MoPubNative.NativeGpsHelperListener.class);
+        Networking.setRequestQueueForTesting(mockRequestQueue);
         semaphore = new Semaphore(0);
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                semaphore.release();
-                return null;
-            }
-        }).when(nativeGpsHelperListener).onFetchAdInfoCompleted();
     }
 
     @After
@@ -79,87 +73,6 @@ public void tearDown() {
         reset(methodBuilder);
     }
 
-    @Ignore("fix concurrency issues")
-    @Test
-    public void
-    makeRequest_whenGooglePlayServicesIsLinkedAndAdInfoIsNotCached_shouldCacheAdInfoBeforeFetchingAd() throws Exception {
-        SharedPreferencesHelper.getSharedPreferences(context).edit().clear().commit();
-        GpsHelperTest.verifyCleanClientMetadata(context);
-
-        GpsHelper.setClassNamesForTesting();
-        GpsHelperTest.TestAdInfo adInfo = new GpsHelperTest.TestAdInfo();
-
-        when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
-        when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
-        when(methodBuilder.execute()).thenReturn(
-                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE,
-                adInfo,
-                adInfo.ADVERTISING_ID,
-                adInfo.LIMIT_AD_TRACKING_ENABLED
-        );
-
-        subject.makeRequest(nativeGpsHelperListener);
-        semaphore.acquire();
-
-        verify(nativeGpsHelperListener).onFetchAdInfoCompleted();
-        GpsHelperTest.verifyClientMetadata(context, adInfo);
-    }
-
-    @Test
-    public void makeRequest_whenGooglePlayServicesIsNotLinked_shouldFetchAdFast() throws Exception {
-        SharedPreferencesHelper.getSharedPreferences(context).edit().clear().commit();
-        GpsHelperTest.verifyCleanClientMetadata(context);
-
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
-        when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
-
-        // return error code so it fails
-        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE + 1);
-
-        subject.makeRequest(nativeGpsHelperListener);
-        // no need to sleep since it run the callback without an async task
-
-        verify(nativeGpsHelperListener).onFetchAdInfoCompleted();
-        GpsHelperTest.verifyCleanClientMetadata(context);
-    }
-
-    @Test
-    public void makeRequest_whenGooglePlayServicesIsNotLinked_withNullContext_shouldReturnFast() throws Exception {
-        subject.destroy();
-
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
-        when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
-
-        // return error code so it fails
-        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE + 1);
-
-        subject.makeRequest(nativeGpsHelperListener);
-        // no need to sleep since it run the callback without an async task
-
-        verify(nativeGpsHelperListener, never()).onFetchAdInfoCompleted();
-    }
-
-    @Test
-    public void makeRequest_whenGooglePlayServicesIsLinkedAndAdInfoIsCached_shouldFetchAdFast() throws Exception {
-        GpsHelperTest.TestAdInfo adInfo = new GpsHelperTest.TestAdInfo();
-        GpsHelperTest.populateAndVerifyClientMetadata(context, adInfo);
-        GpsHelper.setClassNamesForTesting();
-
-        when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
-        when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
-        when(methodBuilder.execute()).thenReturn(
-                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE
-        );
-
-        subject.makeRequest(nativeGpsHelperListener);
-        // no need to sleep since it run the callback without an async task
-
-        verify(nativeGpsHelperListener).onFetchAdInfoCompleted();
-        GpsHelperTest.verifyClientMetadata(context, adInfo);
-    }
-
     @Test
     public void destroy_shouldSetListenersToEmptyAndClearContext() {
         assertThat(subject.getContextOrDestroy()).isSameAs(context);
@@ -184,64 +97,62 @@ public void setNativeEventListener_shouldSetListener() {
         assertThat(subject.getMoPubNativeEventListener()).isSameAs(EMPTY_EVENT_LISTENER);
     }
 
-    @Ignore("Flaky thread scheduling is preventing test stability.")
-    @Test
-    public void loadNativeAd_shouldQueueAsyncDownloadTask() {
-        Robolectric.getUiThreadScheduler().pause();
-
-        subject.loadNativeAd(null);
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-    }
-
     @Test
     public void loadNativeAd_shouldReturnFast() {
         Robolectric.getUiThreadScheduler().pause();
 
         subject.destroy();
-        subject.loadNativeAd(null);
+        subject.makeRequest();
 
         assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
     }
 
     @Test
-    public void requestNativeAd_withValidUrl_shouldStartDownloadTaskWithUrl() {
-        Robolectric.getUiThreadScheduler().pause();
-        Robolectric.addPendingHttpResponse(200, "body");
+    public void requestNativeAd_shouldFireNetworkRequest() {
 
         subject.requestNativeAd("http://www.mopub.com");
 
         verify(mockNetworkListener, never()).onNativeFail(any(NativeErrorCode.class));
-        assertThat(wasDownloadTaskExecuted()).isTrue();
-
-        List<?> latestParams = ShadowAsyncTasks.getLatestParams();
-        assertThat(latestParams).hasSize(1);
-        HttpGet httpGet = (HttpGet) latestParams.get(0);
-        assertThat(httpGet.getURI().toString()).isEqualTo("http://www.mopub.com");
+        verify(mockRequestQueue).add(argThat(isUrl("http://www.mopub.com")));
     }
 
     @Test
-    public void requestNativeAd_withInvalidUrl_shouldFireNativeFailAndNotStartAsyncTask() {
-        Robolectric.getUiThreadScheduler().pause();
-
+    public void requestNativeAd_whenReqeustQueueDeliversUnknownError_shouldFireNativeFail() {
+
+        when(mockRequestQueue.add(any(Request.class)))
+                .then(new Answer<Void>() {
+                    @Override
+                    public Void answer(final InvocationOnMock invocationOnMock) throws Throwable {
+                        ((Request) invocationOnMock.getArguments()[0]).deliverError(new VolleyError(new MalformedURLException()));
+                        return null;
+                    }
+                });
         subject.requestNativeAd("//\\//\\::::");
 
         verify(mockNetworkListener).onNativeFail(any(NativeErrorCode.class));
-        assertThat(wasDownloadTaskExecuted()).isFalse();
     }
 
     @Test
-    public void requestNativeAd_withNullUrl_shouldFireNativeFailAndNotStartAsyncTask() {
+    public void requestNativeAd_withNullUrl_shouldFireNativeFail() {
         Robolectric.getUiThreadScheduler().pause();
 
         subject.requestNativeAd(null);
 
         verify(mockNetworkListener).onNativeFail(any(NativeErrorCode.class));
-        assertThat(wasDownloadTaskExecuted()).isFalse();
+        verify(mockRequestQueue, never()).add(any(Request.class));
+    }
+
+    @Test
+    public void onAdError_shouldNotifyListener() {
+        subject.onAdError(new MoPubNetworkError(MoPubNetworkError.Reason.BAD_BODY));
+
+        verify(mockNetworkListener).onNativeFail(eq(NativeErrorCode.INVALID_JSON));
     }
 
-    private boolean wasDownloadTaskExecuted() {
-        return ShadowAsyncTasks.wasCalled() &&
-                (ShadowAsyncTasks.getLatestAsyncTask() instanceof DownloadTask);
+    @Test
+    public void onAdError_whenNotMoPubError_shouldNotifyListener() {
+        subject.onAdError(new VolleyError("generic"));
+
+        verify(mockNetworkListener).onNativeFail(eq(NativeErrorCode.UNSPECIFIED));
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
index 8f14e661..9f8f8f40 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
@@ -8,18 +8,17 @@
 import android.widget.LinearLayout;
 import android.widget.RelativeLayout;
 
-import com.mopub.common.DownloadResponse;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.ResponseHeader;
 import com.mopub.common.util.Utils;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
+import com.mopub.network.Networking;
+import com.mopub.volley.Request;
+import com.mopub.volley.RequestQueue;
 
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.tester.org.apache.http.HttpRequestInfo;
+import org.mockito.Mock;
 
 import java.util.List;
 import java.util.Map;
@@ -30,7 +29,9 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyZeroInteractions;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
@@ -45,7 +46,9 @@
     private NativeAdInterface mMockNativeAd;
     private boolean baseNativeAdRecordedImpression;
     private boolean baseNativeAdIsClicked;
-    private DownloadResponse downloadResponse;
+    @Mock
+    private RequestQueue mockRequestQueue;
+
 
     @Before
     public void setUp() throws Exception {
@@ -74,23 +77,27 @@ public void handleClick(@NonNull final View view) {
 
         view = new LinearLayout(context);
 
-        final TestHttpResponseWithHeaders testHttpResponseWithHeaders = new TestHttpResponseWithHeaders(200, "");
-        testHttpResponseWithHeaders.addHeader(ResponseHeader.IMPRESSION_URL.getKey(), "moPubImpressionTrackerUrl");
-        testHttpResponseWithHeaders.addHeader(ResponseHeader.CLICK_TRACKING_URL.getKey(), "moPubClickTrackerUrl");
-        downloadResponse = new DownloadResponse(testHttpResponseWithHeaders);
+        Networking.setRequestQueueForTesting(mockRequestQueue);
 
         moPubNativeListener = mock(MoPubNative.MoPubNativeListener.class);
 
-        subject = new NativeResponse(context, downloadResponse, "adunit_id", mNativeAd, moPubNativeListener);
+        subject = new NativeResponse(context,
+                "moPubImpressionTrackerUrl",
+                "moPubClickTrackerUrl",
+                "adunit_id", mNativeAd, moPubNativeListener);
 
         mMockNativeAd = mock(NativeAdInterface.class);
-        subjectWMockBaseNativeAd = new NativeResponse(context, downloadResponse, "adunit_id", mMockNativeAd, moPubNativeListener);
+        subjectWMockBaseNativeAd = new NativeResponse(context,
+                "moPubImpressionTrackerUrl",
+                "moPubClickTrackerUrl",
+                "adunit_id", mMockNativeAd, moPubNativeListener);
     }
 
     @Test
     public void constructor_shouldSetNativeEventListenerOnNativeAdInterface() {
         reset(mMockNativeAd);
-        subject = new NativeResponse(context, downloadResponse, "adunit_id", mMockNativeAd, moPubNativeListener);
+        subject = new NativeResponse(context, "moPubImpressionTrackerUrl", "moPubClickTrackerUrl",
+                "adunit_id", mMockNativeAd, moPubNativeListener);
         verify(mMockNativeAd).setNativeEventListener(any(BaseForwardingNativeAd.NativeEventListener.class));
     }
 
@@ -206,33 +213,28 @@ public void prepare_shouldAttachClickListenersToViewTree() {
 
     @Test
     public void recordImpression_shouldRecordImpressionsAndCallIntoBaseNativeAdAndNotifyListenerIdempotently() {
-        Robolectric.getFakeHttpLayer().addPendingHttpResponse(200, "ok");
-        Robolectric.getFakeHttpLayer().addPendingHttpResponse(200, "ok");
         assertThat(subject.getRecordedImpression()).isFalse();
 
         subject.recordImpression(view);
 
         assertThat(subject.getRecordedImpression()).isTrue();
 
-        List<HttpRequestInfo> httpRequestInfos = Robolectric.getFakeHttpLayer().getSentHttpRequestInfos();
-        assertThat(httpRequestInfos.size()).isEqualTo(2);
-        assertThat(httpRequestInfos.get(0).getHttpRequest().getRequestLine().getUri()).isEqualTo("moPubImpressionTrackerUrl");
-        assertThat(httpRequestInfos.get(1).getHttpRequest().getRequestLine().getUri()).isEqualTo("impressionUrl");
-
         assertThat(baseNativeAdRecordedImpression).isTrue();
         verify(moPubNativeListener).onNativeImpression(view);
+        // There are two impression trackers here.
+        verify(mockRequestQueue, times(2)).add(any(Request.class));
 
         // reset state
         baseNativeAdRecordedImpression = false;
-        Robolectric.getFakeHttpLayer().clearRequestInfos();
         reset(moPubNativeListener);
+        reset(mockRequestQueue);
 
         // verify impression tracking doesn't fire again
         subject.recordImpression(view);
         assertThat(subject.getRecordedImpression()).isTrue();
-        assertThat(Robolectric.getFakeHttpLayer().getSentHttpRequestInfos()).isEmpty();
         assertThat(baseNativeAdRecordedImpression).isFalse();
         verify(moPubNativeListener, never()).onNativeImpression(view);
+        verify(mockRequestQueue, never()).add(any(Request.class));
     }
 
     @Test
@@ -240,38 +242,34 @@ public void recordImpression_whenDestroyed_shouldReturnFast() {
         subject.destroy();
         subject.recordImpression(view);
         assertThat(subject.getRecordedImpression()).isFalse();
-        assertThat(Robolectric.getFakeHttpLayer().getSentHttpRequestInfos()).isEmpty();
         assertThat(baseNativeAdRecordedImpression).isFalse();
         verify(moPubNativeListener, never()).onNativeImpression(view);
+        verify(mockRequestQueue, never()).add(any(Request.class));
     }
 
     @Test
     public void handleClick_withNoBaseNativeAdClickDestinationUrl_shouldRecordClickAndCallIntoBaseNativeAdAndNotifyListener() {
-        Robolectric.getFakeHttpLayer().addPendingHttpResponse(200, "ok");
         assertThat(subject.isClicked()).isFalse();
 
         subject.handleClick(view);
 
         assertThat(subject.isClicked()).isTrue();
 
-        List<HttpRequestInfo> httpRequestInfos = Robolectric.getFakeHttpLayer().getSentHttpRequestInfos();
-        assertThat(httpRequestInfos.size()).isEqualTo(1);
-        assertThat(httpRequestInfos.get(0).getHttpRequest().getRequestLine().getUri()).isEqualTo("moPubClickTrackerUrl");
-
         assertThat(baseNativeAdIsClicked).isTrue();
         verify(moPubNativeListener).onNativeClick(view);
+        verify(mockRequestQueue).add(any(Request.class));
 
         // reset state
         baseNativeAdIsClicked = false;
-        Robolectric.getFakeHttpLayer().clearRequestInfos();
         reset(moPubNativeListener);
+        reset(mockRequestQueue);
 
         // second time, tracking does not fire
         subject.handleClick(view);
         assertThat(subject.isClicked()).isTrue();
-        assertThat(Robolectric.getFakeHttpLayer().getSentHttpRequestInfos()).isEmpty();
         assertThat(baseNativeAdRecordedImpression).isFalse();
         verify(moPubNativeListener).onNativeClick(view);
+        verifyZeroInteractions(mockRequestQueue);
     }
 
     @Ignore("pending")
@@ -285,9 +283,9 @@ public void handleClick_whenDestroyed_shouldReturnFast() {
         subject.destroy();
         subject.handleClick(view);
         assertThat(subject.isClicked()).isFalse();
-        assertThat(Robolectric.getFakeHttpLayer().getSentHttpRequestInfos()).isEmpty();
         assertThat(baseNativeAdIsClicked).isFalse();
         verify(moPubNativeListener, never()).onNativeClick(view);
+        verifyZeroInteractions(mockRequestQueue);
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
index 7d7f96bb..4eac7073 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
@@ -7,11 +7,9 @@
 import android.net.Uri;
 import android.telephony.TelephonyManager;
 import android.text.TextUtils;
-
 import com.mopub.common.MoPub;
-import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
 import com.mopub.common.test.support.SdkTestRunner;
-
+import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -19,10 +17,7 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLocationManager;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.EnumSet;
-import java.util.List;
+import java.util.*;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
index 215dd0e3..af5c0dca 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
@@ -4,6 +4,7 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
+import android.graphics.drawable.BitmapDrawable;
 import android.view.ViewGroup;
 import android.widget.Button;
 import android.widget.ImageView;
@@ -11,21 +12,25 @@
 import android.widget.RelativeLayout;
 import android.widget.TextView;
 
-import com.mopub.common.CacheService;
-import com.mopub.common.DownloadResponse;
-import com.mopub.common.util.Utils;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-import com.mopub.nativeads.test.support.MoPubShadowBitmap;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Utils;
+import com.mopub.network.MaxWidthImageLoader;
+import com.mopub.network.Networking;
+import com.mopub.volley.RequestQueue;
+import com.mopub.volley.toolbox.ImageLoader;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Captor;
+import org.mockito.Mock;
 
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
-import static org.robolectric.Robolectric.shadowOf;
+import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
 public class NativeViewHolderTest {
@@ -54,8 +59,30 @@
     private Bitmap extrasImage2;
     private Bitmap extrasImage;
 
+    private static final String IMPRESSION_URL = "http://example.com";
+    private static final String CLICK_URL = "http://test.com";
+    private static final String AD_UNIT_ID = "http://blah.org";
+
+    @Mock
+    private RequestQueue mockRequestQueue;
+    @Mock
+    private MaxWidthImageLoader mockImageLoader;
+    @Mock
+    private ImageLoader.ImageContainer mockImageContainer;
+    @Mock
+    private Bitmap mockBitmap;
+
+    @Captor
+    private ArgumentCaptor<ImageLoader.ImageListener> mainImageCaptor;
+    @Captor
+    private ArgumentCaptor<ImageLoader.ImageListener> iconImageCaptor;
+
+
     @Before
     public void setUp() throws Exception {
+
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+        Networking.setImageLoaderForTesting(mockImageLoader);
         context = new Activity();
         relativeLayout = new RelativeLayout(context);
         relativeLayout.setId((int) Utils.generateUniqueId());
@@ -162,9 +189,6 @@ public void fromViewBinder_withNonExistantIds_shouldLeaveFieldsNull() throws Exc
     @Test
     public void update_shouldAddValuesToViews() throws Exception {
         // Setup for cache state for image gets
-        CacheService.initialize(context);
-        CacheService.putToBitmapCache(mainImageUrl, mainImage);
-        CacheService.putToBitmapCache(iconImageUrl, iconImage);
 
         BaseForwardingNativeAd nativeAd = new BaseForwardingNativeAd() {};
         nativeAd.setTitle("titletext");
@@ -173,8 +197,8 @@ public void update_shouldAddValuesToViews() throws Exception {
         nativeAd.setIconImageUrl("iconimageurl");
         nativeAd.setCallToAction("cta");
 
-        final DownloadResponse downloadResponse = new DownloadResponse(new TestHttpResponseWithHeaders(200, ""));
-        nativeResponse = new NativeResponse(context, downloadResponse, "adunit_id", nativeAd, null);
+        nativeResponse = new NativeResponse(context,
+                IMPRESSION_URL, CLICK_URL, AD_UNIT_ID, nativeAd, null);
 
         viewBinder = new ViewBinder.Builder(relativeLayout.getId())
                 .titleId(titleView.getId())
@@ -192,10 +216,15 @@ public void update_shouldAddValuesToViews() throws Exception {
         assertThat(titleView.getText()).isEqualTo("titletext");
         assertThat(textView.getText()).isEqualTo("texttext");
         assertThat(callToActionView.getText()).isEqualTo("cta");
-        assertThat(shadowOf(ImageViewServiceTest.getBitmapFromImageView(mainImageView))
-                .getCreatedFromBytes()).isEqualTo(mainImageData.getBytes());
-        assertThat(shadowOf(ImageViewServiceTest.getBitmapFromImageView(iconImageView))
-                .getCreatedFromBytes()).isEqualTo(iconImageData.getBytes());
+        verify(mockImageLoader).get(eq("mainimageurl"), mainImageCaptor.capture());
+        verify(mockImageLoader).get(eq("iconimageurl"), iconImageCaptor.capture());
+
+        stub(mockImageContainer.getBitmap()).toReturn(mockBitmap);
+        mainImageCaptor.getValue().onResponse(mockImageContainer, true);
+        iconImageCaptor.getValue().onResponse(mockImageContainer, true);
+
+        assertThat(((BitmapDrawable) mainImageView.getDrawable()).getBitmap()).isEqualTo(mockBitmap);
+        assertThat(((BitmapDrawable) iconImageView.getDrawable()).getBitmap()).isEqualTo(mockBitmap);
     }
 
     @Test
@@ -208,8 +237,8 @@ public void update_withMissingNativeResponseFields_shouldClearPreviousValues() t
         iconImageView.setImageBitmap(BitmapFactory.decodeByteArray("previousiconimagedata".getBytes(), 0, "previousiconimagedata".getBytes().length));
 
         // Only required fields in native response
-        final DownloadResponse downloadResponse = new DownloadResponse(new TestHttpResponseWithHeaders(200, ""));
-        nativeResponse = new NativeResponse(context, downloadResponse, "adunit_id", mock(BaseForwardingNativeAd.class), null);
+        nativeResponse = new NativeResponse(context,
+                IMPRESSION_URL, CLICK_URL, AD_UNIT_ID, mock(BaseForwardingNativeAd.class), null);
 
         viewBinder = new ViewBinder.Builder(relativeLayout.getId())
                 .titleId(titleView.getId())
@@ -239,8 +268,9 @@ public void update_withDifferentViewBinder_shouldNotClearPreviousValues() throws
 
         BaseForwardingNativeAd nativeAd = new BaseForwardingNativeAd() {};
         nativeAd.setCallToAction("cta");
-        final DownloadResponse downloadResponse = new DownloadResponse(new TestHttpResponseWithHeaders(200, ""));
-        nativeResponse = new NativeResponse(context, downloadResponse, "adunit_id", nativeAd, null);
+
+        nativeResponse = new NativeResponse(context,
+                IMPRESSION_URL, CLICK_URL, AD_UNIT_ID, nativeAd, null);
 
         viewBinder = new ViewBinder.Builder(relativeLayout.getId())
                 .callToActionId(callToActionView.getId())
@@ -259,16 +289,14 @@ public void update_withDifferentViewBinder_shouldNotClearPreviousValues() throws
     @Test
     public void updateExtras_shouldAddValuesToViews() throws Exception {
         // Setup for cache state for image gets
-        CacheService.initialize(context);
-        CacheService.putToBitmapCache("extrasimageurl", extrasImage);
-        CacheService.putToBitmapCache("extrasimageurl2", extrasImage2);
 
         BaseForwardingNativeAd nativeAd = new BaseForwardingNativeAd() {};
         nativeAd.addExtra("extrastext", "extrastexttext");
         nativeAd.addExtra("extrasimage", "extrasimageurl");
         nativeAd.addExtra("extrasimage2", "extrasimageurl2");
-        final DownloadResponse downloadResponse = new DownloadResponse(new TestHttpResponseWithHeaders(200, ""));
-        nativeResponse = new NativeResponse(context, downloadResponse, "adunit_id", nativeAd, null);
+
+        nativeResponse = new NativeResponse(context,
+                IMPRESSION_URL, CLICK_URL, AD_UNIT_ID, nativeAd, null);
 
         viewBinder = new ViewBinder.Builder(relativeLayout.getId())
                 .addExtra("extrastext", extrasTextView.getId())
@@ -282,10 +310,16 @@ public void updateExtras_shouldAddValuesToViews() throws Exception {
         nativeViewHolder.updateExtras(relativeLayout, nativeResponse, viewBinder);
 
         assertThat(extrasTextView.getText()).isEqualTo("extrastexttext");
-        assertThat(shadowOf(ImageViewServiceTest.getBitmapFromImageView(extrasImageView))
-                .getCreatedFromBytes()).isEqualTo("extrasimagedata".getBytes());
-        assertThat(shadowOf(ImageViewServiceTest.getBitmapFromImageView(extrasImageView2))
-                .getCreatedFromBytes()).isEqualTo("extrasimagedata2".getBytes());
+
+        verify(mockImageLoader).get(eq("extrasimageurl"), mainImageCaptor.capture());
+        verify(mockImageLoader).get(eq("extrasimageurl2"), iconImageCaptor.capture());
+
+        stub(mockImageContainer.getBitmap()).toReturn(mockBitmap);
+        mainImageCaptor.getValue().onResponse(mockImageContainer, true);
+        iconImageCaptor.getValue().onResponse(mockImageContainer, true);
+
+        assertThat(((BitmapDrawable) extrasImageView.getDrawable()).getBitmap()).isEqualTo(mockBitmap);
+        assertThat(((BitmapDrawable) extrasImageView2.getDrawable()).getBitmap()).isEqualTo(mockBitmap);
     }
 
     @Test
@@ -294,8 +328,8 @@ public void updateExtras_withMissingExtrasValues_shouldClearPreviousValues() thr
         extrasImageView.setImageBitmap(BitmapFactory.decodeByteArray("previousextrasimagedata".getBytes(), 0, "previousextrasimagedata".getBytes().length));
         extrasImageView2.setImageBitmap(BitmapFactory.decodeByteArray("previousextrasimagedata2".getBytes(), 0, "previousextrasimagedata2".getBytes().length));
 
-        final DownloadResponse downloadResponse = new DownloadResponse(new TestHttpResponseWithHeaders(200, ""));
-        nativeResponse = new NativeResponse(context, downloadResponse, "adunit_id", new BaseForwardingNativeAd(){}, null);
+        nativeResponse = new NativeResponse(context,
+                IMPRESSION_URL, CLICK_URL, AD_UNIT_ID, new BaseForwardingNativeAd(){}, null);
 
         viewBinder = new ViewBinder.Builder(relativeLayout.getId())
                 .addExtra("extrastext", extrasTextView.getId())
@@ -307,10 +341,6 @@ public void updateExtras_withMissingExtrasValues_shouldClearPreviousValues() thr
                 NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
 
         assertThat(extrasTextView.getText()).isEqualTo("previousextrastext");
-        assertThat(shadowOf(ImageViewServiceTest.getBitmapFromImageView(extrasImageView))
-                .getCreatedFromBytes()).isEqualTo("previousextrasimagedata".getBytes());
-        assertThat(shadowOf(ImageViewServiceTest.getBitmapFromImageView(extrasImageView2))
-                .getCreatedFromBytes()).isEqualTo("previousextrasimagedata2".getBytes());
 
         nativeViewHolder.updateExtras(relativeLayout, nativeResponse, viewBinder);
 
@@ -325,8 +355,8 @@ public void updateExtras_withMismatchingViewTypes_shouldSetTextViewToImageUrlAnd
         nativeAd.addExtra("extrastext", "extrastexttext");
         nativeAd.addExtra("extrasimage", "extrasimageurl");
 
-        final DownloadResponse downloadResponse = new DownloadResponse(new TestHttpResponseWithHeaders(200, ""));
-        nativeResponse = new NativeResponse(context, downloadResponse, "adunit_id", nativeAd, null);
+        nativeResponse = new NativeResponse(context,
+                IMPRESSION_URL, CLICK_URL, AD_UNIT_ID, nativeAd, null);
 
         viewBinder = new ViewBinder.Builder(relativeLayout.getId())
                 .addExtra("extrastext", extrasImageView.getId())
@@ -341,6 +371,7 @@ public void updateExtras_withMismatchingViewTypes_shouldSetTextViewToImageUrlAnd
 
         nativeViewHolder.updateExtras(relativeLayout, nativeResponse, viewBinder);
 
+        // Volley's imageloader will set this to a bitmapdrawable with no bitmap
         assertThat(extrasTextView.getText()).isEqualTo("extrasimageurl");
         assertThat(extrasImageView.getDrawable()).isNull();
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java
new file mode 100644
index 00000000..c67dd6cf
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java
@@ -0,0 +1,144 @@
+package com.mopub.nativeads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.network.MoPubNetworkError;
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.Response;
+import com.mopub.volley.VolleyError;
+
+import org.json.JSONException;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+
+import java.util.TreeMap;
+
+import static junit.framework.Assert.fail;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class PositioningRequestTest {
+
+    String url = "http://example.com";
+    @Mock
+    Response.Listener<MoPubNativeAdPositioning.MoPubClientPositioning> mockListener;
+    @Mock
+    Response.ErrorListener mockErrorListener;
+
+    NetworkResponse mockNetworkResponse;
+    PositioningRequest subject;
+
+    @Before
+    public void setup() {
+        subject = new PositioningRequest(url, mockListener, mockErrorListener);
+    }
+
+    @Test
+    public void parseNetworkResponse_shouldReturnPositioning() {
+        mockNetworkResponse = new NetworkResponse(200, "{fixed: []}".getBytes(), new TreeMap<String, String>(), false);
+        assertThat(subject.parseNetworkResponse(mockNetworkResponse).result)
+                .isExactlyInstanceOf(MoPubNativeAdPositioning.MoPubClientPositioning.class);
+    }
+    
+    @Test
+    public void parseNetworkResponse_shouldReturnError() {
+        mockNetworkResponse = new NetworkResponse(200, "garbage".getBytes(), new TreeMap<String, String>(), false);
+        assertThat(subject.parseNetworkResponse(mockNetworkResponse).error)
+                .isExactlyInstanceOf(VolleyError.class);
+    }
+    
+    @Test
+    public void parseJson_noFixedPositions_shouldReturnEmptyPositioning() throws Exception {
+        MoPubNativeAdPositioning.MoPubClientPositioning positioning = subject.parseJson(
+                "{fixed: []}");
+        assertThat(positioning.getFixedPositions()).isEmpty();
+        assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubNativeAdPositioning.MoPubClientPositioning.NO_REPEAT);
+    }
+
+    @Test
+    public void parseJson_oneFixedPosition_shouldReturnValidPositioning() throws Exception {
+        MoPubNativeAdPositioning.MoPubClientPositioning positioning = subject.parseJson(
+                "{fixed: [{position: 2}]}");
+        assertThat(positioning.getFixedPositions()).containsOnly(2);
+        assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubNativeAdPositioning.MoPubClientPositioning.NO_REPEAT);
+    }
+
+    @Test
+    public void parseJson_twoFixedPositions_shouldReturnValidPositioning() throws Exception {
+        MoPubNativeAdPositioning.MoPubClientPositioning positioning = subject.parseJson(
+                "{fixed: [{position: 1}, {position: 8}]}");
+        assertThat(positioning.getFixedPositions()).containsExactly(1, 8);
+        assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubNativeAdPositioning.MoPubClientPositioning.NO_REPEAT);
+    }
+
+    @Test
+    public void parseJson_twoFixedPositions_shouldIgnoreNonZeroSection() throws Exception {
+        MoPubNativeAdPositioning.MoPubClientPositioning positioning = subject.parseJson(
+                "{fixed: [{section: 0, position: 5}, {section: 1, position: 8}]}");
+        assertThat(positioning.getFixedPositions()).containsOnly(5);
+        assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubNativeAdPositioning.MoPubClientPositioning.NO_REPEAT);
+    }
+
+    @Test
+    public void parseJson_invalidFixedPosition_shouldThrowException() throws Exception {
+        // Must have either fixed or repeating positions.
+        checkException("", "Empty response");
+        checkException("{}", "Must contain fixed or repeating positions");
+        checkException("{\"error\":\"WARMING_UP\"}", "WARMING_UP");
+
+        // Position is required.
+        checkException("{fixed: [{}]}", "JSONObject[\"position\"] not found.");
+        checkException("{fixed: [{section: 0}]}", "JSONObject[\"position\"] not found.");
+
+        // Section is optional, but if it exists must be > 0
+        checkException("{fixed: [{section: -1, position: 8}]}", "Invalid section -1 in JSON response");
+
+        // Positions must be between [0 and 2 ^ 16).
+        checkException("{fixed: [{position: -1}]}", "Invalid position -1 in JSON response");
+        checkException("{fixed: [{position: 1}, {position: -8}]}",
+                "Invalid position -8 in JSON response");
+        checkException("{fixed: [{position: 1}, {position: 66000}]}",
+                "Invalid position 66000 in JSON response");
+    }
+
+    @Test
+    public void parseJson_repeatingInterval_shouldReturnValidPositioning() throws Exception {
+        MoPubNativeAdPositioning.MoPubClientPositioning positioning = subject.parseJson(
+                "{repeating: {interval: 2}}");
+        assertThat(positioning.getFixedPositions()).isEmpty();
+        assertThat(positioning.getRepeatingInterval()).isEqualTo(2);
+    }
+
+    @Test
+    public void parseJson_invalidRepeating_shouldThrowException() throws Exception {
+        checkException("{repeating: }", "Missing value at character 12");
+        checkException("{repeating: {}}", "JSONObject[\"interval\"] not found.");
+
+        // Intervals must be between [2 and 2 ^ 16).
+        checkException("{repeating: {interval: -1}}", "Invalid interval -1 in JSON response");
+        checkException("{repeating: {interval: 0}}", "Invalid interval 0 in JSON response");
+        checkException("{repeating: {interval: 1}}", "Invalid interval 1 in JSON response");
+        checkException("{repeating: {interval: 66000}}",
+                "Invalid interval 66000 in JSON response");
+    }
+
+    @Test
+    public void parseJson_fixedAndRepeating_shouldReturnValidPositioning() throws Exception {
+        MoPubNativeAdPositioning.MoPubClientPositioning positioning = subject.parseJson(
+                "{fixed: [{position: 0}, {position: 1}], repeating: {interval: 2}}");
+        assertThat(positioning.getFixedPositions()).containsExactly(0, 1);
+        assertThat(positioning.getRepeatingInterval()).isEqualTo(2);
+    }
+
+    private void checkException(String json, String expectedMessage) throws Exception {
+        try {
+            subject.parseJson(json);
+        } catch (JSONException e) {
+            return;
+        } catch (MoPubNetworkError e) {
+            return;
+        }
+        fail("Should have received an exception");
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
index 2953449e..e666c2ae 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
@@ -2,18 +2,15 @@
 
 import android.app.Activity;
 import android.os.Build.VERSION_CODES;
-
 import com.mopub.common.DownloadResponse;
-import com.mopub.common.DownloadTask;
-import com.mopub.common.DownloadTask.DownloadTaskListener;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
 import com.mopub.nativeads.PositioningSource.PositioningListener;
-import com.mopub.nativeads.ServerPositioningSource.DownloadTaskProvider;
-
+import com.mopub.network.Networking;
+import com.mopub.volley.Request;
+import com.mopub.volley.RequestQueue;
+import com.mopub.volley.VolleyError;
 import org.apache.http.HttpStatus;
-import org.apache.http.client.methods.HttpGet;
-import org.json.JSONException;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -22,31 +19,27 @@
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
-import org.robolectric.tester.org.apache.http.TestHttpResponse;
 
-import java.util.concurrent.Executor;
-
-import static junit.framework.Assert.fail;
-import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyBoolean;
-import static org.mockito.Mockito.mock;
+import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 public class ServerPositioningSourceTest {
-    @Mock DownloadTaskProvider mockDownloadTaskProvider;
-    @Mock DownloadTaskListener mockDownloadTaskListener;
-    @Mock DownloadTask mockDownloadTask;
     @Mock PositioningListener mockPositioningListener;
-    @Captor ArgumentCaptor<DownloadTaskListener> taskListenerCaptor;
+    @Captor ArgumentCaptor<PositioningRequest> positionRequestCaptor;
     @Mock DownloadResponse mockValidResponse;
     @Mock DownloadResponse mockNotFoundResponse;
     @Mock DownloadResponse mockInvalidJsonResponse;
     @Mock DownloadResponse mockWarmingUpJsonResponse;
+
+    @Mock
+    RequestQueue mockRequestQueue;
+
     @Captor ArgumentCaptor<MoPubClientPositioning> positioningCaptor;
 
     ServerPositioningSource subject;
@@ -54,10 +47,9 @@
     @Before
     public void setUp() {
         Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-        subject = new ServerPositioningSource(activity, mockDownloadTaskProvider);
+        subject = new ServerPositioningSource(activity);
 
-        when(mockDownloadTaskProvider.get(any(DownloadTaskListener.class)))
-                .thenReturn(mockDownloadTask);
+        Networking.setRequestQueueForTesting(mockRequestQueue);
 
         when(mockValidResponse.getStatusCode()).thenReturn(HttpStatus.SC_OK);
         when(mockValidResponse.getByteArray()).thenReturn("{fixed: []}".getBytes());
@@ -72,118 +64,73 @@ public void setUp() {
         when(mockNotFoundResponse.getStatusCode()).thenReturn(HttpStatus.SC_NOT_FOUND);
     }
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void loadPositions_atLeastIcs_shouldExecuteDownloadTask() {
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-        verify(mockDownloadTask).executeOnExecutor(any(Executor.class), any(HttpGet.class));
-    }
-
-    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
     @Test
-    public void loadPositions_beforeIcs_shouldExecuteDownloadTask() {
+    public void loadPositions_shouldAddToRequestQueue() {
         subject.loadPositions("test_ad_unit", mockPositioningListener);
-        verify(mockDownloadTask).execute(any(HttpGet.class));
+        verify(mockRequestQueue).add(any(Request.class));
     }
 
     @Test
-    public void loadPositionsTwice_shouldCancelPreviousDownloadTask_shouldNotCallListener() {
+    public void loadPositionsTwice_shouldCancelPreviousRequest_shouldNotCallListener() {
         subject.loadPositions("test_ad_unit", mockPositioningListener);
         subject.loadPositions("test_ad_unit", mockPositioningListener);
-        verify(mockDownloadTask).cancel(true);
+        verify(mockRequestQueue, times(2)).add(any(Request.class));
 
         verify(mockPositioningListener, never()).onFailed();
         verify(mockPositioningListener, never()).onLoad(any(MoPubClientPositioning.class));
     }
 
     @Test
-    public void loadPositionsTwice_withPendingRetry_shouldNotCancelPreviousDownloadTask() {
+    public void loadPositionsTwice_afterSuccess_shouldNotCancelPreviousRequest() {
         subject.loadPositions("test_ad_unit", mockPositioningListener);
-
-        verify(mockDownloadTaskProvider).get(taskListenerCaptor.capture());
-        taskListenerCaptor.getValue().onComplete("some_url", mockValidResponse);
+        verify(mockRequestQueue).add(positionRequestCaptor.capture());
+        reset(mockRequestQueue);
 
         subject.loadPositions("test_ad_unit", mockPositioningListener);
-        verify(mockDownloadTask, never()).cancel(anyBoolean());
+        verify(mockRequestQueue).add(any(Request.class));
     }
 
     @Test
     public void loadPositions_thenComplete_withValidResponse_shouldCallOnLoadListener() {
         subject.loadPositions("test_ad_unit", mockPositioningListener);
 
-        verify(mockDownloadTaskProvider).get(taskListenerCaptor.capture());
-        taskListenerCaptor.getValue().onComplete("some_url", mockValidResponse);
-
-        verify(mockPositioningListener).onLoad(positioningCaptor.capture());
-        MoPubClientPositioning positioning = positioningCaptor.getValue();
-        assertThat(positioning.getFixedPositions()).isEmpty();
-        assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubClientPositioning.NO_REPEAT);
-    }
-
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void loadPositions_thenComplete_withNullResponse_shouldRetry() throws Exception {
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-
-        verify(mockDownloadTaskProvider).get(taskListenerCaptor.capture());
-        taskListenerCaptor.getValue().onComplete("some_url", null);
-
-        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
-        verify(mockDownloadTask, times(2))
-                .executeOnExecutor(any(Executor.class), any(HttpGet.class));
-    }
+        verify(mockRequestQueue).add(positionRequestCaptor.capture());
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void loadPositions_thenComplete_withNotFoundResponse_shouldRetry() {
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-        
-        verify(mockDownloadTaskProvider).get(taskListenerCaptor.capture());
-        taskListenerCaptor.getValue().onComplete("some_url", mockNotFoundResponse);
+        final PositioningRequest value = positionRequestCaptor.getValue();
+        final MoPubClientPositioning response = new MoPubClientPositioning().enableRepeatingPositions(3);
+        value.deliverResponse(response);
 
-        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
-        verify(mockDownloadTask, times(2))
-                .executeOnExecutor(any(Executor.class), any(HttpGet.class));
+        verify(mockPositioningListener).onLoad(eq(response));
     }
 
     @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
-    public void loadPositions_thenComplete_withWarmingUpResponse_shouldRetry() {
+    public void loadPositions_thenComplete_withErrorResponse_shouldRetry() throws Exception {
         subject.loadPositions("test_ad_unit", mockPositioningListener);
 
-        verify(mockDownloadTaskProvider).get(taskListenerCaptor.capture());
-        taskListenerCaptor.getValue().onComplete("some_url", mockWarmingUpJsonResponse);
+        verify(mockRequestQueue).add(positionRequestCaptor.capture());
+        reset(mockRequestQueue);
+        // We get VolleyErrors for invalid JSON, 404s, 5xx, and {"error": "WARMING_UP"}
+        positionRequestCaptor.getValue().deliverError(new VolleyError("Some test error"));
 
         Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
-        verify(mockDownloadTask, times(2))
-                .executeOnExecutor(any(Executor.class), any(HttpGet.class));
+        verify(mockRequestQueue).add(any(Request.class));
     }
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void loadPositions_thenComplete_withInvalidJsonResponse_shouldRetry() {
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-
-        verify(mockDownloadTaskProvider).get(taskListenerCaptor.capture());
-        taskListenerCaptor.getValue().onComplete("some_url", mockInvalidJsonResponse);
-
-        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
-        verify(mockDownloadTask, times(2))
-                .executeOnExecutor(any(Executor.class), any(HttpGet.class));
-    }
 
     @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void loadPositions_withPendingRetry_shouldNotRetry() {
         subject.loadPositions("test_ad_unit", mockPositioningListener);
 
-        verify(mockDownloadTaskProvider).get(taskListenerCaptor.capture());
-        taskListenerCaptor.getValue().onComplete("some_url", mockInvalidJsonResponse);
+        verify(mockRequestQueue).add(positionRequestCaptor.capture());
+        reset(mockRequestQueue);
+        positionRequestCaptor.getValue().deliverError(new VolleyError("testError"));
 
         subject.loadPositions("test_ad_unit", mockPositioningListener);
         Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
-        verify(mockDownloadTask, times(2))
-                .executeOnExecutor(any(Executor.class), any(HttpGet.class));
+        // If a retry happened, we'd have two here.
+        verify(mockRequestQueue).add(any(Request.class));
     }
 
     @Test
@@ -192,110 +139,8 @@ public void loadPositions_thenFailAfterMaxRetryTime_shouldCallFailureHandler() {
 
         subject.loadPositions("test_ad_unit", mockPositioningListener);
 
-        verify(mockDownloadTaskProvider).get(taskListenerCaptor.capture());
-        taskListenerCaptor.getValue().onComplete("some_url", mockInvalidJsonResponse);
-
-        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
+        verify(mockRequestQueue).add(positionRequestCaptor.capture());
+        positionRequestCaptor.getValue().deliverError(new VolleyError("test error"));
         verify(mockPositioningListener).onFailed();
     }
-
-    @Test
-    public void parseJsonResponse_noFixedPositions_shouldReturnEmptyPositioning()
-            throws JSONException {
-        MoPubClientPositioning positioning = subject.parseJsonResponse(
-                "{fixed: []}");
-        assertThat(positioning.getFixedPositions()).isEmpty();
-        assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubClientPositioning.NO_REPEAT);
-    }
-
-    @Test
-    public void parseJsonResponse_oneFixedPosition_shouldReturnValidPositioning()
-            throws JSONException {
-        MoPubClientPositioning positioning = subject.parseJsonResponse(
-                "{fixed: [{position: 2}]}");
-        assertThat(positioning.getFixedPositions()).containsOnly(2);
-        assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubClientPositioning.NO_REPEAT);
-    }
-
-    @Test
-    public void parseJsonResponse_twoFixedPositions_shouldReturnValidPositioning()
-            throws JSONException {
-        MoPubClientPositioning positioning = subject.parseJsonResponse(
-                "{fixed: [{position: 1}, {position: 8}]}");
-        assertThat(positioning.getFixedPositions()).containsExactly(1, 8);
-        assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubClientPositioning.NO_REPEAT);
-    }
-
-    @Test
-    public void parseJsonResponse_twoFixedPositions_shouldIgnoreNonZeroSection()
-            throws JSONException {
-        MoPubClientPositioning positioning = subject.parseJsonResponse(
-                "{fixed: [{section: 0, position: 5}, {section: 1, position: 8}]}");
-        assertThat(positioning.getFixedPositions()).containsOnly(5);
-        assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubClientPositioning.NO_REPEAT);
-    }
-
-    @Test
-    public void parseJsonResponse_invalidFixedPosition_shouldThrowException() {
-        // Must have either fixed or repeating positions.
-        checkException(null, "Empty response");
-        checkException("", "Empty response");
-        checkException("{}", "Must contain fixed or repeating positions");
-        checkException("{\"error\":\"WARMING_UP\"}", "WARMING_UP");
-
-        // Position is required.
-        checkException("{fixed: [{}]}", "JSONObject[\"position\"] not found.");
-        checkException("{fixed: [{section: 0}]}", "JSONObject[\"position\"] not found.");
-
-        // Section is optional, but if it exists must be > 0
-        checkException("{fixed: [{section: -1, position: 8}]}", "Invalid section -1 in JSON response");
-
-        // Positions must be between [0 and 2 ^ 16).
-        checkException("{fixed: [{position: -1}]}", "Invalid position -1 in JSON response");
-        checkException("{fixed: [{position: 1}, {position: -8}]}",
-                "Invalid position -8 in JSON response");
-        checkException("{fixed: [{position: 1}, {position: 66000}]}",
-                "Invalid position 66000 in JSON response");
-    }
-
-    @Test
-    public void parseJsonResponse_repeatingInterval_shouldReturnValidPositioning()
-            throws JSONException {
-        MoPubClientPositioning positioning = subject.parseJsonResponse(
-                "{repeating: {interval: 2}}");
-        assertThat(positioning.getFixedPositions()).isEmpty();
-        assertThat(positioning.getRepeatingInterval()).isEqualTo(2);
-    }
-
-    @Test
-    public void parseJsonResponse_invalidRepeating_shouldThrowException() {
-        checkException("{repeating: }", "Missing value at character 12");
-        checkException("{repeating: {}}", "JSONObject[\"interval\"] not found.");
-
-        // Intervals must be between [2 and 2 ^ 16).
-        checkException("{repeating: {interval: -1}}", "Invalid interval -1 in JSON response");
-        checkException("{repeating: {interval: 0}}", "Invalid interval 0 in JSON response");
-        checkException("{repeating: {interval: 1}}", "Invalid interval 1 in JSON response");
-        checkException("{repeating: {interval: 66000}}",
-                "Invalid interval 66000 in JSON response");
-    }
-
-    @Test
-    public void parseJsonResponse_fixedAndRepeating_shouldReturnValidPositioning()
-            throws JSONException {
-        MoPubClientPositioning positioning = subject.parseJsonResponse(
-                "{fixed: [{position: 0}, {position: 1}], repeating: {interval: 2}}");
-        assertThat(positioning.getFixedPositions()).containsExactly(0, 1);
-        assertThat(positioning.getRepeatingInterval()).isEqualTo(2);
-    }
-
-    private void checkException(String json, String expectedMessage) {
-        try {
-            subject.parseJsonResponse(json);
-        } catch (JSONException e) {
-            assertThat(e.getMessage()).isEqualTo(expectedMessage);
-            return;
-        }
-        fail("Should have received an exception");
-    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
new file mode 100644
index 00000000..ebc45792
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
@@ -0,0 +1,134 @@
+package com.mopub.network;
+
+import com.mopub.common.AdFormat;
+import com.mopub.common.AdType;
+import com.mopub.common.DataKeys;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.ResponseHeader;
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.Response;
+
+import org.json.JSONException;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+
+import java.nio.charset.Charset;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+public class AdRequestTest {
+
+    @Mock
+    private AdRequest.Listener mockListener;
+    @Mock
+    private AdResponse mockAdResponse;
+
+    private AdRequest subject;
+    private HashMap<String, String> defaultHeaders;
+
+
+    @Before
+    public void setup() {
+        subject = new AdRequest("testUrl", AdFormat.NATIVE, mockListener);
+        defaultHeaders = new HashMap<String, String>();
+        defaultHeaders.put(ResponseHeader.SCROLLABLE.getKey(), "0");
+        defaultHeaders.put(ResponseHeader.REDIRECT_URL.getKey(), "redirect");
+        defaultHeaders.put(ResponseHeader.CLICK_TRACKING_URL.getKey(), "click_tracking");
+        defaultHeaders.put(ResponseHeader.IMPRESSION_URL.getKey(), "impression");
+        defaultHeaders.put(ResponseHeader.FAIL_URL.getKey(), "fail_url");
+        defaultHeaders.put(ResponseHeader.REFRESH_TIME.getKey(), "30");
+    }
+
+    @Test
+    public void parseNetworkResponse_stringBody_shouldSucceed() throws Exception {
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.HTML);
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.result).isNotNull();
+        assertThat(response.result.getStringBody()).isEqualTo("abc");
+    }
+
+    @Test
+    public void parseNetworkResponse_withServerExtrasInResponseBody_shouldSucceed() throws Exception {
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.HTML);
+        defaultHeaders.put(ResponseHeader.FULL_AD_TYPE.getKey(), "anything");
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        // Check the server extras
+        final Map<String, String> serverExtras = response.result.getServerExtras();
+        assertThat(serverExtras).isNotNull();
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.SCROLLABLE_KEY)).isEqualToIgnoringCase("false");
+        assertThat(serverExtras.get(DataKeys.REDIRECT_URL_KEY)).isEqualToIgnoringCase("redirect");
+        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualToIgnoringCase("click_tracking");
+    }
+
+    @Test
+    public void parseNetworkResponse_nonJsonStringBodyForNative_jsonParseShouldFail() {
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.NATIVE);
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.error).isNotNull();
+        assertThat(response.error).isExactlyInstanceOf(MoPubNetworkError.class);
+        assertThat(((MoPubNetworkError) response.error).getReason()).isEqualTo(MoPubNetworkError.Reason.BAD_BODY);
+    }
+
+    @Test
+    public void parseNetworkResponse_withWarmupHeaderTrue_shouldError() {
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.NATIVE);
+        defaultHeaders.put(ResponseHeader.WARMUP.getKey(), "1");
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.error).isNotNull();
+        assertThat(response.error).isInstanceOf(MoPubNetworkError.class);
+        assertThat(((MoPubNetworkError) response.error).getReason()).isEqualTo(MoPubNetworkError.Reason.WARMING_UP);
+    }
+
+    @Test
+    public void parseNetworkResponse_withClearAdType_shouldError() {
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.CLEAR);
+
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.error).isNotNull();
+        assertThat(response.error).isInstanceOf(MoPubNetworkError.class);
+        assertThat(((MoPubNetworkError) response.error).getReason()).isEqualTo(MoPubNetworkError.Reason.NO_FILL);
+    }
+
+    @Test
+    public void deliverResponse_shouldCallListenerOnSuccess() throws Exception {
+        subject.deliverResponse(mockAdResponse);
+        verify(mockListener).onSuccess(mockAdResponse);
+    }
+
+    @Test
+    public void parseNetworkResponse_withBadJSON_shouldReturnError() {
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.NATIVE);
+        NetworkResponse badNativeNetworkResponse = new NetworkResponse(200,
+                "{[abc}".getBytes(Charset.defaultCharset()),
+                defaultHeaders, false);
+        subject = new AdRequest("testUrl", AdFormat.NATIVE, mockListener);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(badNativeNetworkResponse);
+
+        assertThat(response.error).isNotNull();
+        assertThat(response.error.getCause()).isExactlyInstanceOf(JSONException.class);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/network/HeaderUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java
similarity index 99%
rename from mopub-sdk/src/test/java/com/mopub/common/network/HeaderUtilsTest.java
rename to mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java
index e6bc00b7..f91576ec 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/network/HeaderUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java
@@ -1,4 +1,4 @@
-package com.mopub.common.network;
+package com.mopub.network;
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
diff --git a/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java b/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
new file mode 100644
index 00000000..2013dcde
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
@@ -0,0 +1,69 @@
+package com.mopub.network;
+
+import android.app.Activity;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+
+import java.util.concurrent.Semaphore;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class NetworkingTest {
+    private Activity context;
+    static String sUserAgent;
+
+    @Before
+    public void setUp() {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+    }
+
+    @After
+    public void tearDown() {
+        Networking.clearForTesting();
+        sUserAgent = null;
+    }
+
+    @Test
+    public void getUserAgent_usesCachedUserAgent() {
+        Networking.setUserAgentForTesting("some cached user agent");
+        String userAgent = Networking.getUserAgent(context);
+
+        assertThat(userAgent).isEqualTo("some cached user agent");
+    }
+
+    @Test
+    public void getUserAgent_fromMainThread_shouldIncludeAndroid() throws InterruptedException {
+        context.runOnUiThread(new Runnable() {
+            @Override
+            public void run() {
+                String userAgent = Networking.getUserAgent(context);
+                assertThat(userAgent).containsIgnoringCase("android");
+            }
+        });
+    }
+
+    @Test
+    public void getUserAgent_fromBackgroundThread_shouldIncludeAndroid() throws InterruptedException {
+        System.setProperty("http.agent", "system level user agent");
+
+        final Semaphore semaphore = new Semaphore(0);
+
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                sUserAgent = Networking.getUserAgent(context);
+                semaphore.release();
+            }
+        }).start();
+
+        semaphore.acquire();
+        assertThat(sUserAgent).isEqualTo("system level user agent");
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java b/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java
new file mode 100644
index 00000000..a5225b99
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java
@@ -0,0 +1,68 @@
+package com.mopub.network;
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.mopub.common.GpsHelper;
+import com.mopub.common.GpsHelperTest;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Reflection;
+import com.mopub.common.util.test.support.TestMethodBuilderFactory;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+public class PlayServicesUrlRewriterTest {
+
+    private Reflection.MethodBuilder methodBuilder;
+    private PlayServicesUrlRewriter subject;
+
+    @Before
+    public void setUp() throws Exception {
+        Context context = Robolectric.buildActivity(Activity.class).create().get();
+        GpsHelper.setClassNamesForTesting();
+        methodBuilder = TestMethodBuilderFactory.getSingletonMock();
+        reset(methodBuilder);
+        subject = new PlayServicesUrlRewriter("sha:testDeviceID", context);
+    }
+
+    @Test
+    public void rewriteUrl_whenPlayServicesPresent_shouldUsePlayServicesValue() throws Exception {
+        GpsHelperTest.TestAdInfo adInfo = new GpsHelperTest.TestAdInfo();
+        when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
+        when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
+        when(methodBuilder.execute()).thenReturn(
+                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE,
+                adInfo,
+                adInfo.ADVERTISING_ID,
+                adInfo.LIMIT_AD_TRACKING_ENABLED
+        );
+
+        assertThat(subject.rewriteUrl("http://ads.mopub.com/m/ad?ad_id=abcece&udid=mp_tmpl_advertising_id&dnt=mp_tmpl_do_not_track"))
+                .isEqualToIgnoringCase("http://ads.mopub.com/m/ad?ad_id=abcece&udid=ifa%3A38400000-8cf0-11bd-b23e-10b96e40000d&dnt=1");
+    }
+
+    @Test
+    public void rewriteUrl_whenPlayServicesNotPresent_shouldUseDeviceValue() throws Exception {
+        when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
+        when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
+        // return error code so it fails
+        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE + 1);
+
+        assertThat(subject.rewriteUrl("http://ads.mopub.com/m/ad?ad_id=abcece&udid=mp_tmpl_advertising_id&dnt=mp_tmpl_do_not_track"))
+                .isEqualToIgnoringCase("http://ads.mopub.com/m/ad?ad_id=abcece&udid=sha%3AtestDeviceId&dnt=0");
+    }
+
+    @Test
+    public void rewriteUrl_noTemplates_shouldReturnIdentical() throws Exception {
+        assertThat(subject.rewriteUrl("http://ads.mopub.com/m/ad")).isEqualTo("http://ads.mopub.com/m/ad");
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
new file mode 100644
index 00000000..90eeeca3
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
@@ -0,0 +1,58 @@
+package com.mopub.network;
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.test.support.CommonUtils;
+import com.mopub.volley.RequestQueue;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+public class TrackingRequestTest {
+
+    @Mock
+    private RequestQueue mockRequestQueue;
+    private Context context;
+    private String url;
+
+
+    @Before
+    public void setup() {
+        context = (Context) Robolectric.buildActivity(Activity.class).create().get();
+        url = "testUrl";
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+    }
+
+    @Test
+    public void makeTrackingHttpRequest_shouldMakeTrackingHttpRequestWithWebViewUserAgent() throws Exception {
+        TrackingRequest.makeTrackingHttpRequest(url, context);
+
+        verify(mockRequestQueue).add(any(TrackingRequest.class));
+    }
+
+    @Test
+    public void makeTrackingHttpRequest_withNullUrl_shouldNotMakeTrackingHttpRequest() throws Exception {
+        TrackingRequest.makeTrackingHttpRequest((String) null, context);
+
+        verify(mockRequestQueue, never()).add(any(TrackingRequest.class));
+        CommonUtils.assertHttpRequestsMade(null);
+    }
+
+    @Test
+    public void makeTrackingHttpRequest_withNullContext_shouldNotMakeTrackingHttpRequest() throws Exception {
+        TrackingRequest.makeTrackingHttpRequest(url, null);
+
+        verify(mockRequestQueue, never()).add(any(TrackingRequest.class));
+        CommonUtils.assertHttpRequestsMade(null);
+    }
+}
