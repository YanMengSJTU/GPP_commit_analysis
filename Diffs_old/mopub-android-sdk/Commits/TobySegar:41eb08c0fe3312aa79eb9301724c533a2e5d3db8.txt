diff --git a/CHANGELOG.md b/CHANGELOG.md
index ea2384c5..122e748d 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,10 @@
+## Version 5.1.0 (June 5, 2018)
+- Upgraded Moat dependency to 2.4.5.
+- Banners now only refresh after an impression is made.
+- Added `PersonalInfoManager.forceGdprApplies()` in order to let MoPub know that this app should always apply GDPR rules.
+- Loading MoPub's consent dialog is only possible when GDPR rules applies to the app.
+- Bug fixes.
+
 ## Version 5.0.0 (May 14, 2018)
 - General Data Protection Regulation (GDPR) update to support a way for publishers to determine GDPR applicability and to obtain and manage consent from users in European Economic Area, the United Kingdom, or Switzerland to serve personalized ads.
 - New SDK initialization method to initialize consent management and rewarded video ad networks. Required for receiving personalized ads. In future versions of the SDK, initialization will be required to receive ads.
diff --git a/README.md b/README.md
index 62e335df..aca38a9b 100644
--- a/README.md
+++ b/README.md
@@ -39,7 +39,7 @@ The MoPub SDK is available via:
     }
 
     dependencies {
-        implementation('com.mopub:mopub-sdk:5.0.0@aar') {
+        implementation('com.mopub:mopub-sdk:5.1.0@aar') {
             transitive = true
         }
     }
@@ -61,27 +61,27 @@ The MoPub SDK is available via:
         // ... other project dependencies
 
         // For banners
-        implementation('com.mopub:mopub-sdk-banner:5.0.0@aar') {
+        implementation('com.mopub:mopub-sdk-banner:5.1.0@aar') {
             transitive = true
         }
         
         // For interstitials
-        implementation('com.mopub:mopub-sdk-interstitial:5.0.0@aar') {
+        implementation('com.mopub:mopub-sdk-interstitial:5.1.0@aar') {
             transitive = true
         }
 
         // For rewarded videos. This will automatically also include interstitials
-        implementation('com.mopub:mopub-sdk-rewardedvideo:5.0.0@aar') {
+        implementation('com.mopub:mopub-sdk-rewardedvideo:5.1.0@aar') {
             transitive = true
         }
 
         // For native static (images).
-        implementation('com.mopub:mopub-sdk-native-static:5.0.0@aar') {
+        implementation('com.mopub:mopub-sdk-native-static:5.1.0@aar') {
             transitive = true
         }
 
         // For native video. This will automatically also include native static
-        implementation('com.mopub:mopub-sdk-native-video:5.0.0@aar') {
+        implementation('com.mopub:mopub-sdk-native-video:5.1.0@aar') {
             transitive = true
         }
     }
@@ -109,11 +109,10 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- General Data Protection Regulation (GDPR) update to support a way for publishers to determine GDPR applicability and to obtain and manage consent from users in European Economic Area, the United Kingdom, or Switzerland to serve personalized ads.
-- New SDK initialization method to initialize consent management and rewarded video ad networks. Required for receiving personalized ads. In future versions of the SDK, initialization will be required to receive ads.
-- Updated network stack to MoPub-Volley-2.0.0.
-- Updated ad requests to use POST instead of GET.
-- All communication with MoPub servers is now made via HTTPS.
+- Upgraded Moat dependency to 2.4.5.
+- Banners now only refresh after an impression is made.
+- Added `PersonalInfoManager.forceGdprApplies()` in order to let MoPub know that this app should always apply GDPR rules.
+- Loading MoPub's consent dialog is only possible when GDPR rules applies to the app.
 
 ## Requirements
 
@@ -128,7 +127,7 @@ Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/mast
 
 Please see the [Getting Started Guide](https://developers.mopub.com/docs/android/getting-started/) for instructions on upgrading from SDK 4.X to SDK 5.0.
 
-For GDPR-specific upgrading instructions, also see the [GDPR Integration Guide](https://developers.mopub.com/docs/publisher/gdpr-guide/).
+For GDPR-specific upgrading instructions, also see the [GDPR Integration Guide](https://developers.mopub.com/docs/publisher/gdpr).
 
 ## <a name="upgradeRepositoryViewability"></a>Upgrading from 4.15.0 and Prior
 In 4.16.0, dependencies were added to viewability libraries provided by AVID and Moat. Apps upgrading from previous versions must add
@@ -142,7 +141,7 @@ Normally, to add the MoPub SDK to your app via JCenter, your `build.gradle` woul
 
 ```	
 dependencies {
-    implementation('com.mopub:mopub-sdk:5.0.0@aar') {
+    implementation('com.mopub:mopub-sdk:5.1.0@aar') {
         transitive = true
     }
 }
@@ -151,7 +150,7 @@ Update to the following to exclude one or both viewability vendors:
 
 ```
 dependencies {
-    implementation('com.mopub:mopub-sdk:4.20.0@aar') {
+    implementation('com.mopub:mopub-sdk:5.1.0@aar') {
         transitive = true
         exclude module: 'libAvid-mopub' // To exclude AVID
         exclude module: 'moat-mobile-app-kit' // To exclude Moat
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 87e3681b..f2723900 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="59"
-      android:versionName="5.0.0">
+      android:versionCode="61"
+      android:versionName="5.1.0">
     <uses-sdk android:minSdkVersion="16"
               android:targetSdkVersion="26"/>
 
@@ -17,7 +17,7 @@
                  android:networkSecurityConfig="@xml/network_security_config">
 	    <activity android:name="com.mopub.simpleadsdemo.MoPubSampleActivity"
 	            android:label="@string/app_name"
-                android:launchMode="singleInstance"
+                android:launchMode="singleTask"
                 android:configChanges="orientation|screenSize">
 	        <intent-filter>
 	            <action android:name="android.intent.action.MAIN" />
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index ab305e15..741d55a9 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -11,7 +11,7 @@ apply plugin: 'com.android.application'
 
 project.group = 'com.mopub'
 project.description = '''MoPub Sample App'''
-project.version = '5.0.0'
+project.version = '5.1.0'
 
 android {
     compileSdkVersion 26
@@ -19,7 +19,7 @@ android {
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 59
+        versionCode 61
         versionName version
         minSdkVersion 16
         targetSdkVersion 26
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
index 28dd1893..c7cad1ac 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
@@ -34,6 +34,7 @@ static void enableCanaryLogging(@NonNull final Context context) {
         }
 
         final Handler handler = new SampleAppLogHandler(context.getApplicationContext());
+        MoPubLog.c("Setting up MoPubLog");
         final Logger logger = getLogger();
         logger.addHandler(handler);
 
diff --git a/mopub-sdk/gradle/wrapper/gradle-wrapper.properties b/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
index 6faa4eab..3e785403 100644
--- a/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
+++ b/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Jun 20 17:19:29 PDT 2016
+#Mon Nov 13 15:46:01 PST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.3.1-all.zip
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
index 9b5eb50f..5b24ec80 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
@@ -40,7 +40,6 @@
 
     private final Handler mHandler;
     private final Runnable mTimeout;
-    private boolean mStoredAutorefresh;
 
     private int mImpressionMinVisibleDips = Integer.MIN_VALUE;
     private int mImpressionMinVisibleMs = Integer.MIN_VALUE;
@@ -226,6 +225,8 @@ public void onBannerLoaded(View bannerView) {
             // Else, retain old behavior of firing AdServer impression tracking URL if and only if
             // banner is not HTML.
             if (mIsVisibilityImpressionTrackingEnabled) {
+                // Disable autorefresh temporarily until an impression happens.
+                mMoPubView.pauseAutorefresh();
                 // Set up visibility tracker and listener if in experiment
                 mVisibilityTracker = new BannerVisibilityTracker(mContext, mMoPubView, bannerView,
                         mImpressionMinVisibleDips, mImpressionMinVisibleMs);
@@ -237,6 +238,7 @@ public void onVisibilityChanged() {
                         if (mCustomEventBanner != null) {
                             mCustomEventBanner.trackMpxAndThirdPartyImpressions();
                         }
+                        mMoPubView.resumeAutorefresh();
                     }
                 });
             }
@@ -273,8 +275,7 @@ public void onBannerExpanded() {
             return;
         }
 
-        mStoredAutorefresh = mMoPubView.getAutorefreshEnabled();
-        mMoPubView.setAutorefreshEnabled(false);
+        mMoPubView.expand();
         mMoPubView.adPresentedOverlay();
     }
 
@@ -284,7 +285,7 @@ public void onBannerCollapsed() {
             return;
         }
 
-        mMoPubView.setAutorefreshEnabled(mStoredAutorefresh);
+        mMoPubView.collapse();
         mMoPubView.adClosed();
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/build.gradle b/mopub-sdk/mopub-sdk-base/build.gradle
index 17217bb5..a03c99aa 100644
--- a/mopub-sdk/mopub-sdk-base/build.gradle
+++ b/mopub-sdk/mopub-sdk-base/build.gradle
@@ -16,7 +16,7 @@ dependencies {
     }
     def moatEnabled = project.hasProperty("mopub.moatEnabled") ? project.getProperty("mopub.moatEnabled").toBoolean() : true
     if (moatEnabled) {
-        compile 'com.moat.analytics.mobile.mpub:moat-mobile-app-kit:2.4.1'
+        compile 'com.moat.analytics.mobile.mpub:moat-mobile-app-kit:2.4.5'
     }
 }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
index 8b4c4b0a..a4e42464 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
@@ -109,14 +109,6 @@
      */
     private static final String ADVANCED_BIDDING_TOKENS_KEY = "abt";
 
-    private static final String GDPR_APPLIES = "gdpr_applies";
-
-    private static final String CURRENT_CONSENT_STATUS = "current_consent_status";
-
-    private static final String CONSENTED_PRIVACY_POLICY_VERSION = "consented_privacy_policy_version";
-
-    private static final String CONSENTED_VENDOR_LIST_VERSION = "consented_vendor_list_version";
-
     protected Context mContext;
     protected String mAdUnitId;
     protected String mKeywords;
@@ -124,6 +116,7 @@
     protected Location mLocation;
     @Nullable private final PersonalInfoManager mPersonalInfoManager;
     @Nullable private final ConsentData mConsentData;
+    protected Boolean mForceGdprApplies;
 
     public AdUrlGenerator(Context context) {
         mContext = context;
@@ -269,23 +262,29 @@ protected void setGdprApplies() {
         }
     }
 
+    protected void setForceGdprApplies() {
+        if (mConsentData != null) {
+            addParam(FORCE_GDPR_APPLIES, mConsentData.isForceGdprApplies());
+        }
+    }
+
     protected void setCurrentConsentStatus() {
         if (mPersonalInfoManager != null) {
-            addParam(CURRENT_CONSENT_STATUS, mPersonalInfoManager.getPersonalInfoConsentStatus()
+            addParam(CURRENT_CONSENT_STATUS_KEY, mPersonalInfoManager.getPersonalInfoConsentStatus()
                     .getValue());
         }
     }
 
     protected void setConsentedPrivacyPolicyVersion() {
         if (mConsentData != null) {
-            addParam(CONSENTED_PRIVACY_POLICY_VERSION,
+            addParam(CONSENTED_PRIVACY_POLICY_VERSION_KEY,
                     mConsentData.getConsentedPrivacyPolicyVersion());
         }
     }
 
     protected void setConsentedVendorListVersion() {
         if (mConsentData != null) {
-            addParam(CONSENTED_VENDOR_LIST_VERSION, mConsentData.getConsentedVendorListVersion());
+            addParam(CONSENTED_VENDOR_LIST_VERSION_KEY, mConsentData.getConsentedVendorListVersion());
         }
     }
 
@@ -328,6 +327,8 @@ protected void addBaseParams(final ClientMetadata clientMetadata) {
 
         setGdprApplies();
 
+        setForceGdprApplies();
+
         setCurrentConsentStatus();
 
         setConsentedPrivacyPolicyVersion();
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java
index 7fe99df6..45b8b764 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java
@@ -56,6 +56,11 @@
      */
     protected static final String GDPR_APPLIES = "gdpr_applies";
 
+    /**
+     * "1" if the publisher has forced GDPR rules to apply to this app. "0" if this is not set.
+     */
+    protected static final String FORCE_GDPR_APPLIES = "force_gdpr_applies";
+
     private static final String WIDTH_KEY = "w";
     private static final String HEIGHT_KEY = "h";
 
@@ -130,16 +135,6 @@ protected void setDeviceInfo(String... info) {
         addParam("dn", result.toString());
     }
 
-    protected void setDoNotTrack(boolean dnt) {
-        if (dnt) {
-            addParam(DNT_KEY, "1");
-        }
-    }
-
-    protected void setUdid(String udid) {
-        addParam(UDID_KEY, udid);
-    }
-
     /**
      * Appends special keys/values for advertising id and do-not-track. PlayServicesUrlRewriter will
      * replace these templates with the correct values when the request is processed.
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
index ffeabcf0..a6c47f8e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
@@ -7,9 +7,7 @@
 
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.privacy.PersonalInfoManager;
-import com.mopub.common.util.ManifestUtils;
 import com.mopub.common.util.Reflection;
-import com.mopub.mobileads.MoPubConversionTracker;
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
@@ -17,7 +15,7 @@
 import static com.mopub.common.ExternalViewabilitySessionManager.ViewabilityVendor;
 
 public class MoPub {
-    public static final String SDK_VERSION = "5.0.0";
+    public static final String SDK_VERSION = "5.1.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
@@ -157,7 +155,7 @@ public static void initializeSdk(@NonNull final Context context,
         Preconditions.checkNotNull(sdkConfiguration);
 
         // This also initializes MoPubLog
-        MoPubLog.d("Initializing MoPub");
+        MoPubLog.d("Initializing MoPub with ad unit: " + sdkConfiguration.getAdUnitId());
 
         if (context instanceof Activity && Reflection.classFound(MOPUB_REWARDED_VIDEO_MANAGER)) {
             final Activity activity = (Activity) context;
@@ -185,8 +183,6 @@ public static void initializeSdk(@NonNull final Context context,
 
         sAdvancedBiddingTokens = new AdvancedBiddingTokens(compositeSdkInitializationListener);
         sAdvancedBiddingTokens.addAdvancedBidders(sdkConfiguration.getAdvancedBidders());
-
-        ManifestUtils.checkSdkActivitiesDeclared(context);
     }
 
     /**
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/AdvertisingId.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/AdvertisingId.java
index 10a5aa81..eab380af 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/AdvertisingId.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/AdvertisingId.java
@@ -42,8 +42,8 @@
                   @NonNull String mopubId,
                   boolean limitAdTrackingEnabled,
                   long rotationTime) {
-        Preconditions.NoThrow.checkNotNull(ifaId);
-        Preconditions.NoThrow.checkNotNull(ifaId);
+        Preconditions.checkNotNull(ifaId);
+        Preconditions.checkNotNull(ifaId);
 
         mAdvertisingId = ifaId;
         mMopubId = mopubId;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentData.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentData.java
index cb958630..df1509ab 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentData.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentData.java
@@ -8,33 +8,78 @@
  * privacy policies.
  */
 public interface ConsentData {
+    /**
+     * Returns the current vendor list version.
+     */
     @Nullable
     String getCurrentVendorListVersion();
 
+    /**
+     * Returns a link for the current vendor list with the system default language.
+     */
     @NonNull
     String getCurrentVendorListLink();
 
+    /**
+     * Returns a link for the current vendor list in a specific language. If the language is not a
+     * valid language, this will return the link with the system default language.
+     *
+     * @param language ISO 639-1 2-letter language code
+     */
     @NonNull
     String getCurrentVendorListLink(@Nullable final String language);
 
+    /**
+     * Returns the current privacy policy version.
+     */
     @Nullable
     String getCurrentPrivacyPolicyVersion();
 
+    /**
+     * Returns a link for the current privacy policy with the system default language.
+     */
     @NonNull
     String getCurrentPrivacyPolicyLink();
 
+    /**
+     * Returns a link for the current privacy policy in a specific language. If the language is not
+     * a valid language, this will return the link with the system default language.
+     *
+     * @param language ISO 639-1 2-letter language code
+     */
     @NonNull
     String getCurrentPrivacyPolicyLink(@Nullable final String language);
 
+    /**
+     * Returns the current vendor list in IAB's global vendor list format.
+     */
     @Nullable
     String getCurrentVendorListIabFormat();
 
+    /**
+     * Returns the version of the privacy policy that the user has consented to.
+     */
     @Nullable
     String getConsentedPrivacyPolicyVersion();
 
+    /**
+     * Returns the version of the vendor list that the user has consented to.
+     */
     @Nullable
     String getConsentedVendorListVersion();
 
+    /**
+     * Returns the consented vendor list in IAB's global vendor list format.
+     */
     @Nullable
     String getConsentedVendorListIabFormat();
+
+    /**
+     * Whether GDPR rules have been forced to apply by either the publisher or by MoPub. In
+     * general, publishers should not need to directly access this.
+     *
+     * @return True means GDPR rules will be applied, false means respect MoPub's geofencing when
+     * determining whether or not GDPR rules apply.
+     */
+    boolean isForceGdprApplies();
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java
index e7051f94..4088dd33 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java
@@ -57,22 +57,24 @@ public void onErrorResponse(final VolleyError volleyError) {
         if (loadListener == null) {
             return;
         }
+
         if (volleyError instanceof MoPubNetworkError) {
             switch(((MoPubNetworkError) volleyError).getReason()) {
                 case BAD_BODY:
                     loadListener.onConsentDialogLoadFailed(MoPubErrorCode.INTERNAL_ERROR);
-                    break;
+                    return;
                 default:
-                    loadListener.onConsentDialogLoadFailed(MoPubErrorCode.UNSPECIFIED);
                     break;
             }
         }
+
+        loadListener.onConsentDialogLoadFailed(MoPubErrorCode.UNSPECIFIED);
     }
 
     void loadConsentDialog(@Nullable final ConsentDialogListener listener,
-            @NonNull final String adUnitId) {
-        Preconditions.checkNotNull(adUnitId);
-
+            @Nullable final Boolean gdprApplies,
+            @NonNull final PersonalInfoData personalInfoData) {
+        Preconditions.checkNotNull(personalInfoData);
 
         if (mReady) {
             if (listener != null) {
@@ -89,12 +91,16 @@ public void run() {
             return;
         }
 
-
         mExtListener = listener;
         mRequestInFlight = true;
 
         ConsentDialogRequest consentDialogRequest = new ConsentDialogRequest(mAppContext,
-                new ConsentDialogUrlGenerator(mAppContext, adUnitId)
+                new ConsentDialogUrlGenerator(mAppContext, personalInfoData.getAdUnitId(),
+                        personalInfoData.getConsentStatus().getValue())
+                        .withGdprApplies(gdprApplies)
+                        .withConsentedPrivacyPolicyVersion(personalInfoData.getConsentedPrivacyPolicyVersion())
+                        .withConsentedVendorListVersion(personalInfoData.getConsentedVendorListVersion())
+                        .withForceGdprApplies(personalInfoData.isForceGdprApplies())
                         .generateUrlString(Constants.HOST), this);
         Networking.getRequestQueue(mAppContext).add(consentDialogRequest);
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogUrlGenerator.java
index 93eb62df..a19bb3ff 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogUrlGenerator.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import com.mopub.common.BaseUrlGenerator;
 import com.mopub.common.ClientMetadata;
@@ -20,14 +21,48 @@
     private final Context mContext;
     @NonNull
     private final String mAdUnitId;
+    @NonNull
+    private final String mCurrentConsentStatus;
+    @Nullable
+    private Boolean mGdprApplies;
+    private boolean mForceGdprApplies;
+    @Nullable
+    private String mConsentedVendorListVersion;
+    @Nullable
+    private String mConsentedPrivacyPolicyVersion;
 
     ConsentDialogUrlGenerator(@NonNull final Context context,
-                              @NonNull final String adUnitId) {
+            @NonNull final String adUnitId,
+            @NonNull final String currentConsentStatus) {
         Preconditions.checkNotNull(context);
         Preconditions.checkNotNull(adUnitId);
+        Preconditions.checkNotNull(currentConsentStatus);
 
         mContext = context.getApplicationContext();
         mAdUnitId = adUnitId;
+        mCurrentConsentStatus = currentConsentStatus;
+    }
+
+    protected ConsentDialogUrlGenerator withGdprApplies(@Nullable final Boolean gdprApplies) {
+        mGdprApplies = gdprApplies;
+        return this;
+    }
+
+    protected ConsentDialogUrlGenerator withForceGdprApplies(final boolean forceGdprApplies) {
+        mForceGdprApplies = forceGdprApplies;
+        return this;
+    }
+
+    protected ConsentDialogUrlGenerator withConsentedVendorListVersion(
+            @Nullable final String consentedVendorListVersion) {
+        mConsentedVendorListVersion = consentedVendorListVersion;
+        return this;
+    }
+
+    protected ConsentDialogUrlGenerator withConsentedPrivacyPolicyVersion(
+            @Nullable final String consentedPrivacyPolicyVersion) {
+        mConsentedPrivacyPolicyVersion = consentedPrivacyPolicyVersion;
+        return this;
     }
 
     @Override
@@ -35,8 +70,15 @@ public String generateUrlString(String serverHostname) {
         initUrlString(serverHostname, GDPR_CONSENT_HANDLER);
 
         addParam(AD_UNIT_ID_KEY, mAdUnitId);
+        addParam(CURRENT_CONSENT_STATUS_KEY, mCurrentConsentStatus);
         addParam(SDK_VERSION_KEY, MoPub.SDK_VERSION);
         addParam(LANGUAGE_KEY, ClientMetadata.getCurrentLanguage(mContext));
+        addParam(GDPR_APPLIES, mGdprApplies);
+        addParam(FORCE_GDPR_APPLIES, mForceGdprApplies);
+        addParam(CONSENTED_VENDOR_LIST_VERSION_KEY, mConsentedVendorListVersion);
+        addParam(CONSENTED_PRIVACY_POLICY_VERSION_KEY, mConsentedPrivacyPolicyVersion);
+        addParam(BUNDLE_ID_KEY, ClientMetadata.getInstance(mContext).getAppPackageName());
+
         return getFinalUrlString();
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java
index 5984a3bd..c2ffb928 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java
@@ -33,6 +33,7 @@
 
     @NonNull
     private AdvertisingId mAdInfo;
+
     @NonNull
     private final Context mAppContext;
 
@@ -42,6 +43,7 @@
     private boolean mRefreshingAdvertisingInfo;
 
     private boolean initialized;
+
     @Nullable
     private SdkInitializationListener mInitializationListener;
 
@@ -51,8 +53,8 @@ public MoPubIdentifier(@NonNull final Context appContext) {
 
     @VisibleForTesting
     MoPubIdentifier(@NonNull final Context appContext,
-            @Nullable final AdvertisingIdChangeListener idChangeListener) {
-        Preconditions.NoThrow.checkNotNull(appContext);
+                    @Nullable final AdvertisingIdChangeListener idChangeListener) {
+        Preconditions.checkNotNull(appContext);
 
         mAppContext = appContext;
         mIdChangeListener = idChangeListener;
@@ -90,22 +92,24 @@ void refreshAdvertisingInfoBackgroundThread() {
         // try google
         if (isPlayServicesAvailable()) {
             GpsHelper.AdvertisingInfo info = GpsHelper.fetchAdvertisingInfoSync(mAppContext);
-            if (info != null) {
+            if (info != null && !TextUtils.isEmpty(info.advertisingId)) {
                 final AdvertisingId oldId = mAdInfo;
-                if (info.limitAdTracking && oldId.isRotationRequired()) {
+                if (oldId.isRotationRequired()) {
                     setAdvertisingInfo(info.advertisingId, AdvertisingId.generateIdString(), info.limitAdTracking, time);
                 } else {
                     setAdvertisingInfo(info.advertisingId, oldId.mMopubId, info.limitAdTracking, oldId.mLastRotation.getTimeInMillis());
                 }
                 return;
+            } else {
+                MoPubLog.w("Call to 'getAdvertisingIdInfo' returned invalid value.");
             }
         }
 
         // try amazon
         final AdvertisingId info = getAmazonAdvertisingInfo(mAppContext);
-        if (info != null) {
+        if (info != null && !TextUtils.isEmpty(info.mAdvertisingId)) {
             final AdvertisingId oldId = mAdInfo;
-            if (info.isDoNotTrack() && oldId.isRotationRequired()) {
+            if (oldId.isRotationRequired()) {
                 setAdvertisingInfo(info.mAdvertisingId, AdvertisingId.generateIdString(), info.mDoNotTrack, time);
             } else {
                 setAdvertisingInfo(info.mAdvertisingId, oldId.mMopubId, info.mDoNotTrack, oldId.mLastRotation.getTimeInMillis());
@@ -118,7 +122,7 @@ void refreshAdvertisingInfoBackgroundThread() {
     }
 
     @Nullable
-    private static synchronized AdvertisingId readIdFromStorage(@NonNull final Context appContext) {
+    static synchronized AdvertisingId readIdFromStorage(@NonNull final Context appContext) {
         Preconditions.checkNotNull(appContext);
 
         Calendar now = Calendar.getInstance();
@@ -163,7 +167,7 @@ static synchronized void clearStorage(@NonNull final Context context) {
         editor.apply();
     }
 
-    private void rotateMopubId() {
+    void rotateMopubId() {
         if (!mAdInfo.isRotationRequired()) {
             setAdvertisingInfo(mAdInfo);
             return;
@@ -173,13 +177,13 @@ private void rotateMopubId() {
     }
 
     private void setAdvertisingInfo(@NonNull String advertisingId, @NonNull String mopubId, boolean limitAdTracking, long rotationTime) {
-        Preconditions.NoThrow.checkNotNull(advertisingId);
-        Preconditions.NoThrow.checkNotNull(mopubId);
+        Preconditions.checkNotNull(advertisingId);
+        Preconditions.checkNotNull(mopubId);
 
         setAdvertisingInfo(new AdvertisingId(advertisingId, mopubId, limitAdTracking, rotationTime));
     }
 
-    private void setAdvertisingInfo(@NonNull final AdvertisingId newId) {
+    void setAdvertisingInfo(@NonNull final AdvertisingId newId) {
         AdvertisingId oldId = mAdInfo;
         mAdInfo = newId;
         writeIdToStorage(mAppContext, mAdInfo);
@@ -187,10 +191,9 @@ private void setAdvertisingInfo(@NonNull final AdvertisingId newId) {
         if (!mAdInfo.equals(oldId) || !initialized) {
             notifyIdChangeListener(oldId, mAdInfo);
         }
+        initialized = true;
 
-        if (!initialized) {
-            reportInitializationComplete();
-        }
+        reportInitializationComplete();
     }
 
     /**
@@ -213,7 +216,6 @@ private void reportInitializationComplete() {
             mInitializationListener.onInitializationFinished();
             mInitializationListener = null;
         }
-        initialized = true;
     }
 
     private void notifyIdChangeListener(@NonNull final AdvertisingId oldId, @NonNull final AdvertisingId newId) {
@@ -224,7 +226,7 @@ private void notifyIdChangeListener(@NonNull final AdvertisingId oldId, @NonNull
         }
     }
 
-    private boolean isPlayServicesAvailable() {
+    boolean isPlayServicesAvailable() {
         return GpsHelper.isPlayServicesAvailable(mAppContext);
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoData.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoData.java
index 4def20e6..7960e5f2 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoData.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoData.java
@@ -35,6 +35,7 @@
     private static final String CONSENT_CHANGE_REASON_SP_KEY = PERSONAL_INFO_PREFIX + "consent_change_reason";
     private static final String REACQUIRE_CONSENT_SP_KEY = PERSONAL_INFO_PREFIX + "reacquire_consent";
     private static final String GDPR_APPLIES_SP_KEY = PERSONAL_INFO_PREFIX + "gdpr_applies";
+    private static final String FORCE_GDPR_APPLIES_SP_KEY = PERSONAL_INFO_PREFIX + "force_gdpr_applies";
     private static final String UDID_SP_KEY = PERSONAL_INFO_PREFIX + "udid";
     private static final String LAST_CHANGED_MS_SP_KEY = PERSONAL_INFO_PREFIX + "last_changed_ms";
     private static final String CONSENT_STATUS_BEFORE_DNT_SP_KEY = PERSONAL_INFO_PREFIX + "consent_status_before_dnt";
@@ -51,6 +52,7 @@
     @NonNull private ConsentStatus mConsentStatus;
     @Nullable private ConsentStatus mLastSuccessfullySyncedConsentStatus;
     @Nullable private String mConsentChangeReason;
+    private boolean mForceGdprApplies;
     @Nullable private String mUdid;
     @Nullable private String mLastChangedMs;
     @Nullable private ConsentStatus mConsentStatusBeforeDnt;
@@ -121,6 +123,7 @@ private void getStateFromDisk() {
         } else {
             mGdprApplies = Boolean.parseBoolean(gdprAppliesString);
         }
+        mForceGdprApplies = sharedPreferences.getBoolean(FORCE_GDPR_APPLIES_SP_KEY, false);
         mUdid = sharedPreferences.getString(UDID_SP_KEY, null);
         mLastChangedMs = sharedPreferences.getString(LAST_CHANGED_MS_SP_KEY, null);
         final String consentStatusBeforeDnt = sharedPreferences.getString(
@@ -154,6 +157,7 @@ void writeToDisk() {
         editor.putBoolean(REACQUIRE_CONSENT_SP_KEY, mReacquireConsent);
         editor.putString(GDPR_APPLIES_SP_KEY,
                 mGdprApplies == null ? null : mGdprApplies.toString());
+        editor.putBoolean(FORCE_GDPR_APPLIES_SP_KEY, mForceGdprApplies);
         editor.putString(UDID_SP_KEY, mUdid);
         editor.putString(LAST_CHANGED_MS_SP_KEY, mLastChangedMs);
         editor.putString(CONSENT_STATUS_BEFORE_DNT_SP_KEY,
@@ -319,10 +323,18 @@ Boolean getGdprApplies() {
         return mGdprApplies;
     }
 
-    void setGdprApplies(final boolean gdprApplies) {
+    void setGdprApplies(@Nullable final Boolean gdprApplies) {
         mGdprApplies = gdprApplies;
     }
 
+    public boolean isForceGdprApplies() {
+        return mForceGdprApplies;
+    }
+
+    void setForceGdprApplies(final boolean forceGdprApplies) {
+        mForceGdprApplies = forceGdprApplies;
+    }
+
     @Nullable
     String getUdid() {
         return mUdid;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java
index d047a189..65829f9f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java
@@ -15,8 +15,10 @@
 import com.mopub.common.SdkInitializationListener;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.ManifestUtils;
 import com.mopub.mobileads.MoPubConversionTracker;
 import com.mopub.mobileads.MoPubErrorCode;
+import com.mopub.network.AdRequest;
 import com.mopub.network.MoPubNetworkError;
 import com.mopub.network.Networking;
 import com.mopub.volley.VolleyError;
@@ -30,7 +32,7 @@
  * The manager handling personal information. If the user is in a GDPR region, MoPub must get
  * user consent to handle and store user data.
  */
-public class PersonalInfoManager implements SyncRequest.Listener {
+public class PersonalInfoManager {
 
     /**
      * Default minimum sync delay of 5 minutes.
@@ -42,6 +44,8 @@
     @NonNull private final PersonalInfoData mPersonalInfoData;
     @NonNull private final ConsentDialogController mConsentDialogController;
     @NonNull private final MoPubConversionTracker mConversionTracker;
+    @NonNull private final SyncRequest.Listener mSyncRequestListener;
+    @NonNull private AdRequest.ServerOverrideListener mServerOverrideListener;
     @Nullable private SdkInitializationListener mSdkInitializationListener;
 
     private long mSyncDelayMs = MINIMUM_SYNC_DELAY;
@@ -49,6 +53,8 @@
     @Nullable private ConsentStatus mSyncRequestConsentStatus;
     private long mSyncRequestEpochTime;
     private boolean mSyncRequestInFlight;
+    private boolean mForceGdprAppliesChanged;
+    private boolean mForceGdprAppliesChangedSending;
 
     public PersonalInfoManager(@NonNull final Context context, @NonNull final String adUnitId,
             @Nullable SdkInitializationListener sdkInitializationListener) {
@@ -58,6 +64,9 @@ public PersonalInfoManager(@NonNull final Context context, @NonNull final String
         mAppContext = context.getApplicationContext();
         mConsentStatusChangeListeners = Collections.synchronizedSet(
                 new HashSet<ConsentStatusChangeListener>());
+        mSyncRequestListener = new PersonalInfoSyncRequestListener();
+        mServerOverrideListener = new PersonalInfoServerOverrideListener();
+        AdRequest.setServerOverrideListener(mServerOverrideListener);
 
         mConsentDialogController = new ConsentDialogController(mAppContext);
 
@@ -106,7 +115,8 @@ public void onIdChanged(@NonNull final AdvertisingId oldId,
                 };
         mSdkInitializationListener = sdkInitializationListener;
 
-        final MoPubIdentifier moPubIdentifier = ClientMetadata.getInstance(mAppContext).getMoPubIdentifier();
+        final MoPubIdentifier moPubIdentifier = ClientMetadata.getInstance(
+                mAppContext).getMoPubIdentifier();
         moPubIdentifier.setIdChangeListener(advertisingIdChangeListener);
         moPubIdentifier.setInitializationListener(createInitializationListener());
     }
@@ -151,6 +161,8 @@ public boolean isConsentDialogReady() {
      */
     public void loadConsentDialog(
             @Nullable final ConsentDialogListener consentDialogListener) {
+        ManifestUtils.checkGdprActivitiesDeclared(mAppContext);
+
         if (ClientMetadata.getInstance(
                 mAppContext).getMoPubIdentifier().getAdvertisingInfo().isDoNotTrack()) {
             if (consentDialogListener != null) {
@@ -164,8 +176,21 @@ public void run() {
             }
             return;
         }
-        mConsentDialogController.loadConsentDialog(consentDialogListener,
-                mPersonalInfoData.getAdUnitId());
+        final Boolean gdprApplies = gdprApplies();
+        if (gdprApplies != null && !gdprApplies) {
+            if (consentDialogListener != null) {
+                new Handler().post(new Runnable() {
+                    @Override
+                    public void run() {
+                        consentDialogListener.onConsentDialogLoadFailed(
+                                MoPubErrorCode.GDPR_DOES_NOT_APPLY);
+                    }
+                });
+            }
+            return;
+        }
+        mConsentDialogController.loadConsentDialog(consentDialogListener, gdprApplies,
+                mPersonalInfoData);
     }
 
     /**
@@ -203,51 +228,30 @@ public boolean canCollectPersonalInformation() {
 
     /**
      * Returns whether or not the SDK thinks the user is in a GDPR region or not. Returns true for
-     * in a GDPR region, no for not in a GDPR region, and null for unknown.
+     * in a GDPR region, false for not in a GDPR region, and null for unknown. This value can be
+     * overwritten to true by setting forceGdprApplies().
      *
      * @return true for in GDPR region, false for not in GDPR region, null for unknown
      */
     public Boolean gdprApplies() {
-        return mPersonalInfoData.getGdprApplies();
-    }
-
-    /**
-     * Don't call this.
-     *
-     * @param consentChangeReason
-     */
-    public void invalidateConsent(@Nullable final String consentChangeReason) {
-        if (TextUtils.isEmpty(consentChangeReason)) {
-            attemptStateTransition(ConsentStatus.UNKNOWN, ConsentChangeReason.REACQUIRE_BY_SERVER);
-            return;
+        if (mPersonalInfoData.isForceGdprApplies()) {
+            return true;
         }
-        attemptStateTransition(ConsentStatus.UNKNOWN, consentChangeReason);
+        return mPersonalInfoData.getGdprApplies();
     }
 
     /**
-     * Don't call this.
-     *
-     * @param consentChangeReason
+     * Forces the SDK to treat this app as in a GDPR region. Setting this will permanently force
+     * GDPR rules for this user unless this app is uninstalled or the data for this app is cleared.
      */
-    public void forceExplicitNo(@Nullable final String consentChangeReason) {
-        if (TextUtils.isEmpty(consentChangeReason)) {
-            attemptStateTransition(ConsentStatus.EXPLICIT_NO,
-                    ConsentChangeReason.REVOKED_BY_SERVER);
+    public void forceGdprApplies() {
+        if (mPersonalInfoData.isForceGdprApplies()) {
             return;
         }
-        attemptStateTransition(ConsentStatus.EXPLICIT_NO, consentChangeReason);
-    }
-
-    /**
-     * Don't call this.
-     *
-     * @param consentChangeReason
-     */
-    public void reacquireConsent(@Nullable final String consentChangeReason) {
-        if (!TextUtils.isEmpty(consentChangeReason)) {
-            mPersonalInfoData.setConsentChangeReason(consentChangeReason);
-        }
-        mPersonalInfoData.setShouldReacquireConsent(true);
+        mPersonalInfoData.setForceGdprApplies(true);
+        mForceGdprAppliesChanged = true;
+        mPersonalInfoData.writeToDisk();
+        requestSync(true);
     }
 
     /**
@@ -262,7 +266,7 @@ public ConsentStatus getPersonalInfoConsentStatus() {
     }
 
     /**
-     * For use from whitelisted publishers only. Grants consent to collect personally identifiable
+     * For use by whitelisted publishers only. Grants consent to collect personally identifiable
      * information for the current user.
      */
     public void grantConsent() {
@@ -276,6 +280,8 @@ public void grantConsent() {
             attemptStateTransition(ConsentStatus.EXPLICIT_YES,
                     ConsentChangeReason.GRANTED_BY_WHITELISTED_PUB);
         } else {
+            MoPubLog.w("You do not have approval to use the grantConsent API. Please reach out " +
+                    "to your account teams or support@mopub.com for more information.");
             attemptStateTransition(ConsentStatus.POTENTIAL_WHITELIST,
                     ConsentChangeReason.GRANTED_BY_NOT_WHITELISTED_PUB);
         }
@@ -364,7 +370,7 @@ static boolean shouldMakeSyncRequest(final boolean syncRequestInFlight,
     }
 
     /**
-     * Called internally to request a sync to ad server about consent status and other metadata
+     * Called internally to request a sync to ad server about consent status and other metadata.
      *
      * @param force Call sync even if it has not been mSyncDelayMs. Still won't happen if not in
      *              a GDPR region or if a request is already in flight.
@@ -399,92 +405,27 @@ public void requestSync(final boolean force) {
                         mPersonalInfoData.getConsentedPrivacyPolicyVersion())
                 .withCachedVendorListIabHash(mPersonalInfoData.getCurrentVendorListIabHash())
                 .withExtras(mPersonalInfoData.getExtras())
-                .withGdprApplies(gdprApplies());
-
+                .withGdprApplies(gdprApplies())
+                .withForceGdprApplies(mPersonalInfoData.isForceGdprApplies());
+        if (mForceGdprAppliesChanged) {
+            mForceGdprAppliesChangedSending = true;
+            syncUrlGenerator.withForceGdprAppliesChanged(true);
+        }
 
         final SyncRequest syncRequest = new SyncRequest(mAppContext,
                 syncUrlGenerator.generateUrlString(
-                        Constants.HOST), this);
+                        Constants.HOST), mSyncRequestListener);
         Networking.getRequestQueue(mAppContext).add(syncRequest);
     }
 
-    public ConsentData getConsentData() {
-        return new PersonalInfoData(mAppContext, mPersonalInfoData.getAdUnitId());
-    }
-
     /**
-     * Do not call this. This is used internally.
+     * For use by whitelisted publishers only. Gets a copy of the current and consented vendor
+     * list and privacy policy and their versions.
+     *
+     * @return ConsentData which is a snapshot of the underlying data store.
      */
-    @Deprecated
-    @Override
-    public void onSuccess(final SyncResponse response) {
-        if (mPersonalInfoData.getGdprApplies() == null) {
-            mPersonalInfoData.setGdprApplies(response.isGdprRegion());
-        }
-        mPersonalInfoData.setLastChangedMs("" + mSyncRequestEpochTime);
-        mPersonalInfoData.setLastSuccessfullySyncedConsentStatus(mSyncRequestConsentStatus);
-        mPersonalInfoData.setWhitelisted(response.isWhitelisted());
-        mPersonalInfoData.setCurrentVendorListVersion(response.getCurrentVendorListVersion());
-        mPersonalInfoData.setCurrentVendorListLink(response.getCurrentVendorListLink());
-        mPersonalInfoData.setCurrentPrivacyPolicyVersion(response.getCurrentPrivacyPolicyVersion());
-        mPersonalInfoData.setCurrentPrivacyPolicyLink(response.getCurrentPrivacyPolicyLink());
-        final String iabHash = response.getCurrentVendorListIabHash();
-        final String iabFormat = response.getCurrentVendorListIabFormat();
-        if (!TextUtils.isEmpty(iabHash) && !iabHash.equals(
-                mPersonalInfoData.getCurrentVendorListIabHash()) && !TextUtils.isEmpty(iabFormat)) {
-            mPersonalInfoData.setCurrentVendorListIabFormat(iabFormat);
-            mPersonalInfoData.setCurrentVendorListIabHash(iabHash);
-        }
-        final String extras = response.getExtras();
-        if (!TextUtils.isEmpty(extras)) {
-            mPersonalInfoData.setExtras(extras);
-        }
-        final String consentChangeReason = response.getConsentChangeReason();
-
-        // Only one of these should happen. Prioritize no.
-        if (response.isForceExplicitNo()) {
-            forceExplicitNo(consentChangeReason);
-        } else if (response.isInvalidateConsent()) {
-            invalidateConsent(consentChangeReason);
-        } else if (response.isReacquireConsent()) {
-            reacquireConsent(consentChangeReason);
-        }
-
-        final String callAgainAfterSecs = response.getCallAgainAfterSecs();
-        if (!TextUtils.isEmpty(callAgainAfterSecs)) {
-            try {
-                final long callAgainAfterSecsLong = Long.parseLong(callAgainAfterSecs);
-                if (callAgainAfterSecsLong > 0) {
-                    mSyncDelayMs = callAgainAfterSecsLong * 1000;
-                } else {
-                    MoPubLog.d("callAgainAfterSecs is not positive: " + callAgainAfterSecs);
-                }
-            } catch (NumberFormatException e) {
-                MoPubLog.d("Unable to parse callAgainAfterSecs. Ignoring value");
-            }
-        }
-
-        // Clear out our cached udid if we have sent it one last time in case limit ad tracking
-        // is turned on.
-        if (!ConsentStatus.EXPLICIT_YES.equals(mSyncRequestConsentStatus)) {
-            mPersonalInfoData.setUdid(null);
-        }
-
-        mPersonalInfoData.writeToDisk();
-
-        mSyncRequestInFlight = false;
-
-        if (ConsentStatus.POTENTIAL_WHITELIST.equals(
-                mSyncRequestConsentStatus) && mPersonalInfoData.isWhitelisted()) {
-            attemptStateTransition(ConsentStatus.EXPLICIT_YES,
-                    ConsentChangeReason.GRANTED_BY_WHITELISTED_PUB);
-            requestSync(true);
-        }
-
-        if (mSdkInitializationListener != null) {
-            mSdkInitializationListener.onInitializationFinished();
-            mSdkInitializationListener = null;
-        }
+    public ConsentData getConsentData() {
+        return new PersonalInfoData(mAppContext, mPersonalInfoData.getAdUnitId());
     }
 
     /**
@@ -567,22 +508,6 @@ public void run() {
         }
     }
 
-    /**
-     * Do not call this. This is used internally.
-     */
-    @Deprecated
-    @Override
-    public void onErrorResponse(final VolleyError volleyError) {
-        MoPubLog.d("Failed sync request because of " + ((volleyError instanceof MoPubNetworkError) ?
-                ((MoPubNetworkError) volleyError).getReason() : volleyError.getMessage()));
-        mSyncRequestInFlight = false;
-        if (mSdkInitializationListener != null) {
-            MoPubLog.d("Personal Info Manager initialization finished but ran into errors.");
-            mSdkInitializationListener.onInitializationFinished();
-            mSdkInitializationListener = null;
-        }
-    }
-
     private SdkInitializationListener createInitializationListener() {
         return new SdkInitializationListener() {
 
@@ -609,4 +534,142 @@ public void onInitializationFinished() {
             }
         };
     }
+
+    private class PersonalInfoSyncRequestListener implements SyncRequest.Listener {
+
+        @Override
+        public void onSuccess(final SyncResponse response) {
+            if (response.isForceGdprApplies()) {
+                mPersonalInfoData.setGdprApplies(true);
+            } else if (mPersonalInfoData.getGdprApplies() == null) {
+                mPersonalInfoData.setGdprApplies(response.isGdprRegion());
+            }
+            mPersonalInfoData.setLastChangedMs("" + mSyncRequestEpochTime);
+            mPersonalInfoData.setLastSuccessfullySyncedConsentStatus(mSyncRequestConsentStatus);
+            mPersonalInfoData.setWhitelisted(response.isWhitelisted());
+            mPersonalInfoData.setCurrentVendorListVersion(response.getCurrentVendorListVersion());
+            mPersonalInfoData.setCurrentVendorListLink(response.getCurrentVendorListLink());
+            mPersonalInfoData.setCurrentPrivacyPolicyVersion(
+                    response.getCurrentPrivacyPolicyVersion());
+            mPersonalInfoData.setCurrentPrivacyPolicyLink(response.getCurrentPrivacyPolicyLink());
+            final String iabHash = response.getCurrentVendorListIabHash();
+            final String iabFormat = response.getCurrentVendorListIabFormat();
+            if (!TextUtils.isEmpty(iabHash) && !iabHash.equals(
+                    mPersonalInfoData.getCurrentVendorListIabHash()) && !TextUtils.isEmpty(
+                    iabFormat)) {
+                mPersonalInfoData.setCurrentVendorListIabFormat(iabFormat);
+                mPersonalInfoData.setCurrentVendorListIabHash(iabHash);
+            }
+            final String extras = response.getExtras();
+            if (!TextUtils.isEmpty(extras)) {
+                mPersonalInfoData.setExtras(extras);
+            }
+            final String consentChangeReason = response.getConsentChangeReason();
+
+            // Only one of these should happen. Prioritize no.
+            if (response.isForceExplicitNo()) {
+                mServerOverrideListener.onForceExplicitNo(consentChangeReason);
+            } else if (response.isInvalidateConsent()) {
+                mServerOverrideListener.onInvalidateConsent(consentChangeReason);
+            } else if (response.isReacquireConsent()) {
+                mServerOverrideListener.onReacquireConsent(consentChangeReason);
+            }
+
+            final String callAgainAfterSecs = response.getCallAgainAfterSecs();
+            if (!TextUtils.isEmpty(callAgainAfterSecs)) {
+                try {
+                    final long callAgainAfterSecsLong = Long.parseLong(callAgainAfterSecs);
+                    if (callAgainAfterSecsLong > 0) {
+                        mSyncDelayMs = callAgainAfterSecsLong * 1000;
+                    } else {
+                        MoPubLog.d("callAgainAfterSecs is not positive: " + callAgainAfterSecs);
+                    }
+                } catch (NumberFormatException e) {
+                    MoPubLog.d("Unable to parse callAgainAfterSecs. Ignoring value");
+                }
+            }
+
+            // Clear out our cached udid if we have sent it one last time in case limit ad tracking
+            // is turned on.
+            if (!ConsentStatus.EXPLICIT_YES.equals(mSyncRequestConsentStatus)) {
+                mPersonalInfoData.setUdid(null);
+            }
+
+            if (mForceGdprAppliesChangedSending) {
+                mForceGdprAppliesChanged = false;
+                mForceGdprAppliesChangedSending = false;
+            }
+
+            mPersonalInfoData.writeToDisk();
+
+            mSyncRequestInFlight = false;
+
+            if (ConsentStatus.POTENTIAL_WHITELIST.equals(
+                    mSyncRequestConsentStatus) && mPersonalInfoData.isWhitelisted()) {
+                attemptStateTransition(ConsentStatus.EXPLICIT_YES,
+                        ConsentChangeReason.GRANTED_BY_WHITELISTED_PUB);
+                requestSync(true);
+            }
+
+            if (mSdkInitializationListener != null) {
+                mSdkInitializationListener.onInitializationFinished();
+                mSdkInitializationListener = null;
+            }
+        }
+
+        @Override
+        public void onErrorResponse(final VolleyError volleyError) {
+            MoPubLog.d("Failed sync request because of " +
+                    ((volleyError instanceof MoPubNetworkError) ?
+                            ((MoPubNetworkError) volleyError).getReason() : volleyError.getMessage()));
+            mSyncRequestInFlight = false;
+            if (mSdkInitializationListener != null) {
+                MoPubLog.d("Personal Info Manager initialization finished but ran into errors.");
+                mSdkInitializationListener.onInitializationFinished();
+                mSdkInitializationListener = null;
+            }
+        }
+    }
+
+    private class PersonalInfoServerOverrideListener implements AdRequest.ServerOverrideListener {
+        @Override
+        public void onForceExplicitNo(@Nullable final String consentChangeReason) {
+            if (TextUtils.isEmpty(consentChangeReason)) {
+                attemptStateTransition(ConsentStatus.EXPLICIT_NO,
+                        ConsentChangeReason.REVOKED_BY_SERVER);
+                return;
+            }
+            attemptStateTransition(ConsentStatus.EXPLICIT_NO, consentChangeReason);
+        }
+
+        @Override
+        public void onInvalidateConsent(@Nullable final String consentChangeReason) {
+            if (TextUtils.isEmpty(consentChangeReason)) {
+                attemptStateTransition(ConsentStatus.UNKNOWN,
+                        ConsentChangeReason.REACQUIRE_BY_SERVER);
+                return;
+            }
+            attemptStateTransition(ConsentStatus.UNKNOWN, consentChangeReason);
+        }
+
+        @Override
+        public void onReacquireConsent(@Nullable final String consentChangeReason) {
+            if (!TextUtils.isEmpty(consentChangeReason)) {
+                mPersonalInfoData.setConsentChangeReason(consentChangeReason);
+            }
+            mPersonalInfoData.setShouldReacquireConsent(true);
+            mPersonalInfoData.writeToDisk();
+        }
+
+        @Override
+        public void onForceGdprApplies() {
+            if (mPersonalInfoData.isForceGdprApplies()) {
+                return;
+            }
+            mPersonalInfoData.setForceGdprApplies(true);
+            mPersonalInfoData.writeToDisk();
+            mForceGdprAppliesChanged = true;
+            requestSync(true);
+        }
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PrivacyKey.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PrivacyKey.java
index 7f163a74..62d6e69f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PrivacyKey.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PrivacyKey.java
@@ -8,6 +8,7 @@
 public enum PrivacyKey {
     IS_GDPR_REGION("is_gdpr_region"),
     IS_WHITELISTED("is_whitelisted"),
+    FORCE_GDPR_APPLIES("force_gdpr_applies"),
     FORCE_EXPLICIT_NO("force_explicit_no"),
     INVALIDATE_CONSENT("invalidate_consent"),
     REACQUIRE_CONSENT("reacquire_consent"),
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncRequest.java
index 09901e0e..3c99e15b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncRequest.java
@@ -50,6 +50,7 @@ public SyncRequest(@NonNull final Context context,
                             jsonBody.optString(PrivacyKey.INVALIDATE_CONSENT.getKey()))
                     .setReacquireConsent(jsonBody.optString(PrivacyKey.REACQUIRE_CONSENT.getKey()))
                     .setIsWhitelisted(jsonBody.getString(PrivacyKey.IS_WHITELISTED.getKey()))
+                    .setForceGdprApplies(jsonBody.optString(PrivacyKey.FORCE_GDPR_APPLIES.getKey()))
                     .setCurrentVendorListVersion(
                             jsonBody.getString(PrivacyKey.CURRENT_VENDOR_LIST_VERSION.getKey()))
                     .setCurrentVendorListLink(
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncResponse.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncResponse.java
index f23bb8f6..31b88fed 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncResponse.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncResponse.java
@@ -12,6 +12,7 @@
     private final boolean mInvalidateConsent;
     private final boolean mReacquireConsent;
     private final boolean mIsWhitelisted;
+    private final boolean mForceGdprApplies;
     @NonNull private final String mCurrentVendorListVersion;
     @NonNull private final String mCurrentVendorListLink;
     @NonNull private final String mCurrentPrivacyPolicyVersion;
@@ -42,6 +43,10 @@ public boolean isWhitelisted() {
         return mIsWhitelisted;
     }
 
+    public boolean isForceGdprApplies() {
+        return mForceGdprApplies;
+    }
+
     @NonNull
     public String getCurrentVendorListVersion() {
         return mCurrentVendorListVersion;
@@ -92,6 +97,7 @@ private SyncResponse(@NonNull final String isGdprRegion,
             @Nullable final String invalidateConsent,
             @Nullable final String reacquireConsent,
             @NonNull final String isWhitelisted,
+            @Nullable final String forceGdprApplies,
             @NonNull final String currentVendorListVersion,
             @NonNull final String currentVendorListLink,
             @NonNull final String currentPrivacyPolicyVersion,
@@ -112,11 +118,12 @@ private SyncResponse(@NonNull final String isGdprRegion,
         // Default for this is true
         mIsGdprRegion = !"0".equals(isGdprRegion);
 
-        // Default for the next four is false
+        // Default for the next five is false
         mForceExplicitNo = "1".equals(forceExplicitNo);
         mInvalidateConsent = "1".equals(invalidateConsent);
         mReacquireConsent = "1".equals(reacquireConsent);
         mIsWhitelisted = "1".equals(isWhitelisted);
+        mForceGdprApplies = "1".equals(forceGdprApplies);
 
         mCurrentVendorListVersion = currentVendorListVersion;
         mCurrentVendorListLink = currentVendorListLink;
@@ -135,6 +142,7 @@ private SyncResponse(@NonNull final String isGdprRegion,
         private String invalidateConsent;
         private String reacquireConsent;
         private String isWhitelisted;
+        private String forceGdprApplies;
         private String currentVendorListVersion;
         private String currentVendorListLink;
         private String currentPrivacyPolicyVersion;
@@ -173,6 +181,11 @@ public Builder setIsWhitelisted(@NonNull final String isWhitelisted) {
             return this;
         }
 
+        public Builder setForceGdprApplies(@Nullable final String forceGdprApplies) {
+            this.forceGdprApplies = forceGdprApplies;
+            return this;
+        }
+
         public Builder setCurrentVendorListVersion(@NonNull final String currentVendorListVersion) {
             this.currentVendorListVersion = currentVendorListVersion;
             return this;
@@ -222,7 +235,7 @@ public Builder setConsentChangeReason(@Nullable final String consentChangeReason
 
         public SyncResponse build() {
             return new SyncResponse(isGdprRegion, forceExplicitNo, invalidateConsent,
-                    reacquireConsent, isWhitelisted, currentVendorListVersion,
+                    reacquireConsent, isWhitelisted, forceGdprApplies, currentVendorListVersion,
                     currentVendorListLink, currentPrivacyPolicyVersion, currentPrivacyPolicyLink,
                     currentVendorListIabFormat, currentVendorListIabHash, callAgainAfterSecs,
                     extras, consentChangeReason);
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncUrlGenerator.java
index ba462001..966453af 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncUrlGenerator.java
@@ -38,6 +38,11 @@
      */
     private static final String EXTRAS_KEY = "extras";
 
+    /**
+     * "1" when the publisher just forced gdpr applies. Otherwise, this is not sent.
+     */
+    private static final String FORCED_GDPR_APPLIES_CHANGED = "forced_gdpr_applies_changed";
+
     @NonNull private final Context mContext;
     @Nullable private String mAdUnitId;
     @Nullable private String mUdid;
@@ -50,6 +55,8 @@
     @Nullable private String mCachedVendorListIabHash;
     @Nullable private String mExtras;
     @Nullable private Boolean mGdprApplies;
+    private boolean mForceGdprApplies;
+    @Nullable private Boolean mForceGdprAppliesChanged;
 
     public SyncUrlGenerator(@NonNull final Context context,
             @NonNull final String currentConsentStatus) {
@@ -75,6 +82,17 @@ public SyncUrlGenerator withGdprApplies(@Nullable final Boolean gdprApplies) {
         return this;
     }
 
+    public SyncUrlGenerator withForceGdprApplies(final boolean forceGdprApplies) {
+        mForceGdprApplies = forceGdprApplies;
+        return this;
+    }
+
+    public SyncUrlGenerator withForceGdprAppliesChanged(
+            @Nullable final Boolean forceGdprAppliesChanged) {
+        mForceGdprAppliesChanged = forceGdprAppliesChanged;
+        return this;
+    }
+
     public SyncUrlGenerator withLastChangedMs(@Nullable final String lastChangedMs) {
         mLastChangedMs = lastChangedMs;
         return this;
@@ -128,9 +146,9 @@ public String generateUrlString(@NonNull final String serverHostname) {
         addParam(CACHED_VENDOR_LIST_IAB_HASH_KEY, mCachedVendorListIabHash);
         addParam(EXTRAS_KEY, mExtras);
         addParam(UDID_KEY, mUdid);
-        if (mGdprApplies != null) {
-            addParam(GDPR_APPLIES, mGdprApplies ? "1" : "0");
-        }
+        addParam(GDPR_APPLIES, mGdprApplies);
+        addParam(FORCE_GDPR_APPLIES, mForceGdprApplies);
+        addParam(FORCED_GDPR_APPLIES_CHANGED, mForceGdprAppliesChanged);
         addParam(BUNDLE_ID_KEY, ClientMetadata.getInstance(mContext).getAppPackageName());
         addParam(DNT_KEY, PlayServicesUrlRewriter.DO_NOT_TRACK_TEMPLATE);
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
index be03be19..b373e756 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
@@ -60,19 +60,19 @@ private ManifestUtils() {}
         REQUIRED_NATIVE_SDK_ACTIVITIES.add(com.mopub.common.MoPubBrowser.class);
     }
 
-    private static final List<Class<? extends Activity>> REQUIRED_SDK_ACTIVITIES;
+    private static final List<Class<? extends Activity>> REQUIRED_GDPR_ACTIVITIES;
     static {
-        REQUIRED_SDK_ACTIVITIES = new ArrayList<>(1);
-        REQUIRED_SDK_ACTIVITIES.add(com.mopub.common.privacy.ConsentDialogActivity.class);
+        REQUIRED_GDPR_ACTIVITIES = new ArrayList<>(1);
+        REQUIRED_GDPR_ACTIVITIES.add(com.mopub.common.privacy.ConsentDialogActivity.class);
     }
 
-    public static void checkSdkActivitiesDeclared(@NonNull final Context context) {
+    public static void checkGdprActivitiesDeclared(@NonNull final Context context) {
         if (!Preconditions.NoThrow.checkNotNull(context, "context is not allowed to be null")) {
             return;
         }
 
-        displayWarningForMissingActivities(context, REQUIRED_SDK_ACTIVITIES);
-        displayWarningForMisconfiguredActivities(context, REQUIRED_SDK_ACTIVITIES);
+        displayWarningForMissingActivities(context, REQUIRED_GDPR_ACTIVITIES);
+        displayWarningForMisconfiguredActivities(context, REQUIRED_GDPR_ACTIVITIES);
     }
 
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
index aa26b4f0..e1bf56f4 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
@@ -64,6 +64,8 @@
     FORCE_EXPLICIT_NO("force_explicit_no"),
     REACQUIRE_CONSENT("reacquire_consent"),
     CONSENT_CHANGE_REASON("consent_change_reason"),
+    FORCE_GDPR_APPLIES("force_gdpr_applies"),
+
 
     @Deprecated CUSTOM_SELECTOR("X-Customselector");
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
index 71f37d64..a97f8e42 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -66,6 +66,7 @@
     private Handler mHandler;
     private boolean mIsLoading;
     private String mUrl;
+    private boolean mExpanded;
 
     // This is the power of the exponential term in the exponential backoff calculation.
     @VisibleForTesting
@@ -397,7 +398,7 @@ void pauseRefresh() {
     }
 
     void resumeRefresh() {
-        if (mShouldAllowAutoRefresh) {
+        if (mShouldAllowAutoRefresh && !mExpanded) {
             setAutoRefreshStatus(true);
         }
     }
@@ -423,6 +424,16 @@ private void setAutoRefreshStatus(final boolean newAutoRefreshStatus) {
         }
     }
 
+    void expand() {
+        mExpanded = true;
+        pauseRefresh();
+    }
+
+    void collapse() {
+        mExpanded = false;
+        resumeRefresh();
+    }
+
     @Nullable
     public AdReport getAdReport() {
         if (mAdUnitId != null && mAdResponse != null) {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ConversionUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ConversionUrlGenerator.java
index d59b6da2..d667ea73 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ConversionUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ConversionUrlGenerator.java
@@ -23,6 +23,7 @@
     private String mConsentedPrivacyPolicyVersion;
     @Nullable
     private Boolean mGdprApplies;
+    private boolean mForceGdprApplies;
 
     private boolean mSt;
 
@@ -41,6 +42,11 @@ public ConversionUrlGenerator withGdprApplies(@Nullable final Boolean gdprApplie
         return this;
     }
 
+    public ConversionUrlGenerator withForceGdprApplies(final boolean forceGdprApplies) {
+        mForceGdprApplies = forceGdprApplies;
+        return this;
+    }
+
     public ConversionUrlGenerator withConsentedVendorListVersion(@Nullable final String consentedVendorListVersion) {
         mConsentedVendorListVersion = consentedVendorListVersion;
         return this;
@@ -73,9 +79,8 @@ public String generateUrlString(String serverHostname) {
         addParam(CURRENT_CONSENT_STATUS_KEY, mCurrentConsentStatus);
         addParam(CONSENTED_VENDOR_LIST_VERSION_KEY, mConsentedVendorListVersion);
         addParam(CONSENTED_PRIVACY_POLICY_VERSION_KEY, mConsentedPrivacyPolicyVersion);
-        if (mGdprApplies != null) {
-            addParam(GDPR_APPLIES, mGdprApplies);
-        }
+        addParam(GDPR_APPLIES, mGdprApplies);
+        addParam(FORCE_GDPR_APPLIES, mForceGdprApplies);
         return getFinalUrlString();
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
index 1772be75..490ba301 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
@@ -72,6 +72,7 @@ public void reportAppOpen(boolean sessionTracker) {
         final ConsentData consentData = infoManager.getConsentData();
         final String url = new ConversionUrlGenerator(mContext)
                 .withGdprApplies(infoManager.gdprApplies())
+                .withForceGdprApplies(consentData.isForceGdprApplies())
                 .withCurrentConsentStatus(infoManager.getPersonalInfoConsentStatus().getValue())
                 .withConsentedPrivacyPolicyVersion(consentData.getConsentedPrivacyPolicyVersion())
                 .withConsentedVendorListVersion(consentData.getConsentedVendorListVersion())
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
index 27eda319..cc74ef2c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
@@ -27,6 +27,7 @@
     REWARD_NOT_SELECTED("Reward not selected for rewarded ad."),
 
     DO_NOT_TRACK("Do not track is enabled."),
+    GDPR_DOES_NOT_APPLY("GDPR does not apply. Ignoring consent-related actions."),
 
     UNSPECIFIED("Unspecified error.");
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
index 97942314..4f6fd25e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -332,6 +332,30 @@ public void setAutorefreshEnabled(boolean enabled) {
         }
     }
 
+    void pauseAutorefresh() {
+        if (mAdViewController != null) {
+            mAdViewController.pauseRefresh();
+        }
+    }
+
+    void resumeAutorefresh() {
+        if (mAdViewController != null) {
+            mAdViewController.resumeRefresh();
+        }
+    }
+
+    void expand() {
+        if (mAdViewController != null) {
+            mAdViewController.expand();
+        }
+    }
+
+    void collapse() {
+        if (mAdViewController != null) {
+            mAdViewController.collapse();
+        }
+    }
+
     public boolean getAutorefreshEnabled() {
         if (mAdViewController != null) return mAdViewController.getCurrentAutoRefreshStatus();
         else {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
index d9e9e993..fac9a035 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
@@ -52,11 +52,19 @@
     @NonNull private final AdFormat mAdFormat;
     @Nullable private final String mAdUnitId;
     @NonNull private final Context mContext;
+    @Nullable private static ServerOverrideListener sServerOverrideListener;
 
     public interface Listener extends Response.ErrorListener {
         void onSuccess(AdResponse response);
     }
 
+    public interface ServerOverrideListener {
+        void onForceExplicitNo(@Nullable final String consentChangeReason);
+        void onInvalidateConsent(@Nullable final String consentChangeReason);
+        void onReacquireConsent(@Nullable final String consentChangeReason);
+        void onForceGdprApplies();
+    }
+
     public AdRequest(@NonNull final String url,
             @NonNull final AdFormat adFormat,
             @Nullable final String adUnitId,
@@ -94,6 +102,11 @@ public Listener getListener() {
         return mListener;
     }
 
+    public static void setServerOverrideListener(
+            @NonNull final ServerOverrideListener serverOverrideListener) {
+        sServerOverrideListener = serverOverrideListener;
+    }
+
     @Override
     public Map<String, String> getHeaders() {
         TreeMap<String, String> headers = new TreeMap<String, String>();
@@ -365,18 +378,27 @@ public Listener getListener() {
             builder.setShouldRewardOnClick(shouldRewardOnClick);
         }
 
-        final boolean invalidateConsent = extractBooleanHeader(jsonHeaders, ResponseHeader.INVALIDATE_CONSENT, false);
-        final boolean forceExplicitNo = extractBooleanHeader(jsonHeaders, ResponseHeader.FORCE_EXPLICIT_NO, false);
-        final boolean reacquireConsent = extractBooleanHeader(jsonHeaders, ResponseHeader.REACQUIRE_CONSENT, false);
-        String consentChangeReason = extractHeader(jsonHeaders, ResponseHeader.CONSENT_CHANGE_REASON);
-
-        if (MoPub.getPersonalInformationManager() != null) {
+        final boolean invalidateConsent = extractBooleanHeader(jsonHeaders,
+                ResponseHeader.INVALIDATE_CONSENT, false);
+        final boolean forceExplicitNo = extractBooleanHeader(jsonHeaders,
+                ResponseHeader.FORCE_EXPLICIT_NO, false);
+        final boolean reacquireConsent = extractBooleanHeader(jsonHeaders,
+                ResponseHeader.REACQUIRE_CONSENT, false);
+        String consentChangeReason = extractHeader(jsonHeaders,
+                ResponseHeader.CONSENT_CHANGE_REASON);
+        final boolean forceGdprApplies = extractBooleanHeader(jsonHeaders,
+                ResponseHeader.FORCE_GDPR_APPLIES, false);
+
+        if (sServerOverrideListener != null) {
+            if (forceGdprApplies) {
+                sServerOverrideListener.onForceGdprApplies();
+            }
             if (forceExplicitNo) {
-                MoPub.getPersonalInformationManager().forceExplicitNo(consentChangeReason);
+                sServerOverrideListener.onForceExplicitNo(consentChangeReason);
             } else if (invalidateConsent) {
-                MoPub.getPersonalInformationManager().invalidateConsent(consentChangeReason);
+                sServerOverrideListener.onInvalidateConsent(consentChangeReason);
             } else if (reacquireConsent) {
-                MoPub.getPersonalInformationManager().reacquireConsent(consentChangeReason);
+                sServerOverrideListener.onReacquireConsent(consentChangeReason);
             }
         }
 
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index b987d831..d0048b50 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -11,7 +11,7 @@ repositories {
 }
 
 project.group = 'com.mopub'
-project.version = '5.0.0'
+project.version = '5.1.0'
 
 android {
     compileSdkVersion 26
@@ -20,7 +20,7 @@ android {
     useLibrary 'org.apache.http.legacy'
 
     defaultConfig {
-        versionCode 59
+        versionCode 61
         versionName version
         minSdkVersion 16
         targetSdkVersion 26
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
index 47005228..6e7e0060 100644
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=5.0.0+kit
+fabric-version=5.1.0+kit
 fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
index b932194d..d0b8e502 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
@@ -97,7 +97,7 @@ public void shouldOverrideUrlLoading_withDeeplinkPlusUrl_withSuccessfulPrimaryUr
     @Test
     public void shouldOverrideUrlLoading_withDeeplinkPlusUrl_withFailedPrimaryUrl_withHTTPFallbackUrl_shouldReturnTrue_shouldLoadFallbackUrl_shouldNotFinish() {
         final String primaryUrl = "missingApp://somePath";
-        final String fallbackUrl = "https://twitter.com/";
+        final String fallbackUrl = "https://mobile.twitter.com/";
         final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
                 + "&fallbackUrl=" + Uri.encode(fallbackUrl);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/AdvertisingIdTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/AdvertisingIdTest.java
index 2040d0f8..47440e0a 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/AdvertisingIdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/AdvertisingIdTest.java
@@ -38,6 +38,11 @@ public void constructor_shouldInitializeCorrectly() {
         assertThat(subject.mMopubId).isEqualTo(MOPUB_ID);
         assertThat(subject.mDoNotTrack).isFalse();
         assertThat(subject.mLastRotation).isEqualTo(time);
+
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, true, now);
+        assertThat(subject.mDoNotTrack).isTrue();
+        // return IFA even when DoNotTrack is true
+        assertThat(subject.getIfaWithPrefix()).isEqualTo("ifa:" + ANDROID_ID);
     }
 
     @Test
@@ -77,4 +82,46 @@ public void getIdWithPrefix_whenUserConsentTrue_shouldReturnIfaString() {
         subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, false, now);
         assertThat(subject.getIdWithPrefix(true)).isEqualTo("ifa:" + ANDROID_ID);
     }
+
+    @Test
+    public void getIdWithPrefix_whenLimitAdTrackingIsTrue_shouldNotDependOnConsent() {
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, true, now);
+
+        assertThat(subject.getIdWithPrefix(true)).isEqualTo("mopub:" + MOPUB_ID);
+        assertThat(subject.getIdWithPrefix(false)).isEqualTo("mopub:" + MOPUB_ID);
+    }
+
+    @Test
+    public void getIdentifier_whenDoNotTrackIsTrue_shouldReturnMoPubid() {
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, true, now);
+
+        assertThat(subject.getIdentifier(true)).isEqualTo(MOPUB_ID);
+        assertThat(subject.getIdentifier(false)).isEqualTo(MOPUB_ID);
+    }
+
+    @Test
+    public void getIdentifier_whenDoNotTrackIsFalse_shouldAnalyzeConsent() {
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, false, now);
+        
+        assertThat(subject.getIdentifier(true)).isEqualTo(ANDROID_ID);
+        assertThat(subject.getIdentifier(false)).isEqualTo(MOPUB_ID);
+    }
+
+    @Test
+    public void generateExpiredAdvertisingId_shouldGenerateExpiredAdvertisingId() {
+        subject = AdvertisingId.generateExpiredAdvertisingId();
+        assertThat(subject.isRotationRequired()).isTrue();
+    }
+
+    @Test
+    public void generateFreshAdvertisingId_shouldGenerateNonExpiredAdvertisingId() {
+        subject = AdvertisingId.generateFreshAdvertisingId();
+        assertThat(subject.isRotationRequired()).isFalse();
+    }
+
+    @Test
+    public void generateIdString_lengthIs16x2plus4() {
+        String uuid = AdvertisingId.generateIdString();
+        assertThat(uuid.length()).isEqualTo(36);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogControllerTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogControllerTest.java
new file mode 100644
index 00000000..644886ff
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogControllerTest.java
@@ -0,0 +1,210 @@
+package com.mopub.common.privacy;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.support.v4.app.SupportActivity;
+
+import com.mopub.common.Constants;
+import com.mopub.common.util.Intents;
+import com.mopub.common.util.Reflection;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.mobileads.MoPubErrorCode;
+import com.mopub.network.MoPubNetworkError;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.MoPubRequestQueueTest;
+import com.mopub.network.Networking;
+import com.mopub.volley.VolleyError;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Mockito;
+import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.rule.PowerMockRule;
+import org.robolectric.Robolectric;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
+
+import java.lang.reflect.Field;
+
+import static com.mopub.network.MoPubNetworkError.Reason.BAD_BODY;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+import static org.powermock.api.mockito.PowerMockito.verifyStatic;
+import static org.powermock.api.mockito.PowerMockito.when;
+
+@RunWith(RobolectricTestRunner.class)
+@Config(constants = BuildConfig.class)
+@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*", "org.json.*"})
+@PrepareForTest({Networking.class, Intents.class})
+public class ConsentDialogControllerTest {
+    private static final String AD_UNIT_ID = "ad_unit_id";
+    private static final String MREADY = "mReady";
+    private static final String REQUEST_IN_FLIGHT = "mRequestInFlight";
+
+    @Rule
+    public PowerMockRule rule = new PowerMockRule();
+
+    private ConsentDialogResponse dialogResponse;
+    private ConsentDialogController subject;
+    private PersonalInfoData personalInfoData;
+
+    // mock objects
+    private MoPubRequestQueue mockRequestQueue;
+    private ConsentDialogListener mockDialogListener;
+
+    @Before
+    public void setup() {
+        Activity activity = Robolectric.buildActivity(SupportActivity.class).get();
+        Context context = activity.getApplicationContext();
+        mockRequestQueue = Mockito.mock(MoPubRequestQueueTest.TestMoPubRequestQueue.class);
+        mockDialogListener = Mockito.mock(ConsentDialogListener.class);
+        dialogResponse = new ConsentDialogResponse("html_text");
+        personalInfoData = new PersonalInfoData(context, AD_UNIT_ID);
+
+        PowerMockito.mockStatic(Networking.class);
+        when(Networking.getRequestQueue(context)).thenReturn(mockRequestQueue);
+        when(Networking.getScheme()).thenReturn(Constants.HTTPS);
+
+        PowerMockito.mockStatic(Intents.class);
+
+        subject = new ConsentDialogController(context);
+    }
+
+    @Test
+    public void loadConsentDialog_whenReadyIsFalse_whenRequestInFlightIsFalse_shouldAddRequestToNetworkQueue() throws Exception {
+        ArgumentCaptor<ConsentDialogRequest> requestCaptor = ArgumentCaptor.forClass(ConsentDialogRequest.class);
+
+        subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
+
+        assertThat(getFlag(subject, REQUEST_IN_FLIGHT)).isTrue();
+        verify(mockDialogListener, never()).onConsentDialogLoaded();
+        verify(mockRequestQueue).add(requestCaptor.capture());
+        ConsentDialogRequest request = requestCaptor.getValue();
+        assertThat(request.getUrl().indexOf(Constants.GDPR_CONSENT_HANDLER)).isNotNegative();
+    }
+
+    @Test
+    public void loadConsentDialog_whenReadyIsTrue_whenRequestInFlightIsFalse_shouldNotAddRequestToNetworkQueue() throws Exception {
+        setFlagReady(subject);
+
+        subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
+
+        assertThat(getFlag(subject, REQUEST_IN_FLIGHT)).isFalse();
+        verify(mockDialogListener).onConsentDialogLoaded(); // should call listener immediately
+        verify(mockRequestQueue, never()).add(any(ConsentDialogRequest.class));
+    }
+
+    @Test
+    public void loadConsentDialog_whenReadyIsTrue_witListenerNotSet_shouldNotCrash() throws Exception {
+        setFlagReady(subject);
+
+        subject.loadConsentDialog(null, true, personalInfoData);
+
+        assertThat(getFlag(subject, REQUEST_IN_FLIGHT)).isFalse();
+        verify(mockRequestQueue, never()).add(any(ConsentDialogRequest.class));
+    }
+
+    @Test
+    public void loadConsentDialog_whenRequestInFlightIsTrue_shouldNotCreateNewRequest_shouldNotCallListener() throws Exception {
+        setFlagRequestInFlight(subject);
+
+        subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
+
+        verify(mockDialogListener, never()).onConsentDialogLoaded();
+        verify(mockRequestQueue, never()).add(any(ConsentDialogRequest.class));
+    }
+
+    @Test
+    public void onSuccess_withValidResponse_shouldCallConsentDialogLoaded() throws Exception {
+        subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
+        subject.onSuccess(dialogResponse);
+
+        assertThat(getFlag(subject, MREADY)).isTrue();
+        assertThat(getFlag(subject, REQUEST_IN_FLIGHT)).isFalse();
+        verify(mockDialogListener).onConsentDialogLoaded();
+        verify(mockDialogListener, never()).onConsentDialogLoadFailed(any(MoPubErrorCode.class));
+    }
+
+    @Test
+    public void onSuccess_withEmptyResponse_shouldNotCallConsentDialogLoaded() throws Exception {
+        subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
+        subject.onSuccess(new ConsentDialogResponse(""));
+
+        assertThat(getFlag(subject, MREADY)).isFalse();
+        assertThat(getFlag(subject, REQUEST_IN_FLIGHT)).isFalse();
+        verify(mockDialogListener, never()).onConsentDialogLoaded();
+        verify(mockDialogListener).onConsentDialogLoadFailed(any(MoPubErrorCode.class));
+    }
+
+    @Test
+    public void onErrorResponse_shouldResetState_shouldCallDialogFailed() throws Exception {
+        subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
+        subject.onErrorResponse(new VolleyError());
+
+        assertThat(getFlag(subject, MREADY)).isFalse();
+        assertThat(getFlag(subject, REQUEST_IN_FLIGHT)).isFalse();
+        verify(mockDialogListener, never()).onConsentDialogLoaded();
+        verify(mockDialogListener).onConsentDialogLoadFailed(any(MoPubErrorCode.class));
+    }
+
+    @Test
+    public void onErrorResponse_withErrorBadBody_shouldResetState_shouldCallDialogFailed() throws Exception {
+        subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
+        subject.onErrorResponse(new MoPubNetworkError(BAD_BODY));
+
+        assertThat(getFlag(subject, MREADY)).isFalse();
+        assertThat(getFlag(subject, REQUEST_IN_FLIGHT)).isFalse();
+        verify(mockDialogListener, never()).onConsentDialogLoaded();
+        verify(mockDialogListener).onConsentDialogLoadFailed(MoPubErrorCode.INTERNAL_ERROR);
+    }
+
+    @Test
+    public void showConsentDialog_whenDataIsReady_shouldStartActivity_shouldResetControllerState() throws Exception {
+        subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
+        subject.onSuccess(dialogResponse);
+
+        subject.showConsentDialog();
+
+        assertThat(getFlag(subject, MREADY)).isFalse();
+        assertThat(getFlag(subject, REQUEST_IN_FLIGHT)).isFalse();
+        verifyStatic();
+        Intents.startActivity(any(Context.class), any(Intent.class));
+    }
+
+    @Test
+    public void showConsentDialog_whenDataIsNotReady_shouldNotStartActivity() throws Exception {
+        subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
+        subject.onErrorResponse(new MoPubNetworkError(BAD_BODY));
+
+        subject.showConsentDialog();
+
+        assertThat(getFlag(subject, MREADY)).isFalse();
+        assertThat(getFlag(subject, REQUEST_IN_FLIGHT)).isFalse();
+        verifyStatic(never());
+        Intents.startActivity(any(Context.class), any(Intent.class));
+    }
+
+    // test utils
+    private static void setFlagReady(ConsentDialogController target) throws Exception {
+        Field field = Reflection.getPrivateField(ConsentDialogController.class, MREADY);
+        field.setBoolean(target, true);
+    }
+
+    private static void setFlagRequestInFlight(ConsentDialogController target) throws Exception {
+        Field field = Reflection.getPrivateField(ConsentDialogController.class, REQUEST_IN_FLIGHT);
+        field.setBoolean(target, true);
+    }
+
+    private static boolean getFlag(ConsentDialogController target, final String fieldName) throws Exception {
+        Field field = Reflection.getPrivateField(ConsentDialogController.class, fieldName);
+        return field.getBoolean(target);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogRequestTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogRequestTest.java
index f3907ced..9d49474d 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogRequestTest.java
@@ -29,7 +29,7 @@
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class ConsentDialogRequestTest {
-    private static final String URL = "https://"+ Constants.HOST+"/m/gdpr_consent_dialog?adunit_id=testAdUnitId&nv=5.0.0&language=en";
+    private static final String URL = "https://"+ Constants.HOST+"/m/gdpr_consent_dialog?id=testAdUnitId&nv=5.0.0&language=en";
     private static final String HTML = "html-body-text";
     private static final String BODY = "{ dialog_html : '" + HTML + "' }";
 
@@ -56,7 +56,7 @@ public void constructor_shouldSetParametersCorrectly() {
     }
 
     @Test
-    public void parseNetworkResponse_validBody_shouldSucceed() {
+    public void parseNetworkResponse_withValidBody_shouldSucceed() {
         NetworkResponse testResponse = new NetworkResponse(BODY.getBytes(Charset.defaultCharset()));
         final Response<ConsentDialogResponse> response = subject.parseNetworkResponse(testResponse);
 
@@ -65,7 +65,7 @@ public void parseNetworkResponse_validBody_shouldSucceed() {
     }
 
     @Test
-    public void parseNetworkResponse_emptyBody_shouldReturnErrorBadBody() {
+    public void parseNetworkResponse_withEmptyBody_shouldReturnErrorBadBody() {
         NetworkResponse testResponse = new NetworkResponse("".getBytes(Charset.defaultCharset()));
         final Response<ConsentDialogResponse> response = subject.parseNetworkResponse(testResponse);
 
@@ -75,7 +75,7 @@ public void parseNetworkResponse_emptyBody_shouldReturnErrorBadBody() {
     }
 
     @Test
-    public void parseNetworkResponse_bodyBrokenJson_shouldReturnErrorBadBody() {
+    public void parseNetworkResponse_withBrokenJsonBody_shouldReturnErrorBadBody() {
         NetworkResponse testResponse = new NetworkResponse("{ html - 'body' }".getBytes(Charset.defaultCharset()));
         final Response<ConsentDialogResponse> response = subject.parseNetworkResponse(testResponse);
 
@@ -85,7 +85,7 @@ public void parseNetworkResponse_bodyBrokenJson_shouldReturnErrorBadBody() {
     }
 
     @Test
-    public void parseNetworkResponse_jsonNoHtmlTag_shouldReturnErrorBadBody() {
+    public void parseNetworkResponse_withJsonNoHtmlTag_shouldReturnErrorBadBody() {
         NetworkResponse testResponse = new NetworkResponse("{ k: 1 }".getBytes(Charset.defaultCharset()));
         final Response<ConsentDialogResponse> response = subject.parseNetworkResponse(testResponse);
 
@@ -95,7 +95,7 @@ public void parseNetworkResponse_jsonNoHtmlTag_shouldReturnErrorBadBody() {
     }
 
     @Test
-    public void deliverResponse_validListener_callsListener() {
+    public void deliverResponse_withValidListener_shouldCallListener() {
         ConsentDialogResponse response = new ConsentDialogResponse("html-text");
         subject.deliverResponse(response);
 
@@ -103,7 +103,7 @@ public void deliverResponse_validListener_callsListener() {
     }
 
     @Test
-    public void deliverResponse_nullListener_doesntCrash() {
+    public void deliverResponse_withNullListener_shouldNotCrash() {
         subject = new ConsentDialogRequest(activity, URL, null);
         ConsentDialogResponse response = new ConsentDialogResponse("html-text");
         subject.deliverResponse(response);
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogUrlGeneratorTest.java
new file mode 100644
index 00000000..7aeff802
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogUrlGeneratorTest.java
@@ -0,0 +1,78 @@
+package com.mopub.common.privacy;
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.mopub.common.ClientMetadata;
+import com.mopub.common.Constants;
+import com.mopub.common.MoPub;
+import com.mopub.mobileads.BuildConfig;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.rule.PowerMockRule;
+import org.robolectric.Robolectric;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+
+@RunWith(RobolectricTestRunner.class)
+@Config(constants = BuildConfig.class)
+@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*", "org.json.*"})
+@PrepareForTest(ClientMetadata.class)
+public class ConsentDialogUrlGeneratorTest {
+    private static final String AD_UNIT_ID = "ad_unit_id";
+    private static final String CONSENT_STATUS_UNKNOWN = ConsentStatus.UNKNOWN.getValue();
+    private static final String VERSION = MoPub.SDK_VERSION;
+    private static final String CURRENT_LANGUAGE = "current_language";
+    private static final String FORCE_GDPR_APPLIES = "0";
+    private static final String BUNDLE = "test.bundle";
+
+    @Rule
+    public PowerMockRule rule = new PowerMockRule();
+
+    private Context context;
+    private ConsentDialogUrlGenerator subject;
+
+    @Before
+    public void setup() {
+        Activity activity = Robolectric.buildActivity(Activity.class).get();
+        context = activity.getApplicationContext();
+
+        PowerMockito.mockStatic(ClientMetadata.class);
+        PowerMockito.when(ClientMetadata.getCurrentLanguage(context)).thenReturn(CURRENT_LANGUAGE);
+        ClientMetadata mockClientMetadata = PowerMockito.mock(ClientMetadata.class);
+        PowerMockito.when(mockClientMetadata.getAppPackageName()).thenReturn(BUNDLE);
+        PowerMockito.when(ClientMetadata.getInstance(any(Context.class))).thenReturn(
+                mockClientMetadata);
+    }
+
+    @Test
+    public void generateUrlString_withValidAdUnitId_shouldGenerateValidUrl() {
+        String validUrl = createTestUrl();
+
+        subject = new ConsentDialogUrlGenerator(context, AD_UNIT_ID,
+                ConsentStatus.UNKNOWN.getValue());
+        String url = subject.generateUrlString(Constants.HOST);
+
+        assertThat(url).isEqualTo(validUrl);
+    }
+
+    // unit test utils
+    private String createTestUrl() {
+        return "https://" + Constants.HOST + "/m/gdpr_consent_dialog" +
+                "?id=" + AD_UNIT_ID +
+                "&current_consent_status=" + CONSENT_STATUS_UNKNOWN +
+                "&nv=" + VERSION +
+                "&language=" + CURRENT_LANGUAGE +
+                "&force_gdpr_applies=" + FORCE_GDPR_APPLIES +
+                "&bundle=" + BUNDLE;
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java
index 71d84100..b5de1cfa 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java
@@ -7,6 +7,7 @@
 import android.support.annotation.NonNull;
 
 import com.mopub.common.GpsHelper;
+import com.mopub.common.SdkInitializationListener;
 import com.mopub.common.util.Reflection;
 import com.mopub.mobileads.BuildConfig;
 
@@ -34,6 +35,7 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
+import static org.powermock.api.mockito.PowerMockito.verifyStatic;
 
 @RunWith(RobolectricTestRunner.class)
 @Config(constants = BuildConfig.class)
@@ -44,6 +46,7 @@
     public PowerMockRule rule = new PowerMockRule();
 
     private MoPubIdentifier.AdvertisingIdChangeListener idChangeListener;
+    private SdkInitializationListener initializationListener;
 
     private Context context;
     private MoPubIdentifier subject;
@@ -58,6 +61,7 @@ public void setup() {
         Activity activity = Robolectric.buildActivity(Activity.class).get();
         context = activity.getApplicationContext();
         idChangeListener = mock(MoPubIdentifier.AdvertisingIdChangeListener.class);
+        initializationListener = mock(SdkInitializationListener.class);
     }
 
     @After
@@ -71,7 +75,7 @@ public void tearDown() {
     }
 
     @Test
-    public void constructor_nonFirstStart_shouldNotStartRefreshThread_shouldReadSharedPref() throws Exception {
+    public void constructor_withNotExpiredOldId_withNoAmazon_withNoGoogle_shouldReadSharedPref() throws Exception {
         AdvertisingId savedId = writeAdvertisingInfoToSharedPreferences(context, true);
 
         subject = new MoPubIdentifier(context);
@@ -84,7 +88,7 @@ public void constructor_nonFirstStart_shouldNotStartRefreshThread_shouldReadShar
     }
 
     @Test
-    public void refreshAdvertisingInfoBackgroundThread_noAmazonNoGoogle_expiredId_shouldCallListener() throws Exception {
+    public void constructor_withExpiredOldId_withNoAmazon_withNoGoogle_shouldCallOnIdChanged() throws Exception {
         AdvertisingId savedId = writeExpiredAdvertisingInfoToSharedPreferences(context, false);
 
         ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
@@ -106,23 +110,7 @@ public void refreshAdvertisingInfoBackgroundThread_noAmazonNoGoogle_expiredId_sh
     }
 
     @Test
-    public void refreshAdvertisingInfoBackgroundThread_expiredId_listenerNotSet_shouldNotCrash() throws Exception {
-        AdvertisingId savedId = writeExpiredAdvertisingInfoToSharedPreferences(context, true);
-
-        subject = new MoPubIdentifier(context);
-        subject.setIdChangeListener(null);
-        subject.refreshAdvertisingInfoBackgroundThread();
-        verify(idChangeListener, never()).onIdChanged(any(AdvertisingId.class), any(AdvertisingId.class));
-
-        AdvertisingId newId = subject.getAdvertisingInfo();
-
-        assertThat(newId.mMopubId).isNotEqualTo(savedId.mMopubId);
-        assertThat(newId.mAdvertisingId).isNotEqualTo(savedId.mAdvertisingId);
-        assertThat(newId.isDoNotTrack()).isFalse();
-    }
-
-    @Test
-    public void refreshAdvertisingInfoBackgroundThread_noAmazonNoGoogle_nonExpiredId_shouldCallListenerOnlyOnce() throws Exception {
+    public void constructor_withNotExpiredOldid_withNoAmazon_withNoGoogle_shouldCallOnIdChanngedOnlyOnce() throws Exception {
         AdvertisingId savedId = writeAdvertisingInfoToSharedPreferences(context, false);
 
         subject = new MoPubIdentifier(context, idChangeListener);
@@ -140,9 +128,23 @@ public void refreshAdvertisingInfoBackgroundThread_noAmazonNoGoogle_nonExpiredId
     }
 
     @Test
-    public void refreshAdvertisingInfoBackgroundThread_amazonNoGoogle_shoulUseAmazonId() throws Exception {
+    public void constructor_withExpiredId_withNoListenerSet_shouldNotCrash_shouldRotateMopubId() throws Exception {
+        AdvertisingId savedId = writeExpiredAdvertisingInfoToSharedPreferences(context, true);
+
+        subject = new MoPubIdentifier(context);
+        subject.setIdChangeListener(null);
+        AdvertisingId newId = subject.getAdvertisingInfo();
+
+        assertThat(newId.mMopubId).isNotEqualTo(savedId.mMopubId);
+        assertThat(newId.mAdvertisingId).isNotEqualTo(savedId.mAdvertisingId);
+        assertThat(newId.isDoNotTrack()).isFalse();
+        assertThat(newId.isRotationRequired()).isFalse();
+    }
+
+    @Test
+    public void constructor_withGoogle_withNoAmazon_withDoNotTrackTrue_shoulUseGoogleId() throws Exception {
         AdvertisingId savedId = writeAdvertisingInfoToSharedPreferences(context, false);
-        setupAmazonAdvertisingInfo(false);
+        setupGooglePlayService(context, true);
 
         ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
         ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
@@ -158,15 +160,16 @@ public void refreshAdvertisingInfoBackgroundThread_amazonNoGoogle_shoulUseAmazon
         assertThat(oldId.isDoNotTrack()).isEqualTo(savedId.isDoNotTrack());
         assertThat(oldId.getIdWithPrefix(true)).isEqualTo(savedId.getIdWithPrefix(true));
 
-        assertThat(newId.isDoNotTrack()).isFalse();
-        assertThat(newId.mAdvertisingId).isEqualTo(AMAZON_AD_ID);
+        assertThat(newId.isDoNotTrack()).isTrue();
+        assertThat(newId.mAdvertisingId).isEqualTo(GOOGLE_AD_ID);
         assertThat(newId.mMopubId).isEqualTo(savedId.mMopubId);
+        assertThat(newId.getIdWithPrefix(true)).isEqualTo("mopub:" + savedId.mMopubId);
     }
 
     @Test
-    public void refreshAdvertisingInfoBackgroundThread_googleNoAmazon_doNotTrackFalse_shoulUseGoogleId() throws Exception {
+    public void constructor_withAmazon_withNoGoogle_shoulUseAmazonId() throws Exception {
         AdvertisingId savedId = writeAdvertisingInfoToSharedPreferences(context, false);
-        setupGooglePlayService(context, false);
+        setupAmazonAdvertisingInfo(false);
 
         ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
         ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
@@ -183,15 +186,14 @@ public void refreshAdvertisingInfoBackgroundThread_googleNoAmazon_doNotTrackFals
         assertThat(oldId.getIdWithPrefix(true)).isEqualTo(savedId.getIdWithPrefix(true));
 
         assertThat(newId.isDoNotTrack()).isFalse();
-        assertThat(newId.mAdvertisingId).isEqualTo(GOOGLE_AD_ID);
+        assertThat(newId.mAdvertisingId).isEqualTo(AMAZON_AD_ID);
         assertThat(newId.mMopubId).isEqualTo(savedId.mMopubId);
-        assertThat(newId.getIdWithPrefix(true)).isEqualTo("ifa:" + GOOGLE_AD_ID);
     }
 
     @Test
-    public void refreshAdvertisingInfoBackgroundThread_googleNoAmazon_doNotTrackTrue_shoulUseGoogleId() throws Exception {
-        AdvertisingId savedId = writeAdvertisingInfoToSharedPreferences(context, false);
-        setupGooglePlayService(context, true);
+    public void constructor_withGoogle_withNoAmazon_withDoNotTrackFalse_shoulUseGoogleId() throws Exception {
+        AdvertisingId savedId = writeAdvertisingInfoToSharedPreferences(context, true);
+        setupGooglePlayService(context, false);
 
         ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
         ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
@@ -202,19 +204,21 @@ public void refreshAdvertisingInfoBackgroundThread_googleNoAmazon_doNotTrackTrue
         AdvertisingId oldId = oldIdClientCaptor.getValue();
         AdvertisingId newId = newIdClientCaptor.getValue();
 
+        // verify that oldId is from SharedPreferences
         assertThat(oldId.mMopubId).isEqualTo(savedId.mMopubId);
         assertThat(oldId.mAdvertisingId).isEqualTo(savedId.mAdvertisingId);
+        assertThat(oldId.isDoNotTrack()).isTrue();
         assertThat(oldId.isDoNotTrack()).isEqualTo(savedId.isDoNotTrack());
         assertThat(oldId.getIdWithPrefix(true)).isEqualTo(savedId.getIdWithPrefix(true));
-
-        assertThat(newId.isDoNotTrack()).isTrue();
+        // verify that newId is from Google Play Services
+        assertThat(newId.isDoNotTrack()).isFalse();
         assertThat(newId.mAdvertisingId).isEqualTo(GOOGLE_AD_ID);
         assertThat(newId.mMopubId).isEqualTo(savedId.mMopubId);
-        assertThat(newId.getIdWithPrefix(true)).isEqualTo("mopub:" + savedId.mMopubId);
+        assertThat(newId.getIdWithPrefix(true)).isEqualTo("ifa:" + GOOGLE_AD_ID);
     }
 
     @Test
-    public void sharedPreferences_WriteAndRead_ShouldMatch() throws Exception {
+    public void sharedPreferences_WriteAndReadAdvertisingId_shouldMatch() throws Exception {
         final long time = Calendar.getInstance().getTimeInMillis();
         AdvertisingId adConfig = new AdvertisingId(TEST_IFA_ID,
                 TEST_MOPUB_ID,
@@ -230,7 +234,7 @@ public void sharedPreferences_WriteAndRead_ShouldMatch() throws Exception {
                 .execute();
 
         // read from shared preferences
-        AdvertisingId adConfig2 = (AdvertisingId)  new Reflection.MethodBuilder(null, "readIdFromStorage")
+        AdvertisingId adConfig2 = (AdvertisingId) new Reflection.MethodBuilder(null, "readIdFromStorage")
                 .setAccessible()
                 .setStatic(MoPubIdentifier.class)
                 .addParam(Context.class, context)
@@ -243,6 +247,186 @@ public void sharedPreferences_WriteAndRead_ShouldMatch() throws Exception {
         assertThat(adConfig2.mLastRotation.getTimeInMillis()).isEqualTo(time);
     }
 
+    @Test
+    public void isPlayServiceAvailable_whenGoogleAvailable_shouldCallGpsHelper_shouldReturnTrue() {
+        subject = new MoPubIdentifier(context, idChangeListener);
+        assertThat(subject.isPlayServicesAvailable()).isFalse();
+
+        setupGooglePlayService(context, false);
+
+        assertThat(subject.isPlayServicesAvailable()).isTrue();
+        verifyStatic();
+        GpsHelper.isPlayServicesAvailable(any(Context.class));
+    }
+
+    @Test
+    public void setAdvertisingInfo_whenCalledTwice_shouldCallInitializationListenerOnce_validateSavedAdvertisingIds() throws Exception {
+        final AdvertisingId adId1 = new AdvertisingId("ifa1", "mopub1", false, Calendar.getInstance().getTimeInMillis());
+        final AdvertisingId adId2 = new AdvertisingId("ifa2", "mopub2", false, Calendar.getInstance().getTimeInMillis());
+
+        writeAdvertisingInfoToSharedPreferences(context, false);
+        subject = new MoPubIdentifier(context);
+        subject.setIdChangeListener(idChangeListener);
+        subject.setInitializationListener(initializationListener);
+
+        subject.setAdvertisingInfo(adId1);
+
+        verify(idChangeListener).onIdChanged(any(AdvertisingId.class), any(AdvertisingId.class));
+        verify(initializationListener).onInitializationFinished();
+        AdvertisingId storedId = MoPubIdentifier.readIdFromStorage(context);
+        assertThat(adId1.equals(storedId)).isTrue();
+
+        reset(initializationListener);
+        reset(idChangeListener);
+
+        // call setAdvertisingInfo second time
+        subject.setAdvertisingInfo(adId2);
+
+        verify(idChangeListener).onIdChanged(adId1, adId2);
+        verify(initializationListener, never()).onInitializationFinished();
+        assertThat(adId2.equals(MoPubIdentifier.readIdFromStorage(context))).isTrue();
+    }
+
+    @Test
+    public void rotateMopubId_withExpiredOldId_shouldRotateMoPubId() {
+        subject = new MoPubIdentifier(context);
+        AdvertisingId originalId = AdvertisingId.generateExpiredAdvertisingId();
+        subject.setAdvertisingInfo(originalId);
+        subject.setIdChangeListener(idChangeListener);
+        ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+
+        subject.rotateMopubId();
+
+        verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
+        AdvertisingId oldId = oldIdClientCaptor.getValue();
+        AdvertisingId newId = newIdClientCaptor.getValue();
+        assertThat(newId.isRotationRequired()).isFalse();
+        assertThat(originalId.equals(oldId)).isTrue();
+    }
+
+    @Test
+    public void rotateMopubId_withNotExpiredOldId_shouldNotRotateMoPubId() {
+        subject = new MoPubIdentifier(context);
+        AdvertisingId oldId = AdvertisingId.generateFreshAdvertisingId();
+        subject.setAdvertisingInfo(oldId);
+        subject.setIdChangeListener(idChangeListener);
+
+        subject.rotateMopubId();
+
+        verify(idChangeListener, never()).onIdChanged(any(AdvertisingId.class), any(AdvertisingId.class));
+        AdvertisingId newId = subject.getAdvertisingInfo();
+        assertThat(newId.isRotationRequired()).isFalse();
+        assertThat(oldId.equals(newId)).isTrue();
+    }
+
+    @Test
+    public void refreshAdvertisingInfoBackgroundThread_withExpiredId_withGoogle_withNoAmazon_shouldRotateMoPubId() {
+        AdvertisingId expiredId = AdvertisingId.generateExpiredAdvertisingId();
+        subject = new MoPubIdentifier(context);
+        setupGooglePlayService(context, true);
+        ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        subject.setAdvertisingInfo(expiredId);
+        subject.setIdChangeListener(idChangeListener);
+
+        subject.refreshAdvertisingInfoBackgroundThread();
+
+        verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
+        AdvertisingId oldId = oldIdClientCaptor.getValue();
+        AdvertisingId newId = newIdClientCaptor.getValue();
+        assertThat(oldId.equals(expiredId)).isTrue();
+        assertThat(oldId.mMopubId.equals(newId.mMopubId)).isFalse(); // rotation
+        assertThat(newId.mAdvertisingId.equals(GOOGLE_AD_ID)).isTrue();
+        assertThat(newId.mDoNotTrack).isTrue();
+        assertThat(newId.isRotationRequired()).isFalse();
+    }
+
+    @Test
+    public void refreshAdvertisingInfoBackgroundThread_withExpiredId_withNoGoogle_withNoAmazon_shouldRotateMoPubId() {
+        AdvertisingId originalId = AdvertisingId.generateExpiredAdvertisingId();
+        subject = new MoPubIdentifier(context);
+        subject.setAdvertisingInfo(originalId);
+        subject.setIdChangeListener(idChangeListener);
+        ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+
+        subject.refreshAdvertisingInfoBackgroundThread();
+
+        verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
+        AdvertisingId oldId = oldIdClientCaptor.getValue();
+        AdvertisingId newId = newIdClientCaptor.getValue();
+        assertThat(newId.isRotationRequired()).isFalse();
+        assertThat(originalId.equals(oldId)).isTrue();
+    }
+
+    @Test
+    public void refreshAdvertisingInfoBackgroundThread_withNotExpiredId_withGoogle_withNoAmazon_shouldNotRotateMoPubId() {
+        AdvertisingId freshId = AdvertisingId.generateFreshAdvertisingId();
+        subject = new MoPubIdentifier(context);
+        setupGooglePlayService(context, true);
+        ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        subject.setAdvertisingInfo(freshId);
+        subject.setIdChangeListener(idChangeListener);
+
+        subject.refreshAdvertisingInfoBackgroundThread();
+
+        verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
+        AdvertisingId oldId = oldIdClientCaptor.getValue();
+        AdvertisingId newId = newIdClientCaptor.getValue();
+        assertThat(oldId.equals(freshId)).isTrue();
+        assertThat(oldId.mMopubId.equals(newId.mMopubId)).isTrue(); // no rotation
+        assertThat(newId.mAdvertisingId.equals(GOOGLE_AD_ID)).isTrue();
+        assertThat(newId.mDoNotTrack).isTrue();
+        assertThat(newId.isRotationRequired()).isFalse();
+    }
+
+    @Test
+    public void refreshAdvertisingInfoBackgroundThread_withExpiredId_withAmazon_withNoGoogle_shouldRotateMoPubId() {
+        AdvertisingId expiredId = AdvertisingId.generateExpiredAdvertisingId();
+        subject = new MoPubIdentifier(context);
+        setupAmazonAdvertisingInfo(true);
+        ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        subject.setAdvertisingInfo(expiredId);
+        subject.setIdChangeListener(idChangeListener);
+
+        subject.refreshAdvertisingInfoBackgroundThread();
+
+        verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
+        AdvertisingId oldId = oldIdClientCaptor.getValue();
+        AdvertisingId newId = newIdClientCaptor.getValue();
+        assertThat(oldId.equals(expiredId)).isTrue();
+        assertThat(oldId.mMopubId.equals(newId.mMopubId)).isFalse(); // rotation
+        assertThat(newId.mAdvertisingId.equals(AMAZON_AD_ID)).isTrue();
+        assertThat(newId.mDoNotTrack).isTrue();
+        assertThat(newId.isRotationRequired()).isFalse();
+    }
+
+    @Test
+    public void refreshAdvertisingInfoBackgroundThread_withNotExpiredId_withAmazon_withNoGoogle_shouldNotRotateMoPubId() {
+        AdvertisingId freshId = AdvertisingId.generateFreshAdvertisingId();
+        subject = new MoPubIdentifier(context);
+        setupAmazonAdvertisingInfo(true);
+        ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        subject.setAdvertisingInfo(freshId);
+        subject.setIdChangeListener(idChangeListener);
+
+        subject.refreshAdvertisingInfoBackgroundThread();
+
+        verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
+        AdvertisingId oldId = oldIdClientCaptor.getValue();
+        AdvertisingId newId = newIdClientCaptor.getValue();
+        assertThat(oldId.equals(freshId)).isTrue();
+        assertThat(oldId.mMopubId.equals(newId.mMopubId)).isTrue(); // no rotation
+        assertThat(newId.mAdvertisingId.equals(AMAZON_AD_ID)).isTrue();
+        assertThat(newId.mDoNotTrack).isTrue();
+        assertThat(newId.isRotationRequired()).isFalse();
+    }
+
+    // Unit tests utility functions
     public static void setupGooglePlayService(Context context, boolean limitAdTracking) {
         PowerMockito.mockStatic(GpsHelper.class);
         PowerMockito.when(GpsHelper.isPlayServicesAvailable(context)).thenReturn(true);
@@ -274,10 +458,12 @@ public static AdvertisingId writeAdvertisingInfoToSharedPreferences(Context cont
         final long time = Calendar.getInstance().getTimeInMillis();
         return writeAdvertisingInfoToSharedPreferences(context, doNotTrack, time);
     }
+
     private static AdvertisingId writeExpiredAdvertisingInfoToSharedPreferences(Context context, boolean doNotTrack) throws Exception {
-        final long time = Calendar.getInstance().getTimeInMillis()-AdvertisingId.ROTATION_TIME_MS;
+        final long time = Calendar.getInstance().getTimeInMillis() - AdvertisingId.ROTATION_TIME_MS;
         return writeAdvertisingInfoToSharedPreferences(context, doNotTrack, time);
     }
+
     private static AdvertisingId writeAdvertisingInfoToSharedPreferences(Context context, boolean doNotTrack, long time) throws Exception {
         AdvertisingId adConfig = new AdvertisingId(TEST_IFA_ID,
                 TEST_MOPUB_ID,
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
index 055bc8cc..26a4300f 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
@@ -98,7 +98,7 @@ public void checkNativeSdkActivitiesDeclared_shouldIncludeOneActivityDeclaration
     public void checSdkActivitiesDeclared_shouldIncludeOneActivityDeclaration() throws Exception {
         ShadowLog.setupLogging();
 
-        ManifestUtils.checkSdkActivitiesDeclared(context);
+        ManifestUtils.checkGdprActivitiesDeclared(context);
 
         assertLogIncludes("com.mopub.common.privacy.ConsentDialogActivity");
         assertLogDoesntInclude(
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
index a06edf16..13c6c4ae 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
@@ -307,6 +307,7 @@ public void onBannerLoaded_whenViewIsHtmlBannerWebView_withVisibilityImpressionT
         verify(moPubView).nativeAdLoaded();
         verify(moPubView).setAdContentView(eq(mockHtmlBannerWebView));
         verify(moPubView, never()).trackNativeImpression();
+        verify(moPubView).pauseAutorefresh();
     }
 
     @Test
@@ -328,6 +329,7 @@ public void onBannerLoaded_whenViewIsNotHtmlBannerWebView_withVisibilityImpressi
         verify(moPubView).nativeAdLoaded();
         verify(moPubView).setAdContentView(eq(view));
         verify(moPubView, never()).trackNativeImpression();
+        verify(moPubView).pauseAutorefresh();
     }
 
     @Test
@@ -345,27 +347,27 @@ public void onBannerFailed_whenErrorCodeIsNull_shouldPassUnspecifiedError() thro
     }
 
     @Test
-    public void onBannerExpanded_shouldPauseRefreshAndCallAdPresentOverlay() throws Exception {
+    public void onBannerExpanded_shouldPauseRefreshAndCallAdPresentOverlay_shouldCallExpand() throws Exception {
         subject.onBannerExpanded();
 
-        verify(moPubView).setAutorefreshEnabled(eq(false));
+        verify(moPubView).expand();
         verify(moPubView).adPresentedOverlay();
     }
 
     @Test
-    public void onBannerCollapsed_shouldRestoreRefreshSettingAndCallAdClosed() throws Exception {
+    public void onBannerCollapsed_shouldRestoreRefreshSettingAndCallAdClosed_shouldCallCollapse() throws Exception {
         when(moPubView.getAutorefreshEnabled()).thenReturn(true);
         subject.onBannerExpanded();
         reset(moPubView);
         subject.onBannerCollapsed();
-        verify(moPubView).setAutorefreshEnabled(eq(true));
+        verify(moPubView).collapse();
         verify(moPubView).adClosed();
 
         when(moPubView.getAutorefreshEnabled()).thenReturn(false);
         subject.onBannerExpanded();
         reset(moPubView);
         subject.onBannerCollapsed();
-        verify(moPubView).setAutorefreshEnabled(eq(false));
+        verify(moPubView).collapse();
         verify(moPubView).adClosed();
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
index 5109e309..b5621f87 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
@@ -1019,6 +1019,7 @@ private String generateMinimumUrlString() {
         private String abt = "";
         private String currentConsentStatus = "";
         private String gdprApplies = "0";
+        private String forceGdprApplies = "0";
         private String consentedPrivacyPolicyVersion = "";
         private String consentedVendorListVersion = "";
 
@@ -1054,6 +1055,7 @@ public String build() {
                     "&udid=" + PlayServicesUrlRewriter.UDID_TEMPLATE +
                     "&dnt=" + PlayServicesUrlRewriter.DO_NOT_TRACK_TEMPLATE +
                     paramIfNotEmpty("gdpr_applies", gdprApplies) +
+                    paramIfNotEmpty("force_gdpr_applies", forceGdprApplies) +
                     paramIfNotEmpty("current_consent_status", currentConsentStatus) +
                     paramIfNotEmpty("consented_privacy_policy_version", consentedPrivacyPolicyVersion) +
                     paramIfNotEmpty("consented_vendor_list_version", consentedVendorListVersion) +
diff --git a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
new file mode 100644
index 00000000..060fa2be
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
@@ -0,0 +1,15 @@
+package com.mopub.network;
+
+import com.mopub.volley.Cache;
+import com.mopub.volley.Network;
+
+public class MoPubRequestQueueTest {
+
+    public static class TestMoPubRequestQueue extends MoPubRequestQueue {
+
+        TestMoPubRequestQueue(Cache cache, Network network) {
+            super(cache, network);
+        }
+    }
+
+}
