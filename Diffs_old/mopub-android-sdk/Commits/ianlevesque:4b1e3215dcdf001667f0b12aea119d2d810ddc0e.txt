diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index 111b0af8..966ab84e 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -1,3 +1,12 @@
+buildscript {
+    repositories {
+        jcenter()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:1.1.3'
+    }
+}
+
 // This buildscript will assemble the MoPub SDK into an AAR.
 
 repositories {
@@ -51,8 +60,17 @@ dependencies {
     compile 'com.android.support:support-v4:19.1.+'
     compile 'com.android.support:support-annotations:20.0.0'
     compile 'com.mopub.volley:mopub-volley:1.1.0'
+    
+    compile files('libs/MMSDK-5.3.0.jar')
 }
 
+android {
+    lintOptions {
+        abortOnError false
+    }
+}
+
+
 // Don't run the Robolectric Unit Tests. They don't build properly in Gradle or Android Studio in this version.
 check.dependsOn.remove("test")
 check.dependsOn.remove("testDebug")
diff --git a/mopub-sdk/libs/MMSDK-5.3.0.jar b/mopub-sdk/libs/MMSDK-5.3.0.jar
new file mode 100644
index 00000000..f60fd4b9
Binary files /dev/null and b/mopub-sdk/libs/MMSDK-5.3.0.jar differ
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialBanner.java
new file mode 100644
index 00000000..442e9890
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialBanner.java
@@ -0,0 +1,123 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.location.Location;
+import android.util.Log;
+
+import com.millennialmedia.android.MMAd;
+import com.millennialmedia.android.MMAdView;
+import com.millennialmedia.android.MMException;
+import com.millennialmedia.android.MMRequest;
+import com.millennialmedia.android.MMSDK;
+import com.millennialmedia.android.RequestListener;
+
+import java.util.Map;
+
+/**
+ * Compatible with version 5.3.0 of the Millennial Media SDK.
+ */
+
+class MillennialBanner extends CustomEventBanner {
+    private MMAdView mMillennialAdView;
+    private CustomEventBannerListener mBannerListener;
+    public static final String APID_KEY = "adUnitID";
+    public static final String AD_WIDTH_KEY = "adWidth";
+    public static final String AD_HEIGHT_KEY = "adHeight";
+
+    @Override
+    protected void loadBanner(final Context context, final CustomEventBannerListener customEventBannerListener,
+                              final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
+        mBannerListener = customEventBannerListener;
+
+
+        final String apid;
+        final int width;
+        final int height;
+        if (extrasAreValid(serverExtras)) {
+            apid = serverExtras.get(APID_KEY);
+            width = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
+            height = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
+        } else {
+            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        MMSDK.initialize(context);
+
+        mMillennialAdView = new MMAdView(context);
+        mMillennialAdView.setListener(new MillennialBannerRequestListener());
+
+        mMillennialAdView.setApid(apid);
+        mMillennialAdView.setWidth(width);
+        mMillennialAdView.setHeight(height);
+
+        final Location location = (Location) localExtras.get("location");
+        if (location != null) {
+            MMRequest.setUserLocation(location);
+        }
+
+        mMillennialAdView.setMMRequest(new MMRequest());
+        mMillennialAdView.setId(MMSDK.getDefaultAdId());
+        AdViewController.setShouldHonorServerDimensions(mMillennialAdView);
+        mMillennialAdView.getAd();
+    }
+
+    @Override
+    protected void onInvalidate() {
+        // mMillennialAdView can be null if loadBanner terminated prematurely (i.e. the associated
+        // serverExtras are invalid).
+        if (mMillennialAdView != null) {
+            mMillennialAdView.setListener(null);
+        }
+    }
+
+    private boolean extrasAreValid(final Map<String, String> serverExtras) {
+        try {
+            Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
+            Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
+        } catch (NumberFormatException e) {
+            return false;
+        }
+
+        return serverExtras.containsKey(APID_KEY);
+    }
+
+    class MillennialBannerRequestListener implements RequestListener {
+        @Override
+        public void MMAdOverlayLaunched(final MMAd mmAd) {
+            Log.d("MoPub", "Millennial banner ad Launched.");
+            mBannerListener.onBannerExpanded();
+        }
+
+        @Override
+        public void MMAdOverlayClosed(final MMAd mmAd) {
+            Log.d("MoPub", "Millennial banner ad closed.");
+            mBannerListener.onBannerCollapsed();
+        }
+
+        @Override
+        public void MMAdRequestIsCaching(final MMAd mmAd) {}
+
+        @Override
+        public void requestCompleted(final MMAd mmAd) {
+            Log.d("MoPub", "Millennial banner ad loaded successfully. Showing ad...");
+            mBannerListener.onBannerLoaded(mMillennialAdView);
+        }
+
+        @Override
+        public void requestFailed(final MMAd mmAd, final MMException e) {
+            Log.d("MoPub", "Millennial banner ad failed to load.");
+            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        }
+
+        @Override
+        public void onSingleTap(final MMAd mmAd) {
+            mBannerListener.onBannerClicked();
+        }
+    }
+
+    @Deprecated
+    MMAdView getMMAdView() {
+        return mMillennialAdView;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialInterstitial.java
new file mode 100644
index 00000000..e0fcec9f
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialInterstitial.java
@@ -0,0 +1,121 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.location.Location;
+import android.util.Log;
+
+import com.millennialmedia.android.MMAd;
+import com.millennialmedia.android.MMException;
+import com.millennialmedia.android.MMInterstitial;
+import com.millennialmedia.android.MMRequest;
+import com.millennialmedia.android.MMSDK;
+import com.millennialmedia.android.RequestListener;
+
+import java.util.Map;
+
+/**
+ * Compatible with version 5.3.0 of the Millennial Media SDK.
+ */
+
+class MillennialInterstitial extends CustomEventInterstitial {
+    private MMInterstitial mMillennialInterstitial;
+    private CustomEventInterstitialListener mInterstitialListener;
+    public static final String APID_KEY = "adUnitID";
+
+    @Override
+    protected void loadInterstitial(final Context context, final CustomEventInterstitialListener customEventInterstitialListener,
+                                    final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
+        mInterstitialListener = customEventInterstitialListener;
+
+        final String apid;
+        if (extrasAreValid(serverExtras)) {
+            apid = serverExtras.get(APID_KEY);
+        } else {
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        MMSDK.initialize(context);
+
+        final Location location = (Location) localExtras.get("location");
+        if (location != null) {
+            MMRequest.setUserLocation(location);
+        }
+
+        mMillennialInterstitial = new MMInterstitial(context);
+        mMillennialInterstitial.setListener(new MillennialInterstitialRequestListener());
+        mMillennialInterstitial.setMMRequest(new MMRequest());
+        mMillennialInterstitial.setApid(apid);
+        mMillennialInterstitial.fetch();
+    }
+
+    @Override
+    protected void showInterstitial() {
+        if (mMillennialInterstitial.isAdAvailable()) {
+            mMillennialInterstitial.display();
+        } else {
+            Log.d("MoPub", "Tried to show a Millennial interstitial ad before it finished loading. Please try again.");
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        // mMillennialInterstitial can be null if loadInterstitial terminated prematurely (i.e.
+        // the associated serverExtras are invalid).
+        if (mMillennialInterstitial != null) {
+            mMillennialInterstitial.setListener(null);
+        }
+    }
+
+    private boolean extrasAreValid(Map<String, String> serverExtras) {
+        return serverExtras.containsKey(APID_KEY);
+    }
+
+    class MillennialInterstitialRequestListener implements RequestListener {
+        @Override
+        public void MMAdOverlayLaunched(final MMAd mmAd) {
+            Log.d("MoPub", "Showing Millennial interstitial ad.");
+            mInterstitialListener.onInterstitialShown();
+        }
+
+        @Override
+        public void MMAdOverlayClosed(final MMAd mmAd) {
+            Log.d("MoPub", "Millennial interstitial ad dismissed.");
+            mInterstitialListener.onInterstitialDismissed();
+        }
+
+        @Override public void MMAdRequestIsCaching(final MMAd mmAd) {}
+
+        @Override
+        public void requestCompleted(final MMAd mmAd) {
+            if (mMillennialInterstitial.isAdAvailable()) {
+                Log.d("MoPub", "Millennial interstitial ad loaded successfully.");
+                mInterstitialListener.onInterstitialLoaded();
+            } else {
+                Log.d("MoPub", "Millennial interstitial request completed, but no ad was available.");
+                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+            }
+        }
+
+        @Override
+        public void requestFailed(final MMAd mmAd, final MMException e) {
+            if (mMillennialInterstitial == null || e == null) {
+                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+            } else if (e.getCode() == MMException.CACHE_NOT_EMPTY && mMillennialInterstitial.isAdAvailable()) {
+                // requestFailed can be due to an ad already loaded or an ad failed to load.
+                Log.d("MoPub", "Millennial interstitial loaded successfully from cache.");
+                mInterstitialListener.onInterstitialLoaded();
+            } else {
+                Log.d("MoPub", "Millennial interstitial ad failed to load.");
+                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+            }
+        }
+
+        @Override
+        public void onSingleTap(final MMAd mmAd) {
+            Log.d("MoPub", "Millennial interstitial clicked.");
+            mInterstitialListener.onInterstitialClicked();
+        }
+
+    }
+}
