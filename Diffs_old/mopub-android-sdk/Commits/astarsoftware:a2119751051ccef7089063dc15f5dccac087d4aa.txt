diff --git a/.github/ISSUE_TEMPLATE.md b/.github/ISSUE_TEMPLATE.md
index 80426a58..71ff0501 100644
--- a/.github/ISSUE_TEMPLATE.md
+++ b/.github/ISSUE_TEMPLATE.md
@@ -7,6 +7,10 @@ One line summary of the issue here
 
 #### MoPub SDK Version:
 
+#### Android Studio Version:
+
+#### Gradle Version:
+
 #### Device model and OS Version:
 
 #### Ad Unit IDs used in reproducing the issue:
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 68b76eab..8362ab40 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,28 @@
+## Version 5.6.0 (March 18, 2019)
+- **Features**
+  - Enabled debug logging when using a debug Google Advertising ID (one that ends with "10ca1ad1abe1").
+  - Upgraded ExoPlayer dependency to 2.9.5.
+  - Upgraded MoPub-Volley dependency to 2.1.0.
+
+- **Bug Fixes**
+  - Banners no longer refresh when they are expanded. They will resume refreshing when the expanded view is closed.
+  - Setting orientation on an expanded banner no longer locks the orientation after the expanded view is closed.
+  - Improved click detection.
+  - Catch `MissingWebViewPackageException` in `ConsentDialogLayoutWebView`.
+  - Reduce ANRs by removing synchronization from `Networking#getUserAgent(Context)`.
+
+## Version 5.5.0 (January 28, 2019)
+- **Features**
+  - Advanced Bidding automatically initializes. See https://developers.mopub.com/docs/android/initialization/ for more information about initialization.
+  - GDPR legitimate interest API now available; publishers may opt into allowing supported networks to collect user information on the basis of legitimate interest.
+  - Improved logging from the SDK. Set the log level with `SdkConfiguration.Builder#withLogLevel(LogLevel)` in initialization to change the logging granularity.
+  - Upgraded Gradle dependency to 4.8
+  - Upgraded Android Plugin dependency to 3.2.0
+
+- **Bug Fixes**
+  - Addresses an ANR when requesting an ad immediately after initialization.
+  - MRAID isReady is now called after the load is finished instead of when the ad is shown.
+
 ## Version 5.4.1 (November 28, 2018)
 - **Bug Fixes**
   - Fixed bug with the internal state of rewarded video when the video fails to play.
@@ -260,11 +285,11 @@ If you would like to opt out of viewability measurement but do not want to modif
 
 ## Version 4.0.0 (October 6, 2015)
 
-Version 4.0.0 includes a number of improvements to our Native Ads systems under the hood. This means a few changes for publishers integrating the ads. The [Native Ads Integration Guide](https://github.com/mopub/mopub-android-sdk/wiki/Native-Ads-Integration) describes all the steps you'll need to integrate 4.0.0.
+Version 4.0.0 includes a number of improvements to our Native Ads systems under the hood. This means a few changes for publishers integrating the ads. The [Native Ads Integration Guide](https://developers.mopub.com/docs/android/native/) describes all the steps you'll need to integrate 4.0.0.
 
 **Native Ads Changes**
  - `MoPubNativeAdRenderer` has been replaced by `MoPubStaticNativeRenderer` 
- - When requesting ads using `MoPubNative`, you must instantiate and register a `MoPubStaticNativeAdRenderer`. See the [Integration Document](https://github.com/mopub/mopub-android-sdk/wiki/Manual-Integration-of-Native-Ads) for more details.
+ - When requesting ads using `MoPubNative`, you must instantiate and register a `MoPubStaticNativeAdRenderer`. See the [Integration Document](https://developers.mopub.com/docs/android/native/#method-3-manual-integration) for more details.
  - `NativeResponse` has been replaced with `NativeAd`
  - `NativeAd` has a new API that supports creating and rendering `View`s for Native Ads.
    - `#createAdView` returns a `View` that can hold data for the `NativeAd`
@@ -305,7 +330,7 @@ Version 4.0.0 includes a number of improvements to our Native Ads systems under
 
 - Added **VAST 3.0** standard support for video ads.
 - Improved **video player UX**.
-- Added **RecyclerView** support for native ads. See the [integration guide](https://github.com/mopub/mopub-android-sdk/wiki/Native-Ads-with-Recycler-View).
+- Added **RecyclerView** support for native ads. See the [integration guide](https://developers.mopub.com/docs/android/native/).
 - Improved **deep link** handling.
 - Bug Fixes:
   - MRAID video interstitials now play automatically when displayed on Jellybean MR1 and newer.
@@ -347,7 +372,7 @@ Version 4.0.0 includes a number of improvements to our Native Ads systems under
 
 ## Version 3.5.0 (March 10, 2015)
 
- - Dependency changes in Maven and Gradle. No new dependencies have been added, but your build script will need to change slightly to include JCenter. See our [Getting Started Guide](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started#adding-the-support-libraries-to-your-project) for complete instructions.
+ - Dependency changes in Maven and Gradle. No new dependencies have been added, but your build script will need to change slightly to include JCenter. See our [Getting Started Guide](https://developers.mopub.com/docs/android/getting-started/) for complete instructions.
  - Security Improvement: removed the @JavascriptInterface annotation for WebViews.
  - Fixed a bug where video playback would sometimes fail to stop when an ad was dismissed.
  - Fixed a bug where it was not possible to disable ad refresh; Fixes [issue #148](https://github.com/mopub/mopub-android-sdk/issues/148)
@@ -355,7 +380,7 @@ Version 4.0.0 includes a number of improvements to our Native Ads systems under
 
 ## Version 3.4.0 (January 30, 2015)
 
-  - **Volley networking stack** MoPub for Android now uses Google's Volley library for HTTP requests. You will need to add our bundled Volley JAR (available at `mopub-sdk/libs/mopub-volley-1.0.0.jar`) as a compile-time dependency. See instructions in our [integration page](https://dev.twitter.com/mopub/android/getting-started).
+  - **Volley networking stack** MoPub for Android now uses Google's Volley library for HTTP requests. You will need to add our bundled Volley JAR (available at `mopub-sdk/libs/mopub-volley-1.0.0.jar`) as a compile-time dependency. See instructions in our [integration page](https://developers.mopub.com/docs/android/getting-started/).
   - **Updated Vungle Support** Certified the `VungleInterstitial` custom event against Vungle SDK 3.2.2
   - **VAST Video Bug Fixes**
     - Fixed inability to parse VAST tags referencing URLs that contain 3rd party macros
@@ -364,7 +389,7 @@ Version 4.0.0 includes a number of improvements to our Native Ads systems under
 
 ## Version 3.3.0 (December 8, 2014)
 
-  - **MRAID 2.0 Support** - The MoPub SDK is now compliant with the MRAID 2.0 specification to enable rich media ads in banners and interstitial ad units. Learn more about MRAID from the [IAB](http://www.iab.net/MRAID#MRAID).
+  - **MRAID 2.0 Support** - The MoPub SDK is now compliant with the MRAID 2.0 specification to enable rich media ads in banners and interstitial ad units. Learn more about MRAID from the [IAB](https://www.iab.com/guidelines/mobile-rich-media-ad-interface-definitions-mraid/).
   - **Location Polling Updates** - Changed the interaction between application- and device-provided location data: more recent location data is now always used (in the past, application-provided location data was always preferred).
 
     As before, you may still disable MoPub SDK's location polling by calling `MoPub.setLocationAwareness(LocationAwareness.DISABLED)`.
@@ -413,7 +438,7 @@ Version 4.0.0 includes a number of improvements to our Native Ads systems under
 ## Version 2.4.0 (August 28, 2014)
 
   - **Minimum Android version now at API Level 9.** To use the new SDK, your app must run on Android 2.3.1 (Version 9, Gingerbread) or higher.
-  - **Simplified APIs for inserting native ads.** See [Native Ads Integration](https://github.com/mopub/mopub-android-sdk/wiki/Native-Ads-Integration) for details.
+  - **Simplified APIs for inserting native ads.** See [Native Ads Integration](https://developers.mopub.com/docs/android/native/) for details.
   - **Automatic ad caching for smooth scrolling.** For native ads, the SDK will now automatically pre-load ads, resulting in smoother scrolling.
   - **Performance improvements** The SDK now makes more efficient use of memory for image caching and avoids allocating temporary objects while scrolling, resulting in fewer garbage collections.
   - **Sample app improvements.** An improved sample app allows saving ad unit IDs for testing.
@@ -423,7 +448,7 @@ Version 4.0.0 includes a number of improvements to our Native Ads systems under
 ## Version 2.3 (July 17, 2014)
 
   - **Improved impression tracking for Native Ads** Impression tracking for native ads is now more accurate and more efficient.
-  - **Streamlined Maven Build and Dependencies** MoPub's Android SDK now depends on the Android v4 Support Library shipped with the Android Build tools. The MoPub Sample App also depends on Google Play Services to use the Android Advertising ID. We recommend building against Play Services in your app as well. For integration instructions, see the [wiki](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started).
+  - **Streamlined Maven Build and Dependencies** MoPub's Android SDK now depends on the Android v4 Support Library shipped with the Android Build tools. The MoPub Sample App also depends on Google Play Services to use the Android Advertising ID. We recommend building against Play Services in your app as well. For integration instructions, see the [getting started page](https://developers.mopub.com/docs/android/getting-started/).
   - **Removed AdMob Custom Events and JAR** AdMob's SDK is deprecated by Google and the APIs have been moved to Google Play Services. Existing AdMob adunits will now invoke the appropriate Google Play Services custom event. Developers must update their integration to use the Google Play Services custom events located in the extras folder by August 1.
   - **Updated Third-Party Network Compatibility** MoPub's provided Custom Events (included in the extras/ folder) are now compatible with the latest SDK releases from Millennial Media (5.3.0), Vungle (3.1.0), InMobi (4.4.1) and Google Play Services (5.0.77).
   - Fixed intermittent NullPointerException in MoPubNative#requestNativeAd; fixes [Github issue #97] (https://github.com/mopub/mopub-android-sdk/issues/97)
@@ -431,7 +456,7 @@ Version 4.0.0 includes a number of improvements to our Native Ads systems under
 
 ## Version 2.2 (June 19, 2014)
 
-  - **Native ads mediation** release; integration instructions and documentation are available on the [GitHub wiki](https://github.com/mopub/mopub-android-sdk/wiki/Integrating-Native-Third-Party-Ad-Networks). Added custom event native implementations to the native extras directory of the SDK (`/extras/src/com/mopub/nativeads`), with initial support for the following networks:
+  - **Native ads mediation** release; integration instructions and documentation are available on our [help page](https://developers.mopub.com/docs/android/integrating-networks/). Added custom event native implementations to the native extras directory of the SDK (`/extras/src/com/mopub/nativeads`), with initial support for the following networks:
   	- Facebook Audience Network (`FacebookNative.java`)
   	- InMobi Native Ads (`InMobiNative.java`)
   - **Native ads content filtering**: Added the ability to specify which native ad elements you want to receive from the MoPub Marketplace to optimize bandwidth use and download only required assets, via `RequestParameters.Builder#desiredAssets(…)`. This feature only works for the six standard Marketplace assets, found in `RequestParameters.NativeAdAsset`. Any additional elements added in direct sold ads will always be sent down in the extras.
@@ -441,7 +466,7 @@ Version 4.0.0 includes a number of improvements to our Native Ads systems under
 
 ## Version 2.1 (May 15, 2014)
 
-  - Added custom events for Facebook ads. `FacebookBanner` and `FacebookInterstitial` can be found in the extras directory of the SDK (`/extras/src/com/mopub/mobileads`). For more information, please see the [help page for Facebook custom events](http://help.mopub.com/customer/portal/articles/1552301-how-to-integrate-facebook-audience-network-using-custom-events).
+  - Added custom events for Facebook ads. `FacebookBanner` and `FacebookInterstitial` can be found in the extras directory of the SDK (`/extras/src/com/mopub/mobileads`). For more information, please see the [help page for integrating third party ad networks](https://developers.mopub.com/docs/android/integrating-networks/).
   - Significant improvements to video ads
     - Added overlay including a "Learn More" button, video length, and time left until the video may be skipped
     - Added support for companion banners (shown upon video completion)
@@ -454,7 +479,7 @@ Version 4.0.0 includes a number of improvements to our Native Ads systems under
 
 ## Version 2.0 (April 22, 2014)
 
-  - **Native Ads** public release; integration instructions and documentation available on the [GitHub wiki](https://github.com/mopub/mopub-android-sdk/wiki/Native-Ads-Integration)
+  - **Native Ads** public release; integration instructions and documentation available on our [support website](https://developers.mopub.com/docs/android/native/)
   - Changed minimum supported Android version to Froyo (Android 2.2, API level 8)
   - Added support for Google Play Services advertising identifier
   - Renamed the `com.mopub.mobileads.MraidBrowser` Activity to `com.mopub.common.MoPubBrowser`.
@@ -561,7 +586,7 @@ Version 4.0.0 includes a number of improvements to our Native Ads systems under
 
 ## Version 1.15 (August 21, 2013)
 
-Includes support for ads in the MRAID 2.0 format. MRAID 2.0 allows advertisers to create ads with rich media functionality, including adding calendar events, storing pictures and playing videos in the native video player. To learn more about MRAID 2.0, read our [help article](http://j.mp/16MKSci).
+Includes support for ads in the MRAID 2.0 format. MRAID 2.0 allows advertisers to create ads with rich media functionality, including adding calendar events, storing pictures and playing videos in the native video player. To learn more about MRAID 2.0, read our [help article](https://developers.mopub.com/docs/ad-formats/mraid/).
 
   - Added the following MRAID 2.0 features: `createCalendarEvent` (Android 4.0 and above), `playVideo`, `storePicture`, and `supports`
   - Hardware Acceleration is now enabled by default for `MraidInterstitial`s on Android 4.0 and above
diff --git a/README.md b/README.md
index ec660255..bb26a9c4 100644
--- a/README.md
+++ b/README.md
@@ -8,9 +8,7 @@ Sign up for an account at [http://app.mopub.com/](http://app.mopub.com/).
 
 You can find integration documentation on our [wiki](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started) and additional help documentation on our [developer help site](http://dev.twitter.com/mopub).
 
-To file an issue with our team visit the [MoPub Forum](https://twittercommunity.com/c/fabric/mopub) or email [support@mopub.com](mailto:support@mopub.com).
-
-**Please Note: We no longer accept GitHub Issues.**
+To file an issue with our team visit the [MoPub Forum](https://twittercommunity.com/c/advertiser-api/mopub) or email [support@mopub.com](mailto:support@mopub.com).
 
 ## New Pull Requests?
 
@@ -39,7 +37,7 @@ The MoPub SDK is available via:
     }
 
     dependencies {
-        implementation('com.mopub:mopub-sdk:5.4.1@aar') {
+        implementation('com.mopub:mopub-sdk:5.6.0@aar') {
             transitive = true
         }
     }
@@ -61,27 +59,27 @@ The MoPub SDK is available via:
         // ... other project dependencies
 
         // For banners
-        implementation('com.mopub:mopub-sdk-banner:5.4.1@aar') {
+        implementation('com.mopub:mopub-sdk-banner:5.6.0@aar') {
             transitive = true
         }
         
         // For interstitials
-        implementation('com.mopub:mopub-sdk-interstitial:5.4.1@aar') {
+        implementation('com.mopub:mopub-sdk-interstitial:5.6.0@aar') {
             transitive = true
         }
 
         // For rewarded videos. This will automatically also include interstitials
-        implementation('com.mopub:mopub-sdk-rewardedvideo:5.4.1@aar') {
+        implementation('com.mopub:mopub-sdk-rewardedvideo:5.6.0@aar') {
             transitive = true
         }
 
         // For native static (images).
-        implementation('com.mopub:mopub-sdk-native-static:5.4.1@aar') {
+        implementation('com.mopub:mopub-sdk-native-static:5.6.0@aar') {
             transitive = true
         }
 
         // For native video. This will automatically also include native static
-        implementation('com.mopub:mopub-sdk-native-video:5.4.1@aar') {
+        implementation('com.mopub:mopub-sdk-native-video:5.6.0@aar') {
             transitive = true
         }
     }
@@ -91,7 +89,7 @@ The MoPub SDK is available via:
 
 2. **Zipped Source**
 
-    The MoPub SDK is also distributed as zipped source code that you can include in your application.  MoPub provides two prepackaged archives of source code:
+    The MoPub SDK is also distributed as zipped source code that you can include in your application:
 
     **[MoPub Android SDK.zip](http://bit.ly/YUdWhH)**  
     _Includes everything you need to serve MoPub ads.  No third party ad networks are included._
@@ -109,14 +107,17 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
+- **Features**
+  - Enabled debug logging when using a debug Google Advertising ID (one that ends with "10ca1ad1abe1").
+  - Upgraded ExoPlayer dependency to 2.9.5.
+  - Upgraded MoPub-Volley dependency to 2.1.0.
+
 - **Bug Fixes**
-  - Fixed bug with the internal state of rewarded video when the video fails to play.
-  - Fixed bug where initialization complete is called multiple times.
-  - Fixed Google Advertising ID fetching logic.
-  - Marked `gdprApplies` as nullable
-  - Added cleartextTrafficPermitted="true" to Android Sample App.
-  - Fixed bug where `rewardedAdsLoaders.markPlayed()` was fired before `onRewardedVideoClosed()`.
-  - Added `adDidFail` callback to `!isNetworkAvailable()` in `AdViewController`.
+  - Banners no longer refresh when they are expanded. They will resume refreshing when the expanded view is closed.
+  - Setting orientation on an expanded banner no longer locks the orientation after the expanded view is closed.
+  - Improved click detection.           
+  - Catch `MissingWebViewPackageException` in `ConsentDialogLayoutWebView`.
+  - Reduce ANRs by removing synchronization from `Networking#getUserAgent(Context)`.
 
 ## Requirements
 
@@ -124,14 +125,14 @@ Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/mast
 - android-support-v4.jar, r28 (**Updated in 5.4.0**)
 - android-support-annotations.jar, r28 (**Updated in 5.4.0**)
 - android-support-v7-recyclerview.jar, r28 (**Updated in 5.4.0**)
-- MoPub Volley Library (mopub-volley-2.0.0.jar - available on JCenter) (**Updated in 5.0.0**)
-- **Recommended** Google Play Services 15.0.1
+- MoPub Volley Library (mopub-volley-2.1.0.jar - available on JCenter) (**Updated in 5.6.0**)
+- **Recommended** Google Play Services (com.google.android.gms:play-services-ads-identifier:16.0.0 and com.google.android.gms:play-services-base:16.0.1) (**Updated in 5.6.0**)
 
 ## Upgrading to SDK 5.0
 
 Please see the [Getting Started Guide](https://developers.mopub.com/docs/android/getting-started/) for instructions on upgrading from SDK 4.X to SDK 5.0.
 
-For GDPR-specific upgrading instructions, also see the [GDPR Integration Guide](https://developers.mopub.com/docs/publisher/gdpr).
+For GDPR-specific upgrading instructions, also see the [GDPR Integration Guide](https://developers.mopub.com/docs/publisher/gdpr-guide).
 
 ## <a name="upgradeRepositoryViewability"></a>Upgrading from 4.15.0 and Prior
 In 4.16.0, dependencies were added to viewability libraries provided by AVID and Moat. Apps upgrading from previous versions must add
@@ -145,7 +146,7 @@ Normally, to add the MoPub SDK to your app via JCenter, your `build.gradle` woul
 
 ```	
 dependencies {
-    implementation('com.mopub:mopub-sdk:5.4.1@aar') {
+    implementation('com.mopub:mopub-sdk:5.6.0@aar') {
         transitive = true
     }
 }
@@ -154,7 +155,7 @@ Update to the following to exclude one or both viewability vendors:
 
 ```
 dependencies {
-    implementation('com.mopub:mopub-sdk:5.4.1@aar') {
+    implementation('com.mopub:mopub-sdk:5.6.0@aar') {
         transitive = true
         exclude module: 'libAvid-mopub' // To exclude AVID
         exclude module: 'moat-mobile-app-kit' // To exclude Moat
diff --git a/build.gradle b/build.gradle
index 62b5a4f8..9e7f4426 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -9,11 +9,11 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:3.2.1'
-        classpath 'com.novoda:bintray-release:0.8.0'
+        classpath 'com.android.tools.build:gradle:3.3.0'
+        classpath 'com.novoda:bintray-release:0.9'
     }
 }
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '4.6'
+    gradleVersion = '4.10.1'
 }
diff --git a/gradle.properties b/gradle.properties
index 704dac86..4cc95e10 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,4 +1,4 @@
-# Copyright 2018 Twitter, Inc.
+# Copyright 2018-2019 Twitter, Inc.
 # Licensed under the MoPub SDK License Agreement
 # http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index a6f3ae3c..0b6a1e6b 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,10 +1,6 @@
-# Copyright 2018 Twitter, Inc.
-# Licensed under the MoPub SDK License Agreement
-# http://www.mopub.com/legal/sdk-license-agreement/
-
-#Thu Jul 12 13:45:05 PDT 2018
+#Mon Jan 28 14:39:41 PST 2019
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.4-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.1-all.zip
diff --git a/gradlew.bat b/gradlew.bat
index 370f2fcb..41a6cb9e 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -1,4 +1,4 @@
-@rem Copyright 2018 Twitter, Inc.
+@rem Copyright 2018-2019 Twitter, Inc.
 @rem Licensed under the MoPub SDK License Agreement
 @rem http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index d67cfd2c..3608f60f 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="65"
-      android:versionName="5.4.1">
+      android:versionCode="67"
+      android:versionName="5.6.0">
 
     <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
@@ -15,9 +15,11 @@
         android:icon="@drawable/icon"
         android:label="@string/app_name"
         android:networkSecurityConfig="@xml/network_security_config"
-        android:supportsRtl="true">
+        android:supportsRtl="true"
+        android:theme="@style/AppTheme">
 	    <activity android:name="com.mopub.simpleadsdemo.MoPubSampleActivity"
 	            android:label="@string/app_name"
+                android:theme="@style/AppTheme.NoActionBar"
                 android:launchMode="singleTask"
                 android:configChanges="orientation|screenSize">
 	        <intent-filter>
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index 1ad8bcf7..c85fa548 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -15,28 +15,35 @@ apply plugin: 'com.android.application'
 
 project.group = 'com.mopub'
 project.description = '''MoPub Sample App'''
-project.version = '5.4.1'
+project.version = '5.6.0'
 
 android {
     compileSdkVersion 28
     lintOptions { abortOnError false }
 
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_7
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
+
     defaultConfig {
-        versionCode 65
+        versionCode 67
         versionName version
         minSdkVersion 16
         targetSdkVersion 28
+
+        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
     }
 
     buildTypes {
-      release {
-        minifyEnabled true
-        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
-      }
-      debug {
-        minifyEnabled false
-        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
-      }
+        release {
+            minifyEnabled true
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
+        }
+        debug {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
+        }
     }
 
     sourceSets {
@@ -49,8 +56,6 @@ android {
             res.srcDirs = ['res']
             assets.srcDirs = ['assets']
         }
-
-        androidTest.setRoot('src/test')
     }
 
     // Note: You will also need a local.properties file to set the location of the SDK in the same 
@@ -62,8 +67,16 @@ android {
 dependencies {
     implementation 'com.android.support:customtabs:28.0.0'
     implementation 'com.android.support:support-v4:28.0.0'
-    implementation 'com.google.android.gms:play-services-ads-identifier:15.0.1'
-    implementation 'com.google.android.gms:play-services-base:15.0.1'
+    implementation 'com.android.support:design:28.0.0'
     implementation 'com.android.support:recyclerview-v7:28.0.0'
+    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
+    implementation 'com.google.android.gms:play-services-ads-identifier:16.0.0'
+    implementation 'com.google.android.gms:play-services-base:16.0.1'
     implementation project(':mopub-sdk')
+
+    // Instrumentation testing-only dependencies
+    androidTestImplementation 'com.android.support.test:runner:1.0.2'
+    androidTestImplementation 'com.android.support.test:rules:1.0.2'
+    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
+    androidTestImplementation 'com.android.support.test.espresso:espresso-intents:3.0.2'
 }
diff --git a/mopub-sample/project.properties b/mopub-sample/project.properties
index 89566a2b..d76041dc 100644
--- a/mopub-sample/project.properties
+++ b/mopub-sample/project.properties
@@ -1,4 +1,4 @@
-# Copyright 2018 Twitter, Inc.
+# Copyright 2018-2019 Twitter, Inc.
 # Licensed under the MoPub SDK License Agreement
 # http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sample/res/drawable/mopub.png b/mopub-sample/res/drawable/mopub.png
new file mode 100644
index 00000000..c85cab32
Binary files /dev/null and b/mopub-sample/res/drawable/mopub.png differ
diff --git a/mopub-sample/res/drawable/side_nav_bar.xml b/mopub-sample/res/drawable/side_nav_bar.xml
new file mode 100644
index 00000000..8ef428d1
--- /dev/null
+++ b/mopub-sample/res/drawable/side_nav_bar.xml
@@ -0,0 +1,9 @@
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+    <gradient
+        android:angle="135"
+        android:centerColor="#009688"
+        android:endColor="#00695C"
+        android:startColor="#4DB6AC"
+        android:type="linear" />
+</shape>
diff --git a/mopub-sample/res/layout/activity_main.xml b/mopub-sample/res/layout/activity_main.xml
new file mode 100644
index 00000000..6d0e6526
--- /dev/null
+++ b/mopub-sample/res/layout/activity_main.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.v4.widget.DrawerLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/drawer_layout"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:fitsSystemWindows="true"
+    tools:openDrawer="start"
+    android:contentDescription="@string/app_name">
+
+    <include
+        layout="@layout/app_bar_main"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+
+    <android.support.design.widget.NavigationView
+        android:id="@+id/nav_view"
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent"
+        android:layout_gravity="start"
+        android:fitsSystemWindows="true"
+        app:headerLayout="@layout/nav_header_main"
+        app:menu="@menu/activity_main_drawer" />
+
+</android.support.v4.widget.DrawerLayout>
diff --git a/mopub-sample/res/layout/ad_unit_list_fragment.xml b/mopub-sample/res/layout/ad_unit_list_fragment.xml
index 3abcabbe..05097259 100644
--- a/mopub-sample/res/layout/ad_unit_list_fragment.xml
+++ b/mopub-sample/res/layout/ad_unit_list_fragment.xml
@@ -1,29 +1,49 @@
 <?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:orientation="vertical"
-    android:paddingBottom="15dp"
+    android:paddingBottom="8dp"
     android:textDirection="locale">
 
     <ListView
         android:id="@android:id/list"
         android:layout_width="match_parent"
-        android:layout_height="0dp"
-        android:layout_marginBottom="10dp"
-        android:layout_weight="1" />
+        android:layout_height="match_parent"
+        android:layout_above="@id/status_change_notification"
+        android:layout_marginBottom="10dp" />
+
+    <EditText
+        android:id="@+id/status_change_notification"
+        style="@android:style/TextAppearance.DeviceDefault.Small.Inverse"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_above="@id/add_ad_unit_button"
+        android:autofillHints="@string/consent_change_status"
+        android:background="@android:color/background_dark"
+        android:focusable="false"
+        android:gravity="center_horizontal"
+        android:hint="@string/consent_change_status"
+        android:inputType="none"
+        android:lines="1"
+        android:maxLines="1"
+        android:visibility="gone"
+        tools:ignore="UnusedAttribute" />
 
     <Button
         android:id="@+id/add_ad_unit_button"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_gravity="center_horizontal"
+        android:layout_above="@id/version_code"
+        android:layout_centerHorizontal="true"
         android:text="@string/add_ad_unit_button" />
 
     <TextView
         android:id="@+id/version_code"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_gravity="center_horizontal"
+        android:layout_alignParentBottom="true"
+        android:layout_centerHorizontal="true"
         android:textSize="@dimen/detail_text_size" />
-</LinearLayout>
+</RelativeLayout>
diff --git a/mopub-sample/res/layout/app_bar_main.xml b/mopub-sample/res/layout/app_bar_main.xml
new file mode 100644
index 00000000..7f23a338
--- /dev/null
+++ b/mopub-sample/res/layout/app_bar_main.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".MoPubSampleActivity">
+
+    <android.support.design.widget.AppBarLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:theme="@style/AppTheme.AppBarOverlay">
+
+        <android.support.v7.widget.Toolbar
+            android:id="@+id/toolbar"
+            android:layout_width="match_parent"
+            android:layout_height="?attr/actionBarSize"
+            android:background="?attr/colorPrimary"
+            app:popupTheme="@style/AppTheme.PopupOverlay" />
+
+    </android.support.design.widget.AppBarLayout>
+
+    <include layout="@layout/main" />
+
+</android.support.design.widget.CoordinatorLayout>
diff --git a/mopub-sample/res/layout/main.xml b/mopub-sample/res/layout/main.xml
index 620cb5e2..7d499df4 100644
--- a/mopub-sample/res/layout/main.xml
+++ b/mopub-sample/res/layout/main.xml
@@ -2,4 +2,5 @@
 <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:id="@+id/fragment_container"
     android:layout_width="match_parent"
-    android:layout_height="match_parent"></FrameLayout>
+    android:layout_height="match_parent"
+    android:layout_marginTop="?attr/actionBarSize"></FrameLayout>
diff --git a/mopub-sample/res/layout/nav_header_main.xml b/mopub-sample/res/layout/nav_header_main.xml
new file mode 100644
index 00000000..2269c832
--- /dev/null
+++ b/mopub-sample/res/layout/nav_header_main.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="@dimen/nav_header_height"
+    android:background="@drawable/side_nav_bar"
+    android:gravity="bottom"
+    android:orientation="vertical"
+    android:theme="@style/ThemeOverlay.AppCompat.Dark">
+
+    <ImageView
+        android:id="@+id/image_mopub_logo"
+        android:layout_width="wrap_content"
+        android:layout_height="70dp"
+        android:layout_marginBottom="@dimen/nav_header_vertical_spacing"
+        android:scaleType="centerInside"
+        app:srcCompat="@drawable/mopub"
+        android:contentDescription="@string/mopub_logo_descr" />
+
+    <TextView
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:text="@string/nav_header_title"
+        android:layout_marginBottom="@dimen/nav_header_vertical_spacing"
+        android:textAppearance="@style/TextAppearance.AppCompat.Body1" />
+
+</LinearLayout>
diff --git a/mopub-sample/res/layout/networks_info_fragment.xml b/mopub-sample/res/layout/networks_info_fragment.xml
new file mode 100644
index 00000000..408aa4a6
--- /dev/null
+++ b/mopub-sample/res/layout/networks_info_fragment.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/infoFrarmentId"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <TextView
+        android:id="@+id/text_no_adapters"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/no_network_adapters_found"
+        android:textSize="@dimen/sample_text_size"
+        app:layout_constraintBottom_toTopOf="@id/privacy_close_btn"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+    <android.support.v7.widget.RecyclerView
+        android:id="@+id/networks_recycler_view"
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        app:layout_constraintBottom_toTopOf="@+id/networks_close_btn"
+        app:layout_constraintTop_toTopOf="parent"
+        tools:listitem="@android:layout/simple_selectable_list_item" />
+
+    <Button
+        android:id="@+id/networks_close_btn"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/close"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="@id/networks_recycler_view"
+        app:layout_constraintStart_toStartOf="@+id/networks_recycler_view" />
+</android.support.constraint.ConstraintLayout>
diff --git a/mopub-sample/res/layout/privacy_info_divider.xml b/mopub-sample/res/layout/privacy_info_divider.xml
new file mode 100644
index 00000000..4db5df38
--- /dev/null
+++ b/mopub-sample/res/layout/privacy_info_divider.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:background="@color/colorLightGreay">
+
+    <TextView
+        android:id="@+id/text_divider"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="16dp"
+        android:layout_marginLeft="16dp"
+        android:layout_marginTop="16dp"
+        android:layout_marginBottom="8dp"
+        android:fontFamily="sans-serif-medium"
+        android:textAllCaps="true"
+        android:textSize="15sp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        tools:text="@tools:sample/full_names" />
+
+</android.support.constraint.ConstraintLayout>
diff --git a/mopub-sample/res/layout/privacy_info_fragment.xml b/mopub-sample/res/layout/privacy_info_fragment.xml
new file mode 100644
index 00000000..ea9b5cd9
--- /dev/null
+++ b/mopub-sample/res/layout/privacy_info_fragment.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/privacyFrarmentId"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <android.support.v7.widget.RecyclerView
+        android:id="@+id/privacy_recycler_view"
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        app:layout_constraintBottom_toTopOf="@+id/privacy_close_btn"
+        app:layout_constraintTop_toTopOf="parent"
+        tools:listitem="@layout/privacy_info_item" />
+
+    <Button
+        android:id="@+id/privacy_close_btn"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/close"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="@id/privacy_recycler_view"
+        app:layout_constraintStart_toStartOf="@+id/privacy_recycler_view" />
+</android.support.constraint.ConstraintLayout>
diff --git a/mopub-sample/res/layout/privacy_info_item.xml b/mopub-sample/res/layout/privacy_info_item.xml
new file mode 100644
index 00000000..94d3c3e5
--- /dev/null
+++ b/mopub-sample/res/layout/privacy_info_item.xml
@@ -0,0 +1,43 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:padding="8dp">
+
+    <TextView
+        android:id="@+id/privacy_title_view"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="4dp"
+        android:textColor="@color/textDark"
+        android:textSize="16sp"
+        app:layout_constraintBottom_toTopOf="@+id/privacy_desc_view"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        tools:text="@tools:sample/full_names" />
+
+    <TextView
+        android:id="@+id/privacy_desc_view"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="4dp"
+        android:layout_marginLeft="4dp"
+        android:layout_marginBottom="4dp"
+        android:textColor="@color/textDark"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/privacy_title_view"
+        tools:text="@tools:sample/lorem[4:10]" />
+
+    <TextView
+        android:id="@+id/privacy_value_view"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="8dp"
+        android:textColor="@color/textDark"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        tools:text="@tools:sample/date/hhmm" />
+</android.support.constraint.ConstraintLayout>
diff --git a/mopub-sample/res/menu/activity_main_drawer.xml b/mopub-sample/res/menu/activity_main_drawer.xml
new file mode 100644
index 00000000..32f2cbe2
--- /dev/null
+++ b/mopub-sample/res/menu/activity_main_drawer.xml
@@ -0,0 +1,58 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    tools:showIn="navigation_view">
+
+    <item android:title="@string/api_endpoint">
+        <menu>
+            <group android:checkableBehavior="single">
+                <item
+                    android:id="@+id/nav_production"
+                    android:checkable="true"
+                    android:icon="@drawable/ic_menu_slideshow"
+                    android:title="@string/production" />
+                <item
+                    android:id="@+id/nav_staging"
+                    android:checkable="true"
+                    android:icon="@drawable/ic_menu_manage"
+                    android:title="@string/staging" />
+            </group>
+        </menu>
+    </item>
+
+    <item android:title="@string/privacy">
+        <menu>
+            <item
+                android:id="@+id/nav_privacy_info"
+                android:icon="@drawable/ic_menu_adapters"
+                android:title="@string/information" />
+            <group android:checkableBehavior="single">
+                <item
+                    android:id="@+id/nav_privacy_grant"
+                    android:checkable="true"
+                    android:icon="@drawable/ic_menu_lock"
+                    android:title="@string/grant_consent" />
+                <item
+                    android:id="@+id/nav_privacy_revoke"
+                    android:checkable="true"
+                    android:icon="@drawable/ic_menu_unlock"
+                    android:title="@string/revoke_consent" />
+            </group>
+            <item
+                android:id="@+id/nav_force_gdpr"
+                android:checkable="true"
+                android:icon="@drawable/ic_menu_info"
+                android:title="@string/force_gdpr_applicable" />
+        </menu>
+    </item>
+
+    <item android:title="@string/info">
+        <menu>
+            <item
+                android:id="@+id/nav_adapters_info"
+                android:icon="@drawable/ic_menu_adapters"
+                android:title="@string/network_adapters" />
+        </menu>
+    </item>
+
+</menu>
diff --git a/mopub-sample/res/menu/main.xml b/mopub-sample/res/menu/main.xml
new file mode 100644
index 00000000..a2411e31
--- /dev/null
+++ b/mopub-sample/res/menu/main.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+    <item
+        android:id="@+id/action_settings"
+        android:orderInCategory="100"
+        android:title="@string/action_settings"
+        app:showAsAction="never" />
+</menu>
diff --git a/mopub-sample/res/values-v21/styles.xml b/mopub-sample/res/values-v21/styles.xml
new file mode 100644
index 00000000..fd7a0584
--- /dev/null
+++ b/mopub-sample/res/values-v21/styles.xml
@@ -0,0 +1,8 @@
+<resources>
+
+    <style name="AppTheme.NoActionBar">
+        <item name="windowActionBar">false</item>
+        <item name="windowNoTitle">true</item>
+        <item name="android:statusBarColor">@android:color/transparent</item>
+    </style>
+</resources>
diff --git a/mopub-sample/res/values-v28/styles.xml b/mopub-sample/res/values-v28/styles.xml
new file mode 100644
index 00000000..a434e28e
--- /dev/null
+++ b/mopub-sample/res/values-v28/styles.xml
@@ -0,0 +1,8 @@
+<resources>
+    <style name="AppTheme.NoActionBar">
+        <item name="windowActionBar">false</item>
+        <item name="windowNoTitle">true</item>
+        <item name="android:statusBarColor">@android:color/transparent</item>
+        <item name="android:windowLayoutInDisplayCutoutMode">never</item>
+    </style>
+</resources>
diff --git a/mopub-sample/res/values/colors.xml b/mopub-sample/res/values/colors.xml
new file mode 100644
index 00000000..9305825e
--- /dev/null
+++ b/mopub-sample/res/values/colors.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="colorPrimary">#008577</color>
+    <color name="colorPrimaryDark">#00574B</color>
+    <color name="colorAccent">#D81B60</color>
+    <color name="colorLightGreay">#46cccccc</color>
+    <color name="textDark">#ff070707</color>
+</resources>
diff --git a/mopub-sample/res/values/dimens.xml b/mopub-sample/res/values/dimens.xml
index 75ede747..403f81f7 100644
--- a/mopub-sample/res/values/dimens.xml
+++ b/mopub-sample/res/values/dimens.xml
@@ -13,4 +13,10 @@
     <dimen name="leaderboard_height">90dp</dimen>
     <dimen name="skyscraper_width">160dp</dimen>
     <dimen name="skyscraper_height">600dp</dimen>
-</resources>
\ No newline at end of file
+
+    <!-- Navigation dimensions -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+    <dimen name="nav_header_vertical_spacing">8dp</dimen>
+    <dimen name="nav_header_height">176dp</dimen>
+</resources>
diff --git a/mopub-sample/res/values/drawables.xml b/mopub-sample/res/values/drawables.xml
new file mode 100644
index 00000000..1e963693
--- /dev/null
+++ b/mopub-sample/res/values/drawables.xml
@@ -0,0 +1,8 @@
+<resources xmlns:android="http://schemas.android.com/apk/res/android">
+    <item name="ic_menu_unlock" type="drawable">@android:drawable/ic_lock_idle_lock</item>
+    <item name="ic_menu_lock" type="drawable">@android:drawable/ic_lock_lock</item>
+    <item name="ic_menu_slideshow" type="drawable">@android:drawable/ic_menu_slideshow</item>
+    <item name="ic_menu_manage" type="drawable">@android:drawable/ic_menu_manage</item>
+    <item name="ic_menu_adapters" type="drawable">@android:drawable/ic_menu_info_details</item>
+    <item name="ic_menu_info" type="drawable">@android:drawable/ic_dialog_info</item>
+</resources>
diff --git a/mopub-sample/res/values/strings.xml b/mopub-sample/res/values/strings.xml
index 44afbbb6..44da6a24 100644
--- a/mopub-sample/res/values/strings.xml
+++ b/mopub-sample/res/values/strings.xml
@@ -28,4 +28,30 @@
     <string name="ad_unit_id_rewarded_rich_media">a96ae2ef41d44822af45c6328c4e1eb1</string>
     <string name="ad_unit_id_native">11a17b188668469fb0412708c3d16813</string>
     <string name="swipe_text"><![CDATA[< Swipe Left & Right >]]></string>
+
+    <string name="navigation_drawer_open">Open navigation drawer</string>
+    <string name="navigation_drawer_close">Close navigation drawer</string>
+    <string name="nav_header_title">MoPub Sample App</string>
+    <string name="nav_header_subtitle">android.studio@android.com</string>
+    <string name="nav_header_desc">Navigation header</string>
+    <string name="action_settings">Settings</string>
+    <string name="consent_whitelisted">Consent changed to Potentially whitelisted</string>
+    <string name="consent_denied">Consent changed to Denied</string>
+    <string name="close">Close</string>
+    <string name="no_network_adapters_found">No network adapters found</string>
+    <string name="mopub_logo_descr">Mopub logo</string>
+    <string name="consent_change_status">Consent change status</string>
+    <string name="donottrack_text">Do Not Track is on</string>
+    <string name="api_endpoint">API ENDPOINT</string>
+    <string name="production">Production</string>
+    <string name="staging">Staging</string>
+    <string name="privacy">PRIVACY</string>
+    <string name="information">Information</string>
+    <string name="grant_consent">Grant Consent</string>
+    <string name="revoke_consent">Revoke Consent</string>
+    <string name="force_gdpr_applicable">Force GDPR Applicable</string>
+    <string name="info">INFO</string>
+    <string name="network_adapters">Network Adapters</string>
+    <string name="pim_is_not_available">getPersonalInformationManager() returned null</string>
+    <string name="list_fragment_not_found">Can\'t find MoPubListFragment.</string>
 </resources>
diff --git a/mopub-sample/res/values/styles.xml b/mopub-sample/res/values/styles.xml
new file mode 100644
index 00000000..545b9c6d
--- /dev/null
+++ b/mopub-sample/res/values/styles.xml
@@ -0,0 +1,20 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+    </style>
+
+    <style name="AppTheme.NoActionBar">
+        <item name="windowActionBar">false</item>
+        <item name="windowNoTitle">true</item>
+    </style>
+
+    <style name="AppTheme.AppBarOverlay" parent="ThemeOverlay.AppCompat.Dark.ActionBar" />
+
+    <style name="AppTheme.PopupOverlay" parent="ThemeOverlay.AppCompat.Light" />
+
+</resources>
diff --git a/mopub-sample/src/androidTest/java/com/mopub/framework/base/BasePage.java b/mopub-sample/src/androidTest/java/com/mopub/framework/base/BasePage.java
new file mode 100644
index 00000000..19274d1f
--- /dev/null
+++ b/mopub-sample/src/androidTest/java/com/mopub/framework/base/BasePage.java
@@ -0,0 +1,128 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.framework.base;
+
+import android.support.annotation.NonNull;
+import android.support.test.espresso.ViewInteraction;
+import android.support.test.espresso.action.ViewActions;
+
+import com.mopub.framework.pages.AdListPage;
+
+import static android.support.test.espresso.Espresso.onView;
+import static android.support.test.espresso.action.ViewActions.click;
+import static android.support.test.espresso.assertion.ViewAssertions.matches;
+import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
+import static android.support.test.espresso.matcher.ViewMatchers.isRoot;
+import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static android.support.test.espresso.matcher.ViewMatchers.withResourceName;
+import static android.support.test.espresso.matcher.ViewMatchers.withText;
+import static org.hamcrest.CoreMatchers.containsString;
+import static org.junit.Assert.fail;
+
+public class BasePage {
+    private static final int DEFAULT_TIMEOUT_SECS = 10;
+    private static final int DEFAULT_RETRY_COUNT = 3;
+    private static final int SAMPLE_TIME_MS = 200;
+    private static final int SAMPLES_PER_SEC = 5;
+
+    protected final String ADD_AD_UNIT_LABEL = "ADD AN AD UNIT";
+
+    public void quickClickElement(@NonNull final ViewInteraction element) {
+        element.perform(click());
+    }
+
+    public void clickElementWithText(@NonNull final String text, @NonNull final boolean isStrict) {
+        final String failMessage = "This element with text '" + text + "' is not present";
+
+        final ViewInteraction element = isStrict ?
+                onView(withText(text)) :
+                onView(withText(containsString(text)));
+        clickElement(element, failMessage);
+    }
+
+    public void clickElementWithText(@NonNull final String text) {
+        clickElementWithText(text, true);
+    }
+
+    public void clickElementWithId(final int id) {
+        final ViewInteraction element = onView(withId(id));
+        final String failMessage = "This element with id '" + id + "' is not present";
+
+        clickElement(element, failMessage);
+    }
+
+    public void clickElement(@NonNull final ViewInteraction element, final String failMessage) {
+        clickElement(element, DEFAULT_RETRY_COUNT, failMessage);
+    }
+
+    public void clickElement(@NonNull final ViewInteraction element) {
+        clickElement(element, DEFAULT_RETRY_COUNT, null);
+    }
+
+    public void clickElement(@NonNull final ViewInteraction element, final int retryCount,
+                             final String failMessage) {
+        final String message = (failMessage != null) ?
+                failMessage :
+                "This element is not present";
+
+        if (waitForElement(element)) {
+            element.perform(click());
+
+            if (waitForElement(element, 1) && retryCount > 0) {
+                final int newRetryCount = retryCount - 1;
+                clickElement(element, newRetryCount, failMessage);
+            } else if (retryCount <= 0) {
+                fail(message);
+            }
+
+            return;
+        }
+
+        fail(message);
+    }
+
+    public void clickElementWithResource(@NonNull final String resName) {
+        final ViewInteraction element = onView(withResourceName(resName));
+        final String failMessage = "This element with resource name '" + resName + "' is not present";
+
+        clickElement(element, failMessage);
+    }
+
+    public boolean waitForElement(@NonNull final ViewInteraction element) {
+        return waitForElement(element, DEFAULT_TIMEOUT_SECS);
+    }
+
+    public boolean waitForElement(@NonNull final ViewInteraction element, final int timeoutInSeconds) {
+        int i = 0;
+        while (i++ < timeoutInSeconds * SAMPLES_PER_SEC) {
+            try {
+                element.check(matches(isDisplayed()));
+                return true;
+            } catch (Exception e) {
+                try {
+                    Thread.sleep(SAMPLE_TIME_MS);
+                } catch (InterruptedException e1) {
+                    e1.printStackTrace();
+                }
+            }
+        }
+        return false;
+    }
+
+    public static void pressBack() {
+        onView(isRoot()).perform(ViewActions.pressBack());
+    }
+
+    public AdListPage goToHome() {
+        ViewInteraction element = onView(withText(ADD_AD_UNIT_LABEL));
+
+        if (!waitForElement(element, 1)) {
+            pressBack();
+            goToHome();
+        }
+
+        return new AdListPage();
+    }
+}
diff --git a/mopub-sample/src/androidTest/java/com/mopub/framework/models/BannerAdLabels.java b/mopub-sample/src/androidTest/java/com/mopub/framework/models/BannerAdLabels.java
new file mode 100644
index 00000000..dc4d798a
--- /dev/null
+++ b/mopub-sample/src/androidTest/java/com/mopub/framework/models/BannerAdLabels.java
@@ -0,0 +1,33 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.framework.models;
+
+public class BannerAdLabels {
+
+    // Banner
+    public static final String BANNER = "MoPub Banner Sample";
+
+    // MRECT
+    public static final String MRECT = "MoPub Mrect Sample";
+
+    // Leaderboard
+    public static final String LEADERBOARD = "MoPub Leaderboard Sample";
+
+    // Interstitial
+    public static final String INTERSTITIAL = "MoPub Interstitial Sample";
+
+    // Rewarded Video
+    public static final String REWARDED_RICH_MEDIA = "MoPub Rewarded Rich Media Sample";
+    public static final String REWARDED_VIDEO = "MoPub Rewarded Video Sample";
+
+    // Native List View
+    public static final String AD_PLACER = "MoPub Ad Placer Sample";
+
+    // Native Recycler View
+    public static final String RECYCLER_VIEW = "MoPub Recycler View Sample";
+
+    // Native Gallery (Custom Stream)
+    public static final String VIEW_PAGER = "MoPub View Pager Sample";
+}
diff --git a/mopub-sample/src/androidTest/java/com/mopub/framework/pages/AdDetailPage.java b/mopub-sample/src/androidTest/java/com/mopub/framework/pages/AdDetailPage.java
new file mode 100644
index 00000000..6d4df7e0
--- /dev/null
+++ b/mopub-sample/src/androidTest/java/com/mopub/framework/pages/AdDetailPage.java
@@ -0,0 +1,14 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.framework.pages;
+
+import com.mopub.framework.base.BasePage;
+import com.mopub.simpleadsdemo.R;
+
+public class AdDetailPage extends BasePage {
+    public void clickLoadAdButton() {
+        clickElementWithId(R.id.load_button);
+    }
+}
diff --git a/mopub-sample/src/androidTest/java/com/mopub/framework/pages/AdListPage.java b/mopub-sample/src/androidTest/java/com/mopub/framework/pages/AdListPage.java
new file mode 100644
index 00000000..11860ad1
--- /dev/null
+++ b/mopub-sample/src/androidTest/java/com/mopub/framework/pages/AdListPage.java
@@ -0,0 +1,99 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.framework.pages;
+
+import android.support.annotation.NonNull;
+import android.support.test.espresso.ViewInteraction;
+
+import static android.support.test.espresso.Espresso.onView;
+import static android.support.test.espresso.action.ViewActions.click;
+import static android.support.test.espresso.action.ViewActions.typeText;
+import static android.support.test.espresso.matcher.RootMatchers.isPlatformPopup;
+import static android.support.test.espresso.matcher.ViewMatchers.hasSibling;
+import static android.support.test.espresso.matcher.ViewMatchers.withResourceName;
+import static android.support.test.espresso.matcher.ViewMatchers.withText;
+import static org.hamcrest.Matchers.allOf;
+
+import com.mopub.framework.base.BasePage;
+
+
+public class AdListPage extends BasePage {
+
+    static final String CELL_RESOURCE_NAME = "banner_description";
+
+    public enum AdUnitType {
+        BANNER("Banner"),
+        MRECT("Mrect"),
+        LEADERBOARD("Leaderboard"),
+        SKYSCRAPER("Skyscraper"),
+        INTERSTITIAL("Interstitial"),
+        REWARDED_VIDEO("Rewarded Video"),
+        NATIVE_LIST_VIEW("Native List View"),
+        NATIVE_RECYCLER_VIEW("Native Recycler View"),
+        NATIVE_GALLERY("Native Gallery (Custom Stream)");
+
+        private final String type;
+
+        private AdUnitType(@NonNull final String type) {
+            this.type = type;
+        }
+
+        public String getName() {
+            return type;
+        }
+    }
+
+    public AdDetailPage clickCell(@NonNull final String title) {
+        final String failMessage = "This element with resource name '" + CELL_RESOURCE_NAME
+                + "' and title '" + title + "' is not present";
+        final ViewInteraction element = onView(allOf(withText(title),
+                withResourceName(CELL_RESOURCE_NAME)));
+        clickElement(element, failMessage);
+
+        return new AdDetailPage();
+    }
+
+    public AdListPage addAdUnit(@NonNull final AdUnitType type, @NonNull final String adUnitId, @NonNull final String adUnitName) {
+        final String saveAdUnitLabel = "Save ad unit";
+        final String adTypeSpinnerResourceId = "add_ad_unit_type";
+        final String adUnitIdTextFieldResourceId = "add_ad_unit_id";
+        final String adUnitNameTextFieldResourceId = "add_ad_unit_description";
+
+        goToHome();
+
+        clickElementWithText(ADD_AD_UNIT_LABEL);
+
+        final ViewInteraction adTypeSpinner = onView(withResourceName(adTypeSpinnerResourceId));
+        adTypeSpinner.perform(click());
+
+        final ViewInteraction adTypeOptionElement = onView(withText(type.getName()))
+                .inRoot(isPlatformPopup());
+        adTypeOptionElement.perform(click());
+
+        final ViewInteraction adUnitIdTextField = onView(withResourceName(adUnitIdTextFieldResourceId));
+        adUnitIdTextField.perform(typeText(adUnitId));
+
+        final ViewInteraction adUnitNameTextField = onView(withResourceName(adUnitNameTextFieldResourceId));
+        adUnitNameTextField.perform(typeText(adUnitName));
+
+        clickElementWithText(saveAdUnitLabel);
+
+        return this;
+    }
+
+    public AdListPage deleteAdUnit(@NonNull final String adUnitName) {
+        final String deleteButtonLabel = "DELETE";
+
+        goToHome();
+
+        final ViewInteraction bannerDeleteElement = onView(allOf(withResourceName("banner_delete"),
+                hasSibling(withText(adUnitName))));
+        quickClickElement(bannerDeleteElement);
+
+        clickElementWithText(deleteButtonLabel);
+
+        return this;
+    }
+}
diff --git a/mopub-sample/src/androidTest/java/com/mopub/framework/util/Utils.java b/mopub-sample/src/androidTest/java/com/mopub/framework/util/Utils.java
new file mode 100644
index 00000000..919e141b
--- /dev/null
+++ b/mopub-sample/src/androidTest/java/com/mopub/framework/util/Utils.java
@@ -0,0 +1,62 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.framework.util;
+
+import android.app.Activity;
+import android.app.Instrumentation;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.espresso.core.internal.deps.guava.collect.Iterables;
+import android.support.test.runner.lifecycle.ActivityLifecycleMonitorRegistry;
+import android.support.test.runner.lifecycle.Stage;
+
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+public class Utils {
+
+    private static int BUFFER_SIZE = 4*1024;
+    /**
+     * When running an instrumentation test, this method will return the currently resumed activity.
+     *
+     * @return the resumed activity
+     */
+    public static Activity getCurrentActivity() {
+        Instrumentation instrumentation = InstrumentationRegistry.getInstrumentation();
+        instrumentation.waitForIdleSync();
+        final Activity[] activity = new Activity[1];
+        instrumentation.runOnMainSync(new Runnable() {
+            @Override
+            public void run() {
+                Collection<Activity> activities = ActivityLifecycleMonitorRegistry
+                        .getInstance().getActivitiesInStage(Stage.RESUMED);
+                activity[0] = Iterables.getOnlyElement(activities);
+            }
+        });
+        return activity[0];
+    }
+
+    public static List<String> getLogs() {
+        Process logcat;
+        final List<String> log = new ArrayList<>();
+        try {
+            logcat = Runtime.getRuntime().exec(new String[]{"logcat", "-d"});
+            BufferedReader br =
+                    new BufferedReader(
+                            new InputStreamReader(logcat.getInputStream()),
+                            BUFFER_SIZE
+                    );
+            String line;
+            while ((line = br.readLine()) != null) {
+                log.add(line);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+        return log;
+    }
+}
\ No newline at end of file
diff --git a/mopub-sample/src/androidTest/java/com/mopub/framework/util/VolleyIdlingResource.java b/mopub-sample/src/androidTest/java/com/mopub/framework/util/VolleyIdlingResource.java
new file mode 100644
index 00000000..5d7cac7a
--- /dev/null
+++ b/mopub-sample/src/androidTest/java/com/mopub/framework/util/VolleyIdlingResource.java
@@ -0,0 +1,66 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.framework.util;
+
+import android.content.Context;
+import android.support.test.espresso.IdlingResource;
+import android.util.Log;
+
+import com.mopub.network.Networking;
+import com.mopub.volley.Request;
+import com.mopub.volley.RequestQueue;
+
+import java.lang.reflect.Field;
+import java.util.Set;
+
+/**
+ * If writing an Espresso test that makes network calls, this resource must be registered in order
+ * to ensure that Espresso waits for the Volley calls to resolve.
+ */
+public class VolleyIdlingResource implements IdlingResource {
+    private static final String TAG = "VolleyIdlingResource";
+    private final String mResourceName;
+
+    // written from main thread, read from any thread.
+    private volatile ResourceCallback mResourceCallback;
+
+    private Field mCurrentRequests;
+    private RequestQueue mVolleyRequestQueue;
+
+    public VolleyIdlingResource(String resourceName, Context context) throws SecurityException, NoSuchFieldException {
+        mResourceName = resourceName;
+        mVolleyRequestQueue = Networking.getRequestQueue(context);
+        mCurrentRequests = RequestQueue.class.getDeclaredField("mCurrentRequests");
+        mCurrentRequests.setAccessible(true);
+    }
+
+    @Override
+    public String getName() {
+        return mResourceName;
+    }
+
+    @Override
+    public boolean isIdleNow() {
+        try {
+            Set<Request> set = (Set<Request>) mCurrentRequests.get(mVolleyRequestQueue);
+            if (set.isEmpty()) {
+                Log.d(TAG, "Volley is idle.");
+                mResourceCallback.onTransitionToIdle();
+            } else {
+                Log.d(TAG, "Volley is not idle.");
+            }
+            return set.isEmpty();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return true;
+    }
+
+    @Override
+    public void registerIdleTransitionCallback(ResourceCallback resourceCallback) {
+        this.mResourceCallback = resourceCallback;
+    }
+}
+
diff --git a/mopub-sample/src/androidTest/java/com/mopub/tests/BannerAdTests.java b/mopub-sample/src/androidTest/java/com/mopub/tests/BannerAdTests.java
new file mode 100644
index 00000000..c85a2d15
--- /dev/null
+++ b/mopub-sample/src/androidTest/java/com/mopub/tests/BannerAdTests.java
@@ -0,0 +1,91 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.tests;
+
+import android.support.test.espresso.ViewInteraction;
+import android.support.test.filters.LargeTest;
+import android.support.test.runner.AndroidJUnit4;
+
+import com.mopub.framework.models.BannerAdLabels;
+import com.mopub.framework.pages.AdDetailPage;
+import com.mopub.framework.pages.AdListPage;
+import com.mopub.framework.pages.AdListPage.AdUnitType;
+import com.mopub.simpleadsdemo.R;
+import com.mopub.tests.base.MoPubBaseTestCase;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static android.support.test.espresso.Espresso.onView;
+import static android.support.test.espresso.matcher.ViewMatchers.hasChildCount;
+import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static android.support.test.espresso.matcher.ViewMatchers.withText;
+import static org.hamcrest.Matchers.allOf;
+import static org.junit.Assert.*;
+
+@RunWith(AndroidJUnit4.class)
+@LargeTest
+public class BannerAdTests extends MoPubBaseTestCase {
+
+    // Test Variables
+    private static final AdUnitType AD_TYPE = AdUnitType.BANNER;
+    private static final String TITLE = BannerAdLabels.BANNER;
+    private static final String WEB_PAGE_LINK = "https://www.mopub.com/click-test/";
+
+    /*
+     * Verify that the Banner Ad is successfully loaded and displayed on
+     * the app.
+     */
+    @Test
+    public void adsDetailsPage_withClickOnMoPubBannerSample_shouldLoadMoPubBanner() {
+        final AdListPage adListPage = new AdListPage();
+        final AdDetailPage adDetailPage = adListPage.clickCell(TITLE);
+
+        final ViewInteraction bannerElement = onView(allOf(withId(R.id.banner_mopubview),
+                hasChildCount(1)));
+
+        assertTrue(adDetailPage.waitForElement(bannerElement));
+    }
+
+    /*
+     * Verify that the Banner Ad fails to load on the app.
+     */
+    @Test
+    public void adsDetailsPage_withClickOnMoPubBannerSample_shouldNotLoadMoPubBanner() {
+        final String fakeAdUnit = "abc";
+        final String adUnitTitle = "Banner Automation Test";
+
+        final AdListPage adListPage = new AdListPage();
+        adListPage.addAdUnit(AD_TYPE, fakeAdUnit, adUnitTitle);
+
+        final AdDetailPage adDetailPage = adListPage.clickCell(adUnitTitle);
+
+        final ViewInteraction bannerElement = onView(allOf(withId(R.id.banner_mopubview),
+                hasChildCount(1)));
+
+        assertTrue(!adDetailPage.waitForElement(bannerElement));
+
+        // Clean Up
+        adListPage.deleteAdUnit(adUnitTitle);
+    }
+
+    /*
+     * Verify that the user is correctly navigated to
+     * Banner Ad's url on click.
+     */
+    @Test
+    public void adsDetailsPage_withClickOnMoPubBannerAd_shouldShowMoPubBrowser() {
+        final AdListPage adListPage = new AdListPage();
+        final AdDetailPage adDetailPage = adListPage.clickCell(TITLE);
+
+        final ViewInteraction bannerElement = onView(allOf(withId(R.id.banner_mopubview),
+                hasChildCount(1)));
+        adDetailPage.clickElement(bannerElement);
+
+        final ViewInteraction browserLinkElement = onView(withText(WEB_PAGE_LINK));
+
+        assertTrue(adDetailPage.waitForElement(browserLinkElement));
+    }
+}
diff --git a/mopub-sample/src/androidTest/java/com/mopub/tests/LeaderboardAdTests.java b/mopub-sample/src/androidTest/java/com/mopub/tests/LeaderboardAdTests.java
new file mode 100644
index 00000000..1a01ca73
--- /dev/null
+++ b/mopub-sample/src/androidTest/java/com/mopub/tests/LeaderboardAdTests.java
@@ -0,0 +1,85 @@
+package com.mopub.tests;
+
+import android.support.test.espresso.ViewInteraction;
+import android.support.test.filters.LargeTest;
+import android.support.test.runner.AndroidJUnit4;
+
+import com.mopub.framework.models.BannerAdLabels;
+import com.mopub.framework.pages.AdDetailPage;
+import com.mopub.framework.pages.AdListPage;
+import com.mopub.framework.pages.AdListPage.AdUnitType;
+import com.mopub.simpleadsdemo.R;
+import com.mopub.tests.base.MoPubBaseTestCase;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static android.support.test.espresso.Espresso.onView;
+import static android.support.test.espresso.matcher.ViewMatchers.hasChildCount;
+import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static android.support.test.espresso.matcher.ViewMatchers.withText;
+import static org.hamcrest.Matchers.allOf;
+import static org.junit.Assert.assertTrue;
+
+@RunWith(AndroidJUnit4.class)
+@LargeTest
+public class LeaderboardAdTests extends MoPubBaseTestCase {
+
+    // Test Variables
+    private static final AdUnitType AD_TYPE = AdUnitType.LEADERBOARD;
+    private static final String TITLE = BannerAdLabels.LEADERBOARD;
+    private static final String WEB_PAGE_LINK = "https://www.mopub.com/click-test/";
+
+    /*
+     * Verify that the Leaderboard Ad is successfully loaded and displayed on
+     * the app.
+     */
+    @Test
+    public void adsDetailsPage_withClickOnMoPubLeaderboardSample_shouldLoadMoPubLeaderboard() {
+        final AdListPage adListPage = new AdListPage();
+        final AdDetailPage adDetailPage = adListPage.clickCell(TITLE);
+
+        final ViewInteraction bannerElement = onView(allOf(withId(R.id.banner_mopubview), hasChildCount(1)));
+
+        assertTrue(adDetailPage.waitForElement(bannerElement));
+    }
+
+    /*
+     * Verify that the Leaderboard Ad fails to load on the app.
+     */
+    @Test
+    public void adsDetailsPage_withClickOnMoPubLeaderboardSample_shouldNotLoadMoPubLeaderboard() {
+        final String fakeAdUnit = "abc";
+        final String adUnitTitle = "Leaderboard Automation Test";
+
+        final AdListPage adListPage = new AdListPage();
+        adListPage.addAdUnit(AD_TYPE, fakeAdUnit, adUnitTitle);
+
+        final AdDetailPage adDetailPage = adListPage.clickCell(adUnitTitle);
+
+        final ViewInteraction bannerElement = onView(allOf(withId(R.id.banner_mopubview),
+                hasChildCount(1)));
+
+        assertTrue(!adDetailPage.waitForElement(bannerElement));
+
+        // Clean Up
+        adListPage.deleteAdUnit(adUnitTitle);
+    }
+
+    /*
+     * Verify that the user is correctly navigated to
+     * Leaderboard Ad's url on click.
+     */
+    @Test
+    public void adsDetailsPage_withClickOnMoPubLeaderboardAd_shouldShowMoPubBrowser() {
+        final AdListPage adListPage = new AdListPage();
+        final AdDetailPage adDetailPage = adListPage.clickCell(TITLE);
+
+        final ViewInteraction bannerElement = onView(allOf(withId(R.id.banner_mopubview), hasChildCount(1)));
+        adDetailPage.clickElement(bannerElement);
+
+        final ViewInteraction browserLinkElement = onView(withText(WEB_PAGE_LINK));
+
+        assertTrue(adDetailPage.waitForElement(browserLinkElement));
+    }
+}
diff --git a/mopub-sample/src/androidTest/java/com/mopub/tests/MRectAdTests.java b/mopub-sample/src/androidTest/java/com/mopub/tests/MRectAdTests.java
new file mode 100644
index 00000000..53c72b22
--- /dev/null
+++ b/mopub-sample/src/androidTest/java/com/mopub/tests/MRectAdTests.java
@@ -0,0 +1,87 @@
+package com.mopub.tests;
+
+import android.support.test.espresso.ViewInteraction;
+import android.support.test.filters.LargeTest;
+import android.support.test.runner.AndroidJUnit4;
+
+import com.mopub.framework.models.BannerAdLabels;
+import com.mopub.framework.pages.AdDetailPage;
+import com.mopub.framework.pages.AdListPage;
+import com.mopub.framework.pages.AdListPage.AdUnitType;
+import com.mopub.simpleadsdemo.R;
+import com.mopub.tests.base.MoPubBaseTestCase;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static android.support.test.espresso.Espresso.onView;
+import static android.support.test.espresso.matcher.ViewMatchers.hasChildCount;
+import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static android.support.test.espresso.matcher.ViewMatchers.withText;
+import static org.hamcrest.Matchers.allOf;
+import static org.junit.Assert.assertTrue;
+
+@RunWith(AndroidJUnit4.class)
+@LargeTest
+public class MRectAdTests extends MoPubBaseTestCase {
+
+    // Test Variables
+    private static final AdUnitType AD_TYPE = AdUnitType.MRECT;
+    private static final String TITLE = BannerAdLabels.MRECT;
+    private static final String WEB_PAGE_LINK = "https://www.mopub.com/click-test/";
+
+    /*
+     * Verify that the MRECT Ad is successfully loaded and displayed on
+     * the app.
+     */
+    @Test
+    public void adsDetailsPage_withClickOnMoPubMrectSample_shouldLoadMoPubMrect() {
+        final AdListPage adListPage = new AdListPage();
+        final AdDetailPage adDetailPage = adListPage.clickCell(TITLE);
+
+        final ViewInteraction bannerElement = onView(allOf(withId(R.id.banner_mopubview),
+                hasChildCount(1)));
+
+        assertTrue(adDetailPage.waitForElement(bannerElement));
+    }
+
+    /*
+     * Verify that the MRECT Ad fails to load on the app.
+     */
+    @Test
+    public void adsDetailsPage_withClickOnMoPubMrectSample_shouldNotLoadMoPubMrect() {
+        final String fakeAdUnit = "abc";
+        final String adUnitTitle = "MRECT Automation Test";
+
+        final AdListPage adListPage = new AdListPage();
+        adListPage.addAdUnit(AD_TYPE, fakeAdUnit, adUnitTitle);
+
+        final AdDetailPage adDetailPage = adListPage.clickCell(adUnitTitle);
+
+        final ViewInteraction bannerElement = onView(allOf(withId(R.id.banner_mopubview),
+                hasChildCount(1)));
+
+        assertTrue(!adDetailPage.waitForElement(bannerElement));
+
+        // Clean Up
+        adListPage.deleteAdUnit(adUnitTitle);
+    }
+
+    /*
+     * Verify that the user is correctly navigated to
+     * MRECT Ad's url on click.
+     */
+    @Test
+    public void adsDetailsPage_withClickOnMoPubMrectAd_shouldShowMoPubBrowser() {
+        final AdListPage adListPage = new AdListPage();
+        final AdDetailPage adDetailPage = adListPage.clickCell(TITLE);
+
+        final ViewInteraction bannerElement = onView(allOf(withId(R.id.banner_mopubview),
+                hasChildCount(1)));
+        adDetailPage.clickElement(bannerElement);
+
+        final ViewInteraction browserLinkElement = onView(withText(WEB_PAGE_LINK));
+
+        assertTrue(adDetailPage.waitForElement(browserLinkElement));
+    }
+}
diff --git a/mopub-sample/src/androidTest/java/com/mopub/tests/base/MoPubBaseTestCase.java b/mopub-sample/src/androidTest/java/com/mopub/tests/base/MoPubBaseTestCase.java
new file mode 100644
index 00000000..633fb712
--- /dev/null
+++ b/mopub-sample/src/androidTest/java/com/mopub/tests/base/MoPubBaseTestCase.java
@@ -0,0 +1,38 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.tests.base;
+
+import android.support.test.espresso.intent.rule.IntentsTestRule;
+
+import com.mopub.simpleadsdemo.MoPubSampleActivity;
+
+import org.junit.AfterClass;
+import org.junit.Before;
+import org.junit.After;
+import org.junit.BeforeClass;
+import org.junit.Rule;
+
+public class MoPubBaseTestCase {
+
+    @Rule
+    public IntentsTestRule<MoPubSampleActivity> mActivityRule =
+            new IntentsTestRule<MoPubSampleActivity>(MoPubSampleActivity.class);
+
+    @Before
+    public void setUp() {
+    }
+
+    @After
+    public void tearDown() {
+    }
+
+    @BeforeClass
+    public static void setUpClass() {
+    }
+
+    @AfterClass
+    public static void tearDownClass() {
+    }
+}
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
index bc59d9eb..b325f597 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
index 0d60e1d2..c6aa5073 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -17,6 +17,7 @@
 import java.util.HashSet;
 import java.util.List;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 import static com.mopub.simpleadsdemo.MoPubSQLiteHelper.COLUMN_AD_TYPE;
 import static com.mopub.simpleadsdemo.MoPubSQLiteHelper.COLUMN_AD_UNIT_ID;
 import static com.mopub.simpleadsdemo.MoPubSQLiteHelper.COLUMN_DESCRIPTION;
@@ -81,7 +82,7 @@ private MoPubSampleAdUnit createSampleAdUnit(final MoPubSampleAdUnit sampleAdUni
         database.close();
 
         if (newAdConfiguration != null) {
-            MoPubLog.d("Ad configuration added with id: " + newAdConfiguration.getId());
+            MoPubLog.log(CUSTOM, "Ad configuration added with id: " + newAdConfiguration.getId());
         }
         return newAdConfiguration;
     }
@@ -90,7 +91,7 @@ void deleteSampleAdUnit(final MoPubSampleAdUnit adConfiguration) {
         final long id = adConfiguration.getId();
         SQLiteDatabase database = mDatabaseHelper.getWritableDatabase();
         database.delete(TABLE_AD_CONFIGURATIONS, COLUMN_ID + " = " + id, null);
-        MoPubLog.d("Ad Configuration deleted with id: " + id);
+        MoPubLog.log(CUSTOM, "Ad Configuration deleted with id: " + id);
         database.close();
     }
 
@@ -104,7 +105,7 @@ private void deleteAllAdUnitsWithAdUnitIdAndAdType(@NonNull final String adUnitI
                 COLUMN_AD_UNIT_ID + " = '" + adUnitId +
                 "' AND " + COLUMN_USER_GENERATED + " = 1 AND " +
                 COLUMN_AD_TYPE + " = '" + adType + "'", null);
-        MoPubLog.d(numDeletedRows + " rows deleted with adUnitId: " + adUnitId);
+        MoPubLog.log(CUSTOM, numDeletedRows + " rows deleted with adUnitId: " + adUnitId);
         database.close();
     }
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannerDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannerDetailFragment.java
index 1da79d58..ba05b8f3 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannerDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannerDetailFragment.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/DetailFragmentViewHolder.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/DetailFragmentViewHolder.java
index 67f24f33..66b0114d 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/DetailFragmentViewHolder.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/DetailFragmentViewHolder.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
index 723ccfbe..e775a093 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LeaderboardDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LeaderboardDetailFragment.java
index 4d502cf3..614efdac 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LeaderboardDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LeaderboardDetailFragment.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
index 3b8d7c0c..9f7bdbc6 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -6,14 +6,14 @@
 
 import android.content.Context;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.logging.MoPubLogger;
 import com.mopub.mobileads.MoPubErrorCode;
 
-import java.util.logging.Handler;
-import java.util.logging.LogManager;
-import java.util.logging.LogRecord;
-import java.util.logging.Logger;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.LogLevel.INFO;
 
 /**
  * Used to intercept logs so that we can view logs at a lower level
@@ -37,50 +37,23 @@ static void enableCanaryLogging(@NonNull final Context context) {
             return;
         }
 
-        final Handler handler = new SampleAppLogHandler(context.getApplicationContext());
-        MoPubLog.c("Setting up MoPubLog");
-        final Logger logger = getLogger();
-        logger.addHandler(handler);
-
-        sEnabled = true;
-    }
-
-    private static Logger getLogger() {
-        return LogManager.getLogManager().getLogger(MoPubLog.LOGGER_NAMESPACE);
-    }
-
-    private static class SampleAppLogHandler extends Handler {
-
-        @NonNull
-        private final Context mContext;
-
-        protected SampleAppLogHandler(@NonNull final Context context) {
-            super();
-            mContext = context;
-        }
-
-        @Override
-        public void publish(final LogRecord logRecord) {
-            if (logRecord == null) {
-                return;
-            }
-            // Toasts the warmup message if X-Warmup flag is set to 1
-            if (MoPubErrorCode.WARMUP.toString().equals(logRecord.getMessage())) {
-                Utils.logToast(mContext, MoPubErrorCode.WARMUP.toString());
-            }
-            // Toasts the no connection message if a native ad failed due to no internet
-            if (MoPubErrorCode.NO_CONNECTION.toString().equals(logRecord.getMessage())) {
-                Utils.logToast(mContext, MoPubErrorCode.NO_CONNECTION.toString());
+        MoPubLog.addLogger(new MoPubLogger() {
+            @Override
+            public void log(@Nullable String className, @Nullable String methodName,
+                            @Nullable String identifier, @Nullable String message) {
+                if (MoPubErrorCode.WARMUP.toString().equals(message)) {
+                    Utils.logToast(context, MoPubErrorCode.WARMUP.toString());
+                }
+                // Toasts the no connection message if a native ad failed due to no internet
+                if (MoPubErrorCode.NO_CONNECTION.toString().equals(message)) {
+                    Utils.logToast(context, MoPubErrorCode.NO_CONNECTION.toString());
+                }
             }
-        }
+        }, INFO);
 
-        @Override
-        public void flush() {
-        }
+        MoPubLog.log(CUSTOM, "Setting up MoPubLog");
 
-        @Override
-        public void close() throws SecurityException {
-        }
+        sEnabled = true;
     }
 }
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
index 3aab7794..7c32e6f7 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -30,10 +30,13 @@
 import com.mopub.common.MoPub;
 import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.privacy.ConsentStatus;
+import com.mopub.common.privacy.PersonalInfoManager;
 
 import java.util.ArrayList;
 import java.util.List;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.ERROR;
 import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType;
 import static com.mopub.simpleadsdemo.Utils.logToast;
 
@@ -128,10 +131,10 @@ private void enterAdFragment(@NonNull final MoPubSampleAdUnit adConfiguration,
         try {
             fragment = fragmentClass.newInstance();
         } catch (java.lang.InstantiationException e) {
-            MoPubLog.e("Error creating fragment for class " + fragmentClass, e);
+            MoPubLog.log(ERROR, "Error creating fragment for class " + fragmentClass, e);
             return;
         } catch (IllegalAccessException e) {
-            MoPubLog.e("Error creating fragment for class " + fragmentClass, e);
+            MoPubLog.log(ERROR, "Error creating fragment for class " + fragmentClass, e);
             return;
         }
 
@@ -223,6 +226,36 @@ void deleteAdUnit(final MoPubSampleAdUnit moPubSampleAdUnit) {
         mAdapter.sort(MoPubSampleAdUnit.COMPARATOR);
     }
 
+    /**
+     * Call this function to grant or revoke user consent
+     * @param consentGranted - true to grant consent, false to revoke
+     * @return - true successfully completed operation, false failed for some reason
+     */
+    boolean onChangeConsent(final boolean consentGranted) {
+        final PersonalInfoManager personalInfoManager = MoPub.getPersonalInformationManager();
+        final View view = getView();
+        if (personalInfoManager == null || view == null) {
+            MoPubLog.log(MoPubLog.SdkLogEvent.CUSTOM, getString(R.string.pim_is_not_available));
+            return false;
+        }
+
+        final EditText text = view.findViewById(R.id.status_change_notification);
+        text.setVisibility(View.VISIBLE);
+        if (consentGranted) {
+            personalInfoManager.grantConsent();
+            text.setText(R.string.consent_whitelisted);
+        } else {
+            if (personalInfoManager.getPersonalInfoConsentStatus().equals(ConsentStatus.DNT)) {
+                text.setText(R.string.donottrack_text);
+                return false;
+            }
+            personalInfoManager.revokeConsent();
+            text.setText(R.string.consent_denied);
+        }
+
+        return true;
+    }
+
     public static class DeleteDialogFragment extends DialogFragment {
         public static DeleteDialogFragment newInstance(MoPubSampleAdUnit adUnit) {
             final DeleteDialogFragment deleteDialogFragment = new DeleteDialogFragment();
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java
index 97f3381f..1744322a 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
index bbec05a7..a9497feb 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -10,28 +10,45 @@
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.support.design.widget.NavigationView;
 import android.support.v4.app.ActivityCompat;
-import android.support.v4.app.FragmentActivity;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.view.GravityCompat;
+import android.support.v4.widget.DrawerLayout;
+import android.support.v7.app.ActionBarDrawerToggle;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.Toolbar;
+import android.view.Menu;
+import android.view.MenuItem;
 import android.webkit.WebView;
 
+import com.mopub.common.Constants;
 import com.mopub.common.MoPub;
 import com.mopub.common.SdkConfiguration;
 import com.mopub.common.SdkInitializationListener;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.privacy.ConsentData;
 import com.mopub.common.privacy.ConsentDialogListener;
 import com.mopub.common.privacy.ConsentStatus;
 import com.mopub.common.privacy.ConsentStatusChangeListener;
 import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.common.util.DeviceUtils;
+import com.mopub.common.util.Reflection;
 import com.mopub.mobileads.MoPubErrorCode;
 
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
 import java.util.ArrayList;
 import java.util.List;
 
 import static android.Manifest.permission.ACCESS_COARSE_LOCATION;
 import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
 import static com.mopub.common.Constants.UNUSED_REQUEST_CODE;
+import static com.mopub.common.logging.MoPubLog.LogLevel.DEBUG;
+import static com.mopub.common.logging.MoPubLog.LogLevel.INFO;
 
-public class MoPubSampleActivity extends FragmentActivity {
+public class MoPubSampleActivity extends AppCompatActivity
+        implements NavigationView.OnNavigationItemSelectedListener {
     private static final List<String> REQUIRED_DANGEROUS_PERMISSIONS = new ArrayList<>();
 
     static {
@@ -56,13 +73,19 @@ private static void setWebDebugging() {
     @Nullable
     PersonalInfoManager mPersonalInfoManager;
 
+    @Nullable DrawerLayout mDrawerLayout;
+
     @Nullable
     private ConsentStatusChangeListener mConsentStatusChangeListener;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        setContentView(R.layout.main);
+        setContentView(R.layout.activity_main);
+        Toolbar toolbar = findViewById(R.id.toolbar);
+        setSupportActionBar(toolbar);
+
+        setupNavigationDrawer(toolbar);
 
         List<String> permissionsToBeRequested = new ArrayList<>();
         for (String permission : REQUIRED_DANGEROUS_PERMISSIONS) {
@@ -85,9 +108,13 @@ protected void onCreate(Bundle savedInstanceState) {
             createMoPubListFragment(getIntent());
         }
 
-        SdkConfiguration sdkConfiguration = new SdkConfiguration.Builder("b195f8dd8ded45fe847ad89ed1d016da")
-                .build();
-        MoPub.initializeSdk(this, sdkConfiguration, initSdkListener());
+        final SdkConfiguration.Builder configBuilder = new SdkConfiguration.Builder("b195f8dd8ded45fe847ad89ed1d016da");
+        if (BuildConfig.DEBUG) {
+            configBuilder.withLogLevel(DEBUG);
+        } else {
+            configBuilder.withLogLevel(INFO);
+        }
+        MoPub.initializeSdk(this, configBuilder.build(), initSdkListener());
 
         mConsentStatusChangeListener = initConsentChangeListener();
         mPersonalInfoManager = MoPub.getPersonalInformationManager();
@@ -115,7 +142,7 @@ private void createMoPubListFragment(@NonNull final Intent intent) {
             mMoPubListFragment = new MoPubListFragment();
             mMoPubListFragment.setArguments(intent.getExtras());
             getSupportFragmentManager().beginTransaction()
-                    .replace(R.id.fragment_container, mMoPubListFragment).commit();
+                    .replace(R.id.fragment_container, mMoPubListFragment, LIST_FRAGMENT_TAG).commit();
 
             mDeeplinkIntent = intent;
         }
@@ -140,6 +167,7 @@ private SdkInitializationListener initSdkListener() {
 
             @Override
             public void onInitializationFinished() {
+                syncNavigationMenu();
                 Utils.logToast(MoPubSampleActivity.this, "SDK initialized.");
                 if (mPersonalInfoManager != null && mPersonalInfoManager.shouldShowConsentDialog()) {
                     mPersonalInfoManager.loadConsentDialog(initDialogLoadListener());
@@ -179,4 +207,154 @@ public void onConsentDialogLoadFailed(@NonNull MoPubErrorCode moPubErrorCode) {
             }
         };
     }
+
+    @Override
+    public void onBackPressed() {
+        if (mDrawerLayout != null && mDrawerLayout.isDrawerOpen(GravityCompat.START)) {
+            mDrawerLayout.closeDrawer(GravityCompat.START);
+        } else {
+            super.onBackPressed();
+        }
+    }
+
+    /*
+        MoPub Sample specific test code
+     */
+    private static final String PROD_HOST = Constants.HOST;
+    private static final String TEST_HOST = "ads-staging.mopub.com";
+    private static final String PRIVACY_FRAGMENT_TAG = "privacy_info_fragment";
+    private static final String NETWORKS_FRAGMENT_TAG = "networks_info_fragment";
+    private static final String LIST_FRAGMENT_TAG = "list_fragment";
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        // Inflate the menu; this adds items to the action bar if it is present.
+        getMenuInflater().inflate(R.menu.main, menu);
+        return true;
+    }
+
+    private void setupNavigationDrawer(Toolbar toolbar) {
+        mDrawerLayout = findViewById(R.id.drawer_layout);
+        final ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this,
+                mDrawerLayout, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
+        mDrawerLayout.addDrawerListener(toggle);
+        toggle.syncState();
+
+        final NavigationView navigationView = findViewById(R.id.nav_view);
+        navigationView.setNavigationItemSelectedListener(this);
+    }
+
+    private void syncNavigationMenu() {
+        final NavigationView navigationView = findViewById(R.id.nav_view);
+
+        final String host = Constants.HOST;
+        final boolean production = PROD_HOST.equalsIgnoreCase(host);
+        navigationView.getMenu().findItem(R.id.nav_production).setChecked(production);
+        navigationView.getMenu().findItem(R.id.nav_staging).setChecked(!production);
+
+        final PersonalInfoManager manager = MoPub.getPersonalInformationManager();
+        if (manager != null) {
+            final ConsentData consentData = manager.getConsentData();
+            navigationView.getMenu().findItem(R.id.nav_force_gdpr).setChecked(consentData.isForceGdprApplies());
+
+            final ConsentStatus consentStatus = manager.getPersonalInfoConsentStatus();
+
+            if (consentStatus.equals(ConsentStatus.POTENTIAL_WHITELIST)) {
+                navigationView.getMenu().findItem(R.id.nav_privacy_grant).setChecked(true);
+            } else if (consentStatus.equals(ConsentStatus.EXPLICIT_NO)) {
+                navigationView.getMenu().findItem(R.id.nav_privacy_revoke).setChecked(true);
+            }
+        }
+    }
+
+    @Override
+    public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {
+        switch (menuItem.getItemId()) {
+            case R.id.nav_production:
+                onNavEnvironemnt(true);
+                break;
+            case R.id.nav_staging:
+                onNavEnvironemnt(false);
+                break;
+            case R.id.nav_privacy_info:
+                onNavPrivacyInfo();
+                break;
+            case R.id.nav_privacy_grant:
+                onNavChangeConsent(true);
+                break;
+            case R.id.nav_privacy_revoke:
+                onNavChangeConsent(false);
+                break;
+            case R.id.nav_force_gdpr:
+                onNavForceGdpr();
+                break;
+            case R.id.nav_adapters_info:
+                onNavAdaptersInfo();
+                break;
+        }
+
+        syncNavigationMenu();
+
+        if (mDrawerLayout != null) {
+            mDrawerLayout.closeDrawers();
+        }
+
+        return false;
+    }
+
+    private void onNavEnvironemnt(boolean production) {
+        setEndpoint(production ? PROD_HOST : TEST_HOST);
+    }
+
+    private void onNavPrivacyInfo() {
+        final FragmentManager manager = getSupportFragmentManager();
+        if (manager.findFragmentByTag(PRIVACY_FRAGMENT_TAG) == null) {
+            manager.beginTransaction()
+                    .replace(R.id.fragment_container, new PrivacyInfoFragment(), PRIVACY_FRAGMENT_TAG)
+                    .addToBackStack(PRIVACY_FRAGMENT_TAG)
+                    .commit();
+        }
+    }
+
+    private void onNavChangeConsent(boolean grant) {
+        final FragmentManager manager = getSupportFragmentManager();
+        final MoPubListFragment listFragment = (MoPubListFragment) manager.findFragmentByTag(LIST_FRAGMENT_TAG);
+        if (listFragment == null) {
+            MoPubLog.log(MoPubLog.SdkLogEvent.CUSTOM, getString(R.string.list_fragment_not_found));
+            return; // fragment is not ready to update the consent
+        }
+        if (!listFragment.onChangeConsent(grant)) {
+            return; // fragment is not ready to update the consent
+        }
+
+        final NavigationView navigationView = findViewById(R.id.nav_view);
+        navigationView.getMenu().findItem(R.id.nav_privacy_grant).setChecked(grant);
+        navigationView.getMenu().findItem(R.id.nav_privacy_revoke).setChecked(!grant);
+    }
+
+    private void onNavForceGdpr() {
+        final PersonalInfoManager manager = MoPub.getPersonalInformationManager();
+        if (manager != null) {
+            manager.forceGdprApplies();
+        }
+    }
+
+    private void onNavAdaptersInfo() {
+        final FragmentManager manager = getSupportFragmentManager();
+        if (manager.findFragmentByTag(NETWORKS_FRAGMENT_TAG) == null) {
+            manager.beginTransaction()
+                    .replace(R.id.fragment_container, new NetworksInfoFragment(), NETWORKS_FRAGMENT_TAG)
+                    .addToBackStack(NETWORKS_FRAGMENT_TAG)
+                    .commit();
+        }
+    }
+
+    private void setEndpoint(@NonNull String host) {
+        try {
+            Field field = Reflection.getPrivateField(com.mopub.common.Constants.class, "HOST");
+            field.set(null, host);
+        } catch (Exception e) {
+            MoPubLog.log(MoPubLog.SdkLogEvent.CUSTOM_WITH_THROWABLE, "Can't change HOST.", e);
+        }
+    }
 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
index 286cc8e7..5b728c5b 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleListAdapter.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleListAdapter.java
index a094b47e..bef0967f 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleListAdapter.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleListAdapter.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MrectDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MrectDetailFragment.java
index 18974eb9..4cc954db 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MrectDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MrectDetailFragment.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
index ad2c92ce..187a68be 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
index 5f8bd7ac..a031a998 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
index b3a89c25..a67eb059 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NetworksInfoFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NetworksInfoFragment.java
new file mode 100644
index 00000000..35ad3a34
--- /dev/null
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NetworksInfoFragment.java
@@ -0,0 +1,93 @@
+package com.mopub.simpleadsdemo;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.v4.app.Fragment;
+import android.support.v7.widget.DividerItemDecoration;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mopub.common.MoPub;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static android.support.v7.widget.DividerItemDecoration.VERTICAL;
+
+public class NetworksInfoFragment extends Fragment {
+    @Override
+    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        final View view = inflater.inflate(R.layout.networks_info_fragment, container, false);
+
+        final List<String> networks = MoPub.getAdapterConfigurationInfo();
+        if (networks != null && !networks.isEmpty()) {
+            RecyclerView recyclerView = view.findViewById(R.id.networks_recycler_view);
+            recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
+            recyclerView.setAdapter(new NetworksInfoAdapter(networks));
+            recyclerView.addItemDecoration(new DividerItemDecoration(recyclerView.getContext(), VERTICAL));
+
+            view.findViewById(R.id.text_no_adapters).setVisibility(View.GONE);
+        }
+
+        final Button closeButton = view.findViewById(R.id.networks_close_btn);
+        closeButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                final Activity activity = getActivity();
+                if (activity != null) {
+                    activity.onBackPressed();
+                }
+            }
+        });
+        return view;
+    }
+
+    class NetworksInfoAdapter extends RecyclerView.Adapter<NetworksInfoAdapter.ViewHolder> {
+        @NonNull
+        final List<String> mNetworksInfo;
+
+        NetworksInfoAdapter(@Nullable final List<String> networksInfo) {
+            if (networksInfo != null) {
+                mNetworksInfo = networksInfo;
+            } else {
+                mNetworksInfo = new ArrayList<>();
+            }
+        }
+
+        @NonNull
+        @Override
+        public NetworksInfoAdapter.ViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {
+            final View itemView = LayoutInflater.from(viewGroup.getContext())
+                    .inflate(android.R.layout.simple_selectable_list_item, viewGroup, false);
+            final NetworksInfoAdapter.ViewHolder viewHolder = new NetworksInfoAdapter.ViewHolder(itemView);
+            itemView.setTag(viewHolder);
+            return viewHolder;
+        }
+
+        @Override
+        public void onBindViewHolder(@NonNull NetworksInfoAdapter.ViewHolder viewHolder, int i) {
+            viewHolder.nameTextView.setText(mNetworksInfo.get(i));
+        }
+
+        @Override
+        public int getItemCount() {
+            return mNetworksInfo.size();
+        }
+
+        class ViewHolder extends RecyclerView.ViewHolder {
+            final TextView nameTextView;
+
+            ViewHolder(View itemView) {
+                super(itemView);
+                nameTextView = itemView.findViewById(android.R.id.text1);
+            }
+        }
+    }
+}
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/PrivacyInfoFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/PrivacyInfoFragment.java
new file mode 100644
index 00000000..ff80397f
--- /dev/null
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/PrivacyInfoFragment.java
@@ -0,0 +1,189 @@
+package com.mopub.simpleadsdemo;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.v4.app.Fragment;
+import android.support.v7.widget.DividerItemDecoration;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.text.TextUtils;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mopub.common.MoPub;
+import com.mopub.common.privacy.ConsentData;
+import com.mopub.common.privacy.ConsentStatus;
+import com.mopub.common.privacy.PersonalInfoManager;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static android.support.v7.widget.DividerItemDecoration.VERTICAL;
+
+public class PrivacyInfoFragment extends Fragment {
+
+    private static class PrivacyItem {
+        @NonNull
+        final String mTitle;
+        @NonNull
+        final String mDescription;
+        @NonNull
+        final String mValue;
+
+        PrivacyItem(@Nullable String title, @Nullable String value, @Nullable String description) {
+            mTitle = title == null ? "" : title;
+            mValue = value == null ? "" : value;
+            mDescription = description == null ? "" : description;
+        }
+    }
+
+    private static final int TYPE_PRIVACY_INFO = 0;
+    private static final int TYPE_DIVIDER = 1;
+
+    @Override
+    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        final View view = inflater.inflate(R.layout.privacy_info_fragment, container, false);
+
+        final List<PrivacyItem> privacySettings = readPrivacySettings();
+        if (privacySettings != null && !privacySettings.isEmpty()) {
+            RecyclerView recyclerView = view.findViewById(R.id.privacy_recycler_view);
+            recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
+            recyclerView.setAdapter(new PrivacyAdapter(privacySettings));
+            recyclerView.addItemDecoration(new DividerItemDecoration(recyclerView.getContext(), VERTICAL));
+        }
+
+        final Button closeButton = view.findViewById(R.id.privacy_close_btn);
+        closeButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                final Activity activity = getActivity();
+                if (activity != null) {
+                    activity.onBackPressed();
+                }
+            }
+        });
+        return view;
+    }
+
+    class PrivacyAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {
+        @NonNull
+        final List<PrivacyItem> mPrivacyInfo;
+
+        PrivacyAdapter(@Nullable final List<PrivacyItem> privacyInfo) {
+            if (privacyInfo != null) {
+                mPrivacyInfo = privacyInfo;
+            } else {
+                mPrivacyInfo = new ArrayList<>();
+            }
+        }
+
+        @NonNull
+        @Override
+        public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int viewType) {
+            final LayoutInflater inflater = LayoutInflater.from(viewGroup.getContext());
+            @NonNull RecyclerView.ViewHolder viewHolder;
+            if (viewType == TYPE_PRIVACY_INFO) {
+                final View itemView = inflater.inflate(R.layout.privacy_info_item, viewGroup, false);
+                viewHolder = new PrivacyAdapter.ViewHolder(itemView);
+                itemView.setTag(viewHolder);
+            } else {
+                final View itemView = inflater.inflate(R.layout.privacy_info_divider, viewGroup, false);
+                viewHolder = new PrivacyAdapter.DividerViewHolder(itemView);
+                itemView.setTag(viewHolder);
+            }
+
+            return viewHolder;
+        }
+
+        @Override
+        public void onBindViewHolder(@NonNull RecyclerView.ViewHolder viewHolder, int i) {
+            final PrivacyItem item = mPrivacyInfo.get(i);
+            if (isContentItem(item)) {
+                PrivacyAdapter.ViewHolder holder = (PrivacyAdapter.ViewHolder) viewHolder;
+                holder.titleTextView.setText(item.mTitle);
+                holder.descTextView.setText(item.mDescription);
+                holder.valueTextView.setText(item.mValue);
+            } else {
+                PrivacyAdapter.DividerViewHolder holder = (PrivacyAdapter.DividerViewHolder) viewHolder;
+                holder.dividerTextView.setText(item.mDescription);
+            }
+        }
+
+        @Override
+        public int getItemCount() {
+            return mPrivacyInfo.size();
+        }
+
+        @Override
+        public int getItemViewType(int position) {
+            final PrivacyItem item = mPrivacyInfo.get(position);
+            return isContentItem(item) ? TYPE_PRIVACY_INFO : TYPE_DIVIDER;
+        }
+
+        // viewholder
+        class ViewHolder extends RecyclerView.ViewHolder {
+            final TextView titleTextView;
+            final TextView descTextView;
+            final TextView valueTextView;
+
+            ViewHolder(View itemView) {
+                super(itemView);
+                titleTextView = itemView.findViewById(R.id.privacy_title_view);
+                descTextView = itemView.findViewById(R.id.privacy_desc_view);
+                valueTextView = itemView.findViewById(R.id.privacy_value_view);
+            }
+        }
+
+        // divider
+        class DividerViewHolder extends RecyclerView.ViewHolder {
+            final TextView dividerTextView;
+
+            DividerViewHolder(View itemView) {
+                super(itemView);
+                dividerTextView = itemView.findViewById(R.id.text_divider);
+            }
+        }
+    }
+
+    private static boolean isContentItem(@Nullable PrivacyItem item) {
+        return !(item != null && TextUtils.isEmpty(item.mTitle) && TextUtils.isEmpty(item.mValue));
+    }
+
+    private static List<PrivacyItem> readPrivacySettings() {
+        final PersonalInfoManager manager = MoPub.getPersonalInformationManager();
+        if (manager == null) {
+            return new ArrayList<>();
+        }
+
+        final ConsentData consentData = manager.getConsentData();
+        final ConsentStatus status = manager.getPersonalInfoConsentStatus();
+        final Boolean gdprApplies = manager.gdprApplies();
+
+        final String gdprAppliesString = (gdprApplies == null || gdprApplies) ? "true" : "false";
+
+        ArrayList<PrivacyItem> list = new ArrayList<>();
+        list.add(new PrivacyItem("", "", "Allowable Data Collection"));
+        list.add(new PrivacyItem("Is GDPR applicable?", gdprAppliesString, ""));
+        list.add(new PrivacyItem("Consent Status", status.getValue(), ""));
+        list.add(new PrivacyItem("Can Collect PII", manager.canCollectPersonalInformation() ? "true" : "false", ""));
+        list.add(new PrivacyItem("Should Show Consent Dialog", manager.shouldShowConsentDialog() ? "true" : "false", ""));
+        list.add(new PrivacyItem("Is Whitelisted", status.equals(ConsentStatus.POTENTIAL_WHITELIST) ? "true" : "false", ""));
+        list.add(new PrivacyItem("", "", "Current Versions"));
+        list.add(new PrivacyItem("Current Vendor List Url", "", consentData.getCurrentVendorListLink()));
+        list.add(new PrivacyItem("Current Vendor List Version", consentData.getCurrentVendorListVersion(), ""));
+        list.add(new PrivacyItem("Current Privacy Policy Url", "", consentData.getCurrentPrivacyPolicyLink()));
+        list.add(new PrivacyItem("Current Privacy Policy Version", consentData.getCurrentPrivacyPolicyVersion(), ""));
+        list.add(new PrivacyItem("Current IAB Vendor List Format", consentData.getCurrentVendorListIabFormat(), ""));
+        list.add(new PrivacyItem("", "", "Consented Versions"));
+        list.add(new PrivacyItem("Consented Vendor List Version", consentData.getConsentedVendorListVersion(), ""));
+        list.add(new PrivacyItem("Consented Privacy Policy Version", consentData.getConsentedPrivacyPolicyVersion(), ""));
+        list.add(new PrivacyItem("Consented IAB Vendor List Version", consentData.getConsentedVendorListIabFormat(), ""));
+
+        return list;
+    }
+}
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
index aaa80aa4..7d27a70e 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -17,17 +17,13 @@
 import android.view.ViewGroup;
 import android.widget.Button;
 
-import com.mopub.common.MoPub;
 import com.mopub.common.MoPubReward;
-import com.mopub.common.SdkConfiguration;
 import com.mopub.mobileads.MoPubErrorCode;
 import com.mopub.mobileads.MoPubRewardedVideoListener;
 import com.mopub.mobileads.MoPubRewardedVideoManager.RequestParameters;
 import com.mopub.mobileads.MoPubRewardedVideos;
 
 import java.util.HashMap;
-import java.util.LinkedList;
-import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
@@ -37,11 +33,6 @@
 
 public class RewardedVideoDetailFragment extends Fragment implements MoPubRewardedVideoListener {
 
-    private static boolean sRewardedVideoInitialized;
-
-    // Include any custom event rewarded video classes, if available, for initialization.
-    private static final List<String> sNetworksToInit = new LinkedList<>();
-
     @Nullable private Button mShowButton;
     @Nullable private String mAdUnitId;
     @Nullable private Map<String, MoPubReward> mMoPubRewardsMap;
@@ -59,12 +50,6 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
         hideSoftKeyboard(views.mKeywordsField);
         hideSoftKeyboard(views.mUserDataKeywordsField);
 
-        if (!sRewardedVideoInitialized) {
-            MoPub.initializeSdk(getActivity(), new SdkConfiguration.Builder(
-                            "b195f8dd8ded45fe847ad89ed1d016da")
-                            .withNetworksToInit(sNetworksToInit).build(), null);
-            sRewardedVideoInitialized = true;
-        }
         MoPubRewardedVideos.setRewardedVideoListener(this);
 
         mAdUnitId = adConfiguration.getAdUnitId();
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SkyscraperDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SkyscraperDetailFragment.java
index cf9c606b..00f34dfd 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SkyscraperDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SkyscraperDetailFragment.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/Utils.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/Utils.java
index 03d25605..944b6294 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/Utils.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/Utils.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sample/src/test/resources/com/mopub/robolectric.properties b/mopub-sample/src/test/resources/com/mopub/robolectric.properties
deleted file mode 100644
index 6f46a8e5..00000000
--- a/mopub-sample/src/test/resources/com/mopub/robolectric.properties
+++ /dev/null
@@ -1,5 +0,0 @@
-# Copyright 2018 Twitter, Inc.
-# Licensed under the MoPub SDK License Agreement
-# http://www.mopub.com/legal/sdk-license-agreement/
-
-shadows=com.mopub.nativeads.test.support.MoPubShadowDisplay,com.mopub.nativeads.test.support.MoPubShadowBitmap
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index 09c1ea31..8b2aaa08 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -10,18 +10,26 @@ dependencies {
     api project(':ThirdParty:Java:Android:MoPub:mopub-sdk:mopub-sdk-interstitial')
 
     testImplementation 'junit:junit:4.12'
-    testImplementation 'org.robolectric:robolectric:3.8'
+    testImplementation 'org.robolectric:robolectric:4.0-beta-1'
     testImplementation 'org.robolectric:shadows-support-v4:3.3.2'
-    testImplementation 'org.robolectric:shadows-httpclient:3.5.1'
+    testImplementation 'org.robolectric:shadows-httpclient:4.0-beta-1'
     testImplementation 'com.squareup:fest-android:1.0.7'
-    testImplementation 'org.mockito:mockito-core:1.10.8'
-    testImplementation 'org.powermock:powermock-module-junit4:1.6.6'
-    testImplementation 'org.powermock:powermock-module-junit4-rule:1.6.6'
-    testImplementation 'org.powermock:powermock-api-mockito:1.6.6'
-    testImplementation 'org.powermock:powermock-classloading-xstream:1.6.6'
+    testImplementation 'org.mockito:mockito-core:1.10.19'
+
+    ['powermock-api-mockito',
+     'powermock-core',
+     'powermock-module-junit4',
+     'powermock-module-junit4-rule',
+     'powermock-classloading-xstream'].each {
+        testImplementation ("org.powermock:${it}:1.7.4") {
+            exclude group: 'org.mockito', module: 'mockito-core'
+        }
+    }
 }
 
 android {
+    useLibrary 'org.apache.http.legacy'
+
     testOptions {
         unitTests {
             includeAndroidResources = true
diff --git a/mopub-sdk/build.properties b/mopub-sdk/build.properties
index 1093e1d0..9d49365d 100644
--- a/mopub-sdk/build.properties
+++ b/mopub-sdk/build.properties
@@ -1,4 +1,4 @@
-# Copyright 2018 Twitter, Inc.
+# Copyright 2018-2019 Twitter, Inc.
 # Licensed under the MoPub SDK License Agreement
 # http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/gradlew.bat b/mopub-sdk/gradlew.bat
index 370f2fcb..41a6cb9e 100644
--- a/mopub-sdk/gradlew.bat
+++ b/mopub-sdk/gradlew.bat
@@ -1,4 +1,4 @@
-@rem Copyright 2018 Twitter, Inc.
+@rem Copyright 2018-2019 Twitter, Inc.
 @rem Licensed under the MoPub SDK License Agreement
 @rem http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-banner/build.gradle b/mopub-sdk/mopub-sdk-banner/build.gradle
index 90e19137..1b8a9ede 100644
--- a/mopub-sdk/mopub-sdk-banner/build.gradle
+++ b/mopub-sdk/mopub-sdk-banner/build.gradle
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/BannerVisibilityTracker.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/BannerVisibilityTracker.java
index dcc5f12c..7426ac8d 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/BannerVisibilityTracker.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/BannerVisibilityTracker.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -22,6 +22,7 @@
 import java.lang.ref.WeakReference;
 
 import static android.view.ViewTreeObserver.OnPreDrawListener;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 
 /**
  * Tracks banner views to determine when they become visible, where visibility is determined by
@@ -118,13 +119,13 @@ private void setViewTreeObserver(@Nullable final Context context, @Nullable fina
 
         final View rootView = Views.getTopmostView(context, view);
         if (rootView == null) {
-            MoPubLog.d("Unable to set Visibility Tracker due to no available root view.");
+            MoPubLog.log(CUSTOM, "Unable to set Visibility Tracker due to no available root view.");
             return;
         }
 
         final ViewTreeObserver viewTreeObserver = rootView.getViewTreeObserver();
         if (!viewTreeObserver.isAlive()) {
-            MoPubLog.w("Visibility Tracker was unable to track views because the"
+            MoPubLog.log(CUSTOM, "Visibility Tracker was unable to track views because the"
                     + " root view tree observer was not alive");
             return;
         }
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java
index 99dd04ac..5d987e21 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
index 32a5b083..d0952c74 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -18,7 +18,6 @@
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.ReflectionTarget;
-import com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
 import com.mopub.mobileads.factories.CustomEventBannerFactory;
 
 import java.util.Map;
@@ -29,12 +28,15 @@
 import static com.mopub.common.DataKeys.AD_WIDTH;
 import static com.mopub.common.DataKeys.BANNER_IMPRESSION_PIXEL_COUNT_ENABLED;
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM_WITH_THROWABLE;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_TIMEOUT;
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 
-public class CustomEventBannerAdapter implements CustomEventBannerListener {
+public class CustomEventBannerAdapter implements InternalCustomEventBannerListener {
     public static final int DEFAULT_BANNER_TIMEOUT_DELAY = Constants.TEN_SECONDS_MILLIS;
+
     private boolean mInvalidated;
     private MoPubView mMoPubView;
     private Context mContext;
@@ -62,17 +64,19 @@ public CustomEventBannerAdapter(@NonNull MoPubView moPubView,
         mTimeout = new Runnable() {
             @Override
             public void run() {
-                MoPubLog.d("Third-party network timed out.");
+                MoPubLog.log(CUSTOM, "CustomEventBannerAdapter failed with code " +
+                        NETWORK_TIMEOUT.getIntCode() + " and message " +
+                        NETWORK_TIMEOUT);
                 onBannerFailed(NETWORK_TIMEOUT);
                 invalidate();
             }
         };
 
-        MoPubLog.d("Attempting to invoke custom event: " + className);
+        MoPubLog.log(CUSTOM,  "Attempting to invoke custom event: " + className);
         try {
             mCustomEventBanner = CustomEventBannerFactory.create(className);
         } catch (Exception exception) {
-            MoPubLog.d("Couldn't locate or instantiate custom event: " + className + ".");
+            MoPubLog.log(CUSTOM,  "Couldn't locate or instantiate custom event: " + className + ".");
             mMoPubView.loadFailUrl(ADAPTER_NOT_FOUND);
             return;
         }
@@ -107,7 +111,9 @@ void loadAd() {
         try {
             mCustomEventBanner.loadBanner(mContext, this, mLocalExtras, mServerExtras);
         } catch (Exception e) {
-            MoPubLog.d("Loading a custom event banner threw an exception.", e);
+            MoPubLog.log(CUSTOM, "loadAd() failed with code " +
+                    MoPubErrorCode.INTERNAL_ERROR.getIntCode() + " and message " +
+                    MoPubErrorCode.INTERNAL_ERROR);
             onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
         }
     }
@@ -120,14 +126,14 @@ void invalidate() {
             try {
                 mCustomEventBanner.onInvalidate();
             } catch (Exception e) {
-                MoPubLog.d("Invalidating a custom event banner threw an exception", e);
+                MoPubLog.log(CUSTOM_WITH_THROWABLE,  "Invalidating a custom event banner threw an exception", e);
             }
         }
         if (mVisibilityTracker != null) {
             try {
                 mVisibilityTracker.destroy();
             } catch (Exception e) {
-                MoPubLog.d("Destroying a banner visibility tracker threw an exception", e);
+                MoPubLog.log(CUSTOM_WITH_THROWABLE,  "Destroying a banner visibility tracker threw an exception", e);
             }
             mVisibilityTracker = null;
         }
@@ -190,14 +196,14 @@ private void parseBannerImpressionTrackingHeaders() {
             try {
                 mImpressionMinVisibleDips = Integer.parseInt(impressionMinVisibleDipsString);
             } catch (NumberFormatException e) {
-                MoPubLog.d("Cannot parse integer from header "
+                MoPubLog.log(CUSTOM,  "Cannot parse integer from header "
                         + DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS);
             }
 
             try {
                 mImpressionMinVisibleMs = Integer.parseInt(impressionMinVisibleMsString);
             } catch (NumberFormatException e) {
-                MoPubLog.d("Cannot parse integer from header "
+                MoPubLog.log(CUSTOM,  "Cannot parse integer from header "
                         + DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS);
             }
 
@@ -216,6 +222,8 @@ public void onBannerLoaded(View bannerView) {
             return;
         }
 
+        MoPubLog.log(CUSTOM, "onBannerLoaded() success. Attempting to show.");
+
         cancelTimeout();
 
         if (mMoPubView != null) {
@@ -230,8 +238,8 @@ public void onBannerLoaded(View bannerView) {
             if (mIsVisibilityImpressionTrackingEnabled &&
                     mCustomEventBanner != null &&
                     mCustomEventBanner.isAutomaticImpressionAndClickTrackingEnabled()) {
-                // Disable autorefresh temporarily until an impression happens.
-                mMoPubView.pauseAutorefresh();
+                // Disable autoRefresh temporarily until an impression happens.
+                mMoPubView.pauseAutoRefresh();
                 // Set up visibility tracker and listener if in experiment
                 mVisibilityTracker = new BannerVisibilityTracker(mContext, mMoPubView, bannerView,
                         mImpressionMinVisibleDips, mImpressionMinVisibleMs);
@@ -243,7 +251,7 @@ public void onVisibilityChanged() {
                         if (mCustomEventBanner != null) {
                             mCustomEventBanner.trackMpxAndThirdPartyImpressions();
                         }
-                        mMoPubView.resumeAutorefresh();
+                        mMoPubView.resumeAutoRefresh();
                     }
                 });
             }
@@ -258,6 +266,12 @@ public void onVisibilityChanged() {
                     mMoPubView.trackNativeImpression();
                 }
             }
+
+            MoPubLog.log(CUSTOM, "onBannerLoaded() - Show successful.");
+        } else {
+            MoPubLog.log(CUSTOM, "onBannerLoaded() - Show failed with code " +
+                    MoPubErrorCode.INTERNAL_ERROR.getIntCode() + " and message " +
+                    MoPubErrorCode.INTERNAL_ERROR);
         }
     }
 
@@ -283,7 +297,7 @@ public void onBannerExpanded() {
             return;
         }
 
-        mMoPubView.expand();
+        mMoPubView.engageOverlay();
         mMoPubView.adPresentedOverlay();
     }
 
@@ -293,7 +307,7 @@ public void onBannerCollapsed() {
             return;
         }
 
-        mMoPubView.collapse();
+        mMoPubView.dismissOverlay();
         mMoPubView.adClosed();
     }
 
@@ -328,4 +342,18 @@ public void onBannerImpression() {
     public void onLeaveApplication() {
         onBannerClicked();
     }
+
+    @Override
+    public void onPauseAutoRefresh() {
+        if (mMoPubView != null) {
+            mMoPubView.engageOverlay();
+        }
+    }
+
+    @Override
+    public void onResumeAutoRefresh() {
+        if (mMoPubView != null) {
+            mMoPubView.dismissOverlay();
+        }
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/DefaultBannerAdListener.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/DefaultBannerAdListener.java
index 21552d61..f84e7320 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/DefaultBannerAdListener.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/DefaultBannerAdListener.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
index 978fb7ad..f5a44fbf 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -20,11 +20,17 @@
 
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
 import static com.mopub.common.DataKeys.BANNER_IMPRESSION_PIXEL_COUNT_ENABLED;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_FAILED;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.SHOW_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.SHOW_SUCCESS;
 import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
 import static com.mopub.mobileads.MoPubErrorCode.INTERNAL_ERROR;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 
 public class HtmlBanner extends CustomEventBanner {
+    public static final String ADAPTER_NAME = HtmlBanner.class.getSimpleName();
     @Nullable private HtmlBannerWebView mHtmlBannerWebView;
     @Nullable private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
     private boolean mBannerImpressionPixelCountEnabled = false;
@@ -36,6 +42,7 @@ protected void loadBanner(
             CustomEventBannerListener customEventBannerListener,
             Map<String, Object> localExtras,
             Map<String, String> serverExtras) {
+        MoPubLog.log(LOAD_ATTEMPTED, ADAPTER_NAME);
         final Object bannerImpressionPixelCountEnabledObject = localExtras.get(
                 BANNER_IMPRESSION_PIXEL_COUNT_ENABLED);
         if (bannerImpressionPixelCountEnabledObject instanceof Boolean) {
@@ -52,11 +59,16 @@ protected void loadBanner(
             try {
                 adReport = (AdReport) localExtras.get(AD_REPORT_KEY);
             } catch (ClassCastException e) {
-                MoPubLog.e("LocalExtras contained an incorrect type.");
+                MoPubLog.log(LOAD_FAILED, ADAPTER_NAME,
+                        INTERNAL_ERROR.getIntCode(),
+                        INTERNAL_ERROR);
                 customEventBannerListener.onBannerFailed(INTERNAL_ERROR);
                 return;
             }
         } else {
+            MoPubLog.log(LOAD_FAILED, ADAPTER_NAME,
+                    NETWORK_INVALID_STATE.getIntCode(),
+                    NETWORK_INVALID_STATE);
             customEventBannerListener.onBannerFailed(NETWORK_INVALID_STATE);
             return;
         }
@@ -67,17 +79,20 @@ protected void loadBanner(
         // We only measure viewability when we have an activity context. This sets up a delayed
         // viewability session if we have the new pixel-counting banner impression tracking enabled.
         // Otherwise, set up a regular display session.
+
+        MoPubLog.log(SHOW_ATTEMPTED, ADAPTER_NAME);
         if (context instanceof Activity) {
             final Activity activity = (Activity) context;
-            mWeakActivity = new WeakReference<Activity>(activity);
+            mWeakActivity = new WeakReference<>(activity);
             mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(activity);
             mExternalViewabilitySessionManager.createDisplaySession(activity, mHtmlBannerWebView,
                     mBannerImpressionPixelCountEnabled);
         } else {
-            MoPubLog.d("Unable to start viewability session for HTML banner: Context provided was not an Activity.");
+            MoPubLog.log(CUSTOM, ADAPTER_NAME, "Unable to start viewability session for HTML banner: Context provided was not an Activity.");
         }
 
         mHtmlBannerWebView.loadHtmlResponse(htmlData);
+        MoPubLog.log(SHOW_SUCCESS, ADAPTER_NAME);
     }
 
     @Override
@@ -111,7 +126,7 @@ protected void trackMpxAndThirdPartyImpressions() {
             if (activity != null) {
                 mExternalViewabilitySessionManager.startDeferredDisplaySession(activity);
             } else {
-                MoPubLog.d("Lost the activity for deferred Viewability tracking. Dropping session.");
+                MoPubLog.log(CUSTOM, ADAPTER_NAME, "Lost the activity for deferred Viewability tracking. Dropping session.");
             }
         }
     }
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java
index da78130d..ba239444 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/InternalCustomEventBannerListener.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/InternalCustomEventBannerListener.java
new file mode 100644
index 00000000..bbbef382
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/InternalCustomEventBannerListener.java
@@ -0,0 +1,10 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.mobileads;
+
+public interface InternalCustomEventBannerListener extends CustomEventBanner.CustomEventBannerListener {
+    void onPauseAutoRefresh();
+    void onResumeAutoRefresh();
+}
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java
index 0a0539cc..8b2ca17a 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerFactory.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerFactory.java
index 70bbe267..eced983a 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerFactory.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
index 2f339bbd..53517c5f 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
index 8cf24853..f888e179 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -16,6 +16,7 @@
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.AdViewController;
 import com.mopub.mobileads.CustomEventBanner;
+import com.mopub.mobileads.InternalCustomEventBannerListener;
 import com.mopub.mobileads.factories.MraidControllerFactory;
 import com.mopub.mraid.MraidController.MraidListener;
 
@@ -24,12 +25,20 @@
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
 import static com.mopub.common.DataKeys.BANNER_IMPRESSION_PIXEL_COUNT_ENABLED;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.CLICKED;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_FAILED;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_SUCCESS;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.SHOW_ATTEMPTED;
 import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
 import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
 
 class MraidBanner extends CustomEventBanner {
+    public static final String ADAPTER_NAME = MraidBanner.class.getSimpleName();
+
     @Nullable private MraidController mMraidController;
-    @Nullable private CustomEventBannerListener mBannerListener;
+    @Nullable private InternalCustomEventBannerListener mBannerListener;
     @Nullable private MraidWebViewDebugListener mDebugListener;
     @Nullable private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
     private boolean mBannerImpressionPixelCountEnabled = false;
@@ -39,12 +48,25 @@ protected void loadBanner(@NonNull final Context context,
                     @NonNull final CustomEventBannerListener customEventBannerListener,
                     @NonNull final Map<String, Object> localExtras,
                     @NonNull final Map<String, String> serverExtras) {
-        mBannerListener = customEventBannerListener;
+        try {
+            mBannerListener = (InternalCustomEventBannerListener) customEventBannerListener;
+        } catch (ClassCastException e) {
+            MoPubLog.log(LOAD_FAILED, ADAPTER_NAME,
+                    MRAID_LOAD_ERROR.getIntCode(),
+                    MRAID_LOAD_ERROR);
+            customEventBannerListener.onBannerFailed(MRAID_LOAD_ERROR);
+            return;
+        }
+
+        MoPubLog.log(LOAD_ATTEMPTED, ADAPTER_NAME);
 
         String htmlData;
         if (extrasAreValid(serverExtras)) {
             htmlData = serverExtras.get(HTML_RESPONSE_BODY_KEY);
         } else {
+            MoPubLog.log(LOAD_FAILED, ADAPTER_NAME,
+                    MRAID_LOAD_ERROR.getIntCode(),
+                    MRAID_LOAD_ERROR);
             mBannerListener.onBannerFailed(MRAID_LOAD_ERROR);
             return;
         }
@@ -60,7 +82,9 @@ protected void loadBanner(@NonNull final Context context,
             mMraidController = MraidControllerFactory.create(
                     context, adReport, PlacementType.INLINE);
         } catch (ClassCastException e) {
-            MoPubLog.w("MRAID banner creating failed:", e);
+            MoPubLog.log(LOAD_FAILED, ADAPTER_NAME,
+                    MRAID_LOAD_ERROR.getIntCode(),
+                    MRAID_LOAD_ERROR);
             mBannerListener.onBannerFailed(MRAID_LOAD_ERROR);
             return;
         }
@@ -71,11 +95,16 @@ protected void loadBanner(@NonNull final Context context,
             public void onLoaded(View view) {
                 // Honoring the server dimensions forces the WebView to be the size of the banner
                 AdViewController.setShouldHonorServerDimensions(view);
+                MoPubLog.log(LOAD_SUCCESS, ADAPTER_NAME);
+                MoPubLog.log(SHOW_ATTEMPTED, ADAPTER_NAME);
                 mBannerListener.onBannerLoaded(view);
             }
 
             @Override
             public void onFailedToLoad() {
+                MoPubLog.log(LOAD_FAILED, ADAPTER_NAME,
+                        MRAID_LOAD_ERROR.getIntCode(),
+                        MRAID_LOAD_ERROR);
                 mBannerListener.onBannerFailed(MRAID_LOAD_ERROR);
             }
 
@@ -85,8 +114,18 @@ public void onExpand() {
                 mBannerListener.onBannerClicked();
             }
 
+            @Override
+            public void onResize(final boolean toOriginalSize) {
+                if (toOriginalSize) {
+                    mBannerListener.onResumeAutoRefresh();
+                } else {
+                    mBannerListener.onPauseAutoRefresh();
+                }
+            }
+
             @Override
             public void onOpen() {
+                MoPubLog.log(CLICKED, ADAPTER_NAME);
                 mBannerListener.onBannerClicked();
             }
 
@@ -96,7 +135,7 @@ public void onClose() {
             }
         });
 
-        mMraidController.fillContent(null, htmlData, new MraidController.MraidWebViewCacheListener() {
+        mMraidController.fillContent(htmlData, new MraidController.MraidWebViewCacheListener() {
             @Override
             public void onReady(final @NonNull MraidBridge.MraidWebView webView,
                     final @Nullable ExternalViewabilitySessionManager viewabilityManager) {
@@ -145,7 +184,7 @@ protected void trackMpxAndThirdPartyImpressions() {
             if (activity != null) {
                 mExternalViewabilitySessionManager.startDeferredDisplaySession(activity);
             } else {
-                MoPubLog.d("Lost the activity for deferred Viewability tracking. Dropping session.");
+                MoPubLog.log(CUSTOM, ADAPTER_NAME, "Lost the activity for deferred Viewability tracking. Dropping session.");
             }
         }
     }
diff --git a/mopub-sdk/mopub-sdk-base/build.gradle b/mopub-sdk/mopub-sdk-base/build.gradle
index 2c05feed..1a9fb474 100644
--- a/mopub-sdk/mopub-sdk-base/build.gradle
+++ b/mopub-sdk/mopub-sdk-base/build.gradle
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -8,19 +8,19 @@ repositories {
     flatDir {
         dirs './libs'
     }
+    maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
 }
 
 dependencies {
-    api 'com.mopub.volley:mopub-volley:2.0.0'
-	implementation project(':Libraries:Java:Android:libAndroid')
+    api 'com.mopub.volley:mopub-volley:2.1.0'
 
-	def avidEnabled = project.hasProperty("mopub.avidEnabled") ? project.getProperty("mopub.avidEnabled").toBoolean() : true
+    def avidEnabled = project.hasProperty("mopub.avidEnabled") ? project.getProperty("mopub.avidEnabled").toBoolean() : true
     if (avidEnabled) {
         api('com.mopub:libAvid-mopub:3.6.4')
     }
     def moatEnabled = project.hasProperty("mopub.moatEnabled") ? project.getProperty("mopub.moatEnabled").toBoolean() : true
     if (moatEnabled) {
-		api project(':ThirdParty:Java:Android:moat-mobile-app-kit')
+        api 'com.moat.analytics.mobile.mpub:moat-mobile-app-kit:2.4.5'
     }
 }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml b/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml
index db86ec57..0eb502d5 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml
+++ b/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml
@@ -1,9 +1,5 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.mopub.mobileads.base">
 
-    <application>
-        <uses-library
-            android:name="org.apache.http.legacy"
-            android:required="false" />
-    </application>
+    <application/>
 </manifest>
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdFormat.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdFormat.java
index b1123ccd..f3cf930f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdFormat.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdFormat.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdReport.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdReport.java
index 10f12252..ea289a35 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdReport.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdReport.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java
index fb1be68e..e47ce2af 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
index a95ba603..316c214f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -13,8 +13,10 @@
 import com.mopub.common.privacy.ConsentData;
 import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.common.util.DateAndTime;
+import com.mopub.network.RequestRateTracker;
 
 import static com.mopub.common.ClientMetadata.MoPubNetworkType;
+import com.mopub.common.util.ResponseHeader;
 
 public abstract class AdUrlGenerator extends BaseUrlGenerator {
 
@@ -113,6 +115,16 @@
      */
     private static final String ADVANCED_BIDDING_TOKENS_KEY = "abt";
 
+    /**
+     * Value {@link ResponseHeader#BACKOFF_MS} from previous ad response for this ad unit id. Optional.
+     */
+    private static final String BACKOFF_TIME_MS_KEY = "backoff_ms";
+
+    /**
+     * Value {@link ResponseHeader#BACKOFF_REASON} from previous ad response for this ad unit id. Optional.
+     */
+    private static final String BACKOFF_REASON_KEY = "backoff_reason";
+
     protected Context mContext;
     protected String mAdUnitId;
     protected String mKeywords;
@@ -338,6 +350,8 @@ protected void addBaseParams(final ClientMetadata clientMetadata) {
         setConsentedPrivacyPolicyVersion();
 
         setConsentedVendorListVersion();
+
+        addRequestRateParameters();
     }
 
     private void addParam(String key, MoPubNetworkType value) {
@@ -355,6 +369,17 @@ private static int calculateLocationStalenessInMilliseconds(final Location locat
         return (int) (nowInMillis - locationLastUpdatedInMillis);
     }
 
+    private void addRequestRateParameters() {
+        final RequestRateTracker rateTracker = RequestRateTracker.getInstance();
+        final RequestRateTracker.TimeRecord record = rateTracker.getRecordForAdUnit(mAdUnitId);
+        if (record == null || record.mBlockIntervalMs < 1) {
+            return;
+        }
+
+        addParam(BACKOFF_TIME_MS_KEY, String.valueOf(record.mBlockIntervalMs));
+        addParam(BACKOFF_REASON_KEY, record.mReason);
+    }
+
     /**
      * @deprecated As of release 2.4
      */
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdapterConfiguration.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdapterConfiguration.java
new file mode 100644
index 00000000..2d4cc9a1
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdapterConfiguration.java
@@ -0,0 +1,93 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.common;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import java.util.Map;
+
+public interface AdapterConfiguration {
+    /**
+     * Gets the adapter version.
+     *
+     * @return String representing the adapter version.
+     */
+    @NonNull
+    String getAdapterVersion();
+
+    /**
+     * If this adapter has advanced bidding enabled, return an advanced bidding token. Otherwise,
+     * it's okay to return null.
+     *
+     * @param context Context to reach Android resources.
+     * @return String representing an advanced bidding token.
+     */
+    @Nullable
+    String getBiddingToken(@NonNull final Context context);
+
+    /**
+     * The MoPub-internal name for this particular adapter.
+     *
+     * @return String representing the MoPub network name.
+     */
+    @NonNull
+    String getMoPubNetworkName();
+
+    /**
+     * Get the map of options passed to our ad server. May be null.
+     *
+     * @return Map of options.
+     */
+    @Nullable
+    Map<String, String> getMoPubRequestOptions();
+
+    /**
+     * Gets the version of the network.
+     *
+     * @return String representing the version of the network.
+     */
+    @NonNull
+    String getNetworkSdkVersion();
+
+    /**
+     * Initializes the network. The adapter MUST call
+     * {@link OnNetworkInitializationFinishedListener#onNetworkInitializationFinished} or
+     * sdk initialization will not finish.
+     *
+     * @param context       Context to init with.
+     * @param configuration Map of network initialization parameters.
+     * @param listener      Callback for the SDK to continue initialization.
+     */
+    void initializeNetwork(@NonNull final Context context,
+            @Nullable final Map<String, String> configuration,
+            @NonNull final OnNetworkInitializationFinishedListener listener);
+
+    /**
+     * Save initialization parameters for future use.
+     *
+     * @param context       Context if needed.
+     * @param configuration The map to save.
+     */
+    void setCachedInitializationParameters(@NonNull final Context context,
+            @Nullable final Map<String, String> configuration);
+
+    /**
+     * Gets a map of network initialization parameters.
+     *
+     * @param context Context if needed.
+     * @return Map of network initialization parameters.
+     */
+    @NonNull
+    Map<String, String> getCachedInitializationParameters(@NonNull final Context context);
+
+    /**
+     * Sets a map of request options to send to the MoPub ad server.
+     *
+     * @param moPubRequestOptions Map of request options.
+     */
+    void setMoPubRequestOptions(@Nullable final Map<String, String> moPubRequestOptions);
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdapterConfigurationManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdapterConfigurationManager.java
new file mode 100644
index 00000000..e6d8d825
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdapterConfigurationManager.java
@@ -0,0 +1,271 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.common;
+
+import android.content.Context;
+import android.os.AsyncTask;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.AsyncTasks;
+import com.mopub.common.util.Reflection;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Set;
+
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM_WITH_THROWABLE;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.ERROR;
+
+/**
+ * Gets Advanced Bidders through an Async Task and stores it in memory for retrieval.
+ */
+public class AdapterConfigurationManager implements AdapterConfigurationsInitializationListener {
+
+    private static final String TOKEN_KEY = "token";
+
+    @Nullable private volatile Map<String, AdapterConfiguration> mAdapterConfigurations;
+    @Nullable private SdkInitializationListener mSdkInitializationListener;
+
+    AdapterConfigurationManager(
+            @Nullable final SdkInitializationListener sdkInitializationListener) {
+        mSdkInitializationListener = sdkInitializationListener;
+    }
+
+    public void initialize(@NonNull final Context context,
+            @NonNull final Set<String> adapterConfigurationClasses,
+            @NonNull final Map<String, Map<String, String>> networkMediationConfigurations,
+            @NonNull final Map<String, Map<String, String>> moPubRequestOptions) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(adapterConfigurationClasses);
+        Preconditions.checkNotNull(networkMediationConfigurations);
+        Preconditions.checkNotNull(moPubRequestOptions);
+
+        AsyncTasks.safeExecuteOnExecutor(
+                new AdapterConfigurationsInitializationAsyncTask(context.getApplicationContext(),
+                        adapterConfigurationClasses, networkMediationConfigurations,
+                        moPubRequestOptions, this));
+    }
+
+    @Nullable
+    public List<String> getAdvancedBidderNames() {
+        final Map<String, AdapterConfiguration> adapterConfigurations = mAdapterConfigurations;
+        if (adapterConfigurations == null || adapterConfigurations.isEmpty()) {
+            return null;
+        }
+
+        final List<String> abNames = new ArrayList<>();
+        for (final AdapterConfiguration adapterConfiguration : adapterConfigurations.values()) {
+            abNames.add(adapterConfiguration.getMoPubNetworkName());
+        }
+        return abNames;
+    }
+
+    @Nullable
+    public List<String> getAdapterConfigurationInfo() {
+        final Map<String, AdapterConfiguration> adapterConfigurations = mAdapterConfigurations;
+        if (adapterConfigurations == null || adapterConfigurations.isEmpty()) {
+            return null;
+        }
+
+        final List<String> abNames = new ArrayList<>();
+        for (final Map.Entry<String, AdapterConfiguration> entry : adapterConfigurations.entrySet()) {
+            final StringBuilder configDetails = new StringBuilder();
+
+            final String adapterName = entry.getKey();
+            final int lastDotIndex = adapterName.lastIndexOf(".");
+            configDetails.append(adapterName.substring(lastDotIndex + 1));
+
+            configDetails.append(": Adapter version ");
+            configDetails.append(entry.getValue().getAdapterVersion());
+
+            configDetails.append(", SDK version ");
+            configDetails.append(entry.getValue().getNetworkSdkVersion());
+            
+            abNames.add(configDetails.toString());
+        }
+        return abNames;
+    }
+
+    @Nullable
+    String getTokensAsJsonString(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        final JSONObject tokens = getTokensAsJsonObject(context);
+        if (tokens == null) {
+            return null;
+        }
+        return tokens.toString();
+    }
+
+    @Nullable
+    private JSONObject getTokensAsJsonObject(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        final Map<String, AdapterConfiguration>
+                adapterConfigurations = mAdapterConfigurations;
+        if (adapterConfigurations == null || adapterConfigurations.isEmpty()) {
+            return null;
+        }
+
+        JSONObject jsonObject = null;
+        for (final AdapterConfiguration adapterConfiguration : adapterConfigurations.values()) {
+            try {
+                final String token = adapterConfiguration.getBiddingToken(context);
+                if (TextUtils.isEmpty(token)) {
+                    continue;
+                }
+                final JSONObject bidderJsonObject = new JSONObject();
+                bidderJsonObject.put(TOKEN_KEY, token);
+                if (jsonObject == null) {
+                    jsonObject = new JSONObject();
+                }
+                jsonObject.put(adapterConfiguration.getMoPubNetworkName(), bidderJsonObject);
+            } catch (JSONException e) {
+                MoPubLog.log(ERROR, "JSON parsing failed for MoPub network name: " +
+                        adapterConfiguration.getMoPubNetworkName());
+            }
+        }
+        return jsonObject;
+    }
+
+    @VisibleForTesting
+    AdapterConfiguration getAdapterConfiguration(
+            @NonNull final Class<? extends AdapterConfiguration> clazz) {
+        Preconditions.checkNotNull(clazz);
+
+        final Map<String, AdapterConfiguration> adapterConfigurations = mAdapterConfigurations;
+        if (adapterConfigurations == null) {
+            return null;
+        }
+        return adapterConfigurations.get(clazz.getName());
+    }
+
+    @Override
+    public void onAdapterConfigurationsInitialized(@NonNull final
+    Map<String, AdapterConfiguration> adapterConfigurations) {
+        Preconditions.checkNotNull(adapterConfigurations);
+
+        mAdapterConfigurations = adapterConfigurations;
+
+        final SdkInitializationListener sdkInitializationListener = mSdkInitializationListener;
+        if (sdkInitializationListener != null) {
+            sdkInitializationListener.onInitializationFinished();
+            mSdkInitializationListener = null;
+        }
+    }
+
+    @Override
+    public void onNetworkInitializationFinished(
+            @NonNull final Class<? extends AdapterConfiguration> adapterConfigurationClass,
+            @NonNull final MoPubErrorCode moPubErrorCode) {
+        Preconditions.checkNotNull(adapterConfigurationClass);
+        Preconditions.checkNotNull(moPubErrorCode);
+
+        MoPubLog.log(CUSTOM, adapterConfigurationClass + " initialized with error code " +
+                moPubErrorCode);
+    }
+
+    private static class AdapterConfigurationsInitializationAsyncTask extends AsyncTask<Void, Void, Map<String, AdapterConfiguration>> {
+
+        @NonNull private final WeakReference<Context> weakContext;
+        @NonNull private final Set<String> adapterConfigurationClasses;
+        @NonNull private final Map<String, Map<String, String>> networkMediationConfigurations;
+        @NonNull private final Map<String, Map<String, String>> moPubRequestOptions;
+        @NonNull private final AdapterConfigurationsInitializationListener
+                adapterConfigurationsInitializationListener;
+
+        AdapterConfigurationsInitializationAsyncTask(
+                @NonNull final Context context,
+                @NonNull final Set<String> adapterConfigurationClasses,
+                @NonNull final Map<String, Map<String, String>> networkMediationConfigurations,
+                @NonNull final Map<String, Map<String, String>> moPubRequestOptions,
+                @NonNull final AdapterConfigurationsInitializationListener adapterConfigurationsInitializationListener) {
+            Preconditions.checkNotNull(context);
+            Preconditions.checkNotNull(adapterConfigurationClasses);
+            Preconditions.checkNotNull(networkMediationConfigurations);
+            Preconditions.checkNotNull(moPubRequestOptions);
+            Preconditions.checkNotNull(adapterConfigurationsInitializationListener);
+
+            this.weakContext = new WeakReference<>(context);
+            this.adapterConfigurationClasses = adapterConfigurationClasses;
+            this.networkMediationConfigurations = networkMediationConfigurations;
+            this.moPubRequestOptions = moPubRequestOptions;
+            this.adapterConfigurationsInitializationListener = adapterConfigurationsInitializationListener;
+        }
+
+        @Override
+        protected Map<String, AdapterConfiguration> doInBackground(final Void... voids) {
+            final Map<String, AdapterConfiguration> adapterConfigurations = new HashMap<>();
+            for (final String adapterConfigurationClass : adapterConfigurationClasses) {
+                AdapterConfiguration adapterConfiguration;
+                try {
+                    adapterConfiguration = Reflection.instantiateClassWithEmptyConstructor(
+                            adapterConfigurationClass, AdapterConfiguration.class);
+                } catch (Exception e) {
+                    MoPubLog.log(CUSTOM_WITH_THROWABLE,
+                            "Unable to find class " + adapterConfigurationClass, e);
+                    continue;
+                }
+
+                final Context context = weakContext.get();
+                if (context == null) {
+                    MoPubLog.log(CUSTOM,
+                            "Context null. Unable to initialize adapter configuration " +
+                                    adapterConfigurationClass);
+                    continue;
+                }
+
+                // Merge and overwrite configuration from the cache with newly passed in values.
+                final Map<String, String> networkMediationConfiguration =
+                        networkMediationConfigurations.get(adapterConfigurationClass);
+                // Making a new HashMap here because getCachedInitializationParameters may
+                // return an unmodifiable map.
+                final Map<String, String> mergedParameters = new HashMap<>(
+                        adapterConfiguration.getCachedInitializationParameters(context));;
+                if (networkMediationConfiguration != null) {
+                    mergedParameters.putAll(networkMediationConfiguration);
+                    adapterConfiguration.setCachedInitializationParameters(context,
+                            mergedParameters);
+                }
+
+                final Map<String, String> moPubRequestOption =
+                        moPubRequestOptions.get(adapterConfigurationClass);
+                if (moPubRequestOption != null) {
+                    adapterConfiguration.setMoPubRequestOptions(moPubRequestOption);
+                }
+
+                MoPubLog.log(CUSTOM, String.format(Locale.US, "Initializing %s version %s " +
+                                "with network sdk version %s and with params %s",
+                        adapterConfigurationClass, adapterConfiguration.getAdapterVersion(),
+                        adapterConfiguration.getNetworkSdkVersion(), mergedParameters));
+
+                adapterConfiguration.initializeNetwork(context, mergedParameters,
+                        adapterConfigurationsInitializationListener);
+
+                adapterConfigurations.put(adapterConfigurationClass, adapterConfiguration);
+            }
+            return adapterConfigurations;
+        }
+
+        @Override
+        protected void onPostExecute(
+                @NonNull final Map<String, AdapterConfiguration> adapterConfigurations) {
+            adapterConfigurationsInitializationListener.onAdapterConfigurationsInitialized(
+                    adapterConfigurations);
+        }
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdapterConfigurationsInitializationListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdapterConfigurationsInitializationListener.java
new file mode 100644
index 00000000..c87d25a1
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdapterConfigurationsInitializationListener.java
@@ -0,0 +1,14 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.common;
+
+import android.support.annotation.NonNull;
+
+import java.util.Map;
+
+interface AdapterConfigurationsInitializationListener extends OnNetworkInitializationFinishedListener{
+    void onAdapterConfigurationsInitialized(
+            @NonNull final Map<String, AdapterConfiguration> adapterConfigurations);
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdvancedBiddersInitializedListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdvancedBiddersInitializedListener.java
deleted file mode 100644
index 74a8cb7b..00000000
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdvancedBiddersInitializedListener.java
+++ /dev/null
@@ -1,13 +0,0 @@
-// Copyright 2018 Twitter, Inc.
-// Licensed under the MoPub SDK License Agreement
-// http://www.mopub.com/legal/sdk-license-agreement/
-
-package com.mopub.common;
-
-import android.support.annotation.NonNull;
-
-import java.util.List;
-
-interface AdvancedBiddersInitializedListener {
-    void onAdvancedBiddersInitialized(@NonNull final List<MoPubAdvancedBidder> advancedBidders);
-}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdvancedBiddingTokens.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdvancedBiddingTokens.java
deleted file mode 100644
index 2a09e6bf..00000000
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdvancedBiddingTokens.java
+++ /dev/null
@@ -1,125 +0,0 @@
-// Copyright 2018 Twitter, Inc.
-// Licensed under the MoPub SDK License Agreement
-// http://www.mopub.com/legal/sdk-license-agreement/
-
-package com.mopub.common;
-
-import android.content.Context;
-import android.os.AsyncTask;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.AsyncTasks;
-import com.mopub.common.util.Reflection;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Gets Advanced Bidders through an Async Task and stores it in memory for retrieval.
- */
-public class AdvancedBiddingTokens implements AdvancedBiddersInitializedListener {
-
-    private static final String TOKEN_KEY = "token";
-
-    @NonNull private List<MoPubAdvancedBidder> mAdvancedBidders;
-    @Nullable private final SdkInitializationListener mSdkInitializationListener;
-
-    public AdvancedBiddingTokens(@Nullable final SdkInitializationListener sdkInitializationListener) {
-        mAdvancedBidders = new ArrayList<>();
-        mSdkInitializationListener = sdkInitializationListener;
-    }
-
-    public void addAdvancedBidders(
-            @NonNull final List<Class<? extends MoPubAdvancedBidder>> advancedBidderClasses) {
-        Preconditions.checkNotNull(advancedBidderClasses);
-
-        AsyncTasks.safeExecuteOnExecutor(
-                new AdvancedBiddersInitializationAsyncTask(advancedBidderClasses, this));
-    }
-
-    @Nullable
-    String getTokensAsJsonString(@NonNull final Context context) {
-        Preconditions.checkNotNull(context);
-
-        final JSONObject tokens = getTokensAsJsonObject(context);
-        if (tokens == null) {
-            return null;
-        }
-        return tokens.toString();
-    }
-
-    @Nullable
-    private JSONObject getTokensAsJsonObject(@NonNull final Context context) {
-        Preconditions.checkNotNull(context);
-
-        if (mAdvancedBidders.isEmpty()) {
-            return null;
-        }
-
-        final JSONObject jsonObject = new JSONObject();
-        for (final MoPubAdvancedBidder bidder : mAdvancedBidders) {
-            try {
-                final JSONObject bidderJsonObject = new JSONObject();
-                bidderJsonObject.put(TOKEN_KEY, bidder.getToken(context));
-                jsonObject.put(bidder.getCreativeNetworkName(), bidderJsonObject);
-            } catch (JSONException e) {
-                MoPubLog.d("JSON parsing failed for creative network name: " +
-                        bidder.getCreativeNetworkName());
-            }
-        }
-        return jsonObject;
-    }
-
-    @Override
-    public void onAdvancedBiddersInitialized(
-            @NonNull final List<MoPubAdvancedBidder> advancedBidders) {
-        Preconditions.checkNotNull(advancedBidders);
-
-        mAdvancedBidders = advancedBidders;
-
-        if (mSdkInitializationListener != null) {
-            mSdkInitializationListener.onInitializationFinished();
-        }
-    }
-
-    private static class AdvancedBiddersInitializationAsyncTask extends AsyncTask<Void, Void, List<MoPubAdvancedBidder>> {
-
-        @NonNull private final List<Class<? extends MoPubAdvancedBidder>> advancedBidderClasses;
-        @NonNull private final AdvancedBiddersInitializedListener mAdvancedBiddersInitializedListener;
-
-        AdvancedBiddersInitializationAsyncTask(
-                @NonNull List<Class<? extends MoPubAdvancedBidder>> advancedBidderClasses,
-                @NonNull final AdvancedBiddersInitializedListener advancedBiddersInitializedListener) {
-            Preconditions.checkNotNull(advancedBidderClasses);
-            Preconditions.checkNotNull(advancedBiddersInitializedListener);
-
-            this.advancedBidderClasses = advancedBidderClasses;
-            this.mAdvancedBiddersInitializedListener = advancedBiddersInitializedListener;
-        }
-
-        @Override
-        protected List<MoPubAdvancedBidder> doInBackground(final Void... voids) {
-            final List<MoPubAdvancedBidder> advancedBidders = new ArrayList<>();
-            for (final Class<? extends MoPubAdvancedBidder> advancedBidderClass : advancedBidderClasses) {
-                try {
-                    final MoPubAdvancedBidder advancedBidder = Reflection.instantiateClassWithEmptyConstructor(
-                            advancedBidderClass.getName(), MoPubAdvancedBidder.class);
-                    advancedBidders.add(advancedBidder);
-                } catch (Exception e) {
-                    MoPubLog.e("Unable to find class " + advancedBidderClass.getName());
-                }
-            }
-            return advancedBidders;
-        }
-
-        @Override
-        protected void onPostExecute(final List<MoPubAdvancedBidder> advancedBidders) {
-            mAdvancedBiddersInitializedListener.onAdvancedBiddersInitialized(advancedBidders);
-        }
-    }
-}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java
index 173922de..1b226fe3 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -15,10 +15,11 @@
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Reflection;
 
-import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 // API documentation: https://drive.google.com/drive/folders/0B8U0thTyT1GGZTdEWm03VTlfbm8
 class AvidViewabilitySession implements ExternalViewabilitySession {
     private static final String AVID_MANAGER_PATH =
@@ -48,7 +49,7 @@ static void disable() {
     private static boolean isViewabilityEnabledViaReflection() {
         if (sIsViewabilityEnabledViaReflection == null) {
             sIsViewabilityEnabledViaReflection = Reflection.classFound(AVID_AD_SESSION_MANAGER_PATH);
-            MoPubLog.d("Avid is "
+            MoPubLog.log(CUSTOM, "Avid is "
                     + (sIsViewabilityEnabledViaReflection ? "" : "un")
                     + "available via reflection.");
         }
@@ -69,7 +70,7 @@ private static Object getAvidAdSessionContextDeferred() {
                         new Class[] {String.class, boolean.class},
                         new Object[] {MoPub.SDK_VERSION, true});
             } catch (Exception e) {
-                MoPubLog.d("Unable to generate Avid deferred ad session context: "
+                MoPubLog.log(CUSTOM, "Unable to generate Avid deferred ad session context: "
                         + e.getMessage());
             }
         }
@@ -90,7 +91,7 @@ private static Object getAvidAdSessionContextNonDeferred() {
                         new Class[] {String.class},
                         new Object[] {MoPub.SDK_VERSION});
             } catch (Exception e) {
-                MoPubLog.d("Unable to generate Avid ad session context: "
+                MoPubLog.log(CUSTOM, "Unable to generate Avid ad session context: "
                         + e.getMessage());
             }
         }
@@ -166,7 +167,7 @@ public Boolean createDisplaySession(@NonNull final Context context,
 
             return true;
         } catch (Exception e) {
-            MoPubLog.d("Unable to execute Avid start display session: " + e.getMessage());
+            MoPubLog.log(CUSTOM, "Unable to execute Avid start display session: " + e.getMessage());
             return false;
         }
     }
@@ -179,7 +180,7 @@ public Boolean startDeferredDisplaySession(@NonNull final Activity activity) {
         }
 
         if (mAvidDisplayAdSession == null) {
-            MoPubLog.d("Avid DisplayAdSession unexpectedly null.");
+            MoPubLog.log(CUSTOM, "Avid DisplayAdSession unexpectedly null.");
             return false;
         }
 
@@ -203,7 +204,7 @@ public Boolean startDeferredDisplaySession(@NonNull final Activity activity) {
                             "getAvidDeferredAdSessionListener").execute();
 
             if (deferredAdSessionListener == null) {
-                MoPubLog.d("Avid AdSessionListener unexpectedly null.");
+                MoPubLog.log(CUSTOM, "Avid AdSessionListener unexpectedly null.");
                 return false;
             }
 
@@ -212,7 +213,7 @@ public Boolean startDeferredDisplaySession(@NonNull final Activity activity) {
 
             return true;
         } catch (Exception e) {
-            MoPubLog.d("Unable to execute Avid record deferred session: "
+            MoPubLog.log(CUSTOM, "Unable to execute Avid record deferred session: "
                     + e.getMessage());
             return false;
         }
@@ -226,7 +227,7 @@ public Boolean endDisplaySession() {
         }
 
         if (mAvidDisplayAdSession == null) {
-            MoPubLog.d("Avid DisplayAdSession unexpectedly null.");
+            MoPubLog.log(CUSTOM, "Avid DisplayAdSession unexpectedly null.");
             return false;
         }
 
@@ -238,7 +239,7 @@ public Boolean endDisplaySession() {
 
             return true;
         } catch (Exception e) {
-            MoPubLog.d("Unable to execute Avid end session: " + e.getMessage());
+            MoPubLog.log(CUSTOM, "Unable to execute Avid end session: " + e.getMessage());
             return false;
         }
     }
@@ -298,7 +299,7 @@ public Boolean createVideoSession(@NonNull final Activity activity, @NonNull fin
 
             return true;
         } catch (Exception e) {
-            MoPubLog.d("Unable to execute Avid start video session: " + e.getMessage());
+            MoPubLog.log(CUSTOM, "Unable to execute Avid start video session: " + e.getMessage());
             return false;
         }
     }
@@ -313,7 +314,7 @@ public Boolean registerVideoObstruction(@NonNull final View view) {
         }
 
         if (mAvidVideoAdSession == null) {
-            MoPubLog.d("Avid VideoAdSession unexpectedly null.");
+            MoPubLog.log(CUSTOM, "Avid VideoAdSession unexpectedly null.");
             return false;
         }
 
@@ -327,7 +328,7 @@ public Boolean registerVideoObstruction(@NonNull final View view) {
 
             return true;
         } catch (Exception e) {
-            MoPubLog.d("Unable to register Avid video obstructions: " + e.getMessage());
+            MoPubLog.log(CUSTOM, "Unable to register Avid video obstructions: " + e.getMessage());
             return false;
         }
     }
@@ -355,7 +356,7 @@ public Boolean recordVideoEvent(@NonNull final VideoEvent event, final int playh
         }
 
         if (mAvidVideoAdSession == null) {
-            MoPubLog.d("Avid VideoAdSession unexpectedly null.");
+            MoPubLog.log(CUSTOM, "Avid VideoAdSession unexpectedly null.");
             return false;
         }
 
@@ -381,11 +382,11 @@ public Boolean recordVideoEvent(@NonNull final VideoEvent event, final int playh
                     return true;
 
                 default:
-                    MoPubLog.d("Unexpected video event type: " + event);
+                    MoPubLog.log(CUSTOM, "Unexpected video event type: " + event);
                     return false;
             }
         } catch (Exception e) {
-            MoPubLog.d("Unable to execute Avid video event for "
+            MoPubLog.log(CUSTOM, "Unable to execute Avid video event for "
                     + event.getAvidMethodName() + ": " + e.getMessage());
             return false;
         }
@@ -399,7 +400,7 @@ public Boolean endVideoSession() {
         }
 
         if (mAvidVideoAdSession == null) {
-            MoPubLog.d("Avid VideoAdSession unexpectedly null.");
+            MoPubLog.log(CUSTOM, "Avid VideoAdSession unexpectedly null.");
             return false;
         }
 
@@ -411,7 +412,7 @@ public Boolean endVideoSession() {
 
             return true;
         } catch (Exception e) {
-            MoPubLog.d("Unable to execute Avid end video session: " + e.getMessage());
+            MoPubLog.log(CUSTOM, "Unable to execute Avid end video session: " + e.getMessage());
             return false;
         }
     }
@@ -438,4 +439,12 @@ private void handleVideoEventReflection(@NonNull final VideoEvent videoEvent,
 
         methodBuilder.execute();
     }
+
+    @VisibleForTesting
+    static void resetStaticState() {
+        sIsVendorDisabled = false;
+        sIsViewabilityEnabledViaReflection = null;
+        sAvidAdSessionContextDeferred = null;
+        sAvidAdSessionContextNonDeferred = null;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseAdapterConfiguration.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseAdapterConfiguration.java
new file mode 100644
index 00000000..1ebef3fc
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseAdapterConfiguration.java
@@ -0,0 +1,90 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.common;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Json;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.HashMap;
+import java.util.Locale;
+import java.util.Map;
+
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
+public abstract class BaseAdapterConfiguration implements AdapterConfiguration {
+
+    @VisibleForTesting
+    static final String CUSTOM_EVENT_PREF_NAME = "mopubCustomEventSettings";
+
+    @Nullable private Map<String, String> mMoPubRequestOptions;
+
+    @Override
+    public void setCachedInitializationParameters(@NonNull final Context context,
+            @Nullable final Map<String, String> initializationParameters) {
+        Preconditions.checkNotNull(context);
+
+        if (initializationParameters == null || initializationParameters.isEmpty()) {
+            return;
+        }
+
+        SharedPreferences sharedPreferences = SharedPreferencesHelper.getSharedPreferences(context,
+                CUSTOM_EVENT_PREF_NAME);
+
+        final String serverExtrasJsonString = (new JSONObject(initializationParameters)).toString();
+
+        final String adapterConfigurationClassName = getClass().getName();
+
+        MoPubLog.log(CUSTOM, String.format(Locale.US,
+                "Updating init settings for custom event %s with params %s",
+                adapterConfigurationClassName, serverExtrasJsonString));
+
+        sharedPreferences
+                .edit()
+                .putString(adapterConfigurationClassName, serverExtrasJsonString)
+                .apply();
+    }
+
+    @NonNull
+    @Override
+    public Map<String, String> getCachedInitializationParameters(@NonNull final Context context) {
+        final SharedPreferences sharedPreferences = SharedPreferencesHelper.getSharedPreferences(
+                context, CUSTOM_EVENT_PREF_NAME);
+        final Map<String, ?> networkInitSettings = sharedPreferences.getAll();
+        MoPubLog.log(CUSTOM, String.format(Locale.US, "fetched init settings for %s networks: %s",
+                networkInitSettings.size(), networkInitSettings.keySet()));
+
+        final String adapterConfigurationClassName = getClass().getName();
+        final String networkInitParamsJsonString =
+                (String) networkInitSettings.get(adapterConfigurationClassName);
+
+        Map<String, String> networkInitParamsMap = new HashMap<>();
+        try {
+            networkInitParamsMap = Json.jsonStringToMap(networkInitParamsJsonString);
+        } catch (JSONException e) {
+            MoPubLog.log(CUSTOM, "Error fetching init settings for adapter configuration " +
+                    adapterConfigurationClassName);
+        }
+        return networkInitParamsMap;
+    }
+
+    @Override
+    public void setMoPubRequestOptions(@Nullable final Map<String, String> moPubRequestOptions) {
+        mMoPubRequestOptions = moPubRequestOptions;
+    }
+
+    @Nullable
+    @Override
+    public Map<String, String> getMoPubRequestOptions() {
+        return mMoPubRequestOptions;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseLifecycleListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseLifecycleListener.java
index 4c10a739..a5403473 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseLifecycleListener.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseLifecycleListener.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java
index 6d65910d..198a7d6d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
index 121da77d..13ce2bdc 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -15,6 +15,7 @@
 
 import java.util.EnumSet;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 import static com.mopub.common.util.Drawables.LEFT_ARROW;
 import static com.mopub.common.util.Drawables.RIGHT_ARROW;
 import static com.mopub.common.util.Drawables.UNLEFT_ARROW;
@@ -41,7 +42,7 @@ public BrowserWebViewClient(@NonNull final MoPubBrowser moPubBrowser) {
     @Override
     public void onReceivedError(WebView view, int errorCode, String description,
             String failingUrl) {
-        MoPubLog.d("MoPubBrowser error: " + description);
+        MoPubLog.log(CUSTOM, "MoPubBrowser error: " + description);
     }
 
     @Override
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CacheService.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CacheService.java
index 40d4f714..2d642c5b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CacheService.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CacheService.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -23,6 +23,7 @@
 import java.io.OutputStream;
 
 import static com.mopub.common.DiskLruCache.open;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 
 public class CacheService {
     public interface DiskLruCacheGetListener {
@@ -57,7 +58,7 @@ public static boolean initializeDiskCache(final Context context) {
                         diskCacheSizeBytes
                 );
             } catch (IOException e) {
-                MoPubLog.d("Unable to create DiskLruCache", e);
+                MoPubLog.log(CUSTOM, "Unable to create DiskLruCache", e);
                 return false;
             }
         }
@@ -135,7 +136,7 @@ public static String getFilePathDiskCache(final String key) {
                 }
             }
         } catch (Exception e) {
-            MoPubLog.d("Unable to get from DiskLruCache", e);
+            MoPubLog.log(CUSTOM, "Unable to get from DiskLruCache", e);
         } finally {
             if (snapshot != null) {
                 snapshot.close();
@@ -176,7 +177,7 @@ public static boolean putToDiskCache(final String key, final InputStream content
             sDiskLruCache.flush();
             editor.commit();
         } catch (Exception e) {
-            MoPubLog.d("Unable to put to DiskLruCache", e);
+            MoPubLog.log(CUSTOM, "Unable to put to DiskLruCache", e);
             try {
                 if (editor != null) {
                     editor.abort();
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
index 671dec71..af70e52e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -29,6 +29,7 @@
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static android.content.pm.PackageManager.NameNotFoundException;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 
 /**
  * Singleton that caches Client objects so they will be available to background threads.
@@ -129,8 +130,7 @@ public static ClientMetadata getInstance() {
         return result;
     }
 
-    // NEVER CALL THIS AS A USER. Get it from the Singletons class.
-    public ClientMetadata(@NonNull final Context context) {
+    private ClientMetadata(@NonNull final Context context) {
         Preconditions.checkNotNull(context);
 
         mContext = context.getApplicationContext();
@@ -206,7 +206,7 @@ private static String getAppVersionFromContext(Context context) {
                     context.getPackageManager().getPackageInfo(packageName, 0);
             return packageInfo.versionName;
         } catch (Exception exception) {
-            MoPubLog.d("Failed to retrieve PackageInfo#versionName.");
+            MoPubLog.log(CUSTOM, "Failed to retrieve PackageInfo#versionName.");
             return null;
         }
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java
index bb97ad3a..0c06a2fd 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CompositeSdkInitializationListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CompositeSdkInitializationListener.java
index 8664f3c1..fc62ebb2 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CompositeSdkInitializationListener.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CompositeSdkInitializationListener.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
index 6dbfd8ab..a6ae04a1 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -8,11 +8,15 @@
 
     private Constants() {}
 
+    static {
+        HOST = "ads.mopub.com";
+    }
+
     public static final String HTTP = "http";
     public static final String HTTPS = "https";
     public static final String INTENT_SCHEME = "intent";
 
-    public static final String HOST = "ads.mopub.com";
+    public static final String HOST;
 
     public static final String AD_HANDLER = "/m/ad";
     public static final String CONVERSION_TRACKING_HANDLER = "/m/open";
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CreativeOrientation.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CreativeOrientation.java
index 0f65748b..2277e2fe 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CreativeOrientation.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CreativeOrientation.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -11,10 +11,10 @@
  * Represents the orientation returned for MoPub ads from the MoPub ad server.
  */
 public enum CreativeOrientation {
-    PORTRAIT, LANDSCAPE, UNDEFINED;
+    PORTRAIT, LANDSCAPE, DEVICE;
 
     @NonNull
-    public static CreativeOrientation fromHeader(@Nullable String orientation) {
+    public static CreativeOrientation fromString(@Nullable String orientation) {
         if ("l".equalsIgnoreCase(orientation)) {
             return LANDSCAPE;
         }
@@ -23,6 +23,6 @@ public static CreativeOrientation fromHeader(@Nullable String orientation) {
             return PORTRAIT;
         }
 
-        return UNDEFINED;
+        return DEVICE;
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
index 56a22f21..a9af8280 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DefaultAdapterClasses.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DefaultAdapterClasses.java
new file mode 100644
index 00000000..f7336e6e
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DefaultAdapterClasses.java
@@ -0,0 +1,41 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.common;
+
+import android.support.annotation.NonNull;
+
+import java.util.HashSet;
+import java.util.Set;
+
+/**
+ * These are the default adapter configurations automatically initialized by the SDK.
+ */
+public enum DefaultAdapterClasses {
+    AD_COLONY_ADAPTER_CONFIGURATION("com.mopub.mobileads.AdColonyAdapterConfiguration"),
+    APPLOVIN_ADAPTER_CONFIGURATION("com.mopub.mobileads.AppLovinAdapterConfiguration"),
+    CHARTBOOST_ADAPTER_CONFIGURATION("com.mopub.mobileads.ChartboostAdapterConfiguration"),
+    FACEBOOK_ADAPTER_CONFIGURATION("com.mopub.mobileads.FacebookAdapterConfiguration"),
+    FLURRY_ADAPTER_CONFIGURATION("com.mopub.mobileads.FlurryAdapterConfiguration"),
+    IRON_SOURCE_ADAPTER_CONFIGURATION("com.mopub.mobileads.IronSourceAdapterConfiguration"),
+    MILLENNIAL_ADAPTER_CONFIGURATION("com.mopub.mobileads.MillennialAdapterConfiguration"),
+    GOOGLE_PLAY_SERVICES_ADAPTER_CONFIGURATION("com.mopub.mobileads.GooglePlayServicesAdapterConfiguration"),
+    TAPJOY_ADAPTER_CONFIGURATION("com.mopub.mobileads.TapjoyAdapterConfiguration"),
+    UNITY_ADS_ADAPTER_CONFIGURATION("com.mopub.mobileads.UnityAdsAdapterConfiguration"),
+    VUNGLE_ADAPTER_CONFIGURATION("com.mopub.mobileads.VungleAdapterConfiguration");
+
+    private final String mClassName;
+
+    DefaultAdapterClasses(@NonNull final String className) {
+        mClassName = className;
+    }
+
+    public static Set<String> getClassNamesSet() {
+        final Set<String> adapterConfigurations = new HashSet<>();
+        for (final DefaultAdapterClasses adapterConfiguration : DefaultAdapterClasses.values()) {
+            adapterConfigurations.add(adapterConfiguration.mClassName);
+        }
+        return adapterConfigurations;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DoubleTimeTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DoubleTimeTracker.java
index 207f5c84..05162ff8 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DoubleTimeTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DoubleTimeTracker.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -9,6 +9,8 @@
 
 import com.mopub.common.logging.MoPubLog;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 /**
  * This class uses system time to track durations. It can be started and paused, but not reset.
  * Create a new {@link DoubleTimeTracker} if you need to track a new duration.
@@ -40,7 +42,7 @@ public DoubleTimeTracker(@NonNull Clock clock) {
 
     public synchronized void start() {
         if (state == State.STARTED) {
-            MoPubLog.v("DoubleTimeTracker already started.");
+            MoPubLog.log(CUSTOM, "DoubleTimeTracker already started.");
             return;
         }
 
@@ -50,7 +52,7 @@ public synchronized void start() {
 
     public synchronized void pause() {
         if (state == State.PAUSED) {
-            MoPubLog.v("DoubleTimeTracker already paused.");
+            MoPubLog.log(CUSTOM, "DoubleTimeTracker already paused.");
             return;
         }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java
index c2a81d15..b6a9cc5a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java
index bf65416a..60d03164 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -18,6 +18,8 @@
 import java.util.Locale;
 import java.util.Set;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 /**
  * Encapsulates all third-party viewability session measurements.
  */
@@ -41,10 +43,10 @@ public void disable() {
                     MoatViewabilitySession.disable();
                     break;
                 default:
-                    MoPubLog.d("Attempted to disable an invalid viewability vendor: " + this);
+                    MoPubLog.log(CUSTOM, "Attempted to disable an invalid viewability vendor: " + this);
                     return;
             }
-            MoPubLog.d("Disabled viewability for " + this);
+            MoPubLog.log(CUSTOM, "Disabled viewability for " + this);
         }
 
         /**
@@ -260,9 +262,7 @@ private void logEvent(@NonNull final ExternalViewabilitySession session,
         final String message = String.format(Locale.US, "%s viewability event: %s%s.",
                 session.getName(), failureString, event);
         if (isVerbose) {
-            MoPubLog.v(message);
-        } else {
-            MoPubLog.d(message);
+            MoPubLog.log(CUSTOM, message);
         }
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/FullAdType.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/FullAdType.java
index c7ae513c..77b18743 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/FullAdType.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/FullAdType.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java
index 4b8efac6..f610d979 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -14,6 +14,8 @@
 
 import java.lang.ref.WeakReference;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.ERROR;
 import static com.mopub.common.util.Reflection.MethodBuilder;
 import static com.mopub.common.util.Reflection.classFound;
 
@@ -63,7 +65,7 @@ static public AdvertisingInfo fetchAdvertisingInfoSync(final Context context) {
             advertisingId = reflectedGetAdvertisingId(adInfo, advertisingId);
             isLimitAdTrackingEnabled = reflectedIsLimitAdTrackingEnabled(adInfo, isLimitAdTrackingEnabled);
         } catch (Exception e) {
-            MoPubLog.d("Unable to obtain Google AdvertisingIdClient.Info via reflection.");
+            MoPubLog.log(CUSTOM, "Unable to obtain Google AdvertisingIdClient.Info via reflection.");
             return null;
         }
 
@@ -81,7 +83,7 @@ static private void internalFetchAdvertisingInfoAsync(final Context context, fin
         try {
             AsyncTasks.safeExecuteOnExecutor(new FetchAdvertisingInfoTask(context, gpsHelperListener));
         } catch (Exception exception) {
-            MoPubLog.d("Error executing FetchAdvertisingInfoTask", exception);
+            MoPubLog.log(ERROR, "Error executing FetchAdvertisingInfoTask", exception);
 
             if (gpsHelperListener != null) {
                 gpsHelperListener.onFetchAdInfoCompleted();
@@ -116,7 +118,7 @@ protected Void doInBackground(Void... voids) {
                     // updateClientMetadata(context, adInfo);
                 }
             } catch (Exception exception) {
-                MoPubLog.d("Unable to obtain Google AdvertisingIdClient.Info via reflection.");
+                MoPubLog.log(CUSTOM, "Unable to obtain Google AdvertisingIdClient.Info via reflection.");
             }
 
             return null;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/IntentActions.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/IntentActions.java
index d6e630d9..b339c77e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/IntentActions.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/IntentActions.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LifecycleListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LifecycleListener.java
index f426f9d2..9ac18803 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LifecycleListener.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LifecycleListener.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java
index 60dda081..4bcb1583 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -18,6 +18,7 @@
 
 import static android.Manifest.permission.ACCESS_COARSE_LOCATION;
 import static android.Manifest.permission.ACCESS_FINE_LOCATION;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 
 public class LocationService {
     public enum LocationAwareness {
@@ -172,13 +173,13 @@ static Location getLocationFromProvider(@NonNull final Context context,
             // noinspection ResourceType
             return locationManager.getLastKnownLocation(provider.toString());
         } catch (SecurityException e) {
-            MoPubLog.d("Failed to retrieve location from " +
+            MoPubLog.log(CUSTOM, "Failed to retrieve location from " +
                     provider.toString() + " provider: access appears to be disabled.");
         } catch (IllegalArgumentException e) {
-            MoPubLog.d("Failed to retrieve location: device has no " +
+            MoPubLog.log(CUSTOM, "Failed to retrieve location: device has no " +
                     provider.toString() + " location provider.");
         } catch (NullPointerException e) { // This happens on 4.2.2 on a few Android TV devices
-            MoPubLog.d("Failed to retrieve location: device has no " +
+            MoPubLog.log(CUSTOM, "Failed to retrieve location: device has no " +
                     provider.toString() + " location provider.");
         }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MediationSettings.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MediationSettings.java
index 6313d964..317b15cc 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MediationSettings.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MediationSettings.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
index ddff44d2..84b0d3e3 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -14,14 +14,20 @@
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.common.util.Reflection;
+import com.mopub.network.Networking;
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
+import java.util.List;
 
 import static com.mopub.common.ExternalViewabilitySessionManager.ViewabilityVendor;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.ERROR;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.INIT_STARTED;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.INIT_FINISHED;
 
 public class MoPub {
-    public static final String SDK_VERSION = "5.4.1";
+    public static final String SDK_VERSION = "5.6.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
@@ -71,10 +77,9 @@ public static BrowserAgent fromHeader(@Nullable final Integer browserAgent) {
     private static volatile boolean sIsBrowserAgentOverriddenByClient = false;
     private static boolean sSearchedForUpdateActivityMethod = false;
     @Nullable private static Method sUpdateActivityMethod;
-    private static boolean sAdvancedBiddingEnabled = true;
     private static boolean sSdkInitialized = false;
     private static boolean sSdkInitializing = false;
-    private static AdvancedBiddingTokens sAdvancedBiddingTokens;
+    private static AdapterConfigurationManager sAdapterConfigurationManager;
     private static PersonalInfoManager sPersonalInfoManager;
 
     @NonNull
@@ -123,7 +128,7 @@ public static void setBrowserAgentFromAdServer(
         Preconditions.checkNotNull(adServerBrowserAgent);
 
         if (sIsBrowserAgentOverriddenByClient) {
-            MoPubLog.w("Browser agent already overridden by client with value " + sBrowserAgent);
+            MoPubLog.log(CUSTOM, "Browser agent already overridden by client with value " + sBrowserAgent);
         } else {
             sBrowserAgent = adServerBrowserAgent;
         }
@@ -136,14 +141,6 @@ public static BrowserAgent getBrowserAgent() {
         return sBrowserAgent;
     }
 
-    public static void setAdvancedBiddingEnabled(final boolean advancedBiddingEnabled) {
-        sAdvancedBiddingEnabled = advancedBiddingEnabled;
-    }
-
-    public static boolean isAdvancedBiddingEnabled() {
-        return sAdvancedBiddingEnabled;
-    }
-
     /**
      * Initializes the MoPub SDK. Call this before making any rewarded ads or advanced bidding
      * requests. This will do the rewarded video custom event initialization any number of times,
@@ -161,8 +158,10 @@ public static void initializeSdk(@NonNull final Context context,
         Preconditions.checkNotNull(context);
         Preconditions.checkNotNull(sdkConfiguration);
 
-        // This also initializes MoPubLog
-        MoPubLog.d("Initializing MoPub with ad unit: " + sdkConfiguration.getAdUnitId());
+        MoPubLog.setLogLevel(sdkConfiguration.getLogLevel());
+
+        MoPubLog.log(INIT_STARTED);
+        MoPubLog.log(CUSTOM, "SDK initialize has been called with ad unit: " + sdkConfiguration.getAdUnitId());
 
         if (context instanceof Activity) {
             final Activity activity = (Activity) context;
@@ -170,22 +169,25 @@ public static void initializeSdk(@NonNull final Context context,
         }
 
         if (sSdkInitialized) {
-            MoPubLog.d("MoPub SDK is already initialized");
+            MoPubLog.log(CUSTOM, "MoPub SDK is already initialized");
             initializationFinished(sdkInitializationListener);
             return;
         }
         if (sSdkInitializing) {
-            MoPubLog.d("MoPub SDK is currently initializing.");
+            MoPubLog.log(CUSTOM, "MoPub SDK is currently initializing.");
             return;
         }
 
         if (Looper.getMainLooper() != Looper.myLooper()) {
-            MoPubLog.e("MoPub can only be initialized on the main thread.");
+            MoPubLog.log(CUSTOM, "MoPub can only be initialized on the main thread.");
             return;
         }
 
         sSdkInitializing = true;
 
+        // Guarantees initialization of the request queue on the main thread.
+        Networking.getRequestQueue(context);
+
         final InternalSdkInitializationListener internalSdkInitializationListener =
                 new InternalSdkInitializationListener(sdkInitializationListener);
 
@@ -194,11 +196,15 @@ public static void initializeSdk(@NonNull final Context context,
 
         sPersonalInfoManager = new PersonalInfoManager(context, sdkConfiguration.getAdUnitId(),
                 compositeSdkInitializationListener);
+        sPersonalInfoManager.setAllowLegitimateInterest(sdkConfiguration.getLegitimateInterestAllowed());
 
         ClientMetadata.getInstance(context);
 
-        sAdvancedBiddingTokens = new AdvancedBiddingTokens(compositeSdkInitializationListener);
-        sAdvancedBiddingTokens.addAdvancedBidders(sdkConfiguration.getAdvancedBidders());
+        sAdapterConfigurationManager = new AdapterConfigurationManager(compositeSdkInitializationListener);
+        sAdapterConfigurationManager.initialize(context,
+                sdkConfiguration.getAdapterConfigurationClasses(),
+                sdkConfiguration.getMediatedNetworkConfigurations(),
+                sdkConfiguration.getMoPubRequestOptions());
     }
 
     /**
@@ -217,14 +223,35 @@ public static boolean canCollectPersonalInformation() {
         return sPersonalInfoManager != null && sPersonalInfoManager.canCollectPersonalInformation();
     }
 
+    /**
+     * Set the allowance of legitimate interest.
+     * This API can be used if you want to allow supported SDK networks to collect user information on the basis of legitimate interest.
+     *
+     * @param allowed should be true if legitimate interest is allowed. False if it isn't allowed.
+     */
+    public static void setAllowLegitimateInterest(final boolean allowed) {
+        if (sPersonalInfoManager != null) {
+            sPersonalInfoManager.setAllowLegitimateInterest(allowed);
+        }
+    }
+
+    /**
+     * Check this to see if legitimate interest is allowed.
+     *
+     * @return True if allowed, false otherwise.
+     */
+    public static boolean shouldAllowLegitimateInterest() {
+        return sPersonalInfoManager != null && sPersonalInfoManager.shouldAllowLegitimateInterest();
+    }
+
     @Nullable
     static String getAdvancedBiddingTokensJson(@NonNull final Context context) {
         Preconditions.checkNotNull(context);
 
-        if (!isAdvancedBiddingEnabled() || sAdvancedBiddingTokens == null) {
+        if (sAdapterConfigurationManager == null) {
             return null;
         }
-        return sAdvancedBiddingTokens.getTokensAsJsonString(context);
+        return sAdapterConfigurationManager.getTokensAsJsonString(context);
     }
 
     /**
@@ -293,6 +320,15 @@ public static void disableViewability(@NonNull final ViewabilityVendor vendor) {
         vendor.disable();
     }
 
+    @Nullable
+    public static List<String> getAdapterConfigurationInfo() {
+        final AdapterConfigurationManager configurationManager = sAdapterConfigurationManager;
+        if (configurationManager != null) {
+            return configurationManager.getAdapterConfigurationInfo();
+        }
+        return null;
+    }
+
     private static void initializeRewardedVideo(@NonNull Activity activity, @NonNull SdkConfiguration sdkConfiguration) {
         Preconditions.checkNotNull(activity);
         Preconditions.checkNotNull(sdkConfiguration);
@@ -304,11 +340,11 @@ private static void initializeRewardedVideo(@NonNull Activity activity, @NonNull
                     .addParam(Activity.class, activity)
                     .addParam(SdkConfiguration.class, sdkConfiguration).execute();
         } catch (ClassNotFoundException e) {
-            MoPubLog.w("initializeRewardedVideo was called without the rewarded video module");
+            MoPubLog.log(CUSTOM, "initializeRewardedVideo was called without the rewarded video module");
         } catch (NoSuchMethodException e) {
-            MoPubLog.w("initializeRewardedVideo was called without the rewarded video module");
+            MoPubLog.log(CUSTOM, "initializeRewardedVideo was called without the rewarded video module");
         } catch (Exception e) {
-            MoPubLog.e("Error while initializing rewarded video", e);
+            MoPubLog.log(ERROR, "Error while initializing rewarded video", e);
         }
     }
 
@@ -335,6 +371,10 @@ public void run() {
 
         @Override
         public void onInitializationFinished() {
+            final AdapterConfigurationManager adapterConfigurationManager = sAdapterConfigurationManager;
+            if (adapterConfigurationManager != null) {
+                MoPubLog.log(INIT_FINISHED, adapterConfigurationManager.getAdapterConfigurationInfo());
+            }
             initializationFinished(mSdkInitializationListener);
             mSdkInitializationListener = null;
         }
@@ -360,10 +400,10 @@ static void updateActivity(@NonNull Activity activity) {
             try {
                 sUpdateActivityMethod.invoke(null, activity);
             } catch (IllegalAccessException e) {
-                MoPubLog.e("Error while attempting to access the update activity method - this " +
+                MoPubLog.log(ERROR, "Error while attempting to access the update activity method - this " +
                         "should not have happened", e);
             } catch (InvocationTargetException e) {
-                MoPubLog.e("Error while attempting to access the update activity method - this " +
+                MoPubLog.log(ERROR, "Error while attempting to access the update activity method - this " +
                         "should not have happened", e);
             }
         }
@@ -372,7 +412,7 @@ static void updateActivity(@NonNull Activity activity) {
     @Deprecated
     @VisibleForTesting
     static void clearAdvancedBidders() {
-        sAdvancedBiddingTokens = null;
+        sAdapterConfigurationManager = null;
         sPersonalInfoManager = null;
         sSdkInitialized = false;
         sSdkInitializing = false;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubAdvancedBidder.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubAdvancedBidder.java
index 45a7068d..f8e09154 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubAdvancedBidder.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubAdvancedBidder.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubAdvancedBidderData.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubAdvancedBidderData.java
index 6e02770d..00e49f33 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubAdvancedBidderData.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubAdvancedBidderData.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -11,6 +11,8 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 /**
  * Data object holding advanced bidding data.
  * {"[mCreativeNetworkName]" : {"token" : "[mToken]"}}
@@ -36,7 +38,7 @@ public JSONObject toJson(){
         try {
             jsonObject.put(TOKEN_KEY, mToken);
         } catch (JSONException e) {
-            MoPubLog.e("Invalid token format: " + mToken);
+            MoPubLog.log(CUSTOM, "Invalid token format: " + mToken);
         }
         return jsonObject;
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
index a45d1a8a..86c30d1f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubHttpUrlConnection.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubHttpUrlConnection.java
index c6f5ad9e..3c017730 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubHttpUrlConnection.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubHttpUrlConnection.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -17,6 +17,8 @@
 import java.net.URL;
 import java.net.URLDecoder;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 public abstract class MoPubHttpUrlConnection extends HttpURLConnection {
     private static final int CONNECT_TIMEOUT = 10000;
     private static final int READ_TIMEOUT = 10000;
@@ -85,7 +87,7 @@ static boolean isUrlImproperlyEncoded(@NonNull String url) {
         try {
             URLDecoder.decode(url, "UTF-8");
         } catch (UnsupportedEncodingException e) {
-            MoPubLog.w("Url is improperly encoded: " + url);
+            MoPubLog.log(CUSTOM, "Url is improperly encoded: " + url);
             return true;
         }
         return false;
@@ -115,7 +117,7 @@ static URI encodeUrl(@NonNull String urlString) throws Exception {
             uri = new URI(url.getProtocol(), url.getUserInfo(), url.getHost(), url.getPort(),
                     url.getPath(), url.getQuery(), url.getRef());
         } catch (Exception e) {
-            MoPubLog.w("Failed to encode url: " + urlString);
+            MoPubLog.log(CUSTOM, "Failed to encode url: " + urlString);
             throw e;
         }
         return uri;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java
index affe4d6c..d235ef05 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java
index 6e25fe5f..2b07bc71 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -22,6 +22,8 @@
 import java.util.Map;
 import java.util.Set;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 // API documentation: https://drive.google.com/drive/folders/0B8U0thTyT1GGLUlweWRVMXk1Qlk
 class MoatViewabilitySession implements ExternalViewabilitySession {
     private static final String MOAT_FACTORY_PATH = "com.moat.analytics.mobile.mpub.MoatFactory";
@@ -69,7 +71,7 @@ static void disable() {
     private static boolean isViewabilityEnabledViaReflection() {
         if (sIsViewabilityEnabledViaReflection == null) {
             sIsViewabilityEnabledViaReflection = Reflection.classFound(MOAT_FACTORY_PATH);
-            MoPubLog.d("Moat is "
+            MoPubLog.log(CUSTOM, "Moat is "
                     + (sIsViewabilityEnabledViaReflection ? "" : "un")
                     + "available via reflection.");
         }
@@ -103,7 +105,7 @@ public Boolean initialize(@NonNull final Context context) {
             try {
                 application = (Application) context.getApplicationContext();
             } catch (ClassCastException e) {
-                MoPubLog.d("Unable to initialize Moat, error obtaining application context.");
+                MoPubLog.log(CUSTOM, "Unable to initialize Moat, error obtaining application context.");
                 return false;
             }
         }
@@ -136,7 +138,7 @@ public Boolean initialize(@NonNull final Context context) {
             sWasInitialized = true;
             return true;
         } catch (Exception e) {
-            MoPubLog.d("Unable to initialize Moat: " + e.getMessage());
+            MoPubLog.log(CUSTOM, "Unable to initialize Moat: " + e.getMessage());
             return false;
         }
     }
@@ -187,7 +189,7 @@ public Boolean createDisplaySession(@NonNull final Context context,
 
             return true;
         } catch (Exception e) {
-            MoPubLog.d("Unable to execute Moat start display session: "
+            MoPubLog.log(CUSTOM, "Unable to execute Moat start display session: "
                     + e.getMessage());
             return false;
         }
@@ -201,7 +203,7 @@ public Boolean startDeferredDisplaySession(@NonNull final Activity activity) {
         }
 
         if (mMoatWebAdTracker == null) {
-            MoPubLog.d("MoatWebAdTracker unexpectedly null.");
+            MoPubLog.log(CUSTOM, "MoatWebAdTracker unexpectedly null.");
             return false;
         }
 
@@ -213,7 +215,7 @@ public Boolean startDeferredDisplaySession(@NonNull final Activity activity) {
 
             return true;
         } catch (Exception e) {
-            MoPubLog.d("Unable to record deferred display session for Moat: " + e.getMessage());
+            MoPubLog.log(CUSTOM, "Unable to record deferred display session for Moat: " + e.getMessage());
             return false;
         }
     }
@@ -226,7 +228,7 @@ public Boolean endDisplaySession() {
         }
 
         if (mMoatWebAdTracker == null) {
-            MoPubLog.d("Moat WebAdTracker unexpectedly null.");
+            MoPubLog.log(CUSTOM, "Moat WebAdTracker unexpectedly null.");
             return false;
         }
 
@@ -238,7 +240,7 @@ public Boolean endDisplaySession() {
 
             return true;
         } catch (Exception e) {
-            MoPubLog.d("Unable to execute Moat end session: " + e.getMessage());
+            MoPubLog.log(CUSTOM, "Unable to execute Moat end session: " + e.getMessage());
         }
 
         return false;
@@ -263,7 +265,7 @@ public Boolean createVideoSession(@NonNull final Activity activity, @NonNull fin
 
         String partnerCode = mAdIds.get(PARTNER_CODE_KEY);
         if (TextUtils.isEmpty(partnerCode)) {
-            MoPubLog.d("partnerCode was empty when starting Moat video session");
+            MoPubLog.log(CUSTOM, "partnerCode was empty when starting Moat video session");
             return false;
         }
 
@@ -286,7 +288,7 @@ public Boolean createVideoSession(@NonNull final Activity activity, @NonNull fin
 
             return true;
         } catch (Exception e) {
-            MoPubLog.d("Unable to execute Moat start video session: " + e.getMessage());
+            MoPubLog.log(CUSTOM, "Unable to execute Moat start video session: " + e.getMessage());
             return false;
         }
     }
@@ -314,7 +316,7 @@ public Boolean onVideoPrepared(@NonNull final View playerView, final int duratio
         }
 
         if (mMoatVideoTracker == null) {
-            MoPubLog.d("Moat VideoAdTracker unexpectedly null.");
+            MoPubLog.log(CUSTOM, "Moat VideoAdTracker unexpectedly null.");
             return false;
         }
 
@@ -334,7 +336,7 @@ public Boolean onVideoPrepared(@NonNull final View playerView, final int duratio
             mWasVideoPrepared = true;
             return true;
         } catch (Exception e) {
-            MoPubLog.d("Unable to execute Moat onVideoPrepared: " + e.getMessage());
+            MoPubLog.log(CUSTOM, "Unable to execute Moat onVideoPrepared: " + e.getMessage());
             return false;
         }
     }
@@ -349,7 +351,7 @@ public Boolean recordVideoEvent(@NonNull final VideoEvent event, final int playh
         }
 
         if (mMoatVideoTracker == null) {
-            MoPubLog.d("Moat VideoAdTracker unexpectedly null.");
+            MoPubLog.log(CUSTOM, "Moat VideoAdTracker unexpectedly null.");
             return false;
         }
 
@@ -375,11 +377,11 @@ public Boolean recordVideoEvent(@NonNull final VideoEvent event, final int playh
                     return null;
 
                 default:
-                    MoPubLog.d("Unexpected video event: " + event.getMoatEnumName());
+                    MoPubLog.log(CUSTOM, "Unexpected video event: " + event.getMoatEnumName());
                     return false;
             }
         } catch (Exception e) {
-            MoPubLog.d("Video event " + event.getMoatEnumName() + " failed. "
+            MoPubLog.log(CUSTOM, "Video event " + event.getMoatEnumName() + " failed. "
                     + e.getMessage());
             return false;
         }
@@ -393,7 +395,7 @@ public Boolean endVideoSession() {
         }
 
         if (mMoatVideoTracker == null) {
-            MoPubLog.d("Moat VideoAdTracker unexpectedly null.");
+            MoPubLog.log(CUSTOM, "Moat VideoAdTracker unexpectedly null.");
             return false;
         }
 
@@ -405,7 +407,7 @@ public Boolean endVideoSession() {
 
             return true;
         } catch (Exception e) {
-            MoPubLog.d("Unable to execute Moat end video session: " + e.getMessage());
+            MoPubLog.log(CUSTOM, "Unable to execute Moat end video session: " + e.getMessage());
             return false;
         }
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/OnNetworkInitializationFinishedListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/OnNetworkInitializationFinishedListener.java
new file mode 100644
index 00000000..4323dc9e
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/OnNetworkInitializationFinishedListener.java
@@ -0,0 +1,14 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.common;
+
+import android.support.annotation.NonNull;
+
+import com.mopub.mobileads.MoPubErrorCode;
+
+public interface OnNetworkInitializationFinishedListener {
+    void onNetworkInitializationFinished(@NonNull final Class<? extends AdapterConfiguration> clazz,
+            @NonNull final MoPubErrorCode moPubErrorCode);
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Preconditions.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Preconditions.java
index b3ff41be..85337a82 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Preconditions.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Preconditions.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -11,6 +11,8 @@
 
 import java.util.IllegalFormatException;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 /**
  * Simple static methods to be called at the start of your own methods to verify correct arguments
  * and state.
@@ -245,7 +247,7 @@ private static boolean checkArgumentInternal(boolean expression, boolean allowTh
         if (allowThrow) {
             throw new IllegalArgumentException(errorMessage);
         }
-        MoPubLog.e(errorMessage);
+        MoPubLog.log(CUSTOM, errorMessage);
         return false;
     }
 
@@ -258,7 +260,7 @@ private static boolean checkStateInternal(boolean expression, boolean allowThrow
         if (allowThrow) {
             throw new IllegalStateException(errorMessage);
         }
-        MoPubLog.e(errorMessage);
+        MoPubLog.log(CUSTOM, errorMessage);
         return false;
     }
 
@@ -271,7 +273,7 @@ private static boolean checkNotNullInternal(Object reference, boolean allowThrow
         if (allowThrow) {
             throw new NullPointerException(errorMessage);
         }
-        MoPubLog.e(errorMessage);
+        MoPubLog.log(CUSTOM, errorMessage);
         return false;
     }
 
@@ -285,7 +287,7 @@ private static boolean checkUiThreadInternal(boolean allowThrow,
         if (allowThrow) {
             throw new IllegalStateException(errorMessage);
         }
-        MoPubLog.e(errorMessage);
+        MoPubLog.log(CUSTOM, errorMessage);
         return false;
     }
 
@@ -299,7 +301,7 @@ private static String format(String template, Object... args) {
         try {
             return String.format(template, args);
         } catch (IllegalFormatException exception) {
-            MoPubLog.e("MoPub preconditions had a format exception: " + exception.getMessage());
+            MoPubLog.log(CUSTOM, "MoPub preconditions had a format exception: " + exception.getMessage());
             return template;
         }
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SdkConfiguration.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SdkConfiguration.java
index 1ea429d5..496d6396 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SdkConfiguration.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SdkConfiguration.java
@@ -1,19 +1,18 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
 package com.mopub.common;
 
 import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 
-import com.mopub.common.util.MoPubCollections;
-
-import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Collection;
 import java.util.Collections;
-import java.util.List;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+
+import static com.mopub.common.logging.MoPubLog.LogLevel;
 
 /**
  * Data object holding any SDK initialization parameters.
@@ -26,9 +25,9 @@
     @NonNull private final String mAdUnitId;
 
     /**
-     * List of the class names of advanced bidders to initialize.
+     * List of the class names of adapter configurations to initialize.
      */
-    @NonNull private final List<Class<? extends MoPubAdvancedBidder>> mAdvancedBidders;
+    @NonNull private final Set<String> mAdapterConfigurationClasses;
 
     /**
      * Used for rewarded video initialization. This holds each custom event's unique settings.
@@ -36,25 +35,49 @@
     @NonNull private final MediationSettings[] mMediationSettings;
 
     /**
-     * List of class names of rewarded video custom events to initialize. These classes must
-     * extend CustomEventRewardedVideo.
+     * Adapter configuration options used in initialization of networks. This is keyed on the
+     * {@link AdapterConfiguration} class and the values are maps of initialization parameters.
+     */
+    @NonNull private final Map<String, Map<String, String>> mMediatedNetworkConfigurations;
+
+    /**
+     * Adapter configuration options passed to the adserver. This is keyed on the
+     * {@link AdapterConfiguration} class and the values are maps of request options.
+     */
+    @NonNull private final Map<String, Map<String, String>> mMoPubRequestOptions;
+
+    /**
+     * The log level that will be used to determine which events are printed or thrown out.
+     */
+    @NonNull private final LogLevel mLogLevel;
+
+    /**
+     * Whether or not legitimate interest is allowed for the collection of personally identifiable information.
      */
-    @Nullable private final List<String> mNetworksToInit;
+    private final boolean mLegitimateInterestAllowed;
 
     /**
      * Holds data for SDK initialization. Do not call this constructor directly; use the Builder.
      */
     private SdkConfiguration(@NonNull final String adUnitId,
-            @NonNull final List<Class<? extends MoPubAdvancedBidder>> advancedBidders,
+            @NonNull final Set<String> adapterConfigurationClasses,
             @NonNull final MediationSettings[] mediationSettings,
-            @Nullable final List<String> networksToInit) {
+            @NonNull final LogLevel logLevel,
+            @NonNull final Map<String, Map<String, String>> mediatedNetworkConfigurations,
+            @NonNull final Map<String, Map<String, String>> moPubRequestOptions,
+            final boolean legitimateInterestAllowed) {
         Preconditions.checkNotNull(adUnitId);
-        Preconditions.checkNotNull(advancedBidders);
+        Preconditions.checkNotNull(adapterConfigurationClasses);
+        Preconditions.checkNotNull(mediatedNetworkConfigurations);
+        Preconditions.checkNotNull(moPubRequestOptions);
 
         mAdUnitId = adUnitId;
-        mAdvancedBidders = advancedBidders;
+        mAdapterConfigurationClasses = adapterConfigurationClasses;
         mMediationSettings = mediationSettings;
-        mNetworksToInit = networksToInit;
+        mLogLevel = logLevel;
+        mMediatedNetworkConfigurations = mediatedNetworkConfigurations;
+        mMoPubRequestOptions = moPubRequestOptions;
+        mLegitimateInterestAllowed = legitimateInterestAllowed;
     }
 
     @NonNull
@@ -63,8 +86,8 @@ public String getAdUnitId() {
     }
 
     @NonNull
-    public List<Class<? extends MoPubAdvancedBidder>> getAdvancedBidders() {
-        return Collections.unmodifiableList(mAdvancedBidders);
+    public Set<String> getAdapterConfigurationClasses() {
+        return Collections.unmodifiableSet(mAdapterConfigurationClasses);
     }
 
     @NonNull
@@ -72,19 +95,32 @@ public String getAdUnitId() {
         return Arrays.copyOf(mMediationSettings, mMediationSettings.length);
     }
 
-    @Nullable
-    public List<String> getNetworksToInit() {
-        if (mNetworksToInit == null) {
-            return null;
-        }
-        return Collections.unmodifiableList(mNetworksToInit);
+    @NonNull
+    LogLevel getLogLevel() {
+        return mLogLevel;
+    }
+
+    public Map<String, Map<String, String>> getMediatedNetworkConfigurations() {
+        return Collections.unmodifiableMap(mMediatedNetworkConfigurations);
+    }
+
+    @NonNull
+    public Map<String, Map<String, String>> getMoPubRequestOptions() {
+        return Collections.unmodifiableMap(mMoPubRequestOptions);
+    }
+
+    public boolean getLegitimateInterestAllowed() {
+        return mLegitimateInterestAllowed;
     }
 
     public static class Builder {
         @NonNull private String adUnitId;
-        @NonNull private final List<Class<? extends MoPubAdvancedBidder>> advancedBidders;
+        @NonNull private final Set<String> adapterConfigurations;
         @NonNull private MediationSettings[] mediationSettings;
-        @Nullable private List<String> networksToInit;
+        @NonNull private LogLevel logLevel = LogLevel.NONE;
+        @NonNull private final Map<String, Map<String, String>> mediatedNetworkConfigurations;
+        @NonNull private final Map<String, Map<String, String>> moPubRequestOptions;
+        private boolean legitimateInterestAllowed;
 
         /**
          * Use this builder instead of creating a new SdkConfiguration. This Builder needs any ad
@@ -94,70 +130,106 @@ public String getAdUnitId() {
          */
         public Builder(@NonNull final String adUnitId) {
             this.adUnitId = adUnitId;
-            advancedBidders = new ArrayList<Class<? extends MoPubAdvancedBidder>>();
+            adapterConfigurations = DefaultAdapterClasses.getClassNamesSet();
             mediationSettings = new MediationSettings[0];
+            mediatedNetworkConfigurations = new HashMap<>();
+            moPubRequestOptions = new HashMap<>();
+            legitimateInterestAllowed = false;
         }
 
         /**
-         * Adds a single advanced bidder class to be initialized.
+         * Specifies an additional custom adapter configuration to attempt to initialize. MoPub
+         * automatically adds MoPub-supported networks' adapter configurations.
          *
-         * @param advancedBidder The advanced bidder class. Cannot be null.
+         * @param adapterConfigurationClass {@link Class#getName()} of an adapter configuration
+         *                                  class. This should not be the simple name or the
+         *                                  canonical name.
          * @return The builder.
          */
-        public Builder withAdvancedBidder(
-                @NonNull final Class<? extends MoPubAdvancedBidder> advancedBidder) {
-            Preconditions.checkNotNull(advancedBidder);
+        public Builder withAdditionalNetwork(@NonNull final String adapterConfigurationClass) {
+            Preconditions.checkNotNull(adapterConfigurationClass);
 
-            this.advancedBidders.add(advancedBidder);
+            adapterConfigurations.add(adapterConfigurationClass);
             return this;
         }
 
         /**
-         * Adds a collection of advanced bidder classes to be initialized.
+         * Adds mediation settings for rewarded video custom events.
          *
-         * @param advancedBidders Collection of advanced bidder classes. Cannot be null.
+         * @param mediationSettings Array of mediation settings. Can be empty but not null.
          * @return The builder.
          */
-        public Builder withAdvancedBidders(
-                @NonNull final Collection<Class<? extends MoPubAdvancedBidder>> advancedBidders) {
-            Preconditions.NoThrow.checkNotNull(advancedBidders);
+        public Builder withMediationSettings(@NonNull MediationSettings... mediationSettings) {
+            Preconditions.checkNotNull(mediationSettings);
 
-            MoPubCollections.addAllNonNull(this.advancedBidders, advancedBidders);
+            this.mediationSettings = mediationSettings;
             return this;
         }
 
         /**
-         * Adds mediation settings for rewarded video custom events.
+         * Adds a log level to be used by MoPubLog.
          *
-         * @param mediationSettings Array of mediation settings. Can be empty but not null.
+         * @param logLevel A MoPubLog.LogLevel. Cannot be null.
          * @return The builder.
          */
-        public Builder withMediationSettings(@NonNull MediationSettings... mediationSettings) {
-            Preconditions.checkNotNull(mediationSettings);
+        public Builder withLogLevel(@NonNull LogLevel logLevel) {
+            Preconditions.checkNotNull(logLevel);
 
-            this.mediationSettings = mediationSettings;
+            this.logLevel = logLevel;
+            return this;
+        }
+
+        /**
+         * Adds a single mediated network configuration keyed by the AdapterConfiguration class.
+         * This is used by ad networks' initialization.
+         *
+         * @param adapterConfigurationClass    The class name to key on.
+         * @param mediatedNetworkConfiguration A Map of network configurations.
+         * @return The builder.
+         */
+        public Builder withMediatedNetworkConfiguration(
+                @NonNull final String adapterConfigurationClass,
+                @NonNull final Map<String, String> mediatedNetworkConfiguration) {
+            Preconditions.checkNotNull(adapterConfigurationClass);
+            Preconditions.checkNotNull(mediatedNetworkConfiguration);
+
+            mediatedNetworkConfigurations.put(adapterConfigurationClass,
+                    mediatedNetworkConfiguration);
             return this;
         }
 
         /**
-         * Adds a list of rewarded video custom events to initialize.
+         * Adds a single MopubRequestOption keyed by the AdapterConfiguration class.
          *
-         * @param networksToInit List of full class names as Strings to initialize for rewarded video.
+         * @param adapterConfigurationClass The class name to key on.
+         * @param mopubRequestOptions       A Map of options.
          * @return The builder.
          */
-        public Builder withNetworksToInit(@Nullable final List<String> networksToInit) {
-            if (networksToInit == null) {
-                return this;
-            }
+        public Builder withMoPubRequestOptions(
+                @NonNull final String adapterConfigurationClass,
+                @NonNull final Map<String, String> mopubRequestOptions) {
+            Preconditions.checkNotNull(adapterConfigurationClass);
+            Preconditions.checkNotNull(mopubRequestOptions);
 
-            this.networksToInit = new ArrayList<>();
-            MoPubCollections.addAllNonNull(this.networksToInit, networksToInit);
+            this.moPubRequestOptions.put(adapterConfigurationClass, mopubRequestOptions);
+            return this;
+        }
+
+        /**
+         * Sets whether or not legitimate interest is allowed for the collection of personally identifiable information.
+         * This API can be used if you want to allow supported SDK networks to collect user information on the basis of legitimate interest.
+         *
+         * @param legitimateInterestAllowed should be true if legitimate interest is allowed. False if it isn't allowed.
+         * @return The builder.
+         */
+        public Builder withLegitimateInterestAllowed(final boolean legitimateInterestAllowed) {
+            this.legitimateInterestAllowed = legitimateInterestAllowed;
             return this;
         }
 
         public SdkConfiguration build() {
-            return new SdkConfiguration(adUnitId, advancedBidders, mediationSettings,
-                    networksToInit);
+            return new SdkConfiguration(adUnitId, adapterConfigurations, mediationSettings,
+                    logLevel, mediatedNetworkConfigurations, moPubRequestOptions, legitimateInterestAllowed);
         }
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SdkInitializationListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SdkInitializationListener.java
index e3ba511c..032fcc11 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SdkInitializationListener.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SdkInitializationListener.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java
index 8bc9db8f..55e450e6 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java
index bd8b9fdd..5c676bb6 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -23,6 +23,7 @@
 import static com.mopub.common.Constants.HTTP;
 import static com.mopub.common.Constants.HTTPS;
 import static com.mopub.common.MoPub.getBrowserAgent;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 import static com.mopub.network.TrackingRequest.makeTrackingHttpRequest;
 
 /**
@@ -78,7 +79,7 @@ protected void performAction(
                 @NonNull final UrlHandler urlHandler,
                 @Nullable String creativeId)
                 throws IntentNotResolvableException {
-            MoPubLog.d("Link to about page ignored.");
+            MoPubLog.log(CUSTOM, "Link to about page ignored.");
         }
     },
 
@@ -330,7 +331,7 @@ public void handleUrl(
             final boolean fromUserInteraction,
             @Nullable String creativeId)
             throws IntentNotResolvableException {
-        MoPubLog.d("Ad event URL: " + destinationUri);
+        MoPubLog.log(CUSTOM, "Ad event URL: " + destinationUri);
         if (mRequiresUserInteraction && !fromUserInteraction) {
             throw new IntentNotResolvableException("Attempted to handle action without user " +
                     "interaction.");
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlHandler.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlHandler.java
index b1c7ef60..03a7ffbd 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlHandler.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlHandler.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -17,6 +17,7 @@
 import java.util.EnumSet;
 
 import static com.mopub.common.UrlResolutionTask.UrlResolutionListener;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.ERROR;
 import static com.mopub.network.TrackingRequest.makeTrackingHttpRequest;
 
 /**
@@ -323,7 +324,7 @@ public boolean handleResolvedUrl(@NonNull final Context context,
                     }
                     return true;
                 } catch (IntentNotResolvableException e) {
-                    MoPubLog.d(e.getMessage(), e);
+                    MoPubLog.log(ERROR, e.getMessage(), e);
                     lastFailedUrlAction = urlAction;
                     // continue trying to match...
                 }
@@ -341,7 +342,7 @@ private void failUrlHandling(@Nullable final String url, @Nullable UrlAction url
             urlAction = UrlAction.NOOP;
         }
 
-        MoPubLog.d(message, throwable);
+        MoPubLog.log(ERROR, message, throwable);
         mResultActions.urlHandlingFailed(url, urlAction);
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
index 02f34db7..042dc951 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -19,6 +19,8 @@
 import java.net.URISyntaxException;
 import java.net.URL;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 @VisibleForTesting
 public class UrlResolutionTask extends AsyncTask<String, Void, String> {
     private static final int REDIRECT_LIMIT = 10;
@@ -103,7 +105,7 @@ private String getRedirectLocation(@NonNull final String urlString) throws IOExc
                     try {
                         is.close();
                     } catch (IOException e) {
-                        MoPubLog.d("IOException when closing httpUrlConnection. Ignoring.");
+                        MoPubLog.log(CUSTOM, "IOException when closing httpUrlConnection. Ignoring.");
                     }
                 }
                 httpUrlConnection.disconnect();
@@ -127,10 +129,10 @@ static String resolveRedirectLocation(@NonNull final String baseUrl,
                 result =  baseUri.resolve(redirectUrl).toString();
             } catch (IllegalArgumentException e) {
                 // Ensure the request is cancelled instead of resolving an intermediary URL
-                MoPubLog.d("Invalid URL redirection. baseUrl=" + baseUrl + "\n redirectUrl=" + redirectUrl);
+                MoPubLog.log(CUSTOM, "Invalid URL redirection. baseUrl=" + baseUrl + "\n redirectUrl=" + redirectUrl);
                 throw new URISyntaxException(redirectUrl, "Unable to parse invalid URL");
             } catch (NullPointerException e) {
-                MoPubLog.d("Invalid URL redirection. baseUrl=" + baseUrl + "\n redirectUrl=" + redirectUrl);
+                MoPubLog.log(CUSTOM, "Invalid URL redirection. baseUrl=" + baseUrl + "\n redirectUrl=" + redirectUrl);
                 throw e;
             }
         }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/VisibilityTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/VisibilityTracker.java
index 923e6a5d..691a4042 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/VisibilityTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/VisibilityTracker.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -23,6 +23,7 @@
 import java.util.WeakHashMap;
 
 import static android.view.ViewTreeObserver.OnPreDrawListener;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 
 /**
  * Tracks views to determine when they become visible or invisible, where visibility is defined as
@@ -121,13 +122,13 @@ private void setViewTreeObserver(@Nullable final Context context, @Nullable fina
 
         final View rootView = Views.getTopmostView(context, view);
         if (rootView == null) {
-            MoPubLog.d("Unable to set Visibility Tracker due to no available root view.");
+            MoPubLog.log(CUSTOM, "Unable to set Visibility Tracker due to no available root view.");
             return;
         }
 
         final ViewTreeObserver viewTreeObserver = rootView.getViewTreeObserver();
         if (!viewTreeObserver.isAlive()) {
-            MoPubLog.w("Visibility Tracker was unable to track views because the"
+            MoPubLog.log(CUSTOM, "Visibility Tracker was unable to track views because the"
                     + " root view tree observer was not alive");
             return;
         }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/VisibleForTesting.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/VisibleForTesting.java
index 3573ff09..a75101c8 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/VisibleForTesting.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/VisibleForTesting.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/factories/MethodBuilderFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/factories/MethodBuilderFactory.java
index badb1186..f60702d6 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/factories/MethodBuilderFactory.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/factories/MethodBuilderFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubDefaultLogger.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubDefaultLogger.java
new file mode 100644
index 00000000..73b82b37
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubDefaultLogger.java
@@ -0,0 +1,67 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.common.logging;
+
+import android.support.annotation.Nullable;
+import android.util.Log;
+
+/**
+ * All logs will be printed using android.util.Log.i(). As a result, filtering these by log level
+ * is not possible.
+ *
+ * Due to the new format of the logs, filtering can be done by class or method name, or log event
+ * message.
+ */
+public class MoPubDefaultLogger implements MoPubLogger {
+
+    /**
+     * Logcat has a max message length of 4kB, so let's split each message by this max message
+     * length. Since each message has some metadata, let's limit this to 3kB.
+     */
+    static int MAX_MESSAGE_LENGTH_BYTES = 3 * 1024;
+
+    /**
+     * MESSAGE_FORMAT is used to produce a log in the following format:
+     * "[com.mopub.common.logging.MoPubLog][log] Ad Custom Log - Loading custom event adapter."
+     */
+    private static final String MESSAGE_FORMAT = "[%s][%s] %s";
+
+    /**
+     * MESSAGE_WITH_ID_FORMAT is used to produce a log in the following format:
+     * "[com.mopub.common.logging.MoPubLog][log][ad-unit-id-123] Adapter Custom Log - Attempting to invoke custom event: com.mopub.mobileads.HtmlBanner"
+     */
+    private static final String MESSAGE_WITH_ID_FORMAT = "[%s][%s][%s] %s";
+
+    public MoPubDefaultLogger() {
+    }
+
+    @Override
+    public void log(@Nullable String className, @Nullable String methodName,
+                    @Nullable String identifier, @Nullable String message) {
+        for (final String segment : split(message)) {
+            if (identifier == null) {
+                Log.i(MoPubLog.LOGTAG, String.format(MESSAGE_FORMAT, className,
+                        methodName, segment));
+            } else {
+                Log.i(MoPubLog.LOGTAG, String.format(MESSAGE_WITH_ID_FORMAT, className,
+                        methodName, identifier, segment));
+            }
+        }
+    }
+
+    static String[] split(@Nullable final String message) {
+        if (message == null) {
+            return new String[1];
+        }
+
+        final int segmentCount = 1 + (message.length() / MAX_MESSAGE_LENGTH_BYTES);
+        final String[] segments = new String[segmentCount];
+        for (int i = 0; i < segmentCount; i++) {
+            segments[i] = message.substring(i * MAX_MESSAGE_LENGTH_BYTES,
+                    Math.min((i + 1) * MAX_MESSAGE_LENGTH_BYTES, message.length()));
+        }
+        return segments;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
index 60982445..4cd7e5da 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
@@ -1,158 +1,600 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
 package com.mopub.common.logging;
 
 import android.support.annotation.NonNull;
-import android.util.Log;
+import android.support.annotation.Nullable;
+import android.support.v4.util.Pair;
+import android.text.TextUtils;
 
-import com.mopub.common.VisibleForTesting;
+import com.mopub.common.Preconditions;
 
+import java.text.MessageFormat;
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
-import java.util.logging.Handler;
-import java.util.logging.Level;
-import java.util.logging.LogManager;
-import java.util.logging.LogRecord;
-import java.util.logging.Logger;
+
+import static java.text.MessageFormat.format;
+
+import static com.mopub.common.util.Strings.getDelimitedString;
 
 public class MoPubLog {
-    public static final String LOGGER_NAMESPACE = "com.mopub";
 
-    private static final String LOGTAG = "MoPub";
-    private static final Logger LOGGER = Logger.getLogger(LOGGER_NAMESPACE);
-    private static final MoPubLogHandler LOG_HANDLER = new MoPubLogHandler();
+    public static final String LOGTAG = "MoPub";
+
+    /**
+     * STACK_TRACE_LEVEL is a magic number used to determine the offset on the call stack of the
+     * calling class and method so the names can be used in log messages.
+     */
+    private static final int STACK_TRACE_LEVEL = 4;
 
     /**
-     * Sets up the {@link Logger}, {@link Handler}, and prevents any parent Handlers from being
-     * notified to avoid duplicated log messages.
+     * LogLevelInt values set for parity with iOS
      */
-    static {
-        LOGGER.setUseParentHandlers(false);
-        LOGGER.setLevel(Level.ALL);
-        LOG_HANDLER.setLevel(Level.FINE);
+    public interface LogLevelInt {
+        int DEBUG_INT = 20;
+        int INFO_INT = 30;
+        int NONE_INT = 70;
+    }
+
+    public enum LogLevel implements LogLevelInt {
+
+        DEBUG(DEBUG_INT, "DEBUG"),
+        INFO(INFO_INT, "INFO"),
+        NONE(NONE_INT, "NONE");
+
+        private int mLevel;
+        private String mLevelString;
+
+        LogLevel(int level, String levelString) {
+            this.mLevel = level;
+            this.mLevelString = levelString;
+        }
+
+        @NonNull
+        public String toString() {
+            return mLevelString;
+        }
+
+        @NonNull
+        public int intValue() {
+            return mLevel;
+        }
+
+        /**
+         * This valueOf overload is used to get the associated LogLevel enum from an int.
+         *
+         * @param level The int value for which the LogLevel is needed.
+         * @return The LogLevel associated with the level. Will return NONE by default.
+         */
+        @NonNull
+        public static LogLevel valueOf(final int level) {
+            switch (level) {
+                case DEBUG_INT:
+                    return DEBUG;
+                case INFO_INT:
+                    return INFO;
+                case NONE_INT:
+                default:
+                    return NONE;
+            }
+        }
+    }
+
+    @NonNull private static final MoPubLog sInstance = new MoPubLog();
+    @NonNull private LogLevel sLogLevel = LogLevel.INFO;
+    @NonNull private Map<MoPubLogger, LogLevel> mLoggers = new HashMap<>();
+    @NonNull private MoPubLogger mDefaultLogger = new MoPubDefaultLogger();
+
+    private MoPubLog() {
+    }
+
+    private static void logDeprecated(@Nullable final String message, @Nullable final Throwable throwable) {
+        MoPubLog.log(SdkLogEvent.CUSTOM_WITH_THROWABLE, message, (throwable != null)
+                ? throwable.getMessage() : "");
+    }
+
+    private static void removeLogger(@Nullable MoPubLogger logger) {
+        sInstance.mLoggers.remove(logger);
+    }
+
+    public static void addLogger(@Nullable MoPubLogger logger) {
+        addLogger(logger, sInstance.sLogLevel);
+    }
+
+    public static void addLogger(@Nullable MoPubLogger logger, @Nullable LogLevel logLevel) {
+        sInstance.mLoggers.put(logger, logLevel);
+    }
+
+    public static void setLogLevel(@NonNull LogLevel logLevel) {
+        Preconditions.checkNotNull(logLevel);
+
+        sInstance.sLogLevel = logLevel;
+        addLogger(sInstance.mDefaultLogger, sInstance.sLogLevel);
+    }
+
+    @NonNull
+    public static LogLevel getLogLevel() {
+        return sInstance.sLogLevel;
+    }
+
+    public static void log(@Nullable final MPLogEventType logEventType, @Nullable final Object... args) {
+        Pair<String, String> classAndMethodNames = getClassAndMethod();
+        log(classAndMethodNames, null, logEventType, args);  // null identifiers are omitted
+    }
 
-        LogManager.getLogManager().addLogger(LOGGER);
-        addHandler(LOGGER, LOG_HANDLER);
+    public static void log(@Nullable final String identifier, @Nullable final MPLogEventType logEventType,
+                           @Nullable final Object... args) {
+        Pair<String, String> classAndMethodNames = getClassAndMethod();
+        log(classAndMethodNames, identifier, logEventType, args);  // null identifiers are omitted
     }
 
-    private MoPubLog() {}
+    private static void log(@NonNull Pair<String, String> classAndMethodNames, @Nullable String identifier,
+                            @Nullable  MPLogEventType logEventType, @Nullable Object... args) {
+        Preconditions.checkNotNull(classAndMethodNames);
 
+        if (logEventType == null) {
+            return;
+        }
+
+        for (MoPubLogger logger : sInstance.mLoggers.keySet()) {
+            if (sInstance.mLoggers.get(logger) != null
+                    && sInstance.mLoggers.get(logger).intValue() <= logEventType.getLogLevel().intValue()) {
+                logger.log(classAndMethodNames.first, classAndMethodNames.second, identifier,
+                        logEventType.getMessage(args));
+            }
+        }
+    }
+
+    private static Pair<String, String> getClassAndMethod() {
+        final StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();
+        return new Pair<>(stackTraceElements[STACK_TRACE_LEVEL].getClassName(),
+                stackTraceElements[STACK_TRACE_LEVEL].getMethodName());
+    }
+
+    @Deprecated
     public static void c(final String message) {
         MoPubLog.c(message, null);
     }
 
+    @Deprecated
     public static void v(final String message) {
         MoPubLog.v(message, null);
     }
 
+    @Deprecated
     public static void d(final String message) {
         MoPubLog.d(message, null);
     }
 
+    @Deprecated
     public static void i(final String message) {
         MoPubLog.i(message, null);
     }
 
+    @Deprecated
     public static void w(final String message) {
         MoPubLog.w(message, null);
     }
 
+    @Deprecated
     public static void e(final String message) {
         MoPubLog.e(message, null);
     }
 
+    @Deprecated
     public static void c(final String message, final Throwable throwable) {
-        LOGGER.log(Level.FINEST, message, throwable);
+        logDeprecated(message, throwable);
     }
 
+    @Deprecated
     public static void v(final String message, final Throwable throwable) {
-        LOGGER.log(Level.FINE, message, throwable);
+        logDeprecated(message, throwable);
     }
 
+    @Deprecated
     public static void d(final String message, final Throwable throwable) {
-        LOGGER.log(Level.CONFIG, message, throwable);
+        logDeprecated(message, throwable);
     }
 
+    @Deprecated
     public static void i(final String message, final Throwable throwable) {
-        LOGGER.log(Level.INFO, message, throwable);
+        logDeprecated(message, throwable);
     }
 
+    @Deprecated
     public static void w(final String message, final Throwable throwable) {
-        LOGGER.log(Level.WARNING, message, throwable);
+        logDeprecated(message, throwable);
     }
 
+    @Deprecated
     public static void e(final String message, final Throwable throwable) {
-        LOGGER.log(Level.SEVERE, message, throwable);
+        logDeprecated(message, throwable);
     }
 
-    @VisibleForTesting
-    public static void setSdkHandlerLevel(@NonNull final Level level) {
-        LOG_HANDLER.setLevel(level);
+    private interface MPLogEventType {
+        @NonNull
+        String getMessage(@Nullable final Object... args);
+
+        @NonNull
+        LogLevel getLogLevel();
     }
 
-    /**
-     * Adds a {@link Handler} to a {@link Logger} if they are not already associated.
-     */
-    private static void addHandler(@NonNull final Logger logger,
-            @NonNull final Handler handler) {
-        final Handler[] currentHandlers = logger.getHandlers();
-        for (final Handler currentHandler : currentHandlers) {
-            if (currentHandler.equals(handler)) {
-                return;
-            }
+    public enum AdLogEvent implements MPLogEventType {
+
+        // Params:
+        // Ad request URL
+        // POST body of request
+        REQUESTED(LogLevel.DEBUG, "Ad requesting from AdServer: {0}\n{1}"),
+
+        // Params:
+        // Response JSON
+        RESPONSE_RECEIVED(LogLevel.DEBUG, "Ad server responded with:\n{0}"),
+
+        // Params:
+        // <none>
+        LOAD_ATTEMPTED(LogLevel.INFO, "Ad attempting to load"),
+
+        // Params:
+        // <none>
+        LOAD_SUCCESS(LogLevel.INFO, "Ad loaded"),
+
+        // Params:
+        // Error Code
+        // Error Message
+        LOAD_FAILED(LogLevel.INFO, "Ad failed to load: ({0}) {1}"),
+
+        // Params:
+        // <none>
+        SHOW_ATTEMPTED(LogLevel.INFO, "Attempting to show ad"),
+
+        // Params:
+        // <none>
+        SHOW_SUCCESS(LogLevel.INFO, "Ad shown"),
+
+        // Params:
+        // Error Code
+        // Error Message
+        SHOW_FAILED(LogLevel.INFO, "Ad failed to show: ({0}) {1}"),
+
+        // Params:
+        // Expiration time interval in seconds
+        EXPIRED(LogLevel.DEBUG, "Ad expired since it was not shown within {0} seconds of it being loaded"),
+
+        // Params:
+        // <none>
+        CLICKED(LogLevel.DEBUG, "Ad clicked"),
+
+        // Params:
+        // <none>
+        WILL_APPEAR(LogLevel.DEBUG, "Ad will appear"),
+
+        // Params:
+        // <none>
+        DID_APPEAR(LogLevel.DEBUG, "Ad did appear"),
+
+        // Params:
+        // <none>
+        WILL_DISAPPEAR(LogLevel.DEBUG, "Ad will disappear"),
+
+        // Params:
+        // <none>
+        DID_DISAPPEAR(LogLevel.DEBUG, "Ad did disappear"),
+
+        // Params:
+        // Reward amount
+        // Reward currency name
+        SHOULD_REWARD(LogLevel.DEBUG, "Ad should reward user with {0} {1}"),
+
+        // Params:
+        // <none>
+        WILL_LEAVE_APPLICATION(LogLevel.DEBUG, "Ad will leave application"),
+
+        // Params:
+        // Custom message string
+        CUSTOM(LogLevel.DEBUG, "Ad Log - {0}"),
+
+        // Params:
+        // Custom message string
+        // Throwable message string
+        CUSTOM_WITH_THROWABLE(LogLevel.DEBUG, "Ad Log With Throwable - {0}, {1}");
+
+        private LogLevel mLogLevel;
+        private String mMessageFormat;
+
+        AdLogEvent(@NonNull final LogLevel logLevel, @NonNull final String messageFormat) {
+            Preconditions.checkNotNull(logLevel);
+            Preconditions.checkNotNull(messageFormat);
+
+            mLogLevel = logLevel;
+            mMessageFormat = messageFormat;
+        }
+
+        @Override
+        @NonNull
+        public String getMessage(@Nullable final Object... args) {
+            return format(mMessageFormat, args);
+        }
+
+        @Override
+        @NonNull
+        public LogLevel getLogLevel() {
+            return mLogLevel;
         }
-        logger.addHandler(handler);
     }
 
-    private static final class MoPubLogHandler extends Handler {
-        private static final Map<Level, Integer> LEVEL_TO_LOG = new HashMap<Level, Integer>(7);
+    public enum AdapterLogEvent implements MPLogEventType {
 
-        /*
-         * Mapping between Level.* and Log.*:
-         * Level.FINEST  => Log.v
-         * Level.FINER   => Log.v
-         * Level.FINE    => Log.v
-         * Level.CONFIG  => Log.d
-         * Level.INFO    => Log.i
-         * Level.WARNING => Log.w
-         * Level.SEVERE  => Log.e
-         */
-        static {
-            LEVEL_TO_LOG.put(Level.FINEST, Log.VERBOSE);
-            LEVEL_TO_LOG.put(Level.FINER, Log.VERBOSE);
-            LEVEL_TO_LOG.put(Level.FINE, Log.VERBOSE);
-            LEVEL_TO_LOG.put(Level.CONFIG, Log.DEBUG);
-            LEVEL_TO_LOG.put(Level.INFO, Log.INFO);
-            LEVEL_TO_LOG.put(Level.WARNING, Log.WARN);
-            LEVEL_TO_LOG.put(Level.SEVERE, Log.ERROR);
+        // Params:
+        // Custom event name
+        // Creative ID
+        // DSP Name
+        LOAD_ATTEMPTED(LogLevel.DEBUG, "Adapter {0} attempting to load ad{1}{2}"),
+
+        // Params:
+        // Custom event name
+        LOAD_SUCCESS(LogLevel.DEBUG, "Adapter {0} successfully loaded ad"),
+
+        // Params:
+        // Custom event name
+        // Error Code
+        // Error Message
+        LOAD_FAILED(LogLevel.DEBUG, "Adapter {0} failed to load ad: ({1}) {2}"),
+
+        // Params:
+        // Custom event name
+        SHOW_ATTEMPTED(LogLevel.DEBUG, "Adapter {0} attempting to show ad"),
+
+        // Params:
+        // Custom event name
+        SHOW_SUCCESS(LogLevel.DEBUG, "Adapter {0} successfully showed ad"),
+
+        // Params:
+        // Custom event name
+        // Error Code
+        // Error Message
+        SHOW_FAILED(LogLevel.DEBUG, "Adapter {0} failed to show ad: ({1}) {2}"),
+
+        // Params:
+        // Custom Event Name
+        // Expiration time interval in seconds
+        EXPIRED(LogLevel.DEBUG, "Adapter {0} expired since it was not shown within {1} seconds of it being loaded"),
+
+        // Params:
+        // Custom Event Name
+        // <none>
+        CLICKED(LogLevel.DEBUG, "Adapter {0} clicked"),
+
+        // Params:
+        // Custom Event Name
+        // <none>
+        WILL_APPEAR(LogLevel.DEBUG, "Adapter {0} will appear"),
+
+        // Params:
+        // Custom Event Name
+        // <none>
+        DID_APPEAR(LogLevel.DEBUG, "Adapter {0} did appear"),
+
+        // Params:
+        // Custom Event Name
+        // <none>
+        WILL_DISAPPEAR(LogLevel.DEBUG, "Adapter {0} will disappear"),
+
+        // Params:
+        // Custom Event Name
+        // <none>
+        DID_DISAPPEAR(LogLevel.DEBUG, "Adapter {0} did disappear"),
+
+        // Params:
+        // Custom Event Name
+        // Reward amount
+        // Reward currency name
+        SHOULD_REWARD(LogLevel.DEBUG, "Adapter {0} should reward user with {1} {2}"),
+
+        // Params:
+        // Custom Event Name
+        // <none>
+        WILL_LEAVE_APPLICATION(LogLevel.DEBUG, "Adapter {0} will leave application"),
+
+        // Params:
+        // Custom message string
+        CUSTOM(LogLevel.DEBUG, "Adapter {0} Log - {1}"),
+
+        // Params:
+        // Custom message string
+        // Throwable message string
+        CUSTOM_WITH_THROWABLE(LogLevel.DEBUG, "Adapter Log With Throwable - {0}, {1}");
+
+        private LogLevel mLogLevel;
+        private String mMessageFormat;
+
+        AdapterLogEvent(@NonNull final LogLevel logLevel, @NonNull final String messageFormat) {
+            Preconditions.checkNotNull(logLevel);
+            Preconditions.checkNotNull(messageFormat);
+
+            mLogLevel = logLevel;
+            mMessageFormat = messageFormat;
         }
 
         @Override
-        @SuppressWarnings({"LogTagMismatch", "WrongConstant"})
-        public void publish(final LogRecord logRecord) {
-            if (isLoggable(logRecord)) {
-                final int priority;
-                if (LEVEL_TO_LOG.containsKey(logRecord.getLevel())) {
-                    priority = LEVEL_TO_LOG.get(logRecord.getLevel());
+        @NonNull
+        public String getMessage(@Nullable final Object... args) {
+            final MessageFormat mf = new MessageFormat(mMessageFormat);
+            final Object[] params = Arrays.copyOf(args, mf.getFormats().length);
+
+            if (this == LOAD_ATTEMPTED) {
+                if (args.length > 1 && args[1] != null && !TextUtils.isEmpty(args[1].toString())) {
+                    params[1] = format(" with DSP creative ID {0}", args[1].toString());
                 } else {
-                    priority = Log.VERBOSE;
+                    params[1] = "";
                 }
 
-                String message = logRecord.getMessage() + "\n";
-
-                final Throwable error = logRecord.getThrown();
-                if (error != null) {
-                    message += Log.getStackTraceString(error);
+                if (args.length > 2 && args[2] != null && !TextUtils.isEmpty(args[2].toString())) {
+                    params[2] = format(" with DSP name {0}", args[2].toString());
+                } else {
+                    params[2] = "";
                 }
+            }
+
+            return mf.format(params);
+        }
+
+        @Override
+        @NonNull
+        public LogLevel getLogLevel() {
+            return mLogLevel;
+        }
+    }
+
+    public enum ConsentLogEvent implements MPLogEventType {
+
+        // Params:
+        // <none>
+        SYNC_ATTEMPTED(LogLevel.DEBUG, "Consent attempting to synchronize state"),
+
+        // Params:
+        // Optional message
+        SYNC_COMPLETED(LogLevel.DEBUG, "Consent synchronization completed: {0}"),
+
+        // Params:
+        // Error Code
+        // Error Message
+        SYNC_FAILED(LogLevel.DEBUG, "Consent synchronization failed: ({0}) {1}"),
+
+        // Params:
+        // Current consent state
+        // Old consent state
+        // Can collect personal info
+        // Reason
+        UPDATED(LogLevel.DEBUG, "Consent changed from {0} to {1}: PII {2} be collected. Reason: {3}"),
+
+        // Params:
+        // <none>
+        SHOULD_SHOW_DIALOG(LogLevel.DEBUG, "Consent dialog should be shown"),
+
+        // Params:
+        // <none>
+        LOAD_ATTEMPTED(LogLevel.DEBUG, "Consent attempting to load dialog"),
 
-                Log.println(priority, LOGTAG, message);
+        // Params:
+        // <none>
+        LOAD_SUCCESS(LogLevel.DEBUG, "Consent dialog loaded"),
+
+        // Params:
+        // Error Code
+        // Error Message
+        LOAD_FAILED(LogLevel.DEBUG, "Consent dialog failed: ({0}) {1}"),
+
+        // Params:
+        // <none>
+        SHOW_ATTEMPTED(LogLevel.DEBUG, "Consent dialog attempting to show"),
+
+        // Params:
+        // <none>
+        SHOW_SUCCESS(LogLevel.DEBUG, "Consent successfully showed dialog"),
+
+        // Params:
+        // Error Code
+        // Error Message
+        SHOW_FAILED(LogLevel.DEBUG, "Consent dialog failed to show: ({0}) {1}"),
+
+        // Params:
+        // Custom message string
+        CUSTOM(LogLevel.DEBUG, "Consent Log - {0}"),
+
+        // Params:
+        // Custom message string
+        // Throwable message string
+        CUSTOM_WITH_THROWABLE(LogLevel.DEBUG, "Consent Log With Throwable - {0}, {1}");
+
+        private LogLevel mLogLevel;
+        private String mMessageFormat;
+
+        ConsentLogEvent(@NonNull final LogLevel logLevel, @NonNull final String messageFormat) {
+            Preconditions.checkNotNull(logLevel);
+            Preconditions.checkNotNull(messageFormat);
+
+            mLogLevel = logLevel;
+            mMessageFormat = messageFormat;
+        }
+
+        @Override
+        @NonNull
+        public String getMessage(@Nullable final Object... args) {
+            if (this == UPDATED && args != null && args.length > 2) {
+                args[2] = (args[2] instanceof Boolean && (Boolean) args[2])
+                        ? "can"
+                        : "cannot";
             }
+
+            return format(mMessageFormat, args);
         }
 
-        @Override public void close() {}
+        @Override
+        @NonNull
+        public LogLevel getLogLevel() {
+            return mLogLevel;
+        }
+    }
+
+    public enum SdkLogEvent implements MPLogEventType {
+
+        // Params:
+        // <none>
+        INIT_STARTED(LogLevel.DEBUG, "SDK initialization started"),
+
+        // Params:
+        // Comma delimited string of networks that were initialized, or "No networks initialized."
+        // Comma delimited string of advanced bidder that were initialized, or "No bidders initialized."
+        INIT_FINISHED(LogLevel.INFO, "SDK initialized and ready to display ads.\nInitialized adapters:\n{0}"),
 
-        @Override public void flush() {}
+        // Params:
+        // Custom message string
+        CUSTOM(LogLevel.DEBUG, "SDK Log - {0}"),
+
+        // Params:
+        // Custom message string
+        // Throwable message string
+        CUSTOM_WITH_THROWABLE(LogLevel.DEBUG, "SDK Log With Throwable - {0}, {1}"),
+
+        // Params:
+        // Custom message string
+        ERROR(LogLevel.DEBUG, "SDK Error Log - {0}, {1}");
+
+        private LogLevel mLogLevel;
+        private String mMessageFormat;
+
+        SdkLogEvent(@NonNull final LogLevel logLevel, @NonNull final String messageFormat) {
+            Preconditions.checkNotNull(logLevel);
+            Preconditions.checkNotNull(messageFormat);
+
+            mLogLevel = logLevel;
+            mMessageFormat = messageFormat;
+        }
+
+        @Override
+        @NonNull
+        public String getMessage(@Nullable final Object... args) {
+            if (this == INIT_FINISHED && args.length > 0) {
+                final String adapters = getDelimitedString(args[0], "\n");
+
+                if (TextUtils.isEmpty(adapters)) {
+                    args[0] = "No adapters initialized.";
+                } else {
+                    args[0] = adapters;
+                }
+            }
+
+            return format(mMessageFormat, args);
+        }
+
+        @Override
+        @NonNull
+        public LogLevel getLogLevel() {
+            return mLogLevel;
+        }
     }
+
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLogger.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLogger.java
new file mode 100644
index 00000000..90c095a6
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLogger.java
@@ -0,0 +1,13 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.common.logging;
+
+import android.support.annotation.Nullable;
+
+public interface MoPubLogger {
+
+    void log(@Nullable String className, @Nullable String methodName,
+             @Nullable String identifier, @Nullable String message);
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/AdvertisingId.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/AdvertisingId.java
index ee26d20e..23d475cf 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/AdvertisingId.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/AdvertisingId.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -11,10 +11,11 @@
 
 import java.io.Serializable;
 import java.util.Calendar;
+import java.util.TimeZone;
 import java.util.UUID;
 
 public class AdvertisingId implements Serializable {
-    static final long ROTATION_TIME_MS = 24 * 60 * 60 * 1000;
+    static final long ONE_DAY_MS = 24 * 60 * 60 * 1000;
     private static final String PREFIX_IFA = "ifa:";
     private static final String PREFIX_MOPUB = "mopub:";
 
@@ -47,7 +48,7 @@
                   boolean limitAdTrackingEnabled,
                   long rotationTime) {
         Preconditions.checkNotNull(ifaId);
-        Preconditions.checkNotNull(ifaId);
+        Preconditions.checkNotNull(mopubId);
 
         mAdvertisingId = ifaId;
         mMopubId = mopubId;
@@ -100,7 +101,7 @@ public boolean isDoNotTrack() {
     static AdvertisingId generateExpiredAdvertisingId() {
         Calendar time = Calendar.getInstance();
         String mopubId = generateIdString();
-        return new AdvertisingId("", mopubId, false, time.getTimeInMillis() - ROTATION_TIME_MS - 1);
+        return new AdvertisingId("", mopubId, false, time.getTimeInMillis() - ONE_DAY_MS - 1);
     }
 
     @NonNull
@@ -116,8 +117,11 @@ static String generateIdString() {
     }
 
     boolean isRotationRequired() {
-        Calendar now = Calendar.getInstance();
-        return now.getTimeInMillis() - mLastRotation.getTimeInMillis() >= ROTATION_TIME_MS;
+        final Calendar now = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
+        final Calendar lastRotation = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
+        lastRotation.setTimeInMillis(mLastRotation.getTimeInMillis());
+        return (now.get(Calendar.DAY_OF_YEAR) != lastRotation.get(Calendar.DAY_OF_YEAR)) ||
+                (now.get(Calendar.YEAR) != lastRotation.get(Calendar.YEAR));
     }
 
     @Override
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentChangeReason.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentChangeReason.java
index d04e0fa5..61463b95 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentChangeReason.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentChangeReason.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentData.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentData.java
index 50ee38e6..0d5199f9 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentData.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentData.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogActivity.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogActivity.java
index 4b1d220c..17ccc85f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogActivity.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogActivity.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -21,6 +21,12 @@
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Intents;
 import com.mopub.exceptions.IntentNotResolvableException;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import static com.mopub.common.logging.MoPubLog.ConsentLogEvent.SHOW_FAILED;
+import static com.mopub.common.logging.MoPubLog.ConsentLogEvent.SHOW_SUCCESS;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM_WITH_THROWABLE;
 
 public class ConsentDialogActivity extends Activity {
     private static final int CLOSE_BUTTON_DELAY_MS = 10000;
@@ -40,7 +46,9 @@ static void start(@NonNull final Context context, @NonNull String htmlData) {
         Preconditions.checkNotNull(context);
 
         if (TextUtils.isEmpty(htmlData)) {
-            MoPubLog.e("ConsentDialogActivity htmlData can't be empty string.");
+            MoPubLog.log(CUSTOM, "ConsentDialogActivity htmlData can't be empty string.");
+            MoPubLog.log(SHOW_FAILED, MoPubErrorCode.INTERNAL_ERROR.getIntCode(),
+                    MoPubErrorCode.INTERNAL_ERROR);
             return;
         }
 
@@ -48,7 +56,9 @@ static void start(@NonNull final Context context, @NonNull String htmlData) {
         try {
             Intents.startActivity(context, intent);
         } catch (ActivityNotFoundException | IntentNotResolvableException e) {
-            MoPubLog.e("ConsentDialogActivity not found - did you declare it in AndroidManifest.xml?");
+            MoPubLog.log(CUSTOM, "ConsentDialogActivity not found - did you declare it in AndroidManifest.xml?");
+            MoPubLog.log(SHOW_FAILED, MoPubErrorCode.INTERNAL_ERROR.getIntCode(),
+                    MoPubErrorCode.INTERNAL_ERROR);
         }
     }
 
@@ -69,7 +79,9 @@ protected void onCreate(@Nullable Bundle savedInstanceState) {
         Intent intent = getIntent();
         String htmlBody = intent.getStringExtra(KEY_HTML_PAGE);
         if (TextUtils.isEmpty(htmlBody)) {
-            MoPubLog.e("Web page for ConsentDialogActivity is empty");
+            MoPubLog.log(CUSTOM, "Web page for ConsentDialogActivity is empty");
+            MoPubLog.log(SHOW_FAILED, MoPubErrorCode.INTERNAL_ERROR.getIntCode(),
+                    MoPubErrorCode.INTERNAL_ERROR);
             finish();
             return;
         }
@@ -77,7 +89,17 @@ protected void onCreate(@Nullable Bundle savedInstanceState) {
         requestWindowFeature(Window.FEATURE_NO_TITLE);
         getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
 
-        mView = new ConsentDialogLayout(this);
+        try {
+            mView = new ConsentDialogLayout(this);
+        } catch (RuntimeException e) {
+            // Notably, android.webkit.WebViewFactory$MissingWebViewPackageException
+            MoPubLog.log(CUSTOM_WITH_THROWABLE, "Unable to create WebView", e);
+            MoPubLog.log(SHOW_FAILED, MoPubErrorCode.INTERNAL_ERROR.getIntCode(),
+                    MoPubErrorCode.INTERNAL_ERROR);
+            finish();
+            return;
+        }
+
         mView.setConsentClickListener(new ConsentDialogLayout.ConsentListener() {
             @Override
             public void onConsentClick(ConsentStatus status) {
@@ -116,6 +138,12 @@ protected void onStart() {
         mCloseButtonHandler.postDelayed(mEnableCloseButtonRunnable, CLOSE_BUTTON_DELAY_MS);
     }
 
+    @Override
+    protected void onResume() {
+        super.onResume();
+        MoPubLog.log(SHOW_SUCCESS);
+    }
+
     @Override
     protected void onStop() {
         super.onStop();
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java
index 6e8e96d3..9d681dc7 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -18,6 +18,13 @@
 import com.mopub.network.Networking;
 import com.mopub.volley.VolleyError;
 
+import static com.mopub.common.logging.MoPubLog.ConsentLogEvent.LOAD_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.ConsentLogEvent.LOAD_FAILED;
+import static com.mopub.common.logging.MoPubLog.ConsentLogEvent.LOAD_SUCCESS;
+import static com.mopub.common.logging.MoPubLog.ConsentLogEvent.SHOW_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.ConsentLogEvent.SHOW_FAILED;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 public class ConsentDialogController implements ConsentDialogRequest.Listener {
     @NonNull
     private final Context mAppContext;
@@ -42,11 +49,15 @@ public void onSuccess(final ConsentDialogResponse response) {
         if (TextUtils.isEmpty(mHtmlBody)) {
             mReady = false;
             if (mExtListener != null) {
+                MoPubLog.log(LOAD_FAILED, MoPubErrorCode.INTERNAL_ERROR.getIntCode(),
+                        MoPubErrorCode.INTERNAL_ERROR);
                 mExtListener.onConsentDialogLoadFailed(MoPubErrorCode.INTERNAL_ERROR);
             }
             return;
         }
 
+        MoPubLog.log(LOAD_SUCCESS);
+
         mReady = true;
         if (mExtListener != null) {
             mExtListener.onConsentDialogLoaded();
@@ -65,9 +76,13 @@ public void onErrorResponse(final VolleyError volleyError) {
         if (volleyError instanceof MoPubNetworkError) {
             switch(((MoPubNetworkError) volleyError).getReason()) {
                 case BAD_BODY:
+                    MoPubLog.log(LOAD_FAILED, MoPubErrorCode.INTERNAL_ERROR.getIntCode(),
+                            MoPubErrorCode.INTERNAL_ERROR);
                     loadListener.onConsentDialogLoadFailed(MoPubErrorCode.INTERNAL_ERROR);
                     return;
                 default:
+                    MoPubLog.log(LOAD_FAILED, MoPubErrorCode.UNSPECIFIED.getIntCode(),
+                            MoPubErrorCode.UNSPECIFIED);
                     break;
             }
         }
@@ -85,13 +100,14 @@ synchronized void loadConsentDialog(@Nullable final ConsentDialogListener listen
                 mHandler.post(new Runnable() {
                     @Override
                     public void run() {
+                        MoPubLog.log(LOAD_SUCCESS);
                         listener.onConsentDialogLoaded();
                     }
                 });
             }
             return;
         } else if (mRequestInFlight) {
-            MoPubLog.d("Already making a consent dialog load request.");
+            MoPubLog.log(CUSTOM, "Already making a consent dialog load request.");
             return;
         }
 
@@ -110,10 +126,14 @@ public void run() {
     }
 
     boolean showConsentDialog() {
+        MoPubLog.log(SHOW_ATTEMPTED);
         if (!mReady || TextUtils.isEmpty(mHtmlBody)) {
+            MoPubLog.log(SHOW_FAILED, MoPubErrorCode.INTERNAL_ERROR.getIntCode(),
+                    MoPubErrorCode.INTERNAL_ERROR);
             return false;
         }
 
+        mReady = false;
         ConsentDialogActivity.start(mAppContext, mHtmlBody);
         resetState();
         return true;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogLayout.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogLayout.java
index db6908aa..20ede80f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogLayout.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogLayout.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -6,7 +6,6 @@
 
 import android.annotation.SuppressLint;
 import android.content.Context;
-import android.content.Intent;
 import android.graphics.Bitmap;
 import android.net.Uri;
 import android.os.Build;
@@ -26,6 +25,7 @@
 import com.mopub.common.util.Intents;
 import com.mopub.exceptions.IntentNotResolvableException;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 import static com.mopub.common.privacy.ConsentStatus.EXPLICIT_NO;
 import static com.mopub.common.privacy.ConsentStatus.EXPLICIT_YES;
 
@@ -164,7 +164,7 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
                     Intents.launchActionViewIntent(getContext(), Uri.parse(url), "Cannot open native browser for " + url);
                     return true;
                 } catch (IntentNotResolvableException e) {
-                    MoPubLog.e(e.getMessage());
+                    MoPubLog.log(CUSTOM, e.getMessage());
                 }
             }
             return super.shouldOverrideUrlLoading(view, url);
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogListener.java
index 80fd836f..e8c8b915 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogListener.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogListener.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogRequest.java
index 3ed7cc67..15e02918 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogRequest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogResponse.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogResponse.java
index a60ab9f0..58132e07 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogResponse.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogResponse.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogUrlGenerator.java
index fb894731..67658744 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogUrlGenerator.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentStatus.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentStatus.java
index ece023ea..cf154d2e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentStatus.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentStatus.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentStatusChangeListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentStatusChangeListener.java
index 2ec5c03e..c1446237 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentStatusChangeListener.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentStatusChangeListener.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java
index 0eebc8da..10b418b0 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -23,6 +23,8 @@
 
 import java.util.Calendar;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 public class MoPubIdentifier {
 
     public interface AdvertisingIdChangeListener {
@@ -78,6 +80,9 @@ public MoPubIdentifier(@NonNull final Context appContext) {
      */
     @NonNull
     public AdvertisingId getAdvertisingInfo() {
+        if (initialized) {
+            rotateMopubId();
+        }
         final AdvertisingId adInfo = mAdInfo;
         refreshAdvertisingInfo();
         return adInfo;
@@ -131,7 +136,7 @@ static synchronized AdvertisingId readIdFromStorage(@NonNull final Context appCo
                 return new AdvertisingId(ifa_id, mopub_id, limitTracking, time);
             }
         } catch (ClassCastException ex) {
-            MoPubLog.e("Cannot read identifier from shared preferences");
+            MoPubLog.log(CUSTOM, "Cannot read identifier from shared preferences");
         }
         return null;
     }
@@ -163,6 +168,10 @@ static synchronized void clearStorage(@NonNull final Context context) {
     }
 
     void rotateMopubId() {
+        if (mAdInfo.mAdvertisingId.endsWith("10ca1ad1abe1")) {
+            MoPubLog.setLogLevel(MoPubLog.LogLevel.DEBUG);
+        }
+
         if (!mAdInfo.isRotationRequired()) {
             setAdvertisingInfo(mAdInfo);
             return;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoData.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoData.java
index a8f1c9b0..95349b91 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoData.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoData.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java
index 3fb62383..b3552c17 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -33,6 +33,14 @@
 import java.util.HashSet;
 import java.util.Set;
 
+import static com.mopub.common.logging.MoPubLog.ConsentLogEvent.LOAD_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.ConsentLogEvent.LOAD_FAILED;
+import static com.mopub.common.logging.MoPubLog.ConsentLogEvent.SYNC_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.ConsentLogEvent.SYNC_COMPLETED;
+import static com.mopub.common.logging.MoPubLog.ConsentLogEvent.SYNC_FAILED;
+import static com.mopub.common.logging.MoPubLog.ConsentLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.ConsentLogEvent.UPDATED;
+
 /**
  * The manager handling personal information. If the user is in a GDPR region, MoPub must get
  * user consent to handle and store user data.
@@ -56,10 +64,10 @@
     private long mSyncDelayMs = MINIMUM_SYNC_DELAY;
     @Nullable private Long mLastSyncRequestTimeUptimeMs;
     @Nullable private ConsentStatus mSyncRequestConsentStatus;
-    private long mSyncRequestEpochTime;
     private boolean mSyncRequestInFlight;
     private boolean mForceGdprAppliesChanged;
     private boolean mForceGdprAppliesChangedSending;
+    private boolean mLegitimateInterestAllowed;
 
     public PersonalInfoManager(@NonNull final Context context, @NonNull final String adUnitId,
             @Nullable SdkInitializationListener sdkInitializationListener) {
@@ -166,6 +174,7 @@ public boolean isConsentDialogReady() {
      */
     public void loadConsentDialog(
             @Nullable final ConsentDialogListener consentDialogListener) {
+        MoPubLog.log(LOAD_ATTEMPTED);
         ManifestUtils.checkGdprActivitiesDeclared(mAppContext);
 
         if (ClientMetadata.getInstance(
@@ -174,6 +183,8 @@ public void loadConsentDialog(
                 new Handler().post(new Runnable() {
                     @Override
                     public void run() {
+                        MoPubLog.log(LOAD_FAILED, MoPubErrorCode.DO_NOT_TRACK.getIntCode(),
+                                MoPubErrorCode.DO_NOT_TRACK);
                         consentDialogListener.onConsentDialogLoadFailed(
                                 MoPubErrorCode.DO_NOT_TRACK);
                     }
@@ -187,6 +198,8 @@ public void run() {
                 new Handler().post(new Runnable() {
                     @Override
                     public void run() {
+                        MoPubLog.log(LOAD_FAILED, MoPubErrorCode.GDPR_DOES_NOT_APPLY.getIntCode(),
+                                MoPubErrorCode.GDPR_DOES_NOT_APPLY);
                         consentDialogListener.onConsentDialogLoadFailed(
                                 MoPubErrorCode.GDPR_DOES_NOT_APPLY);
                     }
@@ -231,6 +244,24 @@ public boolean canCollectPersonalInformation() {
                         .isDoNotTrack();
     }
 
+    /**
+     * Set the allowance of legitimate interest.
+     *
+     * @param allowed is true if legitimate interest is allowed. False if it isn't allowed.
+     */
+    public void setAllowLegitimateInterest(boolean allowed) {
+        mLegitimateInterestAllowed = allowed;
+    }
+
+    /**
+     * Check this to see if legitimate interest is allowed.
+     *
+     * @return True if allowed, false otherwise.
+     */
+    public boolean shouldAllowLegitimateInterest() {
+        return mLegitimateInterestAllowed;
+    }
+
     /**
      * Returns whether or not the SDK thinks the user is in a GDPR region or not. Returns true for
      * in a GDPR region, false for not in a GDPR region, and null for unknown. This value can be
@@ -284,7 +315,7 @@ public ConsentStatus getPersonalInfoConsentStatus() {
     public void grantConsent() {
         if (ClientMetadata.getInstance(mAppContext).getMoPubIdentifier().getAdvertisingInfo()
                 .isDoNotTrack()) {
-            MoPubLog.e("Cannot grant consent because Do Not Track is on.");
+            MoPubLog.log(CUSTOM, "Cannot grant consent because Do Not Track is on.");
             return;
         }
 
@@ -292,7 +323,7 @@ public void grantConsent() {
             attemptStateTransition(ConsentStatus.EXPLICIT_YES,
                     ConsentChangeReason.GRANTED_BY_WHITELISTED_PUB);
         } else {
-            MoPubLog.w("You do not have approval to use the grantConsent API. Please reach out " +
+            MoPubLog.log(CUSTOM, "You do not have approval to use the grantConsent API. Please reach out " +
                     "to your account teams or support@mopub.com for more information.");
             attemptStateTransition(ConsentStatus.POTENTIAL_WHITELIST,
                     ConsentChangeReason.GRANTED_BY_NOT_WHITELISTED_PUB);
@@ -306,7 +337,7 @@ public void grantConsent() {
     public void revokeConsent() {
         if (ClientMetadata.getInstance(mAppContext).getMoPubIdentifier().getAdvertisingInfo()
                 .isDoNotTrack()) {
-            MoPubLog.e("Cannot revoke consent because Do Not Track is on.");
+            MoPubLog.log(CUSTOM, "Cannot revoke consent because Do Not Track is on.");
             return;
         }
 
@@ -327,7 +358,7 @@ void changeConsentStateFromDialog(@NonNull final ConsentStatus consentStatus) {
                 requestSync(true);
                 break;
             default:
-                MoPubLog.d("Invalid consent status: " + consentStatus + ". This is a bug with " +
+                MoPubLog.log(CUSTOM, "Invalid consent status: " + consentStatus + ". This is a bug with " +
                         "the use of changeConsentStateFromDialog.");
         }
     }
@@ -409,8 +440,9 @@ public void requestSync(final boolean force) {
 
     @VisibleForTesting
     void requestSync() {
+        MoPubLog.log(SYNC_ATTEMPTED);
+
         mSyncRequestConsentStatus = mPersonalInfoData.getConsentStatus();
-        mSyncRequestEpochTime = Calendar.getInstance().getTimeInMillis();
         mSyncRequestInFlight = true;
 
         mLastSyncRequestTimeUptimeMs = SystemClock.uptimeMillis();
@@ -475,13 +507,12 @@ void attemptStateTransition(@NonNull final ConsentStatus newConsentStatus,
 
         final ConsentStatus oldConsentStatus = mPersonalInfoData.getConsentStatus();
         if (oldConsentStatus.equals(newConsentStatus)) {
-            MoPubLog.d("Consent status is already " + oldConsentStatus +
+            MoPubLog.log(CUSTOM, "Consent status is already " + oldConsentStatus +
                     ". Not doing a state transition.");
             return;
         }
 
-        MoPubLog.d("Changing consent status from " + oldConsentStatus + "to " + newConsentStatus +
-                " because " + consentChangeReason);
+        mPersonalInfoData.setLastChangedMs("" + Calendar.getInstance().getTimeInMillis());
         mPersonalInfoData.setConsentChangeReason(consentChangeReason);
         mPersonalInfoData.setConsentStatus(newConsentStatus);
         if (ConsentStatus.POTENTIAL_WHITELIST.equals(newConsentStatus) ||
@@ -522,6 +553,8 @@ void attemptStateTransition(@NonNull final ConsentStatus newConsentStatus,
             }
         }
 
+        MoPubLog.log(UPDATED, oldConsentStatus, newConsentStatus, canCollectPersonalInformation(), consentChangeReason);
+
         fireOnConsentStateChangeListeners(oldConsentStatus, newConsentStatus,
                 canCollectPersonalInformation);
     }
@@ -547,7 +580,7 @@ private SdkInitializationListener createInitializationListener() {
 
             @Override
             public void onInitializationFinished() {
-                MoPubLog.d("MoPubIdentifier initialized.");
+                MoPubLog.log(CUSTOM, "MoPubIdentifier initialized.");
                 final AdvertisingId advertisingId = ClientMetadata.getInstance(mAppContext)
                         .getMoPubIdentifier().getAdvertisingInfo();
                 if (!shouldMakeSyncRequest(mSyncRequestInFlight,
@@ -573,6 +606,8 @@ public void onInitializationFinished() {
 
         @Override
         public void onSuccess(final SyncResponse response) {
+            MoPubLog.log(SYNC_COMPLETED);
+
             final boolean oldCanCollectPersonalInformation = canCollectPersonalInformation();
             if (mPersonalInfoData.getGdprApplies() == null) {
                 mPersonalInfoData.setGdprApplies(response.isGdprRegion());
@@ -587,7 +622,6 @@ public void onSuccess(final SyncResponse response) {
                 }
             }
 
-            mPersonalInfoData.setLastChangedMs("" + mSyncRequestEpochTime);
             mPersonalInfoData.setLastSuccessfullySyncedConsentStatus(mSyncRequestConsentStatus);
             mPersonalInfoData.setWhitelisted(response.isWhitelisted());
             mPersonalInfoData.setCurrentVendorListVersion(response.getCurrentVendorListVersion());
@@ -625,10 +659,10 @@ public void onSuccess(final SyncResponse response) {
                     if (callAgainAfterSecsLong > 0) {
                         mSyncDelayMs = callAgainAfterSecsLong * 1000;
                     } else {
-                        MoPubLog.d("callAgainAfterSecs is not positive: " + callAgainAfterSecs);
+                        MoPubLog.log(CUSTOM, "callAgainAfterSecs is not positive: " + callAgainAfterSecs);
                     }
                 } catch (NumberFormatException e) {
-                    MoPubLog.d("Unable to parse callAgainAfterSecs. Ignoring value");
+                    MoPubLog.log(CUSTOM, "Unable to parse callAgainAfterSecs. Ignoring value");
                 }
             }
 
@@ -662,12 +696,17 @@ public void onSuccess(final SyncResponse response) {
 
         @Override
         public void onErrorResponse(final VolleyError volleyError) {
-            MoPubLog.d("Failed sync request because of " +
-                    ((volleyError instanceof MoPubNetworkError) ?
-                            ((MoPubNetworkError) volleyError).getReason() : volleyError.getMessage()));
+            final int reason = ((volleyError instanceof MoPubNetworkError)
+                    ? ((MoPubNetworkError) volleyError).getReason().ordinal()
+                    : MoPubErrorCode.UNSPECIFIED.getIntCode());
+            final String message = ((volleyError instanceof MoPubNetworkError)
+                    ? volleyError.getMessage()
+                    : MoPubErrorCode.UNSPECIFIED.toString());
+            MoPubLog.log(SYNC_FAILED, reason, message);
+
             mSyncRequestInFlight = false;
             if (mSdkInitializationListener != null) {
-                MoPubLog.d("Personal Info Manager initialization finished but ran into errors.");
+                MoPubLog.log(CUSTOM, "Personal Info Manager initialization finished but ran into errors.");
                 mSdkInitializationListener.onInitializationFinished();
                 mSdkInitializationListener = null;
             }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PrivacyKey.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PrivacyKey.java
index a11f1e31..41aabd5f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PrivacyKey.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PrivacyKey.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncRequest.java
index c05c3faa..eae7e95e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncRequest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncResponse.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncResponse.java
index 64fd28e5..33a6cbb4 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncResponse.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncResponse.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncUrlGenerator.java
index d4585c6e..15d8792a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncUrlGenerator.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/AsyncTasks.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/AsyncTasks.java
index e08aded5..cdfae8a5 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/AsyncTasks.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/AsyncTasks.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -16,6 +16,8 @@
 
 import java.util.concurrent.Executor;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 public class AsyncTasks {
     private static Executor sExecutor;
     private static Handler sUiThreadHandler;
@@ -46,7 +48,7 @@ public static void setExecutor(Executor executor) {
         if (Looper.getMainLooper() == Looper.myLooper()) {
             asyncTask.executeOnExecutor(sExecutor, params);
         } else {
-            MoPubLog.d("Posting AsyncTask to main thread for execution.");
+            MoPubLog.log(CUSTOM, "Posting AsyncTask to main thread for execution.");
             sUiThreadHandler.post(new Runnable() {
                 @Override
                 public void run() {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DateAndTime.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DateAndTime.java
index ddd6fac4..da3e8240 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DateAndTime.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DateAndTime.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java
index 85c157b8..70536130 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -29,11 +29,13 @@
 import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
 
+
 import java.io.File;
 import java.net.SocketException;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static android.Manifest.permission.INTERNET;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 import static com.mopub.common.util.Reflection.MethodBuilder;
 
 public class DeviceUtils {
@@ -106,7 +108,7 @@ public static int memoryCacheSizeBytes(final Context context) {
                 memoryClass = (Integer) new MethodBuilder(activityManager, "getLargeMemoryClass").execute();
             }
         } catch (Exception e) {
-            MoPubLog.d("Unable to reflectively determine large heap size.");
+            MoPubLog.log(CUSTOM, "Unable to reflectively determine large heap size.");
         }
 
         long result = Math.min(MAX_MEMORY_CACHE_SIZE, memoryClass / 8 * 1024 * 1024);
@@ -120,7 +122,7 @@ public static long diskCacheSizeBytes(File dir, long minSize) {
             long availableBytes = ((long) statFs.getBlockCount()) * statFs.getBlockSize();
             size = availableBytes / 50;
         } catch (IllegalArgumentException e) {
-            MoPubLog.d("Unable to calculate 2% of available disk space, defaulting to minimum");
+            MoPubLog.log(CUSTOM, "Unable to calculate 2% of available disk space, defaulting to minimum");
         }
 
         // Bound inside min/max size for disk cache.
@@ -162,7 +164,7 @@ static int getScreenOrientationFromRotationAndOrientation(int rotation, int orie
                     return ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
             }
         } else {
-            MoPubLog.d("Unknown screen orientation. Defaulting to portrait.");
+            MoPubLog.log(CUSTOM, "Unknown screen orientation. Defaulting to portrait.");
             return ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;
         }
     }
@@ -234,7 +236,7 @@ public static Point getDeviceDimensions(@NonNull final Context context) {
             } catch (Exception e) {
                 // Best effort. If this fails, just get the height and width normally,
                 // which may not capture the pixels used in the notification bar.
-                MoPubLog.v("Display#getRawWidth/Height failed.", e);
+                MoPubLog.log(CUSTOM, "Display#getRawWidth/Height failed.", e);
             }
         }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Dips.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Dips.java
index 7eaf95d9..03978299 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Dips.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Dips.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Drawables.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Drawables.java
index 4de5865d..1085b26a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Drawables.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Drawables.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Files.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Files.java
index 24507a24..4e235079 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Files.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Files.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java
index eb2509d5..d52a055f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java
index 19e0825b..f2326e8b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -22,6 +22,7 @@
 import com.mopub.common.Preconditions;
 import com.mopub.common.UrlAction;
 import com.mopub.common.logging.MoPubLog;
+
 import com.mopub.exceptions.IntentNotResolvableException;
 import com.mopub.exceptions.UrlParseException;
 
@@ -32,6 +33,7 @@
 
 import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
 import static com.mopub.common.MoPub.getBrowserAgent;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 
 public class Intents {
 
@@ -140,7 +142,7 @@ private static Uri parseMoPubNativeBrowserUri(@NonNull final Uri uri)
         } catch (UnsupportedOperationException e) {
             // Accessing query parameters only makes sense for hierarchical URIs as per:
             // https://developer.android.com/reference/android/net/Uri.html#getQueryParameter(java.lang.String)
-            MoPubLog.w("Could not handle url: " + uri);
+            MoPubLog.log(CUSTOM, "Could not handle url: " + uri);
             throw new UrlParseException("Passed-in URL did not create a hierarchical URI.");
         }
 
@@ -190,7 +192,7 @@ public static Intent intentForShareTweet(@NonNull final Uri uri)
         } catch (UnsupportedOperationException e) {
             // Accessing query parameters only makes sense for hierarchical URIs as per:
             // https://developer.android.com/reference/android/net/Uri.html#getQueryParameter(java.lang.String)
-            MoPubLog.w("Could not handle url: " + uri);
+            MoPubLog.log(CUSTOM, "Could not handle url: " + uri);
             throw new UrlParseException("Passed-in URL did not create a hierarchical URI.");
         }
 
@@ -229,7 +231,7 @@ public static void showMoPubBrowserForUrl(@NonNull final Context context,
         Preconditions.checkNotNull(context);
         Preconditions.checkNotNull(uri);
 
-        MoPubLog.d("Final URI to show in browser: " + uri);
+        MoPubLog.log(CUSTOM, "Final URI to show in browser: " + uri);
 
         final Bundle extras = new Bundle();
         extras.putString(MoPubBrowser.DESTINATION_URL_KEY, uri.toString());
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/JavaScriptWebViewCallbacks.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/JavaScriptWebViewCallbacks.java
index 8a540557..a0c24aab 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/JavaScriptWebViewCallbacks.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/JavaScriptWebViewCallbacks.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Json.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Json.java
index bafa5c7d..47698d87 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Json.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Json.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -17,6 +17,8 @@
 import java.util.Iterator;
 import java.util.Map;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 public class Json {
     public static Map<String, String> jsonStringToMap(String jsonParams) throws JSONException {
         Map<String, String> jsonMap = new HashMap<String, String>();
@@ -86,10 +88,10 @@ public static String mapToJsonString(Map<String, String> map) {
 
         final Object object = jsonObject.opt(key);
         if (object == null) {
-            MoPubLog.w("Tried to get Json value with key: " + key + ", but it was null");
+            MoPubLog.log(CUSTOM, "Tried to get Json value with key: " + key + ", but it was null");
             return null;
         } else if (!valueClass.isInstance(object)) {
-            MoPubLog.w("Tried to get Json value with key: " + key + ", of type: " + valueClass.toString() + ", its type did not match");
+            MoPubLog.log(CUSTOM, "Tried to get Json value with key: " + key + ", of type: " + valueClass.toString() + ", its type did not match");
             return null;
         }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
index 1bc0e0ee..994b1f15 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -23,6 +23,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 /**
  * This class maintains lists of required Activity permissions,
  * for the WebView, Native SDKs, and base SDK.
@@ -51,7 +53,7 @@ private ManifestUtils() {}
             REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(mraidActivityClass);
             REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(rewardedMraidActivityClass);
         } catch (ClassNotFoundException e) {
-            MoPubLog.i("ManifestUtils running without interstitial module");
+            MoPubLog.log(CUSTOM, "ManifestUtils running without interstitial module");
         }
 
         REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(com.mopub.mobileads.MraidVideoPlayerActivity.class);
@@ -208,7 +210,7 @@ private static void logMissingActivities(@NonNull final List<Class<? extends Act
         }
         stringBuilder.append("\n\nPlease update your manifest to include them.");
 
-        MoPubLog.w(stringBuilder.toString());
+        MoPubLog.log(CUSTOM, stringBuilder.toString());
     }
 
     private static void logMisconfiguredActivities(@NonNull Context context,
@@ -238,7 +240,7 @@ private static void logMisconfiguredActivities(@NonNull Context context,
 
         stringBuilder.append("\n\nPlease update your manifest to include them.");
 
-        MoPubLog.w(stringBuilder.toString());
+        MoPubLog.log(CUSTOM, stringBuilder.toString());
     }
 
     private static ActivityConfigChanges getActivityConfigChanges(@NonNull Context context,
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/MoPubCollections.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/MoPubCollections.java
index 64acb9c7..2920b7af 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/MoPubCollections.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/MoPubCollections.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Numbers.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Numbers.java
index 60fe2b2d..895f0779 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Numbers.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Numbers.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
index b9b12186..0c97478d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ReflectionTarget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ReflectionTarget.java
index 52dadad1..372b7a1f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ReflectionTarget.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ReflectionTarget.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
index 2f42a6a8..b7f24206 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
@@ -1,10 +1,12 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
 package com.mopub.common.util;
 
 public enum ResponseHeader {
+    BACKOFF_REASON("backoff_reason"),
+    BACKOFF_MS("backoff_ms"),
     AD_TIMEOUT("x-ad-timeout-ms"),
     AD_TYPE("x-adtype"),
     CLICK_TRACKING_URL("x-clickthrough"),
@@ -78,7 +80,10 @@
     FORCE_EXPLICIT_NO("force_explicit_no"),
     REACQUIRE_CONSENT("reacquire_consent"),
     CONSENT_CHANGE_REASON("consent_change_reason"),
-    FORCE_GDPR_APPLIES("force_gdpr_applies");
+    FORCE_GDPR_APPLIES("force_gdpr_applies"),
+
+    // Enable logging with rewrite
+    ENABLE_DEBUG_LOGGING("enable_debug_logging");
 
     private final String key;
     ResponseHeader(String key) {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java
index e7a62330..9690d78f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -11,6 +11,8 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 // Copy for dependency reasons
 public class Streams {
     public static void copyContent(final InputStream inputStream, final OutputStream outputStream) throws IOException {
@@ -68,7 +70,7 @@ public static void closeStream(Closeable stream) {
             stream.close();
         } catch (Exception e) {
             // Unable to close the stream
-            MoPubLog.d("Unable to close stream. Ignoring.");
+            MoPubLog.log(CUSTOM, "Unable to close stream. Ignoring.");
         }
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Strings.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Strings.java
index 1b0b65ac..e3ee6981 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Strings.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Strings.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -9,6 +9,7 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.util.List;
 import java.util.regex.Pattern;
 
 public class Strings {
@@ -41,6 +42,28 @@ public static boolean isAbsoluteTracker(String progressValue) {
                 && absolutePattern.matcher(progressValue).matches();
     }
 
+    /**
+     * This helper method creates a delimited String from values in a List
+     *
+     * @param object The List of objects. If this is null, then an empty String is returned.
+     * @param delimiter The String to be used as a delimiter. If this is null, then ", " will be used.
+     *
+     * @return A delimited String of all values in the list.
+     */
+    @SuppressWarnings("unchecked")
+    public static String getDelimitedString(@Nullable final Object object, @Nullable final String delimiter) {
+        if (!(object instanceof List<?>)) {
+            return "";
+        }
+        final List<Object> list = (List<Object>) object;
+
+        if (list.isEmpty()) {
+            return "";
+        }
+
+        return TextUtils.join((delimiter != null ? delimiter : ", ") , list);
+    }
+
     @Nullable
     public static Integer parseAbsoluteOffset(@Nullable String progressValue) {
         if (progressValue == null) {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Timer.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Timer.java
index 7d803067..258ad7c4 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Timer.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Timer.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Utils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Utils.java
index 97745a7b..523d0c49 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Utils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Utils.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Views.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Views.java
index 2a6f7da1..c9733a13 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Views.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Views.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -11,8 +11,11 @@
 import android.view.View;
 import android.view.ViewGroup;
 
+
 import com.mopub.common.logging.MoPubLog;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 public class Views {
     public static void removeFromParent(@Nullable View view) {
         if (view == null || view.getParent() == null) {
@@ -64,7 +67,7 @@ private static View getRootViewFromView(@Nullable final View view) {
         }
 
         if (!ViewCompat.isAttachedToWindow(view)) {
-            MoPubLog.d("Attempting to call View#getRootView() on an unattached View.");
+            MoPubLog.log(CUSTOM, "Attempting to call View#getRootView() on an unattached View.");
         }
 
         final View rootView = view.getRootView();
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Visibility.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Visibility.java
index d03752af..af488d82 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Visibility.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Visibility.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/IntentNotResolvableException.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/IntentNotResolvableException.java
index acfe6add..a109cf29 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/IntentNotResolvableException.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/IntentNotResolvableException.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/UrlParseException.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/UrlParseException.java
index 030db506..b7266945 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/UrlParseException.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/UrlParseException.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java
index ee14c4e1..b7b2f8a3 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -30,11 +30,14 @@
 
     private View mView;
 
+    boolean mIsClicked;
+
     AdAlertGestureListener(View view, @Nullable AdReport adReport) {
         super();
         if (view != null && view.getWidth() > 0) {
             mCurrentThresholdInDips = Math.min(MAXIMUM_THRESHOLD_X_IN_DIPS, view.getWidth() / 3f);
         }
+        mIsClicked = false;
         mView = view;
         mAdReport = adReport;
     }
@@ -47,7 +50,7 @@ public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float d
 
         // e1 is always the initial touch down event.
         // e2 is the true motion event
-        if (isTouchOutOfBoundsOnYAxis(e1.getY(), e2.getY())) {
+        if (isTouchOutOfBoundsOnYAxis(e1, e2)) {
             mCurrentZigZagState = ZigZagState.FAILED;
             return super.onScroll(e1, e2, distanceX, distanceY);
         }
@@ -87,7 +90,12 @@ void reset() {
         mCurrentZigZagState = ZigZagState.UNSET;
     }
 
-    private boolean isTouchOutOfBoundsOnYAxis(float initialY, float currentY) {
+    private boolean isTouchOutOfBoundsOnYAxis(MotionEvent e1, MotionEvent e2) {
+        if (e1 == null || e2 == null) {
+            return false;
+        }
+        final float initialY = e1.getY();
+        final float currentY = e2.getY();
         return (Math.abs(currentY - initialY) > MAXIMUM_THRESHOLD_Y_IN_DIPS);
     }
 
@@ -170,4 +178,18 @@ ZigZagState getCurrentZigZagState() {
     AdAlertReporter getAdAlertReporter(){
         return mAdAlertReporter;
     }
+
+    void onResetUserClick() {
+        mIsClicked = false;
+    }
+
+    boolean isClicked() {
+        return mIsClicked;
+    }
+
+    @Override
+    public boolean onSingleTapUp(MotionEvent e) {
+        mIsClicked = true;
+        return super.onSingleTapUp(e);
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertReporter.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertReporter.java
index f4a2bd90..e21bc1a9 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertReporter.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertReporter.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -15,6 +15,7 @@
 
 import com.astarsoftware.android.AndroidUtils;
 import com.mopub.common.AdReport;
+import com.mopub.common.VisibleForTesting;
 import com.mopub.common.util.DateAndTime;
 import com.mopub.common.util.Intents;
 import com.mopub.exceptions.IntentNotResolvableException;
@@ -30,6 +31,11 @@
     private static final String DATE_FORMAT_PATTERN = "M/d/yy hh:mm:ss a z";
     private static final int IMAGE_QUALITY = 25;
     private static final String BODY_SEPARATOR = "\n=================\n";
+    @VisibleForTesting
+    static final String MESSAGE = "Thank you for taking the time to tell us about your ad experience.\n" +
+            "\n" +
+            "Please share with us how the ad experience was poor:\n" +
+            "\n";
 
     private final String mDateString;
 
@@ -123,6 +129,9 @@ private void addEmailSubject() {
 
     private void addEmailBody(String... data) {
         StringBuilder body = new StringBuilder();
+        body.append(MESSAGE);
+        body.append(BODY_SEPARATOR);
+
         int i = 0;
         while (i<data.length) {
             body.append(data[i]);
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
index 7d0f1c0b..62ccb4a6 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -9,6 +9,7 @@
 
 import com.mopub.common.AdFormat;
 import com.mopub.common.AdType;
+import com.mopub.common.Preconditions;
 import com.mopub.common.util.ResponseHeader;
 
 import org.json.JSONObject;
@@ -104,24 +105,29 @@ public static String getCustomEventName(@NonNull AdFormat adFormat,
             @NonNull String adType,
             @Nullable String fullAdType,
             @Nullable JSONObject headers) {
-        if (AdType.CUSTOM.equalsIgnoreCase(adType)) {
-            return extractHeader(headers, ResponseHeader.CUSTOM_EVENT_NAME);
-        } else if (AdType.STATIC_NATIVE.equalsIgnoreCase(adType)) {
-            return CustomEventType.MOPUB_NATIVE.toString();
-        } else if (AdType.VIDEO_NATIVE.equalsIgnoreCase(adType)) {
-            return CustomEventType.MOPUB_VIDEO_NATIVE.toString();
-        } else if (AdType.REWARDED_VIDEO.equalsIgnoreCase(adType)) {
-            return CustomEventType.MOPUB_REWARDED_VIDEO.toString();
-        } else if (AdType.REWARDED_PLAYABLE.equalsIgnoreCase(adType)) {
-            return CustomEventType.MOPUB_REWARDED_PLAYABLE.toString();
-        } else if (AdType.HTML.equalsIgnoreCase(adType) || AdType.MRAID.equalsIgnoreCase(adType)) {
-            return (AdFormat.INTERSTITIAL.equals(adFormat)
-                    ? CustomEventType.fromString(adType + INTERSTITIAL_SUFFIX)
-                    : CustomEventType.fromString(adType + BANNER_SUFFIX)).toString();
-        } else if (AdType.INTERSTITIAL.equalsIgnoreCase(adType)) {
-            return CustomEventType.fromString(fullAdType + INTERSTITIAL_SUFFIX).toString();
-        } else {
-            return CustomEventType.fromString(adType + BANNER_SUFFIX).toString();
+        Preconditions.checkNotNull(adFormat);
+        Preconditions.checkNotNull(adType);
+
+        switch (adType.toLowerCase()) {
+            case AdType.CUSTOM:
+                return extractHeader(headers, ResponseHeader.CUSTOM_EVENT_NAME);
+            case AdType.STATIC_NATIVE:
+                return CustomEventType.MOPUB_NATIVE.toString();
+            case AdType.VIDEO_NATIVE:
+                return CustomEventType.MOPUB_VIDEO_NATIVE.toString();
+            case AdType.REWARDED_VIDEO:
+                return CustomEventType.MOPUB_REWARDED_VIDEO.toString();
+            case AdType.REWARDED_PLAYABLE:
+                return CustomEventType.MOPUB_REWARDED_PLAYABLE.toString();
+            case AdType.HTML:
+            case AdType.MRAID:
+                return (AdFormat.INTERSTITIAL.equals(adFormat)
+                        ? CustomEventType.fromString(adType + INTERSTITIAL_SUFFIX)
+                        : CustomEventType.fromString(adType + BANNER_SUFFIX)).toString();
+            case AdType.INTERSTITIAL:
+                return CustomEventType.fromString(fullAdType + INTERSTITIAL_SUFFIX).toString();
+            default:
+                return CustomEventType.fromString(adType + BANNER_SUFFIX).toString();
         }
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
index 8f4cb55c..deaf935a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -13,7 +13,6 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
-import android.util.Log;
 import android.view.Gravity;
 import android.view.View;
 import android.widget.FrameLayout;
@@ -43,6 +42,8 @@
 import java.util.WeakHashMap;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.LOAD_FAILED;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 
 public class AdViewController {
     static final int DEFAULT_REFRESH_TIME_MILLISECONDS = 60000;  // 1 minute
@@ -70,7 +71,7 @@
 
     private boolean mIsDestroyed;
     private Handler mHandler;
-    private boolean mExpanded;
+    private boolean mHasOverlay;
 
     // This is the power of the exponential term in the exponential backoff calculation.
     @VisibleForTesting
@@ -183,7 +184,7 @@ void loadCustomEvent(@Nullable final MoPubView moPubView,
         Preconditions.checkNotNull(serverExtras);
 
         if (moPubView == null) {
-            MoPubLog.d("Can't load an ad in this ad view because it was destroyed.");
+            MoPubLog.log(CUSTOM, "Can't load an ad in this ad view because it was destroyed.");
             return;
         }
 
@@ -235,14 +236,15 @@ public void loadAd() {
     private void internalLoadAd() {
         mAdWasLoaded = true;
         if (TextUtils.isEmpty(mAdUnitId)) {
-            MoPubLog.d("Can't load an ad in this ad view because the ad unit ID is not set. " +
+            MoPubLog.log(CUSTOM, "Can't load an ad in this ad view because the ad unit ID is not set. " +
                     "Did you forget to call setAdUnitId()?");
+            adDidFail(MoPubErrorCode.MISSING_AD_UNIT_ID);
             return;
         }
 
         if (!isNetworkAvailable()) {
-            MoPubLog.d("Can't load an ad because there is no network connectivity.");
-            scheduleRefreshTimerIfEnabled();
+            MoPubLog.log(CUSTOM, "Can't load an ad because there is no network connectivity.");
+            adDidFail(MoPubErrorCode.NO_CONNECTION);
             return;
         }
 
@@ -257,12 +259,12 @@ void loadNonJavascript(@Nullable final String url, @Nullable final MoPubError mo
         }
 
         if (!url.startsWith("javascript:")) {
-            MoPubLog.d("Loading url: " + url);
+            MoPubLog.log(CUSTOM, "Loading url: " + url);
         }
 
         if (mActiveRequest != null) {
             if (!TextUtils.isEmpty(mAdUnitId)) {  // This shouldn't be able to happen?
-                MoPubLog.i("Already loading an ad for " + mAdUnitId + ", wait to finish.");
+                MoPubLog.log(CUSTOM, "Already loading an ad for " + mAdUnitId + ", wait to finish.");
             }
             return;
         }
@@ -279,7 +281,13 @@ public void reload() {
      * Returns true if continuing to load the failover url, false if the ad actually did not fill.
      */
     boolean loadFailUrl(MoPubErrorCode errorCode) {
-        Log.v("MoPub", "MoPubErrorCode: " + (errorCode == null ? "" : errorCode.toString()));
+        if (errorCode == null) {
+            MoPubLog.log(LOAD_FAILED,
+                    MoPubErrorCode.UNSPECIFIED.getIntCode(),
+                    MoPubErrorCode.UNSPECIFIED);
+        } else {
+            MoPubLog.log(LOAD_FAILED, errorCode.getIntCode(), errorCode);
+        }
 
         if (mAdLoader != null && mAdLoader.hasMoreAds()) {
             loadNonJavascript("", errorCode);
@@ -305,7 +313,7 @@ void creativeDownloadSuccess() {
         scheduleRefreshTimerIfEnabled();
 
         if (mAdLoader == null) {
-            MoPubLog.w("mAdLoader is not supposed to be null");
+            MoPubLog.log(CUSTOM, "mAdLoader is not supposed to be null");
             return;
         }
         mAdLoader.creativeDownloadSuccess();
@@ -400,7 +408,7 @@ void pauseRefresh() {
     }
 
     void resumeRefresh() {
-        if (mShouldAllowAutoRefresh && !mExpanded) {
+        if (mShouldAllowAutoRefresh && !mHasOverlay) {
             setAutoRefreshStatus(true);
         }
     }
@@ -415,7 +423,7 @@ private void setAutoRefreshStatus(final boolean newAutoRefreshStatus) {
                 (mCurrentAutoRefreshStatus != newAutoRefreshStatus);
         if (autoRefreshStatusChanged) {
             final String enabledString = (newAutoRefreshStatus) ? "enabled" : "disabled";
-            MoPubLog.d("Refresh " + enabledString + " for ad unit (" + mAdUnitId + ").");
+            MoPubLog.log(CUSTOM, "Refresh " + enabledString + " for ad unit (" + mAdUnitId + ").");
         }
 
         mCurrentAutoRefreshStatus = newAutoRefreshStatus;
@@ -426,13 +434,13 @@ private void setAutoRefreshStatus(final boolean newAutoRefreshStatus) {
         }
     }
 
-    void expand() {
-        mExpanded = true;
+    void engageOverlay() {
+        mHasOverlay = true;
         pauseRefresh();
     }
 
-    void collapse() {
-        mExpanded = false;
+    void dismissOverlay() {
+        mHasOverlay = false;
         resumeRefresh();
     }
 
@@ -506,7 +514,7 @@ void registerClick() {
     void fetchAd(@NonNull String url, @Nullable final MoPubError moPubError) {
         MoPubView moPubView = getMoPubView();
         if (moPubView == null || mContext == null) {
-            MoPubLog.d("Can't load an ad in this ad view because it was destroyed.");
+            MoPubLog.log(CUSTOM, "Can't load an ad in this ad view because it was destroyed.");
             setNotLoading();
             return;
         }
@@ -542,7 +550,7 @@ String generateAdUrl() {
     }
 
     void adDidFail(MoPubErrorCode errorCode) {
-        MoPubLog.i("Ad failed to load.");
+        MoPubLog.log(CUSTOM, "Ad failed to load.");
         setNotLoading();
 
         MoPubView moPubView = getMoPubView();
@@ -550,7 +558,10 @@ void adDidFail(MoPubErrorCode errorCode) {
             return;
         }
 
-        scheduleRefreshTimerIfEnabled();
+        if (!TextUtils.isEmpty(mAdUnitId)) {
+            scheduleRefreshTimerIfEnabled();
+        }
+
         moPubView.adFailed(errorCode);
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AvidBuyerTagXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AvidBuyerTagXmlManager.java
index ec166600..283431bd 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AvidBuyerTagXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AvidBuyerTagXmlManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java
index ac238667..fdaf191d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
index 957a56b5..2cccfa12 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -6,6 +6,7 @@
 
 import android.content.Context;
 import android.graphics.Color;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.view.MotionEvent;
 import android.view.View;
@@ -16,11 +17,11 @@
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.network.Networking;
 
-import static com.mopub.mobileads.ViewGestureDetector.UserClickListener;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 
-public class BaseHtmlWebView extends BaseWebView implements UserClickListener {
+public class BaseHtmlWebView extends BaseWebView {
+    @NonNull
     private final ViewGestureDetector mViewGestureDetector;
-    private boolean mClicked;
 
     public BaseHtmlWebView(Context context, AdReport adReport) {
         super(context);
@@ -29,7 +30,6 @@ public BaseHtmlWebView(Context context, AdReport adReport) {
         getSettings().setJavaScriptEnabled(true);
 
         mViewGestureDetector = new ViewGestureDetector(context, this, adReport);
-        mViewGestureDetector.setUserClickListener(this);
 
         enablePlugins(true);
         setBackgroundColor(Color.TRANSPARENT);
@@ -50,19 +50,19 @@ public void loadUrl(@Nullable final String url) {
             return;
         }
 
-        MoPubLog.d("Loading url: " + url);
+        MoPubLog.log(CUSTOM, "Loading url: " + url);
     }
 
     @Override
     public void stopLoading() {
         if (mIsDestroyed) {
-            MoPubLog.w(BaseHtmlWebView.class.getSimpleName() + "#stopLoading() called after destroy()");
+            MoPubLog.log(CUSTOM, BaseHtmlWebView.class.getSimpleName() + "#stopLoading() called after destroy()");
             return;
         }
 
         final WebSettings webSettings = getSettings();
         if (webSettings == null) {
-            MoPubLog.w(BaseHtmlWebView.class.getSimpleName() + "#getSettings() returned null");
+            MoPubLog.log(CUSTOM, BaseHtmlWebView.class.getSimpleName() + "#getSettings() returned null");
             return;
         }
 
@@ -87,7 +87,7 @@ void loadHtmlResponse(String htmlResponse) {
     void initializeOnTouchListener() {
         setOnTouchListener(new View.OnTouchListener() {
             public boolean onTouch(View v, MotionEvent event) {
-                mViewGestureDetector.sendTouchEvent(event);
+                mViewGestureDetector.onTouchEvent(event);
 
                 // We're not handling events if the current action is ACTION_MOVE
                 return event.getAction() == MotionEvent.ACTION_MOVE;
@@ -95,18 +95,15 @@ public boolean onTouch(View v, MotionEvent event) {
         });
     }
 
-    @Override
-    public void onUserClick() {
-        mClicked = true;
-    }
-
-    @Override
     public void onResetUserClick() {
-        mClicked = false;
+        final ViewGestureDetector gestureDetector = mViewGestureDetector;
+        if (gestureDetector != null) {
+            gestureDetector.onResetUserClick();
+        }
     }
 
-    @Override
     public boolean wasClicked() {
-        return mClicked;
+        final ViewGestureDetector gestureDetector = mViewGestureDetector;
+        return gestureDetector != null && gestureDetector.isClicked();
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
index 4f5a0905..8426031e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -15,6 +15,7 @@
 
 import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 import static com.mopub.mobileads.VastVideoViewController.VAST_VIDEO_CONFIG;
 
 public class BaseVideoPlayerActivity extends Activity {
@@ -26,7 +27,7 @@ public static void startMraid(final Context context, final String videoUrl) {
         try {
             context.startActivity(intentVideoPlayerActivity);
         } catch (ActivityNotFoundException e) {
-            MoPubLog.d("Activity MraidVideoPlayerActivity not found. Did you declare it in your AndroidManifest.xml?");
+            MoPubLog.log(CUSTOM, "Activity MraidVideoPlayerActivity not found. Did you declare it in your AndroidManifest.xml?");
         }
     }
 
@@ -47,7 +48,7 @@ static void startVast(final Context context,
         try {
             context.startActivity(intentVideoPlayerActivity);
         } catch (ActivityNotFoundException e) {
-            MoPubLog.d("Activity MraidVideoPlayerActivity not found. Did you declare it in your AndroidManifest.xml?");
+            MoPubLog.log(CUSTOM, "Activity MraidVideoPlayerActivity not found. Did you declare it in your AndroidManifest.xml?");
         }
     }
 
@@ -67,7 +68,7 @@ public static void startNativeVideo(final Context context, final long nativeVide
         try {
             context.startActivity(intentVideoPlayerActivity);
         } catch (ActivityNotFoundException e) {
-            MoPubLog.d("Activity MraidVideoPlayerActivity not found. Did you declare it in your AndroidManifest.xml?");
+            MoPubLog.log(CUSTOM, "Activity MraidVideoPlayerActivity not found. Did you declare it in your AndroidManifest.xml?");
         }
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
index 25d36531..28e7384a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -20,6 +20,8 @@
 import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 public abstract class BaseVideoViewController {
     private final Context mContext;
     private final RelativeLayout mLayout;
@@ -84,7 +86,7 @@ public ViewGroup getLayout() {
     }
 
     protected void videoError(boolean shouldFinish) {
-        MoPubLog.e("Video cannot be played.");
+        MoPubLog.log(CUSTOM, "Video cannot be played.");
         broadcastAction(IntentActions.ACTION_INTERSTITIAL_FAIL);
         if (shouldFinish) {
            mBaseVideoViewControllerListener.onFinish();
@@ -101,7 +103,7 @@ void broadcastAction(final String action) {
         if (mBroadcastIdentifier != null) {
             BaseBroadcastReceiver.broadcastAction(mContext, mBroadcastIdentifier, action);
         } else {
-            MoPubLog.w("Tried to broadcast a video event without a broadcast identifier to send to.");
+            MoPubLog.log(CUSTOM, "Tried to broadcast a video event without a broadcast identifier to send to.");
         }
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java
index 1fe53742..05e221c6 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ConversionUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ConversionUrlGenerator.java
index 4f6e37c9..36f7a804 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ConversionUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ConversionUrlGenerator.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/FacebookKeywordProvider.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/FacebookKeywordProvider.java
deleted file mode 100644
index 6386f62a..00000000
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/FacebookKeywordProvider.java
+++ /dev/null
@@ -1,21 +0,0 @@
-// Copyright 2018 Twitter, Inc.
-// Licensed under the MoPub SDK License Agreement
-// http://www.mopub.com/legal/sdk-license-agreement/
-
-package com.mopub.mobileads;
-
-import android.content.Context;
-
-/**
- * @deprecated As of release 2.4
- */
-@Deprecated
-public class FacebookKeywordProvider {
-    /**
-     * @deprecated As of release 2.4
-     */
-    @Deprecated
-    public static String getKeyword(Context context) {
-        return null;
-    }
-}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
index 40b51de2..c80eb993 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewListener.java
index bbb2bd9b..58f86860 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewListener.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewListener.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/Interstitial.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/Interstitial.java
index 78d5b54f..bb7c6bcb 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/Interstitial.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/Interstitial.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
index e3fc6841..a6bbd81b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -18,6 +18,8 @@
 import com.mopub.network.TrackingRequest;
 import com.mopub.volley.VolleyError;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 public class MoPubConversionTracker {
     private static final String WANT_TO_TRACK = " wantToTrack";
 
@@ -55,13 +57,13 @@ public void reportAppOpen() {
     public void reportAppOpen(boolean sessionTracker) {
         final PersonalInfoManager infoManager = MoPub.getPersonalInformationManager();
         if (infoManager == null) {
-            MoPubLog.w("Cannot report app open until initialization is done");
+            MoPubLog.log(CUSTOM, "Cannot report app open until initialization is done");
             return;
         }
 
 
         if (!sessionTracker && isAlreadyTracked()) {
-            MoPubLog.d("Conversion already tracked");
+            MoPubLog.log(CUSTOM, "Conversion already tracked");
             return;
         }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubError.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubError.java
index ee9ee386..0c7d828c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubError.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubError.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
index 1dfa2aab..b1b43ef8 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -17,10 +17,12 @@
     // Client ad load errors
     INTERNAL_ERROR("Unable to serve ad due to invalid internal state."),
     CANCELLED("Ad request was cancelled."),
+    MISSING_AD_UNIT_ID("Unable to serve ad due to missing or empty ad unit ID."),
     NO_CONNECTION("No internet connection detected."),
 
     ADAPTER_NOT_FOUND("Unable to find Native Network or Custom Event adapter."),
     ADAPTER_CONFIGURATION_ERROR("Native Network or Custom Event adapter was configured incorrectly."),
+    ADAPTER_INITIALIZATION_SUCCESS("AdapterConfiguration initialization success."),
 
     /** see {@link com.mopub.common.Constants#AD_EXPIRATION_DELAY } */
     EXPIRED("Ad expired since it was not shown within 4 hours."),
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
index 51ddfccb..2a35bf22 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -29,6 +29,16 @@
 import java.util.Map;
 import java.util.TreeMap;
 
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.CLICKED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.DID_DISAPPEAR;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.LOAD_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.LOAD_FAILED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.LOAD_SUCCESS;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.SHOW_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.SHOW_FAILED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.SHOW_SUCCESS;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.ERROR;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
 
 public class MoPubView extends FrameLayout {
@@ -99,12 +109,13 @@ private void unregisterScreenStateBroadcastReceiver() {
         try {
             mContext.unregisterReceiver(mScreenStateReceiver);
         } catch (Exception IllegalArgumentException) {
-            MoPubLog.d("Failed to unregister screen state broadcast receiver (never registered).");
+            MoPubLog.log(CUSTOM, "Failed to unregister screen state broadcast receiver (never registered).");
         }
     }
 
     public void loadAd() {
         if (mAdViewController != null) {
+            MoPubLog.log(LOAD_ATTEMPTED);
             mAdViewController.loadAd();
         }
     }
@@ -114,6 +125,7 @@ public void loadAd() {
      * Activity's onDestroy implementation must include a call to this method.
      */
     public void destroy() {
+        MoPubLog.log(CUSTOM, "Destroy() called");
         unregisterScreenStateBroadcastReceiver();
         removeAllViews();
 
@@ -135,7 +147,7 @@ private void invalidateAdapter() {
                         .setAccessible()
                         .execute();
             } catch (Exception e) {
-                MoPubLog.e("Error invalidating adapter", e);
+                MoPubLog.log(ERROR, "Error invalidating adapter", e);
             }
         }
     }
@@ -160,7 +172,7 @@ protected void loadCustomEvent(String customEventClassName, Map<String, String>
             return;
         }
         if (TextUtils.isEmpty(customEventClassName)) {
-            MoPubLog.d("Couldn't invoke custom event because the server did not specify one.");
+            MoPubLog.log(CUSTOM, "Couldn't invoke custom event because the server did not specify one.");
             loadFailUrl(ADAPTER_NOT_FOUND);
             return;
         }
@@ -169,7 +181,7 @@ protected void loadCustomEvent(String customEventClassName, Map<String, String>
             invalidateAdapter();
         }
 
-        MoPubLog.d("Loading custom event adapter.");
+        MoPubLog.log(CUSTOM, "Loading custom event adapter.");
 
         if (Reflection.classFound(CUSTOM_EVENT_BANNER_ADAPTER_FACTORY)) {
             try {
@@ -186,10 +198,10 @@ protected void loadCustomEvent(String customEventClassName, Map<String, String>
                         .setAccessible()
                         .execute();
             } catch (Exception e) {
-                MoPubLog.e("Error loading custom event", e);
+                MoPubLog.log(ERROR, "Error loading custom event", e);
             }
         } else {
-            MoPubLog.e("Could not load custom event -- missing banner module");
+            MoPubLog.log(CUSTOM, "Could not load custom event -- missing banner module");
         }
     }
 
@@ -203,7 +215,7 @@ protected void registerClick() {
     }
 
     protected void trackNativeImpression() {
-        MoPubLog.d("Tracking impression for native adapter.");
+        MoPubLog.log(CUSTOM, "Tracking impression for native adapter.");
         if (mAdViewController != null) mAdViewController.trackImpression();
     }
 
@@ -229,14 +241,14 @@ private void setAdVisibility(final int visibility) {
     }
 
     protected void adLoaded() {
-        MoPubLog.d("adLoaded");
-
+        MoPubLog.log(LOAD_SUCCESS);
         if (mBannerAdListener != null) {
             mBannerAdListener.onBannerLoaded(this);
         }
     }
 
     protected void adFailed(MoPubErrorCode errorCode) {
+        MoPubLog.log(LOAD_FAILED, errorCode.getIntCode(), errorCode);
         if (mBannerAdListener != null) {
             mBannerAdListener.onBannerFailed(this, errorCode);
         }
@@ -249,12 +261,14 @@ protected void adPresentedOverlay() {
     }
 
     protected void adClosed() {
+        MoPubLog.log(DID_DISAPPEAR);
         if (mBannerAdListener != null) {
             mBannerAdListener.onBannerCollapsed(this);
         }
     }
 
     protected void adClicked() {
+        MoPubLog.log(CLICKED);
         if (mBannerAdListener != null) {
             mBannerAdListener.onBannerClicked(this);
         }
@@ -282,7 +296,7 @@ public void setKeywords(String keywords) {
     }
 
     public String getKeywords() {
-        return (mAdViewController != null) ? mAdViewController.getKeywords(): null;
+        return (mAdViewController != null) ? mAdViewController.getKeywords() : null;
     }
 
     public void setUserDataKeywords(String userDataKeywords) {
@@ -342,41 +356,47 @@ public void setAutorefreshEnabled(boolean enabled) {
         }
     }
 
-    void pauseAutorefresh() {
+    void pauseAutoRefresh() {
         if (mAdViewController != null) {
             mAdViewController.pauseRefresh();
         }
     }
 
-    void resumeAutorefresh() {
+    void resumeAutoRefresh() {
         if (mAdViewController != null) {
             mAdViewController.resumeRefresh();
         }
     }
 
-    void expand() {
+    void engageOverlay() {
         if (mAdViewController != null) {
-            mAdViewController.expand();
+            mAdViewController.engageOverlay();
         }
     }
 
-    void collapse() {
+    void dismissOverlay() {
         if (mAdViewController != null) {
-            mAdViewController.collapse();
+            mAdViewController.dismissOverlay();
         }
     }
 
     public boolean getAutorefreshEnabled() {
         if (mAdViewController != null) return mAdViewController.getCurrentAutoRefreshStatus();
         else {
-            MoPubLog.d("Can't get autorefresh status for destroyed MoPubView. " +
+            MoPubLog.log(CUSTOM, "Can't get autorefresh status for destroyed MoPubView. " +
                     "Returning false.");
             return false;
         }
     }
 
     public void setAdContentView(View view) {
-        if (mAdViewController != null) mAdViewController.setAdContentView(view);
+        MoPubLog.log(SHOW_ATTEMPTED);
+        if (mAdViewController != null) {
+            mAdViewController.setAdContentView(view);
+            MoPubLog.log(SHOW_SUCCESS);
+        } else {
+            MoPubLog.log(SHOW_FAILED);
+        }
     }
 
     public void setTesting(boolean testing) {
@@ -386,7 +406,7 @@ public void setTesting(boolean testing) {
     public boolean getTesting() {
         if (mAdViewController != null) return mAdViewController.getTesting();
         else {
-            MoPubLog.d("Can't get testing status for destroyed MoPubView. " +
+            MoPubLog.log(CUSTOM, "Can't get testing status for destroyed MoPubView. " +
                     "Returning false.");
             return false;
         }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java
index 3c2db53a..b94b8af1 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
index 824bee4d..9591b41b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -23,6 +23,7 @@
 import com.mopub.mraid.MraidVideoViewController;
 
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 import static com.mopub.mobileads.BaseBroadcastReceiver.broadcastAction;
 
 public class MraidVideoPlayerActivity extends BaseVideoPlayerActivity implements BaseVideoViewController.BaseVideoViewControllerListener {
@@ -172,7 +173,7 @@ public void onStartActivityForResult(final Class<? extends Activity> clazz,
         try {
             startActivityForResult(intent, requestCode);
         } catch (ActivityNotFoundException e) {
-            MoPubLog.d("Activity " + clazz.getName() + " not found. Did you declare it in your AndroidManifest.xml?");
+            MoPubLog.log(CUSTOM, "Activity " + clazz.getName() + " not found. Did you declare it in your AndroidManifest.xml?");
         }
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java
index d7ca7a1d..7d367300 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
index a6cfc1e6..571e52ab 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAdXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAdXmlManager.java
index 6cb38fe0..79f96282 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAdXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAdXmlManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java
index f019f8ef..b6cf2dc7 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdConfig.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdConfig.java
index 841b4a3e..a0f82990 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdConfig.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdConfig.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -23,6 +23,7 @@
 import java.io.Serializable;
 import java.util.List;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
 
 public class VastCompanionAdConfig implements Serializable {
@@ -171,7 +172,7 @@ public void urlHandlingSucceeded(@NonNull String url,
                             try {
                                 ((Activity) context).startActivityForResult(intent, requestCode);
                             } catch (ActivityNotFoundException e) {
-                                MoPubLog.d("Activity " + clazz.getName() + " not found. Did you " +
+                                MoPubLog.log(CUSTOM, "Activity " + clazz.getName() + " not found. Did you " +
                                         "declare it in your AndroidManifest.xml?");
                             }
                         }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java
index 681a00ba..afd2e772 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastErrorCode.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastErrorCode.java
index 2ccdb5f5..1862a041 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastErrorCode.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastErrorCode.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionParentXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionParentXmlManager.java
index 262893f6..60512dac 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionParentXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionParentXmlManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java
index b1d6bb14..195a3414 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java
index 92c9d18f..a4067fc5 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconConfig.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconConfig.java
index 6a8ddfad..e38956c7 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconConfig.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconConfig.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -22,6 +22,7 @@
 import java.io.Serializable;
 import java.util.List;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
 
 /**
@@ -172,7 +173,7 @@ public void urlHandlingSucceeded(@NonNull String url,
                             try {
                                 Intents.startActivity(context, intent);
                             } catch (IntentNotResolvableException e) {
-                                MoPubLog.d(e.getMessage());
+                                MoPubLog.log(CUSTOM, e.getMessage());
                             }
                         }
                     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconXmlManager.java
index 01d58c1b..42765834 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconXmlManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -17,6 +17,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 /**
  * This XML manager handles Vast 3.0 icons.
  */
@@ -80,7 +82,7 @@ Integer getOffsetMS() {
         try {
             iconOffset = Strings.parseAbsoluteOffset(iconOffsetStr);
         } catch (NumberFormatException e) {
-            MoPubLog.d(String.format("Invalid VAST icon offset format: %s:", iconOffsetStr));
+            MoPubLog.log(CUSTOM, String.format("Invalid VAST icon offset format: %s:", iconOffsetStr));
         }
         return iconOffset;
     }
@@ -100,7 +102,7 @@ Integer getDurationMS() {
         try {
             iconDuration = Strings.parseAbsoluteOffset(iconDurationStr);
         } catch (NumberFormatException e) {
-            MoPubLog.d(String.format("Invalid VAST icon duration format: %s:", iconDurationStr));
+            MoPubLog.log(CUSTOM, String.format("Invalid VAST icon duration format: %s:", iconDurationStr));
         }
         return iconDuration;
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastInLineXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastInLineXmlManager.java
index b18466f4..5ca6de15 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastInLineXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastInLineXmlManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
index 00a5fe38..86a97eac 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -18,6 +18,8 @@
 import java.util.Collections;
 import java.util.List;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 /**
  * This XML manager handles the meta data around the video file. This includes video progress
  * trackers and click trackers. This also houses the manager for the actual media file.
@@ -116,7 +118,7 @@
                                     trackingFraction));
                         }
                     } catch (NumberFormatException e) {
-                        MoPubLog.d(String.format("Failed to parse VAST progress tracker %s",
+                        MoPubLog.log(CUSTOM, String.format("Failed to parse VAST progress tracker %s",
                                 offsetString));
                     }
                 }
@@ -175,7 +177,7 @@
                             trackers.add(new VastAbsoluteProgressTracker(trackingUrl, trackingMilliseconds));
                         }
                     } catch (NumberFormatException e) {
-                        MoPubLog.d(String.format("Failed to parse VAST progress tracker %s",
+                        MoPubLog.log(CUSTOM, String.format("Failed to parse VAST progress tracker %s",
                                 offsetString));
                     }
                 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacro.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacro.java
index 42309959..9cdc7c8c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacro.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacro.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacroHelper.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacroHelper.java
index af7b4b77..83da6be7 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacroHelper.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacroHelper.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -20,6 +20,8 @@
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.ERROR;
+
 /**
  * Handles macro substitution with actual data.
  */
@@ -86,7 +88,7 @@ public VastMacroHelper withAssetUri(@Nullable String assetUri) {
             try {
                 assetUri = URLEncoder.encode(assetUri, "UTF-8");
             } catch (UnsupportedEncodingException e) {
-                MoPubLog.w("Failed to encode url", e);
+                MoPubLog.log(ERROR, "Failed to encode url", e);
             }
             mMacroDataMap.put(VastMacro.ASSETURI, assetUri);
         }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastManager.java
index 6d5a1acb..81ae8aa2 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -18,6 +18,9 @@
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.mobileads.VideoDownloader.VideoDownloaderListener;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.ERROR;
+
 /**
  * Given a VAST xml document, this class manages the lifecycle of parsing and finding a video and
  * possibly companion ad. It provides the API for clients to prepare a
@@ -77,7 +80,7 @@ public void prepareVastVideoConfiguration(@Nullable final String vastXml,
             try {
                 AsyncTasks.safeExecuteOnExecutor(mVastXmlManagerAggregator, vastXml);
             } catch (Exception e) {
-                MoPubLog.d("Failed to aggregate vast xml", e);
+                MoPubLog.log(ERROR, "Failed to aggregate vast xml", e);
                 mVastManagerListener.onVastVideoConfigurationPrepared(null);
             }
         }
@@ -122,7 +125,7 @@ public void onComplete(boolean success) {
                 if (success && updateDiskMediaFileUrl(vastVideoConfig)) {
                     mVastManagerListener.onVastVideoConfigurationPrepared(vastVideoConfig);
                 } else {
-                    MoPubLog.d("Failed to download VAST video.");
+                    MoPubLog.log(CUSTOM, "Failed to download VAST video.");
                     mVastManagerListener.onVastVideoConfigurationPrepared(null);
                 }
             }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMediaXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMediaXmlManager.java
index 1369bb98..8c4958d4 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMediaXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMediaXmlManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResource.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResource.java
index f803cc17..a240a2b8 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResource.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResource.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResourceXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResourceXmlManager.java
index b5a3afcf..0c16e86a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResourceXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResourceXmlManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java
index f2eb47c0..983e1e36 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
index dcc34306..d90b065b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -16,6 +16,9 @@
 import com.mopub.common.util.ImageUtils;
 import com.mopub.mobileads.resource.DrawableConstants;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.ERROR;
+
 public class VastVideoBlurLastVideoFrameTask extends AsyncTask<String, Void, Boolean> {
 
     private static final int MICROSECONDS_PER_MILLISECOND = 1000;
@@ -66,7 +69,7 @@ protected Boolean doInBackground(String... videoPaths) {
 
             return true;
         } catch (Exception e) {
-            MoPubLog.d("Failed to blur last video frame", e);
+            MoPubLog.log(ERROR, "Failed to blur last video frame", e);
             return false;
         }
     }
@@ -87,7 +90,7 @@ protected void onPostExecute(final Boolean success) {
 
     @Override
     protected void onCancelled() {
-        MoPubLog.d("VastVideoBlurLastVideoFrameTask was cancelled.");
+        MoPubLog.log(CUSTOM, "VastVideoBlurLastVideoFrameTask was cancelled.");
     }
 
     // for testing
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCloseButtonWidget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCloseButtonWidget.java
index 4e075c24..63ba592c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCloseButtonWidget.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCloseButtonWidget.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -25,6 +25,8 @@
 import com.mopub.volley.toolbox.ImageLoader;
 
 import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.ERROR;
 
 public class VastVideoCloseButtonWidget extends RelativeLayout {
     @NonNull private TextView mTextView;
@@ -114,13 +116,13 @@ public void onResponse(final ImageLoader.ImageContainer imageContainer,
                 if (bitmap != null) {
                     mImageView.setImageBitmap(bitmap);
                 } else {
-                    MoPubLog.d(String.format("%s returned null bitmap", imageUrl));
+                    MoPubLog.log(CUSTOM, String.format("%s returned null bitmap", imageUrl));
                 }
             }
 
             @Override
             public void onErrorResponse(final VolleyError volleyError) {
-                MoPubLog.d("Failed to load image.", volleyError);
+                MoPubLog.log(ERROR, "Failed to load image.", volleyError);
             }
         });
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
index e9480f17..6c73a739 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -37,6 +37,7 @@
 import java.util.Map;
 import java.util.Set;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
 
 public class VastVideoConfig implements Serializable {
@@ -253,7 +254,7 @@ public void addVideoTrackers(@Nullable final JSONObject videoTrackers) {
                     break;
                 case UNKNOWN:
                 default:
-                    MoPubLog.d("Encountered unknown video tracking event: " + eventName);
+                    MoPubLog.log(CUSTOM, "Encountered unknown video tracking event: " + eventName);
             }
         }
     }
@@ -641,10 +642,10 @@ public void urlHandlingSucceeded(@NonNull String url,
                                     Intents.startActivity(context, intent);
                                 }
                             } catch (ActivityNotFoundException e) {
-                                MoPubLog.d("Activity " + clazz.getName() + " not found. Did you " +
+                                MoPubLog.log(CUSTOM, "Activity " + clazz.getName() + " not found. Did you " +
                                         "declare it in your AndroidManifest.xml?");
                             } catch (IntentNotResolvableException e) {
-                                MoPubLog.d("Activity " + clazz.getName() + " not found. Did you " +
+                                MoPubLog.log(CUSTOM, "Activity " + clazz.getName() + " not found. Did you " +
                                         "declare it in your AndroidManifest.xml?");
                             }
                         }
@@ -824,7 +825,7 @@ public Integer getSkipOffsetMillis(final int videoDuration) {
                     float percentage = Float.parseFloat(mSkipOffset.replace("%", "")) / 100f;
                     skipOffsetMilliseconds = Math.round(videoDuration * percentage);
                 } else {
-                    MoPubLog.d(
+                    MoPubLog.log(CUSTOM,
                             String.format("Invalid VAST skipoffset format: %s", mSkipOffset));
                     return null;
                 }
@@ -837,7 +838,7 @@ public Integer getSkipOffsetMillis(final int videoDuration) {
                     }
                 }
             } catch (NumberFormatException e) {
-                MoPubLog.d(String.format("Failed to parse skipoffset %s", mSkipOffset));
+                MoPubLog.log(CUSTOM, String.format("Failed to parse skipoffset %s", mSkipOffset));
             }
         }
         return null;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java
index 35666b24..2f97a842 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -18,6 +18,8 @@
 import com.mopub.mobileads.resource.CtaButtonDrawable;
 import com.mopub.mobileads.resource.DrawableConstants;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 public class VastVideoCtaButtonWidget extends ImageView {
     @NonNull private CtaButtonDrawable mCtaButtonDrawable;
     @NonNull private final RelativeLayout.LayoutParams mLandscapeLayoutParams;
@@ -121,15 +123,15 @@ private void updateLayoutAndVisibility() {
                 setLayoutParams(mPortraitLayoutParams);
                 break;
             case Configuration.ORIENTATION_UNDEFINED:
-                MoPubLog.d("Screen orientation undefined: CTA button widget defaulting to portrait layout");
+                MoPubLog.log(CUSTOM, "Screen orientation undefined: CTA button widget defaulting to portrait layout");
                 setLayoutParams(mPortraitLayoutParams);
                 break;
             case Configuration.ORIENTATION_SQUARE:
-                MoPubLog.d("Screen orientation is deprecated ORIENTATION_SQUARE: CTA button widget defaulting to portrait layout");
+                MoPubLog.log(CUSTOM, "Screen orientation is deprecated ORIENTATION_SQUARE: CTA button widget defaulting to portrait layout");
                 setLayoutParams(mPortraitLayoutParams);
                 break;
             default:
-                MoPubLog.d("Unrecognized screen orientation: CTA button widget defaulting to portrait layout");
+                MoPubLog.log(CUSTOM, "Unrecognized screen orientation: CTA button widget defaulting to portrait layout");
                 setLayoutParams(mPortraitLayoutParams);
                 break;
         }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoGradientStripWidget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoGradientStripWidget.java
index 8cad870e..cab8ae0a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoGradientStripWidget.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoGradientStripWidget.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -17,6 +17,8 @@
 import com.mopub.common.util.Dips;
 import com.mopub.mobileads.resource.DrawableConstants;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 public class VastVideoGradientStripWidget extends ImageView {
     @NonNull DeviceUtils.ForceOrientation mForceOrientation;
     private int mVisibilityForCompanionAd;
@@ -87,15 +89,15 @@ private void updateVisibility() {
                     setVisibility(View.INVISIBLE);
                     break;
                 case Configuration.ORIENTATION_UNDEFINED:
-                    MoPubLog.d("Screen orientation undefined: do not show gradient strip widget");
+                    MoPubLog.log(CUSTOM, "Screen orientation undefined: do not show gradient strip widget");
                     setVisibility(View.INVISIBLE);
                     break;
                 case Configuration.ORIENTATION_SQUARE:
-                    MoPubLog.d("Screen orientation is deprecated ORIENTATION_SQUARE: do not show gradient strip widget");
+                    MoPubLog.log(CUSTOM, "Screen orientation is deprecated ORIENTATION_SQUARE: do not show gradient strip widget");
                     setVisibility(View.INVISIBLE);
                     break;
                 default:
-                    MoPubLog.d("Unrecognized screen orientation: do not show gradient strip widget");
+                    MoPubLog.log(CUSTOM, "Unrecognized screen orientation: do not show gradient strip widget");
                     setVisibility(View.INVISIBLE);
                     break;
             }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java
index fba3292a..1fb99fd0 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java
index 4fa00bbb..e2efd426 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java
index a73a21ca..37a6c29d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -17,6 +17,8 @@
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.AsyncTasks;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.ERROR;
+
 /**
  * Custom VideoView dedicated for VAST videos. This primarily deals with the blurring of the last
  * frame when there's no companion ad and retrying the video.
@@ -55,7 +57,7 @@ public void prepareBlurredLastVideoFrame(
                         diskMediaFileUrl
                 );
             } catch (Exception e) {
-                MoPubLog.d("Failed to blur last video frame", e);
+                MoPubLog.log(ERROR, "Failed to blur last video frame", e);
             }
         }
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
index a4856be3..028b3dbd 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
index 99bfb8ed..ee24bc79 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
index 760ab6f8..a6076395 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWebView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWebView.java
index 9cacee32..3a6bae5e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWebView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWebView.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
index dbc388b7..98310955 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManager.java
index 12144699..2ace57b4 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -175,10 +175,10 @@ String getCustomCloseIconUrl() {
     }
 
     /**
-     * Gets the orientation that this ad should be forced in. This returns UNDEFINED if not
+     * Gets the orientation that this ad should be forced in. This returns DEVICE if not
      * specified.
      *
-     * @return {@code ForceOrientation} orientation or {@code UNDEFINED}
+     * @return {@code ForceOrientation} orientation or {@code DEVICE}
      */
     @NonNull
     ForceOrientation getCustomForceOrientation() {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
index cbc9146c..e160003f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -37,6 +37,7 @@
 import java.util.Map;
 import java.util.Set;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.ERROR;
 import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
 
 
@@ -125,7 +126,7 @@ protected VastVideoConfig doInBackground(@Nullable String... strings) {
             final String vastXml = strings[0];
             return evaluateVastXmlManager(vastXml, new ArrayList<VastTracker>());
         } catch (Exception e) {
-            MoPubLog.d("Unable to generate VastVideoConfig.", e);
+            MoPubLog.log(ERROR, "Unable to generate VastVideoConfig.", e);
             return null;
         }
     }
@@ -175,7 +176,7 @@ VastVideoConfig evaluateVastXmlManager(@NonNull final String vastXml,
         try {
             xmlManager.parseVastXml(vastXml);
         } catch (Exception e) {
-            MoPubLog.d("Failed to parse VAST XML", e);
+            MoPubLog.log(ERROR, "Failed to parse VAST XML", e);
             makeVastTrackingHttpRequest(errorTrackers, VastErrorCode.XML_PARSING_ERROR, null,
                     null, mContext);
             return null;
@@ -407,7 +408,7 @@ private String evaluateWrapperRedirect(@NonNull VastWrapperXmlManager vastWrappe
         try {
             vastRedirectXml = followVastRedirect(vastAdTagUri);
         } catch (Exception e) {
-            MoPubLog.d("Failed to follow VAST redirect", e);
+            MoPubLog.log(ERROR, "Failed to follow VAST redirect", e);
             if (!wrapperErrorTrackers.isEmpty()) {
                 makeVastTrackingHttpRequest(wrapperErrorTrackers, VastErrorCode.WRAPPER_TIMEOUT,
                                 null, null, mContext);
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoDownloader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoDownloader.java
index 3cf36b15..ccce8b5a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoDownloader.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoDownloader.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -23,6 +23,9 @@
 import java.util.ArrayDeque;
 import java.util.Deque;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.ERROR;
+
 public class VideoDownloader {
     private static final int MAX_VIDEO_SIZE = 25 * 1024 * 1024; // 25 MiB
     private static final Deque<WeakReference<VideoDownloaderTask>> sDownloaderTasks =
@@ -39,7 +42,7 @@ public static void cache(@Nullable final String url,
         Preconditions.checkNotNull(listener);
 
         if (url == null) {
-            MoPubLog.d("VideoDownloader attempted to cache video with null url.");
+            MoPubLog.log(CUSTOM, "VideoDownloader attempted to cache video with null url.");
             listener.onComplete(false);
             return;
         }
@@ -105,7 +108,7 @@ private static boolean cancelOneTask(
         @Override
         protected Boolean doInBackground(final String... params) {
             if (params == null || params.length == 0 || params[0] == null) {
-                MoPubLog.d("VideoDownloader task tried to execute null or empty url.");
+                MoPubLog.log(CUSTOM, "VideoDownloader task tried to execute null or empty url.");
                 return false;
             }
 
@@ -120,7 +123,7 @@ protected Boolean doInBackground(final String... params) {
                 int statusCode = urlConnection.getResponseCode();
                 if (statusCode < HttpURLConnection.HTTP_OK
                         || statusCode >= HttpURLConnection.HTTP_MULT_CHOICE) {
-                    MoPubLog.d("VideoDownloader encountered unexpected statusCode: " +
+                    MoPubLog.log(CUSTOM, "VideoDownloader encountered unexpected statusCode: " +
                             statusCode);
                     return false;
                 }
@@ -128,7 +131,7 @@ protected Boolean doInBackground(final String... params) {
                 // Check video size below maximum
                 int contentLength = urlConnection.getContentLength();
                 if (contentLength > MAX_VIDEO_SIZE) {
-                    MoPubLog.d(String.format(
+                    MoPubLog.log(CUSTOM, String.format(
                             "VideoDownloader encountered video larger than disk cap. " +
                                     "(%d bytes / %d maximum).",
                             contentLength,
@@ -139,7 +142,7 @@ protected Boolean doInBackground(final String... params) {
                 boolean diskPutResult = CacheService.putToDiskCache(videoUrl, inputStream);
                 return diskPutResult;
             } catch (Exception e) {
-                MoPubLog.d("VideoDownloader task threw an internal exception.", e);
+                MoPubLog.log(ERROR, "VideoDownloader task threw an internal exception.", e);
                 return false;
             } finally {
                 Streams.closeStream(inputStream);
@@ -168,7 +171,7 @@ protected void onPostExecute(final Boolean success) {
 
         @Override
         protected void onCancelled() {
-            MoPubLog.d("VideoDownloader task was cancelled.");
+            MoPubLog.log(CUSTOM, "VideoDownloader task was cancelled.");
             sDownloaderTasks.remove(mWeakSelf);
             mListener.onComplete(false);
         }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoTrackingEvent.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoTrackingEvent.java
index 4df61652..cf07312a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoTrackingEvent.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoTrackingEvent.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTracker.java
index 91d84566..26820a2d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTracker.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManager.java
index abd08494..08f6c957 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -14,6 +14,8 @@
 
 import org.w3c.dom.Node;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 /**
  * Data Object for the MoPubViewabilityTracker VAST Custom Extension.
  */
@@ -52,14 +54,14 @@ Integer getViewablePlaytimeMS() {
             try {
                 viewablePlaytimeMS = Strings.parseAbsoluteOffset(viewablePlaytimeStr);
             } catch (NumberFormatException e) {
-                MoPubLog.d(String.format("Invalid VAST viewablePlaytime format " +
+                MoPubLog.log(CUSTOM, String.format("Invalid VAST viewablePlaytime format " +
                         "for \"HH:MM:SS[.mmm]\": %s:", viewablePlaytimeStr));
             }
         } else {
             try {
                 viewablePlaytimeMS = (int) (Float.parseFloat(viewablePlaytimeStr) * 1000);
             } catch (NumberFormatException e) {
-                MoPubLog.d(String.format("Invalid VAST viewablePlaytime format" +
+                MoPubLog.log(CUSTOM, String.format("Invalid VAST viewablePlaytime format" +
                         " for \"SS[.mmm]\": %s:", viewablePlaytimeStr));
             }
         }
@@ -92,7 +94,7 @@ Integer getPercentViewable() {
         try {
             percentViewable = (int) (Float.parseFloat(percentViewableStr.replace("%", "")));
         } catch (NumberFormatException e) {
-            MoPubLog.d(String.format("Invalid VAST percentViewable format for \"d{1,3}%%\": %s:",
+            MoPubLog.log(CUSTOM, String.format("Invalid VAST percentViewable format for \"d{1,3}%%\": %s:",
                     percentViewableStr));
         }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ViewGestureDetector.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
index b8b64ffa..325a9bba 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -12,25 +12,18 @@
 import android.view.View;
 
 import com.mopub.common.AdReport;
-import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.VisibleForTesting;
 
 public class ViewGestureDetector extends GestureDetector {
     private final View mView;
-
-    public interface UserClickListener {
-        void onUserClick();
-        void onResetUserClick();
-        boolean wasClicked();
-    }
-
+    @NonNull
     private AdAlertGestureListener mAdAlertGestureListener;
-    private UserClickListener mUserClickListener;
 
     public ViewGestureDetector(@NonNull Context context, @NonNull View view, @Nullable AdReport adReport)  {
         this(context, view, new AdAlertGestureListener(view, adReport));
     }
 
-    private ViewGestureDetector(Context context, View view, AdAlertGestureListener adAlertGestureListener) {
+    private ViewGestureDetector(Context context, View view, @NonNull AdAlertGestureListener adAlertGestureListener) {
         super(context, adAlertGestureListener);
 
         mAdAlertGestureListener = adAlertGestureListener;
@@ -39,25 +32,16 @@ private ViewGestureDetector(Context context, View view, AdAlertGestureListener a
         setIsLongpressEnabled(false);
     }
 
-    public void sendTouchEvent(MotionEvent motionEvent) {
+    @Override
+    public boolean onTouchEvent(MotionEvent motionEvent) {
+        final boolean result = super.onTouchEvent(motionEvent);
         switch (motionEvent.getAction()) {
             case MotionEvent.ACTION_UP:
-                if (mUserClickListener != null) {
-                    mUserClickListener.onUserClick();
-                } else {
-                    MoPubLog.d("View's onUserClick() is not registered.");
-                }
                 mAdAlertGestureListener.finishGestureDetection();
                 break;
 
-            case MotionEvent.ACTION_DOWN:
-                onTouchEvent(motionEvent);
-                break;
-
             case MotionEvent.ACTION_MOVE:
-                if (isMotionEventInView(motionEvent, mView)) {
-                    onTouchEvent(motionEvent);
-                } else {
+                if (!isMotionEventInView(motionEvent, mView)) {
                     resetAdFlaggingGesture();
                 }
                 break;
@@ -65,10 +49,7 @@ public void sendTouchEvent(MotionEvent motionEvent) {
             default:
                 break;
         }
-    }
-
-    public void setUserClickListener(UserClickListener listener) {
-        mUserClickListener = listener;
+        return result;
     }
 
     void resetAdFlaggingGesture() {
@@ -87,8 +68,21 @@ private boolean isMotionEventInView(MotionEvent motionEvent, View view) {
                 && (y >= 0 && y <= view.getHeight());
     }
 
+    public void onResetUserClick() {
+        mAdAlertGestureListener.onResetUserClick();
+    }
+
+    public boolean isClicked() {
+        return mAdAlertGestureListener.isClicked();
+    }
+
     @Deprecated // for testing
-    void setAdAlertGestureListener(AdAlertGestureListener adAlertGestureListener) {
+    void setAdAlertGestureListener(@NonNull AdAlertGestureListener adAlertGestureListener) {
         mAdAlertGestureListener = adAlertGestureListener;
     }
+
+    @VisibleForTesting
+    public void setClicked(boolean clicked) {
+        mAdAlertGestureListener.mIsClicked = clicked;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
index 5aaab5ea..8d19bfda 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewCacheService.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewCacheService.java
index 52de067c..ae8efa24 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewCacheService.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewCacheService.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -13,6 +13,7 @@
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.mraid.MraidController;
 
 import java.lang.ref.WeakReference;
 import java.util.Collections;
@@ -21,6 +22,7 @@
 import java.util.Map;
 
 import static com.mopub.common.Constants.FIFTEEN_MINUTES_MILLIS;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 
 /**
  * Holds WebViews in memory until they are used.
@@ -33,13 +35,17 @@
         private final WeakReference<Interstitial> mWeakInterstitial;
         @NonNull
         private final ExternalViewabilitySessionManager mViewabilityManager;
+        @Nullable
+        private final MraidController mController;
 
         Config(@NonNull final BaseWebView baseWebView,
                 @NonNull final Interstitial baseInterstitial,
-                @NonNull final ExternalViewabilitySessionManager viewabilityManager) {
+                @NonNull final ExternalViewabilitySessionManager viewabilityManager,
+                @Nullable final MraidController controller) {
             mWebView = baseWebView;
-            mWeakInterstitial = new WeakReference<Interstitial>(baseInterstitial);
+            mWeakInterstitial = new WeakReference<>(baseInterstitial);
             mViewabilityManager = viewabilityManager;
+            mController = controller;
         }
 
         @NonNull
@@ -56,6 +62,11 @@ public BaseWebView getWebView() {
         public ExternalViewabilitySessionManager getViewabilityManager() {
             return mViewabilityManager;
         }
+
+        @Nullable
+        public MraidController getController() {
+            return mController;
+        }
     }
 
     /**
@@ -68,7 +79,7 @@ public ExternalViewabilitySessionManager getViewabilityManager() {
     /**
      * Trim the cache at least this frequently. Trimming only removes a {@link Config}s when its
      * associated {@link Interstitial} is no longer in memory. The cache is also
-     * trimmed every time {@link #storeWebViewConfig(Long, Interstitial, BaseWebView, ExternalViewabilitySessionManager)} is called.
+     * trimmed every time {@link #storeWebViewConfig(Long, Interstitial, BaseWebView, ExternalViewabilitySessionManager, MraidController)} is called.
      */
     @VisibleForTesting
     static final long TRIM_CACHE_FREQUENCY_MILLIS = FIFTEEN_MINUTES_MILLIS;
@@ -101,7 +112,8 @@ private WebViewCacheService() {
     public static void storeWebViewConfig(@NonNull final Long broadcastIdentifier,
             @NonNull final Interstitial baseInterstitial,
             @NonNull final BaseWebView baseWebView,
-            @NonNull final ExternalViewabilitySessionManager viewabilityManager) {
+            @NonNull final ExternalViewabilitySessionManager viewabilityManager,
+            @Nullable final MraidController controller) {
         Preconditions.checkNotNull(broadcastIdentifier);
         Preconditions.checkNotNull(baseInterstitial);
         Preconditions.checkNotNull(baseWebView);
@@ -109,13 +121,13 @@ public static void storeWebViewConfig(@NonNull final Long broadcastIdentifier,
         trimCache();
         // Ignore request when max size is reached.
         if (sWebViewConfigs.size() >= MAX_SIZE) {
-            MoPubLog.w(
+            MoPubLog.log(CUSTOM,
                     "Unable to cache web view. Please destroy some via MoPubInterstitial#destroy() and try again.");
             return;
         }
 
         sWebViewConfigs.put(broadcastIdentifier,
-                new Config(baseWebView, baseInterstitial, viewabilityManager));
+                new Config(baseWebView, baseInterstitial, viewabilityManager, controller));
     }
 
     @Nullable
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/AdViewControllerFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/AdViewControllerFactory.java
index e4965d33..743eaf58 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/AdViewControllerFactory.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/AdViewControllerFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java
index 0915bcc7..68b25d80 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MraidControllerFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MraidControllerFactory.java
index 50ccdfc5..9c15a239 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MraidControllerFactory.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MraidControllerFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
index 0f6d3fc1..b6d29fb3 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
index f0e36d1a..9a78da7a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
index 53fc6c74..b4daddeb 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CtaButtonDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CtaButtonDrawable.java
index a9b9cc9e..ae5f391f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CtaButtonDrawable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CtaButtonDrawable.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
index dcc02f82..367f5b9e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
index 6c569804..44a4bf5a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java
index c1da6d21..d1c9c2bd 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -13,6 +13,8 @@
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Dips;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 public class ProgressBarDrawable extends BaseWidgetDrawable {
     @NonNull private final Paint mBackgroundPaint;
     @NonNull private final Paint mProgressPaint;
@@ -91,7 +93,7 @@ public void setProgress(final int currentProgress) {
             mCurrentProgress = currentProgress;
             mLastProgress = currentProgress;
         } else if (currentProgress != 0) {
-            MoPubLog.d(String.format("Progress not monotonically increasing: last = %d, current = %d",
+            MoPubLog.log(CUSTOM, String.format("Progress not monotonically increasing: last = %d, current = %d",
                     mLastProgress,
                     currentProgress));
             forceCompletion();
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/RadialCountdownDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/RadialCountdownDrawable.java
index 8a0e0e09..50caf5f3 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/RadialCountdownDrawable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/RadialCountdownDrawable.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/WebViews.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/WebViews.java
index f4bcda5f..88debdef 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/WebViews.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/WebViews.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -14,8 +14,11 @@
 
 import com.mopub.common.MoPub;
 import com.mopub.common.Preconditions;
+
 import com.mopub.common.logging.MoPubLog;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 public class WebViews {
     public static void onPause(@NonNull final WebView webView, boolean isFinishing) {
         // XXX
@@ -36,7 +39,7 @@ public static void setDisableJSChromeClient(@NonNull final WebView webView) {
             @Override
             public boolean onJsAlert(@NonNull final WebView view, @NonNull final String url,
                     @NonNull final String message, @NonNull final JsResult result) {
-                MoPubLog.d(message);
+                MoPubLog.log(CUSTOM, message);
                 result.confirm();
                 return true;
             }
@@ -44,7 +47,7 @@ public boolean onJsAlert(@NonNull final WebView view, @NonNull final String url,
             @Override
             public boolean onJsConfirm(@NonNull final WebView view, @NonNull final String url,
                     @NonNull final String message, @NonNull final JsResult result) {
-                MoPubLog.d(message);
+                MoPubLog.log(CUSTOM, message);
                 result.confirm();
                 return true;
             }
@@ -53,7 +56,7 @@ public boolean onJsConfirm(@NonNull final WebView view, @NonNull final String ur
             public boolean onJsPrompt(@NonNull final WebView view, @NonNull final String url,
                     @NonNull final String message, @NonNull final String defaultValue,
                     @NonNull final JsPromptResult result) {
-                MoPubLog.d(message);
+                MoPubLog.log(CUSTOM, message);
                 result.confirm();
                 return true;
             }
@@ -61,7 +64,7 @@ public boolean onJsPrompt(@NonNull final WebView view, @NonNull final String url
             @Override
             public boolean onJsBeforeUnload(@NonNull final WebView view, @NonNull final String url,
                     @NonNull final String message, @NonNull final JsResult result) {
-                MoPubLog.d(message);
+                MoPubLog.log(CUSTOM, message);
                 result.confirm();
                 return true;
             }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/XmlUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/XmlUtils.java
index 67c8a675..53572b1a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/XmlUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/XmlUtils.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java
index 35ebf375..57c8daec 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java
@@ -1,12 +1,10 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
 package com.mopub.mraid;
 
-import android.content.ActivityNotFoundException;
 import android.content.Context;
-import android.content.Intent;
 import android.graphics.Color;
 import android.graphics.Rect;
 import android.net.Uri;
@@ -32,20 +30,21 @@
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.BaseWebView;
 import com.mopub.mobileads.ViewGestureDetector;
-import com.mopub.mobileads.ViewGestureDetector.UserClickListener;
 import com.mopub.mraid.MraidNativeCommandHandler.MraidCommandFailureListener;
 import com.mopub.network.Networking;
 
-import org.apache.http.NameValuePair;
-import org.apache.http.client.utils.URLEncodedUtils;
 import org.json.JSONObject;
 
+import java.io.UnsupportedEncodingException;
 import java.net.URI;
 import java.net.URISyntaxException;
-import java.util.HashMap;
+import java.net.URLEncoder;
 import java.util.List;
 import java.util.Map;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+import static com.mopub.network.MoPubRequestUtils.getQueryParamMap;
+
 public class MraidBridge {
     private final AdReport mAdReport;
 
@@ -78,6 +77,8 @@ void onSetOrientationProperties(boolean allowOrientationChange, MraidOrientation
         void onPlayVideo(URI uri);
     }
 
+    static final String MRAID_OPEN = "mraid://open?url=";
+
     @NonNull private final PlacementType mPlacementType;
 
     @NonNull private final MraidNativeCommandHandler mMraidNativeCommandHandler;
@@ -86,7 +87,7 @@ void onSetOrientationProperties(boolean allowOrientationChange, MraidOrientation
 
     @Nullable private MraidWebView mMraidWebView;
 
-    private boolean mIsClicked;
+    @Nullable private ViewGestureDetector mGestureDetector;
 
     private boolean mHasLoaded;
 
@@ -119,7 +120,7 @@ void attachView(@NonNull MraidWebView mraidWebView) {
         mMraidWebView.setScrollContainer(false);
         mMraidWebView.setVerticalScrollBarEnabled(false);
         mMraidWebView.setHorizontalScrollBarEnabled(false);
-        mMraidWebView.setBackgroundColor(Color.BLACK);
+        mMraidWebView.setBackgroundColor(Color.TRANSPARENT);
 
         mMraidWebView.setWebViewClient(mMraidWebViewClient);
 
@@ -147,29 +148,13 @@ public void onShowCustomView(final View view, final CustomViewCallback callback)
             }
         });
 
-        final ViewGestureDetector gestureDetector = new ViewGestureDetector(
+        mGestureDetector = new ViewGestureDetector(
                 mMraidWebView.getContext(), mMraidWebView, mAdReport);
-        gestureDetector.setUserClickListener(new UserClickListener() {
-            @Override
-            public void onUserClick() {
-                mIsClicked = true;
-            }
-
-            @Override
-            public void onResetUserClick() {
-                mIsClicked = false;
-            }
-
-            @Override
-            public boolean wasClicked() {
-                return mIsClicked;
-            }
-        });
 
         mMraidWebView.setOnTouchListener(new OnTouchListener() {
             @Override
             public boolean onTouch(final View v, final MotionEvent event) {
-                gestureDetector.sendTouchEvent(event);
+                mGestureDetector.onTouchEvent(event);
 
                 switch (event.getAction()) {
                     case MotionEvent.ACTION_DOWN:
@@ -202,7 +187,7 @@ void detach() {
 
     public void setContentHtml(@NonNull String htmlData) {
         if (mMraidWebView == null) {
-            MoPubLog.d("MRAID bridge called setContentHtml before WebView was attached");
+            MoPubLog.log(CUSTOM, "MRAID bridge called setContentHtml before WebView was attached");
             return;
         }
 
@@ -213,7 +198,7 @@ public void setContentHtml(@NonNull String htmlData) {
 
     public void setContentUrl(String url) {
         if (mMraidWebView == null) {
-            MoPubLog.d("MRAID bridge called setContentHtml while WebView was not attached");
+            MoPubLog.log(CUSTOM, "MRAID bridge called setContentHtml while WebView was not attached");
             return;
         }
 
@@ -223,11 +208,11 @@ public void setContentUrl(String url) {
 
     void injectJavaScript(@NonNull String javascript) {
         if (mMraidWebView == null) {
-            MoPubLog.d("Attempted to inject Javascript into MRAID WebView while was not "
+            MoPubLog.log(CUSTOM, "Attempted to inject Javascript into MRAID WebView while was not "
                     + "attached:\n\t" + javascript);
             return;
         }
-        MoPubLog.d("Injecting Javascript into MRAID WebView:\n\t" + javascript);
+        MoPubLog.log(CUSTOM, "Injecting Javascript into MRAID WebView:\n\t" + javascript);
         mMraidWebView.loadUrl("javascript:" + javascript);
     }
 
@@ -335,22 +320,24 @@ public void onPageFinished(@NonNull WebView view, @NonNull String url) {
         @Override
         public void onReceivedError(@NonNull WebView view, int errorCode,
                 @NonNull String description, @NonNull String failingUrl) {
-            MoPubLog.d("Error: " + description);
+            MoPubLog.log(CUSTOM, "Error: " + description);
             super.onReceivedError(view, errorCode, description, failingUrl);
         }
     };
 
     @VisibleForTesting
     boolean handleShouldOverrideUrl(@NonNull final String url) {
-        URI uri;
         try {
-            uri = new URI(url);
+            // This is purely for validating the URI before proceeding
+            final URI uri = new URI(url);
         } catch (URISyntaxException e) {
-            MoPubLog.d("Invalid MRAID URL: " + url);
+            MoPubLog.log(CUSTOM, "Invalid MRAID URL: " + url);
             fireErrorEvent(MraidJavascriptCommand.UNSPECIFIED, "Mraid command sent an invalid URL");
             return true;
         }
 
+        Uri uri = Uri.parse(url);
+
         // Note that scheme will be null when we are passed a relative Uri
         String scheme = uri.getScheme();
         String host = uri.getHost();
@@ -364,43 +351,31 @@ boolean handleShouldOverrideUrl(@NonNull final String url) {
             return true;
         }
 
-        if ("mraid".equals(scheme)) {
-            Map<String, String> params = new HashMap<String, String>();
-            for (NameValuePair pair : URLEncodedUtils.parse(uri, "UTF-8")) {
-                params.put(pair.getName(), pair.getValue());
+        // This block converts all other URLs, including sms://, tel:// into MRAID URL. It checks for
+        // 'clicked' in order to avoid interfering with automatic browser redirects.
+        if (isClicked() && !"mraid".equals(scheme)) {
+            try {
+                uri = Uri.parse(MRAID_OPEN + URLEncoder.encode(url, "UTF-8"));
+                host = uri.getHost();
+                scheme = uri.getScheme();
+            } catch (UnsupportedEncodingException e) {
+                MoPubLog.log(CUSTOM, "Invalid MRAID URL encoding: " + url);
+                fireErrorEvent(MraidJavascriptCommand.OPEN, "Non-mraid URL is invalid");
+                return false;
             }
+        }
+
+        if ("mraid".equals(scheme)) {
             MraidJavascriptCommand command = MraidJavascriptCommand.fromJavascriptString(host);
             try {
-                runCommand(command, params);
-            } catch (MraidCommandException exception) {
+                runCommand(command, getQueryParamMap(uri));
+            } catch (MraidCommandException | IllegalArgumentException exception) {
                 fireErrorEvent(command, exception.getMessage());
             }
             fireNativeCommandCompleteEvent(command);
             return true;
         }
 
-        // This block handles all other URLs, including sms://, tel://,
-        // clicking a hyperlink, or setting window.location directly in Javascript. It checks for
-        // clicked in order to avoid interfering with automatically browser redirects.
-        if (mIsClicked) {
-            Intent intent = new Intent();
-            intent.setAction(Intent.ACTION_VIEW);
-            intent.setData(Uri.parse(url));
-            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-
-            try {
-                if (mMraidWebView == null) {
-                    MoPubLog.d("WebView was detached. Unable to load a URL");
-                    return true;
-                }
-                mMraidWebView.getContext().startActivity(intent);
-                return true;
-            } catch (ActivityNotFoundException e) {
-                MoPubLog.d("No activity found to handle this URL " + url);
-                return false;
-            }
-        }
-
         return false;
     }
 
@@ -424,7 +399,7 @@ private void handlePageFinished() {
     void runCommand(@NonNull final MraidJavascriptCommand command,
             @NonNull Map<String, String> params)
             throws MraidCommandException {
-        if (command.requiresClick(mPlacementType) && !mIsClicked) {
+        if (command.requiresClick(mPlacementType) && !isClicked()) {
             throw new MraidCommandException("Cannot execute this command unless the user clicks");
         }
 
@@ -644,7 +619,8 @@ void notifyReady() {
     }
 
     boolean isClicked() {
-        return mIsClicked;
+        final ViewGestureDetector gDetector = mGestureDetector;
+        return gDetector != null && gDetector.isClicked();
     }
 
     boolean isViewable() {
@@ -667,6 +643,9 @@ MraidWebView getMraidWebView() {
 
     @VisibleForTesting
     void setClicked(boolean clicked) {
-        mIsClicked = clicked;
+        final ViewGestureDetector gDetector = mGestureDetector;
+        if (gDetector != null) {
+            gDetector.setClicked(clicked);
+        }
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidCommandException.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidCommandException.java
index 53cb3a76..c7d8f8d5 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidCommandException.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidCommandException.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
index 0c3e9e99..636ec4c5 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -41,8 +41,8 @@
 import com.mopub.common.util.DeviceUtils;
 import com.mopub.common.util.Dips;
 import com.mopub.common.util.Views;
+import com.mopub.mobileads.BaseWebView;
 import com.mopub.mobileads.MraidVideoPlayerActivity;
-import com.mopub.mobileads.WebViewCacheService;
 import com.mopub.mobileads.util.WebViews;
 import com.mopub.mraid.MraidBridge.MraidBridgeListener;
 import com.mopub.mraid.MraidBridge.MraidWebView;
@@ -52,6 +52,7 @@
 
 import static android.content.pm.ActivityInfo.CONFIG_ORIENTATION;
 import static android.content.pm.ActivityInfo.CONFIG_SCREEN_SIZE;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 import static com.mopub.common.util.Utils.bitMaskContainsFlag;
 
 public class MraidController {
@@ -61,6 +62,7 @@
         void onLoaded(View view);
         void onFailedToLoad();
         void onExpand();
+        void onResize(final boolean toOriginalSize);
         void onOpen();
         void onClose();
     }
@@ -78,7 +80,7 @@
      * While this field is never null, the reference could become null. This reference starts out
      * null if the passed-in context is not an activity.
      */
-    @NonNull private final WeakReference<Activity> mWeakActivity;
+    @NonNull private WeakReference<Activity> mWeakActivity;
     @NonNull private final Context mContext;
     @NonNull private final PlacementType mPlacementType;
 
@@ -125,7 +127,7 @@
 
     private final MraidNativeCommandHandler mMraidNativeCommandHandler;
 
-    private boolean mIsPaused;
+    private boolean mIsPaused = true;
 
     public MraidController(@NonNull Context context, @Nullable AdReport adReport,
             @NonNull PlacementType placementType) {
@@ -190,6 +192,9 @@ public boolean onTouch(View v, MotionEvent event) {
         @Override
         public void onPageLoaded() {
             handlePageLoad();
+            if (mMraidListener != null) {
+                mMraidListener.onLoaded(mDefaultAdContainer);
+            }
         }
 
         @Override
@@ -337,68 +342,54 @@ public void setDebugListener(@Nullable MraidWebViewDebugListener debugListener)
     }
 
     /**
-     * Gets an MraidWebView and fills it with data. In the case that the MraidWebView is retrieved
-     * from the cache, this also notifies that the ad has been loaded. If the broadcast identifier
-     * is null or there is a cache miss, a new MraidWebView is created and is filled with htmlData.
-     * @param broadcastIdentifier The unique identifier of an interstitial. This can be null,
-     *                            especially when there is no interstitial.
+     * Creates an MraidWebView and fills it with data.
+     *
      * @param htmlData            The HTML of the ad. This will only be loaded if a cached WebView
      *                            is not found.
      * @param listener            Optional listener that (if non-null) is notified when an
      *                            MraidWebView is loaded from the cache or created.
      */
-    public void fillContent(@Nullable final Long broadcastIdentifier,
-            @NonNull final String htmlData,
+    public void fillContent(@NonNull final String htmlData,
             @Nullable final MraidWebViewCacheListener listener) {
         Preconditions.checkNotNull(htmlData, "htmlData cannot be null");
 
-        final boolean cacheHit = hydrateMraidWebView(broadcastIdentifier, listener);
-        Preconditions.NoThrow.checkNotNull(mMraidWebView, "mMraidWebView cannot be null");
+        mMraidWebView = new MraidWebView(mContext);
+        mMraidWebView.enablePlugins(true);
 
+        if (listener != null) {
+            listener.onReady(mMraidWebView,null);
+        }
         mMraidBridge.attachView(mMraidWebView);
         mDefaultAdContainer.addView(mMraidWebView,
                 new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
 
-        // If the WebView was retrieved from the cache, notify that the ad is already loaded.
-        if (cacheHit) {
-            handlePageLoad();
-        } else {
-            // Otherwise, load the content into the MraidWebView
-            mMraidBridge.setContentHtml(htmlData);
-        }
+        mMraidBridge.setContentHtml(htmlData);
+    }
+
+    public void onPreloadFinished(@NonNull final BaseWebView baseWebView) {
+        mMraidWebView = (MraidWebView) baseWebView;
+        mMraidWebView.enablePlugins(true);
+        mMraidBridge.attachView(mMraidWebView);
+        mDefaultAdContainer.addView(mMraidWebView,
+                new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+        handlePageLoad();
     }
 
     /**
-     * Gets and sets the MraidWebView. Returns true if the MraidWebView was from the cache, and
-     * false if a new one was created. If the broadcast identifier is {@code null}, then this
-     * will always return false and create a new MraidWebView.
+     * Updates the activity and calls any onShow() callbacks when an ad is showing.
      *
-     * @param broadcastIdentifier The unique identifier associated with the MraidWebView in the cache.
-     * @param listener            Listener passed in from {@link #fillContent(Long, String, MraidWebViewCacheListener)}
-     * @return {@code true} if there was a cache hit, {@code false} if a new MraidWebView was created.
+     * @param activity The new activity associated with this mraid controller
      */
-    private boolean hydrateMraidWebView(@Nullable final Long broadcastIdentifier,
-            @Nullable final MraidWebViewCacheListener listener) {
-        if (broadcastIdentifier != null) {
-            final WebViewCacheService.Config config =
-                    WebViewCacheService.popWebViewConfig(broadcastIdentifier);
-            if (config != null && config.getWebView() instanceof MraidWebView) {
-                mMraidWebView = (MraidWebView) config.getWebView();
-                mMraidWebView.enablePlugins(true);
-
-                if (listener != null) {
-                    listener.onReady(mMraidWebView, config.getViewabilityManager());
-                }
-                return true;
-            }
+    public void onShow(@NonNull final Activity activity) {
+        mWeakActivity = new WeakReference<>(activity);
+        if (mOnCloseButtonListener != null) {
+            mOnCloseButtonListener.useCustomCloseChanged(isUsingCustomClose());
         }
-        MoPubLog.d("WebView cache miss. Creating a new MraidWebView.");
-        mMraidWebView = new MraidWebView(mContext);
-
-        if (listener != null) {
-            listener.onReady(mMraidWebView, null);
+        try {
+            applyOrientation();
+        } catch (MraidCommandException e) {
+            MoPubLog.d("Failed to apply orientation.");
         }
-        return false;
     }
 
     // onPageLoaded gets fired once the html is loaded into the webView.
@@ -505,11 +496,20 @@ public MraidWebView getCurrentWebView() {
         return mTwoPartBridge.isAttached() ? mTwoPartWebView : mMraidWebView;
     }
 
-    private boolean isInlineVideoAvailable() {
+    /**
+     * Checks that the hardware acceleration is enabled.
+     *
+     * Will always return true for PlacementType.INTERSTITIAL since those activities will always
+     * force hardware acceleration when created.
+     */
+    @VisibleForTesting
+    boolean isInlineVideoAvailable() {
         final Activity activity = mWeakActivity.get();
         //noinspection SimplifiableIfStatement
         if (activity == null || getCurrentWebView() == null) {
             return false;
+        } else if (mPlacementType != PlacementType.INLINE) {
+            return true;
         }
 
         return mMraidNativeCommandHandler.isInlineVideoAvailable(activity, getCurrentWebView());
@@ -517,25 +517,17 @@ private boolean isInlineVideoAvailable() {
 
     @VisibleForTesting
     void handlePageLoad() {
-        setViewState(ViewState.DEFAULT, new Runnable() {
-            @Override
-            public void run() {
-                mMraidBridge.notifySupports(
-                        mMraidNativeCommandHandler.isSmsAvailable(mContext),
-                        mMraidNativeCommandHandler.isTelAvailable(mContext),
-                        MraidNativeCommandHandler.isCalendarAvailable(mContext),
-                        MraidNativeCommandHandler.isStorePictureSupported(mContext),
-                        isInlineVideoAvailable());
-                mMraidBridge.notifyPlacementType(mPlacementType);
-                mMraidBridge.notifyViewability(mMraidBridge.isViewable());
-                mMraidBridge.notifyReady();
-            }
-        });
-
-        // Call onLoaded immediately. This causes the container to get added to the view hierarchy
-        if (mMraidListener != null) {
-            mMraidListener.onLoaded(mDefaultAdContainer);
-        }
+        mMraidBridge.notifySupports(
+                mMraidNativeCommandHandler.isSmsAvailable(mContext),
+                mMraidNativeCommandHandler.isTelAvailable(mContext),
+                MraidNativeCommandHandler.isCalendarAvailable(mContext),
+                MraidNativeCommandHandler.isStorePictureSupported(mContext),
+                isInlineVideoAvailable());
+        mMraidBridge.notifyPlacementType(mPlacementType);
+        mMraidBridge.notifyViewability(mMraidBridge.isViewable());
+        mMraidBridge.notifyScreenMetrics(mScreenMetrics);
+        setViewState(ViewState.DEFAULT);
+        mMraidBridge.notifyReady();
     }
 
     @VisibleForTesting
@@ -660,6 +652,7 @@ public void destroy() {
         // Calling destroy eliminates a memory leak on Gingerbread devices
         detachMraidWebView();
         detachTwoParWebView();
+        unApplyOrientation();
     }
 
     private void detachMraidWebView() {
@@ -673,12 +666,8 @@ private void detachTwoParWebView() {
     }
 
     private void setViewState(@NonNull ViewState viewState) {
-        setViewState(viewState, null);
-    }
-
-    private void setViewState(@NonNull ViewState viewState, @Nullable Runnable successRunnable) {
         // Make sure this is a valid transition.
-        MoPubLog.d("MRAID state set to " + viewState);
+        MoPubLog.log(CUSTOM, "MRAID state set to " + viewState);
         final ViewState previousViewState = mViewState;
         mViewState = viewState;
         mMraidBridge.notifyViewState(viewState);
@@ -689,16 +678,30 @@ private void setViewState(@NonNull ViewState viewState, @Nullable Runnable succe
         }
 
         if (mMraidListener != null) {
-            if (viewState == ViewState.EXPANDED) {
-                mMraidListener.onExpand();
-            } else if (previousViewState == ViewState.EXPANDED && viewState == ViewState.DEFAULT) {
-                mMraidListener.onClose();
-            } else if (viewState == ViewState.HIDDEN) {
-                mMraidListener.onClose();
-            }
+            callMraidListenerCallbacks(mMraidListener, previousViewState, viewState);
         }
 
-        updateScreenMetricsAsync(successRunnable);
+        updateScreenMetricsAsync(null);
+    }
+
+    @VisibleForTesting
+    static void callMraidListenerCallbacks(@NonNull final MraidListener mraidListener,
+            @NonNull final ViewState previousViewState, @NonNull final ViewState currentViewState) {
+        Preconditions.checkNotNull(mraidListener);
+        Preconditions.checkNotNull(previousViewState);
+        Preconditions.checkNotNull(currentViewState);
+
+        if (currentViewState == ViewState.EXPANDED) {
+            mraidListener.onExpand();
+        } else if (previousViewState == ViewState.EXPANDED && currentViewState == ViewState.DEFAULT) {
+            mraidListener.onClose();
+        } else if (currentViewState == ViewState.HIDDEN) {
+            mraidListener.onClose();
+        } else if (previousViewState == ViewState.RESIZED && currentViewState == ViewState.DEFAULT) {
+            mraidListener.onResize(true);
+        } else if (currentViewState == ViewState.RESIZED) {
+            mraidListener.onResize(false);
+        }
     }
 
     int clampInt(int min, int target, int max) {
@@ -1015,7 +1018,7 @@ boolean shouldAllowForceOrientation(final MraidOrientation newOrientation) {
 
     @VisibleForTesting
     protected void handleCustomClose(boolean useCustomClose) {
-        boolean wasUsingCustomClose = !mCloseableAdContainer.isCloseVisible();
+        boolean wasUsingCustomClose = isUsingCustomClose();
         if (useCustomClose == wasUsingCustomClose) {
             return;
         }
@@ -1026,6 +1029,10 @@ protected void handleCustomClose(boolean useCustomClose) {
         }
     }
 
+    private boolean isUsingCustomClose() {
+        return !mCloseableAdContainer.isCloseVisible();
+    }
+
     @NonNull
     public FrameLayout getAdContainer() {
         return mDefaultAdContainer;
@@ -1099,7 +1106,8 @@ void handleSetOrientationProperties(final boolean allowOrientationChange,
         mAllowOrientationChange = allowOrientationChange;
         mForceOrientation = forceOrientation;
 
-        if (mViewState == ViewState.EXPANDED || mPlacementType == PlacementType.INTERSTITIAL) {
+        if (mViewState == ViewState.EXPANDED ||
+                (mPlacementType == PlacementType.INTERSTITIAL && !mIsPaused)) {
             applyOrientation();
         }
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidJavascriptCommand.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidJavascriptCommand.java
index cc7c00a7..fd2bca18 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidJavascriptCommand.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidJavascriptCommand.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java
index 9904045c..ac033548 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -51,6 +51,7 @@
 
 import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
 import static android.os.Environment.MEDIA_MOUNTED;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 import static com.mopub.common.util.ResponseHeader.LOCATION;
 
 public class MraidNativeCommandHandler {
@@ -85,18 +86,18 @@ void createCalendarEvent(final Context context, final Map<String, String> params
                 intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                 context.startActivity(intent);
             } catch (ActivityNotFoundException e) {
-                MoPubLog.d("no calendar app installed");
+                MoPubLog.log(CUSTOM, "no calendar app installed");
                 throw new MraidCommandException(
                         "Action is unsupported on this device - no calendar app installed");
             } catch (IllegalArgumentException e) {
-                MoPubLog.d("create calendar: invalid parameters " + e.getMessage());
+                MoPubLog.log(CUSTOM, "create calendar: invalid parameters " + e.getMessage());
                 throw new MraidCommandException(e);
             } catch (Exception e) {
-                MoPubLog.d("could not create calendar event");
+                MoPubLog.log(CUSTOM, "could not create calendar event");
                 throw new MraidCommandException(e);
             }
         } else {
-            MoPubLog.d("unsupported action createCalendarEvent for devices pre-ICS");
+            MoPubLog.log(CUSTOM, "unsupported action createCalendarEvent for devices pre-ICS");
             throw new MraidCommandException("Action is " +
                     "unsupported on this device (need Android version Ice Cream Sandwich or " +
                     "above)");
@@ -107,7 +108,7 @@ void storePicture(@NonNull final Context context,
             @NonNull final String imageUrl,
             @NonNull MraidCommandFailureListener failureListener) throws MraidCommandException {
         if (!isStorePictureSupported(context)) {
-            MoPubLog.d("Error downloading file - the device does not have an SD card mounted, or " +
+            MoPubLog.log(CUSTOM, "Error downloading file - the device does not have an SD card mounted, or " +
                     "the Android permission is not granted.");
             throw new MraidCommandException("Error downloading file " +
                     " - the device does not have an SD card mounted, " +
@@ -148,54 +149,22 @@ static boolean isCalendarAvailable(Context context) {
     }
 
     /**
-     * Inline video support was added in 3.1. Returns true if the activity has hardware acceleration
-     * enabled in its foreground window and only if the View or any ParentView in the view tree
-     * has not had hardware acceleration explicitly turned off.
+     * Inline video support was added in 3.1.
+     *
+     * Checks that the hardware acceleration flag is set for banners.
+     *
+     * Returns true if the current window has hardware acceleration enabled.
+     *
+     * Note: We don't check the view for hardware acceleration because that is done by MraidController.
      */
     boolean isInlineVideoAvailable(@NonNull Activity activity, @NonNull View view) {
-
-        // Hardware Acceleration
-        // Hardware acceleration for the application and activity is enabled by default
-        // in API >= 14 (Ice Cream Sandwich)
-        // https://developer.android.com/reference/android/R.attr.html#hardwareAccelerated
-        // https://developer.android.com/guide/topics/graphics/hardware-accel.html
-
-        // HTML5 Inline Video
-        // https://developer.android.com/about/versions/android-3.1.html
-
-        // Traverse up the View tree to determine if any views are being software rendered
-        // You can only disable hardware acceleration at the view level by setting the layer type
-        View tempView = view;
-        while (true) {
-            // View#isHardwareAccelerated does not reflect the layer type used to render the view
-            // therefore we have to check for both
-            if (!tempView.isHardwareAccelerated()
-                    || Utils.bitMaskContainsFlag(tempView.getLayerType(), View.LAYER_TYPE_SOFTWARE)) {
-                return false;
-            }
-
-            // If parent is not a view or parent is null then break
-            if (!(tempView.getParent() instanceof View)) {
-                break;
-            }
-
-            tempView = (View)tempView.getParent();
+        if (activity.getWindow() == null) {
+            return false;
         }
 
-        // Has hardware acceleration been enabled in the current window?
-        // Hardware acceleration can only be enabled for a window, not disabled
-        // This flag is automatically set by the system if the android:hardwareAccelerated
-        // XML attribute is set to true on an activity or on the application.
-        // https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_HARDWARE_ACCELERATED
-        Window window = activity.getWindow();
-        if (window != null) {
-            if (Utils.bitMaskContainsFlag(window.getAttributes().flags,
-                    WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED)) {
-                return true;
-            }
-        }
+        final int flags = activity.getWindow().getAttributes().flags;
 
-        return false;
+        return (flags & WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED) != 0;
     }
 
     private Map<String, Object> translateJSParamsToAndroidCalendarEventMapping(Map<String, String> params) {
@@ -393,13 +362,13 @@ void downloadImage(final Context context, final String uriString,
                 new DownloadImageAsyncTask.DownloadImageAsyncTaskListener() {
                     @Override
                     public void onSuccess() {
-                        MoPubLog.d("Image successfully saved.");
+                        MoPubLog.log(CUSTOM, "Image successfully saved.");
                     }
 
                     @Override
                     public void onFailure() {
                         Toast.makeText(context, "Image failed to download.", Toast.LENGTH_SHORT).show();
-                        MoPubLog.d("Error downloading and saving image file.");
+                        MoPubLog.log(CUSTOM, "Error downloading and saving image file.");
                         failureListener.onFailure(new MraidCommandException("Error " +
                                 "downloading and saving image file."));
                     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidOrientation.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidOrientation.java
index 40175e6f..2d1d925e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidOrientation.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidOrientation.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidScreenMetrics.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidScreenMetrics.java
index 7b1fb9ea..11145afb 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidScreenMetrics.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidScreenMetrics.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidVideoViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidVideoViewController.java
index 39489f51..1d2f4265 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidVideoViewController.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewClient.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewClient.java
index d256df5b..9afc001f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewClient.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewClient.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewDebugListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewDebugListener.java
index 5269c6bb..14e802be 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewDebugListener.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewDebugListener.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/PlacementType.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/PlacementType.java
index b1b24a87..4573c5d7 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/PlacementType.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/PlacementType.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/ViewState.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/ViewState.java
index 85fcd5c3..862a8282 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/ViewState.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/ViewState.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdLoader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdLoader.java
index 3a88f258..5c58894c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdLoader.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdLoader.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -22,6 +22,10 @@
 
 import java.lang.ref.WeakReference;
 
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.REQUESTED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.RESPONSE_RECEIVED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.CUSTOM;
+
 /**
  * AdLoader implements several simple functions: communicate with Volley to download multiple ads
  * in one HTTP call, implement client side waterfall logic, asynchronously return objects
@@ -80,6 +84,8 @@ public AdLoader(@NonNull final String url,
         mAdListener = new MultiAdRequest.Listener() {
             @Override
             public void onErrorResponse(VolleyError volleyError) {
+                MoPubLog.log(RESPONSE_RECEIVED, volleyError.getMessage());
+
                 mFailed = true;
                 mRunning = false;
                 deliverError(volleyError);
@@ -137,6 +143,7 @@ public boolean hasMoreAds() {
         if (mRunning) {
             return mMultiAdRequest;
         }
+
         if (mFailed) {
             // call back using handler to make sure it is always async.
             mHandler.post(new Runnable() {
@@ -149,9 +156,22 @@ public void run() {
         }
 
         synchronized (lock) {
+
             // not running and not failed: start it for the first time
             if (mMultiAdResponse == null) {
-                return fetchAd(mMultiAdRequest, mContext.get());
+                if (RequestRateTracker.getInstance().isBlockedByRateLimit(mMultiAdRequest.mAdUnitId)) {
+                    // report no fill
+                    MoPubLog.log(MoPubLog.SdkLogEvent.CUSTOM, mMultiAdRequest.mAdUnitId + " is blocked by request rate limiting.");
+                    mHandler.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            deliverError(new MoPubNetworkError(MoPubNetworkError.Reason.NO_FILL));
+                        }
+                    });
+                    return null;
+                } else {
+                    return fetchAd(mMultiAdRequest, mContext.get()); // first request
+                }
             }
 
             // report creative download error to the server
@@ -203,13 +223,13 @@ public void creativeDownloadSuccess() {
         mContentDownloaded = true;
 
         if (null == mDownloadTracker) {
-            MoPubLog.e("Response analytics should not be null here");
+            MoPubLog.log(CUSTOM, "Response analytics should not be null here");
             return;
         }
 
         Context context = mContext.get();
         if (null == context || null == mLastDeliveredResponse) {
-            MoPubLog.w("Cannot send 'x-after-load-url' analytics.");
+            MoPubLog.log(CUSTOM, "Cannot send 'x-after-load-url' analytics.");
             return;
         }
 
@@ -219,13 +239,13 @@ public void creativeDownloadSuccess() {
 
     private void creativeDownloadFailed(@Nullable final MoPubError errorCode) {
         if (null == errorCode) {
-            MoPubLog.w("Must provide error code to report creative download error");
+            MoPubLog.log(CUSTOM, "Must provide error code to report creative download error");
             return;
         }
 
         Context context = mContext.get();
         if (null == context || null == mLastDeliveredResponse) {
-            MoPubLog.w("Cannot send creative mFailed analytics.");
+            MoPubLog.log(CUSTOM, "Cannot send creative mFailed analytics.");
             return;
         }
 
@@ -251,6 +271,12 @@ private void creativeDownloadFailed(@Nullable final MoPubError errorCode) {
             return null;
         }
 
+        String bodyString = "<no body>";
+        if (request.getBody() != null) {
+            bodyString = new String(request.getBody());
+        }
+        MoPubLog.log(REQUESTED, request.getUrl(), bodyString);
+
         mRunning = true;
         RequestQueue requestQueue = Networking.getRequestQueue(context);
         mMultiAdRequest = request;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
index 63f52445..0444fa3c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/BackoffPolicy.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/BackoffPolicy.java
index 1ab20047..8f4ddab9 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/BackoffPolicy.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/BackoffPolicy.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ContentDownloadAnalytics.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ContentDownloadAnalytics.java
index b8d81aa1..1ca31c11 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ContentDownloadAnalytics.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ContentDownloadAnalytics.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
index 189489c7..1ffbd69b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -11,6 +11,7 @@
 
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
+
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Reflection;
 
@@ -26,6 +27,8 @@
 import javax.net.ssl.SSLSocket;
 import javax.net.ssl.SSLSocketFactory;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 /**
  * An {@link javax.net.ssl.SSLSocketFactory} that supports TLS settings for the MoPub ad servers.
  */
@@ -187,7 +190,7 @@ static void setHostnameOnSocket(@NonNull final SSLCertificateSocketFactory certi
                         .addParam(String.class, host)
                         .execute();
             } catch (Exception e) {
-                MoPubLog.d("Unable to call setHostname() on the socket");
+                MoPubLog.log(CUSTOM, "Unable to call setHostname() on the socket");
             }
         }
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java
index c77b0943..aa46dafa 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -20,6 +20,8 @@
 import java.util.List;
 import java.util.Locale;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 public class HeaderUtils {
 
     @NonNull
@@ -64,7 +66,7 @@ public static Integer extractPercentHeader(JSONObject headers, ResponseHeader re
             try {
                 stringArray.add(jsonArray.getString(i));
             } catch (JSONException e) {
-                MoPubLog.d("Unable to parse item " + i + " from " + responseHeader.getKey());
+                MoPubLog.log(CUSTOM, "Unable to parse item " + i + " from " + responseHeader.getKey());
             }
         }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/InetAddressUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/InetAddressUtils.java
index 7d30ca54..27d0fa24 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/InetAddressUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/InetAddressUtils.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MaxWidthImageLoader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MaxWidthImageLoader.java
index b4be1c7f..2f4ae159 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MaxWidthImageLoader.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MaxWidthImageLoader.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubNetworkError.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubNetworkError.java
index a9c6c3c0..c0463a56 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubNetworkError.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubNetworkError.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequest.java
index 9d64641f..a3cddc69 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestQueue.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestQueue.java
index 7f5d137e..f6057465 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestQueue.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestQueue.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestUtils.java
index 7d9d64d6..a3b15d56 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestUtils.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -22,6 +22,8 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 /**
  * Keeps utility methods regarding MoPubRequests in one place.
  */
@@ -64,9 +66,16 @@ public static int chooseMethod(String url) {
         Preconditions.checkNotNull(context);
         Preconditions.checkNotNull(url);
 
-        final Map<String, String> params = new HashMap<>();
         HurlStack.UrlRewriter rewriter = Networking.getUrlRewriter(context);
         final Uri uri = Uri.parse(rewriter.rewriteUrl(url));
+        return getQueryParamMap(uri);
+    }
+
+    @NonNull
+    public static Map<String, String> getQueryParamMap(@NonNull final Uri uri) {
+        Preconditions.checkNotNull(uri);
+
+        final Map<String, String> params = new HashMap<>();
         for (final String queryParam : uri.getQueryParameterNames()) {
             params.put(queryParam, TextUtils.join(",", uri.getQueryParameters(queryParam)));
         }
@@ -88,7 +97,7 @@ public static String generateBodyFromParams(@Nullable final Map<String, String>
             try {
                 jsonBody.put(queryName, params.get(queryName));
             } catch (JSONException e) {
-                MoPubLog.d("Unable to add " + queryName + " to JSON body.");
+                MoPubLog.log(CUSTOM, "Unable to add " + queryName + " to JSON body.");
             }
         }
         return jsonBody.toString();
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MultiAdRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MultiAdRequest.java
index 7c11c9fb..98ac7bef 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MultiAdRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MultiAdRequest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -19,6 +19,8 @@
 import com.mopub.volley.Response;
 import com.mopub.volley.toolbox.HttpHeaderParser;
 
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.CUSTOM;
+
 /**
  * Volley request class helper to support ad requests specifics
  */
@@ -77,7 +79,7 @@
     @NonNull
     private static String clearUrlIfSdkNotInitialized(@NonNull final String url) {
         if (MoPub.getPersonalInformationManager() == null || !MoPub.isSdkInitialized()) {
-            MoPubLog.e("Make sure to call MoPub#initializeSdk before loading an ad.");
+            MoPubLog.log(CUSTOM, "Make sure to call MoPub#initializeSdk before loading an ad.");
             return "";
         }
         return url;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MultiAdResponse.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MultiAdResponse.java
index 1aeac7a7..73d7e797 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MultiAdResponse.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MultiAdResponse.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -42,6 +42,8 @@
 import java.util.TreeMap;
 
 import static com.mopub.common.DataKeys.ADM_KEY;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.RESPONSE_RECEIVED;
 import static com.mopub.network.HeaderUtils.extractBooleanHeader;
 import static com.mopub.network.HeaderUtils.extractHeader;
 import static com.mopub.network.HeaderUtils.extractIntegerHeader;
@@ -94,6 +96,10 @@ public MultiAdResponse(@NonNull final Context appContext,
         mFailUrl = jsonObject.optString(ResponseHeader.FAIL_URL.getKey());
         String requestId = jsonObject.optString(ResponseHeader.REQUEST_ID.getKey());
 
+        final Integer backoffMs = extractIntegerHeader(jsonObject, ResponseHeader.BACKOFF_MS);
+        final String backoffReason = extractHeader(jsonObject, ResponseHeader.BACKOFF_REASON);
+        RequestRateTracker.getInstance().registerRateLimit(adUnitId, backoffMs, backoffReason);
+
         final boolean invalidateConsent = extractBooleanHeader(jsonObject,
                 ResponseHeader.INVALIDATE_CONSENT, false);
         final boolean forceExplicitNo = extractBooleanHeader(jsonObject,
@@ -117,6 +123,13 @@ public MultiAdResponse(@NonNull final Context appContext,
             }
         }
 
+        final boolean enableDebugLogging = extractBooleanHeader(jsonObject,
+                ResponseHeader.ENABLE_DEBUG_LOGGING, false);
+
+        if (enableDebugLogging) {
+            MoPubLog.setLogLevel(MoPubLog.LogLevel.DEBUG);
+        }
+
         JSONArray adResponses = jsonObject.getJSONArray(ResponseHeader.AD_RESPONSES.getKey());
         int ADS_PER_RESPONSE = 3;
         List<AdResponse> list = new ArrayList<>(ADS_PER_RESPONSE);
@@ -142,14 +155,14 @@ public MultiAdResponse(@NonNull final Context appContext,
 
             } catch (JSONException ex) {
                 // don't break everything because of single item parsing error
-                MoPubLog.w("Invalid response item. Body: " + responseBody);
+                MoPubLog.log(CUSTOM, "Invalid response item. Body: " + responseBody);
             } catch (MoPubNetworkError ex) {
                 if (ex.getReason() == MoPubNetworkError.Reason.WARMING_UP) {
                     throw ex;
                 }
-                MoPubLog.w("Invalid response item. Error: " + ex.getReason());
+                MoPubLog.log(CUSTOM, "Invalid response item. Error: " + ex.getReason());
             } catch (Exception ex) {
-                MoPubLog.w("Unexpected error parsing response item. " + ex.getMessage());
+                MoPubLog.log(CUSTOM, "Unexpected error parsing response item. " + ex.getMessage());
             }
         }
         mResponseIterator = list.iterator();
@@ -257,6 +270,8 @@ protected static AdResponse parseSingleAdResponse(@NonNull final Context appCont
         Preconditions.checkNotNull(jsonObject);
         Preconditions.checkNotNull(adFormat);
 
+        MoPubLog.log(RESPONSE_RECEIVED, jsonObject.toString());
+
         final AdResponse.Builder builder = new AdResponse.Builder();
         final String content = jsonObject.optString(ResponseHeader.CONTENT.getKey());
         final JSONObject jsonHeaders = jsonObject.getJSONObject(ResponseHeader.METADATA.getKey());
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
index f18d570e..a14bacc6 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -11,12 +11,14 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.v4.util.LruCache;
+import android.text.TextUtils;
 import android.webkit.WebSettings;
 import android.webkit.WebView;
 
 import com.mopub.common.Constants;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.DeviceUtils;
 import com.mopub.volley.Cache;
 import com.mopub.volley.Network;
@@ -31,10 +33,22 @@
 
 import javax.net.ssl.SSLSocketFactory;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 public class Networking {
     @VisibleForTesting
     static final String CACHE_DIRECTORY_NAME = "mopub-volley-cache";
-    private static final String DEFAULT_USER_AGENT = System.getProperty("http.agent");
+    @NonNull private static final String DEFAULT_USER_AGENT;
+
+    static {
+        String userAgent = "";
+        try {
+            userAgent = System.getProperty("http.agent", "");
+        } catch (SecurityException e) {
+            MoPubLog.log(CUSTOM, "Unable to get system user agent.");
+        }
+        DEFAULT_USER_AGENT = userAgent;
+    }
 
     // These are volatile so that double-checked locking works.
     // See https://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java
@@ -139,31 +153,34 @@ public void putBitmap(final String key, final Bitmap bitmap) {
     public static String getUserAgent(@NonNull Context context) {
         Preconditions.checkNotNull(context);
 
-        String userAgent = sUserAgent;
-        if (userAgent == null) {
-            synchronized (Networking.class) {
-                userAgent = sUserAgent;
-                if (userAgent == null) {
-                    try {
-                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
-                            userAgent = WebSettings.getDefaultUserAgent(context);
-                        } else if (Looper.myLooper() == Looper.getMainLooper()) {
-                            // WebViews may only be instantiated on the UI thread. If anything goes
-                            // wrong with getting a user agent, use the system-specific user agent.
-                            userAgent = new WebView(context).getSettings().getUserAgentString();
-                        } else {
-                            userAgent = DEFAULT_USER_AGENT;
-                        }
-                    } catch (Exception e) {
-                        // Some custom ROMs may fail to get a user agent. If that happens, return
-                        // the Android system user agent.
-                        userAgent = DEFAULT_USER_AGENT;
-                    }
-                    sUserAgent = userAgent;
-                }
-            }
+        final String volatileUserAgentCopy = sUserAgent;
+        if (!TextUtils.isEmpty(volatileUserAgentCopy)) {
+            return volatileUserAgentCopy;
+        }
+
+        // WebViews may only be instantiated on the UI thread. If anything goes
+        // wrong with getting a user agent, use the system-specific user agent.
+        if (Looper.myLooper() != Looper.getMainLooper()) {
+            // Since we are not on the main thread, return the default user agent
+            // for now. Defer to when this is run on the main thread to actually
+            // set the user agent.
+            return DEFAULT_USER_AGENT;
         }
 
+        // Some custom ROMs may fail to get a user agent. If that happens, return
+        // the Android system user agent.
+        String userAgent = DEFAULT_USER_AGENT;
+        try {
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+                userAgent = WebSettings.getDefaultUserAgent(context);
+            } else {
+                userAgent = new WebView(context).getSettings().getUserAgentString();
+            }
+        } catch (Exception e) {
+            MoPubLog.log(CUSTOM,
+                    "Failed to get a user agent. Defaulting to the system user agent.");
+        }
+        sUserAgent = userAgent;
         return userAgent;
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/PlayServicesUrlRewriter.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/PlayServicesUrlRewriter.java
index 5cbe321d..56d27487 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/PlayServicesUrlRewriter.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/PlayServicesUrlRewriter.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestManager.java
index 3f8aa67a..7d67cbe6 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -14,6 +14,8 @@
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.volley.Request;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 /**
  * This class is responsible for managing the lifecycle of a request with a backoff policy. This
  * class currently manages a single request at a time. The API allows for it to support multiple
@@ -81,7 +83,7 @@ void makeRequestInternal() {
         mCurrentRequest = createRequest();
         MoPubRequestQueue requestQueue = Networking.getRequestQueue();
         if (requestQueue == null) {
-            MoPubLog.d("MoPubRequest queue is null. Clearing request.");
+            MoPubLog.log(CUSTOM, "MoPubRequest queue is null. Clearing request.");
             clearRequest();
             return;
         }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestQueueHttpStack.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestQueueHttpStack.java
index 8d63b868..1e9a39c0 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestQueueHttpStack.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestQueueHttpStack.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestRateTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestRateTracker.java
new file mode 100644
index 00000000..792516ce
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestRateTracker.java
@@ -0,0 +1,96 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.network;
+
+import android.os.SystemClock;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.VisibleForTesting;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Singleton to cache ad request rate limit time interval and reason.
+ */
+public class RequestRateTracker {
+
+    public static class TimeRecord {
+        final long mBlockStartTime;
+        public final int mBlockIntervalMs;
+        @NonNull
+        public final String mReason;
+
+        TimeRecord(int interval, @Nullable final String reason) {
+            mBlockStartTime = currentTimeMs();
+            mBlockIntervalMs = interval;
+            mReason = reason == null ? "unknown" : reason;
+        }
+
+        long getTargetTime() {
+            return mBlockStartTime + mBlockIntervalMs;
+        }
+    }
+
+    @NonNull
+    private Map<String, TimeRecord> mTimeRecordMap;
+
+    private static class Helper {
+        @NonNull
+        private static RequestRateTracker sInstance = new RequestRateTracker();
+    }
+
+    RequestRateTracker() {
+        mTimeRecordMap = Collections.synchronizedMap(new HashMap<String, TimeRecord>());
+    }
+
+    @NonNull
+    public static RequestRateTracker getInstance() {
+        return Helper.sInstance;
+    }
+
+    void registerRateLimit(@Nullable final String adUnit, @Nullable final Integer blockIntervalMs, @Nullable final String reason) {
+        if (TextUtils.isEmpty(adUnit)) {
+            return;
+        }
+
+        if (blockIntervalMs != null && blockIntervalMs > 0) {
+            mTimeRecordMap.put(adUnit, new TimeRecord(blockIntervalMs, reason));
+        } else {
+            mTimeRecordMap.remove(adUnit);
+        }
+    }
+
+    boolean isBlockedByRateLimit(@Nullable final String adUnitId) {
+        return getTimeUntilLimitEnds(adUnitId) > 0;
+    }
+
+    @Nullable
+    public TimeRecord getRecordForAdUnit(@Nullable final String adUnitId) {
+        return mTimeRecordMap.get(adUnitId);
+    }
+
+    private long getTimeUntilLimitEnds(@Nullable final String adUnitId) {
+        final TimeRecord record = mTimeRecordMap.get(adUnitId);
+        if (record == null) {
+            return 0;
+        }
+
+        return record.getTargetTime() - currentTimeMs();
+    }
+
+    private static long currentTimeMs() {
+        return SystemClock.elapsedRealtime();
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    static void setInstance(@NonNull RequestRateTracker mockInstance) {
+        Helper.sInstance = mockInstance;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
index 8fdf38e3..b52d3b3a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -25,6 +25,8 @@
 import java.util.Arrays;
 import java.util.List;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 public class TrackingRequest extends MoPubRequest<Void> {
 
     // Retrying may cause duplicate impressions
@@ -116,7 +118,7 @@ public static void makeTrackingHttpRequest(@Nullable final Iterable<String> urls
             final TrackingRequest.Listener internalListener = new TrackingRequest.Listener() {
                 @Override
                 public void onResponse(@NonNull String url) {
-                    MoPubLog.d("Successfully hit tracking endpoint: " + url);
+                    MoPubLog.log(CUSTOM, "Successfully hit tracking endpoint: " + url);
                     if (listener != null) {
                         listener.onResponse(url);
                     }
@@ -124,7 +126,7 @@ public void onResponse(@NonNull String url) {
 
                 @Override
                 public void onErrorResponse(final VolleyError volleyError) {
-                    MoPubLog.d("Failed to hit tracking endpoint: " + url);
+                    MoPubLog.log(CUSTOM, "Failed to hit tracking endpoint: " + url);
                     if (listener != null) {
                         listener.onErrorResponse(volleyError);
                     }
diff --git a/mopub-sdk/mopub-sdk-interstitial/build.gradle b/mopub-sdk/mopub-sdk-interstitial/build.gradle
index 50ad8b99..e77c299f 100644
--- a/mopub-sdk/mopub-sdk-interstitial/build.gradle
+++ b/mopub-sdk/mopub-sdk-interstitial/build.gradle
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
index 5de03279..a0caeb37 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -70,6 +70,11 @@ Long getBroadcastIdentifier() {
         return mBroadcastIdentifier;
     }
 
+    @Nullable
+    String getResponseString() {
+        return getResponseString(mAdReport);
+    }
+
     protected void showInterstitialCloseButton() {
         if (mCloseableLayout != null) {
             mCloseableLayout.setCloseVisible(true);
@@ -97,4 +102,9 @@ protected static AdReport getAdReportFromIntent(Intent intent) {
             return null;
         }
     }
+
+    @Nullable
+    static String getResponseString(AdReport adReport) {
+        return adReport != null ? adReport.getResponseString() : null;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
index fe34c8ab..be65c244 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
index a5270f5f..44a403c9 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -21,6 +21,9 @@
 
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
+
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM_WITH_THROWABLE;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_TIMEOUT;
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
@@ -52,17 +55,19 @@ public CustomEventInterstitialAdapter(@NonNull final MoPubInterstitial moPubInte
         mTimeout = new Runnable() {
             @Override
             public void run() {
-                MoPubLog.d("Third-party network timed out.");
+                MoPubLog.log(CUSTOM, "CustomEventInterstitialAdapter() failed with code " +
+                        NETWORK_TIMEOUT.getIntCode() + " and message " + NETWORK_TIMEOUT);
                 onInterstitialFailed(NETWORK_TIMEOUT);
                 invalidate();
             }
         };
 
-        MoPubLog.d("Attempting to invoke custom event: " + className);
+        MoPubLog.log(CUSTOM,  "Attempting to invoke custom event: " + className);
         try {
             mCustomEventInterstitial = CustomEventInterstitialFactory.create(className);
         } catch (Exception exception) {
-            MoPubLog.d("Couldn't locate or instantiate custom event: " + className + ".");
+            MoPubLog.log(CUSTOM_WITH_THROWABLE, "CustomEventInterstitialFactory.create() " +
+                    "failed with exception", exception);
             mMoPubInterstitial.onCustomEventInterstitialFailed(ADAPTER_NOT_FOUND);
             return;
         }
@@ -80,6 +85,7 @@ void loadInterstitial() {
         if (isInvalidated() || mCustomEventInterstitial == null) {
             return;
         }
+        MoPubLog.log(CUSTOM, "loadInterstitial()");
 
         mHandler.postDelayed(mTimeout, getTimeoutDelayMilliseconds());
 
@@ -88,7 +94,6 @@ void loadInterstitial() {
         try {
             mCustomEventInterstitial.loadInterstitial(mContext, this, mLocalExtras, mServerExtras);
         } catch (Exception e) {
-            MoPubLog.d("Loading a custom event interstitial threw an exception.", e);
             onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
         }
     }
@@ -97,13 +102,16 @@ void showInterstitial() {
         if (isInvalidated() || mCustomEventInterstitial == null) {
             return;
         }
+        MoPubLog.log(CUSTOM, "showInterstitial()");
 
         // Custom event classes can be developed by any third party and may not be tested.
         // We catch all exceptions here to prevent crashes from untested code.
         try {
             mCustomEventInterstitial.showInterstitial();
         } catch (Exception e) {
-            MoPubLog.d("Showing a custom event interstitial threw an exception.", e);
+            MoPubLog.log(CUSTOM, "showInterstitial() failed with code " +
+                    MoPubErrorCode.INTERNAL_ERROR.getIntCode() + " and message " +
+                    MoPubErrorCode.INTERNAL_ERROR);
             onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
         }
     }
@@ -116,7 +124,7 @@ void invalidate() {
             try {
                 mCustomEventInterstitial.onInvalidate();
             } catch (Exception e) {
-                MoPubLog.d("Invalidating a custom event interstitial threw an exception.", e);
+                MoPubLog.log(CUSTOM,  "Invalidating a custom event interstitial threw an exception.", e);
             }
         }
         mCustomEventInterstitial = null;
@@ -179,6 +187,8 @@ public void onInterstitialLoaded() {
             return;
         }
 
+        MoPubLog.log(CUSTOM, "onInterstitialLoaded()");
+
         cancelTimeout();
 
         if (mCustomEventInterstitialAdapterListener != null) {
@@ -192,10 +202,15 @@ public void onInterstitialFailed(MoPubErrorCode errorCode) {
             return;
         }
 
+        if (errorCode == null) {
+            errorCode = UNSPECIFIED;
+        }
+
+        MoPubLog.log(CUSTOM, "onInterstitialFailed() failed with code " +
+                errorCode.getIntCode() + " and message " +
+                errorCode);
+
         if (mCustomEventInterstitialAdapterListener != null) {
-            if (errorCode == null) {
-                errorCode = UNSPECIFIED;
-            }
             cancelTimeout();
             mCustomEventInterstitialAdapterListener.onCustomEventInterstitialFailed(errorCode);
         }
@@ -207,6 +222,8 @@ public void onInterstitialShown() {
             return;
         }
 
+        MoPubLog.log(CUSTOM, "onInterstitialShown()");
+
         if (mCustomEventInterstitialAdapterListener != null) {
             mCustomEventInterstitialAdapterListener.onCustomEventInterstitialShown();
         }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/DefaultInterstitialAdListener.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/DefaultInterstitialAdListener.java
index 9488e307..26ef53e8 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/DefaultInterstitialAdListener.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/DefaultInterstitialAdListener.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
index b7f084b9..77ecb2dd 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
index d38178c8..54b843d1 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -7,14 +7,18 @@
 import android.support.annotation.NonNull;
 
 import com.mopub.common.CreativeOrientation;
+import com.mopub.common.logging.MoPubLog;
 
 import java.util.Map;
 
 import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
 import static com.mopub.common.DataKeys.CREATIVE_ORIENTATION_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.SHOW_ATTEMPTED;
 
 public class HtmlInterstitial extends ResponseBodyInterstitial {
+    public static final String ADAPTER_NAME = HtmlInterstitial.class.getSimpleName();
     private String mHtmlData;
     private String mClickthroughUrl;
     @NonNull
@@ -24,17 +28,19 @@
     protected void extractExtras(Map<String, String> serverExtras) {
         mHtmlData = serverExtras.get(HTML_RESPONSE_BODY_KEY);
         mClickthroughUrl = serverExtras.get(CLICKTHROUGH_URL_KEY);
-        mOrientation = CreativeOrientation.fromHeader(serverExtras.get(CREATIVE_ORIENTATION_KEY));
+        mOrientation = CreativeOrientation.fromString(serverExtras.get(CREATIVE_ORIENTATION_KEY));
     }
 
     @Override
     protected void preRenderHtml(CustomEventInterstitialListener customEventInterstitialListener) {
-        MoPubActivity.preRenderHtml(this, mContext, mAdReport, customEventInterstitialListener, mHtmlData, mClickthroughUrl, mBroadcastIdentifier);
+        MoPubLog.log(LOAD_ATTEMPTED, ADAPTER_NAME);
+        MoPubActivity.preRenderHtml(this, mContext, mAdReport, customEventInterstitialListener, mClickthroughUrl, mBroadcastIdentifier);
     }
 
     @Override
     public void showInterstitial() {
-        MoPubActivity.start(mContext, mHtmlData, mAdReport, mClickthroughUrl, mOrientation,
+        MoPubLog.log(SHOW_ATTEMPTED, ADAPTER_NAME);
+        MoPubActivity.start(mContext, mAdReport, mClickthroughUrl, mOrientation,
                 mBroadcastIdentifier);
     }
 }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
index 25cec87c..d0f23c36 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
index 360a4841..f1d1037f 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -28,11 +28,19 @@
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
 import static com.mopub.common.DataKeys.CREATIVE_ORIENTATION_KEY;
-import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.CLICKED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.DID_DISAPPEAR;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.LOAD_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.LOAD_FAILED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.LOAD_SUCCESS;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.SHOW_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.SHOW_SUCCESS;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.WILL_LEAVE_APPLICATION;
 import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
 import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
@@ -44,9 +52,10 @@
     @Nullable private HtmlInterstitialWebView mHtmlInterstitialWebView;
     @Nullable private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
 
-    public static void start(Context context, String htmlData, AdReport adReport, String clickthroughUrl,
-            CreativeOrientation creativeOrientation, long broadcastIdentifier) {
-        Intent intent = createIntent(context, htmlData, adReport, clickthroughUrl,
+    public static void start(Context context, AdReport adReport, String clickthroughUrl,
+                             CreativeOrientation creativeOrientation, long broadcastIdentifier) {
+        MoPubLog.log(SHOW_ATTEMPTED);
+        Intent intent = createIntent(context, adReport, clickthroughUrl,
                 creativeOrientation, broadcastIdentifier);
         try {
             context.startActivity(intent);
@@ -56,10 +65,9 @@ public static void start(Context context, String htmlData, AdReport adReport, St
     }
 
     static Intent createIntent(Context context,
-            String htmlData, AdReport adReport, String clickthroughUrl,
-            CreativeOrientation orientation, long broadcastIdentifier) {
+                               AdReport adReport, String clickthroughUrl,
+                               CreativeOrientation orientation, long broadcastIdentifier) {
         Intent intent = new Intent(context, MoPubActivity.class);
-        intent.putExtra(HTML_RESPONSE_BODY_KEY, htmlData);
         intent.putExtra(CLICKTHROUGH_URL_KEY, clickthroughUrl);
         intent.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
         intent.putExtra(AD_REPORT_KEY, adReport);
@@ -72,9 +80,9 @@ static void preRenderHtml(final Interstitial baseInterstitial,
             final Context context,
             final AdReport adReport,
             final CustomEventInterstitialListener customEventInterstitialListener,
-            final String htmlData,
             final String clickthroughUrl,
             final long broadcastIdentifier) {
+        MoPubLog.log(LOAD_ATTEMPTED);
         final HtmlInterstitialWebView htmlInterstitialWebView = HtmlInterstitialWebViewFactory.create(
                 context.getApplicationContext(), adReport, customEventInterstitialListener, clickthroughUrl);
 
@@ -98,16 +106,16 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
                 new ExternalViewabilitySessionManager(context);
         externalViewabilitySessionManager.createDisplaySession(context, htmlInterstitialWebView, true);
 
-        htmlInterstitialWebView.loadHtmlResponse(htmlData);
+        htmlInterstitialWebView.loadHtmlResponse(getResponseString(adReport));
         WebViewCacheService.storeWebViewConfig(broadcastIdentifier, baseInterstitial,
-                htmlInterstitialWebView, externalViewabilitySessionManager);
+                htmlInterstitialWebView, externalViewabilitySessionManager, null);
     }
 
     @Override
     public View getAdView() {
         Intent intent = getIntent();
-        String clickthroughUrl = intent.getStringExtra(CLICKTHROUGH_URL_KEY);
-        String htmlResponse = intent.getStringExtra(HTML_RESPONSE_BODY_KEY);
+        final String clickthroughUrl = intent.getStringExtra(CLICKTHROUGH_URL_KEY);
+        final String htmlData = getResponseString();
 
         final Long broadcastIdentifier = getBroadcastIdentifier();
         if (broadcastIdentifier != null) {
@@ -129,13 +137,13 @@ public View getAdView() {
             }
         }
 
-        MoPubLog.d("WebView cache miss. Recreating the WebView.");
+        MoPubLog.log(CUSTOM, "WebView cache miss. Recreating the WebView.");
         mHtmlInterstitialWebView = HtmlInterstitialWebViewFactory.create(getApplicationContext(),
                 mAdReport, new BroadcastingInterstitialListener(), clickthroughUrl);
         
         mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(this);
         mExternalViewabilitySessionManager.createDisplaySession(this, mHtmlInterstitialWebView, true);
-        mHtmlInterstitialWebView.loadHtmlResponse(htmlResponse);
+        mHtmlInterstitialWebView.loadHtmlResponse(htmlData);
         return mHtmlInterstitialWebView;
     }
 
@@ -147,7 +155,7 @@ protected void onCreate(Bundle savedInstanceState) {
         Serializable orientationExtra = getIntent().getSerializableExtra(DataKeys.CREATIVE_ORIENTATION_KEY);
         CreativeOrientation requestedOrientation;
         if (orientationExtra == null || !(orientationExtra instanceof CreativeOrientation)) {
-            requestedOrientation = CreativeOrientation.UNDEFINED;
+            requestedOrientation = CreativeOrientation.DEVICE;
         } else {
             requestedOrientation = (CreativeOrientation) orientationExtra;
         }
@@ -176,6 +184,7 @@ protected void onDestroy() {
     class BroadcastingInterstitialListener implements CustomEventInterstitialListener {
         @Override
         public void onInterstitialLoaded() {
+            MoPubLog.log(LOAD_SUCCESS);
             if (mHtmlInterstitialWebView != null) {
                 mHtmlInterstitialWebView.loadUrl(WEB_VIEW_DID_APPEAR.getUrl());
             }
@@ -183,16 +192,20 @@ public void onInterstitialLoaded() {
 
         @Override
         public void onInterstitialFailed(MoPubErrorCode errorCode) {
+            MoPubLog.log(LOAD_FAILED, MoPubErrorCode.VIDEO_CACHE_ERROR.getIntCode(),
+                    MoPubErrorCode.VIDEO_CACHE_ERROR);
             broadcastAction(MoPubActivity.this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_FAIL);
             finish();
         }
 
         @Override
         public void onInterstitialShown() {
+            MoPubLog.log(SHOW_SUCCESS);
         }
 
         @Override
         public void onInterstitialClicked() {
+            MoPubLog.log(CLICKED);
             broadcastAction(MoPubActivity.this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_CLICK);
         }
 
@@ -202,10 +215,12 @@ public void onInterstitialImpression() {
 
         @Override
         public void onLeaveApplication() {
+            MoPubLog.log(WILL_LEAVE_APPLICATION);
         }
 
         @Override
         public void onInterstitialDismissed() {
+            MoPubLog.log(DID_DISAPPEAR);
         }
     }
 }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
index 0df32007..053493ca 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -21,6 +21,15 @@
 import java.util.Map;
 
 import static com.mopub.common.Constants.AD_EXPIRATION_DELAY;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.CLICKED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.LOAD_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.LOAD_FAILED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.LOAD_SUCCESS;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.SHOW_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.SHOW_FAILED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.SHOW_SUCCESS;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.WILL_DISAPPEAR;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
 import static com.mopub.mobileads.MoPubErrorCode.EXPIRED;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.DESTROYED;
@@ -86,7 +95,7 @@ public MoPubInterstitial(@NonNull final Activity activity, @NonNull final String
         mAdExpiration = new Runnable() {
             @Override
             public void run() {
-                MoPubLog.d("Expiring unused Interstitial ad.");
+                MoPubLog.log(CUSTOM, "Expiring unused Interstitial ad.");
                 attemptStateTransition(IDLE, true);
                 if (!SHOWING.equals(mCurrentInterstitialState) &&
                         !DESTROYED.equals(mCurrentInterstitialState)) {
@@ -142,8 +151,12 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
                             mInterstitialView.loadAd();
                         }
                         return true;
+                    case READY:
+                        MoPubLog.log(CUSTOM, "Attempted transition from IDLE to " +
+                                "READY failed due to no known load call.");
+                        return false;
                     case SHOWING:
-                        MoPubLog.d("No interstitial loading or loaded.");
+                        MoPubLog.log(CUSTOM, "No interstitial loading or loaded.");
                         return false;
                     case DESTROYED:
                         setInterstitialStateDestroyed();
@@ -163,20 +176,27 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
                     case LOADING:
                         if (!force) {
                             // Cannot load more than one interstitial at a time
-                            MoPubLog.d("Already loading an interstitial.");
+                            MoPubLog.log(CUSTOM, "Already loading an interstitial.");
                         }
                         return false;
                     case READY:
                         // This is the usual load finished transition
+                        MoPubLog.log(LOAD_SUCCESS);
                         mCurrentInterstitialState = READY;
                         // Expire MoPub ads to synchronize with MoPub Ad Server tracking window
                         if (AdTypeTranslator.CustomEventType
                                 .isMoPubSpecific(mInterstitialView.getCustomEventClassName())) {
                             mHandler.postDelayed(mAdExpiration, AD_EXPIRATION_DELAY);
                         }
+                        if (mInterstitialView.mAdViewController != null) {
+                            mInterstitialView.mAdViewController.creativeDownloadSuccess();
+                        }
+                        if (mInterstitialAdListener != null) {
+                            mInterstitialAdListener.onInterstitialLoaded(this);
+                        }
                         return true;
                     case SHOWING:
-                        MoPubLog.d("Interstitial is not ready to be shown yet.");
+                        MoPubLog.log(CUSTOM, "Interstitial is not ready to be shown yet.");
                         return false;
                     case DESTROYED:
                         setInterstitialStateDestroyed();
@@ -196,7 +216,7 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
                         return false;
                     case LOADING:
                         // This is to prevent loading another interstitial while one is loaded.
-                        MoPubLog.d("Interstitial already loaded. Not loading another.");
+                        MoPubLog.log(CUSTOM, "Interstitial already loaded. Not loading another.");
                         // Let the ad listener know that there's already an ad loaded
                         if (mInterstitialAdListener != null) {
                             mInterstitialAdListener.onInterstitialLoaded(this);
@@ -218,7 +238,7 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
                 switch(endState) {
                     case IDLE:
                         if (force) {
-                            MoPubLog.d("Cannot force refresh while showing an interstitial.");
+                            MoPubLog.log(CUSTOM, "Cannot force refresh while showing an interstitial.");
                             return false;
                         }
                         // This is the usual transition when done showing this interstitial
@@ -227,11 +247,11 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
                         return true;
                     case LOADING:
                         if (!force) {
-                            MoPubLog.d("Interstitial already showing. Not loading another.");
+                            MoPubLog.log(CUSTOM, "Interstitial already showing. Not loading another.");
                         }
                         return false;
                     case SHOWING:
-                        MoPubLog.d("Already showing an interstitial. Cannot show it again.");
+                        MoPubLog.log(CUSTOM, "Already showing an interstitial. Cannot show it again.");
                         return false;
                     case DESTROYED:
                         setInterstitialStateDestroyed();
@@ -241,7 +261,7 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
                 }
             case DESTROYED:
                 // Once destroyed, MoPubInterstitial is no longer functional.
-                MoPubLog.d("MoPubInterstitial destroyed. Ignoring all requests.");
+                MoPubLog.log(CUSTOM, "MoPubInterstitial destroyed. Ignoring all requests.");
                 return false;
             default:
                 return false;
@@ -261,10 +281,12 @@ private void setInterstitialStateDestroyed() {
     }
 
     public void load() {
+        MoPubLog.log(LOAD_ATTEMPTED);
         attemptStateTransition(LOADING);
     }
 
     public boolean show() {
+        MoPubLog.log(SHOW_ATTEMPTED);
         return attemptStateTransition(SHOWING);
     }
 
@@ -375,14 +397,6 @@ public void onCustomEventInterstitialLoaded() {
         }
 
         attemptStateTransition(READY);
-
-        if (mInterstitialView.mAdViewController != null) {
-            mInterstitialView.mAdViewController.creativeDownloadSuccess();
-        }
-
-        if (mInterstitialAdListener != null) {
-            mInterstitialAdListener.onInterstitialLoaded(this);
-        }
     }
 
     @Override
@@ -391,6 +405,12 @@ public void onCustomEventInterstitialFailed(@NonNull final MoPubErrorCode errorC
             return;
         }
 
+        if (mCurrentInterstitialState == LOADING) {
+            MoPubLog.log(LOAD_FAILED, errorCode.getIntCode(), errorCode);
+        } else if (mCurrentInterstitialState == SHOWING) {
+            MoPubLog.log(SHOW_FAILED, errorCode.getIntCode(), errorCode);
+        }
+
         if (!mInterstitialView.loadFailUrl(errorCode)) {
             attemptStateTransition(IDLE);
         }
@@ -402,6 +422,8 @@ public void onCustomEventInterstitialShown() {
             return;
         }
 
+        MoPubLog.log(SHOW_SUCCESS);
+
         if (mCustomEventInterstitialAdapter == null ||
                 mCustomEventInterstitialAdapter.isAutomaticImpressionAndClickTrackingEnabled()) {
             mInterstitialView.trackImpression();
@@ -417,6 +439,7 @@ public void onCustomEventInterstitialClicked() {
         if (isDestroyed()) {
             return;
         }
+        MoPubLog.log(CLICKED);
 
         mInterstitialView.registerClick();
 
@@ -442,6 +465,7 @@ public void onCustomEventInterstitialDismissed() {
         if (isDestroyed()) {
             return;
         }
+        MoPubLog.log(WILL_DISAPPEAR);
 
         attemptStateTransition(IDLE);
 
@@ -474,7 +498,7 @@ protected void loadCustomEvent(String customEventClassName, Map<String, String>
             }
 
             if (TextUtils.isEmpty(customEventClassName)) {
-                MoPubLog.d("Couldn't invoke custom event because the server did not specify one.");
+                MoPubLog.log(CUSTOM, "Couldn't invoke custom event because the server did not specify one.");
                 loadFailUrl(ADAPTER_NOT_FOUND);
                 return;
             }
@@ -483,7 +507,7 @@ protected void loadCustomEvent(String customEventClassName, Map<String, String>
                 mCustomEventInterstitialAdapter.invalidate();
             }
 
-            MoPubLog.d("Loading custom event interstitial adapter.");
+            MoPubLog.log(CUSTOM, "Loading custom event interstitial adapter.");
 
             mCustomEventInterstitialAdapter = CustomEventInterstitialAdapterFactory.create(
                     MoPubInterstitial.this,
@@ -496,7 +520,7 @@ protected void loadCustomEvent(String customEventClassName, Map<String, String>
         }
 
         protected void trackImpression() {
-            MoPubLog.d("Tracking impression for interstitial.");
+            MoPubLog.log(CUSTOM, "Tracking impression for interstitial.");
             if (mAdViewController != null) mAdViewController.trackImpression();
         }
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
index 53827498..e989a5de 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -10,6 +10,7 @@
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.View;
 import android.view.WindowManager;
@@ -17,10 +18,12 @@
 
 import com.mopub.common.AdReport;
 import com.mopub.common.Constants;
+import com.mopub.common.CreativeOrientation;
 import com.mopub.common.ExternalViewabilitySessionManager;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.DeviceUtils;
 import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import com.mopub.mraid.MraidBridge;
 import com.mopub.mraid.MraidController;
@@ -31,13 +34,24 @@
 import com.mopub.mraid.PlacementType;
 import com.mopub.network.Networking;
 
+import java.io.Serializable;
+
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.common.DataKeys.CREATIVE_ORIENTATION_KEY;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.DID_APPEAR;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.LOAD_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.LOAD_FAILED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.LOAD_SUCCESS;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.SHOW_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.SHOW_FAILED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.SHOW_SUCCESS;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.WILL_DISAPPEAR;
 import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
 import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
@@ -46,20 +60,21 @@
 public class MraidActivity extends BaseInterstitialActivity {
     @Nullable private MraidController mMraidController;
     @Nullable private MraidWebViewDebugListener mDebugListener;
-    @Nullable private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
+    @Nullable protected ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
 
     public static void preRenderHtml(@NonNull final Interstitial mraidInterstitial,
             @NonNull final Context context,
             @NonNull final CustomEventInterstitialListener customEventInterstitialListener,
-            @Nullable final String htmlData,
-            @NonNull final Long broadcastIdentifier) {
+            @NonNull final Long broadcastIdentifier,
+            @Nullable final AdReport adReport) {
         Preconditions.checkNotNull(mraidInterstitial);
         Preconditions.checkNotNull(context);
         Preconditions.checkNotNull(customEventInterstitialListener);
         Preconditions.checkNotNull(broadcastIdentifier);
 
-        preRenderHtml(mraidInterstitial, customEventInterstitialListener, htmlData,
-                new MraidBridge.MraidWebView(context), broadcastIdentifier);
+        preRenderHtml(mraidInterstitial, customEventInterstitialListener, getResponseString(adReport),
+                new MraidBridge.MraidWebView(context), broadcastIdentifier,
+                new MraidController(context, adReport, PlacementType.INTERSTITIAL));
     }
 
     @VisibleForTesting
@@ -67,19 +82,25 @@ static void preRenderHtml(@NonNull final Interstitial mraidInterstitial,
             @NonNull final CustomEventInterstitialListener customEventInterstitialListener,
             @Nullable final String htmlData,
             @NonNull final BaseWebView mraidWebView,
-            @NonNull final Long broadcastIdentifier) {
+            @NonNull final Long broadcastIdentifier,
+            @NonNull final MraidController mraidController) {
+        MoPubLog.log(LOAD_ATTEMPTED);
         Preconditions.checkNotNull(mraidInterstitial);
         Preconditions.checkNotNull(customEventInterstitialListener);
         Preconditions.checkNotNull(mraidWebView);
         Preconditions.checkNotNull(broadcastIdentifier);
+        Preconditions.checkNotNull(mraidController);
 
         mraidWebView.enablePlugins(false);
         mraidWebView.enableJavascriptCaching();
+        final Context context = mraidWebView.getContext();
 
         mraidWebView.setWebViewClient(new MraidWebViewClient() {
             @Override
             public boolean shouldOverrideUrlLoading(WebView view, String url) {
                 if (MOPUB_FAIL_LOAD.equals(url)) {
+                    MoPubLog.log(LOAD_FAILED, MoPubErrorCode.VIDEO_CACHE_ERROR.getIntCode(),
+                            MoPubErrorCode.VIDEO_CACHE_ERROR);
                     customEventInterstitialListener.onInterstitialFailed(
                             MoPubErrorCode.MRAID_LOAD_ERROR);
                 }
@@ -88,7 +109,9 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
 
             @Override
             public void onPageFinished(final WebView view, final String url) {
+                MoPubLog.log(LOAD_SUCCESS);
                 customEventInterstitialListener.onInterstitialLoaded();
+                mraidController.onPreloadFinished(mraidWebView);
             }
 
             @Override
@@ -96,52 +119,74 @@ public void onReceivedError(final WebView view, final int errorCode,
                     final String description,
                     final String failingUrl) {
                 super.onReceivedError(view, errorCode, description, failingUrl);
+                MoPubLog.log(LOAD_FAILED, MoPubErrorCode.VIDEO_CACHE_ERROR.getIntCode(),
+                        MoPubErrorCode.VIDEO_CACHE_ERROR);
                 customEventInterstitialListener.onInterstitialFailed(
                         MoPubErrorCode.MRAID_LOAD_ERROR);
             }
         });
 
-        final Context context = mraidWebView.getContext();
         final ExternalViewabilitySessionManager externalViewabilitySessionManager =
                 new ExternalViewabilitySessionManager(context);
         externalViewabilitySessionManager.createDisplaySession(context, mraidWebView, true);
 
         mraidWebView.loadDataWithBaseURL(Networking.getBaseUrlScheme() + "://" + Constants.HOST + "/",
                 htmlData, "text/html", "UTF-8", null);
-        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, mraidInterstitial, mraidWebView, externalViewabilitySessionManager);
+
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, mraidInterstitial,
+                mraidWebView, externalViewabilitySessionManager, mraidController);
     }
 
-    public static void start(@NonNull Context context, @Nullable AdReport adreport, @Nullable String htmlData, long broadcastIdentifier) {
-        Intent intent = createIntent(context, adreport, htmlData, broadcastIdentifier);
+    public static void start(@NonNull final Context context,
+            @Nullable final AdReport adreport,
+            final long broadcastIdentifier,
+            @Nullable final CreativeOrientation orientation) {
+        MoPubLog.log(SHOW_ATTEMPTED);
+        final Intent intent = createIntent(context, adreport, broadcastIdentifier,
+                orientation);
         try {
             context.startActivity(intent);
         } catch (ActivityNotFoundException exception) {
+            MoPubLog.log(SHOW_FAILED, MoPubErrorCode.INTERNAL_ERROR.getIntCode(),
+                    MoPubErrorCode.INTERNAL_ERROR);
             Log.d("MraidInterstitial", "MraidActivity.class not found. Did you declare MraidActivity in your manifest?");
         }
     }
 
     @VisibleForTesting
-    protected static Intent createIntent(@NonNull Context context, @Nullable AdReport adReport,
-            @Nullable String htmlData, long broadcastIdentifier) {
+    protected static Intent createIntent(@NonNull final Context context,
+            @Nullable final AdReport adReport,
+            final long broadcastIdentifier,
+            @Nullable final CreativeOrientation orientation) {
         Intent intent = new Intent(context, MraidActivity.class);
-        intent.putExtra(HTML_RESPONSE_BODY_KEY, htmlData);
         intent.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
         intent.putExtra(AD_REPORT_KEY, adReport);
+        intent.putExtra(CREATIVE_ORIENTATION_KEY, orientation);
         intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
         return intent;
     }
 
     @Override
     public View getAdView() {
-        String htmlData = getIntent().getStringExtra(HTML_RESPONSE_BODY_KEY);
-        if (htmlData == null) {
-            MoPubLog.w("MraidActivity received a null HTML body. Finishing the activity.");
+        final String htmlData = getResponseString();
+        if (TextUtils.isEmpty(htmlData)) {
+            MoPubLog.log(CUSTOM, "MraidActivity received a null HTML body. Finishing the activity.");
             finish();
             return new View(this);
         }
 
-        mMraidController = new MraidController(
-                this, mAdReport, PlacementType.INTERSTITIAL);
+        final Long broadcastIdentifier = getBroadcastIdentifier();
+        WebViewCacheService.Config config = null;
+        if (broadcastIdentifier != null) {
+            config = WebViewCacheService.popWebViewConfig(broadcastIdentifier);
+        }
+
+        if (config != null && config.getController() != null) {
+            mMraidController = config.getController();
+        } else {
+            mMraidController = new MraidController(
+                    this, mAdReport, PlacementType.INTERSTITIAL);
+        }
 
         mMraidController.setDebugListener(mDebugListener);
         mMraidController.setMraidListener(new MraidListener() {
@@ -154,7 +199,7 @@ public void onLoaded(View view) {
 
             @Override
             public void onFailedToLoad() {
-                MoPubLog.d("MraidActivity failed to load. Finishing the activity");
+                MoPubLog.log(CUSTOM, "MraidActivity failed to load. Finishing the activity");
                 if (getBroadcastIdentifier() != null) {
                     broadcastAction(MraidActivity.this, getBroadcastIdentifier(),
                             ACTION_INTERSTITIAL_FAIL);
@@ -163,6 +208,7 @@ public void onFailedToLoad() {
             }
 
             public void onClose() {
+                MoPubLog.log(WILL_DISAPPEAR);
                 mMraidController.loadJavascript(WEB_VIEW_DID_CLOSE.getJavascript());
                 finish();
             }
@@ -172,8 +218,14 @@ public void onExpand() {
                 // No-op. The interstitial is always expanded.
             }
 
+            @Override
+            public void onResize(final boolean toOriginalSize) {
+                // No-op. The interstitial is always expanded.
+            }
+
             @Override
             public void onOpen() {
+                MoPubLog.log(DID_APPEAR);
                 if (getBroadcastIdentifier()!= null) {
                     broadcastAction(MraidActivity.this, getBroadcastIdentifier(),
                             ACTION_INTERSTITIAL_CLICK);
@@ -193,19 +245,23 @@ public void useCustomCloseChanged(boolean useCustomClose) {
             }
         });
 
-        mMraidController.fillContent(getBroadcastIdentifier(), htmlData,
-                new MraidController.MraidWebViewCacheListener() {
-                    @Override
-                    public void onReady(@NonNull final MraidBridge.MraidWebView webView,
-                            @Nullable final ExternalViewabilitySessionManager viewabilityManager) {
-                        if (viewabilityManager != null) {
-                            mExternalViewabilitySessionManager = viewabilityManager;
-                        } else {
-                            mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(MraidActivity.this);
-                            mExternalViewabilitySessionManager.createDisplaySession(MraidActivity.this, webView, true);
+        if (config != null) {
+            mExternalViewabilitySessionManager = config.getViewabilityManager();
+        } else {
+            mMraidController.fillContent(htmlData,
+                    new MraidController.MraidWebViewCacheListener() {
+                        @Override
+                        public void onReady(@NonNull final MraidBridge.MraidWebView webView,
+                                @Nullable final ExternalViewabilitySessionManager viewabilityManager) {
+                            if (viewabilityManager != null) {
+                                mExternalViewabilitySessionManager = viewabilityManager;
+                            } else {
+                                mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(MraidActivity.this);
+                                mExternalViewabilitySessionManager.createDisplaySession(MraidActivity.this, webView, true);
+                            }
                         }
-                    }
-                });
+                    });
+        }
 
         return mMraidController.getAdContainer();
     }
@@ -213,6 +269,15 @@ public void onReady(@NonNull final MraidBridge.MraidWebView webView,
     @Override
     public void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
+        MoPubLog.log(SHOW_SUCCESS);
+
+        final Serializable orientationExtra = getIntent().getSerializableExtra(
+                CREATIVE_ORIENTATION_KEY);
+        CreativeOrientation requestedOrientation = CreativeOrientation.DEVICE;
+        if (orientationExtra instanceof CreativeOrientation) {
+            requestedOrientation = (CreativeOrientation) orientationExtra;
+        }
+        DeviceUtils.lockOrientation(this, requestedOrientation);
 
         if (mExternalViewabilitySessionManager != null) {
             mExternalViewabilitySessionManager.startDeferredDisplaySession(this);
@@ -224,6 +289,10 @@ public void onCreate(@Nullable Bundle savedInstanceState) {
         getWindow().setFlags(
                 WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,
                 WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
+
+        if (mMraidController != null) {
+            mMraidController.onShow(this);
+        }
     }
 
     @Override
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
index cf1ca0d8..2b733d81 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -16,15 +16,21 @@
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.LOAD_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.LOAD_FAILED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.LOAD_SUCCESS;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 
 public abstract class ResponseBodyInterstitial extends CustomEventInterstitial {
+    public static final String ADAPTER_NAME = ResponseBodyInterstitial.class.getSimpleName();
     @Nullable
     private EventForwardingBroadcastReceiver mBroadcastReceiver;
     protected Context mContext;
     protected AdReport mAdReport;
     protected long mBroadcastIdentifier;
     protected ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
+    @Nullable protected Map<String, Object> mLocalExtras;
 
     abstract protected void extractExtras(Map<String, String> serverExtras);
     abstract protected void preRenderHtml(CustomEventInterstitialListener customEventInterstitialListener);
@@ -36,12 +42,17 @@ public void loadInterstitial(
             CustomEventInterstitialListener customEventInterstitialListener,
             Map<String, Object> localExtras,
             Map<String, String> serverExtras) {
+        MoPubLog.log(LOAD_ATTEMPTED, ADAPTER_NAME);
 
         mContext = context;
+        mLocalExtras = localExtras;
 
         if (extrasAreValid(serverExtras)) {
             extractExtras(serverExtras);
         } else {
+            MoPubLog.log(LOAD_FAILED, ADAPTER_NAME,
+                    NETWORK_INVALID_STATE.getIntCode(),
+                    NETWORK_INVALID_STATE);
             customEventInterstitialListener.onInterstitialFailed(NETWORK_INVALID_STATE);
             return;
         }
@@ -51,13 +62,19 @@ public void loadInterstitial(
             mAdReport = (AdReport) localExtras.get(AD_REPORT_KEY);
             Long boxedBroadcastId = (Long) localExtras.get(BROADCAST_IDENTIFIER_KEY);
             if (boxedBroadcastId == null) {
-                MoPubLog.e("Broadcast Identifier was not set in localExtras");
+                MoPubLog.log(CUSTOM, "Broadcast Identifier was not set in localExtras");
+                MoPubLog.log(LOAD_FAILED, ADAPTER_NAME,
+                        MoPubErrorCode.INTERNAL_ERROR.getIntCode(),
+                        MoPubErrorCode.INTERNAL_ERROR);
                 customEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
                 return;
             }
             mBroadcastIdentifier = boxedBroadcastId;
         } catch (ClassCastException e) {
-            MoPubLog.e("LocalExtras contained an incorrect type.");
+            MoPubLog.log(CUSTOM, "LocalExtras contained an incorrect type.");
+            MoPubLog.log(LOAD_FAILED, ADAPTER_NAME,
+                    MoPubErrorCode.INTERNAL_ERROR.getIntCode(),
+                    MoPubErrorCode.INTERNAL_ERROR);
             customEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
             return;
         }
@@ -67,6 +84,7 @@ public void loadInterstitial(
         mBroadcastReceiver.register(mBroadcastReceiver, context);
 
         preRenderHtml(customEventInterstitialListener);
+        MoPubLog.log(LOAD_SUCCESS, ADAPTER_NAME);
     }
 
     @Override
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
index dcefcbde..037fc39e 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -18,7 +18,14 @@
 
 import java.util.Map;
 
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_FAILED;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_SUCCESS;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.SHOW_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.ERROR;
+
 class VastVideoInterstitial extends ResponseBodyInterstitial implements VastManager.VastManagerListener {
+    public static final String ADAPTER_NAME = VastVideoInterstitial.class.getSimpleName();
     private CustomEventInterstitialListener mCustomEventInterstitialListener;
     private String mVastResponse;
     private VastManager mVastManager;
@@ -35,7 +42,7 @@ protected void extractExtras(Map<String, String> serverExtras) {
         try {
             mExternalViewabilityTrackers = Json.jsonStringToMap(externalViewabilityTrackers);
         } catch (JSONException e) {
-            MoPubLog.d("Failed to parse video viewability trackers to JSON: " +
+            MoPubLog.log(CUSTOM, "Failed to parse video viewability trackers to JSON: " +
                     externalViewabilityTrackers);
         }
 
@@ -46,7 +53,7 @@ protected void extractExtras(Map<String, String> serverExtras) {
         try {
             mVideoTrackers = new JSONObject(videoTrackers);
         } catch (JSONException e) {
-            MoPubLog.d("Failed to parse video trackers to JSON: " + videoTrackers, e);
+            MoPubLog.log(ERROR, "Failed to parse video trackers to JSON: " + videoTrackers, e);
             mVideoTrackers = null;
         }
     }
@@ -56,6 +63,9 @@ protected void preRenderHtml(CustomEventInterstitialListener customEventIntersti
         mCustomEventInterstitialListener = customEventInterstitialListener;
 
         if (!CacheService.initializeDiskCache(mContext)) {
+            MoPubLog.log(LOAD_FAILED, ADAPTER_NAME,
+                    MoPubErrorCode.VIDEO_CACHE_ERROR.getIntCode(),
+                    MoPubErrorCode.VIDEO_CACHE_ERROR);
             mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.VIDEO_CACHE_ERROR);
             return;
         }
@@ -63,10 +73,12 @@ protected void preRenderHtml(CustomEventInterstitialListener customEventIntersti
         mVastManager = VastManagerFactory.create(mContext);
         mVastManager.prepareVastVideoConfiguration(mVastResponse, this,
                 mAdReport.getDspCreativeId(), mContext);
+        MoPubLog.log(LOAD_SUCCESS, ADAPTER_NAME);
     }
 
     @Override
     public void showInterstitial() {
+        MoPubLog.log(SHOW_ATTEMPTED, ADAPTER_NAME);
         MraidVideoPlayerActivity.startVast(mContext, mVastVideoConfig, mBroadcastIdentifier);
     }
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java
index e16d9392..1c134903 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialFactory.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialFactory.java
index 38737b05..74e67c3b 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialFactory.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java
index 751a7d07..e6657d73 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
index e4ff64e8..988727f5 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -8,30 +8,40 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
+import com.mopub.common.CreativeOrientation;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.MraidActivity;
 import com.mopub.mobileads.ResponseBodyInterstitial;
 
 import java.util.Map;
 
+import static com.mopub.common.DataKeys.CREATIVE_ORIENTATION_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.SHOW_ATTEMPTED;
 
 class MraidInterstitial extends ResponseBodyInterstitial {
+    public static final String ADAPTER_NAME = MraidInterstitial.class.getSimpleName();
     @Nullable protected String mHtmlData;
+    @Nullable private CreativeOrientation mOrientation;
 
     @Override
     protected void extractExtras(Map<String, String> serverExtras) {
         mHtmlData = serverExtras.get(HTML_RESPONSE_BODY_KEY);
+        mOrientation = CreativeOrientation.fromString(serverExtras.get(CREATIVE_ORIENTATION_KEY));
     }
 
     @Override
     protected void preRenderHtml(@NonNull CustomEventInterstitialListener
             customEventInterstitialListener) {
-        MraidActivity.preRenderHtml(this, mContext, customEventInterstitialListener, mHtmlData,
-                mBroadcastIdentifier);
+        MoPubLog.log(LOAD_ATTEMPTED, ADAPTER_NAME);
+        MraidActivity.preRenderHtml(this, mContext, customEventInterstitialListener,
+                mBroadcastIdentifier, mAdReport);
     }
 
     @Override
     public void showInterstitial() {
-        MraidActivity.start(mContext, mAdReport, mHtmlData, mBroadcastIdentifier);
+        MoPubLog.log(SHOW_ATTEMPTED, ADAPTER_NAME);
+        MraidActivity.start(mContext, mAdReport, mBroadcastIdentifier, mOrientation);
     }
 }
diff --git a/mopub-sdk/mopub-sdk-native-static/build.gradle b/mopub-sdk/mopub-sdk-native-static/build.gradle
index 6604b7b8..7d8f1513 100644
--- a/mopub-sdk/mopub-sdk-native-static/build.gradle
+++ b/mopub-sdk/mopub-sdk-native-static/build.gradle
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdRendererRegistry.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdRendererRegistry.java
index fbedb4fd..cf3d8845 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdRendererRegistry.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdRendererRegistry.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdapterHelper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdapterHelper.java
index 49744343..50fc41d8 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdapterHelper.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdapterHelper.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -16,6 +16,8 @@
 
 import java.lang.ref.WeakReference;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 /**
  * Use {@link com.mopub.nativeads.MoPubAdAdapter} or
  * {@link com.mopub.nativeads.MoPubStreamAdPlacer} instead
@@ -47,7 +49,7 @@ public View getAdView(@Nullable final View convertView,
             @Nullable final ViewBinder viewBinder) {
         final Context context = mContext.get();
         if (context == null) {
-            MoPubLog.w("Weak reference to Context in"
+            MoPubLog.log(CUSTOM, "Weak reference to Context in"
                     + " AdapterHelper became null. Returning empty view.");
             return new View(mApplicationContext);
         }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/BaseNativeAd.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/BaseNativeAd.java
index fefb2764..226120f8 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/BaseNativeAd.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/BaseNativeAd.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -17,6 +17,8 @@
 import java.util.HashSet;
 import java.util.Set;
 
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.CUSTOM;
+
 /**
  * This is the base class for implementations of all native ad formats. When implementing a new
  * native ad format, be sure to also implement and register an appropriate {@link MoPubAdRenderer}
@@ -106,7 +108,7 @@ final protected void addImpressionTrackers(final Object impressionTrackers) thro
                 addImpressionTracker(trackers.getString(i));
             } catch (JSONException e) {
                 // This will only occur if we access a non-existent index in JSONArray.
-                MoPubLog.d("Unable to parse impression trackers.");
+                MoPubLog.log(CUSTOM, "Unable to parse impression trackers.");
             }
         }
     }
@@ -122,7 +124,7 @@ final protected void addClickTrackers(final Object clickTrackers) throws ClassCa
                 addClickTracker(trackers.getString(i));
             } catch (JSONException e) {
                 // This will only occur if we access a non-existent index in JSONArray.
-                MoPubLog.d("Unable to parse click trackers.");
+                MoPubLog.log(CUSTOM, "Unable to parse click trackers.");
             }
         }
     }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClickInterface.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClickInterface.java
index b1d08354..62712b85 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClickInterface.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClickInterface.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClientPositioningSource.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClientPositioningSource.java
index 9de254da..255ceaf3 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClientPositioningSource.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClientPositioningSource.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNative.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNative.java
index a2d3a864..db6c0823 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNative.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNative.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
index 06a144da..384e4b34 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -13,11 +13,15 @@
 import com.mopub.common.DataKeys;
 import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.MoPubErrorCode;
 import com.mopub.nativeads.factories.CustomEventNativeFactory;
 import com.mopub.network.AdResponse;
 
 import java.util.Map;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_TIMEOUT;
+
 final class CustomEventNativeAdapter {
 
     @NonNull
@@ -44,7 +48,8 @@ public void run() {
                 if (mCompleted) {
                     return;
                 }
-                MoPubLog.d("Timeout loading native ad content. " + CustomEventNativeAdapter.this.toString());
+                MoPubLog.log(CUSTOM, "CustomEventNativeAdapter() failed with code " +
+                        NETWORK_TIMEOUT.getIntCode() + " and message " + NETWORK_TIMEOUT);
                 stopLoading();
                 mExternalListener.onNativeAdFailed(NativeErrorCode.NETWORK_TIMEOUT);
             }
@@ -60,11 +65,13 @@ public void loadNativeAd(@NonNull final Context context,
 
         String customEventNativeClassName = adResponse.getCustomEventClassName();
 
-        MoPubLog.d("Attempting to invoke custom event: " + customEventNativeClassName);
+        MoPubLog.log(CUSTOM, adResponse.getDspCreativeId());
         try {
             customEventNative = CustomEventNativeFactory.create(customEventNativeClassName);
         } catch (Exception e) {
-            MoPubLog.e("Failed to load Custom Event Native class: " + customEventNativeClassName);
+            MoPubLog.log(CUSTOM, "loadNativeAd() failed with code " +
+                    MoPubErrorCode.ADAPTER_NOT_FOUND.getIntCode() + " and message " +
+                    MoPubErrorCode.ADAPTER_NOT_FOUND);
             mExternalListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND);
             return;
         }
@@ -86,7 +93,9 @@ public void loadNativeAd(@NonNull final Context context,
             long timeoutMS = adResponse.getAdTimeoutMillis(Constants.THIRTY_SECONDS_MILLIS);
             mHandler.postDelayed(mTimeout, timeoutMS);
         } catch (Exception e) {
-            MoPubLog.w("Loading custom event native threw an error.", e);
+            MoPubLog.log(CUSTOM, "loadNativeAd() failed with code " +
+                    MoPubErrorCode.ADAPTER_NOT_FOUND.getIntCode() + " and message " +
+                    MoPubErrorCode.ADAPTER_NOT_FOUND);
             mExternalListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND);
         }
     }
@@ -99,6 +108,7 @@ public void onNativeAdLoaded(BaseNativeAd nativeAd) {
                 if (mCompleted) {
                     return;
                 }
+                MoPubLog.log(CUSTOM, "onNativeAdLoaded");
                 invalidate();
                 mExternalListener.onNativeAdLoaded(nativeAd);
             }
@@ -108,6 +118,8 @@ public void onNativeAdFailed(NativeErrorCode errorCode) {
                 if (mCompleted) {
                     return;
                 }
+                MoPubLog.log(CUSTOM, "onNativeAdFailed with code " +
+                        errorCode.getIntCode() + " and message " + errorCode);
                 invalidate();
                 mExternalListener.onNativeAdFailed(errorCode);
             }
@@ -119,7 +131,7 @@ void stopLoading() {
             if (customEventNative != null)
                 customEventNative.onInvalidate();
         } catch (Exception e) {
-            MoPubLog.e(e.toString());
+            MoPubLog.log(CUSTOM,  e.toString());
         }
         invalidate();
     }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java
index 432f33b5..f4ef1d1b 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java
index e438143d..2ae53c21 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/IntInterval.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/IntInterval.java
index c424477c..9cd6896a 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/IntInterval.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/IntInterval.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
index b4ec5f12..28c8cf8c 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
index bb741204..54cc1b86 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
index bb62a152..4929e858 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -27,10 +27,16 @@
 import java.util.Set;
 
 import static com.mopub.common.DataKeys.JSON_BODY_KEY;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.CLICKED;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_FAILED;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_SUCCESS;
 import static com.mopub.common.util.Numbers.parseDouble;
 import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
 
 public class MoPubCustomEventNative extends CustomEventNative {
+    public static final String ADAPTER_NAME = MoPubCustomEventNative.class.getSimpleName();
     private MoPubStaticNativeAd moPubStaticNativeAd;
 
     @Override
@@ -38,6 +44,7 @@ protected void loadNativeAd(@NonNull final Context context,
                                 @NonNull final CustomEventNativeListener customEventNativeListener,
                                 @NonNull final Map<String, Object> localExtras,
                                 @NonNull final Map<String, String> serverExtras) {
+        MoPubLog.log(LOAD_ATTEMPTED, ADAPTER_NAME);
 
         if (moPubStaticNativeAd != null && !moPubStaticNativeAd.isInvalidated()) {
             return;
@@ -46,6 +53,9 @@ protected void loadNativeAd(@NonNull final Context context,
         Object json = localExtras.get(JSON_BODY_KEY);
         // null or non-JSONObjects should not be passed in localExtras as JSON_BODY_KEY
         if (!(json instanceof JSONObject)) {
+            MoPubLog.log(LOAD_FAILED, ADAPTER_NAME,
+                    NativeErrorCode.INVALID_RESPONSE.getIntCode(),
+                    NativeErrorCode.INVALID_RESPONSE);
             customEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
             return;
         }
@@ -62,7 +72,7 @@ protected void loadNativeAd(@NonNull final Context context,
                 moPubStaticNativeAd.setImpressionMinPercentageViewed(Integer.parseInt(
                         serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)));
             } catch (final NumberFormatException e) {
-                MoPubLog.d("Unable to format min visible percent: " +
+                MoPubLog.log(CUSTOM, ADAPTER_NAME, "Unable to format min visible percent: " +
                         serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT));
             }
         }
@@ -72,7 +82,7 @@ protected void loadNativeAd(@NonNull final Context context,
                 moPubStaticNativeAd.setImpressionMinTimeViewed(
                         Integer.parseInt(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)));
             } catch (final NumberFormatException e) {
-                MoPubLog.d("Unable to format min time: " +
+                MoPubLog.log(CUSTOM, ADAPTER_NAME, "Unable to format min time: " +
                         serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS));
             }
         }
@@ -82,14 +92,18 @@ protected void loadNativeAd(@NonNull final Context context,
                 moPubStaticNativeAd.setImpressionMinVisiblePx(Integer.parseInt(
                         serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX)));
             } catch (final NumberFormatException e) {
-                MoPubLog.d("Unable to format min visible px: " +
+                MoPubLog.log(CUSTOM, ADAPTER_NAME, "Unable to format min visible px: " +
                         serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX));
             }
         }
 
         try {
             moPubStaticNativeAd.loadAd();
+            MoPubLog.log(LOAD_SUCCESS, ADAPTER_NAME);
         } catch (IllegalArgumentException e) {
+            MoPubLog.log(LOAD_FAILED, ADAPTER_NAME,
+                    NativeErrorCode.UNSPECIFIED.getIntCode(),
+                    NativeErrorCode.UNSPECIFIED);
             customEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
         }
     }
@@ -271,12 +285,12 @@ private void addInstanceVariable(@NonNull final Parameter key,
                         setPrivacyInformationIconClickThroughUrl((String) value);
                         break;
                     default:
-                        MoPubLog.d("Unable to add JSON key to internal mapping: " + key.name);
+                        MoPubLog.log(CUSTOM, ADAPTER_NAME, "Unable to add JSON key to internal mapping: " + key.name);
                         break;
                 }
             } catch (ClassCastException e) {
                 if (!key.required) {
-                    MoPubLog.d("Ignoring class cast exception for optional key: " + key.name);
+                    MoPubLog.log(CUSTOM, ADAPTER_NAME, "Ignoring class cast exception for optional key: " + key.name);
                 } else {
                     throw e;
                 }
@@ -350,6 +364,7 @@ public void recordImpression(@NonNull final View view) {
 
         @Override
         public void handleClick(@Nullable final View view) {
+            MoPubLog.log(CLICKED, ADAPTER_NAME);
             notifyAdClicked();
             mNativeClickHandler.openClickDestinationUrl(getClickDestinationUrl(), view);
         }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNative.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNative.java
index 611f80bd..ca177e07 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNative.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNative.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -28,6 +28,10 @@
 import java.util.Map;
 import java.util.TreeMap;
 
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.LOAD_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.LOAD_FAILED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.LOAD_SUCCESS;
 import static com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
 import static com.mopub.nativeads.NativeErrorCode.CONNECTION_ERROR;
 import static com.mopub.nativeads.NativeErrorCode.EMPTY_AD_RESPONSE;
@@ -164,6 +168,8 @@ private void loadNativeAd(
             return;
         }
 
+        MoPubLog.log(LOAD_ATTEMPTED);
+
         final NativeUrlGenerator generator = new NativeUrlGenerator(context)
                 .withAdUnitId(mAdUnitId)
                 .withRequest(requestParameters);
@@ -175,7 +181,7 @@ private void loadNativeAd(
         final String endpointUrl = generator.generateUrlString(Constants.HOST);
 
         if (endpointUrl != null) {
-            MoPubLog.d("MoPubNative Loading ad from: " + endpointUrl);
+            MoPubLog.log(CUSTOM, "MoPubNative Loading ad from: " + endpointUrl);
         }
 
         requestNativeAd(endpointUrl, null);
@@ -207,7 +213,7 @@ private void onAdLoad(@NonNull final AdResponse response) {
                 new CustomEventNativeListener() {
                     @Override
                     public void onNativeAdLoaded(@NonNull final BaseNativeAd nativeAd) {
-                        MoPubLog.w("MoPubNative.onNativeAdLoaded " + mNativeAdapter);
+                        MoPubLog.log(LOAD_SUCCESS);
                         mNativeAdapter = null;
 
                         final Context context = getContextOrDestroy();
@@ -236,14 +242,14 @@ public void onNativeAdLoaded(@NonNull final BaseNativeAd nativeAd) {
 
                     @Override
                     public void onNativeAdFailed(final NativeErrorCode errorCode) {
-                        MoPubLog.v(String.format("Native Ad failed to load with error: %s.", errorCode));
+                        MoPubLog.log(LOAD_FAILED, errorCode.getIntCode(), errorCode.toString());
                         mNativeAdapter = null;
                         requestNativeAd("", errorCode);
                     }
                 };
 
         if (mNativeAdapter != null) {
-            MoPubLog.w("Native adapter is not null.");
+            MoPubLog.log(CUSTOM, "Native adapter is not null.");
             mNativeAdapter.stopLoading();
         }
 
@@ -256,7 +262,7 @@ public void onNativeAdFailed(final NativeErrorCode errorCode) {
 
     @VisibleForTesting
     void onAdError(@NonNull final VolleyError volleyError) {
-        MoPubLog.d("Native ad request failed.", volleyError);
+        MoPubLog.log(CUSTOM, "Native ad request failed.", volleyError);
         if (volleyError instanceof MoPubNetworkError) {
             MoPubNetworkError error = (MoPubNetworkError) volleyError;
             switch (error.getReason()) {
@@ -269,7 +275,7 @@ void onAdError(@NonNull final VolleyError volleyError) {
                 case WARMING_UP:
                     // Used for the sample app to signal a toast.
                     // This is not customer-facing except in the sample app.
-                    MoPubLog.c(MoPubErrorCode.WARMUP.toString());
+                    MoPubLog.log(CUSTOM, MoPubErrorCode.WARMUP);
                     mMoPubNativeNetworkListener.onNativeFail(EMPTY_AD_RESPONSE);
                     return;
                 case NO_FILL:
@@ -286,7 +292,7 @@ void onAdError(@NonNull final VolleyError volleyError) {
             if (response != null && response.statusCode >= 500 && response.statusCode < 600) {
                 mMoPubNativeNetworkListener.onNativeFail(SERVER_ERROR_RESPONSE_CODE);
             } else if (response == null && !DeviceUtils.isNetworkAvailable(mContext.get())) {
-                MoPubLog.c(String.valueOf(MoPubErrorCode.NO_CONNECTION.toString()));
+                MoPubLog.log(CUSTOM, MoPubErrorCode.NO_CONNECTION);
                 mMoPubNativeNetworkListener.onNativeFail(CONNECTION_ERROR);
             } else {
                 mMoPubNativeNetworkListener.onNativeFail(UNSPECIFIED);
@@ -300,7 +306,7 @@ Context getContextOrDestroy() {
         final Context context = mContext.get();
         if (context == null) {
             destroy();
-            MoPubLog.d("Weak reference to Context in MoPubNative became null. This instance" +
+            MoPubLog.log(CUSTOM, "Weak reference to Context in MoPubNative became null. This instance" +
                     " of MoPubNative is destroyed and No more requests will be processed.");
         }
         return context;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdLoadedListener.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdLoadedListener.java
index d567d776..569f85ed 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdLoadedListener.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdLoadedListener.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java
index 4cf952d0..5143b3f0 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
index d0d519f4..edc617ae 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -22,6 +22,7 @@
 import java.util.List;
 import java.util.WeakHashMap;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 import static com.mopub.nativeads.MoPubRecyclerAdapter.ContentChangeStrategy.INSERT_AT_END;
 import static com.mopub.nativeads.MoPubRecyclerAdapter.ContentChangeStrategy.KEEP_ADS_FIXED;
 
@@ -275,13 +276,13 @@ public void refreshAds(@NonNull String adUnitId) {
     public void refreshAds(@NonNull String adUnitId,
             @Nullable RequestParameters requestParameters) {
         if (mRecyclerView == null) {
-            MoPubLog.w("This adapter is not attached to a RecyclerView and cannot be refreshed.");
+            MoPubLog.log(CUSTOM, "This adapter is not attached to a RecyclerView and cannot be refreshed.");
             return;
         }
 
         final RecyclerView.LayoutManager layoutManager = mRecyclerView.getLayoutManager();
         if (layoutManager == null) {
-            MoPubLog.w("Can't refresh ads when there is no layout manager on a RecyclerView.");
+            MoPubLog.log(CUSTOM, "Can't refresh ads when there is no layout manager on a RecyclerView.");
             return;
         }
 
@@ -320,7 +321,7 @@ public void refreshAds(@NonNull String adUnitId,
 
             loadAds(adUnitId, requestParameters);
         } else {
-            MoPubLog.w("This LayoutManager can't be refreshed.");
+            MoPubLog.log(CUSTOM, "This LayoutManager can't be refreshed.");
         }
     }
 
@@ -404,7 +405,7 @@ public int getItemCount() {
             // Create the view and a view holder.
             final MoPubAdRenderer adRenderer = mStreamAdPlacer.getAdRendererForViewType(viewType - NATIVE_AD_VIEW_TYPE_BASE);
             if (adRenderer == null) {
-                MoPubLog.w("No view binder was registered for ads in MoPubRecyclerAdapter.");
+                MoPubLog.log(CUSTOM, "No view binder was registered for ads in MoPubRecyclerAdapter.");
                 // This will cause a null pointer exception.
                 return null;
             }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerViewHolder.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerViewHolder.java
index 17796e3f..43aa12aa 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerViewHolder.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerViewHolder.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java
index 0172555a..cf60ac39 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
index c285edc0..aada522b 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -25,6 +25,8 @@
 import java.util.HashMap;
 import java.util.WeakHashMap;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 /**
  * {@code MoPubStreamAdPlacer} facilitates loading ads and placing them into a content stream.
  *
@@ -233,7 +235,7 @@ public void loadAds(@NonNull final String adUnitId,
         }
 
         if (mAdSource.getAdRendererCount() == 0) {
-            MoPubLog.w("You must register at least 1 ad renderer by calling registerAdRenderer " +
+            MoPubLog.log(CUSTOM, "You must register at least 1 ad renderer by calling registerAdRenderer " +
                     "before loading ads");
             return;
         }
@@ -253,7 +255,7 @@ public void onLoad(@NonNull final MoPubClientPositioning positioning) {
             @Override
             public void onFailed() {
                 // This will happen only if positions couldn't be loaded after several tries
-                MoPubLog.d("Unable to show ads because ad positions could not be loaded from " +
+                MoPubLog.log(CUSTOM, "Unable to show ads because ad positions could not be loaded from " +
                         "the MoPub ad server.");
             }
         });
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java
index 5f4dd707..f9cd79d8 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdData.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdData.java
index 61574877..fcf031bc 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdData.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdData.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java
index 010df1e0..61dcad18 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -27,7 +27,7 @@
  * To take an ad out of the cache, call {@link #dequeueAd}.
  *
  * The cache size may be automatically adjusted by the MoPub server based on an app's usage and
- * ad fill rate. Cached ads have a maximum TTL of 15 minutes before which they expire.
+ * ad fill rate. Cached ads have a maximum TTL of 4 hours before which they expire.
  *
  * The ad source also takes care of retrying failed ad requests, with a reasonable back-off to
  * avoid spamming the server.
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
index 6a8500e6..2b973550 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -15,6 +15,8 @@
 
 import java.util.WeakHashMap;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 /**
  * Use {@link MoPubStaticNativeAdRenderer} instead
  */
@@ -46,7 +48,7 @@ static View getAdView(@Nullable View convertView,
         }
 
         if (nativeAd == null || nativeAd.isDestroyed()) {
-            MoPubLog.d("NativeAd null or invalid. Returning empty view");
+            MoPubLog.log(CUSTOM, "NativeAd null or invalid. Returning empty view");
             // Only create a view if one hasn't been created already
             if (convertView == null || !ViewType.EMPTY.equals(convertView.getTag())) {
                 convertView = new View(context);
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeClickHandler.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeClickHandler.java
index 92d3ade2..042c9f79 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeClickHandler.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeClickHandler.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeErrorCode.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeErrorCode.java
index aec0c6ca..bf729674 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeErrorCode.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeErrorCode.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeImageHelper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeImageHelper.java
index a92d2267..db954fab 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeImageHelper.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeImageHelper.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -21,6 +21,9 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.ERROR;
+
 /**
  * Collection of helper methods to assist with image downloading and displaying
  */
@@ -70,7 +73,7 @@ public void onResponse(final ImageLoader.ImageContainer imageContainer, final bo
 
             @Override
             public void onErrorResponse(final VolleyError volleyError) {
-                MoPubLog.d("Failed to download a native ads image:", volleyError);
+                MoPubLog.log(ERROR, "Failed to download a native ads image:", volleyError);
                 boolean anyPreviousErrors = anyFailures.getAndSet(true);
                 imageCounter.decrementAndGet();
                 if (!anyPreviousErrors) {
@@ -111,14 +114,14 @@ public static void loadImageView(@Nullable final String url, @Nullable final Ima
             public void onResponse(final ImageLoader.ImageContainer imageContainer,
                     final boolean isImmediate) {
                 if (!isImmediate) {
-                    MoPubLog.d("Image was not loaded immediately into your ad view. You should call preCacheImages as part of your custom event loading process.");
+                    MoPubLog.log(CUSTOM, "Image was not loaded immediately into your ad view. You should call preCacheImages as part of your custom event loading process.");
                 }
                 imageView.setImageBitmap(imageContainer.getBitmap());
             }
 
             @Override
             public void onErrorResponse(final VolleyError volleyError) {
-                MoPubLog.d("Failed to load image.", volleyError);
+                MoPubLog.log(CUSTOM, "Failed to load image.", volleyError);
                 imageView.setImageDrawable(null);
             }
         });
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeRendererHelper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeRendererHelper.java
index 63927de4..28dbbbe6 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeRendererHelper.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeRendererHelper.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -18,6 +18,8 @@
 
 import java.util.Map;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 /**
  * A set of helper methods for Native Ad Rendering
  */
@@ -25,7 +27,7 @@
     public static void addTextView(@Nullable final TextView textView,
             @Nullable final String contents) {
         if (textView == null) {
-            MoPubLog.d("Attempted to add text (" + contents + ") to null TextView.");
+            MoPubLog.log(CUSTOM, "Attempted to add text (" + contents + ") to null TextView.");
             return;
         }
 
@@ -33,7 +35,7 @@ public static void addTextView(@Nullable final TextView textView,
         textView.setText(null);
 
         if (contents == null) {
-            MoPubLog.d("Attempted to set TextView contents to null.");
+            MoPubLog.log(CUSTOM, "Attempted to set TextView contents to null.");
         } else {
             textView.setText(contents);
         }
@@ -115,7 +117,7 @@ public static void updateExtras(@Nullable final View mainView,
             @NonNull final Map<String, Integer> extrasIds,
             @NonNull final Map<String, Object> extras) {
         if (mainView == null) {
-            MoPubLog.w("Attempted to bind extras on a null main view.");
+            MoPubLog.log(CUSTOM, "Attempted to bind extras on a null main view.");
             return;
         }
 
@@ -138,7 +140,7 @@ public static void updateExtras(@Nullable final View mainView,
                     NativeRendererHelper.addTextView((TextView) view, (String) content);
                 }
             } else {
-                MoPubLog.d("View bound to " + key + " should be an instance of TextView or ImageView.");
+                MoPubLog.log(CUSTOM, "View bound to " + key + " should be an instance of TextView or ImageView.");
             }
         }
     }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
index 9a92c4ea..6e695e2d 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PlacementData.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PlacementData.java
index 4a68cb1b..a5e37e2f 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PlacementData.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PlacementData.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -12,6 +12,8 @@
 
 import java.util.List;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 /**
  * A data that represents placed ads in a {@link com.mopub.nativeads.MoPubStreamAdPlacer},
  * useful for tracking insertion and placed ad positions.
@@ -224,7 +226,7 @@ void placeAd(final int adjustedPosition, final NativeAd nativeAd) {
                 mDesiredInsertionPositions, mDesiredCount, adjustedPosition);
         if (desiredIndex == mDesiredCount
                 || mDesiredInsertionPositions[desiredIndex] != adjustedPosition) {
-            MoPubLog.w("Attempted to insert an ad at an invalid position");
+            MoPubLog.log(CUSTOM, "Attempted to insert an ad at an invalid position");
             return;
         }
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningRequest.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningRequest.java
index 2caf25b5..f9ce7860 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningRequest.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningRequest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningSource.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningSource.java
index 575bc2db..2911acc3 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningSource.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningSource.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
index c4f72456..1d7caaa5 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/RequestParameters.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/RequestParameters.java
index c62077fe..b8e893d4 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/RequestParameters.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/RequestParameters.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ServerPositioningSource.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
index 0ca7158f..00af3502 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -21,6 +21,9 @@
 import com.mopub.volley.Response;
 import com.mopub.volley.VolleyError;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.ERROR;
+
 /**
  * Requests positioning information from the MoPub ad server.
  *
@@ -95,9 +98,9 @@ public void onErrorResponse(final VolleyError error) {
                 // Don't log a stack trace when we're just warming up.
                 if (!(error instanceof MoPubNetworkError) ||
                         ((MoPubNetworkError) error).getReason().equals(MoPubNetworkError.Reason.WARMING_UP)) {
-                    MoPubLog.e("Failed to load positioning data", error);
+                    MoPubLog.log(ERROR, "Failed to load positioning data", error);
                     if (error.networkResponse == null && !DeviceUtils.isNetworkAvailable(mContext)) {
-                        MoPubLog.c(String.valueOf(MoPubErrorCode.NO_CONNECTION.toString()));
+                        MoPubLog.log(CUSTOM, String.valueOf(MoPubErrorCode.NO_CONNECTION));
                     }
                 }
 
@@ -128,7 +131,7 @@ public void loadPositions(@NonNull String adUnitId, @NonNull PositioningListener
     }
 
     private void requestPositioningInternal() {
-        MoPubLog.d("Loading positioning from: " + mRetryUrl);
+        MoPubLog.log(CUSTOM, "Loading positioning from: " + mRetryUrl);
 
         mRequest = new PositioningRequest(mContext, mRetryUrl, mPositioningListener, mErrorListener);
         final RequestQueue requestQueue = Networking.getRequestQueue(mContext);
@@ -147,7 +150,7 @@ private void handleFailure() {
         double multiplier = Math.pow(EXPONENTIAL_BACKOFF_FACTOR, mRetryCount + 1);
         int delay = (int) (DEFAULT_RETRY_TIME_MILLISECONDS * multiplier);
         if (delay >= mMaximumRetryTimeMillis) {
-            MoPubLog.d("Error downloading positioning information");
+            MoPubLog.log(CUSTOM, "Error downloading positioning information");
             if (mListener != null) {
                 mListener.onFailed();
             }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java
index 0a893986..d06de035 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java
index e0881934..c75170a6 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -14,6 +14,8 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.CUSTOM;
+
 /**
  * This the base class for implementations of the static native ad format.
  */
@@ -187,7 +189,7 @@ final public void setStarRating(@Nullable final Double starRating) {
         } else if (starRating >= MIN_STAR_RATING && starRating <= MAX_STAR_RATING) {
             mStarRating = starRating;
         } else {
-            MoPubLog.d("Ignoring attempt to set invalid star rating (" + starRating + "). Must be "
+            MoPubLog.log(CUSTOM, "Ignoring attempt to set invalid star rating (" + starRating + "). Must be "
                     + "between " + MIN_STAR_RATING + " and " + MAX_STAR_RATING + ".");
         }
     }
@@ -219,7 +221,7 @@ final public void setImpressionMinTimeViewed(final int impressionMinTimeViewed)
         if (impressionMinTimeViewed > 0) {
             mImpressionMinTimeViewed = impressionMinTimeViewed;
         } else {
-            MoPubLog.d("Ignoring non-positive impressionMinTimeViewed: " + impressionMinTimeViewed);
+            MoPubLog.log(CUSTOM, "Ignoring non-positive impressionMinTimeViewed: " + impressionMinTimeViewed);
         }
     }
 
@@ -233,7 +235,7 @@ final public void setImpressionMinPercentageViewed(final int impressionMinPercen
         if (impressionMinPercentageViewed >= 0 && impressionMinPercentageViewed <= 100) {
             mImpressionMinPercentageViewed = impressionMinPercentageViewed;
         } else {
-            MoPubLog.d("Ignoring impressionMinTimeViewed that's not a percent [0, 100]: " +
+            MoPubLog.log(CUSTOM, "Ignoring impressionMinTimeViewed that's not a percent [0, 100]: " +
                     impressionMinPercentageViewed);
         }
     }
@@ -248,7 +250,7 @@ final public void setImpressionMinVisiblePx(@Nullable final Integer impressionMi
         if (impressionMinVisiblePx != null && impressionMinVisiblePx > 0) {
             mImpressionMinVisiblePx = impressionMinVisiblePx;
         } else {
-            MoPubLog.d("Ignoring null or non-positive impressionMinVisiblePx: " +
+            MoPubLog.log(CUSTOM, "Ignoring null or non-positive impressionMinVisiblePx: " +
                     impressionMinVisiblePx);
         }
     }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeViewHolder.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeViewHolder.java
index 2dfb20b8..cc93a36c 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeViewHolder.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeViewHolder.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -13,6 +13,8 @@
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.ERROR;
+
 class StaticNativeViewHolder {
     @Nullable View mainView;
     @Nullable TextView titleView;
@@ -46,7 +48,7 @@ static StaticNativeViewHolder fromViewBinder(@NonNull final View view,
                     (ImageView) view.findViewById(viewBinder.privacyInformationIconImageId);
             return staticNativeViewHolder;
         } catch (ClassCastException exception) {
-            MoPubLog.w("Could not cast from id in ViewBinder to expected View type", exception);
+            MoPubLog.log(ERROR, "Could not cast from id in ViewBinder to expected View type", exception);
             return EMPTY_VIEW_HOLDER;
         }
     }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java
index 35790f24..1bbc1f61 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TimestampWrapper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TimestampWrapper.java
index e5d2aa2d..238685f7 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TimestampWrapper.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TimestampWrapper.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ViewBinder.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ViewBinder.java
index 1efef473..d9fe44bf 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ViewBinder.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ViewBinder.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java
index 49bd4eb4..a8bf1aad 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-video/build.gradle b/mopub-sdk/mopub-sdk-native-video/build.gradle
index 9fcf8684..1f15ab22 100644
--- a/mopub-sdk/mopub-sdk-native-video/build.gradle
+++ b/mopub-sdk/mopub-sdk-native-video/build.gradle
@@ -1,12 +1,19 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
 apply from: '../shared-build.gradle'
 
+android {
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
+}
+
 dependencies {
     api project(':mopub-sdk:mopub-sdk-native-static')
-    api 'com.google.android.exoplayer:exoplayer:2.8.3'
+    api 'com.google.android.exoplayer:exoplayer:2.9.5'
 }
 
 project.description = 'MoPub Android SDK - Native Video'
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
deleted file mode 100644
index 4800a060..00000000
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
+++ /dev/null
@@ -1,468 +0,0 @@
-// Copyright 2018 Twitter, Inc.
-// Licensed under the MoPub SDK License Agreement
-// http://www.mopub.com/legal/sdk-license-agreement/
-
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.net.Uri;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-
-import com.google.android.exoplayer2.upstream.DataSource;
-import com.google.android.exoplayer2.upstream.DataSpec;
-import com.google.android.exoplayer2.upstream.DefaultHttpDataSource;
-import com.google.android.exoplayer2.upstream.HttpDataSource;
-import com.mopub.common.CacheService;
-import com.mopub.common.Preconditions;
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.IOException;
-import java.util.TreeSet;
-
-/**
- * This data source caches data on disk as it is read from an {@link HttpDataSource}. This expects
- * relatively large files, and this will segment the files. If any segment becomes invalid, the
- * entire file is effectively cleared from the cache.
- */
-public class HttpDiskCompositeDataSource implements DataSource {
-
-    // Keys are prefixed since URLs can end basically however they want, and key names could
-    // potentially be part of the URL and get the cache confused.
-    @VisibleForTesting static final String INTERVALS_KEY_PREFIX = "intervals-sorted-";
-    @VisibleForTesting static final String EXPECTED_FILE_SIZE_KEY_PREFIX = "expectedsize-";
-
-    // These are used to serialize/deserialize the intervals list
-    private static final String START = "start";
-    private static final String LENGTH = "length";
-
-    /**
-     * The constant used in {@link DefaultHttpDataSource} is private even though this is a pretty
-     * standard constant used in Exoplayer. This represents the constant that tells the HTTP
-     * connection to get all remaining bytes available.
-     */
-    @VisibleForTesting static final int LENGTH_UNBOUNDED = -1;
-
-    /**
-     * HTTP response 416 means trying to request for bytes that the server does not have.
-     */
-    private static final int HTTP_RESPONSE_REQUESTED_RANGE_NOT_SATISFIABLE = 416;
-
-    /**
-     * The current block size is arbitrarily set at 500KiB. This has to be bigger than the biggest
-     * read request from the consumer of this class's read method. This also has to be reasonably
-     * small to accommodate devices that don't have a lot of memory to work with.
-     */
-    @VisibleForTesting static final int BLOCK_SIZE = 500 * 1024;
-
-    /**
-     * The network data source
-     */
-    @NonNull private final HttpDataSource mHttpDataSource;
-
-    /**
-     * Bytes from disk. This is the in-memory working copy.
-     */
-    @Nullable private byte[] mCachedBytes;
-
-    /**
-     * Base key of the cache. This is the URI of the {@link DataSpec}.
-     */
-    @Nullable private String mKey;
-
-    /**
-     * This is the set of intervals that the cache thinks are valid. Intervals have a start and a
-     * length.
-     */
-    @NonNull private final TreeSet<IntInterval> mIntervals;
-
-    /**
-     * The absolute index of the first byte that is currently being requested.
-     */
-    private int mStartInFile;
-
-    /**
-     * The total number of bytes read in the current block. This indicates the current cursor
-     * position. mDataBlockOffset plus mStartInFile is the cursor position for the file.
-     * mDataBlockOffset plus mStartInDataBlock is the cursor position for the current data block.
-     */
-    private int mDataBlockOffset;
-
-    /**
-     * Which segment of the file the current block is on.
-     */
-    private int mSegment;
-
-    /**
-     * The index of the physical byte array for the current block.
-     */
-    private int mStartInDataBlock;
-
-    /**
-     * Whether or not this has an {@link HttpDataSource} that is already open.
-     */
-    private boolean mIsHttpSourceOpen;
-
-    /**
-     * The expected size of the entire file.
-     */
-    @Nullable private Integer mExpectedFileLength = null;
-
-    /**
-     * Data needed to open another {@link HttpDataSource}.
-     */
-    @Nullable private DataSpec mDataSpec;
-
-    /**
-     * Whether or not the cache has been written to during the current session.
-     */
-    private boolean mIsDirty;
-
-    public HttpDiskCompositeDataSource(@NonNull final Context context,
-            @NonNull final String userAgent) {
-        this(context, userAgent, new DefaultHttpDataSource(userAgent, null));
-    }
-
-    @VisibleForTesting
-    HttpDiskCompositeDataSource(@NonNull final Context context,
-            @NonNull final String userAgent,
-            @NonNull final HttpDataSource httpDataSource) {
-        mHttpDataSource = httpDataSource;
-        CacheService.initialize(context);
-        mIntervals = new TreeSet<IntInterval>();
-    }
-
-    @Override
-    public long open(@NonNull final DataSpec dataSpec) throws IOException {
-        Preconditions.checkNotNull(dataSpec);
-        if (dataSpec.uri == null) {
-            return LENGTH_UNBOUNDED;
-        }
-
-        mIsDirty = false;
-
-        mDataSpec = dataSpec;
-        mKey = dataSpec.uri.toString();
-        if (mKey == null) {
-            return LENGTH_UNBOUNDED;
-        }
-        mStartInFile = (int) dataSpec.absoluteStreamPosition;
-        mSegment = mStartInFile / BLOCK_SIZE;
-        mCachedBytes = CacheService.getFromDiskCache(mSegment + mKey);
-        mStartInDataBlock = mStartInFile % BLOCK_SIZE;
-        mDataBlockOffset = 0;
-
-        mExpectedFileLength = getExpectedFileLengthFromDisk(mKey);
-
-        populateIntervalsFromDisk(mKey, mIntervals);
-
-        int mDataRequestStartPoint = getFirstContiguousPointAfter(mStartInFile, mIntervals);
-
-        // Cache miss
-        if (mCachedBytes == null) {
-            mCachedBytes = new byte[BLOCK_SIZE];
-
-            // It's not in the cache, but we expected it to be there.
-            if (mDataRequestStartPoint > mStartInFile) {
-                MoPubLog.d("Cache segment " + mSegment + " was evicted. Invalidating cache");
-                mIntervals.clear();
-                mDataRequestStartPoint = (int) dataSpec.absoluteStreamPosition;
-            }
-        }
-
-        long size;
-        // If we think there are more bytes left to read from the network
-        if (mExpectedFileLength == null || mDataRequestStartPoint != mExpectedFileLength) {
-            final long lengthToUse;
-            if (mDataSpec.length == LENGTH_UNBOUNDED) {
-                lengthToUse = LENGTH_UNBOUNDED;
-            } else {
-                // Make sure to take into account that the start point is at a later point
-                lengthToUse = mDataSpec.length - (mDataRequestStartPoint - mStartInFile);
-            }
-            // Modify the data spec to include the new params
-            DataSpec modifiedDataSpec = new DataSpec(dataSpec.uri, mDataRequestStartPoint,
-                    lengthToUse, dataSpec.key, dataSpec.flags);
-
-            try {
-                size = mHttpDataSource.open(modifiedDataSpec);
-                if (mExpectedFileLength == null && lengthToUse == LENGTH_UNBOUNDED) {
-                    // If we don't have an expected file length set, set it if we requested the
-                    // rest of the file.
-                    mExpectedFileLength = (int) (mStartInFile + size);
-                    CacheService.putToDiskCache(EXPECTED_FILE_SIZE_KEY_PREFIX + mKey,
-                            String.valueOf(mExpectedFileLength).getBytes());
-                }
-                mIsHttpSourceOpen = true;
-            } catch (HttpDataSource.InvalidResponseCodeException e) {
-                // This shouldn't happen anymore, but if we accidentally requested too many bytes
-                // because we already had the bytes before that point, then it's still fine.
-                if (e.responseCode == HTTP_RESPONSE_REQUESTED_RANGE_NOT_SATISFIABLE) {
-                    size = mExpectedFileLength == null ? mDataRequestStartPoint - mStartInFile : mExpectedFileLength - mStartInFile;
-                } else {
-                    throw e;
-                }
-                mIsHttpSourceOpen = false;
-            }
-        } else {
-            size = dataSpec.length == LENGTH_UNBOUNDED ? mExpectedFileLength - mStartInFile : dataSpec.length;
-        }
-        return size;
-    }
-
-    private static void populateIntervalsFromDisk(@NonNull final String key,
-            @NonNull final TreeSet<IntInterval> intervals) {
-        Preconditions.checkNotNull(key);
-        Preconditions.checkNotNull(intervals);
-
-        intervals.clear();
-        byte[] intervalsFromDisk = CacheService.getFromDiskCache(INTERVALS_KEY_PREFIX + key);
-        if (intervalsFromDisk != null) {
-            String intervalsStringData = new String(intervalsFromDisk);
-            try {
-                JSONArray jsonIntervalArray = new JSONArray(intervalsStringData);
-                for (int i = 0; i < jsonIntervalArray.length(); i++) {
-                    JSONObject jsonInterval = new JSONObject((String) jsonIntervalArray.get(i));
-                    intervals.add(new IntInterval(jsonInterval.getInt(START),
-                            jsonInterval.getInt(LENGTH)));
-                }
-            } catch (JSONException e) {
-                MoPubLog.d("clearing cache since invalid json intervals found", e);
-                intervals.clear();
-            } catch (ClassCastException e) {
-                MoPubLog.d("clearing cache since unable to read json data");
-                intervals.clear();
-            }
-        }
-    }
-
-    private static Integer getExpectedFileLengthFromDisk(@NonNull final String key) {
-        Preconditions.checkNotNull(key);
-
-        byte[] maxSizeByteArray = CacheService.getFromDiskCache(
-                EXPECTED_FILE_SIZE_KEY_PREFIX + key);
-        if (maxSizeByteArray != null) {
-            try {
-                return Integer.parseInt(new String(maxSizeByteArray));
-            } catch (NumberFormatException e) {
-                return null;
-            }
-        }
-        return null;
-    }
-
-    @Override
-    public Uri getUri() {
-        return mDataSpec != null ? mDataSpec.uri : null;
-    }
-
-    @Override
-    public void close() throws IOException {
-        if (!TextUtils.isEmpty(mKey) && mCachedBytes != null) {
-            CacheService.putToDiskCache(mSegment + mKey, mCachedBytes);
-            addNewInterval(mIntervals, mStartInFile, mDataBlockOffset);
-            writeIntervalsToDisk(mIntervals, mKey);
-        }
-        mCachedBytes = null;
-
-        mHttpDataSource.close();
-        mIsHttpSourceOpen = false;
-        mStartInFile = 0;
-        mDataBlockOffset = 0;
-        mStartInDataBlock = 0;
-        mExpectedFileLength = null;
-        mIsDirty = false;
-    }
-
-    private static void writeIntervalsToDisk(@NonNull final TreeSet<IntInterval> intervals,
-            @NonNull final String key) {
-        Preconditions.checkNotNull(intervals);
-        Preconditions.checkNotNull(key);
-
-        final JSONArray jsonIntervals = new JSONArray();
-        for (IntInterval interval : intervals) {
-            jsonIntervals.put(interval);
-        }
-        CacheService.putToDiskCache(INTERVALS_KEY_PREFIX + key,
-                jsonIntervals.toString().getBytes());
-    }
-
-    @Override
-    public int read(final byte[] buffer, final int offset, final int length) throws IOException {
-        if (length > BLOCK_SIZE) {
-            MoPubLog.d(
-                    "Reading more than the block size (" + BLOCK_SIZE + " bytes) at once is not possible. length = " + length);
-            return -1;
-        }
-        if (mDataSpec == null) {
-            MoPubLog.d("Unable to read from data source when no spec provided");
-            return -1;
-        }
-        if (mCachedBytes == null) {
-            MoPubLog.d("No cache set up. Call open before read.");
-            return -1;
-        }
-
-        // Number of bytes available in the current block
-        final int bytesAvailableInCurrentBlock = BLOCK_SIZE - mStartInDataBlock - mDataBlockOffset;
-
-        // The position of the next expected break (could be end of file)
-        final int farthestContiguousPoint = getFirstContiguousPointAfter(
-                mStartInFile + mDataBlockOffset, mIntervals);
-        // Amount of data expected to be in the cache
-        final int validBytesLeftInCache = farthestContiguousPoint - mStartInFile - mDataBlockOffset;
-        // The number of expected bytes to be able to read from the cache
-        final int bytesToRead = Math.min(validBytesLeftInCache, length);
-        // To keep track of actual bytes read from the cache
-        int bytesReadFromDisk = 0;
-        // If the data is available at least partially on disk
-        if (areBytesAvailableInCache(farthestContiguousPoint, mStartInFile, mDataBlockOffset)) {
-            // The case of when all of the bytes are available in the current block
-            if (bytesToRead <= bytesAvailableInCurrentBlock) {
-                System.arraycopy(mCachedBytes, mStartInDataBlock + mDataBlockOffset, buffer, offset,
-                        bytesToRead);
-                mDataBlockOffset += bytesToRead;
-                bytesReadFromDisk += bytesToRead;
-            } else {
-                // Read all of the available bytes in the current block
-                System.arraycopy(mCachedBytes, mStartInDataBlock + mDataBlockOffset, buffer, offset,
-                        bytesAvailableInCurrentBlock);
-                mDataBlockOffset += bytesAvailableInCurrentBlock;
-                bytesReadFromDisk += bytesAvailableInCurrentBlock;
-
-                // Flush the cache
-                writeCacheToDiskAndClearVariables();
-
-                // Read in the next segment from disk
-                mCachedBytes = CacheService.getFromDiskCache(mSegment + mKey);
-                if (mCachedBytes == null) {
-                    // If there is a mismatch between expected bytes available in the cache and what
-                    // is actually in the cache, this is an unrecoverable problem. Reset the cache
-                    // and clear the data and open a new HTTP connection starting at the current position.
-                    MoPubLog.d("Unexpected cache miss. Invalidating cache");
-                    mIntervals.clear();
-                    mCachedBytes = new byte[BLOCK_SIZE];
-                    mHttpDataSource.close();
-
-                    mHttpDataSource.open(
-                            new DataSpec(mDataSpec.uri, mStartInFile + mDataBlockOffset,
-                                    LENGTH_UNBOUNDED, mDataSpec.key, mDataSpec.flags));
-                    mIsHttpSourceOpen = true;
-                } else {
-                    // If the data is available in the cache, read the remaining bytes into the
-                    // buffer, additionally offset by what has already been written to the buffer.
-                    System.arraycopy(mCachedBytes, mStartInDataBlock + mDataBlockOffset, buffer,
-                            offset + bytesReadFromDisk,
-                            bytesToRead - bytesReadFromDisk);
-                    mDataBlockOffset += bytesToRead - bytesReadFromDisk;
-                    bytesReadFromDisk = bytesToRead;
-                }
-            }
-        }
-
-        // If we have read enough data from disk, don't ask for network data
-        final int bytesToReadFromNetwork = length - bytesReadFromDisk;
-        if (bytesToReadFromNetwork <= 0) {
-            return bytesReadFromDisk;
-        }
-
-        mIsDirty = true;
-
-        // This should never happen, but if we lose network or something, this might happen
-        if (!mIsHttpSourceOpen) {
-            MoPubLog.d("end of cache reached. No http source open");
-            return -1;
-        }
-
-        // Read from network and store to disk
-        int bytesReadFromNetwork = mHttpDataSource.read(buffer, offset + bytesReadFromDisk,
-                bytesToReadFromNetwork);
-
-        final int bytesAvailableInCurrentBlockForNetwork =
-                BLOCK_SIZE - mStartInDataBlock - mDataBlockOffset;
-        if (bytesAvailableInCurrentBlockForNetwork < bytesReadFromNetwork) {
-            // If there is not enough room in the current block, write up to the end of the current
-            // block, set up a new segment (which may have data in the cache already), and write
-            // the rest of the data.
-            System.arraycopy(buffer, offset + bytesReadFromDisk, mCachedBytes,
-                    mStartInDataBlock + mDataBlockOffset, bytesAvailableInCurrentBlockForNetwork);
-            mDataBlockOffset += bytesAvailableInCurrentBlockForNetwork;
-
-            writeCacheToDiskAndClearVariables();
-
-            mCachedBytes = CacheService.getFromDiskCache(mSegment + mKey);
-            if (mCachedBytes == null) {
-                mCachedBytes = new byte[BLOCK_SIZE];
-            }
-
-            System.arraycopy(buffer,
-                    offset + bytesAvailableInCurrentBlockForNetwork + bytesReadFromDisk,
-                    mCachedBytes, mStartInDataBlock + mDataBlockOffset,
-                    bytesReadFromNetwork - bytesAvailableInCurrentBlockForNetwork);
-            mDataBlockOffset += bytesReadFromNetwork - bytesAvailableInCurrentBlockForNetwork;
-        } else {
-            System.arraycopy(buffer, offset + bytesReadFromDisk, mCachedBytes,
-                    mStartInDataBlock + mDataBlockOffset, bytesReadFromNetwork);
-            mDataBlockOffset += bytesReadFromNetwork;
-        }
-
-        return bytesReadFromNetwork + bytesReadFromDisk;
-    }
-
-    private static boolean areBytesAvailableInCache(final int farthestContiguousPoint,
-            final int startInFile, final int dataBlockOffset) {
-        return farthestContiguousPoint > startInFile + dataBlockOffset;
-    }
-
-    private void writeCacheToDiskAndClearVariables() {
-        CacheService.putToDiskCache(mSegment + mKey, mCachedBytes);
-        addNewInterval(mIntervals, mStartInFile, mDataBlockOffset);
-        mStartInDataBlock = 0;
-        mStartInFile = mStartInFile + mDataBlockOffset;
-        mDataBlockOffset = 0;
-        mSegment = mStartInFile / BLOCK_SIZE;
-    }
-
-    /**
-     * Gets the first contiguous point from disk that we have starting from the given point. If
-     * there is no segment that contains this point, return that point.
-     */
-    @VisibleForTesting
-    static int getFirstContiguousPointAfter(int point,
-            @NonNull final TreeSet<IntInterval> intervals) {
-        Preconditions.checkNotNull(intervals);
-
-        int lastContiguousPoint = point;
-        for (final IntInterval interval : intervals) {
-            if (interval.getStart() <= lastContiguousPoint) {
-                lastContiguousPoint = Math.max(lastContiguousPoint,
-                        interval.getStart() + interval.getLength());
-            }
-        }
-        return lastContiguousPoint;
-    }
-
-    /**
-     * Adds the interval if the interval does not already exist.
-     *
-     * @param intervals The current set of intervals
-     * @param start     The starting point of this interval
-     * @param length    The length of this interval
-     */
-    @VisibleForTesting
-    static void addNewInterval(@NonNull final TreeSet<IntInterval> intervals, final int start,
-            final int length) {
-        Preconditions.checkNotNull(intervals);
-
-        if (getFirstContiguousPointAfter(start, intervals) >= start + length) {
-            return;
-        }
-        intervals.add(new IntInterval(start, length));
-    }
-}
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaLayout.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaLayout.java
index b965e378..54428fba 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaLayout.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaLayout.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -26,6 +26,8 @@
 import com.mopub.mobileads.VastVideoProgressBarWidget;
 import com.mopub.mobileads.resource.DrawableConstants.GradientStrip;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 public class MediaLayout extends RelativeLayout {
     public enum Mode { IMAGE, PLAYING, LOADING, BUFFERING, PAUSED, FINISHED }
     public enum MuteState { MUTED, UNMUTED }
@@ -235,7 +237,7 @@ protected void onMeasure(final int widthMeasureSpec, final int heightMeasureSpec
 
         if (Math.abs(finalHeight - curHeight) >= 2
                 || Math.abs(finalWidth - curWidth) >= 2) {
-            MoPubLog.v(String.format("Resetting mediaLayout size to w: %d h: %d", finalWidth, finalHeight));
+            MoPubLog.log(CUSTOM, String.format("Resetting mediaLayout size to w: %d h: %d", finalWidth, finalHeight));
             getLayoutParams().width = finalWidth;
             getLayoutParams().height = finalHeight;
         }
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewBinder.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewBinder.java
index 6adf2ac8..cc0054ec 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewBinder.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewBinder.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewHolder.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewHolder.java
index 3457a2cf..7484bf89 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewHolder.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewHolder.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -13,6 +13,8 @@
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 class MediaViewHolder {
     @Nullable View mainView;
     @Nullable MediaLayout mediaLayout;
@@ -45,7 +47,7 @@ static MediaViewHolder fromViewBinder(@NonNull final View view,
                     (ImageView) view.findViewById(mediaViewBinder.privacyInformationIconImageId);
             return mediaViewHolder;
         } catch (ClassCastException exception) {
-            MoPubLog.w("Could not cast from id in MediaViewBinder to expected View type",
+            MoPubLog.log(CUSTOM, "Could not cast from id in MediaViewBinder to expected View type",
                     exception);
             return EMPTY_MEDIA_VIEW_HOLDER;
         }
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCache.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCache.java
new file mode 100644
index 00000000..ae8b02fc
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCache.java
@@ -0,0 +1,60 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.google.android.exoplayer2.upstream.cache.Cache;
+import com.google.android.exoplayer2.upstream.cache.LeastRecentlyUsedCacheEvictor;
+import com.google.android.exoplayer2.upstream.cache.SimpleCache;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.util.DeviceUtils;
+
+import java.io.File;
+
+class MoPubCache {
+
+    private static final String NATIVE_CACHE_NAME = "mopub-native-cache";
+
+    private volatile static Cache sInstance = null;
+
+    @Nullable
+    static Cache getCacheInstance(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        Cache instance = sInstance;
+        if (instance == null) {
+            synchronized (MoPubCache.class) {
+                instance = sInstance;
+                if (instance == null) {
+                    final File cacheDir = context.getApplicationContext().getCacheDir();
+
+                    if (cacheDir != null) {
+                        final File nativeCacheDir = new File(cacheDir.getPath()
+                                + File.separator
+                                + NATIVE_CACHE_NAME);
+                        final long cacheSize = DeviceUtils.diskCacheSizeBytes(cacheDir);
+                        final LeastRecentlyUsedCacheEvictor lruEvictor = new LeastRecentlyUsedCacheEvictor(cacheSize);
+                        instance = new SimpleCache(nativeCacheDir, lruEvictor);
+                        sInstance = instance;
+                    }
+                }
+            }
+        }
+
+        return instance;
+    }
+
+    @VisibleForTesting
+    static void resetInstance() {
+        if (sInstance != null) {
+            sInstance.release();
+            sInstance = null;
+        }
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
index dc1c22ae..30b2ff11 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -50,10 +50,22 @@
 import static com.mopub.common.DataKeys.PAUSE_VISIBLE_PERCENT;
 import static com.mopub.common.DataKeys.PLAY_VISIBLE_PERCENT;
 import static com.mopub.common.DataKeys.VIDEO_TRACKERS_KEY;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.CLICKED;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.CUSTOM_WITH_THROWABLE;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_FAILED;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_SUCCESS;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.SHOW_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.SHOW_FAILED;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.SHOW_SUCCESS;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.WILL_LEAVE_APPLICATION;
 import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
 import static com.mopub.nativeads.NativeVideoController.VisibilityTrackingEvent;
 
 public class MoPubCustomEventVideoNative extends CustomEventNative {
+    public static final String ADAPTER_NAME = MoPubCustomEventVideoNative.class.getSimpleName();
+
     private MoPubVideoNativeAd videoNativeAd;
     @Override
     protected void loadNativeAd(@NonNull final Context context,
@@ -63,6 +75,9 @@ protected void loadNativeAd(@NonNull final Context context,
         final Object json = localExtras.get(JSON_BODY_KEY);
         // null or non-JSONObjects should not be passed in localExtras as JSON_BODY_KEY
         if (!(json instanceof JSONObject)) {
+            MoPubLog.log(LOAD_FAILED, ADAPTER_NAME,
+                    NativeErrorCode.INVALID_RESPONSE.getIntCode(),
+                    NativeErrorCode.INVALID_RESPONSE);
             customEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
             return;
         }
@@ -71,6 +86,9 @@ protected void loadNativeAd(@NonNull final Context context,
 
         final VideoResponseHeaders videoResponseHeaders = new VideoResponseHeaders(serverExtras);
         if (!videoResponseHeaders.hasValidHeaders()) {
+            MoPubLog.log(LOAD_FAILED, ADAPTER_NAME,
+                    NativeErrorCode.INVALID_RESPONSE.getIntCode(),
+                    NativeErrorCode.INVALID_RESPONSE);
             customEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
             return;
         }
@@ -80,6 +98,9 @@ protected void loadNativeAd(@NonNull final Context context,
         // Ensure click tracking url is a non-empty String
         if (!(clickTrackingUrlFromHeaderObject instanceof String) ||
                 TextUtils.isEmpty((String) clickTrackingUrlFromHeaderObject)) {
+            MoPubLog.log(LOAD_FAILED, ADAPTER_NAME,
+                    NativeErrorCode.UNSPECIFIED.getIntCode(),
+                    NativeErrorCode.UNSPECIFIED);
             customEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
             return;
         }
@@ -91,6 +112,9 @@ protected void loadNativeAd(@NonNull final Context context,
         try {
             videoNativeAd.loadAd();
         } catch (IllegalArgumentException e) {
+            MoPubLog.log(LOAD_FAILED, ADAPTER_NAME,
+                    NativeErrorCode.UNSPECIFIED.getIntCode(),
+                    NativeErrorCode.UNSPECIFIED);
             customEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
         }
     }
@@ -254,6 +278,7 @@ public void onVisibilityChanged(final List<View> visibleViews,
         }
 
         void loadAd() throws IllegalArgumentException {
+            MoPubLog.log(LOAD_ATTEMPTED, ADAPTER_NAME);
             if (!containsRequiredKeys(mJsonObject)) {
                 throw new IllegalArgumentException("JSONObject did not contain required keys.");
             }
@@ -281,6 +306,7 @@ void loadAd() throws IllegalArgumentException {
             preCacheImages(mContext, getAllImageUrls(), new NativeImageHelper.ImageListener() {
                 @Override
                 public void onImagesCached() {
+                    MoPubLog.log(LOAD_SUCCESS, ADAPTER_NAME);
                     if(isInvalidated()) {
                         return;
                     }
@@ -295,6 +321,9 @@ public void onImagesFailedToCache(final NativeErrorCode errorCode) {
                     if(isInvalidated()) {
                         return;
                     }
+                    MoPubLog.log(LOAD_FAILED, ADAPTER_NAME,
+                            errorCode.getIntCode(),
+                            errorCode);
                     mCustomEventNativeListener.onNativeAdFailed(errorCode);
                 }
             });
@@ -303,6 +332,9 @@ public void onImagesFailedToCache(final NativeErrorCode errorCode) {
         @Override
         public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideoConfig) {
             if (vastVideoConfig == null) {
+                MoPubLog.log(LOAD_FAILED, ADAPTER_NAME,
+                        NativeErrorCode.INVALID_RESPONSE.getIntCode(),
+                        NativeErrorCode.INVALID_RESPONSE);
                 mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
                 return;
             }
@@ -373,6 +405,7 @@ public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideo
             mNativeVideoController = mNativeVideoControllerFactory.createForId(
                     mId, mContext, visibilityTrackingEvents, mVastVideoConfig);
 
+            MoPubLog.log(LOAD_SUCCESS, ADAPTER_NAME);
             mCustomEventNativeListener.onNativeAdLoaded(this);
 
             // Internal Video Trackers
@@ -435,12 +468,12 @@ private void addInstanceVariable(@NonNull final Parameter key,
                         setPrivacyInformationIconClickThroughUrl((String) value);
                         break;
                     default:
-                        MoPubLog.d("Unable to add JSON key to internal mapping: " + key.mName);
+                        MoPubLog.log(CUSTOM, "Unable to add JSON key to internal mapping: " + key.mName);
                         break;
                 }
             } catch (ClassCastException e) {
                 if (!key.mRequired) {
-                    MoPubLog.d("Ignoring class cast exception for optional key: " + key.mName);
+                    MoPubLog.log(CUSTOM, "Ignoring class cast exception for optional key: " + key.mName);
                 } else {
                     throw e;
                 }
@@ -457,6 +490,7 @@ private void parseClickTrackers(@NonNull final Object clickTrackers) {
 
         @Override
         public void render(@NonNull MediaLayout mediaLayout) {
+            MoPubLog.log(SHOW_ATTEMPTED, ADAPTER_NAME);
             Preconditions.checkNotNull(mediaLayout);
 
             mVideoVisibleTracking.addView(mRootView,
@@ -495,6 +529,9 @@ public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int
 
                     mNeedsSeek = true;
                     maybeChangeState();
+                    if (mVideoState == VideoState.PLAYING || mVideoState == VideoState.PLAYING_MUTED) {
+                        MoPubLog.log(SHOW_SUCCESS, ADAPTER_NAME);
+                    }
                 }
 
                 @Override
@@ -534,6 +571,7 @@ public void onClick(final View v) {
             mMediaLayout.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(final View v) {
+                    MoPubLog.log(CLICKED, ADAPTER_NAME);
                     prepareToLeaveView();
                     mNativeVideoController.triggerImpressionTrackers();
                     MraidVideoPlayerActivity.startNativeVideo(mContext, mId, mVastVideoConfig);
@@ -588,7 +626,9 @@ public void onStateChanged(final boolean playWhenReady, final int playbackState)
 
         @Override
         public void onError(final Exception e) {
-            MoPubLog.w("Error playing back video.", e);
+            MoPubLog.log(SHOW_FAILED, ADAPTER_NAME,
+                    NativeErrorCode.UNSPECIFIED.getIntCode(),
+                    NativeErrorCode.UNSPECIFIED);
             mError = true;
             maybeChangeState();
         }
@@ -630,6 +670,7 @@ private void cleanUpMediaLayout() {
         }
 
         private void prepareToLeaveView() {
+            MoPubLog.log(WILL_LEAVE_APPLICATION, ADAPTER_NAME);
             mNeedsSeek = true;
             mNeedsPrepare = true;
 
@@ -948,14 +989,14 @@ public NativeVideoController createForId(final long id,
                 try {
                     mImpressionVisiblePx = Integer.parseInt(impressionVisiblePxString);
                 } catch (NumberFormatException e) {
-                    MoPubLog.d("Unable to parse impression min visible px from server extras.");
+                    MoPubLog.log(CUSTOM, "Unable to parse impression min visible px from server extras.");
                 }
             }
             try {
                 mImpressionMinVisiblePercent =
                         Integer.parseInt(serverExtras.get(IMPRESSION_MIN_VISIBLE_PERCENT));
             } catch (NumberFormatException e) {
-                MoPubLog.d("Unable to parse impression min visible percent from server extras.");
+                MoPubLog.log(CUSTOM, "Unable to parse impression min visible percent from server extras.");
                 if (mImpressionVisiblePx == null || mImpressionVisiblePx < 0) {
                     mHeadersAreValid = false;
                 }
@@ -970,7 +1011,7 @@ public NativeVideoController createForId(final long id,
             try {
                 mVideoTrackers = new JSONObject(videoTrackers);
             } catch (JSONException e) {
-                MoPubLog.d("Failed to parse video trackers to JSON: " + videoTrackers, e);
+                MoPubLog.log(CUSTOM_WITH_THROWABLE, "Failed to parse video trackers to JSON: " + videoTrackers, e);
                 mVideoTrackers = null;
             }
         }
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java
index e639e757..c2474977 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
index 7819ccf1..0ef32171 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
index efff2679..e9157382 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -40,15 +40,19 @@
 import com.google.android.exoplayer2.trackselection.TrackSelector;
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.DefaultAllocator;
+import com.google.android.exoplayer2.upstream.DefaultHttpDataSource;
+import com.google.android.exoplayer2.upstream.cache.Cache;
+import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
 import com.google.android.exoplayer2.video.MediaCodecVideoRenderer;
+
 import com.mopub.common.Preconditions;
+import com.mopub.common.VisibilityTracker.VisibilityChecker;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.RepeatingHandlerRunnable;
 import com.mopub.mobileads.VastTracker;
 import com.mopub.mobileads.VastVideoConfig;
 import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable.ProgressListener;
-import com.mopub.common.VisibilityTracker.VisibilityChecker;
 import com.mopub.network.TrackingRequest;
 
 import java.lang.ref.WeakReference;
@@ -57,6 +61,8 @@
 import java.util.List;
 import java.util.Map;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 /**
  * Wrapper class around the {@link ExoPlayer} to provide a nice interface into the player along
  * with some helper methods. This class is not thread safe.
@@ -303,7 +309,7 @@ public void onLoadingChanged(boolean isLoading) {}
     public void onPlayerStateChanged(final boolean playWhenReady, final int newState) {
         if (newState == STATE_ENDED && mFinalFrame == null) {
             if (mExoPlayer == null || mSurface == null || mTextureView == null) {
-                MoPubLog.w("onPlayerStateChanged called afer view has been recycled.");
+                MoPubLog.log(CUSTOM, "onPlayerStateChanged called afer view has been recycled.");
                 return;
             }
 
@@ -412,7 +418,15 @@ private void preparePlayer() {
             final DataSource.Factory dataSourceFactory = new DataSource.Factory() {
                 @Override
                 public DataSource createDataSource() {
-                    return new HttpDiskCompositeDataSource(mContext, "exo_demo");
+                    DataSource dataSource = new DefaultHttpDataSource("exo_demo",
+                            null);
+                    final Cache cache = MoPubCache.getCacheInstance(mContext);
+
+                    if (cache != null) {
+                        dataSource = new CacheDataSource(cache, dataSource);
+                    }
+
+                    return dataSource;
                 }
             };
 
@@ -459,7 +473,7 @@ private void setExoAudio(final float volume) {
         final PlayerMessage playerMessage =  exoPlayer.createMessage(audioRenderer);
 
         if (playerMessage == null) {
-            MoPubLog.d("ExoPlayer.createMessage returned null.");
+            MoPubLog.log(CUSTOM, "ExoPlayer.createMessage returned null.");
             return;
         }
 
@@ -479,7 +493,7 @@ private void setExoSurface(@Nullable final Surface surface) {
         final PlayerMessage playerMessage =  exoPlayer.createMessage(videoRenderer);
 
         if (playerMessage == null) {
-            MoPubLog.d("ExoPlayer.createMessage returned null.");
+            MoPubLog.log(CUSTOM, "ExoPlayer.createMessage returned null.");
             return;
         }
 
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
index ef6ef131..2eded183 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -31,6 +31,8 @@
 import com.mopub.nativeads.NativeFullScreenVideoView.Mode;
 import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.ERROR;
+
 public class NativeVideoViewController extends BaseVideoViewController implements TextureView
         .SurfaceTextureListener, NativeVideoController.Listener,
         AudioManager.OnAudioFocusChangeListener {
@@ -222,7 +224,7 @@ public void onStateChanged(final boolean playWhenReady, final int playbackState)
 
     @Override
     public void onError(final Exception e) {
-        MoPubLog.w("Error playing back video.", e);
+        MoPubLog.log(ERROR, "Error playing back video.", e);
         mError = true;
         maybeChangeState();
     }
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java
index e0b4b437..463d816c 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle b/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle
index fe56fb89..40488982 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/common/MoPubReward.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/common/MoPubReward.java
index abf65399..69f94398 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/common/MoPubReward.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/common/MoPubReward.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/AdLoaderRewardedVideo.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/AdLoaderRewardedVideo.java
index eb5ee100..8746f0d9 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/AdLoaderRewardedVideo.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/AdLoaderRewardedVideo.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedAd.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedAd.java
index 8967a1a1..9e3da0c2 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedAd.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedAd.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -15,6 +15,8 @@
 
 import java.util.Map;
 
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.CUSTOM;
+
 /**
  * The base class when dealing with rewarded formats.
  */
@@ -48,7 +50,7 @@ final void loadCustomEvent(@NonNull Activity launcherActivity,
             }
             loadWithSdkInitialized(launcherActivity, localExtras, serverExtras);
         } catch (Exception e) {
-            MoPubLog.e(e.getMessage());
+            MoPubLog.log(CUSTOM, e.getMessage());
         }
     }
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedPlayable.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedPlayable.java
index 57dacf22..9821690e 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedPlayable.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedPlayable.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
index aac8d2bd..65fb9987 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
index 2009886e..b6d58560 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -19,7 +19,14 @@
 import java.util.Map;
 
 import static com.mopub.common.Constants.AD_EXPIRATION_DELAY;
-import static com.mopub.mobileads.MoPubErrorCode.EXPIRED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.CLICKED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.EXPIRED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.LOAD_SUCCESS;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.SHOW_FAILED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.SHOW_SUCCESS;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.WILL_DISAPPEAR;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.WILL_LEAVE_APPLICATION;
 
 /**
  * Contains the common logic for rewarded ads.
@@ -59,7 +66,7 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity,
         if (rewardedAdCurrencyName instanceof String) {
             mRewardedAdCurrencyName = (String) rewardedAdCurrencyName;
         } else {
-            MoPubLog.d("No currency name specified for rewarded video. Using the default name.");
+            MoPubLog.log(CUSTOM, "No currency name specified for rewarded video. Using the default name.");
             mRewardedAdCurrencyName = MoPubReward.NO_REWARD_LABEL;
         }
 
@@ -70,21 +77,21 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity,
                 mRewardedAdCurrencyAmount = Integer.parseInt(
                         (String) rewardedAdCurrencyAmount);
             } catch (NumberFormatException e) {
-                MoPubLog.d(
+                MoPubLog.log(CUSTOM,
                         "Unable to convert currency amount: " + rewardedAdCurrencyAmount +
                                 ". Using the default reward amount: " +
                                 MoPubReward.DEFAULT_REWARD_AMOUNT);
                 mRewardedAdCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
             }
         } else {
-            MoPubLog.d(
+            MoPubLog.log(CUSTOM,
                     "No currency amount specified for rewarded ad. Using the default reward amount: " +
                             MoPubReward.DEFAULT_REWARD_AMOUNT);
             mRewardedAdCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
         }
 
         if (mRewardedAdCurrencyAmount < 0) {
-            MoPubLog.d(
+            MoPubLog.log(CUSTOM,
                     "Negative currency amount specified for rewarded ad. Using the default reward amount: " +
                             MoPubReward.DEFAULT_REWARD_AMOUNT);
             mRewardedAdCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
@@ -94,7 +101,7 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity,
         if (adUnitId instanceof String) {
             mAdUnitId = (String) adUnitId;
         } else {
-            MoPubLog.d("Unable to set ad unit for rewarded ad.");
+            MoPubLog.log(CUSTOM, "Unable to set ad unit for rewarded ad.");
         }
     }
 
@@ -125,8 +132,8 @@ public MoPubRewardedAdListener(@NonNull final Class<? extends MoPubRewardedAd>
             mAdExpiration = new Runnable() {
                 @Override
                 public void run() {
-                    MoPubLog.d("Expiring unused Rewarded ad.");
-                    onInterstitialFailed(EXPIRED);
+                    MoPubLog.log(EXPIRED, "time in seconds");
+                    onInterstitialFailed(MoPubErrorCode.EXPIRED);
                 }
             };
 
@@ -134,6 +141,7 @@ public void run() {
 
         @Override
         public void onInterstitialLoaded() {
+            MoPubLog.log(LOAD_SUCCESS);
             mIsLoaded = true;
             // Expire MoPub ads to synchronize with MoPub Ad Server tracking window
             if (AdTypeTranslator.CustomEventType.isMoPubSpecific(mCustomEventClass.getName())) {
@@ -145,6 +153,7 @@ public void onInterstitialLoaded() {
 
         @Override
         public void onInterstitialFailed(final MoPubErrorCode errorCode) {
+            MoPubLog.log(SHOW_FAILED, errorCode.getIntCode(), errorCode);
             mHandler.removeCallbacks(mAdExpiration);
             switch (errorCode) {
                 case VIDEO_PLAYBACK_ERROR:
@@ -159,12 +168,14 @@ public void onInterstitialFailed(final MoPubErrorCode errorCode) {
 
         @Override
         public void onInterstitialShown() {
+            MoPubLog.log(SHOW_SUCCESS);
             mHandler.removeCallbacks(mAdExpiration);
             MoPubRewardedVideoManager.onRewardedVideoStarted(mCustomEventClass, getAdNetworkId());
         }
 
         @Override
         public void onInterstitialClicked() {
+            MoPubLog.log(CLICKED);
             MoPubRewardedVideoManager.onRewardedVideoClicked(mCustomEventClass, getAdNetworkId());
         }
 
@@ -174,10 +185,12 @@ public void onInterstitialImpression() {
 
         @Override
         public void onLeaveApplication() {
+            MoPubLog.log(WILL_LEAVE_APPLICATION);
         }
 
         @Override
         public void onInterstitialDismissed() {
+            MoPubLog.log(WILL_DISAPPEAR);
             MoPubRewardedVideoManager.onRewardedVideoClosed(mCustomEventClass, getAdNetworkId());
             onInvalidate();
         }
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java
index 0174b54c..e0e76a05 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -15,6 +15,8 @@
 
 import java.util.Map;
 
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.CUSTOM;
+
 /**
  * A custom event for showing MoPub rewarded playables.
  */
@@ -34,7 +36,7 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity,
         super.loadWithSdkInitialized(activity, localExtras, serverExtras);
 
         if (mRewardedMraidInterstitial == null) {
-            MoPubLog.w("mRewardedMraidInterstitial is null. Has this class been invalidated?");
+            MoPubLog.log(CUSTOM, "mRewardedMraidInterstitial is null. Has this class been invalidated?");
             return;
         }
         mRewardedMraidInterstitial.loadInterstitial(activity, new MoPubRewardedPlayableListener(),
@@ -59,10 +61,10 @@ protected void onInvalidate() {
     @Override
     protected void show() {
         if (isReady() && mRewardedMraidInterstitial != null) {
-            MoPubLog.d("Showing MoPub rewarded playable.");
+            MoPubLog.log(CUSTOM, "Showing MoPub rewarded playable.");
             mRewardedMraidInterstitial.showInterstitial();
         } else {
-            MoPubLog.d("MoPub rewarded playable not loaded. Unable to show playable.");
+            MoPubLog.log(CUSTOM, "MoPub rewarded playable not loaded. Unable to show playable.");
         }
     }
 
@@ -75,7 +77,7 @@ public MoPubRewardedPlayableListener() {
         @Override
         public void onMraidComplete() {
             if (getRewardedAdCurrencyName() == null) {
-                MoPubLog.d("No rewarded video was loaded, so no reward is possible");
+                MoPubLog.log(CUSTOM, "No rewarded video was loaded, so no reward is possible");
             } else {
                 MoPubRewardedVideoManager.onRewardedVideoCompleted(mCustomEventClass,
                         getAdNetworkId(),
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
index 71e32940..369b66a3 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -14,6 +14,8 @@
 
 import java.util.Map;
 
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.CUSTOM;
+
 /**
  * A custom event for showing MoPub rewarded videos.
  */
@@ -49,7 +51,7 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity,
         super.loadWithSdkInitialized(activity, localExtras, serverExtras);
 
         if (mRewardedVastVideoInterstitial == null) {
-            MoPubLog.w("mRewardedVastVideoInterstitial is null. Has this class been invalidated?");
+            MoPubLog.log(CUSTOM, "mRewardedVastVideoInterstitial is null. Has this class been invalidated?");
             return;
         }
         mRewardedVastVideoInterstitial.loadInterstitial(activity,
@@ -60,10 +62,10 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity,
     @Override
     protected void show() {
         if (isReady() && mRewardedVastVideoInterstitial != null) {
-            MoPubLog.d("Showing MoPub rewarded video.");
+            MoPubLog.log(CUSTOM, "Showing MoPub rewarded video.");
             mRewardedVastVideoInterstitial.showInterstitial();
         } else {
-            MoPubLog.d("Unable to show MoPub rewarded video");
+            MoPubLog.log(CUSTOM, "Unable to show MoPub rewarded video");
         }
     }
 
@@ -77,7 +79,7 @@ public MoPubRewardedVideoListener() {
         @Override
         public void onVideoComplete() {
             if (getRewardedAdCurrencyName() == null) {
-                MoPubLog.d("No rewarded video was loaded, so no reward is possible");
+                MoPubLog.log(CUSTOM, "No rewarded video was loaded, so no reward is possible");
             } else {
                 MoPubRewardedVideoManager.onRewardedVideoCompleted(mCustomEventClass,
                         getAdNetworkId(),
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java
index 51a99e20..87246eb4 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
index 39827747..05b10318 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -42,14 +42,12 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.LinkedHashSet;
-import java.util.LinkedList;
-import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.TreeMap;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 import static com.mopub.mobileads.MoPubErrorCode.EXPIRED;
 
 /**
@@ -139,70 +137,11 @@ private MoPubRewardedVideoManager(@NonNull Activity mainActivity, MediationSetti
                 SharedPreferencesHelper.getSharedPreferences(mContext, CUSTOM_EVENT_PREF_NAME);
     }
 
-    @NonNull
-    public static synchronized List<CustomEventRewardedVideo> initNetworks(
-            @NonNull final Activity mainActivity,
-            @NonNull final List<Class<? extends CustomEventRewardedVideo>> networksToInit) {
-        Preconditions.checkNotNull(mainActivity);
-        Preconditions.checkNotNull(networksToInit);
-
-        if (sInstance == null) {
-            logErrorNotInitialized();
-            return Collections.emptyList();
-        }
-
-        // List of networks that end up getting initialized.
-        List<CustomEventRewardedVideo> initializedNetworksList = new LinkedList<>();
-
-        // Fetch saved network init settings from SharedPrefs.
-        final Map<String, ?> networkInitSettings = sCustomEventSharedPrefs.getAll();
-        MoPubLog.d(String.format(Locale.US, "fetched init settings for %s networks: %s",
-                networkInitSettings.size(), networkInitSettings.keySet()));
-
-        // Dedupe array of networks to init.
-        final LinkedHashSet<Class<? extends CustomEventRewardedVideo>> uniqueNetworksToInit =
-                new LinkedHashSet<>(networksToInit);
-
-        for (Class<? extends CustomEventRewardedVideo> networkClass : uniqueNetworksToInit) {
-            final String networkClassName = networkClass.getName();
-            if (networkInitSettings.containsKey(networkClassName)) {
-                try {
-                    final String networkInitParamsJsonString =
-                            (String) networkInitSettings.get(networkClassName);
-
-                    final Map<String, String> networkInitParamsMap =
-                            Json.jsonStringToMap(networkInitParamsJsonString);
-
-                    final CustomEventRewardedVideo customEvent =
-                            Reflection.instantiateClassWithEmptyConstructor(
-                                    networkClassName,
-                                    CustomEventRewardedVideo.class);
-
-                    MoPubLog.d(String.format(Locale.US, "Initializing %s with params %s",
-                            networkClassName, networkInitParamsMap));
-
-                    customEvent.checkAndInitializeSdk(
-                            mainActivity,
-                            Collections.<String, Object>emptyMap(),
-                            networkInitParamsMap);
-
-                    initializedNetworksList.add(customEvent);
-                } catch (Exception e) {
-                    MoPubLog.e("Error fetching init settings for network " + networkClassName);
-                }
-            } else {
-                MoPubLog.d("Init settings not found for " + networkClassName);
-            }
-        }
-
-        return initializedNetworksList;
-    }
-
     public static synchronized void init(@NonNull Activity mainActivity, MediationSettings... mediationSettings) {
         if (sInstance == null) {
             sInstance = new MoPubRewardedVideoManager(mainActivity, mediationSettings);
         } else {
-            MoPubLog.e("Tried to call initializeRewardedVideo more than once. Only the first " +
+            MoPubLog.log(CUSTOM, "Tried to call initializeRewardedVideo more than once. Only the first " +
                     "initialization call has any effect.");
         }
     }
@@ -310,13 +249,13 @@ public static void loadVideo(@NonNull final String adUnitId,
         final String currentlyShowingAdUnitId =
                 sInstance.mRewardedAdData.getCurrentlyShowingAdUnitId();
         if (adUnitId.equals(currentlyShowingAdUnitId)) {
-            MoPubLog.d(String.format(Locale.US, "Did not queue rewarded ad request for ad " +
+            MoPubLog.log(CUSTOM, String.format(Locale.US, "Did not queue rewarded ad request for ad " +
                     "unit %s. The ad is already showing.", adUnitId));
             return;
         }
 
         if (sInstance.rewardedAdsLoaders.canPlay(adUnitId)) {
-            MoPubLog.d(String.format(Locale.US, "Did not queue rewarded ad request for ad " +
+            MoPubLog.log(CUSTOM, String.format(Locale.US, "Did not queue rewarded ad request for ad " +
             "unit %s. This ad unit already finished loading and is ready to show.", adUnitId));
             postToInstance(new Runnable() {
                 @Override
@@ -364,18 +303,13 @@ private static void loadVideo(@NonNull String adUnitId, @NonNull String adUrlStr
 
     private void fetchAd(@NonNull String adUnitId, @NonNull String adUrlString, @Nullable MoPubErrorCode errorCode) {
         if (rewardedAdsLoaders.isLoading(adUnitId)) {
-            MoPubLog.d(String.format(Locale.US, "Did not queue rewarded ad request for ad " +
-                    "unit %s. A request is already pending.", adUnitId));
-            return;
-        }
-        if (rewardedAdsLoaders.isLoading(adUnitId)) {
-            MoPubLog.d(String.format(Locale.US, "Did not queue rewarded ad request for ad " +
+            MoPubLog.log(CUSTOM, String.format(Locale.US, "Did not queue rewarded ad request for ad " +
                     "unit %s. A request is already pending.", adUnitId));
             return;
         }
 
         // Issue MoPub request
-        MoPubLog.d(String.format(Locale.US,
+        MoPubLog.log(CUSTOM, String.format(Locale.US,
                 "Loading rewarded ad request for ad unit %s with URL %s", adUnitId, adUrlString));
         rewardedAdsLoaders.loadNextAd(mContext, adUnitId, adUrlString, errorCode);
     }
@@ -402,7 +336,7 @@ public static void showVideo(@NonNull String adUnitId,
         }
 
         if (customData != null && customData.length() > CUSTOM_DATA_MAX_LENGTH_BYTES) {
-            MoPubLog.w(String.format(
+            MoPubLog.log(CUSTOM, String.format(
                     Locale.US,
                     "Provided rewarded ad custom data parameter longer than supported" +
                             "(%d bytes, %d maximum)",
@@ -426,9 +360,9 @@ public static void showVideo(@NonNull String adUnitId,
             customEvent.show();
         } else {
             if (sInstance.rewardedAdsLoaders.isLoading(adUnitId)) {
-                MoPubLog.d("Rewarded ad is not ready to be shown yet.");
+                MoPubLog.log(CUSTOM, "Rewarded ad is not ready to be shown yet.");
             } else {
-                MoPubLog.d("No rewarded ad loading or loaded.");
+                MoPubLog.log(CUSTOM, "No rewarded ad loading or loaded.");
             }
 
             sInstance.failover(adUnitId, MoPubErrorCode.VIDEO_NOT_AVAILABLE);
@@ -480,7 +414,7 @@ void onAdSuccess(AdResponse adResponse) {
         final String customEventClassName = adResponse.getCustomEventClassName();
 
         if (customEventClassName == null) {
-            MoPubLog.e("Couldn't create custom event, class name was null.");
+            MoPubLog.log(CUSTOM, "Couldn't create custom event, class name was null.");
             failover(adUnitId, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
             return;
         }
@@ -537,7 +471,7 @@ void onAdSuccess(AdResponse adResponse) {
                 try {
                     parseMultiCurrencyJson(adUnitId, rewardedCurrencies);
                 } catch (Exception e) {
-                    MoPubLog.e("Error parsing rewarded currencies JSON header: " + rewardedCurrencies);
+                    MoPubLog.log(CUSTOM, "Error parsing rewarded currencies JSON header: " + rewardedCurrencies);
                     failover(adUnitId, MoPubErrorCode.REWARDED_CURRENCIES_PARSING_ERROR);
                     return;
                 }
@@ -548,7 +482,7 @@ void onAdSuccess(AdResponse adResponse) {
 
             Activity mainActivity = mMainActivity.get();
             if (mainActivity == null) {
-                MoPubLog.d("Could not load custom event because Activity reference was null. Call" +
+                MoPubLog.log(CUSTOM, "Could not load custom event because Activity reference was null. Call" +
                         " MoPub#updateActivity before requesting more rewarded ads.");
 
                 // Don't go through the ordinary failover process since we have
@@ -561,7 +495,7 @@ void onAdSuccess(AdResponse adResponse) {
             Runnable timeout = new Runnable() {
                 @Override
                 public void run() {
-                    MoPubLog.d("Custom Event failed to load rewarded ad in a timely fashion.");
+                    MoPubLog.log(CUSTOM, "Custom Event failed to load rewarded ad in a timely fashion.");
                     onRewardedVideoLoadFailure(customEvent.getClass(), customEvent.getAdNetworkId(),
                             MoPubErrorCode.NETWORK_TIMEOUT);
                     customEvent.onInvalidate();
@@ -579,26 +513,25 @@ public void run() {
             if (customEvent instanceof CustomEventRewardedVideo) {
                 final String serverExtrasJsonString = (new JSONObject(serverExtras)).toString();
 
-                MoPubLog.d(String.format(Locale.US,
+                MoPubLog.log(CUSTOM, String.format(Locale.US,
                         "Updating init settings for custom event %s with params %s",
                         customEventClassName, serverExtrasJsonString));
 
-                // https://github.com/robolectric/robolectric/issues/3641
                 sCustomEventSharedPrefs
                         .edit()
                         .putString(customEventClassName, serverExtrasJsonString)
-                        .commit();
+                        .apply();
             }
 
             // Load custom event
-            MoPubLog.d(String.format(Locale.US,
+            MoPubLog.log(CUSTOM, String.format(Locale.US,
                     "Loading custom event with class name %s", customEventClassName));
             customEvent.loadCustomEvent(mainActivity, localExtras, serverExtras);
 
             final String adNetworkId = customEvent.getAdNetworkId();
             mRewardedAdData.updateAdUnitCustomEventMapping(adUnitId, customEvent, adNetworkId);
         } catch (Exception e) {
-            MoPubLog.e(String.format(Locale.US,
+            MoPubLog.log(CUSTOM, String.format(Locale.US,
                     "Couldn't create custom event with class name %s", customEventClassName));
             failover(adUnitId, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
         }
@@ -940,8 +873,9 @@ private static void postToInstance(@NonNull Runnable runnable) {
     }
 
     private static void logErrorNotInitialized() {
-        MoPubLog.e("MoPub rewarded ads must be initialized with an Activity Context " +
-                "before calling rewarded ads methods.");
+        MoPubLog.log(CUSTOM, "MoPub rewarded ad was not initialized. You must call " +
+                "MoPub.initializeRewardedVideo() before loading or attempting " +
+                "to play rewarded ads.");
     }
 
     /**
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
index 3f1729ef..fb7ea03a 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -7,16 +7,13 @@
 import android.app.Activity;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.text.TextUtils;
 
 import com.mopub.common.MediationSettings;
 import com.mopub.common.MoPubReward;
 import com.mopub.common.Preconditions;
 import com.mopub.common.SdkConfiguration;
-import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.ReflectionTarget;
 
-import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
 
@@ -34,17 +31,6 @@ private static void initializeRewardedVideo(@NonNull Activity activity,
         MoPubRewardedVideoManager.init(activity, mediationSettings);
     }
 
-    @ReflectionTarget
-    private static void initializeRewardedVideo(@NonNull Activity activity,
-            @NonNull List<Class<? extends CustomEventRewardedVideo>> networksToInit,
-            MediationSettings... mediationSettings) {
-        Preconditions.checkNotNull(activity);
-        Preconditions.checkNotNull(networksToInit);
-
-        MoPubRewardedVideoManager.init(activity, mediationSettings);
-        MoPubRewardedVideoManager.initNetworks(activity, networksToInit);
-    }
-
     /**
      * Use MoPub#initializeSdk instead.
      */
@@ -55,31 +41,7 @@ private static void initializeRewardedVideo(@NonNull final Activity activity,
         Preconditions.checkNotNull(activity);
         Preconditions.checkNotNull(sdkConfiguration);
 
-        final List<String> networksToInit = sdkConfiguration.getNetworksToInit();
-        final List<Class<? extends CustomEventRewardedVideo>> classList = new ArrayList<>();
-        if (networksToInit != null) {
-            for (final String networkClassName : networksToInit) {
-                if (TextUtils.isEmpty(networkClassName)) {
-                    continue;
-                }
-                try {
-                    final Class networkClass = Class.forName(networkClassName);
-                    classList.add(networkClass.asSubclass(CustomEventRewardedVideo.class));
-                } catch (ClassNotFoundException e) {
-                    MoPubLog.w("Ignoring unknown class name " + networkClassName);
-                } catch (ClassCastException e) {
-                    MoPubLog.w(
-                            "Unable to cast " + networkClassName +
-                                    " to Class<? extends CustomEventRewardedVideo>.");
-                }
-            }
-        }
-
-        if (!classList.isEmpty()) {
-            initializeRewardedVideo(activity, classList, sdkConfiguration.getMediationSettings());
-        } else {
-            initializeRewardedVideo(activity, sdkConfiguration.getMediationSettings());
-        }
+        initializeRewardedVideo(activity, sdkConfiguration.getMediationSettings());
     }
 
     @ReflectionTarget
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdData.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdData.java
index b17ce665..88dd2ffe 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdData.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdData.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -23,6 +23,8 @@
 import java.util.Set;
 import java.util.TreeMap;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 /**
  * Used to manage the mapping between MoPub ad unit ids and third-party ad network ids for rewarded ads.
  */
@@ -78,7 +80,7 @@ void addAvailableReward(
             @Nullable String currencyAmount) {
         Preconditions.checkNotNull(moPubId);
         if (currencyName == null || currencyAmount == null) {
-            MoPubLog.e(String.format(Locale.US, "Currency name and amount cannot be null: " +
+            MoPubLog.log(CUSTOM, String.format(Locale.US, "Currency name and amount cannot be null: " +
                     "name = %s, amount = %s", currencyName, currencyAmount));
             return;
         }
@@ -87,13 +89,13 @@ void addAvailableReward(
         try {
             intCurrencyAmount = Integer.parseInt(currencyAmount);
         } catch(NumberFormatException e) {
-            MoPubLog.e(String.format(Locale.US, "Currency amount must be an integer: %s",
+            MoPubLog.log(CUSTOM, String.format(Locale.US, "Currency amount must be an integer: %s",
                     currencyAmount));
             return;
         }
 
         if (intCurrencyAmount < 0) {
-            MoPubLog.e(String.format(Locale.US, "Currency amount cannot be negative: %s",
+            MoPubLog.log(CUSTOM, String.format(Locale.US, "Currency amount cannot be negative: %s",
                     currencyAmount));
             return;
         }
@@ -121,13 +123,13 @@ void selectReward(@NonNull String moPubId, @NonNull MoPubReward selectedReward)
 
         Set<MoPubReward> availableRewards = mAdUnitToAvailableRewardsMap.get(moPubId);
         if (availableRewards == null || availableRewards.isEmpty()) {
-            MoPubLog.e(String.format(
+            MoPubLog.log(CUSTOM, String.format(
                     Locale.US, "AdUnit %s does not have any rewards.", moPubId));
             return;
         }
 
         if (!availableRewards.contains(selectedReward)) {
-            MoPubLog.e(String.format(
+            MoPubLog.log(CUSTOM, String.format(
                     Locale.US, "Selected reward is invalid for AdUnit %s.", moPubId));
             return;
         }
@@ -208,13 +210,13 @@ void updateAdUnitRewardMapping(
         try {
             intCurrencyAmount = Integer.parseInt(currencyAmount);
         } catch(NumberFormatException e) {
-            MoPubLog.e(String.format(Locale.US, "Currency amount must be an integer: %s",
+            MoPubLog.log(CUSTOM, String.format(Locale.US, "Currency amount must be an integer: %s",
                     currencyAmount));
             return;
         }
 
         if (intCurrencyAmount < 0) {
-            MoPubLog.e(String.format(Locale.US, "Currency amount cannot be negative: %s",
+            MoPubLog.log(CUSTOM, String.format(Locale.US, "Currency amount cannot be negative: %s",
                     currencyAmount));
             return;
         }
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdsLoaders.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdsLoaders.java
index 08004b21..2b4bfcae 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdsLoaders.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdsLoaders.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
index 60736f6b..b6aca649 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -14,10 +14,14 @@
 import android.view.View;
 
 import com.mopub.common.AdReport;
+import com.mopub.common.ExternalViewabilitySessionManager;
+import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Intents;
 import com.mopub.exceptions.IntentNotResolvableException;
+import com.mopub.mraid.MraidBridge;
+import com.mopub.mraid.MraidController;
 import com.mopub.mraid.MraidController.MraidListener;
 import com.mopub.mraid.MraidWebViewDebugListener;
 import com.mopub.mraid.PlacementType;
@@ -25,11 +29,11 @@
 
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.common.DataKeys.REWARDED_AD_DURATION_KEY;
 import static com.mopub.common.DataKeys.SHOULD_REWARD_ON_CLICK_KEY;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
 import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
 import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
@@ -38,10 +42,27 @@
     @Nullable private RewardedMraidController mRewardedMraidController;
     @Nullable private MraidWebViewDebugListener mDebugListener;
 
+    public static void preRenderHtml(@NonNull final Interstitial mraidInterstitial,
+            @NonNull final Context context,
+            @NonNull final CustomEventInterstitial.CustomEventInterstitialListener customEventInterstitialListener,
+            @NonNull final Long broadcastIdentifier,
+            @Nullable final AdReport adReport,
+            final int rewardedDuration) {
+        Preconditions.checkNotNull(mraidInterstitial);
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(customEventInterstitialListener);
+        Preconditions.checkNotNull(broadcastIdentifier);
+
+        preRenderHtml(mraidInterstitial, customEventInterstitialListener, getResponseString(adReport),
+                new MraidBridge.MraidWebView(context), broadcastIdentifier,
+                new RewardedMraidController(context, adReport, PlacementType.INTERSTITIAL,
+                        rewardedDuration, broadcastIdentifier));
+    }
+
     public static void start(@NonNull Context context, @Nullable AdReport adreport,
-            @Nullable String htmlData, long broadcastIdentifier, int rewardedDuration,
-            boolean shouldRewardOnClick) {
-        final Intent intent = createIntent(context, adreport, htmlData, broadcastIdentifier,
+                             long broadcastIdentifier, int rewardedDuration,
+                             boolean shouldRewardOnClick) {
+        final Intent intent = createIntent(context, adreport, broadcastIdentifier,
                 rewardedDuration, shouldRewardOnClick);
         try {
             Intents.startActivity(context, intent);
@@ -53,10 +74,9 @@ public static void start(@NonNull Context context, @Nullable AdReport adreport,
 
     @VisibleForTesting
     protected static Intent createIntent(@NonNull Context context, @Nullable AdReport adReport,
-            @Nullable String htmlData, long broadcastIdentifier, int rewardedDuration,
-            boolean shouldRewardOnClick) {
+                                         long broadcastIdentifier, int rewardedDuration,
+                                         boolean shouldRewardOnClick) {
         Intent intent = new Intent(context, RewardedMraidActivity.class);
-        intent.putExtra(HTML_RESPONSE_BODY_KEY, htmlData);
         intent.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
         intent.putExtra(AD_REPORT_KEY, adReport);
         intent.putExtra(REWARDED_AD_DURATION_KEY, rewardedDuration);
@@ -67,13 +87,13 @@ protected static Intent createIntent(@NonNull Context context, @Nullable AdRepor
     @Override
     public View getAdView() {
         final Intent intent = getIntent();
-        final String htmlData = intent.getStringExtra(HTML_RESPONSE_BODY_KEY);
+        final String htmlData = getResponseString();
         if (TextUtils.isEmpty(htmlData)) {
-            MoPubLog.w("RewardedMraidActivity received a null HTML body. Finishing the activity.");
+            MoPubLog.log(CUSTOM, "RewardedMraidActivity received a null HTML body. Finishing the activity.");
             finish();
             return new View(this);
         } else if (getBroadcastIdentifier() == null) {
-            MoPubLog.w("RewardedMraidActivity received a null broadcast id. Finishing the activity.");
+            MoPubLog.log(CUSTOM, "RewardedMraidActivity received a null broadcast id. Finishing the activity.");
             finish();
             return new View(this);
         }
@@ -83,9 +103,20 @@ public View getAdView() {
         final boolean shouldRewardOnClick = intent.getBooleanExtra(SHOULD_REWARD_ON_CLICK_KEY,
                 RewardedMraidController.DEFAULT_PLAYABLE_SHOULD_REWARD_ON_CLICK);
 
-        mRewardedMraidController = new RewardedMraidController(
-                this, mAdReport, PlacementType.INTERSTITIAL, rewardedDurationInSeconds,
-                getBroadcastIdentifier());
+        boolean preloaded = false;
+        final Long broadcastIdentifier = getBroadcastIdentifier();
+        WebViewCacheService.Config config = null;
+        if (broadcastIdentifier != null) {
+            config = WebViewCacheService.popWebViewConfig(broadcastIdentifier);
+        }
+        if (config != null && config.getController() instanceof RewardedMraidController) {
+            preloaded = true;
+            mRewardedMraidController = (RewardedMraidController) config.getController();
+        } else {
+            mRewardedMraidController = new RewardedMraidController(
+                    this, mAdReport, PlacementType.INTERSTITIAL, rewardedDurationInSeconds,
+                    getBroadcastIdentifier());
+        }
 
         mRewardedMraidController.setDebugListener(mDebugListener);
         mRewardedMraidController.setMraidListener(new MraidListener() {
@@ -98,7 +129,7 @@ public void onLoaded(View view) {
 
             @Override
             public void onFailedToLoad() {
-                MoPubLog.d("RewardedMraidActivity failed to load. Finishing the activity");
+                MoPubLog.log(CUSTOM, "RewardedMraidActivity failed to load. Finishing the activity");
                 broadcastAction(RewardedMraidActivity.this, getBroadcastIdentifier(),
                         ACTION_INTERSTITIAL_FAIL);
                 finish();
@@ -114,6 +145,11 @@ public void onExpand() {
                 // No-op. The interstitial is always expanded.
             }
 
+            @Override
+            public void onResize(final boolean toOriginalSize) {
+                // No-op. The interstitial is always expanded.
+            }
+
             @Override
             public void onOpen() {
                 if (shouldRewardOnClick) {
@@ -124,7 +160,27 @@ public void onOpen() {
             }
         });
 
-        mRewardedMraidController.fillContent(getBroadcastIdentifier(), htmlData, null);
+        if (preloaded) {
+            mExternalViewabilitySessionManager = config.getViewabilityManager();
+        } else {
+            mRewardedMraidController.fillContent(htmlData,
+                    new MraidController.MraidWebViewCacheListener() {
+                        @Override
+                        public void onReady(@NonNull final MraidBridge.MraidWebView webView,
+                                @Nullable final ExternalViewabilitySessionManager viewabilityManager) {
+                            if (viewabilityManager != null) {
+                                mExternalViewabilitySessionManager = viewabilityManager;
+                            } else {
+                                mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(
+                                        RewardedMraidActivity.this);
+                                mExternalViewabilitySessionManager.createDisplaySession(
+                                        RewardedMraidActivity.this, webView, true);
+                            }
+                        }
+                    });
+        }
+
+        mRewardedMraidController.onShow(this);
         return mRewardedMraidController.getAdContainer();
     }
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidCountdownRunnable.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidCountdownRunnable.java
index 46ea5487..75dc4e5d 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidCountdownRunnable.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidCountdownRunnable.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java
index e37d954c..b46d5856 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -8,10 +8,15 @@
 import android.support.annotation.Nullable;
 
 import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
 
 import java.util.Map;
 
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_SUCCESS;
+
 class RewardedVastVideoInterstitial extends VastVideoInterstitial {
+    public static final String ADAPTER_NAME = RewardedVastVideoInterstitial.class.getSimpleName();
 
     interface RewardedVideoInterstitialListener extends CustomEventInterstitialListener {
         void onVideoComplete();
@@ -25,6 +30,7 @@ public void loadInterstitial(
             CustomEventInterstitialListener customEventInterstitialListener,
             Map<String, Object> localExtras,
             Map<String, String> serverExtras) {
+        MoPubLog.log(LOAD_ATTEMPTED, ADAPTER_NAME);
         super.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
 
         if (customEventInterstitialListener instanceof RewardedVideoInterstitialListener) {
@@ -37,6 +43,7 @@ public void loadInterstitial(
 
     @Override
     public void onVastVideoConfigurationPrepared(final VastVideoConfig vastVideoConfig) {
+        MoPubLog.log(LOAD_SUCCESS, ADAPTER_NAME);
         if (vastVideoConfig != null) {
             vastVideoConfig.setIsRewardedVideo(true);
         }
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
index 2df62afc..597ebc3c 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java
index ec41f640..a4b30216 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
index fa03bcac..65d5478b 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -20,6 +20,8 @@
 import com.mopub.volley.RequestQueue;
 import com.mopub.volley.VolleyError;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 /**
  * Handles the server-to-server rewarded video completion handshake.
  */
@@ -102,7 +104,7 @@ void makeRewardedVideoCompletionRequest() {
         mRequestQueue.add(rewardedVideoCompletionRequest);
 
         if (mRetryCount >= MAX_RETRIES) {
-            MoPubLog.d("Exceeded number of retries for rewarded video completion request.");
+            MoPubLog.log(CUSTOM, "Exceeded number of retries for rewarded video completion request.");
             return;
         }
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidController.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidController.java
index 0137bb6e..33199305 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidController.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidController.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidInterstitial.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidInterstitial.java
index c5e6b2de..36f80a94 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidInterstitial.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidInterstitial.java
@@ -1,13 +1,15 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
 package com.mopub.mraid;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
 import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.CustomEventInterstitial;
 import com.mopub.mobileads.RewardedMraidActivity;
 
@@ -15,12 +17,15 @@
 
 import static com.mopub.common.DataKeys.REWARDED_AD_DURATION_KEY;
 import static com.mopub.common.DataKeys.SHOULD_REWARD_ON_CLICK_KEY;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.LOAD_ATTEMPTED;
+import static com.mopub.common.logging.MoPubLog.AdapterLogEvent.SHOW_ATTEMPTED;
 
 /**
  * Handles the showing of rewarded MRAID interstitials. 'Rewarded duration' and 'should reward on
  * click' are optional and will default to the values set in {@link RewardedMraidController}.
  */
 public class RewardedMraidInterstitial extends MraidInterstitial {
+    public static final String ADAPTER_NAME = RewardedMraidInterstitial.class.getSimpleName();
 
     public interface RewardedMraidInterstitialListener extends CustomEventInterstitial.CustomEventInterstitialListener {
         void onMraidComplete();
@@ -37,6 +42,7 @@ public void loadInterstitial(
             Map<String, Object> localExtras,
             Map<String, String> serverExtras) {
         super.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+        MoPubLog.log(LOAD_ATTEMPTED, ADAPTER_NAME);
 
         if (customEventInterstitialListener instanceof RewardedMraidInterstitialListener) {
             mRewardedPlayableBroadcastReceiver = new RewardedPlayableBroadcastReceiver(
@@ -45,19 +51,34 @@ public void loadInterstitial(
             mRewardedPlayableBroadcastReceiver.register(mRewardedPlayableBroadcastReceiver, context);
         }
 
-        final Object rewardedDurationObject = localExtras.get(REWARDED_AD_DURATION_KEY);
-        mRewardedDuration = rewardedDurationObject instanceof Integer ?
-                (int) rewardedDurationObject :
-                RewardedMraidController.DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_SECONDS;
-        final Object shouldRewardOnClickObject = localExtras.get(SHOULD_REWARD_ON_CLICK_KEY);
-        mShouldRewardOnClick = shouldRewardOnClickObject instanceof Boolean ?
-                (boolean) shouldRewardOnClickObject :
-                RewardedMraidController.DEFAULT_PLAYABLE_SHOULD_REWARD_ON_CLICK;
+
+    }
+
+    @Override
+    protected void preRenderHtml(@NonNull CustomEventInterstitialListener
+            customEventInterstitialListener) {
+        final Map<String, Object> localExtras = mLocalExtras;
+
+        if (localExtras != null) {
+            final Object rewardedDurationObject = localExtras.get(REWARDED_AD_DURATION_KEY);
+            mRewardedDuration = rewardedDurationObject instanceof Integer ?
+                    (int) rewardedDurationObject :
+                    RewardedMraidController.DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_SECONDS;
+            final Object shouldRewardOnClickObject = localExtras.get(SHOULD_REWARD_ON_CLICK_KEY);
+            mShouldRewardOnClick = shouldRewardOnClickObject instanceof Boolean ?
+                    (boolean) shouldRewardOnClickObject :
+                    RewardedMraidController.DEFAULT_PLAYABLE_SHOULD_REWARD_ON_CLICK;
+
+        }
+        RewardedMraidActivity.preRenderHtml(this, mContext,
+                customEventInterstitialListener, mBroadcastIdentifier, mAdReport,
+                mRewardedDuration);
     }
 
     @Override
     public void showInterstitial() {
-        RewardedMraidActivity.start(mContext, mAdReport, mHtmlData, mBroadcastIdentifier,
+        MoPubLog.log(SHOW_ATTEMPTED, ADAPTER_NAME);
+        RewardedMraidActivity.start(mContext, mAdReport, mBroadcastIdentifier,
                 mRewardedDuration, mShouldRewardOnClick);
     }
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedPlayableBroadcastReceiver.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedPlayableBroadcastReceiver.java
index f48b0c77..b0dd07a7 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedPlayableBroadcastReceiver.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedPlayableBroadcastReceiver.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/project.properties b/mopub-sdk/project.properties
index 568f4e7b..b1191c3f 100644
--- a/mopub-sdk/project.properties
+++ b/mopub-sdk/project.properties
@@ -1,4 +1,4 @@
-# Copyright 2018 Twitter, Inc.
+# Copyright 2018-2019 Twitter, Inc.
 # Licensed under the MoPub SDK License Agreement
 # http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/publisher.gradle b/mopub-sdk/publisher.gradle
index dfde03f7..b180dd43 100644
--- a/mopub-sdk/publisher.gradle
+++ b/mopub-sdk/publisher.gradle
@@ -1,9 +1,9 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
 apply plugin: 'com.android.library'
-//apply plugin: 'com.novoda.bintray-release'
+apply plugin: 'com.novoda.bintray-release'
 
 def siteUrl = 'https://github.com/mopub/mopub-android-sdk'
 def gitUrl = 'https://github.com/mopub/mopub-android-sdk.git'
@@ -30,37 +30,37 @@ android.libraryVariants.all { variant ->
     artifacts.add('archives', task)
 }
 
-//android.libraryVariants.all { variant ->
-//    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
-//        title = project.ext.displayName
-//        description "Generates Javadoc for $variant.name."
-//        source = variant.javaCompile.source
-//        classpath += files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
-//        classpath += project.configurations.compile
-//
-//        options {
-//            links "http://docs.oracle.com/javase/7/docs/api/"
-//            linksOffline "https://developer.android.com/reference","${android.sdkDirectory}/docs/reference"
-//        }
-//
-//        exclude '**/BuildConfig.java'
-//        exclude '**/R.java'
-//    }
-//}
+android.libraryVariants.all { variant ->
+    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
+        title = project.ext.displayName
+        description "Generates Javadoc for $variant.name."
+        source = variant.javaCompile.source
+        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
+        classpath += configurations.compile
+
+        options {
+            links "http://docs.oracle.com/javase/7/docs/api/"
+            linksOffline "https://developer.android.com/reference","${android.sdkDirectory}/docs/reference"
+        }
 
-//publish {
-//    repoName = bintrayRepo
-//    userOrg = bintrayUserOrg
-//    groupId = project.group
-//    artifactId = project.ext.projectName
-//    uploadName = project.ext.uploadName
-//    version = project.version
-//    description = project.description
-//    website = siteUrl
-//    repository = gitUrl
-//
-//    bintrayUser = project.hasProperty("bintray.user") ? project.getProperty("bintray.user") : ""
-//    bintrayKey = project.hasProperty("bintray.apikey") ? project.getProperty("bintray.apikey") : ""
-//
-//    dryRun = false
-//}
+        exclude '**/BuildConfig.java'
+        exclude '**/R.java'
+    }
+}
+
+publish {
+    repoName = bintrayRepo
+    userOrg = bintrayUserOrg
+    groupId = project.group
+    artifactId = project.ext.projectName
+    uploadName = project.ext.uploadName
+    publishVersion = project.version
+    desc = project.description
+    website = siteUrl
+    repository = gitUrl
+
+    bintrayUser = project.hasProperty("bintray.user") ? project.getProperty("bintray.user") : ""
+    bintrayKey = project.hasProperty("bintray.apikey") ? project.getProperty("bintray.apikey") : ""
+
+    dryRun = false
+}
diff --git a/mopub-sdk/settings.gradle b/mopub-sdk/settings.gradle
index f79d4d81..e8c29837 100644
--- a/mopub-sdk/settings.gradle
+++ b/mopub-sdk/settings.gradle
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index 08d512f1..996a58a6 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -13,15 +13,14 @@ repositories {
 }
 
 project.group = 'com.mopub'
-project.version = '5.4.1'
+project.version = '5.6.0'
 
 android {
     compileSdkVersion rootProject.ext.compileSdkVersion
     lintOptions { abortOnError false }
-    useLibrary 'org.apache.http.legacy'
 
     defaultConfig {
-        versionCode 65
+        versionCode 67
         versionName version
         minSdkVersion 16
         targetSdkVersion rootProject.ext.targetSdkVersion
diff --git a/mopub-sdk/src/test/java/com/mopub/TestSdkHelper.java b/mopub-sdk/src/test/java/com/mopub/TestSdkHelper.java
index 6a89954a..b9c3465c 100644
--- a/mopub-sdk/src/test/java/com/mopub/TestSdkHelper.java
+++ b/mopub-sdk/src/test/java/com/mopub/TestSdkHelper.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java b/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java
index c7ac3b68..40274f43 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -11,7 +11,6 @@
 import com.mopub.common.privacy.MoPubIdentifierTest;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.test.support.TestDateAndTime;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.network.AdResponse;
 
 import org.junit.After;
@@ -20,7 +19,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import java.text.SimpleDateFormat;
 import java.util.Date;
@@ -30,7 +28,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class AdReportTest {
 
     @Mock
@@ -118,6 +115,28 @@ public void constructor_shouldHandleInvalidAdConfigurationValues() {
         assertThat(subject.toString()).isEqualTo(expectedParameters);
     }
 
+    @Test
+    public void getResponseString_shouldReturnAdResponseStringBody() {
+        final String stringBody = "this is the ad response string body";
+        when(mockAdResponse.getStringBody()).thenReturn(stringBody);
+        when(mockClientMetadata.getMoPubIdentifier()).thenReturn(new MoPubIdentifier(context));
+
+        subject = new AdReport("testAdunit", mockClientMetadata, mockAdResponse);
+
+        assertThat(subject.getResponseString()).isEqualTo(stringBody);
+    }
+
+    @Test
+    public void getResponseString_withNullStringBody_shouldReturnNull() {
+        final String stringBody = null;
+        when(mockAdResponse.getStringBody()).thenReturn(stringBody);
+        when(mockClientMetadata.getMoPubIdentifier()).thenReturn(new MoPubIdentifier(context));
+
+        subject = new AdReport("testAdunit", mockClientMetadata, mockAdResponse);
+
+        assertThat(subject.getResponseString()).isNull();
+    }
+
     private String getCurrentDateTime() {
         SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yy hh:mm:ss a z", Locale.US);
         return dateFormat.format(now);
diff --git a/mopub-sdk/src/test/java/com/mopub/common/AdapterConfigurationManagerTest.java b/mopub-sdk/src/test/java/com/mopub/common/AdapterConfigurationManagerTest.java
new file mode 100644
index 00000000..296818d9
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/AdapterConfigurationManagerTest.java
@@ -0,0 +1,198 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.common;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+
+import static com.mopub.common.BaseAdapterConfiguration.CUSTOM_EVENT_PREF_NAME;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+public class AdapterConfigurationManagerTest {
+
+    private Context context;
+    private AdapterConfigurationManager subject;
+    private SdkInitializationListener mockInitializationListener;
+
+    @Before
+    public void setup() {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        mockInitializationListener = mock(SdkInitializationListenerMockClass.class);
+        subject = new AdapterConfigurationManager(mockInitializationListener);
+
+    }
+
+    @Test
+    public void initialize_getTokensAsJsonString_withAdapterConfigurationClass_shouldAddOneMoPubAdvancedBidder_shouldSetUpAdapterConfiguration() {
+        final Set<String> set = new HashSet<>();
+        set.add(ACMTestAdapterConfiguration.class.getName());
+        set.add(ACMNoTokenAdapterConfiguration.class.getName());
+
+        subject.initialize(context, set, new HashMap<String, Map<String, String>>(),
+                new HashMap<String, Map<String, String>>());
+
+        assertThat(subject.getTokensAsJsonString(context)).isEqualTo(
+                "{\"AdapterConfigurationTest\":{\"token\":\"AdapterConfigurationTestToken\"}}");
+        verify(mockInitializationListener).onInitializationFinished();
+        assertThat(subject.getAdapterConfiguration(
+                ACMTestAdapterConfiguration.class)).isNotNull();
+    }
+
+    @Test
+    public void initialize_getTokensAsJsonString_withNoAdapterConfigurations_shouldReturnNull() {
+        final Set<String> set = new HashSet<>();
+
+        subject.initialize(context, set, new HashMap<String, Map<String, String>>(),
+                new HashMap<String, Map<String, String>>());
+
+        assertThat(subject.getTokensAsJsonString(context)).isNull();
+        verify(mockInitializationListener).onInitializationFinished();
+    }
+
+    @Test
+    public void initialize_getTokensAsJsonString_withNoTokens_shouldReturnNull() {
+        final Set<String> set = new HashSet<>();
+        set.add(ACMNoTokenAdapterConfiguration.class.getName());
+
+        subject.initialize(context, set, new HashMap<String, Map<String, String>>(),
+                new HashMap<String, Map<String, String>>());
+
+        assertThat(subject.getTokensAsJsonString(context)).isNull();
+        verify(mockInitializationListener).onInitializationFinished();
+    }
+
+    @Test
+    public void initialize_withAdapterConfigurationClass_shouldMergeInitializationParameters() {
+        final Set<String> set = new HashSet<>();
+        set.add(ACMTestAdapterConfiguration.class.getName());
+        Map<String, Map<String, String>> networkMediationConfigurations = new HashMap<>();
+        Map<String, Map<String, String>> moPubRequestOptions = new HashMap<>();
+        Map<String, String> networkMediationConfiguration = new HashMap<>();
+        networkMediationConfiguration.put("key1", "value1");
+        networkMediationConfiguration.put("key2", "value2");
+        networkMediationConfigurations.put(
+                ACMTestAdapterConfiguration.class.getName(),
+                networkMediationConfiguration);
+        Map<String, String> moPubRequestOption = new HashMap<>();
+        moPubRequestOption.put("key3", "value3");
+        moPubRequestOption.put("key4", "value4");
+        moPubRequestOptions.put(ACMTestAdapterConfiguration.class.getName(),
+                moPubRequestOption);
+        final SharedPreferences sharedPreferences = SharedPreferencesHelper.getSharedPreferences(
+                context, CUSTOM_EVENT_PREF_NAME);
+        sharedPreferences.edit().putString(
+                ACMTestAdapterConfiguration.class.getName(),
+                "{\"key1\":\"oldValue\",\"key5\":\"value5\"}").apply();
+
+        subject.initialize(context, set, networkMediationConfigurations, moPubRequestOptions);
+
+        AdapterConfiguration adapterConfiguration = subject.getAdapterConfiguration(
+                ACMTestAdapterConfiguration.class);
+        Map<String, String> actualNetworkMediationConfigurations = adapterConfiguration.getCachedInitializationParameters(context);
+        Map<String, String> actualMoPubRequestOptions = adapterConfiguration.getMoPubRequestOptions();
+        assertThat(actualNetworkMediationConfigurations.get("key1")).isEqualTo("value1");
+        assertThat(actualNetworkMediationConfigurations.get("key2")).isEqualTo("value2");
+        assertThat(actualNetworkMediationConfigurations.get("key5")).isEqualTo("value5");
+        assertThat(actualMoPubRequestOptions.get("key3")).isEqualTo("value3");
+        assertThat(actualMoPubRequestOptions.get("key4")).isEqualTo("value4");
+    }
+
+    private static class ACMTestAdapterConfiguration extends BaseAdapterConfiguration {
+
+        @NonNull
+        @Override
+        public String getAdapterVersion() {
+            return "adapterVersion";
+        }
+
+        @Nullable
+        @Override
+        public String getBiddingToken(@NonNull final Context context) {
+            return "AdapterConfigurationTestToken";
+        }
+
+        @NonNull
+        @Override
+        public String getMoPubNetworkName() {
+            return "AdapterConfigurationTest";
+        }
+
+        @NonNull
+        @Override
+        public String getNetworkSdkVersion() {
+            return "networkVersion";
+        }
+
+        @Override
+        public void initializeNetwork(@NonNull final Context context,
+                @Nullable final Map<String, String> configuration,
+                @NonNull final OnNetworkInitializationFinishedListener listener) {
+            listener.onNetworkInitializationFinished(
+                    ACMTestAdapterConfiguration.class,
+                    MoPubErrorCode.ADAPTER_INITIALIZATION_SUCCESS);
+        }
+    }
+
+    private static class ACMNoTokenAdapterConfiguration extends BaseAdapterConfiguration {
+
+        @NonNull
+        @Override
+        public String getAdapterVersion() {
+            return "adapterVersion";
+        }
+
+        @Nullable
+        @Override
+        public String getBiddingToken(@NonNull final Context context) {
+            return null;
+        }
+
+        @NonNull
+        @Override
+        public String getMoPubNetworkName() {
+            return "AdapterConfigurationTest";
+        }
+
+        @NonNull
+        @Override
+        public String getNetworkSdkVersion() {
+            return "networkVersion";
+        }
+
+        @Override
+        public void initializeNetwork(@NonNull final Context context,
+                @Nullable final Map<String, String> configuration,
+                @NonNull final OnNetworkInitializationFinishedListener listener) {
+            listener.onNetworkInitializationFinished(
+                    ACMNoTokenAdapterConfiguration.class,
+                    MoPubErrorCode.ADAPTER_INITIALIZATION_SUCCESS);
+        }
+    }
+
+    // Creating extra class to prevent Robolectric cache conflict with
+    // MoPub.initializeSdk_withCallbackSet_shouldCallCallback
+    private abstract class SdkInitializationListenerMockClass implements SdkInitializationListener {
+    }
+
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/AdvancedBiddingTokensTest.java b/mopub-sdk/src/test/java/com/mopub/common/AdvancedBiddingTokensTest.java
deleted file mode 100644
index 2c0f5605..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/AdvancedBiddingTokensTest.java
+++ /dev/null
@@ -1,81 +0,0 @@
-// Copyright 2018 Twitter, Inc.
-// Licensed under the MoPub SDK License Agreement
-// http://www.mopub.com/legal/sdk-license-agreement/
-
-package com.mopub.common;
-
-import android.app.Activity;
-import android.content.Context;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class AdvancedBiddingTokensTest {
-
-    private Context context;
-    private AdvancedBiddingTokens subject;
-    private SdkInitializationListener mockInitializationListener;
-
-    @Before
-    public void setup() {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        mockInitializationListener = mock(SdkInitializationListenerMockClass.class);
-        subject = new AdvancedBiddingTokens(mockInitializationListener);
-
-    }
-
-    @Test
-    public void addAdvancedBidders_getTokensAsJsonString_withAdvancedBiddingClass_shouldAddOneMoPubAdvancedBidder() throws Exception {
-        List<Class<? extends MoPubAdvancedBidder>> list = new ArrayList<>();
-        list.add(AdvancedBiddingTokensAdvancedBidder.class);
-
-        subject.addAdvancedBidders(list);
-
-        assertThat(subject.getTokensAsJsonString(context)).isEqualTo(
-                "{\"AdvancedBiddingTokensTest\":{\"token\":\"AdvancedBiddingTokensToken\"}}");
-        verify(mockInitializationListener).onInitializationFinished();
-    }
-
-    @Test
-    public void addAdvancedBidder_getTokensAsJsonString_withNoAdvancedBidders_shouldReturnNull() throws Exception {
-        List<Class<? extends MoPubAdvancedBidder>> list = new ArrayList<>();
-
-        subject.addAdvancedBidders(list);
-
-        assertThat(subject.getTokensAsJsonString(context)).isNull();
-        verify(mockInitializationListener).onInitializationFinished();
-    }
-
-    private static class AdvancedBiddingTokensAdvancedBidder implements MoPubAdvancedBidder {
-
-        @Override
-        public String getToken(final Context context) {
-            return "AdvancedBiddingTokensToken";
-        }
-
-        @Override
-        public String getCreativeNetworkName() {
-            return "AdvancedBiddingTokensTest";
-        }
-    }
-
-    // Creating extra class to prevent roboelectric cache conflict with
-    // MoPub.initializeSdk_withCallbackSet_shouldCallCallback
-    private abstract class SdkInitializationListenerMockClass implements SdkInitializationListener{};
-
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/AvidViewabilitySessionTest.java b/mopub-sdk/src/test/java/com/mopub/common/AvidViewabilitySessionTest.java
new file mode 100644
index 00000000..31efb9a8
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/AvidViewabilitySessionTest.java
@@ -0,0 +1,575 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.common;
+
+import android.app.Activity;
+import android.view.View;
+import android.webkit.WebView;
+
+import com.integralads.avid.library.mopub.video.AvidVideoPlaybackListener;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.test.support.ShadowAvidAdSessionManager;
+import com.mopub.common.util.test.support.ShadowAvidManager;
+import com.mopub.common.util.test.support.ShadowReflection;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeMap;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyZeroInteractions;
+
+@RunWith(SdkTestRunner.class)
+@Config(shadows = {ShadowAvidAdSessionManager.class,
+        ShadowAvidManager.class, ShadowReflection.class})
+public class AvidViewabilitySessionTest {
+    private static final String BUYER_RESOURCE_0 = "buyerResource0";
+    private static final String BUYER_RESOURCE_1 = "buyerResource1";
+    private static final String MOPUB_VIEWABILITY_TRACKER = "mopub_viewability_tracker";
+
+    @Mock private WebView webView;
+    @Mock private View view;
+    @Mock private View obstruction0;
+    @Mock private View obstruction1;
+
+    private Activity activity;
+    private AvidViewabilitySession subject;
+    private Set<String> buyerResources = new HashSet<>();
+    private Map<String, String> videoViewabilityTrackers = new TreeMap<>();
+    private List<View> obstructions = new ArrayList<>();
+    private AvidVideoPlaybackListener videoPlaybackListener;
+
+    @Before
+    public void setup() {
+        subject = new AvidViewabilitySession();
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+        videoPlaybackListener = ShadowAvidAdSessionManager.getMockVideoPlaybackListener();
+
+        buyerResources.add(BUYER_RESOURCE_0);
+        buyerResources.add(BUYER_RESOURCE_1);
+        videoViewabilityTrackers.put("avid", MOPUB_VIEWABILITY_TRACKER);
+        videoViewabilityTrackers.put("moat", "ignored");
+        obstructions.add(obstruction0);
+        obstructions.add(obstruction1);
+    }
+
+    @After
+    public void tearDown() {
+        AvidViewabilitySession.resetStaticState();
+    }
+
+    @Test
+    public void getName_shouldReturnAvid() {
+        assertThat(subject.getName()).isEqualTo("AVID");
+    }
+
+    @Test
+    public void initialize_shouldReturnTrue() {
+        Boolean result = subject.initialize(activity);
+
+        assertThat(result).isTrue();
+    }
+
+    @Test
+    public void initialize_whenVendorDisabled_shouldReturnNull() {
+        AvidViewabilitySession.disable();
+
+        Boolean result = subject.initialize(activity);
+
+        assertThat(result).isNull();
+    }
+
+    @Test
+    public void initialize_whenAvidMissing_shouldReturnNull() {
+        ShadowReflection.setNextClassNotFound(true);
+
+        Boolean result = subject.initialize(activity);
+
+        assertThat(result).isNull();
+    }
+
+    @Test
+    public void createDisplaySession_whenIsDeferredFalse_shouldStartAdSession_shouldUseNonDeferredContext_shouldReturnTrue() {
+        assertThat(ShadowAvidAdSessionManager.wasStartDisplayAdSessionCalled()).isFalse();
+        assertThat(ShadowAvidAdSessionManager.getLatestDisplayContext()).isNull();
+        assertThat(ShadowAvidAdSessionManager.getLatestDisplayAvidAdSessionContext()).isNull();
+
+        Boolean result = subject.createDisplaySession(activity, webView, false);
+
+        assertThat(result).isTrue();
+        assertThat(ShadowAvidAdSessionManager.wasStartDisplayAdSessionCalled()).isTrue();
+        assertThat(ShadowAvidAdSessionManager.getLatestDisplayContext()).isEqualTo(activity);
+        assertThat(ShadowAvidAdSessionManager.getLatestDisplayAvidAdSessionContext().getPartnerVersion()).isEqualTo(MoPub.SDK_VERSION);
+        assertThat(ShadowAvidAdSessionManager.getLatestDisplayAvidAdSessionContext().isDeferred()).isFalse();
+    }
+
+    @Test
+    public void createDisplaySession_whenIsDeferredTrue_shouldStartAdSession_shouldUseDeferredContext_shouldReturnTrue() {
+        Boolean result = subject.createDisplaySession(activity, webView, true);
+
+        assertThat(result).isTrue();
+        assertThat(ShadowAvidAdSessionManager.wasStartDisplayAdSessionCalled()).isTrue();
+        assertThat(ShadowAvidAdSessionManager.getLatestDisplayContext()).isEqualTo(activity);
+        assertThat(ShadowAvidAdSessionManager.getLatestDisplayAvidAdSessionContext().getPartnerVersion()).isEqualTo(MoPub.SDK_VERSION);
+        assertThat(ShadowAvidAdSessionManager.getLatestDisplayAvidAdSessionContext().isDeferred()).isTrue();
+    }
+
+    @Test
+    public void createDisplaySession_withActivityContext_shouldRegisterAdViewWithActivity_shouldReturnTrue() {
+        assertThat(ShadowAvidAdSessionManager.wasRegisterDisplayAdViewCalled()).isFalse();
+        assertThat(ShadowAvidAdSessionManager.getLatestRegisteredDisplayWebView()).isNull();
+        assertThat(ShadowAvidAdSessionManager.getLatestRegisteredDisplayActivity()).isNull();
+
+        Boolean result = subject.createDisplaySession(activity, webView, true);
+
+        assertThat(result).isTrue();
+        assertThat(ShadowAvidAdSessionManager.wasRegisterDisplayAdViewCalled()).isTrue();
+        assertThat(ShadowAvidAdSessionManager.getLatestRegisteredDisplayWebView()).isEqualTo(webView);
+        assertThat(ShadowAvidAdSessionManager.getLatestRegisteredDisplayActivity()).isEqualTo(activity);
+    }
+
+    @Test
+    public void createDisplaySession_withApplicationContext_shouldRegisterAdViewWithNullActivity_shouldReturnTrue() {
+        Boolean result = subject.createDisplaySession(activity.getApplicationContext(), webView, true);
+
+        assertThat(result).isTrue();
+        assertThat(ShadowAvidAdSessionManager.wasRegisterDisplayAdViewCalled()).isTrue();
+        assertThat(ShadowAvidAdSessionManager.getLatestRegisteredDisplayWebView()).isEqualTo(webView);
+        assertThat(ShadowAvidAdSessionManager.getLatestRegisteredDisplayActivity()).isNull();
+    }
+
+    @Test
+    public void createDisplaySession_whenVendorDisabled_shouldNotStartSessionOrRegisterAdView_shouldReturnNull() {
+        AvidViewabilitySession.disable();
+
+        Boolean result = subject.createDisplaySession(activity, webView, false);
+
+        assertThat(result).isNull();
+        assertThat(ShadowAvidAdSessionManager.wasStartDisplayAdSessionCalled()).isFalse();
+        assertThat(ShadowAvidAdSessionManager.wasRegisterDisplayAdViewCalled()).isFalse();
+    }
+
+    @Test
+    public void createDisplaySession_whenAvidMissing_shouldNotStartSessionOrRegisterAdView_shouldReturnNull() {
+        ShadowReflection.setNextClassNotFound(true);
+
+        Boolean result = subject.createDisplaySession(activity, webView, false);
+
+        assertThat(result).isNull();
+        assertThat(ShadowAvidAdSessionManager.wasStartDisplayAdSessionCalled()).isFalse();
+        assertThat(ShadowAvidAdSessionManager.wasRegisterDisplayAdViewCalled()).isFalse();
+    }
+
+    @Test
+    public void startDeferredDisplaySession_shouldRegisterActivityAndRecordReadyEvent_shouldReturnTrue() {
+        subject.createDisplaySession(activity, webView, true);
+
+        Boolean result = subject.startDeferredDisplaySession(activity);
+
+        assertThat(result).isTrue();
+        assertThat(ShadowAvidManager.getLatestRegisteredActivity()).isEqualTo(activity);
+        assertThat(ShadowAvidAdSessionManager.wasRecordDisplayReadyEventCalled()).isTrue();
+    }
+
+    @Test
+    public void startDeferredDisplaySession_whenCreateDisplaySessionNeverCalled_shouldNotRegisterActivityAndNotRecordReadyEvent_shouldReturnFalse() {
+        // create display session never called
+        Boolean result = subject.startDeferredDisplaySession(activity);
+
+        assertThat(result).isFalse();
+        assertThat(ShadowAvidManager.getLatestRegisteredActivity()).isNull();
+        assertThat(ShadowAvidAdSessionManager.wasRecordDisplayReadyEventCalled()).isFalse();
+    }
+
+    @Test
+    public void startDeferredDisplaySession_whenVendorDisabled_shouldNotRegisterActivityAndNotRecordReadyEvent_shouldReturnNull() {
+        AvidViewabilitySession.disable();
+        subject.createDisplaySession(activity, webView, true);
+
+        Boolean result = subject.startDeferredDisplaySession(activity);
+
+        assertThat(result).isNull();
+        assertThat(ShadowAvidManager.getLatestRegisteredActivity()).isNull();
+        assertThat(ShadowAvidAdSessionManager.wasRecordDisplayReadyEventCalled()).isFalse();
+    }
+
+    @Test
+    public void startDeferredDisplaySession_whenAvidMissing_shouldNotRegisterActivityAndNotRecordReadyEvent_shouldReturnNull() {
+        ShadowReflection.setNextClassNotFound(true);
+        subject.createDisplaySession(activity, webView, true);
+
+        Boolean result = subject.startDeferredDisplaySession(activity);
+
+        assertThat(result).isNull();
+        assertThat(ShadowAvidManager.getLatestRegisteredActivity()).isNull();
+        assertThat(ShadowAvidAdSessionManager.wasRecordDisplayReadyEventCalled()).isFalse();
+    }
+
+    @Test
+    public void endDisplaySession_shouldCallEndSession_shouldReturnTrue() {
+        subject.createDisplaySession(activity, webView, false);
+
+        Boolean result = subject.endDisplaySession();
+
+        assertThat(result).isTrue();
+        assertThat(ShadowAvidAdSessionManager.wasEndDisplaySessionCalled()).isTrue();
+    }
+
+    @Test
+    public void endDisplaySession_whenCreateDisplaySessionNeverCalled_shouldNotCallEndSession_shouldReturnFalse() {
+        // create display session never called
+
+        Boolean result = subject.endDisplaySession();
+
+        assertThat(result).isFalse();
+        assertThat(ShadowAvidAdSessionManager.wasEndDisplaySessionCalled()).isFalse();
+    }
+
+    @Test
+    public void endDisplaySession_whenVendorDisabled_shouldNotCallEndSession_shouldReturnNull() {
+        AvidViewabilitySession.disable();
+        subject.createDisplaySession(activity, webView, false);
+
+        Boolean result = subject.endDisplaySession();
+
+        assertThat(result).isNull();
+        assertThat(ShadowAvidAdSessionManager.wasEndDisplaySessionCalled()).isFalse();
+    }
+
+    @Test
+    public void endDisplaySession_whenAvidMissing_shouldNotCallEndSession_shouldReturnNull() {
+        ShadowReflection.setNextClassNotFound(true);
+        subject.createDisplaySession(activity, webView, false);
+
+        Boolean result = subject.endDisplaySession();
+
+        assertThat(result).isNull();
+        assertThat(ShadowAvidAdSessionManager.wasEndDisplaySessionCalled()).isFalse();
+    }
+
+    @Test
+    public void createVideoSession_shouldStartAdSession_shouldUseNonDeferredContext_shouldReturnTrue() {
+        assertThat(ShadowAvidAdSessionManager.wasStartVideoAdSessionCalled()).isFalse();
+        assertThat(ShadowAvidAdSessionManager.getLatestVideoContext()).isNull();
+        assertThat(ShadowAvidAdSessionManager.getLatestVideoAvidAdSessionContext()).isNull();
+
+        Boolean result = subject.createVideoSession(activity, view, buyerResources, videoViewabilityTrackers);
+
+        assertThat(result).isTrue();
+        assertThat(ShadowAvidAdSessionManager.wasStartVideoAdSessionCalled()).isTrue();
+        assertThat(ShadowAvidAdSessionManager.getLatestVideoContext()).isEqualTo(activity);
+        assertThat(ShadowAvidAdSessionManager.getLatestVideoAvidAdSessionContext().getPartnerVersion()).isEqualTo(MoPub.SDK_VERSION);
+        assertThat(ShadowAvidAdSessionManager.getLatestVideoAvidAdSessionContext().isDeferred()).isFalse();
+    }
+
+    @Test
+    public void createVideoSession_shouldRegisterAdView_shouldReturnTrue() {
+        Boolean result = subject.createVideoSession(activity, view, buyerResources, videoViewabilityTrackers);
+
+        assertThat(result).isTrue();
+        assertThat(ShadowAvidAdSessionManager.wasRegisterVideoAdViewCalled()).isTrue();
+        assertThat(ShadowAvidAdSessionManager.getLatestRegisteredVideoView()).isEqualTo(view);
+        assertThat(ShadowAvidAdSessionManager.getLatestRegisteredVideoActivity()).isEqualTo(activity);
+    }
+
+    @Test
+    public void createVideoSession_shouldInjectJavascriptResourcesFromMoPubAndBuyerTags() {
+        Boolean result = subject.createVideoSession(activity, view, buyerResources, videoViewabilityTrackers);
+
+        assertThat(result).isTrue();
+        assertThat(ShadowAvidAdSessionManager.getInjectedJavaScriptResources().size()).isEqualTo(3);
+        assertThat(ShadowAvidAdSessionManager.getInjectedJavaScriptResources()).contains(
+                MOPUB_VIEWABILITY_TRACKER, BUYER_RESOURCE_0, BUYER_RESOURCE_1
+        );
+    }
+
+    @Test
+    public void createVideoSession_withNullOrEmptyBuyerResources_shouldIgnoreInvalidJavascript_shouldReturnTrue() {
+        buyerResources.add("");
+        buyerResources.add("somethingValid");
+        buyerResources.add(null);
+
+        Boolean result = subject.createVideoSession(activity, view, buyerResources, videoViewabilityTrackers);
+
+        assertThat(result).isTrue();
+        assertThat(ShadowAvidAdSessionManager.getInjectedJavaScriptResources().size()).isEqualTo(4);
+        assertThat(ShadowAvidAdSessionManager.getInjectedJavaScriptResources()).contains(
+                MOPUB_VIEWABILITY_TRACKER, BUYER_RESOURCE_0, BUYER_RESOURCE_1, "somethingValid"
+        );
+    }
+
+    @Test
+    public void createVideoSession_withMissingMoPubTag_shouldIgnoreInvalidJavascript_shouldReturnTrue() {
+        videoViewabilityTrackers.remove("avid");
+
+        Boolean result = subject.createVideoSession(activity, view, buyerResources, videoViewabilityTrackers);
+
+        assertThat(result).isTrue();
+        assertThat(ShadowAvidAdSessionManager.getInjectedJavaScriptResources().size()).isEqualTo(2);
+        assertThat(ShadowAvidAdSessionManager.getInjectedJavaScriptResources()).contains(
+                BUYER_RESOURCE_0, BUYER_RESOURCE_1
+        );
+    }
+
+    @Test
+    public void createVideoSession_withEmptyMoPubTag_shouldIgnoreInvalidJavascript_shouldReturnTrue() {
+        videoViewabilityTrackers.put("avid", "");
+
+        Boolean result = subject.createVideoSession(activity, view, buyerResources, videoViewabilityTrackers);
+
+        assertThat(result).isTrue();
+        assertThat(ShadowAvidAdSessionManager.getInjectedJavaScriptResources().size()).isEqualTo(2);
+        assertThat(ShadowAvidAdSessionManager.getInjectedJavaScriptResources()).contains(
+                BUYER_RESOURCE_0, BUYER_RESOURCE_1
+        );
+    }
+
+    @Test
+    public void createVideoSession_withVendorDisabled_shouldDoNothing_shouldReturnNull() {
+        AvidViewabilitySession.disable();
+
+        Boolean result = subject.createVideoSession(activity, view, buyerResources, videoViewabilityTrackers);
+
+        assertThat(result).isNull();
+        assertThat(ShadowAvidAdSessionManager.wasStartVideoAdSessionCalled()).isFalse();
+        assertThat(ShadowAvidAdSessionManager.getLatestVideoContext()).isNull();
+        assertThat(ShadowAvidAdSessionManager.getLatestVideoAvidAdSessionContext()).isNull();
+        assertThat(ShadowAvidAdSessionManager.getInjectedJavaScriptResources()).isEmpty();
+    }
+
+    @Test
+    public void createVideoSession_withAvidMissing_shouldDoNothing_shouldReturnNull() {
+        ShadowReflection.setNextClassNotFound(true);
+
+        Boolean result = subject.createVideoSession(activity, view, buyerResources, videoViewabilityTrackers);
+
+        assertThat(result).isNull();
+        assertThat(ShadowAvidAdSessionManager.wasStartVideoAdSessionCalled()).isFalse();
+        assertThat(ShadowAvidAdSessionManager.getLatestVideoContext()).isNull();
+        assertThat(ShadowAvidAdSessionManager.getLatestVideoAvidAdSessionContext()).isNull();
+        assertThat(ShadowAvidAdSessionManager.getInjectedJavaScriptResources()).isEmpty();
+    }
+
+    @Test
+    public void registerVideoObstructions_shouldCallThroughToRegisterFriendlyObstructions_shouldReturnTrue() {
+        subject.createVideoSession(activity, view, buyerResources, videoViewabilityTrackers);
+
+        for (final View obstruction : obstructions) {
+            Boolean result = subject.registerVideoObstruction(obstruction);
+            assertThat(result).isTrue();
+        }
+
+        assertThat(ShadowAvidAdSessionManager.getFriendlyObstructions().size()).isEqualTo(2);
+        assertThat(ShadowAvidAdSessionManager.getFriendlyObstructions()).contains(
+                obstruction0, obstruction1
+        );
+    }
+
+    @Test
+    public void registerVideoObstructions_whenCreateVideoSessionNeverCalled_shouldDoNothing_shouldReturnNull() {
+        // create video session never called
+
+        for (final View obstruction : obstructions) {
+            Boolean result = subject.registerVideoObstruction(obstruction);
+            assertThat(result).isFalse();
+        }
+
+        assertThat(ShadowAvidAdSessionManager.getFriendlyObstructions()).isEmpty();
+    }
+
+    @Test
+    public void registerVideoObstructions_withVendorDisabled_shouldDoNothing_shouldReturnNull() {
+        AvidViewabilitySession.disable();
+        subject.createVideoSession(activity, view, buyerResources, videoViewabilityTrackers);
+
+        for (final View obstruction : obstructions) {
+            Boolean result = subject.registerVideoObstruction(obstruction);
+            assertThat(result).isNull();
+        }
+
+        assertThat(ShadowAvidAdSessionManager.getFriendlyObstructions()).isEmpty();
+    }
+
+    @Test
+    public void registerVideoObstructions_withAvidMissing_shouldDoNothing_shouldReturnNull() {
+        ShadowReflection.setNextClassNotFound(true);
+        subject.createVideoSession(activity, view, buyerResources, videoViewabilityTrackers);
+
+        for (final View obstruction : obstructions) {
+            Boolean result = subject.registerVideoObstruction(obstruction);
+            assertThat(result).isNull();
+        }
+
+        assertThat(ShadowAvidAdSessionManager.getFriendlyObstructions()).isEmpty();
+    }
+
+    @Test
+    public void onVideoPrepared_shouldReturnTrue() {
+        Boolean result = subject.onVideoPrepared(view, 0);
+
+        assertThat(result).isTrue();
+    }
+
+    @Test
+    public void onVideoPrepared_whenVendorDisabled_shouldReturnNull() {
+        AvidViewabilitySession.disable();
+
+        Boolean result = subject.onVideoPrepared(view, 0);
+
+        assertThat(result).isNull();
+    }
+
+    @Test
+    public void onVideoPrepared_whenAvidMissing_shouldReturnNull() {
+        ShadowReflection.setNextClassNotFound(true);
+
+        Boolean result = subject.onVideoPrepared(view, 0);
+
+        assertThat(result).isNull();
+    }
+
+    @Test
+    public void recordVideoEvent_withSupportedEvents_shouldNotifyListener_shouldReturnTrue() {
+        subject.createVideoSession(activity, view, buyerResources, videoViewabilityTrackers);
+        Boolean result;
+
+        result = subject.recordVideoEvent(ExternalViewabilitySession.VideoEvent.AD_LOADED, 0);
+        assertThat(result).isTrue();
+        verify(videoPlaybackListener).recordAdLoadedEvent();
+
+        result = subject.recordVideoEvent(ExternalViewabilitySession.VideoEvent.AD_STARTED, 0);
+        assertThat(result).isTrue();
+        verify(videoPlaybackListener).recordAdStartedEvent();
+
+        result = subject.recordVideoEvent(ExternalViewabilitySession.VideoEvent.AD_STOPPED, 0);
+        assertThat(result).isTrue();
+        verify(videoPlaybackListener).recordAdStoppedEvent();
+
+        result = subject.recordVideoEvent(ExternalViewabilitySession.VideoEvent.AD_PAUSED, 0);
+        assertThat(result).isTrue();
+        verify(videoPlaybackListener).recordAdPausedEvent();
+
+        result = subject.recordVideoEvent(ExternalViewabilitySession.VideoEvent.AD_PLAYING, 0);
+        assertThat(result).isTrue();
+        verify(videoPlaybackListener).recordAdPlayingEvent();
+
+        result = subject.recordVideoEvent(ExternalViewabilitySession.VideoEvent.AD_SKIPPED, 0);
+        assertThat(result).isTrue();
+        verify(videoPlaybackListener).recordAdSkippedEvent();
+
+        result = subject.recordVideoEvent(ExternalViewabilitySession.VideoEvent.AD_IMPRESSED, 0);
+        assertThat(result).isTrue();
+        verify(videoPlaybackListener).recordAdImpressionEvent();
+
+        result = subject.recordVideoEvent(ExternalViewabilitySession.VideoEvent.AD_CLICK_THRU, 0);
+        assertThat(result).isTrue();
+        verify(videoPlaybackListener).recordAdClickThruEvent();
+
+        result = subject.recordVideoEvent(ExternalViewabilitySession.VideoEvent.AD_VIDEO_FIRST_QUARTILE, 0);
+        assertThat(result).isTrue();
+        verify(videoPlaybackListener).recordAdVideoFirstQuartileEvent();
+
+        result = subject.recordVideoEvent(ExternalViewabilitySession.VideoEvent.AD_VIDEO_MIDPOINT, 0);
+        assertThat(result).isTrue();
+        verify(videoPlaybackListener).recordAdVideoMidpointEvent();
+
+        result = subject.recordVideoEvent(ExternalViewabilitySession.VideoEvent.AD_VIDEO_THIRD_QUARTILE, 0);
+        assertThat(result).isTrue();
+        verify(videoPlaybackListener).recordAdVideoThirdQuartileEvent();
+
+        result = subject.recordVideoEvent(ExternalViewabilitySession.VideoEvent.AD_COMPLETE, 0);
+        assertThat(result).isTrue();
+        verify(videoPlaybackListener).recordAdCompleteEvent();
+
+        result = subject.recordVideoEvent(ExternalViewabilitySession.VideoEvent.RECORD_AD_ERROR, 0);
+        assertThat(result).isTrue();
+        verify(videoPlaybackListener).recordAdError("error");
+    }
+
+    @Test
+    public void recordVideoEvent_whenCreateVideoSessionNeverCalled_shouldNotNotifyListener_shouldReturnFalse() {
+        // create video session never called
+
+        Boolean result = subject.recordVideoEvent(ExternalViewabilitySession.VideoEvent.AD_LOADED, 0);
+
+        assertThat(result).isFalse();
+        verifyZeroInteractions(videoPlaybackListener);
+    }
+
+
+    @Test
+    public void recordVideoEvent_whenVendorDisabled_shouldNotNotifyListener_shouldReturnNull() {
+        AvidViewabilitySession.disable();
+
+        Boolean result = subject.recordVideoEvent(ExternalViewabilitySession.VideoEvent.AD_LOADED, 0);
+
+        assertThat(result).isNull();
+        verifyZeroInteractions(videoPlaybackListener);
+    }
+
+    @Test
+    public void recordVideoEvent_whenAvidMissing_shouldNotNotifyListener_shouldReturnNull() {
+        ShadowReflection.setNextClassNotFound(true);
+
+        Boolean result = subject.recordVideoEvent(ExternalViewabilitySession.VideoEvent.AD_LOADED, 0);
+
+        assertThat(result).isNull();
+        verifyZeroInteractions(videoPlaybackListener);
+    }
+
+    @Test
+    public void endVideoSession_shouldCallEndSession_shouldReturnTrue() {
+        subject.createVideoSession(activity, view, buyerResources, videoViewabilityTrackers);
+
+        Boolean result = subject.endVideoSession();
+
+        assertThat(result).isTrue();
+        assertThat(ShadowAvidAdSessionManager.wasEndVideoSessionCalled()).isTrue();
+    }
+
+    @Test
+    public void endVideoSession_whenCreateVideoSessionNeverCalled_shouldNotCallEndSession_shouldReturnFalse() {
+        // create video session never called
+
+        Boolean result = subject.endVideoSession();
+
+        assertThat(result).isFalse();
+        assertThat(ShadowAvidAdSessionManager.wasEndVideoSessionCalled()).isFalse();
+    }
+
+    @Test
+    public void endVideoSession_whenVendorDisabled_shouldNotCallEndSession_shouldReturnNull() {
+        AvidViewabilitySession.disable();
+        subject.createVideoSession(activity, view, buyerResources, videoViewabilityTrackers);
+
+        Boolean result = subject.endVideoSession();
+
+        assertThat(result).isNull();
+        assertThat(ShadowAvidAdSessionManager.wasEndVideoSessionCalled()).isFalse();
+    }
+
+    @Test
+    public void endVideoSession_whenAvidMissing_shouldNotCallEndSession_shouldReturnNull() {
+        ShadowReflection.setNextClassNotFound(true);
+        subject.createVideoSession(activity, view, buyerResources, videoViewabilityTrackers);
+
+        Boolean result = subject.endVideoSession();
+
+        assertThat(result).isNull();
+        assertThat(ShadowAvidAdSessionManager.wasEndVideoSessionCalled()).isFalse();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/BaseAdapterConfigurationTest.java b/mopub-sdk/src/test/java/com/mopub/common/BaseAdapterConfigurationTest.java
new file mode 100644
index 00000000..2fc9fa7b
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/BaseAdapterConfigurationTest.java
@@ -0,0 +1,150 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.common;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import static com.mopub.common.BaseAdapterConfiguration.CUSTOM_EVENT_PREF_NAME;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class BaseAdapterConfigurationTest {
+
+    private Context context;
+    private BaseAdapterConfiguration subject;
+
+    @Before
+    public void setup() {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+
+        subject = new TestAdapterConfiguration();
+    }
+
+    @After
+    public void tearDown() {
+        final SharedPreferences sharedPreferences = SharedPreferencesHelper.getSharedPreferences(
+                context, CUSTOM_EVENT_PREF_NAME);
+        sharedPreferences.edit().clear().apply();
+    }
+
+    @Test
+    public void setCachedInitializationParameters_withInitializationParameters_shouldSetSharedPreferences() {
+        final Map<String, String> initializationParameters = new HashMap<>();
+        initializationParameters.put("key1", "value1");
+        initializationParameters.put("key2", "value2");
+
+        subject.setCachedInitializationParameters(context, initializationParameters);
+
+        final SharedPreferences sharedPreferences = SharedPreferencesHelper.getSharedPreferences(
+                context, CUSTOM_EVENT_PREF_NAME);
+        Map<String, ?> sharedPreferencesMap = sharedPreferences.getAll();
+        assertThat(sharedPreferencesMap.size()).isEqualTo(1);
+        assertThat(sharedPreferencesMap.get(TestAdapterConfiguration.class.getName()))
+                .isEqualTo("{\"key1\":\"value1\",\"key2\":\"value2\"}");
+    }
+
+    @Test
+    public void getCachedInitializationParameters_withInitializationParameters_shouldReturnMapOfInitializationParameters() {
+        final SharedPreferences sharedPreferences = SharedPreferencesHelper.getSharedPreferences(
+                context, CUSTOM_EVENT_PREF_NAME);
+        sharedPreferences.edit().putString(TestAdapterConfiguration.class.getName(),
+                "{\"key1\":\"value1\",\"key2\":\"value2\"}").apply();
+
+        final Map<String, String> initializationParameters =
+                subject.getCachedInitializationParameters(context);
+
+        assertThat(initializationParameters.size()).isEqualTo(2);
+        assertThat(initializationParameters.get("key1")).isEqualTo("value1");
+        assertThat(initializationParameters.get("key2")).isEqualTo("value2");
+    }
+
+    @Test
+    public void getCachedInitializationParameters_withInvalidInitializationParameters_shouldReturnEmptyMap() {
+        final SharedPreferences sharedPreferences = SharedPreferencesHelper.getSharedPreferences(
+                context, CUSTOM_EVENT_PREF_NAME);
+        // missing the last curly brace
+        sharedPreferences.edit().putString(TestAdapterConfiguration.class.getName(),
+                "{\"key1\":\"value1\",\"key2\":\"value2\"").apply();
+
+        final Map<String, String> initializationParameters =
+                subject.getCachedInitializationParameters(context);
+
+        assertThat(initializationParameters.isEmpty());
+    }
+
+    @Test
+    public void getCachedInitializationParameters_withNoInitializationParameters_shouldReturnEmptyMap() {
+        final Map<String, String> initializationParameters =
+                subject.getCachedInitializationParameters(context);
+
+        assertThat(initializationParameters.isEmpty());
+    }
+
+    @Test
+    public void setCachedInitializationParameters_getCachedInitializationParameters_withInitializationParameters_shouldReturnMapOfInitializationParameters() {
+        final Map<String, String> inputInitializationParameters = new HashMap<>();
+        inputInitializationParameters.put("key1", "value1");
+        inputInitializationParameters.put("key2", "value2");
+
+        subject.setCachedInitializationParameters(context, inputInitializationParameters);
+        final Map<String, String> outputInitializationParameters =
+                subject.getCachedInitializationParameters(context);
+
+        assertThat(outputInitializationParameters.size()).isEqualTo(2);
+        assertThat(outputInitializationParameters.get("key1")).isEqualTo("value1");
+        assertThat(outputInitializationParameters.get("key2")).isEqualTo("value2");
+
+    }
+
+    public static class TestAdapterConfiguration extends BaseAdapterConfiguration {
+        @NonNull
+        @Override
+        public String getAdapterVersion() {
+            return "adapterVersion";
+        }
+
+        @Nullable
+        @Override
+        public String getBiddingToken(@NonNull final Context context) {
+            return null;
+        }
+
+        @NonNull
+        @Override
+        public String getMoPubNetworkName() {
+            return "networkName";
+        }
+
+        @NonNull
+        @Override
+        public String getNetworkSdkVersion() {
+            return "networkSdkVersion";
+        }
+
+        @Override
+        public void initializeNetwork(@NonNull final Context context,
+                @Nullable final Map<String, String> configuration,
+                @NonNull final OnNetworkInitializationFinishedListener listener) {
+            listener.onNetworkInitializationFinished(this.getClass(),
+                    MoPubErrorCode.ADAPTER_INITIALIZATION_SUCCESS);
+        }
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
index 32275e20..d3c79d61 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -12,14 +12,12 @@
 import android.webkit.WebView;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.network.Networking;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.anyString;
@@ -32,7 +30,6 @@
 import static org.robolectric.Shadows.shadowOf;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class BrowserWebViewClientTest {
 
     private final WebView MOOT_WEB_VIEW = null;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java b/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
index 92567cca..7ed0c889 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -7,7 +7,6 @@
 import android.app.Activity;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -15,7 +14,6 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import java.io.ByteArrayInputStream;
 import java.io.File;
@@ -32,7 +30,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class CacheServiceTest {
 
     private Activity context;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java b/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
index 6a391704..237b17ba 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -13,7 +13,6 @@
 import com.mopub.common.privacy.MoPubIdentifierTest;
 import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
 import com.mopub.common.util.Reflection;
 
@@ -32,8 +31,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class,
-        shadows = {MoPubShadowTelephonyManager.class})
+@Config(shadows = {MoPubShadowTelephonyManager.class})
 public class ClientMetadataTest {
 
     private Activity activityContext;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java b/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java
index d68a7f45..6e6321e5 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -12,21 +12,18 @@
 import com.mopub.common.CloseableLayout.ClosePosition;
 import com.mopub.common.CloseableLayout.OnCloseListener;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class CloseableLayoutTest {
     private CloseableLayout subject;
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/CreativeOrientationTest.java b/mopub-sdk/src/test/java/com/mopub/common/CreativeOrientationTest.java
index a62e948c..77a8154b 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/CreativeOrientationTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/CreativeOrientationTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -11,37 +11,47 @@
 public class CreativeOrientationTest {
 
     @Test
-    public void fromHeader_nullParam_shouldBeUndefined() {
-        assertThat(CreativeOrientation.fromHeader(null)).isEqualTo(CreativeOrientation.UNDEFINED);
+    public void fromString_nullParam_shouldBeDevice() {
+        assertThat(CreativeOrientation.fromString(null)).isEqualTo(CreativeOrientation.DEVICE);
     }
 
     @Test
-    public void fromHeader_emptyParam_shouldBeUndefined() {
-        assertThat(CreativeOrientation.fromHeader("")).isEqualTo(CreativeOrientation.UNDEFINED);
+    public void fromString_emptyParam_shouldBeDevice() {
+        assertThat(CreativeOrientation.fromString("")).isEqualTo(CreativeOrientation.DEVICE);
     }
 
     @Test
-    public void fromHeader_withGarbage_shouldBeUndefined() {
-        assertThat(CreativeOrientation.fromHeader("p0rtr41t")).isEqualTo(CreativeOrientation.UNDEFINED);
+    public void fromString_withGarbage_shouldBeDevice() {
+        assertThat(CreativeOrientation.fromString("p0rtr41t")).isEqualTo(CreativeOrientation.DEVICE);
     }
 
     @Test
-    public void fromHeader_lParam_shouldBeLandscape() {
-        assertThat(CreativeOrientation.fromHeader("l")).isEqualTo(CreativeOrientation.LANDSCAPE);
+    public void fromString_lParam_shouldBeLandscape() {
+        assertThat(CreativeOrientation.fromString("l")).isEqualTo(CreativeOrientation.LANDSCAPE);
     }
 
     @Test
-    public void fromHeader_uppercaseL_shouldBeLandscape() {
-        assertThat(CreativeOrientation.fromHeader("L")).isEqualTo(CreativeOrientation.LANDSCAPE);
+    public void fromString_uppercaseL_shouldBeLandscape() {
+        assertThat(CreativeOrientation.fromString("L")).isEqualTo(CreativeOrientation.LANDSCAPE);
     }
 
     @Test
-    public void fromHeader_pParam_shouldBePortrait() {
-        assertThat(CreativeOrientation.fromHeader("p")).isEqualTo(CreativeOrientation.PORTRAIT);
+    public void fromString_pParam_shouldBePortrait() {
+        assertThat(CreativeOrientation.fromString("p")).isEqualTo(CreativeOrientation.PORTRAIT);
     }
 
     @Test
-    public void fromHeader_uppercaseP_shouldBePortrait() {
-        assertThat(CreativeOrientation.fromHeader("P")).isEqualTo(CreativeOrientation.PORTRAIT);
+    public void fromString_uppercaseP_shouldBePortrait() {
+        assertThat(CreativeOrientation.fromString("P")).isEqualTo(CreativeOrientation.PORTRAIT);
+    }
+
+    @Test
+    public void fromString_dParam_shouldBeDevice() {
+        assertThat(CreativeOrientation.fromString("d")).isEqualTo(CreativeOrientation.DEVICE);
+    }
+
+    @Test
+    public void fromString_uppercaseD_shouldBeDevice() {
+        assertThat(CreativeOrientation.fromString("D")).isEqualTo(CreativeOrientation.DEVICE);
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/DoubleTimeTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/common/DoubleTimeTrackerTest.java
index 18dc8e8d..cbf8d949 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/DoubleTimeTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/DoubleTimeTrackerTest.java
@@ -1,23 +1,20 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
 package com.mopub.common;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class DoubleTimeTrackerTest {
 
     @Mock DoubleTimeTracker.Clock mockClock;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
index 40bcf6dc..7ec9b666 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
@@ -1,24 +1,21 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
 package com.mopub.common;
 
 import android.app.Activity;
-import android.content.Context;
 import android.os.Looper;
 
 import com.mopub.common.factories.MethodBuilderFactory;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLooper;
 
 import java.util.concurrent.Semaphore;
@@ -32,7 +29,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class GpsHelperTest {
     private MethodBuilder methodBuilder;
     private Activity context;
@@ -142,7 +138,7 @@ public void isLimitAdTrackingEnabled_whenGooglePlayServicesIsLinkedAndLimitAdTra
         SharedPreferencesHelper.getSharedPreferences(context)
                 .edit()
                 .putBoolean(GpsHelper.IS_LIMIT_AD_TRACKING_ENABLED_KEY, adInfo.LIMIT_AD_TRACKING_ENABLED)
-                .commit();
+                .apply();
         assertThat(GpsHelper.isLimitAdTrackingEnabled(context)).isEqualTo(adInfo.LIMIT_AD_TRACKING_ENABLED);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/LocationServiceTest.java b/mopub-sdk/src/test/java/com/mopub/common/LocationServiceTest.java
index b745f196..9d8a6a81 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/LocationServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/LocationServiceTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -13,7 +13,6 @@
 import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Reflection;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.After;
 import org.junit.Before;
@@ -22,7 +21,6 @@
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLocationManager;
 
 import static android.Manifest.permission.ACCESS_COARSE_LOCATION;
@@ -33,7 +31,6 @@
 import static org.robolectric.Shadows.shadowOf;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class LocationServiceTest {
     private Activity activity;
     private Location networkLocation;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
index 99563d13..3557f920 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -8,20 +8,17 @@
 import android.webkit.WebView;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MoPubBrowserTest {
 
     private MoPubBrowser subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubHttpUrlConnectionTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubHttpUrlConnectionTest.java
index 0d6b85b3..b525b261 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/MoPubHttpUrlConnectionTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/MoPubHttpUrlConnectionTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -9,14 +9,12 @@
 import android.webkit.WebView;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.network.Networking;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import java.net.HttpURLConnection;
 import java.net.MalformedURLException;
@@ -26,7 +24,6 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MoPubHttpUrlConnectionTest {
     private static final String url = "https://www.mopub.com";
     private String userAgent;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
index d6136a08..c39428ec 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -14,7 +14,6 @@
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.Reflection;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.CustomEventRewardedVideo;
 import com.mopub.mobileads.MoPubRewardedVideoListener;
 import com.mopub.mobileads.MoPubRewardedVideoManager;
@@ -40,8 +39,7 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLooper;
 
-import java.util.ArrayList;
-import java.util.List;
+import java.util.HashMap;
 import java.util.Map;
 
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -57,7 +55,7 @@
 // JDK version 7u79 or later. Go to File > Project Structure > [Platform Settings] > SDK to
 // change the JDK version.
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
+@Config(sdk = 21)
 @PowerMockIgnore({ "org.mockito.*", "org.robolectric.*", "android.*", "org.json.*", "com.mopub.network.CustomSSLSocketFactory" })
 @PrepareForTest({MoPubRewardedVideoManager.class})
 public class MoPubTest {
@@ -180,36 +178,6 @@ public void initializeSdk_withRewardedVideo_withMediationSettings_shouldCallMoPu
         MoPubRewardedVideoManager.init(mActivity, mMediationSettings);
     }
 
-    @Test
-    public void initializeSdk_withRewardedVideo_withNetworksToInit_shouldCallMoPubRewardedVideoManager() throws Exception {
-        List<String> stringClassList = new ArrayList<>();
-        // This class does not extend from CustomEventRewardedVideo
-        stringClassList.add("com.mopub.common.MoPubTest");
-        // This class is one that works.
-        stringClassList.add("com.mopub.common.MoPubTest$TestCustomEventRewardedVideo");
-        // Not a real class, so not added to the list.
-        stringClassList.add("not.a.real.Classname");
-        // This class is two subclasses from CustomEventRewardedVideo, but it should still be added.
-        stringClassList.add("com.mopub.common.MoPubTest$TestInheritedCustomEventRewardedVideo");
-
-        MoPub.initializeSdk(mActivity,
-                new SdkConfiguration.Builder(INIT_ADUNIT)
-                        .withNetworksToInit(stringClassList)
-                        .withMediationSettings(mMediationSettings)
-                        .build(),
-                mockInitializationListener);
-
-        ShadowLooper.runUiThreadTasks();
-        verify(mockInitializationListener).onInitializationFinished();
-        List<Class<? extends CustomEventRewardedVideo>> classList = new ArrayList<>();
-        classList.add(TestCustomEventRewardedVideo.class);
-        classList.add(TestInheritedCustomEventRewardedVideo.class);
-        verifyStatic();
-        MoPubRewardedVideoManager.init(mActivity, mMediationSettings);
-        verifyStatic();
-        MoPubRewardedVideoManager.initNetworks(mActivity, classList);
-    }
-
     @Test
     public void initializeSdk_withRewardedVideo_withoutActivity_shouldNotCallMoPubRewardedVideoManager() throws Exception {
         // Since we can't verifyStatic with 0 times, we expect this to call the rewarded video
@@ -269,8 +237,8 @@ public void hasRewardedVideo_withReflection_shouldExist() throws Exception {
     @Test
     public void initializeSdk_withOneAdvancedBidder_shouldSetAdvancedBiddingTokens() throws Exception {
         SdkConfiguration sdkConfiguration = new SdkConfiguration.Builder(
-                INIT_ADUNIT).withAdvancedBidder(
-                        AdvancedBidderTestClass.class).build();
+                INIT_ADUNIT).withAdditionalNetwork(
+                AdapterConfigurationTestClass.class.getName()).build();
 
         MoPub.initializeSdk(mActivity, sdkConfiguration, null);
 
@@ -282,8 +250,8 @@ public void initializeSdk_withOneAdvancedBidder_shouldSetAdvancedBiddingTokens()
     @Test
     public void initializeSdk_withMultipleInitializations_shouldSetAdvancedBiddingTokensOnce() throws Exception {
         SdkConfiguration sdkConfiguration = new SdkConfiguration.Builder
-                (INIT_ADUNIT).withAdvancedBidder(
-                        AdvancedBidderTestClass.class).build();
+                (INIT_ADUNIT).withAdditionalNetwork(
+                AdapterConfigurationTestClass.class.getName()).build();
 
         MoPub.initializeSdk(mActivity, sdkConfiguration, null);
 
@@ -293,7 +261,7 @@ public void initializeSdk_withMultipleInitializations_shouldSetAdvancedBiddingTo
 
         // Attempting to initialize twice
         sdkConfiguration = new SdkConfiguration.Builder(INIT_ADUNIT)
-                .withAdvancedBidder(SecondAdvancedBidderTestClass.class).build();
+                .withAdditionalNetwork(SecondAdapterConfigurationTestClass.class.getName()).build();
         MoPub.initializeSdk(mActivity, sdkConfiguration, null);
 
         // This should not do anything, and getAdvancedBiddingTokensJson() should return the
@@ -311,30 +279,125 @@ public void initializeSdk_withCallbackSet_shouldCallCallback() throws Exception
         verify(mockInitializationListener).onInitializationFinished();
     }
 
-    private static class AdvancedBidderTestClass implements MoPubAdvancedBidder {
+    @Test
+    public void initializeSdk_withNoLegitimateInterestAllowedValue_shouldCallPersonalInfoManagerSetAllowLegitimateInterest_withLegitimateInterestAllowedFalse() throws Exception {
+        MoPub.initializeSdk(mActivity, new SdkConfiguration.Builder(
+                INIT_ADUNIT).build(), null);
+        ShadowLooper.runUiThreadTasks();
 
+        final boolean actual = MoPub.shouldAllowLegitimateInterest();
+
+        assertThat(actual).isFalse();
+    }
+
+    @Test
+    public void initializeSdk_withLegitimateInterestAllowedFalse_shouldCallPersonalInfoManagerSetAllowLegitimateInterest_withLegitimateInterestAllowedFalse() throws Exception {
+        MoPub.initializeSdk(mActivity, new SdkConfiguration.Builder(
+                INIT_ADUNIT).withLegitimateInterestAllowed(false).build(), null);
+        ShadowLooper.runUiThreadTasks();
+
+        final boolean actual = MoPub.shouldAllowLegitimateInterest();
+
+        assertThat(actual).isFalse();
+    }
+
+    @Test
+    public void initializeSdk_withLegitimateInterestAllowedTrue_shouldCallPersonalInfoManagerSetAllowLegitimateInterest_withLegitimateInterestAllowedTrue() throws Exception {
+        MoPub.initializeSdk(mActivity, new SdkConfiguration.Builder(
+                INIT_ADUNIT).withLegitimateInterestAllowed(true).build(), null);
+        ShadowLooper.runUiThreadTasks();
+
+        final boolean actual = MoPub.shouldAllowLegitimateInterest();
+
+        assertThat(actual).isTrue();
+    }
+
+    private static class AdapterConfigurationTestClass extends BaseAdapterConfiguration {
+        @NonNull
+        @Override
+        public String getAdapterVersion() {
+            return "adapterVersion";
+        }
+
+        @Nullable
         @Override
-        public String getToken(final Context context) {
+        public String getBiddingToken(@NonNull final Context context) {
             return "AdvancedBidderTestClassToken";
         }
 
+        @NonNull
         @Override
-        public String getCreativeNetworkName() {
+        public String getMoPubNetworkName() {
             return "AdvancedBidderTestClassName";
         }
+
+        @NonNull
+        @Override
+        public String getNetworkSdkVersion() {
+            return "networkVersion";
+        }
+
+        @Override
+        public void initializeNetwork(@NonNull final Context context,
+                @Nullable final Map<String, String> configuration,
+                @NonNull final OnNetworkInitializationFinishedListener listener) {
+
+        }
     }
 
-    private static class SecondAdvancedBidderTestClass implements MoPubAdvancedBidder {
+    private static class SecondAdapterConfigurationTestClass implements AdapterConfiguration {
+        @NonNull
+        @Override
+        public String getAdapterVersion() {
+            return "adapterVersion";
+        }
 
+        @Nullable
         @Override
-        public String getToken(final Context context) {
+        public String getBiddingToken(@NonNull final Context context) {
             return "SecondAdvancedBidderTestClassToken";
         }
 
+        @NonNull
         @Override
-        public String getCreativeNetworkName() {
+        public String getMoPubNetworkName() {
             return "SecondAdvancedBidderTestClassName";
         }
+
+        @Nullable
+        @Override
+        public Map<String, String> getMoPubRequestOptions() {
+            return null;
+        }
+
+        @NonNull
+        @Override
+        public String getNetworkSdkVersion() {
+            return "networkVersion";
+        }
+
+        @Override
+        public void initializeNetwork(@NonNull final Context context,
+                @Nullable final Map<String, String> configuration,
+                @NonNull final OnNetworkInitializationFinishedListener listener) {
+        }
+
+        @Override
+        public void setCachedInitializationParameters(@NonNull final Context context,
+                @Nullable final Map<String, String> configuration) {
+        }
+
+        @NonNull
+        @Override
+        public Map<String, String> getCachedInitializationParameters(
+                @NonNull final Context context) {
+            return new HashMap<>();
+        }
+
+        @Override
+        public void setMoPubRequestOptions(
+                @Nullable final Map<String, String> moPubRequestOptions) {
+        }
     }
 
     private static class TestCustomEventRewardedVideo extends CustomEventRewardedVideo {
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoatViewabilitySessionTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoatViewabilitySessionTest.java
new file mode 100644
index 00000000..191896bb
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/MoatViewabilitySessionTest.java
@@ -0,0 +1,8 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.common;
+
+public class MoatViewabilitySessionTest {
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/PreconditionsTest.java b/mopub-sdk/src/test/java/com/mopub/common/PreconditionsTest.java
index aae84356..960d6510 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/PreconditionsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/PreconditionsTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
index ca8945bc..ff4afa6b 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -10,13 +10,11 @@
 
 import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK;
 import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK;
@@ -30,7 +28,6 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class UrlActionTest {
 
     @Before
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
index 597e9210..5677d405 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -12,7 +12,6 @@
 import android.support.annotation.NonNull;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.network.MoPubRequestQueue;
 import com.mopub.network.Networking;
 
@@ -21,7 +20,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowApplication;
 
 import java.net.URISyntaxException;
@@ -45,7 +43,6 @@
 import static org.robolectric.Shadows.shadowOf;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class UrlHandlerTest {
     private Context context;
     @Mock private UrlHandler.ResultActions mockResultActions;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java
index 221c37e6..01a87684 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -7,15 +7,12 @@
 import android.support.annotation.Nullable;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.mockito.internal.matchers.Null;
-import org.robolectric.annotation.Config;
 
 import java.io.IOException;
 import java.net.HttpURLConnection;
@@ -25,7 +22,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class UrlResolutionTaskTest {
     @Mock private HttpURLConnection mockHttpUrlConnection;
     @Mock private UrlResolutionTask.UrlResolutionListener mockListener;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/VisibilityTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/common/VisibilityTrackerTest.java
index 83cbdd6e..6e10693b 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/VisibilityTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/VisibilityTrackerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -15,7 +15,6 @@
 
 import com.mopub.common.VisibilityTracker.TrackingInfo;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.fest.util.Lists;
 import org.junit.Before;
@@ -26,7 +25,6 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowSystemClock;
 
 import java.util.ArrayList;
@@ -48,7 +46,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VisibilityTrackerTest {
     private static final int MIN_PERCENTAGE_VIEWED = 50;
     private static final Integer DEFAULT_MIN_VISIBLE_PX = 1;
@@ -84,7 +81,7 @@ public void onVisibilityChanged(List<View> visibleViews, List<View> invisibleVie
         subject.setVisibilityTrackerListener(proxyListener);
 
         // XXX We need this to ensure that our SystemClock starts
-        ShadowSystemClock.uptimeMillis();
+        ShadowSystemClock.currentTimeMillis();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/common/VolleyRequestMatcher.java b/mopub-sdk/src/test/java/com/mopub/common/VolleyRequestMatcher.java
index fbd4b705..3883841a 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/VolleyRequestMatcher.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/VolleyRequestMatcher.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/logging/MoPubDefaultLoggerTest.java b/mopub-sdk/src/test/java/com/mopub/common/logging/MoPubDefaultLoggerTest.java
new file mode 100644
index 00000000..ea83f340
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/logging/MoPubDefaultLoggerTest.java
@@ -0,0 +1,62 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.common.logging;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class MoPubDefaultLoggerTest {
+
+    private static final String SHORT_MESSAGE = "short message.";
+    private static String LONG_MESSAGE;
+
+    static {
+        final StringBuilder sb = new StringBuilder();
+        // 9990 bytes
+        for (int i = 0; i < 999; i++) {
+            sb.append("0123456789");
+        }
+        LONG_MESSAGE = sb.toString();
+    }
+
+    @Test
+    public void split_withShortMessage_shouldReturnArrayWithOneElement() {
+        final String[] result = MoPubDefaultLogger.split(SHORT_MESSAGE);
+
+        assertThat(result).isEqualTo(new String[]{SHORT_MESSAGE});
+    }
+
+    @Test
+    public void split_withLongMessage_shouldReturnArrayWithProperSegments() {
+        final String[] result = MoPubDefaultLogger.split(LONG_MESSAGE);
+
+        assertThat(result.length).isEqualTo(
+                (LONG_MESSAGE.length() / MoPubDefaultLogger.MAX_MESSAGE_LENGTH_BYTES) + 1);
+        final StringBuilder resultString = new StringBuilder();
+        for (String segment : result) {
+            resultString.append(segment);
+        }
+        assertThat(resultString.toString()).isEqualTo(LONG_MESSAGE);
+    }
+
+    @Test
+    public void split_withEmptyMessage_shouldReturnArrayWithEmptyString() {
+        final String[] result = MoPubDefaultLogger.split("");
+
+        assertThat(result).isEqualTo(new String[]{""});
+    }
+
+    @Test
+    public void split_withNullMessage_shouldReturnArrayWithNullString() {
+        final String[] result = MoPubDefaultLogger.split(null);
+
+        assertThat(result).isEqualTo(new String[]{null});
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/AdvertisingIdTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/AdvertisingIdTest.java
index 96699be7..f0d5f68c 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/AdvertisingIdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/AdvertisingIdTest.java
@@ -1,23 +1,21 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
 package com.mopub.common.privacy;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 import java.util.Calendar;
+import java.util.TimeZone;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class AdvertisingIdTest {
     private static final long ONE_DAY_MS = 24 * 60 * 60 * 1000;
     private static final long TEN_SECONDS_MS = 10 * 1000;
@@ -47,6 +45,8 @@ public void constructor_shouldInitializeCorrectly() {
         assertThat(subject.mDoNotTrack).isTrue();
         // return IFA even when DoNotTrack is true
         assertThat(subject.getIfaWithPrefix()).isEqualTo("ifa:" + ANDROID_ID);
+        assertThat(subject.mLastRotation.get(Calendar.DAY_OF_YEAR)).isEqualTo(
+                time.get(Calendar.DAY_OF_YEAR));
     }
 
     @Test
@@ -57,9 +57,66 @@ public void isRotationRequired_whenMoreThan24Hours_shouldReturnTrue() {
     }
 
     @Test
-    public void isRotationRequired_whenLessThan24Hours_shouldReturnFalse() {
-        // one day and ten seconds ago
-        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, false, now - ONE_DAY_MS + TEN_SECONDS_MS);
+    public void isRotationRequired_whenMidnightSameDay_shouldReturnFalse() {
+        final Calendar sameDayCalendar = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
+        sameDayCalendar.set(sameDayCalendar.get(Calendar.YEAR), sameDayCalendar.get(Calendar.MONTH),
+                sameDayCalendar.get(Calendar.DAY_OF_MONTH), 0, 0, 0);
+
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, false,
+                sameDayCalendar.getTimeInMillis());
+
+        assertThat(subject.isRotationRequired()).isFalse();
+    }
+
+    @Test
+    public void isRotationRequired_whenLastSecondOfTheSameDay_shouldReturnFalse() {
+        final Calendar sameDayCalendar = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
+        sameDayCalendar.set(sameDayCalendar.get(Calendar.YEAR), sameDayCalendar.get(Calendar.MONTH),
+                sameDayCalendar.get(Calendar.DAY_OF_MONTH), 23, 59, 59);
+
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, false,
+                sameDayCalendar.getTimeInMillis());
+
+        assertThat(subject.isRotationRequired()).isFalse();
+    }
+    @Test
+    public void isRotationRequired_whenMidnightOfNextDay_shouldReturnTrue() {
+        final Calendar sameDayCalendar = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
+        sameDayCalendar.set(sameDayCalendar.get(Calendar.YEAR), sameDayCalendar.get(Calendar.MONTH),
+                sameDayCalendar.get(Calendar.DAY_OF_MONTH), 23, 59, 59);
+        sameDayCalendar.add(Calendar.SECOND, 1);
+
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, false,
+                sameDayCalendar.getTimeInMillis());
+
+        assertThat(subject.isRotationRequired()).isTrue();
+    }
+
+    @Test
+    public void isRotationRequired_whenTimeZoneCausesDayDifference_shouldReturnTrue() {
+        final Calendar sameDayCalendar = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
+        sameDayCalendar.set(sameDayCalendar.get(Calendar.YEAR), sameDayCalendar.get(Calendar.MONTH),
+                sameDayCalendar.get(Calendar.DAY_OF_MONTH), 5, 0, 0);
+        sameDayCalendar.setTimeZone(TimeZone.getTimeZone("PST"));
+        sameDayCalendar.add(Calendar.DATE, -1);
+
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, false,
+                sameDayCalendar.getTimeInMillis());
+
+        assertThat(subject.isRotationRequired()).isTrue();
+    }
+
+    @Test
+    public void isRotationRequired_whenTimeZoneCausesNoDayDifference_shouldReturnFalse() {
+        final Calendar sameDayCalendar = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
+        sameDayCalendar.set(sameDayCalendar.get(Calendar.YEAR), sameDayCalendar.get(Calendar.MONTH),
+                sameDayCalendar.get(Calendar.DAY_OF_MONTH), 22, 0, 0);
+        sameDayCalendar.setTimeZone(TimeZone.getTimeZone("PST"));
+        sameDayCalendar.add(Calendar.DATE, -1);
+
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, false,
+                sameDayCalendar.getTimeInMillis());
+
         assertThat(subject.isRotationRequired()).isFalse();
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogActivityTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogActivityTest.java
index 661e4ea4..dfda4fbf 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogActivityTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -13,14 +13,12 @@
 import android.widget.FrameLayout;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.android.controller.ActivityController;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
@@ -30,7 +28,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class ConsentDialogActivityTest {
     private static final String HTML = "some_html";
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogControllerTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogControllerTest.java
index 9466e1df..09fabb0e 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogControllerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -13,7 +13,6 @@
 import com.mopub.common.MoPub;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Intents;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.MoPubErrorCode;
 import com.mopub.network.MoPubNetworkError;
 import com.mopub.network.MoPubRequestQueue;
@@ -32,7 +31,6 @@
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.rule.PowerMockRule;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static com.mopub.network.MoPubNetworkError.Reason.BAD_BODY;
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -43,7 +41,6 @@
 import static org.powermock.api.mockito.PowerMockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 @PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*", "org.json.*"})
 @PrepareForTest({Networking.class, Intents.class})
 public class ConsentDialogControllerTest {
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogLayoutTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogLayoutTest.java
index 8019acba..45efbebe 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogLayoutTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogLayoutTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -10,14 +10,12 @@
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Reflection;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import java.lang.reflect.Field;
 
@@ -26,7 +24,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class ConsentDialogLayoutTest {
 
     @Mock
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogRequestTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogRequestTest.java
index a96a37a3..7b98cf8f 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogRequestTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -8,7 +8,6 @@
 
 import com.mopub.common.Constants;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.network.MoPubNetworkError;
 import com.mopub.volley.DefaultRetryPolicy;
 import com.mopub.volley.NetworkResponse;
@@ -21,7 +20,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import java.nio.charset.Charset;
 
@@ -31,7 +29,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class ConsentDialogRequestTest {
     private static final String URL = "https://"+ Constants.HOST+"/m/gdpr_consent_dialog?id=testAdUnitId&nv=5.0.0&language=en";
     private static final String HTML = "html-body-text";
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogUrlGeneratorTest.java
index bc1a4285..4c8c21e2 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogUrlGeneratorTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -10,7 +10,6 @@
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.Constants;
 import com.mopub.common.MoPub;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Rule;
@@ -22,7 +21,6 @@
 import org.powermock.modules.junit4.rule.PowerMockRule;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
 
 import java.util.Map;
 
@@ -38,7 +36,6 @@
 
 @SuppressWarnings("ConstantConditions")
 @RunWith(RobolectricTestRunner.class)
-@Config(constants = BuildConfig.class)
 @PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*", "org.json.*"})
 @PrepareForTest(ClientMetadata.class)
 public class ConsentDialogUrlGeneratorTest {
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java
index ac5d8acb..5e285e3f 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -12,9 +12,9 @@
 
 import com.mopub.common.GpsHelper;
 import com.mopub.common.SdkInitializationListener;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.Reflection;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.After;
 import org.junit.Before;
@@ -30,7 +30,6 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.android.util.concurrent.RoboExecutorService;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLooper;
 
 import java.util.Calendar;
@@ -41,10 +40,8 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
-import static org.powermock.api.mockito.PowerMockito.verifyStatic;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(constants = BuildConfig.class)
 @PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*", "org.json.*"})
 @PrepareForTest(GpsHelper.class)
 public class MoPubIdentifierTest {
@@ -61,6 +58,7 @@
     private static final String AMAZON_AD_ID = "amazon_ad_id";
     private static final String TEST_IFA_ID = "test_ifa_id";
     public static final String TEST_MOPUB_ID = "test_mopub_id";
+    public static final String GOOGLE_AD_ID_DEBUG = "something_something_10ca1ad1abe1";
 
     @Before
     public void setup() {
@@ -434,6 +432,48 @@ public void refreshAdvertisingInfoBackgroundThread_withNotExpiredId_withAmazon_w
         assertThat(newId.isRotationRequired()).isFalse();
     }
 
+    @Test
+    public void rotateMoPubId_withDebugGAID_shouldSetLogLevelToDebug() throws Exception {
+        // Set log level to none and get value from MoPubLog
+        MoPubLog.setLogLevel(MoPubLog.LogLevel.NONE);
+        final MoPubLog.LogLevel beforeLogLevel = MoPubLog.getLogLevel();
+        setupGooglePlayServiceDebug(context, false);
+
+        ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+
+        subject = new MoPubIdentifier(context, idChangeListener);
+
+        ShadowLooper.runUiThreadTasks();
+        verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
+
+        // Get log level
+        final MoPubLog.LogLevel afterLogLevel = MoPubLog.getLogLevel();
+
+        assertThat(beforeLogLevel).isNotEqualTo(afterLogLevel);
+    }
+
+    @Test
+    public void rotateMoPubId_withoutDebugGAID_shouldNotSetLogLevel() throws Exception {
+        // Set log level to none and get value from MoPubLog
+        MoPubLog.setLogLevel(MoPubLog.LogLevel.NONE);
+        final MoPubLog.LogLevel beforeLogLevel = MoPubLog.getLogLevel();
+        setupGooglePlayService(context, false);
+
+        ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+
+        subject = new MoPubIdentifier(context, idChangeListener);
+
+        ShadowLooper.runUiThreadTasks();
+        verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
+
+        // Get log level
+        final MoPubLog.LogLevel afterLogLevel = MoPubLog.getLogLevel();
+
+        assertThat(beforeLogLevel).isEqualTo(afterLogLevel);
+    }
+
     // Unit tests utility functions
     public static void setupGooglePlayService(Context context, boolean limitAdTracking) {
         PowerMockito.mockStatic(GpsHelper.class);
@@ -441,6 +481,12 @@ public static void setupGooglePlayService(Context context, boolean limitAdTracki
         PowerMockito.when(GpsHelper.fetchAdvertisingInfoSync(context)).thenReturn(new GpsHelper.AdvertisingInfo(GOOGLE_AD_ID, limitAdTracking));
     }
 
+    public static void setupGooglePlayServiceDebug(Context context, boolean limitAdTracking) {
+        PowerMockito.mockStatic(GpsHelper.class);
+        PowerMockito.when(GpsHelper.isLimitAdTrackingEnabled(context)).thenReturn(limitAdTracking);
+        PowerMockito.when(GpsHelper.fetchAdvertisingInfoSync(context)).thenReturn(new GpsHelper.AdvertisingInfo(GOOGLE_AD_ID_DEBUG, limitAdTracking));
+    }
+
     public static void setupAmazonAdvertisingInfo(boolean limitAdTracking) {
         ContentResolver resolver = RuntimeEnvironment.application.getContentResolver();
         Settings.Secure.putInt(resolver, "limit_ad_tracking", limitAdTracking ? 1 : 0);
@@ -467,7 +513,7 @@ public static AdvertisingId writeAdvertisingInfoToSharedPreferences(Context cont
     }
 
     private static AdvertisingId writeExpiredAdvertisingInfoToSharedPreferences(Context context, boolean doNotTrack) throws Exception {
-        final long time = Calendar.getInstance().getTimeInMillis() - AdvertisingId.ROTATION_TIME_MS;
+        final long time = Calendar.getInstance().getTimeInMillis() - AdvertisingId.ONE_DAY_MS * 2;
         return writeAdvertisingInfoToSharedPreferences(context, doNotTrack, time);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoDataTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoDataTest.java
index 40800457..fcfa6845 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoDataTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoDataTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -7,18 +7,15 @@
 import android.app.Activity;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class PersonalInfoDataTest {
 
     Activity activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoManagerTest.java
index da4cf1a8..ee8712a9 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoManagerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -11,7 +11,6 @@
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.MoPub;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.network.MoPubRequestQueue;
 import com.mopub.network.MoPubRequestQueueTest;
 import com.mopub.network.Networking;
@@ -27,7 +26,6 @@
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.rule.PowerMockRule;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -38,7 +36,6 @@
 
 @RunWith(SdkTestRunner.class)
 @PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*", "org.json.*"})
-@Config(constants = BuildConfig.class)
 @PrepareForTest({ClientMetadata.class, Networking.class, AdvertisingId.class, MoPub.class})
 public class PersonalInfoManagerTest {
 
@@ -85,6 +82,7 @@ public void setUp() {
         personalInfoData = subject.getPersonalInfoData();
         mockConsentStatusChangeListener = mock(ConsentStatusChangeListener.class);
         subject.subscribeConsentStatusChangeListener(mockConsentStatusChangeListener);
+        personalInfoData.setLastChangedMs("old_time");
     }
 
     @After
@@ -131,6 +129,24 @@ public void shouldShowConsentDialog_withGdprAppliesFalse_shouldReturnFalse() {
         assertThat(actual).isFalse();
     }
 
+    @Test
+    public void shouldAllowLegitimateInterest_withLegitimateInterestAllowedFalse_shouldReturnFalse() {
+        subject.setAllowLegitimateInterest(false);
+
+        final boolean actual = subject.shouldAllowLegitimateInterest();
+
+        assertThat(actual).isFalse();
+    }
+
+    @Test
+    public void shouldAllowLegitimateInterest_withLegitimateInterestAllowedTrue_shouldReturnTrue() {
+        subject.setAllowLegitimateInterest(true);
+
+        final boolean actual = subject.shouldAllowLegitimateInterest();
+
+        assertThat(actual).isTrue();
+    }
+
     @Test
     public void shouldShowConsentDialog_withGdprAppliesTrue_withVariousConsentStatuses_shouldReturnCorrectValue() {
         personalInfoData.setGdprApplies(true);
@@ -349,6 +365,7 @@ public void changeConsentStateFromDialog_withYes_shouldChangeStatusToExplicitYes
         assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_YES);
         assertThat(personalInfoData.getConsentChangeReason()).isEqualTo(
                 ConsentChangeReason.GRANTED_BY_USER.getReason());
+        assertThat(personalInfoData.getLastChangedMs()).isNotEqualTo("old_time");
         verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
                 ConsentStatus.EXPLICIT_YES, true);
     }
@@ -363,6 +380,7 @@ public void changeConsentStateFromDialog_withNo_shouldChangeStatusToExplicitNo()
         assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_NO);
         assertThat(personalInfoData.getConsentChangeReason()).isEqualTo(
                 ConsentChangeReason.DENIED_BY_USER.getReason());
+        assertThat(personalInfoData.getLastChangedMs()).isNotEqualTo("old_time");
         verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
                 ConsentStatus.EXPLICIT_NO, false);
     }
@@ -733,6 +751,7 @@ public void attemptStateTransition_withSameConsentStatus_shouldDoNothing() {
         subject.attemptStateTransition(ConsentStatus.EXPLICIT_YES, "no reason");
         verifyZeroInteractions(mockConsentStatusChangeListener);
         assertThat(personalInfoData.getConsentedPrivacyPolicyVersion()).isEqualTo("1");
+        assertThat(personalInfoData.getLastChangedMs()).isEqualTo("old_time");
     }
 
     @Test
@@ -752,6 +771,7 @@ public void attemptStateTransition_withUnknownToYes_shouldSetConsentedVersions_s
         assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_YES);
         verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
                 ConsentStatus.EXPLICIT_YES, true);
+        assertThat(personalInfoData.getLastChangedMs()).isNotEqualTo("old_time");
     }
 
     @Test
@@ -773,6 +793,7 @@ public void attemptStateTransition_withPotentialWhitelistToYes_shouldNotSetConse
         verify(mockConsentStatusChangeListener).onConsentStateChange(
                 ConsentStatus.POTENTIAL_WHITELIST,
                 ConsentStatus.EXPLICIT_YES, true);
+        assertThat(personalInfoData.getLastChangedMs()).isNotEqualTo("old_time");
     }
 
     @Test
@@ -794,6 +815,7 @@ public void attemptStateTransition_withYesToDnt_shouldClearPersonalDataExceptUdi
         assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.DNT);
         verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.EXPLICIT_YES,
                 ConsentStatus.DNT, false);
+        assertThat(personalInfoData.getLastChangedMs()).isNotEqualTo("old_time");
     }
 
     @Test
@@ -814,6 +836,7 @@ public void attemptStateTransition_withUnknownToDnt() {
         assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.DNT);
         verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.EXPLICIT_YES,
                 ConsentStatus.DNT, false);
+        assertThat(personalInfoData.getLastChangedMs()).isNotEqualTo("old_time");
     }
 
     @Test
@@ -835,6 +858,7 @@ public void attemptStateTransition_withYesToNo_shouldClearPersonalDataExceptUdid
         assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_NO);
         verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.EXPLICIT_YES,
                 ConsentStatus.EXPLICIT_NO, false);
+        assertThat(personalInfoData.getLastChangedMs()).isNotEqualTo("old_time");
     }
 
     @Test
@@ -855,5 +879,6 @@ public void attemptStateTransition_withUnknownToPotentialWhitelist_shouldSetCons
                 ConsentStatus.POTENTIAL_WHITELIST);
         verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
                 ConsentStatus.POTENTIAL_WHITELIST, false);
+        assertThat(personalInfoData.getLastChangedMs()).isNotEqualTo("old_time");
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/SyncUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/SyncUrlGeneratorTest.java
index 1c609379..abf57941 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/SyncUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/SyncUrlGeneratorTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -11,7 +11,6 @@
 import com.mopub.common.Constants;
 import com.mopub.common.MoPub;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.nativeads.NativeUrlGeneratorTest;
 import com.mopub.network.PlayServicesUrlRewriter;
 
@@ -24,7 +23,6 @@
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.rule.PowerMockRule;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -32,7 +30,6 @@
 import static org.powermock.api.mockito.PowerMockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 @PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*", "org.json.*"})
 @PrepareForTest(ClientMetadata.class)
 public class SyncUrlGeneratorTest {
diff --git a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
index 9b8255a4..b03d8db4 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -14,7 +14,10 @@
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.DateAndTime;
 import com.mopub.common.util.test.support.ShadowAsyncTasks;
+import com.mopub.common.util.test.support.ShadowAvidAdSessionManager;
+import com.mopub.common.util.test.support.ShadowAvidManager;
 import com.mopub.common.util.test.support.ShadowMoPubHttpUrlConnection;
+import com.mopub.common.util.test.support.ShadowMoatFactory;
 import com.mopub.common.util.test.support.ShadowReflection;
 import com.mopub.common.util.test.support.TestDateAndTime;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
@@ -88,6 +91,11 @@ public void prepareTest(Object test) {
             ShadowAsyncTasks.reset();
             ShadowMoPubHttpUrlConnection.reset();
             ShadowReflection.reset();
+
+            ShadowAvidAdSessionManager.reset();
+            ShadowAvidManager.reset();
+            ShadowMoatFactory.reset();
+
             MoPub.setLocationAwareness(LocationAwareness.NORMAL);
             MoPub.setLocationPrecision(6);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/test/support/UrlSupport.java b/mopub-sdk/src/test/java/com/mopub/common/test/support/UrlSupport.java
index e5dd719c..820efa6b 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/test/support/UrlSupport.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/test/support/UrlSupport.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
index c96904ed..a8184591 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/DeviceUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/DeviceUtilsTest.java
index 69c75670..c37bef0a 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/DeviceUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/DeviceUtilsTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -13,7 +13,6 @@
 
 import com.mopub.common.CreativeOrientation;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.nativeads.test.support.MoPubShadowDisplay;
 
 import org.junit.Before;
@@ -21,12 +20,10 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class DeviceUtilsTest {
 
     private Activity testActivity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/DipsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/DipsTest.java
index f4e2b157..682ad430 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/DipsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/DipsTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -9,19 +9,16 @@
 import android.util.DisplayMetrics;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class DipsTest {
 
     @Mock private Activity activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java
index 82bd5bb5..3870bb60 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/FilesTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/FilesTest.java
index c3a2a2ef..86a7ed08 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/FilesTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/FilesTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
index 2511eb3f..bd58c848 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java
index 199fae48..7309feae 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java
@@ -1,16 +1,14 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
 package com.mopub.common.util;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -18,7 +16,6 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class JsonTest {
     private Map<String,String> expectedMap;
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
index 82de1db5..d905659e 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -13,6 +13,7 @@
 import android.content.pm.ResolveInfo;
 
 import com.mopub.common.MoPubBrowser;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.MoPubActivity;
 import com.mopub.mobileads.MraidActivity;
 import com.mopub.mobileads.MraidVideoPlayerActivity;
@@ -58,6 +59,9 @@ public void setUp() throws Exception {
         requiredNativeSdkActivities = ManifestUtils.getRequiredNativeSdkActivities();
 
         setDebugMode(false);
+        ShadowLog.clear();
+
+        MoPubLog.setLogLevel(MoPubLog.LogLevel.DEBUG);
     }
 
     @After
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java
index b93e06e3..2d862324 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
index 536b950d..cde843bb 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/StreamsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/StreamsTest.java
index f522b69e..8d9458ef 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/StreamsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/StreamsTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/UtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/UtilsTest.java
index 4124c6f3..023562c3 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/UtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/UtilsTest.java
@@ -1,15 +1,13 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
 package com.mopub.common.util;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 import java.util.HashSet;
 import java.util.Set;
@@ -17,7 +15,6 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class UtilsTest {
     @Test
     public void generateUniqueId_withMultipleInvocations_shouldReturnUniqueValues() throws Exception {
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java
index 040e415e..2ae7dcd0 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/VisibilityTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/VisibilityTest.java
index 29bd8e5f..eee0fa1e 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/VisibilityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/VisibilityTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -7,16 +7,13 @@
 import android.view.View;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VisibilityTest {
     @Test
     public void isScreenVisible_shouldOnlyReturnTrueForViewVisible() throws Exception {
@@ -45,4 +42,4 @@ public void hasScreenVisibilityChanged_withDifferentVisibilities_shouldReturnTru
         assertThat(Visibility.hasScreenVisibilityChanged(View.VISIBLE, View.INVISIBLE)).isTrue();
         assertThat(Visibility.hasScreenVisibilityChanged(View.INVISIBLE, View.VISIBLE)).isTrue();
     }
-}
\ No newline at end of file
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAsyncTasks.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAsyncTasks.java
index be56c6fb..b6e67ab6 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAsyncTasks.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAsyncTasks.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAvidAdSessionManager.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAvidAdSessionManager.java
new file mode 100644
index 00000000..6c27f371
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAvidAdSessionManager.java
@@ -0,0 +1,264 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.common.util.test.support;
+
+import android.app.Activity;
+import android.content.Context;
+import android.view.View;
+import android.webkit.WebView;
+
+import com.integralads.avid.library.mopub.deferred.AvidDeferredAdSessionListener;
+import com.integralads.avid.library.mopub.session.AvidAdSessionManager;
+import com.integralads.avid.library.mopub.session.AvidDisplayAdSession;
+import com.integralads.avid.library.mopub.session.AvidManagedVideoAdSession;
+import com.integralads.avid.library.mopub.session.ExternalAvidAdSessionContext;
+import com.integralads.avid.library.mopub.video.AvidVideoPlaybackListener;
+
+import org.mockito.Mock;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+import org.robolectric.annotation.Implementation;
+import org.robolectric.annotation.Implements;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.doAnswer;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+@Implements(value = AvidAdSessionManager.class)
+public class ShadowAvidAdSessionManager {
+    // AvidDisplayListener state
+    private static boolean sRecordDisplayReadyEventCalled;
+
+    // AvidAdSessionManager state
+    private static boolean sStartDisplayAdSessionCalled;
+    private static Context sLatestDisplayContext;
+    private static ExternalAvidAdSessionContext sLatestDisplayAvidAdSessionContext;
+
+    private static boolean sStartVideoAdSessionCalled;
+    private static Context sLatestVideoContext;
+    private static ExternalAvidAdSessionContext sLatestVideoAvidAdSessionContext;
+
+    // AvidDisplayAdSession state
+    private static boolean sRegisterDisplayAdViewCalled;
+    private static WebView sLatestRegisteredDisplayWebView;
+    private static Activity sLatestRegisteredDisplayActivity;
+    private static boolean sEndDisplaySessionCalled;
+
+    // AvidVideoAdSession state
+    private static boolean sRegisterVideoAdViewCalled;
+    private static View sLatestRegisteredVideoView;
+    private static Activity sLatestRegisteredVideoActivity;
+    private static List<String> sInjectedJavaScriptResources = new ArrayList<String>();
+    private static List<View> sFriendlyObstructions = new ArrayList<View>();
+    private static boolean sEndVideoSessionCalled;
+
+    @Mock private static AvidDisplayAdSession sMockAvidDisplayAdSession;
+    @Mock private static AvidManagedVideoAdSession sMockAvidVideoAdSession;
+    @Mock private static AvidDeferredAdSessionListener sAvidDeferredAdSessionListener;
+    @Mock private static AvidVideoPlaybackListener sAvidVideoPlaybackListener;
+
+    static {
+        initializeMocks();
+    }
+
+    public static void reset() {
+        sStartDisplayAdSessionCalled = false;
+        sLatestDisplayContext = null;
+        sLatestDisplayAvidAdSessionContext = null;
+
+        sRegisterDisplayAdViewCalled = false;
+        sLatestRegisteredDisplayWebView = null;
+        sLatestRegisteredDisplayActivity = null;
+        sEndDisplaySessionCalled = false;
+
+        sStartVideoAdSessionCalled = false;
+        sLatestVideoContext = null;
+        sLatestVideoAvidAdSessionContext = null;
+
+        sRegisterVideoAdViewCalled = false;
+        sLatestRegisteredVideoView = null;
+        sLatestRegisteredVideoActivity = null;
+        sInjectedJavaScriptResources.clear();
+        sFriendlyObstructions.clear();
+        sEndVideoSessionCalled = false;
+
+        sRecordDisplayReadyEventCalled = false;
+
+        initializeMocks();
+    }
+
+    // Display
+    @Implementation
+    public static AvidDisplayAdSession startAvidDisplayAdSession(Context context,
+            ExternalAvidAdSessionContext avidAdSessionContext) {
+        sStartDisplayAdSessionCalled = true;
+        sLatestDisplayContext = context;
+        sLatestDisplayAvidAdSessionContext = avidAdSessionContext;
+
+        return sMockAvidDisplayAdSession;
+    }
+
+    public static boolean wasStartDisplayAdSessionCalled() {
+        return sStartDisplayAdSessionCalled;
+    }
+
+    public static Context getLatestDisplayContext() {
+        return sLatestDisplayContext;
+    }
+
+    public static ExternalAvidAdSessionContext getLatestDisplayAvidAdSessionContext() {
+        return sLatestDisplayAvidAdSessionContext;
+    }
+
+    public static boolean wasRegisterDisplayAdViewCalled() {
+        return sRegisterDisplayAdViewCalled;
+    }
+
+    public static WebView getLatestRegisteredDisplayWebView() {
+        return sLatestRegisteredDisplayWebView;
+    }
+
+    public static Activity getLatestRegisteredDisplayActivity() {
+        return sLatestRegisteredDisplayActivity;
+    }
+
+    public static boolean wasEndDisplaySessionCalled() {
+        return sEndDisplaySessionCalled;
+    }
+
+    public static boolean wasRecordDisplayReadyEventCalled() {
+        return sRecordDisplayReadyEventCalled;
+    }
+
+    // Video
+    @Implementation
+    public static AvidManagedVideoAdSession startAvidManagedVideoAdSession(Context context,
+            ExternalAvidAdSessionContext avidAdSessionContext) {
+        sStartVideoAdSessionCalled = true;
+        sLatestVideoContext = context;
+        sLatestVideoAvidAdSessionContext = avidAdSessionContext;
+        return sMockAvidVideoAdSession;
+    }
+
+    public static boolean wasStartVideoAdSessionCalled() {
+        return sStartVideoAdSessionCalled;
+    }
+
+    public static Context getLatestVideoContext() {
+        return sLatestVideoContext;
+    }
+
+    public static ExternalAvidAdSessionContext getLatestVideoAvidAdSessionContext() {
+        return sLatestVideoAvidAdSessionContext;
+    }
+
+    public static boolean wasRegisterVideoAdViewCalled() {
+        return sRegisterVideoAdViewCalled;
+    }
+
+    public static View getLatestRegisteredVideoView() {
+        return sLatestRegisteredVideoView;
+    }
+
+    public static Activity getLatestRegisteredVideoActivity() {
+        return sLatestRegisteredVideoActivity;
+    }
+
+    public static List<String> getInjectedJavaScriptResources() {
+        return sInjectedJavaScriptResources;
+    }
+
+    public static List<View> getFriendlyObstructions() {
+        return sFriendlyObstructions;
+    }
+
+    public static AvidVideoPlaybackListener getMockVideoPlaybackListener() {
+        return sAvidVideoPlaybackListener;
+    }
+
+    public static boolean wasEndVideoSessionCalled() {
+        return sEndVideoSessionCalled;
+    }
+
+    private static void initializeMocks() {
+        sMockAvidDisplayAdSession = mock(AvidDisplayAdSession.class);
+        sMockAvidVideoAdSession = mock(AvidManagedVideoAdSession.class);
+        sAvidDeferredAdSessionListener = mock(AvidDeferredAdSessionListener.class);
+        sAvidVideoPlaybackListener = mock(AvidVideoPlaybackListener.class);
+
+        // Listeners
+        when(sMockAvidDisplayAdSession.getAvidDeferredAdSessionListener())
+                .thenReturn(sAvidDeferredAdSessionListener);
+        when(sMockAvidVideoAdSession.getAvidVideoPlaybackListener())
+                .thenReturn(sAvidVideoPlaybackListener);
+
+        doAnswer(new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocation) throws Throwable {
+                sRecordDisplayReadyEventCalled = true;
+                return null;
+            }
+        }).when(sAvidDeferredAdSessionListener).recordReadyEvent();
+
+        // Display
+        doAnswer(new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocation) throws Throwable {
+                sRegisterDisplayAdViewCalled = true;
+                sLatestRegisteredDisplayWebView = (WebView) invocation.getArguments()[0];
+                sLatestRegisteredDisplayActivity = (Activity) invocation.getArguments()[1];
+                return null;
+            }
+        }).when(sMockAvidDisplayAdSession).registerAdView(any(WebView.class), any(Activity.class));
+
+        doAnswer(new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocation) throws Throwable {
+                sEndDisplaySessionCalled = true;
+                return null;
+            }
+        }).when(sMockAvidDisplayAdSession).endSession();
+
+        // Video
+        doAnswer(new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocation) throws Throwable {
+                sRegisterVideoAdViewCalled = true;
+                sLatestRegisteredVideoView = (View) invocation.getArguments()[0];
+                sLatestRegisteredVideoActivity = (Activity) invocation.getArguments()[1];
+                return null;
+            }
+        }).when(sMockAvidVideoAdSession).registerAdView(any(View.class), any(Activity.class));
+
+        doAnswer(new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocation) throws Throwable {
+                sInjectedJavaScriptResources.add((String) invocation.getArguments()[0]);
+                return null;
+            }
+        }).when(sMockAvidVideoAdSession).injectJavaScriptResource(any(String.class));
+
+        doAnswer(new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocation) throws Throwable {
+                sFriendlyObstructions.add((View) invocation.getArguments()[0]);
+                return null;
+            }
+        }).when(sMockAvidVideoAdSession).registerFriendlyObstruction(any(View.class));
+
+        doAnswer(new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocation) throws Throwable {
+                sEndVideoSessionCalled = true;
+                return null;
+            }
+        }).when(sMockAvidVideoAdSession).endSession();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAvidManager.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAvidManager.java
new file mode 100644
index 00000000..87dd056a
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAvidManager.java
@@ -0,0 +1,56 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.common.util.test.support;
+
+import android.app.Activity;
+
+import com.integralads.avid.library.mopub.AvidManager;
+
+import org.mockito.Mock;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+import org.robolectric.annotation.Implementation;
+import org.robolectric.annotation.Implements;
+
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.doAnswer;
+import static org.mockito.Mockito.mock;
+
+@Implements(value = AvidManager.class)
+public class ShadowAvidManager {
+    @Mock private static AvidManager mockAvidManager;
+    private static Activity sLatestRegisteredActivity;
+
+    static {
+        resetManager();
+    }
+
+    public static void reset() {
+        resetManager();
+
+        sLatestRegisteredActivity = null;
+    }
+
+    @Implementation
+    public static AvidManager getInstance() {
+        return mockAvidManager;
+    }
+
+    public static Activity getLatestRegisteredActivity() {
+        return sLatestRegisteredActivity;
+    }
+
+    private static void resetManager() {
+        mockAvidManager = mock(AvidManager.class);
+
+        doAnswer(new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocation) throws Throwable {
+                sLatestRegisteredActivity = (Activity) invocation.getArguments()[0];
+                return null;
+            }
+        }).when(mockAvidManager).registerActivity(any(Activity.class));
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowMoPubHttpUrlConnection.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowMoPubHttpUrlConnection.java
index da6c183c..16aff80c 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowMoPubHttpUrlConnection.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowMoPubHttpUrlConnection.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowMoatFactory.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowMoatFactory.java
new file mode 100644
index 00000000..ad7b16dc
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowMoatFactory.java
@@ -0,0 +1,122 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.common.util.test.support;
+
+import android.app.Activity;
+import android.webkit.WebView;
+
+import com.moat.analytics.mobile.mpub.MoatFactory;
+import com.moat.analytics.mobile.mpub.WebAdTracker;
+
+import org.mockito.Mock;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+import org.robolectric.annotation.Implementation;
+import org.robolectric.annotation.Implements;
+
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.doAnswer;
+import static org.mockito.Mockito.mock;
+
+@Implements(value = MoatFactory.class)
+public class ShadowMoatFactory {
+    // MoatFactory state
+    private static boolean sCreateCalled;
+    private static Activity sLatestActivity;
+    private static boolean sCreateWebAdTrackerCalled;
+    private static WebView sLatestWebView;
+
+    // WebAdTracker state
+    private static boolean sStartTrackingCalled;
+    private static boolean sStopTrackingCalled;
+
+    private static @Mock MoatFactory sMockMoatFactory;
+    private static @Mock WebAdTracker sMockWebAdTracker;
+
+    static {
+        initializeMocks();
+    }
+
+    public static void reset() {
+        sCreateCalled = false;
+        sLatestActivity = null;
+        sCreateWebAdTrackerCalled = false;
+        sLatestWebView = null;
+
+        sStartTrackingCalled = false;
+        sStopTrackingCalled = false;
+
+        initializeMocks();
+    }
+
+    @Implementation
+    public static MoatFactory create() {
+        sCreateCalled = true;
+
+        return sMockMoatFactory;
+    }
+
+    public static boolean wasCreateCalled() {
+        return sCreateCalled;
+    }
+
+    public static Activity getLatestActivity() {
+        return sLatestActivity;
+    }
+
+    public static boolean wasCreateWebAdTrackerCalled() {
+        return sCreateWebAdTrackerCalled;
+    }
+
+    public static WebView getLatestWebView() {
+        return sLatestWebView;
+    }
+
+    public static boolean wasStartTrackingCalled() {
+        return sStartTrackingCalled;
+    }
+
+    public static boolean wasStopTrackingCalled() {
+        return sStopTrackingCalled;
+    }
+
+    private static void initializeMocks() {
+        sMockMoatFactory = mock(MoatFactory.class);
+        sMockWebAdTracker = mock(WebAdTracker.class);
+
+        doAnswer(new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocation) throws Throwable {
+                sCreateWebAdTrackerCalled = true;
+                sLatestWebView = (WebView) invocation.getArguments()[0];
+                return sMockWebAdTracker;
+            }
+        }).when(sMockMoatFactory).createWebAdTracker(any(WebView.class));
+
+        doAnswer(new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocation) throws Throwable {
+                sLatestActivity = (Activity) invocation.getArguments()[0];
+                return sMockWebAdTracker;
+            }
+        }).when(sMockMoatFactory).createWebAdTracker(any(WebView.class));
+
+        doAnswer(new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocation) throws Throwable {
+                sStartTrackingCalled = true;
+                return null;
+            }
+        }).when(sMockWebAdTracker).startTracking();
+
+        doAnswer(new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocation) throws Throwable {
+                sStopTrackingCalled = true;
+                return null;
+            }
+        }).when(sMockWebAdTracker).stopTracking();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
index 1858111a..c67668f8 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDateAndTime.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDateAndTime.java
index 9e20a750..59b15510 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDateAndTime.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDateAndTime.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDrawables.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDrawables.java
index d21724ca..e25009d2 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDrawables.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDrawables.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestMethodBuilderFactory.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestMethodBuilderFactory.java
index 16f6b4f3..a8efbada 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestMethodBuilderFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestMethodBuilderFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
index aafa6254..d4a86dbe 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -16,7 +16,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.robolectric.annotation.Config;
 
 import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.FAILED;
 import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.FINISHED;
@@ -24,10 +23,10 @@
 import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.GOING_RIGHT;
 import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.UNSET;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class AdAlertGestureListenerTest {
     @Mock
     private View mockView;
@@ -319,6 +318,34 @@ public void reset_shouldResetStateAndZigZagCount() throws Exception {
         assertZigZagState(UNSET);
     }
 
+    @Test
+    public void isClicked_initialStateIsFalse(){
+        assertThat(subject.isClicked()).isFalse();
+    }
+
+    @Test
+    public void isClicked_afterMotionEvent_isTrue(){
+        MotionEvent touchEvent = mock(MotionEvent.class);
+
+        subject.onSingleTapUp(touchEvent);
+
+        assertThat(subject.isClicked()).isTrue();
+    }
+
+    @Test
+    public void isClicked_afterMotionEvent_afterReset_isFalse(){
+        MotionEvent touchEvent = mock(MotionEvent.class);
+
+        subject.onSingleTapUp(touchEvent);
+        assertThat(subject.isClicked()).isTrue();
+
+        subject.onResetUserClick();
+        assertThat(subject.isClicked()).isFalse();
+    }
+
+    /*
+        Utils
+     */
     private void simulateScroll(float endX) {
         simulateScroll(endX, savedY);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
index e01ede6f..b8c249c5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -21,7 +21,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowApplication;
 
 import java.text.SimpleDateFormat;
@@ -37,7 +36,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class AdAlertReporterTest {
     private final static String EMAIL_ADDRESS = "creative-review@mopub.com";
     private AdAlertReporter subject;
@@ -105,12 +103,14 @@ public void constructor_shouldCreateIntentWithImageStringAndParametersAndRespons
         emailIntent = subject.getEmailIntent();
         String emailSubject = emailIntent.getStringExtra(Intent.EXTRA_TEXT);
         String bodyParts[] = emailSubject.split("\n=================\n");
-        String parameters = bodyParts[0];
-        String response = bodyParts[1];
-        String imageString = bodyParts[2];
+        String message = bodyParts[0];
+        String parameters = bodyParts[1];
+        String response = bodyParts[2];
+        String imageString = bodyParts[3];
 
-        assertThat(bodyParts.length).isEqualTo(3);
+        assertThat(bodyParts.length).isEqualTo(4);
         //this string is the JPEG encoded version
+        assertThat(message).isEqualTo(AdAlertReporter.MESSAGE);
         assertThat(parameters).isEqualTo(subject.getParameters());
         assertThat(response).isEqualTo(subject.getResponse());
         assertThat(imageString).isEqualTo("Qml0bWFwICgxMCB4IDEwKSBjcmVhdGVkIGZyb20gQml0bWFwIG9iamVjdCBjb21wcmVzc2VkIGFz\nIEpQRUcgd2l0aCBxdWFsaXR5IDI1\n");
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoaderRewardedVideoTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoaderRewardedVideoTest.java
index e96a888c..4e188d01 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoaderRewardedVideoTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoaderRewardedVideoTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -31,7 +31,6 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import java.lang.reflect.Field;
 
@@ -41,7 +40,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class AdLoaderRewardedVideoTest {
 
     @Mock
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
index 4f3b689b..dabc2a04 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -18,7 +18,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -28,7 +27,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class AdTypeTranslatorTest {
     private String customEventName;
     private MoPubView moPubView;
@@ -133,6 +131,13 @@ public void getCustomEventName_withNativeFormat_shouldBeMoPubNative() {
         assertThat(customEventName).isEqualTo("com.mopub.nativeads.MoPubCustomEventNative");
     }
 
+    @Test
+    public void getCustomEventName_withNativeVideoFormat_shouldBeMoPubNativeVideo() {
+        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.NATIVE, AdType.VIDEO_NATIVE, null, headers);
+
+        assertThat(customEventName).isEqualTo("com.mopub.nativeads.MoPubCustomEventVideoNative");
+    }
+
     @Test
     public void getCustomEventName_whenInvalidAdTypeAndInvalidFullAdType_shouldReturnNull() {
         customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, "garbage", "garbage",
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
index de1e3ccd..1c05287f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -60,6 +60,7 @@
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.argThat;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.atLeastOnce;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
@@ -71,7 +72,7 @@
 
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {MoPubShadowTelephonyManager.class, MoPubShadowConnectivityManager.class})
+@Config(shadows = {MoPubShadowTelephonyManager.class, MoPubShadowConnectivityManager.class})
 public class AdViewControllerTest {
 
     private static final int[] HTML_ERROR_CODES = new int[]{400, 401, 402, 403, 404, 405, 407, 408,
@@ -200,6 +201,7 @@ public void adDidFail_shouldScheduleRefreshTimer_shouldCallMoPubViewAdFailed() {
         ShadowLooper.pauseMainLooper();
         assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
 
+        subject.setAdUnitId("abc123");
         subject.adDidFail(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
 
         assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
@@ -343,19 +345,19 @@ public void multiplePausesBeforeResumeRefresh_shouldEnableAutoRefresh() {
     @Test
     public void enablingAutoRefresh_afterLoadAd_shouldScheduleNewRefreshTimer() {
 
-        final AdViewController adViewControllerSpy = spy(subject);
+        final AdViewController spyAdViewController = spy(subject);
 
-        adViewControllerSpy.loadAd();
-        adViewControllerSpy.setShouldAllowAutoRefresh(true);
-        verify(adViewControllerSpy).scheduleRefreshTimerIfEnabled();
+        spyAdViewController.loadAd();
+        spyAdViewController.setShouldAllowAutoRefresh(true);
+        verify(spyAdViewController).scheduleRefreshTimerIfEnabled();
     }
 
     @Test
     public void enablingAutoRefresh_withoutCallingLoadAd_shouldNotScheduleNewRefreshTimer() {
-        final AdViewController adViewControllerSpy = spy(subject);
+        final AdViewController spyAdViewController = spy(subject);
 
-        adViewControllerSpy.setShouldAllowAutoRefresh(true);
-        verify(adViewControllerSpy, never()).scheduleRefreshTimerIfEnabled();
+        spyAdViewController.setShouldAllowAutoRefresh(true);
+        verify(spyAdViewController, never()).scheduleRefreshTimerIfEnabled();
     }
 
     @Test
@@ -421,11 +423,43 @@ public void loadAd_shouldNotLoadWithoutConnectivity() {
 
     @Test
     public void loadAd_shouldNotLoadUrlIfAdUnitIdIsNull() {
+        // mAdUnitId is null at initialization
         subject.loadAd();
 
         verifyZeroInteractions(mockRequestQueue);
     }
 
+    @Test
+    public void loadAd_withNullAdUnitId_shouldCallAdDidFail_withMissingAdUnitIdError() {
+        final AdViewController spyAdViewController = spy(subject);
+        // mAdUnitId is null at initialization
+        spyAdViewController.loadAd();
+
+        verify(spyAdViewController, atLeastOnce()).adDidFail(any(MoPubErrorCode.class));
+    }
+
+    @Test
+    public void loadAd_withEmptyAdUnitId_shouldCallAdDidFail_withMissingAdUnitIdError() {
+        final AdViewController spyAdViewController = spy(subject);
+        spyAdViewController.setAdUnitId("");
+        spyAdViewController.loadAd();
+
+        verify(spyAdViewController, atLeastOnce()).adDidFail(MoPubErrorCode.MISSING_AD_UNIT_ID);
+    }
+
+    @Test
+    public void loadAd_withoutNetworkConnection_shouldCallAdDidFail_withNoConnectionError() {
+        ConnectivityManager connectivityManager = (ConnectivityManager) RuntimeEnvironment.application.getSystemService(Context.CONNECTIVITY_SERVICE);
+        Shadows.shadowOf(connectivityManager.getActiveNetworkInfo()).setConnectionStatus(false);
+
+        final AdViewController spyAdViewController = spy(subject);
+
+        spyAdViewController.setAdUnitId("abc123");
+        spyAdViewController.loadAd();
+
+        verify(spyAdViewController, atLeastOnce()).adDidFail(MoPubErrorCode.NO_CONNECTION);
+    }
+
     @Test
     public void loadNonJavascript_shouldFetchAd() {
         String url = "https://www.guy.com";
@@ -470,6 +504,7 @@ public void loadFailUrl_shouldAcceptNullErrorCode() {
 
     @Test
     public void loadFailUrl_whenFailUrlIsNull_shouldCallAdDidFail() {
+        subject.setAdUnitId("abc123");
         response.toBuilder().setFailoverUrl(null).build();
         subject.loadFailUrl(MoPubErrorCode.INTERNAL_ERROR);
 
@@ -633,6 +668,7 @@ public void onAdLoadError_withErrorReasonWarmingUp_shouldReturnErrorCodeWarmup_s
         final VolleyError expectedInternalError = new MoPubNetworkError(
                 MoPubNetworkError.Reason.WARMING_UP);
 
+        subject.setAdUnitId("abc123");
         subject.onAdLoadError(expectedInternalError);
 
         verify(mockMoPubView).adFailed(MoPubErrorCode.WARMUP);
@@ -640,6 +676,7 @@ public void onAdLoadError_withErrorReasonWarmingUp_shouldReturnErrorCodeWarmup_s
 
     @Test
     public void onAdLoadError_whenNoNetworkConnection_shouldReturnErrorCodeNoConnection_shouldCallMoPubViewAdFailed() {
+        subject.setAdUnitId("abc123");
         subject.onAdLoadError(new NoConnectionError());
 
         // DeviceUtils#isNetworkAvailable conveniently returns false due to
@@ -649,6 +686,7 @@ public void onAdLoadError_whenNoNetworkConnection_shouldReturnErrorCodeNoConnect
 
     @Test
     public void onAdLoadError_withInvalidServerResponse_shouldReturnErrorCodeServerError_shouldCallMoPubViewAdFailed_shouldIncrementBackoffPower() {
+        subject.setAdUnitId("abc123");
         for (int htmlErrorCode : HTML_ERROR_CODES) {
             final int oldBackoffPower = subject.mBackoffPower;
             final NetworkResponse errorNetworkResponse = new NetworkResponse(htmlErrorCode, null,
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java
index 887df792..146615fd 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -21,7 +21,6 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowSystemClock;
 
 import static android.view.ViewTreeObserver.OnPreDrawListener;
@@ -38,7 +37,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class BannerVisibilityTrackerTest {
     private static final int MIN_VISIBLE_DIPS = 1;
     private static final int MIN_VISIBLE_MILLIS = 0;
@@ -64,7 +62,7 @@ public void setUp() throws Exception {
         visibilityHandler = subject.getVisibilityHandler();
 
         // XXX We need this to ensure that our SystemClock starts
-        ShadowSystemClock.uptimeMillis();
+        ShadowSystemClock.currentTimeMillis();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
index ab15224d..ccefa89c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -31,7 +31,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class BaseHtmlWebViewTest {
 
     @Mock
@@ -115,31 +114,25 @@ public void sendTouchEvent_shouldSetUserClicked() {
         subject.initializeOnTouchListener();
         View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
 
+        onTouchListener.onTouch(subject, touchDown);
         onTouchListener.onTouch(subject, touchUp);
         assertThat(subject.wasClicked()).isTrue();
     }
 
     @Test
-    public void sendTouchEvent_withLotsOfRandomMotionEvents_shouldEventuallySetUserClicked() {
+    public void sendTouchEvent_withTouchDownAndTouchUp_shouldEventuallySetUserClicked() {
         subject.initializeOnTouchListener();
         View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
 
         onTouchListener.onTouch(subject, touchDown);
         assertThat(subject.wasClicked()).isFalse();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_CANCEL));
-        assertThat(subject.wasClicked()).isFalse();
+        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
+        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
         onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
         assertThat(subject.wasClicked()).isFalse();
 
         onTouchListener.onTouch(subject, touchUp);
         assertThat(subject.wasClicked()).isTrue();
-
-        onTouchListener.onTouch(subject, touchDown);
-        assertThat(subject.wasClicked()).isTrue();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_CANCEL));
-        assertThat(subject.wasClicked()).isTrue();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
-        assertThat(subject.wasClicked()).isTrue();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
index e5981919..c3941b1a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -10,23 +10,28 @@
 import android.view.View;
 import android.widget.FrameLayout;
 
+import com.mopub.common.AdReport;
+import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class BaseInterstitialActivityTest {
     private BaseInterstitialActivity subject;
     private long broadcastIdentifier;
 
+    @Mock
+    AdReport mockAdReport;
+
     // Make a concrete version of the abstract class for testing purposes.
     private static class TestInterstitialActivity extends BaseInterstitialActivity {
         View view;
@@ -83,6 +88,49 @@ public void getBroadcastIdentifier_withMissingBroadCastId_shouldReturnNull() thr
         assertThat(subject.getBroadcastIdentifier()).isNull();
     }
 
+    @Test
+    public void getResponseString_withNullAdReport_shouldReturnNull() {
+        Intent intent = new Intent()
+                .putExtra(DataKeys.AD_REPORT_KEY, mockAdReport)
+                .putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
+
+        subject = Robolectric.buildActivity(TestInterstitialActivity.class, intent)
+                .create().get();
+
+        assertThat(subject.getResponseString()).isNull();
+    }
+
+    @Test
+    public void getResponseString_withNonNullAdReport_shouldReturnResponseString() {
+        final String responseString = "this is a response string";
+        when(mockAdReport.getResponseString()).thenReturn(responseString);
+
+        Intent intent = new Intent()
+                .putExtra(DataKeys.AD_REPORT_KEY, mockAdReport)
+                .putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
+
+        subject = Robolectric.buildActivity(TestInterstitialActivity.class, intent)
+                .create().get();
+
+        assertThat(subject.getResponseString()).isEqualTo(responseString);
+    }
+
+    @Test
+    public void staticGetResponseString_withNullAdReport_shouldReturnNull() {
+        AdReport nullAdReport = null;
+
+        assertThat(BaseInterstitialActivity.getResponseString(nullAdReport)).isNull();
+    }
+
+    @Test
+    public void staticGetResponseString_withNonNullAdReport_shouldReturnResponseString() {
+        final String responseString = "this is a response string";
+        when(mockAdReport.getResponseString()).thenReturn(responseString);
+
+        assertThat(BaseInterstitialActivity.getResponseString(mockAdReport))
+                .isEqualTo(responseString);
+    }
+
     protected FrameLayout getContentView(BaseInterstitialActivity subject) {
         return subject.getCloseableLayout();
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java
index 1cd2ddc5..8e0d1eae 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -16,7 +16,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowApplication;
 
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
@@ -32,7 +31,6 @@
 import static org.mockito.Mockito.withSettings;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class BaseVideoPlayerActivityTest {
     private static final String MRAID_VIDEO_URL = "https://mraidVideo";
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
index d840c817..1e218832 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -27,7 +27,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class BaseWebViewTest {
     private Activity context;
     private BaseWebView subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/ConversionUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/ConversionUrlGeneratorTest.java
index 566e19f2..07d63efd 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/ConversionUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/ConversionUrlGeneratorTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -22,14 +22,12 @@
 import org.powermock.modules.junit4.rule.PowerMockRule;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.powermock.api.mockito.PowerMockito.mock;
 import static org.powermock.api.mockito.PowerMockito.when;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(constants = BuildConfig.class)
 @PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*", "org.json.*"})
 @PrepareForTest(ClientMetadata.class)
 public class ConversionUrlGeneratorTest {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
index 08e4100a..becf551b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -21,7 +21,6 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLooper;
 
 import java.util.HashMap;
@@ -43,7 +42,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class CustomEventBannerAdapterTest {
     private static final int DEFAULT_TIMEOUT_DELAY = CustomEventBannerAdapter.DEFAULT_BANNER_TIMEOUT_DELAY;
 
@@ -300,7 +298,7 @@ public void onBannerLoaded_whenViewIsHtmlBannerWebView_withVisibilityImpressionT
         verify(moPubView).creativeDownloaded();
         verify(moPubView).setAdContentView(eq(mockHtmlBannerWebView));
         verify(moPubView, never()).trackNativeImpression();
-        verify(moPubView).pauseAutorefresh();
+        verify(moPubView).pauseAutoRefresh();
     }
 
     @Test
@@ -322,7 +320,7 @@ public void onBannerLoaded_whenViewIsNotHtmlBannerWebView_withVisibilityImpressi
         verify(moPubView).creativeDownloaded();
         verify(moPubView).setAdContentView(eq(view));
         verify(moPubView, never()).trackNativeImpression();
-        verify(moPubView).pauseAutorefresh();
+        verify(moPubView).pauseAutoRefresh();
     }
 
     @Test
@@ -343,7 +341,7 @@ public void onBannerFailed_whenErrorCodeIsNull_shouldPassUnspecifiedError() thro
     public void onBannerExpanded_shouldPauseRefreshAndCallAdPresentOverlay_shouldCallExpand() throws Exception {
         subject.onBannerExpanded();
 
-        verify(moPubView).expand();
+        verify(moPubView).engageOverlay();
         verify(moPubView).adPresentedOverlay();
     }
 
@@ -353,14 +351,14 @@ public void onBannerCollapsed_shouldRestoreRefreshSettingAndCallAdClosed_shouldC
         subject.onBannerExpanded();
         reset(moPubView);
         subject.onBannerCollapsed();
-        verify(moPubView).collapse();
+        verify(moPubView).dismissOverlay();
         verify(moPubView).adClosed();
 
         when(moPubView.getAutorefreshEnabled()).thenReturn(false);
         subject.onBannerExpanded();
         reset(moPubView);
         subject.onBannerCollapsed();
-        verify(moPubView).collapse();
+        verify(moPubView).dismissOverlay();
         verify(moPubView).adClosed();
     }
 
@@ -396,6 +394,20 @@ public void onLeaveApplication_shouldRegisterClick() throws Exception {
         verify(moPubView).registerClick();
     }
 
+    @Test
+    public void onPauseAutoRefresh_shouldEngageOverlay() {
+        subject.onPauseAutoRefresh();
+
+        verify(moPubView).engageOverlay();
+    }
+
+    @Test
+    public void onResumeAutoRefresh_shouldDismissOverlay() {
+        subject.onResumeAutoRefresh();
+
+        verify(moPubView).dismissOverlay();
+    }
+
     @Test
     public void invalidate_shouldCauseLoadAdToDoNothing() throws Exception {
         subject.invalidate();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
index f0e28a6c..822b1046 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -19,7 +19,6 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLooper;
 
 import java.util.HashMap;
@@ -42,7 +41,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class CustomEventInterstitialAdapterTest {
     private static final int DEFAULT_TIMEOUT_DELAY = CustomEventInterstitialAdapter.DEFAULT_INTERSTITIAL_TIMEOUT_DELAY;
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
index dfba86a8..1591f431 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -19,7 +19,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
 
 import java.util.HashMap;
@@ -41,7 +40,6 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class EventForwardingBroadcastReceiverTest {
 
     private CustomEventInterstitialListener customEventInterstitialListener;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
index ec0f4545..184b751b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -19,13 +19,13 @@
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import java.util.HashMap;
 import java.util.Map;
 
 import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.mobileads.MoPubErrorCode.INTERNAL_ERROR;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.anyString;
@@ -36,7 +36,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class HtmlBannerTest {
 
     private HtmlBanner subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java
index cc6ee7dd..c1588612 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -16,7 +16,6 @@
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
 import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
 
 import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
@@ -26,7 +25,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class HtmlBannerWebViewTest {
     private HtmlBannerWebView subject;
     @Mock
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
index 37d17daf..30bdab61 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -15,7 +15,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowApplication;
 import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
 
@@ -37,7 +36,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class HtmlInterstitialTest extends ResponseBodyInterstitialTest {
     private CustomEventInterstitialListener customEventInterstitialListener;
     private Activity context;
@@ -88,7 +86,6 @@ public void showInterstitial_withMinimumExtras_shouldStartMoPubActivityWithDefau
         subject.showInterstitial();
 
         Intent nextStartedActivity = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo(expectedResponse);
         assertThat(nextStartedActivity.getStringExtra(CLICKTHROUGH_URL_KEY)).isNull();
         assertThat(nextStartedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
         assertThat(nextStartedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MoPubActivity");
@@ -102,7 +99,6 @@ public void showInterstitial_shouldStartMoPubActivityWithAllExtras() throws Exce
         subject.showInterstitial();
 
         Intent nextStartedActivity = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo(expectedResponse);
         assertThat(nextStartedActivity.getStringExtra(CLICKTHROUGH_URL_KEY)).isEqualTo("clickthroughUrl");
         assertThat(nextStartedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
         assertThat(nextStartedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MoPubActivity");
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
index 7fbc55ed..ef9730e6 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -16,7 +16,6 @@
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
 import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
 
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.HtmlInterstitialWebView.HtmlInterstitialWebViewListener;
@@ -27,7 +26,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class HtmlInterstitialWebViewTest {
 
     @Mock AdReport mockAdReport;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
index 75402635..16959468 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -19,7 +19,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowApplication;
 
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
@@ -33,7 +32,6 @@
 import static org.robolectric.Shadows.shadowOf;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class HtmlWebViewClientTest {
 
     private static final String CLICKTHROUGH_URL = "https://clickthrough";
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/IntentIsEqual.java b/mopub-sdk/src/test/java/com/mopub/mobileads/IntentIsEqual.java
index 64e8f967..412bb9a4 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/IntentIsEqual.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/IntentIsEqual.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
index 564b9f4a..f8122e9c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -26,7 +26,6 @@
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
 import org.robolectric.android.controller.ActivityController;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadow.api.Shadow;
 import org.robolectric.shadows.ShadowActivity;
 import org.robolectric.shadows.ShadowApplication;
@@ -53,7 +52,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MoPubActivityTest {
     private static final String EXPECTED_HTML_DATA = "htmlData";
     @Mock private AdReport mockAdReport;
@@ -74,9 +72,10 @@ public void setUp() throws Exception {
         htmlInterstitialWebView = TestHtmlInterstitialWebViewFactory.getSingletonMock();
         resetMockedView(htmlInterstitialWebView);
 
+        when(mockAdReport.getResponseString()).thenReturn(EXPECTED_HTML_DATA);
+
         Context context = Robolectric.buildActivity(Activity.class).create().get();
-        Intent moPubActivityIntent = MoPubActivity.createIntent(context,
-                EXPECTED_HTML_DATA, mockAdReport,
+        Intent moPubActivityIntent = MoPubActivity.createIntent(context, mockAdReport,
                 EXPECTED_CLICKTHROUGH_URL, EXPECTED_ORIENTATION, testBroadcastIdentifier);
 
         final ActivityController<MoPubActivity> subjectController = Robolectric.buildActivity(
@@ -99,20 +98,19 @@ public void onCreate_shouldHaveLockedOrientation() {
 
     @Test
     public void preRenderHtml_shouldPreloadTheHtml() throws Exception {
-        String htmlData = "this is nonsense";
         MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
-                customEventInterstitialListener, htmlData,
-                "clickthroughUrl", testBroadcastIdentifier);
+                customEventInterstitialListener, "clickthroughUrl",
+                testBroadcastIdentifier);
 
         verify(htmlInterstitialWebView).enablePlugins(eq(false));
-        verify(htmlInterstitialWebView).loadHtmlResponse(htmlData);
+        verify(htmlInterstitialWebView).loadHtmlResponse(mockAdReport.getResponseString());
     }
 
     @Test
     public void preRenderHtml_shouldEnableJavascriptCachingForDummyWebView() {
         MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
-                customEventInterstitialListener, "html_data",
-                "clickthroughUrl", testBroadcastIdentifier);
+                customEventInterstitialListener,"clickthroughUrl",
+                testBroadcastIdentifier);
 
         verify(htmlInterstitialWebView).enableJavascriptCaching();
     }
@@ -120,8 +118,8 @@ public void preRenderHtml_shouldEnableJavascriptCachingForDummyWebView() {
     @Test
     public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFinishLoad() throws Exception {
         MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
-                customEventInterstitialListener, null,
-                "clickthroughUrl", testBroadcastIdentifier);
+                customEventInterstitialListener, "clickthroughUrl",
+                testBroadcastIdentifier);
 
         ArgumentCaptor<WebViewClient> webViewClientCaptor = ArgumentCaptor.forClass(WebViewClient.class);
         verify(htmlInterstitialWebView).setWebViewClient(webViewClientCaptor.capture());
@@ -136,8 +134,8 @@ public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFinishLoad() throw
     @Test
     public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFailLoad() throws Exception {
         MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
-                customEventInterstitialListener, null,
-                "clickthroughUrl", testBroadcastIdentifier);
+                customEventInterstitialListener, "clickthroughUrl",
+                testBroadcastIdentifier);
 
         ArgumentCaptor<WebViewClient> webViewClientCaptor = ArgumentCaptor.forClass(WebViewClient.class);
         verify(htmlInterstitialWebView).setWebViewClient(webViewClientCaptor.capture());
@@ -189,10 +187,9 @@ public void onDestroy_shouldFireJavascriptWebviewDidClose() throws Exception {
     public void start_shouldStartMoPubActivityWithCorrectParameters() {
         final ActivityController<MoPubActivity> activityController = Robolectric.buildActivity(MoPubActivity.class);
         final MoPubActivity activitySubject = activityController.get();
-        MoPubActivity.start(activitySubject, "expectedResponse", mockAdReport, "clickthroughUrl", CreativeOrientation.PORTRAIT, testBroadcastIdentifier);
+        MoPubActivity.start(activitySubject, mockAdReport, "clickthroughUrl", CreativeOrientation.PORTRAIT, testBroadcastIdentifier);
 
         Intent nextStartedActivity = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo("expectedResponse");
         assertThat(nextStartedActivity.getStringExtra(CLICKTHROUGH_URL_KEY)).isEqualTo("clickthroughUrl");
         assertThat(nextStartedActivity.getSerializableExtra(CREATIVE_ORIENTATION_KEY)).isEqualTo(CreativeOrientation.PORTRAIT);
         assertThat(nextStartedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
index 2424f409..91d64143 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -26,7 +26,6 @@
 import org.mockito.Captor;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -37,7 +36,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MoPubConversionTrackerTest {
     private MoPubConversionTracker subject;
     private Activity context;
@@ -132,7 +130,7 @@ public void reportAppOpen_shouldTrackWhenConsentIsTrueAndWantToTrack() throws Ex
         mSharedPreferences
                 .edit()
                 .putBoolean(mWantToTrack, true)
-                .commit();
+                .apply();
 
         assertThat(subject.shouldTrack()).isTrue();
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
index 57410167..e97fb69a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -8,6 +8,7 @@
 import android.os.Handler;
 import android.support.annotation.NonNull;
 
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
 import com.mopub.mobileads.test.support.TestCustomEventInterstitialAdapterFactory;
@@ -18,10 +19,11 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowLog;
 
 import java.math.BigDecimal;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 
 import static com.mopub.common.Constants.FOUR_HOURS_MILLIS;
@@ -46,7 +48,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MoPubInterstitialTest {
 
     private static final String KEYWORDS_VALUE = "expected_keywords";
@@ -70,6 +71,7 @@ public void setUp() throws Exception {
         interstitialAdListener = mock(MoPubInterstitial.InterstitialAdListener.class);
         subject.setInterstitialAdListener(interstitialAdListener);
         subject.setHandler(mockHandler);
+        MoPubLog.setLogLevel(MoPubLog.LogLevel.DEBUG);
 
         interstitialView = mock(MoPubInterstitial.MoPubInterstitialView.class);
 
@@ -176,9 +178,26 @@ public void loadCustomEvent_shouldCreateAndLoadCustomEventInterstitialAdapter()
     }
 
     @Test
-    public void onCustomEventInterstitialLoaded_shouldNotifyListener() throws Exception {
+    public void onCustomEventInterstitialLoaded_withoutLoad_shouldNotNotifyListener() throws Exception {
         subject.setInterstitialView(interstitialView);
 
+        subject.onCustomEventInterstitialLoaded();
+        final List<ShadowLog.LogItem> allLogMessages = ShadowLog.getLogs();
+        final ShadowLog.LogItem latestLogMessage = allLogMessages.get(allLogMessages.size() - 1);
+
+        // All log messages end with a newline character.
+        assertThat(latestLogMessage.msg.trim())
+                .isEqualTo("[com.mopub.mobileads.MoPubInterstitial][attemptStateTransition] Ad Log " +
+                        "- Attempted transition from IDLE to READY failed due to no known load call.");
+
+        verify(interstitialView, never()).trackImpression();
+    }
+
+    @Test
+    public void onCustomEventInterstitialLoaded_withLoad_shouldNotifyListener() throws Exception {
+        subject.setInterstitialView(interstitialView);
+
+        subject.load();
         subject.onCustomEventInterstitialLoaded();
         verify(interstitialAdListener).onInterstitialLoaded(eq(subject));
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedPlayableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedPlayableTest.java
index ce4f1404..73153d9b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedPlayableTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedPlayableTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -15,7 +15,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -28,7 +27,6 @@
 import static org.mockito.Mockito.verifyZeroInteractions;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MoPubRewardedPlayableTest {
     private Activity activity;
     private MoPubRewardedPlayable subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
index d72b6499..f2c37fe7 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -17,6 +17,7 @@
 import com.mopub.common.MoPubReward;
 import com.mopub.common.SdkConfiguration;
 import com.mopub.common.SharedPreferencesHelper;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.privacy.ConsentStatus;
 import com.mopub.common.privacy.MoPubIdentifierTest;
 import com.mopub.common.privacy.PersonalInfoManager;
@@ -49,12 +50,10 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLog;
 import org.robolectric.shadows.ShadowLooper;
 
 import java.util.Arrays;
-import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
@@ -73,7 +72,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class
         MoPubRewardedVideoManagerTest {
 
@@ -115,7 +113,9 @@ public void setup() throws Exception {
                 .setStatic(MoPub.class)
                 .setAccessible()
                 .execute();
-        MoPub.initializeSdk(mActivity, new SdkConfiguration.Builder("adunit").build(), null);
+        MoPub.initializeSdk(mActivity, new SdkConfiguration.Builder("adunit")
+                .withLogLevel(MoPubLog.LogLevel.DEBUG)
+                .build(), null);
         Reflection.getPrivateField(MoPub.class, "sSdkInitialized").setBoolean(null, true);
 
         MoPubIdentifierTest.writeAdvertisingInfoToSharedPreferences(mActivity, false);
@@ -171,7 +171,7 @@ public void tearDown() throws Exception {
         ShadowLooper.unPauseMainLooper();
         MoPubRewardedVideoManager.getRewardedAdData().clear();
         MoPubRewardedVideoManager.getAdRequestStatusMapping().clearMapping();
-        mTestCustomEventSharedPrefs.edit().clear().commit();
+        mTestCustomEventSharedPrefs.edit().clear().apply();
         MoPubIdentifierTest.clearPreferences(mActivity);
         new Reflection.MethodBuilder(null, "clearAdvancedBidders")
                 .setStatic(MoPub.class)
@@ -179,105 +179,6 @@ public void tearDown() throws Exception {
                 .execute();
     }
 
-    @Test
-    public void initNetworks_withEmptySharedPrefs_shouldNotInitAnyNetworks() {
-        List<Class<? extends CustomEventRewardedVideo>> networksToInit =
-                Arrays.asList(
-                        CustomEventRewardedVideo.class,
-                        TestCustomEvent.class,
-                        NoVideoCustomEvent.class
-                );
-
-        List<CustomEventRewardedVideo> initializedNetworksList =
-                MoPubRewardedVideoManager.initNetworks(mActivity, networksToInit);
-
-        // Verify that no networks got initialized.
-        assertThat(initializedNetworksList.size()).isEqualTo(0);
-    }
-
-    @Test
-    public void initNetworks_shouldOnlyInitNetworksWithSettingsSavedInSharedPrefs() {
-        // Only TestCustomEvent has settings saved in SharedPrefs.
-        mTestCustomEventSharedPrefs.edit().putString(
-                TestCustomEvent.class.getName(),
-                "{\"k1\":\"v1\",\"k2\":\"v2\"}").commit();
-
-        List<Class<? extends CustomEventRewardedVideo>> networksToInit =
-                Arrays.asList(
-                        CustomEventRewardedVideo.class,
-                        TestCustomEvent.class,
-                        NoVideoCustomEvent.class
-                );
-
-        List<CustomEventRewardedVideo> networksInitialized =
-                MoPubRewardedVideoManager.initNetworks(mActivity, networksToInit);
-
-        // Verify that only TestCustomEvent got initialized.
-        assertThat(networksInitialized.size()).isEqualTo(1);
-        assertThat(networksInitialized.get(0).getClass().getName())
-                .isEqualTo(TestCustomEvent.class.getName());
-    }
-
-    @Test
-    public void initNetworks_withDuplicatedNetworks_shouldOnlyInitDedupedNetworks() {
-        // Only TestCustomEvent has settings saved in SharedPrefs.
-        mTestCustomEventSharedPrefs.edit().putString(
-                TestCustomEvent.class.getName(),
-                "{\"k1\":\"v1\",\"k2\":\"v2\"}").commit();
-
-        // All networks are duplicated.
-        List<Class<? extends CustomEventRewardedVideo>> networksToInit =
-                Arrays.asList(
-                        CustomEventRewardedVideo.class,
-                        TestCustomEvent.class,
-                        NoVideoCustomEvent.class,
-                        TestCustomEvent.class,
-                        NoVideoCustomEvent.class,
-                        CustomEventRewardedVideo.class
-                );
-
-        List<CustomEventRewardedVideo> networksInitialized =
-                MoPubRewardedVideoManager.initNetworks(mActivity, networksToInit);
-
-        // Verify that only TestCustomEvent got initialized, and only once.
-        assertThat(networksInitialized.size()).isEqualTo(1);
-        assertThat(networksInitialized.get(0).getClass().getName())
-                .isEqualTo(TestCustomEvent.class.getName());
-    }
-
-    @Test
-    public void initNetworks_shouldObeyOrderDuringInit() {
-        // Both TestCustomEvent and NoVideoCustomEvent have settings saved in SharedPrefs.
-        mTestCustomEventSharedPrefs.edit().putString(
-                TestCustomEvent.class.getName(),
-                "{\"k1\":\"v1\",\"k2\":\"v2\"}").commit();
-        mTestCustomEventSharedPrefs.edit().putString(
-                NoVideoCustomEvent.class.getName(),
-                "{\"k3\":\"v3\",\"k4\":\"v4\"}").commit();
-
-        // All networks are duplicated.
-        List<Class<? extends CustomEventRewardedVideo>> networksToInit =
-                Arrays.asList(
-                        NoVideoCustomEvent.class,
-                        TestCustomEvent.class,
-                        CustomEventRewardedVideo.class,
-                        TestCustomEvent.class,
-                        CustomEventRewardedVideo.class,
-                        NoVideoCustomEvent.class
-                );
-
-        List<CustomEventRewardedVideo> networksInitialized =
-                MoPubRewardedVideoManager.initNetworks(mActivity, networksToInit);
-
-        // Verify that only NoVideoCustomEvent and TestCustomEvent got initialized,
-        // in that order, and each only once.
-        assertThat(networksInitialized.size()).isEqualTo(2);
-        assertThat(networksInitialized.get(0).getClass().getName())
-                .isEqualTo(NoVideoCustomEvent.class.getName());
-        assertThat(networksInitialized.get(1).getClass().getName())
-                .isEqualTo(TestCustomEvent.class.getName());
-    }
-
     @Test
     public void createRequestParameters_withUserDataKeywordsButNoConsent_shouldNotSetUserDataKeywords() throws Exception {
         when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
@@ -797,7 +698,7 @@ public void onAdSuccess_withNewInitParams_shouldUpdateInitParamsInSharedPrefs()
         // Put in {"k1":"v1","k2":"v2"} as existing init params.
         mTestCustomEventSharedPrefs.edit().putString(
                 TestCustomEvent.class.getName(),
-                "{\"k1\":\"v1\",\"k2\":\"v2\"}").commit();
+                "{\"k1\":\"v1\",\"k2\":\"v2\"}").apply();
 
         // New init params are {"k3":"v3"}.
         JSONObject jsonResponse = createRewardedJsonResponse();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
index 02bfabfe..7f4a66e0 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -15,7 +15,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -30,7 +29,6 @@
 import static org.mockito.Mockito.verifyZeroInteractions;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MoPubRewardedVideoTest {
 
     private Activity activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubShadowMediaPlayer.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubShadowMediaPlayer.java
index 61d79005..b0f06b7a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubShadowMediaPlayer.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubShadowMediaPlayer.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
index 4888888c..81d16a14 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -34,7 +34,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {ShadowReflection.class})
+@Config(shadows = {ShadowReflection.class})
 public class MoPubViewTest {
     private MoPubView subject;
     private Map<String,String> paramsMap = new HashMap<String, String>();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
index df9ae4d5..a2ff830a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -15,6 +15,7 @@
 import android.webkit.WebViewClient;
 import android.widget.FrameLayout;
 
+import com.mopub.common.AdReport;
 import com.mopub.common.Constants;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mraid.MraidBridge;
@@ -32,7 +33,6 @@
 import org.robolectric.Robolectric;
 import org.robolectric.Shadows;
 import org.robolectric.android.controller.ActivityController;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
 
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
@@ -51,7 +51,6 @@
 
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MraidActivityTest {
     static final String EXPECTED_SOURCE = "expected source";
     static final String HTML_DATA = "html_data";
@@ -63,6 +62,7 @@
             customEventInterstitialListener;
     @Mock BroadcastReceiver broadcastReceiver;
     @Mock ResponseBodyInterstitial mraidInterstitial;
+    @Mock AdReport adReport;
 
     Context context;
 
@@ -82,7 +82,7 @@ public void setUp() throws Exception {
     @Test
     public void preRenderHtml_shouldEnableJavascriptCachingForDummyWebView() {
         MraidActivity.preRenderHtml(mraidInterstitial, customEventInterstitialListener, HTML_DATA,
-                mockMraidWebView, testBroadcastIdentifier);
+                mockMraidWebView, testBroadcastIdentifier, mraidController);
 
         verify(mockMraidWebView).enableJavascriptCaching();
     }
@@ -90,7 +90,7 @@ public void preRenderHtml_shouldEnableJavascriptCachingForDummyWebView() {
     @Test
     public void preRenderHtml_shouldDisablePluginsForDummyWebView() {
         MraidActivity.preRenderHtml(mraidInterstitial, customEventInterstitialListener, HTML_DATA,
-                mockMraidWebView, testBroadcastIdentifier);
+                mockMraidWebView, testBroadcastIdentifier, mraidController);
 
         verify(mockMraidWebView).enablePlugins(false);
     }
@@ -98,7 +98,7 @@ public void preRenderHtml_shouldDisablePluginsForDummyWebView() {
     @Test
     public void preRenderHtml_shouldLoadHtml() {
         MraidActivity.preRenderHtml(mraidInterstitial, customEventInterstitialListener, HTML_DATA,
-                mockMraidWebView, testBroadcastIdentifier);
+                mockMraidWebView, testBroadcastIdentifier, mraidController);
 
         verify(mockMraidWebView).loadDataWithBaseURL(
                 "http://" + Constants.HOST + "/",
@@ -113,7 +113,7 @@ public void preRenderHtml_shouldLoadHtml() {
     @Test
     public void preRenderHtml_shouldSetWebViewClient() throws Exception {
         MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener,
-                "3:27", testBroadcastIdentifier);
+                testBroadcastIdentifier, adReport);
 
         verify(mockMraidWebView).enablePlugins(eq(false));
         verify(mraidController).setMraidListener(any(MraidListener.class));
@@ -124,8 +124,8 @@ public void preRenderHtml_shouldSetWebViewClient() throws Exception {
     @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_whenMraidListenerOnReady() throws Exception {
-        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener, "",
-                testBroadcastIdentifier);
+        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener,
+                testBroadcastIdentifier, adReport);
 
         ArgumentCaptor<MraidListener> mraidListenerArgumentCaptorr = ArgumentCaptor.forClass(MraidListener.class);
         verify(mraidController).setMraidListener(mraidListenerArgumentCaptorr.capture());
@@ -139,8 +139,8 @@ public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_
     @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialFailed_whenMraidListenerOnFailure() throws Exception {
-        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener, "",
-                testBroadcastIdentifier);
+        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener,
+                testBroadcastIdentifier, adReport);
 
         ArgumentCaptor<MraidListener> mraidListenerArgumentCaptorr = ArgumentCaptor.forClass(MraidListener.class);
         verify(mraidController).setMraidListener(mraidListenerArgumentCaptorr.capture());
@@ -154,8 +154,8 @@ public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialFailed_
     @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_whenWebViewClientShouldOverrideUrlLoading_shouldReturnTrue() throws Exception {
-        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener, "",
-                testBroadcastIdentifier);
+        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener,
+                testBroadcastIdentifier, adReport);
 
         ArgumentCaptor<WebViewClient> webViewClientArgumentCaptor = ArgumentCaptor.forClass(WebViewClient.class);
         verify(mockMraidWebView).setWebViewClient(webViewClientArgumentCaptor.capture());
@@ -172,8 +172,8 @@ public void preRenderHtml_whenWebViewClientShouldOverrideUrlLoading_shouldReturn
     @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_whenWebViewClientOnPageFinished() throws Exception {
-        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener, "",
-                testBroadcastIdentifier);
+        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener,
+                testBroadcastIdentifier, adReport);
 
         ArgumentCaptor<WebViewClient> webViewClientArgumentCaptor = ArgumentCaptor.forClass(WebViewClient.class);
         verify(mockMraidWebView).setWebViewClient(webViewClientArgumentCaptor.capture());
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
index ca622e60..061968ec 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -28,7 +28,6 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowActivity;
 
 import java.lang.reflect.Constructor;
@@ -41,7 +40,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MraidVideoPlayerActivityTest {
     private static final String VAST = "vast";
     private static final String MRAID = "mraid";
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RepeatingHandlerRunnableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RepeatingHandlerRunnableTest.java
index a3067c28..61033616 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RepeatingHandlerRunnableTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RepeatingHandlerRunnableTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -13,7 +13,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.robolectric.annotation.Config;
 
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.reset;
@@ -21,7 +20,6 @@
 import static org.mockito.Mockito.verifyZeroInteractions;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class RepeatingHandlerRunnableTest {
 
     @Mock Handler mockHandler;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/ResponseBodyInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/ResponseBodyInterstitialTest.java
index 021cd3e5..e38ae734 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/ResponseBodyInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/ResponseBodyInterstitialTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdDataTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdDataTest.java
index f95efe4f..63d9b659 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdDataTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdDataTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -10,14 +10,12 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 import java.util.Set;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class RewardedAdDataTest {
 
     private RewardedAdData subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdsLoadersTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdsLoadersTest.java
index 00812ba6..53f23021 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdsLoadersTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdsLoadersTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -14,7 +14,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -24,7 +23,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class RewardedAdsLoadersTest {
     private static final String AD_UNIT_ID = "ad_unit_id";
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidActivityTest.java
index f4cff488..3b1a3743 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidActivityTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -18,13 +18,12 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static com.mopub.mraid.RewardedMraidController.MILLIS_IN_SECOND;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class RewardedMraidActivityTest {
     private long broadcastIdentifier;
     private boolean shouldRewardOnClick;
@@ -44,8 +43,9 @@ public void setup() {
         broadcastIdentifier = 3333;
         shouldRewardOnClick = false;
 
+        when(mockAdReport.getResponseString()).thenReturn(HTML_DATA);
         Context context = Robolectric.buildActivity(Activity.class).create().get();
-        Intent intent = RewardedMraidActivity.createIntent(context, mockAdReport, HTML_DATA,
+        Intent intent = RewardedMraidActivity.createIntent(context, mockAdReport,
                 broadcastIdentifier, REWARDED_DURATION_IN_SECONDS, shouldRewardOnClick);
         subject = Robolectric.buildActivity(RewardedMraidActivity.class, intent)
                 .create().get();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidCountdownRunnableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidCountdownRunnableTest.java
index d27b83f4..ee90d7dd 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidCountdownRunnableTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidCountdownRunnableTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -13,14 +13,12 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.robolectric.annotation.Config;
 
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class RewardedMraidCountdownRunnableTest {
 
     @Mock
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVastVideoInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVastVideoInterstitialTest.java
index ec827fb0..f9f1e1ed 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVastVideoInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVastVideoInterstitialTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -16,7 +16,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -29,7 +28,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class RewardedVastVideoInterstitialTest {
 
     private Context context;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java
index 98aae002..2046fe69 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -15,7 +15,6 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 import java.util.Iterator;
 import java.util.Set;
@@ -25,7 +24,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class RewardedVideoBroadcastReceiverTest {
 
     private RewardedVastVideoInterstitial.RewardedVideoInterstitialListener mRewardedVideoInterstitialListener;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java
index 7b2cc96e..77ae8cc5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -21,7 +21,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static com.mopub.common.VolleyRequestMatcher.isUrl;
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -33,7 +32,6 @@
 import static org.mockito.Mockito.verifyZeroInteractions;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class RewardedVideoCompletionRequestHandlerTest {
     @Mock
     private MoPubRequestQueue mockRequestQueue;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastAdXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastAdXmlManagerTest.java
index 0e00fcb3..34e3f7f4 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastAdXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastAdXmlManagerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -9,14 +9,12 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 import org.w3c.dom.Node;
 
 import static com.mopub.mobileads.test.support.VastUtils.createNode;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastAdXmlManagerTest {
 
     private VastAdXmlManager subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManagerTest.java
index be6f4180..dc5d2fb9 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManagerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -9,7 +9,6 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 import org.w3c.dom.Node;
 
 import java.util.List;
@@ -18,7 +17,6 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastBaseInLineWrapperXmlManagerTest {
     private VastBaseInLineWrapperXmlManager subject;
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigTest.java
index 44167515..a7517a15 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -20,7 +20,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static com.mopub.common.VolleyRequestMatcher.isUrl;
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -30,7 +29,6 @@
 import static org.robolectric.Shadows.shadowOf;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastCompanionAdConfigTest {
 
     private static final String RESOLVED_CLICKTHROUGH_URL = "https://www.mopub.com/";
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigXmlManagerTest.java
index cffbe329..07cbffee 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigXmlManagerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -10,14 +10,12 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 import org.w3c.dom.Node;
 
 import static com.mopub.mobileads.test.support.VastUtils.createNode;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastCompanionAdConfigXmlManagerTest {
 
     private VastCompanionAdXmlManager subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionParentXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionParentXmlManagerTest.java
index b3fa4f88..4b2e5d21 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionParentXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionParentXmlManagerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -8,13 +8,11 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 import static com.mopub.mobileads.test.support.VastUtils.createNode;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastExtensionParentXmlManagerTest {
     private VastExtensionParentXmlManager subject;
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java
index f329405f..e6524cc5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -8,13 +8,11 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 import static com.mopub.mobileads.test.support.VastUtils.createNode;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastExtensionXmlManagerTest {
     private VastExtensionXmlManager subject;
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigTest.java
index 293ccbcd..f10e28b7 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -19,7 +19,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static com.mopub.common.VolleyRequestMatcher.isUrl;
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -29,7 +28,6 @@
 import static org.robolectric.Shadows.shadowOf;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastIconConfigTest {
 
     private VastIconConfig subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigXmlManagerTest.java
index 990c6227..09ba4d59 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigXmlManagerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -10,14 +10,12 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 import org.w3c.dom.Node;
 
 import static com.mopub.mobileads.test.support.VastUtils.createNode;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastIconConfigXmlManagerTest {
 
     private VastIconXmlManager subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
index 79716eb1..8473d647 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -10,7 +10,6 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 import org.w3c.dom.Node;
 
 import java.util.List;
@@ -19,7 +18,6 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastLinearXmlManagerTest {
 
     private VastLinearXmlManager subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastMacroHelperTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastMacroHelperTest.java
index 23de4052..b337eb2d 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastMacroHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastMacroHelperTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -11,7 +11,6 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 import java.util.Arrays;
 import java.util.Collections;
@@ -19,7 +18,6 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastMacroHelperTest {
 
     private static final String ERROR_CODE = "errorcode";
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
index 9d72b740..60e8f006 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -32,7 +32,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, qualifiers = "w480dp-h800dp", shadows = {ShadowMoPubHttpUrlConnection.class})
+@Config(qualifiers = "w480dp-h800dp", shadows = {ShadowMoPubHttpUrlConnection.class})
 public class VastManagerTest {
     static final String EXTENSIONS_SNIPPET_PLACEHOLDER = "<![CDATA[EXTENSIONS_SNIPPET]]>";
     static final String TEST_VAST_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>https://dsp.x-team.staging.mopub.com/xml</VASTAdTagURI><Impression>https://myTrackingURL/wrapper/impression1</Impression><Impression>https://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>https://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>https://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>https://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='progress' offset='00:00:03.100'>https://myTrackingURL/wrapper/progress</Tracking><Tracking event='firstQuartile'>https://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>https://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>https://myTrackingURL/wrapper/complete</Tracking><Tracking event='close'>https://myTrackingURL/wrapper/close</Tracking><Tracking event='skip'>https://myTrackingURL/wrapper/skip</Tracking><Tracking event='mute'>https://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>https://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>https://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>https://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>https://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>https://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative><Creative AdID=\"601364-Companion\"> <CompanionAds><Companion width=\"9000\"></Companion> </CompanionAds></Creative></Creatives><![CDATA[EXTENSIONS_SNIPPET]]><Error><![CDATA[https://wrapperErrorTracker]]></Error></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>https://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>https://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastMediaXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastMediaXmlManagerTest.java
index b8382612..73840f37 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastMediaXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastMediaXmlManagerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -9,14 +9,12 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 import org.w3c.dom.Node;
 
 import static com.mopub.mobileads.test.support.VastUtils.createNode;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastMediaXmlManagerTest {
 
     private VastMediaXmlManager subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceTest.java
index f745ce3b..6a6d9f05 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -10,14 +10,12 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.robolectric.annotation.Config;
 
 import static com.mopub.mobileads.VastResource.fromVastResourceXmlManager;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastResourceTest {
 
     private VastResource subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceXmlManagerTest.java
index 8c4bbf55..af237064 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceXmlManagerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -9,14 +9,12 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 import org.w3c.dom.Node;
 
 import static com.mopub.mobileads.test.support.VastUtils.createNode;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastResourceXmlManagerTest {
 
     private VastResourceXmlManager subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java
index c3ac9844..d5f9893b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -14,7 +14,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -28,7 +27,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastVideoBlurLastVideoFrameTaskTest {
     @Mock private MediaMetadataRetriever mockMediaMetadataRetriever;
     @Mock private ImageView mockBlurredLastVideoFrameImageView;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCloseButtonWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCloseButtonWidgetTest.java
index 1417fbae..9a49ac1c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCloseButtonWidgetTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCloseButtonWidgetTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -25,7 +25,6 @@
 import org.mockito.Captor;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -36,7 +35,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastVideoCloseButtonWidgetTest {
     private Context context;
     private VastVideoCloseButtonWidget subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java
index 7202c60c..28fb3096 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -19,7 +19,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowApplication;
 
 import java.util.ArrayList;
@@ -34,7 +33,6 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastVideoConfigTest {
 
     @Mock MoPubRequestQueue mockRequestQueue;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCtaButtonWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCtaButtonWidgetTest.java
index ad763084..2fe20eba 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCtaButtonWidgetTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCtaButtonWidgetTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -15,12 +15,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastVideoCtaButtonWidgetTest {
     private Context context;
     private VastVideoCtaButtonWidget subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoGradientStripWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoGradientStripWidgetTest.java
index 7c4088f9..045f60da 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoGradientStripWidgetTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoGradientStripWidgetTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -18,12 +18,10 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastVideoGradientStripWidgetTest {
     private Context context;
     private VastVideoGradientStripWidget subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
index c0259e24..8b64f96e 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -21,7 +21,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.httpclient.FakeHttp;
 import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
 
@@ -49,7 +48,6 @@
 import static org.mockito.Mockito.withSettings;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastVideoInterstitialTest extends ResponseBodyInterstitialTest {
     private Context context;
     private CustomEventInterstitialListener customEventInterstitialListener;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoProgressBarWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoProgressBarWidgetTest.java
index d1f60089..6def0d5f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoProgressBarWidgetTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoProgressBarWidgetTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -15,7 +15,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.never;
@@ -24,7 +23,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastVideoProgressBarWidgetTest {
     private Context context;
     private VastVideoProgressBarWidget subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoRadialCountdownWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoRadialCountdownWidgetTest.java
index e3dca89c..4c0b9da8 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoRadialCountdownWidgetTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoRadialCountdownWidgetTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -15,7 +15,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.anyInt;
@@ -25,7 +24,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastVideoRadialCountdownWidgetTest {
     private Context context;
     private VastVideoRadialCountdownWidget subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
index 483fc0b3..99368f74 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -96,7 +96,7 @@
 import static org.robolectric.Shadows.shadowOf;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, qualifiers = "w800dp-h480dp", shadows = {ShadowVastVideoView.class})
+@Config(qualifiers = "w800dp-h480dp", shadows = {ShadowVastVideoView.class})
 public class VastVideoViewControllerTest {
     public static final int NETWORK_DELAY = 100;
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewCountdownRunnableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewCountdownRunnableTest.java
index 3aed374a..843f36bc 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewCountdownRunnableTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewCountdownRunnableTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -12,14 +12,12 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.robolectric.annotation.Config;
 
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastVideoViewCountdownRunnableTest {
 
     @Mock VastVideoViewController mockVideoViewController;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewProgressRunnableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewProgressRunnableTest.java
index 74312af1..cda8c105 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewProgressRunnableTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewProgressRunnableTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -18,7 +18,6 @@
 import org.mockito.ArgumentCaptor;
 import org.mockito.Captor;
 import org.mockito.Mock;
-import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -31,7 +30,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastVideoViewProgressRunnableTest {
     @Mock VastVideoViewController mockVastVideoViewController;
     @Mock Context mockContext;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java
index 89120cbd..0ad145e5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -17,7 +17,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static org.mockito.Matchers.anyBoolean;
 import static org.mockito.Matchers.anyInt;
@@ -28,7 +27,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastVideoViewTest {
 
     @Mock private MediaMetadataRetriever mockMediaMetadataRetriever;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java
index 2216ac2b..eca714ac 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -31,7 +31,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastWebViewTest {
 
     private VastWebView subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastWrapperXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWrapperXmlManagerTest.java
index f489050f..c27b4807 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastWrapperXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWrapperXmlManagerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -8,14 +8,12 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 import org.w3c.dom.Node;
 
 import static com.mopub.mobileads.test.support.VastUtils.createNode;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastWrapperXmlManagerTest {
 
     private VastWrapperXmlManager subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
index 5fea203b..1595df8f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -44,7 +44,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, qualifiers = "w480dp-h800dp", shadows = {ShadowMoPubHttpUrlConnection.class})
+@Config(qualifiers = "w480dp-h800dp", shadows = {ShadowMoPubHttpUrlConnection.class})
 public class VastXmlManagerAggregatorTest {
     // Default portrait screen width is 480, height is 800
     private static final int DIM_SHORT = 480;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
index f5675189..2e11d93a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -11,7 +11,6 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 import org.xml.sax.SAXException;
 
 import java.io.IOException;
@@ -22,7 +21,6 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VastXmlManagerTest {
     private static final String XML_HEADER_TAG = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
     private static final String TEST_VAST_XML_STRING = "<VAST xmlns:xsi=\"https://www.w3.org/2001/XMLSchema-instance\" version=\"2.0\" xsi:noNamespaceSchemaLocation=\"vast.xsd\">" +
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VideoDownloaderTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VideoDownloaderTest.java
index 2dd254ac..ff5f1789 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VideoDownloaderTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VideoDownloaderTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -32,7 +32,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {ShadowAsyncTasks.class, ShadowMoPubHttpUrlConnection.class})
+@Config(shadows = {ShadowAsyncTasks.class, ShadowMoPubHttpUrlConnection.class})
 public class VideoDownloaderTest {
     @Mock VideoDownloaderListener mockListener;
     private final static String expectedUrl1 = "https://video_url";
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManagerTest.java
index fe84b16a..db3c8e1f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManagerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -8,13 +8,11 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 import static com.mopub.mobileads.test.support.VastUtils.createNode;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VideoViewabilityTrackerXmlManagerTest {
     private VideoViewabilityTrackerXmlManager subject;
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
index 75e85afe..d144a305 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -17,10 +17,8 @@
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
 import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowGestureDetector;
 
-import static com.mopub.mobileads.ViewGestureDetector.UserClickListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
@@ -29,7 +27,6 @@
 
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class ViewGestureDetectorTest {
     private Activity context;
     private ViewGestureDetector subject;
@@ -61,36 +58,11 @@ public void constructor_shouldDisableLongPressAndSetGestureListener() throws Exc
         assertThat(shadowGestureDetector.getListener()).isInstanceOf(AdAlertGestureListener.class);
     }
 
-    @Test
-    public void onTouchEvent_whenActionUpAndClickListener_shouldNotifyClickListenerAndCheckReportAd() throws Exception {
-        MotionEvent expectedMotionEvent = createMotionEvent(MotionEvent.ACTION_UP);
-
-        UserClickListener userClickListener = mock(UserClickListener.class);
-        subject.setUserClickListener(userClickListener);
-
-        subject.sendTouchEvent(expectedMotionEvent);
-
-        verify(userClickListener).onUserClick();
-        verify(adAlertGestureListener).finishGestureDetection();
-    }
-
-    @Test
-    public void onTouchEvent_whenActionUpButNoClickListener_shouldNotNotifyClickListenerAndCheckReportAd() throws Exception {
-        MotionEvent expectedMotionEvent = createMotionEvent(MotionEvent.ACTION_UP);
-
-        UserClickListener userClickListener = mock(UserClickListener.class);
-
-        subject.sendTouchEvent(expectedMotionEvent);
-
-        verify(userClickListener, never()).onUserClick();
-        verify(adAlertGestureListener).finishGestureDetection();
-    }
-
     @Test
     public void onTouchEvent_whenActionDown_shouldForwardOnTouchEvent() throws Exception {
         MotionEvent expectedMotionEvent = createMotionEvent(MotionEvent.ACTION_DOWN);
 
-        subject.sendTouchEvent(expectedMotionEvent);
+        subject.onTouchEvent(expectedMotionEvent);
 
         MotionEvent actualMotionEvent = Shadows.shadowOf(subject).getOnTouchEventMotionEvent();
 
@@ -100,10 +72,10 @@ public void onTouchEvent_whenActionDown_shouldForwardOnTouchEvent() throws Excep
     @Test
     public void onTouchEvent_whenActionMoveWithinView_shouldForwardOnTouchEvent() throws Exception {
         MotionEvent downEvent = createMotionEvent(MotionEvent.ACTION_DOWN);
-        subject.sendTouchEvent(downEvent);
+        subject.onTouchEvent(downEvent);
 
         MotionEvent expectedMotionEvent = createActionMove(160);
-        subject.sendTouchEvent(expectedMotionEvent);
+        subject.onTouchEvent(expectedMotionEvent);
 
         MotionEvent actualMotionEvent = Shadows.shadowOf(subject).getOnTouchEventMotionEvent();
 
@@ -111,27 +83,6 @@ public void onTouchEvent_whenActionMoveWithinView_shouldForwardOnTouchEvent() th
         verify(adAlertGestureListener, never()).reset();
     }
 
-    @Test
-    public void sendTouchEvent_whenReceiveTouchEventOutsideOfViewInXDirection_shouldResetAlertState() throws Exception {
-        subject.sendTouchEvent(createActionMove(350));
-
-        MotionEvent actualMotionEvent = Shadows.shadowOf(subject).getOnTouchEventMotionEvent();
-
-        assertThat(actualMotionEvent).isNull();
-        verify(adAlertGestureListener).reset();
-    }
-
-    @Test
-    public void sendTouchEvent_whenReceiveTouchEventOutsideOfViewInYDirection_shouldResetAlertState() throws Exception {
-        MotionEvent verticalMotion = MotionEvent.obtain(0, 0, MotionEvent.ACTION_MOVE, 160, 200, 0);
-        subject.sendTouchEvent(verticalMotion);
-
-        MotionEvent actualMotionEvent = Shadows.shadowOf(subject).getOnTouchEventMotionEvent();
-
-        assertThat(actualMotionEvent).isNull();
-        verify(adAlertGestureListener).reset();
-    }
-
     @Test
     public void resetAdFlaggingGesture_shouldNotifyAdAlertGestureListenerOfReset() throws Exception {
         subject.resetAdFlaggingGesture();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
index d0319029..de679b52 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -18,16 +18,19 @@
 import android.net.Uri;
 import android.os.Build;
 import android.provider.Settings;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.telephony.TelephonyManager;
 import android.text.TextUtils;
 import android.util.DisplayMetrics;
 import android.view.Display;
 import android.view.WindowManager;
 
+import com.mopub.common.BaseAdapterConfiguration;
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.LocationService;
 import com.mopub.common.MoPub;
-import com.mopub.common.MoPubAdvancedBidder;
+import com.mopub.common.OnNetworkInitializationFinishedListener;
 import com.mopub.common.SdkConfiguration;
 import com.mopub.common.privacy.AdvertisingId;
 import com.mopub.common.privacy.ConsentData;
@@ -45,6 +48,8 @@
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
 import com.mopub.mraid.MraidNativeCommandHandler;
 import com.mopub.network.PlayServicesUrlRewriter;
+import com.mopub.network.RequestRateTracker;
+import com.mopub.network.RequestRateTrackerTest;
 
 import org.junit.After;
 import org.junit.Before;
@@ -61,6 +66,8 @@
 import org.robolectric.shadows.ShadowLooper;
 import org.robolectric.shadows.ShadowNetworkInfo;
 
+import java.util.Map;
+
 import static android.Manifest.permission.ACCESS_COARSE_LOCATION;
 import static android.Manifest.permission.ACCESS_FINE_LOCATION;
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
@@ -82,7 +89,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {MoPubShadowTelephonyManager.class, MoPubShadowConnectivityManager.class})
+@Config(shadows = {MoPubShadowTelephonyManager.class, MoPubShadowConnectivityManager.class})
 public class WebViewAdUrlGeneratorTest {
 
     private static final String TEST_UDID = "20b013c721c";
@@ -178,6 +185,7 @@ public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
     public void tearDown() throws Exception {
         reset(methodBuilder);
         ClientMetadata.clearForTesting();
+        RequestRateTrackerTest.clearRequestRateTracker();
         MoPubIdentifierTest.clearPreferences(context);
         new Reflection.MethodBuilder(null, "clearAdvancedBidders")
                 .setStatic(MoPub.class)
@@ -215,11 +223,10 @@ public void generateAdUrl_shouldRunMultipleTimes() throws Exception{
     @Test
     public void generateAdUrl_shouldIncludeAllFields() throws Exception {
         SdkConfiguration sdkConfiguration = new SdkConfiguration.Builder(
-                INIT_ADUNIT).withAdvancedBidder(
-                WebViewAdvancedBidder.class).build();
+                INIT_ADUNIT).withAdditionalNetwork(
+                WebViewAdapterConfiguration.class.getName()).build();
         MoPub.initializeSdk(context, sdkConfiguration, null);
         ShadowLooper.runUiThreadTasks();
-        MoPub.setAdvancedBiddingEnabled(true);
         new Reflection.MethodBuilder(null, "setPersonalInfoManager")
                 .setStatic(MoPub.class)
                 .setAccessible()
@@ -229,6 +236,7 @@ public void generateAdUrl_shouldIncludeAllFields() throws Exception {
         when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
 
         ClientMetadata.clearForTesting();
+        RequestRateTrackerTest.prepareRequestRateTracker("adUnitId", 99, "some_reason");
 
         final String expectedAdUrl = new AdUrlBuilder(expectedUdid)
                 .withAdUnitId("adUnitId")
@@ -242,6 +250,8 @@ public void generateAdUrl_shouldIncludeAllFields() throws Exception {
                 .withExternalStoragePermission(false)
                 .withAbt("{\"UrlGeneratorTest\":{\"token\":\"WebViewAdvancedBidderToken\"}}")
                 .withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue())
+                .withBackoffMs(99)
+                .withBackoffReason("some_reason")
                 .build();
 
         shadowTelephonyManager.setNetworkOperator("123456");
@@ -275,7 +285,8 @@ public void generateAdUrl_shouldIncludeAllFields() throws Exception {
     @Test
     public void generateAdUrl_shouldNotLocationFieldsWhenConsentIsFalse() throws Exception {
         SdkConfiguration sdkConfiguration = new SdkConfiguration.Builder(
-                INIT_ADUNIT).withAdvancedBidder(WebViewAdvancedBidder.class).build();
+                INIT_ADUNIT).withAdditionalNetwork(
+                WebViewAdapterConfiguration.class.getName()).build();
         MoPub.initializeSdk(context, sdkConfiguration, null);
         ShadowLooper.runUiThreadTasks();
         new Reflection.MethodBuilder(null, "setPersonalInfoManager")
@@ -317,13 +328,7 @@ public void generateAdUrl_shouldNotLocationFieldsWhenConsentIsFalse() throws Exc
     }
 
     @Test
-    public void generateAdUrl_withAdvancedBiddingDisabled_shouldNotIncludeAbt() throws Exception {
-        SdkConfiguration sdkConfiguration = new SdkConfiguration.Builder(
-                INIT_ADUNIT).withAdvancedBidder(
-                WebViewAdvancedBidder.class).build();
-        MoPub.initializeSdk(context, sdkConfiguration, null);
-        ShadowLooper.runUiThreadTasks();
-        MoPub.setAdvancedBiddingEnabled(false);
+    public void generateAdUrl_withNoInit_shouldNotIncludeAbt() throws Exception {
         new Reflection.MethodBuilder(null, "setPersonalInfoManager")
                 .setStatic(MoPub.class)
                 .setAccessible()
@@ -338,14 +343,12 @@ public void generateAdUrl_withAdvancedBiddingDisabled_shouldNotIncludeAbt() thro
 
         String adUrl = subject.generateUrlString("ads.mopub.com");
         assertThat(adUrl).isEqualTo(expectedAdUrl);
-
-        MoPub.setAdvancedBiddingEnabled(true);
     }
 
     @Test
     public void generateAdUrl_withCollectUserDataDisabled_shouldNotIncludeKeywords() throws Exception {
         SdkConfiguration sdkConfiguration = new SdkConfiguration.Builder(INIT_ADUNIT)
-                .withAdvancedBidder(WebViewAdvancedBidder.class).build();
+                .withAdditionalNetwork(WebViewAdapterConfiguration.class.getName()).build();
         MoPub.initializeSdk(context, sdkConfiguration, null);
         ShadowLooper.runUiThreadTasks();
         new Reflection.MethodBuilder(null, "setPersonalInfoManager")
@@ -395,10 +398,9 @@ public void generateAdUrl_withCollectUserDataDisabled_shouldNotIncludeKeywords()
 
     @Test
     public void generateAdUrl_withAdvancedBiddingEnabled_shouldIncludeAbt() throws Exception {
-        MoPub.setAdvancedBiddingEnabled(true);
         SdkConfiguration sdkConfiguration = new SdkConfiguration.Builder(
-                "b195f8dd8ded45fe847ad89ed1d016da").withAdvancedBidder(
-                WebViewAdvancedBidder.class).build();
+                "b195f8dd8ded45fe847ad89ed1d016da").withAdditionalNetwork(
+                WebViewAdapterConfiguration.class.getName()).build();
         MoPub.initializeSdk(context, sdkConfiguration, null);
         ShadowLooper.runUiThreadTasks();
 
@@ -633,9 +635,8 @@ public void generateAdUrl_whenNoNetworkPermission_shouldGenerateUnknownNetworkTy
     @Test
     public void generateAdUrl_shouldTolerateNullActiveNetwork() throws Exception {
         SdkConfiguration sdkConfiguration = new SdkConfiguration.Builder(INIT_ADUNIT)
-                .withAdvancedBidder(WebViewAdvancedBidder.class).build();
+                .withAdditionalNetwork(WebViewAdapterConfiguration.class.getName()).build();
         MoPub.initializeSdk(context, sdkConfiguration, null);
-        MoPub.setAdvancedBiddingEnabled(false);
         new Reflection.MethodBuilder(null, "setPersonalInfoManager")
                 .setStatic(MoPub.class)
                 .setAccessible()
@@ -644,7 +645,9 @@ public void generateAdUrl_shouldTolerateNullActiveNetwork() throws Exception {
 
         when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
 
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid).withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue());
+        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid)
+                .withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue())
+                .withAbt("{\"UrlGeneratorTest\":{\"token\":\"WebViewAdvancedBidderToken\"}}");
         shadowConnectivityManager.setActiveNetworkInfo(null);
 
         String adUrl = generateMinimumUrlString();
@@ -657,8 +660,6 @@ public void generateAdUrl_shouldTolerateNullActiveNetwork() throws Exception {
                 .execute();
     }
 
-
-
     @Test
     public void generateAdUrl_whenAdInfoIsCached_shouldUseAdInfoParams() throws Exception {
         SdkConfiguration sdkConfiguration = new SdkConfiguration.Builder(INIT_ADUNIT).build();
@@ -1047,6 +1048,8 @@ private String generateMinimumUrlString() {
         private String forceGdprApplies = "0";
         private String consentedPrivacyPolicyVersion = "";
         private String consentedVendorListVersion = "";
+        private String backoffMs = "";
+        private String backoffReason = "";
 
         public AdUrlBuilder(String expectedUdid) {
             this.expectedUdid = expectedUdid;
@@ -1084,6 +1087,8 @@ public String build() {
                     paramIfNotEmpty("current_consent_status", currentConsentStatus) +
                     paramIfNotEmpty("consented_privacy_policy_version", consentedPrivacyPolicyVersion) +
                     paramIfNotEmpty("consented_vendor_list_version", consentedVendorListVersion) +
+                    paramIfNotEmpty("backoff_ms", backoffMs) +
+                    paramIfNotEmpty("backoff_reason", backoffReason) +
                     "&mr=1" +
                     "&android_perms_ext_storage=" + externalStoragePermission +
                     "&vv=3";
@@ -1173,6 +1178,18 @@ public AdUrlBuilder withConsentedVendorListVersion(String consentedVendorListVer
             return this;
         }
 
+        AdUrlBuilder withBackoffMs(@Nullable final Integer backoffMs) {
+            if (backoffMs != null) {
+                this.backoffMs = String.valueOf(backoffMs);
+            }
+            return this;
+        }
+
+        AdUrlBuilder withBackoffReason(@Nullable final String backoffReason) {
+            this.backoffReason = backoffReason;
+            return this;
+        }
+
         private String paramIfNotEmpty(String key, String value) {
             if (TextUtils.isEmpty(value)) {
                 return "";
@@ -1182,17 +1199,37 @@ private String paramIfNotEmpty(String key, String value) {
         }
     }
 
-    private static class WebViewAdvancedBidder implements MoPubAdvancedBidder {
+    private static class WebViewAdapterConfiguration extends BaseAdapterConfiguration {
+
+        @NonNull
+        @Override
+        public String getAdapterVersion() {
+            return "adapterVersion";
+        }
 
+        @Nullable
         @Override
-        public String getToken(final Context context) {
+        public String getBiddingToken(@NonNull final Context context) {
             return "WebViewAdvancedBidderToken";
         }
 
+        @NonNull
         @Override
-        public String getCreativeNetworkName() {
+        public String getMoPubNetworkName() {
             return "UrlGeneratorTest";
         }
+
+        @NonNull
+        @Override
+        public String getNetworkSdkVersion() {
+            return "networkVersion";
+        }
+
+        @Override
+        public void initializeNetwork(@NonNull final Context context,
+                @Nullable final Map<String, String> configuration,
+                @NonNull final OnNetworkInitializationFinishedListener listener) {
+        }
     }
 
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java
index 85fdcc04..12e780ac 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -8,12 +8,12 @@
 
 import com.mopub.common.ExternalViewabilitySessionManager;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mraid.MraidController;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.robolectric.annotation.Config;
 
 import java.util.Map;
 
@@ -25,13 +25,13 @@
 import static org.mockito.Mockito.verifyZeroInteractions;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class WebViewCacheServiceTest {
 
     @Mock private BaseWebView baseWebView;
     @Mock private Interstitial interstitial;
     @Mock private ExternalViewabilitySessionManager viewabilityManager;
     @Mock private Handler handler;
+    @Mock private MraidController mraidController;
     private long broadcastIdentifier;
 
     @Before
@@ -44,19 +44,20 @@ public void setUp() throws Exception {
     @Test
     public void storeWebView_shouldPopulateMap() {
         WebViewCacheService.storeWebViewConfig(broadcastIdentifier, interstitial,
-                baseWebView, viewabilityManager);
+                baseWebView, viewabilityManager, mraidController);
 
         final Map<Long, WebViewCacheService.Config> configs = WebViewCacheService.getWebViewConfigs();
         assertThat(configs.size()).isEqualTo(1);
         assertThat(configs.get(broadcastIdentifier).getWebView()).isEqualTo(baseWebView);
         assertThat(configs.get(broadcastIdentifier).getWeakInterstitial().get()).isEqualTo(interstitial);
         assertThat(configs.get(broadcastIdentifier).getViewabilityManager()).isEqualTo(viewabilityManager);
+        assertThat(configs.get(broadcastIdentifier).getController()).isEqualTo(mraidController);
     }
 
     @Test
     public void storeWebView_withEmptyCache_shouldNotSetRunnableForTrimCache() {
         WebViewCacheService.storeWebViewConfig(broadcastIdentifier, interstitial,
-                baseWebView, viewabilityManager);
+                baseWebView, viewabilityManager, mraidController);
 
         verifyZeroInteractions(handler);
         final Map<Long, WebViewCacheService.Config> configs = WebViewCacheService.getWebViewConfigs();
@@ -64,14 +65,15 @@ public void storeWebView_withEmptyCache_shouldNotSetRunnableForTrimCache() {
         assertThat(configs.get(broadcastIdentifier).getWebView()).isEqualTo(baseWebView);
         assertThat(configs.get(broadcastIdentifier).getWeakInterstitial().get()).isEqualTo(interstitial);
         assertThat(configs.get(broadcastIdentifier).getViewabilityManager()).isEqualTo(viewabilityManager);
+        assertThat(configs.get(broadcastIdentifier).getController()).isEqualTo(mraidController);
     }
 
     @Test
     public void storeWebView_withNonEmptyCache_shouldSetRunnableForTrimCache() {
         WebViewCacheService.storeWebViewConfig(broadcastIdentifier, interstitial,
-                baseWebView, viewabilityManager);
+                baseWebView, viewabilityManager, mraidController);
         WebViewCacheService.storeWebViewConfig(broadcastIdentifier + 1, interstitial,
-                baseWebView, viewabilityManager);
+                baseWebView, viewabilityManager, mraidController);
 
         verify(handler).removeCallbacks(WebViewCacheService.sTrimCacheRunnable);
         verify(handler).postDelayed(WebViewCacheService.sTrimCacheRunnable,
@@ -83,13 +85,13 @@ public void storeWebView_withNonEmptyCache_shouldSetRunnableForTrimCache() {
     public void storeWebView_withMaxSizeReached_shouldTrimCache_shouldIgnoreStoreRequest() {
         for(int i = 0; i < WebViewCacheService.MAX_SIZE; i++) {
             WebViewCacheService.storeWebViewConfig(broadcastIdentifier + i, interstitial,
-                    baseWebView, viewabilityManager);
+                    baseWebView, viewabilityManager, mraidController);
         }
         final Map<Long, WebViewCacheService.Config> configs = WebViewCacheService.getWebViewConfigs();
         assertThat(configs.size()).isEqualTo(WebViewCacheService.MAX_SIZE);
 
         WebViewCacheService.storeWebViewConfig(broadcastIdentifier - 1, interstitial, baseWebView,
-                viewabilityManager);
+                viewabilityManager, mraidController);
 
         // This is called MAX_SIZE - 1 times since trim() is not called on the first run due to
         // the maps being empty. And then this is called an additional time to test the one
@@ -101,13 +103,13 @@ public void storeWebView_withMaxSizeReached_shouldTrimCache_shouldIgnoreStoreReq
                 WebViewCacheService.TRIM_CACHE_FREQUENCY_MILLIS);
 
         assertThat(configs.size()).isEqualTo(WebViewCacheService.MAX_SIZE);
-        assertThat(configs.get(broadcastIdentifier-1)).isNull();
+        assertThat(configs.get(broadcastIdentifier - 1)).isNull();
     }
 
     @Test
     public void popWebView_shouldReturnWebView_shouldRemoveMappings() {
         WebViewCacheService.storeWebViewConfig(broadcastIdentifier, interstitial,
-                baseWebView, viewabilityManager);
+                baseWebView, viewabilityManager, mraidController);
 
         final WebViewCacheService.Config result = WebViewCacheService.popWebViewConfig(broadcastIdentifier);
 
@@ -115,14 +117,16 @@ public void popWebView_shouldReturnWebView_shouldRemoveMappings() {
         assertThat(result.getWebView()).isEqualTo(baseWebView);
         assertThat(result.getWeakInterstitial().get()).isEqualTo(interstitial);
         assertThat(result.getViewabilityManager()).isEqualTo(viewabilityManager);
+        assertThat(result.getController()).isEqualTo(mraidController);
+
     }
 
     @Test
     public void trimCache_shouldRemoveStaleWebViews() {
         WebViewCacheService.storeWebViewConfig(broadcastIdentifier, interstitial,
-                baseWebView, viewabilityManager);
+                baseWebView, viewabilityManager, mraidController);
         WebViewCacheService.storeWebViewConfig(broadcastIdentifier + 1, mock(ResponseBodyInterstitial.class),
-                baseWebView, viewabilityManager);
+                baseWebView, viewabilityManager, mraidController);
 
         final Map<Long, WebViewCacheService.Config> configs = WebViewCacheService.getWebViewConfigs();
         // This clears the WeakReference, which allows the cache to remove the WebView associated
@@ -137,6 +141,7 @@ public void trimCache_shouldRemoveStaleWebViews() {
         assertThat(configs.get(broadcastIdentifier).getWebView()).isEqualTo(baseWebView);
         assertThat(configs.get(broadcastIdentifier).getWeakInterstitial().get()).isEqualTo(interstitial);
         assertThat(configs.get(broadcastIdentifier).getViewabilityManager()).isEqualTo(viewabilityManager);
+        assertThat(configs.get(broadcastIdentifier).getController()).isEqualTo(mraidController);
         assertThat(configsResult.get(broadcastIdentifier + 1)).isNull();
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java
index 85c32371..e45e4497 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -6,20 +6,17 @@
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.AdTypeTranslator;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.CustomEventBanner;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.HTML_BANNER;
 import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MRAID_BANNER;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class CustomEventBannerFactoryTest {
 
     private CustomEventBannerFactory subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java
index e1ee3be0..c70793de 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -6,20 +6,17 @@
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.AdTypeTranslator;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.CustomEventInterstitial;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.HTML_INTERSTITIAL;
 import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MRAID_INTERSTITIAL;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class CustomEventInterstitialFactoryTest {
 
     private CustomEventInterstitialFactory subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/FileUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/FileUtils.java
index 6a8a28ba..286978c8 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/FileUtils.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/FileUtils.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/GestureUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/GestureUtils.java
index d81c093c..af09c170 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/GestureUtils.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/GestureUtils.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java
index 377f8119..ebc58bc6 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowConnectivityManager.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowConnectivityManager.java
index 504a311f..d6a1f26e 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowConnectivityManager.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowConnectivityManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowTelephonyManager.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowTelephonyManager.java
index bda3fcbf..b0727630 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowTelephonyManager.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowTelephonyManager.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ShadowVastVideoView.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ShadowVastVideoView.java
index 6e02efac..2b1b7ce7 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ShadowVastVideoView.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ShadowVastVideoView.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -11,4 +11,8 @@
 
 @Implements(VastVideoView.class)
 public class ShadowVastVideoView extends ShadowVideoView {
+    @Override
+    public boolean isPlaying() {
+        return super.isPlaying();
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdViewControllerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdViewControllerFactory.java
index db33183d..40d5fe7e 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdViewControllerFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdViewControllerFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java
index 8a4b5d79..d1d5f6ab 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerFactory.java
index ff3bdfca..6dc80cf4 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java
index 71760cdc..db971053 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialFactory.java
index 60120d2b..290db2c2 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java
index 1caa7a60..42c7e02e 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java
index ccf13570..d43da352 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMoPubViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMoPubViewFactory.java
index ef37eaf9..a8e4b3c3 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMoPubViewFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMoPubViewFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java
index b8884546..80017e68 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java
index 03b83d77..aa12c22c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ThreadUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ThreadUtils.java
index 037550e4..54f3b9a8 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ThreadUtils.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ThreadUtils.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java
index 6c3541d4..dad776da 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java
index ec6ba6d4..3e944c18 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -12,7 +12,6 @@
 import com.mopub.TestSdkHelper;
 import com.mopub.common.MoPub;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Rule;
@@ -34,7 +33,6 @@
 import static org.powermock.api.mockito.PowerMockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 @PrepareForTest({MoPub.class, CookieManager.class})
 public class WebViewsTest {
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java
index f2941422..41028fe0 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java
@@ -1,16 +1,14 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
 package com.mopub.mobileads.util;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 import org.w3c.dom.Document;
 import org.w3c.dom.Node;
 import org.xml.sax.InputSource;
@@ -30,7 +28,6 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class XmlUtilsTest {
 
     // From Microsoft's sample xml documents page: https://msdn.microsoft.com/en-us/library/bb387026.aspx
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
index c010145f..699bf188 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -10,7 +10,9 @@
 
 import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
+import com.mopub.mobileads.CustomEventBanner;
+import com.mopub.mobileads.InternalCustomEventBannerListener;
+import com.mopub.mobileads.MoPubErrorCode;
 import com.mopub.mobileads.test.support.TestMraidControllerFactory;
 import com.mopub.mraid.MraidController.MraidListener;
 
@@ -19,26 +21,25 @@
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
-import org.robolectric.annotation.Config;
 
 import java.util.HashMap;
 import java.util.Map;
 
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
 import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MraidBannerTest {
     private static final String INPUT_HTML_DATA = "%3Chtml%3E%3C%2Fhtml%3E";
 
     MraidController mockMraidController;
-    @Mock CustomEventBannerListener mockBannerListener;
+    @Mock InternalCustomEventBannerListener mockBannerListener;
 
     private Context context;
     private Map<String, Object> localExtras;
@@ -138,6 +139,33 @@ public void bannerMraidListener_onClose_shouldNotifyBannerCollapsed() {
         verify(mockBannerListener).onBannerCollapsed();
     }
 
+    @Test
+    public void bannerMraidListener_onResizeToOriginalSizeTrue_shouldNotifyResumeAutoRefresh() {
+        MraidListener mraidListener = captureMraidListener();
+        mraidListener.onResize(true);
+
+        verify(mockBannerListener).onResumeAutoRefresh();
+    }
+
+    @Test
+    public void bannerMraidListener_onResizeToOriginalSizeFalse_shouldNotifyPauseAutoRefresh() {
+        MraidListener mraidListener = captureMraidListener();
+        mraidListener.onResize(false);
+
+        verify(mockBannerListener).onPauseAutoRefresh();
+    }
+
+    @Test
+    public void bannerMraidListener_notInstanceOfInternalListener_shouldNotifyBannerFailed() {
+        CustomEventBanner.CustomEventBannerListener mockPublicListener = mock(
+                CustomEventBanner.CustomEventBannerListener.class);
+        subject.loadBanner(context, mockPublicListener, localExtras, serverExtras);
+        ArgumentCaptor<MraidListener> listenerCaptor = ArgumentCaptor.forClass(MraidListener.class);
+        verify(mockMraidController, never()).setMraidListener(listenerCaptor.capture());
+
+        verify(mockPublicListener).onBannerFailed(MoPubErrorCode.MRAID_LOAD_ERROR);
+    }
+
     @Test
     public void trackMpxAndThirdPartyImpressions_shouldFireJavascriptWebViewDidAppear() {
         MraidListener mraidListener = captureMraidListener();
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
index 6a6be844..bcea7356 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -7,7 +7,6 @@
 import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.Context;
-import android.content.Intent;
 import android.os.Build;
 import android.webkit.WebSettings;
 import android.webkit.WebViewClient;
@@ -15,7 +14,6 @@
 import com.mopub.common.AdReport;
 import com.mopub.common.Constants;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.mraid.MraidBridge.MraidBridgeListener;
 import com.mopub.mraid.MraidBridge.MraidWebView;
 import com.mopub.mraid.MraidNativeCommandHandler.MraidCommandFailureListener;
@@ -29,9 +27,9 @@
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
 
 import java.net.URI;
+import java.net.URISyntaxException;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -50,15 +48,21 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MraidBridgeTest {
-    @Mock MraidNativeCommandHandler mockNativeCommandHandler;
-    @Mock MraidBridgeListener mockBridgeListener;
-    @Mock AdReport mockAdReport;
-    @Mock(answer = Answers.RETURNS_DEEP_STUBS) MraidWebView mockBannerWebView;
-    @Mock(answer = Answers.RETURNS_DEEP_STUBS) MraidWebView mockInterstitialWebView;
-    @Mock WebSettings mockWebSettings;
-    @Captor ArgumentCaptor<WebViewClient> bannerWebViewClientCaptor;
+    @Mock
+    private MraidNativeCommandHandler mockNativeCommandHandler;
+    @Mock
+    private MraidBridgeListener mockBridgeListener;
+    @Mock
+    private AdReport mockAdReport;
+    @Mock(answer = Answers.RETURNS_DEEP_STUBS)
+    private MraidWebView mockBannerWebView;
+    @Mock(answer = Answers.RETURNS_DEEP_STUBS)
+    private MraidWebView mockInterstitialWebView;
+    @Mock
+    private WebSettings mockWebSettings;
+    @Captor
+    private ArgumentCaptor<WebViewClient> bannerWebViewClientCaptor;
 
     private Activity activity;
     private MraidBridge subjectBanner;
@@ -216,18 +220,54 @@ public void handleShouldOverrideUrl_smsUrl_notClicked_shouldReturnFalse() {
     }
 
     @Test
-    public void handleShouldOverrideUrl_smsUrl_clicked_shouldStartActivity() {
+    public void handleShouldOverrideUrl_validUrl_clicked_shoulReturnTrue() throws URISyntaxException {
         attachWebViews();
         subjectBanner.setClicked(true);
         reset(mockBannerWebView);
         when(mockBannerWebView.getContext()).thenReturn(activity);
 
         boolean result = subjectBanner.handleShouldOverrideUrl("sms://123456789");
+        verify(mockBridgeListener).onOpen(new URI("sms://123456789"));
+        assertThat(result).isTrue();
+
+        reset(mockBridgeListener);
+        result = subjectBanner.handleShouldOverrideUrl("tel:123456");
+        verify(mockBridgeListener).onOpen(new URI("tel:123456"));
+        assertThat(result).isTrue();
+
+        reset(mockBridgeListener);
+        result = subjectBanner.handleShouldOverrideUrl("http://www.mopub.com/");
+        verify(mockBridgeListener).onOpen(new URI("http://www.mopub.com/"));
+        assertThat(result).isTrue();
+
+        reset(mockBridgeListener);
+        result = subjectBanner.handleShouldOverrideUrl("mopubnativebrowser://navigate?url=https://www.mopub.com");
+        verify(mockBridgeListener).onOpen(new URI("mopubnativebrowser://navigate?url=https://www.mopub.com"));
+        assertThat(result).isTrue();
+
+        reset(mockBridgeListener);
+        result = subjectBanner.handleShouldOverrideUrl("market://details?id=com.fitbit.FitbitMobile");
+        verify(mockBridgeListener).onOpen(new URI("market://details?id=com.fitbit.FitbitMobile"));
+        assertThat(result).isTrue();
+
+        reset(mockBridgeListener);
+        result = subjectBanner.handleShouldOverrideUrl("deeplink+://navigate?primaryUrl=twitter://timeline");
+        verify(mockBridgeListener).onOpen(new URI("deeplink+://navigate?primaryUrl=twitter://timeline"));
+        assertThat(result).isTrue();
+
+        reset(mockBridgeListener);
+        result = subjectBanner.handleShouldOverrideUrl("geo:37.7767486,-122.416749?q=37.7767486%2C-122.416749");
+        verify(mockBridgeListener).onOpen(new URI("geo:37.7767486,-122.416749?q=37.7767486%2C-122.416749"));
+        assertThat(result).isTrue();
+
+        reset(mockBridgeListener);
+        result = subjectBanner.handleShouldOverrideUrl("intent://scan/#Intent;scheme=zxing;package=com.google.zxing.client.android;end");
+        verify(mockBridgeListener).onOpen(new URI("intent://scan/#Intent;scheme=zxing;package=com.google.zxing.client.android;end"));
+        assertThat(result).isTrue();
 
-        Intent startedIntent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(startedIntent).isNotNull();
-        assertThat(startedIntent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(startedIntent.getComponent()).isNull();
+        reset(mockBridgeListener);
+        result = subjectBanner.handleShouldOverrideUrl("mopubshare://tweet?screen_name=SpaceX&tweet_id=596026229536460802");
+        verify(mockBridgeListener).onOpen(new URI("mopubshare://tweet?screen_name=SpaceX&tweet_id=596026229536460802"));
         assertThat(result).isTrue();
     }
 
@@ -246,17 +286,18 @@ public void runCommand_requiresClick_notClicked_shouldThrowException()
         subjectBanner = new MraidBridge(mockAdReport, PlacementType.INLINE);
         subjectBanner.attachView(mockBannerWebView);
         subjectBanner.setClicked(false);
-        Map<String, String> params = new HashMap<String, String>();
+        Map<String, String> params = new HashMap<>();
         params.put("uri", "https://valid-url");
 
         subjectBanner.runCommand(MraidJavascriptCommand.PLAY_VIDEO, params);
     }
 
+    @Test
     public void runCommand_requiresClick_clicked_shouldNotThrowException()
             throws MraidCommandException {
         attachWebViews();
         subjectBanner.setClicked(true);
-        Map<String, String> params = new HashMap<String, String>();
+        Map<String, String> params = new HashMap<>();
         params.put("uri", "https://valid-url");
 
         subjectBanner.runCommand(MraidJavascriptCommand.PLAY_VIDEO, params);
@@ -267,7 +308,7 @@ public void runCommand_interstitial_requiresClick_notClicked_shouldThrowExceptio
             throws MraidCommandException {
         attachWebViews();
         subjectInterstitial.setClicked(false);
-        Map<String, String> params = new HashMap<String, String>();
+        Map<String, String> params = new HashMap<>();
         params.put("uri", "https://valid-url");
 
         subjectInterstitial.runCommand(MraidJavascriptCommand.OPEN, params);
@@ -278,7 +319,7 @@ public void runCommand_interstitial_requiresClick_clicked_shouldNotThrowExceptio
             throws MraidCommandException {
         attachWebViews();
         subjectInterstitial.setClicked(true);
-        Map<String, String> params = new HashMap<String, String>();
+        Map<String, String> params = new HashMap<>();
         params.put("url", "https://valid-url");
 
         subjectInterstitial.runCommand(MraidJavascriptCommand.OPEN, params);
@@ -288,7 +329,7 @@ public void runCommand_interstitial_requiresClick_clicked_shouldNotThrowExceptio
     public void runCommand_close_shouldCallListener()
             throws MraidCommandException {
         attachWebViews();
-        Map<String, String> params = new HashMap<String, String>();
+        Map<String, String> params = new HashMap<>();
         
         subjectBanner.runCommand(MraidJavascriptCommand.CLOSE, params);
 
@@ -300,7 +341,7 @@ public void runCommand_expand_shouldCallListener()
             throws MraidCommandException {
         attachWebViews();
         subjectBanner.setClicked(true);
-        Map<String, String> params = new HashMap<String, String>();
+        Map<String, String> params = new HashMap<>();
         params.put("shouldUseCustomClose", "true");
 
         subjectBanner.runCommand(MraidJavascriptCommand.EXPAND, params);
@@ -313,7 +354,7 @@ public void runCommand_expand_withUrl_shouldCallListener()
             throws MraidCommandException {
         attachWebViews();
         subjectBanner.setClicked(true);
-        Map<String, String> params = new HashMap<String, String>();
+        Map<String, String> params = new HashMap<>();
         params.put("url", "https://valid-url");
         params.put("shouldUseCustomClose", "true");
 
@@ -330,7 +371,7 @@ public void runCommand_playVideo_shouldCallListener()
             throws MraidCommandException {
         attachWebViews();
         subjectBanner.setClicked(true);
-        Map<String, String> params = new HashMap<String, String>();
+        Map<String, String> params = new HashMap<>();
         params.put("uri", "https://valid-url");
 
         subjectBanner.runCommand(MraidJavascriptCommand.PLAY_VIDEO, params);
@@ -345,7 +386,7 @@ public void runCommand_storePicture_shouldCallListener()
             throws MraidCommandException {
         attachWebViews();
         subjectBanner.setClicked(true);
-        Map<String, String> params = new HashMap<String, String>();
+        Map<String, String> params = new HashMap<>();
         params.put("uri", "https://valid-url");
 
         subjectBanner.runCommand(MraidJavascriptCommand.STORE_PICTURE, params);
@@ -359,7 +400,7 @@ public void runCommand_createCalendarEvent_shouldCallListener()
             throws MraidCommandException {
         attachWebViews();
         subjectBanner.setClicked(true);
-        Map<String, String> params = new HashMap<String, String>();
+        Map<String, String> params = new HashMap<>();
         params.put("eventName", "Dinner at my house");
 
         subjectBanner.runCommand(MraidJavascriptCommand.CREATE_CALENDAR_EVENT, params);
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
index bc551486..a044eaeb 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -12,16 +12,15 @@
 import android.content.pm.ResolveInfo;
 import android.net.Uri;
 import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
 import android.widget.FrameLayout;
 
 import com.mopub.common.AdReport;
 import com.mopub.common.CloseableLayout.ClosePosition;
-import com.mopub.common.ExternalViewabilitySessionManager;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Utils;
 import com.mopub.mobileads.BaseVideoPlayerActivityTest;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.Interstitial;
 import com.mopub.mobileads.MraidVideoPlayerActivity;
 import com.mopub.mobileads.WebViewCacheService;
 import com.mopub.mraid.MraidBridge.MraidBridgeListener;
@@ -42,7 +41,6 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowApplication;
 
 import java.net.URI;
@@ -59,13 +57,12 @@
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyZeroInteractions;
 import static org.mockito.Mockito.when;
 import static org.robolectric.Shadows.shadowOf;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MraidControllerTest {
-    private long broadcastIdentifier = 123;
     @Mock private AdReport mockAdReport;
     @Mock private MraidBridge mockBridge;
     @Mock private MraidBridge mockTwoPartBridge;
@@ -74,8 +71,6 @@
     @Mock private MraidListener mockMraidListener;
     @Mock private UseCustomCloseListener mockUseCustomCloseListener;
     @Mock private OrientationBroadcastReceiver mockOrientationBroadcastReceiver;
-    @Mock private MraidWebView mockWebView;
-    @Mock private ExternalViewabilitySessionManager mockViewabilityManager;
     @Captor private ArgumentCaptor<MraidBridgeListener> bridgeListenerCaptor;
     @Captor private ArgumentCaptor<MraidBridgeListener> twoPartBridgeListenerCaptor;
 
@@ -86,7 +81,6 @@
 
     @Before
     public void setUp() {
-        ShadowApplication.setDisplayMetricsDensity(1.0f);
         WebViewCacheService.clearAll();
 
         activity = spy(Robolectric.buildActivity(Activity.class).create().get());
@@ -114,7 +108,7 @@ public Void answer(final InvocationOnMock invocation) throws Throwable {
         subject.setMraidListener(mockMraidListener);
         subject.setOrientationBroadcastReceiver(mockOrientationBroadcastReceiver);
         subject.setRootView(rootView);
-        subject.fillContent(null, "fake_html_data", null);
+        subject.fillContent("fake_html_data", null);
 
         verify(mockBridge).setMraidBridgeListener(bridgeListenerCaptor.capture());
         verify(mockTwoPartBridge).setMraidBridgeListener(twoPartBridgeListenerCaptor.capture());
@@ -138,17 +132,16 @@ public void bridgeOnReady_shouldSetStateToDefault_shouldCallListener() {
     }
 
     @Test
-    public void handlePageLoad_shouldNotifyBridgeOfVisibilityPlacementScreenSizeAndSupports() {
+    public void handlePageLoad_shouldNotifyBridgeOfVisibilityPlacementAndSupports() {
         when(mockBridge.isViewable()).thenReturn(true);
 
         subject.handlePageLoad();
 
         verify(mockBridge).notifyViewability(true);
         verify(mockBridge).notifyPlacementType(PlacementType.INLINE);
-        verify(mockBridge).notifyScreenMetrics(any(MraidScreenMetrics.class));
 
         // The actual values here are supplied by the Mraids class, which has separate tests.
-        verify(mockBridge).notifySupports(false, false, false, false, false);
+        verify(mockBridge, times(1)).notifySupports(anyBoolean(), anyBoolean(), anyBoolean(), anyBoolean(), anyBoolean());
     }
 
     @Test
@@ -217,7 +210,7 @@ public void handleResize_shouldThrowExceptionForInterstitial() throws MraidComma
         subject.setRootView(rootView);
 
         // Move to DEFAULT state
-        subject.fillContent(null, "fake_html_data", null);
+        subject.fillContent("fake_html_data", null);
         subject.handlePageLoad();
 
         subject.handleResize(100, 200, 0, 0, ClosePosition.TOP_RIGHT, true);
@@ -349,7 +342,7 @@ public void handleExpand_shouldBeIgnoredForInterstitial() throws MraidCommandExc
         subject.setRootView(rootView);
 
         // Move to DEFAULT state
-        subject.fillContent(null, "fake_html_data", null);
+        subject.fillContent("fake_html_data", null);
         subject.handlePageLoad();
 
         subject.handleExpand(null, false);
@@ -568,7 +561,7 @@ public void handleOpen_withAboutBlankUrl_shouldFailSilently() {
     }
 
     @Test
-    public void fillContent_withCacheHit_shouldNotLoadHtmlData_shouldCallMraidListenerOnLoaded() {
+    public void fillContent_shouldLoadHtmlData() {
         subject = new MraidController(
                 activity, mockAdReport, PlacementType.INLINE,
                 mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
@@ -576,26 +569,8 @@ public void fillContent_withCacheHit_shouldNotLoadHtmlData_shouldCallMraidListen
         reset(mockMraidListener, mockBridge);
         subject.setOrientationBroadcastReceiver(mockOrientationBroadcastReceiver);
         subject.setRootView(rootView);
-        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, new Interstitial() {},
-                mockWebView, mockViewabilityManager);
 
-        subject.fillContent(broadcastIdentifier, "fake_html_data", null);
-
-        verify(mockBridge, never()).setContentHtml("fake_html_data");
-        verify(mockMraidListener).onLoaded(subject.getAdContainer());
-    }
-
-    @Test
-    public void fillContent_withCacheMiss_shouldLoadHtmlData() {
-        subject = new MraidController(
-                activity, mockAdReport, PlacementType.INLINE,
-                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
-        subject.setMraidListener(mockMraidListener);
-        reset(mockMraidListener, mockBridge);
-        subject.setOrientationBroadcastReceiver(mockOrientationBroadcastReceiver);
-        subject.setRootView(rootView);
-
-        subject.fillContent(broadcastIdentifier, "fake_html_data", null);
+        subject.fillContent("fake_html_data", null);
 
         verify(mockBridge).setContentHtml("fake_html_data");
         verify(mockMraidListener, never()).onLoaded(any(View.class));
@@ -795,6 +770,7 @@ public void handleSetOrientationProperties_forInterstitial_shouldChangeScreenOri
         assertThat(activity.getRequestedOrientation()).isEqualTo(ActivityInfo
                 .SCREEN_ORIENTATION_PORTRAIT);
 
+        subject.resume();
         subject.handlePageLoad();
         subject.handleSetOrientationProperties(true, MraidOrientation.LANDSCAPE);
 
@@ -812,6 +788,92 @@ public void shouldAllowForceOrientation_withNoneOrientation_shouldReturnTrue() t
         assertThat(result).isTrue();
     }
 
+    @Test
+    public void isInlineVideoAvailable_whenPlacementTypeIsInline_whenViewIsHardwareAccelerated_shouldReturnTrue() throws Exception {
+        Window mockWindow = mock(Window.class);
+        WindowManager.LayoutParams mockLayoutParams = mock(WindowManager.LayoutParams.class);
+
+        mockLayoutParams.flags = WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;
+        when(mockWindow.getAttributes()).thenReturn(mockLayoutParams);
+        when(activity.getWindow()).thenReturn(mockWindow);
+
+        subject = new MraidController(
+                activity, mockAdReport, PlacementType.INLINE,
+                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
+
+        subject.fillContent("fake_html_data", null);
+
+        View mockView = mock(View.class);
+        when(mockView.isHardwareAccelerated()).thenReturn(true);
+        when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);
+
+        assertThat(subject.isInlineVideoAvailable()).isTrue();
+    }
+
+    @Test
+    public void isInlineVideoAvailable_whenPlacementTypeIsInline_whenViewIsNotHardwareAccelerated_shouldReturnFalse() throws Exception {
+        Window mockWindow = mock(Window.class);
+        WindowManager.LayoutParams mockLayoutParams = mock(WindowManager.LayoutParams.class);
+
+        mockLayoutParams.flags = WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;
+        when(mockWindow.getAttributes()).thenReturn(mockLayoutParams);
+        when(activity.getWindow()).thenReturn(mockWindow);
+
+        subject = new MraidController(
+                activity, mockAdReport, PlacementType.INLINE,
+                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
+
+        subject.fillContent("fake_html_data", null);
+
+        View mockView = mock(View.class);
+        when(mockView.isHardwareAccelerated()).thenReturn(false);
+        when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_SOFTWARE);
+
+        assertThat(subject.isInlineVideoAvailable()).isTrue();
+    }
+
+    @Test
+    public void isInlineVideoAvailable_whenPlacementTypeIsNotInline_whenViewIsHardwareAccelerated_shouldReturnTrue() throws Exception {
+        Window mockWindow = mock(Window.class);
+        mockWindow.setFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,
+                WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
+
+        when(activity.getWindow()).thenReturn(mockWindow);
+
+        subject = new MraidController(
+                activity, mockAdReport, PlacementType.INTERSTITIAL,
+                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
+
+        subject.fillContent("fake_html_data", null);
+
+        View mockView = mock(View.class);
+        when(mockView.isHardwareAccelerated()).thenReturn(true);
+        when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);
+
+        assertThat(subject.isInlineVideoAvailable()).isTrue();
+    }
+
+    @Test
+    public void isInlineVideoAvailable_whenPlacementTypeIsInNotline_whenViewIsNotHardwareAccelerated_shouldReturnTrue() throws Exception {
+        Window mockWindow = mock(Window.class);
+        mockWindow.setFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,
+                WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
+
+        when(activity.getWindow()).thenReturn(mockWindow);
+
+        subject = new MraidController(
+                activity, mockAdReport, PlacementType.INTERSTITIAL,
+                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
+
+        subject.fillContent("fake_html_data", null);
+
+        View mockView = mock(View.class);
+        when(mockView.isHardwareAccelerated()).thenReturn(false);
+        when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_SOFTWARE);
+
+        assertThat(subject.isInlineVideoAvailable()).isTrue();
+    }
+
     @Test
     public void shouldAllowForceOrientation_withApplicationContext_shouldReturnFalse() throws PackageManager.NameNotFoundException {
         setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
@@ -971,13 +1033,22 @@ public void unapplyOrientation_withoutLockedOrientation_shouldNotChangeRequested
     }
 
     @Test
-    public void destroy_shouldCancelLastMetricsRequest_shouldUnregisterBroadcastReceiver_shouldDetachAllBridges() {
+    public void destroy_shouldCancelLastMetricsRequest_shouldUnregisterBroadcastReceiver_shouldDetachAllBridges_shouldUnapplyOrientation() throws Exception {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
+                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
+        subject.handleSetOrientationProperties(false, MraidOrientation.LANDSCAPE);
+        subject.applyOrientation();
+        assertThat(activity.getRequestedOrientation())
+                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+
         subject.destroy();
 
         verify(mockScreenMetricsWaiter).cancelLastRequest();
         verify(mockOrientationBroadcastReceiver).unregister();
         verify(mockBridge).detach();
         verify(mockTwoPartBridge).detach();
+        assertThat(activity.getRequestedOrientation())
+                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
     }
 
     @Test
@@ -1046,6 +1117,195 @@ public void destroy_fromResizedState_shouldRemoveCloseableAdContainerFromContent
         assertThat(rootView.getChildCount()).isEqualTo(0);
     }
 
+    @Test
+    public void callMraidListenerCallbacks_withVariousStates_shouldCallCorrectMraidListenerCallback() {
+        // Previous state LOADING
+
+        ViewState previousViewState = ViewState.LOADING;
+        ViewState currentViewState = ViewState.LOADING;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verifyZeroInteractions(mockMraidListener);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.LOADING;
+        currentViewState = ViewState.DEFAULT;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verifyZeroInteractions(mockMraidListener);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.LOADING;
+        currentViewState = ViewState.RESIZED;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onResize(false);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.LOADING;
+        currentViewState = ViewState.EXPANDED;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onExpand();
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.LOADING;
+        currentViewState = ViewState.HIDDEN;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onClose();
+
+
+        // Previous state DEFAULT
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.DEFAULT;
+        currentViewState = ViewState.LOADING;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verifyZeroInteractions(mockMraidListener);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.DEFAULT;
+        currentViewState = ViewState.DEFAULT;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verifyZeroInteractions(mockMraidListener);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.DEFAULT;
+        currentViewState = ViewState.RESIZED;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onResize(false);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.DEFAULT;
+        currentViewState = ViewState.EXPANDED;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onExpand();
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.DEFAULT;
+        currentViewState = ViewState.HIDDEN;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onClose();
+
+
+        // Previous state RESIZED
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.RESIZED;
+        currentViewState = ViewState.LOADING;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verifyZeroInteractions(mockMraidListener);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.RESIZED;
+        currentViewState = ViewState.DEFAULT;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onResize(true);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.RESIZED;
+        currentViewState = ViewState.RESIZED;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onResize(false);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.RESIZED;
+        currentViewState = ViewState.EXPANDED;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onExpand();
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.RESIZED;
+        currentViewState = ViewState.HIDDEN;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onClose();
+
+
+        // Previous state EXPANDED
+
+        previousViewState = ViewState.EXPANDED;
+        currentViewState = ViewState.LOADING;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verifyZeroInteractions(mockMraidListener);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.EXPANDED;
+        currentViewState = ViewState.DEFAULT;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onClose();
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.EXPANDED;
+        currentViewState = ViewState.RESIZED;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onResize(false);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.EXPANDED;
+        currentViewState = ViewState.EXPANDED;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onExpand();
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.EXPANDED;
+        currentViewState = ViewState.HIDDEN;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onClose();
+
+
+        // Previous state HIDDEN
+
+        previousViewState = ViewState.HIDDEN;
+        currentViewState = ViewState.LOADING;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verifyZeroInteractions(mockMraidListener);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.HIDDEN;
+        currentViewState = ViewState.DEFAULT;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verifyZeroInteractions(mockMraidListener);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.HIDDEN;
+        currentViewState = ViewState.RESIZED;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onResize(false);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.HIDDEN;
+        currentViewState = ViewState.EXPANDED;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onExpand();
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.HIDDEN;
+        currentViewState = ViewState.HIDDEN;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onClose();
+    }
+
     private void setMockActivityInfo(final boolean activityInfoFound, int screenOrientation,
             int configChanges) throws PackageManager.NameNotFoundException {
         final ActivityInfo mockActivityInfo = mock(ActivityInfo.class);
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
index c0a66b7a..9d1c0718 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -8,7 +8,6 @@
 import android.content.Intent;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.ResponseBodyInterstitialTest;
 
 import org.junit.Before;
@@ -18,7 +17,6 @@
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
 import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowActivity;
 import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
 
@@ -38,7 +36,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MraidInterstitialTest extends ResponseBodyInterstitialTest {
     private static final String EXPECTED_HTML_DATA = "<html></html>";
     private long broadcastIdentifier;
@@ -116,7 +113,6 @@ public void showInterstitial_shouldStartActivityWithIntent() throws Exception {
 
         assertThat(intent.getComponent().getClassName())
                 .isEqualTo("com.mopub.mobileads.MraidActivity");
-        assertThat(intent.getExtras().get(HTML_RESPONSE_BODY_KEY)).isEqualTo(EXPECTED_HTML_DATA);
         assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
index 1f219605..85f35868 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -21,12 +21,10 @@
 import android.widget.LinearLayout;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Drawables;
 import com.mopub.common.util.ResponseHeader;
 import com.mopub.common.util.test.support.ShadowAsyncTasks;
 import com.mopub.common.util.test.support.ShadowMoPubHttpUrlConnection;
 import com.mopub.common.util.test.support.TestDrawables;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.test.support.FileUtils;
 import com.mopub.mraid.MraidNativeCommandHandler.DownloadImageAsyncTask;
 import com.mopub.mraid.MraidNativeCommandHandler.DownloadImageAsyncTask.DownloadImageAsyncTaskListener;
@@ -74,10 +72,11 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {ShadowAsyncTasks.class, ShadowMoPubHttpUrlConnection.class})
+@Config(shadows = {ShadowAsyncTasks.class, ShadowMoPubHttpUrlConnection.class})
 public class MraidNativeCommandHandlerTest {
     private static final String IMAGE_URI_VALUE = "file://tmp/expectedFile.jpg";
     private static final String REMOTE_IMAGE_URL = "https://www.mopub.com/expectedFile.jpg";
+    private static final String FILE_PATH = "/tmp/expectedFile.jpg";
     private static final int TIME_TO_PAUSE_FOR_NETWORK = 300;
     private static final String FAKE_IMAGE_DATA = "imageFileData";
     //XXX: Robolectric or JUNIT doesn't support the correct suffix ZZZZZ in the parse pattern, so replacing xx:xx with xxxx for time.
@@ -100,7 +99,7 @@ public void setUp() throws Exception {
 
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
         TestDrawables.EXPECTED_FILE.getBitmap().compress(Bitmap.CompressFormat.JPEG, 100, baos);
-        FileUtils.writeBytesToFile(baos.toByteArray(), "/tmp/expectedFile.jpg");
+        FileUtils.writeBytesToFile(baos.toByteArray(), FILE_PATH);
 
         expectedFile = new File(Environment.getExternalStorageDirectory(), "Pictures" + separator + "expectedFile.jpg");
         pictureDirectory = new File(Environment.getExternalStorageDirectory(), "Pictures");
@@ -114,6 +113,7 @@ public void setUp() throws Exception {
     @After
     public void tearDown() {
         ShadowToast.reset();
+        assertThat(new File(FILE_PATH).delete()).isTrue();
     }
 
     @Test
@@ -682,7 +682,7 @@ public void isInlineVideoAvailable_whenViewsAreHardwareAccelerated_whenWindowIsN
     }
 
     @Test
-    public void isInlineVideoAvailable_whenViewsAreNotHardwareAccelerated_whenWindowIsHardwareAccelerated_shouldReturnFalse() throws Exception {
+    public void isInlineVideoAvailable_whenViewsAreNotHardwareAccelerated_whenWindowIsHardwareAccelerated_shouldReturnTrue() throws Exception {
         Activity activity = Robolectric.buildActivity(Activity.class).create().get();
         activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
 
@@ -690,11 +690,11 @@ public void isInlineVideoAvailable_whenViewsAreNotHardwareAccelerated_whenWindow
         when(mockView.isHardwareAccelerated()).thenReturn(false);
         when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);
 
-        assertThat(subject.isInlineVideoAvailable(activity, mockView)).isFalse();
+        assertThat(subject.isInlineVideoAvailable(activity, mockView)).isTrue();
     }
 
     @Test
-    public void isInlineVideoAvailable_whenViewParentIsNotHardwareAccelerated_whenWindowIsHardwareAccelerated_shouldReturnFalse() throws Exception {
+    public void isInlineVideoAvailable_whenViewParentIsNotHardwareAccelerated_whenWindowIsHardwareAccelerated_shouldReturnTrue() throws Exception {
         Activity activity = Robolectric.buildActivity(Activity.class).create().get();
         activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
 
@@ -709,7 +709,7 @@ public void isInlineVideoAvailable_whenViewParentIsNotHardwareAccelerated_whenWi
         when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);
         when(mockView.getParent()).thenReturn(mockLinearLayout);
 
-        assertThat(subject.isInlineVideoAvailable(activity, mockView)).isFalse();
+        assertThat(subject.isInlineVideoAvailable(activity, mockView)).isTrue();
     }
 
     private static Context createMockContextWithSpecificIntentData(final String scheme, final String componentName, final String type, final String action) {
@@ -811,7 +811,7 @@ public Void answer(InvocationOnMock invocation) throws Throwable {
                 if (!(invocation.getArguments()[0] instanceof Intent)) {
                     throw new ClassCastException("For some reason you are not passing the calendar intent properly");
                 }
-                Context shadowContext = ShadowApplication.getInstance().getApplicationContext();
+                Context shadowContext = context;
                 shadowContext.startActivity((Intent) invocation.getArguments()[0]);
                 return null;
             }
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
index 56ce4176..6dc8ed9e 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -10,7 +10,6 @@
 import android.widget.ImageButton;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.EventForwardingBroadcastReceiver;
 
 import org.apache.http.HttpRequest;
@@ -20,7 +19,6 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowVideoView;
 import org.robolectric.shadows.httpclient.FakeHttp;
 import org.robolectric.shadows.httpclient.RequestMatcher;
@@ -37,7 +35,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MraidVideoViewControllerTest {
     private Context context;
     private Bundle bundle;
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidWebViewClientTest.java
index 112f0776..c46b28b8 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidWebViewClientTest.java
@@ -1,21 +1,18 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
 package com.mopub.mraid;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MraidWebViewClientTest {
 
     private MraidWebViewClient subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidControllerTest.java
index 310b8fd3..964ed0d6 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidControllerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -11,7 +11,6 @@
 import com.mopub.common.AdReport;
 import com.mopub.common.CloseableLayout;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.VastVideoRadialCountdownWidget;
 
 import org.junit.Before;
@@ -19,7 +18,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static com.mopub.mraid.RewardedMraidController.DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_MILLIS;
 import static com.mopub.mraid.RewardedMraidController.MILLIS_IN_SECOND;
@@ -28,7 +26,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class RewardedMraidControllerTest {
     private Context context;
     private long testBroadcastIdentifier;
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidInterstitialTest.java
index 5ddd582e..0c00f6ef 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidInterstitialTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -8,7 +8,6 @@
 import android.content.Intent;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.ResponseBodyInterstitialTest;
 
 import org.junit.Before;
@@ -17,13 +16,13 @@
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
 import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowActivity;
 import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
 
 import java.util.HashMap;
 import java.util.Map;
 
+import static com.mopub.common.DataKeys.AD_REPORT_KEY;
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.common.DataKeys.REWARDED_AD_DURATION_KEY;
@@ -38,7 +37,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class RewardedMraidInterstitialTest extends ResponseBodyInterstitialTest {
     private static final String EXPECTED_HTML_DATA = "<html></html>";
     private static final int EXPECTED_REWARDED_DURATION_SECONDS = 15;
@@ -131,11 +129,12 @@ public void showInterstitial_shouldStartActivityWithIntent() throws Exception {
 
         assertThat(intent.getComponent().getClassName())
                 .isEqualTo("com.mopub.mobileads.RewardedMraidActivity");
-        assertThat(intent.getExtras().get(HTML_RESPONSE_BODY_KEY)).isEqualTo(EXPECTED_HTML_DATA);
         assertThat(intent.getExtras().get(REWARDED_AD_DURATION_KEY)).isEqualTo(
                 EXPECTED_REWARDED_DURATION_SECONDS);
         assertThat(intent.getExtras().get(SHOULD_REWARD_ON_CLICK_KEY)).isEqualTo(
                 EXPECTED_SHOULD_REWARD_ON_CLICK);
+        assertThat(intent.getExtras().get(AD_REPORT_KEY)).isEqualTo(
+                localExtras.get(AD_REPORT_KEY));
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/AdRendererRegistryTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/AdRendererRegistryTest.java
index 14a9b0e4..f09d3042 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/AdRendererRegistryTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/AdRendererRegistryTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -8,14 +8,12 @@
 import android.content.Context;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import java.util.Collections;
 
@@ -24,7 +22,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class AdRendererRegistryTest {
 
     private AdRendererRegistry subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
index fda7818f..afb66279 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -8,19 +8,16 @@
 import android.content.Context;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class AdapterHelperTest {
     private AdapterHelper subject;
     private Activity context;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/BaseNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/BaseNativeAdTest.java
index 44b32f80..49afdad5 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/BaseNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/BaseNativeAdTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -8,20 +8,17 @@
 import android.view.View;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.nativeads.BaseNativeAd.NativeEventListener;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.robolectric.annotation.Config;
 
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class BaseNativeAdTest {
 
     private BaseNativeAd subject;
@@ -70,4 +67,4 @@ public void notifyAdClicked_withoutListenerSet_shouldNotCallOnAdClicked() {
 
         verifyNoMoreInteractions(mockEventListener);
     }
-}
\ No newline at end of file
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java
index 147ea1c3..860259c4 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -9,14 +9,12 @@
 import com.mopub.common.AdType;
 import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.nativeads.test.support.TestCustomEventNativeFactory;
 import com.mopub.network.AdResponse;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -28,7 +26,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class CustomEventNativeAdapterTest {
 
     private Activity context;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java
deleted file mode 100644
index c0735c2c..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java
+++ /dev/null
@@ -1,497 +0,0 @@
-// Copyright 2018 Twitter, Inc.
-// Licensed under the MoPub SDK License Agreement
-// http://www.mopub.com/legal/sdk-license-agreement/
-
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.net.Uri;
-
-import com.google.android.exoplayer2.upstream.DataSpec;
-import com.google.android.exoplayer2.upstream.HttpDataSource;
-import com.mopub.common.CacheService;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.util.Arrays;
-import java.util.Random;
-import java.util.TreeSet;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.refEq;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.verifyZeroInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class HttpDiskCompositeDataSourceTest {
-
-    private static final int BASE_SEED = 1234567890;
-    @Mock HttpDataSource mockHttpDataSource;
-    private HttpDiskCompositeDataSource subject;
-    private DataSpec dataSpec;
-    private Uri uri;
-
-
-    @Before
-    public void setUp() throws Exception {
-        Context context = Robolectric.buildActivity(Activity.class).create().get();
-        CacheService.initialize(context);
-        subject = new HttpDiskCompositeDataSource(context, "userAgent", mockHttpDataSource);
-        uri = new Uri.Builder().scheme("https").path("www.someurl").build();
-        dataSpec = new DataSpec(uri, 0, -1, null);
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        CacheService.clearAndNullCaches();
-    }
-
-    @Test
-    public void open_withNullDataSpecUri_shouldReturnLengthUnbounded() throws Exception {
-        DataSpec dataSpecWithNullUri = new DataSpec(null);
-
-        final long result = subject.open(dataSpecWithNullUri);
-
-        assertThat(result).isEqualTo(HttpDiskCompositeDataSource.LENGTH_UNBOUNDED);
-        verifyZeroInteractions(mockHttpDataSource);
-    }
-
-    @Test
-    public void open_withNoCachedData_shouldOpenHttpDataSource() throws Exception {
-        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(200000L);
-
-        long result = subject.open(dataSpec);
-
-        assertThat(result).isEqualTo(200000L);
-        verify(mockHttpDataSource).open(refEq(dataSpec));
-        verifyNoMoreInteractions(mockHttpDataSource);
-    }
-
-    @Test
-    public void open_withAllDataCached_shouldNotOpenHttpDataSource() throws Exception {
-        // When the entire file is cached, there's no need to open the network.
-        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(100000L);
-        byte[] data = generateRandomByteArray(100000, 0);
-        byte[] expectedFileSize = "100000".getBytes();
-        byte[] intervals = "[\"{start : 0, length : 100000}\"]".getBytes();
-        CacheService.putToDiskCache("0" + uri.toString(), data);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
-                expectedFileSize);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
-
-        long result = subject.open(dataSpec);
-
-        assertThat(result).isEqualTo(100000);
-        verifyZeroInteractions(mockHttpDataSource);
-    }
-
-    @Test
-    public void open_withSomeDataCached_shouldOpenHttpDataSourceAtAppropriateStartPoint() throws Exception {
-        // The idea behind this test is that we think we have the first 33333 bytes and need to ask
-        // the network for byte 33333 and onward.
-        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(100000L);
-        byte[] data = generateRandomByteArray(100000, 0);
-        byte[] expectedFileSize = "100000".getBytes();
-        byte[] intervals = "[\"{start : 0, length : 33333}\"]".getBytes();
-        CacheService.putToDiskCache("0" + uri.toString(), data);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
-                expectedFileSize);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
-
-        long result = subject.open(dataSpec);
-
-        assertThat(result).isEqualTo(100000);
-        DataSpec expectedDataSpec = new DataSpec(dataSpec.uri, 33333, -1, null);
-        // Using refEq because equals() is just the Java default, and they're not the same object.
-        verify(mockHttpDataSource).open(refEq(expectedDataSpec));
-    }
-
-    @Test
-    public void read_with2048ExpectedBytes_shouldFillBufferWith2048Bytes_shouldReturnNumberOfBytesRead2048() throws Exception {
-        // This is the case where we're reading from a cache that has all the necessary bytes
-        byte[] data = generateRandomByteArray(100000, 0);
-        byte[] expectedFileSize = "100000".getBytes();
-        byte[] intervals = "[\"{start : 0, length : 100000}\"]".getBytes();
-        // Pretend we have all the bytes in the cache, complete with the expected file size and
-        // a valid intervals set.
-        CacheService.putToDiskCache("0" + uri.toString(), data);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
-                expectedFileSize);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
-        byte[] readBuffer = new byte[2048];
-
-        subject.open(dataSpec);
-        int bytesRead = subject.read(readBuffer, 0, 2048);
-
-        // Verify that all 2048 bytes are expected and that the return value of read() is 2048
-        assertThat(bytesRead).isEqualTo(2048);
-        byte[] expectedData = new byte[2048];
-        System.arraycopy(data, 0, expectedData, 0, 2048);
-        assertThat(readBuffer).isEqualTo(expectedData);
-        verifyZeroInteractions(mockHttpDataSource);
-    }
-
-    @Test
-    public void read_withAllDataCached_whenReadingAcrossSegmentBoundaries_shouldReturnAllBytes() throws Exception {
-        // This is the case where we're reading from a cache that has all the necessary bytes, but
-        // some of it is in the next block. We need to finish reading from the current block, set
-        // up reading from the next block, and then do it.
-        byte[] data1 = generateRandomByteArray(HttpDiskCompositeDataSource.BLOCK_SIZE, 0);
-        byte[] data2 = generateRandomByteArray(HttpDiskCompositeDataSource.BLOCK_SIZE, 1);
-        String expectedFileLengthString = String.valueOf(
-                2 * HttpDiskCompositeDataSource.BLOCK_SIZE);
-        byte[] intervals = ("[\"{start : 0, length : " + expectedFileLengthString + "}\"]").getBytes();
-        CacheService.putToDiskCache("0" + uri.toString(), data1);
-        CacheService.putToDiskCache("1" + uri.toString(), data2);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
-                expectedFileLengthString.getBytes());
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
-        // Expect to read the last 1337 bytes from the first block and the rest from the second block
-        DataSpec modifiedDataSpec = new DataSpec(dataSpec.uri,
-                HttpDiskCompositeDataSource.BLOCK_SIZE - 1337, -1, null);
-        byte[] readBuffer = new byte[4096];
-
-        subject.open(modifiedDataSpec);
-        int bytesRead = subject.read(readBuffer, 0, 4096);
-
-        assertThat(bytesRead).isEqualTo(4096);
-        byte[] expectedBytes = new byte[4096];
-        System.arraycopy(data1, HttpDiskCompositeDataSource.BLOCK_SIZE - 1337, expectedBytes, 0,
-                1337);
-        System.arraycopy(data2, 0, expectedBytes, 1337, 4096 - 1337);
-        assertThat(readBuffer).isEqualTo(expectedBytes);
-        verifyZeroInteractions(mockHttpDataSource);
-    }
-
-    @Test
-    public void read_withEmptyCache_shouldReadBytesFromNetwork() throws Exception {
-        // Sets up an empty cache and read directly from the network
-        final byte[] bytesFromNetwork = generateRandomByteArray(2048, 0);
-        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(100000L);
-        setUpMockHttpDataSourceToReturnBytesFromNetwork(bytesFromNetwork, mockHttpDataSource);
-        byte[] readBuffer = new byte[2048];
-
-        subject.open(dataSpec);
-        int bytesRead = subject.read(readBuffer, 0, 2048);
-
-        assertThat(bytesRead).isEqualTo(2048);
-        assertThat(readBuffer).isEqualTo(bytesFromNetwork);
-        verify(mockHttpDataSource).open(refEq(dataSpec));
-        verify(mockHttpDataSource).read(any(byte[].class), eq(0), eq(2048));
-        verifyNoMoreInteractions(mockHttpDataSource);
-    }
-
-    @Test
-    public void read_withSomeDataInCache_shouldReadRestOfBytesFromNetwork() throws Exception {
-        // This is the case where there is some data in the cache, and we run out of cached data.
-        // The rest of the bytes are from the network.
-        final byte[] bytesFromNetwork = generateRandomByteArray(2048, 0);
-        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(100000L);
-        setUpMockHttpDataSourceToReturnBytesFromNetwork(bytesFromNetwork, mockHttpDataSource);
-        byte[] data = generateRandomByteArray(2048, 1);
-        byte[] segment0 = new byte[HttpDiskCompositeDataSource.BLOCK_SIZE];
-        byte[] expectedFileSize = "100000".getBytes();
-        byte[] intervals = ("[\"{start : 0, length : 2048}\"]").getBytes();
-        // So we have the first 2048 bytes in the cache
-        System.arraycopy(data, 0, segment0, 0, 2048);
-        CacheService.putToDiskCache("0" + uri.toString(), segment0);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
-                expectedFileSize);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
-        // However, we want to read 4096 bytes (We have to go to the network for the rest).
-        byte[] readBuffer = new byte[4096];
-
-        subject.open(dataSpec);
-        int bytesRead = subject.read(readBuffer, 0, 4096);
-
-        // Make sure that the bytes read have both the first 2048 bytes from the cache and the 2048
-        // bytes from the network.
-        assertThat(bytesRead).isEqualTo(4096);
-        byte[] expectedBytes = new byte[4096];
-        System.arraycopy(data, 0, expectedBytes, 0, 2048);
-        System.arraycopy(bytesFromNetwork, 0, expectedBytes, 2048, 2048);
-        assertThat(readBuffer).isEqualTo(expectedBytes);
-        DataSpec modifiedDataSpec = new DataSpec(dataSpec.uri, 2048, -1, null);
-        verify(mockHttpDataSource).open(refEq(modifiedDataSpec));
-        // Verify that we stored the bytes from network starting from index 2048 for 2048 bytes
-        verify(mockHttpDataSource).read(any(byte[].class), eq(2048), eq(2048));
-        verifyNoMoreInteractions(mockHttpDataSource);
-    }
-
-    @Test
-    public void read_withSomeDataInCacheBeforeBlockBoundary_whenApproachingBlockBoundary_shouldReadBytesFromDisk_shouldReadBytesFromNetwork_shouldSetUpNextBlock() throws Exception {
-        // This is the situation where the cache ends 1024 bytes before the second block boundary.
-        // We need to read the first 1024 bytes from the cache, read the next 3072 bytes, store
-        // the first 1024 bytes in the current block, close it out, flush it, set up the next block,
-        // and store the next 2048 bytes into that block.
-        final byte[] bytesFromNetwork = generateRandomByteArray(3072, 0);
-        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(
-                (long) (HttpDiskCompositeDataSource.BLOCK_SIZE * 4));
-        setUpMockHttpDataSourceToReturnBytesFromNetwork(bytesFromNetwork, mockHttpDataSource);
-        byte[] data = generateRandomByteArray(HttpDiskCompositeDataSource.BLOCK_SIZE, 1);
-        byte[] expectedFileSize = String.valueOf(
-                HttpDiskCompositeDataSource.BLOCK_SIZE * 4).getBytes();
-        // Typical access patterns of video is to request for the first 44 bytes, the last 3886
-        // bytes, and then start at byte 44 and request till the end of the video. We are pretending
-        // that we did that, and stopped 1024 bytes before the end of the 2nd block.
-        byte[] intervals = ("[\"{start : 0, length : 44}\", \"{start : " +
-                (HttpDiskCompositeDataSource.BLOCK_SIZE * 4 - 3886) +
-                ", length : 3886}\", \"{start : 44, length : " +
-                (HttpDiskCompositeDataSource.BLOCK_SIZE * 2 - 1024 - 44) + "}\"]")
-                .getBytes();
-        CacheService.putToDiskCache("1" + uri.toString(), data);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
-                expectedFileSize);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
-        byte[] readBuffer = new byte[4096];
-        dataSpec = new DataSpec(dataSpec.uri, 2 * HttpDiskCompositeDataSource.BLOCK_SIZE - 2048, -1,
-                dataSpec.key, dataSpec.flags);
-
-        subject.open(dataSpec);
-        int bytesRead = subject.read(readBuffer, 0, 4096);
-
-        assertThat(bytesRead).isEqualTo(4096);
-        byte[] expectedBytes = new byte[4096];
-        System.arraycopy(data, HttpDiskCompositeDataSource.BLOCK_SIZE - 2048, expectedBytes, 0,
-                1024);
-        System.arraycopy(bytesFromNetwork, 0, expectedBytes, 1024, 3072);
-        assertThat(readBuffer).isEqualTo(expectedBytes);
-        DataSpec modifiedDataSpec = new DataSpec(dataSpec.uri,
-                2 * HttpDiskCompositeDataSource.BLOCK_SIZE - 1024, -1, null);
-        verify(mockHttpDataSource).open(refEq(modifiedDataSpec));
-        verify(mockHttpDataSource).read(any(byte[].class), eq(1024), eq(3072));
-        // Also verify that the 2nd block was written to disk correctly.
-        byte[] expectedBlock = new byte[HttpDiskCompositeDataSource.BLOCK_SIZE];
-        System.arraycopy(data, 0, expectedBlock, 0, HttpDiskCompositeDataSource.BLOCK_SIZE - 1024);
-        System.arraycopy(bytesFromNetwork, 0, expectedBlock,
-                HttpDiskCompositeDataSource.BLOCK_SIZE - 1024, 1024);
-        assertThat(CacheService.getFromDiskCache("1" + uri.toString())).isEqualTo(
-                expectedBlock);
-    }
-
-    @Test
-    public void close_withoutFirstCallingOpen_shouldNotWriteToDisk() throws Exception {
-        subject.close();
-
-        assertThat(CacheService.containsKeyDiskCache("0" + uri.toString())).isFalse();
-        assertThat(CacheService.containsKeyDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString())).isFalse();
-        assertThat(CacheService.containsKeyDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString())).isFalse();
-    }
-
-    @Test
-    public void close_withCurrentActiveBlock_shouldWriteToDisk() throws Exception {
-        // Verifying that close() actually writes the current data to disk
-        final byte[] bytesFromNetwork = generateRandomByteArray(1000, 0);
-        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(5000L);
-        setUpMockHttpDataSourceToReturnBytesFromNetwork(bytesFromNetwork, mockHttpDataSource);
-        byte[] readBuffer = new byte[1000];
-
-        subject.open(dataSpec);
-        subject.read(readBuffer, 0, 1000);
-        subject.close();
-
-        assertThat(readBuffer).isEqualTo(bytesFromNetwork);
-        byte[] expectedBlock = new byte[HttpDiskCompositeDataSource.BLOCK_SIZE];
-        System.arraycopy(bytesFromNetwork, 0, expectedBlock, 0, 1000);
-        assertThat(CacheService.getFromDiskCache("0" + uri.toString())).isEqualTo(expectedBlock);
-        assertThat(CacheService.getFromDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString())).isEqualTo(
-                "5000".getBytes());
-        assertThat(CacheService.getFromDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString())).isEqualTo(
-                "[\"{start : 0, length : 1000}\"]".getBytes());
-    }
-
-    @Test
-    public void addNewInterval_shouldAddNewIntervalToIntervals() {
-        IntInterval interval = new IntInterval(5, 42);
-        TreeSet<IntInterval> intervalList = new TreeSet<IntInterval>();
-
-        HttpDiskCompositeDataSource.addNewInterval(intervalList, 5, 42);
-
-        assertThat(intervalList).containsOnly(interval);
-    }
-
-    @Test
-    public void addNewInterval_withExistingInterval_shouldNotAddNewInterval() {
-        IntInterval interval1 = new IntInterval(5, 42);
-        IntInterval interval2 = new IntInterval(500, 200);
-        TreeSet<IntInterval> intervalList = new TreeSet<IntInterval>();
-        intervalList.add(interval1);
-        intervalList.add(interval2);
-
-        HttpDiskCompositeDataSource.addNewInterval(intervalList, 5, 42);
-
-        assertThat(intervalList).containsOnly(interval1, interval2);
-    }
-
-    @Test
-    public void addNewInterval_withExistingIntervalInParts_shouldNotAddNewInterval() {
-        // The union of these two intervals is 5 with a length of 45 (ie. from 5 to 50).
-        // An interval from 7 to 50 (start at 7, length 43) should not be added to the interval set.
-        IntInterval interval1 = new IntInterval(10, 40);
-        IntInterval interval2 = new IntInterval(5, 20);
-        TreeSet<IntInterval> intervalList = new TreeSet<IntInterval>();
-        intervalList.add(interval1);
-        intervalList.add(interval2);
-
-        HttpDiskCompositeDataSource.addNewInterval(intervalList, 7, 43);
-
-        assertThat(intervalList).containsOnly(interval1, interval2);
-    }
-
-    @Test
-    public void addNewInterval_withNonExistingIntervals_shouldAddNewInterval() {
-        // The existing intervals here are from 10 to 100 and 150 to 250. 7 to 50 is not part of
-        // that, even though the first interval already has part of that covered, 7 to 9 is not
-        // covered by anything, so this interval should be added.
-        IntInterval interval1 = new IntInterval(10, 90);
-        IntInterval interval2 = new IntInterval(150, 100);
-        TreeSet<IntInterval> intervalList = new TreeSet<IntInterval>();
-        intervalList.add(interval1);
-        intervalList.add(interval2);
-
-        HttpDiskCompositeDataSource.addNewInterval(intervalList, 7, 43);
-
-        assertThat(intervalList).containsExactly(new IntInterval(7, 43), interval1, interval2);
-    }
-
-    @Test
-    public void getFirstContiguousPointAfter_withNoIntervals_shouldReturnInput() {
-        TreeSet<IntInterval> intervalList = new TreeSet<IntInterval>();
-        int startPoint = 12345;
-
-        int firstContiguousPointAfterStartPoint = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(
-                startPoint, intervalList);
-
-        assertThat(firstContiguousPointAfterStartPoint).isEqualTo(startPoint);
-    }
-
-    @Test
-    @SuppressWarnings("unchecked")
-    public void getFirstContiguousPointAfter_withMultipleConnectedAndDisconnectedIntervals_shouldReturnFirstContiguousPointAfterStartPoint() {
-        IntInterval[] intervalArray = new IntInterval[8];
-
-        // Goes from 500 to 1250
-        intervalArray[0] = new IntInterval(500, 200);
-        intervalArray[1] = new IntInterval(700, 300);
-        intervalArray[2] = new IntInterval(1000, 250);
-
-        // Separate section that goes from 2000 to 3000
-        intervalArray[3] = new IntInterval(2000, 1000);
-
-        // Goes from 3500 to 4500 but with various sections that overlap
-        intervalArray[4] = new IntInterval(3500, 750);
-        intervalArray[5] = new IntInterval(4000, 100);
-        intervalArray[6] = new IntInterval(4050, 200);
-        intervalArray[7] = new IntInterval(3999, 501);
-
-        TreeSet<IntInterval> intervalList = new TreeSet(Arrays.asList(intervalArray));
-
-        // Before the first section
-        int result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(499, intervalList);
-        assertThat(result).isEqualTo(499);
-
-        // At the start of the first section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(500, intervalList);
-        assertThat(result).isEqualTo(1250);
-
-        // In the first section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(567, intervalList);
-        assertThat(result).isEqualTo(1250);
-
-        // Between the first section and the second section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(1337, intervalList);
-        assertThat(result).isEqualTo(1337);
-
-        // In the second section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(2222, intervalList);
-        assertThat(result).isEqualTo(3000);
-
-        // Between the second section and the third section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(3232, intervalList);
-        assertThat(result).isEqualTo(3232);
-
-        // At the start of the third section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(3500, intervalList);
-        assertThat(result).isEqualTo(4500);
-
-        // In the third section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(3789, intervalList);
-        assertThat(result).isEqualTo(4500);
-
-        // After the third section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(4501, intervalList);
-        assertThat(result).isEqualTo(4501);
-    }
-
-    /**
-     * Creates a byte array and fills it with random data. Use the seed offset to generate
-     * subsequent random byte arrays that are not the same random byte array.
-     *
-     * @param length     How many bytes in the byte array
-     * @param seedOffset Offsets the seed so that different, random byte arrays can be created
-     * @return byte array of specified length filled with random bytes\
-     */
-    private byte[] generateRandomByteArray(int length, int seedOffset) {
-        byte[] byteArray = new byte[length];
-        new Random(BASE_SEED + seedOffset).nextBytes(byteArray);
-        return byteArray;
-    }
-
-    /**
-     * Sets up the mock http data source to return the specified bytes when queried.
-     *
-     * @param bytesFromNetwork   The bytes to write to the buffer.
-     * @param mockHttpDataSource The mock object that does this.
-     * @throws HttpDataSource.HttpDataSourceException This should never happen since this is a
-     *                                                mock.
-     */
-    private static void setUpMockHttpDataSourceToReturnBytesFromNetwork(
-            final byte[] bytesFromNetwork,
-            final HttpDataSource mockHttpDataSource) throws HttpDataSource.HttpDataSourceException {
-        when(mockHttpDataSource.read(any(byte[].class), anyInt(), anyInt())).thenAnswer(
-                new Answer<Long>() {
-                    @Override
-                    public Long answer(final InvocationOnMock invocation) throws Throwable {
-                        final Object[] args = invocation.getArguments();
-                        final byte[] byteBuffer = (byte[]) args[0];
-                        final Integer offset = (Integer) args[1];
-                        final Integer length = (Integer) args[2];
-                        System.arraycopy(bytesFromNetwork, 0, byteBuffer, offset, length);
-                        return (long) length;
-                    }
-                });
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java
index 47c05e36..b12d8a9b 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -10,7 +10,6 @@
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.VisibilityTracker;
 import com.mopub.common.VisibilityTrackerTest;
-import com.mopub.mobileads.BuildConfig;
 
 import org.fest.util.Lists;
 import org.junit.Before;
@@ -18,7 +17,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowSystemClock;
 
 import java.util.HashMap;
@@ -33,7 +31,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class ImpressionTrackerTest {
     private ImpressionTracker subject;
     private TimestampWrapper<ImpressionInterface> timeStampWrapper;
@@ -68,7 +65,7 @@ public void setUp() {
         when(impressionInterface2.getImpressionMinVisiblePx()).thenReturn(null);
 
         // XXX We need this to ensure that our SystemClock starts
-        ShadowSystemClock.uptimeMillis();
+        ShadowSystemClock.currentTimeMillis();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MediaLayoutTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MediaLayoutTest.java
index b83cb108..35ae63d7 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MediaLayoutTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MediaLayoutTest.java
@@ -1,30 +1,28 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
 package com.mopub.nativeads;
 
 import android.annotation.SuppressLint;
+import android.app.Activity;
 import android.content.Context;
 import android.view.View.MeasureSpec;
 import android.view.ViewGroup;
 import android.widget.RelativeLayout;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
+import org.robolectric.Robolectric;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MediaLayoutTest {
 
     MediaLayout spySubject;
@@ -32,7 +30,7 @@
 
     @Before
     public void setup() {
-        context = ShadowApplication.getInstance().getApplicationContext();
+        context = Robolectric.buildActivity(Activity.class).create().get();
         spySubject = spy(new MediaLayout(context));
         spySubject.setLayoutParams(new RelativeLayout.LayoutParams(300, 300));
         when(spySubject.getMeasuredHeight()).thenReturn(300);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
index c3367dcc..d3a076b3 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -17,7 +17,6 @@
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.VisibilityTracker;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -28,7 +27,6 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -41,7 +39,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MoPubAdAdapterTest {
     private static final int AD_POSITION = 1;
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCacheTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCacheTest.java
new file mode 100644
index 00000000..2a628a3a
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCacheTest.java
@@ -0,0 +1,53 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.nativeads;
+
+import android.content.Context;
+
+import com.google.android.exoplayer2.upstream.cache.Cache;
+import com.google.android.exoplayer2.upstream.cache.SimpleCache;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.io.File;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+public class MoPubCacheTest {
+    private static final String BASE_CACHE_DIR = "/some_cache_dir";
+
+    private Context mockContext;
+
+    @Before
+    public void setUp() {
+        mockContext = mock(Context.class);
+        when(mockContext.getApplicationContext()).thenReturn(mockContext);
+    }
+
+    @Test
+    public void getCacheInstance_whenCacheDirIsNull_shouldReturnNull() {
+        when(mockContext.getCacheDir()).thenReturn(null);
+
+        Cache cache = MoPubCache.getCacheInstance(mockContext);
+        assertThat(cache).isNull();
+    }
+
+    @Test
+    public void getCacheInstance_whenCacheDirIsNonNull_shouldReturnSimpleCacheInstance() {
+        when(mockContext.getCacheDir()).thenReturn(new File(BASE_CACHE_DIR));
+
+        Cache cache = MoPubCache.getCacheInstance(mockContext);
+        assertThat(cache).isInstanceOf(SimpleCache.class);
+    }
+
+    @After
+    public void tearDown() {
+        MoPubCache.resetInstance();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubClientPositioningTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubClientPositioningTest.java
index 399d7865..1b3211a7 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubClientPositioningTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubClientPositioningTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -6,20 +6,17 @@
 
 import com.mopub.common.Preconditions.NoThrow;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
 
 import org.fest.util.Lists;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 import static com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning.NO_REPEAT;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MoPubClientPositioningTest {
 
     private MoPubClientPositioning subject;
@@ -93,4 +90,4 @@ public void setInvalidRepeatingInterval_releaseMode_shouldClearRepeatingInterval
 
         assertThat(subject.getRepeatingInterval()).isEqualTo(NO_REPEAT);
     }
-}
\ No newline at end of file
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
index f0fa5cd7..31dea4dd 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -8,7 +8,6 @@
 
 import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.nativeads.MoPubCustomEventNative.MoPubStaticNativeAd;
 
 import org.json.JSONArray;
@@ -18,7 +17,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import java.util.HashMap;
 
@@ -28,7 +26,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MoPubCustomEventNativeTest {
 
     private MoPubCustomEventNative subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java
index 48fa53fd..b068a9e4 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -8,7 +8,6 @@
 
 import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.nativeads.MoPubCustomEventVideoNative.VideoResponseHeaders;
 import com.mopub.network.MaxWidthImageLoader;
 import com.mopub.network.Networking;
@@ -21,7 +20,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import java.util.HashMap;
 
@@ -34,7 +32,6 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MoPubCustomEventVideoNativeTest {
 
     private MoPubCustomEventVideoNative subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
index 1f50bb52..1246a4f9 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -14,7 +14,6 @@
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.Reflection;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.MoPubErrorCode;
 import com.mopub.nativeads.MoPubNative.MoPubNativeNetworkListener;
 import com.mopub.network.MoPubNetworkError;
@@ -34,7 +33,6 @@
 import org.robolectric.Robolectric;
 import org.robolectric.Shadows;
 import org.robolectric.android.util.concurrent.RoboExecutorService;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLog;
 import org.robolectric.shadows.ShadowLooper;
 
@@ -57,7 +55,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MoPubNativeTest {
     private MoPubNative subject;
     private MethodBuilder methodBuilder;
@@ -73,7 +70,9 @@
     public void setup() throws Exception {
         context = Robolectric.buildActivity(Activity.class).create().get();
         AsyncTasks.setExecutor(new RoboExecutorService());
-        MoPub.initializeSdk(context, new SdkConfiguration.Builder("adunit").build(), null);
+        MoPub.initializeSdk(context, new SdkConfiguration.Builder("adunit")
+                .withLogLevel(MoPubLog.LogLevel.DEBUG)
+                .build(), null);
         ShadowLooper.runUiThreadTasks();
         Reflection.getPrivateField(MoPub.class, "sSdkInitialized").setBoolean(null, true);
 
@@ -173,7 +172,7 @@ public void onAdError_whenNotMoPubError_shouldNotifyListener() {
 
     @Test
     public void onAdError_withVolleyErrorWarmingUp_shouldLogMoPubErrorCodeWarmup_shouldNotifyListener() {
-        MoPubLog.setSdkHandlerLevel(Level.ALL);
+        MoPubLog.setLogLevel(MoPubLog.LogLevel.DEBUG);
 
         subject.onAdError(new MoPubNetworkError(MoPubNetworkError.Reason.WARMING_UP));
 
@@ -181,13 +180,15 @@ public void onAdError_withVolleyErrorWarmingUp_shouldLogMoPubErrorCodeWarmup_sho
         final ShadowLog.LogItem latestLogMessage = allLogMessages.get(allLogMessages.size() - 1);
 
         // All log messages end with a newline character.
-        assertThat(latestLogMessage.msg.trim()).isEqualTo(MoPubErrorCode.WARMUP.toString());
+        assertThat(latestLogMessage.msg.trim()).isEqualTo(
+                "[com.mopub.nativeads.MoPubNativeTest][onAdError_withVolleyErrorWarmingUp_shouldLogMoPubErrorCodeWarmup_shouldNotifyListener] Ad Log - "
+                + MoPubErrorCode.WARMUP.toString());
         verify(mockNetworkListener).onNativeFail(eq(NativeErrorCode.EMPTY_AD_RESPONSE));
     }
 
     @Test
     public void onAdError_withNoConnection_shouldLogMoPubErrorCodeNoConnection_shouldNotifyListener() {
-        MoPubLog.setSdkHandlerLevel(Level.ALL);
+        MoPubLog.setLogLevel(MoPubLog.LogLevel.DEBUG);
         Shadows.shadowOf(context).denyPermissions(INTERNET);
 
         subject.onAdError(new NoConnectionError());
@@ -196,7 +197,9 @@ public void onAdError_withNoConnection_shouldLogMoPubErrorCodeNoConnection_shoul
         final ShadowLog.LogItem latestLogMessage = allLogMessages.get(allLogMessages.size() - 1);
 
         // All log messages end with a newline character.
-        assertThat(latestLogMessage.msg.trim()).isEqualTo(MoPubErrorCode.NO_CONNECTION.toString());
+        assertThat(latestLogMessage.msg.trim()).isEqualTo(
+                "[com.mopub.nativeads.MoPubNativeTest][onAdError_withNoConnection_shouldLogMoPubErrorCodeNoConnection_shouldNotifyListener] Ad Log - "
+                + MoPubErrorCode.NO_CONNECTION.toString());
         verify(mockNetworkListener).onNativeFail(eq(NativeErrorCode.CONNECTION_ERROR));
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubRecyclerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubRecyclerAdapterTest.java
index b40997fd..5a34c303 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubRecyclerAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubRecyclerAdapterTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -13,7 +13,6 @@
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.VisibilityTracker;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -22,7 +21,6 @@
 import org.mockito.Mock;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
-import org.robolectric.annotation.Config;
 
 import java.util.HashSet;
 import java.util.Set;
@@ -44,7 +42,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MoPubRecyclerAdapterTest {
     private static final int AD_POSITION_1 = 1;
     private static final int AD_POSITION_7 = 7;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdRendererTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdRendererTest.java
index 74357ecd..a0ad5d53 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdRendererTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdRendererTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -13,7 +13,6 @@
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Utils;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.nativeads.MoPubCustomEventNative.MoPubStaticNativeAd;
 import com.mopub.network.MaxWidthImageLoader;
 import com.mopub.network.MoPubRequestQueue;
@@ -26,7 +25,6 @@
 import org.junit.rules.ExpectedException;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.anyString;
@@ -37,10 +35,8 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MoPubStaticNativeAdRendererTest {
     private MoPubStaticNativeAdRenderer subject;
     private StaticNativeAd mStaticNativeAd;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
index 3fcddac2..8b7f1773 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -9,7 +9,6 @@
 import android.view.View;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.nativeads.BaseNativeAd.NativeEventListener;
 import com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
 import com.mopub.nativeads.MoPubCustomEventNative.MoPubStaticNativeAd;
@@ -53,7 +52,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows={MoPubShadowBitmap.class, MoPubShadowDisplay.class})
+@Config(shadows={MoPubShadowBitmap.class, MoPubShadowDisplay.class})
 public class MoPubStaticNativeAdTest {
 
     private MoPubStaticNativeAd subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java
index 59112e1b..b5a1f001 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -9,7 +9,6 @@
 import android.view.ViewGroup;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
 import com.mopub.nativeads.PositioningSource.PositioningListener;
 
@@ -20,7 +19,6 @@
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -37,7 +35,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MoPubStreamAdPlacerTest {
     private Activity activity;
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdRendererTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdRendererTest.java
index 54e4543b..97da540c 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdRendererTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdRendererTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -13,7 +13,6 @@
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Utils;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.network.MaxWidthImageLoader;
 import com.mopub.network.MoPubRequestQueue;
 import com.mopub.network.Networking;
@@ -25,7 +24,6 @@
 import org.junit.rules.ExpectedException;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.anyString;
@@ -36,10 +34,8 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MoPubVideoNativeAdRendererTest {
     private MoPubVideoNativeAdRenderer subject;
     private VideoNativeAd videoNativeAd;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
index 5842a201..bb4a61d0 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -20,7 +20,6 @@
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.VisibilityTracker;
 import com.mopub.mobileads.BaseVideoPlayerActivity;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.MraidVideoPlayerActivity;
 import com.mopub.mobileads.VastManager;
 import com.mopub.mobileads.VastTracker;
@@ -53,7 +52,6 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowApplication;
 
 import java.util.ArrayList;
@@ -76,7 +74,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MoPubVideoNativeAdTest {
 
     private MoPubVideoNativeAd subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
index 7611c852..573f5869 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -8,13 +8,11 @@
 import android.os.SystemClock;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowSystemClock;
 
 import java.util.ArrayList;
@@ -30,7 +28,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class NativeAdSourceTest {
     private NativeAdSource subject;
     private ArrayList<TimestampWrapper<NativeAd>> nativeAdCache;
@@ -59,7 +56,7 @@ public void setUp() {
         maxRetries = 5;
 
         // XXX We need this to ensure that our SystemClock starts
-        ShadowSystemClock.uptimeMillis();
+        ShadowSystemClock.currentTimeMillis();
 
         ArrayList<MoPubAdRenderer> moPubAdRenderers = new ArrayList<MoPubAdRenderer>();
         moPubAdRenderers.add(mockRenderer);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdTest.java
index b66536f3..9c4001ab 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -9,7 +9,6 @@
 import android.view.ViewGroup;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.nativeads.BaseNativeAd.NativeEventListener;
 import com.mopub.network.MoPubRequestQueue;
 import com.mopub.network.Networking;
@@ -19,7 +18,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import java.util.Arrays;
 import java.util.Collections;
@@ -39,7 +37,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class NativeAdTest {
 
     private NativeAd subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
index 81d36c93..4534ee5d 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -9,14 +9,12 @@
 import android.view.ViewGroup;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -24,7 +22,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class NativeAdViewHelperTest {
     private Activity activity;
     @Mock private View mockView;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeClickHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeClickHandlerTest.java
index 0c0ffadd..30de9b49 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeClickHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeClickHandlerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -11,14 +11,12 @@
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Utils;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowApplication;
 
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -27,7 +25,6 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class NativeClickHandlerTest {
 
     private NativeClickHandler subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java
index b6ae889b..c9917fec 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -11,6 +11,7 @@
 import android.graphics.Paint;
 import android.graphics.RectF;
 import android.graphics.SurfaceTexture;
+import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.GradientDrawable;
 import android.support.annotation.NonNull;
 import android.view.TextureView;
@@ -22,7 +23,6 @@
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Dips;
 import com.mopub.common.util.Drawables;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.VastVideoProgressBarWidget;
 import com.mopub.mobileads.resource.CloseButtonDrawable;
 import com.mopub.mobileads.resource.CtaButtonDrawable;
@@ -33,12 +33,12 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
 import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.rule.PowerMockRule;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -52,7 +52,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 @PowerMockIgnore({ "org.mockito.*", "org.robolectric.*", "android.*", "org.json.*"})
 @PrepareForTest(NativeImageHelper.class)
 public class NativeFullScreenVideoViewTest {
@@ -300,8 +299,10 @@ public void constructor_shouldAddCloseControlToLayout() throws Exception {
     public void setPrivacyInformationIconImageUrl_withNullUrl_shouldUseDefaultIcon() {
         subject.setPrivacyInformationIconImageUrl(null);
 
-        verify(spyPrivacyInformationIcon).setImageDrawable(
-                Drawables.NATIVE_PRIVACY_INFORMATION_ICON.createDrawable(context));
+        ArgumentCaptor<BitmapDrawable> argumentCaptor = ArgumentCaptor.forClass(BitmapDrawable.class);
+        verify(spyPrivacyInformationIcon).setImageDrawable(argumentCaptor.capture());
+        assertThat(argumentCaptor.getValue().getBitmap()).isEqualTo(
+                Drawables.NATIVE_PRIVACY_INFORMATION_ICON.getBitmap());
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
index 7e528afe..f4516fd4 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -58,7 +58,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {MoPubShadowTelephonyManager.class, MoPubShadowConnectivityManager.class})
+@Config(shadows = {MoPubShadowTelephonyManager.class, MoPubShadowConnectivityManager.class})
 public class NativeUrlGeneratorTest {
     private static final String AD_UNIT_ID = "1234";
     private static final int TEST_SCREEN_WIDTH = 320;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java
index 7af0cb68..f9cb4fdd 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -28,7 +28,6 @@
 import com.google.android.exoplayer2.trackselection.TrackSelector;
 import com.google.android.exoplayer2.video.MediaCodecVideoRenderer;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.VastTracker;
 import com.mopub.mobileads.VastVideoConfig;
 import com.mopub.nativeads.NativeVideoController.Listener;
@@ -49,7 +48,6 @@
 import org.mockito.Mock;
 import org.mockito.Mockito;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -79,7 +77,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class NativeVideoControllerTest {
 
     private NativeVideoController subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
index 195db8cd..bb9a9d0d 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -18,7 +18,6 @@
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BaseVideoViewController.BaseVideoViewControllerListener;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.VastVideoConfig;
 import com.mopub.mobileads.resource.CtaButtonDrawable;
 import com.mopub.nativeads.MoPubCustomEventVideoNative.MoPubVideoNativeAd;
@@ -33,7 +32,6 @@
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowApplication;
 
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -46,7 +44,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class NativeVideoViewControllerTest {
 
     private NativeVideoViewController subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/PlacementDataTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/PlacementDataTest.java
index f64e799a..ec64121e 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/PlacementDataTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/PlacementDataTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -7,13 +7,11 @@
 package com.mopub.nativeads;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -25,7 +23,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class PlacementDataTest {
     private PlacementData noAds;
     private PlacementData adAt0;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java
index fbb8194b..6dc79626 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -7,7 +7,6 @@
 import android.app.Activity;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.network.MoPubNetworkError;
 import com.mopub.volley.NetworkResponse;
 import com.mopub.volley.Response;
@@ -19,7 +18,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import java.util.TreeMap;
 
@@ -27,7 +25,6 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class PositioningRequestTest {
 
     String url = "https://example.com";
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
index 8dcdf12f..bc7d68ef 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -11,7 +11,6 @@
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.MoPubErrorCode;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
 import com.mopub.nativeads.PositioningSource.PositioningListener;
@@ -28,7 +27,6 @@
 import org.mockito.Captor;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLog;
 
 import java.util.HashSet;
@@ -47,7 +45,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class ServerPositioningSourceTest {
     @Mock PositioningListener mockPositioningListener;
     @Captor ArgumentCaptor<PositioningRequest> positionRequestCaptor;
@@ -68,6 +65,7 @@ public void setUp() {
         subject = new ServerPositioningSource(spyActivity);
         setupClientMetadata();
         Networking.setRequestQueueForTesting(mockRequestQueue);
+//        MoPubLog.setLogLevel(MoPubLog.LogLevel.DEBUG);
     }
 
     private void setupClientMetadata() {
@@ -172,7 +170,7 @@ public void loadPositions_thenFailAfterMaxRetryTime_shouldCallFailureHandler() {
 
     @Test
     public void loadPositions_withNoConnection_shouldLogMoPubErrorCodeNoConnection_shouldCallFailureHandler() {
-        MoPubLog.setSdkHandlerLevel(Level.ALL);
+        MoPubLog.setLogLevel(MoPubLog.LogLevel.DEBUG);
 
         when(mockContext.checkCallingOrSelfPermission(anyString()))
                 .thenReturn(PackageManager.PERMISSION_DENIED);
@@ -196,6 +194,7 @@ public void loadPositions_withNoConnection_shouldLogMoPubErrorCodeNoConnection_s
             allLogMessages.add(logItem.msg.trim());
         }
 
-        assertThat(allLogMessages).contains(MoPubErrorCode.NO_CONNECTION.toString());
+        assertThat(allLogMessages).contains("[com.mopub.nativeads.ServerPositioningSource]" +
+                "[access$300] SDK Log - Error downloading positioning information");
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java
index bd21e691..f4e54ad1 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java
@@ -1,21 +1,18 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
 package com.mopub.nativeads;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class StaticNativeAdTest {
 
     private StaticNativeAd subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeViewHolderTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeViewHolderTest.java
index cabbb783..95565758 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeViewHolderTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeViewHolderTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -14,7 +14,6 @@
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Utils;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.network.MaxWidthImageLoader;
 import com.mopub.network.MoPubRequestQueue;
 import com.mopub.network.Networking;
@@ -27,12 +26,10 @@
 import org.mockito.Captor;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class StaticNativeViewHolderTest {
     private Context context;
     private RelativeLayout relativeLayout;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/VideoNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/VideoNativeAdTest.java
index 0d6734dc..f22f8aae 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/VideoNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/VideoNativeAdTest.java
@@ -1,21 +1,18 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
 package com.mopub.nativeads;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class VideoNativeAdTest {
 
     private VideoNativeAd subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
index 99860ed3..f86c3f2e 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
@@ -1,22 +1,19 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
 package com.mopub.nativeads.factories;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.nativeads.CustomEventNative;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 
-@Config(constants = BuildConfig.class)
 @RunWith(SdkTestRunner.class)
 public class CustomEventNativeFactoryTest {
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowBitmap.java b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowBitmap.java
index ad212ad1..8f5907bc 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowBitmap.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowBitmap.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowDisplay.java b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowDisplay.java
index cb434f04..3ebd9a5a 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowDisplay.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowDisplay.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java
index 1354ca69..c5841780 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/network/AdLoaderTest.java b/mopub-sdk/src/test/java/com/mopub/network/AdLoaderTest.java
index a71b9a17..a618c13c 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/AdLoaderTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/AdLoaderTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -10,7 +10,6 @@
 import com.mopub.common.AdFormat;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.ResponseHeader;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.volley.NetworkResponse;
 import com.mopub.volley.Request;
 import com.mopub.volley.RequestQueue;
@@ -25,7 +24,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowLooper;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
@@ -35,13 +34,15 @@
 
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class AdLoaderTest {
     private static final String CONTENT_TYPE = "text/html; charset=UTF-8";
     private static final String IMPTRACKER_URL = "imptracker_url";
@@ -78,6 +79,7 @@ public void setup() {
 
     @After
     public void teardown() {
+        RequestRateTrackerTest.clearRequestRateTracker();
     }
 
     @Test
@@ -130,7 +132,47 @@ public void loadNextAd_whenRunning_returnsOldRequest() throws NoSuchFieldExcepti
     }
 
     @Test
-    public void loadNextAd_whenFailed_callsHandler_OnErrorresponse() throws NoSuchFieldException, IllegalAccessException {
+    public void loadNextAd_firstCall_whenBlockedByRequestRateLimit_makesNoReqeust_returnsNull() {
+        RequestRateTrackerTest.prepareRequestRateTracker(adUnitId, 100, "reason");
+
+        Request<?> request = subject.loadNextAd(null);
+
+        assertNull(request);
+        verify(mockListener).onErrorResponse(any(VolleyError.class));
+        RequestQueue requestQueue = Networking.getRequestQueue();
+        verify(requestQueue, never()).add(any(Request.class));
+    }
+
+    @Test
+    public void twoAdResponseWaterfall_whenBlockedAfterFirstRequest_shouldNotBlockSecondRequest()
+            throws JSONException, MoPubNetworkError, NoSuchFieldException, IllegalAccessException {
+        JSONObject adResponseJson1 = createAdResponseJson("trackingUrl1", "content_1");
+        JSONObject adResponseJson2 = createAdResponseJson("trackingUrl2", "content_2");
+        byte[] body = createResponseBody(null, new JSONObject[]{adResponseJson1, adResponseJson2});
+        NetworkResponse testResponse = new NetworkResponse(200, body, headers, false);
+        MultiAdResponse multiAdResponse = new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        // set subject MultiAdResponse
+        Field field = getPrivateField("mMultiAdResponse");
+        field.set(subject, multiAdResponse);
+
+        // validation
+        assertThat(subject.hasMoreAds()).isTrue();
+        subject.loadNextAd(null);
+        verify(mockListener, times(1)).onSuccess(any(AdResponse.class));
+        assertThat(subject.hasMoreAds()).isTrue();
+
+        RequestRateTrackerTest.prepareRequestRateTracker(adUnitId, 100, "reason");
+        Request<?> request = subject.loadNextAd(UNSPECIFIED);
+
+        assertNotNull(request);
+        verify(mockListener, times(2)).onSuccess(any(AdResponse.class));
+        verify(mockListener, never()).onErrorResponse(any(VolleyError.class));
+        assertThat(subject.hasMoreAds()).isFalse();
+    }
+
+    @Test
+    public void loadNextAd_whenFailed_callsHandler_OnErrorResponse() throws NoSuchFieldException, IllegalAccessException {
         // set AdLoader.failed=true;
         Field field = getPrivateField("mFailed");
         field.setBoolean(subject, true);
diff --git a/mopub-sdk/src/test/java/com/mopub/network/ContentDownloadAnalyticsTest.java b/mopub-sdk/src/test/java/com/mopub/network/ContentDownloadAnalyticsTest.java
index 91341329..abe5e912 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/ContentDownloadAnalyticsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/ContentDownloadAnalyticsTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -7,7 +7,6 @@
 import android.app.Activity;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.MoPubErrorCode;
 
 import org.junit.Before;
@@ -16,11 +15,9 @@
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import java.util.List;
 import java.util.Arrays;
-import java.util.Collections;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -30,7 +27,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class ContentDownloadAnalyticsTest {
     private static final List<String> AFTER_LOAD_URLS =
             Arrays.asList("https://ads.mopub.com/m/load?load_duration_ms=%%LOAD_DURATION_MS%%&load_result=%%LOAD_RESULT%%");
diff --git a/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java
index d545d4c3..58df7eaf 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -11,7 +11,6 @@
 import android.support.annotation.Nullable;
 
 import com.mopub.TestSdkHelper;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.After;
 import org.junit.Before;
@@ -21,7 +20,6 @@
 import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
-import org.robolectric.annotation.Config;
 
 import java.net.InetAddress;
 import java.net.Socket;
@@ -44,7 +42,6 @@
 
 @PrepareForTest(InetAddressUtils.class)
 @RunWith(PowerMockRunner.class)
-@Config(constants = BuildConfig.class)
 public class CustomSSLSocketFactoryTest {
 
     private CustomSSLSocketFactory subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java
index d811ba59..3e83f318 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -6,19 +6,16 @@
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.ResponseHeader;
-import com.mopub.mobileads.BuildConfig;
 
 import org.json.JSONException;
 import org.json.JSONObject;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class HeaderUtilsTest {
     private JSONObject subject;
 
diff --git a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
index 6b689455..a232e82b 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestUtilsTest.java
index 548070ee..a6f3b179 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestUtilsTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -9,14 +9,12 @@
 
 import com.mopub.common.Constants;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.volley.Request;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -24,7 +22,6 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MoPubRequestUtilsTest {
 
     private Context context;
@@ -126,6 +123,14 @@ public void convertQueryToMap_withNoQueryParams_shouldReturnEmptyMap() {
         assertThat(result).isEmpty();
     }
 
+    @Test
+    public void convertQueryToMap_withBadUriString_shouldReturnEmptyMap() {
+        final Map<String, String> result = MoPubRequestUtils.convertQueryToMap(context,
+                "https://*#&(%*$&");
+
+        assertThat(result).isEmpty();
+    }
+
     @Test
     public void generateBodyFromParams_withParamsMap_withMoPubUrl_shouldGenerateJsonString() {
         final String result = MoPubRequestUtils.generateBodyFromParams(params,
diff --git a/mopub-sdk/src/test/java/com/mopub/network/MultiAdRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/MultiAdRequestTest.java
index 17b7f414..e1c61482 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/MultiAdRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/MultiAdRequestTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -11,7 +11,6 @@
 import com.mopub.common.MoPub;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.ResponseHeader;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.volley.NetworkResponse;
 import com.mopub.volley.Response;
 
@@ -24,7 +23,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import java.util.Collections;
 import java.util.HashMap;
@@ -36,7 +34,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MultiAdRequestTest {
     private static final String ACCEPT_LANGUAGE = "accept-language";
 
diff --git a/mopub-sdk/src/test/java/com/mopub/network/MultiAdResponseTest.java b/mopub-sdk/src/test/java/com/mopub/network/MultiAdResponseTest.java
index 8c8c955d..8270b4db 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/MultiAdResponseTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/MultiAdResponseTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -59,9 +59,9 @@
 import com.mopub.common.Constants;
 import com.mopub.common.DataKeys;
 import com.mopub.common.MoPub;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.ResponseHeader;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.HtmlBanner;
 import com.mopub.mobileads.MoPubRewardedVideo;
 import com.mopub.nativeads.MoPubCustomEventNative;
@@ -77,7 +77,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import java.util.Arrays;
 import java.util.Collections;
@@ -89,12 +88,12 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class MultiAdResponseTest {
     private static final String CONTENT_TYPE = "text/html; charset=UTF-8";
     private static final String FAIL_URL = "fail_url";
@@ -159,6 +158,7 @@ public void setup() throws JSONException {
 
     @After
     public void teardown() {
+        RequestRateTrackerTest.clearRequestRateTracker();
         Locale.setDefault(Locale.US);
     }
 
@@ -304,6 +304,70 @@ public void constructor_withResponseWarmup_shouldThrowException() throws JSONExc
         assert false;
     }
 
+    @Test
+    public void constructor_withResponseWarmup_withRateLimitSet_shouldSetBackoffTime() throws JSONException {
+        JSONObject jsonClear = createWarmupAdResponse();
+        JSONObject body = createJsonBody(FAIL_URL, jsonClear);
+        addBackoffParameters(body, 50, "reason");
+        NetworkResponse testResponse = new NetworkResponse(body.toString().getBytes());
+
+        try {
+            new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+        } catch (Exception ignored) {
+        }
+
+        RequestRateTracker.TimeRecord record = RequestRateTracker.getInstance().getRecordForAdUnit(adUnitId);
+        assertNotNull(record);
+        assertEquals(50, record.mBlockIntervalMs);
+        assertEquals("reason", record.mReason);
+    }
+
+    @Test
+    public void constructor_withResponseClear_withRateLimitSet_shouldSetBackoffTime() throws JSONException {
+        JSONObject jsonClear = createClearAdResponse();
+        JSONObject body = createJsonBody(FAIL_URL, jsonClear);
+        addBackoffParameters(body, 50, "reason");
+        NetworkResponse testResponse = new NetworkResponse(body.toString().getBytes());
+
+        try {
+            new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+        } catch (Exception ignored) {
+        }
+
+        RequestRateTracker.TimeRecord record = RequestRateTracker.getInstance().getRecordForAdUnit(adUnitId);
+        assertNotNull(record);
+        assertEquals(50, record.mBlockIntervalMs);
+        assertEquals("reason", record.mReason);
+    }
+
+    @Test
+    public void constructor_withRateLimitSetValue_shouldSetBackoffTimeLimit() throws Exception {
+        JSONObject jsonObject = createJsonBody(FAIL_URL, singleAdResponse);
+        addBackoffParameters(jsonObject, 20, "reason");
+        NetworkResponse testResponse = new NetworkResponse(jsonObject.toString().getBytes());
+
+        new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        RequestRateTracker.TimeRecord record = RequestRateTracker.getInstance().getRecordForAdUnit(adUnitId);
+        assertNotNull(record);
+        assertThat(record.mBlockIntervalMs).isEqualTo(20);
+        assertEquals("reason", record.mReason);
+    }
+
+    @Test
+    public void constructor_withRateLimitSetZero_shouldResetBackoffTimeLimit() throws Exception {
+        RequestRateTrackerTest.prepareRequestRateTracker(adUnitId, 99, "some_reason");
+
+        JSONObject jsonObject = createJsonBody(FAIL_URL, singleAdResponse);
+        addBackoffParameters(jsonObject, 0, "reason");
+        NetworkResponse testResponse = new NetworkResponse(jsonObject.toString().getBytes());
+
+        MultiAdResponse subject = new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        RequestRateTracker.TimeRecord record = RequestRateTracker.getInstance().getRecordForAdUnit(adUnitId);
+        assertNull(record);
+    }
+
     @Test
     public void constructor_withEmptyResponseArray_shouldThrowError_shouldUseDefaultTimeout() throws JSONException {
         byte[] body = createResponseBody(FAIL_URL, null);
@@ -408,6 +472,55 @@ public void constructor_withTwoAdResponses_withEmptyFailUrl_fullTest() throws Mo
         assertTrue(subject.isWaterfallFinished());
     }
 
+    @Test
+    public void constructor_withEnableDebugLoggingTrue_shouldSetDebugLogLevel() throws Exception {
+        // Set log level to none
+        MoPubLog.setLogLevel(MoPubLog.LogLevel.NONE);
+
+        JSONObject body = createJsonBody(FAIL_URL, singleAdResponse);
+        body.put(ResponseHeader.ENABLE_DEBUG_LOGGING.getKey(), 1); // true
+        NetworkResponse testResponse = new NetworkResponse(body.toString().getBytes());
+        MultiAdResponse subject = new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        // Get log level and check that it is now MoPubLog.LogLevel.DEBUG
+        final MoPubLog.LogLevel afterLogLevel = MoPubLog.getLogLevel();
+        assertThat(afterLogLevel).isEqualTo(MoPubLog.LogLevel.DEBUG);
+    }
+
+    @Test
+    public void constructor_withEnableDebugLoggingFalse_shouldNotChangeLogLevel() throws Exception {
+        // Set log level to none and get value from MoPubLog
+        MoPubLog.setLogLevel(MoPubLog.LogLevel.NONE);
+        final MoPubLog.LogLevel beforeLogLevel = MoPubLog.getLogLevel();
+
+        JSONObject body = createJsonBody(FAIL_URL, singleAdResponse);
+        body.put(ResponseHeader.ENABLE_DEBUG_LOGGING.getKey(), 0); // false
+        NetworkResponse testResponse = new NetworkResponse(body.toString().getBytes());
+        MultiAdResponse subject = new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        // Get log level
+        final MoPubLog.LogLevel afterLogLevel = MoPubLog.getLogLevel();
+        assertThat(afterLogLevel).isEqualTo(beforeLogLevel);
+    }
+
+    @Test
+    public void constructor_withoutEnableDebugLogging_shouldNotChangeLogLevel() throws Exception {
+        // Set log level to none and get value from MoPubLog
+        MoPubLog.setLogLevel(MoPubLog.LogLevel.NONE);
+        final MoPubLog.LogLevel beforeLogLevel = MoPubLog.getLogLevel();
+
+        JSONObject body = createJsonBody(FAIL_URL, singleAdResponse);
+        NetworkResponse testResponse = new NetworkResponse(body.toString().getBytes());
+        MultiAdResponse subject = new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        // The response shouldn't have the key in the headers
+        assertFalse(body.has(ResponseHeader.ENABLE_DEBUG_LOGGING.getKey()));
+
+        // Get log level
+        final MoPubLog.LogLevel afterLogLevel = MoPubLog.getLogLevel();
+        assertThat(afterLogLevel).isEqualTo(beforeLogLevel);
+    }
+
     @Test
     public void parseNetworkResponse_forBanner_withoutImpTrackingHeaders_shouldSucceed() throws MoPubNetworkError, JSONException {
         NetworkResponse networkResponse = new NetworkResponse(singleAdResponse.toString().getBytes());
@@ -996,4 +1109,8 @@ private static JSONObject createWarmupAdResponse() throws JSONException {
         return jsonObject;
     }
 
+    private static void addBackoffParameters(final JSONObject response, int time, String reason) throws JSONException {
+        response.put(ResponseHeader.BACKOFF_MS.getKey(), time);
+        response.put(ResponseHeader.BACKOFF_REASON.getKey(), reason);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java b/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
index b8a4149e..0226ace1 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -9,7 +9,6 @@
 import android.os.Build;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.After;
 import org.junit.Before;
@@ -18,13 +17,14 @@
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class NetworkingTest {
     private Activity context;
-    static volatile String sUserAgent;
 
     @Before
     public void setUp() {
@@ -34,7 +34,6 @@ public void setUp() {
     @After
     public void tearDown() {
         Networking.clearForTesting();
-        sUserAgent = null;
     }
 
     @Test
@@ -63,6 +62,27 @@ public void getUserAgent_withSdkVersionGreaterThan16_shouldIncludeAndroid() {
         assertThat(userAgent).containsIgnoringCase("android");
     }
 
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Config(sdk = Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Test
+    public void getUserAgent_withSdkVersionGreaterThan16_whenOnABackgroundThread_shouldReturnHttpAgent() throws InterruptedException {
+        final String[] userAgent = new String[1];
+        final CountDownLatch latch = new CountDownLatch(1);
+        new Thread() {
+            @Override
+            public void run() {
+                userAgent[0] = Networking.getUserAgent(context);
+
+                latch.countDown();
+            }
+        }.start();
+
+        latch.await(500, TimeUnit.MILLISECONDS);
+        // Robolectric's default http agent is null which gets rewritten to an empty String.
+        assertThat(userAgent[0]).isEqualTo("");
+
+    }
+
     @Test
     public void getCachedUserAgent_usesCachedUserAgent() {
         Networking.setUserAgentForTesting("some cached user agent");
diff --git a/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java b/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java
index 6b39aa35..3b3a3441 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -17,7 +17,6 @@
 import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Reflection;
-import com.mopub.mobileads.BuildConfig;
 
 import org.junit.After;
 import org.junit.Before;
@@ -25,7 +24,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -33,7 +31,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class PlayServicesUrlRewriterTest {
 
     @Mock
diff --git a/mopub-sdk/src/test/java/com/mopub/network/RequestRateTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/network/RequestRateTrackerTest.java
new file mode 100644
index 00000000..282dcc8d
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/network/RequestRateTrackerTest.java
@@ -0,0 +1,216 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.network;
+
+import android.os.SystemClock;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.network.RequestRateTracker.TimeRecord;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+
+import java.util.concurrent.TimeUnit;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+
+@RunWith(SdkTestRunner.class)
+public class RequestRateTrackerTest {
+    private static final long DELTA = 100;
+    private static final int BACKOFF_TIME = 88;
+    private static final String AD_UNIT_1 = "ad_unit_1";
+    private static final String AD_UNIT_2 = "ad_unit_2";
+    private static final String REASON = "backoff_reason";
+    private static final String REASON2 = "reason2";
+    private static final String NO_BACKOFF = "no_backoff";
+
+    private RequestRateTracker subject;
+
+    @Before
+    public void setup() {
+        subject = RequestRateTracker.getInstance();
+    }
+
+    @After
+    public void tearDown() {
+        clearRequestRateTracker();
+    }
+
+    @Test
+    public void registerRateLimit_withValidData_shouldSetRateLimitForAdUnit() {
+        long currentTime = SystemClock.uptimeMillis();
+
+        subject.registerRateLimit(AD_UNIT_1, BACKOFF_TIME, REASON);
+
+        TimeRecord record = subject.getRecordForAdUnit(AD_UNIT_1);
+        assertNotNull(record);
+        assertThat(record.mBlockIntervalMs).isEqualTo(BACKOFF_TIME);
+        assertThat(record.mReason).isEqualTo(REASON);
+        assertThat(record.mBlockStartTime - currentTime).isLessThan(DELTA);
+    }
+
+    @Test
+    public void registerRateLimit_withEmptyAdUnit_shouldDoNothing() {
+        long currentTime = SystemClock.uptimeMillis();
+
+        subject.registerRateLimit(AD_UNIT_1, BACKOFF_TIME, REASON);
+        subject.registerRateLimit("", BACKOFF_TIME, REASON);
+
+        assertNull(subject.getRecordForAdUnit(""));
+
+        TimeRecord record = subject.getRecordForAdUnit(AD_UNIT_1);
+        assertNotNull(record);
+        assertThat(record.mBlockIntervalMs).isEqualTo(BACKOFF_TIME);
+        assertThat(record.mReason).isEqualTo(REASON);
+        assertThat(record.mBlockStartTime - currentTime).isLessThan(DELTA);
+    }
+
+    @Test
+    public void registerRateLimit_withNegativeBackoffTime_shouldResetAdUnit() {
+        long currentTime = SystemClock.uptimeMillis();
+
+        subject.registerRateLimit(AD_UNIT_1, BACKOFF_TIME, REASON);
+
+        TimeRecord record = subject.getRecordForAdUnit(AD_UNIT_1);
+        assertNotNull(record);
+        assertThat(record.mBlockIntervalMs).isEqualTo(BACKOFF_TIME);
+        assertThat(record.mReason).isEqualTo(REASON);
+        assertThat(record.mBlockStartTime - currentTime).isLessThan(DELTA);
+
+        subject.registerRateLimit(AD_UNIT_1, -1, REASON2);
+        assertNull(subject.getRecordForAdUnit(AD_UNIT_1));
+    }
+
+    @Test
+    public void registerRateLimit_withTwoAdUnits_shouldStoreBoth() {
+        long currentTime = SystemClock.uptimeMillis();
+
+        subject.registerRateLimit(AD_UNIT_1, BACKOFF_TIME, REASON);
+        subject.registerRateLimit(AD_UNIT_2, 66, REASON2);
+
+        TimeRecord record1 = subject.getRecordForAdUnit(AD_UNIT_1);
+        assertNotNull(record1);
+        assertThat(record1.mBlockIntervalMs).isEqualTo(BACKOFF_TIME);
+        assertThat(record1.mReason).isEqualTo(REASON);
+        assertThat(record1.mBlockStartTime - currentTime).isLessThan(DELTA);
+
+        TimeRecord record2 = subject.getRecordForAdUnit(AD_UNIT_2);
+        assertNotNull(record2);
+        assertThat(record2.mBlockIntervalMs).isEqualTo(66);
+        assertThat(record2.mReason).isEqualTo(REASON2);
+        assertThat(record2.mBlockStartTime - currentTime).isLessThan(DELTA);
+    }
+
+    @Test
+    public void registerRateLimit_withTwoAdUnits_deleteSecondAdUnit_shouldNotDeleteFirst() {
+        long currentTime = SystemClock.uptimeMillis();
+
+        subject.registerRateLimit(AD_UNIT_1, BACKOFF_TIME, REASON);
+        subject.registerRateLimit(AD_UNIT_2, 66, REASON2);
+
+        TimeRecord record1 = subject.getRecordForAdUnit(AD_UNIT_1);
+        assertNotNull(record1);
+        assertThat(record1.mBlockIntervalMs).isEqualTo(BACKOFF_TIME);
+        assertThat(record1.mReason).isEqualTo(REASON);
+        assertThat(record1.mBlockStartTime - currentTime).isLessThan(DELTA);
+
+        TimeRecord record2 = subject.getRecordForAdUnit(AD_UNIT_2);
+        assertNotNull(record2);
+        assertThat(record2.mBlockIntervalMs).isEqualTo(66);
+        assertThat(record2.mReason).isEqualTo(REASON2);
+        assertThat(record2.mBlockStartTime - currentTime).isLessThan(DELTA);
+
+        subject.registerRateLimit(AD_UNIT_2, 0, "");
+
+        assertNull(subject.getRecordForAdUnit(AD_UNIT_2));
+        assertThat(subject.getRecordForAdUnit(AD_UNIT_1)).isEqualTo(record1);
+    }
+
+    @Test
+    public void getRecordForAdUnit_withNullAdUnitId_shouldReturnNull() {
+        subject.registerRateLimit(AD_UNIT_1, BACKOFF_TIME, REASON);
+
+        assertNull(subject.getRecordForAdUnit(null));
+    }
+
+    @Test
+    public void getRecordForAdUnit_withEmptyStringAdUnitId_shouldReturnNull() {
+        subject.registerRateLimit(AD_UNIT_1, BACKOFF_TIME, REASON);
+
+        assertNull(subject.getRecordForAdUnit(""));
+    }
+
+    @Test
+    public void isBlockedByRateLimit_afterRateLimitSetToZero_shouldReturnFalse() {
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isFalse();
+
+        subject.registerRateLimit(AD_UNIT_1, 0, NO_BACKOFF);
+
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isFalse();
+    }
+
+    @Test
+    public void isBlockedByRateLimit_afterRateLimitSet_shouldReturnTrue() {
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isFalse();
+
+        subject.registerRateLimit(AD_UNIT_1, BACKOFF_TIME, REASON);
+
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isTrue();
+    }
+
+    @Test
+    public void isBlockedByRateLimit_afterFailedResponse_afterSuccessResponse_shouldReturnTrue() {
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isFalse();
+
+        subject.registerRateLimit(AD_UNIT_1, BACKOFF_TIME, REASON);
+        subject.registerRateLimit(AD_UNIT_1, 0, NO_BACKOFF);
+
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isFalse();
+    }
+
+    @Test
+    public void isBlockedByRateLimit_withTwoAdUnits_adUnitsDoNotInterfere() {
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isFalse();
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_2)).isFalse();
+
+        subject.registerRateLimit(AD_UNIT_1, BACKOFF_TIME, REASON);
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isTrue();
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_2)).isFalse();
+
+        subject.registerRateLimit(AD_UNIT_2, 0, NO_BACKOFF);
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isTrue();
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_2)).isFalse();
+
+        subject.registerRateLimit(AD_UNIT_1, 0, NO_BACKOFF);
+        subject.registerRateLimit(AD_UNIT_2, BACKOFF_TIME, REASON);
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isFalse();
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_2)).isTrue();
+    }
+
+    @Test
+    public void isBlockedByRateLimit_afterFailedResponse_afterTimeoutExpires_returnsTrue() {
+        subject.registerRateLimit(AD_UNIT_1, BACKOFF_TIME, REASON);
+
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isTrue();
+        Robolectric.getForegroundThreadScheduler().advanceBy(BACKOFF_TIME * 2, TimeUnit.MILLISECONDS);
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isFalse();
+    }
+
+    /**
+     * Utility functions
+     */
+    public static void prepareRequestRateTracker(String adUnitId, Integer backoffMs, String backoffReason) {
+        RequestRateTracker.getInstance().registerRateLimit(adUnitId, backoffMs, backoffReason);
+    }
+
+    public static void clearRequestRateTracker() {
+        RequestRateTracker.setInstance(new RequestRateTracker());
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
index ffd356c6..5a4ecd6e 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
@@ -8,7 +8,6 @@
 import android.content.Context;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.VastErrorCode;
 import com.mopub.mobileads.VastTracker;
 
@@ -17,7 +16,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 
 import java.util.Arrays;
 
@@ -29,7 +27,6 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
 public class TrackingRequestTest {
 
     @Mock
diff --git a/mopub-sdk/src/test/resources/com/mopub/robolectric.properties b/mopub-sdk/src/test/resources/com/mopub/robolectric.properties
index 1daa5925..b9380588 100644
--- a/mopub-sdk/src/test/resources/com/mopub/robolectric.properties
+++ b/mopub-sdk/src/test/resources/com/mopub/robolectric.properties
@@ -1,4 +1,4 @@
-# Copyright 2018 Twitter, Inc.
+# Copyright 2018-2019 Twitter, Inc.
 # Licensed under the MoPub SDK License Agreement
 # http://www.mopub.com/legal/sdk-license-agreement/
 
diff --git a/settings.gradle b/settings.gradle
index 3e096305..b35088b4 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,4 +1,4 @@
-// Copyright 2018 Twitter, Inc.
+// Copyright 2018-2019 Twitter, Inc.
 // Licensed under the MoPub SDK License Agreement
 // http://www.mopub.com/legal/sdk-license-agreement/
 
