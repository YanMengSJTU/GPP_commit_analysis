diff --git a/CHANGELOG.md b/CHANGELOG.md
index ab3fb40f..70dd9e1f 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -12,7 +12,23 @@
   - Enabled deeplinking via custom URIs in ad creatives
   - All `WebView`s are removed from their parents before `destroy()`; fixes [GitHub issue #38](https://github.com/mopub/mopub-android-sdk/issues/38)
   - Removed previously-deprecated `HTML5AdView`
+  
+### Version 1.17.2 (Feb 20, 2014)
 
+  - Updated InMobi custom events to support InMobi SDK 4.0.3+ only
+  - MRAID viewable property now correctly updates on viewability change
+  - `MraidView` properly handles null schemes; fixes [GitHub issue #63](https://github.com/mopub/mopub-android-sdk/pull/63)
+  - Internal disk LRU cache correctly hashes keys when checking for existing files
+  
+### Version 1.17.1 (Jan 23, 2014)
+
+  - Added custom events for Google Play Services. `GooglePlayServicesBanner` and `GooglePlayServicesInterstitial` can be found in the extras directory of the SDK (`/extras/src/com/mopub/mobileads`)
+  - Resolved issues with missing annotations on `addJavascriptInterface` when `targetSdkVersion` is set to API level 17 or above
+  - Updated MoPub sample application to allow in-app text entry of ad unit IDs
+    
+###### Version 1.17.1.1 (Feb 5, 2014)
+  - Fixed bug that caused clicks to not be recorded in the MoPub UI (introduced in 1.17.1)
+  
 ## Version 1.16 (Oct 16, 2013)
 
   - Improved creative controls
diff --git a/README.md b/README.md
index 03468b7c..4465e0d9 100644
--- a/README.md
+++ b/README.md
@@ -27,13 +27,11 @@ Integration instructions are available on the [wiki](https://github.com/mopub/mo
 
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for details.
 
-  - Support for VAST 2.0 video playback via MoPub Marketplace
-    - Short videos (less than 15 seconds) autoplay and and are unskippable
-    - Longer videos autoplay and are skippable after 5 seconds
-  - Updated InMobi custom event support to 4.0.0
-  - Added custom events for video ad network mediation, which can be found in the extras directory of the SDK (`/extras/src/com/mopub/mobileads/`)
-    - Added the `AdColonyInterstitial` custom event
-    - Added the `VungleInterstitial` custom event
+  - Updated InMobi custom events
+  - Bug fixes
+
+### Changes to InMobi Custom Event Integrations
+**Important**: As of version 1.17.2.0, the InMobi custom events packaged with the MoPub SDK only support InMobi version 4.0.3 and up. Follow the instructions [here](https://www.inmobi.com/support/integration/23817448/22051163/android-sdk-integration-guide/) to integrate InMobi version 4.0.3 and up. If you would like to continue to use a prior version of the InMobi SDK, do not update the custom event files and follow the instructions [here](https://www.inmobi.com/support/art/23806682/22095493/mopub-adaptor-android-sdk-integration-guide/) to integrate.
 
 ## Requirements
 
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
new file mode 100644
index 00000000..0a511e0a
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
@@ -0,0 +1,147 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.util.Log;
+
+import java.util.Map;
+
+import com.mopub.mobileads.util.Views;
+
+import com.google.android.gms.ads.*;
+
+import static com.google.android.gms.ads.AdSize.*;
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+
+/*
+ * Compatible with version 4.0.30 of the Google Play Services SDK.
+ */
+class GooglePlayServicesBanner extends CustomEventBanner {
+    /*
+     * These keys are intended for MoPub internal use. Do not modify.
+     */
+    private static final String AD_UNIT_ID_KEY = "adUnitID";
+    private static final String AD_WIDTH_KEY = "adWidth";
+    private static final String AD_HEIGHT_KEY = "adHeight";
+    private static final String LOCATION_KEY = "location";
+
+    private CustomEventBannerListener mBannerListener;
+    private AdView mGoogleAdView;
+
+    @Override
+    protected void loadBanner(
+            Context context,
+            CustomEventBannerListener customEventBannerListener,
+            Map<String, Object> localExtras,
+            Map<String, String> serverExtras) {
+        mBannerListener = customEventBannerListener;
+
+        String adUnitId;
+        int adWidth;
+        int adHeight;
+
+        if (extrasAreValid(serverExtras)) {
+            adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
+            adWidth = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
+            adHeight = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
+        } else {
+            mBannerListener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mGoogleAdView = new AdView(context);
+        mGoogleAdView.setAdListener(new AdViewListener());
+        mGoogleAdView.setAdUnitId(adUnitId);
+
+        AdSize adSize = calculateAdSize(adWidth, adHeight);
+        if (adSize == null) {
+            mBannerListener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mGoogleAdView.setAdSize(adSize);
+
+        AdRequest adRequest = new AdRequest.Builder().build();
+
+        mGoogleAdView.loadAd(adRequest);
+    }
+
+    @Override
+    protected void onInvalidate() {
+        Views.removeFromParent(mGoogleAdView);
+        if (mGoogleAdView != null) {
+            mGoogleAdView.setAdListener(null);
+            mGoogleAdView.destroy();
+        }
+    }
+
+    private boolean extrasAreValid(Map<String, String> serverExtras) {
+        try {
+            Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
+            Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
+        } catch (NumberFormatException e) {
+            return false;
+        }
+
+        return serverExtras.containsKey(AD_UNIT_ID_KEY);
+    }
+
+    private AdSize calculateAdSize(int width, int height) {
+        // Use the smallest AdSize that will properly contain the adView
+        if (width <= BANNER.getWidth() && height <= BANNER.getHeight()) {
+            return BANNER;
+        } else if (width <= MEDIUM_RECTANGLE.getWidth() && height <= MEDIUM_RECTANGLE.getHeight()) {
+            return MEDIUM_RECTANGLE;
+        } else if (width <= FULL_BANNER.getWidth() && height <= FULL_BANNER.getHeight()) {
+            return FULL_BANNER;
+        } else if (width <= LEADERBOARD.getWidth() && height <= LEADERBOARD.getHeight()) {
+            return LEADERBOARD;
+        } else {
+            return null;
+        }
+    }
+
+    private class AdViewListener extends AdListener {
+        /*
+         * Google Play Services AdListener implementation
+         */
+        @Override
+        public void onAdClosed() {
+
+        }
+
+        @Override
+        public void onAdFailedToLoad(int errorCode) {
+            Log.d("MoPub", "Google Play Services banner ad failed to load.");
+            if (mBannerListener != null) {
+                mBannerListener.onBannerFailed(NETWORK_NO_FILL);
+            }
+        }
+
+        @Override
+        public void onAdLeftApplication() {
+
+        }
+
+        @Override
+        public void onAdLoaded() {
+            Log.d("MoPub", "Google Play Services banner ad loaded successfully. Showing ad...");
+            if (mBannerListener != null) {
+                mBannerListener.onBannerLoaded(mGoogleAdView);
+            }
+        }
+
+        @Override
+        public void onAdOpened() {
+            Log.d("MoPub", "Google Play Services banner ad clicked.");
+            if (mBannerListener != null) {
+                mBannerListener.onBannerClicked();
+            }
+        }
+    }
+
+    @Deprecated // for testing
+    AdView getGoogleAdView() {
+        return mGoogleAdView;
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
new file mode 100644
index 00000000..a37b5909
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
@@ -0,0 +1,123 @@
+package com.mopub.mobileads;
+
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+
+import java.util.Map;
+
+import android.content.Context;
+import android.util.Log;
+
+import com.google.android.gms.ads.AdListener;
+import com.google.android.gms.ads.AdRequest;
+import com.google.android.gms.ads.InterstitialAd;
+
+/*
+ * Compatible with version 4.0.30 of the Google Play Services SDK.
+ */
+public class GooglePlayServicesInterstitial extends CustomEventInterstitial {
+    /*
+     * These keys are intended for MoPub internal use. Do not modify.
+     */
+    private static final String AD_UNIT_ID_KEY = "adUnitID";
+    private static final String LOCATION_KEY = "location";
+
+    private CustomEventInterstitialListener mInterstitialListener;
+    private InterstitialAd mGoogleInterstitialAd;
+
+    @Override
+    protected void loadInterstitial(
+            Context context,
+            CustomEventInterstitialListener customEventInterstitialListener,
+            Map<String, Object> localExtras,
+            Map<String, String> serverExtras) {
+        mInterstitialListener = customEventInterstitialListener;
+
+        String adUnitId;
+
+        if (extrasAreValid(serverExtras)) {
+            adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
+        } else {
+            mInterstitialListener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mGoogleInterstitialAd = new InterstitialAd(context);
+        mGoogleInterstitialAd.setAdListener(new InterstitialAdListener());
+        mGoogleInterstitialAd.setAdUnitId(adUnitId);
+
+        AdRequest adRequest = new AdRequest.Builder().build();
+
+        mGoogleInterstitialAd.loadAd(adRequest);
+    }
+
+    @Override
+    protected void showInterstitial() {
+        if (mGoogleInterstitialAd.isLoaded()) {
+            mGoogleInterstitialAd.show();
+        } else {
+            Log.d("MoPub", "Tried to show a Google Play Services interstitial ad before it finished loading. Please try again.");
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mGoogleInterstitialAd != null) {
+            mGoogleInterstitialAd.setAdListener(null);
+        }
+    }
+
+    private boolean extrasAreValid(Map<String, String> serverExtras) {
+        return serverExtras.containsKey(AD_UNIT_ID_KEY);
+    }
+
+    private class InterstitialAdListener extends AdListener {
+        /*
+    	 * Google Play Services AdListener implementation
+    	 */
+        @Override
+        public void onAdClosed() {
+            Log.d("MoPub", "Google Play Services interstitial ad dismissed.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialDismissed();
+            }
+        }
+
+        @Override
+        public void onAdFailedToLoad(int errorCode) {
+            Log.d("MoPub", "Google Play Services interstitial ad failed to load.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialFailed(NETWORK_NO_FILL);
+            }
+        }
+
+        @Override
+        public void onAdLeftApplication() {
+            Log.d("MoPub", "Google Play Services interstitial ad clicked.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialClicked();
+            }
+        }
+
+        @Override
+        public void onAdLoaded() {
+            Log.d("MoPub", "Google Play Services interstitial ad loaded successfully.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialLoaded();
+            }
+        }
+
+        @Override
+        public void onAdOpened() {
+            Log.d("MoPub", "Showing Google Play Services interstitial ad.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialShown();
+            }
+        }
+    }
+
+    @Deprecated // for testing
+    InterstitialAd getGoogleInterstitialAd() {
+        return mGoogleInterstitialAd;
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/InMobiBanner.java b/extras/src/com/mopub/mobileads/InMobiBanner.java
index 61c60bcc..f1248a91 100644
--- a/extras/src/com/mopub/mobileads/InMobiBanner.java
+++ b/extras/src/com/mopub/mobileads/InMobiBanner.java
@@ -4,7 +4,6 @@
 import android.content.Context;
 import com.inmobi.commons.InMobi;
 import com.inmobi.commons.InMobi.LOG_LEVEL;
-import com.inmobi.mediation.adapter.inmobi.InMobiExtras;
 import com.inmobi.monetization.IMBanner;
 import com.inmobi.monetization.IMBannerListener;
 import com.inmobi.monetization.IMErrorCode;
@@ -16,7 +15,7 @@
 import java.util.*;
 
 /*
- * Tested with InMobi SDK 4.0.0
+ * Tested with InMobi SDK 4.1.1
  */
 public class InMobiBanner extends CustomEventBanner implements IMBannerListener {
 
@@ -38,9 +37,9 @@ protected void loadBanner(Context context,
 			mBannerListener.onBannerFailed(null);
 			return;
 		}
-		if (!isAppIntialize) {
+		if (!isAppInitialized) {
 			InMobi.initialize(activity, inMobiAppId);
-			isAppIntialize = true;
+            isAppInitialized = true;
 		}
 
 		/*
@@ -50,12 +49,10 @@ protected void loadBanner(Context context,
 		iMBanner = new IMBanner(activity, inMobiAppId,
 				IMBanner.INMOBI_AD_UNIT_320X50);
 
-		Map<String, String> map = new HashMap<String, String>();
-		InMobiExtras extras = new InMobiExtras();
-		map.put("tp", "c_mopub");
-		map.put("tp-ver", MoPub.SDK_VERSION);
-		extras.setRequestParams(map);
-		iMBanner.addNetworkExtras(extras);
+        Map<String, String> map = new HashMap<String, String>();
+        map.put("tp", "c_mopub");
+        map.put("tp-ver", MoPub.SDK_VERSION);
+        iMBanner.setRequestParams(map);
 		InMobi.setLogLevel(LOG_LEVEL.VERBOSE);
 		iMBanner.setIMBannerListener(this);
 		iMBanner.setRefreshInterval(-1);
@@ -65,7 +62,7 @@ protected void loadBanner(Context context,
 
 	private CustomEventBannerListener mBannerListener;
 	private IMBanner iMBanner;
-	private static boolean isAppIntialize = false;
+	private static boolean isAppInitialized = false;
 
 	/*
 	 * Abstract methods from CustomEventBanner
@@ -73,8 +70,8 @@ protected void loadBanner(Context context,
 
 	@Override
 	public void onInvalidate() {
-		iMBanner.setIMBannerListener(null);
 		if (iMBanner != null) {
+            iMBanner.setIMBannerListener(null);
             Views.removeFromParent(iMBanner);
             iMBanner.destroy();
 		}
diff --git a/extras/src/com/mopub/mobileads/InMobiInterstitial.java b/extras/src/com/mopub/mobileads/InMobiInterstitial.java
index 5346357e..2de8eac2 100644
--- a/extras/src/com/mopub/mobileads/InMobiInterstitial.java
+++ b/extras/src/com/mopub/mobileads/InMobiInterstitial.java
@@ -3,7 +3,6 @@
 import android.app.Activity;
 import android.content.Context;
 import com.inmobi.commons.InMobi;
-import com.inmobi.mediation.adapter.inmobi.InMobiExtras;
 import com.inmobi.monetization.IMErrorCode;
 import com.inmobi.monetization.IMInterstitial;
 import com.inmobi.monetization.IMInterstitialListener;
@@ -14,7 +13,7 @@
 import java.util.*;
 
 /*
- * Tested with InMobi SDK  4.0.0
+ * Tested with InMobi SDK  4.1.1
  */
 public class InMobiInterstitial extends CustomEventInterstitial implements IMInterstitialListener {
 
@@ -42,25 +41,23 @@ protected void loadInterstitial(Context context,
 		 * You may also pass this String down in the serverExtras Map by
 		 * specifying Custom Event Data in MoPub's web interface.
 		 */
-		if (!isAppIntialize) {
+		if (!isAppInitialized) {
 			InMobi.initialize(activity, inMobiAppId);
-			isAppIntialize = true;
+            isAppInitialized = true;
 		}
 		this.iMInterstitial = new IMInterstitial(activity, inMobiAppId);
 
-		Map<String, String> map = new HashMap<String, String>();
-		InMobiExtras extras = new InMobiExtras();
-		map.put("tp", "c_mopub");
-		map.put("tp-ver", MoPub.SDK_VERSION);
-		extras.setRequestParams(map);
-		iMInterstitial.addNetworkExtras(extras);
+        Map<String, String> map = new HashMap<String, String>();
+        map.put("tp", "c_mopub");
+        map.put("tp-ver", MoPub.SDK_VERSION);
+        iMInterstitial.setRequestParams(map);
 		iMInterstitial.setIMInterstitialListener(this);
 		iMInterstitial.loadInterstitial();
 	}
 
 	private CustomEventInterstitialListener mInterstitialListener;
 	private IMInterstitial iMInterstitial;
-	private static boolean isAppIntialize = false;
+	private static boolean isAppInitialized = false;
 
 	/*
 	 * Abstract methods from CustomEventInterstitial
@@ -76,8 +73,8 @@ public void showInterstitial() {
 
 	@Override
 	public void onInvalidate() {
-		iMInterstitial.setIMInterstitialListener(null);
 		if (iMInterstitial != null) {
+            iMInterstitial.setIMInterstitialListener(null);
 			iMInterstitial.destroy();
 		}
 	}
diff --git a/extras/src/com/mopub/mobileads/MillennialBanner.java b/extras/src/com/mopub/mobileads/MillennialBanner.java
index 9031e7d7..4ba0f3a0 100644
--- a/extras/src/com/mopub/mobileads/MillennialBanner.java
+++ b/extras/src/com/mopub/mobileads/MillennialBanner.java
@@ -129,6 +129,7 @@ public void intentStarted(MMAd ad, String intent) {
             mBannerListener.onBannerClicked();
         }
 
+
         void register(Context context) {
             mContext = context;
             context.registerReceiver(this, MMBroadcastReceiver.createIntentFilter());
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index c21fd982..10b3793c 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -31,7 +31,6 @@
                 android:configChanges="keyboardHidden|orientation"/>
         <activity android:name="com.mopub.simpleadsdemo.BannersTab" />
         <activity android:name="com.mopub.simpleadsdemo.InterstitialsTab" />
-        <activity android:name="com.mopub.simpleadsdemo.ConsoleTab" />
         <activity android:name="com.mopub.simpleadsdemo.AboutTab" />
     </application>
 
diff --git a/mopub-sample/res/layout/banners.xml b/mopub-sample/res/layout/banners.xml
index ec055ec8..7efb2e83 100644
--- a/mopub-sample/res/layout/banners.xml
+++ b/mopub-sample/res/layout/banners.xml
@@ -1,46 +1,81 @@
 <?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-	android:orientation="vertical"
-	android:layout_width="fill_parent"
-	android:layout_height="fill_parent">
-
-<RelativeLayout
-	android:id="@+id/toplayout"
-	android:orientation="vertical"
-	android:layout_width="fill_parent"
-	android:layout_height="wrap_content">
-
-	<Button
-		android:id="@+id/searchbutton"
-		android:layout_width="wrap_content"
-		android:layout_height="wrap_content"
-		android:layout_alignParentRight="true"
-		android:layout_marginLeft="10dp"
-		android:layout_marginTop="20dp"
-		android:text="Load Ads" />
-
-	<EditText
-		android:id="@+id/searchtext"
-		android:hint="Keyword, try 'coffee'"
-		android:layout_width="fill_parent"
-		android:layout_height="wrap_content"
-		android:layout_toLeftOf="@id/searchbutton"
-		android:layout_alignTop="@id/searchbutton" />
-
-</RelativeLayout>
-
-<com.mopub.mobileads.MoPubView
-	android:id="@+id/mrectview"
-	android:layout_height="250dp"
-	android:layout_width="300dp"
-	android:background="@drawable/spacer"
-	android:layout_gravity="center_horizontal"/>
-
-<com.mopub.mobileads.MoPubView
-	android:id="@+id/bannerview"
-	android:background="@drawable/spacer"
-	android:layout_width="fill_parent"
-	android:layout_height="50dp"
-	android:layout_marginTop="10dp"/>
-
-</LinearLayout>
+<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
+     android:layout_width="fill_parent"
+     android:layout_height="fill_parent">
+
+    <LinearLayout
+        android:orientation="vertical"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content">
+
+        <LinearLayout
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal">
+
+            <EditText
+                android:id="@+id/banner_adunit_field"
+                android:hint="Ad Unit ID for banner below"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="7"
+                android:inputType="text|textFilter|textShortMessage"
+                android:imeOptions="actionDone"
+                android:singleLine="true" />
+
+            <Button
+                android:id="@+id/banner_load_button"
+                android:text="Load"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_weight="1" />
+        </LinearLayout>
+
+        <com.mopub.mobileads.MoPubView
+            android:id="@+id/banner_view"
+            android:layout_width="fill_parent"
+            android:layout_height="50dp"
+            android:background="@drawable/spacer" />
+
+        <LinearLayout
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal"
+            android:layout_marginTop="25dp">
+
+            <EditText
+                android:id="@+id/mrect_adunit_field"
+                android:hint="Ad Unit ID for mrect below"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="7"
+                android:inputType="text|textFilter|textShortMessage"
+                android:imeOptions="actionDone"
+                android:singleLine="true" />
+
+            <Button
+                android:id="@+id/mrect_load_button"
+                android:text="Load"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_weight="1" />
+        </LinearLayout>
+
+        <com.mopub.mobileads.MoPubView
+            android:id="@+id/mrect_view"
+            android:layout_width="300dp"
+            android:layout_height="250dp"
+            android:layout_gravity="center_horizontal"
+            android:background="@drawable/spacer" />
+
+        <EditText
+            android:id="@+id/keywords_field"
+            android:hint="Keywords, try 'coffee'"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:inputType="text|textFilter|textShortMessage"
+            android:imeOptions="actionDone"
+            android:singleLine="true"
+            android:layout_marginTop="25dp" />
+    </LinearLayout>
+</ScrollView>
diff --git a/mopub-sample/res/layout/interstitials.xml b/mopub-sample/res/layout/interstitials.xml
index bebf22a9..0a70c5c3 100644
--- a/mopub-sample/res/layout/interstitials.xml
+++ b/mopub-sample/res/layout/interstitials.xml
@@ -1,25 +1,40 @@
 <?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-	android:orientation="vertical"
-	android:padding="10dp"
-	android:layout_width="fill_parent"
-	android:layout_height="fill_parent">
+<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent">
 
-<TextView
-	android:layout_width="fill_parent"
-	android:layout_height="wrap_content"
-	android:text="Basic"/>
+    <LinearLayout
+        android:orientation="vertical"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content">
 
-<Button
-	android:id="@+id/load_interstitial"
-	android:layout_width="fill_parent"
-	android:layout_height="wrap_content"
-	android:text="Load Interstitial"/>
+        <EditText
+            android:id="@+id/interstitials_edit_text_interstitial"
+            android:hint="Ad Unit ID for interstitial"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:inputType="text|textFilter|textShortMessage"
+            android:imeOptions="actionDone"
+            android:singleLine="true" />
 
-<Button
-	android:id="@+id/show_interstitial"
-	android:layout_width="fill_parent"
-	android:layout_height="wrap_content"
-	android:text="Show Interstitial"/>
+        <LinearLayout
+            android:orientation="horizontal"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content">
 
-</LinearLayout>
+            <Button
+                android:id="@+id/interstitials_load_interstitial"
+                android:text="Load Interstitial"
+                android:layout_width="fill_parent"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"/>
+
+            <Button
+                android:id="@+id/interstitials_show_interstitial"
+                android:text="Show Interstitial"
+                android:layout_width="fill_parent"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"/>
+        </LinearLayout>
+    </LinearLayout>
+</ScrollView>
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannersTab.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannersTab.java
index e708ec52..7b57fca9 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannersTab.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannersTab.java
@@ -33,83 +33,122 @@
 package com.mopub.simpleadsdemo;
 
 import android.app.Activity;
-import android.content.Context;
 import android.os.Bundle;
-import android.util.Log;
 import android.view.View;
 import android.view.View.OnClickListener;
-import android.view.inputmethod.InputMethodManager;
 import android.widget.Button;
 import android.widget.EditText;
+
 import com.mopub.mobileads.MoPubErrorCode;
 import com.mopub.mobileads.MoPubView;
 import com.mopub.mobileads.MoPubView.BannerAdListener;
 
+import static com.mopub.simpleadsdemo.Utils.hideSoftKeyboard;
+import static com.mopub.simpleadsdemo.Utils.logToast;
+import static com.mopub.simpleadsdemo.Utils.validateAdUnitId;
+
 public class BannersTab extends Activity implements BannerAdListener {
-    private EditText mSearchText;
-    private Button mSearchButton;
-    private MoPubView mMRectBanner;
-    private MoPubView mBanner;
+    private MoPubView mBannerView;
+    private EditText mBannerAdUnitField;
+
+    private MoPubView mMrectView;
+    private EditText mMrectAdUnitField;
+
+    private EditText mKeywordsField;
 
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.banners);
 
-        // Initialize Ad components
-        mMRectBanner = (MoPubView) findViewById(R.id.mrectview);
-        mMRectBanner.setAdUnitId(SimpleAdsDemoConstants.PUB_ID_300x250);
-        mMRectBanner.loadAd();
+        mBannerView = (MoPubView) findViewById(R.id.banner_view);
+        mBannerAdUnitField = (EditText) findViewById(R.id.banner_adunit_field);
+        hideSoftKeyboard(mBannerAdUnitField);
+
+        mMrectView = (MoPubView) findViewById(R.id.mrect_view);
+        mMrectAdUnitField = (EditText) findViewById(R.id.mrect_adunit_field);
+        hideSoftKeyboard(mMrectAdUnitField);
+
+        mKeywordsField = (EditText) findViewById(R.id.keywords_field);
+        hideSoftKeyboard(mKeywordsField);
+
+        Button bannerLoadButton = (Button) findViewById(R.id.banner_load_button);
+        bannerLoadButton.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                String adUnitId = mBannerAdUnitField.getText().toString();
+                String keywords = mKeywordsField.getText().toString();
 
-        mBanner = (MoPubView) findViewById(R.id.bannerview);
-        mBanner.setAdUnitId(SimpleAdsDemoConstants.PUB_ID_320x50);
-        mBanner.setBannerAdListener(this);
-        mBanner.loadAd();
+                loadMoPubView(mBannerView, adUnitId, keywords);
+            }
+        });
 
-        mSearchText = (EditText) findViewById(R.id.searchtext);
-        mSearchButton = (Button) findViewById(R.id.searchbutton);
-        mSearchButton.setOnClickListener(new OnClickListener() {
+        Button mrectLoadButton = (Button) findViewById(R.id.mrect_load_button);
+        mrectLoadButton.setOnClickListener(new OnClickListener() {
+            @Override
             public void onClick(View v) {
-                InputMethodManager imm
-                        = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
-                imm.hideSoftInputFromWindow(mSearchText.getWindowToken(), 0);
-                mMRectBanner.setKeywords(mSearchText.getText().toString());
-                mBanner.setKeywords(mSearchText.getText().toString());
-
-                mMRectBanner.loadAd();
-                mBanner.loadAd();
+                String adUnitId = mMrectAdUnitField.getText().toString();
+                String keywords = mKeywordsField.getText().toString();
+
+                loadMoPubView(mMrectView, adUnitId, keywords);
             }
         });
     }
-    
+
     @Override
     protected void onDestroy() {
-        mBanner.destroy();
-        mMRectBanner.destroy();
+        if (mBannerView != null) {
+            mBannerView.destroy();
+        }
+        if (mMrectView != null) {
+            mMrectView.destroy();
+        }
         super.onDestroy();
     }
 
+    private void loadMoPubView(MoPubView moPubView, String adUnitId, String keywords) {
+        if (moPubView == null) {
+            logToast(this, "Unable to inflate MoPubView from xml.");
+            return;
+        }
+
+        try {
+            validateAdUnitId(adUnitId);
+        } catch (IllegalArgumentException exception) {
+            logToast(BannersTab.this, exception.getMessage());
+            return;
+        }
+
+        moPubView.setBannerAdListener(this);
+        moPubView.setAdUnitId(adUnitId);
+        moPubView.setKeywords(keywords);
+        moPubView.loadAd();
+    }
+
+    /*
+     * MoPubBanner.BannerAdListener implementation
+     */
     @Override
-    public void onBannerLoaded(MoPubView banner) {
-        Log.d("MoPub Demo", "Banner loaded callback.");
+    public void onBannerLoaded(MoPubView moPubView) {
+        logToast(this, "Banner loaded callback.");
     }
 
     @Override
-    public void onBannerFailed(MoPubView banner, MoPubErrorCode errorCode) {
-        Log.d("MoPub Demo", "Banner failed callback with: " + errorCode.toString());
+    public void onBannerFailed(MoPubView moPubView, MoPubErrorCode errorCode) {
+        logToast(this, "Banner failed callback with: " + errorCode.toString());
     }
 
     @Override
-    public void onBannerClicked(MoPubView banner) {
-        Log.d("MoPub Demo", "Banner clicked callback.");
+    public void onBannerClicked(MoPubView moPubView) {
+        logToast(this, "Banner clicked callback.");
     }
 
     @Override
-    public void onBannerExpanded(MoPubView banner) {
-        Log.d("MoPub Demo", "Banner expanded callback.");
+    public void onBannerExpanded(MoPubView moPubView) {
+        logToast(this, "Banner expanded callback.");
     }
 
     @Override
-    public void onBannerCollapsed(MoPubView banner) {
-        Log.d("MoPub Demo", "Banner collapsed callback.");
+    public void onBannerCollapsed(MoPubView moPubView) {
+        logToast(this, "Banner collapsed callback.");
     }
-}
\ No newline at end of file
+}
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/ConsoleTab.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/ConsoleTab.java
deleted file mode 100644
index 1fdaf78a..00000000
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/ConsoleTab.java
+++ /dev/null
@@ -1,111 +0,0 @@
-/*
- * Copyright (c) 2010-2013, MoPub Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *
- *  Redistributions of source code must retain the above copyright
- *   notice, this list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright
- *   notice, this list of conditions and the following disclaimer in the
- *   documentation and/or other materials provided with the distribution.
- *
- *  Neither the name of 'MoPub Inc.' nor the names of its contributors
- *   may be used to endorse or promote products derived from this software
- *   without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package com.mopub.simpleadsdemo;
-
-import android.app.Activity;
-import android.content.Context;
-import android.os.Bundle;
-import android.text.method.ScrollingMovementMethod;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.view.inputmethod.InputMethodManager;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.TextView;
-import com.mopub.mobileads.MoPubErrorCode;
-import com.mopub.mobileads.MoPubView;
-import com.mopub.mobileads.MoPubView.BannerAdListener;
-
-public class ConsoleTab extends Activity {
-    private MoPubView mBanner;
-    private EditText mSearchText;
-    private TextView mConsoleText;
-
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.console);
-
-        mBanner = (MoPubView) findViewById(R.id.bannerview);
-        mBanner.setAdUnitId(SimpleAdsDemoConstants.PUB_ID_320x50);
-        
-        mBanner.setBannerAdListener(new BannerAdListener() {
-            @Override
-            public void onBannerLoaded(MoPubView banner) {
-                outputLine("Ad was loaded. Success.");
-                outputLine("Payload = " + banner.getResponseString());
-            }
-
-            @Override
-            public void onBannerFailed(MoPubView banner, MoPubErrorCode errorCode) {
-                outputLine("Ad did not load.");
-                outputLine("Payload = " + banner.getResponseString());
-            }
-
-            public void onBannerClicked(MoPubView banner) {}
-            public void onBannerExpanded(MoPubView banner) {}
-            public void onBannerCollapsed(MoPubView banner) {}
-        });
-        
-        mConsoleText = (TextView) findViewById(R.id.consoletext);
-        mConsoleText.setMovementMethod(new ScrollingMovementMethod());
-        
-        clearConsole();
-
-        mSearchText = (EditText) findViewById(R.id.searchtext);
-        Button mSearchButton = (Button) findViewById(R.id.searchbutton);
-        mSearchButton.setOnClickListener(new OnClickListener() {
-            public void onClick(View v) {
-                InputMethodManager imm
-                        = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
-                imm.hideSoftInputFromWindow(mSearchText.getWindowToken(), 0);
-                mBanner.setKeywords(mSearchText.getText().toString());
-                mBanner.loadAd();
-            }
-        });
-    }
-
-    private void clearConsole() {
-        mConsoleText.setText("MoPub Ad Loading Console\n========================\n");
-        mConsoleText.bringPointIntoView(0);
-    }
-
-    private void outputLine(String str) {
-        mConsoleText.append(str+"\n");
-    }
-    
-    @Override
-    protected void onDestroy() {
-        mBanner.destroy();
-        super.onDestroy();
-    }
-}
\ No newline at end of file
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialsTab.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialsTab.java
index 3c8b2db6..6fef4064 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialsTab.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialsTab.java
@@ -38,38 +38,56 @@
 import android.view.View;
 import android.view.View.OnClickListener;
 import android.widget.Button;
-import android.widget.Toast;
+import android.widget.EditText;
+
 import com.mopub.mobileads.MoPubErrorCode;
 import com.mopub.mobileads.MoPubInterstitial;
 import com.mopub.mobileads.MoPubInterstitial.InterstitialAdListener;
 
-public class InterstitialsTab extends Activity implements InterstitialAdListener {
+import static com.mopub.simpleadsdemo.Utils.LOGTAG;
+import static com.mopub.simpleadsdemo.Utils.hideSoftKeyboard;
+import static com.mopub.simpleadsdemo.Utils.logToast;
+import static com.mopub.simpleadsdemo.Utils.validateAdUnitId;
 
+public class InterstitialsTab extends Activity implements InterstitialAdListener {
     private MoPubInterstitial mMoPubInterstitial;
-    
+    private EditText mInterstitialAdUnitField;
+
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.interstitials);
 
-        mMoPubInterstitial = new MoPubInterstitial(this, SimpleAdsDemoConstants.PUB_ID_INTERSTITIAL);
-        mMoPubInterstitial.setInterstitialAdListener(this);
-        
-        Button loadInterstitialButton = (Button) findViewById(R.id.load_interstitial);
-        loadInterstitialButton.setOnClickListener(new OnClickListener() {
+        mInterstitialAdUnitField = (EditText) findViewById(R.id.interstitials_edit_text_interstitial);
+        hideSoftKeyboard(mInterstitialAdUnitField);
+
+        Button interstitialLoadButton = (Button) findViewById(R.id.interstitials_load_interstitial);
+        interstitialLoadButton.setOnClickListener(new OnClickListener() {
             public void onClick(View v) {
-                // Load interstitial.
-                mMoPubInterstitial.load();
+                String adUnitId = mInterstitialAdUnitField.getText().toString();
+
+                try {
+                    validateAdUnitId(adUnitId);
+
+                    mMoPubInterstitial = new MoPubInterstitial(InterstitialsTab.this, adUnitId);
+                    mMoPubInterstitial.setInterstitialAdListener(InterstitialsTab.this);
+                    mMoPubInterstitial.load();
+                } catch (IllegalArgumentException exception) {
+                    String message = exception.getMessage();
+
+                    if (message != null) {
+                        logToast(InterstitialsTab.this, message);
+                    }
+                }
             }
         });
         
-        Button showInterstitialButton = (Button) findViewById(R.id.show_interstitial);
-        showInterstitialButton.setOnClickListener(new OnClickListener() {
+        Button interstitialShowButton = (Button) findViewById(R.id.interstitials_show_interstitial);
+        interstitialShowButton.setOnClickListener(new OnClickListener() {
             public void onClick(View v) {
-                // Show interstitial.
-                if (mMoPubInterstitial.isReady()) {
+                if (mMoPubInterstitial != null && mMoPubInterstitial.isReady()) {
                     mMoPubInterstitial.show();
                 } else {
-                    logToast("Interstitial was not ready. Try reloading.");
+                    logToast(InterstitialsTab.this, "Interstitial was not ready. Try reloading.");
                 }
             }
         });
@@ -77,40 +95,37 @@ public void onClick(View v) {
 
     @Override
     protected void onDestroy() {
-        mMoPubInterstitial.destroy();
+        if (mMoPubInterstitial != null) {
+            mMoPubInterstitial.destroy();
+        }
         super.onDestroy();
     }
 
     /*
-     * MoPubInterstitial.MoPubInterstitialListener implementation
+     * MoPubInterstitial.InterstitialAdListener implementation
      */
     @Override
     public void onInterstitialLoaded(MoPubInterstitial interstitial) {
-        logToast("Interstitial loaded successfully.");
+        logToast(this, "Interstitial loaded successfully.");
     }
 
     @Override
     public void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode) {
-        logToast("Interstitial failed to load with error: " + errorCode.toString());
+        logToast(this, "Interstitial failed to load with error: " + errorCode.toString());
     }
 
     @Override
     public void onInterstitialShown(MoPubInterstitial interstitial) {
-        logToast("Interstitial shown.");
+        logToast(this, "Interstitial shown.");
     }
 
     @Override
     public void onInterstitialClicked(MoPubInterstitial interstitial) {
-        logToast("Interstitial clicked.");
+        logToast(this, "Interstitial clicked.");
     }
 
     @Override
     public void onInterstitialDismissed(MoPubInterstitial interstitial) {
-        logToast("Interstitial dismissed.");
-    }
-
-    private void logToast(String message) {
-        Log.d("MoPub Demo", message);
-        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
+        logToast(this, "Interstitial dismissed.");
     }
 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SimpleAdsDemo.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SimpleAdsDemo.java
index c91cc88e..111d66f6 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SimpleAdsDemo.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SimpleAdsDemo.java
@@ -36,13 +36,10 @@
 import android.content.Intent;
 import android.os.Bundle;
 import android.widget.TabHost;
-import android.widget.Toast;
+
 import com.mopub.mobileads.MoPubConversionTracker;
 
 public class SimpleAdsDemo extends TabActivity {
-    private final int INTERSTITIAL_AD_REQUEST = 0;
-
-    /** Called when the activity is first created. */
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -61,11 +58,6 @@ public void onCreate(Bundle savedInstanceState) {
                 .setContent(new Intent().setClass(this, InterstitialsTab.class));
         tabHost.addTab(spec);
 
-        spec = tabHost.newTabSpec("console")
-                .setIndicator("Console")
-                .setContent(new Intent().setClass(this, ConsoleTab.class));
-        tabHost.addTab(spec);
-
         spec = tabHost.newTabSpec("about")
                 .setIndicator("About")
                 .setContent(new Intent().setClass(this, AboutTab.class));
@@ -74,16 +66,4 @@ public void onCreate(Bundle savedInstanceState) {
         // Conversion tracking
         new MoPubConversionTracker().reportAppOpen(this);
     }
-
-    // Listen for results from the interstitial ad
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        switch (requestCode) {
-        case INTERSTITIAL_AD_REQUEST:
-            // Handle interstitial closed result here if needed.
-            // This is called immediately before onResume()
-            if (resultCode == RESULT_CANCELED) {
-                Toast.makeText(this, "No ad available", Toast.LENGTH_SHORT).show();
-            }
-        }
-    }
 }
\ No newline at end of file
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SimpleAdsDemoConstants.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SimpleAdsDemoConstants.java
deleted file mode 100644
index accbf8f9..00000000
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SimpleAdsDemoConstants.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/*
- * Copyright (c) 2010-2013, MoPub Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *
- *  Redistributions of source code must retain the above copyright
- *   notice, this list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright
- *   notice, this list of conditions and the following disclaimer in the
- *   documentation and/or other materials provided with the distribution.
- *
- *  Neither the name of 'MoPub Inc.' nor the names of its contributors
- *   may be used to endorse or promote products derived from this software
- *   without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package com.mopub.simpleadsdemo;
-
-public abstract class SimpleAdsDemoConstants {
-    public static final String PUB_ID_320x50 = "agltb3B1Yi1pbmNyDAsSBFNpdGUY8fgRDA";
-    public static final String PUB_ID_300x250 = "agltb3B1Yi1pbmNyDQsSBFNpdGUYqKO5CAw";
-    public static final String PUB_ID_INTERSTITIAL = "agltb3B1Yi1pbmNyDAsSBFNpdGUY6tERDA";
-}
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/Utils.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/Utils.java
new file mode 100644
index 00000000..0b50d55d
--- /dev/null
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/Utils.java
@@ -0,0 +1,41 @@
+package com.mopub.simpleadsdemo;
+
+import android.content.Context;
+import android.util.Log;
+import android.view.View;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.EditText;
+import android.widget.Toast;
+
+public class Utils {
+    public static final String LOGTAG = "MoPub Demo";
+
+    private Utils() {}
+
+    public static void validateAdUnitId(String adUnitId) throws IllegalArgumentException {
+        if (adUnitId == null) {
+            throw new IllegalArgumentException("Invalid Ad Unit ID: null ad unit.");
+        } else if (adUnitId.length() == 0) {
+            throw new IllegalArgumentException("Invalid Ad Unit Id: empty ad unit.");
+        } else if (adUnitId.length() > 256) {
+            throw new IllegalArgumentException("Invalid Ad Unit Id: length too long.");
+        } else if (!isAlphaNumeric(adUnitId)) {
+            throw new IllegalArgumentException("Invalid Ad Unit Id: contains non-alphanumeric characters.");
+        }
+    }
+
+    public static void hideSoftKeyboard(final EditText editText) {
+        InputMethodManager inputMethodManager =
+                (InputMethodManager) editText.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
+        inputMethodManager.hideSoftInputFromWindow(editText.getWindowToken(), 0);
+    }
+
+    public static boolean isAlphaNumeric(String input) {
+        return input.matches("^[a-zA-Z0-9-_]*$");
+    }
+
+    public static void logToast(Context context, String message) {
+        Log.d(LOGTAG, message);
+        Toast.makeText(context, message, Toast.LENGTH_SHORT).show();
+    }
+}
diff --git a/mopub-sdk/src/main/java/android/webkit/JavascriptInterface.java b/mopub-sdk/src/main/java/android/webkit/JavascriptInterface.java
new file mode 100644
index 00000000..5c490a27
--- /dev/null
+++ b/mopub-sdk/src/main/java/android/webkit/JavascriptInterface.java
@@ -0,0 +1,13 @@
+package android.webkit;
+
+/*
+ * Starting with API 17, calls to WebView#addJavascriptInterface must be marked with a
+ * @JavascriptInterface annotation. Unfortunately, the annotation itself is only available on API
+ * 17+, so we cheat by making a copy for our own use.
+ *
+ * http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)
+ */
+@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
+@java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD})
+public @interface JavascriptInterface {
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
index cca57d01..437f270c 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
@@ -32,30 +32,54 @@
 
 package com.mopub.mobileads;
 
-import java.util.*;
+import android.content.Context;
+
+import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.ADMOB_BANNER;
+import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.ADMOB_INTERSTITIAL;
+import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.GOOGLE_PLAY_BANNER;
+import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.GOOGLE_PLAY_INTERSTITIAL;
+import static com.mopub.mobileads.util.Reflection.MethodBuilder;
 
 public class AdTypeTranslator {
-    public static final String ADMOB_BANNER = "com.mopub.mobileads.GoogleAdMobBanner";
-    public static final String ADMOB_INTERSTITIAL = "com.mopub.mobileads.GoogleAdMobInterstitial";
-    public static final String MILLENNIAL_BANNER = "com.mopub.mobileads.MillennialBanner";
-    public static final String MILLENNIAL_INTERSTITIAL = "com.mopub.mobileads.MillennialInterstitial";
-    public static final String MRAID_BANNER = "com.mopub.mobileads.MraidBanner";
-    public static final String MRAID_INTERSTITIAL = "com.mopub.mobileads.MraidInterstitial";
-    public static final String HTML_BANNER = "com.mopub.mobileads.HtmlBanner";
-    public static final String HTML_INTERSTITIAL = "com.mopub.mobileads.HtmlInterstitial";
-    public static final String VAST_VIDEO_INTERSTITIAL = "com.mopub.mobileads.VastVideoInterstitial";
-    private static Map<String, String> customEventNameForAdType = new HashMap<String, String>();
-
-    static {
-        customEventNameForAdType.put("admob_native_banner", ADMOB_BANNER);
-        customEventNameForAdType.put("admob_full_interstitial", ADMOB_INTERSTITIAL);
-        customEventNameForAdType.put("millennial_native_banner", MILLENNIAL_BANNER);
-        customEventNameForAdType.put("millennial_full_interstitial", MILLENNIAL_INTERSTITIAL);
-        customEventNameForAdType.put("mraid_banner", MRAID_BANNER);
-        customEventNameForAdType.put("mraid_interstitial", MRAID_INTERSTITIAL);
-        customEventNameForAdType.put("html_banner", HTML_BANNER);
-        customEventNameForAdType.put("html_interstitial", HTML_INTERSTITIAL);
-        customEventNameForAdType.put("vast_interstitial", VAST_VIDEO_INTERSTITIAL);
+    private static final int GOOGLE_PLAY_SUCCESS_CODE = 0;
+
+    public enum CustomEventType {
+        ADMOB_BANNER("admob_native_banner", "com.mopub.mobileads.GoogleAdMobBanner"),
+        ADMOB_INTERSTITIAL("admob_full_interstitial", "com.mopub.mobileads.GoogleAdMobInterstitial"),
+        GOOGLE_PLAY_BANNER("google_play_banner", "com.mopub.mobileads.GooglePlayServicesBanner"),
+        GOOGLE_PLAY_INTERSTITIAL("google_play_interstitial", "com.mopub.mobileads.GooglePlayServicesInterstitial"),
+        MILLENNIAL_BANNER("millennial_native_banner", "com.mopub.mobileads.MillennialBanner"),
+        MILLENNIAL_INTERSTITIAL("millennial_full_interstitial", "com.mopub.mobileads.MillennialInterstitial"),
+        MRAID_BANNER("mraid_banner", "com.mopub.mobileads.MraidBanner"),
+        MRAID_INTERSTITIAL("mraid_interstitial", "com.mopub.mobileads.MraidInterstitial"),
+        HTML_BANNER("html_banner", "com.mopub.mobileads.HtmlBanner"),
+        HTML_INTERSTITIAL("html_interstitial", "com.mopub.mobileads.HtmlInterstitial"),
+        VAST_VIDEO_INTERSTITIAL("vast_interstitial", "com.mopub.mobileads.VastVideoInterstitial"),
+
+        UNSPECIFIED("", null);
+
+        private final String mKey;
+        private final String mClassName;
+
+        private CustomEventType(String key, String className) {
+            mKey = key;
+            mClassName = className;
+        }
+
+        private static CustomEventType fromString(String key) {
+            for (CustomEventType customEventType : CustomEventType.values()) {
+                if (customEventType.mKey.equals(key)) {
+                    return customEventType;
+                }
+            }
+
+            return UNSPECIFIED;
+        }
+
+        @Override
+        public String toString() {
+            return mClassName;
+        }
     }
 
     static String getAdNetworkType(String adType, String fullAdType) {
@@ -64,18 +88,64 @@ static String getAdNetworkType(String adType, String fullAdType) {
     }
 
     static String getCustomEventNameForAdType(MoPubView moPubView, String adType, String fullAdType) {
+        CustomEventType customEventType;
+
         if ("html".equals(adType) || "mraid".equals(adType)) {
-            return isInterstitial(moPubView)
-                   ? customEventNameForAdType.get(adType + "_interstitial")
-                   : customEventNameForAdType.get(adType + "_banner");
+            customEventType = (isInterstitial(moPubView))
+                    ? CustomEventType.fromString(adType + "_interstitial")
+                    : CustomEventType.fromString(adType + "_banner");
         } else {
-            return "interstitial".equals(adType)
-                    ? customEventNameForAdType.get(fullAdType + "_interstitial")
-                    : customEventNameForAdType.get(adType + "_banner");
+            customEventType = ("interstitial".equals(adType))
+                    ? CustomEventType.fromString(fullAdType + "_interstitial")
+                    : CustomEventType.fromString(adType + "_banner");
+
+            if (moPubView != null) {
+                customEventType = convertAdMobToGooglePlay(moPubView.getContext(), customEventType);
+            }
         }
+
+        return customEventType.toString();
     }
 
     private static boolean isInterstitial(MoPubView moPubView) {
         return moPubView instanceof MoPubInterstitial.MoPubInterstitialView;
     }
+
+    private static CustomEventType convertAdMobToGooglePlay(Context context, CustomEventType customEventType) {
+        // In both cases, only check if GooglePlayServices is available if absolutely necessary
+        if (customEventType == ADMOB_BANNER &&
+                classFound(GOOGLE_PLAY_BANNER) &&
+                isGooglePlayServicesAvailable(context)) {
+            return GOOGLE_PLAY_BANNER;
+        } else if (customEventType == ADMOB_INTERSTITIAL &&
+                classFound(GOOGLE_PLAY_INTERSTITIAL) &&
+                isGooglePlayServicesAvailable(context)) {
+            return GOOGLE_PLAY_INTERSTITIAL;
+        }
+
+        return customEventType;
+    }
+
+    private static boolean classFound(CustomEventType customEventType) {
+        try {
+            Class.forName(customEventType.toString());
+            return true;
+        } catch (ClassNotFoundException e) {
+            return false;
+        }
+    }
+
+    private static boolean isGooglePlayServicesAvailable(Context context) {
+        try {
+            MethodBuilder methodBuilder = new MethodBuilder(null, "isGooglePlayServicesAvailable")
+                    .setStatic(Class.forName("com.google.android.gms.common.GooglePlayServicesUtil"))
+                    .addParam(Context.class, context);
+
+            Object result = methodBuilder.execute();
+
+            return (result != null && (Integer) result == GOOGLE_PLAY_SUCCESS_CODE);
+        } catch (Exception exception) {
+            return false;
+        }
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
index 6c0d0bb4..7edcfc11 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
@@ -104,14 +104,16 @@ void loadAd() {
         if (isInvalidated() || mCustomEventBanner == null) {
             return;
         }
+        
         if(mMoPubView != null) {
         	mLocalExtras.put("activity", mMoPubView.getActivity());
         }
-        mCustomEventBanner.loadBanner(mContext, this, mLocalExtras, mServerExtras);
 
         if (getTimeoutDelayMilliseconds() > 0) {
             mHandler.postDelayed(mTimeout, getTimeoutDelayMilliseconds());
         }
+
+        mCustomEventBanner.loadBanner(mContext, this, mLocalExtras, mServerExtras);
     }
 
     void invalidate() {
@@ -146,10 +148,13 @@ private int getTimeoutDelayMilliseconds() {
      */
     @Override
     public void onBannerLoaded(View bannerView) {
-        if (isInvalidated()) return;
-        
+        if (isInvalidated()) {
+            return;
+        }
+
+        cancelTimeout();
+
         if (mMoPubView != null) {
-            cancelTimeout();
             mMoPubView.nativeAdLoaded();
             mMoPubView.setAdContentView(bannerView);
             if (!(bannerView instanceof HtmlBannerWebView)) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
index 59052077..b7cda1a4 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
@@ -104,11 +104,12 @@ void loadInterstitial() {
         if (isInvalidated() || mCustomEventInterstitial == null) {
             return;
         }
-        mCustomEventInterstitial.loadInterstitial(mContext, this, mLocalExtras, mServerExtras);
 
         if (getTimeoutDelayMilliseconds() > 0) {
             mHandler.postDelayed(mTimeout, getTimeoutDelayMilliseconds());
         }
+
+        mCustomEventInterstitial.loadInterstitial(mContext, this, mLocalExtras, mServerExtras);
     }
     
     void showInterstitial() {
@@ -166,8 +167,9 @@ public void onInterstitialLoaded() {
             return;
         }
 
+        cancelTimeout();
+
         if (mCustomEventInterstitialAdapterListener != null) {
-            cancelTimeout();
             mCustomEventInterstitialAdapterListener.onCustomEventInterstitialLoaded();
         }
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/DiskLruCache.java b/mopub-sdk/src/main/java/com/mopub/mobileads/DiskLruCache.java
index 22ddcd1d..ec31cb65 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/DiskLruCache.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/DiskLruCache.java
@@ -59,12 +59,11 @@ synchronized boolean putStream(final String fileName, final InputStream content)
             return false;
         }
 
-        String hashedFileName = Utils.sha1(fileName);
-
-        if (getUri(hashedFileName) != null) {
+        if (getUri(fileName) != null) {
             return false;
         }
 
+        String hashedFileName = Utils.sha1(fileName);
         File file = createFile(hashedFileName, content);
 
         if (file == null || !file.exists()) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
index 597d48d1..a482370a 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
@@ -34,6 +34,7 @@
 
 import android.content.Context;
 import android.os.Handler;
+import android.webkit.JavascriptInterface;
 
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 
@@ -83,6 +84,7 @@ void addMoPubUriJavascriptInterface(final MoPubUriJavascriptFireFinishLoadListen
         final class MoPubUriJavascriptInterface {
             // This method appears to be unused, since it will only be called from JavaScript.
             @SuppressWarnings("unused")
+            @JavascriptInterface
             public boolean fireFinishLoad() {
                 HtmlInterstitialWebView.this.postHandlerRunnable(new Runnable() {
                     @Override
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPub.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPub.java
index 9e91a871..b4c23769 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPub.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPub.java
@@ -33,6 +33,6 @@
 package com.mopub.mobileads;
 
 public class MoPub {
-    public static final String SDK_VERSION = "1.17.0.0";
+    public static final String SDK_VERSION = "1.17.2.0";
 }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
index 63742342..02a6118c 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
@@ -128,22 +128,6 @@
     // A reference to the root view.
     private FrameLayout mRootView;
 
-    // Tracks whether this controller's view is currently on-screen.
-    private boolean mIsViewable;
-
-    // Task that periodically checks whether this controller's view is on-screen.
-    private Runnable mCheckViewabilityTask = new Runnable() {
-        public void run() {
-            boolean currentViewable = checkViewable();
-            if (mIsViewable != currentViewable) {
-                mIsViewable = currentViewable;
-                getMraidView().fireChangeEventForProperty(
-                        MraidViewableProperty.createWithViewable(mIsViewable));
-            }
-            mHandler.postDelayed(this, VIEWABILITY_TIMER_MILLIS);
-        }
-    };
-
     // Handler for scheduling viewability checks.
     private Handler mHandler = new Handler();
 
@@ -199,7 +183,6 @@ public void run() {
     private void initialize() {
         mViewState = ViewState.LOADING;
         initializeScreenMetrics();
-        initializeViewabilityTimer();
         mOrientationBroadcastReceiver.register(getContext());
     }
 
@@ -227,11 +210,6 @@ private void initializeScreenMetrics() {
         mScreenHeight = (int) (heightPixels * (160.0 / metrics.densityDpi));
     }
 
-    private void initializeViewabilityTimer() {
-        mHandler.removeCallbacks(mCheckViewabilityTask);
-        mHandler.post(mCheckViewabilityTask);
-    }
-
     private int getDisplayRotation() {
         WindowManager wm = (WindowManager) getContext()
                 .getSystemService(Context.WINDOW_SERVICE);
@@ -245,7 +223,6 @@ private void onOrientationChanged(int currentRotation) {
     }
 
     public void destroy() {
-        mHandler.removeCallbacks(mCheckViewabilityTask);
         try {
             mOrientationBroadcastReceiver.unregister();
         } catch (IllegalArgumentException e) {
@@ -258,7 +235,7 @@ public void destroy() {
     protected void initializeJavaScriptState() {
         ArrayList<MraidProperty> properties = new ArrayList<MraidProperty>();
         properties.add(MraidScreenSizeProperty.createWithSize(mScreenWidth, mScreenHeight));
-        properties.add(MraidViewableProperty.createWithViewable(mIsViewable));
+        properties.add(MraidViewableProperty.createWithViewable(getMraidView().getIsVisible()));
         getMraidView().fireChangeEventForProperties(properties);
 
         mViewState = ViewState.DEFAULT;
@@ -770,10 +747,6 @@ protected void useCustomClose(boolean shouldUseCustomCloseButton) {
         }
     }
 
-    protected boolean checkViewable() {
-        return true;
-    }
-
     FrameLayout createAdContainerLayout() {
         return new FrameLayout(getContext());
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
index 3928acab..88ad2f5c 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
@@ -73,6 +73,7 @@
     private final PlacementType mPlacementType;
     private ViewGestureDetector mViewGestureDetector;
     private AdConfiguration mAdConfiguration;
+    private boolean mIsVisible;
 
     static class MraidListenerInfo {
         private MraidListener mMraidListener;
@@ -118,6 +119,8 @@ public MraidView(Context context, AdConfiguration adConfiguration, ExpansionStyl
         mViewGestureDetector = new ViewGestureDetector(context, this, adConfiguration);
         mViewGestureDetector.setUserClickListener(this);
 
+        mIsVisible = (getVisibility() == View.VISIBLE);
+
         initialize(expStyle, buttonStyle);
     }
 
@@ -343,10 +346,15 @@ public void onReceivedError(WebView view, int errorCode, String description, Str
         @Override
         public boolean shouldOverrideUrlLoading(WebView view, String url) {
             Uri uri = Uri.parse(url);
+
+            // Note that scheme will be null when we are passed a relative Uri
             String scheme = uri.getScheme();
-            
-            if (scheme.equals("mopub")) return true;
-            if (scheme.equals("mraid")) {
+
+            if ("mopub".equals(scheme)) {
+                return true;
+            }
+
+            if ("mraid".equals(scheme)) {
                 tryCommand(URI.create(url)); // java.net.URI, not android.net.Uri
                 return true;
             }
@@ -377,6 +385,8 @@ public void onPageFinished(WebView view, String url) {
                 if (getMraidListener() != null) {
                     getMraidListener().onReady(MraidView.this);
                 }
+                mIsVisible = (getVisibility() == View.VISIBLE);
+                fireChangeEventForProperty(MraidViewableProperty.createWithViewable(mIsVisible));
                 mHasFiredReadyEvent = true;
             }
         }
@@ -409,6 +419,28 @@ public void onLoadResource(WebView view, String url) {
         public void onOpen(MraidView view);
     }
 
+    public boolean getIsVisible() {
+        return mIsVisible;
+    }
+
+    @Override
+    protected void onVisibilityChanged (View changedView, int visibility) {
+        super.onVisibilityChanged(changedView, visibility);
+
+        boolean newIsVisible = (visibility == View.VISIBLE);
+        if (newIsVisible != mIsVisible) {
+            mIsVisible = newIsVisible;
+            if (mHasFiredReadyEvent) {
+                fireChangeEventForProperty(MraidViewableProperty.createWithViewable(mIsVisible));
+            }
+        }
+    }
+
+    @Deprecated // for testing
+    void setHasFiredReadyEvent(boolean hasFired) {
+        mHasFiredReadyEvent = hasFired;
+    }
+
     @Deprecated // for testing
     WebViewClient getMraidWebViewClient() {
         return mWebViewClient;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/Utils.java b/mopub-sdk/src/main/java/com/mopub/mobileads/Utils.java
index 9ade2c96..4b8c9df8 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/Utils.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/Utils.java
@@ -58,8 +58,7 @@ public static String sha1(String s) {
             return hexString.toString();
         } catch (NoSuchAlgorithmException e) {
             return "";
-        }
-        catch (NullPointerException e) {
+        } catch (NullPointerException e) {
             return "";
         }
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
index 39acc37d..40bbe7b6 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
@@ -36,7 +36,6 @@
 import android.util.Log;
 import com.mopub.mobileads.factories.VastManagerFactory;
 import com.mopub.mobileads.factories.VastVideoDownloadTaskFactory;
-import com.mopub.mobileads.util.Lists;
 import com.mopub.mobileads.util.vast.VastManager;
 
 import java.util.*;
@@ -129,16 +128,16 @@ public void onComplete(VastManager vastManager) {
 
     @Override
     public void onDownloadSuccess() {
-        mVideoStartTrackers = Lists.asStringArrayList(mVastManager.getVideoStartTrackers());
-        mVideoFirstQuartileTrackers = Lists.asStringArrayList(mVastManager.getVideoFirstQuartileTrackers());
-        mVideoMidpointTrackers = Lists.asStringArrayList(mVastManager.getVideoMidpointTrackers());
-        mVideoThirdQuartileTrackers = Lists.asStringArrayList(mVastManager.getVideoThirdQuartileTrackers());
-        mVideoCompleteTrackers = Lists.asStringArrayList(mVastManager.getVideoCompleteTrackers());
+        mVideoStartTrackers = new ArrayList<String>(mVastManager.getVideoStartTrackers());
+        mVideoFirstQuartileTrackers = new ArrayList<String>(mVastManager.getVideoFirstQuartileTrackers());
+        mVideoMidpointTrackers = new ArrayList<String>(mVastManager.getVideoMidpointTrackers());
+        mVideoThirdQuartileTrackers = new ArrayList<String>(mVastManager.getVideoThirdQuartileTrackers());
+        mVideoCompleteTrackers = new ArrayList<String>(mVastManager.getVideoCompleteTrackers());
 
-        mImpressionTrackers = Lists.asStringArrayList(mVastManager.getImpressionTrackers());
+        mImpressionTrackers = new ArrayList<String>(mVastManager.getImpressionTrackers());
 
         mClickThroughUrl = mVastManager.getClickThroughUrl();
-        mClickTrackers = Lists.asStringArrayList(mVastManager.getClickTrackers());
+        mClickTrackers = new ArrayList<String>(mVastManager.getClickTrackers());
 
         mCustomEventInterstitialListener.onInterstitialLoaded();
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoView.java
index 30b40f40..7a9b4aca 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoView.java
@@ -62,7 +62,7 @@
     private static final long VIDEO_PROGRESS_TIMER_CHECKER_DELAY = 50;
 
     private static final ThreadPoolExecutor sThreadPoolExecutor = new ThreadPoolExecutor(10, 50, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());
-    public static final int MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON = 15 * 1000;
+    public static final int MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON = 16 * 1000;
     public static final int DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON = 5 * 1000;
     private final BaseVideoViewListener mBaseVideoViewListener;
 
@@ -80,6 +80,7 @@
     private boolean mIsVideoProgressShouldBeChecked;
     private int mShowCloseButtonDelay = DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON;
 
+    private boolean mShowCloseButtonEventFired;
     private boolean mIsFirstMarkHit;
     private boolean mIsSecondMarkHit;
     private boolean mIsThirdMarkHit;
@@ -104,10 +105,39 @@ public VastVideoView(final Context context, final Intent intent, final BaseVideo
         mClickThroughUrl = intent.getStringExtra(VIDEO_CLICK_THROUGH_URL);
         mClickThroughTrackers = intent.getStringArrayListExtra(VIDEO_CLICK_THROUGH_TRACKERS);
 
+        setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
+            @Override
+            public void onPrepared(MediaPlayer mp) {
+                if (getDuration() < MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON) {
+                    mShowCloseButtonDelay = getDuration();
+                }
+            }
+        });
+
+        setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View view, MotionEvent motionEvent) {
+                if (motionEvent.getAction() == MotionEvent.ACTION_UP && shouldAllowClickThrough()) {
+                    pingOnBackgroundThread(mClickThroughTrackers);
+
+                    if (mBaseVideoViewListener != null) {
+                        mBaseVideoViewListener.videoClicked();
+                    }
+
+                    Intent mraidBrowserIntent = new Intent(context, MraidBrowser.class);
+                    mraidBrowserIntent.putExtra(MraidBrowser.URL_EXTRA, mClickThroughUrl);
+                    context.startActivity(mraidBrowserIntent);
+                }
+
+                return true;
+            }
+        });
+
         setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
             @Override
             public void onCompletion(MediaPlayer mp) {
                 stopProgressChecker();
+                fireShowCloseButtonEvent();
                 if (mBaseVideoViewListener != null) {
                     mBaseVideoViewListener.videoCompleted(false);
                 }
@@ -130,28 +160,6 @@ public boolean onError(MediaPlayer mediaPlayer, int what, int extra) {
             }
         });
 
-        setVideoPath(mVideoUrl);
-        requestFocus();
-
-        setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View view, MotionEvent motionEvent) {
-                if (motionEvent.getAction() == MotionEvent.ACTION_UP) {
-                    pingOnBackgroundThread(mClickThroughTrackers);
-
-                    if (mBaseVideoViewListener != null) {
-                        mBaseVideoViewListener.videoClicked();
-                    }
-
-                    Intent mraidBrowserIntent = new Intent(context, MraidBrowser.class);
-                    mraidBrowserIntent.putExtra(MraidBrowser.URL_EXTRA, mClickThroughUrl);
-                    context.startActivity(mraidBrowserIntent);
-                }
-
-                return true;
-            }
-        });
-
         mVideoProgressCheckerRunnable = new Runnable() {
             @Override
             public void run() {
@@ -174,10 +182,8 @@ public void run() {
                         pingOnBackgroundThread(mThirdQuarterTrackers);
                     }
 
-                    if (getCurrentPosition() > mShowCloseButtonDelay) {
-                        if (mBaseVideoViewListener != null) {
-                            mBaseVideoViewListener.showCloseButton();
-                        }
+                    if (shouldShowCloseButton()) {
+                        fireShowCloseButtonEvent();
                     }
                 }
 
@@ -187,14 +193,8 @@ public void run() {
             }
         };
 
-        setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
-            @Override
-            public void onPrepared(MediaPlayer mp) {
-                if(getDuration() < MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON) {
-                    mShowCloseButtonDelay = getDuration();
-                }
-            }
-        });
+        setVideoPath(mVideoUrl);
+        requestFocus();
 
         pingOnBackgroundThread(mVideoStartTrackers);
         pingOnBackgroundThread(mImpressionTrackers);
@@ -202,6 +202,22 @@ public void onPrepared(MediaPlayer mp) {
         mHandler.post(mVideoProgressCheckerRunnable);
     }
 
+    private void fireShowCloseButtonEvent() {
+        mShowCloseButtonEventFired = true;
+
+        if (mBaseVideoViewListener != null) {
+            mBaseVideoViewListener.showCloseButton();
+        }
+    }
+
+    private boolean shouldShowCloseButton() {
+        return !mShowCloseButtonEventFired && getCurrentPosition() > mShowCloseButtonDelay;
+    }
+
+    private boolean shouldAllowClickThrough(){
+        return mShowCloseButtonEventFired;
+    }
+
     @Override
     protected void onPause() {
         super.onPause();
@@ -247,4 +263,19 @@ private void stopProgressChecker() {
         mIsVideoProgressShouldBeChecked = false;
         mHandler.removeCallbacks(mVideoProgressCheckerRunnable);
     }
+
+    @Deprecated // for testing
+    void setIsVideoProgressShouldBeChecked(boolean value) {
+        mIsVideoProgressShouldBeChecked = value;
+    }
+
+    @Deprecated // for testing
+    int getShowCloseButtonDelay() {
+        return mShowCloseButtonDelay;
+    }
+
+    @Deprecated // for testing
+    void setCloseButtonVisible(boolean visible) {
+        mShowCloseButtonEventFired = visible;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Reflection.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/Reflection.java
index 3a58c698..392565ec 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Reflection.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/Reflection.java
@@ -39,11 +39,12 @@
     public static class MethodBuilder {
         private final Object mInstance;
         private final String mMethodName;
-        private final Class<?> mClass;
+        private Class<?> mClass;
 
         private List<Class<?>> mParameterClasses;
         private List<Object> mParameters;
         private boolean mIsAccessible;
+        private boolean mIsStatic;
 
         public MethodBuilder(final Object instance, final String methodName) {
             mInstance = instance;
@@ -68,6 +69,13 @@ public MethodBuilder setAccessible() {
             return this;
         }
 
+        public MethodBuilder setStatic(Class<?> clazz) {
+            mIsStatic = true;
+            mClass = clazz;
+
+            return this;
+        }
+
         public Object execute() throws Exception {
             Class<?>[] classArray = new Class<?>[mParameterClasses.size()];
             Class<?>[] parameterTypes = mParameterClasses.toArray(classArray);
@@ -79,7 +87,12 @@ public Object execute() throws Exception {
             }
 
             Object[] parameters = mParameters.toArray();
-            return method.invoke(mInstance, parameters);
+
+            if (mIsStatic) {
+                return method.invoke(null, parameters);
+            } else {
+                return method.invoke(mInstance, parameters);
+            }
         }
     }
 
@@ -89,8 +102,7 @@ public static Method getDeclaredMethodWithTraversal(Class<?> clazz, String metho
 
         while (currentClass != null) {
             try {
-                Method method = currentClass.getDeclaredMethod(methodName, parameterTypes);
-                return method;
+                return currentClass.getDeclaredMethod(methodName, parameterTypes);
             } catch (NoSuchMethodException e) {
                 currentClass = currentClass.getSuperclass();
             }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
index 69ecb240..ea34c842 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
@@ -35,6 +35,7 @@
 import android.content.Context;
 import android.view.MotionEvent;
 import android.view.View;
+import com.mopub.mobileads.test.support.GestureUtils;
 import com.mopub.mobileads.test.support.SdkTestRunner;
 import org.junit.Before;
 import org.junit.Test;
@@ -74,7 +75,7 @@ public void setup() {
 
         savedX = INITIAL_X;
         savedY = INITIAL_Y;
-        actionDown = createActionDown(INITIAL_X, INITIAL_Y);
+        actionDown = GestureUtils.createActionDown(INITIAL_X, INITIAL_Y);
 
         threshold = subject.getMinimumDipsInZigZag();
     }
@@ -353,26 +354,26 @@ private void simulateScroll(float endX, float endY) {
         float y = savedY;
 
         if (areEqual(savedX, endX)) {
-            subject.onScroll(actionDown, createActionMove(x, y), 0, 0);
+            subject.onScroll(actionDown, GestureUtils.createActionMove(x, y), 0, 0);
         } else if (savedX < endX) {
             for (; x < endX; x += stepSizeX) {
-                subject.onScroll(actionDown, createActionMove(x, y), 0, 0);
+                subject.onScroll(actionDown, GestureUtils.createActionMove(x, y), 0, 0);
             }
         } else if (savedX > endX) {
             for (; x > endX; x += stepSizeX) {
-                subject.onScroll(actionDown, createActionMove(x, y), 0, 0);
+                subject.onScroll(actionDown, GestureUtils.createActionMove(x, y), 0, 0);
             }
         }
 
         if (areEqual(savedY, endY)) {
-            subject.onScroll(actionDown, createActionMove(x, y), 0, 0);
+            subject.onScroll(actionDown, GestureUtils.createActionMove(x, y), 0, 0);
         } else if (savedY < endY) {
             for (; y < endY; y += stepSizeY) {
-                subject.onScroll(actionDown, createActionMove(x, y), 0, 0);
+                subject.onScroll(actionDown, GestureUtils.createActionMove(x, y), 0, 0);
             }
         } else if (savedY > endY) {
             for (; y > endY; y += stepSizeY) {
-                subject.onScroll(actionDown, createActionMove(x, y), 0, 0);
+                subject.onScroll(actionDown, GestureUtils.createActionMove(x, y), 0, 0);
             }
         }
 
@@ -397,14 +398,6 @@ private boolean areEqual(float a, float b) {
         return (Math.abs(a - b) < 0.01f);
     }
 
-    private MotionEvent createActionMove(float x, float y) {
-        return MotionEvent.obtain(0, 0, MotionEvent.ACTION_MOVE, x, y, 0);
-    }
-
-    private MotionEvent createActionDown(float x, float y) {
-        return MotionEvent.obtain(0, 0, MotionEvent.ACTION_DOWN, x, y, 0);
-    }
-
     private void assertZigZagState(AdAlertGestureListener.ZigZagState state) {
         assertThat(subject.getCurrentZigZagState()).isEqualTo(state);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
index 453f6b89..fd493f50 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
@@ -32,6 +32,7 @@
 
 package com.mopub.mobileads;
 
+import com.mopub.mobileads.test.support.JsonUtils;
 import com.mopub.mobileads.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import org.apache.http.Header;
@@ -41,11 +42,11 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import static com.mopub.mobileads.AdTypeTranslator.ADMOB_BANNER;
-import static com.mopub.mobileads.AdTypeTranslator.HTML_BANNER;
-import static com.mopub.mobileads.AdTypeTranslator.HTML_INTERSTITIAL;
-import static com.mopub.mobileads.AdTypeTranslator.MRAID_BANNER;
-import static com.mopub.mobileads.AdTypeTranslator.MRAID_INTERSTITIAL;
+import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.ADMOB_BANNER;
+import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.HTML_BANNER;
+import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.HTML_INTERSTITIAL;
+import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MRAID_BANNER;
+import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MRAID_INTERSTITIAL;
 import static com.mopub.mobileads.util.ResponseHeader.AD_TYPE;
 import static com.mopub.mobileads.util.ResponseHeader.CLICKTHROUGH_URL;
 import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_DATA;
@@ -64,12 +65,11 @@
     private AdViewController adViewController;
     private HttpResponse response;
     private String standardExpectedJson;
-    private AdConfiguration adConfiguration;
 
     @Before
     public void setup() {
         adViewController = mock(AdViewController.class);
-        adConfiguration = mock(AdConfiguration.class);
+        AdConfiguration adConfiguration = mock(AdConfiguration.class);
         stub(adViewController.getAdConfiguration()).toReturn(adConfiguration);
         response = new TestHttpResponseWithHeaders(200, "");
         standardExpectedJson = "{\"Scrollable\":\"false\",\"Redirect-Url\":\"redirect\",\"Clickthrough-Url\":\"clickthrough\",\"Html-Response-Body\":\"%3Chtml%3E%3C%2Fhtml%3E\"}";
@@ -110,8 +110,10 @@ public void fromHttpResponse_whenMraidBanner_shouldCreateAnEncodedJsonString() t
         addExpectedResponseHeaders("mraid");
 
         AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(MRAID_BANNER);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey())).isEqualTo(standardExpectedJson);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(MRAID_BANNER.toString());
+
+        String actualJsonData = customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey());
+        JsonUtils.assertJsonStringMapsEqual(actualJsonData, standardExpectedJson);
     }
 
     @Test
@@ -122,8 +124,10 @@ public void fromHttpResponse_whenMraidInterstitial_shouldCreateAnEncodedJsonStri
         stub(adViewController.getMoPubView()).toReturn(mock(MoPubInterstitial.MoPubInterstitialView.class));
 
         AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(MRAID_INTERSTITIAL);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey())).isEqualTo(standardExpectedJson);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(MRAID_INTERSTITIAL.toString());
+
+        String actualJsonData = customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey());
+        JsonUtils.assertJsonStringMapsEqual(actualJsonData, standardExpectedJson);
     }
 
     @Test
@@ -133,8 +137,10 @@ public void fromHttpResponse_whenCustomEventDelegate_shouldConvertAdMobToCustomE
         response.addHeader(NATIVE_PARAMS.getKey(), expectedNativeParams);
 
         AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(ADMOB_BANNER);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey())).isEqualTo(expectedNativeParams);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(ADMOB_BANNER.toString());
+
+        String actualNativeParams = customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey());
+        JsonUtils.assertJsonStringMapsEqual(actualNativeParams, expectedNativeParams);
     }
 
     @Test
@@ -144,8 +150,10 @@ public void fromHttpResponse_whenHtmlBanner_shouldConvertToCustomEventBanner() t
         addExpectedResponseHeaders("html");
 
         AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(HTML_BANNER);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey())).isEqualTo(standardExpectedJson);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(HTML_BANNER.toString());
+
+        String actualJsonData = customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey());
+        JsonUtils.assertJsonStringMapsEqual(actualJsonData, standardExpectedJson);
     }
 
     @Test
@@ -156,8 +164,10 @@ public void fromHttpResponse_whenHtmlInterstitial_shouldConvertToCustomEventInte
         stub(adViewController.getMoPubView()).toReturn(mock(MoPubInterstitial.MoPubInterstitialView.class));
 
         AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(HTML_INTERSTITIAL);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey())).isEqualTo(standardExpectedJson);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(HTML_INTERSTITIAL.toString());
+
+        String actualJsonData = customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey());
+        JsonUtils.assertJsonStringMapsEqual(actualJsonData, standardExpectedJson);
     }
 
     @Test
@@ -173,8 +183,10 @@ public HttpEntity getEntity() {
         response.addHeader(AD_TYPE.getKey(), "html");
 
         AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(HTML_BANNER);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey())).isEqualTo(expectedJson);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(HTML_BANNER.toString());
+
+        String actualJsonData = customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey());
+        JsonUtils.assertJsonStringMapsEqual(actualJsonData, expectedJson);
     }
 
     @Test
@@ -185,8 +197,10 @@ public void fromHttpResponse_whenScrollableIsOne_shouldBeReflectedInJson() throw
 
 
         AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(HTML_BANNER);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey())).isEqualTo(expectedJson);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(HTML_BANNER.toString());
+
+        String actualJsonData = customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey());
+        JsonUtils.assertJsonStringMapsEqual(actualJsonData, expectedJson);
     }
 
     @Test
@@ -195,8 +209,10 @@ public void fromHttpResponse_whenScrollableIsNotSpecified_shouldDefaultToFalseIn
         response.addHeader(AD_TYPE.getKey(), "html");
 
         AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(HTML_BANNER);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey())).isEqualTo(expectedJson);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(HTML_BANNER.toString());
+
+        String actualJsonData = customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey());
+        JsonUtils.assertJsonStringMapsEqual(actualJsonData, expectedJson);
     }
 
     private void addExpectedResponseHeaders(String adType) {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
index 3c636944..992f3181 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
@@ -32,89 +32,115 @@
 
 package com.mopub.mobileads;
 
+import android.app.Activity;
+import android.content.Context;
 import com.mopub.mobileads.test.support.SdkTestRunner;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.ADMOB_BANNER;
+import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.ADMOB_INTERSTITIAL;
+import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.HTML_BANNER;
+import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.HTML_INTERSTITIAL;
+import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MILLENNIAL_BANNER;
+import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MILLENNIAL_INTERSTITIAL;
+import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MRAID_BANNER;
+import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MRAID_INTERSTITIAL;
+import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.VAST_VIDEO_INTERSTITIAL;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.stub;
 
 @RunWith(SdkTestRunner.class)
 public class AdTypeTranslatorTest {
-    private AdTypeTranslator subject;
     private String customEventName;
     private MoPubView moPubView;
     private MoPubInterstitial.MoPubInterstitialView moPubInterstitialView;
+    private Context context;
 
     @Before
     public void setUp() throws Exception {
-        subject = new AdTypeTranslator();
         moPubView = mock(MoPubView.class);
         moPubInterstitialView = mock(MoPubInterstitial.MoPubInterstitialView.class);
+
+        context = new Activity();
+        stub(moPubView.getContext()).toReturn(context);
+        stub(moPubInterstitialView.getContext()).toReturn(context);
     }
 
     @Test
     public void getAdMobBanner() throws Exception {
         customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubView, "admob_native", null);
 
-        assertThat(customEventName).isEqualTo(AdTypeTranslator.ADMOB_BANNER);
+        assertThat(customEventName).isEqualTo("com.mopub.mobileads.GoogleAdMobBanner");
     }
 
     @Test
     public void getAdMobInterstitial() throws Exception {
         customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubInterstitialView, "interstitial", "admob_full");
 
-        assertThat(customEventName).isEqualTo(AdTypeTranslator.ADMOB_INTERSTITIAL);
+        assertThat(customEventName).isEqualTo("com.mopub.mobileads.GoogleAdMobInterstitial");
+    }
+
+    @Ignore("pending")
+    @Test
+    public void getGooglePlayServicesBanner() throws Exception {
+    }
+
+    @Ignore("pending")
+    @Test
+    public void getGooglePlayServicesInterstitial() throws Exception {
     }
 
     @Test
     public void getMillennialBanner() throws Exception {
         customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubView, "millennial_native", null);
 
-        assertThat(customEventName).isEqualTo(AdTypeTranslator.MILLENNIAL_BANNER);
+        assertThat(customEventName).isEqualTo("com.mopub.mobileads.MillennialBanner");
     }
 
     @Test
     public void getMillennnialInterstitial() throws Exception {
         customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubInterstitialView, "interstitial", "millennial_full");
 
-        assertThat(customEventName).isEqualTo(AdTypeTranslator.MILLENNIAL_INTERSTITIAL);
+        assertThat(customEventName).isEqualTo("com.mopub.mobileads.MillennialInterstitial");
     }
 
     @Test
     public void getMraidBanner() throws Exception {
         customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubView, "mraid", null);
 
-        assertThat(customEventName).isEqualTo(AdTypeTranslator.MRAID_BANNER);
+        assertThat(customEventName).isEqualTo("com.mopub.mobileads.MraidBanner");
     }
 
     @Test
     public void getMraidInterstitial() throws Exception {
         customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubInterstitialView, "mraid", null);
 
-        assertThat(customEventName).isEqualTo(AdTypeTranslator.MRAID_INTERSTITIAL);
+        assertThat(customEventName).isEqualTo("com.mopub.mobileads.MraidInterstitial");
     }
 
     @Test
     public void getHtmlBanner() throws Exception {
         customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubView, "html", null);
 
-        assertThat(customEventName).isEqualTo(AdTypeTranslator.HTML_BANNER);
+        assertThat(customEventName).isEqualTo("com.mopub.mobileads.HtmlBanner");
     }
 
     @Test
     public void getHtmlInterstitial() throws Exception {
         customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubInterstitialView, "html", null);
 
-        assertThat(customEventName).isEqualTo(AdTypeTranslator.HTML_INTERSTITIAL);
+        assertThat(customEventName).isEqualTo("com.mopub.mobileads.HtmlInterstitial");
     }
 
     @Test
     public void getVastInterstitial() throws Exception {
         customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubInterstitialView, "interstitial", "vast");
 
-        assertThat(customEventName).isEqualTo(AdTypeTranslator.VAST_VIDEO_INTERSTITIAL);
+        assertThat(customEventName).isEqualTo("com.mopub.mobileads.VastVideoInterstitial");
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
index 884a3478..e6865365 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
@@ -62,6 +62,7 @@
 import static com.mopub.mobileads.AdViewController.DEFAULT_REFRESH_TIME_MILLISECONDS;
 import static com.mopub.mobileads.MoPubErrorCode.INTERNAL_ERROR;
 import static com.mopub.mobileads.MoPubErrorCode.NO_FILL;
+import static com.mopub.mobileads.test.support.ThreadUtils.NETWORK_DELAY;
 import static com.mopub.mobileads.util.Reflection.MethodBuilder;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.fest.assertions.api.Fail.fail;
@@ -167,7 +168,7 @@ public void trackImpression_shouldHttpGetTheImpressionUrl() throws Exception {
         assertThat(expectedUserAgent).isNotNull();
 
         subject.trackImpression();
-        Thread.sleep(300); // does this make the test flaky?
+        ThreadUtils.pause(NETWORK_DELAY); // does this make the test flaky?
 
         HttpRequest request = fakeHttpLayer.getLastSentHttpRequestInfo().getHttpRequest();
         assertThat(request.getFirstHeader("User-Agent").getValue()).isEqualTo(expectedUserAgent);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
index 5623a6f0..d5f13793 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
@@ -41,6 +41,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
 
 import java.util.*;
@@ -53,6 +55,7 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
@@ -192,6 +195,61 @@ public void loadAd_shouldScheduleTimeout_bannerLoadedAndFailed_shouldCancelTimeo
         assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
     }
 
+    @Test
+    public void loadAd_shouldScheduleTimeoutRunnableBeforeCallingLoadBanner() throws Exception {
+        Robolectric.pauseMainLooper();
+
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+
+        Answer assertTimeoutRunnableHasStarted = new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
+                assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+                return null;
+            }
+        };
+
+        doAnswer(assertTimeoutRunnableHasStarted)
+                .when(banner)
+                .loadBanner(
+                        any(Context.class),
+                        any(CustomEventBannerListener.class),
+                        any(Map.class),
+                        any(Map.class)
+                );
+
+        subject.loadAd();
+    }
+
+
+    @Test
+    public void loadAd_whenCallingOnBannerFailed_shouldCancelExistingTimeoutRunnable() throws Exception {
+        Robolectric.pauseMainLooper();
+
+        Answer justCallOnBannerFailed = new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
+                assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+                subject.onBannerFailed(null);
+                assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+                return null;
+            }
+        };
+
+        doAnswer(justCallOnBannerFailed)
+                .when(banner)
+                .loadBanner(
+                        any(Context.class),
+                        any(CustomEventBanner.CustomEventBannerListener.class),
+                        any(Map.class),
+                        any(Map.class)
+                );
+
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        subject.loadAd();
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+    }
+
     @Test
     public void onBannerLoaded_shouldSignalMoPubView() throws Exception {
         View view = new View(new Activity());
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
index 19bad9af..2686b809 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
@@ -39,6 +39,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
 
 import java.util.*;
@@ -50,6 +52,7 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.stub;
@@ -196,6 +199,60 @@ public void loadInterstitial_shouldScheduleTimeout_interstitialLoadedAndFailed_s
         assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
     }
 
+    @Test
+    public void loadInterstitial_shouldScheduleTimeoutRunnableBeforeCallingLoadInterstitial() throws Exception {
+        Robolectric.pauseMainLooper();
+
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+
+        Answer assertTimeoutRunnableHasStarted = new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
+                assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+                return null;
+            }
+        };
+
+        doAnswer(assertTimeoutRunnableHasStarted)
+                .when(interstitial)
+                .loadInterstitial(
+                        any(Context.class),
+                        any(CustomEventInterstitialListener.class),
+                        any(Map.class),
+                        any(Map.class)
+                );
+
+        subject.loadInterstitial();
+    }
+
+    @Test
+    public void loadInterstitial_whenCallingOnInterstitialFailed_shouldCancelExistingTimeoutRunnable() throws Exception {
+        Robolectric.pauseMainLooper();
+
+        Answer justCallOnInterstitialFailed = new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
+                assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+                subject.onInterstitialFailed(null);
+                assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+                return null;
+            }
+        };
+
+        doAnswer(justCallOnInterstitialFailed)
+                .when(interstitial)
+                .loadInterstitial(
+                        any(Context.class),
+                        any(CustomEventInterstitialListener.class),
+                        any(Map.class),
+                        any(Map.class)
+                );
+
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        subject.loadInterstitial();
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+    }
+
     @Test
     public void showInterstitial_shouldCallCustomEventInterstitialShowInterstitial() throws Exception {
         subject.showInterstitial();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/DiskLruCacheTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/DiskLruCacheTest.java
index 40d392b2..dcc1b919 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/DiskLruCacheTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/DiskLruCacheTest.java
@@ -217,6 +217,17 @@ public void putStream_withNullInputStream_shouldNotAddKeyValuePairToCache() thro
         assertThat(success).isFalse();
         assertThat(subject.snapshot().isEmpty()).isTrue();
     }
+    
+    @Test
+    public void putStream_whenHashedFilenameAlreadyInCache_shouldNotReturnFalsePositive() throws Exception {
+        final String fileName = "just a generic filename";
+        final String hashedFileName = Utils.sha1(fileName);
+
+        subject.putStream(hashedFileName, createByteArrayInputStream(10));
+        boolean result = subject.putStream(fileName, createByteArrayInputStream(10));
+
+        assertThat(result).isTrue();
+    }
 
     @Test
     public void putStream_canHandleFileNamesWithSymbols() throws Exception {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java
index 72ddda7b..453f51be 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java
@@ -154,8 +154,6 @@ public void initialization_shouldSetupStartingState() throws Exception {
 
     @Test
     public void initializeJavaScriptState_shouldSetMraidSupportsProperties() throws Exception {
-        verify(mraidView).fireChangeEventForProperty(any(MraidProperty.class));
-
         subject.initializeJavaScriptState();
         verify(mraidView).fireChangeEventForProperty(isA(MraidSupportsProperty.class));
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoViewTest.java
new file mode 100644
index 00000000..2d4521bd
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoViewTest.java
@@ -0,0 +1,116 @@
+/*
+ * Copyright (c) 2010-2013, MoPub Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *  Redistributions of source code must retain the above copyright
+ *   notice, this list of conditions and the following disclaimer.
+ *
+ *  Redistributions in binary form must reproduce the above copyright
+ *   notice, this list of conditions and the following disclaimer in the
+ *   documentation and/or other materials provided with the distribution.
+ *
+ *  Neither the name of 'MoPub Inc.' nor the names of its contributors
+ *   may be used to endorse or promote products derived from this software
+ *   without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import com.mopub.mobileads.test.support.SdkTestRunner;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.shadows.ShadowVideoView;
+
+import static com.mopub.mobileads.MraidVideoPlayerActivity.VIDEO_URL;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.verify;
+import static org.robolectric.Robolectric.shadowOf;
+
+@RunWith(SdkTestRunner.class)
+public class MraidVideoViewTest {
+    private MraidVideoView subject;
+    private Context context;
+    private Intent intent;
+    private BaseVideoView.BaseVideoViewListener baseVideoViewListener;
+
+    @Before
+    public void setUp() throws Exception {
+        context = new Activity();
+        intent = mock(Intent.class);
+        stub(intent.getStringExtra(VIDEO_URL)).toReturn("videoUrl");
+        baseVideoViewListener = mock(BaseVideoView.BaseVideoViewListener.class);
+
+        subject = new MraidVideoView(context, intent, baseVideoViewListener);
+    }
+
+    @Test
+    public void constructor_shouldSetListenersAndVideoPath() throws Exception {
+        ShadowVideoView shadowSubject = shadowOf(subject);
+
+        assertThat(shadowSubject.getOnCompletionListener()).isNotNull();
+        assertThat(shadowSubject.getOnErrorListener()).isNotNull();
+        assertThat(shadowSubject.getVideoPath()).isEqualTo("videoUrl");
+    }
+
+    @Test
+    public void onCompletionListener_shouldCallBaseVideoViewVideoCompleted() throws Exception {
+        ShadowVideoView shadowSubject = shadowOf(subject);
+
+        shadowSubject.getOnCompletionListener().onCompletion(null);
+
+        verify(baseVideoViewListener).videoCompleted(eq(true));
+    }
+
+    @Test
+    public void onCompletion_withNullBaseVideoViewListener_shouldNotBlowUp() throws Exception {
+        subject = new MraidVideoView(context, intent, null);
+        ShadowVideoView shadowSubject = shadowOf(subject);
+
+        shadowSubject.getOnCompletionListener().onCompletion(null);
+
+        // pass
+    }
+
+    @Test
+    public void onErrorListener_shouldCallBaseVideoViewVideoErrorAndReturnFalse() throws Exception {
+        ShadowVideoView shadowSubject = shadowOf(subject);
+
+        boolean result = shadowSubject.getOnErrorListener().onError(null, 0, 0);
+
+        verify(baseVideoViewListener).videoError(false);
+        assertThat(result).isFalse();
+    }
+
+    @Test
+    public void onError_withNullBaseVideoViewListener_shouldNotBlowUp() throws Exception {
+        subject = new MraidVideoView(context, intent, null);
+        ShadowVideoView shadowSubject = shadowOf(subject);
+
+        shadowSubject.getOnErrorListener().onError(null, 0, 0);
+
+        // pass
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidViewTest.java
index 61081b84..d145cf61 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidViewTest.java
@@ -35,13 +35,17 @@
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
+import android.view.View;
 import android.view.ViewGroup;
 import android.webkit.WebViewClient;
+
 import com.mopub.mobileads.resource.MraidJavascript;
 import com.mopub.mobileads.test.support.SdkTestRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Mockito;
 import org.robolectric.Robolectric;
 import org.robolectric.shadows.ShadowWebView;
 
@@ -51,11 +55,13 @@
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.isA;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.times;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
@@ -84,6 +90,103 @@ public void setUp() throws Exception {
         interstitialWebViewClient = interstitialSubject.getMraidWebViewClient();
     }
 
+    @Test
+    public void viewSetToVisibleBeforeReady_shouldNotTriggerMRAIDEvent() throws Exception {
+        MraidView mraidViewSpy = spy(bannerSubject);
+        mraidViewSpy.setHasFiredReadyEvent(false);
+        mraidViewSpy.setVisibility(View.INVISIBLE);
+
+        mraidViewSpy.setVisibility(View.VISIBLE);
+
+        assertThat(mraidViewSpy.getIsVisible()).isTrue();
+
+        verify(mraidViewSpy, never()).fireChangeEventForProperty(any(MraidViewableProperty.class));
+    }
+
+    @Test
+    public void viewSetToVisibleAfterReady_shouldTriggerMRAIDEvent() throws Exception {
+        MraidView mraidViewSpy = spy(bannerSubject);
+        mraidViewSpy.setHasFiredReadyEvent(true);
+        mraidViewSpy.setVisibility(View.INVISIBLE);
+        reset(mraidViewSpy);
+
+        mraidViewSpy.setVisibility(View.VISIBLE);
+
+        assertThat(mraidViewSpy.getIsVisible()).isTrue();
+
+        MraidViewableProperty mraidViewableProperty = captureAndVerifyViewablePropertyChangeEventFired(mraidViewSpy);
+        assertThat(mraidViewableProperty.toJsonPair()).isEqualTo("viewable: true");
+    }
+
+    @Test
+    public void viewSetToVisibleAndThenInvisibleAfterReady_shouldTriggerTwoMRAIDEvents() throws Exception {
+        MraidView mraidViewSpy = spy(bannerSubject);
+        mraidViewSpy.setHasFiredReadyEvent(true);
+        mraidViewSpy.setVisibility(View.INVISIBLE);
+        reset(mraidViewSpy);
+
+        mraidViewSpy.setVisibility(View.VISIBLE);
+
+        MraidViewableProperty mraidViewableProperty = captureAndVerifyViewablePropertyChangeEventFired(mraidViewSpy);
+        assertThat(mraidViewableProperty.toJsonPair()).isEqualTo("viewable: true");
+        reset(mraidViewSpy);
+
+        mraidViewSpy.setVisibility(View.INVISIBLE);
+
+        assertThat(mraidViewSpy.getIsVisible()).isFalse();
+
+        mraidViewableProperty = captureAndVerifyViewablePropertyChangeEventFired(mraidViewSpy);
+        assertThat(mraidViewableProperty.toJsonPair()).isEqualTo("viewable: false");
+    }
+
+    @Test
+    public void viewSetToVisibleAndThenGoneAfterReady_shouldTriggerTwoMRAIDEvents() throws Exception {
+        MraidView mraidViewSpy = spy(bannerSubject);
+        mraidViewSpy.setHasFiredReadyEvent(true);
+        mraidViewSpy.setVisibility(View.INVISIBLE);
+        reset(mraidViewSpy);
+
+        mraidViewSpy.setVisibility(View.VISIBLE);
+
+        MraidViewableProperty mraidViewableProperty = captureAndVerifyViewablePropertyChangeEventFired(mraidViewSpy);
+        assertThat(mraidViewableProperty.toJsonPair()).isEqualTo("viewable: true");
+        reset(mraidViewSpy);
+
+        mraidViewSpy.setVisibility(View.GONE);
+
+        assertThat(mraidViewSpy.getIsVisible()).isFalse();
+
+        mraidViewableProperty = captureAndVerifyViewablePropertyChangeEventFired(mraidViewSpy);
+        assertThat(mraidViewableProperty.toJsonPair()).isEqualTo("viewable: false");
+    }
+
+    @Test
+    public void viewSetToVisibleAndThenInvisibleAndThenVisibleAfterReady_shouldTriggerThreeMRAIDEvents() throws Exception {
+        MraidView mraidViewSpy = spy(bannerSubject);
+        mraidViewSpy.setHasFiredReadyEvent(true);
+        mraidViewSpy.setVisibility(View.INVISIBLE);
+        reset(mraidViewSpy);
+
+        mraidViewSpy.setVisibility(View.VISIBLE);
+
+        MraidViewableProperty mraidViewableProperty = captureAndVerifyViewablePropertyChangeEventFired(mraidViewSpy);
+        assertThat(mraidViewableProperty.toJsonPair()).isEqualTo("viewable: true");
+        reset(mraidViewSpy);
+
+        mraidViewSpy.setVisibility(View.INVISIBLE);
+
+        mraidViewableProperty = captureAndVerifyViewablePropertyChangeEventFired(mraidViewSpy);
+        assertThat(mraidViewableProperty.toJsonPair()).isEqualTo("viewable: false");
+        reset(mraidViewSpy);
+
+        mraidViewSpy.setVisibility(View.VISIBLE);
+
+        assertThat(mraidViewSpy.getIsVisible()).isTrue();
+
+        mraidViewableProperty = captureAndVerifyViewablePropertyChangeEventFired(mraidViewSpy);
+        assertThat(mraidViewableProperty.toJsonPair()).isEqualTo("viewable: true");
+    }
+
     @Test
     public void loadHtmlData_whenDataIsNull_shouldNotBlowUp() throws Exception {
         MraidView mraidViewSpy = spy(bannerSubject);
@@ -234,6 +337,27 @@ public void shouldOverrideUrlLoading_withRedirectUrl_withUserClick_shouldOpenNew
         assertThat(consumeUrlLoading).isTrue();
     }
 
+    @Test
+    public void shouldOverrideUrlLoading_withRelativeUrl_andUserClick_shouldReturnTrue() throws Exception {
+        String relativeUrl = "www.blah.com";
+        bannerSubject.onUserClick();
+
+        boolean consumeUrlLoading = bannerWebViewClient.shouldOverrideUrlLoading(null, relativeUrl);
+
+        Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(startedIntent).isNotNull();
+        assertThat(consumeUrlLoading).isTrue();
+    }
+
+    @Test
+    public void shouldOverrideUrlLoading_withRelativeUrl_andNoUserClick_shouldReturnFalse() throws Exception {
+        String relativeUrl = "www.blah.com";
+
+        boolean consumeUrlLoading = bannerWebViewClient.shouldOverrideUrlLoading(null, relativeUrl);
+
+        assertThat(consumeUrlLoading).isFalse();
+    }
+
     @Test
     public void destroy_shouldRemoveSelfFromParent_beforeCallingDestroy() throws Exception {
         ViewGroup parent = mock(ViewGroup.class);
@@ -245,4 +369,10 @@ public void destroy_shouldRemoveSelfFromParent_beforeCallingDestroy() throws Exc
         verify(parent).removeView(eq(bannerSubject));
         assertThat(shadow.wasDestroyCalled()).isTrue();
     }
+
+    private MraidViewableProperty captureAndVerifyViewablePropertyChangeEventFired(MraidView mraidView) {
+        ArgumentCaptor<MraidViewableProperty> mraidViewablePropertyCaptor = ArgumentCaptor.forClass(MraidViewableProperty.class);
+        verify(mraidView).fireChangeEventForProperty(mraidViewablePropertyCaptor.capture());
+        return mraidViewablePropertyCaptor.getValue();
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java
index 1978d43b..1ad2e61f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java
@@ -1,26 +1,25 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
+import android.net.Uri;
 import com.mopub.mobileads.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.StreamUtils;
+import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
+import com.mopub.mobileads.util.Streams;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
+import org.robolectric.Robolectric;
 
 import java.io.*;
 
 import static com.mopub.mobileads.VastVideoDownloadTask.OnDownloadCompleteListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
@@ -29,44 +28,55 @@
     private DiskLruCache diskLruCache;
     private VastVideoDownloadTask subject;
     private String videoUrl;
-    private File cacheDirectory;
+    private TestHttpResponseWithHeaders response;
 
     @Before
     public void setUp() throws Exception {
         onDownloadCompleteListener = mock(OnDownloadCompleteListener.class);
-        diskLruCache = mock(DiskLruCache.class);
         Activity context = new Activity();
-
-        cacheDirectory = new File(context.getFilesDir(), "test_cache_directory");
-        cacheDirectory.mkdirs();
-        stub(diskLruCache.getCacheDirectory()).toReturn(cacheDirectory);
+        diskLruCache = new DiskLruCache(context, "test_cache_directory", 1000);
 
         videoUrl = "http://www.video.com";
+        response = new TestHttpResponseWithHeaders(200, "responseBody");
+        Robolectric.addPendingHttpResponse(response);
 
         subject = new VastVideoDownloadTask(onDownloadCompleteListener, diskLruCache);
     }
 
     @After
     public void tearDown() throws Exception {
-        cacheDirectory.delete();
+        diskLruCache.evictAll();
     }
 
-    @Ignore("pending")
     @Test
     public void execute_shouldAddToCacheAndSignalDownloadSuccess() throws Exception {
         subject.execute(videoUrl);
 
-        ArgumentCaptor<InputStream> inputStreamCaptor = ArgumentCaptor.forClass(InputStream.class);
-        verify(diskLruCache).putStream(eq(videoUrl), inputStreamCaptor.capture());
-        InputStream inputStream = inputStreamCaptor.getValue();
+        Uri uri = diskLruCache.getUri(videoUrl);
+        File file = new File(uri.toString());
 
-//        assertThat(inputStreamToString(inputStream)).isEqualTo("");
+        assertThat(file.exists()).isTrue();
+        assertThat(file.length()).isEqualTo("responseBody".length());
+
+        verify(onDownloadCompleteListener).onDownloadSuccess();
+        verify(onDownloadCompleteListener, never()).onDownloadFailed();
     }
 
-    @Ignore("pending")
     @Test
     public void execute_withMultipleUrls_shouldParseTheFirstOne() throws Exception {
-        subject.execute(videoUrl, "ignored");
+        String ignoredUrl = "ignored";
+        subject.execute(videoUrl, ignoredUrl);
+
+        Uri uri = diskLruCache.getUri(videoUrl);
+        File expectedFile = new File(uri.toString());
+        Uri ignoredUri = diskLruCache.getUri(ignoredUrl);
+
+        assertThat(expectedFile.exists()).isTrue();
+        assertThat(expectedFile.length()).isEqualTo("responseBody".length());
+        assertThat(ignoredUri).isNull();
+
+        verify(onDownloadCompleteListener).onDownloadSuccess();
+        verify(onDownloadCompleteListener, never()).onDownloadFailed();
     }
 
     @Test
@@ -95,14 +105,11 @@ public void onPostExecute_whenOnDownloadCompleteListenerIsNull_shouldNotBlowUp()
         // pass
     }
 
-    @Ignore("pending")
     @Test
     public void connectToUrl_shouldReturnInputStreamFromHttpConnection() throws Exception {
         InputStream result = subject.connectToUrl(videoUrl);
 
-        String response = inputStreamToString(result);
-        assertThat(response).isNotNull();
-        assertThat(response).isNotEmpty();
+        assertThat(inputStreamToString(result)).isEqualTo("responseBody");
     }
 
     @Test
@@ -124,7 +131,7 @@ public void copyInputStream_withLessThan25MB_shouldCreateFile() throws Exception
         assertThat(result.exists());
         assertThat(result.isFile());
         assertThat(result.getName()).matches("mopub-vast\\d+\\.tmp");
-        assertThat(result.getParentFile()).isEqualTo(cacheDirectory);
+        assertThat(result.getParentFile()).isEqualTo(diskLruCache.getCacheDirectory());
         assertThat(result.length()).isEqualTo(25 * 1000 * 1000 - 1);
 
         result.delete();
@@ -155,30 +162,41 @@ public void copyInputStreamToTempFile_whenInputStreamIsNull_shouldThrowIOExpceti
     @Test
     public void copyTempFileIntoCache_shouldReturnTrueOnSuccess() throws Exception {
         ByteArrayInputStream byteArrayInputStream = StreamUtils.createByteArrayInputStream(20);
-        stub(diskLruCache.putStream(anyString(), any(InputStream.class))).toReturn(true);
 
-        File tempFile = File.createTempFile("something", null, cacheDirectory);
-        new FileOutputStream(tempFile).write(byteArrayInputStream.read());
+        File tempFile = File.createTempFile("something", null, diskLruCache.getCacheDirectory());
+        FileOutputStream fileOutputStream = new FileOutputStream(tempFile);
+        fileOutputStream.write(byteArrayInputStream.read());
+        Streams.closeStream(fileOutputStream);
 
         boolean result = subject.copyTempFileIntoCache(videoUrl, tempFile);
 
         assertThat(result).isTrue();
-        verify(diskLruCache).putStream(eq(videoUrl), any(InputStream.class));
+        assertThat(diskLruCache.getUri(videoUrl)).isNotNull();
 
         tempFile.delete();
     }
 
+    @Ignore("pending")
     @Test
     public void copyTempFileIntoCache_whenUnableToPutInCache_shouldReturnFalse() throws Exception {
         ByteArrayInputStream byteArrayInputStream = StreamUtils.createByteArrayInputStream(20);
-        stub(diskLruCache.putStream(anyString(), any(InputStream.class))).toReturn(false);
 
-        File tempFile = File.createTempFile("something", null, cacheDirectory);
-        new FileOutputStream(tempFile).write(byteArrayInputStream.read());
+//        File tempFile = File.createTempFile("something", null, diskLruCache.getCacheDirectory());
+//        new FileOutputStream(tempFile).write(byteArrayInputStream.read());
 
-        boolean result = subject.copyTempFileIntoCache(videoUrl, tempFile);
+//        File tempFile = new File("/tmp/blah.mp4");
+//        tempFile.createNewFile();
+
+        File tempFile = File.createTempFile("mopub-vast", null, diskLruCache.getCacheDirectory());
+
+        diskLruCache.put(videoUrl, tempFile);
+        diskLruCache.put(Utils.sha1(videoUrl), tempFile);
+        diskLruCache.put(Utils.sha1(Utils.sha1(videoUrl)), tempFile);
 
+        boolean result = subject.copyTempFileIntoCache(videoUrl, tempFile);
         assertThat(result).isFalse();
+
+        tempFile.delete();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
index 3e93b866..2fde566f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
@@ -36,16 +36,13 @@
 import android.content.Context;
 import android.content.Intent;
 import android.net.Uri;
-
 import com.mopub.mobileads.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.mobileads.test.support.TestVastManagerFactory;
 import com.mopub.mobileads.test.support.TestVastVideoDownloadTaskFactory;
 import com.mopub.mobileads.util.vast.VastManager;
 import org.junit.After;
-
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
@@ -181,14 +178,14 @@ public void loadInterstitial_shouldConnectListenerToBroadcastReceiver() throws E
     public void showInterstitial_shouldStartVideoPlayerActivityWithAllValidTrackers() throws Exception {
         stub(vastManager.getMediaFileUrl()).toReturn(videoUrl);
 
-        stub(vastManager.getVideoStartTrackers()).toReturn(wrapInList("start"));
-        stub(vastManager.getVideoFirstQuartileTrackers()).toReturn(wrapInList("first"));
-        stub(vastManager.getVideoMidpointTrackers()).toReturn(wrapInList("mid"));
-        stub(vastManager.getVideoThirdQuartileTrackers()).toReturn(wrapInList("third"));
-        stub(vastManager.getVideoCompleteTrackers()).toReturn(wrapInList("complete"));
-        stub(vastManager.getImpressionTrackers()).toReturn(wrapInList("imp"));
+        stub(vastManager.getVideoStartTrackers()).toReturn(Arrays.asList("start"));
+        stub(vastManager.getVideoFirstQuartileTrackers()).toReturn(Arrays.asList("first"));
+        stub(vastManager.getVideoMidpointTrackers()).toReturn(Arrays.asList("mid"));
+        stub(vastManager.getVideoThirdQuartileTrackers()).toReturn(Arrays.asList("third"));
+        stub(vastManager.getVideoCompleteTrackers()).toReturn(Arrays.asList("complete"));
+        stub(vastManager.getImpressionTrackers()).toReturn(Arrays.asList("imp"));
         stub(vastManager.getClickThroughUrl()).toReturn("clickThrough");
-        stub(vastManager.getClickTrackers()).toReturn(wrapInList("click"));
+        stub(vastManager.getClickTrackers()).toReturn(Arrays.asList("click"));
 
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
         ((VastVideoInterstitial) subject).onComplete(vastManager);
@@ -246,7 +243,6 @@ public void onInvalidate_shouldDisconnectListenerToBroadcastReceiver() throws Ex
         verify(customEventInterstitialListener, never()).onInterstitialDismissed();
     }
 
-    @Ignore("pending")
     @Test
     public void onComplete_whenVideoCacheHit_shouldCallOnDownloadSuccess() throws Exception {
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
@@ -261,7 +257,6 @@ public void onComplete_whenVideoCacheHit_shouldCallOnDownloadSuccess() throws Ex
         verify(vastVideoDownloadTask, never()).execute((String[])anyVararg());
     }
 
-    @Ignore("pending")
     @Test
     public void onComplete_whenVideoCacheMiss_shouldStartVastVideoDownloadTask() throws Exception {
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
@@ -291,10 +286,4 @@ public void onDownloadFailed_shouldSignalOnInterstitialFailed() throws Exception
 
         verify(customEventInterstitialListener).onInterstitialFailed(eq(VIDEO_DOWNLOAD_ERROR));
     }
-
-    private <T> List<T> wrapInList(T object) {
-        List<T> result = new ArrayList<T>();
-        result.add(object);
-        return result;
-    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java
new file mode 100644
index 00000000..b7a20424
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java
@@ -0,0 +1,684 @@
+/*
+ * Copyright (c) 2010-2013, MoPub Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *  Redistributions of source code must retain the above copyright
+ *   notice, this list of conditions and the following disclaimer.
+ *
+ *  Redistributions in binary form must reproduce the above copyright
+ *   notice, this list of conditions and the following disclaimer in the
+ *   documentation and/or other materials provided with the distribution.
+ *
+ *  Neither the name of 'MoPub Inc.' nor the names of its contributors
+ *   may be used to endorse or promote products derived from this software
+ *   without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.media.MediaPlayer;
+import android.view.View;
+import com.mopub.mobileads.test.support.GestureUtils;
+import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
+import com.mopub.mobileads.test.support.ThreadUtils;
+import org.apache.http.HttpRequest;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.maven.artifact.ant.shaded.ReflectionUtils;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.shadows.ShadowVideoView;
+
+import java.util.*;
+
+import static com.mopub.mobileads.BaseVideoView.BaseVideoViewListener;
+import static com.mopub.mobileads.MraidVideoPlayerActivity.VIDEO_URL;
+import static com.mopub.mobileads.VastVideoView.VIDEO_CLICK_THROUGH_TRACKERS;
+import static com.mopub.mobileads.VastVideoView.VIDEO_CLICK_THROUGH_URL;
+import static com.mopub.mobileads.VastVideoView.VIDEO_COMPLETE_TRACKERS;
+import static com.mopub.mobileads.VastVideoView.VIDEO_FIRST_QUARTER_TRACKERS;
+import static com.mopub.mobileads.VastVideoView.VIDEO_IMPRESSION_TRACKERS;
+import static com.mopub.mobileads.VastVideoView.VIDEO_MID_POINT_TRACKERS;
+import static com.mopub.mobileads.VastVideoView.VIDEO_START_TRACKERS;
+import static com.mopub.mobileads.VastVideoView.VIDEO_THIRD_QUARTER_TRACKERS;
+import static com.mopub.mobileads.test.support.ThreadUtils.NETWORK_DELAY;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.fest.assertions.api.Fail.fail;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.verify;
+import static org.robolectric.Robolectric.shadowOf;
+
+@RunWith(SdkTestRunner.class)
+public class VastVideoViewTest {
+    private VastVideoView subject;
+    private Context context;
+    private BaseVideoViewListener baseVideoViewListener;
+    private MediaPlayer.OnCompletionListener defaultOnCompletionListener;
+    private MediaPlayer.OnErrorListener defaultOnErrorListener;
+    private ShadowVideoView shadowSubject;
+    private View.OnTouchListener defaultOnTouchListener;
+    private MediaPlayer.OnPreparedListener defaultOnPreparedListener;
+    private MediaPlayer mediaPlayer;
+
+    @Before
+    public void setUp() throws Exception {
+        mediaPlayer = mock(MediaPlayer.class);
+        context = new Activity();
+        baseVideoViewListener = mock(BaseVideoViewListener.class);
+
+        // we want to pause all threads in this test, so that we can properly test the network calls
+        Robolectric.getUiThreadScheduler().pause();
+        Robolectric.getBackgroundScheduler().pause();
+    }
+
+    @After
+    public void tearDown() throws Exception {
+        Robolectric.getUiThreadScheduler().reset();
+        Robolectric.getBackgroundScheduler().reset();
+        Robolectric.clearPendingHttpResponses();
+    }
+
+    @Test
+    public void constructor_shouldSetListenersAndVideoPath() throws Exception {
+        initializeSubject(createIntentForVastVideo(), null);
+
+        assertThat(defaultOnCompletionListener).isNotNull();
+        assertThat(defaultOnErrorListener).isNotNull();
+        assertThat(defaultOnTouchListener).isNotNull();
+        assertThat(defaultOnPreparedListener).isNotNull();
+
+        assertThat(shadowSubject.getVideoPath()).isEqualTo("http://video");
+        assertThat(subject.hasFocus()).isTrue();
+    }
+
+    @Test
+    public void constructor_shouldNotChangeShowCloseButtonDelay() throws Exception {
+        initializeSubject(createIntentForVastVideo(), null);
+
+        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(VastVideoView.DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
+    }
+
+    @Test
+    public void constructor_shouldPingStartAndImpressionTrackers() throws Exception {
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "start"));
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "imp"));
+
+        Intent intent = createIntentForVastVideo();
+        addExtrasToStub(intent, VIDEO_START_TRACKERS, new ArrayList<String>(Arrays.asList("http://start")));
+        addExtrasToStub(intent, VIDEO_IMPRESSION_TRACKERS, new ArrayList<String>(Arrays.asList("http://impressions")));
+        initializeSubject(intent, null);
+
+        Robolectric.getBackgroundScheduler().unPause();
+        ThreadUtils.pause(NETWORK_DELAY);
+
+        assertNetworkCallsMade("http://start", "http://impressions");
+    }
+
+    @Test
+    public void constructor_shouldBeginVideoProgressChecker() throws Exception {
+        initializeSubject(createIntentForVastVideo(), null);
+
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+    }
+
+    @Test
+    public void onPrepared_whenDurationIsLessThanMaxVideoDurationForCloseButton_shouldSetShowCloseButtonDelayToDuration() throws Exception {
+        initializeSubject(createIntentForVastVideo(), null);
+
+        // by default, duration is -1 since the video hasn't started playing.
+        int duration = subject.getDuration();
+        assertThat(duration).isLessThan(VastVideoView.MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON);
+
+        defaultOnPreparedListener.onPrepared(null);
+
+        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(duration);
+    }
+
+    @Test
+    public void onPrepared_whenDurationIsGreaterThanMaxVideoDurationForCloseButton_shouldNotSetShowCloseButtonDelay() throws Exception {
+        stub(mediaPlayer.getDuration()).toReturn(16001);
+        initializeSubject(createIntentForVastVideo(), null);
+        setMediaPlayer(mediaPlayer);
+
+        defaultOnPreparedListener.onPrepared(null);
+
+        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(5000);
+    }
+
+    @Test
+    public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickBeforeEnd_shouldDoNothing() throws Exception {
+        Intent intent = createIntentForVastVideo();
+        addExtrasToStub(intent, VIDEO_CLICK_THROUGH_URL, "http://clickThroughUrl");
+
+        stub(mediaPlayer.getDuration()).toReturn(15999);
+        stub(mediaPlayer.getCurrentPosition()).toReturn(15998);
+
+        initializeSubject(intent, null);
+        setMediaPlayer(mediaPlayer);
+        defaultOnPreparedListener.onPrepared(mediaPlayer);
+
+        Robolectric.getUiThreadScheduler().unPause();
+
+        defaultOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
+
+        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(nextStartedActivity).isNull();
+    }
+
+    @Test
+    public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickAfterEnd_shouldStartMraidBrowser() throws Exception {
+        Intent intent = createIntentForVastVideo();
+        addExtrasToStub(intent, VIDEO_CLICK_THROUGH_URL, "http://clickThroughUrl");
+
+        stub(mediaPlayer.getDuration()).toReturn(15999);
+        stub(mediaPlayer.getCurrentPosition()).toReturn(16001);
+
+        initializeSubject(intent, null);
+        setMediaPlayer(mediaPlayer);
+        defaultOnPreparedListener.onPrepared(mediaPlayer);
+
+        Robolectric.getUiThreadScheduler().unPause();
+
+        defaultOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
+
+        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(nextStartedActivity).isNotNull();
+        assertThat(nextStartedActivity.getStringExtra(MraidBrowser.URL_EXTRA)).isEqualTo("http://clickThroughUrl");
+        assertThat(nextStartedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MraidBrowser");
+    }
+
+    @Test
+    public void onTouch_withTouchUp_whenVideoLongerThan16Seconds_andClickBefore5Seconds_shouldDoNothing() throws Exception {
+        Intent intent = createIntentForVastVideo();
+        addExtrasToStub(intent, VIDEO_CLICK_THROUGH_URL, "http://clickThroughUrl");
+
+        stub(mediaPlayer.getDuration()).toReturn(100000);
+        stub(mediaPlayer.getCurrentPosition()).toReturn(4999);
+
+        initializeSubject(intent, null);
+        setMediaPlayer(mediaPlayer);
+        defaultOnPreparedListener.onPrepared(mediaPlayer);
+
+        Robolectric.getUiThreadScheduler().unPause();
+
+        defaultOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
+
+        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(nextStartedActivity).isNull();
+    }
+
+    @Test
+    public void onTouch_withTouchUp_whenVideoLongerThan16Seconds_andClickAfter5Seconds_shouldStartMraidBrowser() throws Exception {
+        Intent intent = createIntentForVastVideo();
+        addExtrasToStub(intent, VIDEO_CLICK_THROUGH_URL, "http://clickThroughUrl");
+
+        stub(mediaPlayer.getDuration()).toReturn(100000);
+        stub(mediaPlayer.getCurrentPosition()).toReturn(5001);
+
+        initializeSubject(intent, null);
+        setMediaPlayer(mediaPlayer);
+        defaultOnPreparedListener.onPrepared(mediaPlayer);
+
+        Robolectric.getUiThreadScheduler().unPause();
+
+        defaultOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
+
+        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(nextStartedActivity).isNotNull();
+        assertThat(nextStartedActivity.getStringExtra(MraidBrowser.URL_EXTRA)).isEqualTo("http://clickThroughUrl");
+        assertThat(nextStartedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MraidBrowser");
+    }
+
+    @Test
+    public void onTouch_whenCloseButtonVisible_shouldPingClickThroughTrackers() throws Exception {
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "body"));
+
+        Intent intent = createIntentForVastVideo();
+        addExtrasToStub(intent, VIDEO_CLICK_THROUGH_TRACKERS, new ArrayList<String>(Arrays.asList("http://clickThroughTrackers")));
+        initializeSubject(intent, null);
+
+        subject.setCloseButtonVisible(true);
+
+        defaultOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
+        ThreadUtils.pause(NETWORK_DELAY);
+
+        assertNetworkCallsMade("http://clickThroughTrackers");
+    }
+
+    @Test
+    public void onTouch_whenCloseButtonNotVisible_shouldNotPingClickThroughTrackers() throws Exception {
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "body"));
+
+        Intent intent = createIntentForVastVideo();
+        addExtrasToStub(intent, VIDEO_CLICK_THROUGH_TRACKERS, new ArrayList<String>(Arrays.asList("http://clickThroughTrackers")));
+        initializeSubject(intent, null);
+
+        subject.setCloseButtonVisible(false);
+
+        defaultOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
+        ThreadUtils.pause(NETWORK_DELAY);
+
+        assertThat(Robolectric.getNextSentHttpRequest()).isNull();
+    }
+
+    @Test
+    public void onTouch_withNullBaseVideoViewListener_andActionTouchUp_shouldReturnTrueAndNotBlowUp() throws Exception {
+        initializeSubject(createIntentForVastVideo(), null);
+
+        boolean result = defaultOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
+
+        // pass
+
+        assertThat(result).isTrue();
+    }
+
+    @Test
+    public void onTouch_withActionTouchDown_shouldConsumeMotionEvent() throws Exception {
+        initializeSubject(createIntentForVastVideo(), null);
+
+        boolean result = defaultOnTouchListener.onTouch(null, GestureUtils.createActionDown(0, 0));
+
+        assertThat(result).isTrue();
+    }
+
+    @Test
+    public void onCompletion_shouldFireVideoCompleted() throws Exception {
+        initializeSubject(createIntentForVastVideo(), baseVideoViewListener);
+
+        defaultOnCompletionListener.onCompletion(null);
+
+        verify(baseVideoViewListener).videoCompleted(eq(false));
+    }
+
+    @Test
+    public void onCompletion_withNullBaseVideoViewListener_shouldNotBlowUp() throws Exception {
+        initializeSubject(createIntentForVastVideo(), null);
+
+        defaultOnCompletionListener.onCompletion(null);
+
+        // pass
+    }
+
+    @Test
+    public void onCompletion_shouldPingCompletionTrackers() throws Exception {
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "body"));
+
+        Intent intent = createIntentForVastVideo();
+        addExtrasToStub(intent, VIDEO_COMPLETE_TRACKERS, new ArrayList<String>(Arrays.asList("http://completeTrackers")));
+        initializeSubject(intent, null);
+
+        defaultOnCompletionListener.onCompletion(null);
+        ThreadUtils.pause(NETWORK_DELAY);
+
+        assertNetworkCallsMade("http://completeTrackers");
+    }
+
+    @Test
+    public void onCompletion_shouldPreventOnResumeFromStartingVideo() throws Exception {
+        initializeSubject(createIntentForVastVideo(), null);
+
+        defaultOnCompletionListener.onCompletion(null);
+
+        subject.onResume();
+
+        assertThat(shadowSubject.isPlaying()).isFalse();
+    }
+
+    @Test
+    public void onCompletion_shouldStopProgressChecker() throws Exception {
+        initializeSubject(createIntentForVastVideo(), baseVideoViewListener);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+
+        defaultOnCompletionListener.onCompletion(null);
+
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+    }
+
+    @Test
+    public void onError_shouldFireVideoErrorAndReturnFalse() throws Exception {
+        initializeSubject(createIntentForVastVideo(), baseVideoViewListener);
+
+        boolean result = defaultOnErrorListener.onError(null, 0, 0);
+
+        assertThat(result).isFalse();
+        verify(baseVideoViewListener).videoError(eq(false));
+    }
+
+    @Test
+    public void onError_withNullBaseVideoViewListener_shouldNotBlowUp () throws Exception {
+        initializeSubject(createIntentForVastVideo(), baseVideoViewListener);
+
+        boolean result = defaultOnErrorListener.onError(null, 0, 0);
+
+        assertThat(result).isFalse();
+    }
+
+    @Test
+    public void onError_shouldStopProgressChecker() throws Exception {
+        initializeSubject(createIntentForVastVideo(), baseVideoViewListener);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+
+        defaultOnErrorListener.onError(null, 0, 0);
+
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+    }
+
+    @Test
+    public void videoProgressCheckerRunnableRun_shouldFireOffAllProgressTrackers() throws Exception {
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "first"));
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "second"));
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "third"));
+        stub(mediaPlayer.getDuration()).toReturn(9001);
+        stub(mediaPlayer.getCurrentPosition()).toReturn(9002);
+        Intent intent = createIntentForVastVideo();
+        addExtrasToStub(intent, VIDEO_FIRST_QUARTER_TRACKERS, new ArrayList<String>(Arrays.asList("http://first")));
+        addExtrasToStub(intent, VIDEO_MID_POINT_TRACKERS, new ArrayList<String>(Arrays.asList("http://second")));
+        addExtrasToStub(intent, VIDEO_THIRD_QUARTER_TRACKERS, new ArrayList<String>(Arrays.asList("http://third")));
+        initializeSubject(intent, null);
+        setMediaPlayer(mediaPlayer);
+
+        // this runs the videoProgressChecker
+        runRunnableWithNetworkCall();
+
+        assertNetworkCallsMade("http://first", "http://second", "http://third");
+    }
+
+    @Test
+    public void videoProgressCheckerRunnableRun_whenDurationIsInvalid_shouldNotMakeAnyNetworkCalls() throws Exception {
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "error"));
+        initializeSubject(createIntentForVastVideo(), null);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+
+        Robolectric.getUiThreadScheduler().runOneTask();
+        // make sure the repeated task hasn't run yet
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        Robolectric.getBackgroundScheduler().unPause();
+        ThreadUtils.pause(NETWORK_DELAY);
+
+        assertThat(Robolectric.getNextSentHttpRequest()).isNull();
+    }
+
+    @Test
+    public void videoProgressCheckerRunnableRun_whenProgressIsPastFirstQuartile_shouldOnlyPingFirstQuartileTrackersOnce() throws Exception {
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "first"));
+        stub(mediaPlayer.getDuration()).toReturn(100);
+        stub(mediaPlayer.getCurrentPosition()).toReturn(26);
+        Intent intent = createIntentForVastVideo();
+        addExtrasToStub(intent, VIDEO_FIRST_QUARTER_TRACKERS, new ArrayList<String>(Arrays.asList("http://first")));
+        initializeSubject(intent, null);
+        setMediaPlayer(mediaPlayer);
+
+        runRunnableWithNetworkCall();
+
+        assertNetworkCallsMade("http://first");
+
+        // run checker another time
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "first2"));
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+
+        runRunnableWithNetworkCall();
+
+        assertThat(Robolectric.getNextSentHttpRequest()).isNull();
+    }
+
+    @Test
+    public void videoProgressCheckerRunnableRun_whenProgressIsPastMidQuartile_shouldPingFirstQuartileTrackers_andMidQuartileTrackersBothOnlyOnce() throws Exception {
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "first"));
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "mid"));
+        stub(mediaPlayer.getDuration()).toReturn(100);
+        stub(mediaPlayer.getCurrentPosition()).toReturn(51);
+        Intent intent = createIntentForVastVideo();
+        addExtrasToStub(intent, VIDEO_FIRST_QUARTER_TRACKERS, new ArrayList<String>(Arrays.asList("http://first")));
+        addExtrasToStub(intent, VIDEO_MID_POINT_TRACKERS, new ArrayList<String>(Arrays.asList("http://mid")));
+        initializeSubject(intent, null);
+        setMediaPlayer(mediaPlayer);
+
+        runRunnableWithNetworkCall();
+
+        assertNetworkCallsMade("http://first", "http://mid");
+
+        // run checker again
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "first2"));
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "mid2"));
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+
+        runRunnableWithNetworkCall();
+
+        assertThat(Robolectric.getNextSentHttpRequest()).isNull();
+    }
+
+    @Test
+    public void videoProgressCheckerRunnableRun_whenProgressIsPastThirdQuartile_shouldPingFirstQuartileTrackers_andMidQuartileTrackers_andThirdQuartileTrackersAllOnlyOnce() throws Exception {
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "first"));
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "mid"));
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "third"));
+        stub(mediaPlayer.getDuration()).toReturn(100);
+        stub(mediaPlayer.getCurrentPosition()).toReturn(76);
+        Intent intent = createIntentForVastVideo();
+        addExtrasToStub(intent, VIDEO_FIRST_QUARTER_TRACKERS, new ArrayList<String>(Arrays.asList("http://first")));
+        addExtrasToStub(intent, VIDEO_MID_POINT_TRACKERS, new ArrayList<String>(Arrays.asList("http://mid")));
+        addExtrasToStub(intent, VIDEO_THIRD_QUARTER_TRACKERS, new ArrayList<String>(Arrays.asList("http://third")));
+        initializeSubject(intent, null);
+        setMediaPlayer(mediaPlayer);
+
+        runRunnableWithNetworkCall();
+
+        assertNetworkCallsMade("http://first", "http://mid", "http://third");
+
+        // run checker again
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "first2"));
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "mid2"));
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "third2"));
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+
+        runRunnableWithNetworkCall();
+
+        assertThat(Robolectric.getNextSentHttpRequest()).isNull();
+    }
+
+    @Test
+    public void videoProgressCheckerRunnableRun_asVideoPlays_shouldPingAllThreeTrackersIndividuallyOnce() throws Exception {
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "first"));
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "mid"));
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "third"));
+        Robolectric.addPendingHttpResponse(new TestHttpResponseWithHeaders(200, "error"));
+        stub(mediaPlayer.getDuration()).toReturn(100);
+        Intent intent = createIntentForVastVideo();
+        addExtrasToStub(intent, VIDEO_FIRST_QUARTER_TRACKERS, new ArrayList<String>(Arrays.asList("http://first")));
+        addExtrasToStub(intent, VIDEO_MID_POINT_TRACKERS, new ArrayList<String>(Arrays.asList("http://mid")));
+        addExtrasToStub(intent, VIDEO_THIRD_QUARTER_TRACKERS, new ArrayList<String>(Arrays.asList("http://third")));
+        initializeSubject(intent, null);
+        setMediaPlayer(mediaPlayer);
+
+        // before any trackers are fired
+        fastForwardMediaPlayerAndAssertRequestMade(1, null);
+
+        fastForwardMediaPlayerAndAssertRequestMade(24, null);
+
+        // after it hits first tracker
+        fastForwardMediaPlayerAndAssertRequestMade(26, "http://first");
+
+        // before mid quartile is hit
+        fastForwardMediaPlayerAndAssertRequestMade(49, null);
+
+        // after it hits mid trackers
+        fastForwardMediaPlayerAndAssertRequestMade(51, "http://mid");
+
+        // before third quartile is hit
+        fastForwardMediaPlayerAndAssertRequestMade(74, null);
+
+        // after third quartile is hit
+        fastForwardMediaPlayerAndAssertRequestMade(76, "http://third");
+
+        // way after third quartile is hit
+        fastForwardMediaPlayerAndAssertRequestMade(99, null);
+    }
+
+    @Test
+    public void videoProgressCheckerRunnableRun_whenCurrentPositionIsGreaterThanShowCloseButtonDelay_shouldShowCloseButton() throws Exception {
+        stub(mediaPlayer.getDuration()).toReturn(5002);
+        stub(mediaPlayer.getCurrentPosition()).toReturn(5001);
+
+        initializeSubject(createIntentForVastVideo(), baseVideoViewListener);
+        setMediaPlayer(mediaPlayer);
+
+        Robolectric.getUiThreadScheduler().unPause();
+
+        verify(baseVideoViewListener).showCloseButton();
+    }
+
+    @Test
+    public void videoProgressCheckerRunnableRun_whenCurrentPositionIsGreaterThanShowCloseButtonDelay_andBaseVideoViewListenerIsNull_shouldNotBlowUp() throws Exception {
+        stub(mediaPlayer.getDuration()).toReturn(5002);
+        stub(mediaPlayer.getCurrentPosition()).toReturn(5001);
+
+        initializeSubject(createIntentForVastVideo(), null);
+        setMediaPlayer(mediaPlayer);
+
+        Robolectric.getUiThreadScheduler().unPause();
+
+        // pass
+    }
+
+    @Test
+    public void videoProgressCheckerRunnableRun_whenVideoProgressShouldNotBeChecked_shouldNotPostAnotherRunnable() throws Exception {
+        initializeSubject(createIntentForVastVideo(), null);
+        Robolectric.getUiThreadScheduler().unPause();
+
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        subject.setIsVideoProgressShouldBeChecked(false);
+
+        Robolectric.getUiThreadScheduler().runOneTask();
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+    }
+
+    @Test
+    public void onPause_shouldStopProgressChecker() throws Exception {
+        initializeSubject(createIntentForVastVideo(), null);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+
+        subject.onPause();
+
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+    }
+
+    @Test
+    public void onResume_shouldResumeVideoProgressChecker() throws Exception {
+        initializeSubject(createIntentForVastVideo(), null);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+
+        subject.onPause();
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+
+        subject.onResume();
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+    }
+
+    @Test
+    public void onResume_shouldSetVideoViewStateToStarted() throws Exception {
+        initializeSubject(createIntentForVastVideo(), null);
+
+        subject.onResume();
+
+        assertThat(shadowSubject.getCurrentVideoState()).isEqualTo(ShadowVideoView.START);
+        assertThat(shadowSubject.getPrevVideoState()).isNotEqualTo(ShadowVideoView.START);
+    }
+
+    private void initializeSubject(final Intent intent, final BaseVideoViewListener baseVideoViewListener) {
+        subject = new VastVideoView(context, intent, baseVideoViewListener);
+
+        shadowSubject = shadowOf(subject);
+        defaultOnCompletionListener = shadowSubject.getOnCompletionListener();
+        defaultOnErrorListener = shadowSubject.getOnErrorListener();
+        defaultOnTouchListener = shadowSubject.getOnTouchListener();
+        defaultOnPreparedListener = shadowSubject.getOnPreparedListener();
+    }
+
+    private Intent createIntentForVastVideo() {
+        Intent result = mock(Intent.class);
+        stub(result.getStringExtra(VIDEO_URL)).toReturn("http://video");
+        return result;
+    }
+
+    private Intent addExtrasToStub(Intent intent, String key, String value) {
+        stub(intent.getStringExtra(eq(key))).toReturn(value);
+        return intent;
+    }
+
+    private Intent addExtrasToStub(Intent intent, String key, ArrayList<String> value) {
+        stub(intent.getStringArrayListExtra(eq(key))).toReturn(value);
+        return intent;
+    }
+
+    private void setMediaPlayer(MediaPlayer mockMediaPlayer) throws IllegalAccessException {
+        // tricks the media player to think it's playing currently
+        ReflectionUtils.setVariableValueInObject(subject, "mMediaPlayer", mockMediaPlayer);
+        int state = (Integer) ReflectionUtils.getValueIncludingSuperclasses("STATE_PLAYING", subject);
+        ReflectionUtils.setVariableValueInObject(subject, "mCurrentState", state);
+    }
+
+    private void runRunnableWithNetworkCall() {
+        Robolectric.getUiThreadScheduler().runOneTask();
+        Robolectric.getBackgroundScheduler().unPause();
+        ThreadUtils.pause(NETWORK_DELAY);
+        Robolectric.getBackgroundScheduler().pause();
+    }
+
+    // note: this is needed because network calls don't always return in order.
+    private void assertNetworkCallsMade(String... urls) {
+        if (urls == null || urls.length == 0) {
+            fail("your test shouldn't call this method with nothing in it");
+        }
+
+        List<String> expectedUris = Arrays.asList(urls);
+        List<String> actualUris = new ArrayList<String>();
+
+        HttpRequest httpRequest;
+        while ((httpRequest = Robolectric.getNextSentHttpRequest()) != null) {
+            assertThat(httpRequest).isInstanceOf(HttpGet.class);
+            actualUris.add(((HttpGet) httpRequest).getURI().toString());
+        }
+
+        assertThat(expectedUris.size()).isEqualTo(actualUris.size());
+
+        Collections.sort(expectedUris);
+        Collections.sort(actualUris);
+
+        assertThat(expectedUris).isEqualTo(actualUris);
+    }
+
+    private void fastForwardMediaPlayerAndAssertRequestMade(int time, String... uri) throws Exception {
+        stub(mediaPlayer.getCurrentPosition()).toReturn(time);
+        runRunnableWithNetworkCall();
+
+        if (uri == null) {
+            assertThat(Robolectric.getNextSentHttpRequest()).isNull();
+        } else {
+            assertNetworkCallsMade(uri);
+        }
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java
index 9ad8baa8..6bae7304 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java
@@ -32,14 +32,15 @@
 
 package com.mopub.mobileads.factories;
 
+import com.mopub.mobileads.AdTypeTranslator;
 import com.mopub.mobileads.CustomEventBanner;
 import com.mopub.mobileads.test.support.SdkTestRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import static com.mopub.mobileads.AdTypeTranslator.HTML_BANNER;
-import static com.mopub.mobileads.AdTypeTranslator.MRAID_BANNER;
+import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.HTML_BANNER;
+import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MRAID_BANNER;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
@@ -58,8 +59,8 @@ public void create_shouldCreateBanners() throws Exception {
         assertCustomEventClassCreated(HTML_BANNER);
     }
 
-    private void assertCustomEventClassCreated(String customEventName) throws Exception {
-        CustomEventBanner customEventBanner = subject.internalCreate(customEventName);
-        assertThat(customEventBanner.getClass().getName()).isEqualTo(customEventName);
+    private void assertCustomEventClassCreated(AdTypeTranslator.CustomEventType customEventType) throws Exception {
+        CustomEventBanner customEventBanner = subject.internalCreate(customEventType.toString());
+        assertThat(customEventBanner.getClass().getName()).isEqualTo(customEventType.toString());
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java
index 23bb2def..fd94ae51 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java
@@ -32,14 +32,15 @@
 
 package com.mopub.mobileads.factories;
 
+import com.mopub.mobileads.AdTypeTranslator;
 import com.mopub.mobileads.CustomEventInterstitial;
 import com.mopub.mobileads.test.support.SdkTestRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import static com.mopub.mobileads.AdTypeTranslator.HTML_INTERSTITIAL;
-import static com.mopub.mobileads.AdTypeTranslator.MRAID_INTERSTITIAL;
+import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.HTML_INTERSTITIAL;
+import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MRAID_INTERSTITIAL;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
@@ -58,8 +59,8 @@ public void create_shouldCreateInterstitials() throws Exception {
         assertCustomEventClassCreated(HTML_INTERSTITIAL);
     }
 
-    private void assertCustomEventClassCreated(String customEventName) throws Exception {
-        CustomEventInterstitial customEventInterstitial = subject.internalCreate(customEventName);
-        assertThat(customEventInterstitial.getClass().getName()).isEqualTo(customEventName);
+    private void assertCustomEventClassCreated(AdTypeTranslator.CustomEventType customEventType) throws Exception {
+        CustomEventInterstitial customEventInterstitial = subject.internalCreate(customEventType.toString());
+        assertThat(customEventInterstitial.getClass().getName()).isEqualTo(customEventType.toString());
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Lists.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/GestureUtils.java
similarity index 74%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/util/Lists.java
rename to mopub-sdk/src/test/java/com/mopub/mobileads/test/support/GestureUtils.java
index bddcaf72..b9b9fa5a 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Lists.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/GestureUtils.java
@@ -30,23 +30,20 @@
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-package com.mopub.mobileads.util;
+package com.mopub.mobileads.test.support;
 
-import java.util.*;
+import android.view.MotionEvent;
 
-public class Lists {
-    public static ArrayList<String> asStringArrayList(final List<String> list) {
-        ArrayList<String> result = new ArrayList<String>();
-
-        if (list == null) {
-            return result;
-        }
+public class GestureUtils {
+    public static MotionEvent createActionMove(float x, float y) {
+        return MotionEvent.obtain(0, 0, MotionEvent.ACTION_MOVE, x, y, 0);
+    }
 
-        if (list instanceof ArrayList) {
-            return (ArrayList<String>) list;
-        }
+    public static MotionEvent createActionDown(float x, float y) {
+        return MotionEvent.obtain(0, 0, MotionEvent.ACTION_DOWN, x, y, 0);
+    }
 
-        Collections.copy(list, result);
-        return result;
+    public static MotionEvent createActionUp(float x, float y) {
+        return MotionEvent.obtain(0, 0, MotionEvent.ACTION_UP, x, y, 0);
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java
new file mode 100644
index 00000000..1569764a
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java
@@ -0,0 +1,40 @@
+package com.mopub.mobileads.test.support;
+
+import com.mopub.mobileads.util.Json;
+
+import java.util.Collections;
+import java.util.Map;
+import java.util.Set;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.fest.assertions.api.Assertions.fail;
+
+public class JsonUtils {
+    // Assert that two shallow jsonStrings representing <String,String> maps are equal
+    public static void assertJsonStringMapsEqual(String a, String b) {
+        Map<String, String> mapA = Collections.emptyMap();
+        Map<String, String> mapB = Collections.emptyMap();
+
+        try {
+            mapA = Json.jsonStringToMap(a);
+        } catch (Exception e) {
+            fail("Unable to turn json into map: " + a);
+        }
+
+        try {
+            mapB = Json.jsonStringToMap(b);
+        } catch (Exception e) {
+            fail("Unable to turn json into map: " + b);
+        }
+
+        assertThat(mapA.size()).isEqualTo(mapB.size());
+
+        Set<String> keysA = mapA.keySet();
+        Set<String> keysB = mapB.keySet();
+        assertThat(keysA).isEqualTo(keysB);
+
+        for (final String key : keysA) {
+            assertThat(mapA.get(key)).isEqualTo(mapB.get(key));
+        }
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ThreadUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ThreadUtils.java
index e221e901..5e0b0fdb 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ThreadUtils.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ThreadUtils.java
@@ -34,6 +34,8 @@
 
 // note: keep this in test/support folder. this is not intended to be of Utility usage
 public class ThreadUtils {
+    public static final long NETWORK_DELAY = 500;
+
     public static void pause(long millis){
         try {
             Thread.sleep(millis);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpClientsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpClientsTest.java
index 40d3deeb..bbe55de4 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpClientsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpClientsTest.java
@@ -1,13 +1,12 @@
 package com.mopub.mobileads.util;
 
 import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.ThreadUtils;
 import org.apache.http.client.HttpClient;
 import org.apache.http.conn.ClientConnectionManager;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
@@ -17,6 +16,7 @@
 @RunWith(SdkTestRunner.class)
 public class HttpClientsTest {
 
+    public static final int HTTP_CLIENT_SHUTDOWN_TIME = 100;
     private HttpClient httpClient;
     private ClientConnectionManager clientConnectionManager;
 
@@ -27,12 +27,11 @@ public void setUp() throws Exception {
         stub(httpClient.getConnectionManager()).toReturn(clientConnectionManager);
     }
 
-    @Ignore("pending")
     @Test
     public void safeShutdown_shouldShutdownHttpClient() throws Exception {
         HttpClients.safeShutdown(httpClient);
 
-        Robolectric.runBackgroundTasks();
+        ThreadUtils.pause(HTTP_CLIENT_SHUTDOWN_TIME);
 
         verify(clientConnectionManager).shutdown();
     }
@@ -41,7 +40,7 @@ public void safeShutdown_shouldShutdownHttpClient() throws Exception {
     public void safeShutdown_withNullHttpClient_shouldNotBlowUp() throws Exception {
         HttpClients.safeShutdown(null);
 
-        Robolectric.runBackgroundTasks();
+        ThreadUtils.pause(HTTP_CLIENT_SHUTDOWN_TIME);
 
         verify(clientConnectionManager, never()).shutdown();
     }
@@ -51,7 +50,7 @@ public void safeShutdown_withNullConnectionManager_shouldNotBlowUp() throws Exce
         stub(httpClient.getConnectionManager()).toReturn(null);
         HttpClients.safeShutdown(httpClient);
 
-        Robolectric.runBackgroundTasks();
+        ThreadUtils.pause(HTTP_CLIENT_SHUTDOWN_TIME);
 
         verify(clientConnectionManager, never()).shutdown();
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/ReflectionTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/ReflectionTest.java
index 545f53c5..7e6874d1 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/ReflectionTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/ReflectionTest.java
@@ -169,4 +169,22 @@ public void execute_withNullInstanceOnInstanceMethod_shouldThrowException() thro
             // pass
         }
     }
+
+    @Test
+    public void execute_withStaticMethod_shouldPass() throws Exception {
+        methodBuilder = new MethodBuilder(null, "valueOf").setStatic(String.class).addParam(int.class, 20);
+
+        assertThat(methodBuilder.execute()).isEqualTo("20");
+    }
+
+//    @Test
+//    public void execute_withAccessibility_shouldRunPrivateMethods() throws Exception {
+//        methodBuilder = new MethodBuilder(string, "foldCase");
+//        methodBuilder.addParam(char.class, 'a');
+//        methodBuilder.setAccessible();
+//
+//        char result = (Character) methodBuilder.execute();
+//
+//        assertThat(result).isEqualTo('a');
+//    }
 }
