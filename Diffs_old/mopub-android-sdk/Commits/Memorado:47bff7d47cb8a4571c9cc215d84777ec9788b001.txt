diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index cd2daf52..45753651 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Tue Nov 18 14:15:01 PST 2014
+#Mon Aug 10 09:12:09 CEST 2015
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-all.zip
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index ab0f24c9..34aa7690 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -2,6 +2,7 @@
 
 repositories {
     jcenter()
+    flatDir { dirs 'libs' }
 }
 
 apply plugin: 'com.android.library'
@@ -58,7 +59,7 @@ android {
             minifyEnabled false
             proguardFiles getDefaultProguardFile('proguard-android.txt'), file('proguard.txt')
         }
-      
+
         debug {
             minifyEnabled false
         }
@@ -72,11 +73,13 @@ android {
 
 
 dependencies {
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+    compile 'com.facebook.android:facebook-android-sdk:4.1.0'
+    compile 'com.google.android.gms:play-services-ads:7.5.0'
     compile 'com.android.support:support-v4:22.0.0'
     compile 'com.android.support:support-annotations:22.0.0'
     compile 'com.android.support:recyclerview-v7:22.0.0'
     compile 'com.mopub.volley:mopub-volley:1.1.0'
-
     testCompile 'junit:junit:4.10'
     testCompile 'org.robolectric:robolectric:2.4'
     testCompile 'com.squareup:fest-android:1.0.7'
diff --git a/mopub-sdk/libs/AudienceNetwork.jar b/mopub-sdk/libs/AudienceNetwork.jar
new file mode 100644
index 00000000..b8c41444
Binary files /dev/null and b/mopub-sdk/libs/AudienceNetwork.jar differ
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/FacebookBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/FacebookBanner.java
new file mode 100644
index 00000000..f0513a57
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/FacebookBanner.java
@@ -0,0 +1,133 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.Log;
+
+import com.facebook.ads.Ad;
+import com.facebook.ads.AdError;
+import com.facebook.ads.AdListener;
+import com.facebook.ads.AdSize;
+import com.facebook.ads.AdView;
+import com.mopub.common.DataKeys;
+import com.mopub.common.util.Views;
+
+import java.util.Map;
+
+/**
+ * Tested with Facebook SDK 3.23.1.
+ */
+public class FacebookBanner extends CustomEventBanner implements AdListener {
+    public static final String PLACEMENT_ID_KEY = "placement_id";
+
+    private AdView mFacebookBanner;
+    private CustomEventBannerListener mBannerListener;
+
+    /**
+     * CustomEventBanner implementation
+     */
+
+    @Override
+    protected void loadBanner(final Context context,
+            final CustomEventBannerListener customEventBannerListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
+        mBannerListener = customEventBannerListener;
+
+        final String placementId;
+        if (serverExtrasAreValid(serverExtras)) {
+            placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        } else {
+            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        int width;
+        int height;
+        if (localExtrasAreValid(localExtras)) {
+            width = (Integer) localExtras.get(DataKeys.AD_WIDTH);
+            height = (Integer) localExtras.get(DataKeys.AD_HEIGHT);
+        } else {
+            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        AdSize adSize = calculateAdSize(width, height);
+        if (adSize == null) {
+            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mFacebookBanner = new AdView(context, placementId, adSize);
+        mFacebookBanner.setAdListener(this);
+        mFacebookBanner.disableAutoRefresh();
+        mFacebookBanner.loadAd();
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mFacebookBanner != null) {
+            Views.removeFromParent(mFacebookBanner);
+            mFacebookBanner.destroy();
+            mFacebookBanner = null;
+        }
+    }
+
+    /**
+     * AdListener implementation
+     */
+
+    @Override
+    public void onAdLoaded(Ad ad) {
+        Log.d("MoPub", "Facebook banner ad loaded successfully. Showing ad...");
+        mBannerListener.onBannerLoaded(mFacebookBanner);
+    }
+
+    @Override
+    public void onError(final Ad ad, final AdError error) {
+        Log.d("MoPub", "Facebook banner ad failed to load.");
+        if (error == AdError.NO_FILL) {
+            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        } else if (error == AdError.INTERNAL_ERROR) {
+            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+        } else {
+            mBannerListener.onBannerFailed(MoPubErrorCode.UNSPECIFIED);
+        }
+    }
+
+    @Override
+    public void onAdClicked(Ad ad) {
+        Log.d("MoPub", "Facebook banner ad clicked.");
+        mBannerListener.onBannerClicked();
+    }
+
+    private boolean serverExtrasAreValid(final Map<String, String> serverExtras) {
+        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        return (placementId != null && placementId.length() > 0);
+    }
+
+    private boolean localExtrasAreValid(@NonNull final Map<String, Object> localExtras) {
+        return localExtras.get(DataKeys.AD_WIDTH) instanceof Integer
+                && localExtras.get(DataKeys.AD_HEIGHT) instanceof Integer;
+    }
+
+    @Nullable
+    private AdSize calculateAdSize(int width, int height) {
+        // Use the smallest AdSize that will properly contain the adView
+        if (height <= AdSize.BANNER_320_50.getHeight()) {
+            return AdSize.BANNER_320_50;
+        } else if (height <= AdSize.BANNER_HEIGHT_90.getHeight()) {
+            return AdSize.BANNER_HEIGHT_90;
+        } else if (height <= AdSize.RECTANGLE_HEIGHT_250.getHeight()) {
+            return AdSize.RECTANGLE_HEIGHT_250;
+        } else {
+            return null;
+        }
+    }
+
+    @Deprecated // for testing
+    AdView getAdView() {
+        return mFacebookBanner;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/FacebookInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/FacebookInterstitial.java
new file mode 100644
index 00000000..3ff45d1b
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/FacebookInterstitial.java
@@ -0,0 +1,112 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.util.Log;
+
+import com.facebook.ads.Ad;
+import com.facebook.ads.AdError;
+import com.facebook.ads.InterstitialAd;
+import com.facebook.ads.InterstitialAdListener;
+
+import java.util.Map;
+
+/**
+ * Tested with Facebook SDK 3.23.1.
+ */
+public class FacebookInterstitial extends CustomEventInterstitial implements InterstitialAdListener {
+    public static final String PLACEMENT_ID_KEY = "placement_id";
+
+    private InterstitialAd mFacebookInterstitial;
+    private CustomEventInterstitialListener mInterstitialListener;
+
+    /**
+     * CustomEventInterstitial implementation
+     */
+
+    @Override
+    protected void loadInterstitial(final Context context,
+            final CustomEventInterstitialListener customEventInterstitialListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
+        mInterstitialListener = customEventInterstitialListener;
+
+        final String placementId;
+        if (extrasAreValid(serverExtras)) {
+            placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        } else {
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mFacebookInterstitial = new InterstitialAd(context, placementId);
+        mFacebookInterstitial.setAdListener(this);
+        mFacebookInterstitial.loadAd();
+    }
+
+    @Override
+    protected void showInterstitial() {
+        if (mFacebookInterstitial != null && mFacebookInterstitial.isAdLoaded()) {
+            mFacebookInterstitial.show();
+        } else {
+            Log.d("MoPub", "Tried to show a Facebook interstitial ad before it finished loading. Please try again.");
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mFacebookInterstitial != null) {
+            mFacebookInterstitial.destroy();
+            mFacebookInterstitial = null;
+        }
+    }
+
+    /**
+     * InterstitialAdListener implementation
+     */
+
+    @Override
+    public void onAdLoaded(final Ad ad) {
+        Log.d("MoPub", "Facebook interstitial ad loaded successfully.");
+        mInterstitialListener.onInterstitialLoaded();
+    }
+
+    @Override
+    public void onError(final Ad ad, final AdError error) {
+        Log.d("MoPub", "Facebook interstitial ad failed to load.");
+        if (error == AdError.NO_FILL) {
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        } else if (error == AdError.INTERNAL_ERROR) {
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+        } else {
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
+        }
+    }
+
+    @Override
+    public void onInterstitialDisplayed(final Ad ad) {
+        Log.d("MoPub", "Showing Facebook interstitial ad.");
+        mInterstitialListener.onInterstitialShown();
+    }
+
+    @Override
+    public void onAdClicked(final Ad ad) {
+        Log.d("MoPub", "Facebook interstitial ad clicked.");
+        mInterstitialListener.onInterstitialClicked();
+    }
+
+    @Override
+    public void onInterstitialDismissed(final Ad ad) {
+        Log.d("MoPub", "Facebook interstitial ad dismissed.");
+        mInterstitialListener.onInterstitialDismissed();
+    }
+
+    private boolean extrasAreValid(final Map<String, String> serverExtras) {
+        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        return (placementId != null && placementId.length() > 0);
+    }
+
+    @Deprecated // for testing
+    InterstitialAd getInterstitialAd() {
+        return mFacebookInterstitial;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesBanner.java
new file mode 100644
index 00000000..17273749
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesBanner.java
@@ -0,0 +1,159 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.util.Log;
+
+import com.google.android.gms.ads.AdListener;
+import com.google.android.gms.ads.AdRequest;
+import com.google.android.gms.ads.AdSize;
+import com.google.android.gms.ads.AdView;
+import com.mopub.common.util.Views;
+
+import java.util.Map;
+
+import static com.google.android.gms.ads.AdSize.BANNER;
+import static com.google.android.gms.ads.AdSize.FULL_BANNER;
+import static com.google.android.gms.ads.AdSize.LEADERBOARD;
+import static com.google.android.gms.ads.AdSize.MEDIUM_RECTANGLE;
+
+/*
+ * Compatible with version 7.0.0 of the Google Play Services SDK.
+ */
+
+// Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
+
+class GooglePlayServicesBanner extends CustomEventBanner {
+    /*
+     * These keys are intended for MoPub internal use. Do not modify.
+     */
+    public static final String AD_UNIT_ID_KEY = "adUnitID";
+    public static final String AD_WIDTH_KEY = "adWidth";
+    public static final String AD_HEIGHT_KEY = "adHeight";
+    public static final String LOCATION_KEY = "location";
+
+    private CustomEventBannerListener mBannerListener;
+    private AdView mGoogleAdView;
+
+    @Override
+    protected void loadBanner(
+            final Context context,
+            final CustomEventBannerListener customEventBannerListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
+        mBannerListener = customEventBannerListener;
+        final String adUnitId;
+        final int adWidth;
+        final int adHeight;
+
+        if (extrasAreValid(serverExtras)) {
+            adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
+            adWidth = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
+            adHeight = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
+        } else {
+            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mGoogleAdView = new AdView(context);
+        mGoogleAdView.setAdListener(new AdViewListener());
+        mGoogleAdView.setAdUnitId(adUnitId);
+
+        final AdSize adSize = calculateAdSize(adWidth, adHeight);
+        if (adSize == null) {
+            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mGoogleAdView.setAdSize(adSize);
+
+        final AdRequest adRequest = new AdRequest.Builder()
+                .setRequestAgent("MoPub")
+                .build();
+
+        try {
+            mGoogleAdView.loadAd(adRequest);
+        } catch (NoClassDefFoundError e) {
+            // This can be thrown by Play Services on Honeycomb.
+            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        Views.removeFromParent(mGoogleAdView);
+        if (mGoogleAdView != null) {
+            mGoogleAdView.setAdListener(null);
+            mGoogleAdView.destroy();
+        }
+    }
+
+    private boolean extrasAreValid(Map<String, String> serverExtras) {
+        try {
+            Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
+            Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
+        } catch (NumberFormatException e) {
+            return false;
+        }
+
+        return serverExtras.containsKey(AD_UNIT_ID_KEY);
+    }
+
+    private AdSize calculateAdSize(int width, int height) {
+        // Use the smallest AdSize that will properly contain the adView
+        if (width <= BANNER.getWidth() && height <= BANNER.getHeight()) {
+            return BANNER;
+        } else if (width <= MEDIUM_RECTANGLE.getWidth() && height <= MEDIUM_RECTANGLE.getHeight()) {
+            return MEDIUM_RECTANGLE;
+        } else if (width <= FULL_BANNER.getWidth() && height <= FULL_BANNER.getHeight()) {
+            return FULL_BANNER;
+        } else if (width <= LEADERBOARD.getWidth() && height <= LEADERBOARD.getHeight()) {
+            return LEADERBOARD;
+        } else {
+            return null;
+        }
+    }
+
+    private class AdViewListener extends AdListener {
+        /*
+         * Google Play Services AdListener implementation
+         */
+        @Override
+        public void onAdClosed() {
+
+        }
+
+        @Override
+        public void onAdFailedToLoad(int errorCode) {
+            Log.d("MoPub", "Google Play Services banner ad failed to load.");
+            if (mBannerListener != null) {
+                mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
+            }
+        }
+
+        @Override
+        public void onAdLeftApplication() {
+
+        }
+
+        @Override
+        public void onAdLoaded() {
+            Log.d("MoPub", "Google Play Services banner ad loaded successfully. Showing ad...");
+            if (mBannerListener != null) {
+                mBannerListener.onBannerLoaded(mGoogleAdView);
+            }
+        }
+
+        @Override
+        public void onAdOpened() {
+            Log.d("MoPub", "Google Play Services banner ad clicked.");
+            if (mBannerListener != null) {
+                mBannerListener.onBannerClicked();
+            }
+        }
+    }
+
+    @Deprecated // for testing
+    AdView getGoogleAdView() {
+        return mGoogleAdView;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java
new file mode 100644
index 00000000..9aab1650
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java
@@ -0,0 +1,129 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.util.Log;
+
+import com.google.android.gms.ads.AdListener;
+import com.google.android.gms.ads.AdRequest;
+import com.google.android.gms.ads.InterstitialAd;
+
+import java.util.Map;
+
+/*
+ * Compatible with version 7.0.0 of the Google Play Services SDK.
+ */
+
+// Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
+
+public class GooglePlayServicesInterstitial extends CustomEventInterstitial {
+    /*
+     * These keys are intended for MoPub internal use. Do not modify.
+     */
+    public static final String AD_UNIT_ID_KEY = "adUnitID";
+    public static final String LOCATION_KEY = "location";
+
+    private CustomEventInterstitialListener mInterstitialListener;
+    private InterstitialAd mGoogleInterstitialAd;
+
+    @Override
+    protected void loadInterstitial(
+            final Context context,
+            final CustomEventInterstitialListener customEventInterstitialListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
+        mInterstitialListener = customEventInterstitialListener;
+        final String adUnitId;
+
+        if (extrasAreValid(serverExtras)) {
+            adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
+        } else {
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mGoogleInterstitialAd = new InterstitialAd(context);
+        mGoogleInterstitialAd.setAdListener(new InterstitialAdListener());
+        mGoogleInterstitialAd.setAdUnitId(adUnitId);
+
+        final AdRequest adRequest = new AdRequest.Builder()
+                .setRequestAgent("MoPub")
+                .build();
+
+        try {
+            mGoogleInterstitialAd.loadAd(adRequest);
+        } catch (NoClassDefFoundError e) {
+            // This can be thrown by Play Services on Honeycomb.
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        }
+    }
+
+    @Override
+    protected void showInterstitial() {
+        if (mGoogleInterstitialAd.isLoaded()) {
+            mGoogleInterstitialAd.show();
+        } else {
+            Log.d("MoPub", "Tried to show a Google Play Services interstitial ad before it finished loading. Please try again.");
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mGoogleInterstitialAd != null) {
+            mGoogleInterstitialAd.setAdListener(null);
+        }
+    }
+
+    private boolean extrasAreValid(Map<String, String> serverExtras) {
+        return serverExtras.containsKey(AD_UNIT_ID_KEY);
+    }
+
+    private class InterstitialAdListener extends AdListener {
+        /*
+    	 * Google Play Services AdListener implementation
+    	 */
+        @Override
+        public void onAdClosed() {
+            Log.d("MoPub", "Google Play Services interstitial ad dismissed.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialDismissed();
+            }
+        }
+
+        @Override
+        public void onAdFailedToLoad(int errorCode) {
+            Log.d("MoPub", "Google Play Services interstitial ad failed to load.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+            }
+        }
+
+        @Override
+        public void onAdLeftApplication() {
+            Log.d("MoPub", "Google Play Services interstitial ad clicked.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialClicked();
+            }
+        }
+
+        @Override
+        public void onAdLoaded() {
+            Log.d("MoPub", "Google Play Services interstitial ad loaded successfully.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialLoaded();
+            }
+        }
+
+        @Override
+        public void onAdOpened() {
+            Log.d("MoPub", "Showing Google Play Services interstitial ad.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialShown();
+            }
+        }
+    }
+
+    @Deprecated // for testing
+    InterstitialAd getGoogleInterstitialAd() {
+        return mGoogleInterstitialAd;
+    }
+}
