diff --git a/mopub-sdk/libs/AudienceNetwork.jar b/mopub-sdk/libs/AudienceNetwork.jar
new file mode 100644
index 00000000..15b116d7
Binary files /dev/null and b/mopub-sdk/libs/AudienceNetwork.jar differ
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/FacebookBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/FacebookBanner.java
new file mode 100644
index 00000000..275b3940
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/FacebookBanner.java
@@ -0,0 +1,94 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.util.Log;
+
+import com.facebook.ads.Ad;
+import com.facebook.ads.AdError;
+import com.facebook.ads.AdListener;
+import com.facebook.ads.AdSize;
+import com.facebook.ads.AdView;
+import com.mopub.common.util.Views;
+
+import java.util.Map;
+
+/**
+ * Tested with Facebook SDK 3.18.1.
+ */
+public class FacebookBanner extends CustomEventBanner implements AdListener {
+    private static final String PLACEMENT_ID_KEY = "placement_id";
+
+    private AdView mFacebookBanner;
+    private CustomEventBannerListener mBannerListener;
+
+    /**
+     * CustomEventBanner implementation
+     */
+
+    @Override
+    protected void loadBanner(final Context context,
+            final CustomEventBannerListener customEventBannerListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
+        mBannerListener = customEventBannerListener;
+
+        final String placementId;
+        if (extrasAreValid(serverExtras)) {
+            placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        } else {
+            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mFacebookBanner = new AdView(context, placementId, AdSize.BANNER_320_50);
+        mFacebookBanner.setAdListener(this);
+        mFacebookBanner.loadAd();
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mFacebookBanner != null) {
+            Views.removeFromParent(mFacebookBanner);
+            mFacebookBanner.destroy();
+            mFacebookBanner = null;
+        }
+    }
+
+    /**
+     * AdListener implementation
+     */
+
+    @Override
+    public void onAdLoaded(Ad ad) {
+        Log.d("MoPub", "Facebook banner ad loaded successfully. Showing ad...");
+        mBannerListener.onBannerLoaded(mFacebookBanner);
+    }
+
+    @Override
+    public void onError(final Ad ad, final AdError error) {
+        Log.d("MoPub", "Facebook banner ad failed to load.");
+        if (error == AdError.NO_FILL) {
+            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        } else if (error == AdError.INTERNAL_ERROR) {
+            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+        } else {
+            mBannerListener.onBannerFailed(MoPubErrorCode.UNSPECIFIED);
+        }
+    }
+
+    @Override
+    public void onAdClicked(Ad ad) {
+        Log.d("MoPub", "Facebook banner ad clicked.");
+        mBannerListener.onBannerClicked();
+    }
+
+    private boolean extrasAreValid(final Map<String, String> serverExtras) {
+        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        return (placementId != null && placementId.length() > 0);
+    }
+
+    @Deprecated // for testing
+    AdView getAdView() {
+        return mFacebookBanner;
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/FacebookInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/FacebookInterstitial.java
new file mode 100644
index 00000000..661b9dc2
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/FacebookInterstitial.java
@@ -0,0 +1,117 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.util.Log;
+
+import com.facebook.ads.Ad;
+import com.facebook.ads.AdError;
+import com.facebook.ads.InterstitialAd;
+import com.facebook.ads.InterstitialAdListener;
+
+import java.util.Map;
+
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
+
+/**
+ * Tested with Facebook SDK 3.18.1.
+ */
+public class FacebookInterstitial extends CustomEventInterstitial implements InterstitialAdListener {
+    private static final String PLACEMENT_ID_KEY = "placement_id";
+
+    private InterstitialAd mFacebookInterstitial;
+    private CustomEventInterstitialListener mInterstitialListener;
+
+    /**
+     * CustomEventInterstitial implementation
+     */
+
+    @Override
+    protected void loadInterstitial(final Context context,
+            final CustomEventInterstitialListener customEventInterstitialListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
+        mInterstitialListener = customEventInterstitialListener;
+
+        final String placementId;
+        if (extrasAreValid(serverExtras)) {
+            placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        } else {
+            mInterstitialListener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mFacebookInterstitial = new InterstitialAd(context, placementId);
+        mFacebookInterstitial.setAdListener(this);
+        mFacebookInterstitial.loadAd();
+    }
+
+    @Override
+    protected void showInterstitial() {
+        if (mFacebookInterstitial != null && mFacebookInterstitial.isAdLoaded()) {
+            mFacebookInterstitial.show();
+        } else {
+            Log.d("MoPub", "Tried to show a Facebook interstitial ad before it finished loading. Please try again.");
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mFacebookInterstitial != null) {
+            mFacebookInterstitial.destroy();
+            mFacebookInterstitial = null;
+        }
+    }
+
+    /**
+     * InterstitialAdListener implementation
+     */
+
+    @Override
+    public void onAdLoaded(final Ad ad) {
+        Log.d("MoPub", "Facebook interstitial ad loaded successfully.");
+        mInterstitialListener.onInterstitialLoaded();
+    }
+
+    @Override
+    public void onError(final Ad ad, final AdError error) {
+        Log.d("MoPub", "Facebook interstitial ad failed to load.");
+        if (error == AdError.NO_FILL) {
+            mInterstitialListener.onInterstitialFailed(NETWORK_NO_FILL);
+        } else if (error == AdError.INTERNAL_ERROR) {
+            mInterstitialListener.onInterstitialFailed(NETWORK_INVALID_STATE);
+        } else {
+            mInterstitialListener.onInterstitialFailed(UNSPECIFIED);
+        }
+    }
+
+    @Override
+    public void onInterstitialDisplayed(final Ad ad) {
+        Log.d("MoPub", "Showing Facebook interstitial ad.");
+        mInterstitialListener.onInterstitialShown();
+    }
+
+    @Override
+    public void onAdClicked(final Ad ad) {
+        Log.d("MoPub", "Facebook interstitial ad clicked.");
+        mInterstitialListener.onInterstitialClicked();
+    }
+
+    @Override
+    public void onInterstitialDismissed(final Ad ad) {
+        Log.d("MoPub", "Facebook interstitial ad dismissed.");
+        mInterstitialListener.onInterstitialDismissed();
+    }
+
+    private boolean extrasAreValid(final Map<String, String> serverExtras) {
+        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        return (placementId != null && placementId.length() > 0);
+    }
+
+    @Deprecated // for testing
+    InterstitialAd getInterstitialAd() {
+        return mFacebookInterstitial;
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesBanner.java
index 91319d57..0cb8296a 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesBanner.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesBanner.java
@@ -1,14 +1,5 @@
 package com.mopub.mobileads;
 
-import static com.google.android.gms.ads.AdSize.BANNER;
-import static com.google.android.gms.ads.AdSize.FULL_BANNER;
-import static com.google.android.gms.ads.AdSize.LEADERBOARD;
-import static com.google.android.gms.ads.AdSize.MEDIUM_RECTANGLE;
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
-
-import java.util.Map;
-
 import android.content.Context;
 import android.util.Log;
 
@@ -18,9 +9,21 @@
 import com.google.android.gms.ads.AdView;
 import com.mopub.common.util.Views;
 
+import java.util.Map;
+
+import static com.google.android.gms.ads.AdSize.BANNER;
+import static com.google.android.gms.ads.AdSize.FULL_BANNER;
+import static com.google.android.gms.ads.AdSize.LEADERBOARD;
+import static com.google.android.gms.ads.AdSize.MEDIUM_RECTANGLE;
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+
 /*
- * Compatible with version 4.0.30 of the Google Play Services SDK.
+ * Compatible with version 5.0.89 of the Google Play Services SDK.
  */
+
+// Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
+
 class GooglePlayServicesBanner extends CustomEventBanner {
     /*
      * These keys are intended for MoPub internal use. Do not modify.
@@ -35,15 +38,14 @@
 
     @Override
     protected void loadBanner(
-            Context context,
-            CustomEventBannerListener customEventBannerListener,
-            Map<String, Object> localExtras,
-            Map<String, String> serverExtras) {
+            final Context context,
+            final CustomEventBannerListener customEventBannerListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
         mBannerListener = customEventBannerListener;
-
-        String adUnitId;
-        int adWidth;
-        int adHeight;
+        final String adUnitId;
+        final int adWidth;
+        final int adHeight;
 
         if (extrasAreValid(serverExtras)) {
             adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
@@ -58,7 +60,7 @@ protected void loadBanner(
         mGoogleAdView.setAdListener(new AdViewListener());
         mGoogleAdView.setAdUnitId(adUnitId);
 
-        AdSize adSize = calculateAdSize(adWidth, adHeight);
+        final AdSize adSize = calculateAdSize(adWidth, adHeight);
         if (adSize == null) {
             mBannerListener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
             return;
@@ -66,9 +68,14 @@ protected void loadBanner(
 
         mGoogleAdView.setAdSize(adSize);
 
-        AdRequest adRequest = new AdRequest.Builder().build();
+        final AdRequest adRequest = new AdRequest.Builder().build();
 
-        mGoogleAdView.loadAd(adRequest);
+        try {
+            mGoogleAdView.loadAd(adRequest);
+        } catch (NoClassDefFoundError e) {
+            // This can be thrown by Play Services on Honeycomb.
+            mBannerListener.onBannerFailed(NETWORK_NO_FILL);
+        }
     }
 
     @Override
@@ -149,4 +156,4 @@ public void onAdOpened() {
     AdView getGoogleAdView() {
         return mGoogleAdView;
     }
-}
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java
index a37b5909..c478e59d 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java
@@ -1,10 +1,5 @@
 package com.mopub.mobileads;
 
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
-
-import java.util.Map;
-
 import android.content.Context;
 import android.util.Log;
 
@@ -12,9 +7,17 @@
 import com.google.android.gms.ads.AdRequest;
 import com.google.android.gms.ads.InterstitialAd;
 
+import java.util.Map;
+
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+
 /*
- * Compatible with version 4.0.30 of the Google Play Services SDK.
+ * Compatible with version 5.0.89 of the Google Play Services SDK.
  */
+
+// Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
+
 public class GooglePlayServicesInterstitial extends CustomEventInterstitial {
     /*
      * These keys are intended for MoPub internal use. Do not modify.
@@ -27,13 +30,12 @@
 
     @Override
     protected void loadInterstitial(
-            Context context,
-            CustomEventInterstitialListener customEventInterstitialListener,
-            Map<String, Object> localExtras,
-            Map<String, String> serverExtras) {
+            final Context context,
+            final CustomEventInterstitialListener customEventInterstitialListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
         mInterstitialListener = customEventInterstitialListener;
-
-        String adUnitId;
+        final String adUnitId;
 
         if (extrasAreValid(serverExtras)) {
             adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
@@ -46,9 +48,14 @@ protected void loadInterstitial(
         mGoogleInterstitialAd.setAdListener(new InterstitialAdListener());
         mGoogleInterstitialAd.setAdUnitId(adUnitId);
 
-        AdRequest adRequest = new AdRequest.Builder().build();
+        final AdRequest adRequest = new AdRequest.Builder().build();
 
-        mGoogleInterstitialAd.loadAd(adRequest);
+        try {
+            mGoogleInterstitialAd.loadAd(adRequest);
+        } catch (NoClassDefFoundError e) {
+            // This can be thrown by Play Services on Honeycomb.
+            mInterstitialListener.onInterstitialFailed(NETWORK_NO_FILL);
+        }
     }
 
     @Override
@@ -120,4 +127,4 @@ public void onAdOpened() {
     InterstitialAd getGoogleInterstitialAd() {
         return mGoogleInterstitialAd;
     }
-}
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/GreystripeBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/GreystripeBanner.java
index a1261f21..96d99165 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/GreystripeBanner.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/GreystripeBanner.java
@@ -9,7 +9,6 @@
 import com.greystripe.sdk.GSAdErrorCode;
 import com.greystripe.sdk.GSAdListener;
 import com.greystripe.sdk.GSMobileBannerAdView;
-import com.greystripe.sdk.core.mraid.AdPosition;
 
 /*
  * Tested with Greystripe SDK 2.4.0.
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/FacebookNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/FacebookNative.java
new file mode 100644
index 00000000..3a3449a7
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/FacebookNative.java
@@ -0,0 +1,167 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.view.View;
+
+import com.facebook.ads.Ad;
+import com.facebook.ads.AdError;
+import com.facebook.ads.AdListener;
+import com.facebook.ads.ImpressionListener;
+import com.facebook.ads.NativeAd;
+import com.facebook.ads.NativeAd.Rating;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+/*
+ * Tested with Facebook SDK 3.18.1
+ */
+public class FacebookNative extends CustomEventNative {
+    private static final String PLACEMENT_ID_KEY = "placement_id";
+
+    // CustomEventNative implementation
+    @Override
+    protected void loadNativeAd(final Context context,
+            final CustomEventNativeListener customEventNativeListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
+
+        final String placementId;
+        if (extrasAreValid(serverExtras)) {
+            placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        } else {
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        final FacebookForwardingNativeAd facebookForwardingNativeAd =
+                new FacebookForwardingNativeAd(context,
+                        new NativeAd(context, placementId), customEventNativeListener);
+        facebookForwardingNativeAd.loadAd();
+    }
+
+    private boolean extrasAreValid(final Map<String, String> serverExtras) {
+        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        return (placementId != null && placementId.length() > 0);
+    }
+
+    static class FacebookForwardingNativeAd extends BaseForwardingNativeAd implements AdListener, ImpressionListener {
+        private static final String SOCIAL_CONTEXT_FOR_AD = "socialContextForAd";
+
+        private final Context mContext;
+        private final NativeAd mNativeAd;
+        private final CustomEventNativeListener mCustomEventNativeListener;
+
+        FacebookForwardingNativeAd(final Context context,
+                final NativeAd nativeAd,
+                final CustomEventNativeListener customEventNativeListener) {
+            mContext = context.getApplicationContext();
+            mNativeAd = nativeAd;
+            mCustomEventNativeListener = customEventNativeListener;
+        }
+
+        void loadAd() {
+            mNativeAd.setAdListener(this);
+            mNativeAd.setImpressionListener(this);
+            mNativeAd.loadAd();
+        }
+
+        // AdListener
+        @Override
+        public void onAdLoaded(final Ad ad) {
+            // This identity check is from Facebook's Native API sample code:
+            // https://developers.facebook.com/docs/audience-network/android/native-api
+            if (!mNativeAd.equals(ad) || !mNativeAd.isAdLoaded()) {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
+                return;
+            }
+
+            setTitle(mNativeAd.getAdTitle());
+            setText(mNativeAd.getAdBody());
+
+            NativeAd.Image coverImage = mNativeAd.getAdCoverImage();
+            setMainImageUrl(coverImage == null ? null : coverImage.getUrl());
+
+            NativeAd.Image icon = mNativeAd.getAdIcon();
+            setIconImageUrl(icon == null ? null : icon.getUrl());
+
+            setCallToAction(mNativeAd.getAdCallToAction());
+            setStarRating(getDoubleRating(mNativeAd.getAdStarRating()));
+
+            addExtra(SOCIAL_CONTEXT_FOR_AD, mNativeAd.getAdSocialContext());
+
+            final List<String> imageUrls = new ArrayList<String>();
+            final String mainImageUrl = getMainImageUrl();
+            if (mainImageUrl != null) {
+                imageUrls.add(getMainImageUrl());
+            }
+            final String iconUrl = getIconImageUrl();
+            if (iconUrl != null) {
+                imageUrls.add(getIconImageUrl());
+            }
+
+            preCacheImages(mContext, imageUrls, new ImageListener() {
+                @Override
+                public void onImagesCached() {
+                    mCustomEventNativeListener.onNativeAdLoaded(FacebookForwardingNativeAd.this);
+                }
+
+                @Override
+                public void onImagesFailedToCache(NativeErrorCode errorCode) {
+                    mCustomEventNativeListener.onNativeAdFailed(errorCode);
+                }
+            });
+        }
+
+        @Override
+        public void onError(final Ad ad, final AdError adError) {
+            if (adError == null) {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+            } else if (adError.getErrorCode() == AdError.NO_FILL.getErrorCode()) {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
+            } else if (adError.getErrorCode() == AdError.INTERNAL_ERROR.getErrorCode()) {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
+            } else {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+            }
+        }
+
+        @Override
+        public void onAdClicked(final Ad ad) {
+            notifyAdClicked();
+        }
+
+        // ImpressionListener
+        @Override
+        public void onLoggingImpression(final Ad ad) {
+            notifyAdImpressed();
+        }
+
+        // BaseForwardingNativeAd
+        @Override
+        public void prepare(final View view) {
+            mNativeAd.registerViewForInteraction(view);
+            setOverridingClickTracker(true);
+            setOverridingImpressionTracker(true);
+        }
+
+        @Override
+        public void clear(final View view) {
+            mNativeAd.unregisterView();
+        }
+
+        @Override
+        public void destroy() {
+            mNativeAd.destroy();
+        }
+
+        private Double getDoubleRating(final Rating rating) {
+            if (rating == null) {
+                return null;
+            }
+
+            return MAX_STAR_RATING * rating.getValue() / rating.getScale();
+        }
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/InMobiNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/InMobiNative.java
new file mode 100644
index 00000000..37dd629f
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/InMobiNative.java
@@ -0,0 +1,199 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.inmobi.commons.InMobi;
+import com.inmobi.monetization.IMErrorCode;
+import com.inmobi.monetization.IMNative;
+import com.inmobi.monetization.IMNativeListener;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.json.JSONTokener;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+import static com.mopub.common.util.Json.getJsonValue;
+import static com.mopub.common.util.Numbers.parseDouble;
+
+/*
+ * Tested with InMobi SDK 4.4.1
+ */
+class InMobiNative extends CustomEventNative {
+    private static final String APP_ID_KEY = "app_id";
+
+    // CustomEventNative implementation
+    @Override
+    protected void loadNativeAd(final Context context,
+            final CustomEventNativeListener customEventNativeListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
+
+        if (!(context instanceof Activity)) {
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+        final Activity activity = (Activity) context;
+
+        final String appId;
+        if (extrasAreValid(serverExtras)) {
+            appId = serverExtras.get(APP_ID_KEY);
+        } else {
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        InMobi.initialize(activity, appId);
+        final InMobiForwardingNativeAd inMobiForwardingNativeAd =
+                new InMobiForwardingNativeAd(context, customEventNativeListener);
+        inMobiForwardingNativeAd.setIMNative(new IMNative(inMobiForwardingNativeAd));
+        inMobiForwardingNativeAd.loadAd();
+    }
+
+    private boolean extrasAreValid(final Map<String, String> serverExtras) {
+        final String placementId = serverExtras.get(APP_ID_KEY);
+        return (placementId != null && placementId.length() > 0);
+    }
+
+    static class InMobiForwardingNativeAd extends BaseForwardingNativeAd implements IMNativeListener {
+        static final int IMPRESSION_MIN_TIME_VIEWED = 0;
+
+        // Modifiable keys
+        static final String TITLE = "title";
+        static final String DESCRIPTION = "description";
+        static final String SCREENSHOTS = "screenshots";
+        static final String ICON = "icon";
+        static final String LANDING_URL = "landing_url";
+        static final String CTA = "cta";
+        static final String RATING = "rating";
+
+        // Constant keys
+        static final String URL = "url";
+
+        private final Context mContext;
+        private final CustomEventNativeListener mCustomEventNativeListener;
+        private IMNative mImNative;
+
+        InMobiForwardingNativeAd(final Context context,
+                final CustomEventNativeListener customEventNativeListener) {
+            mContext = context.getApplicationContext();
+            mCustomEventNativeListener = customEventNativeListener;
+        }
+
+        void setIMNative(final IMNative imNative) {
+            mImNative = imNative;
+        }
+
+        void loadAd() {
+            mImNative.loadAd();
+        }
+
+        // IMNativeListener implementation
+        @Override
+        public void onNativeRequestSucceeded(final IMNative imNative) {
+            if (imNative == null) {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
+                return;
+            }
+
+            try {
+                parseJson(imNative);
+            } catch (JSONException e) {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_JSON);
+                return;
+            }
+
+            final List<String> imageUrls = new ArrayList<String>();
+            final String mainImageUrl = getMainImageUrl();
+            if (mainImageUrl != null) {
+                imageUrls.add(mainImageUrl);
+            }
+
+            final String iconUrl = getIconImageUrl();
+            if (iconUrl != null) {
+                imageUrls.add(iconUrl);
+            }
+
+            preCacheImages(mContext, imageUrls, new ImageListener() {
+                @Override
+                public void onImagesCached() {
+                    mCustomEventNativeListener.onNativeAdLoaded(InMobiForwardingNativeAd.this);
+                }
+
+                @Override
+                public void onImagesFailedToCache(NativeErrorCode errorCode) {
+                    mCustomEventNativeListener.onNativeAdFailed(errorCode);
+                }
+            });
+        }
+
+        @Override
+        public void onNativeRequestFailed(final IMErrorCode errorCode) {
+            if (errorCode == IMErrorCode.INVALID_REQUEST) {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_REQUEST);
+            } else if (errorCode == IMErrorCode.INTERNAL_ERROR || errorCode == IMErrorCode.NETWORK_ERROR) {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
+            } else if (errorCode == IMErrorCode.NO_FILL) {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
+            } else {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+            }
+        }
+
+        @Override
+        public void prepare(final View view) {
+            if (view != null && view instanceof ViewGroup) {
+                mImNative.attachToView((ViewGroup) view);
+            } else if (view != null && view.getParent() instanceof ViewGroup) {
+                mImNative.attachToView((ViewGroup) view.getParent());
+            } else {
+                Log.e("MoPub", "InMobi did not receive ViewGroup to attachToView, unable to record impressions");
+            }
+        }
+
+        @Override
+        public void handleClick(final View view) {
+            mImNative.handleClick(null);
+        }
+
+        @Override
+        public void destroy() {
+            mImNative.detachFromView();
+        }
+
+        void parseJson(final IMNative imNative) throws JSONException  {
+            final JSONTokener jsonTokener = new JSONTokener(imNative.getContent());
+            final JSONObject jsonObject = new JSONObject(jsonTokener);
+
+            setTitle(getJsonValue(jsonObject, TITLE, String.class));
+            setText(getJsonValue(jsonObject, DESCRIPTION, String.class));
+
+            final JSONObject screenShotJsonObject = getJsonValue(jsonObject, SCREENSHOTS, JSONObject.class);
+            if (screenShotJsonObject != null) {
+                setMainImageUrl(getJsonValue(screenShotJsonObject, URL, String.class));
+            }
+
+            final JSONObject iconJsonObject = getJsonValue(jsonObject, ICON, JSONObject.class);
+            if (iconJsonObject != null) {
+                setIconImageUrl(getJsonValue(iconJsonObject, URL, String.class));
+            }
+
+            setClickDestinationUrl(getJsonValue(jsonObject, LANDING_URL, String.class));
+            setCallToAction(getJsonValue(jsonObject, CTA, String.class));
+
+            try {
+                setStarRating(parseDouble(jsonObject.opt(RATING)));
+            } catch (ClassCastException e) {
+                Log.d("MoPub", "Unable to set invalid star rating for InMobi Native.");
+            }
+            setImpressionMinTimeViewed(IMPRESSION_MIN_TIME_VIEWED);
+        }
+
+    }
+}
\ No newline at end of file
