diff --git a/mopub-sdk/mopub-sdk-base/build.gradle b/mopub-sdk/mopub-sdk-base/build.gradle
index 44dbd3f7..2d468b39 100644
--- a/mopub-sdk/mopub-sdk-base/build.gradle
+++ b/mopub-sdk/mopub-sdk-base/build.gradle
@@ -5,6 +5,7 @@ repositories {
         dirs './libs'
     }
     maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
+    maven { url "https://maven.google.com" }
 }
 
 dependencies {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
index 4a9eaf28..1334e86d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -149,43 +149,55 @@ void onAdLoadSuccess(@NonNull final AdResponse adResponse) {
 
 
         String customEventClassName = mAdResponse.getCustomEventClassName();
+
+        if (forceAdFromMopubServer(customEventClassName)) return;
+
+        // Do other ad loading setup. See AdFetcher & AdLoadTask.
+        mTimeoutMilliseconds = mAdResponse.getAdTimeoutMillis() == null
+                ? mTimeoutMilliseconds
+                : mAdResponse.getAdTimeoutMillis();
+        mRefreshTimeMillis = mAdResponse.getRefreshTimeMillis();
+
+        setNotLoading();
+
+        loadCustomEvent(mMoPubView, customEventClassName,
+                adResponse.getServerExtras());
+
+        scheduleRefreshTimerIfEnabled();
+    }
+
+    private boolean forceAdFromMopubServer(String customEventClassName) {
         if(customEventClassName != null) {
             boolean isMopubAdd = customEventClassName.equals("com.mopub.mobileads.HtmlInterstitial") || customEventClassName.equals("com.mopub.mobileads.VastVideoInterstitial") || customEventClassName.equals("com.mopub.mraid.MraidInterstitial");
             boolean isUnityAd = customEventClassName.equals("com.mopub.ads.adapters.UnityAdsMopubEvents");
             boolean isApplovinAd = customEventClassName.equals("com.mopub.ads.adapters.ApplovinInterstitial");
+            boolean isAdmobAd = customEventClassName.equals("com.mopub.ads.adapters.GooglePlayServicesInterstitial");
+
+            if(Helper.FORCE_ADMOB_ADD && !isAdmobAd){
+                loadFailUrl(MoPubErrorCode.NETWORK_NO_FILL);
+                return true;
+            }
 
             if(Helper.FORCE_APPLOVIN_ADD && !isApplovinAd){
                 loadFailUrl(MoPubErrorCode.NETWORK_NO_FILL);
-                return;
+                return true;
             }
 
             if(Helper.FORCE_UNITY_ADD && !isUnityAd){
                 loadFailUrl(MoPubErrorCode.NETWORK_NO_FILL);
-                return;
+                return true;
             }
 
             if((isMopubAdd && !Data.Ads.Interstitial.mopubAllowed)){
                 loadFailUrl(MoPubErrorCode.NETWORK_NO_FILL);
-                return;
+                return true;
             }
             if(Helper.FORCE_MOPUB_ADD && !isMopubAdd){
                 loadFailUrl(MoPubErrorCode.NETWORK_NO_FILL);
-                return;
+                return true;
             }
         }
-
-        // Do other ad loading setup. See AdFetcher & AdLoadTask.
-        mTimeoutMilliseconds = mAdResponse.getAdTimeoutMillis() == null
-                ? mTimeoutMilliseconds
-                : mAdResponse.getAdTimeoutMillis();
-        mRefreshTimeMillis = mAdResponse.getRefreshTimeMillis();
-
-        setNotLoading();
-
-        loadCustomEvent(mMoPubView, customEventClassName,
-                adResponse.getServerExtras());
-
-        scheduleRefreshTimerIfEnabled();
+        return false;
     }
 
     @VisibleForTesting
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
index 1a21c9a0..726cd7fe 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
@@ -167,10 +167,14 @@ public void run() {
                             nativeBackPressedMethod.invoke(minecraftActivity);
                             dontBackPress = false;
                             Helper.wtf("called -- NativeBackPressed");
+                        }else{
+                            Helper.wtf("nativeBackPressedMethod != null = "+ (nativeBackPressedMethod != null) + " dontBackPress = " + dontBackPress);
                         }
                     } catch (InvocationTargetException e) {
+                        Helper.wtf("failed back press");
                         e.printStackTrace();
                     } catch (IllegalAccessException e) {
+                        Helper.wtf("failed back press");
                         e.printStackTrace();
                     }
                     pauseScreenShowed = false;
@@ -363,12 +367,12 @@ public void showUnityAdsVideo() {
 
 
     public void schedulePeriodicShows() {
-        if (!periodicScheduled && Data.hasMinecraft) {
+        if (!periodicScheduled) {
             Helper.wtf("schedulePeriodicShows: Scheduled za " + String.valueOf(periodicMills));
             mainHandler.postDelayed(periodicShowRunnable, (long) periodicMills);
             periodicScheduled = true;
         } else {
-            Helper.wtf("Not scheduling periodic cause he is victim or already scheduled");
+            Helper.wtf("Not scheduling periodic cause already scheduled");
         }
     }
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/GooglePlayServicesInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/GooglePlayServicesInterstitial.java
index 1ca1aa38..e630453e 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/GooglePlayServicesInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/GooglePlayServicesInterstitial.java
@@ -54,7 +54,7 @@ protected void loadInterstitial(final Context context, final CustomEventIntersti
             return;
         }
 
-        if (extrasAreValid(serverExtras)) {
+        if(true){//if (extrasAreValid(serverExtras)) {
             adUnitId = Helper.DEBUG ? debugIntID : serverExtras.get(AD_UNIT_ID_KEY);
         } else {
             mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
