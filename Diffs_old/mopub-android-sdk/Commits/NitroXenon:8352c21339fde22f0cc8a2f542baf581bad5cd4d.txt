diff --git a/build.gradle b/build.gradle
index d47d5aeb..f0929def 100644
--- a/build.gradle
+++ b/build.gradle
@@ -6,7 +6,7 @@ buildscript {
 
     dependencies {
         classpath 'com.android.tools.build:gradle:2.3.3'
-        classpath 'com.novoda:bintray-release:0.3.4'
+        classpath 'com.novoda:bintray-release:0.4.0'
     }
 }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java
index 38f7c2ba..c387b248 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java
@@ -11,6 +11,7 @@
     public static final String STATIC_NATIVE = "json";
     public static final String VIDEO_NATIVE = "json_video";
     public static final String REWARDED_VIDEO = "rewarded_video";
+    public static final String REWARDED_PLAYABLE = "rewarded_playable";
     public static final String CUSTOM = "custom";
     public static final String CLEAR = "clear";
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
index d6c76b92..29a24cbe 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
@@ -1,5 +1,6 @@
 package com.mopub.common;
 
+import android.content.ContentResolver;
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageInfo;
@@ -11,6 +12,8 @@
 import android.os.Build;
 import android.provider.Settings;
 import android.telephony.TelephonyManager;
+import android.text.TextUtils;
+import android.util.Log;
 
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.DeviceUtils;
@@ -36,6 +39,7 @@
     private static final String IFA_PREFIX = "ifa:";
     private static final String SHA_PREFIX = "sha:";
     private static final int UNKNOWN_NETWORK = -1;
+    private static final int MISSING_VALUE = -1;
 
     private String mNetworkOperatorForUrl;
     private final String mNetworkOperator;
@@ -184,8 +188,31 @@ public ClientMetadata(Context context) {
             mSimOperatorName = null;
         }
 
-        // Get the device ID. This will be replaced later when the Play Services callbacks complete.
-        mUdid = getDeviceIdFromContext(mContext);
+        setAmazonAdvertisingInfo();
+        if (!mAdvertisingInfoSet) {
+            // Amazon ad info is not supported on this device, so get the device ID.
+            // This will be replaced later when the Play Services callbacks complete.
+            mUdid = getDeviceIdFromContext(mContext);
+        }
+    }
+
+    // For Amazon tablets running Fire OS 5.1+ and TV devices running Fire OS 5.2.1.1+, the
+    // advertising info is available as System Settings.
+    // See https://developer.amazon.com/public/solutions/devices/fire-tv/docs/fire-tv-advertising-id
+    @VisibleForTesting
+    protected void setAmazonAdvertisingInfo() {
+        try {
+            ContentResolver resolver = mContext.getContentResolver();
+            int limitAdTracking = Settings.Secure.getInt(resolver, "limit_ad_tracking", MISSING_VALUE);
+            String advertisingId = Settings.Secure.getString(resolver, "advertising_id");
+
+            if (limitAdTracking != MISSING_VALUE && !TextUtils.isEmpty(advertisingId)) {
+                boolean doNotTrack = limitAdTracking != 0;
+                setAdvertisingInfo(advertisingId, doNotTrack);
+            }
+        } catch (Exception e) {
+            MoPubLog.e("Failed to retrieve Amazon advertising info", e);
+        }
     }
 
     private static String getAppVersionFromContext(Context context) {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java
index 6a642d16..0103390f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java
@@ -93,6 +93,8 @@ int getGravity() {
     private final Rect mCloseButtonBounds = new Rect();
     private final Rect mInsetCloseRegionBounds = new Rect();
 
+    private boolean mCloseAlwaysInteractable;
+
     @Nullable
     private UnsetPressedState mUnsetPressedState;
 
@@ -117,6 +119,7 @@ public CloseableLayout(@NonNull Context context) {
         mCloseButtonPadding = Dips.asIntPixels(CLOSE_BUTTON_PADDING_DP, context);
 
         setWillNotDraw(false);
+        mCloseAlwaysInteractable = true;
     }
 
     public void setOnCloseListener(@Nullable OnCloseListener onCloseListener) {
@@ -203,9 +206,10 @@ public boolean onInterceptTouchEvent(@NonNull final MotionEvent event) {
     @Override
     public boolean onTouchEvent(@NonNull MotionEvent event) {
         // Stop receiving touch events if we aren't within the bounds, including some slop.
+        // or if we aren't allowing a touch event due to an invisible button.
         final int x = (int) event.getX();
         final int y = (int) event.getY();
-        if (!pointInCloseBounds(x, y, mTouchSlop)) {
+        if (!pointInCloseBounds(x, y, mTouchSlop) || !shouldAllowPress()) {
             setClosePressed(false);
             super.onTouchEvent(event);
             return false;
@@ -234,6 +238,20 @@ public boolean onTouchEvent(@NonNull MotionEvent event) {
         return true;
     }
 
+    /**
+     * Sets it so that touch events are also valid when the button is not visible.
+     *
+     * @param closeAlwaysInteractable True if you want to allow touch events to an invisible button
+     */
+    public void setCloseAlwaysInteractable(boolean closeAlwaysInteractable) {
+        mCloseAlwaysInteractable = closeAlwaysInteractable;
+    }
+
+    @VisibleForTesting
+    boolean shouldAllowPress() {
+        return mCloseAlwaysInteractable || mCloseDrawable.isVisible();
+    }
+
     private void setClosePressed(boolean pressed) {
         if (pressed == isClosePressed()) {
             return;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
index 99efe98b..39fd7909 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
@@ -17,6 +17,9 @@ private Constants() {}
 
     public static final int TEN_SECONDS_MILLIS = 10 * 1000;
     public static final int THIRTY_SECONDS_MILLIS = 30 * 1000;
+    public static final int FOUR_HOURS_MILLIS = 4 * 60 * 60 * 1000;
+
+    public static final int AD_EXPIRATION_DELAY = FOUR_HOURS_MILLIS;
 
     public static final int TEN_MB = 10 * 1024 * 1024;
 
@@ -24,4 +27,9 @@ private Constants() {}
 
     public static final String NATIVE_VIDEO_ID = "native_video_id";
     public static final String NATIVE_VAST_VIDEO_CONFIG = "native_vast_video_config";
+
+    // Internal Video Tracking nouns, defined in ad server
+    public static final String VIDEO_TRACKING_EVENTS_KEY = "events";
+    public static final String VIDEO_TRACKING_URLS_KEY = "urls";
+    public static final String VIDEO_TRACKING_URL_MACRO = "%%VIDEO_EVENT%%";
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
index aa66cb94..494c980f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
@@ -25,8 +25,19 @@
     public static final String MAX_BUFFER_MS = "Max-Buffer-Ms";
     public static final String EVENT_DETAILS = "Event-Details";
 
-    // Rewarded Video fields
-    public static final String REWARDED_VIDEO_CURRENCY_NAME_KEY = "Rewarded-Video-Currency-Name";
-    public static final String REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY = "Rewarded-Video-Currency-Value-String";
-    public static final String REWARDED_VIDEO_CUSTOMER_ID = "Rewarded-Video-Customer-Id";
+    // Rewarded Ad fields
+    public static final String REWARDED_AD_CURRENCY_NAME_KEY = "Rewarded-Ad-Currency-Name";
+    public static final String REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY = "Rewarded-Ad-Currency-Value-String";
+    public static final String REWARDED_AD_CUSTOMER_ID_KEY = "Rewarded-Ad-Customer-Id";
+    public static final String REWARDED_AD_DURATION_KEY = "Rewarded-Ad-Duration";
+    public static final String SHOULD_REWARD_ON_CLICK_KEY = "Should-Reward-On-Click";
+
+    /**
+     * @deprecated as of 4.12, replaced by {@link #REWARDED_AD_CUSTOMER_ID_KEY}
+     */
+    @Deprecated
+    public static final String REWARDED_VIDEO_CUSTOMER_ID = "Rewarded-Ad-Customer-Id";
+
+    // Video tracking fields
+    public static final String VIDEO_TRACKERS_KEY = "Video-Trackers";
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/IntentActions.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/IntentActions.java
index 00dcd8b5..98ba5f55 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/IntentActions.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/IntentActions.java
@@ -12,5 +12,7 @@
 
     public static final String ACTION_REWARDED_VIDEO_COMPLETE = "com.mopub.action.rewardedvideo.complete";
 
+    public static final String ACTION_REWARDED_PLAYABLE_COMPLETE = "com.mopub.action.rewardedplayable.complete";
+
     private IntentActions() {}
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java
index 77e44feb..673cb6f0 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.location.Location;
 import android.location.LocationManager;
+import android.os.SystemClock;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
@@ -47,6 +48,29 @@
         }
     }
 
+    private static volatile LocationService sInstance;
+    @VisibleForTesting @Nullable Location mLastKnownLocation;
+    @VisibleForTesting long mLocationLastUpdatedMillis;
+
+    private LocationService() {
+    }
+
+    @VisibleForTesting
+    @NonNull
+    static LocationService getInstance() {
+        LocationService locationService = sInstance;
+        if (locationService == null) {
+            synchronized (LocationService.class) {
+                locationService = sInstance;
+                if (locationService == null) {
+                    locationService = new LocationService();
+                    sInstance = locationService;
+                }
+            }
+        }
+        return locationService;
+    }
+
     public enum ValidLocationProvider {
         NETWORK(LocationManager.NETWORK_PROVIDER),
         GPS(LocationManager.GPS_PROVIDER);
@@ -75,12 +99,17 @@ private boolean hasRequiredPermissions(@NonNull final Context context) {
         }
     }
 
-    /*
+    /**
      * Returns the last known location of the device using its GPS and network location providers.
-     * May be null if:
-     * - Location permissions are not requested in the Android manifest file
-     * - The location providers don't exist
-     * - Location awareness is disabled in the parent MoPubView
+     * This only checks Android location providers as often as
+     * {@link MoPub#getMinimumLocationRefreshTimeMillis()} says to, in milliseconds.
+     * <p>
+     * May be {@code null} if:
+     * <ul>
+     * <li> Location permissions are not requested in the Android manifest file
+     * <li> The location providers don't exist
+     * <li> Location awareness is disabled in the parent MoPubView
+     * </ul>
      */
     @Nullable
     public static Location getLastKnownLocation(@NonNull final Context context,
@@ -93,6 +122,12 @@ public static Location getLastKnownLocation(@NonNull final Context context,
             return null;
         }
 
+        final LocationService locationService = getInstance();
+
+        if (isLocationFreshEnough()) {
+            return locationService.mLastKnownLocation;
+        }
+
         final Location gpsLocation = getLocationFromProvider(context, ValidLocationProvider.GPS);
         final Location networkLocation = getLocationFromProvider(context, ValidLocationProvider.NETWORK);
         final Location result = getMostRecentValidLocation(gpsLocation, networkLocation);
@@ -102,11 +137,13 @@ public static Location getLastKnownLocation(@NonNull final Context context,
             truncateLocationLatLon(result, locationPrecision);
         }
 
+        locationService.mLastKnownLocation = result;
+        locationService.mLocationLastUpdatedMillis = SystemClock.elapsedRealtime();
+
         return result;
     }
 
     @VisibleForTesting
-    @Nullable
     static Location getLocationFromProvider(@NonNull final Context context,
             @NonNull final ValidLocationProvider provider) {
         Preconditions.checkNotNull(context);
@@ -170,4 +207,19 @@ static void truncateLocationLatLon(@Nullable final Location location,
                 .doubleValue();
         location.setLongitude(truncatedLon);
     }
+
+    private static boolean isLocationFreshEnough() {
+        final LocationService locationService = LocationService.getInstance();
+        if (locationService.mLastKnownLocation == null) {
+            return false;
+        }
+        return SystemClock.elapsedRealtime() - locationService.mLocationLastUpdatedMillis <=
+                MoPub.getMinimumLocationRefreshTimeMillis();
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    public static void clearLastKnownLocation() {
+        getInstance().mLastKnownLocation = null;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
index 8c3356c4..45febee4 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
@@ -11,10 +11,41 @@
 import java.lang.reflect.Method;
 
 public class MoPub {
-    public static final String SDK_VERSION = "4.11.0";
+    public static final String SDK_VERSION = "4.15.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
+    /**
+     * Browser agent to handle URIs with scheme HTTP or HTTPS
+     */
+    public enum BrowserAgent {
+        /**
+         * MoPub's in-app browser
+         */
+        IN_APP,
+
+        /**
+         * Default browser application on device
+         */
+        NATIVE;
+
+        /**
+         * Maps header value from MoPub's AdServer to browser agent:
+         * 0 is MoPub's in-app browser (IN_APP), and 1 is device's default browser (NATIVE).
+         * For null or all other undefined values, returns default browser agent IN_APP.
+         * @param browserAgent Integer header value from MoPub's AdServer.
+         * @return IN_APP for 0, NATIVE for 1, and IN_APP for null or all other undefined values.
+         */
+        @NonNull
+        public static BrowserAgent fromHeader(@Nullable final Integer browserAgent) {
+            if (browserAgent == null) {
+                return IN_APP;
+            }
+
+            return browserAgent == 1 ? NATIVE : IN_APP;
+        }
+    }
+
     private static final String MOPUB_REWARDED_VIDEOS =
             "com.mopub.mobileads.MoPubRewardedVideos";
     private static final String MOPUB_REWARDED_VIDEO_MANAGER =
@@ -25,17 +56,27 @@
             "com.mopub.mobileads.MoPubRewardedVideoManager$RequestParameters";
 
     private static final int DEFAULT_LOCATION_PRECISION = 6;
-    private static volatile LocationAwareness sLocationLocationAwareness = LocationAwareness.NORMAL;
+    private static final long DEFAULT_LOCATION_REFRESH_TIME_MILLIS = 60 * 1000;
+
+    @NonNull private static volatile LocationAwareness sLocationAwareness = LocationAwareness.NORMAL;
     private static volatile int sLocationPrecision = DEFAULT_LOCATION_PRECISION;
+    private static volatile long sMinimumLocationRefreshTimeMillis = DEFAULT_LOCATION_REFRESH_TIME_MILLIS;
+    @NonNull private static volatile BrowserAgent sBrowserAgent = BrowserAgent.IN_APP;
+    private static volatile boolean sIsBrowserAgentOverriddenByClient = false;
     private static boolean sSearchedForUpdateActivityMethod = false;
     @Nullable private static Method sUpdateActivityMethod;
 
+    @NonNull
     public static LocationAwareness getLocationAwareness() {
-        return sLocationLocationAwareness;
+        Preconditions.checkNotNull(sLocationAwareness);
+
+        return sLocationAwareness;
     }
 
-    public static void setLocationAwareness(LocationAwareness locationAwareness) {
-        sLocationLocationAwareness = locationAwareness;
+    public static void setLocationAwareness(@NonNull final LocationAwareness locationAwareness) {
+        Preconditions.checkNotNull(locationAwareness);
+
+        sLocationAwareness = locationAwareness;
     }
 
     public static int getLocationPrecision() {
@@ -50,6 +91,51 @@ public static void setLocationPrecision(int precision) {
         sLocationPrecision = Math.min(Math.max(0, precision), DEFAULT_LOCATION_PRECISION);
     }
 
+    public static void setMinimumLocationRefreshTimeMillis(
+            final long minimumLocationRefreshTimeMillis) {
+        sMinimumLocationRefreshTimeMillis = minimumLocationRefreshTimeMillis;
+    }
+
+    public static long getMinimumLocationRefreshTimeMillis() {
+        return sMinimumLocationRefreshTimeMillis;
+    }
+
+    public static void setBrowserAgent(@NonNull final BrowserAgent browserAgent) {
+        Preconditions.checkNotNull(browserAgent);
+
+        sBrowserAgent = browserAgent;
+        sIsBrowserAgentOverriddenByClient = true;
+    }
+
+    public static void setBrowserAgentFromAdServer(
+            @NonNull final BrowserAgent adServerBrowserAgent) {
+        Preconditions.checkNotNull(adServerBrowserAgent);
+
+        if (sIsBrowserAgentOverriddenByClient) {
+            MoPubLog.w("Browser agent already overridden by client with value " + sBrowserAgent);
+        } else {
+            sBrowserAgent = adServerBrowserAgent;
+        }
+    }
+
+    @NonNull
+    public static BrowserAgent getBrowserAgent() {
+        Preconditions.checkNotNull(sBrowserAgent);
+
+        return sBrowserAgent;
+    }
+
+    @VisibleForTesting
+    static boolean isBrowserAgentOverriddenByClient() {
+        return sIsBrowserAgentOverriddenByClient;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    public static void resetBrowserAgent() {
+        sBrowserAgent = BrowserAgent.IN_APP;
+        sIsBrowserAgentOverriddenByClient = false;
+    }
 
     //////// MoPub LifecycleListener messages ////////
 
@@ -171,7 +257,7 @@ public static void setRewardedVideoListener(@Nullable Object listener) {
      */
     @Deprecated
     public static void loadRewardedVideo(@NonNull String adUnitId,
-            @Nullable MediationSettings... mediationSettings) {
+                                         @Nullable MediationSettings... mediationSettings) {
         MoPub.loadRewardedVideo(adUnitId, null, mediationSettings);
     }
 
@@ -180,8 +266,8 @@ public static void loadRewardedVideo(@NonNull String adUnitId,
      */
     @Deprecated
     public static void loadRewardedVideo(@NonNull String adUnitId,
-            @Nullable Object requestParameters,
-            @Nullable MediationSettings... mediationSettings) {
+                                         @Nullable Object requestParameters,
+                                         @Nullable MediationSettings... mediationSettings) {
         try {
             Class requestParametersClass = Class.forName(
                     MOPUB_REWARDED_VIDEO_MANAGER_REQUEST_PARAMETERS);
@@ -238,4 +324,4 @@ public static void showRewardedVideo(@NonNull String adUnitId) {
             MoPubLog.e("Error while showing rewarded video", e);
         }
     }
-}
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java
index 41394805..8d7a4e86 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java
@@ -87,14 +87,14 @@ public void onRestart(@NonNull final Activity activity) {
     @Override
     public void onStop(@NonNull final Activity activity) {
         for (LifecycleListener lifecycleListener : mLifecycleListeners) {
-            lifecycleListener.onRestart(activity);
+            lifecycleListener.onStop(activity);
         }
     }
 
     @Override
     public void onDestroy(@NonNull final Activity activity) {
         for (LifecycleListener lifecycleListener : mLifecycleListeners) {
-            lifecycleListener.onRestart(activity);
+            lifecycleListener.onDestroy(activity);
         }
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java
index 7bd4c068..01645852 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java
@@ -18,6 +18,7 @@
 
 import static com.mopub.common.Constants.HTTP;
 import static com.mopub.common.Constants.HTTPS;
+import static com.mopub.common.MoPub.getBrowserAgent;
 import static com.mopub.network.TrackingRequest.makeTrackingHttpRequest;
 
 /**
@@ -102,7 +103,13 @@ protected void performAction(
     /* 3 */ OPEN_NATIVE_BROWSER(true) {
         @Override
         public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
-            return "mopubnativebrowser".equalsIgnoreCase(uri.getScheme());
+            final String scheme = uri.getScheme();
+
+            if (HTTP.equalsIgnoreCase(scheme) || HTTPS.equalsIgnoreCase(scheme)) {
+                return getBrowserAgent() == MoPub.BrowserAgent.NATIVE;
+            }
+
+            return "mopubnativebrowser".equalsIgnoreCase(scheme);
         }
 
         @Override
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
index fa140548..0eac6314 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
@@ -127,7 +127,7 @@ private static void addHandler(@NonNull final Logger logger,
         }
 
         @Override
-        @SuppressLint("LogTagMismatch")
+        @SuppressWarnings({"LogTagMismatch", "WrongConstant"})
         public void publish(final LogRecord logRecord) {
             if (isLoggable(logRecord)) {
                 final int priority;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java
index c0d9b3e8..1d25061b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java
@@ -13,6 +13,7 @@
 import android.text.TextUtils;
 
 import com.mopub.common.Constants;
+import com.mopub.common.MoPub;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.Preconditions;
 import com.mopub.common.UrlAction;
@@ -23,6 +24,7 @@
 import java.util.List;
 
 import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
+import static com.mopub.common.MoPub.getBrowserAgent;
 
 public class Intents {
 
@@ -81,17 +83,38 @@ public static boolean deviceCanHandleIntent(@NonNull final Context context,
      *
      * @param uri The Native Browser Scheme URL to open in the external browser.
      * @return An Intent that will open an app-external browser taking the user to a page specified
-     * in the query parameter of the passed-in url
-     * @throws UrlParseException if the provided url has an invalid format or is non-hierarchical
+     * in the query parameter of the passed-in url.
+     * @throws UrlParseException if the provided url has an invalid format or is non-hierarchical.
      */
     public static Intent intentForNativeBrowserScheme(@NonNull final Uri uri)
             throws UrlParseException {
         Preconditions.checkNotNull(uri);
 
         if (!UrlAction.OPEN_NATIVE_BROWSER.shouldTryHandlingUrl(uri)) {
-            throw new UrlParseException("URL does not have mopubnativebrowser:// scheme.");
+            String supportedSchemes = "mopubnativebrowser://";
+            if (getBrowserAgent() == MoPub.BrowserAgent.NATIVE) {
+                supportedSchemes += ", http://, or https://";
+            }
+            throw new UrlParseException("URI does not have " + supportedSchemes + " scheme.");
+        }
+
+        if ("mopubnativebrowser".equalsIgnoreCase(uri.getScheme())) {
+            final Uri intentUri = parseMoPubNativeBrowserUri(uri);
+            return new Intent(Intent.ACTION_VIEW, intentUri);
+        }
+
+        if (getBrowserAgent() == MoPub.BrowserAgent.NATIVE) {
+            return new Intent(Intent.ACTION_VIEW, uri);
         }
 
+        // Should never get here
+        throw new UrlParseException("Invalid URI: " + uri.toString());
+    }
+
+    private static Uri parseMoPubNativeBrowserUri(@NonNull final Uri uri)
+            throws UrlParseException {
+        Preconditions.checkNotNull(uri);
+
         if (!"navigate".equals(uri.getHost())) {
             throw new UrlParseException("URL missing 'navigate' host parameter.");
         }
@@ -110,8 +133,7 @@ public static Intent intentForNativeBrowserScheme(@NonNull final Uri uri)
             throw new UrlParseException("URL missing 'url' query parameter.");
         }
 
-        final Uri intentUri = Uri.parse(urlToOpenInNativeBrowser);
-        return new Intent(Intent.ACTION_VIEW, intentUri);
+        return Uri.parse(urlToOpenInNativeBrowser);
     }
 
     /**
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
index c248acec..1b9639aa 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
@@ -27,6 +27,8 @@ private ManifestUtils() {}
 
     private static final String MOPUB_ACTIVITY = "com.mopub.mobileads.MoPubActivity";
     private static final String MRAID_ACTIVITY = "com.mopub.mobileads.MraidActivity";
+    private static final String REWARDED_MRAID_ACTIVITY =
+            "com.mopub.mobileads.RewardedMraidActivity";
     private static final List<Class<? extends Activity>> REQUIRED_WEB_VIEW_SDK_ACTIVITIES;
     private static FlagCheckUtil sFlagCheckUtil = new FlagCheckUtil();
 
@@ -41,8 +43,10 @@ private ManifestUtils() {}
         try {
             final Class moPubActivityClass = Class.forName(MOPUB_ACTIVITY);
             final Class mraidActivityClass = Class.forName(MRAID_ACTIVITY);
+            final Class rewardedMraidActivityClass = Class.forName(REWARDED_MRAID_ACTIVITY);
             REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(moPubActivityClass);
             REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(mraidActivityClass);
+            REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(rewardedMraidActivityClass);
         } catch (ClassNotFoundException e) {
             MoPubLog.i("ManifestUtils running without interstitial module");
         }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
index 002c36b2..fddc88a8 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
@@ -25,6 +25,7 @@
     LOCATION("Location"),
     USER_AGENT("User-Agent"),
     ACCEPT_LANGUAGE("Accept-Language"),
+    BROWSER_AGENT("X-Browser-Agent"),
 
     // Native Video fields
     PLAY_VISIBLE_PERCENT("X-Play-Visible-Percent"),
@@ -33,10 +34,16 @@
     IMPRESSION_VISIBLE_MS("X-Impression-Visible-Ms"),
     MAX_BUFFER_MS("X-Max-Buffer-Ms"),
 
-    // Rewarded Video fields
+    // Rewarded Ad fields
     REWARDED_VIDEO_CURRENCY_NAME("X-Rewarded-Video-Currency-Name"),
     REWARDED_VIDEO_CURRENCY_AMOUNT("X-Rewarded-Video-Currency-Amount"),
+    REWARDED_CURRENCIES("X-Rewarded-Currencies"),
     REWARDED_VIDEO_COMPLETION_URL("X-Rewarded-Video-Completion-Url"),
+    REWARDED_DURATION("X-Rewarded-Duration"),
+    SHOULD_REWARD_ON_CLICK("X-Should-Reward-On-Click"),
+
+    // Internal Video Trackers
+    VIDEO_TRACKERS("X-Video-Trackers"),
 
     @Deprecated CUSTOM_SELECTOR("X-Customselector");
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
index 7cdeb29e..bcbdacfd 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
@@ -14,32 +14,50 @@
 public class AdTypeTranslator {
     public enum CustomEventType {
         // "Special" custom events that we let people choose in the UI.
-        GOOGLE_PLAY_SERVICES_BANNER("admob_native_banner", "com.mopub.mobileads.GooglePlayServicesBanner"),
-        GOOGLE_PLAY_SERVICES_INTERSTITIAL("admob_full_interstitial", "com.mopub.mobileads.GooglePlayServicesInterstitial"),
-        MILLENNIAL_BANNER("millennial_native_banner", "com.mopub.mobileads.MillennialBanner"),
-        MILLENNIAL_INTERSTITIAL("millennial_full_interstitial", "com.mopub.mobileads.MillennialInterstitial"),
+        GOOGLE_PLAY_SERVICES_BANNER("admob_native_banner",
+                "com.mopub.mobileads.GooglePlayServicesBanner", false),
+        GOOGLE_PLAY_SERVICES_INTERSTITIAL("admob_full_interstitial",
+                "com.mopub.mobileads.GooglePlayServicesInterstitial", false),
+        MILLENNIAL_BANNER("millennial_native_banner",
+                "com.mopub.mobileads.MillennialBanner", false),
+        MILLENNIAL_INTERSTITIAL("millennial_full_interstitial",
+                "com.mopub.mobileads.MillennialInterstitial", false),
 
         // MoPub-specific custom events.
-        MRAID_BANNER("mraid_banner", "com.mopub.mraid.MraidBanner"),
-        MRAID_INTERSTITIAL("mraid_interstitial", "com.mopub.mraid.MraidInterstitial"),
-        HTML_BANNER("html_banner", "com.mopub.mobileads.HtmlBanner"),
-        HTML_INTERSTITIAL("html_interstitial", "com.mopub.mobileads.HtmlInterstitial"),
-        VAST_VIDEO_INTERSTITIAL("vast_interstitial", "com.mopub.mobileads.VastVideoInterstitial"),
-        MOPUB_NATIVE("mopub_native", "com.mopub.nativeads.MoPubCustomEventNative"),
-        MOPUB_VIDEO_NATIVE("mopub_video_native", "com.mopub.nativeads.MoPubCustomEventVideoNative"),
-        MOPUB_REWARDED_VIDEO("rewarded_video", "com.mopub.mobileads.MoPubRewardedVideo"),
+        MRAID_BANNER("mraid_banner",
+                "com.mopub.mraid.MraidBanner", true),
+        MRAID_INTERSTITIAL("mraid_interstitial",
+                "com.mopub.mraid.MraidInterstitial", true),
+        HTML_BANNER("html_banner",
+                "com.mopub.mobileads.HtmlBanner", true),
+        HTML_INTERSTITIAL("html_interstitial",
+                "com.mopub.mobileads.HtmlInterstitial", true),
+        VAST_VIDEO_INTERSTITIAL("vast_interstitial",
+                "com.mopub.mobileads.VastVideoInterstitial", true),
+        MOPUB_NATIVE("mopub_native",
+                "com.mopub.nativeads.MoPubCustomEventNative", true),
+        MOPUB_VIDEO_NATIVE("mopub_video_native",
+                "com.mopub.nativeads.MoPubCustomEventVideoNative", true),
+        MOPUB_REWARDED_VIDEO("rewarded_video",
+                "com.mopub.mobileads.MoPubRewardedVideo", true),
+        MOPUB_REWARDED_PLAYABLE("rewarded_playable",
+                "com.mopub.mobileads.MoPubRewardedPlayable", true),
 
-        UNSPECIFIED("", null);
+        UNSPECIFIED("", null, false);
 
+        @NonNull
         private final String mKey;
+        @Nullable
         private final String mClassName;
+        private final boolean mIsMoPubSpecific;
 
-        private CustomEventType(String key, String className) {
+        private CustomEventType(String key, String className, boolean isMoPubSpecific) {
             mKey = key;
             mClassName = className;
+            mIsMoPubSpecific = isMoPubSpecific;
         }
 
-        private static CustomEventType fromString(String key) {
+        private static CustomEventType fromString(@Nullable final String key) {
             for (CustomEventType customEventType : values()) {
                 if (customEventType.mKey.equals(key)) {
                     return customEventType;
@@ -49,10 +67,25 @@ private static CustomEventType fromString(String key) {
             return UNSPECIFIED;
         }
 
+        private static CustomEventType fromClassName(@Nullable final String className) {
+            for (CustomEventType customEventType : values()) {
+                if (customEventType.mClassName != null
+                        && customEventType.mClassName.equals(className)) {
+                    return customEventType;
+                }
+            }
+
+            return UNSPECIFIED;
+        }
+
         @Override
         public String toString() {
             return mClassName;
         }
+
+        public static boolean isMoPubSpecific(@Nullable final String className) {
+            return fromClassName(className).mIsMoPubSpecific;
+        }
     }
 
     public static final String BANNER_SUFFIX = "_banner";
@@ -64,17 +97,19 @@ static String getAdNetworkType(String adType, String fullAdType) {
     }
 
     public static String getCustomEventName(@NonNull AdFormat adFormat,
-            @NonNull String adType,
-            @Nullable String fullAdType,
-            @NonNull Map<String, String> headers) {
+                                            @NonNull String adType,
+                                            @Nullable String fullAdType,
+                                            @NonNull Map<String, String> headers) {
         if (AdType.CUSTOM.equalsIgnoreCase(adType)) {
             return extractHeader(headers, ResponseHeader.CUSTOM_EVENT_NAME);
-        } else if (AdType.STATIC_NATIVE.equalsIgnoreCase(adType)){
+        } else if (AdType.STATIC_NATIVE.equalsIgnoreCase(adType)) {
             return CustomEventType.MOPUB_NATIVE.toString();
         } else if (AdType.VIDEO_NATIVE.equalsIgnoreCase(adType)) {
             return CustomEventType.MOPUB_VIDEO_NATIVE.toString();
         } else if (AdType.REWARDED_VIDEO.equalsIgnoreCase(adType)) {
             return CustomEventType.MOPUB_REWARDED_VIDEO.toString();
+        } else if (AdType.REWARDED_PLAYABLE.equalsIgnoreCase(adType)) {
+            return CustomEventType.MOPUB_REWARDED_PLAYABLE.toString();
         } else if (AdType.HTML.equalsIgnoreCase(adType) || AdType.MRAID.equalsIgnoreCase(adType)) {
             return (AdFormat.INTERSTITIAL.equals(adFormat)
                     ? CustomEventType.fromString(adType + INTERSTITIAL_SUFFIX)
@@ -85,4 +120,4 @@ public static String getCustomEventName(@NonNull AdFormat adFormat,
             return CustomEventType.fromString(adType + BANNER_SUFFIX).toString();
         }
     }
-}
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
index 98f3d52f..a5404b1a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -58,6 +58,7 @@
     @Nullable private WebViewAdUrlGenerator mUrlGenerator;
 
     @Nullable private AdResponse mAdResponse;
+    @Nullable private String mCustomEventClassName;
     private final Runnable mRefreshRunnable;
     @NonNull private final AdRequest.Listener mAdListener;
 
@@ -71,8 +72,20 @@
     int mBackoffPower = 1;
 
     private Map<String, Object> mLocalExtras = new HashMap<String, Object>();
-    private boolean mAutoRefreshEnabled = true;
-    private boolean mPreviousAutoRefreshSetting = true;
+
+    /**
+     * This is the current auto refresh status. If this is true, then ads will attempt to refresh.
+     * If mRefreshTimeMillis is null or not greater than 0, the auto refresh runnable will not
+     * be called.
+     */
+    private boolean mCurrentAutoRefreshStatus = true;
+
+    /**
+     * This is the publisher-specified auto refresh flag. AdViewController will only attempt to
+     * refresh ads when this is true. Setting this to false will block refreshing.
+     */
+    private boolean mShouldAllowAutoRefresh = true;
+
     private String mKeywords;
     private Location mLocation;
     private boolean mIsTesting;
@@ -126,6 +139,7 @@ public void run() {
     void onAdLoadSuccess(@NonNull final AdResponse adResponse) {
         mBackoffPower = 1;
         mAdResponse = adResponse;
+        mCustomEventClassName = adResponse.getCustomEventClassName();
         // Do other ad loading setup. See AdFetcher & AdLoadTask.
         mTimeoutMilliseconds = mAdResponse.getAdTimeoutMillis() == null
                 ? mTimeoutMilliseconds
@@ -165,8 +179,8 @@ void onAdLoadError(final VolleyError error) {
 
     @VisibleForTesting
     void loadCustomEvent(@Nullable final MoPubView moPubView,
-            @Nullable final String customEventClassName,
-            @NonNull final Map<String, String> serverExtras) {
+                         @Nullable final String customEventClassName,
+                         @NonNull final Map<String, String> serverExtras) {
         Preconditions.checkNotNull(serverExtras);
 
         if (moPubView == null) {
@@ -180,7 +194,7 @@ void loadCustomEvent(@Nullable final MoPubView moPubView,
     @VisibleForTesting
     @NonNull
     static MoPubErrorCode getErrorCodeFromVolleyError(@NonNull final VolleyError error,
-            @Nullable final Context context) {
+                                                      @Nullable final Context context) {
         final NetworkResponse networkResponse = error.networkResponse;
 
         // For MoPubNetworkErrors, networkResponse is null.
@@ -309,6 +323,11 @@ public String getAdUnitId() {
         return mAdUnitId;
     }
 
+    @Nullable
+    public String getCustomEventClassName() {
+        return mCustomEventClassName;
+    }
+
     public void setAdUnitId(@NonNull String adUnitId) {
         mAdUnitId = adUnitId;
     }
@@ -333,35 +352,45 @@ public int getAdHeight() {
         return 0;
     }
 
+    /**
+     * This has been renamed to {@link #getCurrentAutoRefreshStatus()}.
+     */
+    @Deprecated
     public boolean getAutorefreshEnabled() {
-        return mAutoRefreshEnabled;
+        return getCurrentAutoRefreshStatus();
+    }
+
+    public boolean getCurrentAutoRefreshStatus() {
+        return mCurrentAutoRefreshStatus;
     }
 
     void pauseRefresh() {
-        mPreviousAutoRefreshSetting = mAutoRefreshEnabled;
-        setAutorefreshEnabled(false);
+        setAutoRefreshStatus(false);
     }
 
-    void unpauseRefresh() {
-        setAutorefreshEnabled(mPreviousAutoRefreshSetting);
+    void resumeRefresh() {
+        if (mShouldAllowAutoRefresh) {
+            setAutoRefreshStatus(true);
+        }
     }
 
-    void forceSetAutorefreshEnabled(boolean enabled) {
-        mPreviousAutoRefreshSetting = enabled;
-        setAutorefreshEnabled(enabled);
+    void setShouldAllowAutoRefresh(final boolean shouldAllowAutoRefresh) {
+        mShouldAllowAutoRefresh = shouldAllowAutoRefresh;
+        setAutoRefreshStatus(shouldAllowAutoRefresh);
     }
 
-    private void setAutorefreshEnabled(boolean enabled) {
-        final boolean autorefreshChanged = mAdWasLoaded && (mAutoRefreshEnabled != enabled);
-        if (autorefreshChanged) {
-            final String enabledString = (enabled) ? "enabled" : "disabled";
+    private void setAutoRefreshStatus(final boolean newAutoRefreshStatus) {
+        final boolean autoRefreshStatusChanged = mAdWasLoaded &&
+                (mCurrentAutoRefreshStatus != newAutoRefreshStatus);
+        if (autoRefreshStatusChanged) {
+            final String enabledString = (newAutoRefreshStatus) ? "enabled" : "disabled";
             MoPubLog.d("Refresh " + enabledString + " for ad unit (" + mAdUnitId + ").");
         }
 
-        mAutoRefreshEnabled = enabled;
-        if (mAdWasLoaded && mAutoRefreshEnabled) {
+        mCurrentAutoRefreshStatus = newAutoRefreshStatus;
+        if (mAdWasLoaded && mCurrentAutoRefreshStatus) {
             scheduleRefreshTimerIfEnabled();
-        } else if (!mAutoRefreshEnabled) {
+        } else if (!mCurrentAutoRefreshStatus) {
             cancelRefreshTimer();
         }
     }
@@ -399,7 +428,7 @@ void cleanup() {
             mActiveRequest = null;
         }
 
-        setAutorefreshEnabled(false);
+        setAutoRefreshStatus(false);
         cancelRefreshTimer();
 
         // WebView subclasses are not garbage-collected in a timely fashion on Froyo and below,
@@ -480,7 +509,7 @@ void adDidFail(MoPubErrorCode errorCode) {
 
     void scheduleRefreshTimerIfEnabled() {
         cancelRefreshTimer();
-        if (mAutoRefreshEnabled && mRefreshTimeMillis != null && mRefreshTimeMillis > 0) {
+        if (mCurrentAutoRefreshStatus && mRefreshTimeMillis != null && mRefreshTimeMillis > 0) {
 
             mHandler.postDelayed(mRefreshRunnable,
                     Math.min(MAX_REFRESH_TIME_MILLISECONDS,
@@ -569,4 +598,4 @@ Integer getRefreshTimeMillis() {
     void setRefreshTimeMillis(@Nullable final Integer refreshTimeMillis) {
         mRefreshTimeMillis = refreshTimeMillis;
     }
-}
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java
index 9b2e04e4..9f6b7f32 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java
@@ -19,7 +19,7 @@ public BaseBroadcastReceiver(final long broadcastIdentifier) {
         mBroadcastIdentifier = broadcastIdentifier;
     }
 
-    static void broadcastAction(@NonNull final Context context, final long broadcastIdentifier,
+    public static void broadcastAction(@NonNull final Context context, final long broadcastIdentifier,
             @NonNull final String action) {
         Preconditions.checkNotNull(context, "context cannot be null");
         Preconditions.checkNotNull(action, "action cannot be null");
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
index d3322c04..b7c20a78 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
@@ -8,6 +8,9 @@
     CANCELLED("Ad request was cancelled."),
     NO_CONNECTION("No internet connection detected."),
 
+    /** see {@link com.mopub.common.Constants#AD_EXPIRATION_DELAY } */
+    EXPIRED("Ad expired since it was not shown within 4 hours."),
+
     ADAPTER_NOT_FOUND("Unable to find Native Network or Custom Event adapter."),
     ADAPTER_CONFIGURATION_ERROR("Native Network or Custom Event adapter was configured incorrectly."),
     NETWORK_TIMEOUT("Third-party network failed to respond in a timely manner."),
@@ -20,6 +23,9 @@
     VIDEO_NOT_AVAILABLE("No video loaded for ad unit."),
     VIDEO_PLAYBACK_ERROR("Error playing a video."),
 
+    REWARDED_CURRENCIES_PARSING_ERROR("Error parsing rewarded currencies JSON header."),
+    REWARD_NOT_SELECTED("Reward not selected for rewarded ad."),
+
     UNSPECIFIED("Unspecified error.");
 
     private final String message;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
index fcb0c4ab..4b26ded7 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -36,7 +36,7 @@
         public void onBannerCollapsed(MoPubView banner);
     }
 
-    private final String CUSTOM_EVENT_BANNER_ADAPTER_FACTORY =
+    private static final String CUSTOM_EVENT_BANNER_ADAPTER_FACTORY =
             "com.mopub.mobileads.factories.CustomEventBannerAdapterFactory";
 
     @Nullable
@@ -65,15 +65,22 @@ public MoPubView(Context context, AttributeSet attrs) {
         setHorizontalScrollBarEnabled(false);
         setVerticalScrollBarEnabled(false);
 
-        // There is a rare bug in Froyo/2.2 where creation of a WebView causes a
-        // NullPointerException. (https://code.google.com/p/android/issues/detail?id=10789)
-        // It happens when the WebView can't access the local file store to make a cache file.
-        // Here, we'll work around it by trying to create a file store and then just go inert
-        // if it's not accessible.
-        if (WebViewDatabase.getInstance(context) == null) {
-            MoPubLog.e("Disabling MoPub. Local cache file is inaccessible so MoPub will " +
-                    "fail if we try to create a WebView. Details of this Android bug found at:" +
-                    "https://code.google.com/p/android/issues/detail?id=10789");
+        try {
+            // There is a rare bug in Froyo/2.2 where creation of a WebView causes a
+            // NullPointerException. (https://code.google.com/p/android/issues/detail?id=10789)
+            // It happens when the WebView can't access the local file store to make a cache file.
+            // Here, we'll work around it by trying to create a file store and then just go inert
+            // if it's not accessible.
+            if (WebViewDatabase.getInstance(context) == null) {
+                MoPubLog.e("Disabling MoPub. Local cache file is inaccessible so MoPub will " +
+                        "fail if we try to create a WebView. Details of this Android bug found at:" +
+                        "https://code.google.com/p/android/issues/detail?id=10789");
+                return;
+            }
+        } catch (Exception e) {
+            // If anything goes wrong here, it's most likely due to not having a WebView at all.
+            // This happens when Android updates WebView.
+            MoPubLog.e("Disabling MoPub due to no WebView, or it's being updated", e);
             return;
         }
 
@@ -226,7 +233,7 @@ private void setAdVisibility(final int visibility) {
         }
 
         if (Visibility.isScreenVisible(visibility)) {
-            mAdViewController.unpauseRefresh();
+            mAdViewController.resumeRefresh();
         } else {
             mAdViewController.pauseRefresh();
         }
@@ -328,12 +335,12 @@ public void setLocalExtras(Map<String, Object> localExtras) {
 
     public void setAutorefreshEnabled(boolean enabled) {
         if (mAdViewController != null) {
-            mAdViewController.forceSetAutorefreshEnabled(enabled);
+            mAdViewController.setShouldAllowAutoRefresh(enabled);
         }
     }
 
     public boolean getAutorefreshEnabled() {
-        if (mAdViewController != null) return mAdViewController.getAutorefreshEnabled();
+        if (mAdViewController != null) return mAdViewController.getCurrentAutoRefreshStatus();
         else {
             MoPubLog.d("Can't get autorefresh status for destroyed MoPubView. " +
                     "Returning false.");
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java
index 05a8c05d..ee2512ba 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java
@@ -50,8 +50,9 @@ public void stop() {
         mIsRunning = false;
     }
 
+    @Deprecated
     @VisibleForTesting
-    boolean shouldBeRunning() {
+    public boolean isRunning() {
         return mIsRunning;
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
index 78997180..ce6a4b9a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
@@ -105,9 +105,12 @@
                 if (Strings.isPercentageTracker(offsetString)) {
                     String trackingUrl = XmlUtils.getNodeValue(progressNode);
                     try {
-                        float trackingFraction =
+                        final float trackingFraction =
                                 Float.parseFloat(offsetString.replace("%", "")) / 100f;
-                        percentTrackers.add(new VastFractionalProgressTracker(trackingUrl, trackingFraction));
+                        if (trackingFraction >= 0) {
+                            percentTrackers.add(new VastFractionalProgressTracker(trackingUrl,
+                                    trackingFraction));
+                        }
                     } catch (NumberFormatException e) {
                         MoPubLog.d(String.format("Failed to parse VAST progress tracker %s",
                                 offsetString));
@@ -164,7 +167,7 @@
                     String trackingUrl = XmlUtils.getNodeValue(progressNode);
                     try {
                         Integer trackingMilliseconds = Strings.parseAbsoluteOffset(offsetString);
-                        if (trackingMilliseconds != null) {
+                        if (trackingMilliseconds != null && trackingMilliseconds >= 0) {
                             trackers.add(new VastAbsoluteProgressTracker(trackingUrl, trackingMilliseconds));
                         }
                     } catch (NumberFormatException e) {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
index 9f53d535..b91c615c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
@@ -10,6 +10,7 @@
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
+import com.mopub.common.Constants;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.Preconditions;
 import com.mopub.common.UrlAction;
@@ -20,6 +21,9 @@
 import com.mopub.common.util.Strings;
 import com.mopub.exceptions.IntentNotResolvableException;
 
+import org.json.JSONArray;
+import org.json.JSONObject;
+
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -112,7 +116,7 @@ public void addFractionalTrackers(@NonNull final List<VastFractionalProgressTrac
     }
 
     /**
-     * Add trackers for absolute tracking. This includes start trackers, which have an absolute threshold of 2 seconds.
+     * Add trackers for absolute tracking.
      */
     public void addAbsoluteTrackers(@NonNull final List<VastAbsoluteProgressTracker> absoluteTrackers) {
         Preconditions.checkNotNull(absoluteTrackers, "absoluteTrackers cannot be null");
@@ -170,6 +174,73 @@ public void addErrorTrackers(@NonNull final List<VastTracker> errorTrackers) {
         mErrorTrackers.addAll(errorTrackers);
     }
 
+    /**
+     * Adds internal video trackers from a JSONObject in the form:
+     *      {
+     *          urls: [ "...%%VIDEO_EVENT%%...", ... ],
+     *          events: [ "companionAdView", ... ]
+     *      }
+     *
+     * Each event adds a corresponding tracker type with all the listed urls, with %%VIDEO_EVENT%%
+     * replaced with the event name. The currently supported trackers and their mappings are:
+     *      > start: addAbsoluteTrackers(url, 0)
+     *      > firstQuartile: addFractionalTrackers(url, 0.25f)
+     *      > midpoint: addFractionalTrackers(url, 0.5f)
+     *      > thirdQuartile: addFractionalTrackers(url, 0.75f)
+     *      > complete: addCompleteTrackers(url)
+     *      > companionAdView: VastCompanionAdConfig.addCreativeViewTrackers
+     *      > companionAdClick: VastCompanionAdConfig.addClickTrackers
+     *
+     * @param videoTrackers A JSONObject with the urls and events to track
+     */
+    public void addVideoTrackers(@Nullable final JSONObject videoTrackers) {
+        if (videoTrackers == null) {
+            return;
+        }
+
+        final JSONArray urls = videoTrackers.optJSONArray(Constants.VIDEO_TRACKING_URLS_KEY);
+        final JSONArray events = videoTrackers.optJSONArray(Constants.VIDEO_TRACKING_EVENTS_KEY);
+        if (urls == null || events == null) {
+            return;
+        }
+
+        for (int i = 0; i < events.length(); i++) { // JSONArray isn't Iterable -_-)
+            final String eventName = events.optString(i);
+            final List<String> urlsForEvent = hydrateUrls(eventName, urls);
+            final VideoTrackingEvent event = VideoTrackingEvent.fromString(eventName);
+            if (eventName == null || urlsForEvent == null) {
+                continue;
+            }
+
+            switch (event) {
+                case START:
+                    addStartTrackersForUrls(urlsForEvent);
+                    break;
+                case FIRST_QUARTILE:
+                    addFractionalTrackersForUrls(urlsForEvent, 0.25f);
+                    break;
+                case MIDPOINT:
+                    addFractionalTrackersForUrls(urlsForEvent, 0.5f);
+                    break;
+                case THIRD_QUARTILE:
+                    addFractionalTrackersForUrls(urlsForEvent, 0.75f);
+                    break;
+                case COMPLETE:
+                    addCompleteTrackersForUrls(urlsForEvent);
+                    break;
+                case COMPANION_AD_VIEW:
+                    addCompanionAdViewTrackersForUrls(urlsForEvent);
+                    break;
+                case COMPANION_AD_CLICK:
+                    addCompanionAdClickTrackersForUrls(urlsForEvent);
+                    break;
+                case UNKNOWN:
+                default:
+                    MoPubLog.d("Encountered unknown video tracking event: " + eventName);
+            }
+        }
+    }
+
     public void setClickThroughUrl(@Nullable final String clickThroughUrl) {
         mClickThroughUrl = clickThroughUrl;
     }
@@ -183,7 +254,7 @@ public void setDiskMediaFileUrl(@Nullable final String diskMediaFileUrl) {
     }
 
     public void setVastCompanionAd(@Nullable final VastCompanionAdConfig landscapeVastCompanionAdConfig,
-            @Nullable final VastCompanionAdConfig portraitVastCompanionAdConfig) {
+                                   @Nullable final VastCompanionAdConfig portraitVastCompanionAdConfig) {
         mLandscapeVastCompanionAdConfig = landscapeVastCompanionAdConfig;
         mPortraitVastCompanionAdConfig = portraitVastCompanionAdConfig;
     }
@@ -424,7 +495,7 @@ public void handleImpression(@NonNull final Context context, int contentPlayHead
      *                        made.
      */
     public void handleClickForResult(@NonNull final Activity activity, final int contentPlayHead,
-            final int requestCode) {
+                                     final int requestCode) {
         handleClick(activity, contentPlayHead, requestCode);
     }
 
@@ -436,7 +507,7 @@ public void handleClickForResult(@NonNull final Activity activity, final int con
      * @param contentPlayHead Current video playback time when clicked.
      */
     public void handleClickWithoutResult(@NonNull final Context context,
-            final int contentPlayHead) {
+                                         final int contentPlayHead) {
         handleClick(context.getApplicationContext(), contentPlayHead, null);
     }
 
@@ -451,7 +522,7 @@ public void handleClickWithoutResult(@NonNull final Context context,
      *                        kind of activity request is going to be made.
      */
     private void handleClick(@NonNull final Context context, final int contentPlayHead,
-            @Nullable final Integer requestCode) {
+                             @Nullable final Integer requestCode) {
         Preconditions.checkNotNull(context, "context cannot be null");
 
         makeVastTrackingHttpRequest(
@@ -479,7 +550,7 @@ private void handleClick(@NonNull final Context context, final int contentPlayHe
                 .withResultActions(new UrlHandler.ResultActions() {
                     @Override
                     public void urlHandlingSucceeded(@NonNull String url,
-                            @NonNull UrlAction urlAction) {
+                                                     @NonNull UrlAction urlAction) {
                         if (urlAction == UrlAction.OPEN_IN_APP_BROWSER) {
                             Bundle bundle = new Bundle();
                             bundle.putString(MoPubBrowser.DESTINATION_URL_KEY, url);
@@ -510,7 +581,7 @@ public void urlHandlingSucceeded(@NonNull String url,
 
                     @Override
                     public void urlHandlingFailed(@NonNull String url,
-                            @NonNull UrlAction lastFailedUrlAction) {
+                                                  @NonNull UrlAction lastFailedUrlAction) {
                     }
                 })
                 .withoutMoPubBrowser()
@@ -601,7 +672,7 @@ public void handleComplete(@NonNull Context context, int contentPlayHead) {
      * @param contentPlayHead Current video playback time.
      */
     public void handleError(@NonNull Context context, @Nullable VastErrorCode errorCode,
-            int contentPlayHead) {
+                            int contentPlayHead) {
         Preconditions.checkNotNull(context, "context cannot be null");
         makeVastTrackingHttpRequest(
                 mErrorTrackers,
@@ -619,12 +690,13 @@ public void handleError(@NonNull Context context, @Nullable VastErrorCode errorC
      * @param videoLengthMillis the total video length.
      */
     @NonNull
-    public List<VastTracker> getUntriggeredTrackersBefore(int currentPositionMillis, int videoLengthMillis) {
-        if (Preconditions.NoThrow.checkArgument(videoLengthMillis > 0)) {
+    public List<VastTracker> getUntriggeredTrackersBefore(final int currentPositionMillis, final int videoLengthMillis) {
+        if (Preconditions.NoThrow.checkArgument(videoLengthMillis > 0) && currentPositionMillis >= 0) {
             float progressFraction = currentPositionMillis / (float) (videoLengthMillis);
             List<VastTracker> untriggeredTrackers = new ArrayList<VastTracker>();
 
-            VastAbsoluteProgressTracker absoluteTest = new VastAbsoluteProgressTracker("", currentPositionMillis);
+            VastAbsoluteProgressTracker absoluteTest = new VastAbsoluteProgressTracker("",
+                    currentPositionMillis);
             int absoluteTrackerCount = mAbsoluteTrackers.size();
             for (int i = 0; i < absoluteTrackerCount; i++) {
                 VastAbsoluteProgressTracker tracker = mAbsoluteTrackers.get(i);
@@ -699,4 +771,81 @@ public Integer getSkipOffsetMillis(final int videoDuration) {
         }
         return null;
     }
-}
+
+    @Nullable
+    private List<String> hydrateUrls(@Nullable final String event, @NonNull final JSONArray urls) {
+        Preconditions.checkNotNull(urls);
+
+        if (event == null) {
+            return null;
+        }
+
+        final List<String> hydratedUrls = new ArrayList<String>();
+        for (int i = 0; i < urls.length(); i++) {
+            final String url = urls.optString(i);
+            if (url == null) {
+                continue;
+            }
+            hydratedUrls.add(url.replace(Constants.VIDEO_TRACKING_URL_MACRO, event));
+        }
+        return hydratedUrls;
+    }
+
+    private List<VastTracker> createVastTrackersForUrls(@NonNull final List<String> urls) {
+        Preconditions.checkNotNull(urls);
+
+        final List<VastTracker> trackers = new ArrayList<VastTracker>();
+        for (String url : urls) {
+            trackers.add(new VastTracker(url));
+        }
+        return trackers;
+    }
+
+    private void addCompleteTrackersForUrls(@NonNull final List<String> urls) {
+        Preconditions.checkNotNull(urls);
+
+        addCompleteTrackers(createVastTrackersForUrls(urls));
+    }
+
+    private void addStartTrackersForUrls(@NonNull final List<String> urls) {
+        Preconditions.checkNotNull(urls);
+
+        final List<VastAbsoluteProgressTracker> startTrackers = new ArrayList<VastAbsoluteProgressTracker>();
+        for (String url : urls) {
+            startTrackers.add(new VastAbsoluteProgressTracker(url, 0));
+        }
+        addAbsoluteTrackers(startTrackers);
+    }
+
+    private void addFractionalTrackersForUrls(@NonNull final List<String> urls,
+                                              final float fraction) {
+        Preconditions.checkNotNull(urls);
+
+        final List<VastFractionalProgressTracker> fractionalTrackers = new ArrayList<VastFractionalProgressTracker>();
+        for (String url : urls) {
+            fractionalTrackers.add(new VastFractionalProgressTracker(url, fraction));
+        }
+        addFractionalTrackers(fractionalTrackers);
+    }
+
+    private void addCompanionAdViewTrackersForUrls(@NonNull final List<String> urls) {
+        Preconditions.checkNotNull(urls);
+
+        if (hasCompanionAd()) {
+            final List<VastTracker> companionAdViewTrackers = createVastTrackersForUrls(urls);
+            mLandscapeVastCompanionAdConfig.addCreativeViewTrackers(companionAdViewTrackers);
+            mPortraitVastCompanionAdConfig.addCreativeViewTrackers(companionAdViewTrackers);
+        }
+    }
+
+    private void addCompanionAdClickTrackersForUrls(@NonNull final List<String> urls) {
+        Preconditions.checkNotNull(urls);
+
+        if (hasCompanionAd()) {
+            final List<VastTracker> companionAdClickTrackers = createVastTrackersForUrls(urls);
+            mLandscapeVastCompanionAdConfig.addClickTrackers(companionAdClickTrackers);
+            mPortraitVastCompanionAdConfig.addClickTrackers(companionAdClickTrackers);
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java
index 8fe0e8fd..8704e0fe 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java
@@ -37,12 +37,12 @@ public VastVideoRadialCountdownWidget(@NonNull final Context context) {
         setLayoutParams(layoutParams);
     }
 
-    void calibrateAndMakeVisible(final int initialCountdownMilliseconds) {
+    public void calibrateAndMakeVisible(final int initialCountdownMilliseconds) {
         mRadialCountdownDrawable.setInitialCountdown(initialCountdownMilliseconds);
         setVisibility(VISIBLE);
     }
 
-    void updateCountdownProgress(final int initialCountdownMilliseconds, final int currentProgressMilliseconds) {
+    public void updateCountdownProgress(final int initialCountdownMilliseconds, final int currentProgressMilliseconds) {
         // There exists an Android video player bug where VideoView.getCurrentPosition()
         // temporarily returns 0 right after backgrounding and switching back to the app.
         // Therefore, we check against the last known current position to ensure that it's
@@ -65,14 +65,14 @@ void updateCountdownProgress(final int initialCountdownMilliseconds, final int c
     // for testing
     @Deprecated
     @VisibleForTesting
-    RadialCountdownDrawable getImageViewDrawable() {
+    public RadialCountdownDrawable getImageViewDrawable() {
         return mRadialCountdownDrawable;
     }
 
     // for testing
     @Deprecated
     @VisibleForTesting
-    void setImageViewDrawable(RadialCountdownDrawable drawable) {
+    public void setImageViewDrawable(RadialCountdownDrawable drawable) {
         mRadialCountdownDrawable = drawable;
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
index 2015a857..85189cf6 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
@@ -35,6 +35,7 @@
 
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
+import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE;
 import static com.mopub.common.MoPubBrowser.MOPUB_BROWSER_REQUEST_CODE;
 import static com.mopub.mobileads.VastXmlManagerAggregator.ADS_BY_AD_SLOT_ID;
 import static com.mopub.mobileads.VastXmlManagerAggregator.SOCIAL_ACTIONS_AD_SLOT_ID;
@@ -252,7 +253,7 @@ protected void onCreate() {
                 getBaseVideoViewControllerListener().onSetRequestedOrientation(SCREEN_ORIENTATION_PORTRAIT);
                 break;
             case FORCE_LANDSCAPE:
-                getBaseVideoViewControllerListener().onSetRequestedOrientation(SCREEN_ORIENTATION_LANDSCAPE);
+                getBaseVideoViewControllerListener().onSetRequestedOrientation(SCREEN_ORIENTATION_SENSOR_LANDSCAPE);
                 break;
             case DEVICE_ORIENTATION:
                 break;  // don't do anything
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
index c3602e9f..b7c6319c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
@@ -6,8 +6,8 @@
 import com.mopub.common.Preconditions;
 
 /**
- * This class is used to update a {@link VastVideoViewController}'s countdown display according to rules
- * contained in the {@link VastVideoViewController}
+ * A runnable that is used to update a {@link VastVideoViewController}'s countdown display according
+ * to rules contained in the {@link VastVideoViewController}
  */
 public class VastVideoViewCountdownRunnable extends RepeatingHandlerRunnable {
 
@@ -19,7 +19,6 @@ public VastVideoViewCountdownRunnable(@NonNull VastVideoViewController videoView
         Preconditions.checkNotNull(handler);
         Preconditions.checkNotNull(videoViewController);
 
-
         mVideoViewController = videoViewController;
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoTrackingEvent.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoTrackingEvent.java
new file mode 100644
index 00000000..d278e7e0
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoTrackingEvent.java
@@ -0,0 +1,44 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+/**
+ * Internal Video Tracking events, defined in ad server
+ */
+enum VideoTrackingEvent {
+    START("start"),
+    FIRST_QUARTILE("firstQuartile"),
+    MIDPOINT("midpoint"),
+    THIRD_QUARTILE("thirdQuartile"),
+    COMPLETE("complete"),
+    COMPANION_AD_VIEW("companionAdView"),
+    COMPANION_AD_CLICK("companionAdClick"),
+    UNKNOWN("");
+
+    private final String name;
+
+    VideoTrackingEvent(@NonNull final String name) {
+        this.name = name;
+    }
+
+    @NonNull
+    public String getName() {
+        return name;
+    }
+
+    @NonNull
+    public static VideoTrackingEvent fromString(@Nullable final String name) {
+        if (name == null) {
+            return UNKNOWN;
+        }
+
+        for (VideoTrackingEvent event : VideoTrackingEvent.values()) {
+            if (name.equals(event.getName())) {
+                return event;
+            }
+        }
+
+        return UNKNOWN;
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
index d12bf8e1..dbe95757 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
@@ -3,6 +3,7 @@
 import android.graphics.Canvas;
 import android.graphics.ColorFilter;
 import android.graphics.Paint;
+import android.graphics.PixelFormat;
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
 import android.support.annotation.NonNull;
@@ -29,6 +30,6 @@ public void setColorFilter(ColorFilter colorFilter) {
 
     @Override
     public int getOpacity() {
-        return 0;
+        return PixelFormat.UNKNOWN;
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
index b3dd1bff..fed16cfd 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
@@ -64,12 +64,12 @@
         public static final int TEXT_COLOR = Color.WHITE;
         public static final Paint.Align TEXT_ALIGN = Paint.Align.CENTER;
     }
-    
+
     public static class CloseButton {
-        public static final int WIDGET_HEIGHT_DIPS = 46;
-        public static final int EDGE_PADDING = 16;
-        public static final int IMAGE_PADDING_DIPS = 5;
-        public static final int TEXT_RIGHT_MARGIN_DIPS = 7;
+        public static final int WIDGET_HEIGHT_DIPS = 56;
+        public static final int EDGE_PADDING = 6;
+        public static final int IMAGE_PADDING_DIPS = 15;
+        public static final int TEXT_RIGHT_MARGIN_DIPS = 0;
         public static final float TEXT_SIZE_SP = 20f;
 
         public static final int STROKE_COLOR = Color.WHITE;
@@ -80,7 +80,7 @@
         public static final Typeface TEXT_TYPEFACE = Typeface.create("Helvetica", Typeface.NORMAL);
         public static final int TEXT_COLOR = Color.WHITE;
     }
-    
+
     public static class GradientStrip {
         public static final int GRADIENT_STRIP_HEIGHT_DIPS = 72;
         public static final int START_COLOR = Color.argb(102, 0, 0, 0);
@@ -100,4 +100,4 @@
         public static final int ADS_BY_LEFT_MARGIN_DIPS = 6;
         public static final int SOCIAL_ACTIONS_LEFT_MARGIN_DIPS = 16;
     }
-}
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
index 7071ffa0..cc0791a9 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
@@ -884,5 +884,5 @@
             "      }\n" +
             "    }\n" +
             "  };\n" +
-            "}());\n";
+            "}());\n".replaceAll("(?m)^\\s+", "").replaceAll("(?m)^//.*(?=\\n)", "");
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java
index 897b22a0..9e77def6 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java
@@ -73,10 +73,6 @@ void onSetOrientationProperties(boolean allowOrientationChange, MraidOrientation
         void onPlayVideo(URI uri);
     }
 
-    private final String FILTERED_JAVASCRIPT_SOURCE = MraidJavascript.JAVASCRIPT_SOURCE
-            .replaceAll("(?m)^\\s+", "")
-            .replaceAll("(?m)^//.*(?=\\n)", "");
-
     @NonNull private final PlacementType mPlacementType;
 
     @NonNull private final MraidNativeCommandHandler mMraidNativeCommandHandler;
@@ -115,7 +111,6 @@ void attachView(@NonNull MraidWebView mraidWebView) {
             }
         }
 
-        mMraidWebView.loadUrl("javascript:" + FILTERED_JAVASCRIPT_SOURCE);
         mMraidWebView.setScrollContainer(false);
         mMraidWebView.setVerticalScrollBarEnabled(false);
         mMraidWebView.setHorizontalScrollBarEnabled(false);
@@ -275,12 +270,6 @@ public boolean isVisible() {
     }
 
     private final WebViewClient mMraidWebViewClient = new WebViewClient() {
-        @Override
-        public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
-            MoPubLog.d("Error: " + description);
-            super.onReceivedError(view, errorCode, description, failingUrl);
-        }
-
         @Override
         public boolean shouldOverrideUrlLoading(@NonNull WebView view, @NonNull String url) {
             return handleShouldOverrideUrl(url);
@@ -290,6 +279,13 @@ public boolean shouldOverrideUrlLoading(@NonNull WebView view, @NonNull String u
         public void onPageFinished(@NonNull WebView view, @NonNull String url) {
             handlePageFinished();
         }
+
+        @Override
+        public void onReceivedError(@NonNull WebView view, int errorCode,
+                                    @NonNull String description, @NonNull String failingUrl) {
+            MoPubLog.d("Error: " + description);
+            super.onReceivedError(view, errorCode, description, failingUrl);
+        }
     };
 
     @VisibleForTesting
@@ -587,7 +583,7 @@ public void notifyScreenMetrics(@NonNull final MraidScreenMetrics screenMetrics)
                 + stringifyRect(screenMetrics.getDefaultAdRectDips())
                 + ")");
         injectJavaScript("mraidbridge.notifySizeChangeEvent("
-                + stringifySize(screenMetrics.getCurrentAdRect())
+                + stringifySize(screenMetrics.getCurrentAdRectDips())
                 + ")");
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
index ef97e1a9..edfd1078 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
@@ -794,7 +794,7 @@ void handleExpand(@Nullable URI uri, boolean shouldUseCustomClose)
     }
 
     @VisibleForTesting
-    void handleClose() {
+    protected void handleClose() {
         if (mMraidWebView == null) {
             // Doesn't throw an exception because the ad has been destroyed
             return;
@@ -954,7 +954,7 @@ boolean shouldAllowForceOrientation(final MraidOrientation newOrientation) {
     }
 
     @VisibleForTesting
-    void handleCustomClose(boolean useCustomClose) {
+    protected void handleCustomClose(boolean useCustomClose) {
         boolean wasUsingCustomClose = !mCloseableAdContainer.isCloseVisible();
         if (useCustomClose == wasUsingCustomClose) {
             return;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewClient.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewClient.java
new file mode 100644
index 00000000..5c256769
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewClient.java
@@ -0,0 +1,46 @@
+package com.mopub.mraid;
+
+import android.net.Uri;
+import android.support.annotation.NonNull;
+import android.support.annotation.VisibleForTesting;
+import android.webkit.WebResourceResponse;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
+
+import com.mopub.mobileads.resource.MraidJavascript;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.util.Locale;
+
+/**
+ * Handles injecting the MRAID javascript when encountering mraid.js urls
+ */
+public class MraidWebViewClient extends WebViewClient {
+
+    private static final String MRAID_JS = "mraid.js";
+    private static final String MRAID_INJECTION_JAVASCRIPT = "javascript:"
+            + MraidJavascript.JAVASCRIPT_SOURCE;
+
+    @SuppressWarnings("deprecation") // new method will simply call this one
+    @Override
+    public WebResourceResponse shouldInterceptRequest(@NonNull final WebView view,
+                                                      @NonNull final String url) {
+        if (matchesInjectionUrl(url)) {
+            return createMraidInjectionResponse();
+        } else {
+            return super.shouldInterceptRequest(view, url);
+        }
+    }
+
+    @VisibleForTesting
+    boolean matchesInjectionUrl(@NonNull final String url) {
+        final Uri uri = Uri.parse(url.toLowerCase(Locale.US));
+        return MRAID_JS.equals(uri.getLastPathSegment());
+    }
+
+    private WebResourceResponse createMraidInjectionResponse() {
+        InputStream data = new ByteArrayInputStream(MRAID_INJECTION_JAVASCRIPT.getBytes());
+        return new WebResourceResponse("text/javascript", "UTF-8", data);
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
index 2118eaa2..7b429099 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
@@ -199,6 +199,12 @@ public Listener getListener() {
                 fullAdTypeString, headers);
         builder.setCustomEventClassName(customEventClassName);
 
+        // Default browser agent from X-Browser-Agent header
+        MoPub.BrowserAgent browserAgent = MoPub.BrowserAgent.fromHeader(
+                extractIntegerHeader(headers, ResponseHeader.BROWSER_AGENT));
+        MoPub.setBrowserAgentFromAdServer(browserAgent);
+        builder.setBrowserAgent(browserAgent);
+
         // Process server extras if they are present:
         String customEventData = extractHeader(headers, ResponseHeader.CUSTOM_EVENT_DATA);
 
@@ -266,18 +272,35 @@ public Listener getListener() {
                             .build()
             );
         }
+
+        // Extract internal video trackers, if available
+        final String videoTrackers = extractHeader(headers, ResponseHeader.VIDEO_TRACKERS);
+        if (videoTrackers != null) {
+            serverExtras.put(DataKeys.VIDEO_TRACKERS_KEY, videoTrackers);
+        }
+
         builder.setServerExtras(serverExtras);
 
-        if (AdType.REWARDED_VIDEO.equals(adTypeString) || AdType.CUSTOM.equals(adTypeString)) {
+        if (AdType.REWARDED_VIDEO.equals(adTypeString) || AdType.CUSTOM.equals(adTypeString) ||
+                AdType.REWARDED_PLAYABLE.equals(adTypeString)) {
             final String rewardedVideoCurrencyName = extractHeader(headers,
                     ResponseHeader.REWARDED_VIDEO_CURRENCY_NAME);
             final String rewardedVideoCurrencyAmount = extractHeader(headers,
                     ResponseHeader.REWARDED_VIDEO_CURRENCY_AMOUNT);
+            final String rewardedCurrencies = extractHeader(headers,
+                    ResponseHeader.REWARDED_CURRENCIES);
             final String rewardedVideoCompletionUrl = extractHeader(headers,
                     ResponseHeader.REWARDED_VIDEO_COMPLETION_URL);
+            final Integer rewardedDuration = extractIntegerHeader(headers,
+                    ResponseHeader.REWARDED_DURATION);
+            final boolean shouldRewardOnClick = extractBooleanHeader(headers,
+                    ResponseHeader.SHOULD_REWARD_ON_CLICK, false);
             builder.setRewardedVideoCurrencyName(rewardedVideoCurrencyName);
             builder.setRewardedVideoCurrencyAmount(rewardedVideoCurrencyAmount);
+            builder.setRewardedCurrencies(rewardedCurrencies);
             builder.setRewardedVideoCompletionUrl(rewardedVideoCompletionUrl);
+            builder.setRewardedDuration(rewardedDuration);
+            builder.setShouldRewardOnClick(shouldRewardOnClick);
         }
 
         AdResponse adResponse = builder.build();
@@ -291,7 +314,8 @@ private boolean eventDataIsInResponseBody(@Nullable String adType,
             @Nullable String fullAdType) {
         return AdType.MRAID.equals(adType) || AdType.HTML.equals(adType) ||
                 (AdType.INTERSTITIAL.equals(adType) && FullAdType.VAST.equals(fullAdType)) ||
-                (AdType.REWARDED_VIDEO.equals(adType) && FullAdType.VAST.equals(fullAdType));
+                (AdType.REWARDED_VIDEO.equals(adType) && FullAdType.VAST.equals(fullAdType)) ||
+                AdType.REWARDED_PLAYABLE.equals(adType);
     }
 
     // Based on Volley's StringResponse class.
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
index 29b29c71..35c37909 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
@@ -3,6 +3,7 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
+import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.event.EventDetails;
 import com.mopub.common.util.DateAndTime;
 
@@ -31,7 +32,12 @@
     @Nullable
     private final String mRewardedVideoCurrencyAmount;
     @Nullable
+    private final String mRewardedCurrencies;
+    @Nullable
     private final String mRewardedVideoCompletionUrl;
+    @Nullable
+    private final Integer mRewardedDuration;
+    private final boolean mShouldRewardOnClick;
 
     @Nullable
     private final String mRedirectUrl;
@@ -67,6 +73,8 @@
 
     @Nullable
     private final String mCustomEventClassName;
+    @Nullable
+    private final BrowserAgent mBrowserAgent;
     @NonNull
     private final Map<String, String> mServerExtras;
 
@@ -81,7 +89,10 @@ private AdResponse(@NonNull Builder builder) {
 
         mRewardedVideoCurrencyName = builder.rewardedVideoCurrencyName;
         mRewardedVideoCurrencyAmount = builder.rewardedVideoCurrencyAmount;
+        mRewardedCurrencies = builder.rewardedCurrencies;
         mRewardedVideoCompletionUrl = builder.rewardedVideoCompletionUrl;
+        mRewardedDuration = builder.rewardedDuration;
+        mShouldRewardOnClick = builder.shouldRewardOnClick;
 
         mRedirectUrl = builder.redirectUrl;
         mClickTrackingUrl = builder.clickTrackingUrl;
@@ -98,6 +109,7 @@ private AdResponse(@NonNull Builder builder) {
         mJsonBody = builder.jsonBody;
         mEventDetails = builder.eventDetails;
         mCustomEventClassName = builder.customEventClassName;
+        mBrowserAgent = builder.mBrowserAgent;
         mServerExtras = builder.serverExtras;
         mTimestamp = DateAndTime.now().getTime();
     }
@@ -151,11 +163,25 @@ public String getRewardedVideoCurrencyAmount() {
         return mRewardedVideoCurrencyAmount;
     }
 
+    @Nullable
+    public String getRewardedCurrencies() {
+        return mRewardedCurrencies;
+    }
+
     @Nullable
     public String getRewardedVideoCompletionUrl() {
         return mRewardedVideoCompletionUrl;
     }
 
+    @Nullable
+    public Integer getRewardedDuration() {
+        return mRewardedDuration;
+    }
+
+    public boolean shouldRewardOnClick() {
+        return mShouldRewardOnClick;
+    }
+
     @Nullable
     public String getRedirectUrl() {
         return mRedirectUrl;
@@ -215,6 +241,9 @@ public String getCustomEventClassName() {
         return mCustomEventClassName;
     }
 
+    @Nullable
+    public BrowserAgent getBrowserAgent() { return mBrowserAgent; }
+
     @NonNull
     public Map<String, String> getServerExtras() {
         // Strings are immutable, so this works as a "deep" copy.
@@ -229,6 +258,12 @@ public Builder toBuilder() {
         return new Builder()
                 .setAdType(mAdType)
                 .setNetworkType(mNetworkType)
+                .setRewardedVideoCurrencyName(mRewardedVideoCurrencyName)
+                .setRewardedVideoCurrencyAmount(mRewardedVideoCurrencyAmount)
+                .setRewardedCurrencies(mRewardedCurrencies)
+                .setRewardedVideoCompletionUrl(mRewardedVideoCompletionUrl)
+                .setRewardedDuration(mRewardedDuration)
+                .setShouldRewardOnClick(mShouldRewardOnClick)
                 .setRedirectUrl(mRedirectUrl)
                 .setClickTrackingUrl(mClickTrackingUrl)
                 .setImpressionTrackingUrl(mImpressionTrackingUrl)
@@ -242,6 +277,7 @@ public Builder toBuilder() {
                 .setJsonBody(mJsonBody)
                 .setEventDetails(mEventDetails)
                 .setCustomEventClassName(mCustomEventClassName)
+                .setBrowserAgent(mBrowserAgent)
                 .setServerExtras(mServerExtras);
     }
 
@@ -253,7 +289,10 @@ public Builder toBuilder() {
 
         private String rewardedVideoCurrencyName;
         private String rewardedVideoCurrencyAmount;
+        private String rewardedCurrencies;
         private String rewardedVideoCompletionUrl;
+        private Integer rewardedDuration;
+        private boolean shouldRewardOnClick;
 
         private String redirectUrl;
         private String clickTrackingUrl;
@@ -275,6 +314,7 @@ public Builder toBuilder() {
         private EventDetails eventDetails;
 
         private String customEventClassName;
+        private BrowserAgent mBrowserAgent;
         private Map<String, String> serverExtras = new TreeMap<String, String>();
 
         public Builder setAdType(@Nullable final String adType) {
@@ -309,12 +349,27 @@ public Builder setRewardedVideoCurrencyAmount(
             return this;
         }
 
+        public Builder setRewardedCurrencies(@Nullable final String rewardedCurrencies) {
+            this.rewardedCurrencies = rewardedCurrencies;
+            return this;
+        }
+
         public Builder setRewardedVideoCompletionUrl(
                 @Nullable final String rewardedVideoCompletionUrl) {
             this.rewardedVideoCompletionUrl = rewardedVideoCompletionUrl;
             return this;
         }
 
+        public Builder setRewardedDuration(@Nullable final Integer rewardedDuration) {
+            this.rewardedDuration = rewardedDuration;
+            return this;
+        }
+
+        public Builder setShouldRewardOnClick(final boolean shouldRewardOnClick) {
+            this.shouldRewardOnClick = shouldRewardOnClick;
+            return this;
+        }
+
         public Builder setRedirectUrl(@Nullable final String redirectUrl) {
             this.redirectUrl = redirectUrl;
             return this;
@@ -341,7 +396,7 @@ public Builder setRequestId(@Nullable final String requestId) {
         }
 
         public Builder setDimensions(@Nullable final Integer width,
-                @Nullable final Integer height) {
+                                     @Nullable final Integer height) {
             this.width = width;
             this.height = height;
             return this;
@@ -387,6 +442,11 @@ public Builder setCustomEventClassName(@Nullable final String customEventClassNa
             return this;
         }
 
+        public Builder setBrowserAgent(@Nullable final BrowserAgent browserAgent) {
+            this.mBrowserAgent = browserAgent;
+            return this;
+        }
+
         public Builder setServerExtras(@Nullable final Map<String, String> serverExtras) {
             if (serverExtras == null) {
                 this.serverExtras = new TreeMap<String, String>();
@@ -400,4 +460,4 @@ public AdResponse build() {
             return new AdResponse(this);
         }
     }
-}
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
index 087f864e..ddb11ef9 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
@@ -116,16 +116,25 @@ public Socket createSocket(final Socket socketParam, final String host, final in
             throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
         }
 
-        // Don't use the original socket and create a new one. This closes the original socket
-        // if the autoClose flag is set.
-        if (autoClose && socketParam != null) {
-            socketParam.close();
+        // There is a bug in Android before version 6.0 where SNI does not work, so we try to do
+        // it manually here.
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
+            // Don't use the original socket and create a new one. This closes the original socket
+            // if the autoClose flag is set.
+            if (autoClose && socketParam != null) {
+                socketParam.close();
+            }
+
+            final Socket socket = mCertificateSocketFactory.createSocket(
+                    InetAddressUtils.getInetAddressByName(host), port);
+            enableTlsIfAvailable(socket);
+            doManualServerNameIdentification(socket, host);
+            return socket;
         }
 
-        final Socket socket = mCertificateSocketFactory.createSocket(
-                InetAddressUtils.getInetAddressByName(host), port);
+        final Socket socket = mCertificateSocketFactory.createSocket(socketParam, host, port,
+                autoClose);
         enableTlsIfAvailable(socket);
-        doManualServerNameIdentification(socket, host);
         return socket;
     }
 
@@ -141,7 +150,7 @@ public Socket createSocket(final Socket socketParam, final String host, final in
      * @throws IOException
      */
     private void doManualServerNameIdentification(@NonNull final Socket socket,
-            @Nullable final String host) throws IOException {
+                                                  @Nullable final String host) throws IOException {
         Preconditions.checkNotNull(socket);
 
         if (mCertificateSocketFactory == null) {
@@ -162,7 +171,7 @@ private void doManualServerNameIdentification(@NonNull final Socket socket,
      */
     @VisibleForTesting
     static void setHostnameOnSocket(@NonNull final SSLCertificateSocketFactory certificateSocketFactory,
-            @NonNull final SSLSocket sslSocket, @Nullable final String host) {
+                                    @NonNull final SSLSocket sslSocket, @Nullable final String host) {
         Preconditions.checkNotNull(certificateSocketFactory);
         Preconditions.checkNotNull(sslSocket);
 
@@ -184,7 +193,7 @@ static void setHostnameOnSocket(@NonNull final SSLCertificateSocketFactory certi
      */
     @VisibleForTesting
     static void verifyServerName(@NonNull final SSLSocket sslSocket,
-            @Nullable final String host) throws IOException {
+                                 @Nullable final String host) throws IOException {
         Preconditions.checkNotNull(sslSocket);
 
         sslSocket.startHandshake();
@@ -209,4 +218,4 @@ private void enableTlsIfAvailable(@Nullable Socket socket) {
     void setCertificateSocketFactory(@NonNull final SSLSocketFactory sslSocketFactory) {
         mCertificateSocketFactory = sslSocketFactory;
     }
-}
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java
index 3010a77e..c0de9b79 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java
@@ -31,7 +31,7 @@ public static Integer extractPercentHeader(Map<String, String> headers, Response
 
     @Nullable
     public static String extractPercentHeaderString(Map<String, String> headers,
-            ResponseHeader responseHeader) {
+                                                    ResponseHeader responseHeader) {
         Integer percentHeaderValue = extractPercentHeader(headers, responseHeader);
         return percentHeaderValue != null ? percentHeaderValue.toString() : null;
     }
@@ -68,6 +68,14 @@ private static boolean formatBooleanHeader(@Nullable String headerValue, boolean
     }
 
     private static Integer formatIntHeader(String headerValue) {
+        try {
+            return Integer.parseInt(headerValue);
+        } catch (Exception e) {
+            // Continue below if we can't parse it quickly
+        }
+
+        // The number format way of parsing integers is way slower than Integer.parseInt, but
+        // for numbers like 3.14, we would like to return 3, not null.
         NumberFormat numberFormat = NumberFormat.getInstance(Locale.US);
         numberFormat.setParseIntegerOnly(true);
 
@@ -93,4 +101,4 @@ private static Integer formatPercentHeader(@Nullable String headerValue) {
 
         return percentValue;
     }
-}
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
index e55db850..8a0b5fde 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
@@ -2,10 +2,12 @@
 
 import android.content.Context;
 import android.graphics.Bitmap;
+import android.os.Build;
 import android.os.Looper;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.v4.util.LruCache;
+import android.webkit.WebSettings;
 import android.webkit.WebView;
 
 import com.mopub.common.ClientMetadata;
@@ -127,16 +129,17 @@ public static String getUserAgent(@NonNull Context context) {
             synchronized (Networking.class) {
                 userAgent = sUserAgent;
                 if (userAgent == null) {
-                    // As of Android 4.4, WebViews may only be instantiated on the UI thread
-                    if (Looper.myLooper() == Looper.getMainLooper()) {
+                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+                        userAgent = WebSettings.getDefaultUserAgent(context);
+                    } else if (Looper.myLooper() == Looper.getMainLooper()){
+                        // WebViews may only be instantiated on the UI thread. If anything goes
+                        // wrong with getting a user agent, use the system-specific user agent.
                         try {
                             userAgent = new WebView(context).getSettings().getUserAgentString();
                         } catch (Exception e) {
                             userAgent = DEFAULT_USER_AGENT;
                         }
                     } else {
-                        // In the exceptional case where we can't access the WebView user agent,
-                        // fall back to the System-specific user agent.
                         userAgent = DEFAULT_USER_AGENT;
                     }
                     sUserAgent = userAgent;
@@ -213,4 +216,4 @@ public static String getScheme() {
     public static String getBaseUrlScheme() {
         return Constants.HTTP;
     }
-}
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
index 122787a0..106a8192 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
@@ -17,7 +17,7 @@
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 
 abstract class BaseInterstitialActivity extends Activity {
-    protected AdReport mAdReport;
+    @Nullable protected AdReport mAdReport;
 
     enum JavaScriptWebViewCallbacks {
         // The ad server appends these functions to the MRAID javascript to help with third party
@@ -39,8 +39,8 @@ protected String getUrl() {
         }
     }
 
-    private CloseableLayout mCloseableLayout;
-    private Long mBroadcastIdentifier;
+    @Nullable private CloseableLayout mCloseableLayout;
+    @Nullable private Long mBroadcastIdentifier;
 
     public abstract View getAdView();
 
@@ -71,20 +71,32 @@ public void onClose() {
 
     @Override
     protected void onDestroy() {
-        mCloseableLayout.removeAllViews();
+        if (mCloseableLayout != null) {
+            mCloseableLayout.removeAllViews();
+        }
         super.onDestroy();
     }
 
+    @Nullable
+    protected CloseableLayout getCloseableLayout() {
+        return mCloseableLayout;
+    }
+
+    @Nullable
     Long getBroadcastIdentifier() {
         return mBroadcastIdentifier;
     }
 
     protected void showInterstitialCloseButton() {
-        mCloseableLayout.setCloseVisible(true);
+        if (mCloseableLayout != null) {
+            mCloseableLayout.setCloseVisible(true);
+        }
     }
 
     protected void hideInterstitialCloseButton() {
-        mCloseableLayout.setCloseVisible(false);
+        if (mCloseableLayout != null) {
+            mCloseableLayout.setCloseVisible(false);
+        }
     }
 
     protected static Long getBroadcastIdentifierFromIntent(Intent intent) {
@@ -102,4 +114,4 @@ protected static AdReport getAdReportFromIntent(Intent intent) {
             return null;
         }
     }
-}
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
index 38de8ba8..be2031bc 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
@@ -3,6 +3,7 @@
 import android.app.Activity;
 import android.content.Context;
 import android.location.Location;
+import android.os.Handler;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
@@ -15,12 +16,14 @@
 
 import java.util.Map;
 
+import static com.mopub.common.Constants.AD_EXPIRATION_DELAY;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
+import static com.mopub.mobileads.MoPubErrorCode.EXPIRED;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.DESTROYED;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.IDLE;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.LOADING;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.READY;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.SHOWING;
-import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.DESTROYED;
 
 public class MoPubInterstitial implements CustomEventInterstitialAdapter.CustomEventInterstitialAdapterListener {
     @VisibleForTesting
@@ -55,6 +58,8 @@
     @Nullable private CustomEventInterstitialAdapter mCustomEventInterstitialAdapter;
     @Nullable private InterstitialAdListener mInterstitialAdListener;
     @NonNull private Activity mActivity;
+    @NonNull private Handler mHandler;
+    @NonNull private final Runnable mAdExpiration;
     @NonNull private volatile InterstitialState mCurrentInterstitialState;
 
     public interface InterstitialAdListener {
@@ -72,6 +77,21 @@ public MoPubInterstitial(@NonNull final Activity activity, @NonNull final String
         mInterstitialView.setAdUnitId(adUnitId);
 
         mCurrentInterstitialState = IDLE;
+
+        mHandler = new Handler();
+        mAdExpiration = new Runnable() {
+            @Override
+            public void run() {
+                MoPubLog.d("Expiring unused Interstitial ad.");
+                attemptStateTransition(IDLE, true);
+                if (!SHOWING.equals(mCurrentInterstitialState) &&
+                        !DESTROYED.equals(mCurrentInterstitialState)) {
+                    // double-check the state in case the runnable fires right after the state
+                    // transition but before it's cancelled
+                    mInterstitialView.adFailed(EXPIRED);
+                }
+            }
+        };
     }
 
     private boolean attemptStateTransition(@NonNull final InterstitialState endState) {
@@ -83,14 +103,14 @@ private boolean attemptStateTransition(@NonNull final InterstitialState endState
      * Other methods should not be modifying mCurrentInterstitialState.
      *
      * @param endState     The desired end state.
-     * @param forceRefresh Whether or not this is part of a forceRefresh transition. Force
-     *                     refresh can happen from IDLE, LOADING, or READY. It will ignore
+     * @param force Whether or not this is part of a force transition. Force transitions
+     *                     can happen from IDLE, LOADING, or READY. It will ignore
      *                     the currently loading or loaded ad and attempt to load another.
      * @return {@code true} if a state change happened, {@code false} if no state change happened.
      */
     @VisibleForTesting
     synchronized boolean attemptStateTransition(@NonNull final InterstitialState endState,
-            boolean forceRefresh) {
+                                                boolean force) {
         Preconditions.checkNotNull(endState);
 
         final InterstitialState startState = mCurrentInterstitialState;
@@ -110,7 +130,7 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
                         // Going from IDLE to LOADING is the usual load case
                         invalidateInterstitialAdapter();
                         mCurrentInterstitialState = LOADING;
-                        if (forceRefresh) {
+                        if (force) {
                             // Force-load means a pub-initiated force refresh.
                             mInterstitialView.forceRefresh();
                         } else {
@@ -137,7 +157,7 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
                         mCurrentInterstitialState = IDLE;
                         return true;
                     case LOADING:
-                        if (!forceRefresh) {
+                        if (!force) {
                             // Cannot load more than one interstitial at a time
                             MoPubLog.d("Already loading an interstitial.");
                         }
@@ -145,6 +165,11 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
                     case READY:
                         // This is the usual load finished transition
                         mCurrentInterstitialState = READY;
+                        // Expire MoPub ads to synchronize with MoPub Ad Server tracking window
+                        if (AdTypeTranslator.CustomEventType
+                                .isMoPubSpecific(mInterstitialView.getCustomEventClassName())) {
+                            mHandler.postDelayed(mAdExpiration, AD_EXPIRATION_DELAY);
+                        }
                         return true;
                     case SHOWING:
                         MoPubLog.d("Interstitial is not ready to be shown yet.");
@@ -158,8 +183,8 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
             case READY:
                 switch (endState) {
                     case IDLE:
-                        if (forceRefresh) {
-                            // This happens on a force refresh
+                        if (force) {
+                            // This happens on a force refresh or an ad expiration
                             invalidateInterstitialAdapter();
                             mCurrentInterstitialState = IDLE;
                             return true;
@@ -177,6 +202,7 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
                         // This is the usual transition from ready to showing
                         showCustomEventInterstitial();
                         mCurrentInterstitialState = SHOWING;
+                        mHandler.removeCallbacks(mAdExpiration);
                         return true;
                     case DESTROYED:
                         setInterstitialStateDestroyed();
@@ -187,7 +213,7 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
             case SHOWING:
                 switch(endState) {
                     case IDLE:
-                        if (forceRefresh) {
+                        if (force) {
                             MoPubLog.d("Cannot force refresh while showing an interstitial.");
                             return false;
                         }
@@ -196,7 +222,7 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
                         mCurrentInterstitialState = IDLE;
                         return true;
                     case LOADING:
-                        if (!forceRefresh) {
+                        if (!force) {
                             MoPubLog.d("Interstitial already showing. Not loading another.");
                         }
                         return false;
@@ -225,6 +251,7 @@ private void setInterstitialStateDestroyed() {
         invalidateInterstitialAdapter();
         mInterstitialView.setBannerAdListener(null);
         mInterstitialView.destroy();
+        mHandler.removeCallbacks(mAdExpiration);
         mCurrentInterstitialState = DESTROYED;
     }
 
@@ -398,6 +425,10 @@ public MoPubInterstitialView(Context context) {
             setAutorefreshEnabled(false);
         }
 
+        @Nullable String getCustomEventClassName() {
+            return mAdViewController.getCustomEventClassName();
+        }
+
         @Override
         public AdFormat getAdFormat() {
             return AdFormat.INTERSTITIAL;
@@ -445,6 +476,12 @@ protected void adFailed(MoPubErrorCode errorCode) {
         }
     }
 
+    @VisibleForTesting
+    @Deprecated
+    void setHandler(@NonNull final Handler handler) {
+        mHandler = handler;
+    }
+
     @VisibleForTesting
     @Deprecated
     void setInterstitialView(@NonNull MoPubInterstitialView interstitialView) {
@@ -467,7 +504,7 @@ InterstitialState getCurrentInterstitialState() {
     @VisibleForTesting
     @Deprecated
     void setCustomEventInterstitialAdapter(@NonNull final CustomEventInterstitialAdapter
-            customEventInterstitialAdapter) {
+                                                   customEventInterstitialAdapter) {
         mCustomEventInterstitialAdapter = customEventInterstitialAdapter;
     }
-}
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
index 7431b47d..7ec96a50 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
@@ -3,8 +3,7 @@
 import android.content.ActivityNotFoundException;
 import android.content.Context;
 import android.content.Intent;
-import android.os.Build.VERSION;
-import android.os.Build.VERSION_CODES;
+import android.os.Build;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -12,7 +11,6 @@
 import android.view.View;
 import android.view.WindowManager;
 import android.webkit.WebView;
-import android.webkit.WebViewClient;
 
 import com.mopub.common.AdReport;
 import com.mopub.common.Constants;
@@ -22,6 +20,7 @@
 import com.mopub.mraid.MraidController;
 import com.mopub.mraid.MraidController.MraidListener;
 import com.mopub.mraid.MraidController.UseCustomCloseListener;
+import com.mopub.mraid.MraidWebViewClient;
 import com.mopub.mraid.MraidWebViewDebugListener;
 import com.mopub.mraid.PlacementType;
 import com.mopub.network.Networking;
@@ -29,12 +28,12 @@
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
+import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
 
 public class MraidActivity extends BaseInterstitialActivity {
@@ -42,33 +41,38 @@
     @Nullable private MraidWebViewDebugListener mDebugListener;
 
     public static void preRenderHtml(@NonNull final Context context,
-            @NonNull final CustomEventInterstitialListener customEventInterstitialListener,
-            @NonNull final String htmlData) {
+                                     @NonNull final CustomEventInterstitialListener customEventInterstitialListener,
+                                     @Nullable final String htmlData) {
         preRenderHtml(customEventInterstitialListener, htmlData, new BaseWebView(context));
     }
 
     @VisibleForTesting
     static void preRenderHtml(
             @NonNull final CustomEventInterstitialListener customEventInterstitialListener,
-            @NonNull final String htmlData, @NonNull final BaseWebView dummyWebView) {
+            @Nullable final String htmlData, @NonNull final BaseWebView dummyWebView) {
         dummyWebView.enablePlugins(false);
         dummyWebView.enableJavascriptCaching();
 
-        dummyWebView.setWebViewClient(new WebViewClient() {
+        dummyWebView.setWebViewClient(new MraidWebViewClient() {
             @Override
-            public void onPageFinished(final WebView view, final String url) {
-                customEventInterstitialListener.onInterstitialLoaded();
+            public boolean shouldOverrideUrlLoading(WebView view, String url) {
+                return true;
             }
 
             @Override
-            public boolean shouldOverrideUrlLoading(WebView view, String url) {
-                return true;
+            public void onPageFinished(final WebView view, final String url) {
+                customEventInterstitialListener.onInterstitialLoaded();
+
+                // can't reuse MraidBridge methods because MraidController is not initialized yet
+                dummyWebView.loadUrl("javascript:mraidbridge.setState('default');");
+                dummyWebView.loadUrl("javascript:mraidbridge.notifyReadyEvent();");
+
             }
 
             @Override
             public void onReceivedError(final WebView view, final int errorCode,
-                    final String description,
-                    final String failingUrl) {
+                                        final String description,
+                                        final String failingUrl) {
                 super.onReceivedError(view, errorCode, description, failingUrl);
                 customEventInterstitialListener.onInterstitialFailed(
                         MoPubErrorCode.MRAID_LOAD_ERROR);
@@ -79,7 +83,7 @@ public void onReceivedError(final WebView view, final int errorCode,
                 htmlData, "text/html", "UTF-8", null);
     }
 
-    public static void start(@NonNull Context context, @Nullable AdReport adreport, @NonNull String htmlData, long broadcastIdentifier) {
+    public static void start(@NonNull Context context, @Nullable AdReport adreport, @Nullable String htmlData, long broadcastIdentifier) {
         Intent intent = createIntent(context, adreport, htmlData, broadcastIdentifier);
         try {
             context.startActivity(intent);
@@ -90,7 +94,7 @@ public static void start(@NonNull Context context, @Nullable AdReport adreport,
 
     @VisibleForTesting
     protected static Intent createIntent(@NonNull Context context, @Nullable AdReport adReport,
-            @NonNull String htmlData, long broadcastIdentifier) {
+                                         @Nullable String htmlData, long broadcastIdentifier) {
         Intent intent = new Intent(context, MraidActivity.class);
         intent.putExtra(HTML_RESPONSE_BODY_KEY, htmlData);
         intent.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
@@ -123,8 +127,10 @@ public void onLoaded(View view) {
             @Override
             public void onFailedToLoad() {
                 MoPubLog.d("MraidActivity failed to load. Finishing the activity");
-                broadcastAction(MraidActivity.this, getBroadcastIdentifier(),
-                        ACTION_INTERSTITIAL_FAIL);
+                if (getBroadcastIdentifier() != null) {
+                    broadcastAction(MraidActivity.this, getBroadcastIdentifier(),
+                            ACTION_INTERSTITIAL_FAIL);
+                }
                 finish();
             }
 
@@ -140,8 +146,10 @@ public void onExpand() {
 
             @Override
             public void onOpen() {
-                broadcastAction(MraidActivity.this, getBroadcastIdentifier(),
-                        ACTION_INTERSTITIAL_CLICK);
+                if (getBroadcastIdentifier()!= null) {
+                    broadcastAction(MraidActivity.this, getBroadcastIdentifier(),
+                            ACTION_INTERSTITIAL_CLICK);
+                }
             }
         });
 
@@ -164,9 +172,11 @@ public void useCustomCloseChanged(boolean useCustomClose) {
     @Override
     public void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_SHOW);
+        if (getBroadcastIdentifier()!= null) {
+            broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_SHOW);
+        }
 
-        if (VERSION.SDK_INT >= VERSION_CODES.ICE_CREAM_SANDWICH) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
             getWindow().setFlags(
                     WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,
                     WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
@@ -195,7 +205,9 @@ protected void onDestroy() {
             mMraidController.destroy();
         }
 
-        broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_DISMISS);
+        if (getBroadcastIdentifier()!= null) {
+            broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_DISMISS);
+        }
         super.onDestroy();
     }
 
@@ -206,4 +218,4 @@ public void setDebugListener(@Nullable MraidWebViewDebugListener debugListener)
             mMraidController.setDebugListener(debugListener);
         }
     }
-}
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
index 293336d2..00c39a7f 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
@@ -1,9 +1,16 @@
 package com.mopub.mobileads;
 
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
 import com.mopub.common.CacheService;
 import com.mopub.common.DataKeys;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.factories.VastManagerFactory;
 
+import org.json.JSONException;
+import org.json.JSONObject;
+
 import java.util.Map;
 
 class VastVideoInterstitial extends ResponseBodyInterstitial implements VastManager.VastManagerListener {
@@ -11,10 +18,23 @@
     private String mVastResponse;
     private VastManager mVastManager;
     private VastVideoConfig mVastVideoConfig;
+    @Nullable private JSONObject mVideoTrackers;
 
     @Override
     protected void extractExtras(Map<String, String> serverExtras) {
         mVastResponse = serverExtras.get(DataKeys.HTML_RESPONSE_BODY_KEY);
+
+        final String videoTrackers = serverExtras.get(DataKeys.VIDEO_TRACKERS_KEY);
+        if (TextUtils.isEmpty(videoTrackers)) {
+            return;
+        }
+
+        try {
+            mVideoTrackers = new JSONObject(videoTrackers);
+        } catch (JSONException e) {
+            MoPubLog.d("Failed to parse video trackers to JSON: " + videoTrackers, e);
+            mVideoTrackers = null;
+        }
     }
 
     @Override
@@ -52,11 +72,13 @@ public void onInvalidate() {
     @Override
     public void onVastVideoConfigurationPrepared(final VastVideoConfig vastVideoConfig) {
         if (vastVideoConfig == null) {
-            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.VIDEO_DOWNLOAD_ERROR);
+            mCustomEventInterstitialListener
+                    .onInterstitialFailed(MoPubErrorCode.VIDEO_DOWNLOAD_ERROR);
             return;
         }
 
         mVastVideoConfig = vastVideoConfig;
+        mVastVideoConfig.addVideoTrackers(mVideoTrackers);
         mCustomEventInterstitialListener.onInterstitialLoaded();
     }
 
@@ -70,4 +92,4 @@ String getVastResponse() {
     void setVastManager(VastManager vastManager) {
         mVastManager = vastManager;
     }
-}
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
index f7e1ae39..6ded3e20 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
@@ -2,6 +2,7 @@
 
 
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import com.mopub.mobileads.MraidActivity;
 import com.mopub.mobileads.ResponseBodyInterstitial;
@@ -11,7 +12,8 @@
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 
 class MraidInterstitial extends ResponseBodyInterstitial {
-    private String mHtmlData;
+    @Nullable
+    protected String mHtmlData;
 
     @Override
     protected void extractExtras(Map<String, String> serverExtras) {
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java
index 7d2b43be..92a6e2d5 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java
@@ -11,6 +11,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import static com.mopub.common.Constants.AD_EXPIRATION_DELAY;
 import static com.mopub.nativeads.MoPubNative.MoPubNativeNetworkListener;
 
 /**
@@ -35,7 +36,7 @@
      */
     private static final int CACHE_LIMIT = 1;
 
-    private static final int EXPIRATION_TIME_MILLISECONDS = 15 * 60 * 1000; // 15 minutes
+    private static final int EXPIRATION_TIME_MILLISECONDS = AD_EXPIRATION_DELAY;
     private static final int MAXIMUM_RETRY_TIME_MILLISECONDS = 5 * 60 * 1000; // 5 minutes.
     @VisibleForTesting static final int[] RETRY_TIME_ARRAY_MILLISECONDS = new int[]{1000, 3000, 5000, 25000, 60000, MAXIMUM_RETRY_TIME_MILLISECONDS};
 
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
index 67f0655d..7a17708b 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
@@ -30,6 +30,7 @@
 import com.mopub.network.TrackingRequest;
 
 import org.json.JSONArray;
+import org.json.JSONException;
 import org.json.JSONObject;
 
 import java.lang.ref.WeakReference;
@@ -48,6 +49,7 @@
 import static com.mopub.common.DataKeys.MAX_BUFFER_MS;
 import static com.mopub.common.DataKeys.PAUSE_VISIBLE_PERCENT;
 import static com.mopub.common.DataKeys.PLAY_VISIBLE_PERCENT;
+import static com.mopub.common.DataKeys.VIDEO_TRACKERS_KEY;
 import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
 import static com.mopub.nativeads.NativeVideoController.VisibilityTrackingEvent;
 
@@ -308,6 +310,19 @@ public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideo
                     mVideoResponseHeaders.getImpressionVisibleMs();
             visibilityTrackingEvents.add(visibilityTrackingEvent);
 
+            // VAST impression trackers
+            for (final VastTracker vastTracker : vastVideoConfig.getImpressionTrackers()) {
+                final VisibilityTrackingEvent vastImpressionTrackingEvent =
+                        new VisibilityTrackingEvent();
+                vastImpressionTrackingEvent.strategy = new PayloadVisibilityStrategy(mContext,
+                        vastTracker.getTrackingUrl());
+                vastImpressionTrackingEvent.minimumPercentageVisible =
+                        mVideoResponseHeaders.getImpressionMinVisiblePercent();
+                vastImpressionTrackingEvent.totalRequiredPlayTimeMs =
+                        mVideoResponseHeaders.getImpressionVisibleMs();
+                visibilityTrackingEvents.add(vastImpressionTrackingEvent);
+            }
+
             // Visibility tracking event from http response Vast payload
             mVastVideoConfig = vastVideoConfig;
             final VideoViewabilityTracker vastVideoViewabilityTracker =
@@ -342,6 +357,12 @@ public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideo
                     mId, mContext, visibilityTrackingEvents, mVastVideoConfig, mEventDetails);
 
             mCustomEventNativeListener.onNativeAdLoaded(this);
+
+            // Internal Video Trackers
+            final JSONObject videoTrackers = mVideoResponseHeaders.getVideoTrackers();
+            if (videoTrackers != null) {
+                mVastVideoConfig.addVideoTrackers(videoTrackers);
+            }
         }
 
         private boolean containsRequiredKeys(@NonNull final JSONObject jsonObject) {
@@ -893,6 +914,7 @@ public NativeVideoController createForId(final long id,
         private int mImpressionMinVisiblePercent;
         private int mImpressionVisibleMs;
         private int mMaxBufferMs;
+        private JSONObject mVideoTrackers;
 
         VideoResponseHeaders(@NonNull final Map<String, String> serverExtras) {
             try {
@@ -906,6 +928,18 @@ public NativeVideoController createForId(final long id,
             } catch (NumberFormatException e) {
                 mHeadersAreValid = false;
             }
+
+            final String videoTrackers = serverExtras.get(VIDEO_TRACKERS_KEY);
+            if (TextUtils.isEmpty(videoTrackers)) {
+                return;
+            }
+
+            try {
+                mVideoTrackers = new JSONObject(videoTrackers);
+            } catch (JSONException e) {
+                MoPubLog.d("Failed to parse video trackers to JSON: " + videoTrackers, e);
+                mVideoTrackers = null;
+            }
         }
 
         boolean hasValidHeaders() {
@@ -931,5 +965,9 @@ int getImpressionVisibleMs() {
         int getMaxBufferMs() {
             return mMaxBufferMs;
         }
+
+        JSONObject getVideoTrackers() {
+            return mVideoTrackers;
+        }
     }
 }
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
index 91ea4256..541e2cd9 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
@@ -8,6 +8,7 @@
 import android.graphics.Color;
 import android.graphics.ColorFilter;
 import android.graphics.Paint;
+import android.graphics.PixelFormat;
 import android.graphics.RectF;
 import android.graphics.SurfaceTexture;
 import android.graphics.drawable.Drawable;
@@ -422,7 +423,7 @@ public void setColorFilter(ColorFilter cf) { }
 
         @Override
         public int getOpacity() {
-            return 0;
+            return PixelFormat.UNKNOWN;
         }
     };
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/common/MoPubReward.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/common/MoPubReward.java
index 0c2b0ce3..60014242 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/common/MoPubReward.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/common/MoPubReward.java
@@ -35,7 +35,7 @@ private MoPubReward(boolean success, @NonNull String label, int amount) {
 
     @NonNull
     public static MoPubReward failure() {
-        return new MoPubReward(false, NO_REWARD_LABEL, 0);
+        return new MoPubReward(false, NO_REWARD_LABEL, DEFAULT_REWARD_AMOUNT);
     }
 
     @NonNull
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedAd.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedAd.java
new file mode 100644
index 00000000..254e7470
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedAd.java
@@ -0,0 +1,111 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MoPubLifecycleManager;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+
+import java.util.Map;
+
+/**
+ * The base class when dealing with rewarded formats.
+ */
+public abstract class CustomEventRewardedAd {
+
+    /**
+     * Provides a {@link LifecycleListener} if the custom event's ad network wishes to be notified of
+     * activity lifecycle events in the application.
+     *
+     * @return a LifecycleListener. May be null.
+     */
+    @Nullable
+    @VisibleForTesting
+    protected abstract LifecycleListener getLifecycleListener();
+
+    /**
+     * The MoPub ad loading system calls this after MoPub indicates that this custom event should
+     * be loaded.
+     *
+     * @param launcherActivity the "main activity" of the app. Useful for initializing sdks.
+     * @param localExtras      a map containing additional custom data set in app
+     * @param serverExtras     a map containing additional custom data configurable on the mopub website
+     */
+    final void loadCustomEvent(@NonNull Activity launcherActivity,
+                               @NonNull Map<String, Object> localExtras,
+                               @NonNull Map<String, String> serverExtras) {
+        try {
+            if (checkAndInitializeSdk(launcherActivity, localExtras, serverExtras)) {
+                MoPubLifecycleManager.getInstance(launcherActivity).addLifecycleListener(
+                        getLifecycleListener());
+            }
+            loadWithSdkInitialized(launcherActivity, localExtras, serverExtras);
+        } catch (Exception e) {
+            MoPubLog.e(e.getMessage());
+        }
+    }
+
+    /**
+     * Sets up the 3rd party ads SDK if it needs configuration. Extenders should use this
+     * to do any static initialization the first time this method is run by any class instance.
+     * From then on, the SDK should be reused without initialization.
+     *
+     * @return true if the SDK performed initialization, false if the SDK was already initialized.
+     */
+    protected abstract boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
+                                                     @NonNull Map<String, Object> localExtras,
+                                                     @NonNull Map<String, String> serverExtras)
+            throws Exception;
+
+    /**
+     * Runs the ad-loading logic for the 3rd party SDK. localExtras & serverExtras should together
+     * contain all the data needed to load an ad.
+     * <p/>
+     * Implementers should also use this method (or checkAndInitializeSdk)
+     * to register a listener for their SDK.
+     * <p/>
+     * This method should not call any {@link MoPubRewardedVideoManager} event methods directly
+     * (onAdLoadSuccess, etc). Instead the SDK delegate/listener should call these methods.
+     *
+     * @param activity     the "main activity" of the app. Useful for initializing sdks.
+     * @param localExtras  a map containing additional custom data set in app
+     * @param serverExtras a map containing additional custom data configurable on the mopub website
+     */
+    protected abstract void loadWithSdkInitialized(@NonNull Activity activity,
+                                                   @NonNull Map<String, Object> localExtras,
+                                                   @NonNull Map<String, String> serverExtras)
+            throws Exception;
+
+    /**
+     * Called by the {@link MoPubRewardedVideoManager} after loading the custom event.
+     * This should return the "ad unit id", "zone id" or similar identifier for the network.
+     * May be empty if the network does not have anything more specific than an application ID.
+     *
+     * @return the id string for this ad unit with the ad network.
+     */
+    @NonNull
+    protected abstract String getAdNetworkId();
+
+    /**
+     * Called to when the custom event is no longer used. Implementers should cancel any
+     * pending requests. The initialized SDK may be reused by another CustomEvent instance
+     * and should not be shut down or cleaned up.
+     */
+    protected abstract void onInvalidate();
+
+    /**
+     * Implementers should query the 3rd party SDK for whether the 3rd party SDK & ID represented
+     * by the custom event is ready to be shown.
+     *
+     * @return true iff a video is available to play.
+     */
+    protected abstract boolean isReady();
+
+    /**
+     * Implementers should now play the rewarded item for this custom event.
+     */
+    protected abstract void show();
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedPlayable.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedPlayable.java
new file mode 100644
index 00000000..eeb0160a
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedPlayable.java
@@ -0,0 +1,7 @@
+package com.mopub.mobileads;
+
+/**
+ * Extend this class to mediate 3rd party rewarded playables.
+ */
+public abstract class CustomEventRewardedPlayable extends CustomEventRewardedAd {
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
index 9e1c961b..e2b7c484 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
@@ -1,126 +1,49 @@
 package com.mopub.mobileads;
 
-import android.app.Activity;
-import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
-import com.mopub.common.DataKeys;
-import com.mopub.common.LifecycleListener;
-import com.mopub.common.MoPubLifecycleManager;
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-
-import java.util.Map;
-
 /**
- *
+ * Extend this class to mediate 3rd party rewarded videos.
  */
-public abstract class CustomEventRewardedVideo {
+public abstract class CustomEventRewardedVideo extends CustomEventRewardedAd {
 
-    /**
-     * This marker interface is used to indicate that an object is a listener for a 3rd party SDKs
-     * rewarded video system.
-     */
-    @VisibleForTesting
-    protected static interface CustomEventRewardedVideoListener {}
-
-    /**
-     * Called by the {@link MoPubRewardedVideoManager} after loading the custom event.
-     */
-    @Nullable
-    @VisibleForTesting
-    protected abstract CustomEventRewardedVideoListener getVideoListenerForSdk();
+    @Deprecated
+    protected interface CustomEventRewardedVideoListener {
+    }
 
-    /**
-     * Provides a {@link LifecycleListener} if the custom event's ad network wishes to be notified of
-     * activity lifecycle events in the application.
-     *
-     * @return a LifecycleListener. May be null.
-     */
+    @Deprecated
     @Nullable
-    @VisibleForTesting
-    protected abstract LifecycleListener getLifecycleListener();
-
-    /**
-     * Called by the {@link MoPubRewardedVideoManager} after loading the custom event.
-     * This should return the "ad unit id", "zone id" or similar identifier for the network.
-     * May be empty if the network does not have anything more specific than an application ID.
-     *
-     * @return the id string for this ad unit with the ad network.
-     */
-    @NonNull
-    protected abstract String getAdNetworkId();
-
-    /**
-     * Called to when the custom event is no longer used. Implementers should cancel any
-     * pending requests. The initialized SDK may be reused by another CustomEvent instance
-     * and should not be shut down or cleaned up.
-     */
-    protected abstract void onInvalidate();
-
     /**
-     * The MoPub ad loading system calls this after MoPub indicates that this custom event should
-     * be loaded.
-     *
-     * @param launcherActivity the "main activity" of the app. Useful for initializing sdks.
-     * @param localExtras a map containing additional custom data set in app
-     * @param serverExtras a map containing additional custom data configurable on the mopub website
+     * This is no longer used. Implementing this does not do anything.
      */
-    final void loadCustomEvent(@NonNull Activity launcherActivity,
-            @NonNull Map<String, Object> localExtras,
-            @NonNull Map<String, String> serverExtras) {
-        try {
-            if (checkAndInitializeSdk(launcherActivity, localExtras, serverExtras)) {
-                MoPubLifecycleManager.getInstance(launcherActivity).addLifecycleListener(getLifecycleListener());
-            }
-            loadWithSdkInitialized(launcherActivity, localExtras, serverExtras);
-        } catch (Exception e) {
-            MoPubLog.e(e.getMessage());
-        }
+    protected CustomEventRewardedVideoListener getVideoListenerForSdk() {
+        return null;
     }
 
     /**
-     * Sets up the 3rd party ads SDK if it needs configuration. Extenders should use this
-     * to do any static initialization the first time this method is run by any class instance.
-     * From then on, the SDK should be reused without initialization.
-     *
-     * @return true if the SDK performed initialization, false if the SDK was already initialized.
-     */
-    protected abstract boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
-            @NonNull Map<String, Object> localExtras,
-            @NonNull Map<String, String> serverExtras)
-            throws Exception;
-
-    /**
-     * Runs the ad-loading logic for the 3rd party SDK. localExtras & serverExtras should together
-     * contain all the data needed to load an ad.
-     *
-     * Implementers should also use this method (or checkAndInitializeSdk)
-     * to register a listener for their SDK, wrap it in a
-     * {@link com.mopub.mobileads.CustomEventRewardedVideo.CustomEventRewardedVideoListener}
-     *
-     * This method should not call any {@link MoPubRewardedVideoManager} event methods directly
-     * (onAdLoadSuccess, etc). Instead the SDK delegate/listener should call these methods.
-     *
-     * @param activity the "main activity" of the app. Useful for initializing sdks.
-     * @param localExtras a map containing additional custom data set in app
-     * @param serverExtras a map containing additional custom data configurable on the mopub website
-     */
-    protected abstract void loadWithSdkInitialized(@NonNull Activity activity,
-            @NonNull Map<String, Object> localExtras,
-            @NonNull Map<String, String> serverExtras)
-            throws Exception;
-
-    /**
-     * Implementers should query the 3rd party SDK for whether there is a video available for the
-     * 3rd party SDK & ID represented by the custom event.
-     *
-     * @return true iff a video is available to play.
+     * Legacy proxy for {@link CustomEventRewardedAd#isReady}. Implementers should query the 3rd
+     * party SDK for whether there is a video available for the 3rd party SDK & ID represented by
+     * the custom event. This has been deprecated in favor of isReady(), but isReady() will call
+     * hasVideoAvailable() if not overridden.
      */
+    @Deprecated
     protected abstract boolean hasVideoAvailable();
 
     /**
-     * Implementers should now play the rewarded video for this custom event.
+     * Legacy proxy for {@link CustomEventRewardedAd#show}. Implementers should now play the
+     * rewarded video for this custom event. This has been deprecated in favor of show(), but
+     * show() will call showVideo() if not overridden.
      */
+    @Deprecated
     protected abstract void showVideo();
-}
+
+    @Override
+    protected boolean isReady() {
+        return hasVideoAvailable();
+    }
+
+    @Override
+    protected void show() {
+        showVideo();
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
new file mode 100644
index 00000000..f1d9409d
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
@@ -0,0 +1,197 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.DataKeys;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MoPubReward;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+
+import java.util.Map;
+
+import static com.mopub.common.Constants.AD_EXPIRATION_DELAY;
+import static com.mopub.mobileads.MoPubErrorCode.EXPIRED;
+
+/**
+ * Contains the common logic for rewarded ads.
+ */
+public abstract class MoPubRewardedAd extends CustomEventRewardedAd {
+
+    private boolean mIsLoaded;
+    @Nullable private String mRewardedAdCurrencyName;
+    private int mRewardedAdCurrencyAmount;
+
+    @Nullable
+    @Override
+    protected LifecycleListener getLifecycleListener() {
+        // This custom event does not need additional lifecycle listeners.
+        return null;
+    }
+
+    @Override
+    protected boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
+                                            @NonNull final Map<String, Object> localExtras,
+                                            @NonNull final Map<String, String> serverExtras) throws Exception {
+        // No additional initialization is necessary.
+        return false;
+    }
+
+    @Override
+    protected void loadWithSdkInitialized(@NonNull final Activity activity,
+                                          @NonNull final Map<String, Object> localExtras,
+                                          @NonNull final Map<String, String> serverExtras) throws Exception {
+        Preconditions.checkNotNull(activity, "activity cannot be null");
+        Preconditions.checkNotNull(localExtras, "localExtras cannot be null");
+        Preconditions.checkNotNull(serverExtras, "serverExtras cannot be null");
+
+        final Object rewardedAdCurrencyName = localExtras.get(
+                DataKeys.REWARDED_AD_CURRENCY_NAME_KEY);
+        if (rewardedAdCurrencyName instanceof String) {
+            mRewardedAdCurrencyName = (String) rewardedAdCurrencyName;
+        } else {
+            MoPubLog.d("No currency name specified for rewarded video. Using the default name.");
+            mRewardedAdCurrencyName = MoPubReward.NO_REWARD_LABEL;
+        }
+
+        final Object rewardedAdCurrencyAmount = localExtras.get(
+                DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY);
+        if (rewardedAdCurrencyAmount instanceof String) {
+            try {
+                mRewardedAdCurrencyAmount = Integer.parseInt(
+                        (String) rewardedAdCurrencyAmount);
+            } catch (NumberFormatException e) {
+                MoPubLog.d(
+                        "Unable to convert currency amount: " + rewardedAdCurrencyAmount +
+                                ". Using the default reward amount: " +
+                                MoPubReward.DEFAULT_REWARD_AMOUNT);
+                mRewardedAdCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
+            }
+        } else {
+            MoPubLog.d(
+                    "No currency amount specified for rewarded ad. Using the default reward amount: " +
+                            MoPubReward.DEFAULT_REWARD_AMOUNT);
+            mRewardedAdCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
+        }
+
+        if (mRewardedAdCurrencyAmount < 0) {
+            MoPubLog.d(
+                    "Negative currency amount specified for rewarded ad. Using the default reward amount: " +
+                            MoPubReward.DEFAULT_REWARD_AMOUNT);
+            mRewardedAdCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        mIsLoaded = false;
+    }
+
+    @Override
+    protected boolean isReady() {
+        return mIsLoaded;
+    }
+
+    protected class MoPubRewardedAdListener implements CustomEventInterstitial.CustomEventInterstitialListener {
+
+        @NonNull final Class<? extends MoPubRewardedAd>  mCustomEventClass;
+
+        @NonNull private final Runnable mAdExpiration;
+        @NonNull private Handler mHandler;
+
+        public MoPubRewardedAdListener(@NonNull final Class<? extends MoPubRewardedAd>
+                                               customEventClass) {
+            Preconditions.checkNotNull(customEventClass);
+
+            mCustomEventClass = customEventClass;
+
+            mHandler = new Handler();
+            mAdExpiration = new Runnable() {
+                @Override
+                public void run() {
+                    MoPubLog.d("Expiring unused Rewarded ad.");
+                    onInterstitialFailed(EXPIRED);
+                }
+            };
+
+        }
+
+        @Override
+        public void onInterstitialLoaded() {
+            mIsLoaded = true;
+            // Expire MoPub ads to synchronize with MoPub Ad Server tracking window
+            if (AdTypeTranslator.CustomEventType.isMoPubSpecific(mCustomEventClass.getName())) {
+                mHandler.postDelayed(mAdExpiration, AD_EXPIRATION_DELAY);
+            }
+            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(mCustomEventClass,
+                    getAdNetworkId());
+        }
+
+        @Override
+        public void onInterstitialFailed(final MoPubErrorCode errorCode) {
+            mHandler.removeCallbacks(mAdExpiration);
+            switch (errorCode) {
+                case VIDEO_PLAYBACK_ERROR:
+                    MoPubRewardedVideoManager.onRewardedVideoPlaybackError(mCustomEventClass,
+                            getAdNetworkId(), errorCode);
+                    break;
+                default:
+                    MoPubRewardedVideoManager.onRewardedVideoLoadFailure(mCustomEventClass,
+                            getAdNetworkId(), errorCode);
+            }
+        }
+
+        @Override
+        public void onInterstitialShown() {
+            mHandler.removeCallbacks(mAdExpiration);
+            MoPubRewardedVideoManager.onRewardedVideoStarted(mCustomEventClass, getAdNetworkId());
+        }
+
+        @Override
+        public void onInterstitialClicked() {
+            MoPubRewardedVideoManager.onRewardedVideoClicked(mCustomEventClass, getAdNetworkId());
+        }
+
+        @Override
+        public void onLeaveApplication() {
+        }
+
+        @Override
+        public void onInterstitialDismissed() {
+            MoPubRewardedVideoManager.onRewardedVideoClosed(mCustomEventClass, getAdNetworkId());
+        }
+
+        @Deprecated
+        @VisibleForTesting
+        void setHandler(@NonNull final Handler handler) {
+            mHandler = handler;
+        }
+    }
+
+    @Nullable
+    protected String getRewardedAdCurrencyName() {
+        return mRewardedAdCurrencyName;
+    }
+
+    protected int getRewardedAdCurrencyAmount() {
+        return mRewardedAdCurrencyAmount;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    void setIsLoaded(final boolean isLoaded) {
+        mIsLoaded = isLoaded;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    MoPubRewardedAdListener createListener(@NonNull final Class<? extends MoPubRewardedAd>
+                                                   customEventClass) {
+        return new MoPubRewardedAdListener(customEventClass);
+    }
+
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java
new file mode 100644
index 00000000..5962f5b8
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java
@@ -0,0 +1,82 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+
+import com.mopub.common.MoPubReward;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mraid.RewardedMraidInterstitial;
+
+import java.util.Map;
+
+/**
+ * A custom event for showing MoPub rewarded playables.
+ */
+public class MoPubRewardedPlayable extends MoPubRewardedAd {
+
+    @NonNull private static final String MOPUB_REWARDED_PLAYABLE_ID = "mopub_rewarded_playable_id";
+    @NonNull private RewardedMraidInterstitial mRewardedMraidInterstitial;
+
+    public MoPubRewardedPlayable() {
+        mRewardedMraidInterstitial = new RewardedMraidInterstitial();
+    }
+
+    @Override
+    protected void loadWithSdkInitialized(@NonNull final Activity activity,
+                                          @NonNull final Map<String, Object> localExtras,
+                                          @NonNull final Map<String, String> serverExtras) throws Exception {
+        super.loadWithSdkInitialized(activity, localExtras, serverExtras);
+
+        mRewardedMraidInterstitial.loadInterstitial(activity, new MoPubRewardedPlayableListener(),
+                localExtras, serverExtras);
+    }
+
+    @NonNull
+    @Override
+    protected String getAdNetworkId() {
+        return MOPUB_REWARDED_PLAYABLE_ID;
+    }
+
+    @Override
+    protected void onInvalidate() {
+        mRewardedMraidInterstitial.onInvalidate();
+        super.onInvalidate();
+    }
+
+    @Override
+    protected void show() {
+        if (isReady()) {
+            MoPubLog.d("Showing MoPub rewarded playable.");
+            mRewardedMraidInterstitial.showInterstitial();
+        } else {
+            MoPubLog.d("MoPub rewarded playable not loaded. Unable to show playable.");
+        }
+    }
+
+    private class MoPubRewardedPlayableListener extends MoPubRewardedAdListener implements RewardedMraidInterstitial.RewardedMraidInterstitialListener {
+
+        public MoPubRewardedPlayableListener() {
+            super(MoPubRewardedPlayable.class);
+        }
+
+        @Override
+        public void onMraidComplete() {
+            if (getRewardedAdCurrencyName() == null) {
+                MoPubLog.d("No rewarded video was loaded, so no reward is possible");
+            } else {
+                MoPubRewardedVideoManager.onRewardedVideoCompleted(mCustomEventClass,
+                        getAdNetworkId(),
+                        MoPubReward.success(getRewardedAdCurrencyName(),
+                                getRewardedAdCurrencyAmount()));
+            }
+        }
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    void setRewardedMraidInterstitial(
+            @NonNull final RewardedMraidInterstitial rewardedMraidInterstitial) {
+        mRewardedMraidInterstitial = rewardedMraidInterstitial;
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
index 9715fdb0..bb279838 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
@@ -2,12 +2,8 @@
 
 import android.app.Activity;
 import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 
-import com.mopub.common.DataKeys;
-import com.mopub.common.LifecycleListener;
 import com.mopub.common.MoPubReward;
-import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 
@@ -16,34 +12,17 @@
 /**
  * A custom event for showing MoPub rewarded videos.
  */
-public class MoPubRewardedVideo extends CustomEventRewardedVideo {
+public class MoPubRewardedVideo extends MoPubRewardedAd {
 
     @NonNull private static final String MOPUB_REWARDED_VIDEO_ID = "mopub_rewarded_video_id";
 
     @NonNull private RewardedVastVideoInterstitial mRewardedVastVideoInterstitial;
-    @Nullable private String mRewardedVideoCurrencyName;
-    private int mRewardedVideoCurrencyAmount;
-    private boolean mIsLoaded;
+
 
     public MoPubRewardedVideo() {
         mRewardedVastVideoInterstitial = new RewardedVastVideoInterstitial();
     }
 
-    @Nullable
-    @Override
-    protected CustomEventRewardedVideoListener getVideoListenerForSdk() {
-        // Since MoPub is the SDK, there is no reason to get the SDK video listener
-        // since we have direct access.
-        return null;
-    }
-
-    @Nullable
-    @Override
-    protected LifecycleListener getLifecycleListener() {
-        // RewardedVastVideoInterstitial will handle all lifecycle events.
-        return null;
-    }
-
     @NonNull
     @Override
     protected String getAdNetworkId() {
@@ -53,73 +32,22 @@ protected String getAdNetworkId() {
     @Override
     protected void onInvalidate() {
         mRewardedVastVideoInterstitial.onInvalidate();
-        mIsLoaded = false;
-    }
-
-    @Override
-    protected boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
-            @NonNull final Map<String, Object> localExtras,
-            @NonNull final Map<String, String> serverExtras) throws Exception {
-        // No additional initialization is necessary.
-        return false;
+        super.onInvalidate();
     }
 
     @Override
     protected void loadWithSdkInitialized(@NonNull final Activity activity,
-            @NonNull final Map<String, Object> localExtras,
-            @NonNull final Map<String, String> serverExtras) throws Exception {
-        Preconditions.checkNotNull(activity, "activity cannot be null");
-        Preconditions.checkNotNull(localExtras, "localExtras cannot be null");
-        Preconditions.checkNotNull(serverExtras, "serverExtras cannot be null");
-
-        final Object rewardedVideoCurrencyName = localExtras.get(
-                DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY);
-        if (rewardedVideoCurrencyName instanceof String) {
-            mRewardedVideoCurrencyName = (String) rewardedVideoCurrencyName;
-        } else {
-            MoPubLog.d("No currency name specified for rewarded video. Using the default name.");
-            mRewardedVideoCurrencyName = MoPubReward.NO_REWARD_LABEL;
-        }
-
-        final Object rewardedVideoCurrencyAmount = localExtras.get(
-                DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY);
-        if (rewardedVideoCurrencyAmount instanceof String) {
-            try {
-                mRewardedVideoCurrencyAmount = Integer.parseInt(
-                        (String) rewardedVideoCurrencyAmount);
-            } catch (NumberFormatException e) {
-                MoPubLog.d(
-                        "Unable to convert currency amount: " + rewardedVideoCurrencyAmount +
-                                ". Using the default reward amount: " +
-                                MoPubReward.DEFAULT_REWARD_AMOUNT);
-                mRewardedVideoCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
-            }
-        } else {
-            MoPubLog.d(
-                    "No currency amount specified for rewarded video. Using the default reward amount: " +
-                            MoPubReward.DEFAULT_REWARD_AMOUNT);
-            mRewardedVideoCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
-        }
-
-        if (mRewardedVideoCurrencyAmount < 0) {
-            MoPubLog.d(
-                    "Negative currency amount specified for rewarded video. Using the default reward amount: " +
-                            MoPubReward.DEFAULT_REWARD_AMOUNT);
-            mRewardedVideoCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
-        }
+                                          @NonNull final Map<String, Object> localExtras,
+                                          @NonNull final Map<String, String> serverExtras) throws Exception {
+        super.loadWithSdkInitialized(activity, localExtras, serverExtras);
 
         mRewardedVastVideoInterstitial.loadInterstitial(activity, new MoPubRewardedVideoListener(),
                 localExtras, serverExtras);
     }
 
     @Override
-    protected boolean hasVideoAvailable() {
-        return mIsLoaded;
-    }
-
-    @Override
-    protected void showVideo() {
-        if (hasVideoAvailable()) {
+    protected void show() {
+        if (isReady()) {
             MoPubLog.d("Showing MoPub rewarded video.");
             mRewardedVastVideoInterstitial.showInterstitial();
         } else {
@@ -127,58 +55,22 @@ protected void showVideo() {
         }
     }
 
-    private class MoPubRewardedVideoListener implements CustomEventInterstitial.CustomEventInterstitialListener, RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener {
-        @Override
-        public void onInterstitialLoaded() {
-            mIsLoaded = true;
-            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(MoPubRewardedVideo.class,
-                    MOPUB_REWARDED_VIDEO_ID);
-        }
-
-        @Override
-        public void onInterstitialFailed(final MoPubErrorCode errorCode) {
-            switch (errorCode) {
-                case VIDEO_PLAYBACK_ERROR:
-                    MoPubRewardedVideoManager.onRewardedVideoPlaybackError(MoPubRewardedVideo.class,
-                            MOPUB_REWARDED_VIDEO_ID, errorCode);
-                    break;
-                default:
-                    MoPubRewardedVideoManager.onRewardedVideoLoadFailure(MoPubRewardedVideo.class,
-                            MOPUB_REWARDED_VIDEO_ID, errorCode);
-            }
-        }
-
-        @Override
-        public void onInterstitialShown() {
-            MoPubRewardedVideoManager.onRewardedVideoStarted(MoPubRewardedVideo.class,
-                    MOPUB_REWARDED_VIDEO_ID);
-        }
+    private class MoPubRewardedVideoListener extends MoPubRewardedAdListener implements RewardedVastVideoInterstitial.RewardedVideoInterstitialListener {
 
-        @Override
-        public void onInterstitialClicked() {
-            MoPubRewardedVideoManager.onRewardedVideoClicked(MoPubRewardedVideo.class,
-                    MOPUB_REWARDED_VIDEO_ID);
-        }
-
-        @Override
-        public void onLeaveApplication() {
+        public MoPubRewardedVideoListener() {
+            super(MoPubRewardedVideo.class);
         }
 
-        @Override
-        public void onInterstitialDismissed() {
-            MoPubRewardedVideoManager.onRewardedVideoClosed(MoPubRewardedVideo.class,
-                    MOPUB_REWARDED_VIDEO_ID);
-        }
 
         @Override
         public void onVideoComplete() {
-            if (mRewardedVideoCurrencyName == null) {
+            if (getRewardedAdCurrencyName() == null) {
                 MoPubLog.d("No rewarded video was loaded, so no reward is possible");
             } else {
-                MoPubRewardedVideoManager.onRewardedVideoCompleted(MoPubRewardedVideo.class,
-                        MOPUB_REWARDED_VIDEO_ID,
-                        MoPubReward.success(mRewardedVideoCurrencyName,
-                                mRewardedVideoCurrencyAmount));
+                MoPubRewardedVideoManager.onRewardedVideoCompleted(mCustomEventClass,
+                        getAdNetworkId(),
+                        MoPubReward.success(getRewardedAdCurrencyName(),
+                                getRewardedAdCurrencyAmount()));
             }
         }
     }
@@ -189,23 +81,4 @@ void setRewardedVastVideoInterstitial(
             @NonNull final RewardedVastVideoInterstitial rewardedVastVideoInterstitial) {
         mRewardedVastVideoInterstitial = rewardedVastVideoInterstitial;
     }
-
-    @Deprecated
-    @VisibleForTesting
-    @Nullable
-    String getRewardedVideoCurrencyName() {
-        return mRewardedVideoCurrencyName;
-    }
-
-    @Deprecated
-    @VisibleForTesting
-    int getRewardedVideoCurrencyAmount() {
-        return mRewardedVideoCurrencyAmount;
-    }
-
-    @Deprecated
-    @VisibleForTesting
-    void setIsLoaded(final boolean isLoaded) {
-        mIsLoaded = isLoaded;
-    }
-}
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java
index ff9361f1..ac91bfa8 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java
@@ -34,6 +34,11 @@
      */
     public void onRewardedVideoPlaybackError(@NonNull String adUnitId, @NonNull MoPubErrorCode errorCode);
 
+    /**
+     * Called when a rewarded video is clicked.
+     */
+    public void onRewardedVideoClicked(@NonNull String adUnitId);
+
     /**
      * Called when a rewarded video is closed. At this point your application should resume.
      */
@@ -43,4 +48,4 @@
      * Called when a rewarded video is completed and the user should be rewarded.
      */
     public void onRewardedVideoCompleted(@NonNull Set<String> adUnitIds, @NonNull MoPubReward reward);
-}
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
index 80c50c7b..43858f4e 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
@@ -20,6 +20,7 @@
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Json;
 import com.mopub.common.util.MoPubCollections;
 import com.mopub.common.util.Reflection;
 import com.mopub.common.util.ReflectionTarget;
@@ -32,7 +33,10 @@
 import com.mopub.volley.RequestQueue;
 import com.mopub.volley.VolleyError;
 
+import org.json.JSONException;
+
 import java.lang.ref.WeakReference;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Locale;
@@ -40,13 +44,18 @@
 import java.util.Set;
 import java.util.TreeMap;
 
+import static com.mopub.mobileads.MoPubErrorCode.EXPIRED;
+
 /**
- * Handles requesting Rewarded Video ads and mapping Rewarded Video SDK settings to the CustomEvent
+ * Handles requesting Rewarded ads and mapping Rewarded Ad SDK settings to the CustomEvent
  * that is being loaded.
  */
 public class MoPubRewardedVideoManager {
     private static MoPubRewardedVideoManager sInstance;
     private static final int DEFAULT_LOAD_TIMEOUT = Constants.THIRTY_SECONDS_MILLIS;
+    private static final String CURRENCIES_JSON_REWARDS_MAP_KEY = "rewards";
+    private static final String CURRENCIES_JSON_REWARD_NAME_KEY = "name";
+    private static final String CURRENCIES_JSON_REWARD_AMOUNT_KEY = "amount";
 
     /**
      * This must an integer because the backend only supports int types for api version.
@@ -57,7 +66,7 @@
     @NonNull private WeakReference<Activity> mMainActivity;
     @NonNull private final Context mContext;
     @NonNull private final AdRequestStatusMapping mAdRequestStatus;
-    @NonNull private final RewardedVideoData mRewardedVideoData;
+    @NonNull private final RewardedAdData mRewardedAdData;
     @Nullable private MoPubRewardedVideoListener mVideoListener;
 
     @NonNull private final Set<MediationSettings> mGlobalMediationSettings;
@@ -96,12 +105,12 @@ public RequestParameters(@Nullable final String keywords) {
         }
 
         public RequestParameters(@Nullable final String keywords,
-                @Nullable final Location location) {
+                                 @Nullable final Location location) {
             this(keywords, location, null);
         }
 
         public RequestParameters(@Nullable final String keywords, @Nullable final Location location,
-                @Nullable final String customerId) {
+                                 @Nullable final String customerId) {
             mKeywords = keywords;
             mLocation = location;
             mCustomerId = customerId;
@@ -112,7 +121,7 @@ public RequestParameters(@Nullable final String keywords, @Nullable final Locati
     private MoPubRewardedVideoManager(@NonNull Activity mainActivity, MediationSettings... mediationSettings) {
         mMainActivity = new WeakReference<Activity>(mainActivity);
         mContext = mainActivity.getApplicationContext();
-        mRewardedVideoData = new RewardedVideoData();
+        mRewardedAdData = new RewardedAdData();
         mCallbackHandler = new Handler(Looper.getMainLooper());
         mGlobalMediationSettings = new HashSet<MediationSettings>();
         MoPubCollections.addAllNonNull(mGlobalMediationSettings, mediationSettings);
@@ -222,24 +231,26 @@ public static void setVideoListener(@Nullable MoPubRewardedVideoListener listene
      *                          above adUnitId.
      */
     public static void loadVideo(@NonNull final String adUnitId,
-            @Nullable final RequestParameters requestParameters,
-            @Nullable final MediationSettings... mediationSettings) {
+                                 @Nullable final RequestParameters requestParameters,
+                                 @Nullable final MediationSettings... mediationSettings) {
+        Preconditions.checkNotNull(adUnitId);
+
         if (sInstance == null) {
             logErrorNotInitialized();
             return;
         }
 
         final String currentlyShowingAdUnitId =
-                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
-        if (!TextUtils.isEmpty(currentlyShowingAdUnitId)) {
-            MoPubLog.d(String.format(Locale.US, "Did not queue rewarded video request for ad " +
-                    "unit %s. The video is already showing.", adUnitId));
+                sInstance.mRewardedAdData.getCurrentlyShowingAdUnitId();
+        if (adUnitId.equals(currentlyShowingAdUnitId)) {
+            MoPubLog.d(String.format(Locale.US, "Did not queue rewarded ad request for ad " +
+                    "unit %s. The ad is already showing.", adUnitId));
             return;
         }
 
         if (sInstance.mAdRequestStatus.canPlay(adUnitId)) {
-            MoPubLog.d(String.format(Locale.US, "Did not queue rewarded video request for ad " +
-            "unit %s. This ad unit already finished loading and is ready to show.", adUnitId));
+            MoPubLog.d(String.format(Locale.US, "Did not queue rewarded ad request for ad " +
+                    "unit %s. This ad unit already finished loading and is ready to show.", adUnitId));
             postToInstance(new Runnable() {
                 @Override
                 public void run() {
@@ -261,7 +272,7 @@ public void run() {
 
         final String customerId = requestParameters == null ? null : requestParameters.mCustomerId;
         if (!TextUtils.isEmpty(customerId)) {
-            sInstance.mRewardedVideoData.setCustomerId(customerId);
+            sInstance.mRewardedAdData.setCustomerId(customerId);
         }
 
         final AdUrlGenerator urlGenerator = new WebViewAdUrlGenerator(sInstance.mContext, false);
@@ -280,7 +291,7 @@ private static void loadVideo(@NonNull String adUnitId, @NonNull String adUrlStr
         }
 
         if (sInstance.mAdRequestStatus.isLoading(adUnitId)) {
-            MoPubLog.d(String.format(Locale.US, "Did not queue rewarded video request for ad " +
+            MoPubLog.d(String.format(Locale.US, "Did not queue rewarded ad request for ad " +
                     "unit %s. A request is already pending.", adUnitId));
             return;
         }
@@ -296,11 +307,13 @@ private static void loadVideo(@NonNull String adUnitId, @NonNull String adUrlStr
         final RequestQueue requestQueue = Networking.getRequestQueue(sInstance.mContext);
         requestQueue.add(request);
         sInstance.mAdRequestStatus.markLoading(adUnitId);
+        MoPubLog.d(String.format(Locale.US,
+                "Loading rewarded ad request for ad unit %s with URL %s", adUnitId, adUrlString));
     }
 
     public static boolean hasVideo(@NonNull String adUnitId) {
         if (sInstance != null) {
-            final CustomEventRewardedVideo customEvent = sInstance.mRewardedVideoData.getCustomEvent(adUnitId);
+            final CustomEventRewardedAd customEvent = sInstance.mRewardedAdData.getCustomEvent(adUnitId);
             return isPlayable(adUnitId, customEvent);
         } else {
             logErrorNotInitialized();
@@ -310,15 +323,28 @@ public static boolean hasVideo(@NonNull String adUnitId) {
 
     public static void showVideo(@NonNull String adUnitId) {
         if (sInstance != null) {
-            final CustomEventRewardedVideo customEvent = sInstance.mRewardedVideoData.getCustomEvent(adUnitId);
+            final CustomEventRewardedAd customEvent = sInstance.mRewardedAdData.getCustomEvent(adUnitId);
             if (isPlayable(adUnitId, customEvent)) {
-                sInstance.mRewardedVideoData.updateCustomEventLastShownRewardMapping(
+                // If there are rewards available but no reward is selected, fail over.
+                if (!sInstance.mRewardedAdData.getAvailableRewards(adUnitId).isEmpty()
+                        && sInstance.mRewardedAdData.getMoPubReward(adUnitId) == null) {
+                    sInstance.failover(adUnitId, MoPubErrorCode.REWARD_NOT_SELECTED);
+                    return;
+                }
+
+                sInstance.mRewardedAdData.updateCustomEventLastShownRewardMapping(
                         customEvent.getClass(),
-                        sInstance.mRewardedVideoData.getMoPubReward(adUnitId));
-                sInstance.mRewardedVideoData.setCurrentlyShowingAdUnitId(adUnitId);
+                        sInstance.mRewardedAdData.getMoPubReward(adUnitId));
+                sInstance.mRewardedAdData.setCurrentlyShowingAdUnitId(adUnitId);
                 sInstance.mAdRequestStatus.markPlayed(adUnitId);
-                customEvent.showVideo();
+                customEvent.show();
             } else {
+                if (sInstance.mAdRequestStatus.isLoading(adUnitId)) {
+                    MoPubLog.d("Rewarded ad is not ready to be shown yet.");
+                } else {
+                    MoPubLog.d("No rewarded ad loading or loaded.");
+                }
+
                 sInstance.failover(adUnitId, MoPubErrorCode.VIDEO_NOT_AVAILABLE);
             }
         } else {
@@ -326,11 +352,41 @@ public static void showVideo(@NonNull String adUnitId) {
         }
     }
 
-    private static boolean isPlayable(String adUnitId, @Nullable CustomEventRewardedVideo customEvent) {
+    private static boolean isPlayable(String adUnitId, @Nullable CustomEventRewardedAd customEvent) {
         return (sInstance != null
                 && sInstance.mAdRequestStatus.canPlay(adUnitId)
                 && customEvent != null
-                && customEvent.hasVideoAvailable());
+                && customEvent.isReady());
+    }
+
+    /**
+     * Retrieves the set of available {@link MoPubReward} instance(s) for this AdUnit.
+     * @param adUnitId MoPub adUnitId String
+     * @return a set of {@link MoPubReward} instance(s) if available, else an empty set.
+     */
+    @NonNull
+    public static Set<MoPubReward> getAvailableRewards(@NonNull String adUnitId) {
+        if (sInstance != null) {
+            return sInstance.mRewardedAdData.getAvailableRewards(adUnitId);
+        } else {
+            logErrorNotInitialized();
+            return Collections.<MoPubReward>emptySet();
+        }
+    }
+
+    /**
+     * Selects the reward for this AdUnit from available {@link MoPubReward} instances.
+     * If this AdUnit does not have any rewards, or if the selected reward is not available
+     * for this AdUnit, then no reward will be selected for this AdUnit.
+     * @param adUnitId MoPub adUnitId String
+     * @param selectedReward selected {@link MoPubReward}
+     */
+    public static void selectReward(@NonNull String adUnitId, @NonNull MoPubReward selectedReward) {
+        if (sInstance != null) {
+            sInstance.mRewardedAdData.selectReward(adUnitId, selectedReward);
+        } else {
+            logErrorNotInitialized();
+        }
     }
 
     ///// Ad Request / Response methods /////
@@ -353,9 +409,9 @@ private void onAdSuccess(AdResponse adResponse, String adUnitId) {
             return;
         }
 
-        // We only allow one rewarded video to be loaded at a time for each ad unit. This should
-        // clear out the old rewarded video if there already was one loaded and not played.
-        final CustomEventRewardedVideo oldRewardedVideo = mRewardedVideoData.getCustomEvent(
+        // We only allow one rewarded ad to be loaded at a time for each ad unit. This should
+        // clear out the old rewarded ad if there already was one loaded and not played.
+        final CustomEventRewardedAd oldRewardedVideo = mRewardedAdData.getCustomEvent(
                 adUnitId);
         if (oldRewardedVideo != null) {
             oldRewardedVideo.onInvalidate();
@@ -363,34 +419,58 @@ private void onAdSuccess(AdResponse adResponse, String adUnitId) {
 
         try {
             // Instantiate a custom event
-            final CustomEventRewardedVideo customEvent =
+            final CustomEventRewardedAd customEvent =
                     Reflection.instantiateClassWithEmptyConstructor(
                             customEventClassName,
-                            CustomEventRewardedVideo.class);
+                            CustomEventRewardedAd.class);
 
             // Put important data into localExtras...
             final Map<String, Object> localExtras = new TreeMap<String, Object>();
             localExtras.put(DataKeys.AD_UNIT_ID_KEY, adUnitId);
-            localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY,
+            localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY,
                     adResponse.getRewardedVideoCurrencyName());
-            localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY,
+            localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY,
                     adResponse.getRewardedVideoCurrencyAmount());
+            localExtras.put(DataKeys.REWARDED_AD_DURATION_KEY,
+                    adResponse.getRewardedDuration());
+            localExtras.put(DataKeys.SHOULD_REWARD_ON_CLICK_KEY,
+                    adResponse.shouldRewardOnClick());
             localExtras.put(DataKeys.AD_REPORT_KEY,
                     new AdReport(adUnitId, ClientMetadata.getInstance(mContext), adResponse));
             localExtras.put(DataKeys.BROADCAST_IDENTIFIER_KEY, Utils.generateUniqueId());
 
-            localExtras.put(DataKeys.REWARDED_VIDEO_CUSTOMER_ID,
-                    mRewardedVideoData.getCustomerId());
-            mRewardedVideoData.updateAdUnitRewardMapping(adUnitId,
-                    adResponse.getRewardedVideoCurrencyName(),
-                    adResponse.getRewardedVideoCurrencyAmount());
-            mRewardedVideoData.updateAdUnitToServerCompletionUrlMapping(adUnitId,
+            localExtras.put(DataKeys.REWARDED_AD_CUSTOMER_ID_KEY,
+                    mRewardedAdData.getCustomerId());
+
+            // Check for new multi-currency header X-Rewarded-Currencies.
+            final String rewardedCurrencies = adResponse.getRewardedCurrencies();
+
+            // Clear any available rewards for this AdUnit.
+            mRewardedAdData.resetAvailableRewards(adUnitId);
+
+            // If the new multi-currency header doesn't exist, fallback to parsing legacy headers
+            // X-Rewarded-Video-Currency-Name and X-Rewarded-Video-Currency-Amount.
+            if (TextUtils.isEmpty(rewardedCurrencies)) {
+                mRewardedAdData.updateAdUnitRewardMapping(adUnitId,
+                        adResponse.getRewardedVideoCurrencyName(),
+                        adResponse.getRewardedVideoCurrencyAmount());
+            } else {
+                try {
+                    parseMultiCurrencyJson(adUnitId, rewardedCurrencies);
+                } catch (Exception e) {
+                    MoPubLog.e("Error parsing rewarded currencies JSON header: " + rewardedCurrencies);
+                    failover(adUnitId, MoPubErrorCode.REWARDED_CURRENCIES_PARSING_ERROR);
+                    return;
+                }
+            }
+
+            mRewardedAdData.updateAdUnitToServerCompletionUrlMapping(adUnitId,
                     adResponse.getRewardedVideoCompletionUrl());
 
             Activity mainActivity = mMainActivity.get();
             if (mainActivity == null) {
                 MoPubLog.d("Could not load custom event because Activity reference was null. Call" +
-                        " MoPub#updateActivity before requesting more rewarded videos.");
+                        " MoPub#updateActivity before requesting more rewarded ads.");
 
                 // Don't go through the ordinary failover process since we have
                 // no activity for the failover to use.
@@ -402,7 +482,7 @@ private void onAdSuccess(AdResponse adResponse, String adUnitId) {
             Runnable timeout = new Runnable() {
                 @Override
                 public void run() {
-                    MoPubLog.d("Custom Event failed to load rewarded video in a timely fashion.");
+                    MoPubLog.d("Custom Event failed to load rewarded ad in a timely fashion.");
                     onRewardedVideoLoadFailure(customEvent.getClass(), customEvent.getAdNetworkId(),
                             MoPubErrorCode.NETWORK_TIMEOUT);
                     customEvent.onInvalidate();
@@ -412,12 +492,12 @@ public void run() {
             mTimeoutMap.put(adUnitId, timeout);
 
             // Load custom event
+            MoPubLog.d(String.format(Locale.US,
+                    "Loading custom event with class name %s", customEventClassName));
             customEvent.loadCustomEvent(mainActivity, localExtras, adResponse.getServerExtras());
 
-            final CustomEventRewardedVideo.CustomEventRewardedVideoListener listener =
-                    customEvent.getVideoListenerForSdk();
             final String adNetworkId = customEvent.getAdNetworkId();
-            mRewardedVideoData.updateAdUnitCustomEventMapping(adUnitId, customEvent, listener, adNetworkId);
+            mRewardedAdData.updateAdUnitCustomEventMapping(adUnitId, customEvent, adNetworkId);
         } catch (Exception e) {
             MoPubLog.e(String.format(Locale.US, "Couldn't create custom event with class name %s", customEventClassName));
             failover(adUnitId, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
@@ -445,14 +525,53 @@ private void onAdError(@NonNull VolleyError volleyError, @NonNull String adUnitI
         failover(adUnitId, errorCode);
     }
 
+    private void parseMultiCurrencyJson(@NonNull String adUnitId,
+                                        @NonNull String rewardedCurrencies) throws JSONException {
+        /* Parse multi-currency JSON string, an example below:
+            {
+                "rewards": [
+                    { "name": "Coins", "amount": 8 },
+                    { "name": "Diamonds", "amount": 1 },
+                    { "name": "Diamonds", "amount": 10 },
+                    { "name": "Energy", "amount": 20 }
+                ]
+            }
+         */
+
+        final Map<String, String> rewardsMap = Json.jsonStringToMap(rewardedCurrencies);
+        final String[] rewardsArray =
+                Json.jsonArrayToStringArray(rewardsMap.get(CURRENCIES_JSON_REWARDS_MAP_KEY));
+
+        // If there's only one reward, update adunit-to-reward mapping now
+        if (rewardsArray.length == 1) {
+            Map<String, String> rewardData = Json.jsonStringToMap(rewardsArray[0]);
+            mRewardedAdData.updateAdUnitRewardMapping(
+                    adUnitId,
+                    rewardData.get(CURRENCIES_JSON_REWARD_NAME_KEY),
+                    rewardData.get(CURRENCIES_JSON_REWARD_AMOUNT_KEY));
+        }
+
+        // Loop through awards array and create a set of available reward(s) for this adunit
+        for (String rewardDataStr : rewardsArray) {
+            Map<String, String> rewardData = Json.jsonStringToMap(rewardDataStr);
+            mRewardedAdData.addAvailableReward(
+                    adUnitId,
+                    rewardData.get(CURRENCIES_JSON_REWARD_NAME_KEY),
+                    rewardData.get(CURRENCIES_JSON_REWARD_AMOUNT_KEY));
+        }
+    }
+
     private void failover(@NonNull final String adUnitId, @NonNull final MoPubErrorCode errorCode) {
+        Preconditions.checkNotNull(adUnitId);
+        Preconditions.checkNotNull(errorCode);
+
         final String failoverUrl = mAdRequestStatus.getFailoverUrl(adUnitId);
         mAdRequestStatus.markFail(adUnitId);
 
-        if (failoverUrl != null) {
+        if (failoverUrl != null && !errorCode.equals(EXPIRED)) {
             loadVideo(adUnitId, failoverUrl);
-        } else if (mVideoListener != null) {
-            mVideoListener.onRewardedVideoLoadFailure(adUnitId, errorCode);
+        } else if (sInstance.mVideoListener != null) {
+            sInstance.mVideoListener.onRewardedVideoLoadFailure(adUnitId, errorCode);
         }
     }
 
@@ -466,15 +585,15 @@ private void cancelTimeouts(@NonNull String moPubId) {
     //////// Listener methods that should be called by third-party SDKs. //////////
 
     /**
-     * Notify the manager that a rewarded video loaded successfully.
+     * Notify the manager that a rewarded ad loaded successfully.
      *
      * @param customEventClass - the Class of the third-party custom event object.
      * @param thirdPartyId - the ad id of the third party SDK. This may be an empty String if the
      *                     SDK does not use ad ids, zone ids, or a analogous concept.
-     * @param <T> - a class that extends {@link CustomEventRewardedVideo}. Only rewarded video
+     * @param <T> - a class that extends {@link CustomEventRewardedAd}. Only rewarded ad
      *           custom events should use these methods.
      */
-    public static <T extends CustomEventRewardedVideo>
+    public static <T extends CustomEventRewardedAd>
     void onRewardedVideoLoadSuccess(@NonNull final Class<T> customEventClass, @NonNull final String thirdPartyId) {
         postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
             @Override
@@ -487,21 +606,21 @@ protected void forEach(@NonNull final String moPubId) {
         });
     }
 
-    public static <T extends CustomEventRewardedVideo>
+    public static <T extends CustomEventRewardedAd>
     void onRewardedVideoLoadFailure(@NonNull final Class<T> customEventClass, final String thirdPartyId, final MoPubErrorCode errorCode) {
         postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
             @Override
             protected void forEach(@NonNull final String moPubId) {
-                   sInstance.cancelTimeouts(moPubId);
-                   sInstance.failover(moPubId, errorCode);
+                sInstance.cancelTimeouts(moPubId);
+                sInstance.failover(moPubId, errorCode);
             }
         });
     }
 
-    public static <T extends CustomEventRewardedVideo>
+    public static <T extends CustomEventRewardedAd>
     void onRewardedVideoStarted(@NonNull final Class<T> customEventClass, final String thirdPartyId) {
         final String currentlyShowingAdUnitId =
-                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
+                sInstance.mRewardedAdData.getCurrentlyShowingAdUnitId();
         if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
             postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
                 @Override
@@ -530,10 +649,10 @@ private static void onRewardedVideoStartedAction(@NonNull final String adUnitId)
         sInstance.mAdRequestStatus.clearImpressionUrl(adUnitId);
     }
 
-    public static <T extends CustomEventRewardedVideo>
+    public static <T extends CustomEventRewardedAd>
     void onRewardedVideoPlaybackError(@NonNull final Class<T> customEventClass, final String thirdPartyId, final MoPubErrorCode errorCode) {
         final String currentlyShowingAdUnitId =
-                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
+                sInstance.mRewardedAdData.getCurrentlyShowingAdUnitId();
         if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
             postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
                 @Override
@@ -559,10 +678,10 @@ private static void onRewardedVideoPlaybackErrorAction(@NonNull final String adU
         }
     }
 
-    public static <T extends CustomEventRewardedVideo>
+    public static <T extends CustomEventRewardedAd>
     void onRewardedVideoClicked(@NonNull final Class<T> customEventClass, final String thirdPartyId) {
         final String currentlyShowingAdUnitId =
-                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
+                sInstance.mRewardedAdData.getCurrentlyShowingAdUnitId();
         if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
             postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
                 @Override
@@ -582,16 +701,21 @@ public void run() {
 
     private static void onRewardedVideoClickedAction(@NonNull final String adUnitId) {
         Preconditions.checkNotNull(adUnitId);
+
+        if (sInstance.mVideoListener != null) {
+            sInstance.mVideoListener.onRewardedVideoClicked(adUnitId);
+        }
+
         TrackingRequest.makeTrackingHttpRequest(
                 sInstance.mAdRequestStatus.getClickTrackerUrlString(adUnitId),
                 sInstance.mContext);
         sInstance.mAdRequestStatus.clearClickUrl(adUnitId);
     }
 
-    public static <T extends CustomEventRewardedVideo>
+    public static <T extends CustomEventRewardedAd>
     void onRewardedVideoClosed(@NonNull final Class<T> customEventClass, final String thirdPartyId) {
         final String currentlyShowingAdUnitId =
-                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
+                sInstance.mRewardedAdData.getCurrentlyShowingAdUnitId();
         if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
             postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
                 @Override
@@ -607,7 +731,7 @@ public void run() {
                 }
             });
         }
-        sInstance.mRewardedVideoData.setCurrentlyShowingAdUnitId(null);
+        sInstance.mRewardedAdData.setCurrentlyShowingAdUnitId(null);
     }
 
     private static void onRewardedVideoClosedAction(@NonNull final String adUnitId) {
@@ -617,51 +741,75 @@ private static void onRewardedVideoClosedAction(@NonNull final String adUnitId)
         }
     }
 
-    public static <T extends CustomEventRewardedVideo>
-    void onRewardedVideoCompleted(@NonNull final Class<T> customEventClass, final String thirdPartyId, @NonNull final MoPubReward moPubReward) {
-        // Unlike other callbacks in this class, only call the listener once with all the MoPubIds in the matching set.
+    public static <T extends CustomEventRewardedAd>
+    void onRewardedVideoCompleted(@NonNull final Class<T> customEventClass,
+                                  final String thirdPartyId, @NonNull final MoPubReward moPubReward) {
+        // Unlike other callbacks in this class, only call the listener once with all the MoPubIds
+        // in the matching set.
         final String currentlyShowingAdUnitId =
-                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
-        final String serverCompletionUrl = sInstance.mRewardedVideoData.getServerCompletionUrl(
+                sInstance.mRewardedAdData.getCurrentlyShowingAdUnitId();
+
+        rewardOnClient(customEventClass, thirdPartyId, moPubReward, currentlyShowingAdUnitId);
+        rewardOnServer(currentlyShowingAdUnitId);
+    }
+
+    private static void rewardOnServer(final String currentlyShowingAdUnitId) {
+        final String serverCompletionUrl = sInstance.mRewardedAdData.getServerCompletionUrl(
                 currentlyShowingAdUnitId);
-        if (TextUtils.isEmpty(serverCompletionUrl)) {
+        if (!TextUtils.isEmpty(serverCompletionUrl)) {
             postToInstance(new Runnable() {
                 @Override
                 public void run() {
-                    final MoPubReward chosenReward = chooseReward(
-                            sInstance.mRewardedVideoData.getLastShownMoPubReward(customEventClass),
-                            moPubReward);
-
-                    Set<String> rewardedIds = new HashSet<String>();
-                    if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
-                        final Set<String> moPubIds = sInstance.mRewardedVideoData.getMoPubIdsForAdNetwork(
-                                customEventClass, thirdPartyId);
-                        rewardedIds.addAll(moPubIds);
-                    } else {
-                        // If we know which ad unit is showing, only reward the currently showing
-                        // ad unit.
-                        rewardedIds.add(currentlyShowingAdUnitId);
-                    }
+                    final MoPubReward reward
+                            = sInstance.mRewardedAdData.getMoPubReward(currentlyShowingAdUnitId);
+
+                    final String rewardName = (reward == null)
+                            ? MoPubReward.NO_REWARD_LABEL
+                            : reward.getLabel();
+                    final String rewardAmount = (reward == null)
+                            ? Integer.toString(MoPubReward.DEFAULT_REWARD_AMOUNT)
+                            : Integer.toString(reward.getAmount());
 
-                    if (sInstance.mVideoListener != null) {
-                        sInstance.mVideoListener.onRewardedVideoCompleted(rewardedIds,
-                                chosenReward);
-                    }
-                }
-            });
-        } else {
-            postToInstance(new Runnable() {
-                @Override
-                public void run() {
                     RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(
                             sInstance.mContext,
                             serverCompletionUrl,
-                            sInstance.mRewardedVideoData.getCustomerId());
+                            sInstance.mRewardedAdData.getCustomerId(),
+                            rewardName,
+                            rewardAmount);
                 }
             });
         }
     }
 
+    private static <T extends CustomEventRewardedAd> void rewardOnClient(
+            @NonNull final Class<T> customEventClass, final String thirdPartyId,
+            @NonNull final MoPubReward moPubReward, final String currentlyShowingAdUnitId) {
+        postToInstance(new Runnable() {
+            @Override
+            public void run() {
+                final MoPubReward chosenReward = chooseReward(
+                        sInstance.mRewardedAdData.getLastShownMoPubReward(customEventClass),
+                        moPubReward);
+
+                Set<String> rewardedIds = new HashSet<String>();
+                if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
+                    final Set<String> moPubIds = sInstance.mRewardedAdData.getMoPubIdsForAdNetwork(
+                            customEventClass, thirdPartyId);
+                    rewardedIds.addAll(moPubIds);
+                } else {
+                    // If we know which ad unit is showing, only reward the currently showing
+                    // ad unit.
+                    rewardedIds.add(currentlyShowingAdUnitId);
+                }
+
+                if (sInstance.mVideoListener != null) {
+                    sInstance.mVideoListener.onRewardedVideoCompleted(rewardedIds,
+                            chosenReward);
+                }
+            }
+        });
+    }
+
     @VisibleForTesting
     static MoPubReward chooseReward(@Nullable final MoPubReward moPubReward, @NonNull final MoPubReward networkReward) {
         if (!networkReward.isSuccessful()) {
@@ -683,21 +831,21 @@ private static void postToInstance(@NonNull Runnable runnable) {
     }
 
     private static void logErrorNotInitialized() {
-        MoPubLog.e("MoPub rewarded video was not initialized. You must call " +
+        MoPubLog.e("MoPub rewarded ad was not initialized. You must call " +
                 "MoPub.initializeRewardedVideo() before loading or attempting " +
-                "to play video ads.");
+                "to play rewarded ads.");
     }
 
     /**
-     * A runnable that calls forEach on each member of the rewarded video data passed to the runnable.
+     * A runnable that calls forEach on each member of the rewarded ad data passed to the runnable.
      */
     private static abstract class ForEachMoPubIdRunnable implements Runnable {
 
-        @NonNull private final Class<? extends CustomEventRewardedVideo> mCustomEventClass;
+        @NonNull private final Class<? extends CustomEventRewardedAd> mCustomEventClass;
         @NonNull private final String mThirdPartyId;
 
-        ForEachMoPubIdRunnable(@NonNull final Class<? extends CustomEventRewardedVideo> customEventClass,
-                @NonNull final String thirdPartyId) {
+        ForEachMoPubIdRunnable(@NonNull final Class<? extends CustomEventRewardedAd> customEventClass,
+                               @NonNull final String thirdPartyId) {
             Preconditions.checkNotNull(customEventClass);
             Preconditions.checkNotNull(thirdPartyId);
             mCustomEventClass = customEventClass;
@@ -708,7 +856,7 @@ private static void logErrorNotInitialized() {
 
         @Override
         public void run() {
-            final Set<String> moPubIds = sInstance.mRewardedVideoData
+            final Set<String> moPubIds = sInstance.mRewardedAdData
                     .getMoPubIdsForAdNetwork(mCustomEventClass, mThirdPartyId);
             for (String moPubId : moPubIds) {
                 forEach(moPubId);
@@ -719,9 +867,9 @@ public void run() {
     @Deprecated
     @VisibleForTesting
     @Nullable
-    static RewardedVideoData getRewardedVideoData() {
+    static RewardedAdData getRewardedAdData() {
         if (sInstance != null) {
-            return sInstance.mRewardedVideoData;
+            return sInstance.mRewardedAdData;
         }
         return null;
     }
@@ -735,4 +883,4 @@ static AdRequestStatusMapping getAdRequestStatusMapping() {
         }
         return null;
     }
-}
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
index 3fd9c37b..5f62ee79 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
@@ -5,9 +5,12 @@
 import android.support.annotation.Nullable;
 
 import com.mopub.common.MediationSettings;
+import com.mopub.common.MoPubReward;
 import com.mopub.common.Preconditions;
 import com.mopub.common.util.ReflectionTarget;
 
+import java.util.Set;
+
 /**
  * MoPubRewardedVideos is a utility class that holds controller methods for other MoPub rewarded
  * video classes.
@@ -16,7 +19,7 @@
 
     @ReflectionTarget
     public static void initializeRewardedVideo(@NonNull Activity activity,
-            MediationSettings... mediationSettings) {
+                                               MediationSettings... mediationSettings) {
         Preconditions.checkNotNull(activity);
 
         MoPubRewardedVideoManager.init(activity, mediationSettings);
@@ -29,7 +32,7 @@ public static void setRewardedVideoListener(@Nullable MoPubRewardedVideoListener
 
     @ReflectionTarget
     public static void loadRewardedVideo(@NonNull String adUnitId,
-            @Nullable MediationSettings... mediationSettings) {
+                                         @Nullable MediationSettings... mediationSettings) {
         Preconditions.checkNotNull(adUnitId);
 
         MoPubRewardedVideoManager.loadVideo(adUnitId, null, mediationSettings);
@@ -37,8 +40,8 @@ public static void loadRewardedVideo(@NonNull String adUnitId,
 
     @ReflectionTarget
     public static void loadRewardedVideo(@NonNull String adUnitId,
-            @Nullable MoPubRewardedVideoManager.RequestParameters requestParameters,
-            @Nullable MediationSettings... mediationSettings) {
+                                         @Nullable MoPubRewardedVideoManager.RequestParameters requestParameters,
+                                         @Nullable MediationSettings... mediationSettings) {
         Preconditions.checkNotNull(adUnitId);
 
         MoPubRewardedVideoManager.loadVideo(adUnitId, requestParameters, mediationSettings);
@@ -57,4 +60,19 @@ public static void showRewardedVideo(@NonNull String adUnitId) {
 
         MoPubRewardedVideoManager.showVideo(adUnitId);
     }
-}
+
+    @ReflectionTarget
+    public static Set<MoPubReward> getAvailableRewards(@NonNull String adUnitId) {
+        Preconditions.checkNotNull(adUnitId);
+
+        return MoPubRewardedVideoManager.getAvailableRewards(adUnitId);
+    }
+
+    @ReflectionTarget
+    public static void selectReward(@NonNull String adUnitId, @NonNull MoPubReward selectedReward) {
+        Preconditions.checkNotNull(adUnitId);
+        Preconditions.checkNotNull(selectedReward);
+
+        MoPubRewardedVideoManager.selectReward(adUnitId, selectedReward);
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoData.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdData.java
similarity index 56%
rename from mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoData.java
rename to mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdData.java
index 1023820d..a472ca1a 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoData.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdData.java
@@ -8,48 +8,50 @@
 import com.mopub.common.MoPubReward;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
 
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.TreeMap;
 
 /**
- * Used to manage the mapping between MoPub ad unit ids and third-party ad network ids for rewarded videos.
+ * Used to manage the mapping between MoPub ad unit ids and third-party ad network ids for rewarded ads.
  */
-class RewardedVideoData {
+class RewardedAdData {
     @NonNull
-    private final Map<String, CustomEventRewardedVideo> mAdUnitToCustomEventMap;
+    private final Map<String, CustomEventRewardedAd> mAdUnitToCustomEventMap;
     @NonNull
     private final Map<String, MoPubReward> mAdUnitToRewardMap;
     @NonNull
+    private final Map<String, Set<MoPubReward>> mAdUnitToAvailableRewardsMap;
+    @NonNull
     private final Map<String, String> mAdUnitToServerCompletionUrlMap;
     @NonNull
-    private final Map<Class<? extends CustomEventRewardedVideo>, MoPubReward> mCustomEventToRewardMap;
+    private final Map<Class<? extends CustomEventRewardedAd>, MoPubReward> mCustomEventToRewardMap;
     @NonNull
     private final Map<TwoPartKey, Set<String>> mCustomEventToMoPubIdMap;
-    @NonNull
-    private final Set<CustomEventRewardedVideo.CustomEventRewardedVideoListener> mAdNetworkListeners;
     @Nullable
     private String mCurrentlyShowingAdUnitId;
     @Nullable
     private String mCustomerId;
 
 
-    RewardedVideoData() {
-        mAdUnitToCustomEventMap = new TreeMap<String, CustomEventRewardedVideo>();
+    RewardedAdData() {
+        mAdUnitToCustomEventMap = new TreeMap<String, CustomEventRewardedAd>();
         mAdUnitToRewardMap = new TreeMap<String, MoPubReward>();
+        mAdUnitToAvailableRewardsMap = new TreeMap<String, Set<MoPubReward>>();
         mAdUnitToServerCompletionUrlMap = new TreeMap<String, String>();
-        mCustomEventToRewardMap = new HashMap<Class<? extends CustomEventRewardedVideo>, MoPubReward>();
+        mCustomEventToRewardMap = new HashMap<Class<? extends CustomEventRewardedAd>, MoPubReward>();
         mCustomEventToMoPubIdMap = new HashMap<TwoPartKey, Set<String>>();
-        mAdNetworkListeners = new HashSet<CustomEventRewardedVideo.CustomEventRewardedVideoListener>();
     }
 
     @Nullable
-    CustomEventRewardedVideo getCustomEvent(@NonNull String moPubId) {
+    CustomEventRewardedAd getCustomEvent(@NonNull String moPubId) {
         return mAdUnitToCustomEventMap.get(moPubId);
     }
 
@@ -58,6 +60,78 @@ MoPubReward getMoPubReward(@Nullable String moPubId) {
         return mAdUnitToRewardMap.get(moPubId);
     }
 
+    void addAvailableReward(
+            @NonNull String moPubId,
+            @Nullable String currencyName,
+            @Nullable String currencyAmount) {
+        Preconditions.checkNotNull(moPubId);
+        if (currencyName == null || currencyAmount == null) {
+            MoPubLog.e(String.format(Locale.US, "Currency name and amount cannot be null: " +
+                    "name = %s, amount = %s", currencyName, currencyAmount));
+            return;
+        }
+
+        int intCurrencyAmount;
+        try {
+            intCurrencyAmount = Integer.parseInt(currencyAmount);
+        } catch(NumberFormatException e) {
+            MoPubLog.e(String.format(Locale.US, "Currency amount must be an integer: %s",
+                    currencyAmount));
+            return;
+        }
+
+        if (intCurrencyAmount < 0) {
+            MoPubLog.e(String.format(Locale.US, "Currency amount cannot be negative: %s",
+                    currencyAmount));
+            return;
+        }
+
+        if (mAdUnitToAvailableRewardsMap.containsKey(moPubId)) {
+            mAdUnitToAvailableRewardsMap.get(moPubId)
+                    .add(MoPubReward.success(currencyName, intCurrencyAmount));
+        } else {
+            HashSet<MoPubReward> availableRewards = new HashSet<>();
+            availableRewards.add(MoPubReward.success(currencyName, intCurrencyAmount));
+            mAdUnitToAvailableRewardsMap.put(moPubId, availableRewards);
+        }
+    }
+
+    @NonNull
+    Set<MoPubReward> getAvailableRewards(@NonNull String moPubId) {
+        Preconditions.checkNotNull(moPubId);
+        Set<MoPubReward> availableRewards = mAdUnitToAvailableRewardsMap.get(moPubId);
+        return (availableRewards == null) ? Collections.<MoPubReward>emptySet() : availableRewards;
+    }
+
+    void selectReward(@NonNull String moPubId, @NonNull MoPubReward selectedReward) {
+        Preconditions.checkNotNull(moPubId);
+        Preconditions.checkNotNull(selectedReward);
+
+        Set<MoPubReward> availableRewards = mAdUnitToAvailableRewardsMap.get(moPubId);
+        if (availableRewards == null || availableRewards.isEmpty()) {
+            MoPubLog.e(String.format(
+                    Locale.US, "AdUnit %s does not have any rewards.", moPubId));
+            return;
+        }
+
+        if (!availableRewards.contains(selectedReward)) {
+            MoPubLog.e(String.format(
+                    Locale.US, "Selected reward is invalid for AdUnit %s.", moPubId));
+            return;
+        }
+
+        updateAdUnitRewardMapping(moPubId, selectedReward.getLabel(),
+                Integer.toString(selectedReward.getAmount()));
+    }
+
+    void resetAvailableRewards(@NonNull String moPubId) {
+        Preconditions.checkNotNull(moPubId);
+        Set<MoPubReward> availableRewards = mAdUnitToAvailableRewardsMap.get(moPubId);
+        if (availableRewards != null && !availableRewards.isEmpty()) {
+            availableRewards.clear();
+        }
+    }
+
     @Nullable
     String getServerCompletionUrl(@Nullable final String moPubId) {
         if (TextUtils.isEmpty(moPubId)) {
@@ -67,13 +141,13 @@ String getServerCompletionUrl(@Nullable final String moPubId) {
     }
 
     @Nullable
-    MoPubReward getLastShownMoPubReward(@NonNull Class<? extends CustomEventRewardedVideo> customEventClass) {
+    MoPubReward getLastShownMoPubReward(@NonNull Class<? extends CustomEventRewardedAd> customEventClass) {
         return mCustomEventToRewardMap.get(customEventClass);
     }
 
     @NonNull
     Set<String> getMoPubIdsForAdNetwork(
-            @NonNull Class<? extends CustomEventRewardedVideo> customEventClass,
+            @NonNull Class<? extends CustomEventRewardedAd> customEventClass,
             @Nullable String adNetworkId) {
         if (adNetworkId == null) {
             final Set<String> allIds = new HashSet<String>();
@@ -94,11 +168,9 @@ MoPubReward getLastShownMoPubReward(@NonNull Class<? extends CustomEventRewarded
 
     void updateAdUnitCustomEventMapping(
             @NonNull String moPubId,
-            @NonNull CustomEventRewardedVideo customEvent,
-            @Nullable CustomEventRewardedVideo.CustomEventRewardedVideoListener listener,
+            @NonNull CustomEventRewardedAd customEvent,
             @NonNull String adNetworkId) {
         mAdUnitToCustomEventMap.put(moPubId, customEvent);
-        mAdNetworkListeners.add(listener);
         associateCustomEventWithMoPubId(customEvent.getClass(), adNetworkId, moPubId);
     }
 
@@ -117,10 +189,14 @@ void updateAdUnitRewardMapping(
         try {
             intCurrencyAmount = Integer.parseInt(currencyAmount);
         } catch(NumberFormatException e) {
+            MoPubLog.e(String.format(Locale.US, "Currency amount must be an integer: %s",
+                    currencyAmount));
             return;
         }
 
         if (intCurrencyAmount < 0) {
+            MoPubLog.e(String.format(Locale.US, "Currency amount cannot be negative: %s",
+                    currencyAmount));
             return;
         }
 
@@ -128,29 +204,29 @@ void updateAdUnitRewardMapping(
     }
 
     void updateAdUnitToServerCompletionUrlMapping(@NonNull final String moPubId,
-            @Nullable final String serverCompletionUrl) {
+                                                  @Nullable final String serverCompletionUrl) {
         Preconditions.checkNotNull(moPubId);
         mAdUnitToServerCompletionUrlMap.put(moPubId, serverCompletionUrl);
     }
 
     /**
-     * This method should be called right before the rewarded video is shown in order to store the
+     * This method should be called right before the rewarded ad is shown in order to store the
      * reward associated with the custom event class. If called earlier in the rewarded lifecycle,
-     * it's possible that this mapping will be overridden by another reward value before the video
+     * it's possible that this mapping will be overridden by another reward value before the ad
      * is shown.
      *
-     * @param customEventClass the rewarded video custom event class
-     * @param moPubReward the reward from teh MoPub ad server returned in HTTP headers
+     * @param customEventClass the rewarded ad custom event class
+     * @param moPubReward the reward from the MoPub ad server returned in HTTP headers
      */
     void updateCustomEventLastShownRewardMapping(
-            @NonNull final Class<? extends CustomEventRewardedVideo> customEventClass,
+            @NonNull final Class<? extends CustomEventRewardedAd> customEventClass,
             @Nullable final MoPubReward moPubReward) {
         Preconditions.checkNotNull(customEventClass);
         mCustomEventToRewardMap.put(customEventClass, moPubReward);
     }
 
     void associateCustomEventWithMoPubId(
-            @NonNull Class<? extends CustomEventRewardedVideo> customEventClass,
+            @NonNull Class<? extends CustomEventRewardedAd> customEventClass,
             @NonNull String adNetworkId,
             @NonNull String moPubId) {
         final TwoPartKey newCustomEventMapping = new TwoPartKey(customEventClass, adNetworkId);
@@ -207,22 +283,44 @@ String getCustomerId() {
     void clear() {
         mAdUnitToCustomEventMap.clear();
         mAdUnitToRewardMap.clear();
+        mAdUnitToAvailableRewardsMap.clear();
         mAdUnitToServerCompletionUrlMap.clear();
         mCustomEventToRewardMap.clear();
         mCustomEventToMoPubIdMap.clear();
-        mAdNetworkListeners.clear();
         mCurrentlyShowingAdUnitId = null;
         mCustomerId = null;
     }
 
-    private static class TwoPartKey extends Pair<Class<? extends CustomEventRewardedVideo>, String> {
+    @VisibleForTesting
+    @Deprecated
+    /**
+     * This method is purely used as a helper method in unit tests. Note that calling
+     * {@link MoPubReward#success(String, int)} creates a new instance, even with the same reward
+     * label and amount as an existing reward. Therefore, existence of a reward cannot be asserted
+     * simply by comparing objects in the unit tests.
+     */
+    boolean existsInAvailableRewards(@NonNull String moPubId, @NonNull String currencyName,
+                                     int currencyAmount) {
+        Preconditions.checkNotNull(moPubId);
+        Preconditions.checkNotNull(currencyName);
+
+        for (MoPubReward reward : getAvailableRewards(moPubId)) {
+            if (reward.getLabel().equals(currencyName) && reward.getAmount() == currencyAmount) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    private static class TwoPartKey extends Pair<Class<? extends CustomEventRewardedAd>, String> {
         @NonNull
-        final Class<? extends CustomEventRewardedVideo> customEventClass;
+        final Class<? extends CustomEventRewardedAd> customEventClass;
         @NonNull
         final String adNetworkId;
 
         public TwoPartKey(
-                @NonNull final Class<? extends CustomEventRewardedVideo> customEventClass,
+                @NonNull final Class<? extends CustomEventRewardedAd> customEventClass,
                 @NonNull final String adNetworkId) {
             super(customEventClass, adNetworkId);
 
@@ -230,4 +328,4 @@ public TwoPartKey(
             this.adNetworkId = adNetworkId;
         }
     }
-}
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
new file mode 100644
index 00000000..262a98dc
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
@@ -0,0 +1,182 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.util.Log;
+import android.view.View;
+
+import com.mopub.common.AdReport;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Intents;
+import com.mopub.exceptions.IntentNotResolvableException;
+import com.mopub.mraid.MraidController.MraidListener;
+import com.mopub.mraid.MraidWebViewDebugListener;
+import com.mopub.mraid.PlacementType;
+import com.mopub.mraid.RewardedMraidController;
+
+import static com.mopub.common.DataKeys.AD_REPORT_KEY;
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
+import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.common.DataKeys.REWARDED_AD_DURATION_KEY;
+import static com.mopub.common.DataKeys.SHOULD_REWARD_ON_CLICK_KEY;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
+import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
+
+public class RewardedMraidActivity extends MraidActivity {
+    @Nullable private RewardedMraidController mRewardedMraidController;
+    @Nullable private MraidWebViewDebugListener mDebugListener;
+
+    public static void start(@NonNull Context context, @Nullable AdReport adreport,
+                             @Nullable String htmlData, long broadcastIdentifier, int rewardedDuration,
+                             boolean shouldRewardOnClick) {
+        final Intent intent = createIntent(context, adreport, htmlData, broadcastIdentifier,
+                rewardedDuration, shouldRewardOnClick);
+        try {
+            Intents.startActivity(context, intent);
+        } catch (IntentNotResolvableException exception) {
+            Log.d("RewardedMraidActivity", "RewardedMraidActivity.class not found. " +
+                    "Did you declare RewardedMraidActivity in your manifest?");
+        }
+    }
+
+    @VisibleForTesting
+    protected static Intent createIntent(@NonNull Context context, @Nullable AdReport adReport,
+                                         @Nullable String htmlData, long broadcastIdentifier, int rewardedDuration,
+                                         boolean shouldRewardOnClick) {
+        Intent intent = new Intent(context, RewardedMraidActivity.class);
+        intent.putExtra(HTML_RESPONSE_BODY_KEY, htmlData);
+        intent.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
+        intent.putExtra(AD_REPORT_KEY, adReport);
+        intent.putExtra(REWARDED_AD_DURATION_KEY, rewardedDuration);
+        intent.putExtra(SHOULD_REWARD_ON_CLICK_KEY, shouldRewardOnClick);
+        return intent;
+    }
+
+    @Override
+    public View getAdView() {
+        final Intent intent = getIntent();
+        final String htmlData = intent.getStringExtra(HTML_RESPONSE_BODY_KEY);
+        if (TextUtils.isEmpty(htmlData)) {
+            MoPubLog.w("RewardedMraidActivity received a null HTML body. Finishing the activity.");
+            finish();
+            return new View(this);
+        } else if (getBroadcastIdentifier() == null) {
+            MoPubLog.w("RewardedMraidActivity received a null broadcast id. Finishing the activity.");
+            finish();
+            return new View(this);
+        }
+
+        final int rewardedDurationInSeconds = intent.getIntExtra(REWARDED_AD_DURATION_KEY,
+                RewardedMraidController.DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_SECONDS);
+        final boolean shouldRewardOnClick = intent.getBooleanExtra(SHOULD_REWARD_ON_CLICK_KEY,
+                RewardedMraidController.DEFAULT_PLAYABLE_SHOULD_REWARD_ON_CLICK);
+
+        mRewardedMraidController = new RewardedMraidController(
+                this, mAdReport, PlacementType.INTERSTITIAL, rewardedDurationInSeconds,
+                getBroadcastIdentifier());
+
+        mRewardedMraidController.setDebugListener(mDebugListener);
+        mRewardedMraidController.setMraidListener(new MraidListener() {
+            @Override
+            public void onLoaded(View view) {
+                // This is only done for the interstitial. Banners have a different mechanism
+                // for tracking third party impressions.
+                mRewardedMraidController.loadJavascript(WEB_VIEW_DID_APPEAR.getJavascript());
+            }
+
+            @Override
+            public void onFailedToLoad() {
+                MoPubLog.d("RewardedMraidActivity failed to load. Finishing the activity");
+                broadcastAction(RewardedMraidActivity.this, getBroadcastIdentifier(),
+                        ACTION_INTERSTITIAL_FAIL);
+                finish();
+            }
+
+            public void onClose() {
+                mRewardedMraidController.loadJavascript(WEB_VIEW_DID_CLOSE.getJavascript());
+                finish();
+            }
+
+            @Override
+            public void onExpand() {
+                // No-op. The interstitial is always expanded.
+            }
+
+            @Override
+            public void onOpen() {
+                if (shouldRewardOnClick) {
+                    mRewardedMraidController.showPlayableCloseButton();
+                }
+                broadcastAction(RewardedMraidActivity.this, getBroadcastIdentifier(),
+                        ACTION_INTERSTITIAL_CLICK);
+            }
+        });
+
+        mRewardedMraidController.loadContent(htmlData);
+        return mRewardedMraidController.getAdContainer();
+    }
+
+    @Override
+    public void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (mRewardedMraidController != null) {
+            mRewardedMraidController.create(RewardedMraidActivity.this, getCloseableLayout());
+        }
+    }
+
+    @Override
+    protected void onPause() {
+        if (mRewardedMraidController != null) {
+            mRewardedMraidController.pause();
+        }
+        super.onPause();
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        if (mRewardedMraidController != null) {
+            mRewardedMraidController.resume();
+        }
+    }
+
+    @Override
+    protected void onDestroy() {
+        if (mRewardedMraidController != null) {
+            mRewardedMraidController.destroy();
+        }
+
+        super.onDestroy();
+    }
+
+    @Override
+    public void onBackPressed() {
+        if (mRewardedMraidController == null || mRewardedMraidController.backButtonEnabled()) {
+            super.onBackPressed();
+        }
+    }
+
+    @VisibleForTesting
+    public void setDebugListener(@Nullable MraidWebViewDebugListener debugListener) {
+        mDebugListener = debugListener;
+        if (mRewardedMraidController != null) {
+            mRewardedMraidController.setDebugListener(debugListener);
+        }
+    }
+
+    @Nullable
+    @Deprecated
+    @VisibleForTesting
+    public RewardedMraidController getRewardedMraidController() {
+        return mRewardedMraidController;
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidCountdownRunnable.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidCountdownRunnable.java
new file mode 100644
index 00000000..6fd6930a
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidCountdownRunnable.java
@@ -0,0 +1,42 @@
+package com.mopub.mobileads;
+
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.VisibleForTesting;
+
+import com.mopub.common.Preconditions;
+import com.mopub.mraid.RewardedMraidController;
+
+/**
+ * A runnable that is used to update a {@link RewardedMraidController}'s countdown display according
+ * to rules contained in the {@link RewardedMraidController}
+ */
+public class RewardedMraidCountdownRunnable extends RepeatingHandlerRunnable {
+    @NonNull private final RewardedMraidController mRewardedMraidController;
+    private int mCurrentElapsedTimeMillis;
+
+    public RewardedMraidCountdownRunnable(@NonNull RewardedMraidController rewardedMraidController,
+                                          @NonNull Handler handler) {
+        super(handler);
+        Preconditions.checkNotNull(handler);
+        Preconditions.checkNotNull(rewardedMraidController);
+
+        mRewardedMraidController = rewardedMraidController;
+    }
+
+    @Override
+    public void doWork() {
+        mCurrentElapsedTimeMillis += mUpdateIntervalMillis;
+        mRewardedMraidController.updateCountdown(mCurrentElapsedTimeMillis);
+
+        if (mRewardedMraidController.isPlayableCloseable()) {
+            mRewardedMraidController.showPlayableCloseButton();
+        }
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    int getCurrentElapsedTimeMillis() {
+        return mCurrentElapsedTimeMillis;
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java
index 3e1b6c7d..8793f266 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java
@@ -9,16 +9,12 @@
 
 class RewardedVastVideoInterstitial extends VastVideoInterstitial {
 
-    interface CustomEventRewardedVideoInterstitialListener extends CustomEventInterstitialListener {
+    interface RewardedVideoInterstitialListener extends CustomEventInterstitialListener {
         void onVideoComplete();
     }
 
     @Nullable private RewardedVideoBroadcastReceiver mRewardedVideoBroadcastReceiver;
 
-    public RewardedVastVideoInterstitial() {
-        super();
-    }
-
     @Override
     public void loadInterstitial(
             Context context,
@@ -27,9 +23,9 @@ public void loadInterstitial(
             Map<String, String> serverExtras) {
         super.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
 
-        if (customEventInterstitialListener instanceof CustomEventRewardedVideoInterstitialListener) {
+        if (customEventInterstitialListener instanceof RewardedVideoInterstitialListener) {
             mRewardedVideoBroadcastReceiver = new RewardedVideoBroadcastReceiver(
-                    (CustomEventRewardedVideoInterstitialListener) customEventInterstitialListener,
+                    (RewardedVideoInterstitialListener) customEventInterstitialListener,
                     mBroadcastIdentifier);
             mRewardedVideoBroadcastReceiver.register(mRewardedVideoBroadcastReceiver, context);
         }
@@ -57,4 +53,4 @@ public void onInvalidate() {
     RewardedVideoBroadcastReceiver getRewardedVideoBroadcastReceiver() {
         return mRewardedVideoBroadcastReceiver;
     }
-}
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
index 4ec3c111..f1b22db1 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
@@ -7,16 +7,17 @@
 import android.support.annotation.Nullable;
 
 import com.mopub.common.IntentActions;
+import com.mopub.common.Preconditions;
 
 public class RewardedVideoBroadcastReceiver extends BaseBroadcastReceiver {
 
     private static IntentFilter sIntentFilter;
 
     @Nullable
-    private RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener mRewardedVideoListener;
+    private RewardedVastVideoInterstitial.RewardedVideoInterstitialListener mRewardedVideoListener;
 
     public RewardedVideoBroadcastReceiver(
-            @Nullable RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener rewardedVideoListener,
+            @Nullable RewardedVastVideoInterstitial.RewardedVideoInterstitialListener rewardedVideoListener,
             final long broadcastIdentifier) {
         super(broadcastIdentifier);
         mRewardedVideoListener = rewardedVideoListener;
@@ -34,6 +35,9 @@ public IntentFilter getIntentFilter() {
 
     @Override
     public void onReceive(@NonNull final Context context, @NonNull final Intent intent) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(intent);
+
         if (mRewardedVideoListener == null) {
             return;
         }
@@ -48,4 +52,4 @@ public void onReceive(@NonNull final Context context, @NonNull final Intent inte
             unregister(this);
         }
     }
-}
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
index 5e37c66b..9620456c 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
@@ -38,6 +38,8 @@
     private static final String CUSTOMER_ID_KEY = "&customer_id=";
     private static final String SDK_VERSION_KEY = "&nv=";
     private static final String API_VERSION_KEY = "&v=";
+    private static final String REWARD_NAME_KEY = "&rcn=";
+    private static final String REWARD_AMOUNT_KEY = "&rca=";
 
     @NonNull private final String mUrl;
     @NonNull private final Handler mHandler;
@@ -46,17 +48,26 @@
     private volatile boolean mShouldStop;
 
     RewardedVideoCompletionRequestHandler(@NonNull final Context context,
-            @NonNull final String url, @Nullable final String customerId) {
-        this(context, url, customerId, new Handler());
+                                          @NonNull final String url,
+                                          @Nullable final String customerId,
+                                          @NonNull final String rewardName,
+                                          @NonNull final String rewardAmount) {
+        this(context, url, customerId, rewardName, rewardAmount, new Handler());
     }
 
     RewardedVideoCompletionRequestHandler(@NonNull final Context context,
-            @NonNull final String url,
-            @Nullable final String customerId,
-            @NonNull final Handler handler) {
+                                          @NonNull final String url,
+                                          @Nullable final String customerId,
+                                          @NonNull final String rewardName,
+                                          @NonNull final String rewardAmount,
+                                          @NonNull final Handler handler) {
         Preconditions.checkNotNull(context);
         Preconditions.checkNotNull(url);
-        mUrl = appendParameters(url, customerId);
+        Preconditions.checkNotNull(rewardName);
+        Preconditions.checkNotNull(rewardAmount);
+        Preconditions.checkNotNull(handler);
+
+        mUrl = appendParameters(url, customerId, rewardName, rewardAmount);
         mRetryCount = 0;
         mHandler = handler;
         mRequestQueue = Networking.getRequestQueue(context);
@@ -108,14 +119,16 @@ public void onErrorResponse(final VolleyError volleyError) {
     }
 
     public static void makeRewardedVideoCompletionRequest(@Nullable final Context context,
-            @Nullable final String url,
-            @Nullable final String customerId) {
-        if (TextUtils.isEmpty(url) || context == null) {
+                                                          @Nullable final String url,
+                                                          @Nullable final String customerId,
+                                                          @NonNull final String rewardName,
+                                                          @NonNull final String rewardAmount) {
+        if (context == null || TextUtils.isEmpty(url) || rewardName == null || rewardAmount == null) {
             return;
         }
 
-        new RewardedVideoCompletionRequestHandler(context,
-                url, customerId).makeRewardedVideoCompletionRequest();
+        new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                rewardAmount).makeRewardedVideoCompletionRequest();
     }
 
     static int getTimeout(int retryCount) {
@@ -127,11 +140,17 @@ static int getTimeout(int retryCount) {
     }
 
     private static String appendParameters(@NonNull final String url,
-            @Nullable final String customerId) {
+                                           @Nullable final String customerId,
+                                           @NonNull final String rewardName,
+                                           @NonNull final String rewardAmount) {
         Preconditions.checkNotNull(url);
+        Preconditions.checkNotNull(rewardName);
+        Preconditions.checkNotNull(rewardAmount);
 
         return url +
                 CUSTOMER_ID_KEY + (customerId == null ? "" : Uri.encode(customerId)) +
+                REWARD_NAME_KEY + Uri.encode(rewardName) +
+                REWARD_AMOUNT_KEY + Uri.encode(rewardAmount) +
                 SDK_VERSION_KEY + Uri.encode(MoPub.SDK_VERSION) +
                 API_VERSION_KEY + MoPubRewardedVideoManager.API_VERSION;
     }
@@ -153,4 +172,4 @@ int getRetryCount() {
     void setRetryCount(int retryCount) {
         mRetryCount = retryCount;
     }
-}
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidController.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidController.java
new file mode 100644
index 00000000..f9578ded
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidController.java
@@ -0,0 +1,197 @@
+package com.mopub.mraid;
+
+
+import android.content.Context;
+import android.os.Handler;
+import android.os.Looper;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.Gravity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+
+import com.mopub.common.AdReport;
+import com.mopub.common.CloseableLayout;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.mobileads.RewardedMraidCountdownRunnable;
+import com.mopub.mobileads.VastVideoRadialCountdownWidget;
+
+import static com.mopub.common.IntentActions.ACTION_REWARDED_PLAYABLE_COMPLETE;
+import static com.mopub.mobileads.BaseBroadcastReceiver.broadcastAction;
+
+public class RewardedMraidController extends MraidController {
+
+    /**
+     * Should reward on click is for when the user should be rewarded when clicking on the
+     * creative. This is defaulted to false so the user must wait for the entire countdown
+     * before able to leave the app.
+     */
+    public static final boolean DEFAULT_PLAYABLE_SHOULD_REWARD_ON_CLICK = false;
+
+    /**
+     * If a duration is not specified, this duration is used. 30 seconds is also the maximum
+     * amount of time that we currently allow rewarded playables to be not closeable.
+     */
+    public static final int DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_SECONDS = 30;
+
+    public static final int MILLIS_IN_SECOND = 1000;
+
+    @VisibleForTesting
+    static final int DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_MILLIS =
+            DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_SECONDS * MILLIS_IN_SECOND;
+    @VisibleForTesting
+    static final long PLAYABLE_COUNTDOWN_UPDATE_INTERVAL_MILLIS = 250;
+
+    @NonNull private CloseableLayout mCloseableLayout;
+    @NonNull private VastVideoRadialCountdownWidget mRadialCountdownWidget;
+    @NonNull private RewardedMraidCountdownRunnable mCountdownRunnable;
+
+    private final int mShowCloseButtonDelay;
+    private final long mBroadcastIdentifier;
+
+    private int mCurrentElapsedTimeMillis;
+    private boolean mShowCloseButtonEventFired;
+    private boolean mIsCalibrationDone;
+    private boolean mIsRewarded;
+
+    @VisibleForTesting
+    public RewardedMraidController(@NonNull Context context, @Nullable AdReport adReport,
+                                   @NonNull PlacementType placementType, int rewardedDurationInSeconds,
+                                   long broadcastIdentifier) {
+        super(context, adReport, placementType);
+        final int rewardedDurationInMillis = rewardedDurationInSeconds * MILLIS_IN_SECOND;
+        if (rewardedDurationInMillis < 0
+                || rewardedDurationInMillis > DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_MILLIS) {
+            mShowCloseButtonDelay = DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_MILLIS;
+        } else {
+            mShowCloseButtonDelay = rewardedDurationInMillis;
+        }
+        mBroadcastIdentifier = broadcastIdentifier;
+    }
+
+    public void create(@NonNull Context context, CloseableLayout closeableLayout) {
+        mCloseableLayout = closeableLayout;
+        mCloseableLayout.setCloseAlwaysInteractable(false);
+        mCloseableLayout.setCloseVisible(false);
+
+        addRadialCountdownWidget(context, View.INVISIBLE);
+        mRadialCountdownWidget.calibrateAndMakeVisible(mShowCloseButtonDelay);
+        mIsCalibrationDone = true;
+
+        Handler mainHandler = new Handler(Looper.getMainLooper());
+        mCountdownRunnable = new RewardedMraidCountdownRunnable(this, mainHandler);
+    }
+
+    public void pause() {
+        stopRunnables();
+    }
+
+    @Override
+    public void resume() {
+        startRunnables();
+    }
+
+    @Override
+    public void destroy() {
+        stopRunnables();
+    }
+
+    @Override
+    protected void handleCustomClose(boolean useCustomClose) {
+    }
+
+    @Override
+    protected void handleClose() {
+        if (mShowCloseButtonEventFired) {
+            super.handleClose();
+        }
+    }
+
+    public boolean backButtonEnabled() {
+        return mShowCloseButtonEventFired;
+    }
+
+    public boolean isPlayableCloseable() {
+        return !mShowCloseButtonEventFired && mCurrentElapsedTimeMillis >= mShowCloseButtonDelay;
+    }
+
+    public void showPlayableCloseButton() {
+        mShowCloseButtonEventFired = true;
+
+        mRadialCountdownWidget.setVisibility(View.GONE);
+        mCloseableLayout.setCloseVisible(true);
+
+        if (!mIsRewarded) {
+            broadcastAction(getContext(), mBroadcastIdentifier, ACTION_REWARDED_PLAYABLE_COMPLETE);
+            mIsRewarded = true;
+        }
+    }
+
+    public void updateCountdown(int currentElapsedTimeMillis) {
+        mCurrentElapsedTimeMillis = currentElapsedTimeMillis;
+        if (mIsCalibrationDone) {
+            mRadialCountdownWidget.updateCountdownProgress(mShowCloseButtonDelay,
+                    mCurrentElapsedTimeMillis);
+        }
+    }
+
+    private void startRunnables() {
+        mCountdownRunnable.startRepeating(PLAYABLE_COUNTDOWN_UPDATE_INTERVAL_MILLIS);
+    }
+
+    private void stopRunnables() {
+        mCountdownRunnable.stop();
+    }
+
+    private void addRadialCountdownWidget(@NonNull final Context context, int initialVisibility) {
+        mRadialCountdownWidget = new VastVideoRadialCountdownWidget(context);
+        mRadialCountdownWidget.setVisibility(initialVisibility);
+
+        ViewGroup.MarginLayoutParams lp =
+                (ViewGroup.MarginLayoutParams) mRadialCountdownWidget.getLayoutParams();
+        final int widgetWidth = lp.width + lp.leftMargin + lp.rightMargin;
+        final int widgetHeight = lp.height + lp.topMargin + lp.bottomMargin;
+
+        FrameLayout.LayoutParams widgetLayoutParams =
+                new FrameLayout.LayoutParams(widgetWidth, widgetHeight);
+        widgetLayoutParams.gravity = Gravity.TOP | Gravity.RIGHT;
+        mCloseableLayout.addView(mRadialCountdownWidget, widgetLayoutParams);
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    public int getShowCloseButtonDelay() {
+        return mShowCloseButtonDelay;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    public VastVideoRadialCountdownWidget getRadialCountdownWidget() {
+        return mRadialCountdownWidget;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    public RewardedMraidCountdownRunnable getCountdownRunnable() {
+        return mCountdownRunnable;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    public boolean isCalibrationDone() {
+        return mIsCalibrationDone;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    public boolean isShowCloseButtonEventFired() {
+        return mShowCloseButtonEventFired;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    public boolean isRewarded() {
+        return mIsRewarded;
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidInterstitial.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidInterstitial.java
new file mode 100644
index 00000000..0d811fbe
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidInterstitial.java
@@ -0,0 +1,80 @@
+package com.mopub.mraid;
+
+import android.content.Context;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.RewardedMraidActivity;
+
+import java.util.Map;
+
+import static com.mopub.common.DataKeys.REWARDED_AD_DURATION_KEY;
+import static com.mopub.common.DataKeys.SHOULD_REWARD_ON_CLICK_KEY;
+
+/**
+ * Handles the showing of rewarded MRAID interstitials. 'Rewarded duration' and 'should reward on
+ * click' are optional and will default to the values set in {@link RewardedMraidController}.
+ */
+public class RewardedMraidInterstitial extends MraidInterstitial {
+
+    public interface RewardedMraidInterstitialListener extends CustomEventInterstitial.CustomEventInterstitialListener {
+        void onMraidComplete();
+    }
+
+    @Nullable private RewardedPlayableBroadcastReceiver mRewardedPlayableBroadcastReceiver;
+    private int mRewardedDuration;
+    private boolean mShouldRewardOnClick;
+
+    @Override
+    public void loadInterstitial(
+            Context context,
+            CustomEventInterstitialListener customEventInterstitialListener,
+            Map<String, Object> localExtras,
+            Map<String, String> serverExtras) {
+        super.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+
+        if (customEventInterstitialListener instanceof RewardedMraidInterstitialListener) {
+            mRewardedPlayableBroadcastReceiver = new RewardedPlayableBroadcastReceiver(
+                    (RewardedMraidInterstitialListener) customEventInterstitialListener,
+                    mBroadcastIdentifier);
+            mRewardedPlayableBroadcastReceiver.register(mRewardedPlayableBroadcastReceiver, context);
+        }
+
+        final Object rewardedDurationObject = localExtras.get(REWARDED_AD_DURATION_KEY);
+        mRewardedDuration = rewardedDurationObject instanceof Integer ?
+                (int) rewardedDurationObject :
+                RewardedMraidController.DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_SECONDS;
+        final Object shouldRewardOnClickObject = localExtras.get(SHOULD_REWARD_ON_CLICK_KEY);
+        mShouldRewardOnClick = shouldRewardOnClickObject instanceof Boolean ?
+                (boolean) shouldRewardOnClickObject :
+                RewardedMraidController.DEFAULT_PLAYABLE_SHOULD_REWARD_ON_CLICK;
+    }
+
+    @Override
+    public void showInterstitial() {
+        RewardedMraidActivity.start(mContext, mAdReport, mHtmlData, mBroadcastIdentifier,
+                mRewardedDuration, mShouldRewardOnClick);
+    }
+
+
+    @Override
+    public void onInvalidate() {
+        super.onInvalidate();
+        if (mRewardedPlayableBroadcastReceiver != null) {
+            mRewardedPlayableBroadcastReceiver.unregister(mRewardedPlayableBroadcastReceiver);
+        }
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    int getRewardedDuration() {
+        return mRewardedDuration;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    boolean isShouldRewardOnClick() {
+        return mShouldRewardOnClick;
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedPlayableBroadcastReceiver.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedPlayableBroadcastReceiver.java
new file mode 100644
index 00000000..307ce61a
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedPlayableBroadcastReceiver.java
@@ -0,0 +1,55 @@
+package com.mopub.mraid;
+
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.IntentActions;
+import com.mopub.mobileads.BaseBroadcastReceiver;
+
+/**
+ * Handles the rewarded playable complete broadcast.
+ */
+public class RewardedPlayableBroadcastReceiver extends BaseBroadcastReceiver {
+
+    private static IntentFilter sIntentFilter;
+
+    @Nullable
+    private RewardedMraidInterstitial.RewardedMraidInterstitialListener mRewardedMraidListener;
+
+    public RewardedPlayableBroadcastReceiver(
+            @Nullable RewardedMraidInterstitial.RewardedMraidInterstitialListener rewardedVideoListener,
+            final long broadcastIdentifier) {
+        super(broadcastIdentifier);
+        mRewardedMraidListener = rewardedVideoListener;
+        getIntentFilter();
+    }
+
+    @NonNull
+    public IntentFilter getIntentFilter() {
+        if (sIntentFilter == null) {
+            sIntentFilter = new IntentFilter();
+            sIntentFilter.addAction(IntentActions.ACTION_REWARDED_PLAYABLE_COMPLETE);
+        }
+        return sIntentFilter;
+    }
+
+    @Override
+    public void onReceive(@NonNull final Context context, @NonNull final Intent intent) {
+        if (mRewardedMraidListener == null) {
+            return;
+        }
+
+        if (!shouldConsumeBroadcast(intent)) {
+            return;
+        }
+
+        final String action = intent.getAction();
+        if (IntentActions.ACTION_REWARDED_PLAYABLE_COMPLETE.equals(action)) {
+            mRewardedMraidListener.onMraidComplete();
+            unregister(this);
+        }
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index 3a9abe1a..c34cc3dd 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -9,7 +9,7 @@ repositories {
 }
 
 project.group = 'com.mopub'
-project.version = '4.11.0'
+project.version = '4.15.0'
 
 android {
     compileSdkVersion 25
@@ -18,7 +18,7 @@ android {
     useLibrary 'org.apache.http.legacy'
 
     defaultConfig {
-        versionCode 48
+        versionCode 52
         versionName version
         minSdkVersion 14
         targetSdkVersion 25
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
index 23ca26ca..a561a950 100644
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=4.11.0+kit
+fabric-version=4.15.0+kit
 fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
index 24e0e4db..85cb251e 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -462,7 +462,7 @@ public void chooseReward_withNetworkRewardNotSuccessful_shouldReturnNetworkRewar
     @Test
     public void onRewardedVideoCompleted_withEmptyServerCompletionUrl_withCurrentlyShowingAdUnitId_shouldNotifyRewardedVideoCompletedForOneAdUnitId() {
         MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
-        RewardedVideoData rewardedVideoData = MoPubRewardedVideoManager.getRewardedVideoData();
+        RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedVideoData();
         rewardedVideoData.setCurrentlyShowingAdUnitId("testAdUnit1");
         rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit1", new TestCustomEvent(), null,
                 TestCustomEvent.AD_NETWORK_ID);
@@ -486,7 +486,7 @@ public void onRewardedVideoCompleted_withEmptyServerCompletionUrl_withCurrentlyS
     @Test
     public void onRewardedVideoCompleted_withEmptyServerCompletionUrl_withNoCurrentlyShowingAdUnitId_shouldNotifyRewardedVideoCompletedForAllAdUnitIds() {
         MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
-        RewardedVideoData rewardedVideoData = MoPubRewardedVideoManager.getRewardedVideoData();
+        RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedVideoData();
         rewardedVideoData.setCurrentlyShowingAdUnitId(null);
         rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit1", new TestCustomEvent(), null,
                 TestCustomEvent.AD_NETWORK_ID);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoDataTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoDataTest.java
index 512ac0e7..028aeeb2 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoDataTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoDataTest.java
@@ -14,11 +14,11 @@
 @Config(constants = BuildConfig.class)
 public class RewardedVideoDataTest {
 
-    private RewardedVideoData subject;
+    private RewardedAdData subject;
 
     @Before
     public void setup() {
-        subject = new RewardedVideoData();
+        subject = new RewardedAdData();
     }
 
     @Test
