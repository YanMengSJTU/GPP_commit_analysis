diff --git a/CHANGELOG.md b/CHANGELOG.md
index 122e748d..a5de7bb2 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,8 @@
+## Version 5.2.0 (July 9, 2018)
+- SDK initialization is required for ads to load. Ad requests will fail unless MoPub is initialized.
+- `MoPub#isSdkInitialized()` now more accurately reflects whether or not MoPub is initialized. This method now returns true after the `SdkInitializationListener#onInitializationFinished()` callback instead of immediately.
+- Bug fixes.
+
 ## Version 5.1.0 (June 5, 2018)
 - Upgraded Moat dependency to 2.4.5.
 - Banners now only refresh after an impression is made.
diff --git a/README.md b/README.md
index aca38a9b..9bc5b523 100644
--- a/README.md
+++ b/README.md
@@ -39,7 +39,7 @@ The MoPub SDK is available via:
     }
 
     dependencies {
-        implementation('com.mopub:mopub-sdk:5.1.0@aar') {
+        implementation('com.mopub:mopub-sdk:5.2.0@aar') {
             transitive = true
         }
     }
@@ -61,27 +61,27 @@ The MoPub SDK is available via:
         // ... other project dependencies
 
         // For banners
-        implementation('com.mopub:mopub-sdk-banner:5.1.0@aar') {
+        implementation('com.mopub:mopub-sdk-banner:5.2.0@aar') {
             transitive = true
         }
         
         // For interstitials
-        implementation('com.mopub:mopub-sdk-interstitial:5.1.0@aar') {
+        implementation('com.mopub:mopub-sdk-interstitial:5.2.0@aar') {
             transitive = true
         }
 
         // For rewarded videos. This will automatically also include interstitials
-        implementation('com.mopub:mopub-sdk-rewardedvideo:5.1.0@aar') {
+        implementation('com.mopub:mopub-sdk-rewardedvideo:5.2.0@aar') {
             transitive = true
         }
 
         // For native static (images).
-        implementation('com.mopub:mopub-sdk-native-static:5.1.0@aar') {
+        implementation('com.mopub:mopub-sdk-native-static:5.2.0@aar') {
             transitive = true
         }
 
         // For native video. This will automatically also include native static
-        implementation('com.mopub:mopub-sdk-native-video:5.1.0@aar') {
+        implementation('com.mopub:mopub-sdk-native-video:5.2.0@aar') {
             transitive = true
         }
     }
@@ -109,10 +109,8 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- Upgraded Moat dependency to 2.4.5.
-- Banners now only refresh after an impression is made.
-- Added `PersonalInfoManager.forceGdprApplies()` in order to let MoPub know that this app should always apply GDPR rules.
-- Loading MoPub's consent dialog is only possible when GDPR rules applies to the app.
+- SDK initialization is required for ads to load. Ad requests will fail unless MoPub is initialized.
+- `MoPub#isSdkInitialized()` now more accurately reflects whether or not MoPub is initialized. This method now returns true after the `SdkInitializationListener#onInitializationFinished()` callback instead of immediately.
 
 ## Requirements
 
@@ -141,7 +139,7 @@ Normally, to add the MoPub SDK to your app via JCenter, your `build.gradle` woul
 
 ```	
 dependencies {
-    implementation('com.mopub:mopub-sdk:5.1.0@aar') {
+    implementation('com.mopub:mopub-sdk:5.2.0@aar') {
         transitive = true
     }
 }
@@ -150,7 +148,7 @@ Update to the following to exclude one or both viewability vendors:
 
 ```
 dependencies {
-    implementation('com.mopub:mopub-sdk:5.1.0@aar') {
+    implementation('com.mopub:mopub-sdk:5.2.0@aar') {
         transitive = true
         exclude module: 'libAvid-mopub' // To exclude AVID
         exclude module: 'moat-mobile-app-kit' // To exclude Moat
diff --git a/build.gradle b/build.gradle
index 4fcc6995..62e69f6b 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,6 +1,5 @@
 buildscript {
     repositories {
-        mavenCentral()
         jcenter()
         google()
     }
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index f2723900..c3945025 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="61"
-      android:versionName="5.1.0">
+      android:versionCode="62"
+      android:versionName="5.2.0">
     <uses-sdk android:minSdkVersion="16"
               android:targetSdkVersion="26"/>
 
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index 741d55a9..37348eaa 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -1,17 +1,17 @@
 repositories {
+    google()
     jcenter()
     flatDir {
         dirs '../libs'
     }
     maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
-    maven { url 'https://maven.google.com' }
 }
 
 apply plugin: 'com.android.application'
 
 project.group = 'com.mopub'
 project.description = '''MoPub Sample App'''
-project.version = '5.1.0'
+project.version = '5.2.0'
 
 android {
     compileSdkVersion 26
@@ -19,7 +19,7 @@ android {
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 61
+        versionCode 62
         versionName version
         minSdkVersion 16
         targetSdkVersion 26
diff --git a/mopub-sample/pom.xml b/mopub-sample/pom.xml
deleted file mode 100644
index 8a283c4d..00000000
--- a/mopub-sample/pom.xml
+++ /dev/null
@@ -1,103 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-
-    <parent>
-        <groupId>com.mopub.mobileads</groupId>
-        <artifactId>mopub-android</artifactId>
-        <version>1.0</version>
-    </parent>
-
-    <artifactId>mopub-sample</artifactId>
-    <version>1.0.0-SNAPSHOT</version>
-    <packaging>apk</packaging>
-    <name>MoPub Simple Ads Demo</name>
-    <description>Sample application that demonstrates how to use the MoPub SDK.</description>
-
-    <properties>
-        <robolectric.version>2.1</robolectric.version>
-    </properties>
-
-    <dependencies>
-
-        <!--main-->
-
-        <dependency>
-            <groupId>com.mopub.mobileads</groupId>
-            <artifactId>mopub-sdk</artifactId>
-            <version>1.0.0-SNAPSHOT</version>
-            <type>aar</type>
-        </dependency>
-
-        <dependency>
-            <groupId>com.android.support</groupId>
-            <artifactId>support-v4</artifactId>
-            <version>23.1.1</version>
-            <type>aar</type>
-        </dependency>
-
-        <dependency>
-            <groupId>com.android.support</groupId>
-            <artifactId>recyclerview-v7</artifactId>
-            <version>23.1.1</version>
-            <type>aar</type>
-        </dependency>
-        
-        <dependency>
-            <groupId>com.google.android.gms</groupId>
-            <artifactId>play-services-ads</artifactId>
-            <version>7.0.0</version>
-            <type>aar</type>
-        </dependency>
-
-        <dependency> <groupId>com.google.android</groupId>
-            <artifactId>android</artifactId>
-            <version>4.4.2</version>
-            <scope>provided</scope>
-        </dependency>
-    </dependencies>
-
-    <build>
-        <finalName>${project.artifactId}</finalName>
-
-        <plugins>
-            <plugin>
-                <artifactId>maven-compiler-plugin</artifactId>
-                <version>2.3.2</version>
-                <!-- Skip tests. We use Gradle to build and run tests. -->
-                <executions>
-                    <execution>
-                        <id>default-testCompile</id>
-                        <phase>test-compile</phase>
-                        <goals>
-                            <goal>testCompile</goal>
-                        </goals>
-                        <configuration>
-                            <skip>true</skip>
-                        </configuration>
-                    </execution>
-                </executions>
-                <configuration>
-                    <source>7</source>
-                    <target>7</target>
-                </configuration>
-            </plugin>
-            <plugin>
-                <groupId>com.simpligility.maven.plugins</groupId>
-                <artifactId>android-maven-plugin</artifactId>
-                <version>4.2.0</version>
-                <configuration>
-                    <androidManifestFile>AndroidManifest.xml</androidManifestFile>
-                    <resourceDirectory>res</resourceDirectory>
-                    <sdk>
-                        <!-- platform or api level (api level 4 = platform 1.6)-->
-                        <platform>22</platform>
-                    </sdk>
-                    <undeployBeforeDeploy>true</undeployBeforeDeploy>
-                </configuration>
-                <extensions>true</extensions>
-            </plugin>
-        </plugins>
-    </build>
-</project>
diff --git a/mopub-sdk/mopub-sdk-base/build.gradle b/mopub-sdk/mopub-sdk-base/build.gradle
index a03c99aa..400d6467 100644
--- a/mopub-sdk/mopub-sdk-base/build.gradle
+++ b/mopub-sdk/mopub-sdk-base/build.gradle
@@ -12,11 +12,11 @@ dependencies {
 
     def avidEnabled = project.hasProperty("mopub.avidEnabled") ? project.getProperty("mopub.avidEnabled").toBoolean() : true
     if (avidEnabled) {
-        compile('com.mopub:libAvid-mopub:3.6.4')
+        implementation('com.mopub:libAvid-mopub:3.6.4')
     }
     def moatEnabled = project.hasProperty("mopub.moatEnabled") ? project.getProperty("mopub.moatEnabled").toBoolean() : true
     if (moatEnabled) {
-        compile 'com.moat.analytics.mobile.mpub:moat-mobile-app-kit:2.4.5'
+        implementation 'com.moat.analytics.mobile.mpub:moat-mobile-app-kit:2.4.5'
     }
 }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
index 010d8b59..0cd8abe8 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
@@ -1,5 +1,6 @@
 package com.mopub.common;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageInfo;
@@ -7,6 +8,8 @@
 import android.content.res.Configuration;
 import android.graphics.Point;
 import android.net.ConnectivityManager;
+import android.net.Network;
+import android.net.NetworkCapabilities;
 import android.net.NetworkInfo;
 import android.os.Build;
 import android.support.annotation.NonNull;
@@ -27,17 +30,14 @@
  * Singleton that caches Client objects so they will be available to background threads.
  */
 public class ClientMetadata {
-    // Network type constant defined after API 9:
-    private static final int TYPE_ETHERNET = 9;
 
     private static final String DEVICE_ORIENTATION_PORTRAIT = "p";
     private static final String DEVICE_ORIENTATION_LANDSCAPE = "l";
     private static final String DEVICE_ORIENTATION_SQUARE = "s";
     private static final String DEVICE_ORIENTATION_UNKNOWN = "u";
-    private static final int UNKNOWN_NETWORK = -1;
 
     private String mNetworkOperatorForUrl;
-    private final String mNetworkOperator;
+    private String mNetworkOperator;
     private String mSimOperator;
     private String mIsoCountryCode;
     private String mSimIsoCountryCode;
@@ -47,11 +47,17 @@
     @NonNull
     private final MoPubIdentifier moPubIdentifier;
 
+    /**
+     * MoPubNetworkType - network connection type enumeration
+     */
     public enum MoPubNetworkType {
         UNKNOWN(0),
         ETHERNET(1),
         WIFI(2),
-        MOBILE(3);
+        MOBILE(3),
+        GG(4),      // connected to 2G network
+        GGG(5),     // connected to 3G network
+        GGGG(6);    // connected to 4G network
 
         private final int mId;
         MoPubNetworkType(int id) {
@@ -63,23 +69,6 @@ public String toString() {
             return Integer.toString(mId);
         }
 
-        private static MoPubNetworkType fromAndroidNetworkType(int type) {
-            switch(type) {
-                case TYPE_ETHERNET:
-                    return ETHERNET;
-                case ConnectivityManager.TYPE_WIFI:
-                    return WIFI;
-                case ConnectivityManager.TYPE_MOBILE:
-                case ConnectivityManager.TYPE_MOBILE_DUN:
-                case ConnectivityManager.TYPE_MOBILE_HIPRI:
-                case ConnectivityManager.TYPE_MOBILE_MMS:
-                case ConnectivityManager.TYPE_MOBILE_SUPL:
-                    return MOBILE;
-                default:
-                    return UNKNOWN;
-            }
-        }
-
         public int getId() {
             return mId;
         }
@@ -164,33 +153,34 @@ public ClientMetadata(Context context) {
 
         final TelephonyManager telephonyManager =
                 (TelephonyManager) mContext.getSystemService(Context.TELEPHONY_SERVICE);
-        mNetworkOperatorForUrl = telephonyManager.getNetworkOperator();
-        mNetworkOperator = telephonyManager.getNetworkOperator();
-        if (telephonyManager.getPhoneType() == TelephonyManager.PHONE_TYPE_CDMA &&
-                telephonyManager.getSimState() == TelephonyManager.SIM_STATE_READY) {
-            mNetworkOperatorForUrl = telephonyManager.getSimOperator();
-            mSimOperator = telephonyManager.getSimOperator();
-        }
+        if(telephonyManager!=null) {
+            mNetworkOperatorForUrl = telephonyManager.getNetworkOperator();
+            mNetworkOperator = telephonyManager.getNetworkOperator();
+            if (telephonyManager.getPhoneType() == TelephonyManager.PHONE_TYPE_CDMA &&
+                    telephonyManager.getSimState() == TelephonyManager.SIM_STATE_READY) {
+                mNetworkOperatorForUrl = telephonyManager.getSimOperator();
+                mSimOperator = telephonyManager.getSimOperator();
+            }
 
-        if (MoPub.canCollectPersonalInformation()) {
-            mIsoCountryCode = telephonyManager.getNetworkCountryIso();
-            mSimIsoCountryCode = telephonyManager.getSimCountryIso();
-        } else {
-            mIsoCountryCode = "";
-            mSimIsoCountryCode = "";
-        }
+            if (MoPub.canCollectPersonalInformation()) {
+                mIsoCountryCode = telephonyManager.getNetworkCountryIso();
+                mSimIsoCountryCode = telephonyManager.getSimCountryIso();
+            } else {
+                mIsoCountryCode = "";
+                mSimIsoCountryCode = "";
+            }
 
-        try {
-            // Some Lenovo devices require READ_PHONE_STATE here.
-            mNetworkOperatorName = telephonyManager.getNetworkOperatorName();
-            if (telephonyManager.getSimState() == TelephonyManager.SIM_STATE_READY) {
-                mSimOperatorName = telephonyManager.getSimOperatorName();
+            try {
+                // Some Lenovo devices require READ_PHONE_STATE here.
+                mNetworkOperatorName = telephonyManager.getNetworkOperatorName();
+                if (telephonyManager.getSimState() == TelephonyManager.SIM_STATE_READY) {
+                    mSimOperatorName = telephonyManager.getSimOperatorName();
+                }
+            } catch (SecurityException e) {
+                mNetworkOperatorName = null;
+                mSimOperatorName = null;
             }
-        } catch (SecurityException e) {
-            mNetworkOperatorName = null;
-            mSimOperatorName = null;
         }
-
         moPubIdentifier = new MoPubIdentifier(mContext);
     }
 
@@ -231,17 +221,64 @@ public String getOrientationString() {
         return orientation;
     }
 
-
+    @SuppressLint("MissingPermission")
     public MoPubNetworkType getActiveNetworkType() {
-        int networkType = UNKNOWN_NETWORK;
-        if (DeviceUtils.isPermissionGranted(mContext, ACCESS_NETWORK_STATE)) {
-            NetworkInfo activeNetworkInfo = mConnectivityManager.getActiveNetworkInfo();
-            networkType = activeNetworkInfo != null
-                    ? activeNetworkInfo.getType() : UNKNOWN_NETWORK;
+        if (!DeviceUtils.isPermissionGranted(mContext, ACCESS_NETWORK_STATE)) {
+            return MoPubNetworkType.UNKNOWN;
+        }
+
+        NetworkInfo activeNetworkInfo = mConnectivityManager.getActiveNetworkInfo();
+        if (activeNetworkInfo == null || !activeNetworkInfo.isConnected()) {
+            return MoPubNetworkType.UNKNOWN;
+        }
+
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
+            if (activeNetworkInfo.getType() == ConnectivityManager.TYPE_ETHERNET) {
+                return MoPubNetworkType.ETHERNET;
+            }
+        } else {
+            Network[] networks = mConnectivityManager.getAllNetworks();
+            for (Network network : networks) {
+                NetworkCapabilities capabilities = mConnectivityManager.getNetworkCapabilities(network);
+                if (capabilities != null && capabilities.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET))
+                    return MoPubNetworkType.ETHERNET;
+            }
+        }
+
+        NetworkInfo networkInfo = mConnectivityManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
+        if (networkInfo != null && networkInfo.isConnected()) {
+            return MoPubNetworkType.WIFI;
+        }
+
+        networkInfo = mConnectivityManager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
+        if (networkInfo != null && networkInfo.isConnected()) {
+            int netType = networkInfo.getSubtype();
+            switch (netType) {
+                case TelephonyManager.NETWORK_TYPE_GPRS:
+                case TelephonyManager.NETWORK_TYPE_EDGE:
+                case TelephonyManager.NETWORK_TYPE_CDMA:
+                case TelephonyManager.NETWORK_TYPE_1xRTT:
+                case TelephonyManager.NETWORK_TYPE_IDEN:
+                    return MoPubNetworkType.GG; // 2G
+                case TelephonyManager.NETWORK_TYPE_UMTS:
+                case TelephonyManager.NETWORK_TYPE_EVDO_0:
+                case TelephonyManager.NETWORK_TYPE_EVDO_A:
+                case TelephonyManager.NETWORK_TYPE_HSDPA:
+                case TelephonyManager.NETWORK_TYPE_HSUPA:
+                case TelephonyManager.NETWORK_TYPE_HSPA:
+                case TelephonyManager.NETWORK_TYPE_EVDO_B:
+                case TelephonyManager.NETWORK_TYPE_EHRPD:
+                    return MoPubNetworkType.GGG; // 3G
+                case TelephonyManager.NETWORK_TYPE_HSPAP:
+                case TelephonyManager.NETWORK_TYPE_LTE:
+                    return MoPubNetworkType.GGGG; // 4G
+                default:
+                    return MoPubNetworkType.MOBILE;
+            }
         }
-        return MoPubNetworkType.fromAndroidNetworkType(networkType);
-    }
 
+        return MoPubNetworkType.UNKNOWN;
+    }
 
     /**
      * Get the logical density of the display as in {@link android.util.DisplayMetrics#density}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
index a6c47f8e..bf9f691f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 import android.content.Context;
+import android.os.Looper;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
@@ -15,7 +16,7 @@
 import static com.mopub.common.ExternalViewabilitySessionManager.ViewabilityVendor;
 
 public class MoPub {
-    public static final String SDK_VERSION = "5.1.0";
+    public static final String SDK_VERSION = "5.2.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
@@ -67,6 +68,7 @@ public static BrowserAgent fromHeader(@Nullable final Integer browserAgent) {
     @Nullable private static Method sUpdateActivityMethod;
     private static boolean sAdvancedBiddingEnabled = true;
     private static boolean sSdkInitialized = false;
+    private static boolean sSdkInitializing = false;
     private static AdvancedBiddingTokens sAdvancedBiddingTokens;
     private static PersonalInfoManager sPersonalInfoManager;
 
@@ -166,16 +168,31 @@ public static void initializeSdk(@NonNull final Context context,
             MoPubLog.d("MoPub SDK is already initialized");
             return;
         }
-        sSdkInitialized = true;
+        if (sSdkInitializing) {
+            MoPubLog.d("MoPub SDK is currently initializing.");
+            return;
+        }
 
-        final SdkInitializationListener compositeSdkInitializationListener;
-        if (sdkInitializationListener == null) {
-            compositeSdkInitializationListener = null;
-        } else {
-            compositeSdkInitializationListener = new CompositeSdkInitializationListener(
-                    sdkInitializationListener, 2);
+        if (Looper.getMainLooper() != Looper.myLooper()) {
+            MoPubLog.e("MoPub can only be initialized on the main thread.");
+            return;
         }
 
+        sSdkInitializing = true;
+
+        final SdkInitializationListener internalSdkInitializationListener = new SdkInitializationListener() {
+            @Override
+            public void onInitializationFinished() {
+                sSdkInitializing = false;
+                sSdkInitialized = true;
+                if (sdkInitializationListener != null) {
+                    sdkInitializationListener.onInitializationFinished();
+                }
+            }
+        };
+        final SdkInitializationListener compositeSdkInitializationListener =
+                new CompositeSdkInitializationListener(internalSdkInitializationListener, 2);
+
         sPersonalInfoManager = new PersonalInfoManager(context, sdkConfiguration.getAdUnitId(),
                 compositeSdkInitializationListener);
 
@@ -331,7 +348,6 @@ static void clearAdvancedBidders() {
         sAdvancedBiddingTokens = null;
         sPersonalInfoManager = null;
         sSdkInitialized = false;
-        sPersonalInfoManager = null;
     }
 
     @Deprecated
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogActivity.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogActivity.java
index 2e1d2f2f..9888af19 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogActivity.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogActivity.java
@@ -23,18 +23,17 @@
     private static final String KEY_HTML_PAGE = "html-page-content";
 
     @Nullable
-    private ConsentDialogLayout mView;
+    ConsentDialogLayout mView;
     @Nullable
     private Runnable mEnableCloseButtonRunnable;
     @Nullable
-    private Handler mCloseButtonHandler;
+    Handler mCloseButtonHandler;
 
     @Nullable
-    private ConsentStatus mConsentStatus;
+    ConsentStatus mConsentStatus;
 
     static void start(@NonNull final Context context, @NonNull String htmlData) {
         Preconditions.checkNotNull(context);
-        Preconditions.checkNotNull(htmlData);
 
         if (TextUtils.isEmpty(htmlData)) {
             MoPubLog.e("ConsentDialogActivity htmlData can't be empty string.");
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java
index 4088dd33..d8b34bc8 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java
@@ -20,8 +20,8 @@
 
     @Nullable private String mHtmlBody;
     @Nullable private ConsentDialogListener mExtListener;
-    private boolean mReady;
-    private boolean mRequestInFlight;
+    volatile boolean mReady;
+    volatile boolean mRequestInFlight;
     private final Handler mHandler;
 
     ConsentDialogController(@NonNull final Context appContext) {
@@ -71,7 +71,7 @@ public void onErrorResponse(final VolleyError volleyError) {
         loadListener.onConsentDialogLoadFailed(MoPubErrorCode.UNSPECIFIED);
     }
 
-    void loadConsentDialog(@Nullable final ConsentDialogListener listener,
+    synchronized void loadConsentDialog(@Nullable final ConsentDialogListener listener,
             @Nullable final Boolean gdprApplies,
             @NonNull final PersonalInfoData personalInfoData) {
         Preconditions.checkNotNull(personalInfoData);
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java
index 65829f9f..67ff4c0a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java
@@ -248,9 +248,15 @@ public void forceGdprApplies() {
         if (mPersonalInfoData.isForceGdprApplies()) {
             return;
         }
+        final boolean oldCanCollectPersonalInformation = canCollectPersonalInformation();
         mPersonalInfoData.setForceGdprApplies(true);
         mForceGdprAppliesChanged = true;
         mPersonalInfoData.writeToDisk();
+        final boolean newCanCollectPersonalInformation = canCollectPersonalInformation();
+        if (oldCanCollectPersonalInformation != newCanCollectPersonalInformation) {
+            fireOnConsentStateChangeListeners(mPersonalInfoData.getConsentStatus(),
+                    mPersonalInfoData.getConsentStatus(), newCanCollectPersonalInformation);
+        }
         requestSync(true);
     }
 
@@ -446,13 +452,19 @@ private void attemptStateTransition(@NonNull final ConsentStatus newConsentStatu
      * @param newConsentStatus    The new consent status we want to transition to.
      * @param consentChangeReason Why the state changed.
      */
-    private void attemptStateTransition(@NonNull final ConsentStatus newConsentStatus,
+    @VisibleForTesting
+    void attemptStateTransition(@NonNull final ConsentStatus newConsentStatus,
             @NonNull final String consentChangeReason) {
         Preconditions.checkNotNull(newConsentStatus);
         Preconditions.checkNotNull(consentChangeReason);
 
-
         final ConsentStatus oldConsentStatus = mPersonalInfoData.getConsentStatus();
+        if (oldConsentStatus.equals(newConsentStatus)) {
+            MoPubLog.d("Consent status is already " + oldConsentStatus +
+                    ". Not doing a state transition.");
+            return;
+        }
+
         MoPubLog.d("Changing consent status from " + oldConsentStatus + "to " + newConsentStatus +
                 " because " + consentChangeReason);
         mPersonalInfoData.setConsentChangeReason(consentChangeReason);
@@ -495,6 +507,13 @@ private void attemptStateTransition(@NonNull final ConsentStatus newConsentStatu
             }
         }
 
+        fireOnConsentStateChangeListeners(oldConsentStatus, newConsentStatus,
+                canCollectPersonalInformation);
+    }
+
+    private void fireOnConsentStateChangeListeners(@NonNull final ConsentStatus oldConsentStatus,
+            @NonNull final ConsentStatus newConsentStatus,
+            final boolean canCollectPersonalInformation) {
         synchronized (mConsentStatusChangeListeners) {
             for (final ConsentStatusChangeListener stateChangeListener : mConsentStatusChangeListeners) {
                 new Handler(Looper.getMainLooper()).post(new Runnable() {
@@ -539,11 +558,20 @@ public void onInitializationFinished() {
 
         @Override
         public void onSuccess(final SyncResponse response) {
-            if (response.isForceGdprApplies()) {
-                mPersonalInfoData.setGdprApplies(true);
-            } else if (mPersonalInfoData.getGdprApplies() == null) {
+            final boolean oldCanCollectPersonalInformation = canCollectPersonalInformation();
+            if (mPersonalInfoData.getGdprApplies() == null) {
                 mPersonalInfoData.setGdprApplies(response.isGdprRegion());
             }
+            if (response.isForceGdprApplies()) {
+                mForceGdprAppliesChanged = true;
+                mPersonalInfoData.setForceGdprApplies(true);
+                final boolean newCanCollectPersonalInformation = canCollectPersonalInformation();
+                if (oldCanCollectPersonalInformation != newCanCollectPersonalInformation) {
+                    fireOnConsentStateChangeListeners(mPersonalInfoData.getConsentStatus(),
+                            mPersonalInfoData.getConsentStatus(), newCanCollectPersonalInformation);
+                }
+            }
+
             mPersonalInfoData.setLastChangedMs("" + mSyncRequestEpochTime);
             mPersonalInfoData.setLastSuccessfullySyncedConsentStatus(mSyncRequestConsentStatus);
             mPersonalInfoData.setWhitelisted(response.isWhitelisted());
@@ -663,13 +691,21 @@ public void onReacquireConsent(@Nullable final String consentChangeReason) {
 
         @Override
         public void onForceGdprApplies() {
-            if (mPersonalInfoData.isForceGdprApplies()) {
-                return;
-            }
-            mPersonalInfoData.setForceGdprApplies(true);
-            mPersonalInfoData.writeToDisk();
-            mForceGdprAppliesChanged = true;
-            requestSync(true);
+            forceGdprApplies();
         }
     }
+
+    @NonNull
+    @Deprecated
+    @VisibleForTesting
+    PersonalInfoData getPersonalInfoData() {
+        return mPersonalInfoData;
+    }
+
+    @NonNull
+    @Deprecated
+    @VisibleForTesting
+    AdRequest.ServerOverrideListener getServerOverrideListener() {
+        return mServerOverrideListener;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java
index c4395a46..be7cbf45 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java
@@ -248,8 +248,14 @@ public static boolean isPermissionGranted(@NonNull final Context context,
         Preconditions.checkNotNull(context);
         Preconditions.checkNotNull(permission);
 
-        return ContextCompat.checkSelfPermission(context, permission) ==
-                PackageManager.PERMISSION_GRANTED;
+        // Bug in ContextCompat where it can return a RuntimeException in rare circumstances.
+        // If this happens, then we return false.
+        try {
+            return ContextCompat.checkSelfPermission(context, permission) ==
+                    PackageManager.PERMISSION_GRANTED;
+        } catch (Exception e) {
+            return false;
+        }
     }
 
     /**
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
index 77a8d5f4..c845fd9d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
@@ -72,6 +72,8 @@
 
     // MoPub-specific metadata
     private String mDspCreativeId;
+    private String mPrivacyInformationIconImageUrl;
+    private String mPrivacyInformationIconClickthroughUrl;
 
     /**
      * Flag to indicate if the VAST xml document has explicitly set the orientation as opposed to
@@ -339,6 +341,16 @@ public void setIsRewardedVideo(final boolean isRewardedVideo) {
         mIsRewardedVideo = isRewardedVideo;
     }
 
+    public void setPrivacyInformationIconImageUrl(
+            @Nullable final String privacyInformationIconImageUrl) {
+        mPrivacyInformationIconImageUrl = privacyInformationIconImageUrl;
+    }
+
+    public void setPrivacyInformationIconClickthroughUrl(
+            @Nullable final String privacyInformationIconClickthroughUrl) {
+        mPrivacyInformationIconClickthroughUrl = privacyInformationIconClickthroughUrl;
+    }
+
     /**
      * Getters
      */
@@ -513,6 +525,16 @@ public boolean isRewardedVideo() {
         return mIsRewardedVideo;
     }
 
+    @Nullable
+    public String getPrivacyInformationIconImageUrl() {
+        return mPrivacyInformationIconImageUrl;
+    }
+
+    @Nullable
+    public String getPrivacyInformationIconClickthroughUrl() {
+        return mPrivacyInformationIconClickthroughUrl;
+    }
+
     /**
      * Called when the video starts playing.
      *
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
index fac9a035..23aa9f40 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
@@ -13,7 +13,6 @@
 import com.mopub.common.MoPub;
 import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.Preconditions;
-import com.mopub.common.SdkConfiguration;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.privacy.PersonalInfoManager;
@@ -70,7 +69,7 @@ public AdRequest(@NonNull final String url,
             @Nullable final String adUnitId,
             @NonNull Context context,
             @NonNull final Listener listener) {
-        super(context, url, listener);
+        super(context, clearUrlIfSdkNotInitialized(url), listener);
         Preconditions.checkNotNull(adFormat);
         Preconditions.checkNotNull(listener);
         mAdUnitId = adUnitId;
@@ -85,18 +84,26 @@ public AdRequest(@NonNull final String url,
         setShouldCache(false);
 
         final PersonalInfoManager personalInfoManager = MoPub.getPersonalInformationManager();
-        if (personalInfoManager == null) {
-            MoPubLog.e("Make sure you initialize the SDK before loading an ad. For now, the SDK " +
-                    "will be automatically initialized on your behalf. Starting from release " +
-                    "5.2.0, initialization will be a strict requirement, and ad requests " +
-                    "made with an uninitialized SDK will begin to fail.");
-            MoPub.initializeSdk(context,
-                    new SdkConfiguration.Builder(adUnitId == null ? "" : adUnitId).build(), null);
-        } else {
+        if (personalInfoManager != null) {
             personalInfoManager.requestSync(false);
         }
     }
 
+    /**
+     * For 5.2 and onwards, disable load when the sdk is not initialized.
+     *
+     * @param url The original url
+     * @return The original url if the sdk is initialized. Otherwise, returns an empty url.
+     */
+    @NonNull
+    private static String clearUrlIfSdkNotInitialized(@NonNull final String url) {
+        if (MoPub.getPersonalInformationManager() == null || !MoPub.isSdkInitialized()) {
+            MoPubLog.e("Make sure to call MoPub#initializeSdk before loading an ad.");
+            return "";
+        }
+        return url;
+    }
+
     @NonNull
     public Listener getListener() {
         return mListener;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequest.java
index b888c4a0..44c910a5 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequest.java
@@ -5,6 +5,7 @@
 import android.support.annotation.Nullable;
 
 import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
 import com.mopub.volley.NetworkResponse;
 import com.mopub.volley.Request;
 import com.mopub.volley.Response;
@@ -26,8 +27,8 @@
     @NonNull private final Context mContext;
 
     public MoPubRequest(@NonNull final Context context,
-            @NonNull final String url,
-            @Nullable final Response.ErrorListener listener) {
+                        @NonNull final String url,
+                        @Nullable final Response.ErrorListener listener) {
         super(MoPubRequestUtils.chooseMethod(url), MoPubRequestUtils.truncateQueryParamsIfPost(url),
                 listener);
 
@@ -73,4 +74,10 @@ protected String parseStringBody(@NonNull final NetworkResponse response) {
         }
         return parsed;
     }
+
+    @VisibleForTesting
+    @NonNull
+    public String getOriginalUrl() {
+        return mOriginalUrl;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
index 68209727..d5174d12 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.text.TextUtils;
 import android.view.View;
 
 import com.mopub.common.DataKeys;
@@ -97,7 +98,10 @@ protected void loadNativeAd(@NonNull final Context context,
             CLICK_DESTINATION("clk", false),
             FALLBACK("fallback", false),
             CALL_TO_ACTION("ctatext", false),
-            STAR_RATING("starrating", false);
+            STAR_RATING("starrating", false),
+
+            PRIVACY_INFORMATION_ICON_IMAGE_URL("privacyicon", false),
+            PRIVACY_INFORMATION_ICON_CLICKTHROUGH_URL("privacyclkurl", false);
 
             @NonNull final String name;
             final boolean required;
@@ -171,7 +175,9 @@ void loadAd() throws IllegalArgumentException {
                     addExtra(key, mJsonObject.opt(key));
                 }
             }
-            setPrivacyInformationIconClickThroughUrl(PRIVACY_INFORMATION_CLICKTHROUGH_URL);
+            if (TextUtils.isEmpty(getPrivacyInformationIconClickThroughUrl())) {
+                setPrivacyInformationIconClickThroughUrl(PRIVACY_INFORMATION_CLICKTHROUGH_URL);
+            }
 
             preCacheImages(mContext, getAllImageUrls(), new ImageListener() {
                 @Override
@@ -227,6 +233,12 @@ private void addInstanceVariable(@NonNull final Parameter key,
                     case STAR_RATING:
                         setStarRating(parseDouble(value));
                         break;
+                    case PRIVACY_INFORMATION_ICON_IMAGE_URL:
+                        setPrivacyInformationIconImageUrl((String) value);
+                        break;
+                    case PRIVACY_INFORMATION_ICON_CLICKTHROUGH_URL:
+                        setPrivacyInformationIconClickThroughUrl((String) value);
+                        break;
                     default:
                         MoPubLog.d("Unable to add JSON key to internal mapping: " + key.name);
                         break;
@@ -267,13 +279,15 @@ private boolean isImageKey(@Nullable final String name) {
         @NonNull
         List<String> getAllImageUrls() {
             final List<String> imageUrls = new ArrayList<String>();
-            if (getMainImageUrl() != null) {
+            if (!TextUtils.isEmpty(getMainImageUrl())) {
                 imageUrls.add(getMainImageUrl());
             }
-            if (getIconImageUrl() != null) {
+            if (!TextUtils.isEmpty(getIconImageUrl())) {
                 imageUrls.add(getIconImageUrl());
             }
-
+            if (!TextUtils.isEmpty(getPrivacyInformationIconImageUrl())) {
+                imageUrls.add(getPrivacyInformationIconImageUrl());
+            }
             imageUrls.addAll(getExtrasImageUrls());
             return imageUrls;
         }
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
index f8d96697..fa9b3ee3 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
@@ -101,7 +101,9 @@ protected void loadNativeAd(@NonNull final Context context,
             CLICK_DESTINATION("clk", false),
             FALLBACK("fallback", false),
             CALL_TO_ACTION("ctatext", false),
-            VAST_VIDEO("video", false);
+            VAST_VIDEO("video", false),
+            PRIVACY_INFORMATION_ICON_IMAGE_URL("privacyicon", false),
+            PRIVACY_INFORMATION_ICON_CLICKTHROUGH_URL("privacyclkurl", false);
 
             @NonNull final String mName;
             final boolean mRequired;
@@ -256,7 +258,9 @@ void loadAd() throws IllegalArgumentException {
                     addExtra(key, mJsonObject.opt(key));
                 }
             }
-            setPrivacyInformationIconClickThroughUrl(PRIVACY_INFORMATION_CLICKTHROUGH_URL);
+            if (TextUtils.isEmpty(getPrivacyInformationIconClickThroughUrl())) {
+                setPrivacyInformationIconClickThroughUrl(PRIVACY_INFORMATION_CLICKTHROUGH_URL);
+            }
 
             preCacheImages(mContext, getAllImageUrls(), new NativeImageHelper.ImageListener() {
                 @Override
@@ -327,6 +331,10 @@ public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideo
                 visibilityTrackingEvents.add(vastVisibilityTrackingEvent);
             }
 
+            mVastVideoConfig.setPrivacyInformationIconImageUrl(getPrivacyInformationIconImageUrl());
+            mVastVideoConfig.setPrivacyInformationIconClickthroughUrl(
+                    getPrivacyInformationIconClickThroughUrl());
+
             Set<String> clickTrackers = new HashSet<String>();
             clickTrackers.add(mMoPubClickTrackingUrl);
             clickTrackers.addAll(getClickTrackers());
@@ -398,6 +406,12 @@ private void addInstanceVariable(@NonNull final Parameter key,
                     case VAST_VIDEO:
                         setVastVideo((String) value);
                         break;
+                    case PRIVACY_INFORMATION_ICON_IMAGE_URL:
+                        setPrivacyInformationIconImageUrl((String) value);
+                        break;
+                    case PRIVACY_INFORMATION_ICON_CLICKTHROUGH_URL:
+                        setPrivacyInformationIconClickThroughUrl((String) value);
+                        break;
                     default:
                         MoPubLog.d("Unable to add JSON key to internal mapping: " + key.mName);
                         break;
@@ -767,12 +781,15 @@ private boolean isImageKey(@Nullable final String name) {
         @NonNull
         private List<String> getAllImageUrls() {
             final List<String> imageUrls = new ArrayList<String>();
-            if (getMainImageUrl() != null) {
+            if (!TextUtils.isEmpty(getMainImageUrl())) {
                 imageUrls.add(getMainImageUrl());
             }
-            if (getIconImageUrl() != null) {
+            if (!TextUtils.isEmpty(getIconImageUrl())) {
                 imageUrls.add(getIconImageUrl());
             }
+            if (!TextUtils.isEmpty(getPrivacyInformationIconImageUrl())) {
+                imageUrls.add(getPrivacyInformationIconImageUrl());
+            }
 
             imageUrls.addAll(getExtrasImageUrls());
             return imageUrls;
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
index eb3a94ff..9b23cb26 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
@@ -65,7 +65,8 @@
     @VisibleForTesting final int mPlayControlSizePx;
     @VisibleForTesting final int mGradientStripHeightPx;
 
-    public NativeFullScreenVideoView(@NonNull final Context context, int orientation, @Nullable String ctaText) {
+    public NativeFullScreenVideoView(@NonNull final Context context, int orientation,
+            @Nullable String ctaText) {
         this(context, orientation, ctaText,
                 new ImageView(context),
                 new TextureView(context), new ProgressBar(context), new ImageView(context),
@@ -185,8 +186,6 @@ public NativeFullScreenVideoView(@NonNull final Context context, int orientation
 
         mPrivacyInformationIcon = privacyInformationIcon;
         mPrivacyInformationIcon.setId((int) Utils.generateUniqueId());
-        mPrivacyInformationIcon.setImageDrawable(
-                Drawables.NATIVE_PRIVACY_INFORMATION_ICON.createDrawable(context));
         mPrivacyInformationIcon.setPadding(mClosePaddingPx, mClosePaddingPx, mClosePaddingPx * 2,
                 mClosePaddingPx * 2);
         addView(mPrivacyInformationIcon);
@@ -256,6 +255,15 @@ public void setPrivacyInformationClickListener(
         mPrivacyInformationIcon.setOnClickListener(privacyInformationListener);
     }
 
+    public void setPrivacyInformationIconImageUrl(@Nullable final String privacyInformationIconImageUrl) {
+        if (TextUtils.isEmpty(privacyInformationIconImageUrl)) {
+            mPrivacyInformationIcon.setImageDrawable(
+                    Drawables.NATIVE_PRIVACY_INFORMATION_ICON.createDrawable(mPrivacyInformationIcon.getContext()));
+        } else {
+            NativeImageHelper.loadImageView(privacyInformationIconImageUrl, mPrivacyInformationIcon);
+        }
+    }
+
     public void setCtaClickListener(@Nullable OnClickListener ctaListener) {
         mCtaButton.setOnClickListener(ctaListener);
     }
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
index e98c9b1f..eb4684a3 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
@@ -9,6 +9,7 @@
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.text.TextUtils;
 import android.view.TextureView;
 import android.view.View;
 import android.view.ViewGroup.LayoutParams;
@@ -124,11 +125,16 @@ public void onClick(View v) {
             public void onClick(View v) {
                 mNativeVideoController.setPlayWhenReady(false);
                 mCachedVideoFrame = mFullScreenVideoView.getTextureView().getBitmap();
+                String url = mVastVideoConfig.getPrivacyInformationIconClickthroughUrl();
+                if (TextUtils.isEmpty(url)) {
+                    url = MoPubVideoNativeAd.PRIVACY_INFORMATION_CLICKTHROUGH_URL;
+                }
                 new UrlHandler.Builder().withSupportedUrlActions(UrlAction.OPEN_IN_APP_BROWSER)
-                        .build().handleUrl(getContext(),
-                        MoPubVideoNativeAd.PRIVACY_INFORMATION_CLICKTHROUGH_URL);
+                        .build().handleUrl(getContext(), url);
             }
         });
+        mFullScreenVideoView.setPrivacyInformationIconImageUrl(
+                mVastVideoConfig.getPrivacyInformationIconImageUrl());
 
         final LayoutParams adViewLayout =
                 new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java
index 97d19869..acd46822 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java
@@ -66,6 +66,12 @@ public String getCallToAction() {
         return mCallToAction;
     }
 
+    /**
+     * Returns the Privacy Information clickthrough url
+     *
+     * @return String representing the Privacy Information Icon clickthrough url, or {@code null}
+     * if not set.
+     */
     @Nullable
     public String getPrivacyInformationIconClickThroughUrl() {
         return mPrivacyInformationIconClickThroughUrl;
diff --git a/mopub-sdk/pom.xml b/mopub-sdk/pom.xml
deleted file mode 100644
index 011a3234..00000000
--- a/mopub-sdk/pom.xml
+++ /dev/null
@@ -1,105 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-
-    <parent>
-        <groupId>com.mopub.mobileads</groupId>
-        <artifactId>mopub-android</artifactId>
-        <version>1.0</version>
-    </parent>
-
-    <artifactId>mopub-sdk</artifactId>
-    <version>1.0.0-SNAPSHOT</version>
-    <packaging>aar</packaging>
-    <name>MoPub SDK</name>
-    <description>The SDK for MoPub developers.</description>
-
-    <dependencies>
-
-        <!--main-->
-        <dependency>
-            <groupId>com.android.support</groupId>
-            <artifactId>support-annotations</artifactId>
-            <version>23.1.1</version>
-        </dependency>
-
-        <dependency>
-            <groupId>com.android.support</groupId>
-            <artifactId>support-v4</artifactId>
-            <version>23.1.1</version>
-            <type>aar</type>
-        </dependency>
-
-        <dependency>
-            <groupId>com.android.support</groupId>
-            <artifactId>recyclerview-v7</artifactId>
-            <version>23.1.1</version>
-            <type>aar</type>
-        </dependency>
-        
-        <dependency>
-            <groupId>com.mopub.volley</groupId>
-            <artifactId>mopub-volley</artifactId>
-            <version>1.1.0</version>
-        </dependency>
-
-        <dependency>
-            <groupId>com.google.android.exoplayer</groupId>
-            <artifactId>exoplayer</artifactId>
-            <version>r1.5.6</version>
-            <type>aar</type>
-        </dependency>
-
-        <!--android & oobolectric-->
-        <dependency>
-            <groupId>com.google.android</groupId>
-            <artifactId>android</artifactId>
-            <version>4.4.2</version>
-            <scope>provided</scope>
-        </dependency>
-    </dependencies>
-
-    <build>
-        <finalName>${project.artifactId}</finalName>
-
-        <plugins>
-            <plugin>
-                <artifactId>maven-compiler-plugin</artifactId>
-                <version>2.3.2</version>
-                <!-- Skip tests. We use Gradle to build and run tests. -->
-                <executions>
-                    <execution>
-                        <id>default-testCompile</id>
-                        <phase>test-compile</phase>
-                        <goals>
-                            <goal>testCompile</goal>
-                        </goals>
-                        <configuration>
-                            <skip>true</skip>
-                        </configuration>
-                    </execution>
-                </executions>
-                <configuration>
-                    <source>7</source>
-                    <target>7</target>
-                </configuration>
-            </plugin>
-            <plugin>
-                <groupId>com.simpligility.maven.plugins</groupId>
-                <artifactId>android-maven-plugin</artifactId>
-                <version>4.2.0</version>
-                <configuration>
-                    <androidManifestFile>AndroidManifest.xml</androidManifestFile>
-                    <resourceDirectory>res</resourceDirectory>
-                    <sdk>
-                        <!-- platform or api level (api level 4 = platform 1.6)-->
-                        <platform>22</platform>
-                    </sdk>
-                    <undeployBeforeDeploy>true</undeployBeforeDeploy>
-                </configuration>
-                <extensions>true</extensions>
-            </plugin>
-        </plugins>
-    </build>
-</project>
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index d0048b50..d808ee9b 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -1,17 +1,16 @@
 apply plugin: 'com.android.library'
 
 repositories {
-    mavenCentral()
+    google()
     jcenter()
     flatDir {
         dirs project(':mopub-sdk').file('../libs')
     }
     maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
-    maven { url 'https://maven.google.com' }
 }
 
 project.group = 'com.mopub'
-project.version = '5.1.0'
+project.version = '5.2.0'
 
 android {
     compileSdkVersion 26
@@ -20,7 +19,7 @@ android {
     useLibrary 'org.apache.http.legacy'
 
     defaultConfig {
-        versionCode 61
+        versionCode 62
         versionName version
         minSdkVersion 16
         targetSdkVersion 26
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
index 6e7e0060..d6608042 100644
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=5.1.0+kit
+fabric-version=5.2.0+kit
 fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
index 0bab926e..8d0a3f25 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
@@ -40,6 +40,7 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 import static org.powermock.api.mockito.PowerMockito.mock;
 import static org.powermock.api.mockito.PowerMockito.mockStatic;
@@ -153,7 +154,7 @@ public void initializeSdk_withRewardedVideo_shouldCallMoPubRewardedVideoManager(
                 new SdkConfiguration.Builder(INIT_ADUNIT).build(),
                 mockInitializationListener);
 
-        org.mockito.Mockito.verify(mockInitializationListener).onInitializationFinished();
+        verify(mockInitializationListener).onInitializationFinished();
         verifyStatic();
         MoPubRewardedVideoManager.init(mActivity, mMediationSettings);
     }
@@ -164,7 +165,7 @@ public void initializeSdk_withRewardedVideo_withMediationSettings_shouldCallMoPu
                 new SdkConfiguration.Builder(INIT_ADUNIT).withMediationSettings(mMediationSettings).build(),
                 mockInitializationListener);
 
-        org.mockito.Mockito.verify(mockInitializationListener).onInitializationFinished();
+        verify(mockInitializationListener).onInitializationFinished();
         verifyStatic();
         MoPubRewardedVideoManager.init(mActivity, mMediationSettings);
     }
@@ -188,7 +189,7 @@ public void initializeSdk_withRewardedVideo_withNetworksToInit_shouldCallMoPubRe
                         .build(),
                 mockInitializationListener);
 
-        org.mockito.Mockito.verify(mockInitializationListener).onInitializationFinished();
+        verify(mockInitializationListener).onInitializationFinished();
         List<Class<? extends CustomEventRewardedVideo>> classList = new ArrayList<>();
         classList.add(TestCustomEventRewardedVideo.class);
         classList.add(TestInheritedCustomEventRewardedVideo.class);
@@ -217,6 +218,7 @@ public void initializeSdk_withRewardedVideo_withoutActivity_shouldNotCallMoPubRe
 
         verifyStatic(times(2));
         MoPubRewardedVideoManager.init(mActivity, mMediationSettings);
+        verify(mockInitializationListener);
     }
 
     @Test
@@ -292,7 +294,7 @@ public void initializeSdk_withCallbackSet_shouldCallCallback() throws Exception
         MoPub.initializeSdk(mActivity, new SdkConfiguration.Builder(
                 INIT_ADUNIT).build(), mockInitializationListener);
 
-        org.mockito.Mockito.verify(mockInitializationListener).onInitializationFinished();
+        verify(mockInitializationListener).onInitializationFinished();
     }
 
     private static class AdvancedBidderTestClass implements MoPubAdvancedBidder {
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogActivityTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogActivityTest.java
index 51b2048d..857c5370 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogActivityTest.java
@@ -1,6 +1,7 @@
 package com.mopub.common.privacy;
 
 import android.app.Activity;
+import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
 import android.os.Handler;
@@ -8,7 +9,6 @@
 import android.widget.FrameLayout;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Reflection;
 import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
@@ -18,12 +18,11 @@
 import org.robolectric.android.controller.ActivityController;
 import org.robolectric.annotation.Config;
 
-import java.lang.reflect.Field;
-
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.junit.Assert.assertNotNull;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
@@ -31,29 +30,36 @@
 public class ConsentDialogActivityTest {
     private static final String HTML = "some_html";
 
-    private Context context;
+    private Context mContext;
 
     private ActivityController<ConsentDialogActivity> activityController;
     private ConsentDialogActivity subject;
-    private Intent intent;
 
     @Before
     public void setUp() throws Exception {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        intent = ConsentDialogActivity.createIntent(context, HTML);
+        mContext = Robolectric.buildActivity(Activity.class).create().get();
         activityController = Robolectric.buildActivity(ConsentDialogActivity.class);
     }
 
+    @Test
+    public void start_withValidParameters_shouldStartActivity() {
+        Context context = spy(mContext);
+        ConsentDialogActivity.start(context, HTML);
+        verify(context).startActivity(any(Intent.class));
+    }
+
     @Test
     public void createIntent_correctParameters_shouldCreateValidIntent() {
-        intent = ConsentDialogActivity.createIntent(context, HTML);
+        Intent intent = ConsentDialogActivity.createIntent(mContext, HTML);
         assertThat(intent.getStringExtra("html-page-content")).isEqualTo(HTML);
-        assertThat(intent.getComponent()).isNotNull();
-        assertThat(intent.getComponent().getClassName()).isEqualTo(ConsentDialogActivity.class.getCanonicalName());
+        ComponentName componentName = intent.getComponent();
+        assertNotNull(componentName);
+        assertThat(componentName.getClassName()).isEqualTo(ConsentDialogActivity.class.getCanonicalName());
     }
 
     @Test
     public void onCreate_shouldSetContentView() {
+        Intent intent = ConsentDialogActivity.createIntent(mContext, HTML);
         subject = activityController.get();
         subject.setIntent(intent);
         subject.onCreate(null);
@@ -63,44 +69,39 @@ public void onCreate_shouldSetContentView() {
     }
 
     @Test
-    public void setCloseButtonVisible_shouldCallViewAndClearHandler() throws NoSuchFieldException, IllegalAccessException {
+    public void setCloseButtonVisible_shouldCallViewAndClearHandler() {
         subject = activityController.create().get();
 
         Handler handler = mock(Handler.class);
         ConsentDialogLayout dialogLayout = mock(ConsentDialogLayout.class);
 
-        Field fieldHandler = Reflection.getPrivateField(ConsentDialogActivity.class, "mCloseButtonHandler");
-        fieldHandler.set(subject, handler);
-
-        Field fieldLayout = Reflection.getPrivateField(ConsentDialogActivity.class, "mView");
-        fieldLayout.set(subject, dialogLayout);
+        subject.mCloseButtonHandler = handler;
+        subject.mView = dialogLayout;
 
         subject.setCloseButtonVisibility(true);
 
-        verify(handler, times(1)).removeCallbacks(any(Runnable.class));
-        verify(dialogLayout, times(1)).setCloseVisible(true);
+        verify(handler).removeCallbacks(any(Runnable.class));
+        verify(dialogLayout).setCloseVisible(true);
     }
 
     @Test
-    public void setCloseButtonInvisible_shouldCallViewAndClearHandler() throws NoSuchFieldException, IllegalAccessException {
+    public void setCloseButtonInvisible_shouldCallViewAndClearHandler() {
         subject = activityController.create().get();
 
         Handler handler = mock(Handler.class);
         ConsentDialogLayout dialogLayout = mock(ConsentDialogLayout.class);
 
-        Field fieldHandler = Reflection.getPrivateField(ConsentDialogActivity.class, "mCloseButtonHandler");
-        fieldHandler.set(subject, handler);
-
-        Field fieldLayout = Reflection.getPrivateField(ConsentDialogActivity.class, "mView");
-        fieldLayout.set(subject, dialogLayout);
+        subject.mCloseButtonHandler = handler;
+        subject.mView = dialogLayout;
 
         subject.setCloseButtonVisibility(false);
 
-        verify(handler, times(1)).removeCallbacks(any(Runnable.class));
-        verify(dialogLayout, times(1)).setCloseVisible(false);
+        verify(handler).removeCallbacks(any(Runnable.class));
+        verify(dialogLayout).setCloseVisible(false);
     }
 
     private FrameLayout getContentView() {
         return (FrameLayout) ((ViewGroup) subject.findViewById(android.R.id.content)).getChildAt(0);
     }
+
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogControllerTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogControllerTest.java
index 644886ff..3555f355 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogControllerTest.java
@@ -3,11 +3,12 @@
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
-import android.support.v4.app.SupportActivity;
+import android.net.Uri;
 
 import com.mopub.common.Constants;
+import com.mopub.common.MoPub;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Intents;
-import com.mopub.common.util.Reflection;
 import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.MoPubErrorCode;
 import com.mopub.network.MoPubNetworkError;
@@ -27,11 +28,8 @@
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.rule.PowerMockRule;
 import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-import java.lang.reflect.Field;
-
 import static com.mopub.network.MoPubNetworkError.Reason.BAD_BODY;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -40,14 +38,13 @@
 import static org.powermock.api.mockito.PowerMockito.verifyStatic;
 import static org.powermock.api.mockito.PowerMockito.when;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 @PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*", "org.json.*"})
 @PrepareForTest({Networking.class, Intents.class})
 public class ConsentDialogControllerTest {
     private static final String AD_UNIT_ID = "ad_unit_id";
-    private static final String MREADY = "mReady";
-    private static final String REQUEST_IN_FLIGHT = "mRequestInFlight";
+    private static final String HTML_TEXT = "html_text";
 
     @Rule
     public PowerMockRule rule = new PowerMockRule();
@@ -62,11 +59,11 @@
 
     @Before
     public void setup() {
-        Activity activity = Robolectric.buildActivity(SupportActivity.class).get();
+        Activity activity = Robolectric.buildActivity(Activity.class).get();
         Context context = activity.getApplicationContext();
         mockRequestQueue = Mockito.mock(MoPubRequestQueueTest.TestMoPubRequestQueue.class);
         mockDialogListener = Mockito.mock(ConsentDialogListener.class);
-        dialogResponse = new ConsentDialogResponse("html_text");
+        dialogResponse = new ConsentDialogResponse(HTML_TEXT);
         personalInfoData = new PersonalInfoData(context, AD_UNIT_ID);
 
         PowerMockito.mockStatic(Networking.class);
@@ -79,42 +76,44 @@ public void setup() {
     }
 
     @Test
-    public void loadConsentDialog_whenReadyIsFalse_whenRequestInFlightIsFalse_shouldAddRequestToNetworkQueue() throws Exception {
+    public void loadConsentDialog_whenReadyIsFalse_whenRequestInFlightIsFalse_shouldAddRequestToNetworkQueue() {
         ArgumentCaptor<ConsentDialogRequest> requestCaptor = ArgumentCaptor.forClass(ConsentDialogRequest.class);
 
         subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
 
-        assertThat(getFlag(subject, REQUEST_IN_FLIGHT)).isTrue();
+        assertThat(subject.mRequestInFlight).isTrue();
         verify(mockDialogListener, never()).onConsentDialogLoaded();
         verify(mockRequestQueue).add(requestCaptor.capture());
         ConsentDialogRequest request = requestCaptor.getValue();
-        assertThat(request.getUrl().indexOf(Constants.GDPR_CONSENT_HANDLER)).isNotNegative();
+        String originalUrl = request.getOriginalUrl();
+        String minUrl = generateTestUrl();
+        assertThat(minUrl).isEqualTo(originalUrl);
     }
 
     @Test
-    public void loadConsentDialog_whenReadyIsTrue_whenRequestInFlightIsFalse_shouldNotAddRequestToNetworkQueue() throws Exception {
-        setFlagReady(subject);
+    public void loadConsentDialog_whenReadyIsTrue_whenRequestInFlightIsFalse_shouldNotAddRequestToNetworkQueue() {
+        subject.mReady = true;
 
         subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
 
-        assertThat(getFlag(subject, REQUEST_IN_FLIGHT)).isFalse();
+        assertThat(subject.mRequestInFlight).isFalse();
         verify(mockDialogListener).onConsentDialogLoaded(); // should call listener immediately
         verify(mockRequestQueue, never()).add(any(ConsentDialogRequest.class));
     }
 
     @Test
-    public void loadConsentDialog_whenReadyIsTrue_witListenerNotSet_shouldNotCrash() throws Exception {
-        setFlagReady(subject);
+    public void loadConsentDialog_whenReadyIsTrue_withListenerNotSet_shouldNotCrash() {
+        subject.mReady = true;
 
         subject.loadConsentDialog(null, true, personalInfoData);
 
-        assertThat(getFlag(subject, REQUEST_IN_FLIGHT)).isFalse();
+        assertThat(subject.mRequestInFlight).isFalse();
         verify(mockRequestQueue, never()).add(any(ConsentDialogRequest.class));
     }
 
     @Test
-    public void loadConsentDialog_whenRequestInFlightIsTrue_shouldNotCreateNewRequest_shouldNotCallListener() throws Exception {
-        setFlagRequestInFlight(subject);
+    public void loadConsentDialog_whenRequestInFlightIsTrue_shouldNotCreateNewRequest_shouldNotCallListener() {
+        subject.mRequestInFlight = true;
 
         subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
 
@@ -123,45 +122,45 @@ public void loadConsentDialog_whenRequestInFlightIsTrue_shouldNotCreateNewReques
     }
 
     @Test
-    public void onSuccess_withValidResponse_shouldCallConsentDialogLoaded() throws Exception {
+    public void onSuccess_withValidResponse_shouldCallConsentDialogLoaded() {
         subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
         subject.onSuccess(dialogResponse);
 
-        assertThat(getFlag(subject, MREADY)).isTrue();
-        assertThat(getFlag(subject, REQUEST_IN_FLIGHT)).isFalse();
+        assertThat(subject.mReady).isTrue();
+        assertThat(subject.mRequestInFlight).isFalse();
         verify(mockDialogListener).onConsentDialogLoaded();
         verify(mockDialogListener, never()).onConsentDialogLoadFailed(any(MoPubErrorCode.class));
     }
 
     @Test
-    public void onSuccess_withEmptyResponse_shouldNotCallConsentDialogLoaded() throws Exception {
+    public void onSuccess_withEmptyResponse_shouldNotCallConsentDialogLoaded() {
         subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
         subject.onSuccess(new ConsentDialogResponse(""));
 
-        assertThat(getFlag(subject, MREADY)).isFalse();
-        assertThat(getFlag(subject, REQUEST_IN_FLIGHT)).isFalse();
+        assertThat(subject.mReady).isFalse();
+        assertThat(subject.mRequestInFlight).isFalse();
         verify(mockDialogListener, never()).onConsentDialogLoaded();
         verify(mockDialogListener).onConsentDialogLoadFailed(any(MoPubErrorCode.class));
     }
 
     @Test
-    public void onErrorResponse_shouldResetState_shouldCallDialogFailed() throws Exception {
+    public void onErrorResponse_shouldResetState_shouldCallDialogFailed() {
         subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
         subject.onErrorResponse(new VolleyError());
 
-        assertThat(getFlag(subject, MREADY)).isFalse();
-        assertThat(getFlag(subject, REQUEST_IN_FLIGHT)).isFalse();
+        assertThat(subject.mReady).isFalse();
+        assertThat(subject.mRequestInFlight).isFalse();
         verify(mockDialogListener, never()).onConsentDialogLoaded();
         verify(mockDialogListener).onConsentDialogLoadFailed(any(MoPubErrorCode.class));
     }
 
     @Test
-    public void onErrorResponse_withErrorBadBody_shouldResetState_shouldCallDialogFailed() throws Exception {
+    public void onErrorResponse_withErrorBadBody_shouldResetState_shouldCallDialogFailed() {
         subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
         subject.onErrorResponse(new MoPubNetworkError(BAD_BODY));
 
-        assertThat(getFlag(subject, MREADY)).isFalse();
-        assertThat(getFlag(subject, REQUEST_IN_FLIGHT)).isFalse();
+        assertThat(subject.mReady).isFalse();
+        assertThat(subject.mRequestInFlight).isFalse();
         verify(mockDialogListener, never()).onConsentDialogLoaded();
         verify(mockDialogListener).onConsentDialogLoadFailed(MoPubErrorCode.INTERNAL_ERROR);
     }
@@ -173,8 +172,8 @@ public void showConsentDialog_whenDataIsReady_shouldStartActivity_shouldResetCon
 
         subject.showConsentDialog();
 
-        assertThat(getFlag(subject, MREADY)).isFalse();
-        assertThat(getFlag(subject, REQUEST_IN_FLIGHT)).isFalse();
+        assertThat(subject.mReady).isFalse();
+        assertThat(subject.mRequestInFlight).isFalse();
         verifyStatic();
         Intents.startActivity(any(Context.class), any(Intent.class));
     }
@@ -186,25 +185,21 @@ public void showConsentDialog_whenDataIsNotReady_shouldNotStartActivity() throws
 
         subject.showConsentDialog();
 
-        assertThat(getFlag(subject, MREADY)).isFalse();
-        assertThat(getFlag(subject, REQUEST_IN_FLIGHT)).isFalse();
+        assertThat(subject.mReady).isFalse();
+        assertThat(subject.mRequestInFlight).isFalse();
         verifyStatic(never());
         Intents.startActivity(any(Context.class), any(Intent.class));
     }
 
     // test utils
-    private static void setFlagReady(ConsentDialogController target) throws Exception {
-        Field field = Reflection.getPrivateField(ConsentDialogController.class, MREADY);
-        field.setBoolean(target, true);
-    }
-
-    private static void setFlagRequestInFlight(ConsentDialogController target) throws Exception {
-        Field field = Reflection.getPrivateField(ConsentDialogController.class, REQUEST_IN_FLIGHT);
-        field.setBoolean(target, true);
-    }
-
-    private static boolean getFlag(ConsentDialogController target, final String fieldName) throws Exception {
-        Field field = Reflection.getPrivateField(ConsentDialogController.class, fieldName);
-        return field.getBoolean(target);
+    private String generateTestUrl() {
+        return "https://" + Constants.HOST + "/m/gdpr_consent_dialog" +
+                "?id=" + Uri.encode(AD_UNIT_ID) +
+                "&current_consent_status=unknown" +
+                "&nv=" + Uri.encode(MoPub.SDK_VERSION) +
+                "&language=en" +
+                "&gdpr_applies=1" +
+                "&force_gdpr_applies=0" +
+                "&bundle=com.mopub.mobileads";
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogUrlGeneratorTest.java
index 7aeff802..dd507068 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogUrlGeneratorTest.java
@@ -20,20 +20,29 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
+import java.util.Map;
+
+import static com.mopub.common.privacy.ConsentStatus.EXPLICIT_NO;
+import static com.mopub.common.privacy.ConsentStatus.EXPLICIT_YES;
+import static com.mopub.common.privacy.ConsentStatus.UNKNOWN;
+import static com.mopub.common.test.support.UrlSupport.HOST_KEY;
+import static com.mopub.common.test.support.UrlSupport.PATH_KEY;
+import static com.mopub.common.test.support.UrlSupport.SCHEME_KEY;
+import static com.mopub.common.test.support.UrlSupport.urlToMap;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 
+@SuppressWarnings("ConstantConditions")
 @RunWith(RobolectricTestRunner.class)
 @Config(constants = BuildConfig.class)
 @PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*", "org.json.*"})
 @PrepareForTest(ClientMetadata.class)
 public class ConsentDialogUrlGeneratorTest {
     private static final String AD_UNIT_ID = "ad_unit_id";
-    private static final String CONSENT_STATUS_UNKNOWN = ConsentStatus.UNKNOWN.getValue();
-    private static final String VERSION = MoPub.SDK_VERSION;
     private static final String CURRENT_LANGUAGE = "current_language";
-    private static final String FORCE_GDPR_APPLIES = "0";
     private static final String BUNDLE = "test.bundle";
+    private static final String POLICY_VERSION = "policy.version";
+    private static final String VENDOR_LIST_VERSION = "vendor.list.version";
 
     @Rule
     public PowerMockRule rule = new PowerMockRule();
@@ -54,25 +63,90 @@ public void setup() {
                 mockClientMetadata);
     }
 
+    @Test(expected = NullPointerException.class)
+    public void constructor_withContextNull_shouldThrowException() {
+        subject = new ConsentDialogUrlGenerator(null, AD_UNIT_ID, UNKNOWN.getValue());
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void constructor_withAdUnitIdlNull_shouldThrowException() {
+        subject = new ConsentDialogUrlGenerator(context, null, UNKNOWN.getValue());
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void constructor_withConsentStatusNull_shouldThrowException() {
+        subject = new ConsentDialogUrlGenerator(context, AD_UNIT_ID, null);
+    }
+
     @Test
-    public void generateUrlString_withValidAdUnitId_shouldGenerateValidUrl() {
+    public void generateUrlString_withMinimumParametersSet_shouldGenerateValidUrl() {
         String validUrl = createTestUrl();
 
-        subject = new ConsentDialogUrlGenerator(context, AD_UNIT_ID,
-                ConsentStatus.UNKNOWN.getValue());
+        subject = new ConsentDialogUrlGenerator(context, AD_UNIT_ID, UNKNOWN.getValue());
         String url = subject.generateUrlString(Constants.HOST);
-
         assertThat(url).isEqualTo(validUrl);
     }
 
+    @Test
+    public void generateUrlString_withAllParameters_shouldGenerateValidUrl() {
+        subject = new ConsentDialogUrlGenerator(context, AD_UNIT_ID, EXPLICIT_YES.getValue());
+        subject.withConsentedPrivacyPolicyVersion(POLICY_VERSION)
+                .withConsentedVendorListVersion(VENDOR_LIST_VERSION)
+                .withForceGdprApplies(true)
+                .withGdprApplies(true);
+
+        String url = subject.generateUrlString(Constants.HOST);
+        Map<String, String> map = urlToMap(url);
+
+        assertThat(map.get(HOST_KEY)).isEqualTo(Constants.HOST);
+        assertThat(map.get(SCHEME_KEY)).isEqualTo(Constants.HTTPS);
+        assertThat(map.get(PATH_KEY)).isEqualTo(Constants.GDPR_CONSENT_HANDLER);
+        assertThat(map.get("id")).isEqualTo(AD_UNIT_ID);
+        assertThat(map.get("current_consent_status")).isEqualTo(EXPLICIT_YES.getValue());
+        assertThat(map.get("nv")).isEqualTo(MoPub.SDK_VERSION);
+        assertThat(map.get("language")).isEqualTo(CURRENT_LANGUAGE);
+        assertThat(map.get("gdpr_applies")).isEqualTo("1");
+        assertThat(map.get("force_gdpr_applies")).isEqualTo("1");
+        assertThat(map.get("consented_vendor_list_version")).isEqualTo(VENDOR_LIST_VERSION);
+        assertThat(map.get("consented_privacy_policy_version")).isEqualTo(POLICY_VERSION);
+        assertThat(map.get("bundle")).isEqualTo(BUNDLE);
+        assertThat(map.size()).isEqualTo(12);
+    }
+
+    @Test
+    public void generateUrlString_withGdprAppliesNotSet_shouldNotIncludeGdprParam() {
+        subject = new ConsentDialogUrlGenerator(context, AD_UNIT_ID, EXPLICIT_NO.getValue());
+        subject.withConsentedPrivacyPolicyVersion(POLICY_VERSION)
+                .withConsentedVendorListVersion(VENDOR_LIST_VERSION)
+                .withForceGdprApplies(false);
+
+        String url = subject.generateUrlString(Constants.HOST);
+        Map<String, String> map = urlToMap(url);
+
+        assertThat(map.get(HOST_KEY)).isEqualTo(Constants.HOST);
+        assertThat(map.get(SCHEME_KEY)).isEqualTo(Constants.HTTPS);
+        assertThat(map.get(PATH_KEY)).isEqualTo(Constants.GDPR_CONSENT_HANDLER);
+        assertThat(map.get("id")).isEqualTo(AD_UNIT_ID);
+        assertThat(map.get("current_consent_status")).isEqualTo(EXPLICIT_NO.getValue());
+        assertThat(map.get("nv")).isEqualTo(MoPub.SDK_VERSION);
+        assertThat(map.get("language")).isEqualTo(CURRENT_LANGUAGE);
+        assertThat(map.get("gdpr_applies")).isEqualTo(null);
+        assertThat(map.get("force_gdpr_applies")).isEqualTo("0");
+        assertThat(map.get("consented_vendor_list_version")).isEqualTo(VENDOR_LIST_VERSION);
+        assertThat(map.get("consented_privacy_policy_version")).isEqualTo(POLICY_VERSION);
+        assertThat(map.get("bundle")).isEqualTo(BUNDLE);
+        assertThat(map.size()).isEqualTo(11);
+    }
+
     // unit test utils
     private String createTestUrl() {
         return "https://" + Constants.HOST + "/m/gdpr_consent_dialog" +
                 "?id=" + AD_UNIT_ID +
-                "&current_consent_status=" + CONSENT_STATUS_UNKNOWN +
-                "&nv=" + VERSION +
+                "&current_consent_status=" + UNKNOWN.getValue() +
+                "&nv=" + MoPub.SDK_VERSION +
                 "&language=" + CURRENT_LANGUAGE +
-                "&force_gdpr_applies=" + FORCE_GDPR_APPLIES +
+                "&force_gdpr_applies=" + "0" +
                 "&bundle=" + BUNDLE;
     }
+
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java
index b5de1cfa..fcddfac4 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java
@@ -20,7 +20,6 @@
 import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
-
 import org.powermock.modules.junit4.rule.PowerMockRule;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoManagerTest.java
index 7533b233..86a3fa65 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoManagerTest.java
@@ -1,35 +1,822 @@
 package com.mopub.common.privacy;
 
 import android.app.Activity;
+import android.content.Context;
+import android.os.SystemClock;
 
+import com.mopub.common.ClientMetadata;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.MoPubRequestQueueTest;
+import com.mopub.network.Networking;
+import com.mopub.volley.Request;
 
+import org.junit.After;
 import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.rule.PowerMockRule;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*", "org.json.*"})
 @Config(constants = BuildConfig.class)
+@PrepareForTest({ClientMetadata.class, Networking.class, AdvertisingId.class})
 public class PersonalInfoManagerTest {
 
-    Activity activity;
-    PersonalInfoManager subject;
+    private static int DEFAULT_TIME_MS = 300000;
+    private static int SHORT_TIME_MS = 150000;
+    private static int LONG_TIME_MS = 310000;
+
+    private Activity activity;
+    private PersonalInfoManager subject;
+    private PersonalInfoData personalInfoData;
+    private ConsentStatusChangeListener mockConsentStatusChangeListener;
+    private ClientMetadata mockClientMetadata;
+    private MoPubIdentifier mockMoPubIdentifier;
+    private AdvertisingId mockAdvertisingId;
+    private MoPubRequestQueue mockRequestQueue;
+
+    @Rule
+    public PowerMockRule rule = new PowerMockRule();
 
     @Before
     public void setUp() {
         activity = Robolectric.buildActivity(Activity.class).get();
+
+        PowerMockito.mockStatic(ClientMetadata.class);
+        mockClientMetadata = PowerMockito.mock(ClientMetadata.class);
+        mockMoPubIdentifier = mock(MoPubIdentifier.class);
+        mockAdvertisingId = PowerMockito.mock(AdvertisingId.class);
+        PowerMockito.when(mockAdvertisingId.getIfaWithPrefix()).thenReturn("udid");
+
+        PowerMockito.when(ClientMetadata.getInstance(any(Context.class))).thenReturn(
+                mockClientMetadata);
+        PowerMockito.when(mockClientMetadata.getMoPubIdentifier()).thenReturn(mockMoPubIdentifier);
+        when(mockMoPubIdentifier.getAdvertisingInfo()).thenReturn(mockAdvertisingId);
+
+        PowerMockito.mockStatic(Networking.class);
+        mockRequestQueue = mock(MoPubRequestQueueTest.TestMoPubRequestQueue2.class);
+        when(Networking.getRequestQueue(any(Context.class))).thenReturn(mockRequestQueue);
+        when(Networking.getScheme()).thenReturn("https");
+
+        subject = new PersonalInfoManager(activity, "adunit", null);
+        personalInfoData = subject.getPersonalInfoData();
+        mockConsentStatusChangeListener = mock(ConsentStatusChangeListener.class);
+        subject.subscribeConsentStatusChangeListener(mockConsentStatusChangeListener);
+    }
+
+    @After
+    public void tearDown() {
+        final PersonalInfoData personalInfoData = subject.getPersonalInfoData();
+        personalInfoData.setConsentStatus(ConsentStatus.UNKNOWN);
+        personalInfoData.setLastSuccessfullySyncedConsentStatus(null);
+        personalInfoData.setConsentChangeReason(null);
+        personalInfoData.setForceGdprApplies(false);
+        personalInfoData.setUdid(null);
+        personalInfoData.setLastChangedMs(null);
+        personalInfoData.setConsentStatusBeforeDnt(null);
+        personalInfoData.setWhitelisted(false);
+        personalInfoData.setCurrentVendorListVersion(null);
+        personalInfoData.setCurrentVendorListLink(null);
+        personalInfoData.setCurrentPrivacyPolicyVersion(null);
+        personalInfoData.setCurrentPrivacyPolicyLink(null);
+        personalInfoData.setCurrentVendorListIabFormat(null);
+        personalInfoData.setCurrentVendorListIabHash(null);
+        personalInfoData.setConsentedVendorListVersion(null);
+        personalInfoData.setConsentedPrivacyPolicyVersion(null);
+        personalInfoData.setConsentedVendorListIabFormat(null);
+        personalInfoData.setExtras(null);
+        personalInfoData.setShouldReacquireConsent(false);
+        personalInfoData.setGdprApplies(null);
+        personalInfoData.writeToDisk();
+    }
+
+    @Test
+    public void shouldShowConsentDialog_withGdprAppliesNull_shouldReturnFalse() {
+        subject.getPersonalInfoData().setGdprApplies(null);
+
+        final boolean actual = subject.shouldShowConsentDialog();
+
+        assertThat(actual).isFalse();
+    }
+
+    @Test
+    public void shouldShowConsentDialog_withGdprAppliesFalse_shouldReturnFalse() {
+        subject.getPersonalInfoData().setGdprApplies(false);
+
+        final boolean actual = subject.shouldShowConsentDialog();
+
+        assertThat(actual).isFalse();
+    }
+
+    @Test
+    public void shouldShowConsentDialog_withGdprAppliesTrue_withVariousConsentStatuses_shouldReturnCorrectValue() {
+        personalInfoData.setGdprApplies(true);
+
+        personalInfoData.setConsentStatus(ConsentStatus.UNKNOWN);
+        assertThat(subject.shouldShowConsentDialog()).isTrue();
+
+        personalInfoData.setConsentStatus(ConsentStatus.POTENTIAL_WHITELIST);
+        assertThat(subject.shouldShowConsentDialog()).isFalse();
+
+        personalInfoData.setConsentStatus(ConsentStatus.DNT);
+        assertThat(subject.shouldShowConsentDialog()).isFalse();
+
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_YES);
+        assertThat(subject.shouldShowConsentDialog()).isFalse();
+
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_NO);
+        assertThat(subject.shouldShowConsentDialog()).isFalse();
+    }
+
+    @Test
+    public void shouldShowConsentDialog_withGdprAppliesTrue_withShouldReacquireConsentTrue_withConsentStatusYes_withConsentStatusUnknown_shouldReturnTrue() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setShouldReacquireConsent(true);
+
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_YES);
+        assertThat(subject.shouldShowConsentDialog()).isTrue();
+
+        personalInfoData.setConsentStatus(ConsentStatus.UNKNOWN);
+        assertThat(subject.shouldShowConsentDialog()).isTrue();
+    }
+
+    @Test
+    public void shouldShowConsentDialog_withGdprAppliesTrue_withShouldReacquireConsentTrue_withConsentStatusNotYesOrUnknown_shouldReturnFalse() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setShouldReacquireConsent(true);
+
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_NO);
+        assertThat(subject.shouldShowConsentDialog()).isFalse();
+
+        personalInfoData.setConsentStatus(ConsentStatus.POTENTIAL_WHITELIST);
+        assertThat(subject.shouldShowConsentDialog()).isFalse();
+
+        personalInfoData.setConsentStatus(ConsentStatus.DNT);
+        assertThat(subject.shouldShowConsentDialog()).isFalse();
+    }
+
+    @Test
+    public void canCollectPersonalInformation_withGdprAppliesNull_shouldReturnFalse() {
+        personalInfoData.setGdprApplies(null);
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_YES);
+
+        final boolean actual = subject.canCollectPersonalInformation();
+
+        assertThat(actual).isFalse();
+    }
+
+    @Test
+    public void canCollectPersonalInformation_withGdprAppliesFalse_shouldReturnTrue() {
+        personalInfoData.setGdprApplies(false);
+
+        assertThat(subject.canCollectPersonalInformation()).isTrue();
+
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_NO);
+        assertThat(subject.canCollectPersonalInformation()).isTrue();
+
+        personalInfoData.setConsentStatus(ConsentStatus.DNT);
+        assertThat(subject.canCollectPersonalInformation()).isTrue();
+
+        personalInfoData.setConsentStatus(ConsentStatus.POTENTIAL_WHITELIST);
+        assertThat(subject.canCollectPersonalInformation()).isTrue();
+
+        personalInfoData.setWhitelisted(true);
+        assertThat(subject.canCollectPersonalInformation()).isTrue();
+
+        // It should not matter what is set. GdprApplies false means can collect personal information
+        personalInfoData.setConsentedVendorListIabFormat("abc");
+        assertThat(subject.canCollectPersonalInformation()).isTrue();
     }
 
     @Test
-    public void shouldMakeSyncRequest_withGdprAppliesNull_shouldReturnTrue() {
-        boolean actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, false, null, 300000,
+    public void gdprApplies_withForceGdprAppliesTrue_shouldReturnTrue() {
+        personalInfoData.setForceGdprApplies(true);
+
+        personalInfoData.setGdprApplies(null);
+        assertThat(subject.gdprApplies()).isTrue();
+
+        personalInfoData.setGdprApplies(true);
+        assertThat(subject.gdprApplies()).isTrue();
+
+        personalInfoData.setGdprApplies(false);
+        assertThat(subject.gdprApplies()).isTrue();
+
+        personalInfoData.setConsentStatus(ConsentStatus.DNT);
+        assertThat(subject.gdprApplies()).isTrue();
+    }
+
+    @Test
+    public void gdprApplies_withForceGdprAppliesFalse_shouldRespectGdprApplies() {
+        personalInfoData.setForceGdprApplies(false);
+
+        personalInfoData.setGdprApplies(null);
+        assertThat(subject.gdprApplies()).isNull();
+
+        personalInfoData.setGdprApplies(false);
+        assertThat(subject.gdprApplies()).isFalse();
+
+        personalInfoData.setGdprApplies(true);
+        assertThat(subject.gdprApplies()).isTrue();
+    }
+
+    @Test
+    public void forceGdprApplies_withGdprAppliesFalse_shouldForceGdprToTrue_shouldFiresOnConsentStatusChangeListeners() {
+        personalInfoData.setGdprApplies(false);
+        // Precondition just to verify gdprApplies is actually false for now
+        assertThat(subject.gdprApplies()).isFalse();
+        assertThat(subject.canCollectPersonalInformation()).isTrue();
+
+        subject.forceGdprApplies();
+
+        assertThat(subject.gdprApplies()).isTrue();
+        assertThat(personalInfoData.isForceGdprApplies()).isTrue();
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
+                ConsentStatus.UNKNOWN, false);
+    }
+
+    @Test
+    public void forceGdprApplies_withForceGdprAppliesAlreadySet_shouldDoNothing() {
+        personalInfoData.setGdprApplies(false);
+        personalInfoData.setForceGdprApplies(true);
+
+        subject.forceGdprApplies();
+
+        assertThat(subject.gdprApplies()).isTrue();
+        verifyZeroInteractions(mockConsentStatusChangeListener);
+    }
+
+    @Test
+    public void forceGdprApplies_withGdprAppliesTrue_shouldSetForceGdprApplies_shouldNotFireOnConsentStatusChangeListeners() {
+        personalInfoData.setGdprApplies(true);
+        // Precondition just to verify gdprApplies is actually true for now
+        assertThat(subject.gdprApplies()).isTrue();
+        assertThat(subject.canCollectPersonalInformation()).isFalse();
+
+        subject.forceGdprApplies();
+
+        assertThat(subject.gdprApplies()).isTrue();
+        assertThat(personalInfoData.isForceGdprApplies()).isTrue();
+        verifyZeroInteractions(mockConsentStatusChangeListener);
+    }
+
+    @Test
+    public void grantConsent_withWhitelistedApp_shouldTransitionToExplicitYes() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setWhitelisted(true);
+
+        subject.grantConsent();
+
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
+                ConsentStatus.EXPLICIT_YES, true);
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_YES);
+    }
+
+    @Test
+    public void grantConsent_withNonWhitelistedApp_shouldTransitionToPotentialWhitelist() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setWhitelisted(false);
+
+        subject.grantConsent();
+
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
+                ConsentStatus.POTENTIAL_WHITELIST, false);
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(
+                ConsentStatus.POTENTIAL_WHITELIST);
+    }
+
+    @Test
+    public void grantConsent_withDnt_shouldDoNothing() {
+        when(mockAdvertisingId.isDoNotTrack()).thenReturn(true);
+
+        subject.grantConsent();
+
+        verifyZeroInteractions(mockConsentStatusChangeListener);
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(
+                ConsentStatus.UNKNOWN);
+    }
+
+    @Test
+    public void revokeConsent_shouldSetConsentStatusToNo() {
+        subject.revokeConsent();
+
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
+                ConsentStatus.EXPLICIT_NO, false);
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(
+                ConsentStatus.EXPLICIT_NO);
+    }
+
+    @Test
+    public void revokeConsent_withDnt_shouldDoNothing() {
+        when(mockAdvertisingId.isDoNotTrack()).thenReturn(true);
+
+        subject.revokeConsent();
+
+        verifyZeroInteractions(mockConsentStatusChangeListener);
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(
+                ConsentStatus.UNKNOWN);
+    }
+
+    @Test
+    public void changeConsentStateFromDialog_withYes_shouldChangeStatusToExplicitYes() {
+        personalInfoData.setGdprApplies(true);
+
+        subject.changeConsentStateFromDialog(ConsentStatus.EXPLICIT_YES);
+
+        verify(mockRequestQueue).add(any(Request.class));
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_YES);
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo(
+                ConsentChangeReason.GRANTED_BY_USER.getReason());
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
+                ConsentStatus.EXPLICIT_YES, true);
+    }
+
+    @Test
+    public void changeConsentStateFromDialog_withNo_shouldChangeStatusToExplicitNo() {
+        personalInfoData.setGdprApplies(true);
+
+        subject.changeConsentStateFromDialog(ConsentStatus.EXPLICIT_NO);
+
+        verify(mockRequestQueue).add(any(Request.class));
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_NO);
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo(
+                ConsentChangeReason.DENIED_BY_USER.getReason());
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
+                ConsentStatus.EXPLICIT_NO, false);
+    }
+
+    @Test
+    public void shouldMakeSyncRequest_withMostMajorCases_shouldReturnCorrectBoolean() {
+        boolean actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, false, null, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, false, null, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, false, null, DEFAULT_TIME_MS,
+                "udid", false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, false, null, DEFAULT_TIME_MS,
+                "udid", true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, false,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
                 null, false);
+        assertThat(actual).isTrue();
 
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, false,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, false,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, false,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, true, null, DEFAULT_TIME_MS,
+                null, false);
         assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, true, null, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, true, null, DEFAULT_TIME_MS,
+                "udid", false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, true, null, DEFAULT_TIME_MS,
+                "udid", true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, true,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, true,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, true,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, true,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, false, null, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, false, null, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, false, null, DEFAULT_TIME_MS,
+                "udid", false);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, false, null, DEFAULT_TIME_MS,
+                "udid", true);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, false,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, false,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, false,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, false,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, true, null, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, true, null, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, true, null, DEFAULT_TIME_MS,
+                "udid", false);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, true, null, DEFAULT_TIME_MS,
+                "udid", true);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, true,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, true,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, true,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, true,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, false, null, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, false, null, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, false, null, DEFAULT_TIME_MS,
+                "udid", false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, false, null, DEFAULT_TIME_MS,
+                "udid", true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, false,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, false,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, false,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, false,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, true, null, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, true, null, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, true, null, DEFAULT_TIME_MS,
+                "udid", false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, true, null, DEFAULT_TIME_MS,
+                "udid", true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, true,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, true,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, true,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, true,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(true, true, false,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(true, true, true,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isFalse();
+    }
+
+    @Test
+    public void serverOverrideListener_onForceExplicitNo_withNullMessage_shouldChangeStatusToNo() {
+        personalInfoData.setGdprApplies(true);
+
+        subject.getServerOverrideListener().onForceExplicitNo(null);
+
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
+                ConsentStatus.EXPLICIT_NO, false);
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(
+                ConsentStatus.EXPLICIT_NO);
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo(
+                ConsentChangeReason.REVOKED_BY_SERVER.getReason());
+    }
+
+    @Test
+    public void serverOverrideListener_onForceExplicitNo_withAMessage_shouldChangeStatusToNo() {
+        personalInfoData.setGdprApplies(true);
+
+        subject.getServerOverrideListener().onForceExplicitNo("message");
+
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
+                ConsentStatus.EXPLICIT_NO, false);
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(
+                ConsentStatus.EXPLICIT_NO);
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo("message");
+    }
+
+    @Test
+    public void serverOverrideListener_onInvalidateConsent_withNullMessage_shouldChangeStatusToUnknown() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_YES);
+
+        subject.getServerOverrideListener().onInvalidateConsent(null);
+
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.EXPLICIT_YES,
+                ConsentStatus.UNKNOWN, false);
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(
+                ConsentStatus.UNKNOWN);
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo(
+                ConsentChangeReason.REACQUIRE_BY_SERVER.getReason());
+    }
+
+    @Test
+    public void serverOverrideListener_onInvalidateConsent_withAMessage_shouldChangeStatusToUnknown() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_YES);
+
+        subject.getServerOverrideListener().onInvalidateConsent("message");
+
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.EXPLICIT_YES,
+                ConsentStatus.UNKNOWN, false);
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(
+                ConsentStatus.UNKNOWN);
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo("message");
+    }
+
+    @Test
+    public void serverOverrideListener_onReacquireConsent_withNullMessage_shouldSetReacquireConsentFlag() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_YES);
+
+        subject.getServerOverrideListener().onReacquireConsent(null);
+
+        verifyZeroInteractions(mockConsentStatusChangeListener);
+        assertThat(personalInfoData.shouldReacquireConsent()).isTrue();
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_YES);
+        assertThat(personalInfoData.getConsentChangeReason()).isNull();
+    }
+
+    @Test
+    public void serverOverrideListener_onReacquireConsent_withAMessage_shouldSetReacquireConsentFlag_shouldSetConsentChangeReason() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_YES);
+
+        subject.getServerOverrideListener().onReacquireConsent("message");
+
+        verifyZeroInteractions(mockConsentStatusChangeListener);
+        assertThat(personalInfoData.shouldReacquireConsent()).isTrue();
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_YES);
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo("message");
+    }
+
+    @Test
+    public void serverOverrideListener_onForceGdprApplies_shouldForceGdprApplies() {
+        personalInfoData.setGdprApplies(false);
+
+        subject.getServerOverrideListener().onForceGdprApplies();
+
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
+                ConsentStatus.UNKNOWN, false);
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(
+                ConsentStatus.UNKNOWN);
+        assertThat(personalInfoData.isForceGdprApplies()).isTrue();
+        assertThat(subject.gdprApplies()).isTrue();
+    }
+
+    @Test
+    public void attemptStateTransition_withSameConsentStatus_shouldDoNothing() {
+        subject.attemptStateTransition(ConsentStatus.UNKNOWN, "no reason");
+
+        verifyZeroInteractions(mockConsentStatusChangeListener);
+
+        personalInfoData.setCurrentPrivacyPolicyVersion("2");
+        personalInfoData.setConsentedPrivacyPolicyVersion("1");
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_YES);
+        subject.attemptStateTransition(ConsentStatus.EXPLICIT_YES, "no reason");
+        verifyZeroInteractions(mockConsentStatusChangeListener);
+        assertThat(personalInfoData.getConsentedPrivacyPolicyVersion()).isEqualTo("1");
+    }
+
+    @Test
+    public void attemptStateTransition_withUnknownToYes_shouldSetConsentedVersions_shouldSetUdid() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setCurrentPrivacyPolicyVersion("1");
+        personalInfoData.setCurrentVendorListVersion("2");
+        personalInfoData.setCurrentVendorListIabFormat("3");
+
+        subject.attemptStateTransition(ConsentStatus.EXPLICIT_YES, "reason");
+
+        assertThat(personalInfoData.getConsentedPrivacyPolicyVersion()).isEqualTo("1");
+        assertThat(personalInfoData.getConsentedVendorListVersion()).isEqualTo("2");
+        assertThat(personalInfoData.getConsentedVendorListIabFormat()).isEqualTo("3");
+        assertThat(personalInfoData.getUdid()).isEqualTo("udid");
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo("reason");
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_YES);
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
+                ConsentStatus.EXPLICIT_YES, true);
+    }
+
+    @Test
+    public void attemptStateTransition_withPotentialWhitelistToYes_shouldNotSetConsentedVersions() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setConsentStatus(ConsentStatus.POTENTIAL_WHITELIST);
+        personalInfoData.setCurrentPrivacyPolicyVersion("1");
+        personalInfoData.setCurrentVendorListVersion("2");
+        personalInfoData.setCurrentVendorListIabFormat("3");
+
+        subject.attemptStateTransition(ConsentStatus.EXPLICIT_YES, "reason");
+
+        assertThat(personalInfoData.getConsentedPrivacyPolicyVersion()).isEqualTo(null);
+        assertThat(personalInfoData.getConsentedVendorListVersion()).isEqualTo(null);
+        assertThat(personalInfoData.getConsentedVendorListIabFormat()).isEqualTo(null);
+        assertThat(personalInfoData.getUdid()).isEqualTo("udid");
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo("reason");
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_YES);
+        verify(mockConsentStatusChangeListener).onConsentStateChange(
+                ConsentStatus.POTENTIAL_WHITELIST,
+                ConsentStatus.EXPLICIT_YES, true);
+    }
+
+    @Test
+    public void attemptStateTransition_withYesToDnt_shouldClearPersonalDataExceptUdid() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_YES);
+        personalInfoData.setConsentedPrivacyPolicyVersion("1");
+        personalInfoData.setConsentedVendorListVersion("2");
+        personalInfoData.setConsentedVendorListIabFormat("3");
+        personalInfoData.setUdid("udid");
+
+        subject.attemptStateTransition(ConsentStatus.DNT, "reason");
+
+        assertThat(personalInfoData.getConsentedPrivacyPolicyVersion()).isEqualTo(null);
+        assertThat(personalInfoData.getConsentedVendorListVersion()).isEqualTo(null);
+        assertThat(personalInfoData.getConsentedVendorListIabFormat()).isEqualTo(null);
+        assertThat(personalInfoData.getUdid()).isEqualTo("udid");
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo("reason");
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.DNT);
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.EXPLICIT_YES,
+                ConsentStatus.DNT, false);
+    }
+
+    @Test
+    public void attemptStateTransition_withUnknownToDnt() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_YES);
+        personalInfoData.setCurrentPrivacyPolicyVersion("1");
+        personalInfoData.setCurrentVendorListVersion("2");
+        personalInfoData.setCurrentVendorListIabFormat("3");
+
+        subject.attemptStateTransition(ConsentStatus.DNT, "reason");
+
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo("reason");
+        assertThat(personalInfoData.getConsentedPrivacyPolicyVersion()).isEqualTo(null);
+        assertThat(personalInfoData.getConsentedVendorListVersion()).isEqualTo(null);
+        assertThat(personalInfoData.getConsentedVendorListIabFormat()).isEqualTo(null);
+        assertThat(personalInfoData.getUdid()).isNull();
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.DNT);
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.EXPLICIT_YES,
+                ConsentStatus.DNT, false);
+    }
+
+    @Test
+    public void attemptStateTransition_withYesToNo_shouldClearPersonalDataExceptUdid() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_YES);
+        personalInfoData.setConsentedPrivacyPolicyVersion("1");
+        personalInfoData.setConsentedVendorListVersion("2");
+        personalInfoData.setConsentedVendorListIabFormat("3");
+        personalInfoData.setUdid("udid");
+
+        subject.attemptStateTransition(ConsentStatus.EXPLICIT_NO, "reason");
+
+        assertThat(personalInfoData.getConsentedPrivacyPolicyVersion()).isEqualTo(null);
+        assertThat(personalInfoData.getConsentedVendorListVersion()).isEqualTo(null);
+        assertThat(personalInfoData.getConsentedVendorListIabFormat()).isEqualTo(null);
+        assertThat(personalInfoData.getUdid()).isEqualTo("udid");
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo("reason");
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_NO);
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.EXPLICIT_YES,
+                ConsentStatus.EXPLICIT_NO, false);
+    }
+
+    @Test
+    public void attemptStateTransition_withUnknownToPotentialWhitelist_shouldSetConsentedVersions_shouldSetUdid() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setCurrentPrivacyPolicyVersion("1");
+        personalInfoData.setCurrentVendorListVersion("2");
+        personalInfoData.setCurrentVendorListIabFormat("3");
+
+        subject.attemptStateTransition(ConsentStatus.POTENTIAL_WHITELIST, "reason");
+
+        assertThat(personalInfoData.getConsentedPrivacyPolicyVersion()).isEqualTo("1");
+        assertThat(personalInfoData.getConsentedVendorListVersion()).isEqualTo("2");
+        assertThat(personalInfoData.getConsentedVendorListIabFormat()).isEqualTo("3");
+        assertThat(personalInfoData.getUdid()).isNull();
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo("reason");
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(
+                ConsentStatus.POTENTIAL_WHITELIST);
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
+                ConsentStatus.POTENTIAL_WHITELIST, false);
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/SyncUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/SyncUrlGeneratorTest.java
new file mode 100644
index 00000000..abd1f3e7
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/SyncUrlGeneratorTest.java
@@ -0,0 +1,133 @@
+package com.mopub.common.privacy;
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.mopub.common.ClientMetadata;
+import com.mopub.common.Constants;
+import com.mopub.common.MoPub;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.nativeads.NativeUrlGeneratorTest;
+import com.mopub.network.PlayServicesUrlRewriter;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.rule.PowerMockRule;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.powermock.api.mockito.PowerMockito.mock;
+import static org.powermock.api.mockito.PowerMockito.when;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*", "org.json.*"})
+@PrepareForTest(ClientMetadata.class)
+public class SyncUrlGeneratorTest {
+    private static final String APP_VERSION = "appVersion";
+    private static final String AD_UNIT = "adUnit";
+    private static final String UDID = "udid";
+    private static final String LAST_CHANGED_MS = "lastChangedMs";
+    private static final String CONSENT_CHANGE_REASON = "consentChangeReason";
+    private static final String CONSENTED_VENDOR_LIST_VERSION = "consentedVendorListVersion";
+    private static final String CONSENTED_PRIVACY_POLICY_VERSION = "consentedPrivacyPolicyVersion";
+    private static final String IAB_HASH = "iabHash";
+    private static final String EXTRAS = "extras";
+
+    private Context context;
+    private SyncUrlGenerator subject;
+
+    @Rule
+    public PowerMockRule rule = new PowerMockRule();
+
+    @Before
+    public void setUp() {
+        context = Robolectric.buildActivity(Activity.class).get();
+        subject = new SyncUrlGenerator(context, ConsentStatus.UNKNOWN.getValue());
+
+        ClientMetadata clientMetadata = mock(ClientMetadata.class);
+        when(clientMetadata.getAppVersion()).thenReturn(APP_VERSION);
+
+        PowerMockito.mockStatic(ClientMetadata.class);
+        when(ClientMetadata.getInstance(any(Context.class))).thenReturn(clientMetadata);
+    }
+
+    @Test
+    public void generateUrlString_withAllParams_shouldGenerateFullUrl() {
+        subject.withAdUnitId(AD_UNIT);
+        subject.withUdid(UDID);
+        subject.withGdprApplies(true);
+        subject.withForceGdprApplies(true);
+        subject.withForceGdprAppliesChanged(true);
+        subject.withLastChangedMs(LAST_CHANGED_MS);
+        subject.withLastConsentStatus(ConsentStatus.UNKNOWN);
+        subject.withConsentChangeReason(CONSENT_CHANGE_REASON);
+        subject.withConsentedVendorListVersion(CONSENTED_VENDOR_LIST_VERSION);
+        subject.withConsentedPrivacyPolicyVersion(CONSENTED_PRIVACY_POLICY_VERSION);
+        subject.withCachedVendorListIabHash(IAB_HASH);
+        subject.withExtras(EXTRAS);
+
+        final String url = subject.generateUrlString("hostname");
+
+        assertThat(url).startsWith(
+                Constants.HTTPS + "://" + "hostname" + Constants.GDPR_SYNC_HANDLER);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "id")).isEqualTo(AD_UNIT);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url, "nv")).isEqualTo(
+                MoPub.SDK_VERSION);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url, "udid")).isEqualTo(
+                UDID);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "current_consent_status")).isEqualTo(ConsentStatus.UNKNOWN.getValue());
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "gdpr_applies")).isEqualTo("1");
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "force_gdpr_applies")).isEqualTo("1");
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "forced_gdpr_applies_changed")).isEqualTo("1");
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "last_changed_ms")).isEqualTo(LAST_CHANGED_MS);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "consent_change_reason")).isEqualTo(CONSENT_CHANGE_REASON);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "consented_vendor_list_version")).isEqualTo(CONSENTED_VENDOR_LIST_VERSION);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "consented_privacy_policy_version")).isEqualTo(CONSENTED_PRIVACY_POLICY_VERSION);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "cached_vendor_list_iab_hash")).isEqualTo(IAB_HASH);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "extras")).isEqualTo(EXTRAS);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "dnt")).isEqualTo(PlayServicesUrlRewriter.DO_NOT_TRACK_TEMPLATE);
+    }
+
+    @Test
+    public void generateUrlString_withMinimumParams_shouldGenerateValidUrl() {
+        final String url = subject.generateUrlString("minurl");
+
+        assertThat(url).isEqualTo("https://minurl/m/gdpr_sync?nv=" + MoPub.SDK_VERSION +
+        "&current_consent_status=unknown&force_gdpr_applies=0&dnt=mp_tmpl_do_not_track");
+    }
+
+    @Test
+    public void generateUrlString_withExtrasThatShouldBeUrlEncoded_shouldGenerateValidUrl() {
+        subject = new SyncUrlGenerator(context, ConsentStatus.EXPLICIT_YES.getValue());
+        subject.withExtras("!@#$%^&*()_;'[]{}|\\");
+
+        final String url = subject.generateUrlString("host");
+
+        assertThat(url).isEqualTo("https://host/m/gdpr_sync?nv=" + MoPub.SDK_VERSION +
+                "&current_consent_status=explicit_yes" +
+                "&extras=!%40%23%24%25%5E%26*()_%3B'%5B%5D%7B%7D%7C%5C" +
+                "&force_gdpr_applies=0&dnt=mp_tmpl_do_not_track");
+    }
+
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/test/support/UrlSupport.java b/mopub-sdk/src/test/java/com/mopub/common/test/support/UrlSupport.java
new file mode 100644
index 00000000..49df0663
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/test/support/UrlSupport.java
@@ -0,0 +1,46 @@
+package com.mopub.common.test.support;
+
+import android.net.Uri;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class UrlSupport {
+    public static final String SCHEME_KEY = "$scheme_key";
+    public static final String USER_INFO_KEY = "$user_info_key";
+    public static final String HOST_KEY = "$host_key";
+    public static final String PORT_KEY = "$port_key";
+    public static final String PATH_KEY = "$path_key";
+    public static final String FRAGMENT_KEY = "$fragment_key";
+
+    public static Map<String, String> urlToMap(final String url) {
+        Map<String, String> map = new HashMap<>();
+        if (TextUtils.isEmpty(url)) {
+            return map;
+        }
+
+        final Uri uri = Uri.parse(url);
+        addPair(map, SCHEME_KEY, uri.getScheme());
+        addPair(map, USER_INFO_KEY, uri.getUserInfo());
+        addPair(map, HOST_KEY, uri.getHost());
+        addPair(map, PORT_KEY, uri.getPort() != -1 ? String.valueOf(uri.getPort()) : "");
+        addPair(map, PATH_KEY, uri.getPath());
+        addPair(map, FRAGMENT_KEY, uri.getFragment());
+
+        for (final String queryParam : uri.getQueryParameterNames()) {
+            map.put(queryParam, TextUtils.join(",", uri.getQueryParameters(queryParam)));
+        }
+        return map;
+    }
+
+    private static void addPair(@NonNull Map<String, String> map, @Nullable String key, @Nullable String value) {
+        if (TextUtils.isEmpty(key) || TextUtils.isEmpty(value)) {
+            return;
+        }
+
+        map.put(key, value);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
index 5e1751d7..886f0441 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
@@ -6,6 +6,7 @@
 import android.location.Location;
 import android.net.ConnectivityManager;
 import android.net.Uri;
+import android.telephony.TelephonyManager;
 import android.text.TextUtils;
 import android.view.Gravity;
 import android.view.View;
@@ -13,11 +14,14 @@
 
 import com.mopub.common.AdFormat;
 import com.mopub.common.MoPub;
+import com.mopub.common.SdkConfiguration;
 import com.mopub.common.privacy.ConsentStatus;
 import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Reflection;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
+import com.mopub.mobileads.test.support.MoPubShadowConnectivityManager;
+import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
 import com.mopub.mobileads.test.support.ThreadUtils;
 import com.mopub.network.AdRequest;
 import com.mopub.network.AdResponse;
@@ -62,7 +66,7 @@
 
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
+@Config(constants = BuildConfig.class, shadows = {MoPubShadowTelephonyManager.class, MoPubShadowConnectivityManager.class})
 public class AdViewControllerTest {
 
     private static final int[] HTML_ERROR_CODES = new int[]{400, 401, 402, 403, 404, 405, 407, 408,
@@ -72,6 +76,8 @@
     @Mock private MoPubView mockMoPubView;
     @Mock private MoPubRequestQueue mockRequestQueue;
     private Reflection.MethodBuilder methodBuilder;
+    private MoPubShadowTelephonyManager shadowTelephonyManager;
+    private MoPubShadowConnectivityManager shadowConnectivityManager;
 
     private AdResponse response;
     private Activity activity;
@@ -83,6 +89,8 @@ public void setup() throws Exception {
         activity = Robolectric.buildActivity(Activity.class).create().get();
         Shadows.shadowOf(activity).grantPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE);
 
+        MoPub.initializeSdk(activity, new SdkConfiguration.Builder("adunit").build(), null);
+
         mockPersonalInfoManager = mock(PersonalInfoManager.class);
         when(mockPersonalInfoManager.getPersonalInfoConsentStatus()).thenReturn(ConsentStatus.UNKNOWN);
         new Reflection.MethodBuilder(null, "setPersonalInfoManager")
@@ -111,11 +119,17 @@ public void setup() throws Exception {
                 .setResponseBody("testResponseBody")
                 .setServerExtras(Collections.<String, String>emptyMap())
                 .build();
+        shadowTelephonyManager = (MoPubShadowTelephonyManager) Shadows.shadowOf((TelephonyManager) RuntimeEnvironment.application.getSystemService(Context.TELEPHONY_SERVICE));
+        shadowConnectivityManager = (MoPubShadowConnectivityManager) Shadows.shadowOf((ConnectivityManager) RuntimeEnvironment.application.getSystemService(Context.CONNECTIVITY_SERVICE));
     }
 
     @After
     public void tearDown() throws Exception {
         reset(methodBuilder);
+        new Reflection.MethodBuilder(null, "clearAdvancedBidders")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .execute();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
index f2dde7ce..2a4f862f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -10,6 +10,7 @@
 import com.mopub.common.LifecycleListener;
 import com.mopub.common.MoPub;
 import com.mopub.common.MoPubReward;
+import com.mopub.common.SdkConfiguration;
 import com.mopub.common.SharedPreferencesHelper;
 import com.mopub.common.privacy.ConsentStatus;
 import com.mopub.common.privacy.MoPubIdentifierTest;
@@ -96,6 +97,13 @@
     @Before
     public void setup() throws Exception {
         mActivity = Robolectric.buildActivity(Activity.class).create().get();
+
+        new Reflection.MethodBuilder(null, "clearAdvancedBidders")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .execute();
+        MoPub.initializeSdk(mActivity, new SdkConfiguration.Builder("adunit").build(), null);
+
         MoPubIdentifierTest.writeAdvertisingInfoToSharedPreferences(mActivity, false);
         MoPubRewardedVideoManager.init(mActivity);
         // The fact that next call fixes issues in multiple tests proves that Robolectric doesn't
@@ -110,6 +118,11 @@ public void setup() throws Exception {
 
         mockPersonalInfoManager = mock(PersonalInfoManager.class);
         when(mockPersonalInfoManager.getPersonalInfoConsentStatus()).thenReturn(ConsentStatus.UNKNOWN);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
 
         when(mockRequestQueue.add(any(Request.class))).then(new Answer<Object>() {
             @Override
@@ -136,14 +149,17 @@ public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
     }
 
     @After
-    public void tearDown() {
+    public void tearDown() throws Exception {
         // Unpause the main looper in case a test terminated while the looper was paused.
         ShadowLooper.unPauseMainLooper();
         MoPubRewardedVideoManager.getRewardedAdData().clear();
         MoPubRewardedVideoManager.getAdRequestStatusMapping().clearMapping();
         mTestCustomEventSharedPrefs.edit().clear().commit();
         MoPubIdentifierTest.clearPreferences(mActivity);
-
+        new Reflection.MethodBuilder(null, "clearAdvancedBidders")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .execute();
     }
 
     @Test
@@ -300,9 +316,6 @@ public void loadVideo_withRequestParameters_shouldGenerateUrlWithKeywords() thro
 
     @Test
     public void loadVideo_withCustomerIdInRequestParameters_shouldSetCustomerId() throws Exception {
-        // Robolectric executes its handlers immediately, so if we want the async behavior we see
-        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
-        ShadowLooper.pauseMainLooper();
         when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
         new Reflection.MethodBuilder(null, "setPersonalInfoManager")
                 .setStatic(MoPub.class)
@@ -310,6 +323,10 @@ public void loadVideo_withCustomerIdInRequestParameters_shouldSetCustomerId() th
                 .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
                 .execute();
 
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
         MoPubRewardedVideoManager.loadVideo("testAdUnit", new MoPubRewardedVideoManager.RequestParameters("keywords", "user_data_keywords",null, "testCustomerId"));
 
         assertThat(MoPubRewardedVideoManager.getRewardedAdData().getCustomerId()).isEqualTo("testCustomerId");
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
index b5621f87..7ab409d2 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
@@ -25,17 +25,18 @@
 import com.mopub.common.MoPub;
 import com.mopub.common.MoPubAdvancedBidder;
 import com.mopub.common.SdkConfiguration;
+import com.mopub.common.privacy.AdvertisingId;
 import com.mopub.common.privacy.ConsentData;
 import com.mopub.common.privacy.ConsentStatus;
-import com.mopub.common.privacy.PersonalInfoManager;
-import com.mopub.common.privacy.AdvertisingId;
 import com.mopub.common.privacy.MoPubIdentifier;
 import com.mopub.common.privacy.MoPubIdentifierTest;
+import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Reflection;
 import com.mopub.common.util.Reflection.MethodBuilder;
 import com.mopub.common.util.Utils;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
+import com.mopub.mobileads.test.support.MoPubShadowConnectivityManager;
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
 import com.mopub.mraid.MraidNativeCommandHandler;
 import com.mopub.network.PlayServicesUrlRewriter;
@@ -50,20 +51,16 @@
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowConnectivityManager;
 import org.robolectric.shadows.ShadowLocationManager;
 import org.robolectric.shadows.ShadowNetworkInfo;
 
 import static android.Manifest.permission.ACCESS_COARSE_LOCATION;
 import static android.Manifest.permission.ACCESS_FINE_LOCATION;
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
+import static android.Manifest.permission.READ_PHONE_STATE;
 import static android.net.ConnectivityManager.TYPE_DUMMY;
 import static android.net.ConnectivityManager.TYPE_ETHERNET;
 import static android.net.ConnectivityManager.TYPE_MOBILE;
-import static android.net.ConnectivityManager.TYPE_MOBILE_DUN;
-import static android.net.ConnectivityManager.TYPE_MOBILE_HIPRI;
-import static android.net.ConnectivityManager.TYPE_MOBILE_MMS;
-import static android.net.ConnectivityManager.TYPE_MOBILE_SUPL;
 import static android.net.ConnectivityManager.TYPE_WIFI;
 import static android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN;
 import static com.mopub.common.ClientMetadata.MoPubNetworkType;
@@ -78,7 +75,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {MoPubShadowTelephonyManager.class})
+@Config(constants = BuildConfig.class, shadows = {MoPubShadowTelephonyManager.class, MoPubShadowConnectivityManager.class})
 public class WebViewAdUrlGeneratorTest {
 
     private static final String TEST_UDID = "20b013c721c";
@@ -90,7 +87,7 @@
     private String expectedUdid;
     private Configuration configuration;
     private MoPubShadowTelephonyManager shadowTelephonyManager;
-    private ShadowConnectivityManager shadowConnectivityManager;
+    private MoPubShadowConnectivityManager shadowConnectivityManager;
     private Activity context;
     private MethodBuilder methodBuilder;
     private PersonalInfoManager mockPersonalInfoManager;
@@ -102,6 +99,7 @@ public void setup() throws Exception {
         Shadows.shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
         Shadows.shadowOf(context).grantPermissions(ACCESS_FINE_LOCATION);
         Shadows.shadowOf(context).grantPermissions(ACCESS_COARSE_LOCATION);
+        Shadows.shadowOf(context).grantPermissions(READ_PHONE_STATE);
 
         // Set the expected screen dimensions to arbitrary numbers
         final Resources spyResources = spy(context.getResources());
@@ -157,7 +155,9 @@ public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
         expectedUdid = "sha%3A" + Utils.sha1(TEST_UDID);
         configuration = RuntimeEnvironment.application.getResources().getConfiguration();
         shadowTelephonyManager = (MoPubShadowTelephonyManager) Shadows.shadowOf((TelephonyManager) RuntimeEnvironment.application.getSystemService(Context.TELEPHONY_SERVICE));
-        shadowConnectivityManager = Shadows.shadowOf((ConnectivityManager) RuntimeEnvironment.application.getSystemService(Context.CONNECTIVITY_SERVICE));
+        shadowConnectivityManager = (MoPubShadowConnectivityManager) Shadows.shadowOf((ConnectivityManager) RuntimeEnvironment.application.getSystemService(Context.CONNECTIVITY_SERVICE));
+        shadowConnectivityManager.clearAllNetworks();
+        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE));
         methodBuilder = TestMethodBuilderFactory.getSingletonMock();
 
         LocationService.clearLastKnownLocation();
@@ -562,6 +562,7 @@ public void generateAdUrl_shouldSetNetworkType() throws Exception {
 
         when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
 
+        shadowConnectivityManager.setActiveNetworkInfo(null);
         shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_DUMMY));
         adUrl = generateMinimumUrlString();
         assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.UNKNOWN).build());
@@ -569,31 +570,36 @@ public void generateAdUrl_shouldSetNetworkType() throws Exception {
         shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_ETHERNET));
         adUrl = generateMinimumUrlString();
         assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.ETHERNET).build());
+        shadowConnectivityManager.clearAllNetworks();
 
         shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_WIFI));
         adUrl = generateMinimumUrlString();
         assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.WIFI).build());
 
-        // bunch of random mobile types just to make life more interesting
+        shadowConnectivityManager.setNetworkInfo(TYPE_WIFI, null);
+        shadowConnectivityManager.clearAllNetworks();
         shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
 
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE_DUN));
+        // bunch of random mobile types just to make life more interesting
+        shadowConnectivityManager.setActiveNetworkInfo(
+                createNetworkInfo(TYPE_MOBILE, TelephonyManager.NETWORK_TYPE_GPRS));
         adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
+        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.GG).build());
 
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE_HIPRI));
+        shadowConnectivityManager.setActiveNetworkInfo(
+                createNetworkInfo(TYPE_MOBILE, TelephonyManager.NETWORK_TYPE_HSPA));
         adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
+        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.GGG).build());
 
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE_MMS));
+        shadowConnectivityManager.setActiveNetworkInfo(
+                createNetworkInfo(TYPE_MOBILE, TelephonyManager.NETWORK_TYPE_EVDO_0));
         adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
+        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.GGG).build());
 
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE_SUPL));
+        shadowConnectivityManager.setActiveNetworkInfo(
+                createNetworkInfo(TYPE_MOBILE, TelephonyManager.NETWORK_TYPE_LTE));
         adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
+        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.GGGG).build());
     }
 
     @Test
@@ -991,10 +997,14 @@ private String getParameterFromRequestUrl(String requestString, String key) {
         return parameter;
     }
 
-    private NetworkInfo createNetworkInfo(int type) {
+    private NetworkInfo createNetworkInfo(int type, int subtype) {
         return ShadowNetworkInfo.newInstance(null,
                 type,
-                NETWORK_TYPE_UNKNOWN, true, true);
+                subtype, true, true);
+    }
+
+    private NetworkInfo createNetworkInfo(int type) {
+       return createNetworkInfo(type, NETWORK_TYPE_UNKNOWN);
     }
 
     private String generateMinimumUrlString() {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowConnectivityManager.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowConnectivityManager.java
new file mode 100644
index 00000000..b480d308
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowConnectivityManager.java
@@ -0,0 +1,38 @@
+package com.mopub.mobileads.test.support;
+
+import android.net.ConnectivityManager;
+import android.net.Network;
+import android.net.NetworkCapabilities;
+
+import org.robolectric.Shadows;
+import org.robolectric.annotation.Implementation;
+import org.robolectric.annotation.Implements;
+import org.robolectric.shadows.ShadowConnectivityManager;
+import org.robolectric.shadows.ShadowNetwork;
+
+import static android.net.ConnectivityManager.TYPE_ETHERNET;
+import static android.net.ConnectivityManager.TYPE_WIFI;
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+@Implements(ConnectivityManager.class)
+public class MoPubShadowConnectivityManager extends ShadowConnectivityManager {
+
+    private final NetworkCapabilities capabilitiesEthernet;
+
+    public MoPubShadowConnectivityManager() {
+        super();
+        capabilitiesEthernet = mock(NetworkCapabilities.class);
+        when(capabilitiesEthernet.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET)).thenReturn(true);
+    }
+
+    @Implementation(minSdk = LOLLIPOP)
+    public NetworkCapabilities getNetworkCapabilities(Network network) {
+        ShadowNetwork shadowNetwork = Shadows.shadowOf(network);
+        if (shadowNetwork.getNetId() == TYPE_ETHERNET) {
+            return capabilitiesEthernet;
+        }
+        return null;
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
index a4273408..94dd5518 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
@@ -49,6 +49,8 @@ public void setUp() throws Exception {
         fakeJsonObject.put("mainimage", "mainimageurl");
         fakeJsonObject.put("iconimage", "iconimageurl");
         fakeJsonObject.put("extraimage", "extraimageurl");
+        fakeJsonObject.put("privacyicon", "privacyiconurl");
+        fakeJsonObject.put("privacyclkurl", "privacyiconclickthroughurl");
 
         localExtras.put(DataKeys.JSON_BODY_KEY, fakeJsonObject);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java
index df3fb4de..b27cfb92 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java
@@ -53,6 +53,8 @@ public void setUp() throws Exception {
         jsonObject.put("mainimage", "mainimageurl");
         jsonObject.put("iconimage", "iconimageurl");
         jsonObject.put("extraimage", "extraimageurl");
+        jsonObject.put("privacyicon", "privacyiconurl");
+        jsonObject.put("privacyclkurl", "privacyiconclickthroughurl");
         localExtras.put(DataKeys.JSON_BODY_KEY, jsonObject);
         localExtras.put(DataKeys.CLICK_TRACKING_URL_KEY, "clicktrackingurl");
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
index 54fef6ae..919a1cfc 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
@@ -2,9 +2,12 @@
 
 import android.app.Activity;
 
+import com.mopub.common.MoPub;
+import com.mopub.common.SdkConfiguration;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.privacy.MoPubIdentifierTest;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Reflection;
 import com.mopub.common.util.test.support.ShadowAsyncTasks;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.mobileads.BuildConfig;
@@ -63,6 +66,7 @@
     @Before
     public void setup() throws Exception {
         context = Robolectric.buildActivity(Activity.class).create().get();
+        MoPub.initializeSdk(context, new SdkConfiguration.Builder("adunit").build(), null);
         MoPubIdentifierTest.writeAdvertisingInfoToSharedPreferences(context, false);
         Shadows.shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
         Shadows.shadowOf(context).grantPermissions(INTERNET);
@@ -72,9 +76,13 @@ public void setup() throws Exception {
     }
 
     @After
-    public void tearDown() {
+    public void tearDown() throws Exception {
         MoPubIdentifierTest.clearPreferences(context);
         reset(methodBuilder);
+        new Reflection.MethodBuilder(null, "clearAdvancedBidders")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .execute();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
index eb145575..b6ed548e 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
@@ -143,6 +143,8 @@ public void loadAd_shouldSetOptionalExpectedFields() throws Exception {
         fakeJsonObject.put("text", "expected text");
         fakeJsonObject.put("mainimage", "expected mainimage");
         fakeJsonObject.put("iconimage", "expected iconimage");
+        fakeJsonObject.put("privacyicon", "piiimageurl");
+        fakeJsonObject.put("privacyclkurl", "piiclkurl");
 
         fakeJsonObject.put("clk", "expected clk");
 
@@ -164,6 +166,8 @@ public void loadAd_shouldSetOptionalExpectedFields() throws Exception {
         assertThat(subject.getImpressionTrackers()).containsOnly("url1", "url2");
         assertThat(subject.getCallToAction()).isEqualTo("expected ctatext");
         assertThat(subject.getStarRating()).isEqualTo(5.0);
+        assertThat(subject.getPrivacyInformationIconImageUrl()).isEqualTo("piiimageurl");
+        assertThat(subject.getPrivacyInformationIconClickThroughUrl()).isEqualTo("piiclkurl");
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
index 50f87dc8..c6daec57 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
@@ -112,6 +112,8 @@ public void setUp() throws Exception {
         jsonObject.put("ctatext", "ctatext");
         jsonObject.put("video", "video");
         jsonObject.put("extraimage", "extraimageurl");
+        jsonObject.put("privacyicon", "piiimageurl");
+        jsonObject.put("privacyclkurl", "piiclkurl");
 
         serverExtras = new HashMap<String, String>();
         serverExtras.put("Play-Visible-Percent", "10");
@@ -197,9 +199,9 @@ public void loadAd_shouldInitializeAssetValues() {
         assertThat(subject.getIconImageUrl()).isEqualTo("iconimageurl");
         assertThat(subject.getClickDestinationUrl()).isEqualTo("clk");
         assertThat(subject.getCallToAction()).isEqualTo("ctatext");
-        assertThat(subject.getPrivacyInformationIconClickThroughUrl()).isEqualTo(
-                "https://www.mopub.com/optout/");
         assertThat(subject.getVastVideo()).isEqualTo("video");
+        assertThat(subject.getPrivacyInformationIconImageUrl()).isEqualTo("piiimageurl");
+        assertThat(subject.getPrivacyInformationIconClickThroughUrl()).isEqualTo("piiclkurl");
         assertThat(subject.getExtra("extraimage")).isEqualTo("extraimageurl");
         assertThat(subject.getExtras()).hasSize(1);
     }
@@ -253,6 +255,8 @@ public void onVastVideoConfigurationPrepared_shouldConstructNativeVideoControlle
         verify(mockVastVideoConfig).getImpressionTrackers();
         verify(mockVastVideoConfig).addClickTrackers(any(List.class));
         verify(mockVastVideoConfig).setClickThroughUrl("clk");
+        verify(mockVastVideoConfig).setPrivacyInformationIconImageUrl("piiimageurl");
+        verify(mockVastVideoConfig).setPrivacyInformationIconClickthroughUrl("piiclkurl");
         verify(mockCustomEventNativeListener).onNativeAdLoaded(subject);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java
index 55e6d9f1..b7590b34 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java
@@ -8,6 +8,7 @@
 import android.graphics.RectF;
 import android.graphics.SurfaceTexture;
 import android.graphics.drawable.GradientDrawable;
+import android.support.annotation.NonNull;
 import android.view.TextureView;
 import android.view.View;
 import android.widget.ImageView;
@@ -25,23 +26,31 @@
 import com.mopub.nativeads.NativeFullScreenVideoView.Mode;
 
 import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.Mock;
+import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.rule.PowerMockRule;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
+import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
+@PowerMockIgnore({ "org.mockito.*", "org.robolectric.*", "android.*", "org.json.*"})
+@PrepareForTest(NativeImageHelper.class)
 public class NativeFullScreenVideoViewTest {
 
     private NativeFullScreenVideoView subject;
@@ -66,10 +75,12 @@
     private ImageView spyCtaButton;
     private ImageView spyCloseControl;
 
-    @Mock TextureView.SurfaceTextureListener mockSurfaceTextureListener;
-    @Mock SurfaceTexture mockSurfaceTexture;
-    @Mock RectF mockRectF;
-    @Mock Paint mockPaint;
+    @Rule public PowerMockRule rule = new PowerMockRule();
+
+    private TextureView.SurfaceTextureListener mockSurfaceTextureListener;
+    private SurfaceTexture mockSurfaceTexture;
+    private RectF mockRectF;
+    private Paint mockPaint;
     private Configuration configuration;
 
     @Before
@@ -90,19 +101,25 @@ public void setUp() {
         spyLoadingSpinner = spy(new ProgressBar(context));
         spyBottomGradient = spy(new ImageView(context));
         spyTopGradient = spy(new ImageView(context));
-        spyVideoProgress = spy(new VastVideoProgressBarWidget(context));
+        spyVideoProgress = spy(new VastVideoProgressBarWidgetMock(context));
         spyOverlay = spy(new View(context));
         spyPlayButton = spy(new ImageView(context));
         spyPrivacyInformationIcon = spy(new ImageView(context));
         spyCtaButton = spy(new ImageView(context));
         spyCloseControl = spy(new ImageView(context));
 
+        mockSurfaceTextureListener = mock(TextureView.SurfaceTextureListener.class);
+        mockSurfaceTexture = mock(SurfaceTexture.class);
+        mockRectF = mock(RectF.class);
+        mockPaint = mock(Paint.class);
+
         subject = new NativeFullScreenVideoView(context, Configuration.ORIENTATION_LANDSCAPE, "Learn More",
                 spyCachedImage,
                 spyVideoTexture, spyLoadingSpinner, spyBottomGradient, spyTopGradient,
                 spyVideoProgress, spyOverlay, spyPlayButton, spyPrivacyInformationIcon, spyCtaButton,
                 spyCloseControl);
 
+        PowerMockito.mockStatic(NativeImageHelper.class);
     }
 
     @Test
@@ -214,10 +231,10 @@ public void constructor_shouldAddPlayButtonToLayout() throws Exception {
     }
 
     @Test
-    public void constructor_shouldAddPrivacyInformationIconToLayout() throws Exception {
+    public void constructor_shouldSetUpPrivacyInformationIconToLayout() throws Exception {
         assertThat(subject.findViewById(spyPrivacyInformationIcon.getId())).isEqualTo(
                 spyPrivacyInformationIcon);
-        verify(spyPrivacyInformationIcon).setImageDrawable(
+        verify(spyPrivacyInformationIcon, times(0)).setImageDrawable(
                 Drawables.NATIVE_PRIVACY_INFORMATION_ICON.createDrawable(context));
         assertThat(spyPrivacyInformationIcon.getPaddingLeft()).isEqualTo(subject.mClosePaddingPx);
         assertThat(spyPrivacyInformationIcon.getPaddingTop()).isEqualTo(subject.mClosePaddingPx);
@@ -275,6 +292,22 @@ public void constructor_shouldAddCloseControlToLayout() throws Exception {
                 .isEqualTo(spyVideoTexture.getId());
     }
 
+    @Test
+    public void setPrivacyInformationIconImageUrl_withNullUrl_shouldUseDefaultIcon() {
+        subject.setPrivacyInformationIconImageUrl(null);
+
+        verify(spyPrivacyInformationIcon).setImageDrawable(
+                Drawables.NATIVE_PRIVACY_INFORMATION_ICON.createDrawable(context));
+    }
+
+    @Test
+    public void setPrivacyInformationIconImageUrl_withUrl_shouldSetIconImageToUrl() {
+        subject.setPrivacyInformationIconImageUrl("imageurl");
+
+        PowerMockito.verifyStatic();
+        NativeImageHelper.loadImageView("imageurl", spyPrivacyInformationIcon);
+    }
+
     @Test
     public void resetProgress_shouldCallVideoProgressReset() throws Exception {
         subject.resetProgress();
@@ -489,4 +522,13 @@ public void LoadingBackground_getOpacity_shouldReturn0() throws Exception {
         assertThat(new LoadingBackground(context, mockRectF, mockPaint).getOpacity())
                 .isEqualTo(0);
     }
+
+    // To get around objenesis errors
+    class VastVideoProgressBarWidgetMock extends VastVideoProgressBarWidget {
+
+        public VastVideoProgressBarWidgetMock(
+                @NonNull final Context context) {
+            super(context);
+        }
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
index f8923c83..ecc0fcf9 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
@@ -6,6 +6,7 @@
 import android.graphics.Point;
 import android.location.Location;
 import android.location.LocationManager;
+import android.net.ConnectivityManager;
 import android.net.Uri;
 import android.os.Build;
 import android.telephony.TelephonyManager;
@@ -22,6 +23,7 @@
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Reflection;
 import com.mopub.mobileads.BuildConfig;
+import com.mopub.mobileads.test.support.MoPubShadowConnectivityManager;
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
 
 import org.junit.After;
@@ -35,6 +37,7 @@
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLocationManager;
+import org.robolectric.shadows.ShadowNetworkInfo;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -51,7 +54,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {MoPubShadowTelephonyManager.class})
+@Config(constants = BuildConfig.class, shadows = {MoPubShadowTelephonyManager.class, MoPubShadowConnectivityManager.class})
 public class NativeUrlGeneratorTest {
     public static final String AD_UNIT_ID = "1234";
     private static final int TEST_SCREEN_WIDTH = 999;
@@ -60,6 +63,7 @@
     private Activity context;
     private NativeUrlGenerator subject;
     private MoPubShadowTelephonyManager shadowTelephonyManager;
+    private MoPubShadowConnectivityManager shadowConnectivityManager;
     private PersonalInfoManager mockPersonalInfoManager;
 
     @Before
@@ -70,6 +74,11 @@ public void setup() throws Exception {
         when(context.getPackageName()).thenReturn("testBundle");
         shadowTelephonyManager = (MoPubShadowTelephonyManager)
                 Shadows.shadowOf((TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE));
+        shadowConnectivityManager = (MoPubShadowConnectivityManager)
+                Shadows.shadowOf((ConnectivityManager) RuntimeEnvironment.application.getSystemService(Context.CONNECTIVITY_SERVICE));
+        shadowConnectivityManager.setActiveNetworkInfo(ShadowNetworkInfo.newInstance(null,
+                ConnectivityManager.TYPE_MOBILE, TelephonyManager.NETWORK_TYPE_UNKNOWN, true,
+                true));
 
         // Set the expected screen dimensions to arbitrary numbers
         final Resources spyResources = spy(context.getResources());
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
index 6204075d..f6580966 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
@@ -65,6 +65,7 @@ public void setUp() {
         NativeVideoController.setForId(123, mockVideoController);
 
         when(mockVastVideoConfig.getCustomCtaText()).thenReturn("Learn More");
+        when(mockVastVideoConfig.getPrivacyInformationIconImageUrl()).thenReturn("piiimageurl");
         when(mockFullScreenVideoView.getTextureView()).thenReturn(mockTextureView);
         when(mockTextureView.getBitmap()).thenReturn(mockBitmap);
         intentExtras.putSerializable(Constants.NATIVE_VAST_VIDEO_CONFIG, mockVastVideoConfig);
@@ -114,6 +115,7 @@ public void onCreate_shouldSetupVideoView() {
         verify(mockFullScreenVideoView).setCtaClickListener(any(View.OnClickListener.class));
         verify(mockFullScreenVideoView).setPrivacyInformationClickListener(
                 any(View.OnClickListener.class));
+        verify(mockFullScreenVideoView).setPrivacyInformationIconImageUrl("piiimageurl");
         verify(mockFullScreenVideoView).setLayoutParams(any(LayoutParams.class));
         verify(mockBaseVideoViewControllerListener).onSetContentView(mockFullScreenVideoView);
         verify(mockBaseVideoViewControllerListener, never()).onFinish();
diff --git a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
index 060fa2be..ad2295bb 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
@@ -12,4 +12,10 @@
         }
     }
 
+    public static class TestMoPubRequestQueue2 extends MoPubRequestQueue {
+
+        TestMoPubRequestQueue2(Cache cache, Network network) {
+            super(cache, network);
+        }
+    }
 }
diff --git a/pom.xml b/pom.xml
deleted file mode 100644
index be233e50..00000000
--- a/pom.xml
+++ /dev/null
@@ -1,42 +0,0 @@
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
-                      http://maven.apache.org/xsd/maven-4.0.0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-
-    <parent>
-        <groupId>org.sonatype.oss</groupId>
-        <artifactId>oss-parent</artifactId>
-        <version>5</version>
-    </parent>
-
-    <groupId>com.mopub.mobileads</groupId>
-    <artifactId>mopub-android</artifactId>
-    <version>1.0</version>
-    <packaging>pom</packaging>
-
-    <repositories>
-        <repository>
-            <id>jcenter</id>
-            <name>JCenter</name>
-            <url>http://jcenter.bintray.com</url>
-        </repository>
-
-        <repository>
-            <id>andsupport</id>
-            <name>Android Support</name>
-            <url>file:///${env.ANDROID_HOME}/extras/android/m2repository</url>
-        </repository>
-
-        <repository>
-            <id>playservices</id>
-            <name>Android Play Services</name>
-            <url>file:///${env.ANDROID_HOME}/extras/google/m2repository</url>
-        </repository>
-    </repositories>
-
-    <modules>
-        <module>mopub-sdk</module>
-        <module>mopub-sample</module>
-    </modules>
-</project>
