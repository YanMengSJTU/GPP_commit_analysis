diff --git a/CHANGELOG.md b/CHANGELOG.md
index 0d18323e..99f1bc28 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,25 @@
+## Version 3.10.0 (August 3, 2015)
+
+- VAST UI improvements and bug fixes.
+  - Pause trackers no longer fire when the ad is skipped.
+  - Improved retrieval of blurred video frame when there is no companion ad.
+- Added com.mopub:mopub-sdk AAR to [jCenter](https://bintray.com/mopub/mopub-android-sdk/mopub-android-sdk/view).
+- Bug Fixes:
+  - Fixed a NullPointerException in CacheService on devices with low storage space.
+  - Improved redirect loading for in-app browser.
+
+## Version 3.9.0 (July 1, 2015)
+
+- Added **VAST 3.0** standard support for video ads.
+- Improved **video player UX**.
+- Added **RecyclerView** support for native ads. See the [integration guide](https://github.com/mopub/mopub-android-sdk/wiki/Native-Ads-with-Recycler-View).
+- Improved **deep link** handling.
+- Bug Fixes:
+  - MRAID video interstitials now play automatically when displayed on Jellybean MR1 and newer.
+  - MRAID relative assets are correctly rendered.
+  - MoPubLog no longer duplicates some messages.
+  - Fixed erroneous output of DeviceUtils.getScreenOrientationFromRotationAndOrientation().
+
 ## Version 3.8.0 (June 1, 2015)
 
 - Updated Chartboost support to 5.3.0. This introduces a new shared class called ChartboostShared. If you are using Chartboost Custom Native Networks you will need to include this class in your build along with ChartboostInterstitial.
diff --git a/README.md b/README.md
index e8517fe9..1514edfa 100644
--- a/README.md
+++ b/README.md
@@ -6,41 +6,73 @@ Sign up for an account at [http://app.mopub.com/](http://app.mopub.com/).
 
 ## Need Help?
 
-You can find integration documentation on our [wiki](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started) and
-additional help documentation on our [developer help site](http://dev.twitter.com/mopub). 
+You can find integration documentation on our [wiki](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started) and additional help documentation on our [developer help site](http://dev.twitter.com/mopub).
 
-To file an issue with our team visit the [MoPub Forum](https://twittercommunity.com/c/fabric/mopub). 
+To file an issue with our team visit the [MoPub Forum](https://twittercommunity.com/c/fabric/mopub) or email [support@mopub.com](mailto:support@mopub.com).
 
-**Note: We will be deprecating the use of GitHub issues in the near future and migrating all issues to the forum to provide a faster response time.**
+**Please Note: We no longer accept GitHub Issues.**
 
 ## Download
 
-The MoPub SDK is distributed as source code that you can include in your application.  MoPub provides two prepackaged archives of source code:
-
-- **[MoPub Android Full SDK.zip](http://bit.ly/YUdU9v)**
-
-  Includes everything you need to serve HTML and MRAID MoPub advertisiments *and* built-in support for Millennial Media third party ad network - [Millennial Media](http://www.millennialmedia.com/) - including the required third party binaries.
-
-- **[MoPub Android Base SDK.zip](http://bit.ly/YUdWhH)**
-
-  Includes everything you need to serve HTML and MRAID MoPub advertisements.  No third party ad networks are included.
-
-## Integrate
-
-Integration instructions are available on the [wiki](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started).
-
+The MoPub SDK is available via:
+
+1. **jCenter AAR**
+    
+    [ ![Download](https://api.bintray.com/packages/mopub/mopub-android-sdk/mopub-android-sdk/images/download.svg)](https://bintray.com/mopub/mopub-android-sdk/mopub-android-sdk/_latestVersion)  
+    The MoPub SDK is available as an AAR via jCenter; to use it, add the following to your `build.gradle`.
+    
+    ```
+    repositories {
+        jcenter()
+    }
+
+    dependencies {
+        compile('com.mopub:mopub-sdk:3.10.0@aar') {
+            transitive = true
+        }
+    }
+    ```
+
+    **To continue integration using the mopub-sdk AAR, please see the [Getting Started guide](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started#updating-your-android-manifest).**
+
+2. **Zipped Source**
+
+    The MoPub SDK is also distributed as zipped source code that you can include in your application.  MoPub provides two prepackaged archives of source code:
+
+    **[MoPub Android Full SDK.zip](http://bit.ly/YUdU9v)**  
+    _Includes everything you need to serve MoPub ads *and* built-in support for Millennial Media third party ad network - [Millennial Media](http://www.millennialmedia.com/) - including the required third party binaries._
+    
+    **[MoPub Android Base SDK.zip](http://bit.ly/YUdWhH)**  
+    _Includes everything you need to serve MoPub ads.  No third party ad networks are included._
+    
+    **For additional integration instructions, please see the [Getting Started guide](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started#requirements-and-dependencies).**
+
+3. **Cloned GitHub repository**
+    
+    Alternatively, you can obtain the MoPub SDK source by cloning the git repository:
+    
+    `git clone git://github.com/mopub/mopub-android-sdk.git`
+    
+    **For additional integration instructions, please see the [Getting Started guide](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started#requirements-and-dependencies).**
 
 ## New in this Version
 
-Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for details.
+Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the lastest release..
 
-- Updated Chartboost support to 5.3.0. This introduces a new shared class called ChartboostShared. If you are using Chartboost Custom Native Networks you will need to include this class in your build along with ChartboostInterstitial.
+- VAST UI improvements and bug fixes.
+  - Pause trackers no longer fire when the ad is skipped.
+  - Improved retrieval of blurred video frame when there is no companion ad.
+- Added com.mopub:mopub-sdk AAR to [jCenter](https://bintray.com/mopub/mopub-android-sdk/mopub-android-sdk/view).
+- Bug Fixes:
+  - Fixed a NullPointerException in CacheService on devices with low storage space.
+  - Improved redirect loading for in-app browser.
 
 ## Requirements
 
 - Android 2.3.1 (API Version 9) and up
 - android-support-v4.jar, r22 (**Updated in 3.7.0**)
 - android-support-annotations.jar, r22 (**Updated in 3.7.0**)
+- android-support-v7-recyclerview.jar, r22 (**Updated in 3.9.0**)
 - MoPub Volley Library (mopub-volley-1.1.0.jar - available on JCenter) (**Updated in 3.6.0**)
 - **Recommended** Google Play Services 7.0.0
 
diff --git a/build.gradle b/build.gradle
index 3f972f60..c62b6341 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,10 +5,10 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.1.0'
+        classpath 'com.android.tools.build:gradle:1.2.3'
     }
 }
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '2.2.1'
+    gradleVersion = '2.5'
 }
diff --git a/gradle.properties b/gradle.properties
new file mode 100644
index 00000000..2cef46c6
--- /dev/null
+++ b/gradle.properties
@@ -0,0 +1,2 @@
+org.gradle.jvmargs=-Xmx8192m -XX:MaxPermSize=2048m
+org.gradle.daemon=false
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 3d0dee6e..30d399d8 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index cd2daf52..57375a65 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Tue Nov 18 14:15:01 PST 2014
+#Wed Jul 15 14:33:43 PDT 2015
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.5-bin.zip
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 0c23ce4c..36a2f79c 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,9 +1,9 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="25"
-      android:versionName="3.8.0">
-    <uses-sdk android:minSdkVersion="9" 
+      android:versionCode="27"
+      android:versionName="3.10.0">
+    <uses-sdk android:minSdkVersion="9"
               android:targetSdkVersion="22"/>
 
     <uses-permission android:name="android.permission.INTERNET" />
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index 2bfb1081..1e3fca7a 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -5,16 +5,16 @@ repositories {
 apply plugin: 'com.android.application'
 
 group = 'com.mopub'
-
-description = '''MoPub SDK'''
+description = '''MoPub Sample App'''
+version = '3.10.0'
 
 android {
     compileSdkVersion 22
     buildToolsVersion '22.0.1'
 
     defaultConfig {
-        versionCode 25
-        versionName "3.8.0"
+        versionCode 27
+        versionName version
         minSdkVersion 9
         targetSdkVersion 22
     }
@@ -22,19 +22,19 @@ android {
     buildTypes {
       release {
         minifyEnabled true
-        proguardFiles = [getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg']
+        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
       }
       debug {
-        minifyEnabled true
-        proguardFiles = [getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg']
+        minifyEnabled false
+        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
       }
     }
 
     sourceSets {
         main {
             manifest.srcFile 'AndroidManifest.xml'
-            java.srcDirs = ['src/main']
-            resources.srcDirs = ['src/main']
+            java.srcDirs = ['src/main/java']
+            resources.srcDirs = ['src/main/java']
             aidl.srcDirs = ['src/main']
             renderscript.srcDirs = ['src/main']
             res.srcDirs = ['res']
@@ -53,5 +53,6 @@ android {
 dependencies {
     compile 'com.android.support:support-v4:22.0.0'
     compile 'com.google.android.gms:play-services-ads:7.0.0'
+    compile 'com.android.support:recyclerview-v7:22.0.0'
     compile project(':mopub-sdk')
 }
diff --git a/mopub-sample/pom.xml b/mopub-sample/pom.xml
index 2411f18d..3c112660 100644
--- a/mopub-sample/pom.xml
+++ b/mopub-sample/pom.xml
@@ -37,6 +37,13 @@
             <type>aar</type>
         </dependency>
 
+        <dependency>
+            <groupId>com.android.support</groupId>
+            <artifactId>recyclerview-v7</artifactId>
+            <version>22.0.0</version>
+            <type>aar</type>
+        </dependency>
+        
         <dependency>
             <groupId>com.google.android.gms</groupId>
             <artifactId>play-services-ads</artifactId>
@@ -44,51 +51,6 @@
             <type>aar</type>
         </dependency>
 
-        <!--test-->
-
-        <dependency>
-            <groupId>com.squareup</groupId>
-            <artifactId>fest-android</artifactId>
-            <version>1.0.1</version>
-            <scope>test</scope>
-        </dependency>
-
-        <!-- this needs to come above fest-reflect or we pick up the wrong org.fest.util.Strings -->
-        <dependency>
-            <groupId>org.easytesting</groupId>
-            <artifactId>fest-assert-core</artifactId>
-            <version>2.0M9</version>
-            <scope>test</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>org.easytesting</groupId>
-            <artifactId>fest-reflect</artifactId>
-            <version>1.4</version>
-            <scope>test</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>junit</groupId>
-            <artifactId>junit</artifactId>
-            <version>4.8.2</version>
-            <scope>test</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>org.mockito</groupId>
-            <artifactId>mockito-core</artifactId>
-            <version>1.9.5</version>
-            <scope>test</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>org.robolectric</groupId>
-            <artifactId>robolectric</artifactId>
-            <version>${robolectric.version}</version>
-            <scope>test</scope>
-        </dependency>
-
         <dependency> <groupId>com.google.android</groupId>
             <artifactId>android</artifactId>
             <version>4.4.2</version>
@@ -103,9 +65,22 @@
             <plugin>
                 <artifactId>maven-compiler-plugin</artifactId>
                 <version>2.3.2</version>
+                <!-- Skip tests. We use Gradle to build and run tests. -->
+                <executions>
+                    <execution>
+                        <id>default-testCompile</id>
+                        <phase>test-compile</phase>
+                        <goals>
+                            <goal>testCompile</goal>
+                        </goals>
+                        <configuration>
+                            <skip>true</skip>
+                        </configuration>
+                    </execution>
+                </executions>
                 <configuration>
-                    <source>1.6</source>
-                    <target>1.6</target>
+                    <source>7</source>
+                    <target>7</target>
                 </configuration>
             </plugin>
             <plugin>
@@ -123,16 +98,6 @@
                 </configuration>
                 <extensions>true</extensions>
             </plugin>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-surefire-plugin</artifactId>
-                <version>2.6</version>
-                <configuration>
-                    <excludes>
-                        <exclude>**/Test*.java</exclude>
-                    </excludes>
-                </configuration>
-            </plugin>
         </plugins>
     </build>
 </project>
diff --git a/mopub-sample/res/layout/recycler_view_fragment.xml b/mopub-sample/res/layout/recycler_view_fragment.xml
new file mode 100644
index 00000000..0d04e5a9
--- /dev/null
+++ b/mopub-sample/res/layout/recycler_view_fragment.xml
@@ -0,0 +1,64 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:orientation="vertical" android:layout_width="match_parent"
+              android:layout_height="match_parent">
+    <TextView
+        android:id="@+id/description"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:paddingLeft="8dp"
+        android:paddingRight="8dp"
+        android:paddingTop="8dp"
+        android:singleLine="true"
+        android:textColor="?android:attr/textColorPrimary"
+        android:textSize="16sp"
+        android:textStyle="bold"/>
+
+    <TextView
+        android:id="@+id/ad_unit_id"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:paddingLeft="8dp"
+        android:paddingRight="8dp"
+        android:singleLine="true"
+        android:textColor="?android:attr/textColorSecondary"
+        android:textSize="14sp"
+        android:textStyle="normal"/>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <EditText
+            android:id="@+id/keywords_field"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="3"
+            android:hint="@string/keywords"
+            android:imeOptions="actionDone"
+            android:inputType="text|textFilter|textShortMessage"
+            android:singleLine="true"/>
+
+        <Button
+            android:id="@+id/load_button"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:text="@string/load_ad"/>
+
+        <Button
+            android:id="@+id/switch_button"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:text="@string/switch_layout"/>
+    </LinearLayout>
+
+    <android.support.v7.widget.RecyclerView
+        android:id="@+id/native_recycler_view"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:padding="5dp" />
+
+</LinearLayout>
diff --git a/mopub-sample/res/values/strings.xml b/mopub-sample/res/values/strings.xml
index 6d5db0d9..4824d0b9 100644
--- a/mopub-sample/res/values/strings.xml
+++ b/mopub-sample/res/values/strings.xml
@@ -3,6 +3,8 @@
     <string name="app_name">MoPub Sample App</string>
     <string name="keywords">Keywords (optional)</string>
     <string name="load_ad">Load Ad</string>
+    <string name="refresh_ad">Refresh Ad</string>
+    <string name="switch_layout">Switch Layout</string>
     <string name="show_ad">Show Ad</string>
     <string name="native_icon_image">native_icon_image</string>
     <string name="native_main_image">native_main_image</string>
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
index ce5051d3..22aa7e69 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
@@ -7,7 +7,6 @@
 import com.mopub.mobileads.MoPubErrorCode;
 
 import java.util.logging.Handler;
-import java.util.logging.Level;
 import java.util.logging.LogManager;
 import java.util.logging.LogRecord;
 import java.util.logging.Logger;
@@ -21,11 +20,6 @@
     private LoggingUtils() {
     }
 
-    /**
-     * The name of the custom logger we're looking for
-     */
-    private static final String LOGGER_NAME = "com.mopub";
-
     private static boolean sEnabled;
 
     /**
@@ -39,21 +33,19 @@ static void enableCanaryLogging(@NonNull final Context context) {
             return;
         }
 
+        // This makes sure the static block in MoPubLog is executed before
+        // LogManager#getLogManager is called.
+        MoPubLog.c("Canary level logging enabled");
+
         final Handler handler = new SampleAppLogHandler(context.getApplicationContext());
         final Logger logger = getLogger();
-
-        logger.setLevel(Level.ALL);
         logger.addHandler(handler);
 
         sEnabled = true;
     }
 
     private static Logger getLogger() {
-        // This makes sure the static block in MoPubLog is executed before
-        // LogManager#getLogManager is called.
-        MoPubLog.c("Canary level logging enabled");
-
-        return LogManager.getLogManager().getLogger(LOGGER_NAME);
+        return LogManager.getLogManager().getLogger(MoPubLog.LOGGER_NAMESPACE);
     }
 
     private static class SampleAppLogHandler extends Handler {
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java
index 40b417fb..af774f91 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java
@@ -13,6 +13,7 @@
 import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.CUSTOM_NATIVE;
 import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.INTERSTITIAL;
 import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.LIST_VIEW;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.RECYCLER_VIEW;
 import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.MRECT;
 
 class MoPubSQLiteHelper extends SQLiteOpenHelper {
@@ -24,7 +25,7 @@
     public static final String COLUMN_AD_TYPE = "adType";
 
     private static final String DATABASE_NAME = "savedConfigurations.db";
-    private static final int DATABASE_VERSION = 2;
+    private static final int DATABASE_VERSION = 3;
 
     private static final String DATABASE_CREATE = "create table " + TABLE_AD_CONFIGURATIONS
             + " ("
@@ -69,6 +70,11 @@ public void onCreate(SQLiteDatabase sqLiteDatabase) {
                         .Builder(mContext.getString(R.string.ad_unit_id_native), LIST_VIEW)
                         .description("MoPub Ad Placer Sample")
                         .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_native), RECYCLER_VIEW)
+                        .description("MoPub Recycler View Sample")
+                        .build());
         adUnitList.add(
                 new MoPubSampleAdUnit
                         .Builder(mContext.getString(R.string.ad_unit_id_native), CUSTOM_NATIVE)
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
index 3e2b7dac..724656ff 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
@@ -21,6 +21,7 @@
         INTERSTITIAL("Interstitial", InterstitialDetailFragment.class),
         REWARDED_VIDEO("Rewarded Video", RewardedVideoDetailFragment.class),
         LIST_VIEW("Native List View", NativeListViewFragment.class),
+        RECYCLER_VIEW("Native Recycler View", NativeRecyclerViewFragment.class),
         CUSTOM_NATIVE("Native Gallery (Custom Stream)", NativeGalleryFragment.class);
 
         String getName() {
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
new file mode 100644
index 00000000..29feeac4
--- /dev/null
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
@@ -0,0 +1,154 @@
+package com.mopub.simpleadsdemo;
+
+
+import android.location.Location;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.support.v4.app.Fragment;
+import android.support.v7.widget.GridLayoutManager;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mopub.nativeads.MoPubNativeAdPositioning;
+import com.mopub.nativeads.MoPubRecyclerAdapter;
+import com.mopub.nativeads.RequestParameters;
+import com.mopub.nativeads.ViewBinder;
+
+import java.util.EnumSet;
+import java.util.Locale;
+
+public class NativeRecyclerViewFragment extends Fragment {
+    private MoPubRecyclerAdapter mRecyclerAdapter;
+    private MoPubSampleAdUnit mAdConfiguration;
+    private RequestParameters mRequestParameters;
+    private enum LayoutType { LINEAR, GRID };
+    private LayoutType mLayoutType;
+    private RecyclerView mRecyclerView;
+
+    @Override
+    public View onCreateView(final LayoutInflater inflater, @Nullable final ViewGroup container,
+            @Nullable final Bundle savedInstanceState) {
+        super.onCreateView(inflater, container, savedInstanceState);
+
+        mAdConfiguration = MoPubSampleAdUnit.fromBundle(getArguments());
+        final View view = inflater.inflate(R.layout.recycler_view_fragment, container, false);
+        mRecyclerView = (RecyclerView) view.findViewById(R.id.native_recycler_view);
+        final DetailFragmentViewHolder viewHolder = DetailFragmentViewHolder.fromView(view);
+        final Button switchButton = (Button) view.findViewById(R.id.switch_button);
+        switchButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(final View v) {
+                toggleRecyclerLayout();
+            }
+        });
+
+        viewHolder.mLoadButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(final View v) {
+                // If your app already has location access, include it here.
+                final Location location = null;
+                final String keywords = viewHolder.mKeywordsField.getText().toString();
+
+                // Setting desired assets on your request helps native ad networks and bidders
+                // provide higher-quality ads.
+                final EnumSet<RequestParameters.NativeAdAsset> desiredAssets = EnumSet.of(
+                        RequestParameters.NativeAdAsset.TITLE,
+                        RequestParameters.NativeAdAsset.TEXT,
+                        RequestParameters.NativeAdAsset.ICON_IMAGE,
+                        RequestParameters.NativeAdAsset.MAIN_IMAGE,
+                        RequestParameters.NativeAdAsset.CALL_TO_ACTION_TEXT);
+
+                mRequestParameters = new RequestParameters.Builder()
+                        .location(location)
+                        .keywords(keywords)
+                        .desiredAssets(desiredAssets)
+                        .build();
+
+                if (mRecyclerAdapter != null) {
+                    mRecyclerAdapter.refreshAds(mAdConfiguration.getAdUnitId(), mRequestParameters);
+                }
+            }
+        });
+        final String adUnitId = mAdConfiguration.getAdUnitId();
+        viewHolder.mDescriptionView.setText(mAdConfiguration.getDescription());
+        viewHolder.mAdUnitIdView.setText(adUnitId);
+
+        final RecyclerView.Adapter originalAdapter = new DemoRecyclerAdapter();
+
+        mRecyclerAdapter = new MoPubRecyclerAdapter(getActivity(), originalAdapter,
+                new MoPubNativeAdPositioning.MoPubServerPositioning());
+        mRecyclerAdapter.registerViewBinder(new ViewBinder.Builder(R.layout.native_ad_list_item)
+                .titleId(R.id.native_title)
+                .textId(R.id.native_text)
+                .mainImageId(R.id.native_main_image)
+                .iconImageId(R.id.native_icon_image)
+                .callToActionId(R.id.native_cta)
+                .build());
+
+        mRecyclerView.setAdapter(mRecyclerAdapter);
+        mRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
+        mLayoutType = LayoutType.LINEAR;
+        mRecyclerAdapter.loadAds(mAdConfiguration.getAdUnitId());
+        return view;
+    }
+
+    void toggleRecyclerLayout() {
+        if (mLayoutType == LayoutType.LINEAR) {
+            mLayoutType = LayoutType.GRID;
+            mRecyclerView.setLayoutManager(new GridLayoutManager(getActivity(), 2));
+        } else {
+            mLayoutType = LayoutType.LINEAR;
+            mRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
+        }
+    }
+
+    @Override
+    public void onDestroyView() {
+        // You must call this or the ad adapter may cause a memory leak.
+        mRecyclerAdapter.destroy();
+        super.onDestroyView();
+    }
+
+    private static class DemoRecyclerAdapter extends RecyclerView.Adapter<DemoViewHolder> {
+        private static final int ITEM_COUNT = 150;
+        @Override
+        public DemoViewHolder onCreateViewHolder(final ViewGroup parent,
+                final int viewType) {
+            final View itemView = LayoutInflater.from(parent.getContext())
+                    .inflate(android.R.layout.simple_list_item_1, parent, false);
+            return new DemoViewHolder(itemView);
+        }
+
+        @Override
+        public void onBindViewHolder(final DemoViewHolder holder, final int position) {
+            holder.textView.setText(String.format(Locale.US, "Content Item #%d", position));
+        }
+
+        @Override
+        public long getItemId(final int position) {
+            return (long) position;
+        }
+
+        @Override
+        public int getItemCount() {
+            return ITEM_COUNT;
+        }
+    }
+
+    /**
+     * A view holder for R.layout.simple_list_item_1
+     */
+    private static class DemoViewHolder extends RecyclerView.ViewHolder {
+        public final TextView textView;
+
+        public DemoViewHolder(final View itemView) {
+            super(itemView);
+            textView = (TextView) itemView.findViewById(android.R.id.text1);
+        }
+    }
+}
diff --git a/mopub-sample/src/test/java/com/mopub/mobileads/test/support/SimpleAdsDemoTestRunner.java b/mopub-sample/src/test/java/com/mopub/mobileads/test/support/SimpleAdsDemoTestRunner.java
deleted file mode 100644
index 2bcaee0e..00000000
--- a/mopub-sample/src/test/java/com/mopub/mobileads/test/support/SimpleAdsDemoTestRunner.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import org.junit.runners.model.InitializationError;
-import org.mockito.MockitoAnnotations;
-import org.robolectric.DefaultTestLifecycle;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.TestLifecycle;
-
-public class SimpleAdsDemoTestRunner extends RobolectricTestRunner {
-
-    public SimpleAdsDemoTestRunner(Class<?> testClass) throws InitializationError {
-        super(testClass);
-    }
-
-    @Override
-    protected Class<? extends TestLifecycle> getTestLifecycleClass() {
-        return TestLifeCycleWithInjection.class;
-    }
-
-    public static class TestLifeCycleWithInjection extends DefaultTestLifecycle {
-        @Override
-        public void prepareTest(Object test) {
-            MockitoAnnotations.initMocks(test);
-        }
-    }
-}
diff --git a/mopub-sdk/AndroidManifest.xml b/mopub-sdk/AndroidManifest.xml
index 988c0a04..42216cc5 100644
--- a/mopub-sdk/AndroidManifest.xml
+++ b/mopub-sdk/AndroidManifest.xml
@@ -1,10 +1,11 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-		package="com.mopub.mobileads"
-		android:versionCode="1"
-		android:versionName="1.0">
-	<uses-sdk
+    package="com.mopub.mobileads"
+    android:versionCode="1"
+    android:versionName="1.0">
+    <uses-sdk
         android:minSdkVersion="9"
         android:targetSdkVersion="22"/>
     <application/>
-</manifest>
\ No newline at end of file
+</manifest>
+
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index c0bcc1e9..aa1b028a 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -1,22 +1,46 @@
 // This buildscript will assemble the MoPub SDK into an AAR.
 
+buildscript {
+    repositories {
+        mavenCentral()
+        jcenter()
+    }
+
+    dependencies {
+        classpath 'com.android.tools.build:gradle:1.2.3'
+        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
+        classpath 'org.robolectric:robolectric-gradle-plugin:1.1.0'
+    }
+}
+
+plugins {
+    id "com.jfrog.bintray" version "1.2"
+}
+
 repositories {
+    mavenCentral()
     jcenter()
 }
 
 apply plugin: 'com.android.library'
+apply plugin: 'com.github.dcendents.android-maven'
+apply plugin: 'org.robolectric'
 
-group = 'com.mopub'
+task wrapper(type: Wrapper) {
+    gradleVersion = '2.5'
+}
 
-description = '''MoPub SDK'''
+group = 'com.mopub'
+description = '''MoPub Android SDK'''
+version = '3.10.0'
 
 android {
     compileSdkVersion 22
     buildToolsVersion '22.0.1'
 
     defaultConfig {
-        versionCode 25
-        versionName "3.8.0"
+        versionCode 27
+        versionName version
         minSdkVersion 14
         targetSdkVersion 22
         consumerProguardFiles 'proguard.txt'
@@ -34,24 +58,151 @@ android {
         }
     }
 
+    testOptions {
+        unitTests {
+            // This causes android platform methods from the test JAR
+            // to return null, false, etc instead of throwing an exception.
+            // We should periodically disable this and tackle the broken tests
+            // as it exposes when we are hitting platform APIs in our tests.
+            // If these tests *require* platform APIs we may want to make them
+            // connected tests instead.
+            returnDefaultValues = true
+
+            // Test JVM settings since we have a lot of classes loaded.
+            all {
+                jvmArgs '-XX:MaxPermSize=4096m', '-Xmx8192m'
+                forkEvery 200
+            }
+        }
+    }
+
     buildTypes {
         release {
             minifyEnabled false
             proguardFiles getDefaultProguardFile('proguard-android.txt'), file('proguard.txt')
         }
+      
+        debug {
+            minifyEnabled false
+        }
     }
 }
 
+
 dependencies {
     compile 'com.android.support:support-v4:22.2.1'
     compile 'com.android.support:support-annotations:22.2.1'
+    compile 'com.android.support:recyclerview-v7:22.2.1'
     compile fileTree(dir: 'libs', include: 'amazon-ads-5.6.20.jar')
     compile 'com.mopub.volley:mopub-volley:1.1.0'
+
+    testCompile 'junit:junit:4.10'
+    testCompile 'org.robolectric:robolectric:2.4'
+    testCompile 'com.squareup:fest-android:1.0.7'
+    testCompile 'org.mockito:mockito-core:1.9.5'
 }
 
-// Don't run the Robolectric Unit Tests.
-check.dependsOn.remove("test")
-check.dependsOn.remove("unitTest")
-check.dependsOn.remove("testDebug")
-check.dependsOn.remove("unitTestDebug")
+def siteUrl = 'https://github.com/mopub/mopub-android-sdk'
+def gitUrl = 'https://github.com/mopub/mopub-android-sdk.git'
+// Put your credentials (bintray.user, bintray.apikey) in ~/.gradle/gradle.properties
+bintray {
+    user = project.hasProperty("bintray.user") ? project.getProperty("bintray.user") : ""
+    key = project.hasProperty("bintray.apikey") ? project.getProperty("bintray.apikey") : ""
+
+    configurations = ['archives']
+    publish = true
+
+    pkg {
+        repo = 'mopub-android-sdk'
+        name = 'mopub-android-sdk'
 
+        userOrg = 'mopub'
+        desc = description
+
+        websiteUrl = siteUrl
+        vcsUrl = gitUrl
+        licenses = ['Apache-2.0']
+
+        version {
+            name = project.version
+        }
+    }
+}
+
+install {
+    repositories.mavenInstaller {
+        pom {
+            project {
+                packaging 'aar'
+
+                name 'MoPub Android SDK'
+                url siteUrl
+
+                licenses {
+                    license {
+                        name 'MoPub SDK License'
+                        url 'http://www.mopub.com/legal/sdk-license-agreement/'
+                    }
+                }
+                developers {
+                    // ID corresponds to GitHub user name
+                    developer {
+                        id 'nathanshayefar'
+                        name 'Nathan Shayefar'
+                        email 'nshayefar@twitter.com'
+                    }
+                    developer {
+                        id 'joeblubaugh'
+                        name 'Joe Blubaugh'
+                        email 'joeblubaugh@twitter.com'
+                    }
+                    developer {
+                        id 'steffanc'
+                        name 'Steffan Chartrand'
+                        email 'schartrand@twitter.com'
+                    }
+                    developer {
+                        id 'aornelas'
+                        name 'Andrés Ornelas'
+                        email 'andres@twitter.com'
+                    }
+                    developer {
+                        id 'bichenwang'
+                        name 'Bichen Wang'
+                        email 'bwang@twitter.com'
+                    }
+                    developer {
+                        id 'nathank33'
+                        name 'Nathan Braun'
+                        email 'nbraun@twitter.com'
+                    }
+                }
+                scm {
+                    connection gitUrl
+                    developerConnection gitUrl
+                    url siteUrl
+                }
+            }
+        }
+    }
+}
+
+task sourcesJar(type: Jar) {
+    from android.sourceSets.main.java.srcDirs
+    classifier = 'sources'
+}
+
+task javadoc(type: Javadoc) {
+    source = android.sourceSets.main.java.srcDirs
+    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
+}
+
+task javadocJar(type: Jar, dependsOn: javadoc) {
+    classifier = 'javadoc'
+    from javadoc.destinationDir
+}
+
+artifacts {
+    archives javadocJar
+    archives sourcesJar
+}
diff --git a/mopub-sdk/gradle/wrapper/gradle-wrapper.jar b/mopub-sdk/gradle/wrapper/gradle-wrapper.jar
index 3c7abdf1..30d399d8 100644
Binary files a/mopub-sdk/gradle/wrapper/gradle-wrapper.jar and b/mopub-sdk/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/mopub-sdk/gradle/wrapper/gradle-wrapper.properties b/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
index d27e87ae..75f1f3fd 100644
--- a/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
+++ b/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Thu Mar 20 15:07:53 PDT 2014
+#Fri Jul 24 16:59:31 PDT 2015
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=http\://services.gradle.org/distributions/gradle-1.11-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.5-bin.zip
diff --git a/mopub-sdk/pom.xml b/mopub-sdk/pom.xml
index 9b391fc2..caee1e26 100644
--- a/mopub-sdk/pom.xml
+++ b/mopub-sdk/pom.xml
@@ -15,10 +15,6 @@
     <name>MoPub SDK</name>
     <description>The SDK for MoPub developers.</description>
 
-    <properties>
-        <robolectric.version>2.1</robolectric.version>
-    </properties>
-
     <dependencies>
 
         <!--main-->
@@ -35,49 +31,20 @@
             <type>aar</type>
         </dependency>
 
+        <dependency>
+            <groupId>com.android.support</groupId>
+            <artifactId>recyclerview-v7</artifactId>
+            <version>22.0.0</version>
+            <type>aar</type>
+        </dependency>
+        
         <dependency>
             <groupId>com.mopub.volley</groupId>
             <artifactId>mopub-volley</artifactId>
             <version>1.1.0</version>
         </dependency>
 
-        <!--test-->
-        <dependency>
-            <groupId>org.apache.httpcomponents</groupId>
-            <artifactId>httpclient</artifactId>
-            <version>4.0.3</version>
-            <scope>test</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>com.squareup</groupId>
-            <artifactId>fest-android</artifactId>
-            <version>1.0.7</version>
-            <scope>test</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>junit</groupId>
-            <artifactId>junit-dep</artifactId>
-            <version>4.10</version>
-            <scope>test</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>org.mockito</groupId>
-            <artifactId>mockito-core</artifactId>
-            <version>1.9.5</version>
-            <scope>test</scope>
-        </dependency>
-
-        <!--android & robolectric-->
-        <dependency>
-            <groupId>org.robolectric</groupId>
-            <artifactId>robolectric</artifactId>
-            <version>${robolectric.version}</version>
-            <scope>test</scope>
-        </dependency>
-
+        <!--android & oobolectric-->
         <dependency>
             <groupId>com.google.android</groupId>
             <artifactId>android</artifactId>
@@ -93,9 +60,22 @@
             <plugin>
                 <artifactId>maven-compiler-plugin</artifactId>
                 <version>2.3.2</version>
+                <!-- Skip tests. We use Gradle to build and run tests. -->
+                <executions>
+                    <execution>
+                        <id>default-testCompile</id>
+                        <phase>test-compile</phase>
+                        <goals>
+                            <goal>testCompile</goal>
+                        </goals>
+                        <configuration>
+                            <skip>true</skip>
+                        </configuration>
+                    </execution>
+                </executions>
                 <configuration>
-                    <source>1.6</source>
-                    <target>1.6</target>
+                    <source>7</source>
+                    <target>7</target>
                 </configuration>
             </plugin>
             <plugin>
@@ -113,18 +93,6 @@
                 </configuration>
                 <extensions>true</extensions>
             </plugin>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-surefire-plugin</artifactId>
-                <version>2.6</version>
-                <configuration>
-                    <argLine>-Xms512m -Xmx1024m -XX:MaxPermSize=256m</argLine>
-                    <excludes>
-                        <exclude>**/Test*.java</exclude>
-                    </excludes>
-                    <parallel>classesAndMethods</parallel>
-                </configuration>
-            </plugin>
         </plugins>
     </build>
 </project>
diff --git a/mopub-sdk/src/main/java/com/mopub/common/BrowserWebViewClient.java b/mopub-sdk/src/main/java/com/mopub/common/BrowserWebViewClient.java
new file mode 100644
index 00000000..33d94acb
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/BrowserWebViewClient.java
@@ -0,0 +1,99 @@
+package com.mopub.common;
+
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.NonNull;
+import android.text.TextUtils;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
+
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.exceptions.IntentNotResolvableException;
+
+import java.util.EnumSet;
+
+import static com.mopub.common.util.Drawables.LEFT_ARROW;
+import static com.mopub.common.util.Drawables.RIGHT_ARROW;
+import static com.mopub.common.util.Drawables.UNLEFT_ARROW;
+import static com.mopub.common.util.Drawables.UNRIGHT_ARROW;
+
+class BrowserWebViewClient extends WebViewClient {
+
+    private static final EnumSet<UrlAction> SUPPORTED_URL_ACTIONS = EnumSet.of(
+            UrlAction.HANDLE_PHONE_SCHEME,
+            UrlAction.OPEN_APP_MARKET,
+            UrlAction.OPEN_IN_APP_BROWSER,
+            UrlAction.HANDLE_SHARE_TWEET,
+            UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK,
+            UrlAction.FOLLOW_DEEP_LINK
+    );
+
+    @NonNull
+    private MoPubBrowser mMoPubBrowser;
+
+    public BrowserWebViewClient(@NonNull final MoPubBrowser moPubBrowser) {
+        mMoPubBrowser = moPubBrowser;
+    }
+
+    @Override
+    public void onReceivedError(WebView view, int errorCode, String description,
+            String failingUrl) {
+        MoPubLog.d("MoPubBrowser error: " + description);
+    }
+
+    @Override
+    public boolean shouldOverrideUrlLoading(WebView view, String url) {
+        if (TextUtils.isEmpty(url)) {
+            return false;
+        }
+
+        UrlHandler urlHandler = new UrlHandler.Builder()
+                .withSupportedUrlActions(SUPPORTED_URL_ACTIONS)
+                .withoutMoPubBrowser()
+                .withResultActions(new UrlHandler.ResultActions() {
+                    @Override
+                    public void urlHandlingSucceeded(@NonNull String url,
+                            @NonNull UrlAction urlAction) {
+                        if (urlAction.equals(UrlAction.OPEN_IN_APP_BROWSER)) {
+                            mMoPubBrowser.getWebView().loadUrl(url);
+                        } else {
+                            // UrlAction opened in external app, so close MoPubBrowser
+                            mMoPubBrowser.finish();
+                        }
+                    }
+
+                    @Override
+                    public void urlHandlingFailed(@NonNull String url,
+                            @NonNull UrlAction lastFailedUrlAction) {
+                    }
+                })
+                .build();
+
+        return urlHandler.handleResolvedUrl(mMoPubBrowser.getApplicationContext(), url,
+                true, // = fromUserInteraction
+                null // = trackingUrls
+        );
+    }
+
+    @Override
+    public void onPageStarted(WebView view, String url, Bitmap favicon) {
+        super.onPageStarted(view, url, favicon);
+        mMoPubBrowser.getForwardButton()
+                .setImageDrawable(UNRIGHT_ARROW.createDrawable(mMoPubBrowser));
+    }
+
+    @Override
+    public void onPageFinished(WebView view, String url) {
+        super.onPageFinished(view, url);
+
+        Drawable backImageDrawable = view.canGoBack()
+                ? LEFT_ARROW.createDrawable(mMoPubBrowser)
+                : UNLEFT_ARROW.createDrawable(mMoPubBrowser);
+        mMoPubBrowser.getBackButton().setImageDrawable(backImageDrawable);
+
+        Drawable forwardImageDrawable = view.canGoForward()
+                ? RIGHT_ARROW.createDrawable(mMoPubBrowser)
+                : UNRIGHT_ARROW.createDrawable(mMoPubBrowser);
+        mMoPubBrowser.getForwardButton().setImageDrawable(forwardImageDrawable);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/CacheService.java b/mopub-sdk/src/main/java/com/mopub/common/CacheService.java
index 81f77af7..58cd1cf5 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/CacheService.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/CacheService.java
@@ -1,12 +1,12 @@
 package com.mopub.common;
 
 import android.content.Context;
-import android.graphics.Bitmap;
 import android.os.AsyncTask;
-import android.support.v4.util.LruCache;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
-import com.mopub.common.util.DeviceUtils;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.DeviceUtils;
 import com.mopub.common.util.Streams;
 import com.mopub.common.util.Utils;
 
@@ -40,6 +40,10 @@ public static boolean initializeDiskCache(final Context context) {
 
         if (sDiskLruCache == null) {
             final File cacheDirectory = getDiskCacheDirectory(context);
+            if (cacheDirectory == null) {
+                return false;
+            }
+
             final long diskCacheSizeBytes = DeviceUtils.diskCacheSizeBytes(cacheDirectory);
             try {
                 sDiskLruCache = open(
@@ -50,6 +54,7 @@ public static boolean initializeDiskCache(final Context context) {
                 );
             } catch (IOException e) {
                 MoPubLog.d("Unable to create DiskLruCache", e);
+                return false;
             }
         }
         return true;
@@ -63,8 +68,14 @@ public static String createValidDiskCacheKey(final String key) {
         return Utils.sha1(key);
     }
 
-    public static File getDiskCacheDirectory(final Context context) {
-        final String cachePath = context.getCacheDir().getPath();
+    @Nullable
+    public static File getDiskCacheDirectory(@NonNull final Context context) {
+        final File cacheDir = context.getCacheDir();
+        if (cacheDir == null) {
+            return null;
+        }
+
+        final String cachePath = cacheDir.getPath();
         return new File(cachePath + File.separator + UNIQUE_CACHE_NAME);
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java b/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java
index c1161d70..09c16730 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java
@@ -4,10 +4,9 @@
 import android.net.http.AndroidHttpClient;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.text.TextUtils;
-import android.webkit.WebView;
 
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.network.Networking;
 
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.client.params.HttpClientParams;
@@ -25,11 +24,9 @@
 public class HttpClient {
     private static final int CONNECTION_TIMEOUT = 10000;
     private static final int SOCKET_TIMEOUT = 10000;
-    private static final String DEFAULT_USER_AGENT = System.getProperty("http.agent");
-    private static String sWebViewUserAgent;
 
     public static AndroidHttpClient getHttpClient() {
-        final String userAgent = getWebViewUserAgent(DEFAULT_USER_AGENT);
+        final String userAgent = Networking.getCachedUserAgent();
 
         AndroidHttpClient httpClient = AndroidHttpClient.newInstance(userAgent);
 
@@ -58,13 +55,13 @@ public static HttpGet initializeHttpGet(@NonNull String url, @Nullable final Con
 
         final HttpGet httpGet = new HttpGet(getUrl);
 
-        if (getWebViewUserAgent() == null && context != null) {
-            // Memoize the user agent since creating WebViews is expensive
-            setWebViewUserAgent(new WebView(context).getSettings().getUserAgentString());
+        final String webViewUserAgent;
+        if (context != null) {
+            webViewUserAgent = Networking.getUserAgent(context);
+        } else {
+            webViewUserAgent = Networking.getCachedUserAgent();
         }
 
-
-        final String webViewUserAgent = getWebViewUserAgent();
         if (webViewUserAgent != null) {
             httpGet.addHeader(USER_AGENT.getKey(), webViewUserAgent);
         }
@@ -137,26 +134,4 @@ static URI encodeUrl(@NonNull String urlString) throws Exception {
         }
         return uri;
     }
-
-    /**
-     * @param defaultUserAgent the String to return if the WebView user agent hasn't been generated.
-     * @return the user agent of an Android WebView, or {@code defaultUserAgent}
-     */
-    public synchronized static String getWebViewUserAgent(String defaultUserAgent) {
-        if (TextUtils.isEmpty(sWebViewUserAgent)) {
-            return defaultUserAgent;
-        }
-        return sWebViewUserAgent;
-    }
-
-    /**
-     * @return the user agent of an Android WebView or {@code null}
-     */
-    public synchronized static String getWebViewUserAgent() {
-        return getWebViewUserAgent(null);
-    }
-
-    public synchronized static void setWebViewUserAgent(final String userAgent) {
-        sWebViewUserAgent = userAgent;
-    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
index 12e2921d..f9cca092 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
@@ -8,7 +8,7 @@
 import com.mopub.mobileads.MoPubRewardedVideoManager;
 
 public class MoPub {
-    public static final String SDK_VERSION = "3.8.0";
+    public static final String SDK_VERSION = "3.10.0";
 
     public static enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java b/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
index af2ffbe4..8a92ddc6 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
@@ -3,11 +3,10 @@
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
-import android.graphics.Bitmap;
 import android.graphics.Color;
 import android.graphics.drawable.Drawable;
-import android.net.Uri;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.view.Gravity;
 import android.view.View;
 import android.view.ViewGroup;
@@ -16,7 +15,6 @@
 import android.webkit.WebChromeClient;
 import android.webkit.WebSettings;
 import android.webkit.WebView;
-import android.webkit.WebViewClient;
 import android.widget.ImageButton;
 import android.widget.LinearLayout;
 import android.widget.RelativeLayout;
@@ -25,6 +23,8 @@
 import com.mopub.mobileads.BaseWebView;
 import com.mopub.mobileads.util.WebViews;
 
+import java.util.EnumSet;
+
 import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
 import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
 import static com.mopub.common.util.Drawables.BACKGROUND;
@@ -32,9 +32,6 @@
 import static com.mopub.common.util.Drawables.LEFT_ARROW;
 import static com.mopub.common.util.Drawables.REFRESH;
 import static com.mopub.common.util.Drawables.RIGHT_ARROW;
-import static com.mopub.common.util.Drawables.UNLEFT_ARROW;
-import static com.mopub.common.util.Drawables.UNRIGHT_ARROW;
-import static com.mopub.common.util.Intents.deviceCanHandleIntent;
 
 public class MoPubBrowser extends Activity {
     public static final String DESTINATION_URL_KEY = "URL";
@@ -46,6 +43,31 @@
     private ImageButton mRefreshButton;
     private ImageButton mCloseButton;
 
+    @NonNull
+    public ImageButton getBackButton() {
+        return mBackButton;
+    }
+
+    @NonNull
+    public ImageButton getCloseButton() {
+        return mCloseButton;
+    }
+
+    @NonNull
+    public ImageButton getForwardButton() {
+        return mForwardButton;
+    }
+
+    @NonNull
+    public ImageButton getRefreshButton() {
+        return mRefreshButton;
+    }
+
+    @NonNull
+    public WebView getWebView() {
+        return mWebView;
+    }
+
     public static void open(final Context context, final String url) {
         MoPubLog.d("Opening url in MoPubBrowser: " + url);
         final Intent intent = new Intent(context, MoPubBrowser.class);
@@ -85,51 +107,8 @@ private void initializeWebView() {
         webSettings.setUseWideViewPort(true);
 
         mWebView.loadUrl(getIntent().getStringExtra(DESTINATION_URL_KEY));
-        mWebView.setWebViewClient(new WebViewClient() {
-            @Override
-            public void onReceivedError(WebView view, int errorCode, String description,
-                    String failingUrl) {
-                MoPubLog.d("MoPubBrowser error: " + description);
-            }
 
-            @Override
-            public boolean shouldOverrideUrlLoading(WebView view, String url) {
-                if (url == null) {
-                    return false;
-                }
-
-                final Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
-                if (UrlAction.FOLLOW_DEEP_LINK.shouldTryHandlingUrl(Uri.parse(url))
-                        && deviceCanHandleIntent(MoPubBrowser.this, intent)) {
-                    startActivity(intent);
-                    finish();
-                    return true;
-                } else {
-                    return false;
-                }
-            }
-
-            @Override
-            public void onPageStarted(WebView view, String url, Bitmap favicon) {
-                super.onPageStarted(view, url, favicon);
-                mForwardButton.setImageDrawable(UNRIGHT_ARROW.createDrawable(MoPubBrowser.this));
-            }
-
-            @Override
-            public void onPageFinished(WebView view, String url) {
-                super.onPageFinished(view, url);
-
-                Drawable backImageDrawable = view.canGoBack()
-                        ? LEFT_ARROW.createDrawable(MoPubBrowser.this)
-                        : UNLEFT_ARROW.createDrawable(MoPubBrowser.this);
-                mBackButton.setImageDrawable(backImageDrawable);
-
-                Drawable forwardImageDrawable = view.canGoForward()
-                        ? RIGHT_ARROW.createDrawable(MoPubBrowser.this)
-                        : UNRIGHT_ARROW.createDrawable(MoPubBrowser.this);
-                mForwardButton.setImageDrawable(forwardImageDrawable);
-            }
-        });
+        mWebView.setWebViewClient(new BrowserWebViewClient(this));
 
         mWebView.setWebChromeClient(new WebChromeClient() {
             public void onProgressChanged(WebView webView, int progress) {
diff --git a/mopub-sdk/src/main/java/com/mopub/common/Preconditions.java b/mopub-sdk/src/main/java/com/mopub/common/Preconditions.java
index 126ff4b4..ca5a52ec 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/Preconditions.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/Preconditions.java
@@ -184,6 +184,8 @@ public static boolean checkState(boolean expression,
 
         /**
          * Ensures that an object reference is not null.
+         *
+         * @returns true if
          */
         public static boolean checkNotNull(Object reference) {
             return checkNotNullInternal(reference, sStrictMode, "Object can not be null.",
diff --git a/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java b/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java
index d8fd9c92..d2b5a438 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java
@@ -4,17 +4,19 @@
 import android.content.Intent;
 import android.net.Uri;
 import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
+import com.mopub.common.event.BaseEvent;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Intents;
 import com.mopub.exceptions.IntentNotResolvableException;
 import com.mopub.exceptions.UrlParseException;
 
+import java.util.List;
+
 import static com.mopub.common.Constants.HTTP;
 import static com.mopub.common.Constants.HTTPS;
-import static com.mopub.common.UrlHandler.MoPubSchemeListener;
+import static com.mopub.network.TrackingRequest.makeTrackingHttpRequest;
 
 /**
  * {@code UrlAction} describes the different kinds of actions for URLs that {@link UrlHandler} can
@@ -36,11 +38,13 @@ public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
         }
 
         @Override
-        protected void performAction(@NonNull final Context context, @NonNull final Uri uri,
-                final boolean skipShowMoPubBrowser,
-                @Nullable final MoPubSchemeListener moPubSchemeListener)
+        protected void performAction(
+                @NonNull final Context context, @NonNull final Uri uri,
+                @NonNull final UrlHandler urlHandler)
                 throws IntentNotResolvableException {
             final String host = uri.getHost();
+            final UrlHandler.MoPubSchemeListener moPubSchemeListener =
+                    urlHandler.getMoPubSchemeListener();
 
             if ("finishLoad".equals(host)) {
                 moPubSchemeListener.onFinishLoad();
@@ -61,9 +65,9 @@ public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
         }
 
         @Override
-        protected void performAction(@NonNull final Context context, @NonNull final Uri uri,
-                final boolean skipShowMoPubBrowser,
-                @Nullable final MoPubSchemeListener moPubSchemeListener)
+        protected void performAction(
+                @NonNull final Context context, @NonNull final Uri uri,
+                @NonNull final UrlHandler urlHandler)
                 throws IntentNotResolvableException {
             MoPubLog.d("Link to about page ignored.");
         }
@@ -80,9 +84,9 @@ public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
         }
 
         @Override
-        protected void performAction(@NonNull final Context context, @NonNull final Uri uri,
-                final boolean skipShowMoPubBrowser,
-                @Nullable final MoPubSchemeListener moPubSchemeListener)
+        protected void performAction(
+                @NonNull final Context context, @NonNull final Uri uri,
+                @NonNull final UrlHandler urlHandler)
                 throws IntentNotResolvableException {
             final String errorMessage = "Could not handle intent with URI: " + uri + "\n\tIs " +
                     "this intent supported on your phone?";
@@ -97,9 +101,9 @@ public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
         }
 
         @Override
-        protected void performAction(@NonNull final Context context, @NonNull final Uri uri,
-                final boolean skipShowMoPubBrowser,
-                @Nullable final MoPubSchemeListener moPubSchemeListener)
+        protected void performAction(
+                @NonNull final Context context, @NonNull final Uri uri,
+                @NonNull final UrlHandler urlHandler)
                 throws IntentNotResolvableException {
             final String errorMessage = "Unable to load mopub native browser url: " + uri;
             try {
@@ -124,9 +128,9 @@ public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
         }
 
         @Override
-        protected void performAction(@NonNull final Context context, @NonNull final Uri uri,
-                final boolean skipShowMoPubBrowser,
-                @Nullable final MoPubSchemeListener moPubSchemeListener)
+        protected void performAction(
+                @NonNull final Context context, @NonNull final Uri uri,
+                @NonNull final UrlHandler urlHandler)
                 throws IntentNotResolvableException {
             Intents.launchApplicationUrl(context, uri);
         }
@@ -140,11 +144,11 @@ public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
         }
 
         @Override
-        protected void performAction(@NonNull final Context context, @NonNull final Uri uri,
-                final boolean skipShowMoPubBrowser,
-                @Nullable final MoPubSchemeListener moPubSchemeListener)
+        protected void performAction(
+                @NonNull final Context context, @NonNull final Uri uri,
+                @NonNull final UrlHandler urlHandler)
                 throws IntentNotResolvableException {
-            if (!skipShowMoPubBrowser) {
+            if (!urlHandler.shouldSkipShowMoPubBrowser()) {
                 Intents.showMoPubBrowserForUrl(context, uri);
             }
         }
@@ -162,9 +166,9 @@ public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
         }
 
         @Override
-        protected void performAction(@NonNull final Context context, @NonNull final Uri uri,
-                final boolean skipShowMoPubBrowser,
-                @Nullable final MoPubSchemeListener moPubSchemeListener)
+        protected void performAction(
+                @NonNull final Context context, @NonNull final Uri uri,
+                @NonNull final UrlHandler urlHandler)
                 throws IntentNotResolvableException {
             Preconditions.checkNotNull(context);
             Preconditions.checkNotNull(uri);
@@ -181,7 +185,80 @@ protected void performAction(@NonNull final Context context, @NonNull final Uri
         }
     },
 
-    /* 7 */ FOLLOW_DEEP_LINK(true) {
+    /* 7 */ FOLLOW_DEEP_LINK_WITH_FALLBACK(true) {
+        @Override
+        public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
+            return "deeplink+".equalsIgnoreCase(uri.getScheme());
+        }
+
+        @Override
+        protected void performAction(
+                @NonNull final Context context, @NonNull final Uri uri,
+                @NonNull final UrlHandler urlHandler)
+                throws IntentNotResolvableException {
+
+            // 1. Parse the URL as a valid deeplink+
+            if (!"navigate".equalsIgnoreCase(uri.getHost())) {
+                throw new IntentNotResolvableException("Deeplink+ URL did not have 'navigate' as" +
+                        " the host.");
+            }
+
+            final String primaryUrl;
+            final List<String> primaryTrackingUrls;
+            final String fallbackUrl;
+            final List<String> fallbackTrackingUrls;
+            try {
+                primaryUrl = uri.getQueryParameter("primaryUrl");
+                primaryTrackingUrls = uri.getQueryParameters("primaryTrackingUrl");
+                fallbackUrl = uri.getQueryParameter("fallbackUrl");
+                fallbackTrackingUrls = uri.getQueryParameters("fallbackTrackingUrl");
+            } catch (UnsupportedOperationException e) {
+                // If the URL is not hierarchical, getQueryParameter[s] will throw
+                // UnsupportedOperationException (see http://developer.android.com/reference/android/net/Uri.html#getQueryParameter(java.lang.String)
+                throw new IntentNotResolvableException("Deeplink+ URL was not a hierarchical" +
+                        " URI.");
+            }
+
+            if (primaryUrl == null) {
+                throw new IntentNotResolvableException("Deeplink+ did not have 'primaryUrl' query" +
+                        " param.");
+            }
+
+            final Uri primaryUri = Uri.parse(primaryUrl);
+            if (shouldTryHandlingUrl(primaryUri)) {
+                // Nested Deeplink+ URLs are not allowed
+                throw new IntentNotResolvableException("Deeplink+ had another Deeplink+ as the " +
+                        "'primaryUrl'.");
+            }
+
+            // 2. Attempt to handle the primary URL
+            try {
+                Intents.launchApplicationUrl(context, primaryUri);
+                makeTrackingHttpRequest(primaryTrackingUrls, context, BaseEvent.Name.CLICK_REQUEST);
+                return;
+            } catch (IntentNotResolvableException e) {
+                // Primary URL failed; proceed to attempt fallback URL
+            }
+
+            // 3. Attempt to handle the fallback URL
+            if (fallbackUrl == null) {
+                throw new IntentNotResolvableException("Unable to handle 'primaryUrl' for " +
+                        "Deeplink+ and 'fallbackUrl' was missing.");
+            }
+
+            if (shouldTryHandlingUrl(Uri.parse(fallbackUrl))) {
+                // Nested Deeplink+ URLs are not allowed
+                throw new IntentNotResolvableException("Deeplink+ URL had another Deeplink+ " +
+                        "URL as the 'fallbackUrl'.");
+            }
+
+            // UrlAction.handleUrl already verified this comes from a user interaction
+            final boolean fromUserInteraction = true;
+            urlHandler.handleUrl(context, fallbackUrl, true, fallbackTrackingUrls);
+        }
+    },
+
+    /* 8 */ FOLLOW_DEEP_LINK(true) {
         @Override
         public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
             final String scheme = uri.getScheme();
@@ -190,9 +267,9 @@ public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
         }
 
         @Override
-        protected void performAction(@NonNull final Context context, @NonNull final Uri uri,
-                final boolean skipShowMoPubBrowser,
-                @Nullable final MoPubSchemeListener moPubSchemeListener)
+        protected void performAction(
+                @NonNull final Context context, @NonNull final Uri uri,
+                @NonNull final UrlHandler urlHandler)
                 throws IntentNotResolvableException {
             Intents.launchApplicationUrl(context, uri);
         }
@@ -206,26 +283,24 @@ public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
         }
 
         @Override
-        protected void performAction(@NonNull final Context context, @NonNull final Uri uri,
-                final boolean skipShowMoPubBrowser,
-                @Nullable final MoPubSchemeListener moPubSchemeListener)
+        protected void performAction(
+                @NonNull final Context context, @NonNull final Uri uri,
+                @NonNull final UrlHandler urlHandler)
                 throws IntentNotResolvableException { }
     };
 
     public void handleUrl(
+            UrlHandler urlHandler,
             @NonNull final Context context,
             @NonNull final Uri destinationUri,
-            final boolean fromUserInteraction,
-            final boolean skipShowMoPubBrowser,
-            @Nullable final MoPubSchemeListener moPubSchemeListener)
+            final boolean fromUserInteraction)
             throws IntentNotResolvableException {
         MoPubLog.d("Ad event URL: " + destinationUri);
         if (mRequiresUserInteraction && !fromUserInteraction) {
             throw new IntentNotResolvableException("Attempted to handle action without user " +
                     "interaction.");
         } else {
-            performAction(context, destinationUri, skipShowMoPubBrowser,
-                    moPubSchemeListener);
+            performAction(context, destinationUri, urlHandler);
         }
     }
 
@@ -238,9 +313,7 @@ public void handleUrl(
     public abstract boolean shouldTryHandlingUrl(@NonNull final Uri uri);
 
     protected abstract void performAction(
-            @NonNull final Context context,
-            @NonNull final Uri uri,
-            final boolean skipShowMoPubBrowser,
-            @Nullable final MoPubSchemeListener moPubSchemeListener)
+            @NonNull final Context context, @NonNull final Uri uri,
+            @NonNull final UrlHandler urlHandler)
             throws IntentNotResolvableException;
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/UrlHandler.java b/mopub-sdk/src/main/java/com/mopub/common/UrlHandler.java
index 9d62edc1..74abd946 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/UrlHandler.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/UrlHandler.java
@@ -6,12 +6,15 @@
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
+import com.mopub.common.event.BaseEvent;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Intents;
 import com.mopub.exceptions.IntentNotResolvableException;
 
 import java.util.EnumSet;
 
+import static com.mopub.common.UrlResolutionTask.UrlResolutionListener;
+import static com.mopub.network.TrackingRequest.makeTrackingHttpRequest;
 
 /**
  * {@code UrlHandler} facilitates handling user clicks on different URLs, allowing configuration
@@ -72,8 +75,7 @@ void urlHandlingFailed(@NonNull final String url,
          * @param first A {@code UrlAction} for the {@code UrlHandler} to support.
          * @param others An arbitrary number of {@code UrlAction}s for the {@code UrlHandler} to
          * support.
-         * @return A {@link com.mopub.common.UrlHandler.Builder} with the desired supported
-         * {@code UrlAction}s added.
+         * @return A {@link Builder} with the desired supported {@code UrlAction}s added.
          */
         public Builder withSupportedUrlActions(@NonNull final UrlAction first,
                 @Nullable final UrlAction... others) {
@@ -81,13 +83,25 @@ public Builder withSupportedUrlActions(@NonNull final UrlAction first,
             return this;
         }
 
+        /**
+         * Sets the {@link UrlAction}s to support in the {@code UrlHandler} to build.
+         *
+         * @param supportedUrlActions An {@code EnumSet} of {@code UrlAction}s for the
+         * {@code UrlHandler} to support.
+         * @return A {@link Builder} with the desired supported {@code UrlAction}s added.
+         */
+        public Builder withSupportedUrlActions(
+                @NonNull final EnumSet<UrlAction> supportedUrlActions) {
+            this.supportedUrlActions = EnumSet.copyOf(supportedUrlActions);
+            return this;
+        }
+        
         /**
          * Sets the {@link ResultActions} for the {@code UrlHandler} to
          * build.
          *
          * @param resultActions A {@code ClickListener} for the {@code UrlHandler}.
-         * @return A {@link com.mopub.common.UrlHandler.Builder} with the desired
-         * {@code ClickListener} added.
+         * @return A {@link Builder} with the desired {@code ClickListener} added.
          */
         public Builder withResultActions(@NonNull final ResultActions resultActions) {
             this.resultActions = resultActions;
@@ -95,12 +109,10 @@ public Builder withResultActions(@NonNull final ResultActions resultActions) {
         }
 
         /**
-         * Sets the {@link com.mopub.common.UrlHandler.MoPubSchemeListener} for the
-         * {@code UrlHandler} to build.
+         * Sets the {@link MoPubSchemeListener} for the {@code UrlHandler} to build.
          *
          * @param moPubSchemeListener A {@code MoPubSchemeListener} for the {@code UrlHandler}.
-         * @return A {@link com.mopub.common.UrlHandler.Builder} with the desired
-         * {@code MoPubSchemeListener} added.
+         * @return A {@link Builder} with the desired {@code MoPubSchemeListener} added.
          */
         public Builder withMoPubSchemeListener(
                 @NonNull final MoPubSchemeListener moPubSchemeListener) {
@@ -112,8 +124,7 @@ public Builder withMoPubSchemeListener(
          * If called, will avoid starting a {@link MoPubBrowser} activity where applicable.
          * (see {@link Intents#showMoPubBrowserForUrl(Context, Uri)})
          *
-         * @return A {@link com.mopub.common.UrlHandler.Builder} that will skip starting a
-         * {@code MoPubBrowser}.
+         * @return A {@link Builder} that will skip starting a {@code MoPubBrowser}.
          */
         public Builder withoutMoPubBrowser() {
             this.skipShowMoPubBrowser = true;
@@ -122,7 +133,7 @@ public Builder withoutMoPubBrowser() {
 
         /**
          * Creates an immutable {@link UrlHandler} with the desired configuration, according to the
-         * other {@link com.mopub.common.UrlHandler.Builder} methods called before.
+         * other {@link Builder} methods called before.
          *
          * @return An immutable {@code UrlHandler} with the desired configuration.
          */
@@ -155,20 +166,42 @@ public void urlHandlingFailed(@NonNull String url, @NonNull UrlAction lastFailed
     @NonNull
     private MoPubSchemeListener mMoPubSchemeListener;
     private boolean mSkipShowMoPubBrowser;
+    private boolean mAlreadySucceeded;
+    private boolean mTaskPending;
 
     /**
-     * Do not instantiate UrlHandler directly; use {@link com.mopub.common.UrlHandler.Builder}
-     * instead.
+     * Do not instantiate UrlHandler directly; use {@link Builder} instead.
      */
     private UrlHandler(
             @NonNull final EnumSet<UrlAction> supportedUrlActions,
             @NonNull final ResultActions resultActions,
             @NonNull final MoPubSchemeListener moPubSchemeListener,
             final boolean skipShowMoPubBrowser) {
+        mSupportedUrlActions = EnumSet.copyOf(supportedUrlActions);
         mResultActions = resultActions;
         mMoPubSchemeListener = moPubSchemeListener;
         mSkipShowMoPubBrowser = skipShowMoPubBrowser;
-        mSupportedUrlActions = supportedUrlActions;
+        mAlreadySucceeded = false;
+        mTaskPending = false;
+    }
+
+    @NonNull
+    EnumSet<UrlAction> getSupportedUrlActions() {
+        return EnumSet.copyOf(mSupportedUrlActions);
+    }
+
+    @NonNull
+    ResultActions getResultActions() {
+        return mResultActions;
+    }
+
+    @NonNull
+    MoPubSchemeListener getMoPubSchemeListener() {
+        return mMoPubSchemeListener;
+    }
+
+    boolean shouldSkipShowMoPubBrowser() {
+        return mSkipShowMoPubBrowser;
     }
 
     /**
@@ -179,6 +212,8 @@ private UrlHandler(
      * @param destinationUrl The URL to handle.
      */
     public void handleUrl(@NonNull final Context context, @NonNull final String destinationUrl) {
+        Preconditions.checkNotNull(context);
+
         handleUrl(context, destinationUrl, true);
     }
 
@@ -192,33 +227,106 @@ public void handleUrl(@NonNull final Context context, @NonNull final String dest
      */
     public void handleUrl(@NonNull final Context context, @NonNull final String destinationUrl,
             final boolean fromUserInteraction) {
-        UrlAction lastFailedUrlAction = UrlAction.NOOP;
+        Preconditions.checkNotNull(context);
+
+        handleUrl(context, destinationUrl, fromUserInteraction, null);
+    }
+
+    /**
+     * Follows any redirects from {@code destinationUrl} and then handles the URL accordingly.
+     *
+     * @param context The activity context.
+     * @param destinationUrl The URL to handle.
+     * @param fromUserInteraction Whether this handling was triggered from a user interaction.
+     * @param trackingUrls Optional tracking URLs to trigger on success
+     */
+    public void handleUrl(@NonNull final Context context, @NonNull final String destinationUrl,
+            final boolean fromUserInteraction, @Nullable final Iterable<String> trackingUrls) {
+        Preconditions.checkNotNull(context);
 
         if (TextUtils.isEmpty(destinationUrl)) {
-            MoPubLog.d("Attempted to handle empty url.");
-        } else {
-            final Uri destinationUri = Uri.parse(destinationUrl);
-            for (final UrlAction urlAction : mSupportedUrlActions) {
-                if (urlAction.shouldTryHandlingUrl(destinationUri)) {
-                    try {
-                        urlAction.handleUrl(context, destinationUri, fromUserInteraction,
-                                mSkipShowMoPubBrowser, mMoPubSchemeListener);
-                        if (!UrlAction.IGNORE_ABOUT_SCHEME.equals(urlAction) &&
-                                !UrlAction.HANDLE_MOPUB_SCHEME.equals(urlAction)) {
-                            mResultActions.urlHandlingSucceeded(destinationUri.toString(),
-                                    urlAction);
-                        }
-                        return;
-                    } catch (IntentNotResolvableException e) {
-                        MoPubLog.d(e.getMessage(), e);
-                        lastFailedUrlAction = urlAction;
-                        // continue trying to match...
+            failUrlHandling(destinationUrl, null, "Attempted to handle empty url.", null);
+            return;
+        }
+
+        final UrlResolutionListener urlResolutionListener = new UrlResolutionListener() {
+            @Override
+            public void onSuccess(@NonNull final String resolvedUrl) {
+                mTaskPending = false;
+                handleResolvedUrl(context, resolvedUrl, fromUserInteraction, trackingUrls);
+            }
+
+            @Override
+            public void onFailure(@NonNull final String message,
+                    @Nullable final Throwable throwable) {
+                mTaskPending = false;
+                failUrlHandling(destinationUrl, null, message, throwable);
+
+            }
+
+        };
+
+        UrlResolutionTask.getResolvedUrl(destinationUrl, urlResolutionListener);
+        mTaskPending = true;
+    }
+
+    /**
+     * Performs the actual url handling by verifying that the {@code destinationUrl} is one of
+     * the configured supported {@link UrlAction}s and then handling it accordingly.
+     *
+     * @param context The activity context.
+     * @param url The URL to handle.
+     * @param fromUserInteraction Whether this handling was triggered from a user interaction.
+     * @param trackingUrls Optional tracking URLs to trigger on success
+     * @return true if the given URL was successfully handled; false otherwise
+     */
+    public boolean handleResolvedUrl(@NonNull final Context context,
+            @NonNull final String url, final boolean fromUserInteraction,
+            @Nullable Iterable<String> trackingUrls) {
+        if (TextUtils.isEmpty(url)) {
+            failUrlHandling(url, null, "Attempted to handle empty url.", null);
+            return false;
+        }
+
+        UrlAction lastFailedUrlAction = UrlAction.NOOP;
+        final Uri destinationUri = Uri.parse(url);
+
+        for (final UrlAction urlAction : mSupportedUrlActions) {
+            if (urlAction.shouldTryHandlingUrl(destinationUri)) {
+                try {
+                    urlAction.handleUrl(UrlHandler.this, context, destinationUri,
+                            fromUserInteraction);
+                    if (!mAlreadySucceeded && !mTaskPending
+                            && !UrlAction.IGNORE_ABOUT_SCHEME.equals(urlAction)
+                            && !UrlAction.HANDLE_MOPUB_SCHEME.equals(urlAction)) {
+                        makeTrackingHttpRequest(trackingUrls, context,
+                                BaseEvent.Name.CLICK_REQUEST);
+                        mResultActions.urlHandlingSucceeded(destinationUri.toString(),
+                                urlAction);
+                        mAlreadySucceeded = true;
                     }
+                    return true;
+                } catch (IntentNotResolvableException e) {
+                    MoPubLog.d(e.getMessage(), e);
+                    lastFailedUrlAction = urlAction;
+                    // continue trying to match...
                 }
             }
-            MoPubLog.d("Link ignored. Unable to handle url: " + destinationUrl);
+        }
+        failUrlHandling(url, lastFailedUrlAction, "Link ignored. Unable to handle url: " + url, null);
+        return false;
+    }
+
+    private void failUrlHandling(@Nullable final String url, @Nullable UrlAction urlAction,
+            @NonNull final String message, @Nullable final Throwable throwable) {
+        Preconditions.checkNotNull(message);
+
+        if (urlAction == null) {
+            urlAction = UrlAction.NOOP;
         }
 
-        mResultActions.urlHandlingFailed(destinationUrl, lastFailedUrlAction);
+        MoPubLog.d(message, throwable);
+        mResultActions.urlHandlingFailed(url, urlAction);
     }
+
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/UrlResolutionTask.java b/mopub-sdk/src/main/java/com/mopub/common/UrlResolutionTask.java
similarity index 88%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/UrlResolutionTask.java
rename to mopub-sdk/src/main/java/com/mopub/common/UrlResolutionTask.java
index 369653a8..823f39c2 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/UrlResolutionTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/UrlResolutionTask.java
@@ -1,24 +1,23 @@
-package com.mopub.nativeads;
+package com.mopub.common;
 
 import android.net.Uri;
 import android.os.AsyncTask;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
-import com.mopub.common.UrlAction;
-import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.AsyncTasks;
 
 import java.io.IOException;
 import java.net.HttpURLConnection;
 import java.net.URL;
 
-class UrlResolutionTask extends AsyncTask<String, Void, String> {
+@VisibleForTesting
+public class UrlResolutionTask extends AsyncTask<String, Void, String> {
     private static final int REDIRECT_LIMIT = 10;
 
     interface UrlResolutionListener {
-        void onSuccess(@NonNull String resolvedUrl);
-        void onFailure();
+        void onSuccess(@NonNull final String resolvedUrl);
+        void onFailure(@NonNull final String message, @Nullable final Throwable throwable);
     }
 
     @NonNull private final UrlResolutionListener mListener;
@@ -30,9 +29,7 @@ public static void getResolvedUrl(@NonNull final String urlString,
         try {
             AsyncTasks.safeExecuteOnExecutor(urlResolutionTask, urlString);
         } catch (Exception e) {
-            MoPubLog.d("Failed to resolve url", e);
-
-            listener.onFailure();
+            listener.onFailure("Failed to resolve url", e);
         }
     }
 
@@ -109,7 +106,7 @@ protected void onPostExecute(@Nullable final String resolvedUrl) {
     protected void onCancelled() {
         super.onCancelled();
 
-        mListener.onFailure();
+        mListener.onFailure("Task for resolving url was cancelled", null);
     }
 }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/logging/MoPubLog.java b/mopub-sdk/src/main/java/com/mopub/common/logging/MoPubLog.java
index d12ea28a..fa140548 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/logging/MoPubLog.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/logging/MoPubLog.java
@@ -1,7 +1,11 @@
 package com.mopub.common.logging;
 
+import android.annotation.SuppressLint;
+import android.support.annotation.NonNull;
 import android.util.Log;
 
+import com.mopub.common.VisibleForTesting;
+
 import java.util.HashMap;
 import java.util.Map;
 import java.util.logging.Handler;
@@ -11,14 +15,23 @@
 import java.util.logging.Logger;
 
 public class MoPubLog {
+    public static final String LOGGER_NAMESPACE = "com.mopub";
+
     private static final String LOGTAG = "MoPub";
-    private static final Logger LOGGER = Logger.getLogger("com.mopub");
+    private static final Logger LOGGER = Logger.getLogger(LOGGER_NAMESPACE);
     private static final MoPubLogHandler LOG_HANDLER = new MoPubLogHandler();
 
+    /**
+     * Sets up the {@link Logger}, {@link Handler}, and prevents any parent Handlers from being
+     * notified to avoid duplicated log messages.
+     */
     static {
+        LOGGER.setUseParentHandlers(false);
+        LOGGER.setLevel(Level.ALL);
+        LOG_HANDLER.setLevel(Level.FINE);
+
         LogManager.getLogManager().addLogger(LOGGER);
-        LOGGER.addHandler(LOG_HANDLER);
-        LOGGER.setLevel(Level.FINE);
+        addHandler(LOGGER, LOG_HANDLER);
     }
 
     private MoPubLog() {}
@@ -71,6 +84,25 @@ public static void e(final String message, final Throwable throwable) {
         LOGGER.log(Level.SEVERE, message, throwable);
     }
 
+    @VisibleForTesting
+    public static void setSdkHandlerLevel(@NonNull final Level level) {
+        LOG_HANDLER.setLevel(level);
+    }
+
+    /**
+     * Adds a {@link Handler} to a {@link Logger} if they are not already associated.
+     */
+    private static void addHandler(@NonNull final Logger logger,
+            @NonNull final Handler handler) {
+        final Handler[] currentHandlers = logger.getHandlers();
+        for (final Handler currentHandler : currentHandlers) {
+            if (currentHandler.equals(handler)) {
+                return;
+            }
+        }
+        logger.addHandler(handler);
+    }
+
     private static final class MoPubLogHandler extends Handler {
         private static final Map<Level, Integer> LEVEL_TO_LOG = new HashMap<Level, Integer>(7);
 
@@ -95,6 +127,7 @@ public static void e(final String message, final Throwable throwable) {
         }
 
         @Override
+        @SuppressLint("LogTagMismatch")
         public void publish(final LogRecord logRecord) {
             if (isLoggable(logRecord)) {
                 final int priority;
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java b/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java
index 8d9b34c6..47406b98 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java
@@ -200,12 +200,12 @@ public static int getScreenOrientation(@NonNull final Activity activity) {
     static int getScreenOrientationFromRotationAndOrientation(int rotation, int orientation) {
         if (Configuration.ORIENTATION_PORTRAIT == orientation) {
             switch (rotation) {
+                case Surface.ROTATION_90:
                 case Surface.ROTATION_180:
-                case Surface.ROTATION_270:
                     return ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;
 
                 case Surface.ROTATION_0:
-                case Surface.ROTATION_90:
+                case Surface.ROTATION_270:
                 default:
                     return ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
             }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/ImageUtils.java b/mopub-sdk/src/main/java/com/mopub/common/util/ImageUtils.java
new file mode 100644
index 00000000..267a9bbf
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/ImageUtils.java
@@ -0,0 +1,61 @@
+package com.mopub.common.util;
+
+import android.graphics.Bitmap;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.widget.ImageView;
+
+
+public class ImageUtils {
+
+    /**
+     * Fast Gaussian blurring algorithm source:
+     * https://github.com/patrickfav/BlurTestAndroid/blob/master/BlurBenchmark/src/main/java/at/favre/app/blurbenchmark/blur/algorithms/GaussianFastBlur.java
+     *
+     */
+    @NonNull
+    public static Bitmap applyFastGaussianBlurToBitmap(@NonNull Bitmap mutableBitmap, int radius) {
+        int w = mutableBitmap.getWidth();
+        int h = mutableBitmap.getHeight();
+        int[] pixels = new int[w * h];
+        mutableBitmap.getPixels(pixels, 0, w, 0, 0, w, h);
+
+        for (int r = radius; r >= 1; r /= 2) {
+            for (int i = r; i < h - r; i++) {
+                for (int j = r; j < w - r; j++) {
+                    int tl = pixels[(i - r) * w + j - r];
+                    int tr = pixels[(i - r) * w + j + r];
+                    int tc = pixels[(i - r) * w + j];
+                    int bl = pixels[(i + r) * w + j - r];
+                    int br = pixels[(i + r) * w + j + r];
+                    int bc = pixels[(i + r) * w + j];
+                    int cl = pixels[i * w + j - r];
+                    int cr = pixels[i * w + j + r];
+
+                    pixels[(i * w) + j] = 0xFF000000 |
+                            (((tl & 0xFF) + (tr & 0xFF) + (tc & 0xFF) + (bl & 0xFF) + (br & 0xFF) + (bc & 0xFF) + (cl & 0xFF) + (cr & 0xFF)) >> 3) & 0xFF |
+                            (((tl & 0xFF00) + (tr & 0xFF00) + (tc & 0xFF00) + (bl & 0xFF00) + (br & 0xFF00) + (bc & 0xFF00) + (cl & 0xFF00) + (cr & 0xFF00)) >> 3) & 0xFF00 |
+                            (((tl & 0xFF0000) + (tr & 0xFF0000) + (tc & 0xFF0000) + (bl & 0xFF0000) + (br & 0xFF0000) + (bc & 0xFF0000) + (cl & 0xFF0000) + (cr & 0xFF0000)) >> 3) & 0xFF0000;
+                }
+            }
+        }
+
+        mutableBitmap.setPixels(pixels, 0, w, 0, 0, w, h);
+        return mutableBitmap;
+    }
+
+    /**
+     * Sets the alpha value of the ImageView.
+     * API Level < 16: http://developer.android.com/reference/android/widget/ImageView.html#setAlpha(int)
+     * API Level >= 16: http://developer.android.com/reference/android/widget/ImageView.html#setImageAlpha(int)
+     * @param imageView the ImageView
+     * @param alpha the alpha value being applied to the ImageView
+     */
+    public static void setImageViewAlpha(@NonNull ImageView imageView, int alpha) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
+            imageView.setImageAlpha(alpha);
+        } else {
+            imageView.setAlpha(alpha);
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java b/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
index 1af522f5..ba776d4f 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
@@ -19,6 +19,7 @@
 import com.mopub.exceptions.IntentNotResolvableException;
 import com.mopub.exceptions.UrlParseException;
 
+import java.util.EnumSet;
 import java.util.List;
 
 import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
@@ -203,11 +204,15 @@ public static Intent intentForShareTweet(@NonNull final Uri uri)
 
     /**
      * Launches a {@link MoPubBrowser} activity with the desired URL.
-     *  @param context The activity context.
+     * @param context The activity context.
      * @param uri The URL to load in the started {@link MoPubBrowser} activity.
      */
     public static void showMoPubBrowserForUrl(@NonNull final Context context,
-            @NonNull Uri uri) throws IntentNotResolvableException {
+            @NonNull Uri uri)
+            throws IntentNotResolvableException {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(uri);
+
         MoPubLog.d("Final URI to show in browser: " + uri);
 
         final Bundle extras = new Bundle();
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Numbers.java b/mopub-sdk/src/main/java/com/mopub/common/util/Numbers.java
index 773d49c3..0c5021b6 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Numbers.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Numbers.java
@@ -3,6 +3,12 @@
 public class Numbers {
     private Numbers() {}
 
+    /**
+     * Tries to parse the double value from a Number or String.
+     * @param value the object to parse.
+     * @return a {@code Double} instance containing the parsed double value.
+     * @throws ClassCastException if {@code value} cannot be parsed as a double value.
+     */
     public static Double parseDouble(final Object value) throws ClassCastException {
         if (value instanceof Number) {
             return ((Number) value).doubleValue();
@@ -16,4 +22,16 @@ public static Double parseDouble(final Object value) throws ClassCastException {
             throw new ClassCastException("Unable to parse " + value + " as double.");
         }
     }
+
+    /**
+     * Rounds up to the nearest full second. Formally, this is the long
+     * closest to negative infinity above or equal to millis, in milliseconds,
+     * converted to seconds.
+     *
+     * @param millis Time in milliseconds
+     * @return Time in seconds, rounded up.
+     */
+    public static long convertMillisecondsToSecondsRoundedUp(final long millis) {
+        return Math.round(Math.ceil(millis / 1000f));
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Strings.java b/mopub-sdk/src/main/java/com/mopub/common/util/Strings.java
index bcb949c7..f474c2f1 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Strings.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Strings.java
@@ -1,5 +1,6 @@
 package com.mopub.common.util;
 
+import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
 import java.io.IOException;
@@ -36,7 +37,12 @@ public static boolean isAbsoluteTracker(String progressValue) {
                 && absolutePattern.matcher(progressValue).matches();
     }
 
-    public static Integer parseAbsoluteOffset(String progressValue) {
+    @Nullable
+    public static Integer parseAbsoluteOffset(@Nullable String progressValue) {
+        if (progressValue == null) {
+            return null;
+        }
+
         final String[] split = progressValue.split(":");
         if (split.length != 3) {
             return null;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
index ba2482a7..226ea8ec 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
@@ -6,11 +6,10 @@
 import android.content.Intent;
 
 import com.mopub.common.logging.MoPubLog;
-import com.mopub.mobileads.util.vast.VastVideoConfiguration;
 
 import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static com.mopub.mobileads.VastVideoViewController.VAST_VIDEO_CONFIGURATION;
+import static com.mopub.mobileads.VastVideoViewController.VAST_VIDEO_CONFIG;
 
 public class BaseVideoPlayerActivity extends Activity {
     static final String VIDEO_CLASS_EXTRAS_KEY = "video_view_class_name";
@@ -35,9 +34,9 @@ static Intent createIntentMraid(final Context context,
     }
 
     static void startVast(final Context context,
-            final VastVideoConfiguration vastVideoConfiguration,
+            final VastVideoConfig vastVideoConfig,
             final long broadcastIdentifier) {
-        final Intent intentVideoPlayerActivity = createIntentVast(context, vastVideoConfiguration, broadcastIdentifier);
+        final Intent intentVideoPlayerActivity = createIntentVast(context, vastVideoConfig, broadcastIdentifier);
         try {
             context.startActivity(intentVideoPlayerActivity);
         } catch (ActivityNotFoundException e) {
@@ -46,12 +45,12 @@ static void startVast(final Context context,
     }
 
     static Intent createIntentVast(final Context context,
-            final VastVideoConfiguration vastVideoConfiguration,
+            final VastVideoConfig vastVideoConfig,
             final long broadcastIdentifier) {
         final Intent intentVideoPlayerActivity = new Intent(context, MraidVideoPlayerActivity.class);
         intentVideoPlayerActivity.setFlags(FLAG_ACTIVITY_NEW_TASK);
         intentVideoPlayerActivity.putExtra(VIDEO_CLASS_EXTRAS_KEY, "vast");
-        intentVideoPlayerActivity.putExtra(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        intentVideoPlayerActivity.putExtra(VAST_VIDEO_CONFIG, vastVideoConfig);
         intentVideoPlayerActivity.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
         return intentVideoPlayerActivity;
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
index d9ab5587..6856f4a9 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
@@ -3,7 +3,9 @@
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
+import android.content.res.Configuration;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.view.View;
 import android.view.ViewGroup;
@@ -48,6 +50,8 @@ protected void onCreate() {
     protected abstract void onPause();
     protected abstract void onResume();
     protected abstract void onDestroy();
+    protected abstract void onSaveInstanceState(@NonNull Bundle outState);
+    protected abstract void onConfigurationChanged(@Nullable Configuration configuration);
 
     public boolean backButtonEnabled() {
         return true;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
index 82e197f0..9634f3ba 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
@@ -65,7 +65,7 @@ public void run() {
         }
 
         // Attempt to load the JSON extras into mServerExtras.
-        mServerExtras = new TreeMap<String,String>(serverExtras);
+        mServerExtras = new TreeMap<String, String>(serverExtras);
 
         mLocalExtras = mMoPubView.getLocalExtras();
         if (mMoPubView.getLocation() != null) {
@@ -86,11 +86,26 @@ void loadAd() {
             mHandler.postDelayed(mTimeout, getTimeoutDelayMilliseconds());
         }
 
-        mCustomEventBanner.loadBanner(mContext, this, mLocalExtras, mServerExtras);
+        // Custom event classes can be developed by any third party and may not be tested.
+        // We catch all exceptions here to prevent crashes from untested code.
+        try {
+            mCustomEventBanner.loadBanner(mContext, this, mLocalExtras, mServerExtras);
+        } catch (Exception e) {
+            MoPubLog.d("Loading a custom event banner threw an exception.", e);
+            onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
+        }
     }
 
     void invalidate() {
-        if (mCustomEventBanner != null) mCustomEventBanner.onInvalidate();
+        if (mCustomEventBanner != null) {
+            // Custom event classes can be developed by any third party and may not be tested.
+            // We catch all exceptions here to prevent crashes from untested code.
+            try {
+                mCustomEventBanner.onInvalidate();
+            } catch (Exception e) {
+                MoPubLog.d("Invalidating a custom event banner threw an exception", e);
+            }
+        }
         mContext = null;
         mCustomEventBanner = null;
         mLocalExtras = null;
@@ -138,8 +153,10 @@ public void onBannerLoaded(View bannerView) {
 
     @Override
     public void onBannerFailed(MoPubErrorCode errorCode) {
-        if (isInvalidated()) return;
-        
+        if (isInvalidated()) {
+            return;
+        }
+
         if (mMoPubView != null) {
             if (errorCode == null) {
                 errorCode = UNSPECIFIED;
@@ -151,7 +168,9 @@ public void onBannerFailed(MoPubErrorCode errorCode) {
 
     @Override
     public void onBannerExpanded() {
-        if (isInvalidated()) return;
+        if (isInvalidated()) {
+            return;
+        }
 
         mStoredAutorefresh = mMoPubView.getAutorefreshEnabled();
         mMoPubView.setAutorefreshEnabled(false);
@@ -160,7 +179,9 @@ public void onBannerExpanded() {
 
     @Override
     public void onBannerCollapsed() {
-        if (isInvalidated()) return;
+        if (isInvalidated()) {
+            return;
+        }
 
         mMoPubView.setAutorefreshEnabled(mStoredAutorefresh);
         mMoPubView.adClosed();
@@ -168,11 +189,15 @@ public void onBannerCollapsed() {
 
     @Override
     public void onBannerClicked() {
-        if (isInvalidated()) return;
-        
-        if (mMoPubView != null) mMoPubView.registerClick();
+        if (isInvalidated()) {
+            return;
+        }
+
+        if (mMoPubView != null) {
+            mMoPubView.registerClick();
+        }
     }
-    
+
     @Override
     public void onLeaveApplication() {
         onBannerClicked();
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
index e9139058..740ec3c4 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
@@ -69,7 +69,7 @@ public void run() {
         mLocalExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
         mLocalExtras.put(AD_REPORT_KEY, adReport);
     }
-    
+
     void loadInterstitial() {
         if (isInvalidated() || mCustomEventInterstitial == null) {
             return;
@@ -79,17 +79,42 @@ void loadInterstitial() {
             mHandler.postDelayed(mTimeout, getTimeoutDelayMilliseconds());
         }
 
-        mCustomEventInterstitial.loadInterstitial(mContext, this, mLocalExtras, mServerExtras);
+        // Custom event classes can be developed by any third party and may not be tested.
+        // We catch all exceptions here to prevent crashes from untested code.
+        try {
+            mCustomEventInterstitial.loadInterstitial(mContext, this, mLocalExtras, mServerExtras);
+        } catch (Exception e) {
+            MoPubLog.d("Loading a custom event interstitial threw an exception.", e);
+            onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+        }
     }
-    
+
     void showInterstitial() {
-        if (isInvalidated() || mCustomEventInterstitial == null) return;
-        
-        mCustomEventInterstitial.showInterstitial();
+        if (isInvalidated() || mCustomEventInterstitial == null) {
+            return;
+        }
+
+        // Custom event classes can be developed by any third party and may not be tested.
+        // We catch all exceptions here to prevent crashes from untested code.
+        try {
+            mCustomEventInterstitial.showInterstitial();
+        } catch (Exception e) {
+            MoPubLog.d("Showing a custom event interstitial threw an exception.", e);
+            onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+        }
     }
 
     void invalidate() {
-        if (mCustomEventInterstitial != null) mCustomEventInterstitial.onInvalidate();
+        if (mCustomEventInterstitial != null) {
+
+            // Custom event classes can be developed by any third party and may not be tested.
+            // We catch all exceptions here to prevent crashes from untested code.
+            try {
+                mCustomEventInterstitial.onInvalidate();
+            } catch (Exception e) {
+                MoPubLog.d("Invalidating a custom event interstitial threw an exception.", e);
+            }
+        }
         mCustomEventInterstitial = null;
         mContext = null;
         mServerExtras = null;
@@ -188,9 +213,13 @@ public void onLeaveApplication() {
 
     @Override
     public void onInterstitialDismissed() {
-        if (isInvalidated()) return;
+        if (isInvalidated()) {
+            return;
+        }
 
-        if (mCustomEventInterstitialAdapterListener != null) mCustomEventInterstitialAdapterListener.onCustomEventInterstitialDismissed();
+        if (mCustomEventInterstitialAdapterListener != null) {
+            mCustomEventInterstitialAdapterListener.onCustomEventInterstitialDismissed();
+        }
     }
 
     @Deprecated
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
index b581bb8b..35e56469 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
@@ -13,12 +13,25 @@
 import com.mopub.common.util.Intents;
 import com.mopub.exceptions.IntentNotResolvableException;
 
+import java.util.EnumSet;
+
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 
 class HtmlWebViewClient extends WebViewClient {
     static final String MOPUB_FINISH_LOAD = "mopub://finishLoad";
     static final String MOPUB_FAIL_LOAD = "mopub://failLoad";
 
+    private final EnumSet<UrlAction> SUPPORTED_URL_ACTIONS = EnumSet.of(
+            UrlAction.HANDLE_MOPUB_SCHEME,
+            UrlAction.IGNORE_ABOUT_SCHEME,
+            UrlAction.HANDLE_PHONE_SCHEME,
+            UrlAction.OPEN_APP_MARKET,
+            UrlAction.OPEN_NATIVE_BROWSER,
+            UrlAction.OPEN_IN_APP_BROWSER,
+            UrlAction.HANDLE_SHARE_TWEET,
+            UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK,
+            UrlAction.FOLLOW_DEEP_LINK);
+
     private final Context mContext;
     private HtmlWebViewListener mHtmlWebViewListener;
     private BaseHtmlWebView mHtmlWebView;
@@ -36,15 +49,7 @@
     @Override
     public boolean shouldOverrideUrlLoading(final WebView view, final String url) {
         new UrlHandler.Builder()
-                .withSupportedUrlActions(
-                        UrlAction.HANDLE_MOPUB_SCHEME,
-                        UrlAction.IGNORE_ABOUT_SCHEME,
-                        UrlAction.HANDLE_PHONE_SCHEME,
-                        UrlAction.OPEN_APP_MARKET,
-                        UrlAction.OPEN_NATIVE_BROWSER,
-                        UrlAction.OPEN_IN_APP_BROWSER,
-                        UrlAction.HANDLE_SHARE_TWEET,
-                        UrlAction.FOLLOW_DEEP_LINK)
+                .withSupportedUrlActions(SUPPORTED_URL_ACTIONS)
                 .withResultActions(new UrlHandler.ResultActions() {
                     @Override
                     public void urlHandlingSucceeded(@NonNull String url,
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
index 62bf5b27..2ae82e8d 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
@@ -15,6 +15,7 @@
 import android.webkit.WebViewClient;
 
 import com.mopub.common.AdReport;
+import com.mopub.common.Constants;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
@@ -66,7 +67,8 @@ public void onReceivedError(final WebView view, final int errorCode,
             }
         });
 
-        dummyWebView.loadDataWithBaseURL(null, htmlData, "text/html", "UTF-8", null);
+        dummyWebView.loadDataWithBaseURL("http://" + Constants.HOST + "/",
+                htmlData, "text/html", "UTF-8", null);
     }
 
     public static void start(@NonNull Context context, @Nullable AdReport adreport, @NonNull String htmlData, long broadcastIdentifier) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
index 8fa79451..9f58f6f9 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
@@ -3,7 +3,9 @@
 import android.app.Activity;
 import android.content.ActivityNotFoundException;
 import android.content.Intent;
+import android.content.res.Configuration;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.view.View;
 import android.view.Window;
@@ -31,11 +33,11 @@ protected void onCreate(Bundle savedInstanceState) {
         mBroadcastIdentifier = getBroadcastIdentifierFromIntent(getIntent());
 
         try {
-            mBaseVideoController = createVideoViewController();
+            mBaseVideoController = createVideoViewController(savedInstanceState);
         } catch (IllegalStateException e) {
             // This can happen if the activity was started without valid intent extras. We leave
             // mBaseVideoController set to null, and finish the activity immediately.
-            
+
             broadcastAction(this, mBroadcastIdentifier, ACTION_INTERSTITIAL_FAIL);
             finish();
             return;
@@ -68,6 +70,22 @@ protected void onDestroy() {
         super.onDestroy();
     }
 
+    @Override
+    protected void onSaveInstanceState(@NonNull Bundle outState) {
+        super.onSaveInstanceState(outState);
+        if (mBaseVideoController != null) {
+            mBaseVideoController.onSaveInstanceState(outState);
+        }
+    }
+
+    @Override
+    public void onConfigurationChanged(@Nullable Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        if (mBaseVideoController != null) {
+            mBaseVideoController.onConfigurationChanged(newConfig);
+        }
+    }
+
     @Override
     public void onBackPressed() {
         if (mBaseVideoController != null && mBaseVideoController.backButtonEnabled()) {
@@ -82,13 +100,13 @@ protected void onActivityResult(final int requestCode, final int resultCode, fin
         }
     }
 
-    private BaseVideoViewController createVideoViewController() throws IllegalStateException {
+    private BaseVideoViewController createVideoViewController(Bundle savedInstanceState) throws IllegalStateException {
         String clazz = getIntent().getStringExtra(VIDEO_CLASS_EXTRAS_KEY);
 
         if ("vast".equals(clazz)) {
-            return new VastVideoViewController(this, getIntent().getExtras(), mBroadcastIdentifier, this);
+            return new VastVideoViewController(this, getIntent().getExtras(), savedInstanceState, mBroadcastIdentifier, this);
         } else if ("mraid".equals(clazz)) {
-            return new MraidVideoViewController(this, getIntent().getExtras(), this);
+            return new MraidVideoViewController(this, getIntent().getExtras(), savedInstanceState, this);
         } else {
             throw new IllegalStateException("Unsupported video type: " + clazz);
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/ToolbarWidget.java b/mopub-sdk/src/main/java/com/mopub/mobileads/ToolbarWidget.java
deleted file mode 100644
index df1fd823..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/ToolbarWidget.java
+++ /dev/null
@@ -1,242 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.Color;
-import android.graphics.drawable.Drawable;
-import android.text.TextUtils;
-import android.view.Gravity;
-import android.view.View;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.RelativeLayout;
-import android.widget.TextView;
-
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.Dips;
-import com.mopub.common.util.Utils;
-import com.mopub.mobileads.resource.TextDrawable;
-import com.mopub.network.Networking;
-import com.mopub.volley.VolleyError;
-import com.mopub.volley.toolbox.ImageLoader;
-
-import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
-
-class ToolbarWidget extends RelativeLayout {
-    static class Builder {
-        private final Context context;
-        private float weight;
-        private int widgetGravity;
-
-        private boolean hasText;
-        private String defaultText;
-
-        private boolean hasDrawable;
-        private Drawable drawable;
-
-        private OnTouchListener onTouchListener;
-        private int visibility;
-        private int textAlign;
-        private int drawableAlign;
-
-        Builder(final Context context) {
-            this.context = context;
-            this.weight = 1f;
-            this.widgetGravity = Gravity.CENTER;
-
-            this.visibility = View.VISIBLE;
-
-            this.textAlign = ALIGN_PARENT_LEFT;
-            this.drawableAlign = ALIGN_PARENT_RIGHT;
-        }
-
-        Builder weight(final float weight) {
-            this.weight = weight;
-            return this;
-        }
-
-        Builder widgetGravity(final int widgetGravity) {
-            this.widgetGravity = widgetGravity;
-            return this;
-        }
-
-        Builder hasText() {
-            this.hasText = true;
-            return this;
-        }
-
-        Builder defaultText(final String defaultText) {
-            this.hasText = true;
-            this.defaultText = defaultText;
-            return this;
-        }
-
-        Builder hasDrawable() {
-            this.hasDrawable = true;
-            return this;
-        }
-
-        Builder drawable(final Drawable drawable) {
-            this.hasDrawable = true;
-            this.drawable = drawable;
-            return this;
-        }
-
-        Builder textAlign(final int rule) {
-            this.textAlign = rule;
-            return this;
-        }
-
-        Builder drawableAlign(final int rule) {
-            this.drawableAlign = rule;
-            return this;
-        }
-
-        Builder visibility(final int visibility) {
-            this.visibility = visibility;
-            return this;
-        }
-
-        Builder onTouchListener(final OnTouchListener onTouchListener) {
-            this.onTouchListener = onTouchListener;
-            return this;
-        }
-
-        ToolbarWidget build() {
-            return new ToolbarWidget(this);
-        }
-    }
-
-    private TextView mTextView;
-    private ImageView mImageView;
-    private final ImageLoader mImageLoader;
-
-    private static final int TEXT_PADDING_DIPS = 5;
-    private static final int IMAGE_PADDING_DIPS = 5;
-    private static final int IMAGE_SIDE_LENGTH_DIPS = 37;
-
-    private final int mTextPadding;
-    private final int mImagePadding;
-    private final int mImageSideLength;
-
-    private ToolbarWidget(Builder builder) {
-        super(builder.context);
-
-        final LinearLayout.LayoutParams toolbarLayoutParams = new LinearLayout.LayoutParams(0, WRAP_CONTENT, builder.weight);
-        toolbarLayoutParams.gravity = builder.widgetGravity;
-        setLayoutParams(toolbarLayoutParams);
-
-        mTextPadding = Dips.dipsToIntPixels(TEXT_PADDING_DIPS, getContext());
-        mImagePadding = Dips.dipsToIntPixels(IMAGE_PADDING_DIPS, getContext());
-        mImageSideLength = Dips.dipsToIntPixels(IMAGE_SIDE_LENGTH_DIPS, getContext());
-
-        mImageLoader = Networking.getImageLoader(getContext());
-
-        setVisibility(builder.visibility);
-
-        if (builder.hasDrawable) {
-            if (builder.drawable != null) {
-                mImageView = new ImageView(getContext());
-                mImageView.setId((int) Utils.generateUniqueId());
-
-                final RelativeLayout.LayoutParams iconLayoutParams = new RelativeLayout.LayoutParams(
-                        mImageSideLength,
-                        mImageSideLength);
-
-                iconLayoutParams.addRule(CENTER_VERTICAL);
-                iconLayoutParams.addRule(builder.drawableAlign);
-
-                mImageView.setPadding(mImagePadding, mImagePadding, mImagePadding, mImagePadding);
-
-                mImageView.setBackgroundColor(Color.BLACK);
-                mImageView.getBackground().setAlpha(0);
-                mImageView.setImageDrawable(builder.drawable);
-                addView(mImageView, iconLayoutParams);
-            }
-        }
-
-        if (builder.hasText) {
-            mTextView = new TextView(getContext());
-            mTextView.setSingleLine();
-            mTextView.setEllipsize(TextUtils.TruncateAt.END);
-            mTextView.setText(builder.defaultText);
-
-            final RelativeLayout.LayoutParams textLayoutParams = new RelativeLayout.LayoutParams(WRAP_CONTENT, WRAP_CONTENT);
-            textLayoutParams.addRule(CENTER_VERTICAL);
-
-            if (mImageView != null) {
-                textLayoutParams.addRule(LEFT_OF, mImageView.getId());
-            } else {
-                textLayoutParams.addRule(builder.textAlign);
-            }
-
-            mTextView.setPadding(mTextPadding, mTextPadding, mTextPadding, mTextPadding);
-
-            addView(mTextView, textLayoutParams);
-        }
-
-        if (builder.onTouchListener != null) {
-            setOnTouchListener(builder.onTouchListener);
-        }
-    }
-
-    void updateText(final String text) {
-        if (mTextView != null) {
-            mTextView.setText(text);
-        }
-    }
-
-    void updateImageText(final String text) {
-        try {
-            final TextDrawable textDrawable = (TextDrawable) mImageView.getDrawable();
-            textDrawable.updateText(text);
-        } catch (Exception e) {
-            MoPubLog.d("Unable to update ToolbarWidget text.");
-        }
-    }
-
-    void updateImage(final String imageUrl) {
-        mImageLoader.get(imageUrl, new ImageLoader.ImageListener() {
-            @Override
-            public void onResponse(final ImageLoader.ImageContainer imageContainer,
-                    final boolean isImmediate) {
-                Bitmap bitmap = imageContainer.getBitmap();
-                if (bitmap != null) {
-                    mImageView.setImageBitmap(bitmap);
-                } else {
-                    MoPubLog.d(String.format("%s returned null bitmap", imageUrl));
-                }
-            }
-
-            @Override
-            public void onErrorResponse(final VolleyError volleyError) {
-                MoPubLog.d("Failed to load image.", volleyError);
-            }
-        });
-    }
-
-    @Deprecated // for testing
-    ImageView getImageView() {
-        return mImageView;
-    }
-
-    @Deprecated // for testing
-    void setImageView(ImageView imageView) {
-        mImageView = imageView;
-    }
-
-    @Deprecated // for testing
-    Drawable getImageViewDrawable() {
-        return mImageView.getDrawable();
-    }
-
-    @Deprecated // for testing
-    void setImageViewDrawable(Drawable drawable) {
-        mImageView.setImageDrawable(drawable);
-    }
-
-    @Deprecated // for testing
-    String getTextViewText() {
-        return mTextView.getText().toString();
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastAdXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastAdXmlManager.java
new file mode 100644
index 00000000..dbbec142
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastAdXmlManager.java
@@ -0,0 +1,73 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+/**
+ * This XML manager handles the initial Ad node.
+ * There can be many Ad nodes in a VAST document, and this individually separates each one.
+ * The VAST 3.0 spec for Ad nodes states it can have either <i>one</i> InLine or <i>one</i>
+ * Wrapper as children. However, our implementation handles the case of having both an InLine
+ * and a Wrapper.
+ */
+class VastAdXmlManager {
+
+    // Element names
+    private static final String INLINE = "InLine";
+    private static final String WRAPPER = "Wrapper";
+
+    // Attribute names
+    private static final String SEQUENCE = "sequence";
+
+    @NonNull private final Node mAdNode;
+
+    VastAdXmlManager(@NonNull final Node adNode) {
+        Preconditions.checkNotNull(adNode);
+        mAdNode = adNode;
+    }
+
+    /**
+     * If there is an InLine section, return its XML manager.
+     *
+     * @return The {@link VastInLineXmlManager} or {@code null} if there is no InLine child node.
+     */
+    @Nullable
+    VastInLineXmlManager getInLineXmlManager() {
+        Node inLineNode = XmlUtils.getFirstMatchingChildNode(mAdNode, INLINE);
+        VastInLineXmlManager vastInLineXmlManager = null;
+        if (inLineNode != null) {
+            vastInLineXmlManager = new VastInLineXmlManager(inLineNode);
+        }
+        return vastInLineXmlManager;
+    }
+
+    /**
+     * If there is a Wrapper section, return its XML manager.
+     *
+     * @return The {@link VastWrapperXmlManager} or {@code null} if there is no Wrapper child node.
+     */
+    @Nullable
+    VastWrapperXmlManager getWrapperXmlManager() {
+        Node wrapperNode = XmlUtils.getFirstMatchingChildNode(mAdNode, WRAPPER);
+        VastWrapperXmlManager vastWrapperXmlManager = null;
+        if (wrapperNode != null) {
+            vastWrapperXmlManager = new VastWrapperXmlManager(wrapperNode);
+        }
+        return vastWrapperXmlManager;
+    }
+
+    /**
+     * Gets the attribute for sequence number. This attribute is optional.
+     *
+     * @return The sequence number
+     */
+    @Nullable
+    String getSequence() {
+        return XmlUtils.getAttributeValue(mAdNode, SEQUENCE);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java
new file mode 100644
index 00000000..f1998357
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java
@@ -0,0 +1,143 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.text.TextUtils;
+
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+import java.util.ArrayList;
+import java.util.List;
+
+abstract class VastBaseInLineWrapperXmlManager {
+
+    // Element Names
+    private static final String IMPRESSION_TRACKER = "Impression";
+    private static final String COMPANION = "Companion";
+    private static final String LINEAR = "Linear";
+    private static final String CREATIVES = "Creatives";
+    private static final String CREATIVE = "Creative";
+    private static final String COMPANION_ADS = "CompanionAds";
+    private static final String ERROR = "Error";
+
+    @NonNull protected final Node mNode;
+
+    VastBaseInLineWrapperXmlManager(@NonNull Node node) {
+        Preconditions.checkNotNull(node);
+        mNode = node;
+    }
+
+    /**
+     * Gets a list of impression trackers for this InLine node. If there are no trackers, return
+     * an empty list.
+     *
+     * @return List of URLs of impression trackers
+     */
+    @NonNull
+    List<VastTracker> getImpressionTrackers() {
+        final List<Node> impressionNodes = XmlUtils.getMatchingChildNodes(mNode, IMPRESSION_TRACKER);
+
+        List<VastTracker> impressionTrackers = new ArrayList<VastTracker>();
+        for (Node impressionNode : impressionNodes) {
+            String uri = XmlUtils.getNodeValue(impressionNode);
+            if (!TextUtils.isEmpty(uri)) {
+                impressionTrackers.add(new VastTracker(uri));
+            }
+        }
+
+        return impressionTrackers;
+    }
+
+    /**
+     * Gets the error tracker associated with this node.
+     *
+     * @return The URL of the error tracker.
+     */
+    @NonNull
+    List<VastTracker> getErrorTrackers() {
+        final List<VastTracker> errorTrackers = new ArrayList<VastTracker>();
+        final List<Node> errorNodes = XmlUtils.getMatchingChildNodes(mNode, ERROR);
+        if (errorNodes == null) {
+            return errorTrackers;
+        }
+
+        for (Node error : errorNodes) {
+            final String tracker = XmlUtils.getNodeValue(error);
+            if (!TextUtils.isEmpty(tracker)) {
+                errorTrackers.add(new VastTracker(tracker, true));
+            }
+        }
+        return errorTrackers;
+    }
+
+    /**
+     * If there is a Linear section with at least one linear creative, return its XML manager.
+     *
+     * @return The {@link VastLinearXmlManager}s or an empty list if there is no Linear child node.
+     */
+    @NonNull
+    List<VastLinearXmlManager> getLinearXmlManagers() {
+        final List<VastLinearXmlManager> linearXmlManagers = new ArrayList<VastLinearXmlManager>();
+        final Node creativesNode = XmlUtils.getFirstMatchingChildNode(mNode, CREATIVES);
+        if (creativesNode == null) {
+            return linearXmlManagers;
+        }
+
+        // NOTE: there can only be one <Linear>, <CompanionAds>, OR <NonLinearAds> element
+        // per creative node
+
+        final List<Node> creativeNodes = XmlUtils.getMatchingChildNodes(creativesNode, CREATIVE);
+        if (creativeNodes == null) {
+            return linearXmlManagers;
+        }
+
+        for (Node creativeNode : creativeNodes) {
+            Node linearNode = XmlUtils.getFirstMatchingChildNode(creativeNode, LINEAR);
+            if (linearNode != null) {
+                linearXmlManagers.add(new VastLinearXmlManager(linearNode));
+            }
+        }
+        return linearXmlManagers;
+    }
+
+    /**
+     * If there is a CompanionAds section with at least one CompanionAd, return its XML manager.
+     *
+     * @return The {@link VastCompanionAdXmlManager}s or an empty list if there are no
+     * CompanionAds or Companion child node.
+     */
+    @NonNull
+    List<VastCompanionAdXmlManager> getCompanionAdXmlManagers() {
+        final List<VastCompanionAdXmlManager> companionAdXmlManagers = new
+                ArrayList<VastCompanionAdXmlManager>();
+        final Node creativesNode = XmlUtils.getFirstMatchingChildNode(mNode, CREATIVES);
+        if (creativesNode == null) {
+            return companionAdXmlManagers;
+        }
+
+        final List<Node> creativeNodes = XmlUtils.getMatchingChildNodes(creativesNode, CREATIVE);
+        if (creativeNodes == null) {
+            return companionAdXmlManagers;
+        }
+
+        for (Node creativeNode : creativeNodes) {
+            final Node companionAds = XmlUtils.getFirstMatchingChildNode(creativeNode, COMPANION_ADS);
+            if (companionAds == null) {
+                continue;
+            }
+
+            List<Node> companionAdsNodes = XmlUtils.getMatchingChildNodes(companionAds, COMPANION);
+            if (companionAdsNodes == null) {
+                continue;
+            }
+
+            for (Node companionNode : companionAdsNodes) {
+                companionAdXmlManagers.add(new VastCompanionAdXmlManager(companionNode));
+            }
+        }
+
+        return companionAdXmlManagers;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdConfig.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdConfig.java
new file mode 100644
index 00000000..6bf820ae
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdConfig.java
@@ -0,0 +1,181 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.ActivityNotFoundException;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.MoPubBrowser;
+import com.mopub.common.Preconditions;
+import com.mopub.common.UrlAction;
+import com.mopub.common.UrlHandler;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Intents;
+
+import java.io.Serializable;
+import java.util.List;
+
+import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
+
+public class VastCompanionAdConfig implements Serializable {
+    private static final long serialVersionUID = 0L;
+
+    private final int mWidth;
+    private final int mHeight;
+    @NonNull private final VastResource mVastResource;
+    @Nullable private final String mClickThroughUrl;
+    @NonNull private final List<VastTracker> mClickTrackers;
+    @NonNull private final List<VastTracker> mCreativeViewTrackers;
+
+    public VastCompanionAdConfig(
+            int width,
+            int height,
+            @NonNull VastResource vastResource,
+            @Nullable String clickThroughUrl,
+            @NonNull List<VastTracker> clickTrackers,
+            @NonNull List<VastTracker> creativeViewTrackers) {
+        Preconditions.checkNotNull(vastResource);
+        Preconditions.checkNotNull(clickTrackers, "clickTrackers cannot be null");
+        Preconditions.checkNotNull(creativeViewTrackers, "creativeViewTrackers cannot be null");
+
+        mWidth = width;
+        mHeight = height;
+        mVastResource = vastResource;
+        mClickThroughUrl = clickThroughUrl;
+        mClickTrackers = clickTrackers;
+        mCreativeViewTrackers = creativeViewTrackers;
+    }
+
+    /**
+     * Add click trackers.
+     *
+     * @param clickTrackers List of URLs to hit
+     */
+    public void addClickTrackers(@NonNull final List<VastTracker> clickTrackers) {
+        Preconditions.checkNotNull(clickTrackers, "clickTrackers cannot be null");
+        mClickTrackers.addAll(clickTrackers);
+    }
+
+    /**
+     * Add creativeView trackers that are supposed to be fired when the companion ad is visible.
+     *
+     * @param creativeViewTrackers List of URLs to hit when this companion is viewed
+     */
+    public void addCreativeViewTrackers(@NonNull final List<VastTracker> creativeViewTrackers) {
+        Preconditions.checkNotNull(creativeViewTrackers, "creativeViewTrackers cannot be null");
+        mCreativeViewTrackers.addAll(creativeViewTrackers);
+    }
+
+    public int getWidth() {
+        return mWidth;
+    }
+
+    public int getHeight() {
+        return mHeight;
+    }
+
+    @NonNull
+    public VastResource getVastResource() {
+        return mVastResource;
+    }
+
+    @Nullable
+    public String getClickThroughUrl() {
+        return mClickThroughUrl;
+    }
+
+    @NonNull
+    public List<VastTracker> getClickTrackers() {
+        return mClickTrackers;
+    }
+
+    @NonNull
+    public List<VastTracker> getCreativeViewTrackers() {
+        return mCreativeViewTrackers;
+    }
+
+    /**
+     * Called when the companion ad is displayed after the video. Handles firing the impression
+     * trackers.
+     *
+     * @param context         the context.
+     * @param contentPlayHead the time into the video. (should be equal to the duration)
+     */
+    void handleImpression(@NonNull Context context, int contentPlayHead) {
+        Preconditions.checkNotNull(context);
+
+        makeVastTrackingHttpRequest(
+                mCreativeViewTrackers,
+                null,
+                contentPlayHead,
+                null,
+                context
+        );
+    }
+
+    /**
+     * Called when the companion ad is clicked. Handles forwarding the user to the specified click
+     * through uri.
+     *
+     * @param context                the context. Has to be an activity context.
+     * @param requestCode            The code that identifies what kind of activity request is going
+     *                               to be made
+     * @param webViewClickThroughUrl The clickthrough url from the webview that should override the
+     *                               one set in the companion ad if the resource is Javascript,
+     *                               HTML, or an IFrame.
+     */
+    void handleClick(@NonNull final Context context, final int requestCode,
+            @Nullable final String webViewClickThroughUrl) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkArgument(context instanceof Activity, "context must be an activity");
+
+        final String correctClickThroughUrl = mVastResource.getCorrectClickThroughUrl(
+                mClickThroughUrl, webViewClickThroughUrl);
+
+        if (TextUtils.isEmpty(correctClickThroughUrl)) {
+            return;
+        }
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(
+                        UrlAction.IGNORE_ABOUT_SCHEME,
+                        UrlAction.OPEN_APP_MARKET,
+                        UrlAction.OPEN_NATIVE_BROWSER,
+                        UrlAction.OPEN_IN_APP_BROWSER,
+                        UrlAction.HANDLE_SHARE_TWEET,
+                        UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK,
+                        UrlAction.FOLLOW_DEEP_LINK)
+                .withResultActions(new UrlHandler.ResultActions() {
+                    @Override
+                    public void urlHandlingSucceeded(@NonNull String url,
+                            @NonNull UrlAction urlAction) {
+                        if (urlAction == UrlAction.OPEN_IN_APP_BROWSER) {
+                            Bundle bundle = new Bundle();
+                            bundle.putString(MoPubBrowser.DESTINATION_URL_KEY,
+                                    url);
+
+                            final Class clazz = MoPubBrowser.class;
+                            final Intent intent = Intents.getStartActivityIntent(
+                                    context, clazz, bundle);
+                            try {
+                                ((Activity) context).startActivityForResult(intent, requestCode);
+                            } catch (ActivityNotFoundException e) {
+                                MoPubLog.d("Activity " + clazz.getName() + " not found. Did you " +
+                                        "declare it in your AndroidManifest.xml?");
+                            }
+                        }
+                    }
+
+                    @Override
+                    public void urlHandlingFailed(@NonNull String url,
+                            @NonNull UrlAction lastFailedUrlAction) {
+                    }
+                })
+                .withoutMoPubBrowser()
+                .build().handleUrl(context, correctClickThroughUrl);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java
new file mode 100644
index 00000000..abacc76c
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java
@@ -0,0 +1,146 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+/**
+ * This XML manager handles companion ads.
+ */
+class VastCompanionAdXmlManager {
+
+    // Element names
+    private static final String VIDEO_TRACKER = "Tracking";
+    private static final String TRACKING_EVENTS = "TrackingEvents";
+    private static final String COMPANION_CLICK_THROUGH = "CompanionClickThrough";
+    private static final String COMPANION_CLICK_TRACKING = "CompanionClickTracking";
+
+    // Attribute names
+    private static final String EVENT = "event";
+    private static final String WIDTH = "width";
+    private static final String HEIGHT = "height";
+
+    // Attribute values
+    private static final String CREATIVE_VIEW = "creativeView";
+
+    @NonNull private final Node mCompanionNode;
+    @NonNull private final VastResourceXmlManager mResourceXmlManager;
+
+    VastCompanionAdXmlManager(@NonNull final Node companionNode) {
+        Preconditions.checkNotNull(companionNode, "companionNode cannot be null");
+        mCompanionNode = companionNode;
+        mResourceXmlManager = new VastResourceXmlManager(companionNode);
+    }
+
+    /**
+     * Gets the width attribute for the companion ad or {@code null} if not present. This
+     * attribute is required according to the VAST 3.0 spec.
+     *
+     * @return Integer width attribute or {@code null}.
+     */
+    @Nullable
+    Integer getWidth() {
+        return XmlUtils.getAttributeValueAsInt(mCompanionNode, WIDTH);
+    }
+
+    /**
+     * Gets the height attribute for the companion ad or {@code null} if not present. This
+     * attribute is required according to the VAST 3.0 spec.
+     *
+     * @return Integer height attribute or {@code null}.
+     */
+    @Nullable
+    Integer getHeight() {
+        return XmlUtils.getAttributeValueAsInt(mCompanionNode, HEIGHT);
+    }
+
+    @NonNull
+    VastResourceXmlManager getResourceXmlManager() {
+        return mResourceXmlManager;
+    }
+
+    /**
+     * Gets the clickthrough url of this companion ad or {@code null} if it does not exist.
+     *
+     * @return The String clickthrough URL or {@code null}
+     */
+    @Nullable
+    String getClickThroughUrl() {
+        final Node node = XmlUtils.getFirstMatchingChildNode(
+                mCompanionNode,
+                COMPANION_CLICK_THROUGH
+        );
+        return XmlUtils.getNodeValue(node);
+    }
+
+    /**
+     * Gets a list of click trackers for this companion ad. If none are present, return an empty
+     * list.
+     *
+     * @return List of click tracker URLs or an empty list.
+     */
+    @NonNull
+    List<VastTracker> getClickTrackers() {
+        final List<VastTracker> companionAdClickTrackers = new ArrayList<VastTracker>();
+        final List<Node> trackerNodes = XmlUtils.getMatchingChildNodes(mCompanionNode, COMPANION_CLICK_TRACKING);
+        if (trackerNodes == null) {
+            return companionAdClickTrackers;
+        }
+        for (final Node trackerNode : trackerNodes) {
+            String uri = XmlUtils.getNodeValue(trackerNode);
+            if (!TextUtils.isEmpty(uri)) {
+                companionAdClickTrackers.add(new VastTracker(uri));
+            }
+        }
+        return companionAdClickTrackers;
+    }
+
+    /**
+     * Gets a list of creativeView trackers for this companion ad. These are impression trackers for
+     * just this companion ad as the normal impression trackers are reserved for the whole ad. These
+     * should fire when this companion ad is shown. If none are present, return an empty list.
+     *
+     * @return List of creative view URLs or an empty list.
+     */
+    @NonNull
+    List<VastTracker> getCompanionCreativeViewTrackers() {
+        final List<VastTracker> companionCreativeViewTrackers = new ArrayList<VastTracker>();
+        final Node node = XmlUtils.getFirstMatchingChildNode(
+                mCompanionNode,
+                TRACKING_EVENTS
+        );
+
+        if (node == null) {
+            return companionCreativeViewTrackers;
+        }
+
+        final List<Node> trackerNodes = XmlUtils.getMatchingChildNodes(
+                node,
+                VIDEO_TRACKER,
+                EVENT,
+                Collections.singletonList(CREATIVE_VIEW)
+        );
+
+        for (final Node trackerNode : trackerNodes) {
+            final String trackerUrl = XmlUtils.getNodeValue(trackerNode);
+            companionCreativeViewTrackers.add(new VastTracker(trackerUrl));
+        }
+
+        return companionCreativeViewTrackers;
+    }
+
+    boolean hasResources() {
+        return !TextUtils.isEmpty(mResourceXmlManager.getStaticResource()) ||
+                !TextUtils.isEmpty(mResourceXmlManager.getHTMLResource()) ||
+                !TextUtils.isEmpty(mResourceXmlManager.getIFrameResource());
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastErrorCode.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastErrorCode.java
new file mode 100644
index 00000000..f216a958
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastErrorCode.java
@@ -0,0 +1,63 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+
+import com.mopub.common.Preconditions;
+
+/**
+ * The various possible error codes for VAST that MoPub supports. See
+ * http://www.iab.net/media/file/VASTv3.0.pdf for more information about the error codes.
+ */
+public enum VastErrorCode {
+    /**
+     * For any type of XML issue in the VAST document. e.g. missing a matching tag, missing a square
+     * bracket, not using CDATA correctly, etc.
+     */
+    XML_PARSING_ERROR("100"),
+
+    /**
+     * When following a wrapper redirect and the URI was either unavailable or reached a timeout
+     * as defined by the video player.
+     */
+    WRAPPER_TIMEOUT("301"),
+
+    /**
+     * When receiving a no ads VAST response after one or more Wrappers. See section 2.4.2.4 in the
+     * Vast 3.0 spec for details.
+     */
+    NO_ADS_VAST_RESPONSE("303"),
+
+    /**
+     * For any reason the linear video ad failed to download or play (or for errors during
+     * playback).
+     */
+    GENERAL_LINEAR_AD_ERROR("400"),
+
+    /**
+     * For any reason the companion ad failed to download or show. MoPub still tries to show the
+     * linear ad regardless of the status of the companion ad.
+     */
+    GENERAL_COMPANION_AD_ERROR("600"),
+
+    /**
+     * Any other error, or an unexpected error.
+     */
+    UNDEFINED_ERROR("900");
+
+    @NonNull private final String mErrorCode;
+
+    VastErrorCode(@NonNull String errorCode) {
+        Preconditions.checkNotNull(errorCode, "errorCode cannot be null");
+        mErrorCode = errorCode;
+    }
+
+    /**
+     * Gets the code for the error
+     *
+     * @return String of the code representing that error
+     */
+    @NonNull
+    String getErrorCode() {
+        return mErrorCode;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastIconConfig.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastIconConfig.java
new file mode 100644
index 00000000..73648a27
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastIconConfig.java
@@ -0,0 +1,182 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.MoPubBrowser;
+import com.mopub.common.Preconditions;
+import com.mopub.common.UrlAction;
+import com.mopub.common.UrlHandler;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Intents;
+import com.mopub.exceptions.IntentNotResolvableException;
+
+import java.io.Serializable;
+import java.util.List;
+
+import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
+
+/**
+ * The data and event handlers for the icon displayed during a VAST 3.0 video.
+ */
+class VastIconConfig implements Serializable {
+    private static final long serialVersionUID = 0L;
+
+    private final int mWidth;
+    private final int mHeight;
+    private final int mOffsetMS;
+    @Nullable private final Integer mDurationMS;
+    @NonNull private final VastResource mVastResource;
+    @NonNull private final List<VastTracker> mClickTrackingUris;
+    @Nullable private final String mClickThroughUri;
+    @NonNull private final List<VastTracker> mViewTrackingUris;
+
+    VastIconConfig(int width,
+            int height,
+            @Nullable Integer offsetMS,
+            @Nullable Integer durationMS,
+            @NonNull VastResource vastResource,
+            @NonNull List<VastTracker> clickTrackingUris,
+            @Nullable String clickThroughUri,
+            @NonNull List<VastTracker> viewTrackingUris) {
+        Preconditions.checkNotNull(vastResource);
+        Preconditions.checkNotNull(clickTrackingUris);
+        Preconditions.checkNotNull(viewTrackingUris);
+
+        mWidth = width;
+        mHeight = height;
+        mOffsetMS = offsetMS == null ? 0 : offsetMS;
+        mDurationMS = durationMS;
+        mVastResource = vastResource;
+        mClickTrackingUris = clickTrackingUris;
+        mClickThroughUri = clickThroughUri;
+        mViewTrackingUris = viewTrackingUris;
+    }
+
+    int getWidth() {
+        return mWidth;
+    }
+
+    int getHeight() {
+        return mHeight;
+    }
+
+    /**
+     * The offset time into a video that the icon is displayed.
+     *
+     * @return the offset in milliseconds.
+     */
+    int getOffsetMS() {
+        return mOffsetMS;
+    }
+
+    /**
+     * The duration that the icon is displayed during a video.
+     *
+     * @return the duration in milliseconds.
+     */
+    @Nullable
+    Integer getDurationMS() {
+        return mDurationMS;
+    }
+
+    /**
+     * The resource describing the icon's type.
+     *
+     * @return the resource.
+     */
+    @NonNull
+    VastResource getVastResource() {
+        return mVastResource;
+    }
+
+    @NonNull
+    List<VastTracker> getClickTrackingUris() {
+        return mClickTrackingUris;
+    }
+
+    @Nullable
+    String getClickThroughUri() {
+        return mClickThroughUri;
+    }
+
+    @NonNull
+    List<VastTracker> getViewTrackingUris() {
+        return mViewTrackingUris;
+    }
+
+    /**
+     * Called when the icon is displayed during the video. Handles firing the impression trackers.
+     *
+     * @param context the context.
+     * @param contentPlayHead the time into the video.
+     * @param assetUri the uri of the video.
+     */
+    void handleImpression(@NonNull Context context, int contentPlayHead, @NonNull String assetUri) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(assetUri);
+
+        makeVastTrackingHttpRequest(
+                mViewTrackingUris,
+                null,
+                contentPlayHead,
+                assetUri,
+                context
+        );
+    }
+
+    /**
+     * Called when the icon is clicked. Handles forwarding the user to the click through uri.
+     *
+     * @param context                the context.
+     * @param webViewClickThroughUri The click through uri for Javascript, HTML and IFrame resources
+     *                               from the WebView
+     */
+    void handleClick(@NonNull final Context context, @Nullable String webViewClickThroughUri) {
+        Preconditions.checkNotNull(context);
+
+
+        final String correctClickThroughUri = mVastResource.getCorrectClickThroughUrl(
+                mClickThroughUri, webViewClickThroughUri);
+
+        if (TextUtils.isEmpty(correctClickThroughUri)) {
+            return;
+        }
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(
+                        UrlAction.IGNORE_ABOUT_SCHEME,
+                        UrlAction.OPEN_NATIVE_BROWSER,
+                        UrlAction.OPEN_IN_APP_BROWSER)
+                .withResultActions(new UrlHandler.ResultActions() {
+                    @Override
+                    public void urlHandlingSucceeded(@NonNull String url,
+                            @NonNull UrlAction urlAction) {
+                        if (urlAction == UrlAction.OPEN_IN_APP_BROWSER) {
+                            Bundle bundle = new Bundle();
+                            bundle.putString(MoPubBrowser.DESTINATION_URL_KEY, url);
+
+                            Intent intent = Intents.getStartActivityIntent(
+                                    context, MoPubBrowser.class, bundle);
+                            try {
+                                Intents.startActivity(context, intent);
+                            } catch (IntentNotResolvableException e) {
+                                MoPubLog.d(e.getMessage());
+                            }
+                        }
+                    }
+
+                    @Override
+                    public void urlHandlingFailed(@NonNull String url,
+                            @NonNull UrlAction lastFailedUrlAction) {
+                    }
+                })
+                .withoutMoPubBrowser()
+                .build()
+                .handleUrl(context, correctClickThroughUri);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastIconXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastIconXmlManager.java
new file mode 100644
index 00000000..68afcb66
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastIconXmlManager.java
@@ -0,0 +1,154 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Strings;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * This XML manager handles Vast 3.0 icons.
+ */
+public class VastIconXmlManager {
+
+    // Element names
+    public static final String ICON_CLICKS = "IconClicks";
+    public static final String ICON_CLICK_TRACKING = "IconClickTracking";
+    public static final String ICON_CLICK_THROUGH = "IconClickThrough";
+    public static final String ICON_VIEW_TRACKING = "IconViewTracking";
+
+    // Attribute names
+    public static final String WIDTH = "width";
+    public static final String HEIGHT = "height";
+    public static final String OFFSET = "offset";
+    public static final String DURATION = "duration";
+
+    @NonNull private final Node mIconNode;
+    @NonNull private final VastResourceXmlManager mResourceXmlManager;
+
+    VastIconXmlManager(@NonNull final Node iconNode) {
+        Preconditions.checkNotNull(iconNode);
+        mIconNode = iconNode;
+        mResourceXmlManager = new VastResourceXmlManager(iconNode);
+    }
+
+    /**
+     * Gets the width attribute for the icon in dp or {@code null} if not present. This attribute
+     * is required according to the VAST 3.0 spec.
+     *
+     * @return Integer width attribute or {@code null}.
+     */
+    @Nullable
+    Integer getWidth() {
+        return XmlUtils.getAttributeValueAsInt(mIconNode, WIDTH);
+    }
+
+    /**
+     * Gets the height attribute for the icon in dp or {@code null} if not present. This attribute
+     * is required according to the VAST 3.0 spec.
+     *
+     * @return Integer height attribute or {@code null}.
+     */
+    @Nullable
+    Integer getHeight() {
+        return XmlUtils.getAttributeValueAsInt(mIconNode, HEIGHT);
+    }
+
+    /**
+     * Gets the offset attribute for the icon or {@code null} if not present or not formatted
+     * correctly. It represents the time in milliseconds into the video that the icon will be
+     * displayed. The attribute value is represented as HH:MM:SS[.mmm] and this method translates
+     * it to milliseconds. This attribute is optional according to the VAST 3.0 spec.
+     *
+     * @return Integer offset in milliseconds attribute or {@code null}.
+     */
+    @Nullable
+    Integer getOffsetMS() {
+        String iconOffsetStr = XmlUtils.getAttributeValue(mIconNode, OFFSET);
+        Integer iconOffset = null;
+        try {
+            iconOffset = Strings.parseAbsoluteOffset(iconOffsetStr);
+        } catch (NumberFormatException e) {
+            MoPubLog.d(String.format("Invalid VAST icon offset format: %s:", iconOffsetStr));
+        }
+        return iconOffset;
+    }
+
+    /**
+     * Gets the duration attribute for the icon or {@code null} if not present or not formatted
+     * correctly. It represents the duration in milliseconds that the icon will be displayed.
+     * The attribute value is represented as HH:MM:SS[.mmm] and this method translates it to
+     * milliseconds. This attribute is optional according to the VAST 3.0 spec.
+     *
+     * @return Integer duration in milliseconds attribute or {@code null}.
+     */
+    @Nullable
+    Integer getDurationMS() {
+        String iconDurationStr = XmlUtils.getAttributeValue(mIconNode, DURATION);
+        Integer iconDuration = null;
+        try {
+            iconDuration = Strings.parseAbsoluteOffset(iconDurationStr);
+        } catch (NumberFormatException e) {
+            MoPubLog.d(String.format("Invalid VAST icon duration format: %s:", iconDurationStr));
+        }
+        return iconDuration;
+    }
+
+    @NonNull
+    VastResourceXmlManager getResourceXmlManager() {
+        return mResourceXmlManager;
+    }
+
+    @NonNull
+    List<VastTracker> getClickTrackingUris() {
+        Node iconClicksNode = XmlUtils.getFirstMatchingChildNode(mIconNode, ICON_CLICKS);
+        List<VastTracker> iconClickTrackingUris = new ArrayList<VastTracker>();
+        if (iconClicksNode == null) {
+            return iconClickTrackingUris;
+        }
+
+        List<Node> iconClickTrackingNodes =
+                XmlUtils.getMatchingChildNodes(iconClicksNode, ICON_CLICK_TRACKING);
+        for (Node iconClickTrackingNode : iconClickTrackingNodes) {
+            String uri = XmlUtils.getNodeValue(iconClickTrackingNode);
+            if (uri != null) {
+                iconClickTrackingUris.add(new VastTracker(uri));
+            }
+        }
+        return iconClickTrackingUris;
+    }
+
+    @Nullable
+    String getClickThroughUri() {
+        Node iconClicksNode = XmlUtils.getFirstMatchingChildNode(mIconNode, ICON_CLICKS);
+        if (iconClicksNode == null) {
+            return null;
+        }
+
+        Node iconClickThroughNode =
+                XmlUtils.getFirstMatchingChildNode(iconClicksNode, ICON_CLICK_THROUGH);
+        return XmlUtils.getNodeValue(iconClickThroughNode);
+    }
+
+    @NonNull
+    List<VastTracker> getViewTrackingUris() {
+        List<Node> iconViewTrackingNodes =
+                XmlUtils.getMatchingChildNodes(mIconNode, ICON_VIEW_TRACKING);
+        List<VastTracker> iconViewTrackingUris = new ArrayList<VastTracker>();
+
+        for (Node iconViewTrackingNode : iconViewTrackingNodes) {
+            String uri = XmlUtils.getNodeValue(iconViewTrackingNode);
+            if (uri != null) {
+                iconViewTrackingUris.add(new VastTracker(uri));
+            }
+        }
+        return iconViewTrackingUris;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastInLineXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastInLineXmlManager.java
new file mode 100644
index 00000000..108d5f5c
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastInLineXmlManager.java
@@ -0,0 +1,16 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+
+import org.w3c.dom.Node;
+
+/**
+ * This XML manager handles InLine nodes. An InLine node can contain impression trackers,
+ * video ads, and companion ads.
+ */
+class VastInLineXmlManager extends VastBaseInLineWrapperXmlManager {
+
+    VastInLineXmlManager(@NonNull final Node inLineNode) {
+        super(inLineNode);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
new file mode 100644
index 00000000..6852e38e
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
@@ -0,0 +1,411 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Strings;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+/**
+ * This XML manager handles the meta data around the video file. This includes video progress
+ * trackers and click trackers. This also houses the manager for the actual media file.
+ */
+class VastLinearXmlManager {
+
+    // Element names
+    private static final String TRACKING_EVENTS = "TrackingEvents";
+    private static final String VIDEO_CLICKS = "VideoClicks";
+    private static final String VIDEO_TRACKER = "Tracking";
+    private static final String CLICK_THROUGH = "ClickThrough";
+    private static final String CLICK_TRACKER = "ClickTracking";
+    private static final String MEDIA_FILES = "MediaFiles";
+    private static final String MEDIA_FILE = "MediaFile";
+    public static final String ICONS = "Icons";
+    public static final String ICON = "Icon";
+
+    // Attribute names
+    private static final String EVENT = "event";
+    private static final String OFFSET = "offset";
+    private static final String SKIP_OFFSET = "skipoffset";
+
+    // Attribute values
+    private static final String CREATIVE_VIEW = "creativeView";
+    private static final String START = "start";
+    private static final String FIRST_QUARTILE = "firstQuartile";
+    private static final String MIDPOINT = "midpoint";
+    private static final String THIRD_QUARTILE = "thirdQuartile";
+    private static final String COMPLETE = "complete";
+    private static final String PAUSE = "pause";
+    private static final String RESUME = "resume";
+    private static final String CLOSE = "close";
+    private static final String CLOSE_LINEAR = "closeLinear";
+    private static final String PROGRESS = "progress";
+    private static final String SKIP = "skip";
+
+    private static final int CREATIVE_VIEW_TRACKER_THRESHOLD = 0;
+    private static final int START_TRACKER_THRESHOLD = 2000;
+    private static final float FIRST_QUARTER_MARKER = 0.25f;
+    private static final float MID_POINT_MARKER = 0.50f;
+    private static final float THIRD_QUARTER_MARKER = 0.75f;
+
+    @NonNull private final Node mLinearNode;
+
+    VastLinearXmlManager(@NonNull final Node linearNode) {
+        Preconditions.checkNotNull(linearNode);
+        mLinearNode = linearNode;
+    }
+
+    /**
+     * Return a sorted list of the video's percent-based progress-trackers. These are the
+     * quartile trackers and any "progress" nodes with percent-based offsets.
+     *
+     * Quartile trackers look like:
+     * {@code
+     * <Tracking event="firstQuartile">
+     *     <![CDATA[trackingURL]]>
+     * </Tracking>
+     * }
+     *
+     * Percent-based progress trackers look like:
+     * {@code
+     * <Tracking event="progress" offset="11%">
+     *     <![CDATA[trackingURL]]>
+     * </Tracking>
+     * }
+     */
+    @NonNull
+    List<VastFractionalProgressTracker> getFractionalProgressTrackers() {
+        // Add all the quartile trackers from VAST 2.0:
+        List<VastFractionalProgressTracker> percentTrackers = new ArrayList<VastFractionalProgressTracker>();
+
+        addQuartileTrackerWithFraction(percentTrackers, getVideoTrackersByAttribute(FIRST_QUARTILE), FIRST_QUARTER_MARKER);
+        addQuartileTrackerWithFraction(percentTrackers, getVideoTrackersByAttribute(MIDPOINT), MID_POINT_MARKER);
+        addQuartileTrackerWithFraction(percentTrackers, getVideoTrackersByAttribute(THIRD_QUARTILE), THIRD_QUARTER_MARKER);
+
+        final Node trackingEvents = XmlUtils.getFirstMatchingChildNode(mLinearNode, TRACKING_EVENTS);
+        if (trackingEvents != null) {
+            // Get any other trackers with event="progress" offset="n%"
+            final List<Node> progressNodes = XmlUtils.getMatchingChildNodes(trackingEvents,
+                    VIDEO_TRACKER, EVENT, Collections.singletonList(PROGRESS));
+
+            for (Node progressNode : progressNodes) {
+                String offsetString = XmlUtils.getAttributeValue(progressNode, OFFSET);
+                if (offsetString == null) {
+                    continue;
+                }
+                offsetString = offsetString.trim();
+                if (Strings.isPercentageTracker(offsetString)) {
+                    String trackingUrl = XmlUtils.getNodeValue(progressNode);
+                    try {
+                        float trackingFraction =
+                                Float.parseFloat(offsetString.replace("%", "")) / 100f;
+                        percentTrackers.add(new VastFractionalProgressTracker(trackingUrl, trackingFraction));
+                    } catch (NumberFormatException e) {
+                        MoPubLog.d(String.format("Failed to parse VAST progress tracker %s",
+                                offsetString));
+                    }
+                }
+            }
+        }
+
+        // Sort the list so we can quickly index it in the video progress runnable.
+        Collections.sort(percentTrackers);
+        return percentTrackers;
+    }
+
+    /**
+     * Return a sorted list of the video's absolute progress trackers. This includes start trackers
+     * and any "progress" nodes with absolute offsets.
+     *
+     * Start trackers live in nodes like:
+     * {@code
+     * <Tracking event="start">
+     *     <![CDATA[trackingURL]]>
+     * </Tracking>
+     * }
+     * Absolute progress trackers look like:
+     * {@code
+     * <Tracking event="progress" offset="00:00:10.000">
+     *     <![CDATA[trackingURL]]>
+     * </Tracking>
+     * }
+     */
+    @NonNull
+    List<VastAbsoluteProgressTracker> getAbsoluteProgressTrackers() {
+        List<VastAbsoluteProgressTracker> trackers = new ArrayList<VastAbsoluteProgressTracker>();
+
+        // Start trackers are treated as absolute trackers with a 2s offset.
+        final List<String> startTrackers = getVideoTrackersByAttribute(START);
+        for (String url : startTrackers) {
+            trackers.add(new VastAbsoluteProgressTracker(url, START_TRACKER_THRESHOLD));
+        }
+
+        final Node trackingEvents = XmlUtils.getFirstMatchingChildNode(mLinearNode, TRACKING_EVENTS);
+        if (trackingEvents != null) {
+            // Parse progress trackers and extract the absolute offsets of the form "HH:MM:SS[.mmm]"
+
+            final List<Node> progressNodes = XmlUtils.getMatchingChildNodes(trackingEvents,
+                    VIDEO_TRACKER, EVENT, Collections.singletonList(PROGRESS));
+            for (Node progressNode : progressNodes) {
+                String offsetString = XmlUtils.getAttributeValue(progressNode, OFFSET);
+                if (offsetString == null) {
+                    continue;
+                }
+                offsetString = offsetString.trim();
+                if (Strings.isAbsoluteTracker(offsetString)) {
+                    String trackingUrl = XmlUtils.getNodeValue(progressNode);
+                    try {
+                        Integer trackingMilliseconds = Strings.parseAbsoluteOffset(offsetString);
+                        if (trackingMilliseconds != null) {
+                            trackers.add(new VastAbsoluteProgressTracker(trackingUrl, trackingMilliseconds));
+                        }
+                    } catch (NumberFormatException e) {
+                        MoPubLog.d(String.format("Failed to parse VAST progress tracker %s",
+                                offsetString));
+                    }
+                }
+            }
+
+            // Parse creativeView trackers
+            final List<Node> creativeViewNodes = XmlUtils.getMatchingChildNodes(trackingEvents,
+                    VIDEO_TRACKER, EVENT, Collections.singletonList(CREATIVE_VIEW));
+            for (Node creativeViewNode : creativeViewNodes) {
+                trackers.add(
+                        new VastAbsoluteProgressTracker(XmlUtils.getNodeValue(creativeViewNode),
+                                CREATIVE_VIEW_TRACKER_THRESHOLD));
+            }
+        }
+
+        // Sort the list so we can quickly index it in the video progress runnable.
+        Collections.sort(trackers);
+        return trackers;
+    }
+
+    /**
+     * Gets a list of URLs for when the video finishes playing. This list may be empty.
+     *
+     * @return List of String URLs of video complete trackers.
+     */
+    @NonNull
+    List<VastTracker> getVideoCompleteTrackers() {
+        return getVideoTrackersByAttributeAsVastTrackers(COMPLETE);
+    }
+
+    /**
+     * Gets a list of URLs for when the video pauses. This list may be empty.
+     *
+     * @return List of String URLs of pause trackers.
+     */
+    @NonNull
+    List<VastTracker> getPauseTrackers() {
+        List<String> trackers = getVideoTrackersByAttribute(PAUSE);
+        List<VastTracker> vastRepeatableTrackers = new ArrayList<VastTracker>();
+        for (String tracker : trackers) {
+            vastRepeatableTrackers.add(new VastTracker(tracker, true));
+        }
+        return vastRepeatableTrackers;
+    }
+
+    /**
+     * Gets a list of URLs for when the video resumes. This list may be empty.
+     *
+     * @return List of String URLs of resume trackers.
+     */
+    @NonNull
+    List<VastTracker> getResumeTrackers() {
+        List<String> trackers = getVideoTrackersByAttribute(RESUME);
+        List<VastTracker> vastRepeatableTrackers = new ArrayList<VastTracker>();
+        for (String tracker : trackers) {
+            vastRepeatableTrackers.add(new VastTracker(tracker, true));
+        }
+        return vastRepeatableTrackers;
+    }
+
+    /**
+     * Gets a list of URLs for when the video closes. This list may be empty.
+     *
+     * @return List of String URLs of video closes.
+     */
+    @NonNull
+    List<VastTracker> getVideoCloseTrackers() {
+        List<VastTracker> closeTrackers = getVideoTrackersByAttributeAsVastTrackers(CLOSE);
+        closeTrackers.addAll(getVideoTrackersByAttributeAsVastTrackers(CLOSE_LINEAR));
+        return closeTrackers;
+    }
+
+    /**
+     * Gets a list of URLs for when the user skips the video. This list may be empty.
+     *
+     * @return List of String URLs of video skip trackers.
+     */
+    @NonNull
+    List<VastTracker> getVideoSkipTrackers() {
+        return getVideoTrackersByAttributeAsVastTrackers(SKIP);
+    }
+
+    /**
+     * Gets the clickthrough url. May be null.
+     *
+     * @return The clickthrough URL or {@code null} if there isn't one.
+     */
+    @Nullable
+    String getClickThroughUrl() {
+        final Node videoClicks = XmlUtils.getFirstMatchingChildNode(mLinearNode, VIDEO_CLICKS);
+        if (videoClicks == null) {
+            return null;
+        }
+        return XmlUtils.getNodeValue(XmlUtils.getFirstMatchingChildNode(videoClicks, CLICK_THROUGH));
+    }
+
+    /**
+     * Gets a list of URLs to track the video click event. This list may be empty.
+     *
+     * @return List of String URLs of click trackers.
+     */
+    @NonNull
+    List<VastTracker> getClickTrackers() {
+        List<VastTracker> clickTrackers = new ArrayList<VastTracker>();
+
+        final Node videoClicks = XmlUtils.getFirstMatchingChildNode(mLinearNode, VIDEO_CLICKS);
+        if (videoClicks == null) {
+            return clickTrackers;
+        }
+
+        final List<Node> clickTrackerNodes = XmlUtils.getMatchingChildNodes(
+                videoClicks,
+                CLICK_TRACKER
+        );
+
+        for (Node clickTrackerNode : clickTrackerNodes) {
+            String tracker = XmlUtils.getNodeValue(clickTrackerNode);
+            if (tracker != null) {
+                clickTrackers.add(new VastTracker(tracker));
+            }
+        }
+        return clickTrackers;
+    }
+
+    /**
+     * Gets where the video can be skipped from. This can be in a percentage or in the format
+     * 'hh:mm:ss(.mmm)' (for example, a video that is skippable 5 seconds into a 20 second video
+     * would be '25%', '00:00:05', or '00:00:05.000').
+     *
+     * @return The skip offset, or {@code null} if there isn't one.
+     */
+    @Nullable
+    String getSkipOffset() {
+        final String skipOffsetString = XmlUtils.getAttributeValue(mLinearNode, SKIP_OFFSET);
+        if (skipOffsetString == null) {
+            return null;
+        }
+
+        if (skipOffsetString.trim().isEmpty()) {
+            return null;
+        }
+
+        return skipOffsetString.trim();
+    }
+
+    /**
+     * If there is a Media section, return its XML manager.
+     *
+     * @return The {@link VastMediaXmlManager}
+     * or an empty list if there is no Media child node.
+     */
+    @NonNull
+    List<VastMediaXmlManager> getMediaXmlManagers() {
+        final List<VastMediaXmlManager> mediaXmlManagers = new ArrayList<VastMediaXmlManager>();
+
+        final Node mediaFiles = XmlUtils.getFirstMatchingChildNode(mLinearNode, MEDIA_FILES);
+        if (mediaFiles == null) {
+            return mediaXmlManagers;
+        }
+
+        List<Node> mediaNodes = XmlUtils.getMatchingChildNodes(mediaFiles, MEDIA_FILE);
+        for (Node mediaNode : mediaNodes) {
+            mediaXmlManagers.add(new VastMediaXmlManager(mediaNode));
+        }
+
+        return mediaXmlManagers;
+    }
+
+    @NonNull
+    List<VastIconXmlManager> getIconXmlManagers() {
+        final List<VastIconXmlManager> iconXmlManagers = new ArrayList<VastIconXmlManager>();
+
+        final Node icons= XmlUtils.getFirstMatchingChildNode(mLinearNode, ICONS);
+        if (icons == null) {
+            return iconXmlManagers;
+        }
+
+        List<Node> iconNodes = XmlUtils.getMatchingChildNodes(icons, ICON);
+        for (Node iconNode : iconNodes) {
+            iconXmlManagers.add(new VastIconXmlManager(iconNode));
+        }
+
+        return iconXmlManagers;
+    }
+
+    @NonNull
+    private List<VastTracker> getVideoTrackersByAttributeAsVastTrackers(
+            @NonNull final String attributeValue) {
+        List<String> trackers = getVideoTrackersByAttribute(attributeValue);
+        List<VastTracker> vastTrackers = new ArrayList<VastTracker>(trackers.size());
+        for (String tracker : trackers) {
+            vastTrackers.add(new VastTracker(tracker));
+        }
+        return vastTrackers;
+    }
+
+    /**
+     * This helper method makes it easy to get a tracking event with a specific name in a linear
+     * node. This returns an empty list if there isn't a tracker with that event name.
+     *
+     * @param attributeValue The name of the tracking event
+     * @return List of URLs with that tracker name or an empty list if none found.
+     */
+    @NonNull
+    private List<String> getVideoTrackersByAttribute(@NonNull final String attributeValue) {
+        Preconditions.checkNotNull(attributeValue);
+        List<String> videoTrackers = new ArrayList<String>();
+
+        final Node trackingEvents = XmlUtils.getFirstMatchingChildNode(mLinearNode, TRACKING_EVENTS);
+        if (trackingEvents == null) {
+            return videoTrackers;
+        }
+
+        final List<Node> videoTrackerNodes = XmlUtils.getMatchingChildNodes(
+                trackingEvents,
+                VIDEO_TRACKER,
+                EVENT,
+                Collections.singletonList(attributeValue)
+        );
+
+        for (Node videoTrackerNode : videoTrackerNodes) {
+            String tracker = XmlUtils.getNodeValue(videoTrackerNode);
+            if (tracker != null) {
+                videoTrackers.add(tracker);
+            }
+        }
+
+        return videoTrackers;
+    }
+
+    private void addQuartileTrackerWithFraction(
+            @NonNull final List<VastFractionalProgressTracker> trackers,
+            @NonNull final List<String> urls, float fraction) {
+        Preconditions.checkNotNull(trackers, "trackers cannot be null");
+        Preconditions.checkNotNull(urls, "urls cannot be null");
+        for (String url : urls) {
+            trackers.add(new VastFractionalProgressTracker(url, fraction));
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastMacro.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastMacro.java
new file mode 100644
index 00000000..dd5cf87b
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastMacro.java
@@ -0,0 +1,29 @@
+package com.mopub.mobileads;
+
+/**
+ * Macros that MoPub supports. This is in the format of [name]. For example, an errorcode macro
+ * would show up as "http://www.somesite.com/somemethod?error=[ERRORCODE]"
+ */
+enum VastMacro {
+    /**
+     * The VAST error number that represents type of error. See {@link VastErrorCode} for possible
+     * values.
+     */
+    ERRORCODE,
+
+    /**
+     * Current progress of the video in the format HH:MM:SS.mmm. For example, 4.5 seconds into the
+     * video would be represented as 00:00:04.500.
+     */
+    CONTENTPLAYHEAD,
+
+    /**
+     * A random 8-digit number intended for cachebusting.
+     */
+    CACHEBUSTING,
+
+    /**
+     * The url of the current video.
+     */
+    ASSETURI
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastMacroHelper.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastMacroHelper.java
new file mode 100644
index 00000000..429376ba
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastMacroHelper.java
@@ -0,0 +1,105 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
+
+import java.io.UnsupportedEncodingException;
+import java.net.URLEncoder;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+
+/**
+ * Handles macro substitution with actual data.
+ */
+public class VastMacroHelper {
+
+    @NonNull private final List<String> mOriginalUris;
+    @NonNull private final Map<VastMacro, String> mMacroDataMap;
+
+    public VastMacroHelper(@NonNull final List<String> uris) {
+        Preconditions.checkNotNull(uris, "uris cannot be null");
+        mOriginalUris = uris;
+        mMacroDataMap = new HashMap<VastMacro, String>();
+        mMacroDataMap.put(VastMacro.CACHEBUSTING, getCachebustingString());
+    }
+
+    @NonNull
+    public List<String> getUris() {
+        List<String> modifiedUris = new ArrayList<String>();
+
+        for(final String originalUri : mOriginalUris) {
+            String modifiedUri = originalUri;
+            if (TextUtils.isEmpty(modifiedUri)) {
+                continue;
+            }
+            for (final VastMacro vastMacro : VastMacro.values()) {
+                String value = mMacroDataMap.get(vastMacro);
+                if (value == null) {
+                    value = "";
+                }
+
+                modifiedUri = modifiedUri.replaceAll("\\[" + vastMacro.name() + "\\]",
+                        value);
+            }
+
+            modifiedUris.add(modifiedUri);
+        }
+
+        return modifiedUris;
+    }
+
+    @NonNull
+    public VastMacroHelper withErrorCode(@Nullable final VastErrorCode errorCode) {
+        if (errorCode != null) {
+            mMacroDataMap.put(VastMacro.ERRORCODE, errorCode.getErrorCode());
+        }
+        return this;
+    }
+
+    @NonNull
+    public VastMacroHelper withContentPlayHead(@Nullable final Integer contentPlayHeadMS) {
+        if (contentPlayHeadMS != null) {
+            String contentPlayHeadMSStr = formatContentPlayHead(contentPlayHeadMS);
+            if (!TextUtils.isEmpty(contentPlayHeadMSStr)) {
+                mMacroDataMap.put(VastMacro.CONTENTPLAYHEAD, contentPlayHeadMSStr);
+            }
+        }
+        return this;
+    }
+
+    @NonNull
+    public VastMacroHelper withAssetUri(@Nullable String assetUri) {
+        if (!TextUtils.isEmpty(assetUri)) {
+            // URL-encode any URLs
+            try {
+                assetUri = URLEncoder.encode(assetUri, "UTF-8");
+            } catch (UnsupportedEncodingException e) {
+                MoPubLog.w("Failed to encode url", e);
+            }
+            mMacroDataMap.put(VastMacro.ASSETURI, assetUri);
+        }
+        return this;
+    }
+
+    @NonNull
+    private String getCachebustingString() {
+        return String.format(Locale.US, "%08d", Math.round(Math.random() * 100000000));
+    }
+
+    @NonNull
+    private String formatContentPlayHead(int contentPlayHeadMS) {
+        return String.format("%02d:%02d:%02d.%03d",
+                TimeUnit.MILLISECONDS.toHours(contentPlayHeadMS),
+                TimeUnit.MILLISECONDS.toMinutes(contentPlayHeadMS) % TimeUnit.HOURS.toMinutes(1),
+                TimeUnit.MILLISECONDS.toSeconds(contentPlayHeadMS) % TimeUnit.MINUTES.toSeconds(1),
+                contentPlayHeadMS % 1000);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastManager.java
new file mode 100644
index 00000000..d2e16bc7
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastManager.java
@@ -0,0 +1,177 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.Display;
+import android.view.WindowManager;
+
+import com.mopub.common.CacheService;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.AsyncTasks;
+
+import static com.mopub.mobileads.VastVideoDownloadTask.VastVideoDownloadTaskListener;
+
+/**
+ * Given a VAST xml document, this class manages the lifecycle of parsing and finding a video and
+ * possibly companion ad. It provides the API for clients to prepare a
+ * {@link VastVideoConfig}.
+ */
+public class VastManager implements VastXmlManagerAggregator.VastXmlManagerAggregatorListener {
+    /**
+     * Users of this class should subscribe to this listener to get updates
+     * when a video is found or when no video is available.
+     */
+    public interface VastManagerListener {
+        /**
+         * Called when a video is found or if the VAST document is invalid. Passes in {@code null}
+         * when the VAST document is invalid.
+         *
+         * @param vastVideoConfig A configuration that can be used for displaying a VAST
+         *                               video or {@code null} if the VAST document is invalid.
+         */
+        void onVastVideoConfigurationPrepared(
+                @Nullable final VastVideoConfig vastVideoConfig);
+    }
+
+    @Nullable private VastManagerListener mVastManagerListener;
+    @Nullable private VastXmlManagerAggregator mVastXmlManagerAggregator;
+    private double mScreenAspectRatio;
+    private int mScreenAreaDp;
+
+    public VastManager(@NonNull final Context context) {
+        initializeScreenDimensions(context);
+    }
+
+    /**
+     * Creates and starts an async task that parses the VAST xml document.
+     *
+     * @param vastXml The initial VAST xml document
+     * @param vastManagerListener Notified when a video configuration has been found or when
+     *                            the VAST document is invalid
+     */
+    public void prepareVastVideoConfiguration(@Nullable final String vastXml,
+            @NonNull final VastManagerListener vastManagerListener,
+            @NonNull final Context context) {
+        Preconditions.checkNotNull(vastManagerListener, "vastManagerListener cannot be null");
+        Preconditions.checkNotNull(context, "context cannot be null");
+        if (mVastXmlManagerAggregator == null) {
+            mVastManagerListener = vastManagerListener;
+            mVastXmlManagerAggregator = new VastXmlManagerAggregator(this, mScreenAspectRatio,
+                    mScreenAreaDp, context.getApplicationContext());
+
+            try {
+                AsyncTasks.safeExecuteOnExecutor(mVastXmlManagerAggregator, vastXml);
+            } catch (Exception e) {
+                MoPubLog.d("Failed to aggregate vast xml", e);
+                mVastManagerListener.onVastVideoConfigurationPrepared(null);
+            }
+        }
+    }
+
+    /**
+     * Stops the VAST aggregator from continuing to follow wrapper redirects.
+     */
+    public void cancel() {
+        if (mVastXmlManagerAggregator != null) {
+            mVastXmlManagerAggregator.cancel(true);
+            mVastXmlManagerAggregator = null;
+        }
+    }
+
+    @Override
+    public void onAggregationComplete(@Nullable final VastVideoConfig vastVideoConfig) {
+        if (mVastManagerListener == null) {
+            throw new IllegalStateException(
+                    "mVastManagerListener cannot be null here. Did you call " +
+                            "prepareVastVideoConfiguration()?");
+        }
+        if (vastVideoConfig == null) {
+            mVastManagerListener.onVastVideoConfigurationPrepared(null);
+            return;
+        }
+
+        if (updateDiskMediaFileUrl(vastVideoConfig)) {
+            mVastManagerListener.onVastVideoConfigurationPrepared(vastVideoConfig);
+            return;
+        }
+
+        final VastVideoDownloadTask vastVideoDownloadTask = new VastVideoDownloadTask(
+                new VastVideoDownloadTaskListener() {
+                    @Override
+                    public void onComplete(boolean success) {
+                        if (success && updateDiskMediaFileUrl(vastVideoConfig)) {
+                            mVastManagerListener.onVastVideoConfigurationPrepared(vastVideoConfig);
+                        } else {
+                            mVastManagerListener.onVastVideoConfigurationPrepared(null);
+                        }
+                    }
+                }
+        );
+
+        try {
+            AsyncTasks.safeExecuteOnExecutor(
+                    vastVideoDownloadTask,
+                    vastVideoConfig.getNetworkMediaFileUrl()
+            );
+        } catch (Exception e) {
+            MoPubLog.d("Failed to download vast video", e);
+            mVastManagerListener.onVastVideoConfigurationPrepared(null);
+        }
+    }
+
+    /**
+     * This method takes the media file http url and checks to see if we have the media file downloaded
+     * and cached in the Disk LRU cache. If it is cached, then the {@link VastVideoConfig} is
+     * updated with the media file's url on disk.
+     *
+     * @param vastVideoConfig used to store the media file's disk url and web url
+     * @return true if the media file was already cached locally, otherwise false
+     */
+    private boolean updateDiskMediaFileUrl(
+            @NonNull final VastVideoConfig vastVideoConfig) {
+        Preconditions.checkNotNull(vastVideoConfig, "vastVideoConfig cannot be null");
+
+        final String networkMediaFileUrl = vastVideoConfig.getNetworkMediaFileUrl();
+        if (CacheService.containsKeyDiskCache(networkMediaFileUrl)) {
+            final String filePathDiskCache = CacheService.getFilePathDiskCache(networkMediaFileUrl);
+            vastVideoConfig.setDiskMediaFileUrl(filePathDiskCache);
+            return true;
+        }
+        return false;
+    }
+
+    private void initializeScreenDimensions(@NonNull final Context context) {
+        Preconditions.checkNotNull(context, "context cannot be null");
+        // This currently assumes that all vast videos will be played in landscape
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        final int xPx = display.getWidth();
+        final int yPx = display.getHeight();
+        // Use the screen density to convert x and y (in pixels) to DP. Also, check the density to
+        // make sure that this is a valid density and that this is not going to divide by 0.
+        float density = context.getResources().getDisplayMetrics().density;
+        if (density <= 0) {
+            density = 1;
+        }
+
+        // For landscape, width is always greater than height
+        int screenWidth = Math.max(xPx, yPx);
+        int screenHeight = Math.min(xPx, yPx);
+        mScreenAspectRatio = (double) screenWidth / screenHeight;
+        mScreenAreaDp = (int) ((screenWidth / density) * (screenHeight / density));
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    int getScreenAreaDp() {
+        return mScreenAreaDp;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    double getScreenAspectRatio() {
+        return mScreenAspectRatio;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastMediaXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastMediaXmlManager.java
new file mode 100644
index 00000000..a86d500c
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastMediaXmlManager.java
@@ -0,0 +1,83 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+/**
+ * This XML manager handles the actual video.
+ */
+class VastMediaXmlManager {
+
+    // Attribute names
+    private static final String WIDTH = "width";
+    private static final String HEIGHT = "height";
+    private static final String DELIVERY = "delivery";
+    private static final String VIDEO_TYPE  = "type";
+
+    @NonNull private final Node mMediaNode;
+
+    VastMediaXmlManager(@NonNull final Node mediaNode) {
+        Preconditions.checkNotNull(mediaNode, "mediaNode cannot be null");
+        mMediaNode = mediaNode;
+    }
+
+    /**
+     * 'progressive' for progressive download (e.g. HTTP) or 'streaming' for streaming protocols
+     * or {@code null} if not specified. MoPub expects to download the video. This is a required
+     * attribute.
+     *
+     * @return String of delivery type or {@code null}
+     */
+    @Nullable
+    String getDelivery() {
+        return XmlUtils.getAttributeValue(mMediaNode, DELIVERY);
+    }
+
+    /**
+     * Expected width of the video in pixels or {@code null} if not specified. This is a
+     * required attribute.
+     *
+     * @return Integer width of video or {@code null}
+     */
+    @Nullable
+    Integer getWidth() {
+        return XmlUtils.getAttributeValueAsInt(mMediaNode, WIDTH);
+    }
+
+    /**
+     * Expected height of the video in pixels or {@code null} if not specified. This is a
+     * required attribute.
+     *
+     * @return Integer height of video or {@code null}
+     */
+    @Nullable
+    Integer getHeight() {
+        return XmlUtils.getAttributeValueAsInt(mMediaNode, HEIGHT);
+    }
+
+    /**
+     * The MIME file type of the video or {@code null} if not specified. This is a required
+     * attribute. (e.g. 'video/x-flv' or 'video/mp4').
+     *
+     * @return The String type or {@code null}
+     */
+    @Nullable
+    String getType() {
+        return XmlUtils.getAttributeValue(mMediaNode, VIDEO_TYPE);
+    }
+
+    /**
+     * The URL of the video or {@code null} if not specified.
+     *
+     * @return String url of video or {@code null}
+     */
+    @Nullable
+    String getMediaUrl() {
+        return XmlUtils.getNodeValue(mMediaNode);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastResource.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastResource.java
new file mode 100644
index 00000000..41d387de
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastResource.java
@@ -0,0 +1,210 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+
+import java.io.Serializable;
+import java.util.Arrays;
+import java.util.List;
+
+/**
+ * The data and its type used to populate a Vast 3.0 companion ad or icon.
+ */
+class VastResource implements Serializable {
+    private static final long serialVersionUID = 0L;
+
+    private static final List<String> VALID_IMAGE_TYPES =
+            Arrays.asList("image/jpeg", "image/png", "image/bmp", "image/gif");
+    private static final List<String> VALID_APPLICATION_TYPES =
+            Arrays.asList("application/x-javascript");
+
+    /**
+     * The type of resource ordered according to priority.
+     */
+    enum Type {
+        STATIC_RESOURCE,
+        HTML_RESOURCE,
+        IFRAME_RESOURCE
+    }
+
+    /**
+     * The type of the static resource. Only static resources only will have values other than NONE.
+     */
+    enum CreativeType {
+        NONE,
+        IMAGE,
+        JAVASCRIPT
+    }
+
+    @NonNull private String mResource;
+    @NonNull private Type mType;
+    @NonNull private CreativeType mCreativeType;
+    private int mWidth;
+    private int mHeight;
+
+    /**
+     * Helper method that tries to create a {@link VastResource} by accessing all resource types on
+     * the {@link VastResourceXmlManager} in order of priority defined by the {@link Type} enum.
+     *
+     * @param resourceXmlManager the manager used to populate the {@link VastResource}
+     * @param width              the expected width of the resource. This only affects IFrames.
+     * @param height             the expected height of the resource. This only affects IFrames.
+     * @return the newly created VastResource
+     */
+    @Nullable
+    static VastResource fromVastResourceXmlManager(
+            @NonNull final VastResourceXmlManager resourceXmlManager, final int width,
+            final int height) {
+        for (Type type : Type.values()) {
+            VastResource vastResource =
+                    fromVastResourceXmlManager(resourceXmlManager, type, width, height);
+            if (vastResource != null) {
+                return vastResource;
+            }
+        }
+        return null;
+    }
+
+    /**
+     * Tries to create a {@link VastResource} by accessing a specific resource {@link Type} on the
+     * {@link VastResourceXmlManager}.
+     *
+     * @param resourceXmlManager the manager used to populate the {@link VastResource}
+     * @param type the resource {@link Type} to try to access
+     * @param width the expected width of the resource. This only affects IFrames.
+     * @param height the expected height of the resource. This only affects IFrames.
+     * @return the newly created VastResource
+     */
+    @Nullable
+    static VastResource fromVastResourceXmlManager(
+            @NonNull final VastResourceXmlManager resourceXmlManager,
+            final @NonNull Type type, final int width, final int height) {
+        Preconditions.checkNotNull(resourceXmlManager);
+        Preconditions.checkNotNull(type);
+
+        String iFrameResource = resourceXmlManager.getIFrameResource();
+        String htmlResource = resourceXmlManager.getHTMLResource();
+        String staticResource = resourceXmlManager.getStaticResource();
+        String staticResourceType = resourceXmlManager.getStaticResourceType();
+
+        String resource;
+        CreativeType creativeType;
+
+        if (type == Type.STATIC_RESOURCE &&
+                staticResource != null && staticResourceType != null
+                && (VALID_IMAGE_TYPES.contains(staticResourceType)
+                || VALID_APPLICATION_TYPES.contains(staticResourceType))) {
+            resource = staticResource;
+            if (VALID_IMAGE_TYPES.contains(staticResourceType)) {
+                creativeType = CreativeType.IMAGE;
+            } else {
+                creativeType = CreativeType.JAVASCRIPT;
+            }
+        } else if (type == Type.HTML_RESOURCE && htmlResource != null) {
+            resource = htmlResource;
+            creativeType = CreativeType.NONE;
+        } else if (type == Type.IFRAME_RESOURCE && iFrameResource != null) {
+            resource = iFrameResource;
+            creativeType = CreativeType.NONE;
+        } else {
+            return null;
+        }
+
+        return new VastResource(resource, type, creativeType, width, height);
+    }
+
+    /**
+     * Private constructor. Use fromVastResourceXmlManager() to create a VastResource.
+     */
+    VastResource(@NonNull final String resource, @NonNull final Type type,
+            @NonNull final CreativeType creativeType, final int width, final int height) {
+        Preconditions.checkNotNull(resource);
+        Preconditions.checkNotNull(type);
+        Preconditions.checkNotNull(creativeType);
+
+        mResource = resource;
+        mType = type;
+        mCreativeType = creativeType;
+        mWidth = width;
+        mHeight = height;
+    }
+
+    @NonNull
+    public String getResource() {
+        return mResource;
+    }
+
+    @NonNull
+    public Type getType() {
+        return mType;
+    }
+
+    @NonNull
+    public CreativeType getCreativeType() {
+        return mCreativeType;
+    }
+
+    /**
+     * Initializes a WebView used to display the resource.
+     *
+     * @param webView the resource's WebView.
+     */
+    public void initializeWebView(@NonNull VastWebView webView) {
+        Preconditions.checkNotNull(webView);
+
+        if (mType == Type.IFRAME_RESOURCE) {
+            webView.loadData("<iframe frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" " +
+                    "marginwidth=\"0\" style=\"border: 0px; margin: 0px;\" width=\"" + mWidth +
+                    "\" height=\"" + mHeight + "\" src=\"" + mResource + "\"></iframe>");
+        } else if (mType == Type.HTML_RESOURCE) {
+            webView.loadData(mResource);
+        } else if (mType == Type.STATIC_RESOURCE) {
+            if (mCreativeType == CreativeType.IMAGE) {
+                String data = "<html>" +
+                        "<head>" +
+                        "</head>" +
+                        // Set margin and padding to 0 in order to get rid of Android WebView
+                        // default padding
+                        "<body style=\"margin:0;padding:0\">" +
+                        "<img src=\"" + mResource + "\" width=\"100%\" style=\"max-width:100%;max-height:100%;\" />" +
+                        "</body>" +
+                        "</html>";
+                webView.loadData(data);
+            } else if (mCreativeType == CreativeType.JAVASCRIPT) {
+                String data = "<script src=\"" + mResource + "\"></script>";
+                webView.loadData(data);
+            }
+        }
+    }
+
+    /**
+     * Selects the correct click through url based on the type of resource.
+     *
+     * @param vastClickThroughUrl    The click through url as specified in the vast document. This
+     *                               is used with static images.
+     * @param webViewClickThroughUrl The click through url when pertaining to Javascript, HTML,
+     *                               IFrames that originated from a WebView.
+     * @return String representing the correct click through for the resource type which may be
+     * {@code null} if the correct click through url was not specified or {@code null}.
+     */
+    @Nullable
+    public String getCorrectClickThroughUrl(@Nullable final String vastClickThroughUrl,
+            @Nullable final String webViewClickThroughUrl) {
+        switch (mType) {
+            case STATIC_RESOURCE:
+                if (VastResource.CreativeType.IMAGE == mCreativeType) {
+                    return vastClickThroughUrl;
+                } else if (VastResource.CreativeType.JAVASCRIPT == mCreativeType) {
+                    return webViewClickThroughUrl;
+                }
+                return null;
+            case HTML_RESOURCE:
+            case IFRAME_RESOURCE:
+                return webViewClickThroughUrl;
+            default:
+                return null;
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastResourceXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastResourceXmlManager.java
new file mode 100644
index 00000000..51db66d4
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastResourceXmlManager.java
@@ -0,0 +1,76 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+public class VastResourceXmlManager {
+
+    // Element names
+    public static final String STATIC_RESOURCE = "StaticResource";
+    public static final String IFRAME_RESOURCE = "IFrameResource";
+    public static final String HTML_RESOURCE = "HTMLResource";
+
+    // Attribute names
+    public static final String CREATIVE_TYPE = "creativeType";
+
+    @NonNull private final Node mResourceNode;
+
+    VastResourceXmlManager(@NonNull final Node resourceNode) {
+        Preconditions.checkNotNull(resourceNode);
+        mResourceNode = resourceNode;
+    }
+
+    /**
+     * If this node has a static resource, then this method returns the static resource data,
+     * if present. This returns {@code null} if this node does not have a static resource.
+     *
+     * @return The static resource data or {@code null}
+     */
+    @Nullable
+    String getStaticResource() {
+        return XmlUtils.getNodeValue(XmlUtils.getFirstMatchingChildNode(mResourceNode, STATIC_RESOURCE));
+    }
+
+    /**
+     * If this node has a static resource, then this method returns the type of the static resource.
+     * This returns {@code null} if this node does not have a static resource.
+     *
+     * @return The static resource type or {@code null}
+     */
+    @Nullable
+    String getStaticResourceType() {
+        Node staticResource = XmlUtils.getFirstMatchingChildNode(mResourceNode, STATIC_RESOURCE);
+        String attribute = XmlUtils.getAttributeValue(staticResource, CREATIVE_TYPE);
+        if (attribute != null) {
+            return attribute.toLowerCase();
+        }
+        return null;
+    }
+
+    /**
+     * If this node has an iframe resource, then this method returns the iframe resource data, if
+     * present. This returns {@code null} if this node does not have an iframe resource.
+     *
+     * @return The iframe resource data or {@code null}
+     */
+    @Nullable
+    String getIFrameResource() {
+        return XmlUtils.getNodeValue(XmlUtils.getFirstMatchingChildNode(mResourceNode, IFRAME_RESOURCE));
+    }
+
+    /**
+     * If this node has an HTML resource, then this method returns the HTML resource data, if
+     * present. This returns {@code null} if this node does not have an HTML resource.
+     *
+     * @return The HTML resource data or {@code null}
+     */
+    @Nullable
+    String getHTMLResource() {
+        return XmlUtils.getNodeValue(XmlUtils.getFirstMatchingChildNode(mResourceNode, HTML_RESOURCE));
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastTracker.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastTracker.java
index 36f07711..46019add 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastTracker.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastTracker.java
@@ -7,19 +7,25 @@
 import java.io.Serializable;
 
 /**
- * State encapsulation for VAST tracking URLs that should only be called once. For example, progress
- * trackers are only called once.
+ * State encapsulation for VAST tracking URLs that may or may not only be called once. For example,
+ * progress trackers are only called once, but error trackers are repeatable.
  */
 public class VastTracker implements Serializable {
     private static final long serialVersionUID = 0L;
     @NonNull protected final String mTrackingUrl;
     private boolean mCalled;
+    private boolean mIsRepeatable;
 
     public VastTracker(@NonNull String trackingUrl) {
         Preconditions.checkNotNull(trackingUrl);
         mTrackingUrl = trackingUrl;
     }
 
+    public VastTracker(@NonNull String trackingUrl, boolean isRepeatable) {
+        this(trackingUrl);
+        mIsRepeatable = isRepeatable;
+    }
+
     @NonNull
     public String getTrackingUrl() {
         return mTrackingUrl;
@@ -32,4 +38,8 @@ public void setTracked() {
     public boolean isTracked() {
         return mCalled;
     }
+
+    public boolean isRepeatable() {
+        return mIsRepeatable;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
new file mode 100644
index 00000000..53e9c9ce
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
@@ -0,0 +1,88 @@
+package com.mopub.mobileads;
+
+import android.graphics.Bitmap;
+import android.media.MediaMetadataRetriever;
+import android.os.AsyncTask;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.widget.ImageView;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.ImageUtils;
+import com.mopub.mobileads.resource.DrawableConstants;
+
+public class VastVideoBlurLastVideoFrameTask extends AsyncTask<String, Void, Boolean> {
+    @NonNull private final MediaMetadataRetriever mMediaMetadataRetriever;
+    @NonNull private final ImageView mBlurredLastVideoFrameImageView;
+    private int mVideoDuration;
+    @Nullable private Bitmap mLastVideoFrame;
+    @Nullable private Bitmap mBlurredLastVideoFrame;
+
+    public VastVideoBlurLastVideoFrameTask(
+            @NonNull final MediaMetadataRetriever mediaMetadataRetriever,
+            @NonNull final ImageView blurredLastVideoFrameImageView, int videoDuration) {
+        mMediaMetadataRetriever = mediaMetadataRetriever;
+        mBlurredLastVideoFrameImageView = blurredLastVideoFrameImageView;
+        mVideoDuration = videoDuration;
+    }
+
+    @Override
+    protected Boolean doInBackground(String... videoPaths) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD_MR1) {
+            if (videoPaths == null || videoPaths.length == 0 || videoPaths[0] == null) {
+                return false;
+            }
+
+            try {
+                final String videoPath = videoPaths[0];
+
+                mMediaMetadataRetriever.setDataSource(videoPath);
+
+                mLastVideoFrame = mMediaMetadataRetriever.getFrameAtTime(
+                        mVideoDuration * 1000, MediaMetadataRetriever.OPTION_CLOSEST);
+
+                if (mLastVideoFrame == null) {
+                    return false;
+                }
+
+                mBlurredLastVideoFrame = ImageUtils.applyFastGaussianBlurToBitmap(
+                        mLastVideoFrame, 4);
+
+                return true;
+            } catch (Exception e) {
+                MoPubLog.d("Failed to blur last video frame", e);
+                return false;
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    protected void onPostExecute(final Boolean success) {
+        if (isCancelled()) {
+            onCancelled();
+            return;
+        }
+
+        if (success != null && success) {
+            mBlurredLastVideoFrameImageView.setImageBitmap(mBlurredLastVideoFrame);
+            ImageUtils.setImageViewAlpha(mBlurredLastVideoFrameImageView,
+                    DrawableConstants.BlurredLastVideoFrame.ALPHA);
+        }
+    }
+
+    @Override
+    protected void onCancelled() {
+        MoPubLog.d("VastVideoBlurLastVideoFrameTask was cancelled.");
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    Bitmap getBlurredLastVideoFrame() {
+        return mBlurredLastVideoFrame;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCloseButtonWidget.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCloseButtonWidget.java
new file mode 100644
index 00000000..a547b3a5
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCloseButtonWidget.java
@@ -0,0 +1,149 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Utils;
+import com.mopub.mobileads.resource.CloseButtonDrawable;
+import com.mopub.mobileads.resource.DrawableConstants;
+import com.mopub.network.Networking;
+import com.mopub.volley.VolleyError;
+import com.mopub.volley.toolbox.ImageLoader;
+
+import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
+
+public class VastVideoCloseButtonWidget extends RelativeLayout {
+    @NonNull private TextView mTextView;
+    @NonNull private ImageView mImageView;
+    @NonNull private final ImageLoader mImageLoader;
+    @NonNull private CloseButtonDrawable mCloseButtonDrawable;
+
+    private final int mEdgePadding;
+    private final int mTextRightMargin;
+    private final int mImagePadding;
+    private final int mWidgetHeight;
+
+    public VastVideoCloseButtonWidget(@NonNull final Context context) {
+        super(context);
+
+        setId((int) Utils.generateUniqueId());
+
+        mEdgePadding = Dips.dipsToIntPixels(DrawableConstants.CloseButton.EDGE_PADDING, context);
+        mImagePadding = Dips.dipsToIntPixels(DrawableConstants.CloseButton.IMAGE_PADDING_DIPS, context);
+        mWidgetHeight = Dips.dipsToIntPixels(DrawableConstants.CloseButton.WIDGET_HEIGHT_DIPS, context);
+        mTextRightMargin = Dips.dipsToIntPixels(DrawableConstants.CloseButton.TEXT_RIGHT_MARGIN_DIPS, context);
+
+        mCloseButtonDrawable = new CloseButtonDrawable();
+        mImageLoader = Networking.getImageLoader(context);
+
+        createImageView();
+        createTextView();
+
+        final RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(
+                WRAP_CONTENT,
+                mWidgetHeight);
+
+        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_TOP | RelativeLayout.ALIGN_PARENT_RIGHT);
+        setLayoutParams(layoutParams);
+    }
+
+    private void createImageView() {
+        mImageView = new ImageView(getContext());
+        mImageView.setId((int) Utils.generateUniqueId());
+
+        final RelativeLayout.LayoutParams iconLayoutParams = new RelativeLayout.LayoutParams(
+                mWidgetHeight,
+                mWidgetHeight);
+
+        iconLayoutParams.addRule(ALIGN_PARENT_RIGHT);
+
+        mImageView.setImageDrawable(mCloseButtonDrawable);
+        mImageView.setPadding(mImagePadding, mImagePadding + mEdgePadding, mImagePadding + mEdgePadding, mImagePadding);
+        addView(mImageView, iconLayoutParams);
+    }
+
+    private void createTextView() {
+        mTextView = new TextView(getContext());
+        mTextView.setSingleLine();
+        mTextView.setEllipsize(TextUtils.TruncateAt.END);
+        mTextView.setTextColor(DrawableConstants.CloseButton.TEXT_COLOR);
+        mTextView.setTextSize(DrawableConstants.CloseButton.TEXT_SIZE_SP);
+        mTextView.setTypeface(DrawableConstants.CloseButton.TEXT_TYPEFACE);
+        mTextView.setText(DrawableConstants.CloseButton.DEFAULT_CLOSE_BUTTON_TEXT);
+
+        final RelativeLayout.LayoutParams textLayoutParams = new RelativeLayout.LayoutParams(
+                WRAP_CONTENT,
+                WRAP_CONTENT);
+
+        textLayoutParams.addRule(CENTER_VERTICAL);
+        textLayoutParams.addRule(LEFT_OF, mImageView.getId());
+
+        mTextView.setPadding(0, mEdgePadding, 0, 0);
+        // space between text and image
+        textLayoutParams.setMargins(0, 0, mTextRightMargin, 0);
+
+        addView(mTextView, textLayoutParams);
+    }
+
+    void updateCloseButtonText(@Nullable final String text) {
+        if (mTextView != null) {
+            mTextView.setText(text);
+        }
+    }
+
+    void updateCloseButtonIcon(@NonNull final String imageUrl) {
+        mImageLoader.get(imageUrl, new ImageLoader.ImageListener() {
+            @Override
+            public void onResponse(final ImageLoader.ImageContainer imageContainer,
+                    final boolean isImmediate) {
+                Bitmap bitmap = imageContainer.getBitmap();
+                if (bitmap != null) {
+                    mImageView.setImageBitmap(bitmap);
+                } else {
+                    MoPubLog.d(String.format("%s returned null bitmap", imageUrl));
+                }
+            }
+
+            @Override
+            public void onErrorResponse(final VolleyError volleyError) {
+                MoPubLog.d("Failed to load image.", volleyError);
+            }
+        });
+    }
+
+    void setOnTouchListenerToContent(@Nullable View.OnTouchListener onTouchListener) {
+        mImageView.setOnTouchListener(onTouchListener);
+        mTextView.setOnTouchListener(onTouchListener);
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    ImageView getImageView() {
+        return mImageView;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    void setImageView(ImageView imageView) {
+        mImageView = imageView;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    TextView getTextView() {
+        return mTextView;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoConfig.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoConfig.java
new file mode 100644
index 00000000..913f4bf3
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoConfig.java
@@ -0,0 +1,604 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.ActivityNotFoundException;
+import android.content.Context;
+import android.content.Intent;
+import android.content.res.Configuration;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.MoPubBrowser;
+import com.mopub.common.Preconditions;
+import com.mopub.common.UrlAction;
+import com.mopub.common.UrlHandler;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.DeviceUtils;
+import com.mopub.common.util.Intents;
+import com.mopub.common.util.Strings;
+
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
+
+public class VastVideoConfig implements Serializable {
+    private static final long serialVersionUID = 1L;
+
+    @NonNull private final ArrayList<VastTracker> mImpressionTrackers;
+    @NonNull private final ArrayList<VastFractionalProgressTracker> mFractionalTrackers;
+    @NonNull private final ArrayList<VastAbsoluteProgressTracker> mAbsoluteTrackers;
+    @NonNull private final ArrayList<VastTracker> mPauseTrackers;
+    @NonNull private final ArrayList<VastTracker> mResumeTrackers;
+    @NonNull private final ArrayList<VastTracker> mCompleteTrackers;
+    @NonNull private final ArrayList<VastTracker> mCloseTrackers;
+    @NonNull private final ArrayList<VastTracker> mSkipTrackers;
+    @NonNull private final ArrayList<VastTracker> mClickTrackers;
+    @NonNull private final ArrayList<VastTracker> mErrorTrackers;
+    @Nullable private String mClickThroughUrl;
+    @Nullable private String mNetworkMediaFileUrl;
+    @Nullable private String mDiskMediaFileUrl;
+    @Nullable private String mSkipOffset;
+    @Nullable private VastCompanionAdConfig mLandscapeVastCompanionAdConfig;
+    @Nullable private VastCompanionAdConfig mPortraitVastCompanionAdConfig;
+    @Nullable private VastIconConfig mVastIconConfig;
+
+    // Custom extensions
+    @Nullable private String mCustomCtaText;
+    @Nullable private String mCustomSkipText;
+    @Nullable private String mCustomCloseIconUrl;
+    @NonNull private DeviceUtils.ForceOrientation mCustomForceOrientation = DeviceUtils.ForceOrientation.FORCE_LANDSCAPE; // Default is forcing landscape
+
+    /**
+     * Flag to indicate if the VAST xml document has explicitly set the orientation as opposed to
+     * using the default.
+     */
+    private boolean mIsForceOrientationSet;
+
+    public VastVideoConfig() {
+        mImpressionTrackers = new ArrayList<VastTracker>();
+        mFractionalTrackers = new ArrayList<VastFractionalProgressTracker>();
+        mAbsoluteTrackers = new ArrayList<VastAbsoluteProgressTracker>();
+        mPauseTrackers = new ArrayList<VastTracker>();
+        mResumeTrackers = new ArrayList<VastTracker>();
+        mCompleteTrackers = new ArrayList<VastTracker>();
+        mCloseTrackers = new ArrayList<VastTracker>();
+        mSkipTrackers = new ArrayList<VastTracker>();
+        mClickTrackers = new ArrayList<VastTracker>();
+        mErrorTrackers = new ArrayList<VastTracker>();
+    }
+
+    /**
+     * Setters
+     */
+
+    public void addImpressionTrackers(@NonNull final List<VastTracker> impressionTrackers) {
+        Preconditions.checkNotNull(impressionTrackers, "impressionTrackers cannot be null");
+        mImpressionTrackers.addAll(impressionTrackers);
+    }
+
+    /**
+     * Add trackers for percentage-based tracking. This includes all quartile trackers and any
+     * "progress" events with other percentages.
+     */
+    public void addFractionalTrackers(@NonNull final List<VastFractionalProgressTracker> fractionalTrackers) {
+        Preconditions.checkNotNull(fractionalTrackers, "fractionalTrackers cannot be null");
+        mFractionalTrackers.addAll(fractionalTrackers);
+        Collections.sort(mFractionalTrackers);
+    }
+
+    /**
+     * Add trackers for absolute tracking. This includes start trackers, which have an absolute threshold of 2 seconds.
+     */
+    public void addAbsoluteTrackers(@NonNull final List<VastAbsoluteProgressTracker> absoluteTrackers) {
+        Preconditions.checkNotNull(absoluteTrackers, "absoluteTrackers cannot be null");
+        mAbsoluteTrackers.addAll(absoluteTrackers);
+        Collections.sort(mAbsoluteTrackers);
+    }
+
+    public void addCompleteTrackers(@NonNull final List<VastTracker> completeTrackers) {
+        Preconditions.checkNotNull(completeTrackers, "completeTrackers cannot be null");
+        mCompleteTrackers.addAll(completeTrackers);
+    }
+
+    /**
+     * Add trackers for when the video is paused.
+     *
+     * @param pauseTrackers List of String URLs to hit
+     */
+    public void addPauseTrackers(@NonNull List<VastTracker> pauseTrackers) {
+        Preconditions.checkNotNull(pauseTrackers, "pauseTrackers cannot be null");
+        mPauseTrackers.addAll(pauseTrackers);
+    }
+
+    /**
+     * Add trackers for when the video is resumed.
+     *
+     * @param resumeTrackers List of String URLs to hit
+     */
+    public void addResumeTrackers(@NonNull List<VastTracker> resumeTrackers) {
+        Preconditions.checkNotNull(resumeTrackers, "resumeTrackers cannot be null");
+        mResumeTrackers.addAll(resumeTrackers);
+    }
+
+    public void addCloseTrackers(@NonNull final List<VastTracker> closeTrackers) {
+        Preconditions.checkNotNull(closeTrackers, "closeTrackers cannot be null");
+        mCloseTrackers.addAll(closeTrackers);
+    }
+
+    public void addSkipTrackers(@NonNull final List<VastTracker> skipTrackers) {
+        Preconditions.checkNotNull(skipTrackers, "skipTrackers cannot be null");
+        mSkipTrackers.addAll(skipTrackers);
+    }
+
+    public void addClickTrackers(@NonNull final List<VastTracker> clickTrackers) {
+        Preconditions.checkNotNull(clickTrackers, "clickTrackers cannot be null");
+        mClickTrackers.addAll(clickTrackers);
+    }
+
+    /**
+     * Add trackers for errors.
+     *
+     * @param errorTrackers A URL to hit when an error happens.
+     */
+    public void addErrorTrackers(@NonNull final List<VastTracker> errorTrackers) {
+        Preconditions.checkNotNull(errorTrackers, "errorTrackers cannot be null");
+        mErrorTrackers.addAll(errorTrackers);
+    }
+
+    public void setClickThroughUrl(@Nullable final String clickThroughUrl) {
+        mClickThroughUrl = clickThroughUrl;
+    }
+
+    public void setNetworkMediaFileUrl(@Nullable final String networkMediaFileUrl) {
+        mNetworkMediaFileUrl = networkMediaFileUrl;
+    }
+
+    public void setDiskMediaFileUrl(@Nullable final String diskMediaFileUrl) {
+        mDiskMediaFileUrl = diskMediaFileUrl;
+    }
+
+    public void setVastCompanionAd(@Nullable final VastCompanionAdConfig landscapeVastCompanionAdConfig,
+            @Nullable final VastCompanionAdConfig portraitVastCompanionAdConfig) {
+        mLandscapeVastCompanionAdConfig = landscapeVastCompanionAdConfig;
+        mPortraitVastCompanionAdConfig = portraitVastCompanionAdConfig;
+    }
+
+    public void setVastIconConfig(@Nullable final VastIconConfig vastIconConfig) {
+        mVastIconConfig = vastIconConfig;
+    }
+
+    public void setCustomCtaText(@Nullable final String customCtaText) {
+        if (customCtaText != null) {
+            mCustomCtaText = customCtaText;
+        }
+    }
+
+    public void setCustomSkipText(@Nullable final String customSkipText) {
+        if (customSkipText != null) {
+            mCustomSkipText = customSkipText;
+        }
+    }
+
+    public void setCustomCloseIconUrl(@Nullable final String customCloseIconUrl) {
+        if (customCloseIconUrl != null) {
+            mCustomCloseIconUrl = customCloseIconUrl;
+        }
+    }
+
+    public void setCustomForceOrientation(@Nullable final DeviceUtils.ForceOrientation customForceOrientation) {
+        if (customForceOrientation != null && customForceOrientation != DeviceUtils.ForceOrientation.UNDEFINED) {
+            mCustomForceOrientation = customForceOrientation;
+            mIsForceOrientationSet = true;
+        }
+    }
+
+    public void setSkipOffset(@Nullable final String skipOffset) {
+        if (skipOffset != null) {
+            mSkipOffset = skipOffset;
+        }
+    }
+
+    /**
+     * Getters
+     */
+
+    @NonNull
+    public List<VastTracker> getImpressionTrackers() {
+        return mImpressionTrackers;
+    }
+
+    @NonNull
+    public ArrayList<VastAbsoluteProgressTracker> getAbsoluteTrackers() {
+        return mAbsoluteTrackers;
+    }
+
+    @NonNull
+    public ArrayList<VastFractionalProgressTracker> getFractionalTrackers() {
+        return mFractionalTrackers;
+    }
+
+    @NonNull
+    public List<VastTracker> getPauseTrackers() {
+        return mPauseTrackers;
+    }
+
+    @NonNull
+    public List<VastTracker> getResumeTrackers() {
+        return mResumeTrackers;
+    }
+
+    @NonNull
+    public List<VastTracker> getCompleteTrackers() {
+        return mCompleteTrackers;
+    }
+
+    @NonNull
+    public List<VastTracker> getCloseTrackers() {
+        return mCloseTrackers;
+    }
+
+    @NonNull
+    public List<VastTracker> getSkipTrackers() {
+        return mSkipTrackers;
+    }
+
+    @NonNull
+    public List<VastTracker> getClickTrackers() {
+        return mClickTrackers;
+    }
+
+    /**
+     * Gets a list of error trackers.
+     *
+     * @return List of String URLs.
+     */
+    @NonNull
+    public List<VastTracker> getErrorTrackers() {
+        return mErrorTrackers;
+    }
+
+    @Nullable
+    public String getClickThroughUrl() {
+        return mClickThroughUrl;
+    }
+
+    @Nullable
+    public String getNetworkMediaFileUrl() {
+        return mNetworkMediaFileUrl;
+    }
+
+    @Nullable
+    public String getDiskMediaFileUrl() {
+        return mDiskMediaFileUrl;
+    }
+
+    @Nullable
+    public VastCompanionAdConfig getVastCompanionAd(final int orientation) {
+        switch (orientation) {
+            case Configuration.ORIENTATION_PORTRAIT:
+                return mPortraitVastCompanionAdConfig;
+            case Configuration.ORIENTATION_LANDSCAPE:
+                return mLandscapeVastCompanionAdConfig;
+            default:
+                return mLandscapeVastCompanionAdConfig;
+        }
+    }
+
+    @Nullable
+    public VastIconConfig getVastIconConfig() {
+        return mVastIconConfig;
+    }
+
+    @Nullable
+    public String getCustomCtaText() {
+        return mCustomCtaText;
+    }
+
+    @Nullable
+    public String getCustomSkipText() {
+        return mCustomSkipText;
+    }
+
+    @Nullable
+    public String getCustomCloseIconUrl() {
+        return mCustomCloseIconUrl;
+    }
+
+    public boolean isCustomForceOrientationSet() {
+        return mIsForceOrientationSet;
+    }
+
+    /**
+     * Returns whether or not there is a companion ad set. There must be both a landscape and a
+     * portrait companion ad set for this to be true.
+     *
+     * @return true if both the landscape and portrait companion ads are set, false otherwise.
+     */
+    public boolean hasCompanionAd() {
+        return mLandscapeVastCompanionAdConfig != null && mPortraitVastCompanionAdConfig != null;
+    }
+
+    /**
+     * Get custom force orientation
+     * @return ForceOrientation enum (default is FORCE_LANDSCAPE)
+     */
+    @NonNull
+    public DeviceUtils.ForceOrientation getCustomForceOrientation() {
+        return mCustomForceOrientation;
+    }
+
+    /**
+     * Gets the String specified in the VAST document regarding the skip offset. This should be in
+     * the form HH:MM:SS[.mmm] or n%. (e.g. 00:00:12, 00:00:12.345, 42%).
+     *
+     * @return String representation of the skip offset or {@code null} if not set.
+     */
+    @Nullable
+    public String getSkipOffsetString() {
+        return mSkipOffset;
+    }
+
+    /**
+     * Called when the video starts playing.
+     *
+     * @param context         The context. Can be application or activity context.
+     * @param contentPlayHead Current video playback time.
+     */
+    public void handleImpression(@NonNull final Context context, int contentPlayHead) {
+        Preconditions.checkNotNull(context, "context cannot be null");
+        makeVastTrackingHttpRequest(
+                mImpressionTrackers,
+                null,
+                contentPlayHead,
+                mNetworkMediaFileUrl,
+                context
+        );
+    }
+
+    /**
+     * Called when the video is clicked. Handles forwarding the user to the specified click through
+     * url.
+     *
+     * @param activity        This has to be an activity to call startActivityForResult.
+     * @param contentPlayHead Current video playback time when clicked.
+     * @param requestCode     The code that identifies what kind of activity request is going to be
+     *                        made
+     */
+    public void handleClick(@NonNull final Activity activity, final int contentPlayHead,
+            final int requestCode) {
+        Preconditions.checkNotNull(activity, "activity cannot be null");
+
+        makeVastTrackingHttpRequest(
+                mClickTrackers,
+                null,
+                contentPlayHead,
+                mNetworkMediaFileUrl,
+                activity
+        );
+
+        if (TextUtils.isEmpty(mClickThroughUrl)) {
+            return;
+        }
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(
+                        UrlAction.IGNORE_ABOUT_SCHEME,
+                        UrlAction.OPEN_APP_MARKET,
+                        UrlAction.OPEN_NATIVE_BROWSER,
+                        UrlAction.OPEN_IN_APP_BROWSER,
+                        UrlAction.HANDLE_SHARE_TWEET,
+                        UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK,
+                        UrlAction.FOLLOW_DEEP_LINK)
+                .withResultActions(new UrlHandler.ResultActions() {
+                    @Override
+                    public void urlHandlingSucceeded(@NonNull String url,
+                            @NonNull UrlAction urlAction) {
+                        if (urlAction == UrlAction.OPEN_IN_APP_BROWSER) {
+                            Bundle bundle = new Bundle();
+                            bundle.putString(MoPubBrowser.DESTINATION_URL_KEY, url);
+
+                            final Class clazz = MoPubBrowser.class;
+                            final Intent intent = Intents.getStartActivityIntent(
+                                    activity, clazz, bundle);
+                            try {
+                                activity.startActivityForResult(intent, requestCode);
+                            } catch (ActivityNotFoundException e) {
+                                MoPubLog.d("Activity " + clazz.getName() + " not found. Did you " +
+                                        "declare it in your AndroidManifest.xml?");
+                            }
+                        }
+                    }
+
+                    @Override
+                    public void urlHandlingFailed(@NonNull String url,
+                            @NonNull UrlAction lastFailedUrlAction) {
+                    }
+                })
+                .withoutMoPubBrowser()
+                .build().handleUrl(activity, mClickThroughUrl);
+    }
+
+    /**
+     * Called when the video is not finished and is resumed from the middle of the video.
+     *
+     * @param context         The context. Can be application or activity context.
+     * @param contentPlayHead Current video playback time.
+     */
+    public void handleResume(@NonNull final Context context, int contentPlayHead) {
+        Preconditions.checkNotNull(context, "context cannot be null");
+        makeVastTrackingHttpRequest(
+                mResumeTrackers,
+                null,
+                contentPlayHead,
+                mNetworkMediaFileUrl,
+                context
+        );
+    }
+
+    /**
+     * Called when the video is not finished and is paused.
+     *
+     * @param context         The context. Can be application or activity context.
+     * @param contentPlayHead Current video playback time.
+     */
+    public void handlePause(@NonNull final Context context, int contentPlayHead) {
+        Preconditions.checkNotNull(context, "context cannot be null");
+        makeVastTrackingHttpRequest(
+                mPauseTrackers,
+                null,
+                contentPlayHead,
+                mNetworkMediaFileUrl,
+                context
+        );
+    }
+
+    /**
+     * Called when the video is closed or skipped.
+     *
+     * @param context         The context. Can be application or activity context.
+     * @param contentPlayHead Current video playback time.
+     */
+    public void handleClose(@NonNull Context context, int contentPlayHead) {
+        Preconditions.checkNotNull(context, "context cannot be null");
+        makeVastTrackingHttpRequest(
+                mCloseTrackers,
+                null,
+                contentPlayHead,
+                mNetworkMediaFileUrl,
+                context
+        );
+
+        makeVastTrackingHttpRequest(
+                mSkipTrackers,
+                null,
+                contentPlayHead,
+                mNetworkMediaFileUrl,
+                context
+        );
+    }
+
+    /**
+     * Called when the video is played completely without skipping.
+     *
+     * @param context         The context. Can be application or activity context.
+     * @param contentPlayHead Current video playback time (should be duration of video).
+     */
+    public void handleComplete(@NonNull Context context, int contentPlayHead) {
+        Preconditions.checkNotNull(context, "context cannot be null");
+        makeVastTrackingHttpRequest(
+                mCompleteTrackers,
+                null,
+                contentPlayHead,
+                mNetworkMediaFileUrl,
+                context
+        );
+    }
+
+    /**
+     * Called when there is a problem with the video. Refer to the possible {@link VastErrorCode}s
+     * for a list of problems.
+     *
+     * @param context         The context. Can be application or activity context.
+     * @param contentPlayHead Current video playback time.
+     */
+    public void handleError(@NonNull Context context, @NonNull VastErrorCode errorCode,
+            int contentPlayHead) {
+        Preconditions.checkNotNull(context, "context cannot be null");
+        makeVastTrackingHttpRequest(
+                mErrorTrackers,
+                errorCode,
+                contentPlayHead,
+                mNetworkMediaFileUrl,
+                context
+        );
+    }
+
+    /**
+     * Returns untriggered VAST progress trackers with a progress before the provided position.
+     *
+     * @param currentPositionMillis the current video position in milliseconds.
+     * @param videoLengthMillis the total video length.
+     */
+    @NonNull
+    public List<VastTracker> getUntriggeredTrackersBefore(int currentPositionMillis, int videoLengthMillis) {
+        if (Preconditions.NoThrow.checkArgument(videoLengthMillis > 0)) {
+            float progressFraction = currentPositionMillis / (float) (videoLengthMillis);
+            List<VastTracker> untriggeredTrackers = new ArrayList<VastTracker>();
+
+            VastAbsoluteProgressTracker absoluteTest = new VastAbsoluteProgressTracker("", currentPositionMillis);
+            int absoluteTrackerCount = mAbsoluteTrackers.size();
+            for (int i = 0; i < absoluteTrackerCount; i++) {
+                VastAbsoluteProgressTracker tracker = mAbsoluteTrackers.get(i);
+                if (tracker.compareTo(absoluteTest) > 0) {
+                    break;
+                }
+                if (!tracker.isTracked()) {
+                    untriggeredTrackers.add(tracker);
+                }
+            }
+
+            final VastFractionalProgressTracker fractionalTest = new VastFractionalProgressTracker("", progressFraction);
+            int fractionalTrackerCount = mFractionalTrackers.size();
+            for (int i = 0; i < fractionalTrackerCount; i++) {
+                VastFractionalProgressTracker tracker = mFractionalTrackers.get(i);
+                if (tracker.compareTo(fractionalTest) > 0) {
+                    break;
+                }
+                if (!tracker.isTracked()) {
+                    untriggeredTrackers.add(tracker);
+                }
+            }
+
+            return untriggeredTrackers;
+        } else {
+            return Collections.emptyList();
+        }
+    }
+
+    /**
+     * Returns the number of untriggered progress trackers.
+     *
+     * @return Integer count >= 0 of the remaining progress trackers.
+     */
+    public int getRemainingProgressTrackerCount() {
+        return getUntriggeredTrackersBefore(Integer.MAX_VALUE, Integer.MAX_VALUE).size();
+    }
+
+    /**
+     * Gets the skip offset in milliseconds. If the skip offset would be past the video duration,
+     * this returns null. If an error occurs, this returns null.
+     *
+     * @param videoDuration Used to calculate percentage based offsets.
+     * @return The skip offset in milliseconds. Can return null.
+     */
+    @Nullable
+    public Integer getSkipOffsetMillis(final int videoDuration) {
+        if (mSkipOffset != null) {
+            try {
+                if (Strings.isAbsoluteTracker(mSkipOffset)) {
+                    Integer skipOffsetMilliseconds = Strings.parseAbsoluteOffset(mSkipOffset);
+                    if (skipOffsetMilliseconds != null && skipOffsetMilliseconds < videoDuration) {
+                        return skipOffsetMilliseconds;
+                    }
+                } else if (Strings.isPercentageTracker(mSkipOffset)) {
+                    float percentage = Float.parseFloat(mSkipOffset.replace("%", "")) / 100f;
+                    int skipOffsetMillisecondsRounded = Math.round(videoDuration * percentage);
+                    if (skipOffsetMillisecondsRounded < videoDuration) {
+                        return skipOffsetMillisecondsRounded;
+                    }
+                } else {
+                    MoPubLog.d(
+                            String.format("Invalid VAST skipoffset format: %s", mSkipOffset));
+                }
+            } catch (NumberFormatException e) {
+                MoPubLog.d(String.format("Failed to parse skipoffset %s", mSkipOffset));
+            }
+        }
+        return null;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java
new file mode 100644
index 00000000..0ca1a1ff
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java
@@ -0,0 +1,148 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.content.res.Configuration;
+import android.support.annotation.NonNull;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Utils;
+import com.mopub.mobileads.resource.CtaButtonDrawable;
+import com.mopub.mobileads.resource.DrawableConstants;
+
+public class VastVideoCtaButtonWidget extends ImageView {
+    @NonNull private CtaButtonDrawable mCtaButtonDrawable;
+    @NonNull private final RelativeLayout.LayoutParams mLandscapeLayoutParams;
+    @NonNull private final RelativeLayout.LayoutParams mPortraitLayoutParams;
+
+    private boolean mIsVideoSkippable;
+    private boolean mIsVideoComplete;
+    private boolean mHasCompanionAd;
+    private boolean mHasClickthroughUrl;
+
+    public VastVideoCtaButtonWidget(@NonNull final Context context, final int videoViewId,
+            final boolean hasCompanionAd, final boolean hasClickthroughUrl) {
+        super(context);
+
+        mHasCompanionAd = hasCompanionAd;
+        mHasClickthroughUrl = hasClickthroughUrl;
+
+        setId((int) Utils.generateUniqueId());
+
+        final int width = Dips.dipsToIntPixels(DrawableConstants.CtaButton.WIDTH_DIPS, context);
+        final int height = Dips.dipsToIntPixels(DrawableConstants.CtaButton.HEIGHT_DIPS, context);
+        final int margin = Dips.dipsToIntPixels(DrawableConstants.CtaButton.MARGIN_DIPS, context);
+
+        mCtaButtonDrawable = new CtaButtonDrawable(context);
+        setImageDrawable(mCtaButtonDrawable);
+
+        // landscape layout: placed bottom-right corner of video view
+        mLandscapeLayoutParams = new RelativeLayout.LayoutParams(width, height);
+        mLandscapeLayoutParams.setMargins(margin, margin, margin, margin);
+        mLandscapeLayoutParams.addRule(RelativeLayout.ALIGN_BOTTOM, videoViewId);
+        mLandscapeLayoutParams.addRule(RelativeLayout.ALIGN_RIGHT, videoViewId);
+
+        // portrait layout: placed center below video view
+        mPortraitLayoutParams = new RelativeLayout.LayoutParams(width, height);
+        mPortraitLayoutParams.setMargins(margin, margin, margin, margin);
+        mPortraitLayoutParams.addRule(RelativeLayout.BELOW, videoViewId);
+        mPortraitLayoutParams.addRule(RelativeLayout.CENTER_HORIZONTAL);
+
+        updateLayoutAndVisibility();
+    }
+
+    @Override
+    protected void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+
+        updateLayoutAndVisibility();
+    }
+
+    void updateCtaText(@NonNull final String customCtaText) {
+        mCtaButtonDrawable.setCtaText(customCtaText);
+    }
+
+    void notifyVideoSkippable() {
+        mIsVideoSkippable = true;
+        updateLayoutAndVisibility();
+    }
+
+    void notifyVideoComplete() {
+        mIsVideoSkippable = true;
+        mIsVideoComplete = true;
+        updateLayoutAndVisibility();
+    }
+
+    private void updateLayoutAndVisibility() {
+        // If the video does not have a clickthrough url, never show the CTA button
+        if (!mHasClickthroughUrl) {
+            setVisibility(View.GONE);
+            return;
+        }
+
+        // If video is not skippable yet, do not show CTA button
+        if (!mIsVideoSkippable) {
+            setVisibility(View.INVISIBLE);
+            return;
+        }
+
+        // If video has finished playing and there's a companion ad, do not show CTA button
+        if (mIsVideoComplete && mHasCompanionAd) {
+            setVisibility(View.GONE);
+            return;
+        }
+
+        final int currentOrientation = getResources().getConfiguration().orientation;
+
+        switch (currentOrientation) {
+            case Configuration.ORIENTATION_LANDSCAPE:
+                setVisibility(View.VISIBLE);
+                setLayoutParams(mLandscapeLayoutParams);
+                break;
+            case Configuration.ORIENTATION_PORTRAIT:
+                setVisibility(View.VISIBLE);
+                setLayoutParams(mPortraitLayoutParams);
+                break;
+            case Configuration.ORIENTATION_UNDEFINED:
+                MoPubLog.d("Screen orientation undefined: CTA button widget defaulting to portrait layout");
+                setVisibility(View.VISIBLE);
+                setLayoutParams(mPortraitLayoutParams);
+                break;
+            case Configuration.ORIENTATION_SQUARE:
+                MoPubLog.d("Screen orientation is deprecated ORIENTATION_SQUARE: CTA button widget defaulting to portrait layout");
+                setVisibility(View.VISIBLE);
+                setLayoutParams(mPortraitLayoutParams);
+                break;
+            default:
+                MoPubLog.d("Unrecognized screen orientation: CTA button widget defaulting to portrait layout");
+                setVisibility(View.VISIBLE);
+                setLayoutParams(mPortraitLayoutParams);
+                break;
+        }
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    String getCtaText() {
+        return mCtaButtonDrawable.getCtaText();
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    boolean hasPortraitLayoutParams() {
+        return getLayoutParams().equals(mPortraitLayoutParams);
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    boolean hasLandscapeLayoutParams() {
+        return getLayoutParams().equals(mLandscapeLayoutParams);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoDownloadTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoDownloadTask.java
index 9077525a..910b59d2 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoDownloadTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoDownloadTask.java
@@ -29,7 +29,7 @@ public VastVideoDownloadTask(final VastVideoDownloadTaskListener listener) {
 
     @Override
     protected Boolean doInBackground(final String... params) {
-        if (params == null || params[0] == null) {
+        if (params == null || params.length == 0 || params[0] == null) {
             return false;
         }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoGradientStripWidget.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoGradientStripWidget.java
new file mode 100644
index 00000000..bbc19b9b
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoGradientStripWidget.java
@@ -0,0 +1,100 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.content.res.Configuration;
+import android.graphics.drawable.GradientDrawable;
+import android.support.annotation.NonNull;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.DeviceUtils;
+import com.mopub.common.util.Dips;
+import com.mopub.mobileads.resource.DrawableConstants;
+
+public class VastVideoGradientStripWidget extends ImageView {
+    @NonNull DeviceUtils.ForceOrientation mForceOrientation;
+    private int mVisibilityForCompanionAd;
+    private boolean mHasCompanionAd;
+    private boolean mIsVideoComplete;
+
+    public VastVideoGradientStripWidget(@NonNull final Context context,
+            @NonNull final GradientDrawable.Orientation gradientOrientation,
+            @NonNull final DeviceUtils.ForceOrientation forceOrientation,
+            final boolean hasCompanionAd, final int visibilityForCompanionAd, final int layoutVerb,
+            final int layoutAnchor) {
+        super(context);
+
+        mForceOrientation = forceOrientation;
+        mVisibilityForCompanionAd = visibilityForCompanionAd;
+        mHasCompanionAd = hasCompanionAd;
+
+        final GradientDrawable gradientDrawable = new GradientDrawable(gradientOrientation,
+                new int[] {DrawableConstants.GradientStrip.START_COLOR,
+                        DrawableConstants.GradientStrip.END_COLOR});
+        setImageDrawable(gradientDrawable);
+
+        final RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(
+                RelativeLayout.LayoutParams.MATCH_PARENT,
+                Dips.dipsToIntPixels(DrawableConstants.GradientStrip.GRADIENT_STRIP_HEIGHT_DIPS,
+                        context));
+        layoutParams.addRule(layoutVerb, layoutAnchor);
+        setLayoutParams(layoutParams);
+
+        updateVisibility();
+    }
+
+    void notifyVideoComplete() {
+        mIsVideoComplete = true;
+        updateVisibility();
+    }
+
+    @Override
+    protected void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+
+        updateVisibility();
+    }
+
+    private void updateVisibility() {
+        if (mIsVideoComplete) {
+            if (mHasCompanionAd) {
+                setVisibility(mVisibilityForCompanionAd);
+            } else {
+                setVisibility(View.GONE);
+            }
+
+            return;
+        }
+
+        if (mForceOrientation == DeviceUtils.ForceOrientation.FORCE_PORTRAIT) {
+            setVisibility(View.INVISIBLE);
+        } else if (mForceOrientation == DeviceUtils.ForceOrientation.FORCE_LANDSCAPE) {
+            setVisibility(View.VISIBLE);
+        } else  {
+            final int currentOrientation = getResources().getConfiguration().orientation;
+
+            switch (currentOrientation) {
+                case Configuration.ORIENTATION_LANDSCAPE:
+                    setVisibility(View.VISIBLE);
+                    break;
+                case Configuration.ORIENTATION_PORTRAIT:
+                    setVisibility(View.INVISIBLE);
+                    break;
+                case Configuration.ORIENTATION_UNDEFINED:
+                    MoPubLog.d("Screen orientation undefined: do not show gradient strip widget");
+                    setVisibility(View.INVISIBLE);
+                    break;
+                case Configuration.ORIENTATION_SQUARE:
+                    MoPubLog.d("Screen orientation is deprecated ORIENTATION_SQUARE: do not show gradient strip widget");
+                    setVisibility(View.INVISIBLE);
+                    break;
+                default:
+                    MoPubLog.d("Unrecognized screen orientation: do not show gradient strip widget");
+                    setVisibility(View.INVISIBLE);
+                    break;
+            }
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
index 3ca5a8d3..a3a14cd9 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
@@ -3,8 +3,6 @@
 import com.mopub.common.CacheService;
 import com.mopub.common.DataKeys;
 import com.mopub.mobileads.factories.VastManagerFactory;
-import com.mopub.mobileads.util.vast.VastManager;
-import com.mopub.mobileads.util.vast.VastVideoConfiguration;
 
 import java.util.Map;
 
@@ -12,7 +10,7 @@
     private CustomEventInterstitialListener mCustomEventInterstitialListener;
     private String mVastResponse;
     private VastManager mVastManager;
-    private VastVideoConfiguration mVastVideoConfiguration;
+    private VastVideoConfig mVastVideoConfig;
 
     @Override
     protected void extractExtras(Map<String, String> serverExtras) {
@@ -29,12 +27,12 @@ protected void preRenderHtml(CustomEventInterstitialListener customEventIntersti
         }
 
         mVastManager = VastManagerFactory.create(mContext);
-        mVastManager.prepareVastVideoConfiguration(mVastResponse, this);
+        mVastManager.prepareVastVideoConfiguration(mVastResponse, this, mContext);
     }
 
     @Override
     public void showInterstitial() {
-        MraidVideoPlayerActivity.startVast(mContext, mVastVideoConfiguration, mBroadcastIdentifier);
+        MraidVideoPlayerActivity.startVast(mContext, mVastVideoConfig, mBroadcastIdentifier);
     }
 
     @Override
@@ -51,13 +49,13 @@ public void onInvalidate() {
      */
 
     @Override
-    public void onVastVideoConfigurationPrepared(final VastVideoConfiguration vastVideoConfiguration) {
-        if (vastVideoConfiguration == null) {
+    public void onVastVideoConfigurationPrepared(final VastVideoConfig vastVideoConfig) {
+        if (vastVideoConfig == null) {
             mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.VIDEO_DOWNLOAD_ERROR);
             return;
         }
 
-        mVastVideoConfiguration = vastVideoConfiguration;
+        mVastVideoConfig = vastVideoConfig;
         mCustomEventInterstitialListener.onInterstitialLoaded();
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java
new file mode 100644
index 00000000..7f7eb5d3
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java
@@ -0,0 +1,60 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Utils;
+import com.mopub.mobileads.resource.DrawableConstants;
+import com.mopub.mobileads.resource.ProgressBarDrawable;
+
+public class VastVideoProgressBarWidget extends ImageView {
+    @NonNull private ProgressBarDrawable mProgressBarDrawable;
+
+    public VastVideoProgressBarWidget(@NonNull final Context context, final int anchorId) {
+        super(context);
+
+        setId((int) Utils.generateUniqueId());
+
+        mProgressBarDrawable = new ProgressBarDrawable(context);
+        setImageDrawable(mProgressBarDrawable);
+
+        final int progressBarHeight
+                = Dips.dipsToIntPixels(DrawableConstants.ProgressBar.HEIGHT_DIPS, context);
+
+        final RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(
+                RelativeLayout.LayoutParams.MATCH_PARENT,
+                progressBarHeight);
+
+        layoutParams.addRule(RelativeLayout.ALIGN_BOTTOM, anchorId);
+
+        setLayoutParams(layoutParams);
+    }
+
+    void calibrateAndMakeVisible(final int duration, final int skipOffset) {
+        mProgressBarDrawable.setDurationAndSkipOffset(duration, skipOffset);
+        setVisibility(View.VISIBLE);
+    }
+
+    void updateProgress(final int progress) {
+        mProgressBarDrawable.setProgress(progress);
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    ProgressBarDrawable getImageViewDrawable() {
+        return mProgressBarDrawable;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    void setImageViewDrawable(@NonNull ProgressBarDrawable drawable) {
+        mProgressBarDrawable = drawable;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java
new file mode 100644
index 00000000..8fe0e8fd
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java
@@ -0,0 +1,78 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Utils;
+import com.mopub.mobileads.resource.DrawableConstants;
+import com.mopub.mobileads.resource.RadialCountdownDrawable;
+
+public class VastVideoRadialCountdownWidget extends ImageView {
+    @NonNull private RadialCountdownDrawable mRadialCountdownDrawable;
+    private int mLastProgressMilliseconds;
+
+    public VastVideoRadialCountdownWidget(@NonNull final Context context) {
+        super(context);
+
+        setId((int) Utils.generateUniqueId());
+
+        final int sideLength = Dips.dipsToIntPixels(DrawableConstants.RadialCountdown.SIDE_LENGTH_DIPS, context);
+        final int topMargin = Dips.dipsToIntPixels(DrawableConstants.RadialCountdown.TOP_MARGIN_DIPS, context);
+        final int rightMargin = Dips.dipsToIntPixels(DrawableConstants.RadialCountdown.RIGHT_MARGIN_DIPS, context);
+        final int padding = Dips.dipsToIntPixels(DrawableConstants.RadialCountdown.PADDING_DIPS, context);
+
+        mRadialCountdownDrawable = new RadialCountdownDrawable(context);
+        setImageDrawable(mRadialCountdownDrawable);
+        setPadding(padding, padding, padding, padding);
+
+        RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(
+                sideLength,
+                sideLength);
+        layoutParams.setMargins(0, topMargin, rightMargin, 0);
+        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_TOP | RelativeLayout.ALIGN_PARENT_RIGHT);
+        setLayoutParams(layoutParams);
+    }
+
+    void calibrateAndMakeVisible(final int initialCountdownMilliseconds) {
+        mRadialCountdownDrawable.setInitialCountdown(initialCountdownMilliseconds);
+        setVisibility(VISIBLE);
+    }
+
+    void updateCountdownProgress(final int initialCountdownMilliseconds, final int currentProgressMilliseconds) {
+        // There exists an Android video player bug where VideoView.getCurrentPosition()
+        // temporarily returns 0 right after backgrounding and switching back to the app.
+        // Therefore, we check against the last known current position to ensure that it's
+        // monotonically increasing.
+        if (currentProgressMilliseconds >= mLastProgressMilliseconds) {
+            int millisecondsUntilSkippable = initialCountdownMilliseconds - currentProgressMilliseconds;
+
+            // XXX
+            // After backgrounding and switching back to the app,
+            // this widget becomes erroneously visible.
+            if (millisecondsUntilSkippable < 0) {
+                setVisibility(GONE);
+            } else {
+                mRadialCountdownDrawable.updateCountdownProgress(currentProgressMilliseconds);
+                mLastProgressMilliseconds = currentProgressMilliseconds;
+            }
+        }
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    RadialCountdownDrawable getImageViewDrawable() {
+        return mRadialCountdownDrawable;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    void setImageViewDrawable(RadialCountdownDrawable drawable) {
+        mRadialCountdownDrawable = drawable;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoToolbar.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoToolbar.java
deleted file mode 100644
index cb89e081..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoToolbar.java
+++ /dev/null
@@ -1,194 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.view.MotionEvent;
-import android.view.View;
-import android.widget.LinearLayout;
-import android.widget.RelativeLayout;
-
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.util.Dips;
-import com.mopub.common.util.Utils;
-import com.mopub.mobileads.resource.CloseButtonDrawable;
-import com.mopub.mobileads.resource.CountdownDrawable;
-import com.mopub.mobileads.resource.LearnMoreDrawable;
-
-import static android.graphics.Color.BLACK;
-import static android.view.Gravity.CENTER_VERTICAL;
-import static android.view.Gravity.LEFT;
-import static android.view.Gravity.RIGHT;
-import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
-
-class VastVideoToolbar extends LinearLayout {
-    private static final int TOOLBAR_HEIGHT_DIPS = 44;
-    private static final int THRESHOLD_FOR_HIDING_VIDEO_DURATION = 200;
-
-    private final ToolbarWidget mDurationWidget;
-    private final ToolbarWidget mLearnMoreWidget;
-    private final ToolbarWidget mCountdownWidget;
-    private final ToolbarWidget mCloseButtonWidget;
-
-    public VastVideoToolbar(final Context context) {
-        super(context);
-
-        setId((int) Utils.generateUniqueId());
-
-        // Consume all click events on the video toolbar
-        setOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View view, MotionEvent motionEvent) {
-                return true;
-            }
-        });
-
-        final int videoToolbarHeight = Dips.dipsToIntPixels(TOOLBAR_HEIGHT_DIPS, getContext());
-        final LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(
-                MATCH_PARENT,
-                videoToolbarHeight);
-        setLayoutParams(layoutParams);
-
-        setBackgroundColor(BLACK);
-        getBackground().setAlpha(180);
-
-        mDurationWidget = createDurationWidget();
-        mLearnMoreWidget = createLearnMoreWidget();
-        mCountdownWidget = createCountdownWidget();
-        mCloseButtonWidget = createCloseButtonWidget();
-
-        addView(mDurationWidget);
-        addView(mLearnMoreWidget);
-        addView(mCountdownWidget);
-        addView(mCloseButtonWidget);
-    }
-
-    /**
-     * Rounds up to the nearest full second. Formally, this is the long
-     * closest to negative infinity above or equal to millis, in milliseconds,
-     * converted to seconds.
-     *
-     * @param millis Time in milliseconds
-     * @return Time in seconds, rounded up.
-     */
-    @VisibleForTesting
-    long convertMillisecondsToSecondsRoundedUp(final long millis) {
-        return Math.round(Math.ceil(millis / 1000f));
-    }
-
-    @VisibleForTesting
-    void updateDurationWidget(final int remainingTime) {
-        if (remainingTime >= THRESHOLD_FOR_HIDING_VIDEO_DURATION) {
-            mDurationWidget.updateText("Ends in " + formatTime(remainingTime));
-        } else if (remainingTime >= 0) {
-            mDurationWidget.updateText("Thanks for watching");
-        }
-    }
-
-    @VisibleForTesting
-    String formatTime(final long milliseconds) {
-        final long seconds = convertMillisecondsToSecondsRoundedUp(milliseconds);
-
-        if (seconds == 1) {
-            return "1 second";
-        } else {
-            return String.valueOf(seconds) + " seconds";
-        }
-    }
-
-    void updateCountdownWidget(final int remainingTime) {
-        if (remainingTime >= 0 && mCountdownWidget.getVisibility() == View.INVISIBLE) {
-            mCloseButtonWidget.setVisibility(View.GONE);
-            mCountdownWidget.setVisibility(View.VISIBLE);
-        }
-
-        mCountdownWidget.updateImageText(String.valueOf(convertMillisecondsToSecondsRoundedUp(
-                remainingTime)));
-    }
-
-    void updateLearnMoreButtonText(final String customCtaText) {
-        mLearnMoreWidget.updateText(customCtaText);
-    }
-
-    void updateCloseButtonText(final String customSkipText) {
-        mCloseButtonWidget.updateText(customSkipText);
-    }
-
-    void updateCloseButtonIcon(final String customCloseIconUrl) {
-        mCloseButtonWidget.updateImage(customCloseIconUrl);
-    }
-
-    void makeInteractable() {
-        // The countdown timer has ended and user can interact with close and learn more button
-        mCountdownWidget.setVisibility(View.GONE);
-        mLearnMoreWidget.setVisibility(View.VISIBLE);
-        mCloseButtonWidget.setVisibility(View.VISIBLE);
-    }
-
-    void setCloseButtonOnTouchListener(final OnTouchListener onTouchListener) {
-        mCloseButtonWidget.setOnTouchListener(onTouchListener);
-    }
-
-    void setLearnMoreButtonOnTouchListener(final OnTouchListener onTouchListener) {
-        mLearnMoreWidget.setOnTouchListener(onTouchListener);
-    }
-
-    private ToolbarWidget createDurationWidget() {
-        return new ToolbarWidget.Builder(getContext())
-                .weight(2f)
-                .widgetGravity(CENTER_VERTICAL | LEFT)
-                .hasText()
-                .textAlign(RelativeLayout.ALIGN_PARENT_LEFT)
-                .build();
-    }
-
-    private ToolbarWidget createLearnMoreWidget() {
-        return new ToolbarWidget.Builder(getContext())
-                .weight(1f)
-                .widgetGravity(CENTER_VERTICAL | RIGHT)
-                .defaultText("Learn More")
-                .drawable(new LearnMoreDrawable())
-                .visibility(View.INVISIBLE)
-                .build();
-    }
-
-    private ToolbarWidget createCountdownWidget() {
-        final CountdownDrawable countdownDrawable = new CountdownDrawable(getContext());
-
-        return new ToolbarWidget.Builder(getContext())
-                .weight(1f)
-                .widgetGravity(CENTER_VERTICAL | RIGHT)
-                .defaultText("Skip in")
-                .drawable(countdownDrawable)
-                .visibility(View.INVISIBLE)
-                .build();
-    }
-
-    private ToolbarWidget createCloseButtonWidget() {
-        return new ToolbarWidget.Builder(getContext())
-                .weight(1f)
-                .widgetGravity(CENTER_VERTICAL | RIGHT)
-                .defaultText("Close")
-                .drawable(new CloseButtonDrawable())
-                .visibility(View.GONE)
-                .build();
-    }
-
-    @Deprecated // for testing
-    ToolbarWidget getDurationWidget() {
-        return mDurationWidget;
-    }
-
-    @Deprecated // for testing
-    ToolbarWidget getLearnMoreWidget() {
-        return mLearnMoreWidget;
-    }
-
-    @Deprecated // for testing
-    ToolbarWidget getCountdownWidget() {
-        return mCountdownWidget;
-    }
-
-    @Deprecated // for testing
-    ToolbarWidget getCloseButtonWidget() {
-        return mCloseButtonWidget;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoView.java
new file mode 100644
index 00000000..32904efb
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoView.java
@@ -0,0 +1,162 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.media.MediaMetadataRetriever;
+import android.media.MediaPlayer;
+import android.os.AsyncTask;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.widget.ImageView;
+import android.widget.VideoView;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.AsyncTasks;
+import com.mopub.common.util.Streams;
+
+import java.io.File;
+import java.io.FileInputStream;
+
+/**
+ * Custom VideoView dedicated for VAST videos. This primarily deals with the blurring of the last
+ * frame when there's no companion ad and retrying the video.
+ */
+public class VastVideoView extends VideoView {
+
+    private static final int MAX_VIDEO_RETRIES = 1;
+    private static final int VIDEO_VIEW_FILE_PERMISSION_ERROR = Integer.MIN_VALUE;
+
+    @Nullable private VastVideoBlurLastVideoFrameTask mBlurLastVideoFrameTask;
+    @Nullable private MediaMetadataRetriever mMediaMetadataRetriever;
+    private int mVideoRetries;
+
+    public VastVideoView(@NonNull final Context context) {
+        super(context);
+        Preconditions.checkNotNull(context, "context cannot be null");
+        mMediaMetadataRetriever = createMediaMetadataRetriever();
+    }
+
+    /**
+     * Launches an async task to blur the last frame of the video. If the API of the device is not
+     * high enough, this does nothing.
+     *
+     * @param blurredLastVideoFrameImageView The view will get populated with the image when the
+     *                                       async task is finished.
+     */
+    public void prepareBlurredLastVideoFrame(
+            @NonNull final ImageView blurredLastVideoFrameImageView,
+            @NonNull final String diskMediaFileUrl) {
+        if (mMediaMetadataRetriever != null) {
+            mBlurLastVideoFrameTask = new VastVideoBlurLastVideoFrameTask(mMediaMetadataRetriever,
+                    blurredLastVideoFrameImageView, getDuration());
+
+            try {
+                AsyncTasks.safeExecuteOnExecutor(
+                        mBlurLastVideoFrameTask,
+                        diskMediaFileUrl
+                );
+            } catch (Exception e) {
+                MoPubLog.d("Failed to blur last video frame", e);
+            }
+        }
+    }
+
+    /**
+     * Called when the activity enclosing this view is destroyed. We do not want to continue this
+     * task when the activity expecting the result no longer exists.
+     */
+    public void onDestroy() {
+        if (mBlurLastVideoFrameTask != null &&
+                mBlurLastVideoFrameTask.getStatus() != AsyncTask.Status.FINISHED) {
+            mBlurLastVideoFrameTask.cancel(true);
+        }
+    }
+
+    boolean retryMediaPlayer(final MediaPlayer mediaPlayer, final int what, final int extra,
+            @NonNull final String diskMediaFileUrl) {
+        // XXX
+        // VideoView has a bug in versions lower than Jelly Bean, Api Level 16, Android 4.1
+        // For api < 16, VideoView is not able to read files written to disk since it reads them in
+        // a Context different from the Application and therefore does not have correct permission.
+        // To solve this problem we obtain the video file descriptor ourselves with valid permissions
+        // and pass it to the underlying MediaPlayer in VideoView.
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN
+                && what == MediaPlayer.MEDIA_ERROR_UNKNOWN
+                && extra == VIDEO_VIEW_FILE_PERMISSION_ERROR
+                && mVideoRetries < MAX_VIDEO_RETRIES) {
+
+            FileInputStream inputStream = null;
+            try {
+                mediaPlayer.reset();
+                final File file = new File(diskMediaFileUrl);
+                inputStream = new FileInputStream(file);
+                mediaPlayer.setDataSource(inputStream.getFD());
+
+                // XXX
+                // VideoView has a callback registered with the MediaPlayer to set a flag when the
+                // media file has been prepared. Start also sets a flag in VideoView indicating the
+                // desired state is to play the video. Therefore, whichever method finishes last
+                // will check both flags and begin playing the video.
+                mediaPlayer.prepareAsync();
+                start();
+                return true;
+            } catch (Exception e) {
+                return false;
+            } finally {
+                Streams.closeStream(inputStream);
+                mVideoRetries++;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Called when the activity enclosing this view is resumed.
+     */
+    public void onResume() {
+        // When resuming, VideoView needs to reinitialize its MediaPlayer with the video path
+        // and therefore reset the count to zero, to let it retry on error
+        mVideoRetries = 0;
+    }
+
+    @VisibleForTesting
+    @Nullable
+    MediaMetadataRetriever createMediaMetadataRetriever() {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD_MR1) {
+            return new MediaMetadataRetriever();
+        }
+
+        return null;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    void setMediaMetadataRetriever(@NonNull MediaMetadataRetriever mediaMetadataRetriever) {
+        mMediaMetadataRetriever = mediaMetadataRetriever;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    @Nullable
+    VastVideoBlurLastVideoFrameTask getBlurLastVideoFrameTask() {
+        return mBlurLastVideoFrameTask;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    void setBlurLastVideoFrameTask(@NonNull VastVideoBlurLastVideoFrameTask blurLastVideoFrameTask) {
+        mBlurLastVideoFrameTask = blurLastVideoFrameTask;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    int getVideoRetries() {
+        return mVideoRetries;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
index 0125daa1..77f9cece 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
@@ -3,143 +3,190 @@
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
-import android.graphics.Bitmap;
+import android.content.res.Configuration;
 import android.graphics.Color;
-import android.graphics.drawable.Drawable;
 import android.graphics.drawable.GradientDrawable;
-import android.graphics.drawable.LayerDrawable;
 import android.media.MediaPlayer;
 import android.os.Bundle;
 import android.os.Handler;
 import android.os.Looper;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.text.TextUtils;
 import android.view.Gravity;
 import android.view.MotionEvent;
 import android.view.View;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
 import android.widget.ImageView;
 import android.widget.RelativeLayout;
 import android.widget.VideoView;
 
-import com.mopub.common.DownloadResponse;
-import com.mopub.common.DownloadTask;
-import com.mopub.common.HttpResponses;
-import com.mopub.common.MoPubBrowser;
 import com.mopub.common.Preconditions;
-import com.mopub.common.UrlAction;
-import com.mopub.common.UrlHandler;
 import com.mopub.common.VisibleForTesting;
-import com.mopub.common.event.BaseEvent;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.Dips;
-import com.mopub.common.util.Drawables;
-import com.mopub.common.util.Streams;
-import com.mopub.common.util.Strings;
-import com.mopub.common.util.VersionCode;
-import com.mopub.mobileads.util.vast.VastCompanionAd;
-import com.mopub.mobileads.util.vast.VastVideoConfiguration;
-import com.mopub.network.TrackingRequest;
-
-import org.apache.http.HttpStatus;
-import org.apache.http.client.methods.HttpGet;
-
-import java.io.File;
-import java.io.FileInputStream;
+import com.mopub.common.util.Utils;
+
 import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
 
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
-import static com.mopub.common.HttpClient.initializeHttpGet;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.network.TrackingRequest.makeTrackingHttpRequest;
+import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
 
-public class VastVideoViewController extends BaseVideoViewController implements DownloadTask.DownloadTaskListener {
-    static final String VAST_VIDEO_CONFIGURATION = "vast_video_configuration";
+public class VastVideoViewController extends BaseVideoViewController {
+    static final String VAST_VIDEO_CONFIG = "vast_video_config";
+    static final String CURRENT_POSITION = "current_position";
+    static final String RESUMED_VAST_CONFIG = "resumed_vast_config";
 
     private static final long VIDEO_PROGRESS_TIMER_CHECKER_DELAY = 50;
     private static final long VIDEO_COUNTDOWN_UPDATE_INTERVAL = 250;
     private static final int MOPUB_BROWSER_REQUEST_CODE = 1;
-    private static final int MAX_VIDEO_RETRIES = 1;
-    private static final int VIDEO_VIEW_FILE_PERMISSION_ERROR = Integer.MIN_VALUE;
+    private static final int SEEKER_POSITION_NOT_INITIALIZED = -1;
+
+    /**
+     * Android WebViews supposedly have padding on each side of 10 dp. However, through empirical
+     * testing, the number is actually closer to 8 dp. Increasing the width and height of the
+     * WebView by this many dp will make the images inside not get cut off. This also prevents the
+     * image from being scrollable.
+     */
+    public static final int WEBVIEW_PADDING = 16;
 
     static final int DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON = 5 * 1000;
     static final int MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON = 16 * 1000;
 
-    private final VastVideoConfiguration mVastVideoConfiguration;
-    private final VastCompanionAd mVastCompanionAd;
-    private final VastVideoToolbar mVastVideoToolbar;
-    private final VideoView mVideoView;
-    private final ImageView mCompanionAdImageView;
-    private final View.OnTouchListener mClickThroughListener;
+    private final VastVideoConfig mVastVideoConfig;
 
-    private final VastVideoViewProgressRunnable mProgressCheckerRunnable;
-    private final VastVideoViewCountdownRunnable mCountdownRunnable;
-    private int mShowCloseButtonDelay = DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON;
+    @NonNull private final VastVideoView mVideoView;
+    @NonNull private VastVideoGradientStripWidget mTopGradientStripWidget;
+    @NonNull private VastVideoGradientStripWidget mBottomGradientStripWidget;
+    @NonNull private ImageView mBlurredLastVideoFrameImageView;
 
-    private boolean mShowCloseButtonEventFired;
+    @NonNull private VastVideoProgressBarWidget mProgressBarWidget;
+    @NonNull private VastVideoRadialCountdownWidget mRadialCountdownWidget;
+    @NonNull private VastVideoCtaButtonWidget mCtaButtonWidget;
+    @NonNull private VastVideoCloseButtonWidget mCloseButtonWidget;
+
+    @Nullable private VastCompanionAdConfig mVastCompanionAdConfig;
+    @NonNull private final View mLandscapeCompanionAdView;
+    @NonNull private final View mPortraitCompanionAdView;
+    @Nullable private final VastIconConfig mVastIconConfig;
+    @NonNull private final View mIconView;
 
+    @NonNull private final VastVideoViewProgressRunnable mProgressCheckerRunnable;
+    @NonNull private final VastVideoViewCountdownRunnable mCountdownRunnable;
+    @NonNull private final View.OnTouchListener mClickThroughListener;
+
+    private int mShowCloseButtonDelay = DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON;
+    private boolean mShowCloseButtonEventFired;
     private int mSeekerPositionOnPause;
     private boolean mIsVideoFinishedPlaying;
-    private int mVideoRetries;
-
     private boolean mVideoError;
-    private boolean mCompletionTrackerFired;
-
     private boolean mHasSkipOffset = false;
+    private boolean mIsCalibrationDone = false;
+    private int mDuration;
 
-    VastVideoViewController(final Context context,
-            final Bundle bundle,
+    /**
+     * For when the video is closing.
+     */
+    private boolean mIsClosing = false;
+
+    VastVideoViewController(final Activity activity,
+            final Bundle intentExtras,
+            @Nullable final Bundle savedInstanceState,
             final long broadcastIdentifier,
             final BaseVideoViewControllerListener baseVideoViewControllerListener)
             throws IllegalStateException {
-        super(context, broadcastIdentifier, baseVideoViewControllerListener);
-        mSeekerPositionOnPause = -1;
-        mVideoRetries = 0;
+        super(activity, broadcastIdentifier, baseVideoViewControllerListener);
+        mSeekerPositionOnPause = SEEKER_POSITION_NOT_INITIALIZED;
 
-        Serializable serializable = bundle.getSerializable(VAST_VIDEO_CONFIGURATION);
-        if (serializable != null && serializable instanceof VastVideoConfiguration) {
-            mVastVideoConfiguration = (VastVideoConfiguration) serializable;
+        Serializable resumedVastConfiguration = null;
+        if (savedInstanceState != null) {
+            resumedVastConfiguration =
+                    savedInstanceState.getSerializable(RESUMED_VAST_CONFIG);
+        }
+        Serializable serializable = intentExtras.getSerializable(VAST_VIDEO_CONFIG);
+        if (resumedVastConfiguration != null
+                && resumedVastConfiguration instanceof VastVideoConfig) {
+            mVastVideoConfig = (VastVideoConfig) resumedVastConfiguration;
+            mSeekerPositionOnPause =
+                    savedInstanceState.getInt(CURRENT_POSITION, SEEKER_POSITION_NOT_INITIALIZED);
+        } else if (serializable != null && serializable instanceof VastVideoConfig) {
+            mVastVideoConfig = (VastVideoConfig) serializable;
         } else {
-            throw new IllegalStateException("VastVideoConfiguration is invalid");
+            throw new IllegalStateException("VastVideoConfig is invalid");
         }
 
-        if (mVastVideoConfiguration.getDiskMediaFileUrl() == null) {
-            throw new IllegalStateException("VastVideoConfiguration does not have a video disk path");
+        if (mVastVideoConfig.getDiskMediaFileUrl() == null) {
+            throw new IllegalStateException("VastVideoConfig does not have a video disk path");
         }
 
-        mVastCompanionAd = mVastVideoConfiguration.getVastCompanionAd();
+        mVastCompanionAdConfig = mVastVideoConfig.getVastCompanionAd(
+                activity.getResources().getConfiguration().orientation);
+        mVastIconConfig = mVastVideoConfig.getVastIconConfig();
 
         mClickThroughListener = new View.OnTouchListener() {
             @Override
             public boolean onTouch(View view, MotionEvent motionEvent) {
                 if (motionEvent.getAction() == MotionEvent.ACTION_UP && shouldAllowClickThrough()) {
-                    handleClick(
-                            mVastVideoConfiguration.getClickTrackers(),
-                            mVastVideoConfiguration.getClickThroughUrl()
-                    );
+                    mIsClosing = true;
+                    broadcastAction(ACTION_INTERSTITIAL_CLICK);
+                    mVastVideoConfig.handleClick(activity,
+                            mIsVideoFinishedPlaying ? mDuration : getCurrentPosition(),
+                            MOPUB_BROWSER_REQUEST_CODE);
                 }
                 return true;
             }
         };
 
-        createVideoBackground(context);
+        // Add widgets in the following order.
+        // Ordering matters because some placements are relative to other widgets.
 
-        mVideoView = createVideoView(context);
+        // Solid black background
+        getLayout().setBackgroundColor(Color.BLACK);
+
+        // Video view
+        mVideoView = createVideoView(activity, View.VISIBLE);
         mVideoView.requestFocus();
 
-        mVastVideoToolbar = createVastVideoToolBar(context);
-        getLayout().addView(mVastVideoToolbar);
+        // Companion ad view, set to invisible initially to have it be drawn to calculate size
+        mLandscapeCompanionAdView = createCompanionAdView(activity,
+                mVastVideoConfig.getVastCompanionAd(Configuration.ORIENTATION_LANDSCAPE),
+                View.INVISIBLE);
+        mPortraitCompanionAdView = createCompanionAdView(activity,
+                mVastVideoConfig.getVastCompanionAd(Configuration.ORIENTATION_PORTRAIT),
+                View.INVISIBLE);
+
+        // Top transparent gradient strip overlaying top of screen
+        addTopGradientStripWidget(activity);
 
-        mCompanionAdImageView = createCompanionAdImageView(context);
+        // Progress bar overlaying bottom of video view
+        addProgressBarWidget(activity, View.INVISIBLE);
+
+        // Bottom transparent gradient strip above progress bar
+        addBottomGradientStripWidget(activity);
+
+        // Radial countdown timer snapped to top-right corner of screen
+        addRadialCountdownWidget(activity, View.INVISIBLE);
+
+        // Icon view
+        mIconView = createIconView(activity, mVastIconConfig, View.INVISIBLE);
+
+        // Blurred last frame
+        addBlurredLastVideoFrameImageView(activity, View.INVISIBLE);
+
+        // CTA button
+        addCtaButtonWidget(activity);
+
+        // Close button snapped to top-right corner of screen
+        // Always add last to layout since it must be visible above all other views
+        addCloseButtonWidget(activity, View.GONE);
 
         Handler mainHandler = new Handler(Looper.getMainLooper());
-        mProgressCheckerRunnable = new VastVideoViewProgressRunnable(this, mainHandler);
+        mProgressCheckerRunnable = new VastVideoViewProgressRunnable(this, mVastVideoConfig,
+                mainHandler);
         mCountdownRunnable = new VastVideoViewCountdownRunnable(this, mainHandler);
     }
 
@@ -152,7 +199,7 @@ protected VideoView getVideoView() {
     protected void onCreate() {
         super.onCreate();
 
-        switch (mVastVideoConfiguration.getCustomForceOrientation()) {
+        switch (mVastVideoConfig.getCustomForceOrientation()) {
             case FORCE_PORTRAIT:
                 getBaseVideoViewControllerListener().onSetRequestedOrientation(SCREEN_ORIENTATION_PORTRAIT);
                 break;
@@ -167,27 +214,23 @@ protected void onCreate() {
                 break;
         }
 
-        downloadCompanionAd();
-
-        makeTrackingHttpRequest(
-                mVastVideoConfiguration.getImpressionTrackers(),
-                getContext(),
-                BaseEvent.Name.IMPRESSION_REQUEST
-        );
+        mVastVideoConfig.handleImpression(getContext(), getCurrentPosition());
         broadcastAction(ACTION_INTERSTITIAL_SHOW);
     }
 
     @Override
     protected void onResume() {
-        // When resuming, VideoView needs to reinitialize its MediaPlayer with the video path
-        // and therefore reset the count to zero, to let it retry on error
-        mVideoRetries = 0;
         startRunnables();
 
-        mVideoView.seekTo(mSeekerPositionOnPause);
+        if (mSeekerPositionOnPause > 0) {
+            mVideoView.seekTo(mSeekerPositionOnPause);
+        }
         if (!mIsVideoFinishedPlaying) {
             mVideoView.start();
         }
+        if (mSeekerPositionOnPause != SEEKER_POSITION_NOT_INITIALIZED) {
+            mVastVideoConfig.handleResume(getContext(), mSeekerPositionOnPause);
+        }
     }
 
     @Override
@@ -195,67 +238,54 @@ protected void onPause() {
         stopRunnables();
         mSeekerPositionOnPause = getCurrentPosition();
         mVideoView.pause();
+        if (!mIsVideoFinishedPlaying && !mIsClosing) {
+            mVastVideoConfig.handlePause(getContext(), mSeekerPositionOnPause);
+        }
     }
 
     @Override
     protected void onDestroy() {
         stopRunnables();
         broadcastAction(ACTION_INTERSTITIAL_DISMISS);
+
+        mVideoView.onDestroy();
     }
 
-    // Enable the device's back button when the video close button has been displayed
     @Override
-    public boolean backButtonEnabled() {
-        return mShowCloseButtonEventFired;
+    protected void onSaveInstanceState(@NonNull Bundle outState) {
+        outState.putInt(CURRENT_POSITION, mSeekerPositionOnPause);
+        outState.putSerializable(RESUMED_VAST_CONFIG, mVastVideoConfig);
     }
 
     @Override
-    void onActivityResult(final int requestCode, final int resultCode, final Intent data) {
-        if (requestCode == MOPUB_BROWSER_REQUEST_CODE && resultCode == Activity.RESULT_OK) {
-            getBaseVideoViewControllerListener().onFinish();
+    protected void onConfigurationChanged(@Nullable final Configuration newConfig) {
+        final int orientation = getContext().getResources().getConfiguration().orientation;
+        mVastCompanionAdConfig = mVastVideoConfig.getVastCompanionAd(orientation);
+        if (mLandscapeCompanionAdView.getVisibility() == View.VISIBLE ||
+                mPortraitCompanionAdView.getVisibility() == View.VISIBLE) {
+            if (orientation == Configuration.ORIENTATION_PORTRAIT) {
+                mLandscapeCompanionAdView.setVisibility(View.INVISIBLE);
+                mPortraitCompanionAdView.setVisibility(View.VISIBLE);
+            } else {
+                mPortraitCompanionAdView.setVisibility(View.INVISIBLE);
+                mLandscapeCompanionAdView.setVisibility(View.VISIBLE);
+            }
+            if (mVastCompanionAdConfig != null) {
+                mVastCompanionAdConfig.handleImpression(getContext(), mDuration);
+            }
         }
     }
 
-    // DownloadTaskListener
+    // Enable the device's back button when the video close button has been displayed
     @Override
-    public void onComplete(String url, DownloadResponse downloadResponse) {
-        if (downloadResponse != null && downloadResponse.getStatusCode() == HttpStatus.SC_OK) {
-            final Bitmap companionAdBitmap = HttpResponses.asBitmap(downloadResponse);
-            if (companionAdBitmap != null) {
-                // If Bitmap fits in ImageView, then don't use MATCH_PARENT
-                final int width = Dips.dipsToIntPixels(companionAdBitmap.getWidth(), getContext());
-                final int height = Dips.dipsToIntPixels(companionAdBitmap.getHeight(), getContext());
-                final int imageViewWidth = mCompanionAdImageView.getMeasuredWidth();
-                final int imageViewHeight = mCompanionAdImageView.getMeasuredHeight();
-                if (width < imageViewWidth && height < imageViewHeight) {
-                    mCompanionAdImageView.getLayoutParams().width = width;
-                    mCompanionAdImageView.getLayoutParams().height = height;
-                }
-                mCompanionAdImageView.setImageBitmap(companionAdBitmap);
-                mCompanionAdImageView.setOnClickListener(new View.OnClickListener() {
-                    @Override
-                    public void onClick(View view) {
-                        if (mVastCompanionAd != null) {
-                            handleClick(
-                                    mVastCompanionAd.getClickTrackers(),
-                                    mVastCompanionAd.getClickThroughUrl()
-                            );
-                        }
-                    }
-                });
-            }
-        }
+    public boolean backButtonEnabled() {
+        return mShowCloseButtonEventFired;
     }
 
-    private void downloadCompanionAd() {
-        if (mVastCompanionAd != null) {
-            try {
-                final HttpGet httpGet = initializeHttpGet(mVastCompanionAd.getImageUrl(), getContext());
-                final DownloadTask downloadTask = new DownloadTask(this);
-                AsyncTasks.safeExecuteOnExecutor(downloadTask, httpGet);
-            } catch (Exception e) {
-                MoPubLog.d("Failed to download companion ad", e);
-            }
+    @Override
+    void onActivityResult(final int requestCode, final int resultCode, final Intent data) {
+        if (requestCode == MOPUB_BROWSER_REQUEST_CODE && resultCode == Activity.RESULT_OK) {
+            getBaseVideoViewControllerListener().onFinish();
         }
     }
 
@@ -268,136 +298,36 @@ private void adjustSkipOffset() {
         }
 
         // Override if skipoffset attribute is specified in VAST
-        String skipOffsetString = mVastVideoConfiguration.getSkipOffset();
-        if (skipOffsetString != null) {
-            try {
-                if (Strings.isAbsoluteTracker(skipOffsetString)) {
-                    Integer skipOffsetMilliseconds = Strings.parseAbsoluteOffset(skipOffsetString);
-                    if (skipOffsetMilliseconds != null && skipOffsetMilliseconds < videoDuration) {
-                        mShowCloseButtonDelay = skipOffsetMilliseconds;
-                        mHasSkipOffset = true;
-                    }
-                } else if (Strings.isPercentageTracker(skipOffsetString)) {
-                    float percentage = Float.parseFloat(skipOffsetString.replace("%", "")) / 100f;
-                    int skipOffsetMillisecondsRounded = Math.round(videoDuration * percentage);
-                    if (skipOffsetMillisecondsRounded < videoDuration) {
-                        mShowCloseButtonDelay = skipOffsetMillisecondsRounded;
-                        mHasSkipOffset = true;
-                    }
-                } else {
-                    MoPubLog.d(String.format("Invalid VAST skipoffset format: %s", skipOffsetString));
-                }
-            } catch (NumberFormatException e) {
-                MoPubLog.d(String.format("Failed to parse skipoffset %s", skipOffsetString));
-            }
+        final Integer skipOffsetMillis = mVastVideoConfig.getSkipOffsetMillis(videoDuration);
+        if (skipOffsetMillis != null) {
+            mShowCloseButtonDelay = skipOffsetMillis;
+            mHasSkipOffset = true;
         }
     }
 
-    /**
-     * Returns untriggered VAST progress trackers with a progress before the provided position.
-     *
-     * @param currentPositionMillis the current video position in milliseconds.
-     * @param videoLengthMillis the total video length.
-     */
-    @NonNull
-    List<VastTracker> getUntriggeredTrackersBefore(int currentPositionMillis, int videoLengthMillis) {
-        if (Preconditions.NoThrow.checkArgument(videoLengthMillis > 0)) {
-            float progressFraction = currentPositionMillis / (float) (videoLengthMillis);
-            List<VastTracker> untriggeredTrackers = new ArrayList<VastTracker>();
-
-            final ArrayList<VastAbsoluteProgressTracker> absoluteTrackers = mVastVideoConfiguration.getAbsoluteTrackers();
-            VastAbsoluteProgressTracker absoluteTest = new VastAbsoluteProgressTracker("", currentPositionMillis);
-            int absoluteTrackerCount = absoluteTrackers.size();
-            for (int i = 0; i < absoluteTrackerCount; i++) {
-                VastAbsoluteProgressTracker tracker = absoluteTrackers.get(i);
-                if (tracker.compareTo(absoluteTest) > 0) {
-                    break;
-                }
-                if (!tracker.isTracked()) {
-                    untriggeredTrackers.add(tracker);
-                }
-            }
-
-            final ArrayList<VastFractionalProgressTracker> fractionalTrackers = mVastVideoConfiguration.getFractionalTrackers();
-            final VastFractionalProgressTracker fractionalTest = new VastFractionalProgressTracker("", progressFraction);
-            int fractionalTrackerCount = fractionalTrackers.size();
-            for (int i = 0; i < fractionalTrackerCount; i++) {
-                VastFractionalProgressTracker tracker = fractionalTrackers.get(i);
-                if (tracker.compareTo(fractionalTest) > 0) {
-                    break;
-                }
-                if (!tracker.isTracked()) {
-                    untriggeredTrackers.add(tracker);
-                }
-            }
-
-            return untriggeredTrackers;
-        } else {
-            return Collections.emptyList();
+    private VastVideoView createVideoView(@NonNull final Context context, int initialVisibility) {
+        if (mVastVideoConfig.getDiskMediaFileUrl() == null) {
+            throw new IllegalStateException("VastVideoConfig does not have a video disk path");
         }
-    }
+        final VastVideoView videoView = new VastVideoView(context);
 
-    private int remainingProgressTrackerCount() {
-        return getUntriggeredTrackersBefore(Integer.MAX_VALUE, Integer.MAX_VALUE).size();
-    }
+        videoView.setId((int) Utils.generateUniqueId());
 
-    private void createVideoBackground(final Context context) {
-        GradientDrawable gradientDrawable = new GradientDrawable(
-                GradientDrawable.Orientation.TOP_BOTTOM,
-                new int[]{Color.argb(0, 0, 0, 0), Color.argb(255, 0, 0, 0)}
-        );
-        Drawable[] layers = new Drawable[2];
-        layers[0] = Drawables.THATCHED_BACKGROUND.createDrawable(context);
-        layers[1] = gradientDrawable;
-        LayerDrawable layerList = new LayerDrawable(layers);
-        getLayout().setBackgroundDrawable(layerList);
-    }
-
-    private VastVideoToolbar createVastVideoToolBar(final Context context) {
-        final VastVideoToolbar vastVideoToolbar = new VastVideoToolbar(context);
-        vastVideoToolbar.setCloseButtonOnTouchListener(new View.OnTouchListener() {
-            @Override
-            public boolean onTouch(View view, MotionEvent motionEvent) {
-                if (motionEvent.getAction() == MotionEvent.ACTION_UP) {
-                    TrackingRequest.makeTrackingHttpRequest(
-                            mVastVideoConfiguration.getCloseTrackers(), context);
-                    TrackingRequest.makeTrackingHttpRequest(
-                            mVastVideoConfiguration.getSkipTrackers(), context);
-                    getBaseVideoViewControllerListener().onFinish();
-                }
-                return true;
-            }
-        });
-        vastVideoToolbar.setLearnMoreButtonOnTouchListener(mClickThroughListener);
-
-        // update custom CTA text if specified in VAST extension
-        String customCtaText = mVastVideoConfiguration.getCustomCtaText();
-        if (customCtaText != null) {
-            vastVideoToolbar.updateLearnMoreButtonText(customCtaText);
-        }
-
-        // update custom skip text if specified in VAST extensions
-        String customSkipText = mVastVideoConfiguration.getCustomSkipText();
-        if (customSkipText != null) {
-            vastVideoToolbar.updateCloseButtonText(customSkipText);
-        }
-
-        // update custom close icon if specified in VAST extensions
-        String customCloseIconUrl = mVastVideoConfiguration.getCustomCloseIconUrl();
-        if (customCloseIconUrl != null) {
-            vastVideoToolbar.updateCloseButtonIcon(customCloseIconUrl);
-        }
-
-        return vastVideoToolbar;
-    }
-
-    private VideoView createVideoView(final Context context) {
-        final VideoView videoView = new VideoView(context);
         videoView.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
             @Override
             public void onPrepared(MediaPlayer mp) {
                 // Called when media source is ready for playback
+                // The VideoView duration defaults to -1 when the video is not prepared or playing;
+                // Therefore set it here so that we have access to it at all times
+                mDuration = mVideoView.getDuration();
                 adjustSkipOffset();
+                if (mVastCompanionAdConfig == null) {
+                    videoView.prepareBlurredLastVideoFrame(mBlurredLastVideoFrameImageView,
+                            mVastVideoConfig.getDiskMediaFileUrl());
+                }
+                mProgressBarWidget.calibrateAndMakeVisible(getDuration(), mShowCloseButtonDelay);
+                mRadialCountdownWidget.calibrateAndMakeVisible(mShowCloseButtonDelay);
+                mIsCalibrationDone = true;
             }
         });
         videoView.setOnTouchListener(mClickThroughListener);
@@ -413,15 +343,31 @@ public void onCompletion(MediaPlayer mp) {
 
                 // Only fire the completion tracker if we hit all the progress marks. Some Android implementations
                 // fire the completion event even if the whole video isn't watched.
-                if (!mVideoError && remainingProgressTrackerCount() == 0 && !mCompletionTrackerFired) {
-                    makeTrackingHttpRequest(mVastVideoConfiguration.getCompleteTrackers(), context);
-                    mCompletionTrackerFired = true;
+                if (!mVideoError && mVastVideoConfig.getRemainingProgressTrackerCount() == 0) {
+                    mVastVideoConfig.handleComplete(getContext(), getCurrentPosition());
                 }
 
-                videoView.setVisibility(View.GONE);
-                // check the drawable to see if the image view was populated with content
-                if (mCompanionAdImageView.getDrawable() != null) {
-                    mCompanionAdImageView.setVisibility(View.VISIBLE);
+                videoView.setVisibility(View.INVISIBLE);
+
+                mProgressBarWidget.setVisibility(View.GONE);
+                mIconView.setVisibility(View.GONE);
+
+                mTopGradientStripWidget.notifyVideoComplete();
+                mBottomGradientStripWidget.notifyVideoComplete();
+                mCtaButtonWidget.notifyVideoComplete();
+
+                // Show companion ad if available
+                if (mVastCompanionAdConfig != null) {
+                    final int orientation = context.getResources().getConfiguration().orientation;
+                    if (orientation == Configuration.ORIENTATION_PORTRAIT) {
+                        mPortraitCompanionAdView.setVisibility(View.VISIBLE);
+                    } else {
+                        mLandscapeCompanionAdView.setVisibility(View.VISIBLE);
+                    }
+                    mVastCompanionAdConfig.handleImpression(context, mDuration);
+                } else if (mBlurredLastVideoFrameImageView.getDrawable() != null) {
+                    // If there is no companion ad, show blurred last video frame with dark overlay
+                    mBlurredLastVideoFrameImageView.setVisibility(View.VISIBLE);
                 }
             }
         });
@@ -429,123 +375,257 @@ public void onCompletion(MediaPlayer mp) {
         videoView.setOnErrorListener(new MediaPlayer.OnErrorListener() {
             @Override
             public boolean onError(final MediaPlayer mediaPlayer, final int what, final int extra) {
-                if (retryMediaPlayer(mediaPlayer, what, extra)) {
+                if (videoView.retryMediaPlayer(mediaPlayer, what, extra,
+                        mVastVideoConfig.getDiskMediaFileUrl())) {
                     return true;
                 } else {
                     stopRunnables();
                     makeVideoInteractable();
                     videoError(false);
                     mVideoError = true;
+
+                    mVastVideoConfig.handleError(getContext(),
+                            VastErrorCode.GENERAL_LINEAR_AD_ERROR, getCurrentPosition());
+
                     return false;
                 }
             }
         });
 
-        videoView.setVideoPath(mVastVideoConfiguration.getDiskMediaFileUrl());
+        videoView.setVideoPath(mVastVideoConfig.getDiskMediaFileUrl());
+        videoView.setVisibility(initialVisibility);
 
         return videoView;
     }
 
-    boolean retryMediaPlayer(final MediaPlayer mediaPlayer, final int what, final int extra) {
-        // XXX
-        // VideoView has a bug in versions lower than Jelly Bean, Api Level 16, Android 4.1
-        // For api < 16, VideoView is not able to read files written to disk since it reads them in
-        // a Context different from the Application and therefore does not have correct permission.
-        // To solve this problem we obtain the video file descriptor ourselves with valid permissions
-        // and pass it to the underlying MediaPlayer in VideoView.
-        if (VersionCode.currentApiLevel().isBelow(VersionCode.JELLY_BEAN)
-                && what == MediaPlayer.MEDIA_ERROR_UNKNOWN
-                && extra == VIDEO_VIEW_FILE_PERMISSION_ERROR
-                && mVideoRetries < MAX_VIDEO_RETRIES) {
-
-            FileInputStream inputStream = null;
-            try {
-                mediaPlayer.reset();
-                final File file = new File(mVastVideoConfiguration.getDiskMediaFileUrl());
-                inputStream = new FileInputStream(file);
-                mediaPlayer.setDataSource(inputStream.getFD());
-
-                // XXX
-                // VideoView has a callback registered with the MediaPlayer to set a flag when the
-                // media file has been prepared. Start also sets a flag in VideoView indicating the
-                // desired state is to play the video. Therefore, whichever method finishes last
-                // will check both flags and begin playing the video.
-                mediaPlayer.prepareAsync();
-                mVideoView.start();
+    private void addTopGradientStripWidget(@NonNull final Context context) {
+        boolean hasCompanionAd = (mVastCompanionAdConfig != null);
+
+        mTopGradientStripWidget = new VastVideoGradientStripWidget(context,
+                GradientDrawable.Orientation.TOP_BOTTOM,
+                mVastVideoConfig.getCustomForceOrientation(),
+                hasCompanionAd,
+                View.VISIBLE,
+                RelativeLayout.ALIGN_TOP,
+                getLayout().getId());
+        getLayout().addView(mTopGradientStripWidget);
+    }
+
+    private void addBottomGradientStripWidget(@NonNull final Context context) {
+        boolean hasCompanionAd = (mVastCompanionAdConfig != null);
+
+        mBottomGradientStripWidget = new VastVideoGradientStripWidget(context,
+                GradientDrawable.Orientation.BOTTOM_TOP,
+                mVastVideoConfig.getCustomForceOrientation(),
+                hasCompanionAd,
+                View.GONE,
+                RelativeLayout.ABOVE,
+                mProgressBarWidget.getId());
+        getLayout().addView(mBottomGradientStripWidget);
+    }
+
+    private void addProgressBarWidget(@NonNull final Context context, int initialVisibility) {
+        mProgressBarWidget = new VastVideoProgressBarWidget(context, mVideoView.getId());
+        mProgressBarWidget.setVisibility(initialVisibility);
+        getLayout().addView(mProgressBarWidget);
+    }
+
+    private void addRadialCountdownWidget(@NonNull final Context context, int initialVisibility) {
+        mRadialCountdownWidget = new VastVideoRadialCountdownWidget(context);
+        mRadialCountdownWidget.setVisibility(initialVisibility);
+        getLayout().addView(mRadialCountdownWidget);
+    }
+
+    private void addCtaButtonWidget(@NonNull final Context context) {
+        boolean hasCompanionAd = (mVastCompanionAdConfig != null);
+        boolean hasClickthroughUrl = !TextUtils.isEmpty(
+                mVastVideoConfig.getClickThroughUrl());
+
+        mCtaButtonWidget = new VastVideoCtaButtonWidget(context, mVideoView.getId(), hasCompanionAd,
+                hasClickthroughUrl);
+
+        getLayout().addView(mCtaButtonWidget);
+
+        mCtaButtonWidget.setOnTouchListener(mClickThroughListener);
+
+        // Update custom CTA text if specified in VAST extension
+        String customCtaText = mVastVideoConfig.getCustomCtaText();
+        if (customCtaText != null) {
+            mCtaButtonWidget.updateCtaText(customCtaText);
+        }
+    }
+
+    private void addCloseButtonWidget(@NonNull final Context context, int initialVisibility) {
+        mCloseButtonWidget = new VastVideoCloseButtonWidget(context);
+        mCloseButtonWidget.setVisibility(initialVisibility);
+
+        getLayout().addView(mCloseButtonWidget);
+
+        final View.OnTouchListener closeOnTouchListener = new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View view, MotionEvent motionEvent) {
+                final int currentPosition;
+                if (mIsVideoFinishedPlaying) {
+                    currentPosition = mDuration;
+                } else {
+                    currentPosition = getCurrentPosition();
+                }
+                if (motionEvent.getAction() == MotionEvent.ACTION_UP) {
+                    mIsClosing = true;
+                    mVastVideoConfig.handleClose(getContext(), currentPosition);
+                    getBaseVideoViewControllerListener().onFinish();
+                }
                 return true;
-            } catch (Exception e) {
-                return false;
-            } finally {
-                Streams.closeStream(inputStream);
-                mVideoRetries++;
             }
+        };
+
+        mCloseButtonWidget.setOnTouchListenerToContent(closeOnTouchListener);
+
+        // Update custom skip text if specified in VAST extensions
+        final String customSkipText = mVastVideoConfig.getCustomSkipText();
+        if (customSkipText != null) {
+            mCloseButtonWidget.updateCloseButtonText(customSkipText);
+        }
+
+        // Update custom close icon if specified in VAST extensions
+        final String customCloseIconUrl = mVastVideoConfig.getCustomCloseIconUrl();
+        if (customCloseIconUrl != null) {
+            mCloseButtonWidget.updateCloseButtonIcon(customCloseIconUrl);
         }
-        return false;
     }
 
-    /**
-     * Called upon user click. Attempts open mopubnativebrowser links in the device browser and all
-     * other links in the MoPub in-app browser.
-     */
-    @VisibleForTesting
-    void handleClick(final List<String> clickThroughTrackers, final String clickThroughUrl) {
-        makeTrackingHttpRequest(clickThroughTrackers, getContext(), BaseEvent.Name.CLICK_REQUEST);
+    private void addBlurredLastVideoFrameImageView(@NonNull final Context context,
+            int initialVisibility) {
 
-        if (TextUtils.isEmpty(clickThroughUrl)) {
-            return;
-        }
+        mBlurredLastVideoFrameImageView = new ImageView(context);
+        mBlurredLastVideoFrameImageView.setVisibility(initialVisibility);
 
-        broadcastAction(ACTION_INTERSTITIAL_CLICK);
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(
-                        UrlAction.IGNORE_ABOUT_SCHEME,
-                        UrlAction.OPEN_NATIVE_BROWSER,
-                        UrlAction.OPEN_IN_APP_BROWSER,
-                        UrlAction.HANDLE_SHARE_TWEET)
-                .withResultActions(new UrlHandler.ResultActions() {
-                    @Override
-                    public void urlHandlingSucceeded(@NonNull String url,
-                            @NonNull UrlAction urlAction) {
-                        if (urlAction == UrlAction.OPEN_IN_APP_BROWSER) {
-                            Bundle bundle = new Bundle();
-                            bundle.putString(MoPubBrowser.DESTINATION_URL_KEY, clickThroughUrl);
-
-                            getBaseVideoViewControllerListener().onStartActivityForResult(
-                                    MoPubBrowser.class, MOPUB_BROWSER_REQUEST_CODE, bundle);
-                        }
-                    }
+        final RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(
+                RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.MATCH_PARENT);
 
-                    @Override
-                    public void urlHandlingFailed(@NonNull String url,
-                            @NonNull UrlAction lastFailedUrlAction) {
-                    }
-                })
-                .withoutMoPubBrowser()
-                .build().handleUrl(getContext(), clickThroughUrl);
+        getLayout().addView(mBlurredLastVideoFrameImageView, layoutParams);
     }
 
-    private ImageView createCompanionAdImageView(final Context context) {
+    /**
+     * Creates and lays out the webview used to display the companion ad.
+     *
+     * @param context         The context.
+     * @param vastCompanionAdConfig The data used to populate the view.
+     * @return the populated webview
+     */
+    @NonNull
+    @VisibleForTesting
+    View createCompanionAdView(@NonNull final Context context,
+            @Nullable final VastCompanionAdConfig vastCompanionAdConfig,
+            int initialVisibility) {
+        Preconditions.checkNotNull(context);
+
+        if (vastCompanionAdConfig == null) {
+            final View emptyView = new View(context);
+            emptyView.setVisibility(View.INVISIBLE);
+            return emptyView;
+        }
+
         RelativeLayout relativeLayout = new RelativeLayout(context);
         relativeLayout.setGravity(Gravity.CENTER);
         RelativeLayout.LayoutParams layoutParams =
                 new RelativeLayout.LayoutParams(
                         RelativeLayout.LayoutParams.MATCH_PARENT,
                         RelativeLayout.LayoutParams.MATCH_PARENT);
-        layoutParams.addRule(RelativeLayout.BELOW, mVastVideoToolbar.getId());
         getLayout().addView(relativeLayout, layoutParams);
 
-        ImageView imageView = new ImageView(context);
-        // Set to invisible to have it be drawn to calculate size
-        imageView.setVisibility(View.INVISIBLE);
+        VastWebView companionView = VastWebView.createView(context,
+                vastCompanionAdConfig.getVastResource());
+
+        // For javascript, HTML, and IFrames, ignore the traditional clickthrough url and open all
+        // new urls in the MoPub Browser. For static images, use the clickthrough url specified in
+        // the VAST document. These two handleClicks make it so that the correct behavior happens
+        // in these special cases. onVastWebViewClick is called in both circumstances to fire the
+        // click trackers.
+        companionView.setVastWebViewClickListener(new VastWebView.VastWebViewClickListener() {
+            @Override
+            public void onVastWebViewClick() {
+                broadcastAction(ACTION_INTERSTITIAL_CLICK);
+                makeVastTrackingHttpRequest(
+                        vastCompanionAdConfig.getClickTrackers(),
+                        null,
+                        mDuration,
+                        null,
+                        context
+                );
+                vastCompanionAdConfig.handleClick(context, MOPUB_BROWSER_REQUEST_CODE, null);
+            }
+        });
+        companionView.setWebViewClient(new WebViewClient() {
+            @Override
+            public boolean shouldOverrideUrlLoading(WebView view, String url) {
+                vastCompanionAdConfig.handleClick(context, MOPUB_BROWSER_REQUEST_CODE, url);
+                return true;
+            }
+        });
+
+        companionView.setVisibility(initialVisibility);
 
         final RelativeLayout.LayoutParams companionAdLayout = new RelativeLayout.LayoutParams(
-                RelativeLayout.LayoutParams.MATCH_PARENT,
-                RelativeLayout.LayoutParams.MATCH_PARENT
+                Dips.dipsToIntPixels(vastCompanionAdConfig.getWidth() + WEBVIEW_PADDING, context),
+                Dips.dipsToIntPixels(vastCompanionAdConfig.getHeight() + WEBVIEW_PADDING, context)
         );
+        companionAdLayout.addRule(RelativeLayout.CENTER_IN_PARENT, RelativeLayout.TRUE);
+
+        relativeLayout.addView(companionView, companionAdLayout);
+        return companionView;
+    }
+
+    /**
+     * Creates and lays out the webview used to display the icon.
+     *
+     * @param context the context.
+     * @param vastIconConfig the data used to populate the view.
+     * @return the populated webview.
+     */
+    @NonNull
+    @VisibleForTesting
+    View createIconView(@NonNull final Context context, @Nullable final VastIconConfig vastIconConfig, int initialVisibility) {
+        Preconditions.checkNotNull(context);
+
+        if (vastIconConfig == null) {
+            return new View(context);
+        }
+
+        VastWebView iconView = VastWebView.createView(context, vastIconConfig.getVastResource());
+        iconView.setVastWebViewClickListener(new VastWebView.VastWebViewClickListener() {
+            @Override
+            public void onVastWebViewClick() {
+                makeVastTrackingHttpRequest(
+                        vastIconConfig.getClickTrackingUris(),
+                        null,
+                        getCurrentPosition(),
+                        getNetworkMediaFileUrl(),
+                        context
+                );
+                vastIconConfig.handleClick(getContext(), null);
+            }
+        });
+        iconView.setWebViewClient(new WebViewClient() {
+            @Override
+            public boolean shouldOverrideUrlLoading(WebView view, String url) {
+                vastIconConfig.handleClick(getContext(), url);
+                return true;
+            }
+        });
+        iconView.setVisibility(initialVisibility);
+
+        // Add extra room for the WebView to account for the natural padding in Android WebViews.
+        RelativeLayout.LayoutParams layoutParams =
+                new RelativeLayout.LayoutParams(
+                        Dips.asIntPixels(vastIconConfig.getWidth() + WEBVIEW_PADDING, context),
+                        Dips.asIntPixels(vastIconConfig.getHeight() + WEBVIEW_PADDING, context));
+        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
+        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_TOP);
+
+        getLayout().addView(iconView, layoutParams);
 
-        relativeLayout.addView(imageView, companionAdLayout);
-        return imageView;
+        return iconView;
     }
 
     int getDuration() {
@@ -556,33 +636,58 @@ int getCurrentPosition() {
         return mVideoView.getCurrentPosition();
     }
 
-    boolean isLongVideo(final int duration) {
-        return (duration >= MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON);
-    }
-
     void makeVideoInteractable() {
         mShowCloseButtonEventFired = true;
-        mVastVideoToolbar.makeInteractable();
+
+        mRadialCountdownWidget.setVisibility(View.GONE);
+        mCloseButtonWidget.setVisibility(View.VISIBLE);
+
+        mCtaButtonWidget.notifyVideoSkippable();
     }
 
     boolean shouldBeInteractable() {
         return !mShowCloseButtonEventFired && getCurrentPosition() >= mShowCloseButtonDelay;
     }
 
-    boolean shouldShowCountdown() {
-        // show countdown if any of the following conditions is satisfied:
-        // 1) long video
-        // 2) skipoffset is specified in VAST and is less than video duration
-        final int duration = getDuration();
-        return isLongVideo(duration) || (mHasSkipOffset && mShowCloseButtonDelay < duration);
+    void updateCountdown() {
+        if (mIsCalibrationDone) {
+            mRadialCountdownWidget.updateCountdownProgress(mShowCloseButtonDelay, getCurrentPosition());
+        }
     }
 
-    void updateCountdown() {
-        mVastVideoToolbar.updateCountdownWidget(mShowCloseButtonDelay - getCurrentPosition());
+    void updateProgressBar() {
+        mProgressBarWidget.updateProgress(getCurrentPosition());
     }
 
-    void updateDuration() {
-        mVastVideoToolbar.updateDurationWidget(getDuration() - getCurrentPosition());
+    String getNetworkMediaFileUrl() {
+        if (mVastVideoConfig == null) {
+            return null;
+        }
+        return mVastVideoConfig.getNetworkMediaFileUrl();
+    }
+
+    /**
+     * Displays and impresses the icon if the current position of the video is greater than the
+     * offset of the icon. Once the current position is greater than the offset plus duration, the
+     * icon is then hidden again.
+     *
+     * @param currentPosition the current position of the video in milliseconds.
+     */
+    void handleIconDisplay(int currentPosition) {
+        if (mVastIconConfig == null || currentPosition < mVastIconConfig.getOffsetMS()) {
+            return;
+        }
+
+        mIconView.setVisibility(View.VISIBLE);
+        mVastIconConfig.handleImpression(getContext(), currentPosition, getNetworkMediaFileUrl());
+
+        if (mVastIconConfig.getDurationMS() == null) {
+            return;
+        }
+
+        if (currentPosition >= mVastIconConfig.getOffsetMS() + mVastIconConfig.getDurationMS()) {
+            mIconView.setVisibility(View.GONE);
+        }
     }
 
     private boolean shouldAllowClickThrough() {
@@ -612,13 +717,6 @@ VastVideoViewCountdownRunnable getCountdownRunnable() {
         return mCountdownRunnable;
     }
 
-    // for testing
-    @Deprecated
-    @VisibleForTesting
-    int getVideoRetries() {
-        return mVideoRetries;
-    }
-
     // for testing
     @Deprecated
     @VisibleForTesting
@@ -657,15 +755,22 @@ boolean isVideoFinishedPlaying() {
     // for testing
     @Deprecated
     @VisibleForTesting
-    ImageView getCompanionAdImageView() {
-        return mCompanionAdImageView;
+    boolean isCalibrationDone() {
+        return mIsCalibrationDone;
     }
 
     // for testing
     @Deprecated
     @VisibleForTesting
-    void setVideoError() {
-        mVideoError = true;
+    View getLandscapeCompanionAdView() {
+        return mLandscapeCompanionAdView;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    View getPortraitCompanionAdView() {
+        return mPortraitCompanionAdView;
     }
 
     // for testing
@@ -674,4 +779,94 @@ void setVideoError() {
     boolean getVideoError() {
         return mVideoError;
     }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    void setVideoError() {
+        mVideoError = true;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    View getIconView() {
+        return mIconView;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    VastVideoGradientStripWidget getTopGradientStripWidget() {
+        return mTopGradientStripWidget;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    VastVideoGradientStripWidget getBottomGradientStripWidget() {
+        return mBottomGradientStripWidget;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    VastVideoProgressBarWidget getProgressBarWidget() {
+        return mProgressBarWidget;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    void setProgressBarWidget(@NonNull VastVideoProgressBarWidget progressBarWidget) {
+        mProgressBarWidget = progressBarWidget;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    VastVideoRadialCountdownWidget getRadialCountdownWidget() {
+        return mRadialCountdownWidget;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    void setRadialCountdownWidget(@NonNull VastVideoRadialCountdownWidget radialCountdownWidget) {
+        mRadialCountdownWidget = radialCountdownWidget;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    VastVideoCtaButtonWidget getCtaButtonWidget() {
+        return mCtaButtonWidget;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    VastVideoCloseButtonWidget getCloseButtonWidget() {
+        return mCloseButtonWidget;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    ImageView getBlurredLastVideoFrameImageView() {
+        return mBlurredLastVideoFrameImageView;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    VastVideoView getVastVideoView() {
+        return mVideoView;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    void setIsClosing(boolean isClosing) {
+        mIsClosing = isClosing;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
index 14323626..c3602e9f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
@@ -25,15 +25,10 @@ public VastVideoViewCountdownRunnable(@NonNull VastVideoViewController videoView
 
     @Override
     public void doWork() {
-        // Countdown and interactable are mutually exclusive. Should we refactor to collapse them?
-        if (mVideoViewController.shouldShowCountdown()) {
-            mVideoViewController.updateCountdown();
-        }
+        mVideoViewController.updateCountdown();
 
         if (mVideoViewController.shouldBeInteractable()) {
             mVideoViewController.makeVideoInteractable();
         }
-
-        mVideoViewController.updateDuration();
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
index 1936ada0..d7abf6c3 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
@@ -16,12 +16,17 @@
 public class VastVideoViewProgressRunnable extends RepeatingHandlerRunnable {
 
     @NonNull private final VastVideoViewController mVideoViewController;
+    @NonNull private final VastVideoConfig mVastVideoConfig;
+
     public VastVideoViewProgressRunnable(@NonNull VastVideoViewController videoViewController,
+            @NonNull final VastVideoConfig vastVideoConfig,
             @NonNull Handler handler) {
         super(handler);
 
         Preconditions.checkNotNull(videoViewController);
+        Preconditions.checkNotNull(vastVideoConfig);
         mVideoViewController = videoViewController;
+        mVastVideoConfig = vastVideoConfig;
     }
 
     @Override
@@ -29,18 +34,26 @@ public void doWork() {
         int videoLength = mVideoViewController.getDuration();
         int currentPosition = mVideoViewController.getCurrentPosition();
 
+        mVideoViewController.updateProgressBar();
+
         if (videoLength > 0) {
             final List<VastTracker> trackersToTrack =
-                    mVideoViewController.getUntriggeredTrackersBefore(currentPosition, videoLength);
+                    mVastVideoConfig.getUntriggeredTrackersBefore(currentPosition, videoLength);
             if (!trackersToTrack.isEmpty()) {
                 final List<String> trackUrls = new ArrayList<String>();
                 for (VastTracker tracker : trackersToTrack) {
                     trackUrls.add(tracker.getTrackingUrl());
                     tracker.setTracked();
                 }
-                TrackingRequest.makeTrackingHttpRequest(trackUrls, mVideoViewController.getContext());
+                TrackingRequest.makeTrackingHttpRequest(
+                        new VastMacroHelper(trackUrls)
+                                .withAssetUri(mVideoViewController.getNetworkMediaFileUrl())
+                                .withContentPlayHead(currentPosition)
+                                .getUris(),
+                        mVideoViewController.getContext());
             }
 
+            mVideoViewController.handleIconDisplay(currentPosition);
         }
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastWebView.java
new file mode 100644
index 00000000..5889cd0b
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastWebView.java
@@ -0,0 +1,112 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.graphics.Color;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.MotionEvent;
+import android.view.View;
+
+import com.mopub.common.Constants;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.util.Utils;
+import com.mopub.common.util.VersionCode;
+
+import static com.mopub.common.util.VersionCode.currentApiLevel;
+
+/**
+ * A WebView customized for Vast video needs.
+ */
+class VastWebView extends BaseWebView {
+    interface VastWebViewClickListener {
+        void onVastWebViewClick();
+    }
+
+    @Nullable VastWebViewClickListener mVastWebViewClickListener;
+
+    VastWebView(Context context) {
+        super(context);
+
+        disableScrollingAndZoom();
+        getSettings().setJavaScriptEnabled(true);
+
+        if (currentApiLevel().isAtLeast(VersionCode.ICE_CREAM_SANDWICH)) {
+            enablePlugins(true);
+        }
+
+        setBackgroundColor(Color.TRANSPARENT);
+        setOnTouchListener(new VastWebViewOnTouchListener());
+        setId((int) Utils.generateUniqueId());
+    }
+
+    void loadData(String data) {
+        loadDataWithBaseURL("http://" + Constants.HOST + "/",
+                data, "text/html", "utf-8", null);
+    }
+
+    void setVastWebViewClickListener(@NonNull VastWebViewClickListener vastWebViewClickListener) {
+        mVastWebViewClickListener = vastWebViewClickListener;
+    }
+
+    private void disableScrollingAndZoom() {
+        setHorizontalScrollBarEnabled(false);
+        setHorizontalScrollbarOverlay(false);
+        setVerticalScrollBarEnabled(false);
+        setVerticalScrollbarOverlay(false);
+        getSettings().setSupportZoom(false);
+        setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);
+    }
+
+    /**
+     * Creates and populates a webview.
+     *
+     * @param context      the context.
+     * @param vastResource A resource describing the contents of the webview
+     * @return a fully populated webview
+     */
+    @NonNull
+    static VastWebView createView(@NonNull final Context context,
+            @NonNull final VastResource vastResource) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(vastResource);
+
+        VastWebView webView = new VastWebView(context);
+        vastResource.initializeWebView(webView);
+
+        return webView;
+    }
+
+    /**
+     * Custom on touch listener to easily detect clicks on the entire WebView.
+     */
+    class VastWebViewOnTouchListener implements View.OnTouchListener {
+        private boolean mClickStarted;
+
+        @Override
+        public boolean onTouch(View v, MotionEvent event) {
+            switch (event.getAction()) {
+                case MotionEvent.ACTION_DOWN:
+                    mClickStarted = true;
+                    break;
+                case MotionEvent.ACTION_UP:
+                    if (!mClickStarted) {
+                        return false;
+                    }
+                    mClickStarted = false;
+                    if (mVastWebViewClickListener != null) {
+                        mVastWebViewClickListener.onVastWebViewClick();
+                    }
+            }
+
+            return false;
+        }
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    @NonNull
+    VastWebViewClickListener getVastWebViewClickListener() {
+        return mVastWebViewClickListener;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
new file mode 100644
index 00000000..0bf3c15a
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
@@ -0,0 +1,39 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * This XML manager handles Wrapper nodes. Wrappers redirect to other VAST documents (which may
+ * in turn redirect to more wrappers). Wrappers can also contain impression trackers,
+ * trackers for a video ad, and companion ads.
+ */
+class VastWrapperXmlManager extends VastBaseInLineWrapperXmlManager {
+
+    // Element names
+    private static final String VAST_AD_TAG = "VASTAdTagURI";
+
+    VastWrapperXmlManager(@NonNull final Node wrapperNode) {
+        super(wrapperNode);
+        Preconditions.checkNotNull(wrapperNode);
+    }
+
+    /**
+     * Gets the redirect URI to the next VAST xml document. If no redirect URL, return null.
+     *
+     * @return The redirect URI or {@code null} if there isn't one.
+     */
+    @Nullable
+    String getVastAdTagURI() {
+        Node vastAdTagURINode = XmlUtils.getFirstMatchingChildNode(mNode, VAST_AD_TAG);
+        return XmlUtils.getNodeValue(vastAdTagURINode);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManager.java
new file mode 100644
index 00000000..e13d7c60
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManager.java
@@ -0,0 +1,184 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.util.DeviceUtils.ForceOrientation;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.NodeList;
+import org.xml.sax.InputSource;
+import org.xml.sax.SAXException;
+
+import java.io.IOException;
+import java.io.StringReader;
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+
+/**
+ * Parses the VAST XML to spec. See www.iab.net for details.
+ * Currently using the VAST 3.0 spec found here: http://www.iab.net/media/file/VASTv3.0.pdf.
+ */
+class VastXmlManager {
+    private static final String ROOT_TAG = "MPMoVideoXMLDocRoot";
+    private static final String ROOT_TAG_OPEN = "<" + ROOT_TAG + ">";
+    private static final String ROOT_TAG_CLOSE = "</" + ROOT_TAG + ">";
+
+    // Element names
+    private static final String AD = "Ad";
+    private static final String ERROR = "Error";
+
+    // Custom element names for VAST 3.0 extensions
+    private static final String MP_IMPRESSION_TRACKER = "MP_TRACKING_URL";
+    private static final String CUSTOM_CTA_TEXT = "MoPubCtaText";
+    private static final String CUSTOM_SKIP_TEXT = "MoPubSkipText";
+    private static final String CUSTOM_CLOSE_ICON = "MoPubCloseIcon";
+    private static final String CUSTOM_FORCE_ORIENTATION = "MoPubForceOrientation";
+
+    // Constants for custom extensions
+    private static final int MAX_CTA_TEXT_LENGTH = 15;
+    private static final int MAX_SKIP_TEXT_LENGTH = 8;
+
+    @Nullable private Document mVastDoc;
+
+    /**
+     * Helper function that builds a document and tries to parse the XML.
+     *
+     * @param xmlString The XML to parse
+     * @throws ParserConfigurationException If the parser is poorly configured
+     * @throws IOException                  If we can't read the document for any reason
+     * @throws SAXException                 If the XML is poorly formatted
+     */
+    void parseVastXml(@NonNull String xmlString) throws ParserConfigurationException,
+            IOException, SAXException {
+        Preconditions.checkNotNull(xmlString, "xmlString cannot be null");
+
+        // if the xml string starts with <?xml?>, this tag can break parsing if it isn't formatted exactly right
+        // or if it's not the first line of the document...we're just going to strip it
+        xmlString = xmlString.replaceFirst("<\\?.*\\?>", "");
+
+        // adserver may embed additional impression trackers as a sibling node of <VAST>
+        // wrap entire document in root node for this case.
+        String documentString = ROOT_TAG_OPEN + xmlString + ROOT_TAG_CLOSE;
+
+        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
+        documentBuilderFactory.setCoalescing(true);
+        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
+        mVastDoc = documentBuilder.parse(new InputSource(new StringReader(documentString)));
+    }
+
+    /**
+     * If there is an Ad element, return its XML manager. This is the starting point for VAST
+     * XML documents, and VAST has this as the expected first child. There may be more than one Ad
+     * node in a VAST document. This returns a list of all Ad nodes or an empty list if no Ad nodes
+     * were found.
+     *
+     * @return A List of {@link VastAdXmlManager} or an
+     * empty list if there is no Ad child node.
+     */
+
+    @NonNull
+    List<VastAdXmlManager> getAdXmlManagers() {
+        List<VastAdXmlManager> vastAdXmlManagers = new ArrayList<VastAdXmlManager>();
+        if (mVastDoc == null) {
+            return vastAdXmlManagers;
+        }
+        NodeList nodes = mVastDoc.getElementsByTagName(AD);
+        for (int i = 0; i < nodes.getLength(); ++i) {
+            vastAdXmlManagers.add(new VastAdXmlManager(nodes.item(i)));
+        }
+        return vastAdXmlManagers;
+    }
+
+    /**
+     * Vast documents can have just an error element. This usually is used to indicate that no ad is
+     * available. This gets the url of the error tracker.
+     *
+     * @return The URL of the error tracker or null if it does not exist.
+     */
+    @Nullable
+    VastTracker getErrorTracker() {
+        if (mVastDoc == null) {
+            return null;
+        }
+        String errorTracker = XmlUtils.getFirstMatchingStringData(mVastDoc, ERROR);
+        if (TextUtils.isEmpty(errorTracker)) {
+            return null;
+        }
+        return new VastTracker(errorTracker);
+    }
+
+    /**
+     * Gets a list of MoPub specific impression trackers.
+     *
+     * @return List of URL impression trackers or an empty list if none present.
+     */
+    @NonNull
+    List<VastTracker> getMoPubImpressionTrackers() {
+        List<String> trackers = XmlUtils.getStringDataAsList(mVastDoc, MP_IMPRESSION_TRACKER);
+        List<VastTracker> vastTrackers = new ArrayList<VastTracker>(trackers.size());
+        for (String tracker : trackers) {
+            vastTrackers.add(new VastTracker(tracker));
+        }
+        return vastTrackers;
+    }
+
+    /**
+     * Gets the custom call to action text or {@code null} if not specified or too long.
+     *
+     * @return String cta or {@code null}
+     */
+    @Nullable
+    String getCustomCtaText() {
+        String customCtaText = XmlUtils.getFirstMatchingStringData(mVastDoc, CUSTOM_CTA_TEXT);
+        if (customCtaText != null && customCtaText.length() <= MAX_CTA_TEXT_LENGTH) {
+            return customCtaText;
+        }
+
+        return null;
+    }
+
+    /**
+     * Gets the custom text of the skip button or {@code null} if not specified or too long.
+     *
+     * @return String skip text or {@code null}
+     */
+    @Nullable
+    String getCustomSkipText() {
+        String customSkipText = XmlUtils.getFirstMatchingStringData(mVastDoc, CUSTOM_SKIP_TEXT);
+        if (customSkipText != null && customSkipText.length() <= MAX_SKIP_TEXT_LENGTH) {
+            return customSkipText;
+        }
+
+        return null;
+    }
+
+    /**
+     * Gets the custom icon URL or {@code null} if none specified.
+     *
+     * @return String URL of the custom icon or {@code null}
+     */
+    @Nullable
+    String getCustomCloseIconUrl() {
+        return XmlUtils.getFirstMatchingStringData(mVastDoc, CUSTOM_CLOSE_ICON);
+    }
+
+    /**
+     * Gets the orientation that this ad should be forced in. This returns UNDEFINED if not
+     * specified.
+     *
+     * @return {@code ForceOrientation} orientation or {@code UNDEFINED}
+     */
+    @NonNull
+    ForceOrientation getCustomForceOrientation() {
+        return ForceOrientation.getForceOrientation(
+                XmlUtils.getFirstMatchingStringData(mVastDoc, CUSTOM_FORCE_ORIENTATION));
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
new file mode 100644
index 00000000..09c5d7b7
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
@@ -0,0 +1,712 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.content.res.Configuration;
+import android.graphics.Point;
+import android.net.http.AndroidHttpClient;
+import android.os.AsyncTask;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.view.Display;
+import android.view.WindowManager;
+
+import com.mopub.common.HttpClient;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Strings;
+import com.mopub.network.Networking;
+
+import org.apache.http.HttpEntity;
+import org.apache.http.HttpResponse;
+import org.apache.http.client.methods.HttpGet;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+
+import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
+
+
+/**
+ * AsyncTask that reads in VAST xml and resolves redirects. This returns a
+ * fully formed {@link VastVideoConfig} so that the video can be
+ * displayed with the settings and trackers set in the configuration.
+ */
+public class VastXmlManagerAggregator extends AsyncTask<String, Void, VastVideoConfig> {
+
+    /**
+     * Listener for when the xml parsing is done.
+     */
+    interface VastXmlManagerAggregatorListener {
+        /**
+         * When all the wrappers have resolved and aggregation is done, this passes in
+         * a video configuration or null if one is not found.
+         * @param vastVideoConfig The video configuration found or null if
+         *                               no video was found.
+         */
+        void onAggregationComplete(final @Nullable VastVideoConfig vastVideoConfig);
+    }
+
+    /**
+     * Flag for companion ad orientation during xml parsing.
+     */
+    enum CompanionOrientation {
+        LANDSCAPE,
+        PORTRAIT
+    }
+
+    // More than reasonable number of nested VAST urls to follow
+    static final int MAX_TIMES_TO_FOLLOW_VAST_REDIRECT = 10;
+    private static final double ASPECT_RATIO_WEIGHT = 70;
+    private static final double AREA_WEIGHT = 30;
+    private static final List<String> VIDEO_MIME_TYPES =
+            Arrays.asList("video/mp4", "video/3gpp");
+    private static final int MINIMUM_COMPANION_AD_WIDTH = 300;
+    private static final int MINIMUM_COMPANION_AD_HEIGHT = 250;
+
+    @NonNull private final WeakReference<VastXmlManagerAggregatorListener> mVastXmlManagerAggregatorListener;
+    private final double mScreenAspectRatio;
+    private final int mScreenAreaDp;
+    @NonNull private final Context mContext;
+
+    /**
+     * Number of times this has followed a redirect. This value is only
+     * accessed and set on the background thread.
+     */
+    private int mTimesFollowedVastRedirect;
+
+    VastXmlManagerAggregator(@NonNull final VastXmlManagerAggregatorListener vastXmlManagerAggregatorListener,
+            final double screenAspectRatio,
+            final int screenAreaDp,
+            @NonNull final Context context) {
+        super();
+
+        Preconditions.checkNotNull(vastXmlManagerAggregatorListener);
+        Preconditions.checkNotNull(context);
+        mVastXmlManagerAggregatorListener =
+                new WeakReference<VastXmlManagerAggregatorListener>(vastXmlManagerAggregatorListener);
+        mScreenAspectRatio = screenAspectRatio;
+        mScreenAreaDp = screenAreaDp;
+        mContext = context.getApplicationContext();
+    }
+
+    @Override
+    protected void onPreExecute() {
+        // This is to set the WebView user agent in case it was not already set by some other
+        // element (such as the request queue).
+        Networking.getUserAgent(mContext);
+    }
+
+    @Override
+    protected VastVideoConfig doInBackground(@Nullable String... strings) {
+        AndroidHttpClient httpClient = null;
+        try {
+            httpClient = HttpClient.getHttpClient();
+            if (strings != null && strings.length > 0) {
+                String vastXml = strings[0];
+                if (vastXml == null) {
+                    return null;
+                }
+                return evaluateVastXmlManager(vastXml, httpClient, new ArrayList<VastTracker>());
+            }
+        } catch (Exception e) {
+            MoPubLog.d("Failed to parse VAST XML", e);
+        } finally {
+            if (httpClient != null) {
+                httpClient.close();
+            }
+        }
+
+        return null;
+    }
+
+    @Override
+    protected void onPostExecute(final @Nullable VastVideoConfig vastVideoConfig) {
+        final VastXmlManagerAggregatorListener listener = mVastXmlManagerAggregatorListener.get();
+        if (listener != null) {
+            listener.onAggregationComplete(vastVideoConfig);
+        }
+    }
+
+    @Override
+    protected void onCancelled() {
+        final VastXmlManagerAggregatorListener listener = mVastXmlManagerAggregatorListener.get();
+        if (listener != null) {
+            listener.onAggregationComplete(null);
+        }
+    }
+
+    /**
+     * Recursively traverses the VAST xml documents and finds the first Linear creative containing a
+     * valid media file. For each Ad element in a document, the method will first try to find a
+     * valid Linear creative in the InLine element. If it does not find one, it will then try to
+     * resolve the Wrapper element which should redirect to more VAST xml documents with more InLine
+     * elements.
+     * <p/>
+     * The list of error trackers are propagated through each wrapper redirect. If at the end of the
+     * wrapper chain, there's no ad, then the error trackers for the entire wrapper chain are fired.
+     * If a valid video is found, the error trackers are stored in the video configuration for
+     * non-xml errors.
+     *
+     * @param vastXml           The xml that this class parses
+     * @param androidHttpClient This is used to follow redirects
+     * @param errorTrackers     This is the current list of error tracker URLs to hit if something
+     *                          goes wrong.
+     * @return {@link VastVideoConfig} with all available fields set or null if the xml is
+     * invalid or null.
+     */
+    @VisibleForTesting
+    @Nullable
+    VastVideoConfig evaluateVastXmlManager(@NonNull final String vastXml,
+            @NonNull final AndroidHttpClient androidHttpClient,
+            @NonNull final List<VastTracker> errorTrackers) {
+        Preconditions.checkNotNull(vastXml, "vastXml cannot be null");
+        Preconditions.checkNotNull(androidHttpClient, "androidHttpClient cannot be null");
+        Preconditions.checkNotNull(errorTrackers, "errorTrackers cannot be null");
+
+        final VastXmlManager xmlManager = new VastXmlManager();
+        try {
+            xmlManager.parseVastXml(vastXml);
+        } catch (Exception e) {
+            MoPubLog.d("Failed to parse VAST XML", e);
+            makeVastTrackingHttpRequest(errorTrackers, VastErrorCode.XML_PARSING_ERROR, null,
+                    null, mContext);
+            return null;
+        }
+
+        List<VastAdXmlManager> vastAdXmlManagers = xmlManager.getAdXmlManagers();
+
+        // If there are no ads, fire the error trackers
+        if (fireErrorTrackerIfNoAds(vastAdXmlManagers, xmlManager, mContext)) {
+            return null;
+        }
+
+        for (VastAdXmlManager vastAdXmlManager : vastAdXmlManagers) {
+
+            if (!isValidSequenceNumber(vastAdXmlManager.getSequence())) {
+                continue;
+            }
+
+            // InLine evaluation
+            VastInLineXmlManager vastInLineXmlManager = vastAdXmlManager.getInLineXmlManager();
+            if (vastInLineXmlManager != null) {
+                VastVideoConfig vastVideoConfig = evaluateInLineXmlManager(
+                        vastInLineXmlManager, errorTrackers);
+                // If the vastVideoConfig is non null, it means we found a valid media file
+                if (vastVideoConfig != null) {
+                    populateMoPubCustomElements(xmlManager, vastVideoConfig);
+                    return vastVideoConfig;
+                }
+            }
+
+            // Wrapper evaluation
+            VastWrapperXmlManager vastWrapperXmlManager = vastAdXmlManager.getWrapperXmlManager();
+            if (vastWrapperXmlManager != null) {
+                final List<VastTracker> wrapperErrorTrackers = new ArrayList<VastTracker>(errorTrackers);
+                wrapperErrorTrackers.addAll(vastWrapperXmlManager.getErrorTrackers());
+                String vastRedirectXml = evaluateWrapperRedirect(vastWrapperXmlManager,
+                        androidHttpClient, wrapperErrorTrackers);
+                if (vastRedirectXml == null) {
+                    continue;
+                }
+
+                VastVideoConfig vastVideoConfig = evaluateVastXmlManager(
+                        vastRedirectXml,
+                        androidHttpClient,
+                        wrapperErrorTrackers);
+                // If we don't find a valid video creative somewhere down this wrapper chain,
+                // look at the next Ad element
+                // NOTE: Wrapper elements will never contain media files according to the VAST
+                // 3.0 spec
+                if (vastVideoConfig == null) {
+                    continue;
+                }
+
+                // If we have a vastVideoConfig it means that we found a valid media file
+                // in one of Wrapper redirects. Therefore, aggregate all trackers in the wrapper
+                vastVideoConfig.addImpressionTrackers(
+                        vastWrapperXmlManager.getImpressionTrackers());
+                List<VastLinearXmlManager> linearXmlManagers =
+                        vastWrapperXmlManager.getLinearXmlManagers();
+                for (VastLinearXmlManager linearXmlManager : linearXmlManagers) {
+                    populateLinearTrackersAndIcon(linearXmlManager, vastVideoConfig);
+                }
+
+                // Only populate a companion ad if we don't already have one from one of the
+                // redirects
+                if (!vastVideoConfig.hasCompanionAd()) {
+                    vastVideoConfig.setVastCompanionAd(
+                            getBestCompanionAd(vastWrapperXmlManager.getCompanionAdXmlManagers(),
+                                    CompanionOrientation.LANDSCAPE),
+                            getBestCompanionAd(vastWrapperXmlManager.getCompanionAdXmlManagers(),
+                                    CompanionOrientation.PORTRAIT));
+                } else {
+                    // Otherwise append the companion trackers if it doesn't have resources
+                    final VastCompanionAdConfig landscapeCompanionAd = vastVideoConfig.getVastCompanionAd(
+                            Configuration.ORIENTATION_LANDSCAPE);
+                    final VastCompanionAdConfig portraitCompanionAd = vastVideoConfig.getVastCompanionAd(
+                            Configuration.ORIENTATION_PORTRAIT);
+                    if (landscapeCompanionAd != null && portraitCompanionAd != null) {
+                        for (final VastCompanionAdXmlManager companionAdXmlManager : vastWrapperXmlManager.getCompanionAdXmlManagers()) {
+                            if (!companionAdXmlManager.hasResources()) {
+                                landscapeCompanionAd.addClickTrackers(
+                                        companionAdXmlManager.getClickTrackers());
+                                landscapeCompanionAd.addCreativeViewTrackers(
+                                        companionAdXmlManager.getCompanionCreativeViewTrackers());
+                                portraitCompanionAd.addClickTrackers(
+                                        companionAdXmlManager.getClickTrackers());
+                                portraitCompanionAd.addCreativeViewTrackers(
+                                        companionAdXmlManager.getCompanionCreativeViewTrackers());
+                            }
+                        }
+                    }
+                }
+
+                populateMoPubCustomElements(xmlManager, vastVideoConfig);
+
+                return vastVideoConfig;
+            }
+        }
+
+        return null;
+    }
+
+    /**
+     * Parses and evaluates an InLine element looking for a valid media file. InLine elements are
+     * evaluated in order and the first valid media file found is used. If a media file is
+     * found, a {@link VastVideoConfig} is created and trackers are aggregated. If a
+     * valid companion ad is found, it is also added to the configuration.
+     *
+     * @param vastInLineXmlManager used to extract the media file, clickthrough link, trackers, and
+     *                         companion ad
+     * @param errorTrackers The error trackers from previous wrappers
+     * @return a {@link VastVideoConfig} or null if a valid media file was not found
+     */
+    @Nullable
+    private VastVideoConfig evaluateInLineXmlManager(
+            @NonNull final VastInLineXmlManager vastInLineXmlManager,
+            @NonNull final List<VastTracker> errorTrackers) {
+        Preconditions.checkNotNull(vastInLineXmlManager);
+
+        List<VastLinearXmlManager> linearXmlManagers = vastInLineXmlManager.getLinearXmlManagers();
+        for (VastLinearXmlManager linearXmlManager : linearXmlManagers) {
+            String bestMediaFileUrl = getBestMediaFileUrl(linearXmlManager.getMediaXmlManagers());
+            if (bestMediaFileUrl != null) {
+                // Create vast video configuration and populate initial trackers
+                VastVideoConfig vastVideoConfig = new VastVideoConfig();
+                vastVideoConfig.addImpressionTrackers(vastInLineXmlManager.getImpressionTrackers());
+                populateLinearTrackersAndIcon(linearXmlManager, vastVideoConfig);
+
+                // Linear nodes will only have a click through url and network media file when they
+                // are under an InLine element. They will not have these assets when they are under
+                // a Wrapper element.
+                vastVideoConfig.setClickThroughUrl(linearXmlManager.getClickThroughUrl());
+                vastVideoConfig.setNetworkMediaFileUrl(bestMediaFileUrl);
+
+                vastVideoConfig.setVastCompanionAd(
+                        getBestCompanionAd(vastInLineXmlManager.getCompanionAdXmlManagers(),
+                                CompanionOrientation.LANDSCAPE),
+                        getBestCompanionAd(vastInLineXmlManager.getCompanionAdXmlManagers(),
+                                CompanionOrientation.PORTRAIT));
+                errorTrackers.addAll(vastInLineXmlManager.getErrorTrackers());
+                vastVideoConfig.addErrorTrackers(errorTrackers);
+                return vastVideoConfig;
+            }
+        }
+
+        return null;
+    }
+
+    /**
+     * Retrieves the Wrapper's redirect uri and follows it to return the next VAST xml String.
+     *
+     * @param vastWrapperXmlManager used to get the redirect uri
+     * @param androidHttpClient     the http client
+     * @param wrapperErrorTrackers  Error trackers to hit if something goes wrong
+     * @return the next VAST xml String or {@code null} if it could not be resolved
+     */
+    @Nullable
+    private String evaluateWrapperRedirect(@NonNull VastWrapperXmlManager vastWrapperXmlManager,
+            @NonNull AndroidHttpClient androidHttpClient,
+            @NonNull List<VastTracker> wrapperErrorTrackers) {
+        String vastAdTagUri = vastWrapperXmlManager.getVastAdTagURI();
+        if (vastAdTagUri == null) {
+            return null;
+        }
+
+        String vastRedirectXml = null;
+        try {
+            vastRedirectXml = followVastRedirect(androidHttpClient, vastAdTagUri);
+        } catch (Exception e) {
+            MoPubLog.d("Failed to follow VAST redirect", e);
+            if (!wrapperErrorTrackers.isEmpty()) {
+                makeVastTrackingHttpRequest(wrapperErrorTrackers, VastErrorCode.WRAPPER_TIMEOUT,
+                                null, null, mContext);
+            }
+        }
+
+        return vastRedirectXml;
+    }
+
+    /**
+     * This method aggregates all trackers found in the linearXmlManager and adds them to the
+     * {@link VastVideoConfig}. This method also populates the skip offset and icon if they
+     * have not already been populated in one of the wrapper redirects.
+     *
+     * @param linearXmlManager used to retrieve trackers, and assets
+     * @param vastVideoConfig modified in this method to store trackers and assets
+     */
+    private void populateLinearTrackersAndIcon(@NonNull final VastLinearXmlManager linearXmlManager,
+            @NonNull final VastVideoConfig vastVideoConfig) {
+        Preconditions.checkNotNull(linearXmlManager, "linearXmlManager cannot be null");
+        Preconditions.checkNotNull(vastVideoConfig, "vastVideoConfig cannot be null");
+
+        vastVideoConfig.addAbsoluteTrackers(linearXmlManager.getAbsoluteProgressTrackers());
+        vastVideoConfig.addFractionalTrackers(
+                linearXmlManager.getFractionalProgressTrackers());
+        vastVideoConfig.addPauseTrackers(linearXmlManager.getPauseTrackers());
+        vastVideoConfig.addResumeTrackers(linearXmlManager.getResumeTrackers());
+        vastVideoConfig.addCompleteTrackers(linearXmlManager.getVideoCompleteTrackers());
+        vastVideoConfig.addCloseTrackers(linearXmlManager.getVideoCloseTrackers());
+        vastVideoConfig.addSkipTrackers(linearXmlManager.getVideoSkipTrackers());
+        vastVideoConfig.addClickTrackers(linearXmlManager.getClickTrackers());
+
+        // Only set the skip offset if we haven't set it already in one of the redirects
+        if (vastVideoConfig.getSkipOffsetString() == null) {
+            vastVideoConfig.setSkipOffset(linearXmlManager.getSkipOffset());
+        }
+
+        // Only set the icon if we haven't set it already in one of the redirects
+        if (vastVideoConfig.getVastIconConfig() == null) {
+            vastVideoConfig.setVastIconConfig(getBestIcon(linearXmlManager.getIconXmlManagers()));
+        }
+    }
+
+    /**
+     * Parses all custom MoPub specific custom extensions and impression trackers
+     * and populates them in the {@link VastVideoConfig}. These extensions are not part
+     * of the Vast 3.0 spec and are appended to the root of the xml document.
+     *
+     * @param xmlManager used to retrieve the custom extensions and impression trackers
+     * @param vastVideoConfig modified in this method to store custom extensions and
+     *                               impression trackers
+     */
+    private void populateMoPubCustomElements(@NonNull final VastXmlManager xmlManager,
+            @NonNull final VastVideoConfig vastVideoConfig) {
+        Preconditions.checkNotNull(xmlManager, "xmlManager cannot be null");
+        Preconditions.checkNotNull(vastVideoConfig, "vastVideoConfig cannot be null");
+
+        vastVideoConfig.addImpressionTrackers(xmlManager.getMoPubImpressionTrackers());
+
+        if (vastVideoConfig.getCustomCtaText() == null) {
+            vastVideoConfig.setCustomCtaText(xmlManager.getCustomCtaText());
+        }
+        if (vastVideoConfig.getCustomSkipText() == null) {
+            vastVideoConfig.setCustomSkipText(xmlManager.getCustomSkipText());
+        }
+        if (vastVideoConfig.getCustomCloseIconUrl() == null) {
+            vastVideoConfig.setCustomCloseIconUrl(xmlManager.getCustomCloseIconUrl());
+        }
+        if (!vastVideoConfig.isCustomForceOrientationSet()) {
+            vastVideoConfig.setCustomForceOrientation(xmlManager.getCustomForceOrientation());
+        }
+    }
+
+    /**
+     * Fires the available error tracker if the sole element in this vast document is an Error
+     * element. In the VAST 3.0 spec in section 2.4.2.4, the No Ad Response can be represented by a
+     * VAST document with only the Error element and no Ad elements. Returns whether or not the
+     * error tracker was fired.
+     *
+     * @param vastAdXmlManagers The List of AdXmlManagers to determine if there are any ads
+     *                          available
+     * @param xmlManager        The current VastXmlManager that's used to get the new error tracker
+     * @param context           Used to send an http request
+     * @return {@code true} if the error tracker was fired, {@code false} if the error tracker was
+     * not fired.
+     */
+    private boolean fireErrorTrackerIfNoAds(
+            @NonNull final List<VastAdXmlManager> vastAdXmlManagers,
+            @NonNull final VastXmlManager xmlManager, @NonNull Context context) {
+        // When there is no <Ad> tag and when there is an error tracker
+        if (vastAdXmlManagers.isEmpty() && xmlManager.getErrorTracker() != null ) {
+            // Only use NO_ADS_VAST_RESPONSE if we've followed one or more wrappers
+            makeVastTrackingHttpRequest(
+                    Collections.singletonList(xmlManager.getErrorTracker()),
+                    mTimesFollowedVastRedirect > 0
+                            ? VastErrorCode.NO_ADS_VAST_RESPONSE
+                            : VastErrorCode.UNDEFINED_ERROR,
+                    null, null, context);
+            return true;
+        }
+        return false;
+    }
+
+    @VisibleForTesting
+    @Nullable
+    String getBestMediaFileUrl(@NonNull final List<VastMediaXmlManager> managers) {
+        Preconditions.checkNotNull(managers, "managers cannot be null");
+        final List<VastMediaXmlManager> mediaXmlManagers = new ArrayList<VastMediaXmlManager>(managers);
+        double bestMediaFitness = Double.POSITIVE_INFINITY;
+        String bestMediaFileUrl = null;
+
+        final Iterator<VastMediaXmlManager> xmlManagerIterator = mediaXmlManagers.iterator();
+        while (xmlManagerIterator.hasNext()) {
+            final VastMediaXmlManager mediaXmlManager = xmlManagerIterator.next();
+
+            final String mediaType = mediaXmlManager.getType();
+            final String mediaUrl = mediaXmlManager.getMediaUrl();
+            if (!VIDEO_MIME_TYPES.contains(mediaType) || mediaUrl == null) {
+                xmlManagerIterator.remove();
+                continue;
+            }
+
+            final Integer mediaWidth = mediaXmlManager.getWidth();
+            final Integer mediaHeight = mediaXmlManager.getHeight();
+            if (mediaWidth == null || mediaWidth <= 0 || mediaHeight == null || mediaHeight <= 0) {
+                continue;
+            }
+
+            final double mediaFitness = calculateFitness(mediaWidth, mediaHeight);
+            if (mediaFitness < bestMediaFitness) {
+                bestMediaFitness = mediaFitness;
+                bestMediaFileUrl = mediaUrl;
+            }
+        }
+
+        return bestMediaFileUrl;
+    }
+
+    @VisibleForTesting
+    @Nullable
+    VastCompanionAdConfig getBestCompanionAd(
+            @NonNull final List<VastCompanionAdXmlManager> managers,
+            @NonNull final CompanionOrientation orientation) {
+        Preconditions.checkNotNull(managers, "managers cannot be null");
+        Preconditions.checkNotNull(orientation, "orientation cannot be null");
+
+        final List<VastCompanionAdXmlManager> companionXmlManagers =
+                new ArrayList<VastCompanionAdXmlManager>(managers);
+        double bestCompanionFitness = Double.POSITIVE_INFINITY;
+        VastCompanionAdXmlManager bestCompanionXmlManager = null;
+        VastResource bestVastResource = null;
+        Point bestVastScaledDimensions = null;
+
+        // Look for the best companion ad in order of prioritized resource types
+        for (VastResource.Type type : VastResource.Type.values()) {
+            final Iterator<VastCompanionAdXmlManager> xmlManagerIterator =
+                    companionXmlManagers.iterator();
+            while (xmlManagerIterator.hasNext()) {
+                final VastCompanionAdXmlManager companionXmlManager = xmlManagerIterator.next();
+
+                final Integer width = companionXmlManager.getWidth();
+                final Integer height = companionXmlManager.getHeight();
+                if (width == null || width < MINIMUM_COMPANION_AD_WIDTH ||
+                        height == null || height < MINIMUM_COMPANION_AD_HEIGHT) {
+                    continue;
+                }
+
+                Point vastScaledDimensions = getScaledDimensions(width, height);
+                VastResource vastResource = VastResource.fromVastResourceXmlManager(
+                        companionXmlManager.getResourceXmlManager(), type,
+                        vastScaledDimensions.x, vastScaledDimensions.y);
+                if (vastResource == null) {
+                    continue;
+                }
+
+                final double companionFitness;
+                if (CompanionOrientation.PORTRAIT == orientation) {
+                    companionFitness = calculateFitness(height, width);
+                } else {
+                    companionFitness = calculateFitness(width, height);
+                }
+                if (companionFitness < bestCompanionFitness) {
+                    bestCompanionFitness = companionFitness;
+                    bestCompanionXmlManager = companionXmlManager;
+                    bestVastResource = vastResource;
+                    bestVastScaledDimensions = vastScaledDimensions;
+                }
+            }
+            if (bestCompanionXmlManager != null) {
+                break;
+            }
+        }
+
+        if (bestCompanionXmlManager != null) {
+            return new VastCompanionAdConfig(
+                    bestVastScaledDimensions.x,
+                    bestVastScaledDimensions.y,
+                    bestVastResource,
+                    bestCompanionXmlManager.getClickThroughUrl(),
+                    bestCompanionXmlManager.getClickTrackers(),
+                    bestCompanionXmlManager.getCompanionCreativeViewTrackers()
+            );
+        }
+        return null;
+    }
+
+    /**
+     * Given a width and height for a resource, if the dimensions are larger than the screen size
+     * then scale them down to fit in the screen while maintaining the aspect ratio. Scaling
+     * takes into account the default Android WebView padding.
+     *
+     * @param widthDp width of the resource in dips
+     * @param heightDp height of the resource in dips
+     * @return the new scaled dimensions that honor the aspect ratio
+     */
+    @VisibleForTesting
+    @NonNull
+    Point getScaledDimensions(int widthDp, int heightDp) {
+        Point defaultPoint = new Point(widthDp, heightDp);
+        final Display display = ((WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        int x = display.getWidth();
+        int y = display.getHeight();
+
+        // For landscape, width is always greater than height
+        int screenWidth = Math.max(x, y);
+        int screenHeight = Math.min(x, y);
+
+        int widthPx = Dips.dipsToIntPixels(widthDp, mContext);
+        int heightPx = Dips.dipsToIntPixels(heightDp, mContext);
+
+        // Return if the width and height already fit in the screen
+        if (widthPx <= screenWidth && heightPx <= screenHeight) {
+            return defaultPoint;
+        }
+
+        float widthRatio = (float) widthPx / screenWidth;
+        float heightRatio = (float) heightPx / screenHeight;
+
+        Point point = new Point();
+        if (widthRatio >= heightRatio) {
+            point.x = screenWidth - VastVideoViewController.WEBVIEW_PADDING;
+            point.y = (int) (heightPx / widthRatio) - VastVideoViewController.WEBVIEW_PADDING;
+        } else {
+            point.x = (int) (widthPx / heightRatio) - VastVideoViewController.WEBVIEW_PADDING;
+            point.y = screenHeight - VastVideoViewController.WEBVIEW_PADDING;
+        }
+
+        if (point.x < 0 || point.y < 0) {
+            return defaultPoint;
+        }
+
+        point.x = Dips.pixelsToIntDips(point.x, mContext);
+        point.y = Dips.pixelsToIntDips(point.y, mContext);
+
+        return point;
+    }
+
+    @VisibleForTesting
+    @Nullable
+    VastIconConfig getBestIcon(@NonNull final List<VastIconXmlManager> managers) {
+        Preconditions.checkNotNull(managers, "managers cannot be null");
+        final List<VastIconXmlManager> iconXmlManagers = new ArrayList<VastIconXmlManager>(managers);
+
+        // Look for the best icon in order of prioritized resource types
+        for (VastResource.Type type : VastResource.Type.values()) {
+            final Iterator<VastIconXmlManager> xmlManagerIterator = iconXmlManagers.iterator();
+            while (xmlManagerIterator.hasNext()) {
+                final VastIconXmlManager iconXmlManager = xmlManagerIterator.next();
+
+                final Integer width = iconXmlManager.getWidth();
+                final Integer height = iconXmlManager.getHeight();
+
+                // Icons can be a max of 300 x 300 dp
+                if (width == null || width <= 0 || width > 300
+                        || height == null || height <= 0 || height > 300) {
+                    continue;
+                }
+
+                VastResource vastResource = VastResource.fromVastResourceXmlManager(
+                        iconXmlManager.getResourceXmlManager(), type, width, height);
+
+                if (vastResource == null) {
+                    continue;
+                }
+
+                return new VastIconConfig(
+                        iconXmlManager.getWidth(),
+                        iconXmlManager.getHeight(),
+                        iconXmlManager.getOffsetMS(),
+                        iconXmlManager.getDurationMS(),
+                        vastResource,
+                        iconXmlManager.getClickTrackingUris(),
+                        iconXmlManager.getClickThroughUri(),
+                        iconXmlManager.getViewTrackingUris());
+            }
+        }
+
+        return null;
+    }
+
+    /**
+     * Calculates the fitness of the media file or companion by comparing its aspect ratio and
+     * area to those of the device. The closer to 0 the score, the better. The fitness function
+     * weighs aspect ratios and areas differently.
+     *
+     * @param widthDp the width of the media file or companion ad
+     * @param heightDp the height of th media file or companion ad
+     * @return the fitness score. The closer to 0, the better.
+     */
+    private double calculateFitness(final int widthDp, final int heightDp) {
+        final double mediaAspectRatio = (double) widthDp / heightDp;
+        final int mediaAreaDp = widthDp * heightDp;
+        final double aspectRatioRatio = mediaAspectRatio / mScreenAspectRatio;
+        final double areaRatio = (double) mediaAreaDp / mScreenAreaDp;
+        return ASPECT_RATIO_WEIGHT * Math.abs(Math.log(aspectRatioRatio))
+                + AREA_WEIGHT * Math.abs(Math.log(areaRatio));
+    }
+
+    /**
+     * Since MoPub does not support ad pods, do not accept any positive integers greater than 1.
+     * MoPub will use the first ad in an ad pod (sequence = 1), but it will ignore all other ads in
+     * the pod. If no sequence number, MoPub treats it like a stand-alone ad. If the sequence number
+     * is nonsensical (e.g. negative, fails to parse as an integer), MoPub treats it like a
+     * stand-alone ad.
+     *
+     * @param sequence The sequence number
+     * @return True if this is a sequence number that MoPub would show an ad for, false if not.
+     */
+    static boolean isValidSequenceNumber(@Nullable final String sequence) {
+        if (TextUtils.isEmpty(sequence)) {
+            return true;
+        }
+        try {
+            final int sequenceInt = Integer.parseInt(sequence);
+            return sequenceInt < 2;
+        } catch (NumberFormatException e) {
+            // Since the sequence number is not a valid integer, go ahead and pretend there's no
+            // sequence number and show this ad
+            return true;
+        }
+    }
+
+    @Nullable
+    private String followVastRedirect(@NonNull final AndroidHttpClient httpClient,
+            @NonNull final String redirectUrl) throws Exception {
+        Preconditions.checkNotNull(httpClient);
+        Preconditions.checkNotNull(redirectUrl);
+
+        if (mTimesFollowedVastRedirect < MAX_TIMES_TO_FOLLOW_VAST_REDIRECT) {
+            mTimesFollowedVastRedirect++;
+
+            final HttpGet httpget = HttpClient.initializeHttpGet(redirectUrl);
+            final HttpResponse response = httpClient.execute(httpget);
+            final HttpEntity entity = response.getEntity();
+            return (entity != null) ? Strings.fromStream(entity.getContent()) : null;
+        }
+        return null;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    void setTimesFollowedVastRedirect(final int timesFollowedVastRedirect) {
+        mTimesFollowedVastRedirect = timesFollowedVastRedirect;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
index d562ffcc..68f918c2 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
@@ -2,7 +2,7 @@
 
 import android.content.Context;
 
-import com.mopub.mobileads.util.vast.VastManager;
+import com.mopub.mobileads.VastManager;
 
 public class VastManagerFactory {
     protected static VastManagerFactory instance = new VastManagerFactory();
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
new file mode 100644
index 00000000..d12bf8e1
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
@@ -0,0 +1,34 @@
+package com.mopub.mobileads.resource;
+
+import android.graphics.Canvas;
+import android.graphics.ColorFilter;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.NonNull;
+
+public abstract class BaseWidgetDrawable extends Drawable {
+    protected void drawTextWithinBounds(@NonNull final Canvas canvas,
+            @NonNull final Paint textPaint, @NonNull final Rect textRect,
+            @NonNull final String text) {
+        textPaint.getTextBounds(text, 0, text.length(), textRect);
+        final float textHeight = textPaint.descent() - textPaint.ascent();
+        final float textOffset = (textHeight / 2) - textPaint.descent();
+        canvas.drawText(text, getBounds().centerX(), getBounds().centerY() + textOffset, textPaint);
+    }
+
+    @Override
+    public void setAlpha(int i) {
+
+    }
+
+    @Override
+    public void setColorFilter(ColorFilter colorFilter) {
+
+    }
+
+    @Override
+    public int getOpacity() {
+        return 0;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CircleDrawable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CircleDrawable.java
deleted file mode 100644
index 3d604a87..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CircleDrawable.java
+++ /dev/null
@@ -1,58 +0,0 @@
-package com.mopub.mobileads.resource;
-
-import android.graphics.Canvas;
-import android.graphics.Color;
-import android.graphics.ColorFilter;
-import android.graphics.Paint;
-import android.graphics.drawable.Drawable;
-
-public abstract class CircleDrawable extends Drawable {
-    private final Paint mPaint;
-
-    public CircleDrawable() {
-        super();
-
-        mPaint = new Paint();
-
-        mPaint.setAntiAlias(true);
-        mPaint.setStrokeWidth(3);
-        mPaint.setColor(Color.WHITE);
-        mPaint.setStyle(Paint.Style.STROKE);
-    }
-
-    @Override
-    public void draw(final Canvas canvas) {
-        canvas.drawCircle(getCenterX(), getCenterY(), getRadius(), mPaint);
-    }
-
-    @Override
-    public void setAlpha(int i) {
-
-    }
-
-    @Override
-    public void setColorFilter(ColorFilter colorFilter) {
-
-    }
-
-    @Override
-    public int getOpacity() {
-        return 0;
-    }
-
-    protected Paint getPaint() {
-        return mPaint;
-    }
-
-    protected int getCenterX() {
-        return getBounds().width() / 2;
-    }
-
-    protected int getCenterY() {
-        return getBounds().height() / 2;
-    }
-
-    protected int getRadius() {
-        return Math.min(getCenterX(), getCenterY());
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
index 557b6e11..8fc410a5 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
@@ -1,47 +1,26 @@
 package com.mopub.mobileads.resource;
 
 import android.graphics.Canvas;
+import android.graphics.Color;
 import android.graphics.Paint;
-import android.graphics.Point;
 
-public class CloseButtonDrawable extends CircleDrawable {
-    private Point centerPoint;
-    private Point bottomLeftPoint;
-    private Point topLeftPoint;
-    private Point topRightPoint;
-    private Point bottomRightPoint;
+public class CloseButtonDrawable extends BaseWidgetDrawable {
     private final Paint closeButtonPaint;
-    private int mDisplacement;
 
     public CloseButtonDrawable() {
         super();
 
-        closeButtonPaint = new Paint(getPaint());
-        closeButtonPaint.setStrokeWidth(4.5f);
-        closeButtonPaint.setStrokeCap(Paint.Cap.ROUND);
+        closeButtonPaint = new Paint();
+        closeButtonPaint.setColor(DrawableConstants.CloseButton.STROKE_COLOR);
+        closeButtonPaint.setStrokeWidth(DrawableConstants.CloseButton.STROKE_WIDTH);
+        closeButtonPaint.setStrokeCap(DrawableConstants.CloseButton.STROKE_CAP);
     }
 
     @Override
     public void draw(final Canvas canvas) {
-        super.draw(canvas);
-
-        mDisplacement = (int) (0.5f * getRadius() / (float) Math.sqrt(2f));
-
-        centerPoint = new Point(getCenterX(), getCenterY());
-
-        bottomLeftPoint = new Point(centerPoint);
-        bottomLeftPoint.offset(-mDisplacement, mDisplacement);
-
-        topLeftPoint = new Point(centerPoint);
-        topLeftPoint.offset(-mDisplacement, -mDisplacement);
-
-        topRightPoint = new Point(centerPoint);
-        topRightPoint.offset(mDisplacement, -mDisplacement);
-
-        bottomRightPoint = new Point(centerPoint);
-        bottomRightPoint.offset(mDisplacement, mDisplacement);
-
-        canvas.drawLine(bottomLeftPoint.x, bottomLeftPoint.y, topRightPoint.x, topRightPoint.y, closeButtonPaint);
-        canvas.drawLine(topLeftPoint.x, topLeftPoint.y, bottomRightPoint.x, bottomRightPoint.y, closeButtonPaint);
+        final int w = getBounds().width();
+        final int h = getBounds().height();
+        canvas.drawLine(0, h, w, 0, closeButtonPaint);
+        canvas.drawLine(0, 0, w, h, closeButtonPaint);
     }
-}
\ No newline at end of file
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CountdownDrawable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CountdownDrawable.java
deleted file mode 100644
index 16fb2074..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CountdownDrawable.java
+++ /dev/null
@@ -1,60 +0,0 @@
-package com.mopub.mobileads.resource;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Color;
-import android.graphics.Paint;
-import android.graphics.Rect;
-
-import com.mopub.common.util.Dips;
-
-public class CountdownDrawable extends CircleDrawable implements TextDrawable {
-    private final static float TEXT_SIZE_SP = 18f;
-    private final Paint mTextPaint;
-    private String mSecondsRemaining;
-    private final float textSizePixels;
-    private Rect mTextRect;
-
-    public CountdownDrawable(final Context context) {
-        super();
-
-        mSecondsRemaining = "";
-
-        mTextPaint = new Paint();
-
-        textSizePixels = Dips.dipsToFloatPixels(TEXT_SIZE_SP, context);
-
-        mTextPaint.setTextSize(textSizePixels);
-        mTextPaint.setAntiAlias(true);
-        mTextPaint.setColor(Color.WHITE);
-        mTextPaint.setStyle(Paint.Style.FILL);
-        mTextPaint.setTextAlign(Paint.Align.LEFT);
-
-        mTextRect = new Rect();
-    }
-
-    @Override
-    public void draw(final Canvas canvas) {
-        super.draw(canvas);
-
-        final String text = String.valueOf(mSecondsRemaining);
-
-        mTextPaint.getTextBounds(text, 0, text.length(), mTextRect);
-
-        final int x = getCenterX() - mTextRect.width() / 2;
-        final int y = getCenterY() + mTextRect.height() / 2;
-
-        canvas.drawText(text, x, y, mTextPaint);
-    }
-
-    /**
-     * TextDrawable implementation
-     */
-
-    public void updateText(final String text) {
-        if (!mSecondsRemaining.equals(text)) {
-            mSecondsRemaining = text;
-            invalidateSelf();
-        }
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CtaButtonDrawable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CtaButtonDrawable.java
new file mode 100644
index 00000000..d3077bac
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CtaButtonDrawable.java
@@ -0,0 +1,83 @@
+package com.mopub.mobileads.resource;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.support.annotation.NonNull;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.util.Dips;
+
+public class CtaButtonDrawable extends BaseWidgetDrawable {
+    @NonNull private final Paint mBackgroundPaint;
+    @NonNull private final Paint mOutlinePaint;
+    @NonNull private final Paint mTextPaint;
+    @NonNull private final RectF mButtonRect;
+    @NonNull private final Rect mTextRect;
+
+    private final int mButtonCornerRadius;
+    private String mCtaText;
+
+    public CtaButtonDrawable(@NonNull final Context context) {
+        super();
+
+        final int outlineStrokeWidth = Dips.dipsToIntPixels(
+                DrawableConstants.CtaButton.OUTLINE_STROKE_WIDTH_DIPS, context);
+        final float textSize = Dips.dipsToFloatPixels(
+                DrawableConstants.CtaButton.TEXT_SIZE_SP, context);
+
+        mBackgroundPaint = new Paint();
+        mBackgroundPaint.setColor(DrawableConstants.CtaButton.BACKGROUND_COLOR);
+        mBackgroundPaint.setAlpha(DrawableConstants.CtaButton.BACKGROUND_ALPHA);
+        mBackgroundPaint.setStyle(DrawableConstants.CtaButton.BACKGROUND_STYLE);
+        mBackgroundPaint.setAntiAlias(true);
+
+        mOutlinePaint = new Paint();
+        mOutlinePaint.setColor(DrawableConstants.CtaButton.OUTLINE_COLOR);
+        mOutlinePaint.setAlpha(DrawableConstants.CtaButton.OUTLINE_ALPHA);
+        mOutlinePaint.setStyle(DrawableConstants.CtaButton.OUTLINE_STYLE);
+        mOutlinePaint.setStrokeWidth(outlineStrokeWidth);
+        mOutlinePaint.setAntiAlias(true);
+
+        mTextPaint = new Paint();
+        mTextPaint.setColor(DrawableConstants.CtaButton.TEXT_COLOR);
+        mTextPaint.setTextAlign(DrawableConstants.CtaButton.TEXT_ALIGN);
+        mTextPaint.setTypeface(DrawableConstants.CtaButton.TEXT_TYPEFACE);
+        mTextPaint.setTextSize(textSize);
+        mTextPaint.setAntiAlias(true);
+
+        mTextRect = new Rect();
+        mCtaText = DrawableConstants.CtaButton.DEFAULT_CTA_TEXT;
+
+        mButtonRect = new RectF();
+        mButtonCornerRadius = Dips.dipsToIntPixels(DrawableConstants.CtaButton.CORNER_RADIUS_DIPS, context);
+    }
+
+    @Override
+    public void draw(final Canvas canvas) {
+        mButtonRect.set(getBounds());
+
+        // Rounded rectangle background fill
+        canvas.drawRoundRect(mButtonRect, mButtonCornerRadius, mButtonCornerRadius, mBackgroundPaint);
+
+        // Rounded rectangle outline
+        canvas.drawRoundRect(mButtonRect, mButtonCornerRadius, mButtonCornerRadius, mOutlinePaint);
+
+        // CTA text
+        drawTextWithinBounds(canvas, mTextPaint, mTextRect, mCtaText);
+    }
+
+    public void setCtaText(@NonNull final String ctaText) {
+        mCtaText = ctaText;
+        invalidateSelf();
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    public String getCtaText() {
+        return mCtaText;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
new file mode 100644
index 00000000..5c2b844f
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
@@ -0,0 +1,91 @@
+package com.mopub.mobileads.resource;
+
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Typeface;
+
+public class DrawableConstants {
+
+    public static class ProgressBar {
+        public static final int HEIGHT_DIPS = 4;
+        public static final int NUGGET_WIDTH_DIPS = 4;
+
+        public static final int BACKGROUND_COLOR = Color.WHITE;
+        public static final int BACKGROUND_ALPHA = 128;
+        public static final Paint.Style BACKGROUND_STYLE = Paint.Style.FILL;
+
+        public static final int PROGRESS_COLOR = Color.parseColor("#FFCC4D");
+        public static final int PROGRESS_ALPHA = 255;
+        public static final Paint.Style PROGRESS_STYLE = Paint.Style.FILL;
+    }
+
+    public static class RadialCountdown {
+        public static final int SIDE_LENGTH_DIPS = 45;
+        public static final int TOP_MARGIN_DIPS = 16;
+        public static final int RIGHT_MARGIN_DIPS = 16;
+        public static final int PADDING_DIPS = 5;
+
+        public static final int CIRCLE_STROKE_WIDTH_DIPS = 3;
+        public static final float TEXT_SIZE_SP = 18f;
+        public static final float START_ANGLE = -90f;
+
+        public static final int BACKGROUND_COLOR = Color.WHITE;
+        public static final int BACKGROUND_ALPHA = 128;
+        public static final Paint.Style BACKGROUND_STYLE = Paint.Style.STROKE;
+
+        public static final int PROGRESS_COLOR = Color.WHITE;
+        public static final int PROGRESS_ALPHA = 255;
+        public static final Paint.Style PROGRESS_STYLE = Paint.Style.STROKE;
+
+        public static final int TEXT_COLOR = Color.WHITE;
+        public static final Paint.Align TEXT_ALIGN = Paint.Align.CENTER;
+    }
+
+    public static class CtaButton {
+        public static final int WIDTH_DIPS = 200;
+        public static final int HEIGHT_DIPS = 42;
+        public static final int MARGIN_DIPS = 16;
+        public static final int CORNER_RADIUS_DIPS = 6;
+        public static final int OUTLINE_STROKE_WIDTH_DIPS = 2;
+        public static final float TEXT_SIZE_SP = 20f;
+
+        public static final int BACKGROUND_COLOR = Color.BLACK;
+        public static final int BACKGROUND_ALPHA = 51;
+        public static final Paint.Style BACKGROUND_STYLE = Paint.Style.FILL;
+
+        public static final int OUTLINE_COLOR = Color.WHITE;
+        public static final int OUTLINE_ALPHA = 51;
+        public static final Paint.Style OUTLINE_STYLE = Paint.Style.STROKE;
+
+        public static final String DEFAULT_CTA_TEXT = "Learn More";
+        public static final Typeface TEXT_TYPEFACE = Typeface.create("Helvetica", Typeface.BOLD);
+        public static final int TEXT_COLOR = Color.WHITE;
+        public static final Paint.Align TEXT_ALIGN = Paint.Align.CENTER;
+    }
+    
+    public static class CloseButton {
+        public static final int WIDGET_HEIGHT_DIPS = 46;
+        public static final int EDGE_PADDING = 16;
+        public static final int IMAGE_PADDING_DIPS = 5;
+        public static final int TEXT_RIGHT_MARGIN_DIPS = 7;
+        public static final float TEXT_SIZE_SP = 20f;
+
+        public static final int STROKE_COLOR = Color.WHITE;
+        public static final float STROKE_WIDTH = 8f;
+        public static final Paint.Cap STROKE_CAP = Paint.Cap.ROUND;
+
+        public static final String DEFAULT_CLOSE_BUTTON_TEXT = "";
+        public static final Typeface TEXT_TYPEFACE = Typeface.create("Helvetica", Typeface.NORMAL);
+        public static final int TEXT_COLOR = Color.WHITE;
+    }
+    
+    public static class GradientStrip {
+        public static final int GRADIENT_STRIP_HEIGHT_DIPS = 72;
+        public static final int START_COLOR = Color.argb(102, 0, 0, 0);
+        public static final int END_COLOR = Color.argb(0, 255, 255, 255);
+    }
+
+    public static class BlurredLastVideoFrame {
+        public static final int ALPHA = 128;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/LearnMoreDrawable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/LearnMoreDrawable.java
deleted file mode 100644
index 0ab64cc8..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/LearnMoreDrawable.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package com.mopub.mobileads.resource;
-
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.Point;
-
-public class LearnMoreDrawable extends CircleDrawable {
-
-    private final Paint learnMorePaint;
-    private Point centerPoint;
-    private Point bottomLeftPoint;
-    private Point topRightPoint;
-    private Point leftBarbPoint;
-    private Point rightBarbPoint;
-    private int mDisplacement;
-    private int mBarbLength;
-
-    public LearnMoreDrawable() {
-        super();
-
-        learnMorePaint = new Paint(getPaint());
-        learnMorePaint.setStrokeWidth(4.5f);
-        learnMorePaint.setStrokeCap(Paint.Cap.ROUND);
-    }
-
-    @Override
-    public void draw(final Canvas canvas) {
-        super.draw(canvas);
-
-        mDisplacement = (int) (0.5f * getRadius() / Math.sqrt(2f));
-        mBarbLength = (int) (1.5f * mDisplacement);
-
-        centerPoint = new Point(getCenterX(), getCenterY());
-
-        bottomLeftPoint = new Point(centerPoint);
-        bottomLeftPoint.offset(-mDisplacement, mDisplacement);
-
-        topRightPoint = new Point(centerPoint);
-        topRightPoint.offset(mDisplacement, -mDisplacement);
-
-        leftBarbPoint = new Point(topRightPoint);
-        leftBarbPoint.offset(-mBarbLength, 0);
-
-        rightBarbPoint = new Point(topRightPoint);
-        rightBarbPoint.offset(0, mBarbLength);
-
-        canvas.drawLine(bottomLeftPoint.x, bottomLeftPoint.y, topRightPoint.x, topRightPoint.y, learnMorePaint);
-        canvas.drawLine(topRightPoint.x, topRightPoint.y, leftBarbPoint.x, leftBarbPoint.y, learnMorePaint);
-        canvas.drawLine(topRightPoint.x, topRightPoint.y, rightBarbPoint.x, rightBarbPoint.y, learnMorePaint);
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java
new file mode 100644
index 00000000..88fc74dc
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java
@@ -0,0 +1,113 @@
+package com.mopub.mobileads.resource;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.support.annotation.NonNull;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Dips;
+
+public class ProgressBarDrawable extends BaseWidgetDrawable {
+    @NonNull private final Paint mBackgroundPaint;
+    @NonNull private final Paint mProgressPaint;
+
+    private int mDuration;
+    private int mSkipOffset;
+    private int mCurrentProgress;
+    private int mLastProgress;
+    private float mSkipRatio;
+    private final int mNuggetWidth;
+
+    public ProgressBarDrawable(@NonNull final Context context) {
+        super();
+
+        mBackgroundPaint = new Paint();
+        mBackgroundPaint.setColor(DrawableConstants.ProgressBar.BACKGROUND_COLOR);
+        mBackgroundPaint.setAlpha(DrawableConstants.ProgressBar.BACKGROUND_ALPHA);
+        mBackgroundPaint.setStyle(DrawableConstants.ProgressBar.BACKGROUND_STYLE);
+        mBackgroundPaint.setAntiAlias(true);
+
+        mProgressPaint = new Paint();
+        mProgressPaint.setColor(DrawableConstants.ProgressBar.PROGRESS_COLOR);
+        mProgressPaint.setAlpha(DrawableConstants.ProgressBar.PROGRESS_ALPHA);
+        mProgressPaint.setStyle(DrawableConstants.ProgressBar.PROGRESS_STYLE);
+        mProgressPaint.setAntiAlias(true);
+
+        mNuggetWidth = Dips.dipsToIntPixels(DrawableConstants.ProgressBar.NUGGET_WIDTH_DIPS, context);
+    }
+
+    @Override
+    public void draw(final Canvas canvas) {
+        // Background translucent bar
+        canvas.drawRect(getBounds(), mBackgroundPaint);
+
+        // Progress bar
+        float progressRatio = (float) mCurrentProgress / mDuration;
+        canvas.drawRect(getBounds().left,
+                getBounds().top,
+                getBounds().right * progressRatio,
+                getBounds().bottom,
+                mProgressPaint);
+
+        // Draw skipoffset nugget if skipoffset is in range (0, duration)
+        if (mSkipOffset > 0 && mSkipOffset < mDuration) {
+            float nuggetPosition = getBounds().right * mSkipRatio;
+
+            canvas.drawRect(nuggetPosition,
+                    getBounds().top,
+                    nuggetPosition + mNuggetWidth,
+                    getBounds().bottom,
+                    mProgressPaint);
+        }
+    }
+
+    public void setDurationAndSkipOffset(final int duration, final int skipOffset) {
+        mDuration = duration;
+        mSkipOffset = skipOffset;
+        mSkipRatio = (float) mSkipOffset / mDuration;
+    }
+
+    public void setProgress(final int currentProgress) {
+        // There exists two Android video player bugs in VideoView.getCurrentPosition():
+        // 1) It temporarily returns 0 right after backgrounding and switching back to the app.
+        // 2) Near the end of the video, it never reaches duration and actually returns decreasing values.
+        //
+        // Therefore, we incorporate two checks to get around the bugs and potential visual glitches:
+        // 1) Check against the last known current position to ensure that it's monotonically increasing.
+        // 2) If not monotonically increasing, we only force completion and draw the entire progress
+        // bar when the current position is not 0, i.e. not right after backgrounding.
+
+        if (currentProgress >= mLastProgress) {
+            mCurrentProgress = currentProgress;
+            mLastProgress = currentProgress;
+        } else if (currentProgress != 0) {
+            MoPubLog.d(String.format("Progress not monotonically increasing: last = %d, current = %d",
+                    mLastProgress,
+                    currentProgress));
+            forceCompletion();
+        }
+
+        invalidateSelf();
+    }
+
+    @VisibleForTesting
+    public void forceCompletion() {
+        mCurrentProgress = mDuration;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    public float getSkipRatio() {
+        return mSkipRatio;
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    public int getCurrentProgress() {
+        return mCurrentProgress;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/RadialCountdownDrawable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/RadialCountdownDrawable.java
new file mode 100644
index 00000000..318a6834
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/RadialCountdownDrawable.java
@@ -0,0 +1,88 @@
+package com.mopub.mobileads.resource;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.support.annotation.NonNull;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Numbers;
+
+public class RadialCountdownDrawable extends BaseWidgetDrawable {
+    @NonNull private final Paint mCirclePaint;
+    @NonNull private final Paint mArcPaint;
+    @NonNull private final Paint mTextPaint;
+    @NonNull private Rect mTextRect;
+
+    private int mInitialCountdownMilliseconds;
+    private int mSecondsRemaining;
+    private float mSweepAngle;
+
+    public RadialCountdownDrawable(@NonNull final Context context) {
+        final int circleStrokeWidth = Dips.dipsToIntPixels(
+                DrawableConstants.RadialCountdown.CIRCLE_STROKE_WIDTH_DIPS, context);
+        final float textSizePixels = Dips.dipsToFloatPixels(
+                DrawableConstants.RadialCountdown.TEXT_SIZE_SP, context);
+
+        // Unfilled progress
+        mCirclePaint = new Paint();
+        mCirclePaint.setColor(DrawableConstants.RadialCountdown.BACKGROUND_COLOR);
+        mCirclePaint.setAlpha(DrawableConstants.RadialCountdown.BACKGROUND_ALPHA);
+        mCirclePaint.setStyle(DrawableConstants.RadialCountdown.BACKGROUND_STYLE);
+        mCirclePaint.setStrokeWidth(circleStrokeWidth);
+        mCirclePaint.setAntiAlias(true);
+
+        // Filled progress
+        mArcPaint = new Paint();
+        mArcPaint.setColor(DrawableConstants.RadialCountdown.PROGRESS_COLOR);
+        mArcPaint.setAlpha(DrawableConstants.RadialCountdown.PROGRESS_ALPHA);
+        mArcPaint.setStyle(DrawableConstants.RadialCountdown.PROGRESS_STYLE);
+        mArcPaint.setStrokeWidth(circleStrokeWidth);
+        mArcPaint.setAntiAlias(true);
+
+        // Countdown number text
+        mTextPaint = new Paint();
+        mTextPaint.setColor(DrawableConstants.RadialCountdown.TEXT_COLOR);
+        mTextPaint.setTextAlign(DrawableConstants.RadialCountdown.TEXT_ALIGN);
+        mTextPaint.setTextSize(textSizePixels);
+        mTextPaint.setAntiAlias(true);
+
+        mTextRect = new Rect();
+    }
+
+    @Override
+    public void draw(final Canvas canvas) {
+        final int centerX = getBounds().centerX();
+        final int centerY = getBounds().centerY();
+        final int radius = Math.min(centerX, centerY);
+
+        canvas.drawCircle(centerX, centerY, radius, mCirclePaint);
+
+        final String secondsRemainingText = String.valueOf(mSecondsRemaining);
+        drawTextWithinBounds(canvas, mTextPaint, mTextRect, secondsRemainingText);
+
+        final RectF circle = new RectF(getBounds());
+        canvas.drawArc(circle, DrawableConstants.RadialCountdown.START_ANGLE, mSweepAngle, false, mArcPaint);
+    }
+
+    public void setInitialCountdown(final int initialCountdownMilliseconds) {
+        mInitialCountdownMilliseconds = initialCountdownMilliseconds;
+    }
+
+    public void updateCountdownProgress(final int currentProgressMilliseconds) {
+        int remainingCountdownMilliseconds = mInitialCountdownMilliseconds - currentProgressMilliseconds;
+        mSecondsRemaining = (int) Numbers.convertMillisecondsToSecondsRoundedUp(remainingCountdownMilliseconds);
+        mSweepAngle = 360f * currentProgressMilliseconds / mInitialCountdownMilliseconds;
+        invalidateSelf();
+    }
+
+    // for testing
+    @Deprecated
+    @VisibleForTesting
+    public int getInitialCountdownMilliseconds() {
+        return mInitialCountdownMilliseconds;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/TextDrawable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/TextDrawable.java
deleted file mode 100644
index 46b60a4c..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/TextDrawable.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package com.mopub.mobileads.resource;
-
-public interface TextDrawable {
-    public void updateText(final String text);
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/XmlUtils.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/XmlUtils.java
similarity index 79%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/XmlUtils.java
rename to mopub-sdk/src/main/java/com/mopub/mobileads/util/XmlUtils.java
index 9a69d13d..d5c8d3b5 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/XmlUtils.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/XmlUtils.java
@@ -1,4 +1,4 @@
-package com.mopub.mobileads.util.vast;
+package com.mopub.mobileads.util;
 
 import org.w3c.dom.Document;
 import org.w3c.dom.NamedNodeMap;
@@ -9,7 +9,7 @@
 import java.util.Arrays;
 import java.util.List;
 
-class XmlUtils {
+public class XmlUtils {
     private XmlUtils() {}
 
     /**
@@ -17,7 +17,7 @@ private XmlUtils() {}
      *
      * Only direct children are checked.
      */
-    static Node getFirstMatchingChildNode(final Node node, final String nodeName) {
+    public static Node getFirstMatchingChildNode(final Node node, final String nodeName) {
         return getFirstMatchingChildNode(node, nodeName, null, null);
     }
 
@@ -34,7 +34,7 @@ static Node getFirstMatchingChildNode(final Node node, final String nodeName) {
      *                        matches one of these values. Use null to match nodes with any attribute
      *                        value.
      */
-    static Node getFirstMatchingChildNode(final Node node, final String nodeName,
+    public static Node getFirstMatchingChildNode(final Node node, final String nodeName,
             final String attributeName, final List<String> attributeValues) {
         if (node == null || nodeName == null) {
             return null;
@@ -47,6 +47,17 @@ static Node getFirstMatchingChildNode(final Node node, final String nodeName,
         return null;
     }
 
+    /**
+     * Return children of the {@code node} parameter with a matching {@code nodeName}.
+     *
+     * @param node the root node to look beneath.
+     * @param nodeName all child nodes will match this element.
+     * @return child nodes that match the nodeName
+     */
+    public static List<Node> getMatchingChildNodes(final Node node, final String nodeName) {
+        return getMatchingChildNodes(node, nodeName, null, null);
+    }
+
     /**
      * Return children of the {@code node} parameter with a matching {@code nodeName} &
      * {@code attributeName} that matches at least one of the passed-in {@code attributeValues}.
@@ -60,7 +71,7 @@ static Node getFirstMatchingChildNode(final Node node, final String nodeName,
      *                        matches one of these values.
      * @return child nodes that match all parameters
      */
-    static List<Node> getMatchingChildNodes(final Node node, final String nodeName,
+    public static List<Node> getMatchingChildNodes(final Node node, final String nodeName,
             final String attributeName, final List<String> attributeValues) {
         if (node == null || nodeName == null) {
             return null;
@@ -82,7 +93,7 @@ static Node getFirstMatchingChildNode(final Node node, final String nodeName,
      * Returns {@code true} iff the node has the attribute {@code attributeName} with a value that
      * matches one of {@code attributeValues}.
      */
-    static boolean nodeMatchesAttributeFilter(final Node node, final String attributeName, final List<String> attributeValues) {
+    public static boolean nodeMatchesAttributeFilter(final Node node, final String attributeName, final List<String> attributeValues) {
         if (attributeName == null || attributeValues == null) {
             return true;
         }
@@ -98,7 +109,7 @@ static boolean nodeMatchesAttributeFilter(final Node node, final String attribut
         return false;
     }
 
-    static String getNodeValue(final Node node) {
+    public static String getNodeValue(final Node node) {
         if (node != null
                 && node.getFirstChild() != null
                 && node.getFirstChild().getNodeValue() != null) {
@@ -107,7 +118,7 @@ static String getNodeValue(final Node node) {
         return null;
     }
 
-    static Integer getAttributeValueAsInt(final Node node, final String attributeName) {
+    public static Integer getAttributeValueAsInt(final Node node, final String attributeName) {
         if (node == null || attributeName == null) {
             return null;
         }
@@ -119,13 +130,17 @@ static Integer getAttributeValueAsInt(final Node node, final String attributeNam
         }
     }
 
-    static String getAttributeValue(final Node node, final String attributeName) {
+    public static String getAttributeValue(final Node node, final String attributeName) {
         if (node == null || attributeName == null) {
             return null;
         }
 
         final NamedNodeMap attrMap = node.getAttributes();
         final Node attrNode = attrMap.getNamedItem(attributeName);
+
+        // XXX: the attribute value must be retrieved using attrNode.getNodeValue(). Even though
+        // getNodeValue(attrNode) works in unit testing, it does not work in production. We were
+        // unable to figure out exactly why.
         if (attrNode != null) {
             return attrNode.getNodeValue();
         }
@@ -145,7 +160,7 @@ static String getAttributeValue(final Node node, final String attributeName) {
      * @param nodeProcessor Takes matching nodes and produces output data for that node.
      * @return a {@code List<T>} with processed node data.
      */
-    static <T> List<T> getListFromDocument(final Document vastDoc, final String elementName,
+    public static <T> List<T> getListFromDocument(final Document vastDoc, final String elementName,
             final String attributeName, final String attributeValue, NodeProcessor<T> nodeProcessor) {
         final ArrayList<T> results = new ArrayList<T>();
 
@@ -187,7 +202,7 @@ static String getAttributeValue(final Node node, final String attributeName) {
      * @param nodeProcessor Takes matching nodes and produces output data for that node.
      * @return node data of type {@code <T>} from first node that matches.
      */
-    static <T> T getFirstMatchFromDocument(final Document vastDoc, final String elementName,
+    public static <T> T getFirstMatchFromDocument(final Document vastDoc, final String elementName,
             final String attributeName, final String attributeValue, NodeProcessor<T> nodeProcessor) {
         if (vastDoc == null) {
             return null;
@@ -214,11 +229,11 @@ static String getAttributeValue(final Node node, final String attributeName) {
         return null;
     }
 
-    static String getFirstMatchingStringData(final Document vastDoc, final String elementName) {
+    public static String getFirstMatchingStringData(final Document vastDoc, final String elementName) {
         return getFirstMatchingStringData(vastDoc, elementName, null, null);
     }
 
-    static String getFirstMatchingStringData(final Document vastDoc, final String elementName, final String attributeName, final String attributeValue) {
+    public static String getFirstMatchingStringData(final Document vastDoc, final String elementName, final String attributeName, final String attributeValue) {
         return getFirstMatchFromDocument(vastDoc, elementName, attributeName, attributeValue, new NodeProcessor<String>() {
             @Override
             public String process(final Node node) {
@@ -227,11 +242,11 @@ public String process(final Node node) {
         });
     }
 
-    static List<String> getStringDataAsList(final Document vastDoc, final String elementName) {
+    public static List<String> getStringDataAsList(final Document vastDoc, final String elementName) {
         return getStringDataAsList(vastDoc, elementName, null, null);
     }
 
-    static List<String> getStringDataAsList(final Document vastDoc, final String elementName, final String attributeName, final String attributeValue) {
+    public static List<String> getStringDataAsList(final Document vastDoc, final String elementName, final String attributeName, final String attributeValue) {
         return getListFromDocument(vastDoc, elementName, attributeName, attributeValue, new NodeProcessor<String>() {
             @Override
             public String process(final Node node) {
@@ -240,7 +255,7 @@ public String process(final Node node) {
         });
     }
 
-    static List<Node> getNodesWithElementAndAttribute(final Document vastDoc, final String elementName, final String attributeName, final String attributeValue) {
+    public static List<Node> getNodesWithElementAndAttribute(final Document vastDoc, final String elementName, final String attributeName, final String attributeValue) {
        return getListFromDocument(vastDoc, elementName, attributeName, attributeValue, new NodeProcessor<Node>() {
            @Override
            public Node process(final Node node) {
@@ -250,6 +265,6 @@ public Node process(final Node node) {
     }
 
     public interface NodeProcessor<T> {
-        public T process(Node node);
+        T process(Node node);
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastCompanionAd.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastCompanionAd.java
deleted file mode 100644
index 55609e52..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastCompanionAd.java
+++ /dev/null
@@ -1,48 +0,0 @@
-package com.mopub.mobileads.util.vast;
-
-import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.List;
-
-public class VastCompanionAd implements Serializable {
-    private static final long serialVersionUID = 0L;
-
-    private final Integer mWidth;
-    private final Integer mHeight;
-    private final String mImageUrl;
-    private final String mClickThroughUrl;
-    private final ArrayList<String> mClickTrackers;
-
-    public VastCompanionAd(
-            Integer width,
-            Integer height,
-            String imageUrl,
-            String clickThroughUrl,
-            ArrayList<String> clickTrackers) {
-        mWidth = width;
-        mHeight = height;
-        mImageUrl = imageUrl;
-        mClickThroughUrl = clickThroughUrl;
-        mClickTrackers = clickTrackers;
-    }
-
-    public Integer getWidth() {
-        return mWidth;
-    }
-
-    public Integer getHeight() {
-        return mHeight;
-    }
-
-    public String getImageUrl() {
-        return mImageUrl;
-    }
-
-    public String getClickThroughUrl() {
-        return mClickThroughUrl;
-    }
-
-    public List<String> getClickTrackers() {
-        return mClickTrackers;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java
deleted file mode 100644
index c396547f..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java
+++ /dev/null
@@ -1,262 +0,0 @@
-package com.mopub.mobileads.util.vast;
-
-import android.content.Context;
-import android.view.Display;
-import android.view.WindowManager;
-
-import com.mopub.common.CacheService;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.AsyncTasks;
-import com.mopub.mobileads.VastVideoDownloadTask;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.List;
-
-import static com.mopub.mobileads.VastVideoDownloadTask.VastVideoDownloadTaskListener;
-import static com.mopub.mobileads.util.vast.VastXmlManagerAggregator.VastXmlManagerAggregatorListener;
-
-public class VastManager implements VastXmlManagerAggregatorListener {
-    public interface VastManagerListener {
-        public void onVastVideoConfigurationPrepared(final VastVideoConfiguration vastVideoConfiguration);
-    }
-
-    private static final double ASPECT_RATIO_WEIGHT = 40;
-    private static final double AREA_WEIGHT = 60;
-    private static final List<String> VIDEO_MIME_TYPES =
-            Arrays.asList("video/mp4", "video/3gpp");
-    private static final List<String> COMPANION_IMAGE_MIME_TYPES =
-            Arrays.asList("image/jpeg", "image/png", "image/bmp", "image/gif");
-
-    private VastManagerListener mVastManagerListener;
-
-    private VastXmlManagerAggregator mVastXmlManagerAggregator;
-    private double mScreenAspectRatio;
-    private int mScreenArea;
-
-    public VastManager(final Context context) {
-        initializeScreenDimensions(context);
-    }
-
-    public void prepareVastVideoConfiguration(final String vastXml, final VastManagerListener vastManagerListener) {
-        if (mVastXmlManagerAggregator == null) {
-            mVastManagerListener = vastManagerListener;
-            mVastXmlManagerAggregator = new VastXmlManagerAggregator(this);
-
-            try {
-                AsyncTasks.safeExecuteOnExecutor(mVastXmlManagerAggregator, vastXml);
-            } catch (Exception e) {
-                MoPubLog.d("Failed to aggregate vast xml", e);
-                mVastManagerListener.onVastVideoConfigurationPrepared(null);
-            }
-        }
-    }
-
-    public void cancel() {
-        if (mVastXmlManagerAggregator != null) {
-            mVastXmlManagerAggregator.cancel(true);
-            mVastXmlManagerAggregator = null;
-        }
-    }
-
-    @Override
-    public void onAggregationComplete(final List<VastXmlManager> vastXmlManagers) {
-        mVastXmlManagerAggregator = null;
-        if (vastXmlManagers == null) {
-            mVastManagerListener.onVastVideoConfigurationPrepared(null);
-            return;
-        }
-
-        final VastVideoConfiguration vastVideoConfiguration =
-                createVastVideoConfigurationFromXml(vastXmlManagers);
-
-        if (updateDiskMediaFileUrl(vastVideoConfiguration)) {
-            mVastManagerListener.onVastVideoConfigurationPrepared(vastVideoConfiguration);
-            return;
-        }
-
-        final VastVideoDownloadTask vastVideoDownloadTask = new VastVideoDownloadTask(
-                new VastVideoDownloadTaskListener() {
-                    @Override
-                    public void onComplete(boolean success) {
-                        if (success && updateDiskMediaFileUrl(vastVideoConfiguration)) {
-                            mVastManagerListener.onVastVideoConfigurationPrepared(vastVideoConfiguration);
-                        } else {
-                            mVastManagerListener.onVastVideoConfigurationPrepared(null);
-                        }
-                    }
-                }
-        );
-
-        try {
-            AsyncTasks.safeExecuteOnExecutor(
-                    vastVideoDownloadTask,
-                    vastVideoConfiguration.getNetworkMediaFileUrl()
-            );
-        } catch (Exception e) {
-            MoPubLog.d("Failed to download vast video", e);
-            mVastManagerListener.onVastVideoConfigurationPrepared(null);
-        }
-    }
-
-    private boolean updateDiskMediaFileUrl(final VastVideoConfiguration vastVideoConfiguration) {
-        final String networkMediaFileUrl = vastVideoConfiguration.getNetworkMediaFileUrl();
-        if (CacheService.containsKeyDiskCache(networkMediaFileUrl)) {
-            final String filePathDiskCache = CacheService.getFilePathDiskCache(networkMediaFileUrl);
-            vastVideoConfiguration.setDiskMediaFileUrl(filePathDiskCache);
-            return true;
-        }
-        return false;
-    }
-
-    private void initializeScreenDimensions(final Context context) {
-        // This currently assumes that all vast videos will be played in landscape
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        int x = display.getWidth();
-        int y = display.getHeight();
-
-        // For landscape, width is always greater than height
-        int screenWidth = Math.max(x, y);
-        int screenHeight = Math.min(x, y);
-        mScreenAspectRatio = (double) screenWidth / screenHeight;
-        mScreenArea = screenWidth * screenHeight;
-    }
-
-    private VastVideoConfiguration createVastVideoConfigurationFromXml(final List<VastXmlManager> xmlManagers) {
-        final VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-
-        final List<VastXmlManager.MediaXmlManager> mediaXmlManagers = new ArrayList<VastXmlManager.MediaXmlManager>();
-        final List<VastXmlManager.ImageCompanionAdXmlManager> companionXmlManagers = new ArrayList<VastXmlManager.ImageCompanionAdXmlManager>();
-        for (VastXmlManager xmlManager : xmlManagers) {
-            vastVideoConfiguration.addImpressionTrackers(xmlManager.getImpressionTrackers());
-            vastVideoConfiguration.addAbsoluteTrackers(xmlManager.getAbsoluteProgressTrackers());
-            vastVideoConfiguration.addFractionalTrackers(xmlManager.getFractionalProgressTrackers());
-            vastVideoConfiguration.addCompleteTrackers(xmlManager.getVideoCompleteTrackers());
-            vastVideoConfiguration.addCloseTrackers(xmlManager.getVideoCloseTrackers());
-            vastVideoConfiguration.addSkipTrackers(xmlManager.getVideoSkipTrackers());
-
-            vastVideoConfiguration.addClickTrackers(xmlManager.getClickTrackers());
-
-            if (vastVideoConfiguration.getClickThroughUrl() == null) {
-                vastVideoConfiguration.setClickThroughUrl(xmlManager.getClickThroughUrl());
-            }
-
-            mediaXmlManagers.addAll(xmlManager.getMediaXmlManagers());
-            companionXmlManagers.addAll(xmlManager.getCompanionAdXmlManagers());
-
-            // Load custom extensions
-            vastVideoConfiguration.setCustomCtaText(xmlManager.getCustomCtaText());
-            vastVideoConfiguration.setCustomSkipText(xmlManager.getCustomSkipText());
-            vastVideoConfiguration.setCustomCloseIconUrl(xmlManager.getCustomCloseIconUrl());
-            vastVideoConfiguration.setCustomForceOrientation(xmlManager.getCustomForceOrientation());
-            vastVideoConfiguration.setSkipOffset(xmlManager.getSkipOffset());
-        }
-
-        vastVideoConfiguration.setNetworkMediaFileUrl(getBestMediaFileUrl(mediaXmlManagers));
-        vastVideoConfiguration.setVastCompanionAd(getBestCompanionAd(companionXmlManagers));
-
-        return vastVideoConfiguration;
-    }
-
-    String getBestMediaFileUrl(final List<VastXmlManager.MediaXmlManager> managers) {
-        final List<VastXmlManager.MediaXmlManager> mediaXmlManagers = new ArrayList<VastXmlManager.MediaXmlManager>(managers);
-        double bestMediaFitness = Double.POSITIVE_INFINITY;
-        String bestMediaFileUrl = null;
-
-        final Iterator<VastXmlManager.MediaXmlManager> xmlManagerIterator = mediaXmlManagers.iterator();
-        while (xmlManagerIterator.hasNext()) {
-            final VastXmlManager.MediaXmlManager mediaXmlManager = xmlManagerIterator.next();
-
-            final String mediaType = mediaXmlManager.getType();
-            final String mediaUrl = mediaXmlManager.getMediaUrl();
-            if (!VIDEO_MIME_TYPES.contains(mediaType) || mediaUrl == null) {
-                xmlManagerIterator.remove();
-                continue;
-            }
-
-            final Integer mediaWidth = mediaXmlManager.getWidth();
-            final Integer mediaHeight = mediaXmlManager.getHeight();
-            if (mediaWidth == null || mediaWidth <= 0 || mediaHeight == null || mediaHeight <= 0) {
-                continue;
-            }
-
-            final double mediaFitness = calculateFitness(mediaWidth, mediaHeight);
-            if (mediaFitness < bestMediaFitness) {
-                bestMediaFitness = mediaFitness;
-                bestMediaFileUrl = mediaUrl;
-            }
-        }
-
-        if (bestMediaFileUrl == null && !mediaXmlManagers.isEmpty()) {
-            bestMediaFileUrl = mediaXmlManagers.get(0).getMediaUrl();
-        }
-
-        return bestMediaFileUrl;
-    }
-
-    VastCompanionAd getBestCompanionAd(final List<VastXmlManager.ImageCompanionAdXmlManager> managers) {
-        final List<VastXmlManager.ImageCompanionAdXmlManager> companionXmlManagers =
-                new ArrayList<VastXmlManager.ImageCompanionAdXmlManager>(managers);
-        double bestCompanionFitness = Double.POSITIVE_INFINITY;
-        VastXmlManager.ImageCompanionAdXmlManager bestCompanionXmlManager = null;
-
-        final Iterator<VastXmlManager.ImageCompanionAdXmlManager> xmlManagerIterator = companionXmlManagers.iterator();
-        while (xmlManagerIterator.hasNext()) {
-            final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = xmlManagerIterator.next();
-
-            final String imageType = companionXmlManager.getType();
-            final String imageUrl = companionXmlManager.getImageUrl();
-            if (!COMPANION_IMAGE_MIME_TYPES.contains(imageType) || imageUrl == null) {
-                xmlManagerIterator.remove();
-                continue;
-            }
-
-            final Integer imageWidth = companionXmlManager.getWidth();
-            final Integer imageHeight = companionXmlManager.getHeight();
-            if (imageWidth == null || imageWidth <= 0 || imageHeight == null || imageHeight <= 0) {
-                continue;
-            }
-
-            final double companionFitness = calculateFitness(imageWidth, imageHeight);
-            if (companionFitness < bestCompanionFitness) {
-                bestCompanionFitness = companionFitness;
-                bestCompanionXmlManager = companionXmlManager;
-            }
-        }
-
-        if (bestCompanionXmlManager == null && !companionXmlManagers.isEmpty()) {
-            bestCompanionXmlManager = companionXmlManagers.get(0);
-        }
-
-        if (bestCompanionXmlManager != null) {
-            return new VastCompanionAd(
-                    bestCompanionXmlManager.getWidth(),
-                    bestCompanionXmlManager.getHeight(),
-                    bestCompanionXmlManager.getImageUrl(),
-                    bestCompanionXmlManager.getClickThroughUrl(),
-                    new ArrayList<String>(bestCompanionXmlManager.getClickTrackers())
-            );
-        }
-        return null;
-    }
-
-    private double calculateFitness(final int width, final int height) {
-        final double mediaAspectRatio = (double) width / height;
-        final int mediaArea = width * height;
-        final double aspectRatioRatio = mediaAspectRatio / mScreenAspectRatio;
-        final double areaRatio = (double) mediaArea / mScreenArea;
-        return ASPECT_RATIO_WEIGHT * Math.abs(Math.log(aspectRatioRatio))
-                + AREA_WEIGHT * Math.abs(Math.log(areaRatio));
-    }
-
-    @Deprecated // for testing
-    int getScreenArea() {
-        return mScreenArea;
-    }
-
-    @Deprecated // for testing
-    double getScreenAspectRatio() {
-        return mScreenAspectRatio;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastVideoConfiguration.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastVideoConfiguration.java
deleted file mode 100644
index ef638cd9..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastVideoConfiguration.java
+++ /dev/null
@@ -1,204 +0,0 @@
-package com.mopub.mobileads.util.vast;
-
-import android.support.annotation.Nullable;
-
-import com.mopub.common.util.DeviceUtils;
-import com.mopub.mobileads.VastAbsoluteProgressTracker;
-import com.mopub.mobileads.VastFractionalProgressTracker;
-
-import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
-public class VastVideoConfiguration implements Serializable {
-    private static final long serialVersionUID = 1L;
-
-    private final ArrayList<String> mImpressionTrackers;
-    private final ArrayList<VastFractionalProgressTracker> mFractionalTrackers;
-    private final ArrayList<VastAbsoluteProgressTracker> mAbsoluteTrackers;
-    private final ArrayList<String> mCompleteTrackers;
-    private final ArrayList<String> mCloseTrackers;
-    private final ArrayList<String> mSkipTrackers;
-    private final ArrayList<String> mClickTrackers;
-    private String mClickThroughUrl;
-    private String mNetworkMediaFileUrl;
-    private String mDiskMediaFileUrl;
-    private String mSkipOffset;
-    private VastCompanionAd mVastCompanionAd;
-
-    // Custom extensions
-    private String mCustomCtaText;
-    private String mCustomSkipText;
-    private String mCustomCloseIconUrl;
-    private DeviceUtils.ForceOrientation mCustomForceOrientation = DeviceUtils.ForceOrientation.FORCE_LANDSCAPE; // Default is forcing landscape
-
-    public VastVideoConfiguration() {
-        mImpressionTrackers = new ArrayList<String>();
-        mFractionalTrackers = new ArrayList<VastFractionalProgressTracker>();
-        mAbsoluteTrackers = new ArrayList<VastAbsoluteProgressTracker>();
-        mCompleteTrackers = new ArrayList<String>();
-        mCloseTrackers = new ArrayList<String>();
-        mSkipTrackers = new ArrayList<String>();
-        mClickTrackers = new ArrayList<String>();
-    }
-
-    /**
-     * Setters
-     */
-
-    public void addImpressionTrackers(final List<String> impressionTrackers) {
-        mImpressionTrackers.addAll(impressionTrackers);
-    }
-
-    /**
-     * Add trackers for percentage-based tracking. This includes all quartile trackers and any
-     * "progress" events with other percentages.
-     */
-    public void addFractionalTrackers(final List<VastFractionalProgressTracker> fractionalTrackers) {
-        mFractionalTrackers.addAll(fractionalTrackers);
-        Collections.sort(mFractionalTrackers);
-    }
-
-    /**
-     * Add trackers for absolute tracking. This includes start trackers, which have an absolute threshold of 2 seconds.
-     */
-    public void addAbsoluteTrackers(final List<VastAbsoluteProgressTracker> absoluteTrackers) {
-        mAbsoluteTrackers.addAll(absoluteTrackers);
-        Collections.sort(mAbsoluteTrackers);
-    }
-
-    public void addCompleteTrackers(final List<String> completeTrackers) {
-        mCompleteTrackers.addAll(completeTrackers);
-    }
-
-    public void addCloseTrackers(final List<String> closeTrackers) {
-        mCloseTrackers.addAll(closeTrackers);
-    }
-
-    public void addSkipTrackers(final List<String> skipTrackers) {
-        mSkipTrackers.addAll(skipTrackers);
-    }
-
-    public void addClickTrackers(final List<String> clickTrackers) {
-        mClickTrackers.addAll(clickTrackers);
-    }
-
-    public void setClickThroughUrl(final String clickThroughUrl) {
-        mClickThroughUrl = clickThroughUrl;
-    }
-
-    public void setNetworkMediaFileUrl(final String networkMediaFileUrl) {
-        mNetworkMediaFileUrl = networkMediaFileUrl;
-    }
-
-    public void setDiskMediaFileUrl(final String diskMediaFileUrl) {
-        mDiskMediaFileUrl = diskMediaFileUrl;
-    }
-
-    public void setVastCompanionAd(final VastCompanionAd vastCompanionAd) {
-        mVastCompanionAd = vastCompanionAd;
-    }
-
-    public void setCustomCtaText(@Nullable final String customCtaText) {
-        if (customCtaText != null) {
-            mCustomCtaText = customCtaText;
-        }
-    }
-
-    public void setCustomSkipText(@Nullable final String customSkipText) {
-        if (customSkipText != null) {
-            mCustomSkipText = customSkipText;
-        }
-    }
-
-    public void setCustomCloseIconUrl(@Nullable final String customCloseIconUrl) {
-        if (customCloseIconUrl != null) {
-            mCustomCloseIconUrl = customCloseIconUrl;
-        }
-    }
-
-    public void setCustomForceOrientation(@Nullable final DeviceUtils.ForceOrientation customForceOrientation) {
-        if (customForceOrientation != null && customForceOrientation != DeviceUtils.ForceOrientation.UNDEFINED) {
-            mCustomForceOrientation = customForceOrientation;
-        }
-    }
-
-    public void setSkipOffset(@Nullable final String skipOffset) {
-        if (skipOffset != null) {
-            mSkipOffset = skipOffset;
-        }
-    }
-
-    /**
-     * Getters
-     */
-
-    public List<String> getImpressionTrackers() {
-        return mImpressionTrackers;
-    }
-
-    public ArrayList<VastAbsoluteProgressTracker> getAbsoluteTrackers() {
-        return mAbsoluteTrackers;
-    }
-
-    public ArrayList<VastFractionalProgressTracker> getFractionalTrackers() {
-        return mFractionalTrackers;
-    }
-
-    public List<String> getCompleteTrackers() {
-        return mCompleteTrackers;
-    }
-
-    public List<String> getCloseTrackers() {
-        return mCloseTrackers;
-    }
-
-    public List<String> getSkipTrackers() {
-        return mSkipTrackers;
-    }
-
-    public List<String> getClickTrackers() {
-        return mClickTrackers;
-    }
-
-    public String getClickThroughUrl() {
-        return mClickThroughUrl;
-    }
-
-    public String getNetworkMediaFileUrl() {
-        return mNetworkMediaFileUrl;
-    }
-
-    public String getDiskMediaFileUrl() {
-        return mDiskMediaFileUrl;
-    }
-
-    public VastCompanionAd getVastCompanionAd() {
-        return mVastCompanionAd;
-    }
-
-    public String getCustomCtaText() {
-        return mCustomCtaText;
-    }
-
-    public String getCustomSkipText() {
-        return mCustomSkipText;
-    }
-
-    public String getCustomCloseIconUrl() {
-        return mCustomCloseIconUrl;
-    }
-
-    /**
-     * Get custom force orientation
-     * @return ForceOrientation enum (default is FORCE_LANDSCAPE)
-     */
-    public DeviceUtils.ForceOrientation getCustomForceOrientation() {
-        return mCustomForceOrientation;
-    }
-
-    public String getSkipOffset() {
-        return mSkipOffset;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManager.java
deleted file mode 100644
index 299288ed..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManager.java
+++ /dev/null
@@ -1,418 +0,0 @@
-package com.mopub.mobileads.util.vast;
-
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.DeviceUtils.ForceOrientation;
-import com.mopub.common.util.Strings;
-import com.mopub.mobileads.VastAbsoluteProgressTracker;
-import com.mopub.mobileads.VastFractionalProgressTracker;
-
-import org.w3c.dom.Document;
-import org.w3c.dom.Node;
-import org.w3c.dom.NodeList;
-import org.xml.sax.InputSource;
-import org.xml.sax.SAXException;
-
-import java.io.IOException;
-import java.io.StringReader;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
-
-class VastXmlManager {
-    private static final String ROOT_TAG = "MPMoVideoXMLDocRoot";
-    private static final String ROOT_TAG_OPEN = "<" + ROOT_TAG + ">";
-    private static final String ROOT_TAG_CLOSE = "</" + ROOT_TAG + ">";
-
-    // Element names
-    private static final String IMPRESSION_TRACKER = "Impression";
-    private static final String VIDEO_TRACKER = "Tracking";
-    private static final String CLICK_THROUGH = "ClickThrough";
-    private static final String CLICK_TRACKER = "ClickTracking";
-    private static final String MEDIA_FILE = "MediaFile";
-    private static final String VAST_AD_TAG = "VASTAdTagURI";
-    private static final String MP_IMPRESSION_TRACKER = "MP_TRACKING_URL";
-    private static final String COMPANION = "Companion";
-    private static final String LINEAR = "Linear";
-
-    // Custom element names for VAST 3.0 extensions
-    private static final String CUSTOM_CTA_TEXT = "MoPubCtaText";
-    private static final String CUSTOM_SKIP_TEXT = "MoPubSkipText";
-    private static final String CUSTOM_CLOSE_ICON = "MoPubCloseIcon";
-    private static final String CUSTOM_FORCE_ORIENTATION = "MoPubForceOrientation";
-
-    // Attribute names
-    private static final String EVENT = "event";
-    private static final String WIDTH = "width";
-    private static final String HEIGHT = "height";
-    private static final String OFFSET = "offset";
-    private static final String SKIP_OFFSET = "skipoffset";
-
-    // Event Attribute values
-    private static final String START = "start";
-    private static final String FIRST_QUARTILE = "firstQuartile";
-    private static final String MIDPOINT = "midpoint";
-    private static final String THIRD_QUARTILE = "thirdQuartile";
-    private static final String COMPLETE = "complete";
-    private static final String CLOSE = "close";
-    private static final String PROGRESS = "progress";
-    private static final String SKIP = "skip";
-
-    private static final int START_TRACKER_THRESHOLD = 2000;
-    private static final float FIRST_QUARTER_MARKER = 0.25f;
-    private static final float MID_POINT_MARKER = 0.50f;
-    private static final float THIRD_QUARTER_MARKER = 0.75f;
-
-    // constants for custom extensions
-    private static final int MAX_CTA_TEXT_LENGTH = 15;
-    private static final int MAX_SKIP_TEXT_LENGTH = 8;
-
-
-    // This class currently assumes an image type companion ad since that is what we are supporting
-    class ImageCompanionAdXmlManager {
-        // Element name
-        private static final String TRACKING_EVENTS = "TrackingEvents";
-        private static final String COMPANION_STATIC_RESOURCE = "StaticResource";
-        private static final String COMPANION_CLICK_THROUGH = "CompanionClickThrough";
-        // Attribute value
-        private static final String CREATIVE_VIEW = "creativeView";
-        // Attribute name
-        private static final String CREATIVE_TYPE = "creativeType";
-        private final Node mCompanionNode;
-
-        ImageCompanionAdXmlManager(final Node companionNode) throws IllegalArgumentException {
-            if (companionNode == null) {
-                throw new IllegalArgumentException("Companion node cannot be null");
-            }
-            mCompanionNode = companionNode;
-        }
-
-        Integer getWidth() {
-            return XmlUtils.getAttributeValueAsInt(mCompanionNode, WIDTH);
-        }
-
-        Integer getHeight() {
-            return XmlUtils.getAttributeValueAsInt(mCompanionNode, HEIGHT);
-        }
-
-        String getType() {
-            final Node node = XmlUtils.getFirstMatchingChildNode(
-                    mCompanionNode,
-                    COMPANION_STATIC_RESOURCE
-            );
-            return XmlUtils.getAttributeValue(node, CREATIVE_TYPE);
-        }
-
-        String getImageUrl() {
-            final Node node = XmlUtils.getFirstMatchingChildNode(
-                    mCompanionNode,
-                    COMPANION_STATIC_RESOURCE
-            );
-            return XmlUtils.getNodeValue(node);
-        }
-
-        String getClickThroughUrl() {
-            final Node node = XmlUtils.getFirstMatchingChildNode(
-                    mCompanionNode,
-                    COMPANION_CLICK_THROUGH
-            );
-            return XmlUtils.getNodeValue(node);
-        }
-
-        List<String> getClickTrackers() {
-            final List<String> companionAdClickTrackers = new ArrayList<String>();
-            final Node node = XmlUtils.getFirstMatchingChildNode(
-                    mCompanionNode,
-                    TRACKING_EVENTS
-            );
-
-            if (node == null) {
-                return companionAdClickTrackers;
-            }
-
-            final List<Node> trackerNodes = XmlUtils.getMatchingChildNodes(
-                    node,
-                    VIDEO_TRACKER,
-                    EVENT,
-                    Arrays.asList(CREATIVE_VIEW)
-            );
-
-            for (final Node trackerNode : trackerNodes) {
-                if (trackerNode.getFirstChild() != null) {
-                    companionAdClickTrackers.add(trackerNode.getFirstChild().getNodeValue().trim());
-                }
-            }
-
-            return companionAdClickTrackers;
-        }
-    }
-
-    class MediaXmlManager {
-        // Attribute names
-        private static final String DELIVERY = "delivery";
-        private static final String VIDEO_TYPE  = "type";
-        private final Node mMediaNode;
-
-        MediaXmlManager(final Node mediaNode) throws IllegalArgumentException {
-            if (mediaNode == null) {
-                throw new IllegalArgumentException("Media node cannot be null");
-            }
-            mMediaNode = mediaNode;
-        }
-
-        String getDelivery() {
-            return XmlUtils.getAttributeValue(mMediaNode, DELIVERY);
-        }
-
-        Integer getWidth() {
-            return XmlUtils.getAttributeValueAsInt(mMediaNode, WIDTH);
-        }
-
-        Integer getHeight() {
-            return XmlUtils.getAttributeValueAsInt(mMediaNode, HEIGHT);
-        }
-
-        String getType() {
-            return XmlUtils.getAttributeValue(mMediaNode, VIDEO_TYPE);
-        }
-
-        String getMediaUrl() {
-            return XmlUtils.getNodeValue(mMediaNode);
-        }
-    }
-
-    private Document mVastDoc;
-
-    void parseVastXml(String xmlString) throws ParserConfigurationException, IOException, SAXException {
-        // if the xml string starts with <?xml?>, this tag can break parsing if it isn't formatted exactly right
-        // or if it's not the first line of the document...we're just going to strip it
-        xmlString = xmlString.replaceFirst("<\\?.*\\?>", "");
-
-        // adserver may embed additional impression trackers as a sibling node of <VAST>
-        // wrap entire document in root node for this case.
-        String documentString = ROOT_TAG_OPEN + xmlString + ROOT_TAG_CLOSE;
-
-        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
-        documentBuilderFactory.setCoalescing(true);
-        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
-        mVastDoc = documentBuilder.parse(new InputSource(new StringReader(documentString)));
-    }
-
-    String getVastAdTagURI() {
-        List<String> uriWrapper = XmlUtils.getStringDataAsList(mVastDoc, VAST_AD_TAG);
-        return (uriWrapper.size() > 0) ? uriWrapper.get(0) : null;
-    }
-
-    List<String> getImpressionTrackers() {
-        List<String> impressionTrackers = XmlUtils.getStringDataAsList(mVastDoc, IMPRESSION_TRACKER);
-        impressionTrackers.addAll(XmlUtils.getStringDataAsList(mVastDoc, MP_IMPRESSION_TRACKER));
-
-        return impressionTrackers;
-    }
-
-    /**
-     * Return a sorted list of the video's percent-based progress-trackers. These are the
-     * quartile trackers and any "progress" nodes with percent-based offsets.
-     *
-     * Quartile trackers look like:
-     * {@code
-     * <Tracking event="firstQuartile">
-     *     <![CDATA[trackingURL]]>
-     * </Tracking>
-     * }
-     *
-     * Percent-based progress trackers look like:
-     * {@code
-     * <Tracking event="progress" offset="11%">
-     *     <![CDATA[trackingURL]]>
-     * </Tracking>
-     * }
-     */
-    @NonNull
-    List<VastFractionalProgressTracker> getFractionalProgressTrackers() {
-        // Add all the quartile trackers from VAST 2.0:
-        List<VastFractionalProgressTracker> percentTrackers = new ArrayList<VastFractionalProgressTracker>();
-        addQuartileTrackerWithFraction(percentTrackers, getVideoTrackerByAttribute(FIRST_QUARTILE), FIRST_QUARTER_MARKER);
-        addQuartileTrackerWithFraction(percentTrackers, getVideoTrackerByAttribute(MIDPOINT), MID_POINT_MARKER);
-        addQuartileTrackerWithFraction(percentTrackers, getVideoTrackerByAttribute(THIRD_QUARTILE), THIRD_QUARTER_MARKER);
-
-        // Get any other trackers with event="progress" offset="n%"
-        final List<Node> progressNodes = XmlUtils.getNodesWithElementAndAttribute(mVastDoc, VIDEO_TRACKER, EVENT, PROGRESS);
-        for (Node progressNode : progressNodes) {
-            final String offsetString = XmlUtils.getAttributeValue(progressNode, OFFSET).trim();
-            if (Strings.isPercentageTracker(offsetString)) {
-                String trackingUrl = XmlUtils.getNodeValue(progressNode).trim();
-                try {
-                    float trackingFraction = Float.parseFloat(offsetString.replace("%", "")) / 100f;
-                    percentTrackers.add(new VastFractionalProgressTracker(trackingUrl, trackingFraction));
-                } catch (NumberFormatException e) {
-                    MoPubLog.d(String.format("Failed to parse VAST progress tracker %s", offsetString));
-                }
-            }
-        }
-
-        // Sort the list so we can quickly index it in the video progress runnable.
-        Collections.sort(percentTrackers);
-        return percentTrackers;
-    }
-
-    /**
-     * Return a sorted list of the video's absolute progress trackers. This includes start trackers
-     * and any "progress" nodes with absolute offsets.
-     *
-     * Start trackers live in nodes like:
-     * {@code
-     * <Tracking event="start">
-     *     <![CDATA[trackingURL]]>
-     * </Tracking>
-     * }
-     * Absolute progress trackers look like:
-     * {@code
-     * <Tracking event="progress" offset="00:00:10.000">
-     *     <![CDATA[trackingURL]]>
-     * </Tracking>
-     * }
-     */
-    @NonNull
-    List<VastAbsoluteProgressTracker> getAbsoluteProgressTrackers() {
-        List<VastAbsoluteProgressTracker> trackers = new ArrayList<VastAbsoluteProgressTracker>();
-        // Start trackers are treated as absolute trackers with a 2s offset.
-        final List<String> startTrackers = getVideoTrackerByAttribute(START);
-        for (String url : startTrackers) {
-            trackers.add(new VastAbsoluteProgressTracker(url, START_TRACKER_THRESHOLD));
-        }
-
-        // Parse progress trackers and extract the absolute offsets of the form "HH:MM:SS[.mmm]"
-        final List<Node> progressNodes = XmlUtils.getNodesWithElementAndAttribute(mVastDoc, VIDEO_TRACKER, EVENT, PROGRESS);
-        for (Node progressNode : progressNodes) {
-            final String offSetString = XmlUtils.getAttributeValue(progressNode, OFFSET).trim();
-            if (Strings.isAbsoluteTracker(offSetString)) {
-                String trackingUrl = XmlUtils.getNodeValue(progressNode).trim();
-                try {
-                    Integer trackingMilliseconds = Strings.parseAbsoluteOffset(offSetString);
-                    if (trackingMilliseconds != null) {
-                        trackers.add(new VastAbsoluteProgressTracker(trackingUrl, trackingMilliseconds));
-                    }
-                } catch (NumberFormatException e) {
-                    MoPubLog.d(String.format("Failed to parse VAST progress tracker %s", offSetString));
-                }
-            }
-        }
-
-        // Sort the list so we can quickly index it in the video progress runnable.
-        Collections.sort(trackers);
-        return trackers;
-    }
-
-    List<String> getVideoCompleteTrackers() {
-        return getVideoTrackerByAttribute(COMPLETE);
-    }
-
-    List<String> getVideoCloseTrackers() {
-        return getVideoTrackerByAttribute(CLOSE);
-    }
-
-    List<String> getVideoSkipTrackers() {
-        return getVideoTrackerByAttribute(SKIP);
-    }
-
-    String getClickThroughUrl() {
-        return XmlUtils.getFirstMatchingStringData(mVastDoc, CLICK_THROUGH);
-    }
-
-    List<String> getClickTrackers() {
-        return XmlUtils.getStringDataAsList(mVastDoc, CLICK_TRACKER);
-    }
-
-    String getMediaFileUrl() {
-        return XmlUtils.getFirstMatchingStringData(mVastDoc, MEDIA_FILE);
-    }
-
-    @Nullable
-    String getCustomCtaText() {
-        String customCtaText = XmlUtils.getFirstMatchingStringData(mVastDoc, CUSTOM_CTA_TEXT);
-        if (customCtaText != null && customCtaText.length() <= MAX_CTA_TEXT_LENGTH) {
-            return customCtaText;
-        }
-
-        return null;
-    }
-
-    @Nullable
-    String getCustomSkipText() {
-        String customSkipText = XmlUtils.getFirstMatchingStringData(mVastDoc, CUSTOM_SKIP_TEXT);
-        if (customSkipText != null && customSkipText.length() <= MAX_SKIP_TEXT_LENGTH) {
-            return customSkipText;
-        }
-
-        return null;
-    }
-
-    @Nullable
-    String getCustomCloseIconUrl() {
-        return XmlUtils.getFirstMatchingStringData(mVastDoc, CUSTOM_CLOSE_ICON);
-    }
-
-    @NonNull
-    ForceOrientation getCustomForceOrientation() {
-        return ForceOrientation.getForceOrientation(
-                XmlUtils.getFirstMatchingStringData(mVastDoc, CUSTOM_FORCE_ORIENTATION));
-    }
-
-    @Nullable
-    String getSkipOffset() {
-        List<Node> linearNodeWrapper = XmlUtils.getNodesWithElementAndAttribute(mVastDoc, LINEAR, SKIP_OFFSET, null);
-        Node linearNode = (linearNodeWrapper.isEmpty()) ? null : linearNodeWrapper.get(0);
-        if (linearNode == null) {
-            return null;
-        }
-
-        final String skipOffsetString = XmlUtils.getAttributeValue(linearNode, SKIP_OFFSET);
-        if (skipOffsetString == null) {
-            return null;
-        }
-
-        if (skipOffsetString.trim().isEmpty()) {
-            return null;
-        }
-
-        return skipOffsetString.trim();
-    }
-
-    List<MediaXmlManager> getMediaXmlManagers() {
-        final NodeList nodes = mVastDoc.getElementsByTagName(MEDIA_FILE);
-        final List<MediaXmlManager> mediaXmlManagers =
-                new ArrayList<MediaXmlManager>(nodes.getLength());
-        for (int i = 0; i < nodes.getLength(); ++i) {
-            mediaXmlManagers.add(new MediaXmlManager(nodes.item(i)));
-        }
-        return mediaXmlManagers;
-    }
-
-    List<ImageCompanionAdXmlManager> getCompanionAdXmlManagers() {
-        final NodeList nodes = mVastDoc.getElementsByTagName(COMPANION);
-        final List<ImageCompanionAdXmlManager> imageCompanionAdXmlManagers =
-                new ArrayList<ImageCompanionAdXmlManager>(nodes.getLength());
-        for (int i = 0; i < nodes.getLength(); ++i) {
-            imageCompanionAdXmlManagers.add(new ImageCompanionAdXmlManager(nodes.item(i)));
-        }
-        return imageCompanionAdXmlManagers;
-    }
-
-    private List<String> getVideoTrackerByAttribute(final String attributeValue) {
-        return XmlUtils.getStringDataAsList(mVastDoc, VIDEO_TRACKER, EVENT, attributeValue);
-    }
-
-    private void addQuartileTrackerWithFraction(List<VastFractionalProgressTracker> trackers, List<String> urls, float fraction) {
-        for (String url : urls) {
-            trackers.add(new VastFractionalProgressTracker(url, fraction));
-        }
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregator.java
deleted file mode 100644
index 9248a3e8..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregator.java
+++ /dev/null
@@ -1,94 +0,0 @@
-package com.mopub.mobileads.util.vast;
-
-import android.net.http.AndroidHttpClient;
-import android.os.AsyncTask;
-
-import com.mopub.common.HttpClient;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.Strings;
-
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpResponse;
-import org.apache.http.client.methods.HttpGet;
-
-import java.lang.ref.WeakReference;
-import java.util.ArrayList;
-import java.util.List;
-
-public class VastXmlManagerAggregator extends AsyncTask<String, Void, List<VastXmlManager>> {
-    interface VastXmlManagerAggregatorListener {
-        void onAggregationComplete(final List<VastXmlManager> vastXmlManagers);
-    }
-
-    // More than reasonable number of nested VAST urls to follow
-    static final int MAX_TIMES_TO_FOLLOW_VAST_REDIRECT = 20;
-    private final WeakReference<VastXmlManagerAggregatorListener> mVastXmlManagerAggregatorListener;
-    private int mTimesFollowedVastRedirect;
-
-    VastXmlManagerAggregator(final VastXmlManagerAggregatorListener vastXmlManagerAggregatorListener) {
-        super();
-        mVastXmlManagerAggregatorListener =
-                new WeakReference<VastXmlManagerAggregatorListener>(vastXmlManagerAggregatorListener);
-    }
-
-    @Override
-    protected List<VastXmlManager> doInBackground(String... strings) {
-        List<VastXmlManager> vastXmlManagers = null;
-        AndroidHttpClient httpClient = null;
-        try {
-            httpClient = HttpClient.getHttpClient();
-            if (strings != null && strings.length > 0) {
-                String vastXml = strings[0];
-
-                vastXmlManagers = new ArrayList<VastXmlManager>();
-                while (vastXml != null && vastXml.length() > 0 && !isCancelled()) {
-                    final VastXmlManager xmlManager = new VastXmlManager();
-                    xmlManager.parseVastXml(vastXml);
-                    vastXmlManagers.add(xmlManager);
-                    vastXml = followVastRedirect(httpClient, xmlManager.getVastAdTagURI());
-                }
-            }
-        } catch (Exception e) {
-            MoPubLog.d("Failed to parse VAST XML", e);
-        } finally {
-            if (httpClient != null) {
-                httpClient.close();
-            }
-        }
-
-        return vastXmlManagers;
-    }
-
-    @Override
-    protected void onPostExecute(final List<VastXmlManager> vastXmlManagers) {
-        final VastXmlManagerAggregatorListener listener = mVastXmlManagerAggregatorListener.get();
-        if (listener != null) {
-            listener.onAggregationComplete(vastXmlManagers);
-        }
-    }
-
-    @Override
-    protected void onCancelled() {
-        final VastXmlManagerAggregatorListener listener = mVastXmlManagerAggregatorListener.get();
-        if (listener != null) {
-            listener.onAggregationComplete(null);
-        }
-    }
-
-    String followVastRedirect(final AndroidHttpClient httpClient, final String redirectUrl) throws Exception {
-        if (redirectUrl != null && mTimesFollowedVastRedirect < MAX_TIMES_TO_FOLLOW_VAST_REDIRECT) {
-            mTimesFollowedVastRedirect++;
-
-            final HttpGet httpget = HttpClient.initializeHttpGet(redirectUrl);
-            final HttpResponse response = httpClient.execute(httpget);
-            final HttpEntity entity = response.getEntity();
-            return (entity != null) ? Strings.fromStream(entity.getContent()) : null;
-        }
-        return null;
-    }
-
-    @Deprecated
-    void setTimesFollowedVastRedirect(final int timesFollowedVastRedirect) {
-        mTimesFollowedVastRedirect = timesFollowedVastRedirect;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java
index 1430763d..bd907c1a 100644
--- a/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java
@@ -6,6 +6,7 @@
 import android.graphics.Color;
 import android.graphics.Rect;
 import android.net.Uri;
+import android.os.Build;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
@@ -20,6 +21,7 @@
 
 import com.mopub.common.AdReport;
 import com.mopub.common.CloseableLayout.ClosePosition;
+import com.mopub.common.Constants;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.BaseWebView;
@@ -106,6 +108,12 @@ void attachView(@NonNull MraidWebView mraidWebView) {
         mMraidWebView = mraidWebView;
         mMraidWebView.getSettings().setJavaScriptEnabled(true);
 
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            if (mPlacementType == PlacementType.INTERSTITIAL) {
+                mraidWebView.getSettings().setMediaPlaybackRequiresUserGesture(false);
+            }
+        }
+
         mMraidWebView.loadUrl("javascript:" + FILTERED_JAVASCRIPT_SOURCE);
         mMraidWebView.setScrollContainer(false);
         mMraidWebView.setVerticalScrollBarEnabled(false);
@@ -195,7 +203,8 @@ public void setContentHtml(@NonNull String htmlData) {
         }
 
         mHasLoaded = false;
-        mMraidWebView.loadDataWithBaseURL(null, htmlData, "text/html", "UTF-8", null);
+        mMraidWebView.loadDataWithBaseURL("http://" + Constants.HOST + "/",
+                htmlData, "text/html", "UTF-8", null);
     }
 
     public void setContentUrl(String url) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
index cfb4bcf9..c66ceb88 100644
--- a/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
@@ -1042,6 +1042,7 @@ void handleOpen(@NonNull final String url) {
                         UrlAction.OPEN_NATIVE_BROWSER,
                         UrlAction.OPEN_IN_APP_BROWSER,
                         UrlAction.HANDLE_SHARE_TWEET,
+                        UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK,
                         UrlAction.FOLLOW_DEEP_LINK)
                 .build().handleUrl(mContext, url);
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidVideoViewController.java
index ddf7e408..8aea4da9 100644
--- a/mopub-sdk/src/main/java/com/mopub/mraid/MraidVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidVideoViewController.java
@@ -1,9 +1,12 @@
 package com.mopub.mraid;
 
 import android.content.Context;
+import android.content.res.Configuration;
 import android.graphics.drawable.StateListDrawable;
 import android.media.MediaPlayer;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.View;
 import android.widget.ImageButton;
 import android.widget.RelativeLayout;
@@ -28,7 +31,10 @@
     private int mButtonPadding;
     private int mButtonSize;
 
-    public MraidVideoViewController(final Context context, final Bundle bundle, final BaseVideoViewControllerListener baseVideoViewControllerListener) {
+    public MraidVideoViewController(final Context context,
+            final Bundle intentExtras,
+            final Bundle savedInstanceState,
+            final BaseVideoViewControllerListener baseVideoViewControllerListener) {
         // No broadcast identifiers are used by MraidVideoViews.
         super(context, null, baseVideoViewControllerListener);
 
@@ -51,7 +57,7 @@ public boolean onError(MediaPlayer mediaPlayer, int what, int extra) {
             }
         });
 
-        mVideoView.setVideoPath(bundle.getString(VIDEO_URL));
+        mVideoView.setVideoPath(intentExtras.getString(VIDEO_URL));
     }
 
     @Override
@@ -78,6 +84,13 @@ protected void onPause() {}
     @Override
     protected void onResume() {}
 
+    @Override
+    protected void onSaveInstanceState(@NonNull Bundle outState) {}
+
+    @Override
+    protected void onConfigurationChanged(@Nullable Configuration newConfig) {
+    }
+
     private void createInterstitialCloseButton() {
         mCloseButton = new ImageButton(getContext());
         StateListDrawable states = new StateListDrawable();
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ClickDestinationResolutionListener.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ClickDestinationResolutionListener.java
deleted file mode 100644
index 8c5961c1..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ClickDestinationResolutionListener.java
+++ /dev/null
@@ -1,74 +0,0 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-
-import com.mopub.common.UrlHandler;
-import com.mopub.common.UrlAction;
-import com.mopub.common.logging.MoPubLog;
-
-import java.lang.ref.WeakReference;
-import java.util.Iterator;
-
-class ClickDestinationResolutionListener implements UrlResolutionTask.UrlResolutionListener {
-    private final Context mContext;
-    private final Iterator<String> mUrlIterator;
-    private final WeakReference<SpinningProgressView> mSpinningProgressView;
-
-    public ClickDestinationResolutionListener(@NonNull final Context context,
-            @NonNull final Iterator<String> urlIterator,
-            @NonNull final SpinningProgressView spinningProgressView) {
-        mContext = context.getApplicationContext();
-        mUrlIterator = urlIterator;
-        mSpinningProgressView = new WeakReference<SpinningProgressView>(spinningProgressView);
-    }
-
-    /**
-     * Called upon user click, after the corresponding UrlResolutionTask has followed all redirects
-     * successfully. Attempts to open mopubnativebrowser links in the device browser, deep-links in
-     * the corresponding application, and all other links in the MoPub in-app browser. In the first
-     * two cases, malformed URLs will try to fallback to the next entry in mUrlIterator, and failing
-     * that, will no-op.
-     */
-    @Override
-    public void onSuccess(@NonNull final String resolvedUrl) {
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(
-                        UrlAction.IGNORE_ABOUT_SCHEME,
-                        UrlAction.OPEN_NATIVE_BROWSER,
-                        UrlAction.OPEN_APP_MARKET,
-                        UrlAction.OPEN_IN_APP_BROWSER,
-                        UrlAction.HANDLE_SHARE_TWEET,
-                        UrlAction.FOLLOW_DEEP_LINK)
-                .withResultActions(new UrlHandler.ResultActions() {
-                    @Override
-                    public void urlHandlingSucceeded(@NonNull String url,
-                            @NonNull UrlAction urlAction) {
-                    }
-
-                    @Override
-                    public void urlHandlingFailed(@NonNull String url,
-                            @NonNull UrlAction lastFailedUrlAction) {
-                        if (mUrlIterator.hasNext()) {
-                            UrlResolutionTask.getResolvedUrl(mUrlIterator.next(),
-                                    ClickDestinationResolutionListener.this);
-                        }
-                    }
-                })
-                .build().handleUrl(mContext, resolvedUrl);
-        removeSpinningProgressView();
-    }
-
-    @Override
-    public void onFailure() {
-        MoPubLog.d("Failed to resolve URL for click.");
-        removeSpinningProgressView();
-    }
-
-    private void removeSpinningProgressView() {
-        final SpinningProgressView spinningProgressView = mSpinningProgressView.get();
-        if (spinningProgressView != null) {
-            spinningProgressView.removeFromRoot();
-        }
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
index 2f91b815..b695033b 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
@@ -27,16 +27,22 @@ public static void loadNativeAd(@NonNull final Context context,
             customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND);
             return;
         }
-
         if (adResponse.hasJson()) {
             localExtras.put(DataKeys.JSON_BODY_KEY, adResponse.getJsonBody());
         }
 
-        customEventNative.loadNativeAd(
-                context,
-                customEventNativeListener,
-                localExtras,
-                adResponse.getServerExtras()
-        );
+        // Custom event classes can be developed by any third party and may not be tested.
+        // We catch all exceptions here to prevent crashes from untested code.
+        try {
+            customEventNative.loadNativeAd(
+                    context,
+                    customEventNativeListener,
+                    localExtras,
+                    adResponse.getServerExtras()
+            );
+        } catch (Exception e) {
+            MoPubLog.w("Loading custom event native threw an error.", e);
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND);
+        }
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
index 23b71feb..de938aa9 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
@@ -157,7 +157,10 @@ void handleAdRemoved(final int position) {
      * subject to change in a future SDK version.
      *
      * @param adRenderer The ad renderer.
+     *
+     * @deprecated in version 3.9.0, use {@link #registerViewBinder(ViewBinder)} instead.
      */
+    @Deprecated
     public final void registerAdRenderer(@NonNull final MoPubAdRenderer adRenderer) {
         if (!Preconditions.NoThrow.checkNotNull(
                 adRenderer, "Tried to set a null ad renderer on the placer.")) {
@@ -166,6 +169,23 @@ public final void registerAdRenderer(@NonNull final MoPubAdRenderer adRenderer)
         mStreamAdPlacer.registerAdRenderer(adRenderer);
     }
 
+    /**
+     * Registers a {@link ViewBinder} to use when displaying ads in your stream.
+     *
+     * This binder will be used automatically to create and render your view when you call
+     * {@link #getView}. If you register a second {@link ViewBinder}, it will replace the first,
+     * although this behavior is subject to change in a future SDK version.
+     *
+     * @param viewBinder The view binder
+     */
+    public final void registerViewBinder(@NonNull final ViewBinder viewBinder) {
+        if (!Preconditions.NoThrow.checkNotNull(
+                viewBinder, "Tried to set a null view binder on the placer.")) {
+            return;
+        }
+        mStreamAdPlacer.registerAdRenderer(new MoPubNativeAdRenderer(viewBinder));
+    }
+
     /**
      * Sets a listener that will be called after the SDK loads new ads from the server and places
      * them into your stream.
@@ -308,7 +328,7 @@ public Object getItem(final int position) {
     public long getItemId(final int position) {
         final Object adData = mStreamAdPlacer.getAdData(position);
         if (adData != null) {
-            return ~System.identityHashCode(adData) + 1;
+            return -System.identityHashCode(adData);
         }
         return mOriginalAdapter.getItemId(mStreamAdPlacer.getOriginalPosition(position));
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
index ac2f0f29..686b3c52 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
@@ -29,6 +29,7 @@
      * parent.
      * @return A new ad view.
      */
+    @NonNull
     View createAdView(@NonNull Context context, @Nullable ViewGroup parent);
 
     /**
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java
index 4fd91ecf..e48869ef 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java
@@ -49,8 +49,9 @@ public void renderAdView(@NonNull final View view,
             nativeViewHolder = NativeViewHolder.fromViewBinder(view, mViewBinder);
             mViewHolderMap.put(view, nativeViewHolder);
         }
+
         nativeViewHolder.update(nativeResponse);
-        nativeViewHolder.updateExtras(view, nativeResponse, mViewBinder);
-        view.setVisibility(VISIBLE);
+        nativeViewHolder.updateExtras(nativeResponse, mViewBinder);
+        nativeViewHolder.setViewVisibility(VISIBLE);
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
new file mode 100644
index 00000000..df999462
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
@@ -0,0 +1,559 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
+import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubServerPositioning;
+
+import java.util.List;
+import java.util.WeakHashMap;
+
+import static com.mopub.nativeads.MoPubRecyclerAdapter.ContentChangeStrategy.INSERT_AT_END;
+import static com.mopub.nativeads.MoPubRecyclerAdapter.ContentChangeStrategy.KEEP_ADS_FIXED;
+
+
+public final class MoPubRecyclerAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {
+    // RecyclerView ad views will have negative types to avoid colliding with original view types.
+    static final int NATIVE_AD_VIEW_TYPE_BASE = -56;
+
+    public enum ContentChangeStrategy {
+        INSERT_AT_END, MOVE_ALL_ADS_WITH_CONTENT, KEEP_ADS_FIXED
+    }
+
+    @NonNull private final RecyclerView.AdapterDataObserver mAdapterDataObserver;
+    @Nullable private RecyclerView mRecyclerView;
+    @NonNull private final MoPubStreamAdPlacer mStreamAdPlacer;
+    @NonNull private final RecyclerView.Adapter mOriginalAdapter;
+    @NonNull private final VisibilityTracker mVisibilityTracker;
+    @NonNull private final WeakHashMap<View, Integer> mViewPositionMap;
+
+    @NonNull private ContentChangeStrategy mStrategy = INSERT_AT_END;
+    @Nullable private MoPubNativeAdLoadedListener mAdLoadedListener;
+
+    public MoPubRecyclerAdapter(@NonNull Context context,
+            @NonNull RecyclerView.Adapter originalAdapter) {
+        this(context, originalAdapter, MoPubNativeAdPositioning.serverPositioning());
+    }
+
+    public MoPubRecyclerAdapter(@NonNull Context context,
+            @NonNull RecyclerView.Adapter originalAdapter,
+            @NonNull MoPubServerPositioning adPositioning) {
+        this(new MoPubStreamAdPlacer(context, adPositioning), originalAdapter,
+                new VisibilityTracker(context));
+    }
+
+    public MoPubRecyclerAdapter(@NonNull Context context,
+            @NonNull RecyclerView.Adapter originalAdapter,
+            @NonNull MoPubClientPositioning adPositioning) {
+        this(new MoPubStreamAdPlacer(context, adPositioning), originalAdapter,
+                new VisibilityTracker(context));
+    }
+
+    @VisibleForTesting
+    MoPubRecyclerAdapter(@NonNull final MoPubStreamAdPlacer streamAdPlacer,
+            @NonNull final RecyclerView.Adapter originalAdapter,
+            @NonNull final VisibilityTracker visibilityTracker) {
+        mViewPositionMap = new WeakHashMap<>();
+        mOriginalAdapter = originalAdapter;
+        mVisibilityTracker = visibilityTracker;
+        mVisibilityTracker.setVisibilityTrackerListener(new VisibilityTracker.VisibilityTrackerListener() {
+            @Override
+            public void onVisibilityChanged(final List<View> visibleViews,
+                    final List<View> invisibleViews) {
+                handleVisibilityChanged(visibleViews, invisibleViews);
+            }
+        });
+
+        setHasStableIdsInternal(mOriginalAdapter.hasStableIds());
+
+        mStreamAdPlacer = streamAdPlacer;
+        mStreamAdPlacer.setAdLoadedListener(new MoPubNativeAdLoadedListener() {
+            @Override
+            public void onAdLoaded(final int position) {
+                handleAdLoaded(position);
+            }
+
+            @Override
+            public void onAdRemoved(final int position) {
+                handleAdRemoved(position);
+            }
+        });
+        mStreamAdPlacer.setItemCount(mOriginalAdapter.getItemCount());
+
+        mAdapterDataObserver = new RecyclerView.AdapterDataObserver() {
+            @Override
+            public void onChanged() {
+                mStreamAdPlacer.setItemCount(mOriginalAdapter.getItemCount());
+                notifyDataSetChanged();
+            }
+
+            @Override
+            public void onItemRangeChanged(final int positionStart, final int itemCount) {
+                int adjustedEndPosition = mStreamAdPlacer.getAdjustedPosition(positionStart + itemCount - 1);
+                int adjustedStartPosition = mStreamAdPlacer.getAdjustedPosition(positionStart);
+                int adjustedCount = adjustedEndPosition - adjustedStartPosition + 1;
+                notifyItemRangeChanged(adjustedStartPosition, adjustedCount);
+            }
+
+            @Override
+            public void onItemRangeInserted(final int positionStart, final int itemCount) {
+                final int adjustedStartPosition = mStreamAdPlacer.getAdjustedPosition(positionStart);
+                final int newOriginalCount = mOriginalAdapter.getItemCount();
+                mStreamAdPlacer.setItemCount(newOriginalCount);
+                final boolean addingToEnd = positionStart + itemCount >= newOriginalCount;
+                if (KEEP_ADS_FIXED == mStrategy
+                        || (INSERT_AT_END == mStrategy
+                        && addingToEnd)) {
+                    notifyDataSetChanged();
+                } else {
+                    for (int i = 0; i < itemCount; i++) {
+                        // We insert itemCount items at the original position, moving ads downstream.
+                        mStreamAdPlacer.insertItem(positionStart);
+                    }
+                    notifyItemRangeInserted(adjustedStartPosition, itemCount);
+                }
+            }
+
+            @Override
+            public void onItemRangeRemoved(final int positionStart, final int itemsRemoved) {
+                int adjustedStartPosition = mStreamAdPlacer.getAdjustedPosition(positionStart);
+                final int newOriginalCount = mOriginalAdapter.getItemCount();
+                mStreamAdPlacer.setItemCount(newOriginalCount);
+                final boolean removingFromEnd = positionStart + itemsRemoved >= newOriginalCount;
+                if (KEEP_ADS_FIXED == mStrategy
+                        || (INSERT_AT_END == mStrategy
+                        && removingFromEnd)) {
+                    notifyDataSetChanged();
+                } else {
+                    final int oldAdjustedCount = mStreamAdPlacer.getAdjustedCount(newOriginalCount + itemsRemoved);
+                    for (int i = 0; i < itemsRemoved; i++) {
+                        // We remove itemsRemoved items at the original position.
+                        mStreamAdPlacer.removeItem(positionStart);
+                    }
+
+                    final int itemsRemovedIncludingAds = oldAdjustedCount - mStreamAdPlacer.getAdjustedCount(newOriginalCount);
+                    // Need to move the start position back by the # of ads removed.
+                    adjustedStartPosition -= itemsRemovedIncludingAds - itemsRemoved;
+                    notifyItemRangeRemoved(adjustedStartPosition, itemsRemovedIncludingAds);
+                }
+            }
+
+            @Override
+            public void onItemRangeMoved(final int fromPosition, final int toPosition,
+                    final int itemCount) {
+                notifyDataSetChanged();
+            }
+        };
+
+        mOriginalAdapter.registerAdapterDataObserver(mAdapterDataObserver);
+    }
+
+    @Override
+    public void onAttachedToRecyclerView(final RecyclerView recyclerView) {
+        super.onAttachedToRecyclerView(recyclerView);
+        mRecyclerView = recyclerView;
+    }
+
+    @Override
+    public void onDetachedFromRecyclerView(final RecyclerView recyclerView) {
+        super.onDetachedFromRecyclerView(recyclerView);
+        mRecyclerView = null;
+    }
+
+    /**
+     * Sets a listener that will be called after the SDK loads new ads from the server and places
+     * them into your stream.
+     *
+     * The listener will be active between when you call {@link #loadAds} and when you call
+     * destroy(). You can also set the listener to {@code null} to remove the listener.
+     *
+     * Note that there is not a one to one correspondence between calls to {@link #loadAds} and this
+     * listener. The SDK will call the listener every time an ad loads.
+     *
+     * @param listener The listener.
+     */
+    public void setAdLoadedListener(@Nullable final MoPubNativeAdLoadedListener listener) {
+        mAdLoadedListener = listener;
+    }
+
+    /**
+     * Registers a view binder for rendering "static" native ads with images.
+     */
+    public void registerViewBinder(@NonNull ViewBinder viewBinder) {
+        mStreamAdPlacer.registerAdRenderer(new MoPubNativeAdRenderer(viewBinder), NATIVE_AD_VIEW_TYPE_BASE + 1);
+    }
+
+    /**
+     * Start loading ads from the MoPub server.
+     *
+     * We recommend using {@link #loadAds(String, RequestParameters)} instead of this method, in
+     * order to pass targeting information to the server.
+     *
+     * @param adUnitId The ad unit ID to use when loading ads.
+     */
+    public void loadAds(@NonNull String adUnitId) {
+        mStreamAdPlacer.loadAds(adUnitId);
+    }
+
+    /**
+     * Start loading ads from the MoPub server, using the given request targeting information.
+     *
+     * When loading ads, {@link MoPubNativeAdLoadedListener#onAdLoaded(int)} will be called for each
+     * ad that is added to the stream.
+     *
+     * @param adUnitId The ad unit ID to use when loading ads.
+     * @param requestParameters Targeting information to pass to the ad server.
+     */
+    public void loadAds(@NonNull String adUnitId, @Nullable RequestParameters requestParameters) {
+        mStreamAdPlacer.loadAds(adUnitId, requestParameters);
+    }
+
+    public static int computeScrollOffset(@NonNull final LinearLayoutManager linearLayoutManager,
+            @Nullable final RecyclerView.ViewHolder holder) {
+        if (holder == null) {
+            return 0;
+        }
+        final View view = holder.itemView;
+
+        int offset = 0;
+        if (linearLayoutManager.canScrollVertically()) {
+            if (linearLayoutManager.getStackFromEnd()) {
+                offset = view.getBottom();
+            } else {
+                offset = view.getTop();
+            }
+        } else if (linearLayoutManager.canScrollHorizontally()) {
+            if (linearLayoutManager.getStackFromEnd()) {
+                offset = view.getRight();
+            } else {
+                offset = view.getLeft();
+            }
+        }
+
+        return offset;
+    }
+
+    /**
+     * Refreshes ads in the adapter while preserving the scroll position.
+     *
+     * Call this instead of {@link #loadAds(String, RequestParameters)} in order to preserve the
+     * scroll position in your view. Only usable with LinearLayoutManager or GridLayoutManager.
+     *
+     * @param adUnitId The ad unit ID to use when loading ads.
+     */
+    public void refreshAds(@NonNull String adUnitId) {
+        refreshAds(adUnitId, null);
+    }
+
+    /**
+     * Refreshes ads in the adapter while preserving the scroll position.
+     *
+     * Call this instead of {@link #loadAds(String, RequestParameters)} in order to preserve the
+     * scroll position in your view. Only usable with LinearLayoutManager or GridLayoutManager.
+     *
+     * @param adUnitId The ad unit ID to use when loading ads.
+     * @param requestParameters Targeting information to pass to the ad server.
+     */
+    public void refreshAds(@NonNull String adUnitId,
+            @Nullable RequestParameters requestParameters) {
+        if (mRecyclerView == null) {
+            MoPubLog.w("This adapter is not attached to a RecyclerView and cannot be refreshed.");
+            return;
+        }
+
+        final RecyclerView.LayoutManager layoutManager = mRecyclerView.getLayoutManager();
+        if (layoutManager == null) {
+            MoPubLog.w("Can't refresh ads when there is no layout manager on a RecyclerView.");
+            return;
+        }
+
+        if (layoutManager instanceof LinearLayoutManager) {
+            // Includes GridLayoutManager
+
+            // Get the range & offset of scroll position.
+            LinearLayoutManager linearLayoutManager = (LinearLayoutManager) layoutManager;
+            final int firstPosition = linearLayoutManager.findFirstVisibleItemPosition();
+            RecyclerView.ViewHolder holder = mRecyclerView.findViewHolderForLayoutPosition(firstPosition);
+            final int scrollOffset = computeScrollOffset(linearLayoutManager, holder);
+
+            // Calculate the range of ads not to remove ads from.
+            int startOfRange = Math.max(0, firstPosition - 1);
+            while (mStreamAdPlacer.isAd(startOfRange) && startOfRange > 0) {
+                startOfRange--;
+            }
+
+
+            final int itemCount = getItemCount();
+            int endOfRange = linearLayoutManager.findLastVisibleItemPosition();
+            while (mStreamAdPlacer.isAd(endOfRange) && endOfRange < itemCount - 1) {
+                endOfRange++;
+            }
+
+            final int originalStartOfRange = mStreamAdPlacer.getOriginalPosition(startOfRange);
+            final int originalEndOfRange = mStreamAdPlacer.getOriginalPosition(endOfRange);
+            final int endCount = mOriginalAdapter.getItemCount();
+
+            mStreamAdPlacer.removeAdsInRange(originalEndOfRange, endCount);
+            final int numAdsRemoved = mStreamAdPlacer.removeAdsInRange(0, originalStartOfRange);
+
+            if (numAdsRemoved > 0) {
+                linearLayoutManager.scrollToPositionWithOffset(firstPosition - numAdsRemoved, scrollOffset);
+            }
+
+            loadAds(adUnitId, requestParameters);
+        } else {
+            MoPubLog.w("This LayoutManager can't be refreshed.");
+            return;
+        }
+    }
+
+    /**
+     * Stops loading ads, immediately clearing any ads currently in the stream.
+     *
+     * This method also stops ads from loading as the user moves through the stream. When ads
+     * are cleared, {@link MoPubNativeAdLoadedListener#onAdRemoved} will be called for each ad
+     * that is removed from the stream.
+     */
+    public void clearAds() {
+        mStreamAdPlacer.clearAds();
+    }
+
+    /**
+     * Whether the given position is an ad.
+     *
+     * This will return {@code true} only if there is an ad loaded for this position. You can also
+     * listen for ads to load using {@link MoPubNativeAdLoadedListener#onAdLoaded(int)}.
+     *
+     * @param position The position to check for an ad, expressed in terms of the position in the
+     * stream including ads.
+     * @return Whether there is an ad at the given position.
+     */
+    public boolean isAd(final int position) {
+        return mStreamAdPlacer.isAd(position);
+    }
+
+    /**
+     * Returns the position of an item considering ads in the stream.
+     *
+     * @see {@link MoPubStreamAdPlacer#getAdjustedPosition(int)}
+     * @param originalPosition The original position.
+     * @return The position adjusted by placing ads.
+     */
+    public int getAdjustedPosition(final int originalPosition) {
+        return mStreamAdPlacer.getAdjustedPosition(originalPosition);
+    }
+
+    /**
+     * Returns the original position of an item considering ads in the stream.
+     *
+     * @see {@link MoPubStreamAdPlacer#getOriginalPosition(int)}
+     * @param position The adjusted position.
+     * @return The original position before placing ads.
+     */
+    public int getOriginalPosition(final int position) {
+        return mStreamAdPlacer.getOriginalPosition(position);
+    }
+
+    /**
+     * Sets the strategy this adapter should use for moving ads when content is added or removed
+     * from the wrapped original adapter. This strategy can be set at any time to change the
+     * behavior of the adapter.
+     * <ul>
+     * <li>{@link com.mopub.nativeads.MoPubRecyclerAdapter.ContentChangeStrategy#INSERT_AT_END}
+     *     will insert ads when content is added to the end of the stream. This is the default behavior
+     *     and the recommended strategy.</li>
+     * <li>{@link com.mopub.nativeads.MoPubRecyclerAdapter.ContentChangeStrategy#MOVE_ALL_ADS_WITH_CONTENT}
+     *     will cause all ad positions after an insertion or deletion to be adjusted. New
+     *     ads will not be displayed when items are added to the end of the stream.</li>
+     * <li>{@link com.mopub.nativeads.MoPubRecyclerAdapter.ContentChangeStrategy#KEEP_ADS_FIXED}
+     *     will never adjust ad positions when items are inserted or removed.</li>
+     * </ul>
+     */
+    public void setContentChangeStrategy(@NonNull ContentChangeStrategy strategy) {
+        if (!Preconditions.NoThrow.checkNotNull(strategy)) {
+            return;
+        }
+        mStrategy = strategy;
+    }
+
+    @Override
+    public int getItemCount() {
+        return mStreamAdPlacer.getAdjustedCount(mOriginalAdapter.getItemCount());
+    }
+
+    @Override
+    public RecyclerView.ViewHolder onCreateViewHolder(final ViewGroup parent, final int viewType) {
+        if (viewType >= NATIVE_AD_VIEW_TYPE_BASE && viewType <= NATIVE_AD_VIEW_TYPE_BASE + mStreamAdPlacer.getAdViewTypeCount()) {
+            // Create the view and a view holder.
+            final MoPubAdRenderer adRenderer = mStreamAdPlacer.getAdRendererForViewType(viewType);
+            if (adRenderer == null) {
+                MoPubLog.w("No view binder was registered for ads in MoPubRecyclerAdapter.");
+                // This will cause a null pointer exception.
+                return null;
+            }
+            return new MoPubRecyclerViewHolder(adRenderer.createAdView(parent.getContext(), parent));
+        }
+
+        return mOriginalAdapter.onCreateViewHolder(parent, viewType);
+    }
+
+    @Override
+    public void onBindViewHolder(final RecyclerView.ViewHolder holder, final int position) {
+        Object adData = mStreamAdPlacer.getAdData(position);
+        if (adData != null) {
+            mStreamAdPlacer.bindAdView((NativeAdData) adData, holder.itemView);
+            return;
+        }
+
+        mViewPositionMap.put(holder.itemView, position);
+        mVisibilityTracker.addView(holder.itemView, 0);
+
+        //noinspection unchecked
+        mOriginalAdapter.onBindViewHolder(holder, mStreamAdPlacer.getOriginalPosition(position));
+    }
+
+    @Override
+    public int getItemViewType(final int position) {
+        int type = mStreamAdPlacer.getAdViewType(position);
+        if (type != MoPubStreamAdPlacer.CONTENT_VIEW_TYPE) {
+            return NATIVE_AD_VIEW_TYPE_BASE + type;
+        }
+
+        return mOriginalAdapter.getItemViewType(mStreamAdPlacer.getOriginalPosition(position));
+    }
+
+    @Override
+    public void setHasStableIds(final boolean hasStableIds) {
+        setHasStableIdsInternal(hasStableIds);
+
+        // We can only setHasStableIds when there are no observers on the adapter.
+        mOriginalAdapter.unregisterAdapterDataObserver(mAdapterDataObserver);
+        mOriginalAdapter.setHasStableIds(hasStableIds);
+        mOriginalAdapter.registerAdapterDataObserver(mAdapterDataObserver);
+    }
+
+    public void destroy() {
+        mOriginalAdapter.unregisterAdapterDataObserver(mAdapterDataObserver);
+        mStreamAdPlacer.destroy();
+        mVisibilityTracker.destroy();
+    }
+
+    /**
+     * Returns a stable negative item ID for ad items & calls getItemId on your original adapter for
+     * non-ad items.
+     *
+     * Returns {@link android.support.v7.widget.RecyclerView#NO_ID} if your original adapter does
+     * not have stable IDs.
+     *
+     * @inheritDoc
+     */
+    @Override
+    public long getItemId(final int position) {
+        if (!mOriginalAdapter.hasStableIds()) {
+            return RecyclerView.NO_ID;
+        }
+
+        final Object adData = mStreamAdPlacer.getAdData(position);
+        if (adData != null) {
+            return -System.identityHashCode(adData);
+        }
+
+        return mOriginalAdapter.getItemId(mStreamAdPlacer.getOriginalPosition(position));
+    }
+
+    // Notification methods to forward to the original adapter.
+    @Override
+    public boolean onFailedToRecycleView(final RecyclerView.ViewHolder holder) {
+        if (holder instanceof MoPubRecyclerViewHolder) {
+            return super.onFailedToRecycleView(holder);
+        }
+
+        // noinspection unchecked
+        return mOriginalAdapter.onFailedToRecycleView(holder);
+    }
+
+    @Override
+    public void onViewAttachedToWindow(final RecyclerView.ViewHolder holder) {
+        if (holder instanceof MoPubRecyclerViewHolder) {
+            super.onViewAttachedToWindow(holder);
+            return;
+        }
+
+        // noinspection unchecked
+        mOriginalAdapter.onViewAttachedToWindow(holder);
+    }
+
+    @Override
+    public void onViewDetachedFromWindow(final RecyclerView.ViewHolder holder) {
+        if (holder instanceof MoPubRecyclerViewHolder) {
+            super.onViewDetachedFromWindow(holder);
+            return;
+        }
+
+        // noinspection unchecked
+        mOriginalAdapter.onViewDetachedFromWindow(holder);
+    }
+
+    @Override
+    public void onViewRecycled(final RecyclerView.ViewHolder holder) {
+        if (holder instanceof MoPubRecyclerViewHolder) {
+            super.onViewRecycled(holder);
+            return;
+        }
+
+        // noinspection unchecked
+        mOriginalAdapter.onViewRecycled(holder);
+    }
+    // End forwarded methods.
+
+    @VisibleForTesting
+    void handleAdLoaded(final int position) {
+        if (mAdLoadedListener != null) {
+            mAdLoadedListener.onAdLoaded(position);
+        }
+
+        notifyItemInserted(position);
+    }
+
+    @VisibleForTesting
+    void handleAdRemoved(final int position) {
+        if (mAdLoadedListener != null) {
+            mAdLoadedListener.onAdRemoved(position);
+        }
+
+        notifyItemRemoved(position);
+    }
+
+    private void handleVisibilityChanged(final List<View> visibleViews,
+            final List<View> invisibleViews) {
+        // Loop through all visible positions in order to build a max and min range, and then
+        // place ads into that range.
+        int min = Integer.MAX_VALUE;
+        int max = 0;
+        for (final View view : visibleViews) {
+            final Integer pos = mViewPositionMap.get(view);
+            if (pos == null) {
+                continue;
+            }
+            min = Math.min(pos, min);
+            max = Math.max(pos, max);
+        }
+        mStreamAdPlacer.placeAdsInRange(min, max + 1);
+    }
+
+    /**
+     * Sets the hasStableIds value on this adapter only, not also on the wrapped adapter.
+     */
+    private void setHasStableIdsInternal(final boolean hasStableIds) {
+        super.setHasStableIds(hasStableIds);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerViewHolder.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerViewHolder.java
new file mode 100644
index 00000000..963f2ce5
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerViewHolder.java
@@ -0,0 +1,11 @@
+package com.mopub.nativeads;
+
+import android.support.annotation.NonNull;
+import android.support.v7.widget.RecyclerView;
+import android.view.View;
+
+public class MoPubRecyclerViewHolder extends RecyclerView.ViewHolder {
+    public MoPubRecyclerViewHolder(@NonNull final View itemView) {
+        super(itemView);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
index e89f5d88..eeec32ee 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
@@ -38,6 +38,7 @@
      * instead of an ad.
      */
     public static final int CONTENT_VIEW_TYPE = 0;
+    private static final int DEFAULT_AD_VIEW_TYPE = -1;
     private final static MoPubNativeAdLoadedListener EMPTY_NATIVE_AD_LOADED_LISTENER =
             new MoPubNativeAdLoadedListener() {
                 @Override
@@ -60,11 +61,12 @@ public void onAdRemoved(final int position) {
     @NonNull private final WeakHashMap<View, NativeResponse> mNativeResponseMap;
 
     private boolean mHasReceivedPositions;
-    @NonNull private PlacementData mPendingPlacementData;
+    @Nullable private PlacementData mPendingPlacementData;
     private boolean mHasReceivedAds;
     private boolean mHasPlacedAds;
     @NonNull private PlacementData mPlacementData;
-    
+
+    private int adViewType = DEFAULT_AD_VIEW_TYPE;
     @Nullable private MoPubAdRenderer mAdRenderer;
     @Nullable private String mAdUnitId;
 
@@ -148,8 +150,8 @@ public MoPubStreamAdPlacer(@NonNull final Context context,
         mAdSource = adSource;
         mPlacementData = PlacementData.empty();
 
-        mNativeResponseMap = new WeakHashMap<View, NativeResponse>();
-        mViewMap = new HashMap<NativeResponse, WeakReference<View>>();
+        mNativeResponseMap = new WeakHashMap<>();
+        mViewMap = new HashMap<>();
 
         mPlacementHandler = new Handler();
         mPlacementRunnable = new Runnable() {
@@ -177,12 +179,26 @@ public void run() {
      * @param adRenderer The ad renderer.
      */
     public void registerAdRenderer(@NonNull final MoPubAdRenderer adRenderer) {
+        registerAdRenderer(adRenderer, -1);
+    }
+
+    public void registerAdRenderer(@NonNull final MoPubAdRenderer adRenderer, int viewType) {
         if (!NoThrow.checkNotNull(adRenderer, "Cannot register a null adRenderer")) {
             return;
         }
+        adViewType = viewType;
         mAdRenderer = adRenderer;
     }
 
+    @Nullable
+    public MoPubAdRenderer getAdRendererForViewType(int viewType) {
+        if (viewType == adViewType) {
+            return mAdRenderer;
+        }
+
+        return null;
+    }
+
     /**
      * Sets a listener that will be called after the SDK loads new ads from the server and places
      * them into your stream.
@@ -406,25 +422,31 @@ public View getAdView(final int position, @Nullable final View convertView,
             return null;
         }
 
-        final MoPubAdRenderer adRenderer = adData.getAdRenderer();
         final View view = (convertView != null) ?
-                convertView : adRenderer.createAdView(mContext, parent);
+                convertView : adData.getAdRenderer().createAdView(mContext, parent);
+        bindAdView(adData, view);
+        return view;
+    }
 
+    /**
+     * Given an ad and a view, attaches the ad data to the view and prepares the ad for display.
+     * @param adData the ad to bind.
+     * @param adView the view to bind it to.
+     */
+    public void bindAdView(@NonNull NativeAdData adData, @NonNull View adView) {
         NativeResponse nativeResponse = adData.getAd();
         WeakReference<View> mappedViewRef = mViewMap.get(nativeResponse);
         View mappedView = null;
         if (mappedViewRef != null) {
             mappedView = mappedViewRef.get();
         }
-        if (!view.equals(mappedView)) {
+        if (!adView.equals(mappedView)) {
             clearNativeResponse(mappedView);
-            clearNativeResponse(view);
-            prepareNativeResponse(nativeResponse, view);
+            clearNativeResponse(adView);
+            prepareNativeResponse(nativeResponse, adView);
             //noinspection unchecked
-            adRenderer.renderAdView(view, nativeResponse);
+            adData.getAdRenderer().renderAdView(adView, nativeResponse);
         }
-
-        return view;
     }
 
     /**
@@ -442,7 +464,7 @@ public int removeAdsInRange(int originalStartPosition, int originalEndPosition)
         int adjustedStartRange = mPlacementData.getAdjustedPosition(originalStartPosition);
         int adjustedEndRange = mPlacementData.getAdjustedPosition(originalEndPosition);
 
-        ArrayList<Integer> removedPositions = new ArrayList<Integer>();
+        ArrayList<Integer> removedPositions = new ArrayList<>();
         // Traverse in reverse order to make this less error-prone for developers who are removing
         // views directly from their UI.
         for (int i = positions.length - 1; i >= 0; --i) {
@@ -689,7 +711,7 @@ private boolean tryPlaceAd(final int position) {
             return false;
         }
 
-        final NativeAdData adData = createAdData(position, adResponse);
+        final NativeAdData adData = createAdData(adResponse);
         mPlacementData.placeAd(position, adData);
         mItemCount++;
 
@@ -698,7 +720,7 @@ private boolean tryPlaceAd(final int position) {
     }
 
     @NonNull
-    private NativeAdData createAdData(final int position, @NonNull final NativeResponse adResponse) {
+    private NativeAdData createAdData(@NonNull final NativeResponse adResponse) {
         Preconditions.checkNotNull(mAdUnitId);
         Preconditions.checkNotNull(mAdRenderer);
 
@@ -706,6 +728,9 @@ private NativeAdData createAdData(final int position, @NonNull final NativeRespo
         return new NativeAdData(mAdUnitId, mAdRenderer, adResponse);
     }
 
+    /**
+     * Clears any native response click trackers and impression tracking are set up for this view.
+     */
     private void clearNativeResponse(@Nullable final View view) {
         if (view == null) {
             return;
@@ -719,6 +744,10 @@ private void clearNativeResponse(@Nullable final View view) {
         }
     }
 
+    /**
+     * Prepares a view and nativeresponse for display by attaching click handlers
+     * and setting up impression tracking.
+     */
     private void prepareNativeResponse(@NonNull final NativeResponse nativeResponse, @NonNull final View view) {
         mViewMap.put(nativeResponse, new WeakReference<View>(view));
         mNativeResponseMap.put(view, nativeResponse);
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
index e332c6cf..9191d354 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
@@ -7,6 +7,9 @@
 import android.view.ViewGroup;
 import android.widget.ImageView;
 
+import com.mopub.common.Preconditions;
+import com.mopub.common.UrlAction;
+import com.mopub.common.UrlHandler;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.event.BaseEvent;
 import com.mopub.common.logging.MoPubLog;
@@ -17,9 +20,7 @@
 import com.mopub.volley.toolbox.ImageLoader;
 
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.HashSet;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -255,6 +256,14 @@ public void recordImpression(@Nullable final View view) {
     }
 
     public void handleClick(@Nullable final View view) {
+        handleClick(view, new SpinningProgressView(mContext));
+    }
+
+    @VisibleForTesting
+    void handleClick(@Nullable final View view,
+            @NonNull final SpinningProgressView spinningProgressView) {
+        Preconditions.checkNotNull(spinningProgressView);
+
         if (isDestroyed()) {
             return;
         }
@@ -264,7 +273,7 @@ public void handleClick(@Nullable final View view) {
                     mMoPubClickTracker, mContext, BaseEvent.Name.CLICK_REQUEST);
         }
 
-        openClickDestinationUrl(view);
+        openClickDestinationUrl(view, spinningProgressView);
         mNativeAd.handleClick(view);
         mIsClicked = true;
 
@@ -344,21 +353,47 @@ public void onErrorResponse(final VolleyError volleyError) {
         }
     }
 
-    private void openClickDestinationUrl(@Nullable final View view) {
+    private void openClickDestinationUrl(@Nullable final View view,
+            @NonNull final SpinningProgressView spinningProgressView) {
+        Preconditions.checkNotNull(spinningProgressView);
+
         if (getClickDestinationUrl() == null) {
             return;
         }
 
-        SpinningProgressView spinningProgressView = null;
         if (view != null) {
-            spinningProgressView = new SpinningProgressView(mContext);
             spinningProgressView.addToRoot(view);
         }
 
-        final Iterator<String> urlIterator = Arrays.asList(getClickDestinationUrl()).iterator();
-        final ClickDestinationResolutionListener urlResolutionListener =
-                new ClickDestinationResolutionListener(mContext, urlIterator, spinningProgressView);
-        UrlResolutionTask.getResolvedUrl(urlIterator.next(), urlResolutionListener);
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(
+                        UrlAction.IGNORE_ABOUT_SCHEME,
+                        UrlAction.OPEN_NATIVE_BROWSER,
+                        UrlAction.OPEN_APP_MARKET,
+                        UrlAction.OPEN_IN_APP_BROWSER,
+                        UrlAction.HANDLE_SHARE_TWEET,
+                        UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK,
+                        UrlAction.FOLLOW_DEEP_LINK)
+                .withResultActions(new UrlHandler.ResultActions() {
+                    @Override
+                    public void urlHandlingSucceeded(@NonNull String url,
+                            @NonNull UrlAction urlAction) {
+                        removeSpinningProgressView();
+                    }
+
+                    @Override
+                    public void urlHandlingFailed(@NonNull String url,
+                            @NonNull UrlAction lastFailedUrlAction) {
+                        removeSpinningProgressView();
+                    }
+
+                    private void removeSpinningProgressView() {
+                        if (view != null) {
+                            spinningProgressView.removeFromRoot();
+                        }
+                    }
+                })
+                .build().handleUrl(mContext, getClickDestinationUrl());
     }
 
     private void setOnClickListener(@NonNull final View view,
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java
index a7b99ef0..c6d09ca5 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java
@@ -10,6 +10,7 @@
 import com.mopub.common.logging.MoPubLog;
 
 class NativeViewHolder {
+    @Nullable View mainView;
     @Nullable TextView titleView;
     @Nullable TextView textView;
     @Nullable TextView callToActionView;
@@ -23,9 +24,10 @@
     private NativeViewHolder() {}
 
     @NonNull
-    static NativeViewHolder fromViewBinder(@NonNull final View view, @NonNull final ViewBinder viewBinder) {
+    static NativeViewHolder fromViewBinder(@NonNull final View view,
+            @NonNull final ViewBinder viewBinder) {
         final NativeViewHolder nativeViewHolder = new NativeViewHolder();
-
+        nativeViewHolder.mainView = view;
         try {
             nativeViewHolder.titleView = (TextView) view.findViewById(viewBinder.titleId);
             nativeViewHolder.textView = (TextView) view.findViewById(viewBinder.textId);
@@ -47,12 +49,15 @@ void update(@NonNull final NativeResponse nativeResponse) {
         nativeResponse.loadIconImage(iconImageView);
     }
 
-    void updateExtras(@NonNull final View outerView,
-                      @NonNull final NativeResponse nativeResponse,
+    void updateExtras(@NonNull final NativeResponse nativeResponse,
                       @NonNull final ViewBinder viewBinder) {
+        if (mainView == null) {
+            MoPubLog.w("Attempted to bind extras on a null main view.");
+            return;
+        }
         for (final String key : viewBinder.extras.keySet()) {
             final int resourceId = viewBinder.extras.get(key);
-            final View view = outerView.findViewById(resourceId);
+            final View view = mainView.findViewById(resourceId);
             final Object content = nativeResponse.getExtra(key);
 
             if (view instanceof ImageView) {
@@ -86,4 +91,10 @@ private void addTextView(@Nullable final TextView textView, @Nullable final Stri
             textView.setText(contents);
         }
     }
+
+    public void setViewVisibility(final int visibility) {
+        if (mainView != null) {
+            mainView.setVisibility(visibility);
+        }
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
index 4d4658cb..60f49171 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
@@ -49,8 +49,10 @@
     private static final double DEFAULT_RETRY_TIME_MILLISECONDS = 1000; // 1 second
     private static final double EXPONENTIAL_BACKOFF_FACTOR = 2;
 
-    @VisibleForTesting
-    static int MAXIMUM_RETRY_TIME_MILLISECONDS = 5 * 60 * 1000; // 5 minutes.
+    // We allow the retry limit to be set per-instance for testing, but it is always initialized
+    // to this default.
+    private static final int MAXIMUM_RETRY_TIME_MILLISECONDS = 5 * 60 * 1000; // 5 minutes.
+    private int mMaximumRetryTimeMillis = MAXIMUM_RETRY_TIME_MILLISECONDS;
 
     @NonNull private final Context mContext;
 
@@ -140,7 +142,7 @@ private void handleSuccess(@NonNull MoPubClientPositioning positioning) {
     private void handleFailure() {
         double multiplier = Math.pow(EXPONENTIAL_BACKOFF_FACTOR, mRetryCount + 1);
         int delay = (int) (DEFAULT_RETRY_TIME_MILLISECONDS * multiplier);
-        if (delay >= MAXIMUM_RETRY_TIME_MILLISECONDS) {
+        if (delay >= mMaximumRetryTimeMillis) {
             MoPubLog.d("Error downloading positioning information");
             if (mListener != null) {
                 mListener.onFailed();
@@ -152,4 +154,10 @@ private void handleFailure() {
         mRetryCount++;
         mRetryHandler.postDelayed(mRetryRunnable, delay);
     }
+
+    @Deprecated
+    @VisibleForTesting
+    void setMaximumRetryTimeMilliseconds(int millis) {
+        mMaximumRetryTimeMillis = millis;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/network/Networking.java b/mopub-sdk/src/main/java/com/mopub/network/Networking.java
index ed087c69..e820a0a5 100644
--- a/mopub-sdk/src/main/java/com/mopub/network/Networking.java
+++ b/mopub-sdk/src/main/java/com/mopub/network/Networking.java
@@ -29,7 +29,7 @@
 public class Networking {
     @VisibleForTesting
     static final String CACHE_DIRECTORY_NAME = "mopub-volley-cache";
-
+    private static final String DEFAULT_USER_AGENT = System.getProperty("http.agent");
 
     // These are volatile so that double-checked locking works.
     // See http://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java
@@ -133,7 +133,7 @@ public static String getUserAgent(@NonNull Context context) {
                     } else {
                         // In the exceptional case where we can't access the WebView user agent,
                         // fall back to the System-specific user agent.
-                        userAgent = System.getProperty("http.agent");
+                        userAgent = DEFAULT_USER_AGENT;
                     }
                     sUserAgent = userAgent;
                 }
@@ -143,6 +143,21 @@ public static String getUserAgent(@NonNull Context context) {
         return userAgent;
     }
 
+    /**
+     * Gets the previously cached WebView user agent. This returns the default userAgent if the
+     * WebView user agent has not been initialized yet.
+     *
+     * @return Best-effort String WebView user agent.
+     */
+    @NonNull
+    public static String getCachedUserAgent() {
+        final String userAgent = sUserAgent;
+        if (userAgent == null) {
+            return DEFAULT_USER_AGENT;
+        }
+        return userAgent;
+    }
+
     @VisibleForTesting
     public static synchronized void clearForTesting() {
         sRequestQueue = null;
diff --git a/mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java b/mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java
index 4570a183..e2e93b04 100644
--- a/mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java
+++ b/mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java
@@ -5,8 +5,12 @@
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
+import com.mopub.common.Preconditions;
 import com.mopub.common.event.BaseEvent;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.VastErrorCode;
+import com.mopub.mobileads.VastMacroHelper;
+import com.mopub.mobileads.VastTracker;
 import com.mopub.volley.DefaultRetryPolicy;
 import com.mopub.volley.NetworkResponse;
 import com.mopub.volley.Request;
@@ -15,7 +19,9 @@
 import com.mopub.volley.VolleyError;
 import com.mopub.volley.toolbox.HttpHeaderParser;
 
+import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.List;
 
 public class TrackingRequest extends Request<Void> {
 
@@ -57,18 +63,49 @@ public void deliverResponse(final Void aVoid) {
     // Static helper methods that can be used as utilities:
     //////////////////////////////////////////////////////////////
 
-    public static void makeTrackingHttpRequest(final Iterable<String> urls, final Context context) {
+    public static void makeVastTrackingHttpRequest(
+            @NonNull final List<VastTracker> vastTrackers,
+            @Nullable final VastErrorCode vastErrorCode,
+            @Nullable final Integer contentPlayHead,
+            @Nullable final String assetUri,
+            @Nullable final Context context) {
+        Preconditions.checkNotNull(vastTrackers);
+
+        List<String> trackers = new ArrayList<String>(vastTrackers.size());
+        for (VastTracker vastTracker : vastTrackers) {
+            if (vastTracker == null) {
+                continue;
+            }
+            if (vastTracker.isTracked() && !vastTracker.isRepeatable()) {
+                continue;
+            }
+            trackers.add(vastTracker.getTrackingUrl());
+            vastTracker.setTracked();
+        }
+
+        makeTrackingHttpRequest(
+                new VastMacroHelper(trackers)
+                        .withErrorCode(vastErrorCode)
+                        .withContentPlayHead(contentPlayHead)
+                        .withAssetUri(assetUri)
+                        .getUris(),
+                context
+        );
+    }
+
+    public static void makeTrackingHttpRequest(@Nullable final Iterable<String> urls,
+            @Nullable final Context context) {
         makeTrackingHttpRequest(urls, context, null, null);
     }
 
-    public static void makeTrackingHttpRequest(final Iterable<String> urls,
-            final Context context,
+    public static void makeTrackingHttpRequest(@Nullable final Iterable<String> urls,
+            @Nullable final Context context,
             final BaseEvent.Name name) {
         makeTrackingHttpRequest(urls, context, null, name);
     }
 
-    public static void makeTrackingHttpRequest(final Iterable<String> urls,
-            final Context context,
+    public static void makeTrackingHttpRequest(@Nullable final Iterable<String> urls,
+            @Nullable final Context context,
             @Nullable final Listener listener,
             final BaseEvent.Name name) {
         if (urls == null || context == null) {
@@ -103,23 +140,23 @@ public void onErrorResponse(final VolleyError volleyError) {
         }
     }
 
-    public static void makeTrackingHttpRequest(final String url,
-            final Context context) {
+    public static void makeTrackingHttpRequest(@Nullable final String url,
+            @Nullable final Context context) {
         makeTrackingHttpRequest(url, context, null, null);
     }
 
-    public static void makeTrackingHttpRequest(final String url,
-            final Context context, @Nullable Listener listener) {
+    public static void makeTrackingHttpRequest(@Nullable final String url,
+            @Nullable final Context context, @Nullable Listener listener) {
         makeTrackingHttpRequest(url, context, listener, null);
     }
 
-    public static void makeTrackingHttpRequest(final String url,
-            final Context context, final BaseEvent.Name name) {
+    public static void makeTrackingHttpRequest(@Nullable final String url,
+            @Nullable final Context context, final BaseEvent.Name name) {
         makeTrackingHttpRequest(url, context, null, name);
     }
 
-    public static void makeTrackingHttpRequest(final String url,
-            final Context context,
+    public static void makeTrackingHttpRequest(@Nullable final String url,
+            @Nullable final Context context,
             @Nullable Listener listener,
             final BaseEvent.Name name) {
         if (url != null) {
diff --git a/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
new file mode 100644
index 00000000..08917adb
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
@@ -0,0 +1,171 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.ResolveInfo;
+import android.net.Uri;
+import android.webkit.WebView;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.doCallRealMethod;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+public class BrowserWebViewClientTest {
+
+    private final WebView MOOT_WEB_VIEW = null;
+
+    private BrowserWebViewClient subject;
+    private Context context;
+    private MoPubBrowser mockMoPubBrowser;
+    private WebView mockWebView;
+
+    @Before
+    public void setUp() {
+        mockMoPubBrowser = mock(MoPubBrowser.class);
+        context = Robolectric.buildActivity(Activity.class).create().get().getApplicationContext();
+        mockWebView = mock(WebView.class);
+
+        doCallRealMethod().when(mockMoPubBrowser).setWebView(mockWebView);
+        doCallRealMethod().when(mockMoPubBrowser).getWebView();
+        when(mockMoPubBrowser.getApplicationContext()).thenReturn(context);
+
+        mockMoPubBrowser.setWebView(mockWebView);
+        subject = new BrowserWebViewClient(mockMoPubBrowser);
+    }
+
+    @Test
+    public void shouldOverrideUrlLoading_withHTTPUrl_shouldReturnTrue_shouldLoadUrl() {
+        final String url = "http://twitter.com";
+
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
+        verify(mockWebView).loadUrl(url);
+        verify(mockMoPubBrowser, never()).finish();
+    }
+
+    @Test
+    public void shouldOverrideUrlLoading_withTelUrl_shouldReturnTrue_shouldFinish() {
+        final String url = "tel:123456789";
+
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
+        verify(mockWebView, never()).loadUrl(anyString());
+        verify(mockMoPubBrowser).finish();
+    }
+
+    @Test
+    public void shouldOverrideUrlLoading_withDeeplinkUrl_shouldReturnTrue_shouldFinish() {
+        final String url = "twitter://timeline";
+
+        makeDeeplinkResolvable(url);
+
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
+        verify(mockWebView, never()).loadUrl(anyString());
+        verify(mockMoPubBrowser).finish();
+    }
+
+    @Test
+    public void shouldOverrideUrlLoading_withDeeplinkPlusUrl_withSuccessfulPrimaryUrl_shouldReturnTrue_shouldFinish() {
+        final String primaryUrl = "twitter://timeline";
+        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl);
+
+        makeDeeplinkResolvable(primaryUrl);
+
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
+        verify(mockWebView, never()).loadUrl(anyString());
+        verify(mockMoPubBrowser).finish();
+    }
+
+    @Test
+    public void shouldOverrideUrlLoading_withDeeplinkPlusUrl_withFailedPrimaryUrl_withHTTPFallbackUrl_shouldReturnTrue_shouldLoadFallbackUrl_shouldNotFinish() {
+        final String primaryUrl = "missingApp://somePath";
+        final String fallbackUrl = "https://twitter.com/";
+        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
+                + "&fallbackUrl=" + Uri.encode(fallbackUrl);
+
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
+        verify(mockWebView).loadUrl(fallbackUrl);
+        verify(mockMoPubBrowser, never()).finish();
+    }
+
+    @Test
+    public void shouldOverrideUrlLoading_withDeeplinkPlusUrl_withFailedPrimaryUrl_withTelFallbackUrl_shouldReturnTrue_shouldFinish() {
+        final String primaryUrl = "missingApp://somePath";
+        final String fallbackUrl = "tel:123456789";
+        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
+                + "&fallbackUrl=" + Uri.encode(fallbackUrl);
+
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
+        verify(mockWebView, never()).loadUrl(anyString());
+        verify(mockMoPubBrowser, times(1)).finish();
+    }
+
+    @Test
+    public void shouldOverrideUrlLoading_withDeeplinkPlusUrl_withFailedPrimaryUrl_withDeeplinkFallbackUrl_shouldReturnTrue_shouldFinish() {
+        final String primaryUrl = "missingApp://somePath";
+        final String fallbackUrl = "twitter://timeline";
+        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
+                + "&fallbackUrl=" + Uri.encode(fallbackUrl);
+
+        makeDeeplinkResolvable(fallbackUrl);
+
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
+        verify(mockWebView, never()).loadUrl(anyString());
+        verify(mockMoPubBrowser, times(1)).finish();
+    }
+
+    @Test
+    public void shouldOverrideUrlLoading_withDeeplinkPlusUrl_withEncodedQueryString_shouldReturnTrue_shouldFinish() {
+        final String primaryUrl = "ebay://launch?nav=home&referrer=http%3A%2F%2Frover.ebay.com%2Frover%2F1%2F711-212056-53654-1%2F4%3Fmpt%3Dcache_buster%26ff6%3Dclick_id%26ff7%3Difa%26ff9%3Dsegment_name%26ff18%3Dcreative_name%26siteid%3D0%26ipn%3Dadmain2%26placement%3D418737%26ck%3D23932_main%26mpvc%3D";
+        final String fallbackUrl = "http://ebay.com";
+        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
+                + "&fallbackUrl=" + Uri.encode(fallbackUrl);
+
+        makeDeeplinkResolvable(primaryUrl);
+
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
+        verify(mockWebView, never()).loadUrl(anyString());
+        verify(mockMoPubBrowser, times(1)).finish();
+    }
+
+    @Test
+    public void shouldOverrideUrlLoading_withEmptyUrl_shouldReturnFalse_shouldDoNothing() {
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, "")).isFalse();
+        verify(mockWebView, never()).loadUrl(anyString());
+        verify(mockMoPubBrowser, never()).finish();
+    }
+
+    @Test
+    public void shouldOverrideUrlLoading_withNullUrl_shouldReturnFalse_shouldDoNothing() {
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, null)).isFalse();
+        verify(mockWebView, never()).loadUrl(anyString());
+        verify(mockMoPubBrowser, never()).finish();
+    }
+
+    @Test
+    public void shouldOverrideUrlLoading_withoutMatchingSupporedUrl_shouldReturnFalse_shouldDoNothing() {
+        final String url = "mopubscheme://close";
+        subject = new BrowserWebViewClient(mockMoPubBrowser);
+
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isFalse();
+        verify(mockWebView, never()).loadUrl(anyString());
+        verify(mockMoPubBrowser, never()).finish();
+    }
+
+    private void makeDeeplinkResolvable(String deeplink) {
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
+                Uri.parse(deeplink)), new ResolveInfo());
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java b/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
index 16b35e0e..ce7282a3 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
@@ -23,6 +23,7 @@
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 public class CacheServiceTest {
@@ -55,6 +56,14 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         }).when(diskCacheGetListener).onComplete(anyString(), any(byte[].class));
     }
 
+    @Test
+    public void initializeDiskCache_withNullCacheDirectory_shouldNotThrowNpe_shouldReturnFalse() {
+        Activity mockContext = mock(Activity.class);
+        when(mockContext.getCacheDir()).thenReturn(null);
+
+        assertThat(CacheService.initializeDiskCache(mockContext)).isFalse();
+    }
+
     @Test
     public void initializeCache_withValidContext_shouldCreateNewCachesIdempotently() throws Exception {
         assertThat(CacheService.getDiskLruCache()).isNull();
diff --git a/mopub-sdk/src/test/java/com/mopub/common/HttpClientTest.java b/mopub-sdk/src/test/java/com/mopub/common/HttpClientTest.java
index c00f14fb..497bbbbb 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/HttpClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/HttpClientTest.java
@@ -4,6 +4,7 @@
 import android.webkit.WebView;
 
 import com.mopub.common.util.ResponseHeader;
+import com.mopub.network.Networking;
 
 import org.apache.http.HttpRequest;
 import org.apache.http.client.methods.HttpGet;
@@ -16,7 +17,6 @@
 import org.robolectric.tester.org.apache.http.RequestMatcher;
 import org.robolectric.tester.org.apache.http.TestHttpResponse;
 
-import static com.mopub.common.HttpClient.getWebViewUserAgent;
 import static com.mopub.common.HttpClient.initializeHttpGet;
 import static com.mopub.common.HttpClient.urlEncode;
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -39,39 +39,32 @@ public boolean matches(HttpRequest request) {
             }
         }, new TestHttpResponse(200, "body"));
 
-        HttpClient.setWebViewUserAgent(null);
         Robolectric.getBackgroundScheduler().pause();
         Robolectric.clearPendingHttpResponses();
     }
 
     @After
     public void tearDown() throws Exception {
-        HttpClient.setWebViewUserAgent(null);
         Robolectric.getBackgroundScheduler().reset();
         Robolectric.clearPendingHttpResponses();
     }
 
     @Test
     public void initializeHttpGet_shouldReturnHttpGetWithWebViewUserAgent() throws Exception {
+        Networking.setUserAgentForTesting(null);
         HttpGet httpGet = initializeHttpGet(url, context);
 
         assertThat(httpGet.getURI().toURL().toString()).isEqualTo(url);
-        assertThat(httpGet.getFirstHeader(ResponseHeader.USER_AGENT.getKey()).getValue()).isEqualTo(userAgent);
+        assertThat(httpGet.getFirstHeader(ResponseHeader.USER_AGENT.getKey()).getValue()).isEqualTo(
+                userAgent);
     }
 
     @Test
-    public void initializeHttpGet_shouldPopulateStaticWebViewUserAgent() throws Exception {
-        assertThat(HttpClient.getWebViewUserAgent()).isNull();
-
-        HttpGet httpGet = initializeHttpGet(url, context);
-
-        assertThat(HttpClient.getWebViewUserAgent()).isEqualTo(userAgent);
-    }
-
-    @Test
-    public void initializeHttpGet_withNullContext_shouldNotSetUserAgent() throws Exception {
+    public void initializeHttpGet_withNullContext_shouldUseCachedUserAgent() throws Exception {
+        Networking.setUserAgentForTesting("cached");
         HttpGet httpGet = initializeHttpGet("http://www.mopub.com/");
-        assertThat(httpGet.getFirstHeader(ResponseHeader.USER_AGENT.getKey())).isNull();
+        assertThat(httpGet.getFirstHeader(ResponseHeader.USER_AGENT.getKey()).getValue()).isEqualTo(
+                "cached");
     }
 
     @Test
@@ -113,7 +106,8 @@ public void urlEncode_withProperlyEncodedUrl_shouldReturnUrlWithSameEncoding() t
                 .isEqualTo("http://user:passwrd@host:80/doc%7Csearch?q=green%20robots#over%206%22");
 
         assertThat(urlEncode("https://www.mywebsite.com%2Fd+ocs%2Fenglish%2Fsite%2Fmybook.do%3Fkey%3Dvalue%3B%23fragment"))
-                .isEqualTo("https://www.mywebsite.com%2Fd+ocs%2Fenglish%2Fsite%2Fmybook.do%3Fkey%3Dvalue%3B%23fragment");
+                .isEqualTo(
+                        "https://www.mywebsite.com%2Fd+ocs%2Fenglish%2Fsite%2Fmybook.do%3Fkey%3Dvalue%3B%23fragment");
     }
 
     @Test(expected = Exception.class)
@@ -134,21 +128,18 @@ public void urlEncode_withMalformedUrl_shouldThrowException() throws Exception {
         urlEncode("derp://www.mopub.com/");
     }
 
-    @Test
-    public void getWebViewUserAgent_whenUserAgentNotSet_shouldReturnDefault() {
-        assertThat(getWebViewUserAgent("test")).isEqualTo("test");
-    }
-
     @Test(expected = NullPointerException.class)
     public void initializeHttpGet_withNullUrl_shouldThrowNullPointerException() throws Exception {
         initializeHttpGet(null, context);
     }
 
     @Test
-    public void initializeHttpGet_withNullContext_shouldNotPopulateUserAgentHeader() throws Exception {
+    public void initializeHttpGet_withNullContext_shouldPopulateUserAgentHeaderWithCachedValue() throws Exception {
+        Networking.setUserAgentForTesting("cached");
         HttpGet httpGet = initializeHttpGet(url, null);
 
         assertThat(httpGet.getURI().toURL().toString()).isEqualTo(url);
-        assertThat(httpGet.getFirstHeader(ResponseHeader.USER_AGENT.getKey())).isNull();
+        assertThat(httpGet.getFirstHeader(ResponseHeader.USER_AGENT.getKey()).getValue()).isEqualTo(
+                "cached");
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
index e5228497..41e8f54c 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
@@ -10,6 +10,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
@@ -23,12 +24,11 @@
 
     @Before
     public void setUp() {
-        subject = new MoPubBrowser();
+        subject = Robolectric.buildActivity(MoPubBrowser.class).create().get();
         CookieSyncManager.createInstance(subject);
 
         mockWebView = mock(WebView.class);
         subject.setWebView(mockWebView);
-        // In the Gradle testing regime we will change these to build MoPubBrowser as an activity using Robolectric.
     }
 
     @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
index 6002c333..d70faa57 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
@@ -8,6 +8,8 @@
 import android.support.annotation.NonNull;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.Networking;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -16,15 +18,19 @@
 import org.robolectric.Robolectric;
 
 import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK;
+import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK;
 import static com.mopub.common.UrlAction.HANDLE_MOPUB_SCHEME;
 import static com.mopub.common.UrlAction.HANDLE_PHONE_SCHEME;
 import static com.mopub.common.UrlAction.HANDLE_SHARE_TWEET;
 import static com.mopub.common.UrlAction.IGNORE_ABOUT_SCHEME;
 import static com.mopub.common.UrlAction.NOOP;
+import static com.mopub.common.UrlAction.OPEN_APP_MARKET;
 import static com.mopub.common.UrlAction.OPEN_IN_APP_BROWSER;
 import static com.mopub.common.UrlAction.OPEN_NATIVE_BROWSER;
-import static com.mopub.common.UrlAction.OPEN_APP_MARKET;
+import static com.mopub.common.VolleyRequestMatcher.isUrl;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.argThat;
+import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 
@@ -33,6 +39,7 @@
     private Context context;
     @Mock private UrlHandler.ResultActions mockResultActions;
     @Mock private UrlHandler.MoPubSchemeListener mockMoPubSchemeListener;
+    @Mock private MoPubRequestQueue mockRequestQueue;
 
     @Before
     public void setUp() throws Exception {
@@ -41,14 +48,14 @@ public void setUp() throws Exception {
 
     @Test
     public void urlHandler_withoutMoPubBrowser_shouldCallOnClickSuccessButNotStartActivity() {
-        final String url = "http://some_url";
+        final String url = "http://www.mopub.com/";
 
         new UrlHandler.Builder()
                 .withSupportedUrlActions(OPEN_IN_APP_BROWSER)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
                 .withoutMoPubBrowser()
-                .build().handleUrl(context, url);
+                .build().handleResolvedUrl(context, url, true, null);
 
         verify(mockResultActions).urlHandlingSucceeded(url, OPEN_IN_APP_BROWSER);
         verifyNoMoreCallbacks();
@@ -63,7 +70,7 @@ public void urlHandler_withMatchingMoPubSchemeFinishLoad_shouldCallOnFinishLoad(
                 .withSupportedUrlActions(HANDLE_MOPUB_SCHEME)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, url);
+                .build().handleResolvedUrl(context, url, true, null);
 
         verify(mockMoPubSchemeListener).onFinishLoad();
         verifyNoMoreCallbacks();
@@ -76,7 +83,7 @@ public void urlHandler_withMatchingMoPubSchemeClose_shouldCallOnClose() {
                 .withSupportedUrlActions(HANDLE_MOPUB_SCHEME)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, url);
+                .build().handleResolvedUrl(context, url, true, null);
 
         verify(mockMoPubSchemeListener).onClose();
         verifyNoMoreCallbacks();
@@ -89,7 +96,7 @@ public void urlHandler_withMatchingMoPubSchemeFailLoad_shouldCallOnFailLoad() {
                 .withSupportedUrlActions(HANDLE_MOPUB_SCHEME)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, url);
+                .build().handleResolvedUrl(context, url, true, null);
 
         verify(mockMoPubSchemeListener).onFailLoad();
         verifyNoMoreCallbacks();
@@ -105,7 +112,7 @@ public void urlHandler_withMatchingAboutSchemeUrl_shouldIgnoreClick() {
                         HANDLE_PHONE_SCHEME)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, url);
+                .build().handleResolvedUrl(context, url, true, null);
 
         verifyNoMoreCallbacks();
         verifyNoStartedActivity();
@@ -150,7 +157,7 @@ public void urlHandler_withMatchingPhoneSchemeUrl_shouldStartActivity() {
                         OPEN_IN_APP_BROWSER, HANDLE_PHONE_SCHEME, OPEN_NATIVE_BROWSER, HANDLE_SHARE_TWEET)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, url);
+                .build().handleResolvedUrl(context, url, true, null);
 
         final Intent startedActivity = Robolectric.getShadowApplication().peekNextStartedActivity();
         assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_VIEW);
@@ -159,7 +166,7 @@ public void urlHandler_withMatchingPhoneSchemeUrl_shouldStartActivity() {
 
     @Test
     public void urlHandler_withValidNativeBrowserUrl_shouldCallOnClickSuccess_shouldStartActivity() {
-        final String urlToLoad = "some_url";
+        final String urlToLoad = "http://www.mopub.com/";
         final String url = "mopubnativebrowser://navigate?url=" + urlToLoad;
 
         new UrlHandler.Builder()
@@ -167,7 +174,7 @@ public void urlHandler_withValidNativeBrowserUrl_shouldCallOnClickSuccess_should
                         OPEN_IN_APP_BROWSER, HANDLE_PHONE_SCHEME, OPEN_NATIVE_BROWSER, HANDLE_SHARE_TWEET)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, url);
+                .build().handleUrl(context, url, true, null);
 
         verify(mockResultActions).urlHandlingSucceeded(url, OPEN_NATIVE_BROWSER);
         verifyNoMoreCallbacks();
@@ -185,7 +192,7 @@ public void urlHandler_withMatchingInAppBrowserHttpUrl_shouldCallOnClickSuccess_
                         OPEN_IN_APP_BROWSER, HANDLE_PHONE_SCHEME, OPEN_NATIVE_BROWSER, HANDLE_SHARE_TWEET)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, url);
+                .build().handleResolvedUrl(context, url, true, null);
 
         verify(mockResultActions).urlHandlingSucceeded(url, OPEN_IN_APP_BROWSER);
         verifyNoMoreCallbacks();
@@ -197,14 +204,14 @@ public void urlHandler_withMatchingInAppBrowserHttpUrl_shouldCallOnClickSuccess_
 
     @Test
     public void urlHandler_withMatchingInAppBrowserHttpsUrl_shouldCallOnClickSuccess_shouldStartActivity() {
-        final String url = "https://some_url";
+        final String url = "https://www.mopub.com/";
 
         new UrlHandler.Builder()
                 .withSupportedUrlActions(IGNORE_ABOUT_SCHEME, HANDLE_MOPUB_SCHEME, FOLLOW_DEEP_LINK,
                         OPEN_IN_APP_BROWSER, HANDLE_PHONE_SCHEME, OPEN_NATIVE_BROWSER, HANDLE_SHARE_TWEET)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, url);
+                .build().handleResolvedUrl(context, url, true, null);
 
         verify(mockResultActions).urlHandlingSucceeded(url, OPEN_IN_APP_BROWSER);
         verifyNoMoreCallbacks();
@@ -221,7 +228,7 @@ public void urlHandler_withMatchingShareUrl_shouldCallOnClickSuccess_shouldStart
         new UrlHandler.Builder()
                 .withSupportedUrlActions(HANDLE_SHARE_TWEET)
                 .withResultActions(mockResultActions)
-                .build().handleUrl(context, shareTweetUrl);
+                .build().handleResolvedUrl(context, shareTweetUrl, true, null);
 
         verify(mockResultActions).urlHandlingSucceeded(shareTweetUrl, HANDLE_SHARE_TWEET);
         verifyNoMoreCallbacks();
@@ -232,14 +239,13 @@ public void urlHandler_withMatchingShareUrl_shouldCallOnClickSuccess_shouldStart
     @Test
     public void urlHandler_withMatchingDeepLinkUrl_shouldCallOnClickSuccess_shouldStartActivity() {
         final String deepLinkUrl = "appscheme://host";
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
-                Uri.parse(deepLinkUrl)), new ResolveInfo());
+        makeDeeplinkResolvable(deepLinkUrl);
 
         new UrlHandler.Builder()
                 .withSupportedUrlActions(FOLLOW_DEEP_LINK)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, deepLinkUrl);
+                .build().handleResolvedUrl(context, deepLinkUrl, true, null);
 
         verify(mockResultActions).urlHandlingSucceeded(deepLinkUrl, FOLLOW_DEEP_LINK);
         verifyNoMoreCallbacks();
@@ -248,6 +254,261 @@ public void urlHandler_withMatchingDeepLinkUrl_shouldCallOnClickSuccess_shouldSt
         assertThat(startedActivity.getData()).isEqualTo(Uri.parse(deepLinkUrl));
     }
 
+    @Test
+    public void urlHandler_withMatchingDeeplinkPlus_shouldCallOnClickSuccess_shouldStartActivity() {
+        final String primaryUrl = "twitter://timeline";
+        final String deeplinkPlusUrl = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl);
+        makeDeeplinkResolvable("twitter://timeline");
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
+                .withResultActions(mockResultActions)
+                .build().handleResolvedUrl(context, deeplinkPlusUrl, true, null);
+
+        verify(mockResultActions).urlHandlingSucceeded(deeplinkPlusUrl, FOLLOW_DEEP_LINK_WITH_FALLBACK);
+        verifyNoMoreCallbacks();
+        final Intent startedActivity = Robolectric.getShadowApplication().peekNextStartedActivity();
+        assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_VIEW);
+        assertThat(startedActivity.getData()).isEqualTo(Uri.parse(primaryUrl));
+    }
+
+    @Test
+    public void urlHandler_withMatchingUnresolvableDeeplinkPlus_withResolvableFallback_shouldResolveRedirects_shouldCallOnClickSuccess_shouldStartActivity() {
+        final String primaryUrl = "missingApp://somePath";
+        final String fallbackUrl = "http://www.twitter.com";
+        final String fallbackUrlAfterRedirects = "https://twitter.com/";
+        final String deeplinkPlusUrl = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
+                + "&fallbackUrl=" + Uri.encode(fallbackUrl);
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK, OPEN_IN_APP_BROWSER)
+                .withResultActions(mockResultActions)
+                .build().handleUrl(context, deeplinkPlusUrl);
+
+        Robolectric.runBackgroundTasks();
+        verify(mockResultActions).urlHandlingSucceeded(fallbackUrlAfterRedirects,
+                OPEN_IN_APP_BROWSER);
+        verifyNoMoreCallbacks();
+        final Intent startedActivity = Robolectric.getShadowApplication().peekNextStartedActivity();
+        assertThat(startedActivity.getComponent().getClassName())
+                .isEqualTo(MoPubBrowser.class.getName());
+        assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY))
+                .isEqualTo(fallbackUrlAfterRedirects);
+    }
+
+    @Test
+    public void urlHandler_withMatchingUnresolvableDeeplinkPlus_withUnresolvableFallback_shouldDoNothing() {
+        final String primaryUrl = "missingApp://somePath";
+        final String fallbackUrl = "unresolvableUrl";
+        final String deeplinkPlusUrl = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
+                + "&fallbackUrl=" + Uri.encode(fallbackUrl);
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK, FOLLOW_DEEP_LINK)
+                .withResultActions(mockResultActions)
+                .build().handleResolvedUrl(context, deeplinkPlusUrl, true, null);
+
+        verify(mockResultActions).urlHandlingFailed(fallbackUrl, NOOP);
+        verifyNoMoreCallbacks();
+    }
+
+    @Test
+    public void urlHandler_withDeeplinkPlus_shouldTriggerPrimaryTracker() {
+        final String primaryUrl = "twitter://timeline";
+        final String primaryTracker = "http://ads.twitter.com/tracking?pubId=1234&userId=5678";
+        final String fallbackUrl = "http://twitter.com";
+        final String fallbackTracker =
+                "http://ads.twitter.com/fallbackTracking?pubId=1234&userId=5678";
+        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
+                + "&primaryTrackingUrl=" + Uri.encode(primaryTracker)
+                + "&fallbackUrl=" + Uri.encode(fallbackUrl)
+                + "&fallbackTrackingUrl=" + Uri.encode(fallbackTracker);
+        makeDeeplinkResolvable(primaryUrl);
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
+                .build().handleResolvedUrl(context, url, true, null);
+
+        verify(mockRequestQueue).add(argThat(isUrl(primaryTracker)));
+        verify(mockRequestQueue, never()).add(argThat(isUrl(fallbackTracker)));
+    }
+
+    @Test
+    public void urlHandler_withDeeplinkPlus_shouldTriggerMultiplePrimaryTrackers() {
+        final String primaryUrl = "twitter://timeline";
+        final String primaryTracker1 = "http://ads.twitter.com/tracking?pubId=1234&userId=5678";
+        final String primaryTracker2 = "http://ads.mopub.com/tracking?pubId=4321&userId=8765";
+        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
+                + "&primaryTrackingUrl=" + Uri.encode(primaryTracker1)
+                + "&primaryTrackingUrl=" + Uri.encode(primaryTracker2);
+        makeDeeplinkResolvable(primaryUrl);
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
+                .build().handleResolvedUrl(context, url, true, null);
+
+        verify(mockRequestQueue).add(argThat(isUrl(primaryTracker1)));
+        verify(mockRequestQueue).add(argThat(isUrl(primaryTracker2)));
+    }
+
+    @Test
+    public void urlHandler_withDeeplinkPlus_withResolvableFallback_shouldTriggerFallbackTracker() {
+        final String primaryUrl = "missingApp://somePath";
+        final String fallbackUrl = "http://twitter.com";
+        final String primaryTracker = "http://ads.twitter.com/tracking?pubId=1234&userId=5678";
+        final String fallbackTracker =
+                "http://ads.twitter.com/fallbackTracking?pubId=1234&userId=5678";
+        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
+                + "&primaryTrackingUrl=" + Uri.encode(primaryTracker)
+                + "&fallbackUrl=" + Uri.encode(fallbackUrl)
+                + "&fallbackTrackingUrl=" + Uri.encode(fallbackTracker);
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK, OPEN_IN_APP_BROWSER)
+                .build().handleResolvedUrl(context, url, true, null);
+
+        verify(mockRequestQueue).add(argThat(isUrl(fallbackTracker)));
+        verify(mockRequestQueue, never()).add(argThat(isUrl(primaryTracker)));
+    }
+
+    @Test
+    public void urlHandler_withDeeplinkPlus_withResolvableFallback_shouldTriggerMultiplePrimaryTrackers() {
+        final String primaryUrl = "missingApp://somePath";
+        final String fallbackUrl = "http://twitter.com";
+        final String fallbackTracker1 = "http://ads.twitter.com/tracking?pubId=1234&userId=5678";
+        final String fallbackTracker2 = "http://ads.mopub.com/tracking?pubId=4321&userId=8765";
+        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
+                + "&fallbackUrl=" + Uri.encode(fallbackUrl)
+                + "&fallbackTrackingUrl=" + Uri.encode(fallbackTracker1)
+                + "&fallbackTrackingUrl=" + Uri.encode(fallbackTracker2);
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK, OPEN_IN_APP_BROWSER)
+                .build().handleResolvedUrl(context, url, true, null);
+
+        verify(mockRequestQueue).add(argThat(isUrl(fallbackTracker1)));
+        verify(mockRequestQueue).add(argThat(isUrl(fallbackTracker2)));
+    }
+
+    @Test
+    public void urlHandler_withUppercasedDeeplinkPlus_shouldBeHandled() {
+        final String primaryUrl = "twitter://timeline";
+        final String url = "DeEpLiNk+://navigate?primaryUrl=" + Uri.encode(primaryUrl);
+        makeDeeplinkResolvable(primaryUrl);
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
+                .withResultActions(mockResultActions)
+                .build().handleResolvedUrl(context, url, true, null);
+
+        verify(mockResultActions).urlHandlingSucceeded(url, FOLLOW_DEEP_LINK_WITH_FALLBACK);
+    }
+
+    @Test
+    public void urlHandler_withdDeeplinkPlus_withUppercasedNavigate_shouldBeHandled() {
+        final String primaryUrl = "twitter://timeline";
+        final String url = "deeplink+://NaViGaTe?primaryUrl=" + Uri.encode(primaryUrl);
+        makeDeeplinkResolvable(primaryUrl);
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
+                .withResultActions(mockResultActions)
+                .build().handleResolvedUrl(context, url, true, null);
+
+        verify(mockResultActions).urlHandlingSucceeded(url, FOLLOW_DEEP_LINK_WITH_FALLBACK);
+    }
+
+    @Test
+    public void urlHandler_withoutMatchingDeeplinkPlus_shouldDoNothing() {
+        final String url = "NOTdeeplink+://navigate?primaryUrl=twitter%3A%2F%2Ftimeline";
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
+                .withResultActions(mockResultActions)
+                .build().handleResolvedUrl(context, url, true, null);
+
+        verify(mockResultActions).urlHandlingFailed(url, NOOP);
+        verifyNoMoreCallbacks();
+        verifyNoStartedActivity();
+    }
+
+    @Test
+    public void urlHandler_withDeeplinkPlus_withoutNavigate_shouldDoNothing() {
+        final String url = "deeplink+://NOTnavigate?primaryUrl=twitter%3A%2F%2Ftimeline";
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
+                .withResultActions(mockResultActions)
+                .build().handleResolvedUrl(context, url, true, null);
+
+        verify(mockResultActions).urlHandlingFailed(url, FOLLOW_DEEP_LINK_WITH_FALLBACK);
+        verifyNoMoreCallbacks();
+        verifyNoStartedActivity();
+    }
+
+    @Test
+    public void urlHandler_withNestedDeeplinkPlus_shouldDoNothing() {
+        final String deeplink = "deeplink+://navigate?primaryUrl=twitter%3A%2F%2Ftimeline";
+        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(deeplink);
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
+                .withResultActions(mockResultActions)
+                .build().handleResolvedUrl(context, url, true, null);
+
+        verify(mockResultActions).urlHandlingFailed(url, FOLLOW_DEEP_LINK_WITH_FALLBACK);
+        verifyNoMoreCallbacks();
+        verifyNoStartedActivity();
+    }
+
+    @Test
+    public void urlHandler_withDeeplinkPlus_withDeeplinkPlusAsFallback_shouldDoNothing() {
+        final String deeplink = "deeplink+://navigate?primaryUrl=twitter%3A%2F%2Ftimeline";
+        final String url = "deeplink+://navigate?primaryUrl=missingApp%3A%2F%2FsomePath"
+                + "&fallbackUrl=" + Uri.encode(deeplink);
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
+                .withResultActions(mockResultActions)
+                .build().handleResolvedUrl(context, url, true, null);
+
+        verify(mockResultActions).urlHandlingFailed(url, FOLLOW_DEEP_LINK_WITH_FALLBACK);
+        verifyNoMoreCallbacks();
+        verifyNoStartedActivity();
+    }
+
+    @Test
+    public void urlHandler_withDeeplinkPlus_withInvalidPrimaryUrl_shouldDoNothing() {
+        final String url = "deeplink+://navigate?primaryUrl=INVALID";
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
+                .withResultActions(mockResultActions)
+                .build().handleResolvedUrl(context, url, true, null);
+
+        verify(mockResultActions).urlHandlingFailed(url, FOLLOW_DEEP_LINK_WITH_FALLBACK);
+        verifyNoMoreCallbacks();
+        verifyNoStartedActivity();
+    }
+
+    @Test
+    public void urlHandler_withDeeplinkPlus_withDecodedPrimaryUrl_shouldDoNothing() {
+        final String url = "deeplink+://navigate?primaryUrl=twitter://timeline";
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
+                .withResultActions(mockResultActions)
+                .build().handleResolvedUrl(context, url, true, null);
+
+        verify(mockResultActions).urlHandlingFailed(url, FOLLOW_DEEP_LINK_WITH_FALLBACK);
+        verifyNoMoreCallbacks();
+        verifyNoStartedActivity();
+    }
+
     @Test
     public void urlHandler_withDualMatchingUnresolvableUrlActions_shouldCallOnClickFailOnLastMatchedAction() {
         final String url = "mopub://invalid";
@@ -256,7 +517,7 @@ public void urlHandler_withDualMatchingUnresolvableUrlActions_shouldCallOnClickF
                 .withSupportedUrlActions(HANDLE_MOPUB_SCHEME, FOLLOW_DEEP_LINK)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, url);
+                .build().handleResolvedUrl(context, url, true, null);
 
         verify(mockResultActions).urlHandlingFailed(url, FOLLOW_DEEP_LINK);
         verifyNoMoreCallbacks();
@@ -269,7 +530,7 @@ public void urlHandler_withShareTweetAndDeepLink_shouldCallOnClickFailOnLastMatc
         new UrlHandler.Builder()
                 .withSupportedUrlActions(HANDLE_SHARE_TWEET, FOLLOW_DEEP_LINK)
                 .withResultActions(mockResultActions)
-                .build().handleUrl(context, url);
+                .build().handleResolvedUrl(context, url, true, null);
 
         verify(mockResultActions).urlHandlingFailed(url, FOLLOW_DEEP_LINK);
         verifyNoMoreCallbacks();
@@ -277,7 +538,7 @@ public void urlHandler_withShareTweetAndDeepLink_shouldCallOnClickFailOnLastMatc
 
     @Test
     public void urlHandler_withNoConfiguration_shouldDoNothing() {
-        new UrlHandler.Builder().build().handleUrl(context, "");
+        new UrlHandler.Builder().build().handleResolvedUrl(context, "", true, null);
 
         verifyNoMoreCallbacks();
     }
@@ -288,7 +549,7 @@ public void urlHandler_withoutDestinationUrl_shouldNotError() {
                 .withSupportedUrlActions(IGNORE_ABOUT_SCHEME)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, "");
+                .build().handleResolvedUrl(context, "", true, null);
 
         verify(mockResultActions).urlHandlingFailed("", NOOP);
         verifyNoMoreCallbacks();
@@ -299,7 +560,7 @@ public void urlHandler_withoutSupportedUrlActions_shouldNotError() {
         new UrlHandler.Builder()
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, "about:blank");
+                .build().handleResolvedUrl(context, "about:blank", true, null);
 
         verify(mockResultActions).urlHandlingFailed("about:blank", NOOP);
         verifyNoMoreCallbacks();
@@ -310,7 +571,7 @@ public void urlHandler_withoutClickListener_shouldNotError() {
         new UrlHandler.Builder()
                 .withSupportedUrlActions(IGNORE_ABOUT_SCHEME)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, "about:blank");
+                .build().handleResolvedUrl(context, "about:blank", true, null);
 
         verifyNoMoreCallbacks();
     }
@@ -320,7 +581,7 @@ public void urlHandler_withoutMoPubSchemeListener_shouldNotError() {
         new UrlHandler.Builder()
                 .withSupportedUrlActions(IGNORE_ABOUT_SCHEME)
                 .withResultActions(mockResultActions)
-                .build().handleUrl(context, "about:blank");
+                .build().handleResolvedUrl(context, "about:blank", true, null);
 
         verifyNoMoreCallbacks();
     }
@@ -332,7 +593,7 @@ public void urlHandler_withoutMoPubBrowser_shouldNotError() {
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
                 .withoutMoPubBrowser()
-                .build().handleUrl(context, "about:blank");
+                .build().handleResolvedUrl(context, "about:blank", true, null);
 
         verifyNoMoreCallbacks();
     }
@@ -392,8 +653,7 @@ public void urlHandler_withoutMatchingMoPubSchemeUrlAction_shouldCallUrlHandling
     @Test
     public void urlHandler_withoutMatchingDeepLinkUrlAction_shouldCallUrlHandlingFailed() {
         final String deepLinkUrl = "appscheme://host";
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
-                Uri.parse(deepLinkUrl)), new ResolveInfo());
+        makeDeeplinkResolvable(deepLinkUrl);
         assertCallbackWithoutMatchingSupportedUrlAction(deepLinkUrl, IGNORE_ABOUT_SCHEME,
                 HANDLE_MOPUB_SCHEME, OPEN_IN_APP_BROWSER, HANDLE_PHONE_SCHEME, OPEN_NATIVE_BROWSER,
                 HANDLE_SHARE_TWEET);
@@ -434,7 +694,7 @@ public void urlHandler_withNullDestinationURL_shouldDoNothing() {
                         OPEN_IN_APP_BROWSER, HANDLE_PHONE_SCHEME, OPEN_NATIVE_BROWSER, HANDLE_SHARE_TWEET)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, nullUrl);
+                .build().handleResolvedUrl(context, nullUrl, true, null);
 
         verify(mockResultActions).urlHandlingFailed(nullUrl, NOOP);
         verifyNoMoreCallbacks();
@@ -449,7 +709,7 @@ public void urlHandler_withEmptyDestinationURL_shouldDoNothing() {
                         OPEN_IN_APP_BROWSER, HANDLE_PHONE_SCHEME, OPEN_NATIVE_BROWSER, HANDLE_SHARE_TWEET)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, emptyUrl);
+                .build().handleResolvedUrl(context, emptyUrl, true, null);
 
         verify(mockResultActions).urlHandlingFailed(emptyUrl, NOOP);
         verifyNoMoreCallbacks();
@@ -465,7 +725,7 @@ public void urlHandler_withInvalidDestinationURL_shouldDoNothing() {
                         OPEN_IN_APP_BROWSER, HANDLE_PHONE_SCHEME, OPEN_NATIVE_BROWSER, HANDLE_SHARE_TWEET)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, invalidUrl);
+                .build().handleResolvedUrl(context, invalidUrl, true, null);
 
         verify(mockResultActions).urlHandlingFailed(invalidUrl, NOOP);
         verifyNoMoreCallbacks();
@@ -478,7 +738,7 @@ public void urlHandler_withMatchingMoPubSchemeWithoutMoPubSchemeListener_shouldD
         new UrlHandler.Builder()
                 .withSupportedUrlActions(HANDLE_MOPUB_SCHEME)
                 .withResultActions(mockResultActions)
-                .build().handleUrl(context, url);
+                .build().handleResolvedUrl(context, url, true, null);
 
         verifyNoMoreCallbacks();
     }
@@ -490,7 +750,7 @@ public void urlHandler_withInvalidMoPubSchemeCustom_shouldNotError() {
                 .withSupportedUrlActions(HANDLE_MOPUB_SCHEME)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, url);
+                .build().handleResolvedUrl(context, url, true, null);
 
         verify(mockResultActions).urlHandlingFailed(url, HANDLE_MOPUB_SCHEME);
         verifyNoMoreCallbacks();
@@ -504,7 +764,7 @@ public void urlHandler_withInvalidNativeBrowserUrl_shouldCallUrlHandlingFailed()
                 .withSupportedUrlActions(OPEN_NATIVE_BROWSER)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, url);
+                .build().handleResolvedUrl(context, url, true, null);
 
         verify(mockResultActions).urlHandlingFailed(url, OPEN_NATIVE_BROWSER);
         verifyNoMoreCallbacks();
@@ -519,7 +779,7 @@ public void urlHandler_withInvalidHostInShareTweetUrl_shouldCallUrlHandlingFaile
                 .withSupportedUrlActions(HANDLE_SHARE_TWEET)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, url);
+                .build().handleResolvedUrl(context, url, true, null);
 
         verify(mockResultActions).urlHandlingFailed(url, NOOP);
         verifyNoMoreCallbacks();
@@ -534,7 +794,7 @@ public void urlHandler_withMissingQueryParametersInShareTweetUrl_shouldCallUrlHa
                 .withSupportedUrlActions(HANDLE_SHARE_TWEET)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, url);
+                .build().handleResolvedUrl(context, url, true, null);
 
         verify(mockResultActions).urlHandlingFailed(url, HANDLE_SHARE_TWEET);
         verifyNoMoreCallbacks();
@@ -549,7 +809,7 @@ public void urlHandler_withEmptyQueryParametersInShareTweetUrl_shouldCallUrlHand
                 .withSupportedUrlActions(HANDLE_SHARE_TWEET)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, url);
+                .build().handleResolvedUrl(context, url, true, null);
 
         verify(mockResultActions).urlHandlingFailed(url, HANDLE_SHARE_TWEET);
         verifyNoMoreCallbacks();
@@ -561,14 +821,13 @@ public void urlHandler_withMatchingUnresolvableDeepLinkUrl_shouldCallUrlHandling
         final String deepLinkUrl = "appscheme://host";
         // The following code would make this url resolvable, so avoiding it to test for an
         // unresolvable url (yet included for documentation purposes).
-        //  Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
-        //          Uri.parse(deepLinkUrl)), new ResolveInfo());
+        //makeDeeplinkResolvable(deepLinkUrl);
 
         new UrlHandler.Builder()
                 .withSupportedUrlActions(FOLLOW_DEEP_LINK)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, deepLinkUrl);
+                .build().handleResolvedUrl(context, deepLinkUrl, true, null);
 
         verify(mockResultActions).urlHandlingFailed(deepLinkUrl, FOLLOW_DEEP_LINK);
         verifyNoMoreCallbacks();
@@ -580,7 +839,7 @@ private void assertPhoneSchemeCallback(@NonNull final String url) {
                 .withSupportedUrlActions(HANDLE_PHONE_SCHEME)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, url);
+                .build().handleResolvedUrl(context, url, true, null);
 
         verify(mockResultActions).urlHandlingSucceeded(url, HANDLE_PHONE_SCHEME);
         verifyNoMoreCallbacks();
@@ -598,7 +857,7 @@ private void assertCallbackWithoutMatchingUrl(@NonNull final UrlAction urlAction
                 .withSupportedUrlActions(urlAction)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, url);
+                .build().handleResolvedUrl(context, url, true, null);
         verify(mockResultActions).urlHandlingFailed(url, expectedFailUrlAction);
         verifyNoMoreCallbacks();
     }
@@ -606,10 +865,10 @@ private void assertCallbackWithoutMatchingUrl(@NonNull final UrlAction urlAction
     private void assertCallbackWithoutMatchingSupportedUrlAction(@NonNull final String url,
             @NonNull final UrlAction... otherTypes) {
         new UrlHandler.Builder()
-                .withSupportedUrlActions(UrlAction.NOOP, otherTypes)
+                .withSupportedUrlActions(NOOP, otherTypes)
                 .withResultActions(mockResultActions)
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, url);
+                .build().handleResolvedUrl(context, url, true, null);
         verify(mockResultActions).urlHandlingFailed(url, NOOP);
         verifyNoMoreCallbacks();
     }
@@ -622,4 +881,9 @@ private void verifyNoMoreCallbacks() {
     private void verifyNoStartedActivity() {
         assertThat(Robolectric.getShadowApplication().peekNextStartedActivity()).isNull();
     }
+
+    private void makeDeeplinkResolvable(String deeplink) {
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
+                Uri.parse(deeplink)), new ResolveInfo());
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/DeviceUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/DeviceUtilsTest.java
index b7f25039..4a7bf40a 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/DeviceUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/DeviceUtilsTest.java
@@ -53,6 +53,14 @@ public void getOrientation_whenPortrait_shouldReturnPortrait() {
         assertThat(DeviceUtils.getScreenOrientation(testActivity)).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
     }
 
+    @Test
+    public void getOrientation_whenAlsoPortrait_shouldReturnPortrait() {
+        testResources.getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_270);
+
+        assertThat(DeviceUtils.getScreenOrientation(testActivity)).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+    }
+
     @Test
     public void getOrientation_whenReversePortrait_shouldReturnReversePortrait() {
         testResources.getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
@@ -60,6 +68,14 @@ public void getOrientation_whenReversePortrait_shouldReturnReversePortrait() {
 
         assertThat(DeviceUtils.getScreenOrientation(testActivity)).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT);
     }
+
+    @Test
+    public void getOrientation_whenAlsoReversePortrait_shouldReturnReversePortrait() {
+        testResources.getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_90);
+
+        assertThat(DeviceUtils.getScreenOrientation(testActivity)).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT);
+    }
     
     @Test
     public void lockOrientation_toLandscapeWhenLandscape_shouldRemainTheSame() throws Exception {
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java
index 93d8fb1f..f58f8c37 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java
@@ -56,4 +56,16 @@ public void parseDouble_withInvalidObjectType_shouldThrowClassCastException() th
             // pass
         }
     }
-}
\ No newline at end of file
+
+    @Test
+    public void convertMillisecondsToSecondsRoundedUp_shouldReturnLongMillisecondsAsRoundedUpLongSeconds() throws Exception {
+        assertThat(Numbers.convertMillisecondsToSecondsRoundedUp(0)).isEqualTo(0);
+
+        assertThat(Numbers.convertMillisecondsToSecondsRoundedUp(1)).isEqualTo(1);
+        assertThat(Numbers.convertMillisecondsToSecondsRoundedUp(999)).isEqualTo(1);
+        assertThat(Numbers.convertMillisecondsToSecondsRoundedUp(1000)).isEqualTo(1);
+
+        assertThat(Numbers.convertMillisecondsToSecondsRoundedUp(1001)).isEqualTo(2);
+        assertThat(Numbers.convertMillisecondsToSecondsRoundedUp(100000)).isEqualTo(100);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java
index f0017117..940f9f07 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java
@@ -5,7 +5,6 @@
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Utils;
-import com.mopub.mobileads.util.vast.VastVideoConfiguration;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -25,11 +24,11 @@
     private static final String MRAID_VIDEO_URL = "http://mraidVideo";
 
     private long testBroadcastIdentifier;
-    private VastVideoConfiguration vastVideoConfiguration;
+    private VastVideoConfig mVastVideoConfig;
 
     @Before
     public void setup() throws Exception {
-        vastVideoConfiguration = mock(VastVideoConfiguration.class, withSettings().serializable());
+        mVastVideoConfig = mock(VastVideoConfig.class, withSettings().serializable());
         testBroadcastIdentifier = 1234;
     }
 
@@ -41,19 +40,19 @@ public void startMraid_shouldStartMraidVideoPlayerActivity() throws Exception {
 
     @Test
     public void startVast_shouldStartMraidVideoPlayerActivity() throws Exception {
-        startVast(Robolectric.buildActivity(Activity.class).create().get(), vastVideoConfiguration, testBroadcastIdentifier);
-        assertVastVideoPlayerActivityStarted(MraidVideoPlayerActivity.class, vastVideoConfiguration, testBroadcastIdentifier);
+        startVast(Robolectric.buildActivity(Activity.class).create().get(), mVastVideoConfig, testBroadcastIdentifier);
+        assertVastVideoPlayerActivityStarted(MraidVideoPlayerActivity.class, mVastVideoConfig, testBroadcastIdentifier);
     }
 
     static void assertVastVideoPlayerActivityStarted(final Class clazz,
-            final VastVideoConfiguration vastVideoConfiguration,
+            final VastVideoConfig vastVideoConfig,
             final long broadcastIdentifier) {
         final Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
         assertIntentAndBroadcastIdentifierAreCorrect(intent, clazz, broadcastIdentifier);
 
-        final VastVideoConfiguration expectedVastVideoConfiguration =
-                (VastVideoConfiguration) intent.getSerializableExtra(VastVideoViewController.VAST_VIDEO_CONFIGURATION);
-        assertThat(expectedVastVideoConfiguration).isEqualsToByComparingFields(vastVideoConfiguration);
+        final VastVideoConfig expectedVastVideoConfig =
+                (VastVideoConfig) intent.getSerializableExtra(VastVideoViewController.VAST_VIDEO_CONFIG);
+        assertThat(expectedVastVideoConfig).isEqualsToByComparingFields(vastVideoConfig);
     }
 
     public static void assertMraidVideoPlayerActivityStarted(final Class clazz, final String url) {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
index 4d9e765a..9a3e3090 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
@@ -10,7 +10,6 @@
 
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.util.vast.VastVideoConfiguration;
 import com.mopub.mraid.MraidVideoViewController;
 
 import org.junit.Before;
@@ -177,9 +176,9 @@ private void initializeSubjectForMraid() {
 
     private void initializeSubjectForVast() {
         intent.putExtra(BaseVideoPlayerActivity.VIDEO_CLASS_EXTRAS_KEY, "vast");
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("video_path");
-        intent.putExtra(VastVideoViewController.VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("video_path");
+        intent.putExtra(VastVideoViewController.VAST_VIDEO_CONFIG, vastVideoConfig);
 
         subject = Robolectric.buildActivity(MraidVideoPlayerActivity.class)
                 .withIntent(intent)
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastAdXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastAdXmlManagerTest.java
new file mode 100644
index 00000000..0b20146d
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastAdXmlManagerTest.java
@@ -0,0 +1,172 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.VastUtils;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.w3c.dom.Node;
+
+import static com.mopub.mobileads.test.support.VastUtils.createNode;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class VastAdXmlManagerTest {
+
+    private VastAdXmlManager subject;
+
+    @Test
+    public void getInLineXmlManager_shouldReturnInLineXmlManager() throws Exception {
+        String adXml = "<Ad id=\"223626102\">" +
+                "    <InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inline]]>" +
+                "          </Impression>" +
+                "    </InLine>" +
+                "    <Wrapper>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/wrapper]]>" +
+                "          </Impression>" +
+                "    </Wrapper>" +
+                "</Ad>";
+
+        Node adNode = createNode(adXml);
+        subject = new VastAdXmlManager(adNode);
+
+        VastInLineXmlManager vastInLineXmlManager = subject.getInLineXmlManager();
+        assertThat(VastUtils.vastTrackersToStrings(vastInLineXmlManager.getImpressionTrackers()))
+                .containsOnly("http://impression/m/inline");
+    }
+
+    @Test
+    public void getInLineXmlManager_withMultipleInLineNodes_shouldReturnFirstInLineXmlManager() throws Exception {
+        String adXml = "<Ad id=\"223626102\">" +
+                "    <InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "          </Impression>" +
+                "    </InLine>" +
+                "    <InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineTwo]]>" +
+                "          </Impression>" +
+                "    </InLine>" +
+                "    <Wrapper>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/wrapper]]>" +
+                "          </Impression>" +
+                "    </Wrapper>" +
+                "</Ad>";
+
+        Node adNode = createNode(adXml);
+        subject = new VastAdXmlManager(adNode);
+
+        VastInLineXmlManager vastInLineXmlManager = subject.getInLineXmlManager();
+        assertThat(VastUtils.vastTrackersToStrings(vastInLineXmlManager.getImpressionTrackers()))
+                .containsOnly("http://impression/m/inlineOne");
+    }
+
+    @Test
+    public void getInLineXmlManager_withNoInLineNodes_shouldReturnNull() throws Exception {
+        String adXml = "<Ad id=\"223626102\">" +
+                "    <Wrapper>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/wrapper]]>" +
+                "          </Impression>" +
+                "    </Wrapper>" +
+                "</Ad>";
+
+        Node adNode = createNode(adXml);
+        subject = new VastAdXmlManager(adNode);
+
+        assertThat(subject.getInLineXmlManager()).isNull();
+    }
+
+    @Test
+    public void getWrapperXmlManager_shouldReturnWrapperXmlManager() throws Exception {
+        String adXml = "<Ad id=\"223626102\">" +
+                "    <InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inline]]>" +
+                "          </Impression>" +
+                "    </InLine>" +
+                "    <Wrapper>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/wrapper]]>" +
+                "          </Impression>" +
+                "    </Wrapper>" +
+                "</Ad>";
+
+        Node adNode = createNode(adXml);
+        subject = new VastAdXmlManager(adNode);
+
+        VastWrapperXmlManager vastWrapperXmlManager = subject.getWrapperXmlManager();
+        assertThat(VastUtils.vastTrackersToStrings(vastWrapperXmlManager.getImpressionTrackers()))
+                .containsOnly("http://impression/m/wrapper");
+    }
+
+    @Test
+    public void getWrapperXmlManager_withMultipleWrapperNodes_shouldReturnFirstWrapperXmlManager() throws Exception {
+        String adXml = "<Ad id=\"223626102\">" +
+                "    <InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "          </Impression>" +
+                "    </InLine>" +
+                "    <Wrapper>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/wrapperOne]]>" +
+                "          </Impression>" +
+                "    </Wrapper>" +
+                "    <Wrapper>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/wrapperTwo]]>" +
+                "          </Impression>" +
+                "    </Wrapper>" +
+                "</Ad>";
+
+        Node adNode = createNode(adXml);
+        subject = new VastAdXmlManager(adNode);
+
+        VastWrapperXmlManager vastWrapperXmlManager = subject.getWrapperXmlManager();
+        assertThat(VastUtils.vastTrackersToStrings(vastWrapperXmlManager.getImpressionTrackers()))
+                .containsOnly("http://impression/m/wrapperOne");
+    }
+
+    @Test
+    public void getWrapperXmlManager_withNoWrapperNodes_shouldReturnNull() throws Exception {
+        String adXml = "<Ad id=\"223626102\">" +
+                "    <InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inline]]>" +
+                "          </Impression>" +
+                "    </InLine>" +
+                "</Ad>";
+
+        Node adNode = createNode(adXml);
+        subject = new VastAdXmlManager(adNode);
+
+        assertThat(subject.getWrapperXmlManager()).isNull();
+    }
+
+    @Test
+    public void getSequence_shouldReturnSequence() throws Exception {
+        String adXml = "<Ad id=\"223626102\" sequence=\"42\">" +
+                "    <InLine>" +
+                "        <Impression id=\"DART\">" +
+                "            <![CDATA[http://impression/m/inline]]>" +
+                "        </Impression>" +
+                "    </InLine>" +
+                "    <Wrapper>" +
+                "        <Impression id=\"DART\">" +
+                "            <![CDATA[http://impression/m/wrapper]]>" +
+                "        </Impression>" +
+                "    </Wrapper>" +
+                "</Ad>";
+
+        Node adNode = createNode(adXml);
+        subject = new VastAdXmlManager(adNode);
+
+        assertThat(subject.getSequence()).isEqualTo("42");
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManagerTest.java
new file mode 100644
index 00000000..143b211a
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManagerTest.java
@@ -0,0 +1,334 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.VastUtils;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.w3c.dom.Node;
+
+import java.util.List;
+
+import static com.mopub.mobileads.test.support.VastUtils.createNode;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class VastBaseInLineWrapperXmlManagerTest {
+
+    private VastBaseInLineWrapperXmlManager subject;
+
+    @Test
+    public void getImpressionTrackers_shouldReturnImpressionTrackers() throws Exception {
+        String inLineXml = "<InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "          </Impression>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineTwo]]>" +
+                "          </Impression>" +
+                "          <Creatives>" +
+                "                 <Creative>" +
+                "                       <Linear>" +
+                "                           <TrackingEvents>" +
+                "                               <Tracking event=\"close\">" +
+                "                                   <![CDATA[http://tracking/m/close]]>" +
+                "                               </Tracking>" +
+                "                           </TrackingEvents>" +
+                "                       </Linear>" +
+                "                 </Creative>" +
+                "          </Creatives>" +
+                "</InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        assertThat(VastUtils.vastTrackersToStrings(subject.getImpressionTrackers()))
+                .containsOnly("http://impression/m/inlineOne", "http://impression/m/inlineTwo");
+    }
+
+    @Test
+    public void getImpressionTrackers_withNoImpressionTrackers_shouldReturnEmptyList() throws Exception {
+        String inLineXml = "<InLine>" +
+                "</InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        assertThat(subject.getImpressionTrackers()).isEmpty();
+    }
+
+    @Test
+    public void getLinearXmlManagers_shouldReturnLinearXmlManagers() throws Exception {
+        String inLineXml = "<InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "          </Impression>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineTwo]]>" +
+                "          </Impression>" +
+                "          <Creatives>" +
+                "                 <Creative>" +
+                "                       <Linear>" +
+                "                           <TrackingEvents>" +
+                "                               <Tracking event=\"close\">" +
+                "                                   <![CDATA[http://tracking/m/closeOne]]>" +
+                "                               </Tracking>" +
+                "                           </TrackingEvents>" +
+                "                       </Linear>" +
+                "                       <!-- There should only be a single Linear, CompanionAds, or NonLinearAds element per Creative -->" +
+                "                       <Linear>" +
+                "                           <TrackingEvents>" +
+                "                               <Tracking event=\"close\">" +
+                "                                   <![CDATA[http://tracking/m/ignored]]>" +
+                "                               </Tracking>" +
+                "                           </TrackingEvents>" +
+                "                       </Linear>" +
+                "                 </Creative>" +
+                "                 <Creative>" +
+                "                       <NonLinearAds>" +
+                "                       </NonLinearAds>" +
+                "                 </Creative>" +
+                "                 <Creative>" +
+                "                       <Linear>" +
+                "                           <TrackingEvents>" +
+                "                               <Tracking event=\"close\">" +
+                "                                   <![CDATA[http://tracking/m/closeTwo]]>" +
+                "                               </Tracking>" +
+                "                           </TrackingEvents>" +
+                "                       </Linear>" +
+                "                 </Creative>" +
+                "          </Creatives>" +
+                "</InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        List<VastLinearXmlManager> linearXmlManagers = subject.getLinearXmlManagers();
+        assertThat(linearXmlManagers).hasSize(2);
+        assertThat(VastUtils.vastTrackersToStrings(linearXmlManagers.get(0).getVideoCloseTrackers()))
+                .containsOnly("http://tracking/m/closeOne");
+        assertThat(VastUtils.vastTrackersToStrings(linearXmlManagers.get(1).getVideoCloseTrackers()))
+                .containsOnly("http://tracking/m/closeTwo");
+    }
+
+    @Test
+    public void getLinearXmlManagers_withNoLinearNodes_shouldReturnEmptyList() throws Exception {
+        String inLineXml = "<InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "          </Impression>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineTwo]]>" +
+                "          </Impression>" +
+                "          <Creatives>" +
+                "                 <Creative>" +
+                "                       <NonLinearAds>" +
+                "                           <TrackingEvents>" +
+                "                               <Tracking event=\"close\">" +
+                "                                   <![CDATA[http://tracking/m/close]]>" +
+                "                               </Tracking>" +
+                "                           </TrackingEvents>" +
+                "                       </NonLinearAds>" +
+                "                 </Creative>" +
+                "          </Creatives>" +
+                "</InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        assertThat(subject.getLinearXmlManagers()).isEmpty();
+    }
+
+    @Test
+    public void getLinearXmlManagers_withNoCreativeNodes_shouldReturnEmptyList() throws Exception {
+        String inLineXml = "<InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "          </Impression>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineTwo]]>" +
+                "          </Impression>" +
+                "          <Creatives>" +
+                "                       <Linear>" +
+                "                           <TrackingEvents>" +
+                "                               <Tracking event=\"close\">" +
+                "                                   <![CDATA[http://tracking/m/closeTwo]]>" +
+                "                               </Tracking>" +
+                "                           </TrackingEvents>" +
+                "                       </Linear>" +
+                "          </Creatives>" +
+                "</InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        assertThat(subject.getLinearXmlManagers()).isEmpty();
+    }
+
+    @Test
+    public void getLinearXmlManagers_withNoCreativesNodes_shouldReturnEmptyList() throws Exception {
+        String inLineXml = "<InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "          </Impression>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineTwo]]>" +
+                "          </Impression>" +
+                "                 <Creative>" +
+                "                       <Linear>" +
+                "                           <TrackingEvents>" +
+                "                               <Tracking event=\"close\">" +
+                "                                   <![CDATA[http://tracking/m/closeTwo]]>" +
+                "                               </Tracking>" +
+                "                           </TrackingEvents>" +
+                "                       </Linear>" +
+                "                 </Creative>" +
+                "</InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        assertThat(subject.getLinearXmlManagers()).isEmpty();
+    }
+
+    @Test
+    public void getCompanionAdXmlManagers_shouldReturnCompanionAdXmlManagers() throws Exception {
+        String inLineXml = "<InLine>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "          </Impression>" +
+                "          <Impression id=\"DART\">" +
+                "                 <![CDATA[http://impression/m/inlineTwo]]>" +
+                "          </Impression>" +
+                "          <Creatives>" +
+                "                 <Creative>" +
+                "                       <NonLinearAds>" +
+                "                           <TrackingEvents>" +
+                "                               <Tracking event=\"close\">" +
+                "                                   <![CDATA[http://tracking/m/closeOne]]>" +
+                "                               </Tracking>" +
+                "                           </TrackingEvents>" +
+                "                       </NonLinearAds>" +
+                "                 </Creative>" +
+                "                 <Creative>" +
+                "                     <CompanionAds>" +
+                "                         <Companion>" +
+                "                             <TrackingEvents>" +
+                "                                 <Tracking event=\"creativeView\">" +
+                "                                     <![CDATA[http://tracking/m/closeTwo]]>" +
+                "                                 </Tracking>" +
+                "                             </TrackingEvents>" +
+                "                             <CompanionClickTracking>" +
+                "                                 <![CDATA[http://clicktrackingOne]]>" +
+                "                             </CompanionClickTracking>" +
+                "                         </Companion>"+
+                "                         <Companion>" +
+                "                             <CompanionClickTracking>" +
+                "                                 <![CDATA[http://clicktrackingTwo]]>" +
+                "                             </CompanionClickTracking>" +
+                "                             <TrackingEvents>" +
+                "                                 <Tracking event=\"creativeView\">" +
+                "                                     <![CDATA[http://tracking/m/closeThree]]>" +
+                "                                 </Tracking>" +
+                "                             </TrackingEvents>" +
+                "                         </Companion>"+
+                "                     </CompanionAds>" +
+                "                 </Creative>" +
+                "          </Creatives>" +
+                "</InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        assertThat(subject.getCompanionAdXmlManagers()).hasSize(2);
+        assertThat(VastUtils.vastTrackersToStrings(subject.getCompanionAdXmlManagers().get(0).getClickTrackers()))
+                .containsOnly("http://clicktrackingOne");
+        assertThat(VastUtils.vastTrackersToStrings(subject.getCompanionAdXmlManagers().get(1).getClickTrackers()))
+                .containsOnly("http://clicktrackingTwo");
+    }
+
+    @Test
+    public void getCompanionAdXmlManagers_withNoCompanionNodes_shouldReturnEmptyList() throws Exception {
+        String inLineXml = "<InLine>" +
+                "          <Creatives>" +
+                "                 <Creative>" +
+                "                     <CompanionAds>" +
+                "                         <NotACompanion>" +
+                "                         </NotACompanion>"+
+                "                     </CompanionAds>" +
+                "                 </Creative>" +
+                "          </Creatives>" +
+                "</InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        assertThat(subject.getLinearXmlManagers()).isEmpty();
+    }
+
+    @Test
+    public void getCompanionAdXmlManagers_withNoCompanionAdsNodes_shouldReturnEmptyList() throws Exception {
+        String inLineXml = "<InLine>" +
+                "          <Creatives>" +
+                "                 <Creative>" +
+                "                         <Companion>" +
+                "                             <TrackingEvents>" +
+                "                                 <Tracking event=\"creativeView\">" +
+                "                                     <![CDATA[http://tracking/m/closeThree]]>" +
+                "                                 </Tracking>" +
+                "                             </TrackingEvents>" +
+                "                         </Companion>"+
+                "                 </Creative>" +
+                "          </Creatives>" +
+                "</InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        assertThat(subject.getLinearXmlManagers()).isEmpty();
+    }
+
+    @Test
+    public void getCompanionAdXmlManagers_withNoCreativeNodes_shouldReturnEmptyList() throws Exception {
+        String inLineXml = "<InLine>" +
+                "          <Creatives>" +
+                "                     <CompanionAds>" +
+                "                         <Companion>" +
+                "                             <TrackingEvents>" +
+                "                                 <Tracking event=\"creativeView\">" +
+                "                                     <![CDATA[http://tracking/m/closeThree]]>" +
+                "                                 </Tracking>" +
+                "                             </TrackingEvents>" +
+                "                         </Companion>"+
+                "                     </CompanionAds>" +
+                "          </Creatives>" +
+                "</InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        assertThat(subject.getLinearXmlManagers()).isEmpty();
+    }
+
+    @Test
+    public void getCompanionAdXmlManagers_withNoCreativesNodes_shouldReturnEmptyList() throws Exception {
+        String inLineXml = "<InLine>" +
+                "                 <Creative>" +
+                "                     <CompanionAds>" +
+                "                         <Companion>" +
+                "                             <TrackingEvents>" +
+                "                                 <Tracking event=\"creativeView\">" +
+                "                                     <![CDATA[http://tracking/m/closeThree]]>" +
+                "                                 </Tracking>" +
+                "                             </TrackingEvents>" +
+                "                         </Companion>"+
+                "                     </CompanionAds>" +
+                "                 </Creative>" +
+                "</InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        assertThat(subject.getLinearXmlManagers()).isEmpty();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigTest.java
new file mode 100644
index 00000000..ffbe32f0
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigTest.java
@@ -0,0 +1,94 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+
+import com.mopub.common.MoPubBrowser;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.VastUtils;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.Networking;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+
+import static com.mopub.common.VolleyRequestMatcher.isUrl;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.argThat;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+@RunWith(SdkTestRunner.class)
+public class VastCompanionAdConfigTest {
+
+    private static final String RESOLVED_CLICKTHROUGH_URL = "http://www.mopub.com/";
+    private static final String CLICKTHROUGH_URL = "deeplink+://navigate?" +
+            "&primaryUrl=bogus%3A%2F%2Furl" +
+            "&fallbackUrl=" + Uri.encode(RESOLVED_CLICKTHROUGH_URL);
+
+    private VastCompanionAdConfig subject;
+    private Context context;
+    @Mock private MoPubRequestQueue mockRequestQueue;
+
+    @Before
+    public void setup() {
+        subject = new VastCompanionAdConfig(123, 456,
+                new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
+                        .CreativeType.IMAGE, 123, 456),
+                CLICKTHROUGH_URL,
+                VastUtils.stringsToVastTrackers("clickTrackerOne", "clickTrackerTwo"),
+                VastUtils.stringsToVastTrackers("viewTrackerOne", "viewTrackerTwo")
+        );
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+    }
+
+    @Test
+    public void constructor_shouldSetParamsCorrectly() throws Exception {
+        assertThat(subject.getWidth()).isEqualTo(123);
+        assertThat(subject.getHeight()).isEqualTo(456);
+        assertThat(subject.getVastResource().getResource()).isEqualTo("resource");
+        assertThat(subject.getVastResource().getType()).isEqualTo(VastResource.Type.STATIC_RESOURCE);
+        assertThat(subject.getVastResource().getCreativeType())
+                .isEqualTo(VastResource.CreativeType.IMAGE);
+        assertThat(subject.getClickThroughUrl()).isEqualTo(CLICKTHROUGH_URL);
+        assertThat(VastUtils.vastTrackersToStrings(subject.getClickTrackers()))
+                .containsOnly("clickTrackerOne", "clickTrackerTwo");
+        assertThat(VastUtils.vastTrackersToStrings(subject.getCreativeViewTrackers()))
+                .containsOnly("viewTrackerOne", "viewTrackerTwo");
+    }
+
+    @Test
+    public void handleImpression_shouldTrackImpression() throws Exception {
+        subject.handleImpression(context, 123);
+
+        verify(mockRequestQueue).add(argThat(isUrl("viewTrackerOne")));
+        verify(mockRequestQueue).add(argThat(isUrl("viewTrackerTwo")));
+    }
+
+    @Test
+    public void handleClick_shouldNotTrackClick() throws Exception {
+        subject.handleClick(context, 1, null);
+
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+
+    @Test
+    public void handleClick_shouldOpenMoPubBrowser() throws Exception {
+        subject.handleClick(context, 1, null);
+
+        Robolectric.runBackgroundTasks();
+        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(startedActivity.getComponent().getClassName())
+                .isEqualTo("com.mopub.common.MoPubBrowser");
+        assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY))
+                .isEqualTo(RESOLVED_CLICKTHROUGH_URL);
+        assertThat(startedActivity.getData()).isNull();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigXmlManagerTest.java
new file mode 100644
index 00000000..a199dbf9
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigXmlManagerTest.java
@@ -0,0 +1,94 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.VastUtils;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.w3c.dom.Node;
+
+import static com.mopub.mobileads.test.support.VastUtils.createNode;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class VastCompanionAdConfigXmlManagerTest {
+
+    private VastCompanionAdXmlManager subject;
+    private Node companionNode;
+
+    @Before
+    public void setup() throws Exception {
+        String companionXml = "<Companion id=\"valid\" height=\"250\" width=\"300\">" +
+                "    <StaticResource creativeType=\"image/png\">http://pngimage</StaticResource>" +
+                "    <TrackingEvents>" +
+                "        <Tracking event=\"creativeView\">http://tracking/creativeView1</Tracking>" +
+                "        <Tracking event=\"creativeView\">http://tracking/creativeView2</Tracking>" +
+                "        <Tracking event=\"creativeView\">http://tracking/creativeView3</Tracking>" +
+                "    </TrackingEvents>" +
+                "    <CompanionClickThrough>http://clickthrough</CompanionClickThrough>" +
+                "    <CompanionClickThrough>http://second_clickthrough</CompanionClickThrough>" +
+                "    <CompanionClickTracking>" +
+                "        <![CDATA[http://clicktrackingOne]]>" +
+                "    </CompanionClickTracking>" +
+                "    <CompanionClickTracking>" +
+                "        <![CDATA[http://clicktrackingTwo]]>" +
+                "    </CompanionClickTracking>" +
+                "    <RandomUnusedTag>This_is_unused</RandomUnusedTag>" +
+                "</Companion>";
+
+        companionNode = createNode(companionXml);
+        subject = new VastCompanionAdXmlManager(companionNode);
+    }
+
+    @Test
+    public void getWidth_shouldReturnWidthAttributes() {
+        assertThat(subject.getWidth()).isEqualTo(300);
+    }
+
+    @Test
+    public void getWidth_withNoWidthAttribute_shouldReturnNull() throws Exception {
+        String companionXml = "<Companion id=\"valid\" height=\"250\">" +
+                "</Companion>";
+
+        companionNode = createNode(companionXml);
+        subject = new VastCompanionAdXmlManager(companionNode);
+
+        assertThat(subject.getWidth()).isNull();
+    }
+
+    @Test
+    public void getHeight_shouldReturnHeightAttributes() {
+        assertThat(subject.getHeight()).isEqualTo(250);
+    }
+
+    @Test
+    public void getHeight_withNoHeightAttribute_shouldReturnNull() throws Exception {
+        String companionXml = "<Companion id=\"valid\" width=\"300\">" +
+                "</Companion>";
+
+        companionNode = createNode(companionXml);
+        subject = new VastCompanionAdXmlManager(companionNode);
+
+        assertThat(subject.getHeight()).isNull();
+    }
+
+    @Test
+    public void getResourceXmlManager_shouldReturnVastResourceXmlManager() throws Exception {
+        VastResourceXmlManager resourceXmlManager = subject.getResourceXmlManager();
+        assertThat(resourceXmlManager.getStaticResource()).isEqualTo("http://pngimage");
+        assertThat(resourceXmlManager.getStaticResourceType()).isEqualTo("image/png");
+    }
+
+    @Test
+    public void getClickThroughUrl_shouldReturnFirstStringUrl() {
+        assertThat(subject.getClickThroughUrl()).isEqualTo("http://clickthrough");
+    }
+
+    @Test
+    public void getClickTrackers_shouldReturnAllUrls() {
+        assertThat(VastUtils.vastTrackersToStrings(subject.getClickTrackers()))
+                .containsOnly("http://clicktrackingOne",
+                        "http://clicktrackingTwo");
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigTest.java
new file mode 100644
index 00000000..7833472d
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigTest.java
@@ -0,0 +1,103 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+
+import com.mopub.common.MoPubBrowser;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.VastUtils;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.Networking;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+
+import static com.mopub.common.VolleyRequestMatcher.isUrl;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.argThat;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+@RunWith(SdkTestRunner.class)
+public class VastIconConfigTest {
+
+    private VastIconConfig subject;
+    private Context context;
+    @Mock private MoPubRequestQueue mockRequestQueue;
+
+    @Before
+    public void setup() {
+        subject = new VastIconConfig(123, 456, 789, 101,
+                new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
+                        .CreativeType.IMAGE, 123, 456),
+                VastUtils.stringsToVastTrackers("clickTrackerOne", "clickTrackerTwo"),
+                "http://www.mopub.com/",
+                VastUtils.stringsToVastTrackers("viewTrackerOne", "viewTrackerTwo")
+        );
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+    }
+
+    @Test
+    public void constructor_shouldSetParamsCorrectly() throws Exception {
+        assertThat(subject.getWidth()).isEqualTo(123);
+        assertThat(subject.getHeight()).isEqualTo(456);
+        assertThat(subject.getOffsetMS()).isEqualTo(789);
+        assertThat(subject.getDurationMS()).isEqualTo(101);
+        assertThat(subject.getVastResource().getResource()).isEqualTo("resource");
+        assertThat(subject.getVastResource().getType()).isEqualTo(VastResource.Type.STATIC_RESOURCE);
+        assertThat(subject.getVastResource().getCreativeType())
+                .isEqualTo(VastResource.CreativeType.IMAGE);
+        assertThat(VastUtils.vastTrackersToStrings(subject.getClickTrackingUris()))
+                .containsOnly("clickTrackerOne", "clickTrackerTwo");
+        assertThat(subject.getClickThroughUri()).isEqualTo("http://www.mopub.com/");
+        assertThat(VastUtils.vastTrackersToStrings(subject.getViewTrackingUris()))
+                .containsOnly("viewTrackerOne", "viewTrackerTwo");
+    }
+
+    @Test
+    public void constructor_withNullOffset_shouldSetOffsetTo0() throws Exception {
+        subject = new VastIconConfig(123, 456, null, 101,
+                new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
+                        .CreativeType.IMAGE, 123, 456),
+                VastUtils.stringsToVastTrackers("clickTrackerOne", "clickTrackerTwo"),
+                "clickThroughUri",
+                VastUtils.stringsToVastTrackers("viewTrackerOne", "viewTrackerTwo")
+        );
+
+        assertThat(subject.getOffsetMS()).isEqualTo(0);
+    }
+
+    @Test
+    public void handleImpression_shouldTrackImpression() throws Exception {
+        subject.handleImpression(context, 123, "uri");
+
+        verify(mockRequestQueue).add(argThat(isUrl("viewTrackerOne")));
+        verify(mockRequestQueue).add(argThat(isUrl("viewTrackerTwo")));
+    }
+
+    @Test
+    public void handleClick_shouldNotTrackClick() throws Exception {
+        subject.handleClick(context, null);
+
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+
+    @Test
+    public void handleClick_shouldOpenMoPubBrowser() throws Exception {
+        subject.handleClick(context, null);
+
+        Robolectric.runBackgroundTasks();
+        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(startedActivity.getComponent().getClassName())
+                .isEqualTo("com.mopub.common.MoPubBrowser");
+        assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY))
+                .isEqualTo("http://www.mopub.com/");
+        assertThat(startedActivity.getData()).isNull();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigXmlManagerTest.java
new file mode 100644
index 00000000..e0e501ab
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigXmlManagerTest.java
@@ -0,0 +1,214 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.VastUtils;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.w3c.dom.Node;
+
+import static com.mopub.mobileads.test.support.VastUtils.createNode;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class VastIconConfigXmlManagerTest {
+
+    private VastIconXmlManager subject;
+    private Node iconNode;
+
+    @Before
+    public void setup() throws Exception {
+        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
+                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+                "duration=\"01:02:03.456\">" +
+                    "<StaticResource creativeType=\"ImAge/JpEg\">" +
+                        "<![CDATA[imageJpeg]]>" +
+                    "</StaticResource>" +
+                    "<IconClicks>" +
+                        "<IconClickThrough>" +
+                            "<![CDATA[clickThroughUri]]>" +
+                        "</IconClickThrough>" +
+                        "<IconClickTracking>" +
+                            "<![CDATA[clickTrackingUri1]]>" +
+                        "</IconClickTracking>" +
+                        "<IconClickTracking>" +
+                            "<![CDATA[clickTrackingUri2]]>" +
+                        "</IconClickTracking>" +
+                    "</IconClicks>" +
+                    "<IconViewTracking>" +
+                        "<![CDATA[viewTrackingUri1]]>" +
+                    "</IconViewTracking>" +
+                    "<IconViewTracking>" +
+                        "<![CDATA[viewTrackingUri2]]>" +
+                    "</IconViewTracking>" +
+                "</Icon>";
+
+        iconNode = createNode(iconXml);
+        subject = new VastIconXmlManager(iconNode);
+    }
+
+    @Test
+    public void getWidth_shouldReturnWidth() throws Exception {
+        assertThat(subject.getWidth()).isEqualTo(123);
+    }
+
+    @Test
+    public void getWidth_withNoWidth_shouldReturnNull() throws Exception {
+        String iconXml = "<Icon program=\"program\" height=\"456\" xPosition=\"789\" " +
+                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+                "duration=\"01:02:03.456\">" +
+                "</Icon>";
+
+        iconNode = createNode(iconXml);
+        subject = new VastIconXmlManager(iconNode);
+        assertThat(subject.getWidth()).isNull();
+    }
+
+    @Test
+    public void getHeight_shouldReturnHeight() throws Exception {
+        assertThat(subject.getHeight()).isEqualTo(456);
+    }
+
+    @Test
+    public void getHeight_withNoHeight_shouldReturnNull() throws Exception {
+        String iconXml = "<Icon program=\"program\" width=\"123\" xPosition=\"789\" " +
+                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+                "duration=\"01:02:03.456\">" +
+                "</Icon>";
+
+        iconNode = createNode(iconXml);
+        subject = new VastIconXmlManager(iconNode);
+        assertThat(subject.getHeight()).isNull();
+    }
+
+    @Test
+    public void getOffsetMS_shouldReturnOffset() throws Exception {
+        assertThat(subject.getOffsetMS()).isEqualTo(3723000);
+    }
+
+    @Test
+    public void getOffsetMS_withNoOffset_shouldReturnNull() throws Exception {
+        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
+                "yPosition=\"101\" apiFramework=\"apiFramework\" " +
+                "duration=\"01:02:03.456\">" +
+                "</Icon>";
+
+        iconNode = createNode(iconXml);
+        subject = new VastIconXmlManager(iconNode);
+        assertThat(subject.getOffsetMS()).isNull();
+    }
+
+    @Test
+    public void getOffsetMS_withMalformedOffset_shouldReturnNull() throws Exception {
+        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
+                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"malformed\" " +
+                "duration=\"01:02:03.456\">" +
+                "</Icon>";
+
+        iconNode = createNode(iconXml);
+        subject = new VastIconXmlManager(iconNode);
+        assertThat(subject.getOffsetMS()).isNull();
+    }
+
+    @Test
+    public void getDurationMS_shouldReturnDuration() throws Exception {
+        assertThat(subject.getDurationMS()).isEqualTo(3723456);
+    }
+
+    @Test
+    public void getDurationMS_withNoDuration_shouldReturnNull() throws Exception {
+        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
+                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" >" +
+                "</Icon>";
+
+        iconNode = createNode(iconXml);
+        subject = new VastIconXmlManager(iconNode);
+        assertThat(subject.getDurationMS()).isNull();
+    }
+
+    @Test
+    public void getDurationMS_withMalformedDuration_shouldReturnNull() throws Exception {
+        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
+                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+                "duration=\"malformed\">" +
+                "</Icon>";
+
+        iconNode = createNode(iconXml);
+        subject = new VastIconXmlManager(iconNode);
+        assertThat(subject.getDurationMS()).isNull();
+    }
+
+    @Test
+    public void getResourceXmlManager_shouldReturnVastResourceXmlManager() throws Exception {
+        VastResourceXmlManager resourceXmlManager = subject.getResourceXmlManager();
+        assertThat(resourceXmlManager.getStaticResource()).isEqualTo("imageJpeg");
+        assertThat(resourceXmlManager.getStaticResourceType()).isEqualTo("image/jpeg");
+    }
+
+    @Test
+    public void getClickTrackingUris_shouldReturnClickTrackingUris() throws Exception {
+        assertThat(VastUtils.vastTrackersToStrings(subject.getClickTrackingUris()))
+                .containsOnly("clickTrackingUri1", "clickTrackingUri2");
+    }
+
+    @Test
+    public void getClickTrackingUris_withNoClickTrackingUris_shouldReturnEmptyList() throws Exception {
+        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
+                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+                "duration=\"01:02:03.456\">" +
+                    "<IconClicks>" +
+                        "<IconClickThrough>" +
+                            "<![CDATA[clickThroughUri]]>" +
+                        "</IconClickThrough>" +
+                    "</IconClicks>" +
+                "</Icon>";
+
+        iconNode = createNode(iconXml);
+        subject = new VastIconXmlManager(iconNode);
+        assertThat(subject.getClickTrackingUris()).isEmpty();
+    }
+
+    @Test
+    public void getClickThroughUri_shouldReturnClickThroughUri() throws Exception {
+        assertThat(subject.getClickThroughUri()).isEqualTo("clickThroughUri");
+    }
+
+    @Test
+    public void getClickThroughUri_withNoClickThroughUri_shouldReturnNull() throws Exception {
+        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
+                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+                "duration=\"01:02:03.456\">" +
+                "<IconClicks>" +
+                    "<IconClickTracking>" +
+                        "<![CDATA[clickTrackingUri1]]>" +
+                    "</IconClickTracking>" +
+                    "<IconClickTracking>" +
+                        "<![CDATA[clickTrackingUri2]]>" +
+                    "</IconClickTracking>" +
+                "</IconClicks>" +
+                "</Icon>";
+
+        iconNode = createNode(iconXml);
+        subject = new VastIconXmlManager(iconNode);
+        assertThat(subject.getClickThroughUri()).isNull();
+    }
+
+    @Test
+    public void getViewTrackingUris_shouldReturnViewTrackingUris() throws Exception {
+        assertThat(VastUtils.vastTrackersToStrings(subject.getViewTrackingUris()))
+                .containsOnly("viewTrackingUri1", "viewTrackingUri2");
+    }
+
+    @Test
+    public void getViewTrackingUris_withNoViewTrackingUris_shouldReturnEmptyList() throws Exception {
+        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
+                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+                "duration=\"01:02:03.456\">" +
+                "</Icon>";
+
+        iconNode = createNode(iconXml);
+        subject = new VastIconXmlManager(iconNode);
+        assertThat(subject.getViewTrackingUris()).isEmpty();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
new file mode 100644
index 00000000..57d5625e
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
@@ -0,0 +1,474 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.VastUtils;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.w3c.dom.Node;
+
+import java.util.List;
+
+import static com.mopub.mobileads.test.support.VastUtils.createNode;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class VastLinearXmlManagerTest {
+
+    private VastLinearXmlManager subject;
+    private Node linearNode;
+
+    @Before
+    public void setup() throws Exception {
+        String linearXml = "<Linear skipoffset=\"25%\">" +
+                "<Duration>00:00:58</Duration>" +
+                "<TrackingEvents>" +
+                "    <Tracking event=\"creativeView\">" +
+                "        <![CDATA[" +
+                "        http://creativeView/one" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"creativeView\">" +
+                "        <![CDATA[" +
+                "        http://creativeView/two" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"start\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"progress\" offset=\"13%\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"progress\" offset=\"01:01:10.300\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                // Invalid tracking due to ambiguous offset.
+                "    <Tracking event=\"progress\" offset=\"01:01\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                // Invalid tracking due to a too-high percentage offset.
+                "    <Tracking event=\"progress\" offset=\"113%\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                // Invalid tracking due to a negative percentage offset.
+                "    <Tracking event=\"progress\" offset=\"-113%\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                // Invalid tracking due to a non-number offset
+                "    <Tracking event=\"progress\" offset=\"ten seconds\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"midpoint\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"midpoint\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"firstQuartile\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"firstQuartile\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"thirdQuartile\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"thirdQuartile\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"complete\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"complete\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"close\">" +
+                "        <![CDATA[" +
+                "        http://www.mopub.com/close?q=ignatius" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"close\">" +
+                "        <![CDATA[" +
+                "        http://www.mopub.com/close?q=j3" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"closeLinear\">" +
+                "        <![CDATA[" +
+                "        http://www.mopub.com/closeLinear" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"skip\">" +
+                "        <![CDATA[" +
+                "        http://www.mopub.com/skip?q=ignatius" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"skip\">" +
+                "        <![CDATA[" +
+                "        http://www.mopub.com/skip?q=j3" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"mute\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=16;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"pause\">" +
+                "        <![CDATA[" +
+                "        http://www.mopub.com/pause?num=1" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"pause\">" +
+                "        <![CDATA[" +
+                "        http://www.mopub.com/pause?num=2" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"resume\">" +
+                "        <![CDATA[" +
+                "        http://www.mopub.com/resume?num=1" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"resume\">" +
+                "        <![CDATA[" +
+                "        http://www.mopub.com/resume?num=2" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"fullscreen\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=19;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"fullscreen\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.6;sz=1x1;ord=2922389?" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "</TrackingEvents>" +
+                "<AdParameters/>" +
+                "<VideoClicks>" +
+                "    <ClickThrough>" +
+                "        <![CDATA[ http://www.google.com/support/richmedia ]]>" +
+                "    </ClickThrough>" +
+                "    <ClickTracking id=\"DART\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif" +
+                "        ]]>" +
+                "    </ClickTracking>" +
+                "    <ClickTracking id=\"ThirdParty\">" +
+                "        <![CDATA[" +
+                "        http://ad.doubleclick.net/clk;212442087;33815766;i?http://www.google.com/support/richmedia" +
+                "        ]]>" +
+                "    </ClickTracking>" +
+                "</VideoClicks>" +
+                "<MediaFiles>" +
+                "    <MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" bitrate=\"457\"" +
+                "               width=\"300\" height=\"225\">" +
+                "        <![CDATA[" +
+                "        http://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
+                "        ]]>" +
+                "    </MediaFile>" +
+                "    <MediaFile id=\"2\" delivery=\"progressive\" type=\"video/quicktime\" bitrate=\"457\"" +
+                "               width=\"300\" height=\"225\">" +
+                "        <![CDATA[" +
+                "        http://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny_2.mp4" +
+                "        ]]>" +
+                "    </MediaFile>" +
+                "</MediaFiles>" +
+                "<Icons>" +
+                "    <Icon program=\"program\" width=\"123\" height=\"234\" xPosition=\"789\" " +
+                "    yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+                "    duration=\"01:02:03.456\">" +
+                "        <StaticResource creativeType=\"ImAge/JpEg\">" +
+                "           <![CDATA[staticResource1]]>" +
+                "        </StaticResource>" +
+                "    </Icon>" +
+                "    <Icon program=\"program\" width=\"123\" height=\"234\" xPosition=\"789\" " +
+                "    yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+                "    duration=\"01:02:03.456\">" +
+                "        <StaticResource creativeType=\"ImAge/JpEg\">" +
+                "           <![CDATA[staticResource2]]>" +
+                "        </StaticResource>" +
+                "    </Icon>" +
+                "</Icons>" +
+                "</Linear>";
+
+        linearNode = createNode(linearXml);
+    }
+
+    @Test
+    public void getFractionalTrackers_shouldReturnCorrectValues() {
+        subject = new VastLinearXmlManager(linearNode);
+        List<VastFractionalProgressTracker> trackers = subject.getFractionalProgressTrackers();
+
+        assertThat(trackers.size()).isEqualTo(7);
+
+        VastFractionalProgressTracker tracker0 = trackers.get(0);
+        assertThat(tracker0.trackingFraction()).isEqualTo(0.13f);
+        assertThat(tracker0.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker1 = trackers.get(1);
+        assertThat(tracker1.trackingFraction()).isEqualTo(0.25f);
+        assertThat(tracker1.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker2 = trackers.get(2);
+        assertThat(tracker2.trackingFraction()).isEqualTo(0.25f);
+        assertThat(tracker2.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
+
+        VastFractionalProgressTracker tracker3 = trackers.get(3);
+        assertThat(tracker3.trackingFraction()).isEqualTo(0.5f);
+        assertThat(tracker3.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker4 = trackers.get(4);
+        assertThat(tracker4.trackingFraction()).isEqualTo(0.5f);
+        assertThat(tracker4.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
+
+        VastFractionalProgressTracker tracker5 = trackers.get(5);
+        assertThat(tracker5.trackingFraction()).isEqualTo(0.75f);
+        assertThat(tracker5.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker6 = trackers.get(6);
+        assertThat(tracker6.trackingFraction()).isEqualTo(0.75f);
+        assertThat(tracker6.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
+    }
+
+    @Test
+    public void getAbsoluteProgressTrackers_shouldReturnCorrectValues() {
+        subject = new VastLinearXmlManager(linearNode);
+        List<VastAbsoluteProgressTracker> trackers = subject.getAbsoluteProgressTrackers();
+
+        assertThat(trackers.size()).isEqualTo(4);
+
+        VastAbsoluteProgressTracker tracker0 = trackers.get(0);
+        assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(tracker0.getTrackingUrl()).isEqualTo("http://creativeView/one");
+
+        VastAbsoluteProgressTracker tracker1 = trackers.get(1);
+        assertThat(tracker1.getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(tracker1.getTrackingUrl()).isEqualTo("http://creativeView/two");
+
+        VastAbsoluteProgressTracker tracker2 = trackers.get(2);
+        assertThat(tracker2.getTrackingMilliseconds()).isEqualTo(2000);
+        assertThat(tracker2.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+
+        VastAbsoluteProgressTracker tracker3 = trackers.get(3);
+        assertThat(tracker3.getTrackingMilliseconds()).isEqualTo(3670300);
+        assertThat(tracker3.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;" +
+                "src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;" +
+                "rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+    }
+
+    @Test
+    public void getVideoCompleteTrackers_shouldReturnTheCorrectValue() {
+        subject = new VastLinearXmlManager(linearNode);
+        assertThat(VastUtils.vastTrackersToStrings(subject.getVideoCompleteTrackers()))
+                .containsOnly("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;",
+                        "http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?");
+    }
+
+    @Test
+    public void getVideoCloseTrackers_shouldReturnTheCorrectValue() {
+        subject = new VastLinearXmlManager(linearNode);
+        assertThat(VastUtils.vastTrackersToStrings(subject.getVideoCloseTrackers()))
+                .containsOnly("http://www.mopub.com/close?q=ignatius",
+                        "http://www.mopub.com/close?q=j3",
+                        "http://www.mopub.com/closeLinear");
+    }
+
+    @Test
+    public void getPauseTrackers_shouldReturnRepeatableVastTrackers() {
+        subject = new VastLinearXmlManager(linearNode);
+        for (VastTracker vastTracker : subject.getPauseTrackers()) {
+            assertThat(vastTracker.isRepeatable());
+        }
+        assertThat(VastUtils.vastTrackersToStrings(subject.getPauseTrackers()))
+                .containsOnly("http://www.mopub.com/pause?num=1",
+                        "http://www.mopub.com/pause?num=2");
+    }
+
+    @Test
+    public void getResumeTrackers_shouldReturnRepeatableVastTrackers() {
+        subject = new VastLinearXmlManager(linearNode);
+        for (VastTracker vastTracker : subject.getResumeTrackers()) {
+            assertThat(vastTracker.isRepeatable());
+        }
+        assertThat(VastUtils.vastTrackersToStrings(subject.getResumeTrackers()))
+                .containsOnly("http://www.mopub.com/resume?num=1",
+                        "http://www.mopub.com/resume?num=2");
+    }
+
+    @Test
+    public void getVideoSkipTrackers_shouldReturnTheCorrectValue() {
+        subject = new VastLinearXmlManager(linearNode);
+        assertThat(VastUtils.vastTrackersToStrings(subject.getVideoSkipTrackers()))
+                .containsOnly("http://www.mopub.com/skip?q=ignatius",
+                        "http://www.mopub.com/skip?q=j3");
+    }
+
+    @Test
+    public void getClickThroughUrl_shouldReturnTheCorrectValue() {
+        subject = new VastLinearXmlManager(linearNode);
+        String url = subject.getClickThroughUrl();
+
+        assertThat(url).isEqualTo("http://www.google.com/support/richmedia");
+    }
+
+    @Test
+    public void getClickTrackers_shouldReturnTheCorrectValue() {
+        subject = new VastLinearXmlManager(linearNode);
+        assertThat(VastUtils.vastTrackersToStrings(subject.getClickTrackers()))
+                .containsOnly("http://ad.doubleclick" +
+                                ".net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0" +
+                                "%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0" +
+                                "/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif",
+                        "http://ad.doubleclick.net/clk;212442087;33815766;i?http://www.google" +
+                                ".com/support/richmedia");
+    }
+
+    @Test
+    public void getSkipOffset_shouldReturnTheCorrectValue() {
+        subject = new VastLinearXmlManager(linearNode);
+        String skipOffset = subject.getSkipOffset();
+
+        assertThat(skipOffset).isEqualTo("25%");
+    }
+
+    @Test
+    public void getSkipOffset_withNoSkipOffsetAttribute_shouldReturnNull() throws Exception {
+        String linearXml = "<Linear>" +
+                "</Linear>";
+
+        Node linearNode = createNode(linearXml);
+        subject = new VastLinearXmlManager(linearNode);
+
+        assertThat(subject.getSkipOffset()).isNull();
+    }
+
+    @Test
+    public void getSkipOffset_withNoSkipOffsetAttributeValue_shouldReturnNull() throws Exception {
+        String linearXml = "<Linear skipoffset=\"\">" +
+                "</Linear>";
+
+        Node linearNode = createNode(linearXml);
+        subject = new VastLinearXmlManager(linearNode);
+
+        assertThat(subject.getSkipOffset()).isNull();
+    }
+
+    @Test
+    public void getMediaXmlManagers_shouldReturnMediaXmlManagers() {
+        subject = new VastLinearXmlManager(linearNode);
+        List<VastMediaXmlManager> mediaXmlManagers = subject.getMediaXmlManagers();
+
+        assertThat(mediaXmlManagers.size()).isEqualTo(2);
+
+        assertThat(mediaXmlManagers.get(0).getMediaUrl()).isEqualTo("http://s3.amazonaws" +
+                ".com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4");
+        assertThat(mediaXmlManagers.get(1).getMediaUrl()).isEqualTo("http://s3.amazonaws" +
+                ".com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny_2.mp4");
+    }
+
+    @Test
+    public void getMediaXmlManagers_withNoMediaFileNode_shouldReturnEmptyList() throws Exception {
+        String linearXml = "<Linear skipoffset=\"25%\">" +
+                "    <MediaFiles>" +
+                "    </MediaFiles>" +
+                "</Linear>";
+
+        Node linearNode = createNode(linearXml);
+        subject = new VastLinearXmlManager(linearNode);
+
+        List<VastMediaXmlManager> mediaXmlManagers = subject.getMediaXmlManagers();
+        assertThat(mediaXmlManagers).isEmpty();
+    }
+
+    @Test
+    public void getMediaXmlManagers_withNoMediaFilesNode_shouldReturnEmptyList() throws Exception {
+        String linearXml = "<Linear skipoffset=\"25%\">" +
+                "    <MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" bitrate=\"457\"" +
+                "               width=\"300\" height=\"225\">" +
+                "        <![CDATA[" +
+                "        http://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
+                "        ]]>" +
+                "    </MediaFile>" +
+                "</Linear>";
+
+        Node linearNode = createNode(linearXml);
+        subject = new VastLinearXmlManager(linearNode);
+
+        List<VastMediaXmlManager> mediaXmlManagers = subject.getMediaXmlManagers();
+        assertThat(mediaXmlManagers).isEmpty();
+    }
+
+    @Test
+    public void getIconXmlManagers_shouldReturnIconXmlManagers() throws Exception {
+        subject = new VastLinearXmlManager(linearNode);
+        List<VastIconXmlManager> iconXmlManagers = subject.getIconXmlManagers();
+
+        assertThat(iconXmlManagers).hasSize(2);
+        assertThat(iconXmlManagers.get(0).getResourceXmlManager().getStaticResource())
+                .isEqualTo("staticResource1");
+        assertThat(iconXmlManagers.get(1).getResourceXmlManager().getStaticResource())
+                .isEqualTo("staticResource2");
+    }
+
+    @Test
+    public void getIconXmlManagers_withNoIconNode_shouldReturnEmptyList() throws Exception {
+        String linearXml = "<Linear skipoffset=\"25%\">" +
+                "    <Icons>" +
+                "    </Icons>" +
+                "</Linear>";
+
+        Node linearNode = createNode(linearXml);
+        subject = new VastLinearXmlManager(linearNode);
+
+        assertThat(subject.getIconXmlManagers()).isEmpty();
+    }
+
+    @Test
+    public void getIconXmlManagers_withNoIconsNode_shouldReturnEmptyList() throws Exception {
+        String linearXml = "<Linear skipoffset=\"25%\">" +
+                "    <Icon program=\"program\" width=\"123\" height=\"234\" xPosition=\"789\" " +
+                "    yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+                "    duration=\"01:02:03.456\">" +
+                "        <StaticResource creativeType=\"ImAge/JpEg\">" +
+                "           <![CDATA[staticResource1]]>" +
+                "        </StaticResource>" +
+                "    </Icon>" +
+                "</Linear>";
+
+        Node linearNode = createNode(linearXml);
+        subject = new VastLinearXmlManager(linearNode);
+
+        assertThat(subject.getIconXmlManagers()).isEmpty();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastMacroHelperTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastMacroHelperTest.java
new file mode 100644
index 00000000..89005ec6
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastMacroHelperTest.java
@@ -0,0 +1,225 @@
+package com.mopub.mobileads;
+
+import android.net.Uri;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import java.util.Arrays;
+import java.util.Collections;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class VastMacroHelperTest {
+
+    private static final String ERROR_CODE = "errorcode";
+    private static final String CONTENT_PLAY_HEAD = "contentplayhead";
+    private static final String CACHE_BUSTING = "cachebusting";
+    private static final String ASSET_URI = "asseturi";
+
+    private VastMacroHelper subject;
+    private String defaultUri;
+
+    @Before
+    @SuppressWarnings("unchecked")
+    public void setup() {
+        defaultUri = "http://www.derp.com/herp?errorcode=[ERRORCODE]&contentplayhead=[CONTENTPLAYHEAD]&asseturi=[ASSETURI]&cachebusting=[CACHEBUSTING]";
+        // Suppressing unchecked cast to List<String> with Collections#singletonList(Object)
+        subject = new VastMacroHelper(Collections.singletonList(defaultUri));
+    }
+
+    @Test
+    public void constructor_shouldSetCacheBusting() throws Exception {
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=&contentplayhead=&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+    }
+
+    @Test
+    @SuppressWarnings("unchecked")
+    public void constructor_shouldCreateRandomCacheBustingValues() throws Exception {
+        VastMacroHelper vastMacroHelper = new VastMacroHelper(Collections.singletonList(defaultUri));
+
+        String uriStr = subject.getUris().get(0);
+        String uriStr2 = vastMacroHelper.getUris().get(0);
+
+        Uri uri = Uri.parse(uriStr);
+        Uri uri2 = Uri.parse(uriStr2);
+
+        String cacheBusting = uri.getQueryParameter(CACHE_BUSTING);
+        String cacheBusting2 = uri2.getQueryParameter(CACHE_BUSTING);
+
+        assertThat(cacheBusting).isNotEqualTo(cacheBusting2);
+    }
+
+    @Test
+    public void withErrorCode_shouldSetErrorCode() throws Exception {
+        subject.withErrorCode(VastErrorCode.XML_PARSING_ERROR);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=100&contentplayhead=&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+
+        subject.withErrorCode(VastErrorCode.WRAPPER_TIMEOUT);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=301&contentplayhead=&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+
+        subject.withErrorCode(VastErrorCode.NO_ADS_VAST_RESPONSE);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=303&contentplayhead=&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+
+        subject.withErrorCode(VastErrorCode.GENERAL_LINEAR_AD_ERROR);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=400&contentplayhead=&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+
+        subject.withErrorCode(VastErrorCode.GENERAL_COMPANION_AD_ERROR);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=600&contentplayhead=&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+
+        subject.withErrorCode(VastErrorCode.UNDEFINED_ERROR);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=900&contentplayhead=&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+    }
+
+    @Test
+    public void withContentPlayHead_shouldFormatTime_shouldSetContentPlayHead() throws Exception {
+        subject.withContentPlayHead(3600000);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=&contentplayhead=01:00:00.000&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+
+        subject.withContentPlayHead(360000000);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=&contentplayhead=100:00:00.000&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+
+        subject.withContentPlayHead(3599999);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=&contentplayhead=00:59:59.999&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+
+        subject.withContentPlayHead(59999);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=&contentplayhead=00:00:59.999&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+
+        subject.withContentPlayHead(999);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=&contentplayhead=00:00:00.999&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+
+        subject.withContentPlayHead(45296789);
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=&contentplayhead=12:34:56.789&asseturi=&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+    }
+
+    @Test
+    public void withAssetUri_shouldSetAssetUri() throws Exception {
+        final String expectedAssetUri = "http://thisIsAnAsset.Uri";
+        subject.withAssetUri(expectedAssetUri);
+
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.derp.com/herp?errorcode=&contentplayhead=&asseturi=http%3A%2F%2FthisIsAnAsset.Uri&cachebusting=" +
+                        getAndCheckCachebusting(subject.getUris().get(0)));
+    }
+
+    @Test
+    @SuppressWarnings("unchecked")
+    public void withManyMacros_shouldReplaceAllOfThem() throws Exception {
+        final String multiUrl = "http://www.someurl.com/dosomething?[ERRORCODE][ERRORCODE][CONTENTPLAYHEAD][ERRORCODE][ASSETURI][CONTENTPLAYHEAD][ERRORCODE]";
+        subject = new VastMacroHelper(Collections.singletonList(multiUrl))
+                .withAssetUri("asset")
+                .withContentPlayHead(100000)
+                .withErrorCode(VastErrorCode.UNDEFINED_ERROR);
+
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.someurl.com/dosomething?90090000:01:40.000900asset00:01:40.000900");
+    }
+
+    @Test
+    @SuppressWarnings("unchecked")
+    public void withSpecialCharactersInAsseturi_shouldUrlEncode() {
+        final String specialUrl = "http://www.someurl.com/somedirectory/somemethod?errorcode=[ERRORCODE]&asseturi=[ASSETURI]";
+        subject = new VastMacroHelper(Collections.singletonList(specialUrl))
+                .withErrorCode(VastErrorCode.UNDEFINED_ERROR)
+                .withAssetUri(
+                        "http://aaddss.mmooppuubb.ccoomm:123/method?args=one~`!@#$%^&*()_+-[]{}|:,.<>/");
+
+        assertThat(subject.getUris()).containsOnly(
+                "http://www.someurl.com/somedirectory/somemethod?errorcode=900&asseturi=" +
+                        "http%3A%2F%2Faaddss.mmooppuubb.ccoomm%3A123%2Fmethod%3Fargs%3Done" +
+                        "%7E%60%21%40%23%24%25%5E%26*%28%29_%2B-%5B%5D%7B%7D%7C%3A%2C.%3C%3E%2F");
+    }
+
+    @Test
+    @SuppressWarnings("unchecked")
+    public void withManyUrls_shouldReturnListOfUrls() {
+        final String uriWithNoCacheBusting = defaultUri.replace("&cachebusting=[CACHEBUSTING]", "");
+        final String uriWithTwoAssetUri = uriWithNoCacheBusting + "&asset2=[ASSETURI]";
+        final String uriWithTwoContentPlayHead = uriWithNoCacheBusting + "&cph2=[CONTENTPLAYHEAD]";
+        subject = new VastMacroHelper(Arrays.asList(
+                new String[]{uriWithNoCacheBusting, uriWithTwoAssetUri, uriWithTwoContentPlayHead}));
+        subject.withAssetUri("https://a.ss.et");
+        subject.withErrorCode(VastErrorCode.UNDEFINED_ERROR);
+        subject.withContentPlayHead(500);
+
+        assertThat(subject.getUris().size()).isEqualTo(3);
+        assertThat(subject.getUris().get(0)).isEqualTo(
+                "http://www.derp.com/herp?errorcode=900&contentplayhead=00:00:00.500&asseturi=https%3A%2F%2Fa.ss.et");
+        assertThat(subject.getUris().get(1)).isEqualTo(
+                "http://www.derp.com/herp?errorcode=900&contentplayhead=00:00:00.500&asseturi=https%3A%2F%2Fa.ss.et&asset2=https%3A%2F%2Fa.ss.et");
+        assertThat(subject.getUris().get(2)).isEqualTo(
+                "http://www.derp.com/herp?errorcode=900&contentplayhead=00:00:00.500&asseturi=https%3A%2F%2Fa.ss.et&cph2=00:00:00.500");
+    }
+
+    @Test
+    @SuppressWarnings("unchecked")
+    public void withMalformedUrl_shouldNotAttemptToUrlEncode() {
+        final String malformedUri = "htttttt:////oops [CONTENTPLAYHEAD]this [ERRORCODE]is not [ASSETURI]a url";
+        subject = new VastMacroHelper(Collections.singletonList(malformedUri));
+        subject.withAssetUri("asset").withErrorCode(
+                VastErrorCode.UNDEFINED_ERROR).withContentPlayHead(1);
+
+        assertThat(subject.getUris()).containsOnly(
+                "htttttt:////oops 00:00:00.001this 900is not asseta url");
+    }
+
+    @Test
+    @SuppressWarnings("unchecked")
+    public void withDeeplink_shouldNotAttemptToReformat() {
+        final String deeplink = "thisisadeeplink://reallyreallydeep";
+        subject = new VastMacroHelper(Collections.singletonList(deeplink));
+
+        assertThat(subject.getUris()).containsOnly(deeplink);
+    }
+
+    @Test
+    @SuppressWarnings("unchecked")
+    public void withNormalUri_shouldReturnUnchangedUri() {
+        final String normalUri = "http://www.thisisanormal.uri/with?some=query";
+        subject = new VastMacroHelper(Collections.singletonList(normalUri));
+
+        assertThat(subject.getUris()).containsOnly(normalUri);
+    }
+
+    private String getAndCheckCachebusting(final String uriStr) {
+        Uri uri = Uri.parse(uriStr);
+        String cacheBusting = uri.getQueryParameter(CACHE_BUSTING);
+        assertThat(cacheBusting).isNotEmpty();
+        assertThat(cacheBusting.length()).isEqualTo(8);
+
+        // Will throw if not an int
+        Integer.parseInt(cacheBusting);
+
+        return cacheBusting;
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
new file mode 100644
index 00000000..357e0ec7
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
@@ -0,0 +1,593 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+
+import com.mopub.common.CacheService;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.DeviceUtils;
+import com.mopub.mobileads.test.support.VastUtils;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+import org.robolectric.Robolectric;
+import org.robolectric.tester.org.apache.http.FakeHttpLayer;
+
+import java.util.concurrent.Semaphore;
+
+import static com.mopub.mobileads.VastManager.VastManagerListener;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.doAnswer;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+public class VastManagerTest {
+    static final String EXTENSIONS_SNIPPET_PLACEHOLDER = "<![CDATA[EXTENSIONS_SNIPPET]]>";
+    static final String TEST_VAST_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='progress' offset='00:00:03.100'>http://myTrackingURL/wrapper/progress</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='close'>http://myTrackingURL/wrapper/close</Tracking><Tracking event='skip'>http://myTrackingURL/wrapper/skip</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative><Creative AdID=\"601364-Companion\"> <CompanionAds><Companion width=\"9000\"></Companion> </CompanionAds></Creative></Creatives><![CDATA[EXTENSIONS_SNIPPET]]><Error><![CDATA[http://wrapperErrorTracker]]></Error></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
+    static final String TEST_NESTED_VAST_XML_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><VAST version='2.0'><Ad id='57722'><InLine><AdSystem version='1.0'>Tapad</AdSystem><AdTitle><![CDATA[PKW6T_LIV_DSN_Audience_TAPAD_3rd Party Audience Targeting_Action Movi]]></AdTitle><Description/><Impression><![CDATA[http://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression><Creatives><Creative sequence='1' id='57722'><Linear><TrackingEvents><Tracking event='close'>http://myTrackingURL/wrapper/nested_close</Tracking><Tracking event='skip'>http://myTrackingURL/wrapper/nested_skip</Tracking></TrackingEvents><Duration>00:00:15</Duration><VideoClicks><ClickThrough><![CDATA[http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com]]></ClickThrough></VideoClicks><MediaFiles><MediaFile delivery='progressive' bitrate='416' width='800' height='480' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video.mp4]]></MediaFile><MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video1.mp4]]></MediaFile></MediaFiles></Linear></Creative><Creative AdID=\"601364-Companion\"><CompanionAds><Companion id=\"valid\" height=\"250\" width=\"300\"><StaticResource creativeType=\"image/jpeg\">http://demo.tremormedia.com/proddev/vast/Blistex1.jpg</StaticResource><TrackingEvents><Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking><Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking></TrackingEvents><CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough><CompanionClickTracking><![CDATA[http://companionClickTracking1]]></CompanionClickTracking><CompanionClickTracking><![CDATA[http://companionClickTracking2]]></CompanionClickTracking></Companion></CompanionAds></Creative></Creatives><![CDATA[EXTENSIONS_SNIPPET]]><Error><![CDATA[http://inLineErrorTracker]]></Error></InLine></Ad></VAST>";
+    static final String TEST_VAST_BAD_NEST_URL_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml\"$|||</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative></Creatives></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
+
+    private VastManager subject;
+    private FakeHttpLayer mFakeHttpLayer;
+    private VastManagerListener vastManagerListener;
+    private Activity context;
+    private VastVideoConfig mVastVideoConfig;
+    private Semaphore semaphore;
+
+    @Before
+    public void setup() {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        CacheService.initializeDiskCache(context);
+        subject = new VastManager(context);
+        mFakeHttpLayer = Robolectric.getFakeHttpLayer();
+
+        semaphore = new Semaphore(0);
+        vastManagerListener = mock(VastManagerListener.class);
+        doAnswer(new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
+                Object[] args = invocationOnMock.getArguments();
+                VastManagerTest.this.mVastVideoConfig = (VastVideoConfig) args[0];
+                semaphore.release();
+                return null;
+            }
+        }).when(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+    }
+
+    private void prepareVastVideoConfiguration() {
+        subject.prepareVastVideoConfiguration(TEST_VAST_XML_STRING, vastManagerListener, context);
+
+        Robolectric.runBackgroundTasks();
+        Robolectric.runUiThreadTasks();
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_shouldNotifyTheListenerAndContainTheCorrectVastValues() throws Exception {
+        // Vast redirect responses
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+        // Video download response
+        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+
+        assertThat(mVastVideoConfig.getNetworkMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
+
+        final String expectedFilePathDiskCache = CacheService.getFilePathDiskCache(mVastVideoConfig.getNetworkMediaFileUrl());
+        assertThat(mVastVideoConfig.getDiskMediaFileUrl()).isEqualTo(expectedFilePathDiskCache);
+
+        assertThat(mVastVideoConfig.getClickThroughUrl()).isEqualTo("http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com");
+        assertThat(mVastVideoConfig.getImpressionTrackers().size()).isEqualTo(5);
+
+        // Verify quartile trackers
+        assertThat(mVastVideoConfig.getFractionalTrackers().size()).isEqualTo(3);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(0).trackingFraction()).isEqualTo(0.25f);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(1).trackingFraction()).isEqualTo(0.5f);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(2).trackingFraction()).isEqualTo(0.75f);
+
+        // Verify start tracker.
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().size()).isEqualTo(3);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(0).getTrackingMilliseconds())
+                .isEqualTo(0);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(1).getTrackingMilliseconds())
+                .isEqualTo(2000);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(2).getTrackingMilliseconds())
+                .isEqualTo(3100);
+
+        assertThat(mVastVideoConfig.getCompleteTrackers().size()).isEqualTo(1);
+
+        // We specifically added a close tracker and a skip tracker to the nested vast test case as well,
+        // therefore there are two expected trackers total for each type.
+        assertThat(mVastVideoConfig.getCloseTrackers().size()).isEqualTo(2);
+        assertThat(mVastVideoConfig.getSkipTrackers().size()).isEqualTo(2);
+        assertThat(mVastVideoConfig.getClickTrackers().size()).isEqualTo(1);
+
+        final VastCompanionAdConfig vastCompanionAdConfig = mVastVideoConfig.getVastCompanionAd(
+                context.getResources().getConfiguration().orientation);
+        assertThat(vastCompanionAdConfig.getWidth()).isEqualTo(300);
+        assertThat(vastCompanionAdConfig.getHeight()).isEqualTo(250);
+        assertThat(vastCompanionAdConfig.getVastResource().getResource())
+                .isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
+        assertThat(vastCompanionAdConfig.getVastResource().getType())
+                .isEqualTo(VastResource.Type.STATIC_RESOURCE);
+        assertThat(vastCompanionAdConfig.getVastResource().getCreativeType())
+                .isEqualTo(VastResource.CreativeType.IMAGE);
+        assertThat(vastCompanionAdConfig.getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
+
+        assertThat(VastUtils.vastTrackersToStrings(vastCompanionAdConfig.getClickTrackers()))
+                .containsOnly("http://companionClickTracking1",
+                        "http://companionClickTracking2");
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_shouldHandleMultipleRedirects() throws Exception {
+        // Vast redirect responses
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_VAST_XML_STRING);
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_VAST_XML_STRING);
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+        // Video download response
+        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig
+                .class));
+
+        // at this point it should have 3 sets of data from TEST_VAST_XML_STRING and one set from TEST_NESTED_VAST_XML_STRING
+        assertThat(mVastVideoConfig.getNetworkMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
+        final String expectedFilePathDiskCache = CacheService.getFilePathDiskCache(mVastVideoConfig.getNetworkMediaFileUrl());
+        assertThat(mVastVideoConfig.getDiskMediaFileUrl()).isEqualTo(expectedFilePathDiskCache);
+
+        assertThat(mVastVideoConfig.getClickThroughUrl()).isEqualTo("http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com");
+        assertThat(mVastVideoConfig.getImpressionTrackers().size()).isEqualTo(13);
+
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().size()).isEqualTo(9);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(0).getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(1).getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(2).getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(3).getTrackingMilliseconds()).isEqualTo(2000);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(4).getTrackingMilliseconds()).isEqualTo(2000);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(5).getTrackingMilliseconds()).isEqualTo(2000);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(6).getTrackingMilliseconds()).isEqualTo(3100);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(7).getTrackingMilliseconds()).isEqualTo(3100);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(8).getTrackingMilliseconds()).isEqualTo(3100);
+
+
+        assertThat(mVastVideoConfig.getFractionalTrackers().size()).isEqualTo(9);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(0).trackingFraction()).isEqualTo(0.25f);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(1).trackingFraction()).isEqualTo(0.25f);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(2).trackingFraction()).isEqualTo(0.25f);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(3).trackingFraction()).isEqualTo(0.5f);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(4).trackingFraction()).isEqualTo(0.5f);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(5).trackingFraction()).isEqualTo(0.5f);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(6).trackingFraction()).isEqualTo(0.75f);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(7).trackingFraction()).isEqualTo(0.75f);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(8).trackingFraction()).isEqualTo(0.75f);
+
+        assertThat(mVastVideoConfig.getCompleteTrackers().size()).isEqualTo(3);
+        assertThat(mVastVideoConfig.getCloseTrackers().size()).isEqualTo(4);
+        assertThat(mVastVideoConfig.getSkipTrackers().size()).isEqualTo(4);
+        assertThat(mVastVideoConfig.getClickTrackers().size()).isEqualTo(3);
+        assertThat(mVastVideoConfig.getErrorTrackers().size()).isEqualTo(4);
+
+        final VastCompanionAdConfig vastCompanionAdConfig = mVastVideoConfig.getVastCompanionAd(
+                context.getResources().getConfiguration().orientation);
+        assertThat(vastCompanionAdConfig.getWidth()).isEqualTo(300);
+        assertThat(vastCompanionAdConfig.getHeight()).isEqualTo(250);
+        assertThat(vastCompanionAdConfig.getVastResource().getResource())
+                .isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
+        assertThat(vastCompanionAdConfig.getVastResource().getType())
+                .isEqualTo(VastResource.Type.STATIC_RESOURCE);
+        assertThat(vastCompanionAdConfig.getVastResource().getCreativeType())
+                .isEqualTo(VastResource.CreativeType.IMAGE);
+        assertThat(vastCompanionAdConfig.getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
+        assertThat(VastUtils.vastTrackersToStrings(vastCompanionAdConfig.getClickTrackers()))
+                .containsOnly("http://companionClickTracking1",
+                        "http://companionClickTracking2");
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_shouldReturnCorrectVastValuesWhenAVastRedirectFails() throws Exception {
+        // Vast redirect response
+        mFakeHttpLayer.addPendingHttpResponse(404, "");
+        // Video download response
+        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+
+        assertThat(mVastVideoConfig).isNull();
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withNoExtensions_shouldContainTheCorrectDefaultExtensionValues() throws Exception {
+        // Vast redirect response to XML without VAST extensions
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+        // Video download response
+        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+
+        assertThat(mVastVideoConfig.getCustomCtaText()).isNull();
+        assertThat(mVastVideoConfig.getCustomSkipText()).isNull();
+        assertThat(mVastVideoConfig.getCustomCloseIconUrl()).isNull();
+        assertThat(mVastVideoConfig.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.FORCE_LANDSCAPE);
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withExtensionsUnderWrapper_shouldContainTheCorrectCustomExtensionValues() throws Exception {
+        // Vast redirect response to XML without extensions
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+        // Video download response
+        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+
+        // Add extensions under Wrapper element in TEST_VAST_XML_STRING
+        subject.prepareVastVideoConfiguration(
+                TEST_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
+                        "<Extensions>" +
+                            "<Extension type=\"MoPub\">" +
+                                "<MoPubCtaText>custom CTA text</MoPubCtaText>" +
+                                "<MoPubSkipText>skip</MoPubSkipText>" +
+                                "<MoPubCloseIcon>http://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png</MoPubCloseIcon>" +
+                                "<MoPubForceOrientation>device</MoPubForceOrientation>" +
+                            "</Extension>" +
+                        "</Extensions>"),
+                vastManagerListener,
+                context);
+
+        Robolectric.runBackgroundTasks();
+        Robolectric.runUiThreadTasks();
+        semaphore.acquire();
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+
+        // Verify custom extensions
+        assertThat(mVastVideoConfig.getCustomCtaText()).isEqualTo("custom CTA text");
+        assertThat(mVastVideoConfig.getCustomSkipText()).isEqualTo("skip");
+        assertThat(mVastVideoConfig.getCustomCloseIconUrl()).isEqualTo("http://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png");
+        assertThat(mVastVideoConfig.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.DEVICE_ORIENTATION);
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withExtensionsUnderInline_shouldContainTheCorrectCustomExtensionValues() throws Exception {
+        // Vast redirect response to XML with extensions under Inline element
+        mFakeHttpLayer.addPendingHttpResponse(200,
+                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
+                        "<Extensions>" +
+                            "<Extension type=\"MoPub\">" +
+                                "<MoPubCtaText>custom CTA text</MoPubCtaText>" +
+                                "<MoPubSkipText>skip</MoPubSkipText>" +
+                                "<MoPubCloseIcon>http://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png</MoPubCloseIcon>" +
+                                "<MoPubForceOrientation>device</MoPubForceOrientation>" +
+                            "</Extension>" +
+                        "</Extensions>"));
+        // Video download response
+        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+
+        // Verify custom extensions
+        assertThat(mVastVideoConfig.getCustomCtaText()).isEqualTo("custom CTA text");
+        assertThat(mVastVideoConfig.getCustomSkipText()).isEqualTo("skip");
+        assertThat(mVastVideoConfig.getCustomCloseIconUrl()).isEqualTo("http://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png");
+        assertThat(mVastVideoConfig.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.DEVICE_ORIENTATION);
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withExtensionsUnderBothWrapperAndInline_shouldContainLastParsedCustomExtensionValues() throws Exception {
+        // Vast redirect response to XML with extensions under Inline element in TEST_NESTED_VAST_XML_STRING, will be parsed last
+        mFakeHttpLayer.addPendingHttpResponse(200,
+                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
+                        "<Extensions>" +
+                            "<Extension type=\"MoPub\">" +
+                                "<MoPubCtaText>CTA 2</MoPubCtaText>" +
+                                "<MoPubSkipText>skip 2</MoPubSkipText>" +
+                                "<MoPubCloseIcon>http://ton.twitter.com/exchange-media/images/v4/star_icon_3x_2.png</MoPubCloseIcon>" +
+                                "<MoPubForceOrientation>landscape</MoPubForceOrientation>" +
+                            "</Extension>" +
+                        "</Extensions>"));
+        // Video download response
+        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+
+        // Also add extensions under Wrapper element in TEST_VAST_XML_STRING
+        subject.prepareVastVideoConfiguration(
+                TEST_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
+                        "<Extensions>" +
+                            "<Extension type=\"MoPub\">" +
+                                "<MoPubCtaText>CTA 1</MoPubCtaText>" +
+                                "<MoPubSkipText>skip 1</MoPubSkipText>" +
+                                "<MoPubCloseIcon>http://ton.twitter.com/exchange-media/images/v4/star_icon_3x_1.png</MoPubCloseIcon>" +
+                                "<MoPubForceOrientation>device orientation</MoPubForceOrientation>" +
+                            "</Extension>" +
+                        "</Extensions>"),
+                vastManagerListener,
+                context);
+
+        Robolectric.runBackgroundTasks();
+        Robolectric.runUiThreadTasks();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+
+        // Verify custom extension values are the ones last parsed in TEST_NESTED_VAST_XML_STRING
+        assertThat(mVastVideoConfig.getCustomCtaText()).isEqualTo("CTA 2");
+        assertThat(mVastVideoConfig.getCustomSkipText()).isEqualTo("skip 2");
+        assertThat(mVastVideoConfig.getCustomCloseIconUrl()).isEqualTo("http://ton.twitter.com/exchange-media/images/v4/star_icon_3x_2.png");
+        assertThat(mVastVideoConfig.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.FORCE_LANDSCAPE);
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withCustomCtaTextAsSingleSpace_shouldReturnEmptyString() throws Exception {
+        // Vast redirect response
+        mFakeHttpLayer.addPendingHttpResponse(200,
+                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
+                        "<Extensions>" +
+                            "<Extension type=\"MoPub\">" +
+                                "<MoPubCtaText> </MoPubCtaText>" +     // single space, i.e. no text
+                            "</Extension>" +
+                        "</Extensions>"));
+        // Video download response
+        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+        assertThat(mVastVideoConfig.getCustomCtaText()).isEmpty();
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withCustomCtaTextLongerThan15Chars_shouldReturnNull() throws Exception {
+        // Vast redirect response
+        mFakeHttpLayer.addPendingHttpResponse(200,
+                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
+                        "<Extensions>" +
+                            "<Extension type=\"MoPub\">" +
+                                "<MoPubCtaText>1234567890123456</MoPubCtaText>" +     // 16 chars
+                            "</Extension>" +
+                        "</Extensions>"));
+        // Video download response
+        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+        assertThat(mVastVideoConfig.getCustomCtaText()).isNull();
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withCustomSkipTextLongerThan8Chars_shouldReturnNull() throws Exception {
+        // Vast redirect response
+        mFakeHttpLayer.addPendingHttpResponse(200,
+                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
+                        "<Extensions>" +
+                            "<Extension type=\"MoPub\">" +
+                                "<MoPubSkipText>123456789</MoPubSkipText>" +     // 9 chars
+                            "</Extension>" +
+                        "</Extensions>"));
+        // Video download response
+        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+        assertThat(mVastVideoConfig.getCustomSkipText()).isNull();
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withInvalidCustomForceOrientation_shouldReturnDefaultForceLandscapeOrientation() throws Exception {
+        // Vast redirect response
+        mFakeHttpLayer.addPendingHttpResponse(200,
+                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
+                        "<Extensions>" +
+                            "<Extension type=\"MoPub\">" +
+                                "<MoPubForceOrientation>abcd</MoPubForceOrientation>" +   // invalid value
+                            "</Extension>" +
+                        "</Extensions>"));
+        // Video download response
+        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+        assertThat(mVastVideoConfig.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.FORCE_LANDSCAPE);
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withCustomForceOrientationInMixedCaseAndUntrimmed_shouldReturnCustomForceOrientation() throws Exception {
+        // Vast redirect response
+        mFakeHttpLayer.addPendingHttpResponse(200,
+                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
+                        "<Extensions>" +
+                            "<Extension type=\"MoPub\">" +
+                                "<MoPubForceOrientation> PortRAIT  </MoPubForceOrientation>" +
+                            "</Extension>" +
+                        "</Extensions>"));
+        // Video download response
+        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+        assertThat(mVastVideoConfig.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.FORCE_PORTRAIT);
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withValidPercentSkipOffset_shouldReturnCorrectValue() throws Exception {
+        // Vast redirect response
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='25%'>"));
+        // Video download response
+        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+
+        assertThat(mVastVideoConfig.getSkipOffsetString()).isEqualTo("25%");
+    }
+
+
+    @Test
+    public void prepareVastVideoConfiguration_withValidAbsoluteSkipOffset_shouldReturnCorrectValue() throws Exception {
+        // Vast redirect response
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='  00:03:14 '>"));
+        // Video download response
+        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+
+        assertThat(mVastVideoConfig.getSkipOffsetString()).isEqualTo("00:03:14");
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withValidAbsoluteSkipOffsetWithExtraSpace_shouldReturnCorrectTrimmedValue() throws Exception {
+        // Vast redirect response
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='  00:03:14.159 '>"));
+        // Video download response
+        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+
+        assertThat(mVastVideoConfig.getSkipOffsetString()).isEqualTo("00:03:14.159");
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withSkipOffsets_shouldReturnLastParsedValue() throws Exception {
+        // Vast redirect response with skipoffset in percent format
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='25%'>"));
+        // Video download response
+        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+
+        // Also add a skipoffset in absolute format
+        subject.prepareVastVideoConfiguration(
+                TEST_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='00:03:14'>"),
+                vastManagerListener,
+                context);
+
+        Robolectric.runBackgroundTasks();
+        Robolectric.runUiThreadTasks();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+
+        // Verify that the last parsed skipoffset value is returned
+        assertThat(mVastVideoConfig.getSkipOffsetString()).isEqualTo("25%");
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withEmptySkipOffset_shouldReturnNull() throws Exception {
+        // Vast redirect response
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset=' '>"));
+        // Video download response
+        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+
+        assertThat(mVastVideoConfig.getSkipOffsetString()).isNull();
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withNoMediaUrlInXml_shouldReturnNull() throws Exception {
+        subject.prepareVastVideoConfiguration(TEST_VAST_BAD_NEST_URL_XML_STRING,
+                vastManagerListener, context);
+
+        Robolectric.runBackgroundTasks();
+        Robolectric.runUiThreadTasks();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
+        assertThat(mVastVideoConfig).isEqualTo(null);
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withNullXml_shouldReturnNull() throws Exception {
+        subject.prepareVastVideoConfiguration(null, vastManagerListener, context);
+
+        Robolectric.runBackgroundTasks();
+        Robolectric.runUiThreadTasks();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
+        assertThat(mVastVideoConfig).isEqualTo(null);
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withEmptyXml_shouldReturnNull() throws Exception {
+        subject.prepareVastVideoConfiguration("", vastManagerListener, context);
+
+        Robolectric.runBackgroundTasks();
+        Robolectric.runUiThreadTasks();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
+        assertThat(mVastVideoConfig).isEqualTo(null);
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withVideoInDiskCache_shouldNotDownloadVideo() throws Exception {
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+
+        CacheService.putToDiskCache("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4", "video_data".getBytes());
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        assertThat(mFakeHttpLayer.getSentHttpRequestInfos().size()).isEqualTo(1);
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+        assertThat(mVastVideoConfig.getDiskMediaFileUrl())
+                .isEqualTo(CacheService.getFilePathDiskCache("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4"));
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withUninitializedDiskCache_shouldReturnNull() throws Exception {
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
+        assertThat(mVastVideoConfig).isEqualTo(null);
+    }
+
+    @Test
+    public void cancel_shouldCancelBackgroundProcessingAndNotNotifyListenerWithNull() throws Exception {
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+
+        Robolectric.getBackgroundScheduler().pause();
+
+        subject.prepareVastVideoConfiguration(TEST_VAST_XML_STRING, vastManagerListener, context);
+
+        subject.cancel();
+
+        Robolectric.runBackgroundTasks();
+        Robolectric.runUiThreadTasks();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
+        assertThat(mVastVideoConfig).isEqualTo(null);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastMediaXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastMediaXmlManagerTest.java
new file mode 100644
index 00000000..729b2ace
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastMediaXmlManagerTest.java
@@ -0,0 +1,114 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.w3c.dom.Node;
+
+import static com.mopub.mobileads.test.support.VastUtils.createNode;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class VastMediaXmlManagerTest {
+
+    private VastMediaXmlManager subject;
+    private Node mediaNode;
+
+    @Before
+    public void setup() throws Exception {
+        String mediaXml = "<MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" " +
+                "bitrate=\"457\"" +
+                "               width=\"300\" height=\"225\">" +
+                "        <![CDATA[" +
+                "        http://s3.amazonaws.com/uploads.hipchat" +
+                ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
+                "        ]]>" +
+                "</MediaFile>";
+
+        mediaNode = createNode(mediaXml);
+        subject = new VastMediaXmlManager(mediaNode);
+    }
+
+    @Test
+    public void getWidth_shouldReturnWidthAttribute() {
+        assertThat(subject.getWidth()).isEqualTo(300);
+    }
+
+    @Test
+    public void getWidth_withNoWidthAttribute_shouldReturnNull() throws Exception {
+        String mediaXml = "<MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" " +
+                "bitrate=\"457\" height=\"225\">" +
+                "        <![CDATA[" +
+                "        http://s3.amazonaws.com/uploads.hipchat" +
+                ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
+                "        ]]>" +
+                "</MediaFile>";
+
+        mediaNode = createNode(mediaXml);
+        subject = new VastMediaXmlManager(mediaNode);
+
+        assertThat(subject.getWidth()).isNull();
+    }
+
+    @Test
+    public void getHeight_shouldReturnHeightAttribute() {
+        assertThat(subject.getHeight()).isEqualTo(225);
+    }
+
+    @Test
+    public void getHeight_withNoHeightAttribute_shouldReturnNull() throws Exception {
+        String mediaXml = "<MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" " +
+                "bitrate=\"457\" width=\"300\">" +
+                "        <![CDATA[" +
+                "        http://s3.amazonaws.com/uploads.hipchat" +
+                ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
+                "        ]]>" +
+                "</MediaFile>";
+
+        mediaNode = createNode(mediaXml);
+        subject = new VastMediaXmlManager(mediaNode);
+
+        assertThat(subject.getHeight()).isNull();
+    }
+
+    @Test
+    public void getType_shouldReturnMediaFileType() {
+        assertThat(subject.getType()).isEqualTo("video/quicktime");
+    }
+
+    @Test
+    public void getType_withNoTypeAttribute_shouldReturnNull() throws Exception {
+        String mediaXml = "<MediaFile id=\"1\" delivery=\"progressive\" " +
+                "bitrate=\"457\" width=\"300\" height=\"225\">" +
+                "        <![CDATA[" +
+                "        http://s3.amazonaws.com/uploads.hipchat" +
+                ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
+                "        ]]>" +
+                "</MediaFile>";
+
+        mediaNode = createNode(mediaXml);
+        subject = new VastMediaXmlManager(mediaNode);
+
+        assertThat(subject.getType()).isNull();
+    }
+
+    @Test
+    public void getMediaUrl_shouldReturnMediaFileUrl() {
+        assertThat(subject.getMediaUrl()).isEqualTo("http://s3.amazonaws.com/uploads.hipchat" +
+                ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4");
+    }
+
+    @Test
+    public void getMediaUrl_withNoMediaUrl_shouldReturnNull() throws Exception {
+        String mediaXml = "<MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" " +
+                "bitrate=\"457\" width=\"300\" height=\"225\">" +
+                "</MediaFile>";
+
+        mediaNode = createNode(mediaXml);
+        subject = new VastMediaXmlManager(mediaNode);
+
+        assertThat(subject.getMediaUrl()).isNull();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceTest.java
new file mode 100644
index 00000000..322a98a6
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceTest.java
@@ -0,0 +1,200 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+
+import static com.mopub.mobileads.VastResource.fromVastResourceXmlManager;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+public class VastResourceTest {
+
+    private VastResource subject;
+    @Mock private VastWebView mockVastWebView;
+
+    @Before
+    public void setup() {
+        subject = new VastResource("resource", VastResource.Type.STATIC_RESOURCE,
+                VastResource.CreativeType.IMAGE, 50, 100);
+    }
+
+    @Test
+    public void fromVastResourceXmlManager_withIFrameType_shouldSetIFrameResource() throws Exception {
+        final VastResourceXmlManager resourceXmlManager =
+                VastXmlManagerAggregatorTest.initializeVastResourceXmlManagerMock(
+                        "StaticResource", "image/jpeg", "IFrameResource", "HTMLResource");
+
+        VastResource vastResource =
+                fromVastResourceXmlManager(resourceXmlManager, VastResource.Type.IFRAME_RESOURCE,
+                        50, 100);
+
+        assertThat(vastResource.getResource()).isEqualTo("IFrameResource");
+        assertThat(vastResource.getType())
+                .isEqualTo(VastResource.Type.IFRAME_RESOURCE);
+        assertThat(vastResource.getCreativeType())
+                .isEqualTo(VastResource.CreativeType.NONE);
+    }
+
+    @Test
+    public void fromVastResourceXmlManager_withHTMLType_shouldSetHTMLResource() throws Exception {
+        final VastResourceXmlManager resourceXmlManager =
+                VastXmlManagerAggregatorTest.initializeVastResourceXmlManagerMock(
+                        "StaticResource", "image/jpeg", "IFrameResource", "HTMLResource");
+
+        VastResource vastResource =
+                fromVastResourceXmlManager(resourceXmlManager, VastResource.Type.HTML_RESOURCE, 50,
+                        100);
+
+        assertThat(vastResource.getResource()).isEqualTo("HTMLResource");
+        assertThat(vastResource.getType())
+                .isEqualTo(VastResource.Type.HTML_RESOURCE);
+        assertThat(vastResource.getCreativeType())
+                .isEqualTo(VastResource.CreativeType.NONE);
+    }
+
+    @Test
+    public void fromVastResourceXmlManager_withStaticType_withImageCreativeType_shouldSetImageCreativeType() throws Exception {
+        final VastResourceXmlManager resourceXmlManager =
+                VastXmlManagerAggregatorTest.initializeVastResourceXmlManagerMock(
+                        "StaticResource", "image/jpeg", "IFrameResource", "HTMLResource");
+
+        VastResource vastResource = fromVastResourceXmlManager(resourceXmlManager,
+                VastResource.Type.STATIC_RESOURCE, 50, 100);
+
+        assertThat(vastResource.getResource()).isEqualTo("StaticResource");
+        assertThat(vastResource.getType())
+                .isEqualTo(VastResource.Type.STATIC_RESOURCE);
+        assertThat(vastResource.getCreativeType())
+                .isEqualTo(VastResource.CreativeType.IMAGE);
+    }
+
+    @Test
+    public void fromVastResourceXmlManager_withStaticType_withJavaScriptCreativeType_shouldSetJavascriptCreativeType() throws Exception {
+        final VastResourceXmlManager resourceXmlManager =
+                VastXmlManagerAggregatorTest.initializeVastResourceXmlManagerMock(
+                        "StaticResource", "application/x-javascript", "IFrameResource", "HTMLResource");
+
+        VastResource vastResource = fromVastResourceXmlManager(resourceXmlManager,
+                VastResource.Type.STATIC_RESOURCE, 50, 100);
+
+        assertThat(vastResource.getResource()).isEqualTo("StaticResource");
+        assertThat(vastResource.getType())
+                .isEqualTo(VastResource.Type.STATIC_RESOURCE);
+        assertThat(vastResource.getCreativeType())
+                .isEqualTo(VastResource.CreativeType.JAVASCRIPT);
+    }
+
+    @Test
+    public void fromVastResourceXmlManager_withStaticType_withMissingCreativeType_shouldReturnNull() throws Exception {
+        final VastResourceXmlManager resourceXmlManager =
+                VastXmlManagerAggregatorTest.initializeVastResourceXmlManagerMock(
+                        "StaticResource", null, "IFrameResource", "HTMLResource");
+
+        assertThat(fromVastResourceXmlManager(
+                resourceXmlManager, VastResource.Type.STATIC_RESOURCE, 50, 100)).isNull();
+    }
+
+    @Test
+    public void fromVastResourceXmlManager_withStaticType_withInvalidCreativeType_shouldReturnNull() throws Exception {
+        final VastResourceXmlManager resourceXmlManager =
+                VastXmlManagerAggregatorTest.initializeVastResourceXmlManagerMock(
+                        "StaticResource", "INVALID_CREATIVE_TYPE", "IFrameResource", "HTMLResource");
+
+        assertThat(fromVastResourceXmlManager(
+                resourceXmlManager, VastResource.Type.STATIC_RESOURCE, 50, 100)).isNull();
+    }
+
+    @Test
+    public void fromVastResourceXmlManager_withNoResource_shouldReturnNull() throws Exception {
+        final VastResourceXmlManager resourceXmlManager =
+                VastXmlManagerAggregatorTest.initializeVastResourceXmlManagerMock(
+                        null, null, null, null);
+
+        assertThat(fromVastResourceXmlManager(
+                resourceXmlManager, VastResource.Type.STATIC_RESOURCE, 50, 100)).isNull();
+    }
+
+    @Test
+    public void constructor_shouldInitializeFieldsCorrectly() throws Exception {
+        assertThat(subject.getResource()).isEqualTo("resource");
+        assertThat(subject.getType()).isEqualTo(VastResource.Type.STATIC_RESOURCE);
+        assertThat(subject.getCreativeType()).isEqualTo(VastResource.CreativeType.IMAGE);
+    }
+
+    @Test
+    public void initializeWebView_withIFrameResource_shouldLoadData() throws Exception {
+        subject = new VastResource("resource", VastResource.Type.IFRAME_RESOURCE, VastResource
+                .CreativeType.NONE, 50, 100);
+        subject.initializeWebView(mockVastWebView);
+
+        verify(mockVastWebView).loadData(
+                "<iframe frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" " +
+                        "marginwidth=\"0\" style=\"border: 0px; margin: 0px;\" width=\"50\" " +
+                        "height=\"100\" src=\"resource\"></iframe>");
+    }
+
+    @Test
+    public void initializeWebView_withHTMLResource_shouldLoadData() throws Exception {
+        subject = new VastResource("resource", VastResource.Type.HTML_RESOURCE, VastResource
+                .CreativeType.NONE, 50, 100);
+        subject.initializeWebView(mockVastWebView);
+
+        verify(mockVastWebView).loadData("resource");
+    }
+
+    @Test
+    public void initializeWebView_withStaticResource_withImageCreativeType_shouldLoadData() throws Exception {
+        subject = new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
+                .CreativeType.IMAGE, 50, 100);
+        subject.initializeWebView(mockVastWebView);
+
+        verify(mockVastWebView).loadData("<html><head></head><body style=\"margin:0;padding:0\">" +
+                "<img src=\"resource\" width=\"100%\" style=\"max-width:100%;max-height:100%;\" />" +
+                "</body></html>");
+    }
+
+    @Test
+    public void initializeWebView_withStaticResource_withJavascriptCreativeType_shouldLoadData() throws Exception {
+        subject = new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
+                .CreativeType.JAVASCRIPT, 50, 100);
+        subject.initializeWebView(mockVastWebView);
+
+        verify(mockVastWebView).loadData("<script src=\"resource\"></script>");
+    }
+
+    @Test
+    public void getCorrectClickThroughUrl_shouldReturnCorrectClickThroughUrl() throws Exception {
+        subject = new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
+                .CreativeType.IMAGE, 50, 100);
+        assertThat(subject.getCorrectClickThroughUrl("xml", "web")).isEqualTo("xml");
+
+        subject = new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
+                .CreativeType.JAVASCRIPT, 50, 100);
+        assertThat(subject.getCorrectClickThroughUrl("xml", "web")).isEqualTo("web");
+
+        subject = new VastResource("resource", VastResource.Type.HTML_RESOURCE, VastResource
+                .CreativeType.NONE, 50, 100);
+        assertThat(subject.getCorrectClickThroughUrl("xml", "web")).isEqualTo("web");
+
+        subject = new VastResource("resource", VastResource.Type.IFRAME_RESOURCE, VastResource
+                .CreativeType.NONE, 50, 100);
+        assertThat(subject.getCorrectClickThroughUrl("xml", "web")).isEqualTo("web");
+
+        subject = new VastResource("resource", VastResource.Type.HTML_RESOURCE, VastResource
+                .CreativeType.NONE, 50, 100);
+        assertThat(subject.getCorrectClickThroughUrl("xml", null)).isNull();
+
+        subject = new VastResource("resource", VastResource.Type.IFRAME_RESOURCE, VastResource
+                .CreativeType.NONE, 50, 100);
+        assertThat(subject.getCorrectClickThroughUrl("xml", null)).isNull();
+
+        subject = new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
+                .CreativeType.IMAGE, 50, 100);
+        assertThat(subject.getCorrectClickThroughUrl("xml", null)).isEqualTo("xml");
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceXmlManagerTest.java
new file mode 100644
index 00000000..78f08b22
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceXmlManagerTest.java
@@ -0,0 +1,125 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.w3c.dom.Node;
+
+import static com.mopub.mobileads.test.support.VastUtils.createNode;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class VastResourceXmlManagerTest {
+
+    private VastResourceXmlManager subject;
+    private Node resourceNode;
+
+    @Before
+    public void setup() throws Exception {
+        String resourceXml =
+                "<root>" +
+                    "<StaticResource creativeType=\"ImAge/JpEg\">" +
+                        "<![CDATA[StaticResource]]>" +
+                    "</StaticResource>" +
+                    "<IFrameResource>" +
+                        "<![CDATA[IFrameResource]]>" +
+                    "</IFrameResource>" +
+                    "<HTMLResource>" +
+                        "<![CDATA[HTMLResource]]>" +
+                    "</HTMLResource>" +
+                "</root>";
+
+        resourceNode = createNode(resourceXml);
+        subject = new VastResourceXmlManager(resourceNode);
+    }
+
+    @Test
+    public void getStaticResource_shouldReturnStaticResource() throws Exception {
+        assertThat(subject.getStaticResource()).isEqualTo("StaticResource");
+    }
+
+    @Test
+    public void getStaticResource_withNoStaticResource_shouldReturnNull() throws Exception {
+        String iconXml = "<root>" +
+                    "<IFrameResource>" +
+                        "<![CDATA[IFrameResource]]>" +
+                    "</IFrameResource>" +
+                    "<HTMLResource>" +
+                        "<![CDATA[HTMLResource]]>" +
+                    "</HTMLResource>" +
+                "</root>";
+
+        resourceNode = createNode(iconXml);
+        subject = new VastResourceXmlManager(resourceNode);
+        assertThat(subject.getStaticResource()).isNull();
+    }
+
+    @Test
+    public void getStaticResourceType_shouldReturnLowerCaseStaticResourceType() throws Exception {
+        assertThat(subject.getStaticResourceType()).isEqualTo("image/jpeg");
+    }
+
+    @Test
+    public void getStaticResourceType_withNoStaticCreativeType_shouldReturnNull() throws Exception {
+        String resourceXml = "<root>" +
+                    "<StaticResource>" +
+                        "<![CDATA[StaticResource]]>" +
+                    "</StaticResource>" +
+                    "<IFrameResource>" +
+                        "<![CDATA[IFrameResource]]>" +
+                    "</IFrameResource>" +
+                    "<HTMLResource>" +
+                        "<![CDATA[HTMLResource]]>" +
+                    "</HTMLResource>" +
+                "</root>";
+
+        resourceNode = createNode(resourceXml);
+        subject = new VastResourceXmlManager(resourceNode);
+        assertThat(subject.getStaticResourceType()).isNull();
+    }
+
+    @Test
+    public void getIFrameResource_shouldReturnIFrameResource() throws Exception {
+        assertThat(subject.getIFrameResource()).isEqualTo("IFrameResource");
+    }
+
+    @Test
+    public void getIFrameResource_withNoIFrameResouce_shouldReturnNull() throws Exception {
+        String resourceXml = "<root>" +
+                    "<StaticResource creativeType=\"ImAge/JpEg\">" +
+                        "<![CDATA[StaticResource]]>" +
+                    "</StaticResource>" +
+                    "<HTMLResource>" +
+                        "<![CDATA[HTMLResource]]>" +
+                    "</HTMLResource>" +
+                "</root>";
+
+        resourceNode = createNode(resourceXml);
+        subject = new VastResourceXmlManager(resourceNode);
+        assertThat(subject.getIFrameResource()).isNull();
+    }
+
+    @Test
+    public void getHTMLResource_shouldReturnHTMLResource() throws Exception {
+        assertThat(subject.getHTMLResource()).isEqualTo("HTMLResource");
+    }
+
+    @Test
+    public void getHTMLResource_withNoHTMLResource_shouldReturnNull() throws Exception {
+        String resourceXml = "<root>" +
+                    "<StaticResource creativeType=\"ImAge/JpEg\">" +
+                        "<![CDATA[StaticResource]]>" +
+                    "</StaticResource>" +
+                    "<IFrameResource>" +
+                        "<![CDATA[IFrameResource]]>" +
+                    "</IFrameResource>" +
+                "</root>";
+
+        resourceNode = createNode(resourceXml);
+        subject = new VastResourceXmlManager(resourceNode);
+        assertThat(subject.getHTMLResource()).isNull();
+    }
+
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java
new file mode 100644
index 00000000..b711a3de
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java
@@ -0,0 +1,140 @@
+package com.mopub.mobileads;
+
+import android.annotation.TargetApi;
+import android.graphics.Bitmap;
+import android.media.MediaMetadataRetriever;
+import android.os.Build;
+import android.widget.ImageView;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.annotation.Config;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.anyLong;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.doThrow;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+public class VastVideoBlurLastVideoFrameTaskTest {
+    @Mock private MediaMetadataRetriever mockMediaMetadataRetriever;
+    @Mock private ImageView mockBlurredLastVideoFrameImageView;
+    @Mock private Bitmap mockBitmap;
+
+    private VastVideoBlurLastVideoFrameTask subject;
+    private String videoPath;
+    private int videoDuration;
+
+    @TargetApi(Build.VERSION_CODES.GINGERBREAD_MR1)
+    @Before
+    public void setUp() throws Exception {
+        videoPath = "disk_video_path";
+        videoDuration = 10000;
+
+        when(mockMediaMetadataRetriever.getFrameAtTime(anyLong(), anyInt())).thenReturn(mockBitmap);
+
+        subject = new VastVideoBlurLastVideoFrameTask(mockMediaMetadataRetriever,
+                mockBlurredLastVideoFrameImageView, videoDuration);
+    }
+
+    @Config(reportSdk = Build.VERSION_CODES.GINGERBREAD)
+    @Test
+    public void doInBackground_beforeGingerbreadMr1_shouldReturnFalse() throws Exception {
+        assertThat(subject.doInBackground(videoPath)).isFalse();
+        assertThat(subject.getBlurredLastVideoFrame()).isNull();
+    }
+
+    @Config(reportSdk = Build.VERSION_CODES.GINGERBREAD_MR1)
+    @Test
+    public void doInBackground_atLeastGingerbreadMr1_shouldReturnTrue() throws Exception {
+        assertThat(subject.doInBackground(videoPath)).isTrue();
+        assertThat(subject.getBlurredLastVideoFrame()).isEqualTo(mockBitmap);
+    }
+
+    @TargetApi(Build.VERSION_CODES.GINGERBREAD_MR1)
+    @Test
+    public void doInBackground_whenSetDataSourceThrowsRuntimeException_shouldCatchExceptionAndReturnFalse() throws Exception {
+        doThrow(new RuntimeException()).when(mockMediaMetadataRetriever).setDataSource(anyString());
+
+        assertThat(subject.doInBackground(videoPath)).isFalse();
+        assertThat(subject.getBlurredLastVideoFrame()).isNull();
+    }
+
+    @TargetApi(Build.VERSION_CODES.GINGERBREAD_MR1)
+    @Test
+    public void doInBackground_whenGetLastFrameReturnsNull_shouldReturnFalse() throws Exception {
+        when(mockMediaMetadataRetriever.getFrameAtTime(anyLong(), anyInt())).thenReturn(null);
+
+        assertThat(subject.doInBackground(videoPath)).isFalse();
+        assertThat(subject.getBlurredLastVideoFrame()).isNull();
+    }
+    
+    @Test
+    public void doInBackground_whenVideoPathIsNull_shouldReturnFalse() throws Exception {
+        assertThat(subject.doInBackground((String) null)).isFalse();
+        assertThat(subject.getBlurredLastVideoFrame()).isNull();
+    }
+
+    @Test
+    public void doInBackground_whenVideoPathsArrayIsNull_shouldReturnFalse() throws Exception {
+        assertThat(subject.doInBackground((String[]) null)).isFalse();
+        assertThat(subject.getBlurredLastVideoFrame()).isNull();
+    }
+
+    @Test
+    public void doInBackground_whenVideoPathsArrayIsEmpty_shouldReturnFalse() throws Exception {
+        assertThat(subject.doInBackground(new String[0])).isFalse();
+        assertThat(subject.getBlurredLastVideoFrame()).isNull();
+    }
+
+    @Test
+    public void doInBackground_whenVideoPathsArrayHasMultipleElements_shouldParseFirstElement() throws Exception {
+        assertThat(subject.doInBackground(videoPath, null)).isTrue();
+        assertThat(subject.getBlurredLastVideoFrame()).isEqualTo(mockBitmap);
+    }
+
+    @Test
+    public void doInBackground_whenFirstElementOfVideoPathsArrayIsNull_shouldReturnFalse() throws Exception {
+        assertThat(subject.doInBackground(null, videoPath)).isFalse();
+        assertThat(subject.getBlurredLastVideoFrame()).isNull();
+    }
+
+    @Test
+    public void onPostExecute_whenBlurringSucceeded_shouldSetImageBitmap() throws Exception {
+        subject.onPostExecute(true);
+
+        verify(mockBlurredLastVideoFrameImageView).setImageBitmap(subject.getBlurredLastVideoFrame());
+    }
+
+    @Test
+    public void onPostExecute_whenBlurringFailed_shouldNotSetImageBitmap() throws Exception {
+        subject.onPostExecute(false);
+
+        verify(mockBlurredLastVideoFrameImageView, never()).setImageBitmap(any(Bitmap.class));
+    }
+
+    @Test
+    public void onPostExecute_whenResultIsNull_shouldNotSetImageBitmap() throws Exception {
+        subject.onPostExecute(null);
+
+        verify(mockBlurredLastVideoFrameImageView, never()).setImageBitmap(any(Bitmap.class));
+    }
+
+    @Test
+    public void onPostExecute_whenTaskIsAlreadyCancelled_shouldNotSetImageBitmap() throws Exception {
+        subject.cancel(true);
+
+        subject.onPostExecute(true);
+
+        verify(mockBlurredLastVideoFrameImageView, never()).setImageBitmap(any(Bitmap.class));
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/ToolbarWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCloseButtonWidgetTest.java
similarity index 73%
rename from mopub-sdk/src/test/java/com/mopub/mobileads/ToolbarWidgetTest.java
rename to mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCloseButtonWidgetTest.java
index bee3c2d1..c7c825c1 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/ToolbarWidgetTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCloseButtonWidgetTest.java
@@ -4,7 +4,6 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
-import android.view.View;
 import android.widget.ImageView;
 
 import com.mopub.common.test.support.SdkTestRunner;
@@ -23,8 +22,6 @@
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
 
-import static android.view.Gravity.CENTER_VERTICAL;
-import static android.view.Gravity.RIGHT;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.eq;
@@ -34,9 +31,9 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-public class ToolbarWidgetTest {
+public class VastVideoCloseButtonWidgetTest {
     private Context context;
-    private ToolbarWidget subject;
+    private VastVideoCloseButtonWidget subject;
 
     private static final String ICON_IMAGE_URL = "iconimageurl";
 
@@ -56,63 +53,48 @@ public void setUp() throws Exception {
         Networking.setRequestQueueForTesting(mockRequestQueue);
         Networking.setImageLoaderForTesting(mockImageLoader);
         context = Robolectric.buildActivity(Activity.class).create().get();
-    }
-
-    private void initializeSubject() {
-        subject = new ToolbarWidget.Builder(context)
-                .weight(1f)
-                .widgetGravity(CENTER_VERTICAL | RIGHT)
-                .defaultText("Close")
-                .drawable(new CloseButtonDrawable())
-                .visibility(View.GONE)
-                .build();
+        subject = new VastVideoCloseButtonWidget(context);
     }
 
     @Test
-    public void updateImage_imageListenerOnResponse_shouldUseImageBitmap() throws Exception {
-        initializeSubject();
-
+    public void updateCloseButtonIcon_imageListenerOnResponse_shouldUseImageBitmap() throws Exception {
         when(mockImageContainer.getBitmap()).thenReturn(mockBitmap);
 
-        subject.updateImage(ICON_IMAGE_URL);
+        subject.updateCloseButtonIcon(ICON_IMAGE_URL);
 
         verify(mockImageLoader).get(eq(ICON_IMAGE_URL), imageCaptor.capture());
         ImageLoader.ImageListener listener = imageCaptor.getValue();
         listener.onResponse(mockImageContainer, true);
-        assertThat(((BitmapDrawable) subject.getImageViewDrawable()).getBitmap()).isEqualTo(mockBitmap);
+        assertThat(((BitmapDrawable) subject.getImageView().getDrawable()).getBitmap()).isEqualTo(mockBitmap);
     }
 
     @Test
     public void updateImage_imageListenerOnResponseWhenReturnedBitMapIsNull_shouldUseDefaultCloseButtonDrawable() throws Exception {
-        initializeSubject();
-
         final ImageView imageViewSpy = spy(subject.getImageView());
         subject.setImageView(imageViewSpy);
 
         when(mockImageContainer.getBitmap()).thenReturn(null);
 
-        subject.updateImage(ICON_IMAGE_URL);
+        subject.updateCloseButtonIcon(ICON_IMAGE_URL);
 
         verify(mockImageLoader).get(eq(ICON_IMAGE_URL), imageCaptor.capture());
         ImageLoader.ImageListener listener = imageCaptor.getValue();
         listener.onResponse(mockImageContainer, true);
         verify(imageViewSpy, never()).setImageBitmap(any(Bitmap.class));
-        assertThat(subject.getImageViewDrawable()).isInstanceOf(CloseButtonDrawable.class);
+        assertThat(subject.getImageView().getDrawable()).isInstanceOf(CloseButtonDrawable.class);
     }
 
     @Test
     public void updateImage_imageListenerOnErrorResponse_shouldUseDefaultCloseButtonDrawable() throws Exception {
-        initializeSubject();
-
         final ImageView imageViewSpy = spy(subject.getImageView());
         subject.setImageView(imageViewSpy);
 
-        subject.updateImage(ICON_IMAGE_URL);
+        subject.updateCloseButtonIcon(ICON_IMAGE_URL);
 
         verify(mockImageLoader).get(eq(ICON_IMAGE_URL), imageCaptor.capture());
         ImageLoader.ImageListener listener = imageCaptor.getValue();
         listener.onErrorResponse(new VolleyError());
         verify(imageViewSpy, never()).setImageBitmap(any(Bitmap.class));
-        assertThat(subject.getImageViewDrawable()).isInstanceOf(CloseButtonDrawable.class);
+        assertThat(subject.getImageView().getDrawable()).isInstanceOf(CloseButtonDrawable.class);
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java
new file mode 100644
index 00000000..b41ec047
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java
@@ -0,0 +1,193 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Intent;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.Networking;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import static com.mopub.common.VolleyRequestMatcher.isUrl;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.argThat;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+@RunWith(SdkTestRunner.class)
+public class VastVideoConfigTest {
+
+    @Mock MoPubRequestQueue mockRequestQueue;
+    private Activity activity;
+    private VastVideoConfig subject;
+
+    @Before
+    public void setup() {
+        activity = spy(Robolectric.buildActivity(Activity.class).create().get());
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+        subject = new VastVideoConfig();
+        subject.setNetworkMediaFileUrl("video_url");
+    }
+
+    @Test
+    public void addFractionalTrackers_multipleTimes_shouldBeSorted() throws Exception {
+        ArrayList<VastFractionalProgressTracker> testSet1 = new ArrayList<VastFractionalProgressTracker>();
+        testSet1.add(new VastFractionalProgressTracker("test1a", 0.24f));
+        testSet1.add(new VastFractionalProgressTracker("test1b", 0.5f));
+        testSet1.add(new VastFractionalProgressTracker("test1c", 0.91f));
+
+        ArrayList<VastFractionalProgressTracker> testSet2 = new ArrayList<VastFractionalProgressTracker>();
+        testSet2.add(new VastFractionalProgressTracker("test2a", 0.14f));
+        testSet2.add(new VastFractionalProgressTracker("test2b", 0.6f));
+        testSet2.add(new VastFractionalProgressTracker("test2c", 0.71f));
+
+        VastVideoConfig subject = new VastVideoConfig();
+
+        subject.addFractionalTrackers(testSet1);
+        subject.addFractionalTrackers(testSet2);
+
+        assertThat(subject.getFractionalTrackers()).isSorted();
+    }
+
+    @Test
+    public void addAbsoluteTrackers_multipleTimes_shouldBesSorted() throws Exception {
+        ArrayList<VastAbsoluteProgressTracker> testSet1 = new ArrayList<VastAbsoluteProgressTracker>();
+        testSet1.add(new VastAbsoluteProgressTracker("test1a", 1000));
+        testSet1.add(new VastAbsoluteProgressTracker("test1b", 10000));
+        testSet1.add(new VastAbsoluteProgressTracker("test1c", 50000));
+
+        ArrayList<VastAbsoluteProgressTracker> testSet2 = new ArrayList<VastAbsoluteProgressTracker>();
+        testSet2.add(new VastAbsoluteProgressTracker("test2a", 1100));
+        testSet2.add(new VastAbsoluteProgressTracker("test2b", 9000));
+        testSet2.add(new VastAbsoluteProgressTracker("test2c", 62000));
+
+        VastVideoConfig subject = new VastVideoConfig();
+
+        subject.addAbsoluteTrackers(testSet1);
+        subject.addAbsoluteTrackers(testSet2);
+
+        assertThat(subject.getAbsoluteTrackers()).isSorted();
+    }
+
+
+    @Test
+    public void getUntriggeredTrackersBefore_withTriggeredTrackers_shouldNotReturnTriggered() throws Exception {
+        VastVideoConfig subject = new VastVideoConfig();
+        subject.setDiskMediaFileUrl("disk_video_path");
+        subject.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("first", 0.25f),
+                        new VastFractionalProgressTracker("second", 0.5f),
+                        new VastFractionalProgressTracker("third", 0.75f)));
+        subject.addAbsoluteTrackers(
+                Arrays.asList(new VastAbsoluteProgressTracker("5secs", 5000),
+                        new VastAbsoluteProgressTracker("10secs", 10000)));
+
+        final List<VastTracker> untriggeredTrackers = subject.getUntriggeredTrackersBefore(11000,
+                11000);
+        assertThat(untriggeredTrackers).hasSize(5);
+        untriggeredTrackers.get(0).setTracked();
+
+        final List<VastTracker> secondTrackersList = subject.getUntriggeredTrackersBefore(11000,
+                11000);
+        assertThat(secondTrackersList).hasSize(4);
+    }
+
+    @Test
+    public void getUntriggeredTrackersBefore_shouldReturnAllTrackersSorted() throws Exception {
+        VastVideoConfig subject = new VastVideoConfig();
+        subject.setDiskMediaFileUrl("disk_video_path");
+        subject.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("first", 0.25f),
+                        new VastFractionalProgressTracker("second", 0.5f),
+                        new VastFractionalProgressTracker("third", 0.75f)));
+        subject.addAbsoluteTrackers(
+                Arrays.asList(new VastAbsoluteProgressTracker("1secs", 1000),
+                        new VastAbsoluteProgressTracker("10secs", 10000)));
+
+        final List<VastTracker> untriggeredTrackers = subject.getUntriggeredTrackersBefore(11000,
+                11000);
+        assertThat(untriggeredTrackers).hasSize(5);
+
+        // Sorted absolute trackers, followed by sorted fractional trackers
+        final VastTracker tracker0 = untriggeredTrackers.get(0);
+        assertThat(tracker0).isExactlyInstanceOf(VastAbsoluteProgressTracker.class);
+        assertThat(((VastAbsoluteProgressTracker) tracker0).getTrackingMilliseconds()).isEqualTo(
+                1000);
+
+        final VastTracker tracker1 = untriggeredTrackers.get(1);
+        assertThat(tracker1).isExactlyInstanceOf(VastAbsoluteProgressTracker.class);
+        assertThat(((VastAbsoluteProgressTracker) tracker1).getTrackingMilliseconds()).isEqualTo(
+                10000);
+
+
+        final VastTracker tracker2 = untriggeredTrackers.get(2);
+        assertThat(tracker2).isExactlyInstanceOf(VastFractionalProgressTracker.class);
+        assertThat(((VastFractionalProgressTracker) tracker2).trackingFraction()).isEqualTo(0.25f);
+
+        final VastTracker tracker3 = untriggeredTrackers.get(3);
+        assertThat(tracker3).isExactlyInstanceOf(VastFractionalProgressTracker.class);
+        assertThat(((VastFractionalProgressTracker) tracker3).trackingFraction()).isEqualTo(0.5f);
+
+        final VastTracker tracker4 = untriggeredTrackers.get(4);
+        assertThat(tracker4).isExactlyInstanceOf(VastFractionalProgressTracker.class);
+        assertThat(((VastFractionalProgressTracker) tracker4).trackingFraction()).isEqualTo(0.75f);
+    }
+
+    @Test
+    public void handleClick_withNullClickThroughUrl_shouldNotOpenNewActivity() throws Exception {
+        subject.handleClick(activity, 1234, 1);
+
+        Robolectric.getUiThreadScheduler().unPause();
+        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+    }
+
+    @Test
+    public void handleClick_withMoPubNativeBrowserClickThroughUrl_shouldOpenExternalBrowser_shouldMakeTrackingHttpRequest() throws Exception {
+        subject.setClickThroughUrl(
+                "mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.mopub.com%2F");
+        subject.addClickTrackers(
+                Arrays.asList(new VastTracker("http://trackerone+content=[CONTENTPLAYHEAD]"),
+                        new VastTracker("http://trackertwo+error=[ERRORCODE]&asset=[ASSETURI]")));
+
+        subject.handleClick(activity, 2345, 1234);
+
+        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.runBackgroundTasks();
+        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(intent.getDataString()).isEqualTo("http://www.mopub.com/");
+        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
+        verify(mockRequestQueue).add(argThat(isUrl("http://trackerone+content=00:00:02.345")));
+        verify(mockRequestQueue).add(argThat(isUrl("http://trackertwo+error=&asset=video_url")));
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void handleClick_withMalformedMoPubNativeBrowserClickThroughUrl_shouldNotOpenANewActivity() throws Exception {
+        // url2 is an invalid query parameter
+        subject.setClickThroughUrl(
+                "mopubnativebrowser://navigate?url2=http%3A%2F%2Fwww.mopub.com%2F");
+
+        subject.handleClick(activity, 3456, 1);
+
+        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+    }
+
+    @Test
+    public void handleClick_withAboutBlankClickThroughUrl_shouldFailSilently() throws Exception {
+        subject.setClickThroughUrl("about:blank");
+
+        subject.handleClick(activity, 4567, 1);
+
+        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCtaButtonWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCtaButtonWidgetTest.java
new file mode 100644
index 00000000..988d36b1
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCtaButtonWidgetTest.java
@@ -0,0 +1,226 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.res.Configuration;
+import android.view.View;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class VastVideoCtaButtonWidgetTest {
+    private Context context;
+    private VastVideoCtaButtonWidget subject;
+
+    @Before
+    public void setUp() throws Exception {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+    }
+
+    @Test
+    public void constructor_withCompanionAd_shouldBeInvisibleAndNotSetLayoutParams() throws Exception {
+        subject = new VastVideoCtaButtonWidget(context, 0, true, true);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(subject.getLayoutParams()).isNull();
+    }
+
+    @Test
+    public void constructor_withoutCompanionAd_shouldBeInvisibleAndNotSetLayoutParams() throws Exception {
+        subject = new VastVideoCtaButtonWidget(context, 0, false, true);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(subject.getLayoutParams()).isNull();
+    }
+
+    @Test
+    public void constructor_withCompanionAd_withNoClickthroughUrl_shouldBeGoneAndNotSetLayoutParams() throws Exception {
+        subject = new VastVideoCtaButtonWidget(context, 0, true, false);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.GONE);
+        assertThat(subject.getLayoutParams()).isNull();
+    }
+
+    @Test
+    public void constructor_withoutCompanionAd_withNoClickthroughUrl_shouldBeGoneAndNotSetLayoutParams() throws Exception {
+        subject = new VastVideoCtaButtonWidget(context, 0, false, false);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.GONE);
+        assertThat(subject.getLayoutParams()).isNull();
+    }
+
+    // Video is skippable, has companion ad, has clickthrough url, CTA button initially invisible
+
+    @Test
+    public void notifyVideoSkippable_withCompanionAdAndInPortrait_shouldBeVisibleAndSetPortraitLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+        subject = new VastVideoCtaButtonWidget(context, 0, true, true);
+
+        subject.notifyVideoSkippable();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.hasPortraitLayoutParams()).isTrue();
+    }
+
+    @Test
+    public void notifyVideoSkippable_withCompanionAdAndInLandscape_shouldBeVisibleAndSetLandscapeLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
+        subject = new VastVideoCtaButtonWidget(context, 0, true, true);
+
+        subject.notifyVideoSkippable();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.hasLandscapeLayoutParams()).isTrue();
+    }
+
+    @Test
+    public void notifyVideoSkippable_withCompanionAdAndOrientationUndefined_shouldBeVisibleAndSetPortraitLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_UNDEFINED;
+        subject = new VastVideoCtaButtonWidget(context, 0, true, true);
+
+        subject.notifyVideoSkippable();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.hasPortraitLayoutParams()).isTrue();
+    }
+
+    // Video is skippable, no companion ad, has clickthrough url, CTA button initially invisible
+
+    @Test
+    public void notifyVideoSkippable_withoutCompanionAdAndInPortrait_shouldBeVisibleAndSetPortraitLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+        subject = new VastVideoCtaButtonWidget(context, 0, false, true);
+
+        subject.notifyVideoSkippable();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.hasPortraitLayoutParams()).isTrue();
+    }
+
+    @Test
+    public void notifyVideoSkippable_withoutCompanionAdAndInLandscape_shouldBeVisibleAndSetLandscapeLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
+        subject = new VastVideoCtaButtonWidget(context, 0, false, true);
+
+        subject.notifyVideoSkippable();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.hasLandscapeLayoutParams()).isTrue();
+    }
+
+    @Test
+    public void notifyVideoSkippable_withoutCompanionAdAndOrientationUndefined_shouldBeVisibleAndSetPortraitLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_UNDEFINED;
+        subject = new VastVideoCtaButtonWidget(context, 0, false, true);
+
+        subject.notifyVideoSkippable();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.hasPortraitLayoutParams()).isTrue();
+    }
+
+    // Video is complete, has companion ad, CTA button already visible
+
+    @Test
+    public void notifyVideoComplete_withCompanionAdAndInPortrait_shouldBeGoneAndNotChangeLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+        subject = new VastVideoCtaButtonWidget(context, 0, true, true);
+        subject.setVisibility(View.VISIBLE);
+
+        subject.notifyVideoComplete();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.GONE);
+        assertThat(subject.getLayoutParams()).isNull();
+    }
+
+    @Test
+    public void notifyVideoComplete_withCompanionAdAndInLandscape_shouldBeGoneAndNotChangeLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
+        subject = new VastVideoCtaButtonWidget(context, 0, true, true);
+        subject.setVisibility(View.VISIBLE);
+
+        subject.notifyVideoComplete();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.GONE);
+        assertThat(subject.getLayoutParams()).isNull();
+    }
+
+    @Test
+    public void notifyVideoComplete_withCompanionAdAndOrientationUndefined_shouldBeGoneAndNotChangeLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_UNDEFINED;
+        subject = new VastVideoCtaButtonWidget(context, 0, true, true);
+        subject.setVisibility(View.VISIBLE);
+
+        subject.notifyVideoComplete();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.GONE);
+        assertThat(subject.getLayoutParams()).isNull();
+    }
+
+    // Video is complete, no companion ad, has clickthrough url, CTA button already visible
+
+    @Test
+    public void notifyVideoComplete_withoutCompanionAdAndInPortrait_shouldBeVisibleAndSetPortraitLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+        subject = new VastVideoCtaButtonWidget(context, 0, false, true);
+        subject.setVisibility(View.VISIBLE);
+
+        subject.notifyVideoComplete();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.hasPortraitLayoutParams()).isTrue();
+    }
+
+    @Test
+    public void notifyVideoComplete_withoutCompanionAdAndInLandscape_shouldBeVisibleAndSetLandscapeLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
+        subject = new VastVideoCtaButtonWidget(context, 0, false, true);
+        subject.setVisibility(View.VISIBLE);
+
+        subject.notifyVideoComplete();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.hasLandscapeLayoutParams()).isTrue();
+    }
+
+    @Test
+    public void notifyVideoComplete_withoutCompanionAdAndOrientationUndefined_shouldBeVisibleAndSetPortraitLayoutParams() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_UNDEFINED;
+        subject = new VastVideoCtaButtonWidget(context, 0, false, true);
+        subject.setVisibility(View.VISIBLE);
+
+        subject.notifyVideoComplete();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.hasPortraitLayoutParams()).isTrue();
+    }
+
+    // No clickthrough url means never show cta button
+
+    @Test
+    public void notifyVideoSkippable_withoutClickthroughUrl_shouldBeGone() throws Exception {
+        subject = new VastVideoCtaButtonWidget(context, 0, true, false);
+        subject.setVisibility(View.VISIBLE);
+
+        subject.notifyVideoSkippable();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.GONE);
+    }
+
+    @Test
+    public void notifyVideoComplete_withoutClickthroughUrl_shouldBeGone() throws Exception {
+        subject = new VastVideoCtaButtonWidget(context, 0, true, false);
+        subject.setVisibility(View.VISIBLE);
+
+        subject.notifyVideoComplete();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.GONE);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java
index dd69502f..9fdafe8d 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java
@@ -7,7 +7,6 @@
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 
-import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -86,6 +85,14 @@ public void execute_whenUrlArrayIsNull_shouldSignalDownloadFailed() throws Excep
         verify(mVastVideoDownloadTaskListener).onComplete(false);
     }
 
+    @Test
+    public void execute_whenUrlArrayIsEmpty_shouldSignalDownloadFailed() throws Exception {
+        subject.execute(new String[0]);
+
+        semaphore.acquire();
+        verify(mVastVideoDownloadTaskListener).onComplete(false);
+    }
+
     @Test
     public void execute_whenFirstElementOfUrlArrayIsNull_shouldSignalDownloadFailed() throws Exception {
         subject.execute(null, "ignored");
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoGradientStripWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoGradientStripWidgetTest.java
new file mode 100644
index 00000000..f4b3c240
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoGradientStripWidgetTest.java
@@ -0,0 +1,247 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.res.Configuration;
+import android.graphics.drawable.GradientDrawable;
+import android.view.View;
+import android.widget.RelativeLayout;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.DeviceUtils;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class VastVideoGradientStripWidgetTest {
+    private Context context;
+    private VastVideoGradientStripWidget subject;
+
+    @Before
+    public void setUp() throws Exception {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+    }
+
+    @Test
+    public void constructor_whenForcePortrait_shouldBeInvisible() throws Exception {
+        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
+                DeviceUtils.ForceOrientation.FORCE_PORTRAIT, true, View.VISIBLE,
+                RelativeLayout.ALIGN_TOP, 0);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
+    }
+
+    @Test
+    public void constructor_whenForceLandscape_shouldBeVisible() throws Exception {
+        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
+                DeviceUtils.ForceOrientation.FORCE_LANDSCAPE, true, View.VISIBLE,
+                RelativeLayout.ALIGN_TOP, 0);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+    }
+
+    @Test
+    public void constructor_whenUseDeviceOrientation_shouldBeInvisible() throws Exception {
+        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
+                DeviceUtils.ForceOrientation.DEVICE_ORIENTATION, true, View.VISIBLE,
+                RelativeLayout.ALIGN_TOP, 0);
+
+        // If not forcing orientation, visibility depends on device orientation,
+        // which is initially ORIENTATION_UNDEFINED in tests
+        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
+    }
+
+    @Test
+    public void constructor_whenForceOrientationUndefined_shouldBeInvisible() throws Exception {
+        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
+                DeviceUtils.ForceOrientation.UNDEFINED, true, View.VISIBLE,
+                RelativeLayout.ALIGN_TOP, 0);
+
+        // If force orientation undefined, visibility depends on device orientation,
+        // which is initially ORIENTATION_UNDEFINED in tests
+        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
+    }
+
+    // Video is still playing, forcing portrait orientation
+
+    @Test
+    public void onConfigurationChanged_whenForcePortraitAndDeviceInPortrait_shouldBeInvisible() throws Exception {
+        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
+                DeviceUtils.ForceOrientation.FORCE_PORTRAIT, true, View.VISIBLE,
+                RelativeLayout.ALIGN_TOP, 0);
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+
+        subject.onConfigurationChanged(context.getResources().getConfiguration());
+
+        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
+    }
+
+    @Test
+    public void onConfigurationChanged_whenForcePortraitAndDeviceInLandscape_shouldBeInvisible() throws Exception {
+        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
+                DeviceUtils.ForceOrientation.FORCE_PORTRAIT, true, View.VISIBLE,
+                RelativeLayout.ALIGN_TOP, 0);
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
+
+        subject.onConfigurationChanged(context.getResources().getConfiguration());
+
+        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
+    }
+
+    @Test
+    public void onConfigurationChanged_whenForcePortraitAndDeviceOrientationUndefined_shouldBeInvisible() throws Exception {
+        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
+                DeviceUtils.ForceOrientation.FORCE_PORTRAIT, true, View.VISIBLE,
+                RelativeLayout.ALIGN_TOP, 0);
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_UNDEFINED;
+
+        subject.onConfigurationChanged(context.getResources().getConfiguration());
+
+        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
+    }
+
+    // Video is still playing, forcing landscape orientation
+
+    @Test
+    public void onConfigurationChanged_whenForceLandscapeAndDeviceInPortrait_shouldBeVisible() throws Exception {
+        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
+                DeviceUtils.ForceOrientation.FORCE_LANDSCAPE, true, View.VISIBLE,
+                RelativeLayout.ALIGN_TOP, 0);
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+
+        subject.onConfigurationChanged(context.getResources().getConfiguration());
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+    }
+
+    @Test
+    public void onConfigurationChanged_whenForceLandscapeAndDeviceInLandscape_shouldBeVisible() throws Exception {
+        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
+                DeviceUtils.ForceOrientation.FORCE_LANDSCAPE, true, View.VISIBLE,
+                RelativeLayout.ALIGN_TOP, 0);
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
+
+        subject.onConfigurationChanged(context.getResources().getConfiguration());
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+    }
+
+    @Test
+    public void onConfigurationChanged_whenForceLandscapeAndDeviceOrientationUndefined_shouldBeVisible() throws Exception {
+        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
+                DeviceUtils.ForceOrientation.FORCE_LANDSCAPE, true, View.VISIBLE,
+                RelativeLayout.ALIGN_TOP, 0);
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_UNDEFINED;
+
+        subject.onConfigurationChanged(context.getResources().getConfiguration());
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+    }
+
+    // Video is still playing, use device orientation
+
+    @Test
+    public void onConfigurationChanged_whenUseDeviceOrientationAndDeviceInPortrait_shouldBeInvisible() throws Exception {
+        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
+                DeviceUtils.ForceOrientation.DEVICE_ORIENTATION, true, View.VISIBLE,
+                RelativeLayout.ALIGN_TOP, 0);
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+
+        subject.onConfigurationChanged(context.getResources().getConfiguration());
+
+        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
+    }
+
+    @Test
+    public void onConfigurationChanged_whenUseDeviceOrientationAndDeviceInLandscape_shouldBeVisible() throws Exception {
+        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
+                DeviceUtils.ForceOrientation.DEVICE_ORIENTATION, true, View.VISIBLE,
+                RelativeLayout.ALIGN_TOP, 0);
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
+
+        subject.onConfigurationChanged(context.getResources().getConfiguration());
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+    }
+
+    @Test
+    public void onConfigurationChanged_whenUseDeviceOrientationAndDeviceOrientationUndefined_shouldBeInvisible() throws Exception {
+        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
+                DeviceUtils.ForceOrientation.DEVICE_ORIENTATION, true, View.VISIBLE,
+                RelativeLayout.ALIGN_TOP, 0);
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_UNDEFINED;
+
+        subject.onConfigurationChanged(context.getResources().getConfiguration());
+
+        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
+    }
+
+    // Video is still playing, force orientation undefined
+
+    @Test
+    public void onConfigurationChanged_whenForceOrientationUndefinedAndDeviceInPortrait_shouldBeInvisible() throws Exception {
+        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
+                DeviceUtils.ForceOrientation.UNDEFINED, true, View.VISIBLE,
+                RelativeLayout.ALIGN_TOP, 0);
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+
+        subject.onConfigurationChanged(context.getResources().getConfiguration());
+
+        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
+    }
+
+    @Test
+    public void onConfigurationChanged_whenForceOrientationUndefinedAndDeviceInLandscape_shouldBeVisible() throws Exception {
+        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
+                DeviceUtils.ForceOrientation.UNDEFINED, true, View.VISIBLE,
+                RelativeLayout.ALIGN_TOP, 0);
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
+
+        subject.onConfigurationChanged(context.getResources().getConfiguration());
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+    }
+
+    @Test
+    public void onConfigurationChanged_whenForceOrientationUndefinedAndDeviceOrientationUndefined_shouldBeInvisible() throws Exception {
+        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
+                DeviceUtils.ForceOrientation.UNDEFINED, true, View.VISIBLE,
+                RelativeLayout.ALIGN_TOP, 0);
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_UNDEFINED;
+
+        subject.onConfigurationChanged(context.getResources().getConfiguration());
+
+        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
+    }
+
+    // Video is complete
+
+    @Test
+    public void notifyVideoComplete_withCompanionAd_shouldSetVisibilityForCompanionAd() throws Exception {
+        final int visibilityForCompanionAd = View.VISIBLE;
+        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
+                DeviceUtils.ForceOrientation.FORCE_PORTRAIT, true, visibilityForCompanionAd,
+                RelativeLayout.ALIGN_TOP, 0);
+
+        subject.notifyVideoComplete();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+    }
+
+    @Test
+    public void notifyVideoComplete_withoutCompanionAd_shouldBeGone() throws Exception {
+        final int visibilityForCompanionAd = View.VISIBLE;
+        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
+                DeviceUtils.ForceOrientation.FORCE_PORTRAIT, false, visibilityForCompanionAd,
+                RelativeLayout.ALIGN_TOP, 0);
+
+        subject.notifyVideoComplete();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.GONE);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
index 9c9ad74e..4a17ff8c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
@@ -10,9 +10,7 @@
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.mobileads.test.support.TestVastManagerFactory;
 import com.mopub.mobileads.test.support.TestVastVideoDownloadTaskFactory;
-import com.mopub.mobileads.util.vast.VastCompanionAd;
-import com.mopub.mobileads.util.vast.VastManager;
-import com.mopub.mobileads.util.vast.VastVideoConfiguration;
+import com.mopub.mobileads.test.support.VastUtils;
 
 import org.junit.After;
 import org.junit.Before;
@@ -32,7 +30,7 @@
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static com.mopub.mobileads.util.vast.VastManager.VastManagerListener;
+import static com.mopub.mobileads.VastManager.VastManagerListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
@@ -88,8 +86,10 @@ public void preRenderHtml_whenCreatingVideoCache_butItHasInitializationErrors_sh
 
         subject.preRenderHtml(customEventInterstitialListener);
 
-        verify(customEventInterstitialListener).onInterstitialFailed(eq(MoPubErrorCode.VIDEO_CACHE_ERROR));
-        verify(vastManager, never()).prepareVastVideoConfiguration(anyString(), any(VastManagerListener.class));
+        verify(customEventInterstitialListener).onInterstitialFailed(
+                eq(MoPubErrorCode.VIDEO_CACHE_ERROR));
+        verify(vastManager, never()).prepareVastVideoConfiguration(anyString(),
+                any(VastManagerListener.class), any(Context.class));
     }
 
     @Test
@@ -112,7 +112,8 @@ public void loadInterstitial_shouldInitializeDiskCache() throws Exception {
     public void loadInterstitial_shouldCreateVastManagerAndProcessVast() throws Exception {
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
 
-        verify(vastManager).prepareVastVideoConfiguration(eq(expectedResponse), eq((VastVideoInterstitial) subject));
+        verify(vastManager).prepareVastVideoConfiguration(eq(expectedResponse),
+                eq((VastVideoInterstitial) subject), eq(context));
     }
 
     @Test
@@ -122,7 +123,8 @@ public void loadInterstitial_whenServerExtrasDoesNotContainResponse_shouldSignal
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
 
         verify(customEventInterstitialListener).onInterstitialFailed(NETWORK_INVALID_STATE);
-        verify(vastManager, never()).prepareVastVideoConfiguration(anyString(), any(VastManagerListener.class));
+        verify(vastManager, never()).prepareVastVideoConfiguration(anyString(),
+                any(VastManagerListener.class), any(Context.class));
     }
 
     @Test
@@ -142,26 +144,28 @@ public void loadInterstitial_shouldConnectListenerToBroadcastReceiver() throws E
 
     @Test
     public void showInterstitial_shouldStartVideoPlayerActivityWithAllValidTrackers() throws Exception {
-        VastCompanionAd vastCompanionAd = mock(VastCompanionAd.class, withSettings().serializable());
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setNetworkMediaFileUrl(videoUrl);
-        vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(new VastAbsoluteProgressTracker("start", 2000)));
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f),
+        VastCompanionAdConfig vastCompanionAdConfig = mock(VastCompanionAdConfig.class, withSettings().serializable());
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setNetworkMediaFileUrl(videoUrl);
+        vastVideoConfig.addAbsoluteTrackers(Arrays.asList(new VastAbsoluteProgressTracker
+                ("start", 2000)));
+        vastVideoConfig.addFractionalTrackers(Arrays.asList(new
+                        VastFractionalProgressTracker("first", 0.25f),
                 new VastFractionalProgressTracker("mid", 0.5f),
                 new VastFractionalProgressTracker("third", 0.75f)));
-        vastVideoConfiguration.addCompleteTrackers(Arrays.asList("complete"));
-        vastVideoConfiguration.addImpressionTrackers(Arrays.asList("imp"));
-        vastVideoConfiguration.setClickThroughUrl("clickThrough");
-        vastVideoConfiguration.addClickTrackers(Arrays.asList("click"));
-        vastVideoConfiguration.setVastCompanionAd(vastCompanionAd);
+        vastVideoConfig.addCompleteTrackers(VastUtils.stringsToVastTrackers("complete"));
+        vastVideoConfig.addImpressionTrackers(VastUtils.stringsToVastTrackers("imp"));
+        vastVideoConfig.setClickThroughUrl("clickThrough");
+        vastVideoConfig.addClickTrackers(VastUtils.stringsToVastTrackers("click"));
+        vastVideoConfig.setVastCompanionAd(vastCompanionAdConfig, vastCompanionAdConfig);
 
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        ((VastVideoInterstitial) subject).onVastVideoConfigurationPrepared(vastVideoConfiguration);
+        ((VastVideoInterstitial) subject).onVastVideoConfigurationPrepared(vastVideoConfig);
 
         subject.showInterstitial();
         BaseVideoPlayerActivityTest.assertVastVideoPlayerActivityStarted(
                 MraidVideoPlayerActivity.class,
-                vastVideoConfiguration,
+                vastVideoConfig,
                 broadcastIdentifier
                 );
     }
@@ -205,7 +209,7 @@ public void onInvalidate_shouldDisconnectListenerToBroadcastReceiver() throws Ex
     @Test
     public void onVastVideoConfigurationPrepared_withVastVideoConfiguration_shouldSignalOnInterstitialLoaded() throws Exception {
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        ((VastVideoInterstitial) subject).onVastVideoConfigurationPrepared(mock(VastVideoConfiguration.class));
+        ((VastVideoInterstitial) subject).onVastVideoConfigurationPrepared(mock(VastVideoConfig.class));
 
         verify(customEventInterstitialListener).onInterstitialLoaded();
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoProgressBarWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoProgressBarWidgetTest.java
new file mode 100644
index 00000000..9b857699
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoProgressBarWidgetTest.java
@@ -0,0 +1,106 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.view.View;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.resource.ProgressBarDrawable;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+public class VastVideoProgressBarWidgetTest {
+    private Context context;
+    private VastVideoProgressBarWidget subject;
+    private ProgressBarDrawable progressBarDrawableSpy;
+
+    @Before
+    public void setUp() throws Exception {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        subject = new VastVideoProgressBarWidget(context, 0);
+        progressBarDrawableSpy = spy(subject.getImageViewDrawable());
+        subject.setImageViewDrawable(progressBarDrawableSpy);
+    }
+
+    @Test
+    public void calibrateAndMakeVisible_shouldSetDurationAndSkipOffsetAndMakeVisible() throws Exception {
+        subject.setVisibility(View.INVISIBLE);
+
+        subject.calibrateAndMakeVisible(10000, 5000);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        verify(progressBarDrawableSpy).setDurationAndSkipOffset(10000, 5000);
+        assertThat(progressBarDrawableSpy.getSkipRatio()).isEqualTo(0.5f);
+    }
+
+    @Test
+    public void updateProgress_shouldUpdateDrawable() throws Exception {
+        subject.setVisibility(View.VISIBLE);
+
+        subject.updateProgress(1000);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        verify(progressBarDrawableSpy).setProgress(1000);
+        assertThat(progressBarDrawableSpy.getCurrentProgress()).isEqualTo(1000);
+    }
+
+    @Test
+    public void updateProgress_whenCurrentProgressGreaterThanPreviousProgress_shouldUpdateDrawable() throws Exception {
+        subject.setVisibility(View.VISIBLE);
+
+        // Set mLastProgress to 1000
+        subject.updateProgress(1000);
+        reset(progressBarDrawableSpy);
+
+        subject.updateProgress(1001);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        verify(progressBarDrawableSpy).setProgress(1001);
+        verify(progressBarDrawableSpy, never()).forceCompletion();
+        assertThat(progressBarDrawableSpy.getCurrentProgress()).isEqualTo(1001);
+    }
+
+    @Test
+    public void updateProgress_whenCurrentProgressLessThanPreviousProgressButNotZero_shouldForceProgressCompletionAndNotChangeVisibility() throws Exception {
+        subject.setVisibility(View.VISIBLE);
+        subject.calibrateAndMakeVisible(10000, 5000);
+
+        // Set mLastProgress to 1000
+        subject.updateProgress(1000);
+        reset(progressBarDrawableSpy);
+
+        subject.updateProgress(999);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        verify(progressBarDrawableSpy).setProgress(999);
+        verify(progressBarDrawableSpy).forceCompletion();
+        assertThat(progressBarDrawableSpy.getCurrentProgress()).isEqualTo(10000);
+    }
+
+    @Test
+    public void updateProgress_whenCurrentProgressLessThanPreviousProgressAndIsZero_shouldNotForceProgressCompletionAndNotChangeVisibility() throws Exception {
+        subject.setVisibility(View.VISIBLE);
+        subject.calibrateAndMakeVisible(10000, 5000);
+
+        // Set mLastProgress to 1000
+        subject.updateProgress(1000);
+        reset(progressBarDrawableSpy);
+
+        subject.updateProgress(0);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        verify(progressBarDrawableSpy).setProgress(0);
+        verify(progressBarDrawableSpy, never()).forceCompletion();
+        assertThat(progressBarDrawableSpy.getCurrentProgress()).isEqualTo(1000);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoRadialCountdownWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoRadialCountdownWidgetTest.java
new file mode 100644
index 00000000..841f5c0d
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoRadialCountdownWidgetTest.java
@@ -0,0 +1,96 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.view.View;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.resource.RadialCountdownDrawable;
+
+import junit.framework.TestCase;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+public class VastVideoRadialCountdownWidgetTest {
+    private Context context;
+    private VastVideoRadialCountdownWidget subject;
+    private RadialCountdownDrawable radialCountdownDrawableSpy;
+
+    @Before
+    public void setUp() throws Exception {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        subject = new VastVideoRadialCountdownWidget(context);
+        radialCountdownDrawableSpy = spy(subject.getImageViewDrawable());
+        subject.setImageViewDrawable(radialCountdownDrawableSpy);
+    }
+
+    @Test
+    public void calibrateAndMakeVisible_shouldSetInitialCountdownAndMakeVisible() throws Exception {
+        subject.setVisibility(View.INVISIBLE);
+
+        subject.calibrateAndMakeVisible(10000);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        verify(radialCountdownDrawableSpy).setInitialCountdown(10000);
+        assertThat(radialCountdownDrawableSpy.getInitialCountdownMilliseconds()).isEqualTo(10000);
+    }
+
+    @Test
+    public void updateCountdownProgress_shouldUpdateDrawable() throws Exception {
+        subject.setVisibility(View.VISIBLE);
+
+        subject.updateCountdownProgress(10000, 1000);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        verify(radialCountdownDrawableSpy).updateCountdownProgress(1000);
+    }
+
+    @Test
+    public void updateCountdownProgress_whenProgressIsGreaterThanInitialCountdown_shouldHideAndNotUpdateDrawable() throws Exception {
+        subject.setVisibility(View.VISIBLE);
+
+        subject.updateCountdownProgress(10000, 10001);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.GONE);
+        verify(radialCountdownDrawableSpy, never()).updateCountdownProgress(anyInt());
+    }
+
+    @Test
+    public void updateCountdownProgress_whenCurrentProgressGreaterThanPreviousProgress_shouldUpdateDrawable() throws Exception {
+        subject.setVisibility(View.VISIBLE);
+
+        // Set mLastProgressMilliseconds to 1000
+        subject.updateCountdownProgress(10000, 1000);
+        reset(radialCountdownDrawableSpy);
+
+        subject.updateCountdownProgress(10000, 1001);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        verify(radialCountdownDrawableSpy).updateCountdownProgress(1001);
+    }
+
+    @Test
+    public void updateCountdownProgress_whenCurrentProgressLessThanPreviousProgress_shouldNotChangeVisibilityOrUpdateDrawable() throws Exception {
+        subject.setVisibility(View.VISIBLE);
+
+        // Set mLastProgressMilliseconds to 1000
+        subject.updateCountdownProgress(10000, 1000);
+        reset(radialCountdownDrawableSpy);
+
+        subject.updateCountdownProgress(10000, 999);
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+        verify(radialCountdownDrawableSpy, never()).updateCountdownProgress(anyInt());
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoToolbarTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoToolbarTest.java
deleted file mode 100644
index 79bd874c..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoToolbarTest.java
+++ /dev/null
@@ -1,211 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.graphics.drawable.Drawable;
-import android.view.View;
-import android.widget.TextView;
-
-import com.mopub.mobileads.resource.TextDrawable;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class VastVideoToolbarTest {
-    private Context context;
-    private VastVideoToolbar subject;
-    private View.OnTouchListener onTouchListener;
-
-    @Before
-    public void setUp() throws Exception {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        subject = new VastVideoToolbar(context);
-
-        onTouchListener = mock(View.OnTouchListener.class);
-    }
-
-    @Test
-    public void constructor_shouldSetOnTouchListenerThatConsumesAllTouchEvents() throws Exception {
-        final View.OnTouchListener onTouchListener = shadowOf(subject).getOnTouchListener();
-
-        assertThat(onTouchListener).isNotNull();
-        assertThat(onTouchListener.onTouch(null, null)).isTrue();
-    }
-
-    @Test
-    public void constructor_shouldAddWidgetsToToolbar() throws Exception {
-        assertThat(subject.getChildCount()).isEqualTo(4);
-
-        assertThat(subject.getDurationWidget().getParent()).isEqualTo(subject);
-        assertThat(subject.getLearnMoreWidget().getParent()).isEqualTo(subject);
-        assertThat(subject.getCountdownWidget().getParent()).isEqualTo(subject);
-        assertThat(subject.getCloseButtonWidget().getParent()).isEqualTo(subject);
-    }
-
-    @Test
-    public void constructor_shouldOnlyStartWithDurationWidgetsVisible() throws Exception {
-        assertThat(subject.getDurationWidget().getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(subject.getLearnMoreWidget().getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(subject.getCountdownWidget().getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(subject.getCloseButtonWidget().getVisibility()).isEqualTo(View.GONE);
-    }
-
-    @Test
-    public void makeInteractable_shouldHideCountdownWidgetAndShowLearnMoreAndCloseButtonWidgets() throws Exception {
-        subject.makeInteractable();
-
-        assertThat(subject.getDurationWidget().getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(subject.getLearnMoreWidget().getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(subject.getCountdownWidget().getVisibility()).isEqualTo(View.GONE);
-        assertThat(subject.getCloseButtonWidget().getVisibility()).isEqualTo(View.VISIBLE);
-    }
-
-    @Test
-    public void setCloseButtonOnTouchListener_shouldPropagateToCloseButtonWidget() throws Exception {
-        subject.setCloseButtonOnTouchListener(onTouchListener);
-
-        assertThat(shadowOf(subject.getCloseButtonWidget()).getOnTouchListener()).isEqualTo(onTouchListener);
-    }
-
-    @Test
-    public void setLearnButtonOnTouchListener_shouldPropagateToLearnButtonWidget() throws Exception {
-        subject.setLearnMoreButtonOnTouchListener(onTouchListener);
-
-        assertThat(shadowOf(subject.getLearnMoreWidget()).getOnTouchListener()).isEqualTo(onTouchListener);
-    }
-
-    @Test
-    public void convertMillisecondsToSecondsRoundedUp_shouldReturnLongMillisecondsAsRoundedUpLongSeconds() throws Exception {
-        assertThat(subject.convertMillisecondsToSecondsRoundedUp(0)).isEqualTo(0);
-
-        assertThat(subject.convertMillisecondsToSecondsRoundedUp(1)).isEqualTo(1);
-        assertThat(subject.convertMillisecondsToSecondsRoundedUp(999)).isEqualTo(1);
-        assertThat(subject.convertMillisecondsToSecondsRoundedUp(1000)).isEqualTo(1);
-
-        assertThat(subject.convertMillisecondsToSecondsRoundedUp(1001)).isEqualTo(2);
-        assertThat(subject.convertMillisecondsToSecondsRoundedUp(100000)).isEqualTo(100);
-    }
-
-    @Test
-    public void formatTime_shouldReturnLongMillisecondsAsFormattedString() {
-        assertThat(subject.formatTime(-8999)).isEqualTo("-8 seconds");
-        assertThat(subject.formatTime(-9000)).isEqualTo("-9 seconds");
-        assertThat(subject.formatTime(-9001)).isEqualTo("-9 seconds");
-        assertThat(subject.formatTime(0)).isEqualTo("0 seconds");
-
-        assertThat(subject.formatTime(1)).isEqualTo("1 second");
-        assertThat(subject.formatTime(1000)).isEqualTo("1 second");
-        assertThat(subject.formatTime(1005)).isEqualTo("2 seconds");
-
-        assertThat(subject.formatTime(59999)).isEqualTo("60 seconds");
-        assertThat(subject.formatTime(60000)).isEqualTo("60 seconds");
-        assertThat(subject.formatTime(60001)).isEqualTo("61 seconds");
-        assertThat(subject.formatTime(853437)).isEqualTo("854 seconds");
-
-        assertThat(subject.formatTime(3599999)).isEqualTo("3600 seconds");
-        assertThat(subject.formatTime(3600000)).isEqualTo("3600 seconds");
-        assertThat(subject.formatTime(3600001)).isEqualTo("3601 seconds");
-        assertThat(subject.formatTime(3660001)).isEqualTo("3661 seconds");
-        assertThat(subject.formatTime(65784693)).isEqualTo("65785 seconds");
-    }
-
-    @Test
-    public void updateCountdownWidget_shouldUpdateTextDrawablesDisplayNumber() throws Exception {
-        final TextDrawable countdownImageSpy = spy((TextDrawable) subject.getCountdownWidget().getImageViewDrawable());
-        subject.getCountdownWidget().setImageViewDrawable((Drawable) countdownImageSpy);
-
-        subject.updateCountdownWidget(1002);
-
-        verify(countdownImageSpy).updateText("2");
-    }
-
-    @Test
-    public void updateCountdownWidget_shouldHideCloseButtonAndShowCountdown() throws Exception {
-        subject.getCloseButtonWidget().setVisibility(View.INVISIBLE);
-        subject.getCountdownWidget().setVisibility(View.INVISIBLE);
-
-        subject.updateCountdownWidget(1);
-
-        assertThat(subject.getCloseButtonWidget().getVisibility()).isEqualTo(View.GONE);
-        assertThat(subject.getCountdownWidget().getVisibility()).isEqualTo(View.VISIBLE);
-    }
-
-    @Test
-    public void updateCountdownWidget_whenRemainingTimeIsNegative_shouldNotModifyWidgetVisibility() throws Exception {
-        subject.getCloseButtonWidget().setVisibility(View.INVISIBLE);
-        subject.getCountdownWidget().setVisibility(View.INVISIBLE);
-
-        subject.updateCountdownWidget(-1);
-
-        assertThat(subject.getCloseButtonWidget().getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(subject.getCountdownWidget().getVisibility()).isEqualTo(View.INVISIBLE);
-    }
-
-    @Test
-    public void updateDurationWidget_shouldShowWhenVideoEnds() throws Exception {
-        final TextView durationWidgetTextView = getDurationWidgetTextView();
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("");
-
-        subject.updateDurationWidget(100000);
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("Ends in 100 seconds");
-
-        subject.updateDurationWidget(99000);
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("Ends in 99 seconds");
-    }
-
-    @Test
-    public void updateDurationWidget_whenBelowThresholdForHidingVideoDuration_shouldShowThanksForWatching() throws Exception {
-        final TextView durationWidgetTextView = getDurationWidgetTextView();
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("");
-
-        subject.updateDurationWidget(50000);
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("Ends in 50 seconds");
-
-        // 200ms of remaining video is the cut off for switching to "Thanks for watching"
-        subject.updateDurationWidget(200);
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("Ends in 1 second");
-
-        subject.updateDurationWidget(199);
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("Thanks for watching");
-    }
-
-    @Test
-    public void updateDurationWidget_whenRemainingTimeIsNegative_shouldDoNothing() throws Exception {
-        final TextView durationWidgetTextView = getDurationWidgetTextView();
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("");
-
-        subject.updateDurationWidget(-1);
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("");
-    }
-
-    private TextView getDurationWidgetTextView() {
-        final ToolbarWidget durationWidget = subject.getDurationWidget();
-        final int childCount = durationWidget.getChildCount();
-        for (int i = 0; i < childCount; i++) {
-            final View child = durationWidget.getChildAt(i);
-            if (child instanceof TextView) {
-                return (TextView) child;
-            }
-        }
-        return null;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
index b36fcaf5..773e6e1b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
@@ -1,18 +1,22 @@
 package com.mopub.mobileads;
 
+import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
+import android.content.res.Configuration;
+import android.graphics.Bitmap;
 import android.graphics.Color;
 import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
-import android.graphics.drawable.GradientDrawable;
-import android.graphics.drawable.LayerDrawable;
+import android.media.MediaMetadataRetriever;
 import android.media.MediaPlayer;
+import android.net.Uri;
+import android.os.AsyncTask;
 import android.os.Build.VERSION_CODES;
 import android.os.Bundle;
 import android.view.View;
-import android.view.ViewGroup;
 import android.webkit.WebView;
 import android.widget.ImageView;
 import android.widget.VideoView;
@@ -20,12 +24,10 @@
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.DeviceUtils.ForceOrientation;
-import com.mopub.common.util.Dips;
-import com.mopub.common.util.Drawables;
 import com.mopub.mobileads.resource.CloseButtonDrawable;
 import com.mopub.mobileads.test.support.GestureUtils;
-import com.mopub.mobileads.util.vast.VastCompanionAd;
-import com.mopub.mobileads.util.vast.VastVideoConfiguration;
+import com.mopub.mobileads.test.support.ShadowVastVideoView;
+import com.mopub.mobileads.test.support.VastUtils;
 import com.mopub.network.MaxWidthImageLoader;
 import com.mopub.network.MoPubRequestQueue;
 import com.mopub.network.Networking;
@@ -36,42 +38,44 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowImageView;
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
+import org.robolectric.shadows.ShadowRelativeLayout;
+import org.robolectric.shadows.ShadowTextView;
 import org.robolectric.shadows.ShadowVideoView;
 import org.robolectric.tester.org.apache.http.RequestMatcher;
 import org.robolectric.tester.org.apache.http.TestHttpResponse;
 
 import java.io.File;
-import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.List;
+import java.util.Collections;
 
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
-import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
-import static com.mopub.common.MoPubBrowser.DESTINATION_URL_KEY;
 import static com.mopub.common.VolleyRequestMatcher.isUrl;
 import static com.mopub.common.util.ResponseHeader.USER_AGENT;
 import static com.mopub.mobileads.BaseVideoViewController.BaseVideoViewControllerListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
+import static com.mopub.mobileads.VastVideoViewController.CURRENT_POSITION;
 import static com.mopub.mobileads.VastVideoViewController.DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON;
 import static com.mopub.mobileads.VastVideoViewController.MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON;
-import static com.mopub.mobileads.VastVideoViewController.VAST_VIDEO_CONFIGURATION;
+import static com.mopub.mobileads.VastVideoViewController.RESUMED_VAST_CONFIG;
+import static com.mopub.mobileads.VastVideoViewController.VAST_VIDEO_CONFIG;
 import static com.mopub.volley.toolbox.ImageLoader.ImageListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyBoolean;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.anyLong;
+import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.argThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
@@ -83,71 +87,122 @@
 import static org.mockito.Mockito.verifyZeroInteractions;
 import static org.mockito.Mockito.when;
 import static org.robolectric.Robolectric.shadowOf;
+import static org.robolectric.Robolectric.shadowOf_;
 
 @RunWith(SdkTestRunner.class)
+@Config(shadows = {ShadowVastVideoView.class})
 public class VastVideoViewControllerTest {
     public static final int NETWORK_DELAY = 100;
 
     private static final String COMPANION_IMAGE_URL = "companion_image_url";
     private static final String COMPANION_CLICK_TRACKING_URL_1 = "companion_click_tracking_url_1";
     private static final String COMPANION_CLICK_TRACKING_URL_2 = "companion_click_tracking_url_2";
+    private static final String COMPANION_CLICK_TRACKING_URL_3 = "companion_click_tracking_url_3";
     private static final String COMPANION_CLICK_DESTINATION_URL = "http://companion_click_destination_url";
-    private static final String CLICKTHROUGH_URL = "http://clickthrough_url";
+    private static final String COMPANION_CREATIVE_VIEW_URL_1 = "companion_creative_view_url_1";
+    private static final String COMPANION_CREATIVE_VIEW_URL_2 = "companion_creative_view_url_2";
+    private static final String COMPANION_CREATIVE_VIEW_URL_3 = "companion_creative_view_url_3";
+    private static final String RESOLVED_CLICKTHROUGH_URL = "http://www.mopub.com/";
+    private static final String CLICKTHROUGH_URL = "deeplink+://navigate?" +
+            "&primaryUrl=bogus%3A%2F%2Furl" +
+            "&fallbackUrl=" + Uri.encode(RESOLVED_CLICKTHROUGH_URL);
+
+    /**
+     * A list of macros to include in all trackers
+     */
+    private static final String MACRO_TAGS = "?errorcode=[ERRORCODE]&asseturi=[ASSETURI]&contentplayhead=[CONTENTPLAYHEAD]";
 
     private Context context;
     private Bundle bundle;
+    private Bundle savedInstanceState;
     private long testBroadcastIdentifier;
     private VastVideoViewController subject;
-    private BaseVideoViewControllerListener baseVideoViewControllerListener;
-    private EventForwardingBroadcastReceiver broadcastReceiver;
     private int expectedBrowserRequestCode;
     private String expectedUserAgent;
 
-    @Mock
-    MoPubRequestQueue mockRequestQueue;
-    @Mock
-    MaxWidthImageLoader mockImageLoader;
-    @Mock
-    private VideoView mockVideoView;
+    @Mock private BaseVideoViewControllerListener baseVideoViewControllerListener;
+    @Mock private EventForwardingBroadcastReceiver broadcastReceiver;
+    @Mock MoPubRequestQueue mockRequestQueue;
+    @Mock MaxWidthImageLoader mockImageLoader;
+    @Mock private VastIconConfig mMockVastIconConfig;
+    @Mock private MediaMetadataRetriever mockMediaMetadataRetriever;
+    @Mock private Bitmap mockBitmap;
 
     private VastVideoViewCountdownRunnable spyCountdownRunnable;
     private VastVideoViewProgressRunnable spyProgressRunnable;
     private VideoView spyVideoView;
 
-
+    @TargetApi(VERSION_CODES.GINGERBREAD_MR1)
     @Before
     public void setUp() throws Exception {
         Networking.setRequestQueueForTesting(mockRequestQueue);
         Networking.setImageLoaderForTesting(mockImageLoader);
-        context = Robolectric.buildActivity(Activity.class).create().get();
+        context = spy(Robolectric.buildActivity(Activity.class).create().get());
         bundle = new Bundle();
+        savedInstanceState = new Bundle();
         testBroadcastIdentifier = 1111;
-        broadcastReceiver = mock(EventForwardingBroadcastReceiver.class);
-        baseVideoViewControllerListener = mock(BaseVideoViewControllerListener.class);
-
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setNetworkMediaFileUrl("video_url");
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(new VastAbsoluteProgressTracker("start", 2000)));
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f),
-                new VastFractionalProgressTracker("mid", 0.5f), new VastFractionalProgressTracker("third", 0.75f)));
-        vastVideoConfiguration.addCompleteTrackers(Arrays.asList("complete"));
-        vastVideoConfiguration.addCloseTrackers(Arrays.asList("close"));
-        vastVideoConfiguration.addSkipTrackers(Arrays.asList("skip"));
-        vastVideoConfiguration.addImpressionTrackers(Arrays.asList("imp"));
-        vastVideoConfiguration.setClickThroughUrl(CLICKTHROUGH_URL);
-        vastVideoConfiguration.addClickTrackers(Arrays.asList("click_1", "click_2"));
-
-        VastCompanionAd vastCompanionAd = new VastCompanionAd(
+
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setNetworkMediaFileUrl("video_url");
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.addAbsoluteTrackers(
+                Arrays.asList(new VastAbsoluteProgressTracker("start" + MACRO_TAGS, 2000)));
+        vastVideoConfig.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("first" + MACRO_TAGS, 0.25f),
+                        new VastFractionalProgressTracker("mid" + MACRO_TAGS, 0.5f),
+                        new VastFractionalProgressTracker("third" + MACRO_TAGS, 0.75f)));
+        vastVideoConfig.addPauseTrackers(
+                Arrays.asList(new VastTracker("pause" + MACRO_TAGS, true)));
+        vastVideoConfig.addResumeTrackers(
+                Arrays.asList(new VastTracker("resume" + MACRO_TAGS, true)));
+        vastVideoConfig.addCompleteTrackers(
+                VastUtils.stringsToVastTrackers("complete" + MACRO_TAGS));
+        vastVideoConfig.addCloseTrackers(
+                VastUtils.stringsToVastTrackers("close" + MACRO_TAGS));
+        vastVideoConfig.addSkipTrackers(VastUtils.stringsToVastTrackers("skip" + MACRO_TAGS));
+        vastVideoConfig.addImpressionTrackers(
+                VastUtils.stringsToVastTrackers("imp" + MACRO_TAGS));
+        vastVideoConfig.addErrorTrackers(
+                Collections.singletonList(new VastTracker("error" + MACRO_TAGS)));
+        vastVideoConfig.setClickThroughUrl(CLICKTHROUGH_URL);
+        vastVideoConfig.addClickTrackers(
+                VastUtils.stringsToVastTrackers("click_1" + MACRO_TAGS, "click_2" + MACRO_TAGS));
+
+        VastCompanionAdConfig landscapeVastCompanionAdConfig = new VastCompanionAdConfig(
                 300,
                 250,
-                COMPANION_IMAGE_URL,
+                new VastResource(COMPANION_IMAGE_URL,
+                        VastResource.Type.STATIC_RESOURCE,
+                        VastResource.CreativeType.IMAGE, 300, 250),
                 COMPANION_CLICK_DESTINATION_URL,
-                new ArrayList<String>(Arrays.asList(COMPANION_CLICK_TRACKING_URL_1, COMPANION_CLICK_TRACKING_URL_2))
+                VastUtils.stringsToVastTrackers(COMPANION_CLICK_TRACKING_URL_1, COMPANION_CLICK_TRACKING_URL_2),
+                VastUtils.stringsToVastTrackers(COMPANION_CREATIVE_VIEW_URL_1, COMPANION_CREATIVE_VIEW_URL_2)
         );
-        vastVideoConfiguration.setVastCompanionAd(vastCompanionAd);
+        VastCompanionAdConfig portraitVastCompanionAdConfig = new VastCompanionAdConfig(
+                250,
+                300,
+                new VastResource(COMPANION_IMAGE_URL,
+                        VastResource.Type.STATIC_RESOURCE,
+                        VastResource.CreativeType.IMAGE, 250, 300),
+                COMPANION_CLICK_DESTINATION_URL,
+                VastUtils.stringsToVastTrackers(COMPANION_CLICK_TRACKING_URL_3),
+                VastUtils.stringsToVastTrackers(COMPANION_CREATIVE_VIEW_URL_3)
+        );
+        vastVideoConfig.setVastCompanionAd(landscapeVastCompanionAdConfig,
+                portraitVastCompanionAdConfig);
+
+        when(mMockVastIconConfig.getWidth()).thenReturn(40);
+        when(mMockVastIconConfig.getHeight()).thenReturn(40);
+        VastResource vastResource = mock(VastResource.class);
+        when(vastResource.getType()).thenReturn(VastResource.Type.STATIC_RESOURCE);
+        when(vastResource.getResource()).thenReturn("static");
+        when(vastResource.getCreativeType()).thenReturn(VastResource.CreativeType.IMAGE);
+        when(mMockVastIconConfig.getVastResource()).thenReturn(vastResource);
+        vastVideoConfig.setVastIconConfig(mMockVastIconConfig);
 
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        when(mockMediaMetadataRetriever.getFrameAtTime(anyLong(), anyInt())).thenReturn(mockBitmap);
+
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         expectedBrowserRequestCode = 1;
 
@@ -177,17 +232,89 @@ public void tearDown() throws Exception {
     }
 
     @Test
-    public void constructor_shouldAddVastVideoToolbarToLayout() throws Exception {
+    public void constructor_shouldAddCtaButtonWidgetToLayoutAndSetInvisibleWithOnTouchListeners() throws Exception {
+        initializeSubject();
+
+        VastVideoCtaButtonWidget ctaButtonWidget = subject.getCtaButtonWidget();
+        assertThat(ctaButtonWidget.getParent()).isEqualTo(subject.getLayout());
+        assertThat(ctaButtonWidget.getVisibility()).isEqualTo(View.INVISIBLE);
+        ShadowImageView ctaButtonWidgetShadow = shadowOf(ctaButtonWidget);
+        assertThat(ctaButtonWidgetShadow.getOnTouchListener()).isNotNull();
+        assertThat(ctaButtonWidgetShadow.getOnTouchListener()).isEqualTo(
+                getShadowVideoView().getOnTouchListener());
+    }
+
+    @Test
+    public void constructor_shouldAddProgressBarWidgetToLayoutAndSetInvisibleWithNoListeners() throws Exception {
+        initializeSubject();
+
+        VastVideoProgressBarWidget progressBarWidget = subject.getProgressBarWidget();
+        assertThat(progressBarWidget.getParent()).isEqualTo(subject.getLayout());
+        assertThat(progressBarWidget.getVisibility()).isEqualTo(View.INVISIBLE);
+        ShadowImageView progressBarWidgetShadow = shadowOf(progressBarWidget);
+        assertThat(progressBarWidgetShadow.getOnTouchListener()).isNull();
+    }
+
+    @Test
+    public void constructor_shouldAddRadialCountdownWidgetToLayoutAndSetInvisibleWithNoListeners() throws Exception {
+        initializeSubject();
+
+        VastVideoRadialCountdownWidget radialCountdownWidget = subject.getRadialCountdownWidget();
+        assertThat(radialCountdownWidget.getParent()).isEqualTo(subject.getLayout());
+        assertThat(radialCountdownWidget.getVisibility()).isEqualTo(View.INVISIBLE);
+        ShadowImageView radialCountdownWidgetShadow = shadowOf(radialCountdownWidget);
+        assertThat(radialCountdownWidgetShadow.getOnTouchListener()).isNull();
+    }
+
+    @Test
+    public void constructor_shouldAddCloseButtonWidgetToLayoutAndSetToGoneWithOnTouchListeners() throws Exception {
+        initializeSubject();
+
+        VastVideoCloseButtonWidget closeButtonWidget = subject.getCloseButtonWidget();
+        assertThat(closeButtonWidget.getParent()).isEqualTo(subject.getLayout());
+        assertThat(closeButtonWidget.getVisibility()).isEqualTo(View.GONE);
+
+        ShadowRelativeLayout closeButtonWidgetShadow = (ShadowRelativeLayout) shadowOf(closeButtonWidget);
+        assertThat(closeButtonWidgetShadow.getOnTouchListener()).isNull();
+
+        ShadowImageView closeButtonImageViewShadow = shadowOf(closeButtonWidget.getImageView());
+        assertThat(closeButtonImageViewShadow.getOnTouchListener()).isNotNull();
+
+        ShadowTextView closeButtonTextViewShadow = shadowOf(closeButtonWidget.getTextView());
+        assertThat(closeButtonTextViewShadow.getOnTouchListener()).isNotNull();
+    }
+
+    @Test
+    public void constructor_shouldAddTopGradientStripWidgetToLayoutWithNoListeners() throws Exception {
+        initializeSubject();
+
+        VastVideoGradientStripWidget topGradientStripWidget = subject.getTopGradientStripWidget();
+        assertThat(topGradientStripWidget.getParent()).isEqualTo(subject.getLayout());
+
+        ShadowImageView topGradientStripWidgetShadow = shadowOf(topGradientStripWidget);
+        assertThat(topGradientStripWidgetShadow.getOnTouchListener()).isNull();
+    }
+
+    @Test
+    public void constructor_shouldAddBottomGradientStripWidgetToLayoutWithNoListeners() throws Exception {
         initializeSubject();
 
-        VastVideoToolbar vastVideoToolbar = getVastVideoToolbar();
-        final ViewGroup.LayoutParams layoutParams = vastVideoToolbar.getLayoutParams();
+        VastVideoGradientStripWidget bottomGradientStripWidget = subject.getBottomGradientStripWidget();
+        assertThat(bottomGradientStripWidget.getParent()).isEqualTo(subject.getLayout());
 
-        assertThat(vastVideoToolbar.getParent()).isEqualTo(subject.getLayout());
-        assertThat(vastVideoToolbar.getVisibility()).isEqualTo(View.VISIBLE);
+        ShadowImageView bottomGradientStripWidgetShadow = shadowOf(bottomGradientStripWidget);
+        assertThat(bottomGradientStripWidgetShadow.getOnTouchListener()).isNull();
+    }
 
-        assertThat(layoutParams.width).isEqualTo(MATCH_PARENT);
-        assertThat(layoutParams.height).isEqualTo(Dips.dipsToIntPixels(44, context));
+    @Test
+    public void constructor_shouldAddBlurredLastVideoFrameWidgetToLayoutAndSetInvisibleWithNoListeners() throws Exception {
+        initializeSubject();
+
+        ImageView blurredLastVideoFrameImageView = subject.getBlurredLastVideoFrameImageView();
+        assertThat(blurredLastVideoFrameImageView.getParent()).isEqualTo(subject.getLayout());
+        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
+        ShadowImageView blurredLastVideoFrameImageViewShadow = shadowOf(blurredLastVideoFrameImageView);
+        assertThat(blurredLastVideoFrameImageViewShadow.getOnTouchListener()).isNull();
     }
 
     @Test
@@ -208,21 +335,17 @@ public void constructor_shouldSetVideoListenersAndVideoPath() throws Exception {
     public void constructor_shouldNotChangeCloseButtonDelay() throws Exception {
         initializeSubject();
 
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
+        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(
+                DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
     }
 
+    @TargetApi(VERSION_CODES.HONEYCOMB)
     @Test
-    public void constructor_shouldAddThatchedBackgroundWithGradientToLayout() throws Exception {
+    public void constructor_shouldAddBlackBackgroundToLayout() throws Exception {
         initializeSubject();
-        ViewGroup viewGroup = subject.getLayout();
-        LayerDrawable layerDrawable = (LayerDrawable) viewGroup.getBackground();
-        assertThat(layerDrawable.getDrawable(0)).isEqualTo(Drawables.THATCHED_BACKGROUND.createDrawable(
-                context));
-        assertThat(layerDrawable.getDrawable(1)).isEqualTo(
-                new GradientDrawable(
-                        GradientDrawable.Orientation.TOP_BOTTOM,
-                        new int[]{Color.argb(0, 0, 0, 0), Color.argb(255, 0, 0, 0)})
-        );
+        Drawable background = subject.getLayout().getBackground();
+        assertThat(background).isInstanceOf(ColorDrawable.class);
+        assertThat(((ColorDrawable) background).getColor()).isEqualTo(Color.BLACK);
     }
 
     @Test
@@ -238,7 +361,7 @@ public void constructor_withMissingVastVideoConfiguration_shouldThrowIllegalStat
 
     @Test
     public void constructor_withNullVastVideoConfigurationDiskMediaFileUrl_shouldThrowIllegalStateException() throws Exception {
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, new VastVideoConfiguration());
+        bundle.putSerializable(VAST_VIDEO_CONFIG, new VastVideoConfig());
         try {
             initializeSubject();
             fail("VastVideoViewController didn't throw IllegalStateException");
@@ -249,59 +372,63 @@ public void constructor_withNullVastVideoConfigurationDiskMediaFileUrl_shouldThr
 
     @Test
     public void constructor_whenCustomCtaTextNotSpecified_shouldUseDefaultCtaText() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
 
-        assertThat(getVastVideoToolbar().getLearnMoreWidget().getTextViewText()).isEqualTo("Learn More");
+        assertThat(subject.getCtaButtonWidget().getCtaText()).isEqualTo(
+                "Learn More");
     }
 
     @Test
     public void constructor_whenCustomCtaTextSpecified_shouldUseCustomCtaText() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.setCustomCtaText("custom CTA text");
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setCustomCtaText("custom CTA text");
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
 
-        assertThat(getVastVideoToolbar().getLearnMoreWidget().getTextViewText()).isEqualTo("custom CTA text");
+        assertThat(subject.getCtaButtonWidget().getCtaText()).isEqualTo(
+                "custom CTA text");
     }
 
     @Test
     public void constructor_whenCustomSkipTextNotSpecified_shouldUseDefaultSkipText() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
 
-        assertThat(getVastVideoToolbar().getCloseButtonWidget().getTextViewText()).isEqualTo("Close");
+        assertThat(subject.getCloseButtonWidget().getTextView().getText().toString()).isEqualTo(
+                "");
     }
 
     @Test
     public void constructor_whenCustomSkipTextSpecified_shouldUseCustomSkipText() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.setCustomSkipText("custom skip text");
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setCustomSkipText("custom skip text");
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
 
-        assertThat(getVastVideoToolbar().getCloseButtonWidget().getTextViewText()).isEqualTo("custom skip text");
+        assertThat(subject.getCloseButtonWidget().getTextView().getText().toString()).isEqualTo(
+                "custom skip text");
     }
 
     @Test
     public void constructor_whenCustomCloseIconNotSpecified_shouldUseDefaultCloseIcon() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
 
-        Drawable imageViewDrawable = getVastVideoToolbar().getCloseButtonWidget().getImageViewDrawable();
+        Drawable imageViewDrawable = subject.getCloseButtonWidget().getImageView().getDrawable();
 
         // Default close icon is an instance of CloseButtonDrawable
         assertThat(imageViewDrawable).isInstanceOf(CloseButtonDrawable.class);
@@ -309,29 +436,57 @@ public void constructor_whenCustomCloseIconNotSpecified_shouldUseDefaultCloseIco
 
     @Test
     public void constructor_whenCustomCloseIconSpecified_shouldUseCustomCloseIcon() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.setCustomCloseIconUrl("http://ton.twitter.com/exchange-media/images/v4/star_icon_3x_1.png");
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setCustomCloseIconUrl(
+                "http://ton.twitter.com/exchange-media/images/v4/star_icon_3x_1.png");
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
 
-        verify(mockImageLoader).get(eq("http://ton.twitter.com/exchange-media/images/v4/star_icon_3x_1.png"), any(ImageListener.class));
+        verify(mockImageLoader).get(
+                eq("http://ton.twitter.com/exchange-media/images/v4/star_icon_3x_1.png"),
+                any(ImageListener.class));
     }
 
     @Test
-    public void onCreate_withCompanionAd_shouldDownloadCompanionAd() throws Exception {
+    public void constructor_withVastConfigurationInSavedInstanceState_shouldUseThatVastConfiguration() throws Exception {
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setNetworkMediaFileUrl("resumed_network_media_url");
+        savedInstanceState.putSerializable(RESUMED_VAST_CONFIG, vastVideoConfig);
+
         initializeSubject();
 
-        final ImageView imageView = subject.getCompanionAdImageView();
-        assertThat(imageView.getDrawable()).isNull();
+        assertThat(subject.getNetworkMediaFileUrl()).isEqualTo("resumed_network_media_url");
+    }
 
-        subject.onCreate();
-        Robolectric.getBackgroundScheduler().unPause();
-        Robolectric.getUiThreadScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
+    @Test
+    public void constructor_withSavedVastConfiguration_shouldUseThatVastConfiguration() throws Exception {
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setNetworkMediaFileUrl("resumed_network_media_url");
+        savedInstanceState.putSerializable(RESUMED_VAST_CONFIG, vastVideoConfig);
+
+        initializeSubject();
+
+        assertThat(subject.getNetworkMediaFileUrl()).isEqualTo("resumed_network_media_url");
+    }
+
+    @Test
+    public void constructor_withSavedVastConfiguration_withCurrentPositionSet_shouldResumeVideoFromCurrentPosition() throws Exception {
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setNetworkMediaFileUrl("resumed_network_media_url");
+        savedInstanceState.putSerializable(RESUMED_VAST_CONFIG, vastVideoConfig);
+        savedInstanceState.putInt(CURRENT_POSITION, 123);
+
+        initializeSubject();
+        spyOnVideoView();
+
+        subject.onResume();
 
-        assertThat(shadowOf(((BitmapDrawable) imageView.getDrawable()).getBitmap()).getCreatedFromBytes()).isEqualTo("body".getBytes());
+        verify(spyVideoView).seekTo(eq(123));
     }
 
     @Test
@@ -339,7 +494,8 @@ public void onCreate_shouldFireImpressionTracker() throws Exception {
         initializeSubject();
 
         subject.onCreate();
-        verify(mockRequestQueue).add(argThat(isUrl("imp")));
+        verify(mockRequestQueue).add(
+                argThat(isUrl("imp?errorcode=&asseturi=video_url&contentplayhead=00:00:00.000")));
     }
 
     @Test
@@ -355,22 +511,23 @@ public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
 
     @Test
     public void onCreate_whenCustomForceOrientationNotSpecified_shouldForceLandscapeOrientation() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         subject.onCreate();
 
-        verify(baseVideoViewControllerListener).onSetRequestedOrientation(SCREEN_ORIENTATION_LANDSCAPE);
+        verify(baseVideoViewControllerListener).onSetRequestedOrientation(
+                SCREEN_ORIENTATION_LANDSCAPE);
     }
 
     @Test
     public void onCreate_whenCustomForceOrientationIsDeviceOrientation_shouldNotForceLandscapeOrientation() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.setCustomForceOrientation(ForceOrientation.DEVICE_ORIENTATION);
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setCustomForceOrientation(ForceOrientation.DEVICE_ORIENTATION);
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         subject.onCreate();
@@ -380,75 +537,83 @@ public void onCreate_whenCustomForceOrientationIsDeviceOrientation_shouldNotForc
 
     @Test
     public void onCreate_whenCustomForceOrientationIsPortraitOrientation_shouldForcePortraitOrientation() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.setCustomForceOrientation(ForceOrientation.FORCE_PORTRAIT);
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setCustomForceOrientation(ForceOrientation.FORCE_PORTRAIT);
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         subject.onCreate();
 
-        verify(baseVideoViewControllerListener).onSetRequestedOrientation(SCREEN_ORIENTATION_PORTRAIT);
+        verify(baseVideoViewControllerListener).onSetRequestedOrientation(
+                SCREEN_ORIENTATION_PORTRAIT);
     }
 
     @Test
     public void onCreate_whenCustomForceOrientationIsLandscapeOrientation_shouldForceLandscapeOrientation() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.setCustomForceOrientation(ForceOrientation.FORCE_LANDSCAPE);
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setCustomForceOrientation(ForceOrientation.FORCE_LANDSCAPE);
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         subject.onCreate();
 
-        verify(baseVideoViewControllerListener).onSetRequestedOrientation(SCREEN_ORIENTATION_LANDSCAPE);
+        verify(baseVideoViewControllerListener).onSetRequestedOrientation(
+                SCREEN_ORIENTATION_LANDSCAPE);
     }
 
     @Test
-    public void onComplete_withNullDownloadResponse_shouldNotSetCompanionAdImageBitmap() throws Exception {
+    public void VastWebView_onVastWebViewClick_shouldCallVastCompanionAdHandleClick() throws Exception {
         initializeSubject();
 
-        final ImageView imageView = subject.getCompanionAdImageView();
-        assertThat(imageView.getDrawable()).isNull();
+        VastCompanionAdConfig vastCompanionAdConfig = mock(VastCompanionAdConfig.class);
+        when(vastCompanionAdConfig.getWidth()).thenReturn(300);
+        when(vastCompanionAdConfig.getHeight()).thenReturn(240);
+        VastResource vastResource = mock(VastResource.class);
+        when(vastResource.getType()).thenReturn(VastResource.Type.STATIC_RESOURCE);
+        when(vastResource.getResource()).thenReturn("static");
+        when(vastCompanionAdConfig.getVastResource()).thenReturn(vastResource);
 
-        subject.onComplete("url", null);
+        VastWebView view = (VastWebView) subject.createCompanionAdView(context,
+                vastCompanionAdConfig, View.INVISIBLE);
 
-        assertThat(imageView.getDrawable()).isNull();
+        view.getVastWebViewClickListener().onVastWebViewClick();
+        verify(vastCompanionAdConfig).handleClick(any(Context.class), eq(1), anyString());
     }
 
     @Test
-    public void onClick_withCompanionAd_shouldFireCompanionAdClickTrackersAndStartMoPubBrowser() throws Exception {
+    public void createCompanionAdView_shouldLayoutAndReturnInvisibleVastIconView() throws Exception {
         initializeSubject();
 
-        final ImageView imageView = subject.getCompanionAdImageView();
-        assertThat(imageView.performClick()).isFalse();
-        subject.onCreate();
-
-        Robolectric.getBackgroundScheduler().unPause();
-        Robolectric.getUiThreadScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
-
-        assertThat(imageView.performClick()).isTrue();
+        VastCompanionAdConfig vastCompanionAdConfig = mock(VastCompanionAdConfig.class);
+        when(vastCompanionAdConfig.getWidth()).thenReturn(300);
+        when(vastCompanionAdConfig.getHeight()).thenReturn(240);
+        VastResource vastResource = mock(VastResource.class);
+        when(vastResource.getType()).thenReturn(VastResource.Type.STATIC_RESOURCE);
+        when(vastResource.getResource()).thenReturn("static");
+        when(vastCompanionAdConfig.getVastResource()).thenReturn(vastResource);
 
-        // This request is still made by the older http stack.
-        assertHttpRequestsMade(expectedUserAgent, COMPANION_IMAGE_URL);
+        VastWebView view = (VastWebView) subject.createCompanionAdView(context,
+                vastCompanionAdConfig, View.INVISIBLE);
 
-        verify(mockRequestQueue).add(argThat(isUrl(COMPANION_CLICK_TRACKING_URL_1)));
-        verify(mockRequestQueue).add(argThat(isUrl(COMPANION_CLICK_TRACKING_URL_2)));
+        assertThat(view).isNotNull();
+        assertThat(view.getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(view.getVastWebViewClickListener()).isNotNull();
+        assertThat(subject.getLayout().findViewById(view.getId())).isEqualTo(view);
+    }
 
-        ArgumentCaptor<Bundle> bundleCaptor = ArgumentCaptor.forClass(Bundle.class);
-        verify(baseVideoViewControllerListener).onStartActivityForResult(
-                eq(MoPubBrowser.class),
-                eq(expectedBrowserRequestCode),
-                bundleCaptor.capture()
-        );
+    @Test
+    public void createCompanionAdView_withNullCompanionAd_shouldReturnEmptyView() throws Exception {
+        initializeSubject();
 
-        assertThat(bundleCaptor.getValue().get(DESTINATION_URL_KEY)).isEqualTo(COMPANION_CLICK_DESTINATION_URL);
+        assertThat(subject.createCompanionAdView(context, null, View.INVISIBLE)).isNotNull();
     }
 
     @Test
     public void onDestroy_shouldBroadcastInterstitialDismiss() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, testBroadcastIdentifier);
+        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS,
+                testBroadcastIdentifier);
 
         initializeSubject();
 
@@ -458,6 +623,57 @@ public void onDestroy_shouldBroadcastInterstitialDismiss() throws Exception {
         verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
     }
 
+    @Test
+    public void onDestroy_withBlurLastVideoFrameTaskStillRunning_shouldCancelTask() throws Exception {
+        initializeSubject();
+
+        VastVideoBlurLastVideoFrameTask mockBlurLastVideoFrameTask = mock(VastVideoBlurLastVideoFrameTask.class);
+        when(mockBlurLastVideoFrameTask.getStatus()).thenReturn(AsyncTask.Status.RUNNING);
+        subject.getVastVideoView().setBlurLastVideoFrameTask(mockBlurLastVideoFrameTask);
+
+        subject.onDestroy();
+
+        verify(mockBlurLastVideoFrameTask).cancel(true);
+    }
+
+    @Test
+    public void onDestroy_withBlurLastVideoFrameTaskStillPending_shouldCancelTask() throws Exception {
+        initializeSubject();
+
+        VastVideoBlurLastVideoFrameTask mockBlurLastVideoFrameTask = mock(VastVideoBlurLastVideoFrameTask.class);
+        when(mockBlurLastVideoFrameTask.getStatus()).thenReturn(AsyncTask.Status.PENDING);
+        subject.getVastVideoView().setBlurLastVideoFrameTask(mockBlurLastVideoFrameTask);
+
+        subject.onDestroy();
+
+        verify(mockBlurLastVideoFrameTask).cancel(true);
+    }
+
+    @Test
+    public void onDestroy_withBlurLastVideoFrameTaskFinished_shouldNotCancelTask() throws Exception {
+        initializeSubject();
+
+        VastVideoBlurLastVideoFrameTask mockBlurLastVideoFrameTask = mock(VastVideoBlurLastVideoFrameTask.class);
+        when(mockBlurLastVideoFrameTask.getStatus()).thenReturn(AsyncTask.Status.FINISHED);
+        subject.getVastVideoView().setBlurLastVideoFrameTask(mockBlurLastVideoFrameTask);
+
+        subject.onDestroy();
+
+        verify(mockBlurLastVideoFrameTask, never()).cancel(anyBoolean());
+    }
+
+    @Test
+    public void onSaveInstanceState_shouldSetCurrentPosition_shouldSetVastConfiguration() throws Exception {
+        initializeSubject();
+
+        Bundle bundle = mock(Bundle.class);
+        subject.onSaveInstanceState(bundle);
+
+        verify(bundle).putInt(eq(CURRENT_POSITION), anyInt());
+        verify(bundle).putSerializable(eq(RESUMED_VAST_CONFIG), any(VastVideoConfig
+                .class));
+    }
+
     @Test
     public void onActivityResult_shouldCallFinish() throws Exception {
         final int expectedResultCode = Activity.RESULT_OK;
@@ -509,7 +725,7 @@ public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickBeforeEnd_sho
     }
 
     @Test
-    public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickAfterEnd_shouldStartMoPubBrowser() throws Exception {
+    public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickAfterEnd_shouldTrackClick_shouldStartMoPubBrowser() throws Exception {
         initializeSubject();
         spyOnVideoView();
         setVideoViewParams(15999, 15999);
@@ -521,14 +737,14 @@ public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickAfterEnd_shou
 
         getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
 
-        ArgumentCaptor<Bundle> bundleCaptor = ArgumentCaptor.forClass(Bundle.class);
-        verify(baseVideoViewControllerListener).onStartActivityForResult(
-                eq(MoPubBrowser.class),
-                eq(expectedBrowserRequestCode),
-                bundleCaptor.capture()
-        );
-
-        assertThat(bundleCaptor.getValue().get(DESTINATION_URL_KEY)).isEqualTo(CLICKTHROUGH_URL);
+        Robolectric.runBackgroundTasks();
+        final Intent startedActivity = Robolectric.getShadowApplication().peekNextStartedActivity();
+        assertThat(startedActivity.getComponent().getClassName())
+                .isEqualTo(MoPubBrowser.class.getName());
+        assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(
+                RESOLVED_CLICKTHROUGH_URL);
+        verify((Activity) context).startActivityForResult(any(Intent.class),
+                eq(expectedBrowserRequestCode));
     }
 
     @Test
@@ -561,38 +777,48 @@ public void onTouch_withTouchUp_whenVideoLongerThan16Seconds_andClickAfter5Secon
 
         getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
 
-        ArgumentCaptor<Bundle> bundleCaptor = ArgumentCaptor.forClass(Bundle.class);
-        verify(baseVideoViewControllerListener).onStartActivityForResult(
-                eq(MoPubBrowser.class),
-                eq(expectedBrowserRequestCode),
-                bundleCaptor.capture()
-        );
-
-        assertThat(bundleCaptor.getValue().get(DESTINATION_URL_KEY)).isEqualTo(CLICKTHROUGH_URL);
+        Robolectric.runBackgroundTasks();
+        final Intent startedActivity = Robolectric.getShadowApplication().peekNextStartedActivity();
+        assertThat(startedActivity.getComponent().getClassName())
+                .isEqualTo(MoPubBrowser.class.getName());
+        assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(
+                RESOLVED_CLICKTHROUGH_URL);
+        verify((Activity) context).startActivityForResult(any(Intent.class),
+                eq(expectedBrowserRequestCode));
     }
 
     @Test
     public void onTouch_whenCloseButtonVisible_shouldPingClickThroughTrackers() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addClickTrackers(Arrays.asList("click_1", "click_2"));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setNetworkMediaFileUrl("video_url");
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.addClickTrackers(
+                VastUtils.stringsToVastTrackers("click_1" + MACRO_TAGS, "click_2" + MACRO_TAGS));
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
+        spyOnVideoView();
+        // Because it's almost never exactly 15 seconds
+        when(spyVideoView.getDuration()).thenReturn(15142);
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+        getShadowVideoView().getOnCompletionListener().onCompletion(null);
 
         subject.setCloseButtonVisible(true);
 
         getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
-        verify(mockRequestQueue).add(argThat(isUrl("click_1")));
-        verify(mockRequestQueue).add(argThat(isUrl("click_2")));
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "click_1?errorcode=&asseturi=video_url&contentplayhead=00:00:15.142")));
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "click_2?errorcode=&asseturi=video_url&contentplayhead=00:00:15.142")));
     }
 
     @Test
     public void onTouch_whenCloseButtonNotVisible_shouldNotPingClickThroughTrackers() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addClickTrackers(Arrays.asList("click_1", "click_2"));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.addClickTrackers(VastUtils.stringsToVastTrackers("click_1",
+                "click_2"));
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
 
@@ -604,9 +830,11 @@ public void onTouch_whenCloseButtonNotVisible_shouldNotPingClickThroughTrackers(
 
     @Test
     public void onTouch_withNullBaseVideoViewListener_andActionTouchUp_shouldReturnTrueAndNotBlowUp() throws Exception {
-        subject = new VastVideoViewController(context, bundle, testBroadcastIdentifier, null);
+        subject = new VastVideoViewController((Activity) context, bundle, null,
+                testBroadcastIdentifier, null);
 
-        boolean result = getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
+        boolean result = getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(
+                0, 0));
 
         // pass
 
@@ -617,7 +845,8 @@ public void onTouch_withNullBaseVideoViewListener_andActionTouchUp_shouldReturnT
     public void onTouch_withActionTouchDown_shouldConsumeMotionEvent() throws Exception {
         initializeSubject();
 
-        boolean result = getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionDown(0, 0));
+        boolean result = getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionDown(
+                0, 0));
 
         assertThat(result).isTrue();
     }
@@ -641,15 +870,16 @@ public void onPrepared_whenDurationIsGreaterThanMaxVideoDurationForCloseButton_s
 
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
 
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
+        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(
+                DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
     }
 
     @Test
     public void onPrepared_whenPercentSkipOffsetSpecified_shouldSetShowCloseButtonDelayToSkipOffset() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.setSkipOffset("25%");
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setSkipOffset("25%");
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         spyOnVideoView();
@@ -663,10 +893,10 @@ public void onPrepared_whenPercentSkipOffsetSpecified_shouldSetShowCloseButtonDe
 
     @Test
     public void onPrepared_whenAbsoluteSkipOffsetSpecified_shouldSetShowCloseButtonDelayToSkipOffset() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.setSkipOffset("00:00:03");
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setSkipOffset("00:00:03");
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         spyOnVideoView();
@@ -680,10 +910,10 @@ public void onPrepared_whenAbsoluteSkipOffsetSpecified_shouldSetShowCloseButtonD
 
     @Test
     public void onPrepared_whenAbsoluteSkipOffsetWithMillisecondsSpecified_shouldSetShowCloseButtonDelayToSkipOffset() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.setSkipOffset("00:00:03.141");
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setSkipOffset("00:00:03.141");
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         spyOnVideoView();
@@ -697,10 +927,10 @@ public void onPrepared_whenAbsoluteSkipOffsetWithMillisecondsSpecified_shouldSet
 
     @Test
     public void onPrepared_whenSkipOffsetIsNull_shouldNotSetShowCloseButtonDelay() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.setSkipOffset(null);
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setSkipOffset(null);
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         spyOnVideoView();
@@ -708,16 +938,17 @@ public void onPrepared_whenSkipOffsetIsNull_shouldNotSetShowCloseButtonDelay() t
 
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
 
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
+        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(
+                DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
         assertThat(subject.getHasSkipOffset()).isFalse();
     }
 
     @Test
     public void onPrepared_whenSkipOffsetHasInvalidAbsoluteFormat_shouldNotSetShowCloseButtonDelay() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.setSkipOffset("123:4:56.7");
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setSkipOffset("123:4:56.7");
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         spyOnVideoView();
@@ -725,16 +956,17 @@ public void onPrepared_whenSkipOffsetHasInvalidAbsoluteFormat_shouldNotSetShowCl
 
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
 
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
+        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(
+                DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
         assertThat(subject.getHasSkipOffset()).isFalse();
     }
 
     @Test
     public void onPrepared_whenSkipOffsetHasInvalidPercentFormat_shouldNotSetShowCloseButtonDelay() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.setSkipOffset("101%");
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setSkipOffset("101%");
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         spyOnVideoView();
@@ -742,16 +974,17 @@ public void onPrepared_whenSkipOffsetHasInvalidPercentFormat_shouldNotSetShowClo
 
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
 
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
+        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(
+                DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
         assertThat(subject.getHasSkipOffset()).isFalse();
     }
 
     @Test
     public void onPrepared_whenSkipOffsetHasInvalidFractionalPercentFormat_shouldNotSetShowCloseButtonDelay() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.setSkipOffset("3.14%");
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setSkipOffset("3.14%");
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         spyOnVideoView();
@@ -759,16 +992,17 @@ public void onPrepared_whenSkipOffsetHasInvalidFractionalPercentFormat_shouldNot
 
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
 
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
+        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(
+                DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
         assertThat(subject.getHasSkipOffset()).isFalse();
     }
 
     @Test
     public void onPrepared_whenSkipOffsetIsNegative_shouldNotSetShowCloseButtonDelay() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.setSkipOffset("-00:00:03");
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setSkipOffset("-00:00:03");
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         spyOnVideoView();
@@ -776,16 +1010,17 @@ public void onPrepared_whenSkipOffsetIsNegative_shouldNotSetShowCloseButtonDelay
 
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
 
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
+        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(
+                DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
         assertThat(subject.getHasSkipOffset()).isFalse();
     }
 
     @Test
     public void onPrepared_whenSkipOffsetIsZero_shouldSetShowCloseButtonDelayToZero() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.setSkipOffset("00:00:00");
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setSkipOffset("00:00:00");
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         spyOnVideoView();
@@ -799,10 +1034,10 @@ public void onPrepared_whenSkipOffsetIsZero_shouldSetShowCloseButtonDelayToZero(
 
     @Test
     public void onPrepared_whenSkipOffsetIsLongerThanDurationForShortVideo_shouldNotSetShowCloseButtonDelay() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.setSkipOffset("00:00:11");   // 11s
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setSkipOffset("00:00:11");   // 11s
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         spyOnVideoView();
@@ -816,10 +1051,10 @@ public void onPrepared_whenSkipOffsetIsLongerThanDurationForShortVideo_shouldNot
 
     @Test
     public void onPrepared_whenSkipOffsetIsLongerThanDurationForLongVideo_shouldNotSetShowCloseButtonDelay() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.setSkipOffset("00:00:21");   // 21s
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setSkipOffset("00:00:21");   // 21s
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         spyOnVideoView();
@@ -827,10 +1062,100 @@ public void onPrepared_whenSkipOffsetIsLongerThanDurationForLongVideo_shouldNotS
 
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
 
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
+        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(
+                DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
         assertThat(subject.getHasSkipOffset()).isFalse();
     }
 
+    @Test
+    public void onPrepared_shouldCalibrateAndMakeVisibleRadialCountdownWidget() throws Exception {
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setSkipOffset("00:00:05");
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
+        initializeSubject();
+        spyOnVideoView();
+        setVideoViewParams(0, 10000);
+
+        final VastVideoRadialCountdownWidget radialCountdownWidgetSpy = spy(subject.getRadialCountdownWidget());
+        subject.setRadialCountdownWidget(radialCountdownWidgetSpy);
+
+        assertThat(subject.isCalibrationDone()).isFalse();
+        assertThat(radialCountdownWidgetSpy.getVisibility()).isEqualTo(View.INVISIBLE);
+
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+
+        assertThat(subject.isCalibrationDone()).isTrue();
+        assertThat(radialCountdownWidgetSpy.getVisibility()).isEqualTo(View.VISIBLE);
+        verify(radialCountdownWidgetSpy).calibrateAndMakeVisible(5000);
+    }
+
+    @Test
+    public void onPrepared_shouldCalibrateAndMakeVisibleProgressBarWidget() throws Exception {
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setSkipOffset("00:00:05");
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
+        initializeSubject();
+        spyOnVideoView();
+        setVideoViewParams(0, 10000);
+
+        final VastVideoProgressBarWidget progressBarWidgetSpy = spy(subject.getProgressBarWidget());
+        subject.setProgressBarWidget(progressBarWidgetSpy);
+
+        assertThat(subject.isCalibrationDone()).isFalse();
+        assertThat(progressBarWidgetSpy.getVisibility()).isEqualTo(View.INVISIBLE);
+
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+
+        assertThat(subject.isCalibrationDone()).isTrue();
+        assertThat(progressBarWidgetSpy.getVisibility()).isEqualTo(View.VISIBLE);
+        verify(progressBarWidgetSpy).calibrateAndMakeVisible(10000, 5000);
+    }
+
+    @Config(reportSdk = VERSION_CODES.GINGERBREAD)
+    @Test
+    public void onPrepared_beforeGingerbreadMr1_shouldNotSetBlurredLastVideoFrame() throws Exception {
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
+
+        initializeSubject();
+
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+        Robolectric.getBackgroundScheduler().unPause();
+        Robolectric.getUiThreadScheduler().unPause();
+        Thread.sleep(NETWORK_DELAY);
+
+        assertThat(subject.getBlurredLastVideoFrameImageView().getDrawable()).isNull();
+
+        ShadowImageView imageView = shadowOf(subject.getBlurredLastVideoFrameImageView());
+        assertThat(imageView.getOnTouchListener()).isNull();
+    }
+
+    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
+    @Test
+    public void onPrepared_atLeastGingerbreadMr1_shouldSetBlurredLastVideoFrame() throws Exception {
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
+
+        initializeSubject();
+
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+        Robolectric.getBackgroundScheduler().unPause();
+        Robolectric.getUiThreadScheduler().unPause();
+        Thread.sleep(NETWORK_DELAY);
+
+        final ImageView blurredLastVideoFrameImageView = subject.getBlurredLastVideoFrameImageView();
+        assertThat(blurredLastVideoFrameImageView.getDrawable()).isInstanceOf(BitmapDrawable.class);
+        assertThat(
+                ((BitmapDrawable) blurredLastVideoFrameImageView.getDrawable()).getBitmap()).isNotNull();
+
+        ShadowImageView imageView = shadowOf(subject.getBlurredLastVideoFrameImageView());
+        assertThat(imageView.getOnTouchListener()).isNull();
+    }
+
     @Test
     public void onCompletion_shouldMarkVideoAsFinished() throws Exception {
         initializeSubject();
@@ -842,35 +1167,48 @@ public void onCompletion_shouldMarkVideoAsFinished() throws Exception {
 
     @Test
     public void onCompletion_whenAllTrackersTracked_whenNoPlaybackErrors_shouldPingCompletionTrackersOnlyOnce() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        VastAbsoluteProgressTracker testTracker = new VastAbsoluteProgressTracker("testUrl", 123);
-        vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(testTracker));
-        vastVideoConfiguration.addCompleteTrackers(Arrays.asList("complete_1", "complete_2"));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setNetworkMediaFileUrl("video_url");
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        VastAbsoluteProgressTracker testTracker = new VastAbsoluteProgressTracker(
+                "testUrl" + MACRO_TAGS, 123);
+        vastVideoConfig.addAbsoluteTrackers(Arrays.asList(testTracker));
+        vastVideoConfig.addCompleteTrackers(
+                VastUtils.stringsToVastTrackers("complete_1" + MACRO_TAGS,
+                        "complete_2" + MACRO_TAGS));
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         testTracker.setTracked();
+        spyOnVideoView();
+        setVideoViewParams(15000, 15000);
 
         getShadowVideoView().getOnCompletionListener().onCompletion(null);
-        verify(mockRequestQueue).add(argThat(isUrl("complete_1")));
-        verify(mockRequestQueue).add(argThat(isUrl("complete_2")));
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "complete_1?errorcode=&asseturi=video_url&contentplayhead=00:00:15.000")));
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "complete_2?errorcode=&asseturi=video_url&contentplayhead=00:00:15.000")));
 
         // Completion trackers should still only be hit once
         getShadowVideoView().getOnCompletionListener().onCompletion(null);
-        verify(mockRequestQueue).add(argThat(isUrl("complete_1")));
-        verify(mockRequestQueue).add(argThat(isUrl("complete_2")));
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "complete_1?errorcode=&asseturi=video_url&contentplayhead=00:00:15.000")));
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "complete_2?errorcode=&asseturi=video_url&contentplayhead=00:00:15.000")));
     }
 
     @Test
     public void onCompletion_whenSomeTrackersRemain_shouldNotPingCompletionTrackers() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addCompleteTrackers(Arrays.asList("complete_1", "complete_2"));
-        VastAbsoluteProgressTracker testTracker = new VastAbsoluteProgressTracker("testUrl", 123);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setNetworkMediaFileUrl("video_url");
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.addCompleteTrackers(
+                VastUtils.stringsToVastTrackers("complete_1", "complete_2"));
+        VastAbsoluteProgressTracker testTracker = new VastAbsoluteProgressTracker(
+                "testUrl" + MACRO_TAGS, 123);
         // Never track the testTracker, so completion trackers should not be fired.
-        vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(testTracker));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        vastVideoConfig.addAbsoluteTrackers(Arrays.asList(testTracker));
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
 
@@ -881,13 +1219,17 @@ public void onCompletion_whenSomeTrackersRemain_shouldNotPingCompletionTrackers(
 
     @Test
     public void onCompletion_whenPlaybackError_shouldNotPingCompletionTrackers() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addCompleteTrackers(Arrays.asList("complete_1", "complete_2"));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setNetworkMediaFileUrl("video_url");
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.addCompleteTrackers(
+                VastUtils.stringsToVastTrackers("complete_1", "complete_2"));
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         subject.setVideoError();
+        spyOnVideoView();
+        setVideoViewParams(12345, 15000);
 
         getShadowVideoView().getOnCompletionListener().onCompletion(null);
         verify(mockRequestQueue, never()).add(argThat(isUrl("complete_1")));
@@ -919,236 +1261,251 @@ public void onCompletion_shouldStopProgressCheckerAndCountdown() throws Exceptio
     }
 
     @Test
-    public void onCompletion_shouldDisplayCompanionAdIfAvailable() throws Exception {
+    public void onCompletion_whenCompanionAdAvailable_shouldShowCompanionAdAndHideBlurredLastVideoFrame() throws Exception {
         initializeSubject();
-        subject.onCreate();
 
+        final View companionView = subject.getLandscapeCompanionAdView();
+        final ImageView blurredLastVideoFrameImageView = subject.getBlurredLastVideoFrameImageView();
+
+        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(companionView.getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
+
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
         Robolectric.getBackgroundScheduler().unPause();
         Robolectric.getUiThreadScheduler().unPause();
         Thread.sleep(NETWORK_DELAY);
 
-        final ImageView imageView = subject.getCompanionAdImageView();
-
-        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(imageView.getVisibility()).isEqualTo(View.INVISIBLE);
-
         getShadowVideoView().getOnCompletionListener().onCompletion(null);
 
-        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.GONE);
-        assertThat(imageView.getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(shadowOf(((BitmapDrawable) imageView.getDrawable()).getBitmap()).getCreatedFromBytes()).isEqualTo("body".getBytes());
+        assertThat(subject.getVastVideoView().getBlurLastVideoFrameTask()).isNull();
+        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(companionView.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
     }
 
     @Test
-    public void onCompletion_shouldShowThatchedBackground() throws Exception {
+    public void onCompletion_whenCompanionAdAvailable_shouldOnlyShowTopGradientStripWidget() throws Exception {
         initializeSubject();
 
-        final ImageView imageView = subject.getCompanionAdImageView();
+        final VastVideoGradientStripWidget topGradientStripWidget = subject.getTopGradientStripWidget();
+        final VastVideoGradientStripWidget bottomGradientStripWidget = subject.getBottomGradientStripWidget();
 
-        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(imageView.getVisibility()).isEqualTo(View.INVISIBLE);
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+        Robolectric.getBackgroundScheduler().unPause();
+        Robolectric.getUiThreadScheduler().unPause();
+        Thread.sleep(NETWORK_DELAY);
 
         getShadowVideoView().getOnCompletionListener().onCompletion(null);
 
-        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.GONE);
-        assertThat(imageView.getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(topGradientStripWidget.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(bottomGradientStripWidget.getVisibility()).isEqualTo(View.GONE);
     }
 
     @Test
-    public void onError_shouldFireVideoErrorAndReturnFalse() throws Exception {
+    public void onCompletion_whenCompanionAdNotAvailable_shouldHideCompanionAdAndShowBlurredLastVideoFrame() throws Exception {
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setVastCompanionAd(null, null);
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
+
         initializeSubject();
 
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_FAIL, testBroadcastIdentifier);
+        final View companionView = subject.getLandscapeCompanionAdView();
+        final ImageView blurredLastVideoFrameImageView = subject.getBlurredLastVideoFrameImageView();
 
-        boolean result = getShadowVideoView().getOnErrorListener().onError(null, 0, 0);
-        Robolectric.getUiThreadScheduler().unPause();
-
-        assertThat(result).isFalse();
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-        assertThat(subject.getVideoError()).isTrue();
-    }
+        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(companionView.getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
 
-    @Test
-    public void onError_shouldStopProgressChecker() throws Exception {
-        initializeSubject();
-        subject.onResume();
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+        Robolectric.getBackgroundScheduler().unPause();
+        Robolectric.getUiThreadScheduler().unPause();
+        Thread.sleep(NETWORK_DELAY);
 
-        verify(spyProgressRunnable).startRepeating(anyLong());
-        verify(spyCountdownRunnable).startRepeating(anyLong());
-        reset(spyProgressRunnable, spyCountdownRunnable);
-        getShadowVideoView().getOnErrorListener().onError(null, 0, 0);
+        getShadowVideoView().getOnCompletionListener().onCompletion(null);
 
-        verify(spyProgressRunnable).stop();
-        verify(spyCountdownRunnable).stop();
+        assertThat(subject.getVastVideoView().getBlurLastVideoFrameTask()).isNotNull();
+        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(companionView.getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(blurredLastVideoFrameImageView.getDrawable()).isInstanceOf(BitmapDrawable.class);
+        assertThat(
+                ((BitmapDrawable) blurredLastVideoFrameImageView.getDrawable()).getBitmap()).isNotNull();
     }
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
     @Test
-    public void onError_withVideoFilePermissionErrorBelowJellyBean_shouldRetryPlayingTheVideo() throws Exception {
-        File file = new File("disk_video_path");
-        file.createNewFile();
+    public void onCompletion_whenCompanionAdNotAvailable_shouldHideBothGradientStripWidgets() throws Exception {
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setVastCompanionAd(null, null);
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
 
-        assertThat(getShadowVideoView().getCurrentVideoState()).isEqualTo(-1);
+        final VastVideoGradientStripWidget topGradientStripWidget = subject.getTopGradientStripWidget();
+        final VastVideoGradientStripWidget bottomGradientStripWidget = subject.getBottomGradientStripWidget();
 
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
-        getShadowVideoView().getOnErrorListener().onError(new MediaPlayer(), 1, Integer.MIN_VALUE);
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+        Robolectric.getBackgroundScheduler().unPause();
+        Robolectric.getUiThreadScheduler().unPause();
+        Thread.sleep(NETWORK_DELAY);
 
-        assertThat(getShadowVideoView().isPlaying()).isTrue();
-        assertThat(subject.getVideoRetries()).isEqualTo(1);
+        getShadowVideoView().getOnCompletionListener().onCompletion(null);
 
-        file.delete();
+        assertThat(topGradientStripWidget.getVisibility()).isEqualTo(View.GONE);
+        assertThat(bottomGradientStripWidget.getVisibility()).isEqualTo(View.GONE);
     }
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
+    @TargetApi(VERSION_CODES.HONEYCOMB)
     @Test
-    public void retryMediaPlayer_withVideoFilePermissionErrorAndBelowJellyBean_shouldReturnTrue() throws Exception {
-        File file = new File("disk_video_path");
-        file.createNewFile();
+    public void onCompletion_whenCompanionAdNotAvailableAndBlurredLastVideoFrameNotPrepared_shouldShowBlackBackground() throws Exception {
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setVastCompanionAd(null, null);
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
 
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
-        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE)).isTrue();
-        assertThat(subject.getVideoRetries()).isEqualTo(1);
+        final View companionView = subject.getLandscapeCompanionAdView();
+        final ImageView blurredLastVideoFrameImageView = subject.getBlurredLastVideoFrameImageView();
 
-        file.delete();
-    }
-
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
-    @Test
-    public void retryMediaPlayer_shouldNotRunMoreThanOnce() throws Exception {
-        File file = new File("disk_video_path");
-        file.createNewFile();
-
-        initializeSubject();
+        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(companionView.getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
 
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
-        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE)).isTrue();
-        assertThat(subject.getVideoRetries()).isEqualTo(1);
+        getShadowVideoView().getOnCompletionListener().onCompletion(null);
 
-        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE)).isFalse();
-        assertThat(subject.getVideoRetries()).isEqualTo(1);
+        assertThat(subject.getVastVideoView().getBlurLastVideoFrameTask()).isNull();
+        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(companionView.getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
 
-        file.delete();
+        Drawable background = subject.getLayout().getBackground();
+        assertThat(((ColorDrawable) background).getColor()).isEqualTo(Color.BLACK);
     }
 
-    @Config(reportSdk = VERSION_CODES.JELLY_BEAN)
     @Test
-    public void retryMediaPlayer_withAndroidVersionAboveJellyBean_shouldReturnFalse() throws Exception {
-        File file = new File("disk_video_path");
-        file.createNewFile();
+    public void onCompletion_whenCompanionAdNotAvailableAndBlurredLastVideoFrameNotPrepared_shouldHideBothGradientStripWidgets() throws Exception {
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setVastCompanionAd(null, null);
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
 
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
-        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE)).isFalse();
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
+        final VastVideoGradientStripWidget topGradientStripWidget = subject.getTopGradientStripWidget();
+        final VastVideoGradientStripWidget bottomGradientStripWidget = subject.getBottomGradientStripWidget();
 
-        file.delete();
-    }
-
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void retryMediaPlayer_withOtherVideoError_shouldReturnFalse() throws Exception {
-        File file = new File("disk_video_path");
-        file.createNewFile();
-
-        initializeSubject();
-
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
-        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 2, Integer.MIN_VALUE)).isFalse();
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
+        getShadowVideoView().getOnCompletionListener().onCompletion(null);
 
-        file.delete();
+        assertThat(topGradientStripWidget.getVisibility()).isEqualTo(View.GONE);
+        assertThat(bottomGradientStripWidget.getVisibility()).isEqualTo(View.GONE);
     }
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
-    public void retryMediaPlayer_withExceptionThrown_shouldReturnFalseAndIncrementRetryCount() throws Exception {
-        File file = new File("disk_video_path");
-        if (file.exists()) {
-            assertThat(file.delete()).isTrue();
-        }
-
+    public void onError_shouldFireVideoErrorAndReturnFalse() throws Exception {
         initializeSubject();
 
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
-        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE)).isFalse();
-        assertThat(subject.getVideoRetries()).isEqualTo(1);
-    }
+        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_FAIL, testBroadcastIdentifier);
 
-    @Test
-    public void handleClick_shouldMakeRequestsToClickTrackingUrls() throws Exception {
-        initializeSubject();
-        subject.handleClick(Arrays.asList("clicktracker1", "clicktracker2"), CLICKTHROUGH_URL);
+        boolean result = getShadowVideoView().getOnErrorListener().onError(null, 0, 0);
+        Robolectric.getUiThreadScheduler().unPause();
 
-        verify(mockRequestQueue).add(argThat(isUrl("clicktracker1")));
-        verify(mockRequestQueue).add(argThat(isUrl("clicktracker2")));
+        assertThat(result).isFalse();
+        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
+        assertThat(subject.getVideoError()).isTrue();
     }
 
     @Test
-    public void handleClick_withNullClickTrackers_shouldNotThrowAnException() throws Exception {
+    public void onError_shouldStopProgressChecker() throws Exception {
         initializeSubject();
-        subject.handleClick(null, CLICKTHROUGH_URL);
+        subject.onResume();
 
-        // pass
+        verify(spyProgressRunnable).startRepeating(anyLong());
+        verify(spyCountdownRunnable).startRepeating(anyLong());
+        reset(spyProgressRunnable, spyCountdownRunnable);
+        getShadowVideoView().getOnErrorListener().onError(null, 0, 0);
+
+        verify(spyProgressRunnable).stop();
+        verify(spyCountdownRunnable).stop();
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
     @Test
-    public void handleClick_withNullClickThroughUrl_shouldNotBroadcastClickOrOpenNewActivity() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, testBroadcastIdentifier);
+    public void onError_withVideoFilePermissionErrorBelowJellyBean_shouldRetryPlayingTheVideo() throws Exception {
+        File file = new File("disk_video_path");
+        file.createNewFile();
 
         initializeSubject();
-        subject.handleClick(Arrays.asList("clicktracker"), null);
 
-        Robolectric.getUiThreadScheduler().unPause();
-        verify(broadcastReceiver, never()).onReceive(any(Context.class), eq(expectedIntent));
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
-    }
+        assertThat(getShadowVideoView().getCurrentVideoState()).isEqualTo(-1);
 
-    @Test
-    public void handleClick_withMoPubNativeBrowserClickThroughUrl_shouldOpenExternalBrowser() throws Exception {
-        initializeSubject();
+        assertThat(subject.getVastVideoView().getVideoRetries()).isEqualTo(0);
+        getShadowVideoView().getOnErrorListener().onError(new MediaPlayer(), 1, Integer.MIN_VALUE);
 
-        subject.handleClick(Arrays.asList("clicktracker"),
-                "mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.mopub.com");
+        assertThat(getShadowVideoView().isPlaying()).isTrue();
+        assertThat(subject.getVastVideoView().getVideoRetries()).isEqualTo(1);
 
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getDataString()).isEqualTo("http://www.mopub.com");
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
+        file.delete();
     }
 
     @Test
-    public void handleClick_withMalformedMoPubNativeBrowserClickThroughUrl_shouldNotOpenANewActivity() throws Exception {
-        initializeSubject();
+    public void onError_shouldFireErrorTrackers() throws Exception {
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setNetworkMediaFileUrl("video_url");
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.addCompleteTrackers(
+                VastUtils.stringsToVastTrackers("complete_1", "complete_2"));
+        vastVideoConfig.addErrorTrackers(
+                Collections.singletonList(new VastTracker("error" + MACRO_TAGS)));
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
-        // url2 is an invalid query parameter
-        subject.handleClick(Arrays.asList("clicktracker"),
-                "mopubnativebrowser://navigate?url2=http%3A%2F%2Fwww.mopub.com");
+        initializeSubject();
+        subject.setVideoError();
+        spyOnVideoView();
+        setVideoViewParams(12345, 15000);
 
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+        getShadowVideoView().getOnErrorListener().onError(null, 0, 0);
+        verify(mockRequestQueue, never()).add(argThat(isUrl("complete_1")));
+        verify(mockRequestQueue, never()).add(argThat(isUrl("complete_2")));
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "error?errorcode=400&asseturi=video_url&contentplayhead=00:00:12.345")));
     }
 
     @Test
-    public void handleClick_withAboutBlankClickThroughUrl_shouldFailSilently() throws Exception {
-        initializeSubject();
+    public void onError_withMultipleCalls_shouldRepeatedlyFireErrorTrackers() throws Exception {
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setNetworkMediaFileUrl("video_url");
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.addErrorTrackers(
+                Collections.singletonList(new VastTracker("error" + MACRO_TAGS)));
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
-        subject.handleClick(Arrays.asList("clicktracker"), "about:blank");
+        initializeSubject();
+        subject.setVideoError();
+        spyOnVideoView();
+        setVideoViewParams(12345, 15000);
 
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+        for(int i = 0; i < 10; i++) {
+            getShadowVideoView().getOnErrorListener().onError(null, 0, 0);
+            verify(mockRequestQueue).add(argThat(isUrl(
+                    "error?errorcode=400&asseturi=video_url&contentplayhead=00:00:12.345")));
+        }
+        verifyNoMoreInteractions(mockRequestQueue);
     }
 
     @Test
     public void videoRunnablesRun_shouldFireOffAllProgressTrackers() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f),
-                new VastFractionalProgressTracker("second", 0.5f),
-                new VastFractionalProgressTracker("third", 0.75f)));
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setNetworkMediaFileUrl("video_url");
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("first" + MACRO_TAGS, 0.25f),
+                        new VastFractionalProgressTracker("second" + MACRO_TAGS, 0.5f),
+                        new VastFractionalProgressTracker("third" + MACRO_TAGS, 0.75f)));
 
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         spyOnVideoView();
@@ -1158,78 +1515,19 @@ public void videoRunnablesRun_shouldFireOffAllProgressTrackers() throws Exceptio
         // this runs the videoProgressChecker and countdown runnable
         Robolectric.getUiThreadScheduler().unPause();
 
-        verify(mockRequestQueue).add(argThat(isUrl("first")));
-        verify(mockRequestQueue).add(argThat(isUrl("second")));
-        verify(mockRequestQueue).add(argThat(isUrl("third")));
-    }
-
-    @Test
-    public void getUntriggeredTrackersBefore_endOfVideo_shouldReturnAllTrackers() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f),
-                new VastFractionalProgressTracker("second", 0.5f),
-                new VastFractionalProgressTracker("third", 0.75f)));
-        vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(new VastAbsoluteProgressTracker("1secs", 1000), new VastAbsoluteProgressTracker("10secs", 10000)));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(11000, 11000);
-
-        final List<VastTracker> untriggeredTrackers = subject.getUntriggeredTrackersBefore(11000, 11000);
-        assertThat(untriggeredTrackers).hasSize(5);
-
-        // Sorted absolute trackers, followed by sorted fractional trackers
-        final VastTracker tracker0 = untriggeredTrackers.get(0);
-        assertThat(tracker0).isExactlyInstanceOf(VastAbsoluteProgressTracker.class);
-        assertThat(((VastAbsoluteProgressTracker) tracker0).getTrackingMilliseconds()).isEqualTo(1000);
-
-        final VastTracker tracker1 = untriggeredTrackers.get(1);
-        assertThat(tracker1).isExactlyInstanceOf(VastAbsoluteProgressTracker.class);
-        assertThat(((VastAbsoluteProgressTracker) tracker1).getTrackingMilliseconds()).isEqualTo(10000);
-
-
-        final VastTracker tracker2 = untriggeredTrackers.get(2);
-        assertThat(tracker2).isExactlyInstanceOf(VastFractionalProgressTracker.class);
-        assertThat(((VastFractionalProgressTracker) tracker2).trackingFraction()).isEqualTo(0.25f);
-
-        final VastTracker tracker3 = untriggeredTrackers.get(3);
-        assertThat(tracker3).isExactlyInstanceOf(VastFractionalProgressTracker.class);
-        assertThat(((VastFractionalProgressTracker) tracker3).trackingFraction()).isEqualTo(0.5f);
-
-        final VastTracker tracker4 = untriggeredTrackers.get(4);
-        assertThat(tracker4).isExactlyInstanceOf(VastFractionalProgressTracker.class);
-        assertThat(((VastFractionalProgressTracker) tracker4).trackingFraction()).isEqualTo(0.75f);
-    }
-
-    @Test
-    public void getUntriggeredTrackersBefore_withTriggeredTrackers_shouldNotReturnTriggered() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f),
-                new VastFractionalProgressTracker("second", 0.5f),
-                new VastFractionalProgressTracker("third", 0.75f)));
-        vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(new VastAbsoluteProgressTracker("5secs", 5000), new VastAbsoluteProgressTracker("10secs", 10000)));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(11000, 11000);
-
-        final List<VastTracker> untriggeredTrackers = subject.getUntriggeredTrackersBefore(11000, 11000);
-        assertThat(untriggeredTrackers).hasSize(5);
-        untriggeredTrackers.get(0).setTracked();
-
-        final List<VastTracker> secondTrackersList = subject.getUntriggeredTrackersBefore(11000, 11000);
-        assertThat(secondTrackersList).hasSize(4);
+        verify(mockRequestQueue).add(
+                argThat(isUrl("first?errorcode=&asseturi=video_url&contentplayhead=00:00:09.002")));
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "second?errorcode=&asseturi=video_url&contentplayhead=00:00:09.002")));
+        verify(mockRequestQueue).add(
+                argThat(isUrl("third?errorcode=&asseturi=video_url&contentplayhead=00:00:09.002")));
     }
 
     @Test
     public void videoRunnablesRun_whenDurationIsInvalid_shouldNotMakeAnyNetworkCalls() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         spyOnVideoView();
@@ -1246,10 +1544,11 @@ public void videoRunnablesRun_whenDurationIsInvalid_shouldNotMakeAnyNetworkCalls
 
     @Test
     public void videoRunnablesRun_whenCurrentTimeLessThanTwoSeconds_shouldNotFireStartTracker() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(new VastAbsoluteProgressTracker("start", 2000)));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.addAbsoluteTrackers(
+                Arrays.asList(new VastAbsoluteProgressTracker("start", 2000)));
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         spyOnVideoView();
@@ -1274,11 +1573,14 @@ public void videoRunnablesRun_whenCurrentTimeLessThanTwoSeconds_shouldNotFireSta
 
     @Test
     public void videoRunnablesRun_whenCurrentTimeGreaterThanTwoSeconds_shouldFireStartTracker() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(new VastAbsoluteProgressTracker("start", 2000)));
-        vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(new VastAbsoluteProgressTracker("later", 3000)));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setNetworkMediaFileUrl("video_url");
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.addAbsoluteTrackers(
+                Arrays.asList(new VastAbsoluteProgressTracker("start" + MACRO_TAGS, 2000)));
+        vastVideoConfig.addAbsoluteTrackers(
+                Arrays.asList(new VastAbsoluteProgressTracker("later" + MACRO_TAGS, 3000)));
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         spyOnVideoView();
@@ -1288,7 +1590,8 @@ public void videoRunnablesRun_whenCurrentTimeGreaterThanTwoSeconds_shouldFireSta
 
         Robolectric.getUiThreadScheduler().unPause();
 
-        verify(mockRequestQueue).add(argThat(isUrl("start")));
+        verify(mockRequestQueue).add(
+                argThat(isUrl("start?errorcode=&asseturi=video_url&contentplayhead=00:00:02.000")));
 
         // run checker another time
         assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
@@ -1299,11 +1602,14 @@ public void videoRunnablesRun_whenCurrentTimeGreaterThanTwoSeconds_shouldFireSta
 
     @Test
     public void videoRunnablesRun_whenProgressIsPastFirstQuartile_shouldOnlyPingFirstQuartileTrackersOnce() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f)));
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("don't call", 0.28f)));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setNetworkMediaFileUrl("video_url");
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("first" + MACRO_TAGS, 0.25f)));
+        vastVideoConfig.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("don't call" + MACRO_TAGS, 0.28f)));
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         spyOnVideoView();
@@ -1314,7 +1620,8 @@ public void videoRunnablesRun_whenProgressIsPastFirstQuartile_shouldOnlyPingFirs
 
         Robolectric.getUiThreadScheduler().unPause();
 
-        verify(mockRequestQueue).add(argThat(isUrl("first")));
+        verify(mockRequestQueue).add(
+                argThat(isUrl("first?errorcode=&asseturi=video_url&contentplayhead=00:00:00.026")));
 
         // run checker another time
         Robolectric.getUiThreadScheduler().runTasks(2);
@@ -1325,11 +1632,14 @@ public void videoRunnablesRun_whenProgressIsPastFirstQuartile_shouldOnlyPingFirs
     @Test
     public void videoRunnablesRun_whenProgressIsPastMidQuartile_shouldPingFirstQuartileTrackers_andMidQuartileTrackersBothOnlyOnce() throws Exception {
 
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f)));
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("second", 0.5f)));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setNetworkMediaFileUrl("video_url");
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("first" + MACRO_TAGS, 0.25f)));
+        vastVideoConfig.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("second" + MACRO_TAGS, 0.5f)));
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         spyOnVideoView();
@@ -1340,8 +1650,10 @@ public void videoRunnablesRun_whenProgressIsPastMidQuartile_shouldPingFirstQuart
 
         Robolectric.getUiThreadScheduler().unPause();
 
-        verify(mockRequestQueue).add(argThat(isUrl("first")));
-        verify(mockRequestQueue).add(argThat(isUrl("second")));
+        verify(mockRequestQueue).add(
+                argThat(isUrl("first?errorcode=&asseturi=video_url&contentplayhead=00:00:00.051")));
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "second?errorcode=&asseturi=video_url&contentplayhead=00:00:00.051")));
 
         Robolectric.getUiThreadScheduler().runTasks(2);
 
@@ -1350,12 +1662,16 @@ public void videoRunnablesRun_whenProgressIsPastMidQuartile_shouldPingFirstQuart
 
     @Test
     public void videoRunnablesRun_whenProgressIsPastThirdQuartile_shouldPingFirstQuartileTrackers_andMidQuartileTrackers_andThirdQuartileTrackersAllOnlyOnce() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f)));
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("second", 0.5f)));
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("third", 0.75f)));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setNetworkMediaFileUrl("video_url");
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("first" + MACRO_TAGS, 0.25f)));
+        vastVideoConfig.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("second" + MACRO_TAGS, 0.5f)));
+        vastVideoConfig.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("third" + MACRO_TAGS, 0.75f)));
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         spyOnVideoView();
@@ -1366,9 +1682,12 @@ public void videoRunnablesRun_whenProgressIsPastThirdQuartile_shouldPingFirstQua
 
         Robolectric.getUiThreadScheduler().unPause();
 
-        verify(mockRequestQueue).add(argThat(isUrl("first")));
-        verify(mockRequestQueue).add(argThat(isUrl("second")));
-        verify(mockRequestQueue).add(argThat(isUrl("third")));
+        verify(mockRequestQueue).add(
+                argThat(isUrl("first?errorcode=&asseturi=video_url&contentplayhead=00:00:00.076")));
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "second?errorcode=&asseturi=video_url&contentplayhead=00:00:00.076")));
+        verify(mockRequestQueue).add(
+                argThat(isUrl("third?errorcode=&asseturi=video_url&contentplayhead=00:00:00.076")));
 
         Robolectric.getUiThreadScheduler().runTasks(2);
 
@@ -1379,12 +1698,14 @@ public void videoRunnablesRun_whenProgressIsPastThirdQuartile_shouldPingFirstQua
     public void videoRunnablesRun_asVideoPlays_shouldPingAllThreeTrackersIndividuallyOnce() throws Exception {
         //stub(mockMediaPlayer.getDuration()).toReturn(100);
 
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f)));
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("second", 0.5f)));
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("third", 0.75f)));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setNetworkMediaFileUrl("video_url");
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.addFractionalTrackers(
+                Arrays.asList(new VastFractionalProgressTracker("first" + MACRO_TAGS, 0.25f)));
+        vastVideoConfig.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("second" + MACRO_TAGS, 0.5f)));
+        vastVideoConfig.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("third" + MACRO_TAGS, 0.75f)));
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         spyOnVideoView();
@@ -1397,19 +1718,22 @@ public void videoRunnablesRun_asVideoPlays_shouldPingAllThreeTrackersIndividuall
         seekToAndAssertRequestsMade(24);
 
         // after it hits first tracker
-        seekToAndAssertRequestsMade(26, "first");
+        seekToAndAssertRequestsMade(26,
+                "first?errorcode=&asseturi=video_url&contentplayhead=00:00:00.026");
 
         // before mid quartile is hit
         seekToAndAssertRequestsMade(49);
 
         // after it hits mid trackers
-        seekToAndAssertRequestsMade(51, "second");
+        seekToAndAssertRequestsMade(51,
+                "second?errorcode=&asseturi=video_url&contentplayhead=00:00:00.051");
 
         // before third quartile is hit
         seekToAndAssertRequestsMade(74);
 
         // after third quartile is hit
-        seekToAndAssertRequestsMade(76, "third");
+        seekToAndAssertRequestsMade(76,
+                "third?errorcode=&asseturi=video_url&contentplayhead=00:00:00.076");
 
         // way after third quartile is hit
         seekToAndAssertRequestsMade(99);
@@ -1440,10 +1764,10 @@ public void videoRunnablesRun_whenCurrentPositionIsGreaterThanShowCloseButtonDel
 
     @Test
     public void videoRunnablesRun_whenCurrentPositionIsGreaterThanSkipOffset_shouldShowCloseButton() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.setSkipOffset("25%");    // skipoffset is at 2.5s
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setSkipOffset("25%");    // skipoffset is at 2.5s
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         spyOnVideoView();
@@ -1464,10 +1788,10 @@ public void videoRunnablesRun_whenCurrentPositionIsGreaterThanSkipOffset_shouldS
 
     @Test
     public void videoRunnablesRun_whenCurrentPositionIsLessThanSkipOffset_shouldNotShowCloseButton() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.setSkipOffset("00:00:03");   // skipoffset is at 3s
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setSkipOffset("00:00:03");   // skipoffset is at 3s
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
         spyOnVideoView();
@@ -1498,6 +1822,24 @@ public void onPause_shouldStopRunnables() throws Exception {
         verify(spyProgressRunnable).stop();
     }
 
+    @Test
+    public void onPause_shouldFirePauseTrackers() throws Exception {
+        initializeSubject();
+
+        subject.onPause();
+        verify(mockRequestQueue).add(
+                argThat(isUrl("pause?errorcode=&asseturi=video_url&contentplayhead=00:00:00.000")));
+    }
+
+    @Test
+    public void onPause_withIsClosingFlagSet_shouldNotFirePauseTrackers() throws Exception {
+        initializeSubject();
+        subject.setIsClosing(true);
+
+        subject.onPause();
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
     @Test
     public void onResume_shouldStartRunnables() throws Exception {
         initializeSubject();
@@ -1521,35 +1863,134 @@ public void onResume_shouldSetVideoViewStateToStarted() throws Exception {
         assertThat(getShadowVideoView().getPrevVideoState()).isNotEqualTo(ShadowVideoView.START);
     }
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
     @Test
-    public void onResume_shouldResetVideoRetryCountToZero() throws Exception {
-        File file = new File("disk_video_path");
-        file.createNewFile();
-
+    public void onResume_shouldSeekToPrePausedPosition() throws Exception {
         initializeSubject();
+        spyOnVideoView();
+        setVideoViewParams(7000, 10000);
 
-        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE)).isTrue();
-        assertThat(subject.getVideoRetries()).isEqualTo(1);
+        subject.onPause();
 
-        subject.onResume();
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
+        setVideoViewParams(1000, 10000);
 
-        file.delete();
+        subject.onResume();
+        verify(spyVideoView).seekTo(eq(7000));
     }
 
     @Test
-    public void onResume_shouldSeekToPrePausedPosition() throws Exception {
+    public void onResume_multipleTimes_shouldFirePauseResumeTrackersMultipleTimes() throws Exception {
         initializeSubject();
         spyOnVideoView();
-        setVideoViewParams(7000, 10000);
 
+        setVideoViewParams(7000, 10000);
         subject.onPause();
 
         setVideoViewParams(1000, 10000);
+        subject.onResume();
+
+        verify(mockRequestQueue).add(argThat(isUrl
+                ("pause?errorcode=&asseturi=video_url&contentplayhead=00:00:07.000")));
+        verify(mockRequestQueue).add(
+                argThat(isUrl("resume?errorcode=&asseturi=video_url&contentplayhead=00:00:07.000")));
 
+        subject.onPause();
         subject.onResume();
-        verify(spyVideoView).seekTo(eq(7000));
+
+        verify(mockRequestQueue).add(
+                argThat(isUrl("pause?errorcode=&asseturi=video_url&contentplayhead=00:00:07.000")));
+        verify(mockRequestQueue).add(
+                argThat(isUrl("resume?errorcode=&asseturi=video_url&contentplayhead=00:00:07.000")));
+    }
+
+    @Test
+    public void onConfigurationChanged_withPortraitCompanionAdVisible_withDeviceLandscape_shouldMakeLandscapeCompanionAdVisible() throws Exception {
+        initializeSubject();
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
+        subject.getPortraitCompanionAdView().setVisibility(View.VISIBLE);
+
+        subject.onConfigurationChanged(null);
+
+        assertThat(subject.getPortraitCompanionAdView().getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(subject.getLandscapeCompanionAdView().getVisibility()).isEqualTo(View.VISIBLE);
+        verify(mockRequestQueue).add(argThat(isUrl(COMPANION_CREATIVE_VIEW_URL_1)));
+        verify(mockRequestQueue).add(argThat(isUrl(COMPANION_CREATIVE_VIEW_URL_2)));
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void onConfigurationChanged_withLandscapeCompanionAdVisible_withDevicePortrait_shouldMakePortraitCompanionAdVisible() throws Exception {
+        initializeSubject();
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+        subject.getLandscapeCompanionAdView().setVisibility(View.VISIBLE);
+
+        subject.onConfigurationChanged(null);
+
+        assertThat(subject.getLandscapeCompanionAdView().getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(subject.getPortraitCompanionAdView().getVisibility()).isEqualTo(View.VISIBLE);
+        verify(mockRequestQueue).add(argThat(isUrl(COMPANION_CREATIVE_VIEW_URL_3)));
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void onConfigurationChanged_withPortraitCompanionAdVisible_withDevicePortrait_shouldKeepPortraitCompanionAdVisible() throws Exception {
+        initializeSubject();
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+        subject.getPortraitCompanionAdView().setVisibility(View.VISIBLE);
+
+        subject.onConfigurationChanged(null);
+
+        assertThat(subject.getPortraitCompanionAdView().getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.getLandscapeCompanionAdView().getVisibility()).isEqualTo(View.INVISIBLE);
+        verify(mockRequestQueue).add(argThat(isUrl(COMPANION_CREATIVE_VIEW_URL_3)));
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void onConfigurationChanged_withNoCompanionAdVisible_shouldDoNothing() throws Exception {
+        initializeSubject();
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
+
+        subject.onConfigurationChanged(null);
+
+        assertThat(subject.getPortraitCompanionAdView().getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(subject.getLandscapeCompanionAdView().getVisibility()).isEqualTo(View.INVISIBLE);
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void onConfigurationChanged_whenCalledMultipleTimes_shouldOnlyEverFireEachCreativeViewTrackerOnce() throws Exception {
+        initializeSubject();
+        subject.getPortraitCompanionAdView().setVisibility(View.VISIBLE);
+
+        for(int i = 0; i < 10; i++) {
+            context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
+            subject.onConfigurationChanged(null);
+            context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
+            subject.onConfigurationChanged(null);
+        }
+        verify(mockRequestQueue).add(argThat(isUrl(COMPANION_CREATIVE_VIEW_URL_1)));
+        verify(mockRequestQueue).add(argThat(isUrl(COMPANION_CREATIVE_VIEW_URL_2)));
+        verify(mockRequestQueue).add(argThat(isUrl(COMPANION_CREATIVE_VIEW_URL_3)));
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void onConfigurationChanged_withNoCompanionAd_shouldDoNothing() throws Exception {
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setNetworkMediaFileUrl("media_url");
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
+        initializeSubject();
+
+        subject.onConfigurationChanged(null);
+
+        verifyNoMoreInteractions(mockRequestQueue);
+        assertThat(subject.getLandscapeCompanionAdView().getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(subject.getLandscapeCompanionAdView().getWidth()).isEqualTo(0);
+        assertThat(subject.getLandscapeCompanionAdView().getHeight()).isEqualTo(0);
+        assertThat(subject.getPortraitCompanionAdView().getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(subject.getPortraitCompanionAdView().getWidth()).isEqualTo(0);
+        assertThat(subject.getPortraitCompanionAdView().getHeight()).isEqualTo(0);
     }
 
     @Test
@@ -1569,23 +2010,148 @@ public void backButtonEnabled_whenCloseButtonIsVisible_shouldReturnTrue() throws
     }
 
     @Test
-    public void onClickCloseButton_whenCloseButtonIsVisible_shouldFireCloseTrackers() throws Exception {
+    public void onClickCloseButtonImageView_whenCloseButtonIsVisible_shouldFireCloseTrackers() throws Exception {
         initializeSubject();
+        spyOnVideoView();
+        // Because it's almost never exactly 15 seconds
+        when(spyVideoView.getDuration()).thenReturn(15094);
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+        getShadowVideoView().getOnCompletionListener().onCompletion(null);
 
         subject.setCloseButtonVisible(true);
 
-        // We don't have direct access to the CloseButtonWidget's close event, so we manually
+        // We don't have direct access to the CloseButtonWidget icon's close event, so we manually
         // invoke its onTouchListener's onTouch callback with a fake MotionEvent.ACTION_UP action.
-        View.OnTouchListener closeButtonOnTouchListener =
-                shadowOf(getVastVideoToolbar().getCloseButtonWidget()).getOnTouchListener();
-        closeButtonOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
+        View.OnTouchListener closeButtonImageViewOnTouchListener =
+                shadowOf(subject.getCloseButtonWidget().getImageView()).getOnTouchListener();
+        closeButtonImageViewOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
 
-        verify(mockRequestQueue).add(argThat(isUrl("close")));
-        verify(mockRequestQueue).add(argThat(isUrl("skip")));
+        verify(mockRequestQueue).add(
+                argThat(isUrl("close?errorcode=&asseturi=video_url&contentplayhead=00:00:15.094")));
+        verify(mockRequestQueue).add(
+                argThat(isUrl("skip?errorcode=&asseturi=video_url&contentplayhead=00:00:15.094")));
+    }
+
+    @Test
+    public void onClickCloseButtonTextView_whenCloseButtonIsVisible_shouldFireCloseTrackers() throws Exception {
+        initializeSubject();
+        spyOnVideoView();
+        // Because it's almost never exactly 15 seconds
+        when(spyVideoView.getDuration()).thenReturn(15203);
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+        getShadowVideoView().getOnCompletionListener().onCompletion(null);
+
+        subject.setCloseButtonVisible(true);
+
+        // We don't have direct access to the CloseButtonWidget text's close event, so we manually
+        // invoke its onTouchListener's onTouch callback with a fake MotionEvent.ACTION_UP action.
+        View.OnTouchListener closeButtonTextViewOnTouchListener =
+                shadowOf(subject.getCloseButtonWidget().getTextView()).getOnTouchListener();
+        closeButtonTextViewOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
+
+        verify(mockRequestQueue).add(
+                argThat(isUrl("close?errorcode=&asseturi=video_url&contentplayhead=00:00:15.203")));
+        verify(mockRequestQueue).add(
+                argThat(isUrl("skip?errorcode=&asseturi=video_url&contentplayhead=00:00:15.203")));
+    }
+
+    @Test
+    public void createIconView_shouldLayoutAndReturnInvisibleVastIconView() throws Exception {
+        initializeSubject();
+
+        VastIconConfig vastIconConfig = mock(VastIconConfig.class);
+        when(vastIconConfig.getWidth()).thenReturn(40);
+        when(vastIconConfig.getHeight()).thenReturn(40);
+        VastResource vastResource = mock(VastResource.class);
+        when(vastResource.getType()).thenReturn(VastResource.Type.STATIC_RESOURCE);
+        when(vastResource.getResource()).thenReturn("static");
+        when(vastIconConfig.getVastResource()).thenReturn(vastResource);
+
+        VastWebView view = (VastWebView) subject.createIconView(context, vastIconConfig, View.INVISIBLE);
+
+        assertThat(view).isNotNull();
+        assertThat(view.getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(view.getVastWebViewClickListener()).isNotNull();
+        assertThat(subject.getLayout().findViewById(view.getId())).isEqualTo(view);
+    }
+
+    @Test
+    public void createIconView_withNullVastIcon_shouldReturnEmptyView() throws Exception {
+        initializeSubject();
+
+        assertThat(subject.createIconView(context, null, View.INVISIBLE)).isNotNull();
+    }
+
+    @Test
+    public void VastWebView_onVastWebViewClick_shouldCallVastIconHandleClick() throws Exception {
+        initializeSubject();
+
+        VastIconConfig vastIconConfig = mock(VastIconConfig.class);
+        when(vastIconConfig.getWidth()).thenReturn(40);
+        when(vastIconConfig.getHeight()).thenReturn(40);
+        VastResource vastResource = mock(VastResource.class);
+        when(vastResource.getType()).thenReturn(VastResource.Type.STATIC_RESOURCE);
+        when(vastResource.getResource()).thenReturn("static");
+        when(vastIconConfig.getVastResource()).thenReturn(vastResource);
+
+        VastWebView view = (VastWebView) subject.createIconView(context, vastIconConfig, View.INVISIBLE);
+
+        view.getVastWebViewClickListener().onVastWebViewClick();
+        verify(vastIconConfig).handleClick(any(Context.class), anyString());
+    }
+
+    @Test
+    public void handleIconDisplay_withCurrentPositionGreaterThanOffset_shouldSetIconToVisible_shouldCallHandleImpression() throws Exception {
+        initializeSubject();
+
+        when(mMockVastIconConfig.getOffsetMS()).thenReturn(0);
+        when(mMockVastIconConfig.getDurationMS()).thenReturn(1);
+
+        subject.handleIconDisplay(0);
+
+        assertThat(subject.getIconView().getVisibility()).isEqualTo(View.VISIBLE);
+        verify(mMockVastIconConfig).handleImpression(any(Context.class), eq(0), eq("video_url"));
+    }
+
+    @Test
+    public void handleIconDisplay_withCurrentPositionLessThanOffset_shouldReturn() throws Exception {
+        initializeSubject();
+
+        when(mMockVastIconConfig.getOffsetMS()).thenReturn(1);
+
+        subject.handleIconDisplay(0);
+
+        assertThat(subject.getIconView().getVisibility()).isEqualTo(View.INVISIBLE);
+        verify(mMockVastIconConfig, never()).handleImpression(any(Context.class), eq(0),
+                eq("video_url"));
+    }
+
+    @Test
+    public void handleIconDisplay_withCurrentPositionGreaterThanOffsetPlusDuration_shouldSetIconToGone() throws Exception {
+        initializeSubject();
+
+        when(mMockVastIconConfig.getOffsetMS()).thenReturn(0);
+        when(mMockVastIconConfig.getDurationMS()).thenReturn(1);
+
+        subject.handleIconDisplay(2);
+
+        assertThat(subject.getIconView().getVisibility()).isEqualTo(View.GONE);
+    }
+
+    @Test
+    public void makeInteractable_shouldHideCountdownWidgetAndShowCtaAndCloseButtonWidgets() throws Exception {
+        initializeSubject();
+
+        subject.makeVideoInteractable();
+
+        assertThat(subject.getRadialCountdownWidget().getVisibility()).isEqualTo(View.GONE);
+        assertThat(subject.getCloseButtonWidget().getVisibility()).isEqualTo(View.VISIBLE);
     }
 
     private void initializeSubject() throws IllegalAccessException {
-        subject = new VastVideoViewController(context, bundle, testBroadcastIdentifier, baseVideoViewControllerListener);
+        subject = new VastVideoViewController((Activity) context, bundle, savedInstanceState,
+                testBroadcastIdentifier, baseVideoViewControllerListener);
+        subject.getVastVideoView().setMediaMetadataRetriever(mockMediaMetadataRetriever);
         spyOnRunnables();
     }
 
@@ -1610,22 +2176,8 @@ private void setVideoViewParams(int currentPosition, int duration) throws Illega
         when(spyVideoView.getDuration()).thenReturn(duration);
     }
 
-    private VastVideoToolbar getVastVideoToolbar() {
-        final ViewGroup layout = subject.getLayout();
-
-        for (int i = 0; i < layout.getChildCount(); i++) {
-            final View child = layout.getChildAt(i);
-            if (child instanceof VastVideoToolbar) {
-                return (VastVideoToolbar) child;
-            }
-        }
-
-        fail("Unable to find VastVideoToolbar in view hierarchy.");
-        return null;
-    }
-
-    private ShadowVideoView getShadowVideoView() {
-        return shadowOf(subject.getVideoView());
+    private ShadowVastVideoView getShadowVideoView() {
+        return (ShadowVastVideoView) shadowOf_(subject.getVastVideoView());
     }
 
     public static void assertHttpRequestsMade(final String userAgent, final String... urls) {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewCountdownRunnableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewCountdownRunnableTest.java
index 41c78e61..7b17304c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewCountdownRunnableTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewCountdownRunnableTest.java
@@ -32,8 +32,8 @@ public void doWork_whenShouldBeInteractable_shouldCallMakeVideoInteractable() {
 
         subject.doWork();
 
+        verify(mockVideoViewController).updateCountdown();
         verify(mockVideoViewController).makeVideoInteractable();
-        verify(mockVideoViewController).updateDuration();
     }
 
     @Test
@@ -42,27 +42,7 @@ public void doWork_whenShouldNotBeInteractable_shouldNotCallMakeVideoInteractabl
 
         subject.doWork();
 
-        verify(mockVideoViewController, never()).makeVideoInteractable();
-        verify(mockVideoViewController).updateDuration();
-    }
-
-    @Test
-    public void doWork_whenShouldShowCountdown_shouldCallUpdateCountdown() {
-        when(mockVideoViewController.shouldShowCountdown()).thenReturn(true);
-
-        subject.doWork();
-
         verify(mockVideoViewController).updateCountdown();
-        verify(mockVideoViewController).updateDuration();
-    }
-
-    @Test
-    public void run_whenShouldNotShowCountdown_shouldNotCallUpdateCountdown() {
-        when(mockVideoViewController.shouldShowCountdown()).thenReturn(false);
-
-        subject.doWork();
-
-        verify(mockVideoViewController, never()).updateCountdown();
-        verify(mockVideoViewController).updateDuration();
+        verify(mockVideoViewController, never()).makeVideoInteractable();
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewProgressRunnableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewProgressRunnableTest.java
index b926db3c..1f5eabdb 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewProgressRunnableTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewProgressRunnableTest.java
@@ -31,12 +31,14 @@
     @Mock Context mockContext;
     @Mock Handler mockHandler;
     @Mock MoPubRequestQueue mockRequestQueue;
+    @Mock VastVideoConfig mockVideoConfig;
     @Captor ArgumentCaptor<TrackingRequest> requestCaptor;
     VastVideoViewProgressRunnable subject;
 
     @Before
     public void setup() {
-        subject = new VastVideoViewProgressRunnable(mockVastVideoViewController, mockHandler);
+        subject = new VastVideoViewProgressRunnable(mockVastVideoViewController, mockVideoConfig,
+                mockHandler);
 
         // Request Queue needed to verify tracking requests made.
         Networking.setRequestQueueForTesting(mockRequestQueue);
@@ -48,7 +50,7 @@ public void doWork_whenTrackersReturned_shouldMakeTrackingRequests() {
         testTrackers.add(new VastAbsoluteProgressTracker("http://example.com/", 1999));
         testTrackers.add(new VastAbsoluteProgressTracker("http://example1.com/", 2000));
 
-        when(mockVastVideoViewController.getUntriggeredTrackersBefore(eq(3000), eq(4000)))
+        when(mockVideoConfig.getUntriggeredTrackersBefore(eq(3000), eq(4000)))
                 .thenReturn(testTrackers);
         when(mockVastVideoViewController.getCurrentPosition()).thenReturn(3000);
         when(mockVastVideoViewController.getDuration()).thenReturn(4000);
@@ -56,10 +58,13 @@ public void doWork_whenTrackersReturned_shouldMakeTrackingRequests() {
 
         subject.doWork();
 
-        verify(mockVastVideoViewController).getUntriggeredTrackersBefore(eq(3000), eq(4000));
+        verify(mockVideoConfig).getUntriggeredTrackersBefore(eq(3000), eq(4000));
         verify(mockVastVideoViewController).getCurrentPosition();
         verify(mockVastVideoViewController).getDuration();
         verify(mockVastVideoViewController).getContext();
+        verify(mockVastVideoViewController).getNetworkMediaFileUrl();
+        verify(mockVastVideoViewController).handleIconDisplay(eq(3000));
+        verify(mockVastVideoViewController).updateProgressBar();
 
         // Capture request queue - should get two different trackers.
         verify(mockRequestQueue, times(2)).add(requestCaptor.capture());
@@ -75,7 +80,7 @@ public void doWork_whenTrackersReturned_shouldMakeTrackingRequests() {
     public void doWork_whenNoTrackersReturned_shouldNotMakeTrackingRequests() {
         List<VastTracker> testTrackers = new ArrayList<VastTracker>();
 
-        when(mockVastVideoViewController.getUntriggeredTrackersBefore(eq(3000), eq(4000)))
+        when(mockVideoConfig.getUntriggeredTrackersBefore(eq(3000), eq(4000)))
                 .thenReturn(testTrackers);
         when(mockVastVideoViewController.getCurrentPosition()).thenReturn(3000);
         when(mockVastVideoViewController.getDuration()).thenReturn(4000);
@@ -83,9 +88,11 @@ public void doWork_whenNoTrackersReturned_shouldNotMakeTrackingRequests() {
 
         subject.doWork();
 
-        verify(mockVastVideoViewController).getUntriggeredTrackersBefore(eq(3000), eq(4000));
+        verify(mockVideoConfig).getUntriggeredTrackersBefore(eq(3000), eq(4000));
         verify(mockVastVideoViewController).getCurrentPosition();
         verify(mockVastVideoViewController).getDuration();
+        verify(mockVastVideoViewController).handleIconDisplay(eq(3000));
+        verify(mockVastVideoViewController).updateProgressBar();
 
         verifyNoMoreInteractions(mockVastVideoViewController, mockRequestQueue);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java
new file mode 100644
index 00000000..064b8b78
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java
@@ -0,0 +1,194 @@
+package com.mopub.mobileads;
+
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.media.MediaMetadataRetriever;
+import android.media.MediaPlayer;
+import android.os.AsyncTask;
+import android.os.Build;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.io.File;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.anyBoolean;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.anyLong;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+public class VastVideoViewTest {
+
+    @Mock private MediaMetadataRetriever mockMediaMetadataRetriever;
+    @Mock private Bitmap mockBitmap;
+
+    private Context context;
+    private VastVideoView subject;
+
+    @TargetApi(Build.VERSION_CODES.GINGERBREAD_MR1)
+    @Before
+    public void setUp() throws Exception {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        subject = new VastVideoView(context);
+        subject.setMediaMetadataRetriever(mockMediaMetadataRetriever);
+        when(mockMediaMetadataRetriever.getFrameAtTime(anyLong(), anyInt())).thenReturn(
+                mockBitmap);
+    }
+
+    @Test
+    public void onDestroy_withBlurLastVideoFrameTaskStillRunning_shouldCancelTask() throws Exception {
+        VastVideoBlurLastVideoFrameTask mockBlurLastVideoFrameTask = mock(
+                VastVideoBlurLastVideoFrameTask.class);
+        when(mockBlurLastVideoFrameTask.getStatus()).thenReturn(AsyncTask.Status.RUNNING);
+        subject.setBlurLastVideoFrameTask(mockBlurLastVideoFrameTask);
+
+        subject.onDestroy();
+
+        verify(mockBlurLastVideoFrameTask).cancel(true);
+    }
+
+    @Test
+    public void onDestroy_withBlurLastVideoFrameTaskStillPending_shouldCancelTask() throws Exception {
+        VastVideoBlurLastVideoFrameTask mockBlurLastVideoFrameTask = mock(
+                VastVideoBlurLastVideoFrameTask.class);
+        when(mockBlurLastVideoFrameTask.getStatus()).thenReturn(AsyncTask.Status.PENDING);
+        subject.setBlurLastVideoFrameTask(mockBlurLastVideoFrameTask);
+
+        subject.onDestroy();
+
+        verify(mockBlurLastVideoFrameTask).cancel(true);
+    }
+
+    @Test
+    public void onDestroy_withBlurLastVideoFrameTaskFinished_shouldNotCancelTask() throws Exception {
+        VastVideoBlurLastVideoFrameTask mockBlurLastVideoFrameTask = mock(
+                VastVideoBlurLastVideoFrameTask.class);
+        when(mockBlurLastVideoFrameTask.getStatus()).thenReturn(AsyncTask.Status.FINISHED);
+        subject.setBlurLastVideoFrameTask(mockBlurLastVideoFrameTask);
+
+        subject.onDestroy();
+
+        verify(mockBlurLastVideoFrameTask, never()).cancel(anyBoolean());
+    }
+
+
+    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
+    @Test
+    public void retryMediaPlayer_withVideoFilePermissionErrorAndBelowJellyBean_shouldReturnTrue() throws Exception {
+        File file = new File("disk_video_path");
+        file.createNewFile();
+
+        assertThat(subject.getVideoRetries()).isEqualTo(0);
+        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1,
+                Integer.MIN_VALUE, "disk_video_path")).isTrue();
+        assertThat(subject.getVideoRetries()).isEqualTo(1);
+
+        file.delete();
+    }
+
+    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
+    @Test
+    public void retryMediaPlayer_shouldNotRunMoreThanOnce() throws Exception {
+        File file = new File("disk_video_path");
+        file.createNewFile();
+
+        assertThat(subject.getVideoRetries()).isEqualTo(0);
+        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1,
+                Integer.MIN_VALUE, "disk_video_path")).isTrue();
+        assertThat(subject.getVideoRetries()).isEqualTo(1);
+
+        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1,
+                Integer.MIN_VALUE, "disk_video_path")).isFalse();
+        assertThat(subject.getVideoRetries()).isEqualTo(1);
+
+        file.delete();
+    }
+
+    @Config(reportSdk = Build.VERSION_CODES.JELLY_BEAN)
+    @Test
+    public void retryMediaPlayer_withAndroidVersionAboveJellyBean_shouldReturnFalse() throws Exception {
+        File file = new File("disk_video_path");
+        file.createNewFile();
+
+        assertThat(subject.getVideoRetries()).isEqualTo(0);
+        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE,
+                "disk_video_path")).isFalse();
+        assertThat(subject.getVideoRetries()).isEqualTo(0);
+
+        file.delete();
+    }
+
+    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Test
+    public void retryMediaPlayer_withOtherVideoError_shouldReturnFalse() throws Exception {
+        File file = new File("disk_video_path");
+        file.createNewFile();
+
+        assertThat(subject.getVideoRetries()).isEqualTo(0);
+        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 2, Integer.MIN_VALUE,
+                "disk_video_path")).isFalse();
+        assertThat(subject.getVideoRetries()).isEqualTo(0);
+
+        file.delete();
+    }
+
+    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Test
+    public void retryMediaPlayer_withExceptionThrown_shouldReturnFalseAndIncrementRetryCount() throws Exception {
+        File file = new File("disk_video_path");
+        if (file.exists()) {
+            assertThat(file.delete()).isTrue();
+        }
+
+        assertThat(subject.getVideoRetries()).isEqualTo(0);
+        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE,
+                "disk_video_path")).isFalse();
+        assertThat(subject.getVideoRetries()).isEqualTo(1);
+    }
+
+    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
+    @Test
+    public void onResume_shouldResetVideoRetryCountToZero() throws Exception {
+        File file = new File("disk_video_path");
+        file.createNewFile();
+
+        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE,
+                "disk_video_path")).isTrue();
+        assertThat(subject.getVideoRetries()).isEqualTo(1);
+
+        subject.onResume();
+        assertThat(subject.getVideoRetries()).isEqualTo(0);
+
+        file.delete();
+    }
+
+    @Config(reportSdk = Build.VERSION_CODES.GINGERBREAD)
+    @Test
+    public void createMediaMetadataRetriever_beforeGingerbreadMr1_shouldReturnNull() throws Exception {
+        MediaMetadataRetriever mediaMetadataRetriever = subject.createMediaMetadataRetriever();
+
+        assertThat(mediaMetadataRetriever).isNull();
+    }
+
+    @Config(reportSdk = Build.VERSION_CODES.GINGERBREAD_MR1)
+    @Test
+    public void createMediaMetadataRetriever_atLeastGingerbreadMr1_shouldReturnNewMediaMetadataRetriever() throws Exception {
+        MediaMetadataRetriever mediaMetadataRetriever = subject.createMediaMetadataRetriever();
+
+        assertThat(mediaMetadataRetriever).isNotNull();
+        assertThat(mediaMetadataRetriever).isInstanceOf(MediaMetadataRetriever.class);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java
new file mode 100644
index 00000000..3ee435f1
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java
@@ -0,0 +1,120 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.os.Build;
+import android.view.View;
+import android.webkit.WebSettings;
+import android.webkit.WebView;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.GestureUtils;
+import com.mopub.mobileads.test.support.VastUtils;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowWebView;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.verify;
+import static org.robolectric.Robolectric.shadowOf;
+
+@RunWith(SdkTestRunner.class)
+public class VastWebViewTest {
+
+    private VastWebView subject;
+    private Context context;
+    @Mock VastWebView.VastWebViewClickListener mockVastWebViewClickListener;
+    @Mock private VastResource mockResource;
+
+    @Before
+    public void setup() {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        subject = new VastWebView(context);
+        subject.setVastWebViewClickListener(mockVastWebViewClickListener);
+    }
+
+    @Test
+    public void constructor_shouldSetOnTouchListener() throws Exception {
+        assertThat(Robolectric.shadowOf(subject).getOnTouchListener())
+                .isInstanceOf(VastWebView.VastWebViewOnTouchListener.class);
+    }
+
+    @Config(reportSdk = Build.VERSION_CODES.JELLY_BEAN_MR2)
+    @Test
+    public void pluginState_atLeastJellybeanMr2_shouldDefaultToOff_shouldNeverBeEnabled()  {
+        subject = new VastWebView(Robolectric.buildActivity(Activity.class).create().get());
+        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.OFF);
+
+        subject.enablePlugins(true);
+        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.OFF);
+    }
+
+    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Test
+    public void pluginState_atLeastIcsButBelowJellybeanMr2_shouldDefaultToOn_shouldAllowToggling() {
+        subject = new VastWebView(Robolectric.buildActivity(Activity.class).create().get());
+        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.ON);
+
+        subject.enablePlugins(false);
+        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.OFF);
+
+        subject.enablePlugins(true);
+        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.ON);
+    }
+
+    @Config(reportSdk = Build.VERSION_CODES.GINGERBREAD_MR1)
+    @Test
+    public void pluginState_beforeIcs_shouldDefaultToOff_shouldAllowToggling() {
+        subject = new VastWebView(Robolectric.buildActivity(Activity.class).create().get());
+        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.OFF);
+
+        subject.enablePlugins(true);
+        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.ON);
+
+        subject.enablePlugins(false);
+        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.OFF);
+    }
+
+    @Test
+    public void loadData_shouldCallLoadDataWithBaseURL() throws Exception {
+        String data = "some random html response";
+        subject.loadData(data);
+
+        ShadowWebView.LoadDataWithBaseURL lastLoadData
+                = shadowOf(subject).getLastLoadDataWithBaseURL();
+        assertThat(lastLoadData.baseUrl).isEqualTo("http://ads.mopub.com/");
+        assertThat(lastLoadData.data).isEqualTo(data);
+        assertThat(lastLoadData.mimeType).isEqualTo("text/html");
+        assertThat(lastLoadData.encoding).isEqualTo("utf-8");
+        assertThat(lastLoadData.historyUrl).isNull();
+    }
+
+    @Test
+    public void VastWebViewOnTouchListener_withActionDown_withActionUp_shouldCallOnVastWebViewClick() throws Exception {
+        View.OnTouchListener onTouchListener = shadowOf(subject).getOnTouchListener();
+        onTouchListener.onTouch(subject, GestureUtils.createActionDown(0, 0));
+        onTouchListener.onTouch(subject, GestureUtils.createActionUp(0, 0));
+
+        verify(mockVastWebViewClickListener).onVastWebViewClick();
+    }
+
+    @Test
+    public void createView_shouldInitializeAndReturnView() throws Exception {
+        VastIconConfig vastIconConfig = new VastIconConfig(123, 456, 789, 101,
+                mockResource,
+                VastUtils.stringsToVastTrackers("clickTrackerOne", "clickTrackerTwo"),
+                "clickThroughUri",
+                VastUtils.stringsToVastTrackers("viewTrackerOne", "viewTrackerTwo")
+        );
+
+        WebView webView = subject.createView(context, vastIconConfig.getVastResource());
+        assertThat(webView).isNotNull();
+        verify(mockResource).initializeWebView(any(VastWebView.class));
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastWrapperXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWrapperXmlManagerTest.java
new file mode 100644
index 00000000..2d8d1aa4
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWrapperXmlManagerTest.java
@@ -0,0 +1,45 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.w3c.dom.Node;
+
+import static com.mopub.mobileads.test.support.VastUtils.createNode;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class VastWrapperXmlManagerTest {
+
+    private VastWrapperXmlManager subject;
+
+    @Test
+    public void getVastAdTagURI_shouldReturnStringURI() throws Exception {
+        String wrapperXml = "<Wrapper>" +
+                "    <Impression id=\"DART\">" +
+                "        <![CDATA[http://impression/m/wrapperOne]]>" +
+                "    </Impression>" +
+                "    <VASTAdTagURI>http://redirecturl/xml</VASTAdTagURI>" +
+                "</Wrapper>";
+
+        Node wrapperNode = createNode(wrapperXml);
+        subject = new VastWrapperXmlManager(wrapperNode);
+
+        assertThat(subject.getVastAdTagURI()).isEqualTo("http://redirecturl/xml");
+    }
+
+    @Test
+    public void getVastAdTagURI_withNoVastAdTagURI_shouldReturnNull() throws Exception {
+        String wrapperXml = "<Wrapper>" +
+                "    <Impression id=\"DART\">" +
+                "        <![CDATA[http://impression/m/wrapperOne]]>" +
+                "    </Impression>" +
+                "</Wrapper>";
+
+        Node wrapperNode = createNode(wrapperXml);
+        subject = new VastWrapperXmlManager(wrapperNode);
+
+        assertThat(subject.getVastAdTagURI()).isNull();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
new file mode 100644
index 00000000..e74a94cc
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
@@ -0,0 +1,1343 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.res.Configuration;
+import android.graphics.Point;
+import android.view.Display;
+import android.view.WindowManager;
+
+import com.mopub.common.HttpClient;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.VastUtils;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.Networking;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+import org.robolectric.Robolectric;
+import org.robolectric.tester.org.apache.http.FakeHttpLayer;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.concurrent.Semaphore;
+
+import static com.mopub.common.VolleyRequestMatcher.isUrl;
+import static com.mopub.mobileads.VastXmlManagerAggregator.VastXmlManagerAggregatorListener;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.argThat;
+import static org.mockito.Mockito.doAnswer;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+public class VastXmlManagerAggregatorTest {
+    static final String TEST_VAST_XML_STRING = "<VAST version='2.0'>" +
+            "    <Ad id='empty'>" +
+            "        <InLine>" +
+            "            <Impression><![CDATA[http:emptyimpression]]></Impression>" +
+            "            <Creatives>" +
+            "                <Creative>" +
+            "                    <Linear>" +
+            "                        <MediaFiles>" +
+            "                        </MediaFiles>" +
+            "                    </Linear>" +
+            "                </Creative>" +
+            "            </Creatives>" +
+            "            <Error><![CDATA[http://neverCallThisError]]></Error>" +
+            "        </InLine>" +
+            "    </Ad>" +
+            "    <Ad id='62833' sequence='1'>" +
+            "        <Wrapper>" +
+            "            <AdSystem>Tapad</AdSystem>" +
+            "            <VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml</VASTAdTagURI>" +
+            "            <Impression>http://myTrackingURL/wrapper/impression1</Impression>" +
+            "            <Impression>http://myTrackingURL/wrapper/impression2</Impression>" +
+            "            <Creatives>" +
+            "                <Creative AdID='62833'>" +
+            "                    <Linear>" +
+            "                        <TrackingEvents>" +
+            "                            <Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking>" +
+            "                            <Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking>" +
+            "                            <Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking>" +
+            "                            <Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking>" +
+            "                            <Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking>" +
+            "                            <Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking>" +
+            "                            <Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking>" +
+            "                            <Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking>" +
+            "                            <Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking>" +
+            "                            <Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking>" +
+            "                            <Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking>" +
+            "                        </TrackingEvents>" +
+            "                        <VideoClicks>" +
+            "                            <ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking>" +
+            "                        </VideoClicks>" +
+            "                        <MediaFiles>" +
+            "                            <MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'>" +
+            "                                <![CDATA[http://videosInWrappersShouldNeverBePlayed]]>" +
+            "                            </MediaFile>" +
+            "                        </MediaFiles>" +
+            "                    </Linear>" +
+            "                </Creative>" +
+            "                <Creative AdID=\"601364-Companion\">" +
+            "                    <CompanionAds>" +
+            "                        <Companion id=\"wrappercompanion\" height=\"250\" width=\"456\">" +
+            "                            <StaticResource creativeType=\"image/jpeg\">" +
+            "                                http://wrapperCompanionAdStaticResource" +
+            "                            </StaticResource>" +
+            "                            <TrackingEvents>" +
+            "                                <Tracking event=\"creativeView\">http://firstWrapperCompanionCreativeView</Tracking>" +
+            "                                <Tracking event=\"creativeView\">http://secondWrapperCompanionCreativeView</Tracking>" +
+            "                            </TrackingEvents>" +
+            "                            <CompanionClickThrough>http://wrapperCompanionClickThrough</CompanionClickThrough>" +
+            "                            <CompanionClickTracking><![CDATA[http://wrapperCompanionClickTracking]]></CompanionClickTracking>" +
+            "                        </Companion> " +
+            "                        <Companion id=\"noresource\" height=\"250\" width=\"456\">" +
+            "                            <TrackingEvents>" +
+            "                                <Tracking event=\"creativeView\">http://firstNoResourceWrapperCompanionCreativeView</Tracking>" +
+            "                                <Tracking event=\"creativeView\">http://secondNoResourceWrapperCompanionCreativeView</Tracking>" +
+            "                            </TrackingEvents>" +
+            "                            <CompanionClickThrough>http://noResourceWrapperCompanionClickThrough</CompanionClickThrough>" +
+            "                            <CompanionClickTracking><![CDATA[http://noResourceWrapperCompanionClickTracking1]]></CompanionClickTracking>" +
+            "                        </Companion> " +
+            "                    </CompanionAds>" +
+            "                </Creative>" +
+            "            </Creatives>" +
+            "            <Error><![CDATA[http://wrapperErrorOne?errorcode=[ERRORCODE]]]></Error>" +
+            "            <Error><![CDATA[http://wrapperErrorTwo?errorcode=[ERRORCODE]]]></Error>" +
+            "        </Wrapper>" +
+            "    </Ad>" +
+            "</VAST>" +
+            "<MP_TRACKING_URLS>" +
+            "    <MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL>" +
+            "    <MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL>" +
+            "</MP_TRACKING_URLS>";
+
+    static final String TEST_NESTED_VAST_XML_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
+            "<VAST version='2.0'>" +
+            "    <Ad id='57722'>" +
+            "        <InLine>" +
+            "            <AdSystem version='1.0'>Tapad</AdSystem>" +
+            "            <AdTitle><![CDATA[PKW6T_LIV_DSN_Audience_TAPAD_3rd Party Audience Targeting_Action Movi]]></AdTitle>" +
+            "            <Description/>" +
+            "            <Impression><![CDATA[http://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression>" +
+            "            <Creatives>" +
+            "                <Creative sequence='1' id='57722'>" +
+            "                    <Linear>" +
+            "                       <Icons>" +
+            "                           <Icon program=\"program\" width=\"123\" height=\"234\" xPosition=\"789\" " +
+            "                           yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+            "                           duration=\"01:02:03.456\">" +
+            "                               <StaticResource creativeType=\"ImAge/JpEg\">" +
+            "                                   <![CDATA[imageJpeg]]>" +
+            "                               </StaticResource>" +
+            "                               <IconClicks>" +
+            "                                   <IconClickThrough>" +
+            "                                       <![CDATA[clickThroughUri]]>" +
+            "                                   </IconClickThrough>" +
+            "                                   <IconClickTracking>" +
+            "                                       <![CDATA[clickTrackingUri1]]>" +
+            "                                   </IconClickTracking>" +
+            "                                   <IconClickTracking>" +
+            "                                       <![CDATA[clickTrackingUri2]]>" +
+            "                                   </IconClickTracking>" +
+            "                               </IconClicks>" +
+            "                               <IconViewTracking>" +
+            "                                   <![CDATA[viewTrackingUri1]]>" +
+            "                               </IconViewTracking>" +
+            "                               <IconViewTracking>" +
+            "                                   <![CDATA[viewTrackingUri2]]>" +
+            "                               </IconViewTracking>" +
+            "                            </Icon>" +
+            "                        </Icons>" +
+            "                        <Duration>00:00:15</Duration>" +
+            "                        <VideoClicks>" +
+            "                            <ClickThrough><![CDATA[http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com]]></ClickThrough>" +
+            "                        </VideoClicks>" +
+            "                        <MediaFiles>" +
+            "                            <MediaFile delivery='progressive' bitrate='416' width='800' height='480' type='video/mp4'>" +
+            "                                <![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video.mp4]]>" +
+            "                            </MediaFile>" +
+            "                        </MediaFiles>" +
+            "                    </Linear>" +
+            "                </Creative>" +
+            "                <Creative AdID=\"601364-Companion\">" +
+            "                    <CompanionAds>" +
+            "                        <Companion id=\"valid\" height=\"250\" width=\"300\">" +
+            "                            <StaticResource creativeType=\"image/jpeg\">" +
+            "                                http://demo.tremormedia.com/proddev/vast/Blistex1.jpg" +
+            "                            </StaticResource>" +
+            "                            <TrackingEvents>" +
+            "                                <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                                <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
+            "                            </TrackingEvents>" +
+            "                            <CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough>" +
+            "                            <CompanionClickTracking><![CDATA[http://companionClickTracking1]]></CompanionClickTracking>" +
+            "                            <CompanionClickTracking><![CDATA[http://companionClickTracking2]]></CompanionClickTracking>" +
+            "                        </Companion>" +
+            "                    </CompanionAds>" +
+            "                </Creative>" +
+            "            </Creatives>" +
+            "            <Error><![CDATA[http://nestedInLineErrorOne]]></Error>" +
+            "            <Error><![CDATA[http://nestedInLineErrorTwo]]></Error>" +
+            "        </InLine>" +
+            "    </Ad>" +
+            "</VAST>";
+
+    static final String TEST_NESTED_NO_COMPANION_VAST_XML_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
+            "<VAST version='2.0'>" +
+            "    <Ad id='57722'>" +
+            "        <InLine>" +
+            "            <AdSystem version='1.0'>Tapad</AdSystem>" +
+            "            <AdTitle><![CDATA[PKW6T_LIV_DSN_Audience_TAPAD_3rd Party Audience Targeting_Action Movi]]></AdTitle>" +
+            "            <Description/>" +
+            "            <Impression><![CDATA[http://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression>" +
+            "            <Creatives>" +
+            "                <Creative sequence='1' id='57722'>" +
+            "                    <Linear>" +
+            "                        <Duration>00:00:15</Duration>" +
+            "                        <VideoClicks>" +
+            "                            <ClickThrough><![CDATA[http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com]]></ClickThrough>" +
+            "                        </VideoClicks>" +
+            "                        <MediaFiles>" +
+            "                            <MediaFile delivery='progressive' bitrate='416' width='800' height='480' type='video/mp4'>" +
+            "                                <![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video.mp4]]>" +
+            "                            </MediaFile>" +
+            "                        </MediaFiles>" +
+            "                    </Linear>" +
+            "                </Creative>" +
+            "            </Creatives>" +
+            "        </InLine>" +
+            "    </Ad>" +
+            "</VAST>";
+
+    static final String TEST_VAST_BAD_NEST_URL_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml\"$|||</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative></Creatives><Error>![CDATA[http://badNestedError]]</Error]</Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
+
+    static final String TEST_JUST_ERROR_XML_STRING = "<VAST version='3.0'>" +
+            "<Error><![CDATA[http://justErrorTracking?errorcode=[ERRORCODE]]]></Error>" +
+            "</VAST>";
+
+    static final String TEST_INVALID_VAST_XML_STRING = "<VAST version='fail'>" +
+            "This is not vast." +
+            "</VAST>";
+
+    static final String TEST_INVALID_XML_STRING = "this is not xml at all<<<";
+
+    static final String TEST_VAST_WITH_NEGATIVE_SEQUENCE_NUMBER_XML_STRING = "<VAST version='3.0'>" +
+            "    <Ad id='sequenceTooHigh' sequence='42'>" +
+            "        <InLine>" +
+            "            <Impression><![CDATA[http:sequenceTooHighImp]]></Impression>" +
+            "            <Creatives>" +
+            "                <Creative>" +
+            "                    <Linear>" +
+            "                        <MediaFiles>" +
+            "                            <MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'>" +
+            "                                <![CDATA[http://sequenceTooHighVideo]]>" +
+            "                            </MediaFile>" +
+            "                        </MediaFiles>" +
+            "                    </Linear>" +
+            "                </Creative>" +
+            "            </Creatives>" +
+            "        </InLine>" +
+            "    </Ad>" +
+            "    <Ad id='negativeSequence' sequence='-2'>" +
+            "        <InLine>" +
+            "            <Impression><![CDATA[http://negativeSequence]]></Impression>" +
+            "            <Creatives>" +
+            "                <Creative>" +
+            "                    <Linear>" +
+            "                        <MediaFiles>" +
+            "                            <MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'>" +
+            "                                <![CDATA[http://negativeSequence]]>" +
+            "                            </MediaFile>" +
+            "                        </MediaFiles>" +
+            "                    </Linear>" +
+            "                </Creative>" +
+            "            </Creatives>" +
+            "        </InLine>" +
+            "    </Ad>" +
+            "</VAST>";
+
+    private Activity context;
+    private FakeHttpLayer mFakeHttpLayer;
+    private Semaphore semaphore;
+    private VastXmlManagerAggregatorListener vastXmlManagerAggregatorListener;
+    private VastXmlManagerAggregator subject;
+    private VastVideoConfig mVastVideoConfig;
+
+    @Mock
+    MoPubRequestQueue mockRequestQueue;
+
+    @Before
+    public void setup() {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        mFakeHttpLayer = Robolectric.getFakeHttpLayer();
+
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+
+        semaphore = new Semaphore(0);
+        vastXmlManagerAggregatorListener = mock(VastXmlManagerAggregatorListener.class);
+        doAnswer(new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
+                Object[] args = invocationOnMock.getArguments();
+                VastXmlManagerAggregatorTest.this.mVastVideoConfig = (VastVideoConfig) args[0];
+                semaphore.release();
+                return null;
+            }
+        }).when(vastXmlManagerAggregatorListener).onAggregationComplete(any(VastVideoConfig.class));
+
+        // Always assume landscape (where width > height) since videos will always be played in this orientation
+        int screenWidth = 800;
+        int screenHeight = 480;
+        double screenAspectRatio = (double) screenWidth / screenHeight;
+        int screenArea = screenWidth * screenHeight;
+        subject = new VastXmlManagerAggregator(vastXmlManagerAggregatorListener, screenAspectRatio,
+                screenArea, context);
+    }
+
+    // NOTE most of the functionality of this class is tested through VastManagerTest
+    // through integration tests
+
+    @Test
+    public void doInBackground_shouldNotFollowRedirectsOnceTheLimitHasBeenReached() throws Exception {
+        for(int i = 0; i < VastXmlManagerAggregator.MAX_TIMES_TO_FOLLOW_VAST_REDIRECT; i++) {
+            mFakeHttpLayer.addPendingHttpResponse(200, TEST_VAST_XML_STRING);
+        }
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+
+        subject.execute(TEST_VAST_XML_STRING);
+        semaphore.acquire();
+
+        assertThat(mVastVideoConfig).isNull();
+    }
+
+    @Test
+    public void doInBackground_shouldFollowMaxRedirectsMinusOne() throws Exception {
+        for(int i = 0; i < VastXmlManagerAggregator.MAX_TIMES_TO_FOLLOW_VAST_REDIRECT - 1; i++) {
+            mFakeHttpLayer.addPendingHttpResponse(200, TEST_VAST_XML_STRING);
+        }
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+
+        subject.execute(TEST_VAST_XML_STRING);
+        semaphore.acquire();
+
+        assertThat(mVastVideoConfig.getNetworkMediaFileUrl()).isEqualTo("https://s3" +
+                ".amazonaws.com/mopub-vast/tapad-video.mp4");
+        assertThat(mVastVideoConfig.getClickThroughUrl()).isEqualTo("http://rtb-test.dev" +
+                ".tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMj" +
+                "AwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTN" +
+                "BMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxh" +
+                "JTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLa" +
+                "XQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMT" +
+                "E2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzM" +
+                "wMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlk" +
+                "PUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3" +
+                "D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad." +
+                "com");
+        assertThat(mVastVideoConfig.getImpressionTrackers().size()).isEqualTo(4 *
+                VastXmlManagerAggregator.MAX_TIMES_TO_FOLLOW_VAST_REDIRECT + 1);
+        assertThat(mVastVideoConfig.getFractionalTrackers().size()).isEqualTo(3 *
+                VastXmlManagerAggregator.MAX_TIMES_TO_FOLLOW_VAST_REDIRECT);
+    }
+
+    @Test
+    public void getBestMediaFileUrl_shouldReturnMediaFileUrl() throws Exception {
+        final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, "video/mp4", "video_url");
+
+        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
+        assertThat(bestMediaFileUrl).isEqualTo("video_url");
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withNullMediaType_shouldReturnNull() throws Exception {
+        final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, null, "video_url");
+
+        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
+        assertThat(bestMediaFileUrl).isNull();
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withIncompatibleMediaType_shouldReturnNull() throws Exception {
+        final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, "video/rubbish", "video_url");
+
+        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
+        assertThat(bestMediaFileUrl).isNull();
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withNullMediaUrl_shouldReturnNull() throws Exception {
+        final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, "video/mp4", null);
+
+        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
+        assertThat(bestMediaFileUrl).isNull();
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withNullDimension_shouldReturnNull() throws Exception {
+        final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(null, 250, "video/mp4", "video_url");
+
+        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
+        assertThat(bestMediaFileUrl).isNull();
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withZeroDimension_shouldReturnNull() throws Exception {
+        final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(0, 250,
+                "video/mp4", "video_url");
+
+        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
+        assertThat(bestMediaFileUrl).isNull();
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withNegativeDimension_shouldReturnNull() throws Exception {
+        final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(-1, 250, "video/mp4", "video_url");
+
+        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
+        assertThat(bestMediaFileUrl).isNull();
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withSameAspectRatios_shouldReturnUrlWithAreaCloserToScreenArea1() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Triple screen size
+        final VastMediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(2400, 1440, "video/mp4", "video_url1");
+        // Double screen size
+        final VastMediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(1600, 960, "video/mp4", "video_url2");
+
+        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
+        assertThat(bestMediaFileUrl).isEqualTo("video_url2");
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withSameAspectRatios_shouldReturnUrlWithAreaCloserToScreenArea2() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Triple screen size
+        final VastMediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(2400, 1440, "video/mp4", "video_url1");
+        // Half screen size
+        final VastMediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(400, 240,
+                "video/mp4", "video_url2");
+
+        String bestMediaFileUrl = subject.getBestMediaFileUrl(
+                Arrays.asList(mediaXmlManager1, mediaXmlManager2));
+        assertThat(bestMediaFileUrl).isEqualTo("video_url2");
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withSameArea_shouldReturnUrlWithAspectRatioCloserToScreenAspectRatio() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Landscape
+        final VastMediaXmlManager mediaXmlManager1 =
+                initializeMediaXmlManagerMock(400, 240, "video/mp4", "video_url1");
+        // Portrait
+        final VastMediaXmlManager mediaXmlManager2 =
+                initializeMediaXmlManagerMock(240, 400, "video/mp4", "video_url2");
+
+        String bestMediaFileUrl = subject.getBestMediaFileUrl(
+                Arrays.asList(mediaXmlManager1, mediaXmlManager2));
+        assertThat(bestMediaFileUrl).isEqualTo("video_url1");
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withInvalidMediaTypeAndNullDimension_shouldReturnNull() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Invalid media type
+        final VastMediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(800, 480, "video/invalid", "video_url1");
+        // Null dimension
+        final VastMediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(null, null,
+                "video/mp4", "video_url2");
+
+        String bestMediaFileUrl = subject.getBestMediaFileUrl(
+                Arrays.asList(mediaXmlManager1, mediaXmlManager2));
+        assertThat(bestMediaFileUrl).isNull();
+    }
+
+    @Test
+    public void getBestMediaFileUrl_withInvalidMediaTypeAndNullMediaType_shouldReturnNull() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        final VastMediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(800, 480, "video/invalid", "video_url1");
+        final VastMediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(800,
+                480, null, "video_url2");
+
+        String bestMediaFileUrl = subject.getBestMediaFileUrl(
+                Arrays.asList(mediaXmlManager1, mediaXmlManager2));
+        assertThat(bestMediaFileUrl).isNull();
+    }
+
+    @Test
+    public void getBestCompanionAd_shouldReturnCompanionAd() throws Exception {
+        final VastCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(
+                300, 250, "image_url", "image/jpeg", null, null);
+
+        final VastCompanionAdConfig bestCompanionAd =
+                subject.getBestCompanionAd(Arrays.asList(companionXmlManager),
+                        VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertCompanionAdsAreEqual(companionXmlManager, bestCompanionAd);
+    }
+
+    @Test
+    public void getBestCompanionAd_withInvalidVastResource_shouldReturnNull() throws Exception {
+        final VastCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(
+                300, 250, "image_url", "image/INVALID", null, null);
+
+        final VastCompanionAdConfig bestCompanionAd =
+                subject.getBestCompanionAd(Arrays.asList(companionXmlManager),
+                        VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(bestCompanionAd).isNull();
+    }
+
+    @Test
+    public void getBestCompanionAd_withNullDimension_shouldReturnNull() throws Exception {
+        final VastCompanionAdXmlManager companionXmlManager =
+                initializeCompanionXmlManagerMock(null, 250, "image_url", "image/png", null, null);
+
+        final VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
+                Arrays.asList(companionXmlManager),
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(bestCompanionAd).isNull();
+    }
+
+    @Test
+    public void getBestCompanionAd_withWidthTooSmall_shouldReturnNull() throws Exception {
+        final VastCompanionAdXmlManager companionXmlManager =
+                initializeCompanionXmlManagerMock(299, 250, "image_url", "image/png", null, null);
+
+        final VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
+                Arrays.asList(companionXmlManager),
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(bestCompanionAd).isNull();
+    }
+
+    @Test
+    public void getBestCompanionAd_withHeightTooSmall_shouldReturnNull() throws Exception {
+        final VastCompanionAdXmlManager companionXmlManager =
+                initializeCompanionXmlManagerMock(300, 249, "image_url", "image/png", null, null);
+
+        final VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
+                Arrays.asList(companionXmlManager),
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(bestCompanionAd).isNull();
+    }
+
+    @Test
+    public void getBestCompanionAd_withSameAspectRatios_shouldReturnCompanionAdWithAreaCloserToScreenArea1() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Triple screen size
+        final VastCompanionAdXmlManager companionXmlManager1 =
+                initializeCompanionXmlManagerMock(2400, 1440, "image_url1", "image/png", null, null);
+        // Double screen size
+        final VastCompanionAdXmlManager companionXmlManager2 =
+                initializeCompanionXmlManagerMock(1600, 960, "image_url2", "image/bmp", null, null);
+
+        VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
+                Arrays.asList(companionXmlManager1, companionXmlManager2),
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(bestCompanionAd.getVastResource().getResource()).isEqualTo("image_url2");
+    }
+
+    @Test
+    public void getBestCompanionAd_withSameAspectRatios_shouldReturnCompanionAdWithAreaCloserToScreenArea2() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Triple screen size
+        final VastCompanionAdXmlManager companionXmlManager1 =
+                initializeCompanionXmlManagerMock(2400, 1440, "image_url1", "image/png", null, null);
+        // Half screen size
+        final VastCompanionAdXmlManager companionXmlManager2 =
+                initializeCompanionXmlManagerMock(400, 250, "image_url2", "image/bmp", null, null);
+
+        VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
+                Arrays.asList(companionXmlManager1, companionXmlManager2),
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(bestCompanionAd.getVastResource().getResource()).isEqualTo("image_url2");
+    }
+
+    @Test
+    public void getBestCompanionAd_withSameArea_shouldReturnLandscapeCompanionAdWithAspectRatioCloserToScreenAspectRatio() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Landscape
+        final VastCompanionAdXmlManager companionXmlManager1 =
+                initializeCompanionXmlManagerMock(400, 250, "image_url1", "image/png", null, null);
+        // Portrait
+        final VastCompanionAdXmlManager companionXmlManager2 =
+                initializeCompanionXmlManagerMock(250, 400, "image_url2", "image/bmp", null, null);
+
+        VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
+                Arrays.asList(companionXmlManager1, companionXmlManager2),
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(bestCompanionAd.getVastResource().getResource()).isEqualTo("image_url1");
+    }
+
+    @Test
+    public void getBestCompanionAd_withSameArea_shouldReturnPortraitCompanionAdWithAspectRatioCloserToScreenAspectRatio() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Landscape
+        final VastCompanionAdXmlManager companionXmlManager1 =
+                initializeCompanionXmlManagerMock(400, 300, "image_url1", "image/png", null, null);
+        // Portrait
+        final VastCompanionAdXmlManager companionXmlManager2 =
+                initializeCompanionXmlManagerMock(300, 400, "image_url2", "image/bmp", null, null);
+
+        VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
+                Arrays.asList(companionXmlManager1, companionXmlManager2),
+                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
+        assertThat(bestCompanionAd.getVastResource().getResource()).isEqualTo("image_url2");
+    }
+
+    @Test
+    public void getBestCompanionAd_withAllThreeResourceTypes_shouldReturnStaticResourceType() throws Exception {
+        // Static Resource
+        final VastCompanionAdXmlManager companionXmlManager1 =
+                initializeCompanionXmlManagerMock(400, 250, "StaticResource", "image/png", null,
+                        null);
+        // HTML Resource
+        final VastCompanionAdXmlManager companionXmlManager2 =
+                initializeCompanionXmlManagerMock(250, 400, null, null, null, "HTMLResource");
+        // IFrame Resource
+        final VastCompanionAdXmlManager companionXmlManager3 =
+                initializeCompanionXmlManagerMock(250, 400, null, null, "IFrameResource", null);
+
+        VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
+                Arrays.asList(companionXmlManager3, companionXmlManager2, companionXmlManager1),
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(bestCompanionAd.getVastResource().getResource()).isEqualTo("StaticResource");
+    }
+
+    @Test
+    public void getBestCompanionAd_withHTMLAndStaticResourceTypes_shouldReturnStaticResourceType() throws Exception {
+        // Static Resource
+        final VastCompanionAdXmlManager companionXmlManager1 =
+                initializeCompanionXmlManagerMock(400, 250, "StaticResource", "image/png", null, null);
+        // HTML Resource
+        final VastCompanionAdXmlManager companionXmlManager2 =
+                initializeCompanionXmlManagerMock(250, 400, null, null, null, "HTMLResource");
+
+        VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
+                Arrays.asList(companionXmlManager2, companionXmlManager1),
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(bestCompanionAd.getVastResource().getResource()).isEqualTo("StaticResource");
+    }
+
+    @Test
+    public void getBestCompanionAd_withInvalidStaticResource_withValidHtmlResource_shouldReturnHtmlResource() throws Exception {
+        final VastCompanionAdXmlManager companionXmlManager1 =
+                initializeCompanionXmlManagerMock(400, 250, "StaticResource", "INVALID",
+                        "IFrameResource", null);
+        final VastCompanionAdXmlManager companionXmlManager2 =
+                initializeCompanionXmlManagerMock(300, 400, null, null, null, "HTMLResource");
+
+        VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
+                Arrays.asList(companionXmlManager2, companionXmlManager1),
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(bestCompanionAd.getVastResource().getResource()).isEqualTo("HTMLResource");
+    }
+
+    @Test
+    public void getBestCompanionAd_withCompanionAdTooSmall_shouldReturnCompanionAdWithAtLeastMinimumSize() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // 305 x 305 is both fewer pixels (screen area) and a worse aspect ratio. It still should be
+        // chosen because 240 is not wide enough to be considered for a companion ad
+        final VastCompanionAdXmlManager companionXmlManager1 =
+                initializeCompanionXmlManagerMock(305, 305, "image_url1", "image/png", null, null);
+        final VastCompanionAdXmlManager companionXmlManager2 =
+                initializeCompanionXmlManagerMock(240, 400, "image_url2", "image/bmp", null, null);
+
+        VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
+                Arrays.asList(companionXmlManager1, companionXmlManager2),
+                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
+        assertThat(bestCompanionAd.getVastResource().getResource()).isEqualTo("image_url1");
+    }
+
+    @Test
+    public void getScaledDimensions_withWidthLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Width and height are evaluated in landscape
+        Point point = subject.getScaledDimensions(1600, 400);
+
+        assertThat(point.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(point.y).isEqualTo(200 - VastVideoViewController.WEBVIEW_PADDING);
+    }
+
+    @Test
+    public void getScaledDimensions_withHeightLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Width and height are evaluated in landscape
+        Point point = subject.getScaledDimensions(400, 960);
+
+        assertThat(point.x).isEqualTo(200 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(point.y).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
+    }
+
+    @Test
+    public void getScaledDimensions_withWidthAndHeightSmallerThanScreen_shouldNotScaleWidthAndHeight() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Width and height are evaluated in landscape
+        Point point = subject.getScaledDimensions(800, 480);
+
+        assertThat(point.x).isEqualTo(800);
+        assertThat(point.y).isEqualTo(480);
+    }
+
+    @Test
+    public void getScaledDimensions_withWidthAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Width and height are evaluated in landscape
+        Point point = subject.getScaledDimensions(1600, 2);
+
+        assertThat(point.x).isEqualTo(1600);
+        assertThat(point.y).isEqualTo(2);
+    }
+
+    @Test
+    public void getScaledDimensions_withHeightAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Width and height are evaluated in landscape
+        Point point = subject.getScaledDimensions(2, 960);
+
+        assertThat(point.x).isEqualTo(2);
+        assertThat(point.y).isEqualTo(960);
+    }
+
+    @Test
+    public void getBestIcon_shouldReturnBestIcon() throws Exception {
+        final VastIconXmlManager iconXmlManager1 =
+                initializeIconXmlManagerMock(40, 50, 123, 456, "staticResource1", "image/jpeg", null, null,
+                        VastUtils.stringsToVastTrackers("clickTrackingUri1", "clickTrackingUri2"),
+                        "clickThroughUri",
+                        VastUtils.stringsToVastTrackers("viewTrackingUri1", "viewTrackingUri2"));
+        final VastIconXmlManager iconXmlManager2 =
+                initializeIconXmlManagerMock(40, 40, null, null, "staticResource2", "image/png",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+
+        VastIconConfig bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager1, iconXmlManager2));
+        assertThat(bestIcon.getWidth()).isEqualTo(40);
+        assertThat(bestIcon.getHeight()).isEqualTo(50);
+        assertThat(bestIcon.getOffsetMS()).isEqualTo(123);
+        assertThat(bestIcon.getDurationMS()).isEqualTo(456);
+        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("staticResource1");
+        assertThat(bestIcon.getVastResource().getType()).isEqualTo(VastResource.Type
+                .STATIC_RESOURCE);
+        assertThat(bestIcon.getVastResource().getCreativeType())
+                .isEqualTo(VastResource.CreativeType.IMAGE);
+        assertThat(VastUtils.vastTrackersToStrings(bestIcon.getClickTrackingUris()))
+                .containsOnly("clickTrackingUri1", "clickTrackingUri2");
+        assertThat(bestIcon.getClickThroughUri()).isEqualTo("clickThroughUri");
+        assertThat(VastUtils.vastTrackersToStrings(bestIcon.getViewTrackingUris()))
+                .containsOnly("viewTrackingUri1", "viewTrackingUri2");
+    }
+
+    @Test
+    public void getBestIcon_withMissingWidth_shouldNotSelectThatIcon() throws Exception {
+        final VastIconXmlManager iconXmlManager1 =
+                initializeIconXmlManagerMock(null, 50, null, null, "staticResource1", "image/jpeg",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+        final VastIconXmlManager iconXmlManager2 =
+                initializeIconXmlManagerMock(40, 40, null, null, "staticResource2", "image/png",
+                        null, null, new ArrayList<VastTracker>(), null,
+                        new ArrayList<VastTracker>());
+
+        VastIconConfig bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager1, iconXmlManager2));
+        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("staticResource2");
+    }
+
+    @Test
+    public void getBestIcon_withNegativeWidth_shouldNotSelectThatIcon() throws Exception {
+        final VastIconXmlManager iconXmlManager1 =
+                initializeIconXmlManagerMock(-1, 50, null, null, "staticResource1", "image/jpeg",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+        final VastIconXmlManager iconXmlManager2 =
+                initializeIconXmlManagerMock(40, 40, null, null, "staticResource2", "image/png",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+
+        VastIconConfig bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager1, iconXmlManager2));
+        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("staticResource2");
+    }
+
+    @Test
+    public void getBestIcon_withWidthGreaterThan300dp_shouldNotSelectThatIcon() throws Exception {
+        final VastIconXmlManager iconXmlManager1 =
+                initializeIconXmlManagerMock(301, 50, null, null, "staticResource1", "image/jpeg",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+        final VastIconXmlManager iconXmlManager2 =
+                initializeIconXmlManagerMock(40, 40, null, null, "staticResource2", "image/png",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+
+        VastIconConfig bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager1, iconXmlManager2));
+        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("staticResource2");
+    }
+
+    @Test
+    public void getBestIcon_withMissingHeight_shouldNotSelectThatIcon() throws Exception {
+        final VastIconXmlManager iconXmlManager1 =
+                initializeIconXmlManagerMock(40, null, null, null, "staticResource1", "image/jpeg",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+        final VastIconXmlManager iconXmlManager2 =
+                initializeIconXmlManagerMock(40, 40, null, null, "staticResource2", "image/png",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+
+        VastIconConfig bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager1, iconXmlManager2));
+        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("staticResource2");
+    }
+
+    @Test
+    public void getBestIcon_withNegativeHeight_shouldNotSelectThatIcon() throws Exception {
+        final VastIconXmlManager iconXmlManager1 =
+                initializeIconXmlManagerMock(40, -1, null, null, "staticResource1", "image/jpeg",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+        final VastIconXmlManager iconXmlManager2 =
+                initializeIconXmlManagerMock(40, 40, null, null, "staticResource2", "image/png",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+
+        VastIconConfig bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager1, iconXmlManager2));
+        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("staticResource2");
+    }
+
+    @Test
+    public void getBestIcon_withHeightGreaterThan300dp_shouldNotSelectThatIcon() throws Exception {
+        final VastIconXmlManager iconXmlManager1 =
+                initializeIconXmlManagerMock(40, 301, null, null, "staticResource1", "image/jpeg",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+        final VastIconXmlManager iconXmlManager2 =
+                initializeIconXmlManagerMock(40, 40, null, null, "staticResource2", "image/png",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+
+        VastIconConfig bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager1, iconXmlManager2));
+        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("staticResource2");
+    }
+
+    @Test
+    public void getBestIcon_withAllThreeResourceTypes_shouldReturnStaticResourceType() throws Exception {
+        final VastIconXmlManager iconXmlManager1 =
+                initializeIconXmlManagerMock(40, 40, null, null, "StaticResource", "image/jpeg",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+        final VastIconXmlManager iconXmlManager2 =
+                initializeIconXmlManagerMock(40, 40, null, null, null, null, "IFrameResource",
+                        null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+        final VastIconXmlManager iconXmlManager3 =
+                initializeIconXmlManagerMock(40, 40, null, null, null, null, null, "HTMLResource",
+                        new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+
+        VastIconConfig bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager3, iconXmlManager2,
+                iconXmlManager1));
+        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("StaticResource");
+    }
+
+    @Test
+    public void getBestIcon_withHTMLAndStaticResourceTypes_shouldReturnStaticResourceType() throws Exception {
+        final VastIconXmlManager iconXmlManager1 =
+                initializeIconXmlManagerMock(40, 40, null, null, "StaticResource", "image/jpeg",
+                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+        final VastIconXmlManager iconXmlManager2 =
+                initializeIconXmlManagerMock(40, 40, null, null, null, null, null, "HTMLResource",
+                        new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+
+        VastIconConfig bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager2, iconXmlManager1));
+        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("StaticResource");
+    }
+
+    @Test
+    public void getBestIcon_withInvalidStaticResource_withValidHtmlResource_shouldReturnHtmlResource() throws Exception {
+        final VastIconXmlManager iconXmlManager1 =
+                initializeIconXmlManagerMock(40, 40, null, null, "StaticResource", "INVALID",
+                        "IFrameResource", null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+        final VastIconXmlManager iconXmlManager2 =
+                initializeIconXmlManagerMock(40, 40, null, null, null, null, null, "HTMLResource",
+                        new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
+
+        VastIconConfig bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager2, iconXmlManager1));
+        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("HTMLResource");
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withStandardInline_shouldReturnValidVastVideoConfiguration() {
+        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
+                TEST_NESTED_VAST_XML_STRING, HttpClient.getHttpClient(), new ArrayList<VastTracker>());
+
+        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getImpressionTrackers()))
+                .containsOnly("http://rtb-test.dev.tapad.com:8080/creative/imp" +
+                        ".png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo" +
+                        "=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1");
+        assertThat(vastVideoConfig.getFractionalTrackers()).isEmpty();
+        assertThat(vastVideoConfig.getAbsoluteTrackers()).isEmpty();
+        assertThat(vastVideoConfig.getPauseTrackers()).isEmpty();
+        assertThat(vastVideoConfig.getResumeTrackers()).isEmpty();
+        assertThat(vastVideoConfig.getCompleteTrackers()).isEmpty();
+        assertThat(vastVideoConfig.getCloseTrackers()).isEmpty();
+        assertThat(vastVideoConfig.getSkipTrackers()).isEmpty();
+        assertThat(vastVideoConfig.getClickTrackers()).isEmpty();
+        assertThat(vastVideoConfig.getClickThroughUrl()).isEqualTo(
+                "http://rtb-test.dev.tapad" +
+                        ".com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com");
+        assertThat(vastVideoConfig.getNetworkMediaFileUrl()).isEqualTo(
+                "https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
+        assertThat(vastVideoConfig.getSkipOffsetString()).isNull();
+        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getErrorTrackers()))
+                .containsOnly("http://nestedInLineErrorOne", "http://nestedInLineErrorTwo");
+
+        VastCompanionAdConfig[] companionAds = new VastCompanionAdConfig[2];
+        companionAds[0] = vastVideoConfig.getVastCompanionAd(
+                Configuration.ORIENTATION_LANDSCAPE);
+        companionAds[1] = vastVideoConfig.getVastCompanionAd(
+                Configuration.ORIENTATION_PORTRAIT);
+        for (VastCompanionAdConfig companionAd : companionAds) {
+            assertThat(companionAd.getWidth()).isEqualTo(300);
+            assertThat(companionAd.getHeight()).isEqualTo(250);
+            assertThat(companionAd.getVastResource().getResource())
+                    .isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
+            assertThat(companionAd.getVastResource().getType())
+                    .isEqualTo(VastResource.Type.STATIC_RESOURCE);
+            assertThat(companionAd.getVastResource().getCreativeType())
+                    .isEqualTo(VastResource.CreativeType.IMAGE);
+            assertThat(companionAd.getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
+            assertThat(VastUtils.vastTrackersToStrings(companionAd.getClickTrackers()))
+                    .containsOnly("http://companionClickTracking1",
+                            "http://companionClickTracking2");
+            assertThat(VastUtils.vastTrackersToStrings(companionAd.getCreativeViewTrackers()))
+                    .containsExactly("http://myTrackingURL/firstCompanionCreativeView",
+                            "http://myTrackingURL/secondCompanionCreativeView");
+        }
+
+        VastIconConfig vastIconConfig = vastVideoConfig.getVastIconConfig();
+        assertThat(vastIconConfig.getWidth()).isEqualTo(123);
+        assertThat(vastIconConfig.getHeight()).isEqualTo(234);
+        assertThat(vastIconConfig.getDurationMS()).isEqualTo(3723456);
+        assertThat(vastIconConfig.getOffsetMS()).isEqualTo(3723000);
+        assertThat(vastIconConfig.getVastResource().getResource()).isEqualTo("imageJpeg");
+        assertThat(vastIconConfig.getVastResource().getType()).isEqualTo(VastResource.Type.STATIC_RESOURCE);
+        assertThat(vastIconConfig.getVastResource().getCreativeType()).isEqualTo(VastResource.CreativeType.IMAGE);
+        assertThat(VastUtils.vastTrackersToStrings(vastIconConfig.getClickTrackingUris()))
+                .containsOnly("clickTrackingUri1", "clickTrackingUri2");
+        assertThat(vastIconConfig.getClickThroughUri()).isEqualTo("clickThroughUri");
+        assertThat(VastUtils.vastTrackersToStrings(vastIconConfig.getViewTrackingUris()))
+                .containsOnly("viewTrackingUri1", "viewTrackingUri2");
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withAWrapperToAnInline_shouldReturnValidVastVideoConfiguration() {
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
+                TEST_VAST_XML_STRING, HttpClient.getHttpClient(), new ArrayList<VastTracker>());
+
+        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getImpressionTrackers()))
+                .containsOnly(
+                        "http://rtb-test.dev.tapad.com:8080/creative/imp" +
+                                ".png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp" +
+                                "&ta_pinfo" +
+                                "=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1",
+                        "http://myTrackingURL/wrapper/impression1",
+                        "http://myTrackingURL/wrapper/impression2",
+                        "http://www.mopub.com/imp1",
+                        "http://www.mopub.com/imp2");
+
+        assertThat(vastVideoConfig.getFractionalTrackers()).hasSize(3);
+        assertThat(
+                vastVideoConfig.getFractionalTrackers().get(0)).isEqualsToByComparingFields(
+                new VastFractionalProgressTracker("http://myTrackingURL/wrapper/firstQuartile",
+                        0.25f));
+        assertThat(
+                vastVideoConfig.getFractionalTrackers().get(1)).isEqualsToByComparingFields(
+                new VastFractionalProgressTracker("http://myTrackingURL/wrapper/midpoint",
+                        0.5f));
+        assertThat(
+                vastVideoConfig.getFractionalTrackers().get(2)).isEqualsToByComparingFields(
+                new VastFractionalProgressTracker("http://myTrackingURL/wrapper/thirdQuartile",
+                        0.75f));
+
+        assertThat(vastVideoConfig.getAbsoluteTrackers().size()).isEqualTo(2);
+        assertThat(vastVideoConfig.getAbsoluteTrackers().get(0)).isEqualsToByComparingFields(
+                new VastAbsoluteProgressTracker("http://myTrackingURL/wrapper/creativeView", 0));
+        assertThat(vastVideoConfig.getAbsoluteTrackers().get(1)).isEqualsToByComparingFields(
+                new VastAbsoluteProgressTracker("http://myTrackingURL/wrapper/start", 2000));
+
+        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getPauseTrackers()))
+                .containsOnly("http://myTrackingURL/wrapper/pause");
+        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getResumeTrackers()))
+                .containsOnly("http://myTrackingURL/wrapper/resume");
+        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getCompleteTrackers()))
+                .containsOnly("http://myTrackingURL/wrapper/complete");
+        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getErrorTrackers()))
+                .containsExactly(
+                        "http://wrapperErrorOne?errorcode=[ERRORCODE]",
+                        "http://wrapperErrorTwo?errorcode=[ERRORCODE]",
+                        "http://nestedInLineErrorOne",
+                        "http://nestedInLineErrorTwo");
+
+        assertThat(vastVideoConfig.getCloseTrackers()).isEmpty();
+        assertThat(vastVideoConfig.getSkipTrackers()).isEmpty();
+
+        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getClickTrackers()))
+                .containsOnly("http://myTrackingURL/wrapper/click");
+
+        assertThat(vastVideoConfig.getClickThroughUrl()).isEqualTo(
+                "http://rtb-test.dev.tapad" +
+                        ".com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com");
+        assertThat(vastVideoConfig.getNetworkMediaFileUrl()).isEqualTo(
+                "https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
+        assertThat(vastVideoConfig.getSkipOffsetString()).isNull();
+
+        VastCompanionAdConfig[] companionAds = new VastCompanionAdConfig[2];
+        companionAds[0] = vastVideoConfig.getVastCompanionAd(
+                Configuration.ORIENTATION_LANDSCAPE);
+        companionAds[1] = vastVideoConfig.getVastCompanionAd(
+                Configuration.ORIENTATION_PORTRAIT);
+        for (VastCompanionAdConfig companionAd : companionAds) {
+            assertThat(companionAd.getWidth()).isEqualTo(300);
+            assertThat(companionAd.getHeight()).isEqualTo(250);
+            assertThat(companionAd.getVastResource().getResource())
+                    .isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
+            assertThat(companionAd.getVastResource().getType())
+                    .isEqualTo(VastResource.Type.STATIC_RESOURCE);
+            assertThat(companionAd.getVastResource().getCreativeType())
+                    .isEqualTo(VastResource.CreativeType.IMAGE);
+            assertThat(companionAd.getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
+            assertThat(VastUtils.vastTrackersToStrings(companionAd.getClickTrackers()))
+                    .containsOnly("http://companionClickTracking1",
+                            "http://companionClickTracking2",
+                            "http://noResourceWrapperCompanionClickTracking1");
+            assertThat(VastUtils.vastTrackersToStrings(companionAd.getCreativeViewTrackers()))
+                    .containsExactly("http://myTrackingURL/firstCompanionCreativeView",
+                            "http://myTrackingURL/secondCompanionCreativeView",
+                            "http://firstNoResourceWrapperCompanionCreativeView",
+                            "http://secondNoResourceWrapperCompanionCreativeView");
+        }
+
+        VastIconConfig vastIconConfig = vastVideoConfig.getVastIconConfig();
+        assertThat(vastIconConfig.getWidth()).isEqualTo(123);
+        assertThat(vastIconConfig.getHeight()).isEqualTo(234);
+        assertThat(vastIconConfig.getDurationMS()).isEqualTo(3723456);
+        assertThat(vastIconConfig.getOffsetMS()).isEqualTo(3723000);
+        assertThat(vastIconConfig.getVastResource().getResource()).isEqualTo("imageJpeg");
+        assertThat(vastIconConfig.getVastResource().getType()).isEqualTo(VastResource.Type.STATIC_RESOURCE);
+        assertThat(vastIconConfig.getVastResource().getCreativeType()).isEqualTo(VastResource.CreativeType.IMAGE);
+        assertThat(VastUtils.vastTrackersToStrings(vastIconConfig.getClickTrackingUris()))
+                .containsOnly("clickTrackingUri1", "clickTrackingUri2");
+        assertThat(vastIconConfig.getClickThroughUri()).isEqualTo("clickThroughUri");
+        assertThat(VastUtils.vastTrackersToStrings(vastIconConfig.getViewTrackingUris()))
+                .containsOnly("viewTrackingUri1", "viewTrackingUri2");
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withInvalidXml_shouldReturnNullVastVideoConfiguration() {
+        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
+                TEST_VAST_BAD_NEST_URL_XML_STRING, HttpClient.getHttpClient(),
+                new ArrayList<VastTracker>());
+
+        assertThat(vastVideoConfig).isNull();
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withRedirectHavingNoCompanionAd_shouldReturnVastVideoConfigurationWithCompanionAdOfWrapper() {
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_NO_COMPANION_VAST_XML_STRING);
+        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
+                TEST_VAST_XML_STRING, HttpClient.getHttpClient(), new ArrayList<VastTracker>());
+
+        VastCompanionAdConfig[] companionAds = new VastCompanionAdConfig[2];
+        companionAds[0] = vastVideoConfig.getVastCompanionAd(
+                Configuration.ORIENTATION_LANDSCAPE);
+        companionAds[1] = vastVideoConfig.getVastCompanionAd(
+                Configuration.ORIENTATION_PORTRAIT);
+        for (VastCompanionAdConfig companionAd : companionAds) {
+            assertThat(companionAd.getWidth()).isEqualTo(456);
+            assertThat(companionAd.getHeight()).isEqualTo(250);
+            assertThat(companionAd.getVastResource().getResource()).isEqualTo("http" +
+                    "://wrapperCompanionAdStaticResource");
+            assertThat(companionAd.getClickThroughUrl()).isEqualTo(
+                    "http://wrapperCompanionClickThrough");
+            assertThat(VastUtils.vastTrackersToStrings(companionAd.getClickTrackers()))
+                    .containsOnly("http://wrapperCompanionClickTracking");
+            assertThat(VastUtils.vastTrackersToStrings(companionAd.getCreativeViewTrackers()))
+                    .containsExactly("http://firstWrapperCompanionCreativeView",
+                            "http://secondWrapperCompanionCreativeView");
+        }
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withSequenceNumbers_shouldReturnVastVideoConfigurationWithNegativeSequenceNumber() {
+        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
+                TEST_VAST_WITH_NEGATIVE_SEQUENCE_NUMBER_XML_STRING, HttpClient.getHttpClient(),
+                new ArrayList<VastTracker>());
+
+        assertThat(vastVideoConfig.getNetworkMediaFileUrl()).isEqualTo(
+                "http://negativeSequence");
+        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getImpressionTrackers()))
+                .containsOnly("http://negativeSequence");
+    }
+
+    @Test
+    public void isValidSequenceNumber_withNull_shouldReturnTrue() {
+        assertThat(VastXmlManagerAggregator.isValidSequenceNumber(null)).isTrue();
+    }
+
+    @Test
+    public void isValidSequenceNumber_withNegativeInteger_shouldReturnTrue() {
+        assertThat(VastXmlManagerAggregator.isValidSequenceNumber("-123")).isTrue();
+    }
+
+    @Test
+    public void isValidSequenceNumber_withHighPositiveInteger_shouldReturnFalse() {
+        assertThat(VastXmlManagerAggregator.isValidSequenceNumber("123456")).isFalse();
+    }
+
+    @Test
+    public void isValidSequenceNumber_withDecimal_shouldReturnTrue() {
+        assertThat(VastXmlManagerAggregator.isValidSequenceNumber("123.456")).isTrue();
+    }
+
+    @Test
+    public void isValidSequenceNumber_withInvalidInteger_shouldReturnTrue() {
+        assertThat(VastXmlManagerAggregator.isValidSequenceNumber("this should fail!")).isTrue();
+    }
+
+    @Test
+    public void isValidSequenceNumber_withZero_shouldReturnTrue() {
+        assertThat(VastXmlManagerAggregator.isValidSequenceNumber("0")).isTrue();
+    }
+
+    @Test
+    public void isValidSequenceNumber_withOne_shouldReturnTrue() {
+        assertThat(VastXmlManagerAggregator.isValidSequenceNumber("1")).isTrue();
+    }
+
+    @Test
+    public void isValidSequenceNumber_withTwo_shouldReturnFalse() {
+        assertThat(VastXmlManagerAggregator.isValidSequenceNumber("2")).isFalse();
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withJustError_shouldReturnNullVastVideoConfiguration_shouldFireErrorTracker() {
+        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
+                TEST_JUST_ERROR_XML_STRING, HttpClient.getHttpClient(),
+                new ArrayList<VastTracker>());
+
+        assertThat(vastVideoConfig).isNull();
+        verify(mockRequestQueue).add(argThat(isUrl("http://justErrorTracking?errorcode=900")));
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withWrapperToJustError_shouldReturnNullVastVideoConfiguration_shouldFireErrorTrackers() {
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_JUST_ERROR_XML_STRING);
+        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
+                TEST_VAST_XML_STRING, HttpClient.getHttpClient(), new ArrayList<VastTracker>());
+
+        assertThat(vastVideoConfig).isNull();
+        verify(mockRequestQueue).add(argThat(isUrl("http://justErrorTracking?errorcode=303")));
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withWrapperToVastXmlError_shouldReturnNullVastVideoConfiguration_shouldFireErrorTracker() {
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_INVALID_VAST_XML_STRING);
+        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
+                TEST_VAST_XML_STRING, HttpClient.getHttpClient(), new ArrayList<VastTracker>());
+
+        assertThat(vastVideoConfig).isNull();
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withWrapperToInvalidXml_shouldReturnNullVastVideoConfiguration_shouldFireErrorTracker() {
+        mFakeHttpLayer.addPendingHttpResponse(200, TEST_INVALID_XML_STRING);
+        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
+                TEST_VAST_XML_STRING, HttpClient.getHttpClient(), new ArrayList<VastTracker>());
+
+        assertThat(vastVideoConfig).isNull();
+        verify(mockRequestQueue).add(argThat(isUrl("http://wrapperErrorOne?errorcode=100")));
+        verify(mockRequestQueue).add(argThat(isUrl("http://wrapperErrorTwo?errorcode=100")));
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withWrapperToNoHttpResponse_shouldReturnNullVastVideoConfiguration_shouldFireErrorTracker() {
+        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
+                TEST_VAST_XML_STRING, HttpClient.getHttpClient(), new ArrayList<VastTracker>());
+
+        assertThat(vastVideoConfig).isNull();
+        verify(mockRequestQueue).add(argThat(isUrl("http://wrapperErrorOne?errorcode=301")));
+        verify(mockRequestQueue).add(argThat(isUrl("http://wrapperErrorTwo?errorcode=301")));
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+    private VastMediaXmlManager initializeMediaXmlManagerMock(
+            final Integer width,
+            final Integer height,
+            final String type,
+            final String mediaUrl) {
+        VastMediaXmlManager mediaXmlManager = mock(VastMediaXmlManager.class);
+        when(mediaXmlManager.getWidth()).thenReturn(width);
+        when(mediaXmlManager.getHeight()).thenReturn(height);
+        when(mediaXmlManager.getType()).thenReturn(type);
+        when(mediaXmlManager.getMediaUrl()).thenReturn(mediaUrl);
+        return mediaXmlManager;
+    }
+
+    private VastCompanionAdXmlManager initializeCompanionXmlManagerMock(
+            final Integer width,
+            final Integer height,
+            final String staticResource,
+            final String staticResourceType,
+            final String iFrameResource,
+            final String htmlResource) {
+        VastCompanionAdXmlManager companionXmlManager = mock(VastCompanionAdXmlManager.class);
+        when(companionXmlManager.getWidth()).thenReturn(width);
+        when(companionXmlManager.getHeight()).thenReturn(height);
+
+        VastResourceXmlManager mockResourceXmlManager = initializeVastResourceXmlManagerMock(
+                staticResource,
+                staticResourceType,
+                iFrameResource,
+                htmlResource
+        );
+        when(companionXmlManager.getResourceXmlManager()).thenReturn(mockResourceXmlManager);
+
+        return companionXmlManager;
+    }
+
+    private void assertCompanionAdsAreEqual(
+            final VastCompanionAdXmlManager companionAdXmlManager,
+            final VastCompanionAdConfig companionAd) {
+        final VastCompanionAdConfig companionAd1 = new VastCompanionAdConfig(
+                companionAdXmlManager.getWidth(),
+                companionAdXmlManager.getHeight(),
+                VastResource.fromVastResourceXmlManager(
+                        companionAdXmlManager.getResourceXmlManager(),
+                        companionAdXmlManager.getWidth(),
+                        companionAdXmlManager.getHeight()),
+                companionAdXmlManager.getClickThroughUrl(),
+                companionAdXmlManager.getClickTrackers(),
+                companionAdXmlManager.getCompanionCreativeViewTrackers()
+        );
+        assertCompanionAdsAreEqual(companionAd, companionAd1);
+    }
+
+    private void assertCompanionAdsAreEqual(
+            final VastCompanionAdConfig vastCompanionAdConfig1,
+            final VastCompanionAdConfig vastCompanionAdConfig2) {
+        assertThat(vastCompanionAdConfig1.getWidth()).isEqualTo(vastCompanionAdConfig2.getWidth());
+        assertThat(vastCompanionAdConfig1.getHeight()).isEqualTo(vastCompanionAdConfig2.getHeight());
+        assertThat(vastCompanionAdConfig1.getVastResource().getResource())
+                .isEqualTo(vastCompanionAdConfig2.getVastResource().getResource());
+        assertThat(vastCompanionAdConfig1.getVastResource().getType())
+                .isEqualTo(vastCompanionAdConfig2.getVastResource().getType());
+        assertThat(vastCompanionAdConfig1.getVastResource().getCreativeType())
+                .isEqualTo(vastCompanionAdConfig2.getVastResource().getCreativeType());
+        assertThat(vastCompanionAdConfig1.getClickThroughUrl()).isEqualTo(vastCompanionAdConfig2.getClickThroughUrl());
+        assertThat(vastCompanionAdConfig1.getClickTrackers()).isEqualTo(vastCompanionAdConfig2.getClickTrackers());
+        assertThat(vastCompanionAdConfig1.getCreativeViewTrackers()).isEqualTo(
+                vastCompanionAdConfig2.getCreativeViewTrackers());
+    }
+
+    private VastIconXmlManager initializeIconXmlManagerMock(
+            final Integer width,
+            final Integer height,
+            final Integer offsetMS,
+            final Integer durationMS,
+            final String staticResource,
+            final String staticResourceType,
+            final String iFrameResource,
+            final String htmlResource,
+            final List<VastTracker> clickTrackingUris,
+            final String clickThroughUri,
+            final List<VastTracker> viewTrackingUris) {
+        VastIconXmlManager iconXmlManager = mock(VastIconXmlManager.class);
+        when(iconXmlManager.getWidth()).thenReturn(width);
+        when(iconXmlManager.getHeight()).thenReturn(height);
+        when(iconXmlManager.getOffsetMS()).thenReturn(offsetMS);
+        when(iconXmlManager.getDurationMS()).thenReturn(durationMS);
+
+        VastResourceXmlManager mockResourceXmlManager = initializeVastResourceXmlManagerMock(
+                staticResource,
+                staticResourceType,
+                iFrameResource,
+                htmlResource
+        );
+        when(iconXmlManager.getResourceXmlManager()).thenReturn(mockResourceXmlManager);
+
+        when(iconXmlManager.getClickTrackingUris()).thenReturn(clickTrackingUris);
+        when(iconXmlManager.getClickThroughUri()).thenReturn(clickThroughUri);
+        when(iconXmlManager.getViewTrackingUris()).thenReturn(viewTrackingUris);
+        return iconXmlManager;
+    }
+
+    static VastResourceXmlManager initializeVastResourceXmlManagerMock(
+            final String staticResource,
+            final String staticResourceType,
+            final String iFrameResource,
+            final String htmlResource) {
+        VastResourceXmlManager mockResourceXmlManager = mock(VastResourceXmlManager.class);
+        when(mockResourceXmlManager.getStaticResource()).thenReturn(staticResource);
+        when(mockResourceXmlManager.getStaticResourceType()).thenReturn(staticResourceType);
+        when(mockResourceXmlManager.getIFrameResource()).thenReturn(iFrameResource);
+        when(mockResourceXmlManager.getHTMLResource()).thenReturn(htmlResource);
+        return mockResourceXmlManager;
+    }
+
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
similarity index 70%
rename from mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerTest.java
rename to mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
index c71d444f..b056537f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
@@ -1,9 +1,8 @@
-package com.mopub.mobileads.util.vast;
+package com.mopub.mobileads;
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.DeviceUtils.ForceOrientation;
-import com.mopub.mobileads.VastAbsoluteProgressTracker;
-import com.mopub.mobileads.VastFractionalProgressTracker;
+import com.mopub.mobileads.test.support.VastUtils;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -37,7 +36,6 @@
             "                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145;sz=1x1;ord=2922389?" +
             "                        ]]>" +
             "                    </Impression>" +
-            "                    <VASTAdTagURI><![CDATA[ http://0.dsp.dev1.mopub.com/xml ]]></VASTAdTagURI>" +
             "                    <Creatives>" +
             "                        <Creative sequence=\"1\" AdID=\"\">" +
             "                            <Linear skipoffset=\"25%\">" +
@@ -187,6 +185,32 @@
             "                                        ]]>" +
             "                                    </MediaFile>" +
             "                                </MediaFiles>" +
+            "                               <Icons>" +
+            "                                   <Icon program=\"program\" width=\"123\" height=\"234\" xPosition=\"789\" " +
+            "                                   yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+            "                                   duration=\"01:02:03.456\">" +
+            "                                       <StaticResource creativeType=\"ImAge/JpEg\">" +
+            "                                           <![CDATA[imageJpeg]]>" +
+            "                                       </StaticResource>" +
+            "                                       <IconClicks>" +
+            "                                           <IconClickThrough>" +
+            "                                               <![CDATA[clickThroughUri]]>" +
+            "                                           </IconClickThrough>" +
+            "                                           <IconClickTracking>" +
+            "                                               <![CDATA[clickTrackingUri1]]>" +
+            "                                           </IconClickTracking>" +
+            "                                           <IconClickTracking>" +
+            "                                               <![CDATA[clickTrackingUri2]]>" +
+            "                                           </IconClickTracking>" +
+            "                                       </IconClicks>" +
+            "                                       <IconViewTracking>" +
+            "                                           <![CDATA[viewTrackingUri1]]>" +
+            "                                       </IconViewTracking>" +
+            "                                       <IconViewTracking>" +
+            "                                           <![CDATA[viewTrackingUri2]]>" +
+            "                                       </IconViewTracking>" +
+            "                                    </Icon>" +
+            "                                </Icons>" +
             "                            </Linear>" +
             "                        </Creative>" +
             "                        <Creative AdID=\"601364-Companion\">" +
@@ -206,6 +230,7 @@
             "                                       <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
             "                                   </TrackingEvents>" +
             "                                   <CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough>" +
+            "                                   <CompanionClickTracking><![CDATA[http://companionClickTracking1]]></CompanionClickTracking>" +
             "                               </Companion>" +
             "                               <Companion height=\"789\" width=\"456\">" +
             "                                   <StaticResource creativeType=\"image/bmp\">" +
@@ -225,6 +250,7 @@
             "                                           http://clickThroughUrl1.com/" +
             "                                       ]]>" +
             "                                   </CompanionClickThrough>" +
+            "                                   <CompanionClickTracking><![CDATA[http://companionClickTracking2]]></CompanionClickTracking>" +
             "                               </Companion>" +
             "                               <Companion height=\"789\" width=\"1011\">" +
             "                                   <StaticResource creativeType=\"image/gif\">" +
@@ -237,6 +263,7 @@
             "                                           http://clickThroughUrl2.com/" +
             "                                       ]]>" +
             "                                   </CompanionClickThrough>" +
+            "                                   <CompanionClickTracking><![CDATA[http://companionClickTracking3]]></CompanionClickTracking>" +
             "                               </Companion>" +
             "                               <Companion width=\"300\" height=\"60\">" +
             "                                   <StaticResource creativeType=\"application/x-shockwave-flash\">" +
@@ -256,6 +283,7 @@
             "                                           http://clickThroughUrl3.com/" +
             "                                       ]]>" +
             "                                   </CompanionClickThrough>" +
+            "                                   <CompanionClickTracking><![CDATA[http://companionClickTracking4]]></CompanionClickTracking>" +
             "                               </Companion>" +
             "                               <Companion id=\"valid\" height=\"249\" width=\"299\">" +
             "                                   <BADStaticResource creativeType=\"image/jpeg\">http://demo.tremormedia.com/proddev/vast/Blistex1.jpg</BADStaticResource>" +
@@ -267,6 +295,7 @@
             "                                           <Tracking event=\"BADcreativeView\">http://myTrackingURL/fifthCompanionCreativeView</Tracking>" +
             "                                   </TrackingEvents>" +
             "                                   <BADCompanionClickThrough>http://www.tremormedia.com</BADCompanionClickThrough>" +
+            "                                   <BADCompanionClickTracking><![CDATA[http://companionClickTracking5]]></BADCompanionClickTracking>" +
             "                               </Companion>" +
             "                               <Companion width=\"9000\">" +
             "                                   <TrackingEvents>" +
@@ -301,6 +330,13 @@
             "                        </Extension>" +
             "                    </Extensions>" +
             "                </InLine>" +
+            "                <Wrapper>" +
+            "                   <AdSystem>Acudeo Compatible</AdSystem>" +
+            "                   <VASTAdTagURI>http://0.dsp.dev1.mopub.com/xml</VASTAdTagURI>" +
+            "                   <Impression>http://myTrackingURL/wrapper/impression</Impression>" +
+            "                   <Creatives>" +
+            "                   </Creatives>" +
+            "                </Wrapper>" +
             "            </Ad>" +
             "        </VAST>" +
             "<MP_TRACKING_URLS>" +
@@ -330,6 +366,10 @@ public void setup() {
         }
     }
 
+    /**
+     * UNIT TESTS
+     */
+
     @Test
     public void parseVastXml_shouldNotRaiseAnExceptionProcessingValidXml() {
         assertThat(mExceptionRaised).isEqualTo(false);
@@ -344,266 +384,316 @@ public void parseVastXml_shouldNotRaiseAnExceptionProcessingXmlWithXmlHeaderTag(
     }
 
     @Test
-    public void getImpressionTrackers_shouldReturnTheCorrectValue() {
-        List<String> trackers = mXmlManager.getImpressionTrackers();
+    public void parseVastXml_withMalformedXml_shouldNotCauseProblems() {
+        String badXml = "<im>going<<<to||***crash></,>CDATA[]YOUR_FACE";
 
-        assertThat(trackers.size()).isEqualTo(4);
+        VastXmlManager badManager = new VastXmlManager();
 
-        String tracker1 = trackers.get(0);
-        String tracker2 = trackers.get(1);
-        String tracker3 = trackers.get(2);
-        String tracker4 = trackers.get(3);
+        try {
+            badManager.parseVastXml(badXml);
+        } catch (ParserConfigurationException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        } catch (SAXException e) {
+            e.printStackTrace();
+        }
 
-        assertThat(tracker1).isEqualTo("http://ad.doubleclick.net/imp;v7;x;223626102;0-0;0;47414672;0/0;30477563/30495440/1;;~aopt=0/0/ff/0;~cs=j%3fhttp://s0.2mdn.net/dot.gif");
-        assertThat(tracker2).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145;sz=1x1;ord=2922389?");
-        assertThat(tracker3).isEqualTo("http://www.mopub.com/imp1");
-        assertThat(tracker4).isEqualTo("http://www.mopub.com/imp2");
+        assertThat(badManager.getMoPubImpressionTrackers().size()).isEqualTo(0);
     }
 
     @Test
-    public void getAbsoluteTrackers_shouldReturnCorrectValues() {
-        List<VastAbsoluteProgressTracker> trackers = mXmlManager.getAbsoluteProgressTrackers();
+    public void parseVastXml_withMalformedNodes_shouldNotCauseProblems() {
+        String badXml = "<VAST><Impression id=\"DART\"></Impression><Tracking event=\"start\"><![CDATA[ good ]]><ExtraNode><![CDATA[ bad ]]></ExtraNode></Tracking></VAST>";
 
-        assertThat(trackers.size()).isEqualTo(2);
+        VastXmlManager badManager = new VastXmlManager();
 
-        VastAbsoluteProgressTracker tracker0 = trackers.get(0);
-        assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+        try {
+            badManager.parseVastXml(badXml);
+        } catch (ParserConfigurationException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        } catch (SAXException e) {
+            e.printStackTrace();
+        }
 
-        VastAbsoluteProgressTracker tracker1 = trackers.get(1);
-        assertThat(tracker1.getTrackingMilliseconds()).isEqualTo(3670300);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+        assertThat(badManager.getAdXmlManagers()).isEmpty();
     }
 
     @Test
-    public void getFractionalTrackers_shouldReturnCorrectValues() {
-        List<VastFractionalProgressTracker> trackers = mXmlManager.getFractionalProgressTrackers();
-
-        assertThat(trackers.size()).isEqualTo(7);
-
-        VastFractionalProgressTracker tracker0 = trackers.get(0);
-        assertThat(tracker0.trackingFraction()).isEqualTo(0.13f);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
-
-        VastFractionalProgressTracker tracker1 = trackers.get(1);
-        assertThat(tracker1.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
-
-        VastFractionalProgressTracker tracker2 = trackers.get(2);
-        assertThat(tracker2.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker2.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
-
-        VastFractionalProgressTracker tracker3 = trackers.get(3);
-        assertThat(tracker3.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker3.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
-
-        VastFractionalProgressTracker tracker4 = trackers.get(4);
-        assertThat(tracker4.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker4.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
-
-        VastFractionalProgressTracker tracker5 = trackers.get(5);
-        assertThat(tracker5.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker5.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
-
-        VastFractionalProgressTracker tracker6 = trackers.get(6);
-        assertThat(tracker6.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker6.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
+    public void getAdXmlManagers_shouldReturnAllAdXmlManagers() throws Exception {
+        String vastXml = "<VAST xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" version=\"2.0\" xsi:noNamespaceSchemaLocation=\"vast.xsd\">" +
+                "    <Ad id=\"12345678\">" +
+                "        <InLine></InLine>" +
+                "    </Ad>" +
+                "    <Ad id=\"87654321\">" +
+                "        <Wrapper></Wrapper>" +
+                "    </Ad>" +
+                "</VAST>";
+
+        VastXmlManager subject = new VastXmlManager();
+        subject.parseVastXml(vastXml);
+        List<VastAdXmlManager> vastAdXmlManagers = subject.getAdXmlManagers();
+
+        assertThat(vastAdXmlManagers.size()).isEqualTo(2);
+        assertThat(vastAdXmlManagers.get(0).getInLineXmlManager()).isNotNull();
+        assertThat(vastAdXmlManagers.get(0).getWrapperXmlManager()).isNull();
+        assertThat(vastAdXmlManagers.get(1).getInLineXmlManager()).isNull();
+        assertThat(vastAdXmlManagers.get(1).getWrapperXmlManager()).isNotNull();
     }
 
     @Test
-    public void getVideoCompleteTrackers_shouldReturnTheCorrectValue() {
-        List<String> trackers = mXmlManager.getVideoCompleteTrackers();
-
-        assertThat(trackers.size()).isEqualTo(2);
+    public void getMoPubImpressionTrackers_shouldReturnTheCorrectValue() {
+        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getMoPubImpressionTrackers()))
+                .containsOnly("http://www.mopub.com/imp1", "http://www.mopub.com/imp2");
+    }
 
-        String tracker1 = trackers.get(0);
-        String tracker2 = trackers.get(1);
+    @Test
+    public void getCustomCtaText_shouldReturnTheCorrectValue() {
+        String customCtaText = mXmlManager.getCustomCtaText();
 
-        assertThat(tracker1).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;");
-        assertThat(tracker2).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?");
+        assertThat(customCtaText).isEqualTo("custom CTA text");
     }
 
     @Test
-    public void getVideoCloseTrackers_shouldReturnTheCorrectValue() {
-        List<String> trackers = mXmlManager.getVideoCloseTrackers();
+    public void getCustomSkipText_shouldReturnTheCorrectValue() {
+        String customSkipText = mXmlManager.getCustomSkipText();
 
-        assertThat(trackers).containsExactly("http://www.mopub.com/close?q=ignatius", "http://www.mopub.com/close?q=j3");
+        assertThat(customSkipText).isEqualTo("skip");
     }
 
     @Test
-    public void getVideoSkipTrackers_shouldReturnTheCorrectValue() {
-        List<String> trackers = mXmlManager.getVideoSkipTrackers();
+    public void getCustomCloseIconUrl_shouldReturnTheCorrectValue() {
+        String customCloseIconUrl = mXmlManager.getCustomCloseIconUrl();
 
-        assertThat(trackers).containsExactly("http://www.mopub.com/skip?q=ignatius", "http://www.mopub.com/skip?q=j3");
+        assertThat(customCloseIconUrl).isEqualTo("http://ton.twitter" +
+                ".com/exchange-media/images/v4/star_icon_3x.png");
     }
 
     @Test
-    public void getClickThroughUrl_shouldReturnTheCorrectValue() {
-        String url = mXmlManager.getClickThroughUrl();
+    public void getCustomForceOrientation_shouldReturnTheCorrectValue() {
+        ForceOrientation customForceOrientation = mXmlManager.getCustomForceOrientation();
 
-        assertThat(url).isEqualTo("http://www.google.com/support/richmedia");
+        assertThat(customForceOrientation).isEqualTo(ForceOrientation.DEVICE_ORIENTATION);
     }
 
-    @Test
-    public void getClickTrackers_shouldReturnTheCorrectValue() {
-        List<String> trackers = mXmlManager.getClickTrackers();
+    /**
+     * INTEGRATION TESTS
+     */
 
-        assertThat(trackers.size()).isEqualTo(2);
+    @Test
+    public void getVastAdTagURI_withWrapperXmlManager_shouldReturnTheCorrectValue() {
+        String url = mXmlManager.getAdXmlManagers().get(0).getWrapperXmlManager().getVastAdTagURI();
 
-        String tracker1 = trackers.get(0);
-        String tracker2 = trackers.get(1);
+        assertThat(url).isEqualTo("http://0.dsp.dev1.mopub.com/xml");
+    }
 
-        assertThat(tracker1).isEqualTo("http://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif");
-        assertThat(tracker2).isEqualTo("http://ad.doubleclick.net/clk;212442087;33815766;i?http://www.google.com/support/richmedia");
+    @Test
+    public void getImpressionTrackers_withInLineXmlManager_shouldReturnTheCorrectValue() {
+        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0)
+                .getInLineXmlManager().getImpressionTrackers()))
+                .containsOnly("http://ad.doubleclick.net/imp;v7;x;223626102;0-0;0;47414672;0/0;" +
+                                "30477563/30495440/1;;~aopt=0/0/ff/0;~cs=j%3fhttp://s0.2mdn" +
+                                ".net/dot.gif",
+                        "http://ad.doubleclick.net/ad/N270.Process_Other/B3473145;sz=1x1;ord=2922389?");
     }
 
     @Test
-    public void getCompanionAdXmlManagers_shouldReturnListOfPopulatedCompanionAdXmlManagers() throws Exception {
-        List<VastXmlManager.ImageCompanionAdXmlManager> imageCompanionAdXmlManagers = mXmlManager.getCompanionAdXmlManagers();
+    public void getCompanionAdXmlManagers_withInLineXmlManager_shouldReturnListOfPopulatedCompanionAdXmlManagers() throws Exception {
+        List<VastCompanionAdXmlManager> imageCompanionAdXmlManagers = mXmlManager.getAdXmlManagers().get(0)
+                .getInLineXmlManager().getCompanionAdXmlManagers();
         assertThat(imageCompanionAdXmlManagers.size()).isEqualTo(7);
 
         assertThat(imageCompanionAdXmlManagers.get(0).getWidth()).isEqualTo(728);
         assertThat(imageCompanionAdXmlManagers.get(0).getHeight()).isEqualTo(90);
-        assertThat(imageCompanionAdXmlManagers.get(0).getType()).isEqualTo("image/jpeg");
-        assertThat(imageCompanionAdXmlManagers.get(0).getImageUrl()).isEqualTo("http://demo.tremormedia.com/proddev/vast/728x90_banner1.jpg");
-        assertThat(imageCompanionAdXmlManagers.get(0).getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
+        assertThat(imageCompanionAdXmlManagers.get(0).getResourceXmlManager().getStaticResourceType())
+                .isEqualTo("image/jpeg");
+        assertThat(imageCompanionAdXmlManagers.get(0).getResourceXmlManager().getStaticResource())
+                .isEqualTo("http://demo.tremormedia.com/proddev/vast/728x90_banner1.jpg");
+        assertThat(imageCompanionAdXmlManagers.get(0).getClickThroughUrl()).isEqualTo(
+                "http://www.tremormedia.com");
         assertThat(imageCompanionAdXmlManagers.get(0).getClickTrackers()).isEmpty();
 
         assertThat(imageCompanionAdXmlManagers.get(1).getWidth()).isEqualTo(300);
         assertThat(imageCompanionAdXmlManagers.get(1).getHeight()).isEqualTo(250);
-        assertThat(imageCompanionAdXmlManagers.get(1).getType()).isEqualTo("image/png");
-        assertThat(imageCompanionAdXmlManagers.get(1).getImageUrl()).isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.png");
-        assertThat(imageCompanionAdXmlManagers.get(1).getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
-        assertThat(imageCompanionAdXmlManagers.get(1).getClickTrackers())
-                .containsOnly("http://myTrackingURL/firstCompanionCreativeView", "http://myTrackingURL/secondCompanionCreativeView");
+        assertThat(imageCompanionAdXmlManagers.get(1).getResourceXmlManager().getStaticResourceType())
+                .isEqualTo("image/png");
+        assertThat(imageCompanionAdXmlManagers.get(1).getResourceXmlManager().getStaticResource())
+                .isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.png");
+        assertThat(imageCompanionAdXmlManagers.get(1).getClickThroughUrl()).isEqualTo(
+                "http://www.tremormedia.com");
+        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(1)
+                .getClickTrackers())).containsOnly("http://companionClickTracking1");
 
         assertThat(imageCompanionAdXmlManagers.get(2).getWidth()).isEqualTo(456);
         assertThat(imageCompanionAdXmlManagers.get(2).getHeight()).isEqualTo(789);
-        assertThat(imageCompanionAdXmlManagers.get(2).getType()).isEqualTo("image/bmp");
-        assertThat(imageCompanionAdXmlManagers.get(2).getImageUrl()).isEqualTo("http://cdn.liverail.com/adasset/229/7969/300x250.bmp");
-        assertThat(imageCompanionAdXmlManagers.get(2).getClickThroughUrl()).isEqualTo("http://clickThroughUrl1.com/");
-        assertThat(imageCompanionAdXmlManagers.get(2).getClickTrackers()).containsOnly("http://trackingUrl1.com/");
+        assertThat(imageCompanionAdXmlManagers.get(2).getResourceXmlManager().getStaticResourceType())
+                .isEqualTo("image/bmp");
+        assertThat(imageCompanionAdXmlManagers.get(2).getResourceXmlManager().getStaticResource())
+                .isEqualTo("http://cdn.liverail.com/adasset/229/7969/300x250.bmp");
+        assertThat(imageCompanionAdXmlManagers.get(2).getClickThroughUrl())
+                .isEqualTo("http://clickThroughUrl1.com/");
+        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(2)
+                .getClickTrackers())).containsOnly("http://companionClickTracking2");
+        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(2)
+                .getCompanionCreativeViewTrackers())).containsOnly("http://trackingUrl1.com/");
 
         assertThat(imageCompanionAdXmlManagers.get(3).getWidth()).isEqualTo(1011);
         assertThat(imageCompanionAdXmlManagers.get(3).getHeight()).isEqualTo(789);
-        assertThat(imageCompanionAdXmlManagers.get(3).getType()).isEqualTo("image/gif");
-        assertThat(imageCompanionAdXmlManagers.get(3).getImageUrl()).isEqualTo("http://cdn.liverail.com/adasset/229/7969/300x250.gif");
-        assertThat(imageCompanionAdXmlManagers.get(3).getClickThroughUrl()).isEqualTo("http://clickThroughUrl2.com/");
-        assertThat(imageCompanionAdXmlManagers.get(3).getClickTrackers()).isEmpty();
+        assertThat(imageCompanionAdXmlManagers.get(3).getResourceXmlManager().getStaticResourceType())
+                .isEqualTo("image/gif");
+        assertThat(imageCompanionAdXmlManagers.get(3).getResourceXmlManager().getStaticResource())
+                .isEqualTo("http://cdn.liverail.com/adasset/229/7969/300x250.gif");
+        assertThat(imageCompanionAdXmlManagers.get(3).getClickThroughUrl()).isEqualTo(
+                "http://clickThroughUrl2.com/");
+        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(3)
+                .getClickTrackers())).containsOnly("http://companionClickTracking3");
+        assertThat(imageCompanionAdXmlManagers.get(3).getCompanionCreativeViewTrackers()).isEmpty();
 
         assertThat(imageCompanionAdXmlManagers.get(4).getWidth()).isEqualTo(300);
         assertThat(imageCompanionAdXmlManagers.get(4).getHeight()).isEqualTo(60);
-        assertThat(imageCompanionAdXmlManagers.get(4).getType()).isEqualTo("application/x-shockwave-flash");
-        assertThat(imageCompanionAdXmlManagers.get(4).getImageUrl()).isEqualTo("http://cdn.liverail.com/adasset4/1331/229/7969/5122396e510b80db6b5ef4013ddabe90.swf");
-        assertThat(imageCompanionAdXmlManagers.get(4).getClickThroughUrl()).isEqualTo("http://clickThroughUrl3.com/");
-        assertThat(imageCompanionAdXmlManagers.get(4).getClickTrackers()).containsOnly("http://trackingUrl2.com/");
+        assertThat(imageCompanionAdXmlManagers.get(4).getResourceXmlManager().getStaticResourceType())
+                .isEqualTo("application/x-shockwave-flash");
+        assertThat(imageCompanionAdXmlManagers.get(4).getResourceXmlManager().getStaticResource())
+                .isEqualTo(
+                        "http://cdn.liverail.com/adasset4/1331/229/7969/5122396e510b80db6b5ef4013ddabe90.swf");
+        assertThat(imageCompanionAdXmlManagers.get(4).getClickThroughUrl()).isEqualTo(
+                "http://clickThroughUrl3.com/");
+        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(4)
+                .getClickTrackers())).containsOnly("http://companionClickTracking4");
+        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(4)
+                .getCompanionCreativeViewTrackers())).containsOnly("http://trackingUrl2.com/");
 
         assertThat(imageCompanionAdXmlManagers.get(5).getWidth()).isEqualTo(299);
         assertThat(imageCompanionAdXmlManagers.get(5).getHeight()).isEqualTo(249);
-        assertThat(imageCompanionAdXmlManagers.get(5).getType()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(5).getImageUrl()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(5).getResourceXmlManager().getStaticResourceType()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(5).getResourceXmlManager().getStaticResource()).isNull();
         assertThat(imageCompanionAdXmlManagers.get(5).getClickThroughUrl()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(5).getClickTrackers())
-                .containsOnly("http://myTrackingURL/firstCompanionCreativeView", "http://myTrackingURL/secondCompanionCreativeView");
+        assertThat(imageCompanionAdXmlManagers.get(5).getClickTrackers()).isEmpty();
+        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(5)
+                .getCompanionCreativeViewTrackers()))
+                .containsOnly("http://myTrackingURL/firstCompanionCreativeView",
+                        "http://myTrackingURL/secondCompanionCreativeView");
 
         assertThat(imageCompanionAdXmlManagers.get(6).getWidth()).isEqualTo(9000);
         assertThat(imageCompanionAdXmlManagers.get(6).getHeight()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(6).getType()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(6).getImageUrl()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(6).getResourceXmlManager().getStaticResourceType()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(6).getResourceXmlManager().getStaticResource()).isNull();
         assertThat(imageCompanionAdXmlManagers.get(6).getClickThroughUrl()).isNull();
         assertThat(imageCompanionAdXmlManagers.get(6).getClickTrackers()).isEmpty();
+        assertThat(imageCompanionAdXmlManagers.get(6).getCompanionCreativeViewTrackers()).isEmpty();
     }
 
     @Test
-    public void getMediaFileUrl_shouldReturnTheCorrectValue() {
-        String url = mXmlManager.getMediaFileUrl();
+    public void getAbsoluteProgressTrackers_withLinearXmlManager_shouldReturnCorrectValues() {
+        List<VastAbsoluteProgressTracker> trackers = mXmlManager.getAdXmlManagers().get(0)
+                .getInLineXmlManager().getLinearXmlManagers().get(0).getAbsoluteProgressTrackers();
 
-        assertThat(url).isEqualTo("http://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4");
-    }
+        assertThat(trackers.size()).isEqualTo(2);
 
-    @Test
-    public void getCustomCtaText_shouldReturnTheCorrectValue() {
-        String customCtaText = mXmlManager.getCustomCtaText();
+        VastAbsoluteProgressTracker tracker0 = trackers.get(0);
+        assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(2000);
+        assertThat(tracker0.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
 
-        assertThat(customCtaText).isEqualTo("custom CTA text");
+        VastAbsoluteProgressTracker tracker1 = trackers.get(1);
+        assertThat(tracker1.getTrackingMilliseconds()).isEqualTo(3670300);
+        assertThat(tracker1.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;" +
+                "src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;" +
+                "rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
     }
 
     @Test
-    public void getCustomSkipText_shouldReturnTheCorrectValue() {
-        String customSkipText = mXmlManager.getCustomSkipText();
+    public void getFractionalTrackers_withLinearXmlManager_shouldReturnCorrectValues() {
+        List<VastFractionalProgressTracker> trackers = mXmlManager.getAdXmlManagers().get(0)
+                .getInLineXmlManager().getLinearXmlManagers().get(0).getFractionalProgressTrackers();
 
-        assertThat(customSkipText).isEqualTo("skip");
-    }
+        assertThat(trackers.size()).isEqualTo(7);
 
-    @Test
-    public void getCustomCloseIconUrl_shouldReturnTheCorrectValue() {
-        String customCloseIconUrl = mXmlManager.getCustomCloseIconUrl();
+        VastFractionalProgressTracker tracker0 = trackers.get(0);
+        assertThat(tracker0.trackingFraction()).isEqualTo(0.13f);
+        assertThat(tracker0.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
 
-        assertThat(customCloseIconUrl).isEqualTo("http://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png");
-    }
+        VastFractionalProgressTracker tracker1 = trackers.get(1);
+        assertThat(tracker1.trackingFraction()).isEqualTo(0.25f);
+        assertThat(tracker1.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
 
-    @Test
-    public void getCustomForceOrientation_shouldReturnTheCorrectValue() {
-        ForceOrientation customForceOrientation = mXmlManager.getCustomForceOrientation();
+        VastFractionalProgressTracker tracker2 = trackers.get(2);
+        assertThat(tracker2.trackingFraction()).isEqualTo(0.25f);
+        assertThat(tracker2.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
 
-        assertThat(customForceOrientation).isEqualTo(ForceOrientation.DEVICE_ORIENTATION);
-    }
+        VastFractionalProgressTracker tracker3 = trackers.get(3);
+        assertThat(tracker3.trackingFraction()).isEqualTo(0.5f);
+        assertThat(tracker3.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
 
-    @Test
-    public void getSkipOffset_shouldReturnTheCorrectValue() {
-        String skipOffset = mXmlManager.getSkipOffset();
+        VastFractionalProgressTracker tracker4 = trackers.get(4);
+        assertThat(tracker4.trackingFraction()).isEqualTo(0.5f);
+        assertThat(tracker4.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
 
-        assertThat(skipOffset).isEqualTo("25%");
+        VastFractionalProgressTracker tracker5 = trackers.get(5);
+        assertThat(tracker5.trackingFraction()).isEqualTo(0.75f);
+        assertThat(tracker5.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker6 = trackers.get(6);
+        assertThat(tracker6.trackingFraction()).isEqualTo(0.75f);
+        assertThat(tracker6.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
     }
 
     @Test
-    public void getVastAdTagURI_shouldReturnTheCorrectValue() {
-        String url = mXmlManager.getVastAdTagURI();
-
-        assertThat(url).isEqualTo("http://0.dsp.dev1.mopub.com/xml");
+    public void getVideoCompleteTrackers_withLinearXmlManager_shouldReturnTheCorrectValue() {
+        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0).getInLineXmlManager().getLinearXmlManagers().get(0).getVideoCompleteTrackers()))
+                .containsOnly("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;" +
+                                "pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;" +
+                                "timestamp=2922389;eid1=13;ecn1=1;etm1=0;",
+                        "http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;" +
+                                "ord=2922389?");
     }
 
     @Test
-    public void parsingMalformedXml_shouldNotCauseProblems() {
-        String badXml = "<im>going<<<to||***crash></,>CDATA[]YOUR_FACE";
+    public void getVideoCloseTrackers_withLinearXmlManager_shouldReturnTheCorrectValue() {
+        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0)
+                .getInLineXmlManager().getLinearXmlManagers().get(0).getVideoCloseTrackers()))
+                .containsOnly("http://www.mopub.com/close?q=ignatius",
+                        "http://www.mopub.com/close?q=j3");
+    }
 
-        VastXmlManager badManager = new VastXmlManager();
+    @Test
+    public void getVideoSkipTrackers_withLinearXmlManager_shouldReturnTheCorrectValue() {
+        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0)
+                .getInLineXmlManager().getLinearXmlManagers().get(0).getVideoSkipTrackers()))
+                .containsOnly("http://www.mopub.com/skip?q=ignatius",
+                        "http://www.mopub.com/skip?q=j3");
+    }
 
-        try {
-            badManager.parseVastXml(badXml);
-        } catch (ParserConfigurationException e) {
-            e.printStackTrace();
-        } catch (IOException e) {
-            e.printStackTrace();
-        } catch (SAXException e) {
-            e.printStackTrace();
-        }
+    @Test
+    public void getClickThroughUrl_withLinearXmlManager_shouldReturnTheCorrectValue() {
+        String url = mXmlManager.getAdXmlManagers().get(0)
+                .getInLineXmlManager().getLinearXmlManagers().get(0).getClickThroughUrl();
 
-        assertThat(badManager.getImpressionTrackers().size()).isEqualTo(0);
+        assertThat(url).isEqualTo("http://www.google.com/support/richmedia");
     }
 
     @Test
-    public void parsingVastWithMalformedNodes_shouldNotCauseProblems() {
-        String badXml = "<VAST><Impression id=\"DART\"></Impression><Tracking event=\"start\"><![CDATA[ good ]]><ExtraNode><![CDATA[ bad ]]></ExtraNode></Tracking></VAST>";
+    public void getClickTrackers_withLinearXmlManager_shouldReturnTheCorrectValue() {
+        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0).getInLineXmlManager().getLinearXmlManagers().get(0).getClickTrackers()))
+                .containsOnly("http://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif",
+                        "http://ad.doubleclick.net/clk;212442087;33815766;i?http://www.google.com/support/richmedia");
+    }
 
-        VastXmlManager badManager = new VastXmlManager();
+    @Test
+    public void getSkipOffset_withLinearXmlManager_shouldReturnTheCorrectValue() {
+        String skipOffset = mXmlManager.getAdXmlManagers().get(0).getInLineXmlManager()
+                .getLinearXmlManagers().get(0).getSkipOffset();
 
-        try {
-            badManager.parseVastXml(badXml);
-        } catch (ParserConfigurationException e) {
-            e.printStackTrace();
-        } catch (IOException e) {
-            e.printStackTrace();
-        } catch (SAXException e) {
-            e.printStackTrace();
-        }
+        assertThat(skipOffset).isEqualTo("25%");
+    }
 
-        assertThat(badManager.getMediaFileUrl()).isEqualTo(null);
-        assertThat(badManager.getFractionalProgressTrackers().size()).isEqualTo(0);
-        assertThat(badManager.getImpressionTrackers().size()).isEqualTo(0);
+    @Test
+    public void getMediaFileUrl_withMediaXmlManager_shouldReturnTheCorrectValue() {
+        String url = mXmlManager.getAdXmlManagers().get(0).getInLineXmlManager()
+                .getLinearXmlManagers().get(0).getMediaXmlManagers().get(0).getMediaUrl();
 
-        List<VastAbsoluteProgressTracker> startTrackers = badManager.getAbsoluteProgressTrackers();
-        assertThat(startTrackers.size()).isEqualTo(1);
-        assertThat(startTrackers.get(0).getTrackingUrl()).isEqualTo("good");
+        assertThat(url).isEqualTo("http://s3.amazonaws.com/uploads.hipchat" +
+                ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4");
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
index 04a32c07..529c4a44 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
@@ -555,10 +555,7 @@ public String build() {
                     paramIfNotEmpty("iso", countryIso) +
                     paramIfNotEmpty("cn", carrierName) +
                     "&ct=" + networkType +
-                    // Maven version
-                    "&av=1.0" +
-                    // Gradle Version
-                    //"&av=" + BuildConfig.VERSION_NAME +
+                    "&av=" + BuildConfig.VERSION_NAME +
                     "&udid=" + PlayServicesUrlRewriter.UDID_TEMPLATE +
                     "&dnt=" + PlayServicesUrlRewriter.DO_NOT_TRACK_TEMPLATE +
                     "&mr=1" +
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ShadowVastVideoView.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ShadowVastVideoView.java
new file mode 100644
index 00000000..b66c9708
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ShadowVastVideoView.java
@@ -0,0 +1,10 @@
+package com.mopub.mobileads.test.support;
+
+import com.mopub.mobileads.VastVideoView;
+
+import org.robolectric.annotation.Implements;
+import org.robolectric.shadows.ShadowVideoView;
+
+@Implements(VastVideoView.class)
+public class ShadowVastVideoView extends ShadowVideoView {
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java
index 8e9afc9c..d2e60e1b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java
@@ -3,7 +3,7 @@
 import android.content.Context;
 
 import com.mopub.mobileads.factories.VastManagerFactory;
-import com.mopub.mobileads.util.vast.VastManager;
+import com.mopub.mobileads.VastManager;
 
 import static org.mockito.Mockito.mock;
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java
new file mode 100644
index 00000000..65eb1f81
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java
@@ -0,0 +1,40 @@
+package com.mopub.mobileads.test.support;
+
+import com.mopub.mobileads.VastTracker;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.Node;
+import org.xml.sax.InputSource;
+
+import java.io.StringReader;
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+
+public class VastUtils {
+    public static Node createNode(String xml) throws Exception {
+        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
+        documentBuilderFactory.setCoalescing(true);
+        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
+        Document document = documentBuilder.parse(new InputSource(new StringReader(xml)));
+        return document.getFirstChild();
+    }
+
+    public static List<VastTracker> stringsToVastTrackers(String... strings) {
+        List<VastTracker> vastTrackers = new ArrayList<VastTracker>(strings.length);
+        for (int i=0; i<strings.length; i++) {
+            vastTrackers.add(new VastTracker(strings[i]));
+        }
+        return vastTrackers;
+    }
+
+    public static List<String> vastTrackersToStrings(List<VastTracker> vastTrackers) {
+        List<String> strings = new ArrayList<String>(vastTrackers.size());
+        for (VastTracker vastTracker : vastTrackers) {
+            strings.add(vastTracker.getTrackingUrl());
+        }
+        return strings;
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/XmlUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java
similarity index 92%
rename from mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/XmlUtilsTest.java
rename to mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java
index af68ea88..426819d4 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/XmlUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java
@@ -1,4 +1,4 @@
-package com.mopub.mobileads.util.vast;
+package com.mopub.mobileads.util;
 
 import com.mopub.common.test.support.SdkTestRunner;
 
@@ -170,7 +170,18 @@ public void getMatchingChildNodes_withEmptyAttributeValues_shouldReturnNone() {
     }
 
     @Test
-    public void testGetListFromDocument() throws Exception {
+    public void getAttributeValue_shouldReturnCorrectValue() throws Exception {
+        Node child = XmlUtils.getFirstMatchingChildNode(purchaseOrderNode, "aw:PurchaseOrder");
+
+        String purchaseOrderNumber = XmlUtils.getAttributeValue(child, "aw:PurchaseOrderNumber");
+        String orderDate = XmlUtils.getAttributeValue(child, "aw:OrderDate");
+
+        assertThat(purchaseOrderNumber).isEqualTo("99503");
+        assertThat(orderDate).isEqualTo("1999-10-20");
+    }
+
+    @Test
+    public void getListFromDocument_shouldReturnCorrectValue() throws Exception {
         // Get all the "aw:PurchaseOrder" nodes. If any of them have an "aw:OrderDate" attribute, extract a Date.
         List<Date> orderDates = XmlUtils.getListFromDocument(testDoc, "aw:PurchaseOrder", "aw:OrderDate", null, new XmlUtils.NodeProcessor<Date>() {
             DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd", Locale.US);
@@ -200,7 +211,7 @@ public Date process(final Node node) {
     }
 
     @Test
-    public void testGetFirstMatchFromDocument() throws Exception {
+    public void getFirstMatchFromDocument_shouldReturnCorrectValue() throws Exception {
         // Get the first "aw:PurchaseOrder" nodes. If it has an "aw:OrderDate" attribute, extract a Date.
         Date orderDate = XmlUtils.getFirstMatchFromDocument(testDoc, "aw:PurchaseOrder", "aw:OrderDate", null, new XmlUtils.NodeProcessor<Date>() {
             DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd", Locale.US);
@@ -222,7 +233,7 @@ public Date process(final Node node) {
     }
 
     @Test
-    public void testGetStringDataAsList_shouldFindDeepNested() throws Exception {
+    public void getStringDataAsList_shouldFindDeepNested() throws Exception {
         final List<String> strings = XmlUtils.getStringDataAsList(testDoc, "aw:Comment", null, null);
         assertThat(strings.size()).isEqualTo(2);
         assertThat(strings.get(0)).isEqualTo("Confirm this is electric");
@@ -230,7 +241,7 @@ public void testGetStringDataAsList_shouldFindDeepNested() throws Exception {
     }
 
     @Test
-    public void testGetFirstMatchingStringData_shouldFindFirstMatch() throws Exception {
+    public void getFirstMatchingStringData_shouldFindFirstMatch() throws Exception {
         final String firstMatch = XmlUtils.getFirstMatchingStringData(testDoc, "aw:Comment", null, null);
         assertThat(firstMatch).isNotNull();
         assertThat(firstMatch).isEqualTo("Confirm this is electric");
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java
deleted file mode 100644
index e13e5a5d..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java
+++ /dev/null
@@ -1,892 +0,0 @@
-package com.mopub.mobileads.util.vast;
-
-import android.app.Activity;
-import android.content.Context;
-import android.view.Display;
-import android.view.WindowManager;
-
-import com.mopub.common.CacheService;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.DeviceUtils;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.tester.org.apache.http.FakeHttpLayer;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.concurrent.Semaphore;
-
-import static com.mopub.mobileads.util.vast.VastManager.VastManagerListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class VastManagerTest {
-    static final String EXTENSIONS_SNIPPET_PLACEHOLDER = "<![CDATA[EXTENSIONS_SNIPPET]]>";
-    static final String TEST_VAST_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='progress' offset='00:00:03.100'>http://myTrackingURL/wrapper/progress</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='close'>http://myTrackingURL/wrapper/close</Tracking><Tracking event='skip'>http://myTrackingURL/wrapper/skip</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks><MediaFiles><MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video1.mp4]]></MediaFile></MediaFiles></Linear></Creative><Creative AdID=\"601364-Companion\"> <CompanionAds><Companion width=\"9000\"></Companion> </CompanionAds></Creative></Creatives><![CDATA[EXTENSIONS_SNIPPET]]></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
-    static final String TEST_NESTED_VAST_XML_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><VAST version='2.0'><Ad id='57722'><InLine><AdSystem version='1.0'>Tapad</AdSystem><AdTitle><![CDATA[PKW6T_LIV_DSN_Audience_TAPAD_3rd Party Audience Targeting_Action Movi]]></AdTitle><Description/><Impression><![CDATA[http://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression><Creatives><Creative sequence='1' id='57722'><Linear><TrackingEvents><Tracking event='close'>http://myTrackingURL/wrapper/nested_close</Tracking><Tracking event='skip'>http://myTrackingURL/wrapper/nested_skip</Tracking></TrackingEvents><Duration>00:00:15</Duration><VideoClicks><ClickThrough><![CDATA[http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com]]></ClickThrough></VideoClicks><MediaFiles><MediaFile delivery='progressive' bitrate='416' width='800' height='480' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video.mp4]]></MediaFile></MediaFiles></Linear></Creative><Creative AdID=\"601364-Companion\"><CompanionAds><Companion id=\"valid\" height=\"250\" width=\"300\"><StaticResource creativeType=\"image/jpeg\">http://demo.tremormedia.com/proddev/vast/Blistex1.jpg</StaticResource><TrackingEvents><Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking><Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking></TrackingEvents><CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough></Companion></CompanionAds></Creative></Creatives><![CDATA[EXTENSIONS_SNIPPET]]></InLine></Ad></VAST>";
-    static final String TEST_VAST_BAD_NEST_URL_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml\"$|||</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative></Creatives></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
-
-    private VastManager subject;
-    private FakeHttpLayer mFakeHttpLayer;
-    private VastManagerListener vastManagerListener;
-    private Activity context;
-    private VastVideoConfiguration vastVideoConfiguration;
-    private Semaphore semaphore;
-
-    @Before
-    public void setup() {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        CacheService.initializeDiskCache(context);
-        subject = new VastManager(context);
-        mFakeHttpLayer = Robolectric.getFakeHttpLayer();
-
-        semaphore = new Semaphore(0);
-        vastManagerListener = mock(VastManagerListener.class);
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                Object[] args = invocationOnMock.getArguments();
-                VastManagerTest.this.vastVideoConfiguration = (VastVideoConfiguration) args[0];
-                semaphore.release();
-                return null;
-            }
-        }).when(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-    }
-
-    private void prepareVastVideoConfiguration() {
-        subject.prepareVastVideoConfiguration(TEST_VAST_XML_STRING, vastManagerListener);
-
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_shouldNotifyTheListenerAndContainTheCorrectVastValues() throws Exception {
-        // Vast redirect responses
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
-        // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-
-        assertThat(vastVideoConfiguration.getNetworkMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
-
-        final String expectedFilePathDiskCache = CacheService.getFilePathDiskCache(vastVideoConfiguration.getNetworkMediaFileUrl());
-        assertThat(vastVideoConfiguration.getDiskMediaFileUrl()).isEqualTo(expectedFilePathDiskCache);
-
-        assertThat(vastVideoConfiguration.getClickThroughUrl()).isEqualTo("http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com");
-        assertThat(vastVideoConfiguration.getImpressionTrackers().size()).isEqualTo(5);
-
-        // Verify quartile trackers
-        assertThat(vastVideoConfiguration.getFractionalTrackers().size()).isEqualTo(3);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(0).trackingFraction()).isEqualTo(0.25f);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(1).trackingFraction()).isEqualTo(0.5f);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(2).trackingFraction()).isEqualTo(0.75f);
-
-        // Verify start tracker.
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().size()).isEqualTo(2);
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(0).getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(1).getTrackingMilliseconds()).isEqualTo(3100);
-
-        assertThat(vastVideoConfiguration.getCompleteTrackers().size()).isEqualTo(1);
-
-        // We specifically added a close tracker and a skip tracker to the nested vast test case as well,
-        // therefore there are two expected trackers total for each type.
-        assertThat(vastVideoConfiguration.getCloseTrackers().size()).isEqualTo(2);
-        assertThat(vastVideoConfiguration.getSkipTrackers().size()).isEqualTo(2);
-        assertThat(vastVideoConfiguration.getClickTrackers().size()).isEqualTo(1);
-
-        final VastCompanionAd vastCompanionAd = vastVideoConfiguration.getVastCompanionAd();
-        assertThat(vastCompanionAd.getWidth()).isEqualTo(300);
-        assertThat(vastCompanionAd.getHeight()).isEqualTo(250);
-        assertThat(vastCompanionAd.getImageUrl()).isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
-        assertThat(vastCompanionAd.getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
-        assertThat(vastCompanionAd.getClickTrackers())
-                .containsOnly("http://myTrackingURL/firstCompanionCreativeView", "http://myTrackingURL/secondCompanionCreativeView");
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_shouldHandleMultipleRedirects() throws Exception {
-        // Vast redirect responses
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_VAST_XML_STRING);
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_VAST_XML_STRING);
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
-        // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-
-        // at this point it should have 3 sets of data from TEST_VAST_XML_STRING and one set from TEST_NESTED_VAST_XML_STRING
-        assertThat(vastVideoConfiguration.getNetworkMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
-        final String expectedFilePathDiskCache = CacheService.getFilePathDiskCache(vastVideoConfiguration.getNetworkMediaFileUrl());
-        assertThat(vastVideoConfiguration.getDiskMediaFileUrl()).isEqualTo(expectedFilePathDiskCache);
-
-        assertThat(vastVideoConfiguration.getClickThroughUrl()).isEqualTo("http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com");
-        assertThat(vastVideoConfiguration.getImpressionTrackers().size()).isEqualTo(13);
-
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().size()).isEqualTo(6);
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(0).getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(1).getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(2).getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(3).getTrackingMilliseconds()).isEqualTo(3100);
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(4).getTrackingMilliseconds()).isEqualTo(3100);
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(5).getTrackingMilliseconds()).isEqualTo(3100);
-
-
-        assertThat(vastVideoConfiguration.getFractionalTrackers().size()).isEqualTo(9);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(0).trackingFraction()).isEqualTo(0.25f);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(1).trackingFraction()).isEqualTo(0.25f);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(2).trackingFraction()).isEqualTo(0.25f);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(3).trackingFraction()).isEqualTo(0.5f);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(4).trackingFraction()).isEqualTo(0.5f);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(5).trackingFraction()).isEqualTo(0.5f);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(6).trackingFraction()).isEqualTo(0.75f);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(7).trackingFraction()).isEqualTo(0.75f);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(8).trackingFraction()).isEqualTo(0.75f);
-
-        assertThat(vastVideoConfiguration.getCompleteTrackers().size()).isEqualTo(3);
-        assertThat(vastVideoConfiguration.getCloseTrackers().size()).isEqualTo(4);
-        assertThat(vastVideoConfiguration.getSkipTrackers().size()).isEqualTo(4);
-        assertThat(vastVideoConfiguration.getClickTrackers().size()).isEqualTo(3);
-
-        final VastCompanionAd vastCompanionAd = vastVideoConfiguration.getVastCompanionAd();
-        assertThat(vastCompanionAd.getWidth()).isEqualTo(300);
-        assertThat(vastCompanionAd.getHeight()).isEqualTo(250);
-        assertThat(vastCompanionAd.getImageUrl()).isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
-        assertThat(vastCompanionAd.getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
-        assertThat(vastCompanionAd.getClickTrackers())
-                .containsOnly("http://myTrackingURL/firstCompanionCreativeView", "http://myTrackingURL/secondCompanionCreativeView");
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_shouldReturnCorrectVastValuesWhenAVastRedirectFails() throws Exception {
-        // Vast redirect response
-        mFakeHttpLayer.addPendingHttpResponse(404, "");
-        // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-
-        assertThat(vastVideoConfiguration.getNetworkMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video1.mp4");
-
-        final String expectedFilePathDiskCache = CacheService.getFilePathDiskCache(vastVideoConfiguration.getNetworkMediaFileUrl());
-        assertThat(vastVideoConfiguration.getDiskMediaFileUrl()).isEqualTo(expectedFilePathDiskCache);
-
-        assertThat(vastVideoConfiguration.getClickThroughUrl()).isEqualTo(null);
-        assertThat(vastVideoConfiguration.getImpressionTrackers().size()).isEqualTo(4);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().size()).isEqualTo(3);
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withNoExtensions_shouldContainTheCorrectDefaultExtensionValues() throws Exception {
-        // Vast redirect response to XML without VAST extensions
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
-        // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-
-        assertThat(vastVideoConfiguration.getCustomCtaText()).isNull();
-        assertThat(vastVideoConfiguration.getCustomSkipText()).isNull();
-        assertThat(vastVideoConfiguration.getCustomCloseIconUrl()).isNull();
-        assertThat(vastVideoConfiguration.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.FORCE_LANDSCAPE);
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withExtensionsUnderWrapper_shouldContainTheCorrectCustomExtensionValues() throws Exception {
-        // Vast redirect response to XML without extensions
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
-        // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
-
-        // Add extensions under Wrapper element in TEST_VAST_XML_STRING
-        subject.prepareVastVideoConfiguration(
-                TEST_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
-                        "<Extensions>" +
-                            "<Extension type=\"MoPub\">" +
-                                "<MoPubCtaText>custom CTA text</MoPubCtaText>" +
-                                "<MoPubSkipText>skip</MoPubSkipText>" +
-                                "<MoPubCloseIcon>http://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png</MoPubCloseIcon>" +
-                                "<MoPubForceOrientation>device</MoPubForceOrientation>" +
-                            "</Extension>" +
-                        "</Extensions>"),
-                vastManagerListener);
-
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
-        semaphore.acquire();
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-
-        // Verify custom extensions
-        assertThat(vastVideoConfiguration.getCustomCtaText()).isEqualTo("custom CTA text");
-        assertThat(vastVideoConfiguration.getCustomSkipText()).isEqualTo("skip");
-        assertThat(vastVideoConfiguration.getCustomCloseIconUrl()).isEqualTo("http://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png");
-        assertThat(vastVideoConfiguration.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.DEVICE_ORIENTATION);
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withExtensionsUnderInline_shouldContainTheCorrectCustomExtensionValues() throws Exception {
-        // Vast redirect response to XML with extensions under Inline element
-        mFakeHttpLayer.addPendingHttpResponse(200,
-                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
-                        "<Extensions>" +
-                            "<Extension type=\"MoPub\">" +
-                                "<MoPubCtaText>custom CTA text</MoPubCtaText>" +
-                                "<MoPubSkipText>skip</MoPubSkipText>" +
-                                "<MoPubCloseIcon>http://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png</MoPubCloseIcon>" +
-                                "<MoPubForceOrientation>device</MoPubForceOrientation>" +
-                            "</Extension>" +
-                        "</Extensions>"));
-        // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-
-        // Verify custom extensions
-        assertThat(vastVideoConfiguration.getCustomCtaText()).isEqualTo("custom CTA text");
-        assertThat(vastVideoConfiguration.getCustomSkipText()).isEqualTo("skip");
-        assertThat(vastVideoConfiguration.getCustomCloseIconUrl()).isEqualTo("http://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png");
-        assertThat(vastVideoConfiguration.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.DEVICE_ORIENTATION);
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withExtensionsUnderBothWrapperAndInline_shouldContainLastParsedCustomExtensionValues() throws Exception {
-        // Vast redirect response to XML with extensions under Inline element in TEST_NESTED_VAST_XML_STRING, will be parsed last
-        mFakeHttpLayer.addPendingHttpResponse(200,
-                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
-                        "<Extensions>" +
-                            "<Extension type=\"MoPub\">" +
-                                "<MoPubCtaText>CTA 2</MoPubCtaText>" +
-                                "<MoPubSkipText>skip 2</MoPubSkipText>" +
-                                "<MoPubCloseIcon>http://ton.twitter.com/exchange-media/images/v4/star_icon_3x_2.png</MoPubCloseIcon>" +
-                                "<MoPubForceOrientation>landscape</MoPubForceOrientation>" +
-                            "</Extension>" +
-                        "</Extensions>"));
-        // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
-
-        // Also add extensions under Wrapper element in TEST_VAST_XML_STRING
-        subject.prepareVastVideoConfiguration(
-                TEST_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
-                        "<Extensions>" +
-                            "<Extension type=\"MoPub\">" +
-                                "<MoPubCtaText>CTA 1</MoPubCtaText>" +
-                                "<MoPubSkipText>skip 1</MoPubSkipText>" +
-                                "<MoPubCloseIcon>http://ton.twitter.com/exchange-media/images/v4/star_icon_3x_1.png</MoPubCloseIcon>" +
-                                "<MoPubForceOrientation>device orientation</MoPubForceOrientation>" +
-                            "</Extension>" +
-                        "</Extensions>"),
-                vastManagerListener);
-
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-
-        // Verify custom extension values are the ones last parsed in TEST_NESTED_VAST_XML_STRING
-        assertThat(vastVideoConfiguration.getCustomCtaText()).isEqualTo("CTA 2");
-        assertThat(vastVideoConfiguration.getCustomSkipText()).isEqualTo("skip 2");
-        assertThat(vastVideoConfiguration.getCustomCloseIconUrl()).isEqualTo("http://ton.twitter.com/exchange-media/images/v4/star_icon_3x_2.png");
-        assertThat(vastVideoConfiguration.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.FORCE_LANDSCAPE);
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withCustomCtaTextAsSingleSpace_shouldReturnEmptyString() throws Exception {
-        // Vast redirect response
-        mFakeHttpLayer.addPendingHttpResponse(200,
-                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
-                        "<Extensions>" +
-                            "<Extension type=\"MoPub\">" +
-                                "<MoPubCtaText> </MoPubCtaText>" +     // single space, i.e. no text
-                            "</Extension>" +
-                        "</Extensions>"));
-        // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-        assertThat(vastVideoConfiguration.getCustomCtaText()).isEmpty();
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withCustomCtaTextLongerThan15Chars_shouldReturnNull() throws Exception {
-        // Vast redirect response
-        mFakeHttpLayer.addPendingHttpResponse(200,
-                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
-                        "<Extensions>" +
-                            "<Extension type=\"MoPub\">" +
-                                "<MoPubCtaText>1234567890123456</MoPubCtaText>" +     // 16 chars
-                            "</Extension>" +
-                        "</Extensions>"));
-        // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-        assertThat(vastVideoConfiguration.getCustomCtaText()).isNull();
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withCustomSkipTextLongerThan8Chars_shouldReturnNull() throws Exception {
-        // Vast redirect response
-        mFakeHttpLayer.addPendingHttpResponse(200,
-                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
-                        "<Extensions>" +
-                            "<Extension type=\"MoPub\">" +
-                                "<MoPubSkipText>123456789</MoPubSkipText>" +     // 9 chars
-                            "</Extension>" +
-                        "</Extensions>"));
-        // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-        assertThat(vastVideoConfiguration.getCustomSkipText()).isNull();
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withInvalidCustomForceOrientation_shouldReturnDefaultForceLandscapeOrientation() throws Exception {
-        // Vast redirect response
-        mFakeHttpLayer.addPendingHttpResponse(200,
-                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
-                        "<Extensions>" +
-                            "<Extension type=\"MoPub\">" +
-                                "<MoPubForceOrientation>abcd</MoPubForceOrientation>" +   // invalid value
-                            "</Extension>" +
-                        "</Extensions>"));
-        // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-        assertThat(vastVideoConfiguration.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.FORCE_LANDSCAPE);
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withCustomForceOrientationInMixedCaseAndUntrimmed_shouldReturnCustomForceOrientation() throws Exception {
-        // Vast redirect response
-        mFakeHttpLayer.addPendingHttpResponse(200,
-                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
-                        "<Extensions>" +
-                            "<Extension type=\"MoPub\">" +
-                                "<MoPubForceOrientation> PortRAIT  </MoPubForceOrientation>" +
-                            "</Extension>" +
-                        "</Extensions>"));
-        // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-        assertThat(vastVideoConfiguration.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.FORCE_PORTRAIT);
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withValidPercentSkipOffset_shouldReturnCorrectValue() throws Exception {
-        // Vast redirect response
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='25%'>"));
-        // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-
-        assertThat(vastVideoConfiguration.getSkipOffset()).isEqualTo("25%");
-    }
-
-
-    @Test
-    public void prepareVastVideoConfiguration_withValidAbsoluteSkipOffset_shouldReturnCorrectValue() throws Exception {
-        // Vast redirect response
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='  00:03:14 '>"));
-        // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-
-        assertThat(vastVideoConfiguration.getSkipOffset()).isEqualTo("00:03:14");
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withValidAbsoluteSkipOffsetWithExtraSpace_shouldReturnCorrectTrimmedValue() throws Exception {
-        // Vast redirect response
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='  00:03:14.159 '>"));
-        // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-
-        assertThat(vastVideoConfiguration.getSkipOffset()).isEqualTo("00:03:14.159");
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withSkipOffsets_shouldReturnLastParsedValue() throws Exception {
-        // Vast redirect response with skipoffset in percent format
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='25%'>"));
-        // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
-
-        // Also add a skipoffset in absolute format
-        subject.prepareVastVideoConfiguration(
-                TEST_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='00:03:14'>"),
-                vastManagerListener);
-
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-
-        // Verify that the last parsed skipoffset value is returned
-        assertThat(vastVideoConfiguration.getSkipOffset()).isEqualTo("25%");
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withEmptySkipOffset_shouldReturnNull() throws Exception {
-        // Vast redirect response
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset=' '>"));
-        // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-
-        assertThat(vastVideoConfiguration.getSkipOffset()).isNull();
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withNoMediaUrlInXml_shouldReturnNull() throws Exception {
-        subject.prepareVastVideoConfiguration(TEST_VAST_BAD_NEST_URL_XML_STRING, vastManagerListener);
-
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
-        assertThat(vastVideoConfiguration).isEqualTo(null);
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withNullXml_shouldReturnNull() throws Exception {
-        subject.prepareVastVideoConfiguration(null, vastManagerListener);
-
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
-        assertThat(vastVideoConfiguration).isEqualTo(null);
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withEmptyXml_shouldReturnNull() throws Exception {
-        subject.prepareVastVideoConfiguration("", vastManagerListener);
-
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
-        assertThat(vastVideoConfiguration).isEqualTo(null);
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withVideoInDiskCache_shouldNotDownloadVideo() throws Exception {
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
-
-        CacheService.putToDiskCache("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4", "video_data".getBytes());
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        assertThat(mFakeHttpLayer.getSentHttpRequestInfos().size()).isEqualTo(1);
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-        assertThat(vastVideoConfiguration.getDiskMediaFileUrl())
-                .isEqualTo(CacheService.getFilePathDiskCache("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4"));
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withUninitializedDiskCache_shouldReturnNull() throws Exception {
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
-        assertThat(vastVideoConfiguration).isEqualTo(null);
-    }
-
-    @Test
-    public void cancel_shouldCancelBackgroundProcessingAndNotNotifyListenerWithNull() throws Exception {
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
-
-        Robolectric.getBackgroundScheduler().pause();
-
-        subject.prepareVastVideoConfiguration(TEST_VAST_XML_STRING, vastManagerListener);
-
-        subject.cancel();
-
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
-        assertThat(vastVideoConfiguration).isEqualTo(null);
-    }
-
-    @Test
-    public void getBestMediaFileUrl_shouldReturnMediaFileUrl() throws Exception {
-        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, "video/mp4", "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withNullMediaType_shouldReturnNull() throws Exception {
-        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, null, "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isNull();
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withIncompatibleMediaType_shouldReturnNull() throws Exception {
-        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, "video/rubbish", "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isNull();
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withNullMediaUrl_shouldReturnNull() throws Exception {
-        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, "video/mp4", null);
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isNull();
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withNullDimension_shouldReturnMediaFileUrl() throws Exception {
-        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(null, 250, "video/mp4", "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withZeroDimension_shouldReturnMediaFileUrl() throws Exception {
-        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(0, 250, "video/mp4", "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withNegativeDimension_shouldReturnMediaFileUrl() throws Exception {
-        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(-1, 250, "video/mp4", "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withSameAspectRatios_shouldReturnUrlWithAreaCloserToScreenArea1() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Triple screen size
-        final VastXmlManager.MediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(2400, 1440, "video/mp4", "video_url1");
-        // Double screen size
-        final VastXmlManager.MediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(1600, 960, "video/mp4", "video_url2");
-
-        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url2");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withSameAspectRatios_shouldReturnUrlWithAreaCloserToScreenArea2() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Triple screen size
-        final VastXmlManager.MediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(2400, 1440, "video/mp4", "video_url1");
-        // Half screen size
-        final VastXmlManager.MediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(400, 240, "video/mp4", "video_url2");
-
-        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url2");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withSameArea_shouldReturnUrlWithAspectRatioCloserToScreenAspectRatio() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Landscape
-        final VastXmlManager.MediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(400, 240, "video/mp4", "video_url1");
-        // Portrait
-        final VastXmlManager.MediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(240, 400, "video/mp4", "video_url2");
-
-        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url1");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withInvalidMediaTypeAndNullDimension_shouldReturnUrlWithNullDimension() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Invalid media type
-        final VastXmlManager.MediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(800, 480, "video/invalid", "video_url1");
-        // Null dimension
-        final VastXmlManager.MediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(null, null, "video/mp4", "video_url2");
-
-        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url2");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withInvalidMediaTypeAndNullMediaType_shouldReturnNull() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        final VastXmlManager.MediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(800, 480, "video/invalid", "video_url1");
-        final VastXmlManager.MediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(800, 480, null, "video_url2");
-
-        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
-        assertThat(bestMediaFileUrl).isNull();
-    }
-
-    @Test
-    public void getBestCompanionAd_shouldReturnCompanionAd() throws Exception {
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(300, 250, "image/jpeg", "image_url");
-
-        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
-        assertCompanionAdsAreEqual(companionXmlManager, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAd_withNullMediaType_shouldReturnNull() throws Exception {
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(300, 250, null, "image_url");
-
-        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
-        assertThat(bestCompanionAd).isNull();
-    }
-
-    @Test
-    public void getBestCompanionAd_withIncompatibleMediaType_shouldReturnNull() throws Exception {
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(300, 250, "image/rubbish", "image_url");
-
-        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
-        assertThat(bestCompanionAd).isNull();
-    }
-
-    @Test
-    public void getBestCompanionAd_withNullImageUrl_shouldReturnNull() throws Exception {
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(300, 250, "image/png", null);
-
-        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
-        assertThat(bestCompanionAd).isNull();
-    }
-
-    @Test
-    public void getBestCompanionAd_withNullDimension_shouldReturnCompanionAd() throws Exception {
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(null, 250, "image/png", "image_url");
-
-        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
-        assertCompanionAdsAreEqual(companionXmlManager, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAd_withZeroDimension_shouldReturnMediaFileUrl() throws Exception {
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(0, 250, "image/png", "image_url");
-
-        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
-        assertCompanionAdsAreEqual(companionXmlManager, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAd_withNegativeDimension_shouldReturnMediaFileUrl() throws Exception {
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(-300, 250, "image/png", "image_url");
-
-        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
-        assertCompanionAdsAreEqual(companionXmlManager, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAd_withSameAspectRatios_shouldReturnCompanionAdWithAreaCloserToScreenArea1() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Triple screen size
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager1 = initializeCompanionXmlManagerMock(2400, 1440, "image/png", "image_url1");
-        // Double screen size
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager2 = initializeCompanionXmlManagerMock(1600, 960, "image/bmp", "image_url2");
-
-        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager1, companionXmlManager2));
-        assertCompanionAdsAreEqual(companionXmlManager2, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAd_withSameAspectRatios_shouldReturnCompanionAdWithAreaCloserToScreenArea2() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Triple screen size
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager1 = initializeCompanionXmlManagerMock(2400, 1440, "image/png", "image_url1");
-        // Half screen size
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager2 = initializeCompanionXmlManagerMock(400, 240, "image/bmp", "image_url2");
-
-        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager1, companionXmlManager2));
-        assertCompanionAdsAreEqual(companionXmlManager2, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAd_withSameArea_shouldReturnCompanionAdWithAspectRatioCloserToScreenAspectRatio() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Landscape
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager1 = initializeCompanionXmlManagerMock(400, 240, "image/png", "image_url1");
-        // Portrait
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager2 = initializeCompanionXmlManagerMock(240, 400, "image/bmp", "image_url2");
-
-        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager1, companionXmlManager2));
-        assertCompanionAdsAreEqual(companionXmlManager1, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAd_withInvalidMediaTypeAndNullDimension_shouldReturnCompanionAdWithNullDimension() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager1 = initializeCompanionXmlManagerMock(800, 480, "image/invalid", "image_url1");
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager2 = initializeCompanionXmlManagerMock(null, null, "image/bmp", "image_url2");
-
-        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager1, companionXmlManager2));
-        assertCompanionAdsAreEqual(companionXmlManager2, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAdithInvalidMediaTypeAndNullMediaType_shouldReturnNull() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager1 = initializeCompanionXmlManagerMock(800, 480, "image/invalid", "image_url1");
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager2 = initializeCompanionXmlManagerMock(800, 480, null, "image_url2");
-
-        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager1, companionXmlManager2));
-        assertThat(bestCompanionAd).isEqualTo(null);
-    }
-
-    private VastXmlManager.MediaXmlManager initializeMediaXmlManagerMock(
-            final Integer width,
-            final Integer height,
-            final String type,
-            final String mediaUrl) {
-        VastXmlManager.MediaXmlManager mediaXmlManager = mock(VastXmlManager.MediaXmlManager.class);
-        when(mediaXmlManager.getWidth()).thenReturn(width);
-        when(mediaXmlManager.getHeight()).thenReturn(height);
-        when(mediaXmlManager.getType()).thenReturn(type);
-        when(mediaXmlManager.getMediaUrl()).thenReturn(mediaUrl);
-        return mediaXmlManager;
-    }
-
-    private VastXmlManager.ImageCompanionAdXmlManager initializeCompanionXmlManagerMock(
-            final Integer width,
-            final Integer height,
-            final String type,
-            final String imageUrl) {
-        VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = mock(VastXmlManager.ImageCompanionAdXmlManager.class);
-        when(companionXmlManager.getWidth()).thenReturn(width);
-        when(companionXmlManager.getHeight()).thenReturn(height);
-        when(companionXmlManager.getType()).thenReturn(type);
-        when(companionXmlManager.getImageUrl()).thenReturn(imageUrl);
-        return companionXmlManager;
-    }
-
-    private void assertCompanionAdsAreEqual(
-            final VastXmlManager.ImageCompanionAdXmlManager imageCompanionAdXmlManager,
-            final VastCompanionAd vastCompanionAd) {
-        final VastCompanionAd vastCompanionAd1 = new VastCompanionAd(
-                imageCompanionAdXmlManager.getWidth(),
-                imageCompanionAdXmlManager.getHeight(),
-                imageCompanionAdXmlManager.getImageUrl(),
-                imageCompanionAdXmlManager.getClickThroughUrl(),
-                new ArrayList<String>(imageCompanionAdXmlManager.getClickTrackers())
-        );
-        assertCompanionAdsAreEqual(vastCompanionAd, vastCompanionAd1);
-    }
-
-    private void assertCompanionAdsAreEqual(
-            final VastCompanionAd vastCompanionAd1,
-            final VastCompanionAd vastCompanionAd2) {
-        assertThat(vastCompanionAd1.getWidth()).isEqualTo(vastCompanionAd2.getWidth());
-        assertThat(vastCompanionAd1.getHeight()).isEqualTo(vastCompanionAd2.getHeight());
-        assertThat(vastCompanionAd1.getImageUrl()).isEqualTo(vastCompanionAd2.getImageUrl());
-        assertThat(vastCompanionAd1.getClickThroughUrl()).isEqualTo(vastCompanionAd2.getClickThroughUrl());
-        assertThat(vastCompanionAd1.getClickTrackers()).isEqualTo(vastCompanionAd2.getClickTrackers());
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastVideoConfigurationTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastVideoConfigurationTest.java
deleted file mode 100644
index 6f78a9a0..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastVideoConfigurationTest.java
+++ /dev/null
@@ -1,53 +0,0 @@
-package com.mopub.mobileads.util.vast;
-
-import com.mopub.mobileads.VastAbsoluteProgressTracker;
-import com.mopub.mobileads.VastFractionalProgressTracker;
-
-import org.junit.Test;
-
-import java.util.ArrayList;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-public class VastVideoConfigurationTest {
-
-    @Test
-    public void testAddFractionalTrackers_multipleTimes_shouldBeSorted() throws Exception {
-        ArrayList<VastFractionalProgressTracker> testSet1 = new ArrayList<VastFractionalProgressTracker>();
-        testSet1.add(new VastFractionalProgressTracker("test1a", 0.24f));
-        testSet1.add(new VastFractionalProgressTracker("test1b", 0.5f));
-        testSet1.add(new VastFractionalProgressTracker("test1c", 0.91f));
-
-        ArrayList<VastFractionalProgressTracker> testSet2 = new ArrayList<VastFractionalProgressTracker>();
-        testSet2.add(new VastFractionalProgressTracker("test2a", 0.14f));
-        testSet2.add(new VastFractionalProgressTracker("test2b", 0.6f));
-        testSet2.add(new VastFractionalProgressTracker("test2c", 0.71f));
-
-        VastVideoConfiguration subject = new VastVideoConfiguration();
-
-        subject.addFractionalTrackers(testSet1);
-        subject.addFractionalTrackers(testSet2);
-
-        assertThat(subject.getFractionalTrackers()).isSorted();
-    }
-
-    @Test
-    public void testAddAbsoluteTrackers_multipleTimes_shouldBesSorted() throws Exception {
-        ArrayList<VastAbsoluteProgressTracker> testSet1 = new ArrayList<VastAbsoluteProgressTracker>();
-        testSet1.add(new VastAbsoluteProgressTracker("test1a", 1000));
-        testSet1.add(new VastAbsoluteProgressTracker("test1b", 10000));
-        testSet1.add(new VastAbsoluteProgressTracker("test1c", 50000));
-
-        ArrayList<VastAbsoluteProgressTracker> testSet2 = new ArrayList<VastAbsoluteProgressTracker>();
-        testSet2.add(new VastAbsoluteProgressTracker("test2a", 1100));
-        testSet2.add(new VastAbsoluteProgressTracker("test2b", 9000));
-        testSet2.add(new VastAbsoluteProgressTracker("test2c", 62000));
-
-        VastVideoConfiguration subject = new VastVideoConfiguration();
-
-        subject.addAbsoluteTrackers(testSet1);
-        subject.addAbsoluteTrackers(testSet2);
-
-        assertThat(subject.getAbsoluteTrackers()).isSorted();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregatorTest.java
deleted file mode 100644
index bcdb76eb..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregatorTest.java
+++ /dev/null
@@ -1,71 +0,0 @@
-package com.mopub.mobileads.util.vast;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.tester.org.apache.http.FakeHttpLayer;
-
-import java.util.List;
-import java.util.concurrent.Semaphore;
-
-import static com.mopub.mobileads.util.vast.VastXmlManagerAggregator.VastXmlManagerAggregatorListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyListOf;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-
-@RunWith(SdkTestRunner.class)
-public class VastXmlManagerAggregatorTest {
-    static final String TEST_VAST_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks><MediaFiles><MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video1.mp4]]></MediaFile></MediaFiles></Linear></Creative><Creative AdID=\"601364-Companion\"> <CompanionAds><Companion width=\"9000\"></Companion> </CompanionAds></Creative></Creatives></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
-    static final String TEST_NESTED_VAST_XML_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><VAST version='2.0'><Ad id='57722'><InLine><AdSystem version='1.0'>Tapad</AdSystem><AdTitle><![CDATA[PKW6T_LIV_DSN_Audience_TAPAD_3rd Party Audience Targeting_Action Movi]]></AdTitle><Description/><Impression><![CDATA[http://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression><Creatives><Creative sequence='1' id='57722'><Linear><Duration>00:00:15</Duration><VideoClicks><ClickThrough><![CDATA[http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com]]></ClickThrough></VideoClicks><MediaFiles><MediaFile delivery='progressive' bitrate='416' width='800' height='480' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video.mp4]]></MediaFile></MediaFiles></Linear></Creative><Creative AdID=\"601364-Companion\"><CompanionAds><Companion id=\"valid\" height=\"250\" width=\"300\"><StaticResource creativeType=\"image/jpeg\">http://demo.tremormedia.com/proddev/vast/Blistex1.jpg</StaticResource><TrackingEvents><Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking><Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking></TrackingEvents><CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough></Companion></CompanionAds></Creative></Creatives></InLine></Ad></VAST>";
-    static final String TEST_VAST_BAD_NEST_URL_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml\"$|||</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative></Creatives></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
-
-    private FakeHttpLayer mFakeHttpLayer;
-    private Semaphore semaphore;
-    private VastXmlManagerAggregatorListener vastXmlManagerAggregatorListener;
-    private VastXmlManagerAggregator subject;
-    private List<VastXmlManager> vastXmlManagers;
-
-    @Before
-    public void setup() {
-        mFakeHttpLayer = Robolectric.getFakeHttpLayer();
-
-        semaphore = new Semaphore(0);
-        vastXmlManagerAggregatorListener = mock(VastXmlManagerAggregatorListener.class);
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                Object[] args = invocationOnMock.getArguments();
-                VastXmlManagerAggregatorTest.this.vastXmlManagers = (List<VastXmlManager>) args[0];
-                semaphore.release();
-                return null;
-            }
-        }).when(vastXmlManagerAggregatorListener).onAggregationComplete(anyListOf(VastXmlManager.class));
-
-        subject = new VastXmlManagerAggregator(vastXmlManagerAggregatorListener);
-    }
-
-    // NOTE most of the functionality of this class is tested through VastManagerTest
-    // through integration tests
-
-    @Test
-    public void processVast_shouldNotFollowRedirectsOnceTheLimitHasBeenReached() throws Exception {
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
-
-        subject.setTimesFollowedVastRedirect(VastXmlManagerAggregator.MAX_TIMES_TO_FOLLOW_VAST_REDIRECT);
-        subject.execute(TEST_VAST_XML_STRING);
-        semaphore.acquire();
-
-        assertThat(vastXmlManagers.size()).isEqualTo(1);
-        assertThat(vastXmlManagers.get(0).getMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video1.mp4");
-        assertThat(vastXmlManagers.get(0).getClickThroughUrl()).isEqualTo(null);
-        assertThat(vastXmlManagers.get(0).getImpressionTrackers().size()).isEqualTo(4);
-        assertThat(vastXmlManagers.get(0).getFractionalProgressTrackers().size()).isEqualTo(3);
-    }
-
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
index de6f3239..7ecdaadb 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
@@ -1,11 +1,15 @@
 package com.mopub.mraid;
 
+import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
+import android.os.Build;
+import android.webkit.WebSettings;
 import android.webkit.WebViewClient;
 
 import com.mopub.common.AdReport;
+import com.mopub.common.Constants;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mraid.MraidBridge.MraidBridgeListener;
 import com.mopub.mraid.MraidBridge.MraidWebView;
@@ -19,6 +23,7 @@
 import org.mockito.Captor;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import java.net.URI;
 import java.util.HashMap;
@@ -26,6 +31,7 @@
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyBoolean;
 import static org.mockito.Matchers.anyMapOf;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.eq;
@@ -34,6 +40,7 @@
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
@@ -43,6 +50,7 @@
     @Mock AdReport mockAdReport;
     @Mock(answer = Answers.RETURNS_DEEP_STUBS) MraidWebView mockBannerWebView;
     @Mock(answer = Answers.RETURNS_DEEP_STUBS) MraidWebView mockInterstitialWebView;
+    @Mock WebSettings mockWebSettings;
     @Captor ArgumentCaptor<WebViewClient> bannerWebViewClientCaptor;
 
     private Activity activity;
@@ -55,18 +63,64 @@ public void setUp() {
 
         subjectBanner = new MraidBridge(mockAdReport, PlacementType.INLINE, mockNativeCommandHandler);
         subjectBanner.setMraidBridgeListener(mockBridgeListener);
-        subjectBanner.attachView(mockBannerWebView);
 
         subjectInterstitial = new MraidBridge(mockAdReport, PlacementType.INTERSTITIAL, mockNativeCommandHandler);
         subjectInterstitial.setMraidBridgeListener(mockBridgeListener);
+    }
+
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Config(reportSdk = Build.VERSION_CODES.JELLY_BEAN_MR1, emulateSdk = Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Test
+    public void attachView_atLeastJellyBeanMr1_withInterstitial_shouldAutoPlayVideo() {
+        when(mockInterstitialWebView.getSettings()).thenReturn(mockWebSettings);
+
         subjectInterstitial.attachView(mockInterstitialWebView);
 
-        verify(mockBannerWebView).setWebViewClient(bannerWebViewClientCaptor.capture());
-        reset(mockBannerWebView);
+        verify(mockWebSettings).setMediaPlaybackRequiresUserGesture(false);
+    }
+
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Config(reportSdk = Build.VERSION_CODES.JELLY_BEAN_MR1, emulateSdk = Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Test
+    public void attachView_atLeastJellyBeanMr1_withInline_shouldNotAutoPlayVideo() {
+        when(mockBannerWebView.getSettings()).thenReturn(mockWebSettings);
+
+        subjectBanner.attachView(mockBannerWebView);
+
+        verify(mockWebSettings, never()).setMediaPlaybackRequiresUserGesture(anyBoolean());
+    }
+
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Config(reportSdk = Build.VERSION_CODES.JELLY_BEAN, emulateSdk = Build.VERSION_CODES.JELLY_BEAN)
+    @Test
+    public void attachView_belowJellyBeanMr1_withInterstitial_shouldNotAutoPlayVideo() {
+        when(mockInterstitialWebView.getSettings()).thenReturn(mockWebSettings);
+
+        subjectInterstitial.attachView(mockInterstitialWebView);
+
+        // Disregard setting of javascript
+        verify(mockWebSettings).setJavaScriptEnabled(anyBoolean());
+        // Ensure mockWebSettings.setMediaPlaybackRequiresUserGesture is never called
+        verifyNoMoreInteractions(mockWebSettings);
+    }
+
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Config(reportSdk = Build.VERSION_CODES.JELLY_BEAN, emulateSdk = Build.VERSION_CODES.JELLY_BEAN)
+    @Test
+    public void attachView_belowJellyBeanMr1_withInline_shouldNotAutoPlayVideo() {
+        when(mockBannerWebView.getSettings()).thenReturn(mockWebSettings);
+
+        subjectBanner.attachView(mockBannerWebView);
+
+        // Disregard setting of javascript
+        verify(mockWebSettings).setJavaScriptEnabled(anyBoolean());
+        // Ensure mockWebSettings.setMediaPlaybackRequiresUserGesture is never called
+        verifyNoMoreInteractions(mockWebSettings);
     }
 
     @Test
     public void attachView_thenDetach_shouldSetMRaidWebView_thenShouldClear() {
+        attachWebViews();
         assertThat(subjectBanner.getMraidWebView()).isEqualTo(mockBannerWebView);
 
         subjectBanner.detach();
@@ -75,6 +129,7 @@ public void attachView_thenDetach_shouldSetMRaidWebView_thenShouldClear() {
 
     @Test
     public void attachView_thenOnPageFinished_shouldFireReady() {
+        attachWebViews();
         bannerWebViewClientCaptor.getValue().onPageFinished(mockBannerWebView, "fake://url");
 
         verify(mockBridgeListener).onPageLoaded();
@@ -82,6 +137,7 @@ public void attachView_thenOnPageFinished_shouldFireReady() {
 
     @Test
     public void attachView_thenOnPageFinished_twice_shouldNotFireReadySecondTime() {
+        attachWebViews();
         bannerWebViewClientCaptor.getValue().onPageFinished(mockBannerWebView, "fake://url");
         bannerWebViewClientCaptor.getValue().onPageFinished(mockBannerWebView, "fake://url2");
 
@@ -90,14 +146,16 @@ public void attachView_thenOnPageFinished_twice_shouldNotFireReadySecondTime() {
 
     @Test
     public void attachView_thenSetContentHtml_shouldCallLoadDataWithBaseURL() {
+        attachWebViews();
         subjectBanner.setContentHtml("test-html");
 
         verify(mockBannerWebView).loadDataWithBaseURL(
-                null, "test-html", "text/html", "UTF-8", null);
+                "http://" + Constants.HOST + "/", "test-html", "text/html", "UTF-8", null);
     }
 
     @Test
     public void handleShouldOverrideUrl_invalidUrl_shouldFireErrorEvent() {
+        attachWebViews();
         boolean result = subjectBanner.handleShouldOverrideUrl("bad bad bad");
 
         verify(mockBannerWebView).loadUrl(startsWith(
@@ -107,6 +165,7 @@ public void handleShouldOverrideUrl_invalidUrl_shouldFireErrorEvent() {
 
     @Test
     public void handleShouldOverrideUrl_mopubNonFailLoadUrl_shouldNeverLoadUrl_shouldReturnTrue() {
+        attachWebViews();
         boolean result = subjectBanner.handleShouldOverrideUrl("mopub://special-mopub-command");
 
         verify(mockBannerWebView, never()).loadUrl(anyString());
@@ -115,6 +174,7 @@ public void handleShouldOverrideUrl_mopubNonFailLoadUrl_shouldNeverLoadUrl_shoul
 
     @Test
     public void handleShouldOverrideUrl_mopubFailLoadUrl_whenBanner_shouldNotifyListenerOfOnPageFailedToLoad_shouldReturnTrue() {
+        attachWebViews();
         boolean result = subjectBanner.handleShouldOverrideUrl("mopub://failLoad");
 
         verify(mockBridgeListener).onPageFailedToLoad();
@@ -124,6 +184,7 @@ public void handleShouldOverrideUrl_mopubFailLoadUrl_whenBanner_shouldNotifyList
 
     @Test
     public void handleShouldOverrideUrl_mopubFailLoadUrl_whenInterstitial_shouldNotNotifyListenerOfOnPageFailedToLoad_shouldReturnTrue() {
+        attachWebViews();
         boolean result = subjectInterstitial.handleShouldOverrideUrl("mopub://failLoad");
 
         verify(mockBridgeListener, never()).onPageFailedToLoad();
@@ -133,6 +194,7 @@ public void handleShouldOverrideUrl_mopubFailLoadUrl_whenInterstitial_shouldNotN
 
     @Test
     public void handleShouldOverrideUrl_mraidUrl_invalid_shouldFireErrorEvent_shouldReturnTrue() {
+        attachWebViews();
         boolean result = subjectBanner.handleShouldOverrideUrl("mraid://bad-command");
 
         verify(mockBannerWebView).loadUrl(startsWith(
@@ -142,6 +204,7 @@ public void handleShouldOverrideUrl_mraidUrl_invalid_shouldFireErrorEvent_should
 
     @Test
     public void handleShouldOverrideUrl_smsUrl_notClicked_shouldReturnFalse() {
+        attachWebViews();
         boolean result = subjectBanner.handleShouldOverrideUrl("sms://123456789");
 
         assertThat(result).isFalse();
@@ -149,6 +212,7 @@ public void handleShouldOverrideUrl_smsUrl_notClicked_shouldReturnFalse() {
 
     @Test
     public void handleShouldOverrideUrl_smsUrl_clicked_shouldStartActivity() {
+        attachWebViews();
         subjectBanner.setClicked(true);
         reset(mockBannerWebView);
         when(mockBannerWebView.getContext()).thenReturn(activity);
@@ -164,6 +228,7 @@ public void handleShouldOverrideUrl_smsUrl_clicked_shouldStartActivity() {
 
     @Test
     public void handleShouldOverrideUrl_normalUrl_shouldReturnFalse() {
+        attachWebViews();
         boolean result = subjectBanner.handleShouldOverrideUrl("http://www.mopub.com");
 
         assertThat(result).isFalse();
@@ -172,6 +237,7 @@ public void handleShouldOverrideUrl_normalUrl_shouldReturnFalse() {
     @Test(expected = MraidCommandException.class)
     public void runCommand_requiresClick_notClicked_shouldThrowException()
             throws MraidCommandException {
+        attachWebViews();
         subjectBanner = new MraidBridge(mockAdReport, PlacementType.INLINE);
         subjectBanner.attachView(mockBannerWebView);
         subjectBanner.setClicked(false);
@@ -183,6 +249,7 @@ public void runCommand_requiresClick_notClicked_shouldThrowException()
 
     public void runCommand_requiresClick_clicked_shouldNotThrowException()
             throws MraidCommandException {
+        attachWebViews();
         subjectBanner.setClicked(true);
         Map<String, String> params = new HashMap<String, String>();
         params.put("uri", "http://valid-url");
@@ -193,6 +260,7 @@ public void runCommand_requiresClick_clicked_shouldNotThrowException()
     @Test(expected = MraidCommandException.class)
     public void runCommand_interstitial_requiresClick_notClicked_shouldThrowException()
             throws MraidCommandException {
+        attachWebViews();
         subjectInterstitial.setClicked(false);
         Map<String, String> params = new HashMap<String, String>();
         params.put("uri", "http://valid-url");
@@ -203,6 +271,7 @@ public void runCommand_interstitial_requiresClick_notClicked_shouldThrowExceptio
     @Test
     public void runCommand_interstitial_requiresClick_clicked_shouldNotThrowException()
             throws MraidCommandException {
+        attachWebViews();
         subjectInterstitial.setClicked(true);
         Map<String, String> params = new HashMap<String, String>();
         params.put("url", "http://valid-url");
@@ -213,6 +282,7 @@ public void runCommand_interstitial_requiresClick_clicked_shouldNotThrowExceptio
     @Test
     public void runCommand_close_shouldCallListener()
             throws MraidCommandException {
+        attachWebViews();
         Map<String, String> params = new HashMap<String, String>();
         
         subjectBanner.runCommand(MraidJavascriptCommand.CLOSE, params);
@@ -223,6 +293,7 @@ public void runCommand_close_shouldCallListener()
     @Test
     public void runCommand_expand_shouldCallListener()
             throws MraidCommandException {
+        attachWebViews();
         subjectBanner.setClicked(true);
         Map<String, String> params = new HashMap<String, String>();
         params.put("shouldUseCustomClose", "true");
@@ -235,6 +306,7 @@ public void runCommand_expand_shouldCallListener()
     @Test
     public void runCommand_expand_withUrl_shouldCallListener()
             throws MraidCommandException {
+        attachWebViews();
         subjectBanner.setClicked(true);
         Map<String, String> params = new HashMap<String, String>();
         params.put("url", "http://valid-url");
@@ -251,6 +323,7 @@ public void runCommand_expand_withUrl_shouldCallListener()
     @Test
     public void runCommand_playVideo_shouldCallListener()
             throws MraidCommandException {
+        attachWebViews();
         subjectBanner.setClicked(true);
         Map<String, String> params = new HashMap<String, String>();
         params.put("uri", "http://valid-url");
@@ -265,6 +338,7 @@ public void runCommand_playVideo_shouldCallListener()
     @Test
     public void runCommand_storePicture_shouldCallListener()
             throws MraidCommandException {
+        attachWebViews();
         subjectBanner.setClicked(true);
         Map<String, String> params = new HashMap<String, String>();
         params.put("uri", "http://valid-url");
@@ -278,6 +352,7 @@ public void runCommand_storePicture_shouldCallListener()
     @Test
     public void runCommand_createCalendarEvent_shouldCallListener()
             throws MraidCommandException {
+        attachWebViews();
         subjectBanner.setClicked(true);
         Map<String, String> params = new HashMap<String, String>();
         params.put("eventName", "Dinner at my house");
@@ -287,4 +362,12 @@ public void runCommand_createCalendarEvent_shouldCallListener()
         verify(mockNativeCommandHandler).createCalendarEvent(any(Context.class),
                 anyMapOf(String.class, String.class));
     }
+
+    private void attachWebViews() {
+        subjectBanner.attachView(mockBannerWebView);
+        subjectInterstitial.attachView(mockInterstitialWebView);
+
+        verify(mockBannerWebView).setWebViewClient(bannerWebViewClientCaptor.capture());
+        reset(mockBannerWebView);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
index bc6fce11..be20f706 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
@@ -516,10 +516,11 @@ public void handleOpen_withApplicationUrl_shouldStartNewIntent() {
 
     @Test
     public void handleOpen_withHttpApplicationUrl_shouldStartMoPubBrowser() {
-        String applicationUrl = "http://blah";
+        String applicationUrl = "http://www.mopub.com/";
 
         subject.handleOpen(applicationUrl);
 
+        Robolectric.runBackgroundTasks();
         Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(startedIntent).isNotNull();
         // Since we are not using an Activity context, we should have FLAG_ACTIVITY_NEW_TASK
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
index a7385242..1ffe7e85 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
@@ -153,7 +153,7 @@ public void onErrorListener_shouldShowCloseButton() throws Exception {
     }
 
     private void initializeSubject() {
-        subject = new MraidVideoViewController(context, bundle, baseVideoViewControllerListener);
+        subject = new MraidVideoViewController(context, bundle, null, baseVideoViewControllerListener);
     }
 
     private ShadowVideoView getShadowVideoView() {
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ClickDestinationResolutionListenerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ClickDestinationResolutionListenerTest.java
deleted file mode 100644
index 2cd79b4c..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ClickDestinationResolutionListenerTest.java
+++ /dev/null
@@ -1,146 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.content.pm.ResolveInfo;
-import android.net.Uri;
-
-import com.mopub.common.MoPubBrowser;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.robolectric.Robolectric;
-
-import java.util.Iterator;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class ClickDestinationResolutionListenerTest {
-
-    private Activity context;
-    private Iterator mockIterator;
-    private SpinningProgressView mockSpinningProgressView;
-    private ClickDestinationResolutionListener subject;
-
-    @Before
-    public void setUp() throws Exception {
-        context = spy(Robolectric.buildActivity(Activity.class).create().get());
-        when(context.getApplicationContext()).thenReturn(context);
-        when(context.getPackageName()).thenReturn("testPackageName");
-        mockIterator = mock(Iterator.class);
-        mockSpinningProgressView = mock(SpinningProgressView.class);
-
-        subject = new ClickDestinationResolutionListener(context, mockIterator,
-                mockSpinningProgressView);
-    }
-
-    @Test
-    public void onSuccess_withMoPubNativeBrowserUrl_shouldOpenExternalBrowserAndHideProgressView() {
-        subject.onSuccess("mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.example.com");
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getDataString()).isEqualTo("https://www.example.com");
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        verify(mockSpinningProgressView).removeFromRoot();
-    }
-
-    @Test
-    public void onSuccess_withMalformedMoPubNativeBrowserUrl_shouldHideProgressViewButNotOpenExternalBrowser() {
-        // url2 is the wrong query parameter
-        subject.onSuccess("mopubnativebrowser://navigate?url2=https%3A%2F%2Fwww.example.com");
-
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
-        verify(mockSpinningProgressView).removeFromRoot();
-    }
-
-    @Test
-    public void onSuccess_withDeepLinkThatIsResolvable_shouldStartActionViewIntent_shouldRemoveSpinningProgressView() {
-        String deepLinkUrl = "appscheme://host";
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
-                Uri.parse(deepLinkUrl)), new ResolveInfo());
-
-        subject.onSuccess(deepLinkUrl);
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        assertThat(intent.getDataString()).isEqualTo("appscheme://host");
-        verify(mockSpinningProgressView).removeFromRoot();
-    }
-
-    @Test
-    public void onSuccess_withDeepLinkThatIsUnresolvable_shouldNotStartNewIntent_shouldRemoveSpinningProgressView() {
-        String deepLinkUrl = "appscheme://host";
-        // don't add any relevant ResolveInfos to the Robolectric packageManager
-
-        subject.onSuccess(deepLinkUrl);
-
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
-        verify(mockSpinningProgressView).removeFromRoot();
-    }
-
-    @Test
-    public void onSuccess_withAppStoreUrl_shouldStartAppStoreIntent_shouldRemoveSpinningProgressView() {
-        final String appStoreUrl = "play.google.com/";
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
-                Uri.parse(appStoreUrl)), new ResolveInfo());
-
-        subject.onSuccess(appStoreUrl);
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        assertThat(intent.getDataString()).isEqualTo(appStoreUrl);
-        verify(mockSpinningProgressView).removeFromRoot();
-    }
-
-    @Test
-    public void onSuccess_withHttpUrl_showOpenInMoPubBrowser_shouldRemoveSpinningProgressViewFromRoot() {
-        String httpUrl = "http://www.dotcom.com";
-
-        subject.onSuccess(httpUrl);
-
-        ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);
-        verify(context).startActivity(intentCaptor.capture());
-
-        Intent intent = intentCaptor.getValue();
-
-        assertThat(intent.getComponent().getPackageName()).isEqualTo("testPackageName");
-        assertThat(intent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
-        assertThat(intent.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(httpUrl);
-        verify(mockSpinningProgressView).removeFromRoot();
-    }
-
-    @Test
-    public void onSuccess_withHttpsUrl_showOpenInMoPubBrowser_shouldRemoveSpinningProgressViewFromRoot() {
-        String httpsUrl = "https://www.comdot.com";
-
-        subject.onSuccess(httpsUrl);
-
-        ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);
-        verify(context).startActivity(intentCaptor.capture());
-
-        Intent intent = intentCaptor.getValue();
-
-        assertThat(intent.getComponent().getPackageName()).isEqualTo("testPackageName");
-        assertThat(intent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
-        assertThat(intent.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(httpsUrl);
-        verify(mockSpinningProgressView).removeFromRoot();
-    }
-
-    @Test
-    public void onSuccess_withAboutBlankUrl_shouldFailSilently_shouldRemoveSpinningProgressView() {
-        String url = "about:blank";
-
-        subject.onSuccess(url);
-
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
-        verify(mockSpinningProgressView).removeFromRoot();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
index a81aed19..06f1c83d 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
@@ -51,6 +51,8 @@
     @Mock
     private RequestParameters mockRequestParameters;
     @Mock
+    private ViewBinder mockViewBinder;
+    @Mock
     private MoPubAdRenderer mockAdRenderer;
     @Mock
     private ListView mockListView;
@@ -184,6 +186,22 @@ public void registerAdRenderer_withNull_shouldNotCallAdPlacer() {
         verify(mockStreamAdPlacer, never()).registerAdRenderer(any(MoPubAdRenderer.class));
     }
 
+    @Test
+    public void registerViewBinder_shouldCallAdPlacer() {
+        subject.registerViewBinder(mockViewBinder);
+
+        final ArgumentCaptor<MoPubAdRenderer> rendererCaptor = new ArgumentCaptor<MoPubAdRenderer>();
+        verify(mockStreamAdPlacer).registerAdRenderer(rendererCaptor.capture());
+        MoPubAdRenderer renderer = rendererCaptor.getValue();
+        assertThat(renderer).isExactlyInstanceOf(MoPubNativeAdRenderer.class);
+    }
+
+    @Test
+    public void registerViewBinder_withNull_shouldNotCallAdPlacer() {
+        subject.registerViewBinder(null);
+
+        verify(mockStreamAdPlacer, never()).registerAdRenderer(any(MoPubAdRenderer.class));
+    }
 
     @Test
     public void setAdLoadedListener_handleAdLoaded_shouldCallCallback_shouldCallObserver() {
@@ -508,7 +526,7 @@ public void setSelection_shouldCallSetSelectionOnListView() {
     }
 
     @Test
-    public void smoothScrollToPosition_shouldCallSmooethScrollToPositionOnListView() {
+    public void smoothScrollToPosition_shouldCallSmoothScrollToPositionOnListView() {
         subject.smoothScrollToPosition(mockListView, AD_POSITION);
 
         // Since the original position is the ad position, the adjusted position is 1 higher
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java
index 17f7dc4c..70a139c0 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java
@@ -101,6 +101,8 @@ public void renderAdView_withNullNativeResponse_shouldThrowNPE() {
     }
 
     @Rule public ExpectedException exception = ExpectedException.none();
+
+    @Test
     public void renderAdView_withNullViewBinder_shouldThrowNPE() {
         subject = new MoPubNativeAdRenderer(null);
 
@@ -120,6 +122,7 @@ public void renderAdView_shouldReturnPopulatedView() {
         // not testing images due to testing complexity
     }
 
+    @Test
     public void renderAdView_withFailedViewBinder_shouldReturnEmptyViews() {
         viewBinder = new ViewBinder.Builder(relativeLayout.getId())
                 .titleId(titleView.getId())
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
index e04b9023..a29e19ee 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.test.support.ShadowAsyncTasks;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
@@ -30,7 +31,6 @@
 import java.util.List;
 import java.util.concurrent.Semaphore;
 import java.util.logging.Level;
-import java.util.logging.LogManager;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static android.Manifest.permission.INTERNET;
@@ -164,7 +164,7 @@ public void onAdError_whenNotMoPubError_shouldNotifyListener() {
 
     @Test
     public void onAdError_withVolleyErrorWarmingUp_shouldLogMoPubErrorCodeWarmup_shouldNotifyListener() {
-        LogManager.getLogManager().getLogger("com.mopub").setLevel(Level.ALL);
+        MoPubLog.setSdkHandlerLevel(Level.ALL);
 
         subject.onAdError(new MoPubNetworkError(MoPubNetworkError.Reason.WARMING_UP));
 
@@ -178,7 +178,7 @@ public void onAdError_withVolleyErrorWarmingUp_shouldLogMoPubErrorCodeWarmup_sho
 
     @Test
     public void onAdError_withNoConnection_shouldLogMoPubErrorCodeNoConnection_shouldNotifyListener() {
-        LogManager.getLogManager().getLogger("com.mopub").setLevel(Level.ALL);
+        MoPubLog.setSdkHandlerLevel(Level.ALL);
         shadowOf(context).denyPermissions(INTERNET);
 
         subject.onAdError(new NoConnectionError());
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubRecyclerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubRecyclerAdapterTest.java
new file mode 100644
index 00000000..5bf340ed
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubRecyclerAdapterTest.java
@@ -0,0 +1,697 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Mock;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+
+import java.util.HashSet;
+import java.util.Set;
+
+import static com.mopub.nativeads.MoPubRecyclerAdapter.ContentChangeStrategy.INSERT_AT_END;
+import static com.mopub.nativeads.MoPubRecyclerAdapter.ContentChangeStrategy.KEEP_ADS_FIXED;
+import static com.mopub.nativeads.MoPubRecyclerAdapter.ContentChangeStrategy.MOVE_ALL_ADS_WITH_CONTENT;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+public class MoPubRecyclerAdapterTest {
+    private static final int AD_POSITION_1 = 1;
+    private static final int AD_POSITION_7 = 7;
+
+    @Mock MoPubStreamAdPlacer mockStreamAdPlacer;
+    @Mock VisibilityTracker mockVisibilityTracker;
+    @Mock NativeAdData mockNativeAdData;
+    @Mock NativeAdData mockNativeAdData2;
+    @Mock MoPubAdRenderer mockAdRenderer;
+    @Mock ViewGroup mockParent;
+    @Mock View mockAdView;
+    @Mock RecyclerView.AdapterDataObserver mockObserver;
+    @Mock MoPubNativeAdLoadedListener mockAdLoadedListener;
+    MoPubRecyclerViewHolder spyViewHolder;
+    @Mock TestHolder mockTestHolder;
+    TestAdapter originalAdapter;
+
+    MoPubRecyclerAdapter subject;
+
+    @Mock RecyclerView mockRecyclerView;
+    @Mock LinearLayoutManager mockLayoutManager;
+
+    @Before
+    public void setUp() throws Exception {
+        originalAdapter = spy(new TestAdapter());
+        subject = new MoPubRecyclerAdapter(mockStreamAdPlacer, originalAdapter, mockVisibilityTracker);
+
+        spyViewHolder = spy(new MoPubRecyclerViewHolder(mockAdView));
+
+        // Reset because the constructor interacts with the stream ad placer, and we don't want
+        // to worry about verifying those changes in tests.
+        reset(mockStreamAdPlacer);
+        reset(originalAdapter);
+
+        // Mock some simple adjustment behavior for tests. This is creating an ad placer that
+        // emulates a content item followed by an ad item, then another content item.
+        when(mockStreamAdPlacer.getAdData(AD_POSITION_1)).thenReturn(mockNativeAdData);
+        when(mockStreamAdPlacer.getAdData(AD_POSITION_7)).thenReturn(mockNativeAdData2);
+        when(mockStreamAdPlacer.getAdRendererForViewType(MoPubRecyclerAdapter.NATIVE_AD_VIEW_TYPE_BASE))
+                .thenReturn(mockAdRenderer);
+        when(mockAdRenderer.createAdView(any(Context.class), any(ViewGroup.class))).thenReturn(mockAdView);
+
+        when(mockStreamAdPlacer.isAd(anyInt())).thenAnswer(new Answer<Boolean>() {
+            @Override
+            public Boolean answer(final InvocationOnMock invocation) throws Throwable {
+                int position = (Integer) invocation.getArguments()[0];
+                return position == AD_POSITION_1 || position == AD_POSITION_7;
+            }
+        });
+        when(mockStreamAdPlacer.getOriginalPosition(anyInt())).thenAnswer(new Answer<Integer>() {
+            @Override
+            public Integer answer(final InvocationOnMock invocation) throws Throwable {
+                final int adjusted = (Integer) invocation.getArguments()[0];
+                int original;
+                if (adjusted < AD_POSITION_1) {
+                    original = adjusted;
+                } else if (adjusted >= AD_POSITION_7) {
+                    original = adjusted - 2;
+                } else {
+                    original = adjusted - 1;
+                }
+                return original;
+            }
+        });
+        when(mockStreamAdPlacer.getAdjustedPosition(anyInt())).thenAnswer(new Answer<Integer>() {
+            @Override
+            public Integer answer(final InvocationOnMock invocation) throws Throwable {
+                final int originalPosition = (Integer) invocation.getArguments()[0];
+                int adjusted;
+                if (originalPosition < AD_POSITION_1) {
+                    adjusted = originalPosition;
+                } else if (originalPosition > AD_POSITION_7) {
+                    adjusted = originalPosition + 2;
+                } else {
+                    adjusted = originalPosition + 1;
+                }
+                return adjusted;
+            }
+        });
+        when(mockStreamAdPlacer.getAdViewType(anyInt())).thenAnswer(new Answer<Integer>() {
+            @Override
+            public Integer answer(final InvocationOnMock invocation) throws Throwable {
+                final int originalPosition = (Integer) invocation.getArguments()[0];
+                return (originalPosition == AD_POSITION_1 || originalPosition == AD_POSITION_7)
+                        ? 1 : MoPubStreamAdPlacer.CONTENT_VIEW_TYPE;
+            }
+        });
+
+        when(mockStreamAdPlacer.getAdjustedCount(anyInt())).thenAnswer(new Answer<Integer>() {
+            @Override
+            public Integer answer(final InvocationOnMock invocation) throws Throwable {
+                final int originalItemCount = (Integer) invocation.getArguments()[0];
+                int adjusted;
+                if (originalItemCount < AD_POSITION_1) {
+                    adjusted = originalItemCount;
+                } else if (originalItemCount > AD_POSITION_7) {
+                    adjusted = originalItemCount + 2;
+                } else {
+                    adjusted = originalItemCount + 1;
+                }
+                return adjusted;
+            }
+        });
+    }
+
+    @Test
+    public void computeScrollOffset_withScrollVerticallyNoStackFromEnd_shouldComputeTopOffset() {
+        when(mockAdView.getTop()).thenReturn(13);
+        when(mockAdView.getBottom()).thenReturn(14);
+        when(mockAdView.getLeft()).thenReturn(10);
+        when(mockAdView.getRight()).thenReturn(11);
+        when(mockLayoutManager.canScrollVertically()).thenReturn(true);
+        when(mockLayoutManager.canScrollHorizontally()).thenReturn(false);
+        when(mockLayoutManager.getStackFromEnd()).thenReturn(false);
+
+        int offset = MoPubRecyclerAdapter.computeScrollOffset(mockLayoutManager, spyViewHolder);
+        assertThat(offset).isEqualTo(13);
+    }
+
+    @Test
+    public void computeScrollOffset_withScrollVerticallyStackFromEnd_shouldComputeBottomOffset() {
+        when(mockAdView.getTop()).thenReturn(13);
+        when(mockAdView.getBottom()).thenReturn(14);
+        when(mockAdView.getLeft()).thenReturn(10);
+        when(mockAdView.getRight()).thenReturn(11);
+        when(mockLayoutManager.canScrollVertically()).thenReturn(true);
+        when(mockLayoutManager.canScrollHorizontally()).thenReturn(false);
+        when(mockLayoutManager.getStackFromEnd()).thenReturn(true);
+
+        int offset = MoPubRecyclerAdapter.computeScrollOffset(mockLayoutManager, spyViewHolder);
+        assertThat(offset).isEqualTo(14);
+    }
+
+    @Test
+    public void computeScrollOffset_withScrollHorizontallyStackFromEnd_shouldComputeLeftOffset() {
+        when(mockAdView.getTop()).thenReturn(13);
+        when(mockAdView.getBottom()).thenReturn(14);
+        when(mockAdView.getLeft()).thenReturn(10);
+        when(mockAdView.getRight()).thenReturn(11);
+        when(mockLayoutManager.canScrollVertically()).thenReturn(false);
+        when(mockLayoutManager.canScrollHorizontally()).thenReturn(true);
+        when(mockLayoutManager.getStackFromEnd()).thenReturn(false);
+
+        int offset = MoPubRecyclerAdapter.computeScrollOffset(mockLayoutManager, spyViewHolder);
+        assertThat(offset).isEqualTo(10);
+    }
+
+    @Test
+    public void computeScrollOffset_withScrollHorizontallyNoStackFromEnd_shouldComputeRightOffset() {
+        when(mockAdView.getTop()).thenReturn(13);
+        when(mockAdView.getBottom()).thenReturn(14);
+        when(mockAdView.getLeft()).thenReturn(10);
+        when(mockAdView.getRight()).thenReturn(11);
+
+        when(mockLayoutManager.canScrollVertically()).thenReturn(false);
+        when(mockLayoutManager.canScrollHorizontally()).thenReturn(true);
+        when(mockLayoutManager.getStackFromEnd()).thenReturn(true);
+
+        int offset = MoPubRecyclerAdapter.computeScrollOffset(mockLayoutManager, spyViewHolder);
+        assertThat(offset).isEqualTo(11);
+    }
+
+    @Test
+    public void computeScrollOffset_withCannotScroll_shouldReturnZero() {
+        when(mockLayoutManager.canScrollHorizontally()).thenReturn(false);
+        when(mockLayoutManager.canScrollVertically()).thenReturn(false);
+
+        int offset = MoPubRecyclerAdapter.computeScrollOffset(mockLayoutManager, spyViewHolder);
+        assertThat(offset).isEqualTo(0);
+    }
+
+    @Test
+    public void registerViewBinder_shouldCallRegisterAdRendererOnStreamAdPlacer() {
+        subject.registerViewBinder(new ViewBinder.Builder(1).build());
+
+        final ArgumentCaptor<MoPubAdRenderer> rendererCaptor = ArgumentCaptor.forClass(MoPubAdRenderer.class);
+        verify(mockStreamAdPlacer).registerAdRenderer(rendererCaptor.capture(), eq(-55));
+        MoPubAdRenderer renderer = rendererCaptor.getValue();
+        assertThat(renderer).isExactlyInstanceOf(MoPubNativeAdRenderer.class);
+    }
+
+    @Test
+    public void onCreateViewHolder_whenAdType_shouldInflateAdView() {
+        final RecyclerView.ViewHolder result = subject.onCreateViewHolder(mockParent, MoPubRecyclerAdapter.NATIVE_AD_VIEW_TYPE_BASE);
+
+        assertThat(result).isExactlyInstanceOf(MoPubRecyclerViewHolder.class);
+
+        verify(mockStreamAdPlacer).getAdRendererForViewType(MoPubRecyclerAdapter.NATIVE_AD_VIEW_TYPE_BASE);
+        verifyZeroInteractions(originalAdapter);
+    }
+
+    @Test
+    public void onCreateViewHolder_whenNotAdType_shouldCallOriginalAdapter() {
+        when(mockParent.getContext()).thenReturn(mock(Context.class));
+
+        subject.onCreateViewHolder(mockParent, 3);
+
+        verify(originalAdapter).onCreateViewHolder(mockParent, 3);
+        verify(mockStreamAdPlacer, never()).getAdRendererForViewType(anyInt());
+    }
+
+    @Test
+    public void onBindViewHolder_whenAdPosition_shouldGetAndBindAdData() {
+        subject.onBindViewHolder(spyViewHolder, AD_POSITION_1);
+
+        verify(mockStreamAdPlacer).bindAdView(mockNativeAdData, mockAdView);
+    }
+
+    @Test
+    public void onBindViewHolder_whenNotAdPosition_shouldCallOriginalAdapter() {
+        subject.onBindViewHolder(mockTestHolder, AD_POSITION_1 + 1);
+
+        // Position should be adjusted.
+        verify(originalAdapter).onBindViewHolder(mockTestHolder, AD_POSITION_1);
+    }
+
+    @Test
+    public void onViewAttached_whenMoPubViewHolder_shouldNotCallOriginalAdapter() {
+        subject.onViewAttachedToWindow(spyViewHolder);
+
+        verify(originalAdapter, never()).onViewAttachedToWindow(any(TestHolder.class));
+        verifyZeroInteractions(originalAdapter);
+    }
+
+    @Test
+    public void onViewAttached_whenNotMoPubViewHolder_shouldCallOriginalAdapter() {
+        subject.onViewAttachedToWindow(mockTestHolder);
+
+        verify(originalAdapter).onViewAttachedToWindow(mockTestHolder);
+    }
+
+    @Test
+    public void onViewDetached_whenMoPubViewHolder_shouldNotCallOriginalAdapter() {
+        subject.onViewDetachedFromWindow(spyViewHolder);
+
+        verifyZeroInteractions(originalAdapter);
+    }
+
+    @Test
+    public void onViewDetached_whenNotMoPubViewHolder_shouldCallOriginalAdapter() {
+        subject.onViewDetachedFromWindow(mockTestHolder);
+
+        verify(originalAdapter).onViewDetachedFromWindow(mockTestHolder);
+    }
+
+    @Test
+    public void onFailedToRecycleView_whenMoPubViewHolder_shouldNotCallOriginalAdapter() {
+        assertThat(subject.onFailedToRecycleView(spyViewHolder)).isFalse();
+
+        verifyZeroInteractions(originalAdapter);
+    }
+
+    @Test
+    public void onFailedToRecycleView_whenNotMoPubViewHolder_shouldCallOriginalAdapter() {
+        when(originalAdapter.onFailedToRecycleView(mockTestHolder)).thenReturn(true);
+
+        assertThat(subject.onFailedToRecycleView(mockTestHolder)).isTrue();
+
+        verify(originalAdapter).onFailedToRecycleView(mockTestHolder);
+    }
+
+    @Test
+    public void onViewRecycled_whenMoPubViewHolder_shouldNotCallOriginalAdapter() {
+        subject.onViewRecycled(spyViewHolder);
+
+        verifyZeroInteractions(originalAdapter);
+    }
+
+    @Test
+    public void onViewRecycled_whenNotMoPubViewHolder_shouldCallOriginalAdapter() {
+        subject.onViewRecycled(mockTestHolder);
+
+        verify(originalAdapter).onViewRecycled(mockTestHolder);
+    }
+
+    @Test
+    public void handleAdLoaded_withAndWithoutAdLoadedListener_shouldNotifyInsertToListener() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setAdLoadedListener(mockAdLoadedListener);
+        subject.handleAdLoaded(8);
+
+        verify(mockObserver).onItemRangeInserted(8, 1);
+        verify(mockAdLoadedListener).onAdLoaded(8);
+        reset(mockObserver, mockAdLoadedListener);
+
+        subject.setAdLoadedListener(null);
+        subject.handleAdLoaded(8);
+
+        verify(mockObserver).onItemRangeInserted(8, 1);
+        verifyZeroInteractions(mockAdLoadedListener);
+    }
+
+    @Test
+    public void handleAdRemoved_withAndWithoutAdLoadedListener_shouldNotifyDeleteToListener() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setAdLoadedListener(mockAdLoadedListener);
+        subject.handleAdRemoved(AD_POSITION_1);
+
+        verify(mockObserver).onItemRangeRemoved(AD_POSITION_1, 1);
+        verify(mockAdLoadedListener).onAdRemoved(AD_POSITION_1);
+        reset(mockObserver, mockAdLoadedListener);
+
+        subject.setAdLoadedListener(null);
+        subject.handleAdRemoved(AD_POSITION_1);
+
+        verify(mockObserver).onItemRangeRemoved(AD_POSITION_1, 1);
+        verifyZeroInteractions(mockAdLoadedListener);
+    }
+
+    @Test
+    public void loadAds_shouldCallLoadOnAdPlacer() {
+        subject.loadAds("testId");
+
+        verify(mockStreamAdPlacer).loadAds("testId");
+    }
+
+    @Test
+    public void loadAds_withParameters_shouldCallLoadOnAdPlacer() {
+        final RequestParameters mockRequestParameters = mock(RequestParameters.class);
+        subject.loadAds("testId", mockRequestParameters);
+
+        verify(mockStreamAdPlacer).loadAds("testId", mockRequestParameters);
+    }
+
+    @Test
+    public void isAd_shouldCallIsAdOnAdPlacer() {
+        boolean isAd = subject.isAd(4);
+
+        assertThat(isAd).isFalse();
+        verify(mockStreamAdPlacer).isAd(4);
+
+
+        isAd = subject.isAd(AD_POSITION_1);
+
+        assertThat(isAd).isTrue();
+        verify(mockStreamAdPlacer).isAd(AD_POSITION_1);
+    }
+
+    @Test
+    public void getAdjustedPosition_shouldCallAdPlacer() {
+        int adjustedPosition = subject.getAdjustedPosition(AD_POSITION_1);
+
+        assertThat(adjustedPosition).isEqualTo(AD_POSITION_1 + 1);
+        verify(mockStreamAdPlacer).getAdjustedPosition(AD_POSITION_1);
+    }
+
+    @Test
+    public void getOriginalPosition_shouldCallAdPlacer() {
+        int originalPosition = subject.getOriginalPosition(AD_POSITION_1 + 1);
+
+        assertThat(originalPosition).isEqualTo(AD_POSITION_1);
+        verify(mockStreamAdPlacer).getOriginalPosition(AD_POSITION_1 + 1);
+    }
+
+    @Test
+    public void getItemCount_shouldCallAdPlacer() {
+        int itemCount = subject.getItemCount();
+
+        assertThat(itemCount).isEqualTo(20);
+        verify(originalAdapter).getItemCount();
+        verify(mockStreamAdPlacer).getAdjustedCount(18);
+    }
+
+    @Test
+    public void setHasStableIds_shouldCallSetHasStableIdsOnOriginal() {
+        subject.setHasStableIds(true);
+
+        verify(originalAdapter).setHasStableIds(true);
+    }
+
+    @Test
+    public void getItemId_hasStableIds_shouldCallOriginalAdapter() {
+        subject.setHasStableIds(true);
+        when(originalAdapter.getItemId(anyInt())).thenAnswer(new Answer<Long>() {
+            @Override
+            public Long answer(final InvocationOnMock invocation) throws Throwable {
+                return Long.valueOf((Integer) invocation.getArguments()[0]);
+            }
+        });
+
+        long itemId = subject.getItemId(5);
+
+        assertThat(itemId).isEqualTo(4l);
+        verify(originalAdapter).getItemId(4); // Adjusted position.
+    }
+
+    @Test
+    public void getItemIds_hasStableIds_shouldReturnEnoughIds() {
+        originalAdapter.setItemCount(5000);
+
+        subject.setHasStableIds(true);
+
+        Set<Long> ids = new HashSet<>(7000, 1.0f);
+        for (int position = 0; position < subject.getItemCount(); position++) {
+            ids.add(subject.getItemId(position));
+        }
+
+        assertThat(ids.size()).isEqualTo(subject.getItemCount());
+        // Verify we called exactly the right # of times on the original adapter.
+        verify(originalAdapter, times(5000)).getItemId(anyInt());
+    }
+
+    @Test
+    public void getItemId_DoesNotHaveStableIds_shouldNotCallOriginalAdapter() {
+        subject.setHasStableIds(false);
+
+        assertThat(subject.getItemId(5)).isEqualTo(RecyclerView.NO_ID);
+        verify(originalAdapter).setHasStableIds(false);
+    }
+
+    @Test
+    public void onItemRangeInsertedAtEnd_withInsertAtEndStrategy_shouldNotifyDataChanged() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(INSERT_AT_END);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount + 3);
+        originalAdapter.notifyItemRangeInserted(originalItemCount, 3);
+
+        verify(mockObserver).onChanged();
+        verifyNoMoreInteractions(mockObserver);
+        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount);
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount + 3);
+        verifyNoMoreInteractions(mockStreamAdPlacer);
+    }
+
+    @Test
+    public void onItemRangeInsertedAtEnd_withMoveAdsStrategy_shouldNotifyItemRangeInserted() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(MOVE_ALL_ADS_WITH_CONTENT);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount + 3);
+        originalAdapter.notifyItemRangeInserted(originalItemCount, 3);
+
+        verify(mockObserver).onItemRangeInserted(originalItemCount + 2, 3);
+        verifyNoMoreInteractions(mockObserver);
+        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount);
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount + 3);
+        verify(mockStreamAdPlacer, times(3)).insertItem(anyInt());
+        verifyNoMoreInteractions(mockStreamAdPlacer);
+    }
+
+    @Test
+    public void onItemRangeInsertedAtEnd_withKeepAdsPlacedStrategy_shouldNotifyDataChanged() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(KEEP_ADS_FIXED);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount + 3);
+        originalAdapter.notifyItemRangeInserted(originalItemCount, 3);
+
+        verify(mockObserver).onChanged();
+        verifyNoMoreInteractions(mockObserver);
+        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount);
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount + 3);
+        verifyNoMoreInteractions(mockStreamAdPlacer);
+    }
+
+    @Test
+    public void onItemRangeInsertedInMiddle_withInsertAtEndStrategy_shouldNotifyItemRangeInserted() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(INSERT_AT_END);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount + 3);
+        originalAdapter.notifyItemRangeInserted(originalItemCount - 7, 3);
+
+        verify(mockObserver).onItemRangeInserted(originalItemCount - 5, 3);
+        verifyNoMoreInteractions(mockObserver);
+        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount - 7);
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount + 3);
+        verify(mockStreamAdPlacer, times(3)).insertItem(anyInt());
+        verifyNoMoreInteractions(mockStreamAdPlacer);
+    }
+
+    @Test
+    public void onItemRangeInsertedInMiddle_withMoveAdsStrategy_shouldNotifyItemRangeInserted() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(MOVE_ALL_ADS_WITH_CONTENT);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount + 3);
+        originalAdapter.notifyItemRangeInserted(originalItemCount - 7, 3);
+
+        verify(mockObserver).onItemRangeInserted(originalItemCount - 5, 3);
+        verifyNoMoreInteractions(mockObserver);
+        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount - 7);
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount + 3);
+        verify(mockStreamAdPlacer, times(3)).insertItem(anyInt());
+        verifyNoMoreInteractions(mockStreamAdPlacer);
+    }
+
+    @Test
+    public void onItemRangeInsertedInMiddle_withKeepAdsStrategy_shouldNotifyDataChanged() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(KEEP_ADS_FIXED);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount + 3);
+        originalAdapter.notifyItemRangeInserted(originalItemCount - 7, 3);
+
+        verify(mockObserver).onChanged();
+        verifyNoMoreInteractions(mockObserver);
+        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount - 7);
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount + 3);
+        verifyNoMoreInteractions(mockStreamAdPlacer);
+    }
+
+    @Test
+    public void onItemRangeRemovedFromEnd_withInsertAtEndStrategy_shouldNotifyDataChanged() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(INSERT_AT_END);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount - 3);
+        originalAdapter.notifyItemRangeRemoved(originalItemCount - 4, 3);
+
+        verify(mockObserver).onChanged();
+        verifyNoMoreInteractions(mockObserver);
+        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount - 4);
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount - 3);
+        verifyNoMoreInteractions(mockStreamAdPlacer);
+    }
+
+    @Test
+    public void onItemRangeRemovedFromEnd_withMoveAdsStrategy_shouldNotifyItemRangeRemoved() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(MOVE_ALL_ADS_WITH_CONTENT);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount - 3);
+        originalAdapter.notifyItemRangeRemoved(originalItemCount - 4, 3);
+
+        verify(mockObserver).onItemRangeRemoved(originalItemCount - 2, 3);
+        verifyNoMoreInteractions(mockObserver);
+
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount - 3);
+        verify(mockStreamAdPlacer, times(3)).removeItem(originalItemCount - 4);
+    }
+
+    @Test
+    public void onItemRangeRemovedFromEnd_withMoveAdsStrategyAndItemsSurroundAnAd_shouldNotifyItemRangeRemoved() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(MOVE_ALL_ADS_WITH_CONTENT);
+        originalAdapter.setItemCount(AD_POSITION_7 + 1);
+
+        final int originalItemCount = AD_POSITION_7 + 1;
+
+        originalAdapter.setItemCount(originalItemCount - 3);
+        originalAdapter.notifyItemRangeRemoved(originalItemCount - 4, 3);
+
+        // We remove 3 items + 1 ad
+        verify(mockObserver).onItemRangeRemoved(originalItemCount - 4, 4);
+        verifyNoMoreInteractions(mockObserver);
+
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount - 3);
+        verify(mockStreamAdPlacer, times(3)).removeItem(originalItemCount - 4);
+    }
+
+    @Test
+    public void onItemRangeRemovedFromEnd_withKeepAdsStrategy_shouldNotifyDataChanged() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(KEEP_ADS_FIXED);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount - 3);
+        originalAdapter.notifyItemRangeRemoved(originalItemCount - 4, 3);
+
+        verify(mockObserver).onChanged();
+        verifyNoMoreInteractions(mockObserver);
+
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount - 3);
+    }
+
+    @Test
+    public void onItemRangeRemovedFromMiddle_withInsertAtEndStrategy_shouldNotifyItemRangeRemoved() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(INSERT_AT_END);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount - 3);
+        originalAdapter.notifyItemRangeRemoved(originalItemCount - 8, 3);
+
+        verify(mockObserver).onItemRangeRemoved(originalItemCount - 6, 3);
+        verifyNoMoreInteractions(mockObserver);
+
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount - 3);
+        verify(mockStreamAdPlacer, times(3)).removeItem(originalItemCount - 8);
+    }
+
+    @Test
+    public void onItemRangeRemovedFromMiddle_withMoveAdsStrategy_shouldNotifyItemRangeRemoved() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(MOVE_ALL_ADS_WITH_CONTENT);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount - 3);
+        originalAdapter.notifyItemRangeRemoved(originalItemCount - 8, 3);
+
+        verify(mockObserver).onItemRangeRemoved(originalItemCount - 6, 3);
+        verifyNoMoreInteractions(mockObserver);
+
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount - 3);
+        verify(mockStreamAdPlacer, times(3)).removeItem(originalItemCount - 8);
+    }
+
+    @Test
+    public void onItemRangeRemovedFromMiddle_withKeepAdsStrategy_shouldNotifyChanged() {
+        subject.registerAdapterDataObserver(mockObserver);
+        subject.setContentChangeStrategy(KEEP_ADS_FIXED);
+
+        final int originalItemCount = originalAdapter.getItemCount();
+        originalAdapter.setItemCount(originalItemCount - 3);
+        originalAdapter.notifyItemRangeRemoved(originalItemCount - 8, 3);
+
+        verify(mockObserver).onChanged();
+        verifyNoMoreInteractions(mockObserver);
+        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount - 8);
+        verify(mockStreamAdPlacer).setItemCount(originalItemCount - 3);
+        verifyNoMoreInteractions(mockStreamAdPlacer);
+    }
+
+    private class TestAdapter extends RecyclerView.Adapter<TestHolder> {
+        private int mItems = 18;
+
+        @Override
+        public TestHolder onCreateViewHolder(final ViewGroup parent, final int viewType) {
+            View view = mock(View.class);
+            return new TestHolder(view);
+        }
+
+        @Override
+        public void onBindViewHolder(final TestHolder holder, final int position) {
+            // Do nothing
+        }
+
+        @Override
+        public long getItemId(final int position) {
+            return position;
+        }
+
+        @Override
+        public int getItemCount() {
+            return mItems;
+        }
+
+        void setItemCount(int itemCount) {
+            mItems = itemCount;
+        }
+    }
+
+    private class TestHolder extends RecyclerView.ViewHolder {
+        public TestHolder(final View itemView) {
+            super(itemView);
+        }
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
index 3ebefbe8..0bbde894 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
@@ -49,10 +49,15 @@
     private boolean baseNativeAdIsClicked;
     @Mock
     private MoPubRequestQueue mockRequestQueue;
+    private SpinningProgressView mockSpinningProgressView;
 
 
     @Before
     public void setUp() throws Exception {
+        setupWithClickUrl("clickDestinationUrl");
+    }
+
+    private void setupWithClickUrl(String clickUrl) {
         context = Robolectric.buildActivity(Activity.class).create().get();
         mNativeAd = new BaseForwardingNativeAd() {
             @Override
@@ -69,7 +74,7 @@ public void handleClick(@NonNull final View view) {
         mNativeAd.setText("text");
         mNativeAd.setMainImageUrl("mainImageUrl");
         mNativeAd.setIconImageUrl("iconImageUrl");
-        mNativeAd.setClickDestinationUrl("clickDestinationUrl");
+        mNativeAd.setClickDestinationUrl(clickUrl);
         mNativeAd.setCallToAction("callToAction");
         mNativeAd.addExtra("extra", "extraValue");
         mNativeAd.addExtra("extraImage", "extraImageUrl");
@@ -92,6 +97,8 @@ public void handleClick(@NonNull final View view) {
                 "moPubImpressionTrackerUrl",
                 "moPubClickTrackerUrl",
                 "adunit_id", mMockNativeAd, moPubNativeListener);
+
+        mockSpinningProgressView = mock(SpinningProgressView.class);
     }
 
     @Test
@@ -279,6 +286,45 @@ public void handleClick_withBaseNativeAdClickDestinationUrl_shouldRecordClickAnd
         // Really difficult to test url resolution since it doesn't use the apache http client
     }
 
+    @Test
+    public void handleClick_shouldShowSpinner_shouldRemoveSpinner_WhenSucceeded() {
+        setupWithClickUrl("http://www.mopub.com");
+
+        Robolectric.getBackgroundScheduler().pause();
+
+        subject.handleClick(view, mockSpinningProgressView);
+
+        verify(mockSpinningProgressView).addToRoot(view);
+        Robolectric.getBackgroundScheduler().unPause();
+        verify(mockSpinningProgressView).removeFromRoot();
+    }
+
+    @Test
+    public void handleClick_shouldShowSpinner_shouldRemoveSpinner_WhenFailed() {
+        setupWithClickUrl("");
+
+        Robolectric.getBackgroundScheduler().pause();
+
+        subject.handleClick(view, mockSpinningProgressView);
+
+        verify(mockSpinningProgressView).addToRoot(view);
+        Robolectric.getBackgroundScheduler().unPause();
+        verify(mockSpinningProgressView).removeFromRoot();
+    }
+
+    @Test
+    public void handleClick_withNullView_shouldNotShowSpinner() {
+        setupWithClickUrl("http://www.mopub.com");
+
+        Robolectric.getBackgroundScheduler().pause();
+
+        subject.handleClick(null, mockSpinningProgressView);
+
+        verify(mockSpinningProgressView, never()).addToRoot(view);
+        Robolectric.getBackgroundScheduler().unPause();
+        verify(mockSpinningProgressView, never()).removeFromRoot();
+    }
+
     @Test
     public void handleClick_whenDestroyed_shouldReturnFast() {
         subject.destroy();
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
index 7cd08ac5..724736a8 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
@@ -16,7 +16,9 @@
 
 import com.mopub.common.MoPub;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
+import com.mopub.network.Networking;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -55,6 +57,7 @@
 
     @Before
     public void setup() {
+        Networking.useHttps(false);
         context = spy(Robolectric.buildActivity(Activity.class).create().get());
         shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
         when(context.getPackageName()).thenReturn("testBundle");
@@ -298,10 +301,7 @@ public void generateUrlString_withOnlyAdUnitSet_shouldReturnMinimumUrl() {
                         TEST_SCREEN_HEIGHT +
                         "&sc_a=" +
                         TEST_DENSITY +
-                        // maven version
-                        "&ct=3&av=1.0" +
-                        // Gradle version
-                        //"&ct=3&av=" + BuildConfig.VERSION_NAME +
+                        "&ct=3&av=" + BuildConfig.VERSION_NAME +
                         "&udid=mp_tmpl_advertising_id&dnt=mp_tmpl_do_not_track");
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
index fdeb2107..2ff97828 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
@@ -308,7 +308,7 @@ public void updateExtras_shouldAddValuesToViews() throws Exception {
         NativeViewHolder nativeViewHolder =
                 NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
 
-        nativeViewHolder.updateExtras(relativeLayout, nativeResponse, viewBinder);
+        nativeViewHolder.updateExtras(nativeResponse, viewBinder);
 
         assertThat(extrasTextView.getText()).isEqualTo("extrastexttext");
 
@@ -343,7 +343,7 @@ public void updateExtras_withMissingExtrasValues_shouldClearPreviousValues() thr
 
         assertThat(extrasTextView.getText()).isEqualTo("previousextrastext");
 
-        nativeViewHolder.updateExtras(relativeLayout, nativeResponse, viewBinder);
+        nativeViewHolder.updateExtras(nativeResponse, viewBinder);
 
         assertThat(extrasTextView.getText()).isEqualTo("");
         assertThat(extrasImageView.getDrawable()).isNull();
@@ -370,7 +370,7 @@ public void updateExtras_withMismatchingViewTypes_shouldSetTextViewToImageUrlAnd
         assertThat(extrasTextView.getText()).isEqualTo("");
         assertThat(extrasImageView.getDrawable()).isNull();
 
-        nativeViewHolder.updateExtras(relativeLayout, nativeResponse, viewBinder);
+        nativeViewHolder.updateExtras(nativeResponse, viewBinder);
 
         // Volley's imageloader will set this to a bitmapdrawable with no bitmap
         assertThat(extrasTextView.getText()).isEqualTo("extrasimageurl");
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
index 49ce986e..824a39bc 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
@@ -1,9 +1,13 @@
 package com.mopub.nativeads;
 
 import android.app.Activity;
+import android.content.Context;
+import android.content.pm.PackageManager;
 import android.os.Build.VERSION_CODES;
 
+import com.mopub.common.ClientMetadata;
 import com.mopub.common.DownloadResponse;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.MoPubErrorCode;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
@@ -27,13 +31,14 @@
 
 import java.util.List;
 import java.util.logging.Level;
-import java.util.logging.LogManager;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -46,19 +51,24 @@
     @Mock DownloadResponse mockNotFoundResponse;
     @Mock DownloadResponse mockInvalidJsonResponse;
     @Mock DownloadResponse mockWarmingUpJsonResponse;
-
-    @Mock
-    MoPubRequestQueue mockRequestQueue;
+    @Mock Context mockContext;
+    @Mock ClientMetadata mockClientMetaData;
+    @Mock MoPubRequestQueue mockRequestQueue;
 
     @Captor ArgumentCaptor<MoPubClientPositioning> positioningCaptor;
 
     ServerPositioningSource subject;
+    private Activity spyActivity;
 
     @Before
     public void setUp() {
         Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-        subject = new ServerPositioningSource(activity);
+        spyActivity = spy(activity);
+
 
+
+        subject = new ServerPositioningSource(spyActivity);
+        setupClientMetadata();
         Networking.setRequestQueueForTesting(mockRequestQueue);
 
         when(mockValidResponse.getStatusCode()).thenReturn(HttpStatus.SC_OK);
@@ -74,6 +84,29 @@ public void setUp() {
         when(mockNotFoundResponse.getStatusCode()).thenReturn(HttpStatus.SC_NOT_FOUND);
     }
 
+    private void setupClientMetadata() {
+        when(mockClientMetaData.getSdkVersion()).thenReturn("sdk_version");
+        when(mockClientMetaData.getAppName()).thenReturn("app_name");
+        when(mockClientMetaData.getAppPackageName()).thenReturn("app_package_name");
+        when(mockClientMetaData.getAppVersion()).thenReturn("app_version");
+        when(mockClientMetaData.getDeviceId()).thenReturn("client_device_id");
+        when(mockClientMetaData.isDoNotTrackSet()).thenReturn(true);
+        when(mockClientMetaData.getDeviceManufacturer()).thenReturn("device_manufacturer");
+        when(mockClientMetaData.getDeviceModel()).thenReturn("device_model");
+        when(mockClientMetaData.getDeviceProduct()).thenReturn("device_product");
+        when(mockClientMetaData.getDeviceOsVersion()).thenReturn("device_os_version");
+        when(mockClientMetaData.getDeviceScreenWidthDip()).thenReturn(1337);
+        when(mockClientMetaData.getDeviceScreenHeightDip()).thenReturn(70707);
+        when(mockClientMetaData.getActiveNetworkType()).thenReturn(ClientMetadata.MoPubNetworkType.WIFI);
+        when(mockClientMetaData.getNetworkOperator()).thenReturn("network_operator");
+        when(mockClientMetaData.getNetworkOperatorName()).thenReturn("network_operator_name");
+        when(mockClientMetaData.getIsoCountryCode()).thenReturn("network_iso_country_code");
+        when(mockClientMetaData.getSimOperator()).thenReturn("network_sim_operator");
+        when(mockClientMetaData.getSimOperatorName()).thenReturn("network_sim_operator_name");
+        when(mockClientMetaData.getSimIsoCountryCode()).thenReturn("network_sim_iso_country_code");
+        ClientMetadata.setInstance(mockClientMetaData);
+    }
+
     @Test
     public void loadPositions_shouldAddToRequestQueue() {
         subject.loadPositions("test_ad_unit", mockPositioningListener);
@@ -145,9 +178,9 @@ public void loadPositions_withPendingRetry_shouldNotRetry() {
 
     @Test
     public void loadPositions_thenFailAfterMaxRetryTime_shouldCallFailureHandler() {
-        ServerPositioningSource.MAXIMUM_RETRY_TIME_MILLISECONDS = 999;
-
         subject.loadPositions("test_ad_unit", mockPositioningListener);
+        // Simulate failure after max time.
+        subject.setMaximumRetryTimeMilliseconds(999);
 
         verify(mockRequestQueue).add(positionRequestCaptor.capture());
         positionRequestCaptor.getValue().deliverError(new VolleyError("test error"));
@@ -156,12 +189,21 @@ public void loadPositions_thenFailAfterMaxRetryTime_shouldCallFailureHandler() {
 
     @Test
     public void loadPositions_withNoConnection_shouldLogMoPubErrorCodeNoConnection_shouldCallFailureHandler() {
-        LogManager.getLogManager().getLogger("com.mopub").setLevel(Level.ALL);
+        MoPubLog.setSdkHandlerLevel(Level.ALL);
 
+        when(mockContext.checkCallingOrSelfPermission(anyString()))
+                .thenReturn(PackageManager.PERMISSION_DENIED);
+        when(spyActivity.getApplicationContext()).thenReturn(mockContext);
+        // Reinit the subject so we get our mocked context.
+        subject = new ServerPositioningSource(spyActivity);
+
+        // Simulate failure after max time.
+        subject.setMaximumRetryTimeMilliseconds(999);
         subject.loadPositions("test_ad_unit", mockPositioningListener);
 
         verify(mockRequestQueue).add(positionRequestCaptor.capture());
         positionRequestCaptor.getValue().deliverError(new NoConnectionError());
+
         verify(mockPositioningListener).onFailed();
 
         final List<ShadowLog.LogItem> allLogMessages = ShadowLog.getLogs();
diff --git a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
index 08b25a5a..d7bd6f3b 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
@@ -69,6 +69,8 @@ public void setup() {
 
     @After
     public void teardown() {
+        // Reset our locale for other tests.
+        Locale.setDefault(Locale.US);
         MoPubEvents.setEventDispatcher(null);
     }
 
@@ -311,6 +313,8 @@ public void getHeaders_withLocaleLanguageAsEmptyString_shouldNotAddLanguageHeade
         activity.getResources().getConfiguration().locale = new Locale(" ");
 
         assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
+
+
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java b/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
index 2013dcde..625c8a8c 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
@@ -6,6 +6,7 @@
 
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
@@ -17,7 +18,7 @@
 @RunWith(SdkTestRunner.class)
 public class NetworkingTest {
     private Activity context;
-    static String sUserAgent;
+    static volatile String sUserAgent;
 
     @Before
     public void setUp() {
@@ -49,6 +50,7 @@ public void run() {
         });
     }
 
+    @Ignore("Flaky - setProperty + threading is unreliable in the test environment.")
     @Test
     public void getUserAgent_fromBackgroundThread_shouldIncludeAndroid() throws InterruptedException {
         System.setProperty("http.agent", "system level user agent");
@@ -66,4 +68,11 @@ public void run() {
         semaphore.acquire();
         assertThat(sUserAgent).isEqualTo("system level user agent");
     }
+
+    public void getCachedUserAgent_usesCachedUserAgent() {
+        Networking.setUserAgentForTesting("some cached user agent");
+        String userAgent = Networking.getCachedUserAgent();
+
+        assertThat(userAgent).isEqualTo("some cached user agent");
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
index eb601572..1ae6f03f 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
@@ -4,6 +4,8 @@
 import android.content.Context;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.VastErrorCode;
+import com.mopub.mobileads.VastTracker;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -11,9 +13,15 @@
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
 
+import java.util.Arrays;
+
+import static com.mopub.common.VolleyRequestMatcher.isUrl;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.argThat;
+import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 @RunWith(SdkTestRunner.class)
 public class TrackingRequestTest {
@@ -51,4 +59,55 @@ public void makeTrackingHttpRequest_withNullContext_shouldNotMakeTrackingHttpReq
 
         verify(mockRequestQueue, never()).add(any(TrackingRequest.class));
     }
+
+    @Test
+    public void makeVastTrackingHttpRequest_shouldSubstituteMacros_shouldMakeSingleRequest() throws Exception {
+        VastTracker vastTracker = new VastTracker("uri?errorcode=[ERRORCODE]&contentplayhead=[CONTENTPLAYHEAD]&asseturi=[ASSETURI]");
+        TrackingRequest.makeVastTrackingHttpRequest(
+                Arrays.asList(vastTracker),
+                VastErrorCode.UNDEFINED_ERROR,
+                123,
+                "assetUri",
+                context
+        );
+
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "uri?errorcode=900&contentplayhead=00:00:00.123&asseturi=assetUri")));
+
+        TrackingRequest.makeVastTrackingHttpRequest(
+                Arrays.asList(vastTracker),
+                VastErrorCode.UNDEFINED_ERROR,
+                123,
+                "assetUri",
+                context
+        );
+
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void makeVastTrackingHttpRequest_withRepeatableRequest_shouldMakeMultipleTrackingRequests() throws Exception {
+        VastTracker vastTracker = new VastTracker("uri?errorcode=[ERRORCODE]&contentplayhead=[CONTENTPLAYHEAD]&asseturi=[ASSETURI]");
+        TrackingRequest.makeVastTrackingHttpRequest(
+                Arrays.asList(vastTracker),
+                VastErrorCode.UNDEFINED_ERROR,
+                123,
+                "assetUri",
+                context
+        );
+
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "uri?errorcode=900&contentplayhead=00:00:00.123&asseturi=assetUri")));
+
+        TrackingRequest.makeVastTrackingHttpRequest(
+                Arrays.asList(vastTracker),
+                VastErrorCode.UNDEFINED_ERROR,
+                123,
+                "assetUri",
+                context
+        );
+
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "uri?errorcode=900&contentplayhead=00:00:00.123&asseturi=assetUri")));
+    }
 }
diff --git a/mopub-sdk/src/test/resources/org.robolectric.Config.properties b/mopub-sdk/src/test/resources/org.robolectric.Config.properties
index dd670b09..973e581e 100644
--- a/mopub-sdk/src/test/resources/org.robolectric.Config.properties
+++ b/mopub-sdk/src/test/resources/org.robolectric.Config.properties
@@ -1 +1,2 @@
-shadows=com.mopub.nativeads.test.support.MoPubShadowDisplay,com.mopub.nativeads.test.support.MoPubShadowBitmap
\ No newline at end of file
+emulateSdk=18
+shadows=com.mopub.nativeads.test.support.MoPubShadowDisplay,com.mopub.nativeads.test.support.MoPubShadowBitmap,com.mopub.mobileads.test.support.ShadowVastVideoView
