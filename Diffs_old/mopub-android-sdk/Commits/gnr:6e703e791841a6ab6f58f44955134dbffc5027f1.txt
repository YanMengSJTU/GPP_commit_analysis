diff --git a/CHANGELOG.md b/CHANGELOG.md
index fcbca267..7d69bbf3 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,9 @@
+## Version 3.2.2 (October 29, 2014)
+  - **Bug Fix** Fixes a bug in fetching the Google Advertising ID from Google Play Services.
+
+## Version 3.2.1 (October 21, 2014)
+  - **Bug Fix** Fixes a bug in processing certain HTTP headers for Native Ads.
+
 ## Version 3.2.0 (October 17, 2014)
 
   - **Updated SDK License** Visit [http://www.mopub.com/legal/sdk-license-agreement/](http://www.mopub.com/legal/sdk-license-agreement/) for details.
diff --git a/README.md b/README.md
index 658332a2..64b44d52 100644
--- a/README.md
+++ b/README.md
@@ -27,8 +27,6 @@ Integration instructions are available on the [wiki](https://github.com/mopub/mo
 
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for details.
 
-  - **Updated SDK License**
-
   - **Bug Fixes**
 
 ## Requirements
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 0f350e93..4d4616a1 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,9 +1,9 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="1"
-      android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="9" 
+      android:versionCode="18"
+      android:versionName="3.2.2">
+    <uses-sdk android:minSdkVersion="9"
               android:targetSdkVersion="19"/>
 
     <uses-permission android:name="android.permission.INTERNET" />
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index ea4e63c5..50be0c68 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -10,7 +10,7 @@ android {
 
     defaultConfig {
         versionCode 1
-        versionName "3.2.0"
+        versionName "3.2.1"
         minSdkVersion 9
         targetSdkVersion 19
     }
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index 26c7a8b8..0df97127 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -10,8 +10,11 @@ android {
     compileSdkVersion 21
     buildToolsVersion '21.1'
     defaultConfig {
-        minSdkVersion 10
-        targetSdkVersion 21
+        versionCode 1
+        versionName "3.2.2"
+        minSdkVersion 9
+        targetSdkVersion 19
+        consumerProguardFiles 'proguard.txt'
     }
 
     lintOptions {
diff --git a/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java b/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java
index d3189e99..6589c171 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java
@@ -36,6 +36,8 @@
     private String mIsoCountryCode;
     private String mNetworkOperatorName;
     private String mUdid;
+    private boolean mDoNotTrack = false;
+    private boolean mAdvertisingInfoSet = false;
 
     /**
      * Returns the singleton ClientMetadata object, using the context to obtain data if necessary.
@@ -145,7 +147,8 @@ private ClientMetadata(Context context) {
             mNetworkOperatorName = null;
         }
 
-        mUdid = getUdidFromContext(mContext);
+        // Get the device ID. This will be replaced later when the Play Services callbacks complete.
+        mUdid = getDeviceIdFromContext(mContext);
     }
 
     private static String getAppVersionFromContext(Context context) {
@@ -160,19 +163,11 @@ private static String getAppVersionFromContext(Context context) {
         }
     }
 
-    private static String getUdidFromContext(Context context) {
-        // try to use the android id from Google Play Services if available
-        // if not fall back on the device id
-        final String androidId = GpsHelper.getAdvertisingId(context);
-
-        if (androidId != null) {
-            return IFA_PREFIX + androidId;
-        } else {
-            String deviceId = Settings.Secure.getString(context.getContentResolver(),
-                    Settings.Secure.ANDROID_ID);
-            deviceId = (deviceId == null) ? "" : Utils.sha1(deviceId);
-            return SHA_PREFIX + deviceId;
-        }
+    private static String getDeviceIdFromContext(Context context) {
+        String deviceId = Settings.Secure.getString(context.getContentResolver(),
+                Settings.Secure.ANDROID_ID);
+        deviceId = (deviceId == null) ? "" : Utils.sha1(deviceId);
+        return SHA_PREFIX + deviceId;
     }
 
     /**
@@ -210,13 +205,6 @@ public float getDensity() {
         return mContext.getResources().getDisplayMetrics().density;
     }
 
-    /**
-     * @return whether doNotTrack is enabled in the advertising settings.
-     */
-    public boolean getDoNoTrack() {
-        return GpsHelper.isLimitAdTrackingEnabled(mContext);
-    }
-
     /**
      * @return the network operator.
      */
@@ -239,12 +227,30 @@ public String getNetworkOperatorName() {
     }
 
     /**
-     * @return the Google Play advertising ID or the device ID if Play Services are not available.
+     * @return the stored device ID.
      */
-    public String getUdid() {
+    public synchronized String getAdvertisingId() {
         return mUdid;
     }
 
+    /**
+     * @return the user's do not track preference. Should be set whenever a getAdInfo() call is
+     *         completed.
+     */
+    public synchronized boolean isDoNotTrackSet() {
+        return mDoNotTrack;
+    }
+
+    public synchronized void setAdvertisingInfo(String advertisingId, boolean doNotTrack) {
+        mUdid = IFA_PREFIX + advertisingId;
+        mDoNotTrack = doNotTrack;
+        mAdvertisingInfoSet = true;
+    }
+
+    public synchronized boolean isAdvertisingInfoSet() {
+        return mAdvertisingInfoSet;
+    }
+
     /**
      * @return the device manufacturer.
      */
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DownloadResponse.java b/mopub-sdk/src/main/java/com/mopub/common/DownloadResponse.java
index 82d5fa90..6b396539 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/DownloadResponse.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/DownloadResponse.java
@@ -46,7 +46,7 @@ public long getContentLength() {
 
     public String getFirstHeader(final ResponseHeader responseHeader) {
         for (final Header header : mHeaders) {
-            if (header.getName().equals(responseHeader.getKey())) {
+            if (header.getName().equalsIgnoreCase(responseHeader.getKey())) {
                 return header.getValue();
             }
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java b/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
index 70874038..75b9bdf7 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
@@ -1,7 +1,6 @@
 package com.mopub.common;
 
 import android.content.Context;
-import android.content.SharedPreferences;
 import android.os.AsyncTask;
 import com.mopub.common.factories.MethodBuilderFactory;
 import com.mopub.common.logging.MoPubLog;
@@ -23,7 +22,7 @@
         public void onFetchAdInfoCompleted();
     }
 
-    static boolean isGpsAvailable(final Context context) {
+    static boolean isPlayServicesAvailable(final Context context) {
         try {
             MethodBuilder methodBuilder = MethodBuilderFactory.create(null, "isGooglePlayServicesAvailable")
                     .setStatic(Class.forName(sPlayServicesUtilClassName))
@@ -37,19 +36,9 @@ static boolean isGpsAvailable(final Context context) {
         }
     }
 
-    static String getAdvertisingId(final Context context) {
-        final String defaultValue = null;
-        if (isGpsAvailable(context)) {
-            return SharedPreferencesHelper.getSharedPreferences(context)
-                    .getString(ADVERTISING_ID_KEY, defaultValue);
-        } else {
-            return defaultValue;
-        }
-    }
-
     static public boolean isLimitAdTrackingEnabled(Context context) {
         final boolean defaultValue = false;
-        if (isGpsAvailable(context)) {
+        if (isPlayServicesAvailable(context)) {
             return SharedPreferencesHelper.getSharedPreferences(context)
                     .getBoolean(IS_LIMIT_AD_TRACKING_ENABLED_KEY, defaultValue);
         } else {
@@ -57,25 +46,45 @@ static public boolean isLimitAdTrackingEnabled(Context context) {
         }
     }
 
-    static boolean isSharedPreferencesPopluated(final Context context) {
-        SharedPreferences sharedPreferences = SharedPreferencesHelper.getSharedPreferences(context);
-        return sharedPreferences.contains(ADVERTISING_ID_KEY) &&
-                sharedPreferences.contains(IS_LIMIT_AD_TRACKING_ENABLED_KEY);
+    static boolean isClientMetadataPopulated(final Context context) {
+        return ClientMetadata.getInstance(context).isAdvertisingInfoSet();
     }
 
-    static public void asyncFetchAdvertisingInfoIfNotCached(final Context context, final GpsHelperListener gpsHelperListener) {
+    static public void fetchAdvertisingInfoAsync(final Context context, final GpsHelperListener gpsHelperListener) {
         // This method guarantees that the Google Play Services (GPS) advertising info will
         // be populated if GPS is available and the ad info is not already cached
         // The above will happen before the callback is run
-        if (isGpsAvailable(context) && !isSharedPreferencesPopluated(context)) {
-            asyncFetchAdvertisingInfo(context, gpsHelperListener);
+        boolean playServicesIsAvailable = isPlayServicesAvailable(context);
+        if (playServicesIsAvailable && !isClientMetadataPopulated(context)) {
+            internalFetchAdvertisingInfoAsync(context, gpsHelperListener);
         } else {
-            gpsHelperListener.onFetchAdInfoCompleted();
+            if (gpsHelperListener != null) {
+                gpsHelperListener.onFetchAdInfoCompleted();
+            }
+            if (playServicesIsAvailable) {
+                // Kick off a request to update the ad information in the background.
+                internalFetchAdvertisingInfoAsync(context, null);
+            }
         }
     }
 
-    static public void asyncFetchAdvertisingInfo(final Context context) {
-        asyncFetchAdvertisingInfo(context, null);
+    static private void internalFetchAdvertisingInfoAsync(final Context context, final GpsHelperListener gpsHelperListener) {
+        if (!classFound(sAdvertisingIdClientClassName)) {
+            if (gpsHelperListener != null) {
+                gpsHelperListener.onFetchAdInfoCompleted();
+            }
+            return;
+        }
+
+        try {
+            AsyncTasks.safeExecuteOnExecutor(new FetchAdvertisingInfoTask(context, gpsHelperListener));
+        } catch (Exception exception) {
+            MoPubLog.d("Error executing FetchAdvertisingInfoTask", exception);
+
+            if (gpsHelperListener != null) {
+                gpsHelperListener.onFetchAdInfoCompleted();
+            }
+        }
     }
 
     static private class FetchAdvertisingInfoTask extends AsyncTask<Void, Void, Void> {
@@ -102,7 +111,7 @@ protected Void doInBackground(Void... voids) {
                 Object adInfo = methodBuilder.execute();
 
                 if (adInfo != null) {
-                    updateSharedPreferences(context, adInfo);
+                    updateClientMetadata(context, adInfo);
                 }
             } catch (Exception exception) {
                 MoPubLog.d("Unable to obtain AdvertisingIdClient.getAdvertisingIdInfo()");
@@ -120,28 +129,7 @@ protected void onPostExecute(Void aVoid) {
         }
     }
 
-    static public void asyncFetchAdvertisingInfo(final Context context, final GpsHelperListener gpsHelperListener) {
-        if (!classFound(sAdvertisingIdClientClassName)) {
-            if (gpsHelperListener != null) {
-                gpsHelperListener.onFetchAdInfoCompleted();
-            }
-
-            return;
-        }
-
-        try {
-            AsyncTasks.safeExecuteOnExecutor(new FetchAdvertisingInfoTask(context, gpsHelperListener));
-        } catch (Exception exception) {
-            MoPubLog.d("Error executing FetchAdvertisingInfoTask", exception);
-
-            if (gpsHelperListener != null) {
-                gpsHelperListener.onFetchAdInfoCompleted();
-            }
-        }
-    }
-
-
-    static void updateSharedPreferences(final Context context, final Object adInfo) {
+    static void updateClientMetadata(final Context context, final Object adInfo) {
         String advertisingId = reflectedGetAdvertisingId(adInfo, null);
         boolean isLimitAdTrackingEnabled = reflectedIsLimitAdTrackingEnabled(adInfo, false);
 
@@ -150,11 +138,8 @@ static void updateSharedPreferences(final Context context, final Object adInfo)
          * to ensure that the state of the GPS variables are in sync.
          */
 
-        SharedPreferencesHelper.getSharedPreferences(context)
-                .edit()
-                .putString(ADVERTISING_ID_KEY, advertisingId)
-                .putBoolean(IS_LIMIT_AD_TRACKING_ENABLED_KEY, isLimitAdTrackingEnabled)
-                .commit();
+        ClientMetadata clientMetadata = ClientMetadata.getInstance(context);
+        clientMetadata.setAdvertisingInfo(advertisingId, isLimitAdTrackingEnabled);
     }
 
     static String reflectedGetAdvertisingId(final Object adInfo, final String defaultValue) {
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
index 2a7a7931..808400cf 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
@@ -1,7 +1,7 @@
 package com.mopub.common;
 
 public class MoPub {
-    public static final String SDK_VERSION = "3.2.0";
+    public static final String SDK_VERSION = "3.2.2";
 
     public static enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
index 1fa8159d..a9c537f9 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -10,6 +10,8 @@
 import android.view.Gravity;
 import android.view.View;
 import android.widget.FrameLayout;
+
+import com.mopub.common.GpsHelper;
 import com.mopub.common.MoPub;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Dips;
@@ -23,8 +25,6 @@
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static com.mopub.common.GpsHelper.GpsHelperListener;
-import static com.mopub.common.GpsHelper.asyncFetchAdvertisingInfo;
-import static com.mopub.common.GpsHelper.asyncFetchAdvertisingInfoIfNotCached;
 import static com.mopub.common.LocationService.getLastKnownLocation;
 
 public class AdViewController {
@@ -77,7 +77,7 @@ public AdViewController(Context context, MoPubView view) {
 
         mGpsHelperListener = new AdViewControllerGpsHelperListener();
 
-        asyncFetchAdvertisingInfo(mContext);
+        GpsHelper.fetchAdvertisingInfoAsync(mContext, null);
 
         mRefreshRunnable = new Runnable() {
             public void run() {
@@ -115,7 +115,7 @@ public void loadAd() {
         // If we have access to Google Play Services (GPS) but the advertising info
         // is not cached then guarantee we get it before building the ad request url
         // in the callback, this is a requirement from Google
-        asyncFetchAdvertisingInfoIfNotCached(mContext, mGpsHelperListener);
+        GpsHelper.fetchAdvertisingInfoAsync(mContext, mGpsHelperListener);
     }
 
     void loadNonJavascript(String url) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
index eb50d0dc..f1f98dc6 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
@@ -39,7 +39,7 @@ public void reportAppOpen(Context context) {
         mSharedPreferences = SharedPreferencesHelper.getSharedPreferences(mContext);
 
         if (!isAlreadyTracked()) {
-            GpsHelper.asyncFetchAdvertisingInfo(mContext, mConversionTrackerGpsHelperListener);
+            GpsHelper.fetchAdvertisingInfoAsync(mContext, mConversionTrackerGpsHelperListener);
         } else {
             MoPubLog.d("Conversion already tracked");
         }
@@ -58,8 +58,8 @@ public String generateUrlString(String serverHostname) {
             setPackageId(mPackageName);
 
             ClientMetadata clientMetadata = ClientMetadata.getInstance(mContext);
-            setUdid(clientMetadata.getUdid());
-            setDoNotTrack(GpsHelper.isLimitAdTrackingEnabled(mContext));
+            setUdid(clientMetadata.getAdvertisingId());
+            setDoNotTrack(clientMetadata.isDoNotTrackSet());
             setAppVersion(clientMetadata.getAppVersion());
             return getFinalUrlString();
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
index 5cfb84ed..e4d92329 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
@@ -32,9 +32,9 @@ public String generateUrlString(String serverHostname) {
                 clientMetadata.getDeviceModel(),
                 clientMetadata.getDeviceProduct());
 
-        setUdid(clientMetadata.getUdid());
+        setUdid(clientMetadata.getAdvertisingId());
 
-        setDoNotTrack(clientMetadata.getDoNoTrack());
+        setDoNotTrack(clientMetadata.isDoNotTrackSet());
 
         setKeywords(mKeywords);
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
index e842729b..8c718eb4 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
@@ -20,7 +20,7 @@
 import java.util.*;
 
 import static com.mopub.common.GpsHelper.GpsHelperListener;
-import static com.mopub.common.GpsHelper.asyncFetchAdvertisingInfo;
+import static com.mopub.common.GpsHelper.fetchAdvertisingInfoAsync;
 import static com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
 import static com.mopub.nativeads.NativeErrorCode.CONNECTION_ERROR;
 import static com.mopub.nativeads.NativeErrorCode.EMPTY_AD_RESPONSE;
@@ -110,7 +110,7 @@ public MoPubNative(final Context context,
         mMoPubNativeEventListener = EMPTY_EVENT_LISTENER;
 
         // warm up cache for google play services info
-        asyncFetchAdvertisingInfo(context);
+        fetchAdvertisingInfoAsync(context, null);
     }
 
     public void setNativeEventListener(final MoPubNativeEventListener nativeEventListener) {
@@ -133,7 +133,12 @@ public void makeRequest() {
     }
 
     public void makeRequest(final RequestParameters requestParameters) {
-        makeRequest(new NativeGpsHelperListener(requestParameters));
+        makeRequest(requestParameters, null);
+    }
+
+    public void makeRequest(final RequestParameters requestParameters,
+            Integer sequenceNumber) {
+        makeRequest(new NativeGpsHelperListener(requestParameters, sequenceNumber));
     }
 
     void makeRequest(final NativeGpsHelperListener nativeGpsHelperListener) {
@@ -150,13 +155,15 @@ void makeRequest(final NativeGpsHelperListener nativeGpsHelperListener) {
         // If we have access to Google Play Services (GPS) but the advertising info
         // is not cached then guarantee we get it before building the ad request url
         // in the callback, this is a requirement from Google
-        GpsHelper.asyncFetchAdvertisingInfoIfNotCached(
+        GpsHelper.fetchAdvertisingInfoAsync(
                 context,
                 nativeGpsHelperListener
         );
     }
 
-    void loadNativeAd(final RequestParameters requestParameters, final Integer sequenceNumber) {
+
+    private void loadNativeAd(final RequestParameters requestParameters,
+            final Integer sequenceNumber) {
         final Context context = getContextOrDestroy();
         if (context == null) {
             return;
@@ -273,14 +280,21 @@ Context getContextOrDestroy() {
     // Do not store this class as a member of MoPubNative; will result in circular reference
     class NativeGpsHelperListener implements GpsHelperListener {
         private final RequestParameters mRequestParameters;
+        private final Integer mSequenceNumber;
 
-        NativeGpsHelperListener(RequestParameters requestParameters) {
+        NativeGpsHelperListener(RequestParameters requestParameters, Integer sequenceNumber) {
             mRequestParameters = requestParameters;
+            mSequenceNumber = sequenceNumber;
+        }
+
+        NativeGpsHelperListener(RequestParameters requestParameters) {
+            this(requestParameters, null);
         }
 
         @Override
         public void onFetchAdInfoCompleted() {
-            loadNativeAd(mRequestParameters);
+
+            loadNativeAd(mRequestParameters, mSequenceNumber);
         }
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java
index c354dcc9..29d8fda9 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java
@@ -221,7 +221,7 @@ void resetRetryTime() {
     void replenishCache() {
         if (!mRequestInFlight && mMoPubNative != null && mNativeAdCache.size() < CACHE_LIMIT) {
             mRequestInFlight = true;
-            mMoPubNative.loadNativeAd(mRequestParameters, mSequenceNumber);
+            mMoPubNative.makeRequest(mRequestParameters, mSequenceNumber);
         }
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
index bbcfbf7c..3957024a 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
@@ -61,9 +61,9 @@ public String generateUrlString(final String serverHostname) {
                 clientMetadata.getDeviceModel(),
                 clientMetadata.getDeviceProduct());
 
-        setUdid(clientMetadata.getUdid());
+        setUdid(clientMetadata.getAdvertisingId());
 
-        setDoNotTrack(clientMetadata.getDoNoTrack());
+        setDoNotTrack(clientMetadata.isDoNotTrackSet());
 
         setTimezone(DateAndTime.getTimeZoneOffsetString());
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
index 954eae59..e1a1ad6e 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
@@ -36,7 +36,7 @@ public String generateUrlString(final String serverHostname) {
                 clientMetadata.getDeviceModel(),
                 clientMetadata.getDeviceProduct());
 
-        setUdid(clientMetadata.getUdid());
+        setUdid(clientMetadata.getAdvertisingId());
 
         setAppVersion(clientMetadata.getAppVersion());
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java b/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
index 74696613..44c6fedb 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
@@ -67,6 +67,6 @@ public void testCachedData_shouldBeAvailable() {
         assertThat(clientMetadata.getIsoCountryCode()).isEqualTo("1");
 
         // Other cached data.
-        assertThat(clientMetadata.getUdid()).isNotNull().isNotEmpty();
+        assertThat(clientMetadata.getAdvertisingId()).isNotNull().isNotEmpty();
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/DownloadResponseTest.java b/mopub-sdk/src/test/java/com/mopub/common/DownloadResponseTest.java
new file mode 100644
index 00000000..741db09f
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/DownloadResponseTest.java
@@ -0,0 +1,54 @@
+package com.mopub.common;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.ResponseHeader;
+import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import java.util.Locale;
+
+import static org.junit.Assert.assertArrayEquals;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
+@RunWith(SdkTestRunner.class)
+public class DownloadResponseTest {
+
+    DownloadResponse subject;
+    TestHttpResponseWithHeaders mockHttpResponse;
+
+    @Before
+    public void setup() throws Exception {
+        mockHttpResponse = new TestHttpResponseWithHeaders(200, "abcde".getBytes());
+        mockHttpResponse.addHeader(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "testCustomEvent");
+        mockHttpResponse.addHeader(ResponseHeader.CLICKTHROUGH_URL.getKey().toLowerCase(Locale.US), "http://example.com/");
+        mockHttpResponse.addHeader(ResponseHeader.FAIL_URL.getKey().toUpperCase(Locale.US), "http://mopub.com/");
+        subject = new DownloadResponse(mockHttpResponse);
+    }
+
+    @Test
+    public void testGetByteArray() throws Exception {
+        assertArrayEquals("abcde".getBytes(), subject.getByteArray());
+    }
+
+    @Test
+    public void testGetStatusCode() throws Exception {
+        assertEquals(200, subject.getStatusCode());
+    }
+
+    @Test
+    public void testGetContentLength() throws Exception {
+        assertEquals("abcde".getBytes().length, subject.getContentLength());
+    }
+
+    @Test
+    public void testGetFirstHeader_caseInsensitive() throws Exception {
+        assertEquals("testCustomEvent", subject.getFirstHeader(ResponseHeader.CUSTOM_EVENT_NAME));
+        assertEquals("http://example.com/", subject.getFirstHeader(ResponseHeader.CLICKTHROUGH_URL));
+        assertEquals("http://mopub.com/", subject.getFirstHeader(ResponseHeader.FAIL_URL));
+        assertNull(subject.getFirstHeader(ResponseHeader.CUSTOM_EVENT_DATA));
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
index 25fd0bcc..a35aa96f 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
@@ -2,7 +2,6 @@
 
 import android.app.Activity;
 import android.content.Context;
-import android.content.SharedPreferences;
 import android.os.Looper;
 
 import com.mopub.common.factories.MethodBuilderFactory;
@@ -40,12 +39,15 @@
         public static final String ADVERTISING_ID = "38400000-8cf0-11bd-b23e-10b96e40000d";
         public static final boolean LIMIT_AD_TRACKING_ENABLED = true;
 
+        public String mAdId = ADVERTISING_ID;
+        public boolean mLimitAdTrackingEnabled = LIMIT_AD_TRACKING_ENABLED;
+
         public String getId() {
-            return ADVERTISING_ID;
+            return mAdId;
         }
 
         public boolean isLimitAdTrackingEnabled() {
-            return LIMIT_AD_TRACKING_ENABLED;
+            return mLimitAdTrackingEnabled;
         }
     }
 
@@ -74,164 +76,151 @@ public void tearDown() throws Exception {
     }
 
     @Test
-    public void isGpsAvailable_whenGooglePlayServicesIsLinked_shouldReturnTrue() throws Exception {
+    public void isPlayServicesAvailable_whenGooglePlayServicesIsLinked_shouldReturnTrue() throws Exception {
         GpsHelper.setClassNamesForTesting();
         when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE);
-        assertThat(GpsHelper.isGpsAvailable(context)).isTrue();
+        assertThat(GpsHelper.isPlayServicesAvailable(context)).isTrue();
     }
 
     @Test
-    public void isGpsAvailable_whenGooglePlayServicesReturnsNonSuccessCode_shouldReturnFalse() throws Exception {
+    public void isPlayServicesAvailable_whenGooglePlayServicesReturnsNonSuccessCode_shouldReturnFalse() throws Exception {
         GpsHelper.setClassNamesForTesting();
         when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE + 1);
-        assertThat(GpsHelper.isGpsAvailable(context)).isFalse();
+        assertThat(GpsHelper.isPlayServicesAvailable(context)).isFalse();
     }
 
     @Test
-    public void isGpsAvailable_whenGooglePlayServicesReturnsNull_shouldReturnFalse() throws Exception {
+    public void isPlayServicesAvailable_whenGooglePlayServicesReturnsNull_shouldReturnFalse() throws Exception {
         GpsHelper.setClassNamesForTesting();
         when(methodBuilder.execute()).thenReturn(null);
-        assertThat(GpsHelper.isGpsAvailable(context)).isFalse();
+        assertThat(GpsHelper.isPlayServicesAvailable(context)).isFalse();
     }
 
     @Test
-    public void isGpsAvailable_whenGooglePlayServicesIsNotLinked_shouldReturnFalse() throws Exception {
-        assertThat(GpsHelper.isGpsAvailable(context)).isFalse();
+    public void isPlayServicesAvailable_whenGooglePlayServicesIsNotLinked_shouldReturnFalse() throws Exception {
+        assertThat(GpsHelper.isPlayServicesAvailable(context)).isFalse();
     }
 
     @Test
-    public void asyncFetchAdvertisingInfo_whenGooglePlayServicesIsLinked_shouldInvokeCallbackOnMainLooper() throws Exception {
+    public void fetchAdvertisingInfoAsync_whenGooglePlayServicesIsLinked_shouldInvokeCallbackOnMainLooper() throws Exception {
         GpsHelper.setClassNamesForTesting();
         when(methodBuilder.execute()).thenReturn(
                 adInfo,
-                adInfo.ADVERTISING_ID,
-                adInfo.LIMIT_AD_TRACKING_ENABLED
+                adInfo.mAdId,
+                adInfo.mLimitAdTrackingEnabled
         );
 
-        GpsHelper.asyncFetchAdvertisingInfo(context, semaphoreGpsHelperListener);
+        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
         safeAcquireSemaphore();
         assertThat(gpsHelperListenerCallbackLooper).isEqualTo(Looper.getMainLooper());
     }
 
     @Test
-    public void asyncFetchAdvertisingInfo_whenGooglePlayServicesIsLinked_shouldPopulateSharedPreferences() throws Exception {
-        verifyCleanSharedPreferences(context);
+    public void fetchAdvertisingInfoAsync_whenGooglePlayServicesIsLinked_shouldPopulateClientMetadata() throws Exception {
+        verifyCleanClientMetadata(context);
         GpsHelper.setClassNamesForTesting();
         when(methodBuilder.execute()).thenReturn(
+                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE,
                 adInfo,
-                adInfo.ADVERTISING_ID,
-                adInfo.LIMIT_AD_TRACKING_ENABLED
+                adInfo.mAdId,
+                adInfo.mLimitAdTrackingEnabled
         );
 
-        GpsHelper.asyncFetchAdvertisingInfo(context, semaphoreGpsHelperListener);
+        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
         safeAcquireSemaphore();
-        verifySharedPreferences(context, adInfo);
+        verifyClientMetadata(context, adInfo);
     }
 
     @Test
-    public void asyncFetchAdvertisingInfo_whenReflectedMethodCallThrows_shouldNotPopulateSharedPreferences() throws Exception {
-        verifyCleanSharedPreferences(context);
+    public void fetchAdvertisingInfoAsync_whenReflectedMethodCallThrows_shouldNotPopulateClientMetadata() throws Exception {
+        verifyCleanClientMetadata(context);
         GpsHelper.setClassNamesForTesting();
         when(methodBuilder.execute()).thenThrow(new Exception());
 
-        GpsHelper.asyncFetchAdvertisingInfo(context, semaphoreGpsHelperListener);
+        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
         safeAcquireSemaphore();
-        verifyCleanSharedPreferences(context);
+        verifyCleanClientMetadata(context);
     }
 
     @Test
-    public void asyncFetchAdvertisingInfo_whenReflectedMethodCallReturnsNull_shouldNotPopulateSharedPreferences() throws Exception {
-        verifyCleanSharedPreferences(context);
+    public void fetchAdvertisingInfoAsync_whenReflectedMethodCallReturnsNull_shouldNotPopulateClientMetadata() throws Exception {
+        verifyCleanClientMetadata(context);
         GpsHelper.setClassNamesForTesting();
         when(methodBuilder.execute()).thenReturn(null);
 
-        GpsHelper.asyncFetchAdvertisingInfo(context, semaphoreGpsHelperListener);
+        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
         safeAcquireSemaphore();
-        verifyCleanSharedPreferences(context);
+        verifyCleanClientMetadata(context);
     }
 
     @Test
-    public void asyncFetchAdvertisingInfoIfNotCached_whenGooglePlayServicesIsLinkedAndSharedPreferencesIsClean_shouldPopulateSharedPreferences() throws Exception {
-        verifyCleanSharedPreferences(context);
+    public void fetchAdvertisingInfoAsync_whenGooglePlayServicesIsLinkedAndClientMetadataIsClean_shouldPopulateClientMetadata() throws Exception {
+        verifyCleanClientMetadata(context);
         GpsHelper.setClassNamesForTesting();
         when(methodBuilder.execute()).thenReturn(
                 GpsHelper.GOOGLE_PLAY_SUCCESS_CODE,
                 adInfo,
-                adInfo.ADVERTISING_ID,
-                adInfo.LIMIT_AD_TRACKING_ENABLED
+                adInfo.mAdId,
+                adInfo.mLimitAdTrackingEnabled
         );
 
-        GpsHelper.asyncFetchAdvertisingInfoIfNotCached(context, semaphoreGpsHelperListener);
+        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
         safeAcquireSemaphore();
-        verifySharedPreferences(context, adInfo);
+        verifyClientMetadata(context, adInfo);
     }
 
     @Test
-    public void asyncFetchAdvertisingInfoIfNotCached_whenGooglePlayServicesLinkedAndSharedPreferencesIsPopulated_shouldNotRePopulateSharedPreferences() throws Exception {
-        verifyCleanSharedPreferences(context);
-        populateAndVerifySharedPreferences(context, adInfo);
+    public void fetchAdvertisingInfoAsync_whenGooglePlayServicesLinkedAndClientMetadataIsPopulated_shouldRePopulateClientMetadata() throws Exception {
+        verifyCleanClientMetadata(context);
+        populateAndVerifyClientMetadata(context, adInfo);
+        adInfo.mLimitAdTrackingEnabled = false;
         GpsHelper.setClassNamesForTesting();
         when(methodBuilder.execute()).thenReturn(
-                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE
+                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE,
+                adInfo,
+                adInfo.mAdId,
+                adInfo.mLimitAdTrackingEnabled
         );
 
-        GpsHelper.asyncFetchAdvertisingInfoIfNotCached(context, semaphoreGpsHelperListener);
+        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
         safeAcquireSemaphore();
-        verify(methodBuilder).execute();
+        verifyClientMetadata(context, adInfo);
     }
 
     @Test
-    public void asyncFetchAdvertisingInfoIfNotCached_whenGooglePlayServicesIsNotLinked_shouldNotPopulateSharedPreferences() throws Exception {
-        verifyCleanSharedPreferences(context);
+    public void fetchAdvertisingInfoAsync_whenGooglePlayServicesIsNotLinked_shouldNotPopulateClientMetadata() throws Exception {
+        verifyCleanClientMetadata(context);
         GpsHelper.setClassNamesForTesting();
         when(methodBuilder.execute()).thenReturn(
                 GpsHelper.GOOGLE_PLAY_SUCCESS_CODE + 1
         );
 
-        GpsHelper.asyncFetchAdvertisingInfoIfNotCached(context, semaphoreGpsHelperListener);
+        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
         safeAcquireSemaphore();
-        verifyCleanSharedPreferences(context);
+        verifyCleanClientMetadata(context);
     }
 
     @Test
-    public void isSharedPreferencesPopulated_whenContainsAdvertisingIdKeyAndIsLimitAdTrackingEnabledKey_shouldReturnTrue() throws Exception {
-        verifyCleanSharedPreferences(context);
-        populateAndVerifySharedPreferences(context, adInfo);
-        assertThat(GpsHelper.isSharedPreferencesPopluated(context)).isTrue();
-    }
-
-    @Test
-    public void isSharedPreferencesPopulated_whenDoesntContainBothKeys_shouldReturnFalse() throws Exception {
-        verifyCleanSharedPreferences(context);
-        SharedPreferencesHelper.getSharedPreferences(context)
-                .edit()
-                .putString(GpsHelper.ADVERTISING_ID_KEY, adInfo.ADVERTISING_ID)
-                .commit();
-        assertThat(GpsHelper.isSharedPreferencesPopluated(context)).isFalse();
-
-        SharedPreferencesHelper.getSharedPreferences(context).edit().clear().commit();
-        verifyCleanSharedPreferences(context);
-        SharedPreferencesHelper.getSharedPreferences(context)
-                .edit()
-                .putBoolean(GpsHelper.IS_LIMIT_AD_TRACKING_ENABLED_KEY, adInfo.LIMIT_AD_TRACKING_ENABLED)
-                .commit();
-        assertThat(GpsHelper.isSharedPreferencesPopluated(context)).isFalse();
+    public void isClientMetadataPopulated_whenContainsAdvertisingIdKeyAndIsLimitAdTrackingEnabledKey_shouldReturnTrue() throws Exception {
+        verifyCleanClientMetadata(context);
+        populateAndVerifyClientMetadata(context, adInfo);
+        assertThat(GpsHelper.isClientMetadataPopulated(context)).isTrue();
     }
 
     @Test
-    public void isSharedPreferencesPopulated_whenClean_shouldReturnFalse() throws Exception {
-        verifyCleanSharedPreferences(context);
-        assertThat(GpsHelper.isSharedPreferencesPopluated(context)).isFalse();
+    public void isClientMetadataPopulated_whenClean_shouldReturnFalse() throws Exception {
+        verifyCleanClientMetadata(context);
+        assertThat(GpsHelper.isClientMetadataPopulated(context)).isFalse();
     }
 
     @Test
-    public void updateSharedPreferences_whenPassingInValidAdInfoObject_shouldUpdateSharedPreferences() throws Exception {
+    public void updateClientMetadata_whenPassingInValidAdInfoObject_shouldUpdateClientMetadata() throws Exception {
         // Use the real MethodBuilderFactory for this test, not the mock one
         // Most mocks are set by default in SdkTestRunner setup
         MethodBuilderFactory.setInstance(new MethodBuilderFactory());
-        verifyCleanSharedPreferences(context);
-        GpsHelper.updateSharedPreferences(context, adInfo);
-        verifySharedPreferences(context, adInfo);
+        verifyCleanClientMetadata(context);
+        GpsHelper.updateClientMetadata(context, adInfo);
+        verifyClientMetadata(context, adInfo);
     }
 
     @Test
@@ -274,29 +263,6 @@ public void reflectedGetAdvertisingId_whenReflectedMethodCallThrows_shouldReturn
         verify(methodBuilder, times(2)).execute();
     }
 
-    @Test
-    public void getAdvertisingId_whenGooglePlayServicesIsLinkedAndAdvertisingIdIsCached_shouldReturnAdvertisingId() throws Exception {
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE);
-        SharedPreferencesHelper.getSharedPreferences(context)
-                .edit()
-                .putString(GpsHelper.ADVERTISING_ID_KEY, adInfo.ADVERTISING_ID)
-                .commit();
-        assertThat(GpsHelper.getAdvertisingId(context)).isEqualTo(adInfo.ADVERTISING_ID);
-    }
-
-    @Test
-    public void getAdvertisingId_whenGooglePlayServicesIsLinkedAndAdInfoIsNotCached_shouldReturnNull() throws Exception {
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE);
-        assertThat(GpsHelper.getAdvertisingId(context)).isNull();
-    }
-
-    @Test
-    public void getAdvertisingId_whenGooglePlayServicesIsNotLinked_shouldReturnNull() throws Exception {
-        assertThat(GpsHelper.getAdvertisingId(context)).isNull();
-    }
-
     @Test
     public void isLimitAdTrackingEnabled_whenGooglePlayServicesIsLinkedAndLimitAdTrackingIsCached_shouldReturnLimitAdTracking() throws Exception {
         GpsHelper.setClassNamesForTesting();
@@ -320,13 +286,10 @@ public void isLimitAdTrackingEnabled_whenGooglePlayServicesIsNotLinked_shouldRet
         assertThat(GpsHelper.isLimitAdTrackingEnabled(context)).isFalse();
     }
 
-    static public void populateAndVerifySharedPreferences(Context context, TestAdInfo adInfo) {
-        SharedPreferencesHelper.getSharedPreferences(context)
-                .edit()
-                .putString(GpsHelper.ADVERTISING_ID_KEY, adInfo.ADVERTISING_ID)
-                .putBoolean(GpsHelper.IS_LIMIT_AD_TRACKING_ENABLED_KEY, adInfo.LIMIT_AD_TRACKING_ENABLED)
-                .commit();
-        verifySharedPreferences(context, adInfo);
+    static public void populateAndVerifyClientMetadata(Context context, TestAdInfo adInfo) {
+        ClientMetadata clientMetadata = ClientMetadata.getInstance(context);
+        clientMetadata.setAdvertisingInfo(adInfo.getId(), adInfo.isLimitAdTrackingEnabled());
+        verifyClientMetadata(context, adInfo);
     }
 
     private void safeAcquireSemaphore() throws Exception {
@@ -335,18 +298,15 @@ private void safeAcquireSemaphore() throws Exception {
         semaphore.acquire();
     }
 
-    static public void verifySharedPreferences(Context context, TestAdInfo adInfo) {
-        SharedPreferences sharedPreferences = SharedPreferencesHelper.getSharedPreferences(context);
-        assertThat(sharedPreferences.contains(GpsHelper.ADVERTISING_ID_KEY)).isTrue();
-        assertThat(sharedPreferences.getString(GpsHelper.ADVERTISING_ID_KEY, null)).isEqualTo(adInfo.ADVERTISING_ID);
-        assertThat(sharedPreferences.contains(GpsHelper.IS_LIMIT_AD_TRACKING_ENABLED_KEY)).isTrue();
-        assertThat(sharedPreferences.getBoolean(GpsHelper.IS_LIMIT_AD_TRACKING_ENABLED_KEY, false)).isEqualTo(adInfo.LIMIT_AD_TRACKING_ENABLED);
+    static public void verifyClientMetadata(Context context, TestAdInfo adInfo) {
+        ClientMetadata clientMetadata = ClientMetadata.getInstance(context);
+        assertThat(clientMetadata.getAdvertisingId()).isEqualTo("ifa:" + adInfo.getId());
+        assertThat(clientMetadata.isDoNotTrackSet()).isEqualTo(adInfo.isLimitAdTrackingEnabled());
     }
 
-    static public void verifyCleanSharedPreferences(Context context) {
-        SharedPreferences sharedPreferences = SharedPreferencesHelper.getSharedPreferences(context);
-        assertThat(sharedPreferences.contains(GpsHelper.ADVERTISING_ID_KEY)).isFalse();
-        assertThat(sharedPreferences.contains(GpsHelper.IS_LIMIT_AD_TRACKING_ENABLED_KEY)).isFalse();
+    static public void verifyCleanClientMetadata(Context context) {
+        ClientMetadata clientMetadata = ClientMetadata.getInstance(context);
+        assertThat(clientMetadata.isAdvertisingInfoSet()).isFalse();
     }
 }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
index cabf6b71..e6473af7 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
@@ -346,7 +346,7 @@ public void loadAd_shouldScheduleRefreshIfNoNetworkConnectivity() throws Excepti
     @Test
     public void loadAd_whenGooglePlayServicesIsLinkedAndAdInfoIsNotCached_shouldCacheAdInfoBeforeFetchingAd() throws Exception {
         SharedPreferencesHelper.getSharedPreferences(context).edit().clear().commit();
-        GpsHelperTest.verifyCleanSharedPreferences(context);
+        GpsHelperTest.verifyCleanClientMetadata(context);
 
         GpsHelper.setClassNamesForTesting();
         GpsHelperTest.TestAdInfo adInfo = new GpsHelperTest.TestAdInfo();
@@ -369,13 +369,12 @@ public void loadAd_whenGooglePlayServicesIsLinkedAndAdInfoIsNotCached_shouldCach
         Thread.sleep(500);
 
         verify(mockAdViewControllerGpsHelperListener).onFetchAdInfoCompleted();
-        GpsHelperTest.verifySharedPreferences(context, adInfo);
+        GpsHelperTest.verifyClientMetadata(context, adInfo);
     }
 
     @Test
     public void loadAd_whenGooglePlayServicesIsNotLinked_shouldFetchAdFast() throws Exception {
-        SharedPreferencesHelper.getSharedPreferences(context).edit().clear().commit();
-        GpsHelperTest.verifyCleanSharedPreferences(context);
+        GpsHelperTest.verifyCleanClientMetadata(context);
 
         GpsHelper.setClassNamesForTesting();
         when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
@@ -392,19 +391,22 @@ public void loadAd_whenGooglePlayServicesIsNotLinked_shouldFetchAdFast() throws
         // no need to sleep since it run the callback without an async task
 
         verify(mockAdViewControllerGpsHelperListener).onFetchAdInfoCompleted();
-        GpsHelperTest.verifyCleanSharedPreferences(context);
+        GpsHelperTest.verifyCleanClientMetadata(context);
     }
 
     @Test
     public void loadAd_whenGooglePlayServicesIsLinkedAndAdInfoIsCached_shouldFetchAdFast() throws Exception {
         GpsHelperTest.TestAdInfo adInfo = new GpsHelperTest.TestAdInfo();
-        GpsHelperTest.populateAndVerifySharedPreferences(context, adInfo);
+        GpsHelperTest.populateAndVerifyClientMetadata(context, adInfo);
         GpsHelper.setClassNamesForTesting();
 
         when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
         when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
         when(methodBuilder.execute()).thenReturn(
-                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE
+                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE,
+                adInfo,
+                adInfo.mAdId,
+                adInfo.mLimitAdTrackingEnabled
         );
 
         final AdViewController.AdViewControllerGpsHelperListener mockAdViewControllerGpsHelperListener
@@ -416,7 +418,7 @@ public void loadAd_whenGooglePlayServicesIsLinkedAndAdInfoIsCached_shouldFetchAd
         // no need to sleep since it run the callback without an async task
 
         verify(mockAdViewControllerGpsHelperListener).onFetchAdInfoCompleted();
-        GpsHelperTest.verifySharedPreferences(context, adInfo);
+        GpsHelperTest.verifyClientMetadata(context, adInfo);
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
index b27d9986..3ca84fce 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
@@ -87,19 +87,20 @@ public void reportAppOpen_onEmptyResponse_shouldMakeSecondRequest() throws Excep
     @Test
     public void reportAppOpen_whenGooglePlayServicesIsLinkedAndAdInfoIsNotCached_shouldUseAdInfoParams() throws Exception {
         GpsHelper.setClassNamesForTesting();
-        GpsHelperTest.verifyCleanSharedPreferences(context);
+        GpsHelperTest.verifyCleanClientMetadata(context);
         GpsHelperTest.TestAdInfo adInfo = new GpsHelperTest.TestAdInfo();
 
         when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
         when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
         when(methodBuilder.execute()).thenReturn(
+                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE,
                 adInfo,
-                adInfo.ADVERTISING_ID,
-                adInfo.LIMIT_AD_TRACKING_ENABLED,
+                adInfo.mAdId,
+                adInfo.mLimitAdTrackingEnabled,
                 GpsHelper.GOOGLE_PLAY_SUCCESS_CODE
         );
 
-        expectedUdid = "ifa%3A" + adInfo.ADVERTISING_ID;
+        expectedUdid = "ifa%3A" + adInfo.mAdId;
         dnt = true;
 
         fakeHttpLayer.addPendingHttpResponse(200, "doesn't matter what this is as long as it's not nothing");
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java
index e2ca6644..1a7fde20 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java
@@ -15,6 +15,11 @@ public TestHttpResponseWithHeaders(int statusCode, String responseBody) {
         headers = new HashMap<String, Header>();
     }
 
+    public TestHttpResponseWithHeaders(int statusCode, byte[] responseBody) {
+        super(statusCode, responseBody);
+        headers = new HashMap<String, Header>();
+    }
+
     @Override
     public void addHeader(String name, String value) {
         headers.put(name, new BasicHeader(name, value));
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
index 7510acf4..ad2d8969 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
@@ -82,7 +82,7 @@ public void tearDown() {
     public void
     makeRequest_whenGooglePlayServicesIsLinkedAndAdInfoIsNotCached_shouldCacheAdInfoBeforeFetchingAd() throws Exception {
         SharedPreferencesHelper.getSharedPreferences(context).edit().clear().commit();
-        GpsHelperTest.verifyCleanSharedPreferences(context);
+        GpsHelperTest.verifyCleanClientMetadata(context);
 
         GpsHelper.setClassNamesForTesting();
         GpsHelperTest.TestAdInfo adInfo = new GpsHelperTest.TestAdInfo();
@@ -100,13 +100,13 @@ public void tearDown() {
         semaphore.acquire();
 
         verify(nativeGpsHelperListener).onFetchAdInfoCompleted();
-        GpsHelperTest.verifySharedPreferences(context, adInfo);
+        GpsHelperTest.verifyClientMetadata(context, adInfo);
     }
 
     @Test
     public void makeRequest_whenGooglePlayServicesIsNotLinked_shouldFetchAdFast() throws Exception {
         SharedPreferencesHelper.getSharedPreferences(context).edit().clear().commit();
-        GpsHelperTest.verifyCleanSharedPreferences(context);
+        GpsHelperTest.verifyCleanClientMetadata(context);
 
         GpsHelper.setClassNamesForTesting();
         when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
@@ -119,7 +119,7 @@ public void makeRequest_whenGooglePlayServicesIsNotLinked_shouldFetchAdFast() th
         // no need to sleep since it run the callback without an async task
 
         verify(nativeGpsHelperListener).onFetchAdInfoCompleted();
-        GpsHelperTest.verifyCleanSharedPreferences(context);
+        GpsHelperTest.verifyCleanClientMetadata(context);
     }
 
     @Test
@@ -142,7 +142,7 @@ public void makeRequest_whenGooglePlayServicesIsNotLinked_withNullContext_should
     @Test
     public void makeRequest_whenGooglePlayServicesIsLinkedAndAdInfoIsCached_shouldFetchAdFast() throws Exception {
         GpsHelperTest.TestAdInfo adInfo = new GpsHelperTest.TestAdInfo();
-        GpsHelperTest.populateAndVerifySharedPreferences(context, adInfo);
+        GpsHelperTest.populateAndVerifyClientMetadata(context, adInfo);
         GpsHelper.setClassNamesForTesting();
 
         when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
@@ -155,7 +155,7 @@ public void makeRequest_whenGooglePlayServicesIsLinkedAndAdInfoIsCached_shouldFe
         // no need to sleep since it run the callback without an async task
 
         verify(nativeGpsHelperListener).onFetchAdInfoCompleted();
-        GpsHelperTest.verifySharedPreferences(context, adInfo);
+        GpsHelperTest.verifyClientMetadata(context, adInfo);
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
index 36bebe63..13873d0c 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
@@ -61,7 +61,7 @@ public void constructor_shouldInitializeCorrectly() {
     public void loadAds_shouldReplenishCache() {
         subject.loadAds(requestParameters, mockMoPubNative);
         assertThat(subject.mRequestInFlight).isTrue();
-        verify(mockMoPubNative).loadNativeAd(requestParameters, 0);
+        verify(mockMoPubNative).makeRequest(requestParameters, 0);
     }
 
     @Test
@@ -195,7 +195,7 @@ public void replenishCache_shouldLoadNativeAd_shouldMarkRequestInFlight() {
 
         subject.replenishCache();
 
-        verify(mockMoPubNative).loadNativeAd(any(RequestParameters.class), eq(0));
+        verify(mockMoPubNative).makeRequest(any(RequestParameters.class), eq(0));
         assertThat(subject.mRequestInFlight).isTrue();
     }
 
@@ -206,7 +206,7 @@ public void replenishCache_withRequestInFlight_shouldNotLoadNativeAd() {
 
         subject.replenishCache();
 
-        verify(mockMoPubNative, never()).loadNativeAd(requestParameters, 0);
+        verify(mockMoPubNative, never()).makeRequest(requestParameters, 0);
         assertThat(subject.mRequestInFlight).isTrue();
     }
 
@@ -221,7 +221,7 @@ public void replenishCache_withCacheSizeAtLimit_shouldNotLoadNativeAd() {
 
         subject.replenishCache();
 
-        verify(mockMoPubNative, never()).loadNativeAd(any(RequestParameters.class), any(Integer.class));
+        verify(mockMoPubNative, never()).makeRequest(any(RequestParameters.class), any(Integer.class));
         assertThat(subject.mRequestInFlight).isFalse();
     }
 
@@ -294,7 +294,7 @@ public void moPubNativeNetworkListener_onNativeLoad_withNonFullCache_shouldReple
         subject.getMoPubNativeNetworkListener().onNativeLoad(mockNativeResponse);
 
         assertThat(subject.mRequestInFlight).isEqualTo(true);
-        verify(mockMoPubNative).loadNativeAd(any(RequestParameters.class), eq(1));
+        verify(mockMoPubNative).makeRequest(any(RequestParameters.class), eq(1));
     }
 
     @Test
diff --git a/robotium-tests/pom.xml b/robotium-tests/pom.xml
index e15157b9..c3710758 100644
--- a/robotium-tests/pom.xml
+++ b/robotium-tests/pom.xml
@@ -28,7 +28,7 @@
         <dependency>
             <groupId>com.google.android.gms</groupId>
             <artifactId>play-services</artifactId>
-            <version>5.2.08</version>
+            <version>5.0.89</version>
             <type>aar</type>
         </dependency>
 
