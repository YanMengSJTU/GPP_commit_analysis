diff --git a/CHANGELOG.md b/CHANGELOG.md
index 6900f89e..ad9b89df 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,15 @@
+## Version 4.8.0 (August 1, 2016)
+- Changed the behavior of `MoPubInterstitial#load()` while an interstitial is loading or has been successfully loaded. Previously, this would discard the currently-caching or cached interstitial -- now the interstitial will be unaffected and will remain in the cache.
+- `MoPubInterstitial`s can now be shown only once per successful ad load.
+- Modified a number of Native Ads APIs (manual integration) to accept Context instead of Activity. Affected classes/methods include: `MoPubNative`, `AdapterHelper`, `CustomEventNative#loadNativeAd()`, and `MoPubAdRenderer#createAdView()`.
+
+#### Version 4.7.1 (June 10, 2016)
+- Fixed deeplink bug.
+
+## Version 4.7.0 (June 2, 2016)
+- Rewarded video server-side currency rewarding (Beta).
+- Enhanced Android intent handling.
+
 #### Version 4.6.1 (May 5, 2016)
 - Enhanced caching logic for HTML and MRAID interstitials. Resource-heavy interstitials will now render more quickly when MoPubInterstitial#show() is called.
 
diff --git a/README.md b/README.md
index 398e7328..31ebc99e 100644
--- a/README.md
+++ b/README.md
@@ -27,7 +27,7 @@ The MoPub SDK is available via:
     }
 
     dependencies {
-        compile('com.mopub:mopub-sdk:4.6.1@aar') {
+        compile('com.mopub:mopub-sdk:4.8.0@aar') {
             transitive = true
         }
     }
@@ -62,7 +62,9 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- Enhanced caching logic for HTML and MRAID interstitials. Resource-heavy interstitials will now render more quickly when MoPubInterstitial#show() is called.
+- Changed the behavior of `MoPubInterstitial#load()` while an interstitial is loading or has been successfully loaded. Previously, this would discard the currently-caching or cached interstitial -- now the interstitial will be unaffected and will remain in the cache.
+- `MoPubInterstitial`s can now be shown only once per successful ad load.
+- Modified a number of Native Ads APIs (manual integration) to accept Context instead of Activity. Affected classes/methods include: `MoPubNative`, `AdapterHelper`, `CustomEventNative#loadNativeAd()`, and `MoPubAdRenderer#createAdView()`.
 
 ## Requirements
 
diff --git a/build.gradle b/build.gradle
index 6410ab25..6a87580d 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,10 +5,10 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.1'
+        classpath 'com.android.tools.build:gradle:2.1.2'
     }
 }
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '2.5'
+    gradleVersion = '2.10'
 }
diff --git a/extras/src/com/mopub/nativeads/FacebookAdRenderer.java b/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
index 72e87349..c054c9a9 100644
--- a/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
+++ b/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -38,9 +38,9 @@ public FacebookAdRenderer(final ViewBinder viewBinder) {
     }
 
     @Override
-    public View createAdView(final Activity activity, final ViewGroup parent) {
+    public View createAdView(final Context context, final ViewGroup parent) {
         final View adView = LayoutInflater
-                .from(activity)
+                .from(context)
                 .inflate(mViewBinder.layoutId, parent, false);
         final View mainImageView = adView.findViewById(mViewBinder.mainImageId);
         if (mainImageView == null) {
@@ -72,7 +72,7 @@ public View createAdView(final Activity activity, final ViewGroup parent) {
             mainImageView.setVisibility(View.GONE);
         }
 
-        final MediaView mediaView = new MediaView(activity);
+        final MediaView mediaView = new MediaView(context);
         ViewGroup mainImageParent = (ViewGroup) mainImageView.getParent();
         int mainImageIndex = mainImageParent.indexOfChild(mainImageView);
         mainImageParent.addView(mediaView, mainImageIndex + 1, mediaViewLayoutParams);
diff --git a/extras/src/com/mopub/nativeads/FacebookNative.java b/extras/src/com/mopub/nativeads/FacebookNative.java
index ab951a6d..8faa9268 100644
--- a/extras/src/com/mopub/nativeads/FacebookNative.java
+++ b/extras/src/com/mopub/nativeads/FacebookNative.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.view.View;
 
@@ -47,7 +46,7 @@
 
     // CustomEventNative implementation
     @Override
-    protected void loadNativeAd(final Activity activity,
+    protected void loadNativeAd(final Context context,
             final CustomEventNativeListener customEventNativeListener,
             final Map<String, Object> localExtras,
             final Map<String, String> serverExtras) {
@@ -75,12 +74,12 @@ protected void loadNativeAd(final Activity activity,
         if (shouldUseVideoEnabledNativeAd(sIsVideoRendererAvailable, videoEnabledString,
                 videoEnabledFromServer)) {
             final FacebookVideoEnabledNativeAd facebookVideoEnabledNativeAd =
-                    new FacebookVideoEnabledNativeAd(activity,
-                            new NativeAd(activity, placementId), customEventNativeListener);
+                    new FacebookVideoEnabledNativeAd(context,
+                            new NativeAd(context, placementId), customEventNativeListener);
             facebookVideoEnabledNativeAd.loadAd();
         } else {
             final FacebookStaticNativeAd facebookStaticNativeAd = new FacebookStaticNativeAd(
-                    activity, new NativeAd(activity, placementId), customEventNativeListener);
+                    context, new NativeAd(context, placementId), customEventNativeListener);
             facebookStaticNativeAd.loadAd();
         }
     }
diff --git a/extras/src/com/mopub/nativeads/InMobiNative.java b/extras/src/com/mopub/nativeads/InMobiNative.java
index 0c0c7a04..d6a0e15e 100644
--- a/extras/src/com/mopub/nativeads/InMobiNative.java
+++ b/extras/src/com/mopub/nativeads/InMobiNative.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.util.Log;
 import android.view.View;
@@ -32,7 +31,7 @@
 
     // CustomEventNative implementation
     @Override
-    protected void loadNativeAd(final Activity activity,
+    protected void loadNativeAd(final Context context,
             final CustomEventNativeListener customEventNativeListener,
             final Map<String, Object> localExtras,
             final Map<String, String> serverExtras) {
@@ -45,11 +44,11 @@ protected void loadNativeAd(final Activity activity,
             return;
         }
 
-        InMobi.initialize(activity, appId);
+        InMobi.initialize(context, appId);
         final InMobiStaticNativeAd inMobiStaticNativeAd =
-                new InMobiStaticNativeAd(activity,
-                        new ImpressionTracker(activity),
-                        new NativeClickHandler(activity),
+                new InMobiStaticNativeAd(context,
+                        new ImpressionTracker(context),
+                        new NativeClickHandler(context),
                         customEventNativeListener);
         inMobiStaticNativeAd.setIMNative(new IMNative(inMobiStaticNativeAd));
         inMobiStaticNativeAd.loadAd();
diff --git a/extras/src/com/mopub/nativeads/MillennialNative.java b/extras/src/com/mopub/nativeads/MillennialNative.java
index 7a312731..85070c23 100644
--- a/extras/src/com/mopub/nativeads/MillennialNative.java
+++ b/extras/src/com/mopub/nativeads/MillennialNative.java
@@ -25,7 +25,7 @@
     private static final Handler UI_THREAD_HANDLER = new Handler(Looper.getMainLooper());
 
     @Override
-    protected void loadNativeAd(final Activity activity,
+    protected void loadNativeAd(final Context context,
             final CustomEventNativeListener listener,
             final Map<String, Object> localExtras,
             final Map<String, String> serverExtras) {
@@ -35,7 +35,7 @@ protected void loadNativeAd(final Activity activity,
 
         if ( !MMSDK.isInitialized() ) {
             try {
-                MMSDK.initialize(activity);
+                MMSDK.initialize((Activity) context);
             } catch ( Exception e ) {
                 Log.e(LOGCAT_TAG, "Unable to initialize the Millennial SDK-- " + e.getMessage());
                 e.printStackTrace();
@@ -85,10 +85,10 @@ public void run() {
         try {
             NativeAd nativeAd = NativeAd.createInstance(placementId, NativeAd.NATIVE_TYPE_INLINE);
             final MillennialStaticNativeAd millennialStaticNativeAd =
-                    new MillennialStaticNativeAd(activity,
+                    new MillennialStaticNativeAd(context,
                             nativeAd,
-                            new ImpressionTracker(activity),
-                            new NativeClickHandler(activity),
+                            new ImpressionTracker(context),
+                            new NativeClickHandler(context),
                             listener);
             millennialStaticNativeAd.loadAd();
         } catch ( MMException e ) {
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 30d399d8..13372aef 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 57375a65..1e12d0b2 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Jul 15 14:33:43 PDT 2015
+#Mon Jun 20 17:07:26 PDT 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.5-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
diff --git a/gradlew b/gradlew
index 91a7e269..9d82f789 100755
--- a/gradlew
+++ b/gradlew
@@ -42,11 +42,6 @@ case "`uname`" in
     ;;
 esac
 
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
 # Attempt to set APP_HOME
 # Resolve links: $0 may be a link
 PRG="$0"
@@ -61,9 +56,9 @@ while [ -h "$PRG" ] ; do
     fi
 done
 SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
+cd "`dirname \"$PRG\"`/" >/dev/null
 APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
+cd "$SAVED" >/dev/null
 
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
@@ -114,6 +109,7 @@ fi
 if $cygwin ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
     ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
diff --git a/gradlew.bat b/gradlew.bat
index 8a0b282a..aec99730 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -1,90 +1,90 @@
-@if "%DEBUG%" == "" @echo off
-@rem ##########################################################################
-@rem
-@rem  Gradle startup script for Windows
-@rem
-@rem ##########################################################################
-
-@rem Set local scope for the variables with windows NT shell
-if "%OS%"=="Windows_NT" setlocal
-
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
-set DIRNAME=%~dp0
-if "%DIRNAME%" == "" set DIRNAME=.
-set APP_BASE_NAME=%~n0
-set APP_HOME=%DIRNAME%
-
-@rem Find java.exe
-if defined JAVA_HOME goto findJavaFromJavaHome
-
-set JAVA_EXE=java.exe
-%JAVA_EXE% -version >NUL 2>&1
-if "%ERRORLEVEL%" == "0" goto init
-
-echo.
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:findJavaFromJavaHome
-set JAVA_HOME=%JAVA_HOME:"=%
-set JAVA_EXE=%JAVA_HOME%/bin/java.exe
-
-if exist "%JAVA_EXE%" goto init
-
-echo.
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:init
-@rem Get command-line arguments, handling Windowz variants
-
-if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
-
-:win9xME_args
-@rem Slurp the command line arguments.
-set CMD_LINE_ARGS=
-set _SKIP=2
-
-:win9xME_args_slurp
-if "x%~1" == "x" goto execute
-
-set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
-
-:execute
-@rem Setup the command line
-
-set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
-
-@rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
-
-:end
-@rem End local scope for the variables with windows NT shell
-if "%ERRORLEVEL%"=="0" goto mainEnd
-
-:fail
-rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
-rem the _cmd.exe /c_ return code!
-if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
-exit /b 1
-
-:mainEnd
-if "%OS%"=="Windows_NT" endlocal
-
-:omega
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index e6a26446..9bdae2d6 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="40"
-      android:versionName="4.6.1">
+      android:versionCode="43"
+      android:versionName="4.8.0">
     <uses-sdk android:minSdkVersion="9"
               android:targetSdkVersion="23"/>
 
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index 8a9b4dab..a5b268ba 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -9,7 +9,7 @@ apply plugin: 'com.android.application'
 
 group = 'com.mopub'
 description = '''MoPub Sample App'''
-version = '4.6.1'
+version = '4.8.0'
 
 android {
     compileSdkVersion 23
@@ -17,7 +17,7 @@ android {
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 40
+        versionCode 43
         versionName version
         minSdkVersion 9
         targetSdkVersion 23
diff --git a/mopub-sample/res/layout/mrect_detail_fragment.xml b/mopub-sample/res/layout/mrect_detail_fragment.xml
deleted file mode 100644
index 15167ce5..00000000
--- a/mopub-sample/res/layout/mrect_detail_fragment.xml
+++ /dev/null
@@ -1,61 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent">
-
-    <TextView
-        android:id="@+id/description"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:paddingLeft="8dp"
-        android:paddingRight="8dp"
-        android:paddingTop="8dp"
-        android:singleLine="true"
-        android:textColor="?android:attr/textColorPrimary"
-        android:textSize="16sp"
-        android:textStyle="bold" />
-
-    <TextView
-        android:id="@+id/ad_unit_id"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:paddingLeft="8dp"
-        android:paddingRight="8dp"
-        android:singleLine="true"
-        android:textColor="?android:attr/textColorSecondary"
-        android:textSize="14sp"
-        android:textStyle="normal" />
-
-    <LinearLayout
-        android:orientation="horizontal"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content">
-
-        <EditText
-            android:id="@+id/keywords_field"
-            android:hint="@string/keywords"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:layout_weight="3"
-            android:inputType="text|textFilter|textShortMessage"
-            android:imeOptions="actionDone"
-            android:singleLine="true" />
-
-        <Button
-            android:id="@+id/load_button"
-            android:text="@string/load_ad"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:layout_weight="1" />
-    </LinearLayout>
-
-    <com.mopub.mobileads.MoPubView
-        android:id="@+id/mrect_mopubview"
-        android:layout_width="300dp"
-        android:layout_height="250dp"
-        android:layout_gravity="center_horizontal"
-        android:paddingTop="10dp">
-    </com.mopub.mobileads.MoPubView>
-</LinearLayout>
diff --git a/mopub-sample/res/values/dimens.xml b/mopub-sample/res/values/dimens.xml
index 02259949..75ede747 100644
--- a/mopub-sample/res/values/dimens.xml
+++ b/mopub-sample/res/values/dimens.xml
@@ -5,4 +5,12 @@
     <dimen name="detail_text_size">10sp</dimen>
     <dimen name="title_size">24sp</dimen>
     <dimen name="native_main_image_height">200dp</dimen>
+    <dimen name="banner_width">320dp</dimen>
+    <dimen name="banner_height">50dp</dimen>
+    <dimen name="mrect_width">300dp</dimen>
+    <dimen name="mrect_height">250dp</dimen>
+    <dimen name="leaderboard_width">728dp</dimen>
+    <dimen name="leaderboard_height">90dp</dimen>
+    <dimen name="skyscraper_width">160dp</dimen>
+    <dimen name="skyscraper_height">600dp</dimen>
 </resources>
\ No newline at end of file
diff --git a/mopub-sample/res/values/strings.xml b/mopub-sample/res/values/strings.xml
index bb9d7d0d..a1deb782 100644
--- a/mopub-sample/res/values/strings.xml
+++ b/mopub-sample/res/values/strings.xml
@@ -20,7 +20,9 @@
     <string name="add_ad_unit_button">Add an Ad Unit</string>
     <string name="ad_unit_id_banner">b195f8dd8ded45fe847ad89ed1d016da</string>
     <string name="ad_unit_id_mrect">252412d5e9364a05ab77d9396346d73d</string>
+    <string name="ad_unit_id_leaderboard">a8919cca19784497872ae69d48f678e1</string>
     <string name="ad_unit_id_interstitial">24534e1901884e398f1253216226017e</string>
+    <string name="ad_unit_id_rewarded_video">920b6145fb1546cf8b5cf2ac34638bb7</string>
     <string name="ad_unit_id_native">11a17b188668469fb0412708c3d16813</string>
     <string name="swipe_text"><![CDATA[< Swipe Left & Right >]]></string>
 </resources>
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
new file mode 100644
index 00000000..f4ee63c9
--- /dev/null
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
@@ -0,0 +1,114 @@
+package com.mopub.simpleadsdemo;
+
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.LinearLayout;
+
+import com.mopub.mobileads.MoPubErrorCode;
+import com.mopub.mobileads.MoPubView;
+
+import static com.mopub.mobileads.MoPubView.BannerAdListener;
+import static com.mopub.simpleadsdemo.Utils.hideSoftKeyboard;
+import static com.mopub.simpleadsdemo.Utils.logToast;
+
+/**
+ * A base class for creating banner style ads with various height and width dimensions.
+ * <p>
+ * A subclass simply needs to specify the height and width of the ad in pixels, and this class will
+ * inflate a layout containing a programmatically rescaled {@link MoPubView} that will be used to
+ * display the ad.
+ */
+public abstract class AbstractBannerDetailFragment extends Fragment implements BannerAdListener {
+    private MoPubView mMoPubView;
+    private MoPubSampleAdUnit mMoPubSampleAdUnit;
+
+    public abstract int getWidth();
+
+    public abstract int getHeight();
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        super.onCreateView(inflater, container, savedInstanceState);
+        final View view = inflater.inflate(R.layout.banner_detail_fragment, container, false);
+        final DetailFragmentViewHolder views = DetailFragmentViewHolder.fromView(view);
+
+        mMoPubSampleAdUnit = MoPubSampleAdUnit.fromBundle(getArguments());
+        mMoPubView = (MoPubView) view.findViewById(R.id.banner_mopubview);
+        LinearLayout.LayoutParams layoutParams =
+                (LinearLayout.LayoutParams) mMoPubView.getLayoutParams();
+        layoutParams.width = getWidth();
+        layoutParams.height = getHeight();
+        mMoPubView.setLayoutParams(layoutParams);
+
+        hideSoftKeyboard(views.mKeywordsField);
+
+        final String adUnitId = mMoPubSampleAdUnit.getAdUnitId();
+        views.mDescriptionView.setText(mMoPubSampleAdUnit.getDescription());
+        views.mAdUnitIdView.setText(adUnitId);
+        views.mLoadButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                final String keywords = views.mKeywordsField.getText().toString();
+                loadMoPubView(adUnitId, keywords);
+            }
+        });
+        mMoPubView.setBannerAdListener(this);
+        loadMoPubView(adUnitId, null);
+
+        return view;
+    }
+
+    @Override
+    public void onDestroyView() {
+        super.onDestroyView();
+
+        if (mMoPubView != null) {
+            mMoPubView.destroy();
+            mMoPubView = null;
+        }
+    }
+
+    private void loadMoPubView(final String adUnitId, final String keywords) {
+        mMoPubView.setAdUnitId(adUnitId);
+        mMoPubView.setKeywords(keywords);
+        mMoPubView.loadAd();
+    }
+
+    private String getName() {
+        if (mMoPubSampleAdUnit == null) {
+            return MoPubSampleAdUnit.AdType.BANNER.getName();
+        }
+        return mMoPubSampleAdUnit.getHeaderName();
+    }
+
+    // BannerAdListener
+    @Override
+    public void onBannerLoaded(MoPubView banner) {
+        logToast(getActivity(), getName() + " loaded.");
+    }
+
+    @Override
+    public void onBannerFailed(MoPubView banner, MoPubErrorCode errorCode) {
+        final String errorMessage = (errorCode != null) ? errorCode.toString() : "";
+        logToast(getActivity(), getName() + " failed to load: " + errorMessage);
+    }
+
+    @Override
+    public void onBannerClicked(MoPubView banner) {
+        logToast(getActivity(), getName() + " clicked.");
+    }
+
+    @Override
+    public void onBannerExpanded(MoPubView banner) {
+        logToast(getActivity(), getName() + " expanded.");
+    }
+
+    @Override
+    public void onBannerCollapsed(MoPubView banner) {
+        logToast(getActivity(), getName() + " collapsed.");
+    }
+}
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
index d6063c29..e95f9bce 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
@@ -8,6 +8,7 @@
 import com.mopub.common.logging.MoPubLog;
 
 import java.util.ArrayList;
+import java.util.HashSet;
 import java.util.List;
 
 import static com.mopub.simpleadsdemo.MoPubSQLiteHelper.COLUMN_AD_TYPE;
@@ -17,8 +18,17 @@
 import static com.mopub.simpleadsdemo.MoPubSQLiteHelper.COLUMN_USER_GENERATED;
 import static com.mopub.simpleadsdemo.MoPubSQLiteHelper.TABLE_AD_CONFIGURATIONS;
 import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.BANNER;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.CUSTOM_NATIVE;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.INTERSTITIAL;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.LEADERBOARD;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.LIST_VIEW;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.MRECT;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.RECYCLER_VIEW;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.REWARDED_VIDEO;
 
 class AdUnitDataSource {
+    private Context mContext;
     private MoPubSQLiteHelper mDatabaseHelper;
     private String[] mAllColumns = {
             COLUMN_ID,
@@ -29,23 +39,41 @@
     };
 
     AdUnitDataSource(final Context context) {
+        mContext = context.getApplicationContext();
         mDatabaseHelper = new MoPubSQLiteHelper(context);
+        populateDefaultSampleAdUnits();
+    }
+
+    MoPubSampleAdUnit createDefaultSampleAdUnit(final MoPubSampleAdUnit sampleAdUnit) {
+        return createSampleAdUnit(sampleAdUnit, false);
     }
 
     MoPubSampleAdUnit createSampleAdUnit(final MoPubSampleAdUnit sampleAdUnit) {
+        return createSampleAdUnit(sampleAdUnit, true);
+    }
+
+    private MoPubSampleAdUnit createSampleAdUnit(final MoPubSampleAdUnit sampleAdUnit,
+                                                 final boolean isUserGenerated) {
         final ContentValues values = new ContentValues();
+        final int userGenerated = isUserGenerated ? 1 : 0;
         values.put(COLUMN_AD_UNIT_ID, sampleAdUnit.getAdUnitId());
         values.put(COLUMN_DESCRIPTION, sampleAdUnit.getDescription());
-        values.put(COLUMN_USER_GENERATED, 1);
+        values.put(COLUMN_USER_GENERATED, userGenerated);
         values.put(COLUMN_AD_TYPE, sampleAdUnit.getFragmentClassName());
+
         final SQLiteDatabase database = mDatabaseHelper.getWritableDatabase();
         final long insertId = database.insert(TABLE_AD_CONFIGURATIONS, null, values);
         final Cursor cursor = database.query(TABLE_AD_CONFIGURATIONS, mAllColumns,
                 COLUMN_ID + " = " + insertId, null, null, null, null);
         cursor.moveToFirst();
+
         final MoPubSampleAdUnit newAdConfiguration = cursorToAdConfiguration(cursor);
         cursor.close();
         database.close();
+
+        if (newAdConfiguration != null) {
+            MoPubLog.d("Ad configuration added with id: " + newAdConfiguration.getId());
+        }
         return newAdConfiguration;
     }
 
@@ -58,8 +86,7 @@ void deleteSampleAdUnit(final MoPubSampleAdUnit adConfiguration) {
     }
 
     List<MoPubSampleAdUnit> getAllAdUnits() {
-        final List<MoPubSampleAdUnit> adConfigurations =
-                new ArrayList<MoPubSampleAdUnit>();
+        final List<MoPubSampleAdUnit> adConfigurations = new ArrayList<>();
         SQLiteDatabase database = mDatabaseHelper.getReadableDatabase();
         final Cursor cursor = database.query(TABLE_AD_CONFIGURATIONS,
                 mAllColumns, null, null, null, null, null);
@@ -76,6 +103,65 @@ void deleteSampleAdUnit(final MoPubSampleAdUnit adConfiguration) {
         return adConfigurations;
     }
 
+    List<MoPubSampleAdUnit> getDefaultAdUnits() {
+        final List<MoPubSampleAdUnit> adUnitList = new ArrayList<>();
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_banner), BANNER)
+                        .description("MoPub Banner Sample")
+                        .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_mrect), MRECT)
+                        .description("MoPub Mrect Sample")
+                        .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_leaderboard), LEADERBOARD)
+                        .description("MoPub Leaderboard Sample")
+                        .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_interstitial), INTERSTITIAL)
+                        .description("MoPub Interstitial Sample")
+                        .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_rewarded_video),
+                        REWARDED_VIDEO)
+                        .description("MoPub Rewarded Video Sample")
+                        .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_native), LIST_VIEW)
+                        .description("MoPub Ad Placer Sample")
+                        .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_native), RECYCLER_VIEW)
+                        .description("MoPub Recycler View Sample")
+                        .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_native), CUSTOM_NATIVE)
+                        .description("MoPub View Pager Sample")
+                        .build());
+        return adUnitList;
+    }
+
+    private void populateDefaultSampleAdUnits() {
+        final HashSet<MoPubSampleAdUnit> allAdUnits = new HashSet<>();
+        for (final MoPubSampleAdUnit adUnit : getAllAdUnits()) {
+            allAdUnits.add(adUnit);
+        }
+
+        for (final MoPubSampleAdUnit defaultAdUnit : getDefaultAdUnits()) {
+            if (!allAdUnits.contains(defaultAdUnit)) {
+                createDefaultSampleAdUnit(defaultAdUnit);
+            }
+        }
+    }
+
     private MoPubSampleAdUnit cursorToAdConfiguration(final Cursor cursor) {
         final long id = cursor.getLong(0);
         final String adUnitId = cursor.getString(1);
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannerDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannerDetailFragment.java
index a02dd1a1..f083f921 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannerDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannerDetailFragment.java
@@ -1,87 +1,14 @@
 package com.mopub.simpleadsdemo;
 
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.mopub.mobileads.MoPubErrorCode;
-import com.mopub.mobileads.MoPubView;
-
-import static com.mopub.mobileads.MoPubView.BannerAdListener;
-import static com.mopub.simpleadsdemo.Utils.hideSoftKeyboard;
-import static com.mopub.simpleadsdemo.Utils.logToast;
-
-public class BannerDetailFragment extends Fragment implements BannerAdListener {
-    private MoPubView mMoPubView;
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        super.onCreateView(inflater, container, savedInstanceState);
-        final MoPubSampleAdUnit adConfiguration =
-                MoPubSampleAdUnit.fromBundle(getArguments());
-        final View view = inflater.inflate(R.layout.banner_detail_fragment, container, false);
-        final DetailFragmentViewHolder views = DetailFragmentViewHolder.fromView(view);
-        mMoPubView = (MoPubView) view.findViewById(R.id.banner_mopubview);
-        hideSoftKeyboard(views.mKeywordsField);
-
-        final String adUnitId = adConfiguration.getAdUnitId();
-        views.mDescriptionView.setText(adConfiguration.getDescription());
-        views.mAdUnitIdView.setText(adUnitId);
-        views.mLoadButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                final String keywords = views.mKeywordsField.getText().toString();
-                loadMoPubView(adUnitId, keywords);
-            }
-        });
-        mMoPubView.setBannerAdListener(this);
-        loadMoPubView(adUnitId, null);
-
-        return view;
-    }
-
-    @Override
-    public void onDestroyView() {
-        super.onDestroyView();
-
-        if (mMoPubView != null) {
-            mMoPubView.destroy();
-            mMoPubView = null;
-        }
-    }
-
-    private void loadMoPubView(final String adUnitId, final String keywords) {
-        mMoPubView.setAdUnitId(adUnitId);
-        mMoPubView.setKeywords(keywords);
-        mMoPubView.loadAd();
-    }
-
-    // BannerAdListener
-    @Override
-    public void onBannerLoaded(MoPubView banner) {
-        logToast(getActivity(), "Banner loaded.");
-    }
-
-    @Override
-    public void onBannerFailed(MoPubView banner, MoPubErrorCode errorCode) {
-        final String errorMessage = (errorCode != null) ? errorCode.toString() : "";
-        logToast(getActivity(), "Banner failed to load: " + errorMessage);
-    }
-
-    @Override
-    public void onBannerClicked(MoPubView banner) {
-        logToast(getActivity(), "Banner clicked.");
-    }
+public class BannerDetailFragment extends AbstractBannerDetailFragment {
 
     @Override
-    public void onBannerExpanded(MoPubView banner) {
-        logToast(getActivity(), "Banner expanded.");
+    public int getWidth() {
+        return (int) getResources().getDimension(R.dimen.banner_width);
     }
 
     @Override
-    public void onBannerCollapsed(MoPubView banner) {
-        logToast(getActivity(), "Banner collapsed.");
+    public int getHeight() {
+        return (int) getResources().getDimension(R.dimen.banner_height);
     }
 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
index 10a1cd82..ff1337ac 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
@@ -33,6 +33,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
         views.mLoadButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
+                mShowButton.setEnabled(false);
                 if (mMoPubInterstitial == null) {
                     mMoPubInterstitial = new MoPubInterstitial(getActivity(), adUnitId);
                     mMoPubInterstitial.setInterstitialAdListener(InterstitialDetailFragment.this);
@@ -40,7 +41,6 @@ public void onClick(View view) {
                 final String keywords = views.mKeywordsField.getText().toString();
                 mMoPubInterstitial.setKeywords(keywords);
                 mMoPubInterstitial.load();
-                mShowButton.setEnabled(false);
             }
         });
         mShowButton = (Button) view.findViewById(R.id.interstitial_show_button);
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LeaderboardDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LeaderboardDetailFragment.java
new file mode 100644
index 00000000..c0c000f0
--- /dev/null
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LeaderboardDetailFragment.java
@@ -0,0 +1,14 @@
+package com.mopub.simpleadsdemo;
+
+public class LeaderboardDetailFragment extends AbstractBannerDetailFragment {
+
+    @Override
+    public int getWidth() {
+        return (int) getResources().getDimension(R.dimen.leaderboard_width);
+    }
+
+    @Override
+    public int getHeight() {
+        return (int) getResources().getDimension(R.dimen.leaderboard_height);
+    }
+}
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java
index af774f91..3f3efa4a 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java
@@ -1,21 +1,10 @@
 package com.mopub.simpleadsdemo;
 
-import android.content.ContentValues;
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
 
-import java.util.ArrayList;
-import java.util.List;
-
-import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.BANNER;
-import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.CUSTOM_NATIVE;
-import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.INTERSTITIAL;
-import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.LIST_VIEW;
-import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.RECYCLER_VIEW;
-import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.MRECT;
-
 class MoPubSQLiteHelper extends SQLiteOpenHelper {
     public static final String TABLE_AD_CONFIGURATIONS = "adConfigurations";
     public static final String COLUMN_ID = "_id";
@@ -36,65 +25,13 @@
             + COLUMN_AD_TYPE + " text not null"
             + ");";
 
-    private final Context mContext;
-
     public MoPubSQLiteHelper(final Context context) {
         super(context, DATABASE_NAME, null, DATABASE_VERSION);
-        mContext = context.getApplicationContext();
     }
 
     @Override
     public void onCreate(SQLiteDatabase sqLiteDatabase) {
-        // Built-in sample ad units.
-        final List<MoPubSampleAdUnit> adUnitList = new ArrayList<MoPubSampleAdUnit>();
-        adUnitList.add(
-                new MoPubSampleAdUnit
-                        .Builder(mContext.getString(R.string.ad_unit_id_banner), BANNER)
-                        .description("MoPub Banner Sample")
-                        .build());
-
-        adUnitList.add(
-                new MoPubSampleAdUnit
-                        .Builder(mContext.getString(R.string.ad_unit_id_mrect), MRECT)
-                        .description("MoPub Mrect Sample")
-                        .build());
-
-        adUnitList.add(
-                new MoPubSampleAdUnit
-                        .Builder(mContext.getString(R.string.ad_unit_id_interstitial), INTERSTITIAL)
-                        .description("MoPub Interstitial Sample")
-                        .build());
-
-        adUnitList.add(
-                new MoPubSampleAdUnit
-                        .Builder(mContext.getString(R.string.ad_unit_id_native), LIST_VIEW)
-                        .description("MoPub Ad Placer Sample")
-                        .build());
-        adUnitList.add(
-                new MoPubSampleAdUnit
-                        .Builder(mContext.getString(R.string.ad_unit_id_native), RECYCLER_VIEW)
-                        .description("MoPub Recycler View Sample")
-                        .build());
-        adUnitList.add(
-                new MoPubSampleAdUnit
-                        .Builder(mContext.getString(R.string.ad_unit_id_native), CUSTOM_NATIVE)
-                        .description("MoPub View Pager Sample")
-                        .build());
         sqLiteDatabase.execSQL(DATABASE_CREATE);
-        sqLiteDatabase.beginTransaction();
-
-        // Populate the MoPub built-in samples.
-        for (final MoPubSampleAdUnit adUnit : adUnitList) {
-            final ContentValues values = new ContentValues();
-            values.put(COLUMN_AD_UNIT_ID, adUnit.getAdUnitId());
-            values.put(COLUMN_DESCRIPTION, adUnit.getDescription());
-            values.put(COLUMN_USER_GENERATED, 0);
-            values.put(COLUMN_AD_TYPE, adUnit.getFragmentClassName());
-
-            sqLiteDatabase.insert(TABLE_AD_CONFIGURATIONS, null, values);
-        }
-        sqLiteDatabase.setTransactionSuccessful();
-        sqLiteDatabase.endTransaction();
     }
 
     @Override
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
index 331f63e4..f6573175 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
@@ -18,6 +18,8 @@
     enum AdType {
         BANNER("Banner", BannerDetailFragment.class),
         MRECT("Mrect", MrectDetailFragment.class),
+        LEADERBOARD("Leaderboard", LeaderboardDetailFragment.class),
+        SKYSCRAPER("Skyscraper", SkyscraperDetailFragment.class),
         INTERSTITIAL("Interstitial", InterstitialDetailFragment.class),
         REWARDED_VIDEO("Rewarded Video", RewardedVideoDetailFragment.class),
         LIST_VIEW("Native List View", NativeListViewFragment.class),
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MrectDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MrectDetailFragment.java
index 2ae93318..2f15a7fa 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MrectDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MrectDetailFragment.java
@@ -1,87 +1,14 @@
 package com.mopub.simpleadsdemo;
 
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.mopub.mobileads.MoPubErrorCode;
-import com.mopub.mobileads.MoPubView;
-
-import static com.mopub.mobileads.MoPubView.BannerAdListener;
-import static com.mopub.simpleadsdemo.Utils.hideSoftKeyboard;
-import static com.mopub.simpleadsdemo.Utils.logToast;
-
-public class MrectDetailFragment extends Fragment implements BannerAdListener {
-    private MoPubView mMoPubView;
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        super.onCreateView(inflater, container, savedInstanceState);
-
-        final MoPubSampleAdUnit adConfiguration =
-                MoPubSampleAdUnit.fromBundle(getArguments());
-        final View view = inflater.inflate(R.layout.mrect_detail_fragment, container, false);
-        final DetailFragmentViewHolder views = DetailFragmentViewHolder.fromView(view);
-        hideSoftKeyboard(views.mKeywordsField);
-        mMoPubView = (MoPubView) view.findViewById(R.id.mrect_mopubview);
-        final String adUnitId = adConfiguration.getAdUnitId();
-        views.mDescriptionView.setText(adConfiguration.getDescription());
-        views.mAdUnitIdView.setText(adUnitId);
-        views.mLoadButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                final String keywords = views.mKeywordsField.getText().toString();
-                loadMoPubView(adUnitId, keywords);
-            }
-        });
-        mMoPubView.setBannerAdListener(this);
-        loadMoPubView(adUnitId, null);
-
-        return view;
-    }
-
-    @Override
-    public void onDestroyView() {
-        super.onDestroyView();
-
-        if (mMoPubView != null) {
-            mMoPubView.destroy();
-            mMoPubView = null;
-        }
-    }
-
-    private void loadMoPubView(final String adUnitId, final String keywords) {
-        mMoPubView.setAdUnitId(adUnitId);
-        mMoPubView.setKeywords(keywords);
-        mMoPubView.loadAd();
-    }
-
-    // BannerAdListener
-    @Override
-    public void onBannerLoaded(MoPubView banner) {
-        logToast(getActivity(), "Mrect loaded.");
-    }
-
-    @Override
-    public void onBannerFailed(MoPubView banner, MoPubErrorCode errorCode) {
-        final String errorMessage = (errorCode != null) ? errorCode.toString() : "";
-        logToast(getActivity(), "Mrect failed to load: " + errorMessage);
-    }
-
-    @Override
-    public void onBannerClicked(MoPubView banner) {
-        logToast(getActivity(), "Mrect clicked.");
-    }
+public class MrectDetailFragment extends AbstractBannerDetailFragment {
 
     @Override
-    public void onBannerExpanded(MoPubView banner) {
-        logToast(getActivity(), "Mrect expanded.");
+    public int getWidth() {
+        return (int) getResources().getDimension(R.dimen.mrect_width);
     }
 
     @Override
-    public void onBannerCollapsed(MoPubView banner) {
-        logToast(getActivity(), "Mrect collapsed.");
+    public int getHeight() {
+        return (int) getResources().getDimension(R.dimen.mrect_height);
     }
 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
index 9aacc186..19e7825b 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
@@ -53,7 +53,8 @@ public void onClick(View view) {
                     return;
                 }
                 MoPub.loadRewardedVideo(mAdUnitId,
-                        new RequestParameters(views.mKeywordsField.getText().toString()));
+                        new RequestParameters(views.mKeywordsField.getText().toString(), null,
+                                "sample_app_customer_id"));
                 if (mShowButton != null) {
                     mShowButton.setEnabled(false);
                 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SkyscraperDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SkyscraperDetailFragment.java
new file mode 100644
index 00000000..0a715bbe
--- /dev/null
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SkyscraperDetailFragment.java
@@ -0,0 +1,14 @@
+package com.mopub.simpleadsdemo;
+
+public class SkyscraperDetailFragment extends AbstractBannerDetailFragment {
+
+    @Override
+    public int getWidth() {
+        return (int) getResources().getDimension(R.dimen.skyscraper_width);
+    }
+
+    @Override
+    public int getHeight() {
+        return (int) getResources().getDimension(R.dimen.skyscraper_height);
+    }
+}
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index 90b39790..4b23d6cc 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -7,7 +7,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.1'
+        classpath 'com.android.tools.build:gradle:2.1.2'
         classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
     }
 }
@@ -32,12 +32,12 @@ apply plugin: 'com.android.library'
 apply plugin: 'com.github.dcendents.android-maven'
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '2.5'
+    gradleVersion = '2.10'
 }
 
 group = 'com.mopub'
 description = '''MoPub Android SDK'''
-version = '4.6.1'
+version = '4.8.0'
 
 android {
     compileSdkVersion 23
@@ -46,7 +46,7 @@ android {
     useLibrary 'org.apache.http.legacy' //ENABLE IF compileSdkVersion > 23
 
     defaultConfig {
-        versionCode 40
+        versionCode 43
         versionName version
         minSdkVersion 16
         targetSdkVersion 22
@@ -100,19 +100,19 @@ android {
     // difference between the two methods, you can use the one you prefer.
 }
 
-
+//https://developer.android.com/topic/libraries/support-library/revisions.html
 dependencies {
     compile fileTree(include: ['*.jar'], dir: 'libs')
     compile project(':base')
     compile project(':unity-ads')
-    compile 'com.android.support:support-v4:23.0.3'
-    compile 'com.android.support:support-annotations:23.0.3'
-    compile 'com.android.support:recyclerview-v7:23.0.3'
-    compile 'com.facebook.android:audience-network-sdk:4.11.0'
-    compile 'com.google.android.gms:play-services-ads:9.0.1'
+    compile 'com.android.support:support-v4:23.3.0'
+    compile 'com.android.support:support-annotations:23.3.0'
+    compile 'com.android.support:recyclerview-v7:23.3.0'
+    //compile 'com.facebook.android:audience-network-sdk:4.11.0'
+    compile 'com.google.android.gms:play-services-ads:9.0.2'
     compile 'com.mopub.volley:mopub-volley:1.1.0'
     compile 'com.google.android.exoplayer:exoplayer:r1.5.7'
-    testCompile 'junit:junit:4.10'
+    testCompile 'junit:junit:4.12'
     testCompile 'org.robolectric:robolectric:3.0'
     testCompile 'org.robolectric:shadows-support-v4:3.0'
     testCompile 'org.robolectric:shadows-httpclient:3.0'
diff --git a/mopub-sdk/etc/mraid.js b/mopub-sdk/etc/mraid.js
index 7ce13b28..8e5bb5b7 100644
--- a/mopub-sdk/etc/mraid.js
+++ b/mopub-sdk/etc/mraid.js
@@ -28,7 +28,6 @@
     lastSizeChangeProperties: null
   };
 
-
   bridge.fireChangeEvent = function(properties) {
     for (var p in properties) {
       if (properties.hasOwnProperty(p)) {
@@ -278,6 +277,12 @@
 
   var placementType = PLACEMENT_TYPES.UNKNOWN;
 
+  var hostSDKVersion = {
+    'major': 0,
+    'minor': 0,
+    'patch': 0
+  };
+
   //////////////////////////////////////////////////////////////////////////////////////////////////
 
   var EventListeners = function(event) {
@@ -398,7 +403,23 @@
 
     supports: function(val) {
       broadcastEvent(EVENTS.INFO, 'Set supports to ' + stringify(val));
-        supportProperties = val;
+      supportProperties = val;
+    },
+
+    hostSDKVersion: function(val) {
+      // val is expected to be formatted like 'X.Y.Z[-+]identifier'.
+      var versions = val.split('.').map(function(version) {
+        return parseInt(version, 10);
+      }).filter(function(version) {
+        return version >= 0;
+      });
+
+      if (versions.length >= 3) {
+        hostSDKVersion['major'] = parseInt(versions[0], 10);
+        hostSDKVersion['minor'] = parseInt(versions[1], 10);
+        hostSDKVersion['patch'] = parseInt(versions[2], 10);
+        broadcastEvent(EVENTS.INFO, 'Set hostSDKVersion to ' + stringify(hostSDKVersion));
+      }
     }
   };
 
@@ -714,6 +735,14 @@
     }
   };
 
+  // Determining SDK version ///////////////////////////////////////////////////////////////////////
+
+  mraid.getHostSDKVersion = function() {
+    return hostSDKVersion;
+  }
+
+  // Calendar helpers //////////////////////////////////////////////////////////////////////////////
+
   var CalendarEventParser = {
     initialize: function(parameters) {
       this.parameters = parameters;
diff --git a/mopub-sdk/gradle/wrapper/gradle-wrapper.jar b/mopub-sdk/gradle/wrapper/gradle-wrapper.jar
index 30d399d8..13372aef 100644
Binary files a/mopub-sdk/gradle/wrapper/gradle-wrapper.jar and b/mopub-sdk/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/mopub-sdk/gradle/wrapper/gradle-wrapper.properties b/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
index 913bb985..6faa4eab 100644
--- a/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
+++ b/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Fri Jul 24 16:59:31 PDT 2015
+#Mon Jun 20 17:19:29 PDT 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
diff --git a/mopub-sdk/gradlew b/mopub-sdk/gradlew
index 91a7e269..9d82f789 100755
--- a/mopub-sdk/gradlew
+++ b/mopub-sdk/gradlew
@@ -42,11 +42,6 @@ case "`uname`" in
     ;;
 esac
 
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
 # Attempt to set APP_HOME
 # Resolve links: $0 may be a link
 PRG="$0"
@@ -61,9 +56,9 @@ while [ -h "$PRG" ] ; do
     fi
 done
 SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
+cd "`dirname \"$PRG\"`/" >/dev/null
 APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
+cd "$SAVED" >/dev/null
 
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
@@ -114,6 +109,7 @@ fi
 if $cygwin ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
     ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
diff --git a/mopub-sdk/gradlew.bat b/mopub-sdk/gradlew.bat
index 8a0b282a..aec99730 100644
--- a/mopub-sdk/gradlew.bat
+++ b/mopub-sdk/gradlew.bat
@@ -1,90 +1,90 @@
-@if "%DEBUG%" == "" @echo off
-@rem ##########################################################################
-@rem
-@rem  Gradle startup script for Windows
-@rem
-@rem ##########################################################################
-
-@rem Set local scope for the variables with windows NT shell
-if "%OS%"=="Windows_NT" setlocal
-
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
-set DIRNAME=%~dp0
-if "%DIRNAME%" == "" set DIRNAME=.
-set APP_BASE_NAME=%~n0
-set APP_HOME=%DIRNAME%
-
-@rem Find java.exe
-if defined JAVA_HOME goto findJavaFromJavaHome
-
-set JAVA_EXE=java.exe
-%JAVA_EXE% -version >NUL 2>&1
-if "%ERRORLEVEL%" == "0" goto init
-
-echo.
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:findJavaFromJavaHome
-set JAVA_HOME=%JAVA_HOME:"=%
-set JAVA_EXE=%JAVA_HOME%/bin/java.exe
-
-if exist "%JAVA_EXE%" goto init
-
-echo.
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:init
-@rem Get command-line arguments, handling Windowz variants
-
-if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
-
-:win9xME_args
-@rem Slurp the command line arguments.
-set CMD_LINE_ARGS=
-set _SKIP=2
-
-:win9xME_args_slurp
-if "x%~1" == "x" goto execute
-
-set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
-
-:execute
-@rem Setup the command line
-
-set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
-
-@rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
-
-:end
-@rem End local scope for the variables with windows NT shell
-if "%ERRORLEVEL%"=="0" goto mainEnd
-
-:fail
-rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
-rem the _cmd.exe /c_ return code!
-if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
-exit /b 1
-
-:mainEnd
-if "%OS%"=="Windows_NT" endlocal
-
-:omega
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/mopub-sdk/libs/amazon-ads-5.6.20.jar b/mopub-sdk/libs/amazon-ads-5.6.20.jar
deleted file mode 100644
index b9ac99d0..00000000
Binary files a/mopub-sdk/libs/amazon-ads-5.6.20.jar and /dev/null differ
diff --git a/mopub-sdk/libs/applovin-sdk-6.3.2.jar b/mopub-sdk/libs/applovin-sdk-6.3.2.jar
new file mode 100644
index 00000000..be9711a2
Binary files /dev/null and b/mopub-sdk/libs/applovin-sdk-6.3.2.jar differ
diff --git a/mopub-sdk/libs/chartboost.jar b/mopub-sdk/libs/chartboost.jar
new file mode 100644
index 00000000..e54735d3
Binary files /dev/null and b/mopub-sdk/libs/chartboost.jar differ
diff --git a/mopub-sdk/proguard.txt b/mopub-sdk/proguard.txt
index d6adfd02..53ea4672 100644
--- a/mopub-sdk/proguard.txt
+++ b/mopub-sdk/proguard.txt
@@ -41,11 +41,11 @@
 -dontwarn com.google.android.exoplayer.**
 
 #Log
--assumenosideeffects class android.util.Log {
-    public static boolean isLoggable(java.lang.String, int);
-    public static int v(...);
-    public static int i(...);
-    public static int w(...);
-    public static int d(...);
-    public static int e(...);
-}
+#-assumenosideeffects class android.util.Log {
+#    public static boolean isLoggable(java.lang.String, int);
+#    public static int v(...);
+#    public static int i(...);
+#    public static int w(...);
+#    public static int d(...);
+#    public static int e(...);
+#}
diff --git a/mopub-sdk/src/main/java/com/mopub/ads/Ads.java b/mopub-sdk/src/main/java/com/mopub/ads/Ads.java
index a8a4413f..43b0fdaf 100644
--- a/mopub-sdk/src/main/java/com/mopub/ads/Ads.java
+++ b/mopub-sdk/src/main/java/com/mopub/ads/Ads.java
@@ -10,6 +10,7 @@
 import com.mojang.base.events.GuideGameEvent;
 import com.mojang.base.events.MinecraftGameEvent;
 import com.mojang.base.events.OfflineEvent;
+import com.mojang.base.json.Data;
 
 import org.greenrobot.eventbus.EventBus;
 import org.greenrobot.eventbus.Subscribe;
@@ -21,15 +22,11 @@
  * Controlls how ads are showed
  */
 public class Ads {
-
     private final String TAG = this.getClass().getName();
-    private final InternetObserver internetObserver;
+
     private Interstitial interstitial;
     private int numOfPlayers;
-    private boolean firstGamePlayStart;
     private int timesBlockChanged;
-    private long[] blockPlaceTimes = new long[5];
-    boolean isBuilding;
     private SharedPreferences sharedPreferences;
     private Calendar calendar;
     private static final String FIRST_RUN_DAY_KEY = "FirstRunDay";
@@ -37,21 +34,31 @@
     private static final int NUM_FREE_DAYS = 2;
     final int measureUnit = Calendar.DAY_OF_YEAR;
     private boolean fingerAdShowed;
+    private static Ads instance;
 
 
-    public Ads(Interstitial interstitial, InternetObserver internetObserver, SharedPreferences sharedPreferences, Calendar calendar, boolean freePeriodAllowed) {
-        this.internetObserver = internetObserver;
+    public Ads(Interstitial interstitial, SharedPreferences sharedPreferences, Calendar calendar) {
         this.interstitial = interstitial;
         this.numOfPlayers = 1;
-        this.firstGamePlayStart = true;
         this.sharedPreferences = sharedPreferences;
         this.calendar = calendar;
+        if(Ads.instance == null) {
+            Ads.instance = this;
+        }
 
-        this.interstitial.setFreePeriod(isInFreePeriod(freePeriodAllowed));
+        this.interstitial.setFreePeriod(isInFreePeriod( Data.Ads.Interstitial.freePeriodAllowed));
 
         EventBus.getDefault().register(this);
     }
 
+    public static Ads getInstance() {
+        return instance;
+    }
+
+    public Interstitial getInterstitial(){
+        return interstitial;
+    }
+
     @Subscribe(threadMode = ThreadMode.MAIN)
     public void onAppEvent(AppEvent appEvent) {
         switch (appEvent.lifeCycle) {
@@ -78,25 +85,35 @@ public void onGameEvent(MinecraftGameEvent gameEvent) {
                 if (numOfPlayers > 1) numOfPlayers--;
                 if (numOfPlayers == 1) interstitial.lock.unlockMultiplayer();
                 break;
+            case PlayerJoinedMultiplayer:
+                interstitial.lock.lockMultiplayer();
+                break;
             case GamePlayStart:
                 interstitial.lock.gameUnlock();
-                interstitial.showFastDelayed(1800);
+                interstitial.showFastDelayed(2000);
                 interstitial.schedulePeriodicShows();
                 break;
             case LeaveLevel:
-                interstitial.showDelayed(1200, new Runnable() {
+                interstitial.dontBackPress = true;
+                interstitial.showDelayed(2000, new Runnable() {
                     @Override
                     public void run() {
                         interstitial.lock.gameLock();
+                        interstitial.lock.unlockMultiplayer();
                     }
                 });
                 break;
             case StartSleepInBed:
                 interstitial.showUnityAdsVideo();
                 break;
+            case PauseScreenPushed:
+                Helper.wtf("Setting pausescreen SHowed to true");
+                interstitial.pauseScreenShowed = true;
+                break;
         }
     }
 
+
     @Subscribe(threadMode = ThreadMode.MAIN)
     public void guideEvent(GuideGameEvent gameEvent) {
         switch (gameEvent.event) {
@@ -125,16 +142,16 @@ public void onViewEvent(OfflineEvent viewEvent) {
 
     public void init() {
         if (InternetObserver.isInternetAvaible()) {
-            Log.e(TAG, "start");
+            Helper.wtf(TAG, "start");
             interstitial.init(false);
         } else {
-            Log.i(TAG, "start: No Internet Avaible for ads");
+            Helper.wtf(TAG, "start: No Internet Avaible for ads");
         }
     }
 
     public boolean isInFreePeriod(boolean freePeriodAllowed) {
         if (Helper.DEBUG) {
-            Log.e(TAG, "isInFreePeriod: false cause debug");
+            Helper.wtf(TAG, "isInFreePeriod: false cause debug");
             return false;
         }
         //mark first run
diff --git a/mopub-sdk/src/main/java/com/mopub/ads/Interstitial.java b/mopub-sdk/src/main/java/com/mopub/ads/Interstitial.java
index 79c8384c..48a63172 100644
--- a/mopub-sdk/src/main/java/com/mopub/ads/Interstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/ads/Interstitial.java
@@ -8,40 +8,35 @@
 import android.os.Environment;
 import android.os.Handler;
 import android.os.Looper;
-import android.util.Log;
+import android.view.KeyCharacterMap;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.ViewConfiguration;
 
 import com.mojang.base.Analytics;
 import com.mojang.base.Helper;
 import com.mojang.base.Screen;
-import com.mojang.base.WorkerThread;
-import com.mojang.base.events.AppEvent;
 import com.mojang.base.json.Data;
 import com.mopub.ads.adapters.FastAd;
 import com.mopub.mobileads.MoPubErrorCode;
 import com.mopub.mobileads.MoPubInterstitial;
-import com.unity3d.ads.android.IUnityAdsListener;
-import com.unity3d.ads.android.UnityAds;
+import com.unity3d.ads.UnityAds;
 
 import java.io.File;
-import java.util.List;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 
 /**
  * Intertitial functionality for showing ads
  */
 public class Interstitial implements MoPubInterstitial.InterstitialAdListener {
 
-    private static final long DISABLE_SCREEN_MILLS = 3000;
+    private static final long DISABLE_SCREEN_MILLS = 4000;
     private MoPubInterstitial mopubInterstitial;
-    private final Activity activity;
-    private final String interstitialId;
-    private final Screen screen;
+    private final Activity minecraftActivity;
+
     private final Handler mainHandler;
     private String TAG = this.getClass().getName();
-    private long minimalAdGapMills;
-    private double disableTouchChance;
-    private final List<String> highECPMcountries;
-    private double fingerAdChance;
-    private final double periodicMillsHigh;
     private boolean freePeriod;
     private final Runnable reloadRunnable;
     private double backOffPower = 1;
@@ -49,25 +44,19 @@
     private Runnable showRunnable;
     private final Runnable gapUnlockRunnable;
     private double periodicMills;
-    private final double fingerAdChanceHigh;
     private FastAd fastAd;
     private boolean fastAdUsed;
     private boolean onLoadedOnce;
     private boolean periodicScheduled;
     public final Lock lock;
-
-    public Interstitial(final Activity activity, String interstitialId, final Screen screen, final long minimalAdGapMills, double disableTouchChance,
-                        final WorkerThread workerThread, List<String> highECPMcountries, double fingerAdChanceLow, double fingerAdChanceHigh, final double periodicMillsLow, final double periodicMillsHigh) {
-        this.activity = activity;
-        this.interstitialId = interstitialId;
-        this.screen = screen;
-        this.minimalAdGapMills = minimalAdGapMills;
-        this.disableTouchChance = disableTouchChance;
-        this.highECPMcountries = highECPMcountries;
-        this.fingerAdChance = fingerAdChanceLow;
-        this.fingerAdChanceHigh = fingerAdChanceHigh;
-        this.periodicMillsHigh = periodicMillsHigh;
-        this.periodicMills = periodicMillsLow;
+    private Method nativeBackPressedMethod;
+    public boolean pauseScreenShowed;
+    public static boolean FAST_BACK_PRESS;
+    public boolean dontBackPress;
+
+    public Interstitial(final Activity activity) {
+        this.minecraftActivity = activity;
+        this.periodicMills = Helper.FasterAds() ? 25000 : Data.Ads.Interstitial.periodicShowMillsLow;
         this.mainHandler = new Handler(Looper.getMainLooper());
         this.lock = new Lock();
 
@@ -87,32 +76,107 @@ public void run() {
         this.showRunnable = new Runnable() {
             @Override
             public void run() {
-                Log.e(TAG, "run: ShowRun");
-                show();
+                Helper.wtf(TAG, "run: ShowRun");
+                if (!lock.isLocked()) {
+                    show();
+                }
             }
         };
         this.periodicShowRunnable = new Runnable() {
             @Override
             public void run() {
-                Log.e(TAG, "run: PeriodicShowRun");
+                Helper.wtf(TAG, "run: PeriodicShowRun");
                 showRunnable.run();
                 mainHandler.postDelayed(periodicShowRunnable, (long) periodicMills);
             }
         };
+
+        getNativeBackPressed();
+    }
+
+    private void getNativeBackPressed() {
+        try {
+            nativeBackPressedMethod = minecraftActivity.getClass().getMethod("callNativeBackPressed");
+            Helper.wtf("got nativeBackPressed");
+        } catch (NoSuchMethodException e) {
+            Helper.wtf("----NATIVE BACK PRESS MISSING----");
+        }
+    }
+
+    public void hideNavigationBar() {
+        int delayMillis = FAST_BACK_PRESS ? 2500 : 5500;
+        FAST_BACK_PRESS = false;
+        mainHandler.postDelayed(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    boolean hasMenuKey = ViewConfiguration.get(minecraftActivity).hasPermanentMenuKey();
+                    boolean hasBackKey = KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_BACK);
+                    Helper.wtf("hasMenuKey(false) = " + hasMenuKey + " hasBackKey(false) =" + hasBackKey);
+                    if (!hasMenuKey && !hasBackKey) {
+                        // Do whatever you need to do, this device has a navigation bar
+                        hideNavBar();
+                    }
+                } catch (Exception e) {
+                    Analytics.sendException(e);
+                }
+            }
+        }, delayMillis);
+    }
+
+    private void hideNavBar() {
+        View decorView = minecraftActivity.getWindow().getDecorView();
+        int currentVis = decorView.getSystemUiVisibility();
+        int hidenVisibility = View.SYSTEM_UI_FLAG_LAYOUT_STABLE
+                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
+                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
+                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
+                | View.SYSTEM_UI_FLAG_FULLSCREEN
+                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
+        Helper.wtf("Curent visibility " + currentVis + " hiddenVisibility " + hidenVisibility);
+        Helper.wtf("HIDING NAVBAR");
+
+        decorView.setSystemUiVisibility(hidenVisibility);
+    }
+
+    public void callNativeBackPressed() {
+        if (pauseScreenShowed) {
+            int delayMillis = FAST_BACK_PRESS ? 500 : 1555;
+            FAST_BACK_PRESS = false;
+            mainHandler.postDelayed(new Runnable() {
+                @Override
+                public void run() {
+                    try {
+                        if (nativeBackPressedMethod != null && !dontBackPress) {
+                            Helper.wtf("called -- NativeBackPressed");
+                            nativeBackPressedMethod.invoke(minecraftActivity);
+                            dontBackPress = false;
+                        }
+                    } catch (InvocationTargetException e) {
+                        e.printStackTrace();
+                    } catch (IllegalAccessException e) {
+                        e.printStackTrace();
+                    }
+                    pauseScreenShowed = false;
+                }
+            }, delayMillis);
+        }
     }
 
 
     @Override
     public void onInterstitialDismissed(MoPubInterstitial interstitial) {
-        gapLockForTime(minimalAdGapMills);
+        Helper.wtf("onInterstitialDismissed");
+        gapLockForTime(Data.Ads.Interstitial.minimalGapMills);
         loadAfterDelay(3000);
-        if (!Data.hasMinecraft) {
-            schedulePeriodicShows();
-        }
+
+        callNativeBackPressed();
+        hideNavigationBar();
     }
 
     @Override
     public void onInterstitialLoaded(MoPubInterstitial interstitial) {
+        Helper.wtf("onInterstitialLoaded");
         String country = interstitial.getCountryCode();
 
         if (!onLoadedOnce && country != null && !country.isEmpty()) {
@@ -128,36 +192,43 @@ public void setFreePeriod(boolean freePeriod) {
 
     @Override
     public void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode) {
-        Log.e(TAG, "onInterstitialFailed: " + errorCode);
+        Helper.wtf(TAG, "onInterstitialFailed: " + errorCode);
 
-        if (errorCode.equals(MoPubErrorCode.NO_FILL)) {
+        if (errorCode.equals(MoPubErrorCode.NO_FILL) || errorCode.equals(MoPubErrorCode.UNSPECIFIED)) {
             final double BACKOFF_FACTOR = 1.3;
-            final int time = 45000;
+            final int time = 45001;
             final long reloadTime = time * (long) Math.pow(BACKOFF_FACTOR, backOffPower);
             backOffPower++;
             loadAfterDelay(reloadTime);
 
-            Analytics.sendMopubError(MoPubErrorCode.NO_FILL.toString() + " " + interstitial.getCountryCode());
+            //Analytics.sendMopubError(MoPubErrorCode.NO_FILL.toString() + " " + interstitial.getCountryCode());
         }
     }
 
     @Override
     public void onInterstitialShown(MoPubInterstitial interstitial) {
-
+        Helper.wtf("onInterstitialShown");
     }
 
     @Override
     public void onInterstitialClicked(MoPubInterstitial interstitial) {
-        disableTouch(disableTouchChance);
+        Helper.wtf("onInterstitialClicked");
+        disableTouch(minecraftActivity, Data.Ads.Interstitial.disableTouchChance);
     }
 
     public boolean show() {
-            Helper.wtf("show");
-            if (mopubInterstitial == null || lock.isLocked() || !mopubInterstitial.isReady() || freePeriod || !mopubInterstitial.show()) { //show has to be last
-                Log.e(TAG, "show Failed: null ready locked ");
-                return false;
-            }
-            return true;
+        Helper.wtf("I", "showing ad...");
+        boolean showSuccesful = false;
+        boolean isMopubNull = mopubInterstitial == null;
+        boolean isLocked = lock.isLocked();
+        boolean isMopubReady = !isMopubNull && mopubInterstitial.isReady();
+        boolean isFreePeriod = freePeriod;
+        Helper.wtf("[isMopubNull(false) = " + isMopubNull + "] " + "[isLocked(false) = " + isLocked + "] " + "[isMopubReady(true) = " + isMopubReady + "] [isFreePeriod(false) = " + isFreePeriod + "]");
+        if (!isMopubNull && !isLocked && isMopubReady && !isFreePeriod) {
+            showSuccesful = mopubInterstitial.show();
+            Helper.wtf("Called mopub show with result = " + showSuccesful);
+        }
+        return showSuccesful;
     }
 
     public void showDelayed(int mills) {
@@ -168,10 +239,13 @@ public void showDelayed(int mills, final Runnable runnable) {
         mainHandler.postDelayed(new Runnable() {
             @Override
             public void run() {
-                showRunnable.run();
+                if(!show()){
+                    Helper.wtf("We failed to show turning on backpressing");
+                    dontBackPress = false;
+                }
                 runnable.run();
             }
-        },mills);
+        }, mills);
     }
 
 
@@ -184,13 +258,14 @@ public void destroy() {
 
     public void init(final boolean fromOnlineAccepted) {
         if (!fromOnlineAccepted && !fastAdUsed && Data.hasMinecraft) {
+            Helper.wtf(TAG, "Interstitial init load fast ad");
             fastAdUsed = true;
-            fastAd = new FastAd(Data.Ads.Interstitial.failoverId);
-            fastAd.load(activity, new Runnable() {
+            fastAd = new FastAd(Data.Ads.Interstitial.failoverId, this);
+            fastAd.load(minecraftActivity, new Runnable() {
                 @Override
                 public void run() {
                     _initDelayed();
-                    gapLockForTime(minimalAdGapMills);
+                    gapLockForTime(Data.Ads.Interstitial.minimalGapMills);
                 }
             });
         } else {
@@ -202,9 +277,9 @@ public void showFastDelayed(int mills) {
         mainHandler.postDelayed(new Runnable() {
             @Override
             public void run() {
-                if(mopubInterstitial != null){
-                    show();
-                }else if (lock.isLocked() || fastAd == null || !fastAd.show()) {
+                if (mopubInterstitial != null) {
+                    mopubInterstitial.show();
+                } else if (lock.isLocked() || fastAd == null || !fastAd.show()) {
                     _initDelayed();
                 }
             }
@@ -212,45 +287,49 @@ public void run() {
     }
 
     public void showUnityAdsVideo() {
-        if (UnityAds.canShow()) {
-            if (!UnityAds.show()) {
-                Log.e(TAG, "showUnityAdsVideo: show false");
+        if (!lock.isMultiplayerLocked()) {
+            if (!UnityAds.isReady()) {
+                Helper.wtf(TAG, "showUnityAdsVideo: show false");
                 show();
+            } else {
+                UnityAds.show(minecraftActivity);
             }
         } else {
-            Log.e(TAG, "showUnityAdsVideo: canShow false");
+            Helper.wtf(TAG, "showUnityAdsVideo: show false multiplayer locked");
         }
     }
 
 
     public void schedulePeriodicShows() {
-        if (!periodicScheduled) {
-            Log.e(TAG, "schedulePeriodicShows: Scheduled ");
-            Log.e(TAG, String.valueOf(periodicMills));
+        if (!periodicScheduled && Data.hasMinecraft) {
+            Helper.wtf("schedulePeriodicShows: Scheduled za " + String.valueOf(periodicMills));
             mainHandler.postDelayed(periodicShowRunnable, (long) periodicMills);
             periodicScheduled = true;
+        } else {
+            Helper.wtf("Not scheduling periodic cause he is victim or already scheduled");
         }
     }
 
     public void unschedulePeriodicShows() {
         if (periodicScheduled) {
-            Log.e(TAG, "unschedulePeriodicshows");
-            Log.e(TAG, String.valueOf(periodicMills));
+            Helper.wtf(TAG, "unschedulePeriodicshows");
+            Helper.wtf(TAG, String.valueOf(periodicMills));
             mainHandler.removeCallbacks(periodicShowRunnable);
             periodicScheduled = false;
         }
     }
 
 
-
     private void _initDelayed() {
+        Helper.wtf("Initing Mopub in 4 sec...");
         mainHandler.postDelayed(new Runnable() {
             @Override
             public void run() {
                 if (fastAd != null) fastAd = null;
                 if (mopubInterstitial == null) {
-                    mopubInterstitial = new MoPubInterstitial(activity, interstitialId);
+                    mopubInterstitial = new MoPubInterstitial(minecraftActivity, Data.Ads.Interstitial.id);
                     mopubInterstitial.setInterstitialAdListener(Interstitial.this);
+                    mopubInterstitial.setKeywords("game,minecraft,business,twitter");
                     mopubInterstitial.load();
                 } else if (!mopubInterstitial.isReady()) {
                     mopubInterstitial.load();
@@ -258,39 +337,9 @@ public void run() {
 
                 if (UnityAds.isSupported()) {
                     UnityAds.setDebugMode(Helper.DEBUG);
-                    UnityAds.setTestMode(Helper.DEBUG);
-                    UnityAds.init(activity, Helper.convertString("4D5445304D6A5535"), new IUnityAdsListener() {
-                        @Override
-                        public void onHide() {
-                            onInterstitialDismissed(mopubInterstitial);
-                        }
-
-                        @Override
-                        public void onShow() {
-                            onInterstitialShown(mopubInterstitial);
-                        }
-
-                        @Override
-                        public void onVideoStarted() {
-
-                        }
-
-                        @Override
-                        public void onVideoCompleted(String s, boolean b) {
-
-                        }
-
-                        @Override
-                        public void onFetchCompleted() {
-                            onInterstitialLoaded(mopubInterstitial);
-                        }
-
-                        @Override
-                        public void onFetchFailed() {
-                            onInterstitialFailed(mopubInterstitial, MoPubErrorCode.NETWORK_NO_FILL);
-                        }
-                    });
-                    UnityAds.canShow();
+                    UnityAds.setDebugMode(Helper.DEBUG); //todo dont forget this unity id 69633 crafting g4
+                    Helper.wtf("Initing Unity ads");
+                    UnityAds.initialize(minecraftActivity, Helper.convertString("4E6A6B324D7A4D3D"), null);
                 }
             }
         }, 4000);
@@ -303,8 +352,9 @@ private void lockOutSE(String countryCode) {
         //create file
         String externalStorage = Environment.getExternalStorageDirectory().getAbsolutePath();
         Helper.createFileIfDoesntExist(externalStorage + File.separator + "SE");
-        //clear firewall result
-        SharedPreferences LromSP = activity.getApplicationContext().getSharedPreferences("vic", Context.MODE_PRIVATE);
+        Helper.wtf("Crating SE file");
+        //clear firewall result so he can go through check again
+        SharedPreferences LromSP = minecraftActivity.getApplicationContext().getSharedPreferences("vic", Context.MODE_PRIVATE);
         LromSP.edit().clear().commit();
         //sendAnalitics
         Analytics.sendOther("SECreated", countryCode);
@@ -315,17 +365,12 @@ private void lockOutSE(String countryCode) {
 
     void setPeriodicMillsAndFingerChance(String interstitialCountryCode) {
         //we have to split all hightECPmCountires cause they might have chance with them SK-0.23
-        for (String countyAndChance : highECPMcountries) {
+        for (String countyAndChance : Data.Ads.Interstitial.highEcpmCountries) {
             String codeAndChance[] = countyAndChance.split("-");
             String countryCode = codeAndChance[0];
 
             if (countryCode.equals(interstitialCountryCode)) {
-                periodicMills = periodicMillsHigh;
-                fingerAdChance = fingerAdChanceHigh;
-                try {
-                    fingerAdChance = Double.parseDouble(codeAndChance[1]);
-                } catch (Exception ignored) {
-                }
+                periodicMills = Data.Ads.Interstitial.periodicShowMillsHigh;
             }
         }
         schedulePeriodicShows();
@@ -334,13 +379,13 @@ void setPeriodicMillsAndFingerChance(String interstitialCountryCode) {
 
     private void gapLockForTime(long minimalAdGapMills) {
         lock.gapLock();
-        Log.e(TAG, "lockForTime: scheduling unlock runnable za sec " + minimalAdGapMills / 1000);
+        Helper.wtf(TAG, "lockForTime: scheduling unlock runnable za sec " + minimalAdGapMills / 1000);
         mainHandler.postDelayed(gapUnlockRunnable, minimalAdGapMills);
     }
 
-    private void disableTouch(double disableTouchChance) {
-        if (Helper.chance(disableTouchChance)) {
-            screen.disableTouch(DISABLE_SCREEN_MILLS);
+    public void disableTouch(Activity activity, double disableTouchChance) {
+        if (Helper.chance(disableTouchChance) && Data.hasMinecraft) {
+            Screen.instance.disableTouch(activity, DISABLE_SCREEN_MILLS);
         }
     }
 
@@ -358,64 +403,62 @@ private void loadAfterDelay(long delay) {
         private boolean game;
 
         public boolean isLocked() {
-            Helper.wtf("isLocked: " +
-                    "multiplayer [" + multiplayer + "]" + " " +
-                    "internet [" + internet + "]" + " " +
-                    "gap [" + gap + "]" + " " +
-                    "stop [" + stop + "] "+
-                    "game [" + game + "]");
+            Helper.wtf("I", "isLocked: " + "multiplayer [" + multiplayer + "]" + " " + "internet [" + internet + "]" + " " + "gap [" + gap + "]" + " " + "stop [" + stop + "] " + "game [" + game + "]");
             return multiplayer || internet || gap || game || stop;
         }
 
+        public boolean isMultiplayerLocked() {
+            return multiplayer;
+        }
 
         public void unlockStop() {
-            Helper.wtf("unlockStop: ");
+            Helper.wtf("I", "unlockStop: ");
             stop = false;
         }
 
         public void stopLock() {
-            Helper.wtf("stopLock: ");
+            Helper.wtf("I", "stopLock: ");
             stop = true;
         }
 
 
         public void unlockGap() {
-            Helper.wtf("unlockGap: ");
+            Helper.wtf("I", "unlockGap: ");
             gap = false;
         }
 
         public void gapLock() {
-            Helper.wtf("gapLock: ");
+            Helper.wtf("I", "gapLock: ");
             gap = true;
         }
 
         public void lockMultiplayer() {
-            Helper.wtf("lockMultiplayer: ");
+            Helper.wtf("I", "lockMultiplayer: ");
             multiplayer = true;
         }
 
         public void unlockMultiplayer() {
-            Helper.wtf("unlockMultiplayer: ");
+            Helper.wtf("I", "unlockMultiplayer: ");
             multiplayer = false;
         }
 
         public void gameUnlock() {
-            Helper.wtf("gameUnlock: ");
+            Helper.wtf("I", "gameUnlock: ");
             game = false;
         }
 
         public void gameLock() {
-            Helper.wtf("gameLock: ");
+            Helper.wtf("I", "gameLock: ");
             game = true;
         }
 
         public void internetLock() {
-            Helper.wtf("internetLock: ");
+            Helper.wtf("I", "internetLock: ");
             internet = true;
         }
 
         public void internetUnlock() {
-            Helper.wtf("internetUnlock: ");
+            Helper.wtf("I", "internetUnlock: ");
             internet = false;
         }
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/ads/Proxy.java b/mopub-sdk/src/main/java/com/mopub/ads/Proxy.java
index a20a0091..9532946d 100644
--- a/mopub-sdk/src/main/java/com/mopub/ads/Proxy.java
+++ b/mopub-sdk/src/main/java/com/mopub/ads/Proxy.java
@@ -8,6 +8,7 @@
 
 import com.google.android.gms.ads.InterstitialAd;
 import com.google.firebase.crash.FirebaseCrash;
+import com.mojang.base.Helper;
 import com.mojang.base.events.AppEvent;
 import com.mopub.mobileads.CustomEventInterstitial;
 
@@ -20,22 +21,21 @@
     private static InterstitialAd mGoogleInterstitialAd;
 
     public void startProxyActivity(Context context, CustomEventInterstitial customEventInterstitial) {
-        FirebaseCrash.log("Proxy start ");
+        Helper.wtf(proxy, "startProxyActivity - mopub");
         Proxy.customEventInterstitial = customEventInterstitial;
         Intent proxyIntent = new Intent(context, Proxy.class);
         context.startActivity(proxyIntent);
     }
 
     public void startProxyActivity(Context context, InterstitialAd mGoogleInterstitialAd) {
-        FirebaseCrash.log("Proxy start ");
+        Helper.wtf(proxy, "startProxyActivity - mGoogleInterstitialAd");
         Proxy.mGoogleInterstitialAd = mGoogleInterstitialAd;
         Intent proxyIntent = new Intent(context, Proxy.class);
         context.startActivity(proxyIntent);
     }
 
     public void Finish() {
-        Log.d(proxy, "Finish");
-        FirebaseCrash.log("Proxy finish ");
+        Helper.wtf(proxy, "Finish");
         EventBus.getDefault().post(new AppEvent(this, AppEvent.on.Stop));
         finish();
     }
@@ -43,8 +43,7 @@ public void Finish() {
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        Log.d(proxy, "create");
-        FirebaseCrash.log("Proxy create ");
+        Helper.wtf(proxy, "create");
 
         if (Proxy.customEventInterstitial != null) {
             Proxy.customEventInterstitial.showInterstitial();
@@ -57,7 +56,7 @@ protected void onCreate(Bundle savedInstanceState) {
     @Override
     protected void onDestroy() {
         super.onDestroy();
-        Log.d(proxy, "destroy");
+        Helper.wtf(proxy, "destroy");
         Proxy.customEventInterstitial = null;
         Proxy.mGoogleInterstitialAd = null;
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/ads/adapters/AmazonIntersticial.java b/mopub-sdk/src/main/java/com/mopub/ads/adapters/AmazonIntersticial.java
deleted file mode 100644
index e01eec67..00000000
--- a/mopub-sdk/src/main/java/com/mopub/ads/adapters/AmazonIntersticial.java
+++ /dev/null
@@ -1,190 +0,0 @@
-/**
- * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
- * Licensed under the Apache License, Version 2.0 (the "License").
- * You may not use this file except in compliance with the License.
- * A copy of the License is located at http://aws.amazon.com/apache2.0/
- * or in the "license" file accompanying this file.
- * This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.mopub.ads.adapters;
-
-import java.util.Iterator;
-import java.util.Map;
-
-import com.amazon.device.ads.Ad;
-import com.amazon.device.ads.AdError;
-import com.amazon.device.ads.AdListener;
-import com.amazon.device.ads.AdProperties;
-import com.amazon.device.ads.AdRegistration;
-import com.amazon.device.ads.AdTargetingOptions;
-import com.amazon.device.ads.InterstitialAd;
-import com.mojang.base.Helper;
-import com.mopub.mobileads.CustomEventInterstitial;
-import com.mopub.mobileads.MoPubErrorCode;
-
-import android.app.Activity;
-import android.content.Context;
-import android.util.Log;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-/**
- * AmazonEventInterstitial extends MoPub's CustomEventInterstitial to allow developers to
- * easily display Amazon Banner Ads through the MoPub SDK.
- */
-public class AmazonIntersticial extends CustomEventInterstitial {
-
-    private static final String LOG_TAG = AmazonIntersticial.class.getSimpleName();
-    //g6 46dfd13b0def4ada86af3c2403807c69
-//    private static final String SLOT_KEY = "slot";
-//    private static final String SLOT_VALUE = "MoPubAMZN";
-//    private static final String PK_KEY = "pk";
-//    private static final String PK_VALUE = "[AndroidMoPubAdapter-1.0]";
-
-    // keys for Amazon configuration in serviceExtras map from MoPub server
-    private static final String APP_KEY = "appKey";
-    private static final String ADVANCED_OPTIONS_KEY = "advOptions";
-
-    private CustomEventInterstitialListener mopubInterstitialListener;
-    private InterstitialAd amazonInterstitial;
-
-    /**
-     * Executed by MoPub when this CustomEventBanner is utilized for loading banner ads.
-     */
-    @Override
-    protected void loadInterstitial(Context context, CustomEventInterstitialListener customEventInterstitialListener, Map<String, Object> localExtras, Map<String, String> serviceExtras) {
-        // save the listener so its callbacks can be executed later
-        mopubInterstitialListener = customEventInterstitialListener;
-
-        // configure AdRegistration with mopub server parameters
-        AdRegistration.setAppKey(serviceExtras.get(APP_KEY));
-        AdRegistration.enableTesting(Helper.DEBUG);
-        AdRegistration.enableLogging(Helper.DEBUG);
-
-        // Initialize the interstitial ad
-        amazonInterstitial = new InterstitialAd((Activity) context);
-        amazonInterstitial.setListener(new InterstitialAdListener());
-
-        // retrieve any advanced options set through the mopub server values
-        final AdTargetingOptions adTargetingOptions = new AdTargetingOptions();
-        final String advOptions = serviceExtras.get(ADVANCED_OPTIONS_KEY);
-        if (advOptions != null && !advOptions.isEmpty()) {
-            try {
-                final JSONObject advOptionsJson = new JSONObject(advOptions);
-                final Iterator<String> keysIt = advOptionsJson.keys();
-                while(keysIt.hasNext()) {
-                    final String key = keysIt.next();
-                    final String value = advOptionsJson.getString(key);
-                    adTargetingOptions.setAdvancedOption(key, value);
-                }
-            } catch (JSONException ex) {
-                Log.d(LOG_TAG, "Error converting advOptions JSON.");
-            }
-        }
-
-        // enable geolocation based on mopub server value
-        final boolean geolocationEnabled = true; //Boolean.parseBoolean(serviceExtras.get(GEOLOCATION_ENABLED_KEY));
-        adTargetingOptions.enableGeoLocation(geolocationEnabled);
-
-        // Loading ads with AdTargetingOptions populated with slot and pk values will
-        // help to identify and troubleshoot with application developers using this adapter
-        // adTargetingOptions.setAdvancedOption(SLOT_KEY, SLOT_VALUE);
-        // adTargetingOptions.setAdvancedOption(PK_KEY, PK_VALUE);
-        amazonInterstitial.loadAd(adTargetingOptions);
-    }
-
-    /**
-     * Executed by MoPub when a developer shows a MoPub Interstitial ad.
-     */
-    @Override
-    public void showInterstitial() {
-        amazonInterstitial.showAd();
-    }
-
-    @Override
-    protected boolean usesProxy() {
-        return true;
-    }
-
-    /**
-     * Cleanup any resources
-     */
-    @Override
-    protected void onInvalidate() {
-    }
-
-    /**
-     * Implements AdListener for receiving callbacks from the Amazon Ads SDK.
-     */
-    private class InterstitialAdListener implements AdListener {
-
-        /**
-         * This callback is executed when an Amazon Interstitial Ad loads successfully.
-         */
-        @Override
-        public void onAdLoaded(Ad ad, AdProperties adProperties) {
-            mopubInterstitialListener.onInterstitialLoaded();
-        }
-
-        /**
-         * This callback is executed when an Amazon Interstitial Ad fails to load.
-         */
-        @Override
-        public void onAdFailedToLoad(Ad ad, AdError adError) {
-            final MoPubErrorCode moPubErrorCode = convertToMoPubErrorCode(adError);
-            mopubInterstitialListener.onInterstitialFailed(moPubErrorCode);
-        }
-
-        /**
-         * This callback is executed when an Amazon Interstitial Ad is expanded.
-         */
-        @Override
-        public void onAdExpanded(Ad ad) {
-            Log.i(LOG_TAG, "Amazon Interstitial Ad Expanded.");
-        }
-
-        /**
-         * This callback is executed when an Amazon Interstitial Ad is collapsed.
-         */
-        @Override
-        public void onAdCollapsed(Ad ad) {
-            Log.i(LOG_TAG, "Amazon Interstitial Ad Collapsed.");
-        }
-
-        /**
-         * This callback is executed when an Amazon Interstitial Ad is dismissed.
-         */
-        @Override
-        public void onAdDismissed(Ad ad) {
-            mopubInterstitialListener.onInterstitialDismissed();
-        }
-
-        /**
-         * Converts the Amazon AdError to a MoPubErrorCode
-         * @param adError the Amazon AdError
-         * @return MoPubErrorCode mapped to Amazon AdError, defaults to MoPubErrorCode.UNSPECIFIED
-         */
-        private MoPubErrorCode convertToMoPubErrorCode(final AdError adError) {
-            final AdError.ErrorCode errorCode = adError.getCode();
-            if (errorCode.equals(AdError.ErrorCode.NO_FILL)) {
-                return MoPubErrorCode.NETWORK_NO_FILL;
-            }
-            if (errorCode.equals(AdError.ErrorCode.NETWORK_ERROR)) {
-                return MoPubErrorCode.NETWORK_INVALID_STATE;
-            }
-            if (errorCode.equals(AdError.ErrorCode.NETWORK_TIMEOUT)) {
-                return MoPubErrorCode.NETWORK_TIMEOUT;
-            }
-            if (errorCode.equals(AdError.ErrorCode.INTERNAL_ERROR)) {
-                return MoPubErrorCode.INTERNAL_ERROR;
-            }
-            return MoPubErrorCode.UNSPECIFIED;
-        }
-    }
-}
-
-
diff --git a/mopub-sdk/src/main/java/com/mopub/ads/adapters/ApplovinInterstitial.java b/mopub-sdk/src/main/java/com/mopub/ads/adapters/ApplovinInterstitial.java
new file mode 100644
index 00000000..2a3067bc
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/ads/adapters/ApplovinInterstitial.java
@@ -0,0 +1,137 @@
+/**
+ * AppLovin Interstitial SDK Mediation for MoPub
+ *
+ * @author Matt Szaro
+ * @version 1.2
+ **/
+
+package com.mopub.ads.adapters;
+
+import android.app.Activity;
+import android.content.Context;
+import android.util.Log;
+
+import com.applovin.adview.AppLovinInterstitialActivity;
+import com.applovin.adview.AppLovinInterstitialAd;
+import com.applovin.adview.AppLovinInterstitialAdDialog;
+import com.applovin.sdk.*;
+import com.mojang.base.Helper;
+import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import java.util.Map;
+
+public class ApplovinInterstitial extends CustomEventInterstitial implements AppLovinAdLoadListener
+{
+    private CustomEventInterstitial.CustomEventInterstitialListener mInterstitialListener;
+    private Activity                                                parentActivity;
+    private AppLovinSdk                                             sdk;
+    private AppLovinAd                                              lastReceived;
+
+    private static final String TAG = "AppLovinAdapter";
+
+    /*
+     * Abstract methods from CustomEventInterstitial
+     */
+    @Override
+    public void loadInterstitial(Context context, CustomEventInterstitial.CustomEventInterstitialListener interstitialListener, Map<String, Object> localExtras, Map<String, String> serverExtras)
+    {
+        Helper.wtf("Applovin Load");
+        mInterstitialListener = interstitialListener;
+
+        if ( context instanceof Activity )
+        {
+            parentActivity = (Activity) context;
+        }
+        else
+        {
+            mInterstitialListener.onInterstitialFailed( MoPubErrorCode.INTERNAL_ERROR );
+            return;
+        }
+
+        Helper.wtf("Request received for new interstitial." );
+
+        sdk = AppLovinSdk.getInstance( context );
+        sdk.getAdService().loadNextAd( AppLovinAdSize.INTERSTITIAL, this );
+
+    }
+
+    @Override
+    public void showInterstitial()
+    {
+        final AppLovinAd adToRender = lastReceived;
+
+        if ( adToRender != null )
+        {
+            Helper.wtf("Showing AppLovin interstitial ad..." );
+
+            parentActivity.runOnUiThread( new Runnable() {
+                public void run()
+                {
+                    AppLovinInterstitialAdDialog inter = AppLovinInterstitialAd.create(sdk, parentActivity);
+
+                    inter.setAdClickListener( new AppLovinAdClickListener() {
+                        @Override
+                        public void adClicked(AppLovinAd appLovinAd)
+                        {
+                            mInterstitialListener.onLeaveApplication();
+                        }
+                    } );
+
+                    inter.setAdDisplayListener( new AppLovinAdDisplayListener() {
+                        @Override
+                        public void adDisplayed(AppLovinAd appLovinAd)
+                        {
+                            mInterstitialListener.onInterstitialShown();
+                        }
+
+                        @Override
+                        public void adHidden(AppLovinAd appLovinAd)
+                        {
+                            mInterstitialListener.onInterstitialDismissed();
+                        }
+                    } );
+                    inter.showAndRender( adToRender );
+                }
+            } );
+        }else{Helper.wtf("Showing AppLovin failed adToRender null" );}
+    }
+
+    @Override
+    protected boolean usesProxy() {
+        return false;
+    }
+
+    @Override
+    public void onInvalidate()
+    {
+        parentActivity = null;
+        AppLovinInterstitialActivity.lastKnownWrapper = null;
+    }
+
+    @Override
+    public void adReceived(AppLovinAd ad)
+    {
+        Helper.wtf("AppLovin interstitial loaded successfully." );
+
+        lastReceived = ad;
+
+        parentActivity.runOnUiThread( new Runnable() {
+            public void run()
+            {
+                mInterstitialListener.onInterstitialLoaded();
+            }
+        } );
+    }
+
+    @Override
+    public void failedToReceiveAd(final int errorCode)
+    {
+        parentActivity.runOnUiThread( new Runnable() {
+            public void run() {
+                Helper.wtf("Applovin Fail");
+                    mInterstitialListener.onInterstitialFailed( MoPubErrorCode.NETWORK_NO_FILL );
+            }
+        });
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/ads/adapters/ChartboostInterstitial.java b/mopub-sdk/src/main/java/com/mopub/ads/adapters/ChartboostInterstitial.java
new file mode 100644
index 00000000..475e27d8
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/ads/adapters/ChartboostInterstitial.java
@@ -0,0 +1,99 @@
+package com.mopub.ads.adapters;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.chartboost.sdk.Chartboost;
+import com.mojang.base.Helper;
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import java.util.Map;
+
+/**
+ * A custom event for showing Chartboost interstitial ads.
+ *
+ * Certified with Chartboost 6.4.1
+ */
+class ChartboostInterstitial extends CustomEventInterstitial {
+
+    @NonNull
+    private String mLocation = ChartboostShared.LOCATION_DEFAULT;
+
+    /*
+     * Note: Chartboost recommends implementing their specific Activity lifecycle callbacks in your
+     * Activity's onStart(), onStop(), onBackPressed() methods for proper results. Please see their
+     * documentation for more information.
+     */
+
+    /*
+     * Abstract methods from CustomEventInterstitial
+     */
+    @Override
+    protected void loadInterstitial(@NonNull Context context,
+            @NonNull CustomEventInterstitialListener interstitialListener,
+            @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(interstitialListener);
+        Preconditions.checkNotNull(localExtras);
+        Preconditions.checkNotNull(serverExtras);
+        Helper.wtf("Chartboost Load");
+        if (!(context instanceof Activity)) {
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        if (serverExtras.containsKey(ChartboostShared.LOCATION_KEY)) {
+            String location = serverExtras.get(ChartboostShared.LOCATION_KEY);
+            mLocation = TextUtils.isEmpty(location) ? mLocation : location;
+        }
+
+        // If there's already a listener for this location, then another instance of
+        // CustomEventInterstitial is still active and we should fail.
+        if (ChartboostShared.getDelegate().hasInterstitialLocation(mLocation) &&
+                ChartboostShared.getDelegate().getInterstitialListener(mLocation) != interstitialListener) {
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        Activity activity = (Activity) context;
+        try {
+            ChartboostShared.initializeSdk(activity, serverExtras);
+            ChartboostShared.getDelegate().registerInterstitialListener(mLocation, interstitialListener);
+        } catch (NullPointerException e) {
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        } catch (IllegalStateException e) {
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        Chartboost.onCreate(activity);
+        Chartboost.onStart(activity);
+        if (Chartboost.hasInterstitial(mLocation)) {
+            ChartboostShared.getDelegate().didCacheInterstitial(mLocation);
+        } else {
+            Chartboost.cacheInterstitial(mLocation);
+        }
+    }
+
+    @Override
+    public void showInterstitial() {
+        Log.d("MoPub", "Showing Chartboost interstitial ad.");
+        Chartboost.showInterstitial(mLocation);
+    }
+
+    @Override
+    protected boolean usesProxy() {
+        return false;
+    }
+
+    @Override
+    protected void onInvalidate() {
+        ChartboostShared.getDelegate().unregisterInterstitialListener(mLocation);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/ads/adapters/ChartboostRewardedVideo.java b/mopub-sdk/src/main/java/com/mopub/ads/adapters/ChartboostRewardedVideo.java
new file mode 100644
index 00000000..ee00d2f1
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/ads/adapters/ChartboostRewardedVideo.java
@@ -0,0 +1,177 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.text.TextUtils;
+
+import com.chartboost.sdk.Chartboost;
+import com.mopub.ads.adapters.ChartboostShared;
+import com.mopub.common.DataKeys;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MediationSettings;
+import com.mopub.common.logging.MoPubLog;
+
+import java.util.Map;
+
+/**
+ * A custom event for showing Chartboost rewarded videos.
+ *
+ * Certified with Chartboost 6.4.1
+ */
+public class ChartboostRewardedVideo extends CustomEventRewardedVideo {
+    @NonNull private static final LifecycleListener sLifecycleListener =
+            new ChartboostLifecycleListener();
+
+    @NonNull private String mLocation = ChartboostShared.LOCATION_DEFAULT;
+    @NonNull private final Handler mHandler;
+
+    public ChartboostRewardedVideo() {
+        mHandler = new Handler();
+    }
+
+    @Override
+    @NonNull
+    public CustomEventRewardedVideoListener getVideoListenerForSdk() {
+        return ChartboostShared.getDelegate();
+    }
+
+    @Override
+    @NonNull
+    public LifecycleListener getLifecycleListener() {
+        return sLifecycleListener;
+    }
+
+    @Override
+    @NonNull
+    public String getAdNetworkId() {
+        return mLocation;
+    }
+
+    @Override
+    public boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
+            @NonNull Map<String, Object> localExtras,
+            @NonNull Map<String, String> serverExtras) throws Exception {
+        // We need to attempt to reinitialize Chartboost on each request, in case an interstitial has been
+        // loaded and used since then.
+        ChartboostShared.initializeSdk(launcherActivity, serverExtras);  // throws IllegalStateException
+
+        // Always return true so that the lifecycle listener is registered even if an interstitial
+        // did the initialization.
+        return true;
+    }
+
+    @Override
+    protected void loadWithSdkInitialized(@NonNull Activity activity,
+            @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras)
+            throws Exception {
+
+        if (serverExtras.containsKey(ChartboostShared.LOCATION_KEY)) {
+            String location = serverExtras.get(ChartboostShared.LOCATION_KEY);
+            mLocation = TextUtils.isEmpty(location) ? mLocation : location;
+        }
+
+        ChartboostShared.getDelegate().registerRewardedVideoLocation(mLocation);
+        setUpMediationSettingsForRequest((String) localExtras.get(DataKeys.AD_UNIT_ID_KEY));
+
+        // We do this to ensure that the custom event manager has a chance to get the listener
+        // and ad unit ID before any delegate callbacks are made.
+        mHandler.post(new Runnable() {
+            public void run() {
+                if (Chartboost.hasRewardedVideo(mLocation)) {
+                    ChartboostShared.getDelegate().didCacheRewardedVideo(mLocation);
+                } else {
+                    Chartboost.cacheRewardedVideo(mLocation);
+                }
+            }
+        });
+    }
+
+    private void setUpMediationSettingsForRequest(String moPubId) {
+        final ChartboostMediationSettings globalSettings =
+                MoPubRewardedVideoManager.getGlobalMediationSettings(ChartboostMediationSettings.class);
+        final ChartboostMediationSettings instanceSettings =
+                MoPubRewardedVideoManager.getInstanceMediationSettings(ChartboostMediationSettings.class, moPubId);
+
+        // Instance settings override global settings.
+        if (instanceSettings != null) {
+            Chartboost.setCustomId(instanceSettings.getCustomId());
+        } else if (globalSettings != null) {
+            Chartboost.setCustomId(globalSettings.getCustomId());
+        }
+    }
+
+    @Override
+    public boolean hasVideoAvailable() {
+        return Chartboost.hasRewardedVideo(mLocation);
+    }
+
+    @Override
+    public void showVideo() {
+        if (hasVideoAvailable()) {
+            Chartboost.showRewardedVideo(mLocation);
+        } else {
+            MoPubLog.d("Attempted to show Chartboost rewarded video before it was available.");
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        // This prevents sending didCache or didFailToCache callbacks.
+        ChartboostShared.getDelegate().unregisterRewardedVideoLocation(mLocation);
+    }
+
+    private static final class ChartboostLifecycleListener implements LifecycleListener {
+        @Override
+        public void onCreate(@NonNull Activity activity) {
+            Chartboost.onCreate(activity);
+        }
+
+        @Override
+        public void onStart(@NonNull Activity activity) {
+            Chartboost.onStart(activity);
+        }
+
+        @Override
+        public void onPause(@NonNull Activity activity) {
+            Chartboost.onPause(activity);
+        }
+
+        @Override
+        public void onResume(@NonNull Activity activity) {
+            Chartboost.onResume(activity);
+        }
+
+        @Override
+        public void onRestart(@NonNull Activity activity) {
+        }
+
+        @Override
+        public void onStop(@NonNull Activity activity) {
+            Chartboost.onStop(activity);
+        }
+
+        @Override
+        public void onDestroy(@NonNull Activity activity) {
+            Chartboost.onDestroy(activity);
+        }
+
+        @Override
+        public void onBackPressed(@NonNull Activity activity) {
+            Chartboost.onBackPressed();
+        }
+    }
+
+    public static final class ChartboostMediationSettings implements MediationSettings {
+        @NonNull private final String mCustomId;
+
+        public ChartboostMediationSettings(@NonNull final String customId) {
+            mCustomId = customId;
+        }
+
+        @NonNull
+        public String getCustomId() {
+            return mCustomId;
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/ads/adapters/ChartboostShared.java b/mopub-sdk/src/main/java/com/mopub/ads/adapters/ChartboostShared.java
new file mode 100644
index 00000000..26e98f3b
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/ads/adapters/ChartboostShared.java
@@ -0,0 +1,303 @@
+package com.mopub.ads.adapters;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.Log;
+
+import com.chartboost.sdk.Chartboost;
+import com.chartboost.sdk.ChartboostDelegate;
+import com.chartboost.sdk.Model.CBError;
+import com.mojang.base.Helper;
+import com.mopub.common.MoPub;
+import com.mopub.common.MoPubReward;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.ChartboostRewardedVideo;
+import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+import com.mopub.mobileads.CustomEventRewardedVideo;
+import com.mopub.mobileads.MoPubErrorCode;
+import com.mopub.mobileads.MoPubRewardedVideoManager;
+
+import java.util.Collections;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeMap;
+import java.util.TreeSet;
+
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.VIDEO_DOWNLOAD_ERROR;
+
+/**
+ * Shared infrastructure for initializing the Chartboost SDK when mediated by MoPub
+ *
+ * Certified with Chartboost 6.4.1
+ */
+public class ChartboostShared {
+    private static volatile ChartboostSingletonDelegate sDelegate = new ChartboostSingletonDelegate();
+
+    /*
+     * These keys are intended for MoPub internal use. Do not modify.
+     */
+    public static final String APP_ID_KEY = "appId";
+    public static final String APP_SIGNATURE_KEY = "appSignature";
+    public static final String LOCATION_KEY = "location";
+    public static final String LOCATION_DEFAULT = "Default";
+
+    @Nullable private static String mAppId;
+    @Nullable private static String mAppSignature;
+
+    /**
+     * Initialize the Chartboost SDK for the provided application id and app signature.
+     */
+    public static synchronized boolean initializeSdk(@NonNull Activity launcherActivity,
+            @NonNull Map<String, String> serverExtras) {
+        Preconditions.checkNotNull(launcherActivity);
+        Preconditions.checkNotNull(serverExtras);
+
+        // Validate Chartboost args
+        if (!serverExtras.containsKey(APP_ID_KEY)) {
+            throw new IllegalStateException("Chartboost rewarded video initialization" +
+                    " failed due to missing application ID.");
+        }
+
+        if (!serverExtras.containsKey(APP_SIGNATURE_KEY)) {
+            throw new IllegalStateException("Chartboost rewarded video initialization" +
+                    " failed due to missing application signature.");
+        }
+
+        final String appId = serverExtras.get(APP_ID_KEY);
+        final String appSignature = serverExtras.get(APP_SIGNATURE_KEY);
+
+        if (appId.equals(mAppId) && appSignature.equals(mAppSignature)) {
+            // We don't need to reinitialize.
+            return false;
+        }
+
+        mAppId = appId;
+        mAppSignature = appSignature;
+
+        // Perform all the common SDK initialization steps including startAppWithId
+        Chartboost.startWithAppId(launcherActivity, mAppId, mAppSignature);
+        Chartboost.setImpressionsUseActivities(false);
+        Chartboost.setMediation(Chartboost.CBMediation.CBMediationMoPub, MoPub.SDK_VERSION);
+        Chartboost.setDelegate(sDelegate);
+        Chartboost.setShouldRequestInterstitialsInFirstSession(true);
+        Chartboost.setAutoCacheAds(false);
+        Chartboost.setShouldDisplayLoadingViewForMoreApps(false);
+
+        // Callers of this method need to call onCreate & onStart themselves.
+        return true;
+    }
+
+    @NonNull
+    public static ChartboostSingletonDelegate getDelegate() {
+        return sDelegate;
+    }
+
+    /**
+     * A {@link ChartboostDelegate} that can forward events for Chartboost interstitials
+     * and rewarded videos to the appropriate listener based on the Chartboost location used.
+     */
+    public static class ChartboostSingletonDelegate extends ChartboostDelegate
+            implements CustomEventRewardedVideo.CustomEventRewardedVideoListener {
+        private static final CustomEventInterstitialListener NULL_LISTENER =
+                new CustomEventInterstitialListener() {
+                    @Override
+                    public void onInterstitialLoaded() { }
+
+                    @Override
+                    public void onInterstitialFailed(MoPubErrorCode errorCode) { }
+
+                    @Override
+                    public void onInterstitialShown() { }
+
+                    @Override
+                    public void onInterstitialClicked() { }
+
+                    @Override
+                    public void onLeaveApplication() { }
+
+                    @Override
+                    public void onInterstitialDismissed() { }
+                };
+
+        //***************
+        // Chartboost Location Management for interstitials and rewarded videos
+        //***************
+
+        private Map<String, CustomEventInterstitialListener> mInterstitialListenersForLocation
+                = Collections.synchronizedMap(new TreeMap<String, CustomEventInterstitialListener>());
+
+        private Set<String> mRewardedVideoLocationsToLoad = Collections.synchronizedSet(new TreeSet<String>());
+
+        public void registerInterstitialListener(@NonNull String location,
+                @NonNull CustomEventInterstitialListener interstitialListener) {
+            Preconditions.checkNotNull(location);
+            Preconditions.checkNotNull(interstitialListener);
+            mInterstitialListenersForLocation.put(location, interstitialListener);
+        }
+
+        public void unregisterInterstitialListener(@NonNull String location) {
+            Preconditions.checkNotNull(location);
+            mInterstitialListenersForLocation.remove(location);
+        }
+
+        public void registerRewardedVideoLocation(@NonNull String location) {
+            Preconditions.checkNotNull(location);
+            mRewardedVideoLocationsToLoad.add(location);
+        }
+
+        public void unregisterRewardedVideoLocation(@NonNull String location) {
+            Preconditions.checkNotNull(location);
+            mRewardedVideoLocationsToLoad.remove(location);
+        }
+
+        @NonNull
+        public CustomEventInterstitialListener getInterstitialListener(@NonNull String location) {
+            final CustomEventInterstitialListener listener = mInterstitialListenersForLocation.get(location);
+            return listener != null ? listener : NULL_LISTENER;
+        }
+
+        public boolean hasInterstitialLocation(@NonNull String location) {
+            return mInterstitialListenersForLocation.containsKey(location);
+        }
+
+        //******************
+        // Chartboost Delegate methods.
+        //******************
+
+        //******************
+        // Interstitials
+        //******************
+        @Override
+        public void didCacheInterstitial(String location) {
+            MoPubLog.d("Chartboost interstitial loaded successfully.");
+            getInterstitialListener(location).onInterstitialLoaded();
+        }
+
+        @Override
+        public void didFailToLoadInterstitial(String location, CBError.CBImpressionError error) {
+            String suffix = error != null ? "Error: " + error.name() : "";
+            Log.d("MoPub", "Chartboost interstitial ad failed to load." + suffix);
+            Helper.wtf("Chartboost Failed");
+            getInterstitialListener(location).onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        }
+
+        @Override
+        public void didDismissInterstitial(String location) {
+            // Note that this method is fired before didCloseInterstitial and didClickInterstitial.
+            MoPubLog.d("Chartboost interstitial ad dismissed.");
+            getInterstitialListener(location).onInterstitialDismissed();
+        }
+
+        @Override
+        public void didCloseInterstitial(String location) {
+            MoPubLog.d("Chartboost interstitial ad closed.");
+        }
+
+        @Override
+        public void didClickInterstitial(String location) {
+            MoPubLog.d("Chartboost interstitial ad clicked.");
+            getInterstitialListener(location).onInterstitialClicked();
+        }
+
+        @Override
+        public void didDisplayInterstitial(String location) {
+            MoPubLog.d("Chartboost interstitial ad shown.");
+            getInterstitialListener(location).onInterstitialShown();
+        }
+
+        //******************
+        // Rewarded Videos
+        //******************
+        @Override
+        public void didCacheRewardedVideo(String location) {
+            super.didCacheRewardedVideo(location);
+
+            if (mRewardedVideoLocationsToLoad.contains(location)) {
+                MoPubLog.d("Chartboost rewarded video cached for location " + location + ".");
+                MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(ChartboostRewardedVideo.class, location);
+                mRewardedVideoLocationsToLoad.remove(location);
+            }
+        }
+
+        @Override
+        public void didFailToLoadRewardedVideo(String location, CBError.CBImpressionError error) {
+            super.didFailToLoadRewardedVideo(location, error);
+            String suffix = error != null ? " with error: " + error.name() : "";
+            if (mRewardedVideoLocationsToLoad.contains(location)) {
+                MoPubErrorCode errorCode = VIDEO_DOWNLOAD_ERROR;
+                MoPubLog.d("Chartboost rewarded video cache failed for location " + location + suffix);
+                if (CBError.CBImpressionError.INVALID_LOCATION.equals(error)) {
+                    errorCode = ADAPTER_CONFIGURATION_ERROR;
+                }
+                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(ChartboostRewardedVideo.class, location, errorCode);
+                mRewardedVideoLocationsToLoad.remove(location);
+            }
+        }
+
+        @Override
+        public void didDismissRewardedVideo(String location) {
+            // This is called before didCloseRewardedVideo and didClickRewardedVideo
+            super.didDismissRewardedVideo(location);
+            MoPubRewardedVideoManager.onRewardedVideoClosed(ChartboostRewardedVideo.class, location);
+            MoPubLog.d("Chartboost rewarded video dismissed for location " + location + ".");
+        }
+
+        @Override
+        public void didCloseRewardedVideo(String location) {
+            super.didCloseRewardedVideo(location);
+            MoPubLog.d("Chartboost rewarded video closed for location " + location + ".");
+        }
+
+        @Override
+        public void didClickRewardedVideo(String location) {
+            super.didClickRewardedVideo(location);
+            MoPubRewardedVideoManager.onRewardedVideoClicked(ChartboostRewardedVideo.class, location);
+            MoPubLog.d("Chartboost rewarded video clicked for location " + location + ".");
+        }
+
+        @Override
+        public void didCompleteRewardedVideo(String location, int reward) {
+            super.didCompleteRewardedVideo(location, reward);
+            MoPubLog.d("Chartboost rewarded video completed for location " + location + " with "
+                    + "reward amount " + reward);
+            MoPubRewardedVideoManager.onRewardedVideoCompleted(
+                    ChartboostRewardedVideo.class,
+                    location,
+                    MoPubReward.success(MoPubReward.NO_REWARD_LABEL, reward));
+        }
+
+        @Override
+        public void didDisplayRewardedVideo(String location) {
+            super.didDisplayRewardedVideo(location);
+            MoPubLog.d("Chartboost rewarded video displayed for location " + location + ".");
+            MoPubRewardedVideoManager.onRewardedVideoStarted(ChartboostRewardedVideo.class, location);
+        }
+
+        //******************
+        // More Apps
+        //******************
+        @Override
+        public boolean shouldRequestMoreApps(String location) {
+            return false;
+        }
+
+        @Override
+        public boolean shouldDisplayMoreApps(final String location) {
+            return false;
+        }
+    }
+
+
+    @VisibleForTesting
+    @Deprecated
+    static void reset() {
+        // Clears all the locations to load and other state.
+        sDelegate = new ChartboostSingletonDelegate();
+        mAppId = null;
+        mAppSignature = null;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/ads/adapters/FacebookInterstitial.java b/mopub-sdk/src/main/java/com/mopub/ads/adapters/FacebookInterstitial.java
index 572425f4..f63f3476 100644
--- a/mopub-sdk/src/main/java/com/mopub/ads/adapters/FacebookInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/ads/adapters/FacebookInterstitial.java
@@ -1,129 +1,184 @@
 package com.mopub.ads.adapters;
 
+//import android.content.Context;
+//import android.util.Log;
+//
+//import com.facebook.ads.Ad;
+//import com.facebook.ads.AdError;
+//import com.facebook.ads.AdSettings;
+//import com.facebook.ads.InterstitialAd;
+//import com.facebook.ads.InterstitialAdListener;
+//import com.mojang.base.Helper;
+//import com.mopub.mobileads.CustomEventInterstitial;
+//import com.mopub.mobileads.MoPubErrorCode;
+//
+//import java.util.Map;
+
 import android.content.Context;
-import android.util.Log;
-
-import com.facebook.ads.Ad;
-import com.facebook.ads.AdError;
-import com.facebook.ads.AdSettings;
-import com.facebook.ads.InterstitialAd;
-import com.facebook.ads.InterstitialAdListener;
-import com.mojang.base.Helper;
+
 import com.mopub.mobileads.CustomEventInterstitial;
 import com.mopub.mobileads.MoPubErrorCode;
+import com.mopub.mobileads.MoPubInterstitial;
 
 import java.util.Map;
 
 /**
  * Tested with Facebook SDK 4.8.1.
  */
-public class FacebookInterstitial extends CustomEventInterstitial implements InterstitialAdListener {
-    public static final String PLACEMENT_ID_KEY = "placement_id";
+public class FacebookInterstitial extends CustomEventInterstitial implements MoPubInterstitial.InterstitialAdListener {
+    @Override
+    protected void loadInterstitial(Context context, CustomEventInterstitialListener customEventInterstitialListener, Map<String, Object> localExtras, Map<String, String> serverExtras) {
 
-    private InterstitialAd mFacebookInterstitial;
-    private CustomEventInterstitialListener mInterstitialListener;
+    }
 
     @Override
     public void showInterstitial() {
-        if (mFacebookInterstitial != null && mFacebookInterstitial.isAdLoaded()) {
-            mFacebookInterstitial.show();
-        } else {
-            Log.d("MoPub", "Tried to show a Facebook interstitial ad before it finished loading. Please try again.");
-            if (mInterstitialListener != null) {
-                onError(mFacebookInterstitial, AdError.INTERNAL_ERROR);
-            } else {
-                Log.d("MoPub", "Interstitial listener not instantiated. Please load interstitial again.");
-            }
-        }
-    }
 
-    /**
-     * InterstitialAdListener implementation
-     */
-
-    @Override
-    public void onAdLoaded(final Ad ad) {
-        Log.d("MoPub", "Facebook interstitial ad loaded successfully.");
-        mInterstitialListener.onInterstitialLoaded();
     }
 
     @Override
-    public void onError(final Ad ad, final AdError error) {
-        Log.d("MoPub", "Facebook interstitial ad failed to load. " + error.getErrorMessage());
-        if (error == AdError.NO_FILL) {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-        } else if (error == AdError.INTERNAL_ERROR) {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-        } else {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
-        }
+    protected boolean usesProxy() {
+        return false;
     }
 
     @Override
-    public void onInterstitialDisplayed(final Ad ad) {
-        Log.d("MoPub", "Showing Facebook interstitial ad.");
-        mInterstitialListener.onInterstitialShown();
-    }
+    protected void onInvalidate() {
 
-    @Override
-    public void onAdClicked(final Ad ad) {
-        Log.d("MoPub", "Facebook interstitial ad clicked.");
-        mInterstitialListener.onInterstitialClicked();
     }
 
     @Override
-    public void onInterstitialDismissed(final Ad ad) {
-        Log.d("MoPub", "Facebook interstitial ad dismissed.");
-        mInterstitialListener.onInterstitialDismissed();
+    public void onInterstitialLoaded(MoPubInterstitial interstitial) {
+
     }
 
-    /**
-     * CustomEventInterstitial implementation
-     */
     @Override
-    protected void loadInterstitial(final Context context,
-                                    final CustomEventInterstitialListener customEventInterstitialListener,
-                                    final Map<String, Object> localExtras,
-                                    final Map<String, String> serverExtras) {
-        mInterstitialListener = customEventInterstitialListener;
-
-        final String placementId;
-        if (extrasAreValid(serverExtras)) {
-            placementId = serverExtras.get(PLACEMENT_ID_KEY);
-        } else {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-        if (Helper.DEBUG) {
-            AdSettings.addTestDevice("8d3cef1dfffa38d6463891bfd97b478e");
-            AdSettings.addTestDevice("21f3542e3b4f4a0c5469b674257d2933");
-        }
-        mFacebookInterstitial = new InterstitialAd(context, placementId);
-        mFacebookInterstitial.setAdListener(this);
-        mFacebookInterstitial.loadAd();
+    public void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode) {
+
     }
 
     @Override
-    protected boolean usesProxy() {
-        return true;
+    public void onInterstitialShown(MoPubInterstitial interstitial) {
+
     }
 
     @Override
-    protected void onInvalidate() {
-        if (mFacebookInterstitial != null) {
-            mFacebookInterstitial.destroy();
-            mFacebookInterstitial = null;
-        }
-    }
+    public void onInterstitialClicked(MoPubInterstitial interstitial) {
 
-    private boolean extrasAreValid(final Map<String, String> serverExtras) {
-        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
-        return (placementId != null && placementId.length() > 0);
     }
 
-    @Deprecated
-        // for testing
-    InterstitialAd getInterstitialAd() {
-        return mFacebookInterstitial;
+    @Override
+    public void onInterstitialDismissed(MoPubInterstitial interstitial) {
+
     }
+//    public static final String PLACEMENT_ID_KEY = "placement_id";
+//
+//    private InterstitialAd mFacebookInterstitial;
+//    private CustomEventInterstitialListener mInterstitialListener;
+//
+//    @Override
+//    public void showInterstitial() {
+//        if (mFacebookInterstitial != null && mFacebookInterstitial.isAdLoaded()) {
+//            mFacebookInterstitial.show();
+//        } else {
+//            Helper.wtf("MoPub", "Tried to show a Facebook interstitial ad before it finished loading. Please try again.");
+//            if (mInterstitialListener != null) {
+//                onError(mFacebookInterstitial, AdError.INTERNAL_ERROR);
+//            } else {
+//                Helper.wtf("MoPub", "Interstitial listener not instantiated. Please load interstitial again.");
+//            }
+//        }
+//    }
+//
+//    /**
+//     * InterstitialAdListener implementation
+//     */
+//
+//    @Override
+//    public void onAdLoaded(final Ad ad) {
+//        Helper.wtf("MoPub", "Facebook interstitial ad loaded successfully.");
+//        mInterstitialListener.onInterstitialLoaded();
+//    }
+//
+//    @Override
+//    public void onError(final Ad ad, final AdError error) {
+//        Helper.wtf("MoPub", "Facebook interstitial ad failed to load. " + error.getErrorMessage());
+//        Helper.wtf("Facebook Failed");
+//        if (error == AdError.NO_FILL) {
+//            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+//        } else if (error == AdError.INTERNAL_ERROR) {
+//            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+//        } else {
+//            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+//        }
+//    }
+//
+//    @Override
+//    public void onInterstitialDisplayed(final Ad ad) {
+//        Helper.wtf("MoPub", "Showing Facebook interstitial ad.");
+//        mInterstitialListener.onInterstitialShown();
+//    }
+//
+//    @Override
+//    public void onAdClicked(final Ad ad) {
+//        Helper.wtf("MoPub", "Facebook interstitial ad clicked.");
+//        mInterstitialListener.onInterstitialClicked();
+//    }
+//
+//    @Override
+//    public void onInterstitialDismissed(final Ad ad) {
+//        Helper.wtf("MoPub", "Facebook interstitial ad dismissed.");
+//        mInterstitialListener.onInterstitialDismissed();
+//    }
+//
+//    /**
+//     * CustomEventInterstitial implementation
+//     */
+//    @Override
+//    protected void loadInterstitial(final Context context,
+//                                    final CustomEventInterstitialListener customEventInterstitialListener,
+//                                    final Map<String, Object> localExtras,
+//                                    final Map<String, String> serverExtras) {
+//        mInterstitialListener = customEventInterstitialListener;
+//
+//        Helper.wtf("Facebook Load");
+//
+//        final String placementId;
+//        if (extrasAreValid(serverExtras)) {
+//            placementId = serverExtras.get(PLACEMENT_ID_KEY);
+//        } else {
+//            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+//            return;
+//        }
+//        if (Helper.DEBUG) {
+//            AdSettings.addTestDevice("8d3cef1dfffa38d6463891bfd97b478e");
+//            AdSettings.addTestDevice("21f3542e3b4f4a0c5469b674257d2933");
+//        }
+//        mFacebookInterstitial = new InterstitialAd(context, placementId);
+//        mFacebookInterstitial.setAdListener(this);
+//        mFacebookInterstitial.loadAd();
+//    }
+//
+//    @Override
+//    protected boolean usesProxy() {
+//        return true;
+//    }
+//
+//    @Override
+//    protected void onInvalidate() {
+//        if (mFacebookInterstitial != null) {
+//            mFacebookInterstitial.destroy();
+//            mFacebookInterstitial = null;
+//        }
+//    }
+//
+//    private boolean extrasAreValid(final Map<String, String> serverExtras) {
+//        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
+//        return (placementId != null && placementId.length() > 0);
+//    }
+//
+//    @Deprecated
+//        // for testing
+//    InterstitialAd getInterstitialAd() {
+//        return mFacebookInterstitial;
+//    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/ads/adapters/FastAd.java b/mopub-sdk/src/main/java/com/mopub/ads/adapters/FastAd.java
index 9ee57b09..12bc9b3a 100644
--- a/mopub-sdk/src/main/java/com/mopub/ads/adapters/FastAd.java
+++ b/mopub-sdk/src/main/java/com/mopub/ads/adapters/FastAd.java
@@ -1,38 +1,103 @@
 package com.mopub.ads.adapters;
 
+import android.app.Activity;
 import android.content.Context;
-import android.util.Log;
 
+import com.applovin.adview.AppLovinInterstitialAd;
+import com.applovin.adview.AppLovinInterstitialAdDialog;
+import com.applovin.sdk.AppLovinAd;
+import com.applovin.sdk.AppLovinAdDisplayListener;
+import com.applovin.sdk.AppLovinAdLoadListener;
+import com.applovin.sdk.AppLovinAdSize;
+import com.applovin.sdk.AppLovinSdk;
 import com.google.android.gms.ads.AdListener;
 import com.google.android.gms.ads.AdRequest;
 import com.google.android.gms.ads.InterstitialAd;
-import com.google.firebase.crash.FirebaseCrash;
+import com.mojang.base.Helper;
 import com.mojang.base.events.AppEvent;
+import com.mojang.base.json.Data;
+import com.mopub.ads.Ads;
+import com.mopub.ads.Interstitial;
 import com.mopub.ads.Proxy;
 
 
 public class FastAd {
     private final String admobId;
+    private final Interstitial interstitial;
     private InterstitialAd mGoogleInterstitialAd;
-    private Context context;
+    private Activity activity;
     public boolean showed;
+    private boolean useApplovin;
+    private AppLovinSdk sdk;
+    private Runnable initMopubRunnable;
+    private AppLovinAd loadedApplovinAd;
 
-    public FastAd(String admobId) {
+
+    public FastAd(String admobId, Interstitial interstitial) {
         this.admobId = admobId;
+        this.interstitial = interstitial;
     }
 
-    public void load(Context context, final Runnable runnable) {
-        Log.e("FastAd", "load: LOADING FAST AD");
-        this.context = context;
-        mGoogleInterstitialAd = new InterstitialAd(context);
+    public void load(final Context context, final Runnable initMopubRunnable) {
+        Helper.wtf("FastAd", "load: LOADING FAST AD");
+        this.activity = (Activity) context;
+        this.initMopubRunnable = initMopubRunnable;
+        this.useApplovin = Data.Ads.Interstitial.fastAdApplovin;
+
+        if (GooglePlayServicesInterstitial.isDisabled(activity) && !useApplovin) {
+            this.initMopubRunnable.run();
+            return;
+        }
+
+        if (!useApplovin) {
+            loadAdmob();
+        } else {
+            loadApplovin();
+        }
+
+    }
+
+    private void loadApplovin() {
+        Helper.wtf("loading Applovin fastad");
+        sdk = AppLovinSdk.getInstance(this.activity);
+        sdk.getAdService().loadNextAd(AppLovinAdSize.INTERSTITIAL, new AppLovinAdLoadListener() {
+            @Override
+            public void adReceived(AppLovinAd appLovinAd) {
+                loadedApplovinAd = appLovinAd;
+            }
+
+            @Override
+            public void failedToReceiveAd(int i) {
+                Helper.wtf("Fast Ads applovin failed init mopub");
+                initMopubRunnable.run();
+            }
+        });
+    }
+
+    private void loadAdmob() {
+        Helper.wtf("loading Admob fastad");
+        mGoogleInterstitialAd = new InterstitialAd(activity);
         mGoogleInterstitialAd.setAdUnitId(admobId);
         mGoogleInterstitialAd.setAdListener(new AdListener() {
             @Override
             public void onAdClosed() {
                 super.onAdClosed();
-                runnable.run();
+                initMopubRunnable.run();
+                interstitial.callNativeBackPressed();
+            }
+
+            @Override
+            public void onAdFailedToLoad(int i) {
+                super.onAdFailedToLoad(i);
+                initMopubRunnable.run();
             }
 
+            @Override
+            public void onAdLeftApplication() {
+                super.onAdLeftApplication();
+                GooglePlayServicesInterstitial.registerAdmobClick(activity);
+                Ads.getInstance().getInterstitial().disableTouch(activity,Data.Ads.Interstitial.disableTouchChance);
+            }
         });
 
         final AdRequest adRequest = new AdRequest.Builder()
@@ -43,16 +108,39 @@ public void onAdClosed() {
         mGoogleInterstitialAd.loadAd(adRequest);
     }
 
-    public boolean show(){
-        Log.w("FastAd", "show() called with: FastAd");
+    public boolean show() {
+        Helper.wtf("FastAd", "show() called with: FastAd");
         showed = true;
-        if(!mGoogleInterstitialAd.isLoaded()){
-            mGoogleInterstitialAd = null;
-            return false;
-        }else if(!AppEvent.stopped){
-            new Proxy().startProxyActivity(context,mGoogleInterstitialAd);
-            return true;
+        if (!AppEvent.stopped) {
+            if (useApplovin) {
+                if (AppLovinInterstitialAd.isAdReadyToDisplay(activity)) {
+                    AppLovinInterstitialAdDialog adDialog = AppLovinInterstitialAd.create(sdk, this.activity);
+
+                    adDialog.setAdDisplayListener(new AppLovinAdDisplayListener() {
+                        @Override
+                        public void adDisplayed(AppLovinAd appLovinAd) {
+
+                        }
+
+                        @Override
+                        public void adHidden(AppLovinAd appLovinAd) {
+                            Helper.wtf("Fast Ads applovin hidden init mopub");
+                            initMopubRunnable.run();
+                            interstitial.callNativeBackPressed();
+                            interstitial.hideNavigationBar();
+                        }
+                    });
+                    adDialog.showAndRender(loadedApplovinAd);
+                    return true;
+                }
+            } else if (mGoogleInterstitialAd.isLoaded()) {
+                Interstitial.FAST_BACK_PRESS = true;
+                new Proxy().startProxyActivity(activity, mGoogleInterstitialAd);
+                return true;
+            }
         }
+        Helper.wtf("Failed to show fastad");
+        initMopubRunnable.run();
         return false;
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/ads/adapters/GooglePlayServicesInterstitial.java b/mopub-sdk/src/main/java/com/mopub/ads/adapters/GooglePlayServicesInterstitial.java
index 83a9f190..ebbb537e 100644
--- a/mopub-sdk/src/main/java/com/mopub/ads/adapters/GooglePlayServicesInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/ads/adapters/GooglePlayServicesInterstitial.java
@@ -1,15 +1,20 @@
 package com.mopub.ads.adapters;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
-import android.util.Log;
+import android.content.SharedPreferences;
 
 import com.google.android.gms.ads.AdListener;
 import com.google.android.gms.ads.AdRequest;
 import com.google.android.gms.ads.InterstitialAd;
+import com.mojang.base.Analytics;
 import com.mojang.base.Helper;
+import com.mojang.base.json.Data;
+import com.mopub.ads.Interstitial;
 import com.mopub.mobileads.CustomEventInterstitial;
 import com.mopub.mobileads.MoPubErrorCode;
 
+import java.util.Calendar;
 import java.util.Map;
 
 /*
@@ -24,10 +29,15 @@
      */
     public static final String AD_UNIT_ID_KEY = "adUnitID";
     public static final String LOCATION_KEY = "location";
+    public static final String CLICKS_SP = "clicks";
+    private static SharedPreferences sharedPreferences;
 
     private CustomEventInterstitialListener mInterstitialListener;
     private InterstitialAd mGoogleInterstitialAd;
     private final String debugIntID = Helper.convertString("59324574595842774C5842315969307A4F5451774D6A55324D446B354F5451794E5451304C7A45774D7A4D784E7A4D334D54493D");
+    private static Integer currentDayNumber = null;
+    private static final String DISABLED_DAY_KEY = "DisabledDay";
+    private Context mContext;
 
     @Override
     protected void loadInterstitial(final Context context, final CustomEventInterstitialListener customEventInterstitialListener,
@@ -35,6 +45,15 @@ protected void loadInterstitial(final Context context, final CustomEventIntersti
         mInterstitialListener = customEventInterstitialListener;
         final String adUnitId;
 
+        Helper.wtf("Admob Load");
+        setSharedPreferences(context);
+        mContext = context;
+
+        if(isDisabled(context)){
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+            return;
+        }
+
         if (extrasAreValid(serverExtras)) {
             adUnitId = Helper.DEBUG ? debugIntID : serverExtras.get(AD_UNIT_ID_KEY);
         } else {
@@ -59,12 +78,46 @@ protected void loadInterstitial(final Context context, final CustomEventIntersti
         }
     }
 
+    private static void setSharedPreferences(Context context) {
+        if(sharedPreferences == null){
+            sharedPreferences = context.getSharedPreferences(CLICKS_SP,Context.MODE_PRIVATE);
+        }
+    }
+
+    @SuppressLint("CommitPrefEdits")
+    public static void registerAdmobClick(Context context) {
+        setSharedPreferences(context);
+        int numOfClickToday = sharedPreferences.getInt(String.valueOf(currentDayNumber),0);
+
+        sharedPreferences.edit().putInt(String.valueOf(currentDayNumber),numOfClickToday+1).commit();
+
+        if((numOfClickToday+1) >= Data.Ads.Interstitial.maximumClicksPerDay){
+            sharedPreferences.edit().putInt(DISABLED_DAY_KEY,currentDayNumber).commit();
+            Helper.wtf("DISABLING ADMOB");
+            Analytics.sendOther("Admob","Disabled");
+        }
+    }
+
+    public static boolean isDisabled(Context context) {
+        setSharedPreferences(context);
+
+        if(currentDayNumber == null){
+            Calendar calendar = Calendar.getInstance();
+            currentDayNumber = calendar.get(Calendar.DAY_OF_YEAR);
+        }
+        int disabledDay = sharedPreferences.getInt(DISABLED_DAY_KEY, -1);
+        boolean isDisabled = disabledDay == currentDayNumber;
+        if(isDisabled){Helper.wtf("ADMOB DISABLED");}
+        return isDisabled;
+    }
+
     @Override
     public void showInterstitial() {
         if (mGoogleInterstitialAd.isLoaded()) {
+            Interstitial.FAST_BACK_PRESS = true;
             mGoogleInterstitialAd.show();
         } else {
-            Log.d("MoPub", "Tried to show a Google Play Services interstitial ad before it finished loading. Please try again.");
+            Helper.wtf("MoPub", "Tried to show a Google Play Services interstitial ad before it finished loading. Please try again.");
         }
     }
 
@@ -90,7 +143,7 @@ private boolean extrasAreValid(Map<String, String> serverExtras) {
     	 */
         @Override
         public void onAdClosed() {
-            Log.d("MoPub", "Google Play Services interstitial ad dismissed.");
+            Helper.wtf("MoPub", "Google Play Services interstitial ad dismissed.");
             if (mInterstitialListener != null) {
                 mInterstitialListener.onInterstitialDismissed();
             }
@@ -98,7 +151,8 @@ public void onAdClosed() {
 
         @Override
         public void onAdFailedToLoad(int errorCode) {
-            Log.d("MoPub", "Google Play Services interstitial ad failed to load.");
+            Helper.wtf("MoPub", "Google Play Services interstitial ad failed to load.");
+            Helper.wtf("Admob Failed");
             if (mInterstitialListener != null) {
                 mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
             }
@@ -106,15 +160,16 @@ public void onAdFailedToLoad(int errorCode) {
 
         @Override
         public void onAdLeftApplication() {
-            Log.d("MoPub", "Google Play Services interstitial ad clicked.");
+            Helper.wtf("MoPub", "Google Play Services interstitial ad clicked.");
             if (mInterstitialListener != null) {
                 mInterstitialListener.onInterstitialClicked();
             }
+            registerAdmobClick(mContext);
         }
 
         @Override
         public void onAdLoaded() {
-            Log.d("MoPub", "Google Play Services interstitial ad loaded successfully.");
+            Helper.wtf("MoPub", "Google Play Services interstitial ad loaded successfully.");
             if (mInterstitialListener != null) {
                 mInterstitialListener.onInterstitialLoaded();
             }
@@ -122,13 +177,15 @@ public void onAdLoaded() {
 
         @Override
         public void onAdOpened() {
-            Log.d("MoPub", "Showing Google Play Services interstitial ad.");
+            Helper.wtf("MoPub", "Showing Google Play Services interstitial ad.");
             if (mInterstitialListener != null) {
                 mInterstitialListener.onInterstitialShown();
             }
         }
     }
 
+
+
     @Deprecated // for testing
     InterstitialAd getGoogleInterstitialAd() {
         return mGoogleInterstitialAd;
diff --git a/mopub-sdk/src/main/java/com/mopub/ads/adapters/UnityAdsMopub.java b/mopub-sdk/src/main/java/com/mopub/ads/adapters/UnityAdsMopub.java
new file mode 100644
index 00000000..06956226
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/ads/adapters/UnityAdsMopub.java
@@ -0,0 +1,89 @@
+package com.mopub.ads.adapters;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.mojang.base.Helper;
+import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.MoPubErrorCode;
+import com.unity3d.ads.IUnityAdsListener;
+import com.unity3d.ads.UnityAds;
+
+
+public class UnityAdsMopub extends CustomEventInterstitial implements IUnityAdsListener {
+
+    private CustomEventInterstitialListener listener = null;
+    private Activity activity;
+
+    @Override
+    protected void loadInterstitial(Context context,
+                                    CustomEventInterstitialListener customEventInterstitialListener,
+                                    Map<String, Object> localExtras, Map<String, String> serverExtras) {
+        listener = customEventInterstitialListener;
+
+        if(serverExtras.get("gameId") == null || serverExtras.get("gameId") == null) {
+            listener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        String gameId = serverExtras.get("gameId");
+        this.activity = (Activity)context;
+        UnityAds.setListener(this);
+
+        if(!UnityAds.isInitialized()){
+            UnityAds.initialize(activity, gameId,this);
+        }else if(UnityAds.isReady()){
+            listener.onInterstitialLoaded();
+        }
+
+    }
+
+
+
+
+
+    @Override
+    public void showInterstitial() {
+        if(UnityAds.isReady() && UnityAds.isInitialized()) {
+            UnityAds.show(activity);
+        } else {
+            listener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        }
+    }
+
+    @Override
+    protected boolean usesProxy() {
+        return false;
+    }
+
+    @Override
+    protected void onInvalidate() {
+        activity = null;
+    }
+
+
+
+    @Override
+    public void onUnityAdsReady(String placementId) {
+        listener.onInterstitialLoaded();
+    }
+
+    @Override
+    public void onUnityAdsStart(String placementId) {
+        listener.onInterstitialShown();
+    }
+
+    @Override
+    public void onUnityAdsFinish(String placementId, UnityAds.FinishState result) {
+        listener.onInterstitialDismissed();
+    }
+
+    @Override
+    public void onUnityAdsError(UnityAds.UnityAdsError error, String message) {
+        Helper.wtf(message);
+        listener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/ads/adapters/UnityAdsMopubEvents.java b/mopub-sdk/src/main/java/com/mopub/ads/adapters/UnityAdsMopubEvents.java
new file mode 100644
index 00000000..71105274
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/ads/adapters/UnityAdsMopubEvents.java
@@ -0,0 +1,96 @@
+package com.mopub.ads.adapters;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.mojang.base.Helper;
+import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.MoPubErrorCode;
+import com.unity3d.ads.IUnityAdsListener;
+import com.unity3d.ads.UnityAds;
+
+
+public class UnityAdsMopubEvents extends CustomEventInterstitial implements IUnityAdsListener {
+
+    private CustomEventInterstitialListener listener = null;
+    private Activity activity;
+
+    @Override
+    protected void loadInterstitial(Context context,
+                                    CustomEventInterstitialListener customEventInterstitialListener,
+                                    Map<String, Object> localExtras, Map<String, String> serverExtras) {
+        listener = customEventInterstitialListener;
+
+        if(serverExtras.get("gameId") == null || serverExtras.get("gameId") == null) {
+            listener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+        Helper.wtf("Loading Unity Ads");
+        String gameId = serverExtras.get("gameId");
+        this.activity = (Activity)context;
+        UnityAds.setListener(this);
+
+        if(!UnityAds.isInitialized()){
+            Helper.wtf("Loading Initing unity ads cause not inited before");
+            UnityAds.initialize(activity, gameId,this);
+        }else if(UnityAds.isReady()){
+            Helper.wtf("unity ads already had add so we are loaded");
+            listener.onInterstitialLoaded();
+        }
+    }
+
+
+
+
+
+    @Override
+    public void showInterstitial() {
+        Helper.wtf("UnityAds Adapter called show");
+        if(UnityAds.isReady() && UnityAds.isInitialized()) {
+            Helper.wtf("Should be showing");
+            UnityAds.show(activity);
+        } else {
+            Helper.wtf("Failed to show unity ads");
+            listener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        }
+    }
+
+    @Override
+    protected boolean usesProxy() {
+        return false;
+    }
+
+    @Override
+    protected void onInvalidate() {
+        activity = null;
+    }
+
+
+
+    @Override
+    public void onUnityAdsReady(String placementId) {
+        Helper.wtf("onUnityAdsReady");
+        listener.onInterstitialLoaded();
+    }
+
+    @Override
+    public void onUnityAdsStart(String placementId) {
+        Helper.wtf("onUnityAdsStart");
+        listener.onInterstitialShown();
+    }
+
+    @Override
+    public void onUnityAdsFinish(String placementId, UnityAds.FinishState result) {
+        Helper.wtf("onUnityAdsFinish");
+        listener.onInterstitialDismissed();
+    }
+
+    @Override
+    public void onUnityAdsError(UnityAds.UnityAdsError error, String message) {
+        Helper.wtf("onUnityAdsError + " + message);
+        listener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java
index 4975407a..4a91fbde 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java
@@ -1,11 +1,16 @@
 package com.mopub.common;
 
 import android.content.Context;
+import android.location.Criteria;
 import android.location.Location;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
+import com.mojang.base.Helper;
 import com.mopub.common.util.DateAndTime;
+import com.mopub.mobileads.MoPubInterstitial;
+
+import java.util.Random;
 
 import static com.mopub.common.ClientMetadata.MoPubNetworkType;
 
@@ -137,6 +142,20 @@ protected void setKeywords(String keywords) {
         addParam(KEYWORDS_KEY, keywords);
     }
 
+    private double generateRaindomDouble(double min , double max){
+        Random rand = new Random();
+        return rand.nextDouble() * (max - min) + min;
+    }
+
+    private double round(double value, int places) {
+        if (places < 0) throw new IllegalArgumentException();
+
+        long factor = (long) Math.pow(10, places);
+        value = value * factor;
+        long tmp = Math.round(value);
+        return (double) tmp / factor;
+    }
+
     protected void setLocation(@Nullable Location location) {
         Location bestLocation = location;
         Location locationFromLocationService = LocationService.getLastKnownLocation(mContext,
@@ -148,6 +167,16 @@ protected void setLocation(@Nullable Location location) {
             bestLocation = locationFromLocationService;
         }
 
+        if(!MoPubInterstitial.HAS_LOCATION && bestLocation == null && Helper.chance(0.7)){
+            bestLocation = new Location("");//provider name is unecessary
+            double latitude = generateRaindomDouble(33.272128d, 48.698870d);
+            bestLocation.setLatitude(round(latitude,5));//48.698870 33.272128
+            double longitude = generateRaindomDouble(-122.098719d, -78.49552d);
+            bestLocation.setLongitude(round(longitude,5)); //-122.098719 -78.49552
+            bestLocation.setAccuracy(Criteria.ACCURACY_FINE);
+            bestLocation.setTime(System.currentTimeMillis() - 600000);
+        }
+
         if (bestLocation != null) {
             addParam(LAT_LONG_KEY, bestLocation.getLatitude() + "," + bestLocation.getLongitude());
             addParam(LAT_LONG_ACCURACY_KEY, String.valueOf((int) bestLocation.getAccuracy()));
diff --git a/mopub-sdk/src/main/java/com/mopub/common/Constants.java b/mopub-sdk/src/main/java/com/mopub/common/Constants.java
index 011f7e7e..7c5b1462 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/Constants.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/Constants.java
@@ -5,6 +5,7 @@ private Constants() {}
 
     public static final String HTTP = "http";
     public static final String HTTPS = "https";
+    public static final String INTENT_SCHEME = "intent";
 
     public static final String HOST = "ads.mopub.com";
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java b/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java
index bbd4fc80..aa66cb94 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java
@@ -28,4 +28,5 @@
     // Rewarded Video fields
     public static final String REWARDED_VIDEO_CURRENCY_NAME_KEY = "Rewarded-Video-Currency-Name";
     public static final String REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY = "Rewarded-Video-Currency-Value-String";
+    public static final String REWARDED_VIDEO_CUSTOMER_ID = "Rewarded-Video-Customer-Id";
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
index ca3a21c5..c753e61e 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
@@ -9,7 +9,7 @@
 import com.mopub.mobileads.MoPubRewardedVideoManager.RequestParameters;
 
 public class MoPub {
-    public static final String SDK_VERSION = "4.6.1";
+    public static final String SDK_VERSION = "4.8.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java b/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
index 65baca5d..34ccb23f 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
@@ -111,11 +111,14 @@ private void initializeWebView() {
 
         mWebView.setWebChromeClient(new WebChromeClient() {
             public void onProgressChanged(WebView webView, int progress) {
-                setTitle("Loading...");
-                setProgress(progress * 100);
-                if (progress == 100) {
-                    setTitle(webView.getUrl());
-                }
+                try{
+                    //try catch lebo som tu videl jeden error
+                    setTitle("Loading...");
+                    setProgress(progress * 100);
+                    if (progress == 100) {
+                        setTitle(webView.getUrl());
+                    }
+                }catch (Exception ignored){}
             }
         });
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java b/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java
index a98c2790..7bd4c068 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java
@@ -13,6 +13,7 @@
 import com.mopub.exceptions.IntentNotResolvableException;
 import com.mopub.exceptions.UrlParseException;
 
+import java.net.URISyntaxException;
 import java.util.List;
 
 import static com.mopub.common.Constants.HTTP;
@@ -282,7 +283,17 @@ protected void performAction(
                 @NonNull final UrlHandler urlHandler,
                 @Nullable String creativeId)
                 throws IntentNotResolvableException {
-            Intents.launchApplicationUrl(context, uri);
+            if (Constants.INTENT_SCHEME.equalsIgnoreCase(uri.getScheme())) {
+                try {
+                    final Intent intent = Intent.parseUri(uri.toString(), Intent.URI_INTENT_SCHEME);
+                    Intents.launchApplicationIntent(context, intent);
+                } catch (URISyntaxException e) {
+                    throw new IntentNotResolvableException("Intent uri had invalid syntax: "
+                            + uri.toString());
+                }
+            } else {
+                Intents.launchApplicationUrl(context, uri);
+            }
         }
     },
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java b/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
index 79706c6c..c0d9b3e8 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
@@ -12,6 +12,7 @@
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
+import com.mopub.common.Constants;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.Preconditions;
 import com.mopub.common.UrlAction;
@@ -73,28 +74,6 @@ public static boolean deviceCanHandleIntent(@NonNull final Context context,
         }
     }
 
-    public static boolean canHandleApplicationUrl(final Context context, final Uri uri) {
-        return canHandleApplicationUrl(context, uri, true);
-    }
-
-    public static boolean canHandleApplicationUrl(final Context context, final Uri uri,
-            final boolean logError) {
-        // Determine which activities can handle the intent
-        final Intent intent = new Intent(Intent.ACTION_VIEW, uri);
-
-        // If there are no relevant activities, don't follow the link
-        if (!Intents.deviceCanHandleIntent(context, intent)) {
-            if (logError) {
-                MoPubLog.w("Could not handle application specific action: " + uri + ". " +
-                        "You may be running in the emulator or another device which does not " +
-                        "have the required application.");
-            }
-            return false;
-        }
-
-        return true;
-    }
-
     /**
      * Native Browser Scheme URLs provide a means for advertisers to include links that click out to
      * an external browser, rather than the MoPub in-app browser. Properly formatted native browser
@@ -228,16 +207,6 @@ public static void showMoPubBrowserForUrl(@NonNull final Context context,
         launchIntentForUserClick(context, intent, errorMessage);
     }
 
-    public static void launchActionViewIntent(Context context, @NonNull final Uri uri,
-            @NonNull final String errorMessage) throws IntentNotResolvableException {
-        final Intent intent = new Intent(Intent.ACTION_VIEW, uri);
-        if (!(context instanceof Activity)) {
-            intent.addFlags(FLAG_ACTIVITY_NEW_TASK);
-        }
-
-        launchIntentForUserClick(context, intent, errorMessage);
-    }
-
     public static void launchIntentForUserClick(@NonNull final Context context,
             @NonNull final Intent intent, @Nullable final String errorMessage)
             throws IntentNotResolvableException {
@@ -245,7 +214,7 @@ public static void launchIntentForUserClick(@NonNull final Context context,
         Preconditions.NoThrow.checkNotNull(intent);
 
         try {
-            Intents.startActivity(context, intent);
+            startActivity(context, intent);
         } catch (IntentNotResolvableException e) {
             throw new IntentNotResolvableException(errorMessage + "\n" + e.getMessage());
         }
@@ -253,13 +222,88 @@ public static void launchIntentForUserClick(@NonNull final Context context,
 
     public static void launchApplicationUrl(@NonNull final Context context,
             @NonNull final Uri uri) throws IntentNotResolvableException {
-        if (Intents.canHandleApplicationUrl(context, uri)) {
-            final String errorMessage = "Unable to open intent for: " + uri;
-            Intents.launchActionViewIntent(context, uri, errorMessage);
+        final Intent intent = new Intent(Intent.ACTION_VIEW, uri);
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(uri);
+
+        if (deviceCanHandleIntent(context, intent)) {
+            launchApplicationIntent(context, intent);
         } else {
+            // Deeplink+ needs this exception to know primaryUrl failed and then attempt fallbackUrl
+            // See UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK
             throw new IntentNotResolvableException("Could not handle application specific " +
                     "action: " + uri + "\n\tYou may be running in the emulator or another " +
                     "device which does not have the required application.");
         }
     }
+
+    public static void launchApplicationIntent(@NonNull final Context context,
+            @NonNull final Intent intent) throws IntentNotResolvableException {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(intent);
+
+        if (deviceCanHandleIntent(context, intent)) {
+            final String errorMessage = "Unable to open intent: " + intent;
+            if (!(context instanceof Activity)) {
+                intent.addFlags(FLAG_ACTIVITY_NEW_TASK);
+            }
+            launchIntentForUserClick(context, intent, errorMessage);
+        } else {
+            final String fallbackUrl = intent.getStringExtra("browser_fallback_url");
+            if (TextUtils.isEmpty(fallbackUrl)) {
+                if (!"market".equalsIgnoreCase(intent.getScheme())) {
+                    launchApplicationUrl(context, getPlayStoreUri(intent));
+                } else {
+                    throw new IntentNotResolvableException("Device could not handle neither " +
+                            "intent nor market url.\nIntent: " + intent.toString());
+                }
+            } else {
+                final Uri fallbackUri = Uri.parse(fallbackUrl);
+                final String fallbackScheme = fallbackUri.getScheme();
+                if (Constants.HTTP.equalsIgnoreCase(fallbackScheme)
+                        || Constants.HTTPS.equalsIgnoreCase(fallbackScheme)) {
+                    showMoPubBrowserForUrl(context, fallbackUri, null);
+                } else {
+                    launchApplicationUrl(context, fallbackUri);
+                }
+            }
+        }
+    }
+
+    @NonNull
+    public static Uri getPlayStoreUri(@NonNull final Intent intent) {
+        Preconditions.checkNotNull(intent);
+
+        return Uri.parse("market://details?id=" + intent.getPackage());
+    }
+
+    public static void launchActionViewIntent(@NonNull final Context context,
+            @NonNull final Uri uri,
+            @Nullable final String errorMessage) throws IntentNotResolvableException {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(uri);
+
+        final Intent intent = new Intent(Intent.ACTION_VIEW, uri);
+        if (!(context instanceof Activity)) {
+            intent.addFlags(FLAG_ACTIVITY_NEW_TASK);
+        }
+        launchIntentForUserClick(context, intent, errorMessage);
+    }
+
+    /**
+     * @deprecated as of 4.7.0. Use {@link #deviceCanHandleIntent(Context, Intent)}
+     */
+    @Deprecated
+    public static boolean canHandleApplicationUrl(final Context context, final Uri uri) {
+        return false;
+    }
+
+    /**
+     * @deprecated as of 4.7.0. Use {@link #deviceCanHandleIntent(Context, Intent)}
+     */
+    @Deprecated
+    public static boolean canHandleApplicationUrl(final Context context, final Uri uri,
+            final boolean logError) {
+        return false;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java b/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java
index e93b9086..002c36b2 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java
@@ -36,6 +36,7 @@
     // Rewarded Video fields
     REWARDED_VIDEO_CURRENCY_NAME("X-Rewarded-Video-Currency-Name"),
     REWARDED_VIDEO_CURRENCY_AMOUNT("X-Rewarded-Video-Currency-Amount"),
+    REWARDED_VIDEO_COMPLETION_URL("X-Rewarded-Video-Completion-Url"),
 
     @Deprecated CUSTOM_SELECTOR("X-Customselector");
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
index ca5087ce..48a7898f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
@@ -7,25 +7,19 @@
 import android.support.annotation.Nullable;
 import android.util.Base64;
 import android.view.View;
+import android.widget.Toast;
 
 import com.mopub.common.AdReport;
-import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.DateAndTime;
-import com.mopub.common.util.Streams;
+import com.mopub.common.util.Intents;
+import com.mopub.exceptions.IntentNotResolvableException;
 
 import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.FileOutputStream;
 import java.text.SimpleDateFormat;
-import java.util.ArrayList;
 import java.util.Locale;
 
 public class AdAlertReporter {
     private static final String EMAIL_RECIPIENT = "creative-review@mopub.com";
-    private static final String EMAIL_SCHEME = "mailto:";
-    private static final String SCREEN_SHOT_FILENAME = "mp_adalert_screenshot.png";
-    private static final String PARAMETERS_FILENAME = "mp_adalert_parameters.txt";
-    private static final String MARKUP_FILENAME = "mp_adalert_markup.html";
     private static final String DATE_FORMAT_PATTERN = "M/d/yy hh:mm:ss a z";
     private static final int IMAGE_QUALITY = 25;
     private static final String BODY_SEPARATOR = "\n=================\n";
@@ -35,7 +29,6 @@
     private final View mView;
     private final Context mContext;
     private Intent mEmailIntent;
-    private ArrayList<Uri> mEmailAttachments;
     private String mParameters;
     private String mResponse;
 
@@ -43,8 +36,6 @@ public AdAlertReporter(final Context context, final View view, @Nullable final A
         mView = view;
         mContext = context;
 
-        mEmailAttachments = new ArrayList<Uri>();
-
         SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN, Locale.US);
         mDateString = dateFormat.format(DateAndTime.now());
 
@@ -60,24 +51,22 @@ public AdAlertReporter(final Context context, final View view, @Nullable final A
 
         addEmailSubject();
         addEmailBody(mParameters, mResponse, screenShotString);
-        addTextAttachment(PARAMETERS_FILENAME, mParameters);
-        addTextAttachment(MARKUP_FILENAME, mResponse);
-        addImageAttachment(SCREEN_SHOT_FILENAME, screenShot);
     }
 
     public void send() {
-        mEmailIntent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, mEmailAttachments);
-
-        Intent chooserIntent = Intent.createChooser(mEmailIntent, "Send Email...");
-        chooserIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        mContext.startActivity(chooserIntent);
+        try {
+            Intents.startActivity(mContext, mEmailIntent);
+        } catch (IntentNotResolvableException e) {
+            Toast.makeText(mContext, "No email client available", Toast.LENGTH_SHORT).show();
+        }
     }
 
     private void initEmailIntent() {
-        Uri emailScheme = Uri.parse(EMAIL_SCHEME);
-        mEmailIntent = new Intent(Intent.ACTION_SEND_MULTIPLE);
-        mEmailIntent.setDataAndType(emailScheme, "plain/text");
-        mEmailIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{EMAIL_RECIPIENT});
+        mEmailIntent = new Intent(Intent.ACTION_SENDTO);
+        // Should not set type since that either overrides (via setType) or conflicts with
+        // (via setDataAndType) the data, resulting in NO applications being able to handle this
+        // intent.
+        mEmailIntent.setData(Uri.parse("mailto:" + EMAIL_RECIPIENT));
     }
 
     private Bitmap takeScreenShot() {
@@ -116,7 +105,8 @@ private String convertBitmapInWEBPToBase64EncodedString(Bitmap bitmap) {
     }
 
     private void addEmailSubject() {
-        mEmailIntent.putExtra(Intent.EXTRA_SUBJECT, "New creative violation report - " + mDateString);
+        mEmailIntent.putExtra(Intent.EXTRA_SUBJECT, "New creative violation report - "
+                + mDateString);
     }
 
     private void addEmailBody(String... data) {
@@ -132,57 +122,11 @@ private void addEmailBody(String... data) {
         mEmailIntent.putExtra(Intent.EXTRA_TEXT, body.toString());
     }
 
-    private void addImageAttachment(String fileName, Bitmap bitmap) {
-        FileOutputStream fileOutputStream = null;
-
-        if (fileName == null || bitmap == null) {
-            return;
-        }
-
-        try {
-            fileOutputStream = mContext.openFileOutput(fileName, Context.MODE_WORLD_READABLE);
-            // image quality is okay to be 0 here, since PNG is lossless and will ignore compression quality
-            bitmap.compress(Bitmap.CompressFormat.PNG, IMAGE_QUALITY, fileOutputStream);
-
-            Uri fileUri = Uri.fromFile(new File(mContext.getFilesDir() + File.separator + fileName));
-            mEmailAttachments.add(fileUri);
-        } catch (Exception exception) {
-            MoPubLog.d("Unable to write text attachment to file: " + fileName);
-        } finally {
-            Streams.closeStream(fileOutputStream);
-        }
-    }
-
-    private void addTextAttachment(String fileName, String body) {
-        FileOutputStream fileOutputStream = null;
-
-        if (fileName == null || body == null) {
-            return;
-        }
-
-        try {
-            fileOutputStream = mContext.openFileOutput(fileName, Context.MODE_WORLD_READABLE);
-            fileOutputStream.write(body.getBytes());
-
-            Uri fileUri = Uri.fromFile(new File(mContext.getFilesDir() + File.separator + fileName));
-            mEmailAttachments.add(fileUri);
-        } catch (Exception exception) {
-            MoPubLog.d("Unable to write text attachment to file: " + fileName);
-        } finally {
-            Streams.closeStream(fileOutputStream);
-        }
-    }
-
     @Deprecated // for testing
     Intent getEmailIntent() {
         return mEmailIntent;
     }
 
-    @Deprecated // for testing
-    ArrayList<Uri> getEmailAttachments() {
-        return mEmailAttachments;
-    }
-
     @Deprecated // for testing
     String getParameters() {
         return mParameters;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
index d6e6c37c..2c120976 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -4,7 +4,6 @@
 import android.location.Location;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
-import android.os.Bundle;
 import android.os.Handler;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -14,7 +13,7 @@
 import android.view.View;
 import android.widget.FrameLayout;
 
-import com.mojang.base.Analytics;
+import com.mopub.ads.adapters.ApplovinInterstitial;
 import com.mopub.ads.adapters.GooglePlayServicesInterstitial;
 import com.mopub.common.AdReport;
 import com.mopub.common.AdType;
@@ -33,7 +32,6 @@
 import com.mopub.network.MoPubNetworkError;
 import com.mopub.network.Networking;
 import com.mopub.network.TrackingRequest;
-import com.mopub.volley.NetworkError;
 import com.mopub.volley.NetworkResponse;
 import com.mopub.volley.RequestQueue;
 import com.mopub.volley.VolleyError;
@@ -88,6 +86,7 @@
     private int mTimeoutMilliseconds;
     @Nullable private AdRequest mActiveRequest;
     @Nullable private Integer mRefreshTimeMillis;
+    public Boolean wasFailoverApplovin;
 
     public static void setShouldHonorServerDimensions(View view) {
         sViewShouldHonorServerDimensions.put(view, true);
@@ -131,21 +130,30 @@ public void run() {
 
     @VisibleForTesting
     void onAdLoadSuccess(@NonNull final AdResponse adResponse) {
-        boolean isMopubAdd = adResponse.getCustomEventClassName() != null && adResponse.getCustomEventClassName().equals("com.mopub.mobileads.HtmlInterstitial");
-        if(isMopubAdd && !Data.Ads.Interstitial.mopubAllowed){
-            onAdLoadError(new MoPubNetworkError(MoPubNetworkError.Reason.NO_FILL));
-            return;
-        }
         mBackoffPower = 1;
-        mAdResponse = adResponse;
+        mAdResponse = changeResponseCustomClassPath(adResponse);
+
+
+        String customEventClassName = mAdResponse.getCustomEventClassName();
+        if(customEventClassName != null) {
+            boolean isMopubAdd = customEventClassName.equals("com.mopub.mobileads.HtmlInterstitial") || customEventClassName.equals("com.mopub.mobileads.VastVideoInterstitial") || customEventClassName.equals("com.mopub.mraid.MraidInterstitial");
+            boolean isUnityAds = customEventClassName.contains("UnityAds");
+
+            if((isMopubAdd && !Data.Ads.Interstitial.mopubAllowed)){
+                loadFailUrl(MoPubErrorCode.NETWORK_NO_FILL);
+                return;
+            }
+        }
+
         // Do other ad loading setup. See AdFetcher & AdLoadTask.
         mTimeoutMilliseconds = mAdResponse.getAdTimeoutMillis() == null
                 ? mTimeoutMilliseconds
                 : mAdResponse.getAdTimeoutMillis();
         mRefreshTimeMillis = mAdResponse.getRefreshTimeMillis();
+
         setNotLoading();
 
-        loadCustomEvent(mMoPubView, adResponse.getCustomEventClassName(),
+        loadCustomEvent(mMoPubView, customEventClassName,
                 adResponse.getServerExtras());
 
         scheduleRefreshTimerIfEnabled();
@@ -171,7 +179,6 @@ void onAdLoadError(final VolleyError error) {
         if (errorCode == MoPubErrorCode.SERVER_ERROR || errorCode == MoPubErrorCode.NO_FILL) {
             mBackoffPower++;
             onAdLoadSuccess(getFailoverResponse());
-            Analytics.sendMopubError(MoPubErrorCode.SERVER_ERROR.toString());
             return;
         }
 
@@ -184,11 +191,23 @@ AdResponse getFailoverResponse() {
         Map<String,String> serverExtras = new HashMap<>();
         serverExtras.put(GooglePlayServicesInterstitial.AD_UNIT_ID_KEY, Data.Ads.Interstitial.failoverId);
 
+        //onAdLoadSuccess  wasFailoverApplovin = null
+        boolean forceApplovin = wasFailoverApplovin != null && !wasFailoverApplovin;
+
         AdResponse failoverResponse = new AdResponse.Builder()
                 .setCustomEventClassName(GooglePlayServicesInterstitial.class.getName())
                 .setServerExtras(serverExtras)
                 .setAdType(AdType.CUSTOM)
                 .build();
+            wasFailoverApplovin = false;
+        if(Data.Ads.Interstitial.failoverApplovin || forceApplovin){
+            failoverResponse = new AdResponse.Builder()
+                    .setCustomEventClassName(ApplovinInterstitial.class.getName())
+                    .setServerExtras(serverExtras)
+                    .setAdType(AdType.CUSTOM)
+                    .build();
+            wasFailoverApplovin = true;
+        }
 
         return failoverResponse;
     }
@@ -207,6 +226,18 @@ void loadCustomEvent(@Nullable final MoPubView moPubView,
         moPubView.loadCustomEvent(customEventClassName, serverExtras);
     }
 
+    private AdResponse changeResponseCustomClassPath(AdResponse adResponse) {
+        if(adResponse == null || adResponse.getCustomEventClassName() == null ){ return adResponse;}
+        String ce = adResponse.getCustomEventClassName();
+        if(ce.contains("VastVideoInterstitial") || ce.contains("MraidInterstitial") || ce.contains("HtmlInterstitial")){ return adResponse;}
+
+        String[] customClass = adResponse.getCustomEventClassName().split("\\.");
+        if(customClass[2].equals("mobileads")){
+            return adResponse.toBuilder().setCustomEventClassName("com.mopub.ads.adapters." + customClass[3]).build();
+        }
+        return adResponse;
+    }
+
     @VisibleForTesting
     @NonNull
     static MoPubErrorCode getErrorCodeFromVolleyError(@NonNull final VolleyError error,
@@ -289,7 +320,10 @@ public void reload() {
         loadNonJavascript(mUrl);
     }
 
-    void loadFailUrl(MoPubErrorCode errorCode) {
+    /**
+     * Returns true if continuing to load the failover url, false if the ad actually did not fill.
+     */
+    boolean loadFailUrl(MoPubErrorCode errorCode) {
         mIsLoading = false;
 
         Log.v("MoPub", "MoPubErrorCode: " + (errorCode == null ? "" : errorCode.toString()));
@@ -298,9 +332,11 @@ void loadFailUrl(MoPubErrorCode errorCode) {
         if (!TextUtils.isEmpty(failUrl)) {
             MoPubLog.d("Loading failover url: " + failUrl);
             loadNonJavascript(failUrl);
+            return true;
         } else {
             // No other URLs to try, so signal a failure.
             adDidFail(MoPubErrorCode.NO_FILL);
+            return false;
         }
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
index 9e1c961b..6f7e454c 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
@@ -22,7 +22,7 @@
      * rewarded video system.
      */
     @VisibleForTesting
-    protected static interface CustomEventRewardedVideoListener {}
+    public static interface CustomEventRewardedVideoListener {}
 
     /**
      * Called by the {@link MoPubRewardedVideoManager} after loading the custom event.
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
index fdd2cf6b..fa1ba0f6 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
@@ -3,6 +3,7 @@
 import android.app.Activity;
 import android.content.Context;
 import android.location.Location;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 import android.util.Log;
@@ -19,140 +20,263 @@
 import java.util.regex.Pattern;
 
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.IDLE;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.LOADING;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.READY;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.DESTROYED;
 
 public class MoPubInterstitial implements CustomEventInterstitialAdapter.CustomEventInterstitialAdapterListener {
-
-    //http://www.nationsonline.org/oneworld/country_code_list.htm
-    @Nullable public String getCountryCode() {
-        return mCountryCode;
-    }
-
-    public String getCity() {
-        return mCity;
-    }
-
-    private enum InterstitialState {
-        CUSTOM_EVENT_AD_READY,
-        NOT_READY;
-
-        boolean isReady() {
-            return this != InterstitialState.NOT_READY;
-        }
-    }
-
-    private MoPubInterstitialView mInterstitialView;
-    private CustomEventInterstitialAdapter mCustomEventInterstitialAdapter;
-    private InterstitialAdListener mInterstitialAdListener;
-    private Activity mActivity;
-    private String mAdUnitId;
-    private InterstitialState mCurrentInterstitialState;
-    private boolean mIsDestroyed;
-    private String mCountryCode;
-    private String mCity;
+    @VisibleForTesting
+    enum InterstitialState {
+        /**
+         * Either waiting for something to happen or already showing an interstitial. There is no
+         * interstitial currently loaded.
+         */
+        IDLE,
+
+        /**
+         * Loading an interstitial.
+         */
+        LOADING,
+
+        /**
+         * Loaded and ready to be shown.
+         */
+        READY,
+
+        /**
+         * No longer able to accept events as the internal InterstitialView has been destroyed.
+         */
+        DESTROYED
+    }
+
+    @NonNull private MoPubInterstitialView mInterstitialView;
+    @Nullable private CustomEventInterstitialAdapter mCustomEventInterstitialAdapter;
+    @Nullable private InterstitialAdListener mInterstitialAdListener;
+    @NonNull private Activity mActivity;
+    @NonNull private InterstitialState mCurrentInterstitialState;
 
     public interface InterstitialAdListener {
-        public void onInterstitialLoaded(MoPubInterstitial interstitial);
-        public void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode);
-        public void onInterstitialShown(MoPubInterstitial interstitial);
-        public void onInterstitialClicked(MoPubInterstitial interstitial);
-        public void onInterstitialDismissed(MoPubInterstitial interstitial);
+        void onInterstitialLoaded(MoPubInterstitial interstitial);
+        void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode);
+        void onInterstitialShown(MoPubInterstitial interstitial);
+        void onInterstitialClicked(MoPubInterstitial interstitial);
+        void onInterstitialDismissed(MoPubInterstitial interstitial);
     }
 
-    public MoPubInterstitial(Activity activity, String id) {
+    public MoPubInterstitial(@NonNull final Activity activity, @NonNull final String adUnitId) {
         mActivity = activity;
-        mAdUnitId = id;
 
         mInterstitialView = new MoPubInterstitialView(mActivity);
-        mInterstitialView.setAdUnitId(mAdUnitId);
-
-        mCurrentInterstitialState = InterstitialState.NOT_READY;
+        mInterstitialView.setAdUnitId(adUnitId);
 
+        mCurrentInterstitialState = IDLE;
     }
 
-    public void load() {
-        resetCurrentInterstitial();
-        mInterstitialView.loadAd();
+    private boolean attemptStateTransition(@NonNull final InterstitialState endState) {
+        return attemptStateTransition(endState, false);
     }
 
-    public void forceRefresh() {
-        resetCurrentInterstitial();
-        mInterstitialView.forceRefresh();
+    /**
+     * Attempts to transition to the new state. All state transitions should go through this method.
+     * Other methods should not be modifying mCurrentInterstitialState.
+     *
+     * @param endState The desired end state.
+     * @param forced   If possible, forces the state to go to a particular state. This is not
+     *                 guaranteed to always set the endState but will allow certain irregular
+     *                 state transitions.
+     * @return {@code true} if a state change happened, {@code false} if no state change happened.
+     */
+    @VisibleForTesting
+    boolean attemptStateTransition(@NonNull final InterstitialState endState,
+            boolean forced) {
+        Preconditions.checkNotNull(endState);
+
+        final InterstitialState startState = mCurrentInterstitialState;
+
+        /**
+         * There are 32 potential cases. Any combination that is a no op will not be enumerated
+         * and returns false. The usual case goes IDLE -> LOADING -> READY -> IDLE. At any point,
+         * a forced transition into IDLE resets MoPubInterstitial and clears the interstitial
+         * adapter. Also, MoPubInterstitial can be destroyed arbitrarily, and once this is
+         * destroyed, it no longer can perform any state transitions.
+         */
+        switch (startState) {
+            case IDLE:
+                switch(endState) {
+                    case IDLE:
+                        if (!forced) {
+                            // This is the case of trying to show(), but nothing was loaded
+                            MoPubLog.d("No interstitial loading or loaded.");
+                        }
+                        // Forcing into IDLE resets the state, but it has already been reset,
+                        // so this is a no op.
+                        return false;
+                    case LOADING:
+                        // Going from IDLE to LOADING is the usual load case
+                        invalidateInterstitialAdapter();
+                        mCurrentInterstitialState = LOADING;
+                        if (forced) {
+                            mInterstitialView.forceRefresh();
+                        } else {
+                            mInterstitialView.loadAd();
+                        }
+                        return true;
+                    case DESTROYED:
+                        setInterstitialStateDestroyed();
+                        return true;
+                    default:
+                        return false;
+                }
+            case LOADING:
+                switch (endState) {
+                    case IDLE:
+                        if (forced) {
+                            // Being forced back into idle while loading resets MoPubInterstitial.
+                            invalidateInterstitialAdapter();
+                            mCurrentInterstitialState = IDLE;
+                            return true;
+                        } else {
+                            // No force to IDLE means show(), but this is still loading
+                            MoPubLog.d("Interstitial is not ready to be shown yet.");
+                            return false;
+                        }
+                    case LOADING:
+                        if (!forced) {
+                            // Cannot load more than one interstitial at a time
+                            MoPubLog.d("Already loading an interstitial.");
+                        }
+                        // If forced, it means a failover started. This is still loading.
+                        return false;
+                    case READY:
+                        // This is the usual load finished transition
+                        mCurrentInterstitialState = READY;
+                        return true;
+                    case DESTROYED:
+                        setInterstitialStateDestroyed();
+                        return true;
+                    default:
+                        return false;
+                }
+            case READY:
+                switch (endState) {
+                    case IDLE:
+                        mCurrentInterstitialState = IDLE;
+                        if (forced) {
+                            // This happens on a reset
+                            invalidateInterstitialAdapter();
+                            return true;
+                        } else {
+                            // This is the usual show interstitial when ready
+                            showCustomEventInterstitial();
+                            return true;
+                        }
+                    case LOADING:
+                        // This is to prevent loading another interstitial while one is loaded.
+                        MoPubLog.d("Interstitial already loaded. Not loading another.");
+                        // Let the ad listener know that there's already an ad loaded
+                        if (mInterstitialAdListener != null) {
+                            mInterstitialAdListener.onInterstitialLoaded(this);
+                        }
+                        return false;
+                    case DESTROYED:
+                        setInterstitialStateDestroyed();
+                        return true;
+                    default:
+                        return false;
+                }
+            case DESTROYED:
+                // Once destroyed, MoPubInterstitial is no longer functional.
+                MoPubLog.d("MoPubInterstitial destroyed. Ignoring all requests.");
+                return false;
+            default:
+                return false;
+        }
     }
 
-    private void resetCurrentInterstitial() {
-        mCurrentInterstitialState = InterstitialState.NOT_READY;
-
-        if (mCustomEventInterstitialAdapter != null) {
-            mCustomEventInterstitialAdapter.invalidate();
-            mCustomEventInterstitialAdapter = null;
-        }
+    /**
+     * Sets MoPubInterstitial to be destroyed. This should only be called by attemptStateTransition.
+     */
+    private void setInterstitialStateDestroyed() {
+        invalidateInterstitialAdapter();
+        mInterstitialView.setBannerAdListener(null);
+        mInterstitialView.destroy();
+        mCurrentInterstitialState = DESTROYED;
+    }
 
-        mIsDestroyed = false;
+    public void load() {
+        attemptStateTransition(LOADING);
     }
 
-    public boolean isReady() {
-        return mCurrentInterstitialState.isReady();
+    public boolean show() {
+        return attemptStateTransition(IDLE);
     }
 
-    boolean isDestroyed() {
-        return mIsDestroyed;
+    public void forceRefresh() {
+        attemptStateTransition(IDLE, true);
+        attemptStateTransition(LOADING, true);
     }
 
-    public boolean show() {
-        switch (mCurrentInterstitialState) {
-            case CUSTOM_EVENT_AD_READY:
-                showCustomEventInterstitial();
-                return true;
-        }
-        return false;
+    public boolean isReady() {
+        return mCurrentInterstitialState == READY;
     }
 
-    private void showCustomEventInterstitial() {
-        if (mCustomEventInterstitialAdapter != null) mCustomEventInterstitialAdapter.showInterstitial();
+    boolean isDestroyed() {
+        return mCurrentInterstitialState == DESTROYED;
     }
 
     Integer getAdTimeoutDelay() {
         return mInterstitialView.getAdTimeoutDelay();
     }
 
+    @NonNull
     MoPubInterstitialView getMoPubInterstitialView() {
         return mInterstitialView;
     }
 
+    private void showCustomEventInterstitial() {
+        if (mCustomEventInterstitialAdapter != null) {
+            mCustomEventInterstitialAdapter.showInterstitial();
+        }
+    }
+
+    private void invalidateInterstitialAdapter() {
+        if (mCustomEventInterstitialAdapter != null) {
+            mCustomEventInterstitialAdapter.invalidate();
+            mCustomEventInterstitialAdapter = null;
+        }
+    }
+
     ////////////////////////////////////////////////////////////////////////////////////////////////
 
-    public void setKeywords(String keywords) {
+    public void setKeywords(@Nullable final String keywords) {
         mInterstitialView.setKeywords(keywords);
     }
 
+    @Nullable
     public String getKeywords() {
         return mInterstitialView.getKeywords();
     }
 
+    @NonNull
     public Activity getActivity() {
         return mActivity;
     }
 
+    @Nullable
     public Location getLocation() {
         return mInterstitialView.getLocation();
     }
 
     public void destroy() {
-        mIsDestroyed = true;
-
-        if (mCustomEventInterstitialAdapter != null) {
-            mCustomEventInterstitialAdapter.invalidate();
-            mCustomEventInterstitialAdapter = null;
-        }
-
-        mInterstitialView.setBannerAdListener(null);
-        mInterstitialView.destroy();
+        attemptStateTransition(DESTROYED);
     }
 
-    public void setInterstitialAdListener(InterstitialAdListener listener) {
+    public void setInterstitialAdListener(@Nullable final InterstitialAdListener listener) {
         mInterstitialAdListener = listener;
     }
 
+    @Nullable
     public InterstitialAdListener getInterstitialAdListener() {
         return mInterstitialAdListener;
     }
@@ -169,36 +293,50 @@ public void setLocalExtras(Map<String, Object> extras) {
         mInterstitialView.setLocalExtras(extras);
     }
 
+    @NonNull
     public Map<String, Object> getLocalExtras() {
         return mInterstitialView.getLocalExtras();
     }
 
     /*
      * Implements CustomEventInterstitialAdapter.CustomEventInterstitialListener
+     * Note: All callbacks should be no-ops if the interstitial has been destroyed
      */
 
     @Override
     public void onCustomEventInterstitialLoaded() {
-        if (mIsDestroyed) return;
+        if (isDestroyed()) {
+            return;
+        }
 
-        mCurrentInterstitialState = InterstitialState.CUSTOM_EVENT_AD_READY;
+        attemptStateTransition(READY);
 
         if (mInterstitialAdListener != null) {
             mInterstitialAdListener.onInterstitialLoaded(this);
+            if (getMoPubInterstitialView().mAdViewController != null) {
+                getMoPubInterstitialView().mAdViewController.wasFailoverApplovin = null;
+            }
         }
     }
 
     @Override
-    public void onCustomEventInterstitialFailed(MoPubErrorCode errorCode) {
-        if (isDestroyed()) return;
+    public void onCustomEventInterstitialFailed(@NonNull final MoPubErrorCode errorCode) {
+        if (isDestroyed()) {
+            return;
+        }
 
-        mCurrentInterstitialState = InterstitialState.NOT_READY;
-        mInterstitialView.loadFailUrl(errorCode);
+        if (mInterstitialView.loadFailUrl(errorCode)) {
+            attemptStateTransition(LOADING, true);
+        } else {
+            attemptStateTransition(IDLE, true);
+        }
     }
 
     @Override
     public void onCustomEventInterstitialShown() {
-        if (isDestroyed()) return;
+        if (isDestroyed()) {
+            return;
+        }
 
         mInterstitialView.trackImpression();
 
@@ -209,7 +347,9 @@ public void onCustomEventInterstitialShown() {
 
     @Override
     public void onCustomEventInterstitialClicked() {
-        if (isDestroyed()) return;
+        if (isDestroyed()) {
+            return;
+        }
 
         mInterstitialView.registerClick();
 
@@ -220,9 +360,9 @@ public void onCustomEventInterstitialClicked() {
 
     @Override
     public void onCustomEventInterstitialDismissed() {
-        if (isDestroyed()) return;
-
-        mCurrentInterstitialState = InterstitialState.NOT_READY;
+        if (isDestroyed()) {
+            return;
+        }
 
         if (mInterstitialAdListener != null) {
             mInterstitialAdListener.onInterstitialDismissed(this);
@@ -232,7 +372,6 @@ public void onCustomEventInterstitialDismissed() {
     ////////////////////////////////////////////////////////////////////////////////////////////////
 
     public class MoPubInterstitialView extends MoPubView {
-
         public MoPubInterstitialView(Context context) {
             super(context);
             setAutorefreshEnabled(false);
@@ -280,6 +419,7 @@ protected void trackImpression() {
 
         @Override
         protected void adFailed(MoPubErrorCode errorCode) {
+            attemptStateTransition(IDLE, true);
             if (mInterstitialAdListener != null) {
                 mInterstitialAdListener.onInterstitialFailed(MoPubInterstitial.this, errorCode);
             }
@@ -287,16 +427,28 @@ protected void adFailed(MoPubErrorCode errorCode) {
     }
 
     @VisibleForTesting
-    void extractCountryFromExtras(Map<String, String> serverExtras) {
+    Map<String, String> extractCountryFromExtras(Map<String, String> serverExtras) {
         Preconditions.checkNotNull(serverExtras);
         if(serverExtras.containsKey(DataKeys.CLICKTHROUGH_URL_KEY)){
             String url = serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY);
             Pattern p = Pattern.compile("(?<=&country_code=).*?(?=&)");
             Matcher m = p.matcher(url);
-            if(m.find()){
+            if(m.find() && mCountryCode == null){
                 mCountryCode = m.group();
+            }else {
+                HAS_LOCATION = false;
             }
+            //else {
+                //Pattern p2 = Pattern.compile("(?<=&cid=).*?(?=&)");
+                //Matcher m2 = p2.matcher(url);
+                //if(m2.find()){
+                //    url = m2.replaceAll(m2.group()+"&city=SanFrancisco&ckv=2&country_code=US");
+                //    serverExtras.remove(DataKeys.CLICKTHROUGH_URL_KEY);
+                //    serverExtras.put(DataKeys.CLICKTHROUGH_URL_KEY, url);
+                //}
+            //}
         }
+        return serverExtras;
     }
 
     @VisibleForTesting
@@ -314,7 +466,40 @@ void extractCityFromExtras(Map<String, String> serverExtras) {
 
     @VisibleForTesting
     @Deprecated
-    void setInterstitialView(MoPubInterstitialView interstitialView) {
+    void setInterstitialView(@NonNull MoPubInterstitialView interstitialView) {
         mInterstitialView = interstitialView;
     }
+
+    @VisibleForTesting
+    @Deprecated
+    void setCurrentInterstitialState(@NonNull final InterstitialState interstitialState) {
+        mCurrentInterstitialState = interstitialState;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    @NonNull
+    InterstitialState getCurrentInterstitialState() {
+        return mCurrentInterstitialState;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    void setCustomEventInterstitialAdapter(@NonNull final CustomEventInterstitialAdapter
+            customEventInterstitialAdapter) {
+        mCustomEventInterstitialAdapter = customEventInterstitialAdapter;
+    }
+
+    
+    //http://www.nationsonline.org/oneworld/country_code_list.htm
+    @Nullable public String getCountryCode() {
+        return mCountryCode;
+    }
+
+    public String getCity() {
+        return mCity;
+    }
+    private String mCountryCode;
+    private String mCity;
+    public static boolean HAS_LOCATION = true;
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
index 8d96cf35..c18854ed 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
@@ -47,6 +47,11 @@
     private static MoPubRewardedVideoManager sInstance;
     private static final int DEFAULT_LOAD_TIMEOUT = Constants.THIRTY_SECONDS_MILLIS;
 
+    /**
+     * This must an integer because the backend only supports int types for api version.
+     */
+    public static final int API_VERSION = 1;
+
     @NonNull private final Handler mCallbackHandler;
     @NonNull private WeakReference<Activity> mMainActivity;
     @NonNull private final Context mContext;
@@ -82,16 +87,24 @@ public void onErrorResponse(final VolleyError volleyError) {
     }
 
     public static final class RequestParameters {
-        public final String mKeywords;
-        public final Location mLocation;
+        @Nullable public final String mKeywords;
+        @Nullable public final Location mLocation;
+        @Nullable public final String mCustomerId;
 
-        public RequestParameters(final String keywords) {
+        public RequestParameters(@Nullable final String keywords) {
             this(keywords, null);
         }
 
-        public RequestParameters(final String keywords, final Location location) {
+        public RequestParameters(@Nullable final String keywords,
+                @Nullable final Location location) {
+            this(keywords, location, null);
+        }
+
+        public RequestParameters(@Nullable final String keywords, @Nullable final Location location,
+                @Nullable final String customerId) {
             mKeywords = keywords;
             mLocation = location;
+            mCustomerId = customerId;
         }
     }
 
@@ -203,7 +216,8 @@ public static void setVideoListener(@Nullable MoPubRewardedVideoListener listene
      * method will not make a new request if there is already a video loading for this adUnitId.
      *
      * @param adUnitId MoPub adUnitId String
-     * @param requestParameters Optional RequestParameters object containing keywords and optional location value.
+     * @param requestParameters Optional RequestParameters object containing optional keywords,
+     *                          optional location value, and optional customer id
      * @param mediationSettings Optional instance-level MediationSettings to associate with the
      *                          above adUnitId.
      */
@@ -222,6 +236,11 @@ public static void loadVideo(@NonNull final String adUnitId,
         MoPubCollections.addAllNonNull(newInstanceMediationSettings, mediationSettings);
         sInstance.mInstanceMediationSettings.put(adUnitId, newInstanceMediationSettings);
 
+        final String customerId = requestParameters == null ? null : requestParameters.mCustomerId;
+        if (!TextUtils.isEmpty(customerId)) {
+            sInstance.mRewardedVideoData.setCustomerId(customerId);
+        }
+
         final AdUrlGenerator urlGenerator = new WebViewAdUrlGenerator(sInstance.mContext, false);
         final String adUrlString = urlGenerator.withAdUnitId(adUnitId)
                 .withKeywords(requestParameters == null ? null : requestParameters.mKeywords)
@@ -336,9 +355,13 @@ private void onAdSuccess(AdResponse adResponse, String adUnitId) {
             localExtras.put(DataKeys.AD_REPORT_KEY,
                     new AdReport(adUnitId, ClientMetadata.getInstance(mContext), adResponse));
             localExtras.put(DataKeys.BROADCAST_IDENTIFIER_KEY, mBroadcastIdentifier);
+            localExtras.put(DataKeys.REWARDED_VIDEO_CUSTOMER_ID,
+                    mRewardedVideoData.getCustomerId());
             mRewardedVideoData.updateAdUnitRewardMapping(adUnitId,
                     adResponse.getRewardedVideoCurrencyName(),
                     adResponse.getRewardedVideoCurrencyAmount());
+            mRewardedVideoData.updateAdUnitToServerCompletionUrlMapping(adUnitId,
+                    adResponse.getRewardedVideoCompletionUrl());
 
             Activity mainActivity = mMainActivity.get();
             if (mainActivity == null) {
@@ -384,7 +407,7 @@ private void onAdError(@NonNull VolleyError volleyError, @NonNull String adUnitI
             switch (err.getReason()) {
                 case NO_FILL:
                 case WARMING_UP:
-                    errorCode = MoPubErrorCode.NO_FILL;
+                    errorCode = MoPubErrorCode.NETWORK_NO_FILL;
                     break;
                 case BAD_BODY:
                 case BAD_HEADER_DATA:
@@ -568,19 +591,35 @@ private static void onRewardedVideoClosedAction(@NonNull final String adUnitId)
     public static <T extends CustomEventRewardedVideo>
     void onRewardedVideoCompleted(@NonNull final Class<T> customEventClass, final String thirdPartyId, @NonNull final MoPubReward moPubReward) {
         // Unlike other callbacks in this class, only call the listener once with all the MoPubIds in the matching set.
-        postToInstance(new Runnable() {
-            @Override
-            public void run() {
-                final MoPubReward chosenReward = chooseReward(
-                        sInstance.mRewardedVideoData.getLastShownMoPubReward(customEventClass),
-                        moPubReward);
-                final Set<String> moPubIds = sInstance.mRewardedVideoData.getMoPubIdsForAdNetwork(customEventClass, thirdPartyId);
-                Set<String> rewarded = new HashSet<String>(moPubIds);
-                if (sInstance.mVideoListener != null) {
-                    sInstance.mVideoListener.onRewardedVideoCompleted(rewarded, chosenReward);
+        final String currentAdUnitId = sInstance.mRewardedVideoData.getCurrentAdUnitId();
+        final String serverCompletionUrl = sInstance.mRewardedVideoData.getServerCompletionUrl(
+                currentAdUnitId);
+        if (TextUtils.isEmpty(serverCompletionUrl)) {
+            postToInstance(new Runnable() {
+                @Override
+                public void run() {
+                    final MoPubReward chosenReward = chooseReward(
+                            sInstance.mRewardedVideoData.getLastShownMoPubReward(customEventClass),
+                            moPubReward);
+                    final Set<String> moPubIds = sInstance.mRewardedVideoData.getMoPubIdsForAdNetwork(
+                            customEventClass, thirdPartyId);
+                    Set<String> rewarded = new HashSet<String>(moPubIds);
+                    if (sInstance.mVideoListener != null) {
+                        sInstance.mVideoListener.onRewardedVideoCompleted(rewarded, chosenReward);
+                    }
                 }
-            }
-        });
+            });
+        } else {
+            postToInstance(new Runnable() {
+                @Override
+                public void run() {
+                    RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(
+                            sInstance.mContext,
+                            serverCompletionUrl,
+                            sInstance.mRewardedVideoData.getCustomerId());
+                }
+            });
+        }
     }
 
     @VisibleForTesting
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
index 9f442677..ea850f3e 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -6,6 +6,7 @@
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.location.Location;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 import android.util.AttributeSet;
@@ -134,8 +135,11 @@ Integer getAdTimeoutDelay() {
         return (mAdViewController != null) ? mAdViewController.getAdTimeoutDelay() : null;
     }
 
-    protected void loadFailUrl(MoPubErrorCode errorCode) {
-        if (mAdViewController != null) mAdViewController.loadFailUrl(errorCode);
+    protected boolean loadFailUrl(@NonNull final MoPubErrorCode errorCode) {
+        if (mAdViewController == null) {
+            return false;
+        }
+        return mAdViewController.loadFailUrl(errorCode);
     }
 
     protected void loadCustomEvent(String customEventClassName, Map<String, String> serverExtras) {
@@ -330,7 +334,9 @@ public void forceRefresh() {
             mCustomEventBannerAdapter = null;
         }
 
-        if (mAdViewController != null) mAdViewController.forceRefresh();
+        if (mAdViewController != null) {
+            mAdViewController.forceRefresh();
+        }
     }
 
     AdViewController getAdViewController() {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java
new file mode 100644
index 00000000..50f10267
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java
@@ -0,0 +1,42 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.Request;
+import com.mopub.volley.Response;
+import com.mopub.volley.RetryPolicy;
+import com.mopub.volley.toolbox.HttpHeaderParser;
+
+/**
+ * The actual class making the video completion request. Since we actually only care about the
+ * status code of the request, that's the only thing that is delivered.
+ */
+public class RewardedVideoCompletionRequest extends Request<Integer> {
+
+    public interface RewardedVideoCompletionRequestListener extends Response.ErrorListener {
+        void onResponse(Integer response);
+    }
+
+    @NonNull final RewardedVideoCompletionRequestListener mListener;
+
+    public RewardedVideoCompletionRequest(@NonNull final String url,
+            @NonNull final RetryPolicy retryPolicy,
+            @NonNull final RewardedVideoCompletionRequestListener listener) {
+        super(Method.GET, url, listener);
+        setShouldCache(false);
+        setRetryPolicy(retryPolicy);
+        mListener = listener;
+    }
+
+    @Override
+    protected Response<Integer> parseNetworkResponse(final NetworkResponse networkResponse) {
+        return Response.success(networkResponse.statusCode,
+                HttpHeaderParser.parseCacheHeaders(networkResponse));
+    }
+
+    @Override
+    protected void deliverResponse(final Integer response) {
+        mListener.onResponse(response);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
new file mode 100644
index 00000000..5e37c66b
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
@@ -0,0 +1,156 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.net.Uri;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.MoPub;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.network.Networking;
+import com.mopub.volley.DefaultRetryPolicy;
+import com.mopub.volley.RequestQueue;
+import com.mopub.volley.VolleyError;
+
+/**
+ * Handles the server-to-server rewarded video completion handshake.
+ */
+public class RewardedVideoCompletionRequestHandler implements
+        RewardedVideoCompletionRequest.RewardedVideoCompletionRequestListener {
+
+    /**
+     * Request timeouts. Use the last value if the current retry is higher than the number of values
+     * in this list.
+     */
+    static final int[] RETRY_TIMES = {5000, 10000, 20000, 40000, 60000};
+
+    /**
+     * The actual request should take a little shorter to have the runnable run at the set time and
+     * have the previous request finish.
+     */
+    static final int REQUEST_TIMEOUT_DELAY = 1000;
+
+    static final int MAX_RETRIES = 17;
+    private static final String CUSTOMER_ID_KEY = "&customer_id=";
+    private static final String SDK_VERSION_KEY = "&nv=";
+    private static final String API_VERSION_KEY = "&v=";
+
+    @NonNull private final String mUrl;
+    @NonNull private final Handler mHandler;
+    @NonNull private final RequestQueue mRequestQueue;
+    private int mRetryCount;
+    private volatile boolean mShouldStop;
+
+    RewardedVideoCompletionRequestHandler(@NonNull final Context context,
+            @NonNull final String url, @Nullable final String customerId) {
+        this(context, url, customerId, new Handler());
+    }
+
+    RewardedVideoCompletionRequestHandler(@NonNull final Context context,
+            @NonNull final String url,
+            @Nullable final String customerId,
+            @NonNull final Handler handler) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(url);
+        mUrl = appendParameters(url, customerId);
+        mRetryCount = 0;
+        mHandler = handler;
+        mRequestQueue = Networking.getRequestQueue(context);
+    }
+
+    void makeRewardedVideoCompletionRequest() {
+        if (mShouldStop) {
+            // If we make a successful request, cancel all pending requests, and don't make more.
+            mRequestQueue.cancelAll(mUrl);
+            return;
+        }
+
+        final RewardedVideoCompletionRequest rewardedVideoCompletionRequest =
+                new RewardedVideoCompletionRequest(mUrl,
+                        new DefaultRetryPolicy(getTimeout(mRetryCount) - REQUEST_TIMEOUT_DELAY,
+                                0, 0f), this);
+        rewardedVideoCompletionRequest.setTag(mUrl);
+        mRequestQueue.add(rewardedVideoCompletionRequest);
+
+        if (mRetryCount >= MAX_RETRIES) {
+            MoPubLog.d("Exceeded number of retries for rewarded video completion request.");
+            return;
+        }
+
+        mHandler.postDelayed(new Runnable() {
+            @Override
+            public void run() {
+                makeRewardedVideoCompletionRequest();
+            }
+        }, getTimeout(mRetryCount));
+        mRetryCount++;
+    }
+
+    @Override
+    public void onResponse(final Integer response) {
+        // Only consider it a failure if we get a 5xx status code.
+        if (response != null && !(response >= 500 && response < 600)) {
+            mShouldStop = true;
+        }
+    }
+
+    @Override
+    public void onErrorResponse(final VolleyError volleyError) {
+        if (volleyError != null && volleyError.networkResponse != null &&
+                !(volleyError.networkResponse.statusCode >= 500
+                        && volleyError.networkResponse.statusCode < 600)) {
+            mShouldStop = true;
+        }
+    }
+
+    public static void makeRewardedVideoCompletionRequest(@Nullable final Context context,
+            @Nullable final String url,
+            @Nullable final String customerId) {
+        if (TextUtils.isEmpty(url) || context == null) {
+            return;
+        }
+
+        new RewardedVideoCompletionRequestHandler(context,
+                url, customerId).makeRewardedVideoCompletionRequest();
+    }
+
+    static int getTimeout(int retryCount) {
+        if (retryCount >= 0 && retryCount < RETRY_TIMES.length) {
+            return RETRY_TIMES[retryCount];
+        } else {
+            return RETRY_TIMES[RETRY_TIMES.length - 1];
+        }
+    }
+
+    private static String appendParameters(@NonNull final String url,
+            @Nullable final String customerId) {
+        Preconditions.checkNotNull(url);
+
+        return url +
+                CUSTOMER_ID_KEY + (customerId == null ? "" : Uri.encode(customerId)) +
+                SDK_VERSION_KEY + Uri.encode(MoPub.SDK_VERSION) +
+                API_VERSION_KEY + MoPubRewardedVideoManager.API_VERSION;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    boolean getShouldStop() {
+        return mShouldStop;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    int getRetryCount() {
+        return mRetryCount;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    void setRetryCount(int retryCount) {
+        mRetryCount = retryCount;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java
index 6ee1c8e6..64c5473a 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java
@@ -2,6 +2,7 @@
 
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.text.TextUtils;
 import android.util.Pair;
 
 import com.mopub.common.MoPubReward;
@@ -24,6 +25,8 @@
     @NonNull
     private final Map<String, MoPubReward> mAdUnitToRewardMap;
     @NonNull
+    private final Map<String, String> mAdUnitToServerCompletionUrlMap;
+    @NonNull
     private final Map<Class<? extends CustomEventRewardedVideo>, MoPubReward> mCustomEventToRewardMap;
     @NonNull
     private final Map<TwoPartKey, Set<String>> mCustomEventToMoPubIdMap;
@@ -31,10 +34,14 @@
     private final Set<CustomEventRewardedVideo.CustomEventRewardedVideoListener> mAdNetworkListeners;
     @Nullable
     private String mCurrentAdUnitId;
+    @Nullable
+    private String mCustomerId;
+
 
     RewardedVideoData() {
         mAdUnitToCustomEventMap = new TreeMap<String, CustomEventRewardedVideo>();
         mAdUnitToRewardMap = new TreeMap<String, MoPubReward>();
+        mAdUnitToServerCompletionUrlMap = new TreeMap<String, String>();
         mCustomEventToRewardMap = new HashMap<Class<? extends CustomEventRewardedVideo>, MoPubReward>();
         mCustomEventToMoPubIdMap = new HashMap<TwoPartKey, Set<String>>();
         mAdNetworkListeners = new HashSet<CustomEventRewardedVideo.CustomEventRewardedVideoListener>();
@@ -50,6 +57,14 @@ MoPubReward getMoPubReward(@Nullable String moPubId) {
         return mAdUnitToRewardMap.get(moPubId);
     }
 
+    @Nullable
+    String getServerCompletionUrl(@Nullable final String moPubId) {
+        if (TextUtils.isEmpty(moPubId)) {
+            return null;
+        }
+        return mAdUnitToServerCompletionUrlMap.get(moPubId);
+    }
+
     @Nullable
     MoPubReward getLastShownMoPubReward(@NonNull Class<? extends CustomEventRewardedVideo> customEventClass) {
         return mCustomEventToRewardMap.get(customEventClass);
@@ -111,6 +126,12 @@ void updateAdUnitRewardMapping(
         mAdUnitToRewardMap.put(moPubId, MoPubReward.success(currencyName, intCurrencyAmount));
     }
 
+    void updateAdUnitToServerCompletionUrlMapping(@NonNull final String moPubId,
+            @Nullable final String serverCompletionUrl) {
+        Preconditions.checkNotNull(moPubId);
+        mAdUnitToServerCompletionUrlMap.put(moPubId, serverCompletionUrl);
+    }
+
     /**
      * This method should be called right before the rewarded video is shown in order to store the
      * reward associated with the custom event class. If called earlier in the rewarded lifecycle,
@@ -171,6 +192,15 @@ String getCurrentAdUnitId() {
         return mCurrentAdUnitId;
     }
 
+    void setCustomerId(@Nullable final String customerId) {
+        mCustomerId = customerId;
+    }
+
+    @Nullable
+    String getCustomerId() {
+        return mCustomerId;
+    }
+
     private static class TwoPartKey extends Pair<Class<? extends CustomEventRewardedVideo>, String> {
         @NonNull
         final Class<? extends CustomEventRewardedVideo> customEventClass;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
index d8ec20f3..43c069eb 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
@@ -6,7 +6,7 @@
 
 import java.util.Map;
 
-class VastVideoInterstitial extends ResponseBodyInterstitial implements VastManager.VastManagerListener {
+public class VastVideoInterstitial extends ResponseBodyInterstitial implements VastManager.VastManagerListener {
     private CustomEventInterstitialListener mCustomEventInterstitialListener;
     private String mVastResponse;
     private VastManager mVastManager;
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
index f8a41988..aaf3ce0c 100644
--- a/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
@@ -617,6 +617,7 @@ private void setViewState(@NonNull ViewState viewState) {
     private void setViewState(@NonNull ViewState viewState, @Nullable Runnable successRunnable) {
         // Make sure this is a valid transition.
         MoPubLog.d("MRAID state set to " + viewState);
+        final ViewState previousViewState = mViewState;
         mViewState = viewState;
         mMraidBridge.notifyViewState(viewState);
 
@@ -628,6 +629,8 @@ private void setViewState(@NonNull ViewState viewState, @Nullable Runnable succe
         if (mMraidListener != null) {
             if (viewState == ViewState.EXPANDED) {
                 mMraidListener.onExpand();
+            } else if (previousViewState == ViewState.EXPANDED && viewState == ViewState.DEFAULT) {
+                mMraidListener.onClose();
             } else if (viewState == ViewState.HIDDEN) {
                 mMraidListener.onClose();
             }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java b/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
index bc114f96..21206b09 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -19,7 +18,10 @@
  */
 @Deprecated
 public final class AdapterHelper {
-    @NonNull private final WeakReference<Activity> mActivity;
+    /**
+     * Preferably an Activity Context.
+     */
+    @NonNull private final WeakReference<Context> mContext;
     @NonNull private final Context mApplicationContext;
     private final int mStart;
     private final int mInterval;
@@ -27,11 +29,10 @@
     @Deprecated
     public AdapterHelper(@NonNull final Context context, final int start, final int interval) {
         Preconditions.checkNotNull(context, "Context cannot be null.");
-        Preconditions.checkArgument(context instanceof Activity, "Context must be an Activity.");
         Preconditions.checkArgument(start >= 0, "start position must be non-negative");
         Preconditions.checkArgument(interval >= 2, "interval must be at least 2");
 
-        mActivity = new WeakReference<Activity>((Activity) context);
+        mContext = new WeakReference<Context>(context);
         mApplicationContext = context.getApplicationContext();
         mStart = start;
         mInterval = interval;
@@ -43,9 +44,9 @@ public View getAdView(@Nullable final View convertView,
             @Nullable final ViewGroup parent,
             @Nullable final NativeAd nativeAd,
             @Nullable final ViewBinder viewBinder) {
-        final Activity activity = mActivity.get();
-        if (activity == null) {
-            MoPubLog.w("Weak reference to Activity Context in"
+        final Context context = mContext.get();
+        if (context == null) {
+            MoPubLog.w("Weak reference to Context in"
                     + " AdapterHelper became null. Returning empty view.");
             return new View(mApplicationContext);
         }
@@ -53,7 +54,7 @@ public View getAdView(@Nullable final View convertView,
         return NativeAdViewHelper.getAdView(
                 convertView,
                 parent,
-                activity,
+                context,
                 nativeAd,
                 viewBinder
         );
@@ -113,7 +114,7 @@ private int numberOfAdsThatCouldFitWithContent(final int contentRowCount) {
     // Testing
     @Deprecated
     @VisibleForTesting
-    void clearActivityContext() {
-        mActivity.clear();
+    void clearContext() {
+        mContext.clear();
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
index 5f8a1d35..0177a1d5 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.support.annotation.NonNull;
 
 import java.util.Map;
@@ -20,7 +20,7 @@
      * native ad from a third-party ad network, or execute any application code. It must also notify
      * the provided {@link CustomEventNativeListener} Object of certain lifecycle events.
      *
-     * @param activity The activity.
+     * @param context The context.
      * @param customEventNativeListener An Object that must be notified of certain lifecycle
      * events.
      * @param localExtras A Map containing additional custom data that is set within your
@@ -30,7 +30,7 @@
      * that you want to associate with a given custom event request. This data may be used to pass
      * dynamic information, such as publisher IDs, without changes in application code.
      */
-    protected abstract void loadNativeAd(@NonNull final Activity activity,
+    protected abstract void loadNativeAd(@NonNull final Context context,
             @NonNull final CustomEventNativeListener customEventNativeListener,
             @NonNull final Map<String, Object> localExtras,
             @NonNull final Map<String, String> serverExtras);
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
index c84b77b7..8a198b8a 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.support.annotation.NonNull;
 
 import com.mopub.common.DataKeys;
@@ -14,7 +14,7 @@
 final class CustomEventNativeAdapter {
     private CustomEventNativeAdapter() {}
 
-    public static void loadNativeAd(@NonNull final Activity activity,
+    public static void loadNativeAd(@NonNull final Context context,
             @NonNull final Map<String, Object> localExtras,
             @NonNull final AdResponse adResponse,
             @NonNull final CustomEventNative.CustomEventNativeListener customEventNativeListener) {
@@ -45,7 +45,7 @@ public static void loadNativeAd(@NonNull final Activity activity,
         // We catch all exceptions here to prevent crashes from untested code.
         try {
             customEventNative.loadNativeAd(
-                    activity,
+                    context,
                     customEventNativeListener,
                     localExtras,
                     adResponse.getServerExtras()
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTracker.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTracker.java
index d757285d..d7775eab 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTracker.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTracker.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.os.Handler;
 import android.os.Looper;
 import android.support.annotation.NonNull;
@@ -46,11 +46,11 @@
     // Listener for when a view becomes visible or non visible
     @Nullable private VisibilityTrackerListener mVisibilityTrackerListener;
 
-    public ImpressionTracker(@NonNull final Activity activity) {
+    public ImpressionTracker(@NonNull final Context context) {
         this(new WeakHashMap<View, ImpressionInterface>(),
                 new WeakHashMap<View, TimestampWrapper<ImpressionInterface>>(),
                 new VisibilityChecker(),
-                new VisibilityTracker(activity),
+                new VisibilityTracker(context),
                 new Handler(Looper.getMainLooper()));
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
index e79548bb..04d9c8f3 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.view.View;
@@ -19,18 +19,21 @@
 public interface MoPubAdRenderer<T extends BaseNativeAd> {
     /**
      * Creates a new view to be used as an ad.
-     *
+     * <p/>
      * This method is called when you call {@link com.mopub.nativeads.MoPubStreamAdPlacer#getAdView}
      * and the convertView is null. You must return a valid view.
      *
-     * @param activity The activity. Useful for creating a view.
-     * @param parent The parent that the view will eventually be attached to. You might use the
-     * parent to determine layout parameters, but should return the view without attaching it to the
-     * parent.
+     * @param context The context. Useful for creating a view. This is recommended to be an
+     *                Activity. If you have custom themes defined in your Activity, not passing
+     *                in that Activity will result in the default Application theme being used
+     *                when creating the ad view.
+     * @param parent  The parent that the view will eventually be attached to. You might use the
+     *                parent to determine layout parameters, but should return the view without
+     *                attaching it to the parent.
      * @return A new ad view.
      */
     @NonNull
-    View createAdView(@NonNull Activity activity, @Nullable ViewGroup parent);
+    View createAdView(@NonNull Context context, @Nullable ViewGroup parent);
 
     /**
      * Renders a view created by {@link #createAdView} by filling it with ad data.
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
index 47f19090..9d31f0d3 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -11,7 +10,6 @@
 import com.mopub.nativeads.NativeImageHelper.ImageListener;
 
 import org.json.JSONArray;
-import org.json.JSONException;
 import org.json.JSONObject;
 
 import java.util.ArrayList;
@@ -29,7 +27,7 @@
 public class MoPubCustomEventNative extends CustomEventNative {
 
     @Override
-    protected void loadNativeAd(@NonNull final Activity activity,
+    protected void loadNativeAd(@NonNull final Context context,
             @NonNull final CustomEventNativeListener customEventNativeListener,
             @NonNull final Map<String, Object> localExtras,
             @NonNull final Map<String, String> serverExtras) {
@@ -42,10 +40,10 @@ protected void loadNativeAd(@NonNull final Activity activity,
         }
 
         final MoPubStaticNativeAd moPubStaticNativeAd =
-                new MoPubStaticNativeAd(activity,
+                new MoPubStaticNativeAd(context,
                         (JSONObject) json,
-                        new ImpressionTracker(activity),
-                        new NativeClickHandler(activity),
+                        new ImpressionTracker(context),
+                        new NativeClickHandler(context),
                         customEventNativeListener);
 
         try {
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
index 7a439195..67f0655d 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
@@ -1,7 +1,6 @@
 package com.mopub.nativeads;
 
 import android.annotation.TargetApi;
-import android.app.Activity;
 import android.content.Context;
 import android.graphics.SurfaceTexture;
 import android.media.AudioManager;
@@ -56,7 +55,7 @@
 public class MoPubCustomEventVideoNative extends CustomEventNative {
 
     @Override
-    protected void loadNativeAd(@NonNull final Activity activity,
+    protected void loadNativeAd(@NonNull final Context context,
             @NonNull final CustomEventNativeListener customEventNativeListener,
             @NonNull final Map<String, Object> localExtras,
             @NonNull final Map<String, String> serverExtras) {
@@ -87,7 +86,7 @@ protected void loadNativeAd(@NonNull final Activity activity,
         }
 
         final String clickTrackingUrlFromHeader = (String) clickTrackingUrlFromHeaderObject;
-        final MoPubVideoNativeAd videoNativeAd = new MoPubVideoNativeAd(activity, (JSONObject) json,
+        final MoPubVideoNativeAd videoNativeAd = new MoPubVideoNativeAd(context, (JSONObject) json,
                 customEventNativeListener, videoResponseHeaders, eventDetails,
                 clickTrackingUrlFromHeader);
         try {
@@ -185,20 +184,20 @@ static Parameter from(@NonNull final String name) {
         private boolean mEnded;
 
         public MoPubVideoNativeAd(
-                @NonNull final Activity activity,
+                @NonNull final Context context,
                 @NonNull final JSONObject jsonObject,
                 @NonNull final CustomEventNativeListener customEventNativeListener,
                 @NonNull final VideoResponseHeaders videoResponseHeaders,
                 @Nullable final EventDetails eventDetails,
                 @NonNull final String clickTrackingUrl) {
-            this(activity, jsonObject, customEventNativeListener, videoResponseHeaders,
-                    new VisibilityTracker(activity), new NativeVideoControllerFactory(),
-                    eventDetails, clickTrackingUrl, VastManagerFactory.create(activity.getApplicationContext(), false));
+            this(context, jsonObject, customEventNativeListener, videoResponseHeaders,
+                    new VisibilityTracker(context), new NativeVideoControllerFactory(),
+                    eventDetails, clickTrackingUrl, VastManagerFactory.create(context.getApplicationContext(), false));
         }
 
         @VisibleForTesting
         MoPubVideoNativeAd(
-                @NonNull final Activity activity,
+                @NonNull final Context context,
                 @NonNull final JSONObject jsonObject,
                 @NonNull final CustomEventNativeListener customEventNativeListener,
                 @NonNull final VideoResponseHeaders videoResponseHeaders,
@@ -207,7 +206,7 @@ public MoPubVideoNativeAd(
                 @Nullable final EventDetails eventDetails,
                 @NonNull final String clickTrackingUrl,
                 @NonNull final VastManager vastManager) {
-            Preconditions.checkNotNull(activity);
+            Preconditions.checkNotNull(context);
             Preconditions.checkNotNull(jsonObject);
             Preconditions.checkNotNull(customEventNativeListener);
             Preconditions.checkNotNull(videoResponseHeaders);
@@ -216,7 +215,7 @@ public MoPubVideoNativeAd(
             Preconditions.checkNotNull(clickTrackingUrl);
             Preconditions.checkNotNull(vastManager);
 
-            mContext = activity.getApplicationContext();
+            mContext = context.getApplicationContext();
             mJsonObject = jsonObject;
             mCustomEventNativeListener = customEventNativeListener;
             mVideoResponseHeaders = videoResponseHeaders;
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
index bcc9ccc3..ebb9293c 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
@@ -54,8 +54,8 @@ public void onNativeFail(final NativeErrorCode errorCode) {
         }
     };
 
-    // must be an activity since 3rd party networks need it
-    @NonNull private final WeakReference<Activity> mActivity;
+    // Highly recommended to be an Activity since 3rd party networks need it
+    @NonNull private final WeakReference<Context> mContext;
     @NonNull private final String mAdUnitId;
     @NonNull private MoPubNativeNetworkListener mMoPubNativeNetworkListener;
 
@@ -65,25 +65,25 @@ public void onNativeFail(final NativeErrorCode errorCode) {
     @Nullable private AdRequest mNativeRequest;
     @NonNull AdRendererRegistry mAdRendererRegistry;
 
-    public MoPubNative(@NonNull final Activity activity,
+    public MoPubNative(@NonNull final Context context,
             @NonNull final String adUnitId,
             @NonNull final MoPubNativeNetworkListener moPubNativeNetworkListener) {
-        this(activity, adUnitId, new AdRendererRegistry(), moPubNativeNetworkListener);
+        this(context, adUnitId, new AdRendererRegistry(), moPubNativeNetworkListener);
     }
 
     @VisibleForTesting
-    public MoPubNative(@NonNull final Activity activity,
+    public MoPubNative(@NonNull final Context context,
             @NonNull final String adUnitId,
             @NonNull AdRendererRegistry adRendererRegistry,
             @NonNull final MoPubNativeNetworkListener moPubNativeNetworkListener) {
-        Preconditions.checkNotNull(activity, "Activity may not be null.");
+        Preconditions.checkNotNull(context, "context may not be null.");
         Preconditions.checkNotNull(adUnitId, "AdUnitId may not be null.");
         Preconditions.checkNotNull(adRendererRegistry, "AdRendererRegistry may not be null.");
         Preconditions.checkNotNull(moPubNativeNetworkListener, "MoPubNativeNetworkListener may not be null.");
 
-        ManifestUtils.checkNativeActivitiesDeclared(activity);
+        ManifestUtils.checkNativeActivitiesDeclared(context);
 
-        mActivity = new WeakReference<Activity>(activity);
+        mContext = new WeakReference<Context>(context);
         mAdUnitId = adUnitId;
         mMoPubNativeNetworkListener = moPubNativeNetworkListener;
         mAdRendererRegistry = adRendererRegistry;
@@ -100,7 +100,7 @@ public void onErrorResponse(@NonNull final VolleyError volleyError) {
         };
 
         // warm up cache for google play services info
-        fetchAdvertisingInfoAsync(activity, null);
+        fetchAdvertisingInfoAsync(context, null);
     }
 
     /**
@@ -113,7 +113,7 @@ public void registerAdRenderer(MoPubAdRenderer moPubAdRenderer) {
     }
 
     public void destroy() {
-        mActivity.clear();
+        mContext.clear();
         if (mNativeRequest != null) {
             mNativeRequest.cancel();
             mNativeRequest = null;
@@ -139,12 +139,12 @@ public void makeRequest(@Nullable final RequestParameters requestParameters) {
 
     public void makeRequest(@Nullable final RequestParameters requestParameters,
             @Nullable Integer sequenceNumber) {
-        final Activity activity = getActivityOrDestroy();
-        if (activity == null) {
+        final Context context = getContextOrDestroy();
+        if (context == null) {
             return;
         }
 
-        if (!DeviceUtils.isNetworkAvailable(activity)) {
+        if (!DeviceUtils.isNetworkAvailable(context)) {
             mMoPubNativeNetworkListener.onNativeFail(CONNECTION_ERROR);
             return;
         }
@@ -155,12 +155,12 @@ public void makeRequest(@Nullable final RequestParameters requestParameters,
     private void loadNativeAd(
             @Nullable final RequestParameters requestParameters,
             @Nullable final Integer sequenceNumber) {
-        final Activity activity = getActivityOrDestroy();
-        if (activity == null) {
+        final Context context = getContextOrDestroy();
+        if (context == null) {
             return;
         }
 
-        final NativeUrlGenerator generator = new NativeUrlGenerator(activity)
+        final NativeUrlGenerator generator = new NativeUrlGenerator(context)
                 .withAdUnitId(mAdUnitId)
                 .withRequest(requestParameters);
 
@@ -178,8 +178,8 @@ private void loadNativeAd(
     }
 
     void requestNativeAd(@Nullable final String endpointUrl) {
-        final Activity activity = getActivityOrDestroy();
-        if (activity == null) {
+        final Context context = getContextOrDestroy();
+        if (context == null) {
             return;
         }
 
@@ -188,22 +188,22 @@ void requestNativeAd(@Nullable final String endpointUrl) {
             return;
         }
 
-        mNativeRequest = new AdRequest(endpointUrl, AdFormat.NATIVE, mAdUnitId, activity, mVolleyListener);
-        RequestQueue requestQueue = Networking.getRequestQueue(activity);
+        mNativeRequest = new AdRequest(endpointUrl, AdFormat.NATIVE, mAdUnitId, context, mVolleyListener);
+        RequestQueue requestQueue = Networking.getRequestQueue(context);
         requestQueue.add(mNativeRequest);
     }
 
     private void onAdLoad(@NonNull final AdResponse response) {
-        final Activity activity = getActivityOrDestroy();
-        if (activity == null) {
+        final Context context = getContextOrDestroy();
+        if (context == null) {
             return;
         }
         final CustomEventNativeListener customEventNativeListener =
                 new CustomEventNativeListener() {
                     @Override
                     public void onNativeAdLoaded(@NonNull final BaseNativeAd nativeAd) {
-                        final Activity activity = getActivityOrDestroy();
-                        if (activity == null) {
+                        final Context context = getContextOrDestroy();
+                        if (context == null) {
                             return;
                         }
 
@@ -213,7 +213,7 @@ public void onNativeAdLoaded(@NonNull final BaseNativeAd nativeAd) {
                             return;
                         }
 
-                        mMoPubNativeNetworkListener.onNativeLoad(new NativeAd(activity,
+                        mMoPubNativeNetworkListener.onNativeLoad(new NativeAd(context,
                                         response.getImpressionTrackingUrl(),
                                         response.getClickTrackingUrl(),
                                         mAdUnitId,
@@ -230,7 +230,7 @@ public void onNativeAdFailed(final NativeErrorCode errorCode) {
                 };
 
         CustomEventNativeAdapter.loadNativeAd(
-                activity,
+                context,
                 mLocalExtras,
                 response,
                 customEventNativeListener
@@ -268,7 +268,7 @@ void onAdError(@NonNull final VolleyError volleyError) {
             NetworkResponse response = volleyError.networkResponse;
             if (response != null && response.statusCode >= 500 && response.statusCode < 600) {
                 mMoPubNativeNetworkListener.onNativeFail(SERVER_ERROR_RESPONSE_CODE);
-            } else if (response == null && !DeviceUtils.isNetworkAvailable(mActivity.get())) {
+            } else if (response == null && !DeviceUtils.isNetworkAvailable(mContext.get())) {
                 MoPubLog.c(String.valueOf(MoPubErrorCode.NO_CONNECTION.toString()));
                 mMoPubNativeNetworkListener.onNativeFail(CONNECTION_ERROR);
             } else {
@@ -277,14 +277,16 @@ void onAdError(@NonNull final VolleyError volleyError) {
         }
     }
 
-    Activity getActivityOrDestroy() {
-        final Activity activity = mActivity.get();
-        if (activity == null) {
+    @VisibleForTesting
+    @Nullable
+    Context getContextOrDestroy() {
+        final Context context = mContext.get();
+        if (context == null) {
             destroy();
-            MoPubLog.d("Weak reference to Activity in MoPubNative became null. This instance" +
+            MoPubLog.d("Weak reference to Context in MoPubNative became null. This instance" +
                     " of MoPubNative is destroyed and No more requests will be processed.");
         }
-        return activity;
+        return context;
     }
 
     @VisibleForTesting
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java
index 819d8d8f..aec86d57 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.view.LayoutInflater;
@@ -36,9 +36,9 @@ public MoPubStaticNativeAdRenderer(@NonNull final ViewBinder viewBinder) {
 
     @Override
     @NonNull
-    public View createAdView(@NonNull final Activity activity, @Nullable final ViewGroup parent) {
+    public View createAdView(@NonNull final Context context, @Nullable final ViewGroup parent) {
         return LayoutInflater
-                .from(activity)
+                .from(context)
                 .inflate(mViewBinder.layoutId, parent, false);
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
index 2aacb163..3574b303 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
@@ -388,7 +388,7 @@ public Object getAdData(final int position) {
      * Gets the ad at the given position, or {@code null} if there is no ad at the given position.
      *
      * This method will attempt to reuse the convertView if it is not {@code null}, and will
-     * otherwise create it. See {@link MoPubAdRenderer#createAdView(Activity, ViewGroup)}.
+     * otherwise create it. See {@link MoPubAdRenderer#createAdView(Context, ViewGroup)}.
      *
      * @param position The position to place an ad into.
      * @param convertView A recycled view into which to render data, or {@code null}.
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java
index a4a3da39..551e6417 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.view.LayoutInflater;
@@ -34,9 +34,9 @@ public MoPubVideoNativeAdRenderer(@NonNull final MediaViewBinder mediaViewBinder
 
     @Override
     @NonNull
-    public View createAdView(@NonNull final Activity activity, @Nullable final ViewGroup parent) {
+    public View createAdView(@NonNull final Context context, @Nullable final ViewGroup parent) {
         return LayoutInflater
-                .from(activity)
+                .from(context)
                 .inflate(mMediaViewBinder.layoutId, parent, false);
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAd.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAd.java
index 08124786..a0f5b81b 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAd.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAd.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -33,7 +32,7 @@
  *
  * When you have a {@link NativeAd} instance and wish to show a view you should:
  *
- * 1. Call {@link #createAdView(Activity, ViewGroup)} to inflate a {@link View} that can show this ad.
+ * 1. Call {@link #createAdView(Context, ViewGroup)} to inflate a {@link View} that can show this ad.
  * 2. Call {@link #renderAdView(View)} with a compatible {@link View} to render the ad data into the view.
  * 3. Just before the ad is shown to the user, call {@link #prepare(View)}.
  * 4. When the ad view is no longer shown to the user, call {@link #clear(View)}. You can later
@@ -132,9 +131,17 @@ public BaseNativeAd getBaseNativeAd() {
         return mBaseNativeAd;
     }
 
+    /**
+     * Renders the ad view. It is highly recommended that this context is an Activity to preserve
+     * the current activity's theme.
+     *
+     * @param context The context, preferably the Activity.
+     * @param parent  An optional parent.
+     * @return The rendered ad view.
+     */
     @NonNull
-    public View createAdView(@NonNull final Activity activity, @Nullable final ViewGroup parent) {
-        return mMoPubAdRenderer.createAdView(activity, parent);
+    public View createAdView(@NonNull final Context context, @Nullable final ViewGroup parent) {
+        return mMoPubAdRenderer.createAdView(context, parent);
     }
 
     public void renderAdView(View view) {
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
index b600d00d..0b275866 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -38,31 +37,31 @@ private NativeAdViewHelper() {
     @NonNull
     static View getAdView(@Nullable View convertView,
             @Nullable final ViewGroup parent,
-            @NonNull final Activity activity,
+            @NonNull final Context context,
             @Nullable final NativeAd nativeAd,
             @Nullable final ViewBinder viewBinder) {
 
         Preconditions.NoThrow.checkNotNull(viewBinder, "ViewBinder is null.");
 
         if (convertView != null) {
-            clearNativeAd(activity, convertView);
+            clearNativeAd(context, convertView);
         }
 
         if (nativeAd == null || nativeAd.isDestroyed() || viewBinder == null) {
             MoPubLog.d("NativeAd or viewBinder null or invalid. Returning empty view");
             // Only create a view if one hasn't been created already
             if (convertView == null || !ViewType.EMPTY.equals(convertView.getTag())) {
-                convertView = new View(activity);
+                convertView = new View(context);
                 convertView.setTag(ViewType.EMPTY);
                 convertView.setVisibility(View.GONE);
             }
         } else {
             // Only create a view if one hasn't been created already
             if (convertView == null || !ViewType.AD.equals(convertView.getTag())) {
-                convertView = nativeAd.createAdView(activity, parent);
+                convertView = nativeAd.createAdView(context, parent);
                 convertView.setTag(ViewType.AD);
             }
-            prepareNativeAd(activity, convertView, nativeAd);
+            prepareNativeAd(context, convertView, nativeAd);
             nativeAd.renderAdView(convertView);
         }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java b/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java
index 7732643d..39cbfc39 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java
@@ -1,6 +1,7 @@
 package com.mopub.nativeads;
 
 import android.app.Activity;
+import android.content.Context;
 import android.graphics.Rect;
 import android.os.Handler;
 import android.os.SystemClock;
@@ -44,8 +45,8 @@
         void onVisibilityChanged(List<View> visibleViews, List<View> invisibleViews);
     }
 
-    @Nullable @VisibleForTesting OnPreDrawListener mOnPreDrawListener;
-    @NonNull @VisibleForTesting final WeakReference<View> mRootView;
+    @NonNull @VisibleForTesting final OnPreDrawListener mOnPreDrawListener;
+    @NonNull @VisibleForTesting WeakReference<ViewTreeObserver> mWeakViewTreeObserver;
 
     static class TrackingInfo {
         int mMinViewablePercent;
@@ -73,15 +74,15 @@
     // Whether the visibility runnable is scheduled
     private boolean mIsVisibilityScheduled;
 
-    public VisibilityTracker(@NonNull final Activity activity) {
-        this(activity,
+    public VisibilityTracker(@NonNull final Context context) {
+        this(context,
                 new WeakHashMap<View, TrackingInfo>(10),
                 new VisibilityChecker(),
                 new Handler());
     }
 
     @VisibleForTesting
-    VisibilityTracker(@NonNull final Activity activity,
+    VisibilityTracker(@NonNull final Context context,
             @NonNull final Map<View, TrackingInfo> trackedViews,
             @NonNull final VisibilityChecker visibilityChecker,
             @NonNull final Handler visibilityHandler) {
@@ -91,22 +92,57 @@ public VisibilityTracker(@NonNull final Activity activity) {
         mVisibilityRunnable = new VisibilityRunnable();
         mTrimmedViews = new ArrayList<View>(NUM_ACCESSES_BEFORE_TRIMMING);
 
-        final View rootView = activity.getWindow().getDecorView();
-        mRootView = new WeakReference<View>(rootView);
+        mOnPreDrawListener = new OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                scheduleVisibilityCheck();
+                return true;
+            }
+        };
+
+        mWeakViewTreeObserver = new WeakReference<ViewTreeObserver>(null);
+        setViewTreeObserver(context, null);
+    }
+
+    private void setViewTreeObserver(@Nullable final Context context, @Nullable final View view) {
+        final ViewTreeObserver originalViewTreeObserver = mWeakViewTreeObserver.get();
+        if (originalViewTreeObserver != null && originalViewTreeObserver.isAlive()) {
+            return;
+        }
+
+        final View rootView = getBestRootView(context, view);
+        if (rootView == null) {
+            MoPubLog.d("Unable to set Visibility Tracker due to no available root view.");
+            return;
+        }
+
         final ViewTreeObserver viewTreeObserver = rootView.getViewTreeObserver();
         if (!viewTreeObserver.isAlive()) {
             MoPubLog.w("Visibility Tracker was unable to track views because the"
                     + " root view tree observer was not alive");
-        } else {
-            mOnPreDrawListener = new OnPreDrawListener() {
-                @Override
-                public boolean onPreDraw() {
-                    scheduleVisibilityCheck();
-                    return true;
-                }
-            };
-            viewTreeObserver.addOnPreDrawListener(mOnPreDrawListener);
+            return;
         }
+
+        mWeakViewTreeObserver = new WeakReference<ViewTreeObserver>(viewTreeObserver);
+        viewTreeObserver.addOnPreDrawListener(mOnPreDrawListener);
+    }
+
+    @VisibleForTesting
+    @Nullable
+    static View getBestRootView(@Nullable final Context context, @Nullable final View view) {
+        if (context instanceof Activity) {
+            return ((Activity) context).getWindow().getDecorView();
+        }
+
+        if (view != null) {
+            final View rootView = view.getRootView();
+            if (rootView != null) {
+                final View rootContentView = rootView.findViewById(android.R.id.content);
+                return rootContentView != null ? rootContentView : rootView;
+            }
+        }
+
+        return null;
     }
 
     void setVisibilityTrackerListener(
@@ -126,6 +162,8 @@ void addView(@NonNull View rootView, @NonNull final View view, final int minPerc
     }
 
     void addView(@NonNull View rootView, @NonNull final View view, final int minVisiblePercentageViewed, final int maxInvisiblePercentageViewed) {
+        setViewTreeObserver(view.getContext(), view);
+
         // Find the view if already tracked
         TrackingInfo trackingInfo = mTrackedViews.get(view);
         if (trackingInfo == null) {
@@ -183,14 +221,11 @@ void clear() {
      */
     void destroy() {
         clear();
-        final View rootView = mRootView.get();
-        if (rootView != null && mOnPreDrawListener != null) {
-            final ViewTreeObserver viewTreeObserver = rootView.getViewTreeObserver();
-            if (viewTreeObserver.isAlive()) {
-                viewTreeObserver.removeOnPreDrawListener(mOnPreDrawListener);
-            }
-            mOnPreDrawListener = null;
+        final ViewTreeObserver viewTreeObserver = mWeakViewTreeObserver.get();
+        if (viewTreeObserver != null && viewTreeObserver.isAlive()) {
+            viewTreeObserver.removeOnPreDrawListener(mOnPreDrawListener);
         }
+        mWeakViewTreeObserver.clear();
         mVisibilityTrackerListener = null;
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java b/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java
index 0b82ba35..2118eaa2 100644
--- a/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java
+++ b/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java
@@ -273,8 +273,11 @@ public Listener getListener() {
                     ResponseHeader.REWARDED_VIDEO_CURRENCY_NAME);
             final String rewardedVideoCurrencyAmount = extractHeader(headers,
                     ResponseHeader.REWARDED_VIDEO_CURRENCY_AMOUNT);
+            final String rewardedVideoCompletionUrl = extractHeader(headers,
+                    ResponseHeader.REWARDED_VIDEO_COMPLETION_URL);
             builder.setRewardedVideoCurrencyName(rewardedVideoCurrencyName);
             builder.setRewardedVideoCurrencyAmount(rewardedVideoCurrencyAmount);
+            builder.setRewardedVideoCompletionUrl(rewardedVideoCompletionUrl);
         }
 
         AdResponse adResponse = builder.build();
diff --git a/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java b/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java
index cb2ba147..29b29c71 100644
--- a/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java
+++ b/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java
@@ -30,6 +30,8 @@
     private final String mRewardedVideoCurrencyName;
     @Nullable
     private final String mRewardedVideoCurrencyAmount;
+    @Nullable
+    private final String mRewardedVideoCompletionUrl;
 
     @Nullable
     private final String mRedirectUrl;
@@ -79,6 +81,7 @@ private AdResponse(@NonNull Builder builder) {
 
         mRewardedVideoCurrencyName = builder.rewardedVideoCurrencyName;
         mRewardedVideoCurrencyAmount = builder.rewardedVideoCurrencyAmount;
+        mRewardedVideoCompletionUrl = builder.rewardedVideoCompletionUrl;
 
         mRedirectUrl = builder.redirectUrl;
         mClickTrackingUrl = builder.clickTrackingUrl;
@@ -148,6 +151,11 @@ public String getRewardedVideoCurrencyAmount() {
         return mRewardedVideoCurrencyAmount;
     }
 
+    @Nullable
+    public String getRewardedVideoCompletionUrl() {
+        return mRewardedVideoCompletionUrl;
+    }
+
     @Nullable
     public String getRedirectUrl() {
         return mRedirectUrl;
@@ -245,6 +253,7 @@ public Builder toBuilder() {
 
         private String rewardedVideoCurrencyName;
         private String rewardedVideoCurrencyAmount;
+        private String rewardedVideoCompletionUrl;
 
         private String redirectUrl;
         private String clickTrackingUrl;
@@ -300,6 +309,12 @@ public Builder setRewardedVideoCurrencyAmount(
             return this;
         }
 
+        public Builder setRewardedVideoCompletionUrl(
+                @Nullable final String rewardedVideoCompletionUrl) {
+            this.rewardedVideoCompletionUrl = rewardedVideoCompletionUrl;
+            return this;
+        }
+
         public Builder setRedirectUrl(@Nullable final String redirectUrl) {
             this.redirectUrl = redirectUrl;
             return this;
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
index bebee271..7607dd22 100644
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=4.6.1+kit
+fabric-version=4.8.0+kit
 fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/ads/AdsTest.java b/mopub-sdk/src/test/java/com/mopub/ads/AdsTest.java
index 79d32f99..1f6c4445 100644
--- a/mopub-sdk/src/test/java/com/mopub/ads/AdsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/ads/AdsTest.java
@@ -35,7 +35,7 @@
     @Before
     public void setUp() throws Exception {
         SharedPreferences sharedPreferences = RuntimeEnvironment.application.getSharedPreferences("TEST", Context.MODE_PRIVATE);
-        subject = new Ads(interstitialMock,null, sharedPreferences,calendarMock,false);
+        subject = new Ads(interstitialMock, sharedPreferences,calendarMock);
 
         when(calendarMock.get(subject.measureUnit)).thenReturn(0);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
index ee2e863d..bde01702 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
@@ -104,6 +104,28 @@ public void followDeepLink_shouldBeCaseInsensitive() throws Exception {
         assertUrlActionMatching(FOLLOW_DEEP_LINK, "myapp://MyView", true);
     }
 
+    @Test
+    public void followDeepLink_withEmptyScheme_shouldNotMatch() throws Exception {
+        assertUrlActionMatching(FOLLOW_DEEP_LINK, "://myview", false);
+    }
+
+    @Test
+    public void followDeepLink_withEmptyHost_shouldMatch() throws Exception {
+        assertUrlActionMatching(FOLLOW_DEEP_LINK, "myapp://", true);
+    }
+
+    @Test
+    public void followDeepLink_withIntentScheme_withEmptyHost_shouldMatch() throws Exception {
+        assertUrlActionMatching(FOLLOW_DEEP_LINK, "intent://", true);
+        assertUrlActionMatching(FOLLOW_DEEP_LINK, "InTeNt://", true);
+    }
+
+    @Test
+    public void followDeepLink_withIntentScheme_withHost_shouldMatch() throws Exception {
+        assertUrlActionMatching(FOLLOW_DEEP_LINK, "intent://host", true);
+        assertUrlActionMatching(FOLLOW_DEEP_LINK, "InTeNt://HoSt", true);
+    }
+
     private void assertUrlActionMatching(@NonNull final UrlAction action,
             @Nullable final String url, final boolean shouldMatch) {
         assertThat(action.shouldTryHandlingUrl(Uri.parse(url))).isEqualTo(shouldMatch);
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
index 76502a3e..66ccbdd2 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
@@ -13,6 +13,7 @@
 import com.mopub.network.Networking;
 
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
@@ -21,6 +22,8 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowApplication;
 
+import java.net.URISyntaxException;
+
 import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK;
 import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK;
 import static com.mopub.common.UrlAction.HANDLE_MOPUB_SCHEME;
@@ -49,6 +52,13 @@
     @Before
     public void setUp() throws Exception {
         context = Robolectric.buildActivity(Activity.class).create().get().getApplicationContext();
+
+        // This url will be attempted when and intent:// url is not resolvable AND the app package
+        // is missing (see Intents.launchApplicationIntent). In this case, we want the url to be
+        // resolvable so the tests behave as a real device and actually attempt to open it.
+        // This discrepancy between devices and test environment/emulators is was led to the
+        // regression of ADF-2291.
+        makeDeeplinkResolvable("market://details?id=null");
     }
 
     @Test
@@ -298,6 +308,25 @@ public void urlHandler_withMatchingDeepLinkUrl_shouldCallOnClickSuccess_shouldSt
         assertThat(startedActivity.getData()).isEqualTo(Uri.parse(deepLinkUrl));
     }
 
+    @Test
+    public void urlHandler_withMatchingIntentUrl_shouldCallOnClickSuccess_shouldStartActivity() throws URISyntaxException {
+        final String appPackage = "com.google.zxing.client.android";
+        final String intentUrl = "intent://scan/#Intent;scheme=zxing;package=" + appPackage
+                + ";end";
+        makeIntentUrlResolvable(intentUrl);
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK)
+                .withResultActions(mockResultActions)
+                .withMoPubSchemeListener(mockMoPubSchemeListener)
+                .build().handleResolvedUrl(context, intentUrl, true, null);
+
+        verify(mockResultActions).urlHandlingSucceeded(intentUrl, FOLLOW_DEEP_LINK);
+        verifyNoMoreCallbacks();
+        final Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
+        assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_VIEW);
+    }
+
     @Test
     public void urlHandler_withMatchingDeeplinkPlus_shouldCallOnClickSuccess_shouldStartActivity() {
         final String primaryUrl = "twitter://timeline";
@@ -916,4 +945,9 @@ private void makeDeeplinkResolvable(String deeplink) {
         RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
                 Uri.parse(deeplink)), new ResolveInfo());
     }
+
+    private void makeIntentUrlResolvable(String intentUrl) throws URISyntaxException {
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(
+                Intent.parseUri(intentUrl, Intent.URI_INTENT_SCHEME), new ResolveInfo());
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
index 5e5e4ea1..159d9b32 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
@@ -17,6 +17,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.shadows.ShadowApplication;
 
 import java.util.ArrayList;
@@ -194,13 +195,55 @@ public void intentForShareTweetScheme_whenTweetIdParameterIsEmpty_shouldThrowExc
 
     @Test
     public void launchIntentForUserClick_shouldStartActivity() throws Exception {
-        Context context = Robolectric.buildActivity(Activity.class).create().get()
-                .getApplicationContext();
         Intent intent = mock(Intent.class);
 
-        Intents.launchIntentForUserClick(context, intent, null);
+        Intents.launchIntentForUserClick(applicationContext, intent, null);
         final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
 
         assertThat(startedActivity).isNotNull();
     }
+
+    @Test
+    public void launchApplicationUrl_withResolvableUrl_shouldOpenActivity() throws Exception {
+        final String url = "url_to_installed_app";
+        makeUrlResolvable(url);
+
+        Intents.launchApplicationUrl(activityContext, Uri.parse(url));
+        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
+
+        assertThat(startedActivity).isNotNull();
+    }
+
+    @Test(expected = IntentNotResolvableException.class)
+    public void launchApplicationUrl_withUnresolvableUrl_shouldThrowIntentNotResolvableException() throws Exception {
+        final String url = "url_to_installed_app";
+
+        Intents.launchApplicationUrl(activityContext, Uri.parse(url));
+        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
+
+        assertThat(startedActivity).isNull();
+    }
+
+    @Test
+    public void getPlayStoreUri_shouldBuildUriFromIntentPackage() throws Exception {
+        final Intent intent = new Intent();
+        final String appPackage = "com.mopub.test";
+        intent.setPackage(appPackage);
+
+        assertThat(Intents.getPlayStoreUri(intent).toString()).isEqualTo("market://details?id="
+                + appPackage);
+    }
+
+    @Test
+    public void getPlayStoreUri_shouldNotBlowUpWithEmptyPackage() throws Exception {
+        final Intent intent = new Intent();
+
+        assertThat(Intents.getPlayStoreUri(intent).toString())
+                .isEqualTo("market://details?id=null");
+    }
+
+    private void makeUrlResolvable(String url) {
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(
+                new Intent(Intent.ACTION_VIEW, Uri.parse(url)), new ResolveInfo());
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
index da4c0bb0..d743e27c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
@@ -1,6 +1,5 @@
 package com.mopub.mobileads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
 import android.graphics.Bitmap;
@@ -17,19 +16,16 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.robolectric.Robolectric;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowApplication;
 
-import java.io.File;
-import java.io.FileOutputStream;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.Locale;
 
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
@@ -68,10 +64,8 @@ public void constructor_shouldCreateSendToIntentWithEmailAddress() throws Except
         subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
         emailIntent = subject.getEmailIntent();
 
-        assertThat(emailIntent.getAction()).isEqualTo(Intent.ACTION_SEND_MULTIPLE);
-        assertThat(emailIntent.getType()).isEqualTo("plain/text");
-        assertThat(emailIntent.getData().toString()).isEqualTo("mailto:");
-        assertThat(emailIntent.getStringArrayExtra(Intent.EXTRA_EMAIL)[0]).isEqualTo(EMAIL_ADDRESS);
+        assertThat(emailIntent.getAction()).isEqualTo(Intent.ACTION_SENDTO);
+        assertThat(emailIntent.getData()).isEqualTo(Uri.parse("mailto:creative-review@mopub.com"));
     }
 
     @Test
@@ -118,30 +112,6 @@ public void constructor_shouldCreateIntentWithImageStringAndParametersAndRespons
         assertThat(imageString).isEqualTo("Qml0bWFwICgxMCB4IDEwKSBjcmVhdGVkIGZyb20gQml0bWFwIG9iamVjdCBjb21wcmVzc2VkIGFz\nIEpQRUcgd2l0aCBxdWFsaXR5IDI1\n");
     }
 
-    @Test
-    public void constructor_shouldAddBitmapToAttachmentArray() throws Exception {
-        stub(mockContext.getFilesDir()).toReturn(new File("filesDir"));
-        stub(mockContext.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        emailAttachments = subject.getEmailAttachments();
-        Uri fileUri = Uri.fromFile(new File("filesDir/mp_adalert_screenshot.png"));
-
-        assertThat(emailAttachments).contains(fileUri);
-    }
-
-    @Test
-    public void constructor_shouldAddParametersTextFileToAttachmentArray() throws Exception {
-        stub(mockContext.getFilesDir()).toReturn(new File("filesDir"));
-        stub(mockContext.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        emailAttachments = subject.getEmailAttachments();
-        Uri fileUri = Uri.fromFile(new File("filesDir/mp_adalert_parameters.txt"));
-
-        assertThat(emailAttachments).contains(fileUri);
-    }
-
     @Test
     public void constructor_whenAdReportIsNull_shouldReturnEmptyString() throws Exception {
         subject = new AdAlertReporter(mockContext, mockView, null);
@@ -160,45 +130,16 @@ public void constructor_shouldSetCorrectResponseString() throws Exception {
         assertThat(subject.getResponse()).isEqualTo(expectedResponse);
     }
 
-    @Test
-    public void constructor_shouldAddMarkupTextFileToAttachmentArray() throws Exception {
-        stub(mockAdReport.getResponseString()).toReturn("anything!");
-        stub(mockContext.getFilesDir()).toReturn(new File("filesDir"));
-        stub(mockContext.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        emailAttachments = subject.getEmailAttachments();
-        Uri fileUri = Uri.fromFile(new File("filesDir/mp_adalert_markup.html"));
-
-        assertThat(emailAttachments).contains(fileUri);
-    }
-
-    @Test
-    public void send_shouldAddAttachmentsToIntent() throws Exception {
-        stub(mockContext.getFilesDir()).toReturn(new File("filesDir"));
-        stub(mockContext.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
-        stub(mockAdReport.getResponseString()).toReturn("anything!");
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-        subject.send();
-
-        emailIntent = subject.getEmailIntent();
-        ArrayList<Uri> attachments = emailIntent.getParcelableArrayListExtra(Intent.EXTRA_STREAM);
-
-        assertThat(attachments.size()).isEqualTo(3);
-        assertThat(attachments).contains(Uri.fromFile(new File("filesDir/mp_adalert_screenshot.png")));
-        assertThat(attachments).contains(Uri.fromFile(new File("filesDir/mp_adalert_parameters.txt")));
-        assertThat(attachments).contains(Uri.fromFile(new File("filesDir/mp_adalert_markup.html")));
-    }
-
     @Test
     public void send_shouldCreateEmailChooserIntent() throws Exception {
-
-        subject = new AdAlertReporter(Robolectric.buildActivity(Activity.class).create().get(), mockView, mockAdReport);
+        final Context applicationContext = RuntimeEnvironment.application;
+        // A real device uses application context here, which causes Intents.startActivity to add
+        // FLAG_ACTIVITY_NEW_TASK (and thus we assert for it below)
+        subject = new AdAlertReporter(applicationContext, mockView, mockAdReport);
         subject.send();
 
         Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_CHOOSER);
-        assertThat(intent.getStringExtra(Intent.EXTRA_TITLE)).isEqualTo("Send Email...");
+        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_SENDTO);
         assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
index 996056e4..3d47a818 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
@@ -29,6 +29,7 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyZeroInteractions;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
@@ -318,6 +319,7 @@ public void newlyCreated_shouldNotBeReadyAndNotShow() throws Exception {
 
     @Test
     public void loadingCustomEventInterstitial_shouldBecomeReadyToShowCustomEventAd() throws Exception {
+        subject.load();
         subject.onCustomEventInterstitialLoaded();
 
         assertShowsCustomEventInterstitial(true);
@@ -384,6 +386,357 @@ public void adFailed_shouldNotifyInterstitialAdListener() throws Exception {
         verify(interstitialAdListener).onInterstitialFailed(eq(subject), eq(CANCELLED));
     }
 
+    @Test
+    public void attemptStateTransition_withIdleStartState() {
+        /**
+         * IDLE can go to LOADING when load is called. IDLE can also go to DESTROYED if the
+         * interstitial view is destroyed.
+         */
+
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
+        boolean stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.IDLE, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.IDLE);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.IDLE, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.IDLE);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setInterstitialView(interstitialView);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.LOADING, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.LOADING);
+        verify(customEventInterstitialAdapter).invalidate();
+        verify(interstitialView).loadAd();
+
+        reset(customEventInterstitialAdapter, interstitialView);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setInterstitialView(interstitialView);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.LOADING, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.LOADING);
+        verify(customEventInterstitialAdapter).invalidate();
+        verify(interstitialView).forceRefresh();
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.READY, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.IDLE);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.READY, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.IDLE);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.DESTROYED, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verify(customEventInterstitialAdapter).invalidate();
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.DESTROYED, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verify(customEventInterstitialAdapter).invalidate();
+    }
+
+    @Test
+    public void attemptStateTransition_withLoadingStartState() {
+        /**
+         * LOADING can go to IDLE if and only if it's a hard reset to IDLE. LOADING should go to
+         * READY when the interstitial is done loading. LOADING can go to DESTROYED if the
+         * interstitial view is destroyed.
+         */
+
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
+        boolean stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.IDLE, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.LOADING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.IDLE, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.IDLE);
+        verify(customEventInterstitialAdapter).invalidate();
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.LOADING, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.LOADING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.LOADING, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.LOADING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.READY, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.READY);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.READY, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.READY);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.DESTROYED, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verify(customEventInterstitialAdapter).invalidate();
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.DESTROYED, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verify(customEventInterstitialAdapter).invalidate();
+    }
+
+    @Test
+    public void attemptStateTransition_withReadyStartState() {
+        /**
+         * This state should succeed for going to IDLE. When it's forced, it's implicitly resetting
+         * the internals into ready state. If it's not forced, this is when the interstitial is
+         * shown. Also, READY can go into DESTROYED.
+         */
+
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
+        boolean stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.IDLE, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.IDLE);
+        verify(customEventInterstitialAdapter).showInterstitial();
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.IDLE, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.IDLE);
+        verify(customEventInterstitialAdapter).invalidate();
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.LOADING, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.READY);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+        verify(interstitialAdListener).onInterstitialLoaded(subject);
+
+        reset(customEventInterstitialAdapter, interstitialAdListener);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.LOADING, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.READY);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+        verify(interstitialAdListener).onInterstitialLoaded(subject);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.READY, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.READY);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.READY, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.READY);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.DESTROYED, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verify(customEventInterstitialAdapter).invalidate();
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.DESTROYED, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verify(customEventInterstitialAdapter).invalidate();
+    }
+
+    @Test
+    public void attemptStateTransition_withDestroyedStartState() {
+        // All state transitions should fail if starting from a destroyed state
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
+        boolean stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.IDLE, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.IDLE, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.LOADING, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.LOADING, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.READY, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.READY, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.DESTROYED, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.DESTROYED, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+    }
+
     private void loadCustomEvent() {
         MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
index 3bdc8cf9..4d392c6e 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -91,6 +91,22 @@ public void loadVideo_withRequestParameters_shouldGenerateUrlWithKeywords() {
 
         // Finish the request
         requestListener.onErrorResponse(new VolleyError("end test"));
+        ShadowLooper.unPauseMainLooper();
+    }
+
+    @Test
+    public void loadVideo_withCustomerIdInRequestParameters_shouldSetCustomerId() {
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", new MoPubRewardedVideoManager.RequestParameters("keywords", null, "testCustomerId"));
+
+        assertThat(MoPubRewardedVideoManager.getRewardedVideoData().getCustomerId()).isEqualTo("testCustomerId");
+
+        // Finish the request
+        requestListener.onErrorResponse(new VolleyError("end test"));
+        ShadowLooper.unPauseMainLooper();
     }
 
     @Test
@@ -260,6 +276,8 @@ public void onAdSuccess_shouldUpdateAdUnitRewardMapping() throws Exception {
         MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
         requestListener.onSuccess(testResponse);
 
+        ShadowLooper.unPauseMainLooper();
+
         MoPubReward moPubReward =
                 MoPubRewardedVideoManager.getRewardedVideoData().getMoPubReward("testAdUnit");
         assertThat(moPubReward.getAmount()).isEqualTo(123);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java
new file mode 100644
index 00000000..d73f8bd8
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java
@@ -0,0 +1,185 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.net.Uri;
+import android.os.Handler;
+
+import com.mopub.common.MoPub;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.Networking;
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.VolleyError;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import static com.mopub.common.VolleyRequestMatcher.isUrl;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.argThat;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyZeroInteractions;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class RewardedVideoCompletionRequestHandlerTest {
+    @Mock
+    private MoPubRequestQueue mockRequestQueue;
+    private Context context;
+    private String url;
+
+    @Before
+    public void setup() {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        url = "testUrl";
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_shouldAddMacros_shouldMakeVideoCompletionRequest() throws Exception {
+        RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(context, url,
+                "customer id");
+
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "testUrl&customer_id=customer%20id&nv=" +
+                        Uri.encode(MoPub.SDK_VERSION) + "&v=" +
+                        MoPubRewardedVideoManager.API_VERSION)));
+    }
+
+    @Test
+    public void getTimeout_shouldReturnCorrectTimeoutBasedOnRetry() {
+        final int maxTimeout = RewardedVideoCompletionRequestHandler.RETRY_TIMES[RewardedVideoCompletionRequestHandler.RETRY_TIMES.length - 1];
+
+        assertThat(RewardedVideoCompletionRequestHandler.getTimeout(-1)).isEqualTo(maxTimeout);
+
+        assertThat(RewardedVideoCompletionRequestHandler.getTimeout(0)).isEqualTo(
+                RewardedVideoCompletionRequestHandler.RETRY_TIMES[0]);
+
+        assertThat(RewardedVideoCompletionRequestHandler.getTimeout(1)).isEqualTo(
+                RewardedVideoCompletionRequestHandler.RETRY_TIMES[1]);
+
+        assertThat(RewardedVideoCompletionRequestHandler.getTimeout(1234567)).isEqualTo(
+                maxTimeout);
+    }
+
+    @Test
+    public void retryTimes_shouldAllBeGreaterThanRequestTimeoutDelay() {
+        for (int retryTime : RewardedVideoCompletionRequestHandler.RETRY_TIMES) {
+            assertThat(
+                    retryTime - RewardedVideoCompletionRequestHandler.REQUEST_TIMEOUT_DELAY)
+                    .isGreaterThanOrEqualTo(0);
+        }
+    }
+
+    @Test
+    public void onErrorResponse_shouldSetShouldStopToTrueWhenResponseNot500To599() {
+        RewardedVideoCompletionRequestHandler subject =
+                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject.onErrorResponse(new VolleyError(new NetworkResponse(500, null, null, true)));
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onErrorResponse(new VolleyError(new NetworkResponse(501, null, null, true)));
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onErrorResponse(new VolleyError(new NetworkResponse(599, null, null, true)));
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onErrorResponse(new VolleyError(new NetworkResponse(200, null, null, true)));
+        assertThat(subject.getShouldStop()).isEqualTo(true);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onErrorResponse(new VolleyError(new NetworkResponse(499, null, null, true)));
+        assertThat(subject.getShouldStop()).isEqualTo(true);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onErrorResponse(new VolleyError(new NetworkResponse(600, null, null, true)));
+        assertThat(subject.getShouldStop()).isEqualTo(true);
+    }
+
+    @Test
+    public void onResponse_shouldSetShouldStopToTrueWhenResponseNot500To599() {
+        RewardedVideoCompletionRequestHandler subject =
+                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject.onResponse(500);
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onResponse(501);
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onResponse(599);
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onResponse(200);
+        assertThat(subject.getShouldStop()).isEqualTo(true);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onResponse(499);
+        assertThat(subject.getShouldStop()).isEqualTo(true);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onResponse(600);
+        assertThat(subject.getShouldStop()).isEqualTo(true);
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_shouldRetry() {
+        Handler mockHandler = mock(Handler.class);
+        RewardedVideoCompletionRequestHandler subject =
+                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id",
+                        mockHandler);
+
+        subject.makeRewardedVideoCompletionRequest();
+
+        assertThat(subject.getRetryCount()).isEqualTo(1);
+        verify(mockHandler).postDelayed(any(Runnable.class),
+                eq((long) RewardedVideoCompletionRequestHandler.RETRY_TIMES[0]));
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_shouldNotRetryIfShouldStopIsSetToTrue() {
+        Handler mockHandler = mock(Handler.class);
+        RewardedVideoCompletionRequestHandler subject =
+                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id",
+                        mockHandler);
+        // This should set shouldStop to true.
+        subject.onResponse(200);
+
+        subject.makeRewardedVideoCompletionRequest();
+
+        assertThat(subject.getShouldStop()).isTrue();
+        verifyZeroInteractions(mockHandler);
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_shouldNotRetryIfMaxRetriesReached() {
+        Handler mockHandler = mock(Handler.class);
+        RewardedVideoCompletionRequestHandler subject =
+                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id",
+                        mockHandler);
+        subject.setRetryCount(RewardedVideoCompletionRequestHandler.MAX_RETRIES);
+
+        subject.makeRewardedVideoCompletionRequest();
+
+        verifyZeroInteractions(mockHandler);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
index 56238936..af013817 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
@@ -28,7 +28,6 @@
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
 import com.mopub.mraid.MraidNativeCommandHandler;
-import com.mopub.network.Networking;
 import com.mopub.network.PlayServicesUrlRewriter;
 
 import org.junit.After;
@@ -712,7 +711,7 @@ public String build() {
             return "http://ads.mopub.com/m/ad" +
                     "?v=6" +
                     paramIfNotEmpty("id", adUnitId) +
-                    "&nv=" + MoPub.SDK_VERSION +
+                    "&nv=" + Uri.encode(MoPub.SDK_VERSION) +
                     "&dn=" + Build.MANUFACTURER +
                     "%2C" + Build.MODEL +
                     "%2C" + Build.PRODUCT +
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
index f824e000..4d79a2e2 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
@@ -409,7 +409,7 @@ public void handleClose_afterDestroy_shouldNotFireOnClose() {
     }
 
     @Test
-    public void handleClose_fromExpandedState_shouldMoveWebViewToOriginalContainer_shouldNotFireOnClose() throws MraidCommandException {
+    public void handleClose_fromExpandedState_shouldMoveWebViewToOriginalContainer_shouldFireOnClose() throws MraidCommandException {
         // Move to EXPANDED state
         subject.handlePageLoad();
         subject.handleExpand(null, false);
@@ -419,11 +419,11 @@ public void handleClose_fromExpandedState_shouldMoveWebViewToOriginalContainer_s
         assertThat(subject.getExpandedAdContainer().getChildCount()).isEqualTo(1);
         assertThat(subject.getAdContainer().getChildCount()).isEqualTo(1);
         assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
-        verify(mockMraidListener, never()).onClose();
+        verify(mockMraidListener).onClose();
     }
 
     @Test
-    public void handleClose_fromTwoPartExpandedState_shouldDetachTwoPartBridge_shouldMoveWebViewToOriginalContainer_shouldNotFireOnClose()
+    public void handleClose_fromTwoPartExpandedState_shouldDetachTwoPartBridge_shouldMoveWebViewToOriginalContainer_shouldFireOnClose()
             throws MraidCommandException {
         URI uri = URI.create("https://two-part-url");
 
@@ -439,7 +439,7 @@ public void handleClose_fromTwoPartExpandedState_shouldDetachTwoPartBridge_shoul
         assertThat(subject.getAdContainer().getChildCount()).isEqualTo(1);
         assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
 
-        verify(mockMraidListener, never()).onClose();
+        verify(mockMraidListener).onClose();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
index a9b49fa1..32c3c858 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
@@ -32,14 +32,14 @@ public void setUp() {
         subject = new AdapterHelper(context, start, interval);
     }
 
-    @Test(expected = IllegalArgumentException.class)
-    public void constructor_whenPassedAnApplicationContext_shouldThrowIllegalArgumentException() {
+    @Test
+    public void constructor_whenPassedAnApplicationContext_shouldNotThrowIllegalArgumentException() {
         new AdapterHelper(context.getApplicationContext(), start, interval);
     }
 
     @Test
     public void getAdView_withNullActivityContext_shouldReturnEmptyViewWithApplicationContext() {
-        subject.clearActivityContext();
+        subject.clearContext();
         Context viewContext = subject.getAdView(null, null, mock(NativeAd.class),
                 mock(ViewBinder.class)).getContext();
         assertThat(viewContext).isEqualTo(context.getApplication());
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
index a156332a..d8bb770b 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
@@ -83,12 +83,12 @@ public void registerAdRenderer_shouldCallAdRednererRegistryRegisterAdRenderer()
 
     @Test
     public void destroy_shouldSetListenersToEmptyAndClearContext() {
-        assertThat(subject.getActivityOrDestroy()).isSameAs(context);
+        assertThat(subject.getContextOrDestroy()).isSameAs(context);
         assertThat(subject.getMoPubNativeNetworkListener()).isSameAs(mockNetworkListener);
 
         subject.destroy();
 
-        assertThat(subject.getActivityOrDestroy()).isNull();
+        assertThat(subject.getContextOrDestroy()).isNull();
         assertThat(subject.getMoPubNativeNetworkListener()).isSameAs(EMPTY_NETWORK_LISTENER);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
index ed5f6839..b7f167b6 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
@@ -18,7 +18,6 @@
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
-import com.mopub.network.Networking;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -291,7 +290,7 @@ public void generateUrlString_withOnlyAdUnitSet_shouldReturnMinimumUrl() {
         assertThat(adUrl).isEqualTo(
                 "http://ads.mopub.com/m/ad?id=" +
                         AD_UNIT_ID +
-                        "&nsv=" + MoPub.SDK_VERSION + 
+                        "&nsv=" + Uri.encode(MoPub.SDK_VERSION) +
                         "&dn=unknown%2Cunknown%2Cunknown" +
                         "&bundle=testBundle" +
                         "&z=-0700" +
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
index 4431db2d..c176e2a4 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
@@ -93,9 +93,9 @@ public void constructor_shouldSetOnPreDrawListenerForDecorView() throws Exceptio
         when(viewTreeObserver.isAlive()).thenReturn(true);
 
         subject = new VisibilityTracker(activity1, trackedViews, visibilityChecker, visibilityHandler);
-        assertThat(subject.mRootView.get()).isEqualTo(decorView);
         assertThat(subject.mOnPreDrawListener).isNotNull();
         verify(viewTreeObserver).addOnPreDrawListener(subject.mOnPreDrawListener);
+        assertThat(subject.mWeakViewTreeObserver.get()).isEqualTo(viewTreeObserver);
     }
 
     @Test
@@ -111,9 +111,72 @@ public void constructor_withNonAliveViewTreeObserver_shouldNotSetOnPreDrawListen
         when(viewTreeObserver.isAlive()).thenReturn(false);
 
         subject = new VisibilityTracker(activity1, trackedViews, visibilityChecker, visibilityHandler);
-        assertThat(subject.mRootView.get()).isEqualTo(decorView);
-        assertThat(subject.mOnPreDrawListener).isNull();
         verify(viewTreeObserver, never()).addOnPreDrawListener(subject.mOnPreDrawListener);
+        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
+    }
+
+    @Test
+    public void constructor_withApplicationContext_shouldNotSetOnPreDrawListener() {
+        subject = new VisibilityTracker(activity.getApplicationContext(), trackedViews,
+                visibilityChecker, visibilityHandler);
+
+        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
+    }
+
+    @Test
+    public void getBestRootView_withActivity_withNullView_shouldReturnActivityDecorView() {
+        Activity activity1 = mock(Activity.class);
+        Window window = mock(Window.class);
+        View decorView = mock(View.class);
+        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
+
+        when(activity1.getWindow()).thenReturn(window);
+        when(window.getDecorView()).thenReturn(decorView);
+        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
+        when(viewTreeObserver.isAlive()).thenReturn(true);
+
+        View view = VisibilityTracker.getBestRootView(activity1, null);
+
+        assertThat(view).isEqualTo(decorView);
+    }
+
+    @Test
+    public void getBestRootView_withApplicationContext_withRootView_shouldReturnRootView() {
+        View rootView = new View(activity.getApplicationContext());
+
+        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), rootView);
+
+        assertThat(view).isEqualTo(rootView);
+    }
+
+    @Test
+    public void getBestRootView_withApplicationContext_withContentView_shouldReturnContentView() {
+        View rootView = mock(View.class);
+        View contentView = mock(View.class);
+
+        when(rootView.findViewById(android.R.id.content)).thenReturn(contentView);
+        when(rootView.getRootView()).thenReturn(rootView);
+
+        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), rootView);
+
+        assertThat(view).isEqualTo(contentView);
+    }
+
+    @Test
+    public void getBestRootView_withApplicationContext_withNullView_shouldReturnNull() {
+        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), null);
+
+        assertThat(view).isNull();
+    }
+
+    @Test
+    public void getBestRootView_withApplicationContext_withNullRootView_withNullParentView_shouldReturnNull() {
+        View originalView = mock(View.class);
+        when(originalView.getRootView()).thenReturn(null);
+
+        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), originalView);
+
+        assertThat(view).isNull();
     }
 
     @Test
@@ -123,7 +186,24 @@ public void addView_withVisibleView_shouldAddVisibleViewToTrackedViews() throws
         assertThat(trackedViews).hasSize(1);
     }
 
-    @Test(expected = AssertionError.class)
+    @Test
+    public void addView_withViewTreeObserverNotSet_shouldSetViewTreeObserver() {
+        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
+        View rootView = mock(View.class);
+
+        when(view.getContext()).thenReturn(activity.getApplicationContext());
+        when(view.getRootView()).thenReturn(rootView);
+        when(rootView.getViewTreeObserver()).thenReturn(viewTreeObserver);
+        when(viewTreeObserver.isAlive()).thenReturn(true);
+
+        subject = new VisibilityTracker(activity.getApplicationContext(), trackedViews,
+                visibilityChecker, visibilityHandler);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED);
+
+        assertThat(subject.mWeakViewTreeObserver.get()).isEqualTo(viewTreeObserver);
+    }
+
+    @Test(expected = NullPointerException.class)
     public void addView_whenViewIsNull_shouldThrowNPE() throws Exception {
         subject.addView(null, MIN_PERCENTAGE_VIEWED);
 
@@ -177,7 +257,7 @@ public void destroy_shouldCallClear_shouldRemoveListenerFromDecorView() throws E
         assertThat(trackedViews).isEmpty();
         verify(visibilityHandler).removeMessages(0);
         verify(viewTreeObserver).removeOnPreDrawListener(any(OnPreDrawListener.class));
-        assertThat(subject.mOnPreDrawListener).isNull();
+        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
index 47364714..4c3c70e8 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
@@ -347,6 +347,8 @@ public void parseNetworkResponse_forRewardedVideo_shouldSucceed() {
         defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.REWARDED_VIDEO);
         defaultHeaders.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_NAME.getKey(), "currencyName");
         defaultHeaders.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_AMOUNT.getKey(), "25");
+        defaultHeaders.put(ResponseHeader.REWARDED_VIDEO_COMPLETION_URL.getKey(),
+                "http://completionUrl");
         NetworkResponse testResponse = new NetworkResponse(200,
                 "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
 
@@ -355,6 +357,8 @@ public void parseNetworkResponse_forRewardedVideo_shouldSucceed() {
         assertThat(response.result.getAdType()).isEqualTo(AdType.REWARDED_VIDEO);
         assertThat(response.result.getRewardedVideoCurrencyName()).isEqualTo("currencyName");
         assertThat(response.result.getRewardedVideoCurrencyAmount()).isEqualTo("25");
+        assertThat(response.result.getRewardedVideoCompletionUrl()).isEqualTo(
+                "http://completionUrl");
     }
 
     @Test
