diff --git a/CHANGELOG.md b/CHANGELOG.md
index 1a7eb766..ea2384c5 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,10 @@
+## Version 5.0.0 (May 14, 2018)
+- General Data Protection Regulation (GDPR) update to support a way for publishers to determine GDPR applicability and to obtain and manage consent from users in European Economic Area, the United Kingdom, or Switzerland to serve personalized ads.
+- New SDK initialization method to initialize consent management and rewarded video ad networks. Required for receiving personalized ads. In future versions of the SDK, initialization will be required to receive ads.
+- Updated network stack to MoPub-Volley-2.0.0.
+- Updated ad requests to use POST instead of GET.
+- All communication with MoPub servers is now made via HTTPS.
+
 ## Version 4.20.0 (February 20, 2018)
 - Upgraded Gradle dependency to 4.3.1.
 - Upgraded Moat dependency to 2.4.1. This fixes the AAPT2 manifest merge error.
diff --git a/README.md b/README.md
index e866608d..5f138b42 100644
--- a/README.md
+++ b/README.md
@@ -39,7 +39,7 @@ The MoPub SDK is available via:
     }
 
     dependencies {
-        implementation('com.mopub:mopub-sdk:4.20.0@aar') {
+        implementation('com.mopub:mopub-sdk:5.0.0@aar') {
             transitive = true
         }
     }
@@ -61,27 +61,27 @@ The MoPub SDK is available via:
         // ... other project dependencies
 
         // For banners
-        implementation('com.mopub:mopub-sdk-banner:4.20.0@aar') {
+        implementation('com.mopub:mopub-sdk-banner:5.0.0@aar') {
             transitive = true
         }
         
         // For interstitials
-        implementation('com.mopub:mopub-sdk-interstitial:4.20.0@aar') {
+        implementation('com.mopub:mopub-sdk-interstitial:5.0.0@aar') {
             transitive = true
         }
 
         // For rewarded videos. This will automatically also include interstitials
-        implementation('com.mopub:mopub-sdk-rewardedvideo:4.20.0@aar') {
+        implementation('com.mopub:mopub-sdk-rewardedvideo:5.0.0@aar') {
             transitive = true
         }
 
         // For native static (images).
-        implementation('com.mopub:mopub-sdk-native-static:4.20.0@aar') {
+        implementation('com.mopub:mopub-sdk-native-static:5.0.0@aar') {
             transitive = true
         }
 
         // For native video. This will automatically also include native static
-        implementation('com.mopub:mopub-sdk-native-video:4.20.0@aar') {
+        implementation('com.mopub:mopub-sdk-native-video:5.0.0@aar') {
             transitive = true
         }
     }
@@ -109,11 +109,11 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- Upgraded Gradle dependency to 4.3.1.
-- Upgraded Moat dependency to 2.4.1. This fixes the AAPT2 manifest merge error.
-- Fixed a viewability bug for video ads where ViewGroups were not being properly added to the list of known obstructions.
-- We are formally separating network adapters from our MoPub SDK. This is to enable an independent release cadence resulting in faster updates and certification cycles. New mediation location is accessible [here](https://github.com/mopub/mopub-android-mediation).  
-We have also added an additional tool, making it easy for publishers to get up and running with the mediation integration. Check out https://developers.mopub.com/docs/mediation/integrate/ and integration instructions at https://developers.mopub.com/docs/android/integrating-networks/.
+- General Data Protection Regulation (GDPR) update to support a way for publishers to determine GDPR applicability and to obtain and manage consent from users in European Economic Area, the United Kingdom, or Switzerland to serve personalized ads.
+- New SDK initialization method to initialize consent management and rewarded video ad networks. Required for receiving personalized ads. In future versions of the SDK, initialization will be required to receive ads.
+- Updated network stack to MoPub-Volley-2.0.0.
+- Updated ad requests to use POST instead of GET.
+- All communication with MoPub servers is now made via HTTPS.
 
 ## Requirements
 
@@ -121,9 +121,15 @@ We have also added an additional tool, making it easy for publishers to get up a
 - android-support-v4.jar, r26 (**Updated in 4.18.0**)
 - android-support-annotations.jar, r26 (**Updated in 4.18.0**)
 - android-support-v7-recyclerview.jar, r26 (**Updated in 4.18.0**)
-- MoPub Volley Library (mopub-volley-1.1.0.jar - available on JCenter) (**Updated in 3.6.0**)
+- MoPub Volley Library (mopub-volley-2.0.0.jar - available on JCenter) (**Updated in 5.0.0**)
 - **Recommended** Google Play Services 11.4.0
 
+## Upgrading to SDK 5.0
+
+Please see the [Getting Started Guide](https://developers.mopub.com/docs/android/getting-started/) for instructions on upgrading from SDK 4.X to SDK 5.0.
+
+For GDPR-specific upgrading instructions, also see the [GDPR Integration Guide](https://developers.mopub.com/docs/android/gdpr/).
+
 ## <a name="upgradeRepositoryViewability"></a>Upgrading from 4.15.0 and Prior
 In 4.16.0, dependencies were added to viewability libraries provided by AVID and Moat. Apps upgrading from previous versions must add
 `maven { url "https://s3.amazonaws.com/moat-sdk-builds" }`
@@ -136,7 +142,7 @@ Normally, to add the MoPub SDK to your app via JCenter, your `build.gradle` woul
 
 ```	
 dependencies {
-    implementation('com.mopub:mopub-sdk:4.20.0@aar') {
+    implementation('com.mopub:mopub-sdk:5.0.0@aar') {
         transitive = true
     }
 }
diff --git a/build.gradle b/build.gradle
index f41f81d2..4fcc6995 100644
--- a/build.gradle
+++ b/build.gradle
@@ -6,8 +6,8 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:3.0.0'
-        classpath 'com.novoda:bintray-release:0.7.0'
+        classpath 'com.android.tools.build:gradle:3.0.1'
+        classpath 'com.novoda:bintray-release:0.8.0'
     }
 }
 
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 93dfd86c..87e3681b 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="58"
-      android:versionName="4.20.0">
+      android:versionCode="59"
+      android:versionName="5.0.0">
     <uses-sdk android:minSdkVersion="16"
               android:targetSdkVersion="26"/>
 
@@ -42,6 +42,9 @@
         <activity android:name="com.mopub.mobileads.RewardedMraidActivity"
                   android:configChanges="keyboardHidden|orientation|screenSize"/>
 
+        <activity android:name="com.mopub.common.privacy.ConsentDialogActivity"
+                  android:configChanges="keyboardHidden|orientation|screenSize"/>
+
         <meta-data android:name="com.google.android.gms.version"
                    android:value="@integer/google_play_services_version" />
     </application>
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index 4ef3b197..ab305e15 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -11,7 +11,7 @@ apply plugin: 'com.android.application'
 
 project.group = 'com.mopub'
 project.description = '''MoPub Sample App'''
-project.version = '4.20.0'
+project.version = '5.0.0'
 
 android {
     compileSdkVersion 26
@@ -19,7 +19,7 @@ android {
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 58
+        versionCode 59
         versionName version
         minSdkVersion 16
         targetSdkVersion 26
@@ -62,6 +62,4 @@ dependencies {
     implementation 'com.google.android.gms:play-services-base:11.4.0'
     implementation 'com.android.support:recyclerview-v7:26.1.0'
     implementation project(':mopub-sdk')
-    implementation('com.mopub:libAvid-mopub:3.6.4')
-    implementation 'com.moat.analytics.mobile.mpub:moat-mobile-app-kit:2.1.0'
 }
diff --git a/mopub-sample/res/layout/banner_detail_fragment.xml b/mopub-sample/res/layout/banner_detail_fragment.xml
index b910e373..35241ce3 100644
--- a/mopub-sample/res/layout/banner_detail_fragment.xml
+++ b/mopub-sample/res/layout/banner_detail_fragment.xml
@@ -28,14 +28,23 @@
         android:textSize="14sp"
         android:textStyle="normal" />
 
+    <EditText
+        android:id="@+id/keywords_field"
+        android:hint="@string/keywords"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:inputType="text|textFilter|textShortMessage"
+        android:imeOptions="actionDone"
+        android:singleLine="true" />
+
     <LinearLayout
         android:orientation="horizontal"
         android:layout_width="match_parent"
         android:layout_height="wrap_content">
 
         <EditText
-            android:id="@+id/keywords_field"
-            android:hint="@string/keywords"
+            android:id="@+id/user_data_keywords_field"
+            android:hint="@string/user_data_keywords"
             android:layout_width="0dp"
             android:layout_height="wrap_content"
             android:layout_weight="3"
diff --git a/mopub-sample/res/layout/interstitial_detail_fragment.xml b/mopub-sample/res/layout/interstitial_detail_fragment.xml
index 6f060ff6..03f4888b 100644
--- a/mopub-sample/res/layout/interstitial_detail_fragment.xml
+++ b/mopub-sample/res/layout/interstitial_detail_fragment.xml
@@ -37,6 +37,15 @@
         android:imeOptions="actionDone"
         android:singleLine="true" />
 
+    <EditText
+        android:id="@+id/user_data_keywords_field"
+        android:hint="@string/user_data_keywords"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:inputType="text|textFilter|textShortMessage"
+        android:imeOptions="actionDone"
+        android:singleLine="true" />
+
     <EditText
         android:id="@+id/custom_data_field"
         android:visibility="gone"
diff --git a/mopub-sample/res/layout/native_gallery_fragment.xml b/mopub-sample/res/layout/native_gallery_fragment.xml
index 530ab4bc..d368cc44 100644
--- a/mopub-sample/res/layout/native_gallery_fragment.xml
+++ b/mopub-sample/res/layout/native_gallery_fragment.xml
@@ -27,17 +27,26 @@
         android:textSize="14sp"
         android:textStyle="normal"/>
 
+    <EditText
+        android:id="@+id/keywords_field"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:hint="@string/keywords"
+        android:imeOptions="actionDone"
+        android:inputType="text|textFilter|textShortMessage"
+        android:singleLine="true"/>
+
     <LinearLayout
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:orientation="horizontal">
 
         <EditText
-            android:id="@+id/keywords_field"
+            android:id="@+id/user_data_keywords_field"
             android:layout_width="0dp"
             android:layout_height="wrap_content"
             android:layout_weight="3"
-            android:hint="@string/keywords"
+            android:hint="@string/user_data_keywords"
             android:imeOptions="actionDone"
             android:inputType="text|textFilter|textShortMessage"
             android:singleLine="true"/>
diff --git a/mopub-sample/res/layout/native_list_view_fragment.xml b/mopub-sample/res/layout/native_list_view_fragment.xml
index d63273d1..0944ac52 100644
--- a/mopub-sample/res/layout/native_list_view_fragment.xml
+++ b/mopub-sample/res/layout/native_list_view_fragment.xml
@@ -27,17 +27,26 @@
         android:textSize="14sp"
         android:textStyle="normal"/>
 
+    <EditText
+        android:id="@+id/keywords_field"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:hint="@string/keywords"
+        android:imeOptions="actionDone"
+        android:inputType="text|textFilter|textShortMessage"
+        android:singleLine="true"/>
+
     <LinearLayout
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:orientation="horizontal">
 
         <EditText
-            android:id="@+id/keywords_field"
+            android:id="@+id/user_data_keywords_field"
             android:layout_width="0dp"
             android:layout_height="wrap_content"
             android:layout_weight="3"
-            android:hint="@string/keywords"
+            android:hint="@string/user_data_keywords"
             android:imeOptions="actionDone"
             android:inputType="text|textFilter|textShortMessage"
             android:singleLine="true"/>
diff --git a/mopub-sample/res/layout/recycler_view_fragment.xml b/mopub-sample/res/layout/recycler_view_fragment.xml
index 0d04e5a9..f35696c6 100644
--- a/mopub-sample/res/layout/recycler_view_fragment.xml
+++ b/mopub-sample/res/layout/recycler_view_fragment.xml
@@ -25,17 +25,26 @@
         android:textSize="14sp"
         android:textStyle="normal"/>
 
+    <EditText
+        android:id="@+id/keywords_field"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:hint="@string/keywords"
+        android:imeOptions="actionDone"
+        android:inputType="text|textFilter|textShortMessage"
+        android:singleLine="true"/>
+
     <LinearLayout
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:orientation="horizontal">
 
         <EditText
-            android:id="@+id/keywords_field"
+            android:id="@+id/user_data_keywords_field"
             android:layout_width="0dp"
             android:layout_height="wrap_content"
             android:layout_weight="3"
-            android:hint="@string/keywords"
+            android:hint="@string/user_data_keywords"
             android:imeOptions="actionDone"
             android:inputType="text|textFilter|textShortMessage"
             android:singleLine="true"/>
diff --git a/mopub-sample/res/values/strings.xml b/mopub-sample/res/values/strings.xml
index 98143ede..290904ee 100644
--- a/mopub-sample/res/values/strings.xml
+++ b/mopub-sample/res/values/strings.xml
@@ -2,6 +2,7 @@
 <resources>
     <string name="app_name">MoPub Sample App</string>
     <string name="keywords">Keywords (optional)</string>
+    <string name="user_data_keywords">User Data Keywords (optional)</string>
     <string name="custom_data">Custom Data (optional)</string>
     <string name="load_ad">Load Ad</string>
     <string name="refresh_ad">Refresh Ad</string>
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
index c92575b3..044b0f43 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
@@ -45,7 +45,8 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
         mMoPubView.setLayoutParams(layoutParams);
 
         views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
-        hideSoftKeyboard(views.mKeywordsField);
+        views.mUserDataKeywordsField.setText(getArguments().getString(MoPubListFragment.USER_DATA_KEYWORDS_KEY, ""));
+        hideSoftKeyboard(views.mUserDataKeywordsField);
 
         final String adUnitId = mMoPubSampleAdUnit.getAdUnitId();
         views.mDescriptionView.setText(mMoPubSampleAdUnit.getDescription());
@@ -54,11 +55,12 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
             @Override
             public void onClick(View view) {
                 final String keywords = views.mKeywordsField.getText().toString();
-                loadMoPubView(adUnitId, keywords);
+                final String userDataKeywords = views.mUserDataKeywordsField.getText().toString();
+                loadMoPubView(adUnitId, keywords, userDataKeywords);
             }
         });
         mMoPubView.setBannerAdListener(this);
-        loadMoPubView(adUnitId, null);
+        loadMoPubView(adUnitId, null, null);
 
         return view;
     }
@@ -73,9 +75,10 @@ public void onDestroyView() {
         }
     }
 
-    private void loadMoPubView(final String adUnitId, final String keywords) {
+    private void loadMoPubView(final String adUnitId, final String keywords, final String userDataKeywords) {
         mMoPubView.setAdUnitId(adUnitId);
         mMoPubView.setKeywords(keywords);
+        mMoPubView.setUserDataKeywords(userDataKeywords);
         mMoPubView.loadAd();
     }
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/DetailFragmentViewHolder.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/DetailFragmentViewHolder.java
index 8d870afd..e5e8118b 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/DetailFragmentViewHolder.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/DetailFragmentViewHolder.java
@@ -17,6 +17,7 @@
     @Nullable final Button mShowButton;
     @NonNull final TextView mAdUnitIdView;
     @NonNull final EditText mKeywordsField;
+    @NonNull final EditText mUserDataKeywordsField;
     @Nullable final EditText mCustomDataField;
 
     /**
@@ -26,8 +27,9 @@
      * @param adUnitIdView Displays adUnitId
      * @param loadButton Loads an ad. For non-cached ad formats, this will also display the ad
      * @param showButton Displays an ad. (optional, only defined for interstitial and rewarded ads)
-     * @param keywordsField Keyword entry field. This is eventually passed in the 'q' query
-     *                      parameter in the ad request
+     * @param keywordsField  Application keywords. This is passed in the 'q' query parameter
+     * @param userDataKeywordsField User data keyword entry field. This is eventually passed in the
+     *                      'user_data_q' query parameter in the ad request
      * @param customDataField Custom data entry field. Used to include arbitrary data to rewarded
      *                        completion URLs. View visibility defaults to {@link View#GONE}.
      *                        (optional, only defined for rewarded ads)
@@ -38,12 +40,14 @@ private DetailFragmentViewHolder(
             @NonNull final Button loadButton,
             @Nullable final Button showButton,
             @NonNull final EditText keywordsField,
+            @NonNull final EditText userDataKeywordsField,
             @Nullable final EditText customDataField) {
         mDescriptionView = descriptionView;
         mAdUnitIdView = adUnitIdView;
         mLoadButton = loadButton;
         mShowButton = showButton;
         mKeywordsField = keywordsField;
+        mUserDataKeywordsField = userDataKeywordsField;
         mCustomDataField = customDataField;
     }
 
@@ -53,9 +57,10 @@ static DetailFragmentViewHolder fromView(@NonNull final View view) {
         final Button loadButton = (Button) view.findViewById(R.id.load_button);
         final Button showButton = (Button) view.findViewById(R.id.show_button);
         final EditText keywordsField = (EditText) view.findViewById(R.id.keywords_field);
+        final EditText userDataKeywordsField = (EditText) view.findViewById(R.id.user_data_keywords_field);
         final EditText customDataField = (EditText) view.findViewById(R.id.custom_data_field);
 
         return new DetailFragmentViewHolder(descriptionView, adUnitIdView, loadButton, showButton,
-                keywordsField, customDataField);
+                keywordsField, userDataKeywordsField, customDataField);
     }
 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
index fec98dd9..1c996ffd 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
@@ -21,12 +21,12 @@
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
         super.onCreateView(inflater, container, savedInstanceState);
-        final MoPubSampleAdUnit adConfiguration =
-                MoPubSampleAdUnit.fromBundle(getArguments());
+        final MoPubSampleAdUnit adConfiguration = MoPubSampleAdUnit.fromBundle(getArguments());
         final View view = inflater.inflate(R.layout.interstitial_detail_fragment, container, false);
         final DetailFragmentViewHolder views = DetailFragmentViewHolder.fromView(view);
         views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
-        hideSoftKeyboard(views.mKeywordsField);
+        views.mUserDataKeywordsField.setText(getArguments().getString(MoPubListFragment.USER_DATA_KEYWORDS_KEY, ""));
+        hideSoftKeyboard(views.mUserDataKeywordsField);
 
         final String adUnitId = adConfiguration.getAdUnitId();
         views.mDescriptionView.setText(adConfiguration.getDescription());
@@ -40,7 +40,9 @@ public void onClick(View view) {
                     mMoPubInterstitial.setInterstitialAdListener(InterstitialDetailFragment.this);
                 }
                 final String keywords = views.mKeywordsField.getText().toString();
+                final String userDatakeywords = views.mUserDataKeywordsField.getText().toString();
                 mMoPubInterstitial.setKeywords(keywords);
+                mMoPubInterstitial.setUserDataKeywords(userDatakeywords);
                 mMoPubInterstitial.load();
             }
         });
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
index c39e77f5..28dd1893 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
@@ -33,10 +33,6 @@ static void enableCanaryLogging(@NonNull final Context context) {
             return;
         }
 
-        // This makes sure the static block in MoPubLog is executed before
-        // LogManager#getLogManager is called.
-        MoPubLog.c("Canary level logging enabled");
-
         final Handler handler = new SampleAppLogHandler(context.getApplicationContext());
         final Logger logger = getLogger();
         logger.addHandler(handler);
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
index ce6d1e79..7d16e54a 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
@@ -33,16 +33,15 @@
 import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType;
 import static com.mopub.simpleadsdemo.Utils.logToast;
 
-
 interface TrashCanClickListener {
     void onTrashCanClicked(MoPubSampleAdUnit adUnit);
 }
 
 public class MoPubListFragment extends ListFragment implements TrashCanClickListener {
-
     private static final String AD_UNIT_ID_KEY = "adUnitId";
     private static final String FORMAT_KEY = "format";
     static final String KEYWORDS_KEY = "keywords";
+    static final String USER_DATA_KEYWORDS_KEY = "user_data_keywords";
     private static final String NAME_KEY = "name";
 
     private MoPubSampleListAdapter mAdapter;
@@ -80,7 +79,8 @@ void addAdUnitViaDeeplink(@Nullable final Uri deeplinkData) {
         final MoPubSampleAdUnit adUnit = new MoPubSampleAdUnit.Builder(adUnitId,
                 adType).description(name == null ? "" : name).build();
         final MoPubSampleAdUnit newAdUnit = addAdUnit(adUnit);
-        enterAdFragment(newAdUnit, deeplinkData.getQueryParameter(KEYWORDS_KEY));
+        enterAdFragment(newAdUnit, deeplinkData.getQueryParameter(KEYWORDS_KEY),
+                deeplinkData.getQueryParameter(USER_DATA_KEYWORDS_KEY));
     }
 
     @Override
@@ -107,12 +107,12 @@ public void onListItemClick(ListView listView, View view, int position, long id)
         final MoPubSampleAdUnit adConfiguration = mAdapter.getItem(position);
 
         if (adConfiguration != null) {
-            enterAdFragment(adConfiguration, null);
+            enterAdFragment(adConfiguration, null, null);
         }
     }
 
     private void enterAdFragment(@NonNull final MoPubSampleAdUnit adConfiguration,
-            @Nullable final String keywords) {
+             @Nullable final String keywords, @Nullable final String userDataKeywords) {
         Preconditions.checkNotNull(adConfiguration);
 
         final FragmentTransaction fragmentTransaction =
@@ -135,6 +135,9 @@ private void enterAdFragment(@NonNull final MoPubSampleAdUnit adConfiguration,
         if (!TextUtils.isEmpty(keywords)) {
             bundle.putString(KEYWORDS_KEY, keywords);
         }
+        if (!TextUtils.isEmpty(userDataKeywords)) {
+            bundle.putString(USER_DATA_KEYWORDS_KEY, userDataKeywords);
+        }
         fragment.setArguments(bundle);
 
         if (getFragmentManager().getBackStackEntryCount() > 0) {
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
index a40e9dfb..08756572 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
@@ -5,12 +5,20 @@
 import android.os.Build;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.v4.app.ActivityCompat;
 import android.support.v4.app.FragmentActivity;
 import android.webkit.WebView;
 
 import com.mopub.common.MoPub;
+import com.mopub.common.SdkConfiguration;
+import com.mopub.common.SdkInitializationListener;
+import com.mopub.common.privacy.ConsentDialogListener;
+import com.mopub.common.privacy.ConsentStatus;
+import com.mopub.common.privacy.ConsentStatusChangeListener;
+import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.common.util.DeviceUtils;
+import com.mopub.mobileads.MoPubErrorCode;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -20,7 +28,8 @@
 import static com.mopub.common.Constants.UNUSED_REQUEST_CODE;
 
 public class MoPubSampleActivity extends FragmentActivity {
-    private static final List<String> REQUIRED_DANGEROUS_PERMISSIONS = new ArrayList<String>();
+    private static final List<String> REQUIRED_DANGEROUS_PERMISSIONS = new ArrayList<>();
+
     static {
         REQUIRED_DANGEROUS_PERMISSIONS.add(ACCESS_COARSE_LOCATION);
         REQUIRED_DANGEROUS_PERMISSIONS.add(WRITE_EXTERNAL_STORAGE);
@@ -40,17 +49,15 @@ private static void setWebDebugging() {
 
     private MoPubListFragment mMoPubListFragment;
     private Intent mDeeplinkIntent;
+    @Nullable
+    PersonalInfoManager mPersonalInfoManager;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.main);
 
-        if (savedInstanceState != null) {
-            return;
-        }
-
-        List<String> permissionsToBeRequested = new ArrayList<String>();
+        List<String> permissionsToBeRequested = new ArrayList<>();
         for (String permission : REQUIRED_DANGEROUS_PERMISSIONS) {
             if (!DeviceUtils.isPermissionGranted(this, permission)) {
                 permissionsToBeRequested.add(permission);
@@ -67,7 +74,18 @@ protected void onCreate(Bundle savedInstanceState) {
         MoPub.setLocationAwareness(MoPub.LocationAwareness.TRUNCATED);
         MoPub.setLocationPrecision(4);
 
-        createMoPubListFragment(getIntent());
+        if (savedInstanceState == null) {
+            createMoPubListFragment(getIntent());
+        }
+
+        SdkConfiguration sdkConfiguration = new SdkConfiguration.Builder("b195f8dd8ded45fe847ad89ed1d016da")
+                .build();
+        MoPub.initializeSdk(this, sdkConfiguration, initSdkListener());
+
+        mPersonalInfoManager = MoPub.getPersonalInformationManager();
+        if (mPersonalInfoManager != null) {
+            mPersonalInfoManager.subscribeConsentStatusChangeListener(initConsentChangeListener());
+        }
 
         // Intercepts all logs including Level.FINEST so we can show a toast
         // that is not normally user-facing. This is only used for native ads.
@@ -98,4 +116,49 @@ public void onPostResume() {
             mDeeplinkIntent = null;
         }
     }
+
+    private SdkInitializationListener initSdkListener() {
+        return new SdkInitializationListener() {
+
+            @Override
+            public void onInitializationFinished() {
+                Utils.logToast(MoPubSampleActivity.this, "SDK initialized.");
+                if (mPersonalInfoManager != null && mPersonalInfoManager.shouldShowConsentDialog()) {
+                    mPersonalInfoManager.loadConsentDialog(initDialogLoadListener());
+                }
+            }
+        };
+    }
+
+    private ConsentStatusChangeListener initConsentChangeListener() {
+        return new ConsentStatusChangeListener() {
+
+            @Override
+            public void onConsentStateChange(@NonNull ConsentStatus oldConsentStatus,
+                                             @NonNull ConsentStatus newConsentStatus,
+                                             boolean canCollectPersonalInformation) {
+                Utils.logToast(MoPubSampleActivity.this, "Consent: " + newConsentStatus.name());
+                if (mPersonalInfoManager != null && mPersonalInfoManager.shouldShowConsentDialog()) {
+                    mPersonalInfoManager.loadConsentDialog(initDialogLoadListener());
+                }
+            }
+        };
+    }
+
+    private ConsentDialogListener initDialogLoadListener() {
+        return new ConsentDialogListener() {
+
+            @Override
+            public void onConsentDialogLoaded() {
+                if (mPersonalInfoManager != null) {
+                    mPersonalInfoManager.showConsentDialog();
+                }
+            }
+
+            @Override
+            public void onConsentDialogLoadFailed(@NonNull MoPubErrorCode moPubErrorCode) {
+                Utils.logToast(MoPubSampleActivity.this, "Consent dialog failed to load.");
+            }
+        };
+    }
 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
index b62f18c5..aeb3e4ff 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
@@ -44,6 +44,7 @@ public void onClick(View view) {
                 // If your app already has location access, include it here.
                 final Location location = null;
                 final String keywords = views.mKeywordsField.getText().toString();
+                final String userDataKeywords = views.mUserDataKeywordsField.getText().toString();
 
                 // Setting desired assets on your request helps native ad networks and bidders
                 // provide higher-quality ads.
@@ -57,6 +58,7 @@ public void onClick(View view) {
                 mRequestParameters = new RequestParameters.Builder()
                         .location(location)
                         .keywords(keywords)
+                        .userDataKeywords(userDataKeywords)
                         .desiredAssets(desiredAssets)
                         .build();
 
@@ -70,6 +72,7 @@ public void onClick(View view) {
         views.mDescriptionView.setText(mAdConfiguration.getDescription());
         views.mAdUnitIdView.setText(adUnitId);
         views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
+        views.mUserDataKeywordsField.setText(getArguments().getString(MoPubListFragment.USER_DATA_KEYWORDS_KEY, ""));
         mViewPager = (ViewPager) view.findViewById(R.id.gallery_pager);
 
         // Set up a renderer for a static native ad.
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
index 6616d4e3..3c9bbb99 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
@@ -42,6 +42,7 @@ public void onClick(View view) {
                 // If your app already has location access, include it here.
                 final Location location = null;
                 final String keywords = views.mKeywordsField.getText().toString();
+                final String userDataKeywords = views.mUserDataKeywordsField.getText().toString();
 
                 // Setting desired assets on your request helps native ad networks and bidders
                 // provide higher-quality ads.
@@ -55,6 +56,7 @@ public void onClick(View view) {
                 mRequestParameters = new RequestParameters.Builder()
                         .location(location)
                         .keywords(keywords)
+                        .userDataKeywords(userDataKeywords)
                         .desiredAssets(desiredAssets)
                         .build();
 
@@ -65,6 +67,7 @@ public void onClick(View view) {
         views.mDescriptionView.setText(mAdConfiguration.getDescription());
         views.mAdUnitIdView.setText(adUnitId);
         views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
+        views.mUserDataKeywordsField.setText(getArguments().getString(MoPubListFragment.USER_DATA_KEYWORDS_KEY, ""));
 
         final ArrayAdapter<String> adapter = new ArrayAdapter<String>(getActivity(),
                 android.R.layout.simple_list_item_1);
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
index f9b9d095..cb899fe3 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
@@ -56,6 +56,7 @@ public void onClick(final View v) {
                 // If your app already has location access, include it here.
                 final Location location = null;
                 final String keywords = viewHolder.mKeywordsField.getText().toString();
+                final String userDataKeywords = viewHolder.mUserDataKeywordsField.getText().toString();
 
                 // Setting desired assets on your request helps native ad networks and bidders
                 // provide higher-quality ads.
@@ -69,6 +70,7 @@ public void onClick(final View v) {
                 mRequestParameters = new RequestParameters.Builder()
                         .location(location)
                         .keywords(keywords)
+                        .userDataKeywords(userDataKeywords)
                         .desiredAssets(desiredAssets)
                         .build();
 
@@ -81,6 +83,7 @@ public void onClick(final View v) {
         viewHolder.mDescriptionView.setText(mAdConfiguration.getDescription());
         viewHolder.mAdUnitIdView.setText(adUnitId);
         viewHolder.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
+        viewHolder.mUserDataKeywordsField.setText(getArguments().getString(MoPubListFragment.USER_DATA_KEYWORDS_KEY, ""));
 
         final RecyclerView.Adapter originalAdapter = new DemoRecyclerAdapter();
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
index 8f66f3d2..747df6ea 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
@@ -13,8 +13,9 @@
 import android.view.ViewGroup;
 import android.widget.Button;
 
+import com.mopub.common.MoPub;
 import com.mopub.common.MoPubReward;
-import com.mopub.mobileads.CustomEventRewardedVideo;
+import com.mopub.common.SdkConfiguration;
 import com.mopub.mobileads.MoPubErrorCode;
 import com.mopub.mobileads.MoPubRewardedVideoListener;
 import com.mopub.mobileads.MoPubRewardedVideoManager.RequestParameters;
@@ -35,8 +36,7 @@
     private static boolean sRewardedVideoInitialized;
 
     // Include any custom event rewarded video classes, if available, for initialization.
-    private static final List<Class<? extends CustomEventRewardedVideo>> sNetworksToInit =
-            new LinkedList<>();
+    private static final List<String> sNetworksToInit = new LinkedList<>();
 
     @Nullable private Button mShowButton;
     @Nullable private String mAdUnitId;
@@ -51,10 +51,14 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
         final View view = inflater.inflate(R.layout.interstitial_detail_fragment, container, false);
         final DetailFragmentViewHolder views = DetailFragmentViewHolder.fromView(view);
         views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
+        views.mUserDataKeywordsField.setText(getArguments().getString(MoPubListFragment.USER_DATA_KEYWORDS_KEY, ""));
         hideSoftKeyboard(views.mKeywordsField);
+        hideSoftKeyboard(views.mUserDataKeywordsField);
 
         if (!sRewardedVideoInitialized) {
-            MoPubRewardedVideos.initializeRewardedVideo(getActivity(), sNetworksToInit);
+            MoPub.initializeSdk(getActivity(), new SdkConfiguration.Builder(
+                            "b195f8dd8ded45fe847ad89ed1d016da")
+                            .withNetworksToInit(sNetworksToInit).build(), null);
             sRewardedVideoInitialized = true;
         }
         MoPubRewardedVideos.setRewardedVideoListener(this);
@@ -71,7 +75,7 @@ public void onClick(View view) {
                     return;
                 }
                 MoPubRewardedVideos.loadRewardedVideo(mAdUnitId,
-                        new RequestParameters(views.mKeywordsField.getText().toString(), null,
+                        new RequestParameters(views.mKeywordsField.getText().toString(), views.mUserDataKeywordsField.getText().toString(),null,
                                 "sample_app_customer_id"));
                 if (mShowButton != null) {
                     mShowButton.setEnabled(false);
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index ca18f0b2..eb0a8bde 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -32,4 +32,4 @@ project.description = 'MoPub Android SDK'
 project.ext.displayName = 'MoPub Android SDK'
 project.ext.projectName = 'mopub-sdk'
 project.ext.uploadName = 'mopub-android-sdk'
-apply from: 'publisher.gradle'
+apply from: 'publisher.gradle'
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-base/build.gradle b/mopub-sdk/mopub-sdk-base/build.gradle
index d1969c03..17217bb5 100644
--- a/mopub-sdk/mopub-sdk-base/build.gradle
+++ b/mopub-sdk/mopub-sdk-base/build.gradle
@@ -8,7 +8,7 @@ repositories {
 }
 
 dependencies {
-    api 'com.mopub.volley:mopub-volley:1.1.0'
+    api 'com.mopub.volley:mopub-volley:2.0.0'
 
     def avidEnabled = project.hasProperty("mopub.avidEnabled") ? project.getProperty("mopub.avidEnabled").toBoolean() : true
     if (avidEnabled) {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdReport.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdReport.java
index 7e6a2b39..9fa221b2 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdReport.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdReport.java
@@ -3,6 +3,7 @@
 import android.os.Build;
 import android.support.annotation.NonNull;
 
+import com.mopub.common.privacy.AdvertisingId;
 import com.mopub.network.AdResponse;
 
 import java.io.Serializable;
@@ -22,14 +23,14 @@
     private final String mSdkVersion;
     private final String mDeviceModel;
     private final Locale mDeviceLocale;
-    private final String mUdid;
+    private final AdvertisingId mAdvertisingId;
 
     public AdReport(@NonNull String adUnitId, @NonNull ClientMetadata clientMetadata, @NonNull AdResponse adResponse) {
         mAdUnitId = adUnitId;
         mSdkVersion = clientMetadata.getSdkVersion();
         mDeviceModel = clientMetadata.getDeviceModel();
         mDeviceLocale = clientMetadata.getDeviceLocale();
-        mUdid = clientMetadata.getDeviceId();
+        mAdvertisingId = clientMetadata.getMoPubIdentifier().getAdvertisingInfo();
         mAdResponse = adResponse;
     }
 
@@ -43,7 +44,8 @@ public String toString() {
         appendKeyValue(parameters, "ad_unit_id", mAdUnitId);
         appendKeyValue(parameters, "device_locale",
                 mDeviceLocale == null ? null : mDeviceLocale.toString());
-        appendKeyValue(parameters, "device_id", mUdid);
+        appendKeyValue(parameters, "device_id",
+                mAdvertisingId.getIdentifier(MoPub.canCollectPersonalInformation()));
         appendKeyValue(parameters, "network_type", mAdResponse.getNetworkType());
         appendKeyValue(parameters, "platform", "android");
         appendKeyValue(parameters, "timestamp", getFormattedTimeStamp(mAdResponse.getTimestamp()));
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java
index c387b248..35d738fa 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java
@@ -14,4 +14,5 @@
     public static final String REWARDED_PLAYABLE = "rewarded_playable";
     public static final String CUSTOM = "custom";
     public static final String CLEAR = "clear";
+    public static final String MULTI = "multi";
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
index bc09b958..8b4c4b0a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
@@ -6,6 +6,8 @@
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
+import com.mopub.common.privacy.ConsentData;
+import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.common.util.DateAndTime;
 
 import static com.mopub.common.ClientMetadata.MoPubNetworkType;
@@ -13,20 +15,16 @@
 public abstract class AdUrlGenerator extends BaseUrlGenerator {
 
     /**
-     * The ad unit id which identifies a spot for an ad to be placed.
+     * q = query. This is for sending application keywords that better match ads.
      */
-    private static final String AD_UNIT_ID_KEY = "id";
-
-    /**
-     * nv = native version. This is the version of MoPub.
-     */
-    private static final String SDK_VERSION_KEY = "nv";
+    private static final String KEYWORDS_KEY = "q";
 
     /**
-     * q = query. This is for big publishers to send up certain
-     * keywords that better match ads.
+     * user_data_q = userDataQuery. This is for MoPub partners to send up certain
+     * user data keywords that better match ads. Will only be sent if the user has granted
+     * MoPub consent to gather and send user data information.
      */
-    private static final String KEYWORDS_KEY = "q";
+    private static final String USER_DATA_KEYWORDS_KEY = "user_data_q";
 
     /**
      * Location represented in latitude and longitude.
@@ -67,7 +65,7 @@
      * https://developer.android.com/guide/practices/screens_support.html
      * for details on values this can be.
      */
-    private static final String SCREEN_SCALE_KEY = "sc_a";
+    private static final String SCREEN_SCALE_KEY = "sc";
 
     /**
      * Whether or not this is using mraid. 1 = yes.
@@ -97,11 +95,6 @@
      */
     private static final String CARRIER_TYPE_KEY = "ct";
 
-    /**
-     * Bundle ID, as in package name.
-     */
-    private static final String BUNDLE_ID_KEY = "bundle";
-
     /**
      * Whether or not this ad is using third-party viewability tracking.
      * 0: Moat disabled, Avid disabled
@@ -111,13 +104,35 @@
      */
     private static final String VIEWABILITY_KEY = "vv";
 
+    /**
+     * The advanced bidding token for each MoPubAdvancedBidder in JSON format.
+     */
+    private static final String ADVANCED_BIDDING_TOKENS_KEY = "abt";
+
+    private static final String GDPR_APPLIES = "gdpr_applies";
+
+    private static final String CURRENT_CONSENT_STATUS = "current_consent_status";
+
+    private static final String CONSENTED_PRIVACY_POLICY_VERSION = "consented_privacy_policy_version";
+
+    private static final String CONSENTED_VENDOR_LIST_VERSION = "consented_vendor_list_version";
+
     protected Context mContext;
     protected String mAdUnitId;
     protected String mKeywords;
+    protected String mUserDataKeywords;
     protected Location mLocation;
+    @Nullable private final PersonalInfoManager mPersonalInfoManager;
+    @Nullable private final ConsentData mConsentData;
 
     public AdUrlGenerator(Context context) {
         mContext = context;
+        mPersonalInfoManager = MoPub.getPersonalInformationManager();
+        if (mPersonalInfoManager == null) {
+            mConsentData = null;
+        } else {
+            mConsentData = mPersonalInfoManager.getConsentData();
+        }
     }
 
     public AdUrlGenerator withAdUnitId(String adUnitId) {
@@ -130,6 +145,11 @@ public AdUrlGenerator withKeywords(String keywords) {
         return this;
     }
 
+    public AdUrlGenerator withUserDataKeywords(String userDataKeywords) {
+        mUserDataKeywords = userDataKeywords;
+        return this;
+    }
+
     public AdUrlGenerator withLocation(Location location) {
         mLocation = location;
         return this;
@@ -147,7 +167,18 @@ protected void setKeywords(String keywords) {
         addParam(KEYWORDS_KEY, keywords);
     }
 
+    protected void setUserDataKeywords(String userDataKeywords) {
+        if (!MoPub.canCollectPersonalInformation()) {
+            return;
+        }
+        addParam(USER_DATA_KEYWORDS_KEY, userDataKeywords);
+    }
+
     protected void setLocation(@Nullable Location location) {
+        if (!MoPub.canCollectPersonalInformation()) {
+            return;
+        }
+
         Location bestLocation = location;
         Location locationFromLocationService = LocationService.getLastKnownLocation(mContext,
                 MoPub.getLocationPrecision(),
@@ -189,12 +220,17 @@ protected void setMraidFlag(boolean mraid) {
     }
 
     protected void setMccCode(String networkOperator) {
-        String mcc = networkOperator == null ? "" : networkOperator.substring(0, mncPortionLength(networkOperator));
+        String mcc = networkOperator == null
+                ? ""
+                : networkOperator.substring(0, mncPortionLength(networkOperator));
         addParam(MOBILE_COUNTRY_CODE_KEY, mcc);
     }
 
     protected void setMncCode(String networkOperator) {
-        String mnc = networkOperator == null ? "" : networkOperator.substring(mncPortionLength(networkOperator));
+        String mnc = networkOperator == null
+                ? ""
+                : networkOperator.substring(
+                mncPortionLength(networkOperator));
         addParam(MOBILE_NETWORK_CODE_KEY, mnc);
     }
 
@@ -222,6 +258,37 @@ protected void enableViewability(@NonNull final String vendorKey) {
         addParam(VIEWABILITY_KEY, vendorKey);
     }
 
+    protected void setAdvancedBiddingTokens() {
+        final String adTokens = MoPub.getAdvancedBiddingTokensJson(mContext);
+        addParam(ADVANCED_BIDDING_TOKENS_KEY, adTokens);
+    }
+
+    protected void setGdprApplies() {
+        if (mPersonalInfoManager != null) {
+            addParam(GDPR_APPLIES, mPersonalInfoManager.gdprApplies());
+        }
+    }
+
+    protected void setCurrentConsentStatus() {
+        if (mPersonalInfoManager != null) {
+            addParam(CURRENT_CONSENT_STATUS, mPersonalInfoManager.getPersonalInfoConsentStatus()
+                    .getValue());
+        }
+    }
+
+    protected void setConsentedPrivacyPolicyVersion() {
+        if (mConsentData != null) {
+            addParam(CONSENTED_PRIVACY_POLICY_VERSION,
+                    mConsentData.getConsentedPrivacyPolicyVersion());
+        }
+    }
+
+    protected void setConsentedVendorListVersion() {
+        if (mConsentData != null) {
+            addParam(CONSENTED_VENDOR_LIST_VERSION, mConsentData.getConsentedVendorListVersion());
+        }
+    }
+
     protected void addBaseParams(final ClientMetadata clientMetadata) {
         setAdUnitId(mAdUnitId);
 
@@ -233,7 +300,10 @@ protected void addBaseParams(final ClientMetadata clientMetadata) {
 
         setKeywords(mKeywords);
 
-        setLocation(mLocation);
+        if (MoPub.canCollectPersonalInformation()) {
+            setUserDataKeywords(mUserDataKeywords);
+            setLocation(mLocation);
+        }
 
         setTimezone(DateAndTime.getTimeZoneOffsetString());
 
@@ -252,7 +322,17 @@ protected void addBaseParams(final ClientMetadata clientMetadata) {
 
         setAppVersion(clientMetadata.getAppVersion());
 
+        setAdvancedBiddingTokens();
+
         appendAdvertisingInfoTemplates();
+
+        setGdprApplies();
+
+        setCurrentConsentStatus();
+
+        setConsentedPrivacyPolicyVersion();
+
+        setConsentedVendorListVersion();
     }
 
     private void addParam(String key, MoPubNetworkType value) {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdvancedBiddersInitializedListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdvancedBiddersInitializedListener.java
new file mode 100644
index 00000000..6a500f26
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdvancedBiddersInitializedListener.java
@@ -0,0 +1,9 @@
+package com.mopub.common;
+
+import android.support.annotation.NonNull;
+
+import java.util.List;
+
+interface AdvancedBiddersInitializedListener {
+    void onAdvancedBiddersInitialized(@NonNull final List<MoPubAdvancedBidder> advancedBidders);
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdvancedBiddingTokens.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdvancedBiddingTokens.java
new file mode 100644
index 00000000..76481dee
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdvancedBiddingTokens.java
@@ -0,0 +1,119 @@
+package com.mopub.common;
+
+import android.content.Context;
+import android.os.AsyncTask;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Reflection;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Gets Advanced Bidders through an Async Task and stores it in memory for retrieval.
+ */
+public class AdvancedBiddingTokens implements AdvancedBiddersInitializedListener {
+
+    private static final String TOKEN_KEY = "token";
+
+    @NonNull private List<MoPubAdvancedBidder> mAdvancedBidders;
+    @Nullable private final SdkInitializationListener mSdkInitializationListener;
+
+    public AdvancedBiddingTokens(@Nullable final SdkInitializationListener sdkInitializationListener) {
+        mAdvancedBidders = new ArrayList<>();
+        mSdkInitializationListener = sdkInitializationListener;
+    }
+
+    public void addAdvancedBidders(
+            @NonNull final List<Class<? extends MoPubAdvancedBidder>> advancedBidderClasses) {
+        Preconditions.checkNotNull(advancedBidderClasses);
+
+        new AdvancedBiddersInitializationAsyncTask(advancedBidderClasses, this).execute();
+    }
+
+    @Nullable
+    String getTokensAsJsonString(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        final JSONObject tokens = getTokensAsJsonObject(context);
+        if (tokens == null) {
+            return null;
+        }
+        return tokens.toString();
+    }
+
+    @Nullable
+    private JSONObject getTokensAsJsonObject(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        if (mAdvancedBidders.isEmpty()) {
+            return null;
+        }
+
+        final JSONObject jsonObject = new JSONObject();
+        for (final MoPubAdvancedBidder bidder : mAdvancedBidders) {
+            try {
+                final JSONObject bidderJsonObject = new JSONObject();
+                bidderJsonObject.put(TOKEN_KEY, bidder.getToken(context));
+                jsonObject.put(bidder.getCreativeNetworkName(), bidderJsonObject);
+            } catch (JSONException e) {
+                MoPubLog.d("JSON parsing failed for creative network name: " +
+                        bidder.getCreativeNetworkName());
+            }
+        }
+        return jsonObject;
+    }
+
+    @Override
+    public void onAdvancedBiddersInitialized(
+            @NonNull final List<MoPubAdvancedBidder> advancedBidders) {
+        Preconditions.checkNotNull(advancedBidders);
+
+        mAdvancedBidders = advancedBidders;
+
+        if (mSdkInitializationListener != null) {
+            mSdkInitializationListener.onInitializationFinished();
+        }
+    }
+
+    private static class AdvancedBiddersInitializationAsyncTask extends AsyncTask<Void, Void, List<MoPubAdvancedBidder>> {
+
+        @NonNull private final List<Class<? extends MoPubAdvancedBidder>> advancedBidderClasses;
+        @NonNull private final AdvancedBiddersInitializedListener mAdvancedBiddersInitializedListener;
+
+        AdvancedBiddersInitializationAsyncTask(
+                @NonNull List<Class<? extends MoPubAdvancedBidder>> advancedBidderClasses,
+                @NonNull final AdvancedBiddersInitializedListener advancedBiddersInitializedListener) {
+            Preconditions.checkNotNull(advancedBidderClasses);
+            Preconditions.checkNotNull(advancedBiddersInitializedListener);
+
+            this.advancedBidderClasses = advancedBidderClasses;
+            this.mAdvancedBiddersInitializedListener = advancedBiddersInitializedListener;
+        }
+
+        @Override
+        protected List<MoPubAdvancedBidder> doInBackground(final Void... voids) {
+            final List<MoPubAdvancedBidder> advancedBidders = new ArrayList<>();
+            for (final Class<? extends MoPubAdvancedBidder> advancedBidderClass : advancedBidderClasses) {
+                try {
+                    final MoPubAdvancedBidder advancedBidder = Reflection.instantiateClassWithEmptyConstructor(
+                            advancedBidderClass.getName(), MoPubAdvancedBidder.class);
+                    advancedBidders.add(advancedBidder);
+                } catch (Exception e) {
+                    MoPubLog.e("Unable to find class " + advancedBidderClass.getName());
+                }
+            }
+            return advancedBidders;
+        }
+
+        @Override
+        protected void onPostExecute(final List<MoPubAdvancedBidder> advancedBidders) {
+            mAdvancedBiddersInitializedListener.onAdvancedBiddersInitialized(advancedBidders);
+        }
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java
index 759b528e..7fe99df6 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java
@@ -10,6 +10,52 @@
 
 public abstract class BaseUrlGenerator {
 
+    /**
+     * The ad unit id which identifies a spot for an ad to be placed.
+     */
+    protected static final String AD_UNIT_ID_KEY = "id";
+
+    /**
+     * nv = native version. This is the version of MoPub.
+     */
+    protected static final String SDK_VERSION_KEY = "nv";
+
+    /**
+     * User ifa or mopub-generated identifier.
+     */
+    protected static final String UDID_KEY = "udid";
+
+    /**
+     * "Do not track." Equal to 1 when limit ad tracking is turned on. Equal to 0 otherwise.
+     */
+    protected static final String DNT_KEY = "dnt";
+
+    /**
+     * Bundle ID, as in package name.
+     */
+    protected static final String BUNDLE_ID_KEY = "bundle";
+
+    /**
+     * The current consent state.
+     */
+    protected static final String CURRENT_CONSENT_STATUS_KEY = "current_consent_status";
+
+    /**
+     * The version of the vendor list that has been consented to. Null if no consent given.
+     */
+    protected static final String CONSENTED_VENDOR_LIST_VERSION_KEY = "consented_vendor_list_version";
+
+    /**
+     * The version of the privacy policy that has been consented to. Null if no consent given.
+     */
+    protected static final String CONSENTED_PRIVACY_POLICY_VERSION_KEY = "consented_privacy_policy_version";
+
+    /**
+     * Whether or not GDPR applies to this user. Can be different from whether or not this user is
+     * in a GDPR region.
+     */
+    protected static final String GDPR_APPLIES = "gdpr_applies";
+
     private static final String WIDTH_KEY = "w";
     private static final String HEIGHT_KEY = "h";
 
@@ -39,6 +85,17 @@ protected void addParam(String key, String value) {
         mStringBuilder.append(Uri.encode(value));
     }
 
+    protected void addParam(String key, Boolean value) {
+        if (value == null) {
+            return;
+        }
+
+        mStringBuilder.append(getParamDelimiter());
+        mStringBuilder.append(key);
+        mStringBuilder.append("=");
+        mStringBuilder.append(value ? "1" : "0");
+    }
+
     private String getParamDelimiter() {
         if (mFirstParam) {
             mFirstParam = false;
@@ -75,12 +132,12 @@ protected void setDeviceInfo(String... info) {
 
     protected void setDoNotTrack(boolean dnt) {
         if (dnt) {
-            addParam("dnt", "1");
+            addParam(DNT_KEY, "1");
         }
     }
 
     protected void setUdid(String udid) {
-        addParam("udid", udid);
+        addParam(UDID_KEY, udid);
     }
 
     /**
@@ -88,8 +145,8 @@ protected void setUdid(String udid) {
      * replace these templates with the correct values when the request is processed.
      */
     protected void appendAdvertisingInfoTemplates() {
-        addParam("udid", PlayServicesUrlRewriter.UDID_TEMPLATE);
-        addParam("dnt", PlayServicesUrlRewriter.DO_NOT_TRACK_TEMPLATE);
+        addParam(UDID_KEY, PlayServicesUrlRewriter.UDID_TEMPLATE);
+        addParam(DNT_KEY, PlayServicesUrlRewriter.DO_NOT_TRACK_TEMPLATE);
     }
 
     /**
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
index 1317ab36..010d8b59 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
@@ -1,6 +1,5 @@
 package com.mopub.common;
 
-import android.content.ContentResolver;
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageInfo;
@@ -10,14 +9,14 @@
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
 import android.os.Build;
-import android.provider.Settings;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.telephony.TelephonyManager;
-import android.text.TextUtils;
 
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.privacy.MoPubIdentifier;
 import com.mopub.common.util.DeviceUtils;
 import com.mopub.common.util.Dips;
-import com.mopub.common.util.Utils;
 
 import java.util.Locale;
 
@@ -35,21 +34,18 @@
     private static final String DEVICE_ORIENTATION_LANDSCAPE = "l";
     private static final String DEVICE_ORIENTATION_SQUARE = "s";
     private static final String DEVICE_ORIENTATION_UNKNOWN = "u";
-    private static final String IFA_PREFIX = "ifa:";
-    private static final String SHA_PREFIX = "sha:";
     private static final int UNKNOWN_NETWORK = -1;
-    private static final int MISSING_VALUE = -1;
 
     private String mNetworkOperatorForUrl;
     private final String mNetworkOperator;
     private String mSimOperator;
-    private final String mIsoCountryCode;
-    private final String mSimIsoCountryCode;
+    private String mIsoCountryCode;
+    private String mSimIsoCountryCode;
     private String mNetworkOperatorName;
     private String mSimOperatorName;
-    private String mUdid;
-    private boolean mDoNotTrack = false;
-    private boolean mAdvertisingInfoSet = false;
+
+    @NonNull
+    private final MoPubIdentifier moPubIdentifier;
 
     public enum MoPubNetworkType {
         UNKNOWN(0),
@@ -106,6 +102,7 @@ public int getId() {
     /**
      * Returns the singleton ClientMetadata object, using the context to obtain data if necessary.
      */
+    @NonNull
     public static ClientMetadata getInstance(Context context) {
         // Use a local variable so we can reduce accesses of the volatile field.
         ClientMetadata result = sInstance;
@@ -126,6 +123,7 @@ public static ClientMetadata getInstance(Context context) {
      * ClientMetadata. If the object has never been referenced from a thread with a context,
      * this will return null.
      */
+    @Nullable
     public static ClientMetadata getInstance() {
         ClientMetadata result = sInstance;
         if (result == null) {
@@ -174,8 +172,14 @@ public ClientMetadata(Context context) {
             mSimOperator = telephonyManager.getSimOperator();
         }
 
-        mIsoCountryCode = telephonyManager.getNetworkCountryIso();
-        mSimIsoCountryCode = telephonyManager.getSimCountryIso();
+        if (MoPub.canCollectPersonalInformation()) {
+            mIsoCountryCode = telephonyManager.getNetworkCountryIso();
+            mSimIsoCountryCode = telephonyManager.getSimCountryIso();
+        } else {
+            mIsoCountryCode = "";
+            mSimIsoCountryCode = "";
+        }
+
         try {
             // Some Lenovo devices require READ_PHONE_STATE here.
             mNetworkOperatorName = telephonyManager.getNetworkOperatorName();
@@ -187,27 +191,15 @@ public ClientMetadata(Context context) {
             mSimOperatorName = null;
         }
 
-        setAmazonAdvertisingInfo();
-        if (!mAdvertisingInfoSet) {
-            // Amazon ad info is not supported on this device, so get the device ID.
-            // This will be replaced later when the Play Services callbacks complete.
-            mUdid = getDeviceIdFromContext(mContext);
-        }
-
+        moPubIdentifier = new MoPubIdentifier(mContext);
     }
 
-    // For Amazon tablets running Fire OS 5.1+ and TV devices running Fire OS 5.2.1.1+, the
-    // advertising info is available as System Settings.
-    // See https://developer.amazon.com/public/solutions/devices/fire-tv/docs/fire-tv-advertising-id
-    @VisibleForTesting
-    protected void setAmazonAdvertisingInfo() {
-        ContentResolver resolver = mContext.getContentResolver();
-        int limitAdTracking = Settings.Secure.getInt(resolver, "limit_ad_tracking", MISSING_VALUE);
-        String advertisingId = Settings.Secure.getString(resolver, "advertising_id");
-
-        if (limitAdTracking != MISSING_VALUE && !TextUtils.isEmpty(advertisingId)) {
-            boolean doNotTrack = limitAdTracking != 0;
-            setAdvertisingInfo(advertisingId, doNotTrack);
+    public void repopulateCountryData() {
+        final TelephonyManager telephonyManager =
+                (TelephonyManager) mContext.getSystemService(Context.TELEPHONY_SERVICE);
+        if (MoPub.canCollectPersonalInformation() && telephonyManager != null) {
+            mIsoCountryCode = telephonyManager.getNetworkCountryIso();
+            mSimIsoCountryCode = telephonyManager.getSimCountryIso();
         }
     }
 
@@ -223,13 +215,6 @@ private static String getAppVersionFromContext(Context context) {
         }
     }
 
-    private static String getDeviceIdFromContext(Context context) {
-        String deviceId = Settings.Secure.getString(context.getContentResolver(),
-                Settings.Secure.ANDROID_ID);
-        deviceId = (deviceId == null) ? "" : Utils.sha1(deviceId);
-        return SHA_PREFIX + deviceId;
-    }
-
     /**
      * @return the display orientation. Useful when generating ad requests.
      */
@@ -294,14 +279,14 @@ public String getSimOperator() {
      * @return the country code of the device.
      */
     public String getIsoCountryCode() {
-        return mIsoCountryCode;
+        return MoPub.canCollectPersonalInformation() ? mIsoCountryCode : "";
     }
 
     /**
      * @return the sim provider's country code.
      */
     public String getSimIsoCountryCode() {
-        return mSimIsoCountryCode;
+        return MoPub.canCollectPersonalInformation() ? mSimIsoCountryCode : "";
     }
 
     /**
@@ -319,28 +304,12 @@ public String getSimOperatorName() {
     }
 
     /**
-     * @return the stored device ID.
-     */
-    public synchronized String getDeviceId() {
-        return mUdid;
-    }
-
-    /**
-     * @return the user's do not track preference. Should be set whenever a getAdInfo() call is
-     *         completed.
+     *
+     * @return class to get Advertising ID and 'do not track' state
      */
-    public synchronized boolean isDoNotTrackSet() {
-        return mDoNotTrack;
-    }
-
-    public synchronized void setAdvertisingInfo(String advertisingId, boolean doNotTrack) {
-        mUdid = IFA_PREFIX + advertisingId;
-        mDoNotTrack = doNotTrack;
-        mAdvertisingInfoSet = true;
-    }
-
-    public synchronized boolean isAdvertisingInfoSet() {
-        return mAdvertisingInfoSet;
+    @NonNull
+    public MoPubIdentifier getMoPubIdentifier() {
+        return moPubIdentifier;
     }
 
     /**
@@ -427,6 +396,21 @@ public String getAppName() {
         return mAppName;
     }
 
+    @NonNull
+    public static String getCurrentLanguage(@NonNull final Context context) {
+        // Use default locale first for language code
+        String languageCode = Locale.getDefault().getLanguage().trim();
+
+        // If user's preferred locale is different from default locale, override language code
+        Locale userLocale = context.getResources().getConfiguration().locale;
+        if (userLocale != null) {
+            if (!userLocale.getLanguage().trim().isEmpty()) {
+                languageCode = userLocale.getLanguage().trim();
+            }
+        }
+        return languageCode;
+    }
+
     @Deprecated
     @VisibleForTesting
     public static void setInstance(ClientMetadata clientMetadata) {
@@ -435,6 +419,7 @@ public static void setInstance(ClientMetadata clientMetadata) {
         }
     }
 
+    @Deprecated
     @VisibleForTesting
     public static void clearForTesting() {
         sInstance = null;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java
index 24111e03..aca01406 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java
@@ -6,6 +6,7 @@
 import android.graphics.drawable.StateListDrawable;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.util.AttributeSet;
 import android.view.Gravity;
 import android.view.MotionEvent;
 import android.view.SoundEffectConstants;
@@ -99,8 +100,14 @@ int getGravity() {
     private UnsetPressedState mUnsetPressedState;
 
     public CloseableLayout(@NonNull Context context) {
-        super(context);
+        this(context, null, 0);
+    }
+    public CloseableLayout(@NonNull Context context, @Nullable AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
 
+    public CloseableLayout(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
         mCloseDrawable = new StateListDrawable();
         mClosePosition = ClosePosition.TOP_RIGHT;
 
@@ -122,6 +129,7 @@ public CloseableLayout(@NonNull Context context) {
         mCloseAlwaysInteractable = true;
     }
 
+
     public void setOnCloseListener(@Nullable OnCloseListener onCloseListener) {
         mOnCloseListener = onCloseListener;
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CompositeSdkInitializationListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CompositeSdkInitializationListener.java
new file mode 100644
index 00000000..7fc40db1
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CompositeSdkInitializationListener.java
@@ -0,0 +1,43 @@
+package com.mopub.common;
+
+import android.os.Handler;
+import android.os.Looper;
+import android.support.annotation.NonNull;
+
+
+/**
+ * Aggregates sdk initialization listeners so that the listener only fires once everything is done.
+ */
+class CompositeSdkInitializationListener implements SdkInitializationListener {
+
+    @NonNull private final SdkInitializationListener mSdkInitializationListener;
+    private int mTimes;
+
+    /**
+     * Don't fire onInitializationFinished until the requisite number of times of
+     * onInitializationFinished has been called.
+     *
+     * @param sdkInitializationListener The original listener.
+     * @param times                     Number of times to expect onInitializationFinished() to be called.
+     */
+    public CompositeSdkInitializationListener(
+            @NonNull final SdkInitializationListener sdkInitializationListener, int times) {
+        Preconditions.checkNotNull(sdkInitializationListener);
+
+        mSdkInitializationListener = sdkInitializationListener;
+        mTimes = times;
+    }
+
+    @Override
+    public void onInitializationFinished() {
+        mTimes--;
+        if (mTimes <= 0) {
+            new Handler(Looper.getMainLooper()).post(new Runnable() {
+                @Override
+                public void run() {
+                    mSdkInitializationListener.onInitializationFinished();
+                }
+            });
+        }
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
index c0d2d12b..8303f908 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
@@ -13,6 +13,8 @@ private Constants() {}
     public static final String AD_HANDLER = "/m/ad";
     public static final String CONVERSION_TRACKING_HANDLER = "/m/open";
     public static final String POSITIONING_HANDLER = "/m/pos";
+    public static final String GDPR_SYNC_HANDLER = "/m/gdpr_sync";
+    public static final String GDPR_CONSENT_HANDLER = "/m/gdpr_consent_dialog";
 
 
     public static final int TEN_SECONDS_MILLIS = 10 * 1000;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
index f4b0e73d..a841110b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
@@ -31,7 +31,6 @@
     public static final String PLAY_VISIBLE_PERCENT = "Play-Visible-Percent";
     public static final String PAUSE_VISIBLE_PERCENT = "Pause-Visible-Percent";
     public static final String MAX_BUFFER_MS = "Max-Buffer-Ms";
-    public static final String EVENT_DETAILS = "Event-Details";
 
     // Rewarded Ad fields
     public static final String REWARDED_AD_CURRENCY_NAME_KEY = "Rewarded-Ad-Currency-Name";
@@ -43,6 +42,9 @@
     // Viewability fields
     public static final String EXTERNAL_VIDEO_VIEWABILITY_TRACKERS_KEY = "External-Video-Viewability-Trackers";
 
+    // Advanced bidding fields
+    public static final String ADM_KEY = "Adm";
+
     /**
      * @deprecated as of 4.12, replaced by {@link #REWARDED_AD_CUSTOMER_ID_KEY}
      */
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DownloadResponse.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DownloadResponse.java
deleted file mode 100644
index 6ce126e8..00000000
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DownloadResponse.java
+++ /dev/null
@@ -1,59 +0,0 @@
-package com.mopub.common;
-
-import com.mopub.common.util.ResponseHeader;
-import com.mopub.common.util.Streams;
-
-import org.apache.http.Header;
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpResponse;
-
-import java.io.BufferedInputStream;
-import java.io.ByteArrayOutputStream;
-
-public class DownloadResponse {
-    private byte[] mBytes = new byte[0];
-    private final int mStatusCode;
-    private final long mContentLength;
-    private final Header[] mHeaders;
-
-    public DownloadResponse(final HttpResponse httpResponse) throws Exception {
-        final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
-        BufferedInputStream inputStream = null;
-        try {
-            HttpEntity httpEntity = httpResponse.getEntity();
-            if (httpEntity != null) {
-                inputStream = new BufferedInputStream(httpEntity.getContent());
-                Streams.copyContent(inputStream, outputStream);
-                mBytes = outputStream.toByteArray();
-            }
-        } finally {
-            Streams.closeStream(inputStream);
-            Streams.closeStream(outputStream);
-        }
-
-        mStatusCode = httpResponse.getStatusLine().getStatusCode();
-        mContentLength = mBytes.length;
-        mHeaders = httpResponse.getAllHeaders();
-    }
-
-    public byte[] getByteArray() {
-        return mBytes;
-    }
-
-    public int getStatusCode() {
-        return mStatusCode;
-    }
-
-    public long getContentLength() {
-        return mContentLength;
-    }
-
-    public String getFirstHeader(final ResponseHeader responseHeader) {
-        for (final Header header : mHeaders) {
-            if (header.getName().equalsIgnoreCase(responseHeader.getKey())) {
-                return header.getValue();
-            }
-        }
-        return null;
-    }
-}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java
index 5773b410..41e1c558 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java
@@ -15,6 +15,7 @@
 
 public class GpsHelper {
     static public final int GOOGLE_PLAY_SUCCESS_CODE = 0;
+    static public final int SERVICE_VERSION_UPDATE_REQUIRED = 2;
     static public final String ADVERTISING_ID_KEY = "advertisingId";
     static public final String IS_LIMIT_AD_TRACKING_ENABLED_KEY = "isLimitAdTrackingEnabled";
     private static String sPlayServicesUtilClassName = "com.google.android.gms.common.GooglePlayServicesUtil";
@@ -42,7 +43,8 @@ public static boolean isPlayServicesAvailable(final Context context) {
 
             Object result = methodBuilder.execute();
 
-            return (result != null && (Integer) result == GOOGLE_PLAY_SUCCESS_CODE);
+            Integer intResult = (Integer) result;
+            return (intResult != null && (intResult == GOOGLE_PLAY_SUCCESS_CODE || intResult == SERVICE_VERSION_UPDATE_REQUIRED));
         } catch (Exception exception) {
             return false;
         }
@@ -58,18 +60,15 @@ static public boolean isLimitAdTrackingEnabled(Context context) {
         }
     }
 
-    static boolean isClientMetadataPopulated(final Context context) {
-        return ClientMetadata.getInstance(context).isAdvertisingInfoSet();
-    }
-
     static public void fetchAdvertisingInfoAsync(final Context context, final GpsHelperListener gpsHelperListener) {
         // This method guarantees that the Google Play Services (GPS) advertising info will
         // be populated if GPS is available and the ad info is not already cached
         // The above will happen before the callback is run
         boolean playServicesIsAvailable = isPlayServicesAvailable(context);
-        if (playServicesIsAvailable && !isClientMetadataPopulated(context)) {
+        if (playServicesIsAvailable ) {
             internalFetchAdvertisingInfoAsync(context, gpsHelperListener);
-        } else {
+        }
+        else {
             if (gpsHelperListener != null) {
                 gpsHelperListener.onFetchAdInfoCompleted();
             }
@@ -125,7 +124,7 @@ static private void internalFetchAdvertisingInfoAsync(final Context context, fin
     static private class FetchAdvertisingInfoTask extends AsyncTask<Void, Void, Void> {
         private WeakReference<Context> mContextWeakReference;
         private WeakReference<GpsHelperListener> mGpsHelperListenerWeakReference;
-
+        private AdvertisingInfo info;
         public FetchAdvertisingInfoTask(Context context, GpsHelperListener gpsHelperListener) {
             mContextWeakReference = new WeakReference<Context>(context);
             mGpsHelperListenerWeakReference = new WeakReference<GpsHelperListener>(gpsHelperListener);
@@ -146,7 +145,7 @@ protected Void doInBackground(Void... voids) {
                 Object adInfo = methodBuilder.execute();
 
                 if (adInfo != null) {
-                    updateClientMetadata(context, adInfo);
+                    // updateClientMetadata(context, adInfo);
                 }
             } catch (Exception exception) {
                 MoPubLog.d("Unable to obtain Google AdvertisingIdClient.Info via reflection.");
@@ -164,19 +163,6 @@ protected void onPostExecute(Void aVoid) {
         }
     }
 
-    static void updateClientMetadata(final Context context, final Object adInfo) {
-        String advertisingId = reflectedGetAdvertisingId(adInfo, null);
-        boolean isLimitAdTrackingEnabled = reflectedIsLimitAdTrackingEnabled(adInfo, false);
-
-        /*
-         * Committing using the editor is atomic; a single editor must always commit
-         * to ensure that the state of the GPS variables are in sync.
-         */
-
-        ClientMetadata clientMetadata = ClientMetadata.getInstance(context);
-        clientMetadata.setAdvertisingInfo(advertisingId, isLimitAdTrackingEnabled);
-    }
-
     static String reflectedGetAdvertisingId(final Object adInfo, final String defaultValue) {
         try {
             return (String) MethodBuilderFactory.create(adInfo, "getId").execute();
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/HttpResponses.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/HttpResponses.java
deleted file mode 100644
index 457a69fb..00000000
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/HttpResponses.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package com.mopub.common;
-
-import android.graphics.Bitmap;
-
-import org.json.JSONObject;
-import org.json.JSONTokener;
-
-import static android.graphics.BitmapFactory.decodeByteArray;
-
-public final class HttpResponses {
-
-    private HttpResponses() {}
-
-    public static Bitmap asBitmap(final DownloadResponse downloadResponse) {
-        if (downloadResponse == null) {
-            return null;
-        }
-
-        final byte[] bytes = downloadResponse.getByteArray();
-        return decodeByteArray(bytes, 0, bytes.length);
-    }
-
-    public static JSONObject asJsonObject(final DownloadResponse downloadResponse) {
-        if (downloadResponse == null) {
-            return null;
-        }
-
-        try {
-            final String responseString = asResponseString(downloadResponse);
-
-            final JSONTokener tokener = new JSONTokener(responseString);
-            return new JSONObject(tokener);
-        } catch (Exception e) {
-            return null;
-        }
-    }
-
-    public static String asResponseString(final DownloadResponse downloadResponse) {
-        if (downloadResponse == null) {
-            return null;
-        }
-
-        try {
-            return new String(downloadResponse.getByteArray(), "UTF-8");
-        } catch (Exception e) {
-            return null;
-        }
-    }
-}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java
index 8e6e5471..92270c72 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java
@@ -115,6 +115,11 @@ private boolean hasRequiredPermissions(@NonNull final Context context) {
     public static Location getLastKnownLocation(@NonNull final Context context,
             final int locationPrecision,
             final @NonNull MoPub.LocationAwareness locationAwareness) {
+
+        if (!MoPub.canCollectPersonalInformation()) {
+            return null;
+        }
+
         Preconditions.checkNotNull(context);
         Preconditions.checkNotNull(locationAwareness);
 
@@ -149,6 +154,10 @@ static Location getLocationFromProvider(@NonNull final Context context,
         Preconditions.checkNotNull(context);
         Preconditions.checkNotNull(provider);
 
+        if (!MoPub.canCollectPersonalInformation()) {
+            return null;
+        }
+
         if (!provider.hasRequiredPermissions(context)) {
             return null;
         }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
index 7a3c6152..ffeabcf0 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
@@ -1,11 +1,15 @@
 package com.mopub.common;
 
 import android.app.Activity;
+import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.privacy.PersonalInfoManager;
+import com.mopub.common.util.ManifestUtils;
 import com.mopub.common.util.Reflection;
+import com.mopub.mobileads.MoPubConversionTracker;
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
@@ -13,7 +17,7 @@
 import static com.mopub.common.ExternalViewabilitySessionManager.ViewabilityVendor;
 
 public class MoPub {
-    public static final String SDK_VERSION = "4.20.0";
+    public static final String SDK_VERSION = "5.0.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
@@ -52,10 +56,6 @@ public static BrowserAgent fromHeader(@Nullable final Integer browserAgent) {
             "com.mopub.mobileads.MoPubRewardedVideos";
     private static final String MOPUB_REWARDED_VIDEO_MANAGER =
             "com.mopub.mobileads.MoPubRewardedVideoManager";
-    private static final String MOPUB_REWARDED_VIDEO_LISTENER =
-            "com.mopub.mobileads.MoPubRewardedVideoListener";
-    private static final String MOPUB_REWARDED_VIDEO_MANAGER_REQUEST_PARAMETERS =
-            "com.mopub.mobileads.MoPubRewardedVideoManager$RequestParameters";
 
     private static final int DEFAULT_LOCATION_PRECISION = 6;
     private static final long DEFAULT_LOCATION_REFRESH_TIME_MILLIS = 60 * 1000;
@@ -67,6 +67,10 @@ public static BrowserAgent fromHeader(@Nullable final Integer browserAgent) {
     private static volatile boolean sIsBrowserAgentOverriddenByClient = false;
     private static boolean sSearchedForUpdateActivityMethod = false;
     @Nullable private static Method sUpdateActivityMethod;
+    private static boolean sAdvancedBiddingEnabled = true;
+    private static boolean sSdkInitialized = false;
+    private static AdvancedBiddingTokens sAdvancedBiddingTokens;
+    private static PersonalInfoManager sPersonalInfoManager;
 
     @NonNull
     public static LocationAwareness getLocationAwareness() {
@@ -127,6 +131,100 @@ public static BrowserAgent getBrowserAgent() {
         return sBrowserAgent;
     }
 
+    public static void setAdvancedBiddingEnabled(final boolean advancedBiddingEnabled) {
+        sAdvancedBiddingEnabled = advancedBiddingEnabled;
+    }
+
+    public static boolean isAdvancedBiddingEnabled() {
+        return sAdvancedBiddingEnabled;
+    }
+
+    /**
+     * Initializes the MoPub SDK. Call this before making any rewarded ads or advanced bidding
+     * requests. This will do the rewarded video custom event initialization any number of times,
+     * but the SDK itself can only be initialized once, and the rewarded ads module can only be
+     * initialized once.
+     *
+     * @param context                   Recommended to be an activity context.
+     *                                  Rewarded ads initialization requires an Activity.
+     * @param sdkConfiguration          Configuration data to initialize the SDK.
+     * @param sdkInitializationListener Callback for when SDK initialization finishes.
+     */
+    public static void initializeSdk(@NonNull final Context context,
+            @NonNull final SdkConfiguration sdkConfiguration,
+            @Nullable final SdkInitializationListener sdkInitializationListener) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(sdkConfiguration);
+
+        // This also initializes MoPubLog
+        MoPubLog.d("Initializing MoPub");
+
+        if (context instanceof Activity && Reflection.classFound(MOPUB_REWARDED_VIDEO_MANAGER)) {
+            final Activity activity = (Activity) context;
+            initializeRewardedVideo(activity, sdkConfiguration);
+        }
+
+        if (sSdkInitialized) {
+            MoPubLog.d("MoPub SDK is already initialized");
+            return;
+        }
+        sSdkInitialized = true;
+
+        final SdkInitializationListener compositeSdkInitializationListener;
+        if (sdkInitializationListener == null) {
+            compositeSdkInitializationListener = null;
+        } else {
+            compositeSdkInitializationListener = new CompositeSdkInitializationListener(
+                    sdkInitializationListener, 2);
+        }
+
+        sPersonalInfoManager = new PersonalInfoManager(context, sdkConfiguration.getAdUnitId(),
+                compositeSdkInitializationListener);
+
+        ClientMetadata.getInstance(context);
+
+        sAdvancedBiddingTokens = new AdvancedBiddingTokens(compositeSdkInitializationListener);
+        sAdvancedBiddingTokens.addAdvancedBidders(sdkConfiguration.getAdvancedBidders());
+
+        ManifestUtils.checkSdkActivitiesDeclared(context);
+    }
+
+    /**
+     * @return true if SDK is initialized.
+     */
+    public static boolean isSdkInitialized() {
+        return sSdkInitialized;
+    }
+
+    /**
+     * Check this to see if you are allowed to collect personal user data.
+     *
+     * @return True if allowed, false otherwise.
+     */
+    public static boolean canCollectPersonalInformation() {
+        return sPersonalInfoManager != null && sPersonalInfoManager.canCollectPersonalInformation();
+    }
+
+    @Nullable
+    static String getAdvancedBiddingTokensJson(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        if (!isAdvancedBiddingEnabled() || sAdvancedBiddingTokens == null) {
+            return null;
+        }
+        return sAdvancedBiddingTokens.getTokensAsJsonString(context);
+    }
+
+    /**
+     * Gets the consent manager for handling user data.
+     *
+     * @return A PersonalInfoManager that handles consent management.
+     */
+    @Nullable
+    public static PersonalInfoManager getPersonalInformationManager() {
+        return sPersonalInfoManager;
+    }
+
     @VisibleForTesting
     static boolean isBrowserAgentOverriddenByClient() {
         return sIsBrowserAgentOverriddenByClient;
@@ -183,24 +281,16 @@ public static void disableViewability(@NonNull final ViewabilityVendor vendor) {
         vendor.disable();
     }
 
-    ////////// MoPub RewardedVideoControl methods //////////
-    // These methods have been deprecated as of release 4.9 due to SDK modularization. MoPub is
-    // inside of the base module while MoPubRewardedVideos is inside of the rewarded video module.
-    // MoPubRewardedVideos methods must now be called with reflection because the publisher
-    // may have excluded the rewarded video module.
-
+    private static void initializeRewardedVideo(@NonNull Activity activity, @NonNull SdkConfiguration sdkConfiguration) {
+        Preconditions.checkNotNull(activity);
+        Preconditions.checkNotNull(sdkConfiguration);
 
-    /**
-     * @deprecated As of release 4.9, use MoPubRewardedVideos#initializeRewardedVideo instead
-     */
-    @Deprecated
-    public static void initializeRewardedVideo(@NonNull Activity activity, MediationSettings... mediationSettings) {
         try {
             new Reflection.MethodBuilder(null, "initializeRewardedVideo")
                     .setStatic(Class.forName(MOPUB_REWARDED_VIDEOS))
+                    .setAccessible()
                     .addParam(Activity.class, activity)
-                    .addParam(MediationSettings[].class, mediationSettings)
-                    .execute();
+                    .addParam(SdkConfiguration.class, sdkConfiguration).execute();
         } catch (ClassNotFoundException e) {
             MoPubLog.w("initializeRewardedVideo was called without the rewarded video module");
         } catch (NoSuchMethodException e) {
@@ -239,97 +329,18 @@ static void updateActivity(@NonNull Activity activity) {
         }
     }
 
-    /**
-     * @deprecated As of release 4.9, use MoPubRewardedVideos#setRewardedVideoListener instead
-     */
     @Deprecated
-    public static void setRewardedVideoListener(@Nullable Object listener) {
-        try {
-            Class moPubRewardedVideoListenerClass = Class.forName(
-                    MOPUB_REWARDED_VIDEO_LISTENER);
-            new Reflection.MethodBuilder(null, "setRewardedVideoListener")
-                    .setStatic(Class.forName(MOPUB_REWARDED_VIDEOS))
-                    .addParam(moPubRewardedVideoListenerClass, listener)
-                    .execute();
-        } catch (ClassNotFoundException e) {
-            MoPubLog.w("setRewardedVideoListener was called without the rewarded video module");
-        } catch (NoSuchMethodException e) {
-            MoPubLog.w("setRewardedVideoListener was called without the rewarded video module");
-        } catch (Exception e) {
-            MoPubLog.e("Error while setting rewarded video listener", e);
-        }
-    }
-
-    /**
-     * @deprecated As of release 4.9, use MoPubRewardedVideos#loadRewardedVideo instead
-     */
-    @Deprecated
-    public static void loadRewardedVideo(@NonNull String adUnitId,
-            @Nullable MediationSettings... mediationSettings) {
-        MoPub.loadRewardedVideo(adUnitId, null, mediationSettings);
-    }
-
-    /**
-     * @deprecated As of release 4.9, use MoPubRewardedVideos#loadRewardedVideo instead
-     */
-    @Deprecated
-    public static void loadRewardedVideo(@NonNull String adUnitId,
-            @Nullable Object requestParameters,
-            @Nullable MediationSettings... mediationSettings) {
-        try {
-            Class requestParametersClass = Class.forName(
-                    MOPUB_REWARDED_VIDEO_MANAGER_REQUEST_PARAMETERS);
-            new Reflection.MethodBuilder(null, "loadRewardedVideo")
-                    .setStatic(Class.forName(MOPUB_REWARDED_VIDEOS))
-                    .addParam(String.class, adUnitId)
-                    .addParam(requestParametersClass, requestParameters)
-                    .addParam(MediationSettings[].class, mediationSettings)
-                    .execute();
-        } catch (ClassNotFoundException e) {
-            MoPubLog.w("loadRewardedVideo was called without the rewarded video module");
-        } catch (NoSuchMethodException e) {
-            MoPubLog.w("loadRewardedVideo was called without the rewarded video module");
-        } catch (Exception e) {
-            MoPubLog.e("Error while loading rewarded video", e);
-        }
-    }
-
-    /**
-     * @deprecated As of release 4.9, use MoPubRewardedVideos#hasRewardedVideo instead
-     */
-    @Deprecated
-    public static boolean hasRewardedVideo(@NonNull String adUnitId) {
-        try {
-            return (boolean) new Reflection.MethodBuilder(null, "hasRewardedVideo")
-                    .setStatic(Class.forName(MOPUB_REWARDED_VIDEOS))
-                    .addParam(String.class, adUnitId)
-                    .execute();
-        } catch (ClassNotFoundException e) {
-            MoPubLog.w("hasRewardedVideo was called without the rewarded video module");
-        } catch (NoSuchMethodException e) {
-            MoPubLog.w("hasRewardedVideo was called without the rewarded video module");
-        } catch (Exception e) {
-            MoPubLog.e("Error while checking rewarded video", e);
-        }
-        return false;
+    @VisibleForTesting
+    static void clearAdvancedBidders() {
+        sAdvancedBiddingTokens = null;
+        sPersonalInfoManager = null;
+        sSdkInitialized = false;
+        sPersonalInfoManager = null;
     }
 
-    /**
-     * @deprecated As of release 4.9, use MoPubRewardedVideos#showRewardedVideo instead
-     */
     @Deprecated
-    public static void showRewardedVideo(@NonNull String adUnitId) {
-        try {
-            new Reflection.MethodBuilder(null, "showRewardedVideo")
-                    .setStatic(Class.forName(MOPUB_REWARDED_VIDEOS))
-                    .addParam(String.class, adUnitId)
-                    .execute();
-        } catch (ClassNotFoundException e) {
-            MoPubLog.w("showRewardedVideo was called without the rewarded video module");
-        } catch (NoSuchMethodException e) {
-            MoPubLog.w("showRewardedVideo was called without the rewarded video module");
-        } catch (Exception e) {
-            MoPubLog.e("Error while showing rewarded video", e);
-        }
+    @VisibleForTesting
+    static void setPersonalInfoManager(@Nullable final PersonalInfoManager personalInfoManager) {
+        sPersonalInfoManager = personalInfoManager;
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubAdvancedBidder.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubAdvancedBidder.java
new file mode 100644
index 00000000..d41f46f9
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubAdvancedBidder.java
@@ -0,0 +1,11 @@
+package com.mopub.common;
+
+import android.content.Context;
+
+/**
+ * Interface for all advanced bidders.
+ */
+public interface MoPubAdvancedBidder {
+    public String getToken(Context context);
+    public String getCreativeNetworkName();
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubAdvancedBidderData.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubAdvancedBidderData.java
new file mode 100644
index 00000000..b1ec19e5
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubAdvancedBidderData.java
@@ -0,0 +1,39 @@
+package com.mopub.common;
+
+import android.support.annotation.NonNull;
+
+import com.mopub.common.logging.MoPubLog;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * Data object holding advanced bidding data.
+ * {"[mCreativeNetworkName]" : {"token" : "[mToken]"}}
+ */
+public class MoPubAdvancedBidderData {
+    private static final String TOKEN_KEY = "token";
+
+    @NonNull final String mToken;
+    @NonNull final String mCreativeNetworkName;
+
+    public MoPubAdvancedBidderData(@NonNull final String token,
+            @NonNull final String creativeNetworkName) {
+        Preconditions.checkNotNull(token);
+        Preconditions.checkNotNull(creativeNetworkName);
+
+        mToken = token;
+        mCreativeNetworkName = creativeNetworkName;
+    }
+
+    @NonNull
+    public JSONObject toJson(){
+        JSONObject jsonObject = new JSONObject();
+        try {
+            jsonObject.put(TOKEN_KEY, mToken);
+        } catch (JSONException e) {
+            MoPubLog.e("Invalid token format: " + mToken);
+        }
+        return jsonObject;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
index 1f9d2d27..26ef3318 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
@@ -18,16 +18,11 @@
 import android.widget.LinearLayout;
 import android.widget.RelativeLayout;
 
-import com.mopub.common.event.Event;
-import com.mopub.common.event.MoPubEvents;
 import com.mopub.mobileads.BaseWebView;
 import com.mopub.mobileads.util.WebViews;
 
 import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
 import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
-import static com.mopub.common.event.BaseEvent.Category;
-import static com.mopub.common.event.BaseEvent.Name;
-import static com.mopub.common.event.BaseEvent.SamplingRate;
 import static com.mopub.common.util.Drawables.BACKGROUND;
 import static com.mopub.common.util.Drawables.CLOSE;
 import static com.mopub.common.util.Drawables.REFRESH;
@@ -46,9 +41,6 @@
     private ImageButton mRefreshButton;
     private ImageButton mCloseButton;
 
-    private DoubleTimeTracker dwellTimeTracker;
-    private String mDspCreativeId;
-
     private boolean mProgressBarAvailable;
 
     @NonNull
@@ -89,8 +81,6 @@ public void onCreate(Bundle savedInstanceState) {
 
         setContentView(getMoPubBrowserView());
 
-        dwellTimeTracker = new DoubleTimeTracker();
-
         initializeWebView();
         initializeButtons();
         enableCookies();
@@ -110,8 +100,6 @@ private void initializeWebView() {
         webSettings.setBuiltInZoomControls(true);
         webSettings.setUseWideViewPort(true);
 
-        mDspCreativeId = getIntent().getStringExtra(DSP_CREATIVE_ID);
-
         mWebView.loadUrl(getIntent().getStringExtra(DESTINATION_URL_KEY));
 
         mWebView.setWebViewClient(new BrowserWebViewClient(this));
@@ -162,8 +150,6 @@ protected void onPause() {
         CookieSyncManager.getInstance().stopSync();
         mWebView.setWebChromeClient(null);
         WebViews.onPause(mWebView, isFinishing());
-        // Pause dwell time counting.
-        dwellTimeTracker.pause();
     }
 
     @Override
@@ -185,8 +171,6 @@ public void onProgressChanged(WebView webView, int progress) {
         });
 
         mWebView.onResume();
-
-        dwellTimeTracker.start();
     }
 
     @Override
@@ -203,13 +187,6 @@ protected void onDestroy() {
         super.onDestroy();
         mWebView.destroy();
         mWebView = null;
-        // Log dwell time value.
-        MoPubEvents.log(new Event.Builder(Name.AD_DWELL_TIME,
-                Category.AD_INTERACTIONS,
-                SamplingRate.AD_INTERACTIONS.getSamplingRate())
-                .withDspCreativeId(mDspCreativeId)
-                .withPerformanceDurationMs(dwellTimeTracker.getInterval())
-                .build());
     }
 
     @SuppressWarnings("ResourceType") // Using XML resources causes issues in Unity
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java
index 8d7a4e86..b57e1429 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java
@@ -4,6 +4,8 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
+import com.mopub.common.privacy.PersonalInfoManager;
+
 import java.lang.ref.WeakReference;
 import java.util.HashSet;
 import java.util.Set;
@@ -72,6 +74,11 @@ public void onPause(@NonNull final Activity activity) {
 
     @Override
     public void onResume(@NonNull final Activity activity) {
+        final PersonalInfoManager personalInfoManager = MoPub.getPersonalInformationManager();
+        if (personalInfoManager != null) {
+            personalInfoManager.requestSync(false);
+        }
+
         for (LifecycleListener lifecycleListener : mLifecycleListeners) {
             lifecycleListener.onResume(activity);
         }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SdkConfiguration.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SdkConfiguration.java
new file mode 100644
index 00000000..2e456d32
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SdkConfiguration.java
@@ -0,0 +1,159 @@
+package com.mopub.common;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.util.MoPubCollections;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+
+/**
+ * Data object holding any SDK initialization parameters.
+ */
+public class SdkConfiguration {
+
+    /**
+     * Any ad unit that your app uses.
+     */
+    @NonNull private final String mAdUnitId;
+
+    /**
+     * List of the class names of advanced bidders to initialize.
+     */
+    @NonNull private final List<Class<? extends MoPubAdvancedBidder>> mAdvancedBidders;
+
+    /**
+     * Used for rewarded video initialization. This holds each custom event's unique settings.
+     */
+    @NonNull private final MediationSettings[] mMediationSettings;
+
+    /**
+     * List of class names of rewarded video custom events to initialize. These classes must
+     * extend CustomEventRewardedVideo.
+     */
+    @Nullable private final List<String> mNetworksToInit;
+
+    /**
+     * Holds data for SDK initialization. Do not call this constructor directly; use the Builder.
+     */
+    private SdkConfiguration(@NonNull final String adUnitId,
+            @NonNull final List<Class<? extends MoPubAdvancedBidder>> advancedBidders,
+            @NonNull final MediationSettings[] mediationSettings,
+            @Nullable final List<String> networksToInit) {
+        Preconditions.checkNotNull(adUnitId);
+        Preconditions.checkNotNull(advancedBidders);
+
+        mAdUnitId = adUnitId;
+        mAdvancedBidders = advancedBidders;
+        mMediationSettings = mediationSettings;
+        mNetworksToInit = networksToInit;
+    }
+
+    @NonNull
+    public String getAdUnitId() {
+        return mAdUnitId;
+    }
+
+    @NonNull
+    public List<Class<? extends MoPubAdvancedBidder>> getAdvancedBidders() {
+        return Collections.unmodifiableList(mAdvancedBidders);
+    }
+
+    @NonNull
+    public MediationSettings[] getMediationSettings() {
+        return Arrays.copyOf(mMediationSettings, mMediationSettings.length);
+    }
+
+    @Nullable
+    public List<String> getNetworksToInit() {
+        if (mNetworksToInit == null) {
+            return null;
+        }
+        return Collections.unmodifiableList(mNetworksToInit);
+    }
+
+    public static class Builder {
+        @NonNull private String adUnitId;
+        @NonNull private final List<Class<? extends MoPubAdvancedBidder>> advancedBidders;
+        @NonNull private MediationSettings[] mediationSettings;
+        @Nullable private List<String> networksToInit;
+
+        /**
+         * Use this builder instead of creating a new SdkConfiguration. This Builder needs any ad
+         * unit that is used by this app.
+         *
+         * @param adUnitId Any ad unit id used by this app. This cannot be null.
+         */
+        public Builder(@NonNull final String adUnitId) {
+            this.adUnitId = adUnitId;
+            advancedBidders = new ArrayList<Class<? extends MoPubAdvancedBidder>>();
+            mediationSettings = new MediationSettings[0];
+        }
+
+        /**
+         * Adds a single advanced bidder class to be initialized.
+         *
+         * @param advancedBidder The advanced bidder class. Cannot be null.
+         * @return The builder.
+         */
+        public Builder withAdvancedBidder(
+                @NonNull final Class<? extends MoPubAdvancedBidder> advancedBidder) {
+            Preconditions.checkNotNull(advancedBidder);
+
+            this.advancedBidders.add(advancedBidder);
+            return this;
+        }
+
+        /**
+         * Adds a collection of advanced bidder classes to be initialized.
+         *
+         * @param advancedBidders Collection of advanced bidder classes. Cannot be null.
+         * @return The builder.
+         */
+        public Builder withAdvancedBidders(
+                @NonNull final Collection<Class<? extends MoPubAdvancedBidder>> advancedBidders) {
+            Preconditions.NoThrow.checkNotNull(advancedBidders);
+
+            MoPubCollections.addAllNonNull(this.advancedBidders, advancedBidders);
+            return this;
+        }
+
+        /**
+         * Adds mediation settings for rewarded video custom events.
+         *
+         * @param mediationSettings Array of mediation settings. Can be empty but not null.
+         * @return The builder.
+         */
+        public Builder withMediationSettings(@NonNull MediationSettings... mediationSettings) {
+            Preconditions.checkNotNull(mediationSettings);
+
+            this.mediationSettings = mediationSettings;
+            return this;
+        }
+
+        /**
+         * Adds a list of rewarded video custom events to initialize.
+         *
+         * @param networksToInit List of full class names as Strings to initialize for rewarded video.
+         * @return The builder.
+         */
+        public Builder withNetworksToInit(@Nullable final List<String> networksToInit) {
+            if (networksToInit == null) {
+                return this;
+            }
+
+            this.networksToInit = new ArrayList<>();
+            MoPubCollections.addAllNonNull(this.networksToInit, networksToInit);
+            return this;
+        }
+
+        public SdkConfiguration build() {
+            return new SdkConfiguration(adUnitId, advancedBidders, mediationSettings,
+                    networksToInit);
+        }
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SdkInitializationListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SdkInitializationListener.java
new file mode 100644
index 00000000..ba96a762
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SdkInitializationListener.java
@@ -0,0 +1,11 @@
+package com.mopub.common;
+
+import android.content.Context;
+
+/**
+ * Called when Sdk initialization completes from
+ * {@link MoPub#initializeSdk(Context, SdkConfiguration, SdkInitializationListener)}
+ */
+public interface SdkInitializationListener {
+    void onInitializationFinished();
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java
index 565239a8..39a16649 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java
@@ -8,7 +8,6 @@
 import android.text.TextUtils;
 
 import com.mopub.common.MoPub.BrowserAgent;
-import com.mopub.common.event.BaseEvent;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Intents;
 import com.mopub.exceptions.IntentNotResolvableException;
@@ -254,7 +253,7 @@ protected void performAction(
             // 2. Attempt to handle the primary URL
             try {
                 Intents.launchApplicationUrl(context, primaryUri);
-                makeTrackingHttpRequest(primaryTrackingUrls, context, BaseEvent.Name.CLICK_REQUEST);
+                makeTrackingHttpRequest(primaryTrackingUrls, context);
                 return;
             } catch (IntentNotResolvableException e) {
                 // Primary URL failed; proceed to attempt fallback URL
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlHandler.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlHandler.java
index 599dd1c8..b665bf52 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlHandler.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlHandler.java
@@ -6,7 +6,6 @@
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
-import com.mopub.common.event.BaseEvent;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Intents;
 import com.mopub.exceptions.IntentNotResolvableException;
@@ -313,8 +312,7 @@ public boolean handleResolvedUrl(@NonNull final Context context,
                     if (!mAlreadySucceeded && !mTaskPending
                             && !UrlAction.IGNORE_ABOUT_SCHEME.equals(urlAction)
                             && !UrlAction.HANDLE_MOPUB_SCHEME.equals(urlAction)) {
-                        makeTrackingHttpRequest(trackingUrls, context,
-                                BaseEvent.Name.CLICK_REQUEST);
+                        makeTrackingHttpRequest(trackingUrls, context);
                         mResultActions.urlHandlingSucceeded(destinationUri.toString(),
                                 urlAction);
                         mAlreadySucceeded = true;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/BaseEvent.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/BaseEvent.java
deleted file mode 100644
index 5571fc30..00000000
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/BaseEvent.java
+++ /dev/null
@@ -1,605 +0,0 @@
-package com.mopub.common.event;
-
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import com.mopub.common.ClientMetadata;
-import com.mopub.common.Preconditions;
-
-import java.text.SimpleDateFormat;
-import java.util.Date;
-
-import static com.mopub.common.ClientMetadata.MoPubNetworkType;
-
-public abstract class BaseEvent {
-
-    public enum ScribeCategory {
-        EXCHANGE_CLIENT_EVENT("exchange_client_event"),
-        EXCHANGE_CLIENT_ERROR("exchange_client_error");
-
-        @NonNull private final String mScribeCategory;
-        ScribeCategory(@NonNull String scribeCategory) {
-            mScribeCategory = scribeCategory;
-        }
-
-        @NonNull
-        public String getCategory() {
-            return mScribeCategory;
-        }
-    }
-
-    public enum SdkProduct {
-        NONE(0),
-        WEB_VIEW(1),
-        NATIVE(2);
-
-        private final int mType;
-        SdkProduct(int type) {
-            mType = type;
-        }
-
-        public int getType() {
-            return mType;
-        }
-    }
-
-    public enum AppPlatform {
-        NONE(0),
-        IOS(1),
-        ANDROID(2),
-        MOBILE_WEB(3);
-
-        private final int mType;
-        AppPlatform(int type) {
-            mType = type;
-        }
-
-        public int getType() {
-            return mType;
-        }
-    }
-
-    public enum Name {
-        // Ad Requests:
-        AD_REQUEST("ad_request"),
-        IMPRESSION_REQUEST("impression_request"),
-        CLICK_REQUEST("click_request"),
-
-        // Native Video:
-        DOWNLOAD_START("download_start"),
-        DOWNLOAD_VIDEO_READY("download_video_ready"),
-        DOWNLOAD_BUFFERING("download_video_buffering"),
-        DOWNLOAD_FINISHED("download_finished"),
-        ERROR_DURING_PLAYBACK("error_during_playback"),
-        ERROR_FAILED_TO_PLAY("error_failed_to_play"),
-
-        // Ad Interactions
-        AD_DWELL_TIME("clickthrough_dwell_time"),
-        ;
-
-        @NonNull private final String mName;
-        Name(@NonNull String name) {
-            mName = name;
-        }
-
-        @NonNull
-        public String getName() {
-            return mName;
-        }
-    }
-
-    public enum Category {
-        REQUESTS("requests"),
-        NATIVE_VIDEO("native_video"),
-        AD_INTERACTIONS("ad_interactions"),
-        ;
-
-        @NonNull private final String mCategory;
-        Category(@NonNull String category) {
-            mCategory = category;
-        }
-
-        @NonNull
-        public String getCategory() {
-            return mCategory;
-        }
-    }
-
-    public enum SamplingRate {
-        AD_REQUEST(0.1),
-        NATIVE_VIDEO(0.1),
-        AD_INTERACTIONS(0.1),
-        ;
-
-        private final double mSamplingRate;
-        SamplingRate(double samplingRate) {
-            mSamplingRate = samplingRate;
-        }
-
-        public double getSamplingRate() {
-            return mSamplingRate;
-        }
-    }
-
-    @NonNull private final ScribeCategory mScribeCategory;
-    @NonNull private final Name mName;
-    @NonNull private final Category mCategory;
-    @Nullable private final SdkProduct mSdkProduct;
-    @Nullable private final String mAdUnitId;
-    @Nullable private final String mAdCreativeId;
-    @Nullable private final String mAdType;
-    @Nullable private final String mAdNetworkType;
-    @Nullable private final Double mAdWidthPx;
-    @Nullable private final Double mAdHeightPx;
-    @Nullable private final String mDspCreativeId;
-    @Nullable private final Integer mDeviceScreenWidthDip;
-    @Nullable private final Integer mDeviceScreenHeightDip;
-    @Nullable private final Double mGeoLat;
-    @Nullable private final Double mGeoLon;
-    @Nullable private final Double mGeoAccuracy;
-    @Nullable private final MoPubNetworkType mNetworkType;
-    @Nullable private final String mNetworkOperator;
-    @Nullable private final String mNetworkOperatorName;
-    @Nullable private final String mIsoCountryCode;
-    @Nullable private final String mSimOperator;
-    @Nullable private final String mSimOperatorName;
-    @Nullable private final String mSimIsoCountryCode;
-    @Nullable private final Double mPerformanceDurationMs;
-    @Nullable private final String mRequestId;
-    @Nullable private final Integer mRequestStatusCode;
-    @Nullable private final String mRequestUri;
-    @Nullable private final Integer mRequestRetries;
-    private final long mTimestampUtcMs;
-    @Nullable private ClientMetadata mClientMetaData;
-
-     /**
-     * The percentage of events, in range 0 - 1.0, to be logged.
-     */
-    private final double mSamplingRate;
-
-    public BaseEvent(@NonNull final Builder builder) {
-        Preconditions.checkNotNull(builder);
-
-        mScribeCategory = builder.mScribeCategory;
-        mName = builder.mName;
-        mCategory = builder.mCategory;
-        mSdkProduct = builder.mSdkProduct;
-        mAdUnitId = builder.mAdUnitId;
-        mAdCreativeId = builder.mAdCreativeId;
-        mAdType = builder.mAdType;
-        mAdNetworkType = builder.mAdNetworkType;
-        mAdWidthPx = builder.mAdWidthPx;
-        mAdHeightPx = builder.mAdHeightPx;
-        mDspCreativeId = builder.mDspCreativeId;
-        mGeoLat = builder.mGeoLat;
-        mGeoLon = builder.mGeoLon;
-        mGeoAccuracy = builder.mGeoAccuracy;
-        mPerformanceDurationMs = builder.mPerformanceDurationMs;
-        mRequestId = builder.mRequestId;
-        mRequestStatusCode = builder.mRequestStatusCode;
-        mRequestUri = builder.mRequestUri;
-        mRequestRetries = builder.mRequestRetries;
-        mSamplingRate = builder.mSamplingRate;
-        mTimestampUtcMs = System.currentTimeMillis();
-
-        mClientMetaData = ClientMetadata.getInstance();
-        if (mClientMetaData != null) {
-            mDeviceScreenWidthDip = mClientMetaData.getDeviceScreenWidthDip();
-            mDeviceScreenHeightDip = mClientMetaData.getDeviceScreenHeightDip();
-            mNetworkType = mClientMetaData.getActiveNetworkType();
-            mNetworkOperator = mClientMetaData.getNetworkOperator();
-            mNetworkOperatorName = mClientMetaData.getNetworkOperatorName();
-            mIsoCountryCode = mClientMetaData.getIsoCountryCode();
-            mSimOperator = mClientMetaData.getSimOperator();
-            mSimOperatorName = mClientMetaData.getSimOperatorName();
-            mSimIsoCountryCode = mClientMetaData.getSimIsoCountryCode();
-        } else {
-            // Need to silence warnings about variables not being initialized
-            mDeviceScreenWidthDip = null;
-            mDeviceScreenHeightDip = null;
-            mNetworkType = null;
-            mNetworkOperator = null;
-            mNetworkOperatorName = null;
-            mIsoCountryCode = null;
-            mSimOperator = null;
-            mSimOperatorName = null;
-            mSimIsoCountryCode = null;
-        }
-    }
-
-    @NonNull
-    public ScribeCategory getScribeCategory() {
-        return mScribeCategory;
-    }
-
-    @NonNull
-    public Name getName() {
-        return mName;
-    }
-
-    @NonNull
-    public Category getCategory() {
-        return mCategory;
-    }
-
-    @Nullable
-    public SdkProduct getSdkProduct() {
-        return mSdkProduct;
-    }
-
-    @Nullable
-    public String getSdkVersion() {
-        return mClientMetaData == null ? null : mClientMetaData.getSdkVersion();
-    }
-
-    @Nullable
-    public String getAdUnitId() {
-        return mAdUnitId;
-    }
-
-    @Nullable
-    public String getAdCreativeId() {
-        return mAdCreativeId;
-    }
-
-    @Nullable
-    public String getDspCreativeId() {
-        return mDspCreativeId;
-    }
-
-    @Nullable
-    public String getAdType() {
-        return mAdType;
-    }
-
-    @Nullable
-    public String getAdNetworkType() {
-        return mAdNetworkType;
-    }
-
-    @Nullable
-    public Double getAdWidthPx() {
-        return mAdWidthPx;
-    }
-
-    @Nullable
-    public Double getAdHeightPx() {
-        return mAdHeightPx;
-    }
-
-    @Nullable
-    public AppPlatform getAppPlatform() {
-        return AppPlatform.ANDROID;
-    }
-
-    @Nullable
-    public String getAppName() {
-        return mClientMetaData == null ? null : mClientMetaData.getAppName();
-    }
-
-    @Nullable
-    public String getAppPackageName() {
-        return mClientMetaData == null ? null : mClientMetaData.getAppPackageName();
-    }
-
-    @Nullable
-    public String getAppVersion() {
-        return mClientMetaData == null ? null : mClientMetaData.getAppVersion();
-    }
-
-    @Nullable
-    public String getClientAdvertisingId() {
-        return mClientMetaData == null ? null : mClientMetaData.getDeviceId();
-    }
-
-    @NonNull
-    public String getObfuscatedClientAdvertisingId() {
-        // This is a placeholder for the advertising id until we approve a plan to use the
-        // real value
-        return "ifa:XXXX";
-    }
-
-    @NonNull
-    public Boolean getClientDoNotTrack() {
-        // Default to true if we don't have access to the client meta data
-        return mClientMetaData == null || mClientMetaData.isDoNotTrackSet();
-    }
-
-    @Nullable
-    public String getDeviceManufacturer() {
-        return mClientMetaData == null ? null : mClientMetaData.getDeviceManufacturer();
-    }
-
-    @Nullable
-    public String getDeviceModel() {
-        return mClientMetaData == null ? null : mClientMetaData.getDeviceModel();
-    }
-
-    @Nullable
-    public String getDeviceProduct() {
-        return mClientMetaData == null ? null : mClientMetaData.getDeviceProduct();
-    }
-
-    @Nullable
-    public String getDeviceOsVersion() {
-        return mClientMetaData == null ? null : mClientMetaData.getDeviceOsVersion();
-    }
-
-    @Nullable
-    public Integer getDeviceScreenWidthDip() {
-        return mDeviceScreenWidthDip;
-    }
-
-    @Nullable
-    public Integer getDeviceScreenHeightDip() {
-        return mDeviceScreenHeightDip;
-    }
-
-    @Nullable
-    public Double getGeoLat() {
-        return mGeoLat;
-    }
-
-    @Nullable
-    public Double getGeoLon() {
-        return mGeoLon;
-    }
-
-    @Nullable
-    public Double getGeoAccuracy() {
-        return mGeoAccuracy;
-    }
-
-    @Nullable
-    public Double getPerformanceDurationMs() {
-        return mPerformanceDurationMs;
-    }
-
-    @Nullable
-    public MoPubNetworkType getNetworkType() {
-        return mNetworkType;
-    }
-
-    @Nullable
-    public String getNetworkOperatorCode() {
-        return mNetworkOperator;
-    }
-
-    @Nullable
-    public String getNetworkOperatorName() {
-        return mNetworkOperatorName;
-    }
-
-    @Nullable
-    public String getNetworkIsoCountryCode() {
-        return mIsoCountryCode;
-    }
-
-    @Nullable
-    public String getNetworkSimCode() {
-        return mSimOperator;
-    }
-
-    @Nullable
-    public String getNetworkSimOperatorName() {
-        return mSimOperatorName;
-    }
-
-    @Nullable
-    public String getNetworkSimIsoCountryCode() {
-        return mSimIsoCountryCode;
-    }
-
-    @Nullable
-    public String getRequestId() {
-        return mRequestId;
-    }
-
-    @Nullable
-    public Integer getRequestStatusCode() {
-        return mRequestStatusCode;
-    }
-
-    @Nullable
-    public String getRequestUri() {
-        return mRequestUri;
-    }
-
-    @Nullable
-    public Integer getRequestRetries() {
-        return mRequestRetries;
-    }
-
-    public double getSamplingRate() {
-        return mSamplingRate;
-    }
-
-    @NonNull
-    public Long getTimestampUtcMs() {
-        return mTimestampUtcMs;
-    }
-
-    @Override
-    public String toString() {
-        return  "BaseEvent\n" +
-                "ScribeCategory: " + getScribeCategory() + "\n" +
-                "Name: " + getName() + "\n" +
-                "Category: " + getCategory() + "\n" +
-                "SdkProduct: " + getSdkProduct() + "\n" +
-                "SdkVersion: " + getSdkVersion() + "\n" +
-                "AdUnitId: " + getAdUnitId() + "\n" +
-                "AdCreativeId: " + getAdCreativeId() + "\n" +
-                "AdType: " + getAdType() + "\n" +
-                "AdNetworkType: " + getAdNetworkType() + "\n" +
-                "AdWidthPx: " + getAdWidthPx() + "\n" +
-                "AdHeightPx: " + getAdHeightPx() + "\n" +
-                "DspCreativeId: " + getDspCreativeId() + "\n" +
-                "AppPlatform: " + getAppPlatform() + "\n" +
-                "AppName: " + getAppName() + "\n" +
-                "AppPackageName: " + getAppPackageName() + "\n" +
-                "AppVersion: " + getAppVersion() + "\n" +
-                "DeviceManufacturer: " + getDeviceManufacturer() + "\n" +
-                "DeviceModel: " + getDeviceModel() + "\n" +
-                "DeviceProduct: " + getDeviceProduct() + "\n" +
-                "DeviceOsVersion: " + getDeviceOsVersion() + "\n" +
-                "DeviceScreenWidth: " + getDeviceScreenWidthDip() + "\n" +
-                "DeviceScreenHeight: " + getDeviceScreenHeightDip() + "\n" +
-                "GeoLat: " + getGeoLat() + "\n" +
-                "GeoLon: " + getGeoLon() + "\n" +
-                "GeoAccuracy: " + getGeoAccuracy() + "\n" +
-                "PerformanceDurationMs: " + getPerformanceDurationMs() + "\n" +
-                "NetworkType: " + getNetworkType() + "\n" +
-                "NetworkOperatorCode: " + getNetworkOperatorCode() + "\n" +
-                "NetworkOperatorName: " + getNetworkOperatorName() + "\n" +
-                "NetworkIsoCountryCode: " + getNetworkIsoCountryCode() + "\n" +
-                "NetworkSimCode: " + getNetworkSimCode() + "\n" +
-                "NetworkSimOperatorName: " + getNetworkSimOperatorName() + "\n" +
-                "NetworkSimIsoCountryCode: " + getNetworkSimIsoCountryCode() + "\n" +
-                "RequestId: " + getRequestId() + "\n" +
-                "RequestStatusCode: " + getRequestStatusCode() + "\n" +
-                "RequestUri: " + getRequestUri() + "\n" +
-                "RequestRetries: " + getRequestRetries() + "\n" +
-                "SamplingRate: " + getSamplingRate() + "\n" +
-                "TimestampUtcMs: " + new SimpleDateFormat().format(new Date(getTimestampUtcMs())) + "\n";
-    }
-
-    public static abstract class Builder {
-        @NonNull private ScribeCategory mScribeCategory;
-        @NonNull private Name mName;
-        @NonNull private Category mCategory;
-        @Nullable private SdkProduct mSdkProduct;
-        @Nullable private String mAdUnitId;
-        @Nullable private String mAdCreativeId;
-        @Nullable private String mAdType;
-        @Nullable private String mAdNetworkType;
-        @Nullable private Double mAdWidthPx;
-        @Nullable private Double mAdHeightPx;
-        @Nullable private String mDspCreativeId;
-        @Nullable private Double mGeoLat;
-        @Nullable private Double mGeoLon;
-        @Nullable private Double mGeoAccuracy;
-        @Nullable private Double mPerformanceDurationMs;
-        @Nullable private String mRequestId;
-        @Nullable private Integer mRequestStatusCode;
-        @Nullable private String mRequestUri;
-        @Nullable private Integer mRequestRetries;
-
-        /**
-         * The percentage of events, in range 0 - 1.0, to be logged.
-         */
-        private double mSamplingRate;
-
-        public Builder(@NonNull ScribeCategory scribeCategory,
-                @NonNull Name name,
-                @NonNull Category category,
-                double samplingRate) {
-            Preconditions.checkNotNull(scribeCategory);
-            Preconditions.checkNotNull(name);
-            Preconditions.checkNotNull(category);
-            Preconditions.checkArgument(samplingRate >= 0 && samplingRate <= 1.0);
-
-            mScribeCategory = scribeCategory;
-            mName = name;
-            mCategory = category;
-            mSamplingRate = samplingRate;
-        }
-
-        @NonNull
-        public Builder withSdkProduct(@Nullable SdkProduct sdkProduct) {
-            mSdkProduct = sdkProduct;
-            return this;
-        }
-
-        @NonNull
-        public Builder withAdUnitId(@Nullable String adUnitId) {
-            mAdUnitId = adUnitId;
-            return this;
-        }
-
-        @NonNull
-        public Builder withAdCreativeId(@Nullable String adCreativeId) {
-            mAdCreativeId = adCreativeId;
-            return this;
-        }
-
-        @NonNull
-        public Builder withAdType(@Nullable String adType) {
-            mAdType = adType;
-            return this;
-        }
-
-        @NonNull
-        public Builder withAdNetworkType(@Nullable String adNetworkType) {
-            mAdNetworkType = adNetworkType;
-            return this;
-        }
-
-        @NonNull
-        public Builder withAdWidthPx(@Nullable Double adWidthPx) {
-            mAdWidthPx = adWidthPx;
-            return this;
-        }
-
-        @NonNull
-        public Builder withAdHeightPx(@Nullable Double adHeightPx) {
-            mAdHeightPx = adHeightPx;
-            return this;
-        }
-
-        @NonNull
-        public Builder withDspCreativeId(@Nullable String dspCreativeId) {
-            mDspCreativeId = dspCreativeId;
-            return this;
-        }
-
-        @NonNull
-        public Builder withGeoLat(@Nullable Double geoLat) {
-            mGeoLat = geoLat;
-            return this;
-        }
-
-        @NonNull
-        public Builder withGeoLon(@Nullable Double geoLon) {
-            mGeoLon = geoLon;
-            return this;
-        }
-
-        @NonNull
-        public Builder withGeoAccuracy(@Nullable Double geoAccuracy) {
-            mGeoAccuracy = geoAccuracy;
-            return this;
-        }
-
-        @NonNull
-        public Builder withPerformanceDurationMs(@Nullable Double performanceDurationMs) {
-            mPerformanceDurationMs = performanceDurationMs;
-            return this;
-        }
-
-        @NonNull
-        public Builder withRequestId(@Nullable String requestId) {
-            mRequestId = requestId;
-            return this;
-        }
-
-        @NonNull
-        public Builder withRequestStatusCode(@Nullable Integer requestStatusCode) {
-            mRequestStatusCode = requestStatusCode;
-            return this;
-        }
-
-        @NonNull
-        public Builder withRequestUri(@Nullable String requestUri) {
-            mRequestUri = requestUri;
-            return this;
-        }
-
-        @NonNull
-        public Builder withRequestRetries(@Nullable Integer requestRetries) {
-            mRequestRetries = requestRetries;
-            return this;
-        }
-
-        public abstract BaseEvent build();
-    }
-}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/ErrorEvent.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/ErrorEvent.java
deleted file mode 100644
index 05a3d93f..00000000
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/ErrorEvent.java
+++ /dev/null
@@ -1,160 +0,0 @@
-package com.mopub.common.event;
-
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import java.io.PrintWriter;
-import java.io.StringWriter;
-
-/**
- * Immutable data class with error event data.
- */
-public class ErrorEvent extends BaseEvent {
-    @Nullable private final String mErrorExceptionClassName;
-    @Nullable private final String mErrorMessage;
-    @Nullable private final String mErrorStackTrace;
-    @Nullable private final String mErrorFileName;
-    @Nullable private final String mErrorClassName;
-    @Nullable private final String mErrorMethodName;
-    @Nullable private final Integer mErrorLineNumber;
-
-    private ErrorEvent(@NonNull Builder builder) {
-        super(builder);
-        mErrorExceptionClassName = builder.mErrorExceptionClassName;
-        mErrorMessage = builder.mErrorMessage;
-        mErrorStackTrace = builder.mErrorStackTrace;
-        mErrorFileName = builder.mErrorFileName;
-        mErrorClassName = builder.mErrorClassName;
-        mErrorMethodName = builder.mErrorMethodName;
-        mErrorLineNumber = builder.mErrorLineNumber;
-    }
-
-    @Nullable
-    public String getErrorExceptionClassName() {
-        return mErrorExceptionClassName;
-    }
-
-    @Nullable
-    public String getErrorMessage() {
-        return mErrorMessage;
-    }
-
-    @Nullable
-    public String getErrorStackTrace() {
-        return mErrorStackTrace;
-    }
-
-    @Nullable
-    public String getErrorFileName() {
-        return mErrorFileName;
-    }
-
-    @Nullable
-    public String getErrorClassName() {
-        return mErrorClassName;
-    }
-
-    @Nullable
-    public String getErrorMethodName() {
-        return mErrorMethodName;
-    }
-
-    @Nullable
-    public Integer getErrorLineNumber() {
-        return mErrorLineNumber;
-    }
-
-    @Override
-    public String toString() {
-        final String string = super.toString();
-        return string +
-                "ErrorEvent\n" +
-                "ErrorExceptionClassName: " + getErrorExceptionClassName() + "\n" +
-                "ErrorMessage: " + getErrorMessage() + "\n" +
-                "ErrorStackTrace: " + getErrorStackTrace() + "\n" +
-                "ErrorFileName: " + getErrorFileName() + "\n" +
-                "ErrorClassName: " + getErrorClassName() + "\n" +
-                "ErrorMethodName: " + getErrorMethodName() + "\n" +
-                "ErrorLineNumber: " + getErrorLineNumber() + "\n";
-    }
-
-    public static class Builder extends BaseEvent.Builder {
-        @Nullable private String mErrorExceptionClassName;
-        @Nullable private String mErrorMessage;
-        @Nullable private String mErrorStackTrace;
-        @Nullable private String mErrorFileName;
-        @Nullable private String mErrorClassName;
-        @Nullable private String mErrorMethodName;
-        @Nullable private Integer mErrorLineNumber;
-
-        public Builder(@NonNull Name name, @NonNull Category category, double samplingRate) {
-            super(ScribeCategory.EXCHANGE_CLIENT_ERROR, name, category, samplingRate);
-        }
-
-        @NonNull
-        public Builder withErrorExceptionClassName(@Nullable String errorExceptionClassName) {
-            mErrorExceptionClassName = errorExceptionClassName;
-            return this;
-        }
-
-        @NonNull
-        public Builder withErrorMessage(@Nullable String errorMessage) {
-            mErrorMessage = errorMessage;
-            return this;
-        }
-
-        @NonNull
-        public Builder withErrorStackTrace(@Nullable String errorStackTrace) {
-            mErrorStackTrace = errorStackTrace;
-            return this;
-        }
-
-        @NonNull
-        public Builder withErrorFileName(@Nullable String errorFileName) {
-            mErrorFileName = errorFileName;
-            return this;
-        }
-
-        @NonNull
-        public Builder withErrorClassName(@Nullable String errorClassName) {
-            mErrorClassName = errorClassName;
-            return this;
-        }
-
-        @NonNull
-        public Builder withErrorMethodName(@Nullable String errorMethodName) {
-            mErrorMethodName = errorMethodName;
-            return this;
-        }
-
-        @NonNull
-        public Builder withErrorLineNumber(@Nullable Integer errorLineNumber) {
-            mErrorLineNumber = errorLineNumber;
-            return this;
-        }
-
-        @NonNull
-        public Builder withException(@Nullable Exception exception) {
-            mErrorExceptionClassName = exception.getClass().getName();
-            mErrorMessage = exception.getMessage();
-
-            StringWriter stringWriter = new StringWriter();
-            exception.printStackTrace(new PrintWriter(stringWriter));
-            mErrorStackTrace = stringWriter.toString();
-
-            if (exception.getStackTrace().length > 0) {
-                mErrorFileName = exception.getStackTrace()[0].getFileName();
-                mErrorClassName = exception.getStackTrace()[0].getClassName();
-                mErrorMethodName = exception.getStackTrace()[0].getMethodName();
-                mErrorLineNumber = exception.getStackTrace()[0].getLineNumber();
-            }
-            return this;
-        }
-
-        @NonNull
-        @Override
-        public ErrorEvent build() {
-            return new ErrorEvent(this);
-        }
-    }
-}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/Event.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/Event.java
deleted file mode 100644
index 949ce72f..00000000
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/Event.java
+++ /dev/null
@@ -1,74 +0,0 @@
-package com.mopub.common.event;
-
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import com.mopub.common.Preconditions;
-import com.mopub.common.logging.MoPubLog;
-
-/**
- * Immutable data class with client event data.
- */
-public class Event extends BaseEvent {
-    private Event(@NonNull Builder builder) {
-        super(builder);
-    }
-
-    public static class Builder extends BaseEvent.Builder {
-        public Builder(@NonNull Name name, @NonNull Category category, double samplingRate) {
-            super(ScribeCategory.EXCHANGE_CLIENT_EVENT, name, category, samplingRate);
-        }
-
-        @NonNull
-        @Override
-        public Event build() {
-            return new Event(this);
-        }
-    }
-
-    /**
-     * Creates a BaseEvent from the specified event and the metadata surrounding the event.
-     *
-     * @param name         Event name: See {@link com.mopub.common.event.BaseEvent.Name} for
-     *                     constants.
-     * @param category     Category: See {@link com.mopub.common.event.BaseEvent.Category} for
-     *                     constants.
-     * @param samplingRate The percentage of events to sample. See {@link com.mopub.common.event.BaseEvent.SamplingRate}
-     *                     for constants.
-     * @param eventDetails Data object containing the remaining meta data around this event.
-     * @return An {@link BaseEvent} with all the parts combined, or {@code null} if there is no
-     * metadata available.
-     */
-    @Nullable
-    public static BaseEvent createEventFromDetails(@NonNull final BaseEvent.Name name,
-            @NonNull final BaseEvent.Category category,
-            @NonNull final BaseEvent.SamplingRate samplingRate,
-            @Nullable EventDetails eventDetails) {
-        Preconditions.checkNotNull(name);
-        Preconditions.checkNotNull(category);
-        Preconditions.checkNotNull(samplingRate);
-
-        if (eventDetails == null) {
-            MoPubLog.d("Unable to log event due to no details present");
-            return null;
-        }
-
-        return new Event.Builder(name,
-                category,
-                samplingRate.getSamplingRate())
-                .withAdUnitId(eventDetails.getAdUnitId())
-                .withAdCreativeId(eventDetails.getDspCreativeId())
-                .withAdType(eventDetails.getAdType())
-                .withAdNetworkType(eventDetails.getAdNetworkType())
-                .withAdWidthPx(eventDetails.getAdWidthPx())
-                .withAdHeightPx(eventDetails.getAdHeightPx())
-                .withGeoLat(eventDetails.getGeoLatitude())
-                .withGeoLon(eventDetails.getGeoLongitude())
-                .withGeoAccuracy(eventDetails.getGeoAccuracy())
-                .withPerformanceDurationMs(eventDetails.getPerformanceDurationMs())
-                .withRequestId(eventDetails.getRequestId())
-                .withRequestStatusCode(eventDetails.getRequestStatusCode())
-                .withRequestUri(eventDetails.getRequestUri())
-                .build();
-    }
-}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventDetails.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventDetails.java
deleted file mode 100644
index dcba998a..00000000
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventDetails.java
+++ /dev/null
@@ -1,256 +0,0 @@
-package com.mopub.common.event;
-
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import com.mopub.common.Preconditions;
-import com.mopub.common.util.Json;
-
-import java.util.HashMap;
-import java.util.Map;
-
-public class EventDetails {
-
-    public static class Builder {
-        @NonNull private final Map<String, String> eventDetailsMap;
-
-        public Builder() {
-            eventDetailsMap = new HashMap<String, String>();
-        }
-
-        @NonNull
-        public Builder adUnitId(@Nullable final String adUnitId) {
-            if (adUnitId != null) {
-                eventDetailsMap.put(AD_UNIT_ID_KEY, adUnitId);
-            }
-            return this;
-        }
-
-        @NonNull
-        public Builder dspCreativeId(@Nullable final String dspCreativeId) {
-            if (dspCreativeId != null) {
-                eventDetailsMap.put(DSP_CREATIVE_ID_KEY, dspCreativeId);
-            }
-            return this;
-        }
-
-        @NonNull
-        public Builder adType(@Nullable final String adType) {
-            if (adType != null) {
-                eventDetailsMap.put(AD_TYPE_KEY, adType);
-            }
-            return this;
-        }
-
-        @NonNull
-        public Builder adNetworkType(@Nullable final String adNetworkType) {
-            if (adNetworkType != null) {
-                eventDetailsMap.put(AD_NETWORK_TYPE_KEY, adNetworkType);
-            }
-            return this;
-        }
-
-        @NonNull
-        public Builder adWidthPx(@Nullable final Integer adWidthPx) {
-            if (adWidthPx != null) {
-                eventDetailsMap.put(AD_WIDTH_PX_KEY, String.valueOf(adWidthPx));
-            }
-            return this;
-        }
-
-        @NonNull
-        public Builder adHeightPx(@Nullable final Integer adHeightPx) {
-            if (adHeightPx != null) {
-                eventDetailsMap.put(AD_HEIGHT_PX_KEY, String.valueOf(adHeightPx));
-            }
-            return this;
-        }
-
-        @NonNull
-        public Builder geoLatitude(@Nullable final Double geoLatitude) {
-            if (geoLatitude != null) {
-                eventDetailsMap.put(GEO_LATITUDE_KEY, String.valueOf(geoLatitude));
-            }
-            return this;
-        }
-
-        @NonNull
-        public Builder geoLongitude(@Nullable final Double geoLongitude) {
-            if (geoLongitude != null) {
-                eventDetailsMap.put(GEO_LONGITUDE_KEY, String.valueOf(geoLongitude));
-            }
-            return this;
-        }
-
-        @NonNull
-        public Builder geoAccuracy(@Nullable final Float geoAccuracy) {
-            if (geoAccuracy != null) {
-                eventDetailsMap.put(GEO_ACCURACY_KEY, String.valueOf((double) geoAccuracy));
-            }
-            return this;
-        }
-
-        @NonNull
-        public Builder performanceDurationMs(@Nullable final Long performanceDurationMs) {
-            if (performanceDurationMs != null) {
-                eventDetailsMap.put(PERFORMANCE_DURATION_MS_KEY,
-                        String.valueOf((double) performanceDurationMs));
-            }
-            return this;
-        }
-
-        @NonNull
-        public Builder requestId(@Nullable final String requestId) {
-            if (requestId != null) {
-                eventDetailsMap.put(REQUEST_ID_KEY, requestId);
-            }
-            return this;
-        }
-
-        @NonNull
-        public Builder requestStatusCode(@Nullable final Integer requestStatusCode) {
-            if (requestStatusCode != null) {
-                eventDetailsMap.put(REQUEST_STATUS_CODE_KEY, String.valueOf(requestStatusCode));
-            }
-            return this;
-        }
-
-        @NonNull
-        public Builder requestUri(@Nullable final String requestUri) {
-            if (requestUri != null) {
-                eventDetailsMap.put(REQUEST_URI_KEY, requestUri);
-            }
-            return this;
-        }
-
-        @NonNull
-        public EventDetails build() {
-            return new EventDetails(eventDetailsMap);
-        }
-    }
-
-
-    private static final String AD_UNIT_ID_KEY = "ad_unit_id";
-    private static final String DSP_CREATIVE_ID_KEY = "dsp_creative_id";
-    private static final String AD_TYPE_KEY = "ad_type";
-    private static final String AD_NETWORK_TYPE_KEY = "ad_network_type";
-    private static final String AD_WIDTH_PX_KEY = "ad_width_px";
-    private static final String AD_HEIGHT_PX_KEY = "ad_height_px_key";
-    private static final String GEO_LATITUDE_KEY = "geo_latitude";
-    private static final String GEO_LONGITUDE_KEY = "geo_longitude";
-    private static final String GEO_ACCURACY_KEY = "geo_accuracy_key";
-    private static final String PERFORMANCE_DURATION_MS_KEY = "performance_duration_ms";
-    private static final String REQUEST_ID_KEY = "request_id_key";
-    private static final String REQUEST_STATUS_CODE_KEY = "request_status_code";
-    private static final String REQUEST_URI_KEY = "request_uri_key";
-
-    @NonNull private final Map<String, String> mEventDetailsMap;
-
-    private EventDetails(@NonNull final Map<String, String> eventDetailsMap) {
-        Preconditions.checkNotNull(eventDetailsMap);
-        mEventDetailsMap = eventDetailsMap;
-    }
-
-    @Nullable
-    public String getAdUnitId() {
-        return mEventDetailsMap.get(AD_UNIT_ID_KEY);
-    }
-
-    @Nullable
-    public String getDspCreativeId() {
-        return mEventDetailsMap.get(DSP_CREATIVE_ID_KEY);
-    }
-
-    @Nullable
-    public String getAdType() {
-        return mEventDetailsMap.get(AD_TYPE_KEY);
-    }
-
-    @Nullable
-    public String getAdNetworkType() {
-        return mEventDetailsMap.get(AD_NETWORK_TYPE_KEY);
-    }
-
-    @Nullable
-    public Double getAdWidthPx() {
-        return getNullableDoubleValue(mEventDetailsMap, AD_WIDTH_PX_KEY);
-    }
-
-    @Nullable
-    public Double getAdHeightPx() {
-        return getNullableDoubleValue(mEventDetailsMap, AD_HEIGHT_PX_KEY);
-
-    }
-
-    @Nullable
-    public Double getGeoLatitude() {
-        return getNullableDoubleValue(mEventDetailsMap, GEO_LATITUDE_KEY);
-    }
-
-    @Nullable
-    public Double getGeoLongitude() {
-        return getNullableDoubleValue(mEventDetailsMap, GEO_LONGITUDE_KEY);
-    }
-
-    @Nullable
-    public Double getGeoAccuracy() {
-        return getNullableDoubleValue(mEventDetailsMap, GEO_ACCURACY_KEY);
-    }
-
-    @Nullable
-    public Double getPerformanceDurationMs() {
-        return getNullableDoubleValue(mEventDetailsMap, PERFORMANCE_DURATION_MS_KEY);
-    }
-
-    @Nullable
-    public String getRequestId() {
-        return mEventDetailsMap.get(REQUEST_ID_KEY);
-    }
-
-    @Nullable
-    public Integer getRequestStatusCode() {
-        return getNullableIntegerValue(mEventDetailsMap, REQUEST_STATUS_CODE_KEY);
-    }
-
-    @Nullable
-    public String getRequestUri() {
-        return mEventDetailsMap.get(REQUEST_URI_KEY);
-    }
-
-    public String toJsonString() {
-        return Json.mapToJsonString(mEventDetailsMap);
-    }
-
-    @Override
-    public String toString() {
-        return toJsonString();
-    }
-
-    @Nullable
-    private static Double getNullableDoubleValue(@NonNull final Map<String, String> map,
-            @NonNull final String key) {
-        final String value = map.get(key);
-        if (value == null) {
-            return null;
-        }
-        try {
-            return Double.parseDouble(value);
-        } catch (NumberFormatException e) {
-            return null;
-        }
-    }
-
-    @Nullable
-    private static Integer getNullableIntegerValue(@NonNull final Map<String, String> map,
-            @NonNull final String key) {
-        final String value = map.get(key);
-        if (value == null) {
-            return null;
-        }
-        try {
-            return Integer.parseInt(value);
-        } catch (NumberFormatException e) {
-            return null;
-        }
-    }
-}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventDispatcher.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventDispatcher.java
deleted file mode 100644
index f5ca5dbc..00000000
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventDispatcher.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package com.mopub.common.event;
-
-import android.os.Handler;
-import android.os.Looper;
-import android.os.Message;
-
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-
-public class EventDispatcher {
-    private final Iterable<EventRecorder> mEventRecorders;
-    private final Looper mLooper;
-    private final Handler mMessageHandler;
-    private final Handler.Callback mHandlerCallback;
-
-    @VisibleForTesting
-    EventDispatcher(Iterable<EventRecorder> recorders, Looper looper) {
-        mEventRecorders = recorders;
-        mLooper = looper;
-        mHandlerCallback = new Handler.Callback() {
-            @Override
-            public boolean handleMessage(final Message msg) {
-                if (msg.obj instanceof BaseEvent) {
-                    for (final EventRecorder recorder : mEventRecorders) {
-                        recorder.record((BaseEvent) msg.obj);
-                    }
-                } else {
-                    MoPubLog.d("EventDispatcher received non-BaseEvent message type.");
-                }
-                return true;
-            }
-        };
-        mMessageHandler = new Handler(mLooper, mHandlerCallback);
-    }
-
-    public void dispatch(BaseEvent event) {
-        Message.obtain(mMessageHandler, 0, event).sendToTarget();
-    }
-
-    @VisibleForTesting
-    Iterable<EventRecorder> getEventRecorders() {
-        return mEventRecorders;
-    }
-
-    @VisibleForTesting
-    Handler.Callback getHandlerCallback() {
-        return mHandlerCallback;
-    }
-}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventRecorder.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventRecorder.java
deleted file mode 100644
index e24dea37..00000000
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventRecorder.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package com.mopub.common.event;
-
-/**
- * This interface represents a backend to which MoPub client events are logged.
- */
-public interface EventRecorder {
-    void record(BaseEvent baseEvent);
-}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventSampler.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventSampler.java
deleted file mode 100644
index 9b514448..00000000
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventSampler.java
+++ /dev/null
@@ -1,71 +0,0 @@
-package com.mopub.common.event;
-
-import android.support.annotation.NonNull;
-
-import com.mopub.common.Preconditions;
-import com.mopub.common.VisibleForTesting;
-
-import java.util.LinkedHashMap;
-import java.util.Map;
-import java.util.Random;
-
-/**
- * Samples events based on rules defined in the sample method.
- */
-public class EventSampler {
-
-    @VisibleForTesting static final int MAX_SIZE = 100;
-    private static final float LOAD_FACTOR = 0.75f;
-    /**
-     * The capacity is just large enough to hold the max size without rehashing.
-     */
-    private static final int CAPACITY = (int) (MAX_SIZE / LOAD_FACTOR + 2);
-
-    @NonNull private Random mRandom;
-    @NonNull private LinkedHashMap<String, Boolean> mSampleDecisionsCache;
-
-    public EventSampler() {
-        this(new Random());
-    }
-
-    @VisibleForTesting
-    public EventSampler(@NonNull Random random) {
-        mRandom = random;
-        mSampleDecisionsCache = new LinkedHashMap<String, Boolean>(CAPACITY, LOAD_FACTOR, true) {
-            @Override
-            protected boolean removeEldestEntry(Map.Entry<String, Boolean> eldest) {
-                return size() > MAX_SIZE;
-            }
-        };
-    }
-
-    /**
-     * Samples events based on custom rules. Events with the same request ID will either all pass or
-     * be discarded together.
-     *
-     * @param baseEvent The event to be sampled.
-     * @return Will return {@code true} if the event passed sampling and {@code false} if it is to
-     * be discarded.
-     */
-    boolean sample(@NonNull BaseEvent baseEvent) {
-        Preconditions.checkNotNull(baseEvent);
-
-        final String requestId = baseEvent.getRequestId();
-        if (requestId == null) {
-            return mRandom.nextDouble() < baseEvent.getSamplingRate();
-        }
-
-        final Boolean existingSample = mSampleDecisionsCache.get(requestId);
-        if (existingSample != null) {
-            return existingSample;
-        }
-        final boolean newSample = mRandom.nextDouble() < baseEvent.getSamplingRate();
-        mSampleDecisionsCache.put(requestId, newSample);
-        return newSample;
-    }
-
-    @VisibleForTesting
-    int getCacheSize() {
-        return mSampleDecisionsCache.size();
-    }
-}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventSerializer.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventSerializer.java
deleted file mode 100644
index b91c95cd..00000000
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventSerializer.java
+++ /dev/null
@@ -1,143 +0,0 @@
-package com.mopub.common.event;
-
-import android.support.annotation.NonNull;
-
-import com.mopub.common.ClientMetadata;
-import com.mopub.common.Preconditions;
-import com.mopub.common.logging.MoPubLog;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.List;
-
-/**
- * Serializes events to the data format expected by the Scribe service.
- */
-public class EventSerializer {
-
-    /**
-     * Serializes a list of events as a JSON array of flattened JSON objects.
-     *
-     * @param events The events to be serialized.
-     *
-     * @return Will return a {@code JSONArray} of serialized {@code JSONObject}s.
-     */
-    @NonNull
-    public JSONArray serializeAsJson(@NonNull List<BaseEvent> events) {
-        Preconditions.checkNotNull(events);
-
-        JSONArray jsonArray = new JSONArray();
-        for (BaseEvent event : events) {
-            try {
-                jsonArray.put(serializeAsJson(event));
-            } catch (JSONException e) {
-                MoPubLog.d("Failed to serialize event \"" + event.getName() + "\" to JSON: ", e);
-            }
-        }
-        return jsonArray;
-    }
-
-    /**
-     * Serializes a single event as a flattened JSON object. Key values are expected by the Scribe
-     * service.
-     *
-     * @param event The event to be serialized.
-     *
-     * @return Will return a single serialized {@code JSONObject}.
-     */
-    @NonNull
-    public JSONObject serializeAsJson(@NonNull BaseEvent event) throws JSONException {
-        Preconditions.checkNotNull(event);
-
-        // Note: adding null values to the JSONObject will remove the key value pair
-        JSONObject jsonObject = new JSONObject();
-
-        // Required Scribe Request Keys
-        jsonObject.put("_category_", event.getScribeCategory().getCategory());
-        jsonObject.put("ts", event.getTimestampUtcMs());
-
-        // Name Details
-        jsonObject.put("name",  event.getName().getName());
-        jsonObject.put("name_category", event.getCategory().getCategory());
-
-        // SDK Details
-        BaseEvent.SdkProduct sdkProduct = event.getSdkProduct();
-        jsonObject.put("sdk_product", sdkProduct == null ? null : sdkProduct.getType());
-        jsonObject.put("sdk_version", event.getSdkVersion());
-
-        // Ad Details
-        jsonObject.put("ad_unit_id", event.getAdUnitId());
-        jsonObject.put("ad_creative_id", event.getAdCreativeId());
-        jsonObject.put("ad_type", event.getAdType());
-        jsonObject.put("ad_network_type", event.getAdNetworkType());
-        jsonObject.put("ad_width_px", event.getAdWidthPx());
-        jsonObject.put("ad_height_px", event.getAdHeightPx());
-        jsonObject.put("dsp_creative_id", event.getDspCreativeId());
-
-        // App Details
-        BaseEvent.AppPlatform appPlatform = event.getAppPlatform();
-        jsonObject.put("app_platform", appPlatform == null ? null : appPlatform.getType());
-        jsonObject.put("app_name", event.getAppName());
-        jsonObject.put("app_package_name", event.getAppPackageName());
-        jsonObject.put("app_version", event.getAppVersion());
-
-        // Client Details
-        // Server side requires these values to be populated to satisfy thrift union
-        jsonObject.put("client_advertising_id", event.getObfuscatedClientAdvertisingId());
-        jsonObject.put("client_do_not_track", event.getClientDoNotTrack());
-
-        // Device Details
-        jsonObject.put("device_manufacturer", event.getDeviceManufacturer());
-        jsonObject.put("device_model", event.getDeviceModel());
-        jsonObject.put("device_product", event.getDeviceProduct());
-        jsonObject.put("device_os_version", event.getDeviceOsVersion());
-
-        // These fields will actually be the dip value until deprecated and new fields
-        // added for future releases
-        jsonObject.put("device_screen_width_px", event.getDeviceScreenWidthDip());
-        jsonObject.put("device_screen_height_px", event.getDeviceScreenHeightDip());
-
-        // Geo Details
-        jsonObject.put("geo_lat", event.getGeoLat());
-        jsonObject.put("geo_lon", event.getGeoLon());
-        jsonObject.put("geo_accuracy_radius_meters", event.getGeoAccuracy());
-
-        // Performance Details
-        jsonObject.put("perf_duration_ms", event.getPerformanceDurationMs());
-
-        // Network Details
-        ClientMetadata.MoPubNetworkType moPubNetworkType = event.getNetworkType();
-        jsonObject.put("network_type", moPubNetworkType == null ? null : moPubNetworkType.getId());
-        jsonObject.put("network_operator_code", event.getNetworkOperatorCode());
-        jsonObject.put("network_operator_name", event.getNetworkOperatorName());
-        jsonObject.put("network_iso_country_code", event.getNetworkIsoCountryCode());
-        jsonObject.put("network_sim_code", event.getNetworkSimCode());
-        jsonObject.put("network_sim_operator_name", event.getNetworkSimOperatorName());
-        jsonObject.put("network_sim_iso_country_code", event.getNetworkSimIsoCountryCode());
-
-        // Request Details
-        jsonObject.put("req_id", event.getRequestId());
-        jsonObject.put("req_status_code", event.getRequestStatusCode());
-        jsonObject.put("req_uri", event.getRequestUri());
-        jsonObject.put("req_retries", event.getRequestRetries());
-
-        // Timestamp Details
-        jsonObject.put("timestamp_client", event.getTimestampUtcMs());
-
-        if (event instanceof ErrorEvent) {
-            ErrorEvent errorEvent = (ErrorEvent) event;
-            // Error Details
-            jsonObject.put("error_exception_class_name", errorEvent.getErrorExceptionClassName());
-            jsonObject.put("error_message", errorEvent.getErrorMessage());
-            jsonObject.put("error_stack_trace", errorEvent.getErrorStackTrace());
-            jsonObject.put("error_file_name", errorEvent.getErrorFileName());
-            jsonObject.put("error_class_name", errorEvent.getErrorClassName());
-            jsonObject.put("error_method_name", errorEvent.getErrorMethodName());
-            jsonObject.put("error_line_number", errorEvent.getErrorLineNumber());
-        }
-
-        return jsonObject;
-    }
-}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/LogCatEventRecorder.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/LogCatEventRecorder.java
deleted file mode 100644
index f983de70..00000000
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/LogCatEventRecorder.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package com.mopub.common.event;
-
-import com.mopub.common.logging.MoPubLog;
-
-class LogCatEventRecorder implements EventRecorder {
-    @Override
-    public void record(final BaseEvent baseEvent) {
-        MoPubLog.d(baseEvent.toString());
-    }
-}
-
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/MoPubEvents.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/MoPubEvents.java
deleted file mode 100644
index 3e76abff..00000000
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/MoPubEvents.java
+++ /dev/null
@@ -1,55 +0,0 @@
-package com.mopub.common.event;
-
-import android.os.HandlerThread;
-
-import com.mopub.common.VisibleForTesting;
-
-import java.util.ArrayList;
-
-/**
- * Public interface used to record client events.
- */
-public class MoPubEvents {
-
-    private static volatile EventDispatcher sEventDispatcher;
-
-    /**
-     * Log a BaseEvent. MoPub uses logged events to analyze and improve performance.
-     * This method should not be called by app developers.
-     */
-    public static void log(BaseEvent baseEvent) {
-        MoPubEvents.getDispatcher().dispatch(baseEvent);
-    }
-
-    @VisibleForTesting
-    public static void setEventDispatcher(EventDispatcher dispatcher) {
-        sEventDispatcher = dispatcher;
-    }
-
-    /**
-     * Returns a singleton event dispatcher constructed with a single background thread meant to be
-     * used for all event logging operations. Operations that end up on the main thread, such as
-     * the result of a network request, should post to this background thread when interacting
-     * with shared resources in order to avoid concurrency issues.
-     *
-     * This design is meant to emulate an {@code IntentService} which we can't use due to
-     * the requirement of the publisher having to update their manifest file.
-     */
-    @VisibleForTesting
-    static EventDispatcher getDispatcher() {
-        EventDispatcher result = sEventDispatcher;
-        if (result == null) {
-            synchronized (MoPubEvents.class) {
-                result = sEventDispatcher;
-                if (result == null) {
-                    ArrayList<EventRecorder> recorders = new ArrayList<EventRecorder>();
-                    HandlerThread handlerThread = new HandlerThread("mopub_event_logging");
-                    handlerThread.start();
-                    recorders.add(new ScribeEventRecorder(handlerThread.getLooper()));
-                    result = sEventDispatcher = new EventDispatcher(recorders, handlerThread.getLooper());
-                }
-            }
-        }
-        return result;
-    }
-}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/NoopEventRecorder.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/NoopEventRecorder.java
deleted file mode 100644
index 5459ffbe..00000000
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/NoopEventRecorder.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package com.mopub.common.event;
-
-class NoopEventRecorder implements EventRecorder {
-    @Override
-    public void record(final BaseEvent baseEvent) {
-    }
-}
-
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/ScribeEventRecorder.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/ScribeEventRecorder.java
deleted file mode 100644
index 96a63ae9..00000000
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/ScribeEventRecorder.java
+++ /dev/null
@@ -1,142 +0,0 @@
-package com.mopub.common.event;
-
-import android.os.Handler;
-import android.os.Looper;
-import android.support.annotation.NonNull;
-
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.network.ScribeBackoffPolicy;
-import com.mopub.network.ScribeRequest;
-import com.mopub.network.ScribeRequestManager;
-
-import java.util.ArrayList;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Queue;
-
-/**
- * The ScribeEventRecorder manages events being sent to the Scribe service. It is responsible for
- * sampling, batching and kicking off network requests. It is also responsible for ensuring batched
- * events don't grow unbounded.
- */
-public class ScribeEventRecorder implements EventRecorder {
-    private static final String SCRIBE_URL = "https://analytics.mopub.com/i/jot/exchange_client_event";
-    private static final int QUEUE_MAX_SIZE = 500;
-
-    /**
-     * As of SDK 3.6.0, events are roughly 1200 bytes in size. 1200 * 100 = 0.114441 MiB
-     * This threshhold must always be < 1 MiB
-     */
-    private static final int EVENT_COUNT_SEND_THRESHHOLD = 100;
-
-    /**
-     * 2 minute polling time to check for send up events
-     */
-    private static final int POLLING_PERIOD_MS = 2 * 60 * 1000;
-
-    @NonNull private final EventSampler mEventSampler;
-    @NonNull private final Queue<BaseEvent> mEventQueue;
-    @NonNull private final EventSerializer mEventSerializer;
-    @NonNull private final ScribeRequestManager mScribeRequestManager;
-
-    @NonNull private final Handler mPollHandler;
-    @NonNull private final PollingRunnable mPollingRunnable;
-
-    ScribeEventRecorder(@NonNull Looper looper) {
-        this(new EventSampler(),
-                new LinkedList<BaseEvent>(),
-                new EventSerializer(),
-                new ScribeRequestManager(looper),
-                new Handler(looper));
-    }
-
-    @VisibleForTesting
-    ScribeEventRecorder(@NonNull EventSampler eventSampler,
-            @NonNull Queue<BaseEvent> eventQueue,
-            @NonNull EventSerializer eventSerializer,
-            @NonNull ScribeRequestManager scribeRequestManager,
-            @NonNull Handler handler) {
-        mEventSampler = eventSampler;
-        mEventQueue = eventQueue;
-        mEventSerializer = eventSerializer;
-        mScribeRequestManager = scribeRequestManager;
-        mPollHandler = handler;
-        mPollingRunnable = new PollingRunnable();
-    }
-
-    @Override
-    public void record(@NonNull BaseEvent baseEvent) {
-        if (!mEventSampler.sample(baseEvent)) {
-            return;
-        }
-
-        if (mEventQueue.size() >= QUEUE_MAX_SIZE) {
-            MoPubLog.d("EventQueue is at max capacity. " +
-                    "Event \"" + baseEvent.getName() + "\" is being dropped.");
-            return;
-        }
-
-        mEventQueue.add(baseEvent);
-        if (mEventQueue.size() >= EVENT_COUNT_SEND_THRESHHOLD) {
-            sendEvents();
-        }
-
-        scheduleNextPoll();
-    }
-
-    @VisibleForTesting
-    void sendEvents() {
-        if (mScribeRequestManager.isAtCapacity()) {
-            return;
-        }
-
-        final List<BaseEvent> events = dequeueEvents();
-        if (events.isEmpty()) {
-            return;
-        }
-
-        mScribeRequestManager.makeRequest(
-                new ScribeRequest.ScribeRequestFactory() {
-                    @Override
-                    public ScribeRequest createRequest(ScribeRequest.Listener listener) {
-                        return new ScribeRequest(SCRIBE_URL, events, mEventSerializer, listener);
-                    }
-                },
-                new ScribeBackoffPolicy()
-        );
-    }
-
-    @VisibleForTesting
-    @NonNull
-    List<BaseEvent> dequeueEvents() {
-        ArrayList<BaseEvent> baseEvents = new ArrayList<BaseEvent>();
-
-        // Note: Some queues do not have constant time O(1) performance for its #size()
-        // method, so we're peeking and polling instead
-        while (mEventQueue.peek() != null && baseEvents.size() < EVENT_COUNT_SEND_THRESHHOLD) {
-            baseEvents.add(mEventQueue.poll());
-        }
-        return baseEvents;
-    }
-
-    @VisibleForTesting
-    void scheduleNextPoll() {
-        // Only schedule if there are no messages already scheduled.
-        // The user defined message code, the 'what' param in Handler#hasMessages, defaults to
-        // 0 for posting a delayed runnable
-        if (mPollHandler.hasMessages(0) || mEventQueue.isEmpty()) {
-            return;
-        }
-
-        mPollHandler.postDelayed(mPollingRunnable, POLLING_PERIOD_MS);
-    }
-
-    class PollingRunnable implements Runnable {
-        @Override
-        public void run() {
-            sendEvents();
-            scheduleNextPoll();
-        }
-    }
-}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/AdvertisingId.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/AdvertisingId.java
new file mode 100644
index 00000000..10a5aa81
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/AdvertisingId.java
@@ -0,0 +1,148 @@
+package com.mopub.common.privacy;
+
+import android.support.annotation.NonNull;
+import android.text.TextUtils;
+
+import com.mopub.common.Preconditions;
+
+import java.io.Serializable;
+import java.util.Calendar;
+import java.util.UUID;
+
+public class AdvertisingId implements Serializable {
+    static final long ROTATION_TIME_MS = 24 * 60 * 60 * 1000;
+    private static final String PREFIX_IFA = "ifa:";
+    private static final String PREFIX_MOPUB = "mopub:";
+
+    /**
+     * time when mopub generated ID was rotated last time
+     */
+    @NonNull
+    final Calendar mLastRotation;
+
+    /**
+     * Advertising ID from device, may not always be available.
+     * Empty string if ifa is not available.
+     */
+    @NonNull
+    final String mAdvertisingId;
+
+    /**
+     * virtual device ID, rotated every 24 hours
+     */
+    @NonNull
+    final String mMopubId;
+
+    /**
+     * limit ad tracking device setting
+     */
+    final boolean mDoNotTrack;
+
+    AdvertisingId(@NonNull String ifaId,
+                  @NonNull String mopubId,
+                  boolean limitAdTrackingEnabled,
+                  long rotationTime) {
+        Preconditions.NoThrow.checkNotNull(ifaId);
+        Preconditions.NoThrow.checkNotNull(ifaId);
+
+        mAdvertisingId = ifaId;
+        mMopubId = mopubId;
+        mDoNotTrack = limitAdTrackingEnabled;
+        mLastRotation = Calendar.getInstance();
+        mLastRotation.setTimeInMillis(rotationTime);
+    }
+
+    /**
+     * @param consent - true means user is OK to track his data for Ad purposes
+     * @return read advertising ID or UUID
+     */
+    public String getIdentifier(boolean consent) {
+        return mDoNotTrack || !consent ? mMopubId : mAdvertisingId;
+    }
+
+    /**
+     * @param consent - true means user is OK to track his data for Ad purposes
+     * @return one of two: "mopub:mMopubId" or "ifa:mAdvertisingId"
+     */
+    @NonNull
+    public String getIdWithPrefix(boolean consent) {
+        if (mDoNotTrack || !consent || mAdvertisingId.isEmpty()) {
+            return PREFIX_MOPUB + mMopubId;
+        }
+        return PREFIX_IFA + mAdvertisingId;
+    }
+
+    /**
+     * Gets the ifa with the ifa prefix.
+     *
+     * @return The ifa, if it exists. Empty string if it doesn't.
+     */
+    @NonNull
+    String getIfaWithPrefix() {
+        if (TextUtils.isEmpty(mAdvertisingId)) {
+            return "";
+        }
+        return PREFIX_IFA + mAdvertisingId;
+    }
+
+    /**
+     * @return device Do Not Track settings
+     */
+    public boolean isDoNotTrack() {
+        return mDoNotTrack;
+    }
+
+    @NonNull
+    static AdvertisingId generateExpiredAdvertisingId() {
+        Calendar time = Calendar.getInstance();
+        String mopubId = generateIdString();
+        return new AdvertisingId("", mopubId, false, time.getTimeInMillis() - ROTATION_TIME_MS - 1);
+    }
+
+    @NonNull
+    static AdvertisingId generateFreshAdvertisingId() {
+        Calendar time = Calendar.getInstance();
+        String mopubId = generateIdString();
+        return new AdvertisingId("", mopubId, false, time.getTimeInMillis());
+    }
+
+    @NonNull
+    static String generateIdString() {
+        return UUID.randomUUID().toString();
+    }
+
+    boolean isRotationRequired() {
+        Calendar now = Calendar.getInstance();
+        return now.getTimeInMillis() - mLastRotation.getTimeInMillis() >= ROTATION_TIME_MS;
+    }
+
+    @Override
+    public String toString() {
+        return "AdvertisingId{" +
+                "mLastRotation=" + mLastRotation +
+                ", mAdvertisingId='" + mAdvertisingId + '\'' +
+                ", mMopubId='" + mMopubId + '\'' +
+                ", mDoNotTrack=" + mDoNotTrack +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof AdvertisingId)) return false;
+
+        AdvertisingId that = (AdvertisingId) o;
+
+        if (mDoNotTrack != that.mDoNotTrack) return false;
+        if (!mAdvertisingId.equals(that.mAdvertisingId)) return false;
+        return mMopubId.equals(that.mMopubId);
+    }
+
+    @Override
+    public int hashCode() {
+        int result = mAdvertisingId.hashCode();
+        result = 31 * result + mMopubId.hashCode();
+        result = 31 * result + (mDoNotTrack ? 1 : 0);
+        return result;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentChangeReason.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentChangeReason.java
new file mode 100644
index 00000000..3ac6864b
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentChangeReason.java
@@ -0,0 +1,36 @@
+package com.mopub.common.privacy;
+
+import android.support.annotation.NonNull;
+
+public enum ConsentChangeReason {
+    GRANTED_BY_USER("Consent was explicitly granted by the user"),
+    GRANTED_BY_WHITELISTED_PUB("Consent was explicitly granted by a whitelisted publisher"),
+    GRANTED_BY_NOT_WHITELISTED_PUB(
+            "Consent was explicitly granted by a publisher who is not whitelisted"),
+    DENIED_BY_USER("Consent was explicitly denied by the user"),
+    DENIED_BY_PUB("Consent was explicitly denied by the publisher"),
+    DENIED_BY_DNT_ON("Limit ad tracking was enabled and consent implicitly denied by the user"),
+    DNT_OFF("Limit ad tracking was disabled"),
+    REACQUIRE_BECAUSE_DNT_OFF(
+            "Consent needs to be reacquired because the user disabled limit ad tracking"),
+    REACQUIRE_BECAUSE_PRIVACY_POLICY(
+            "Consent needs to be reacquired because the privacy policy has changed"),
+    REACUIRE_BECAUSE_VENDOR_LIST(
+            "Consent needs to be reacquired because the vendor list has changed"),
+    REAQUIRE_BECAUSE_IAB_VENDOR_LIST(
+            "Consent needs to be reacquired because the IAB vendor list has changed"),
+    REVOKED_BY_SERVER("Consent was revoked by the server"),
+    REACQUIRE_BY_SERVER("Server requires that consent needs to be reacquired"),
+    IFA_CHANGED("Consent needs to be reacquired because the IFA has changed");
+
+    @NonNull private final String mReason;
+
+    ConsentChangeReason(@NonNull final String reason) {
+        mReason = reason;
+    }
+
+    @NonNull
+    public String getReason() {
+        return mReason;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentData.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentData.java
new file mode 100644
index 00000000..cb958630
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentData.java
@@ -0,0 +1,40 @@
+package com.mopub.common.privacy;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+/**
+ * Has all the getters for getting the current and consented data around vendor lists and
+ * privacy policies.
+ */
+public interface ConsentData {
+    @Nullable
+    String getCurrentVendorListVersion();
+
+    @NonNull
+    String getCurrentVendorListLink();
+
+    @NonNull
+    String getCurrentVendorListLink(@Nullable final String language);
+
+    @Nullable
+    String getCurrentPrivacyPolicyVersion();
+
+    @NonNull
+    String getCurrentPrivacyPolicyLink();
+
+    @NonNull
+    String getCurrentPrivacyPolicyLink(@Nullable final String language);
+
+    @Nullable
+    String getCurrentVendorListIabFormat();
+
+    @Nullable
+    String getConsentedPrivacyPolicyVersion();
+
+    @Nullable
+    String getConsentedVendorListVersion();
+
+    @Nullable
+    String getConsentedVendorListIabFormat();
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogActivity.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogActivity.java
new file mode 100644
index 00000000..2e1d2f2f
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogActivity.java
@@ -0,0 +1,145 @@
+package com.mopub.common.privacy;
+
+import android.app.Activity;
+import android.content.ActivityNotFoundException;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.view.Window;
+import android.view.WindowManager;
+
+import com.mopub.common.MoPub;
+import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Intents;
+import com.mopub.exceptions.IntentNotResolvableException;
+
+public class ConsentDialogActivity extends Activity {
+    private static final int CLOSE_BUTTON_DELAY_MS = 10000;
+    private static final String KEY_HTML_PAGE = "html-page-content";
+
+    @Nullable
+    private ConsentDialogLayout mView;
+    @Nullable
+    private Runnable mEnableCloseButtonRunnable;
+    @Nullable
+    private Handler mCloseButtonHandler;
+
+    @Nullable
+    private ConsentStatus mConsentStatus;
+
+    static void start(@NonNull final Context context, @NonNull String htmlData) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(htmlData);
+
+        if (TextUtils.isEmpty(htmlData)) {
+            MoPubLog.e("ConsentDialogActivity htmlData can't be empty string.");
+            return;
+        }
+
+        Intent intent = createIntent(context, htmlData);
+        try {
+            Intents.startActivity(context, intent);
+        } catch (ActivityNotFoundException | IntentNotResolvableException e) {
+            MoPubLog.e("ConsentDialogActivity not found - did you declare it in AndroidManifest.xml?");
+        }
+    }
+
+    @NonNull
+    static Intent createIntent(@NonNull final Context context, @NonNull final String htmlPageContent) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(htmlPageContent);
+
+        Bundle extra = new Bundle();
+        extra.putString(KEY_HTML_PAGE, htmlPageContent);
+        return Intents.getStartActivityIntent(context, ConsentDialogActivity.class, extra);
+    }
+
+    @Override
+    protected void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        Intent intent = getIntent();
+        String htmlBody = intent.getStringExtra(KEY_HTML_PAGE);
+        if (TextUtils.isEmpty(htmlBody)) {
+            MoPubLog.e("Web page for ConsentDialogActivity is empty");
+            finish();
+            return;
+        }
+
+        requestWindowFeature(Window.FEATURE_NO_TITLE);
+        getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
+
+        mView = new ConsentDialogLayout(this);
+        mView.setConsentClickListener(new ConsentDialogLayout.ConsentListener() {
+            @Override
+            public void onConsentClick(ConsentStatus status) {
+                saveConsentStatus(status);
+                setCloseButtonVisibility(false);
+            }
+
+            @Override
+            public void onCloseClick() {
+                finish();
+            }
+        });
+
+        mEnableCloseButtonRunnable = new Runnable() {
+            @Override
+            public void run() {
+                setCloseButtonVisibility(true);
+            }
+        };
+
+        setContentView(mView);
+
+        mView.startLoading(htmlBody, new ConsentDialogLayout.PageLoadListener() {
+            @Override
+            public void onLoadProgress(int progress) {
+                if (progress == ConsentDialogLayout.FINISHED_LOADING) {
+                }
+            }
+        });
+    }
+
+    @Override
+    protected void onStart() {
+        super.onStart();
+        mCloseButtonHandler = new Handler();
+        mCloseButtonHandler.postDelayed(mEnableCloseButtonRunnable, CLOSE_BUTTON_DELAY_MS);
+    }
+
+    @Override
+    protected void onStop() {
+        super.onStop();
+        setCloseButtonVisibility(true);
+    }
+
+    @Override
+    protected void onDestroy() {
+        final PersonalInfoManager infoManager = MoPub.getPersonalInformationManager();
+        if (infoManager != null && mConsentStatus != null) {
+            infoManager.changeConsentStateFromDialog(mConsentStatus);
+        }
+        super.onDestroy();
+    }
+
+
+    void setCloseButtonVisibility(boolean visible) {
+        if (mCloseButtonHandler != null) {
+            mCloseButtonHandler.removeCallbacks(mEnableCloseButtonRunnable);
+        }
+        if (mView != null) {
+            mView.setCloseVisible(visible);
+        }
+    }
+
+    private void saveConsentStatus(@NonNull final ConsentStatus status) {
+        Preconditions.checkNotNull(status);
+        mConsentStatus = status;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java
new file mode 100644
index 00000000..e7051f94
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java
@@ -0,0 +1,122 @@
+package com.mopub.common.privacy;
+
+import android.content.Context;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.Constants;
+import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.MoPubErrorCode;
+import com.mopub.network.MoPubNetworkError;
+import com.mopub.network.Networking;
+import com.mopub.volley.VolleyError;
+
+public class ConsentDialogController implements ConsentDialogRequest.Listener {
+    @NonNull
+    private final Context mAppContext;
+
+    @Nullable private String mHtmlBody;
+    @Nullable private ConsentDialogListener mExtListener;
+    private boolean mReady;
+    private boolean mRequestInFlight;
+    private final Handler mHandler;
+
+    ConsentDialogController(@NonNull final Context appContext) {
+        Preconditions.checkNotNull(appContext);
+
+        mAppContext = appContext.getApplicationContext();
+        mHandler = new Handler();
+    }
+
+    @Override
+    public void onSuccess(final ConsentDialogResponse response) {
+        mRequestInFlight = false;
+        mHtmlBody = response.getHtml();
+        if (TextUtils.isEmpty(mHtmlBody)) {
+            mReady = false;
+            if (mExtListener != null) {
+                mExtListener.onConsentDialogLoadFailed(MoPubErrorCode.INTERNAL_ERROR);
+            }
+            return;
+        }
+
+        mReady = true;
+        if (mExtListener != null) {
+            mExtListener.onConsentDialogLoaded();
+        }
+    }
+
+    @Override
+    public void onErrorResponse(final VolleyError volleyError) {
+        final ConsentDialogListener loadListener = mExtListener;
+        resetState();
+
+        if (loadListener == null) {
+            return;
+        }
+        if (volleyError instanceof MoPubNetworkError) {
+            switch(((MoPubNetworkError) volleyError).getReason()) {
+                case BAD_BODY:
+                    loadListener.onConsentDialogLoadFailed(MoPubErrorCode.INTERNAL_ERROR);
+                    break;
+                default:
+                    loadListener.onConsentDialogLoadFailed(MoPubErrorCode.UNSPECIFIED);
+                    break;
+            }
+        }
+    }
+
+    void loadConsentDialog(@Nullable final ConsentDialogListener listener,
+            @NonNull final String adUnitId) {
+        Preconditions.checkNotNull(adUnitId);
+
+
+        if (mReady) {
+            if (listener != null) {
+                mHandler.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        listener.onConsentDialogLoaded();
+                    }
+                });
+            }
+            return;
+        } else if (mRequestInFlight) {
+            MoPubLog.d("Already making a consent dialog load request.");
+            return;
+        }
+
+
+        mExtListener = listener;
+        mRequestInFlight = true;
+
+        ConsentDialogRequest consentDialogRequest = new ConsentDialogRequest(mAppContext,
+                new ConsentDialogUrlGenerator(mAppContext, adUnitId)
+                        .generateUrlString(Constants.HOST), this);
+        Networking.getRequestQueue(mAppContext).add(consentDialogRequest);
+    }
+
+    boolean showConsentDialog() {
+        if (!mReady || TextUtils.isEmpty(mHtmlBody)) {
+            return false;
+        }
+
+        ConsentDialogActivity.start(mAppContext, mHtmlBody);
+        resetState();
+        return true;
+    }
+
+    boolean isReady() {
+        return mReady;
+    }
+
+    private void resetState() {
+        mRequestInFlight = false;
+        mReady = false;
+        mExtListener = null;
+        mHtmlBody = null;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogLayout.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogLayout.java
new file mode 100644
index 00000000..bd407b6c
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogLayout.java
@@ -0,0 +1,169 @@
+package com.mopub.common.privacy;
+
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.net.Uri;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.view.View;
+import android.webkit.WebSettings;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
+
+import com.mopub.common.CloseableLayout;
+import com.mopub.common.Constants;
+import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Intents;
+import com.mopub.exceptions.IntentNotResolvableException;
+
+import static com.mopub.common.privacy.ConsentStatus.EXPLICIT_NO;
+import static com.mopub.common.privacy.ConsentStatus.EXPLICIT_YES;
+
+class ConsentDialogLayout extends CloseableLayout {
+    static int FINISHED_LOADING = 101;
+
+    final static String URL_CONSENT_YES = "mopub://consent?yes";
+    final static String URL_CONSENT_NO = "mopub://consent?no";
+    final static String URL_CLOSE = "mopub://close";
+
+    interface ConsentListener {
+        void onConsentClick(ConsentStatus state);
+        void onCloseClick();
+    }
+
+    interface PageLoadListener {
+        void onLoadProgress(int progress);
+    }
+
+    @NonNull
+    private final WebView mWebView;
+    @Nullable
+    private PageLoadListener mLoadListener;
+    @Nullable
+    private ConsentListener mConsentListener;
+
+    public ConsentDialogLayout(@NonNull Context context) {
+        super(context);
+        mWebView = initWebView();
+    }
+
+    public ConsentDialogLayout(@NonNull Context context, @Nullable AttributeSet attrs) {
+        super(context, attrs);
+        mWebView = initWebView();
+    }
+
+    public ConsentDialogLayout(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        mWebView = initWebView();
+    }
+
+    void startLoading(@NonNull final String htmlData, @Nullable final PageLoadListener listener) {
+        Preconditions.checkNotNull(htmlData);
+
+        mLoadListener = listener;
+        setupEventsListeners(mWebView);
+
+        mWebView.loadDataWithBaseURL(Constants.HTTPS + "://" + Constants.HOST + "/",
+                htmlData, "text/html", "UTF-8", null);
+    }
+
+    void setConsentClickListener(@NonNull final ConsentListener consentListener) {
+        Preconditions.checkNotNull(consentListener);
+        mConsentListener = consentListener;
+    }
+
+    @SuppressLint("SetJavaScriptEnabled")
+    private WebView initWebView() {
+        WebView webView = new WebView(getContext());
+        webView.setVerticalScrollBarEnabled(false);
+        webView.setHorizontalScrollBarEnabled(false);
+
+        WebSettings webSettings = webView.getSettings();
+        webSettings.setSupportZoom(false);
+        webSettings.setBuiltInZoomControls(false);
+        webSettings.setLoadsImagesAutomatically(true);
+        webSettings.setLoadWithOverviewMode(true);
+
+        webSettings.setJavaScriptEnabled(true);
+        webSettings.setDomStorageEnabled(true);
+        webSettings.setAppCacheEnabled(true);
+        webSettings.setAppCachePath(getContext().getCacheDir().getAbsolutePath());
+        webSettings.setAllowFileAccess(false);
+        webSettings.setAllowContentAccess(false);
+
+        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {
+            webSettings.setAllowUniversalAccessFromFileURLs(false);
+        }
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            webView.setId(View.generateViewId());
+        }
+        setCloseVisible(false);
+
+        addView(webView, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+        return webView;
+    }
+
+    private void setupEventsListeners(@NonNull final WebView webView) {
+        webView.setWebViewClient(webViewClient);
+        setOnCloseListener(new CloseableLayout.OnCloseListener() {
+            @Override
+            public void onClose() {
+                if (mConsentListener != null) {
+                    mConsentListener.onCloseClick();
+                }
+            }
+        });
+    }
+
+    private final WebViewClient webViewClient = new WebViewClient() {
+        @Override
+        public void onPageStarted(WebView view, String url, Bitmap favicon) {
+            super.onPageStarted(view, url, favicon);
+            if (mLoadListener != null) {
+                mLoadListener.onLoadProgress(0);
+            }
+        }
+
+        @Override
+        public void onPageFinished(WebView view, String url) {
+            if (mLoadListener != null) {
+                mLoadListener.onLoadProgress(FINISHED_LOADING);
+            }
+            super.onPageFinished(view, url);
+        }
+
+        @Override
+        public boolean shouldOverrideUrlLoading(WebView view, String url) {
+            if (URL_CONSENT_YES.equals(url)) {
+                if (mConsentListener != null) {
+                    mConsentListener.onConsentClick(EXPLICIT_YES);
+                }
+                return true;
+            } else if (URL_CONSENT_NO.equals(url)) {
+                if (mConsentListener != null) {
+                    mConsentListener.onConsentClick(EXPLICIT_NO);
+                }
+                return true;
+            } else if (URL_CLOSE.equals(url)) {
+                if (mConsentListener != null) {
+                    mConsentListener.onCloseClick();
+                }
+                return true;
+            } else if (!TextUtils.isEmpty(url)) {
+                try {
+                    Intents.launchActionViewIntent(getContext(), Uri.parse(url), "Cannot open native browser for " + url);
+                    return true;
+                } catch (IntentNotResolvableException e) {
+                    MoPubLog.e(e.getMessage());
+                }
+            }
+            return super.shouldOverrideUrlLoading(view, url);
+        }
+    };
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogListener.java
new file mode 100644
index 00000000..dcb84da2
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogListener.java
@@ -0,0 +1,22 @@
+package com.mopub.common.privacy;
+
+import android.support.annotation.NonNull;
+
+import com.mopub.mobileads.MoPubErrorCode;
+
+/**
+ * Use this interface to listen to a successful or failed consent dialog load request.
+ */
+public interface ConsentDialogListener {
+    /**
+     * Called when the consent dialog successfully loads.
+     */
+    void onConsentDialogLoaded();
+
+    /**
+     * Called when the consent dialog fails to load.
+     *
+     * @param moPubErrorCode The reason why the dialog failed to load.
+     */
+    void onConsentDialogLoadFailed(@NonNull final MoPubErrorCode moPubErrorCode);
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogRequest.java
new file mode 100644
index 00000000..2d5c1cdf
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogRequest.java
@@ -0,0 +1,72 @@
+package com.mopub.common.privacy;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.network.MoPubNetworkError;
+import com.mopub.network.MoPubRequest;
+import com.mopub.volley.DefaultRetryPolicy;
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.Response;
+import com.mopub.volley.toolbox.HttpHeaderParser;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+class ConsentDialogRequest extends MoPubRequest<ConsentDialogResponse> {
+    private static final String HTML_KEY = "dialog_html";
+
+    public interface Listener extends Response.ErrorListener {
+        void onSuccess(ConsentDialogResponse response);
+    }
+
+    @Nullable
+    private Listener mListener;
+
+    ConsentDialogRequest(@NonNull Context context, @NonNull String url, @Nullable Listener listener) {
+        super(context, url, listener);
+
+        mListener = listener;
+
+        DefaultRetryPolicy retryPolicy = new DefaultRetryPolicy(
+                DefaultRetryPolicy.DEFAULT_TIMEOUT_MS,
+                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
+                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT);
+        setRetryPolicy(retryPolicy);
+        setShouldCache(false);
+    }
+
+    @Override
+    protected Response<ConsentDialogResponse> parseNetworkResponse(final NetworkResponse networkResponse) {
+        final String responseBody = parseStringBody(networkResponse);
+
+        ConsentDialogResponse response;
+        try {
+            final JSONObject jsonBody = new JSONObject(responseBody);
+            String html = jsonBody.getString(HTML_KEY);
+            if (TextUtils.isEmpty(html)) {
+                throw new JSONException("Empty HTML body");
+            }
+            response = new ConsentDialogResponse(html);
+        } catch (JSONException e) {
+            return Response.error(
+                    new MoPubNetworkError(
+                            "Unable to parse consent dialog request network response.",
+                            MoPubNetworkError.Reason.BAD_BODY,
+                            null
+                    )
+            );
+        }
+
+        return Response.success(response, HttpHeaderParser.parseCacheHeaders(networkResponse));
+    }
+
+    @Override
+    protected void deliverResponse(ConsentDialogResponse consentDialogResponse) {
+        if (mListener != null) {
+            mListener.onSuccess(consentDialogResponse);
+        }
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogResponse.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogResponse.java
new file mode 100644
index 00000000..85107b98
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogResponse.java
@@ -0,0 +1,21 @@
+package com.mopub.common.privacy;
+
+import android.support.annotation.NonNull;
+
+import com.mopub.common.Preconditions;
+
+class ConsentDialogResponse {
+    @NonNull
+    private final String mHtml;
+
+    ConsentDialogResponse(@NonNull final String html) {
+        Preconditions.checkNotNull(html);
+
+        mHtml = html;
+    }
+
+    @NonNull
+    public String getHtml() {
+        return mHtml;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogUrlGenerator.java
new file mode 100644
index 00000000..93eb62df
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogUrlGenerator.java
@@ -0,0 +1,42 @@
+package com.mopub.common.privacy;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+import com.mopub.common.BaseUrlGenerator;
+import com.mopub.common.ClientMetadata;
+import com.mopub.common.MoPub;
+import com.mopub.common.Preconditions;
+
+import static com.mopub.common.Constants.GDPR_CONSENT_HANDLER;
+
+public class ConsentDialogUrlGenerator extends BaseUrlGenerator {
+    /**
+     * Current device default language.
+     */
+    private static final String LANGUAGE_KEY = "language";
+
+    @NonNull
+    private final Context mContext;
+    @NonNull
+    private final String mAdUnitId;
+
+    ConsentDialogUrlGenerator(@NonNull final Context context,
+                              @NonNull final String adUnitId) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(adUnitId);
+
+        mContext = context.getApplicationContext();
+        mAdUnitId = adUnitId;
+    }
+
+    @Override
+    public String generateUrlString(String serverHostname) {
+        initUrlString(serverHostname, GDPR_CONSENT_HANDLER);
+
+        addParam(AD_UNIT_ID_KEY, mAdUnitId);
+        addParam(SDK_VERSION_KEY, MoPub.SDK_VERSION);
+        addParam(LANGUAGE_KEY, ClientMetadata.getCurrentLanguage(mContext));
+        return getFinalUrlString();
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentStatus.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentStatus.java
new file mode 100644
index 00000000..cba8a4b9
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentStatus.java
@@ -0,0 +1,69 @@
+package com.mopub.common.privacy;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+/**
+ * Possible GDPR consent states.
+ */
+public enum ConsentStatus {
+    /**
+     * User has explicitly granted consent.
+     */
+    EXPLICIT_YES("explicit_yes"),
+
+    /**
+     * User has explicitly denied consent.
+     */
+    EXPLICIT_NO("explicit_no"),
+
+    /**
+     * The consent state is unknown due to not having synced to the server, or the user has never
+     * set a consent state.
+     */
+    UNKNOWN("unknown"),
+
+    /**
+     * The SDK has set the consent state to EXPLICIT_YES, but that is not something this publisher
+     * can do since they are not whitelisted. This state is treated as if the user has not granted
+     * consent, but the user should no longer be prompted with the dialog.
+     */
+    POTENTIAL_WHITELIST("potential_whitelist"),
+
+    /**
+     * "Do Not Track". The user has set the limit ad tracking flag on their device. This is as if
+     * the user has denied consent.
+     */
+    DNT("dnt");
+
+    @NonNull final private String mValue;
+
+    ConsentStatus(@NonNull final String value) {
+        mValue = value;
+    }
+
+    /**
+     * AdServer expects these values in this format.
+     *
+     * @return String value of the enum.
+     */
+    @NonNull
+    public String getValue() {
+        return mValue;
+    }
+
+    @NonNull
+    public static ConsentStatus fromString(@Nullable final String name) {
+        if (name == null) {
+            return UNKNOWN;
+        }
+
+        for (ConsentStatus consentState : ConsentStatus.values()) {
+            if (name.equals(consentState.name())) {
+                return consentState;
+            }
+        }
+
+        return UNKNOWN;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentStatusChangeListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentStatusChangeListener.java
new file mode 100644
index 00000000..4333abbb
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentStatusChangeListener.java
@@ -0,0 +1,20 @@
+package com.mopub.common.privacy;
+
+import android.support.annotation.NonNull;
+
+/**
+ * Add one of these to PersonalInfoManager#subscribeConsentStatusChangeListener to listen for
+ * status changes.
+ */
+public interface ConsentStatusChangeListener {
+    /**
+     * Called when a consent status transition happens.
+     *
+     * @param oldConsentStatus              The old consent status.
+     * @param newConsentStatus              The new consent status.
+     * @param canCollectPersonalInformation True if the sdk is allowed to collect personally identifiable information, false otherwise.
+     */
+    void onConsentStateChange(@NonNull final ConsentStatus oldConsentStatus,
+            @NonNull final ConsentStatus newConsentStatus,
+            boolean canCollectPersonalInformation);
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java
new file mode 100644
index 00000000..5984a3bd
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java
@@ -0,0 +1,260 @@
+package com.mopub.common.privacy;
+
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.os.AsyncTask;
+import android.provider.Settings;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.GpsHelper;
+import com.mopub.common.Preconditions;
+import com.mopub.common.SdkInitializationListener;
+import com.mopub.common.SharedPreferencesHelper;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+
+import java.util.Calendar;
+
+public class MoPubIdentifier {
+
+    public interface AdvertisingIdChangeListener {
+        void onIdChanged(@NonNull final AdvertisingId oldId, @NonNull final AdvertisingId newId);
+    }
+
+    private static final String PREF_AD_INFO_GROUP = "com.mopub.settings.identifier";
+    private static final String PREF_IFA_IDENTIFIER = "privacy.identifier.ifa";
+    private static final String PREF_MOPUB_IDENTIFIER = "privacy.identifier.mopub";
+    private static final String PREF_IDENTIFIER_TIME = "privacy.identifier.time";
+    private static final String PREF_LIMIT_AD_TRACKING = "privacy.limit.ad.tracking";
+    private static final int MISSING_VALUE = -1;
+
+    @NonNull
+    private AdvertisingId mAdInfo;
+    @NonNull
+    private final Context mAppContext;
+
+    @Nullable
+    private AdvertisingIdChangeListener mIdChangeListener;
+
+    private boolean mRefreshingAdvertisingInfo;
+
+    private boolean initialized;
+    @Nullable
+    private SdkInitializationListener mInitializationListener;
+
+    public MoPubIdentifier(@NonNull final Context appContext) {
+        this(appContext, null);
+    }
+
+    @VisibleForTesting
+    MoPubIdentifier(@NonNull final Context appContext,
+            @Nullable final AdvertisingIdChangeListener idChangeListener) {
+        Preconditions.NoThrow.checkNotNull(appContext);
+
+        mAppContext = appContext;
+        mIdChangeListener = idChangeListener;
+        mAdInfo = readIdFromStorage(mAppContext);
+        if (mAdInfo == null) {
+            mAdInfo = AdvertisingId.generateExpiredAdvertisingId();
+        }
+        refreshAdvertisingInfo();
+    }
+
+    /**
+     * @return the most recent advertising ID and Do Not Track settings. This method  internally
+     * initiates AdvertisingId refresh. The value is returned instantly on UI thread,
+     * but may take some time to communicate with Google Play Services API when called
+     * from background thread.
+     */
+    @NonNull
+    public AdvertisingId getAdvertisingInfo() {
+        final AdvertisingId adInfo = mAdInfo;
+        refreshAdvertisingInfo();
+        return adInfo;
+    }
+
+    private void refreshAdvertisingInfo() {
+        if (mRefreshingAdvertisingInfo) {
+            return;
+        }
+        mRefreshingAdvertisingInfo = true;
+        new RefreshAdvertisingInfoAsyncTask().execute();
+    }
+
+    void refreshAdvertisingInfoBackgroundThread() {
+        long time = Calendar.getInstance().getTimeInMillis();
+
+        // try google
+        if (isPlayServicesAvailable()) {
+            GpsHelper.AdvertisingInfo info = GpsHelper.fetchAdvertisingInfoSync(mAppContext);
+            if (info != null) {
+                final AdvertisingId oldId = mAdInfo;
+                if (info.limitAdTracking && oldId.isRotationRequired()) {
+                    setAdvertisingInfo(info.advertisingId, AdvertisingId.generateIdString(), info.limitAdTracking, time);
+                } else {
+                    setAdvertisingInfo(info.advertisingId, oldId.mMopubId, info.limitAdTracking, oldId.mLastRotation.getTimeInMillis());
+                }
+                return;
+            }
+        }
+
+        // try amazon
+        final AdvertisingId info = getAmazonAdvertisingInfo(mAppContext);
+        if (info != null) {
+            final AdvertisingId oldId = mAdInfo;
+            if (info.isDoNotTrack() && oldId.isRotationRequired()) {
+                setAdvertisingInfo(info.mAdvertisingId, AdvertisingId.generateIdString(), info.mDoNotTrack, time);
+            } else {
+                setAdvertisingInfo(info.mAdvertisingId, oldId.mMopubId, info.mDoNotTrack, oldId.mLastRotation.getTimeInMillis());
+            }
+            return;
+        }
+
+        // MoPub
+        rotateMopubId();
+    }
+
+    @Nullable
+    private static synchronized AdvertisingId readIdFromStorage(@NonNull final Context appContext) {
+        Preconditions.checkNotNull(appContext);
+
+        Calendar now = Calendar.getInstance();
+        try {
+            final SharedPreferences preferences = SharedPreferencesHelper.getSharedPreferences(appContext, PREF_AD_INFO_GROUP);
+            final String ifa_id = preferences.getString(PREF_IFA_IDENTIFIER, "");
+            final String mopub_id = preferences.getString(PREF_MOPUB_IDENTIFIER, "");
+            final long time = preferences.getLong(PREF_IDENTIFIER_TIME, now.getTimeInMillis());
+            final boolean limitTracking = preferences.getBoolean(PREF_LIMIT_AD_TRACKING, false);
+            if (!TextUtils.isEmpty(ifa_id) && !TextUtils.isEmpty(mopub_id)) {
+                return new AdvertisingId(ifa_id, mopub_id, limitTracking, time);
+            }
+        } catch (ClassCastException ex) {
+            MoPubLog.e("Cannot read identifier from shared preferences");
+        }
+        return null;
+    }
+
+    private static synchronized void writeIdToStorage(@NonNull final Context context, @NonNull final AdvertisingId info) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(info);
+
+        final SharedPreferences preferences = SharedPreferencesHelper.getSharedPreferences(context, PREF_AD_INFO_GROUP);
+        final SharedPreferences.Editor editor = preferences.edit();
+        editor.putBoolean(PREF_LIMIT_AD_TRACKING, info.mDoNotTrack);
+        editor.putString(PREF_IFA_IDENTIFIER, info.mAdvertisingId);
+        editor.putString(PREF_MOPUB_IDENTIFIER, info.mMopubId);
+        editor.putLong(PREF_IDENTIFIER_TIME, info.mLastRotation.getTimeInMillis());
+        editor.apply();
+    }
+
+    @VisibleForTesting
+    static synchronized void clearStorage(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        final SharedPreferences preferences = SharedPreferencesHelper.getSharedPreferences(context, PREF_AD_INFO_GROUP);
+        final SharedPreferences.Editor editor = preferences.edit();
+        editor.remove(PREF_LIMIT_AD_TRACKING);
+        editor.remove(PREF_IFA_IDENTIFIER);
+        editor.remove(PREF_MOPUB_IDENTIFIER);
+        editor.remove(PREF_IDENTIFIER_TIME);
+        editor.apply();
+    }
+
+    private void rotateMopubId() {
+        if (!mAdInfo.isRotationRequired()) {
+            setAdvertisingInfo(mAdInfo);
+            return;
+        }
+
+        setAdvertisingInfo(AdvertisingId.generateFreshAdvertisingId());
+    }
+
+    private void setAdvertisingInfo(@NonNull String advertisingId, @NonNull String mopubId, boolean limitAdTracking, long rotationTime) {
+        Preconditions.NoThrow.checkNotNull(advertisingId);
+        Preconditions.NoThrow.checkNotNull(mopubId);
+
+        setAdvertisingInfo(new AdvertisingId(advertisingId, mopubId, limitAdTracking, rotationTime));
+    }
+
+    private void setAdvertisingInfo(@NonNull final AdvertisingId newId) {
+        AdvertisingId oldId = mAdInfo;
+        mAdInfo = newId;
+        writeIdToStorage(mAppContext, mAdInfo);
+
+        if (!mAdInfo.equals(oldId) || !initialized) {
+            notifyIdChangeListener(oldId, mAdInfo);
+        }
+
+        if (!initialized) {
+            reportInitializationComplete();
+        }
+    }
+
+    /**
+     * @param idChangeListener - will be called every time the OS Advertising ID or
+     *                         flag do-not-track changes its value. Pass null to stop listening.
+     */
+    public void setIdChangeListener(@Nullable final AdvertisingIdChangeListener idChangeListener) {
+        mIdChangeListener = idChangeListener;
+    }
+
+    void setInitializationListener(@Nullable final SdkInitializationListener initializationListener) {
+        mInitializationListener = initializationListener;
+        if (initialized) {
+            reportInitializationComplete();
+        }
+    }
+
+    private void reportInitializationComplete() {
+        if (mInitializationListener != null) {
+            mInitializationListener.onInitializationFinished();
+            mInitializationListener = null;
+        }
+        initialized = true;
+    }
+
+    private void notifyIdChangeListener(@NonNull final AdvertisingId oldId, @NonNull final AdvertisingId newId) {
+        Preconditions.checkNotNull(newId);
+
+        if (mIdChangeListener != null) {
+            mIdChangeListener.onIdChanged(oldId, newId);
+        }
+    }
+
+    private boolean isPlayServicesAvailable() {
+        return GpsHelper.isPlayServicesAvailable(mAppContext);
+    }
+
+    // For Amazon tablets running Fire OS 5.1+ and TV devices running Fire OS 5.2.1.1+, the
+    // advertising info is available as System Settings.
+    // See https://developer.amazon.com/public/solutions/devices/fire-tv/docs/fire-tv-advertising-id
+    @Nullable
+    private AdvertisingId getAmazonAdvertisingInfo(@NonNull final Context context) {
+        Preconditions.NoThrow.checkNotNull(context);
+
+        ContentResolver resolver = context.getContentResolver();
+        int limitAdTracking = Settings.Secure.getInt(resolver, "limit_ad_tracking", MISSING_VALUE);
+        String advertisingId = Settings.Secure.getString(resolver, "advertising_id");
+
+        if (limitAdTracking != MISSING_VALUE && !TextUtils.isEmpty(advertisingId)) {
+            boolean doNotTrack = limitAdTracking != 0;
+            final AdvertisingId oldId = mAdInfo;
+            // merge Amazon and MoPub data in one object
+            return new AdvertisingId(advertisingId, oldId.mMopubId, doNotTrack, oldId.mLastRotation.getTimeInMillis());
+        }
+        return null;
+    }
+
+    private class RefreshAdvertisingInfoAsyncTask extends AsyncTask<Void, Void, Void> {
+
+        @Override
+        protected Void doInBackground(final Void... voids) {
+            refreshAdvertisingInfoBackgroundThread();
+            mRefreshingAdvertisingInfo = false;
+            return null;
+        }
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoData.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoData.java
new file mode 100644
index 00000000..4def20e6
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoData.java
@@ -0,0 +1,386 @@
+package com.mopub.common.privacy;
+
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.ClientMetadata;
+import com.mopub.common.Preconditions;
+import com.mopub.common.SharedPreferencesHelper;
+import com.mopub.common.VisibleForTesting;
+
+import java.util.Locale;
+
+class PersonalInfoData implements ConsentData {
+
+    private static final String PERSONAL_INFO_DATA_SHARED_PREFS = "com.mopub.privacy";
+    private static final String PERSONAL_INFO_PREFIX = "info/";
+    private static final String AD_UNIT_ID_SP_KEY = PERSONAL_INFO_PREFIX + "adunit";
+    private static final String CONSENT_STATUS_SP_KEY = PERSONAL_INFO_PREFIX + "consent_status";
+    private static final String LAST_SUCCESSFULLY_SYNCED_CONSENT_STATUS_SP_KEY = PERSONAL_INFO_PREFIX + "last_successfully_synced_consent_status";
+    private static final String IS_WHITELISTED_SP_KEY = PERSONAL_INFO_PREFIX + "is_whitelisted";
+    private static final String CURRENT_VENDOR_LIST_VERSION_SP_KEY = PERSONAL_INFO_PREFIX + "current_vendor_list_version";
+    private static final String CURRENT_VENDOR_LIST_LINK_SP_KEY = PERSONAL_INFO_PREFIX + "current_vendor_list_link";
+    private static final String CURRENT_PRIVACY_POLICY_VERSION_SP_KEY = PERSONAL_INFO_PREFIX + "current_privacy_policy_version";
+    private static final String CURRENT_PRIVACY_POLICY_LINK_SP_KEY = PERSONAL_INFO_PREFIX + "current_privacy_policy_link";
+    private static final String CURRENT_VENDOR_LIST_IAB_FORMAT_SP_KEY = PERSONAL_INFO_PREFIX + "current_vendor_list_iab_format";
+    private static final String CURRENT_VENDOR_LIST_IAB_HASH_SP_KEY = PERSONAL_INFO_PREFIX + "current_vendor_list_iab_hash";
+    private static final String CONSENTED_VENDOR_LIST_VERSION_SP_KEY = PERSONAL_INFO_PREFIX + "consented_vendor_list_version";
+    private static final String CONSENTED_PRIVACY_POLICY_VERSION_SP_KEY = PERSONAL_INFO_PREFIX + "consented_privacy_policy_version";
+    private static final String CONSENTED_VENDOR_LIST_IAB_FORMAT_SP_KEY = PERSONAL_INFO_PREFIX + "consented_vendor_list_iab_format";
+    private static final String EXTRAS_SP_KEY = PERSONAL_INFO_PREFIX + "extras";
+    private static final String CONSENT_CHANGE_REASON_SP_KEY = PERSONAL_INFO_PREFIX + "consent_change_reason";
+    private static final String REACQUIRE_CONSENT_SP_KEY = PERSONAL_INFO_PREFIX + "reacquire_consent";
+    private static final String GDPR_APPLIES_SP_KEY = PERSONAL_INFO_PREFIX + "gdpr_applies";
+    private static final String UDID_SP_KEY = PERSONAL_INFO_PREFIX + "udid";
+    private static final String LAST_CHANGED_MS_SP_KEY = PERSONAL_INFO_PREFIX + "last_changed_ms";
+    private static final String CONSENT_STATUS_BEFORE_DNT_SP_KEY = PERSONAL_INFO_PREFIX + "consent_status_before_dnt";
+
+    /**
+     * If this is found in a url, replace it with the device default language.
+     */
+    private static final String LANGUAGE_MACRO_KEY = "%%LANGUAGE%%";
+
+    @NonNull private final Context mAppContext;
+
+    // Values that are locally generated
+    @NonNull private String mAdUnitId;
+    @NonNull private ConsentStatus mConsentStatus;
+    @Nullable private ConsentStatus mLastSuccessfullySyncedConsentStatus;
+    @Nullable private String mConsentChangeReason;
+    @Nullable private String mUdid;
+    @Nullable private String mLastChangedMs;
+    @Nullable private ConsentStatus mConsentStatusBeforeDnt;
+
+    // From server
+    private boolean mIsWhitelisted;
+    @Nullable private String mCurrentVendorListVersion;
+    @Nullable private String mCurrentVendorListLink;
+    @Nullable private String mCurrentPrivacyPolicyVersion;
+    @Nullable private String mCurrentPrivacyPolicyLink;
+    @Nullable private String mCurrentVendorListIabFormat;
+    @Nullable private String mCurrentVendorListIabHash;
+    @Nullable private String mConsentedVendorListVersion;
+    @Nullable private String mConsentedPrivacyPolicyVersion;
+    @Nullable private String mConsentedVendorListIabFormat;
+    @Nullable private String mExtras;
+    private boolean mReacquireConsent;
+    @Nullable private Boolean mGdprApplies;
+
+    PersonalInfoData(@NonNull final Context context, @NonNull final String adUnitId) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(adUnitId);
+
+        mAppContext = context.getApplicationContext();
+        mConsentStatus = ConsentStatus.UNKNOWN;
+        getStateFromDisk();
+        mAdUnitId = adUnitId;
+    }
+
+    private void getStateFromDisk() {
+        final SharedPreferences sharedPreferences = SharedPreferencesHelper.getSharedPreferences(
+                mAppContext, PERSONAL_INFO_DATA_SHARED_PREFS);
+        mAdUnitId = sharedPreferences.getString(AD_UNIT_ID_SP_KEY, "");
+        mConsentStatus = ConsentStatus.fromString(sharedPreferences.getString(
+                CONSENT_STATUS_SP_KEY, ConsentStatus.UNKNOWN.name()));
+        final String lastSuccessfullySyncedConsentStatusString = sharedPreferences.getString(
+                LAST_SUCCESSFULLY_SYNCED_CONSENT_STATUS_SP_KEY, null);
+        if (TextUtils.isEmpty(lastSuccessfullySyncedConsentStatusString)) {
+            mLastSuccessfullySyncedConsentStatus = null;
+        } else {
+            mLastSuccessfullySyncedConsentStatus =
+                    ConsentStatus.fromString(lastSuccessfullySyncedConsentStatusString);
+        }
+        mIsWhitelisted = sharedPreferences.getBoolean(IS_WHITELISTED_SP_KEY, false);
+        mCurrentVendorListVersion = sharedPreferences.getString(CURRENT_VENDOR_LIST_VERSION_SP_KEY,
+                null);
+        mCurrentVendorListLink = sharedPreferences.getString(CURRENT_VENDOR_LIST_LINK_SP_KEY, null);
+        mCurrentPrivacyPolicyVersion = sharedPreferences.getString(
+                CURRENT_PRIVACY_POLICY_VERSION_SP_KEY, null);
+        mCurrentPrivacyPolicyLink = sharedPreferences.getString(CURRENT_PRIVACY_POLICY_LINK_SP_KEY,
+                null);
+        mCurrentVendorListIabFormat = sharedPreferences.getString(
+                CURRENT_VENDOR_LIST_IAB_FORMAT_SP_KEY, null);
+        mCurrentVendorListIabHash = sharedPreferences.getString(CURRENT_VENDOR_LIST_IAB_HASH_SP_KEY,
+                null);
+        mConsentedVendorListVersion = sharedPreferences.getString(
+                CONSENTED_VENDOR_LIST_VERSION_SP_KEY, null);
+        mConsentedPrivacyPolicyVersion = sharedPreferences.getString(
+                CONSENTED_PRIVACY_POLICY_VERSION_SP_KEY, null);
+        mConsentedVendorListIabFormat = sharedPreferences.getString(
+                CONSENTED_VENDOR_LIST_IAB_FORMAT_SP_KEY, null);
+        mExtras = sharedPreferences.getString(EXTRAS_SP_KEY, null);
+        mConsentChangeReason = sharedPreferences.getString(CONSENT_CHANGE_REASON_SP_KEY, null);
+        mReacquireConsent = sharedPreferences.getBoolean(REACQUIRE_CONSENT_SP_KEY, false);
+        final String gdprAppliesString = sharedPreferences.getString(GDPR_APPLIES_SP_KEY, null);
+        if (TextUtils.isEmpty(gdprAppliesString)) {
+            mGdprApplies = null;
+        } else {
+            mGdprApplies = Boolean.parseBoolean(gdprAppliesString);
+        }
+        mUdid = sharedPreferences.getString(UDID_SP_KEY, null);
+        mLastChangedMs = sharedPreferences.getString(LAST_CHANGED_MS_SP_KEY, null);
+        final String consentStatusBeforeDnt = sharedPreferences.getString(
+                CONSENT_STATUS_BEFORE_DNT_SP_KEY, null);
+        if (TextUtils.isEmpty(consentStatusBeforeDnt)) {
+            mConsentStatusBeforeDnt = null;
+        } else {
+            mConsentStatusBeforeDnt = ConsentStatus.fromString(consentStatusBeforeDnt);
+        }
+    }
+
+    void writeToDisk() {
+        final SharedPreferences.Editor editor = SharedPreferencesHelper.getSharedPreferences(
+                mAppContext, PERSONAL_INFO_DATA_SHARED_PREFS).edit();
+        editor.putString(AD_UNIT_ID_SP_KEY, mAdUnitId);
+        editor.putString(CONSENT_STATUS_SP_KEY, mConsentStatus.name());
+        editor.putString(LAST_SUCCESSFULLY_SYNCED_CONSENT_STATUS_SP_KEY,
+                mLastSuccessfullySyncedConsentStatus == null ? null : mLastSuccessfullySyncedConsentStatus.name());
+        editor.putBoolean(IS_WHITELISTED_SP_KEY, mIsWhitelisted);
+        editor.putString(CURRENT_VENDOR_LIST_VERSION_SP_KEY, mCurrentVendorListVersion);
+        editor.putString(CURRENT_VENDOR_LIST_LINK_SP_KEY, mCurrentVendorListLink);
+        editor.putString(CURRENT_PRIVACY_POLICY_VERSION_SP_KEY, mCurrentPrivacyPolicyVersion);
+        editor.putString(CURRENT_PRIVACY_POLICY_LINK_SP_KEY, mCurrentPrivacyPolicyLink);
+        editor.putString(CURRENT_VENDOR_LIST_IAB_FORMAT_SP_KEY, mCurrentVendorListIabFormat);
+        editor.putString(CURRENT_VENDOR_LIST_IAB_HASH_SP_KEY, mCurrentVendorListIabHash);
+        editor.putString(CONSENTED_VENDOR_LIST_VERSION_SP_KEY, mConsentedVendorListVersion);
+        editor.putString(CONSENTED_PRIVACY_POLICY_VERSION_SP_KEY, mConsentedPrivacyPolicyVersion);
+        editor.putString(CONSENTED_VENDOR_LIST_IAB_FORMAT_SP_KEY, mConsentedVendorListIabFormat);
+        editor.putString(EXTRAS_SP_KEY, mExtras);
+        editor.putString(CONSENT_CHANGE_REASON_SP_KEY, mConsentChangeReason);
+        editor.putBoolean(REACQUIRE_CONSENT_SP_KEY, mReacquireConsent);
+        editor.putString(GDPR_APPLIES_SP_KEY,
+                mGdprApplies == null ? null : mGdprApplies.toString());
+        editor.putString(UDID_SP_KEY, mUdid);
+        editor.putString(LAST_CHANGED_MS_SP_KEY, mLastChangedMs);
+        editor.putString(CONSENT_STATUS_BEFORE_DNT_SP_KEY,
+                mConsentStatusBeforeDnt == null ? null : mConsentStatusBeforeDnt.name());
+        editor.apply();
+    }
+
+    @NonNull
+    String getAdUnitId() {
+        return mAdUnitId;
+    }
+
+    @NonNull
+    ConsentStatus getConsentStatus() {
+        return mConsentStatus;
+    }
+
+    void setConsentStatus(@NonNull final ConsentStatus consentStatus) {
+        mConsentStatus = consentStatus;
+    }
+
+    @Nullable
+    ConsentStatus getLastSuccessfullySyncedConsentStatus() {
+        return mLastSuccessfullySyncedConsentStatus;
+    }
+
+    void setLastSuccessfullySyncedConsentStatus(
+            @Nullable final ConsentStatus lastSuccessfullySyncedConsentStatus) {
+        mLastSuccessfullySyncedConsentStatus = lastSuccessfullySyncedConsentStatus;
+    }
+
+    boolean isWhitelisted() {
+        return mIsWhitelisted;
+    }
+
+    void setWhitelisted(boolean whitelisted) {
+        mIsWhitelisted = whitelisted;
+    }
+
+    @Nullable
+    public String getCurrentVendorListVersion() {
+        return mCurrentVendorListVersion;
+    }
+
+    void setCurrentVendorListVersion(@Nullable final String currentVendorListVersion) {
+        mCurrentVendorListVersion = currentVendorListVersion;
+    }
+
+    @NonNull
+    public String getCurrentVendorListLink() {
+        return getCurrentVendorListLink(null);
+    }
+
+    @NonNull
+    public String getCurrentVendorListLink(@Nullable final String language) {
+        return replaceLanguageMacro(mCurrentVendorListLink, mAppContext,
+                language);
+    }
+
+    void setCurrentVendorListLink(@Nullable final String currentVendorListLink) {
+        mCurrentVendorListLink = currentVendorListLink;
+    }
+
+    @Nullable
+    public String getCurrentPrivacyPolicyVersion() {
+        return mCurrentPrivacyPolicyVersion;
+    }
+
+    void setCurrentPrivacyPolicyVersion(@Nullable final String currentPrivacyPolicyVersion) {
+        mCurrentPrivacyPolicyVersion = currentPrivacyPolicyVersion;
+    }
+
+    @NonNull
+    public String getCurrentPrivacyPolicyLink() {
+        return getCurrentPrivacyPolicyLink(null);
+    }
+
+    @NonNull
+    public String getCurrentPrivacyPolicyLink(@Nullable final String language) {
+        return replaceLanguageMacro(mCurrentPrivacyPolicyLink, mAppContext,
+                language);
+    }
+
+    void setCurrentPrivacyPolicyLink(@Nullable final String currentPrivacyPolicyLink) {
+        mCurrentPrivacyPolicyLink = currentPrivacyPolicyLink;
+    }
+
+    @Nullable
+    public String getCurrentVendorListIabFormat() {
+        return mCurrentVendorListIabFormat;
+    }
+
+    void setCurrentVendorListIabFormat(@Nullable final String currentVendorListIabFormat) {
+        mCurrentVendorListIabFormat = currentVendorListIabFormat;
+    }
+
+    @Nullable
+    String getCurrentVendorListIabHash() {
+        return mCurrentVendorListIabHash;
+    }
+
+    void setCurrentVendorListIabHash(@Nullable final String currentVendorListIabHash) {
+        mCurrentVendorListIabHash = currentVendorListIabHash;
+    }
+
+    @Nullable
+    public String getConsentedVendorListVersion() {
+        return mConsentedVendorListVersion;
+    }
+
+    void setConsentedVendorListVersion(@Nullable final String consentedVendorListVersion) {
+        mConsentedVendorListVersion = consentedVendorListVersion;
+    }
+
+    @Nullable
+    public String getConsentedPrivacyPolicyVersion() {
+        return mConsentedPrivacyPolicyVersion;
+    }
+
+    void setConsentedPrivacyPolicyVersion(
+            @Nullable final String consentedPrivacyPolicyVersion) {
+        mConsentedPrivacyPolicyVersion = consentedPrivacyPolicyVersion;
+    }
+
+    @Nullable
+    public String getConsentedVendorListIabFormat() {
+        return mConsentedVendorListIabFormat;
+    }
+
+    void setConsentedVendorListIabFormat(
+            @Nullable final String consentedVendorListIabFormat) {
+        mConsentedVendorListIabFormat = consentedVendorListIabFormat;
+    }
+
+    @Nullable
+    public String getExtras() {
+        return mExtras;
+    }
+
+    public void setExtras(@Nullable final String extras) {
+        mExtras = extras;
+    }
+
+    @Nullable
+    String getConsentChangeReason() {
+        return mConsentChangeReason;
+    }
+
+    void setConsentChangeReason(@Nullable final String consentChangeReason) {
+        mConsentChangeReason = consentChangeReason;
+    }
+
+    boolean shouldReacquireConsent() {
+        return mReacquireConsent;
+    }
+
+    void setShouldReacquireConsent(final boolean reacquireConsent) {
+        mReacquireConsent = reacquireConsent;
+    }
+
+    @Nullable
+    Boolean getGdprApplies() {
+        return mGdprApplies;
+    }
+
+    void setGdprApplies(final boolean gdprApplies) {
+        mGdprApplies = gdprApplies;
+    }
+
+    @Nullable
+    String getUdid() {
+        return mUdid;
+    }
+
+    void setUdid(@Nullable final String udid) {
+        mUdid = udid;
+    }
+
+    @Nullable
+    String getLastChangedMs() {
+        return mLastChangedMs;
+    }
+
+    void setLastChangedMs(@Nullable final String lastChangedMs) {
+        mLastChangedMs = lastChangedMs;
+    }
+
+    @Nullable
+    ConsentStatus getConsentStatusBeforeDnt() {
+        return mConsentStatusBeforeDnt;
+    }
+
+    void setConsentStatusBeforeDnt(@Nullable final ConsentStatus consentStatusBeforeDnt) {
+        mConsentStatusBeforeDnt = consentStatusBeforeDnt;
+    }
+
+    @VisibleForTesting
+    @NonNull
+    static String replaceLanguageMacro(@Nullable final String input,
+            @NonNull final Context context, @Nullable final String language) {
+        Preconditions.checkNotNull(context);
+
+        if (TextUtils.isEmpty(input)) {
+            return "";
+        }
+
+        return input.replaceAll(LANGUAGE_MACRO_KEY, validateLanguage(context, language));
+    }
+
+    /**
+     * Returns a valid 2-character ISO 639-1 language. This will return the default language of the
+     * device if language is empty or not an ISO 639-1 language.
+     *
+     * @param context  Context to get Locale.
+     * @param language Desired language.
+     */
+    @NonNull
+    private static String validateLanguage(@NonNull final Context context,
+            @Nullable final String language) {
+        Preconditions.checkNotNull(context);
+
+        for (final String isoLanguage : Locale.getISOLanguages()) {
+            if (isoLanguage != null && isoLanguage.equals(language)) {
+                return language;
+            }
+        }
+        return ClientMetadata.getCurrentLanguage(context);
+    }
+
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java
new file mode 100644
index 00000000..d047a189
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java
@@ -0,0 +1,612 @@
+package com.mopub.common.privacy;
+
+
+import android.content.Context;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.SystemClock;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.ClientMetadata;
+import com.mopub.common.Constants;
+import com.mopub.common.Preconditions;
+import com.mopub.common.SdkInitializationListener;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.MoPubConversionTracker;
+import com.mopub.mobileads.MoPubErrorCode;
+import com.mopub.network.MoPubNetworkError;
+import com.mopub.network.Networking;
+import com.mopub.volley.VolleyError;
+
+import java.util.Calendar;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
+
+/**
+ * The manager handling personal information. If the user is in a GDPR region, MoPub must get
+ * user consent to handle and store user data.
+ */
+public class PersonalInfoManager implements SyncRequest.Listener {
+
+    /**
+     * Default minimum sync delay of 5 minutes.
+     */
+    private static final long MINIMUM_SYNC_DELAY = 5 * 60 * 1000;
+
+    @NonNull private final Context mAppContext;
+    @NonNull private final Set<ConsentStatusChangeListener> mConsentStatusChangeListeners;
+    @NonNull private final PersonalInfoData mPersonalInfoData;
+    @NonNull private final ConsentDialogController mConsentDialogController;
+    @NonNull private final MoPubConversionTracker mConversionTracker;
+    @Nullable private SdkInitializationListener mSdkInitializationListener;
+
+    private long mSyncDelayMs = MINIMUM_SYNC_DELAY;
+    @Nullable private Long mLastSyncRequestTimeUptimeMs;
+    @Nullable private ConsentStatus mSyncRequestConsentStatus;
+    private long mSyncRequestEpochTime;
+    private boolean mSyncRequestInFlight;
+
+    public PersonalInfoManager(@NonNull final Context context, @NonNull final String adUnitId,
+            @Nullable SdkInitializationListener sdkInitializationListener) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(adUnitId);
+
+        mAppContext = context.getApplicationContext();
+        mConsentStatusChangeListeners = Collections.synchronizedSet(
+                new HashSet<ConsentStatusChangeListener>());
+
+        mConsentDialogController = new ConsentDialogController(mAppContext);
+
+        mPersonalInfoData = new PersonalInfoData(context, adUnitId);
+
+        mConversionTracker = new MoPubConversionTracker(mAppContext);
+
+        final MoPubIdentifier.AdvertisingIdChangeListener advertisingIdChangeListener =
+                new MoPubIdentifier.AdvertisingIdChangeListener() {
+                    @Override
+                    public void onIdChanged(@NonNull final AdvertisingId oldId,
+                            @NonNull final AdvertisingId newId) {
+                        Preconditions.checkNotNull(oldId);
+                        Preconditions.checkNotNull(newId);
+
+                        if (oldId.isDoNotTrack() && newId.isDoNotTrack()) {
+                            return;
+                        } else if (!oldId.isDoNotTrack() && newId.isDoNotTrack()) {
+                            attemptStateTransition(ConsentStatus.DNT,
+                                    ConsentChangeReason.DENIED_BY_DNT_ON);
+                            requestSync(true);
+                            return;
+                        } else if (oldId.isDoNotTrack() && !newId.isDoNotTrack()) {
+                            if (ConsentStatus.EXPLICIT_NO.equals(
+                                    mPersonalInfoData.getConsentStatusBeforeDnt())) {
+                                attemptStateTransition(ConsentStatus.EXPLICIT_NO,
+                                        ConsentChangeReason.DNT_OFF);
+                                return;
+                            }
+                            attemptStateTransition(ConsentStatus.UNKNOWN,
+                                    ConsentChangeReason.DNT_OFF);
+                            return;
+                        }
+                        // !oldId.isDoNotTrack() && !newId.isDoNotTrack()
+
+                        if (!TextUtils.isEmpty(newId.mAdvertisingId) &&
+                                !newId.getIfaWithPrefix().equals(mPersonalInfoData.getUdid()) &&
+                                ConsentStatus.EXPLICIT_YES.equals(
+                                        mPersonalInfoData.getConsentStatus())) {
+                            mPersonalInfoData.setLastSuccessfullySyncedConsentStatus(null);
+                            mPersonalInfoData.setLastChangedMs(null);
+                            attemptStateTransition(ConsentStatus.UNKNOWN,
+                                    ConsentChangeReason.IFA_CHANGED);
+                        }
+                    }
+                };
+        mSdkInitializationListener = sdkInitializationListener;
+
+        final MoPubIdentifier moPubIdentifier = ClientMetadata.getInstance(mAppContext).getMoPubIdentifier();
+        moPubIdentifier.setIdChangeListener(advertisingIdChangeListener);
+        moPubIdentifier.setInitializationListener(createInitializationListener());
+    }
+
+    /**
+     * Checks to see if a publisher should load and then show a consent dialog.
+     *
+     * @return True for yes, false for no.
+     */
+    public boolean shouldShowConsentDialog() {
+        if (gdprApplies() == null || !gdprApplies()) {
+            return false;
+        }
+
+        if (ClientMetadata.getInstance(
+                mAppContext).getMoPubIdentifier().getAdvertisingInfo().isDoNotTrack()) {
+            return false;
+        }
+
+        // Check to see if the server said to reacquire consent and that the sdk had consent.
+        if (mPersonalInfoData.shouldReacquireConsent() && mPersonalInfoData.getConsentStatus().equals(
+                ConsentStatus.EXPLICIT_YES)) {
+            return true;
+        }
+        return mPersonalInfoData.getConsentStatus().equals(ConsentStatus.UNKNOWN);
+    }
+
+    /**
+     * Whether or not the consent dialog is done loading and ready to show.
+     *
+     * @return True for yes, false for no.
+     */
+    public boolean isConsentDialogReady() {
+        return mConsentDialogController.isReady();
+    }
+
+    /**
+     * Sends off a request to load the MoPub consent dialog.
+     *
+     * @param consentDialogListener This callback will be called when the dialog has finished
+     *                              loading or the dialog failed to load.
+     */
+    public void loadConsentDialog(
+            @Nullable final ConsentDialogListener consentDialogListener) {
+        if (ClientMetadata.getInstance(
+                mAppContext).getMoPubIdentifier().getAdvertisingInfo().isDoNotTrack()) {
+            if (consentDialogListener != null) {
+                new Handler().post(new Runnable() {
+                    @Override
+                    public void run() {
+                        consentDialogListener.onConsentDialogLoadFailed(
+                                MoPubErrorCode.DO_NOT_TRACK);
+                    }
+                });
+            }
+            return;
+        }
+        mConsentDialogController.loadConsentDialog(consentDialogListener,
+                mPersonalInfoData.getAdUnitId());
+    }
+
+    /**
+     * If the MoPub consent dialog is loaded, then show it.
+     *
+     * @return True for successfully shown, false for failed to show.
+     */
+    public boolean showConsentDialog() {
+        return mConsentDialogController.showConsentDialog();
+    }
+
+    /**
+     * Whether or not the SDK is allowed to collect user data.
+     *
+     * @return true if able to collect user data.
+     */
+    public boolean canCollectPersonalInformation() {
+        final Boolean gdprApplies = gdprApplies();
+        // If we don't know whether or not GDPR applies, then we haven't synced, so we cannot
+        // collect personal information.
+        if (gdprApplies == null) {
+            return false;
+        }
+
+        // If we are not in a GDPR region, we can freely collect user data.
+        if (!gdprApplies) {
+            return true;
+        }
+
+        // Return whether or not we have consent and that Do Not Track is disabled.
+        return getPersonalInfoConsentStatus().equals(ConsentStatus.EXPLICIT_YES) &&
+                !ClientMetadata.getInstance(mAppContext).getMoPubIdentifier().getAdvertisingInfo()
+                        .isDoNotTrack();
+    }
+
+    /**
+     * Returns whether or not the SDK thinks the user is in a GDPR region or not. Returns true for
+     * in a GDPR region, no for not in a GDPR region, and null for unknown.
+     *
+     * @return true for in GDPR region, false for not in GDPR region, null for unknown
+     */
+    public Boolean gdprApplies() {
+        return mPersonalInfoData.getGdprApplies();
+    }
+
+    /**
+     * Don't call this.
+     *
+     * @param consentChangeReason
+     */
+    public void invalidateConsent(@Nullable final String consentChangeReason) {
+        if (TextUtils.isEmpty(consentChangeReason)) {
+            attemptStateTransition(ConsentStatus.UNKNOWN, ConsentChangeReason.REACQUIRE_BY_SERVER);
+            return;
+        }
+        attemptStateTransition(ConsentStatus.UNKNOWN, consentChangeReason);
+    }
+
+    /**
+     * Don't call this.
+     *
+     * @param consentChangeReason
+     */
+    public void forceExplicitNo(@Nullable final String consentChangeReason) {
+        if (TextUtils.isEmpty(consentChangeReason)) {
+            attemptStateTransition(ConsentStatus.EXPLICIT_NO,
+                    ConsentChangeReason.REVOKED_BY_SERVER);
+            return;
+        }
+        attemptStateTransition(ConsentStatus.EXPLICIT_NO, consentChangeReason);
+    }
+
+    /**
+     * Don't call this.
+     *
+     * @param consentChangeReason
+     */
+    public void reacquireConsent(@Nullable final String consentChangeReason) {
+        if (!TextUtils.isEmpty(consentChangeReason)) {
+            mPersonalInfoData.setConsentChangeReason(consentChangeReason);
+        }
+        mPersonalInfoData.setShouldReacquireConsent(true);
+    }
+
+    /**
+     * The user's current consent status. In general, publishers should not query this directly.
+     * It is recommended to use MoPub#canCollectPersonalInformation instead.
+     *
+     * @return ConsentStatus representing the current consent status.
+     */
+    @NonNull
+    public ConsentStatus getPersonalInfoConsentStatus() {
+        return mPersonalInfoData.getConsentStatus();
+    }
+
+    /**
+     * For use from whitelisted publishers only. Grants consent to collect personally identifiable
+     * information for the current user.
+     */
+    public void grantConsent() {
+        if (ClientMetadata.getInstance(mAppContext).getMoPubIdentifier().getAdvertisingInfo()
+                .isDoNotTrack()) {
+            MoPubLog.e("Cannot grant consent because Do Not Track is on.");
+            return;
+        }
+
+        if (mPersonalInfoData.isWhitelisted()) {
+            attemptStateTransition(ConsentStatus.EXPLICIT_YES,
+                    ConsentChangeReason.GRANTED_BY_WHITELISTED_PUB);
+        } else {
+            attemptStateTransition(ConsentStatus.POTENTIAL_WHITELIST,
+                    ConsentChangeReason.GRANTED_BY_NOT_WHITELISTED_PUB);
+        }
+        requestSync(true);
+    }
+
+    /**
+     * Denies consent to collect personally identifiable information for the current user.
+     */
+    public void revokeConsent() {
+        if (ClientMetadata.getInstance(mAppContext).getMoPubIdentifier().getAdvertisingInfo()
+                .isDoNotTrack()) {
+            MoPubLog.e("Cannot revoke consent because Do Not Track is on.");
+            return;
+        }
+
+        attemptStateTransition(ConsentStatus.EXPLICIT_NO, ConsentChangeReason.DENIED_BY_PUB);
+        requestSync(true);
+    }
+
+    void changeConsentStateFromDialog(@NonNull final ConsentStatus consentStatus) {
+        Preconditions.checkNotNull(consentStatus);
+
+        switch (consentStatus) {
+            case EXPLICIT_YES:
+                attemptStateTransition(consentStatus, ConsentChangeReason.GRANTED_BY_USER);
+                requestSync(true);
+                break;
+            case EXPLICIT_NO:
+                attemptStateTransition(consentStatus, ConsentChangeReason.DENIED_BY_USER);
+                requestSync(true);
+                break;
+            default:
+                MoPubLog.d("Invalid consent status: " + consentStatus + ". This is a bug with " +
+                        "the use of changeConsentStateFromDialog.");
+        }
+    }
+
+    /**
+     * Add a listener for consent status changes.
+     *
+     * @param consentStatusChangeListener This listener will be called when a status transition happens.
+     */
+    public void subscribeConsentStatusChangeListener(
+            @Nullable final ConsentStatusChangeListener consentStatusChangeListener) {
+        if (consentStatusChangeListener == null) {
+            return;
+        }
+        mConsentStatusChangeListeners.add(consentStatusChangeListener);
+    }
+
+    /**
+     * Call this to unsubscribe a consentStatusChangeListener.
+     *
+     * @param consentStatusChangeListener This listener will no longer be receiving status transitions.
+     */
+    public void unsubscribeConsentStatusChangeListener(
+            @Nullable final ConsentStatusChangeListener consentStatusChangeListener) {
+        mConsentStatusChangeListeners.remove(consentStatusChangeListener);
+    }
+
+    @VisibleForTesting
+    static boolean shouldMakeSyncRequest(final boolean syncRequestInFlight,
+            @Nullable final Boolean gdprApplies, final boolean force,
+            @Nullable final Long lastSyncRequestTimeMs, final long syncDelay,
+            @Nullable final String udid, final boolean dnt) {
+        if (syncRequestInFlight) {
+            return false;
+        }
+        if (gdprApplies == null) {
+            return true;
+        }
+        if (!gdprApplies) {
+            return false;
+        }
+        if (force) {
+            return true;
+        }
+        if (dnt && TextUtils.isEmpty(udid)) {
+            return false;
+        }
+        if (lastSyncRequestTimeMs == null) {
+            return true;
+        }
+        return SystemClock.uptimeMillis() - lastSyncRequestTimeMs > syncDelay;
+    }
+
+    /**
+     * Called internally to request a sync to ad server about consent status and other metadata
+     *
+     * @param force Call sync even if it has not been mSyncDelayMs. Still won't happen if not in
+     *              a GDPR region or if a request is already in flight.
+     */
+    public void requestSync(final boolean force) {
+        final AdvertisingId advertisingId = ClientMetadata.getInstance(mAppContext)
+                .getMoPubIdentifier().getAdvertisingInfo();
+        if (!shouldMakeSyncRequest(mSyncRequestInFlight,
+                gdprApplies(),
+                force,
+                mLastSyncRequestTimeUptimeMs,
+                mSyncDelayMs,
+                mPersonalInfoData.getUdid(),
+                advertisingId.isDoNotTrack())) {
+            return;
+        }
+
+        mSyncRequestConsentStatus = mPersonalInfoData.getConsentStatus();
+        mSyncRequestEpochTime = Calendar.getInstance().getTimeInMillis();
+        mSyncRequestInFlight = true;
+
+        mLastSyncRequestTimeUptimeMs = SystemClock.uptimeMillis();
+        final SyncUrlGenerator syncUrlGenerator = new SyncUrlGenerator(mAppContext,
+                mSyncRequestConsentStatus.getValue());
+        syncUrlGenerator.withAdUnitId(mPersonalInfoData.getAdUnitId())
+                .withUdid(mPersonalInfoData.getUdid())
+                .withLastChangedMs(mPersonalInfoData.getLastChangedMs())
+                .withLastConsentStatus(mPersonalInfoData.getLastSuccessfullySyncedConsentStatus())
+                .withConsentChangeReason(mPersonalInfoData.getConsentChangeReason())
+                .withConsentedVendorListVersion(mPersonalInfoData.getConsentedVendorListVersion())
+                .withConsentedPrivacyPolicyVersion(
+                        mPersonalInfoData.getConsentedPrivacyPolicyVersion())
+                .withCachedVendorListIabHash(mPersonalInfoData.getCurrentVendorListIabHash())
+                .withExtras(mPersonalInfoData.getExtras())
+                .withGdprApplies(gdprApplies());
+
+
+        final SyncRequest syncRequest = new SyncRequest(mAppContext,
+                syncUrlGenerator.generateUrlString(
+                        Constants.HOST), this);
+        Networking.getRequestQueue(mAppContext).add(syncRequest);
+    }
+
+    public ConsentData getConsentData() {
+        return new PersonalInfoData(mAppContext, mPersonalInfoData.getAdUnitId());
+    }
+
+    /**
+     * Do not call this. This is used internally.
+     */
+    @Deprecated
+    @Override
+    public void onSuccess(final SyncResponse response) {
+        if (mPersonalInfoData.getGdprApplies() == null) {
+            mPersonalInfoData.setGdprApplies(response.isGdprRegion());
+        }
+        mPersonalInfoData.setLastChangedMs("" + mSyncRequestEpochTime);
+        mPersonalInfoData.setLastSuccessfullySyncedConsentStatus(mSyncRequestConsentStatus);
+        mPersonalInfoData.setWhitelisted(response.isWhitelisted());
+        mPersonalInfoData.setCurrentVendorListVersion(response.getCurrentVendorListVersion());
+        mPersonalInfoData.setCurrentVendorListLink(response.getCurrentVendorListLink());
+        mPersonalInfoData.setCurrentPrivacyPolicyVersion(response.getCurrentPrivacyPolicyVersion());
+        mPersonalInfoData.setCurrentPrivacyPolicyLink(response.getCurrentPrivacyPolicyLink());
+        final String iabHash = response.getCurrentVendorListIabHash();
+        final String iabFormat = response.getCurrentVendorListIabFormat();
+        if (!TextUtils.isEmpty(iabHash) && !iabHash.equals(
+                mPersonalInfoData.getCurrentVendorListIabHash()) && !TextUtils.isEmpty(iabFormat)) {
+            mPersonalInfoData.setCurrentVendorListIabFormat(iabFormat);
+            mPersonalInfoData.setCurrentVendorListIabHash(iabHash);
+        }
+        final String extras = response.getExtras();
+        if (!TextUtils.isEmpty(extras)) {
+            mPersonalInfoData.setExtras(extras);
+        }
+        final String consentChangeReason = response.getConsentChangeReason();
+
+        // Only one of these should happen. Prioritize no.
+        if (response.isForceExplicitNo()) {
+            forceExplicitNo(consentChangeReason);
+        } else if (response.isInvalidateConsent()) {
+            invalidateConsent(consentChangeReason);
+        } else if (response.isReacquireConsent()) {
+            reacquireConsent(consentChangeReason);
+        }
+
+        final String callAgainAfterSecs = response.getCallAgainAfterSecs();
+        if (!TextUtils.isEmpty(callAgainAfterSecs)) {
+            try {
+                final long callAgainAfterSecsLong = Long.parseLong(callAgainAfterSecs);
+                if (callAgainAfterSecsLong > 0) {
+                    mSyncDelayMs = callAgainAfterSecsLong * 1000;
+                } else {
+                    MoPubLog.d("callAgainAfterSecs is not positive: " + callAgainAfterSecs);
+                }
+            } catch (NumberFormatException e) {
+                MoPubLog.d("Unable to parse callAgainAfterSecs. Ignoring value");
+            }
+        }
+
+        // Clear out our cached udid if we have sent it one last time in case limit ad tracking
+        // is turned on.
+        if (!ConsentStatus.EXPLICIT_YES.equals(mSyncRequestConsentStatus)) {
+            mPersonalInfoData.setUdid(null);
+        }
+
+        mPersonalInfoData.writeToDisk();
+
+        mSyncRequestInFlight = false;
+
+        if (ConsentStatus.POTENTIAL_WHITELIST.equals(
+                mSyncRequestConsentStatus) && mPersonalInfoData.isWhitelisted()) {
+            attemptStateTransition(ConsentStatus.EXPLICIT_YES,
+                    ConsentChangeReason.GRANTED_BY_WHITELISTED_PUB);
+            requestSync(true);
+        }
+
+        if (mSdkInitializationListener != null) {
+            mSdkInitializationListener.onInitializationFinished();
+            mSdkInitializationListener = null;
+        }
+    }
+
+    /**
+     * SDK-initiated state transitions should try to use this to keep the consent change reason
+     * to one of the reasons we know about.
+     *
+     * @param newConsentStatus    The new consent status we want to transition to.
+     * @param consentChangeReason Why the state changed.
+     */
+    private void attemptStateTransition(@NonNull final ConsentStatus newConsentStatus,
+            @NonNull final ConsentChangeReason consentChangeReason) {
+        attemptStateTransition(newConsentStatus, consentChangeReason.getReason());
+    }
+
+    /**
+     * Server-initiated state transitions may have non-enum change reasons, so use this.
+     *
+     * @param newConsentStatus    The new consent status we want to transition to.
+     * @param consentChangeReason Why the state changed.
+     */
+    private void attemptStateTransition(@NonNull final ConsentStatus newConsentStatus,
+            @NonNull final String consentChangeReason) {
+        Preconditions.checkNotNull(newConsentStatus);
+        Preconditions.checkNotNull(consentChangeReason);
+
+
+        final ConsentStatus oldConsentStatus = mPersonalInfoData.getConsentStatus();
+        MoPubLog.d("Changing consent status from " + oldConsentStatus + "to " + newConsentStatus +
+                " because " + consentChangeReason);
+        mPersonalInfoData.setConsentChangeReason(consentChangeReason);
+        mPersonalInfoData.setConsentStatus(newConsentStatus);
+        if (ConsentStatus.POTENTIAL_WHITELIST.equals(newConsentStatus) ||
+                (!ConsentStatus.POTENTIAL_WHITELIST.equals(oldConsentStatus)) &&
+                        ConsentStatus.EXPLICIT_YES.equals(newConsentStatus)) {
+            mPersonalInfoData.setConsentedPrivacyPolicyVersion(
+                    mPersonalInfoData.getCurrentPrivacyPolicyVersion());
+            mPersonalInfoData.setConsentedVendorListVersion(
+                    mPersonalInfoData.getCurrentVendorListVersion());
+            mPersonalInfoData.setConsentedVendorListIabFormat(
+                    mPersonalInfoData.getCurrentVendorListIabFormat());
+        }
+
+        if (ConsentStatus.DNT.equals(newConsentStatus) ||
+                ConsentStatus.EXPLICIT_NO.equals(newConsentStatus) ||
+                ConsentStatus.UNKNOWN.equals(newConsentStatus)) {
+            mPersonalInfoData.setConsentedPrivacyPolicyVersion(null);
+            mPersonalInfoData.setConsentedVendorListVersion(null);
+            mPersonalInfoData.setConsentedVendorListIabFormat(null);
+        }
+
+        if (ConsentStatus.EXPLICIT_YES.equals(newConsentStatus)) {
+            mPersonalInfoData.setUdid(ClientMetadata.getInstance(
+                    mAppContext).getMoPubIdentifier().getAdvertisingInfo().getIfaWithPrefix());
+        }
+
+        if (ConsentStatus.DNT.equals(newConsentStatus)) {
+            mPersonalInfoData.setConsentStatusBeforeDnt(oldConsentStatus);
+        }
+        mPersonalInfoData.setShouldReacquireConsent(false);
+        mPersonalInfoData.writeToDisk();
+
+        final boolean canCollectPersonalInformation = canCollectPersonalInformation();
+        if (canCollectPersonalInformation) {
+            ClientMetadata.getInstance(mAppContext).repopulateCountryData();
+            if (mConversionTracker.shouldTrack()) {
+                mConversionTracker.reportAppOpen(false);
+            }
+        }
+
+        synchronized (mConsentStatusChangeListeners) {
+            for (final ConsentStatusChangeListener stateChangeListener : mConsentStatusChangeListeners) {
+                new Handler(Looper.getMainLooper()).post(new Runnable() {
+                    @Override
+                    public void run() {
+                        stateChangeListener.onConsentStateChange(oldConsentStatus, newConsentStatus,
+                                canCollectPersonalInformation);
+                    }
+                });
+            }
+        }
+    }
+
+    /**
+     * Do not call this. This is used internally.
+     */
+    @Deprecated
+    @Override
+    public void onErrorResponse(final VolleyError volleyError) {
+        MoPubLog.d("Failed sync request because of " + ((volleyError instanceof MoPubNetworkError) ?
+                ((MoPubNetworkError) volleyError).getReason() : volleyError.getMessage()));
+        mSyncRequestInFlight = false;
+        if (mSdkInitializationListener != null) {
+            MoPubLog.d("Personal Info Manager initialization finished but ran into errors.");
+            mSdkInitializationListener.onInitializationFinished();
+            mSdkInitializationListener = null;
+        }
+    }
+
+    private SdkInitializationListener createInitializationListener() {
+        return new SdkInitializationListener() {
+
+            @Override
+            public void onInitializationFinished() {
+                MoPubLog.d("MoPubIdentifier initialized.");
+                final AdvertisingId advertisingId = ClientMetadata.getInstance(mAppContext)
+                        .getMoPubIdentifier().getAdvertisingInfo();
+                if (!shouldMakeSyncRequest(mSyncRequestInFlight,
+                        gdprApplies(),
+                        false,
+                        mLastSyncRequestTimeUptimeMs,
+                        mSyncDelayMs,
+                        mPersonalInfoData.getUdid(),
+                        advertisingId.isDoNotTrack())) {
+                    if (mSdkInitializationListener != null) {
+                        mSdkInitializationListener.onInitializationFinished();
+                        mSdkInitializationListener = null;
+                    }
+                } else {
+                    requestSync(false);
+                }
+                new MoPubConversionTracker(mAppContext).reportAppOpen(true);
+            }
+        };
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PrivacyKey.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PrivacyKey.java
new file mode 100644
index 00000000..7f163a74
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PrivacyKey.java
@@ -0,0 +1,33 @@
+package com.mopub.common.privacy;
+
+import android.support.annotation.NonNull;
+
+/**
+ * Keys for gdpr sync, consent dialog requests, and setting consent state.
+ */
+public enum PrivacyKey {
+    IS_GDPR_REGION("is_gdpr_region"),
+    IS_WHITELISTED("is_whitelisted"),
+    FORCE_EXPLICIT_NO("force_explicit_no"),
+    INVALIDATE_CONSENT("invalidate_consent"),
+    REACQUIRE_CONSENT("reacquire_consent"),
+    EXTRAS("extras"),
+    CURRENT_VENDOR_LIST_VERSION("current_vendor_list_version"),
+    CURRENT_VENDOR_LIST_LINK("current_vendor_list_link"),
+    CURRENT_PRIVACY_POLICY_VERSION("current_privacy_policy_version"),
+    CURRENT_PRIVACY_POLICY_LINK("current_privacy_policy_link"),
+    CURRENT_VENDOR_LIST_IAB_FORMAT("current_vendor_list_iab_format"),
+    CURRENT_VENDOR_LIST_IAB_HASH("current_vendor_list_iab_hash"),
+    CALL_AGAIN_AFTER_SECS("call_again_after_secs"),
+    CONSENT_CHANGE_REASON("consent_change_reason");
+
+    @NonNull private final String key;
+    PrivacyKey(@NonNull final String key) {
+        this.key = key;
+    }
+
+    @NonNull
+    public String getKey() {
+        return this.key;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncRequest.java
new file mode 100644
index 00000000..09901e0e
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncRequest.java
@@ -0,0 +1,90 @@
+package com.mopub.common.privacy;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.network.MoPubNetworkError;
+import com.mopub.network.MoPubRequest;
+import com.mopub.volley.DefaultRetryPolicy;
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.Response;
+import com.mopub.volley.toolbox.HttpHeaderParser;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+public class SyncRequest extends MoPubRequest<SyncResponse> {
+
+    public interface Listener extends Response.ErrorListener {
+        void onSuccess(SyncResponse response);
+    }
+
+    @Nullable private Listener mListener;
+
+    public SyncRequest(@NonNull final Context context,
+            @NonNull final String url,
+            @Nullable final Listener listener) {
+        super(context, url, listener);
+
+        mListener = listener;
+
+        DefaultRetryPolicy retryPolicy = new DefaultRetryPolicy(
+                DefaultRetryPolicy.DEFAULT_TIMEOUT_MS,
+                0,
+                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT);
+        setRetryPolicy(retryPolicy);
+        setShouldCache(false);
+    }
+
+    @Override
+    protected Response<SyncResponse> parseNetworkResponse(final NetworkResponse networkResponse) {
+        final SyncResponse.Builder builder = new SyncResponse.Builder();
+        final String responseBody = parseStringBody(networkResponse);
+
+        try {
+            final JSONObject jsonBody = new JSONObject(responseBody);
+            builder.setIsGdprRegion(jsonBody.getString(PrivacyKey.IS_GDPR_REGION.getKey()))
+                    .setForceExplicitNo(jsonBody.optString(PrivacyKey.FORCE_EXPLICIT_NO.getKey()))
+                    .setInvalidateConsent(
+                            jsonBody.optString(PrivacyKey.INVALIDATE_CONSENT.getKey()))
+                    .setReacquireConsent(jsonBody.optString(PrivacyKey.REACQUIRE_CONSENT.getKey()))
+                    .setIsWhitelisted(jsonBody.getString(PrivacyKey.IS_WHITELISTED.getKey()))
+                    .setCurrentVendorListVersion(
+                            jsonBody.getString(PrivacyKey.CURRENT_VENDOR_LIST_VERSION.getKey()))
+                    .setCurrentVendorListLink(
+                            jsonBody.getString(PrivacyKey.CURRENT_VENDOR_LIST_LINK.getKey()))
+                    .setCurrentPrivacyPolicyLink(
+                            jsonBody.getString(PrivacyKey.CURRENT_PRIVACY_POLICY_LINK.getKey()))
+                    .setCurrentPrivacyPolicyVersion(
+                            jsonBody.getString(PrivacyKey.CURRENT_PRIVACY_POLICY_VERSION.getKey()))
+                    .setCurrentVendorListIabFormat(
+                            jsonBody.optString(PrivacyKey.CURRENT_VENDOR_LIST_IAB_FORMAT.getKey()))
+                    .setCurrentVendorListIabHash(
+                            jsonBody.getString(PrivacyKey.CURRENT_VENDOR_LIST_IAB_HASH.getKey()))
+                    .setCallAgainAfterSecs(
+                            jsonBody.optString(PrivacyKey.CALL_AGAIN_AFTER_SECS.getKey()))
+                    .setExtras(jsonBody.optString(PrivacyKey.EXTRAS.getKey()))
+                    .setConsentChangeReason(
+                            jsonBody.optString(PrivacyKey.CONSENT_CHANGE_REASON.getKey()));
+        } catch (JSONException e) {
+            return Response.error(
+                    new MoPubNetworkError(
+                            "Unable to parse sync request network response.",
+                            MoPubNetworkError.Reason.BAD_BODY,
+                            null
+                    )
+            );
+        }
+
+        return Response.success(builder.build(),
+                HttpHeaderParser.parseCacheHeaders(networkResponse));
+    }
+
+    @Override
+    protected void deliverResponse(final SyncResponse syncResponse) {
+        if (mListener != null) {
+            mListener.onSuccess(syncResponse);
+        }
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncResponse.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncResponse.java
new file mode 100644
index 00000000..f23bb8f6
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncResponse.java
@@ -0,0 +1,231 @@
+package com.mopub.common.privacy;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+
+public class SyncResponse {
+
+    private final boolean mIsGdprRegion;
+    private final boolean mForceExplicitNo;
+    private final boolean mInvalidateConsent;
+    private final boolean mReacquireConsent;
+    private final boolean mIsWhitelisted;
+    @NonNull private final String mCurrentVendorListVersion;
+    @NonNull private final String mCurrentVendorListLink;
+    @NonNull private final String mCurrentPrivacyPolicyVersion;
+    @NonNull private final String mCurrentPrivacyPolicyLink;
+    @Nullable private final String mCurrentVendorListIabFormat;
+    @NonNull private final String mCurrentVendorListIabHash;
+    @Nullable private final String mCallAgainAfterSecs;
+    @Nullable private final String mExtras;
+    @Nullable private final String mConsentChangeReason;
+
+    public boolean isGdprRegion() {
+        return mIsGdprRegion;
+    }
+
+    public boolean isForceExplicitNo() {
+        return mForceExplicitNo;
+    }
+
+    public boolean isInvalidateConsent() {
+        return mInvalidateConsent;
+    }
+
+    public boolean isReacquireConsent() {
+        return mReacquireConsent;
+    }
+
+    public boolean isWhitelisted() {
+        return mIsWhitelisted;
+    }
+
+    @NonNull
+    public String getCurrentVendorListVersion() {
+        return mCurrentVendorListVersion;
+    }
+
+    @NonNull
+    public String getCurrentVendorListLink() {
+        return mCurrentVendorListLink;
+    }
+
+    @NonNull
+    public String getCurrentPrivacyPolicyVersion() {
+        return mCurrentPrivacyPolicyVersion;
+    }
+
+    @NonNull
+    public String getCurrentPrivacyPolicyLink() {
+        return mCurrentPrivacyPolicyLink;
+    }
+
+    @Nullable
+    public String getCurrentVendorListIabFormat() {
+        return mCurrentVendorListIabFormat;
+    }
+
+    @NonNull
+    public String getCurrentVendorListIabHash() {
+        return mCurrentVendorListIabHash;
+    }
+
+    @Nullable
+    public String getCallAgainAfterSecs() {
+        return mCallAgainAfterSecs;
+    }
+
+    @Nullable
+    String getExtras() {
+        return mExtras;
+    }
+
+    @Nullable
+    public String getConsentChangeReason() {
+        return mConsentChangeReason;
+    }
+
+    private SyncResponse(@NonNull final String isGdprRegion,
+            @Nullable final String forceExplicitNo,
+            @Nullable final String invalidateConsent,
+            @Nullable final String reacquireConsent,
+            @NonNull final String isWhitelisted,
+            @NonNull final String currentVendorListVersion,
+            @NonNull final String currentVendorListLink,
+            @NonNull final String currentPrivacyPolicyVersion,
+            @NonNull final String currentPrivacyPolicyLink,
+            @Nullable final String currentVendorListIabFormat,
+            @NonNull final String currentVendorListIabHash,
+            @Nullable final String callAgainAfterSecs,
+            @Nullable final String extras,
+            @Nullable final String consentChangeReason) {
+        Preconditions.checkNotNull(isGdprRegion);
+        Preconditions.checkNotNull(isWhitelisted);
+        Preconditions.checkNotNull(currentVendorListVersion);
+        Preconditions.checkNotNull(currentVendorListLink);
+        Preconditions.checkNotNull(currentPrivacyPolicyVersion);
+        Preconditions.checkNotNull(currentPrivacyPolicyLink);
+        Preconditions.checkNotNull(currentVendorListIabHash);
+
+        // Default for this is true
+        mIsGdprRegion = !"0".equals(isGdprRegion);
+
+        // Default for the next four is false
+        mForceExplicitNo = "1".equals(forceExplicitNo);
+        mInvalidateConsent = "1".equals(invalidateConsent);
+        mReacquireConsent = "1".equals(reacquireConsent);
+        mIsWhitelisted = "1".equals(isWhitelisted);
+
+        mCurrentVendorListVersion = currentVendorListVersion;
+        mCurrentVendorListLink = currentVendorListLink;
+        mCurrentPrivacyPolicyVersion = currentPrivacyPolicyVersion;
+        mCurrentPrivacyPolicyLink = currentPrivacyPolicyLink;
+        mCurrentVendorListIabFormat = currentVendorListIabFormat;
+        mCurrentVendorListIabHash = currentVendorListIabHash;
+        mCallAgainAfterSecs = callAgainAfterSecs;
+        mExtras = extras;
+        mConsentChangeReason = consentChangeReason;
+    }
+
+    public static class Builder {
+        private String isGdprRegion;
+        private String forceExplicitNo;
+        private String invalidateConsent;
+        private String reacquireConsent;
+        private String isWhitelisted;
+        private String currentVendorListVersion;
+        private String currentVendorListLink;
+        private String currentPrivacyPolicyVersion;
+        private String currentPrivacyPolicyLink;
+        private String currentVendorListIabFormat;
+        private String currentVendorListIabHash;
+        private String callAgainAfterSecs;
+        private String extras;
+        private String consentChangeReason;
+
+        public Builder() {
+        }
+
+        public Builder setIsGdprRegion(@NonNull final String isGdprRegion) {
+            this.isGdprRegion = isGdprRegion;
+            return this;
+        }
+
+        public Builder setForceExplicitNo(@Nullable final String forceExplicitNo) {
+            this.forceExplicitNo = forceExplicitNo;
+            return this;
+        }
+
+        public Builder setInvalidateConsent(@Nullable final String invalidateConsent) {
+            this.invalidateConsent = invalidateConsent;
+            return this;
+        }
+
+        public Builder setReacquireConsent(@Nullable final String reacquireConsent) {
+            this.reacquireConsent = reacquireConsent;
+            return this;
+        }
+
+        public Builder setIsWhitelisted(@NonNull final String isWhitelisted) {
+            this.isWhitelisted = isWhitelisted;
+            return this;
+        }
+
+        public Builder setCurrentVendorListVersion(@NonNull final String currentVendorListVersion) {
+            this.currentVendorListVersion = currentVendorListVersion;
+            return this;
+        }
+
+        public Builder setCurrentVendorListLink(@NonNull final String currentVendorListLink) {
+            this.currentVendorListLink = currentVendorListLink;
+            return this;
+        }
+
+        public Builder setCurrentPrivacyPolicyVersion(
+                @NonNull final String currentPrivacyPolicyVersion) {
+            this.currentPrivacyPolicyVersion = currentPrivacyPolicyVersion;
+            return this;
+        }
+
+        public Builder setCurrentPrivacyPolicyLink(@NonNull final String currentPrivacyPolicyLink) {
+            this.currentPrivacyPolicyLink = currentPrivacyPolicyLink;
+            return this;
+        }
+
+        public Builder setCurrentVendorListIabFormat(
+                @Nullable final String currentVendorListIabFormat) {
+            this.currentVendorListIabFormat = currentVendorListIabFormat;
+            return this;
+        }
+
+        public Builder setCurrentVendorListIabHash(@NonNull final String currentVendorListIabHash) {
+            this.currentVendorListIabHash = currentVendorListIabHash;
+            return this;
+        }
+
+        public Builder setCallAgainAfterSecs(@Nullable final String callAgainAfterSecs) {
+            this.callAgainAfterSecs = callAgainAfterSecs;
+            return this;
+        }
+
+        public Builder setExtras(@Nullable final String extras) {
+            this.extras = extras;
+            return this;
+        }
+
+        public Builder setConsentChangeReason(@Nullable final String consentChangeReason) {
+            this.consentChangeReason = consentChangeReason;
+            return this;
+        }
+
+        public SyncResponse build() {
+            return new SyncResponse(isGdprRegion, forceExplicitNo, invalidateConsent,
+                    reacquireConsent, isWhitelisted, currentVendorListVersion,
+                    currentVendorListLink, currentPrivacyPolicyVersion, currentPrivacyPolicyLink,
+                    currentVendorListIabFormat, currentVendorListIabHash, callAgainAfterSecs,
+                    extras, consentChangeReason);
+        }
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncUrlGenerator.java
new file mode 100644
index 00000000..ba462001
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncUrlGenerator.java
@@ -0,0 +1,139 @@
+package com.mopub.common.privacy;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.BaseUrlGenerator;
+import com.mopub.common.ClientMetadata;
+import com.mopub.common.Constants;
+import com.mopub.common.MoPub;
+import com.mopub.common.Preconditions;
+import com.mopub.network.PlayServicesUrlRewriter;
+
+public class SyncUrlGenerator extends BaseUrlGenerator {
+
+    /**
+     * Unix time, in ms, of the last time the consent status was changed.
+     */
+    private static final String LAST_CHANGED_MS_KEY = "last_changed_ms";
+
+    /**
+     * Previous consent state acknowledged by the server.
+     */
+    private static final String LAST_CONSENT_STATUS_KEY = "last_consent_status";
+
+    /**
+     * The reason why the consent state changed, iff the current state has changed.
+     */
+    private static final String CONSENT_CHANGE_REASON_KEY = "consent_change_reason";
+
+    /**
+     * IAB's vendor list.
+     */
+    private static final String CACHED_VENDOR_LIST_IAB_HASH_KEY = "cached_vendor_list_iab_hash";
+
+    /**
+     * Any other server data that the server wants for the SDK to hang on to.
+     */
+    private static final String EXTRAS_KEY = "extras";
+
+    @NonNull private final Context mContext;
+    @Nullable private String mAdUnitId;
+    @Nullable private String mUdid;
+    @Nullable private String mLastChangedMs;
+    @Nullable private String mLastConsentStatus;
+    @NonNull private final String mCurrentConsentStatus;
+    @Nullable private String mConsentChangeReason;
+    @Nullable private String mConsentedVendorListVersion;
+    @Nullable private String mConsentedPrivacyPolicyVersion;
+    @Nullable private String mCachedVendorListIabHash;
+    @Nullable private String mExtras;
+    @Nullable private Boolean mGdprApplies;
+
+    public SyncUrlGenerator(@NonNull final Context context,
+            @NonNull final String currentConsentStatus) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(currentConsentStatus);
+
+        mContext = context.getApplicationContext();
+        mCurrentConsentStatus = currentConsentStatus;
+    }
+
+    public SyncUrlGenerator withAdUnitId(@Nullable final String adUnitId) {
+        mAdUnitId = adUnitId;
+        return this;
+    }
+
+    public SyncUrlGenerator withUdid(@Nullable final String udid) {
+        mUdid = udid;
+        return this;
+    }
+
+    public SyncUrlGenerator withGdprApplies(@Nullable final Boolean gdprApplies) {
+        mGdprApplies = gdprApplies;
+        return this;
+    }
+
+    public SyncUrlGenerator withLastChangedMs(@Nullable final String lastChangedMs) {
+        mLastChangedMs = lastChangedMs;
+        return this;
+    }
+
+    public SyncUrlGenerator withLastConsentStatus(@Nullable final ConsentStatus lastConsentStatus) {
+        mLastConsentStatus = lastConsentStatus == null ? null : lastConsentStatus.getValue();
+        return this;
+    }
+
+    public SyncUrlGenerator withConsentChangeReason(@Nullable final String consentChangeReason) {
+        mConsentChangeReason = consentChangeReason;
+        return this;
+    }
+
+    public SyncUrlGenerator withConsentedVendorListVersion(
+            @Nullable final String consentedVendorListVersion) {
+        mConsentedVendorListVersion = consentedVendorListVersion;
+        return this;
+    }
+
+    public SyncUrlGenerator withConsentedPrivacyPolicyVersion(
+            @Nullable final String consentedPrivacyPolicyVersion) {
+        mConsentedPrivacyPolicyVersion = consentedPrivacyPolicyVersion;
+        return this;
+    }
+
+    public SyncUrlGenerator withCachedVendorListIabHash(
+            @Nullable final String cachedVendorListIabHash) {
+        mCachedVendorListIabHash = cachedVendorListIabHash;
+        return this;
+    }
+
+    public SyncUrlGenerator withExtras(@Nullable final String extras) {
+        mExtras = extras;
+        return this;
+    }
+
+    @Override
+    public String generateUrlString(@NonNull final String serverHostname) {
+        initUrlString(serverHostname, Constants.GDPR_SYNC_HANDLER);
+
+        addParam(AD_UNIT_ID_KEY, mAdUnitId);
+        addParam(SDK_VERSION_KEY, MoPub.SDK_VERSION);
+        addParam(LAST_CHANGED_MS_KEY, mLastChangedMs);
+        addParam(LAST_CONSENT_STATUS_KEY, mLastConsentStatus);
+        addParam(CURRENT_CONSENT_STATUS_KEY, mCurrentConsentStatus);
+        addParam(CONSENT_CHANGE_REASON_KEY, mConsentChangeReason);
+        addParam(CONSENTED_VENDOR_LIST_VERSION_KEY, mConsentedVendorListVersion);
+        addParam(CONSENTED_PRIVACY_POLICY_VERSION_KEY, mConsentedPrivacyPolicyVersion);
+        addParam(CACHED_VENDOR_LIST_IAB_HASH_KEY, mCachedVendorListIabHash);
+        addParam(EXTRAS_KEY, mExtras);
+        addParam(UDID_KEY, mUdid);
+        if (mGdprApplies != null) {
+            addParam(GDPR_APPLIES, mGdprApplies ? "1" : "0");
+        }
+        addParam(BUNDLE_ID_KEY, ClientMetadata.getInstance(mContext).getAppPackageName());
+        addParam(DNT_KEY, PlayServicesUrlRewriter.DO_NOT_TRACK_TEMPLATE);
+
+        return getFinalUrlString();
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
index 791ef1f6..be03be19 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
@@ -19,6 +19,10 @@
 import java.util.ArrayList;
 import java.util.List;
 
+/**
+ * This class maintains lists of required Activity permissions,
+ * for the WebView, Native SDKs, and base SDK.
+ */
 public class ManifestUtils {
     private ManifestUtils() {}
 
@@ -26,13 +30,11 @@ private ManifestUtils() {}
     private static final String MRAID_ACTIVITY = "com.mopub.mobileads.MraidActivity";
     private static final String REWARDED_MRAID_ACTIVITY =
             "com.mopub.mobileads.RewardedMraidActivity";
-    private static final List<Class<? extends Activity>> REQUIRED_WEB_VIEW_SDK_ACTIVITIES;
+    private static final String CONSENT_ACTIVITY = "com.mopub.common.privacy.ConsentDialogActivity";
+
     private static FlagCheckUtil sFlagCheckUtil = new FlagCheckUtil();
 
-    /**
-     * This class maintains two different lists of required Activity permissions,
-     * for the WebView and Native SDKs.
-     */
+    private static final List<Class<? extends Activity>> REQUIRED_WEB_VIEW_SDK_ACTIVITIES;
     static {
         REQUIRED_WEB_VIEW_SDK_ACTIVITIES = new ArrayList<Class<? extends Activity>>(4);
         // As a convenience, full class paths are provided here, in case the MoPub SDK was imported
@@ -58,6 +60,22 @@ private ManifestUtils() {}
         REQUIRED_NATIVE_SDK_ACTIVITIES.add(com.mopub.common.MoPubBrowser.class);
     }
 
+    private static final List<Class<? extends Activity>> REQUIRED_SDK_ACTIVITIES;
+    static {
+        REQUIRED_SDK_ACTIVITIES = new ArrayList<>(1);
+        REQUIRED_SDK_ACTIVITIES.add(com.mopub.common.privacy.ConsentDialogActivity.class);
+    }
+
+    public static void checkSdkActivitiesDeclared(@NonNull final Context context) {
+        if (!Preconditions.NoThrow.checkNotNull(context, "context is not allowed to be null")) {
+            return;
+        }
+
+        displayWarningForMissingActivities(context, REQUIRED_SDK_ACTIVITIES);
+        displayWarningForMisconfiguredActivities(context, REQUIRED_SDK_ACTIVITIES);
+    }
+
+
     public static void checkWebViewActivitiesDeclared(@NonNull final Context context) {
         if (!Preconditions.NoThrow.checkNotNull(context, "context is not allowed to be null")) {
             return;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/MoPubCollections.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/MoPubCollections.java
index a83bec24..465d696c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/MoPubCollections.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/MoPubCollections.java
@@ -3,6 +3,8 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
+import com.mopub.common.Preconditions;
+
 import java.util.Collection;
 import java.util.Collections;
 
@@ -12,4 +14,13 @@
         Collections.addAll(c, a);
         c.removeAll(Collections.singleton(null));
     }
+
+    public static <T> void addAllNonNull(@NonNull final Collection<? super T> collection,
+            @NonNull final Collection<T> elementsToAdd) {
+        Preconditions.checkNotNull(collection);
+        Preconditions.checkNotNull(elementsToAdd);
+
+        collection.addAll(elementsToAdd);
+        collection.removeAll(Collections.singleton(null));
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
index cf94ec5b..d3a2410f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
@@ -6,6 +6,7 @@
 import com.mopub.common.Preconditions;
 
 import java.lang.reflect.Constructor;
+import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
@@ -176,4 +177,12 @@ public static boolean classFound(@NonNull final String className) {
 
         return constructor.newInstance(parameters);
     }
+
+    // access class private field
+    public static Field getPrivateField(@NonNull final Class classType, @NonNull final String fieldName) throws NoSuchFieldException {
+        Field declaredField = classType.getDeclaredField(fieldName);
+        declaredField.setAccessible(true);
+        return declaredField;
+    }
+
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
index ad909dbe..aa26b4f0 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
@@ -56,6 +56,15 @@
     VIDEO_VIEWABILITY_TRACKERS("X-Video-Viewability-Trackers"),
     DISABLE_VIEWABILITY("X-Disable-Viewability"),
 
+    // Advanced bidding fields
+    AD_RESPONSE_TYPE("X-Ad-Response-Type"),
+
+    // Consent fields
+    INVALIDATE_CONSENT("invalidate_consent"),
+    FORCE_EXPLICIT_NO("force_explicit_no"),
+    REACQUIRE_CONSENT("reacquire_consent"),
+    CONSENT_CHANGE_REASON("consent_change_reason"),
+
     @Deprecated CUSTOM_SELECTOR("X-Customselector");
 
     private final String key;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
index 025571bb..a273daeb 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
@@ -7,7 +7,7 @@
 import com.mopub.common.AdType;
 import com.mopub.common.util.ResponseHeader;
 
-import java.util.Map;
+import org.json.JSONObject;
 
 import static com.mopub.network.HeaderUtils.extractHeader;
 
@@ -99,7 +99,7 @@ static String getAdNetworkType(String adType, String fullAdType) {
     public static String getCustomEventName(@NonNull AdFormat adFormat,
             @NonNull String adType,
             @Nullable String fullAdType,
-            @NonNull Map<String, String> headers) {
+            @Nullable JSONObject headers) {
         if (AdType.CUSTOM.equalsIgnoreCase(adType)) {
             return extractHeader(headers, ResponseHeader.CUSTOM_EVENT_NAME);
         } else if (AdType.STATIC_NATIVE.equalsIgnoreCase(adType)) {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
index 57144826..71f37d64 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -16,9 +16,9 @@
 import com.mopub.common.AdReport;
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.Constants;
+import com.mopub.common.MoPub;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
-import com.mopub.common.event.BaseEvent;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.DeviceUtils;
 import com.mopub.common.util.Dips;
@@ -87,6 +87,7 @@
     private boolean mShouldAllowAutoRefresh = true;
 
     private String mKeywords;
+    private String mUserDataKeywords;
     private Location mLocation;
     private boolean mIsTesting;
     private boolean mAdWasLoaded;
@@ -316,11 +317,33 @@ public void setKeywords(String keywords) {
         mKeywords = keywords;
     }
 
+    public String getUserDataKeywords() {
+        if (!MoPub.canCollectPersonalInformation()) {
+            return null;
+        }
+        return mUserDataKeywords;
+    }
+
+    public void setUserDataKeywords(String userDataKeywords) {
+        if (!MoPub.canCollectPersonalInformation()) {
+            mUserDataKeywords = null;
+            return;
+        }
+        mUserDataKeywords = userDataKeywords;
+    }
+
     public Location getLocation() {
+        if (!MoPub.canCollectPersonalInformation()) {
+            return null;
+        }
         return mLocation;
     }
 
     public void setLocation(Location location) {
+        if (!MoPub.canCollectPersonalInformation()) {
+            mLocation = null;
+            return;
+        }
         mLocation = location;
     }
 
@@ -454,7 +477,7 @@ Integer getAdTimeoutDelay() {
     void trackImpression() {
         if (mAdResponse != null) {
             TrackingRequest.makeTrackingHttpRequest(mAdResponse.getImpressionTrackingUrl(),
-                    mContext, BaseEvent.Name.IMPRESSION_REQUEST);
+                    mContext);
         }
     }
 
@@ -462,7 +485,7 @@ void registerClick() {
         if (mAdResponse != null) {
             // Click tracker fired from Banners and Interstitials
             TrackingRequest.makeTrackingHttpRequest(mAdResponse.getClickTrackingUrl(),
-                    mContext, BaseEvent.Name.CLICK_REQUEST);
+                    mContext);
         }
     }
 
@@ -492,11 +515,19 @@ void forceRefresh() {
 
     @Nullable
     String generateAdUrl() {
-        return mUrlGenerator == null ? null : mUrlGenerator
+        if (mUrlGenerator == null) {
+            return null;
+        }
+
+        final boolean canCollectPersonalInformation = MoPub.canCollectPersonalInformation();
+
+        mUrlGenerator
                 .withAdUnitId(mAdUnitId)
                 .withKeywords(mKeywords)
-                .withLocation(mLocation)
-                .generateUrlString(Constants.HOST);
+                .withUserDataKeywords(canCollectPersonalInformation ? mUserDataKeywords : null)
+                .withLocation(canCollectPersonalInformation ? mLocation : null);
+
+        return mUrlGenerator.generateUrlString(Constants.HOST);
     }
 
     void adDidFail(MoPubErrorCode errorCode) {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java
index e42aad70..53a57f6c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java
@@ -37,6 +37,12 @@ public BaseWebView(Context context) {
         }
     }
 
+    @Override
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        WebViews.manageThirdPartyCookies(this);
+    }
+
     @Override
     public void destroy() {
         mIsDestroyed = true;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ConversionUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ConversionUrlGenerator.java
new file mode 100644
index 00000000..d59b6da2
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ConversionUrlGenerator.java
@@ -0,0 +1,81 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.BaseUrlGenerator;
+import com.mopub.common.ClientMetadata;
+import com.mopub.common.Constants;
+import com.mopub.common.MoPub;
+
+class ConversionUrlGenerator extends BaseUrlGenerator {
+    private static final String SESSION_TRACKER_KEY = "st";
+    private static final String PACKAGE_NAME_KEY = "id";
+
+    @NonNull
+    private Context mContext;
+    @Nullable
+    private String mCurrentConsentStatus;
+    @Nullable
+    private String mConsentedVendorListVersion;
+    @Nullable
+    private String mConsentedPrivacyPolicyVersion;
+    @Nullable
+    private Boolean mGdprApplies;
+
+    private boolean mSt;
+
+    ConversionUrlGenerator(@NonNull final Context context) {
+        mContext = context;
+    }
+
+    public ConversionUrlGenerator withCurrentConsentStatus(
+            @Nullable final String currentConsentStatus) {
+        mCurrentConsentStatus = currentConsentStatus;
+        return this;
+    }
+
+    public ConversionUrlGenerator withGdprApplies(@Nullable final Boolean gdprApplies) {
+        mGdprApplies = gdprApplies;
+        return this;
+    }
+
+    public ConversionUrlGenerator withConsentedVendorListVersion(@Nullable final String consentedVendorListVersion) {
+        mConsentedVendorListVersion = consentedVendorListVersion;
+        return this;
+    }
+
+    public ConversionUrlGenerator withConsentedPrivacyPolicyVersion(@Nullable final String consentedPrivacyPolicyVersion) {
+        mConsentedPrivacyPolicyVersion = consentedPrivacyPolicyVersion;
+        return this;
+    }
+
+    public ConversionUrlGenerator withSessionTracker(final boolean st) {
+        mSt = st;
+        return this;
+    }
+
+    @Override
+    public String generateUrlString(String serverHostname) {
+        ClientMetadata clientMetadata = ClientMetadata.getInstance(mContext);
+
+        initUrlString(serverHostname, Constants.CONVERSION_TRACKING_HANDLER);
+        setApiVersion("6");
+        setAppVersion(clientMetadata.getAppVersion());
+        appendAdvertisingInfoTemplates();
+
+        addParam(PACKAGE_NAME_KEY, mContext.getPackageName());
+        if (mSt) {
+            addParam(SESSION_TRACKER_KEY, true);
+        }
+        addParam(SDK_VERSION_KEY, MoPub.SDK_VERSION);
+        addParam(CURRENT_CONSENT_STATUS_KEY, mCurrentConsentStatus);
+        addParam(CONSENTED_VENDOR_LIST_VERSION_KEY, mConsentedVendorListVersion);
+        addParam(CONSENTED_PRIVACY_POLICY_VERSION_KEY, mConsentedPrivacyPolicyVersion);
+        if (mGdprApplies != null) {
+            addParam(GDPR_APPLIES, mGdprApplies);
+        }
+        return getFinalUrlString();
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
index edcf4b3f..1772be75 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
@@ -4,67 +4,109 @@
 import android.content.SharedPreferences;
 import android.support.annotation.NonNull;
 
-import com.mopub.common.BaseUrlGenerator;
-import com.mopub.common.ClientMetadata;
 import com.mopub.common.Constants;
+import com.mopub.common.MoPub;
+import com.mopub.common.Preconditions;
 import com.mopub.common.SharedPreferencesHelper;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.privacy.ConsentData;
+import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.network.TrackingRequest;
 import com.mopub.volley.VolleyError;
 
 public class MoPubConversionTracker {
-    private Context mContext;
-    private String mIsTrackedKey;
+    private static final String WANT_TO_TRACK = " wantToTrack";
+
+    @NonNull
+    private final Context mContext;
+    @NonNull
+    private final String mWantToTrack;
+    @NonNull
+    private final String mIsTrackedKey;
+    @NonNull
     private SharedPreferences mSharedPreferences;
-    private String mPackageName;
 
-    public void reportAppOpen(Context context) {
-        if (context == null) {
+    public MoPubConversionTracker(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        mContext = context.getApplicationContext();
+        String packageName = mContext.getPackageName();
+        mWantToTrack = packageName + WANT_TO_TRACK;
+        mIsTrackedKey = packageName + " tracked";
+        mSharedPreferences = SharedPreferencesHelper.getSharedPreferences(mContext);
+    }
+
+    /**
+     * Call this to report conversion tracking.
+     */
+    public void reportAppOpen() {
+        reportAppOpen(false);
+    }
+
+    /**
+     * This method is only used internally. Do not call this method.
+     *
+     * @param sessionTracker - true for session tracking
+     */
+    public void reportAppOpen(boolean sessionTracker) {
+        final PersonalInfoManager infoManager = MoPub.getPersonalInformationManager();
+        if (infoManager == null) {
+            MoPubLog.w("Cannot report app open until initialization is done");
             return;
         }
 
-        mContext = context;
-        mPackageName = mContext.getPackageName();
-        mIsTrackedKey = mPackageName + " tracked";
-        mSharedPreferences = SharedPreferencesHelper.getSharedPreferences(mContext);
 
-        if (!isAlreadyTracked()) {
-            TrackingRequest.makeTrackingHttpRequest(new ConversionUrlGenerator().generateUrlString(Constants.HOST),
-                    mContext, new TrackingRequest.Listener() {
-                @Override
-                public void onResponse(@NonNull String url) {
-                    mSharedPreferences
-                            .edit()
-                            .putBoolean(mIsTrackedKey, true)
-                            .commit();
-                }
-
-                @Override
-                public void onErrorResponse(final VolleyError volleyError) { }
-            });
-        } else {
+        if (!sessionTracker && isAlreadyTracked()) {
             MoPubLog.d("Conversion already tracked");
+            return;
         }
-    }
 
-    private boolean isAlreadyTracked() {
-        return mSharedPreferences.getBoolean(mIsTrackedKey, false);
+        if (!sessionTracker && !MoPub.canCollectPersonalInformation()) {
+            mSharedPreferences
+                    .edit()
+                    .putBoolean(mWantToTrack, true)
+                    .apply();
+            return;
+        }
+
+        final ConsentData consentData = infoManager.getConsentData();
+        final String url = new ConversionUrlGenerator(mContext)
+                .withGdprApplies(infoManager.gdprApplies())
+                .withCurrentConsentStatus(infoManager.getPersonalInfoConsentStatus().getValue())
+                .withConsentedPrivacyPolicyVersion(consentData.getConsentedPrivacyPolicyVersion())
+                .withConsentedVendorListVersion(consentData.getConsentedVendorListVersion())
+                .withSessionTracker(sessionTracker)
+                .generateUrlString(Constants.HOST);
+
+        TrackingRequest.makeTrackingHttpRequest(url,
+                mContext, new TrackingRequest.Listener() {
+                    @Override
+                    public void onResponse(@NonNull final String url) {
+                        mSharedPreferences
+                                .edit()
+                                .putBoolean(mIsTrackedKey, true)
+                                .putBoolean(mWantToTrack, false)
+                                .apply();
+                    }
+
+                    @Override
+                    public void onErrorResponse(final VolleyError volleyError) {
+                    }
+                });
+
     }
 
-    private class ConversionUrlGenerator extends BaseUrlGenerator {
-        @Override
-        public String generateUrlString(String serverHostname) {
-            initUrlString(serverHostname, Constants.CONVERSION_TRACKING_HANDLER);
-            setApiVersion("6");
-            setPackageId(mPackageName);
-            ClientMetadata clientMetadata = ClientMetadata.getInstance(mContext);
-            setAppVersion(clientMetadata.getAppVersion());
-            appendAdvertisingInfoTemplates();
-            return getFinalUrlString();
+    public boolean shouldTrack() {
+        PersonalInfoManager infoManager = MoPub.getPersonalInformationManager();
+        if (infoManager == null) {
+            return false;
         }
 
-        private void setPackageId(String packageName) {
-            addParam("id", packageName);
-        }
+        return infoManager.canCollectPersonalInformation() &&
+                mSharedPreferences.getBoolean(mWantToTrack, false);
+    }
+
+    private boolean isAlreadyTracked() {
+        return mSharedPreferences.getBoolean(mIsTrackedKey, false);
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
index b7c20a78..27eda319 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
@@ -26,6 +26,8 @@
     REWARDED_CURRENCIES_PARSING_ERROR("Error parsing rewarded currencies JSON header."),
     REWARD_NOT_SELECTED("Reward not selected for rewarded ad."),
 
+    DO_NOT_TRACK("Do not track is enabled."),
+
     UNSPECIFIED("Unspecified error.");
 
     private final String message;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
index 07081110..97942314 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -15,6 +15,7 @@
 
 import com.mopub.common.AdFormat;
 import com.mopub.common.AdReport;
+import com.mopub.common.MoPub;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.ManifestUtils;
 import com.mopub.common.util.Reflection;
@@ -271,15 +272,27 @@ public void setKeywords(String keywords) {
     }
 
     public String getKeywords() {
-        return (mAdViewController != null) ? mAdViewController.getKeywords() : null;
+        return (mAdViewController != null) ? mAdViewController.getKeywords(): null;
+    }
+
+    public void setUserDataKeywords(String userDataKeywords) {
+        if (mAdViewController != null && MoPub.canCollectPersonalInformation()) {
+            mAdViewController.setUserDataKeywords(userDataKeywords);
+        }
+    }
+
+    public String getUserDataKeywords() {
+        return (mAdViewController != null && MoPub.canCollectPersonalInformation()) ? mAdViewController.getUserDataKeywords() : null;
     }
 
     public void setLocation(Location location) {
-        if (mAdViewController != null) mAdViewController.setLocation(location);
+        if (mAdViewController != null && MoPub.canCollectPersonalInformation()) {
+            mAdViewController.setLocation(location);
+        }
     }
 
     public Location getLocation() {
-        return (mAdViewController != null) ? mAdViewController.getLocation() : null;
+        return (mAdViewController != null && MoPub.canCollectPersonalInformation()) ? mAdViewController.getLocation() : null;
     }
 
     public int getAdWidth() {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/WebViews.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/WebViews.java
index f97898a0..05ceec73 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/WebViews.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/WebViews.java
@@ -1,11 +1,15 @@
 package com.mopub.mobileads.util;
 
+import android.os.Build;
 import android.support.annotation.NonNull;
+import android.webkit.CookieManager;
 import android.webkit.JsPromptResult;
 import android.webkit.JsResult;
 import android.webkit.WebChromeClient;
 import android.webkit.WebView;
 
+import com.mopub.common.MoPub;
+import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
 
 public class WebViews {
@@ -59,4 +63,34 @@ public boolean onJsBeforeUnload(@NonNull final WebView view, @NonNull final Stri
             }
         });
     }
+
+    public static void manageWebCookies() {
+        CookieManager cookieManager = CookieManager.getInstance();
+        if (MoPub.canCollectPersonalInformation()) {
+            cookieManager.setAcceptCookie(true);
+            CookieManager.setAcceptFileSchemeCookies(true);
+            return;
+        }
+
+        // remove all cookies
+        cookieManager.setAcceptCookie(false);
+        CookieManager.setAcceptFileSchemeCookies(false);
+        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            cookieManager.removeSessionCookies(null);
+            cookieManager.removeAllCookies(null);
+            cookieManager.flush();
+        } else {
+            cookieManager.removeSessionCookie();
+            cookieManager.removeAllCookie();
+        }
+    }
+
+    public static void manageThirdPartyCookies(@NonNull final WebView webView){
+        Preconditions.checkNotNull(webView);
+
+        CookieManager cookieManager = CookieManager.getInstance();
+        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            cookieManager.setAcceptThirdPartyCookies(webView, MoPub.canCollectPersonalInformation());
+        }
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
index bd4ba50e..d9e9e993 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
@@ -1,7 +1,6 @@
 package com.mopub.network;
 
 import android.content.Context;
-import android.location.Location;
 import android.net.Uri;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -11,29 +10,26 @@
 import com.mopub.common.AdType;
 import com.mopub.common.DataKeys;
 import com.mopub.common.FullAdType;
-import com.mopub.common.LocationService;
 import com.mopub.common.MoPub;
 import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.Preconditions;
+import com.mopub.common.SdkConfiguration;
 import com.mopub.common.VisibleForTesting;
-import com.mopub.common.event.BaseEvent;
-import com.mopub.common.event.Event;
-import com.mopub.common.event.EventDetails;
-import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.common.util.Json;
 import com.mopub.common.util.ResponseHeader;
 import com.mopub.mobileads.AdTypeTranslator;
 import com.mopub.volley.DefaultRetryPolicy;
 import com.mopub.volley.NetworkResponse;
-import com.mopub.volley.Request;
 import com.mopub.volley.Response;
 import com.mopub.volley.toolbox.HttpHeaderParser;
 
+import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.io.UnsupportedEncodingException;
+import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
 import java.util.TreeMap;
@@ -44,7 +40,13 @@
 import static com.mopub.network.HeaderUtils.extractIntegerHeader;
 import static com.mopub.network.HeaderUtils.extractPercentHeaderString;
 
-public class AdRequest extends Request<AdResponse> {
+public class AdRequest extends MoPubRequest<AdResponse> {
+
+    @VisibleForTesting
+    static final String AD_RESPONSES_KEY = "ad-responses";
+    private static final String ADM_KEY = "adm";
+    private static final String BODY_KEY = "body";
+    private static final String HEADERS_KEY = "headers";
 
     @NonNull private final AdRequest.Listener mListener;
     @NonNull private final AdFormat mAdFormat;
@@ -60,7 +62,7 @@ public AdRequest(@NonNull final String url,
             @Nullable final String adUnitId,
             @NonNull Context context,
             @NonNull final Listener listener) {
-        super(Method.GET, url, listener);
+        super(context, url, listener);
         Preconditions.checkNotNull(adFormat);
         Preconditions.checkNotNull(listener);
         mAdUnitId = adUnitId;
@@ -73,6 +75,18 @@ public AdRequest(@NonNull final String url,
                 DefaultRetryPolicy.DEFAULT_BACKOFF_MULT);
         setRetryPolicy(retryPolicy);
         setShouldCache(false);
+
+        final PersonalInfoManager personalInfoManager = MoPub.getPersonalInformationManager();
+        if (personalInfoManager == null) {
+            MoPubLog.e("Make sure you initialize the SDK before loading an ad. For now, the SDK " +
+                    "will be automatically initialized on your behalf. Starting from release " +
+                    "5.2.0, initialization will be a strict requirement, and ad requests " +
+                    "made with an uninitialized SDK will begin to fail.");
+            MoPub.initializeSdk(context,
+                    new SdkConfiguration.Builder(adUnitId == null ? "" : adUnitId).build(), null);
+        } else {
+            personalInfoManager.requestSync(false);
+        }
     }
 
     @NonNull
@@ -108,28 +122,53 @@ public Listener getListener() {
         // NOTE: We never get status codes outside of {[200, 299], 304}. Those errors are sent to the
         // error listener.
 
-        Map<String, String> headers = networkResponse.headers;
+        // convert all keys to lowercase
+        final Map<String, String> headers = new HashMap<>();
+        for(final String key : networkResponse.headers.keySet() ){
+            headers.put(key.toLowerCase(), networkResponse.headers.get(key));
+        }
+
+        final JSONObject jsonHeaders;
+        final JSONObject currentAdResponse;
 
         if (extractBooleanHeader(headers, ResponseHeader.WARMUP, false)) {
-            return Response.error(new MoPubNetworkError("Ad Unit is warming up.", MoPubNetworkError.Reason.WARMING_UP));
+            return Response.error(new MoPubNetworkError("Ad Unit is warming up.",
+                    MoPubNetworkError.Reason.WARMING_UP));
         }
 
+        final AdResponse.Builder builder = new AdResponse.Builder();
+        builder.setAdUnitId(mAdUnitId);
 
-        Location location = LocationService.getLastKnownLocation(mContext,
-                MoPub.getLocationPrecision(),
-                MoPub.getLocationAwareness());
+        // Response Body encoding / decoding
+        final String responseBody = parseStringBody(networkResponse);
+        builder.setResponseBody(responseBody);
 
-        AdResponse.Builder builder = new AdResponse.Builder();
-        builder.setAdUnitId(mAdUnitId);
+        if (AdType.MULTI.equalsIgnoreCase(extractHeader(headers, ResponseHeader.AD_RESPONSE_TYPE))) {
+            try {
+                final JSONObject rootBody = new JSONObject(responseBody);
+                final JSONArray adResponsesJson = rootBody.getJSONArray(AD_RESPONSES_KEY);
+                // Currently, there is only one ad response. Client-side waterfall will be
+                // able to handle multiple ad responses.
+                currentAdResponse = adResponsesJson.getJSONObject(0);
+                jsonHeaders = currentAdResponse.getJSONObject(HEADERS_KEY);
+            } catch (JSONException e) {
+                return Response.error(
+                        new MoPubNetworkError("Failed to decode header JSON",
+                                e, MoPubNetworkError.Reason.BAD_HEADER_DATA));
+            }
+        } else {
+            jsonHeaders = new JSONObject(headers);
+            currentAdResponse = null;
+        }
 
-        String adTypeString = extractHeader(headers, ResponseHeader.AD_TYPE);
-        String fullAdTypeString = extractHeader(headers, ResponseHeader.FULL_AD_TYPE);
+        String adTypeString = extractHeader(jsonHeaders, ResponseHeader.AD_TYPE);
+        String fullAdTypeString = extractHeader(jsonHeaders, ResponseHeader.FULL_AD_TYPE);
         builder.setAdType(adTypeString);
         builder.setFullAdType(fullAdTypeString);
 
         // In the case of a CLEAR response, the REFRESH_TIME header must still be respected. Ensure
         // that it is parsed and passed along to the MoPubNetworkError.
-        final Integer refreshTimeSeconds = extractIntegerHeader(headers,
+        final Integer refreshTimeSeconds = extractIntegerHeader(jsonHeaders,
                 ResponseHeader.REFRESH_TIME);
         final Integer refreshTimeMilliseconds = refreshTimeSeconds == null
                 ? null
@@ -138,7 +177,6 @@ public Listener getListener() {
 
         if (AdType.CLEAR.equals(adTypeString)) {
             final AdResponse adResponse = builder.build();
-            logScribeEvent(adResponse, networkResponse, location);
             return Response.error(
                     new MoPubNetworkError(
                             "No ads found for ad unit.",
@@ -148,44 +186,41 @@ public Listener getListener() {
             );
         }
 
-        String dspCreativeId = extractHeader(headers, ResponseHeader.DSP_CREATIVE_ID);
+        String dspCreativeId = extractHeader(jsonHeaders, ResponseHeader.DSP_CREATIVE_ID);
         builder.setDspCreativeId(dspCreativeId);
 
-        String networkType = extractHeader(headers, ResponseHeader.NETWORK_TYPE);
+        String networkType = extractHeader(jsonHeaders, ResponseHeader.NETWORK_TYPE);
         builder.setNetworkType(networkType);
 
-        String redirectUrl = extractHeader(headers, ResponseHeader.REDIRECT_URL);
+        String redirectUrl = extractHeader(jsonHeaders, ResponseHeader.REDIRECT_URL);
         builder.setRedirectUrl(redirectUrl);
 
         // X-Clickthrough is parsed into the AdResponse as the click tracker
         // Used by AdViewController, Rewarded Video, Native Adapter, MoPubNative
-        String clickTrackingUrl = extractHeader(headers, ResponseHeader.CLICK_TRACKING_URL);
+        String clickTrackingUrl = extractHeader(jsonHeaders, ResponseHeader.CLICK_TRACKING_URL);
         builder.setClickTrackingUrl(clickTrackingUrl);
 
-        builder.setImpressionTrackingUrl(extractHeader(headers, ResponseHeader.IMPRESSION_URL));
+        builder.setImpressionTrackingUrl(extractHeader(jsonHeaders, ResponseHeader.IMPRESSION_URL));
 
-        String failUrl = extractHeader(headers, ResponseHeader.FAIL_URL);
+        String failUrl = extractHeader(jsonHeaders, ResponseHeader.FAIL_URL);
         builder.setFailoverUrl(failUrl);
 
         String requestId = getRequestId(failUrl);
         builder.setRequestId(requestId);
 
-        boolean isScrollable = extractBooleanHeader(headers, ResponseHeader.SCROLLABLE, false);
+        boolean isScrollable = extractBooleanHeader(jsonHeaders, ResponseHeader.SCROLLABLE, false);
         builder.setScrollable(isScrollable);
 
-        Integer width = extractIntegerHeader(headers, ResponseHeader.WIDTH);
-        Integer height = extractIntegerHeader(headers, ResponseHeader.HEIGHT);
+        Integer width = extractIntegerHeader(jsonHeaders, ResponseHeader.WIDTH);
+        Integer height = extractIntegerHeader(jsonHeaders, ResponseHeader.HEIGHT);
         builder.setDimensions(width, height);
 
-        Integer adTimeoutDelaySeconds = extractIntegerHeader(headers, ResponseHeader.AD_TIMEOUT);
+        Integer adTimeoutDelaySeconds = extractIntegerHeader(jsonHeaders, ResponseHeader.AD_TIMEOUT);
         builder.setAdTimeoutDelayMilliseconds(
                 adTimeoutDelaySeconds == null
                         ? null
                         : adTimeoutDelaySeconds * 1000);
 
-        // Response Body encoding / decoding
-        String responseBody = parseStringBody(networkResponse);
-        builder.setResponseBody(responseBody);
         if (AdType.STATIC_NATIVE.equals(adTypeString) || AdType.VIDEO_NATIVE.equals(adTypeString)) {
             try {
                 builder.setJsonBody(new JSONObject(responseBody));
@@ -198,21 +233,21 @@ public Listener getListener() {
 
         // Derive custom event fields
         String customEventClassName = AdTypeTranslator.getCustomEventName(mAdFormat, adTypeString,
-                fullAdTypeString, headers);
+                fullAdTypeString, jsonHeaders);
         builder.setCustomEventClassName(customEventClassName);
 
         // Default browser agent from X-Browser-Agent header
         BrowserAgent browserAgent = BrowserAgent.fromHeader(
-                extractIntegerHeader(headers, ResponseHeader.BROWSER_AGENT));
+                extractIntegerHeader(jsonHeaders, ResponseHeader.BROWSER_AGENT));
         MoPub.setBrowserAgentFromAdServer(browserAgent);
         builder.setBrowserAgent(browserAgent);
 
         // Process server extras if they are present:
-        String customEventData = extractHeader(headers, ResponseHeader.CUSTOM_EVENT_DATA);
+        String customEventData = extractHeader(jsonHeaders, ResponseHeader.CUSTOM_EVENT_DATA);
 
         // Some server-supported custom events (like Millennial banners) use a different header field
         if (TextUtils.isEmpty(customEventData)) {
-            customEventData = extractHeader(headers, ResponseHeader.NATIVE_PARAMS);
+            customEventData = extractHeader(jsonHeaders, ResponseHeader.NATIVE_PARAMS);
         }
 
         final Map<String, String> serverExtras;
@@ -224,10 +259,20 @@ public Listener getListener() {
                             e, MoPubNetworkError.Reason.BAD_HEADER_DATA));
         }
 
-        if (redirectUrl != null) {
+        try {
+            if (currentAdResponse != null) {
+                serverExtras.put(DataKeys.ADM_KEY, currentAdResponse.getString(ADM_KEY));
+            }
+        } catch (JSONException e) {
+            return Response.error(
+                    new MoPubNetworkError("Failed to parse ADM for advanced bidding",
+                            e, MoPubNetworkError.Reason.BAD_BODY));
+        }
+
+        if (!TextUtils.isEmpty(redirectUrl)) {
             serverExtras.put(DataKeys.REDIRECT_URL_KEY, redirectUrl);
         }
-        if (clickTrackingUrl != null) {
+        if (!TextUtils.isEmpty(clickTrackingUrl)) {
             // X-Clickthrough parsed into serverExtras
             // Used by Banner, Interstitial
             serverExtras.put(DataKeys.CLICKTHROUGH_URL_KEY, clickTrackingUrl);
@@ -236,12 +281,12 @@ public Listener getListener() {
             // Some MoPub-specific custom events get their serverExtras from the response itself:
             serverExtras.put(DataKeys.HTML_RESPONSE_BODY_KEY, responseBody);
             serverExtras.put(DataKeys.SCROLLABLE_KEY, Boolean.toString(isScrollable));
-            serverExtras.put(DataKeys.CREATIVE_ORIENTATION_KEY, extractHeader(headers, ResponseHeader.ORIENTATION));
+            serverExtras.put(DataKeys.CREATIVE_ORIENTATION_KEY, extractHeader(jsonHeaders, ResponseHeader.ORIENTATION));
         }
         if (AdType.STATIC_NATIVE.equals(adTypeString) || AdType.VIDEO_NATIVE.equals(adTypeString)) {
-            final String impressionMinVisiblePercent = extractPercentHeaderString(headers,
+            final String impressionMinVisiblePercent = extractPercentHeaderString(jsonHeaders,
                     ResponseHeader.IMPRESSION_MIN_VISIBLE_PERCENT);
-            final String impressionVisibleMS = extractHeader(headers,
+            final String impressionVisibleMS = extractHeader(jsonHeaders,
                     ResponseHeader.IMPRESSION_VISIBLE_MS);
             final String impressionMinVisiblePx = extractHeader(headers,
                     ResponseHeader.IMPRESSION_MIN_VISIBLE_PX);
@@ -258,40 +303,23 @@ public Listener getListener() {
         }
         if (AdType.VIDEO_NATIVE.equals(adTypeString)) {
             serverExtras.put(DataKeys.PLAY_VISIBLE_PERCENT,
-                    extractPercentHeaderString(headers, ResponseHeader.PLAY_VISIBLE_PERCENT));
+                    extractPercentHeaderString(jsonHeaders, ResponseHeader.PLAY_VISIBLE_PERCENT));
             serverExtras.put(DataKeys.PAUSE_VISIBLE_PERCENT,
-                    extractPercentHeaderString(headers, ResponseHeader.PAUSE_VISIBLE_PERCENT));
-            serverExtras.put(DataKeys.MAX_BUFFER_MS, extractHeader(headers,
+                    extractPercentHeaderString(jsonHeaders, ResponseHeader.PAUSE_VISIBLE_PERCENT));
+            serverExtras.put(DataKeys.MAX_BUFFER_MS, extractHeader(jsonHeaders,
                     ResponseHeader.MAX_BUFFER_MS));
-
-            builder.setEventDetails(new EventDetails.Builder()
-                            .adUnitId(mAdUnitId)
-                            .adType(adTypeString)
-                            .adNetworkType(networkType)
-                            .adWidthPx(width)
-                            .adHeightPx(height)
-                            .dspCreativeId(dspCreativeId)
-                            .geoLatitude(location == null ? null : location.getLatitude())
-                            .geoLongitude(location == null ? null : location.getLongitude())
-                            .geoAccuracy(location == null ? null : location.getAccuracy())
-                            .performanceDurationMs(networkResponse.networkTimeMs)
-                            .requestId(requestId)
-                            .requestStatusCode(networkResponse.statusCode)
-                            .requestUri(getUrl())
-                            .build()
-            );
         }
 
         // Extract internal video trackers, if available
-        final String videoTrackers = extractHeader(headers, ResponseHeader.VIDEO_TRACKERS);
-        if (videoTrackers != null) {
+        final String videoTrackers = extractHeader(jsonHeaders, ResponseHeader.VIDEO_TRACKERS);
+        if (!TextUtils.isEmpty(videoTrackers)) {
             serverExtras.put(DataKeys.VIDEO_TRACKERS_KEY, videoTrackers);
         }
         if (AdType.REWARDED_VIDEO.equals(adTypeString) ||
                 (AdType.INTERSTITIAL.equals(adTypeString) &&
                         FullAdType.VAST.equals(fullAdTypeString))) {
             serverExtras.put(DataKeys.EXTERNAL_VIDEO_VIEWABILITY_TRACKERS_KEY,
-                    extractHeader(headers, ResponseHeader.VIDEO_VIEWABILITY_TRACKERS));
+                    extractHeader(jsonHeaders, ResponseHeader.VIDEO_VIEWABILITY_TRACKERS));
         }
 
         // Banner imp tracking
@@ -303,7 +331,7 @@ public Listener getListener() {
         }
 
         // Disable viewability vendors, if any
-        final String disabledViewabilityVendors = extractHeader(headers,
+        final String disabledViewabilityVendors = extractHeader(jsonHeaders,
                 ResponseHeader.DISABLE_VIEWABILITY);
         if (!TextUtils.isEmpty(disabledViewabilityVendors)) {
             final ViewabilityVendor disabledVendors =
@@ -317,17 +345,17 @@ public Listener getListener() {
 
         if (AdType.REWARDED_VIDEO.equals(adTypeString) || AdType.CUSTOM.equals(adTypeString) ||
                 AdType.REWARDED_PLAYABLE.equals(adTypeString)) {
-            final String rewardedVideoCurrencyName = extractHeader(headers,
+            final String rewardedVideoCurrencyName = extractHeader(jsonHeaders,
                     ResponseHeader.REWARDED_VIDEO_CURRENCY_NAME);
-            final String rewardedVideoCurrencyAmount = extractHeader(headers,
+            final String rewardedVideoCurrencyAmount = extractHeader(jsonHeaders,
                     ResponseHeader.REWARDED_VIDEO_CURRENCY_AMOUNT);
-            final String rewardedCurrencies = extractHeader(headers,
+            final String rewardedCurrencies = extractHeader(jsonHeaders,
                     ResponseHeader.REWARDED_CURRENCIES);
-            final String rewardedVideoCompletionUrl = extractHeader(headers,
+            final String rewardedVideoCompletionUrl = extractHeader(jsonHeaders,
                     ResponseHeader.REWARDED_VIDEO_COMPLETION_URL);
-            final Integer rewardedDuration = extractIntegerHeader(headers,
+            final Integer rewardedDuration = extractIntegerHeader(jsonHeaders,
                     ResponseHeader.REWARDED_DURATION);
-            final boolean shouldRewardOnClick = extractBooleanHeader(headers,
+            final boolean shouldRewardOnClick = extractBooleanHeader(jsonHeaders,
                     ResponseHeader.SHOULD_REWARD_ON_CLICK, false);
             builder.setRewardedVideoCurrencyName(rewardedVideoCurrencyName);
             builder.setRewardedVideoCurrencyAmount(rewardedVideoCurrencyAmount);
@@ -337,8 +365,22 @@ public Listener getListener() {
             builder.setShouldRewardOnClick(shouldRewardOnClick);
         }
 
+        final boolean invalidateConsent = extractBooleanHeader(jsonHeaders, ResponseHeader.INVALIDATE_CONSENT, false);
+        final boolean forceExplicitNo = extractBooleanHeader(jsonHeaders, ResponseHeader.FORCE_EXPLICIT_NO, false);
+        final boolean reacquireConsent = extractBooleanHeader(jsonHeaders, ResponseHeader.REACQUIRE_CONSENT, false);
+        String consentChangeReason = extractHeader(jsonHeaders, ResponseHeader.CONSENT_CHANGE_REASON);
+
+        if (MoPub.getPersonalInformationManager() != null) {
+            if (forceExplicitNo) {
+                MoPub.getPersonalInformationManager().forceExplicitNo(consentChangeReason);
+            } else if (invalidateConsent) {
+                MoPub.getPersonalInformationManager().invalidateConsent(consentChangeReason);
+            } else if (reacquireConsent) {
+                MoPub.getPersonalInformationManager().reacquireConsent(consentChangeReason);
+            }
+        }
+
         AdResponse adResponse = builder.build();
-        logScribeEvent(adResponse, networkResponse, location);
 
         return Response.success(builder.build(),  // Cast needed for Response generic.
                 HttpHeaderParser.parseCacheHeaders(networkResponse));
@@ -352,17 +394,6 @@ private boolean eventDataIsInResponseBody(@Nullable String adType,
                 AdType.REWARDED_PLAYABLE.equals(adType);
     }
 
-    // Based on Volley's StringResponse class.
-    protected String parseStringBody(NetworkResponse response) {
-        String parsed;
-        try {
-            parsed = new String(response.data, HttpHeaderParser.parseCharset(response.headers));
-        } catch (UnsupportedEncodingException e) {
-            parsed = new String(response.data);
-        }
-        return parsed;
-    }
-
     @Override
     protected void deliverResponse(final AdResponse adResponse) {
         mListener.onSuccess(adResponse);
@@ -385,34 +416,4 @@ String getRequestId(@Nullable String failUrl) {
 
         return requestId;
     }
-
-    @VisibleForTesting
-    void logScribeEvent(@NonNull AdResponse adResponse, @NonNull NetworkResponse networkResponse,
-            @Nullable Location location) {
-        Preconditions.checkNotNull(adResponse);
-        Preconditions.checkNotNull(networkResponse);
-
-        MoPubEvents.log(
-                new Event.Builder(BaseEvent.Name.AD_REQUEST, BaseEvent.Category.REQUESTS,
-                        BaseEvent.SamplingRate.AD_REQUEST.getSamplingRate())
-                        .withAdUnitId(mAdUnitId)
-                        .withDspCreativeId(adResponse.getDspCreativeId())
-                        .withAdType(adResponse.getAdType())
-                        .withAdNetworkType(adResponse.getNetworkType())
-                        .withAdWidthPx(adResponse.getWidth() != null
-                                ? adResponse.getWidth().doubleValue()
-                                : null)
-                        .withAdHeightPx(adResponse.getHeight() != null
-                                ? adResponse.getHeight().doubleValue()
-                                : null)
-                        .withGeoLat(location != null ? location.getLatitude() : null)
-                        .withGeoLon(location != null ? location.getLongitude() : null)
-                        .withGeoAccuracy(location != null ? (double) location.getAccuracy() : null)
-                        .withPerformanceDurationMs((double) networkResponse.networkTimeMs)
-                        .withRequestId(adResponse.getRequestId())
-                        .withRequestStatusCode(networkResponse.statusCode)
-                        .withRequestUri(getUrl())
-                        .build()
-        );
-    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
index 7e034601..9dd3d24c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
@@ -4,7 +4,6 @@
 import android.support.annotation.Nullable;
 
 import com.mopub.common.MoPub.BrowserAgent;
-import com.mopub.common.event.EventDetails;
 import com.mopub.common.util.DateAndTime;
 
 import org.json.JSONObject;
@@ -68,9 +67,6 @@
     @Nullable
     private final JSONObject mJsonBody;
 
-    @Nullable
-    private final EventDetails mEventDetails;
-
     @Nullable
     private final String mCustomEventClassName;
     @Nullable
@@ -107,9 +103,8 @@ private AdResponse(@NonNull Builder builder) {
         mScrollable = builder.scrollable;
         mResponseBody = builder.responseBody;
         mJsonBody = builder.jsonBody;
-        mEventDetails = builder.eventDetails;
         mCustomEventClassName = builder.customEventClassName;
-        mBrowserAgent = builder.mBrowserAgent;
+        mBrowserAgent = builder.browserAgent;
         mServerExtras = builder.serverExtras;
         mTimestamp = DateAndTime.now().getTime();
     }
@@ -123,11 +118,6 @@ public JSONObject getJsonBody() {
         return mJsonBody;
     }
 
-    @Nullable
-    public EventDetails getEventDetails() {
-        return mEventDetails;
-    }
-
     @Nullable
     public String getStringBody() {
         return mResponseBody;
@@ -275,7 +265,6 @@ public Builder toBuilder() {
                 .setScrollable(mScrollable)
                 .setResponseBody(mResponseBody)
                 .setJsonBody(mJsonBody)
-                .setEventDetails(mEventDetails)
                 .setCustomEventClassName(mCustomEventClassName)
                 .setBrowserAgent(mBrowserAgent)
                 .setServerExtras(mServerExtras);
@@ -311,10 +300,9 @@ public Builder toBuilder() {
         private String responseBody;
         private JSONObject jsonBody;
 
-        private EventDetails eventDetails;
-
         private String customEventClassName;
-        private BrowserAgent mBrowserAgent;
+        private BrowserAgent browserAgent;
+
         private Map<String, String> serverExtras = new TreeMap<String, String>();
 
         public Builder setAdType(@Nullable final String adType) {
@@ -432,18 +420,13 @@ public Builder setJsonBody(@Nullable final JSONObject jsonBody) {
             return this;
         }
 
-        public Builder setEventDetails(@Nullable final EventDetails eventDetails) {
-            this.eventDetails = eventDetails;
-            return this;
-        }
-
         public Builder setCustomEventClassName(@Nullable final String customEventClassName) {
             this.customEventClassName = customEventClassName;
             return this;
         }
 
         public Builder setBrowserAgent(@Nullable final BrowserAgent browserAgent) {
-            this.mBrowserAgent = browserAgent;
+            this.browserAgent = browserAgent;
             return this;
         }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java
index 55fba8cc..a1b0523a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java
@@ -1,23 +1,42 @@
 package com.mopub.network;
 
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
+import com.mopub.common.Preconditions;
 import com.mopub.common.util.ResponseHeader;
+import com.mopub.volley.Header;
+import com.mopub.volley.toolbox.HttpResponse;
 
-import org.apache.http.Header;
-import org.apache.http.HttpResponse;
+import org.json.JSONObject;
 
 import java.text.NumberFormat;
+import java.util.Iterator;
+import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 
 public class HeaderUtils {
     @Nullable
     public static String extractHeader(Map<String, String> headers, ResponseHeader responseHeader) {
-        return headers.get(responseHeader.getKey());
+        return headers.get(responseHeader.getKey().toLowerCase());
     }
 
-    public static Integer extractIntegerHeader(Map<String, String> headers, ResponseHeader responseHeader) {
+    @NonNull
+    public static String extractHeader(@Nullable final JSONObject headers,
+            @NonNull final ResponseHeader responseHeader) {
+        Preconditions.checkNotNull(responseHeader);
+
+        if (headers == null) {
+            return "";
+        }
+
+        final String key = getKeyIgnoreCase(headers, responseHeader.getKey());
+        return headers.optString(key);
+    }
+
+    @Nullable
+    public static Integer extractIntegerHeader(JSONObject headers, ResponseHeader responseHeader) {
         return formatIntHeader(extractHeader(headers, responseHeader));
     }
 
@@ -25,20 +44,25 @@ public static boolean extractBooleanHeader(Map<String, String> headers, Response
         return formatBooleanHeader(extractHeader(headers, responseHeader), defaultValue);
     }
 
-    public static Integer extractPercentHeader(Map<String, String> headers, ResponseHeader responseHeader) {
+    public static boolean extractBooleanHeader(JSONObject headers, ResponseHeader responseHeader, boolean defaultValue) {
+        return formatBooleanHeader(extractHeader(headers, responseHeader), defaultValue);
+    }
+
+    @Nullable
+    public static Integer extractPercentHeader(JSONObject headers, ResponseHeader responseHeader) {
         return formatPercentHeader(extractHeader(headers, responseHeader));
     }
 
     @Nullable
-    public static String extractPercentHeaderString(Map<String, String> headers,
+    public static String extractPercentHeaderString(JSONObject headers,
             ResponseHeader responseHeader) {
         Integer percentHeaderValue = extractPercentHeader(headers, responseHeader);
         return percentHeaderValue != null ? percentHeaderValue.toString() : null;
     }
 
-
+    @Nullable
     public static String extractHeader(HttpResponse response, ResponseHeader responseHeader) {
-        Header header = response.getFirstHeader(responseHeader.getKey());
+        final Header header = getFirstHeader(response.getHeaders(), responseHeader);
         return header != null ? header.getValue() : null;
     }
 
@@ -46,6 +70,7 @@ public static boolean extractBooleanHeader(HttpResponse response, ResponseHeader
         return formatBooleanHeader(extractHeader(response, responseHeader), defaultValue);
     }
 
+    @Nullable
     public static Integer extractIntegerHeader(HttpResponse response, ResponseHeader responseHeader) {
         String headerValue = extractHeader(response, responseHeader);
         return formatIntHeader(headerValue);
@@ -67,6 +92,7 @@ private static boolean formatBooleanHeader(@Nullable String headerValue, boolean
         return headerValue.equals("1");
     }
 
+    @Nullable
     private static Integer formatIntHeader(String headerValue) {
         try {
             return Integer.parseInt(headerValue);
@@ -101,4 +127,36 @@ private static Integer formatPercentHeader(@Nullable String headerValue) {
 
         return percentValue;
     }
+
+    private static Header getFirstHeader(@Nullable final List<Header> headers,
+            @NonNull final ResponseHeader responseHeader) {
+        Preconditions.checkNotNull(responseHeader);
+
+        if (headers == null) {
+            return null;
+        }
+
+        for (final Header header : headers) {
+            if (header.getName().equalsIgnoreCase(responseHeader.getKey())) {
+                return header;
+            }
+        }
+        return null;
+    }
+
+    @NonNull
+    private static String getKeyIgnoreCase(@NonNull final JSONObject json,
+                                           @NonNull final String searchKey) {
+        Preconditions.checkNotNull(json);
+        Preconditions.checkNotNull(searchKey);
+
+        final Iterator<String> keys = json.keys();
+        while (keys.hasNext()) {
+            final String key = keys.next();
+            if (searchKey.equalsIgnoreCase(key)) {
+                return key;
+            }
+        }
+        return searchKey;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequest.java
new file mode 100644
index 00000000..b888c4a0
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequest.java
@@ -0,0 +1,76 @@
+package com.mopub.network;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.Request;
+import com.mopub.volley.Response;
+import com.mopub.volley.toolbox.HttpHeaderParser;
+
+import java.io.UnsupportedEncodingException;
+import java.util.Map;
+
+/**
+ * Changes the type of request it is based on whether or not the request is going to MoPub's ad
+ * server. If the request is for ad server in some way, reconstruct it as a POST request and
+ * set the body and content type to json.
+ */
+public abstract class MoPubRequest<T> extends Request<T>  {
+
+    private static final String JSON_CONTENT_TYPE = "application/json; charset=UTF-8";
+
+    @NonNull private final String mOriginalUrl;
+    @NonNull private final Context mContext;
+
+    public MoPubRequest(@NonNull final Context context,
+            @NonNull final String url,
+            @Nullable final Response.ErrorListener listener) {
+        super(MoPubRequestUtils.chooseMethod(url), MoPubRequestUtils.truncateQueryParamsIfPost(url),
+                listener);
+
+        mOriginalUrl = url;
+        mContext = context.getApplicationContext();
+    }
+
+    @Override
+    protected Map<String, String> getParams() {
+        if (!MoPubRequestUtils.isMoPubRequest(getUrl())) {
+            return null;
+        }
+
+        return MoPubRequestUtils.convertQueryToMap(mContext, mOriginalUrl);
+    }
+
+    @Override
+    public String getBodyContentType() {
+        if (MoPubRequestUtils.isMoPubRequest(getUrl())) {
+            return JSON_CONTENT_TYPE;
+        }
+        return super.getBodyContentType();
+    }
+
+    @Override
+    public byte[] getBody() {
+        final String body = MoPubRequestUtils.generateBodyFromParams(getParams(), getUrl());
+        if (body == null) {
+            return null;
+        }
+        return body.getBytes();
+    }
+
+    @NonNull
+    protected String parseStringBody(@NonNull final NetworkResponse response) {
+        Preconditions.checkNotNull(response);
+
+        String parsed;
+        try {
+            parsed = new String(response.data, HttpHeaderParser.parseCharset(response.headers));
+        } catch (UnsupportedEncodingException e) {
+            parsed = new String(response.data);
+        }
+        return parsed;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestUtils.java
new file mode 100644
index 00000000..4b64ac29
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestUtils.java
@@ -0,0 +1,98 @@
+package com.mopub.network;
+
+import android.content.Context;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.Constants;
+import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.volley.Request;
+import com.mopub.volley.toolbox.HurlStack;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Keeps utility methods regarding MoPubRequests in one place.
+ */
+public class MoPubRequestUtils {
+
+    public static String truncateQueryParamsIfPost(@NonNull final String url) {
+        Preconditions.checkNotNull(url);
+        if (!isMoPubRequest(url)) {
+            return url;
+        }
+
+        final int queryPosition = url.indexOf('?');
+        if (queryPosition == -1) {
+            return url;
+        }
+
+        return url.substring(0, queryPosition);
+    }
+
+    public static boolean isMoPubRequest(@NonNull final String url) {
+        Preconditions.checkNotNull(url);
+
+        final String httpHost = Constants.HTTP + "://" + Constants.HOST;
+        final String httpsHost = Constants.HTTPS + "://" + Constants.HOST;
+
+        return url.startsWith(httpHost) || url.startsWith(httpsHost);
+    }
+
+    public static int chooseMethod(String url) {
+        if (isMoPubRequest(url)) {
+            return Request.Method.POST;
+        } else {
+            return Request.Method.GET;
+        }
+    }
+
+    @NonNull
+    public static Map<String, String> convertQueryToMap(@NonNull final Context context,
+            @NonNull final String url) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(url);
+
+        final Map<String, String> params = new HashMap<>();
+        HurlStack.UrlRewriter rewriter = Networking.getUrlRewriter(context);
+        final Uri uri = Uri.parse(rewriter.rewriteUrl(url));
+        for (final String queryParam : uri.getQueryParameterNames()) {
+            params.put(queryParam, TextUtils.join(",", uri.getQueryParameters(queryParam)));
+        }
+
+        return params;
+    }
+
+    @Nullable
+    public static String generateBodyFromParams(@Nullable final Map<String, String> params,
+            @NonNull final String url) {
+        Preconditions.checkNotNull(url);
+
+        if (!MoPubRequestUtils.isMoPubRequest(url) || params == null || params.isEmpty()) {
+            return null;
+        }
+
+        final JSONObject jsonBody = new JSONObject();
+        for (final String queryName : params.keySet()) {
+            try {
+                jsonBody.put(queryName, params.get(queryName));
+            } catch (JSONException e) {
+                MoPubLog.d("Unable to add " + queryName + " to JSON body.");
+            }
+        }
+        return jsonBody.toString();
+    }
+
+    /**
+     * This is a helper class and should not be instantiated.
+     */
+    private MoPubRequestUtils() {
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
index f55a88fa..e551304f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
@@ -10,7 +10,6 @@
 import android.webkit.WebSettings;
 import android.webkit.WebView;
 
-import com.mopub.common.ClientMetadata;
 import com.mopub.common.Constants;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
@@ -18,9 +17,9 @@
 import com.mopub.volley.Cache;
 import com.mopub.volley.Network;
 import com.mopub.volley.RequestQueue;
+import com.mopub.volley.toolbox.BaseHttpStack;
 import com.mopub.volley.toolbox.BasicNetwork;
 import com.mopub.volley.toolbox.DiskBasedCache;
-import com.mopub.volley.toolbox.HttpStack;
 import com.mopub.volley.toolbox.HurlStack;
 import com.mopub.volley.toolbox.ImageLoader;
 
@@ -40,6 +39,7 @@
     private volatile static String sUserAgent;
     private volatile static MaxWidthImageLoader sMaxWidthImageLoader;
     private static boolean sUseHttps = false;
+    private static HurlStack.UrlRewriter sUrlRewriter;
 
     @Nullable
     public static MoPubRequestQueue getRequestQueue() {
@@ -47,7 +47,18 @@ public static MoPubRequestQueue getRequestQueue() {
     }
 
     @NonNull
-    public static MoPubRequestQueue getRequestQueue(@NonNull Context context) {
+    public static HurlStack.UrlRewriter getUrlRewriter(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        // No synchronization done here since it's fine to create the same rewriter more than once.
+        if (sUrlRewriter == null) {
+            sUrlRewriter = new PlayServicesUrlRewriter();
+        }
+        return sUrlRewriter;
+    }
+
+    @NonNull
+    public static MoPubRequestQueue getRequestQueue(@NonNull final Context context) {
         MoPubRequestQueue requestQueue = sRequestQueue;
         // Double-check locking to initialize.
         if (requestQueue == null) {
@@ -55,18 +66,18 @@ public static MoPubRequestQueue getRequestQueue(@NonNull Context context) {
                 requestQueue = sRequestQueue;
                 if (requestQueue == null) {
 
-                    // Guarantee ClientMetadata is set up.
-                    final ClientMetadata clientMetadata = ClientMetadata.getInstance(context);
-                    final HurlStack.UrlRewriter urlRewriter = new PlayServicesUrlRewriter(clientMetadata.getDeviceId(), context);
                     final SSLSocketFactory socketFactory = CustomSSLSocketFactory.getDefault(Constants.TEN_SECONDS_MILLIS);
 
-                    final String userAgent = Networking.getUserAgent(context.getApplicationContext());
-                    HttpStack httpStack = new RequestQueueHttpStack(userAgent, urlRewriter, socketFactory);
+                    final String userAgent = Networking.getUserAgent(
+                            context.getApplicationContext());
+                    final BaseHttpStack httpStack = new RequestQueueHttpStack(userAgent,
+                            getUrlRewriter(context), socketFactory);
 
-                    Network network = new BasicNetwork(httpStack);
-                    File volleyCacheDir = new File(context.getCacheDir().getPath() + File.separator
-                            + CACHE_DIRECTORY_NAME);
-                    Cache cache = new DiskBasedCache(volleyCacheDir, (int) DeviceUtils.diskCacheSizeBytes(volleyCacheDir, Constants.TEN_MB));
+                    final Network network = new BasicNetwork(httpStack);
+                    final File volleyCacheDir = new File(context.getCacheDir().getPath() +
+                            File.separator + CACHE_DIRECTORY_NAME);
+                    final Cache cache = new DiskBasedCache(volleyCacheDir,
+                            (int) DeviceUtils.diskCacheSizeBytes(volleyCacheDir, Constants.TEN_MB));
                     requestQueue = new MoPubRequestQueue(cache, network);
                     sRequestQueue = requestQueue;
                     requestQueue.start();
@@ -190,32 +201,34 @@ public static synchronized void setUserAgentForTesting(String userAgent) {
     }
 
     /**
-     * Set whether to use HTTPS for communication with MoPub ad servers.
+     * Set whether to use HTTP or HTTPS for WebView base urls.
      */
     public static void useHttps(boolean useHttps) {
         sUseHttps = useHttps;
     }
 
-    public static boolean useHttps() {
+    public static boolean shouldUseHttps() {
         return sUseHttps;
     }
 
     /**
-     * Retrieve the scheme that should be used based on {@link #useHttps()}.
+     * Retrieve the scheme that should be used to communicate to the ad server. This should always
+     * return https.
      *
-     * @return "https" if {@link #useHttps()} is true; "http" otherwise.
+     * @return "https"
      */
     public static String getScheme() {
-        return useHttps() ? Constants.HTTPS : Constants.HTTP;
+        return Constants.HTTPS;
     }
 
     /**
      * DSPs are currently not ready for full https creatives. When we flip the switch to go full
-     * https, this should just return {@link #getScheme()}.
+     * https, this should just return https. However, for now, we allow the publisher to use
+     * either http or https. This only affects WebView base urls.
      *
-     * @return "http"
+     * @return "https" if {@link #shouldUseHttps()} is true; "http" otherwise.
      */
     public static String getBaseUrlScheme() {
-        return Constants.HTTP;
+        return shouldUseHttps() ? Constants.HTTPS : Constants.HTTP;
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/PlayServicesUrlRewriter.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/PlayServicesUrlRewriter.java
index 42438bbd..9c4f9faf 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/PlayServicesUrlRewriter.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/PlayServicesUrlRewriter.java
@@ -1,9 +1,11 @@
 package com.mopub.network;
 
-import android.content.Context;
 import android.net.Uri;
 
-import com.mopub.common.GpsHelper;
+import com.mopub.common.ClientMetadata;
+import com.mopub.common.MoPub;
+import com.mopub.common.privacy.AdvertisingId;
+import com.mopub.common.privacy.MoPubIdentifier;
 import com.mopub.volley.toolbox.HurlStack;
 
 /**
@@ -11,17 +13,10 @@
  * when a request is queued for dispatch by the HurlStack in Volley.
  */
 public class PlayServicesUrlRewriter implements HurlStack.UrlRewriter {
-    private static final String IFA_PREFIX = "ifa:";
-
     public static final String UDID_TEMPLATE = "mp_tmpl_advertising_id";
     public static final String DO_NOT_TRACK_TEMPLATE = "mp_tmpl_do_not_track";
 
-    private final String deviceIdentifier;
-    private final Context applicationContext;
-
-    public PlayServicesUrlRewriter(String deviceId, Context context) {
-        deviceIdentifier = deviceId;
-        applicationContext = context.getApplicationContext();
+    public PlayServicesUrlRewriter() {
     }
 
     @Override
@@ -30,22 +25,15 @@ public String rewriteUrl(final String url) {
             return url;
         }
 
-        String prefix = "";
-        GpsHelper.AdvertisingInfo advertisingInfo = new GpsHelper.AdvertisingInfo(deviceIdentifier, false);
-
-        // Attempt to fetch the Google Play Services fields
-        if (GpsHelper.isPlayServicesAvailable(applicationContext)) {
-            // We can do this synchronously because urlRewrite happens in a background thread.
-            GpsHelper.AdvertisingInfo playServicesAdInfo = GpsHelper.fetchAdvertisingInfoSync(applicationContext);
-            if (playServicesAdInfo != null) {
-                prefix = IFA_PREFIX;
-                advertisingInfo = playServicesAdInfo;
-            }
+        ClientMetadata clientMetadata = ClientMetadata.getInstance();
+        if (clientMetadata == null) {
+            return url;
         }
-
-        // Fill in the templates
-        String toReturn = url.replace(UDID_TEMPLATE, Uri.encode(prefix + advertisingInfo.advertisingId));
-        toReturn = toReturn.replace(DO_NOT_TRACK_TEMPLATE, advertisingInfo.limitAdTracking ? "1" : "0");
+        MoPubIdentifier identifier = clientMetadata.getMoPubIdentifier();
+        AdvertisingId info = identifier.getAdvertisingInfo();
+        String toReturn = url.replace(UDID_TEMPLATE,
+                Uri.encode(info.getIdWithPrefix(MoPub.canCollectPersonalInformation())));
+        toReturn = toReturn.replace(DO_NOT_TRACK_TEMPLATE, info.isDoNotTrack() ? "1" : "0");
         return toReturn;
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestQueueHttpStack.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestQueueHttpStack.java
index f2df816c..97110951 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestQueueHttpStack.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestQueueHttpStack.java
@@ -6,10 +6,9 @@
 import com.mopub.common.util.ResponseHeader;
 import com.mopub.volley.AuthFailureError;
 import com.mopub.volley.Request;
+import com.mopub.volley.toolbox.HttpResponse;
 import com.mopub.volley.toolbox.HurlStack;
 
-import org.apache.http.HttpResponse;
-
 import java.io.IOException;
 import java.util.Map;
 import java.util.TreeMap;
@@ -41,14 +40,16 @@ public RequestQueueHttpStack(@NonNull final String userAgent, @Nullable final Ur
     }
 
     @Override
-    public HttpResponse performRequest(@NonNull final Request<?> request,
+    public HttpResponse executeRequest(@NonNull final Request<?> request,
             @Nullable Map<String, String> additionalHeaders) throws IOException, AuthFailureError {
-        if (additionalHeaders == null) {
+        // If the headers map is null or empty, make a new once since Collections.emptyMap()
+        // returns an unmodifiable map.
+        if (additionalHeaders == null || additionalHeaders.isEmpty()) {
             additionalHeaders = new TreeMap<String, String>();
         }
 
         additionalHeaders.put(ResponseHeader.USER_AGENT.getKey(), mUserAgent);
 
-        return super.performRequest(request, additionalHeaders);
+        return super.executeRequest(request, additionalHeaders);
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ScribeBackoffPolicy.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ScribeBackoffPolicy.java
deleted file mode 100644
index 5b5b3732..00000000
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ScribeBackoffPolicy.java
+++ /dev/null
@@ -1,54 +0,0 @@
-package com.mopub.network;
-
-import com.mopub.common.VisibleForTesting;
-import com.mopub.volley.NetworkResponse;
-import com.mopub.volley.NoConnectionError;
-import com.mopub.volley.VolleyError;
-
-/**
- * The backoff policy for making requests to the Scribe service.
- */
-public class ScribeBackoffPolicy extends BackoffPolicy {
-    private static final int DEFAULT_BACKOFF_TIME_MS = 60 * 1000;
-    private static final int MAX_RETRIES = 5;
-    private static final int BACKOFF_MULTIPLIER = 2;
-
-    public ScribeBackoffPolicy() {
-        this(DEFAULT_BACKOFF_TIME_MS, MAX_RETRIES, BACKOFF_MULTIPLIER);
-    }
-
-    @VisibleForTesting
-    ScribeBackoffPolicy(int defaultBackoffTimeMs, int maxRetries, int backoffMultiplier) {
-        mDefaultBackoffTimeMs = defaultBackoffTimeMs;
-        mMaxRetries = maxRetries;
-        mBackoffMultiplier = backoffMultiplier;
-    }
-
-    @Override
-    public void backoff(VolleyError volleyError) throws VolleyError {
-        if (!hasAttemptRemaining()) {
-            throw volleyError;
-        }
-
-        if (volleyError instanceof NoConnectionError) {
-            updateBackoffTime();
-            return;
-        }
-
-        NetworkResponse networkResponse = volleyError.networkResponse;
-        if (networkResponse != null &&
-                (networkResponse.statusCode == 503  || networkResponse.statusCode == 504)) {
-            updateBackoffTime();
-            return;
-        }
-
-        throw volleyError;
-    }
-
-    private void updateBackoffTime() {
-        double multiplier = Math.pow(mBackoffMultiplier, mRetryCount);
-        mBackoffMs = (int) (mDefaultBackoffTimeMs * multiplier);
-        mRetryCount++;
-    }
-}
-
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ScribeRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ScribeRequest.java
deleted file mode 100644
index 50cfc29a..00000000
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ScribeRequest.java
+++ /dev/null
@@ -1,83 +0,0 @@
-package com.mopub.network;
-
-import android.support.annotation.NonNull;
-
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.event.BaseEvent;
-import com.mopub.common.event.EventSerializer;
-import com.mopub.volley.DefaultRetryPolicy;
-import com.mopub.volley.NetworkResponse;
-import com.mopub.volley.Request;
-import com.mopub.volley.Response;
-import com.mopub.volley.toolbox.HttpHeaderParser;
-
-import org.json.JSONArray;
-
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-/**
- * A POST request for logging custom events to the Scribe service.
- */
-public class ScribeRequest extends Request<Void> {
-
-    public interface Listener extends Response.ErrorListener {
-        void onResponse();
-    }
-
-    public interface ScribeRequestFactory extends RequestManager.RequestFactory {
-        ScribeRequest createRequest(ScribeRequest.Listener listener);
-    }
-
-    @NonNull private final List<BaseEvent> mEvents;
-    @NonNull private final EventSerializer mEventSerializer;
-    @NonNull private final ScribeRequest.Listener mListener;
-
-    public ScribeRequest(@NonNull String url,
-            @NonNull List<BaseEvent> events,
-            @NonNull EventSerializer eventSerializer,
-            @NonNull Listener listener) {
-        super(Method.POST, url, listener);
-
-        mEvents = events;
-        mEventSerializer = eventSerializer;
-        mListener = listener;
-
-        setShouldCache(false);
-
-        // This retry policy applies to socket timeouts only
-        setRetryPolicy(new DefaultRetryPolicy());
-    }
-
-    /**
-     * This is method runs on the background thread
-     */
-    @Override
-    protected Map<String,String> getParams() {
-        JSONArray jsonArray = mEventSerializer.serializeAsJson(mEvents);
-        Map<String,String> params = new HashMap<String, String>();
-        params.put("log", jsonArray.toString());
-        return params;
-    }
-
-    @Override
-    protected Response<Void> parseNetworkResponse(NetworkResponse networkResponse) {
-        // NOTE: We never get status codes outside of {[200, 299], 304}. Those errors are sent to the
-        // error listener.
-        return Response.success(null, HttpHeaderParser.parseCacheHeaders(networkResponse));
-    }
-
-    @Override
-    protected void deliverResponse(Void aVoid) {
-        mListener.onResponse();
-    }
-
-    @NonNull
-    @Deprecated
-    @VisibleForTesting
-    public List<BaseEvent> getEvents() {
-        return mEvents;
-    }
-}
-
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ScribeRequestManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ScribeRequestManager.java
deleted file mode 100644
index e1b3fc45..00000000
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ScribeRequestManager.java
+++ /dev/null
@@ -1,59 +0,0 @@
-package com.mopub.network;
-
-import android.os.Looper;
-import android.support.annotation.NonNull;
-
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.volley.Request;
-import com.mopub.volley.VolleyError;
-
-import static com.mopub.network.ScribeRequest.ScribeRequestFactory;
-
-/**
- * Request manager to manage scribe requests. This class implements the specific Scribe
- * request listener.
- */
-public class ScribeRequestManager extends RequestManager<ScribeRequestFactory> implements ScribeRequest.Listener {
-
-    public ScribeRequestManager(final Looper looper) {
-        super(looper);
-    }
-
-    // RequestManager
-    @NonNull
-    @Override
-    Request<?> createRequest() {
-        return mRequestFactory.createRequest(this);
-    }
-
-    // ScribeRequest.Listener
-    @Override
-    public void onResponse() {
-        MoPubLog.d("Successfully scribed events");
-        // Get back to the dedicated event logging thread before touching shared resources
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                clearRequest();
-            }
-        });
-    }
-
-    @Override
-    public void onErrorResponse(final VolleyError volleyError) {
-        // Post back to the dedicated event logging thread before touching shared resources
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    mBackoffPolicy.backoff(volleyError);
-                    makeRequestInternal();
-                } catch (VolleyError e) {
-                    MoPubLog.d("Failed to Scribe events: " + volleyError);
-                    clearRequest();
-                }
-            }
-        });
-    }
-}
-
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
index aa13cdf2..f6a7bf91 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
@@ -6,14 +6,12 @@
 import android.text.TextUtils;
 
 import com.mopub.common.Preconditions;
-import com.mopub.common.event.BaseEvent;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.VastErrorCode;
 import com.mopub.mobileads.VastMacroHelper;
 import com.mopub.mobileads.VastTracker;
 import com.mopub.volley.DefaultRetryPolicy;
 import com.mopub.volley.NetworkResponse;
-import com.mopub.volley.Request;
 import com.mopub.volley.RequestQueue;
 import com.mopub.volley.Response;
 import com.mopub.volley.VolleyError;
@@ -23,7 +21,7 @@
 import java.util.Arrays;
 import java.util.List;
 
-public class TrackingRequest extends Request<Void> {
+public class TrackingRequest extends MoPubRequest<Void> {
 
     // Retrying may cause duplicate impressions
     private static final int ZERO_RETRIES = 0;
@@ -34,8 +32,10 @@
 
     @Nullable private final TrackingRequest.Listener mListener;
 
-    private TrackingRequest(@NonNull final String url, @Nullable final Listener listener) {
-        super(Method.GET, url, listener);
+    private TrackingRequest(@NonNull final Context context,
+            @NonNull final String url,
+            @Nullable final Listener listener) {
+        super(context, url, listener);
         mListener = listener;
         setShouldCache(false);
         setRetryPolicy(new DefaultRetryPolicy(
@@ -98,8 +98,7 @@ public static void makeVastTrackingHttpRequest(
 
     public static void makeTrackingHttpRequest(@Nullable final Iterable<String> urls,
             @Nullable final Context context,
-            @Nullable final Listener listener,
-            final BaseEvent.Name name) {
+            @Nullable final Listener listener) {
         if (urls == null || context == null) {
             return;
         }
@@ -127,43 +126,27 @@ public void onErrorResponse(final VolleyError volleyError) {
                     }
                 }
             };
-            final TrackingRequest trackingRequest = new TrackingRequest(url, internalListener);
+            final TrackingRequest trackingRequest = new TrackingRequest(context, url,
+                    internalListener);
             requestQueue.add(trackingRequest);
         }
     }
 
     public static void makeTrackingHttpRequest(@Nullable final String url,
             @Nullable final Context context) {
-        makeTrackingHttpRequest(url, context, null, null);
-    }
-
-    public static void makeTrackingHttpRequest(@Nullable final String url,
-            @Nullable final Context context, @Nullable Listener listener) {
-        makeTrackingHttpRequest(url, context, listener, null);
-    }
-
-    public static void makeTrackingHttpRequest(@Nullable final String url,
-            @Nullable final Context context, final BaseEvent.Name name) {
-        makeTrackingHttpRequest(url, context, null, name);
+        makeTrackingHttpRequest(url, context, null);
     }
 
     public static void makeTrackingHttpRequest(@Nullable final String url,
             @Nullable final Context context,
-            @Nullable Listener listener,
-            final BaseEvent.Name name) {
+            @Nullable Listener listener) {
         if (url != null) {
-            makeTrackingHttpRequest(Arrays.asList(url), context, listener, name);
+            makeTrackingHttpRequest(Arrays.asList(url), context, listener);
         }
     }
 
     public static void makeTrackingHttpRequest(@Nullable final Iterable<String> urls,
             @Nullable final Context context) {
-        makeTrackingHttpRequest(urls, context, null, null);
-    }
-
-    public static void makeTrackingHttpRequest(@Nullable final Iterable<String> urls,
-            @Nullable final Context context,
-            final BaseEvent.Name name) {
-        makeTrackingHttpRequest(urls, context, null, name);
+        makeTrackingHttpRequest(urls, context, null);
     }
 }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
index fe5a4a0a..94420ecc 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
@@ -309,6 +309,15 @@ public String getKeywords() {
         return mInterstitialView.getKeywords();
     }
 
+    public void setUserDataKeywords(@Nullable final String userDataKeywords) {
+        mInterstitialView.setUserDataKeywords(userDataKeywords);
+    }
+
+    @Nullable
+    public String getUserDataKeywords() {
+        return mInterstitialView.getUserDataKeywords();
+    }
+
     @NonNull
     public Activity getActivity() {
         return mActivity;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
index 8a198b8a..e323a2ac 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
@@ -4,7 +4,6 @@
 import android.support.annotation.NonNull;
 
 import com.mopub.common.DataKeys;
-import com.mopub.common.event.EventDetails;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.nativeads.factories.CustomEventNativeFactory;
 import com.mopub.network.AdResponse;
@@ -34,11 +33,6 @@ public static void loadNativeAd(@NonNull final Context context,
             localExtras.put(DataKeys.JSON_BODY_KEY, adResponse.getJsonBody());
         }
 
-        final EventDetails eventDetails = adResponse.getEventDetails();
-        if (eventDetails != null) {
-            localExtras.put(DataKeys.EVENT_DETAILS, eventDetails);
-        }
-
         localExtras.put(DataKeys.CLICK_TRACKING_URL_KEY, adResponse.getClickTrackingUrl());
 
         // Custom event classes can be developed by any third party and may not be tested.
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNative.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNative.java
index ebb9293c..9fe1ae15 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNative.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNative.java
@@ -24,7 +24,6 @@
 import java.util.Map;
 import java.util.TreeMap;
 
-import static com.mopub.common.GpsHelper.fetchAdvertisingInfoAsync;
 import static com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
 import static com.mopub.nativeads.NativeErrorCode.CONNECTION_ERROR;
 import static com.mopub.nativeads.NativeErrorCode.EMPTY_AD_RESPONSE;
@@ -98,9 +97,6 @@ public void onErrorResponse(@NonNull final VolleyError volleyError) {
                 onAdError(volleyError);
             }
         };
-
-        // warm up cache for google play services info
-        fetchAdvertisingInfoAsync(context, null);
     }
 
     /**
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
index bb9e97b1..e8854584 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
@@ -8,6 +8,7 @@
 import com.mopub.common.AdUrlGenerator;
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.Constants;
+import com.mopub.common.MoPub;
 
 class NativeUrlGenerator extends AdUrlGenerator {
     @Nullable private String mDesiredAssets;
@@ -27,8 +28,12 @@ public NativeUrlGenerator withAdUnitId(final String adUnitId) {
     @NonNull
     NativeUrlGenerator withRequest(@Nullable final RequestParameters requestParameters) {
         if (requestParameters != null) {
+            final boolean canCollectPersonalInformation = MoPub.canCollectPersonalInformation();
+
+            mUserDataKeywords = canCollectPersonalInformation ? requestParameters.getUserDataKeywords() : null;
+            mLocation = canCollectPersonalInformation ? requestParameters.getLocation() : null;
+
             mKeywords = requestParameters.getKeywords();
-            mLocation = requestParameters.getLocation();
             mDesiredAssets = requestParameters.getDesiredAssets();
         }
         return this;
@@ -65,9 +70,4 @@ private void setDesiredAssets() {
             addParam("assets", mDesiredAssets);
         }
     }
-
-    @Override
-    protected void setSdkVersion(String sdkVersion) {
-        addParam("nsv", sdkVersion);
-    }
 }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningRequest.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningRequest.java
index 9446d7a5..631e36fa 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningRequest.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningRequest.java
@@ -1,21 +1,24 @@
 package com.mopub.nativeads;
 
+import android.content.Context;
 import android.support.annotation.NonNull;
 
 import com.mopub.common.VisibleForTesting;
 import com.mopub.network.MoPubNetworkError;
+import com.mopub.network.MoPubRequestUtils;
 import com.mopub.volley.NetworkResponse;
 import com.mopub.volley.Response;
 import com.mopub.volley.VolleyError;
 import com.mopub.volley.toolbox.HttpHeaderParser;
 import com.mopub.volley.toolbox.JsonRequest;
 
-import org.apache.http.HttpStatus;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
 import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
+import java.util.Map;
 
 import static com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
 
@@ -29,13 +32,24 @@
     // Max value to avoid bad integer math calculations. This is 2 ^ 16.
     private static final int MAX_VALUE = 1 << 16;
 
-    public PositioningRequest(final String url,
+    @NonNull private final String mOriginalUrl;
+    @NonNull private final Context mContext;
+
+    public PositioningRequest(@NonNull final Context context,
+            final String url,
             final Response.Listener<MoPubClientPositioning> listener,
             final Response.ErrorListener errorListener) {
-        super(Method.GET, url, null, listener, errorListener);
+        super(MoPubRequestUtils.chooseMethod(url),
+                MoPubRequestUtils.truncateQueryParamsIfPost(url),
+                null,
+                listener,
+                errorListener);
+
+        mOriginalUrl = url;
+        mContext = context.getApplicationContext();
     }
 
-    // This is done just for unit testing visibolity.
+    // This is done just for unit testing visibility.
     @Override
     protected void deliverResponse(final MoPubClientPositioning response) {
         super.deliverResponse(response);
@@ -43,7 +57,7 @@ protected void deliverResponse(final MoPubClientPositioning response) {
 
     @Override
     protected Response<MoPubClientPositioning> parseNetworkResponse(final NetworkResponse response) {
-        if (response.statusCode != HttpStatus.SC_OK) {
+        if (response.statusCode != HttpURLConnection.HTTP_OK) {
             return Response.error(new VolleyError(response));
         }
 
@@ -124,4 +138,22 @@ private void parseRepeatingJson(@NonNull final JSONObject repeatingObject,
         }
         positioning.enableRepeatingPositions(interval);
     }
+
+    @Override
+    protected Map<String, String> getParams() {
+        if (!MoPubRequestUtils.isMoPubRequest(getUrl())) {
+            return null;
+        }
+
+        return MoPubRequestUtils.convertQueryToMap(mContext, mOriginalUrl);
+    }
+
+    @Override
+    public byte[] getBody() {
+        final String body = MoPubRequestUtils.generateBodyFromParams(getParams(), getUrl());
+        if (body == null) {
+            return null;
+        }
+        return body.getBytes();
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
index f9b0fafb..cb654731 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
@@ -51,6 +51,6 @@ private void setAdUnitId(@NonNull String adUnitId) {
     }
 
     private void setSdkVersion(@NonNull String sdkVersion) {
-        addParam("nsv", sdkVersion);
+        addParam("nv", sdkVersion);
     }
 }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/RequestParameters.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/RequestParameters.java
index d6edb69c..bbb2ec59 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/RequestParameters.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/RequestParameters.java
@@ -5,6 +5,8 @@
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
+import com.mopub.common.MoPub;
+
 import java.util.EnumSet;
 
 public class RequestParameters {
@@ -31,11 +33,13 @@ public String toString() {
     }
 
     @Nullable private final String mKeywords;
+    @Nullable private final String mUserDataKeywords;
     @Nullable private final Location mLocation;
     @Nullable private final EnumSet<NativeAdAsset> mDesiredAssets;
 
     public final static class Builder {
         private String keywords;
+        private String userDatakeywords;
         private Location location;
         private EnumSet<NativeAdAsset> desiredAssets;
 
@@ -45,9 +49,15 @@ public final Builder keywords(String keywords) {
             return this;
         }
 
+        @NonNull
+        public final Builder userDataKeywords(String userDataKeywords) {
+            this.userDatakeywords = MoPub.canCollectPersonalInformation() ? userDataKeywords : null;
+            return this;
+        }
+
         @NonNull
         public final Builder location(Location location) {
-            this.location = location;
+            this.location = MoPub.canCollectPersonalInformation() ? location : null;
             return this;
         }
 
@@ -66,8 +76,11 @@ public final RequestParameters build() {
 
     private RequestParameters(@NonNull Builder builder) {
         mKeywords = builder.keywords;
-        mLocation = builder.location;
         mDesiredAssets = builder.desiredAssets;
+
+        final boolean canCollectPersonalInformation = MoPub.canCollectPersonalInformation();
+        mUserDataKeywords = canCollectPersonalInformation ? builder.userDatakeywords : null;
+        mLocation = canCollectPersonalInformation ? builder.location : null;
     }
 
     @Nullable
@@ -75,6 +88,14 @@ public final String getKeywords() {
         return mKeywords;
     }
 
+    @Nullable
+    public final String getUserDataKeywords() {
+        if(!MoPub.canCollectPersonalInformation()) {
+            return null;
+        }
+        return mUserDataKeywords;
+    }
+
     @Nullable
     public final Location getLocation() {
         return mLocation;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ServerPositioningSource.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
index 60f49171..adb73b44 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
@@ -126,7 +126,7 @@ public void loadPositions(@NonNull String adUnitId, @NonNull PositioningListener
     private void requestPositioningInternal() {
         MoPubLog.d("Loading positioning from: " + mRetryUrl);
 
-        mRequest = new PositioningRequest(mRetryUrl, mPositioningListener, mErrorListener);
+        mRequest = new PositioningRequest(mContext, mRetryUrl, mPositioningListener, mErrorListener);
         final RequestQueue requestQueue = Networking.getRequestQueue(mContext);
         requestQueue.add(mRequest);
     }
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
index 1bbdd628..d7d4a135 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
@@ -13,10 +13,6 @@
 import com.mopub.common.CacheService;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
-import com.mopub.common.event.BaseEvent;
-import com.mopub.common.event.Event;
-import com.mopub.common.event.EventDetails;
-import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.logging.MoPubLog;
 
 import org.json.JSONArray;
@@ -124,29 +120,18 @@
      */
     private boolean mIsDirty;
 
-    /**
-     * Used to store metadata around event logging.
-     */
-    @Nullable private final EventDetails mEventDetails;
-
-    /**
-     * Whether or not the event for starting the download has already been fired.
-     */
-    private boolean mHasLoggedDownloadStart;
-
     public HttpDiskCompositeDataSource(@NonNull final Context context,
-            @NonNull final String userAgent, @Nullable final EventDetails eventDetails) {
-        this(context, userAgent, eventDetails, new DefaultHttpDataSource(userAgent, null));
+            @NonNull final String userAgent) {
+        this(context, userAgent, new DefaultHttpDataSource(userAgent, null));
     }
 
     @VisibleForTesting
     HttpDiskCompositeDataSource(@NonNull final Context context,
-            @NonNull final String userAgent, @Nullable final EventDetails eventDetails,
+            @NonNull final String userAgent,
             @NonNull final HttpDataSource httpDataSource) {
         mHttpDataSource = httpDataSource;
         CacheService.initialize(context);
         mIntervals = new TreeSet<IntInterval>();
-        mEventDetails = eventDetails;
     }
 
     @Override
@@ -211,14 +196,6 @@ public long open(@NonNull final DataSpec dataSpec) throws IOException {
                             String.valueOf(mExpectedFileLength).getBytes());
                 }
                 mIsHttpSourceOpen = true;
-                if (!mHasLoggedDownloadStart) {
-                    MoPubEvents.log(Event.createEventFromDetails(
-                            BaseEvent.Name.DOWNLOAD_START,
-                            BaseEvent.Category.NATIVE_VIDEO,
-                            BaseEvent.SamplingRate.NATIVE_VIDEO,
-                            mEventDetails));
-                    mHasLoggedDownloadStart = true;
-                }
             } catch (HttpDataSource.InvalidResponseCodeException e) {
                 // This shouldn't happen anymore, but if we accidentally requested too many bytes
                 // because we already had the bytes before that point, then it's still fine.
@@ -287,14 +264,6 @@ public void close() throws IOException {
             CacheService.putToDiskCache(mSegment + mKey, mCachedBytes);
             addNewInterval(mIntervals, mStartInFile, mDataBlockOffset);
             writeIntervalsToDisk(mIntervals, mKey);
-            if (mIsDirty && mExpectedFileLength != null && getFirstContiguousPointAfter(
-                    0, mIntervals) == mExpectedFileLength) {
-                MoPubEvents.log(Event.createEventFromDetails(
-                        BaseEvent.Name.DOWNLOAD_FINISHED,
-                        BaseEvent.Category.NATIVE_VIDEO,
-                        BaseEvent.SamplingRate.NATIVE_VIDEO,
-                        mEventDetails));
-            }
         }
         mCachedBytes = null;
 
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
index ac405b11..f8d96697 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
@@ -12,10 +12,6 @@
 import com.mopub.common.DataKeys;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
-import com.mopub.common.event.BaseEvent;
-import com.mopub.common.event.Event;
-import com.mopub.common.event.EventDetails;
-import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Utils;
 import com.mopub.mobileads.MraidVideoPlayerActivity;
@@ -40,7 +36,6 @@
 import java.util.Map;
 import java.util.Set;
 
-import static com.mopub.common.DataKeys.EVENT_DETAILS;
 import static com.mopub.common.DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT;
 import static com.mopub.common.DataKeys.IMPRESSION_MIN_VISIBLE_PX;
 import static com.mopub.common.DataKeys.IMPRESSION_VISIBLE_MS;
@@ -66,10 +61,6 @@ protected void loadNativeAd(@NonNull final Context context,
             return;
         }
 
-        final Object eventDetailsObject = localExtras.get(EVENT_DETAILS);
-        final EventDetails eventDetails = eventDetailsObject instanceof EventDetails ?
-                (EventDetails) eventDetailsObject : null;
-
         final VideoResponseHeaders videoResponseHeaders = new VideoResponseHeaders(serverExtras);
         if (!videoResponseHeaders.hasValidHeaders()) {
             customEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
@@ -87,7 +78,7 @@ protected void loadNativeAd(@NonNull final Context context,
 
         final String clickTrackingUrlFromHeader = (String) clickTrackingUrlFromHeaderObject;
         final MoPubVideoNativeAd videoNativeAd = new MoPubVideoNativeAd(context, (JSONObject) json,
-                customEventNativeListener, videoResponseHeaders, eventDetails,
+                customEventNativeListener, videoResponseHeaders,
                 clickTrackingUrlFromHeader);
         try {
             videoNativeAd.loadAd();
@@ -167,7 +158,6 @@ static Parameter from(@NonNull final String name) {
         @Nullable VastVideoConfig mVastVideoConfig;
         @Nullable private MediaLayout mMediaLayout;
         @Nullable private View mRootView;
-        @Nullable private final EventDetails mEventDetails;
 
         private final long mId;
         private boolean mNeedsSeek;
@@ -187,11 +177,10 @@ public MoPubVideoNativeAd(
                 @NonNull final JSONObject jsonObject,
                 @NonNull final CustomEventNativeListener customEventNativeListener,
                 @NonNull final VideoResponseHeaders videoResponseHeaders,
-                @Nullable final EventDetails eventDetails,
                 @NonNull final String clickTrackingUrl) {
             this(context, jsonObject, customEventNativeListener, videoResponseHeaders,
                     new VisibilityTracker(context), new NativeVideoControllerFactory(),
-                    eventDetails, clickTrackingUrl, VastManagerFactory.create(context.getApplicationContext(), false));
+                    clickTrackingUrl, VastManagerFactory.create(context.getApplicationContext(), false));
         }
 
         @VisibleForTesting
@@ -202,7 +191,6 @@ public MoPubVideoNativeAd(
                 @NonNull final VideoResponseHeaders videoResponseHeaders,
                 @NonNull final VisibilityTracker visibilityTracker,
                 @NonNull final NativeVideoControllerFactory nativeVideoControllerFactory,
-                @Nullable final EventDetails eventDetails,
                 @NonNull final String clickTrackingUrl,
                 @NonNull final VastManager vastManager) {
             Preconditions.checkNotNull(context);
@@ -222,8 +210,6 @@ public MoPubVideoNativeAd(
             mNativeVideoControllerFactory = nativeVideoControllerFactory;
             mMoPubClickTrackingUrl = clickTrackingUrl;
 
-            mEventDetails = eventDetails;
-
             mId = Utils.generateUniqueId();
             mNeedsSeek = true;
             mVideoState = VideoState.CREATED;
@@ -277,7 +263,7 @@ void loadAd() throws IllegalArgumentException {
                 public void onImagesCached() {
                     mVastManager.prepareVastVideoConfiguration(getVastVideo(),
                             MoPubVideoNativeAd.this,
-                            mEventDetails == null ? null : mEventDetails.getDspCreativeId(),
+                            null,
                             mContext);
                 }
 
@@ -355,7 +341,7 @@ public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideo
             mVastVideoConfig.setClickThroughUrl(getClickDestinationUrl());
 
             mNativeVideoController = mNativeVideoControllerFactory.createForId(
-                    mId, mContext, visibilityTrackingEvents, mVastVideoConfig, mEventDetails);
+                    mId, mContext, visibilityTrackingEvents, mVastVideoConfig);
 
             mCustomEventNativeListener.onNativeAdLoaded(this);
 
@@ -674,14 +660,6 @@ void applyState(@NonNull final VideoState videoState, boolean transitionToFullSc
                     mVastVideoConfig.handleError(mContext, null, 0);
                     mNativeVideoController.setAppAudioEnabled(false);
                     mMediaLayout.setMode(MediaLayout.Mode.IMAGE);
-                    // Only log the failed to play event when the video has not started
-                    if (previousState != VideoState.PLAYING && previousState != VideoState.PLAYING_MUTED) {
-                        MoPubEvents.log(Event.createEventFromDetails(
-                                BaseEvent.Name.ERROR_FAILED_TO_PLAY,
-                                BaseEvent.Category.NATIVE_VIDEO,
-                                BaseEvent.SamplingRate.NATIVE_VIDEO,
-                                mEventDetails));
-                    }
                     break;
                 case CREATED:
                 case LOADING:
@@ -896,10 +874,9 @@ public void execute() {
         public NativeVideoController createForId(final long id,
                 @NonNull final Context context,
                 @NonNull final List<VisibilityTrackingEvent> visibilityTrackingEvents,
-                @NonNull final VastVideoConfig vastVideoConfig,
-                @Nullable final EventDetails eventDetails) {
+                @NonNull final VastVideoConfig vastVideoConfig) {
             return NativeVideoController.createForId(id, context, visibilityTrackingEvents,
-                    vastVideoConfig, eventDetails);
+                    vastVideoConfig);
         }
     }
 
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
index d2e8f3e0..8a8768f5 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
@@ -23,7 +23,9 @@
 import com.google.android.exoplayer2.Renderer;
 import com.google.android.exoplayer2.Timeline;
 import com.google.android.exoplayer2.audio.MediaCodecAudioRenderer;
+import com.google.android.exoplayer2.extractor.Extractor;
 import com.google.android.exoplayer2.extractor.ExtractorsFactory;
+import com.google.android.exoplayer2.extractor.mp4.Mp4Extractor;
 import com.google.android.exoplayer2.mediacodec.MediaCodecSelector;
 import com.google.android.exoplayer2.source.ExtractorMediaSource;
 import com.google.android.exoplayer2.source.MediaSource;
@@ -31,17 +33,11 @@
 import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
 import com.google.android.exoplayer2.trackselection.TrackSelectionArray;
 import com.google.android.exoplayer2.trackselection.TrackSelector;
+import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.DefaultAllocator;
 import com.google.android.exoplayer2.video.MediaCodecVideoRenderer;
-import com.google.android.exoplayer2.extractor.Extractor;
-import com.google.android.exoplayer2.extractor.mp4.Mp4Extractor;
-import com.google.android.exoplayer2.upstream.DataSource;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
-import com.mopub.common.event.BaseEvent;
-import com.mopub.common.event.Event;
-import com.mopub.common.event.EventDetails;
-import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.RepeatingHandlerRunnable;
 import com.mopub.mobileads.VastTracker;
@@ -97,7 +93,6 @@
     @Nullable private BitmapDrawable mFinalFrame;
     @Nullable private MediaCodecAudioRenderer mAudioRenderer;
     @Nullable private MediaCodecVideoRenderer mVideoRenderer;
-    @Nullable private EventDetails mEventDetails;
 
     private boolean mPlayWhenReady;
     private boolean mAudioEnabled;
@@ -116,10 +111,9 @@
     public static NativeVideoController createForId(final long id,
             @NonNull final Context context,
             @NonNull final List<VisibilityTrackingEvent> visibilityTrackingEvents,
-            @NonNull final VastVideoConfig vastVideoConfig,
-            @Nullable final EventDetails eventDetails) {
+            @NonNull final VastVideoConfig vastVideoConfig) {
         NativeVideoController nvc = new NativeVideoController(context, visibilityTrackingEvents,
-                vastVideoConfig, eventDetails);
+                vastVideoConfig);
         sManagerMap.put(id, nvc);
         return nvc;
     }
@@ -131,10 +125,9 @@ public static NativeVideoController createForId(final long id,
             @NonNull final VastVideoConfig vastVideoConfig,
             @NonNull final NativeVideoProgressRunnable nativeVideoProgressRunnable,
             @NonNull final MoPubExoPlayerFactory moPubExoPlayerFactory,
-            @Nullable final EventDetails eventDetails,
             @NonNull final AudioManager audioManager) {
         NativeVideoController nvc = new NativeVideoController(context, vastVideoConfig,
-                nativeVideoProgressRunnable, moPubExoPlayerFactory, eventDetails, audioManager);
+                nativeVideoProgressRunnable, moPubExoPlayerFactory, audioManager);
         sManagerMap.put(id, nvc);
         return nvc;
     }
@@ -157,15 +150,13 @@ public static NativeVideoController remove(final long id) {
 
     private NativeVideoController(@NonNull final Context context,
             @NonNull final List<VisibilityTrackingEvent> visibilityTrackingEvents,
-            @NonNull final VastVideoConfig vastVideoConfig,
-            @Nullable final EventDetails eventDetails) {
+            @NonNull final VastVideoConfig vastVideoConfig) {
         this(context, vastVideoConfig,
                 new NativeVideoProgressRunnable(context,
                         new Handler(Looper.getMainLooper()),
                         visibilityTrackingEvents,
                         vastVideoConfig),
                 new MoPubExoPlayerFactory(),
-                eventDetails, 
                 (AudioManager) context.getSystemService(Context.AUDIO_SERVICE));
     }
 
@@ -173,7 +164,6 @@ private NativeVideoController(@NonNull final Context context,
             @NonNull final VastVideoConfig vastVideoConfig,
             @NonNull final NativeVideoProgressRunnable nativeVideoProgressRunnable,
             @NonNull final MoPubExoPlayerFactory moPubExoPlayerFactory,
-            @Nullable final EventDetails eventDetails,
             @NonNull final AudioManager audioManager) {
         Preconditions.checkNotNull(context);
         Preconditions.checkNotNull(vastVideoConfig);
@@ -185,7 +175,6 @@ private NativeVideoController(@NonNull final Context context,
         mVastVideoConfig = vastVideoConfig;
         mNativeVideoProgressRunnable = nativeVideoProgressRunnable;
         mMoPubExoPlayerFactory = moPubExoPlayerFactory;
-        mEventDetails = eventDetails;
         mAudioManager = audioManager;
     }
 
@@ -320,24 +309,6 @@ public void onPlayerStateChanged(final boolean playWhenReady, final int newState
             mNativeVideoProgressRunnable.requestStop();
         }
 
-        if (mPreviousExoPlayerState == ExoPlayer.STATE_READY && newState == ExoPlayer.STATE_BUFFERING) {
-            MoPubEvents.log(Event.createEventFromDetails(
-                    BaseEvent.Name.DOWNLOAD_BUFFERING,
-                    BaseEvent.Category.NATIVE_VIDEO,
-                    BaseEvent.SamplingRate.NATIVE_VIDEO,
-                    mEventDetails));
-        }
-
-        if (mExoPlayerStateStartedFromIdle &&
-                mPreviousExoPlayerState == ExoPlayer.STATE_BUFFERING &&
-                newState == ExoPlayer.STATE_READY) {
-            MoPubEvents.log(Event.createEventFromDetails(
-                    BaseEvent.Name.DOWNLOAD_VIDEO_READY,
-                    BaseEvent.Category.NATIVE_VIDEO,
-                    BaseEvent.SamplingRate.NATIVE_VIDEO,
-                    mEventDetails));
-        }
-
         mPreviousExoPlayerState = newState;
         if (newState == ExoPlayer.STATE_READY) {
             mExoPlayerStateStartedFromIdle = false;
@@ -373,12 +344,6 @@ public void onPlayerError(ExoPlaybackException e) {
             return;
         }
 
-        MoPubEvents.log(Event.createEventFromDetails(
-                BaseEvent.Name.ERROR_DURING_PLAYBACK,
-                BaseEvent.Category.NATIVE_VIDEO,
-                BaseEvent.SamplingRate.NATIVE_VIDEO,
-                mEventDetails));
-
         mListener.onError(e);
         mNativeVideoProgressRunnable.requestStop();
     }
@@ -445,7 +410,7 @@ private void preparePlayer() {
             final DataSource.Factory dataSourceFactory = new DataSource.Factory() {
                 @Override
                 public DataSource createDataSource() {
-                    return new HttpDiskCompositeDataSource(mContext, "exo_demo", mEventDetails);
+                    return new HttpDiskCompositeDataSource(mContext, "exo_demo");
                 }
             };
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
index 73b1d9ed..bfb8edf2 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
@@ -17,6 +17,7 @@
 import com.mopub.common.Constants;
 import com.mopub.common.DataKeys;
 import com.mopub.common.MediationSettings;
+import com.mopub.common.MoPub;
 import com.mopub.common.MoPubReward;
 import com.mopub.common.Preconditions;
 import com.mopub.common.SharedPreferencesHelper;
@@ -107,6 +108,7 @@ public void onErrorResponse(final VolleyError volleyError) {
 
     public static final class RequestParameters {
         @Nullable public final String mKeywords;
+        @Nullable public final String mUserDataKeywords;
         @Nullable public final Location mLocation;
         @Nullable public final String mCustomerId;
 
@@ -114,16 +116,28 @@ public RequestParameters(@Nullable final String keywords) {
             this(keywords, null);
         }
 
+        public RequestParameters(@Nullable final String keywords, @Nullable final String userDataKeywords) {
+            this(keywords, userDataKeywords,null);
+        }
+
         public RequestParameters(@Nullable final String keywords,
-                @Nullable final Location location) {
-            this(keywords, location, null);
+                                 @Nullable final String userDataKeywords,
+                                 @Nullable final Location location) {
+            this(keywords, userDataKeywords, location, null);
         }
 
-        public RequestParameters(@Nullable final String keywords, @Nullable final Location location,
-                @Nullable final String customerId) {
+        public RequestParameters(@Nullable final String keywords,
+                                 @Nullable final String userDataKeywords,
+                                 @Nullable final Location location,
+                                 @Nullable final String customerId) {
             mKeywords = keywords;
-            mLocation = location;
             mCustomerId = customerId;
+
+            // Only add userDataKeywords and location to RequestParameters if we are allowed to collect
+            // personal information from a user
+            final boolean canCollectPersonalInformation = MoPub.canCollectPersonalInformation();
+            mUserDataKeywords = canCollectPersonalInformation ? userDataKeywords: null;
+            mLocation = canCollectPersonalInformation ? location : null;
         }
     }
 
@@ -297,8 +311,9 @@ public static void setVideoListener(@Nullable MoPubRewardedVideoListener listene
      * method will not make a new request if there is already a video loading for this adUnitId.
      *
      * @param adUnitId MoPub adUnitId String
-     * @param requestParameters Optional RequestParameters object containing optional keywords,
-     *                          optional location value, and optional customer id
+     * @param requestParameters Optional RequestParameters object containing optional keywords
+     *                          Optional RequestParameters object containing optional user data keywords
+     *                          optional location value, and optional customer id.
      * @param mediationSettings Optional instance-level MediationSettings to associate with the
      *                          above adUnitId.
      */
@@ -350,6 +365,8 @@ public void run() {
         final AdUrlGenerator urlGenerator = new WebViewAdUrlGenerator(sInstance.mContext, false);
         final String adUrlString = urlGenerator.withAdUnitId(adUnitId)
                 .withKeywords(requestParameters == null ? null : requestParameters.mKeywords)
+                .withUserDataKeywords((requestParameters == null ||
+                        !MoPub.canCollectPersonalInformation()) ? null : requestParameters.mUserDataKeywords)
                 .withLocation(requestParameters == null ? null : requestParameters.mLocation)
                 .generateUrlString(Constants.HOST);
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
index 17a641e8..6b7c7fcd 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
@@ -3,12 +3,16 @@
 import android.app.Activity;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.text.TextUtils;
 
 import com.mopub.common.MediationSettings;
 import com.mopub.common.MoPubReward;
 import com.mopub.common.Preconditions;
+import com.mopub.common.SdkConfiguration;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.ReflectionTarget;
 
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
 
@@ -19,7 +23,7 @@
 public class MoPubRewardedVideos {
 
     @ReflectionTarget
-    public static void initializeRewardedVideo(@NonNull Activity activity,
+    private static void initializeRewardedVideo(@NonNull Activity activity,
             MediationSettings... mediationSettings) {
         Preconditions.checkNotNull(activity);
 
@@ -27,7 +31,7 @@ public static void initializeRewardedVideo(@NonNull Activity activity,
     }
 
     @ReflectionTarget
-    public static void initializeRewardedVideo(@NonNull Activity activity,
+    private static void initializeRewardedVideo(@NonNull Activity activity,
             @NonNull List<Class<? extends CustomEventRewardedVideo>> networksToInit,
             MediationSettings... mediationSettings) {
         Preconditions.checkNotNull(activity);
@@ -37,6 +41,43 @@ public static void initializeRewardedVideo(@NonNull Activity activity,
         MoPubRewardedVideoManager.initNetworks(activity, networksToInit);
     }
 
+    /**
+     * Use MoPub#initializeSdk instead.
+     */
+    @ReflectionTarget
+    @SuppressWarnings("unchecked")
+    private static void initializeRewardedVideo(@NonNull final Activity activity,
+            @NonNull final SdkConfiguration sdkConfiguration) {
+        Preconditions.checkNotNull(activity);
+        Preconditions.checkNotNull(sdkConfiguration);
+
+        final List<String> networksToInit = sdkConfiguration.getNetworksToInit();
+        final List<Class<? extends CustomEventRewardedVideo>> classList = new ArrayList<>();
+        if (networksToInit != null) {
+            for (final String networkClassName : networksToInit) {
+                if (TextUtils.isEmpty(networkClassName)) {
+                    continue;
+                }
+                try {
+                    final Class networkClass = Class.forName(networkClassName);
+                    classList.add(networkClass.asSubclass(CustomEventRewardedVideo.class));
+                } catch (ClassNotFoundException e) {
+                    MoPubLog.w("Ignoring unknown class name " + networkClassName);
+                } catch (ClassCastException e) {
+                    MoPubLog.w(
+                            "Unable to cast " + networkClassName +
+                                    " to Class<? extends CustomEventRewardedVideo>.");
+                }
+            }
+        }
+
+        if (!classList.isEmpty()) {
+            initializeRewardedVideo(activity, classList, sdkConfiguration.getMediationSettings());
+        } else {
+            initializeRewardedVideo(activity, sdkConfiguration.getMediationSettings());
+        }
+    }
+
     @ReflectionTarget
     public static void setRewardedVideoListener(@Nullable MoPubRewardedVideoListener listener) {
         MoPubRewardedVideoManager.setVideoListener(listener);
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java
index 50f10267..c9ab5b46 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java
@@ -1,9 +1,10 @@
 package com.mopub.mobileads;
 
+import android.content.Context;
 import android.support.annotation.NonNull;
 
+import com.mopub.network.MoPubRequest;
 import com.mopub.volley.NetworkResponse;
-import com.mopub.volley.Request;
 import com.mopub.volley.Response;
 import com.mopub.volley.RetryPolicy;
 import com.mopub.volley.toolbox.HttpHeaderParser;
@@ -12,7 +13,7 @@
  * The actual class making the video completion request. Since we actually only care about the
  * status code of the request, that's the only thing that is delivered.
  */
-public class RewardedVideoCompletionRequest extends Request<Integer> {
+public class RewardedVideoCompletionRequest extends MoPubRequest<Integer> {
 
     public interface RewardedVideoCompletionRequestListener extends Response.ErrorListener {
         void onResponse(Integer response);
@@ -20,10 +21,11 @@
 
     @NonNull final RewardedVideoCompletionRequestListener mListener;
 
-    public RewardedVideoCompletionRequest(@NonNull final String url,
+    public RewardedVideoCompletionRequest(@NonNull final Context context,
+            @NonNull final String url,
             @NonNull final RetryPolicy retryPolicy,
             @NonNull final RewardedVideoCompletionRequestListener listener) {
-        super(Method.GET, url, listener);
+        super(context, url, listener);
         setShouldCache(false);
         setRetryPolicy(retryPolicy);
         mListener = listener;
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
index a046e41e..021b4532 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
@@ -46,6 +46,7 @@
     @NonNull private final String mUrl;
     @NonNull private final Handler mHandler;
     @NonNull private final RequestQueue mRequestQueue;
+    @NonNull private final Context mContext;
     private int mRetryCount;
     private volatile boolean mShouldStop;
 
@@ -79,6 +80,7 @@
         mRetryCount = 0;
         mHandler = handler;
         mRequestQueue = Networking.getRequestQueue(context);
+        mContext = context.getApplicationContext();
     }
 
     void makeRewardedVideoCompletionRequest() {
@@ -89,7 +91,7 @@ void makeRewardedVideoCompletionRequest() {
         }
 
         final RewardedVideoCompletionRequest rewardedVideoCompletionRequest =
-                new RewardedVideoCompletionRequest(mUrl,
+                new RewardedVideoCompletionRequest(mContext, mUrl,
                         new DefaultRetryPolicy(getTimeout(mRetryCount) - REQUEST_TIMEOUT_DELAY,
                                 0, 0f), this);
         rewardedVideoCompletionRequest.setTag(mUrl);
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index bc9e05c3..b987d831 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -11,7 +11,7 @@ repositories {
 }
 
 project.group = 'com.mopub'
-project.version = '4.20.0'
+project.version = '5.0.0'
 
 android {
     compileSdkVersion 26
@@ -20,7 +20,7 @@ android {
     useLibrary 'org.apache.http.legacy'
 
     defaultConfig {
-        versionCode 58
+        versionCode 59
         versionName version
         minSdkVersion 16
         targetSdkVersion 26
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
index 636753a9..47005228 100644
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=4.20.0+kit
+fabric-version=5.0.0+kit
 fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java b/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java
index 75d415c2..ea9e121b 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java
@@ -1,16 +1,21 @@
 package com.mopub.common;
 
+import android.app.Activity;
 import android.os.Build;
 
+import com.mopub.common.privacy.MoPubIdentifier;
+import com.mopub.common.privacy.MoPubIdentifierTest;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.test.support.TestDateAndTime;
 import com.mopub.mobileads.BuildConfig;
 import com.mopub.network.AdResponse;
 
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
+import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
 import java.text.SimpleDateFormat;
@@ -24,21 +29,30 @@
 @Config(constants = BuildConfig.class)
 public class AdReportTest {
 
-    public AdReport subject;
     @Mock
-    ClientMetadata mockClientMetadata;
+    private ClientMetadata mockClientMetadata;
     @Mock
-    AdResponse mockAdResponse;
+    private AdResponse mockAdResponse;
+
     private Date now;
+    private Activity context;
+    public AdReport subject;
 
     @Before
-    public void setup() {
+    public void setup() throws Exception {
+        context = Robolectric.buildActivity(Activity.class).create().get();
         now = new Date();
         TestDateAndTime.getInstance().setNow(now);
+        MoPubIdentifierTest.writeAdvertisingInfoToSharedPreferences(context, true);
+    }
+
+    @After
+    public void tearDown(){
+        MoPubIdentifierTest.clearPreferences(context);
     }
 
     @Test
-    public void testToString_shouldProperlyConstructParametersTextFile() throws Exception {
+    public void testToString_shouldProperlyConstructParametersTextFile() {
         String expectedParameters =
                 "sdk_version : 1.15.2.2\n" +
                         "creative_id : \n" +
@@ -46,7 +60,7 @@ public void testToString_shouldProperlyConstructParametersTextFile() throws Exce
                         "device_model : android\n" +
                         "ad_unit_id : testAdUnit\n" +
                         "device_locale : en_US\n" +
-                        "device_id : UDID\n" +
+                        "device_id : "+MoPubIdentifierTest.TEST_MOPUB_ID+"\n" +
                         "network_type : unknown\n" +
                         "platform : android\n" +
                         "timestamp : " + getCurrentDateTime() + "\n" +
@@ -57,9 +71,9 @@ public void testToString_shouldProperlyConstructParametersTextFile() throws Exce
         stub(mockAdResponse.getDspCreativeId()).toReturn("");
         stub(mockClientMetadata.getDeviceModel()).toReturn("android");
         stub(mockClientMetadata.getDeviceLocale()).toReturn(Locale.US);
-        stub(mockClientMetadata.getDeviceId()).toReturn("UDID");
-        stub(mockAdResponse.getNetworkType()).toReturn("unknown");
+        stub(mockClientMetadata.getMoPubIdentifier()).toReturn(new MoPubIdentifier(context));
 
+        stub(mockAdResponse.getNetworkType()).toReturn("unknown");
         stub(mockAdResponse.getTimestamp()).toReturn(now.getTime());
         stub(mockAdResponse.getAdType()).toReturn("interstitial");
         stub(mockAdResponse.getWidth()).toReturn(480);
@@ -70,7 +84,7 @@ public void testToString_shouldProperlyConstructParametersTextFile() throws Exce
     }
 
     @Test
-    public void constructor_shouldHandleInvalidAdConfigurationValues() throws Exception {
+    public void constructor_shouldHandleInvalidAdConfigurationValues() {
         String expectedParameters =
                 "sdk_version : null\n" +
                         "creative_id : null\n" +
@@ -78,7 +92,7 @@ public void constructor_shouldHandleInvalidAdConfigurationValues() throws Except
                         "device_model : null\n" +
                         "ad_unit_id : testAdUnit\n" +
                         "device_locale : null\n" +
-                        "device_id : null\n" +
+                        "device_id : "+MoPubIdentifierTest.TEST_MOPUB_ID+"\n" +
                         "network_type : null\n" +
                         "platform : android\n" +
                         "timestamp : null" + "\n" +
@@ -88,8 +102,8 @@ public void constructor_shouldHandleInvalidAdConfigurationValues() throws Except
         stub(mockClientMetadata.getSdkVersion()).toReturn(null);
         stub(mockAdResponse.getDspCreativeId()).toReturn(null);
         stub(mockClientMetadata.getDeviceLocale()).toReturn(null);
-        stub(mockClientMetadata.getDeviceId()).toReturn(null);
         stub(mockAdResponse.getNetworkType()).toReturn(null);
+        stub(mockClientMetadata.getMoPubIdentifier()).toReturn(new MoPubIdentifier(context));
 
         stub(mockAdResponse.getTimestamp()).toReturn(-1L);
         stub(mockAdResponse.getAdType()).toReturn(null);
@@ -104,4 +118,4 @@ private String getCurrentDateTime() {
         SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yy hh:mm:ss a z", Locale.US);
         return dateFormat.format(now);
     }
-}
\ No newline at end of file
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/AdvancedBiddingTokensTest.java b/mopub-sdk/src/test/java/com/mopub/common/AdvancedBiddingTokensTest.java
new file mode 100644
index 00000000..9aa48037
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/AdvancedBiddingTokensTest.java
@@ -0,0 +1,77 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class AdvancedBiddingTokensTest {
+
+    private Context context;
+    private AdvancedBiddingTokens subject;
+    private SdkInitializationListener mockInitializationListener;
+
+    @Before
+    public void setup() {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        mockInitializationListener = mock(SdkInitializationListenerMockClass.class);
+        subject = new AdvancedBiddingTokens(mockInitializationListener);
+
+    }
+
+    @Test
+    public void addAdvancedBidders_getTokensAsJsonString_withAdvancedBiddingClass_shouldAddOneMoPubAdvancedBidder() throws Exception {
+        List<Class<? extends MoPubAdvancedBidder>> list = new ArrayList<>();
+        list.add(AdvancedBiddingTokensAdvancedBidder.class);
+
+        subject.addAdvancedBidders(list);
+
+        assertThat(subject.getTokensAsJsonString(context)).isEqualTo(
+                "{\"AdvancedBiddingTokensTest\":{\"token\":\"AdvancedBiddingTokensToken\"}}");
+        verify(mockInitializationListener).onInitializationFinished();
+    }
+
+    @Test
+    public void addAdvancedBidder_getTokensAsJsonString_withNoAdvancedBidders_shouldReturnNull() throws Exception {
+        List<Class<? extends MoPubAdvancedBidder>> list = new ArrayList<>();
+
+        subject.addAdvancedBidders(list);
+
+        assertThat(subject.getTokensAsJsonString(context)).isNull();
+        verify(mockInitializationListener).onInitializationFinished();
+    }
+
+    private static class AdvancedBiddingTokensAdvancedBidder implements MoPubAdvancedBidder {
+
+        @Override
+        public String getToken(final Context context) {
+            return "AdvancedBiddingTokensToken";
+        }
+
+        @Override
+        public String getCreativeNetworkName() {
+            return "AdvancedBiddingTokensTest";
+        }
+    }
+
+    // Creating extra class to prevent roboelectric cache conflict with
+    // MoPub.initializeSdk_withCallbackSet_shouldCallCallback
+    private abstract class SdkInitializationListenerMockClass implements SdkInitializationListener{};
+
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java b/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
index 9f1ef0b6..45e8ae8b 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
@@ -6,9 +6,12 @@
 import android.provider.Settings;
 import android.telephony.TelephonyManager;
 
+import com.mopub.common.privacy.MoPubIdentifierTest;
+import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
+import com.mopub.common.util.Reflection;
 
 import org.junit.After;
 import org.junit.Before;
@@ -21,14 +24,17 @@
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class,
         shadows = {MoPubShadowTelephonyManager.class})
 public class ClientMetadataTest {
 
-    public Activity activityContext;
+    private Activity activityContext;
     private MoPubShadowTelephonyManager shadowTelephonyManager;
+    private PersonalInfoManager mockPersonalInfoManager;
 
     @Before
     public void setUp() throws Exception {
@@ -36,10 +42,13 @@ public void setUp() throws Exception {
         Shadows.shadowOf(activityContext).grantPermissions(ACCESS_NETWORK_STATE);
         shadowTelephonyManager = (MoPubShadowTelephonyManager)
                 Shadows.shadowOf((TelephonyManager) activityContext.getSystemService(Context.TELEPHONY_SERVICE));
+        mockPersonalInfoManager = mock(PersonalInfoManager.class);
+        MoPubIdentifierTest.writeAdvertisingInfoToSharedPreferences(activityContext, false);
     }
 
     @After
-    public void tearDown() throws Exception {
+    public void tearDown() {
+        MoPubIdentifierTest.clearPreferences(activityContext);
         ContentResolver resolver = RuntimeEnvironment.application.getContentResolver();
         Settings.Secure.putString(resolver, "limit_ad_tracking", null);
         Settings.Secure.putString(resolver, "advertising_id", null);
@@ -67,78 +76,42 @@ public void getWithoutContextAfterInit_shouldReturnInstance() {
     }
 
     @Test
-    public void testCachedData_shouldBeAvailable() {
+    public void testCachedData_shouldBeAvailable() throws Exception {
         shadowTelephonyManager.setNetworkOperatorName("testNetworkOperatorName");
         shadowTelephonyManager.setNetworkOperator("testNetworkOperator");
         shadowTelephonyManager.setNetworkCountryIso("1");
         shadowTelephonyManager.setSimCountryIso("1");
 
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+            .setStatic(MoPub.class)
+            .setAccessible()
+            .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+            .execute();
+
         final ClientMetadata clientMetadata = ClientMetadata.getInstance(activityContext);
         // Telephony manager data.
         assertThat(clientMetadata.getNetworkOperatorForUrl()).isEqualTo("testNetworkOperator");
         assertThat(clientMetadata.getNetworkOperatorName()).isEqualTo("testNetworkOperatorName");
         assertThat(clientMetadata.getIsoCountryCode()).isEqualTo("1");
-
-        // Other cached data.
-        assertThat(clientMetadata.getDeviceId()).isNotNull().isNotEmpty();
-    }
-
-    @Test
-    public void constructor_onAmazonDevice_shouldSetAmazonAdvertisingInfo() {
-        ContentResolver resolver = RuntimeEnvironment.application.getContentResolver();
-        Settings.Secure.putInt(resolver, "limit_ad_tracking", 1);
-        Settings.Secure.putString(resolver, "advertising_id", "this-is-an-ifa");
-
-        final ClientMetadata clientMetadata = ClientMetadata.getInstance(activityContext);
-
-        assertThat(clientMetadata.getDeviceId()).isEqualTo("ifa:this-is-an-ifa");
-        assertThat(clientMetadata.isDoNotTrackSet()).isTrue();
-        assertThat(clientMetadata.isAdvertisingInfoSet()).isTrue();
-    }
-
-    @Test
-    public void constructor_onNonAmazonDevice_shouldSetSha() {
-        final ClientMetadata clientMetadata = ClientMetadata.getInstance(activityContext);
-
-        assertThat(clientMetadata.getDeviceId()).startsWith("sha:");
-        assertThat(clientMetadata.isDoNotTrackSet()).isFalse();
-        assertThat(clientMetadata.isAdvertisingInfoSet()).isFalse();
-    }
-
-    @Test
-    public void constructor_onAmazonDevice_withoutLimitAdTracking_shouldSetSha() {
-        ContentResolver resolver = RuntimeEnvironment.application.getContentResolver();
-        Settings.Secure.putString(resolver, "advertising_id", "this-is-an-ifa");
-
-        final ClientMetadata clientMetadata = ClientMetadata.getInstance(activityContext);
-
-        assertThat(clientMetadata.getDeviceId()).startsWith("sha:");
-        assertThat(clientMetadata.isDoNotTrackSet()).isFalse();
-        assertThat(clientMetadata.isAdvertisingInfoSet()).isFalse();
     }
 
     @Test
-    public void constructor_onAmazonDevice_withoutAdvertisingId_shouldSetSha() {
-        ContentResolver resolver = RuntimeEnvironment.application.getContentResolver();
-        Settings.Secure.putInt(resolver, "limit_ad_tracking", 1);
-
-        final ClientMetadata clientMetadata = ClientMetadata.getInstance(activityContext);
-
-        assertThat(clientMetadata.getDeviceId()).startsWith("sha:");
-        assertThat(clientMetadata.isDoNotTrackSet()).isFalse();
-        assertThat(clientMetadata.isAdvertisingInfoSet()).isFalse();
-    }
+    public void testCachedData_shouldNotBeAvailableWhenConsentIsFalse() throws Exception {
+        shadowTelephonyManager.setNetworkOperatorName("testNetworkOperatorName");
+        shadowTelephonyManager.setNetworkOperator("testNetworkOperator");
+        shadowTelephonyManager.setNetworkCountryIso("1");
+        shadowTelephonyManager.setSimCountryIso("1");
 
-    @Test
-    public void constructor_onAmazonDevice_withEmptyAdvertisingId_shouldSetSha() {
-        ContentResolver resolver = RuntimeEnvironment.application.getContentResolver();
-        Settings.Secure.putInt(resolver, "limit_ad_tracking", 1);
-        Settings.Secure.putString(resolver, "advertising_id", "");
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
 
         final ClientMetadata clientMetadata = ClientMetadata.getInstance(activityContext);
-
-        assertThat(clientMetadata.getDeviceId()).startsWith("sha:");
-        assertThat(clientMetadata.isDoNotTrackSet()).isFalse();
-        assertThat(clientMetadata.isAdvertisingInfoSet()).isFalse();
+        // Telephony manager data.
+        assertThat(clientMetadata.getIsoCountryCode()).isEqualTo("");
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/DownloadResponseTest.java b/mopub-sdk/src/test/java/com/mopub/common/DownloadResponseTest.java
deleted file mode 100644
index 93256457..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/DownloadResponseTest.java
+++ /dev/null
@@ -1,72 +0,0 @@
-package com.mopub.common;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.ResponseHeader;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-
-import org.apache.http.HttpResponse;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import java.util.Locale;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class DownloadResponseTest {
-
-    DownloadResponse subject;
-    TestHttpResponseWithHeaders testHttpResponse;
-
-    @Before
-    public void setup() throws Exception {
-        testHttpResponse = new TestHttpResponseWithHeaders(200, "abcde".getBytes());
-        testHttpResponse.addHeader(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "testCustomEvent");
-        testHttpResponse.addHeader(ResponseHeader.CLICK_TRACKING_URL.getKey().toLowerCase(Locale.US), "https://example.com/");
-        testHttpResponse.addHeader(ResponseHeader.FAIL_URL.getKey().toUpperCase(Locale.US), "https://mopub.com/");
-        subject = new DownloadResponse(testHttpResponse);
-    }
-
-    @Test
-    public void constructor_withNullHttpEntity_shouldNotThrowNullPointerException() throws Exception {
-        HttpResponse mockHttpResponse = mock(HttpResponse.class);
-        when(mockHttpResponse.getEntity()).thenReturn(null);
-        when(mockHttpResponse.getStatusLine()).thenReturn(testHttpResponse.new TestStatusLine());
-
-        DownloadResponse downloadResponse = new DownloadResponse(mockHttpResponse);
-        assertThat(downloadResponse.getContentLength()).isEqualTo(0);
-        assertThat(downloadResponse.getByteArray()).isEmpty();
-    }
-
-    @Test
-    public void testGetByteArray() throws Exception {
-        assertArrayEquals("abcde".getBytes(), subject.getByteArray());
-    }
-
-    @Test
-    public void testGetStatusCode() throws Exception {
-        assertEquals(200, subject.getStatusCode());
-    }
-
-    @Test
-    public void testGetContentLength() throws Exception {
-        assertEquals("abcde".getBytes().length, subject.getContentLength());
-    }
-
-    @Test
-    public void testGetFirstHeader_caseInsensitive() throws Exception {
-        assertEquals("testCustomEvent", subject.getFirstHeader(ResponseHeader.CUSTOM_EVENT_NAME));
-        assertEquals("https://example.com/", subject.getFirstHeader(ResponseHeader.CLICK_TRACKING_URL));
-        assertEquals("https://mopub.com/", subject.getFirstHeader(ResponseHeader.FAIL_URL));
-        assertNull(subject.getFirstHeader(ResponseHeader.CUSTOM_EVENT_DATA));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
index a54830ea..9d114c35 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
@@ -119,114 +119,6 @@ public void fetchAdvertisingInfoAsync_whenGooglePlayServicesIsLinked_shouldInvok
         assertThat(gpsHelperListenerCallbackLooper).isEqualTo(Looper.getMainLooper());
     }
 
-    @Test
-    public void fetchAdvertisingInfoAsync_whenGooglePlayServicesIsLinked_shouldPopulateClientMetadata() throws Exception {
-        verifyCleanClientMetadata(context);
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(
-                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE,
-                adInfo,
-                adInfo.mAdId,
-                adInfo.mLimitAdTrackingEnabled
-        );
-
-        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
-        safeAcquireSemaphore();
-        verifyClientMetadata(context, adInfo);
-    }
-
-    @Test
-    public void fetchAdvertisingInfoAsync_whenReflectedMethodCallThrows_shouldNotPopulateClientMetadata() throws Exception {
-        verifyCleanClientMetadata(context);
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenThrow(new Exception());
-
-        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
-        safeAcquireSemaphore();
-        verifyCleanClientMetadata(context);
-    }
-
-    @Test
-    public void fetchAdvertisingInfoAsync_whenReflectedMethodCallReturnsNull_shouldNotPopulateClientMetadata() throws Exception {
-        verifyCleanClientMetadata(context);
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(null);
-
-        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
-        safeAcquireSemaphore();
-        verifyCleanClientMetadata(context);
-    }
-
-    @Test
-    public void fetchAdvertisingInfoAsync_whenGooglePlayServicesIsLinkedAndClientMetadataIsClean_shouldPopulateClientMetadata() throws Exception {
-        verifyCleanClientMetadata(context);
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(
-                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE,
-                adInfo,
-                adInfo.mAdId,
-                adInfo.mLimitAdTrackingEnabled
-        );
-
-        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
-        safeAcquireSemaphore();
-        verifyClientMetadata(context, adInfo);
-    }
-
-    @Test
-    public void fetchAdvertisingInfoAsync_whenGooglePlayServicesLinkedAndClientMetadataIsPopulated_shouldRePopulateClientMetadata() throws Exception {
-        verifyCleanClientMetadata(context);
-        populateAndVerifyClientMetadata(context, adInfo);
-        adInfo.mLimitAdTrackingEnabled = false;
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(
-                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE,
-                adInfo,
-                adInfo.mAdId,
-                adInfo.mLimitAdTrackingEnabled
-        );
-
-        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
-        safeAcquireSemaphore();
-        verifyClientMetadata(context, adInfo);
-    }
-
-    @Test
-    public void fetchAdvertisingInfoAsync_whenGooglePlayServicesIsNotLinked_shouldNotPopulateClientMetadata() throws Exception {
-        verifyCleanClientMetadata(context);
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(
-                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE + 1
-        );
-
-        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
-        safeAcquireSemaphore();
-        verifyCleanClientMetadata(context);
-    }
-
-    @Test
-    public void isClientMetadataPopulated_whenContainsAdvertisingIdKeyAndIsLimitAdTrackingEnabledKey_shouldReturnTrue() throws Exception {
-        verifyCleanClientMetadata(context);
-        populateAndVerifyClientMetadata(context, adInfo);
-        assertThat(GpsHelper.isClientMetadataPopulated(context)).isTrue();
-    }
-
-    @Test
-    public void isClientMetadataPopulated_whenClean_shouldReturnFalse() throws Exception {
-        verifyCleanClientMetadata(context);
-        assertThat(GpsHelper.isClientMetadataPopulated(context)).isFalse();
-    }
-
-    @Test
-    public void updateClientMetadata_whenPassingInValidAdInfoObject_shouldUpdateClientMetadata() throws Exception {
-        // Use the real MethodBuilderFactory for this test, not the mock one
-        // Most mocks are set by default in SdkTestRunner setup
-        MethodBuilderFactory.setInstance(new MethodBuilderFactory());
-        verifyCleanClientMetadata(context);
-        GpsHelper.updateClientMetadata(context, adInfo);
-        verifyClientMetadata(context, adInfo);
-    }
-
     @Test
     public void reflectedGetIsLimitAdTrackingEnabled_whenIsLimitAdTrackingEnabledIsSet_shouldReturnIsLimitAdTrackingEnabled() throws Exception {
         MethodBuilderFactory.setInstance(new MethodBuilderFactory());
@@ -290,27 +182,10 @@ public void isLimitAdTrackingEnabled_whenGooglePlayServicesIsNotLinked_shouldRet
         assertThat(GpsHelper.isLimitAdTrackingEnabled(context)).isFalse();
     }
 
-    static public void populateAndVerifyClientMetadata(Context context, TestAdInfo adInfo) {
-        ClientMetadata clientMetadata = ClientMetadata.getInstance(context);
-        clientMetadata.setAdvertisingInfo(adInfo.getId(), adInfo.isLimitAdTrackingEnabled());
-        verifyClientMetadata(context, adInfo);
-    }
-
     private void safeAcquireSemaphore() throws Exception {
         Robolectric.getBackgroundThreadScheduler().advanceBy(0);
         ShadowLooper.runUiThreadTasks();
         semaphore.acquire();
     }
-
-    static public void verifyClientMetadata(Context context, TestAdInfo adInfo) {
-        ClientMetadata clientMetadata = ClientMetadata.getInstance(context);
-        assertThat(clientMetadata.getDeviceId()).isEqualTo("ifa:" + adInfo.getId());
-        assertThat(clientMetadata.isDoNotTrackSet()).isEqualTo(adInfo.isLimitAdTrackingEnabled());
-    }
-
-    static public void verifyCleanClientMetadata(Context context) {
-        ClientMetadata clientMetadata = ClientMetadata.getInstance(context);
-        assertThat(clientMetadata.isAdvertisingInfoSet()).isFalse();
-    }
 }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/HttpResponsesTest.java b/mopub-sdk/src/test/java/com/mopub/common/HttpResponsesTest.java
deleted file mode 100644
index 0d8ee5d9..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/HttpResponsesTest.java
+++ /dev/null
@@ -1,138 +0,0 @@
-package com.mopub.common;
-
-import android.graphics.Bitmap;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.Shadows;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class HttpResponsesTest {
-
-    private DownloadResponse downloadResponse1;
-
-    @Before
-    public void setUp() throws Exception {
-        downloadResponse1 = mock(DownloadResponse.class);
-    }
-
-    @Test
-    public void asBitmap_shouldReturnBitmap() throws Exception {
-        String imageData = "fake_bitmap_data";
-        when(downloadResponse1.getByteArray()).thenReturn(imageData.getBytes());
-
-        final Bitmap bitmap = HttpResponses.asBitmap(downloadResponse1);
-
-        assertThat(bitmap).isNotNull();
-        assertThat(bitmap).isInstanceOf(Bitmap.class);
-        assertThat(Shadows.shadowOf(bitmap).getCreatedFromBytes()).isEqualTo(imageData.getBytes());
-    }
-
-    @Test
-    public void asJsonObject_withEmptyJsonString_shouldReturnEmptyJsonObjectAndCloseStream() throws Exception {
-        String jsonData = "{}";
-        when(downloadResponse1.getByteArray()).thenReturn(jsonData.getBytes());
-
-        final JSONObject expectedJsonObject = new JSONObject();
-
-        final JSONObject actualJsonObject = HttpResponses.asJsonObject(downloadResponse1);
-
-        assertThat(actualJsonObject).isEqualsToByComparingFields(expectedJsonObject);
-    }
-
-    @Test
-    public void asJsonObject_withShallowJsonString_shouldReturnPopulatedJsonObjectAndCloseStream() throws Exception {
-        String jsonData = "{\"key1\":\"value1\",\"key2\":\"2\",\"key3\":\"null\"}";
-        when(downloadResponse1.getByteArray()).thenReturn(jsonData.getBytes());
-
-        JSONObject expectedJsonObject = new JSONObject();
-        expectedJsonObject.put("key1", "value1");
-        expectedJsonObject.put("key2", 2);
-        expectedJsonObject.put("key3", JSONObject.NULL);
-
-        final JSONObject actualJsonObject = HttpResponses.asJsonObject(downloadResponse1);
-
-        assertThat(actualJsonObject).isEqualsToByComparingFields(expectedJsonObject);
-    }
-
-    @Test
-    public void asJsonObject_withDeepJsonString_shouldReturnPopulatedJsonObjectAndCloseStream() throws Exception {
-        String jsonData = "{\"key1\":\"value1\",\"key2\":[\"a\",\"b\"]}";
-        when(downloadResponse1.getByteArray()).thenReturn(jsonData.getBytes());
-
-        JSONObject expectedJsonObject = new JSONObject();
-        expectedJsonObject.put("key1", "value1");
-        final JSONArray jsonArray = new JSONArray();
-        jsonArray.put("a");
-        jsonArray.put("b");
-        expectedJsonObject.put("key2", jsonArray);
-
-        final JSONObject actualJsonObject = HttpResponses.asJsonObject(downloadResponse1);
-
-        assertThat(actualJsonObject).isEqualsToByComparingFields(expectedJsonObject);
-    }
-
-    @Test
-    public void asJsonObject_withMalformedJsonString_shouldReturnNullAndCloseStream() throws Exception {
-        String jsonData = "{whoops, forgot closing brace";
-        when(downloadResponse1.getByteArray()).thenReturn(jsonData.getBytes());
-
-        final JSONObject jsonObject = HttpResponses.asJsonObject(downloadResponse1);
-
-        assertThat(jsonObject).isNull();
-    }
-
-    @Test
-    public void asJsonObject_asResponseStringReturnsNull_shouldReturnNull() throws Exception {
-        when(downloadResponse1.getByteArray()).thenReturn(null);
-        assertThat(HttpResponses.asJsonObject(downloadResponse1)).isNull();
-    }
-
-    @Test
-    public void asJsonObject_withNullResponse_shouldReturnNull() throws Exception {
-        final JSONObject jsonObject = HttpResponses.asJsonObject(null);
-
-        assertThat(jsonObject).isNull();
-    }
-
-    @Test
-    public void asResponseString_withMultipleLines_shouldReturnResponseAndCloseStream() throws Exception {
-        String responseData = "1\n2\n3\n4";
-        when(downloadResponse1.getByteArray()).thenReturn(responseData.getBytes());
-
-        final String responseString = HttpResponses.asResponseString(downloadResponse1);
-
-        assertThat(responseString).isEqualTo(responseData);
-    }
-
-    @Test
-    public void asResponseString_shouldReturnResponseAndCloseStream() throws Exception {
-        String responseData = "response_string";
-        when(downloadResponse1.getByteArray()).thenReturn(responseData.getBytes());
-
-        final String responseString = HttpResponses.asResponseString(downloadResponse1);
-
-        assertThat(responseString).isEqualTo(responseData);
-    }
-
-    @Test
-    public void asResponseString_newStringThrowsException_shouldReturnNull() throws Exception {
-        when(downloadResponse1.getByteArray()).thenReturn(null);
-        assertThat(HttpResponses.asResponseString(downloadResponse1)).isNull();
-    }
-
-    @Test
-    public void asResponseString_withNullResponse_shouldReturnNull() throws Exception {
-        final String responseString = HttpResponses.asResponseString(null);
-
-        assertThat(responseString).isNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/LocationServiceTest.java b/mopub-sdk/src/test/java/com/mopub/common/LocationServiceTest.java
index 498bac8b..2ae35eba 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/LocationServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/LocationServiceTest.java
@@ -6,7 +6,9 @@
 import android.location.LocationManager;
 import android.os.SystemClock;
 
+import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Reflection;
 import com.mopub.mobileads.BuildConfig;
 
 import org.junit.After;
@@ -22,6 +24,8 @@
 import static android.Manifest.permission.ACCESS_COARSE_LOCATION;
 import static android.Manifest.permission.ACCESS_FINE_LOCATION;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 import static org.robolectric.Shadows.shadowOf;
 
 @RunWith(SdkTestRunner.class)
@@ -32,6 +36,7 @@
     private Location gpsLocation;
     private Location cachedLocation;
     private ShadowLocationManager shadowLocationManager;
+    private PersonalInfoManager mockPersonalInfoManager;
 
     @Before
     public void setUp() {
@@ -60,6 +65,7 @@ public void setUp() {
                 (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
         shadowLocationManager.setLastKnownLocation(LocationManager.NETWORK_PROVIDER, networkLocation);
         shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, gpsLocation);
+        mockPersonalInfoManager = mock(PersonalInfoManager.class);
     }
 
     @After
@@ -79,9 +85,16 @@ public void getLastKnownLocation_withFinePermission_shouldReturnMoreRecentLocati
     }
 
     @Test
-    public void getLastKnownLocation_withFinePermission_withLocationAwarenessTruncated_shouldTruncateLocationLatLon() {
+    public void getLastKnownLocation_withFinePermission_withLocationAwarenessTruncated_shouldTruncateLocationLatLon() throws  Exception{
         Shadows.shadowOf(activity).grantPermissions(ACCESS_FINE_LOCATION);
 
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+
         final Location result =
                 LocationService.getLastKnownLocation(activity, 2, MoPub.LocationAwareness.TRUNCATED);
 
@@ -93,8 +106,14 @@ public void getLastKnownLocation_withFinePermission_withLocationAwarenessTruncat
     }
 
     @Test
-    public void getLastKnownLocation_withOnlyCoarsePermission_shouldReturnNetworkLocation() {
+    public void getLastKnownLocation_withOnlyCoarsePermission_shouldReturnNetworkLocation() throws Exception {
         Shadows.shadowOf(activity).grantPermissions(ACCESS_COARSE_LOCATION);
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
 
         final Location result =
                 LocationService.getLastKnownLocation(activity, 10, MoPub.LocationAwareness.NORMAL);
@@ -126,9 +145,16 @@ public void getLastKnownLocation_withNoLocationPermissions_shouldReturnNull() {
     }
 
     @Test
-    public void getLastKnownLocation_withLocationAwarenessDisabled_shouldReturnNull() {
+    public void getLastKnownLocation_withLocationAwarenessDisabled_shouldReturnNull() throws Exception {
         Shadows.shadowOf(activity).grantPermissions(ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION);
 
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+            .setStatic(MoPub.class)
+            .setAccessible()
+            .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+            .execute();
+
         final Location result =
                 LocationService.getLastKnownLocation(activity, 10, MoPub.LocationAwareness.DISABLED);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
index 791acaac..0bab926e 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
@@ -1,46 +1,69 @@
 package com.mopub.common;
 
 import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import com.mopub.common.MoPub.BrowserAgent;
+import com.mopub.common.privacy.SyncRequest;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Reflection;
 import com.mopub.mobileads.BuildConfig;
+import com.mopub.mobileads.CustomEventRewardedVideo;
 import com.mopub.mobileads.MoPubRewardedVideoListener;
 import com.mopub.mobileads.MoPubRewardedVideoManager;
 import com.mopub.mobileads.MoPubRewardedVideos;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.Networking;
+import com.mopub.network.TrackingRequest;
+import com.mopub.volley.Request;
+import com.mopub.volley.VolleyError;
 
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
 import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.rule.PowerMockRule;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.when;
 import static org.powermock.api.mockito.PowerMockito.mock;
 import static org.powermock.api.mockito.PowerMockito.mockStatic;
 import static org.powermock.api.mockito.PowerMockito.verifyStatic;
-import static org.powermock.api.mockito.PowerMockito.when;
 
 // If you encounter a VerifyError with PowerMock then you need to set Android Studio to use
 // JDK version 7u79 or later. Go to File > Project Structure > [Platform Settings] > SDK to
 // change the JDK version.
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 21)
-@PowerMockIgnore({ "org.mockito.*", "org.robolectric.*", "android.*" })
+@PowerMockIgnore({ "org.mockito.*", "org.robolectric.*", "android.*", "org.json.*", "com.mopub.network.CustomSSLSocketFactory" })
 @PrepareForTest({MoPubRewardedVideoManager.class})
 public class MoPubTest {
 
+    public static final String INIT_ADUNIT = "b195f8dd8ded45fe847ad89ed1d016da";
+
     private Activity mActivity;
     private MediationSettings[] mMediationSettings;
     private String mAdUnitId;
     private MoPubRewardedVideoListener mockRewardedVideoListener;
     private MoPubRewardedVideoManager.RequestParameters mockRequestParameters;
+    private SdkInitializationListener mockInitializationListener;
+    private MoPubRequestQueue mockRequestQueue;
+    private SyncRequest.Listener syncListener;
 
     @Rule
     public PowerMockRule rule = new PowerMockRule();
@@ -53,6 +76,25 @@ public void setup() {
 
         mockRewardedVideoListener = mock(MoPubRewardedVideoListener.class);
         mockRequestParameters = mock(MoPubRewardedVideoManager.RequestParameters.class);
+        mockInitializationListener = org.mockito.Mockito.mock(SdkInitializationListener.class);
+        mockRequestQueue = org.mockito.Mockito.mock(MoPubRequestQueue.class);
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+        when(mockRequestQueue.add(any(Request.class))).then(new Answer<Object>() {
+            @Override
+            public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
+                Request req = ((Request) invocationOnMock.getArguments()[0]);
+                if (req.getClass().equals(SyncRequest.class)) {
+                    syncListener = (SyncRequest.Listener) req.getErrorListener();
+                    syncListener.onErrorResponse(new VolleyError());
+                    return null;
+                } else if (req.getClass().equals(TrackingRequest.class)) {
+                    return null;
+                } else {
+                    throw new Exception(String.format("Request object added to RequestQueue can " +
+                            "only be of type SyncRequest, " + "saw %s instead.", req.getClass()));
+                }
+            }
+        });
 
         mockStatic(MoPubRewardedVideoManager.class);
 
@@ -60,8 +102,10 @@ public void setup() {
     }
 
     @After
-    public void tearDown() {
+    public void tearDown() throws Exception {
+        MoPub.clearAdvancedBidders();
         MoPub.resetBrowserAgent();
+        ClientMetadata.clearForTesting();
     }
 
     @Test
@@ -104,17 +148,75 @@ public void setBrowserAgentFromAdServer_withNullValue_shouldThrowException() {
     }
 
     @Test
-    public void initializeRewardedVideo_withReflection_shouldExist() throws Exception {
-        assertThat(Reflection.getDeclaredMethodWithTraversal(MoPubRewardedVideos.class,
-                "initializeRewardedVideo", Activity.class, MediationSettings[].class)).isNotNull();
+    public void initializeSdk_withRewardedVideo_shouldCallMoPubRewardedVideoManager() throws Exception {
+        MoPub.initializeSdk(mActivity,
+                new SdkConfiguration.Builder(INIT_ADUNIT).build(),
+                mockInitializationListener);
+
+        org.mockito.Mockito.verify(mockInitializationListener).onInitializationFinished();
+        verifyStatic();
+        MoPubRewardedVideoManager.init(mActivity, mMediationSettings);
     }
 
     @Test
-    public void initializeRewardedVideo_withValidParameters_shouldCallMoPubRewardedVideoManager() throws Exception {
-        MoPub.initializeRewardedVideo(mActivity, mMediationSettings);
+    public void initializeSdk_withRewardedVideo_withMediationSettings_shouldCallMoPubRewardedVideoManager() throws Exception {
+        MoPub.initializeSdk(mActivity,
+                new SdkConfiguration.Builder(INIT_ADUNIT).withMediationSettings(mMediationSettings).build(),
+                mockInitializationListener);
+
+        org.mockito.Mockito.verify(mockInitializationListener).onInitializationFinished();
+        verifyStatic();
+        MoPubRewardedVideoManager.init(mActivity, mMediationSettings);
+    }
 
+    @Test
+    public void initializeSdk_withRewardedVideo_withNetworksToInit_shouldCallMoPubRewardedVideoManager() throws Exception {
+        List<String> stringClassList = new ArrayList<>();
+        // This class does not extend from CustomEventRewardedVideo
+        stringClassList.add("com.mopub.common.MoPubTest");
+        // This class is one that works.
+        stringClassList.add("com.mopub.common.MoPubTest$TestCustomEventRewardedVideo");
+        // Not a real class, so not added to the list.
+        stringClassList.add("not.a.real.Classname");
+        // This class is two subclasses from CustomEventRewardedVideo, but it should still be added.
+        stringClassList.add("com.mopub.common.MoPubTest$TestInheritedCustomEventRewardedVideo");
+
+        MoPub.initializeSdk(mActivity,
+                new SdkConfiguration.Builder(INIT_ADUNIT)
+                        .withNetworksToInit(stringClassList)
+                        .withMediationSettings(mMediationSettings)
+                        .build(),
+                mockInitializationListener);
+
+        org.mockito.Mockito.verify(mockInitializationListener).onInitializationFinished();
+        List<Class<? extends CustomEventRewardedVideo>> classList = new ArrayList<>();
+        classList.add(TestCustomEventRewardedVideo.class);
+        classList.add(TestInheritedCustomEventRewardedVideo.class);
         verifyStatic();
         MoPubRewardedVideoManager.init(mActivity, mMediationSettings);
+        verifyStatic();
+        MoPubRewardedVideoManager.initNetworks(mActivity, classList);
+    }
+
+    @Test
+    public void initializeSdk_withRewardedVideo_withoutActivity_shouldNotCallMoPubRewardedVideoManager() throws Exception {
+        // Since we can't verifyStatic with 0 times, we expect this to call the rewarded video
+        // manager exactly twice instead of three times since one of the times is with the
+        // application context instead of the activity context.
+        MoPub.initializeSdk(mActivity.getApplication(),
+                new SdkConfiguration.Builder(INIT_ADUNIT).withMediationSettings(
+                        mMediationSettings).build(), mockInitializationListener);
+
+        MoPub.initializeSdk(mActivity,
+                new SdkConfiguration.Builder(INIT_ADUNIT).withMediationSettings(
+                        mMediationSettings).build(), mockInitializationListener);
+
+        MoPub.initializeSdk(mActivity,
+                new SdkConfiguration.Builder(INIT_ADUNIT).withMediationSettings(
+                        mMediationSettings).build(), mockInitializationListener);
+
+        verifyStatic(times(2));
+        MoPubRewardedVideoManager.init(mActivity, mMediationSettings);
     }
 
     @Test
@@ -137,22 +239,6 @@ public void setRewardedVideoListener_withReflection_shouldExist() throws Excepti
                 "setRewardedVideoListener", MoPubRewardedVideoListener.class)).isNotNull();
     }
 
-    @Test
-    public void setRewardedVideoListener_withValidListener_shouldSetMoPubRewardedVideoManagerListener() throws Exception {
-        MoPub.setRewardedVideoListener(mockRewardedVideoListener);
-
-        verifyStatic();
-        MoPubRewardedVideoManager.setVideoListener(mockRewardedVideoListener);
-    }
-
-    @Test
-    public void setRewardedVideoListener_withNullListener_shouldCallMoPubRewardedVideoManagerListenerWithNull() throws Exception {
-        MoPub.setRewardedVideoListener(null);
-
-        verifyStatic();
-        MoPubRewardedVideoManager.setVideoListener(null);
-    }
-
     @Test
     public void loadRewardedVideo_withReflection_shouldExist() throws Exception {
         assertThat(Reflection.getDeclaredMethodWithTraversal(MoPubRewardedVideos.class,
@@ -162,75 +248,126 @@ public void loadRewardedVideo_withReflection_shouldExist() throws Exception {
     }
 
     @Test
-    public void loadRewardedVideo_withTwoNonNullParameters_shouldCallMoPubRewardedVideoManager() throws Exception {
-        MoPub.loadRewardedVideo(mAdUnitId, mMediationSettings);
-
-        verifyStatic();
-        MoPubRewardedVideoManager.loadVideo(mAdUnitId, null, mMediationSettings);
+    public void hasRewardedVideo_withReflection_shouldExist() throws Exception {
+        assertThat(Reflection.getDeclaredMethodWithTraversal(MoPubRewardedVideos.class,
+                "hasRewardedVideo", String.class)).isNotNull();
     }
 
     @Test
-    public void loadRewardedVideo_withTwoParameters_withNullMediationSettings_shouldCallMoPubRewardedVideoManager() throws Exception {
-        MoPub.loadRewardedVideo(mAdUnitId, (MediationSettings[]) null);
+    public void initializeSdk_withOneAdvancedBidder_shouldSetAdvancedBiddingTokens() throws Exception {
+        SdkConfiguration sdkConfiguration = new SdkConfiguration.Builder(
+                INIT_ADUNIT).withAdvancedBidder(
+                        AdvancedBidderTestClass.class).build();
 
-        verifyStatic();
-        MoPubRewardedVideoManager.loadVideo(mAdUnitId, null, (MediationSettings[]) null);
+        MoPub.initializeSdk(mActivity, sdkConfiguration, null);
+
+        assertThat(MoPub.getAdvancedBiddingTokensJson(mActivity)).isEqualTo(
+                "{\"AdvancedBidderTestClassName\":{\"token\":\"AdvancedBidderTestClassToken\"}}");
     }
 
     @Test
-    public void loadRewardedVideo_withThreeNonNullParameters_shouldCallMoPubRewardedVideoManager() throws Exception {
-        MoPub.loadRewardedVideo(mAdUnitId, mockRequestParameters, mMediationSettings);
+    public void initializeSdk_withMultipleInitializations_shouldSetAdvancedBiddingTokensOnce() throws Exception {
+        SdkConfiguration sdkConfiguration = new SdkConfiguration.Builder
+                (INIT_ADUNIT).withAdvancedBidder(
+                        AdvancedBidderTestClass.class).build();
 
-        verifyStatic();
-        MoPubRewardedVideoManager.loadVideo(mAdUnitId, mockRequestParameters, mMediationSettings);
-    }
+        MoPub.initializeSdk(mActivity, sdkConfiguration, null);
 
-    @Test
-    public void loadRewardedVideo_withThreeParameters_withNullRequestParameters_shouldCallMoPubRewardedVideoManager() throws Exception {
-        MoPub.loadRewardedVideo(mAdUnitId, null, mMediationSettings);
+        assertThat(MoPub.getAdvancedBiddingTokensJson(mActivity)).isEqualTo(
+                "{\"AdvancedBidderTestClassName\":{\"token\":\"AdvancedBidderTestClassToken\"}}");
 
-        verifyStatic();
-        MoPubRewardedVideoManager.loadVideo(mAdUnitId, null, mMediationSettings);
+        // Attempting to initialize twice
+        sdkConfiguration = new SdkConfiguration.Builder(INIT_ADUNIT)
+                .withAdvancedBidder(SecondAdvancedBidderTestClass.class).build();
+        MoPub.initializeSdk(mActivity, sdkConfiguration, null);
+
+        // This should not do anything, and getAdvancedBiddingTokensJson() should return the
+        // original Advanced Bidder.
+        assertThat(MoPub.getAdvancedBiddingTokensJson(mActivity)).isEqualTo(
+                "{\"AdvancedBidderTestClassName\":{\"token\":\"AdvancedBidderTestClassToken\"}}");
     }
 
     @Test
-    public void loadRewardedVideo_withThreeParameters_withNullRequestParameters_withNullMediationSettings_shouldCallMoPubRewardedVideoManager() throws Exception {
-        MoPub.loadRewardedVideo(mAdUnitId, null, (MediationSettings[]) null);
+    public void initializeSdk_withCallbackSet_shouldCallCallback() throws Exception {
+        MoPub.initializeSdk(mActivity, new SdkConfiguration.Builder(
+                INIT_ADUNIT).build(), mockInitializationListener);
 
-        verifyStatic();
-        MoPubRewardedVideoManager.loadVideo(mAdUnitId, null, (MediationSettings[]) null);
+        org.mockito.Mockito.verify(mockInitializationListener).onInitializationFinished();
     }
 
-    @Test
-    public void hasRewardedVideo_withReflection_shouldExist() throws Exception {
-        assertThat(Reflection.getDeclaredMethodWithTraversal(MoPubRewardedVideos.class,
-                "hasRewardedVideo", String.class)).isNotNull();
-    }
+    private static class AdvancedBidderTestClass implements MoPubAdvancedBidder {
 
-    @Test
-    public void hasRewardedVideo_withValidAdUnitId_shouldReturnTrue() throws Exception {
-        when(MoPubRewardedVideoManager.hasVideo(mAdUnitId)).thenReturn(true);
+        @Override
+        public String getToken(final Context context) {
+            return "AdvancedBidderTestClassToken";
+        }
 
-        assertThat(MoPub.hasRewardedVideo(mAdUnitId)).isTrue();
+        @Override
+        public String getCreativeNetworkName() {
+            return "AdvancedBidderTestClassName";
+        }
     }
 
-    @Test
-    public void hasRewardedVideo_withInvalidAdUnitId_shouldReturnFalse() throws Exception {
-        assertThat(MoPub.hasRewardedVideo("fakeId")).isFalse();
-    }
+    private static class SecondAdvancedBidderTestClass implements MoPubAdvancedBidder {
 
-    @Test
-    public void showRewardedVideo_withReflection_shouldExist() throws Exception {
-        assertThat(Reflection.getDeclaredMethodWithTraversal(MoPubRewardedVideos.class,
-                "showRewardedVideo", String.class)).isNotNull();
-    }
+        @Override
+        public String getToken(final Context context) {
+            return "SecondAdvancedBidderTestClassToken";
+        }
 
-    @Test
-    public void showRewardedVideo_withNonNullAdUnitId_shouldCallMoPubRewardedVideoManager() throws Exception {
-        MoPub.showRewardedVideo(mAdUnitId);
+        @Override
+        public String getCreativeNetworkName() {
+            return "SecondAdvancedBidderTestClassName";
+        }
+    }
 
-        verifyStatic();
-        MoPubRewardedVideoManager.showVideo(mAdUnitId);
+    private static class TestCustomEventRewardedVideo extends CustomEventRewardedVideo {
+
+        public TestCustomEventRewardedVideo(String param) {
+
+        }
+        @Nullable
+        @Override
+        protected LifecycleListener getLifecycleListener() {
+            return null;
+        }
+
+        @Override
+        protected boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
+                @NonNull final Map<String, Object> localExtras,
+                @NonNull final Map<String, String> serverExtras) throws Exception {
+            return false;
+        }
+
+        @Override
+        protected void loadWithSdkInitialized(@NonNull final Activity activity,
+                @NonNull final Map<String, Object> localExtras,
+                @NonNull final Map<String, String> serverExtras) throws Exception {
+        }
+
+        @NonNull
+        @Override
+        protected String getAdNetworkId() {
+            return "";
+        }
+
+        @Override
+        protected void onInvalidate() {
+        }
+
+        @Override
+        protected boolean hasVideoAvailable() {
+            return false;
+        }
+
+        @Override
+        protected void showVideo() {
+        }
     }
 
+    private static class TestInheritedCustomEventRewardedVideo extends TestCustomEventRewardedVideo {
+        public TestInheritedCustomEventRewardedVideo(String param) {
+            super(param);
+        }
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
index dd493629..c4c936aa 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
@@ -410,7 +410,7 @@ public void urlHandler_withDeeplinkPlus_shouldTriggerPrimaryTracker() {
     public void urlHandler_withDeeplinkPlus_shouldTriggerMultiplePrimaryTrackers() {
         final String primaryUrl = "twitter://timeline";
         final String primaryTracker1 = "https://ads.twitter.com/tracking?pubId=1234&userId=5678";
-        final String primaryTracker2 = "https://ads.mopub.com/tracking?pubId=4321&userId=8765";
+        final String primaryTracker2 = "https://tracker.mopub.com/tracking?pubId=4321&userId=8765";
         final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
                 + "&primaryTrackingUrl=" + Uri.encode(primaryTracker1)
                 + "&primaryTrackingUrl=" + Uri.encode(primaryTracker2);
@@ -451,7 +451,7 @@ public void urlHandler_withDeeplinkPlus_withResolvableFallback_shouldTriggerMult
         final String primaryUrl = "missingApp://somePath";
         final String fallbackUrl = "https://twitter.com";
         final String fallbackTracker1 = "https://ads.twitter.com/tracking?pubId=1234&userId=5678";
-        final String fallbackTracker2 = "https://ads.mopub.com/tracking?pubId=4321&userId=8765";
+        final String fallbackTracker2 = "https://tracker.mopub.com/tracking?pubId=4321&userId=8765";
         final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
                 + "&fallbackUrl=" + Uri.encode(fallbackUrl)
                 + "&fallbackTrackingUrl=" + Uri.encode(fallbackTracker1)
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/BaseEventTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/BaseEventTest.java
deleted file mode 100644
index a5c0d99f..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/BaseEventTest.java
+++ /dev/null
@@ -1,247 +0,0 @@
-package com.mopub.common.event;
-
-import com.mopub.common.ClientMetadata;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class BaseEventTest {
-
-    private BaseEvent subject;
-    @Mock private ClientMetadata mockClientMetaData;
-
-    @Before
-    public void setUp() {
-        when(mockClientMetaData.getSdkVersion()).thenReturn("sdk_version");
-        when(mockClientMetaData.getAppName()).thenReturn("app_name");
-        when(mockClientMetaData.getAppPackageName()).thenReturn("app_package_name");
-        when(mockClientMetaData.getAppVersion()).thenReturn("app_version");
-        when(mockClientMetaData.getDeviceId()).thenReturn("client_device_id");
-        when(mockClientMetaData.isDoNotTrackSet()).thenReturn(true);
-        when(mockClientMetaData.getDeviceManufacturer()).thenReturn("device_manufacturer");
-        when(mockClientMetaData.getDeviceModel()).thenReturn("device_model");
-        when(mockClientMetaData.getDeviceProduct()).thenReturn("device_product");
-        when(mockClientMetaData.getDeviceOsVersion()).thenReturn("device_os_version");
-        when(mockClientMetaData.getDeviceScreenWidthDip()).thenReturn(1337);
-        when(mockClientMetaData.getDeviceScreenHeightDip()).thenReturn(70707);
-        when(mockClientMetaData.getActiveNetworkType()).thenReturn(ClientMetadata.MoPubNetworkType.WIFI);
-        when(mockClientMetaData.getNetworkOperator()).thenReturn("network_operator");
-        when(mockClientMetaData.getNetworkOperatorName()).thenReturn("network_operator_name");
-        when(mockClientMetaData.getIsoCountryCode()).thenReturn("network_iso_country_code");
-        when(mockClientMetaData.getSimOperator()).thenReturn("network_sim_operator");
-        when(mockClientMetaData.getSimOperatorName()).thenReturn("network_sim_operator_name");
-        when(mockClientMetaData.getSimIsoCountryCode()).thenReturn("network_sim_iso_country_code");
-        ClientMetadata.setInstance(mockClientMetaData);
-
-        subject = new Event.Builder(BaseEvent.Name.AD_REQUEST, BaseEvent.Category.REQUESTS, 0.10000123)
-                .withSdkProduct(BaseEvent.SdkProduct.NATIVE)
-                .withAdUnitId("8cf00598d3664adaaeccd800e46afaca")
-                .withAdCreativeId("3c2b887e2c2a4cd0ae6a925440a62f0d")
-                .withAdType("html")
-                .withAdNetworkType("admob")
-                .withAdWidthPx(320.0)
-                .withAdHeightPx(50.0)
-                .withGeoLat(37.7833)
-                .withGeoLon(-122.4183333)
-                .withGeoAccuracy(10.0)
-                .withPerformanceDurationMs(100.0)
-                .withRequestId("b550796074da4559a27c5072dcba2b27")
-                .withRequestStatusCode(200)
-                .withRequestUri("https://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca")
-                .withRequestRetries(0)
-                .build();
-    }
-
-    @After
-    public void tearDown() {
-        ClientMetadata.setInstance(null);
-    }
-
-    @Test
-    public void ScribeCategory_shouldHaveExpectedValues() throws Exception {
-        // We're testing this since our backend data definitions depend on these values matching
-        assertThat(BaseEvent.ScribeCategory.EXCHANGE_CLIENT_EVENT.getCategory())
-                .isEqualTo("exchange_client_event");
-        assertThat(BaseEvent.ScribeCategory.EXCHANGE_CLIENT_ERROR.getCategory())
-                .isEqualTo("exchange_client_error");
-    }
-
-    @Test
-    public void SdkProduct_shouldHaveExpectedValues() throws Exception {
-        // We're testing this since our backend data definitions depend on these values matching
-        assertThat(BaseEvent.SdkProduct.NONE.getType())
-                .isEqualTo(0);
-        assertThat(BaseEvent.SdkProduct.WEB_VIEW.getType())
-                .isEqualTo(1);
-        assertThat(BaseEvent.SdkProduct.NATIVE.getType())
-                .isEqualTo(2);
-    }
-
-    @Test
-    public void AppPlatform_shouldHaveExpectedValues() throws Exception {
-        // We're testing this since our backend data definitions depend on these values matching
-        assertThat(BaseEvent.AppPlatform.NONE.getType())
-                .isEqualTo(0);
-        assertThat(BaseEvent.AppPlatform.IOS.getType())
-                .isEqualTo(1);
-        assertThat(BaseEvent.AppPlatform.ANDROID.getType())
-                .isEqualTo(2);
-        assertThat(BaseEvent.AppPlatform.MOBILE_WEB.getType())
-                .isEqualTo(3);
-    }
-
-    @Test
-    public void Name_shouldHaveExpectedValues() throws Exception {
-        // We're testing this since our backend data definitions depend on these values matching
-        assertThat(BaseEvent.Name.AD_REQUEST.getName())
-                .isEqualTo("ad_request");
-        assertThat(BaseEvent.Name.IMPRESSION_REQUEST.getName())
-                .isEqualTo("impression_request");
-        assertThat(BaseEvent.Name.CLICK_REQUEST.getName())
-                .isEqualTo("click_request");
-    }
-
-    @Test
-    public void Category_shouldHaveExpectedValues() throws Exception {
-        // We're testing this since our backend data definitions depend on these values matching
-        assertThat(BaseEvent.Category.REQUESTS.getCategory())
-                .isEqualTo("requests");
-    }
-
-    @Test
-    public void SamplingRate_shouldHaveExpectedValues() throws Exception {
-        // We're testing this since our backend data definitions depend on these values matching
-        assertThat(BaseEvent.SamplingRate.AD_REQUEST.getSamplingRate()).isEqualTo(0.1);
-    }
-
-    @Test
-    public void constructor_shouldCorrectlyAssignFieldsFromBuilder() throws Exception {
-        assertThat(subject.getSdkProduct()).isEqualTo(BaseEvent.SdkProduct.NATIVE);
-        assertThat(subject.getAdUnitId()).isEqualTo("8cf00598d3664adaaeccd800e46afaca");
-        assertThat(subject.getAdCreativeId()).isEqualTo("3c2b887e2c2a4cd0ae6a925440a62f0d");
-        assertThat(subject.getAdType()).isEqualTo("html");
-        assertThat(subject.getAdNetworkType()).isEqualTo("admob");
-        assertThat(subject.getAdWidthPx()).isEqualTo(320.0);
-        assertThat(subject.getAdHeightPx()).isEqualTo(50.0);
-        assertThat(subject.getGeoLat()).isEqualTo(37.7833);
-        assertThat(subject.getGeoLon()).isEqualTo(-122.4183333);
-        assertThat(subject.getGeoAccuracy()).isEqualTo(10.0);
-        assertThat(subject.getPerformanceDurationMs()).isEqualTo(100.0);
-        assertThat(subject.getRequestId()).isEqualTo("b550796074da4559a27c5072dcba2b27");
-        assertThat(subject.getRequestStatusCode()).isEqualTo(200);
-        assertThat(subject.getRequestUri()).isEqualTo("https://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca");
-        assertThat(subject.getRequestRetries()).isEqualTo(0);
-        assertThat(subject.getSamplingRate()).isEqualTo(0.10000123);
-    }
-
-    @Test
-    public void getSdkVersion_shouldReturnClientMetaDataSdkVersion() throws Exception {
-        assertThat(subject.getSdkVersion()).isEqualTo("sdk_version");
-    }
-
-    @Test
-    public void getAppName_shouldReturnClientMetaDataAppName() throws Exception {
-        assertThat(subject.getAppName()).isEqualTo("app_name");
-    }
-
-    @Test
-    public void getAppPackageName_shouldReturnClientMetaDataAppPackageName() throws Exception {
-        assertThat(subject.getAppPackageName()).isEqualTo("app_package_name");
-    }
-
-    @Test
-    public void getAppVersion_shouldReturnClientMetaDataAppVersion() throws Exception {
-        assertThat(subject.getAppVersion()).isEqualTo("app_version");
-    }
-
-    @Test
-    public void getClientAdvertisingId_shouldReturnClientMetaDataDeviceId() throws Exception {
-        assertThat(subject.getClientAdvertisingId()).isEqualTo("client_device_id");
-    }
-
-    @Test
-    public void getObfuscatedClientAdvertisingId_shouldReturnObfuscatedDeviceId() throws Exception {
-        assertThat(subject.getObfuscatedClientAdvertisingId()).isEqualTo("ifa:XXXX");
-    }
-
-    @Test
-    public void getClientDoNotTrack_shouldReturnClientMetaDataDoNotTrack() throws Exception {
-        assertThat(subject.getClientDoNotTrack()).isEqualTo(true);
-    }
-
-    @Test
-    public void getDeviceManufacturer_shouldReturnClientMetaDataDeviceManufacturer() throws Exception {
-        assertThat(subject.getDeviceManufacturer()).isEqualTo("device_manufacturer");
-    }
-
-    @Test
-    public void getDeviceModel_shouldReturnClientMetaDataDeviceModel() throws Exception {
-        assertThat(subject.getDeviceModel()).isEqualTo("device_model");
-    }
-
-    @Test
-    public void getDeviceProduct_shouldReturnClientMetaDataDeviceProduct() throws Exception {
-        assertThat(subject.getDeviceProduct()).isEqualTo("device_product");
-    }
-
-    @Test
-    public void getDeviceOsVersion_shouldReturnClientMetaDataDeviceOsVersion() throws Exception {
-        assertThat(subject.getDeviceOsVersion()).isEqualTo("device_os_version");
-    }
-
-    @Test
-    public void getDeviceScreenWidthDip_shouldReturnClientMetaDataDeviceScreenWidthDip() throws Exception {
-        assertThat(subject.getDeviceScreenWidthDip()).isEqualTo(1337);
-    }
-
-    @Test
-    public void getDeviceScreenHeightDip_shouldReturnClientMetaDataDeviceScreenHeightDip() throws Exception {
-        assertThat(subject.getDeviceScreenHeightDip()).isEqualTo(70707);
-    }
-
-    @Test
-    public void getNetworkType_shouldReturnClientMetaDataActiveNetworkType() throws Exception {
-        assertThat(subject.getNetworkType()).isEqualTo(ClientMetadata.MoPubNetworkType.WIFI);
-    }
-
-    @Test
-    public void getNetworkOperatorCode_shouldReturnClientMetaDataNetworkOperator() throws Exception {
-        assertThat(subject.getNetworkOperatorCode()).isEqualTo("network_operator");
-    }
-
-    @Test
-    public void getNetworkOperatorName_shouldReturnClientMetaDataNetworkOperatorName() throws Exception {
-        assertThat(subject.getNetworkOperatorName()).isEqualTo("network_operator_name");
-    }
-
-    @Test
-    public void getNetworkIsoCountryCode_shouldReturnClientMetaDataNetworkIsoCountryCode() throws Exception {
-        assertThat(subject.getNetworkIsoCountryCode()).isEqualTo("network_iso_country_code");
-    }
-
-    @Test
-    public void getNetworkSimCode_shouldReturnClientMetaDataNetworkSimOperator() throws Exception {
-        assertThat(subject.getNetworkSimCode()).isEqualTo("network_sim_operator");
-    }
-
-    @Test
-    public void getNetworkSimOperatorName_shouldReturnClientMetaDataNetworkSimOperatorName() throws Exception {
-        assertThat(subject.getNetworkSimOperatorName()).isEqualTo("network_sim_operator_name");
-    }
-
-    @Test
-    public void getNetworkSimIsoCountryCode_shouldReturnClientMetaDataNetworkSimIsoCountryCode() throws Exception {
-        assertThat(subject.getNetworkSimIsoCountryCode()).isEqualTo("network_sim_iso_country_code");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/ErrorEventTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/ErrorEventTest.java
deleted file mode 100644
index 957552b1..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/ErrorEventTest.java
+++ /dev/null
@@ -1,77 +0,0 @@
-package com.mopub.common.event;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class ErrorEventTest {
-
-    private ErrorEvent subject;
-
-    @Before
-    public void setUp() {
-        subject = new ErrorEvent.Builder(BaseEvent.Name.AD_REQUEST, BaseEvent.Category.REQUESTS, 0.10000123)
-                .withErrorExceptionClassName("error_exception_class_name")
-                .withErrorMessage("error_message")
-                .withErrorStackTrace("error_stack_trace")
-                .withErrorFileName("error_file_name")
-                .withErrorClassName("error_class_name")
-                .withErrorMethodName("error_method_name")
-                .withErrorLineNumber(123)
-                .build();
-    }
-
-    @Test
-    public void constructor_shouldCorrectlyAssignFieldsFromBuilder() throws Exception {
-        assertThat(subject.getName()).isEqualTo(BaseEvent.Name.AD_REQUEST);
-        assertThat(subject.getCategory()).isEqualTo(BaseEvent.Category.REQUESTS);
-        assertThat(subject.getSamplingRate()).isEqualTo(0.10000123);
-        assertThat(subject.getScribeCategory()).isEqualTo(BaseEvent.ScribeCategory.EXCHANGE_CLIENT_ERROR);
-        assertThat(subject.getErrorExceptionClassName()).isEqualTo("error_exception_class_name");
-        assertThat(subject.getErrorMessage()).isEqualTo("error_message");
-        assertThat(subject.getErrorStackTrace()).isEqualTo("error_stack_trace");
-        assertThat(subject.getErrorFileName()).isEqualTo("error_file_name");
-        assertThat(subject.getErrorClassName()).isEqualTo("error_class_name");
-        assertThat(subject.getErrorMethodName()).isEqualTo("error_method_name");
-        assertThat(subject.getErrorLineNumber()).isEqualTo(123);
-    }
-
-    @Test
-    public void builder_withException_shouldCorrectlyPopulateErrorFields() throws Exception {
-        Exception exception;
-        try {
-            throw new ClassCastException("bad cast");
-        } catch (Exception e)  {
-            exception = e;
-        }
-
-        subject = new ErrorEvent.Builder(BaseEvent.Name.AD_REQUEST, BaseEvent.Category.REQUESTS, 0.10000123)
-                .withException(exception)
-                .build();
-
-        assertThat(subject.getName()).isEqualTo(BaseEvent.Name.AD_REQUEST);
-        assertThat(subject.getCategory()).isEqualTo(BaseEvent.Category.REQUESTS);
-        assertThat(subject.getScribeCategory()).isEqualTo(BaseEvent.ScribeCategory.EXCHANGE_CLIENT_ERROR);
-        assertThat(subject.getErrorExceptionClassName()).isEqualTo("java.lang.ClassCastException");
-        assertThat(subject.getErrorMessage()).isEqualTo("bad cast");
-
-        // We can't reliably check the stack trace since it changes from one run to another
-//        assertThat(subject.getErrorStackTrace()).isEqualTo();
-
-        assertThat(subject.getErrorFileName()).isEqualTo("ErrorEventTest.java");
-        assertThat(subject.getErrorClassName()).isEqualTo("com.mopub.common.event.ErrorEventTest");
-        assertThat(subject.getErrorMethodName()).isEqualTo("builder_withException_shouldCorrectlyPopulateErrorFields");
-
-        // Ideally we check the actual line number here, but since this file is continuously
-        // changing, it makes the test brittle to do so
-        assertThat(subject.getErrorLineNumber()).isNotNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/EventDispatcherTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/EventDispatcherTest.java
deleted file mode 100644
index 9b3fef29..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/EventDispatcherTest.java
+++ /dev/null
@@ -1,67 +0,0 @@
-package com.mopub.common.event;
-
-import android.app.Activity;
-import android.os.HandlerThread;
-import android.os.Looper;
-import android.os.Message;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class EventDispatcherTest {
-
-    private EventDispatcher subject;
-    private List<EventRecorder> recorders;
-    @Mock private EventRecorder mockEventRecorder1;
-    @Mock private EventRecorder mockEventRecorder2;
-    @Mock private HandlerThread mockHandlerThread;
-
-    @Before
-    public void setUp() {
-        recorders = new ArrayList<EventRecorder>();
-        recorders.add(mockEventRecorder1);
-        recorders.add(mockEventRecorder2);
-    }
-
-    @Test
-    public void handler_handleMessage_shouldCallRecordOnAllRecorders() throws Exception {
-        Message message = new Message();
-        message.obj = mock(Event.class);
-
-        subject = new EventDispatcher(recorders, Looper.getMainLooper());
-        subject.getHandlerCallback().handleMessage(message);
-
-        verify(mockEventRecorder1).record(eq((Event) message.obj));
-        verify(mockEventRecorder2).record(eq((Event) message.obj));
-    }
-
-    @Test
-    public void handler_handleMessage_withNonBaseEventTypeMessageShouldNotRecordOnAnyRecorders() throws Exception {
-        Message message = new Message();
-        message.obj = mock(Activity.class);
-
-        subject = new EventDispatcher(recorders, Looper.getMainLooper());
-        subject.getHandlerCallback().handleMessage(message);
-
-        verify(mockEventRecorder1, never()).record(any(BaseEvent.class));
-        verify(mockEventRecorder2, never()).record(any(BaseEvent.class));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/EventSamplerTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/EventSamplerTest.java
deleted file mode 100644
index b4b2d15e..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/EventSamplerTest.java
+++ /dev/null
@@ -1,89 +0,0 @@
-package com.mopub.common.event;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.stubbing.OngoingStubbing;
-import org.robolectric.annotation.Config;
-
-import java.util.Random;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class EventSamplerTest {
-
-    private EventSampler subject;
-    @Mock Random mockRandom;
-    @Mock BaseEvent mockBaseEvent;
-
-    @Before
-    public void setUp() {
-        subject = new EventSampler(mockRandom);
-        when(mockBaseEvent.getSamplingRate()).thenReturn(0.10);
-    }
-
-    @Test
-    public void sample_withRandomNumberLessThan10Percent_shouldReturnTrue() throws Exception {
-        when(mockRandom.nextDouble()).thenReturn(0.09);
-
-        boolean result = subject.sample(mockBaseEvent);
-
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void sample_withRandomNumberGreaterOrEqualTo10Percent_shouldReturnFalse() throws Exception {
-        when(mockRandom.nextDouble()).thenReturn(0.10);
-
-        boolean result = subject.sample(mockBaseEvent);
-
-        assertThat(result).isFalse();
-    }
-
-    @Test
-    public void sample_withSameRequestId_shouldReturnSameValueRegardlessOfSampleRate() throws Exception {
-        when(mockRandom.nextDouble()).thenReturn(0.09).thenReturn(0.999);
-        when(mockBaseEvent.getRequestId()).thenReturn("rid");
-
-        boolean firstResult = subject.sample(mockBaseEvent);
-        assertThat(firstResult).isTrue();
-
-        boolean secondResult = subject.sample(mockBaseEvent);
-        assertThat(secondResult).isTrue();
-    }
-
-    @Test
-    public void sample_withDifferentRequestId_shouldReturnResultBasedOnSampleRate() throws Exception {
-        when(mockRandom.nextDouble()).thenReturn(0.09).thenReturn(0.999);
-        when(mockBaseEvent.getRequestId()).thenReturn("rid1").thenReturn("rid2");
-
-        boolean firstResult = subject.sample(mockBaseEvent);
-        assertThat(firstResult).isTrue();
-
-        boolean secondResult = subject.sample(mockBaseEvent);
-        assertThat(secondResult).isFalse();
-    }
-
-    @Test
-    public void sample_withTooManyEvents_shouldHoldAMaximumNumberOfRequestIds() {
-        when(mockRandom.nextDouble()).thenReturn(0.001);
-        OngoingStubbing<String> ongoingStubbing = when(mockBaseEvent.getRequestId()).thenReturn(
-                "rid0");
-        for (int i = 1; i < EventSampler.MAX_SIZE * 3; i++) {
-            ongoingStubbing = ongoingStubbing.thenReturn("rid" + i);
-        }
-
-        for (int i = 0; i < EventSampler.MAX_SIZE * 3; i++) {
-            subject.sample(mockBaseEvent);
-        }
-
-        assertThat(subject.getCacheSize()).isEqualTo(EventSampler.MAX_SIZE);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/EventSerializerTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/EventSerializerTest.java
deleted file mode 100644
index 34d030ba..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/EventSerializerTest.java
+++ /dev/null
@@ -1,216 +0,0 @@
-package com.mopub.common.event;
-
-import android.app.Activity;
-import android.content.Context;
-
-import com.mopub.common.ClientMetadata;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class EventSerializerTest {
-
-    private EventSerializer subject;
-
-    @Mock private Event mockEvent;
-    @Mock private ErrorEvent mockErrorEvent;
-
-    @Before
-    public void setUp() {
-        subject = new EventSerializer();
-
-        // initialize client meta data with context
-        Context context = Robolectric.buildActivity(Activity.class).create().get();
-        ClientMetadata.getInstance(context);
-
-        populateBaseEventFields(mockEvent);
-        populateBaseEventFields(mockErrorEvent);
-
-        when(mockErrorEvent.getErrorExceptionClassName()).thenReturn("error_exception_class_name");
-        when(mockErrorEvent.getErrorMessage()).thenReturn("error_message");
-        when(mockErrorEvent.getErrorStackTrace()).thenReturn("error_stack_trace");
-        when(mockErrorEvent.getErrorFileName()).thenReturn("error_file_name");
-        when(mockErrorEvent.getErrorClassName()).thenReturn("error_class_name");
-        when(mockErrorEvent.getErrorMethodName()).thenReturn("error_method_name");
-        when(mockErrorEvent.getErrorLineNumber()).thenReturn(123);
-    }
-
-    @Test
-    public void serializeAsJson_withAllEventFieldsPopulated_shouldCorrectJsonRepresentation() throws Exception {
-        ArrayList<BaseEvent> events = new ArrayList<BaseEvent>();
-        events.add(mockEvent);
-        JSONArray jsonArray = subject.serializeAsJson(events);
-        assertThat(jsonArray.length()).isEqualTo(1);
-
-        JSONObject jsonObject = jsonArray.getJSONObject(0);
-        validateBaseEventFields(jsonObject);
-    }
-
-    @Test
-    public void serializeAsJson_withAllErrorEventFieldsPopulated_shouldCorrectJsonRepresentation() throws Exception {
-        ArrayList<BaseEvent> events = new ArrayList<BaseEvent>();
-        events.add(mockErrorEvent);
-        JSONArray jsonArray = subject.serializeAsJson(events);
-        assertThat(jsonArray.length()).isEqualTo(1);
-
-        JSONObject jsonObject = jsonArray.getJSONObject(0);
-        validateBaseEventFields(jsonObject);
-
-        assertThat(jsonObject.getString("error_exception_class_name")).isEqualTo("error_exception_class_name");
-        assertThat(jsonObject.getString("error_message")).isEqualTo("error_message");
-        assertThat(jsonObject.getString("error_stack_trace")).isEqualTo("error_stack_trace");
-        assertThat(jsonObject.getString("error_file_name")).isEqualTo("error_file_name");
-        assertThat(jsonObject.getString("error_class_name")).isEqualTo("error_class_name");
-        assertThat(jsonObject.getString("error_method_name")).isEqualTo("error_method_name");
-        assertThat(jsonObject.getInt("error_line_number")).isEqualTo(123);
-    }
-
-    @Test
-    public void serializeAsJson_shouldReturnJsonArrayOfEvents() throws Exception {
-        when(mockEvent.getName()).thenReturn(BaseEvent.Name.AD_REQUEST);
-        when(mockEvent.getCategory()).thenReturn(BaseEvent.Category.REQUESTS);
-        when(mockErrorEvent.getName()).thenReturn(BaseEvent.Name.IMPRESSION_REQUEST);
-        when(mockErrorEvent.getCategory()).thenReturn(BaseEvent.Category.REQUESTS);
-
-        ArrayList<BaseEvent> events = new ArrayList<BaseEvent>();
-        events.add(mockEvent);
-        events.add(mockErrorEvent);
-
-        JSONArray jsonArray = subject.serializeAsJson(events);
-        assertThat(jsonArray.length()).isEqualTo(2);
-
-        JSONObject jsonObject1 = jsonArray.getJSONObject(0);
-        assertThat(jsonObject1.getString("name")).isEqualTo(BaseEvent.Name.AD_REQUEST.getName());
-        assertThat(jsonObject1.getString("name_category")).isEqualTo("requests");
-
-        JSONObject jsonObject2 = jsonArray.getJSONObject(1);
-        assertThat(jsonObject2.getString("name")).isEqualTo("impression_request");
-        assertThat(jsonObject2.getString("name_category")).isEqualTo("requests");
-    }
-
-    private void populateBaseEventFields(BaseEvent mockBaseEvent) {
-        when(mockBaseEvent.getScribeCategory()).thenReturn(BaseEvent.ScribeCategory.EXCHANGE_CLIENT_EVENT);
-        when(mockBaseEvent.getName()).thenReturn(BaseEvent.Name.AD_REQUEST);
-        when(mockBaseEvent.getCategory()).thenReturn(BaseEvent.Category.REQUESTS);
-        when(mockBaseEvent.getSdkProduct()).thenReturn(BaseEvent.SdkProduct.NATIVE);
-        when(mockBaseEvent.getSdkVersion()).thenReturn("3.5.0");
-        when(mockBaseEvent.getAdUnitId()).thenReturn("8cf00598d3664adaaeccd800e46afaca");
-        when(mockBaseEvent.getAdCreativeId()).thenReturn("3c2b887e2c2a4cd0ae6a925440a62f0d");
-        when(mockBaseEvent.getAdType()).thenReturn("html");
-        when(mockBaseEvent.getAdNetworkType()).thenReturn("admob");
-        when(mockBaseEvent.getAdWidthPx()).thenReturn(320.0);
-        when(mockBaseEvent.getAdHeightPx()).thenReturn(50.0);
-        when(mockBaseEvent.getDspCreativeId()).thenReturn("jack!fake234");
-        when(mockBaseEvent.getAppPlatform()).thenReturn(BaseEvent.AppPlatform.ANDROID);
-        when(mockBaseEvent.getAppName()).thenReturn("MoPub Sample App");
-        when(mockBaseEvent.getAppPackageName()).thenReturn("com.mopub.simpleadsdemo");
-        when(mockBaseEvent.getAppVersion()).thenReturn("1.0");
-        when(mockBaseEvent.getObfuscatedClientAdvertisingId()).thenCallRealMethod();
-        when(mockBaseEvent.getClientAdvertisingId()).thenReturn("38400000-8cf0-11bd-b23e-10b96e40000d");
-        when(mockBaseEvent.getClientDoNotTrack()).thenReturn(false);
-        when(mockBaseEvent.getDeviceManufacturer()).thenReturn("LGE");
-        when(mockBaseEvent.getDeviceModel()).thenReturn("Nexus 5");
-        when(mockBaseEvent.getDeviceProduct()).thenReturn("hammerhead");
-        when(mockBaseEvent.getDeviceOsVersion()).thenReturn("5.0");
-        when(mockBaseEvent.getDeviceScreenWidthDip()).thenReturn(1080);
-        when(mockBaseEvent.getDeviceScreenHeightDip()).thenReturn(1920);
-        when(mockBaseEvent.getGeoLat()).thenReturn(37.7833);
-        when(mockBaseEvent.getGeoLon()).thenReturn(-122.4183333);
-        when(mockBaseEvent.getGeoAccuracy()).thenReturn(10.0);
-        when(mockBaseEvent.getPerformanceDurationMs()).thenReturn(100.0);
-        when(mockBaseEvent.getNetworkType()).thenReturn(ClientMetadata.MoPubNetworkType.WIFI);
-        when(mockBaseEvent.getNetworkOperatorCode()).thenReturn("310410");
-        when(mockBaseEvent.getNetworkOperatorName()).thenReturn("AT&T");
-        when(mockBaseEvent.getNetworkIsoCountryCode()).thenReturn("US");
-        when(mockBaseEvent.getNetworkSimCode()).thenReturn("network_sim_code");
-        when(mockBaseEvent.getNetworkSimOperatorName()).thenReturn("network_operator_name");
-        when(mockBaseEvent.getNetworkSimIsoCountryCode()).thenReturn("US");
-        when(mockBaseEvent.getRequestId()).thenReturn("b550796074da4559a27c5072dcba2b27");
-        when(mockBaseEvent.getRequestStatusCode()).thenReturn(200);
-        when(mockBaseEvent.getRequestUri()).thenReturn("https://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca");
-        when(mockBaseEvent.getRequestRetries()).thenReturn(0);
-        when(mockBaseEvent.getTimestampUtcMs()).thenReturn(1416447053472L);
-    }
-
-    private void validateBaseEventFields(JSONObject jsonObject) throws Exception {
-        assertThat(jsonObject.getString("_category_")).isEqualTo("exchange_client_event");
-        assertThat(jsonObject.getLong("ts")).isEqualTo(1416447053472L);
-
-        // Name Details
-        assertThat(jsonObject.getString("name")).isEqualTo(BaseEvent.Name.AD_REQUEST.getName());
-        assertThat(jsonObject.getString("name_category")).isEqualTo(BaseEvent.Category.REQUESTS.getCategory());
-
-        // SDK Details
-        assertThat(jsonObject.getInt("sdk_product")).isEqualTo(BaseEvent.SdkProduct.NATIVE.getType());
-        assertThat(jsonObject.getString("sdk_version")).isEqualTo("3.5.0");
-
-        // Ad Details
-        assertThat(jsonObject.getString("ad_unit_id")).isEqualTo("8cf00598d3664adaaeccd800e46afaca");
-        assertThat(jsonObject.getString("ad_creative_id")).isEqualTo("3c2b887e2c2a4cd0ae6a925440a62f0d");
-        assertThat(jsonObject.getString("ad_type")).isEqualTo("html");
-        assertThat(jsonObject.getString("ad_network_type")).isEqualTo("admob");
-        assertThat(jsonObject.getDouble("ad_width_px")).isEqualTo(320.0);
-        assertThat(jsonObject.getDouble("ad_height_px")).isEqualTo(50.0);
-        assertThat(jsonObject.getString("dsp_creative_id")).isEqualTo("jack!fake234");
-
-        // App Details
-        assertThat(jsonObject.getInt("app_platform")).isEqualTo(2);
-        assertThat(jsonObject.getString("app_name")).isEqualTo("MoPub Sample App");
-        assertThat(jsonObject.getString("app_package_name")).isEqualTo("com.mopub.simpleadsdemo");
-        assertThat(jsonObject.getString("app_version")).isEqualTo("1.0");
-
-        // Client Details
-        assertThat(jsonObject.getString("client_advertising_id")).isEqualTo("ifa:XXXX");
-        assertThat(jsonObject.getBoolean("client_do_not_track")).isEqualTo(false);
-
-        // Device Details
-        assertThat(jsonObject.getString("device_manufacturer")).isEqualTo("LGE");
-        assertThat(jsonObject.getString("device_model")).isEqualTo("Nexus 5");
-        assertThat(jsonObject.getString("device_product")).isEqualTo("hammerhead");
-        assertThat(jsonObject.getString("device_os_version")).isEqualTo("5.0");
-        assertThat(jsonObject.getInt("device_screen_width_px")).isEqualTo(1080);
-        assertThat(jsonObject.getInt("device_screen_height_px")).isEqualTo(1920);
-
-        // Geo Details
-        assertThat(jsonObject.getDouble("geo_lat")).isEqualTo(37.7833);
-        assertThat(jsonObject.getDouble("geo_lon")).isEqualTo(-122.4183333);
-        assertThat(jsonObject.getDouble("geo_accuracy_radius_meters")).isEqualTo(10.0);
-
-        // Performance Details
-        assertThat(jsonObject.getDouble("perf_duration_ms")).isEqualTo(100.0);
-
-        // Network Details
-        assertThat(jsonObject.getInt("network_type")).isEqualTo(ClientMetadata.MoPubNetworkType.WIFI.getId());
-        assertThat(jsonObject.getString("network_operator_code")).isEqualTo("310410");
-        assertThat(jsonObject.getString("network_operator_name")).isEqualTo("AT&T");
-        assertThat(jsonObject.getString("network_iso_country_code")).isEqualTo("US");
-        assertThat(jsonObject.getString("network_sim_code")).isEqualTo("network_sim_code");
-        assertThat(jsonObject.getString("network_sim_operator_name")).isEqualTo("network_operator_name");
-        assertThat(jsonObject.getString("network_sim_iso_country_code")).isEqualTo("US");
-
-        // Request Details
-        assertThat(jsonObject.getString("req_id")).isEqualTo("b550796074da4559a27c5072dcba2b27");
-        assertThat(jsonObject.getInt("req_status_code")).isEqualTo(200);
-        assertThat(jsonObject.getString("req_uri")).isEqualTo("https://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca");
-        assertThat(jsonObject.getInt("req_retries")).isEqualTo(0);
-
-        // Timestamp Details
-        assertThat(jsonObject.getLong("timestamp_client")).isEqualTo(1416447053472L);
-    }
-}
-
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/EventTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/EventTest.java
deleted file mode 100644
index 3384f75e..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/EventTest.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package com.mopub.common.event;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class EventTest {
-
-    private Event subject;
-
-    @Before
-    public void setUp() {
-        subject = new Event.Builder(BaseEvent.Name.AD_REQUEST, BaseEvent.Category.REQUESTS, 0.10000123).build();
-    }
-
-    @Test
-    public void constructor_shouldCorrectlyAssignScribeCategoryFromBuilder() {
-        assertThat(subject.getName()).isEqualTo(BaseEvent.Name.AD_REQUEST);
-        assertThat(subject.getCategory()).isEqualTo(BaseEvent.Category.REQUESTS);
-        assertThat(subject.getSamplingRate()).isEqualTo(0.10000123);
-        assertThat(subject.getScribeCategory()).isEqualTo(BaseEvent.ScribeCategory.EXCHANGE_CLIENT_EVENT);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/MoPubEventsTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/MoPubEventsTest.java
deleted file mode 100644
index 2bf68573..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/MoPubEventsTest.java
+++ /dev/null
@@ -1,54 +0,0 @@
-package com.mopub.common.event;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MoPubEventsTest {
-
-    @Before
-    public void setUp() {
-        MoPubEvents.setEventDispatcher(null);
-    }
-
-    @Test
-    public void getDispatcher_shouldReturnSingletonEventDispatcherWithScribeEventRecorder() throws Exception {
-        EventDispatcher eventDispatcher = MoPubEvents.getDispatcher();
-        EventDispatcher eventDispatcher2 = MoPubEvents.getDispatcher();
-
-        assertThat(eventDispatcher).isEqualTo(eventDispatcher2);
-
-        Iterable<EventRecorder> eventRecorderIterable = eventDispatcher.getEventRecorders();
-        ArrayList<EventRecorder> eventRecorders = new ArrayList<EventRecorder>();
-        for (EventRecorder recorder : eventRecorderIterable) {
-            eventRecorders.add(recorder);
-        }
-
-        assertThat(eventRecorders.size()).isEqualTo(1);
-        assertThat(eventRecorders.get(0)).isInstanceOf(ScribeEventRecorder.class);
-    }
-
-    @Test
-    public void log_shouldDispatchEvent() throws Exception {
-        EventDispatcher mockEventDispatcher = mock(EventDispatcher.class);
-        MoPubEvents.setEventDispatcher(mockEventDispatcher);
-
-        Event mockEvent = mock(Event.class);
-        MoPubEvents.log(mockEvent);
-
-        verify(mockEventDispatcher).dispatch(mockEvent);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/ScribeEventRecorderTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/ScribeEventRecorderTest.java
deleted file mode 100644
index 7305cc7b..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/ScribeEventRecorderTest.java
+++ /dev/null
@@ -1,213 +0,0 @@
-package com.mopub.common.event;
-
-import android.os.Handler;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.network.ScribeBackoffPolicy;
-import com.mopub.network.ScribeRequest;
-import com.mopub.network.ScribeRequestManager;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-import java.util.Queue;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyLong;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class ScribeEventRecorderTest {
-
-    private ScribeEventRecorder subject;
-    @Mock private EventSampler mockEventSampler;
-    @Mock private Queue<BaseEvent> mockQueue;
-    @Mock private EventSerializer mockEventSerializer;
-    @Mock private ScribeRequestManager mockScribeRequestManager;
-    @Mock private Handler mockHandler;
-    @Mock private Event mockEvent;
-
-    @Before
-    public void setUp() {
-        subject = new ScribeEventRecorder(
-                mockEventSampler,
-                mockQueue,
-                mockEventSerializer,
-                mockScribeRequestManager,
-                mockHandler
-        );
-
-        when(mockEventSampler.sample(any(Event.class))).thenReturn(true);
-    }
-
-    @Test
-    public void record_shouldSampleEvent() throws Exception {
-        subject.record(mockEvent);
-        verify(mockEventSampler).sample(mockEvent);
-    }
-
-    @Test
-    public void record_withQueueSizeBelowSendThreshold_shouldQueueEvent_shouldNotSendEvents_shouldScheduleNextPoll() throws Exception {
-        when(mockQueue.size()).thenReturn(99);
-
-        subject.record(mockEvent);
-
-        verify(mockQueue).add(mockEvent);
-        verify(mockScribeRequestManager, never()).makeRequest(any(ScribeRequest.ScribeRequestFactory.class), any(ScribeBackoffPolicy.class));
-        verify(mockHandler).postDelayed(any(ScribeEventRecorder.PollingRunnable.class), eq(Long.valueOf(120000)));
-    }
-
-    @Test
-    public void record_withQueueSizeAtSendThreshold_shouldQueueEvent_shouldSendEvents_shouldScheduleNextPoll() throws Exception {
-        when(mockQueue.size()).thenReturn(100);
-        when(mockQueue.peek()).thenReturn(mockEvent);
-        when(mockQueue.poll()).thenReturn(mockEvent);
-
-        subject.record(mockEvent);
-
-        verify(mockQueue).add(mockEvent);
-        verify(mockScribeRequestManager).makeRequest(any(ScribeRequest.ScribeRequestFactory.class), any(ScribeBackoffPolicy.class));
-        verify(mockHandler).postDelayed(any(ScribeEventRecorder.PollingRunnable.class), eq(Long.valueOf(120000)));
-    }
-
-    @Test
-    public void record_withQueueSizeAtQueueLimit_shouldNotQueueEvent_shouldNotSendEvents_shouldNotScheduleNextPoll() throws Exception {
-        when(mockQueue.size()).thenReturn(500);
-
-        subject.record(mockEvent);
-
-        verify(mockQueue, never()).add(mockEvent);
-        verify(mockScribeRequestManager, never()).makeRequest(any(ScribeRequest.ScribeRequestFactory.class), any(ScribeBackoffPolicy.class));
-        verify(mockHandler, never()).postDelayed(any(ScribeEventRecorder.PollingRunnable.class), anyLong());
-    }
-
-    @Test
-    public void sendEvents_shouldDequeueEvents_shouldAddRequestToScribeRequestManager() throws Exception {
-        when(mockQueue.size()).thenReturn(1);
-        when(mockQueue.peek()).thenReturn(mockEvent).thenReturn(null);
-        when(mockQueue.poll()).thenReturn(mockEvent).thenReturn(null);
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocation) throws Throwable {
-                ScribeRequest scribeRequest = ((ScribeRequest.ScribeRequestFactory) invocation.getArguments()[0]).createRequest(null);
-                assertThat(scribeRequest.getUrl()).isEqualTo("https://analytics.mopub.com/i/jot/exchange_client_event");
-                assertThat(scribeRequest.getEvents()).containsOnly(mockEvent);
-                return null;
-            }
-        }).when(mockScribeRequestManager).makeRequest(any(ScribeRequest.ScribeRequestFactory.class), any(ScribeBackoffPolicy.class));
-
-        subject.sendEvents();
-
-        verify(mockQueue, times(2)).peek();
-        verify(mockQueue, times(1)).poll();
-        verify(mockScribeRequestManager).makeRequest(any(ScribeRequest.ScribeRequestFactory.class), any(ScribeBackoffPolicy.class));
-    }
-
-    @Test
-    public void sendEvents_withRequestInFlightShouldReturnFast() throws Exception {
-        when(mockScribeRequestManager.isAtCapacity()).thenReturn(true);
-
-        subject.sendEvents();
-
-        verify(mockQueue, never()).poll();
-        verify(mockScribeRequestManager, never()).makeRequest(any(ScribeRequest.ScribeRequestFactory.class), any(ScribeBackoffPolicy.class));
-    }
-    
-    @Test
-    public void dequeEvents_withQueueSizeGreaterThanEventSendThreshhold_shouldDequeueUpToEventSendThreshhold() throws Exception {
-        when(mockQueue.size()).thenReturn(101);
-        when(mockQueue.peek()).thenReturn(mockEvent);
-        when(mockQueue.poll()).thenReturn(mockEvent);
-
-        List<BaseEvent> events = subject.dequeueEvents();
-
-        verify(mockQueue, times(101)).peek();
-        verify(mockQueue, times(100)).poll();
-        assertThat(events.size()).isEqualTo(100);
-    }
-
-    @Test
-    public void dequeEvents_withQueueSizeLessThanEventSendThreshhold_shouldDequeueQueueSize() throws Exception {
-        when(mockQueue.size()).thenReturn(99);
-
-        when(mockQueue.peek()).thenAnswer(new Answer<BaseEvent>() {
-            int i;
-            @Override
-            public BaseEvent answer(InvocationOnMock invocation) throws Throwable {
-                return i++ < 99 ? mockEvent : null;
-            }
-        });
-
-        when(mockQueue.poll()).thenAnswer(new Answer<BaseEvent>() {
-            int i;
-            @Override
-            public BaseEvent answer(InvocationOnMock invocation) throws Throwable {
-                return i++ < 99 ? mockEvent : null;
-            }
-        });
-
-        List<BaseEvent> events = subject.dequeueEvents();
-
-        verify(mockQueue, times(100)).peek();
-        verify(mockQueue, times(99)).poll();
-        assertThat(events.size()).isEqualTo(99);
-    }
-
-    @Test
-    public void scheduleNextPoll_shouldPostDelayedPollingRunnable() throws Exception {
-        when(mockHandler.hasMessages(0)).thenReturn(false);
-        when(mockQueue.isEmpty()).thenReturn(false);
-
-        subject.scheduleNextPoll();
-
-        verify(mockHandler).postDelayed(any(ScribeEventRecorder.PollingRunnable.class), eq(Long.valueOf(120000)));
-    }
-
-    @Test
-    public void scheduleNextPoll_withPollScheduled_shouldNotPostDelayedPollingRunnable() throws Exception {
-        when(mockHandler.hasMessages(0)).thenReturn(true);
-        when(mockQueue.isEmpty()).thenReturn(false);
-
-        subject.scheduleNextPoll();
-
-        verify(mockHandler, never()).postDelayed(any(ScribeEventRecorder.PollingRunnable.class), anyLong());
-    }
-
-    @Test
-    public void scheduleNextPoll_withEmptyRequestQueue_shouldNotPostDelayedPollingRunnable() throws Exception {
-        when(mockHandler.hasMessages(0)).thenReturn(false);
-        when(mockQueue.isEmpty()).thenReturn(true);
-
-        subject.scheduleNextPoll();
-
-        verify(mockHandler, never()).postDelayed(any(ScribeEventRecorder.PollingRunnable.class), anyLong());
-    }
-
-    @Test
-    public void PollingRunnable_run_shouldSendEvents_shouldScheduleNextPoll() throws Exception {
-        when(mockQueue.size()).thenReturn(100);
-        when(mockQueue.peek()).thenReturn(mockEvent);
-        when(mockQueue.poll()).thenReturn(mockEvent);
-
-        ScribeEventRecorder.PollingRunnable pollingRunnable = subject.new PollingRunnable();
-        pollingRunnable.run();
-
-        verify(mockScribeRequestManager).makeRequest(any(ScribeRequest.ScribeRequestFactory.class), any(ScribeBackoffPolicy.class));
-        verify(mockHandler).postDelayed(any(ScribeEventRecorder.PollingRunnable.class), eq(Long.valueOf(120000)));
-    }
-}
-
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/AdvertisingIdTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/AdvertisingIdTest.java
new file mode 100644
index 00000000..2040d0f8
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/AdvertisingIdTest.java
@@ -0,0 +1,80 @@
+package com.mopub.common.privacy;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import java.util.Calendar;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class AdvertisingIdTest {
+    private static final long ONE_DAY_MS = 24 * 60 * 60 * 1000;
+    private static final long TEN_SECONDS_MS = 10 * 1000;
+
+    private static final String MOPUB_ID = "test-id-mopub";
+    private static final String ANDROID_ID = "test-id-android";
+
+    private AdvertisingId subject;
+    private Calendar time;
+    private long now;
+
+    @Before
+    public void setup() {
+        time = Calendar.getInstance();
+        now = time.getTimeInMillis();
+    }
+
+    @Test
+    public void constructor_shouldInitializeCorrectly() {
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, false, now);
+        assertThat(subject.mAdvertisingId).isEqualTo(ANDROID_ID);
+        assertThat(subject.mMopubId).isEqualTo(MOPUB_ID);
+        assertThat(subject.mDoNotTrack).isFalse();
+        assertThat(subject.mLastRotation).isEqualTo(time);
+    }
+
+    @Test
+    public void isRotationRequired_whenMoreThan24Hours_shouldReturnTrue() {
+        // one day and ten seconds ago
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, false, now - ONE_DAY_MS - TEN_SECONDS_MS);
+        assertThat(subject.isRotationRequired()).isTrue();
+    }
+
+    @Test
+    public void isRotationRequired_whenLessThan24Hours_shouldReturnFalse() {
+        // one day and ten seconds ago
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, false, now - ONE_DAY_MS + TEN_SECONDS_MS);
+        assertThat(subject.isRotationRequired()).isFalse();
+    }
+
+    @Test
+    public void getIdWithPrefix_whenDoNotTrackFalse_shouldReturnIfaString() {
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, false, now);
+        assertThat(subject.getIdWithPrefix(true)).isEqualTo("ifa:" + ANDROID_ID);
+    }
+
+    @Test
+    public void getIdWithPrefix_whenAndroidIdUnavailable_shouldReturnMopubString() {
+        subject = new AdvertisingId("", MOPUB_ID, false, now);
+        assertThat(subject.getIdWithPrefix(true)).isEqualTo("mopub:" + MOPUB_ID);
+    }
+
+    @Test
+    public void getIdWithPrefix_whenUserConsentFalse_shouldReturnMopubString() {
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, false, now);
+        assertThat(subject.getIdWithPrefix(false)).isEqualTo("mopub:" + MOPUB_ID);
+    }
+
+    @Test
+    public void getIdWithPrefix_whenUserConsentTrue_shouldReturnIfaString() {
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, false, now);
+        assertThat(subject.getIdWithPrefix(true)).isEqualTo("ifa:" + ANDROID_ID);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogActivityTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogActivityTest.java
new file mode 100644
index 00000000..51b2048d
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogActivityTest.java
@@ -0,0 +1,106 @@
+package com.mopub.common.privacy;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Handler;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Reflection;
+import com.mopub.mobileads.BuildConfig;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.android.controller.ActivityController;
+import org.robolectric.annotation.Config;
+
+import java.lang.reflect.Field;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class ConsentDialogActivityTest {
+    private static final String HTML = "some_html";
+
+    private Context context;
+
+    private ActivityController<ConsentDialogActivity> activityController;
+    private ConsentDialogActivity subject;
+    private Intent intent;
+
+    @Before
+    public void setUp() throws Exception {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        intent = ConsentDialogActivity.createIntent(context, HTML);
+        activityController = Robolectric.buildActivity(ConsentDialogActivity.class);
+    }
+
+    @Test
+    public void createIntent_correctParameters_shouldCreateValidIntent() {
+        intent = ConsentDialogActivity.createIntent(context, HTML);
+        assertThat(intent.getStringExtra("html-page-content")).isEqualTo(HTML);
+        assertThat(intent.getComponent()).isNotNull();
+        assertThat(intent.getComponent().getClassName()).isEqualTo(ConsentDialogActivity.class.getCanonicalName());
+    }
+
+    @Test
+    public void onCreate_shouldSetContentView() {
+        subject = activityController.get();
+        subject.setIntent(intent);
+        subject.onCreate(null);
+
+        ConsentDialogLayout mView = (ConsentDialogLayout) getContentView();
+        assertThat(mView).isNotNull();
+    }
+
+    @Test
+    public void setCloseButtonVisible_shouldCallViewAndClearHandler() throws NoSuchFieldException, IllegalAccessException {
+        subject = activityController.create().get();
+
+        Handler handler = mock(Handler.class);
+        ConsentDialogLayout dialogLayout = mock(ConsentDialogLayout.class);
+
+        Field fieldHandler = Reflection.getPrivateField(ConsentDialogActivity.class, "mCloseButtonHandler");
+        fieldHandler.set(subject, handler);
+
+        Field fieldLayout = Reflection.getPrivateField(ConsentDialogActivity.class, "mView");
+        fieldLayout.set(subject, dialogLayout);
+
+        subject.setCloseButtonVisibility(true);
+
+        verify(handler, times(1)).removeCallbacks(any(Runnable.class));
+        verify(dialogLayout, times(1)).setCloseVisible(true);
+    }
+
+    @Test
+    public void setCloseButtonInvisible_shouldCallViewAndClearHandler() throws NoSuchFieldException, IllegalAccessException {
+        subject = activityController.create().get();
+
+        Handler handler = mock(Handler.class);
+        ConsentDialogLayout dialogLayout = mock(ConsentDialogLayout.class);
+
+        Field fieldHandler = Reflection.getPrivateField(ConsentDialogActivity.class, "mCloseButtonHandler");
+        fieldHandler.set(subject, handler);
+
+        Field fieldLayout = Reflection.getPrivateField(ConsentDialogActivity.class, "mView");
+        fieldLayout.set(subject, dialogLayout);
+
+        subject.setCloseButtonVisibility(false);
+
+        verify(handler, times(1)).removeCallbacks(any(Runnable.class));
+        verify(dialogLayout, times(1)).setCloseVisible(false);
+    }
+
+    private FrameLayout getContentView() {
+        return (FrameLayout) ((ViewGroup) subject.findViewById(android.R.id.content)).getChildAt(0);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogLayoutTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogLayoutTest.java
new file mode 100644
index 00000000..dd963b95
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogLayoutTest.java
@@ -0,0 +1,94 @@
+package com.mopub.common.privacy;
+
+import android.app.Activity;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Reflection;
+import com.mopub.mobileads.BuildConfig;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.lang.reflect.Field;
+
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class ConsentDialogLayoutTest {
+
+    @Mock
+    private ConsentDialogLayout.ConsentListener consentListener;
+    @Mock
+    private ConsentDialogLayout.PageLoadListener pageLoadListener;
+    @Mock
+    private WebView mockWebView;
+
+    private ConsentDialogLayout subject;
+    private WebViewClient webViewClient;
+
+    @Before
+    public void setUp() throws Exception {
+        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
+        subject = new ConsentDialogLayout(activity);
+        Field webClientField = Reflection.getPrivateField(ConsentDialogLayout.class, "webViewClient");
+        webViewClient = (WebViewClient) webClientField.get(subject);
+    }
+
+    @Test
+    public void webViewClient_shouldOverrideUrlLoading_withConsentYes_shouldCallConsentClick() {
+        subject.setConsentClickListener(consentListener);
+
+        webViewClient.shouldOverrideUrlLoading(mockWebView, ConsentDialogLayout.URL_CONSENT_YES);
+
+        verify(consentListener).onConsentClick(ConsentStatus.EXPLICIT_YES);
+        verify(consentListener, never()).onCloseClick();
+    }
+
+    @Test
+    public void webViewClient_shouldOverrideUrlLoading_withConsentNo_shouldCallConsentClick() {
+        subject.setConsentClickListener(consentListener);
+
+        webViewClient.shouldOverrideUrlLoading(mockWebView, ConsentDialogLayout.URL_CONSENT_NO);
+
+        verify(consentListener).onConsentClick(ConsentStatus.EXPLICIT_NO);
+        verify(consentListener, never()).onCloseClick();
+    }
+
+    @Test
+    public void webViewClient_shouldOverrideUrlLoading_closeClick_shouldCallCloseClick() {
+        subject.setConsentClickListener(consentListener);
+
+        webViewClient.shouldOverrideUrlLoading(mockWebView, ConsentDialogLayout.URL_CLOSE);
+
+        verify(consentListener, never()).onConsentClick(any(ConsentStatus.class));
+        verify(consentListener).onCloseClick();
+    }
+
+    @Test
+    public void webViewClient_shouldOverrideUrlLoading_withAnyOtherUrls_shouldNotCallListener() {
+        subject.setConsentClickListener(consentListener);
+
+        webViewClient.shouldOverrideUrlLoading(mockWebView, "some other url");
+
+        verify(consentListener, never()).onConsentClick(any(ConsentStatus.class));
+        verify(consentListener, never()).onCloseClick();
+    }
+
+    @Test
+    public void webViewClient_onPageFinished_shouldCall_onLoadProgress() {
+        subject.startLoading("html_page", pageLoadListener);
+
+        webViewClient.onPageFinished(mockWebView, "some_url");
+
+        verify(pageLoadListener).onLoadProgress(ConsentDialogLayout.FINISHED_LOADING);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogRequestTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogRequestTest.java
new file mode 100644
index 00000000..f3907ced
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogRequestTest.java
@@ -0,0 +1,114 @@
+package com.mopub.common.privacy;
+
+import android.app.Activity;
+
+import com.mopub.common.Constants;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.network.MoPubNetworkError;
+import com.mopub.volley.DefaultRetryPolicy;
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.Response;
+import com.mopub.volley.RetryPolicy;
+import com.mopub.volley.VolleyError;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.nio.charset.Charset;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class ConsentDialogRequestTest {
+    private static final String URL = "https://"+ Constants.HOST+"/m/gdpr_consent_dialog?adunit_id=testAdUnitId&nv=5.0.0&language=en";
+    private static final String HTML = "html-body-text";
+    private static final String BODY = "{ dialog_html : '" + HTML + "' }";
+
+    @Mock
+    private ConsentDialogRequest.Listener listener;
+
+    private Activity activity;
+    private ConsentDialogRequest subject;
+
+    @Before
+    public void setup() {
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+        subject = new ConsentDialogRequest(activity, URL, listener);
+    }
+
+    @Test
+    public void constructor_shouldSetParametersCorrectly() {
+        RetryPolicy retryPolicy = subject.getRetryPolicy();
+
+        assertThat(subject.getUrl()).isEqualTo(URL.substring(0, URL.indexOf('?')));
+        assertThat(retryPolicy).isNotNull();
+        assertThat(retryPolicy.getCurrentTimeout()).isEqualTo(DefaultRetryPolicy.DEFAULT_TIMEOUT_MS);
+        assertThat(subject.shouldCache()).isFalse();
+    }
+
+    @Test
+    public void parseNetworkResponse_validBody_shouldSucceed() {
+        NetworkResponse testResponse = new NetworkResponse(BODY.getBytes(Charset.defaultCharset()));
+        final Response<ConsentDialogResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.result).isNotNull();
+        assertThat(response.result.getHtml()).isEqualTo(HTML);
+    }
+
+    @Test
+    public void parseNetworkResponse_emptyBody_shouldReturnErrorBadBody() {
+        NetworkResponse testResponse = new NetworkResponse("".getBytes(Charset.defaultCharset()));
+        final Response<ConsentDialogResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.error).isNotNull();
+        assertThat(response.error).isInstanceOf(MoPubNetworkError.class);
+        assertThat(((MoPubNetworkError) response.error).getReason()).isEqualTo(MoPubNetworkError.Reason.BAD_BODY);
+    }
+
+    @Test
+    public void parseNetworkResponse_bodyBrokenJson_shouldReturnErrorBadBody() {
+        NetworkResponse testResponse = new NetworkResponse("{ html - 'body' }".getBytes(Charset.defaultCharset()));
+        final Response<ConsentDialogResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.error).isNotNull();
+        assertThat(response.error).isInstanceOf(MoPubNetworkError.class);
+        assertThat(((MoPubNetworkError) response.error).getReason()).isEqualTo(MoPubNetworkError.Reason.BAD_BODY);
+    }
+
+    @Test
+    public void parseNetworkResponse_jsonNoHtmlTag_shouldReturnErrorBadBody() {
+        NetworkResponse testResponse = new NetworkResponse("{ k: 1 }".getBytes(Charset.defaultCharset()));
+        final Response<ConsentDialogResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.error).isNotNull();
+        assertThat(response.error).isInstanceOf(MoPubNetworkError.class);
+        assertThat(((MoPubNetworkError) response.error).getReason()).isEqualTo(MoPubNetworkError.Reason.BAD_BODY);
+    }
+
+    @Test
+    public void deliverResponse_validListener_callsListener() {
+        ConsentDialogResponse response = new ConsentDialogResponse("html-text");
+        subject.deliverResponse(response);
+
+        verify(listener).onSuccess(response);
+    }
+
+    @Test
+    public void deliverResponse_nullListener_doesntCrash() {
+        subject = new ConsentDialogRequest(activity, URL, null);
+        ConsentDialogResponse response = new ConsentDialogResponse("html-text");
+        subject.deliverResponse(response);
+
+        verify(listener, never()).onSuccess(any(ConsentDialogResponse.class));
+        verify(listener, never()).onErrorResponse(any(VolleyError.class));
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java
new file mode 100644
index 00000000..71d84100
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java
@@ -0,0 +1,296 @@
+package com.mopub.common.privacy;
+
+import android.app.Activity;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.provider.Settings;
+import android.support.annotation.NonNull;
+
+import com.mopub.common.GpsHelper;
+import com.mopub.common.util.Reflection;
+import com.mopub.mobileads.BuildConfig;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+
+import org.powermock.modules.junit4.rule.PowerMockRule;
+import org.robolectric.Robolectric;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.annotation.Config;
+
+import java.util.Calendar;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.verify;
+
+@RunWith(RobolectricTestRunner.class)
+@Config(constants = BuildConfig.class)
+@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*", "org.json.*"})
+@PrepareForTest(GpsHelper.class)
+public class MoPubIdentifierTest {
+    @Rule
+    public PowerMockRule rule = new PowerMockRule();
+
+    private MoPubIdentifier.AdvertisingIdChangeListener idChangeListener;
+
+    private Context context;
+    private MoPubIdentifier subject;
+
+    private static final String GOOGLE_AD_ID = "google_ad_id";
+    private static final String AMAZON_AD_ID = "amazon_ad_id";
+    private static final String TEST_IFA_ID = "test_ifa_id";
+    public static final String TEST_MOPUB_ID = "test_mopub_id";
+
+    @Before
+    public void setup() {
+        Activity activity = Robolectric.buildActivity(Activity.class).get();
+        context = activity.getApplicationContext();
+        idChangeListener = mock(MoPubIdentifier.AdvertisingIdChangeListener.class);
+    }
+
+    @After
+    public void tearDown() {
+        // delete changes made by setupAmazonAdvertisingInfo
+        ContentResolver resolver = RuntimeEnvironment.application.getContentResolver();
+        Settings.Secure.putString(resolver, "limit_ad_tracking", null);
+        Settings.Secure.putString(resolver, "advertising_id", null);
+        // clear shared preferences
+        MoPubIdentifier.clearStorage(context);
+    }
+
+    @Test
+    public void constructor_nonFirstStart_shouldNotStartRefreshThread_shouldReadSharedPref() throws Exception {
+        AdvertisingId savedId = writeAdvertisingInfoToSharedPreferences(context, true);
+
+        subject = new MoPubIdentifier(context);
+
+        AdvertisingId idData = subject.getAdvertisingInfo();
+        assertThat(idData.mAdvertisingId).isEqualTo(savedId.mAdvertisingId);
+        assertThat(idData.mMopubId).isEqualTo(savedId.mMopubId);
+        assertThat(idData.isRotationRequired()).isEqualTo(savedId.isRotationRequired());
+        assertThat(idData.isDoNotTrack()).isEqualTo(savedId.isDoNotTrack());
+    }
+
+    @Test
+    public void refreshAdvertisingInfoBackgroundThread_noAmazonNoGoogle_expiredId_shouldCallListener() throws Exception {
+        AdvertisingId savedId = writeExpiredAdvertisingInfoToSharedPreferences(context, false);
+
+        ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+
+        subject = new MoPubIdentifier(context, idChangeListener);
+        verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
+
+        AdvertisingId oldId = oldIdClientCaptor.getValue();
+        AdvertisingId newId = newIdClientCaptor.getValue();
+
+        assertThat(oldId.mMopubId).isEqualTo(savedId.mMopubId);
+        assertThat(oldId.mAdvertisingId).isEqualTo(savedId.mAdvertisingId);
+        assertThat(oldId.isDoNotTrack()).isEqualTo(savedId.isDoNotTrack());
+
+        assertThat(newId.isDoNotTrack()).isFalse();
+        assertThat(newId.mAdvertisingId).isEmpty();
+        assertThat(newId.getIdWithPrefix(false)).contains("mopub:");
+    }
+
+    @Test
+    public void refreshAdvertisingInfoBackgroundThread_expiredId_listenerNotSet_shouldNotCrash() throws Exception {
+        AdvertisingId savedId = writeExpiredAdvertisingInfoToSharedPreferences(context, true);
+
+        subject = new MoPubIdentifier(context);
+        subject.setIdChangeListener(null);
+        subject.refreshAdvertisingInfoBackgroundThread();
+        verify(idChangeListener, never()).onIdChanged(any(AdvertisingId.class), any(AdvertisingId.class));
+
+        AdvertisingId newId = subject.getAdvertisingInfo();
+
+        assertThat(newId.mMopubId).isNotEqualTo(savedId.mMopubId);
+        assertThat(newId.mAdvertisingId).isNotEqualTo(savedId.mAdvertisingId);
+        assertThat(newId.isDoNotTrack()).isFalse();
+    }
+
+    @Test
+    public void refreshAdvertisingInfoBackgroundThread_noAmazonNoGoogle_nonExpiredId_shouldCallListenerOnlyOnce() throws Exception {
+        AdvertisingId savedId = writeAdvertisingInfoToSharedPreferences(context, false);
+
+        subject = new MoPubIdentifier(context, idChangeListener);
+        verify(idChangeListener).onIdChanged(any(AdvertisingId.class), any(AdvertisingId.class));
+
+        AdvertisingId idData = subject.getAdvertisingInfo();
+        assertThat(idData.getIdWithPrefix(true)).contains("ifa:");
+        assertThat(idData.mMopubId).isEqualTo(savedId.mMopubId);
+        assertThat(idData.mAdvertisingId).isEqualTo(savedId.mAdvertisingId);
+        assertThat(idData.isDoNotTrack()).isEqualTo(savedId.isDoNotTrack());
+
+        reset(idChangeListener);
+        subject.refreshAdvertisingInfoBackgroundThread();
+        verify(idChangeListener, never()).onIdChanged(any(AdvertisingId.class), any(AdvertisingId.class));
+    }
+
+    @Test
+    public void refreshAdvertisingInfoBackgroundThread_amazonNoGoogle_shoulUseAmazonId() throws Exception {
+        AdvertisingId savedId = writeAdvertisingInfoToSharedPreferences(context, false);
+        setupAmazonAdvertisingInfo(false);
+
+        ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+
+        subject = new MoPubIdentifier(context, idChangeListener);
+        verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
+
+        AdvertisingId oldId = oldIdClientCaptor.getValue();
+        AdvertisingId newId = newIdClientCaptor.getValue();
+
+        assertThat(oldId.mMopubId).isEqualTo(savedId.mMopubId);
+        assertThat(oldId.mAdvertisingId).isEqualTo(savedId.mAdvertisingId);
+        assertThat(oldId.isDoNotTrack()).isEqualTo(savedId.isDoNotTrack());
+        assertThat(oldId.getIdWithPrefix(true)).isEqualTo(savedId.getIdWithPrefix(true));
+
+        assertThat(newId.isDoNotTrack()).isFalse();
+        assertThat(newId.mAdvertisingId).isEqualTo(AMAZON_AD_ID);
+        assertThat(newId.mMopubId).isEqualTo(savedId.mMopubId);
+    }
+
+    @Test
+    public void refreshAdvertisingInfoBackgroundThread_googleNoAmazon_doNotTrackFalse_shoulUseGoogleId() throws Exception {
+        AdvertisingId savedId = writeAdvertisingInfoToSharedPreferences(context, false);
+        setupGooglePlayService(context, false);
+
+        ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+
+        subject = new MoPubIdentifier(context, idChangeListener);
+        verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
+
+        AdvertisingId oldId = oldIdClientCaptor.getValue();
+        AdvertisingId newId = newIdClientCaptor.getValue();
+
+        assertThat(oldId.mMopubId).isEqualTo(savedId.mMopubId);
+        assertThat(oldId.mAdvertisingId).isEqualTo(savedId.mAdvertisingId);
+        assertThat(oldId.isDoNotTrack()).isEqualTo(savedId.isDoNotTrack());
+        assertThat(oldId.getIdWithPrefix(true)).isEqualTo(savedId.getIdWithPrefix(true));
+
+        assertThat(newId.isDoNotTrack()).isFalse();
+        assertThat(newId.mAdvertisingId).isEqualTo(GOOGLE_AD_ID);
+        assertThat(newId.mMopubId).isEqualTo(savedId.mMopubId);
+        assertThat(newId.getIdWithPrefix(true)).isEqualTo("ifa:" + GOOGLE_AD_ID);
+    }
+
+    @Test
+    public void refreshAdvertisingInfoBackgroundThread_googleNoAmazon_doNotTrackTrue_shoulUseGoogleId() throws Exception {
+        AdvertisingId savedId = writeAdvertisingInfoToSharedPreferences(context, false);
+        setupGooglePlayService(context, true);
+
+        ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+
+        subject = new MoPubIdentifier(context, idChangeListener);
+        verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
+
+        AdvertisingId oldId = oldIdClientCaptor.getValue();
+        AdvertisingId newId = newIdClientCaptor.getValue();
+
+        assertThat(oldId.mMopubId).isEqualTo(savedId.mMopubId);
+        assertThat(oldId.mAdvertisingId).isEqualTo(savedId.mAdvertisingId);
+        assertThat(oldId.isDoNotTrack()).isEqualTo(savedId.isDoNotTrack());
+        assertThat(oldId.getIdWithPrefix(true)).isEqualTo(savedId.getIdWithPrefix(true));
+
+        assertThat(newId.isDoNotTrack()).isTrue();
+        assertThat(newId.mAdvertisingId).isEqualTo(GOOGLE_AD_ID);
+        assertThat(newId.mMopubId).isEqualTo(savedId.mMopubId);
+        assertThat(newId.getIdWithPrefix(true)).isEqualTo("mopub:" + savedId.mMopubId);
+    }
+
+    @Test
+    public void sharedPreferences_WriteAndRead_ShouldMatch() throws Exception {
+        final long time = Calendar.getInstance().getTimeInMillis();
+        AdvertisingId adConfig = new AdvertisingId(TEST_IFA_ID,
+                TEST_MOPUB_ID,
+                true,
+                time);
+
+        // save to shared preferences
+        new Reflection.MethodBuilder(null, "writeIdToStorage")
+                .setAccessible()
+                .setStatic(MoPubIdentifier.class)
+                .addParam(Context.class, context)
+                .addParam(AdvertisingId.class, adConfig)
+                .execute();
+
+        // read from shared preferences
+        AdvertisingId adConfig2 = (AdvertisingId)  new Reflection.MethodBuilder(null, "readIdFromStorage")
+                .setAccessible()
+                .setStatic(MoPubIdentifier.class)
+                .addParam(Context.class, context)
+                .execute();
+
+        assert null != adConfig2;
+        assertThat(adConfig2.mAdvertisingId).isEqualTo(TEST_IFA_ID);
+        assertThat(adConfig2.mMopubId).isEqualTo(TEST_MOPUB_ID);
+        assertThat(adConfig2.mDoNotTrack).isTrue();
+        assertThat(adConfig2.mLastRotation.getTimeInMillis()).isEqualTo(time);
+    }
+
+    public static void setupGooglePlayService(Context context, boolean limitAdTracking) {
+        PowerMockito.mockStatic(GpsHelper.class);
+        PowerMockito.when(GpsHelper.isPlayServicesAvailable(context)).thenReturn(true);
+        PowerMockito.when(GpsHelper.isLimitAdTrackingEnabled(context)).thenReturn(limitAdTracking);
+        PowerMockito.when(GpsHelper.fetchAdvertisingInfoSync(context)).thenReturn(new GpsHelper.AdvertisingInfo(GOOGLE_AD_ID, limitAdTracking));
+    }
+
+    public static void setupAmazonAdvertisingInfo(boolean limitAdTracking) {
+        ContentResolver resolver = RuntimeEnvironment.application.getContentResolver();
+        Settings.Secure.putInt(resolver, "limit_ad_tracking", limitAdTracking ? 1 : 0);
+        Settings.Secure.putString(resolver, "advertising_id", AMAZON_AD_ID);
+    }
+
+    // might be useful in other unit tests
+    public static void clearPreferences(@NonNull final Context context) {
+        try {
+            // clear shared preferences between tests
+            new Reflection.MethodBuilder(null, "clearStorage")
+                    .setAccessible()
+                    .setStatic(MoPubIdentifier.class)
+                    .addParam(Context.class, context)
+                    .execute();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    public static AdvertisingId writeAdvertisingInfoToSharedPreferences(Context context, boolean doNotTrack) throws Exception {
+        final long time = Calendar.getInstance().getTimeInMillis();
+        return writeAdvertisingInfoToSharedPreferences(context, doNotTrack, time);
+    }
+    private static AdvertisingId writeExpiredAdvertisingInfoToSharedPreferences(Context context, boolean doNotTrack) throws Exception {
+        final long time = Calendar.getInstance().getTimeInMillis()-AdvertisingId.ROTATION_TIME_MS;
+        return writeAdvertisingInfoToSharedPreferences(context, doNotTrack, time);
+    }
+    private static AdvertisingId writeAdvertisingInfoToSharedPreferences(Context context, boolean doNotTrack, long time) throws Exception {
+        AdvertisingId adConfig = new AdvertisingId(TEST_IFA_ID,
+                TEST_MOPUB_ID,
+                doNotTrack,
+                time);
+
+        // save to shared preferences
+        new Reflection.MethodBuilder(null, "writeIdToStorage")
+                .setAccessible()
+                .setStatic(MoPubIdentifier.class)
+                .addParam(Context.class, context)
+                .addParam(AdvertisingId.class, adConfig)
+                .execute();
+        return adConfig;
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoDataTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoDataTest.java
new file mode 100644
index 00000000..bc2e5450
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoDataTest.java
@@ -0,0 +1,45 @@
+package com.mopub.common.privacy;
+
+import android.app.Activity;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class PersonalInfoDataTest {
+
+    Activity activity;
+    PersonalInfoData subject;
+
+    @Before
+    public void setUp() {
+        activity = Robolectric.buildActivity(Activity.class).get();
+        subject = new PersonalInfoData(activity, "adUnit");
+    }
+
+    @Test
+    public void replaceLanguageMacro_withIncorrectLanguageMacro_shouldKeepStringAsIs() {
+        String result = PersonalInfoData.replaceLanguageMacro(
+                "someurl%LANGUAGE%%://%%LANGUAGE%/someLANGUAGE",
+                activity, null);
+
+        assertThat(result).isEqualTo("someurl%LANGUAGE%%://%%LANGUAGE%/someLANGUAGE");
+    }
+
+    @Test
+    public void replaceLanguageMacro_withLanguageMacro_shouldReplaceLanguageMacro() {
+        String result = PersonalInfoData.replaceLanguageMacro("someurl://%%LANGUAGE%%/somepath",
+                activity, null);
+
+        assertThat(result).isEqualTo("someurl://en/somepath");
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoManagerTest.java
new file mode 100644
index 00000000..7533b233
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoManagerTest.java
@@ -0,0 +1,35 @@
+package com.mopub.common.privacy;
+
+import android.app.Activity;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class PersonalInfoManagerTest {
+
+    Activity activity;
+    PersonalInfoManager subject;
+
+    @Before
+    public void setUp() {
+        activity = Robolectric.buildActivity(Activity.class).get();
+    }
+
+    @Test
+    public void shouldMakeSyncRequest_withGdprAppliesNull_shouldReturnTrue() {
+        boolean actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, false, null, 300000,
+                null, false);
+
+        assertThat(actual).isTrue();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
index 4eb764b4..a4d42c0a 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
@@ -4,8 +4,6 @@
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.MoPub;
 import com.mopub.common.Preconditions;
-import com.mopub.common.event.EventDispatcher;
-import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.factories.MethodBuilderFactory;
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.DateAndTime;
@@ -45,7 +43,6 @@
 import org.robolectric.android.util.concurrent.RoboExecutorService;
 
 import static com.mopub.common.MoPub.LocationAwareness;
-import static org.mockito.Mockito.mock;
 
 public class SdkTestRunner extends RobolectricTestRunner {
 
@@ -84,7 +81,6 @@ public void prepareTest(Object test) {
             ShadowAsyncTasks.reset();
             ShadowMoPubHttpUrlConnection.reset();
             ShadowReflection.reset();
-            MoPubEvents.setEventDispatcher(mock(EventDispatcher.class));
             MoPub.setLocationAwareness(LocationAwareness.NORMAL);
             MoPub.setLocationPrecision(6);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
index a3d8cce8..055bc8cc 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
@@ -94,6 +94,22 @@ public void checkNativeSdkActivitiesDeclared_shouldIncludeOneActivityDeclaration
         );
     }
 
+    @Test
+    public void checSdkActivitiesDeclared_shouldIncludeOneActivityDeclaration() throws Exception {
+        ShadowLog.setupLogging();
+
+        ManifestUtils.checkSdkActivitiesDeclared(context);
+
+        assertLogIncludes("com.mopub.common.privacy.ConsentDialogActivity");
+        assertLogDoesntInclude(
+                "com.mopub.mobileads.MoPubActivity",
+                "com.mopub.mobileads.MraidActivity",
+                "com.mopub.mobileads.MraidVideoPlayerActivity",
+                "com.mopub.mobileads.RewardedMraidActivity",
+                "com.mopub.common.MoPubBrowser"
+        );
+    }
+
     @Test
     public void displayWarningForMissingActivities_withAllActivitiesDeclared_shouldNotShowLogOrToast() throws Exception {
         shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
index b28dc1c4..29dc5dfa 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
@@ -8,6 +8,8 @@
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.ResponseHeader;
 
+import org.json.JSONException;
+import org.json.JSONObject;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -15,6 +17,7 @@
 import org.robolectric.annotation.Config;
 
 import java.util.HashMap;
+import java.util.Map;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
@@ -26,7 +29,7 @@
     private String customEventName;
     private MoPubView moPubView;
     private MoPubInterstitial.MoPubInterstitialView moPubInterstitialView;
-    HashMap<String, String> headers;
+    JSONObject headers;
 
     @Before
     public void setUp() throws Exception {
@@ -37,7 +40,8 @@ public void setUp() throws Exception {
         stub(moPubView.getContext()).toReturn(context);
         stub(moPubInterstitialView.getContext()).toReturn(context);
 
-        headers = new HashMap<String, String>();
+        Map<String, String> stringHeaders = new HashMap<String, String>();
+        headers = new JSONObject(stringHeaders);
     }
 
     @Test
@@ -104,7 +108,7 @@ public void getCustomEventName_shouldBeVastInterstitial() {
     }
 
     @Test
-    public void getCustomEventName_shouldBeCustomClassName() {
+    public void getCustomEventName_shouldBeCustomClassName() throws JSONException {
         headers.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.example.CustomClass");
         customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, AdType.CUSTOM, null, headers);
 
@@ -112,10 +116,10 @@ public void getCustomEventName_shouldBeCustomClassName() {
     }
 
     @Test
-    public void getCustomEventName_whenNameNotInHeaders_shouldBeNull() {
+    public void getCustomEventName_whenNameNotInHeaders_shouldBeEmpty() {
         customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, AdType.CUSTOM, null, headers);
 
-        assertThat(customEventName).isNull();
+        assertThat(customEventName).isEmpty();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
index 2cd5ee27..5e1751d7 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
@@ -3,12 +3,18 @@
 import android.Manifest;
 import android.app.Activity;
 import android.content.Context;
+import android.location.Location;
 import android.net.ConnectivityManager;
+import android.net.Uri;
+import android.text.TextUtils;
 import android.view.Gravity;
 import android.view.View;
 import android.widget.FrameLayout;
 
 import com.mopub.common.AdFormat;
+import com.mopub.common.MoPub;
+import com.mopub.common.privacy.ConsentStatus;
+import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Reflection;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
@@ -70,11 +76,21 @@
     private AdResponse response;
     private Activity activity;
 
+    private PersonalInfoManager mockPersonalInfoManager;
+
     @Before
-    public void setup() {
+    public void setup() throws Exception {
         activity = Robolectric.buildActivity(Activity.class).create().get();
         Shadows.shadowOf(activity).grantPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE);
 
+        mockPersonalInfoManager = mock(PersonalInfoManager.class);
+        when(mockPersonalInfoManager.getPersonalInfoConsentStatus()).thenReturn(ConsentStatus.UNKNOWN);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+
         when(mockMoPubView.getAdFormat()).thenReturn(AdFormat.BANNER);
         when(mockMoPubView.getContext()).thenReturn(activity);
         Networking.setRequestQueueForTesting(mockRequestQueue);
@@ -110,6 +126,57 @@ public void cleanup_shouldNotHoldViewOrUrlGenerator() {
         assertThat(subject.generateAdUrl()).isNull();
     }
 
+    @Test
+    public void setUserDataKeywords_shouldNotSetKeywordIfNoUserConsent() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
+
+        subject.setUserDataKeywords("user_data_keywords");
+
+        assertThat(subject.getUserDataKeywords()).isNull();
+    }
+
+    @Test
+    public void setUserDataKeywords_shouldSetUserDataKeywordsIfUserConsent() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+
+        subject.setUserDataKeywords("user_data_keywords");
+
+        assertThat(subject.getUserDataKeywords()).isEqualTo("user_data_keywords");
+    }
+
+
+    @Test
+    public void generateAdUrl_shouldNotSetUserDataKeywordsIfNoUserConsent() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
+
+        subject.setAdUnitId("abc123");
+        subject.setKeywords("keywords");
+        subject.setUserDataKeywords("user_data_keywords");
+        subject.setLocation(new Location(""));
+        WebViewAdUrlGenerator mUrlGenerator = new WebViewAdUrlGenerator(mockMoPubView.getContext(), false);
+
+        final String adUrl = subject.generateAdUrl();
+        assertThat(getParameterFromRequestUrl(adUrl, "q")).isEqualTo("keywords");
+        assertThat(getParameterFromRequestUrl(adUrl, "user_data_keyword_q")).isEqualTo("");
+    }
+
+    @Test
+    public void generateAdUrl_shouldSetUserDataKeywordsIfUserConsent() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+        when(mockPersonalInfoManager.getPersonalInfoConsentStatus()).thenReturn(
+                ConsentStatus.EXPLICIT_YES);
+
+        subject.setAdUnitId("abc123");
+        subject.setKeywords("keywords");
+        subject.setUserDataKeywords("user_data_keywords");
+        subject.setLocation(new Location(""));
+        WebViewAdUrlGenerator mUrlGenerator = new WebViewAdUrlGenerator(mockMoPubView.getContext(), false);
+
+        final String adUrl = subject.generateAdUrl();
+        assertThat(getParameterFromRequestUrl(adUrl, "q")).isEqualTo("keywords");
+        assertThat(getParameterFromRequestUrl(adUrl, "user_data_q")).isEqualTo("user_data_keywords");
+    }
+
     @Test
     public void adDidFail_shouldScheduleRefreshTimer_shouldCallMoPubViewAdFailed() throws Exception {
         ShadowLooper.pauseMainLooper();
@@ -677,4 +744,15 @@ public void getErrorCodeFromVolleyError_withErrorReasonBadHeaderData_shouldRetur
 
         assertThat(errorCode).isEqualTo(MoPubErrorCode.UNSPECIFIED);
     }
+
+    private String getParameterFromRequestUrl(String requestString, String key) {
+        Uri requestUri = Uri.parse(requestString);
+        String parameter = requestUri.getQueryParameter(key);
+
+        if (TextUtils.isEmpty(parameter)) {
+            return "";
+        }
+
+        return parameter;
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/ConversionUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/ConversionUrlGeneratorTest.java
new file mode 100644
index 00000000..a4982e7e
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/ConversionUrlGeneratorTest.java
@@ -0,0 +1,99 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.mopub.common.ClientMetadata;
+import com.mopub.common.Constants;
+import com.mopub.common.MoPub;
+import com.mopub.nativeads.NativeUrlGeneratorTest;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.rule.PowerMockRule;
+import org.robolectric.Robolectric;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.powermock.api.mockito.PowerMockito.mock;
+import static org.powermock.api.mockito.PowerMockito.when;
+
+@RunWith(RobolectricTestRunner.class)
+@Config(constants = BuildConfig.class)
+@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*", "org.json.*"})
+@PrepareForTest(ClientMetadata.class)
+public class ConversionUrlGeneratorTest {
+    private static final String APP_VERSION = "app_version";
+    private static final String CONSENT_STATUS = "consent_status";
+    private static final String PRIVACY_VERSION = "privacy_version";
+    private static final String VENDOR_LIST_VERSION = "vendor_list_version";
+
+    @Rule
+    public PowerMockRule rule = new PowerMockRule();
+
+    private Context context;
+
+    @Before
+    public void setUp() throws Exception {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+
+        ClientMetadata clientMetadata = mock(ClientMetadata.class);
+        when(clientMetadata.getAppVersion()).thenReturn(APP_VERSION);
+
+        PowerMockito.mockStatic(ClientMetadata.class);
+        when(ClientMetadata.getInstance(context)).thenReturn(clientMetadata);
+    }
+
+    //https://ads.mopub.com/m/open?v=6&av=app_version&udid=mp_tmpl_advertising_id&dnt=mp_tmpl_do_not_track&id=com.mopub.mobileads&st=1&nv=5.0.0&current_consent_status=consent_status&consented_vendor_list_version=vendor_list_version&consented_privacy_policy_version=privacy_version&gdpr_applies=0
+    @Test
+    public void generateUrlString_allParametersSet_shouldReturnValidUrl() {
+        ConversionUrlGenerator subject = new ConversionUrlGenerator(context);
+
+        String url = subject.withGdprApplies(false)
+                .withCurrentConsentStatus(CONSENT_STATUS)
+                .withConsentedPrivacyPolicyVersion(PRIVACY_VERSION)
+                .withConsentedVendorListVersion(VENDOR_LIST_VERSION)
+                .withSessionTracker(true)
+                .generateUrlString(Constants.HOST);
+
+        assertThat(url).startsWith(Constants.HTTPS + "://" + Constants.HOST + Constants.CONVERSION_TRACKING_HANDLER);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url, "v")).isEqualTo("6");
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url, "nv")).isEqualTo(MoPub.SDK_VERSION);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url, "av")).isEqualTo(APP_VERSION);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url, "udid")).isEqualTo("mp_tmpl_advertising_id");
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url, "st")).isEqualTo("1");
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url, "current_consent_status")).isEqualTo(CONSENT_STATUS);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url, "gdpr_applies")).isEqualTo("0");
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url, "consented_vendor_list_version")).isEqualTo(VENDOR_LIST_VERSION);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url, "consented_privacy_policy_version")).isEqualTo(PRIVACY_VERSION);
+    }
+
+    @Test
+    public void generateUrlString_allParametersNoSt_shouldReturnValidUrl() {
+        ConversionUrlGenerator subject = new ConversionUrlGenerator(context);
+
+        String url = subject.withGdprApplies(false)
+                .withCurrentConsentStatus(CONSENT_STATUS)
+                .withConsentedPrivacyPolicyVersion(PRIVACY_VERSION)
+                .withConsentedVendorListVersion(VENDOR_LIST_VERSION)
+                .withSessionTracker(false)
+                .generateUrlString(Constants.HOST);
+
+        assertThat(url).startsWith(Constants.HTTPS + "://" + Constants.HOST + Constants.CONVERSION_TRACKING_HANDLER);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url, "v")).isEqualTo("6");
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url, "nv")).isEqualTo(MoPub.SDK_VERSION);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url, "av")).isEqualTo(APP_VERSION);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url, "udid")).isEqualTo("mp_tmpl_advertising_id");
+        assertThat(url.indexOf("&st=")).isEqualTo(-1);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url, "current_consent_status")).isEqualTo(CONSENT_STATUS);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url, "gdpr_applies")).isEqualTo("0");
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url, "consented_vendor_list_version")).isEqualTo(VENDOR_LIST_VERSION);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url, "consented_privacy_policy_version")).isEqualTo(PRIVACY_VERSION);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
index 4a5d95a8..f7691214 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
@@ -1,8 +1,15 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
+import android.content.SharedPreferences;
 
+import com.mopub.common.MoPub;
+import com.mopub.common.SharedPreferencesHelper;
+import com.mopub.common.privacy.ConsentData;
+import com.mopub.common.privacy.ConsentStatus;
+import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Reflection;
 import com.mopub.network.MoPubRequestQueue;
 import com.mopub.network.Networking;
 import com.mopub.network.TrackingRequest;
@@ -17,10 +24,13 @@
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
+import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
@@ -30,41 +40,105 @@
     @Mock
     MoPubRequestQueue mockRequestQueue;
     @Captor
-    ArgumentCaptor<TrackingRequest> requestCaptor;
+    private ArgumentCaptor<TrackingRequest> requestCaptor;
 
-    private String expectedUdid;
-    private boolean dnt = false;
     private static final String TEST_UDID = "20b013c721c";
+    private PersonalInfoManager mockPersonalInfoManager;
+    private SharedPreferences mSharedPreferences;
+    private String mPackageName;
+    private String mWantToTrack;
 
     @Before
     public void setUp() throws Exception {
-        subject = new MoPubConversionTracker();
         context = Robolectric.buildActivity(Activity.class).create().get();
         Networking.setRequestQueueForTesting(mockRequestQueue);
+
+        mockPersonalInfoManager = mock(PersonalInfoManager.class);
+        final ConsentData mockConsentData = mock(ConsentData.class);
+        when(mockPersonalInfoManager.getConsentData()).thenReturn(mockConsentData);
+        when(mockConsentData.getConsentedPrivacyPolicyVersion()).thenReturn("privacy_policy_version");
+        when(mockConsentData.getConsentedVendorListVersion()).thenReturn("vendor_list_version");
+        when(mockPersonalInfoManager.gdprApplies()).thenReturn(true);
+
+        subject = new MoPubConversionTracker(context);
     }
 
     @Test
-    public void reportAppOpen_Twice_shouldCallOnlyOnce() {
-        subject.reportAppOpen(context);
+    public void reportAppOpen_Twice_shouldCallOnlyOnce() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+        when(mockPersonalInfoManager.getPersonalInfoConsentStatus()).thenReturn(ConsentStatus.EXPLICIT_YES);
+
+        prepareMoPub_getPersonalInfoManager();
+
+        subject.reportAppOpen(false);
         verify(mockRequestQueue).add(requestCaptor.capture());
 
         reset(mockRequestQueue);
         requestCaptor.getValue().deliverResponse(null);
 
-        subject.reportAppOpen(context);
+        subject.reportAppOpen(false);
         verify(mockRequestQueue, never()).add(any(TrackingRequest.class));
     }
 
     @Test
-    public void reportAppOpen_fails_shouldCallAgain() {
-        subject.reportAppOpen(context);
+    public void reportAppOpen_fails_shouldCallAgain() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+        when(mockPersonalInfoManager.getPersonalInfoConsentStatus()).thenReturn(ConsentStatus.EXPLICIT_YES);
+
+        prepareMoPub_getPersonalInfoManager();
+
+        subject.reportAppOpen(true);
         verify(mockRequestQueue).add(requestCaptor.capture());
 
         reset(mockRequestQueue);
         requestCaptor.getValue().deliverError(new VolleyError());
 
-        subject.reportAppOpen(context);
+        subject.reportAppOpen(true);
         verify(mockRequestQueue).add(any(TrackingRequest.class));
     }
+
+    @Test
+    public void reportAppOpen_shouldNotTrackIfConsentIsFalse() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
+        prepareMoPub_getPersonalInfoManager();
+
+        subject.reportAppOpen(false);
+        mPackageName = context.getPackageName();
+        mWantToTrack = mPackageName + " wantToTrack";
+        mSharedPreferences = SharedPreferencesHelper.getSharedPreferences(context);
+        assertThat(mSharedPreferences.getBoolean(mWantToTrack, false)).isTrue();
+    }
+
+    @Test
+    public void reportAppOpen_shouldTrackWhenConsentIsFalse() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
+        prepareMoPub_getPersonalInfoManager();
+
+        assertThat(subject.shouldTrack()).isFalse();
+    }
+
+    @Test
+    public void reportAppOpen_shouldTrackWhenConsentIsTrueAndWantToTrack() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+        prepareMoPub_getPersonalInfoManager();
+
+        mPackageName = context.getPackageName();
+        mWantToTrack = mPackageName + " wantToTrack";
+        mSharedPreferences = SharedPreferencesHelper.getSharedPreferences(context);
+        mSharedPreferences
+                .edit()
+                .putBoolean(mWantToTrack, true)
+                .commit();
+
+        assertThat(subject.shouldTrack()).isTrue();
+    }
+
+    private void prepareMoPub_getPersonalInfoManager() throws Exception {
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+    }
 }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
index 201321c3..30bb636b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
@@ -91,18 +91,38 @@ public void forceRefresh_shouldResetInterstitialViewAndMarkNotDestroyed() throws
     }
 
     @Test
-    public void setKeywordsTest() throws Exception {
+    public void setUserDataKeywordsTest() throws Exception {
+        subject.setInterstitialView(interstitialView);
+        String userDataKeywords = "these_are_user_data_keywords";
+
+        subject.setUserDataKeywords(userDataKeywords);
+        verify(interstitialView).setUserDataKeywords(eq(userDataKeywords));
+    }
+
+    @Test
+    public void getUserDataKeywords() throws Exception {
+        subject.setInterstitialView(interstitialView);
+
+        subject.getUserDataKeywords();
+        verify(interstitialView).getUserDataKeywords();
+    }
+
+    @Test
+    public void setKeywords_withNonEmptyKeywords_shouldsetKeywordsOnInterstitialView() throws Exception {
         subject.setInterstitialView(interstitialView);
         String keywords = "these_are_keywords";
 
         subject.setKeywords(keywords);
+
         verify(interstitialView).setKeywords(eq(keywords));
     }
+
     @Test
-    public void getKeywordsTest() throws Exception {
+    public void getKeywordsTest_shouldCallGetKeywordsOnInterstitialView() throws Exception {
         subject.setInterstitialView(interstitialView);
 
         subject.getKeywords();
+
         verify(interstitialView).getKeywords();
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
index 44a7051d..f2dde7ce 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -2,20 +2,26 @@
 
 import android.app.Activity;
 import android.content.SharedPreferences;
-import android.net.Uri;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
 import com.mopub.common.AdType;
 import com.mopub.common.DataKeys;
 import com.mopub.common.LifecycleListener;
+import com.mopub.common.MoPub;
 import com.mopub.common.MoPubReward;
 import com.mopub.common.SharedPreferencesHelper;
+import com.mopub.common.privacy.ConsentStatus;
+import com.mopub.common.privacy.MoPubIdentifierTest;
+import com.mopub.common.privacy.PersonalInfoManager;
+import com.mopub.common.privacy.SyncRequest;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Reflection;
 import com.mopub.network.AdRequest;
 import com.mopub.network.AdResponse;
 import com.mopub.network.MoPubRequestQueue;
 import com.mopub.network.Networking;
+import com.mopub.volley.AuthFailureError;
 import com.mopub.volley.Request;
 import com.mopub.volley.VolleyError;
 
@@ -85,10 +91,12 @@
     private RewardedVideoCompletionRequest rewardedVideoCompletionRequest;
     private Activity mActivity;
     private SharedPreferences mTestCustomEventSharedPrefs;
+    private PersonalInfoManager mockPersonalInfoManager;
 
     @Before
-    public void setup() {
+    public void setup() throws Exception {
         mActivity = Robolectric.buildActivity(Activity.class).create().get();
+        MoPubIdentifierTest.writeAdvertisingInfoToSharedPreferences(mActivity, false);
         MoPubRewardedVideoManager.init(mActivity);
         // The fact that next call fixes issues in multiple tests proves that Robolectric doesn't
         // teardown singletons properly between tests.
@@ -100,6 +108,9 @@ public void setup() {
                         mActivity, TEST_CUSTOM_EVENT_PREF_NAME);
         MoPubRewardedVideoManager.setCustomEventSharedPrefs(mTestCustomEventSharedPrefs);
 
+        mockPersonalInfoManager = mock(PersonalInfoManager.class);
+        when(mockPersonalInfoManager.getPersonalInfoConsentStatus()).thenReturn(ConsentStatus.UNKNOWN);
+
         when(mockRequestQueue.add(any(Request.class))).then(new Answer<Object>() {
             @Override
             public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
@@ -111,6 +122,8 @@ public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
                 } else if (req.getClass().equals(RewardedVideoCompletionRequest.class)) {
                     rewardedVideoCompletionRequest = (RewardedVideoCompletionRequest) req;
                     return null;
+                } else if(req.getClass().equals(SyncRequest.class)){
+                    return null;
                 } else {
                     throw new Exception(String.format("Request object added to RequestQueue can " +
                             "only be of type AdRequest or RewardedVideoCompletionRequest, " +
@@ -129,6 +142,8 @@ public void tearDown() {
         MoPubRewardedVideoManager.getRewardedAdData().clear();
         MoPubRewardedVideoManager.getAdRequestStatusMapping().clearMapping();
         mTestCustomEventSharedPrefs.edit().clear().commit();
+        MoPubIdentifierTest.clearPreferences(mActivity);
+
     }
 
     @Test
@@ -231,14 +246,52 @@ public void initNetworks_shouldObeyOrderDuringInit() {
     }
 
     @Test
-    public void loadVideo_withRequestParameters_shouldGenerateUrlWithKeywords() {
+    public void createRequestParameters_withUserDataKeywordsButNoConsent_shouldNotSetUserDataKeywords() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+
+        MoPubRewardedVideoManager.RequestParameters requestParameters = new MoPubRewardedVideoManager.RequestParameters("keywords", "user_data_keywords",null, "testCustomerId");
+
+        assertThat(requestParameters.mKeywords).isEqualTo("keywords");
+        assertThat(requestParameters.mUserDataKeywords).isEqualTo(null);
+    }
+
+    @Test
+    public void createRequestParameters_withUserDataKeywordsWithConsent_shouldSetUserDataKeywords() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+
+        MoPubRewardedVideoManager.RequestParameters requestParameters = new MoPubRewardedVideoManager.RequestParameters("keywords", "user_data_keywords", null, "testCustomerId");
+
+        assertThat(requestParameters.mKeywords).isEqualTo("keywords");
+        assertThat(requestParameters.mUserDataKeywords).isEqualTo("user_data_keywords");
+    }
+
+    @Test
+    public void loadVideo_withRequestParameters_shouldGenerateUrlWithKeywords() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
         MoPubRewardedVideoManager.loadVideo("testAdUnit", new MoPubRewardedVideoManager.RequestParameters("nonsense;garbage;keywords"));
 
-        verify(mockRequestQueue).add(argThat(new RequestUrlContains(Uri.encode("nonsense;garbage;keywords"))));
+        verify(mockRequestQueue).add(argThat(new RequestBodyContains("nonsense;garbage;keywords")));
 
         // Finish the request
         requestListener.onErrorResponse(new VolleyError("end test"));
@@ -246,12 +299,18 @@ public void loadVideo_withRequestParameters_shouldGenerateUrlWithKeywords() {
     }
 
     @Test
-    public void loadVideo_withCustomerIdInRequestParameters_shouldSetCustomerId() {
+    public void loadVideo_withCustomerIdInRequestParameters_shouldSetCustomerId() throws Exception {
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", new MoPubRewardedVideoManager.RequestParameters("keywords", null, "testCustomerId"));
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", new MoPubRewardedVideoManager.RequestParameters("keywords", "user_data_keywords",null, "testCustomerId"));
 
         assertThat(MoPubRewardedVideoManager.getRewardedAdData().getCustomerId()).isEqualTo("testCustomerId");
 
@@ -415,7 +474,7 @@ public void onAdSuccess_noCEFound_shouldLoadFailUrl() {
 
         MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
 
-        assertThat(request.getUrl()).contains("testAdUnit");
+        assertThat(new String(request.getBody())).contains("testAdUnit");
         requestListener.onSuccess(testResponse);
         assertThat(request.getUrl()).isEqualTo("fail.url");
         // Clear up the static state :(
@@ -1088,7 +1147,7 @@ public void onAdFailure_shouldCallFailCallback() {
 
         MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
 
-        assertThat(request.getUrl()).contains("testAdUnit");
+        assertThat(new String(request.getBody())).contains("testAdUnit");
         requestListener.onErrorResponse(e);
         verify(mockVideoListener).onRewardedVideoLoadFailure(anyString(), any(MoPubErrorCode.class));
         verifyNoMoreInteractions(mockVideoListener);
@@ -1376,18 +1435,22 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity,
         }
     }
 
-    private static class RequestUrlContains extends ArgumentMatcher<Request> {
+    private static class RequestBodyContains extends ArgumentMatcher<Request> {
 
         private final String mMustContain;
 
-        RequestUrlContains(String stringToFind) {
+        RequestBodyContains(String stringToFind) {
             mMustContain = stringToFind;
         }
 
         @Override
         public boolean matches(final Object argument) {
-            return argument instanceof Request
-                    && ((Request) argument).getUrl().contains(mMustContain);
+            try {
+                return argument instanceof Request
+                        && new String(((Request) argument).getBody()).contains(mMustContain);
+            } catch (AuthFailureError authFailureError) {
+                return false;
+            }
         }
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
index 1fa858ca..3efadc75 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
@@ -8,10 +8,10 @@
 import com.mopub.common.CacheServiceTest;
 import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.mobileads.test.support.TestVastManagerFactory;
 import com.mopub.mobileads.test.support.VastUtils;
 
+import org.apache.http.HttpResponse;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -28,9 +28,9 @@
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 import static com.mopub.mobileads.VastManager.VastManagerListener;
@@ -51,7 +51,7 @@
     private CustomEventInterstitialListener customEventInterstitialListener;
     private Map<String, Object> localExtras;
     private Map<String, String> serverExtras;
-    private TestHttpResponseWithHeaders response;
+    private HttpResponse response;
     private String expectedResponse;
     private VastManager vastManager;
     private String videoUrl;
@@ -73,7 +73,7 @@ public void setUp() throws Exception {
         serverExtras = new HashMap<String, String>();
         serverExtras.put(DataKeys.HTML_RESPONSE_BODY_KEY, expectedResponse);
 
-        response = new TestHttpResponseWithHeaders(200, expectedResponse);
+        response = mock(HttpResponse.class);
 
         broadcastIdentifier = 2222;
         localExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
index 9053b737..5109e309 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
@@ -2,6 +2,8 @@
 
 import android.app.Activity;
 import android.content.Context;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
 import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.graphics.Point;
@@ -19,11 +21,18 @@
 import android.view.WindowManager;
 
 import com.mopub.common.ClientMetadata;
-import com.mopub.common.GpsHelper;
-import com.mopub.common.GpsHelperTest;
 import com.mopub.common.LocationService;
 import com.mopub.common.MoPub;
+import com.mopub.common.MoPubAdvancedBidder;
+import com.mopub.common.SdkConfiguration;
+import com.mopub.common.privacy.ConsentData;
+import com.mopub.common.privacy.ConsentStatus;
+import com.mopub.common.privacy.PersonalInfoManager;
+import com.mopub.common.privacy.AdvertisingId;
+import com.mopub.common.privacy.MoPubIdentifier;
+import com.mopub.common.privacy.MoPubIdentifierTest;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Reflection;
 import com.mopub.common.util.Reflection.MethodBuilder;
 import com.mopub.common.util.Utils;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
@@ -58,8 +67,10 @@
 import static android.net.ConnectivityManager.TYPE_WIFI;
 import static android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN;
 import static com.mopub.common.ClientMetadata.MoPubNetworkType;
+import static com.mopub.common.MoPubTest.INIT_ADUNIT;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.reset;
@@ -82,9 +93,11 @@
     private ShadowConnectivityManager shadowConnectivityManager;
     private Activity context;
     private MethodBuilder methodBuilder;
+    private PersonalInfoManager mockPersonalInfoManager;
+    private ConsentData mockConsentData;
 
     @Before
-    public void setup() {
+    public void setup() throws Exception {
         context = spy(Robolectric.buildActivity(Activity.class).create().get());
         Shadows.shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
         Shadows.shadowOf(context).grantPermissions(ACCESS_FINE_LOCATION);
@@ -116,10 +129,28 @@ public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
             }).when(mockDisplay).getRealSize(any(Point.class));
             when(mockWindowManager.getDefaultDisplay()).thenReturn(mockDisplay);
             final Context spyApplicationContext = spy(context.getApplicationContext());
+            when(spyApplicationContext.getResources()).thenReturn(spyResources);
+            when(spyApplicationContext.getPackageName()).thenReturn("testBundle");
+            PackageManager mockPackageManager = mock(PackageManager.class);
+            PackageInfo mockPackageInfo = mock(PackageInfo.class);
+            mockPackageInfo.versionName = BuildConfig.VERSION_NAME;
+            when(mockPackageManager.getPackageInfo(any(String.class), anyInt())).thenReturn(mockPackageInfo);
+            when(spyApplicationContext.getPackageManager()).thenReturn(mockPackageManager);
             when(spyApplicationContext.getSystemService(Context.WINDOW_SERVICE)).thenReturn(mockWindowManager);
             when(context.getApplicationContext()).thenReturn(spyApplicationContext);
+            when(spyApplicationContext.getApplicationContext()).thenReturn(spyApplicationContext);
         }
 
+        mockConsentData = mock(ConsentData.class);
+        mockPersonalInfoManager = mock(PersonalInfoManager.class);
+        when(mockPersonalInfoManager.getPersonalInfoConsentStatus()).thenReturn(ConsentStatus.UNKNOWN);
+        when(mockPersonalInfoManager.getConsentData()).thenReturn(mockConsentData);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+
         subject = new WebViewAdUrlGenerator(context,
                 new MraidNativeCommandHandler().isStorePictureSupported(context));
         Settings.Secure.putString(RuntimeEnvironment.application.getContentResolver(), Settings.Secure.ANDROID_ID, TEST_UDID);
@@ -130,16 +161,23 @@ public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
         methodBuilder = TestMethodBuilderFactory.getSingletonMock();
 
         LocationService.clearLastKnownLocation();
+        MoPubIdentifierTest.writeAdvertisingInfoToSharedPreferences(context, false);
     }
 
     @After
     public void tearDown() throws Exception {
         reset(methodBuilder);
+        ClientMetadata.clearForTesting();
+        MoPubIdentifierTest.clearPreferences(context);
+        new Reflection.MethodBuilder(null, "clearAdvancedBidders")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .execute();
     }
 
     @Test
-    public void generateAdUrl_shouldIncludeMinimumFields() throws Exception {
-        String expectedAdUrl = new AdUrlBuilder(expectedUdid).build();
+    public void generateAdUrl_shouldIncludeMinimumFields() {
+        String expectedAdUrl = new AdUrlBuilder(expectedUdid).withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue()).build();
 
         String adUrl = generateMinimumUrlString();
 
@@ -147,14 +185,16 @@ public void generateAdUrl_shouldIncludeMinimumFields() throws Exception {
     }
 
     @Test
-    public void generateAdUrl_withHttpsScheme() throws Exception {
+    public void generateAdUrl_withHttpsScheme() {
         String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).startsWith("http://");
+        assertThat(adUrl).startsWith("https://");
     }
 
     @Test
-    public void generateAdUrl_shouldRunMultipleTimes() throws Exception {
-        String expectedAdUrl = new AdUrlBuilder(expectedUdid).build();
+    public void generateAdUrl_shouldRunMultipleTimes() throws Exception{
+        String expectedAdUrl = new AdUrlBuilder(expectedUdid).withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue()).build();
+
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
 
         String adUrl = generateMinimumUrlString();
         assertThat(adUrl).isEqualTo(expectedAdUrl);
@@ -164,15 +204,33 @@ public void generateAdUrl_shouldRunMultipleTimes() throws Exception {
 
     @Test
     public void generateAdUrl_shouldIncludeAllFields() throws Exception {
+        SdkConfiguration sdkConfiguration = new SdkConfiguration.Builder(
+                INIT_ADUNIT).withAdvancedBidder(
+                WebViewAdvancedBidder.class).build();
+        MoPub.initializeSdk(context, sdkConfiguration, null);
+        MoPub.setAdvancedBiddingEnabled(true);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+
+        ClientMetadata.clearForTesting();
+
         final String expectedAdUrl = new AdUrlBuilder(expectedUdid)
                 .withAdUnitId("adUnitId")
-                .withQuery("key%3Avalue")
+                .withKeywordsQuery("keywordsKey%3AkeywordsValue")
+                .withUserDataQuery("userDataKey%3AuserDataValue")
                 .withLatLon("20.1%2C30.0", "1", "101325")
                 .withMcc("123")
                 .withMnc("456")
                 .withCountryIso("expected%20country")
                 .withCarrierName("expected%20carrier")
                 .withExternalStoragePermission(false)
+                .withAbt("{\"UrlGeneratorTest\":{\"token\":\"WebViewAdvancedBidderToken\"}}")
+                .withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue())
                 .build();
 
         shadowTelephonyManager.setNetworkOperator("123456");
@@ -187,7 +245,8 @@ public void generateAdUrl_shouldIncludeAllFields() throws Exception {
 
         String adUrl = subject
                 .withAdUnitId("adUnitId")
-                .withKeywords("key:value")
+                .withKeywords("keywordsKey:keywordsValue")
+                .withUserDataKeywords("userDataKey:userDataValue")
                 .withLocation(location)
                 .generateUrlString("ads.mopub.com");
 
@@ -195,10 +254,157 @@ public void generateAdUrl_shouldIncludeAllFields() throws Exception {
         adUrl = adUrl.replaceFirst("llf=101[0-9]{3}", "llf=101325");
 
         assertThat(adUrl).isEqualTo(expectedAdUrl);
+
+        new Reflection.MethodBuilder(null, "clearAdvancedBidders")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .execute();
+    }
+
+    @Test
+    public void generateAdUrl_shouldNotLocationFieldsWhenConsentIsFalse() throws Exception {
+        SdkConfiguration sdkConfiguration = new SdkConfiguration.Builder(
+                INIT_ADUNIT).withAdvancedBidder(WebViewAdvancedBidder.class).build();
+        MoPub.initializeSdk(context, sdkConfiguration, null);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
+
+        final String expectedAdUrl = new AdUrlBuilder(expectedUdid)
+                .withAdUnitId("adUnitId")
+                .withExternalStoragePermission(false)
+                .withKeywordsQuery("keywordsKey%3AkeywordsValue")
+                .withAbt("{\"UrlGeneratorTest\":{\"token\":\"WebViewAdvancedBidderToken\"}}")
+                .withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue())
+                .build();
+
+        shadowTelephonyManager.setNetworkOperator("123456");
+        shadowTelephonyManager.setNetworkCountryIso("expected country");
+        shadowTelephonyManager.setNetworkOperatorName("expected carrier");
+
+        Location location = new Location("");
+        location.setLatitude(20.1);
+        location.setLongitude(30.0);
+        location.setAccuracy(1.23f); // should get rounded to "1"
+        location.setTime(System.currentTimeMillis() - 101325);
+
+        String adUrl = subject
+                .withAdUnitId("adUnitId")
+                .withKeywords("keywordsKey:keywordsValue")
+                .withLocation(location)
+                .generateUrlString("ads.mopub.com");
+
+        // Only compare the seconds since millis can be off
+        adUrl = adUrl.replaceFirst("llf=101[0-9]{3}", "llf=101325");
+
+        assertThat(adUrl).isEqualTo(expectedAdUrl);
+    }
+
+    @Test
+    public void generateAdUrl_withAdvancedBiddingDisabled_shouldNotIncludeAbt() throws Exception {
+        SdkConfiguration sdkConfiguration = new SdkConfiguration.Builder(
+                INIT_ADUNIT).withAdvancedBidder(
+                WebViewAdvancedBidder.class).build();
+        MoPub.initializeSdk(context, sdkConfiguration, null);
+        MoPub.setAdvancedBiddingEnabled(false);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
+
+        final String expectedAdUrl = new AdUrlBuilder(expectedUdid)
+                .withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue())
+                .build();
+
+        String adUrl = subject.generateUrlString("ads.mopub.com");
+        assertThat(adUrl).isEqualTo(expectedAdUrl);
+
+        MoPub.setAdvancedBiddingEnabled(true);
+    }
+
+    @Test
+    public void generateAdUrl_withCollectUserDataDisabled_shouldNotIncludeKeywords() throws Exception {
+        SdkConfiguration sdkConfiguration = new SdkConfiguration.Builder(INIT_ADUNIT)
+                .withAdvancedBidder(WebViewAdvancedBidder.class).build();
+        MoPub.initializeSdk(context, sdkConfiguration, null);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
+
+        // expected has no keywords
+        final String expectedAdUrl = new AdUrlBuilder(expectedUdid)
+                .withAdUnitId("adUnitId")
+                .withKeywordsQuery("keywordsKey%3AkeywordsValue")
+                .withExternalStoragePermission(false)
+                .withAbt("{\"UrlGeneratorTest\":{\"token\":\"WebViewAdvancedBidderToken\"}}")
+                .withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue())
+                .build();
+
+        shadowTelephonyManager.setNetworkOperator("123456");
+        shadowTelephonyManager.setNetworkCountryIso("expected country");
+        shadowTelephonyManager.setNetworkOperatorName("expected carrier");
+
+        Location location = new Location("");
+        location.setLatitude(20.1);
+        location.setLongitude(30.0);
+        location.setAccuracy(1.23f); // should get rounded to "1"
+        location.setTime(System.currentTimeMillis() - 101325);
+
+        String adUrl = subject
+                .withAdUnitId("adUnitId")
+                .withUserDataKeywords("key:value")
+                .withKeywords("keywordsKey:keywordsValue")
+                .withLocation(location)
+                .generateUrlString("ads.mopub.com");
+
+        // Only compare the seconds since millis can be off
+        adUrl = adUrl.replaceFirst("llf=101[0-9]{3}", "llf=101325");
+
+        assertThat(adUrl).isEqualTo(expectedAdUrl);
+
+        new Reflection.MethodBuilder(null, "clearAdvancedBidders")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .execute();
+    }
+
+    @Test
+    public void generateAdUrl_withAdvancedBiddingEnabled_shouldIncludeAbt() throws Exception {
+        MoPub.setAdvancedBiddingEnabled(true);
+        SdkConfiguration sdkConfiguration = new SdkConfiguration.Builder(
+                "b195f8dd8ded45fe847ad89ed1d016da").withAdvancedBidder(
+                WebViewAdvancedBidder.class).build();
+        MoPub.initializeSdk(context, sdkConfiguration, null);
+
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
+
+        final String expectedAdUrl = new AdUrlBuilder(expectedUdid)
+                .withAbt("{\"UrlGeneratorTest\":{\"token\":\"WebViewAdvancedBidderToken\"}}")
+                .withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue())
+                .build();
+
+        String adUrl = subject.generateUrlString("ads.mopub.com");
+        assertThat(adUrl).isEqualTo(expectedAdUrl);
+
+        new Reflection.MethodBuilder(null, "clearAdvancedBidders")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .execute();
     }
 
     @Test
-    public void generateAdUrl_shouldRecognizeOrientation() throws Exception {
+    public void generateAdUrl_shouldRecognizeOrientation() {
         configuration.orientation = Configuration.ORIENTATION_LANDSCAPE;
         assertThat(generateMinimumUrlString()).contains("&o=l");
         configuration.orientation = Configuration.ORIENTATION_PORTRAIT;
@@ -208,8 +414,8 @@ public void generateAdUrl_shouldRecognizeOrientation() throws Exception {
     }
 
     @Test
-    public void generateAdUrl_shouldHandleFunkyNetworkOperatorCodes() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
+    public void generateAdUrl_shouldHandleFunkyNetworkOperatorCodes() {
+        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid).withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue());
 
         shadowTelephonyManager.setNetworkOperator("123456");
         String adUrl = generateMinimumUrlString();
@@ -237,19 +443,71 @@ public void generateAdUrl_shouldHandleFunkyNetworkOperatorCodes() throws Excepti
     }
 
     @Test
-    public void generateAdUrl_needsAndDoesNotHaveReadPhoneState_shouldNotContainOperatorName() {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
+    public void generateAdUrl_needsAndDoesNotHaveReadPhoneState_shouldNotContainOperatorName() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
+
+        final String expectedAdUrl = new AdUrlBuilder(expectedUdid)
+                .withCarrierName("")
+                .withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue())
+                .build();
 
         shadowTelephonyManager.setNeedsReadPhoneState(true);
         shadowTelephonyManager.setReadPhoneStatePermission(false);
 
         String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withCarrierName("").build());
+        assertThat(adUrl).isEqualTo(expectedAdUrl);
     }
 
     @Test
-    public void generateAdUrl_needsAndHasReadPhoneState_shouldContainOperatorName() {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
+    public void generateAdUrl_shouldIncludeGdprAppliesWhenAvailable() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+        when(mockPersonalInfoManager.gdprApplies()).thenReturn(true);
+
+        final String expectedAdUrl = new AdUrlBuilder(expectedUdid)
+                .withGdprApplies("1")
+                .withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue())
+                .build();
+
+        String adUrl = generateMinimumUrlString();
+        assertThat(adUrl).isEqualTo(expectedAdUrl);
+    }
+
+    @Test
+    public void generateAdUrl_shouldIncludeConsentedPrivacyPolicyVersionWhenAvailable() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+        when(mockPersonalInfoManager.getConsentData()).thenReturn(mockConsentData);
+        when(mockConsentData.getConsentedPrivacyPolicyVersion()).thenReturn("10");
+
+        final String expectedAdUrl = new AdUrlBuilder(expectedUdid)
+                .withConsentedPrivacyPolicyVersion("10")
+                .withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue())
+                .build();
+
+        String adUrl = generateMinimumUrlString();
+        assertThat(adUrl).isEqualTo(expectedAdUrl);
+    }
+
+    @Test
+    public void generateAdUrl_shouldIncludeConsentedVendorListVersionWhenAvailable() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+        when(mockPersonalInfoManager.getConsentData()).thenReturn(mockConsentData);
+        when(mockConsentData.getConsentedVendorListVersion()).thenReturn("15");
+
+        final String expectedAdUrl = new AdUrlBuilder(expectedUdid)
+                .withConsentedVendorListVersion("15")
+                .withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue())
+                .build();
+
+        String adUrl = generateMinimumUrlString();
+        assertThat(adUrl).isEqualTo(expectedAdUrl);
+    }
+
+
+    @Test
+    public void generateAdUrl_needsAndHasReadPhoneState_shouldContainOperatorName() throws Exception {
+        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid).withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue());
+
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
 
         shadowTelephonyManager.setNeedsReadPhoneState(true);
         shadowTelephonyManager.setReadPhoneStatePermission(true);
@@ -261,7 +519,7 @@ public void generateAdUrl_needsAndHasReadPhoneState_shouldContainOperatorName()
 
     @Test
     public void generateAdUrl_doesNotNeedReadPhoneState_shouldContainOperatorName() {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
+        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid).withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue());
 
         shadowTelephonyManager.setNeedsReadPhoneState(false);
         shadowTelephonyManager.setReadPhoneStatePermission(false);
@@ -272,8 +530,8 @@ public void generateAdUrl_doesNotNeedReadPhoneState_shouldContainOperatorName()
     }
 
     @Test
-    public void generateAdurl_whenOnCDMA_shouldGetOwnerStringFromSimCard() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
+    public void generateAdurl_whenOnCDMA_shouldGetOwnerStringFromSimCard() {
+        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid).withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue());
         shadowTelephonyManager.setPhoneType(TelephonyManager.PHONE_TYPE_CDMA);
         shadowTelephonyManager.setSimState(TelephonyManager.SIM_STATE_READY);
         shadowTelephonyManager.setNetworkOperator("123456");
@@ -283,21 +541,27 @@ public void generateAdurl_whenOnCDMA_shouldGetOwnerStringFromSimCard() throws Ex
     }
 
     @Test
-    public void generateAdurl_whenSimNotReady_shouldDefaultToNetworkOperator() throws Exception {
+    public void generateAdurl_whenSimNotReady_shouldDefaultToNetworkOperator() {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
         AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
         shadowTelephonyManager.setPhoneType(TelephonyManager.PHONE_TYPE_CDMA);
         shadowTelephonyManager.setSimState(TelephonyManager.SIM_STATE_ABSENT);
         shadowTelephonyManager.setNetworkOperator("123456");
         shadowTelephonyManager.setSimOperator("789012");
         String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withMcc("123").withMnc("456").build());
+        assertThat(adUrl).isEqualTo(urlBuilder.withMcc("123")
+                                            .withMnc("456").
+                                            withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue())
+                                            .build());
     }
 
     @Test
     public void generateAdUrl_shouldSetNetworkType() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
+        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid).withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue());
         String adUrl;
 
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+
         shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_DUMMY));
         adUrl = generateMinimumUrlString();
         assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.UNKNOWN).build());
@@ -333,7 +597,7 @@ public void generateAdUrl_shouldSetNetworkType() throws Exception {
     }
 
     @Test
-    public void generateAdUrl_whenNoNetworkPermission_shouldGenerateUnknownNetworkType() throws Exception {
+    public void generateAdUrl_whenNoNetworkPermission_shouldGenerateUnknownNetworkType() {
         AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
 
         Shadows.shadowOf(context).denyPermissions(ACCESS_NETWORK_STATE);
@@ -341,41 +605,70 @@ public void generateAdUrl_whenNoNetworkPermission_shouldGenerateUnknownNetworkTy
 
         String adUrl = generateMinimumUrlString();
 
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.UNKNOWN).build());
+        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.UNKNOWN)
+                .withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue()).build());
     }
 
     @Test
     public void generateAdUrl_shouldTolerateNullActiveNetwork() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
+        SdkConfiguration sdkConfiguration = new SdkConfiguration.Builder(INIT_ADUNIT)
+                .withAdvancedBidder(WebViewAdvancedBidder.class).build();
+        MoPub.initializeSdk(context, sdkConfiguration, null);
+        MoPub.setAdvancedBiddingEnabled(false);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
+
+        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid).withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue());
         shadowConnectivityManager.setActiveNetworkInfo(null);
 
         String adUrl = generateMinimumUrlString();
 
         assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.UNKNOWN).build());
+
+        new Reflection.MethodBuilder(null, "clearAdvancedBidders")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .execute();
     }
 
 
 
     @Test
-    public void generateAdUrl_whenGooglePlayServicesIsLinkedAndAdInfoIsCached_shouldUseAdInfoParams() throws Exception {
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
-        when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
-        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE);
+    public void generateAdUrl_whenAdInfoIsCached_shouldUseAdInfoParams() throws Exception {
+        SdkConfiguration sdkConfiguration = new SdkConfiguration.Builder(INIT_ADUNIT).build();
+        MoPub.initializeSdk(context, sdkConfiguration, null);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+
+        MoPubIdentifierTest.writeAdvertisingInfoToSharedPreferences(context, false);
+
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
 
-        GpsHelperTest.TestAdInfo adInfo = new GpsHelperTest.TestAdInfo();
         final ClientMetadata clientMetadata = ClientMetadata.getInstance(context);
-        clientMetadata.setAdvertisingInfo(adInfo.mAdId, adInfo.mLimitAdTrackingEnabled);
+        MoPubIdentifier identifier = clientMetadata.getMoPubIdentifier();
+        AdvertisingId adInfo = identifier.getAdvertisingInfo();
 
-        expectedUdid = "ifa%3A" + adInfo.ADVERTISING_ID;
+        String generatedAdUrl = generateMinimumUrlString();
+        expectedUdid = "ifa%3A" + adInfo.getIdWithPrefix(true);
         String expectedAdUrl = new AdUrlBuilder(expectedUdid)
-                .withDnt(adInfo.LIMIT_AD_TRACKING_ENABLED)
+                .withDnt(adInfo.isDoNotTrack())
+                .withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue())
                 .build();
-        assertThat(generateMinimumUrlString()).isEqualTo(expectedAdUrl);
+        assertThat(generatedAdUrl).isEqualTo(expectedAdUrl);
     }
 
     @Test
-    public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_shouldUseLocationServiceValue() {
+    public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_shouldUseLocationServiceValue() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+
         Location locationFromDeveloper = new Location("");
         locationFromDeveloper.setLatitude(42);
         locationFromDeveloper.setLongitude(-42);
@@ -401,7 +694,9 @@ public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_sh
     }
 
     @Test
-    public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_WithFineLocationPermissionOnly_shouldUseLocationServiceValue() {
+    public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_WithFineLocationPermissionOnly_shouldUseLocationServiceValue() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+
         Shadows.shadowOf(context).denyPermissions(ACCESS_COARSE_LOCATION);
 
         Location locationFromDeveloper = new Location("");
@@ -429,9 +724,11 @@ public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_Wi
     }
 
     @Test
-    public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_WithCoarseLocationPermissionOnly_shouldUseDeveloperSuppliedLocation() {
+    public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_WithCoarseLocationPermissionOnly_shouldUseDeveloperSuppliedLocation() throws Exception {
         Shadows.shadowOf(context).denyPermissions(ACCESS_FINE_LOCATION);
 
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+
         Location locationFromDeveloper = new Location("");
         locationFromDeveloper.setLatitude(42);
         locationFromDeveloper.setLongitude(-42);
@@ -457,10 +754,12 @@ public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_Wi
     }
 
     @Test
-    public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_WithNoLocationPermission_shouldUseDeveloperSuppliedLocation() {
+    public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_WithNoLocationPermission_shouldUseDeveloperSuppliedLocation() throws Exception {
         Shadows.shadowOf(context).denyPermissions(ACCESS_FINE_LOCATION);
         Shadows.shadowOf(context).denyPermissions(ACCESS_COARSE_LOCATION);
 
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+
         Location locationFromDeveloper = new Location("");
         locationFromDeveloper.setLatitude(42);
         locationFromDeveloper.setLongitude(-42);
@@ -486,7 +785,9 @@ public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_Wi
     }
 
     @Test
-    public void generateAdUrl_whenDeveloperSuppliesMoreRecentLocationThanLocationService_shouldUseDeveloperSuppliedLocation() {
+    public void generateAdUrl_whenDeveloperSuppliesMoreRecentLocationThanLocationService_shouldUseDeveloperSuppliedLocation() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+
         Location locationFromDeveloper = new Location("");
         locationFromDeveloper.setLatitude(42);
         locationFromDeveloper.setLongitude(-42);
@@ -513,7 +814,10 @@ public void generateAdUrl_whenDeveloperSuppliesMoreRecentLocationThanLocationSer
     }
 
     @Test
-    public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocation_shouldUseLocationServiceValue() {
+    public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocation_shouldUseLocationServiceValue() throws Exception {
+
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+
         Location locationFromDeveloper = new Location("");
         locationFromDeveloper.setLatitude(42);
         locationFromDeveloper.setLongitude(-42);
@@ -540,7 +844,9 @@ public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocatio
     }
 
     @Test
-    public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocation_WithFineLocationPermissionOnly_shouldUseLocationServiceValue() {
+    public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocation_WithFineLocationPermissionOnly_shouldUseLocationServiceValue() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+
         Shadows.shadowOf(context).denyPermissions(ACCESS_COARSE_LOCATION);
 
         Location locationFromDeveloper = new Location("");
@@ -569,9 +875,11 @@ public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocatio
     }
 
     @Test
-    public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocation_WithCoarseLocationPermissionOnly_shouldUseLocationServiceValue() {
+    public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocation_WithCoarseLocationPermissionOnly_shouldUseLocationServiceValue() throws Exception {
         Shadows.shadowOf(context).denyPermissions(ACCESS_FINE_LOCATION);
 
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+
         Location locationFromDeveloper = new Location("");
         locationFromDeveloper.setLatitude(42);
         locationFromDeveloper.setLongitude(-42);
@@ -598,10 +906,12 @@ public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocatio
     }
 
     @Test
-    public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocation_WithNoLocationPermission_shouldUseDeveloperSuppliedLocation() {
+    public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocation_WithNoLocationPermission_shouldUseDeveloperSuppliedLocation() throws Exception {
         Shadows.shadowOf(context).denyPermissions(ACCESS_FINE_LOCATION);
         Shadows.shadowOf(context).denyPermissions(ACCESS_COARSE_LOCATION);
 
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+
         Location locationFromDeveloper = new Location("");
         locationFromDeveloper.setLatitude(42);
         locationFromDeveloper.setLongitude(-42);
@@ -694,7 +1004,8 @@ private String generateMinimumUrlString() {
     private static class AdUrlBuilder {
         private String expectedUdid;
         private String adUnitId = "";
-        private String query = "";
+        private String keywordsQuery = "";
+        private String userDataQuery = "";
         private String latLon = "";
         private String locationAccuracy = "";
         private String latLonLastUpdated = "";
@@ -705,13 +1016,18 @@ private String generateMinimumUrlString() {
         private String dnt = "";
         private MoPubNetworkType networkType = MoPubNetworkType.MOBILE;
         private int externalStoragePermission;
+        private String abt = "";
+        private String currentConsentStatus = "";
+        private String gdprApplies = "0";
+        private String consentedPrivacyPolicyVersion = "";
+        private String consentedVendorListVersion = "";
 
         public AdUrlBuilder(String expectedUdid) {
             this.expectedUdid = expectedUdid;
         }
 
         public String build() {
-            return "http://ads.mopub.com/m/ad" +
+            return "https://ads.mopub.com/m/ad" +
                     "?v=6" +
                     paramIfNotEmpty("id", adUnitId) +
                     "&nv=" + Uri.encode(MoPub.SDK_VERSION) +
@@ -719,22 +1035,28 @@ public String build() {
                     "%2C" + Build.MODEL +
                     "%2C" + Build.PRODUCT +
                     "&bundle=" + "testBundle" +
-                    paramIfNotEmpty("q", query) +
+                    paramIfNotEmpty("q", keywordsQuery) +
+                    paramIfNotEmpty("user_data_q", userDataQuery) +
                     (TextUtils.isEmpty(latLon) ? "" :
                             "&ll=" + latLon + "&lla=" + locationAccuracy + "&llf=" + latLonLastUpdated) +
                     "&z=-0700" +
                     "&o=u" +
                     "&w=" + TEST_SCREEN_WIDTH +
                     "&h=" + TEST_SCREEN_HEIGHT +
-                    "&sc_a=1.0" +
+                    "&sc=1.0" +
                     paramIfNotEmpty("mcc", mcc) +
                     paramIfNotEmpty("mnc", mnc) +
                     paramIfNotEmpty("iso", countryIso) +
                     paramIfNotEmpty("cn", carrierName) +
                     "&ct=" + networkType +
                     "&av=" + Uri.encode(BuildConfig.VERSION_NAME) +
+                    (TextUtils.isEmpty(abt) ? "" : "&abt=" + Uri.encode(abt)) +
                     "&udid=" + PlayServicesUrlRewriter.UDID_TEMPLATE +
                     "&dnt=" + PlayServicesUrlRewriter.DO_NOT_TRACK_TEMPLATE +
+                    paramIfNotEmpty("gdpr_applies", gdprApplies) +
+                    paramIfNotEmpty("current_consent_status", currentConsentStatus) +
+                    paramIfNotEmpty("consented_privacy_policy_version", consentedPrivacyPolicyVersion) +
+                    paramIfNotEmpty("consented_vendor_list_version", consentedVendorListVersion) +
                     "&mr=1" +
                     "&android_perms_ext_storage=" + externalStoragePermission +
                     "&vv=3";
@@ -745,8 +1067,12 @@ public AdUrlBuilder withAdUnitId(String adUnitId) {
             return this;
         }
 
-        public AdUrlBuilder withQuery(String query) {
-            this.query = query;
+        public AdUrlBuilder withUserDataQuery(String query) {
+            this.userDataQuery = query;
+            return this;
+        }
+        public AdUrlBuilder withKeywordsQuery(String query) {
+            this.keywordsQuery = query;
             return this;
         }
 
@@ -795,6 +1121,31 @@ public AdUrlBuilder withDnt(boolean dnt) {
             return this;
         }
 
+        public AdUrlBuilder withAbt(String abt) {
+            this.abt = abt;
+            return this;
+        }
+
+        public AdUrlBuilder withCurrentConsentStatus(String currentConsentStatus) {
+            this.currentConsentStatus = currentConsentStatus;
+            return this;
+        }
+
+        public AdUrlBuilder withGdprApplies(String gdprApplies) {
+            this.gdprApplies = gdprApplies;
+            return this;
+        }
+
+        public AdUrlBuilder withConsentedPrivacyPolicyVersion(String consentedPrivacyPolicyVersion) {
+            this.consentedPrivacyPolicyVersion = consentedPrivacyPolicyVersion;
+            return this;
+        }
+
+        public AdUrlBuilder withConsentedVendorListVersion(String consentedVendorListVersion) {
+            this.consentedVendorListVersion = consentedVendorListVersion;
+            return this;
+        }
+
         private String paramIfNotEmpty(String key, String value) {
             if (TextUtils.isEmpty(value)) {
                 return "";
@@ -803,4 +1154,18 @@ private String paramIfNotEmpty(String key, String value) {
             }
         }
     }
+
+    private static class WebViewAdvancedBidder implements MoPubAdvancedBidder {
+
+        @Override
+        public String getToken(final Context context) {
+            return "WebViewAdvancedBidderToken";
+        }
+
+        @Override
+        public String getCreativeNetworkName() {
+            return "UrlGeneratorTest";
+        }
+    }
+
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java
deleted file mode 100644
index 8c3229b5..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java
+++ /dev/null
@@ -1,37 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import org.apache.http.Header;
-import org.apache.http.message.BasicHeader;
-import org.robolectric.shadows.httpclient.TestHttpResponse;
-
-import java.util.HashMap;
-import java.util.Map;
-
-public class TestHttpResponseWithHeaders extends TestHttpResponse {
-    private Map<String, Header> headers;
-
-    public TestHttpResponseWithHeaders(int statusCode, String responseBody) {
-        super(statusCode, responseBody);
-        headers = new HashMap<String, Header>();
-    }
-
-    public TestHttpResponseWithHeaders(int statusCode, byte[] responseBody) {
-        super(statusCode, responseBody);
-        headers = new HashMap<String, Header>();
-    }
-
-    @Override
-    public void addHeader(String name, String value) {
-        headers.put(name, new BasicHeader(name, value));
-    }
-
-    @Override
-    public Header getFirstHeader(String name) {
-        return headers.get(name);
-    }
-
-    @Override
-    public Header[] getAllHeaders() {
-        return headers.values().toArray(new Header[headers.size()]);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java
index 4bb1343d..51cea646 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java
@@ -1,24 +1,55 @@
 package com.mopub.mobileads.util;
 
+import android.annotation.TargetApi;
+import android.os.Build;
+import android.webkit.CookieManager;
 import android.webkit.WebView;
 
+import com.mopub.TestSdkHelper;
+import com.mopub.common.MoPub;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 
+import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mockito;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.rule.PowerMockRule;
 import org.robolectric.annotation.Config;
 
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyBoolean;
+import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
+import static org.powermock.api.mockito.PowerMockito.mockStatic;
+import static org.powermock.api.mockito.PowerMockito.verifyStatic;
+import static org.powermock.api.mockito.PowerMockito.when;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
+@PrepareForTest({MoPub.class, CookieManager.class})
 public class WebViewsTest {
 
+    @Rule
+    public PowerMockRule rule = new PowerMockRule();
+
+    private CookieManager cookieManager;
+
+    @Before
+    public void setup() {
+        mockStatic(MoPub.class);
+        mockStatic(CookieManager.class);
+
+        cookieManager = Mockito.mock(CookieManager.class);
+        when(CookieManager.getInstance()).thenReturn(cookieManager);
+    }
+
     @Test
-    public void pause_withIsFinishingTrue_shouldStopLoading_shouldLoadBlankUrl_shouldPauseWebView() throws Exception {
+    public void pause_withIsFinishingTrue_shouldStopLoading_shouldLoadBlankUrl_shouldPauseWebView() {
         WebView mockWebView = mock(WebView.class);
 
         WebViews.onPause(mockWebView, true);
@@ -29,7 +60,7 @@ public void pause_withIsFinishingTrue_shouldStopLoading_shouldLoadBlankUrl_shoul
     }
 
     @Test
-    public void pause_withIsFinishingFalse_shouldPauseWebView() throws Exception {
+    public void pause_withIsFinishingFalse_shouldPauseWebView() {
         WebView mockWebView = mock(WebView.class);
 
         WebViews.onPause(mockWebView, false);
@@ -38,4 +69,87 @@ public void pause_withIsFinishingFalse_shouldPauseWebView() throws Exception {
         verify(mockWebView, never()).loadUrl("");
         verify(mockWebView).onPause();
     }
+
+    @Test
+    public void manageWebCookies_whenCanCollectPersonaInfoTrue_setsAcceptCookiesTrue() {
+        when(MoPub.canCollectPersonalInformation()).thenReturn(true);
+
+        WebViews.manageWebCookies();
+
+        verify(cookieManager).setAcceptCookie(true);
+        verifyStatic();
+        CookieManager.setAcceptFileSchemeCookies(eq(true));
+    }
+
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
+    @Config(sdk = Build.VERSION_CODES.LOLLIPOP)
+    @Test
+    public void manageWebCookies_api21orAbove_whenCanCollectPersonaInfoFalse_shouldRemoveCookies() {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.LOLLIPOP);
+        when(MoPub.canCollectPersonalInformation()).thenReturn(false);
+
+        WebViews.manageWebCookies();
+
+        verify(cookieManager).setAcceptCookie(false);
+        verify(cookieManager).removeSessionCookies(null);
+        verify(cookieManager).removeAllCookies(null);
+        verify(cookieManager).flush();
+        verifyStatic();
+        CookieManager.setAcceptFileSchemeCookies(eq(false));
+    }
+
+    @TargetApi(Build.VERSION_CODES.KITKAT)
+    @Config(sdk = Build.VERSION_CODES.KITKAT)
+    @Test
+    public void manageWebCookies_api20orBelow_whenCanCollectPersonaInfoFalse_shouldRemoveCookies() {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.KITKAT);
+        when(MoPub.canCollectPersonalInformation()).thenReturn(false);
+
+        WebViews.manageWebCookies();
+
+        verify(cookieManager).setAcceptCookie(false);
+        verify(cookieManager).removeSessionCookie();
+        verify(cookieManager).removeAllCookie();
+        verifyStatic();
+        CookieManager.setAcceptFileSchemeCookies(eq(false));
+    }
+
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
+    @Config(sdk = Build.VERSION_CODES.LOLLIPOP)
+    @Test
+    public void manageThirdPartyCookies_api21orAbove_whenCanCollectPersonaInfoTrue_shouldAcceptCookies() {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.LOLLIPOP);
+        when(MoPub.canCollectPersonalInformation()).thenReturn(true);
+        WebView mockWebView = mock(WebView.class);
+
+        WebViews.manageThirdPartyCookies(mockWebView);
+
+        verify(cookieManager).setAcceptThirdPartyCookies(eq(mockWebView), eq(true));
+    }
+
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
+    @Config(sdk = Build.VERSION_CODES.LOLLIPOP)
+    @Test
+    public void manageThirdPartyCookies_api21orAbove_whenCanCollectPersonaInfoFalse_shouldRemoveCookies() {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.LOLLIPOP);
+        when(MoPub.canCollectPersonalInformation()).thenReturn(false);
+        WebView mockWebView = mock(WebView.class);
+
+        WebViews.manageThirdPartyCookies(mockWebView);
+
+        verify(cookieManager).setAcceptThirdPartyCookies(eq(mockWebView), eq(false));
+    }
+
+    @TargetApi(Build.VERSION_CODES.KITKAT)
+    @Config(sdk = Build.VERSION_CODES.KITKAT)
+    @Test
+    public void manageThirdPartyCookies_api20orBelow_whenCanCollectPersonaInfoFalse_shouldDoNothing() {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.KITKAT);
+        when(MoPub.canCollectPersonalInformation()).thenReturn(false);
+        WebView mockWebView = mock(WebView.class);
+
+        WebViews.manageThirdPartyCookies(mockWebView);
+
+        verify(cookieManager, never()).setAcceptThirdPartyCookies(any(WebView.class), anyBoolean());
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
index e9d5b008..0bc60261 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
@@ -20,7 +20,6 @@
 import com.mopub.common.util.test.support.ShadowMoPubHttpUrlConnection;
 import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.test.support.FileUtils;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.mraid.MraidNativeCommandHandler.DownloadImageAsyncTask;
 import com.mopub.mraid.MraidNativeCommandHandler.DownloadImageAsyncTask.DownloadImageAsyncTaskListener;
 import com.mopub.mraid.MraidNativeCommandHandler.MraidCommandFailureListener;
@@ -86,7 +85,6 @@
     private File expectedFile;
     private File pictureDirectory;
     private File fileWithoutExtension;
-    private TestHttpResponseWithHeaders response;
 
     @Before
     public void setUp() throws Exception {
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java
index 96f461f3..3c8b540f 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java
@@ -49,7 +49,7 @@
     public void setUp() throws Exception {
         Context context = Robolectric.buildActivity(Activity.class).create().get();
         CacheService.initialize(context);
-        subject = new HttpDiskCompositeDataSource(context, "userAgent", null, mockHttpDataSource);
+        subject = new HttpDiskCompositeDataSource(context, "userAgent", mockHttpDataSource);
         uri = new Uri.Builder().scheme("https").path("www.someurl").build();
         dataSpec = new DataSpec(uri, 0, -1, null);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
index d8bb770b..54fef6ae 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
@@ -3,6 +3,7 @@
 import android.app.Activity;
 
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.privacy.MoPubIdentifierTest;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.test.support.ShadowAsyncTasks;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
@@ -60,8 +61,9 @@
     @Mock private MoPubStaticNativeAdRenderer mockRenderer;
 
     @Before
-    public void setup() {
+    public void setup() throws Exception {
         context = Robolectric.buildActivity(Activity.class).create().get();
+        MoPubIdentifierTest.writeAdvertisingInfoToSharedPreferences(context, false);
         Shadows.shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
         Shadows.shadowOf(context).grantPermissions(INTERNET);
         subject = new MoPubNative(context, adUnitId, mockAdRendererRegistry, mockNetworkListener);
@@ -71,6 +73,7 @@ public void setup() {
 
     @After
     public void tearDown() {
+        MoPubIdentifierTest.clearPreferences(context);
         reset(methodBuilder);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
index f373be7b..50f87dc8 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
@@ -12,7 +12,6 @@
 import android.view.View;
 
 import com.mopub.common.Constants;
-import com.mopub.common.event.EventDetails;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BaseVideoPlayerActivity;
 import com.mopub.mobileads.BuildConfig;
@@ -133,13 +132,12 @@ public void setUp() throws Exception {
 
         subject = new MoPubVideoNativeAd(
                 activity, jsonObject, mockCustomEventNativeListener, videoResponseHeaders,
-                mockVisibilityTracker, mockNativeVideoControllerFactory, null,
+                mockVisibilityTracker, mockNativeVideoControllerFactory,
                 "header click tracker", mockVastManager);
         subject.setNativeEventListener(mockNativeEventListener);
         // noinspection unchecked
         when(mockNativeVideoControllerFactory
-                .createForId(anyInt(), any(Context.class), any(List.class), eq(mockVastVideoConfig),
-                        any(EventDetails.class)))
+                .createForId(anyInt(), any(Context.class), any(List.class), eq(mockVastVideoConfig)))
                 .thenReturn(mockNativeVideoController);
 
         when(mockImageLoader.get(anyString(), any(ImageListener.class)))
@@ -233,8 +231,7 @@ public void onVastVideoConfigurationPrepared_shouldConstructNativeVideoControlle
         verify(mockNativeVideoControllerFactory).createForId(anyInt(),
                 eq(activity.getApplicationContext()),
                 argumentCaptor.capture(),
-                eq(mockVastVideoConfig),
-                any(EventDetails.class));
+                eq(mockVastVideoConfig));
 
         List<VisibilityTrackingEvent> visibilityTrackingEvents = (List<VisibilityTrackingEvent>) argumentCaptor.getValue();
         assertThat(visibilityTrackingEvents.get(0).strategy).isInstanceOf(HeaderVisibilityStrategy.class);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
index 59be34df..f8923c83 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
@@ -16,10 +16,15 @@
 
 import com.mopub.common.LocationService;
 import com.mopub.common.MoPub;
+import com.mopub.common.privacy.ConsentStatus;
+import com.mopub.common.privacy.MoPubIdentifierTest;
+import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Reflection;
 import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
 
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -55,9 +60,10 @@
     private Activity context;
     private NativeUrlGenerator subject;
     private MoPubShadowTelephonyManager shadowTelephonyManager;
+    private PersonalInfoManager mockPersonalInfoManager;
 
     @Before
-    public void setup() {
+    public void setup() throws Exception {
         context = spy(Robolectric.buildActivity(Activity.class).create().get());
         Shadows.shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
         Shadows.shadowOf(context).grantPermissions(ACCESS_FINE_LOCATION);
@@ -94,7 +100,93 @@ public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
             when(context.getApplicationContext()).thenReturn(spyApplicationContext);
         }
 
+        mockPersonalInfoManager = mock(PersonalInfoManager.class);
+        when(mockPersonalInfoManager.getPersonalInfoConsentStatus()).thenReturn(ConsentStatus.UNKNOWN);
         LocationService.clearLastKnownLocation();
+        MoPubIdentifierTest.writeAdvertisingInfoToSharedPreferences(context, false);
+    }
+
+    @After
+    public void tearDown(){
+        MoPubIdentifierTest.clearPreferences(context);
+    }
+
+    @Test
+    public void requestParametersBuilder_whenKeywordsHaveBeenProvidedButNoUserConsent_shouldNotSaveKeywords() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+
+        RequestParameters requestParameters = new RequestParameters.Builder()
+                .keywords("keywords")
+                .userDataKeywords("user_data_keywords")
+                .build();
+
+        assertThat(requestParameters.getKeywords()).isEqualTo("keywords");
+        assertThat(requestParameters.getUserDataKeywords()).isNull();
+    }
+
+    @Test
+    public void requestParametersBuilder_whenKeywordsHaveBeenProvidedAndUserConsent_shouldSaveKeywords() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+
+        RequestParameters requestParameters = new RequestParameters.Builder()
+                .keywords("keywords")
+                .userDataKeywords("user_data_keywords")
+                .build();
+
+        assertThat(requestParameters.getKeywords()).isEqualTo("keywords");
+        assertThat(requestParameters.getUserDataKeywords()).isEqualTo("user_data_keywords");
+    }
+
+    @Test
+    public void generateUrlString_whenKeywordsHaveBeenProvidedButNoUserConsent_shouldNotUseKeywords() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+
+        RequestParameters requestParameters = new RequestParameters.Builder()
+                .keywords("keywords")
+                .userDataKeywords("user_data_keywords")
+                .build();
+        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
+        String adUrl = subject.withRequest(requestParameters)
+                .generateUrlString("ads.mopub.com");
+
+        assertThat(getParameterFromRequestUrl(adUrl, "q")).isEqualTo("keywords");
+        assertThat(getParameterFromRequestUrl(adUrl, "user_data_q")).isEqualTo("");
+    }
+
+    @Test
+    public void generateUrlString_whenKeywordsHaveBeenProvidedAndUserConsent_shouldUseKeywords() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+
+        RequestParameters requestParameters = new RequestParameters.Builder()
+                .keywords("keywords")
+                .userDataKeywords("user_data_keywords")
+                .build();
+        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
+        String adUrl = subject.withRequest(requestParameters)
+                .generateUrlString("ads.mopub.com");
+
+        assertThat(getParameterFromRequestUrl(adUrl, "q")).isEqualTo("keywords");
+        assertThat(getParameterFromRequestUrl(adUrl, "user_data_q")).isEqualTo("user_data_keywords");
     }
 
     @Test
@@ -129,6 +221,13 @@ public void generateUrlString_shouldIncludeDesiredAssetsIfSet() throws Exception
     public void generateUrlString_shouldNotIncludeDesiredAssetsIfNotSet() throws Exception {
         subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
 
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+
         String requestString = generateMinimumUrlString();
         List<String> desiredAssets = getDesiredAssetsListFromRequestUrlString(requestString);
 
@@ -149,7 +248,14 @@ public void generateUrlString_shouldNotIncludeDesiredAssetsIfNoAssetsAreSet() th
     }
 
     @Test
-    public void generateUrlString_needsButDoesNotHaveReadPhoneState_shouldNotContainOperatorName() {
+    public void generateUrlString_needsButDoesNotHaveReadPhoneState_shouldNotContainOperatorName() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+
         shadowTelephonyManager.setNeedsReadPhoneState(true);
         shadowTelephonyManager.setReadPhoneStatePermission(false);
         shadowTelephonyManager.setNetworkOperatorName("TEST_CARRIER");
@@ -185,7 +291,14 @@ public void generateUrlString_doesNotNeedReadPhoneState_shouldContainOperatorNam
     }
 
     @Test
-    public void generateUrlString_whenLocationServiceGpsProviderHasMostRecentLocation_shouldUseLocationServiceValue() {
+    public void generateUrlString_whenLocationServiceGpsProviderHasMostRecentLocation_shouldUseLocationServiceValue() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+
         Location locationFromDeveloper = new Location("");
         locationFromDeveloper.setLatitude(42);
         locationFromDeveloper.setLongitude(-42);
@@ -218,7 +331,54 @@ public void generateUrlString_whenLocationServiceGpsProviderHasMostRecentLocatio
     }
 
     @Test
-    public void generateUrlString_whenDeveloperSuppliesMoreRecentLocationThanLocationService_shouldUseDeveloperSuppliedLocation() {
+    public void generateUrlString_whenConsentIsFalse_shouldNotHaveLocationValue() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+
+        Location locationFromDeveloper = new Location("");
+        locationFromDeveloper.setLatitude(42);
+        locationFromDeveloper.setLongitude(-42);
+        locationFromDeveloper.setAccuracy(3.5f);
+        locationFromDeveloper.setTime(1000);
+
+        // Mock out the LocationManager's last known location to be more recent than the
+        // developer-supplied location.
+        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
+                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
+        Location locationFromSdk = new Location("");
+        locationFromSdk.setLatitude(37);
+        locationFromSdk.setLongitude(-122);
+        locationFromSdk.setAccuracy(5.0f);
+        locationFromSdk.setTime(System.currentTimeMillis() - 555555);
+        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, locationFromSdk);
+
+        RequestParameters requestParameters = new RequestParameters.Builder()
+                .location(locationFromDeveloper)
+                .build();
+        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
+        String adUrl = subject.withRequest(requestParameters)
+                .generateUrlString("ads.mopub.com");
+        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("");
+        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("");
+        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEqualTo("");
+        // Only test to the full second (as there may be small differences)
+        assertThat(getParameterFromRequestUrl(adUrl, "llf")).startsWith("");
+    }
+
+    @Test
+    public void generateUrlString_whenDeveloperSuppliesMoreRecentLocationThanLocationService_shouldUseDeveloperSuppliedLocation() throws Exception {
+
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+
         Location locationFromDeveloper = new Location("");
         locationFromDeveloper.setLatitude(42);
         locationFromDeveloper.setLongitude(-42);
@@ -252,7 +412,14 @@ public void generateUrlString_whenDeveloperSuppliesMoreRecentLocationThanLocatio
     }
 
     @Test
-    public void generateUrlString_whenLocationServiceNetworkProviderHasMostRecentLocation_shouldUseLocationServiceValue() {
+    public void generateUrlString_whenLocationServiceNetworkProviderHasMostRecentLocation_shouldUseLocationServiceValue() throws Exception {
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+
         Location locationFromDeveloper = new Location("");
         locationFromDeveloper.setLatitude(42);
         locationFromDeveloper.setLongitude(-42);
@@ -291,9 +458,9 @@ public void generateUrlString_withOnlyAdUnitSet_shouldReturnMinimumUrl() {
         final String adUrl = generateMinimumUrlString();
 
         assertThat(adUrl).isEqualTo(
-                "http://ads.mopub.com/m/ad?id=" +
+                "https://ads.mopub.com/m/ad?id=" +
                         AD_UNIT_ID +
-                        "&nsv=" + Uri.encode(MoPub.SDK_VERSION) +
+                        "&nv=" + Uri.encode(MoPub.SDK_VERSION) +
                         "&dn=unknown%2Cunknown%2Cunknown" +
                         "&bundle=testBundle" +
                         "&z=-0700" +
@@ -302,10 +469,12 @@ public void generateUrlString_withOnlyAdUnitSet_shouldReturnMinimumUrl() {
                         TEST_SCREEN_WIDTH +
                         "&h=" +
                         TEST_SCREEN_HEIGHT +
-                        "&sc_a=" +
+                        "&sc=" +
                         TEST_DENSITY +
                         "&ct=3&av=" + Uri.encode(BuildConfig.VERSION_NAME) +
-                        "&udid=mp_tmpl_advertising_id&dnt=mp_tmpl_do_not_track");
+                        "&udid=mp_tmpl_advertising_id&dnt=mp_tmpl_do_not_track" +
+                        "&gdpr_applies=0" +
+                        "&current_consent_status=unknown");
     }
 
     @Test
@@ -364,7 +533,7 @@ private String getNetworkOperatorNameFromRequestUrl(String requestString) {
         return networkOperatorName;
     }
 
-    private String getParameterFromRequestUrl(String requestString, String key) {
+    public static String getParameterFromRequestUrl(String requestString, String key) {
         Uri requestUri = Uri.parse(requestString);
         String parameter = requestUri.getQueryParameter(key);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java
index a3ef9e69..7e41a369 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java
@@ -165,7 +165,6 @@ public ExoPlayer newInstance(@NonNull final Renderer[] renderers,
                         return mockExoPlayer;
                     }
                 },
-                null,
                 mockAudioManager);
 
         nativeVideoProgressRunnable = new NativeVideoProgressRunnable(activity,
@@ -184,14 +183,14 @@ public ExoPlayer newInstance(@NonNull final Renderer[] renderers,
     @Test
     public void createForId_shouldAddNativeVideoControllerToMap_shouldReturnNativeVideoController() {
         NativeVideoController nativeVideoController =
-                createForId(123, activity, visibilityTrackingEvents, vastVideoConfig, null);
+                createForId(123, activity, visibilityTrackingEvents, vastVideoConfig);
         assertThat(nativeVideoController).isEqualTo(getForId(123));
     }
 
     @Test
     public void remove_shouldRemoveNativeVideoControllerFromMap() {
         NativeVideoController nativeVideoController =
-                createForId(123, activity, visibilityTrackingEvents, vastVideoConfig, null);
+                createForId(123, activity, visibilityTrackingEvents, vastVideoConfig);
         assertThat(nativeVideoController).isEqualTo(getForId(123));
         remove(123);
         assertThat(getForId(123)).isNull();
@@ -367,7 +366,6 @@ public void prepare_shouldPreparePlayer() {
                 vastVideoConfig,
                 mockNativeVideoProgressRunnable,
                 mockMoPubExoPlayerFactory,
-                null,
                 mockAudioManager);
         subject.prepare(this);
 
@@ -525,7 +523,6 @@ public ExoPlayer newInstance(Renderer[] renderers, TrackSelector trackSelector,
                         return mockExoPlayer;
                     }
                 },
-                null,
                 mockAudioManager);
 
         subject.handleCtaClick(activity);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java
index 5f42e4ac..79278d5d 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java
@@ -1,5 +1,7 @@
 package com.mopub.nativeads;
 
+import android.app.Activity;
+
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 import com.mopub.network.MoPubNetworkError;
@@ -12,6 +14,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
+import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
 import java.util.TreeMap;
@@ -34,7 +37,8 @@
 
     @Before
     public void setup() {
-        subject = new PositioningRequest(url, mockListener, mockErrorListener);
+        subject = new PositioningRequest(Robolectric.buildActivity(Activity.class).get(),
+                url, mockListener, mockErrorListener);
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
index 75f71afe..bc5862a0 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
@@ -5,7 +5,6 @@
 import android.content.pm.PackageManager;
 
 import com.mopub.common.ClientMetadata;
-import com.mopub.common.DownloadResponse;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
@@ -18,7 +17,6 @@
 import com.mopub.volley.Request;
 import com.mopub.volley.VolleyError;
 
-import org.apache.http.HttpStatus;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -49,10 +47,6 @@
 public class ServerPositioningSourceTest {
     @Mock PositioningListener mockPositioningListener;
     @Captor ArgumentCaptor<PositioningRequest> positionRequestCaptor;
-    @Mock DownloadResponse mockValidResponse;
-    @Mock DownloadResponse mockNotFoundResponse;
-    @Mock DownloadResponse mockInvalidJsonResponse;
-    @Mock DownloadResponse mockWarmingUpJsonResponse;
     @Mock Context mockContext;
     @Mock ClientMetadata mockClientMetaData;
     @Mock MoPubRequestQueue mockRequestQueue;
@@ -70,18 +64,6 @@ public void setUp() {
         subject = new ServerPositioningSource(spyActivity);
         setupClientMetadata();
         Networking.setRequestQueueForTesting(mockRequestQueue);
-
-        when(mockValidResponse.getStatusCode()).thenReturn(HttpStatus.SC_OK);
-        when(mockValidResponse.getByteArray()).thenReturn("{fixed: []}".getBytes());
-
-        when(mockInvalidJsonResponse.getStatusCode()).thenReturn(HttpStatus.SC_OK);
-        when(mockInvalidJsonResponse.getByteArray()).thenReturn("blah blah".getBytes());
-
-        when(mockWarmingUpJsonResponse.getStatusCode()).thenReturn(HttpStatus.SC_OK);
-        when(mockWarmingUpJsonResponse.getByteArray()).thenReturn(
-                "{\"error\":\"WARMING_UP\"}".getBytes());
-
-        when(mockNotFoundResponse.getStatusCode()).thenReturn(HttpStatus.SC_NOT_FOUND);
     }
 
     private void setupClientMetadata() {
@@ -89,8 +71,6 @@ private void setupClientMetadata() {
         when(mockClientMetaData.getAppName()).thenReturn("app_name");
         when(mockClientMetaData.getAppPackageName()).thenReturn("app_package_name");
         when(mockClientMetaData.getAppVersion()).thenReturn("app_version");
-        when(mockClientMetaData.getDeviceId()).thenReturn("client_device_id");
-        when(mockClientMetaData.isDoNotTrackSet()).thenReturn(true);
         when(mockClientMetaData.getDeviceManufacturer()).thenReturn("device_manufacturer");
         when(mockClientMetaData.getDeviceModel()).thenReturn("device_model");
         when(mockClientMetaData.getDeviceProduct()).thenReturn("device_product");
diff --git a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
index 80aa77fc..8a774cc4 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
@@ -1,16 +1,12 @@
 package com.mopub.network;
 
 import android.app.Activity;
-import android.location.Location;
 
 import com.mopub.common.AdFormat;
 import com.mopub.common.AdType;
 import com.mopub.common.DataKeys;
 import com.mopub.common.MoPub;
 import com.mopub.common.MoPub.BrowserAgent;
-import com.mopub.common.event.BaseEvent;
-import com.mopub.common.event.EventDispatcher;
-import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.ResponseHeader;
 import com.mopub.mobileads.BuildConfig;
@@ -23,8 +19,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
@@ -36,12 +30,7 @@
 import java.util.TreeMap;
 
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
@@ -49,7 +38,6 @@
 
     @Mock private AdRequest.Listener mockListener;
     @Mock private AdResponse mockAdResponse;
-    @Mock private EventDispatcher mockEventDispatcher;
 
     private AdRequest subject;
     private HashMap<String, String> defaultHeaders;
@@ -74,15 +62,12 @@ public void setup() {
         defaultHeaders.put(ResponseHeader.IMPRESSION_VISIBLE_MS.getKey(), "2000");
         defaultHeaders.put(ResponseHeader.IMPRESSION_MIN_VISIBLE_PX.getKey(), "1");
         defaultHeaders.put(ResponseHeader.MAX_BUFFER_MS.getKey(), "1000");
-
-        MoPubEvents.setEventDispatcher(mockEventDispatcher);
     }
 
     @After
     public void teardown() {
         // Reset our locale for other tests.
         Locale.setDefault(Locale.US);
-        MoPubEvents.setEventDispatcher(null);
         MoPub.resetBrowserAgent();
     }
 
@@ -97,17 +82,6 @@ public void parseNetworkResponse_stringBody_shouldSucceed() throws Exception {
         assertThat(response.result.getStringBody()).isEqualTo("abc");
     }
 
-    @Test
-    public void parseNetworkResponse_withStringBody_shouldLogScribeEvent() throws Exception {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.HTML);
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        subject.parseNetworkResponse(testResponse);
-
-        verify(mockEventDispatcher).dispatch(any(BaseEvent.class));
-    }
-
     @Test
     public void parseNetworkResponse_withServerExtrasInResponseBody_shouldSucceed_shouldCombineServerExtras() throws Exception {
         defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.HTML);
@@ -145,17 +119,6 @@ public void parseNetworkResponse_nonJsonStringBodyForNative_jsonParseShouldFail(
         assertThat(((MoPubNetworkError) response.error).getReason()).isEqualTo(MoPubNetworkError.Reason.BAD_BODY);
     }
 
-    @Test
-    public void parseNetworkResponse_nonJsonStringBodyForNative_shouldNotLogScribeEvent() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        subject.parseNetworkResponse(testResponse);
-
-        verify(mockEventDispatcher, never()).dispatch(any(BaseEvent.class));
-    }
-
     @Test
     public void parseNetworkResponse_forNativeVideo_shouldSucceed() throws Exception {
         defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.VIDEO_NATIVE);
@@ -258,18 +221,6 @@ public void parseNetworkResponse_withWarmupHeaderTrue_shouldError() {
         assertThat(((MoPubNetworkError) response.error).getReason()).isEqualTo(MoPubNetworkError.Reason.WARMING_UP);
     }
 
-    @Test
-    public void parseNetworkResponse_withWarmupHeaderTrue_shouldNotLogScribeEvent() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
-        defaultHeaders.put(ResponseHeader.WARMUP.getKey(), "1");
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        subject.parseNetworkResponse(testResponse);
-
-        verify(mockEventDispatcher, never()).dispatch(any(BaseEvent.class));
-    }
-
     @Test
     public void parseNetworkResponse_withRefreshTime_shouldIncludeRefreshTimeInResult() {
         defaultHeaders.put(ResponseHeader.REFRESH_TIME.getKey(), "13");
@@ -321,17 +272,6 @@ public void parseNetworkResponse_withClearAdType_withNoRefreshTimeHeader_shouldE
         assertThat(moPubNetworkError.getRefreshTimeMillis()).isNull();
     }
 
-    @Test
-    public void parseNetworkResponse_withClearAdType_shouldLogScribeEvent() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.CLEAR);
-
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-        subject.parseNetworkResponse(testResponse);
-
-        verify(mockEventDispatcher).dispatch(any(BaseEvent.class));
-    }
-
     @Test
     public void parseNetworkResponse_withBadJSON_shouldReturnError() {
         defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
@@ -472,10 +412,12 @@ public void parseNetworkResponse_forNonBannerAdFormat_withImpTrackingHeaders_sho
         defaultHeaders.put(ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_MS.getKey(), "0");
 
         // Non-banner AdFormat
-        subject = new AdRequest("testUrl", AdFormat.INTERSTITIAL, "testAdUnitId", activity, mockListener);
+        subject = new AdRequest("testUrl", AdFormat.INTERSTITIAL, "testAdUnitId", activity,
+                mockListener);
 
         NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders,
+                        false);
 
         final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
 
@@ -490,6 +432,229 @@ public void parseNetworkResponse_forNonBannerAdFormat_withImpTrackingHeaders_sho
         assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS)).isNull();
     }
 
+    public void parsetNetworkResponse_withAdvancedBiddingBanner_shouldCreateAdResponse() {
+        final Map<String, String> headers = new HashMap<String, String>();
+        headers.put(ResponseHeader.AD_RESPONSE_TYPE.getKey(), "multi");
+
+        String jsonResponse = "{\n" +
+                "\t\"ad-responses\": [{\n" +
+                "\t\t\"adm\": \"adm\",\n" +
+                "\t\t\"body\": \"custom selector:\",\n" +
+                "\t\t\"headers\": {\n" +
+                "\t\t\t\"X-Custom-Event-Class-Name\": \"class.name\",\n" +
+                "\t\t\t\"X-Custom-Event-Class-Data\": \"{\\\"placement_id\\\":\\\"1320352438048021_1377881765628421\\\"}\",\n" +
+                "\t\t\t\"X-Adtype\": \"custom\",\n" +
+                "\t\t\t\"X-Clickthrough\": \"click_tracking\",\n" +
+                "\t\t\t\"X-Width\": 320,\n" +
+                "\t\t\t\"X-Height\": 50,\n" +
+                "\t\t\t\"X-Imptracker\": \"impression\",\n" +
+                "\t\t\t\"X-Failurl\": \"failurl\"\n" +
+                "\t\t}\n" +
+                "\t}]\n" +
+                "}";
+        NetworkResponse testResponse =
+                new NetworkResponse(200, jsonResponse.getBytes(Charset.defaultCharset()), headers, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+        assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.IN_APP);
+        assertThat(response.result.getCustomEventClassName()).isEqualTo("class.name");
+        assertThat(response.result.getAdType()).isEqualTo(AdType.CUSTOM);
+        assertThat(response.result.getClickTrackingUrl()).isEqualTo("click_tracking");
+        assertThat(response.result.getFailoverUrl()).isEqualTo("failurl");
+        assertThat(response.result.getHeight()).isEqualTo(50);
+        assertThat(response.result.getWidth()).isEqualTo(320);
+        assertThat(response.result.getImpressionTrackingUrl()).isEqualTo("impression");
+        final Map<String, String> serverExtras = response.result.getServerExtras();
+        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualToIgnoringCase("click_tracking");
+        assertThat(serverExtras.get(DataKeys.ADM_KEY)).isEqualToIgnoringCase("adm");
+        assertThat(serverExtras.get("placement_id")).isEqualTo("1320352438048021_1377881765628421");
+    }
+
+    @Test
+    public void parsetNetworkResponse_withAdvancedBiddingInterstitial_shouldCreateAdResponse() {
+        final Map<String, String> headers = new HashMap<String, String>();
+        headers.put(ResponseHeader.AD_RESPONSE_TYPE.getKey(), "multi");
+
+        String jsonResponse = "{\n" +
+                "\t\"ad-responses\": [{\n" +
+                "\t\t\"adm\": \"adm\",\n" +
+                "\t\t\"body\": \"custom selector:\",\n" +
+                "\t\t\"headers\": {\n" +
+                "\t\t\t\"X-Custom-Event-Class-Name\": \"class.name\",\n" +
+                "\t\t\t\"X-Custom-Event-Class-Data\": \"{\\\"placement_id\\\":\\\"506317839546454_509738309204407\\\"}\",\n" +
+                "\t\t\t\"X-Adtype\": \"custom\",\n" +
+                "\t\t\t\"X-Clickthrough\": \"click_tracking\",\n" +
+                "\t\t\t\"X-Imptracker\": \"impression\",\n" +
+                "\t\t\t\"X-Failurl\": \"failurl\",\n" +
+                "\t\t\t\"X-Orientation\": \"p\"\n" +
+                "\t\t}\n" +
+                "\t}]\n" +
+                "}";
+        NetworkResponse testResponse =
+                new NetworkResponse(200, jsonResponse.getBytes(Charset.defaultCharset()), headers, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+        assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.IN_APP);
+        assertThat(response.result.getCustomEventClassName()).isEqualTo("class.name");
+        assertThat(response.result.getAdType()).isEqualTo(AdType.CUSTOM);
+        assertThat(response.result.getClickTrackingUrl()).isEqualTo("click_tracking");
+        assertThat(response.result.getFailoverUrl()).isEqualTo("failurl");
+        assertThat(response.result.getImpressionTrackingUrl()).isEqualTo("impression");
+        final Map<String, String> serverExtras = response.result.getServerExtras();
+        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualToIgnoringCase("click_tracking");
+        assertThat(serverExtras.get(DataKeys.CREATIVE_ORIENTATION_KEY)).isNull();
+        assertThat(serverExtras.get(DataKeys.ADM_KEY)).isEqualToIgnoringCase("adm");
+        assertThat(serverExtras.get("placement_id")).isEqualTo("506317839546454_509738309204407");
+    }
+
+    @Test
+    public void parsetNetworkResponse_withAdvancedBiddingRewardedVideo_shouldCreateAdResponse() {
+        final Map<String, String> headers = new HashMap<String, String>();
+        headers.put(ResponseHeader.AD_RESPONSE_TYPE.getKey(), "multi");
+
+        String jsonResponse = "{\n" +
+                "\t\"ad-responses\": [{\n" +
+                "\t\t\"adm\": \"adm\",\n" +
+                "\t\t\"body\": \"custom selector:\",\n" +
+                "\t\t\"headers\": {\n" +
+                "\t\t\t\"X-Custom-Event-Class-Name\": \"class.name\",\n" +
+                "\t\t\t\"X-Custom-Event-Class-Data\": \"{\\\"placement_id\\\":\\\"921244177968627_1427142827378757\\\"}\",\n" +
+                "\t\t\t\"X-Adtype\": \"custom\",\n" +
+                "\t\t\t\"X-Clickthrough\": \"click_tracking\",\n" +
+                "\t\t\t\"X-Width\": 480,\n" +
+                "\t\t\t\"X-Height\": 320,\n" +
+                "\t\t\t\"X-Imptracker\": \"impression\",\n" +
+                "\t\t\t\"X-Failurl\": \"failurl\",\n" +
+                "\t\t\t\"X-Rewarded-Currencies\": \"{\\\"rewards\\\":[{\\\"amount\\\":7,\\\"name\\\":\\\"Coins\\\"}]}\",\n" +
+                "\t\t\t\"X-Rewarded-Duration\": 33\n" +
+                "\t\t}\n" +
+                "\t}]\n" +
+                "}";
+        NetworkResponse testResponse =
+                new NetworkResponse(200, jsonResponse.getBytes(Charset.defaultCharset()), headers, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+        assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.IN_APP);
+        assertThat(response.result.getCustomEventClassName()).isEqualTo("class.name");
+        assertThat(response.result.getAdType()).isEqualTo(AdType.CUSTOM);
+        assertThat(response.result.getClickTrackingUrl()).isEqualTo("click_tracking");
+        assertThat(response.result.getFailoverUrl()).isEqualTo("failurl");
+        assertThat(response.result.getImpressionTrackingUrl()).isEqualTo("impression");
+        assertThat(response.result.getWidth()).isEqualTo(480);
+        assertThat(response.result.getHeight()).isEqualTo(320);
+        assertThat(response.result.shouldRewardOnClick()).isFalse();
+        assertThat(response.result.getRewardedCurrencies()).isEqualTo("{\"rewards\":[{\"amount\":7,\"name\":\"Coins\"}]}");
+        assertThat(response.result.getRewardedDuration()).isEqualTo(33);
+        final Map<String, String> serverExtras = response.result.getServerExtras();
+        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualToIgnoringCase("click_tracking");
+        assertThat(serverExtras.get(DataKeys.ADM_KEY)).isEqualToIgnoringCase("adm");
+        assertThat(serverExtras.get("placement_id")).isEqualTo("921244177968627_1427142827378757");
+    }
+
+    @Test
+    public void parsetNetworkResponse_withAdvancedBiddingNative_shouldCreateAdResponse() {
+        final Map<String, String> headers = new HashMap<String, String>();
+        headers.put(ResponseHeader.AD_RESPONSE_TYPE.getKey(), "multi");
+
+        String jsonResponse = "{\n" +
+                "\t\"ad-responses\": [{\n" +
+                "\t\t\"adm\": \"adm\",\n" +
+                "\t\t\"body\": \"custom selector:\",\n" +
+                "\t\t\"headers\": {\n" +
+                "\t\t\t\"X-Custom-Event-Class-Name\": \"class.name\",\n" +
+                "\t\t\t\"X-Custom-Event-Class-Data\": \"{\\\"placement_id\\\":\\\"619633174799370_623762807719740\\\"}\",\n" +
+                "\t\t\t\"X-Adtype\": \"custom\",\n" +
+                "\t\t\t\"X-Clickthrough\": \"click_tracking\",\n" +
+                "\t\t\t\"X-Imptracker\": \"impression\",\n" +
+                "\t\t\t\"X-Failurl\": \"failurl\"\n" +
+                "\t\t}\n" +
+                "\t}]\n" +
+                "}";
+        NetworkResponse testResponse =
+                new NetworkResponse(200, jsonResponse.getBytes(Charset.defaultCharset()), headers, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+        assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.IN_APP);
+        assertThat(response.result.getCustomEventClassName()).isEqualTo("class.name");
+        assertThat(response.result.getAdType()).isEqualTo(AdType.CUSTOM);
+        assertThat(response.result.getClickTrackingUrl()).isEqualTo("click_tracking");
+        assertThat(response.result.getFailoverUrl()).isEqualTo("failurl");
+        assertThat(response.result.getImpressionTrackingUrl()).isEqualTo("impression");
+        final Map<String, String> serverExtras = response.result.getServerExtras();
+        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualToIgnoringCase("click_tracking");
+        assertThat(serverExtras.get(DataKeys.ADM_KEY)).isEqualToIgnoringCase("adm");
+        assertThat(serverExtras.get("placement_id")).isEqualTo("619633174799370_623762807719740");
+    }
+
+    @Test
+    public void prepareNetworkResponse_withTwoAdResponses_shouldCreateAdResponseForFirstAd() {
+        final Map<String, String> headers = new HashMap<String, String>();
+        headers.put(ResponseHeader.AD_RESPONSE_TYPE.getKey(), "multi");
+
+        String jsonResponse = "{\n" +
+                "\t\"ad-responses\": [{\n" +
+                "\t\t\"adm\": \"adm\",\n" +
+                "\t\t\"body\": \"custom selector:\",\n" +
+                "\t\t\"headers\": {\n" +
+                "\t\t\t\"X-Custom-Event-Class-Name\": \"class.name\",\n" +
+                "\t\t\t\"X-Custom-Event-Class-Data\": \"{\\\"placement_id\\\":\\\"619633174799370_623762807719740\\\"}\",\n" +
+                "\t\t\t\"X-Adtype\": \"custom\",\n" +
+                "\t\t\t\"X-Clickthrough\": \"click_tracking\",\n" +
+                "\t\t\t\"X-Imptracker\": \"impression\",\n" +
+                "\t\t\t\"X-Failurl\": \"failurl\"\n" +
+                "\t\t}\n" +
+                "\t}," +
+                "\t{" +
+                "\t\t\"adm\": \"adm2\",\n" +
+                "\t\t\"body\": \"custom selector:\",\n" +
+                "\t\t\"headers\": {\n" +
+                "\t\t\t\"X-Custom-Event-Class-Name\": \"class.name2\",\n" +
+                "\t\t\t\"X-Custom-Event-Class-Data\": \"{\\\"placement_id\\\":\\\"2\\\"}\",\n" +
+                "\t\t\t\"X-Adtype\": \"custom\",\n" +
+                "\t\t\t\"X-Clickthrough\": \"click_tracking2\",\n" +
+                "\t\t\t\"X-Imptracker\": \"impression2\",\n" +
+                "\t\t\t\"X-Failurl\": \"failurl2\"\n" +
+                "\t\t}\n" +
+                "}]" +
+                "}";
+
+        NetworkResponse testResponse =
+                new NetworkResponse(200, jsonResponse.getBytes(Charset.defaultCharset()), headers,
+                        false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+        assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.IN_APP);
+        assertThat(response.result.getCustomEventClassName()).isEqualTo("class.name");
+        assertThat(response.result.getAdType()).isEqualTo(AdType.CUSTOM);
+        assertThat(response.result.getClickTrackingUrl()).isEqualTo("click_tracking");
+        assertThat(response.result.getFailoverUrl()).isEqualTo("failurl");
+        assertThat(response.result.getImpressionTrackingUrl()).isEqualTo("impression");
+        final Map<String, String> serverExtras = response.result.getServerExtras();
+        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualToIgnoringCase("click_tracking");
+        assertThat(serverExtras.get(DataKeys.ADM_KEY)).isEqualToIgnoringCase("adm");
+        assertThat(serverExtras.get("placement_id")).isEqualTo("619633174799370_623762807719740");
+    }
+
+    @Test
+    public void prepareNetworkResponse_withZeroAdResponses_shouldReturnFailureResponse() {
+        final Map<String, String> headers = new HashMap<String, String>();
+        headers.put(ResponseHeader.AD_RESPONSE_TYPE.getKey(), "multi");
+
+        String jsonResponse = "{\n" +
+                "\t\"ad-responses\": []\n" +
+                "}";
+
+        NetworkResponse testResponse =
+                new NetworkResponse(200, jsonResponse.getBytes(Charset.defaultCharset()), headers,
+                        false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+        assertThat(response.error).isNotNull();
+        assertThat(response.error).isExactlyInstanceOf(MoPubNetworkError.class);
+        assertThat(((MoPubNetworkError) response.error).getReason()).isEqualTo(
+                MoPubNetworkError.Reason.BAD_HEADER_DATA);
+    }
+
     @Test
     public void deliverResponse_shouldCallListenerOnSuccess() throws Exception {
         subject.deliverResponse(mockAdResponse);
@@ -566,51 +731,4 @@ public void getHeaders_withLocaleLanguageAsEmptyString_shouldNotAddLanguageHeade
 
         assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
     }
-
-    @Test
-    public void logScribeEvent_shouldLogEvent() throws Exception {
-        AdResponse mockAdResponse = mock(AdResponse.class);
-        when(mockAdResponse.getDspCreativeId()).thenReturn("dsp_creative_id");
-        when(mockAdResponse.getAdType()).thenReturn("html");
-        when(mockAdResponse.getNetworkType()).thenReturn("network_type");
-        when(mockAdResponse.getWidth()).thenReturn(320);
-        when(mockAdResponse.getHeight()).thenReturn(50);
-        when(mockAdResponse.getRequestId()).thenReturn("ac298c522b0e412b85ff81e4b9b51f03");
-
-        NetworkResponse networkResponse = new NetworkResponse(200, null, null, false, 300);
-
-        Location mockLocation = mock(Location.class);
-        when(mockLocation.getLatitude()).thenReturn(37.7833);
-        when(mockLocation.getLongitude()).thenReturn(-122.4167);
-        when(mockLocation.getAccuracy()).thenReturn((float) 2000.0);
-
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocation) throws Throwable {
-                Object[] args = invocation.getArguments();
-                BaseEvent baseEvent = (BaseEvent) args[0];
-                assertThat(baseEvent.getName()).isEqualTo(BaseEvent.Name.AD_REQUEST);
-                assertThat(baseEvent.getCategory()).isEqualTo(BaseEvent.Category.REQUESTS);
-                assertThat(baseEvent.getSamplingRate()).isEqualTo(0.1);
-                assertThat(baseEvent.getAdUnitId()).isEqualTo(adUnitId);
-                assertThat(baseEvent.getDspCreativeId()).isEqualTo("dsp_creative_id");
-                assertThat(baseEvent.getAdType()).isEqualTo("html");
-                assertThat(baseEvent.getAdNetworkType()).isEqualTo("network_type");
-                assertThat(baseEvent.getAdWidthPx()).isEqualTo(320);
-                assertThat(baseEvent.getAdHeightPx()).isEqualTo(50);
-                assertThat(baseEvent.getGeoLat()).isEqualTo(37.7833);
-                assertThat(baseEvent.getGeoLon()).isEqualTo(-122.4167);
-                assertThat(baseEvent.getGeoAccuracy()).isEqualTo(2000.0);
-                assertThat(baseEvent.getPerformanceDurationMs()).isEqualTo(300);
-                assertThat(baseEvent.getRequestId()).isEqualTo("ac298c522b0e412b85ff81e4b9b51f03");
-                assertThat(baseEvent.getRequestStatusCode()).isEqualTo(200);
-                assertThat(baseEvent.getRequestUri()).isEqualTo("testUrl");
-                return null;
-            }
-        }).when(mockEventDispatcher).dispatch(any(BaseEvent.class));
-
-        subject.logScribeEvent(mockAdResponse, networkResponse, mockLocation);
-
-        verify(mockEventDispatcher).dispatch(any(BaseEvent.class));
-    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java
index 5fbf65b7..6b2d011e 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java
@@ -2,13 +2,17 @@
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
+import com.mopub.volley.Header;
+import com.mopub.volley.toolbox.HttpResponse;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import static com.mopub.common.util.ResponseHeader.AD_TIMEOUT;
 import static com.mopub.common.util.ResponseHeader.SCROLLABLE;
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -16,28 +20,28 @@
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class HeaderUtilsTest {
-    private TestHttpResponseWithHeaders response;
+    private HttpResponse response;
+    private List<Header> headers;
 
     @Before
     public void setup() {
-        response = new TestHttpResponseWithHeaders(200, "all is well");
+        headers = new ArrayList<Header>();
+        response = new HttpResponse(200, headers);
     }
 
     @Test
     public void extractBooleanHeader_whenValueIsZero_shouldReturnFalse() throws Exception {
-        response.addHeader(SCROLLABLE.getKey(), "0");
+        headers.add(new Header(SCROLLABLE.getKey(), "0"));
         assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, false)).isFalse();
 
-        response.addHeader(SCROLLABLE.getKey(), "0");
         assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, true)).isFalse();
     }
 
     @Test
     public void extractBooleanHeader_whenValueIsOne_shouldReturnTrue() throws Exception {
-        response.addHeader(SCROLLABLE.getKey(), "1");
+        headers.add(new Header(SCROLLABLE.getKey(), "1"));
         assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, false)).isTrue();
 
-        response.addHeader(SCROLLABLE.getKey(), "1");
         assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, true)).isTrue();
     }
 
@@ -51,22 +55,25 @@ public void extractBooleanHeader_shouldReturnDefaultValue() throws Exception {
 
     @Test
     public void extractIntegerHeader_shouldReturnIntegerValue() throws Exception {
-        response.addHeader(AD_TIMEOUT.getKey(), "10");
+        headers.add(new Header(AD_TIMEOUT.getKey(), "10"));
         assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(10);
 
-        response.addHeader(AD_TIMEOUT.getKey(), "0");
+        headers.clear();
+        headers.add(new Header(AD_TIMEOUT.getKey(), "0"));
         assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(0);
 
-        response.addHeader(AD_TIMEOUT.getKey(), "-2");
+        headers.clear();
+        headers.add(new Header(AD_TIMEOUT.getKey(), "-2"));
         assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(-2);
     }
 
     @Test
     public void extractIntegerHeader_withDoubleValue_shouldTruncateValue() throws Exception {
-        response.addHeader(AD_TIMEOUT.getKey(), "3.14");
+        headers.add(new Header(AD_TIMEOUT.getKey(), "3.14"));
         assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(3);
 
-        response.addHeader(AD_TIMEOUT.getKey(), "-3.14");
+        headers.clear();
+        headers.add(new Header(AD_TIMEOUT.getKey(), "-3.14"));
         assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(-3);
     }
 
@@ -75,22 +82,23 @@ public void extractIntegerHeader_whenNoHeaderPresent_shouldReturnNull() throws E
         // no header added to response
         assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isNull();
 
-        response.addHeader(AD_TIMEOUT.getKey(), null);
+        headers.add(new Header(AD_TIMEOUT.getKey(), null));
         assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isNull();
     }
 
     @Test
     public void extractIntegerHeader_withNonsenseStringValue_shouldReturnNull() throws Exception {
-        response.addHeader(AD_TIMEOUT.getKey(), "llama!!guy");
+        headers.add(new Header(AD_TIMEOUT.getKey(), "llama!!guy"));
         assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isNull();
     }
 
     @Test
     public void extractIntHeader_withInvalidHeader_shouldUseDefaultValue() throws Exception {
-        response.addHeader(AD_TIMEOUT.getKey(), "5");
+        headers.add(new Header(AD_TIMEOUT.getKey(), "5"));
         assertThat(HeaderUtils.extractIntHeader(response, AD_TIMEOUT, 10)).isEqualTo(5);
 
-        response.addHeader(AD_TIMEOUT.getKey(), "five!");
+        headers.clear();
+        headers.add(new Header(AD_TIMEOUT.getKey(), "five!"));
         assertThat(HeaderUtils.extractIntHeader(response, AD_TIMEOUT, 10)).isEqualTo(10);
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
deleted file mode 100644
index cd0ab708..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
+++ /dev/null
@@ -1,205 +0,0 @@
-package com.mopub.network;
-
-import android.app.Activity;
-import android.os.Handler;
-
-import com.mopub.common.ClientMetadata;
-import com.mopub.common.Constants;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.DeviceUtils;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.volley.Cache;
-import com.mopub.volley.Network;
-import com.mopub.volley.Request;
-import com.mopub.volley.RequestQueue;
-import com.mopub.volley.toolbox.BasicNetwork;
-import com.mopub.volley.toolbox.DiskBasedCache;
-import com.mopub.volley.toolbox.HttpStack;
-import com.mopub.volley.toolbox.HurlStack;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.io.File;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MoPubRequestQueueTest {
-
-    private MoPubRequestQueue subject;
-    private MoPubRequestQueue.DelayedRequestHelper delayedRequestHelper;
-    @Mock private ScribeRequest mockScribeRequest;
-    @Mock private MoPubRequestQueue.DelayedRequestHelper mockDelayedRequestHelper;
-    @Mock private Handler mockHandler;
-
-    @Before
-    public void setUp() {
-        // NOTE: It's possible to start a new test with a queue set from a previous test suite
-        // Make sure we get a fresh one
-        Networking.setRequestQueueForTesting(null);
-
-        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-
-        // Construct our dependencies & build the object
-        final ClientMetadata clientMetadata = ClientMetadata.getInstance(activity);
-        final HurlStack.UrlRewriter urlRewriter = new PlayServicesUrlRewriter(clientMetadata.getDeviceId(), activity);
-        // No Custom SSL Factory
-
-        HttpStack httpStack = new RequestQueueHttpStack("test_user_agent", urlRewriter);
-
-        Network network = new BasicNetwork(httpStack);
-        File volleyCacheDir = new File(activity.getCacheDir().getPath() + File.separator
-                + Networking.CACHE_DIRECTORY_NAME);
-        Cache cache = new DiskBasedCache(volleyCacheDir, (int) DeviceUtils.diskCacheSizeBytes(volleyCacheDir, Constants.TEN_MB));
-        subject = new MoPubRequestQueue(cache, network);
-        subject.start();
-
-        delayedRequestHelper = subject.new DelayedRequestHelper(mockScribeRequest, 100, mockHandler);
-    }
-
-    @After
-    public void tearDown() {
-        // NOTE: Make sure that we clear the queue after the last test in the test suite runs so
-        // that the next test suite starts fresh
-        Networking.setRequestQueueForTesting(null);
-    }
-
-    @Test
-    public void addDelayedRequest_shouldStartDelayedRequestHelper_shouldPutRequestInMap() throws Exception {
-        subject.addDelayedRequest(mockScribeRequest, mockDelayedRequestHelper);
-
-        verify(mockDelayedRequestHelper).start();
-        assertThat(subject.getDelayedRequests().get(mockScribeRequest)).isEqualTo(mockDelayedRequestHelper);
-        assertThat(subject.getDelayedRequests().entrySet()).hasSize(1);
-    }
-
-    @Test
-    public void addDelayedRequest_shouldCancelPreexistingRequest() throws Exception {
-        subject.addDelayedRequest(mockScribeRequest, mockDelayedRequestHelper);
-
-        verify(mockDelayedRequestHelper, never()).cancel();
-        verify(mockScribeRequest, never()).cancel();
-
-        subject.addDelayedRequest(mockScribeRequest, mockDelayedRequestHelper);
-
-        verify(mockDelayedRequestHelper).cancel();
-        verify(mockScribeRequest).cancel();
-    }
-
-    @Test
-    public void addDelayedRequest_withUniqueRequest_shouldNotCancelOtherRequests() throws Exception {
-        ScribeRequest mockScribeRequest2 = mock(ScribeRequest.class);
-        MoPubRequestQueue.DelayedRequestHelper mockDelayedRequestHelper2 = mock(MoPubRequestQueue.DelayedRequestHelper.class);
-        subject.addDelayedRequest(mockScribeRequest, mockDelayedRequestHelper);
-        subject.addDelayedRequest(mockScribeRequest2, mockDelayedRequestHelper2);
-
-        verify(mockDelayedRequestHelper, never()).cancel();
-        verify(mockScribeRequest, never()).cancel();
-
-        verify(mockDelayedRequestHelper2).start();
-        assertThat(subject.getDelayedRequests().get(mockScribeRequest)).isEqualTo(mockDelayedRequestHelper);
-        assertThat(subject.getDelayedRequests().get(mockScribeRequest2)).isEqualTo(mockDelayedRequestHelper2);
-        assertThat(subject.getDelayedRequests().entrySet()).hasSize(2);
-    }
-
-    @Test
-    public void cancelAll_shouldCancelAllRequestsInTheDelayedRequestMapThatPassTheFilter() throws Exception {
-        ScribeRequest mockScribeRequest2 = mock(ScribeRequest.class);
-        MoPubRequestQueue.DelayedRequestHelper mockDelayedRequestHelper2 = mock(MoPubRequestQueue.DelayedRequestHelper.class);
-        subject.addDelayedRequest(mockScribeRequest, mockDelayedRequestHelper);
-        subject.addDelayedRequest(mockScribeRequest2, mockDelayedRequestHelper2);
-
-
-        subject.cancelAll(new RequestQueue.RequestFilter() {
-            @Override
-            public boolean apply(Request<?> request) {
-                return request == mockScribeRequest;
-            }
-        });
-
-        verify(mockDelayedRequestHelper).cancel();
-        verify(mockScribeRequest).cancel();
-
-        verify(mockDelayedRequestHelper2, never()).cancel();
-        verify(mockScribeRequest2, never()).cancel();
-
-        assertThat(subject.getDelayedRequests().entrySet()).hasSize(1);
-        assertThat(subject.getDelayedRequests().get(mockScribeRequest2)).isEqualTo(mockDelayedRequestHelper2);
-    }
-
-    @Test
-    public void cancelAll_shouldCancelAllRequestsWithMatchingObjectTag() throws Exception {
-        ScribeRequest mockScribeRequest2 = mock(ScribeRequest.class);
-        MoPubRequestQueue.DelayedRequestHelper mockDelayedRequestHelper2 = mock(MoPubRequestQueue.DelayedRequestHelper.class);
-        subject.addDelayedRequest(mockScribeRequest, mockDelayedRequestHelper);
-        subject.addDelayedRequest(mockScribeRequest2, mockDelayedRequestHelper2);
-
-        when(mockScribeRequest.getTag()).thenReturn(1);
-        when(mockScribeRequest2.getTag()).thenReturn(2);
-
-        subject.cancelAll(1);
-
-        verify(mockDelayedRequestHelper).cancel();
-        verify(mockScribeRequest).cancel();
-
-        verify(mockDelayedRequestHelper2, never()).cancel();
-        verify(mockScribeRequest2, never()).cancel();
-
-        assertThat(subject.getDelayedRequests().entrySet()).hasSize(1);
-        assertThat(subject.getDelayedRequests().get(mockScribeRequest2)).isEqualTo(mockDelayedRequestHelper2);
-    }
-
-    @Test
-    public void cancel_shouldCancelMatchingRequest() throws Exception {
-        ScribeRequest mockScribeRequest2 = mock(ScribeRequest.class);
-        MoPubRequestQueue.DelayedRequestHelper mockDelayedRequestHelper2 = mock(MoPubRequestQueue.DelayedRequestHelper.class);
-        subject.addDelayedRequest(mockScribeRequest, mockDelayedRequestHelper);
-        subject.addDelayedRequest(mockScribeRequest2, mockDelayedRequestHelper2);
-
-        subject.cancel(mockScribeRequest);
-
-        verify(mockDelayedRequestHelper).cancel();
-        verify(mockScribeRequest).cancel();
-
-        verify(mockDelayedRequestHelper2, never()).cancel();
-        verify(mockScribeRequest2, never()).cancel();
-
-        assertThat(subject.getDelayedRequests().entrySet()).hasSize(1);
-        assertThat(subject.getDelayedRequests().get(mockScribeRequest2)).isEqualTo(mockDelayedRequestHelper2);
-    }
-    
-    @Test
-    public void DelayedRequestHelper_start_shouldPostDelayedRunnable() throws Exception {
-        delayedRequestHelper.start();
-        verify(mockHandler).postDelayed(delayedRequestHelper.mDelayedRunnable, 100);
-    }
-
-    @Test
-    public void DelayedRequestHelper_cancel_shouldCancelDelayedRunnable() throws Exception {
-        delayedRequestHelper.cancel();
-        verify(mockHandler).removeCallbacks(delayedRequestHelper.mDelayedRunnable);
-    }
-
-    @Test
-    public void DelayedRequestHelper_Runnable_run_shouldRemoveRequestFromDelayedRequestsMap_shouldAddRequestToQueue() throws Exception {
-        subject.addDelayedRequest(mockScribeRequest, 100);
-        assertThat(subject.getDelayedRequests().entrySet().size()).isEqualTo(1);
-        MoPubRequestQueue.DelayedRequestHelper delayedRequestHelper = subject.getDelayedRequests().get(mockScribeRequest);
-
-        delayedRequestHelper.mDelayedRunnable.run();
-
-        assertThat(subject.getDelayedRequests().entrySet()).isEmpty();
-        verify(mockScribeRequest).setRequestQueue(subject);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestUtilsTest.java
new file mode 100644
index 00000000..f7558e8c
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestUtilsTest.java
@@ -0,0 +1,145 @@
+package com.mopub.network;
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.mopub.common.Constants;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.volley.Request;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class MoPubRequestUtilsTest {
+
+    private Context context;
+    private Map<String, String> params;
+
+    @Before
+    public void setUp() {
+        context = Robolectric.buildActivity(Activity.class).get();
+        params = new HashMap<>();
+        params.put("query1", "value1");
+        params.put("query2", "value2,value3,value4");
+        params.put("query3", "");
+        params.put("query4", "value5%20value6");
+    }
+
+    @Test
+    public void chooseMethod_withMoPubUrl_shouldReturnPost() {
+        final int result = MoPubRequestUtils.chooseMethod("https://" + Constants.HOST);
+
+        assertThat(result).isEqualTo(Request.Method.POST);
+    }
+
+    @Test
+    public void chooseMethod_withNonMoPubUrl_shouldReturnGet() {
+        final int result = MoPubRequestUtils.chooseMethod("https://www.someurl.com");
+
+        assertThat(result).isEqualTo(Request.Method.GET);
+    }
+
+    @Test
+    public void isMoPubRequest_withHttpsMoPubUrl_shouldReturnTrue() {
+        final boolean result = MoPubRequestUtils.isMoPubRequest("https://ads.mopub.com/m/ad");
+
+        assertThat(result).isTrue();
+    }
+
+    @Test
+    public void isMoPubRequest_withHttpMoPubUrl_shouldReturnTrue() {
+        final boolean result = MoPubRequestUtils.isMoPubRequest("http://ads.mopub.com/m/imp");
+
+        assertThat(result).isTrue();
+    }
+
+    @Test
+    public void isMoPubRequest_withHttpsNonMoPubUrl_shouldReturnFalse() {
+        final boolean result = MoPubRequestUtils.isMoPubRequest("https://www.abcdefg.com/xyz");
+
+        assertThat(result).isFalse();
+    }
+
+    @Test
+    public void isMoPubRequest_withHttpNonMoPubUrl_shouldReturnFalse() {
+        final boolean result = MoPubRequestUtils.isMoPubRequest("http://www.notmopub.com/hi");
+
+        assertThat(result).isFalse();
+    }
+
+    @Test
+    public void truncateQueryParamsIfPost_withQueryParams_shouldStripQuery() {
+        final String result = MoPubRequestUtils.truncateQueryParamsIfPost(
+                "https://ads.mopub.com/m/ad?query1=abc&query2=def%20ghi&query3=jkl#fragment");
+
+        assertThat(result).isEqualTo("https://ads.mopub.com/m/ad");
+    }
+
+    @Test
+    public void truncateQueryParamsIfPost_withNonMoPubUrl_shouldDoNothing() {
+        final String result = MoPubRequestUtils.truncateQueryParamsIfPost(
+                "https://www.notmopub.com/m/ad?query1=abc&query2=def%20ghi&query3=jkl#fragment");
+
+        assertThat(result).isEqualTo(
+                "https://www.notmopub.com/m/ad?query1=abc&query2=def%20ghi&query3=jkl#fragment");
+    }
+
+    @Test
+    public void truncateQueryParamsIfPost_withIntent_shouldDoNothing() {
+        final String result = MoPubRequestUtils.truncateQueryParamsIfPost("geo:37.777328,-122.416544");
+
+        assertThat(result).isEqualTo("geo:37.777328,-122.416544");
+    }
+
+    @Test
+    public void convertQueryToMap_withAdRequest_shouldReturnQueryMap() {
+        final Map<String, String> result = MoPubRequestUtils.convertQueryToMap(context,
+                "https://ads.mopub.com/m/ad?query1=abc&query2=def%20ghi&query3=jkl&query1=mno&query4&query4&query4#fragment");
+
+        assertThat(result.size()).isEqualTo(4);
+        assertThat(result.get("query1")).isEqualTo("abc,mno");
+        assertThat(result.get("query2")).isEqualTo("def ghi");
+        assertThat(result.get("query3")).isEqualTo("jkl");
+        assertThat(result.get("query4")).isEqualTo(",,");
+    }
+
+    @Test
+    public void convertQueryToMap_withNoQueryParams_shouldReturnEmptyMap() {
+        final Map<String, String> result = MoPubRequestUtils.convertQueryToMap(context,
+                "https://ads.mopub.com/m/ad");
+
+        assertThat(result).isEmpty();
+    }
+
+    @Test
+    public void generateBodyFromParams_withParamsMap_withMoPubUrl_shouldGenerateJsonString() {
+        final String result = MoPubRequestUtils.generateBodyFromParams(params,
+                "https://ads.mopub.com/m/ad");
+
+        assertThat(result).contains("\"query1\":\"value1\"");
+        assertThat(result).contains("\"query2\":\"value2,value3,value4\"");
+        assertThat(result).contains("\"query3\":\"\"");
+        // Values have already been decoded and should not be decoded again.
+        assertThat(result).contains("\"query4\":\"value5%20value6\"");
+        assertThat(result.length()).isEqualTo(90);
+    }
+
+    @Test
+    public void generateBodyFromParams_withParamsMap_withNotMoPubUrl_shouldReturnNull() {
+        final String result = MoPubRequestUtils.generateBodyFromParams(params,
+                "https://not.mopub.com");
+
+        assertThat(result).isNull();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java b/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java
index 042df01a..0bc13acf 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java
@@ -2,66 +2,77 @@
 
 import android.app.Activity;
 import android.content.Context;
+import android.net.Uri;
 
+import com.mopub.common.ClientMetadata;
 import com.mopub.common.GpsHelper;
-import com.mopub.common.GpsHelperTest;
+import com.mopub.common.MoPub;
+import com.mopub.common.privacy.AdvertisingId;
+import com.mopub.common.privacy.MoPubIdentifier;
+import com.mopub.common.privacy.MoPubIdentifierTest;
+import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Reflection;
-import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.mobileads.BuildConfig;
 
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mock;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class PlayServicesUrlRewriterTest {
 
-    private Reflection.MethodBuilder methodBuilder;
+    @Mock
+    private ClientMetadata mockClientMetadata;
+    private PersonalInfoManager mockPersonalInfoManager;
+
+    private Context context;
     private PlayServicesUrlRewriter subject;
 
     @Before
     public void setUp() throws Exception {
-        Context context = Robolectric.buildActivity(Activity.class).create().get();
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        MoPubIdentifierTest.writeAdvertisingInfoToSharedPreferences(context, false);
+        mockPersonalInfoManager = mock(PersonalInfoManager.class);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
+
+        ClientMetadata.getInstance(context);
         GpsHelper.setClassNamesForTesting();
-        methodBuilder = TestMethodBuilderFactory.getSingletonMock();
-        reset(methodBuilder);
-        subject = new PlayServicesUrlRewriter("sha:testDeviceID", context);
+        subject = new PlayServicesUrlRewriter();
     }
 
-    @Test
-    public void rewriteUrl_whenPlayServicesPresent_shouldUsePlayServicesValue() throws Exception {
-        GpsHelperTest.TestAdInfo adInfo = new GpsHelperTest.TestAdInfo();
-        when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
-        when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
-        when(methodBuilder.execute()).thenReturn(
-                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE,
-                adInfo,
-                adInfo.ADVERTISING_ID,
-                adInfo.LIMIT_AD_TRACKING_ENABLED
-        );
-
-        assertThat(subject.rewriteUrl("https://ads.mopub.com/m/ad?ad_id=abcece&udid=mp_tmpl_advertising_id&dnt=mp_tmpl_do_not_track"))
-                .isEqualToIgnoringCase("https://ads.mopub.com/m/ad?ad_id=abcece&udid=ifa%3A38400000-8cf0-11bd-b23e-10b96e40000d&dnt=1");
+    @After
+    public void tearDown(){
+        ClientMetadata.clearForTesting();
+        MoPubIdentifierTest.clearPreferences(context);
     }
 
     @Test
-    public void rewriteUrl_whenPlayServicesNotPresent_shouldUseDeviceValue() throws Exception {
-        when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
-        when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
-        // return error code so it fails
-        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE + 1);
+    public void rewriteUrl_shouldUseAdvertisingIdValue(){
+        when(mockClientMetadata.getMoPubIdentifier()).thenReturn(new MoPubIdentifier(context));
+        when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
+
+        MoPubIdentifier identifier = ClientMetadata.getInstance().getMoPubIdentifier();
+        AdvertisingId adId = identifier.getAdvertisingInfo();
+        String encodedId = Uri.encode(adId.getIdWithPrefix(true));
+        String actualUrl = subject.rewriteUrl("https://ads.mopub.com/m/ad?ad_id=abcece&udid=mp_tmpl_advertising_id&dnt=mp_tmpl_do_not_track");
 
-        assertThat(subject.rewriteUrl("https://ads.mopub.com/m/ad?ad_id=abcece&udid=mp_tmpl_advertising_id&dnt=mp_tmpl_do_not_track"))
-                .isEqualToIgnoringCase("https://ads.mopub.com/m/ad?ad_id=abcece&udid=sha%3AtestDeviceId&dnt=0");
+        assertThat(actualUrl)
+                .isEqualToIgnoringCase("https://ads.mopub.com/m/ad?ad_id=abcece&udid="+encodedId+"&dnt=0");
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/network/RequestManagerTest.java b/mopub-sdk/src/test/java/com/mopub/network/RequestManagerTest.java
deleted file mode 100644
index a9a52e2c..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/RequestManagerTest.java
+++ /dev/null
@@ -1,141 +0,0 @@
-package com.mopub.network;
-
-import android.os.Looper;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.volley.Request;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class RequestManagerTest {
-
-    private ScribeRequestManager subject;
-    @Mock private ScribeRequest.ScribeRequestFactory mockScribeRequestFactory;
-    @Mock private ScribeBackoffPolicy mockScribeBackoffPolicy;
-    @Mock private ScribeRequest mockScribeRequest;
-    @Mock private MoPubRequestQueue mockRequestQueue;
-
-    @Before
-    public void setUp() {
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-
-        subject = new ScribeRequestManager(Looper.getMainLooper());
-        when(mockScribeRequestFactory.createRequest(subject)).thenReturn(mockScribeRequest);
-    }
-
-    @Test
-    public void makeRequest_shouldAddRequestToQueue() throws Exception {
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-
-        verify(mockRequestQueue).add(mockScribeRequest);
-    }
-
-
-    @Test
-    public void makeRequest_shouldCancelTheCurrentRequest() throws Exception {
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-        Request<?> request = subject.getCurrentRequest();
-
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-
-        verify(mockRequestQueue).cancel(request);
-    }
-
-    @Test
-    public void cancelRequest_shouldCancelRequestInQueue_shouldClearRequest() throws Exception {
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-        subject.cancelRequest();
-
-        verify(mockRequestQueue).cancel(mockScribeRequest);
-        assertThat(subject.getCurrentRequest()).isNull();
-    }
-
-    @Test
-    public void cancelRequest_withNullRequestQueue_shouldOnlyClearCurrentRequest() throws Exception {
-        Networking.setRequestQueueForTesting(null);
-
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-        subject.cancelRequest();
-
-        verify(mockRequestQueue, never()).cancel(mockScribeRequest);
-        assertThat(subject.getCurrentRequest()).isNull();
-    }
-
-    @Test
-    public void cancelRequest_withNullCurrentRequest_shouldOnlyClearCurrentRequest() throws Exception {
-        subject.cancelRequest();
-
-        verify(mockRequestQueue, never()).cancel(mockScribeRequest);
-        assertThat(subject.getCurrentRequest()).isNull();
-    }
-
-    @Test
-    public void makeRequestInternal_shouldAddNewRequestToQueue() throws Exception {
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-        reset(mockRequestQueue);
-
-        ScribeRequest previousRequest = (ScribeRequest) subject.getCurrentRequest();
-        ScribeRequest nextRequest = mock(ScribeRequest.class);
-        when(mockScribeRequestFactory.createRequest(subject)).thenReturn(nextRequest);
-
-        subject.makeRequestInternal();
-
-        verify(mockRequestQueue).add(nextRequest);
-        verify(mockRequestQueue, never()).addDelayedRequest(any(Request.class), anyInt());
-        assertThat(previousRequest).isNotEqualTo(nextRequest);
-    }
-
-    @Test
-    public void makeRequestInternal_withRetryCountGreaterThan0_shouldAddNewDelayedRequestToQueue() throws Exception {
-        when(mockScribeBackoffPolicy.getRetryCount()).thenReturn(1);
-        when(mockScribeBackoffPolicy.getBackoffMs()).thenReturn(100);
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-        reset(mockRequestQueue);
-
-        ScribeRequest previousRequest = (ScribeRequest) subject.getCurrentRequest();
-        ScribeRequest nextRequest = mock(ScribeRequest.class);
-        when(mockScribeRequestFactory.createRequest(subject)).thenReturn(nextRequest);
-
-        subject.makeRequestInternal();
-
-        verify(mockRequestQueue).addDelayedRequest(nextRequest, 100);
-        verify(mockRequestQueue, never()).add(any(Request.class));
-        assertThat(previousRequest).isNotEqualTo(nextRequest);
-    }
-
-    @Test
-    public void makeRequestInternal_withNullRequestQueue_shouldClearCurrentRequest_shouldNotAddRequestToQueue() throws Exception {
-        Networking.setRequestQueueForTesting(null);
-
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-
-        verify(mockRequestQueue, never()).add(any(Request.class));
-        verify(mockRequestQueue, never()).addDelayedRequest(any(Request.class), anyInt());
-        assertThat(subject.getCurrentRequest()).isNull();
-    }
-
-    @Test
-    public void clearRequest_shouldSetCurrentRequestToNull() throws Exception {
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-        assertThat(subject.getCurrentRequest()).isNotNull();
-        subject.clearRequest();
-        assertThat(subject.getCurrentRequest()).isNull();
-    }
-}
-
diff --git a/mopub-sdk/src/test/java/com/mopub/network/ScribeBackoffPolicyTest.java b/mopub-sdk/src/test/java/com/mopub/network/ScribeBackoffPolicyTest.java
deleted file mode 100644
index 794121a1..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/ScribeBackoffPolicyTest.java
+++ /dev/null
@@ -1,132 +0,0 @@
-package com.mopub.network;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.volley.NetworkResponse;
-import com.mopub.volley.NoConnectionError;
-import com.mopub.volley.VolleyError;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class ScribeBackoffPolicyTest {
-
-    private ScribeBackoffPolicy subject;
-
-    @Before
-    public void setUp() {
-        subject = new ScribeBackoffPolicy();
-    }
-
-    @Test
-    public void backoff_with503Error_shouldUpdateBackoffTime() throws Exception {
-        NetworkResponse networkResponse = new NetworkResponse(503, null, null, false);
-        VolleyError volleyError = new VolleyError(networkResponse);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(0);
-        assertThat(subject.getRetryCount()).isEqualTo(0);
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(60000);
-        assertThat(subject.getRetryCount()).isEqualTo(1);
-    }
-
-    @Test
-    public void backoff_with504Error_shouldUpdateBackoffTime() throws Exception {
-        NetworkResponse networkResponse = new NetworkResponse(504, null, null, false);
-        VolleyError volleyError = new VolleyError(networkResponse);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(0);
-        assertThat(subject.getRetryCount()).isEqualTo(0);
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(60000);
-        assertThat(subject.getRetryCount()).isEqualTo(1);
-    }
-
-    @Test
-    public void backoff_withNoConnectionError_shouldUpdateBackoffTime() throws Exception {
-        VolleyError volleyError = new NoConnectionError();
-
-        assertThat(subject.getBackoffMs()).isEqualTo(0);
-        assertThat(subject.getRetryCount()).isEqualTo(0);
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(60000);
-        assertThat(subject.getRetryCount()).isEqualTo(1);
-    }
-
-    @Test(expected = VolleyError.class)
-    public void backoff_withOtherErrorType_shouldRethrowException() throws Exception {
-        NetworkResponse networkResponse = new NetworkResponse(500, null, null, false);
-        VolleyError volleyError = new VolleyError(networkResponse);
-
-        subject.backoff(volleyError);
-    }
-
-    @Test
-    public void backoff_shouldUpdateBackoffTime5TimesMax() throws Exception {
-        VolleyError volleyError = new NoConnectionError();
-
-        assertThat(subject.getBackoffMs()).isEqualTo(0);
-        assertThat(subject.getRetryCount()).isEqualTo(0);
-        assertThat(subject.hasAttemptRemaining()).isTrue();
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(60000);
-        assertThat(subject.getRetryCount()).isEqualTo(1);
-        assertThat(subject.hasAttemptRemaining()).isTrue();
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(120000);
-        assertThat(subject.getRetryCount()).isEqualTo(2);
-        assertThat(subject.hasAttemptRemaining()).isTrue();
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(240000);
-        assertThat(subject.getRetryCount()).isEqualTo(3);
-        assertThat(subject.hasAttemptRemaining()).isTrue();
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(480000);
-        assertThat(subject.getRetryCount()).isEqualTo(4);
-        assertThat(subject.hasAttemptRemaining()).isTrue();
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(960000);
-        assertThat(subject.getRetryCount()).isEqualTo(5);
-        assertThat(subject.hasAttemptRemaining()).isFalse();
-    }
-
-    @Test(expected = NoConnectionError.class)
-    public void backoff_withNoAttemptsRemaining_shouldRethrowVolleyException() throws Exception {
-        VolleyError volleyError = new NoConnectionError();
-
-        try {
-            subject.backoff(volleyError);
-            subject.backoff(volleyError);
-            subject.backoff(volleyError);
-            subject.backoff(volleyError);
-            subject.backoff(volleyError);
-        } catch (Exception e) {
-            fail("Exception should not be thrown from above backoffs.");
-        }
-
-        subject.backoff(volleyError);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestManagerTest.java b/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestManagerTest.java
deleted file mode 100644
index 7fc1b530..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestManagerTest.java
+++ /dev/null
@@ -1,80 +0,0 @@
-package com.mopub.network;
-
-import android.os.Looper;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.volley.NoConnectionError;
-import com.mopub.volley.Request;
-import com.mopub.volley.VolleyError;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.doThrow;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class ScribeRequestManagerTest {
-
-    private ScribeRequestManager subject;
-    @Mock private ScribeRequest.ScribeRequestFactory mockScribeRequestFactory;
-    @Mock private ScribeBackoffPolicy mockScribeBackoffPolicy;
-    @Mock private ScribeRequest mockScribeRequest;
-    @Mock private MoPubRequestQueue mockRequestQueue;
-
-    @Before
-    public void setUp() {
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-
-        subject = new ScribeRequestManager(Looper.getMainLooper());
-        when(mockScribeRequestFactory.createRequest(subject)).thenReturn(mockScribeRequest);
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-    }
-
-    @Test
-    public void createRequest_shouldCreateNewScribeRequest() throws Exception {
-        Request request = subject.createRequest();
-        assertThat(request).isEqualTo(mockScribeRequest);
-    }
-
-    @Test
-    public void onResponse_shouldClearRequest() throws Exception {
-        subject.onResponse();
-        assertThat(subject.getCurrentRequest()).isNull();
-    }
-
-    @Test
-    public void onErrorResponse_withBackoffApplied_shouldCallBackoff_shouldMakeDelayedRequest() throws Exception {
-        when(mockScribeBackoffPolicy.getRetryCount()).thenReturn(1);
-        when(mockScribeBackoffPolicy.getBackoffMs()).thenReturn(100);
-
-        VolleyError volleyError = new NoConnectionError();
-        subject.onErrorResponse(volleyError);
-
-        verify(mockScribeBackoffPolicy).backoff(volleyError);
-        verify(mockRequestQueue).addDelayedRequest(mockScribeRequest, 100);
-    }
-
-    @Test
-    public void onErrorResponse_withBackoffNotApplied_shouldClearRequest() throws Exception {
-        reset(mockRequestQueue);
-
-        VolleyError volleyError = new NoConnectionError();
-        doThrow(new VolleyError()).when(mockScribeBackoffPolicy).backoff(volleyError);
-
-        subject.onErrorResponse(volleyError);
-
-        verify(mockScribeBackoffPolicy).backoff(volleyError);
-        verify(mockRequestQueue, never()).add(mockScribeRequest);
-        assertThat(subject.getCurrentRequest()).isNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestTest.java
deleted file mode 100644
index 3af7d466..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestTest.java
+++ /dev/null
@@ -1,86 +0,0 @@
-package com.mopub.network;
-
-import android.app.Activity;
-
-import com.mopub.common.event.BaseEvent;
-import com.mopub.common.event.EventSerializer;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.volley.DefaultRetryPolicy;
-import com.mopub.volley.NetworkResponse;
-import com.mopub.volley.Response;
-
-import org.json.JSONArray;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.nio.charset.Charset;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class ScribeRequestTest {
-
-    private ScribeRequest subject;
-    @Mock private List<BaseEvent> mockEvents;
-    @Mock private EventSerializer mockEventSerializer;
-    @Mock private ScribeRequest.Listener mockListener;
-
-    @Before
-    public void setUp() {
-        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-        Networking.getRequestQueue(activity);
-
-        subject = new ScribeRequest("url", mockEvents, mockEventSerializer, mockListener);
-    }
-
-    @Test
-    public void constructor_shouldSetShouldCacheToFalse() throws Exception {
-        assertThat(subject.shouldCache()).isFalse();
-    }
-
-    @Test
-    public void constructor_shouldSetRetryPolicyToDefaultRetryPolicy() throws Exception {
-        assertThat(subject.getRetryPolicy()).isExactlyInstanceOf(DefaultRetryPolicy.class);
-    }
-
-    @Test
-    public void getParams_returnJsonSerializedEventsInMap() throws Exception {
-        JSONArray mockJsonArray = mock(JSONArray.class);
-        when(mockJsonArray.toString()).thenReturn("jsonArrayToString");
-        when(mockEventSerializer.serializeAsJson(mockEvents)).thenReturn(mockJsonArray);
-
-        Map<String, String> params = subject.getParams();
-
-        verify(mockEventSerializer).serializeAsJson(mockEvents);
-        assertThat(params.keySet().size()).isEqualTo(1);
-        assertThat(params.get("log")).isEqualTo("jsonArrayToString");
-    }
-    
-    @Test
-    public void parseNetworkResponse_shouldReturnSuccessResponse() throws Exception {
-        NetworkResponse networkResponse = new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), new HashMap<String, String>(), false);
-
-        Response<Void> response = subject.parseNetworkResponse(networkResponse);
-
-        assertThat(response.isSuccess()).isTrue();
-    }
-
-    @Test
-    public void deliverResponse_shouldNotifyListener() throws Exception {
-        subject.deliverResponse(null);
-
-        verify(mockListener).onResponse();
-    }
-}
