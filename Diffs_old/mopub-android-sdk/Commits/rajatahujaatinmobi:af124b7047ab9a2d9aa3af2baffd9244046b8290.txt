diff --git a/extras/src/com/mopub/mobileads/InMobiBanner.java b/extras/src/com/mopub/mobileads/InMobiBanner.java
index 0dff2b97..fa84aaa3 100644
--- a/extras/src/com/mopub/mobileads/InMobiBanner.java
+++ b/extras/src/com/mopub/mobileads/InMobiBanner.java
@@ -1,103 +1,179 @@
-package com.mopub.simpleadsdemo;
+package com.mopub.custom;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+import java.util.HashMap;
+
+import java.util.Map;
 
 import android.app.Activity;
 import android.content.Context;
 import android.util.Log;
-import com.inmobi.androidsdk.IMAdListener;
-import com.inmobi.androidsdk.IMAdRequest;
-import com.inmobi.androidsdk.IMAdRequest.ErrorCode;
-import com.inmobi.androidsdk.IMAdView;
+
+import com.inmobi.commons.EducationType;
+import com.inmobi.commons.EthnicityType;
+import com.inmobi.commons.GenderType;
+import com.inmobi.commons.HasChildren;
+import com.inmobi.commons.InMobi;
+import com.inmobi.commons.InMobi.LOG_LEVEL;
+import com.inmobi.commons.MaritalStatus;
+import com.inmobi.commons.SexualOrientation;
+import com.inmobi.monetization.IMBanner;
+import com.inmobi.monetization.IMBannerListener;
+import com.inmobi.monetization.IMErrorCode;
 import com.mopub.mobileads.CustomEventBanner;
+import com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
+import com.mopub.mobileads.MoPub;
 import com.mopub.mobileads.MoPubErrorCode;
 
-import java.util.HashMap;
-import java.util.Map;
-
 /*
- * Tested with InMobi SDK 3.7.0.
+ * Tested with InMobi SDK 4.0.2
  */
-class InMobiBanner extends CustomEventBanner implements IMAdListener {
-    private CustomEventBannerListener mBannerListener;
-    private IMAdView mInMobiBanner;
-
-    /*
-     * Abstract methods from CustomEventBanner
-     */
-    @Override
-    protected void loadBanner(Context context, CustomEventBannerListener bannerListener,
-            Map<String, Object> localExtras, Map<String, String> serverExtras) {
-        mBannerListener = bannerListener;
-        
-        Activity activity = null;
-        if (context instanceof Activity) {
-            activity = (Activity) context;
-        } else {
-            // You may also pass in an Activity Context in the localExtras map and retrieve it here.
-        }
-        
-        if (activity == null) {
-            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-        
-        /*
-         * You may also pass this String down in the serverExtras Map by specifying Custom Event Data
-         * in MoPub's web interface.
-         */
-        String inMobiAppId = "YOUR_INMOBI_APP_ID";
-        mInMobiBanner = new IMAdView(activity, IMAdView.INMOBI_AD_UNIT_320X50, inMobiAppId);
-        
-        mInMobiBanner.setIMAdListener(this);
-
-        IMAdRequest imAdRequest = new IMAdRequest();
-        Map<String, String> requestParameters = new HashMap<String, String>();
-        requestParameters.put("tp", "c_mopub");
-        imAdRequest.setRequestParams(requestParameters);
-
-        mInMobiBanner.loadNewAd(imAdRequest);
-    }
-
-    @Override
-    protected void onInvalidate() {
-        mInMobiBanner.setIMAdListener(null);
-    }
-
-    /*
-     * IMAdListener implementation
-     */
-    @Override
-    public void onAdRequestCompleted(IMAdView adView) {
-        if (mInMobiBanner != null) {
-            Log.d("MoPub", "InMobi banner ad loaded successfully. Showing ad...");
-            mBannerListener.onBannerLoaded(mInMobiBanner);
-        } else {
-            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-        }
-    }
-
-    @Override
-    public void onAdRequestFailed(IMAdView adView, ErrorCode errorCode) {
-        Log.d("MoPub", "InMobi banner ad failed to load.");
-        mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
-    }
-
-    @Override
-    public void onDismissAdScreen(IMAdView adView) {
-        Log.d("MoPub", "InMobi banner ad modal dismissed.");
-    }
-
-    @Override
-    public void onLeaveApplication(IMAdView adView) {
-        /*
-         * Because InMobi does not have an onClick equivalent, we use onLeaveApplication
-         * as a click notification.
-         */
-        Log.d("MoPub", "InMobi banner ad leaving application.");
-        mBannerListener.onBannerClicked();
-    }
-
-    @Override
-    public void onShowAdScreen(IMAdView adView) {
-        Log.d("MoPub", "InMobi banner ad modal shown.");
-    }
+public class InMobiBanner extends CustomEventBanner implements IMBannerListener {
+
+	@Override
+	protected void loadBanner(Context context,
+			CustomEventBannerListener bannerListener,
+			Map<String, Object> localExtras, Map<String, String> serverExtras) {
+		mBannerListener = bannerListener;
+		Activity activity = null;
+		if (context instanceof Activity) {
+			activity = (Activity) context;
+		} else {
+			// You may also pass in an Activity Context in the localExtras map
+			// and retrieve it here.
+		}
+		if (activity == null) {
+			mBannerListener.onBannerFailed(null);
+			return;
+		}
+		if (!isAppIntialize) {
+			InMobi.initialize(activity, "INMOBI_APP_ID");
+			isAppIntialize = true;
+		}
+
+		/*
+		 * You may also pass this String down in the serverExtras Map by
+		 * specifying Custom Event Data in MoPub's web interface.
+		 */
+		iMBanner = new IMBanner(activity, "INMOBI_APP_ID",
+				IMBanner.INMOBI_AD_UNIT_320X50);
+		InMobi.setAreaCode("areacode");
+		InMobi.setEducation(EducationType.HIGHSCHOOLORLESS);
+		InMobi.setGender(GenderType.MALE);
+		InMobi.setIncome(1000);
+		InMobi.setAge(23);
+		InMobi.setSexualOrientation(SexualOrientation.STRAIGHT);
+		InMobi.setPostalCode("postalcode");
+		InMobi.setMaritalStatus(MaritalStatus.SINGLE);
+		InMobi.setLogLevel(LOG_LEVEL.DEBUG);
+		InMobi.setLocationWithCityStateCountry("bangalore", "karnataka",
+				"india");
+		InMobi.setLocationInquiryAllowed(true);
+		InMobi.setLanguage("ENGLISH");
+		InMobi.setInterests("dance");
+		InMobi.setHasChildren(HasChildren.FALSE);
+		InMobi.setEthnicity(EthnicityType.ASIAN);
+		SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
+		Calendar cal = Calendar.getInstance();
+		try {
+			cal.setTime(format.parse("11-03-2013"));
+			InMobi.setDateOfBirth(cal);
+		} catch (ParseException e) {
+			e.printStackTrace();
+		}
+		Map<String, String> map = new HashMap<String, String>();
+		map.put("tp", "c_mopub");
+		map.put("tp-ver", MoPub.SDK_VERSION);
+		iMBanner.setRequestParams(map);
+		iMBanner.setKeywords("keywords");
+		iMBanner.setRefTagParam("key", "value");
+		iMBanner.setIMBannerListener(this);
+		// to call disable hardware acceleration
+		// mInMobiBanner.disableHardwareAcceleration();
+		iMBanner.setRefreshInterval(-1);
+		iMBanner.loadBanner();
+
+	}
+
+	private CustomEventBannerListener mBannerListener;
+	private IMBanner iMBanner;
+	private static boolean isAppIntialize = false;
+
+	/*
+	 * Abstract methods from CustomEventBanner
+	 */
+
+	@Override
+	public void onInvalidate() {
+		if (iMBanner != null) {
+			iMBanner.setIMBannerListener(null);
+			iMBanner.destroy();
+		}
+
+	}
+
+	@Override
+	public void onBannerInteraction(IMBanner arg0, Map<String, String> arg1) {
+		Log.d("MoPub", "InMobi banner interaction happening.");
+		if (mBannerListener != null) {
+			mBannerListener.onBannerClicked();
+		}
+	}
+
+	@Override
+	public void onBannerRequestFailed(IMBanner arg0, IMErrorCode arg1) {
+		Log.d("MoPub", "InMobi banner ad failed to load.");
+		if (mBannerListener != null) {
+			if (arg1 == IMErrorCode.INTERNAL_ERROR) {
+				mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
+			} else if (arg1 == IMErrorCode.INVALID_REQUEST) {
+				mBannerListener
+						.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+			} else if (arg1 == IMErrorCode.NETWORK_ERROR) {
+				mBannerListener
+						.onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+			} else if (arg1 == IMErrorCode.NO_FILL) {
+				mBannerListener.onBannerFailed(MoPubErrorCode.NO_FILL);
+			} else {
+				mBannerListener.onBannerFailed(MoPubErrorCode.UNSPECIFIED);
+			}
+		}
+	}
+
+	@Override
+	public void onBannerRequestSucceeded(IMBanner arg0) {
+		Log.d("MoPub", "InMobi banner ad loaded successfully.");
+		if(mBannerListener!=null){
+			if (iMBanner != null) {
+				mBannerListener.onBannerLoaded(iMBanner);
+			} else {
+				mBannerListener
+					.onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+			}
+		}
+	}
+
+	@Override
+	public void onDismissBannerScreen(IMBanner arg0) {
+		Log.d("MoPub", "InMobi banner ad screen dismissed");
+		if (mBannerListener != null) {
+			mBannerListener.onBannerCollapsed();
+		}
+	}
+
+	@Override
+	public void onLeaveApplication(IMBanner arg0) {
+		Log.d("MoPub", "InMobi banner ad leaving application.");
+	}
+
+	@Override
+	public void onShowBannerScreen(IMBanner arg0) {
+		Log.d("MoPub", "InMobi banner ad modal shown.");
+		if (mBannerListener != null) {
+			mBannerListener.onBannerExpanded();
+		}
+	}
+
 }
diff --git a/extras/src/com/mopub/mobileads/InMobiInterstitial.java b/extras/src/com/mopub/mobileads/InMobiInterstitial.java
index 9132de7a..7297cce0 100644
--- a/extras/src/com/mopub/mobileads/InMobiInterstitial.java
+++ b/extras/src/com/mopub/mobileads/InMobiInterstitial.java
@@ -1,106 +1,184 @@
-package com.mopub.simpleadsdemo;
+package com.mopub.custom;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+import java.util.HashMap;
+import java.util.Map;
 
 import android.app.Activity;
 import android.content.Context;
 import android.util.Log;
-import com.inmobi.androidsdk.IMAdInterstitial;
-import com.inmobi.androidsdk.IMAdInterstitialListener;
-import com.inmobi.androidsdk.IMAdRequest;
-import com.inmobi.androidsdk.IMAdRequest.ErrorCode;
+
+import com.inmobi.commons.EducationType;
+import com.inmobi.commons.EthnicityType;
+import com.inmobi.commons.GenderType;
+import com.inmobi.commons.HasChildren;
+import com.inmobi.commons.InMobi;
+import com.inmobi.commons.MaritalStatus;
+import com.inmobi.commons.SexualOrientation;
+import com.inmobi.commons.InMobi.LOG_LEVEL;
+import com.inmobi.monetization.IMErrorCode;
+import com.inmobi.monetization.IMInterstitial;
 import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.MoPub;
 import com.mopub.mobileads.MoPubErrorCode;
-
-import java.util.HashMap;
-import java.util.Map;
+import com.inmobi.monetization.IMInterstitialListener;
 
 /*
- * Tested with InMobi SDK 3.7.0.
+ * Tested with InMobi SDK  4.0.2
  */
-class InMobiInterstitial extends CustomEventInterstitial implements IMAdInterstitialListener {
-    private CustomEventInterstitialListener mInterstitialListener;
-    private IMAdInterstitial mInMobiInterstitial;
-
-    /*
-     * Abstract methods from CustomEventInterstitial
-     */
-    @Override
-    protected void loadInterstitial(Context context, CustomEventInterstitialListener interstitialListener,
-            Map<String, Object> localExtras, Map<String, String> serverExtras) {
-        mInterstitialListener = interstitialListener;
-        
-        Activity activity = null;
-        if (context instanceof Activity) {
-            activity = (Activity) context;
-        } else {
-            // You may also pass in an Activity Context in the localExtras map and retrieve it here.
-        }
-        
-        if (activity == null) {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-        
-        /*
-         * You may also pass this String down in the serverExtras Map by specifying Custom Event Data
-         * in MoPub's web interface.
-         */
-        String inMobiAppId = "YOUR_INMOBI_APP_ID";
-        mInMobiInterstitial = new IMAdInterstitial(activity, inMobiAppId);
-        
-        mInMobiInterstitial.setIMAdInterstitialListener(this);
-
-        IMAdRequest imAdRequest = new IMAdRequest();
-        Map<String, String> requestParameters = new HashMap<String, String>();
-        requestParameters.put("tp", "c_mopub");
-        imAdRequest.setRequestParams(requestParameters);
-
-        mInMobiInterstitial.loadNewAd(imAdRequest);
-    }
-    
-    @Override
-    protected void showInterstitial() {
-        Log.d("MoPub", "Showing InMobi interstitial ad.");
-        mInMobiInterstitial.show();
-    }
-
-    @Override
-    protected void onInvalidate() {
-        mInMobiInterstitial.setIMAdInterstitialListener(null);
-    }
-
-    /*
-     * IMAdListener implementation
-     */
-    @Override
-    public void onAdRequestLoaded(IMAdInterstitial adInterstitial) {
-        Log.d("MoPub", "InMobi interstitial ad loaded successfully.");
-        mInterstitialListener.onInterstitialLoaded();
-    }
-    
-    @Override
-    public void onAdRequestFailed(IMAdInterstitial adInterstitial, ErrorCode errorCode) {
-        Log.d("MoPub", "InMobi interstitial ad failed to load.");
-        mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-    }
-
-    @Override
-    public void onShowAdScreen(IMAdInterstitial adInterstitial) {
-        mInterstitialListener.onInterstitialShown();
-    }
-    
-    @Override
-    public void onLeaveApplication(IMAdInterstitial adInterstitial) {
-        /*
-         * Because InMobi does not have an onClick equivalent, we use onLeaveApplication
-         * as a click notification.
-         */
-        Log.d("MoPub", "InMobi interstitial ad leaving application.");
-        mInterstitialListener.onInterstitialClicked();
-    }
-
-    @Override
-    public void onDismissAdScreen(IMAdInterstitial adInterstitial) {
-        Log.d("MoPub", "InMobi interstitial ad dismissed.");
-        mInterstitialListener.onInterstitialDismissed();
-    }
+public class InMobiInterstitial extends CustomEventInterstitial implements
+		IMInterstitialListener {
+	private CustomEventInterstitialListener mInterstitialListener;
+
+	@Override
+	protected void loadInterstitial(Context context,
+			CustomEventInterstitialListener interstitialListener,
+			Map<String, Object> localExtras, Map<String, String> serverExtras) {
+		mInterstitialListener = interstitialListener;
+		Activity activity = null;
+		if (context instanceof Activity) {
+			activity = (Activity) context;
+		} else {
+		}
+
+		if (activity == null) {
+			mInterstitialListener
+					.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
+			return;
+		}
+
+		/*
+		 * You may also pass this String down in the serverExtras Map by
+		 * specifying Custom Event Data in MoPub's web interface.
+		 */
+		if (!isAppIntialize) {
+			InMobi.initialize(activity, "INMOBI_APP_ID");
+			isAppIntialize = true;
+		}
+		this.iMInterstitial = new IMInterstitial(activity, "INMOBI_APP_ID");
+		InMobi.setAreaCode("areacode");
+		InMobi.setEducation(EducationType.HIGHSCHOOLORLESS);
+		InMobi.setGender(GenderType.MALE);
+		InMobi.setIncome(1000);
+		InMobi.setAge(23);
+		InMobi.setSexualOrientation(SexualOrientation.STRAIGHT);
+		InMobi.setPostalCode("postalcode");
+		InMobi.setMaritalStatus(MaritalStatus.SINGLE);
+		InMobi.setLogLevel(LOG_LEVEL.DEBUG);
+		InMobi.setLocationWithCityStateCountry("bangalore", "karnataka",
+				"india");
+		InMobi.setLocationInquiryAllowed(true);
+		InMobi.setLanguage("ENGLISH");
+		InMobi.setInterests("dance");
+		InMobi.setHasChildren(HasChildren.FALSE);
+		InMobi.setEthnicity(EthnicityType.ASIAN);
+		SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
+		Calendar cal = Calendar.getInstance();
+		try {
+			cal.setTime(format.parse("11-03-2013"));
+			InMobi.setDateOfBirth(cal);
+		} catch (ParseException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+		Map<String, String> map = new HashMap<String, String>();
+		map.put("tp", "c_mopub");
+		map.put("tp-ver", MoPub.SDK_VERSION);
+		iMInterstitial.setRequestParams(map);
+		iMInterstitial.setKeywords("keywords");
+		iMInterstitial.setIMInterstitialListener(this);
+		// to call disable hardware acceleration
+		// mInMobiInterstitial.disableHardwareAcceleration();
+		iMInterstitial.loadInterstitial();
+
+	}
+
+	// private CustomEventInterstitial mInterstitialListener;
+	private IMInterstitial iMInterstitial;
+	private static boolean isAppIntialize = false;
+
+	/*
+	 * Abstract methods from CustomEventInterstitial
+	 */
+
+	@Override
+	public void showInterstitial() {
+		if (iMInterstitial != null
+				&& IMInterstitial.State.READY.equals(this.iMInterstitial
+						.getState())) {
+			iMInterstitial.show();
+		}
+	}
+
+	@Override
+	public void onInvalidate() {
+		if (iMInterstitial != null) {
+			iMInterstitial.setIMInterstitialListener(null);
+			iMInterstitial.destroy();
+		}
+	}
+
+	@Override
+	public void onDismissInterstitialScreen(IMInterstitial arg0) {
+		Log.d("MoPub", "InMobi interstitial ad dismissed.");
+		if (mInterstitialListener != null) {
+			mInterstitialListener.onInterstitialDismissed();
+		}
+	}
+
+	@Override
+	public void onInterstitialFailed(IMInterstitial arg0, IMErrorCode arg1) {
+		Log.d("MoPub", "InMobi interstitial ad failed to load.");
+		if (mInterstitialListener != null) {
+
+			if (arg1 == IMErrorCode.INTERNAL_ERROR) {
+				mInterstitialListener
+						.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+			} else if (arg1 == IMErrorCode.INVALID_REQUEST) {
+				mInterstitialListener
+						.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+			} else if (arg1 == IMErrorCode.NETWORK_ERROR) {
+				mInterstitialListener
+						.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+			} else if (arg1 == IMErrorCode.NO_FILL) {
+				mInterstitialListener
+						.onInterstitialFailed(MoPubErrorCode.NO_FILL);
+			} else {
+				mInterstitialListener
+						.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
+			}
+		}
+	}
+
+	@Override
+	public void onInterstitialInteraction(IMInterstitial arg0,
+			Map<String, String> arg1) {
+		Log.d("MoPub", "InMobi interstitial interaction happening.");
+		if (mInterstitialListener != null) {
+			mInterstitialListener.onInterstitialClicked();
+		}
+	}
+
+	@Override
+	public void onInterstitialLoaded(IMInterstitial arg0) {
+		Log.d("MoPub", "InMobi interstitial ad loaded successfully.");
+		if (mInterstitialListener != null) {
+			mInterstitialListener.onInterstitialLoaded();
+		}
+	}
+
+	@Override
+	public void onLeaveApplication(IMInterstitial arg0) {
+		Log.d("MoPub", "InMobi interstitial ad leaving application.");
+	}
+
+	@Override
+	public void onShowInterstitialScreen(IMInterstitial arg0) {
+		Log.d("MoPub", "InMobi interstitial show on screen.");
+		if (mInterstitialListener != null) {
+			mInterstitialListener.onInterstitialShown();
+		}
+	}
 }
