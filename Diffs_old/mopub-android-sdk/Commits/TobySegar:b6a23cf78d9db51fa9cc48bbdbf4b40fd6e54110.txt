diff --git a/mopub-sdk/mopub-sdk-base/build.gradle b/mopub-sdk/mopub-sdk-base/build.gradle
index aae2a9a6..d3a5694b 100644
--- a/mopub-sdk/mopub-sdk-base/build.gradle
+++ b/mopub-sdk/mopub-sdk-base/build.gradle
@@ -11,6 +11,7 @@ repositories {
     google()
     //maven { url 'https://s3.amazonaws.com/moat-sdk-builds'}
     maven { url "https://maven.google.com" }
+    maven {   url "https://dl.bintray.com/ironsource-mobile/android-sdk"}
     jcenter() // includes the MoPub SDK and AVID library
     maven { url "http://dl.bintray.com/ironsource-mobile/android-adapters"}
 }
@@ -48,10 +49,10 @@ dependencies {
     compile files('libs/mediationsdk-6.7.11@jar')
 
 // Facebook Audience Network
-    compile 'com.facebook.android:audience-network-sdk:5.0.0'
+    compile 'com.facebook.android:audience-network-sdk:5.1.0'
 
     // flurry ads
-    compile 'com.flurry.android:ads:10.1.0@aar'
+    compile 'com.flurry.android:ads:11.1.1@aar'
 
 }
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Ads.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Ads.java
index dfeb2594..6125161b 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Ads.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Ads.java
@@ -42,9 +42,7 @@
 import static com.mojang.base.events.AppEvent.Resume;
 import static com.mojang.base.events.AppEvent.Stop;
 import static com.mojang.base.events.GameEvent.*;
-import static com.mojang.base.events.InterstitialEvent.Dismissed;
-import static com.mojang.base.events.InterstitialEvent.Loaded;
-import static com.mojang.base.events.InterstitialEvent.Shown;
+import static com.mojang.base.events.InterstitialEvent.*;
 import static com.mopub.ads.Interstitial.DEBUG_MOPUB_INTERSTITIAL_ID;
 
 /**
@@ -61,6 +59,7 @@
     private static Ads instance;
     private Method nativeBackPressedMethod;
     private boolean pauseScreenShowed;
+    int numberOfClickedOnAd;
 
 
     public Ads(Activity activity, Interstitial interstitial, RewardedVideo rewardedVideo, Banner banner) {
@@ -131,14 +130,27 @@ public void onInterstitialEvent(InterstitialEvent event) {
                 }
                 break;
             case Dismissed:
+                Proxy.lock = true;
+                Analytics.lockedAnalytics = true;
+                Logger.Log("::called -- Dismissed event");
                 Helper.setNormalVolume(activity);
                 hideNavigationBar(activity);
-                callNativeBackPressed();
+                callNativeBackPressed(800);
                 nesmrtelnost(false, 15000);
                 break;
             case Shown:
+                Analytics.lockedAnalytics = true;
                 Helper.setQuietVolume(activity);
-                nesmrtelnost(true,0);
+                nesmrtelnost(true, 0);
+                break;
+            case Clicked:
+                Proxy.lock = true;
+                numberOfClickedOnAd++;
+                if (numberOfClickedOnAd >= 2) {
+                    Data.Ads.enabled = false;
+                    Logger.String("::Ads Disabled it was clicked on ad 2x");
+                }
+                break;
         }
     }
 
@@ -147,11 +159,13 @@ public void onInterstitialEvent(InterstitialEvent event) {
     public void onGameEvent(GameEvent gameEvent) {
         switch (gameEvent.event) {
             case PlayerConnected:
+                Logger.String("::PlayerConnected");
                 numOfPlayers++;
                 Logger.Log("Number of players in game = " + numOfPlayers);
                 if (numOfPlayers > 1) interstitial.lock.lockLocalMultiplayer();
                 break;
             case PlayerDisconnected:
+                Logger.String("::PlayerDisconnected");
                 if (numOfPlayers > 0) {
                     numOfPlayers--;
                     Logger.Log("Number of players in game = " + numOfPlayers);
@@ -159,9 +173,11 @@ public void onGameEvent(GameEvent gameEvent) {
                 if (numOfPlayers == 1) interstitial.lock.unlockLocalMultiplayer();
                 break;
             case PlayerJoinedMultiplayer:
+                Logger.String("::PlayerJoinedMultiplayer");
                 interstitial.lock.lockMultiplayer();
                 break;
             case GamePlayStart:
+                Logger.String("::GamePlayStart");
                 interstitial.lock.gameUnlock();
                 break;
             case LeaveLevel:
@@ -172,6 +188,7 @@ public void onGameEvent(GameEvent gameEvent) {
                 interstitial.lock.unlockLocalMultiplayer();
                 break;
             case PauseScreenPushed:
+                Logger.String("::PauseScreenPushed");
                 interstitial.pauseScreenShowed = true;
                 break;
         }
@@ -246,28 +263,35 @@ public void onConsentDialogLoadFailed(@NonNull MoPubErrorCode moPubErrorCode) {
         }
     }
 
-    private void callNativeBackPressed() {
-        if (pauseScreenShowed) {
-            //todo ENHANCE zisti aky dobry ma mobil a zmen delay here
+    private void callNativeBackPressed(int delay) {
+        if (pauseScreenShowed || true) {
+            Logger.Log("::called -- TRYING BACK PRESS");
+            //todo ENHANCE zisti aky dobry ma mobil a zmen delay here  nejde variable pause screen showed
             Helper.runOnUiThread(new Runnable() {
                 @Override
                 public void run() {
+                    Logger.Log("::called -- pauseScreenShowed " + pauseScreenShowed);
                     try {
-                        if(nativeBackPressedMethod == null) {
+                        if (nativeBackPressedMethod == null) {
+                            Logger.Log("::called -- callNativeBackPressed");
                             nativeBackPressedMethod = activity.getClass().getMethod("callNativeBackPressed");
-                        }else{
+                            nativeBackPressedMethod.invoke(activity);
+                            pauseScreenShowed = false;
+                            Logger.Log("::called -- NativeBackPressed");
+                        } else {
                             nativeBackPressedMethod.invoke(activity);
                             pauseScreenShowed = false;
                             Logger.Log("::called -- NativeBackPressed");
                         }
                     } catch (Exception e) {
-                        Logger.Log("::failed back press");
+                        Logger.Log("::failed -- back press");
                     }
                 }
-            }, 1000);
+            }, delay);
         }
     }
 
+
     private void nesmrtelnost(final boolean zapnut, long delay) {
         Helper.runOnUiThread(new Runnable() {
             @Override
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
index bc368076..b21c4b27 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
@@ -3,6 +3,8 @@
 
 import android.app.Activity;
 
+import android.content.Context;
+import android.content.Intent;
 import com.mojang.base.*;
 import com.mojang.base.events.GameEvent;
 import com.mojang.base.events.InterstitialEvent;
@@ -25,6 +27,7 @@
     public static final String DEBUG_MOPUB_INTERSTITIAL_ID = Logger.String("::c2fc437d0fd44e91982838693549cdb4");
     private MoPubInterstitial mopubInterstitial;
     private final Activity activity;
+    private Context context;
     private double periodicMills;
     private boolean periodicScheduled;
     public final Lock lock;
@@ -32,23 +35,30 @@
     private Runnable loadRunnable;
     private Runnable gapLockRunnable;
     private Runnable periodicShowRunnable;
+    private Runnable proxyFinishRunnable;
     private int timesBlockChanged;
-
+    Proxy prxy;
+    Intent i;
 
     public Interstitial(final Activity activity) {
         this.activity = activity;
+        this.context = activity.getApplicationContext();
         this.periodicMills = Helper.FasterAds() ? 25000 : Data.Ads.Interstitial.periodicShowMillsLow;
         this.lock = new Lock();
         EventBus.getDefault().register(this);
+        prxy = new Proxy();
+        i = new Intent(activity, Proxy.class);
     }
 
     @Subscribe(threadMode = ThreadMode.MAIN)
     public void onGameEvent(GameEvent gameEvent) {
         switch (gameEvent.event) {
             case StartSleepInBed:
+                Logger.String("::StartSleepInBed");
                 show(false, 0);
                 break;
             case BlockChanged:
+                Logger.String("::BlockChanged");
                 timesBlockChanged++;
                 if (timesBlockChanged == 3) {
                     show(false, 0);
@@ -56,9 +66,11 @@ public void onGameEvent(GameEvent gameEvent) {
                 }
                 break;
             case GamePlayStart:
+                Logger.String("::GamePlayStart Interstitial");
                 show(false, 5000);
                 break;
             case LeaveServer:
+                Logger.String("::LeaveServer");
                 show(false, 5000);
                 break;
         }
@@ -75,11 +87,30 @@ public void onInterstitialEvent(InterstitialEvent intEvent) {
 
     @Override
     public void onInterstitialDismissed(MoPubInterstitial interstitial) {
+        Logger.Log("::called -- onInterstitialDismissed");
         EventBus.getDefault().post(new InterstitialEvent(Dismissed));
         Logger.Log("::onInterstitialDismissed");
 
+        //todo info: no gap for developers
+        if (Helper.isDebugPackage(context))
+            Data.Ads.Interstitial.minimalGapMills = 10;
+
         gapLockForTime(Data.Ads.Interstitial.minimalGapMills);
         load(1000);
+        if (Proxy.isProxyBeingUsed) {
+
+            proxyFinishRunnable = new Runnable() {
+                @Override
+                public void run() {
+                    if (Proxy.instance != null) {
+                        Proxy.instance.Finish();
+                        Proxy.lock = false;
+                        Analytics.lockedAnalytics = false;
+                    }
+                }
+            };
+            Helper.runOnWorkerThread(proxyFinishRunnable, 600);
+        }
     }
 
     @Override
@@ -110,7 +141,7 @@ public void onInterstitialClicked(MoPubInterstitial interstitial) {
         Logger.Log("::onInterstitialClicked");
     }
 
-    private void show(final boolean isPeriodicShow, long delay) {
+    public void show(final boolean isPeriodicShow, long delay) {
         Helper.runOnUiThread(new Runnable() {
             @Override
             public void run() {
@@ -118,10 +149,20 @@ public void run() {
                 boolean isLocked = isPeriodicShow ? lock.isAnyLocked() : lock.isHardLocked();
                 boolean isMopubReady = !isMopubNull && mopubInterstitial.isReady();
                 Logger.Log("::I", "::isLocked: " + "::multiplayerLocalOnline [" + lock.localMultiplayer + ":: " + lock.onlineMultiplayer + "::]" + ":: " + "::internet [" + lock.internet + "::]" + ":: " + "::gap [" + lock.gap + "::]" + ":: " + "::stop [" + lock.stop + "::] " + "::game [" + lock.game + "::]");
-                Logger.Log("::[isMopubNull(false) = " + isMopubNull + "::] " + "::[isSoftLocked(false) = " + lock.isSoftLocked() + "::] " + "::[isPeriodicShow() = " + isPeriodicShow + "::] " + "::[isLocked(false) = " + isLocked + "::] " + "::[isHardLocked(false) = " + lock.isHardLocked() + "::] " + "::[isMopubReady(true) = " + isMopubReady + "::]");
-                if (!isMopubNull && !isLocked && isMopubReady) {
-                    Logger.Log("::Showing mopubInterstitial");
-                    mopubInterstitial.show();
+                Logger.Log("::[isMopubNull(false) = " + isMopubNull + "::] " + "::[isSoftLocked(false) = " + lock.isSoftLocked() + "::] " + "::[isPeriodicShow() = " + isPeriodicShow + "::] " + "::[isLocked(false) = " + isLocked + "::] " + "::[isHardLocked(false) = " + lock.isHardLocked() + "::] " + "::[isMopubReady(true) = " + isMopubReady + "::]" + "::[areAdsEnabled(true) = " + Data.Ads.enabled + "::]");
+                if (!isMopubNull && !isLocked && isMopubReady && Data.Ads.enabled) {
+                    if (mopubInterstitial.isReady()) {
+                        Runnable proxyStartRunnable = new Runnable() {
+                            @Override
+                            public void run() {
+                                prxy.startProxyActivity(context , mopubInterstitial);
+                            }
+                        };
+                        Helper.runOnWorkerThread(proxyStartRunnable);
+                    } else {
+                        Logger.Log("::InterstitialAd not available");
+                        Analytics.report("Ads", "InterstitialAdNotAvailable");
+                    }
                 }
             }
         }, delay);
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Proxy.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Proxy.java
index 1a6e8371..4d5c2c63 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Proxy.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Proxy.java
@@ -6,25 +6,34 @@
 import android.os.Bundle;
 
 //import com.google.android.gms.ads.InterstitialAd;
+
+import com.mojang.base.Analytics;
 import com.mojang.base.Helper;
 import com.mojang.base.Logger;
 import com.mojang.base.events.AppEvent;
 import com.mopub.mobileads.CustomEventInterstitial;
-
+import com.mopub.mobileads.MoPubInterstitial;
 import org.greenrobot.eventbus.EventBus;
-
 import static com.mojang.base.events.AppEvent.Stop;
 
 
+
 public class Proxy extends Activity {
     private static CustomEventInterstitial customEventInterstitial;
     private final String proxy = "Proxy";
+    public static boolean isProxyBeingUsed;
+    public static Proxy instance = null;
+    public static Activity activityz2 = null;
+    public static boolean lock;
     //private static InterstitialAd mGoogleInterstitialAd;
-
-    public void startProxyActivity(Context context, CustomEventInterstitial customEventInterstitial) {
+    private MoPubInterstitial mopIntrer;
+    public void startProxyActivity(Context context, MoPubInterstitial mopubInterstitial) {
         Logger.Log(proxy, "::startProxyActivity - mopub");
+        mopIntrer =mopubInterstitial;
         Proxy.customEventInterstitial = customEventInterstitial;
+        isProxyBeingUsed = true;
         Intent proxyIntent = new Intent(context, Proxy.class);
+        proxyIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_MULTIPLE_TASK);
         context.startActivity(proxyIntent);
     }
 
@@ -35,31 +44,69 @@ public void startProxyActivity(Context context, CustomEventInterstitial customEv
 //        context.startActivity(proxyIntent);
 //    }
 
-    public void Finish() {
-        Logger.Log(proxy, "::Finish -- posting fake stop");
-        EventBus.getDefault().post(new AppEvent(Stop));
-        finish();
-    }
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         Logger.Log(proxy, "::create");
+        activityz2 = this;
+        instance = this;
+        if (!lock){
+            Runnable proxyAdsRunnable = new Runnable() {
+                @Override
+                public void run() {
+                    mopIntrer.show();
+                }
+            };
+            Helper.runOnWorkerThread(proxyAdsRunnable);
 
-        if (Proxy.customEventInterstitial != null) {
-            Proxy.customEventInterstitial.showInterstitial();
         }
+
+        //if (Proxy.customEventInterstitial != null) {
+        //    Proxy.customEventInterstitial.showInterstitial();
+        //}
 //        else if (mGoogleInterstitialAd != null) {
 //            mGoogleInterstitialAd.show();
 //        }
-        Finish();
+        //Finish();
+    }
+
+
+
+    public void Finish() {
+        try {
+            Logger.Log(proxy, "::Finish -- posting fake stop");
+            EventBus.getDefault().post(new AppEvent(Stop));
+            if (activityz2!=null)
+                activityz2.finish();
+            if (instance!=null)
+                instance.finish();
+            finish();
+        }
+        catch (NullPointerException ignored) {
+            Analytics.report("Ads","Proxy_ Finish Failed");
+            Analytics.i().sendException(ignored);
+        }
     }
 
+
+
     @Override
     protected void onDestroy() {
         super.onDestroy();
-        Logger.Log(proxy, "::destroy");
-        Proxy.customEventInterstitial = null;
+        try {
+            Logger.Log(proxy, "::destroy");
+            if (activityz2!=null)
+                instance = null;
+            if (instance!=null)
+                activityz2 = null;
+        }
+
+        catch (NullPointerException ignored) {
+            Analytics.report("Ads","Proxy_ onDestroy Failed");
+            Analytics.i().sendException(ignored);
+        }
+        //Proxy.customEventInterstitial = null;
         //Proxy.mGoogleInterstitialAd = null;
     }
 
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index 99df64bf..1255de4d 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -8,6 +8,7 @@ repositories {
     google()
     mavenCentral()
     jcenter()
+	maven {   url "https://dl.bintray.com/ironsource-mobile/android-sdk"}
 //    flatDir {
 //        dirs project(':mopub-sdk').file('../libs')
 //    }
