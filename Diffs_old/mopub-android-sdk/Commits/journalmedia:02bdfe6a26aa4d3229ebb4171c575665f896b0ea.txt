diff --git a/CHANGELOG.md b/CHANGELOG.md
index 6900f89e..e9ab0043 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,7 @@
+## Version 4.7.0 (June 2, 2016)
+- Rewarded video server-side currency rewarding (Beta).
+- Enhanced Android intent handling.
+
 #### Version 4.6.1 (May 5, 2016)
 - Enhanced caching logic for HTML and MRAID interstitials. Resource-heavy interstitials will now render more quickly when MoPubInterstitial#show() is called.
 
diff --git a/README.md b/README.md
index 398e7328..29489bcc 100644
--- a/README.md
+++ b/README.md
@@ -27,7 +27,7 @@ The MoPub SDK is available via:
     }
 
     dependencies {
-        compile('com.mopub:mopub-sdk:4.6.1@aar') {
+        compile('com.mopub:mopub-sdk:4.7.0@aar') {
             transitive = true
         }
     }
@@ -62,7 +62,8 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- Enhanced caching logic for HTML and MRAID interstitials. Resource-heavy interstitials will now render more quickly when MoPubInterstitial#show() is called.
+- Rewarded video server-side currency rewarding (Beta).
+- Enhanced Android intent handling.
 
 ## Requirements
 
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index e6a26446..e59a373e 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="40"
-      android:versionName="4.6.1">
+      android:versionCode="41"
+      android:versionName="4.7.0">
     <uses-sdk android:minSdkVersion="9"
               android:targetSdkVersion="23"/>
 
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index 8a9b4dab..5ae05467 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -9,7 +9,7 @@ apply plugin: 'com.android.application'
 
 group = 'com.mopub'
 description = '''MoPub Sample App'''
-version = '4.6.1'
+version = '4.7.0'
 
 android {
     compileSdkVersion 23
@@ -17,7 +17,7 @@ android {
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 40
+        versionCode 41
         versionName version
         minSdkVersion 9
         targetSdkVersion 23
diff --git a/mopub-sample/res/layout/mrect_detail_fragment.xml b/mopub-sample/res/layout/mrect_detail_fragment.xml
deleted file mode 100644
index 15167ce5..00000000
--- a/mopub-sample/res/layout/mrect_detail_fragment.xml
+++ /dev/null
@@ -1,61 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent">
-
-    <TextView
-        android:id="@+id/description"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:paddingLeft="8dp"
-        android:paddingRight="8dp"
-        android:paddingTop="8dp"
-        android:singleLine="true"
-        android:textColor="?android:attr/textColorPrimary"
-        android:textSize="16sp"
-        android:textStyle="bold" />
-
-    <TextView
-        android:id="@+id/ad_unit_id"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:paddingLeft="8dp"
-        android:paddingRight="8dp"
-        android:singleLine="true"
-        android:textColor="?android:attr/textColorSecondary"
-        android:textSize="14sp"
-        android:textStyle="normal" />
-
-    <LinearLayout
-        android:orientation="horizontal"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content">
-
-        <EditText
-            android:id="@+id/keywords_field"
-            android:hint="@string/keywords"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:layout_weight="3"
-            android:inputType="text|textFilter|textShortMessage"
-            android:imeOptions="actionDone"
-            android:singleLine="true" />
-
-        <Button
-            android:id="@+id/load_button"
-            android:text="@string/load_ad"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:layout_weight="1" />
-    </LinearLayout>
-
-    <com.mopub.mobileads.MoPubView
-        android:id="@+id/mrect_mopubview"
-        android:layout_width="300dp"
-        android:layout_height="250dp"
-        android:layout_gravity="center_horizontal"
-        android:paddingTop="10dp">
-    </com.mopub.mobileads.MoPubView>
-</LinearLayout>
diff --git a/mopub-sample/res/values/dimens.xml b/mopub-sample/res/values/dimens.xml
index 02259949..75ede747 100644
--- a/mopub-sample/res/values/dimens.xml
+++ b/mopub-sample/res/values/dimens.xml
@@ -5,4 +5,12 @@
     <dimen name="detail_text_size">10sp</dimen>
     <dimen name="title_size">24sp</dimen>
     <dimen name="native_main_image_height">200dp</dimen>
+    <dimen name="banner_width">320dp</dimen>
+    <dimen name="banner_height">50dp</dimen>
+    <dimen name="mrect_width">300dp</dimen>
+    <dimen name="mrect_height">250dp</dimen>
+    <dimen name="leaderboard_width">728dp</dimen>
+    <dimen name="leaderboard_height">90dp</dimen>
+    <dimen name="skyscraper_width">160dp</dimen>
+    <dimen name="skyscraper_height">600dp</dimen>
 </resources>
\ No newline at end of file
diff --git a/mopub-sample/res/values/strings.xml b/mopub-sample/res/values/strings.xml
index bb9d7d0d..a1deb782 100644
--- a/mopub-sample/res/values/strings.xml
+++ b/mopub-sample/res/values/strings.xml
@@ -20,7 +20,9 @@
     <string name="add_ad_unit_button">Add an Ad Unit</string>
     <string name="ad_unit_id_banner">b195f8dd8ded45fe847ad89ed1d016da</string>
     <string name="ad_unit_id_mrect">252412d5e9364a05ab77d9396346d73d</string>
+    <string name="ad_unit_id_leaderboard">a8919cca19784497872ae69d48f678e1</string>
     <string name="ad_unit_id_interstitial">24534e1901884e398f1253216226017e</string>
+    <string name="ad_unit_id_rewarded_video">920b6145fb1546cf8b5cf2ac34638bb7</string>
     <string name="ad_unit_id_native">11a17b188668469fb0412708c3d16813</string>
     <string name="swipe_text"><![CDATA[< Swipe Left & Right >]]></string>
 </resources>
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
new file mode 100644
index 00000000..f4ee63c9
--- /dev/null
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
@@ -0,0 +1,114 @@
+package com.mopub.simpleadsdemo;
+
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.LinearLayout;
+
+import com.mopub.mobileads.MoPubErrorCode;
+import com.mopub.mobileads.MoPubView;
+
+import static com.mopub.mobileads.MoPubView.BannerAdListener;
+import static com.mopub.simpleadsdemo.Utils.hideSoftKeyboard;
+import static com.mopub.simpleadsdemo.Utils.logToast;
+
+/**
+ * A base class for creating banner style ads with various height and width dimensions.
+ * <p>
+ * A subclass simply needs to specify the height and width of the ad in pixels, and this class will
+ * inflate a layout containing a programmatically rescaled {@link MoPubView} that will be used to
+ * display the ad.
+ */
+public abstract class AbstractBannerDetailFragment extends Fragment implements BannerAdListener {
+    private MoPubView mMoPubView;
+    private MoPubSampleAdUnit mMoPubSampleAdUnit;
+
+    public abstract int getWidth();
+
+    public abstract int getHeight();
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        super.onCreateView(inflater, container, savedInstanceState);
+        final View view = inflater.inflate(R.layout.banner_detail_fragment, container, false);
+        final DetailFragmentViewHolder views = DetailFragmentViewHolder.fromView(view);
+
+        mMoPubSampleAdUnit = MoPubSampleAdUnit.fromBundle(getArguments());
+        mMoPubView = (MoPubView) view.findViewById(R.id.banner_mopubview);
+        LinearLayout.LayoutParams layoutParams =
+                (LinearLayout.LayoutParams) mMoPubView.getLayoutParams();
+        layoutParams.width = getWidth();
+        layoutParams.height = getHeight();
+        mMoPubView.setLayoutParams(layoutParams);
+
+        hideSoftKeyboard(views.mKeywordsField);
+
+        final String adUnitId = mMoPubSampleAdUnit.getAdUnitId();
+        views.mDescriptionView.setText(mMoPubSampleAdUnit.getDescription());
+        views.mAdUnitIdView.setText(adUnitId);
+        views.mLoadButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                final String keywords = views.mKeywordsField.getText().toString();
+                loadMoPubView(adUnitId, keywords);
+            }
+        });
+        mMoPubView.setBannerAdListener(this);
+        loadMoPubView(adUnitId, null);
+
+        return view;
+    }
+
+    @Override
+    public void onDestroyView() {
+        super.onDestroyView();
+
+        if (mMoPubView != null) {
+            mMoPubView.destroy();
+            mMoPubView = null;
+        }
+    }
+
+    private void loadMoPubView(final String adUnitId, final String keywords) {
+        mMoPubView.setAdUnitId(adUnitId);
+        mMoPubView.setKeywords(keywords);
+        mMoPubView.loadAd();
+    }
+
+    private String getName() {
+        if (mMoPubSampleAdUnit == null) {
+            return MoPubSampleAdUnit.AdType.BANNER.getName();
+        }
+        return mMoPubSampleAdUnit.getHeaderName();
+    }
+
+    // BannerAdListener
+    @Override
+    public void onBannerLoaded(MoPubView banner) {
+        logToast(getActivity(), getName() + " loaded.");
+    }
+
+    @Override
+    public void onBannerFailed(MoPubView banner, MoPubErrorCode errorCode) {
+        final String errorMessage = (errorCode != null) ? errorCode.toString() : "";
+        logToast(getActivity(), getName() + " failed to load: " + errorMessage);
+    }
+
+    @Override
+    public void onBannerClicked(MoPubView banner) {
+        logToast(getActivity(), getName() + " clicked.");
+    }
+
+    @Override
+    public void onBannerExpanded(MoPubView banner) {
+        logToast(getActivity(), getName() + " expanded.");
+    }
+
+    @Override
+    public void onBannerCollapsed(MoPubView banner) {
+        logToast(getActivity(), getName() + " collapsed.");
+    }
+}
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
index d6063c29..e95f9bce 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
@@ -8,6 +8,7 @@
 import com.mopub.common.logging.MoPubLog;
 
 import java.util.ArrayList;
+import java.util.HashSet;
 import java.util.List;
 
 import static com.mopub.simpleadsdemo.MoPubSQLiteHelper.COLUMN_AD_TYPE;
@@ -17,8 +18,17 @@
 import static com.mopub.simpleadsdemo.MoPubSQLiteHelper.COLUMN_USER_GENERATED;
 import static com.mopub.simpleadsdemo.MoPubSQLiteHelper.TABLE_AD_CONFIGURATIONS;
 import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.BANNER;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.CUSTOM_NATIVE;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.INTERSTITIAL;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.LEADERBOARD;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.LIST_VIEW;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.MRECT;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.RECYCLER_VIEW;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.REWARDED_VIDEO;
 
 class AdUnitDataSource {
+    private Context mContext;
     private MoPubSQLiteHelper mDatabaseHelper;
     private String[] mAllColumns = {
             COLUMN_ID,
@@ -29,23 +39,41 @@
     };
 
     AdUnitDataSource(final Context context) {
+        mContext = context.getApplicationContext();
         mDatabaseHelper = new MoPubSQLiteHelper(context);
+        populateDefaultSampleAdUnits();
+    }
+
+    MoPubSampleAdUnit createDefaultSampleAdUnit(final MoPubSampleAdUnit sampleAdUnit) {
+        return createSampleAdUnit(sampleAdUnit, false);
     }
 
     MoPubSampleAdUnit createSampleAdUnit(final MoPubSampleAdUnit sampleAdUnit) {
+        return createSampleAdUnit(sampleAdUnit, true);
+    }
+
+    private MoPubSampleAdUnit createSampleAdUnit(final MoPubSampleAdUnit sampleAdUnit,
+                                                 final boolean isUserGenerated) {
         final ContentValues values = new ContentValues();
+        final int userGenerated = isUserGenerated ? 1 : 0;
         values.put(COLUMN_AD_UNIT_ID, sampleAdUnit.getAdUnitId());
         values.put(COLUMN_DESCRIPTION, sampleAdUnit.getDescription());
-        values.put(COLUMN_USER_GENERATED, 1);
+        values.put(COLUMN_USER_GENERATED, userGenerated);
         values.put(COLUMN_AD_TYPE, sampleAdUnit.getFragmentClassName());
+
         final SQLiteDatabase database = mDatabaseHelper.getWritableDatabase();
         final long insertId = database.insert(TABLE_AD_CONFIGURATIONS, null, values);
         final Cursor cursor = database.query(TABLE_AD_CONFIGURATIONS, mAllColumns,
                 COLUMN_ID + " = " + insertId, null, null, null, null);
         cursor.moveToFirst();
+
         final MoPubSampleAdUnit newAdConfiguration = cursorToAdConfiguration(cursor);
         cursor.close();
         database.close();
+
+        if (newAdConfiguration != null) {
+            MoPubLog.d("Ad configuration added with id: " + newAdConfiguration.getId());
+        }
         return newAdConfiguration;
     }
 
@@ -58,8 +86,7 @@ void deleteSampleAdUnit(final MoPubSampleAdUnit adConfiguration) {
     }
 
     List<MoPubSampleAdUnit> getAllAdUnits() {
-        final List<MoPubSampleAdUnit> adConfigurations =
-                new ArrayList<MoPubSampleAdUnit>();
+        final List<MoPubSampleAdUnit> adConfigurations = new ArrayList<>();
         SQLiteDatabase database = mDatabaseHelper.getReadableDatabase();
         final Cursor cursor = database.query(TABLE_AD_CONFIGURATIONS,
                 mAllColumns, null, null, null, null, null);
@@ -76,6 +103,65 @@ void deleteSampleAdUnit(final MoPubSampleAdUnit adConfiguration) {
         return adConfigurations;
     }
 
+    List<MoPubSampleAdUnit> getDefaultAdUnits() {
+        final List<MoPubSampleAdUnit> adUnitList = new ArrayList<>();
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_banner), BANNER)
+                        .description("MoPub Banner Sample")
+                        .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_mrect), MRECT)
+                        .description("MoPub Mrect Sample")
+                        .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_leaderboard), LEADERBOARD)
+                        .description("MoPub Leaderboard Sample")
+                        .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_interstitial), INTERSTITIAL)
+                        .description("MoPub Interstitial Sample")
+                        .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_rewarded_video),
+                        REWARDED_VIDEO)
+                        .description("MoPub Rewarded Video Sample")
+                        .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_native), LIST_VIEW)
+                        .description("MoPub Ad Placer Sample")
+                        .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_native), RECYCLER_VIEW)
+                        .description("MoPub Recycler View Sample")
+                        .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_native), CUSTOM_NATIVE)
+                        .description("MoPub View Pager Sample")
+                        .build());
+        return adUnitList;
+    }
+
+    private void populateDefaultSampleAdUnits() {
+        final HashSet<MoPubSampleAdUnit> allAdUnits = new HashSet<>();
+        for (final MoPubSampleAdUnit adUnit : getAllAdUnits()) {
+            allAdUnits.add(adUnit);
+        }
+
+        for (final MoPubSampleAdUnit defaultAdUnit : getDefaultAdUnits()) {
+            if (!allAdUnits.contains(defaultAdUnit)) {
+                createDefaultSampleAdUnit(defaultAdUnit);
+            }
+        }
+    }
+
     private MoPubSampleAdUnit cursorToAdConfiguration(final Cursor cursor) {
         final long id = cursor.getLong(0);
         final String adUnitId = cursor.getString(1);
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannerDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannerDetailFragment.java
index a02dd1a1..f083f921 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannerDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannerDetailFragment.java
@@ -1,87 +1,14 @@
 package com.mopub.simpleadsdemo;
 
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.mopub.mobileads.MoPubErrorCode;
-import com.mopub.mobileads.MoPubView;
-
-import static com.mopub.mobileads.MoPubView.BannerAdListener;
-import static com.mopub.simpleadsdemo.Utils.hideSoftKeyboard;
-import static com.mopub.simpleadsdemo.Utils.logToast;
-
-public class BannerDetailFragment extends Fragment implements BannerAdListener {
-    private MoPubView mMoPubView;
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        super.onCreateView(inflater, container, savedInstanceState);
-        final MoPubSampleAdUnit adConfiguration =
-                MoPubSampleAdUnit.fromBundle(getArguments());
-        final View view = inflater.inflate(R.layout.banner_detail_fragment, container, false);
-        final DetailFragmentViewHolder views = DetailFragmentViewHolder.fromView(view);
-        mMoPubView = (MoPubView) view.findViewById(R.id.banner_mopubview);
-        hideSoftKeyboard(views.mKeywordsField);
-
-        final String adUnitId = adConfiguration.getAdUnitId();
-        views.mDescriptionView.setText(adConfiguration.getDescription());
-        views.mAdUnitIdView.setText(adUnitId);
-        views.mLoadButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                final String keywords = views.mKeywordsField.getText().toString();
-                loadMoPubView(adUnitId, keywords);
-            }
-        });
-        mMoPubView.setBannerAdListener(this);
-        loadMoPubView(adUnitId, null);
-
-        return view;
-    }
-
-    @Override
-    public void onDestroyView() {
-        super.onDestroyView();
-
-        if (mMoPubView != null) {
-            mMoPubView.destroy();
-            mMoPubView = null;
-        }
-    }
-
-    private void loadMoPubView(final String adUnitId, final String keywords) {
-        mMoPubView.setAdUnitId(adUnitId);
-        mMoPubView.setKeywords(keywords);
-        mMoPubView.loadAd();
-    }
-
-    // BannerAdListener
-    @Override
-    public void onBannerLoaded(MoPubView banner) {
-        logToast(getActivity(), "Banner loaded.");
-    }
-
-    @Override
-    public void onBannerFailed(MoPubView banner, MoPubErrorCode errorCode) {
-        final String errorMessage = (errorCode != null) ? errorCode.toString() : "";
-        logToast(getActivity(), "Banner failed to load: " + errorMessage);
-    }
-
-    @Override
-    public void onBannerClicked(MoPubView banner) {
-        logToast(getActivity(), "Banner clicked.");
-    }
+public class BannerDetailFragment extends AbstractBannerDetailFragment {
 
     @Override
-    public void onBannerExpanded(MoPubView banner) {
-        logToast(getActivity(), "Banner expanded.");
+    public int getWidth() {
+        return (int) getResources().getDimension(R.dimen.banner_width);
     }
 
     @Override
-    public void onBannerCollapsed(MoPubView banner) {
-        logToast(getActivity(), "Banner collapsed.");
+    public int getHeight() {
+        return (int) getResources().getDimension(R.dimen.banner_height);
     }
 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LeaderboardDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LeaderboardDetailFragment.java
new file mode 100644
index 00000000..c0c000f0
--- /dev/null
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LeaderboardDetailFragment.java
@@ -0,0 +1,14 @@
+package com.mopub.simpleadsdemo;
+
+public class LeaderboardDetailFragment extends AbstractBannerDetailFragment {
+
+    @Override
+    public int getWidth() {
+        return (int) getResources().getDimension(R.dimen.leaderboard_width);
+    }
+
+    @Override
+    public int getHeight() {
+        return (int) getResources().getDimension(R.dimen.leaderboard_height);
+    }
+}
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java
index af774f91..3f3efa4a 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java
@@ -1,21 +1,10 @@
 package com.mopub.simpleadsdemo;
 
-import android.content.ContentValues;
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
 
-import java.util.ArrayList;
-import java.util.List;
-
-import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.BANNER;
-import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.CUSTOM_NATIVE;
-import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.INTERSTITIAL;
-import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.LIST_VIEW;
-import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.RECYCLER_VIEW;
-import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.MRECT;
-
 class MoPubSQLiteHelper extends SQLiteOpenHelper {
     public static final String TABLE_AD_CONFIGURATIONS = "adConfigurations";
     public static final String COLUMN_ID = "_id";
@@ -36,65 +25,13 @@
             + COLUMN_AD_TYPE + " text not null"
             + ");";
 
-    private final Context mContext;
-
     public MoPubSQLiteHelper(final Context context) {
         super(context, DATABASE_NAME, null, DATABASE_VERSION);
-        mContext = context.getApplicationContext();
     }
 
     @Override
     public void onCreate(SQLiteDatabase sqLiteDatabase) {
-        // Built-in sample ad units.
-        final List<MoPubSampleAdUnit> adUnitList = new ArrayList<MoPubSampleAdUnit>();
-        adUnitList.add(
-                new MoPubSampleAdUnit
-                        .Builder(mContext.getString(R.string.ad_unit_id_banner), BANNER)
-                        .description("MoPub Banner Sample")
-                        .build());
-
-        adUnitList.add(
-                new MoPubSampleAdUnit
-                        .Builder(mContext.getString(R.string.ad_unit_id_mrect), MRECT)
-                        .description("MoPub Mrect Sample")
-                        .build());
-
-        adUnitList.add(
-                new MoPubSampleAdUnit
-                        .Builder(mContext.getString(R.string.ad_unit_id_interstitial), INTERSTITIAL)
-                        .description("MoPub Interstitial Sample")
-                        .build());
-
-        adUnitList.add(
-                new MoPubSampleAdUnit
-                        .Builder(mContext.getString(R.string.ad_unit_id_native), LIST_VIEW)
-                        .description("MoPub Ad Placer Sample")
-                        .build());
-        adUnitList.add(
-                new MoPubSampleAdUnit
-                        .Builder(mContext.getString(R.string.ad_unit_id_native), RECYCLER_VIEW)
-                        .description("MoPub Recycler View Sample")
-                        .build());
-        adUnitList.add(
-                new MoPubSampleAdUnit
-                        .Builder(mContext.getString(R.string.ad_unit_id_native), CUSTOM_NATIVE)
-                        .description("MoPub View Pager Sample")
-                        .build());
         sqLiteDatabase.execSQL(DATABASE_CREATE);
-        sqLiteDatabase.beginTransaction();
-
-        // Populate the MoPub built-in samples.
-        for (final MoPubSampleAdUnit adUnit : adUnitList) {
-            final ContentValues values = new ContentValues();
-            values.put(COLUMN_AD_UNIT_ID, adUnit.getAdUnitId());
-            values.put(COLUMN_DESCRIPTION, adUnit.getDescription());
-            values.put(COLUMN_USER_GENERATED, 0);
-            values.put(COLUMN_AD_TYPE, adUnit.getFragmentClassName());
-
-            sqLiteDatabase.insert(TABLE_AD_CONFIGURATIONS, null, values);
-        }
-        sqLiteDatabase.setTransactionSuccessful();
-        sqLiteDatabase.endTransaction();
     }
 
     @Override
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
index 331f63e4..f6573175 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
@@ -18,6 +18,8 @@
     enum AdType {
         BANNER("Banner", BannerDetailFragment.class),
         MRECT("Mrect", MrectDetailFragment.class),
+        LEADERBOARD("Leaderboard", LeaderboardDetailFragment.class),
+        SKYSCRAPER("Skyscraper", SkyscraperDetailFragment.class),
         INTERSTITIAL("Interstitial", InterstitialDetailFragment.class),
         REWARDED_VIDEO("Rewarded Video", RewardedVideoDetailFragment.class),
         LIST_VIEW("Native List View", NativeListViewFragment.class),
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MrectDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MrectDetailFragment.java
index 2ae93318..2f15a7fa 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MrectDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MrectDetailFragment.java
@@ -1,87 +1,14 @@
 package com.mopub.simpleadsdemo;
 
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.mopub.mobileads.MoPubErrorCode;
-import com.mopub.mobileads.MoPubView;
-
-import static com.mopub.mobileads.MoPubView.BannerAdListener;
-import static com.mopub.simpleadsdemo.Utils.hideSoftKeyboard;
-import static com.mopub.simpleadsdemo.Utils.logToast;
-
-public class MrectDetailFragment extends Fragment implements BannerAdListener {
-    private MoPubView mMoPubView;
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        super.onCreateView(inflater, container, savedInstanceState);
-
-        final MoPubSampleAdUnit adConfiguration =
-                MoPubSampleAdUnit.fromBundle(getArguments());
-        final View view = inflater.inflate(R.layout.mrect_detail_fragment, container, false);
-        final DetailFragmentViewHolder views = DetailFragmentViewHolder.fromView(view);
-        hideSoftKeyboard(views.mKeywordsField);
-        mMoPubView = (MoPubView) view.findViewById(R.id.mrect_mopubview);
-        final String adUnitId = adConfiguration.getAdUnitId();
-        views.mDescriptionView.setText(adConfiguration.getDescription());
-        views.mAdUnitIdView.setText(adUnitId);
-        views.mLoadButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                final String keywords = views.mKeywordsField.getText().toString();
-                loadMoPubView(adUnitId, keywords);
-            }
-        });
-        mMoPubView.setBannerAdListener(this);
-        loadMoPubView(adUnitId, null);
-
-        return view;
-    }
-
-    @Override
-    public void onDestroyView() {
-        super.onDestroyView();
-
-        if (mMoPubView != null) {
-            mMoPubView.destroy();
-            mMoPubView = null;
-        }
-    }
-
-    private void loadMoPubView(final String adUnitId, final String keywords) {
-        mMoPubView.setAdUnitId(adUnitId);
-        mMoPubView.setKeywords(keywords);
-        mMoPubView.loadAd();
-    }
-
-    // BannerAdListener
-    @Override
-    public void onBannerLoaded(MoPubView banner) {
-        logToast(getActivity(), "Mrect loaded.");
-    }
-
-    @Override
-    public void onBannerFailed(MoPubView banner, MoPubErrorCode errorCode) {
-        final String errorMessage = (errorCode != null) ? errorCode.toString() : "";
-        logToast(getActivity(), "Mrect failed to load: " + errorMessage);
-    }
-
-    @Override
-    public void onBannerClicked(MoPubView banner) {
-        logToast(getActivity(), "Mrect clicked.");
-    }
+public class MrectDetailFragment extends AbstractBannerDetailFragment {
 
     @Override
-    public void onBannerExpanded(MoPubView banner) {
-        logToast(getActivity(), "Mrect expanded.");
+    public int getWidth() {
+        return (int) getResources().getDimension(R.dimen.mrect_width);
     }
 
     @Override
-    public void onBannerCollapsed(MoPubView banner) {
-        logToast(getActivity(), "Mrect collapsed.");
+    public int getHeight() {
+        return (int) getResources().getDimension(R.dimen.mrect_height);
     }
 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
index 9aacc186..19e7825b 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
@@ -53,7 +53,8 @@ public void onClick(View view) {
                     return;
                 }
                 MoPub.loadRewardedVideo(mAdUnitId,
-                        new RequestParameters(views.mKeywordsField.getText().toString()));
+                        new RequestParameters(views.mKeywordsField.getText().toString(), null,
+                                "sample_app_customer_id"));
                 if (mShowButton != null) {
                     mShowButton.setEnabled(false);
                 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SkyscraperDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SkyscraperDetailFragment.java
new file mode 100644
index 00000000..0a715bbe
--- /dev/null
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SkyscraperDetailFragment.java
@@ -0,0 +1,14 @@
+package com.mopub.simpleadsdemo;
+
+public class SkyscraperDetailFragment extends AbstractBannerDetailFragment {
+
+    @Override
+    public int getWidth() {
+        return (int) getResources().getDimension(R.dimen.skyscraper_width);
+    }
+
+    @Override
+    public int getHeight() {
+        return (int) getResources().getDimension(R.dimen.skyscraper_height);
+    }
+}
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index 5b4b95a5..0fa8680a 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -37,7 +37,7 @@ task wrapper(type: Wrapper) {
 
 group = 'com.mopub'
 description = '''MoPub Android SDK'''
-version = '4.6.1'
+version = '4.7.0'
 
 android {
     compileSdkVersion 23
@@ -46,7 +46,7 @@ android {
     useLibrary 'org.apache.http.legacy'
 
     defaultConfig {
-        versionCode 40
+        versionCode 41
         versionName version
         minSdkVersion 9
         targetSdkVersion 23
diff --git a/mopub-sdk/etc/mraid.js b/mopub-sdk/etc/mraid.js
index 7ce13b28..8e5bb5b7 100644
--- a/mopub-sdk/etc/mraid.js
+++ b/mopub-sdk/etc/mraid.js
@@ -28,7 +28,6 @@
     lastSizeChangeProperties: null
   };
 
-
   bridge.fireChangeEvent = function(properties) {
     for (var p in properties) {
       if (properties.hasOwnProperty(p)) {
@@ -278,6 +277,12 @@
 
   var placementType = PLACEMENT_TYPES.UNKNOWN;
 
+  var hostSDKVersion = {
+    'major': 0,
+    'minor': 0,
+    'patch': 0
+  };
+
   //////////////////////////////////////////////////////////////////////////////////////////////////
 
   var EventListeners = function(event) {
@@ -398,7 +403,23 @@
 
     supports: function(val) {
       broadcastEvent(EVENTS.INFO, 'Set supports to ' + stringify(val));
-        supportProperties = val;
+      supportProperties = val;
+    },
+
+    hostSDKVersion: function(val) {
+      // val is expected to be formatted like 'X.Y.Z[-+]identifier'.
+      var versions = val.split('.').map(function(version) {
+        return parseInt(version, 10);
+      }).filter(function(version) {
+        return version >= 0;
+      });
+
+      if (versions.length >= 3) {
+        hostSDKVersion['major'] = parseInt(versions[0], 10);
+        hostSDKVersion['minor'] = parseInt(versions[1], 10);
+        hostSDKVersion['patch'] = parseInt(versions[2], 10);
+        broadcastEvent(EVENTS.INFO, 'Set hostSDKVersion to ' + stringify(hostSDKVersion));
+      }
     }
   };
 
@@ -714,6 +735,14 @@
     }
   };
 
+  // Determining SDK version ///////////////////////////////////////////////////////////////////////
+
+  mraid.getHostSDKVersion = function() {
+    return hostSDKVersion;
+  }
+
+  // Calendar helpers //////////////////////////////////////////////////////////////////////////////
+
   var CalendarEventParser = {
     initialize: function(parameters) {
       this.parameters = parameters;
diff --git a/mopub-sdk/src/main/java/com/mopub/common/Constants.java b/mopub-sdk/src/main/java/com/mopub/common/Constants.java
index 011f7e7e..7c5b1462 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/Constants.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/Constants.java
@@ -5,6 +5,7 @@ private Constants() {}
 
     public static final String HTTP = "http";
     public static final String HTTPS = "https";
+    public static final String INTENT_SCHEME = "intent";
 
     public static final String HOST = "ads.mopub.com";
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java b/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java
index bbd4fc80..aa66cb94 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java
@@ -28,4 +28,5 @@
     // Rewarded Video fields
     public static final String REWARDED_VIDEO_CURRENCY_NAME_KEY = "Rewarded-Video-Currency-Name";
     public static final String REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY = "Rewarded-Video-Currency-Value-String";
+    public static final String REWARDED_VIDEO_CUSTOMER_ID = "Rewarded-Video-Customer-Id";
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
index ca3a21c5..1439bdd2 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
@@ -9,7 +9,7 @@
 import com.mopub.mobileads.MoPubRewardedVideoManager.RequestParameters;
 
 public class MoPub {
-    public static final String SDK_VERSION = "4.6.1";
+    public static final String SDK_VERSION = "4.7.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java b/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java
index a98c2790..7bd4c068 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java
@@ -13,6 +13,7 @@
 import com.mopub.exceptions.IntentNotResolvableException;
 import com.mopub.exceptions.UrlParseException;
 
+import java.net.URISyntaxException;
 import java.util.List;
 
 import static com.mopub.common.Constants.HTTP;
@@ -282,7 +283,17 @@ protected void performAction(
                 @NonNull final UrlHandler urlHandler,
                 @Nullable String creativeId)
                 throws IntentNotResolvableException {
-            Intents.launchApplicationUrl(context, uri);
+            if (Constants.INTENT_SCHEME.equalsIgnoreCase(uri.getScheme())) {
+                try {
+                    final Intent intent = Intent.parseUri(uri.toString(), Intent.URI_INTENT_SCHEME);
+                    Intents.launchApplicationIntent(context, intent);
+                } catch (URISyntaxException e) {
+                    throw new IntentNotResolvableException("Intent uri had invalid syntax: "
+                            + uri.toString());
+                }
+            } else {
+                Intents.launchApplicationUrl(context, uri);
+            }
         }
     },
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java b/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
index 79706c6c..08a31133 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
@@ -12,6 +12,7 @@
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
+import com.mopub.common.Constants;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.Preconditions;
 import com.mopub.common.UrlAction;
@@ -73,28 +74,6 @@ public static boolean deviceCanHandleIntent(@NonNull final Context context,
         }
     }
 
-    public static boolean canHandleApplicationUrl(final Context context, final Uri uri) {
-        return canHandleApplicationUrl(context, uri, true);
-    }
-
-    public static boolean canHandleApplicationUrl(final Context context, final Uri uri,
-            final boolean logError) {
-        // Determine which activities can handle the intent
-        final Intent intent = new Intent(Intent.ACTION_VIEW, uri);
-
-        // If there are no relevant activities, don't follow the link
-        if (!Intents.deviceCanHandleIntent(context, intent)) {
-            if (logError) {
-                MoPubLog.w("Could not handle application specific action: " + uri + ". " +
-                        "You may be running in the emulator or another device which does not " +
-                        "have the required application.");
-            }
-            return false;
-        }
-
-        return true;
-    }
-
     /**
      * Native Browser Scheme URLs provide a means for advertisers to include links that click out to
      * an external browser, rather than the MoPub in-app browser. Properly formatted native browser
@@ -228,16 +207,6 @@ public static void showMoPubBrowserForUrl(@NonNull final Context context,
         launchIntentForUserClick(context, intent, errorMessage);
     }
 
-    public static void launchActionViewIntent(Context context, @NonNull final Uri uri,
-            @NonNull final String errorMessage) throws IntentNotResolvableException {
-        final Intent intent = new Intent(Intent.ACTION_VIEW, uri);
-        if (!(context instanceof Activity)) {
-            intent.addFlags(FLAG_ACTIVITY_NEW_TASK);
-        }
-
-        launchIntentForUserClick(context, intent, errorMessage);
-    }
-
     public static void launchIntentForUserClick(@NonNull final Context context,
             @NonNull final Intent intent, @Nullable final String errorMessage)
             throws IntentNotResolvableException {
@@ -245,7 +214,7 @@ public static void launchIntentForUserClick(@NonNull final Context context,
         Preconditions.NoThrow.checkNotNull(intent);
 
         try {
-            Intents.startActivity(context, intent);
+            startActivity(context, intent);
         } catch (IntentNotResolvableException e) {
             throw new IntentNotResolvableException(errorMessage + "\n" + e.getMessage());
         }
@@ -253,13 +222,77 @@ public static void launchIntentForUserClick(@NonNull final Context context,
 
     public static void launchApplicationUrl(@NonNull final Context context,
             @NonNull final Uri uri) throws IntentNotResolvableException {
-        if (Intents.canHandleApplicationUrl(context, uri)) {
-            final String errorMessage = "Unable to open intent for: " + uri;
-            Intents.launchActionViewIntent(context, uri, errorMessage);
+        final Intent intent = new Intent(Intent.ACTION_VIEW, uri);
+        launchApplicationIntent(context, intent);
+    }
+
+    public static void launchApplicationIntent(@NonNull final Context context,
+            @NonNull final Intent intent) throws IntentNotResolvableException {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(intent);
+
+        if (deviceCanHandleIntent(context, intent)) {
+            final String errorMessage = "Unable to open intent: " + intent;
+            if (!(context instanceof Activity)) {
+                intent.addFlags(FLAG_ACTIVITY_NEW_TASK);
+            }
+            launchIntentForUserClick(context, intent, errorMessage);
         } else {
-            throw new IntentNotResolvableException("Could not handle application specific " +
-                    "action: " + uri + "\n\tYou may be running in the emulator or another " +
-                    "device which does not have the required application.");
+            final String fallbackUrl = intent.getStringExtra("browser_fallback_url");
+            if (TextUtils.isEmpty(fallbackUrl)) {
+                if (!"market".equalsIgnoreCase(intent.getScheme())) {
+                    launchApplicationUrl(context, getPlayStoreUri(intent));
+                } else {
+                    throw new IntentNotResolvableException("Device could not handle neither " +
+                            "intent nor market url.\nIntent: " + intent.toString());
+                }
+            } else {
+                final Uri fallbackUri = Uri.parse(fallbackUrl);
+                final String fallbackScheme = fallbackUri.getScheme();
+                if (Constants.HTTP.equalsIgnoreCase(fallbackScheme)
+                        || Constants.HTTPS.equalsIgnoreCase(fallbackScheme)) {
+                    showMoPubBrowserForUrl(context, fallbackUri, null);
+                } else {
+                    launchApplicationUrl(context, fallbackUri);
+                }
+            }
         }
     }
+
+    @NonNull
+    public static Uri getPlayStoreUri(@NonNull final Intent intent) {
+        Preconditions.checkNotNull(intent);
+
+        return Uri.parse("market://details?id=" + intent.getPackage());
+    }
+
+    public static void launchActionViewIntent(@NonNull final Context context,
+            @NonNull final Uri uri,
+            @Nullable final String errorMessage) throws IntentNotResolvableException {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(uri);
+
+        final Intent intent = new Intent(Intent.ACTION_VIEW, uri);
+        if (!(context instanceof Activity)) {
+            intent.addFlags(FLAG_ACTIVITY_NEW_TASK);
+        }
+        launchIntentForUserClick(context, intent, errorMessage);
+    }
+
+    /**
+     * @deprecated as of 4.7.0. Use {@link #deviceCanHandleIntent(Context, Intent)}
+     */
+    @Deprecated
+    public static boolean canHandleApplicationUrl(final Context context, final Uri uri) {
+        return false;
+    }
+
+    /**
+     * @deprecated as of 4.7.0. Use {@link #deviceCanHandleIntent(Context, Intent)}
+     */
+    @Deprecated
+    public static boolean canHandleApplicationUrl(final Context context, final Uri uri,
+            final boolean logError) {
+        return false;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java b/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java
index e93b9086..002c36b2 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java
@@ -36,6 +36,7 @@
     // Rewarded Video fields
     REWARDED_VIDEO_CURRENCY_NAME("X-Rewarded-Video-Currency-Name"),
     REWARDED_VIDEO_CURRENCY_AMOUNT("X-Rewarded-Video-Currency-Amount"),
+    REWARDED_VIDEO_COMPLETION_URL("X-Rewarded-Video-Completion-Url"),
 
     @Deprecated CUSTOM_SELECTOR("X-Customselector");
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
index 8d96cf35..fab2d5d8 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
@@ -47,6 +47,11 @@
     private static MoPubRewardedVideoManager sInstance;
     private static final int DEFAULT_LOAD_TIMEOUT = Constants.THIRTY_SECONDS_MILLIS;
 
+    /**
+     * This must an integer because the backend only supports int types for api version.
+     */
+    public static final int API_VERSION = 1;
+
     @NonNull private final Handler mCallbackHandler;
     @NonNull private WeakReference<Activity> mMainActivity;
     @NonNull private final Context mContext;
@@ -82,16 +87,24 @@ public void onErrorResponse(final VolleyError volleyError) {
     }
 
     public static final class RequestParameters {
-        public final String mKeywords;
-        public final Location mLocation;
+        @Nullable public final String mKeywords;
+        @Nullable public final Location mLocation;
+        @Nullable public final String mCustomerId;
 
-        public RequestParameters(final String keywords) {
+        public RequestParameters(@Nullable final String keywords) {
             this(keywords, null);
         }
 
-        public RequestParameters(final String keywords, final Location location) {
+        public RequestParameters(@Nullable final String keywords,
+                @Nullable final Location location) {
+            this(keywords, location, null);
+        }
+
+        public RequestParameters(@Nullable final String keywords, @Nullable final Location location,
+                @Nullable final String customerId) {
             mKeywords = keywords;
             mLocation = location;
+            mCustomerId = customerId;
         }
     }
 
@@ -203,7 +216,8 @@ public static void setVideoListener(@Nullable MoPubRewardedVideoListener listene
      * method will not make a new request if there is already a video loading for this adUnitId.
      *
      * @param adUnitId MoPub adUnitId String
-     * @param requestParameters Optional RequestParameters object containing keywords and optional location value.
+     * @param requestParameters Optional RequestParameters object containing optional keywords,
+     *                          optional location value, and optional customer id
      * @param mediationSettings Optional instance-level MediationSettings to associate with the
      *                          above adUnitId.
      */
@@ -222,6 +236,11 @@ public static void loadVideo(@NonNull final String adUnitId,
         MoPubCollections.addAllNonNull(newInstanceMediationSettings, mediationSettings);
         sInstance.mInstanceMediationSettings.put(adUnitId, newInstanceMediationSettings);
 
+        final String customerId = requestParameters == null ? null : requestParameters.mCustomerId;
+        if (!TextUtils.isEmpty(customerId)) {
+            sInstance.mRewardedVideoData.setCustomerId(customerId);
+        }
+
         final AdUrlGenerator urlGenerator = new WebViewAdUrlGenerator(sInstance.mContext, false);
         final String adUrlString = urlGenerator.withAdUnitId(adUnitId)
                 .withKeywords(requestParameters == null ? null : requestParameters.mKeywords)
@@ -336,9 +355,13 @@ private void onAdSuccess(AdResponse adResponse, String adUnitId) {
             localExtras.put(DataKeys.AD_REPORT_KEY,
                     new AdReport(adUnitId, ClientMetadata.getInstance(mContext), adResponse));
             localExtras.put(DataKeys.BROADCAST_IDENTIFIER_KEY, mBroadcastIdentifier);
+            localExtras.put(DataKeys.REWARDED_VIDEO_CUSTOMER_ID,
+                    mRewardedVideoData.getCustomerId());
             mRewardedVideoData.updateAdUnitRewardMapping(adUnitId,
                     adResponse.getRewardedVideoCurrencyName(),
                     adResponse.getRewardedVideoCurrencyAmount());
+            mRewardedVideoData.updateAdUnitToServerCompletionUrlMapping(adUnitId,
+                    adResponse.getRewardedVideoCompletionUrl());
 
             Activity mainActivity = mMainActivity.get();
             if (mainActivity == null) {
@@ -568,19 +591,35 @@ private static void onRewardedVideoClosedAction(@NonNull final String adUnitId)
     public static <T extends CustomEventRewardedVideo>
     void onRewardedVideoCompleted(@NonNull final Class<T> customEventClass, final String thirdPartyId, @NonNull final MoPubReward moPubReward) {
         // Unlike other callbacks in this class, only call the listener once with all the MoPubIds in the matching set.
-        postToInstance(new Runnable() {
-            @Override
-            public void run() {
-                final MoPubReward chosenReward = chooseReward(
-                        sInstance.mRewardedVideoData.getLastShownMoPubReward(customEventClass),
-                        moPubReward);
-                final Set<String> moPubIds = sInstance.mRewardedVideoData.getMoPubIdsForAdNetwork(customEventClass, thirdPartyId);
-                Set<String> rewarded = new HashSet<String>(moPubIds);
-                if (sInstance.mVideoListener != null) {
-                    sInstance.mVideoListener.onRewardedVideoCompleted(rewarded, chosenReward);
+        final String currentAdUnitId = sInstance.mRewardedVideoData.getCurrentAdUnitId();
+        final String serverCompletionUrl = sInstance.mRewardedVideoData.getServerCompletionUrl(
+                currentAdUnitId);
+        if (TextUtils.isEmpty(serverCompletionUrl)) {
+            postToInstance(new Runnable() {
+                @Override
+                public void run() {
+                    final MoPubReward chosenReward = chooseReward(
+                            sInstance.mRewardedVideoData.getLastShownMoPubReward(customEventClass),
+                            moPubReward);
+                    final Set<String> moPubIds = sInstance.mRewardedVideoData.getMoPubIdsForAdNetwork(
+                            customEventClass, thirdPartyId);
+                    Set<String> rewarded = new HashSet<String>(moPubIds);
+                    if (sInstance.mVideoListener != null) {
+                        sInstance.mVideoListener.onRewardedVideoCompleted(rewarded, chosenReward);
+                    }
                 }
-            }
-        });
+            });
+        } else {
+            postToInstance(new Runnable() {
+                @Override
+                public void run() {
+                    RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(
+                            sInstance.mContext,
+                            serverCompletionUrl,
+                            sInstance.mRewardedVideoData.getCustomerId());
+                }
+            });
+        }
     }
 
     @VisibleForTesting
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java
new file mode 100644
index 00000000..50f10267
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java
@@ -0,0 +1,42 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.Request;
+import com.mopub.volley.Response;
+import com.mopub.volley.RetryPolicy;
+import com.mopub.volley.toolbox.HttpHeaderParser;
+
+/**
+ * The actual class making the video completion request. Since we actually only care about the
+ * status code of the request, that's the only thing that is delivered.
+ */
+public class RewardedVideoCompletionRequest extends Request<Integer> {
+
+    public interface RewardedVideoCompletionRequestListener extends Response.ErrorListener {
+        void onResponse(Integer response);
+    }
+
+    @NonNull final RewardedVideoCompletionRequestListener mListener;
+
+    public RewardedVideoCompletionRequest(@NonNull final String url,
+            @NonNull final RetryPolicy retryPolicy,
+            @NonNull final RewardedVideoCompletionRequestListener listener) {
+        super(Method.GET, url, listener);
+        setShouldCache(false);
+        setRetryPolicy(retryPolicy);
+        mListener = listener;
+    }
+
+    @Override
+    protected Response<Integer> parseNetworkResponse(final NetworkResponse networkResponse) {
+        return Response.success(networkResponse.statusCode,
+                HttpHeaderParser.parseCacheHeaders(networkResponse));
+    }
+
+    @Override
+    protected void deliverResponse(final Integer response) {
+        mListener.onResponse(response);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
new file mode 100644
index 00000000..5e37c66b
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
@@ -0,0 +1,156 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.net.Uri;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.MoPub;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.network.Networking;
+import com.mopub.volley.DefaultRetryPolicy;
+import com.mopub.volley.RequestQueue;
+import com.mopub.volley.VolleyError;
+
+/**
+ * Handles the server-to-server rewarded video completion handshake.
+ */
+public class RewardedVideoCompletionRequestHandler implements
+        RewardedVideoCompletionRequest.RewardedVideoCompletionRequestListener {
+
+    /**
+     * Request timeouts. Use the last value if the current retry is higher than the number of values
+     * in this list.
+     */
+    static final int[] RETRY_TIMES = {5000, 10000, 20000, 40000, 60000};
+
+    /**
+     * The actual request should take a little shorter to have the runnable run at the set time and
+     * have the previous request finish.
+     */
+    static final int REQUEST_TIMEOUT_DELAY = 1000;
+
+    static final int MAX_RETRIES = 17;
+    private static final String CUSTOMER_ID_KEY = "&customer_id=";
+    private static final String SDK_VERSION_KEY = "&nv=";
+    private static final String API_VERSION_KEY = "&v=";
+
+    @NonNull private final String mUrl;
+    @NonNull private final Handler mHandler;
+    @NonNull private final RequestQueue mRequestQueue;
+    private int mRetryCount;
+    private volatile boolean mShouldStop;
+
+    RewardedVideoCompletionRequestHandler(@NonNull final Context context,
+            @NonNull final String url, @Nullable final String customerId) {
+        this(context, url, customerId, new Handler());
+    }
+
+    RewardedVideoCompletionRequestHandler(@NonNull final Context context,
+            @NonNull final String url,
+            @Nullable final String customerId,
+            @NonNull final Handler handler) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(url);
+        mUrl = appendParameters(url, customerId);
+        mRetryCount = 0;
+        mHandler = handler;
+        mRequestQueue = Networking.getRequestQueue(context);
+    }
+
+    void makeRewardedVideoCompletionRequest() {
+        if (mShouldStop) {
+            // If we make a successful request, cancel all pending requests, and don't make more.
+            mRequestQueue.cancelAll(mUrl);
+            return;
+        }
+
+        final RewardedVideoCompletionRequest rewardedVideoCompletionRequest =
+                new RewardedVideoCompletionRequest(mUrl,
+                        new DefaultRetryPolicy(getTimeout(mRetryCount) - REQUEST_TIMEOUT_DELAY,
+                                0, 0f), this);
+        rewardedVideoCompletionRequest.setTag(mUrl);
+        mRequestQueue.add(rewardedVideoCompletionRequest);
+
+        if (mRetryCount >= MAX_RETRIES) {
+            MoPubLog.d("Exceeded number of retries for rewarded video completion request.");
+            return;
+        }
+
+        mHandler.postDelayed(new Runnable() {
+            @Override
+            public void run() {
+                makeRewardedVideoCompletionRequest();
+            }
+        }, getTimeout(mRetryCount));
+        mRetryCount++;
+    }
+
+    @Override
+    public void onResponse(final Integer response) {
+        // Only consider it a failure if we get a 5xx status code.
+        if (response != null && !(response >= 500 && response < 600)) {
+            mShouldStop = true;
+        }
+    }
+
+    @Override
+    public void onErrorResponse(final VolleyError volleyError) {
+        if (volleyError != null && volleyError.networkResponse != null &&
+                !(volleyError.networkResponse.statusCode >= 500
+                        && volleyError.networkResponse.statusCode < 600)) {
+            mShouldStop = true;
+        }
+    }
+
+    public static void makeRewardedVideoCompletionRequest(@Nullable final Context context,
+            @Nullable final String url,
+            @Nullable final String customerId) {
+        if (TextUtils.isEmpty(url) || context == null) {
+            return;
+        }
+
+        new RewardedVideoCompletionRequestHandler(context,
+                url, customerId).makeRewardedVideoCompletionRequest();
+    }
+
+    static int getTimeout(int retryCount) {
+        if (retryCount >= 0 && retryCount < RETRY_TIMES.length) {
+            return RETRY_TIMES[retryCount];
+        } else {
+            return RETRY_TIMES[RETRY_TIMES.length - 1];
+        }
+    }
+
+    private static String appendParameters(@NonNull final String url,
+            @Nullable final String customerId) {
+        Preconditions.checkNotNull(url);
+
+        return url +
+                CUSTOMER_ID_KEY + (customerId == null ? "" : Uri.encode(customerId)) +
+                SDK_VERSION_KEY + Uri.encode(MoPub.SDK_VERSION) +
+                API_VERSION_KEY + MoPubRewardedVideoManager.API_VERSION;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    boolean getShouldStop() {
+        return mShouldStop;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    int getRetryCount() {
+        return mRetryCount;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    void setRetryCount(int retryCount) {
+        mRetryCount = retryCount;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java
index 6ee1c8e6..64c5473a 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java
@@ -2,6 +2,7 @@
 
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.text.TextUtils;
 import android.util.Pair;
 
 import com.mopub.common.MoPubReward;
@@ -24,6 +25,8 @@
     @NonNull
     private final Map<String, MoPubReward> mAdUnitToRewardMap;
     @NonNull
+    private final Map<String, String> mAdUnitToServerCompletionUrlMap;
+    @NonNull
     private final Map<Class<? extends CustomEventRewardedVideo>, MoPubReward> mCustomEventToRewardMap;
     @NonNull
     private final Map<TwoPartKey, Set<String>> mCustomEventToMoPubIdMap;
@@ -31,10 +34,14 @@
     private final Set<CustomEventRewardedVideo.CustomEventRewardedVideoListener> mAdNetworkListeners;
     @Nullable
     private String mCurrentAdUnitId;
+    @Nullable
+    private String mCustomerId;
+
 
     RewardedVideoData() {
         mAdUnitToCustomEventMap = new TreeMap<String, CustomEventRewardedVideo>();
         mAdUnitToRewardMap = new TreeMap<String, MoPubReward>();
+        mAdUnitToServerCompletionUrlMap = new TreeMap<String, String>();
         mCustomEventToRewardMap = new HashMap<Class<? extends CustomEventRewardedVideo>, MoPubReward>();
         mCustomEventToMoPubIdMap = new HashMap<TwoPartKey, Set<String>>();
         mAdNetworkListeners = new HashSet<CustomEventRewardedVideo.CustomEventRewardedVideoListener>();
@@ -50,6 +57,14 @@ MoPubReward getMoPubReward(@Nullable String moPubId) {
         return mAdUnitToRewardMap.get(moPubId);
     }
 
+    @Nullable
+    String getServerCompletionUrl(@Nullable final String moPubId) {
+        if (TextUtils.isEmpty(moPubId)) {
+            return null;
+        }
+        return mAdUnitToServerCompletionUrlMap.get(moPubId);
+    }
+
     @Nullable
     MoPubReward getLastShownMoPubReward(@NonNull Class<? extends CustomEventRewardedVideo> customEventClass) {
         return mCustomEventToRewardMap.get(customEventClass);
@@ -111,6 +126,12 @@ void updateAdUnitRewardMapping(
         mAdUnitToRewardMap.put(moPubId, MoPubReward.success(currencyName, intCurrencyAmount));
     }
 
+    void updateAdUnitToServerCompletionUrlMapping(@NonNull final String moPubId,
+            @Nullable final String serverCompletionUrl) {
+        Preconditions.checkNotNull(moPubId);
+        mAdUnitToServerCompletionUrlMap.put(moPubId, serverCompletionUrl);
+    }
+
     /**
      * This method should be called right before the rewarded video is shown in order to store the
      * reward associated with the custom event class. If called earlier in the rewarded lifecycle,
@@ -171,6 +192,15 @@ String getCurrentAdUnitId() {
         return mCurrentAdUnitId;
     }
 
+    void setCustomerId(@Nullable final String customerId) {
+        mCustomerId = customerId;
+    }
+
+    @Nullable
+    String getCustomerId() {
+        return mCustomerId;
+    }
+
     private static class TwoPartKey extends Pair<Class<? extends CustomEventRewardedVideo>, String> {
         @NonNull
         final Class<? extends CustomEventRewardedVideo> customEventClass;
diff --git a/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java b/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java
index 0b82ba35..2118eaa2 100644
--- a/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java
+++ b/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java
@@ -273,8 +273,11 @@ public Listener getListener() {
                     ResponseHeader.REWARDED_VIDEO_CURRENCY_NAME);
             final String rewardedVideoCurrencyAmount = extractHeader(headers,
                     ResponseHeader.REWARDED_VIDEO_CURRENCY_AMOUNT);
+            final String rewardedVideoCompletionUrl = extractHeader(headers,
+                    ResponseHeader.REWARDED_VIDEO_COMPLETION_URL);
             builder.setRewardedVideoCurrencyName(rewardedVideoCurrencyName);
             builder.setRewardedVideoCurrencyAmount(rewardedVideoCurrencyAmount);
+            builder.setRewardedVideoCompletionUrl(rewardedVideoCompletionUrl);
         }
 
         AdResponse adResponse = builder.build();
diff --git a/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java b/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java
index cb2ba147..29b29c71 100644
--- a/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java
+++ b/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java
@@ -30,6 +30,8 @@
     private final String mRewardedVideoCurrencyName;
     @Nullable
     private final String mRewardedVideoCurrencyAmount;
+    @Nullable
+    private final String mRewardedVideoCompletionUrl;
 
     @Nullable
     private final String mRedirectUrl;
@@ -79,6 +81,7 @@ private AdResponse(@NonNull Builder builder) {
 
         mRewardedVideoCurrencyName = builder.rewardedVideoCurrencyName;
         mRewardedVideoCurrencyAmount = builder.rewardedVideoCurrencyAmount;
+        mRewardedVideoCompletionUrl = builder.rewardedVideoCompletionUrl;
 
         mRedirectUrl = builder.redirectUrl;
         mClickTrackingUrl = builder.clickTrackingUrl;
@@ -148,6 +151,11 @@ public String getRewardedVideoCurrencyAmount() {
         return mRewardedVideoCurrencyAmount;
     }
 
+    @Nullable
+    public String getRewardedVideoCompletionUrl() {
+        return mRewardedVideoCompletionUrl;
+    }
+
     @Nullable
     public String getRedirectUrl() {
         return mRedirectUrl;
@@ -245,6 +253,7 @@ public Builder toBuilder() {
 
         private String rewardedVideoCurrencyName;
         private String rewardedVideoCurrencyAmount;
+        private String rewardedVideoCompletionUrl;
 
         private String redirectUrl;
         private String clickTrackingUrl;
@@ -300,6 +309,12 @@ public Builder setRewardedVideoCurrencyAmount(
             return this;
         }
 
+        public Builder setRewardedVideoCompletionUrl(
+                @Nullable final String rewardedVideoCompletionUrl) {
+            this.rewardedVideoCompletionUrl = rewardedVideoCompletionUrl;
+            return this;
+        }
+
         public Builder setRedirectUrl(@Nullable final String redirectUrl) {
             this.redirectUrl = redirectUrl;
             return this;
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
index bebee271..79a20e5b 100644
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=4.6.1+kit
+fabric-version=4.7.0+kit
 fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
index ee2e863d..bde01702 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
@@ -104,6 +104,28 @@ public void followDeepLink_shouldBeCaseInsensitive() throws Exception {
         assertUrlActionMatching(FOLLOW_DEEP_LINK, "myapp://MyView", true);
     }
 
+    @Test
+    public void followDeepLink_withEmptyScheme_shouldNotMatch() throws Exception {
+        assertUrlActionMatching(FOLLOW_DEEP_LINK, "://myview", false);
+    }
+
+    @Test
+    public void followDeepLink_withEmptyHost_shouldMatch() throws Exception {
+        assertUrlActionMatching(FOLLOW_DEEP_LINK, "myapp://", true);
+    }
+
+    @Test
+    public void followDeepLink_withIntentScheme_withEmptyHost_shouldMatch() throws Exception {
+        assertUrlActionMatching(FOLLOW_DEEP_LINK, "intent://", true);
+        assertUrlActionMatching(FOLLOW_DEEP_LINK, "InTeNt://", true);
+    }
+
+    @Test
+    public void followDeepLink_withIntentScheme_withHost_shouldMatch() throws Exception {
+        assertUrlActionMatching(FOLLOW_DEEP_LINK, "intent://host", true);
+        assertUrlActionMatching(FOLLOW_DEEP_LINK, "InTeNt://HoSt", true);
+    }
+
     private void assertUrlActionMatching(@NonNull final UrlAction action,
             @Nullable final String url, final boolean shouldMatch) {
         assertThat(action.shouldTryHandlingUrl(Uri.parse(url))).isEqualTo(shouldMatch);
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
index 76502a3e..e51da4f5 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
@@ -13,6 +13,7 @@
 import com.mopub.network.Networking;
 
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
@@ -21,6 +22,8 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowApplication;
 
+import java.net.URISyntaxException;
+
 import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK;
 import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK;
 import static com.mopub.common.UrlAction.HANDLE_MOPUB_SCHEME;
@@ -298,6 +301,25 @@ public void urlHandler_withMatchingDeepLinkUrl_shouldCallOnClickSuccess_shouldSt
         assertThat(startedActivity.getData()).isEqualTo(Uri.parse(deepLinkUrl));
     }
 
+    @Test
+    public void urlHandler_withMatchingIntentUrl_shouldCallOnClickSuccess_shouldStartActivity() throws URISyntaxException {
+        final String appPackage = "com.google.zxing.client.android";
+        final String intentUrl = "intent://scan/#Intent;scheme=zxing;package=" + appPackage
+                + ";end";
+        makeIntentUrlResolvable(intentUrl);
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK)
+                .withResultActions(mockResultActions)
+                .withMoPubSchemeListener(mockMoPubSchemeListener)
+                .build().handleResolvedUrl(context, intentUrl, true, null);
+
+        verify(mockResultActions).urlHandlingSucceeded(intentUrl, FOLLOW_DEEP_LINK);
+        verifyNoMoreCallbacks();
+        final Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
+        assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_VIEW);
+    }
+
     @Test
     public void urlHandler_withMatchingDeeplinkPlus_shouldCallOnClickSuccess_shouldStartActivity() {
         final String primaryUrl = "twitter://timeline";
@@ -916,4 +938,9 @@ private void makeDeeplinkResolvable(String deeplink) {
         RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
                 Uri.parse(deeplink)), new ResolveInfo());
     }
+
+    private void makeIntentUrlResolvable(String intentUrl) throws URISyntaxException {
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(
+                Intent.parseUri(intentUrl, Intent.URI_INTENT_SCHEME), new ResolveInfo());
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
index 5e5e4ea1..83e2fec3 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
@@ -203,4 +203,22 @@ public void launchIntentForUserClick_shouldStartActivity() throws Exception {
 
         assertThat(startedActivity).isNotNull();
     }
+
+    @Test
+    public void getPlayStoreUri_shouldBuildUriFromIntentPackage() throws Exception {
+        final Intent intent = new Intent();
+        final String appPackage = "com.mopub.test";
+        intent.setPackage(appPackage);
+
+        assertThat(Intents.getPlayStoreUri(intent).toString()).isEqualTo("market://details?id="
+                + appPackage);
+    }
+
+    @Test
+    public void getPlayStoreUri_shouldNotBlowUpWithEmptyPackage() throws Exception {
+        final Intent intent = new Intent();
+
+        assertThat(Intents.getPlayStoreUri(intent).toString())
+                .isEqualTo("market://details?id=null");
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
index 3bdc8cf9..e23063a6 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -18,6 +18,7 @@
 
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentMatcher;
@@ -93,6 +94,20 @@ public void loadVideo_withRequestParameters_shouldGenerateUrlWithKeywords() {
         requestListener.onErrorResponse(new VolleyError("end test"));
     }
 
+    @Test
+    public void loadVideo_withCustomerIdInRequestParameters_shouldSetCustomerId() {
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", new MoPubRewardedVideoManager.RequestParameters("keywords", null, "testCustomerId"));
+
+        assertThat(MoPubRewardedVideoManager.getRewardedVideoData().getCustomerId()).isEqualTo("testCustomerId");
+
+        // Finish the request
+        requestListener.onErrorResponse(new VolleyError("end test"));
+    }
+
     @Test
     public void callbackMethods_withNullListener_shouldNotError() {
         // Clients can set RVM null.
@@ -290,6 +305,7 @@ public void playVideo_shouldSetHasVideoFalse() {
     }
     
     @Test
+    @Ignore("Flaky")
     public void playVideo_whenNotHasVideo_shouldFail() {
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$NoVideoCustomEvent")
@@ -313,6 +329,7 @@ public void playVideo_whenNotHasVideo_shouldFail() {
     }
 
     @Test
+    @Ignore("Flaky")
     public void playVideo_shouldUpdateLastShownCustomEventRewardMapping() throws Exception {
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName(
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java
new file mode 100644
index 00000000..d73f8bd8
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java
@@ -0,0 +1,185 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.net.Uri;
+import android.os.Handler;
+
+import com.mopub.common.MoPub;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.Networking;
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.VolleyError;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import static com.mopub.common.VolleyRequestMatcher.isUrl;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.argThat;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyZeroInteractions;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class RewardedVideoCompletionRequestHandlerTest {
+    @Mock
+    private MoPubRequestQueue mockRequestQueue;
+    private Context context;
+    private String url;
+
+    @Before
+    public void setup() {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        url = "testUrl";
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_shouldAddMacros_shouldMakeVideoCompletionRequest() throws Exception {
+        RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(context, url,
+                "customer id");
+
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "testUrl&customer_id=customer%20id&nv=" +
+                        Uri.encode(MoPub.SDK_VERSION) + "&v=" +
+                        MoPubRewardedVideoManager.API_VERSION)));
+    }
+
+    @Test
+    public void getTimeout_shouldReturnCorrectTimeoutBasedOnRetry() {
+        final int maxTimeout = RewardedVideoCompletionRequestHandler.RETRY_TIMES[RewardedVideoCompletionRequestHandler.RETRY_TIMES.length - 1];
+
+        assertThat(RewardedVideoCompletionRequestHandler.getTimeout(-1)).isEqualTo(maxTimeout);
+
+        assertThat(RewardedVideoCompletionRequestHandler.getTimeout(0)).isEqualTo(
+                RewardedVideoCompletionRequestHandler.RETRY_TIMES[0]);
+
+        assertThat(RewardedVideoCompletionRequestHandler.getTimeout(1)).isEqualTo(
+                RewardedVideoCompletionRequestHandler.RETRY_TIMES[1]);
+
+        assertThat(RewardedVideoCompletionRequestHandler.getTimeout(1234567)).isEqualTo(
+                maxTimeout);
+    }
+
+    @Test
+    public void retryTimes_shouldAllBeGreaterThanRequestTimeoutDelay() {
+        for (int retryTime : RewardedVideoCompletionRequestHandler.RETRY_TIMES) {
+            assertThat(
+                    retryTime - RewardedVideoCompletionRequestHandler.REQUEST_TIMEOUT_DELAY)
+                    .isGreaterThanOrEqualTo(0);
+        }
+    }
+
+    @Test
+    public void onErrorResponse_shouldSetShouldStopToTrueWhenResponseNot500To599() {
+        RewardedVideoCompletionRequestHandler subject =
+                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject.onErrorResponse(new VolleyError(new NetworkResponse(500, null, null, true)));
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onErrorResponse(new VolleyError(new NetworkResponse(501, null, null, true)));
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onErrorResponse(new VolleyError(new NetworkResponse(599, null, null, true)));
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onErrorResponse(new VolleyError(new NetworkResponse(200, null, null, true)));
+        assertThat(subject.getShouldStop()).isEqualTo(true);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onErrorResponse(new VolleyError(new NetworkResponse(499, null, null, true)));
+        assertThat(subject.getShouldStop()).isEqualTo(true);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onErrorResponse(new VolleyError(new NetworkResponse(600, null, null, true)));
+        assertThat(subject.getShouldStop()).isEqualTo(true);
+    }
+
+    @Test
+    public void onResponse_shouldSetShouldStopToTrueWhenResponseNot500To599() {
+        RewardedVideoCompletionRequestHandler subject =
+                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject.onResponse(500);
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onResponse(501);
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onResponse(599);
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onResponse(200);
+        assertThat(subject.getShouldStop()).isEqualTo(true);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onResponse(499);
+        assertThat(subject.getShouldStop()).isEqualTo(true);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onResponse(600);
+        assertThat(subject.getShouldStop()).isEqualTo(true);
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_shouldRetry() {
+        Handler mockHandler = mock(Handler.class);
+        RewardedVideoCompletionRequestHandler subject =
+                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id",
+                        mockHandler);
+
+        subject.makeRewardedVideoCompletionRequest();
+
+        assertThat(subject.getRetryCount()).isEqualTo(1);
+        verify(mockHandler).postDelayed(any(Runnable.class),
+                eq((long) RewardedVideoCompletionRequestHandler.RETRY_TIMES[0]));
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_shouldNotRetryIfShouldStopIsSetToTrue() {
+        Handler mockHandler = mock(Handler.class);
+        RewardedVideoCompletionRequestHandler subject =
+                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id",
+                        mockHandler);
+        // This should set shouldStop to true.
+        subject.onResponse(200);
+
+        subject.makeRewardedVideoCompletionRequest();
+
+        assertThat(subject.getShouldStop()).isTrue();
+        verifyZeroInteractions(mockHandler);
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_shouldNotRetryIfMaxRetriesReached() {
+        Handler mockHandler = mock(Handler.class);
+        RewardedVideoCompletionRequestHandler subject =
+                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id",
+                        mockHandler);
+        subject.setRetryCount(RewardedVideoCompletionRequestHandler.MAX_RETRIES);
+
+        subject.makeRewardedVideoCompletionRequest();
+
+        verifyZeroInteractions(mockHandler);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
index 56238936..af013817 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
@@ -28,7 +28,6 @@
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
 import com.mopub.mraid.MraidNativeCommandHandler;
-import com.mopub.network.Networking;
 import com.mopub.network.PlayServicesUrlRewriter;
 
 import org.junit.After;
@@ -712,7 +711,7 @@ public String build() {
             return "http://ads.mopub.com/m/ad" +
                     "?v=6" +
                     paramIfNotEmpty("id", adUnitId) +
-                    "&nv=" + MoPub.SDK_VERSION +
+                    "&nv=" + Uri.encode(MoPub.SDK_VERSION) +
                     "&dn=" + Build.MANUFACTURER +
                     "%2C" + Build.MODEL +
                     "%2C" + Build.PRODUCT +
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
index ed5f6839..b7f167b6 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
@@ -18,7 +18,6 @@
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
-import com.mopub.network.Networking;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -291,7 +290,7 @@ public void generateUrlString_withOnlyAdUnitSet_shouldReturnMinimumUrl() {
         assertThat(adUrl).isEqualTo(
                 "http://ads.mopub.com/m/ad?id=" +
                         AD_UNIT_ID +
-                        "&nsv=" + MoPub.SDK_VERSION + 
+                        "&nsv=" + Uri.encode(MoPub.SDK_VERSION) +
                         "&dn=unknown%2Cunknown%2Cunknown" +
                         "&bundle=testBundle" +
                         "&z=-0700" +
diff --git a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
index 47364714..4c3c70e8 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
@@ -347,6 +347,8 @@ public void parseNetworkResponse_forRewardedVideo_shouldSucceed() {
         defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.REWARDED_VIDEO);
         defaultHeaders.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_NAME.getKey(), "currencyName");
         defaultHeaders.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_AMOUNT.getKey(), "25");
+        defaultHeaders.put(ResponseHeader.REWARDED_VIDEO_COMPLETION_URL.getKey(),
+                "http://completionUrl");
         NetworkResponse testResponse = new NetworkResponse(200,
                 "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
 
@@ -355,6 +357,8 @@ public void parseNetworkResponse_forRewardedVideo_shouldSucceed() {
         assertThat(response.result.getAdType()).isEqualTo(AdType.REWARDED_VIDEO);
         assertThat(response.result.getRewardedVideoCurrencyName()).isEqualTo("currencyName");
         assertThat(response.result.getRewardedVideoCurrencyAmount()).isEqualTo("25");
+        assertThat(response.result.getRewardedVideoCompletionUrl()).isEqualTo(
+                "http://completionUrl");
     }
 
     @Test
