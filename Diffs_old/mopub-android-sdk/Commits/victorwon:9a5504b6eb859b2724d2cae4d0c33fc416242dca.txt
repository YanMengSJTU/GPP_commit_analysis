diff --git a/CHANGELOG.md b/CHANGELOG.md
index 836d430b..7dccbb74 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -4,7 +4,14 @@
   - Removed reference to TYPE_DUMMY in AdUrlGenerator because it is not available in earlier versions of Android; fixes [GitHub issue #3](https://github.com/mopub/mopub-android-sdk/issues/3)
   - Fixed NPE in AdUrlGenerator when WiFi is off and Airplane mode is on; fixes [GitHub issue #5](https://github.com/mopub/mopub-android-sdk/issues/5)
   - `MraidInterstitial`s now properly notify `InterstitialAdListener` when they are shown and dismissed
-
+  
+### Version 1.14.1 (June 21, 2013)
+  - Wait until after loaded interstitials are shown to report an impression
+  - Remove phantom impression tracking from interstitials
+  - Remove extra whitespace from Millennial banner ads
+  - Added `onInterstitialClicked()` notification to `InterstitialAdListener`
+  - Provide default implementations for `BannerAdListener` and `InterstitialAdListener`
+  
 ## Version 1.13 (May 9, 2013)
   - Moved all Android code and documentation to its own repository: [mopub-android-sdk](https://github.com/mopub/mopub-android-sdk)
   - Updated Millennial support to Millennial Media SDK version 5.0
diff --git a/extras/src/com/mopub/mobileads/MillennialBanner.java b/extras/src/com/mopub/mobileads/MillennialBanner.java
index 50b020fc..abe27fd9 100644
--- a/extras/src/com/mopub/mobileads/MillennialBanner.java
+++ b/extras/src/com/mopub/mobileads/MillennialBanner.java
@@ -84,6 +84,7 @@ protected void loadBanner(Context context, CustomEventBannerListener customEvent
 
         mMillennialAdView.setMMRequest(new MMRequest());
         mMillennialAdView.setId(MMSDK.getDefaultAdId());
+        AdViewController.setShouldHonorServerDimensions(mMillennialAdView);
         mMillennialAdView.getAd();
     }
 
@@ -128,6 +129,8 @@ public void intentStarted(MMAd ad, String intent) {
             mBannerListener.onBannerClicked();
         }
 
+
+        // todo test (un)register
         void register(Context context) {
             mContext = context;
             context.registerReceiver(this, MMBroadcastReceiver.createIntentFilter());
@@ -143,4 +146,9 @@ void unregister() {
             }
         }
     }
+
+    @Deprecated
+    MMAdView getMMAdView() {
+        return mMillennialAdView;
+    }
 }
diff --git a/extras/src/com/mopub/mobileads/MillennialInterstitial.java b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
index 7ca06abd..f8537671 100644
--- a/extras/src/com/mopub/mobileads/MillennialInterstitial.java
+++ b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
@@ -146,6 +146,7 @@ public void overlayClosed(MMAd ad) {
             mInterstitialListener.onInterstitialDismissed();
         }
 
+        // todo test (un)register
         void register(Context context) {
             mContext = context;
             context.registerReceiver(this, MMBroadcastReceiver.createIntentFilter());
diff --git a/mopub-sample/pom.xml b/mopub-sample/pom.xml
index f1835906..dea0362c 100644
--- a/mopub-sample/pom.xml
+++ b/mopub-sample/pom.xml
@@ -17,7 +17,7 @@
     <description>Sample application that demonstrates how to use the MoPub SDK.</description>
 
     <properties>
-        <robolectric.version>2.1-SNAPSHOT</robolectric.version>
+        <robolectric.version>2.1</robolectric.version>
     </properties>
 
     <dependencies>
@@ -27,7 +27,7 @@
             <groupId>com.mopub.mobileads</groupId>
             <artifactId>mopub-sdk</artifactId>
             <version>1.0.0-SNAPSHOT</version>
-            <type>apklib</type>
+            <type>jar</type>
         </dependency>
 
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialsTab.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialsTab.java
index 18af73c6..58cd07f9 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialsTab.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialsTab.java
@@ -42,13 +42,13 @@ public void onClick(View v) {
             }
         });
     }
-    
+
     @Override
     protected void onDestroy() {
         mMoPubInterstitial.destroy();
         super.onDestroy();
     }
-    
+
     /*
      * MoPubInterstitial.MoPubInterstitialListener implementation
      */
@@ -61,17 +61,22 @@ public void onInterstitialLoaded(MoPubInterstitial interstitial) {
     public void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode) {
         logToast("Interstitial failed to load with error: " + errorCode.toString());
     }
-    
+
     @Override
     public void onInterstitialShown(MoPubInterstitial interstitial) {
         logToast("Interstitial shown.");
     }
 
+    @Override
+    public void onInterstitialClicked(MoPubInterstitial interstitial) {
+        logToast("Interstitial clicked.");
+    }
+
     @Override
     public void onInterstitialDismissed(MoPubInterstitial interstitial) {
         logToast("Interstitial dismissed.");
     }
-    
+
     private void logToast(String message) {
         Log.d("MoPub Demo", message);
         Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
diff --git a/mopub-sdk/pom.xml b/mopub-sdk/pom.xml
index 0f363707..8d7cc32b 100644
--- a/mopub-sdk/pom.xml
+++ b/mopub-sdk/pom.xml
@@ -12,12 +12,12 @@
     <groupId>com.mopub.mobileads</groupId>
     <artifactId>mopub-sdk</artifactId>
     <version>1.0.0-SNAPSHOT</version>
-    <packaging>apklib</packaging>
+    <packaging>jar</packaging>
     <name>MoPub SDK</name>
     <description>The SDK for MoPub developers.</description>
 
     <properties>
-        <robolectric.version>2.1-SNAPSHOT</robolectric.version>
+        <robolectric.version>2.1</robolectric.version>
     </properties>
 
     <dependencies>
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
new file mode 100644
index 00000000..dfa3038e
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
@@ -0,0 +1,265 @@
+package com.mopub.mobileads;
+
+import android.os.AsyncTask;
+import android.util.Log;
+import org.apache.http.HttpResponse;
+import org.apache.http.HttpStatus;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.conn.ClientConnectionManager;
+import org.apache.http.impl.client.DefaultHttpClient;
+import org.apache.http.params.BasicHttpParams;
+import org.apache.http.params.HttpConnectionParams;
+import org.apache.http.params.HttpParams;
+
+import static com.mopub.mobileads.util.HttpResponses.extractHeader;
+
+class AdFetchTask extends AsyncTask<String, Void, AdLoadTask> {
+    private TaskTracker mTaskTracker;
+    private AdViewController mAdViewController;
+    private Exception mException;
+    private HttpClient mHttpClient;
+    private long mTaskId;
+    private String mUserAgent;
+
+    private AdFetcher.FetchStatus mFetchStatus = AdFetcher.FetchStatus.NOT_SET;
+    private static final int MAXIMUM_REFRESH_TIME_MILLISECONDS = 600000;
+    private static final double EXPONENTIAL_BACKOFF_FACTOR = 1.5;
+
+    AdFetchTask(TaskTracker taskTracker, AdViewController adViewController, String userAgent, int timeoutMilliseconds) {
+        mTaskTracker = taskTracker;
+
+        mAdViewController = adViewController;
+        mHttpClient = getDefaultHttpClient(timeoutMilliseconds);
+        mTaskId = mTaskTracker.getCurrentTaskId();
+        mUserAgent = userAgent;
+    }
+
+    @Override
+    protected AdLoadTask doInBackground(String... urls) {
+        AdLoadTask result = null;
+        try {
+            result = fetch(urls[0]);
+        } catch (Exception exception) {
+            mException = exception;
+        } finally {
+            shutdownHttpClient();
+        }
+        return result;
+    }
+
+    private AdLoadTask fetch(String url) throws Exception {
+        HttpGet httpget = new HttpGet(url);
+        httpget.addHeader(AdFetcher.USER_AGENT_HEADER, mUserAgent);
+
+        if (!isStateValid()) return null;
+
+        HttpResponse response = mHttpClient.execute(httpget);
+
+        if (!isResponseValid(response)) return null;
+
+        mAdViewController.configureUsingHttpResponse(response);
+
+        if (!responseContainsContent(response)) return null;
+
+        return AdLoadTask.fromHttpResponse(response, mAdViewController);
+    }
+
+    private boolean responseContainsContent(HttpResponse response) {
+        // Ensure that the ad is not warming up.
+        if ("1".equals(extractHeader(response, AdFetcher.WARMUP_HEADER))) {
+            Log.d("MoPub", "Ad Unit (" + mAdViewController.getAdUnitId() + ") is still warming up. " +
+                    "Please try again in a few minutes.");
+            mFetchStatus = AdFetcher.FetchStatus.AD_WARMING_UP;
+            return false;
+        }
+
+        // Ensure that the ad type header is valid and not "clear".
+        String adType = extractHeader(response, AdFetcher.AD_TYPE_HEADER);
+        if ("clear".equals(adType)) {
+            Log.d("MoPub", "No inventory found for adunit (" + mAdViewController.getAdUnitId() + ").");
+            mFetchStatus = AdFetcher.FetchStatus.CLEAR_AD_TYPE;
+            return false;
+        }
+
+        return true;
+    }
+
+    private boolean isResponseValid(HttpResponse response) {
+        if (response == null || response.getEntity() == null) {
+            Log.d("MoPub", "MoPub server returned null response.");
+            mFetchStatus = AdFetcher.FetchStatus.INVALID_SERVER_RESPONSE_NOBACKOFF;
+            return false;
+        }
+
+        final int statusCode = response.getStatusLine().getStatusCode();
+
+        // Client and Server HTTP errors should result in an exponential backoff
+        if (statusCode >= 400) {
+            Log.d("MoPub", "Server error: returned HTTP status code " + Integer.toString(statusCode) +
+                    ". Please try again.");
+            mFetchStatus = AdFetcher.FetchStatus.INVALID_SERVER_RESPONSE_BACKOFF;
+            return false;
+        }
+        // Other non-200 HTTP status codes should still fail
+        else if (statusCode != HttpStatus.SC_OK) {
+            Log.d("MoPub", "MoPub server returned invalid response: HTTP status code " +
+                    Integer.toString(statusCode) + ".");
+            mFetchStatus = AdFetcher.FetchStatus.INVALID_SERVER_RESPONSE_NOBACKOFF;
+            return false;
+        }
+        return true;
+    }
+
+    private boolean isStateValid() {
+        // We check to see if this AsyncTask was cancelled, as per
+        // http://developer.android.com/reference/android/os/AsyncTask.html
+        if (isCancelled()) {
+            mFetchStatus = AdFetcher.FetchStatus.FETCH_CANCELLED;
+            return false;
+        }
+
+        if (mAdViewController == null || mAdViewController.isDestroyed()) {
+            Log.d("MoPub", "Error loading ad: AdViewController has already been GCed or destroyed.");
+            return false;
+        }
+        return true;
+    }
+
+    @Override
+    protected void onPostExecute(AdLoadTask adLoadTask) {
+        if (!isMostCurrentTask()) {
+            Log.d("MoPub", "Ad response is stale.");
+            cleanup();
+            return;
+        }
+
+        // If cleanup() has already been called on the AdViewController, don't proceed.
+        if (mAdViewController == null || mAdViewController.isDestroyed()) {
+            if (adLoadTask != null) {
+                adLoadTask.cleanup();
+            }
+            mTaskTracker.markTaskCompleted(mTaskId);
+            cleanup();
+            return;
+        }
+
+        if (adLoadTask == null) {
+            if (mException != null) {
+                Log.d("MoPub", "Exception caught while loading ad: " + mException);
+            }
+
+            MoPubErrorCode errorCode;
+            switch (mFetchStatus) {
+                case NOT_SET:
+                    errorCode = MoPubErrorCode.UNSPECIFIED;
+                    break;
+                case FETCH_CANCELLED:
+                    errorCode = MoPubErrorCode.CANCELLED;
+                    break;
+                case INVALID_SERVER_RESPONSE_BACKOFF:
+                case INVALID_SERVER_RESPONSE_NOBACKOFF:
+                    errorCode = MoPubErrorCode.SERVER_ERROR;
+                    break;
+                case CLEAR_AD_TYPE:
+                case AD_WARMING_UP:
+                    errorCode = MoPubErrorCode.NO_FILL;
+                    break;
+                default:
+                    errorCode = MoPubErrorCode.UNSPECIFIED;
+                    break;
+            }
+
+            mAdViewController.adDidFail(errorCode);
+
+            /*
+             * There are numerous reasons for the ad fetch to fail, but only in the specific
+             * case of actual server failure should we exponentially back off.
+             *
+             * Note: We place the exponential backoff after AdViewController's adDidFail because we only
+             * want to increase refresh times after the first failure refresh timer is
+             * scheduled, and not before.
+             */
+            if (mFetchStatus == AdFetcher.FetchStatus.INVALID_SERVER_RESPONSE_BACKOFF) {
+                exponentialBackoff();
+                mFetchStatus = AdFetcher.FetchStatus.NOT_SET;
+            }
+        } else {
+            adLoadTask.execute();
+            adLoadTask.cleanup();
+        }
+
+        mTaskTracker.markTaskCompleted(mTaskId);
+        cleanup();
+    }
+
+    @Override
+    protected void onCancelled() {
+        if (!isMostCurrentTask()) {
+            Log.d("MoPub", "Ad response is stale.");
+            cleanup();
+            return;
+        }
+
+        Log.d("MoPub", "Ad loading was cancelled.");
+        if (mException != null) {
+            Log.d("MoPub", "Exception caught while loading ad: " + mException);
+        }
+        mTaskTracker.markTaskCompleted(mTaskId);
+        cleanup();
+    }
+
+    /* This helper function is called when a 4XX or 5XX error is received during an ad fetch.
+     * It exponentially increases the parent AdViewController's refreshTime up to a specified cap.
+     */
+    private void exponentialBackoff() {
+        if (mAdViewController == null) {
+            return;
+        }
+
+        int refreshTimeMilliseconds = mAdViewController.getRefreshTimeMilliseconds();
+
+        refreshTimeMilliseconds = (int) (refreshTimeMilliseconds * EXPONENTIAL_BACKOFF_FACTOR);
+        if (refreshTimeMilliseconds > MAXIMUM_REFRESH_TIME_MILLISECONDS) {
+            refreshTimeMilliseconds = MAXIMUM_REFRESH_TIME_MILLISECONDS;
+        }
+
+        mAdViewController.setRefreshTimeMilliseconds(refreshTimeMilliseconds);
+    }
+
+    private void cleanup() {
+        mTaskTracker = null;
+        mException = null;
+        mFetchStatus = AdFetcher.FetchStatus.NOT_SET;
+    }
+
+    private DefaultHttpClient getDefaultHttpClient(int timeoutMilliseconds) {
+        HttpParams httpParameters = new BasicHttpParams();
+
+        if (timeoutMilliseconds > 0) {
+            // Set timeouts to wait for connection establishment / receiving data.
+            HttpConnectionParams.setConnectionTimeout(httpParameters, timeoutMilliseconds);
+            HttpConnectionParams.setSoTimeout(httpParameters, timeoutMilliseconds);
+        }
+
+        // Set the buffer size to avoid OutOfMemoryError exceptions on certain HTC devices.
+        // http://stackoverflow.com/questions/5358014/android-httpclient-oom-on-4g-lte-htc-thunderbolt
+        HttpConnectionParams.setSocketBufferSize(httpParameters, 8192);
+
+        return new DefaultHttpClient(httpParameters);
+    }
+
+    private void shutdownHttpClient() {
+        if (mHttpClient != null) {
+            ClientConnectionManager manager = mHttpClient.getConnectionManager();
+            if (manager != null) {
+                manager.shutdown();
+            }
+            mHttpClient = null;
+        }
+    }
+
+    private boolean isMostCurrentTask() {
+        return mTaskTracker.isMostCurrentTask(mTaskId);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java
index 466d174e..cedffafb 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java
@@ -34,31 +34,12 @@
 
 package com.mopub.mobileads;
 
-import android.app.Activity;
-import android.net.Uri;
-import android.os.AsyncTask;
 import android.os.Build;
 import android.util.Log;
-import org.apache.http.Header;
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpResponse;
-import org.apache.http.HttpStatus;
-import org.apache.http.client.HttpClient;
-import org.apache.http.client.methods.HttpGet;
-import org.apache.http.conn.ClientConnectionManager;
-import org.apache.http.impl.client.DefaultHttpClient;
-import org.apache.http.params.BasicHttpParams;
-import org.apache.http.params.HttpConnectionParams;
-import org.apache.http.params.HttpParams;
 
-import java.io.IOException;
-import java.io.InputStream;
-import java.lang.ref.WeakReference;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
-import java.util.HashMap;
-import java.util.Map;
 import java.util.concurrent.Executor;
 
 /*
@@ -80,18 +61,25 @@
     public static final String CUSTOM_SELECTOR_HEADER = "X-Customselector";
     public static final String NATIVE_PARAMS_HEADER = "X-Nativeparams";
     public static final String FULL_AD_TYPE_HEADER = "X-Fulladtype";
-    public static final String MRAID_HTML_DATA = "Mraid-Html-Data";
+    public static final String REDIRECT_URL_HEADER = "X-Launchpage";
+    public static final String CLICKTHROUGH_URL_HEADER = "X-Clickthrough";
+    public static final String SCROLLABLE_HEADER = "X-Scrollable";
+
+    public static final String HTML_RESPONSE_BODY_KEY = "Html-Response-Body";
+    public static final String REDIRECT_URL_KEY = "Redirect-Url";
+    public static final String CLICKTHROUGH_URL_KEY = "Clickthrough-Url";
+    public static final String SCROLLABLE_KEY = "Scrollable";
+
     private int mTimeoutMilliseconds = 10000;
     // This is equivalent to Build.VERSION_CODES.ICE_CREAM_SANDWICH
     private static final int VERSION_CODE_ICE_CREAM_SANDWICH = 14;
-
     private AdViewController mAdViewController;
+
     private AdFetchTask mCurrentTask;
     private String mUserAgent;
-    private long mCurrentTaskId;
-    private long mLastCompletedTaskId;
+    private final TaskTracker mTaskTracker;
 
-    private enum FetchStatus {
+    enum FetchStatus {
         NOT_SET,
         FETCH_CANCELLED,
         INVALID_SERVER_RESPONSE_BACKOFF,
@@ -103,19 +91,18 @@
     public AdFetcher(AdViewController adview, String userAgent) {
         mAdViewController = adview;
         mUserAgent = userAgent;
-        mCurrentTaskId = -1;
-        mLastCompletedTaskId = -1;
+        mTaskTracker = new TaskTracker();
     }
 
     public void fetchAdForUrl(String url) {
-        mCurrentTaskId++;
-        Log.i("MoPub", "Fetching ad for task #" + mCurrentTaskId);
+        mTaskTracker.newTaskStarted();
+        Log.i("MoPub", "Fetching ad for task #" + getCurrentTaskId());
 
         if (mCurrentTask != null) {
             mCurrentTask.cancel(true);
         }
 
-        mCurrentTask = new AdFetchTask(this);
+        mCurrentTask = new AdFetchTask(mTaskTracker, mAdViewController, mUserAgent, mTimeoutMilliseconds);
 
         if (Build.VERSION.SDK_INT >= VERSION_CODE_ICE_CREAM_SANDWICH) {
             Class<?> cls = AdFetchTask.class;
@@ -141,18 +128,12 @@ public void fetchAdForUrl(String url) {
 
     public void cancelFetch() {
         if (mCurrentTask != null) {
-            Log.i("MoPub", "Canceling fetch ad for task #" + mCurrentTaskId);
+            Log.i("MoPub", "Canceling fetch ad for task #" + getCurrentTaskId());
             mCurrentTask.cancel(true);
         }
     }
 
-    private void markTaskCompleted(long taskId) {
-        if (taskId > mLastCompletedTaskId) {
-            mLastCompletedTaskId = taskId;
-        }
-    }
-
-    public void cleanup() {
+    void cleanup() {
         cancelFetch();
 
         mAdViewController = null;
@@ -163,492 +144,7 @@ protected void setTimeout(int milliseconds) {
         mTimeoutMilliseconds = milliseconds;
     }
 
-    protected int getTimeout() {
-        return mTimeoutMilliseconds;
-    }
-
-    private static String getHeaderValue(HttpResponse response, String headerName) {
-        Header header = response.getFirstHeader(headerName);
-        return (header == null) ? null : header.getValue();
-    }
-
-    static class AdFetchTask extends AsyncTask<String, Void, AdLoadTask> {
-        private AdFetcher mAdFetcher;
-        private AdViewController mAdViewController;
-        private Exception mException;
-        private HttpClient mHttpClient;
-        private long mTaskId;
-
-        private FetchStatus mFetchStatus = FetchStatus.NOT_SET;
-
-        private static final int MAXIMUM_REFRESH_TIME_MILLISECONDS = 600000;
-        private static final double EXPONENTIAL_BACKOFF_FACTOR = 1.5;
-
-        AdFetchTask(AdFetcher adFetcher) {
-            mAdFetcher = adFetcher;
-
-            mAdViewController = mAdFetcher.mAdViewController;
-            mHttpClient = getDefaultHttpClient();
-            mTaskId = mAdFetcher.mCurrentTaskId;
-        }
-
-        @Override
-        protected AdLoadTask doInBackground(String... urls) {
-            AdLoadTask result = null;
-            try {
-                result = fetch(urls[0]);
-            } catch (Exception exception) {
-                mException = exception;
-            } finally {
-                shutdownHttpClient();
-            }
-            return result;
-        }
-
-        private AdLoadTask fetch(String url) throws Exception {
-            HttpGet httpget = new HttpGet(url);
-            httpget.addHeader(USER_AGENT_HEADER, mAdFetcher.mUserAgent);
-
-            if (!isStateValid()) return null;
-
-            HttpResponse response = mHttpClient.execute(httpget);
-
-            if (!isResponseValid(response)) return null;
-
-            mAdViewController.configureUsingHttpResponse(response);
-
-            if (!responseContainsContent(response)) return null;
-
-            return extractAdLoadTaskFromResponse(response);
-        }
-
-        AdLoadTask extractAdLoadTaskFromResponse(HttpResponse response) throws IOException {
-            String adType = getHeaderValue(response, AD_TYPE_HEADER);
-            String adTypeCustomEventName = getAdTypeCustomEventName(response);
-
-            if ("custom".equals(adType)) {
-                return extractCustomEventAdLoadTask(response);
-            } else if ("mraid".equals(adType)) {
-                return extractCustomEventMraidAdLoadTask(response, adTypeCustomEventName);
-            } else if (adTypeCustomEventName != null) {
-                return extractCustomEventDelegateAdLoadTask(response, adTypeCustomEventName);
-            } else {
-                return extractHtmlAdLoadTask(response);
-            }
-        }
-
-        private String getAdTypeCustomEventName(HttpResponse response) {
-            String adType = getHeaderValue(response, AD_TYPE_HEADER);
-            String fullAdType = getHeaderValue(response, FULL_AD_TYPE_HEADER);
-
-            if ("mraid".equals(adType)) {
-                if (mAdViewController.getMoPubView() instanceof MoPubInterstitial.MoPubInterstitialView) {
-                    adType = "interstitial";
-                    fullAdType = "mraid";
-                }
-            }
-
-            return AdTypeTranslator.getCustomEventNameForAdType(adType, fullAdType);
-        }
-
-        private AdLoadTask extractCustomEventAdLoadTask(HttpResponse response) {
-            Log.i("MoPub", "Performing custom event.");
-
-            // If applicable, try to invoke the new custom event system (which uses custom classes)
-            String customEventName = getHeaderValue(response, CUSTOM_EVENT_NAME_HEADER);
-            if (customEventName != null) {
-                String customEventData = getHeaderValue(response, CUSTOM_EVENT_DATA_HEADER);
-                return createCustomEventAdLoadTask(customEventName, customEventData);
-            }
-
-            // Otherwise, use the (deprecated) legacy custom event system for older clients
-            Header oldCustomEventHeader = response.getFirstHeader(CUSTOM_SELECTOR_HEADER);
-            return new LegacyCustomEventAdLoadTask(mAdViewController, oldCustomEventHeader);
-        }
-
-        private AdLoadTask extractCustomEventDelegateAdLoadTask(HttpResponse response, String adTypeCustomEventName) throws IOException {
-            String eventData = getHeaderValue(response, NATIVE_PARAMS_HEADER);
-
-            return createCustomEventAdLoadTask(adTypeCustomEventName, eventData);
-        }
-
-        AdLoadTask extractCustomEventMraidAdLoadTask(HttpResponse response, String adTypeCustomEventName) throws IOException {
-            String htmlData = httpEntityToString(response.getEntity());
-            Map<String, String> eventDataMap = new HashMap<String, String>();
-            eventDataMap.put(MRAID_HTML_DATA, Uri.encode(htmlData));
-            String eventData = Utils.mapToJsonString(eventDataMap);
-
-            return createCustomEventAdLoadTask(adTypeCustomEventName, eventData);
-        }
-
-        private AdLoadTask extractHtmlAdLoadTask(HttpResponse response) throws IOException {
-            String data = httpEntityToString(response.getEntity());
-            return new HtmlAdLoadTask(mAdViewController, data);
-        }
-
-        private boolean responseContainsContent(HttpResponse response) {
-            // Ensure that the ad is not warming up.
-            if ("1".equals(getHeaderValue(response, WARMUP_HEADER))) {
-                Log.d("MoPub", "Ad Unit (" + mAdViewController.getAdUnitId() + ") is still warming up. " +
-                        "Please try again in a few minutes.");
-                mFetchStatus = FetchStatus.AD_WARMING_UP;
-                return false;
-            }
-
-            // Ensure that the ad type header is valid and not "clear".
-            String adType = getHeaderValue(response, AD_TYPE_HEADER);
-            if ("clear".equals(adType)) {
-                Log.d("MoPub", "No inventory found for adunit (" + mAdViewController.getAdUnitId() + ").");
-                mFetchStatus = FetchStatus.CLEAR_AD_TYPE;
-                return false;
-            }
-
-            return true;
-        }
-
-        private boolean isResponseValid(HttpResponse response) {
-            if (response == null || response.getEntity() == null) {
-                Log.d("MoPub", "MoPub server returned null response.");
-                mFetchStatus = FetchStatus.INVALID_SERVER_RESPONSE_NOBACKOFF;
-                return false;
-            }
-
-            final int statusCode = response.getStatusLine().getStatusCode();
-
-            // Client and Server HTTP errors should result in an exponential backoff
-            if (statusCode >= 400) {
-                Log.d("MoPub", "Server error: returned HTTP status code " + Integer.toString(statusCode) +
-                        ". Please try again.");
-                mFetchStatus = FetchStatus.INVALID_SERVER_RESPONSE_BACKOFF;
-                return false;
-            }
-            // Other non-200 HTTP status codes should still fail
-            else if (statusCode != HttpStatus.SC_OK) {
-                Log.d("MoPub", "MoPub server returned invalid response: HTTP status code " +
-                        Integer.toString(statusCode) + ".");
-                mFetchStatus = FetchStatus.INVALID_SERVER_RESPONSE_NOBACKOFF;
-                return false;
-            }
-            return true;
-        }
-
-        private boolean isStateValid() {
-            // We check to see if this AsyncTask was cancelled, as per
-            // http://developer.android.com/reference/android/os/AsyncTask.html
-            if (isCancelled()) {
-                mFetchStatus = FetchStatus.FETCH_CANCELLED;
-                return false;
-            }
-
-            if (mAdViewController == null || mAdViewController.isDestroyed()) {
-                Log.d("MoPub", "Error loading ad: AdViewController has already been GCed or destroyed.");
-                return false;
-            }
-            return true;
-        }
-
-        private AdLoadTask createCustomEventAdLoadTask(String customEventName, String customEventData) {
-            Map<String, String> paramsMap = new HashMap<String, String>();
-            paramsMap.put(CUSTOM_EVENT_NAME_HEADER, customEventName);
-
-            if (customEventData != null) {
-                paramsMap.put(CUSTOM_EVENT_DATA_HEADER, customEventData);
-            }
-
-            return new CustomEventAdLoadTask(mAdViewController, paramsMap);
-        }
-
-        @Override
-        protected void onPostExecute(AdLoadTask adLoadTask) {
-            if (!isMostCurrentTask()) {
-                Log.d("MoPub", "Ad response is stale.");
-                releaseResources();
-                return;
-            }
-
-            // If cleanup() has already been called on the AdViewController, don't proceed.
-            if (mAdViewController == null || mAdViewController.isDestroyed()) {
-                if (adLoadTask != null) {
-                    adLoadTask.cleanup();
-                }
-                mAdFetcher.markTaskCompleted(mTaskId);
-                releaseResources();
-                return;
-            }
-
-            if (adLoadTask == null) {
-                if (mException != null) {
-                    Log.d("MoPub", "Exception caught while loading ad: " + mException);
-                }
-
-                MoPubErrorCode errorCode;
-                switch (mFetchStatus) {
-                    case NOT_SET:
-                        errorCode = MoPubErrorCode.UNSPECIFIED;
-                        break;
-                    case FETCH_CANCELLED:
-                        errorCode = MoPubErrorCode.CANCELLED;
-                        break;
-                    case INVALID_SERVER_RESPONSE_BACKOFF:
-                    case INVALID_SERVER_RESPONSE_NOBACKOFF:
-                        errorCode = MoPubErrorCode.SERVER_ERROR;
-                        break;
-                    case CLEAR_AD_TYPE:
-                    case AD_WARMING_UP:
-                        errorCode = MoPubErrorCode.NO_FILL;
-                        break;
-                    default:
-                        errorCode = MoPubErrorCode.UNSPECIFIED;
-                        break;
-                }
-
-                mAdViewController.adDidFail(errorCode);
-
-                /*
-                 * There are numerous reasons for the ad fetch to fail, but only in the specific
-                 * case of actual server failure should we exponentially back off.
-                 *
-                 * Note: We place the exponential backoff after AdViewController's adDidFail because we only
-                 * want to increase refresh times after the first failure refresh timer is
-                 * scheduled, and not before.
-                 */
-                if (mFetchStatus == FetchStatus.INVALID_SERVER_RESPONSE_BACKOFF) {
-                    exponentialBackoff();
-                    mFetchStatus = FetchStatus.NOT_SET;
-                }
-            } else {
-                adLoadTask.execute();
-                adLoadTask.cleanup();
-            }
-
-            mAdFetcher.markTaskCompleted(mTaskId);
-            releaseResources();
-        }
-
-        @Override
-        protected void onCancelled() {
-            if (!isMostCurrentTask()) {
-                Log.d("MoPub", "Ad response is stale.");
-                releaseResources();
-                return;
-            }
-
-            Log.d("MoPub", "Ad loading was cancelled.");
-            if (mException != null) {
-                Log.d("MoPub", "Exception caught while loading ad: " + mException);
-            }
-            mAdFetcher.markTaskCompleted(mTaskId);
-            releaseResources();
-        }
-
-        private String httpEntityToString(HttpEntity entity)
-                throws IOException {
-
-            InputStream inputStream = entity.getContent();
-            int numberBytesRead = 0;
-            StringBuffer out = new StringBuffer();
-            byte[] bytes = new byte[4096];
-
-            while (numberBytesRead != -1) {
-                out.append(new String(bytes, 0, numberBytesRead));
-                numberBytesRead = inputStream.read(bytes);
-            }
-
-            inputStream.close();
-
-            return out.toString();
-        }
-
-        /* This helper function is called when a 4XX or 5XX error is received during an ad fetch.
-         * It exponentially increases the parent AdViewController's refreshTime up to a specified cap.
-         */
-        private void exponentialBackoff() {
-            if (mAdViewController == null) {
-                return;
-            }
-
-            int refreshTimeMilliseconds = mAdViewController.getRefreshTimeMilliseconds();
-
-            refreshTimeMilliseconds = (int) (refreshTimeMilliseconds * EXPONENTIAL_BACKOFF_FACTOR);
-            if (refreshTimeMilliseconds > MAXIMUM_REFRESH_TIME_MILLISECONDS) {
-                refreshTimeMilliseconds = MAXIMUM_REFRESH_TIME_MILLISECONDS;
-            }
-
-            mAdViewController.setRefreshTimeMilliseconds(refreshTimeMilliseconds);
-        }
-
-        private void releaseResources() {
-            mAdFetcher = null;
-            mException = null;
-            mFetchStatus = FetchStatus.NOT_SET;
-        }
-
-        private DefaultHttpClient getDefaultHttpClient() {
-            HttpParams httpParameters = new BasicHttpParams();
-            int timeoutMilliseconds = mAdFetcher.getTimeout();
-
-            if (timeoutMilliseconds > 0) {
-                // Set timeouts to wait for connection establishment / receiving data.
-                HttpConnectionParams.setConnectionTimeout(httpParameters, timeoutMilliseconds);
-                HttpConnectionParams.setSoTimeout(httpParameters, timeoutMilliseconds);
-            }
-
-            // Set the buffer size to avoid OutOfMemoryError exceptions on certain HTC devices.
-            // http://stackoverflow.com/questions/5358014/android-httpclient-oom-on-4g-lte-htc-thunderbolt
-            HttpConnectionParams.setSocketBufferSize(httpParameters, 8192);
-
-            return new DefaultHttpClient(httpParameters);
-        }
-
-        private void shutdownHttpClient() {
-            if (mHttpClient != null) {
-                ClientConnectionManager manager = mHttpClient.getConnectionManager();
-                if (manager != null) {
-                    manager.shutdown();
-                }
-                mHttpClient = null;
-            }
-        }
-
-        private boolean isMostCurrentTask() {
-            return mTaskId >= mAdFetcher.mLastCompletedTaskId;
-        }
-
-    }
-
-    private static abstract class AdLoadTask {
-
-        WeakReference<AdViewController> mWeakAdView;
-        public AdLoadTask(AdViewController adViewController) {
-            mWeakAdView = new WeakReference<AdViewController>(adViewController);
-        }
-
-        abstract void execute();
-
-        /* The AsyncTask thread pool often appears to keep references to these
-         * objects, preventing GC. This method should be used to release
-         * resources to mitigate the GC issue.
-         */
-        abstract void cleanup();
-
-    }
-    /*
-     * This is the old way of performing Custom Events, and is now deprecated. This will still be
-     * invoked on old clients when X-Adtype is "custom" and the new X-Custom-Event-Class-Name header
-     * is not specified (legacy custom events parse the X-Customselector header instead).
-     */
-    @Deprecated
-    static class LegacyCustomEventAdLoadTask extends AdLoadTask {
-
-        protected Header mHeader;
-        public LegacyCustomEventAdLoadTask(AdViewController adViewController, Header header) {
-            super(adViewController);
-            mHeader = header;
-        }
-
-        public void execute() {
-            AdViewController adViewController = mWeakAdView.get();
-            if (adViewController == null || adViewController.isDestroyed()) {
-                return;
-            }
-
-            adViewController.setNotLoading();
-            MoPubView mpv = adViewController.getMoPubView();
-
-            if (mHeader == null) {
-                Log.i("MoPub", "Couldn't call custom method because the server did not specify one.");
-                mpv.loadFailUrl(MoPubErrorCode.ADAPTER_NOT_FOUND);
-                return;
-            }
-
-            String methodName = mHeader.getValue();
-            Log.i("MoPub", "Trying to call method named " + methodName);
-
-            Class<? extends Activity> c;
-            Method method;
-            Activity userActivity = mpv.getActivity();
-            try {
-                c = userActivity.getClass();
-                method = c.getMethod(methodName, MoPubView.class);
-                method.invoke(userActivity, mpv);
-            } catch (NoSuchMethodException e) {
-                Log.d("MoPub", "Couldn't perform custom method named " + methodName +
-                        "(MoPubView view) because your activity class has no such method");
-                mpv.loadFailUrl(MoPubErrorCode.ADAPTER_NOT_FOUND);
-                return;
-            } catch (Exception e) {
-                Log.d("MoPub", "Couldn't perform custom method named " + methodName);
-                mpv.loadFailUrl(MoPubErrorCode.ADAPTER_NOT_FOUND);
-                return;
-            }
-        }
-
-        public void cleanup() {
-            mHeader = null;
-        }
-
-    }
-    /*
-     * This is the new way of performing Custom Events. This will  be invoked on new clients when
-     * X-Adtype is "custom" and the X-Custom-Event-Class-Name header is specified.
-     */
-    static class CustomEventAdLoadTask extends AdLoadTask {
-
-        protected Map<String,String> mParamsMap;
-        public CustomEventAdLoadTask(AdViewController adViewController, Map<String, String> paramsMap) {
-            super(adViewController);
-            mParamsMap = paramsMap;
-        }
-
-        public void execute() {
-            AdViewController adViewController = mWeakAdView.get();
-            if (adViewController == null || adViewController.isDestroyed()) {
-                return;
-            }
-
-            adViewController.setNotLoading();
-            MoPubView moPubView = adViewController.getMoPubView();
-
-            if (mParamsMap == null) {
-                Log.i("MoPub", "Couldn't invoke custom event because the server did not specify one.");
-                moPubView.loadFailUrl(MoPubErrorCode.ADAPTER_NOT_FOUND);
-                return;
-            }
-
-            moPubView.loadCustomEvent(mParamsMap);
-        }
-
-        public void cleanup() {
-            mParamsMap = null;
-        }
-
-    }
-
-    static class HtmlAdLoadTask extends AdLoadTask {
-
-        protected String mData;
-        private HtmlAdLoadTask(AdViewController adViewController, String data) {
-            super(adViewController);
-            mData = data;
-        }
-
-        public void execute() {
-            AdViewController adViewController = mWeakAdView.get();
-            if (adViewController == null || adViewController.isDestroyed()) {
-                return;
-            }
-
-            if (mData == null) {
-                return;
-            }
-
-            adViewController.setResponseString(mData);
-            adViewController.loadResponseString(mData);
-        }
-
-        public void cleanup() {
-            mData = null;
-        }
-
+    private long getCurrentTaskId() {
+        return mTaskTracker.getCurrentTaskId();
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
new file mode 100644
index 00000000..739a62a7
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
@@ -0,0 +1,221 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.net.Uri;
+import android.util.Log;
+import com.mopub.mobileads.util.Strings;
+import org.apache.http.Header;
+import org.apache.http.HttpEntity;
+import org.apache.http.HttpResponse;
+
+import java.io.IOException;
+import java.lang.ref.WeakReference;
+import java.lang.reflect.Method;
+import java.util.HashMap;
+import java.util.Map;
+
+import static com.mopub.mobileads.AdFetcher.*;
+import static com.mopub.mobileads.util.HttpResponses.extractBooleanHeader;
+import static com.mopub.mobileads.util.HttpResponses.extractHeader;
+
+abstract class AdLoadTask {
+    WeakReference<AdViewController> mWeakAdViewController;
+    AdLoadTask(AdViewController adViewController) {
+        mWeakAdViewController = new WeakReference<AdViewController>(adViewController);
+    }
+
+    abstract void execute();
+
+    /*
+     * The AsyncTask thread pool often appears to keep references to these
+     * objects, preventing GC. This method should be used to release
+     * resources to mitigate the GC issue.
+     */
+    abstract void cleanup();
+
+    static AdLoadTask fromHttpResponse(HttpResponse response, AdViewController adViewController) throws IOException {
+        return new TaskExtractor(response, adViewController).extract();
+    }
+
+    private static class TaskExtractor {
+        private final HttpResponse response;
+        private final AdViewController adViewController;
+        private String adType;
+        private String adTypeCustomEventName;
+        private String fullAdType;
+
+        TaskExtractor(HttpResponse response, AdViewController adViewController){
+            this.response = response;
+            this.adViewController = adViewController;
+        }
+
+        AdLoadTask extract() throws IOException {
+            adType = extractHeader(response, AD_TYPE_HEADER);
+            fullAdType = extractHeader(response, FULL_AD_TYPE_HEADER);
+
+            adTypeCustomEventName = AdTypeTranslator.getCustomEventNameForAdType(
+                    adViewController.getMoPubView(), adType, fullAdType);
+
+            if ("custom".equals(adType)) {
+                return extractCustomEventAdLoadTask();
+            } else if (eventDataIsInResponseBody(adType)) {
+                return extractCustomEventAdLoadTaskFromResponseBody();
+            } else {
+                return extractCustomEventAdLoadTaskFromNativeParams();
+            }
+        }
+
+        private AdLoadTask extractCustomEventAdLoadTask() {
+            Log.i("MoPub", "Performing custom event.");
+
+            // If applicable, try to invoke the new custom event system (which uses custom classes)
+            adTypeCustomEventName = extractHeader(response, CUSTOM_EVENT_NAME_HEADER);
+            if (adTypeCustomEventName != null) {
+                String customEventData = extractHeader(response, CUSTOM_EVENT_DATA_HEADER);
+                return createCustomEventAdLoadTask(customEventData);
+            }
+
+            // Otherwise, use the (deprecated) legacy custom event system for older clients
+            Header oldCustomEventHeader = response.getFirstHeader(CUSTOM_SELECTOR_HEADER);
+            return new AdLoadTask.LegacyCustomEventAdLoadTask(adViewController, oldCustomEventHeader);
+        }
+
+        private AdLoadTask extractCustomEventAdLoadTaskFromResponseBody() throws IOException {
+            HttpEntity entity = response.getEntity();
+            String htmlData = entity != null ? Strings.fromStream(entity.getContent()) : "";
+            String redirectUrl = extractHeader(response, REDIRECT_URL_HEADER);
+            String clickthroughUrl = extractHeader(response, CLICKTHROUGH_URL_HEADER);
+            boolean scrollingEnabled = extractBooleanHeader(response, SCROLLABLE_HEADER);
+
+            Map<String, String> eventDataMap = new HashMap<String, String>();
+            eventDataMap.put(HTML_RESPONSE_BODY_KEY, Uri.encode(htmlData));
+            eventDataMap.put(SCROLLABLE_KEY, Boolean.toString(scrollingEnabled));
+            if (redirectUrl != null) {
+                eventDataMap.put(REDIRECT_URL_KEY, redirectUrl);
+            }
+            if (clickthroughUrl != null) {
+                eventDataMap.put(CLICKTHROUGH_URL_KEY, clickthroughUrl);
+            }
+
+            String eventData = Utils.mapToJsonString(eventDataMap);
+            return createCustomEventAdLoadTask(eventData);
+        }
+
+        private AdLoadTask extractCustomEventAdLoadTaskFromNativeParams() throws IOException {
+            String eventData = extractHeader(response, AdFetcher.NATIVE_PARAMS_HEADER);
+
+            return createCustomEventAdLoadTask(eventData);
+        }
+
+        private AdLoadTask createCustomEventAdLoadTask(String customEventData) {
+            Map<String, String> paramsMap = new HashMap<String, String>();
+            paramsMap.put(CUSTOM_EVENT_NAME_HEADER, adTypeCustomEventName);
+
+            if (customEventData != null) {
+                paramsMap.put(CUSTOM_EVENT_DATA_HEADER, customEventData);
+            }
+
+            return new AdLoadTask.CustomEventAdLoadTask(adViewController, paramsMap);
+        }
+
+        private boolean eventDataIsInResponseBody(String adType) {
+            return "mraid".equals(this.adType) || "html".equals(adType);
+        }
+    }
+
+    /*
+     * This is the new way of performing Custom Events. This will  be invoked on new clients when
+     * X-Adtype is "custom" and the X-Custom-Event-Class-Name header is specified.
+     */
+    static class CustomEventAdLoadTask extends AdLoadTask {
+        private Map<String,String> mParamsMap;
+
+        public CustomEventAdLoadTask(AdViewController adViewController, Map<String, String> paramsMap) {
+            super(adViewController);
+            mParamsMap = paramsMap;
+        }
+
+        @Override
+        void execute() {
+            AdViewController adViewController = mWeakAdViewController.get();
+
+            if (adViewController == null || adViewController.isDestroyed()) {
+                return;
+            }
+
+            adViewController.setNotLoading();
+            adViewController.getMoPubView().loadCustomEvent(mParamsMap);
+        }
+
+        @Override
+        void cleanup() {
+            mParamsMap = null;
+        }
+
+        @Deprecated // for testing
+        Map<String, String> getParamsMap() {
+            return mParamsMap;
+        }
+    }
+
+    /*
+     * This is the old way of performing Custom Events, and is now deprecated. This will still be
+     * invoked on old clients when X-Adtype is "custom" and the new X-Custom-Event-Class-Name header
+     * is not specified (legacy custom events parse the X-Customselector header instead).
+     */
+    @Deprecated
+    static class LegacyCustomEventAdLoadTask extends AdLoadTask {
+        private Header mHeader;
+
+        public LegacyCustomEventAdLoadTask(AdViewController adViewController, Header header) {
+            super(adViewController);
+            mHeader = header;
+        }
+
+        @Override
+        void execute() {
+            AdViewController adViewController = mWeakAdViewController.get();
+            if (adViewController == null || adViewController.isDestroyed()) {
+                return;
+            }
+
+            adViewController.setNotLoading();
+            MoPubView mpv = adViewController.getMoPubView();
+
+            if (mHeader == null) {
+                Log.i("MoPub", "Couldn't call custom method because the server did not specify one.");
+                mpv.loadFailUrl(MoPubErrorCode.ADAPTER_NOT_FOUND);
+                return;
+            }
+
+            String methodName = mHeader.getValue();
+            Log.i("MoPub", "Trying to call method named " + methodName);
+
+            Class<? extends Activity> c;
+            Method method;
+            Activity userActivity = mpv.getActivity();
+            try {
+                c = userActivity.getClass();
+                method = c.getMethod(methodName, MoPubView.class);
+                method.invoke(userActivity, mpv);
+            } catch (NoSuchMethodException e) {
+                Log.d("MoPub", "Couldn't perform custom method named " + methodName +
+                        "(MoPubView view) because your activity class has no such method");
+                mpv.loadFailUrl(MoPubErrorCode.ADAPTER_NOT_FOUND);
+            } catch (Exception e) {
+                Log.d("MoPub", "Couldn't perform custom method named " + methodName);
+                mpv.loadFailUrl(MoPubErrorCode.ADAPTER_NOT_FOUND);
+            }
+        }
+
+        @Override
+        void cleanup() {
+            mHeader = null;
+        }
+
+        @Deprecated // for testing
+        Header getHeader() {
+            return mHeader;
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
index 9d03179f..8de658a3 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
@@ -10,6 +10,8 @@
     public static final String MILLENNIAL_INTERSTITIAL = "com.mopub.mobileads.MillennialInterstitial";
     public static final String MRAID_BANNER = "com.mopub.mobileads.MraidBanner";
     public static final String MRAID_INTERSTITIAL = "com.mopub.mobileads.MraidInterstitial";
+    public static final String HTML_BANNER = "com.mopub.mobileads.HtmlBanner";
+    public static final String HTML_INTERSTITIAL = "com.mopub.mobileads.HtmlInterstitial";
     private static Map<String, String> customEventNameForAdType = new HashMap<String, String>();
 
     static {
@@ -19,12 +21,23 @@
         customEventNameForAdType.put("millennial_full_interstitial", MILLENNIAL_INTERSTITIAL);
         customEventNameForAdType.put("mraid_banner", MRAID_BANNER);
         customEventNameForAdType.put("mraid_interstitial", MRAID_INTERSTITIAL);
+        customEventNameForAdType.put("html_banner", HTML_BANNER);
+        customEventNameForAdType.put("html_interstitial", HTML_INTERSTITIAL);
     }
 
-    static String getCustomEventNameForAdType(String adType, String fullAdType) {
-        String key = "interstitial".equals(adType)
-                ? (fullAdType + "_interstitial")
-                : (adType + "_banner");
-        return customEventNameForAdType.get(key);
+    static String getCustomEventNameForAdType(MoPubView moPubView, String adType, String fullAdType) {
+        if ("html".equals(adType) || "mraid".equals(adType)) {
+            return isInterstitial(moPubView)
+                   ? customEventNameForAdType.get(adType + "_interstitial")
+                   : customEventNameForAdType.get(adType + "_banner");
+        } else {
+            return "interstitial".equals(adType)
+                    ? customEventNameForAdType.get(fullAdType + "_interstitial")
+                    : customEventNameForAdType.get(adType + "_banner");
+        }
+    }
+
+    private static boolean isInterstitial(MoPubView moPubView) {
+        return moPubView instanceof MoPubInterstitial.MoPubInterstitialView;
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdUrlGenerator.java
index 1f4342db..315f826b 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdUrlGenerator.java
@@ -113,9 +113,7 @@ private void setSdkVersion(String sdkVersion) {
     }
 
     private void setKeywords(String keywords) {
-        if (keywords != null && keywords.length() > 0) {
-            addParam("q", keywords);
-        }
+        addParam("q", keywords);
     }
 
     private void setLocation(Location location) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
index db71d0e3..7db71646 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -39,16 +39,17 @@
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
 import android.os.Handler;
-import android.util.DisplayMetrics;
 import android.util.Log;
-import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.View;
+import android.webkit.WebView;
 import android.widget.FrameLayout;
 import com.mopub.mobileads.MoPubView.LocationAwareness;
 import com.mopub.mobileads.factories.AdFetcherFactory;
+import com.mopub.mobileads.factories.HtmlBannerWebViewFactory;
+import com.mopub.mobileads.factories.HtmlInterstitialWebViewFactory;
 import com.mopub.mobileads.factories.HttpClientFactory;
-import org.apache.http.Header;
+import com.mopub.mobileads.util.Dips;
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.impl.client.DefaultHttpClient;
@@ -56,8 +57,13 @@
 import java.math.BigDecimal;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.WeakHashMap;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
+import static com.mopub.mobileads.AdFetcher.CLICKTHROUGH_URL_HEADER;
+import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_HEADER;
+import static com.mopub.mobileads.util.HttpResponses.extractHeader;
+import static com.mopub.mobileads.util.HttpResponses.extractIntHeader;
 
 public class AdViewController {
     private static final int MINIMUM_REFRESH_TIME_MILLISECONDS = 10000;
@@ -66,12 +72,12 @@
                     FrameLayout.LayoutParams.WRAP_CONTENT,
                     FrameLayout.LayoutParams.WRAP_CONTENT,
                     Gravity.CENTER);
+    private static WeakHashMap<View,Boolean> sViewShouldHonorServerDimensions = new WeakHashMap<View, Boolean>();;
 
     private final Context mContext;
     private MoPubView mMoPubView;
     private Map<String, Object> mLocalExtras;
     private final AdUrlGenerator mUrlGenerator;
-    private final AdWebView mAdWebView;
     private boolean mAutorefreshEnabled;
     private final String mUserAgent;
     private AdFetcher mAdFetcher;
@@ -92,13 +98,24 @@
     private boolean mIsDestroyed;
     private Handler mHandler;
 
+    private boolean mIsLoading;
+    private String mFailUrl;
+    private String mUrl;
+
+    protected static void setShouldHonorServerDimensions(View view) {
+        sViewShouldHonorServerDimensions.put(view, true);
+    }
+
+    private static boolean getShouldHonorServerDimensions(View view) {
+        return sViewShouldHonorServerDimensions.get(view) != null;
+    }
+
     public AdViewController(Context context, MoPubView view) {
         mContext = context;
         mMoPubView = view;
 
         mLocalExtras = new HashMap<String, Object>();
         mUrlGenerator = new AdUrlGenerator(context);
-        mAdWebView = new AdWebView(this, context);
 
         mAutorefreshEnabled = true;
         mRefreshRunnable = new Runnable() {
@@ -110,9 +127,12 @@ public void run() {
         /* Store user agent string at beginning to prevent NPE during background
          * thread operations.
          */
-        mUserAgent = mAdWebView.getSettings().getUserAgentString();
+        mUserAgent = new WebView(context).getSettings().getUserAgentString();
         mAdFetcher = AdFetcherFactory.create(this, mUserAgent);
 
+        HtmlBannerWebViewFactory.initialize(context);
+        HtmlInterstitialWebViewFactory.initialize(context);
+
         mHandler = new Handler();
     }
 
@@ -137,7 +157,50 @@ public void loadAd() {
 
         // tested (remove me when the rest of this is tested)
         String adUrl = generateAdUrl();
-        mAdWebView.loadUrl(adUrl);
+        loadNonJavascript(adUrl);
+    }
+
+    void loadNonJavascript(String url) {
+        if (url == null) return;
+
+        Log.d("MoPub", "Loading url: " + url);
+        if (mIsLoading) {
+            Log.i("MoPub", "Already loading an ad for " + mAdUnitId + ", wait to finish.");
+            return;
+        }
+
+        mUrl = url;
+        mFailUrl = null;
+        mIsLoading = true;
+
+        fetchAd(mUrl);
+    }
+
+    public void reload() {
+        Log.d("MoPub", "Reload ad: " + mUrl);
+        loadNonJavascript(mUrl);
+    }
+
+    void loadFailUrl(MoPubErrorCode errorCode) {
+        mIsLoading = false;
+
+        Log.v("MoPub", "MoPubErrorCode: " + (errorCode == null ? "" : errorCode.toString()));
+
+        if (mFailUrl != null) {
+            Log.d("MoPub", "Loading failover url: " + mFailUrl);
+            loadNonJavascript(mFailUrl);
+        } else {
+            // No other URLs to try, so signal a failure.
+            adDidFail(MoPubErrorCode.NO_FILL);
+        }
+    }
+
+    void setFailUrl(String failUrl) {
+        this.mFailUrl = failUrl;
+    }
+
+    void setNotLoading() {
+        this.mIsLoading = false;
     }
 
     public String getKeywords() {
@@ -229,7 +292,6 @@ void cleanup() {
 
         setAutorefreshEnabled(false);
         cancelRefreshTimer();
-        mAdWebView.destroy();
 
         // WebView subclasses are not garbage-collected in a timely fashion on Froyo and below,
         // thanks to some persistent references in WebViewCore. We manually release some resources
@@ -238,38 +300,32 @@ void cleanup() {
         mAdFetcher.cleanup();
         mAdFetcher = null;
 
+        HtmlBannerWebViewFactory.cleanup();
+        HtmlInterstitialWebViewFactory.cleanup();
+
         mLocalExtras = null;
 
         mResponseString = null;
 
-        getMoPubView().removeView(mAdWebView);
         mMoPubView = null;
 
         // Flag as destroyed. LoadUrlTask checks this before proceeding in its onPostExecute().
         mIsDestroyed = true;
     }
 
-    void loadResponseString(String responseString) {
-        mAdWebView.loadDataWithBaseURL("http://" + getServerHostname() + "/", responseString, "text/html",
-                "utf-8", null);
-    }
-
     void configureUsingHttpResponse(final HttpResponse response) {
         // Print the ad network type to the console.
         String networkType = extractHeader(response, "X-Networktype");
         if (networkType != null) Log.i("MoPub", "Fetching ad network type: " + networkType);
 
         // Set the redirect URL prefix: navigating to any matching URLs will send us to the browser.
-        mRedirectUrl = extractHeader(response, "X-Launchpage");
+        mRedirectUrl = extractHeader(response, REDIRECT_URL_HEADER);
         // Set the URL that is prepended to links for click-tracking purposes.
-        mClickthroughUrl = extractHeader(response, "X-Clickthrough");
+        mClickthroughUrl = extractHeader(response, CLICKTHROUGH_URL_HEADER);
         // Set the fall-back URL to be used if the current request fails.
-        mAdWebView.setFailUrl(extractHeader(response, "X-Failurl"));
+        setFailUrl(extractHeader(response, "X-Failurl"));
         // Set the URL to be used for impression tracking.
         mImpressionUrl = extractHeader(response, "X-Imptracker");
-        // Set the webview's scrollability.
-        boolean enabled = extractBooleanHeader(response, "X-Scrollable");
-        setWebViewScrollingEnabled(enabled);
         // Set the width and height.
         mWidth = extractIntHeader(response, "X-Width");
         mHeight = extractIntHeader(response, "X-Height");
@@ -319,11 +375,12 @@ public void run () {
 
                 DefaultHttpClient httpClient = HttpClientFactory.create();
                 try {
+                    Log.d("MoPub", "Tracking click for: " + mClickthroughUrl);
                     HttpGet httpget = new HttpGet(mClickthroughUrl);
                     httpget.addHeader("User-Agent", mUserAgent);
                     httpClient.execute(httpget);
                 } catch (Exception e) {
-                    Log.i("MoPub", "Click tracking failed: " + mImpressionUrl, e);
+                    Log.d("MoPub", "Click tracking failed: " + mClickthroughUrl, e);
                 } finally {
                     httpClient.getConnectionManager().shutdown();
                 }
@@ -331,18 +388,6 @@ public void run () {
         }).start();
     }
 
-    void adAppeared() {
-        mAdWebView.loadUrl("javascript:webviewDidAppear();");
-    }
-
-    void setResponseString(String responseString) {
-        mResponseString = responseString;
-    }
-
-    void setNotLoading() {
-        mAdWebView.setNotLoading();
-    }
-
     void fetchAd(String mUrl) {
         if (mAdFetcher != null) {
             mAdFetcher.fetchAdForUrl(mUrl);
@@ -350,14 +395,10 @@ void fetchAd(String mUrl) {
     }
 
     void forceRefresh() {
-        mAdWebView.setNotLoading();
+        setNotLoading();
         loadAd();
     }
 
-    void loadFailUrl(MoPubErrorCode errorCode) {
-        mAdWebView.loadFailUrl(errorCode);
-    }
-
     String generateAdUrl() {
         return mUrlGenerator
                 .withAdUnitId(mAdUnitId)
@@ -368,7 +409,7 @@ String generateAdUrl() {
 
     void adDidFail(MoPubErrorCode errorCode) {
         Log.i("MoPub", "Ad failed to load.");
-        mAdWebView.setNotLoading();
+        setNotLoading();
         scheduleRefreshTimerIfEnabled();
         getMoPubView().adFailed(errorCode);
     }
@@ -393,22 +434,6 @@ void setLocalExtras(Map<String, Object> localExtras) {
                 : new HashMap<String,Object>();
     }
 
-    void adDidLoad() {
-        Log.i("MoPub", "Ad successfully loaded.");
-        mAdWebView.setNotLoading();
-        scheduleRefreshTimerIfEnabled();
-        setAdContentView(mAdWebView, getHtmlAdLayoutParams());
-        getMoPubView().adLoaded();
-    }
-
-    void setAdContentView(View view) {
-        setAdContentView(view, WRAP_AND_CENTER_LAYOUT_PARAMS);
-    }
-
-    void adDidClose() {
-        getMoPubView().adClosed();
-    }
-
     private void cancelRefreshTimer() {
         mHandler.removeCallbacks(mRefreshRunnable);
     }
@@ -429,37 +454,15 @@ private boolean isNetworkAvailable() {
         return networkInfo != null && networkInfo.isConnected();
     }
 
-    private int extractIntHeader(HttpResponse response, String headerName) {
-        String headerValue = extractHeader(response, headerName);
-        return (headerValue != null) ? Integer.parseInt(headerValue.trim()) : 0;
-    }
-
-    private String extractHeader(HttpResponse response, String headerName) {
-        Header header = response.getFirstHeader(headerName);
-        return header != null ? header.getValue() : null;
-    }
-
-    private boolean extractBooleanHeader(HttpResponse response, String headerName) {
-        return !"0".equals(extractHeader(response, headerName));
-    }
-
-    private void setWebViewScrollingEnabled(boolean enabled) {
-        mAdWebView.setWebViewScrollingEnabled(enabled);
-    }
-
-    private void setAdContentView(View view, FrameLayout.LayoutParams layoutParams) {
+    void setAdContentView(View view) {
         getMoPubView().removeAllViews();
-        getMoPubView().addView(view, layoutParams);
+        getMoPubView().addView(view, getAdLayoutParams(view));
     }
 
-    private FrameLayout.LayoutParams getHtmlAdLayoutParams() {
-        if (mWidth > 0 && mHeight > 0) {
-            DisplayMetrics displayMetrics = mContext.getResources().getDisplayMetrics();
-
-            int scaledWidth = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, mWidth,
-                    displayMetrics);
-            int scaledHeight = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, mHeight,
-                    displayMetrics);
+    private FrameLayout.LayoutParams getAdLayoutParams(View view) {
+        if (getShouldHonorServerDimensions(view) && mWidth > 0 && mHeight > 0) {
+            int scaledWidth = Dips.asIntPixels(mWidth, mContext);
+            int scaledHeight = Dips.asIntPixels(mHeight, mContext);
 
             return new FrameLayout.LayoutParams(scaledWidth, scaledHeight, Gravity.CENTER);
         } else {
@@ -477,7 +480,7 @@ private void setAdContentView(View view, FrameLayout.LayoutParams layoutParams)
     private Location getLastKnownLocation() {
         LocationAwareness locationAwareness = getMoPubView().getLocationAwareness();
         int locationPrecision = getMoPubView().getLocationPrecision();
-        Location result = null;
+        Location result;
 
         if (locationAwareness == LocationAwareness.LOCATION_AWARENESS_DISABLED) {
             return null;
@@ -534,13 +537,13 @@ Context getContext() {
         return mContext;
     }
 
-    AdWebView getAdWebView() {
-        return mAdWebView;
+    HtmlBannerWebView getAdWebView() {
+        return null;
     }
 
     @Deprecated
     public void customEventDidLoadAd() {
-        mAdWebView.setNotLoading();
+        setNotLoading();
         trackImpression();
         scheduleRefreshTimerIfEnabled();
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdWebView.java
deleted file mode 100644
index abca5284..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdWebView.java
+++ /dev/null
@@ -1,141 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.graphics.Color;
-import android.os.Handler;
-import android.util.Log;
-import android.view.MotionEvent;
-import android.view.View;
-import android.webkit.WebView;
-
-public class AdWebView extends WebView {
-    public static final String EXTRA_AD_CLICK_DATA = "com.mopub.intent.extra.AD_CLICK_DATA";
-    private final AdViewController mAdViewController;
-    private final Handler mHandler;
-    private boolean mIsLoading;
-    private String mFailUrl;
-    private String mUrl;
-
-    public AdWebView(AdViewController adViewController, Context context) {
-        /*
-         * Important: don't allow any WebView subclass to be instantiated using
-         * an Activity context, as it will leak on Froyo devices and earlier.
-         */
-        super(context.getApplicationContext());
-
-        mAdViewController = adViewController;
-        mHandler = new Handler();
-
-        disableScrollingAndZoom();
-        getSettings().setJavaScriptEnabled(true);
-        getSettings().setPluginsEnabled(true);
-        setBackgroundColor(Color.TRANSPARENT);
-        setWebViewClient(new AdWebViewClient(mAdViewController, this));
-
-        addMoPubUriJavascriptInterface();
-    }
-
-    /*
-     * Overrides the WebView's loadUrl() in order to expose HTTP response headers.
-     */
-    @Override
-    public void loadUrl(String url) {
-        if (url == null) return;
-
-        Log.d("MoPub", "Loading url: " + url);
-        if (url.startsWith("javascript:")) {
-            super.loadUrl(url);
-            return;
-        }
-
-        if (mIsLoading) {
-            Log.i("MoPub", "Already loading an ad for " + mAdViewController.getAdUnitId() + ", wait to finish.");
-            return;
-        }
-
-        mUrl = url;
-        mFailUrl = null;
-        mIsLoading = true;
-
-        mAdViewController.fetchAd(mUrl);
-    }
-
-    @Override
-    public void reload() {
-        Log.d("MoPub", "Reload ad: " + mUrl);
-        loadUrl(mUrl);
-    }
-
-    void loadFailUrl(MoPubErrorCode errorCode) {
-        mIsLoading = false;
-
-        Log.v("MoPub", "MoPubErrorCode: " + (errorCode == null ? "" : errorCode.toString()));
-
-        if (mFailUrl != null) {
-            Log.d("MoPub", "Loading failover url: " + mFailUrl);
-            loadUrl(mFailUrl);
-        } else {
-            // No other URLs to try, so signal a failure.
-            mAdViewController.adDidFail(MoPubErrorCode.NO_FILL);
-        }
-    }
-
-    void setWebViewScrollingEnabled(boolean enabled) {
-        if (enabled) {
-            setOnTouchListener(null);
-        } else {
-            setOnTouchListener(new View.OnTouchListener() {
-                public boolean onTouch(View v, MotionEvent event) {
-                    return (event.getAction() == MotionEvent.ACTION_MOVE);
-                }
-            });
-        }
-    }
-
-    void setFailUrl(String failUrl) {
-        this.mFailUrl = failUrl;
-    }
-
-    void setNotLoading() {
-        this.mIsLoading = false;
-    }
-
-    private void disableScrollingAndZoom() {
-        setHorizontalScrollBarEnabled(false);
-        setHorizontalScrollbarOverlay(false);
-        setVerticalScrollBarEnabled(false);
-        setVerticalScrollbarOverlay(false);
-        getSettings().setSupportZoom(false);
-    }
-
-    private void postHandlerRunnable(Runnable r) {
-        mHandler.post(r);
-    }
-
-    /* XXX (2/15/12): This is a workaround for a problem on ICS devices where
-     * WebViews with layout height WRAP_CONTENT can mysteriously render with
-     * zero height. This seems to happen when calling loadData() with HTML that
-     * sets window.location during its "onload" event. We use loadData() when
-     * displaying interstitials, and our creatives use window.location to
-     * communicate ad loading status to AdViews. This results in zero-height
-     * interstitials. We counteract this by using a Javascript interface object
-     * to signal loading status, rather than modifying window.location.
-     */
-    private void addMoPubUriJavascriptInterface() {
-        final class MoPubUriJavascriptInterface {
-            // This method appears to be unused, since it will only be called from JavaScript.
-            @SuppressWarnings("unused")
-            public boolean fireFinishLoad() {
-                AdWebView.this.postHandlerRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        mAdViewController.adDidLoad();
-                    }
-                });
-                return true;
-            }
-        }
-
-        addJavascriptInterface(new MoPubUriJavascriptInterface(), "mopubUriInterface");
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseActivityBroadcastReceiver.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseActivityBroadcastReceiver.java
deleted file mode 100644
index 6fe09c4d..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseActivityBroadcastReceiver.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-
-import static com.mopub.mobileads.BaseActivity.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.BaseActivity.ACTION_INTERSTITIAL_SHOW;
-
-abstract class BaseActivityBroadcastReceiver extends BroadcastReceiver {
-    abstract void onHtmlInterstitialShown();
-    abstract void onHtmlInterstitialDismissed();
-    
-    @Override
-    public void onReceive(Context context, Intent intent) {
-        String action = intent.getAction();
-        
-        if (action.equals(ACTION_INTERSTITIAL_SHOW)) {
-            onHtmlInterstitialShown();
-        } else if (action.equals(ACTION_INTERSTITIAL_DISMISS)) {
-            onHtmlInterstitialDismissed();
-        }
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
new file mode 100644
index 00000000..0b776572
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
@@ -0,0 +1,56 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.graphics.Color;
+import android.util.Log;
+import android.view.MotionEvent;
+import android.view.View;
+
+public class BaseHtmlWebView extends BaseWebView {
+    public BaseHtmlWebView(Context context) {
+        super(context);
+
+        disableScrollingAndZoom();
+        getSettings().setJavaScriptEnabled(true);
+        getSettings().setPluginsEnabled(true);
+        setBackgroundColor(Color.TRANSPARENT);
+    }
+
+    public void init(boolean isScrollable) {
+        setWebViewScrollingEnabled(isScrollable);
+    }
+
+    @Override
+    public void loadUrl(String url) {
+        if (url == null) return;
+
+        Log.d("MoPub", "Loading url: " + url);
+        if (url.startsWith("javascript:")) {
+            super.loadUrl(url);
+        }
+    }
+
+    private void disableScrollingAndZoom() {
+        setHorizontalScrollBarEnabled(false);
+        setHorizontalScrollbarOverlay(false);
+        setVerticalScrollBarEnabled(false);
+        setVerticalScrollbarOverlay(false);
+        getSettings().setSupportZoom(false);
+    }
+
+    void loadHtmlResponse(String htmlResponse) {
+        loadDataWithBaseURL("http://ads.mopub.com/", htmlResponse, "text/html", "utf-8", null);
+    }
+
+    void setWebViewScrollingEnabled(boolean isScrollable) {
+        if (isScrollable) {
+            setOnTouchListener(null);
+        } else {
+            setOnTouchListener(new View.OnTouchListener() {
+                public boolean onTouch(View v, MotionEvent event) {
+                    return (event.getAction() == MotionEvent.ACTION_MOVE);
+                }
+            });
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
similarity index 89%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/BaseActivity.java
rename to mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
index f6221e1c..bbcc7e6a 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
@@ -20,14 +20,15 @@
 import static com.mopub.mobileads.resource.Drawables.INTERSTITIAL_CLOSE_BUTTON_NORMAL;
 import static com.mopub.mobileads.resource.Drawables.INTERSTITIAL_CLOSE_BUTTON_PRESSED;
 
-public abstract class BaseActivity extends Activity {
-    public static final String SOURCE_KEY = "com.mopub.mobileads.Source";
+public abstract class BaseInterstitialActivity extends Activity {
+    public static final String ACTION_INTERSTITIAL_FAIL = "com.mopub.action.interstitial.fail";
     public static final String ACTION_INTERSTITIAL_SHOW = "com.mopub.action.interstitial.show";
     public static final String ACTION_INTERSTITIAL_DISMISS = "com.mopub.action.interstitial.dismiss";
+    public static final String ACTION_INTERSTITIAL_CLICK = "com.mopub.action.interstitial.click";
     public static final IntentFilter HTML_INTERSTITIAL_INTENT_FILTER = createHtmlInterstitialIntentFilter();
     private static final float CLOSE_BUTTON_SIZE = 50f;
     private static final float CLOSE_BUTTON_PADDING = 8f;
-    
+
     private ImageView mCloseButton;
     private RelativeLayout mLayout;
     private int mButtonSize;
@@ -50,8 +51,6 @@ public void onCreate(Bundle savedInstanceState) {
         setContentView(mLayout);
 
         createInterstitialCloseButton();
-
-        broadcastInterstitialAction(ACTION_INTERSTITIAL_SHOW);
     }
 
     @Override
@@ -71,7 +70,7 @@ protected void hideInterstitialCloseButton() {
         mCloseButton.setVisibility(INVISIBLE);
     }
 
-    private void broadcastInterstitialAction(String action) {
+    protected void broadcastInterstitialAction(String action) {
         Intent intent = new Intent(action);
         LocalBroadcastManager.getInstance(this).sendBroadcast(intent);
     }
@@ -97,8 +96,10 @@ public void onClick(View v) {
 
     private static IntentFilter createHtmlInterstitialIntentFilter() {
         IntentFilter intentFilter = new IntentFilter();
+        intentFilter.addAction(ACTION_INTERSTITIAL_FAIL);
         intentFilter.addAction(ACTION_INTERSTITIAL_SHOW);
         intentFilter.addAction(ACTION_INTERSTITIAL_DISMISS);
+        intentFilter.addAction(ACTION_INTERSTITIAL_CLICK);
         return intentFilter;
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseUrlGenerator.java
index 8323d6f7..d97427d5 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseUrlGenerator.java
@@ -5,6 +5,8 @@
 import android.net.Uri;
 import android.provider.Settings;
 
+import static com.mopub.mobileads.util.Strings.isEmpty;
+
 public abstract class BaseUrlGenerator {
     private StringBuilder mStringBuilder;
     private boolean mFirstParam;
@@ -21,11 +23,14 @@ protected String getFinalUrlString() {
     }
 
     protected void addParam(String key, String value) {
+        if (value == null || isEmpty(value)) {
+            return;
+        }
+
         mStringBuilder.append(getParamDelimiter());
         mStringBuilder.append(key);
         mStringBuilder.append("=");
-        String nonNullValue = value != null ? value : "";
-        mStringBuilder.append(Uri.encode(nonNullValue));
+        mStringBuilder.append(Uri.encode(value));
     }
 
     private String getParamDelimiter() {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java
new file mode 100644
index 00000000..71c1c0b5
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java
@@ -0,0 +1,14 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.webkit.WebView;
+
+public class BaseWebView extends WebView {
+    public BaseWebView(Context context) {
+        /*
+         * Important: don't allow any WebView subclass to be instantiated using
+         * an Activity context, as it will leak on Froyo devices and earlier.
+         */
+        super(context.getApplicationContext());
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBanner.java
index e2da0cdb..0db1f408 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBanner.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBanner.java
@@ -38,7 +38,7 @@ protected abstract void loadBanner(Context context,
      */
     protected abstract void onInvalidate();
     
-    protected interface CustomEventBannerListener {
+    public interface CustomEventBannerListener {
         /*
          * Your custom event subclass must call this method when it successfully loads an ad and
          * needs to display the provided View. Failure to do so will disrupt the mediation waterfall
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
index f177391f..d4bbbc5e 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
@@ -99,7 +99,9 @@ public void onBannerLoaded(View bannerView) {
             cancelTimeout();
             mMoPubView.nativeAdLoaded();
             mMoPubView.setAdContentView(bannerView);
-            mMoPubView.trackNativeImpression();
+            if (!(bannerView instanceof HtmlBannerWebView)) {
+                mMoPubView.trackNativeImpression();
+            }
         }
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
index de4d814f..22e62819 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
@@ -45,7 +45,7 @@ protected abstract void loadInterstitial(Context context,
      */
     protected abstract void onInvalidate();
     
-    protected interface CustomEventInterstitialListener {
+    public interface CustomEventInterstitialListener {
         /*
          * Your custom event subclass must call this method when it successfully loads an ad.
          * Failure to do so will disrupt the mediation waterfall and cause future ad requests to
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
index bc4b8fba..9aeccb32 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
@@ -93,10 +93,14 @@ private void cancelTimeout() {
         mHandler.removeCallbacks(mTimeout);
     }
 
+    private boolean shouldTrackImpressions() {
+        return !(mCustomEventInterstitial instanceof HtmlInterstitial);
+    }
+
     interface CustomEventInterstitialAdapterListener {
         void onCustomEventInterstitialLoaded();
         void onCustomEventInterstitialFailed(MoPubErrorCode errorCode);
-        void onCustomEventInterstitialShown();
+        void onCustomEventInterstitialShown(boolean shouldTrackImpressions);
         void onCustomEventInterstitialClicked();
         void onCustomEventInterstitialDismissed();
     }
@@ -131,7 +135,7 @@ public void onInterstitialFailed(MoPubErrorCode errorCode) {
     public void onInterstitialShown() {
         if (isInvalidated()) return;
 
-        if (mCustomEventInterstitialAdapterListener != null) mCustomEventInterstitialAdapterListener.onCustomEventInterstitialShown();
+        if (mCustomEventInterstitialAdapterListener != null) mCustomEventInterstitialAdapterListener.onCustomEventInterstitialShown(shouldTrackImpressions());
     }
 
     @Override
@@ -152,4 +156,9 @@ public void onInterstitialDismissed() {
 
         if (mCustomEventInterstitialAdapterListener != null) mCustomEventInterstitialAdapterListener.onCustomEventInterstitialDismissed();
     }
+
+    @Deprecated
+    void setCustomEventInterstitial(CustomEventInterstitial interstitial) {
+        mCustomEventInterstitial = interstitial;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/DefaultBannerAdListener.java b/mopub-sdk/src/main/java/com/mopub/mobileads/DefaultBannerAdListener.java
new file mode 100644
index 00000000..84999f66
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/DefaultBannerAdListener.java
@@ -0,0 +1,11 @@
+package com.mopub.mobileads;
+
+import static com.mopub.mobileads.MoPubView.BannerAdListener;
+
+public class DefaultBannerAdListener implements BannerAdListener {
+    @Override public void onBannerLoaded(MoPubView banner) { }
+    @Override public void onBannerFailed(MoPubView banner, MoPubErrorCode errorCode) { }
+    @Override public void onBannerClicked(MoPubView banner) { }
+    @Override public void onBannerExpanded(MoPubView banner) { }
+    @Override public void onBannerCollapsed(MoPubView banner) { }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/DefaultInterstitialAdListener.java b/mopub-sdk/src/main/java/com/mopub/mobileads/DefaultInterstitialAdListener.java
new file mode 100644
index 00000000..73a37a12
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/DefaultInterstitialAdListener.java
@@ -0,0 +1,11 @@
+package com.mopub.mobileads;
+
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialAdListener;
+
+public class DefaultInterstitialAdListener implements InterstitialAdListener {
+    @Override public void onInterstitialLoaded(MoPubInterstitial interstitial) { }
+    @Override public void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode) { }
+    @Override public void onInterstitialShown(MoPubInterstitial interstitial) { }
+    @Override public void onInterstitialClicked(MoPubInterstitial interstitial) { }
+    @Override public void onInterstitialDismissed(MoPubInterstitial interstitial) { }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java b/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
new file mode 100644
index 00000000..b44ab3cd
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
@@ -0,0 +1,53 @@
+package com.mopub.mobileads;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.support.v4.content.LocalBroadcastManager;
+
+import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+
+class EventForwardingBroadcastReceiver extends BroadcastReceiver {
+    private final CustomEventInterstitialListener mCustomEventInterstitialListener;
+    private Context mContext;
+
+    public EventForwardingBroadcastReceiver(CustomEventInterstitialListener customEventInterstitialListener) {
+        mCustomEventInterstitialListener = customEventInterstitialListener;
+    }
+
+    @Override
+    public void onReceive(Context context, Intent intent) {
+        if (mCustomEventInterstitialListener == null) {
+            return;
+        }
+
+        String action = intent.getAction();
+        if (action.equals(ACTION_INTERSTITIAL_FAIL)) {
+            mCustomEventInterstitialListener.onInterstitialFailed(NETWORK_INVALID_STATE);
+        } else if (action.equals(ACTION_INTERSTITIAL_SHOW)) {
+            mCustomEventInterstitialListener.onInterstitialShown();
+        } else if (action.equals(ACTION_INTERSTITIAL_DISMISS)) {
+            mCustomEventInterstitialListener.onInterstitialDismissed();
+        } else if (action.equals(ACTION_INTERSTITIAL_CLICK)) {
+            mCustomEventInterstitialListener.onInterstitialClicked();
+        }
+
+    }
+
+    public void register(Context context) {
+        mContext = context;
+        LocalBroadcastManager.getInstance(mContext).registerReceiver(this, BaseInterstitialActivity.HTML_INTERSTITIAL_INTENT_FILTER);
+    }
+
+    public void unregister() {
+        if (mContext != null) {
+            LocalBroadcastManager.getInstance(mContext).unregisterReceiver(this);
+            mContext = null;
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBanner.java
new file mode 100644
index 00000000..b936844c
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBanner.java
@@ -0,0 +1,55 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.net.Uri;
+import com.mopub.mobileads.factories.HtmlBannerWebViewFactory;
+
+import java.util.Map;
+
+import static com.mopub.mobileads.AdFetcher.CLICKTHROUGH_URL_KEY;
+import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
+import static com.mopub.mobileads.AdFetcher.SCROLLABLE_KEY;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+
+public class HtmlBanner extends CustomEventBanner {
+
+    private HtmlBannerWebView mHtmlBannerWebView;
+
+    @Override
+    protected void loadBanner(
+            Context context,
+            CustomEventBannerListener customEventBannerListener,
+            Map<String, Object> localExtras,
+            Map<String, String> serverExtras) {
+
+        String htmlData;
+        String redirectUrl;
+        String clickthroughUrl;
+        Boolean isScrollable;
+        if (extrasAreValid(serverExtras)) {
+            htmlData = Uri.decode(serverExtras.get(HTML_RESPONSE_BODY_KEY));
+            redirectUrl = serverExtras.get(REDIRECT_URL_KEY);
+            clickthroughUrl = serverExtras.get(CLICKTHROUGH_URL_KEY);
+            isScrollable = Boolean.valueOf(serverExtras.get(SCROLLABLE_KEY));
+        } else {
+            customEventBannerListener.onBannerFailed(NETWORK_INVALID_STATE);
+            return;
+        }
+
+        mHtmlBannerWebView = HtmlBannerWebViewFactory.create(customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl);
+        AdViewController.setShouldHonorServerDimensions(mHtmlBannerWebView);
+        mHtmlBannerWebView.loadHtmlResponse(htmlData);
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mHtmlBannerWebView != null) {
+            mHtmlBannerWebView.destroy();
+        }
+    }
+
+    private boolean extrasAreValid(Map<String, String> serverExtras) {
+        return serverExtras.containsKey(HTML_RESPONSE_BODY_KEY);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java
new file mode 100644
index 00000000..6384ccdf
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java
@@ -0,0 +1,48 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+
+import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
+
+public class HtmlBannerWebView extends BaseHtmlWebView {
+    public static final String EXTRA_AD_CLICK_DATA = "com.mopub.intent.extra.AD_CLICK_DATA";
+
+    public HtmlBannerWebView(Context context) {
+        super(context);
+    }
+
+    public void init(CustomEventBannerListener customEventBannerListener, boolean isScrollable, String redirectUrl, String clickthroughUrl) {
+        super.init(isScrollable);
+
+        setWebViewClient(new HtmlWebViewClient(new HtmlBannerWebViewListener(customEventBannerListener), this, clickthroughUrl, redirectUrl));
+    }
+
+    static class HtmlBannerWebViewListener implements HtmlWebViewListener {
+        private final CustomEventBannerListener mCustomEventBannerListener;
+
+        public HtmlBannerWebViewListener(CustomEventBannerListener customEventBannerListener) {
+            mCustomEventBannerListener = customEventBannerListener;
+        }
+
+        @Override
+        public void onLoaded(BaseHtmlWebView htmlWebView) {
+            mCustomEventBannerListener.onBannerLoaded(htmlWebView);
+        }
+
+        @Override
+        public void onFailed(MoPubErrorCode errorCode) {
+            mCustomEventBannerListener.onBannerFailed(errorCode);
+        }
+
+        @Override
+        public void onClicked() {
+            mCustomEventBannerListener.onBannerClicked();
+        }
+
+        @Override
+        public void onCollapsed() {
+            mCustomEventBannerListener.onBannerCollapsed();
+        }
+
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
new file mode 100644
index 00000000..478c6090
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
@@ -0,0 +1,30 @@
+package com.mopub.mobileads;
+
+import android.net.Uri;
+
+import java.util.Map;
+
+import static com.mopub.mobileads.AdFetcher.CLICKTHROUGH_URL_KEY;
+import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
+import static com.mopub.mobileads.AdFetcher.SCROLLABLE_KEY;
+
+public class HtmlInterstitial extends ResponseBodyInterstitial {
+    private String mHtmlData;
+    private String mClickthroughUrl;
+    private String mRedirectUrl;
+    private boolean mIsScrollable;
+
+    @Override
+    protected void extractExtras(Map<String, String> serverExtras) {
+        mHtmlData = Uri.decode(serverExtras.get(HTML_RESPONSE_BODY_KEY));
+        mRedirectUrl = serverExtras.get(REDIRECT_URL_KEY);
+        mClickthroughUrl = serverExtras.get(CLICKTHROUGH_URL_KEY);
+        mIsScrollable = Boolean.valueOf(serverExtras.get(SCROLLABLE_KEY));
+    }
+
+    @Override
+    protected void showInterstitial() {
+        MoPubActivity.start(mContext, mHtmlData, mIsScrollable, mRedirectUrl, mClickthroughUrl);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
new file mode 100644
index 00000000..75dd6f96
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
@@ -0,0 +1,84 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.os.Handler;
+
+import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+
+public class HtmlInterstitialWebView extends BaseHtmlWebView {
+    private Handler mHandler;
+    private CustomEventInterstitialListener customEventInterstitialListener;
+
+    public HtmlInterstitialWebView(Context context) {
+        super(context);
+
+        mHandler = new Handler();
+    }
+
+    public void init(CustomEventInterstitialListener customEventInterstitialListener, boolean isScrollable, String redirectUrl, String clickthroughUrl) {
+        super.init(isScrollable);
+        setWebViewClient(new HtmlWebViewClient(new HtmlInterstitialWebViewListener(customEventInterstitialListener), this, clickthroughUrl, redirectUrl));
+        addMoPubUriJavascriptInterface(customEventInterstitialListener);
+    }
+
+    private void postHandlerRunnable(Runnable r) {
+        mHandler.post(r);
+    }
+
+    /*
+     * XXX (2/15/12): This is a workaround for a problem on ICS devices where
+     * WebViews with layout height WRAP_CONTENT can mysteriously render with
+     * zero height. This seems to happen when calling loadData() with HTML that
+     * sets window.location during its "onload" event. We use loadData() when
+     * displaying interstitials, and our creatives use window.location to
+     * communicate ad loading status to AdViews. This results in zero-height
+     * interstitials. We counteract this by using a Javascript interface object
+     * to signal loading status, rather than modifying window.location.
+     */
+    private void addMoPubUriJavascriptInterface(final CustomEventInterstitialListener customEventInterstitialListener) {
+        final class MoPubUriJavascriptInterface {
+            // This method appears to be unused, since it will only be called from JavaScript.
+            @SuppressWarnings("unused")
+            public boolean fireFinishLoad() {
+                HtmlInterstitialWebView.this.postHandlerRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        customEventInterstitialListener.onInterstitialShown();
+                    }
+                });
+                return true;
+            }
+        }
+
+        addJavascriptInterface(new MoPubUriJavascriptInterface(), "mopubUriInterface");
+    }
+
+    static class HtmlInterstitialWebViewListener implements HtmlWebViewListener {
+        private final CustomEventInterstitialListener mCustomEventInterstitialListener;
+
+        public HtmlInterstitialWebViewListener(CustomEventInterstitialListener customEventInterstitialListener) {
+            mCustomEventInterstitialListener = customEventInterstitialListener;
+        }
+
+        @Override
+        public void onLoaded(BaseHtmlWebView mHtmlWebView) {
+            // When the HtmlInterstitialWebViewClient loads, it means that our HtmlInterstitial has been shown.
+            mCustomEventInterstitialListener.onInterstitialShown();
+        }
+
+        @Override
+        public void onFailed(MoPubErrorCode errorCode) {
+            mCustomEventInterstitialListener.onInterstitialFailed(errorCode);
+        }
+
+        @Override
+        public void onClicked() {
+            mCustomEventInterstitialListener.onInterstitialClicked();
+        }
+
+        @Override
+        public void onCollapsed() {
+            // Ignored
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdWebViewClient.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
similarity index 78%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/AdWebViewClient.java
rename to mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
index f1399e23..9f8b0bea 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdWebViewClient.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
@@ -15,15 +15,19 @@
 
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 
-class AdWebViewClient extends WebViewClient {
+class HtmlWebViewClient extends WebViewClient {
     private final Context mContext;
-    private AdViewController mAdViewController;
-    private AdWebView mAdWebView;
-
-    AdWebViewClient(AdViewController adViewController, AdWebView adWebView) {
-        this.mAdViewController = adViewController;
-        mAdWebView = adWebView;
-        mContext = mAdWebView.getContext();
+    private HtmlWebViewListener mHtmlWebViewListener;
+    private BaseHtmlWebView mHtmlWebView;
+    private final String mClickthroughUrl;
+    private final String mRedirectUrl;
+
+    HtmlWebViewClient(HtmlWebViewListener htmlWebViewListener, BaseHtmlWebView htmlWebView, String clickthrough, String redirect) {
+        mHtmlWebViewListener = htmlWebViewListener;
+        mHtmlWebView = htmlWebView;
+        mClickthroughUrl = clickthrough;
+        mRedirectUrl = redirect;
+        mContext = htmlWebView.getContext();
     }
 
     @Override
@@ -36,9 +40,9 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
             return true;
         }
 
-        url = urlWithClickTrackingRedirect(mAdViewController, url);
+        url = urlWithClickTrackingRedirect(url);
         Log.d("MoPub", "Ad clicked. Click URL: " + url);
-        mAdViewController.getMoPubView().adClicked();
+        mHtmlWebViewListener.onClicked();
 
         showBrowserForUrl(url);
         return true;
@@ -47,9 +51,8 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
     @Override
     public void onPageStarted(WebView view, String url, Bitmap favicon) {
         // If the URL being loaded shares the redirectUrl prefix, open it in the browser.
-        String redirectUrl = mAdViewController.getRedirectUrl();
-        if (redirectUrl != null && url.startsWith(redirectUrl)) {
-            url = urlWithClickTrackingRedirect(mAdViewController, url);
+        if (mRedirectUrl != null && url.startsWith(mRedirectUrl)) {
+            url = urlWithClickTrackingRedirect(url);
             view.stopLoading();
             showBrowserForUrl(url);
         }
@@ -62,11 +65,11 @@ private boolean handleSpecialMoPubScheme(String url) {
         String host = uri.getHost();
 
         if (host.equals("finishLoad")) {
-            mAdViewController.adDidLoad();
+            mHtmlWebViewListener.onLoaded(mHtmlWebView);
         } else if (host.equals("close")) {
-            mAdViewController.adDidClose();
+            mHtmlWebViewListener.onCollapsed();
         } else if (host.equals("failLoad")) {
-            mAdWebView.loadFailUrl(UNSPECIFIED);
+            mHtmlWebViewListener.onFailed(UNSPECIFIED);
         } else if (host.equals("custom")) {
             handleCustomIntentFromUri(uri);
         }
@@ -81,7 +84,7 @@ private boolean handlePhoneScheme(String url) {
         intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
         try {
             mContext.startActivity(intent);
-            mAdViewController.registerClick();
+            mHtmlWebViewListener.onClicked();
         } catch (ActivityNotFoundException e) {
             Log.w("MoPub", "Could not handle intent with URI: " + url +
                     ". Is this intent unsupported on your phone?");
@@ -118,18 +121,16 @@ private boolean canHandleMarketUrl(String url) {
         return true;
     }
 
-    private String urlWithClickTrackingRedirect(AdViewController adViewController, String url) {
-        String clickthroughUrl = adViewController.getClickthroughUrl();
-        if (clickthroughUrl == null) return url;
-        else {
+    private String urlWithClickTrackingRedirect(String url) {
+        if (mClickthroughUrl == null) {
+            return url;
+        } else {
             String encodedUrl = Uri.encode(url);
-            return clickthroughUrl + "&r=" + encodedUrl;
+            return mClickthroughUrl + "&r=" + encodedUrl;
         }
     }
 
     private void showBrowserForUrl(String url) {
-        if (mAdViewController.isDestroyed()) return;
-
         if (url == null || url.equals("")) url = "about:blank";
         Log.d("MoPub", "Final URI to show in browser: " + url);
         Intent intent = new Intent(mContext, MraidBrowser.class);
@@ -151,12 +152,12 @@ private void showBrowserForUrl(String url) {
     }
 
     private void handleCustomIntentFromUri(Uri uri) {
-        mAdViewController.registerClick();
+        mHtmlWebViewListener.onClicked();
         String action = uri.getQueryParameter("fnc");
         String adData = uri.getQueryParameter("data");
         Intent customIntent = new Intent(action);
         customIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        customIntent.putExtra(AdWebView.EXTRA_AD_CLICK_DATA, adData);
+        customIntent.putExtra(HtmlBannerWebView.EXTRA_AD_CLICK_DATA, adData);
         try {
             mContext.startActivity(customIntent);
         } catch (ActivityNotFoundException e) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewListener.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewListener.java
new file mode 100644
index 00000000..41ee0dbb
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewListener.java
@@ -0,0 +1,8 @@
+package com.mopub.mobileads;
+
+public interface HtmlWebViewListener {
+    void onLoaded(BaseHtmlWebView mHtmlWebView);
+    void onFailed(MoPubErrorCode unspecified);
+    void onClicked();
+    void onCollapsed();
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPub.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPub.java
index 153d3a0f..6d90d35d 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPub.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPub.java
@@ -33,6 +33,6 @@
 package com.mopub.mobileads;
 
 public class MoPub {
-    public static final String SDK_VERSION = "1.14.0.0";
+    public static final String SDK_VERSION = "1.14.1.0";
 }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java
index 250e8a9d..ad852177 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java
@@ -32,63 +32,82 @@
 
 package com.mopub.mobileads;
 
+import android.content.Context;
+import android.content.Intent;
 import android.view.View;
-import com.mopub.mobileads.MoPubView.BannerAdListener;
-import com.mopub.mobileads.factories.MoPubViewFactory;
+import com.mopub.mobileads.factories.HtmlInterstitialWebViewFactory;
 
-public class MoPubActivity extends BaseActivity {
-    public static final String AD_UNIT_ID_KEY = "com.mopub.mobileads.AdUnitId";
-    public static final String KEYWORDS_KEY = "com.mopub.mobileads.Keywords";
-    public static final String CLICKTHROUGH_URL_KEY = "com.mopub.mobileads.ClickthroughUrl";
-    public static final String TIMEOUT_KEY = "com.mopub.mobileads.Timeout";
+import static com.mopub.mobileads.AdFetcher.CLICKTHROUGH_URL_KEY;
+import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
+import static com.mopub.mobileads.AdFetcher.SCROLLABLE_KEY;
+import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+
+public class MoPubActivity extends BaseInterstitialActivity {
+    private HtmlInterstitialWebView htmlInterstitialWebView;
+
+    public static void start(Context context, String htmlData, boolean isScrollable, String redirectUrl, String clickthroughUrl) {
+        Intent intent = createIntent(context, htmlData, isScrollable, redirectUrl, clickthroughUrl);
+        context.startActivity(intent);
+    }
+
+    public static Intent createIntent(Context context, String htmlData, boolean isScrollable, String redirectUrl, String clickthroughUrl) {
+        Intent intent = new Intent(context, MoPubActivity.class);
+        intent.putExtra(HTML_RESPONSE_BODY_KEY, htmlData);
+        intent.putExtra(SCROLLABLE_KEY, isScrollable);
+        intent.putExtra(CLICKTHROUGH_URL_KEY, clickthroughUrl);
+        intent.putExtra(REDIRECT_URL_KEY, redirectUrl);
+        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        return intent;
+    }
 
-    private MoPubView mMoPubView;
-    
     @Override
     public View getAdView() {
-        String adUnitId = getIntent().getStringExtra(AD_UNIT_ID_KEY);
-        String keywords = getIntent().getStringExtra(KEYWORDS_KEY);
-        String clickthroughUrl = getIntent().getStringExtra(CLICKTHROUGH_URL_KEY);
-        int timeout = getIntent().getIntExtra(TIMEOUT_KEY, 0);
-        
-        if (adUnitId == null) {
-            throw new RuntimeException("AdUnitId isn't set in " + getClass().getCanonicalName());
-        }
-        
-        mMoPubView = MoPubViewFactory.create(this);
-        mMoPubView.setAdUnitId(adUnitId);
-        mMoPubView.setKeywords(keywords);
-        mMoPubView.setClickthroughUrl(clickthroughUrl);
-        mMoPubView.setTimeout(timeout);
-        
-        mMoPubView.setBannerAdListener(new BannerAdListener() {
-            @Override
-            public void onBannerLoaded(MoPubView banner) {
-                mMoPubView.adAppeared();
-            }
-            public void onBannerFailed(MoPubView banner, MoPubErrorCode errorCode) {}
-            public void onBannerClicked(MoPubView banner) {}
-            public void onBannerExpanded(MoPubView banner) {}
-            public void onBannerCollapsed(MoPubView banner) {}
-        }); 
-        
-        String source = getIntent().getStringExtra(SOURCE_KEY);
-        if (source != null) {
-            source = sourceWithImpressionTrackingDisabled(source);
-            mMoPubView.loadHtmlString(source);
-        }
-        
-        return mMoPubView;
+        Intent intent = getIntent();
+        boolean isScrollable = intent.getBooleanExtra(SCROLLABLE_KEY, false);
+        String redirectUrl = intent.getStringExtra(REDIRECT_URL_KEY);
+        String clickthroughUrl = intent.getStringExtra(CLICKTHROUGH_URL_KEY);
+        String htmlResponse = intent.getStringExtra(HTML_RESPONSE_BODY_KEY);
+
+        htmlInterstitialWebView = HtmlInterstitialWebViewFactory.create(new BroadcastingInterstitialListener(), isScrollable, redirectUrl, clickthroughUrl);
+        htmlInterstitialWebView.loadHtmlResponse(htmlResponse);
+
+        return htmlInterstitialWebView;
     }
     
     @Override
     protected void onDestroy() {
-        mMoPubView.destroy();
+        htmlInterstitialWebView.destroy();
         super.onDestroy();
     }
 
-    private String sourceWithImpressionTrackingDisabled(String source) {
-        // TODO: Temporary fix. Disables impression tracking by renaming the pixel tracker's URL.
-        return source.replaceAll("http://ads.mopub.com/m/imp", "mopub://null");
+    private class BroadcastingInterstitialListener implements CustomEventInterstitialListener {
+        @Override
+        public void onInterstitialLoaded() {
+        }
+
+        @Override
+        public void onInterstitialFailed(MoPubErrorCode errorCode) {
+            broadcastInterstitialAction(ACTION_INTERSTITIAL_FAIL);
+            finish();
+        }
+
+        @Override
+        public void onInterstitialShown() {
+            broadcastInterstitialAction(ACTION_INTERSTITIAL_SHOW);
+        }
+
+        @Override
+        public void onInterstitialClicked() {
+            broadcastInterstitialAction(ACTION_INTERSTITIAL_CLICK);
+        }
+
+        @Override
+        public void onLeaveApplication() {
+        }
+
+        @Override
+        public void onInterstitialDismissed() {
+        }
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
index 31f6bd61..5846f1c3 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
@@ -34,11 +34,8 @@
 
 import android.app.Activity;
 import android.content.Context;
-import android.content.Intent;
 import android.location.Location;
-import android.support.v4.content.LocalBroadcastManager;
 import android.util.Log;
-import com.mopub.mobileads.MoPubView.BannerAdListener;
 import com.mopub.mobileads.MoPubView.LocationAwareness;
 import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
 
@@ -46,15 +43,11 @@
 
 import static com.mopub.mobileads.AdFetcher.CUSTOM_EVENT_DATA_HEADER;
 import static com.mopub.mobileads.AdFetcher.CUSTOM_EVENT_NAME_HEADER;
-import static com.mopub.mobileads.BaseActivity.SOURCE_KEY;
-import static com.mopub.mobileads.MoPubActivity.AD_UNIT_ID_KEY;
-import static com.mopub.mobileads.MoPubActivity.CLICKTHROUGH_URL_KEY;
-import static com.mopub.mobileads.MoPubActivity.KEYWORDS_KEY;
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
 
 public class MoPubInterstitial implements CustomEventInterstitialAdapter.CustomEventInterstitialAdapterListener {
 
     private enum InterstitialState {
-        HTML_AD_READY,
         CUSTOM_EVENT_AD_READY,
         NOT_READY;
 
@@ -69,63 +62,56 @@ boolean isReady() {
     private Activity mActivity;
     private String mAdUnitId;
     private InterstitialState mCurrentInterstitialState;
-    private BaseActivityBroadcastReceiver mBaseActivityBroadcastReceiver;
     private boolean mIsDestroyed;
 
     public interface InterstitialAdListener {
         public void onInterstitialLoaded(MoPubInterstitial interstitial);
         public void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode);
         public void onInterstitialShown(MoPubInterstitial interstitial);
+        public void onInterstitialClicked(MoPubInterstitial interstitial);
         public void onInterstitialDismissed(MoPubInterstitial interstitial);
     }
-    
+
     private MoPubInterstitialListener mListener;
-    
+
     @Deprecated
     public interface MoPubInterstitialListener {
         public void OnInterstitialLoaded();
         public void OnInterstitialFailed();
     }
-    
+
     public MoPubInterstitial(Activity activity, String id) {
         mActivity = activity;
         mAdUnitId = id;
-        
+
         mInterstitialView = new MoPubInterstitialView(mActivity);
         mInterstitialView.setAdUnitId(mAdUnitId);
 
-        mInterstitialView.setBannerAdListener(new MoPubInterstitialBannerListener());
-        
         mCurrentInterstitialState = InterstitialState.NOT_READY;
 
-        mBaseActivityBroadcastReceiver = new MoPubInterstitialBroadcastReceiver();
-        
-        // This IntentFilter contains HTML interstitial show and dismiss actions.
-        LocalBroadcastManager.getInstance(mActivity).registerReceiver(mBaseActivityBroadcastReceiver,
-                BaseActivity.HTML_INTERSTITIAL_INTENT_FILTER);
     }
 
     public void load() {
         resetCurrentInterstitial();
         mInterstitialView.loadAd();
     }
-    
+
     public void forceRefresh() {
         resetCurrentInterstitial();
         mInterstitialView.forceRefresh();
     }
-    
+
     private void resetCurrentInterstitial() {
         mCurrentInterstitialState = InterstitialState.NOT_READY;
-        
+
         if (mCustomEventInterstitialAdapter != null) {
             mCustomEventInterstitialAdapter.invalidate();
             mCustomEventInterstitialAdapter = null;
         }
-        
+
         mIsDestroyed = false;
     }
-    
+
     public boolean isReady() {
         return mCurrentInterstitialState.isReady();
     }
@@ -133,35 +119,22 @@ public boolean isReady() {
     boolean isDestroyed() {
         return mIsDestroyed;
     }
-    
+
     public boolean show() {
         switch (mCurrentInterstitialState) {
-            case HTML_AD_READY:
-                showHtmlInterstitial();
-                return true;
             case CUSTOM_EVENT_AD_READY:
                 showCustomEventInterstitial();
                 return true;
         }
         return false;
     }
-    
-    private void showHtmlInterstitial() {
-        String responseString = mInterstitialView.getResponseString();
-        Intent i = new Intent(mActivity, MoPubActivity.class);
-        i.putExtra(AD_UNIT_ID_KEY, mAdUnitId);
-        i.putExtra(KEYWORDS_KEY, mInterstitialView.getKeywords());
-        i.putExtra(SOURCE_KEY, responseString);
-        i.putExtra(CLICKTHROUGH_URL_KEY, mInterstitialView.getClickthroughUrl());
-        mActivity.startActivity(i);
-    }
-    
+
     private void showCustomEventInterstitial() {
         if (mCustomEventInterstitialAdapter != null) mCustomEventInterstitialAdapter.showInterstitial();
     }
-    
+
     ////////////////////////////////////////////////////////////////////////////////////////////////
-    
+
     public void setKeywords(String keywords) {
         mInterstitialView.setKeywords(keywords);
     }
@@ -169,15 +142,15 @@ public void setKeywords(String keywords) {
     public String getKeywords() {
         return mInterstitialView.getKeywords();
     }
-    
+
     public Activity getActivity() {
-    	return mActivity;
+        return mActivity;
     }
-    
+
     public Location getLocation() {
         return mInterstitialView.getLocation();
     }
-    
+
     public void destroy() {
         mIsDestroyed = true;
 
@@ -185,21 +158,19 @@ public void destroy() {
             mCustomEventInterstitialAdapter.invalidate();
             mCustomEventInterstitialAdapter = null;
         }
-        
-        LocalBroadcastManager.getInstance(mActivity).unregisterReceiver(mBaseActivityBroadcastReceiver);
-        
+
         mInterstitialView.setBannerAdListener(null);
         mInterstitialView.destroy();
     }
-    
+
     public void setInterstitialAdListener(InterstitialAdListener listener) {
         mInterstitialAdListener = listener;
     }
-    
+
     public InterstitialAdListener getInterstitialAdListener() {
         return mInterstitialAdListener;
     }
-    
+
     public void setLocationAwareness(LocationAwareness awareness) {
         mInterstitialView.setLocationAwareness(awareness);
     }
@@ -215,19 +186,19 @@ public void setLocationPrecision(int precision) {
     public int getLocationPrecision() {
         return mInterstitialView.getLocationPrecision();
     }
-    
+
     public void setTesting(boolean testing) {
         mInterstitialView.setTesting(testing);
     }
-    
+
     public boolean getTesting() {
         return mInterstitialView.getTesting();
     }
-    
+
     public void setLocalExtras(Map<String, Object> extras) {
         mInterstitialView.setLocalExtras(extras);
     }
-    
+
     public Map<String, Object> getLocalExtras() {
         return mInterstitialView.getLocalExtras();
     }
@@ -241,10 +212,9 @@ public void onCustomEventInterstitialLoaded() {
         if (mIsDestroyed) return;
 
         mCurrentInterstitialState = InterstitialState.CUSTOM_EVENT_AD_READY;
-        mInterstitialView.trackImpression();
 
         if (mInterstitialAdListener != null) {
-            mInterstitialAdListener.onInterstitialLoaded(MoPubInterstitial.this);
+            mInterstitialAdListener.onInterstitialLoaded(this);
         } else if (mListener != null) {
             mListener.OnInterstitialLoaded();
         }
@@ -259,11 +229,15 @@ public void onCustomEventInterstitialFailed(MoPubErrorCode errorCode) {
     }
 
     @Override
-    public void onCustomEventInterstitialShown() {
+    public void onCustomEventInterstitialShown(boolean shouldTrackImpressions) {
         if (isDestroyed()) return;
 
+        if (shouldTrackImpressions) {
+            mInterstitialView.trackImpression();
+        }
+
         if (mInterstitialAdListener != null) {
-            mInterstitialAdListener.onInterstitialShown(MoPubInterstitial.this);
+            mInterstitialAdListener.onInterstitialShown(this);
         }
     }
 
@@ -272,6 +246,10 @@ public void onCustomEventInterstitialClicked() {
         if (isDestroyed()) return;
 
         mInterstitialView.registerClick();
+
+        if (mInterstitialAdListener != null) {
+            mInterstitialAdListener.onInterstitialClicked(this);
+        }
     }
 
     @Override
@@ -281,14 +259,14 @@ public void onCustomEventInterstitialDismissed() {
         mCurrentInterstitialState = InterstitialState.NOT_READY;
 
         if (mInterstitialAdListener != null) {
-            mInterstitialAdListener.onInterstitialDismissed(MoPubInterstitial.this);
+            mInterstitialAdListener.onInterstitialDismissed(this);
         }
     }
 
     ////////////////////////////////////////////////////////////////////////////////////////////////
-    
+
     public class MoPubInterstitialView extends MoPubView {
-        
+
         public MoPubInterstitialView(Context context) {
             super(context);
             setAutorefreshEnabled(false);
@@ -296,9 +274,17 @@ public MoPubInterstitialView(Context context) {
 
         @Override
         protected void loadCustomEvent(Map<String, String> paramsMap) {
-            if (mCustomEventInterstitialAdapter != null) mCustomEventInterstitialAdapter.invalidate();
+            if (paramsMap == null) {
+                Log.d("MoPub", "Couldn't invoke custom event because the server did not specify one.");
+                loadFailUrl(ADAPTER_NOT_FOUND);
+                return;
+            }
+
+            if (mCustomEventInterstitialAdapter != null) {
+                mCustomEventInterstitialAdapter.invalidate();
+            }
 
-            Log.i("MoPub", "Loading custom event interstitial adapter.");
+            Log.d("MoPub", "Loading custom event interstitial adapter.");
 
             mCustomEventInterstitialAdapter = CustomEventInterstitialAdapterFactory.create(
                     MoPubInterstitial.this,
@@ -307,57 +293,16 @@ protected void loadCustomEvent(Map<String, String> paramsMap) {
             mCustomEventInterstitialAdapter.setAdapterListener(MoPubInterstitial.this);
             mCustomEventInterstitialAdapter.loadInterstitial();
         }
-        
+
         protected void trackImpression() {
             Log.d("MoPub", "Tracking impression for interstitial.");
             if (mAdViewController != null) mAdViewController.trackImpression();
         }
-    }
 
-    class MoPubInterstitialBannerListener implements BannerAdListener {
         @Override
-        public void onBannerLoaded(MoPubView ignored) {
-            mCurrentInterstitialState = InterstitialState.HTML_AD_READY;
-            if (mCustomEventInterstitialAdapter != null) {
-                mCustomEventInterstitialAdapter.invalidate();
-                mCustomEventInterstitialAdapter = null;
-            }
-
-            if (mInterstitialAdListener != null) {
-                mInterstitialAdListener.onInterstitialLoaded(MoPubInterstitial.this);
-            } else if (mListener != null) {
-                mListener.OnInterstitialLoaded();
-            }
-        }
-
-        @Override
-        public void onBannerFailed(MoPubView ignored, MoPubErrorCode errorCode) {
-            mCurrentInterstitialState = InterstitialState.NOT_READY;
+        protected void adFailed(MoPubErrorCode errorCode) {
             if (mInterstitialAdListener != null) {
                 mInterstitialAdListener.onInterstitialFailed(MoPubInterstitial.this, errorCode);
-            } else if (mListener != null) {
-                mListener.OnInterstitialFailed();
-            }
-        }
-
-        @Override public void onBannerClicked(MoPubView banner) {}
-        @Override public void onBannerExpanded(MoPubView banner) {}
-        @Override public void onBannerCollapsed(MoPubView banner) {}
-    }
-
-    class MoPubInterstitialBroadcastReceiver extends BaseActivityBroadcastReceiver {
-        @Override
-        void onHtmlInterstitialShown() {
-            if (mInterstitialAdListener != null) {
-                mInterstitialAdListener.onInterstitialShown(MoPubInterstitial.this);
-            }
-        }
-
-        @Override
-        void onHtmlInterstitialDismissed() {
-            mCurrentInterstitialState = InterstitialState.NOT_READY;
-            if (mInterstitialAdListener != null) {
-                mInterstitialAdListener.onInterstitialDismissed(MoPubInterstitial.this);
             }
         }
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
index 1d9f9a97..829fd686 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -44,6 +44,7 @@
 import android.view.View;
 import android.webkit.WebViewDatabase;
 import android.widget.FrameLayout;
+import com.mopub.mobileads.factories.AdViewControllerFactory;
 import com.mopub.mobileads.factories.CustomEventBannerAdapterFactory;
 
 import java.lang.reflect.Constructor;
@@ -53,6 +54,7 @@
 
 import static com.mopub.mobileads.AdFetcher.CUSTOM_EVENT_DATA_HEADER;
 import static com.mopub.mobileads.AdFetcher.CUSTOM_EVENT_NAME_HEADER;
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
 
 public class MoPubView extends FrameLayout {
     
@@ -126,14 +128,14 @@ public MoPubView(Context context, AttributeSet attrs) {
     private void initVersionDependentAdView(Context context) {
         int sdkVersion = (new Integer(Build.VERSION.SDK)).intValue();
         if (sdkVersion < 7) {
-        	mAdViewController = new AdViewController(context, this);
+        	mAdViewController = AdViewControllerFactory.create(context, this);
         } else {
             // On Android 2.1 (Eclair) and up, try to load our HTML5-enabled AdViewController class.
             Class<?> HTML5AdViewClass = null;
             try {
                 HTML5AdViewClass = (Class<?>) Class.forName("com.mopub.mobileads.HTML5AdView");
             } catch (ClassNotFoundException e) {
-                mAdViewController = new AdViewController(context, this);
+                mAdViewController = AdViewControllerFactory.create(context, this);
                 return;
             } 
 
@@ -162,7 +164,7 @@ private void initVersionDependentAdView(Context context) {
                 Log.e("MoPub", "Could not load HTML5AdView.");
             }
 
-            if (mAdViewController == null) mAdViewController = new AdViewController(context, this);
+            if (mAdViewController == null) mAdViewController = AdViewControllerFactory.create(context, this);
         }
     }
 
@@ -235,9 +237,17 @@ protected void loadFailUrl(MoPubErrorCode errorCode) {
     }
 
     protected void loadCustomEvent(Map<String, String> paramsMap) {
-        if (mCustomEventBannerAdapter != null) mCustomEventBannerAdapter.invalidate();
+        if (paramsMap == null) {
+            Log.d("MoPub", "Couldn't invoke custom event because the server did not specify one.");
+            loadFailUrl(ADAPTER_NOT_FOUND);
+            return;
+        }
+
+        if (mCustomEventBannerAdapter != null) {
+            mCustomEventBannerAdapter.invalidate();
+        }
 
-        Log.i("MoPub", "Loading custom event adapter.");
+        Log.d("MoPub", "Loading custom event adapter.");
 
         mCustomEventBannerAdapter = CustomEventBannerAdapterFactory.create(
                 this,
@@ -254,11 +264,7 @@ protected void registerClick() {
             adClicked();
         }
     }
-    
-    protected void loadHtmlString(String html) {
-        if (mAdViewController != null) mAdViewController.loadResponseString(html);
-    }
-    
+
     protected void trackNativeImpression() {
         Log.d("MoPub", "Tracking impression for native adapter.");
         if (mAdViewController != null) mAdViewController.trackImpression();
@@ -327,10 +333,6 @@ protected void nativeAdLoaded() {
         adLoaded();
     }
     
-    protected void adAppeared() {
-        if (mAdViewController != null) mAdViewController.adAppeared();
-    }
-
     ////////////////////////////////////////////////////////////////////////////////////////////////
 
     public void setAdUnitId(String adUnitId) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
index e573b97c..52e0c2e9 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
@@ -1,15 +1,30 @@
 package com.mopub.mobileads;
 
+import android.os.Bundle;
 import android.view.View;
+import android.view.WindowManager;
 import com.mopub.mobileads.MraidView.ExpansionStyle;
 import com.mopub.mobileads.MraidView.NativeCloseButtonStyle;
 import com.mopub.mobileads.MraidView.PlacementType;
 import com.mopub.mobileads.MraidView.ViewState;
 import com.mopub.mobileads.factories.MraidViewFactory;
+import com.mopub.mobileads.util.WebViews;
 
-public class MraidActivity extends BaseActivity {    
+import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
+
+public class MraidActivity extends BaseInterstitialActivity {
     private MraidView mMraidView;
-    
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        broadcastInterstitialAction(ACTION_INTERSTITIAL_SHOW);
+
+        getWindow().setFlags(
+                WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,
+                WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
+    }
+
     @Override
     public View getAdView() {
         mMraidView = MraidViewFactory.create(this, ExpansionStyle.DISABLED, NativeCloseButtonStyle.AD_CONTROLLED,
@@ -37,12 +52,24 @@ public void onClose(MraidView view, ViewState newViewState) {
             }
         });
         
-        String source = getIntent().getStringExtra(SOURCE_KEY);
+        String source = getIntent().getStringExtra(HTML_RESPONSE_BODY_KEY);
         mMraidView.loadHtmlData(source);
         
         return mMraidView;
     }
-    
+
+    @Override
+    protected void onPause() {
+        super.onPause();
+        WebViews.onPause(mMraidView);
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        WebViews.onResume(mMraidView);
+    }
+
     @Override
     protected void onDestroy() {
         mMraidView.destroy();
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBanner.java
index 61b2d22c..8ab675d6 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBanner.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBanner.java
@@ -39,7 +39,7 @@
 
 import java.util.Map;
 
-import static com.mopub.mobileads.AdFetcher.MRAID_HTML_DATA;
+import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
 
 class MraidBanner extends CustomEventBanner {
@@ -55,7 +55,7 @@ protected void loadBanner(Context context,
 
         String htmlData;
         if (extrasAreValid(serverExtras)) {
-            htmlData = Uri.decode(serverExtras.get(MRAID_HTML_DATA));
+            htmlData = Uri.decode(serverExtras.get(HTML_RESPONSE_BODY_KEY));
         } else {
             mBannerListener.onBannerFailed(MRAID_LOAD_ERROR);
             return;
@@ -92,7 +92,7 @@ void onClose() {
     }
 
     private boolean extrasAreValid(Map<String, String> serverExtras) {
-        return serverExtras.containsKey(MRAID_HTML_DATA);
+        return serverExtras.containsKey(HTML_RESPONSE_BODY_KEY);
     }
 
     private void initMraidListeners() {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
index bd7cb6ea..0b098f0f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
@@ -379,7 +379,6 @@ protected void useCustomClose(boolean shouldUseCustomCloseButton) {
     }
     
     protected boolean checkViewable() {
-        // TODO: Perform more sophisticated check for viewable.
         return true;
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidInterstitial.java
index 94a65b51..9ae62fdb 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidInterstitial.java
@@ -1,56 +1,26 @@
 package com.mopub.mobileads;
 
 
-import android.app.Activity;
-import android.content.Context;
 import android.content.Intent;
 import android.net.Uri;
 
 import java.util.Map;
 
-import static com.mopub.mobileads.AdFetcher.MRAID_HTML_DATA;
-import static com.mopub.mobileads.BaseActivity.SOURCE_KEY;
-import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
+import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 
-class MraidInterstitial extends CustomEventInterstitial {
-    private Activity mActivity;
+class MraidInterstitial extends ResponseBodyInterstitial {
     private String mHtmlData;
 
     @Override
-    protected void loadInterstitial(Context context,
-                          CustomEventInterstitialListener customEventInterstitialListener,
-                          Map<String, Object> localExtras,
-                          Map<String, String> serverExtras) {
-
-        if (context instanceof Activity) {
-            mActivity = (Activity) context;
-        } else {
-            customEventInterstitialListener.onInterstitialFailed(MRAID_LOAD_ERROR);
-            return;
-        }
-
-        if (extrasAreValid(serverExtras)) {
-            mHtmlData = Uri.decode(serverExtras.get(MRAID_HTML_DATA));
-        } else {
-            customEventInterstitialListener.onInterstitialFailed(MRAID_LOAD_ERROR);
-            return;
-        }
-
-        customEventInterstitialListener.onInterstitialLoaded();
+    protected void extractExtras(Map<String, String> serverExtras) {
+        mHtmlData = Uri.decode(serverExtras.get(HTML_RESPONSE_BODY_KEY));
     }
 
     @Override
     protected void showInterstitial() {
-        Intent intent = new Intent(mActivity, MraidActivity.class);
-        intent.putExtra(SOURCE_KEY, mHtmlData);
-        mActivity.startActivity(intent);
-    }
-
-    @Override
-    protected void onInvalidate() {
-    }
-
-    private boolean extrasAreValid(Map<String,String> serverExtras) {
-        return serverExtras.containsKey(MRAID_HTML_DATA);
+        Intent intent = new Intent(mContext, MraidActivity.class);
+        intent.putExtra(HTML_RESPONSE_BODY_KEY, mHtmlData);
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        mContext.startActivity(intent);
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
index db1aeb72..3615e243 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
@@ -13,6 +13,7 @@
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
 import com.mopub.mobileads.resource.MraidJavascript;
+import com.mopub.mobileads.util.Strings;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 import org.apache.http.NameValuePair;
@@ -23,14 +24,13 @@
 import org.apache.http.impl.client.DefaultHttpClient;
 
 import java.io.IOException;
-import java.io.InputStream;
 import java.net.URI;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-public class MraidView extends WebView {
+public class MraidView extends BaseWebView {
     private static final String LOGTAG = "MraidView";
     
     private MraidBrowserController mBrowserController;
@@ -144,7 +144,7 @@ public void loadHtmlData(String data) {
 
     public void loadUrl(String url) {
         HttpClient httpClient = new DefaultHttpClient();
-        StringBuffer out = new StringBuffer();
+        String outString = "";
         
         try {
             HttpGet httpGet = new HttpGet(url);
@@ -152,11 +152,7 @@ public void loadUrl(String url) {
             HttpEntity entity = response.getEntity();
     
             if (entity != null) {
-                InputStream is = entity.getContent();
-                byte[] b = new byte[4096];
-                for (int n; (n = is.read(b)) != -1;) {
-                    out.append(new String(b, 0, n));
-                }
+                outString = Strings.fromStream(entity.getContent());
             }
         } catch (IllegalArgumentException e) {
             Log.d("MoPub", "Mraid loadUrl failed (IllegalArgumentException): "+url);
@@ -170,7 +166,7 @@ public void loadUrl(String url) {
             return;
         }
 
-        loadHtmlData(out.toString());
+        loadHtmlData(outString);
     }
     
     private void notifyOnFailureListener() {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
new file mode 100644
index 00000000..2c58ed05
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
@@ -0,0 +1,47 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+
+import java.util.Map;
+
+import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+
+abstract class ResponseBodyInterstitial extends CustomEventInterstitial {
+    private EventForwardingBroadcastReceiver mBroadcastReceiver;
+    protected Context mContext;
+
+    abstract protected void extractExtras(Map<String, String> serverExtras);
+    abstract protected void showInterstitial();
+
+    @Override
+    protected void loadInterstitial(
+            Context context,
+            CustomEventInterstitialListener customEventInterstitialListener,
+            Map<String, Object> localExtras,
+            Map<String, String> serverExtras) {
+
+        mContext = context;
+
+        if (extrasAreValid(serverExtras)) {
+            extractExtras(serverExtras);
+        } else {
+            customEventInterstitialListener.onInterstitialFailed(NETWORK_INVALID_STATE);
+            return;
+        }
+
+        mBroadcastReceiver = new EventForwardingBroadcastReceiver(customEventInterstitialListener);
+        mBroadcastReceiver.register(context);
+
+        customEventInterstitialListener.onInterstitialLoaded();
+    }
+
+    @Override
+    protected void onInvalidate() {
+        mBroadcastReceiver.unregister();
+    }
+
+    private boolean extrasAreValid(Map<String,String> serverExtras) {
+        return serverExtras.containsKey(HTML_RESPONSE_BODY_KEY);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/TaskTracker.java b/mopub-sdk/src/main/java/com/mopub/mobileads/TaskTracker.java
new file mode 100644
index 00000000..ffe0a65b
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/TaskTracker.java
@@ -0,0 +1,24 @@
+package com.mopub.mobileads;
+
+public class TaskTracker {
+    private long mCurrentTaskId = -1l;
+    private long mLastCompletedTaskId;
+
+    public long getCurrentTaskId() {
+        return mCurrentTaskId;
+    }
+
+    public void newTaskStarted() {
+        mCurrentTaskId++;
+    }
+
+    public void markTaskCompleted(long taskId) {
+        if (taskId > mLastCompletedTaskId) {
+            mLastCompletedTaskId = taskId;
+        }
+    }
+
+    public boolean isMostCurrentTask(long taskId) {
+        return taskId >= mLastCompletedTaskId;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdFetcherFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdFetcherFactory.java
index 573fa789..b8d87cbb 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdFetcherFactory.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdFetcherFactory.java
@@ -4,7 +4,7 @@
 import com.mopub.mobileads.AdViewController;
 
 public class AdFetcherFactory {
-    private static AdFetcherFactory instance = new AdFetcherFactory();
+    protected static AdFetcherFactory instance = new AdFetcherFactory();
 
     public static void setInstance(AdFetcherFactory factory) {
         instance = factory;
@@ -14,7 +14,7 @@ public static AdFetcher create(AdViewController adViewController, String userAge
         return instance.internalCreate(adViewController, userAgent);
     }
 
-    public AdFetcher internalCreate(AdViewController adViewController, String userAgent) {
+    protected AdFetcher internalCreate(AdViewController adViewController, String userAgent) {
         return new AdFetcher(adViewController, userAgent);
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdViewControllerFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdViewControllerFactory.java
new file mode 100644
index 00000000..58489500
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdViewControllerFactory.java
@@ -0,0 +1,22 @@
+package com.mopub.mobileads.factories;
+
+import android.content.Context;
+import com.mopub.mobileads.AdViewController;
+import com.mopub.mobileads.MoPubView;
+
+public class AdViewControllerFactory {
+    protected static AdViewControllerFactory instance = new AdViewControllerFactory();
+
+    @Deprecated // for testing
+    public static void setInstance(AdViewControllerFactory factory) {
+        instance = factory;
+    }
+
+    public static AdViewController create(Context context, MoPubView moPubView) {
+        return instance.internalCreate(context, moPubView);
+    }
+
+    protected AdViewController internalCreate(Context context, MoPubView moPubView) {
+        return new AdViewController(context, moPubView);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/BaseHtmlWebViewPool.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/BaseHtmlWebViewPool.java
new file mode 100644
index 00000000..50da8415
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/BaseHtmlWebViewPool.java
@@ -0,0 +1,44 @@
+package com.mopub.mobileads.factories;
+
+import android.content.Context;
+import com.mopub.mobileads.BaseHtmlWebView;
+
+import java.util.LinkedList;
+import java.util.Queue;
+
+abstract public class BaseHtmlWebViewPool<V extends BaseHtmlWebView, L> {
+    public final static int POOL_SIZE = 3;
+    private Queue<V> mNextHtmlWebViews;
+    protected Context mContext;
+
+    BaseHtmlWebViewPool(Context context) {
+        mContext = context;
+        mNextHtmlWebViews = new LinkedList<V>();
+        for (int i = 0; i < POOL_SIZE; i++) {
+            mNextHtmlWebViews.add(createNewHtmlWebView());
+        }
+    }
+
+    abstract protected V createNewHtmlWebView();
+    abstract protected void initializeHtmlWebView(V htmlWebView, L customEventListener, boolean isScrollable, String redirectUrl, String clickthroughUrl);
+
+    public V getNextHtmlWebView(
+            L customEventListener,
+            boolean isScrollable,
+            String redirectUrl,
+            String clickthroughUrl) {
+        V returnValue = mNextHtmlWebViews.remove();
+
+        mNextHtmlWebViews.add(createNewHtmlWebView());
+
+        initializeHtmlWebView(returnValue, customEventListener, isScrollable, redirectUrl, clickthroughUrl);
+        return returnValue;
+    }
+
+    void cleanup() {
+        for (final V htmlBannerWebView : mNextHtmlWebViews) {
+            htmlBannerWebView.destroy();
+        }
+        mNextHtmlWebViews.clear();
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
new file mode 100644
index 00000000..ffa9125d
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
@@ -0,0 +1,48 @@
+package com.mopub.mobileads.factories;
+
+import android.content.Context;
+import com.mopub.mobileads.HtmlBannerWebView;
+
+import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
+
+public class HtmlBannerWebViewFactory {
+    protected static HtmlBannerWebViewFactory instance = new HtmlBannerWebViewFactory();
+    protected HtmlBannerWebViewPool mHtmlBannerWebViewPool;
+    private int mRefCount;
+
+    public static HtmlBannerWebView create(CustomEventBannerListener customEventBannerListener, boolean isScrollable, String redirectUrl, String clickthroughUrl) {
+        return instance.internalCreate(customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl);
+    }
+
+    public static void initialize(Context context) {
+        instance.initializeInstance(context);
+    }
+
+    public static void cleanup() {
+        instance.cleanupInstance();
+    }
+
+    private void initializeInstance(Context context) {
+        if (mHtmlBannerWebViewPool == null) {
+            mHtmlBannerWebViewPool = new HtmlBannerWebViewPool(context);
+        }
+        mRefCount++;
+    }
+
+    private void cleanupInstance() {
+        if (--mRefCount == 0) {
+            mHtmlBannerWebViewPool.cleanup();
+            mHtmlBannerWebViewPool = null;
+        }
+    }
+
+    public HtmlBannerWebView internalCreate(CustomEventBannerListener customEventBannerListener, boolean isScrollable, String redirectUrl, String clickthroughUrl) {
+        return instance.mHtmlBannerWebViewPool.getNextHtmlWebView(customEventBannerListener, isScrollable, clickthroughUrl, redirectUrl);
+    }
+
+    @Deprecated // for testing
+    public static void setInstance(HtmlBannerWebViewFactory factory) {
+        instance = factory;
+    }
+}
+
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewPool.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewPool.java
new file mode 100644
index 00000000..21d255f1
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewPool.java
@@ -0,0 +1,27 @@
+package com.mopub.mobileads.factories;
+
+import android.content.Context;
+import com.mopub.mobileads.HtmlBannerWebView;
+
+import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
+
+public class HtmlBannerWebViewPool extends BaseHtmlWebViewPool<HtmlBannerWebView, CustomEventBannerListener> {
+
+    HtmlBannerWebViewPool(Context context) {
+        super(context);
+    }
+
+    @Override
+    protected HtmlBannerWebView createNewHtmlWebView() {
+        return new HtmlBannerWebView(mContext);
+    }
+
+    @Override
+    protected void initializeHtmlWebView(
+            HtmlBannerWebView htmlWebView, CustomEventBannerListener customEventListener,
+            boolean isScrollable,
+            String redirectUrl,
+            String clickthroughUrl) {
+        htmlWebView.init(customEventListener, isScrollable, redirectUrl, clickthroughUrl);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java
new file mode 100644
index 00000000..91e85894
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java
@@ -0,0 +1,59 @@
+package com.mopub.mobileads.factories;
+
+import android.content.Context;
+import com.mopub.mobileads.HtmlInterstitialWebView;
+
+import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+
+public class HtmlInterstitialWebViewFactory {
+    protected static HtmlInterstitialWebViewFactory instance = new HtmlInterstitialWebViewFactory();
+    protected HtmlInterstitialWebViewPool mHtmlInterstitialWebViewPool;
+    private int mRefCount;
+
+    public static void initialize(Context context) {
+        instance.initializeInstance(context);
+    }
+
+    public static void cleanup() {
+        instance.cleanupInstance();
+    }
+
+    private void initializeInstance(Context context) {
+        if (mHtmlInterstitialWebViewPool == null) {
+            mHtmlInterstitialWebViewPool = new HtmlInterstitialWebViewPool(context);
+        }
+        mRefCount++;
+    }
+
+    private void cleanupInstance() {
+        if (--mRefCount == 0) {
+            mHtmlInterstitialWebViewPool.cleanup();
+            mHtmlInterstitialWebViewPool = null;
+        }
+    }
+
+    @Deprecated // for testing
+    public static void setInstance(HtmlInterstitialWebViewFactory factory) {
+        instance = factory;
+    }
+
+    public static HtmlInterstitialWebView create(
+            CustomEventInterstitialListener customEventInterstitialListener,
+            boolean isScrollable,
+            String redirectUrl,
+            String clickthroughUrl) {
+        return instance.internalCreate(customEventInterstitialListener, isScrollable, redirectUrl, clickthroughUrl);
+    }
+
+    public HtmlInterstitialWebView internalCreate(
+            CustomEventInterstitialListener customEventInterstitialListener,
+            boolean isScrollable,
+            String redirectUrl,
+            String clickthroughUrl) {
+        return instance.mHtmlInterstitialWebViewPool.getNextHtmlWebView(
+                customEventInterstitialListener,
+                isScrollable,
+                redirectUrl,
+                clickthroughUrl);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewPool.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewPool.java
new file mode 100644
index 00000000..65213e27
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewPool.java
@@ -0,0 +1,26 @@
+package com.mopub.mobileads.factories;
+
+import android.content.Context;
+import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.HtmlInterstitialWebView;
+
+public class HtmlInterstitialWebViewPool extends BaseHtmlWebViewPool<HtmlInterstitialWebView, CustomEventInterstitial.CustomEventInterstitialListener> {
+
+    HtmlInterstitialWebViewPool(Context context) {
+        super(context);
+    }
+
+    @Override
+    protected HtmlInterstitialWebView createNewHtmlWebView() {
+        return new HtmlInterstitialWebView(mContext);
+    }
+
+    @Override
+    protected void initializeHtmlWebView(
+            HtmlInterstitialWebView htmlWebView, CustomEventInterstitial.CustomEventInterstitialListener customEventListener,
+            boolean isScrollable,
+            String redirectUrl,
+            String clickthroughUrl) {
+        htmlWebView.init(customEventListener, isScrollable, redirectUrl, clickthroughUrl);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpResponses.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpResponses.java
new file mode 100644
index 00000000..32324fc7
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpResponses.java
@@ -0,0 +1,20 @@
+package com.mopub.mobileads.util;
+
+import org.apache.http.Header;
+import org.apache.http.HttpResponse;
+
+public class HttpResponses {
+    public static String extractHeader(HttpResponse response, String headerName) {
+        Header header = response.getFirstHeader(headerName);
+        return header != null ? header.getValue() : null;
+    }
+
+    public static int extractIntHeader(HttpResponse response, String headerName) {
+        String headerValue = extractHeader(response, headerName);
+        return (headerValue != null) ? Integer.parseInt(headerValue.trim()) : 0;
+    }
+
+    public static boolean extractBooleanHeader(HttpResponse response, String headerName) {
+        return !"0".equals(extractHeader(response, headerName));
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Strings.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/Strings.java
new file mode 100644
index 00000000..bd910cd2
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/Strings.java
@@ -0,0 +1,29 @@
+package com.mopub.mobileads.util;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+public class Strings {
+    public static String fromStream(InputStream inputStream) throws IOException {
+        int numberBytesRead = 0;
+        StringBuffer out = new StringBuffer();
+        byte[] bytes = new byte[4096];
+
+        while (numberBytesRead != -1) {
+            out.append(new String(bytes, 0, numberBytesRead));
+            numberBytesRead = inputStream.read(bytes);
+        }
+
+        inputStream.close();
+
+        return out.toString();
+    }
+
+    public static boolean isEmpty(String input) {
+        if (input == null) {
+            return false;
+        } else {
+            return input.length() == 0;
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/WebViews.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/WebViews.java
new file mode 100644
index 00000000..f3b15ec6
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/WebViews.java
@@ -0,0 +1,27 @@
+package com.mopub.mobileads.util;
+
+import android.webkit.WebView;
+
+import java.lang.reflect.Method;
+
+public class WebViews {
+    public static void onPause(WebView webView) {
+        try {
+            Method onPause = WebView.class.getDeclaredMethod("onPause");
+            onPause.invoke(webView);
+        } catch (Exception e) {
+            // can't call this before API level 11
+            return;
+        }
+    }
+
+    public static void onResume(WebView webView) {
+        try {
+            Method onResume = WebView.class.getDeclaredMethod("onResume");
+            onResume.invoke(webView);
+        } catch (Exception e) {
+            // can't call this before API level 11
+            return;
+        }
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java
index c810bb30..d3ad9e6b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java
@@ -12,8 +12,6 @@
 import java.util.Map;
 
 import static com.mopub.mobileads.AdFetcher.*;
-import static com.mopub.mobileads.AdTypeTranslator.MRAID_BANNER;
-import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.stub;
@@ -82,17 +80,4 @@ public void fetchAdForUrl_shouldRouteMillennialInterstitialToCustomEventHandling
 
         verify(moPubInterstitialView).loadCustomEvent(eq(paramsMap));
     }
-
-    @Test
-    public void extractCustomEventMraidAdLoadTask_shouldCreateAnEncodedJsonString() throws Exception {
-        String expectedJson = "{\"Mraid-Html-Data\":\"%3Chtml%3E%3C%2Fhtml%3E\"}";
-        AdFetchTask adFetchTask = new AdFetchTask(subject);
-        String htmlData = "<html></html>";
-        response = new TestHttpResponseWithHeaders(200, htmlData);
-        response.addHeader(AD_TYPE_HEADER, "mraid");
-
-        CustomEventAdLoadTask customEventTask = (CustomEventAdLoadTask) adFetchTask.extractCustomEventMraidAdLoadTask(response, MRAID_BANNER);
-        assertThat(customEventTask.mParamsMap.get(CUSTOM_EVENT_NAME_HEADER)).isEqualTo(MRAID_BANNER);
-        assertThat(customEventTask.mParamsMap.get(CUSTOM_EVENT_DATA_HEADER)).isEqualTo(expectedJson);
-    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
new file mode 100644
index 00000000..f91b412f
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
@@ -0,0 +1,162 @@
+package com.mopub.mobileads;
+
+import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
+import org.apache.http.Header;
+import org.apache.http.HttpEntity;
+import org.apache.http.HttpResponse;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static com.mopub.mobileads.AdFetcher.*;
+import static com.mopub.mobileads.AdTypeTranslator.*;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.stub;
+
+@RunWith(SdkTestRunner.class)
+public class AdLoadTaskTest {
+
+    private AdViewController adViewController;
+    private HttpResponse response;
+    private String standardExpectedJson;
+
+    @Before
+    public void setup() {
+        adViewController = mock(AdViewController.class);
+        response = new TestHttpResponseWithHeaders(200, "");
+        standardExpectedJson = "{\"Scrollable\":\"false\",\"Redirect-Url\":\"redirect\",\"Clickthrough-Url\":\"clickthrough\",\"Html-Response-Body\":\"%3Chtml%3E%3C%2Fhtml%3E\"}";
+    }
+
+    @Test
+    public void fromHttpResponse_whenCustomEvent_shouldGetNameAndData() throws Exception {
+        String expectedCustomData = "Custom data";
+        response.addHeader(AD_TYPE_HEADER, "custom");
+        String expectedCustomEventName = "custom event name";
+        response.addHeader(CUSTOM_EVENT_NAME_HEADER, expectedCustomEventName);
+        response.addHeader(CUSTOM_EVENT_DATA_HEADER, expectedCustomData);
+
+        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME_HEADER)).isEqualTo(expectedCustomEventName);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA_HEADER)).isEqualTo(expectedCustomData);
+    }
+
+    @Test
+    public void fromHttpResponse_whenNoCustomEventName_shouldCreateLegacyCustomEventAdLoadTaskWithAHeader() throws Exception {
+        String expectedCustomData = "Custom data";
+        String expectedHeaderValue = "some stuff";
+        response.addHeader(AD_TYPE_HEADER, "custom");
+        response.addHeader(CUSTOM_EVENT_DATA_HEADER, expectedCustomData);
+        response.addHeader(CUSTOM_SELECTOR_HEADER, expectedHeaderValue);
+
+        AdLoadTask.LegacyCustomEventAdLoadTask customEventTask = (AdLoadTask.LegacyCustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
+        Header taskHeader = customEventTask.getHeader();
+        assertThat(taskHeader).isNotNull();
+        assertThat(taskHeader.getName()).isEqualTo(CUSTOM_SELECTOR_HEADER);
+        assertThat(taskHeader.getValue()).isEqualTo(expectedHeaderValue);
+    }
+
+    @Test
+    public void fromHttpResponse_whenMraidBanner_shouldCreateAnEncodedJsonString() throws Exception {
+        String htmlData = "<html></html>";
+        response = new TestHttpResponseWithHeaders(200, htmlData);
+        addExpectedResponseHeaders("mraid");
+
+        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME_HEADER)).isEqualTo(MRAID_BANNER);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA_HEADER)).isEqualTo(standardExpectedJson);
+    }
+
+    @Test
+    public void fromHttpResponse_whenMraidInterstitial_shouldCreateAnEncodedJsonString() throws Exception {
+        String htmlData = "<html></html>";
+        response = new TestHttpResponseWithHeaders(200, htmlData);
+        addExpectedResponseHeaders("mraid");
+        stub(adViewController.getMoPubView()).toReturn(mock(MoPubInterstitial.MoPubInterstitialView.class));
+
+        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME_HEADER)).isEqualTo(MRAID_INTERSTITIAL);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA_HEADER)).isEqualTo(standardExpectedJson);
+    }
+
+    @Test
+    public void fromHttpResponse_whenCustomEventDelegate_shouldConvertAdMobToCustomEvent() throws Exception {
+        String expectedNativeParams = "{\"this is a json\":\"map\",\"whee\":\"look at me\"}";
+        response.addHeader(AD_TYPE_HEADER, "admob_native");
+        response.addHeader(NATIVE_PARAMS_HEADER, expectedNativeParams);
+
+        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME_HEADER)).isEqualTo(ADMOB_BANNER);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA_HEADER)).isEqualTo(expectedNativeParams);
+    }
+
+    @Test
+    public void fromHttpResponse_whenHtmlBanner_shouldConvertToCustomEventBanner() throws Exception {
+        String htmlData = "<html></html>";
+        response = new TestHttpResponseWithHeaders(200, htmlData);
+        addExpectedResponseHeaders("html");
+
+        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME_HEADER)).isEqualTo(HTML_BANNER);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA_HEADER)).isEqualTo(standardExpectedJson);
+    }
+
+    @Test
+    public void fromHttpResponse_whenHtmlInterstitial_shouldConvertToCustomEventInterstitial() throws Exception {
+        String htmlData = "<html></html>";
+        response = new TestHttpResponseWithHeaders(200, htmlData);
+        addExpectedResponseHeaders("html");
+        stub(adViewController.getMoPubView()).toReturn(mock(MoPubInterstitial.MoPubInterstitialView.class));
+
+        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME_HEADER)).isEqualTo(HTML_INTERSTITIAL);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA_HEADER)).isEqualTo(standardExpectedJson);
+    }
+
+    @Test
+    public void fromHttpResponse_whenEntityIsNull_shouldCreateMinimumJsonString() throws Exception {
+        String htmlData = "<html></html>";
+        String expectedJson = "{\"Scrollable\":\"true\",\"Html-Response-Body\":\"\"}";
+        response = new TestHttpResponseWithHeaders(200, htmlData) {
+            @Override
+            public HttpEntity getEntity() {
+                return null;
+            }
+        };
+        response.addHeader(AD_TYPE_HEADER, "html");
+
+        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME_HEADER)).isEqualTo(HTML_BANNER);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA_HEADER)).isEqualTo(expectedJson);
+    }
+
+    @Test
+    public void fromHttpResponse_whenScrollableIsOne_shouldBeReflectedInJson() throws Exception {
+        String expectedJson = "{\"Scrollable\":\"true\",\"Html-Response-Body\":\"\"}";
+        response.addHeader(SCROLLABLE_HEADER, "1");
+        response.addHeader(AD_TYPE_HEADER, "html");
+
+
+        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME_HEADER)).isEqualTo(HTML_BANNER);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA_HEADER)).isEqualTo(expectedJson);
+    }
+
+    @Test
+    public void fromHttpResponse_whenScrollableIsNotSpecified_shouldDefaultToTrueInJson() throws Exception {
+        String expectedJson = "{\"Scrollable\":\"true\",\"Html-Response-Body\":\"\"}";
+        response.addHeader(AD_TYPE_HEADER, "html");
+
+        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME_HEADER)).isEqualTo(HTML_BANNER);
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA_HEADER)).isEqualTo(expectedJson);
+    }
+
+    private void addExpectedResponseHeaders(String adType) {
+        response.addHeader(SCROLLABLE_HEADER, "0");
+        response.addHeader(AD_TYPE_HEADER, adType);
+        response.addHeader(REDIRECT_URL_HEADER, "redirect");
+        response.addHeader(CLICKTHROUGH_URL_HEADER, "clickthrough");
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
index c22d7207..07a8caa5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
@@ -6,62 +6,81 @@
 import org.junit.runner.RunWith;
 
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
 
 @RunWith(SdkTestRunner.class)
 public class AdTypeTranslatorTest {
     private AdTypeTranslator subject;
     private String customEventName;
+    private MoPubView moPubView;
+    private MoPubInterstitial.MoPubInterstitialView moPubInterstitialView;
 
     @Before
     public void setUp() throws Exception {
         subject = new AdTypeTranslator();
+        moPubView = mock(MoPubView.class);
+        moPubInterstitialView = mock(MoPubInterstitial.MoPubInterstitialView.class);
     }
 
     @Test
     public void getAdMobBanner() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType("admob_native", null);
+        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubView, "admob_native", null);
 
         assertThat(customEventName).isEqualTo(AdTypeTranslator.ADMOB_BANNER);
     }
 
     @Test
     public void getAdMobInterstitial() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType("interstitial", "admob_full");
+        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubInterstitialView, "interstitial", "admob_full");
 
         assertThat(customEventName).isEqualTo(AdTypeTranslator.ADMOB_INTERSTITIAL);
     }
 
     @Test
     public void getMillennialBanner() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType("millennial_native", null);
+        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubView, "millennial_native", null);
 
         assertThat(customEventName).isEqualTo(AdTypeTranslator.MILLENNIAL_BANNER);
     }
 
     @Test
     public void getMillennnialInterstitial() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType("interstitial", "millennial_full");
+        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubInterstitialView, "interstitial", "millennial_full");
 
         assertThat(customEventName).isEqualTo(AdTypeTranslator.MILLENNIAL_INTERSTITIAL);
     }
 
     @Test
     public void getMraidBanner() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType("mraid", null);
+        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubView, "mraid", null);
 
         assertThat(customEventName).isEqualTo(AdTypeTranslator.MRAID_BANNER);
     }
 
     @Test
     public void getMraidInterstitial() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType("interstitial", "mraid");
+        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubInterstitialView, "mraid", null);
 
         assertThat(customEventName).isEqualTo(AdTypeTranslator.MRAID_INTERSTITIAL);
     }
 
+    @Test
+    public void getHtmlBanner() throws Exception {
+        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubView, "html", null);
+
+        assertThat(customEventName).isEqualTo(AdTypeTranslator.HTML_BANNER);
+    }
+
+    @Test
+    public void getHtmlInterstitial() throws Exception {
+        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubInterstitialView, "html", null);
+
+        assertThat(customEventName).isEqualTo(AdTypeTranslator.HTML_INTERSTITIAL);
+    }
+
     @Test
     public void getCustomEventNameForAdType_whenSendingNonsense_shouldReturnNull() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType(null, null);
+        customEventName = AdTypeTranslator.getCustomEventNameForAdType(null, null, null);
 
         assertThat(customEventName).isNull();
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdUrlGeneratorTest.java
index a753e069..b602765a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdUrlGeneratorTest.java
@@ -20,6 +20,7 @@
 import static android.net.ConnectivityManager.*;
 import static android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN;
 import static com.mopub.mobileads.AdUrlGenerator.MoPubNetworkType;
+import static com.mopub.mobileads.util.Strings.isEmpty;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.application;
 import static org.robolectric.Robolectric.shadowOf;
@@ -243,19 +244,19 @@ public AdUrlBuilder(String expectedUdidSha) {
         public String build() {
             return "http://ads.mopub.com/m/ad" +
                     "?v=6" +
-                    "&id=" + adUnitId +
+                    paramIfNotEmpty("id", adUnitId) +
                     "&nv=" + MoPub.SDK_VERSION +
                     "&udid=sha%3A" + expectedUdidSha +
-                    (query.isEmpty() ? "" : "&q=" + query )+
-                    (latLon.isEmpty() ? "" : "&ll=" + latLon + "&lla=" + locationAccuracy )+
+                    paramIfNotEmpty("q", query) +
+                    (isEmpty(latLon) ? "" : "&ll=" + latLon + "&lla=" + locationAccuracy) +
                     "&z=-0700" +
                     "&o=u" +
                     "&sc_a=1.0" +
                     "&mr=1" +
-                    "&mcc=" + mcc +
-                    "&mnc=" + mnc +
-                    "&iso=" + countryIso +
-                    "&cn=" + carrierName +
+                    paramIfNotEmpty("mcc", mcc) +
+                    paramIfNotEmpty("mnc", mnc) +
+                    paramIfNotEmpty("iso", countryIso) +
+                    paramIfNotEmpty("cn", carrierName) +
                     "&ct=" + networkType +
                     "&av=1.0";
         }
@@ -300,5 +301,13 @@ public AdUrlBuilder withNetworkType(MoPubNetworkType networkType) {
             this.networkType = networkType;
             return this;
         }
+
+        private String paramIfNotEmpty(String key, String value) {
+            if (isEmpty(value)) {
+                return "";
+            } else {
+                return "&" + key + "=" + value;
+            }
+        }
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
index ce230be0..dbd049bc 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
@@ -3,10 +3,14 @@
 import android.app.Activity;
 import android.content.Context;
 import android.net.ConnectivityManager;
-import com.mopub.mobileads.factories.AdFetcherFactory;
+import android.view.Gravity;
+import android.view.View;
+import android.webkit.WebView;
+import android.widget.FrameLayout;
+import com.mopub.mobileads.factories.HtmlBannerWebViewFactory;
+import com.mopub.mobileads.factories.HtmlInterstitialWebViewFactory;
 import com.mopub.mobileads.factories.HttpClientFactory;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
+import com.mopub.mobileads.test.support.*;
 import org.apache.http.HttpRequest;
 import org.apache.http.HttpResponse;
 import org.apache.http.client.HttpClient;
@@ -14,16 +18,23 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
 import org.robolectric.Robolectric;
 import org.robolectric.tester.org.apache.http.FakeHttpLayer;
 
 import java.lang.reflect.InvocationTargetException;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
+import static com.mopub.mobileads.MoPubErrorCode.INTERNAL_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NO_FILL;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.fest.assertions.api.Fail.fail;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
 import static org.robolectric.Robolectric.application;
 import static org.robolectric.Robolectric.shadowOf;
@@ -32,26 +43,33 @@
 public class AdViewControllerTest {
     private AdViewController subject;
     private MoPubView moPubView;
-    private AdFetcher adFetcher;
     private HttpResponse response;
     private HttpClient httpClient;
+    private AdFetcher adFetcher;
 
     @Before
     public void setup() {
         moPubView = mock(MoPubView.class);
-        adFetcher = AdFetcherFactory.create(null, null);
         httpClient = HttpClientFactory.create();
         Activity context = new Activity();
         shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
         subject = new AdViewController(context, moPubView);
         response = new TestHttpResponseWithHeaders(200, "I ain't got no-body");
+        adFetcher = TestAdFetcherFactory.getSingletonMock();
+    }
+
+    @Test
+    public void initialization_shouldInitializeWebViewFactories() throws Exception {
+        new HtmlBannerWebViewFactory().internalCreate(null, false, "", "");
+        new HtmlInterstitialWebViewFactory().internalCreate(null, false, "", "");
+
+        // pass
     }
 
     @Test
     public void configureUsingHttpResponse_shouldSetFields() throws Exception {
         response.addHeader("X-Launchpage", "redirect url");
         response.addHeader("X-Clickthrough", "clickthrough url");
-        response.addHeader("X-Scrollable", "0");
         response.addHeader("X-Width", "320  ");
         response.addHeader("X-Height", "  50");
         response.addHeader("X-Refreshtime", "70");
@@ -60,26 +78,11 @@ public void configureUsingHttpResponse_shouldSetFields() throws Exception {
 
         assertThat(subject.getRedirectUrl()).isEqualTo("redirect url");
         assertThat(subject.getClickthroughUrl()).isEqualTo("clickthrough url");
-        assertThat(Robolectric.shadowOf(subject.getAdWebView()).getOnTouchListener()).isNotNull();
         assertThat(subject.getAdWidth()).isEqualTo(320);
         assertThat(subject.getAdHeight()).isEqualTo(50);
         assertThat(subject.getRefreshTimeMilliseconds()).isEqualTo(70000);
     }
 
-    @Test
-    public void configureUsingHttpResponse_shouldHaveNullTouchListenerWhenScrollableIsOne() throws Exception {
-        response.addHeader("X-Scrollable", "1");
-
-        subject.configureUsingHttpResponse(response);
-        assertThat(Robolectric.shadowOf(subject.getAdWebView()).getOnTouchListener()).isNull();
-    }
-
-    @Test
-    public void configureUsingHttpResponse_shouldHaveNullTouchListenerWhenScrollableNotSet() throws Exception {
-        subject.configureUsingHttpResponse(response);
-        assertThat(Robolectric.shadowOf(subject.getAdWebView()).getOnTouchListener()).isNull();
-    }
-
     @Test
     public void configureUsingHttpResponse_shouldSetRefreshTimeToMinimumOf10Seconds() throws Exception {
         response.addHeader("X-Refreshtime", "0");
@@ -101,25 +104,6 @@ public void configureUsingHttpResponse_whenRefreshTimeNotSpecified_shouldResetRe
         assertThat(subject.getRefreshTimeMilliseconds()).isEqualTo(0);
     }
 
-    @Test
-    public void getFailUrl_whenFailUrlHasBeenProvided_shouldLoadTheUrl() throws Exception {
-        response.addHeader("X-Failurl", "fail url");
-        subject.configureUsingHttpResponse(response);
-
-        subject.loadFailUrl(MoPubErrorCode.UNSPECIFIED);
-
-        verify(adFetcher).fetchAdForUrl(eq("fail url"));
-    }
-
-    @Test
-    public void getFailUrl_whenFailUrlIsNull_shouldTellMoPubViewThatAdFailed() throws Exception {
-        subject.configureUsingHttpResponse(response);
-
-        subject.loadFailUrl(MoPubErrorCode.UNSPECIFIED);
-
-        verify(moPubView).adFailed(eq(MoPubErrorCode.NO_FILL));
-    }
-
     @Test
     public void scheduleRefreshTimerIfEnabled_shouldCancelOldRefreshAndScheduleANewOne() throws Exception {
         response.addHeader("X-Refreshtime", "30");
@@ -167,7 +151,7 @@ public void scheduleRefreshTimer_shouldNotScheduleRefreshIfRefreshTimeIsZero() t
     public void trackImpression_shouldHttpGetTheImpressionUrl() throws Exception {
         response.addHeader("X-Imptracker", "http://trackingUrl");
         subject.configureUsingHttpResponse(response);
-        String expectedUserAgent = subject.getAdWebView().getSettings().getUserAgentString();
+        String expectedUserAgent = new WebView(subject.getContext()).getSettings().getUserAgentString();
         FakeHttpLayer fakeHttpLayer = Robolectric.getFakeHttpLayer();
         fakeHttpLayer.addPendingHttpResponse(200, "");
 
@@ -205,14 +189,14 @@ public void trackImpression_shouldDoNothingIfImpressionUrlNotSpecified() throws
     public void registerClick_shouldHttpGetTheClickthroughUrl() throws Exception {
         response.addHeader("X-Clickthrough", "http://clickUrl");
         subject.configureUsingHttpResponse(response);
-        String expectedUserAgent = subject.getAdWebView().getSettings().getUserAgentString();
+        String expectedUserAgent = new WebView(subject.getContext()).getSettings().getUserAgentString();
         FakeHttpLayer fakeHttpLayer = Robolectric.getFakeHttpLayer();
         fakeHttpLayer.addPendingHttpResponse(200, "");
 
         assertThat(expectedUserAgent).isNotNull();
 
         subject.registerClick();
-        Thread.sleep(50); // does this make the test flaky?
+        Thread.sleep(200); // does this make the test flaky?
 
         HttpRequest request = fakeHttpLayer.getLastSentHttpRequestInfo().getHttpRequest();
         assertThat(request.getFirstHeader("User-Agent").getValue()).isEqualTo(expectedUserAgent);
@@ -243,17 +227,12 @@ public void trackImpression_shouldDoNothingIfClickthroughUrlNotSpecified() throw
     public void generateAdUrl_shouldIncludeMinFields() throws Exception {
         String expectedAdUrl = "http://ads.mopub.com/m/ad" +
                 "?v=6" +
-                "&id=" +
                 "&nv=" + MoPub.SDK_VERSION +
                 "&udid=sha%3A" +
                 "&z=-0700" +
                 "&o=u" +
                 "&sc_a=1.0" +
                 "&mr=1" +
-                "&mcc=" +
-                "&mnc=" +
-                "&iso=" +
-                "&cn=" +
                 "&ct=3" +
                 "&av=1.0";
 
@@ -290,14 +269,164 @@ public void loadAd_shouldScheduleRefreshIfNoNetworkConnectivity() throws Excepti
     }
 
     @Test
-    public void loadUrl_shouldAcceptNullParameter() throws Exception {
-        subject.getAdWebView().loadUrl(null);
+    public void loadNonJavascript_shouldFetchAd() throws Exception {
+        String url = "http://www.guy.com";
+        subject.loadNonJavascript(url);
+
+        verify(adFetcher).fetchAdForUrl(eq(url));
+    }
+
+    @Test
+    public void loadNonJavascript_whenAlreadyLoading_shouldNotFetchAd() throws Exception {
+        String url = "http://www.guy.com";
+        subject.loadNonJavascript(url);
+        reset(adFetcher);
+        subject.loadNonJavascript(url);
+
+        verify(adFetcher, never()).fetchAdForUrl(anyString());
+    }
+
+    @Test
+    public void loadNonJavascript_shouldClearTheFailUrl() throws Exception {
+        subject.setFailUrl("blarg:");
+        subject.loadNonJavascript("http://www.goodness.com");
+        reset(adFetcher);
+        subject.loadFailUrl(null);
+
+        verify(adFetcher, never()).fetchAdForUrl(anyString());
+        verify(moPubView).adFailed(eq(NO_FILL));
+    }
+
+    @Test
+    public void loadNonJavascript_shouldAcceptNullParameter() throws Exception {
+        subject.loadNonJavascript(null);
         // pass
     }
 
+    @Test
+    public void reload_shouldReuseOldUrl() throws Exception {
+        String url = "http://www.guy.com";
+        subject.loadNonJavascript(url);
+        subject.setNotLoading();
+        reset(adFetcher);
+        subject.reload();
+
+        verify(adFetcher).fetchAdForUrl(eq(url));
+    }
+
+    @Test
+    public void loadFailUrl_shouldLoadFailUrl() throws Exception {
+        String failUrl = "http://www.bad.man";
+        subject.setFailUrl(failUrl);
+        subject.loadFailUrl(INTERNAL_ERROR);
+
+        verify(adFetcher).fetchAdForUrl(eq(failUrl));
+        verify(moPubView, never()).adFailed(any(MoPubErrorCode.class));
+    }
+
     @Test
     public void loadFailUrl_shouldAcceptNullErrorCode() throws Exception {
         subject.loadFailUrl(null);
         // pass
     }
+
+    @Test
+    public void loadFailUrl_whenFailUrlIsNull_shouldCallAdDidFail() throws Exception {
+        subject.setFailUrl(null);
+        subject.loadFailUrl(INTERNAL_ERROR);
+
+        verify(moPubView).adFailed(eq(NO_FILL));
+        verify(adFetcher, never()).fetchAdForUrl(anyString());
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void cleanup_shouldCleanupHtmlBannerWebViewFactory() throws Exception {
+        subject.cleanup();
+
+        new HtmlBannerWebViewFactory().internalCreate(null, false, "", "");
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void cleanup_shouldCleanupHtmlInterstitialWebViewFactory() throws Exception {
+        subject.cleanup();
+
+        new HtmlInterstitialWebViewFactory().internalCreate(null, false, "", "");
+    }
+
+    @Test
+    public void setAdContentView_whenHonorServerDimensionsAndHasDimensions_shouldSizeAndCenterView() throws Exception {
+        response.addHeader("X-Width", "320");
+        response.addHeader("X-Height", "50");
+        View view = mock(View.class);
+        AdViewController.setShouldHonorServerDimensions(view);
+        subject.configureUsingHttpResponse(response);
+        subject.setAdContentView(view);
+
+        verify(moPubView).removeAllViews();
+        ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
+        verify(moPubView).addView(eq(view), layoutParamsCaptor.capture());
+        FrameLayout.LayoutParams layoutParams = layoutParamsCaptor.getValue();
+
+        assertThat(layoutParams.width).isEqualTo(320);
+        assertThat(layoutParams.height).isEqualTo(50);
+        assertThat(layoutParams.gravity).isEqualTo(Gravity.CENTER);
+    }
+
+    @Test
+    public void setAdContentView_whenHonorServerDimensionsAndDoesntHaveDimensions_shouldWrapAndCenterView() throws Exception {
+        View view = mock(View.class);
+        AdViewController.setShouldHonorServerDimensions(view);
+        subject.configureUsingHttpResponse(response);
+        subject.setAdContentView(view);
+
+        verify(moPubView).removeAllViews();
+        ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
+        verify(moPubView).addView(eq(view), layoutParamsCaptor.capture());
+        FrameLayout.LayoutParams layoutParams = layoutParamsCaptor.getValue();
+
+        assertThat(layoutParams.width).isEqualTo(FrameLayout.LayoutParams.WRAP_CONTENT);
+        assertThat(layoutParams.height).isEqualTo(FrameLayout.LayoutParams.WRAP_CONTENT);
+        assertThat(layoutParams.gravity).isEqualTo(Gravity.CENTER);
+    }
+
+    @Test
+    public void setAdContentView_whenNotServerDimensions_shouldWrapAndCenterView() throws Exception {
+        response.addHeader("X-Width", "320");
+        response.addHeader("X-Height", "50");
+        subject.configureUsingHttpResponse(response);
+        View view = mock(View.class);
+        subject.setAdContentView(view);
+
+        verify(moPubView).removeAllViews();
+        ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
+        verify(moPubView).addView(eq(view), layoutParamsCaptor.capture());
+        FrameLayout.LayoutParams layoutParams = layoutParamsCaptor.getValue();
+
+        assertThat(layoutParams.width).isEqualTo(FrameLayout.LayoutParams.WRAP_CONTENT);
+        assertThat(layoutParams.height).isEqualTo(FrameLayout.LayoutParams.WRAP_CONTENT);
+        assertThat(layoutParams.gravity).isEqualTo(Gravity.CENTER);
+    }
+
+    @Test
+    public void cleanup_whenOtherAdViewControllersAreActive_shouldNotDisableTheWebViewPool() throws Exception {
+        AdViewController anotherAdViewController = new AdViewController(new Activity(), moPubView);
+        subject.cleanup();
+
+        assertThat(TestHtmlBannerWebViewFactory.getWebViewPool().getNextHtmlWebView(null, true, "", "")).isNotNull();
+        assertThat(TestHtmlInterstitialWebViewFactory.getWebViewPool().getNextHtmlWebView(null, true, "", "")).isNotNull();
+
+        anotherAdViewController.cleanup();
+        try {
+            TestHtmlBannerWebViewFactory.getWebViewPool().getNextHtmlWebView(null, true, "", "");
+            fail("Expected getNextHtmlWebView to fail");
+        } catch(NullPointerException e) {
+            // success!
+        }
+        try {
+            TestHtmlInterstitialWebViewFactory.getWebViewPool().getNextHtmlWebView(null, true, "", "");
+            fail("Expected getNextHtmlWebView to fail");
+        } catch(NullPointerException e) {
+            // success!
+        }
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdWebViewTest.java
deleted file mode 100644
index bb1d1b7a..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdWebViewTest.java
+++ /dev/null
@@ -1,128 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.webkit.WebViewClient;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.shadows.ShadowWebView;
-
-import static com.mopub.mobileads.MoPubErrorCode.INTERNAL_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.NO_FILL;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class AdWebViewTest {
-
-    private AdViewController adWebViewController;
-    private AdWebView subject;
-
-    @Before
-    public void setup() {
-        adWebViewController = mock(AdViewController.class);
-        subject = new AdWebView(adWebViewController, new Activity());
-    }
-
-    @Test
-    public void shouldSetupWebViewClient() throws Exception {
-        WebViewClient webViewClient = shadowOf(subject).getWebViewClient();
-        assertThat(webViewClient).isNotNull();
-        assertThat(webViewClient).isInstanceOf(AdWebViewClient.class);
-    }
-
-    @Test
-    public void loadUrl_shouldFetchAd() throws Exception {
-        String url = "http://www.guy.com";
-        subject.loadUrl(url);
-
-        verify(adWebViewController).fetchAd(eq(url));
-    }
-
-    @Test
-    public void loadUrl_whenUrlIsJavascript_shouldCallSuperLoadUrl() throws Exception {
-        String javascriptUrl = "javascript:function() {alert(\"guy\")};";
-        subject.loadUrl(javascriptUrl);
-
-        assertThat(shadowOf(subject).getLastLoadedUrl()).isEqualTo(javascriptUrl);
-
-        verify(adWebViewController, never()).fetchAd(anyString());
-    }
-
-    @Test
-    public void loadUrl_whenAlreadyLoading_shouldNotFetchAd() throws Exception {
-        String url = "http://www.guy.com";
-        subject.loadUrl(url);
-        reset(adWebViewController);
-
-        subject.loadUrl(url);
-
-        verify(adWebViewController, never()).fetchAd(anyString());
-    }
-
-    @Test
-    public void loadUrl_shouldClearTheFailUrl() throws Exception {
-        subject.setFailUrl("blarg:");
-        subject.loadUrl("http://www.goodness.com");
-        reset(adWebViewController);
-
-        subject.loadFailUrl(null);
-
-        verify(adWebViewController, never()).fetchAd(anyString());
-        verify(adWebViewController).adDidFail(NO_FILL);
-    }
-
-
-    @Test
-    public void loadUrl_shouldAcceptNullParameter() throws Exception {
-        subject.loadUrl(null);
-        // pass
-    }
-
-    @Test
-    public void reload_shouldReuseOldUrl() throws Exception {
-        String url = "http://www.guy.com";
-        subject.loadUrl(url);
-        subject.setNotLoading();
-        reset(adWebViewController);
-
-        subject.reload();
-
-        verify(adWebViewController).fetchAd(eq(url));
-    }
-
-    @Test
-    public void loadFailUrl_shouldLoadFailUrl() throws Exception {
-        String failUrl = "http://www.bad.man";
-        subject.setFailUrl(failUrl);
-        subject.loadFailUrl(INTERNAL_ERROR);
-
-        verify(adWebViewController).fetchAd(eq(failUrl));
-        verify(adWebViewController, never()).adDidFail(any(MoPubErrorCode.class));
-    }
-
-    @Test
-    public void loadFailUrl_shouldAcceptNullErrorCode() throws Exception {
-        subject.loadFailUrl(null);
-        // pass
-    }
-
-    @Test
-    public void setWebViewScrollingEnabled_shouldSetUpTouchListener() throws Exception {
-        ShadowWebView shadowSubject = shadowOf(subject);
-
-        subject.setWebViewScrollingEnabled(false);
-        assertThat(shadowSubject.getOnTouchListener()).isNotNull();
-
-        subject.setWebViewScrollingEnabled(true);
-        assertThat(shadowSubject.getOnTouchListener()).isNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
new file mode 100644
index 00000000..f58c4d5a
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
@@ -0,0 +1,60 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import com.mopub.mobileads.test.support.SdkTestRunner;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.shadows.ShadowWebView;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.robolectric.Robolectric.shadowOf;
+
+@RunWith(SdkTestRunner.class)
+public class BaseHtmlWebViewTest {
+
+    private BaseHtmlWebView subject;
+
+    @Before
+    public void setUp() throws Exception {
+        subject = new BaseHtmlWebView(new Activity());
+    }
+
+    @Test
+    public void init_shouldSetWebViewScrollability() throws Exception {
+        ShadowWebView shadowSubject = shadowOf(subject);
+
+        subject.init(false);
+        assertThat(shadowSubject.getOnTouchListener()).isNotNull();
+
+        subject.init(true);
+        assertThat(shadowSubject.getOnTouchListener()).isNull();
+    }
+
+    @Test
+    public void loadUrl_shouldAcceptNullParameter() throws Exception {
+        subject.loadUrl(null);
+        // pass
+    }
+
+    @Test
+    public void loadUrl_whenUrlIsJavascript_shouldCallSuperLoadUrl() throws Exception {
+        String javascriptUrl = "javascript:function() {alert(\"guy\")};";
+        subject.loadUrl(javascriptUrl);
+
+        assertThat(shadowOf(subject).getLastLoadedUrl()).isEqualTo(javascriptUrl);
+    }
+
+    @Test
+    public void loadHtmlResponse_shouldCallLoadDataWithBaseURL() throws Exception {
+        String htmlResponse = "some random html response";
+        subject.loadHtmlResponse(htmlResponse);
+
+        ShadowWebView.LoadDataWithBaseURL lastLoadData = shadowOf(subject).getLastLoadDataWithBaseURL();
+        assertThat(lastLoadData.baseUrl).isEqualTo("http://ads.mopub.com/");
+        assertThat(lastLoadData.data).isEqualTo(htmlResponse);
+        assertThat(lastLoadData.mimeType).isEqualTo("text/html");
+        assertThat(lastLoadData.encoding).isEqualTo("utf-8");
+        assertThat(lastLoadData.historyUrl).isNull();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
similarity index 84%
rename from mopub-sdk/src/test/java/com/mopub/mobileads/BaseActivityTest.java
rename to mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
index 144e869a..aa10b7a5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
@@ -14,9 +14,8 @@
 import org.robolectric.Robolectric;
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
 
-import static com.mopub.mobileads.BaseActivity.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.BaseActivity.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.BaseActivity.HTML_INTERSTITIAL_INTENT_FILTER;
+import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.mobileads.BaseInterstitialActivity.HTML_INTERSTITIAL_INTENT_FILTER;
 import static com.mopub.mobileads.resource.Drawables.INTERSTITIAL_CLOSE_BUTTON_NORMAL;
 import static com.mopub.mobileads.resource.Drawables.INTERSTITIAL_CLOSE_BUTTON_PRESSED;
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -28,10 +27,10 @@
 import static org.robolectric.Robolectric.shadowOf;
 
 @Ignore
-public class BaseActivityTest {
+public class BaseInterstitialActivityTest {
     public static final String EXPECTED_SOURCE = "expected source";
 
-    protected BaseActivity subject;
+    protected BaseInterstitialActivity subject;
     protected BroadcastReceiver broadcastReceiver;
 
     public void setup() {
@@ -54,16 +53,6 @@ public void onCreate_shouldCreateView() throws Exception {
         assertThat(adView).isNotNull();
     }
 
-    @Test
-    public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
-        Intent expectedIntent = new Intent(ACTION_INTERSTITIAL_SHOW);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, HTML_INTERSTITIAL_INTENT_FILTER);
-
-        subject.onCreate(null);
-
-        verify(broadcastReceiver).onReceive(eq(subject), eq(expectedIntent));
-    }
-
     @Test
     public void onCreate_shouldShowInterstitialCloseButton() throws Exception {
         subject.onCreate(null);
@@ -127,7 +116,7 @@ protected ImageButton getCloseButton() {
         return (ImageButton) getContentView(subject).getChildAt(1);
     }
 
-    protected RelativeLayout getContentView(BaseActivity subject) {
+    protected RelativeLayout getContentView(BaseInterstitialActivity subject) {
         return (RelativeLayout) ((ViewGroup) subject.findViewById(android.R.id.content)).getChildAt(0);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventAdLoadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventAdLoadTaskTest.java
new file mode 100644
index 00000000..1cc6d53c
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventAdLoadTaskTest.java
@@ -0,0 +1,78 @@
+package com.mopub.mobileads;
+
+import com.mopub.mobileads.test.support.SdkTestRunner;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+public class CustomEventAdLoadTaskTest {
+
+    private AdViewController adViewController;
+    private AdLoadTask.CustomEventAdLoadTask subject;
+    private Map<String, String> paramsMap;
+    private MoPubView moPubView;
+
+    @Before
+    public void setup() {
+        moPubView = mock(MoPubView.class);
+        adViewController = mock(AdViewController.class);
+        stub(adViewController.getMoPubView()).toReturn(moPubView);
+        paramsMap = new HashMap<String, String>();
+        subject = new AdLoadTask.CustomEventAdLoadTask(adViewController, paramsMap);
+    }
+
+    @Test
+    public void execute_shouldCallLoadCustomEvent() throws Exception {
+        subject.execute();
+
+        verify(adViewController).setNotLoading();
+        verify(moPubView).loadCustomEvent(eq(paramsMap));
+    }
+
+    @Test
+    public void execute_whenAdViewControllerIsNull_shouldDoNothing() throws Exception {
+        subject = new AdLoadTask.CustomEventAdLoadTask(null, paramsMap);
+
+        subject.execute();
+        // pass
+    }
+
+    @Test
+    public void execute_whenAdViewControllerIsDestroyed_shouldDoNothing() throws Exception {
+        stub(adViewController.isDestroyed()).toReturn(true);
+
+        subject.execute();
+
+        verify(adViewController, never()).setNotLoading();
+        verify(moPubView, never()).loadCustomEvent(eq(paramsMap));
+    }
+
+    @Test
+    public void execute_whenParamsMapIsNull_shouldLoadNullParamsMap() throws Exception {
+        subject = new AdLoadTask.CustomEventAdLoadTask(adViewController, null);
+
+        subject.execute();
+
+        verify(adViewController).setNotLoading();
+        verify(moPubView).loadCustomEvent((Map<String, String>) eq(null));
+    }
+
+    @Test
+    public void execute_afterCleanup_shouldLoadNullParamsMap() throws Exception {
+        subject.cleanup();
+        subject.execute();
+
+        verify(adViewController).setNotLoading();
+        verify(moPubView).loadCustomEvent((Map<String, String>) eq(null));
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
index 5df14731..ebe6a09a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
@@ -14,7 +14,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import static com.mopub.mobileads.AdFetcher.MRAID_HTML_DATA;
+import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_TIMEOUT;
@@ -24,6 +24,7 @@
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.*;
 
+
 @RunWith(SdkTestRunner.class)
 public class CustomEventBannerAdapterTest {
     private CustomEventBannerAdapter subject;
@@ -135,6 +136,16 @@ public void onBannerLoaded_shouldSignalMoPubView() throws Exception {
         verify(moPubView).trackNativeImpression();
     }
 
+    @Test
+    public void onBannerLoaded_whenViewIsHtmlBannerWebView_shouldNotTrackImpression() throws Exception {
+        View mockHtmlBannerWebView = mock(HtmlBannerWebView.class);
+        subject.onBannerLoaded(mockHtmlBannerWebView);
+
+        verify(moPubView).nativeAdLoaded();
+        verify(moPubView).setAdContentView(eq(mockHtmlBannerWebView));
+        verify(moPubView, never()).trackNativeImpression();
+    }
+
     @Test
     public void onBannerFailed_shouldLoadFailUrl() throws Exception {
         subject.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
@@ -225,8 +236,8 @@ public void invalidate_shouldCauseBannerListenerMethodsToDoNothing() throws Exce
     @Test
     public void init_whenPassedHtmlData_shouldPutItInLocalExtras() throws Exception {
         String expectedHtmlData = "expected html data";
-        expectedServerExtras.put(MRAID_HTML_DATA, expectedHtmlData);
-        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, "{\"Mraid-Html-Data\":\"expected html data\"}");
+        expectedServerExtras.put(HTML_RESPONSE_BODY_KEY, expectedHtmlData);
+        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, "{\"Html-Response-Body\":\"expected html data\"}");
         subject.loadAd();
 
         verify(banner).loadBanner(
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
index 6a5ba424..050d3c5e 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
@@ -18,12 +18,14 @@
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyBoolean;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
 
+
 @RunWith(SdkTestRunner.class)
 public class CustomEventInterstitialAdapterTest {
     private CustomEventInterstitialAdapter subject;
@@ -158,7 +160,7 @@ public void onInterstitialFailed_whenErrorCodeIsNull_shouldPassUnspecifiedError(
     public void onInterstitialShown_shouldSignalAdapterListener() throws Exception {
         subject.onInterstitialShown();
 
-        verify(interstitialAdapterListener).onCustomEventInterstitialShown();
+        verify(interstitialAdapterListener).onCustomEventInterstitialShown(true);
     }
 
     @Test
@@ -218,8 +220,19 @@ public void invalidate_shouldCauseInterstitialListenerMethodsToDoNothing() throw
 
         verify(interstitialAdapterListener, never()).onCustomEventInterstitialLoaded();
         verify(interstitialAdapterListener, never()).onCustomEventInterstitialFailed(any(MoPubErrorCode.class));
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialShown();
+        verify(interstitialAdapterListener, never()).onCustomEventInterstitialShown(anyBoolean());
         verify(interstitialAdapterListener, never()).onCustomEventInterstitialClicked();
         verify(interstitialAdapterListener, never()).onCustomEventInterstitialDismissed();
     }
+
+    @Test
+    public void shouldNotTrackImpressionsWhenHoldingAnHtmlInterstitial() throws Exception {
+        subject.onInterstitialShown();
+        verify(interstitialAdapterListener).onCustomEventInterstitialShown(eq(true));
+
+        subject.setCustomEventInterstitial(mock(HtmlInterstitial.class));
+
+        subject.onInterstitialShown();
+        verify(interstitialAdapterListener).onCustomEventInterstitialShown(eq(false));
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
new file mode 100644
index 00000000..d6fda46c
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
@@ -0,0 +1,124 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.support.v4.content.LocalBroadcastManager;
+import com.mopub.mobileads.test.support.SdkTestRunner;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.shadows.ShadowLocalBroadcastManager;
+
+import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+public class EventForwardingBroadcastReceiverTest {
+
+    private CustomEventInterstitialListener customEventInterstitialListener;
+    private EventForwardingBroadcastReceiver subject;
+    private Activity context;
+
+    @Before
+    public void setUp() throws Exception {
+        customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
+        subject = new EventForwardingBroadcastReceiver(customEventInterstitialListener);
+        context = new Activity();
+    }
+
+    @Test
+    public void onReceive_whenActionInterstitialFail_shouldNotifyListener() throws Exception {
+        Intent intent = new Intent(ACTION_INTERSTITIAL_CLICK);
+
+        subject.onReceive(context, intent);
+
+        verify(customEventInterstitialListener).onInterstitialClicked();
+    }
+
+    @Test
+    public void onReceive_whenActionInterstitialShow_shouldNotifyListener() throws Exception {
+        Intent intent = new Intent(ACTION_INTERSTITIAL_FAIL);
+
+        subject.onReceive(context, intent);
+
+        verify(customEventInterstitialListener).onInterstitialFailed(eq(NETWORK_INVALID_STATE));
+    }
+
+
+    @Test
+    public void onReceive_whenActionInterstitialDismiss_shouldNotifyListener() throws Exception {
+        Intent intent = new Intent(ACTION_INTERSTITIAL_DISMISS);
+
+        subject.onReceive(context, intent);
+
+        verify(customEventInterstitialListener).onInterstitialDismissed();
+    }
+
+    @Test
+    public void onReceive_whenActionInterstitialClick_shouldNotifyListener() throws Exception {
+        Intent intent = new Intent(ACTION_INTERSTITIAL_CLICK);
+
+        subject.onReceive(context, intent);
+
+        verify(customEventInterstitialListener).onInterstitialClicked();
+    }
+
+    @Test
+    public void onReceiver_whenCustomEventInterstitialListenerIsNull_shouldNotBlowUp() throws Exception {
+        Intent intent = new Intent(ACTION_INTERSTITIAL_SHOW);
+
+        subject = new EventForwardingBroadcastReceiver(null);
+        subject.onReceive(context, intent);
+
+        // pass
+    }
+
+    @Test
+    public void register_shouldEnableReceivingBroadcasts() throws Exception {
+        subject.register(context);
+        Intent intent = new Intent(ACTION_INTERSTITIAL_SHOW);
+        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        verify(customEventInterstitialListener).onInterstitialShown();
+    }
+
+    @Test
+    public void unregister_shouldDisableReceivingBroadcasts() throws Exception {
+        subject.register(context);
+
+        subject.unregister();
+        Intent intent = new Intent(ACTION_INTERSTITIAL_SHOW);
+        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        verify(customEventInterstitialListener, never()).onInterstitialShown();
+    }
+
+    @Test
+    public void unregister_whenNotRegistered_shouldNotBlowUp() throws Exception {
+        subject.unregister();
+
+        // pass
+    }
+
+    @Test
+    public void unregister_shouldNotLeakTheContext() throws Exception {
+        subject.register(context);
+        subject.unregister();
+
+        LocalBroadcastManager.getInstance(context).registerReceiver(subject, BaseInterstitialActivity.HTML_INTERSTITIAL_INTENT_FILTER);
+        subject.unregister();
+
+        // Unregister shouldn't know the context any more and so should not have worked
+        Intent intent = new Intent(ACTION_INTERSTITIAL_SHOW);
+        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+        verify(customEventInterstitialListener).onInterstitialShown();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
new file mode 100644
index 00000000..01e02187
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
@@ -0,0 +1,121 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.net.Uri;
+import android.view.Gravity;
+import android.widget.FrameLayout;
+import com.mopub.mobileads.test.support.TestHtmlBannerWebViewFactory;
+import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
+import com.mopub.mobileads.test.support.TestMoPubViewFactory;
+import org.apache.http.HttpResponse;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import static com.mopub.mobileads.AdFetcher.CLICKTHROUGH_URL_KEY;
+import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
+import static com.mopub.mobileads.AdFetcher.SCROLLABLE_KEY;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+
+@RunWith(com.mopub.mobileads.test.support.SdkTestRunner.class)
+public class HtmlBannerTest {
+
+    private HtmlBanner subject;
+    private HtmlBannerWebView htmlBannerWebView;
+    private CustomEventBanner.CustomEventBannerListener customEventBannerListener;
+    private Map<String, Object> localExtras;
+    private Map<String, String> serverExtras;
+    private Activity context;
+    private String responseBody;
+
+    @Before
+    public void setup() {
+        subject = new HtmlBanner();
+        htmlBannerWebView = TestHtmlBannerWebViewFactory.getSingletonMock();
+        customEventBannerListener = mock(CustomEventBanner.CustomEventBannerListener.class);
+        context = new Activity();
+        localExtras = new HashMap<String, Object>();
+        serverExtras = new HashMap<String, String>();
+        responseBody = "expected response body";
+        serverExtras.put(HTML_RESPONSE_BODY_KEY, Uri.encode(responseBody));
+        serverExtras.put(SCROLLABLE_KEY, "false");
+    }
+
+    @Test
+    public void loadBanner_shouldPopulateTheHtmlWebViewWithHtml() throws Exception {
+        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
+
+        assertThat(TestHtmlBannerWebViewFactory.getLatestListener()).isSameAs(customEventBannerListener);
+        assertThat(TestHtmlBannerWebViewFactory.getLatestIsScrollable()).isFalse();
+        assertThat(TestHtmlBannerWebViewFactory.getLatestRedirectUrl()).isNull();
+        assertThat(TestHtmlBannerWebViewFactory.getLatestClickthroughUrl()).isNull();
+        verify(htmlBannerWebView).loadHtmlResponse(responseBody);
+    }
+
+    @Test
+    public void loadBanner_whenNoHtmlResponse_shouldNotifyBannerFailed() throws Exception {
+        serverExtras.remove(HTML_RESPONSE_BODY_KEY);
+        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
+
+        verify(customEventBannerListener).onBannerFailed(eq(NETWORK_INVALID_STATE));
+        assertThat(TestHtmlBannerWebViewFactory.getLatestListener()).isNull();
+        assertThat(TestHtmlBannerWebViewFactory.getLatestIsScrollable()).isFalse();
+        assertThat(TestHtmlBannerWebViewFactory.getLatestRedirectUrl()).isNull();
+        assertThat(TestHtmlBannerWebViewFactory.getLatestClickthroughUrl()).isNull();
+        verify(htmlBannerWebView, never()).loadHtmlResponse(anyString());
+    }
+
+    @Test
+    public void loadBanner_shouldPassParametersThrough() throws Exception {
+        serverExtras.put(SCROLLABLE_KEY, "true");
+        serverExtras.put(REDIRECT_URL_KEY, "redirectUrl");
+        serverExtras.put(CLICKTHROUGH_URL_KEY, "clickthroughUrl");
+        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
+
+        assertThat(TestHtmlBannerWebViewFactory.getLatestListener()).isSameAs(customEventBannerListener);
+        assertThat(TestHtmlBannerWebViewFactory.getLatestIsScrollable()).isTrue();
+        assertThat(TestHtmlBannerWebViewFactory.getLatestRedirectUrl()).isEqualTo("redirectUrl");
+        assertThat(TestHtmlBannerWebViewFactory.getLatestClickthroughUrl()).isEqualTo("clickthroughUrl");
+        verify(htmlBannerWebView).loadHtmlResponse(responseBody);
+    }
+
+    @Test
+    public void onInvalidate_shouldDestroyTheHtmlWebView() throws Exception {
+        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
+        subject.onInvalidate();
+
+        verify(htmlBannerWebView).destroy();
+    }
+
+    @Test
+    public void loadBanner_shouldCauseServerDimensionsToBeHonoredWhenLayingOutView() throws Exception {
+        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
+        MoPubView moPubView = TestMoPubViewFactory.getSingletonMock();
+        AdViewController adViewController = new AdViewController(context, moPubView);
+
+        HttpResponse response = new TestHttpResponseWithHeaders(200, "I ain't got no-body");
+        response.addHeader("X-Width", "320");
+        response.addHeader("X-Height", "50");
+        adViewController.configureUsingHttpResponse(response);
+
+        adViewController.setAdContentView(htmlBannerWebView);
+        ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
+        verify(moPubView).addView(eq(htmlBannerWebView), layoutParamsCaptor.capture());
+        FrameLayout.LayoutParams layoutParams = layoutParamsCaptor.getValue();
+
+        assertThat(layoutParams.width).isEqualTo(320);
+        assertThat(layoutParams.height).isEqualTo(50);
+        assertThat(layoutParams.gravity).isEqualTo(Gravity.CENTER);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java
new file mode 100644
index 00000000..2b182414
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java
@@ -0,0 +1,58 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.webkit.WebViewClient;
+import com.mopub.mobileads.test.support.SdkTestRunner;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.robolectric.Robolectric.shadowOf;
+
+@RunWith(SdkTestRunner.class)
+public class HtmlBannerWebViewTest {
+
+    private HtmlBannerWebView subject;
+    private CustomEventBannerListener customEventBannerListener;
+    private String clickthroughUrl;
+    private String redirectUrl;
+
+    @Before
+    public void setup() throws Exception {
+        subject = new HtmlBannerWebView(new Activity());
+        customEventBannerListener = mock(CustomEventBannerListener.class);
+        clickthroughUrl = "clickthroughUrl";
+        redirectUrl = "redirectUrl";
+    }
+
+    @Test
+    public void init_shouldSetupWebViewClient() throws Exception {
+        subject.init(customEventBannerListener, false, clickthroughUrl, redirectUrl);
+        WebViewClient webViewClient = shadowOf(subject).getWebViewClient();
+        assertThat(webViewClient).isNotNull();
+        assertThat(webViewClient).isInstanceOf(HtmlWebViewClient.class);
+    }
+
+    @Test
+    public void htmlBannerWebViewListener_shouldForwardCalls() throws Exception {
+        HtmlBannerWebView.HtmlBannerWebViewListener listenerSubject = new HtmlBannerWebView.HtmlBannerWebViewListener(customEventBannerListener);
+
+        listenerSubject.onClicked();
+        verify(customEventBannerListener).onBannerClicked();
+
+        listenerSubject.onLoaded(subject);
+        verify(customEventBannerListener).onBannerLoaded(eq(subject));
+
+        listenerSubject.onCollapsed();
+        verify(customEventBannerListener).onBannerCollapsed();
+
+        listenerSubject.onFailed(NETWORK_INVALID_STATE);
+        verify(customEventBannerListener).onBannerFailed(eq(NETWORK_INVALID_STATE));
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
new file mode 100644
index 00000000..47522fe1
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
@@ -0,0 +1,140 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.net.Uri;
+import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.TestHtmlInterstitialWebViewFactory;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.shadows.ShadowLocalBroadcastManager;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import static com.mopub.mobileads.AdFetcher.CLICKTHROUGH_URL_KEY;
+import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
+import static com.mopub.mobileads.AdFetcher.SCROLLABLE_KEY;
+import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+public class HtmlInterstitialTest {
+    private HtmlInterstitial subject;
+    private CustomEventInterstitialListener customEventInterstitialListener;
+    private Activity context;
+    private Map<String,Object> localExtras;
+    private Map<String,String> serverExtras;
+    private HtmlInterstitialWebView htmlInterstitialWebView;
+    private String expectedResponse;
+
+    @Before
+    public void setUp() throws Exception {
+        subject = new HtmlInterstitial();
+
+        expectedResponse = "this is the response";
+        htmlInterstitialWebView = TestHtmlInterstitialWebViewFactory.getSingletonMock();
+        context = new Activity();
+        customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
+        localExtras = new HashMap<String, Object>();
+        serverExtras = new HashMap<String, String>();
+        serverExtras.put(HTML_RESPONSE_BODY_KEY, Uri.encode(expectedResponse));
+    }
+
+    @Test
+    public void loadInterstitial_shouldNotifyCustomEventInterstitialListenerOnLoaded() throws Exception {
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+
+        verify(customEventInterstitialListener).onInterstitialLoaded();
+    }
+
+    @Test
+    public void loadInterstitial_whenNoHtmlResponsePassedIn_shouldCallLoadFailUrl() throws Exception {
+        serverExtras.remove(HTML_RESPONSE_BODY_KEY);
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+
+        assertThat(TestHtmlInterstitialWebViewFactory.getLatestListener()).isNull();
+        assertThat(TestHtmlInterstitialWebViewFactory.getLatestIsScrollable()).isFalse();
+        assertThat(TestHtmlInterstitialWebViewFactory.getLatestRedirectUrl()).isNull();
+        assertThat(TestHtmlInterstitialWebViewFactory.getLatestClickthroughUrl()).isNull();
+        verify(customEventInterstitialListener).onInterstitialFailed(NETWORK_INVALID_STATE);
+        verify(htmlInterstitialWebView, never()).loadHtmlResponse(anyString());
+    }
+
+
+    @Test
+    public void showInterstitial_withMinimumExtras_shouldStartMoPubActivityWithDefaults() throws Exception {
+
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+        subject.showInterstitial();
+
+        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo(expectedResponse);
+        assertThat(nextStartedActivity.getBooleanExtra(SCROLLABLE_KEY, false)).isFalse();
+        assertThat(nextStartedActivity.getStringExtra(REDIRECT_URL_KEY)).isNull();
+        assertThat(nextStartedActivity.getStringExtra(CLICKTHROUGH_URL_KEY)).isNull();
+        assertThat(nextStartedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
+        assertThat(nextStartedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MoPubActivity");
+    }
+
+    @Test
+    public void showInterstitial_shouldStartMoPubActivityWithAllExtras() throws Exception {
+        serverExtras.put(SCROLLABLE_KEY, "true");
+        serverExtras.put(REDIRECT_URL_KEY, "redirectUrl");
+        serverExtras.put(CLICKTHROUGH_URL_KEY, "clickthroughUrl");
+
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+        subject.showInterstitial();
+
+        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo(expectedResponse);
+        assertThat(nextStartedActivity.getBooleanExtra(SCROLLABLE_KEY, false)).isTrue();
+        assertThat(nextStartedActivity.getStringExtra(REDIRECT_URL_KEY)).isEqualTo("redirectUrl");
+        assertThat(nextStartedActivity.getStringExtra(CLICKTHROUGH_URL_KEY)).isEqualTo("clickthroughUrl");
+        assertThat(nextStartedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
+        assertThat(nextStartedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MoPubActivity");
+    }
+
+    @Test
+    public void loadInterstitial_shouldConnectListenerToBroadcastReceiver() throws Exception {
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+
+        Intent intent;
+        intent = new Intent(ACTION_INTERSTITIAL_SHOW);
+        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        verify(customEventInterstitialListener).onInterstitialShown();
+
+        intent = new Intent(ACTION_INTERSTITIAL_DISMISS);
+        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        verify(customEventInterstitialListener).onInterstitialDismissed();
+    }
+
+    @Test
+    public void onInvalidate_shouldDisconnectListenerToBroadcastReceiver() throws Exception {
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+        subject.onInvalidate();
+
+        Intent intent;
+        intent = new Intent(ACTION_INTERSTITIAL_SHOW);
+        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        verify(customEventInterstitialListener, never()).onInterstitialShown();
+
+        intent = new Intent(ACTION_INTERSTITIAL_DISMISS);
+        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        verify(customEventInterstitialListener, never()).onInterstitialDismissed();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
new file mode 100644
index 00000000..5170ec78
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
@@ -0,0 +1,79 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.webkit.WebViewClient;
+import com.mopub.mobileads.test.support.SdkTestRunner;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+
+import java.lang.reflect.Method;
+
+import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+import static com.mopub.mobileads.HtmlInterstitialWebView.HtmlInterstitialWebViewListener;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+import static org.robolectric.Robolectric.shadowOf;
+
+@RunWith(SdkTestRunner.class)
+public class HtmlInterstitialWebViewTest {
+
+    private HtmlInterstitialWebView subject;
+    private CustomEventInterstitialListener customEventInterstitialListener;
+    private String clickthroughUrl;
+    private boolean isScrollable;
+    private String redirectUrl;
+
+    @Before
+    public void setUp() throws Exception {
+        subject = new HtmlInterstitialWebView(new Activity());
+        customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
+        isScrollable = false;
+        clickthroughUrl = "clickthroughUrl";
+        redirectUrl = "redirectUrl";
+    }
+
+    @Test
+    public void init_shouldSetupWebViewClient() throws Exception {
+        subject.init(customEventInterstitialListener, false, clickthroughUrl, redirectUrl);
+        WebViewClient webViewClient = shadowOf(subject).getWebViewClient();
+        assertThat(webViewClient).isNotNull();
+        assertThat(webViewClient).isInstanceOf(HtmlWebViewClient.class);
+    }
+
+    @Test
+    public void htmlBannerWebViewListener_shouldForwardCalls() throws Exception {
+        HtmlInterstitialWebViewListener listenerSubject = new HtmlInterstitialWebViewListener(customEventInterstitialListener);
+
+        listenerSubject.onLoaded(subject);
+        verify(customEventInterstitialListener).onInterstitialShown();
+
+        listenerSubject.onFailed(NETWORK_INVALID_STATE);
+        verify(customEventInterstitialListener).onInterstitialFailed(eq(NETWORK_INVALID_STATE));
+
+        listenerSubject.onClicked();
+        verify(customEventInterstitialListener).onInterstitialClicked();
+    }
+
+    @Test
+    public void init_shouldAddJavascriptInterface() throws Exception {
+        subject.init(customEventInterstitialListener, isScrollable, clickthroughUrl, redirectUrl);
+
+        Object javascriptInterface = shadowOf(subject).getJavascriptInterface("mopubUriInterface");
+        assertThat(javascriptInterface).isNotNull();
+
+        Method fireFinishLoad = javascriptInterface.getClass().getDeclaredMethod("fireFinishLoad");
+        Robolectric.pauseMainLooper();
+        boolean returnValue = (Boolean) fireFinishLoad.invoke(javascriptInterface);
+        assertThat(returnValue).isTrue();
+        verify(customEventInterstitialListener, never()).onInterstitialShown();
+
+        Robolectric.unPauseMainLooper();
+        verify(customEventInterstitialListener).onInterstitialShown();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
similarity index 61%
rename from mopub-sdk/src/test/java/com/mopub/mobileads/AdWebViewClientTest.java
rename to mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
index 0833ccb0..b63ab232 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
@@ -17,69 +17,68 @@
 import static org.mockito.Mockito.*;
 
 @RunWith(SdkTestRunner.class)
-public class AdWebViewClientTest {
+public class HtmlWebViewClientTest {
 
-    private AdWebViewClient subject;
-    private WebView webView;
-    private AdViewController adViewController;
-    private AdWebView adWebView;
+    private HtmlWebViewClient subject;
+    private HtmlWebViewListener htmlWebViewListener;
+    private BaseHtmlWebView htmlWebView;
 
     @Before
     public void setUp() throws Exception {
-        adViewController = mock(AdViewController.class);
-        adWebView = mock(AdWebView.class);
-        stub(adWebView.getContext()).toReturn(new Activity());
-        subject = new AdWebViewClient(adViewController, adWebView);
+        htmlWebViewListener = mock(HtmlWebViewListener.class);
+        htmlWebView = mock(BaseHtmlWebView.class);
+        stub(htmlWebView.getContext()).toReturn(new Activity());
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, "clickthrough", "redirect");
     }
 
     @Test
     public void shouldOverrideUrlLoading_withMoPubFinishLoad_shouldCallAdDidLoad() throws Exception {
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(adWebView, "mopub://finishLoad");
+        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://finishLoad");
 
         assertThat(didOverrideUrl).isTrue();
-        verify(adViewController).adDidLoad();
+        verify(htmlWebViewListener).onLoaded(eq(htmlWebView));
     }
 
     @Test
     public void shouldOverrideUrlLoading_withMoPubClose_shouldCallAdDidClose() throws Exception {
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(adWebView, "mopub://close");
+        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://close");
 
         assertThat(didOverrideUrl).isTrue();
-        verify(adViewController).adDidClose();
+        verify(htmlWebViewListener).onCollapsed();
     }
 
     @Test
     public void shouldOverrideUrlLoading_withMoPubFailLoad_shouldCallLoadFailUrl() throws Exception {
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(adWebView, "mopub://failLoad");
+        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://failLoad");
 
         assertThat(didOverrideUrl).isTrue();
-        verify(adWebView).loadFailUrl(UNSPECIFIED);
+        verify(htmlWebViewListener).onFailed(UNSPECIFIED);
     }
 
     @Test
     public void shouldOverrideUrlLoading_withMoPubCustom_shouldStartCustomIntent() throws Exception {
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(adWebView, "mopub://custom?fnc=myFnc&data=myData");
+        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://custom?fnc=myFnc&data=myData");
 
         assertThat(didOverrideUrl).isTrue();
-        verify(adViewController).registerClick();
+        verify(htmlWebViewListener).onClicked();
         Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(startedActivity).isNotNull();
         assertThat(startedActivity.getAction()).isEqualTo("myFnc");
         assertThat(startedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(startedActivity.getStringExtra(AdWebView.EXTRA_AD_CLICK_DATA)).isEqualTo("myData");
+        assertThat(startedActivity.getStringExtra(HtmlBannerWebView.EXTRA_AD_CLICK_DATA)).isEqualTo("myData");
     }
 
     @Test
     public void shouldOverrideUrlLoading_withMoPubCustomAndNullData_shouldStartCustomIntent() throws Exception {
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(adWebView, "mopub://custom?fnc=myFnc");
+        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://custom?fnc=myFnc");
 
         assertThat(didOverrideUrl).isTrue();
-        verify(adViewController).registerClick();
+        verify(htmlWebViewListener).onClicked();
         Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(startedActivity).isNotNull();
         assertThat(startedActivity.getAction()).isEqualTo("myFnc");
         assertThat(startedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(startedActivity.getStringExtra(AdWebView.EXTRA_AD_CLICK_DATA)).isNull();
+        assertThat(startedActivity.getStringExtra(HtmlBannerWebView.EXTRA_AD_CLICK_DATA)).isNull();
     }
 
     @Test
@@ -94,14 +93,13 @@ public void shouldOverrideUrlLoading_withPhoneIntent_shouldStartDefaultIntent()
 
     @Test
     public void shouldOverrideUrlLoading_withValidMarketIntent_shouldOpenBrowser() throws Exception {
-        MoPubView moPubView = mock(MoPubView.class);
-        stub(adViewController.getMoPubView()).toReturn(moPubView);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
         String validMarketUrl = "market://somethingValid";
         Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW, Uri.parse(validMarketUrl)), new ResolveInfo());
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(adWebView, validMarketUrl);
+        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, validMarketUrl);
 
         assertThat(didOverrideUrl).isTrue();
-        verify(moPubView).adClicked();
+        verify(htmlWebViewListener).onClicked();
 
         Intent startedActivity = assertActivityStarted();
         assertThat(startedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MraidBrowser");
@@ -111,13 +109,11 @@ public void shouldOverrideUrlLoading_withValidMarketIntent_shouldOpenBrowser() t
 
     @Test
     public void shouldOverrideUrlLoading_withUnhandleableMarketIntent_shouldNotOpenBrowser() throws Exception {
-        MoPubView moPubView = mock(MoPubView.class);
-        stub(adViewController.getMoPubView()).toReturn(moPubView);
         String validMarketUrl = "market://somethingValid";
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(adWebView, validMarketUrl);
+        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, validMarketUrl);
 
         assertThat(didOverrideUrl).isTrue();
-        verify(moPubView, never()).adClicked();
+        verify(htmlWebViewListener, never()).onClicked();
 
         Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(startedActivity).isNull();
@@ -125,13 +121,12 @@ public void shouldOverrideUrlLoading_withUnhandleableMarketIntent_shouldNotOpenB
 
     @Test
     public void shouldOverrideUrlLoading_withHttpUrl_shouldOpenBrowser() throws Exception {
-        MoPubView moPubView = mock(MoPubView.class);
-        stub(adViewController.getMoPubView()).toReturn(moPubView);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
         String validUrl = "http://www.mopub.com";
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(adWebView, validUrl);
+        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, validUrl);
 
         assertThat(didOverrideUrl).isTrue();
-        verify(moPubView).adClicked();
+        verify(htmlWebViewListener).onClicked();
 
         Intent startedActivity = assertActivityStarted();
         assertThat(startedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MraidBrowser");
@@ -142,18 +137,16 @@ public void shouldOverrideUrlLoading_withHttpUrl_shouldOpenBrowser() throws Exce
     @Test
     public void shouldOverrideUrlLoading_withClickTrackingRedirect_shouldChangeUrl() throws Exception {
         String validUrl = "http://www.mopub.com";
-        stub(adViewController.getMoPubView()).toReturn(mock(MoPubView.class));
-        stub(adViewController.getClickthroughUrl()).toReturn("http://redirecturl.com");
-        subject.shouldOverrideUrlLoading(adWebView, validUrl);
+        subject.shouldOverrideUrlLoading(htmlWebView, validUrl);
 
         Intent startedActivity = assertActivityStarted();
-        assertThat(startedActivity.getStringExtra(URL_EXTRA)).isEqualTo("http://redirecturl.com&r=http%3A%2F%2Fwww.mopub.com");
+        assertThat(startedActivity.getStringExtra(URL_EXTRA)).isEqualTo("clickthrough&r=http%3A%2F%2Fwww.mopub.com");
     }
 
     @Test
     public void shouldOverrideUrlLoading_withEmptyUrl_shouldLoadAboutBlank() throws Exception {
-        stub(adViewController.getMoPubView()).toReturn(mock(MoPubView.class));
-        subject.shouldOverrideUrlLoading(adWebView, "");
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
+        subject.shouldOverrideUrlLoading(htmlWebView, "");
 
         Intent startedActivity = assertActivityStarted();
         assertThat(startedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MraidBrowser");
@@ -161,8 +154,48 @@ public void shouldOverrideUrlLoading_withEmptyUrl_shouldLoadAboutBlank() throws
         assertThat(startedActivity.getData()).isNull();
     }
 
+    @Test
+    public void onPageStarted_whenLoadedUrlStartsWithRedirect_shouldOpenInBrowser() throws Exception {
+        String url = "redirectUrlToLoad";
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, "redirect");
+        WebView view = mock(WebView.class);
+        subject.onPageStarted(view, url, null);
+
+        verify(view).stopLoading();
+
+        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(intent.getStringExtra(MraidBrowser.URL_EXTRA)).isEqualTo(url);
+        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
+        assertThat(intent.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MraidBrowser");
+    }
+
+    @Test
+    public void onPageStarted_whenLoadedUrlStartsWithRedirectAndHasClickthrough_shouldOpenInBrowser() throws Exception {
+        String url = "redirectUrlToLoad";
+        String expectedTrackingUrl = "clickthrough" + "&r=" + url;
+        WebView view = mock(WebView.class);
+        subject.onPageStarted(view, url, null);
+
+        verify(view).stopLoading();
+
+        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(intent.getStringExtra(MraidBrowser.URL_EXTRA)).isEqualTo(expectedTrackingUrl);
+        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
+        assertThat(intent.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MraidBrowser");
+    }
+
+    @Test
+    public void onPageStarted_whenLoadedUrlDoesntStartWithRedirect_shouldDoNothing() throws Exception {
+        WebView view = mock(WebView.class);
+        subject.onPageStarted(view, "this doesn't start with redirect", null);
+
+        verify(view, never()).stopLoading();
+
+        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+    }
+
     private void assertPhoneUrlStartedCorrectIntent(String url) {
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(adWebView, url);
+        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, url);
 
         assertThat(didOverrideUrl).isTrue();
 
@@ -170,8 +203,8 @@ private void assertPhoneUrlStartedCorrectIntent(String url) {
         assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_VIEW);
         assertThat(startedActivity.getData().toString()).isEqualTo(url);
 
-        verify(adViewController).registerClick();
-        reset(adViewController);
+        verify(htmlWebViewListener).onClicked();
+        reset(htmlWebViewListener);
     }
 
     private Intent assertActivityStarted() {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
index 6839cfa9..56495389 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
@@ -1,56 +1,61 @@
 package com.mopub.mobileads;
 
-import android.content.ComponentName;
+import android.app.Activity;
+import android.content.BroadcastReceiver;
 import android.content.Intent;
 import android.view.View;
 import android.widget.RelativeLayout;
 import com.mopub.mobileads.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestMoPubViewFactory;
+import com.mopub.mobileads.test.support.TestHtmlInterstitialWebViewFactory;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.robolectric.Robolectric;
+import org.robolectric.shadows.ShadowLocalBroadcastManager;
 
 import static android.widget.RelativeLayout.LayoutParams;
-import static com.mopub.mobileads.BaseActivity.SOURCE_KEY;
-import static com.mopub.mobileads.MoPubActivity.AD_UNIT_ID_KEY;
-import static com.mopub.mobileads.MoPubActivity.CLICKTHROUGH_URL_KEY;
-import static com.mopub.mobileads.MoPubActivity.KEYWORDS_KEY;
-import static com.mopub.mobileads.MoPubActivity.TIMEOUT_KEY;
-import static com.mopub.mobileads.MoPubView.BannerAdListener;
+import static com.mopub.mobileads.AdFetcher.CLICKTHROUGH_URL_KEY;
+import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
+import static com.mopub.mobileads.AdFetcher.SCROLLABLE_KEY;
+import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.BaseInterstitialActivity.HTML_INTERSTITIAL_INTENT_FILTER;
+import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
+import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
-public class MoPubActivityTest extends BaseActivityTest {
-    public static final String EXPECTED_AD_UNIT_ID = "expected ad unit id";
-    public static final String EXPECTED_KEYWORDS = "keywords";
+public class MoPubActivityTest extends BaseInterstitialActivityTest {
+    public static final String EXPECTED_HTML_DATA = "htmlData";
+    public static final boolean EXPECTED_IS_SCROLLABLE = true;
+    public static final String EXPECTED_REDIRECT_URL = "redirectUrl";
     public static final String EXPECTED_CLICKTHROUGH_URL = "http://expected_url";
-    public static final int EXPECTED_TIMEOUT = 10;
 
-    private MoPubView moPubView;
+    private HtmlInterstitialWebView htmlInterstitialWebView;
 
     @Before
     public void setUp() throws Exception {
         super.setup();
-        Intent moPubActivityIntent = createMoPubActivityIntent(EXPECTED_SOURCE);
-        moPubView = TestMoPubViewFactory.getSingletonMock();
-        resetMockedView(moPubView);
+        Intent moPubActivityIntent = createMoPubActivityIntent(EXPECTED_HTML_DATA, EXPECTED_IS_SCROLLABLE, EXPECTED_REDIRECT_URL, EXPECTED_CLICKTHROUGH_URL);
+        htmlInterstitialWebView = TestHtmlInterstitialWebViewFactory.getSingletonMock();
+        resetMockedView(htmlInterstitialWebView);
         subject = Robolectric.buildActivity(MoPubActivity.class).withIntent(moPubActivityIntent).create().get();
-        reset(moPubView);
-        resetMockedView(moPubView);
+        reset(htmlInterstitialWebView);
+        resetMockedView(htmlInterstitialWebView);
     }
 
     @Test
-    public void onCreate_shouldLayoutMoPubView() throws Exception {
+    public void onCreate_shouldLayoutWebView() throws Exception {
         subject.onCreate(null);
 
         ArgumentCaptor<RelativeLayout.LayoutParams> captor = ArgumentCaptor.forClass(RelativeLayout.LayoutParams.class);
-        verify(moPubView).setLayoutParams(captor.capture());
+        verify(htmlInterstitialWebView).setLayoutParams(captor.capture());
         RelativeLayout.LayoutParams actualLayoutParams = captor.getValue();
 
         assertThat(actualLayoutParams.width).isEqualTo(RelativeLayout.LayoutParams.FILL_PARENT);
@@ -59,47 +64,97 @@ public void onCreate_shouldLayoutMoPubView() throws Exception {
     }
 
     @Test
-    public void getAdView_shouldReturnPopulatedMoPubView() throws Exception {
+    public void getAdView_shouldReturnPopulatedHtmlWebView() throws Exception {
         View adView = subject.getAdView();
 
-        assertThat(adView).isSameAs(moPubView);
-        verify(moPubView).setAdUnitId(EXPECTED_AD_UNIT_ID);
-        verify(moPubView).setKeywords(EXPECTED_KEYWORDS);
-        verify(moPubView).setClickthroughUrl(EXPECTED_CLICKTHROUGH_URL);
-        verify(moPubView).setTimeout(EXPECTED_TIMEOUT);
+        assertThat(adView).isSameAs(htmlInterstitialWebView);
+        assertThat(TestHtmlInterstitialWebViewFactory.getLatestListener()).isNotNull();
+        assertThat(TestHtmlInterstitialWebViewFactory.getLatestIsScrollable()).isEqualTo(EXPECTED_IS_SCROLLABLE);
+        assertThat(TestHtmlInterstitialWebViewFactory.getLatestClickthroughUrl()).isEqualTo(EXPECTED_CLICKTHROUGH_URL);
+        assertThat(TestHtmlInterstitialWebViewFactory.getLatestRedirectUrl()).isEqualTo(EXPECTED_REDIRECT_URL);
+        verify(htmlInterstitialWebView).loadHtmlResponse(EXPECTED_HTML_DATA);
+    }
 
-        verify(moPubView).setBannerAdListener(any(BannerAdListener.class));
+    @Test
+    public void onDestroy_shouldDestroyMoPubView() throws Exception {
+        subject.onCreate(null);
+        subject.onDestroy();
 
-        verify(moPubView).loadHtmlString(EXPECTED_SOURCE);
+        verify(htmlInterstitialWebView).destroy();
+        assertThat(getContentView(subject).getChildCount()).isEqualTo(0);
     }
 
     @Test
-    public void getAdView_whenSourceHasImpressionTracking_shouldRemoveImpressionTracking() throws Exception {
-        Intent intent = createMoPubActivityIntent("this is some cool source http://ads.mopub.com/m/imp !!");
-        subject.setIntent(intent);
+    public void start_shouldStartMoPubActivityWithCorrectParameters() throws Exception {
+        MoPubActivity.start(subject, "expectedResponse", true, "redirectUrl", "clickthroughUrl");
+
+        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo("expectedResponse");
+        assertThat(nextStartedActivity.getBooleanExtra(SCROLLABLE_KEY, false)).isTrue();
+        assertThat(nextStartedActivity.getStringExtra(REDIRECT_URL_KEY)).isEqualTo("redirectUrl");
+        assertThat(nextStartedActivity.getStringExtra(CLICKTHROUGH_URL_KEY)).isEqualTo("clickthroughUrl");
+        assertThat(nextStartedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
+        assertThat(nextStartedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MoPubActivity");
+    }
+
+    @Test
+    public void getAdView_shouldCreateHtmlInterstitialWebViewAndLoadResponse() throws Exception {
         subject.getAdView();
 
-        verify(moPubView).loadHtmlString(eq("this is some cool source mopub://null !!"));
+        assertThat(TestHtmlInterstitialWebViewFactory.getLatestListener()).isNotNull();
+        assertThat(TestHtmlInterstitialWebViewFactory.getLatestIsScrollable()).isEqualTo(EXPECTED_IS_SCROLLABLE);
+        assertThat(TestHtmlInterstitialWebViewFactory.getLatestRedirectUrl()).isEqualTo(EXPECTED_REDIRECT_URL);
+        assertThat(TestHtmlInterstitialWebViewFactory.getLatestClickthroughUrl()).isEqualTo(EXPECTED_CLICKTHROUGH_URL);
+        verify(htmlInterstitialWebView).loadHtmlResponse(EXPECTED_HTML_DATA);
     }
 
     @Test
-    public void onDestroy_shouldDestroyMoPubView() throws Exception {
-        subject.onCreate(null);
-        subject.onDestroy();
+    public void getAdView_shouldSetUpForBroadcastingClicks() throws Exception {
+        subject.getAdView();
+        BroadcastReceiver broadcastReceiver = mock(BroadcastReceiver.class);
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, HTML_INTERSTITIAL_INTENT_FILTER);
 
-        verify(moPubView).destroy();
-        assertThat(getContentView(subject).getChildCount()).isEqualTo(0);
+        TestHtmlInterstitialWebViewFactory.getLatestListener().onInterstitialClicked();
+
+        ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);
+        verify(broadcastReceiver).onReceive(eq(subject), intentCaptor.capture());
+        Intent intent = intentCaptor.getValue();
+        assertThat(intent.getAction()).isEqualTo(BaseInterstitialActivity.ACTION_INTERSTITIAL_CLICK);
+    }
+
+    @Test
+    public void getAdView_shouldSetUpForBroadcastingFail() throws Exception {
+        subject.getAdView();
+        BroadcastReceiver broadcastReceiver = mock(BroadcastReceiver.class);
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, HTML_INTERSTITIAL_INTENT_FILTER);
+
+        TestHtmlInterstitialWebViewFactory.getLatestListener().onInterstitialFailed(UNSPECIFIED);
+
+        ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);
+        verify(broadcastReceiver).onReceive(eq(subject), intentCaptor.capture());
+        Intent intent = intentCaptor.getValue();
+        assertThat(intent.getAction()).isEqualTo(ACTION_INTERSTITIAL_FAIL);
+
+        assertThat(shadowOf(subject).isFinishing()).isTrue();
+    }
+
+
+    @Test
+    public void getAdView_shouldSetUpForBroadcastingShow() throws Exception {
+        subject.getAdView();
+        BroadcastReceiver broadcastReceiver = mock(BroadcastReceiver.class);
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, HTML_INTERSTITIAL_INTENT_FILTER);
+
+        TestHtmlInterstitialWebViewFactory.getLatestListener().onInterstitialShown();
+
+        ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);
+        verify(broadcastReceiver).onReceive(eq(subject), intentCaptor.capture());
+        Intent intent = intentCaptor.getValue();
+        assertThat(intent.getAction()).isEqualTo(ACTION_INTERSTITIAL_SHOW);
     }
 
-    private Intent createMoPubActivityIntent(String expectedSource) {
-        Intent moPubActivityIntent = new Intent();
-        moPubActivityIntent.setComponent(new ComponentName("", ""));
-        moPubActivityIntent.putExtra(AD_UNIT_ID_KEY, EXPECTED_AD_UNIT_ID);
-        moPubActivityIntent.putExtra(KEYWORDS_KEY, EXPECTED_KEYWORDS);
-        moPubActivityIntent.putExtra(CLICKTHROUGH_URL_KEY, EXPECTED_CLICKTHROUGH_URL);
-        moPubActivityIntent.putExtra(TIMEOUT_KEY, EXPECTED_TIMEOUT);
-        moPubActivityIntent.putExtra(SOURCE_KEY, expectedSource);
-        return moPubActivityIntent;
+    private Intent createMoPubActivityIntent(String htmlData, boolean isScrollable, String redirectUrl, String clickthroughUrl) {
+        return MoPubActivity.createIntent(new Activity(), htmlData, isScrollable, redirectUrl, clickthroughUrl);
     }
 
     private void assertOnlyOneRuleSet(LayoutParams layoutParams, int desiredRule) {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
index ebf2d662..090873c4 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
@@ -1,8 +1,8 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
-import android.content.ComponentName;
-import android.content.Intent;
+import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
+import com.mopub.mobileads.test.support.TestCustomEventBannerAdapterFactory;
 import com.mopub.mobileads.test.support.TestCustomEventInterstitialAdapterFactory;
 import org.junit.Before;
 import org.junit.Test;
@@ -14,17 +14,17 @@
 
 import static com.mopub.mobileads.AdFetcher.CUSTOM_EVENT_DATA_HEADER;
 import static com.mopub.mobileads.AdFetcher.CUSTOM_EVENT_NAME_HEADER;
-import static com.mopub.mobileads.BaseActivity.SOURCE_KEY;
-import static com.mopub.mobileads.MoPubActivity.AD_UNIT_ID_KEY;
-import static com.mopub.mobileads.MoPubActivity.CLICKTHROUGH_URL_KEY;
-import static com.mopub.mobileads.MoPubActivity.KEYWORDS_KEY;
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
+import static com.mopub.mobileads.MoPubErrorCode.CANCELLED;
 import static com.mopub.mobileads.MoPubErrorCode.INTERNAL_ERROR;
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 import static com.mopub.mobileads.MoPubView.LocationAwareness.LOCATION_AWARENESS_NORMAL;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.*;
-import static org.robolectric.Robolectric.shadowOf;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.verify;
 
 @RunWith(com.mopub.mobileads.test.support.SdkTestRunner.class)
 public class MoPubInterstitialTest {
@@ -39,6 +39,7 @@
     private CustomEventInterstitialAdapter customEventInterstitialAdapter;
     private MoPubInterstitial.InterstitialAdListener interstitialAdListener;
     private MoPubInterstitial.MoPubInterstitialView interstitialView;
+    private AdViewController adViewController;
 
     @Before
     public void setUp() throws Exception {
@@ -55,6 +56,7 @@ public void setUp() throws Exception {
 
         customEventInterstitialAdapter = TestCustomEventInterstitialAdapterFactory.getSingletonMock();
         reset(customEventInterstitialAdapter);
+        adViewController = TestAdViewControllerFactory.getSingletonMock();
     }
 
     @Test
@@ -157,22 +159,23 @@ public void loadCustomEvent_shouldCreateAndLoadCustomEventInterstitialAdapter()
     }
 
     @Test
-    public void onCustomEventInterstitialLoaded_shouldTrackImpressionAndNotifyListener() throws Exception {
+    public void onCustomEventInterstitialLoaded_shouldNotifyListener() throws Exception {
         subject.setInterstitialView(interstitialView);
 
         subject.onCustomEventInterstitialLoaded();
-        verify(interstitialView).trackImpression();
         verify(interstitialAdListener).onInterstitialLoaded(eq(subject));
+
+        verify(interstitialView, never()).trackImpression();
     }
 
     @Test
-    public void onCustomEventInterstitialLoaded_whenInterstitialAdListenerIsNull_shouldTrackImpressionAndNotNotifyListener() throws Exception {
+    public void onCustomEventInterstitialLoaded_whenInterstitialAdListenerIsNull_shouldNotNotifyListenerOrTrackImpression() throws Exception {
         subject.setInterstitialView(interstitialView);
         subject.setInterstitialAdListener(null);
 
         subject.onCustomEventInterstitialLoaded();
 
-        verify(interstitialView).trackImpression();
+        verify(interstitialView, never()).trackImpression();
         verify(interstitialAdListener, never()).onInterstitialLoaded(eq(subject));
     }
 
@@ -186,26 +189,49 @@ public void onCustomEventInterstitialFailed_shouldLoadFailUrl() throws Exception
     }
 
     @Test
-    public void onCustomEventInterstitialShown_shouldNotifyListener() throws Exception {
-        subject.onCustomEventInterstitialShown();
+    public void onCustomEventInterstitialShown_shouldTrackImpressionAndNotifyListener() throws Exception {
+        subject.setInterstitialView(interstitialView);
+        subject.onCustomEventInterstitialShown(true);
+
+        verify(interstitialView).trackImpression();
+        verify(interstitialAdListener).onInterstitialShown(eq(subject));
+    }
+
+    @Test
+    public void onCustomEventInterstitialShown_whenShouldntTrackImpression_shouldNotTrackImpressionButStillNotifyListener() throws Exception {
+        loadCustomEvent();
 
+        subject.setInterstitialView(interstitialView);
+        subject.onCustomEventInterstitialShown(false);
+
+        verify(interstitialView, never()).trackImpression();
         verify(interstitialAdListener).onInterstitialShown(eq(subject));
     }
 
     @Test
     public void onCustomEventInterstitialShown_whenInterstitialAdListenerIsNull_shouldNotNotifyListener() throws Exception {
         subject.setInterstitialAdListener(null);
-        subject.onCustomEventInterstitialShown();
+        subject.onCustomEventInterstitialShown(true);
         verify(interstitialAdListener, never()).onInterstitialShown(eq(subject));
     }
 
     @Test
-    public void onCustomEventInterstitialClicked_shouldRegisterClick() throws Exception {
+    public void onCustomEventInterstitialClicked_shouldRegisterClickAndNotifyListener() throws Exception {
         subject.setInterstitialView(interstitialView);
 
         subject.onCustomEventInterstitialClicked();
 
         verify(interstitialView).registerClick();
+        verify(interstitialAdListener).onInterstitialClicked(eq(subject));
+    }
+
+    @Test
+    public void onCustomEventInterstitialClicked_whenInterstitialAdListenerIsNull_shouldNotNotifyListener() throws Exception {
+        subject.setInterstitialAdListener(null);
+
+        subject.onCustomEventInterstitialClicked();
+
+        verify(interstitialAdListener, never()).onInterstitialClicked(eq(subject));
     }
 
     @Test
@@ -255,7 +281,7 @@ public void destroy_shouldPreventOnCustomEventInterstitialClickedFromRegistering
     public void destroy_shouldPreventOnCustomEventShownNotification() throws Exception {
         subject.destroy();
 
-        subject.onCustomEventInterstitialShown();
+        subject.onCustomEventInterstitialShown(true);
 
         verify(interstitialAdListener, never()).onInterstitialShown(eq(subject));
     }
@@ -271,98 +297,97 @@ public void destroy_shouldPreventOnCustomEventInterstitialDismissedNotification(
 
     @Test
     public void newlyCreated_shouldNotBeReadyAndNotShow() throws Exception {
-        assertShowsHtmlInterstitial(false, false);
-        assertShowsCustomEventInterstitial(false, false);
+        assertShowsCustomEventInterstitial(false);
     }
 
     @Test
-    public void loadingHtmlBanner_shouldBecomeReadyToShowHtmlAd() throws Exception {
-        MoPubInterstitial.MoPubInterstitialBannerListener bannerListener = subject.new MoPubInterstitialBannerListener();
-
-        bannerListener.onBannerLoaded(null);
+    public void loadingCustomEventInterstitial_shouldBecomeReadyToShowCustomEventAd() throws Exception {
+        subject.onCustomEventInterstitialLoaded();
 
-        assertShowsHtmlInterstitial(true, true);
-        assertShowsCustomEventInterstitial(true, false);
+        assertShowsCustomEventInterstitial(true);
     }
 
     @Test
-    public void loadingHtmlBannerThenFailing_shouldNotBecomeReadyToShowHtmlAd() throws Exception {
-        MoPubInterstitial.MoPubInterstitialBannerListener bannerListener = subject.new MoPubInterstitialBannerListener();
-
-        bannerListener.onBannerLoaded(null);
-        bannerListener.onBannerFailed(null, null);
-
-        assertShowsHtmlInterstitial(false, false);
-        assertShowsCustomEventInterstitial(false, false);
+    public void dismissingHtmlInterstitial_shouldNotBecomeReadyToShowHtmlAd() throws Exception {
+//        EventForwardingBroadcastReceiver broadcastReceiver = new EventForwardingBroadcastReceiver(subject.mInterstitialAdListener);
+//
+//        subject.onCustomEventInterstitialLoaded();
+//        broadcastReceiver.onHtmlInterstitialDismissed();
+//
+//        assertShowsCustomEventInterstitial(false);
     }
 
     @Test
-    public void dismissingHtmlInterstitial_shouldNotBecomeReadyToShowHtmlAd() throws Exception {
-        MoPubInterstitial.MoPubInterstitialBannerListener bannerListener = subject.new MoPubInterstitialBannerListener();
-        BaseActivityBroadcastReceiver broadcastReceiver = subject.new MoPubInterstitialBroadcastReceiver();
-
-        bannerListener.onBannerLoaded(null);
-        broadcastReceiver.onHtmlInterstitialDismissed();
+    public void failingCustomEventInterstitial_shouldNotBecomeReadyToShowCustomEventAd() throws Exception {
+        subject.onCustomEventInterstitialLoaded();
+        subject.onCustomEventInterstitialFailed(CANCELLED);
 
-        assertShowsHtmlInterstitial(false, false);
-        assertShowsCustomEventInterstitial(false, false);
+        assertShowsCustomEventInterstitial(false);
     }
 
     @Test
-    public void loadingCustomEventInterstitial_shouldBecomeReadyToShowCustomEventAd() throws Exception {
+    public void dismissingCustomEventInterstitial_shouldNotBecomeReadyToShowCustomEventAd() throws Exception {
         subject.onCustomEventInterstitialLoaded();
+        subject.onCustomEventInterstitialDismissed();
 
-        assertShowsHtmlInterstitial(true, false);
-        assertShowsCustomEventInterstitial(true, true);
+        assertShowsCustomEventInterstitial(false);
     }
 
     @Test
-    public void failingCustomEventInterstitial_shouldNotBecomeReadyToShowCustomEventAd() throws Exception {
-        subject.onCustomEventInterstitialLoaded();
-        subject.onCustomEventInterstitialFailed(MoPubErrorCode.CANCELLED);
+    public void loadCustomEvent_shouldInitializeCustomEventBannerAdapter() throws Exception {
+        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
+
+        paramsMap.put(AdFetcher.CUSTOM_EVENT_NAME_HEADER, "name");
+        paramsMap.put(AdFetcher.CUSTOM_EVENT_DATA_HEADER, "data");
+        paramsMap.put(AdFetcher.CUSTOM_EVENT_HTML_DATA, "html");
+        TestCustomEventBannerAdapterFactory.reset();
+        moPubInterstitialView.loadCustomEvent(paramsMap);
+
+        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestMoPubInterstitial()).isEqualTo(subject);
+        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestClassName()).isEqualTo("name");
+        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestClassData()).isEqualTo("data");
 
-        assertShowsHtmlInterstitial(false, false);
-        assertShowsCustomEventInterstitial(false, false);
+        verify(customEventInterstitialAdapter).setAdapterListener(eq(subject));
+        verify(customEventInterstitialAdapter).loadInterstitial();
     }
 
     @Test
-    public void dismissingCustomEventInterstitial_shouldNotBecomeReadyToShowCustomEventAd() throws Exception {
-        subject.onCustomEventInterstitialLoaded();
-        subject.onCustomEventInterstitialDismissed();
+    public void loadCustomEvent_whenParamsMapIsNull_shouldCallLoadFailUrl() throws Exception {
+        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
+
+        moPubInterstitialView.loadCustomEvent(null);
 
-        assertShowsHtmlInterstitial(false, false);
-        assertShowsCustomEventInterstitial(false, false);
+        verify(adViewController).loadFailUrl(eq(ADAPTER_NOT_FOUND));
+        verify(customEventInterstitialAdapter, never()).invalidate();
+        verify(customEventInterstitialAdapter, never()).loadInterstitial();
     }
 
-    private void assertShowsHtmlInterstitial(boolean shouldBeReady, boolean shouldShowCustomEventInterstitial) {
-        stub(interstitialView.getKeywords()).toReturn(KEYWORDS_VALUE);
-        stub(interstitialView.getResponseString()).toReturn(SOURCE_VALUE);
-        stub(interstitialView.getClickthroughUrl()).toReturn(CLICKTHROUGH_URL_VALUE);
-        subject.setInterstitialView(interstitialView);
+    @Test
+    public void adFailed_shouldNotifyInterstitialAdListener() throws Exception {
+        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
+        moPubInterstitialView.adFailed(CANCELLED);
 
-        assertThat(subject.isReady()).isEqualTo(shouldBeReady);
-        assertThat(subject.show()).isEqualTo(shouldBeReady);
+        verify(interstitialAdListener).onInterstitialFailed(eq(subject), eq(CANCELLED));
+    }
 
-        Intent intent = shadowOf(activity).peekNextStartedActivity();
-        if (shouldBeReady && shouldShowCustomEventInterstitial) {
-            assertThat(intent.getComponent()).isEqualTo(new ComponentName(activity, MoPubActivity.class));
-            assertThat(intent.getStringExtra(AD_UNIT_ID_KEY)).isEqualTo(AD_UNIT_ID_VALUE);
-            assertThat(intent.getStringExtra(KEYWORDS_KEY)).isEqualTo(KEYWORDS_VALUE);
-            assertThat(intent.getStringExtra(SOURCE_KEY)).isEqualTo(SOURCE_VALUE);
-            assertThat(intent.getStringExtra(CLICKTHROUGH_URL_KEY)).isEqualTo(CLICKTHROUGH_URL_VALUE);
-        } else {
-            assertThat(intent).isNull();
-        }
+    private void loadCustomEvent() {
+        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
+
+        paramsMap.put(AdFetcher.CUSTOM_EVENT_NAME_HEADER, "name");
+        paramsMap.put(AdFetcher.CUSTOM_EVENT_DATA_HEADER, "data");
+        paramsMap.put(AdFetcher.CUSTOM_EVENT_HTML_DATA, "html");
+        TestCustomEventBannerAdapterFactory.reset();
+        moPubInterstitialView.loadCustomEvent(paramsMap);
     }
 
-    private void assertShowsCustomEventInterstitial(boolean shouldBeReady, boolean shouldShowHtmlInterstitial) {
+    private void assertShowsCustomEventInterstitial(boolean shouldBeReady) {
         MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
         moPubInterstitialView.loadCustomEvent(paramsMap);
 
         assertThat(subject.isReady()).isEqualTo(shouldBeReady);
         assertThat(subject.show()).isEqualTo(shouldBeReady);
 
-        if (shouldBeReady && shouldShowHtmlInterstitial) {
+        if (shouldBeReady) {
             verify(customEventInterstitialAdapter).showInterstitial();
         } else {
             verify(customEventInterstitialAdapter, never()).showInterstitial();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
index d7468b9e..8aad6342 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
 import com.mopub.mobileads.test.support.TestCustomEventBannerAdapterFactory;
 import org.junit.Before;
 import org.junit.Test;
@@ -10,7 +11,11 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
@@ -18,11 +23,14 @@
     private MoPubView subject;
     private Map<String,String> paramsMap = new HashMap<String, String>();
     private CustomEventBannerAdapter customEventBannerAdapter;
+    private AdViewController adViewController;
 
     @Before
     public void setup() {
         subject = new MoPubView(new Activity());
         customEventBannerAdapter = TestCustomEventBannerAdapterFactory.getSingletonMock();
+        reset(customEventBannerAdapter);
+        adViewController = TestAdViewControllerFactory.getSingletonMock();
     }
 
     @Test
@@ -39,4 +47,13 @@ public void loadCustomEvent_shouldInitializeCustomEventBannerAdapter() throws Ex
 
         verify(customEventBannerAdapter).loadAd();
     }
+
+    @Test
+    public void loadCustomEvent_whenParamsMapIsNull_shouldCallLoadFailUrl() throws Exception {
+        subject.loadCustomEvent(null);
+
+        verify(adViewController).loadFailUrl(eq(ADAPTER_NOT_FOUND));
+        verify(customEventBannerAdapter, never()).invalidate();
+        verify(customEventBannerAdapter, never()).loadAd();
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
index db3ba013..fd6ed577 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
@@ -3,6 +3,7 @@
 import android.content.ComponentName;
 import android.content.Intent;
 import android.view.View;
+import android.view.WindowManager;
 import android.widget.ImageButton;
 import com.mopub.mobileads.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestMraidViewFactory;
@@ -14,16 +15,18 @@
 import org.robolectric.Robolectric;
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
 
-import static com.mopub.mobileads.BaseActivity.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.BaseActivity.HTML_INTERSTITIAL_INTENT_FILTER;
-import static com.mopub.mobileads.BaseActivity.SOURCE_KEY;
+import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.BaseInterstitialActivity.HTML_INTERSTITIAL_INTENT_FILTER;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.verify;
+import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
-public class MraidActivityTest extends BaseActivityTest {
+public class MraidActivityTest extends BaseInterstitialActivityTest {
 
     private MraidView mraidView;
 
@@ -49,6 +52,24 @@ public void onCreate_shouldSetupAnMraidView() throws Exception {
         verify(mraidView).loadHtmlData(EXPECTED_SOURCE);
     }
 
+    @Test
+    public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
+        Intent expectedIntent = new Intent(ACTION_INTERSTITIAL_SHOW);
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, HTML_INTERSTITIAL_INTENT_FILTER);
+
+        subject.onCreate(null);
+
+        verify(broadcastReceiver).onReceive(eq(subject), eq(expectedIntent));
+    }
+
+    @Test
+    public void onCreate_shouldSetHardwareAcceleratedFlag() throws Exception {
+        subject.onCreate(null);
+
+        boolean hardwareAccelerated = shadowOf(subject.getWindow()).getFlag(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
+        assertThat(hardwareAccelerated).isTrue();
+    }
+
     @Test
     public void onDestroy_DestroyMraidView() throws Exception {
         Intent expectedIntent = new Intent(ACTION_INTERSTITIAL_DISMISS);
@@ -113,10 +134,27 @@ public void getAdView_shouldSetupOnCloseListener() throws Exception {
         ANDROID.assertThat(subject).isFinishing();
     }
 
+    @Test
+    public void onPause_shouldOnPauseMraidView() throws Exception {
+        subject.onCreate(null);
+        ((MraidActivity)subject).onPause();
+
+        verify(mraidView).onPause();
+    }
+
+    @Test
+    public void onResume_shouldResumeMraidView() throws Exception {
+        subject.onCreate(null);
+        ((MraidActivity)subject).onPause();
+        ((MraidActivity)subject).onResume();
+
+        verify(mraidView).onResume();
+    }
+
     private Intent createMraidActivityIntent(String expectedSource) {
         Intent mraidActivityIntent = new Intent();
         mraidActivityIntent.setComponent(new ComponentName("", ""));
-        mraidActivityIntent.putExtra(SOURCE_KEY, expectedSource);
+        mraidActivityIntent.putExtra(HTML_RESPONSE_BODY_KEY, expectedSource);
         return mraidActivityIntent;
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidBannerTest.java
index 4bc2844d..74eba2b7 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidBannerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidBannerTest.java
@@ -10,7 +10,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import static com.mopub.mobileads.AdFetcher.MRAID_HTML_DATA;
+import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
 import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
 import static com.mopub.mobileads.MraidView.OnCloseListener;
@@ -46,12 +46,12 @@ public void setUp() throws Exception {
         bannerListener = mock(CustomEventBanner.CustomEventBannerListener.class);
         localExtras = new HashMap<String, Object>();
         serverExtras = new HashMap<String, String>();
-        serverExtras.put(MRAID_HTML_DATA, INPUT_HTML_DATA);
+        serverExtras.put(HTML_RESPONSE_BODY_KEY, INPUT_HTML_DATA);
     }
 
     @Test
     public void loadBanner_whenExtrasAreMalformed_shouldNotifyBannerListenerAndReturn() throws Exception {
-        serverExtras.remove(MRAID_HTML_DATA);
+        serverExtras.remove(HTML_RESPONSE_BODY_KEY);
         subject.loadBanner(context, bannerListener, localExtras, serverExtras);
 
         verify(bannerListener).onBannerFailed(eq(MRAID_LOAD_ERROR));
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidInterstitialTest.java
index 3a303db9..96ab74ec 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidInterstitialTest.java
@@ -7,16 +7,17 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
 import org.robolectric.shadows.ShadowActivity;
+import org.robolectric.shadows.ShadowLocalBroadcastManager;
 
 import java.util.HashMap;
 import java.util.Map;
 
-import static com.mopub.mobileads.AdFetcher.MRAID_HTML_DATA;
-import static com.mopub.mobileads.BaseActivity.SOURCE_KEY;
+import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
@@ -26,7 +27,7 @@
 @RunWith(SdkTestRunner.class)
 public class MraidInterstitialTest {
     private MraidInterstitial subject;
-    private CustomEventInterstitialListener interstitialListener;
+    private CustomEventInterstitialListener customEventInterstitialListener;
     private Map<String,Object> localExtras;
     private Map<String,String> serverExtras;
     private Context context;
@@ -37,39 +38,31 @@
     public void setUp() throws Exception {
         subject = new MraidInterstitial();
         context = new Activity();
-        interstitialListener = mock(CustomEventInterstitialListener.class);
+        customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
         localExtras = new HashMap<String, Object>();
         serverExtras = new HashMap<String, String>();
-        serverExtras.put(MRAID_HTML_DATA, INPUT_HTML_DATA);
-    }
-
-    @Test
-    public void loadBanner_withNonActivityContext_shouldNotifyInterstialFailed() throws Exception {
-        subject.loadInterstitial(Robolectric.application, interstitialListener, localExtras, serverExtras);
-
-        verify(interstitialListener).onInterstitialFailed(MRAID_LOAD_ERROR);
-        verify(interstitialListener, never()).onInterstitialLoaded();
+        serverExtras.put(HTML_RESPONSE_BODY_KEY, INPUT_HTML_DATA);
     }
 
     @Test
     public void loadBanner_withMalformedServerExtras_shouldNotifyInterstitialFailed() throws Exception {
-        serverExtras.remove(MRAID_HTML_DATA);
-        subject.loadInterstitial(context, interstitialListener, localExtras, serverExtras);
+        serverExtras.remove(HTML_RESPONSE_BODY_KEY);
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
 
-        verify(interstitialListener).onInterstitialFailed(MRAID_LOAD_ERROR);
-        verify(interstitialListener, never()).onInterstitialLoaded();
+        verify(customEventInterstitialListener).onInterstitialFailed(NETWORK_INVALID_STATE);
+        verify(customEventInterstitialListener, never()).onInterstitialLoaded();
     }
 
     @Test
     public void loadInterstitial_shouldNotifyInterstitialLoaded() throws Exception {
-        subject.loadInterstitial(context, interstitialListener, localExtras, serverExtras);
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
 
-        verify(interstitialListener).onInterstitialLoaded();
+        verify(customEventInterstitialListener).onInterstitialLoaded();
     }
 
     @Test
     public void showInterstitial_shouldStartActivityWithIntent() throws Exception {
-        subject.loadInterstitial(context, interstitialListener, localExtras, serverExtras);
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
         subject.showInterstitial();
 
         ShadowActivity shadowActivity = shadowOf_(context);
@@ -77,6 +70,40 @@ public void showInterstitial_shouldStartActivityWithIntent() throws Exception {
 
         assertThat(intent.getComponent().getPackageName()).isEqualTo("com.mopub.mobileads");
         assertThat(intent.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MraidActivity");
-        assertThat(intent.getExtras().get(SOURCE_KEY)).isEqualTo(EXPECTED_HTML_DATA);
+        assertThat(intent.getExtras().get(HTML_RESPONSE_BODY_KEY)).isEqualTo(EXPECTED_HTML_DATA);
+        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
+    }
+
+    @Test
+    public void loadInterstitial_shouldConnectListenerToBroadcastReceiver() throws Exception {
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+
+        Intent intent;
+        intent = new Intent(ACTION_INTERSTITIAL_SHOW);
+        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        verify(customEventInterstitialListener).onInterstitialShown();
+
+        intent = new Intent(ACTION_INTERSTITIAL_DISMISS);
+        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        verify(customEventInterstitialListener).onInterstitialDismissed();
+    }
+
+    @Test
+    public void onInvalidate_shouldDisconnectListenerToBroadcastReceiver() throws Exception {
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+        subject.onInvalidate();
+
+        Intent intent;
+        intent = new Intent(ACTION_INTERSTITIAL_SHOW);
+        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        verify(customEventInterstitialListener, never()).onInterstitialShown();
+
+        intent = new Intent(ACTION_INTERSTITIAL_DISMISS);
+        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        verify(customEventInterstitialListener, never()).onInterstitialDismissed();
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/TaskTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/TaskTrackerTest.java
new file mode 100644
index 00000000..604fed40
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/TaskTrackerTest.java
@@ -0,0 +1,66 @@
+package com.mopub.mobileads;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+public class TaskTrackerTest {
+
+    private TaskTracker taskTracker;
+
+    @Before
+    public void setUp() throws Exception {
+        taskTracker = new TaskTracker();
+    }
+
+    @Test
+    public void newTaskStarted_shouldIncrementIdsFromNegativeOne() throws Exception {
+        assertThat(taskTracker.getCurrentTaskId()).isEqualTo(-1);
+
+        taskTracker.newTaskStarted();
+
+        assertThat(taskTracker.getCurrentTaskId()).isEqualTo(0);
+    }
+
+    @Test
+    public void isMostCurrentTask_onFirstTask_whenSecondTaskIsCompleted_shouldBeFalse() throws Exception {
+        taskTracker.newTaskStarted();
+        taskTracker.newTaskStarted();
+        taskTracker.markTaskCompleted(taskTracker.getCurrentTaskId());
+
+        assertThat(taskTracker.isMostCurrentTask(0)).isFalse();
+    }
+
+    @Test
+    public void isMostCurrentTask_onFirstTask_whenSecondTaskIsNotCompleted_shouldBeTrue() throws Exception {
+        taskTracker.newTaskStarted();
+        taskTracker.newTaskStarted();
+
+        assertThat(taskTracker.isMostCurrentTask(0)).isTrue();
+    }
+
+    @Test
+    public void mostCurrentTaskIsLastCompletedTaskOrLater() throws Exception {
+        taskTracker.newTaskStarted();
+        taskTracker.newTaskStarted();
+        taskTracker.newTaskStarted();
+        taskTracker.markTaskCompleted(1);
+
+        assertThat(taskTracker.isMostCurrentTask(0)).isFalse();
+        assertThat(taskTracker.isMostCurrentTask(1)).isTrue();
+        assertThat(taskTracker.isMostCurrentTask(2)).isTrue();
+    }
+
+    @Test
+    public void markTaskCompleted_shouldKeepTrackOfMostCurrentTaskRegardlessOfCompletionOrder() throws Exception {
+        taskTracker.newTaskStarted();
+        taskTracker.newTaskStarted();
+        taskTracker.newTaskStarted();
+        taskTracker.markTaskCompleted(1);
+        taskTracker.markTaskCompleted(0);
+
+        assertThat(taskTracker.isMostCurrentTask(0)).isFalse();
+        assertThat(taskTracker.isMostCurrentTask(1)).isTrue();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java
new file mode 100644
index 00000000..adfb3962
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java
@@ -0,0 +1,33 @@
+package com.mopub.mobileads.factories;
+
+import com.mopub.mobileads.CustomEventBanner;
+import com.mopub.mobileads.test.support.SdkTestRunner;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static com.mopub.mobileads.AdTypeTranslator.HTML_BANNER;
+import static com.mopub.mobileads.AdTypeTranslator.MRAID_BANNER;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class CustomEventBannerFactoryTest {
+
+    private CustomEventBannerFactory subject;
+
+    @Before
+    public void setup() {
+        subject = new CustomEventBannerFactory();
+    }
+
+    @Test
+    public void create_shouldCreateBanners() throws Exception {
+        assertCustomEventClassCreated(MRAID_BANNER);
+        assertCustomEventClassCreated(HTML_BANNER);
+    }
+
+    private void assertCustomEventClassCreated(String customEventName) throws Exception {
+        CustomEventBanner customEventBanner = subject.internalCreate(customEventName);
+        assertThat(customEventBanner.getClass().getName()).isEqualTo(customEventName);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java
new file mode 100644
index 00000000..c9519525
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java
@@ -0,0 +1,33 @@
+package com.mopub.mobileads.factories;
+
+import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.test.support.SdkTestRunner;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static com.mopub.mobileads.AdTypeTranslator.HTML_INTERSTITIAL;
+import static com.mopub.mobileads.AdTypeTranslator.MRAID_INTERSTITIAL;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class CustomEventInterstitialFactoryTest {
+
+    private CustomEventInterstitialFactory subject;
+
+    @Before
+    public void setup() {
+        subject = new CustomEventInterstitialFactory();
+    }
+
+    @Test
+    public void create_shouldCreateInterstitials() throws Exception {
+        assertCustomEventClassCreated(MRAID_INTERSTITIAL);
+        assertCustomEventClassCreated(HTML_INTERSTITIAL);
+    }
+
+    private void assertCustomEventClassCreated(String customEventName) throws Exception {
+        CustomEventInterstitial customEventInterstitial = subject.internalCreate(customEventName);
+        assertThat(customEventInterstitial.getClass().getName()).isEqualTo(customEventName);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactoryTest.java
new file mode 100644
index 00000000..efdb8df1
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactoryTest.java
@@ -0,0 +1,47 @@
+package com.mopub.mobileads.factories;
+
+import android.app.Activity;
+import com.mopub.mobileads.HtmlBannerWebView;
+import com.mopub.mobileads.test.support.SdkTestRunner;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+
+@RunWith(SdkTestRunner.class)
+public class HtmlBannerWebViewFactoryTest {
+
+    private HtmlBannerWebViewFactory subject;
+    private CustomEventBannerListener customEventBannerListener;
+
+    @Before
+    public void setUp() throws Exception {
+        subject = new HtmlBannerWebViewFactory();
+        Activity context = new Activity();
+        HtmlBannerWebViewFactory.initialize(context);
+        customEventBannerListener = mock(CustomEventBannerListener.class);
+    }
+
+    @Test
+    public void internalCreate_shouldCreateHtmlWebView() throws Exception {
+        HtmlBannerWebView htmlBannerWebView = subject.internalCreate(customEventBannerListener, false, null, null);
+        assertThat(htmlBannerWebView).isNotNull();
+    }
+
+    @Test
+    public void shouldBeAbleToReinitialize() throws Exception {
+        HtmlBannerWebViewFactory.setInstance(subject);
+        HtmlBannerWebViewFactory.initialize(new Activity());
+
+        assertThat(HtmlBannerWebViewFactory.create(null, false, "", "")).isNotNull();
+
+        HtmlBannerWebViewFactory.cleanup();
+        HtmlBannerWebViewFactory.initialize(new Activity());
+
+        assertThat(HtmlBannerWebViewFactory.create(null, false, "", "")).isNotNull();
+    }
+
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlBannerWebViewPoolTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlBannerWebViewPoolTest.java
new file mode 100644
index 00000000..88f40e23
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlBannerWebViewPoolTest.java
@@ -0,0 +1,57 @@
+package com.mopub.mobileads.factories;
+
+import android.app.Activity;
+import com.mopub.mobileads.CustomEventBanner;
+import com.mopub.mobileads.HtmlBannerWebView;
+import com.mopub.mobileads.test.support.SdkTestRunner;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import java.util.HashSet;
+import java.util.Set;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.robolectric.Robolectric.shadowOf;
+
+@RunWith(SdkTestRunner.class)
+public class HtmlBannerWebViewPoolTest {
+    private HtmlBannerWebViewPool subject;
+    private Activity context;
+    private CustomEventBanner.CustomEventBannerListener customEventBannerListener;
+    private boolean isScrollable;
+    private String redirectUrl;
+    private String clickthroughUrl;
+
+    @Before
+    public void setUp() throws Exception {
+        context = new Activity();
+        subject = new HtmlBannerWebViewPool(context);
+        customEventBannerListener = mock(CustomEventBanner.CustomEventBannerListener.class);
+        isScrollable = false;
+        redirectUrl = "redirectUrl";
+        clickthroughUrl = "clickthroughUrl";
+    }
+
+    @Test
+    public void getNextHtmlWebView_shouldReturnHtmlWebView() throws Exception {
+        HtmlBannerWebView returnValue = subject.getNextHtmlWebView(customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl);
+
+        assertThat(returnValue).isNotNull();
+        assertThat(returnValue).isInstanceOf(HtmlBannerWebView.class);
+        assertThat(shadowOf(returnValue).getWebViewClient()).isNotNull();
+    }
+
+    @Test
+    public void getNextHtmlWebView_shouldContinuouslyReturnUniqueHtmlWebViews() throws Exception {
+        Set<HtmlBannerWebView> htmlBannerWebViews = new HashSet<HtmlBannerWebView>();
+        int expectedNewHtmlWebViewCount = HtmlBannerWebViewPool.POOL_SIZE * 2;
+
+        for (int i = 0; i < expectedNewHtmlWebViewCount; i++) {
+            htmlBannerWebViews.add(subject.getNextHtmlWebView(customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl));
+        }
+
+        assertThat(htmlBannerWebViews.size()).isEqualTo(expectedNewHtmlWebViewCount);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactoryTest.java
new file mode 100644
index 00000000..db62b555
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactoryTest.java
@@ -0,0 +1,30 @@
+package com.mopub.mobileads.factories;
+
+import android.app.Activity;
+import com.mopub.mobileads.test.support.SdkTestRunner;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+
+@RunWith(SdkTestRunner.class)
+public class HtmlInterstitialWebViewFactoryTest {
+    @Before
+    public void setup() {
+        HtmlInterstitialWebViewFactory.setInstance(new HtmlInterstitialWebViewFactory());
+    }
+
+    @Test
+    public void shouldBeAbleToReinitialize() throws Exception {
+        HtmlInterstitialWebViewFactory.initialize(new Activity());
+
+        assertThat(HtmlInterstitialWebViewFactory.create(null, false, "", "")).isNotNull();
+
+        HtmlInterstitialWebViewFactory.cleanup();
+        HtmlInterstitialWebViewFactory.initialize(new Activity());
+
+        assertThat(HtmlInterstitialWebViewFactory.create(null, false, "", "")).isNotNull();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewPoolTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewPoolTest.java
new file mode 100644
index 00000000..d64bbb29
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewPoolTest.java
@@ -0,0 +1,57 @@
+package com.mopub.mobileads.factories;
+
+import android.app.Activity;
+import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.HtmlInterstitialWebView;
+import com.mopub.mobileads.test.support.SdkTestRunner;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import java.util.HashSet;
+import java.util.Set;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.robolectric.Robolectric.shadowOf;
+
+@RunWith(SdkTestRunner.class)
+public class HtmlInterstitialWebViewPoolTest {
+    private HtmlInterstitialWebViewPool subject;
+    private Activity context;
+    private CustomEventInterstitial.CustomEventInterstitialListener customEventInterstitialListener;
+    private boolean isScrollable;
+    private String redirectUrl;
+    private String clickthroughUrl;
+
+    @Before
+    public void setUp() throws Exception {
+        context = new Activity();
+        subject = new HtmlInterstitialWebViewPool(context);
+        customEventInterstitialListener = mock(CustomEventInterstitial.CustomEventInterstitialListener.class);
+        isScrollable = false;
+        redirectUrl = "redirectUrl";
+        clickthroughUrl = "clickthroughUrl";
+    }
+
+    @Test
+    public void getNextHtmlWebView_shouldReturnHtmlWebView() throws Exception {
+        HtmlInterstitialWebView returnValue = subject.getNextHtmlWebView(customEventInterstitialListener, isScrollable, redirectUrl, clickthroughUrl);
+
+        assertThat(returnValue).isNotNull();
+        assertThat(returnValue).isInstanceOf(HtmlInterstitialWebView.class);
+        assertThat(shadowOf(returnValue).getWebViewClient()).isNotNull();
+    }
+
+    @Test
+    public void getNextHtmlWebView_shouldContinuouslyReturnUniqueHtmlWebViews() throws Exception {
+        Set<HtmlInterstitialWebView> htmlInterstitialWebViews = new HashSet<HtmlInterstitialWebView>();
+        int expectedNewHtmlWebViewCount = HtmlInterstitialWebViewPool.POOL_SIZE * 2;
+
+        for (int i = 0; i < expectedNewHtmlWebViewCount; i++) {
+            htmlInterstitialWebViews.add(subject.getNextHtmlWebView(customEventInterstitialListener, isScrollable, redirectUrl, clickthroughUrl));
+        }
+
+        assertThat(htmlInterstitialWebViews.size()).isEqualTo(expectedNewHtmlWebViewCount);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/FileUtil.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/FileUtil.java
deleted file mode 100644
index 1139fbf6..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/FileUtil.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import java.io.BufferedReader;
-import java.io.FileReader;
-import java.io.IOException;
-
-public class FileUtil {
-    public static String asString(String filename) {
-        try {
-            BufferedReader reader;
-            reader = new BufferedReader(new FileReader(filename));
-            String line;
-            StringBuilder stringBuilder = new StringBuilder();
-            String ls = System.getProperty("line.separator");
-
-            while ((line = reader.readLine()) != null) {
-                stringBuilder.append(line);
-                stringBuilder.append(ls);
-            }
-
-            return stringBuilder.toString();
-        } catch (IOException e) {
-            throw new RuntimeException(e);
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/SdkTestRunner.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/SdkTestRunner.java
index b4ddf3e8..6fcd3ed1 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/SdkTestRunner.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/SdkTestRunner.java
@@ -31,6 +31,9 @@ public void prepareTest(Object test) {
             MraidViewFactory.setInstance(new TestMraidViewFactory());
             MoPubViewFactory.setInstance(new TestMoPubViewFactory());
             CustomEventInterstitialAdapterFactory.setInstance(new TestCustomEventInterstitialAdapterFactory());
+            HtmlBannerWebViewFactory.setInstance(new TestHtmlBannerWebViewFactory());
+            HtmlInterstitialWebViewFactory.setInstance(new TestHtmlInterstitialWebViewFactory());
+            AdViewControllerFactory.setInstance(new TestAdViewControllerFactory());
 
             MockitoAnnotations.initMocks(test);
         }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdFetcherFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdFetcherFactory.java
index 3129bba2..dd7b5f34 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdFetcherFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdFetcherFactory.java
@@ -7,10 +7,14 @@
 import static org.mockito.Mockito.mock;
 
 public class TestAdFetcherFactory extends AdFetcherFactory {
-    private AdFetcher mockFetcher = mock(AdFetcher.class);
+    private AdFetcher mockAdFetcher = mock(AdFetcher.class);
+
+    public static AdFetcher getSingletonMock() {
+        return ((TestAdFetcherFactory)AdFetcherFactory.instance).mockAdFetcher;
+    }
 
     @Override
     public AdFetcher internalCreate(AdViewController adViewController, String userAgent) {
-        return mockFetcher;
+        return mockAdFetcher;
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdViewControllerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdViewControllerFactory.java
new file mode 100644
index 00000000..6d79fd27
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdViewControllerFactory.java
@@ -0,0 +1,21 @@
+package com.mopub.mobileads.test.support;
+
+import android.content.Context;
+import com.mopub.mobileads.AdViewController;
+import com.mopub.mobileads.MoPubView;
+import com.mopub.mobileads.factories.AdViewControllerFactory;
+
+import static org.mockito.Mockito.mock;
+
+public class TestAdViewControllerFactory extends AdViewControllerFactory {
+    private AdViewController mockAdViewController = mock(AdViewController.class);
+
+    public static AdViewController getSingletonMock() {
+        return ((TestAdViewControllerFactory) AdViewControllerFactory.instance).mockAdViewController;
+    }
+
+    @Override
+    protected AdViewController internalCreate(Context context, MoPubView moPubView) {
+        return mockAdViewController;
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java
new file mode 100644
index 00000000..aa081ef8
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java
@@ -0,0 +1,61 @@
+package com.mopub.mobileads.test.support;
+
+import android.webkit.WebSettings;
+import com.mopub.mobileads.HtmlBannerWebView;
+import com.mopub.mobileads.factories.HtmlBannerWebViewFactory;
+import com.mopub.mobileads.factories.HtmlBannerWebViewPool;
+
+import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.stub;
+
+public class TestHtmlBannerWebViewFactory extends HtmlBannerWebViewFactory {
+    private HtmlBannerWebView mockHtmlBannerWebView = mock(HtmlBannerWebView.class);
+    private CustomEventBannerListener mLatestListener;
+    private boolean mLatestIsScrollable;
+    private String mLatestRedirectUrl;
+    private String mLatestClickthroughUrl;
+
+    public TestHtmlBannerWebViewFactory() {
+        WebSettings webSettings = mock(WebSettings.class);
+        stub(mockHtmlBannerWebView.getSettings()).toReturn(webSettings);
+        stub(webSettings.getUserAgentString()).toReturn("Mozilla/5.0 (Linux; U; Android 4.0.3; ko-kr; LG-L160L Build/IML74K) AppleWebkit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30");
+    }
+
+    public static HtmlBannerWebView getSingletonMock() {
+        return getInstance().mockHtmlBannerWebView;
+    }
+
+    public static CustomEventBannerListener getLatestListener() {
+        return getInstance().mLatestListener;
+    }
+
+    public static boolean getLatestIsScrollable() {
+        return getInstance().mLatestIsScrollable;
+    }
+
+    public static String getLatestRedirectUrl() {
+        return getInstance().mLatestRedirectUrl;
+    }
+
+    public static String getLatestClickthroughUrl() {
+        return getInstance().mLatestClickthroughUrl;
+    }
+
+    private static TestHtmlBannerWebViewFactory getInstance() {
+        return (TestHtmlBannerWebViewFactory) instance;
+    }
+
+    @Override
+    public HtmlBannerWebView internalCreate(CustomEventBannerListener customEventBannerListener, boolean isScrollable, String redirectUrl, String clickthroughUrl) {
+        mLatestListener = customEventBannerListener;
+        mLatestIsScrollable = isScrollable;
+        mLatestRedirectUrl = redirectUrl;
+        mLatestClickthroughUrl = clickthroughUrl;
+        return getSingletonMock();
+    }
+
+    public static HtmlBannerWebViewPool getWebViewPool() {
+        return getInstance().mHtmlBannerWebViewPool;
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java
new file mode 100644
index 00000000..62a904ee
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java
@@ -0,0 +1,54 @@
+package com.mopub.mobileads.test.support;
+
+import com.mopub.mobileads.HtmlInterstitialWebView;
+import com.mopub.mobileads.factories.HtmlInterstitialWebViewFactory;
+import com.mopub.mobileads.factories.HtmlInterstitialWebViewPool;
+
+import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+import static org.mockito.Mockito.mock;
+
+public class TestHtmlInterstitialWebViewFactory extends HtmlInterstitialWebViewFactory {
+    private HtmlInterstitialWebView mockHtmlInterstitialWebView = mock(HtmlInterstitialWebView.class);
+
+    private CustomEventInterstitialListener mLatestListener;
+    private boolean mLatestIsScrollable;
+    private String mLatestRedirectUrl;
+    private String mLatestClickthroughUrl;
+
+
+    @Override
+    public HtmlInterstitialWebView internalCreate(CustomEventInterstitialListener customEventInterstitialListener, boolean isScrollable, String redirectUrl, String clickthroughUrl) {
+        mLatestListener = customEventInterstitialListener;
+        mLatestIsScrollable = isScrollable;
+        mLatestRedirectUrl = redirectUrl;
+        mLatestClickthroughUrl = clickthroughUrl;
+        return getInstance().mockHtmlInterstitialWebView;
+    }
+
+    private static TestHtmlInterstitialWebViewFactory getInstance() {
+        return (TestHtmlInterstitialWebViewFactory) instance;
+    }
+
+    public static HtmlInterstitialWebView getSingletonMock() {
+        return getInstance().mockHtmlInterstitialWebView;
+    }
+
+    public static CustomEventInterstitialListener getLatestListener() {
+        return getInstance().mLatestListener;
+    }
+
+    public static boolean getLatestIsScrollable() {
+        return getInstance().mLatestIsScrollable;
+    }
+    public static String getLatestRedirectUrl() {
+        return getInstance().mLatestRedirectUrl;
+    }
+
+    public static String getLatestClickthroughUrl() {
+        return getInstance().mLatestClickthroughUrl;
+    }
+
+    public static HtmlInterstitialWebViewPool getWebViewPool() {
+        return getInstance().mHtmlInterstitialWebViewPool;
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpResponsesTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpResponsesTest.java
new file mode 100644
index 00000000..f33e2f26
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpResponsesTest.java
@@ -0,0 +1,38 @@
+package com.mopub.mobileads.util;
+
+import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+public class HttpResponsesTest {
+
+    private TestHttpResponseWithHeaders response;
+
+    @Before
+    public void setup() {
+        response = new TestHttpResponseWithHeaders(200, "all is well");
+    }
+
+    @Test
+    public void extractBooleanHeader_whenValueIsZero_shouldReturnFalse() throws Exception {
+        response.addHeader("name", "0");
+
+        assertThat(HttpResponses.extractBooleanHeader(response, "name")).isFalse();
+    }
+
+    @Test
+    public void extractBooleanHeader_whenValueIsOne_shouldReturnTrue() throws Exception {
+        response.addHeader("name", "1");
+
+        assertThat(HttpResponses.extractBooleanHeader(response, "name")).isTrue();
+    }
+
+    @Test
+    public void extractBooleanHeader_shouldDefaultToTrue() throws Exception {
+        // no header added to response
+
+        assertThat(HttpResponses.extractBooleanHeader(response, "name")).isTrue();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/StringsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/StringsTest.java
new file mode 100644
index 00000000..8b03f02a
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/StringsTest.java
@@ -0,0 +1,19 @@
+package com.mopub.mobileads.util;
+
+import com.mopub.mobileads.test.support.SdkTestRunner;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class StringsTest {
+    @Test
+    public void isEmpty_shouldReturnValidResponse() throws Exception {
+        assertThat(Strings.isEmpty("")).isTrue();
+
+        assertThat(Strings.isEmpty("test")).isFalse();
+
+        assertThat(Strings.isEmpty(null)).isFalse();
+    }
+}
diff --git a/robotium-sample/pom.xml b/robotium-sample/pom.xml
index d1148033..73df9a7c 100644
--- a/robotium-sample/pom.xml
+++ b/robotium-sample/pom.xml
@@ -23,7 +23,7 @@
             <groupId>com.mopub.mobileads</groupId>
             <artifactId>mopub-sdk</artifactId>
             <version>1.0.0-SNAPSHOT</version>
-            <type>apklib</type>
+            <type>jar</type>
         </dependency>
 
 
diff --git a/robotium-tests/src/main/java/com/mopub/mobileads/test/RobotiumTestSupportActivityTest.java b/robotium-tests/src/main/java/com/mopub/mobileads/test/RobotiumTestSupportActivityTest.java
index 01e3775c..8e14fcd4 100644
--- a/robotium-tests/src/main/java/com/mopub/mobileads/test/RobotiumTestSupportActivityTest.java
+++ b/robotium-tests/src/main/java/com/mopub/mobileads/test/RobotiumTestSupportActivityTest.java
@@ -1,12 +1,13 @@
 package com.mopub.mobileads.test;
 
-import android.*;
 import android.R;
 import android.test.ActivityInstrumentationTestCase2;
 import com.jayway.android.robotium.solo.Solo;
 import com.mopub.mobileads.*;
 import com.mopub.mobileads.robotium.RobotiumTestSupportActivity;
 
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialAdListener;
+
 public class RobotiumTestSupportActivityTest extends ActivityInstrumentationTestCase2<RobotiumTestSupportActivity>{
     private Solo solo;
 
@@ -138,10 +139,11 @@ void reset() {
         }
     }
 
-    private static class TestInterstitialAdListener implements MoPubInterstitial.InterstitialAdListener {
+    private static class TestInterstitialAdListener implements InterstitialAdListener {
         private boolean interstitialWasLoaded;
         private boolean interstitialWasShown;
         private boolean interstitialWasDismissed;
+        private boolean interstitialWasClicked;
 
         private boolean interstitialWasLoaded() {
             return interstitialWasLoaded;
@@ -151,6 +153,10 @@ private boolean interstitialWasShown() {
             return interstitialWasShown;
         }
 
+        private boolean isInterstitialWasClicked() {
+            return interstitialWasClicked;
+        }
+
         public boolean interstitialWasDismissed() {
             return interstitialWasDismissed;
         }
@@ -169,6 +175,11 @@ public void onInterstitialShown(MoPubInterstitial interstitial) {
             interstitialWasShown = true;
         }
 
+        @Override
+        public void onInterstitialClicked(MoPubInterstitial interstitial) {
+            interstitialWasClicked = true;
+        }
+
         @Override
         public void onInterstitialDismissed(MoPubInterstitial interstitial) {
             interstitialWasDismissed = true;
@@ -177,6 +188,7 @@ public void onInterstitialDismissed(MoPubInterstitial interstitial) {
         void reset() {
             interstitialWasLoaded = false;
             interstitialWasShown = false;
+            interstitialWasClicked = false;
             interstitialWasDismissed = false;
         }
     }
diff --git a/script/__init__.py b/script/__init__.py
new file mode 100644
index 00000000..e69de29b
diff --git a/script/check_extras b/script/check_extras
new file mode 100755
index 00000000..33c497f9
--- /dev/null
+++ b/script/check_extras
@@ -0,0 +1,40 @@
+#!/usr/bin/python
+import os
+
+import shared_values
+import git_helper
+import os_helper
+
+def filepaths_match(filepath1, filepath2):
+    return os.system('diff -q ' + filepath1 + ' ' + filepath2) == 0
+
+def check_current_extras():
+    demo_is_sane = True
+    robotium_is_sane = True
+    for filestem in shared_values.custom_events:
+        filename = filestem + '.java'
+        extras_filepath = shared_values.EXTRAS_ROOT + filename
+        demo_filepath = shared_values.DEMO_ROOT + filename
+        robotium_filepath = shared_values.ROBOTIUM_ROOT + filename
+        
+        if not os.path.exists(extras_filepath) :
+            print extras_filepath + ' does not exist. Something is wrong. Exiting.'
+            exit(1)
+
+        if os.path.exists(demo_filepath) : 
+            print 'checking simpleadsdemo: ' + filestem
+            demo_is_sane = filepaths_match(extras_filepath, demo_filepath) and demo_is_sane
+        
+        if os.path.exists(robotium_filepath) : 
+            print 'checking robotium: ' + filestem
+            robotium_is_sane = filepaths_match(extras_filepath, robotium_filepath) and robotium_is_sane
+
+    return demo_is_sane and robotium_is_sane
+
+original_branch = git_helper.git_current_branch()
+for branch in shared_values.branches_synced_with_master:
+    os_helper.try_system_quiet('git co ' + branch)
+    if not check_current_extras() :
+        print 'Problem in branch: ' + branch + "\n"
+
+os_helper.system_quiet('git co ' + original_branch)
diff --git a/script/git_helper.py b/script/git_helper.py
new file mode 100644
index 00000000..8ec7e1c3
--- /dev/null
+++ b/script/git_helper.py
@@ -0,0 +1,5 @@
+#!/usr/bin/python
+import os_helper
+
+def git_current_branch():
+    return os_helper.system_stdout('git rev-parse --abbrev-ref HEAD').rstrip()
diff --git a/script/git_helper.pyc b/script/git_helper.pyc
new file mode 100644
index 00000000..1b529618
Binary files /dev/null and b/script/git_helper.pyc differ
diff --git a/script/make_bundles b/script/make_bundles
index 6a1ca196..a1f72ed2 100755
--- a/script/make_bundles
+++ b/script/make_bundles
@@ -3,10 +3,9 @@
 import os
 import boto
 import re
-from os import listdir, system, chdir, environ
-from os.path import isfile, join
-from boto.s3.connection import S3Connection
-from boto.s3.key import Key
+import boto
+
+import os_helper
 
 BUCKET_NAME = 'mopub-android-sdk'
 BASE_FILENAME = 'mopub-android-base-sdk'
@@ -14,12 +13,11 @@ FULL_FILENAME = 'mopub-android-full-sdk'
 AWS_ID = 'AWS_ACCESS_KEY_ID'
 AWS_SECRET = 'AWS_SECRET_ACCESS_KEY'
 
-TEMP_STAGING_PATH = '/tmp/mopub-staging'
 TEMP_SDK_PATH = TEMP_STAGING_PATH + '/mopub-android-sdk/mopub-sdk'
 TEMP_MOPUB_PACKAGE = TEMP_SDK_PATH + '/src/main/java/com/mopub/mobileads'
+THIRD_PARTY_LIBS = TEMP_STAGING_PATH + '/mopub-android/libs'
 TEMP_BASE_SDK_ZIP_FILE = '/tmp/' + BASE_FILENAME + '.zip'
 TEMP_FULL_SDK_ZIP_FILE = '/tmp/' + FULL_FILENAME + '.zip'
-THIRD_PARTY_LIBS = TEMP_STAGING_PATH + '/mopub-android/libs'
 
 release_branch = 'master'
 if len(os.sys.argv) > 1:
@@ -27,38 +25,34 @@ if len(os.sys.argv) > 1:
 
 def clone_private_repo():
     print 'Cloning the mopub-android (private) repo'
-    system('git clone https://github.com/mopub/mopub-android.git')
-    chdir(TEMP_STAGING_PATH + '/mopub-android')
-    if system('git checkout ' + release_branch):
+    os.system('git clone https://github.com/mopub/mopub-android.git')
+    os.chdir(TEMP_STAGING_PATH + '/mopub-android')
+    if os.system('git checkout ' + release_branch):
         print 'couldn\'t check out' + release_branch
         exit(1)
-    chdir(TEMP_STAGING_PATH)
+    os.chdir(TEMP_STAGING_PATH)
 
 def start_sdk_staging():
-    os.chdir('/')
-    print 'Cleaning staging path'
-    system('rm -rf ' + TEMP_STAGING_PATH)
-    print 'Creating staging path'
-    system('mkdir -p ' + TEMP_STAGING_PATH)
+    os_helper.init_temp_staging()
     print 'Moving to staging path'
-    chdir(TEMP_STAGING_PATH)
+    os.chdir(TEMP_STAGING_PATH)
 
     clone_private_repo()
 
     print 'Cloning the mopub-android-sdk (public) repo'
-    system('git clone https://github.com/mopub/mopub-android-sdk.git')
-    system('rm ' + TEMP_SDK_PATH + '/*.iml')
+    os.system('git clone https://github.com/mopub/mopub-android-sdk.git')
+    os.system('rm ' + TEMP_SDK_PATH + '/*.iml')
 
 def create_base_bundle():
     print 'creating base bundle in /tmp'
     start_sdk_staging()
-    chdir('mopub-android-sdk')
-    system('zip -FSr ' + TEMP_BASE_SDK_ZIP_FILE + ' ' + 'mopub-sdk')
+    os.chdir('mopub-android-sdk')
+    os.system('zip -FSr ' + TEMP_BASE_SDK_ZIP_FILE + ' ' + 'mopub-sdk')
 
 def update_project_file():
     with open(TEMP_SDK_PATH + '/.classpath', 'r+w') as f:
         lines = list(f)
-        lines_to_add = [ jar for jar in listdir(THIRD_PARTY_LIBS) if isfile(join(THIRD_PARTY_LIBS, jar)) and jar.endswith('.jar') ]
+        lines_to_add = [ jar for jar in os.listdir(THIRD_PARTY_LIBS) if os.path.isfile(os.path.join(THIRD_PARTY_LIBS, jar)) and jar.endswith('.jar') ]
         lines_to_add = [ '\t<classpathentry kind="lib" path="libs/' + l + '"/>\n' for l in lines_to_add ]
         output_lines = lines[:-1] + lines_to_add + lines[-1:]
         f.seek(0)
@@ -73,18 +67,18 @@ def create_full_bundle():
     custom_events = ['MillennialBanner.java', 'MillennialInterstitial.java', 'GoogleAdMobBanner.java', 'GoogleAdMobInterstitial.java']
 
     for custom_event in custom_events:
-        system('cp ' + TEMP_STAGING_PATH + custom_event_folder + '/' + custom_event + ' ' + TEMP_MOPUB_PACKAGE)
+        os.system('cp ' + TEMP_STAGING_PATH + custom_event_folder + '/' + custom_event + ' ' + TEMP_MOPUB_PACKAGE)
 
     # copy jars (where do these come from?) into libs
-    system('mkdir -p ' + TEMP_SDK_PATH + '/libs')
-    system('cp ' + THIRD_PARTY_LIBS + '/* ' + TEMP_SDK_PATH + '/libs')
+    os.system('mkdir -p ' + TEMP_SDK_PATH + '/libs')
+    os.system('cp ' + THIRD_PARTY_LIBS + '/* ' + TEMP_SDK_PATH + '/libs')
 
     # modify .project file
     update_project_file()
 
     print 'creating full bundle in /tmp'
-    chdir('mopub-android-sdk')
-    system('zip -FSr ' + TEMP_FULL_SDK_ZIP_FILE + ' ' + 'mopub-sdk')
+    os.chdir('mopub-android-sdk')
+    os.system('zip -FSr ' + TEMP_FULL_SDK_ZIP_FILE + ' ' + 'mopub-sdk')
 
 def send_to_s3(bucket, source, destination):
     def get_version_number():
@@ -94,7 +88,7 @@ def send_to_s3(bucket, source, destination):
 
     def write_file_to_s3(destination):
         print 'adding ' + destination + ' to s3'
-        k = Key(bucket)
+        k = boto.s3.key.Key(bucket)
         k.key = destination + '.zip'
         k.set_contents_from_filename(source)
         k.set_acl('public-read')
@@ -110,11 +104,11 @@ create_base_bundle()
 create_full_bundle()
 
 print 'secret gpg magic'
-system('gpg ' + TEMP_STAGING_PATH + '/mopub-android-sdk/script/aws_keys.txt.gpg')
+os.system('gpg ' + TEMP_STAGING_PATH + '/mopub-android-sdk/script/aws_keys.txt.gpg')
 with open(TEMP_STAGING_PATH + '/mopub-android-sdk/script/aws_keys.txt') as f:
-    environ[AWS_ID] = f.readline().rstrip()
-    environ[AWS_SECRET] = f.readline().rstrip()
-system('rm script/aws_keys.txt')
+    os.environ[AWS_ID] = f.readline().rstrip()
+    os.environ[AWS_SECRET] = f.readline().rstrip()
+os.system('rm script/aws_keys.txt')
 
 print 'connecting to s3 using boto'
 conn = boto.connect_s3()
diff --git a/script/merge_master_into_everything b/script/merge_master_into_everything
index b606088a..2f15ad49 100755
--- a/script/merge_master_into_everything
+++ b/script/merge_master_into_everything
@@ -1,29 +1,17 @@
-#!/bin/sh
+#!/usr/bin/python
 
-set -e
+import os_helper
+import git_helper
+import shared_values
 
-git co master
-git pull
+original_branch = git_helper.git_current_branch()
 
-git co chartboost
-git merge master --no-edit
+os_helper.try_system_quiet('git co master')
+os_helper.try_system_quiet('git pull')
 
-git co millennial
-git merge master --no-edit
+for branch in shared_values.branches_synced_with_master:
+    print branch
+    os_helper.try_system('git co ' + branch)
+    os_helper.try_system('git merge master --no-edit')
 
-git co admob
-git merge master --no-edit
-
-git co greystripe
-git merge master --no-edit
-
-git co inmobi
-git merge master --no-edit
-
-git co html5adview
-git merge master --no-edit
-
-git co unity
-git merge master --no-edit
-
-git co master
\ No newline at end of file
+os_helper.system_quiet('git co ' + original_branch)
\ No newline at end of file
diff --git a/script/os_helper.py b/script/os_helper.py
new file mode 100644
index 00000000..805265cb
--- /dev/null
+++ b/script/os_helper.py
@@ -0,0 +1,49 @@
+import os
+import subprocess
+
+TEMP_STAGING_PATH = '/tmp/mopub-staging'
+
+def try_system(command):
+    popen = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, env=os.environ)
+    stdout, stderr = popen.communicate()    
+    if popen.returncode:
+        print 'error:\n\t' + command + '\nfailed, exiting'
+        print '"' + stderr + '"'
+        print '"' + stdout + '"'
+        exit(1)
+    if len(stdout) > 0:
+        print stdout
+    return stdout
+
+def try_system_quiet(command):
+    with open(os.devnull, 'wb') as devnull:
+        popen = subprocess.Popen(command, stdout=devnull, stderr=subprocess.STDOUT, shell=True, env=os.environ)
+        popen.communicate()
+    if popen.returncode:
+        print 'error:\n\t' + command + '\nfailed, exiting'
+        exit(1)
+
+def try_chdir(path):
+    if os.chdir(path):
+        print 'error: couldn\'t chdir to' + path + ', exiting'
+        exit(1)
+
+def system_stdout(command):
+    popen = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, env=os.environ)
+    stdout, stderr = popen.communicate()
+    return stdout
+
+def system_quiet(command):
+    with open(os.devnull, 'wb') as devnull:
+        popen = subprocess.Popen(command, stdout=devnull, stderr=subprocess.STDOUT, shell=True, env=os.environ)
+        popen.communicate()
+
+def system_echo(command):
+    print command
+    return os.system(command)
+
+def init_temp_staging() :
+    print 'Cleaning staging path'
+    os.system('rm -rf ' + TEMP_STAGING_PATH)
+    print 'Creating staging path'
+    os.system('mkdir -p ' + TEMP_STAGING_PATH)
diff --git a/script/os_helper.pyc b/script/os_helper.pyc
new file mode 100644
index 00000000..c85e0288
Binary files /dev/null and b/script/os_helper.pyc differ
diff --git a/script/os_try.pyc b/script/os_try.pyc
new file mode 100644
index 00000000..09cd587b
Binary files /dev/null and b/script/os_try.pyc differ
diff --git a/script/refresh_extras b/script/refresh_extras
index 630a889c..c2bd161e 100755
--- a/script/refresh_extras
+++ b/script/refresh_extras
@@ -2,19 +2,12 @@
 import shutil
 import os
 
-# todo this is fragile because we don't know our cwd
-
-DEMO_ROOT = 'mopub-sample/src/main/java/com/mopub/mobileads/'
-ROBOTIUM_ROOT = 'robotium-sample/src/main/java/com/mopub/mobileads/'
+import shared_values
 
 if len(os.sys.argv) < 2:
 	print 'usage: refresh_extras <filename>'
 	exit(1)
 
-custom_events = ['MillennialBanner', 'MillennialInterstitial', 'ChartboostInterstitial', 'GreystripeBanner', 'GreystripeInterstitial', 'InMobiBanner', 'InMobiInterstitial', 'GoogleAdMobBanner', 'GoogleAdMobInterstitial']
-duplicated_custom_events = ['MillennialBanner', 'MillennialInterstitial', 'ChartboostInterstitial', 'GoogleAdMobBanner', 'GoogleAdMobInterstitial']
-jars_to_copy = ['MillennialBanner', 'MillennialInterstitial', 'GoogleAdMobBanner', 'GoogleAdMobInterstitial']
-
 filestem = os.sys.argv[1]
 
 filename = filestem + '.java'
@@ -23,18 +16,18 @@ def three_arg_usage():
 	print 'usage: refresh_extras <filename> <simpleadsdemo|robotium>'
 	exit(1)
 
-if filestem in duplicated_custom_events:
+if filestem in shared_values.duplicated_custom_events:
 	# if it's a duplicated custom event, we expect 3 parameters!!
 	if len(os.sys.argv) < 3:
 		three_arg_usage()
 
 	source_path_type = os.sys.argv[2]
 	if source_path_type == 'simpleadsdemo':
-	    print 'copying ' + DEMO_ROOT + filename + ' to ' + ROBOTIUM_ROOT + filename
-	    shutil.copyfile(DEMO_ROOT + filename, ROBOTIUM_ROOT + filename)
+	    print 'copying ' + shared_values.DEMO_ROOT + filename + ' to ' + shared_values.ROBOTIUM_ROOT + filename
+	    shutil.copyfile(shared_values.DEMO_ROOT + filename, shared_values.ROBOTIUM_ROOT + filename)
 	elif source_path_type == 'robotium':
-	    print 'copying ' + ROBOTIUM_ROOT + filename + ' to ' + DEMO_ROOT + filename
-	    shutil.copyfile(ROBOTIUM_ROOT + filename, DEMO_ROOT + filename)
+	    print 'copying ' + shared_values.ROBOTIUM_ROOT + filename + ' to ' + shared_values.DEMO_ROOT + filename
+	    shutil.copyfile(shared_values.ROBOTIUM_ROOT + filename, shared_values.DEMO_ROOT + filename)
 	else:
 		three_arg_usage()
 
@@ -46,10 +39,10 @@ if filestem in duplicated_custom_events:
 	else:
 		print 'no changes in current repo, not committing'
 
-source_path = DEMO_ROOT + filename
+source_path = shared_values.DEMO_ROOT + filename
 
-if filestem in custom_events:
-	destination_path = 'extras/src/com/mopub/mobileads/' + filename
+if filestem in shared_values.custom_events:
+	destination_path = shared_values.EXTRAS_ROOT + filename
 else:
 	print 'error: no matching custom event for filename'
 	exit(1)
@@ -65,7 +58,7 @@ if os.system('git co master'):
 	exit(1)
 
 shutil.copyfile(temp_path, destination_path)
-if filestem in jars_to_copy:
+if filestem in shared_values.jars_to_copy:
 	os.system('cp /tmp/mopub_jars/* libs/.')
 
 if os.system('git add -A .'):
diff --git a/script/release b/script/release
index 3a622165..373040e8 100755
--- a/script/release
+++ b/script/release
@@ -2,28 +2,15 @@
 
 import os
 import re
-import subprocess
+
+import os_helper
 
 WORKSPACE = os.path.abspath('../')
 PRIVATE_REPO = WORKSPACE + '/mopub-android'
 PUBLIC_REPO = WORKSPACE + '/mopub-android-sdk'
 PRIVATE_MOPUB_SDK = PRIVATE_REPO + '/mopub-sdk/src/main/java/com/mopub/mobileads'
 
-def try_system(command):
-    popen = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, env=os.environ)
-    stdout, stderr = popen.communicate()    
-    if popen.returncode:
-        print 'error:\n\t' + command + '\nfailed, exiting'
-        print '"' + stderr + '"'
-        print '"' + stdout + '"'
-        exit(1)
-    print stdout
-    return stdout
-
-def try_chdir(path):
-    if os.chdir(path):
-        print 'error: couldn\'t chdir to' + path + ', exiting'
-        exit(1)
+TEMP_WORKSPACE = '/tmp/mopub'
 
 if len(os.sys.argv) < 3:
     print 'usage: release <version> <release_branch>'
@@ -37,7 +24,7 @@ version_tag = 'v' + version
 
 release_branch = os.sys.argv[2]
 print 'checking out release branch "' + release_branch + '" in ' + os.getcwd()
-try_system('git checkout ' + release_branch)
+os_helper.try_system('git checkout ' + release_branch)
 
 # Update version numbers in the private repo (MoPub.java, changelog)
 print 'updating version number in MoPub.java'
@@ -50,38 +37,45 @@ with open(PRIVATE_MOPUB_SDK + '/MoPub.java', 'r+w') as f:
     f.write(output)
 
 # Commit to the private repo with the version number
-try_system('git commit -am "Release: version ' + version + '"')
+os_helper.try_system('git commit -am "Release: version ' + version + '"')
 
 # Tag private repo with version number
 
-try_system('git tag -f -a "' + version_tag + '" -m "Version: ' + version + '"')
+os_helper.try_system('git tag -f -a "' + version_tag + '" -m "Version: ' + version + '"')
 
 # Push the private repo
-try_system('git pull origin ' + release_branch)
-try_system('git push origin ' + release_branch)
-try_system('git push --force origin ' + version_tag)
+os_helper.try_system('git pull origin ' + release_branch)
+os_helper.try_system('git push origin ' + release_branch)
+os_helper.try_system('git push --force origin ' + version_tag)
 
 # cd over to public repository
-try_chdir(PUBLIC_REPO)
-try_system('git checkout master')
-try_system('git pull')
+os_helper.try_chdir(PUBLIC_REPO)
+
+# remember what things used to be like
+os_helper.try_system('git checkout master')
+os_helper.try_system('git pull')
+os_helper.init_temp_staging()
+os_helper.try_system('cp -r ./.git ' + os_helper.TEMP_STAGING_PATH  + "/.")
 
-# sha_of_last_release = try_system('git rev-parse head')
+# forget all that for now
+os_helper.try_system('rm -rf *')
 
-# Pull release branch to local public (git remote update => git merge private/<release_branch>)
-try_system('git remote update')
-try_system('git merge -s recursive -X theirs --squash --no-commit private/' + release_branch)
+# import our vision of how things should be in the future
+os_helper.try_system('cp -r ' + PRIVATE_REPO + '/* .')
 
-# Reset soft to original SHA
-# try_system('git reset --soft ' + sha_of_last_release)
+# grant the wisdom to know the difference
+os_helper.try_system('rm -rf .git')
+os_helper.try_system('cp -r ' + os_helper.TEMP_STAGING_PATH + '/.git .')
 
 # Clear out unwanted libraries
-try_system('git rm -rf ' + PUBLIC_REPO + '/libs')
+os_helper.try_system('rm -rf ' + PUBLIC_REPO + '/libs')
 
 # Commit with new message
-try_system('git commit -am "Release: version ' + version + '"')
+os_helper.try_system('git add -A .')
+os_helper.try_system('git commit -am "Release: version ' + version + '"')
+
 # Tag public repo with version number
-try_system('git tag -f -a "' + version_tag + '" -m "Version: ' + version + '"')
+os_helper.try_system('git tag -f -a "' + version_tag + '" -m "Version: ' + version + '"')
 
 # Prompt for push to public
 print 'ready for \'git push --tags origin master\' (make sure to run make_bundles after you are done!)'
diff --git a/script/shared_values.py b/script/shared_values.py
new file mode 100755
index 00000000..8de6c030
--- /dev/null
+++ b/script/shared_values.py
@@ -0,0 +1,10 @@
+# todo this is fragile because we don't know our cwd
+
+DEMO_ROOT = 'mopub-sample/src/main/java/com/mopub/mobileads/'
+ROBOTIUM_ROOT = 'robotium-sample/src/main/java/com/mopub/mobileads/'
+EXTRAS_ROOT = 'extras/src/com/mopub/mobileads/'
+
+branches_synced_with_master = ['master', 'millennial', 'chartboost', 'greystripe', 'admob', 'inmobi', 'html5adview', 'unity']
+custom_events = ['MillennialBanner', 'MillennialInterstitial', 'ChartboostInterstitial', 'GreystripeBanner', 'GreystripeInterstitial', 'InMobiBanner', 'InMobiInterstitial', 'GoogleAdMobBanner', 'GoogleAdMobInterstitial', 'HTML5AdView']
+duplicated_custom_events = ['MillennialBanner', 'MillennialInterstitial', 'ChartboostInterstitial', 'GoogleAdMobBanner', 'GoogleAdMobInterstitial']
+jars_to_copy = ['MillennialBanner', 'MillennialInterstitial', 'GoogleAdMobBanner', 'GoogleAdMobInterstitial']
diff --git a/script/shared_values.pyc b/script/shared_values.pyc
new file mode 100644
index 00000000..2f1c1d97
Binary files /dev/null and b/script/shared_values.pyc differ
diff --git a/script/test_all_branches b/script/test_all_branches
new file mode 100755
index 00000000..023aa79e
--- /dev/null
+++ b/script/test_all_branches
@@ -0,0 +1,17 @@
+#!/usr/bin/python
+import os
+
+import shared_values
+import git_helper
+import os_helper
+
+original_branch = git_helper.git_current_branch()
+for branch in shared_values.branches_synced_with_master:
+    os_helper.try_system_quiet('git co ' + branch)
+    if os.system('mvn clean install'):
+        print "FALURE!!!!!!!!!!!!!!!"
+        exit(1)
+
+os_helper.system_quiet('git co ' + original_branch)
+
+print "SUCCESS!!!!!!!!!!!"
\ No newline at end of file
