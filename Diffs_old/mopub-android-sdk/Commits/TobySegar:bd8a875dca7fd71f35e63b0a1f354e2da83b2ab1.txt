diff --git a/CHANGELOG.md b/CHANGELOG.md
index e88b6816..ad9b89df 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,8 @@
+## Version 4.8.0 (August 1, 2016)
+- Changed the behavior of `MoPubInterstitial#load()` while an interstitial is loading or has been successfully loaded. Previously, this would discard the currently-caching or cached interstitial -- now the interstitial will be unaffected and will remain in the cache.
+- `MoPubInterstitial`s can now be shown only once per successful ad load.
+- Modified a number of Native Ads APIs (manual integration) to accept Context instead of Activity. Affected classes/methods include: `MoPubNative`, `AdapterHelper`, `CustomEventNative#loadNativeAd()`, and `MoPubAdRenderer#createAdView()`.
+
 #### Version 4.7.1 (June 10, 2016)
 - Fixed deeplink bug.
 
diff --git a/README.md b/README.md
index 50f2f040..31ebc99e 100644
--- a/README.md
+++ b/README.md
@@ -27,7 +27,7 @@ The MoPub SDK is available via:
     }
 
     dependencies {
-        compile('com.mopub:mopub-sdk:4.7.0@aar') {
+        compile('com.mopub:mopub-sdk:4.8.0@aar') {
             transitive = true
         }
     }
@@ -62,7 +62,9 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- Fixed deeplink bug.
+- Changed the behavior of `MoPubInterstitial#load()` while an interstitial is loading or has been successfully loaded. Previously, this would discard the currently-caching or cached interstitial -- now the interstitial will be unaffected and will remain in the cache.
+- `MoPubInterstitial`s can now be shown only once per successful ad load.
+- Modified a number of Native Ads APIs (manual integration) to accept Context instead of Activity. Affected classes/methods include: `MoPubNative`, `AdapterHelper`, `CustomEventNative#loadNativeAd()`, and `MoPubAdRenderer#createAdView()`.
 
 ## Requirements
 
diff --git a/build.gradle b/build.gradle
index 6410ab25..6a87580d 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,10 +5,10 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.1'
+        classpath 'com.android.tools.build:gradle:2.1.2'
     }
 }
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '2.5'
+    gradleVersion = '2.10'
 }
diff --git a/extras/src/com/mopub/nativeads/FacebookAdRenderer.java b/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
index 72e87349..c054c9a9 100644
--- a/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
+++ b/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -38,9 +38,9 @@ public FacebookAdRenderer(final ViewBinder viewBinder) {
     }
 
     @Override
-    public View createAdView(final Activity activity, final ViewGroup parent) {
+    public View createAdView(final Context context, final ViewGroup parent) {
         final View adView = LayoutInflater
-                .from(activity)
+                .from(context)
                 .inflate(mViewBinder.layoutId, parent, false);
         final View mainImageView = adView.findViewById(mViewBinder.mainImageId);
         if (mainImageView == null) {
@@ -72,7 +72,7 @@ public View createAdView(final Activity activity, final ViewGroup parent) {
             mainImageView.setVisibility(View.GONE);
         }
 
-        final MediaView mediaView = new MediaView(activity);
+        final MediaView mediaView = new MediaView(context);
         ViewGroup mainImageParent = (ViewGroup) mainImageView.getParent();
         int mainImageIndex = mainImageParent.indexOfChild(mainImageView);
         mainImageParent.addView(mediaView, mainImageIndex + 1, mediaViewLayoutParams);
diff --git a/extras/src/com/mopub/nativeads/FacebookNative.java b/extras/src/com/mopub/nativeads/FacebookNative.java
index ab951a6d..8faa9268 100644
--- a/extras/src/com/mopub/nativeads/FacebookNative.java
+++ b/extras/src/com/mopub/nativeads/FacebookNative.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.view.View;
 
@@ -47,7 +46,7 @@
 
     // CustomEventNative implementation
     @Override
-    protected void loadNativeAd(final Activity activity,
+    protected void loadNativeAd(final Context context,
             final CustomEventNativeListener customEventNativeListener,
             final Map<String, Object> localExtras,
             final Map<String, String> serverExtras) {
@@ -75,12 +74,12 @@ protected void loadNativeAd(final Activity activity,
         if (shouldUseVideoEnabledNativeAd(sIsVideoRendererAvailable, videoEnabledString,
                 videoEnabledFromServer)) {
             final FacebookVideoEnabledNativeAd facebookVideoEnabledNativeAd =
-                    new FacebookVideoEnabledNativeAd(activity,
-                            new NativeAd(activity, placementId), customEventNativeListener);
+                    new FacebookVideoEnabledNativeAd(context,
+                            new NativeAd(context, placementId), customEventNativeListener);
             facebookVideoEnabledNativeAd.loadAd();
         } else {
             final FacebookStaticNativeAd facebookStaticNativeAd = new FacebookStaticNativeAd(
-                    activity, new NativeAd(activity, placementId), customEventNativeListener);
+                    context, new NativeAd(context, placementId), customEventNativeListener);
             facebookStaticNativeAd.loadAd();
         }
     }
diff --git a/extras/src/com/mopub/nativeads/InMobiNative.java b/extras/src/com/mopub/nativeads/InMobiNative.java
index 0c0c7a04..d6a0e15e 100644
--- a/extras/src/com/mopub/nativeads/InMobiNative.java
+++ b/extras/src/com/mopub/nativeads/InMobiNative.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.util.Log;
 import android.view.View;
@@ -32,7 +31,7 @@
 
     // CustomEventNative implementation
     @Override
-    protected void loadNativeAd(final Activity activity,
+    protected void loadNativeAd(final Context context,
             final CustomEventNativeListener customEventNativeListener,
             final Map<String, Object> localExtras,
             final Map<String, String> serverExtras) {
@@ -45,11 +44,11 @@ protected void loadNativeAd(final Activity activity,
             return;
         }
 
-        InMobi.initialize(activity, appId);
+        InMobi.initialize(context, appId);
         final InMobiStaticNativeAd inMobiStaticNativeAd =
-                new InMobiStaticNativeAd(activity,
-                        new ImpressionTracker(activity),
-                        new NativeClickHandler(activity),
+                new InMobiStaticNativeAd(context,
+                        new ImpressionTracker(context),
+                        new NativeClickHandler(context),
                         customEventNativeListener);
         inMobiStaticNativeAd.setIMNative(new IMNative(inMobiStaticNativeAd));
         inMobiStaticNativeAd.loadAd();
diff --git a/extras/src/com/mopub/nativeads/MillennialNative.java b/extras/src/com/mopub/nativeads/MillennialNative.java
index 7a312731..85070c23 100644
--- a/extras/src/com/mopub/nativeads/MillennialNative.java
+++ b/extras/src/com/mopub/nativeads/MillennialNative.java
@@ -25,7 +25,7 @@
     private static final Handler UI_THREAD_HANDLER = new Handler(Looper.getMainLooper());
 
     @Override
-    protected void loadNativeAd(final Activity activity,
+    protected void loadNativeAd(final Context context,
             final CustomEventNativeListener listener,
             final Map<String, Object> localExtras,
             final Map<String, String> serverExtras) {
@@ -35,7 +35,7 @@ protected void loadNativeAd(final Activity activity,
 
         if ( !MMSDK.isInitialized() ) {
             try {
-                MMSDK.initialize(activity);
+                MMSDK.initialize((Activity) context);
             } catch ( Exception e ) {
                 Log.e(LOGCAT_TAG, "Unable to initialize the Millennial SDK-- " + e.getMessage());
                 e.printStackTrace();
@@ -85,10 +85,10 @@ public void run() {
         try {
             NativeAd nativeAd = NativeAd.createInstance(placementId, NativeAd.NATIVE_TYPE_INLINE);
             final MillennialStaticNativeAd millennialStaticNativeAd =
-                    new MillennialStaticNativeAd(activity,
+                    new MillennialStaticNativeAd(context,
                             nativeAd,
-                            new ImpressionTracker(activity),
-                            new NativeClickHandler(activity),
+                            new ImpressionTracker(context),
+                            new NativeClickHandler(context),
                             listener);
             millennialStaticNativeAd.loadAd();
         } catch ( MMException e ) {
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 30d399d8..13372aef 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 57375a65..1e12d0b2 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Jul 15 14:33:43 PDT 2015
+#Mon Jun 20 17:07:26 PDT 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.5-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
diff --git a/gradlew b/gradlew
index 91a7e269..9d82f789 100755
--- a/gradlew
+++ b/gradlew
@@ -42,11 +42,6 @@ case "`uname`" in
     ;;
 esac
 
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
 # Attempt to set APP_HOME
 # Resolve links: $0 may be a link
 PRG="$0"
@@ -61,9 +56,9 @@ while [ -h "$PRG" ] ; do
     fi
 done
 SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
+cd "`dirname \"$PRG\"`/" >/dev/null
 APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
+cd "$SAVED" >/dev/null
 
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
@@ -114,6 +109,7 @@ fi
 if $cygwin ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
     ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
diff --git a/gradlew.bat b/gradlew.bat
index 8a0b282a..aec99730 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -1,90 +1,90 @@
-@if "%DEBUG%" == "" @echo off
-@rem ##########################################################################
-@rem
-@rem  Gradle startup script for Windows
-@rem
-@rem ##########################################################################
-
-@rem Set local scope for the variables with windows NT shell
-if "%OS%"=="Windows_NT" setlocal
-
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
-set DIRNAME=%~dp0
-if "%DIRNAME%" == "" set DIRNAME=.
-set APP_BASE_NAME=%~n0
-set APP_HOME=%DIRNAME%
-
-@rem Find java.exe
-if defined JAVA_HOME goto findJavaFromJavaHome
-
-set JAVA_EXE=java.exe
-%JAVA_EXE% -version >NUL 2>&1
-if "%ERRORLEVEL%" == "0" goto init
-
-echo.
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:findJavaFromJavaHome
-set JAVA_HOME=%JAVA_HOME:"=%
-set JAVA_EXE=%JAVA_HOME%/bin/java.exe
-
-if exist "%JAVA_EXE%" goto init
-
-echo.
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:init
-@rem Get command-line arguments, handling Windowz variants
-
-if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
-
-:win9xME_args
-@rem Slurp the command line arguments.
-set CMD_LINE_ARGS=
-set _SKIP=2
-
-:win9xME_args_slurp
-if "x%~1" == "x" goto execute
-
-set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
-
-:execute
-@rem Setup the command line
-
-set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
-
-@rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
-
-:end
-@rem End local scope for the variables with windows NT shell
-if "%ERRORLEVEL%"=="0" goto mainEnd
-
-:fail
-rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
-rem the _cmd.exe /c_ return code!
-if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
-exit /b 1
-
-:mainEnd
-if "%OS%"=="Windows_NT" endlocal
-
-:omega
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 5915b7c8..9bdae2d6 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="42"
-      android:versionName="4.7.1">
+      android:versionCode="43"
+      android:versionName="4.8.0">
     <uses-sdk android:minSdkVersion="9"
               android:targetSdkVersion="23"/>
 
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index 3e922f90..a5b268ba 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -9,7 +9,7 @@ apply plugin: 'com.android.application'
 
 group = 'com.mopub'
 description = '''MoPub Sample App'''
-version = '4.7.1'
+version = '4.8.0'
 
 android {
     compileSdkVersion 23
@@ -17,7 +17,7 @@ android {
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 42
+        versionCode 43
         versionName version
         minSdkVersion 9
         targetSdkVersion 23
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
index 10a1cd82..ff1337ac 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
@@ -33,6 +33,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
         views.mLoadButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
+                mShowButton.setEnabled(false);
                 if (mMoPubInterstitial == null) {
                     mMoPubInterstitial = new MoPubInterstitial(getActivity(), adUnitId);
                     mMoPubInterstitial.setInterstitialAdListener(InterstitialDetailFragment.this);
@@ -40,7 +41,6 @@ public void onClick(View view) {
                 final String keywords = views.mKeywordsField.getText().toString();
                 mMoPubInterstitial.setKeywords(keywords);
                 mMoPubInterstitial.load();
-                mShowButton.setEnabled(false);
             }
         });
         mShowButton = (Button) view.findViewById(R.id.interstitial_show_button);
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index 1dcdc110..57a6ccc1 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -7,7 +7,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.1'
+        classpath 'com.android.tools.build:gradle:2.1.2'
         classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
     }
 }
@@ -32,12 +32,12 @@ apply plugin: 'com.android.library'
 apply plugin: 'com.github.dcendents.android-maven'
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '2.5'
+    gradleVersion = '2.10'
 }
 
 group = 'com.mopub'
 description = '''MoPub Android SDK'''
-version = '4.7.1'
+version = '4.8.0'
 
 android {
     compileSdkVersion 23
@@ -46,7 +46,7 @@ android {
     useLibrary 'org.apache.http.legacy'
 
     defaultConfig {
-        versionCode 42
+        versionCode 43
         versionName version
         minSdkVersion 9
         targetSdkVersion 23
diff --git a/mopub-sdk/gradle/wrapper/gradle-wrapper.jar b/mopub-sdk/gradle/wrapper/gradle-wrapper.jar
index 30d399d8..13372aef 100644
Binary files a/mopub-sdk/gradle/wrapper/gradle-wrapper.jar and b/mopub-sdk/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/mopub-sdk/gradle/wrapper/gradle-wrapper.properties b/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
index 75f1f3fd..6faa4eab 100644
--- a/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
+++ b/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Fri Jul 24 16:59:31 PDT 2015
+#Mon Jun 20 17:19:29 PDT 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.5-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
diff --git a/mopub-sdk/gradlew b/mopub-sdk/gradlew
index 91a7e269..9d82f789 100755
--- a/mopub-sdk/gradlew
+++ b/mopub-sdk/gradlew
@@ -42,11 +42,6 @@ case "`uname`" in
     ;;
 esac
 
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
 # Attempt to set APP_HOME
 # Resolve links: $0 may be a link
 PRG="$0"
@@ -61,9 +56,9 @@ while [ -h "$PRG" ] ; do
     fi
 done
 SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
+cd "`dirname \"$PRG\"`/" >/dev/null
 APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
+cd "$SAVED" >/dev/null
 
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
@@ -114,6 +109,7 @@ fi
 if $cygwin ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
     ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
diff --git a/mopub-sdk/gradlew.bat b/mopub-sdk/gradlew.bat
index 8a0b282a..aec99730 100644
--- a/mopub-sdk/gradlew.bat
+++ b/mopub-sdk/gradlew.bat
@@ -1,90 +1,90 @@
-@if "%DEBUG%" == "" @echo off
-@rem ##########################################################################
-@rem
-@rem  Gradle startup script for Windows
-@rem
-@rem ##########################################################################
-
-@rem Set local scope for the variables with windows NT shell
-if "%OS%"=="Windows_NT" setlocal
-
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
-set DIRNAME=%~dp0
-if "%DIRNAME%" == "" set DIRNAME=.
-set APP_BASE_NAME=%~n0
-set APP_HOME=%DIRNAME%
-
-@rem Find java.exe
-if defined JAVA_HOME goto findJavaFromJavaHome
-
-set JAVA_EXE=java.exe
-%JAVA_EXE% -version >NUL 2>&1
-if "%ERRORLEVEL%" == "0" goto init
-
-echo.
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:findJavaFromJavaHome
-set JAVA_HOME=%JAVA_HOME:"=%
-set JAVA_EXE=%JAVA_HOME%/bin/java.exe
-
-if exist "%JAVA_EXE%" goto init
-
-echo.
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:init
-@rem Get command-line arguments, handling Windowz variants
-
-if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
-
-:win9xME_args
-@rem Slurp the command line arguments.
-set CMD_LINE_ARGS=
-set _SKIP=2
-
-:win9xME_args_slurp
-if "x%~1" == "x" goto execute
-
-set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
-
-:execute
-@rem Setup the command line
-
-set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
-
-@rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
-
-:end
-@rem End local scope for the variables with windows NT shell
-if "%ERRORLEVEL%"=="0" goto mainEnd
-
-:fail
-rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
-rem the _cmd.exe /c_ return code!
-if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
-exit /b 1
-
-:mainEnd
-if "%OS%"=="Windows_NT" endlocal
-
-:omega
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
index f857b641..c753e61e 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
@@ -9,7 +9,7 @@
 import com.mopub.mobileads.MoPubRewardedVideoManager.RequestParameters;
 
 public class MoPub {
-    public static final String SDK_VERSION = "4.7.1";
+    public static final String SDK_VERSION = "4.8.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
index ca5087ce..48a7898f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
@@ -7,25 +7,19 @@
 import android.support.annotation.Nullable;
 import android.util.Base64;
 import android.view.View;
+import android.widget.Toast;
 
 import com.mopub.common.AdReport;
-import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.DateAndTime;
-import com.mopub.common.util.Streams;
+import com.mopub.common.util.Intents;
+import com.mopub.exceptions.IntentNotResolvableException;
 
 import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.FileOutputStream;
 import java.text.SimpleDateFormat;
-import java.util.ArrayList;
 import java.util.Locale;
 
 public class AdAlertReporter {
     private static final String EMAIL_RECIPIENT = "creative-review@mopub.com";
-    private static final String EMAIL_SCHEME = "mailto:";
-    private static final String SCREEN_SHOT_FILENAME = "mp_adalert_screenshot.png";
-    private static final String PARAMETERS_FILENAME = "mp_adalert_parameters.txt";
-    private static final String MARKUP_FILENAME = "mp_adalert_markup.html";
     private static final String DATE_FORMAT_PATTERN = "M/d/yy hh:mm:ss a z";
     private static final int IMAGE_QUALITY = 25;
     private static final String BODY_SEPARATOR = "\n=================\n";
@@ -35,7 +29,6 @@
     private final View mView;
     private final Context mContext;
     private Intent mEmailIntent;
-    private ArrayList<Uri> mEmailAttachments;
     private String mParameters;
     private String mResponse;
 
@@ -43,8 +36,6 @@ public AdAlertReporter(final Context context, final View view, @Nullable final A
         mView = view;
         mContext = context;
 
-        mEmailAttachments = new ArrayList<Uri>();
-
         SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN, Locale.US);
         mDateString = dateFormat.format(DateAndTime.now());
 
@@ -60,24 +51,22 @@ public AdAlertReporter(final Context context, final View view, @Nullable final A
 
         addEmailSubject();
         addEmailBody(mParameters, mResponse, screenShotString);
-        addTextAttachment(PARAMETERS_FILENAME, mParameters);
-        addTextAttachment(MARKUP_FILENAME, mResponse);
-        addImageAttachment(SCREEN_SHOT_FILENAME, screenShot);
     }
 
     public void send() {
-        mEmailIntent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, mEmailAttachments);
-
-        Intent chooserIntent = Intent.createChooser(mEmailIntent, "Send Email...");
-        chooserIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        mContext.startActivity(chooserIntent);
+        try {
+            Intents.startActivity(mContext, mEmailIntent);
+        } catch (IntentNotResolvableException e) {
+            Toast.makeText(mContext, "No email client available", Toast.LENGTH_SHORT).show();
+        }
     }
 
     private void initEmailIntent() {
-        Uri emailScheme = Uri.parse(EMAIL_SCHEME);
-        mEmailIntent = new Intent(Intent.ACTION_SEND_MULTIPLE);
-        mEmailIntent.setDataAndType(emailScheme, "plain/text");
-        mEmailIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{EMAIL_RECIPIENT});
+        mEmailIntent = new Intent(Intent.ACTION_SENDTO);
+        // Should not set type since that either overrides (via setType) or conflicts with
+        // (via setDataAndType) the data, resulting in NO applications being able to handle this
+        // intent.
+        mEmailIntent.setData(Uri.parse("mailto:" + EMAIL_RECIPIENT));
     }
 
     private Bitmap takeScreenShot() {
@@ -116,7 +105,8 @@ private String convertBitmapInWEBPToBase64EncodedString(Bitmap bitmap) {
     }
 
     private void addEmailSubject() {
-        mEmailIntent.putExtra(Intent.EXTRA_SUBJECT, "New creative violation report - " + mDateString);
+        mEmailIntent.putExtra(Intent.EXTRA_SUBJECT, "New creative violation report - "
+                + mDateString);
     }
 
     private void addEmailBody(String... data) {
@@ -132,57 +122,11 @@ private void addEmailBody(String... data) {
         mEmailIntent.putExtra(Intent.EXTRA_TEXT, body.toString());
     }
 
-    private void addImageAttachment(String fileName, Bitmap bitmap) {
-        FileOutputStream fileOutputStream = null;
-
-        if (fileName == null || bitmap == null) {
-            return;
-        }
-
-        try {
-            fileOutputStream = mContext.openFileOutput(fileName, Context.MODE_WORLD_READABLE);
-            // image quality is okay to be 0 here, since PNG is lossless and will ignore compression quality
-            bitmap.compress(Bitmap.CompressFormat.PNG, IMAGE_QUALITY, fileOutputStream);
-
-            Uri fileUri = Uri.fromFile(new File(mContext.getFilesDir() + File.separator + fileName));
-            mEmailAttachments.add(fileUri);
-        } catch (Exception exception) {
-            MoPubLog.d("Unable to write text attachment to file: " + fileName);
-        } finally {
-            Streams.closeStream(fileOutputStream);
-        }
-    }
-
-    private void addTextAttachment(String fileName, String body) {
-        FileOutputStream fileOutputStream = null;
-
-        if (fileName == null || body == null) {
-            return;
-        }
-
-        try {
-            fileOutputStream = mContext.openFileOutput(fileName, Context.MODE_WORLD_READABLE);
-            fileOutputStream.write(body.getBytes());
-
-            Uri fileUri = Uri.fromFile(new File(mContext.getFilesDir() + File.separator + fileName));
-            mEmailAttachments.add(fileUri);
-        } catch (Exception exception) {
-            MoPubLog.d("Unable to write text attachment to file: " + fileName);
-        } finally {
-            Streams.closeStream(fileOutputStream);
-        }
-    }
-
     @Deprecated // for testing
     Intent getEmailIntent() {
         return mEmailIntent;
     }
 
-    @Deprecated // for testing
-    ArrayList<Uri> getEmailAttachments() {
-        return mEmailAttachments;
-    }
-
     @Deprecated // for testing
     String getParameters() {
         return mParameters;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
index 2ae7a79a..98f3d52f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -259,7 +259,10 @@ public void reload() {
         loadNonJavascript(mUrl);
     }
 
-    void loadFailUrl(MoPubErrorCode errorCode) {
+    /**
+     * Returns true if continuing to load the failover url, false if the ad actually did not fill.
+     */
+    boolean loadFailUrl(MoPubErrorCode errorCode) {
         mIsLoading = false;
 
         Log.v("MoPub", "MoPubErrorCode: " + (errorCode == null ? "" : errorCode.toString()));
@@ -268,9 +271,11 @@ void loadFailUrl(MoPubErrorCode errorCode) {
         if (!TextUtils.isEmpty(failUrl)) {
             MoPubLog.d("Loading failover url: " + failUrl);
             loadNonJavascript(failUrl);
+            return true;
         } else {
             // No other URLs to try, so signal a failure.
             adDidFail(MoPubErrorCode.NO_FILL);
+            return false;
         }
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
index 25bf2a69..8d82b33d 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
@@ -3,141 +3,276 @@
 import android.app.Activity;
 import android.content.Context;
 import android.location.Location;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
 import com.mopub.common.AdFormat;
-import com.mopub.common.MoPub;
+import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
 
 import java.util.Map;
 
-import static com.mopub.common.LocationService.LocationAwareness;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.IDLE;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.LOADING;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.READY;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.DESTROYED;
 
 public class MoPubInterstitial implements CustomEventInterstitialAdapter.CustomEventInterstitialAdapterListener {
-
-    private enum InterstitialState {
-        CUSTOM_EVENT_AD_READY,
-        NOT_READY;
-
-        boolean isReady() {
-            return this != InterstitialState.NOT_READY;
-        }
+    @VisibleForTesting
+    enum InterstitialState {
+        /**
+         * Either waiting for something to happen or already showing an interstitial. There is no
+         * interstitial currently loaded.
+         */
+        IDLE,
+
+        /**
+         * Loading an interstitial.
+         */
+        LOADING,
+
+        /**
+         * Loaded and ready to be shown.
+         */
+        READY,
+
+        /**
+         * No longer able to accept events as the internal InterstitialView has been destroyed.
+         */
+        DESTROYED
     }
 
-    private MoPubInterstitialView mInterstitialView;
-    private CustomEventInterstitialAdapter mCustomEventInterstitialAdapter;
-    private InterstitialAdListener mInterstitialAdListener;
-    private Activity mActivity;
-    private String mAdUnitId;
-    private InterstitialState mCurrentInterstitialState;
-    private boolean mIsDestroyed;
+    @NonNull private MoPubInterstitialView mInterstitialView;
+    @Nullable private CustomEventInterstitialAdapter mCustomEventInterstitialAdapter;
+    @Nullable private InterstitialAdListener mInterstitialAdListener;
+    @NonNull private Activity mActivity;
+    @NonNull private InterstitialState mCurrentInterstitialState;
 
     public interface InterstitialAdListener {
-        public void onInterstitialLoaded(MoPubInterstitial interstitial);
-        public void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode);
-        public void onInterstitialShown(MoPubInterstitial interstitial);
-        public void onInterstitialClicked(MoPubInterstitial interstitial);
-        public void onInterstitialDismissed(MoPubInterstitial interstitial);
+        void onInterstitialLoaded(MoPubInterstitial interstitial);
+        void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode);
+        void onInterstitialShown(MoPubInterstitial interstitial);
+        void onInterstitialClicked(MoPubInterstitial interstitial);
+        void onInterstitialDismissed(MoPubInterstitial interstitial);
     }
 
-    public MoPubInterstitial(Activity activity, String id) {
+    public MoPubInterstitial(@NonNull final Activity activity, @NonNull final String adUnitId) {
         mActivity = activity;
-        mAdUnitId = id;
 
         mInterstitialView = new MoPubInterstitialView(mActivity);
-        mInterstitialView.setAdUnitId(mAdUnitId);
-
-        mCurrentInterstitialState = InterstitialState.NOT_READY;
+        mInterstitialView.setAdUnitId(adUnitId);
 
+        mCurrentInterstitialState = IDLE;
     }
 
-    public void load() {
-        resetCurrentInterstitial();
-        mInterstitialView.loadAd();
+    private boolean attemptStateTransition(@NonNull final InterstitialState endState) {
+        return attemptStateTransition(endState, false);
     }
 
-    public void forceRefresh() {
-        resetCurrentInterstitial();
-        mInterstitialView.forceRefresh();
+    /**
+     * Attempts to transition to the new state. All state transitions should go through this method.
+     * Other methods should not be modifying mCurrentInterstitialState.
+     *
+     * @param endState The desired end state.
+     * @param forced   If possible, forces the state to go to a particular state. This is not
+     *                 guaranteed to always set the endState but will allow certain irregular
+     *                 state transitions.
+     * @return {@code true} if a state change happened, {@code false} if no state change happened.
+     */
+    @VisibleForTesting
+    boolean attemptStateTransition(@NonNull final InterstitialState endState,
+            boolean forced) {
+        Preconditions.checkNotNull(endState);
+
+        final InterstitialState startState = mCurrentInterstitialState;
+
+        /**
+         * There are 32 potential cases. Any combination that is a no op will not be enumerated
+         * and returns false. The usual case goes IDLE -> LOADING -> READY -> IDLE. At any point,
+         * a forced transition into IDLE resets MoPubInterstitial and clears the interstitial
+         * adapter. Also, MoPubInterstitial can be destroyed arbitrarily, and once this is
+         * destroyed, it no longer can perform any state transitions.
+         */
+        switch (startState) {
+            case IDLE:
+                switch(endState) {
+                    case IDLE:
+                        if (!forced) {
+                            // This is the case of trying to show(), but nothing was loaded
+                            MoPubLog.d("No interstitial loading or loaded.");
+                        }
+                        // Forcing into IDLE resets the state, but it has already been reset,
+                        // so this is a no op.
+                        return false;
+                    case LOADING:
+                        // Going from IDLE to LOADING is the usual load case
+                        invalidateInterstitialAdapter();
+                        mCurrentInterstitialState = LOADING;
+                        if (forced) {
+                            mInterstitialView.forceRefresh();
+                        } else {
+                            mInterstitialView.loadAd();
+                        }
+                        return true;
+                    case DESTROYED:
+                        setInterstitialStateDestroyed();
+                        return true;
+                    default:
+                        return false;
+                }
+            case LOADING:
+                switch (endState) {
+                    case IDLE:
+                        if (forced) {
+                            // Being forced back into idle while loading resets MoPubInterstitial.
+                            invalidateInterstitialAdapter();
+                            mCurrentInterstitialState = IDLE;
+                            return true;
+                        } else {
+                            // No force to IDLE means show(), but this is still loading
+                            MoPubLog.d("Interstitial is not ready to be shown yet.");
+                            return false;
+                        }
+                    case LOADING:
+                        if (!forced) {
+                            // Cannot load more than one interstitial at a time
+                            MoPubLog.d("Already loading an interstitial.");
+                        }
+                        // If forced, it means a failover started. This is still loading.
+                        return false;
+                    case READY:
+                        // This is the usual load finished transition
+                        mCurrentInterstitialState = READY;
+                        return true;
+                    case DESTROYED:
+                        setInterstitialStateDestroyed();
+                        return true;
+                    default:
+                        return false;
+                }
+            case READY:
+                switch (endState) {
+                    case IDLE:
+                        mCurrentInterstitialState = IDLE;
+                        if (forced) {
+                            // This happens on a reset
+                            invalidateInterstitialAdapter();
+                            return true;
+                        } else {
+                            // This is the usual show interstitial when ready
+                            showCustomEventInterstitial();
+                            return true;
+                        }
+                    case LOADING:
+                        // This is to prevent loading another interstitial while one is loaded.
+                        MoPubLog.d("Interstitial already loaded. Not loading another.");
+                        // Let the ad listener know that there's already an ad loaded
+                        if (mInterstitialAdListener != null) {
+                            mInterstitialAdListener.onInterstitialLoaded(this);
+                        }
+                        return false;
+                    case DESTROYED:
+                        setInterstitialStateDestroyed();
+                        return true;
+                    default:
+                        return false;
+                }
+            case DESTROYED:
+                // Once destroyed, MoPubInterstitial is no longer functional.
+                MoPubLog.d("MoPubInterstitial destroyed. Ignoring all requests.");
+                return false;
+            default:
+                return false;
+        }
     }
 
-    private void resetCurrentInterstitial() {
-        mCurrentInterstitialState = InterstitialState.NOT_READY;
-
-        if (mCustomEventInterstitialAdapter != null) {
-            mCustomEventInterstitialAdapter.invalidate();
-            mCustomEventInterstitialAdapter = null;
-        }
+    /**
+     * Sets MoPubInterstitial to be destroyed. This should only be called by attemptStateTransition.
+     */
+    private void setInterstitialStateDestroyed() {
+        invalidateInterstitialAdapter();
+        mInterstitialView.setBannerAdListener(null);
+        mInterstitialView.destroy();
+        mCurrentInterstitialState = DESTROYED;
+    }
 
-        mIsDestroyed = false;
+    public void load() {
+        attemptStateTransition(LOADING);
     }
 
-    public boolean isReady() {
-        return mCurrentInterstitialState.isReady();
+    public boolean show() {
+        return attemptStateTransition(IDLE);
     }
 
-    boolean isDestroyed() {
-        return mIsDestroyed;
+    public void forceRefresh() {
+        attemptStateTransition(IDLE, true);
+        attemptStateTransition(LOADING, true);
     }
 
-    public boolean show() {
-        switch (mCurrentInterstitialState) {
-            case CUSTOM_EVENT_AD_READY:
-                showCustomEventInterstitial();
-                return true;
-        }
-        return false;
+    public boolean isReady() {
+        return mCurrentInterstitialState == READY;
     }
 
-    private void showCustomEventInterstitial() {
-        if (mCustomEventInterstitialAdapter != null) mCustomEventInterstitialAdapter.showInterstitial();
+    boolean isDestroyed() {
+        return mCurrentInterstitialState == DESTROYED;
     }
 
     Integer getAdTimeoutDelay() {
         return mInterstitialView.getAdTimeoutDelay();
     }
 
+    @NonNull
     MoPubInterstitialView getMoPubInterstitialView() {
         return mInterstitialView;
     }
 
+    private void showCustomEventInterstitial() {
+        if (mCustomEventInterstitialAdapter != null) {
+            mCustomEventInterstitialAdapter.showInterstitial();
+        }
+    }
+
+    private void invalidateInterstitialAdapter() {
+        if (mCustomEventInterstitialAdapter != null) {
+            mCustomEventInterstitialAdapter.invalidate();
+            mCustomEventInterstitialAdapter = null;
+        }
+    }
+
     ////////////////////////////////////////////////////////////////////////////////////////////////
 
-    public void setKeywords(String keywords) {
+    public void setKeywords(@Nullable final String keywords) {
         mInterstitialView.setKeywords(keywords);
     }
 
+    @Nullable
     public String getKeywords() {
         return mInterstitialView.getKeywords();
     }
 
+    @NonNull
     public Activity getActivity() {
         return mActivity;
     }
 
+    @Nullable
     public Location getLocation() {
         return mInterstitialView.getLocation();
     }
 
     public void destroy() {
-        mIsDestroyed = true;
-
-        if (mCustomEventInterstitialAdapter != null) {
-            mCustomEventInterstitialAdapter.invalidate();
-            mCustomEventInterstitialAdapter = null;
-        }
-
-        mInterstitialView.setBannerAdListener(null);
-        mInterstitialView.destroy();
+        attemptStateTransition(DESTROYED);
     }
 
-    public void setInterstitialAdListener(InterstitialAdListener listener) {
+    public void setInterstitialAdListener(@Nullable final InterstitialAdListener listener) {
         mInterstitialAdListener = listener;
     }
 
+    @Nullable
     public InterstitialAdListener getInterstitialAdListener() {
         return mInterstitialAdListener;
     }
@@ -154,19 +289,23 @@ public void setLocalExtras(Map<String, Object> extras) {
         mInterstitialView.setLocalExtras(extras);
     }
 
+    @NonNull
     public Map<String, Object> getLocalExtras() {
         return mInterstitialView.getLocalExtras();
     }
 
     /*
      * Implements CustomEventInterstitialAdapter.CustomEventInterstitialListener
+     * Note: All callbacks should be no-ops if the interstitial has been destroyed
      */
 
     @Override
     public void onCustomEventInterstitialLoaded() {
-        if (mIsDestroyed) return;
+        if (isDestroyed()) {
+            return;
+        }
 
-        mCurrentInterstitialState = InterstitialState.CUSTOM_EVENT_AD_READY;
+        attemptStateTransition(READY);
 
         if (mInterstitialAdListener != null) {
             mInterstitialAdListener.onInterstitialLoaded(this);
@@ -174,16 +313,23 @@ public void onCustomEventInterstitialLoaded() {
     }
 
     @Override
-    public void onCustomEventInterstitialFailed(MoPubErrorCode errorCode) {
-        if (isDestroyed()) return;
+    public void onCustomEventInterstitialFailed(@NonNull final MoPubErrorCode errorCode) {
+        if (isDestroyed()) {
+            return;
+        }
 
-        mCurrentInterstitialState = InterstitialState.NOT_READY;
-        mInterstitialView.loadFailUrl(errorCode);
+        if (mInterstitialView.loadFailUrl(errorCode)) {
+            attemptStateTransition(LOADING, true);
+        } else {
+            attemptStateTransition(IDLE, true);
+        }
     }
 
     @Override
     public void onCustomEventInterstitialShown() {
-        if (isDestroyed()) return;
+        if (isDestroyed()) {
+            return;
+        }
 
         mInterstitialView.trackImpression();
 
@@ -194,7 +340,9 @@ public void onCustomEventInterstitialShown() {
 
     @Override
     public void onCustomEventInterstitialClicked() {
-        if (isDestroyed()) return;
+        if (isDestroyed()) {
+            return;
+        }
 
         mInterstitialView.registerClick();
 
@@ -205,9 +353,9 @@ public void onCustomEventInterstitialClicked() {
 
     @Override
     public void onCustomEventInterstitialDismissed() {
-        if (isDestroyed()) return;
-
-        mCurrentInterstitialState = InterstitialState.NOT_READY;
+        if (isDestroyed()) {
+            return;
+        }
 
         if (mInterstitialAdListener != null) {
             mInterstitialAdListener.onInterstitialDismissed(this);
@@ -217,7 +365,6 @@ public void onCustomEventInterstitialDismissed() {
     ////////////////////////////////////////////////////////////////////////////////////////////////
 
     public class MoPubInterstitialView extends MoPubView {
-
         public MoPubInterstitialView(Context context) {
             super(context);
             setAutorefreshEnabled(false);
@@ -263,6 +410,7 @@ protected void trackImpression() {
 
         @Override
         protected void adFailed(MoPubErrorCode errorCode) {
+            attemptStateTransition(IDLE, true);
             if (mInterstitialAdListener != null) {
                 mInterstitialAdListener.onInterstitialFailed(MoPubInterstitial.this, errorCode);
             }
@@ -271,7 +419,27 @@ protected void adFailed(MoPubErrorCode errorCode) {
 
     @VisibleForTesting
     @Deprecated
-    void setInterstitialView(MoPubInterstitialView interstitialView) {
+    void setInterstitialView(@NonNull MoPubInterstitialView interstitialView) {
         mInterstitialView = interstitialView;
     }
+
+    @VisibleForTesting
+    @Deprecated
+    void setCurrentInterstitialState(@NonNull final InterstitialState interstitialState) {
+        mCurrentInterstitialState = interstitialState;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    @NonNull
+    InterstitialState getCurrentInterstitialState() {
+        return mCurrentInterstitialState;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    void setCustomEventInterstitialAdapter(@NonNull final CustomEventInterstitialAdapter
+            customEventInterstitialAdapter) {
+        mCustomEventInterstitialAdapter = customEventInterstitialAdapter;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
index 9f442677..ea850f3e 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -6,6 +6,7 @@
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.location.Location;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 import android.util.AttributeSet;
@@ -134,8 +135,11 @@ Integer getAdTimeoutDelay() {
         return (mAdViewController != null) ? mAdViewController.getAdTimeoutDelay() : null;
     }
 
-    protected void loadFailUrl(MoPubErrorCode errorCode) {
-        if (mAdViewController != null) mAdViewController.loadFailUrl(errorCode);
+    protected boolean loadFailUrl(@NonNull final MoPubErrorCode errorCode) {
+        if (mAdViewController == null) {
+            return false;
+        }
+        return mAdViewController.loadFailUrl(errorCode);
     }
 
     protected void loadCustomEvent(String customEventClassName, Map<String, String> serverExtras) {
@@ -330,7 +334,9 @@ public void forceRefresh() {
             mCustomEventBannerAdapter = null;
         }
 
-        if (mAdViewController != null) mAdViewController.forceRefresh();
+        if (mAdViewController != null) {
+            mAdViewController.forceRefresh();
+        }
     }
 
     AdViewController getAdViewController() {
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
index f8a41988..aaf3ce0c 100644
--- a/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
@@ -617,6 +617,7 @@ private void setViewState(@NonNull ViewState viewState) {
     private void setViewState(@NonNull ViewState viewState, @Nullable Runnable successRunnable) {
         // Make sure this is a valid transition.
         MoPubLog.d("MRAID state set to " + viewState);
+        final ViewState previousViewState = mViewState;
         mViewState = viewState;
         mMraidBridge.notifyViewState(viewState);
 
@@ -628,6 +629,8 @@ private void setViewState(@NonNull ViewState viewState, @Nullable Runnable succe
         if (mMraidListener != null) {
             if (viewState == ViewState.EXPANDED) {
                 mMraidListener.onExpand();
+            } else if (previousViewState == ViewState.EXPANDED && viewState == ViewState.DEFAULT) {
+                mMraidListener.onClose();
             } else if (viewState == ViewState.HIDDEN) {
                 mMraidListener.onClose();
             }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java b/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
index bc114f96..21206b09 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -19,7 +18,10 @@
  */
 @Deprecated
 public final class AdapterHelper {
-    @NonNull private final WeakReference<Activity> mActivity;
+    /**
+     * Preferably an Activity Context.
+     */
+    @NonNull private final WeakReference<Context> mContext;
     @NonNull private final Context mApplicationContext;
     private final int mStart;
     private final int mInterval;
@@ -27,11 +29,10 @@
     @Deprecated
     public AdapterHelper(@NonNull final Context context, final int start, final int interval) {
         Preconditions.checkNotNull(context, "Context cannot be null.");
-        Preconditions.checkArgument(context instanceof Activity, "Context must be an Activity.");
         Preconditions.checkArgument(start >= 0, "start position must be non-negative");
         Preconditions.checkArgument(interval >= 2, "interval must be at least 2");
 
-        mActivity = new WeakReference<Activity>((Activity) context);
+        mContext = new WeakReference<Context>(context);
         mApplicationContext = context.getApplicationContext();
         mStart = start;
         mInterval = interval;
@@ -43,9 +44,9 @@ public View getAdView(@Nullable final View convertView,
             @Nullable final ViewGroup parent,
             @Nullable final NativeAd nativeAd,
             @Nullable final ViewBinder viewBinder) {
-        final Activity activity = mActivity.get();
-        if (activity == null) {
-            MoPubLog.w("Weak reference to Activity Context in"
+        final Context context = mContext.get();
+        if (context == null) {
+            MoPubLog.w("Weak reference to Context in"
                     + " AdapterHelper became null. Returning empty view.");
             return new View(mApplicationContext);
         }
@@ -53,7 +54,7 @@ public View getAdView(@Nullable final View convertView,
         return NativeAdViewHelper.getAdView(
                 convertView,
                 parent,
-                activity,
+                context,
                 nativeAd,
                 viewBinder
         );
@@ -113,7 +114,7 @@ private int numberOfAdsThatCouldFitWithContent(final int contentRowCount) {
     // Testing
     @Deprecated
     @VisibleForTesting
-    void clearActivityContext() {
-        mActivity.clear();
+    void clearContext() {
+        mContext.clear();
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
index 5f8a1d35..0177a1d5 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.support.annotation.NonNull;
 
 import java.util.Map;
@@ -20,7 +20,7 @@
      * native ad from a third-party ad network, or execute any application code. It must also notify
      * the provided {@link CustomEventNativeListener} Object of certain lifecycle events.
      *
-     * @param activity The activity.
+     * @param context The context.
      * @param customEventNativeListener An Object that must be notified of certain lifecycle
      * events.
      * @param localExtras A Map containing additional custom data that is set within your
@@ -30,7 +30,7 @@
      * that you want to associate with a given custom event request. This data may be used to pass
      * dynamic information, such as publisher IDs, without changes in application code.
      */
-    protected abstract void loadNativeAd(@NonNull final Activity activity,
+    protected abstract void loadNativeAd(@NonNull final Context context,
             @NonNull final CustomEventNativeListener customEventNativeListener,
             @NonNull final Map<String, Object> localExtras,
             @NonNull final Map<String, String> serverExtras);
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
index c84b77b7..8a198b8a 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.support.annotation.NonNull;
 
 import com.mopub.common.DataKeys;
@@ -14,7 +14,7 @@
 final class CustomEventNativeAdapter {
     private CustomEventNativeAdapter() {}
 
-    public static void loadNativeAd(@NonNull final Activity activity,
+    public static void loadNativeAd(@NonNull final Context context,
             @NonNull final Map<String, Object> localExtras,
             @NonNull final AdResponse adResponse,
             @NonNull final CustomEventNative.CustomEventNativeListener customEventNativeListener) {
@@ -45,7 +45,7 @@ public static void loadNativeAd(@NonNull final Activity activity,
         // We catch all exceptions here to prevent crashes from untested code.
         try {
             customEventNative.loadNativeAd(
-                    activity,
+                    context,
                     customEventNativeListener,
                     localExtras,
                     adResponse.getServerExtras()
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTracker.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTracker.java
index d757285d..d7775eab 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTracker.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTracker.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.os.Handler;
 import android.os.Looper;
 import android.support.annotation.NonNull;
@@ -46,11 +46,11 @@
     // Listener for when a view becomes visible or non visible
     @Nullable private VisibilityTrackerListener mVisibilityTrackerListener;
 
-    public ImpressionTracker(@NonNull final Activity activity) {
+    public ImpressionTracker(@NonNull final Context context) {
         this(new WeakHashMap<View, ImpressionInterface>(),
                 new WeakHashMap<View, TimestampWrapper<ImpressionInterface>>(),
                 new VisibilityChecker(),
-                new VisibilityTracker(activity),
+                new VisibilityTracker(context),
                 new Handler(Looper.getMainLooper()));
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
index e79548bb..04d9c8f3 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.view.View;
@@ -19,18 +19,21 @@
 public interface MoPubAdRenderer<T extends BaseNativeAd> {
     /**
      * Creates a new view to be used as an ad.
-     *
+     * <p/>
      * This method is called when you call {@link com.mopub.nativeads.MoPubStreamAdPlacer#getAdView}
      * and the convertView is null. You must return a valid view.
      *
-     * @param activity The activity. Useful for creating a view.
-     * @param parent The parent that the view will eventually be attached to. You might use the
-     * parent to determine layout parameters, but should return the view without attaching it to the
-     * parent.
+     * @param context The context. Useful for creating a view. This is recommended to be an
+     *                Activity. If you have custom themes defined in your Activity, not passing
+     *                in that Activity will result in the default Application theme being used
+     *                when creating the ad view.
+     * @param parent  The parent that the view will eventually be attached to. You might use the
+     *                parent to determine layout parameters, but should return the view without
+     *                attaching it to the parent.
      * @return A new ad view.
      */
     @NonNull
-    View createAdView(@NonNull Activity activity, @Nullable ViewGroup parent);
+    View createAdView(@NonNull Context context, @Nullable ViewGroup parent);
 
     /**
      * Renders a view created by {@link #createAdView} by filling it with ad data.
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
index 47f19090..9d31f0d3 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -11,7 +10,6 @@
 import com.mopub.nativeads.NativeImageHelper.ImageListener;
 
 import org.json.JSONArray;
-import org.json.JSONException;
 import org.json.JSONObject;
 
 import java.util.ArrayList;
@@ -29,7 +27,7 @@
 public class MoPubCustomEventNative extends CustomEventNative {
 
     @Override
-    protected void loadNativeAd(@NonNull final Activity activity,
+    protected void loadNativeAd(@NonNull final Context context,
             @NonNull final CustomEventNativeListener customEventNativeListener,
             @NonNull final Map<String, Object> localExtras,
             @NonNull final Map<String, String> serverExtras) {
@@ -42,10 +40,10 @@ protected void loadNativeAd(@NonNull final Activity activity,
         }
 
         final MoPubStaticNativeAd moPubStaticNativeAd =
-                new MoPubStaticNativeAd(activity,
+                new MoPubStaticNativeAd(context,
                         (JSONObject) json,
-                        new ImpressionTracker(activity),
-                        new NativeClickHandler(activity),
+                        new ImpressionTracker(context),
+                        new NativeClickHandler(context),
                         customEventNativeListener);
 
         try {
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
index 7a439195..67f0655d 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
@@ -1,7 +1,6 @@
 package com.mopub.nativeads;
 
 import android.annotation.TargetApi;
-import android.app.Activity;
 import android.content.Context;
 import android.graphics.SurfaceTexture;
 import android.media.AudioManager;
@@ -56,7 +55,7 @@
 public class MoPubCustomEventVideoNative extends CustomEventNative {
 
     @Override
-    protected void loadNativeAd(@NonNull final Activity activity,
+    protected void loadNativeAd(@NonNull final Context context,
             @NonNull final CustomEventNativeListener customEventNativeListener,
             @NonNull final Map<String, Object> localExtras,
             @NonNull final Map<String, String> serverExtras) {
@@ -87,7 +86,7 @@ protected void loadNativeAd(@NonNull final Activity activity,
         }
 
         final String clickTrackingUrlFromHeader = (String) clickTrackingUrlFromHeaderObject;
-        final MoPubVideoNativeAd videoNativeAd = new MoPubVideoNativeAd(activity, (JSONObject) json,
+        final MoPubVideoNativeAd videoNativeAd = new MoPubVideoNativeAd(context, (JSONObject) json,
                 customEventNativeListener, videoResponseHeaders, eventDetails,
                 clickTrackingUrlFromHeader);
         try {
@@ -185,20 +184,20 @@ static Parameter from(@NonNull final String name) {
         private boolean mEnded;
 
         public MoPubVideoNativeAd(
-                @NonNull final Activity activity,
+                @NonNull final Context context,
                 @NonNull final JSONObject jsonObject,
                 @NonNull final CustomEventNativeListener customEventNativeListener,
                 @NonNull final VideoResponseHeaders videoResponseHeaders,
                 @Nullable final EventDetails eventDetails,
                 @NonNull final String clickTrackingUrl) {
-            this(activity, jsonObject, customEventNativeListener, videoResponseHeaders,
-                    new VisibilityTracker(activity), new NativeVideoControllerFactory(),
-                    eventDetails, clickTrackingUrl, VastManagerFactory.create(activity.getApplicationContext(), false));
+            this(context, jsonObject, customEventNativeListener, videoResponseHeaders,
+                    new VisibilityTracker(context), new NativeVideoControllerFactory(),
+                    eventDetails, clickTrackingUrl, VastManagerFactory.create(context.getApplicationContext(), false));
         }
 
         @VisibleForTesting
         MoPubVideoNativeAd(
-                @NonNull final Activity activity,
+                @NonNull final Context context,
                 @NonNull final JSONObject jsonObject,
                 @NonNull final CustomEventNativeListener customEventNativeListener,
                 @NonNull final VideoResponseHeaders videoResponseHeaders,
@@ -207,7 +206,7 @@ public MoPubVideoNativeAd(
                 @Nullable final EventDetails eventDetails,
                 @NonNull final String clickTrackingUrl,
                 @NonNull final VastManager vastManager) {
-            Preconditions.checkNotNull(activity);
+            Preconditions.checkNotNull(context);
             Preconditions.checkNotNull(jsonObject);
             Preconditions.checkNotNull(customEventNativeListener);
             Preconditions.checkNotNull(videoResponseHeaders);
@@ -216,7 +215,7 @@ public MoPubVideoNativeAd(
             Preconditions.checkNotNull(clickTrackingUrl);
             Preconditions.checkNotNull(vastManager);
 
-            mContext = activity.getApplicationContext();
+            mContext = context.getApplicationContext();
             mJsonObject = jsonObject;
             mCustomEventNativeListener = customEventNativeListener;
             mVideoResponseHeaders = videoResponseHeaders;
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
index bcc9ccc3..ebb9293c 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
@@ -54,8 +54,8 @@ public void onNativeFail(final NativeErrorCode errorCode) {
         }
     };
 
-    // must be an activity since 3rd party networks need it
-    @NonNull private final WeakReference<Activity> mActivity;
+    // Highly recommended to be an Activity since 3rd party networks need it
+    @NonNull private final WeakReference<Context> mContext;
     @NonNull private final String mAdUnitId;
     @NonNull private MoPubNativeNetworkListener mMoPubNativeNetworkListener;
 
@@ -65,25 +65,25 @@ public void onNativeFail(final NativeErrorCode errorCode) {
     @Nullable private AdRequest mNativeRequest;
     @NonNull AdRendererRegistry mAdRendererRegistry;
 
-    public MoPubNative(@NonNull final Activity activity,
+    public MoPubNative(@NonNull final Context context,
             @NonNull final String adUnitId,
             @NonNull final MoPubNativeNetworkListener moPubNativeNetworkListener) {
-        this(activity, adUnitId, new AdRendererRegistry(), moPubNativeNetworkListener);
+        this(context, adUnitId, new AdRendererRegistry(), moPubNativeNetworkListener);
     }
 
     @VisibleForTesting
-    public MoPubNative(@NonNull final Activity activity,
+    public MoPubNative(@NonNull final Context context,
             @NonNull final String adUnitId,
             @NonNull AdRendererRegistry adRendererRegistry,
             @NonNull final MoPubNativeNetworkListener moPubNativeNetworkListener) {
-        Preconditions.checkNotNull(activity, "Activity may not be null.");
+        Preconditions.checkNotNull(context, "context may not be null.");
         Preconditions.checkNotNull(adUnitId, "AdUnitId may not be null.");
         Preconditions.checkNotNull(adRendererRegistry, "AdRendererRegistry may not be null.");
         Preconditions.checkNotNull(moPubNativeNetworkListener, "MoPubNativeNetworkListener may not be null.");
 
-        ManifestUtils.checkNativeActivitiesDeclared(activity);
+        ManifestUtils.checkNativeActivitiesDeclared(context);
 
-        mActivity = new WeakReference<Activity>(activity);
+        mContext = new WeakReference<Context>(context);
         mAdUnitId = adUnitId;
         mMoPubNativeNetworkListener = moPubNativeNetworkListener;
         mAdRendererRegistry = adRendererRegistry;
@@ -100,7 +100,7 @@ public void onErrorResponse(@NonNull final VolleyError volleyError) {
         };
 
         // warm up cache for google play services info
-        fetchAdvertisingInfoAsync(activity, null);
+        fetchAdvertisingInfoAsync(context, null);
     }
 
     /**
@@ -113,7 +113,7 @@ public void registerAdRenderer(MoPubAdRenderer moPubAdRenderer) {
     }
 
     public void destroy() {
-        mActivity.clear();
+        mContext.clear();
         if (mNativeRequest != null) {
             mNativeRequest.cancel();
             mNativeRequest = null;
@@ -139,12 +139,12 @@ public void makeRequest(@Nullable final RequestParameters requestParameters) {
 
     public void makeRequest(@Nullable final RequestParameters requestParameters,
             @Nullable Integer sequenceNumber) {
-        final Activity activity = getActivityOrDestroy();
-        if (activity == null) {
+        final Context context = getContextOrDestroy();
+        if (context == null) {
             return;
         }
 
-        if (!DeviceUtils.isNetworkAvailable(activity)) {
+        if (!DeviceUtils.isNetworkAvailable(context)) {
             mMoPubNativeNetworkListener.onNativeFail(CONNECTION_ERROR);
             return;
         }
@@ -155,12 +155,12 @@ public void makeRequest(@Nullable final RequestParameters requestParameters,
     private void loadNativeAd(
             @Nullable final RequestParameters requestParameters,
             @Nullable final Integer sequenceNumber) {
-        final Activity activity = getActivityOrDestroy();
-        if (activity == null) {
+        final Context context = getContextOrDestroy();
+        if (context == null) {
             return;
         }
 
-        final NativeUrlGenerator generator = new NativeUrlGenerator(activity)
+        final NativeUrlGenerator generator = new NativeUrlGenerator(context)
                 .withAdUnitId(mAdUnitId)
                 .withRequest(requestParameters);
 
@@ -178,8 +178,8 @@ private void loadNativeAd(
     }
 
     void requestNativeAd(@Nullable final String endpointUrl) {
-        final Activity activity = getActivityOrDestroy();
-        if (activity == null) {
+        final Context context = getContextOrDestroy();
+        if (context == null) {
             return;
         }
 
@@ -188,22 +188,22 @@ void requestNativeAd(@Nullable final String endpointUrl) {
             return;
         }
 
-        mNativeRequest = new AdRequest(endpointUrl, AdFormat.NATIVE, mAdUnitId, activity, mVolleyListener);
-        RequestQueue requestQueue = Networking.getRequestQueue(activity);
+        mNativeRequest = new AdRequest(endpointUrl, AdFormat.NATIVE, mAdUnitId, context, mVolleyListener);
+        RequestQueue requestQueue = Networking.getRequestQueue(context);
         requestQueue.add(mNativeRequest);
     }
 
     private void onAdLoad(@NonNull final AdResponse response) {
-        final Activity activity = getActivityOrDestroy();
-        if (activity == null) {
+        final Context context = getContextOrDestroy();
+        if (context == null) {
             return;
         }
         final CustomEventNativeListener customEventNativeListener =
                 new CustomEventNativeListener() {
                     @Override
                     public void onNativeAdLoaded(@NonNull final BaseNativeAd nativeAd) {
-                        final Activity activity = getActivityOrDestroy();
-                        if (activity == null) {
+                        final Context context = getContextOrDestroy();
+                        if (context == null) {
                             return;
                         }
 
@@ -213,7 +213,7 @@ public void onNativeAdLoaded(@NonNull final BaseNativeAd nativeAd) {
                             return;
                         }
 
-                        mMoPubNativeNetworkListener.onNativeLoad(new NativeAd(activity,
+                        mMoPubNativeNetworkListener.onNativeLoad(new NativeAd(context,
                                         response.getImpressionTrackingUrl(),
                                         response.getClickTrackingUrl(),
                                         mAdUnitId,
@@ -230,7 +230,7 @@ public void onNativeAdFailed(final NativeErrorCode errorCode) {
                 };
 
         CustomEventNativeAdapter.loadNativeAd(
-                activity,
+                context,
                 mLocalExtras,
                 response,
                 customEventNativeListener
@@ -268,7 +268,7 @@ void onAdError(@NonNull final VolleyError volleyError) {
             NetworkResponse response = volleyError.networkResponse;
             if (response != null && response.statusCode >= 500 && response.statusCode < 600) {
                 mMoPubNativeNetworkListener.onNativeFail(SERVER_ERROR_RESPONSE_CODE);
-            } else if (response == null && !DeviceUtils.isNetworkAvailable(mActivity.get())) {
+            } else if (response == null && !DeviceUtils.isNetworkAvailable(mContext.get())) {
                 MoPubLog.c(String.valueOf(MoPubErrorCode.NO_CONNECTION.toString()));
                 mMoPubNativeNetworkListener.onNativeFail(CONNECTION_ERROR);
             } else {
@@ -277,14 +277,16 @@ void onAdError(@NonNull final VolleyError volleyError) {
         }
     }
 
-    Activity getActivityOrDestroy() {
-        final Activity activity = mActivity.get();
-        if (activity == null) {
+    @VisibleForTesting
+    @Nullable
+    Context getContextOrDestroy() {
+        final Context context = mContext.get();
+        if (context == null) {
             destroy();
-            MoPubLog.d("Weak reference to Activity in MoPubNative became null. This instance" +
+            MoPubLog.d("Weak reference to Context in MoPubNative became null. This instance" +
                     " of MoPubNative is destroyed and No more requests will be processed.");
         }
-        return activity;
+        return context;
     }
 
     @VisibleForTesting
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java
index 819d8d8f..aec86d57 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.view.LayoutInflater;
@@ -36,9 +36,9 @@ public MoPubStaticNativeAdRenderer(@NonNull final ViewBinder viewBinder) {
 
     @Override
     @NonNull
-    public View createAdView(@NonNull final Activity activity, @Nullable final ViewGroup parent) {
+    public View createAdView(@NonNull final Context context, @Nullable final ViewGroup parent) {
         return LayoutInflater
-                .from(activity)
+                .from(context)
                 .inflate(mViewBinder.layoutId, parent, false);
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
index 2aacb163..3574b303 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
@@ -388,7 +388,7 @@ public Object getAdData(final int position) {
      * Gets the ad at the given position, or {@code null} if there is no ad at the given position.
      *
      * This method will attempt to reuse the convertView if it is not {@code null}, and will
-     * otherwise create it. See {@link MoPubAdRenderer#createAdView(Activity, ViewGroup)}.
+     * otherwise create it. See {@link MoPubAdRenderer#createAdView(Context, ViewGroup)}.
      *
      * @param position The position to place an ad into.
      * @param convertView A recycled view into which to render data, or {@code null}.
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java
index a4a3da39..551e6417 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.view.LayoutInflater;
@@ -34,9 +34,9 @@ public MoPubVideoNativeAdRenderer(@NonNull final MediaViewBinder mediaViewBinder
 
     @Override
     @NonNull
-    public View createAdView(@NonNull final Activity activity, @Nullable final ViewGroup parent) {
+    public View createAdView(@NonNull final Context context, @Nullable final ViewGroup parent) {
         return LayoutInflater
-                .from(activity)
+                .from(context)
                 .inflate(mMediaViewBinder.layoutId, parent, false);
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAd.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAd.java
index 08124786..a0f5b81b 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAd.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAd.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -33,7 +32,7 @@
  *
  * When you have a {@link NativeAd} instance and wish to show a view you should:
  *
- * 1. Call {@link #createAdView(Activity, ViewGroup)} to inflate a {@link View} that can show this ad.
+ * 1. Call {@link #createAdView(Context, ViewGroup)} to inflate a {@link View} that can show this ad.
  * 2. Call {@link #renderAdView(View)} with a compatible {@link View} to render the ad data into the view.
  * 3. Just before the ad is shown to the user, call {@link #prepare(View)}.
  * 4. When the ad view is no longer shown to the user, call {@link #clear(View)}. You can later
@@ -132,9 +131,17 @@ public BaseNativeAd getBaseNativeAd() {
         return mBaseNativeAd;
     }
 
+    /**
+     * Renders the ad view. It is highly recommended that this context is an Activity to preserve
+     * the current activity's theme.
+     *
+     * @param context The context, preferably the Activity.
+     * @param parent  An optional parent.
+     * @return The rendered ad view.
+     */
     @NonNull
-    public View createAdView(@NonNull final Activity activity, @Nullable final ViewGroup parent) {
-        return mMoPubAdRenderer.createAdView(activity, parent);
+    public View createAdView(@NonNull final Context context, @Nullable final ViewGroup parent) {
+        return mMoPubAdRenderer.createAdView(context, parent);
     }
 
     public void renderAdView(View view) {
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
index b600d00d..0b275866 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -38,31 +37,31 @@ private NativeAdViewHelper() {
     @NonNull
     static View getAdView(@Nullable View convertView,
             @Nullable final ViewGroup parent,
-            @NonNull final Activity activity,
+            @NonNull final Context context,
             @Nullable final NativeAd nativeAd,
             @Nullable final ViewBinder viewBinder) {
 
         Preconditions.NoThrow.checkNotNull(viewBinder, "ViewBinder is null.");
 
         if (convertView != null) {
-            clearNativeAd(activity, convertView);
+            clearNativeAd(context, convertView);
         }
 
         if (nativeAd == null || nativeAd.isDestroyed() || viewBinder == null) {
             MoPubLog.d("NativeAd or viewBinder null or invalid. Returning empty view");
             // Only create a view if one hasn't been created already
             if (convertView == null || !ViewType.EMPTY.equals(convertView.getTag())) {
-                convertView = new View(activity);
+                convertView = new View(context);
                 convertView.setTag(ViewType.EMPTY);
                 convertView.setVisibility(View.GONE);
             }
         } else {
             // Only create a view if one hasn't been created already
             if (convertView == null || !ViewType.AD.equals(convertView.getTag())) {
-                convertView = nativeAd.createAdView(activity, parent);
+                convertView = nativeAd.createAdView(context, parent);
                 convertView.setTag(ViewType.AD);
             }
-            prepareNativeAd(activity, convertView, nativeAd);
+            prepareNativeAd(context, convertView, nativeAd);
             nativeAd.renderAdView(convertView);
         }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java b/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java
index 7732643d..39cbfc39 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java
@@ -1,6 +1,7 @@
 package com.mopub.nativeads;
 
 import android.app.Activity;
+import android.content.Context;
 import android.graphics.Rect;
 import android.os.Handler;
 import android.os.SystemClock;
@@ -44,8 +45,8 @@
         void onVisibilityChanged(List<View> visibleViews, List<View> invisibleViews);
     }
 
-    @Nullable @VisibleForTesting OnPreDrawListener mOnPreDrawListener;
-    @NonNull @VisibleForTesting final WeakReference<View> mRootView;
+    @NonNull @VisibleForTesting final OnPreDrawListener mOnPreDrawListener;
+    @NonNull @VisibleForTesting WeakReference<ViewTreeObserver> mWeakViewTreeObserver;
 
     static class TrackingInfo {
         int mMinViewablePercent;
@@ -73,15 +74,15 @@
     // Whether the visibility runnable is scheduled
     private boolean mIsVisibilityScheduled;
 
-    public VisibilityTracker(@NonNull final Activity activity) {
-        this(activity,
+    public VisibilityTracker(@NonNull final Context context) {
+        this(context,
                 new WeakHashMap<View, TrackingInfo>(10),
                 new VisibilityChecker(),
                 new Handler());
     }
 
     @VisibleForTesting
-    VisibilityTracker(@NonNull final Activity activity,
+    VisibilityTracker(@NonNull final Context context,
             @NonNull final Map<View, TrackingInfo> trackedViews,
             @NonNull final VisibilityChecker visibilityChecker,
             @NonNull final Handler visibilityHandler) {
@@ -91,22 +92,57 @@ public VisibilityTracker(@NonNull final Activity activity) {
         mVisibilityRunnable = new VisibilityRunnable();
         mTrimmedViews = new ArrayList<View>(NUM_ACCESSES_BEFORE_TRIMMING);
 
-        final View rootView = activity.getWindow().getDecorView();
-        mRootView = new WeakReference<View>(rootView);
+        mOnPreDrawListener = new OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                scheduleVisibilityCheck();
+                return true;
+            }
+        };
+
+        mWeakViewTreeObserver = new WeakReference<ViewTreeObserver>(null);
+        setViewTreeObserver(context, null);
+    }
+
+    private void setViewTreeObserver(@Nullable final Context context, @Nullable final View view) {
+        final ViewTreeObserver originalViewTreeObserver = mWeakViewTreeObserver.get();
+        if (originalViewTreeObserver != null && originalViewTreeObserver.isAlive()) {
+            return;
+        }
+
+        final View rootView = getBestRootView(context, view);
+        if (rootView == null) {
+            MoPubLog.d("Unable to set Visibility Tracker due to no available root view.");
+            return;
+        }
+
         final ViewTreeObserver viewTreeObserver = rootView.getViewTreeObserver();
         if (!viewTreeObserver.isAlive()) {
             MoPubLog.w("Visibility Tracker was unable to track views because the"
                     + " root view tree observer was not alive");
-        } else {
-            mOnPreDrawListener = new OnPreDrawListener() {
-                @Override
-                public boolean onPreDraw() {
-                    scheduleVisibilityCheck();
-                    return true;
-                }
-            };
-            viewTreeObserver.addOnPreDrawListener(mOnPreDrawListener);
+            return;
         }
+
+        mWeakViewTreeObserver = new WeakReference<ViewTreeObserver>(viewTreeObserver);
+        viewTreeObserver.addOnPreDrawListener(mOnPreDrawListener);
+    }
+
+    @VisibleForTesting
+    @Nullable
+    static View getBestRootView(@Nullable final Context context, @Nullable final View view) {
+        if (context instanceof Activity) {
+            return ((Activity) context).getWindow().getDecorView();
+        }
+
+        if (view != null) {
+            final View rootView = view.getRootView();
+            if (rootView != null) {
+                final View rootContentView = rootView.findViewById(android.R.id.content);
+                return rootContentView != null ? rootContentView : rootView;
+            }
+        }
+
+        return null;
     }
 
     void setVisibilityTrackerListener(
@@ -126,6 +162,8 @@ void addView(@NonNull View rootView, @NonNull final View view, final int minPerc
     }
 
     void addView(@NonNull View rootView, @NonNull final View view, final int minVisiblePercentageViewed, final int maxInvisiblePercentageViewed) {
+        setViewTreeObserver(view.getContext(), view);
+
         // Find the view if already tracked
         TrackingInfo trackingInfo = mTrackedViews.get(view);
         if (trackingInfo == null) {
@@ -183,14 +221,11 @@ void clear() {
      */
     void destroy() {
         clear();
-        final View rootView = mRootView.get();
-        if (rootView != null && mOnPreDrawListener != null) {
-            final ViewTreeObserver viewTreeObserver = rootView.getViewTreeObserver();
-            if (viewTreeObserver.isAlive()) {
-                viewTreeObserver.removeOnPreDrawListener(mOnPreDrawListener);
-            }
-            mOnPreDrawListener = null;
+        final ViewTreeObserver viewTreeObserver = mWeakViewTreeObserver.get();
+        if (viewTreeObserver != null && viewTreeObserver.isAlive()) {
+            viewTreeObserver.removeOnPreDrawListener(mOnPreDrawListener);
         }
+        mWeakViewTreeObserver.clear();
         mVisibilityTrackerListener = null;
     }
 
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
index d946d6cb..7607dd22 100644
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=4.7.1+kit
+fabric-version=4.8.0+kit
 fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
index da4c0bb0..d743e27c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
@@ -1,6 +1,5 @@
 package com.mopub.mobileads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
 import android.graphics.Bitmap;
@@ -17,19 +16,16 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.robolectric.Robolectric;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowApplication;
 
-import java.io.File;
-import java.io.FileOutputStream;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.Locale;
 
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
@@ -68,10 +64,8 @@ public void constructor_shouldCreateSendToIntentWithEmailAddress() throws Except
         subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
         emailIntent = subject.getEmailIntent();
 
-        assertThat(emailIntent.getAction()).isEqualTo(Intent.ACTION_SEND_MULTIPLE);
-        assertThat(emailIntent.getType()).isEqualTo("plain/text");
-        assertThat(emailIntent.getData().toString()).isEqualTo("mailto:");
-        assertThat(emailIntent.getStringArrayExtra(Intent.EXTRA_EMAIL)[0]).isEqualTo(EMAIL_ADDRESS);
+        assertThat(emailIntent.getAction()).isEqualTo(Intent.ACTION_SENDTO);
+        assertThat(emailIntent.getData()).isEqualTo(Uri.parse("mailto:creative-review@mopub.com"));
     }
 
     @Test
@@ -118,30 +112,6 @@ public void constructor_shouldCreateIntentWithImageStringAndParametersAndRespons
         assertThat(imageString).isEqualTo("Qml0bWFwICgxMCB4IDEwKSBjcmVhdGVkIGZyb20gQml0bWFwIG9iamVjdCBjb21wcmVzc2VkIGFz\nIEpQRUcgd2l0aCBxdWFsaXR5IDI1\n");
     }
 
-    @Test
-    public void constructor_shouldAddBitmapToAttachmentArray() throws Exception {
-        stub(mockContext.getFilesDir()).toReturn(new File("filesDir"));
-        stub(mockContext.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        emailAttachments = subject.getEmailAttachments();
-        Uri fileUri = Uri.fromFile(new File("filesDir/mp_adalert_screenshot.png"));
-
-        assertThat(emailAttachments).contains(fileUri);
-    }
-
-    @Test
-    public void constructor_shouldAddParametersTextFileToAttachmentArray() throws Exception {
-        stub(mockContext.getFilesDir()).toReturn(new File("filesDir"));
-        stub(mockContext.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        emailAttachments = subject.getEmailAttachments();
-        Uri fileUri = Uri.fromFile(new File("filesDir/mp_adalert_parameters.txt"));
-
-        assertThat(emailAttachments).contains(fileUri);
-    }
-
     @Test
     public void constructor_whenAdReportIsNull_shouldReturnEmptyString() throws Exception {
         subject = new AdAlertReporter(mockContext, mockView, null);
@@ -160,45 +130,16 @@ public void constructor_shouldSetCorrectResponseString() throws Exception {
         assertThat(subject.getResponse()).isEqualTo(expectedResponse);
     }
 
-    @Test
-    public void constructor_shouldAddMarkupTextFileToAttachmentArray() throws Exception {
-        stub(mockAdReport.getResponseString()).toReturn("anything!");
-        stub(mockContext.getFilesDir()).toReturn(new File("filesDir"));
-        stub(mockContext.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        emailAttachments = subject.getEmailAttachments();
-        Uri fileUri = Uri.fromFile(new File("filesDir/mp_adalert_markup.html"));
-
-        assertThat(emailAttachments).contains(fileUri);
-    }
-
-    @Test
-    public void send_shouldAddAttachmentsToIntent() throws Exception {
-        stub(mockContext.getFilesDir()).toReturn(new File("filesDir"));
-        stub(mockContext.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
-        stub(mockAdReport.getResponseString()).toReturn("anything!");
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-        subject.send();
-
-        emailIntent = subject.getEmailIntent();
-        ArrayList<Uri> attachments = emailIntent.getParcelableArrayListExtra(Intent.EXTRA_STREAM);
-
-        assertThat(attachments.size()).isEqualTo(3);
-        assertThat(attachments).contains(Uri.fromFile(new File("filesDir/mp_adalert_screenshot.png")));
-        assertThat(attachments).contains(Uri.fromFile(new File("filesDir/mp_adalert_parameters.txt")));
-        assertThat(attachments).contains(Uri.fromFile(new File("filesDir/mp_adalert_markup.html")));
-    }
-
     @Test
     public void send_shouldCreateEmailChooserIntent() throws Exception {
-
-        subject = new AdAlertReporter(Robolectric.buildActivity(Activity.class).create().get(), mockView, mockAdReport);
+        final Context applicationContext = RuntimeEnvironment.application;
+        // A real device uses application context here, which causes Intents.startActivity to add
+        // FLAG_ACTIVITY_NEW_TASK (and thus we assert for it below)
+        subject = new AdAlertReporter(applicationContext, mockView, mockAdReport);
         subject.send();
 
         Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_CHOOSER);
-        assertThat(intent.getStringExtra(Intent.EXTRA_TITLE)).isEqualTo("Send Email...");
+        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_SENDTO);
         assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
index 2c0b3f95..baa6c57c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
@@ -28,6 +28,7 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyZeroInteractions;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
@@ -267,6 +268,7 @@ public void newlyCreated_shouldNotBeReadyAndNotShow() throws Exception {
 
     @Test
     public void loadingCustomEventInterstitial_shouldBecomeReadyToShowCustomEventAd() throws Exception {
+        subject.load();
         subject.onCustomEventInterstitialLoaded();
 
         assertShowsCustomEventInterstitial(true);
@@ -333,6 +335,357 @@ public void adFailed_shouldNotifyInterstitialAdListener() throws Exception {
         verify(interstitialAdListener).onInterstitialFailed(eq(subject), eq(CANCELLED));
     }
 
+    @Test
+    public void attemptStateTransition_withIdleStartState() {
+        /**
+         * IDLE can go to LOADING when load is called. IDLE can also go to DESTROYED if the
+         * interstitial view is destroyed.
+         */
+
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
+        boolean stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.IDLE, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.IDLE);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.IDLE, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.IDLE);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setInterstitialView(interstitialView);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.LOADING, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.LOADING);
+        verify(customEventInterstitialAdapter).invalidate();
+        verify(interstitialView).loadAd();
+
+        reset(customEventInterstitialAdapter, interstitialView);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setInterstitialView(interstitialView);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.LOADING, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.LOADING);
+        verify(customEventInterstitialAdapter).invalidate();
+        verify(interstitialView).forceRefresh();
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.READY, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.IDLE);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.READY, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.IDLE);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.DESTROYED, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verify(customEventInterstitialAdapter).invalidate();
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.DESTROYED, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verify(customEventInterstitialAdapter).invalidate();
+    }
+
+    @Test
+    public void attemptStateTransition_withLoadingStartState() {
+        /**
+         * LOADING can go to IDLE if and only if it's a hard reset to IDLE. LOADING should go to
+         * READY when the interstitial is done loading. LOADING can go to DESTROYED if the
+         * interstitial view is destroyed.
+         */
+
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
+        boolean stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.IDLE, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.LOADING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.IDLE, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.IDLE);
+        verify(customEventInterstitialAdapter).invalidate();
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.LOADING, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.LOADING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.LOADING, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.LOADING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.READY, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.READY);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.READY, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.READY);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.DESTROYED, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verify(customEventInterstitialAdapter).invalidate();
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.DESTROYED, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verify(customEventInterstitialAdapter).invalidate();
+    }
+
+    @Test
+    public void attemptStateTransition_withReadyStartState() {
+        /**
+         * This state should succeed for going to IDLE. When it's forced, it's implicitly resetting
+         * the internals into ready state. If it's not forced, this is when the interstitial is
+         * shown. Also, READY can go into DESTROYED.
+         */
+
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
+        boolean stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.IDLE, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.IDLE);
+        verify(customEventInterstitialAdapter).showInterstitial();
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.IDLE, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.IDLE);
+        verify(customEventInterstitialAdapter).invalidate();
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.LOADING, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.READY);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+        verify(interstitialAdListener).onInterstitialLoaded(subject);
+
+        reset(customEventInterstitialAdapter, interstitialAdListener);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.LOADING, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.READY);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+        verify(interstitialAdListener).onInterstitialLoaded(subject);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.READY, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.READY);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.READY, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.READY);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.DESTROYED, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verify(customEventInterstitialAdapter).invalidate();
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.DESTROYED, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verify(customEventInterstitialAdapter).invalidate();
+    }
+
+    @Test
+    public void attemptStateTransition_withDestroyedStartState() {
+        // All state transitions should fail if starting from a destroyed state
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
+        boolean stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.IDLE, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.IDLE, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.LOADING, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.LOADING, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.READY, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.READY, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.DESTROYED, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        reset(customEventInterstitialAdapter);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
+        stateDidChange = subject.attemptStateTransition(
+                MoPubInterstitial.InterstitialState.DESTROYED, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
+                MoPubInterstitial.InterstitialState.DESTROYED);
+    }
+
     private void loadCustomEvent() {
         MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
index e23063a6..4d392c6e 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -18,7 +18,6 @@
 
 import org.junit.After;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentMatcher;
@@ -92,6 +91,7 @@ public void loadVideo_withRequestParameters_shouldGenerateUrlWithKeywords() {
 
         // Finish the request
         requestListener.onErrorResponse(new VolleyError("end test"));
+        ShadowLooper.unPauseMainLooper();
     }
 
     @Test
@@ -106,6 +106,7 @@ public void loadVideo_withCustomerIdInRequestParameters_shouldSetCustomerId() {
 
         // Finish the request
         requestListener.onErrorResponse(new VolleyError("end test"));
+        ShadowLooper.unPauseMainLooper();
     }
 
     @Test
@@ -275,6 +276,8 @@ public void onAdSuccess_shouldUpdateAdUnitRewardMapping() throws Exception {
         MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
         requestListener.onSuccess(testResponse);
 
+        ShadowLooper.unPauseMainLooper();
+
         MoPubReward moPubReward =
                 MoPubRewardedVideoManager.getRewardedVideoData().getMoPubReward("testAdUnit");
         assertThat(moPubReward.getAmount()).isEqualTo(123);
@@ -305,7 +308,6 @@ public void playVideo_shouldSetHasVideoFalse() {
     }
     
     @Test
-    @Ignore("Flaky")
     public void playVideo_whenNotHasVideo_shouldFail() {
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$NoVideoCustomEvent")
@@ -329,7 +331,6 @@ public void playVideo_whenNotHasVideo_shouldFail() {
     }
 
     @Test
-    @Ignore("Flaky")
     public void playVideo_shouldUpdateLastShownCustomEventRewardMapping() throws Exception {
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName(
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
index f824e000..4d79a2e2 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
@@ -409,7 +409,7 @@ public void handleClose_afterDestroy_shouldNotFireOnClose() {
     }
 
     @Test
-    public void handleClose_fromExpandedState_shouldMoveWebViewToOriginalContainer_shouldNotFireOnClose() throws MraidCommandException {
+    public void handleClose_fromExpandedState_shouldMoveWebViewToOriginalContainer_shouldFireOnClose() throws MraidCommandException {
         // Move to EXPANDED state
         subject.handlePageLoad();
         subject.handleExpand(null, false);
@@ -419,11 +419,11 @@ public void handleClose_fromExpandedState_shouldMoveWebViewToOriginalContainer_s
         assertThat(subject.getExpandedAdContainer().getChildCount()).isEqualTo(1);
         assertThat(subject.getAdContainer().getChildCount()).isEqualTo(1);
         assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
-        verify(mockMraidListener, never()).onClose();
+        verify(mockMraidListener).onClose();
     }
 
     @Test
-    public void handleClose_fromTwoPartExpandedState_shouldDetachTwoPartBridge_shouldMoveWebViewToOriginalContainer_shouldNotFireOnClose()
+    public void handleClose_fromTwoPartExpandedState_shouldDetachTwoPartBridge_shouldMoveWebViewToOriginalContainer_shouldFireOnClose()
             throws MraidCommandException {
         URI uri = URI.create("https://two-part-url");
 
@@ -439,7 +439,7 @@ public void handleClose_fromTwoPartExpandedState_shouldDetachTwoPartBridge_shoul
         assertThat(subject.getAdContainer().getChildCount()).isEqualTo(1);
         assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
 
-        verify(mockMraidListener, never()).onClose();
+        verify(mockMraidListener).onClose();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
index a9b49fa1..32c3c858 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
@@ -32,14 +32,14 @@ public void setUp() {
         subject = new AdapterHelper(context, start, interval);
     }
 
-    @Test(expected = IllegalArgumentException.class)
-    public void constructor_whenPassedAnApplicationContext_shouldThrowIllegalArgumentException() {
+    @Test
+    public void constructor_whenPassedAnApplicationContext_shouldNotThrowIllegalArgumentException() {
         new AdapterHelper(context.getApplicationContext(), start, interval);
     }
 
     @Test
     public void getAdView_withNullActivityContext_shouldReturnEmptyViewWithApplicationContext() {
-        subject.clearActivityContext();
+        subject.clearContext();
         Context viewContext = subject.getAdView(null, null, mock(NativeAd.class),
                 mock(ViewBinder.class)).getContext();
         assertThat(viewContext).isEqualTo(context.getApplication());
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
index a156332a..d8bb770b 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
@@ -83,12 +83,12 @@ public void registerAdRenderer_shouldCallAdRednererRegistryRegisterAdRenderer()
 
     @Test
     public void destroy_shouldSetListenersToEmptyAndClearContext() {
-        assertThat(subject.getActivityOrDestroy()).isSameAs(context);
+        assertThat(subject.getContextOrDestroy()).isSameAs(context);
         assertThat(subject.getMoPubNativeNetworkListener()).isSameAs(mockNetworkListener);
 
         subject.destroy();
 
-        assertThat(subject.getActivityOrDestroy()).isNull();
+        assertThat(subject.getContextOrDestroy()).isNull();
         assertThat(subject.getMoPubNativeNetworkListener()).isSameAs(EMPTY_NETWORK_LISTENER);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
index 4431db2d..c176e2a4 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
@@ -93,9 +93,9 @@ public void constructor_shouldSetOnPreDrawListenerForDecorView() throws Exceptio
         when(viewTreeObserver.isAlive()).thenReturn(true);
 
         subject = new VisibilityTracker(activity1, trackedViews, visibilityChecker, visibilityHandler);
-        assertThat(subject.mRootView.get()).isEqualTo(decorView);
         assertThat(subject.mOnPreDrawListener).isNotNull();
         verify(viewTreeObserver).addOnPreDrawListener(subject.mOnPreDrawListener);
+        assertThat(subject.mWeakViewTreeObserver.get()).isEqualTo(viewTreeObserver);
     }
 
     @Test
@@ -111,9 +111,72 @@ public void constructor_withNonAliveViewTreeObserver_shouldNotSetOnPreDrawListen
         when(viewTreeObserver.isAlive()).thenReturn(false);
 
         subject = new VisibilityTracker(activity1, trackedViews, visibilityChecker, visibilityHandler);
-        assertThat(subject.mRootView.get()).isEqualTo(decorView);
-        assertThat(subject.mOnPreDrawListener).isNull();
         verify(viewTreeObserver, never()).addOnPreDrawListener(subject.mOnPreDrawListener);
+        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
+    }
+
+    @Test
+    public void constructor_withApplicationContext_shouldNotSetOnPreDrawListener() {
+        subject = new VisibilityTracker(activity.getApplicationContext(), trackedViews,
+                visibilityChecker, visibilityHandler);
+
+        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
+    }
+
+    @Test
+    public void getBestRootView_withActivity_withNullView_shouldReturnActivityDecorView() {
+        Activity activity1 = mock(Activity.class);
+        Window window = mock(Window.class);
+        View decorView = mock(View.class);
+        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
+
+        when(activity1.getWindow()).thenReturn(window);
+        when(window.getDecorView()).thenReturn(decorView);
+        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
+        when(viewTreeObserver.isAlive()).thenReturn(true);
+
+        View view = VisibilityTracker.getBestRootView(activity1, null);
+
+        assertThat(view).isEqualTo(decorView);
+    }
+
+    @Test
+    public void getBestRootView_withApplicationContext_withRootView_shouldReturnRootView() {
+        View rootView = new View(activity.getApplicationContext());
+
+        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), rootView);
+
+        assertThat(view).isEqualTo(rootView);
+    }
+
+    @Test
+    public void getBestRootView_withApplicationContext_withContentView_shouldReturnContentView() {
+        View rootView = mock(View.class);
+        View contentView = mock(View.class);
+
+        when(rootView.findViewById(android.R.id.content)).thenReturn(contentView);
+        when(rootView.getRootView()).thenReturn(rootView);
+
+        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), rootView);
+
+        assertThat(view).isEqualTo(contentView);
+    }
+
+    @Test
+    public void getBestRootView_withApplicationContext_withNullView_shouldReturnNull() {
+        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), null);
+
+        assertThat(view).isNull();
+    }
+
+    @Test
+    public void getBestRootView_withApplicationContext_withNullRootView_withNullParentView_shouldReturnNull() {
+        View originalView = mock(View.class);
+        when(originalView.getRootView()).thenReturn(null);
+
+        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), originalView);
+
+        assertThat(view).isNull();
     }
 
     @Test
@@ -123,7 +186,24 @@ public void addView_withVisibleView_shouldAddVisibleViewToTrackedViews() throws
         assertThat(trackedViews).hasSize(1);
     }
 
-    @Test(expected = AssertionError.class)
+    @Test
+    public void addView_withViewTreeObserverNotSet_shouldSetViewTreeObserver() {
+        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
+        View rootView = mock(View.class);
+
+        when(view.getContext()).thenReturn(activity.getApplicationContext());
+        when(view.getRootView()).thenReturn(rootView);
+        when(rootView.getViewTreeObserver()).thenReturn(viewTreeObserver);
+        when(viewTreeObserver.isAlive()).thenReturn(true);
+
+        subject = new VisibilityTracker(activity.getApplicationContext(), trackedViews,
+                visibilityChecker, visibilityHandler);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED);
+
+        assertThat(subject.mWeakViewTreeObserver.get()).isEqualTo(viewTreeObserver);
+    }
+
+    @Test(expected = NullPointerException.class)
     public void addView_whenViewIsNull_shouldThrowNPE() throws Exception {
         subject.addView(null, MIN_PERCENTAGE_VIEWED);
 
@@ -177,7 +257,7 @@ public void destroy_shouldCallClear_shouldRemoveListenerFromDecorView() throws E
         assertThat(trackedViews).isEmpty();
         verify(visibilityHandler).removeMessages(0);
         verify(viewTreeObserver).removeOnPreDrawListener(any(OnPreDrawListener.class));
-        assertThat(subject.mOnPreDrawListener).isNull();
+        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
     }
 
     @Test
