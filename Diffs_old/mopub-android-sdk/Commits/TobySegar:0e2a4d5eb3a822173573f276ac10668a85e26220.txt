diff --git a/CHANGELOG.md b/CHANGELOG.md
index b8c5b4e9..4f044652 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,8 @@
+## Version 4.15.0 (June 19, 2017)
+- The SDK now sends Advertising ID on Amazon devices when appropriate.
+- Fixed issue with Charles proxy in sample app for API 24+.
+- Bug fixes.
+
 ## Version 4.14.0 (May 10, 2017)
 - Rewarded Ad reward callback `onRewardedVideoCompleted(Set<String>, MoPubReward)` is also triggered now on the client for server-side rewarding.
 - Added click callback for Rewarded Ads.
diff --git a/README.md b/README.md
index 3b5889ef..0f827bbe 100644
--- a/README.md
+++ b/README.md
@@ -27,7 +27,7 @@ The MoPub SDK is available via:
     }
 
     dependencies {
-        compile('com.mopub:mopub-sdk:4.14.0@aar') {
+        compile('com.mopub:mopub-sdk:4.15.0@aar') {
             transitive = true
         }
     }
@@ -48,27 +48,27 @@ The MoPub SDK is available via:
         // ... other project dependencies
 
         // For banners
-        compile('com.mopub:mopub-sdk-banner:4.14.0@aar') {
+        compile('com.mopub:mopub-sdk-banner:4.15.0@aar') {
             transitive = true
         }
         
         // For interstitials
-        compile('com.mopub:mopub-sdk-interstitial:4.14.0@aar') {
+        compile('com.mopub:mopub-sdk-interstitial:4.15.0@aar') {
             transitive = true
         }
 
         // For rewarded videos. This will automatically also include interstitials
-        compile('com.mopub:mopub-sdk-rewardedvideo:4.14.0@aar') {
+        compile('com.mopub:mopub-sdk-rewardedvideo:4.15.0@aar') {
             transitive = true
         }
 
         // For native static (images).
-        compile('com.mopub:mopub-sdk-native-static:4.14.0@aar') {
+        compile('com.mopub:mopub-sdk-native-static:4.15.0@aar') {
             transitive = true
         }
 
         // For native video. This will automatically also include native static
-        compile('com.mopub:mopub-sdk-native-video:4.14.0@aar') {
+        compile('com.mopub:mopub-sdk-native-video:4.15.0@aar') {
             transitive = true
         }
     }
@@ -96,14 +96,8 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- Rewarded Ad reward callback is also triggered now on the client for server-side rewarding.
-- Added click callback for Rewarded Ads.
-  - Any implementors of `MoPubRewardedVideoListener` will now need to also implement `public void onRewardedVideoClicked(@NonNull String adUnitId)`.
-- MoPub Ads now expire after 4 hours of being unused.
-  - Interstitial and Rewarded ads served by MoPub will expire 4 hours after successfully loading, triggering a load failure with the new `EXPIRED` `MoPubErrorCode`.
-  - Cached Native Ad Placer ads now also expire in 4 hours.
-- Improved logging when attempting to show an ad that is not ready.
-- Updated build tools version to 25.0.2.
+- The SDK now sends Advertising ID on Amazon devices when appropriate.
+- Fixed issue with Charles proxy in sample app for API 24+.
 - Bug fixes.
 
 ## Requirements
diff --git a/extras/src/com/mopub/mobileads/FacebookBanner.java b/extras/src/com/mopub/mobileads/FacebookBanner.java
index b1954853..4d60a635 100644
--- a/extras/src/com/mopub/mobileads/FacebookBanner.java
+++ b/extras/src/com/mopub/mobileads/FacebookBanner.java
@@ -16,7 +16,8 @@
 import java.util.Map;
 
 /**
- * Tested with Facebook SDK 4.15.0.
+ * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
+ * latest version and ad format certifications.
  */
 public class FacebookBanner extends CustomEventBanner implements AdListener {
     public static final String PLACEMENT_ID_KEY = "placement_id";
@@ -102,6 +103,11 @@ public void onAdClicked(Ad ad) {
         mBannerListener.onBannerClicked();
     }
 
+    @Override
+    public void onLoggingImpression(Ad ad) {
+        Log.d("MoPub", "Facebook banner ad logged impression.");
+    }
+
     private boolean serverExtrasAreValid(final Map<String, String> serverExtras) {
         final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
         return (placementId != null && placementId.length() > 0);
diff --git a/extras/src/com/mopub/mobileads/FacebookInterstitial.java b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
index 06d4b11f..34fc4ad7 100644
--- a/extras/src/com/mopub/mobileads/FacebookInterstitial.java
+++ b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
@@ -11,7 +11,8 @@
 import java.util.Map;
 
 /**
- * Tested with Facebook SDK 4.15.0.
+ * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
+ * latest version and ad format certifications.
  */
 public class FacebookInterstitial extends CustomEventInterstitial implements InterstitialAdListener {
     public static final String PLACEMENT_ID_KEY = "placement_id";
@@ -99,6 +100,11 @@ public void onAdClicked(final Ad ad) {
         mInterstitialListener.onInterstitialClicked();
     }
 
+    @Override
+    public void onLoggingImpression(Ad ad) {
+        Log.d("MoPub", "Facebook interstitial ad logged impression.");
+    }
+
     @Override
     public void onInterstitialDismissed(final Ad ad) {
         Log.d("MoPub", "Facebook interstitial ad dismissed.");
diff --git a/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java b/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
index 421a7248..a6fdf146 100644
--- a/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
+++ b/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
@@ -11,7 +11,8 @@
 import com.flurry.android.FlurryAgentListener;
 
 /**
- * Tested with Flurry 6.5.0
+ * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
+ * latest version and ad format certifications.
  */
 public final class FlurryAgentWrapper {
     public static final String PARAM_API_KEY = "apiKey";
diff --git a/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java b/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
index 61397ac4..cbfdfcca 100644
--- a/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
+++ b/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
@@ -18,7 +18,8 @@
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 
 /**
- * Tested with Flurry 6.5.0
+ * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
+ * latest version and ad format certifications.
  */
 class FlurryCustomEventBanner extends com.mopub.mobileads.CustomEventBanner {
     private static final String LOG_TAG = FlurryCustomEventBanner.class.getSimpleName();
@@ -96,7 +97,9 @@ protected void onInvalidate() {
     }
 
     private boolean validateExtras(final Map<String, String> serverExtras) {
-        if (serverExtras == null) { return false; }
+        if (serverExtras == null) {
+            return false;
+        }
 
         final String flurryApiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
         final String flurryAdSpace = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
@@ -150,10 +153,6 @@ public void onCloseFullscreen(FlurryAdBanner adBanner) {
         @Override
         public void onAppExit(FlurryAdBanner adBanner) {
             Log.d(LOG_TAG, "onAppExit: Flurry banner ad exited app");
-
-            if (mListener != null) {
-                mListener.onLeaveApplication();
-            }
         }
 
         @Override
@@ -179,7 +178,7 @@ public void onError(FlurryAdBanner adBanner, FlurryAdErrorType adErrorType,
                     "Error type: %s. Error code: %s", adErrorType.toString(), errorCode));
 
             if (mListener != null) {
-                switch(adErrorType) {
+                switch (adErrorType) {
                     case FETCH:
                         mListener.onBannerFailed(NETWORK_NO_FILL);
                         return;
diff --git a/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java b/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
index d2923675..92783e06 100644
--- a/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
+++ b/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
@@ -17,7 +17,8 @@
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 
 /**
- * Tested with Flurry 6.5.0
+ * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
+ * latest version and ad format certifications.
  */
 class FlurryCustomEventInterstitial extends com.mopub.mobileads.CustomEventInterstitial {
     private static final String LOG_TAG = FlurryCustomEventInterstitial.class.getSimpleName();
@@ -102,7 +103,9 @@ protected void showInterstitial() {
     }
 
     private boolean validateExtras(final Map<String, String> serverExtras) {
-        if (serverExtras == null) { return false; }
+        if (serverExtras == null) {
+            return false;
+        }
 
         final String flurryApiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
         final String flurryAdSpace = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
@@ -154,10 +157,6 @@ public void onClose(FlurryAdInterstitial adInterstitial) {
         @Override
         public void onAppExit(FlurryAdInterstitial adInterstitial) {
             Log.d(LOG_TAG, "onAppExit: Flurry interstitial ad exited app");
-
-            if (mListener != null) {
-                mListener.onLeaveApplication();
-            }
         }
 
         @Override
@@ -183,7 +182,7 @@ public void onError(FlurryAdInterstitial adInterstitial, FlurryAdErrorType adErr
                     "Error type: %s. Error code: %s", adErrorType.toString(), errorCode));
 
             if (mListener != null) {
-                switch(adErrorType) {
+                switch (adErrorType) {
                     case FETCH:
                         mListener.onInterstitialFailed(NETWORK_NO_FILL);
                         return;
diff --git a/extras/src/com/mopub/nativeads/FacebookAdRenderer.java b/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
index c054c9a9..5a345081 100644
--- a/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
+++ b/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
@@ -19,6 +19,8 @@
  * Include this class if you want to use Facebook native video ads. This renderer handles Facebook
  * static and video native ads. This will automatically replace the main image view with the
  * Facebook MediaView that handles showing the main asset.
+ * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
+ * latest version and ad format certifications.
  */
 public class FacebookAdRenderer implements MoPubAdRenderer<FacebookNative.FacebookVideoEnabledNativeAd> {
     private final ViewBinder mViewBinder;
@@ -206,4 +208,3 @@ public boolean isMainImageViewInRelativeView() {
         }
     }
 }
-
diff --git a/extras/src/com/mopub/nativeads/FacebookNative.java b/extras/src/com/mopub/nativeads/FacebookNative.java
index c6b1ee58..c15bc2eb 100644
--- a/extras/src/com/mopub/nativeads/FacebookNative.java
+++ b/extras/src/com/mopub/nativeads/FacebookNative.java
@@ -6,7 +6,6 @@
 import com.facebook.ads.Ad;
 import com.facebook.ads.AdError;
 import com.facebook.ads.AdListener;
-import com.facebook.ads.ImpressionListener;
 import com.facebook.ads.MediaView;
 import com.facebook.ads.NativeAd;
 import com.facebook.ads.NativeAd.Rating;
@@ -21,10 +20,12 @@
 import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
 
 /**
- * Tested with Facebook SDK 4.15.0. FacebookAdRenderer is also necessary in order to show video ads.
+ * FacebookAdRenderer is also necessary in order to show video ads.
  * Video ads will only be shown if VIDEO_ENABLED is set to true or a server configuration
  * "video_enabled" flag is set to true. The server configuration will override the local
  * configuration.
+ * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
+ * latest version and ad format certifications.
  */
 public class FacebookNative extends CustomEventNative {
     private static final String PLACEMENT_ID_KEY = "placement_id";
@@ -126,7 +127,7 @@ private boolean extrasAreValid(final Map<String, String> serverExtras) {
         return (placementId != null && placementId.length() > 0);
     }
 
-    static class FacebookStaticNativeAd extends StaticNativeAd implements AdListener, ImpressionListener {
+    static class FacebookStaticNativeAd extends StaticNativeAd implements AdListener {
         private static final String SOCIAL_CONTEXT_FOR_AD = "socialContextForAd";
 
         private final Context mContext;
@@ -143,7 +144,6 @@ private boolean extrasAreValid(final Map<String, String> serverExtras) {
 
         void loadAd() {
             mNativeAd.setAdListener(this);
-            mNativeAd.setImpressionListener(this);
             mNativeAd.loadAd();
         }
 
@@ -221,7 +221,6 @@ public void onAdClicked(final Ad ad) {
             notifyAdClicked();
         }
 
-        // ImpressionListener
         @Override
         public void onLoggingImpression(final Ad ad) {
             notifyAdImpressed();
@@ -253,7 +252,7 @@ private Double getDoubleRating(final Rating rating) {
     }
 
 
-    static class FacebookVideoEnabledNativeAd extends BaseNativeAd implements AdListener, ImpressionListener {
+    static class FacebookVideoEnabledNativeAd extends BaseNativeAd implements AdListener {
         private static final String SOCIAL_CONTEXT_FOR_AD = "socialContextForAd";
 
         static final double MIN_STAR_RATING = 0;
@@ -278,7 +277,6 @@ private Double getDoubleRating(final Rating rating) {
 
         void loadAd() {
             mNativeAd.setAdListener(this);
-            mNativeAd.setImpressionListener(this);
             mNativeAd.loadAd();
         }
 
@@ -407,7 +405,6 @@ public void onAdClicked(final Ad ad) {
             notifyAdClicked();
         }
 
-        // ImpressionListener
         @Override
         public void onLoggingImpression(final Ad ad) {
             notifyAdImpressed();
@@ -450,7 +447,7 @@ final public Object getExtra(final String key) {
             return new HashMap<String, Object>(mExtras);
         }
 
-        final public void addExtra( final String key, final Object value) {
+        final public void addExtra(final String key, final Object value) {
             if (!Preconditions.NoThrow.checkNotNull(key, "addExtra key is not allowed to be null")) {
                 return;
             }
diff --git a/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java b/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java
index 3fe494e1..288425dd 100644
--- a/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java
+++ b/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java
@@ -7,7 +7,8 @@
 import java.util.Map;
 
 /**
- * Tested with Flurry 6.5.0
+ * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
+ * latest version and ad format certifications.
  */
 public interface FlurryBaseNativeAd {
 
diff --git a/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java b/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
index ddcc9639..09c131bf 100644
--- a/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
+++ b/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
@@ -22,7 +22,8 @@
 import java.util.Map;
 
 /**
- * Tested with Flurry 6.5.0
+ * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
+ * latest version and ad format certifications.
  */
 public final class FlurryCustomEventNative extends CustomEventNative {
 
diff --git a/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java b/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
index c73e4e6e..bc3081c5 100644
--- a/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
+++ b/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
@@ -14,7 +14,8 @@
  * specified in the FlurryNativeViewHolder.videoView to show a video. If a video is not available,
  * this will still use the mainImageView.
  *
- * Tested with Flurry 6.5.0
+ * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
+ * latest version and ad format certifications.
  */
 public class FlurryNativeAdRenderer implements
         MoPubAdRenderer<FlurryCustomEventNative.FlurryVideoEnabledNativeAd> {
diff --git a/extras/src/com/mopub/nativeads/FlurryViewBinder.java b/extras/src/com/mopub/nativeads/FlurryViewBinder.java
index 0699f418..ab775b3c 100644
--- a/extras/src/com/mopub/nativeads/FlurryViewBinder.java
+++ b/extras/src/com/mopub/nativeads/FlurryViewBinder.java
@@ -3,7 +3,8 @@
 import android.support.annotation.NonNull;
 
 /**
- * Tested with Flurry 6.5.0
+ * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
+ * latest version and ad format certifications.
  */
 public class FlurryViewBinder {
     ViewBinder staticViewBinder;
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index d8576cc7..4773efcd 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,10 +1,10 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="51"
-      android:versionName="4.14.0">
+      android:versionCode="52"
+      android:versionName="4.15.0">
     <uses-sdk android:minSdkVersion="16"
-              android:targetSdkVersion="23"/>
+              android:targetSdkVersion="24"/>
 
     <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
@@ -13,7 +13,8 @@
     <!-- For MRAID 2 -->
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
 
-    <application android:icon="@drawable/icon" android:label="@string/app_name">
+    <application android:icon="@drawable/icon" android:label="@string/app_name"
+                 android:networkSecurityConfig="@xml/network_security_config">
 	    <activity android:name="com.mopub.simpleadsdemo.MoPubSampleActivity"
 	            android:label="@string/app_name"
                 android:configChanges="orientation|screenSize">
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index 8d401831..516d5d2e 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -9,18 +9,18 @@ apply plugin: 'com.android.application'
 
 project.group = 'com.mopub'
 project.description = '''MoPub Sample App'''
-project.version = '4.14.0'
+project.version = '4.15.0'
 
 android {
-    compileSdkVersion 23
+    compileSdkVersion 24
     buildToolsVersion '25.0.2'
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 51
+        versionCode 52
         versionName version
         minSdkVersion 16
-        targetSdkVersion 23
+        targetSdkVersion 24
     }
 
     buildTypes {
@@ -55,8 +55,8 @@ android {
 }
 
 dependencies {
-    compile 'com.android.support:support-v4:23.1.1'
+    compile 'com.android.support:support-v4:24.0.0'
     compile 'com.google.android.gms:play-services-ads:9.4.0'
-    compile 'com.android.support:recyclerview-v7:23.1.1'
+    compile 'com.android.support:recyclerview-v7:24.0.0'
     compile project(':mopub-sdk')
 }
diff --git a/mopub-sample/res/xml/network_security_config.xml b/mopub-sample/res/xml/network_security_config.xml
new file mode 100644
index 00000000..ed36e236
--- /dev/null
+++ b/mopub-sample/res/xml/network_security_config.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<network-security-config>
+    <base-config>
+        <trust-anchors>
+            <certificates src="system"/>
+        </trust-anchors>
+    </base-config>
+    <debug-overrides>
+        <trust-anchors>
+            <certificates src="user"/>
+        </trust-anchors>
+    </debug-overrides>
+</network-security-config>
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
index d6c76b92..1317ab36 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
@@ -1,5 +1,6 @@
 package com.mopub.common;
 
+import android.content.ContentResolver;
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageInfo;
@@ -11,6 +12,7 @@
 import android.os.Build;
 import android.provider.Settings;
 import android.telephony.TelephonyManager;
+import android.text.TextUtils;
 
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.DeviceUtils;
@@ -36,6 +38,7 @@
     private static final String IFA_PREFIX = "ifa:";
     private static final String SHA_PREFIX = "sha:";
     private static final int UNKNOWN_NETWORK = -1;
+    private static final int MISSING_VALUE = -1;
 
     private String mNetworkOperatorForUrl;
     private final String mNetworkOperator;
@@ -184,8 +187,28 @@ public ClientMetadata(Context context) {
             mSimOperatorName = null;
         }
 
-        // Get the device ID. This will be replaced later when the Play Services callbacks complete.
-        mUdid = getDeviceIdFromContext(mContext);
+        setAmazonAdvertisingInfo();
+        if (!mAdvertisingInfoSet) {
+            // Amazon ad info is not supported on this device, so get the device ID.
+            // This will be replaced later when the Play Services callbacks complete.
+            mUdid = getDeviceIdFromContext(mContext);
+        }
+
+    }
+
+    // For Amazon tablets running Fire OS 5.1+ and TV devices running Fire OS 5.2.1.1+, the
+    // advertising info is available as System Settings.
+    // See https://developer.amazon.com/public/solutions/devices/fire-tv/docs/fire-tv-advertising-id
+    @VisibleForTesting
+    protected void setAmazonAdvertisingInfo() {
+        ContentResolver resolver = mContext.getContentResolver();
+        int limitAdTracking = Settings.Secure.getInt(resolver, "limit_ad_tracking", MISSING_VALUE);
+        String advertisingId = Settings.Secure.getString(resolver, "advertising_id");
+
+        if (limitAdTracking != MISSING_VALUE && !TextUtils.isEmpty(advertisingId)) {
+            boolean doNotTrack = limitAdTracking != 0;
+            setAdvertisingInfo(advertisingId, doNotTrack);
+        }
     }
 
     private static String getAppVersionFromContext(Context context) {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
index 3a745932..9be4cd82 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
@@ -11,10 +11,41 @@
 import java.lang.reflect.Method;
 
 public class MoPub {
-    public static final String SDK_VERSION = "4.14.0";
+    public static final String SDK_VERSION = "4.15.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
+    /**
+     * Browser agent to handle URIs with scheme HTTP or HTTPS
+     */
+    public enum BrowserAgent {
+        /**
+         * MoPub's in-app browser
+         */
+        IN_APP,
+
+        /**
+         * Default browser application on device
+         */
+        NATIVE;
+
+        /**
+         * Maps header value from MoPub's AdServer to browser agent:
+         * 0 is MoPub's in-app browser (IN_APP), and 1 is device's default browser (NATIVE).
+         * For null or all other undefined values, returns default browser agent IN_APP.
+         * @param browserAgent Integer header value from MoPub's AdServer.
+         * @return IN_APP for 0, NATIVE for 1, and IN_APP for null or all other undefined values.
+         */
+        @NonNull
+        public static BrowserAgent fromHeader(@Nullable final Integer browserAgent) {
+            if (browserAgent == null) {
+                return IN_APP;
+            }
+
+            return browserAgent == 1 ? NATIVE : IN_APP;
+        }
+    }
+
     private static final String MOPUB_REWARDED_VIDEOS =
             "com.mopub.mobileads.MoPubRewardedVideos";
     private static final String MOPUB_REWARDED_VIDEO_MANAGER =
@@ -26,18 +57,26 @@
 
     private static final int DEFAULT_LOCATION_PRECISION = 6;
     private static final long DEFAULT_LOCATION_REFRESH_TIME_MILLIS = 60 * 1000;
-    private static volatile LocationAwareness sLocationLocationAwareness = LocationAwareness.NORMAL;
+
+    @NonNull private static volatile LocationAwareness sLocationAwareness = LocationAwareness.NORMAL;
     private static volatile int sLocationPrecision = DEFAULT_LOCATION_PRECISION;
     private static volatile long sMinimumLocationRefreshTimeMillis = DEFAULT_LOCATION_REFRESH_TIME_MILLIS;
+    @NonNull private static volatile BrowserAgent sBrowserAgent = BrowserAgent.IN_APP;
+    private static volatile boolean sIsBrowserAgentOverriddenByClient = false;
     private static boolean sSearchedForUpdateActivityMethod = false;
     @Nullable private static Method sUpdateActivityMethod;
 
+    @NonNull
     public static LocationAwareness getLocationAwareness() {
-        return sLocationLocationAwareness;
+        Preconditions.checkNotNull(sLocationAwareness);
+
+        return sLocationAwareness;
     }
 
-    public static void setLocationAwareness(LocationAwareness locationAwareness) {
-        sLocationLocationAwareness = locationAwareness;
+    public static void setLocationAwareness(@NonNull final LocationAwareness locationAwareness) {
+        Preconditions.checkNotNull(locationAwareness);
+
+        sLocationAwareness = locationAwareness;
     }
 
     public static int getLocationPrecision() {
@@ -61,6 +100,42 @@ public static long getMinimumLocationRefreshTimeMillis() {
         return sMinimumLocationRefreshTimeMillis;
     }
 
+    public static void setBrowserAgent(@NonNull final BrowserAgent browserAgent) {
+        Preconditions.checkNotNull(browserAgent);
+
+        sBrowserAgent = browserAgent;
+        sIsBrowserAgentOverriddenByClient = true;
+    }
+
+    public static void setBrowserAgentFromAdServer(
+            @NonNull final BrowserAgent adServerBrowserAgent) {
+        Preconditions.checkNotNull(adServerBrowserAgent);
+
+        if (sIsBrowserAgentOverriddenByClient) {
+            MoPubLog.w("Browser agent already overridden by client with value " + sBrowserAgent);
+        } else {
+            sBrowserAgent = adServerBrowserAgent;
+        }
+    }
+
+    @NonNull
+    public static BrowserAgent getBrowserAgent() {
+        Preconditions.checkNotNull(sBrowserAgent);
+
+        return sBrowserAgent;
+    }
+
+    @VisibleForTesting
+    static boolean isBrowserAgentOverriddenByClient() {
+        return sIsBrowserAgentOverriddenByClient;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    public static void resetBrowserAgent() {
+        sBrowserAgent = BrowserAgent.IN_APP;
+        sIsBrowserAgentOverriddenByClient = false;
+    }
 
     //////// MoPub LifecycleListener messages ////////
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java
index 7bd4c068..565239a8 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java
@@ -7,6 +7,7 @@
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
+import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.event.BaseEvent;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Intents;
@@ -18,6 +19,7 @@
 
 import static com.mopub.common.Constants.HTTP;
 import static com.mopub.common.Constants.HTTPS;
+import static com.mopub.common.MoPub.getBrowserAgent;
 import static com.mopub.network.TrackingRequest.makeTrackingHttpRequest;
 
 /**
@@ -102,7 +104,13 @@ protected void performAction(
     /* 3 */ OPEN_NATIVE_BROWSER(true) {
         @Override
         public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
-            return "mopubnativebrowser".equalsIgnoreCase(uri.getScheme());
+            final String scheme = uri.getScheme();
+
+            if (HTTP.equalsIgnoreCase(scheme) || HTTPS.equalsIgnoreCase(scheme)) {
+                return getBrowserAgent() == BrowserAgent.NATIVE;
+            }
+
+            return "mopubnativebrowser".equalsIgnoreCase(scheme);
         }
 
         @Override
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java
index c0d9b3e8..b54723cb 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java
@@ -13,6 +13,7 @@
 import android.text.TextUtils;
 
 import com.mopub.common.Constants;
+import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.Preconditions;
 import com.mopub.common.UrlAction;
@@ -23,6 +24,7 @@
 import java.util.List;
 
 import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
+import static com.mopub.common.MoPub.getBrowserAgent;
 
 public class Intents {
 
@@ -81,17 +83,38 @@ public static boolean deviceCanHandleIntent(@NonNull final Context context,
      *
      * @param uri The Native Browser Scheme URL to open in the external browser.
      * @return An Intent that will open an app-external browser taking the user to a page specified
-     * in the query parameter of the passed-in url
-     * @throws UrlParseException if the provided url has an invalid format or is non-hierarchical
+     * in the query parameter of the passed-in url.
+     * @throws UrlParseException if the provided url has an invalid format or is non-hierarchical.
      */
     public static Intent intentForNativeBrowserScheme(@NonNull final Uri uri)
             throws UrlParseException {
         Preconditions.checkNotNull(uri);
 
         if (!UrlAction.OPEN_NATIVE_BROWSER.shouldTryHandlingUrl(uri)) {
-            throw new UrlParseException("URL does not have mopubnativebrowser:// scheme.");
+            String supportedSchemes = "mopubnativebrowser://";
+            if (getBrowserAgent() == BrowserAgent.NATIVE) {
+                supportedSchemes += ", http://, or https://";
+            }
+            throw new UrlParseException("URI does not have " + supportedSchemes + " scheme.");
+        }
+
+        if ("mopubnativebrowser".equalsIgnoreCase(uri.getScheme())) {
+            final Uri intentUri = parseMoPubNativeBrowserUri(uri);
+            return new Intent(Intent.ACTION_VIEW, intentUri);
+        }
+
+        if (getBrowserAgent() == BrowserAgent.NATIVE) {
+            return new Intent(Intent.ACTION_VIEW, uri);
         }
 
+        // Should never get here
+        throw new UrlParseException("Invalid URI: " + uri.toString());
+    }
+
+    private static Uri parseMoPubNativeBrowserUri(@NonNull final Uri uri)
+            throws UrlParseException {
+        Preconditions.checkNotNull(uri);
+
         if (!"navigate".equals(uri.getHost())) {
             throw new UrlParseException("URL missing 'navigate' host parameter.");
         }
@@ -110,8 +133,7 @@ public static Intent intentForNativeBrowserScheme(@NonNull final Uri uri)
             throw new UrlParseException("URL missing 'url' query parameter.");
         }
 
-        final Uri intentUri = Uri.parse(urlToOpenInNativeBrowser);
-        return new Intent(Intent.ACTION_VIEW, intentUri);
+        return Uri.parse(urlToOpenInNativeBrowser);
     }
 
     /**
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
index d8aded62..fddc88a8 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
@@ -25,6 +25,7 @@
     LOCATION("Location"),
     USER_AGENT("User-Agent"),
     ACCEPT_LANGUAGE("Accept-Language"),
+    BROWSER_AGENT("X-Browser-Agent"),
 
     // Native Video fields
     PLAY_VISIBLE_PERCENT("X-Play-Visible-Percent"),
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
index b3dd1bff..68f20059 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
@@ -66,10 +66,10 @@
     }
     
     public static class CloseButton {
-        public static final int WIDGET_HEIGHT_DIPS = 46;
-        public static final int EDGE_PADDING = 16;
-        public static final int IMAGE_PADDING_DIPS = 5;
-        public static final int TEXT_RIGHT_MARGIN_DIPS = 7;
+        public static final int WIDGET_HEIGHT_DIPS = 56;
+        public static final int EDGE_PADDING = 6;
+        public static final int IMAGE_PADDING_DIPS = 15;
+        public static final int TEXT_RIGHT_MARGIN_DIPS = 0;
         public static final float TEXT_SIZE_SP = 20f;
 
         public static final int STROKE_COLOR = Color.WHITE;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
index 1285cc62..a5b423e2 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
@@ -13,6 +13,7 @@
 import com.mopub.common.FullAdType;
 import com.mopub.common.LocationService;
 import com.mopub.common.MoPub;
+import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.event.BaseEvent;
@@ -198,6 +199,12 @@ public Listener getListener() {
                 fullAdTypeString, headers);
         builder.setCustomEventClassName(customEventClassName);
 
+        // Default browser agent from X-Browser-Agent header
+        BrowserAgent browserAgent = BrowserAgent.fromHeader(
+                extractIntegerHeader(headers, ResponseHeader.BROWSER_AGENT));
+        MoPub.setBrowserAgentFromAdServer(browserAgent);
+        builder.setBrowserAgent(browserAgent);
+
         // Process server extras if they are present:
         String customEventData = extractHeader(headers, ResponseHeader.CUSTOM_EVENT_DATA);
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
index 5a28175b..7e034601 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
@@ -3,6 +3,7 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
+import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.event.EventDetails;
 import com.mopub.common.util.DateAndTime;
 
@@ -72,6 +73,8 @@
 
     @Nullable
     private final String mCustomEventClassName;
+    @Nullable
+    private final BrowserAgent mBrowserAgent;
     @NonNull
     private final Map<String, String> mServerExtras;
 
@@ -106,6 +109,7 @@ private AdResponse(@NonNull Builder builder) {
         mJsonBody = builder.jsonBody;
         mEventDetails = builder.eventDetails;
         mCustomEventClassName = builder.customEventClassName;
+        mBrowserAgent = builder.mBrowserAgent;
         mServerExtras = builder.serverExtras;
         mTimestamp = DateAndTime.now().getTime();
     }
@@ -237,6 +241,9 @@ public String getCustomEventClassName() {
         return mCustomEventClassName;
     }
 
+    @Nullable
+    public BrowserAgent getBrowserAgent() { return mBrowserAgent; }
+
     @NonNull
     public Map<String, String> getServerExtras() {
         // Strings are immutable, so this works as a "deep" copy.
@@ -270,6 +277,7 @@ public Builder toBuilder() {
                 .setJsonBody(mJsonBody)
                 .setEventDetails(mEventDetails)
                 .setCustomEventClassName(mCustomEventClassName)
+                .setBrowserAgent(mBrowserAgent)
                 .setServerExtras(mServerExtras);
     }
 
@@ -306,6 +314,7 @@ public Builder toBuilder() {
         private EventDetails eventDetails;
 
         private String customEventClassName;
+        private BrowserAgent mBrowserAgent;
         private Map<String, String> serverExtras = new TreeMap<String, String>();
 
         public Builder setAdType(@Nullable final String adType) {
@@ -433,6 +442,11 @@ public Builder setCustomEventClassName(@Nullable final String customEventClassNa
             return this;
         }
 
+        public Builder setBrowserAgent(@Nullable final BrowserAgent browserAgent) {
+            this.mBrowserAgent = browserAgent;
+            return this;
+        }
+
         public Builder setServerExtras(@Nullable final Map<String, String> serverExtras) {
             if (serverExtras == null) {
                 this.serverExtras = new TreeMap<String, String>();
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index 29fa9a68..228e38d5 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -9,7 +9,7 @@ repositories {
 }
 
 project.group = 'com.mopub'
-project.version = '4.14.0'
+project.version = '4.15.0'
 
 android {
     compileSdkVersion 23
@@ -18,7 +18,7 @@ android {
     useLibrary 'org.apache.http.legacy'
 
     defaultConfig {
-        versionCode 51
+        versionCode 52
         versionName version
         minSdkVersion 16
         targetSdkVersion 23
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
index ea7a4cad..a561a950 100644
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=4.14.0+kit
+fabric-version=4.15.0+kit
 fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java b/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
index 31f38117..9f1ef0b6 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
@@ -1,17 +1,21 @@
 package com.mopub.common;
 
 import android.app.Activity;
+import android.content.ContentResolver;
 import android.content.Context;
+import android.provider.Settings;
 import android.telephony.TelephonyManager;
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
 
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 
@@ -34,6 +38,13 @@ public void setUp() throws Exception {
                 Shadows.shadowOf((TelephonyManager) activityContext.getSystemService(Context.TELEPHONY_SERVICE));
     }
 
+    @After
+    public void tearDown() throws Exception {
+        ContentResolver resolver = RuntimeEnvironment.application.getContentResolver();
+        Settings.Secure.putString(resolver, "limit_ad_tracking", null);
+        Settings.Secure.putString(resolver, "advertising_id", null);
+    }
+
     // This has to be first or the singleton will be initialized by an earlier test. We should
     // destroy the application between tests to get around this.
     @Test
@@ -71,4 +82,63 @@ public void testCachedData_shouldBeAvailable() {
         // Other cached data.
         assertThat(clientMetadata.getDeviceId()).isNotNull().isNotEmpty();
     }
+
+    @Test
+    public void constructor_onAmazonDevice_shouldSetAmazonAdvertisingInfo() {
+        ContentResolver resolver = RuntimeEnvironment.application.getContentResolver();
+        Settings.Secure.putInt(resolver, "limit_ad_tracking", 1);
+        Settings.Secure.putString(resolver, "advertising_id", "this-is-an-ifa");
+
+        final ClientMetadata clientMetadata = ClientMetadata.getInstance(activityContext);
+
+        assertThat(clientMetadata.getDeviceId()).isEqualTo("ifa:this-is-an-ifa");
+        assertThat(clientMetadata.isDoNotTrackSet()).isTrue();
+        assertThat(clientMetadata.isAdvertisingInfoSet()).isTrue();
+    }
+
+    @Test
+    public void constructor_onNonAmazonDevice_shouldSetSha() {
+        final ClientMetadata clientMetadata = ClientMetadata.getInstance(activityContext);
+
+        assertThat(clientMetadata.getDeviceId()).startsWith("sha:");
+        assertThat(clientMetadata.isDoNotTrackSet()).isFalse();
+        assertThat(clientMetadata.isAdvertisingInfoSet()).isFalse();
+    }
+
+    @Test
+    public void constructor_onAmazonDevice_withoutLimitAdTracking_shouldSetSha() {
+        ContentResolver resolver = RuntimeEnvironment.application.getContentResolver();
+        Settings.Secure.putString(resolver, "advertising_id", "this-is-an-ifa");
+
+        final ClientMetadata clientMetadata = ClientMetadata.getInstance(activityContext);
+
+        assertThat(clientMetadata.getDeviceId()).startsWith("sha:");
+        assertThat(clientMetadata.isDoNotTrackSet()).isFalse();
+        assertThat(clientMetadata.isAdvertisingInfoSet()).isFalse();
+    }
+
+    @Test
+    public void constructor_onAmazonDevice_withoutAdvertisingId_shouldSetSha() {
+        ContentResolver resolver = RuntimeEnvironment.application.getContentResolver();
+        Settings.Secure.putInt(resolver, "limit_ad_tracking", 1);
+
+        final ClientMetadata clientMetadata = ClientMetadata.getInstance(activityContext);
+
+        assertThat(clientMetadata.getDeviceId()).startsWith("sha:");
+        assertThat(clientMetadata.isDoNotTrackSet()).isFalse();
+        assertThat(clientMetadata.isAdvertisingInfoSet()).isFalse();
+    }
+
+    @Test
+    public void constructor_onAmazonDevice_withEmptyAdvertisingId_shouldSetSha() {
+        ContentResolver resolver = RuntimeEnvironment.application.getContentResolver();
+        Settings.Secure.putInt(resolver, "limit_ad_tracking", 1);
+        Settings.Secure.putString(resolver, "advertising_id", "");
+
+        final ClientMetadata clientMetadata = ClientMetadata.getInstance(activityContext);
+
+        assertThat(clientMetadata.getDeviceId()).startsWith("sha:");
+        assertThat(clientMetadata.isDoNotTrackSet()).isFalse();
+        assertThat(clientMetadata.isAdvertisingInfoSet()).isFalse();
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
index b54eb796..27a9597a 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 
+import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Reflection;
 import com.mopub.mobileads.BuildConfig;
@@ -53,6 +54,47 @@ public void setup() {
         mockRequestParameters = mock(MoPubRewardedVideoManager.RequestParameters.class);
 
         mockStatic(MoPubRewardedVideoManager.class);
+
+        MoPub.resetBrowserAgent();
+    }
+
+    @Test
+    public void setBrowserAgent_withDefaultValue_shouldNotChangeBrowserAgent_shouldSetOverriddenFlag() {
+        MoPub.setBrowserAgent(BrowserAgent.IN_APP);
+        assertThat(MoPub.getBrowserAgent()).isEqualTo(BrowserAgent.IN_APP);
+        assertThat(MoPub.isBrowserAgentOverriddenByClient()).isTrue();
+    }
+
+    @Test
+    public void setBrowserAgent_withNonDefaultValue_shouldChangeBrowserAgent_shouldSetOverriddenFlag() {
+        MoPub.setBrowserAgent(BrowserAgent.NATIVE);
+        assertThat(MoPub.getBrowserAgent()).isEqualTo(BrowserAgent.NATIVE);
+        assertThat(MoPub.isBrowserAgentOverriddenByClient()).isTrue();
+    }
+
+    @Test
+    public void setBrowserAgentFromAdServer_whenNotAlreadyOverriddenByClient_shouldSetBrowserAgentFromAdServer() {
+        MoPub.setBrowserAgentFromAdServer(BrowserAgent.NATIVE);
+        assertThat(MoPub.getBrowserAgent()).isEqualTo(BrowserAgent.NATIVE);
+        assertThat(MoPub.isBrowserAgentOverriddenByClient()).isFalse();
+    }
+
+    @Test
+    public void setBrowserAgentFromAdServer_whenAlreadyOverriddenByClient_shouldNotChangeBrowserAgent() {
+        MoPub.setBrowserAgent(BrowserAgent.NATIVE);
+        MoPub.setBrowserAgentFromAdServer(BrowserAgent.IN_APP);
+        assertThat(MoPub.getBrowserAgent()).isEqualTo(BrowserAgent.NATIVE);
+        assertThat(MoPub.isBrowserAgentOverriddenByClient()).isTrue();
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void setBrowserAgent_withNullValue_shouldThrowException() {
+        MoPub.setBrowserAgent(null);
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void setBrowserAgentFromAdServer_withNullValue_shouldThrowException() {
+        MoPub.setBrowserAgentFromAdServer(null);
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
index bde01702..dadf0efa 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
@@ -4,28 +4,35 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
+import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 
+import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
 
+import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK;
+import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK;
 import static com.mopub.common.UrlAction.HANDLE_MOPUB_SCHEME;
-import static com.mopub.common.UrlAction.IGNORE_ABOUT_SCHEME;
 import static com.mopub.common.UrlAction.HANDLE_PHONE_SCHEME;
-import static com.mopub.common.UrlAction.OPEN_NATIVE_BROWSER;
+import static com.mopub.common.UrlAction.HANDLE_SHARE_TWEET;
+import static com.mopub.common.UrlAction.IGNORE_ABOUT_SCHEME;
 import static com.mopub.common.UrlAction.OPEN_APP_MARKET;
 import static com.mopub.common.UrlAction.OPEN_IN_APP_BROWSER;
-import static com.mopub.common.UrlAction.HANDLE_SHARE_TWEET;
-import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK;
-import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK;
+import static com.mopub.common.UrlAction.OPEN_NATIVE_BROWSER;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class UrlActionTest {
 
+    @Before
+    public void setUp() {
+        MoPub.resetBrowserAgent();
+    }
+
     @Test
     public void handleMopubScheme_shouldBeCaseInsensitive() throws Exception {
         assertUrlActionMatching(HANDLE_MOPUB_SCHEME, "mopub:", true);
@@ -59,6 +66,21 @@ public void handlePhoneScheme_shouldBeCaseInsensitive() throws Exception {
     public void openNativeBrowser_shouldBeCaseInsensitive() throws Exception {
         assertUrlActionMatching(OPEN_NATIVE_BROWSER, "mopubnativebrowser:", true);
         assertUrlActionMatching(OPEN_NATIVE_BROWSER, "MoPuBnAtIvEbRoWsEr:", true);
+        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "http:", false);
+        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "HtTp:", false);
+        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "https:", false);
+        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "HtTpS:", false);
+    }
+
+    @Test
+    public void openNativeBrowser_withNativeBrowserAgent_shouldAlsoMatchHttpSchemes() throws Exception {
+        MoPub.setBrowserAgent(BrowserAgent.NATIVE);
+        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "mopubnativebrowser:", true);
+        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "MoPuBnAtIvEbRoWsEr:", true);
+        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "http:", true);
+        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "HtTp:", true);
+        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "https:", true);
+        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "HtTpS:", true);
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
index 159d9b32..dd4a3ea5 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
@@ -8,6 +8,8 @@
 import android.net.Uri;
 import android.os.Bundle;
 
+import com.mopub.common.MoPub;
+import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.exceptions.IntentNotResolvableException;
 import com.mopub.exceptions.UrlParseException;
@@ -38,6 +40,7 @@
     public void setUp() {
         activityContext = Robolectric.buildActivity(Activity.class).create().get();
         applicationContext = activityContext.getApplicationContext();
+        MoPub.resetBrowserAgent();
     }
 
     @Test
@@ -151,6 +154,53 @@ public void intentForNativeBrowserScheme_whenUrlParameterMissing_shouldThrowExce
         Intents.intentForNativeBrowserScheme(Uri.parse("mopubnativebrowser://navigate"));
     }
 
+    @Test
+    public void intentForNativeBrowserScheme_whenBrowserAgentSetToNative_whenSchemeIsMoPubNativeBrowser_shouldProperlyHandleEncodedUrls() throws UrlParseException {
+        MoPub.setBrowserAgent(BrowserAgent.NATIVE);
+
+        intentForNativeBrowserScheme_shouldProperlyHandleEncodedUrls();
+    }
+
+    @Test(expected = UrlParseException.class)
+    public void intentForNativeBrowserScheme_whenBrowserAgentSetToNative_whenSchemeIsMoPubNativeBrowser_whenHostIsNotNavigate_shouldThrowException() throws UrlParseException {
+        MoPub.setBrowserAgent(BrowserAgent.NATIVE);
+
+        intentForNativeBrowserScheme_whenNotNavigate_shouldThrowException();
+    }
+
+    @Test(expected = UrlParseException.class)
+    public void intentForNativeBrowserScheme_whenBrowserAgentSetToNative_whenSchemeIsMoPubNativeBrowserButUrlParameterMissing_shouldThrowException() throws UrlParseException {
+        MoPub.setBrowserAgent(BrowserAgent.NATIVE);
+
+        intentForNativeBrowserScheme_whenUrlParameterMissing_shouldThrowException();
+    }
+
+    @Test
+    public void intentForNativeBrowserScheme_whenBrowserAgentSetToNative_whenSchemeIsHttpOrHttps_shouldProperlyHandleEncodedUrls() throws UrlParseException {
+        MoPub.setBrowserAgent(BrowserAgent.NATIVE);
+
+        Intent intent;
+
+        intent = Intents.intentForNativeBrowserScheme(Uri.parse("http://www.example.com"));
+        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
+        assertThat(intent.getDataString()).isEqualTo("http://www.example.com");
+
+        intent = Intents.intentForNativeBrowserScheme(Uri.parse("https://www.example.com/?query=1&two=2"));
+        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
+        assertThat(intent.getDataString()).isEqualTo("https://www.example.com/?query=1&two=2");
+
+        intent = Intents.intentForNativeBrowserScheme(Uri.parse("https://www.example.com/?query=1%26two%3D2"));
+        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
+        assertThat(intent.getDataString()).isEqualTo("https://www.example.com/?query=1%26two%3D2");
+    }
+
+    @Test(expected = UrlParseException.class)
+    public void intentForNativeBrowserScheme_whenBrowserAgentSetToNative_whenSchemeNotMoPubNativeBrowserOrHttpOrHttps_shouldThrowException() throws UrlParseException {
+        MoPub.setBrowserAgent(BrowserAgent.NATIVE);
+
+        Intents.intentForNativeBrowserScheme(Uri.parse("foo://www.example.com"));
+    }
+
     @Test
     public void intentForShareTweetScheme_whenValidUri_shouldReturnShareTweetIntent() throws UrlParseException {
         Intent intent;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
index b33c03ff..75f71afe 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
@@ -29,6 +29,7 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLog;
 
+import java.util.HashSet;
 import java.util.List;
 import java.util.logging.Level;
 
@@ -204,9 +205,13 @@ public void loadPositions_withNoConnection_shouldLogMoPubErrorCodeNoConnection_s
 
         verify(mockPositioningListener).onFailed();
 
-        final List<ShadowLog.LogItem> allLogMessages = ShadowLog.getLogs();
-        final ShadowLog.LogItem latestLogMessage = allLogMessages.get(allLogMessages.size() - 2);
-        // All log messages end with a newline character.
-        assertThat(latestLogMessage.msg.trim()).isEqualTo(MoPubErrorCode.NO_CONNECTION.toString());
+        final List<ShadowLog.LogItem> allLogItems = ShadowLog.getLogs();
+        HashSet<String> allLogMessages = new HashSet<>(allLogItems.size());
+
+        for (ShadowLog.LogItem logItem : allLogItems) {
+            allLogMessages.add(logItem.msg.trim());
+        }
+
+        assertThat(allLogMessages).contains(MoPubErrorCode.NO_CONNECTION.toString());
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
index aab1955f..646c2dc4 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
@@ -6,6 +6,7 @@
 import com.mopub.common.AdFormat;
 import com.mopub.common.AdType;
 import com.mopub.common.DataKeys;
+import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.event.BaseEvent;
 import com.mopub.common.event.EventDispatcher;
 import com.mopub.common.event.MoPubEvents;
@@ -354,6 +355,50 @@ public void parseNetworkResponse_forRewardedAds_shouldSucceed() {
         assertThat(response.result.shouldRewardOnClick()).isTrue();
     }
 
+    @Test
+    public void parseNetworkResponse_withInAppBrowserAgent_shouldSucceed() {
+        defaultHeaders.put(ResponseHeader.BROWSER_AGENT.getKey(), "0");
+
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+        assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.IN_APP);
+    }
+
+    @Test
+    public void parseNetworkResponse_withNativeBrowserAgent_shouldSucceed() {
+        defaultHeaders.put(ResponseHeader.BROWSER_AGENT.getKey(), "1");
+
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+        assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.NATIVE);
+    }
+
+    @Test
+    public void parseNetworkResponse_withNullBrowserAgent_shouldDefaultToInApp() {
+        defaultHeaders.put(ResponseHeader.BROWSER_AGENT.getKey(), null);
+
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+        assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.IN_APP);
+    }
+
+    @Test
+    public void parseNetworkResponse_withUndefinedBrowserAgent_shouldDefaultToInApp() {
+        defaultHeaders.put(ResponseHeader.BROWSER_AGENT.getKey(), "foo");
+
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+        assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.IN_APP);
+    }
+
     @Test
     public void deliverResponse_shouldCallListenerOnSuccess() throws Exception {
         subject.deliverResponse(mockAdResponse);
