diff --git a/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java b/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java
index d8fd9c92..0ea1c78d 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java
@@ -16,6 +16,8 @@
 import static com.mopub.common.Constants.HTTPS;
 import static com.mopub.common.UrlHandler.MoPubSchemeListener;
 
+import java.net.URISyntaxException;
+
 /**
  * {@code UrlAction} describes the different kinds of actions for URLs that {@link UrlHandler} can
  * potentially perform and how to match against each URL.
@@ -186,7 +188,16 @@ protected void performAction(@NonNull final Context context, @NonNull final Uri
         public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
             final String scheme = uri.getScheme();
             final String host = uri.getHost();
-            return !TextUtils.isEmpty(scheme) && !TextUtils.isEmpty(host);
+
+            //
+            // Host is optional if intent (adding if, since not sure which other Uri come through here)
+            // https://developer.chrome.com/multidevice/android/intents#syntax
+            //
+            if (scheme.equals("intent")) {
+                return !TextUtils.isEmpty(scheme);
+            } else {
+                return !TextUtils.isEmpty(scheme) && !TextUtils.isEmpty(host);
+            }
         }
 
         @Override
@@ -194,7 +205,22 @@ protected void performAction(@NonNull final Context context, @NonNull final Uri
                 final boolean skipShowMoPubBrowser,
                 @Nullable final MoPubSchemeListener moPubSchemeListener)
                 throws IntentNotResolvableException {
-            Intents.launchApplicationUrl(context, uri);
+
+                final String scheme = uri.getScheme();
+                if (scheme.equals("intent")) {
+                    try {
+                        Intent intentFromUri = Intent.parseUri(uri.toString(), Intent.URI_INTENT_SCHEME);
+
+                        // Intents should be created then started, and not passing the uri around.
+                        // This way you can parse it according to each FOLLOW_DEEP_LINK
+                        Intents.launchIntent(context, intentFromUri);
+                    } catch(URISyntaxException ex) {
+                        throw new IntentNotResolvableException("URISyntaxException");
+                    }
+
+                } else {
+                    Intents.launchApplicationUrl(context, uri);
+                }
         }
     },
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java b/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
index 1af522f5..bd6466f4 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
@@ -73,6 +73,10 @@ public static boolean deviceCanHandleIntent(@NonNull final Context context,
         }
     }
 
+    public static boolean canHandleIntent(final Context context, final Intent intent) {
+        return canHandleIntent(context, intent, true);
+    }
+
     public static boolean canHandleApplicationUrl(final Context context, final Uri uri) {
         return canHandleApplicationUrl(context, uri, true);
     }
@@ -95,6 +99,25 @@ public static boolean canHandleApplicationUrl(final Context context, final Uri u
         return true;
     }
 
+    public static boolean canHandleIntent(final Context context, final Intent intent,
+                                          final boolean logError) {
+        // Determine which activities can handle the intent
+
+        // If there are no relevant activities, don't follow the link
+        if (!Intents.deviceCanHandleIntent(context, intent)) {
+
+            if (logError) {
+                MoPubLog.w("Could not handle application specific action: " + intent + ". " +
+                        "You may be running in the emulator or another device which does not " +
+                        "have the required application.");
+            }
+            return false;
+        }
+
+        return true;
+    }
+
+
     /**
      * Native Browser Scheme URLs provide a means for advertisers to include links that click out to
      * an external browser, rather than the MoPub in-app browser. Properly formatted native browser
@@ -220,6 +243,16 @@ public static void showMoPubBrowserForUrl(@NonNull final Context context,
         launchIntentForUserClick(context, intent, errorMessage);
     }
 
+    public static void launchCustomIntent(Context context, @NonNull final Intent intent,
+            @NonNull final String errorMessage) throws IntentNotResolvableException {
+
+        if (!(context instanceof Activity)) {
+            intent.addFlags(FLAG_ACTIVITY_NEW_TASK);
+        }
+
+        launchIntentForUserClick(context, intent, errorMessage);
+    }
+
     public static void launchActionViewIntent(Context context, @NonNull final Uri uri,
             @NonNull final String errorMessage) throws IntentNotResolvableException {
         final Intent intent = new Intent(Intent.ACTION_VIEW, uri);
@@ -254,4 +287,19 @@ public static void launchApplicationUrl(@NonNull final Context context,
                     "device which does not have the required application.");
         }
     }
+
+
+    public static void launchIntent(@NonNull final Context context,
+            @NonNull final Intent intent) throws IntentNotResolvableException {
+        if (Intents.canHandleIntent(context, intent)) {
+            final String errorMessage = "Unable to open intent : " + intent;
+            Intents.launchCustomIntent(context, intent, errorMessage);
+
+        } else {
+            throw new IntentNotResolvableException("Could not handle application specific " +
+                    "action: " + intent + "\n\tYou may be running in the emulator or another " +
+                    "device which does not have the required application.");
+        }
+
+    }
 }
