diff --git a/CHANGELOG.md b/CHANGELOG.md
index acc61b39..00f6290c 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,9 @@
+## Version 4.11.0 (November 10, 2016)
+- Added a workaround for an Android bug where Lollipop devices (Android 5.1.1, API level 22) and lower incorrectly handle SSL connections using Server Name Identification.
+- Rewarded video `load()` calls now do not load another rewarded video with the same ad unit id while one is already loading or loaded.
+- Moved the VAST video start tracker to immediately after the video starts (was 2 seconds after the video started).
+- Bug fixes.
+
 ## Version 4.10.0 (October 18, 2016)
 - **Added and updated mediated network versions**
   - Added Flurry version 6.5.0. All Flurry adapters can be found in the corresponding `extras` directory (`/extras/src/com/mopub/mobileads` for banners and interstitials, `/extras/src/com/mopub/nativeads` for native).
@@ -5,7 +11,6 @@
     - Banners: `FlurryCustomEventBanner`
     - Interstitial: `FlurryCustomEventInterstitial`
     - Native: `FlurryCustomEventNative`, `FlurryBaseNativeAd`, `FlurryNativeAdRenderer`, and `FlurryViewBinder`
-  - Certified Google Play Services 9.4.0
   - Certified Facebook Audience Network version 4.15.0  
   - Certified Tapjoy version 11.8.2
   - Certified Millennial Media version 6.3.0
diff --git a/README.md b/README.md
index c830cc7c..be76ca00 100644
--- a/README.md
+++ b/README.md
@@ -27,7 +27,7 @@ The MoPub SDK is available via:
     }
 
     dependencies {
-        compile('com.mopub:mopub-sdk:4.10.0@aar') {
+        compile('com.mopub:mopub-sdk:4.11.0@aar') {
             transitive = true
         }
     }
@@ -48,27 +48,27 @@ The MoPub SDK is available via:
         // ... other project dependencies
 
         // For banners
-        compile('com.mopub:mopub-sdk-banner:4.10.0@aar') {
+        compile('com.mopub:mopub-sdk-banner:4.11.0@aar') {
             transitive = true
         }
         
         // For interstitials
-        compile('com.mopub:mopub-sdk-interstitial:4.10.0@aar') {
+        compile('com.mopub:mopub-sdk-interstitial:4.11.0@aar') {
             transitive = true
         }
 
         // For rewarded videos. This will automatically also include interstitials
-        compile('com.mopub:mopub-sdk-rewardedvideo:4.10.0@aar') {
+        compile('com.mopub:mopub-sdk-rewardedvideo:4.11.0@aar') {
             transitive = true
         }
 
         // For native static (images).
-        compile('com.mopub:mopub-sdk-native-static:4.10.0@aar') {
+        compile('com.mopub:mopub-sdk-native-static:4.11.0@aar') {
             transitive = true
         }
 
         // For native video. This will automatically also include native static
-        compile('com.mopub:mopub-sdk-native-video:4.10.0@aar') {
+        compile('com.mopub:mopub-sdk-native-video:4.11.0@aar') {
             transitive = true
         }
     }
@@ -96,19 +96,10 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- **Added and updated mediated network versions**
-  - Added Flurry version 6.5.0. All Flurry adapters can be found in the corresponding `extras` directory (`/extras/src/com/mopub/mobileads` for banners and interstitials, `/extras/src/com/mopub/nativeads` for native).
-    - All Flurry ad formats must include: `FlurryAgentWrapper`
-    - Banners: `FlurryCustomEventBanner`
-    - Interstitial: `FlurryCustomEventInterstitial`
-    - Native: `FlurryCustomEventNative`, `FlurryBaseNativeAd`, `FlurryNativeAdRenderer`, and `FlurryViewBinder`
-  - Certified Google Play Services 9.4.0
-  - Certified Facebook Audience Network version 4.15.0  
-  - Certified Tapjoy version 11.8.2
-  - Certified Millennial Media version 6.3.0
-  - Certified Vungle version 4.0.2  
-- Fixed intermittent `IllegalStateException` for MRAID creatives attemping to retrieve getRootView() on unattached Views.
-- Updated `mopub-sample`'s example `proguard.cfg` to properly retain methods called only via reflection.
+- Added a workaround for an Android bug where Lollipop devices (Android 5.1.1, API level 22) and lower incorrectly handle SSL connections using Server Name Identification.
+- Rewarded video `load()` calls now do not load another rewarded video with the same ad unit id while one is already loading or loaded.
+- Moved the VAST video start tracker to immediately after the video starts (was 2 seconds after the video started).
+- Bug fixes.
 
 - **Note:** Maven builds from source are currently unstable and will be reinstated in a future release. Maven developers can still pull the MoPub SDK AAR from JCenter.
 
diff --git a/extras/src/com/mopub/nativeads/MillennialNative.java b/extras/src/com/mopub/nativeads/MillennialNative.java
index 03a6abc2..29411d97 100644
--- a/extras/src/com/mopub/nativeads/MillennialNative.java
+++ b/extras/src/com/mopub/nativeads/MillennialNative.java
@@ -20,6 +20,10 @@
 
 import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
 
+/**
+ * Compatible with version 6.3 of the Millennial Media SDK.
+ */
+
 public class MillennialNative extends CustomEventNative {
     public static final String DCN_KEY = "dcn";
     public static final String APID_KEY = "adUnitID";
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index a7a25e5d..0cd8cc88 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="47"
-      android:versionName="4.10.0">
+      android:versionCode="48"
+      android:versionName="4.11.0">
     <uses-sdk android:minSdkVersion="9"
               android:targetSdkVersion="23"/>
 
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index 587ee1f7..e1d18cc6 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -9,7 +9,7 @@ apply plugin: 'com.android.application'
 
 project.group = 'com.mopub'
 project.description = '''MoPub Sample App'''
-project.version = '4.10.0'
+project.version = '4.11.0'
 
 android {
     compileSdkVersion 23
@@ -17,7 +17,7 @@ android {
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 47
+        versionCode 48
         versionName version
         minSdkVersion 9
         targetSdkVersion 23
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
index b74804c0..8c3356c4 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
@@ -11,7 +11,7 @@
 import java.lang.reflect.Method;
 
 public class MoPub {
-    public static final String SDK_VERSION = "4.10.0";
+    public static final String SDK_VERSION = "4.11.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java
index 10d6625b..d86c7ac9 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java
@@ -5,7 +5,7 @@
 import android.text.TextUtils;
 
 import com.mopub.common.Preconditions;
-import com.mopub.network.AdRequest;
+import com.mopub.common.VisibleForTesting;
 
 import java.util.Map;
 import java.util.TreeMap;
@@ -98,6 +98,12 @@ void clearClickUrl(@NonNull final String adUnitId) {
         }
     }
 
+    @Deprecated
+    @VisibleForTesting
+    void clearMapping() {
+        mAdUnitToAdRequestStatus.clear();
+    }
+
     private static enum LoadingStatus { LOADING, LOADED, PLAYED }
     private static class AdRequestStatus {
         @NonNull
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
index 6852e38e..78997180 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
@@ -51,7 +51,7 @@
     private static final String SKIP = "skip";
 
     private static final int CREATIVE_VIEW_TRACKER_THRESHOLD = 0;
-    private static final int START_TRACKER_THRESHOLD = 2000;
+    private static final int START_TRACKER_THRESHOLD = 0;
     private static final float FIRST_QUARTER_MARKER = 0.25f;
     private static final float MID_POINT_MARKER = 0.50f;
     private static final float THIRD_QUARTER_MARKER = 0.75f;
@@ -142,7 +142,7 @@
     List<VastAbsoluteProgressTracker> getAbsoluteProgressTrackers() {
         List<VastAbsoluteProgressTracker> trackers = new ArrayList<VastAbsoluteProgressTracker>();
 
-        // Start trackers are treated as absolute trackers with a 2s offset.
+        // Start trackers are treated as absolute trackers set at 0 seconds
         final List<String> startTrackers = getVideoTrackersByAttribute(START);
         for (String url : startTrackers) {
             trackers.add(new VastAbsoluteProgressTracker(url, START_TRACKER_THRESHOLD));
@@ -178,9 +178,12 @@
             final List<Node> creativeViewNodes = XmlUtils.getMatchingChildNodes(trackingEvents,
                     VIDEO_TRACKER, EVENT, Collections.singletonList(CREATIVE_VIEW));
             for (Node creativeViewNode : creativeViewNodes) {
-                trackers.add(
-                        new VastAbsoluteProgressTracker(XmlUtils.getNodeValue(creativeViewNode),
-                                CREATIVE_VIEW_TRACKER_THRESHOLD));
+                final String creativeNodeValue = XmlUtils.getNodeValue(creativeViewNode);
+                if (creativeNodeValue != null) {
+                    trackers.add(
+                            new VastAbsoluteProgressTracker(creativeNodeValue,
+                                    CREATIVE_VIEW_TRACKER_THRESHOLD));
+                }
             }
         }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
index 21c48ac1..087f864e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
@@ -1,12 +1,24 @@
 package com.mopub.network;
 
 import android.net.SSLCertificateSocketFactory;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Reflection;
 
 import java.io.IOException;
 import java.net.InetAddress;
 import java.net.Socket;
+import java.net.SocketException;
 import java.net.UnknownHostException;
 
+import javax.net.ssl.HostnameVerifier;
+import javax.net.ssl.HttpsURLConnection;
+import javax.net.ssl.SSLHandshakeException;
 import javax.net.ssl.SSLSocket;
 import javax.net.ssl.SSLSocketFactory;
 
@@ -15,10 +27,11 @@
  */
 public class CustomSSLSocketFactory extends SSLSocketFactory {
 
-    private SSLSocketFactory mCertificateSocketFactory;
+    @Nullable private SSLSocketFactory mCertificateSocketFactory;
 
     private CustomSSLSocketFactory() {}
 
+    @NonNull
     public static CustomSSLSocketFactory getDefault(final int handshakeTimeoutMillis) {
         CustomSSLSocketFactory factory = new CustomSSLSocketFactory();
         factory.mCertificateSocketFactory = SSLCertificateSocketFactory.getDefault(handshakeTimeoutMillis, null);
@@ -31,6 +44,9 @@ public static CustomSSLSocketFactory getDefault(final int handshakeTimeoutMillis
     // SocketFactory overrides
     @Override
     public Socket createSocket() throws IOException {
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
         final Socket socket = mCertificateSocketFactory.createSocket();
         enableTlsIfAvailable(socket);
         return socket;
@@ -38,6 +54,9 @@ public Socket createSocket() throws IOException {
 
     @Override
     public Socket createSocket(final String host, final int i) throws IOException, UnknownHostException {
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
         final Socket socket = mCertificateSocketFactory.createSocket(host, i);
         enableTlsIfAvailable(socket);
         return socket;
@@ -45,6 +64,9 @@ public Socket createSocket(final String host, final int i) throws IOException, U
 
     @Override
     public Socket createSocket(final String host, final int port, final InetAddress localhost, final int localPort) throws IOException, UnknownHostException {
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
         final Socket socket = mCertificateSocketFactory.createSocket(host, port, localhost, localPort);
         enableTlsIfAvailable(socket);
         return socket;
@@ -52,6 +74,9 @@ public Socket createSocket(final String host, final int port, final InetAddress
 
     @Override
     public Socket createSocket(final InetAddress address, final int port) throws IOException {
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
         final Socket socket = mCertificateSocketFactory.createSocket(address, port);
         enableTlsIfAvailable(socket);
         return socket;
@@ -59,6 +84,9 @@ public Socket createSocket(final InetAddress address, final int port) throws IOE
 
     @Override
     public Socket createSocket(final InetAddress address, final int port, final InetAddress localhost, final int localPort) throws IOException {
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
         final Socket socket = mCertificateSocketFactory.createSocket(address, port, localhost, localPort);
         enableTlsIfAvailable(socket);
         return socket;
@@ -68,22 +96,105 @@ public Socket createSocket(final InetAddress address, final int port, final Inet
 
     @Override
     public String[] getDefaultCipherSuites() {
+        if (mCertificateSocketFactory == null) {
+            return new String[]{};
+        }
         return mCertificateSocketFactory.getDefaultCipherSuites();
     }
 
     @Override
     public String[] getSupportedCipherSuites() {
+        if (mCertificateSocketFactory == null) {
+            return new String[]{};
+        }
         return mCertificateSocketFactory.getSupportedCipherSuites();
     }
 
     @Override
     public Socket createSocket(final Socket socketParam, final String host, final int port, final boolean autoClose) throws IOException {
-        Socket socket = mCertificateSocketFactory.createSocket(socketParam, host, port, autoClose);
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
+
+        // Don't use the original socket and create a new one. This closes the original socket
+        // if the autoClose flag is set.
+        if (autoClose && socketParam != null) {
+            socketParam.close();
+        }
+
+        final Socket socket = mCertificateSocketFactory.createSocket(
+                InetAddressUtils.getInetAddressByName(host), port);
         enableTlsIfAvailable(socket);
+        doManualServerNameIdentification(socket, host);
         return socket;
     }
 
-    private void enableTlsIfAvailable(Socket socket) {
+    /**
+     * Some versions of Android fail to do server name identification (SNI) even though they are
+     * able to. This method forces SNI to happen, if possible. SNI is only used in https
+     * connections, and this method will no-op for http connections. This method throws an
+     * SSLHandshakeException if SNI fails. This method may also throw other socket-related
+     * IOExceptions.
+     *
+     * @param socket The socket to do SNI on
+     * @param host   The host to verify the server name
+     * @throws IOException
+     */
+    private void doManualServerNameIdentification(@NonNull final Socket socket,
+            @Nullable final String host) throws IOException {
+        Preconditions.checkNotNull(socket);
+
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
+
+        if (socket instanceof SSLSocket) {
+            final SSLSocket sslSocket = (SSLSocket) socket;
+            setHostnameOnSocket((SSLCertificateSocketFactory) mCertificateSocketFactory, sslSocket,
+                    host);
+            verifyServerName(sslSocket, host);
+        }
+    }
+
+    /**
+     * Calling setHostname on a socket turns on the server name identification feature.
+     * Unfortunately, this was introduced in Android version 17, so we do what we can.
+     */
+    @VisibleForTesting
+    static void setHostnameOnSocket(@NonNull final SSLCertificateSocketFactory certificateSocketFactory,
+            @NonNull final SSLSocket sslSocket, @Nullable final String host) {
+        Preconditions.checkNotNull(certificateSocketFactory);
+        Preconditions.checkNotNull(sslSocket);
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            certificateSocketFactory.setHostname(sslSocket, host);
+        } else {
+            try {
+                new Reflection.MethodBuilder(sslSocket, "setHostname")
+                        .addParam(String.class, host)
+                        .execute();
+            } catch (Exception e) {
+                MoPubLog.d("Unable to call setHostname() on the socket");
+            }
+        }
+    }
+
+    /**
+     * This actually performs server name identification.
+     */
+    @VisibleForTesting
+    static void verifyServerName(@NonNull final SSLSocket sslSocket,
+            @Nullable final String host) throws IOException {
+        Preconditions.checkNotNull(sslSocket);
+
+        sslSocket.startHandshake();
+        final HostnameVerifier hostnameVerifier = HttpsURLConnection.getDefaultHostnameVerifier();
+        if (!hostnameVerifier.verify(host, sslSocket.getSession())) {
+            throw new SSLHandshakeException("Server Name Identification failed.");
+        }
+    }
+
+    private void enableTlsIfAvailable(@Nullable Socket socket) {
         if (socket instanceof SSLSocket) {
             SSLSocket sslSocket = (SSLSocket) socket;
             String[] supportedProtocols = sslSocket.getSupportedProtocols();
@@ -92,4 +203,10 @@ private void enableTlsIfAvailable(Socket socket) {
             sslSocket.setEnabledProtocols(supportedProtocols);
         }
     }
+
+    @Deprecated
+    @VisibleForTesting
+    void setCertificateSocketFactory(@NonNull final SSLSocketFactory sslSocketFactory) {
+        mCertificateSocketFactory = sslSocketFactory;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/InetAddressUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/InetAddressUtils.java
new file mode 100644
index 00000000..b522e707
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/InetAddressUtils.java
@@ -0,0 +1,20 @@
+package com.mopub.network;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+
+/**
+ * This class exists to wrap InetAddress static calls since java.net classes cannot be mocked
+ */
+public class InetAddressUtils {
+    @NonNull
+    public static InetAddress getInetAddressByName(@Nullable final String host) throws UnknownHostException {
+        return InetAddress.getByName(host);
+    }
+
+    private InetAddressUtils() {
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
index 23eb60f6..80c50c7b 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
@@ -237,6 +237,20 @@ public static void loadVideo(@NonNull final String adUnitId,
             return;
         }
 
+        if (sInstance.mAdRequestStatus.canPlay(adUnitId)) {
+            MoPubLog.d(String.format(Locale.US, "Did not queue rewarded video request for ad " +
+            "unit %s. This ad unit already finished loading and is ready to show.", adUnitId));
+            postToInstance(new Runnable() {
+                @Override
+                public void run() {
+                    if (sInstance.mVideoListener != null) {
+                        sInstance.mVideoListener.onRewardedVideoLoadSuccess(adUnitId);
+                    }
+                }
+            });
+            return;
+        }
+
 
         // If any instance MediationSettings have been specified, update the internal map.
         // Note: This always clears the MediationSettings for the ad unit, whether or not any
@@ -711,4 +725,14 @@ static RewardedVideoData getRewardedVideoData() {
         }
         return null;
     }
+
+    @Deprecated
+    @VisibleForTesting
+    @Nullable
+    static AdRequestStatusMapping getAdRequestStatusMapping() {
+        if (sInstance != null) {
+            return sInstance.mAdRequestStatus;
+        }
+        return null;
+    }
 }
diff --git a/mopub-sdk/publisher.gradle b/mopub-sdk/publisher.gradle
index ee0f09ea..2744493a 100644
--- a/mopub-sdk/publisher.gradle
+++ b/mopub-sdk/publisher.gradle
@@ -58,6 +58,5 @@ publish {
     bintrayUser = project.hasProperty("bintray.user") ? project.getProperty("bintray.user") : ""
     bintrayKey = project.hasProperty("bintray.apikey") ? project.getProperty("bintray.apikey") : ""
 
-    autoPublish = true
     dryRun = false
 }
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index 1d3de729..188001c1 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -9,7 +9,7 @@ repositories {
 }
 
 project.group = 'com.mopub'
-project.version = '4.10.0'
+project.version = '4.11.0'
 
 android {
     compileSdkVersion 23
@@ -18,7 +18,7 @@ android {
     useLibrary 'org.apache.http.legacy'
 
     defaultConfig {
-        versionCode 47
+        versionCode 48
         versionName version
         minSdkVersion 9
         targetSdkVersion 23
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
index 6e4f5a3a..23ca26ca 100644
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=4.10.0+kit
+fabric-version=4.11.0+kit
 fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
index 112b3ff3..24e0e4db 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -84,6 +84,7 @@ public void tearDown() {
         // Unpause the main looper in case a test terminated while the looper was paused.
         ShadowLooper.unPauseMainLooper();
         MoPubRewardedVideoManager.getRewardedVideoData().clear();
+        MoPubRewardedVideoManager.getAdRequestStatusMapping().clearMapping();
     }
 
     @Test
@@ -241,7 +242,7 @@ public void onAdSuccess_shouldInstantiateCustomEvent_andLoad() {
     }
 
     @Test
-    public void onAdSuccess_withCustomEventAlreadyLoaded_shouldInvalidateOldCustomEvent() throws Exception {
+    public void loadVideo_withCustomEventAlreadyLoaded_shouldNotLoadAnotherVideo() throws Exception {
         final CustomEventRewardedVideo mockCustomEvent = mock(CustomEventRewardedVideo.class);
         MoPubRewardedVideoManager.getRewardedVideoData().updateAdUnitCustomEventMapping(
                 "testAdUnit", mockCustomEvent, null, TestCustomEvent.AD_NETWORK_ID);
@@ -266,24 +267,22 @@ public void onAdSuccess_withCustomEventAlreadyLoaded_shouldInvalidateOldCustomEv
         assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
         verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
         verifyNoMoreInteractions(mockVideoListener);
+        verify(mockRequestQueue).add(any(Request.class));
         reset(mockVideoListener);
 
         ShadowLooper.pauseMainLooper();
 
         // Load the second custom event
         MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
-        // Verify the second custom event was loaded
+        // Verify the first custom event is still available
         assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
         verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
         verifyNoMoreInteractions(mockVideoListener);
-
-        // Verify that the first custom event was invalidated
-        verify(mockCustomEvent).onInvalidate();
-        verifyNoMoreInteractions(mockCustomEvent);
+        // Make sure the second load does not attempt to load another ad
+        verifyNoMoreInteractions(mockRequestQueue);
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
index c16f52b6..bee53d27 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
@@ -36,6 +36,8 @@ public void setup() throws Exception {
                 "        https://creativeView/two" +
                 "        ]]>" +
                 "    </Tracking>" +
+                // Ensure empty creativeView event is ignored
+                "    <Tracking event=\"creativeView\"/>" +
                 "    <Tracking event=\"start\">" +
                 "        <![CDATA[" +
                 "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
@@ -272,15 +274,15 @@ public void getAbsoluteProgressTrackers_shouldReturnCorrectValues() {
 
         VastAbsoluteProgressTracker tracker0 = trackers.get(0);
         assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://creativeView/one");
+        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
 
         VastAbsoluteProgressTracker tracker1 = trackers.get(1);
         assertThat(tracker1.getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://creativeView/two");
+        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://creativeView/one");
 
         VastAbsoluteProgressTracker tracker2 = trackers.get(2);
-        assertThat(tracker2.getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(tracker2.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+        assertThat(tracker2.getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(tracker2.getTrackingUrl()).isEqualTo("https://creativeView/two");
 
         VastAbsoluteProgressTracker tracker3 = trackers.get(3);
         assertThat(tracker3.getTrackingMilliseconds()).isEqualTo(3670300);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
index d53c7cc3..7f0d8b98 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
@@ -103,7 +103,7 @@ public void prepareVastVideoConfiguration_shouldNotifyTheListenerAndContainTheCo
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(0).getTrackingMilliseconds())
                 .isEqualTo(0);
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(1).getTrackingMilliseconds())
-                .isEqualTo(2000);
+                .isEqualTo(0);
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(2).getTrackingMilliseconds())
                 .isEqualTo(3100);
 
@@ -158,9 +158,9 @@ public void prepareVastVideoConfiguration_shouldHandleMultipleRedirects() throws
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(0).getTrackingMilliseconds()).isEqualTo(0);
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(1).getTrackingMilliseconds()).isEqualTo(0);
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(2).getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(3).getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(4).getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(5).getTrackingMilliseconds()).isEqualTo(2000);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(3).getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(4).getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(5).getTrackingMilliseconds()).isEqualTo(0);
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(6).getTrackingMilliseconds()).isEqualTo(3100);
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(7).getTrackingMilliseconds()).isEqualTo(3100);
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(8).getTrackingMilliseconds()).isEqualTo(3100);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
index 3f2a1ddd..0d935fc6 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
@@ -602,7 +602,7 @@ public void getAbsoluteProgressTrackers_withLinearXmlManager_shouldReturnCorrect
         assertThat(trackers.size()).isEqualTo(2);
 
         VastAbsoluteProgressTracker tracker0 = trackers.get(0);
-        assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(2000);
+        assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(0);
         assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
 
         VastAbsoluteProgressTracker tracker1 = trackers.get(1);
diff --git a/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java
new file mode 100644
index 00000000..01ba66f4
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java
@@ -0,0 +1,149 @@
+package com.mopub.network;
+
+import android.annotation.SuppressLint;
+import android.annotation.TargetApi;
+import android.net.SSLCertificateSocketFactory;
+import android.os.Build;
+import android.support.annotation.Nullable;
+
+import com.mopub.TestSdkHelper;
+import com.mopub.mobileads.BuildConfig;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mockito;
+import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.PowerMockRunner;
+import org.robolectric.annotation.Config;
+
+import java.net.InetAddress;
+import java.net.Socket;
+
+import javax.net.ssl.HostnameVerifier;
+import javax.net.ssl.HttpsURLConnection;
+import javax.net.ssl.SSLHandshakeException;
+import javax.net.ssl.SSLSession;
+import javax.net.ssl.SSLSocket;
+
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.powermock.api.mockito.PowerMockito.mockStatic;
+
+@PrepareForTest(InetAddressUtils.class)
+@RunWith(PowerMockRunner.class)
+@Config(constants = BuildConfig.class)
+public class CustomSSLSocketFactoryTest {
+
+    private CustomSSLSocketFactory subject;
+    private SSLCertificateSocketFactory mockSSLCertificateSocketFactory;
+    private SSLSocketWithSetHostname mockSSLSocket;
+
+    @SuppressLint("SSLCertificateSocketFactoryCreateSocket")
+    @Before
+    public void setUp() throws Exception {
+        mockStatic(InetAddressUtils.class);
+        mockSSLCertificateSocketFactory = mock(SSLCertificateSocketFactory.class);
+        mockSSLSocket = mock(SSLSocketWithSetHostname.class);
+        Mockito.when(mockSSLCertificateSocketFactory.createSocket(any(InetAddress.class),
+                anyInt())).thenReturn(mockSSLSocket);
+        InetAddress mockInetAddress = mock(InetAddress.class);
+        PowerMockito.when(InetAddressUtils.getInetAddressByName(anyString())).thenReturn(
+                mockInetAddress);
+        subject = CustomSSLSocketFactory.getDefault(0);
+        subject.setCertificateSocketFactory(mockSSLCertificateSocketFactory);
+    }
+
+    @Test
+    public void createSocket_withSocketParam_withAutoCloseTrue_shouldCloseOriginalSocket() throws Exception {
+        final Socket mockSocket = mock(Socket.class);
+        final HostnameVerifier mockHostnameVerifier = mock(HostnameVerifier.class);
+        Mockito.when(mockHostnameVerifier.verify(eq("hostname"), any(SSLSession.class))).thenReturn(true);
+        HttpsURLConnection.setDefaultHostnameVerifier(mockHostnameVerifier);
+
+        subject.createSocket(mockSocket, "hostname", 443, true);
+
+        verify(mockSocket).close();
+        verifyNoMoreInteractions(mockSocket);
+    }
+
+    @Test
+    public void createSocket_withSocketParam_withAutoCloseFalse_shouldNotCloseOriginalSocket_shouldCallSetHostname() throws Exception {
+        final Socket mockSocket = mock(Socket.class);
+        final HostnameVerifier mockHostnameVerifier = mock(HostnameVerifier.class);
+        Mockito.when(mockHostnameVerifier.verify(eq("hostname"), any(SSLSession.class))).thenReturn(true);
+        HttpsURLConnection.setDefaultHostnameVerifier(mockHostnameVerifier);
+
+        subject.createSocket(mockSocket, "hostname", 443, false);
+
+        verify(mockSocket, never()).close();
+        verify(mockSSLSocket).getSupportedProtocols();
+        verify(mockSSLSocket).setEnabledProtocols(any(String[].class));
+        verify(mockSSLSocket).startHandshake();
+        verify(mockSSLSocket).getSession();
+        verify(mockSSLSocket).setHostname(any(String.class));
+        verifyNoMoreInteractions(mockSSLSocket);
+    }
+
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Test
+    public void setHostnameOnSocket_withAtLeastJellyBeanMR1_shouldEnableServerNameIdentification() {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.JELLY_BEAN_MR1);
+
+        final SSLSocket mockSSLSocket = mock(SSLSocket.class);
+
+        CustomSSLSocketFactory.setHostnameOnSocket(mockSSLCertificateSocketFactory, mockSSLSocket,
+                "hostname");
+
+        verify(mockSSLCertificateSocketFactory).setHostname(mockSSLSocket, "hostname");
+    }
+
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Test
+    public void setHostnameOnSocket_withBelowJellyBeanMR1_shouldEnableServerNameIdentification() {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.JELLY_BEAN);
+
+        final SSLSocket mockSSLSocket = mock(SSLSocket.class);
+
+        CustomSSLSocketFactory.setHostnameOnSocket(mockSSLCertificateSocketFactory, mockSSLSocket,
+                "hostname");
+
+        verify(mockSSLCertificateSocketFactory, never()).setHostname(mockSSLSocket, "hostname");
+    }
+
+    @Test
+    public void verifyServerName_withValidServerNameIdentification_shouldNotThrowSSLHandshakeException() throws Exception {
+        final SSLSocket mockSslSocket = mock(SSLSocket.class);
+        final HostnameVerifier mockHostnameVerifier = mock(HostnameVerifier.class);
+        Mockito.when(mockHostnameVerifier.verify(eq("hostname"), any(SSLSession.class))).thenReturn(true);
+        HttpsURLConnection.setDefaultHostnameVerifier(mockHostnameVerifier);
+
+        CustomSSLSocketFactory.verifyServerName(mockSslSocket, "hostname");
+    }
+
+    @Test(expected = SSLHandshakeException.class)
+    public void verifyServerName_withInvalidServerNameIdentification_shouldThrowSSLHandshakeException() throws Exception {
+        final SSLSocket mockSslSocket = mock(SSLSocket.class);
+        final HostnameVerifier mockHostnameVerifier = mock(HostnameVerifier.class);
+        Mockito.when(mockHostnameVerifier.verify(eq("hostname"), any(SSLSession.class))).thenReturn(false);
+        HttpsURLConnection.setDefaultHostnameVerifier(mockHostnameVerifier);
+
+        CustomSSLSocketFactory.verifyServerName(mockSslSocket, "hostname");
+    }
+
+    /**
+     * This class has the setHostname() method that CustomSSLSocketFactory#setHostnameOnSocket uses
+     * via reflection. This exists so we can Mockito.verify the method setHostname().
+     */
+    private abstract class SSLSocketWithSetHostname extends SSLSocket {
+        public void setHostname(@Nullable final String hostname) {
+        }
+    }
+}
