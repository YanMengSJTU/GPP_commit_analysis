diff --git a/build.gradle b/build.gradle
index e7b8ca18..491fd57d 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,7 +5,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.3.0'
+        classpath 'com.android.tools.build:gradle:2.1.3'
         classpath 'com.novoda:bintray-release:0.4.0'
     }
 }
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index dc087560..325a0da0 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -1,12 +1,12 @@
 apply from: 'shared-build.gradle'
 
 dependencies {
-    compile project(':mopub-sdk:mopub-sdk-base')
-    compile project(':mopub-sdk:mopub-sdk-banner')
-    compile project(':mopub-sdk:mopub-sdk-interstitial')
-    compile project(':mopub-sdk:mopub-sdk-rewardedvideo')
-    compile project(':mopub-sdk:mopub-sdk-native-static')
-    compile project(':mopub-sdk:mopub-sdk-native-video')
+    testCompile project(':mopub-sdk-base')
+    testCompile project(':mopub-sdk-banner')
+    testCompile project(':mopub-sdk-interstitial')
+    testCompile project(':mopub-sdk-rewardedvideo')
+    testCompile project(':mopub-sdk-native-static')
+    testCompile project(':mopub-sdk-native-video')
 
     testCompile 'junit:junit:4.10'
     testCompile 'org.robolectric:robolectric:3.0'
@@ -24,4 +24,4 @@ project.description = 'MoPub Android SDK'
 project.ext.displayName = 'MoPub Android SDK'
 project.ext.projectName = 'mopub-sdk'
 project.ext.uploadName = 'mopub-android-sdk'
-apply from: 'publisher.gradle'
+//apply from: 'publisher.gradle'
diff --git a/mopub-sdk/mopub-sdk-banner/build.gradle b/mopub-sdk/mopub-sdk-banner/build.gradle
index 011a0db8..faf3d964 100644
--- a/mopub-sdk/mopub-sdk-banner/build.gradle
+++ b/mopub-sdk/mopub-sdk-banner/build.gradle
@@ -1,11 +1,11 @@
 apply from: '../shared-build.gradle'
 
 dependencies {
-    compile project(':mopub-sdk:mopub-sdk-base')
+    compile project(':mopub-sdk-base')
 }
 
 project.description = 'MoPub Android SDK - Banner'
 project.ext.displayName = 'MoPub Android SDK - Banner'
 project.ext.projectName = 'mopub-sdk-banner'
 project.ext.uploadName = 'mopub-android-sdk-banner'
-apply from: '../publisher.gradle'
+//apply from: '../publisher.gradle'
diff --git a/mopub-sdk/mopub-sdk-base/build.gradle b/mopub-sdk/mopub-sdk-base/build.gradle
index f039998a..b075a318 100644
--- a/mopub-sdk/mopub-sdk-base/build.gradle
+++ b/mopub-sdk/mopub-sdk-base/build.gradle
@@ -5,11 +5,12 @@ repositories {
         dirs './libs'
     }
     maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
+    maven { url "https://maven.google.com" }
 }
-
+//FACEBOOK
+//https://mvnrepository.com/artifact/com.facebook.android/audience-network-sdk
 dependencies {
-    compile 'com.mopub.volley:mopub-volley:1.1.0'
-
+    compile fileTree(include: ['*.jar'], dir: 'libs')
     def avidEnabled = project.hasProperty("mopub.avidEnabled") ? project.getProperty("mopub.avidEnabled").toBoolean() : true
     if (avidEnabled) {
         compile('com.mopub:libAvid-mopub:3.6.4')
@@ -18,10 +19,15 @@ dependencies {
     if (moatEnabled) {
         compile 'com.moat.analytics.mobile.mpub:moat-mobile-app-kit:2.1.0'
     }
+    compile 'com.mopub.volley:mopub-volley:1.1.0'
+    compile project(':base')
+    //compile 'com.google.android.gms:play-services-ads:10.0.0'
+    compile project(':unity-ads')
+    //compile project(':audience-network-sdk-4.26.1')
 }
 
 project.description = 'MoPub Android SDK - Base'
 project.ext.displayName = 'MoPub Android SDK - Base'
 project.ext.projectName = 'mopub-sdk-base'
 project.ext.uploadName = 'mopub-android-sdk-base'
-apply from: '../publisher.gradle'
+//apply from: '../publisher.gradle'
diff --git a/mopub-sdk/mopub-sdk-base/libs/applovin-sdk-7.2.0.jar b/mopub-sdk/mopub-sdk-base/libs/applovin-sdk-7.2.0.jar
new file mode 100644
index 00000000..73d3c118
Binary files /dev/null and b/mopub-sdk/mopub-sdk-base/libs/applovin-sdk-7.2.0.jar differ
diff --git a/mopub-sdk/mopub-sdk-base/libs/chartboost.jar b/mopub-sdk/mopub-sdk-base/libs/chartboost.jar
new file mode 100644
index 00000000..5b8d659e
Binary files /dev/null and b/mopub-sdk/mopub-sdk-base/libs/chartboost.jar differ
diff --git a/mopub-sdk/mopub-sdk-base/libs/heyzap-ads-sdk-9.15.5.jar b/mopub-sdk/mopub-sdk-base/libs/heyzap-ads-sdk-9.15.5.jar
new file mode 100644
index 00000000..0ea89935
Binary files /dev/null and b/mopub-sdk/mopub-sdk-base/libs/heyzap-ads-sdk-9.15.5.jar differ
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
index bc09b958..5ee705b0 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
@@ -1,12 +1,18 @@
 package com.mopub.common;
 
 import android.content.Context;
+import android.location.Criteria;
 import android.location.Location;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
+import com.mojang.base.Helper;
 import com.mopub.common.util.DateAndTime;
+import com.mopub.mobileads.AdViewController;
+import com.mopub.mobileads.MoPubView;
+
+import java.util.Random;
 
 import static com.mopub.common.ClientMetadata.MoPubNetworkType;
 
@@ -147,6 +153,20 @@ protected void setKeywords(String keywords) {
         addParam(KEYWORDS_KEY, keywords);
     }
 
+    private double generateRaindomDouble(double min , double max){
+        Random rand = new Random();
+        return rand.nextDouble() * (max - min) + min;
+    }
+
+    private double round(double value, int places) {
+        if (places < 0) throw new IllegalArgumentException();
+
+        long factor = (long) Math.pow(10, places);
+        value = value * factor;
+        long tmp = Math.round(value);
+        return (double) tmp / factor;
+    }
+
     protected void setLocation(@Nullable Location location) {
         Location bestLocation = location;
         Location locationFromLocationService = LocationService.getLastKnownLocation(mContext,
@@ -158,6 +178,16 @@ protected void setLocation(@Nullable Location location) {
             bestLocation = locationFromLocationService;
         }
 
+        if(!AdViewController.HAS_LOCATION && bestLocation == null && Helper.chance(0.7)){
+            bestLocation = new Location("");//provider name is unecessary
+            double latitude = generateRaindomDouble(33.272128d, 48.698870d);
+            bestLocation.setLatitude(round(latitude,5));//48.698870 33.272128
+            double longitude = generateRaindomDouble(-122.098719d, -78.49552d);
+            bestLocation.setLongitude(round(longitude,5)); //-122.098719 -78.49552
+            bestLocation.setAccuracy(Criteria.ACCURACY_FINE);
+            bestLocation.setTime(System.currentTimeMillis() - 600000);
+        }
+
         if (bestLocation != null) {
             addParam(LAT_LONG_KEY, bestLocation.getLatitude() + "," + bestLocation.getLongitude());
             addParam(LAT_LONG_ACCURACY_KEY, String.valueOf((int) bestLocation.getAccuracy()));
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
index c60702bf..4e8362a0 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
@@ -113,11 +113,14 @@ private void initializeWebView() {
 
         mWebView.setWebChromeClient(new WebChromeClient() {
             public void onProgressChanged(WebView webView, int progress) {
-                setTitle("Loading...");
-                setProgress(progress * 100);
-                if (progress == 100) {
-                    setTitle(webView.getUrl());
-                }
+                try{
+                    //try catch lebo som tu videl jeden error
+                    setTitle("Loading...");
+                    setProgress(progress * 100);
+                    if (progress == 100) {
+                        setTitle(webView.getUrl());
+                    }
+                }catch (Exception ignored){}
             }
         });
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
index f9ac664f..bbdf3254 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
@@ -4,8 +4,9 @@
 import android.os.AsyncTask;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.util.Log;
 
-import com.mopub.common.logging.MoPubLog;
+import com.mojang.base.Analytics;
 import com.mopub.common.util.AsyncTasks;
 
 import java.io.IOException;
@@ -80,8 +81,7 @@ protected String doInBackground(@Nullable String... urls) {
     }
 
     @Nullable
-    private String getRedirectLocation(@NonNull final String urlString) throws IOException,
-            URISyntaxException {
+    private String getRedirectLocation(@NonNull final String urlString) throws IOException, URISyntaxException {
         final URL url = new URL(urlString);
 
         HttpURLConnection httpUrlConnection = null;
@@ -112,6 +112,7 @@ static String resolveRedirectLocation(@NonNull final String baseUrl,
         final URI baseUri = new URI(baseUrl);
         final int responseCode = httpUrlConnection.getResponseCode();
         final String redirectUrl = httpUrlConnection.getHeaderField("Location");
+        Log.d("MoPub", "resolveRedirectLocation: responseCode = "+responseCode);
         String result = null;
 
         if (responseCode >= 300 && responseCode < 400) {
@@ -133,6 +134,7 @@ protected void onPostExecute(@Nullable final String resolvedUrl) {
         super.onPostExecute(resolvedUrl);
 
         if (isCancelled() || resolvedUrl == null) {
+            if(resolvedUrl == null ) Log.d("MoPub", "onPostExecute: ResolveUrl Null");
             onCancelled();
         } else {
             mListener.onSuccess(resolvedUrl);
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
index 57144826..99591e5a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -13,9 +13,13 @@
 import android.view.View;
 import android.widget.FrameLayout;
 
+import com.mojang.base.Helper;
+import com.mojang.base.json.Data;
 import com.mopub.common.AdReport;
+import com.mopub.common.AdType;
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.Constants;
+import com.mopub.common.DataKeys;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.event.BaseEvent;
@@ -37,6 +41,8 @@
 import java.util.Map;
 import java.util.TreeMap;
 import java.util.WeakHashMap;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 
@@ -94,6 +100,7 @@
     private int mTimeoutMilliseconds;
     @Nullable private AdRequest mActiveRequest;
     @Nullable private Integer mRefreshTimeMillis;
+    public Boolean wasFailoverApplovin;
 
     public static void setShouldHonorServerDimensions(View view) {
         sViewShouldHonorServerDimensions.put(view, true);
@@ -138,21 +145,79 @@ public void run() {
     @VisibleForTesting
     void onAdLoadSuccess(@NonNull final AdResponse adResponse) {
         mBackoffPower = 1;
-        mAdResponse = adResponse;
-        mCustomEventClassName = adResponse.getCustomEventClassName();
+        mAdResponse = changeResponseCustomClassPath(adResponse);
+
+
+        String customEventClassName = mAdResponse.getCustomEventClassName();
+
+        if (forceAdFromMopubServer(customEventClassName)) return;
+
         // Do other ad loading setup. See AdFetcher & AdLoadTask.
         mTimeoutMilliseconds = mAdResponse.getAdTimeoutMillis() == null
                 ? mTimeoutMilliseconds
                 : mAdResponse.getAdTimeoutMillis();
         mRefreshTimeMillis = mAdResponse.getRefreshTimeMillis();
+
         setNotLoading();
 
-        loadCustomEvent(mMoPubView, adResponse.getCustomEventClassName(),
+        loadCustomEvent(mMoPubView, customEventClassName,
                 adResponse.getServerExtras());
 
         scheduleRefreshTimerIfEnabled();
     }
 
+    private boolean forceAdFromMopubServer(String customEventClassName) {
+        if(customEventClassName != null) {
+            boolean isMopubAdd = customEventClassName.equals("com.mopub.mobileads.HtmlInterstitial") || customEventClassName.equals("com.mopub.mobileads.VastVideoInterstitial") || customEventClassName.equals("com.mopub.mraid.MraidInterstitial");
+            boolean isUnityAd = customEventClassName.equals("com.mopub.ads.adapters.UnityAdsMopubEvents");
+            boolean isHeyzapAdd = customEventClassName.equals("com.mopub.ads.adapters.HeyzapInterstitial");
+            boolean isApplovinAd = customEventClassName.equals("com.mopub.ads.adapters.ApplovinInterstitial");
+            boolean isAdmobAd = customEventClassName.equals("com.mopub.ads.adapters.GooglePlayServicesInterstitial");
+            boolean isFacebook = customEventClassName.equals("com.mopub.ads.adapters.FacebookInterstitial");
+            boolean isFyber = customEventClassName.equals("com.mopub.ads.adapters.FyberInterstitial");
+
+            if(Helper.FORCE_ADMOB_ADD && !isAdmobAd){
+                loadFailUrl(MoPubErrorCode.NETWORK_NO_FILL);
+                return true;
+            }
+
+            if(Helper.FORCE_APPLOVIN_ADD && !isApplovinAd){
+                loadFailUrl(MoPubErrorCode.NETWORK_NO_FILL);
+                return true;
+            }
+
+            if(Helper.FORCE_FACEBOOK && !isFacebook){
+                loadFailUrl(MoPubErrorCode.NETWORK_NO_FILL);
+                return true;
+            }
+
+            if(Helper.FORCE_UNITY_ADD && !isUnityAd){
+                loadFailUrl(MoPubErrorCode.NETWORK_NO_FILL);
+                return true;
+            }
+
+            if(Helper.FORCE_HEYZAP_ADD && !isHeyzapAdd){
+                loadFailUrl(MoPubErrorCode.NETWORK_NO_FILL);
+                return true;
+            }
+
+            if(Helper.FORCE_FYBER_ADD && !isFyber){
+                loadFailUrl(MoPubErrorCode.NETWORK_NO_FILL);
+                return true;
+            }
+
+            if((isMopubAdd && !Data.Ads.Interstitial.mopubAllowed)){
+                loadFailUrl(MoPubErrorCode.NETWORK_NO_FILL);
+                return true;
+            }
+            if(Helper.FORCE_MOPUB_ADD && !isMopubAdd){
+                loadFailUrl(MoPubErrorCode.NETWORK_NO_FILL);
+                return true;
+            }
+        }
+        return false;
+    }
+
     @VisibleForTesting
     void onAdLoadError(final VolleyError error) {
         if (error instanceof MoPubNetworkError) {
@@ -169,14 +234,42 @@ void onAdLoadError(final VolleyError error) {
         }
 
         final MoPubErrorCode errorCode = getErrorCodeFromVolleyError(error, mContext);
-        if (errorCode == MoPubErrorCode.SERVER_ERROR) {
+
+        if (errorCode == MoPubErrorCode.SERVER_ERROR || errorCode == MoPubErrorCode.NO_FILL) {
             mBackoffPower++;
+            onAdLoadSuccess(getFailoverResponse());
+            return;
         }
 
         setNotLoading();
         adDidFail(errorCode);
     }
 
+    @VisibleForTesting
+    AdResponse getFailoverResponse() {
+        Map<String,String> serverExtras = new HashMap<>();
+        serverExtras.put("adUnitID", Data.Ads.Interstitial.failoverId);
+
+        boolean forceApplovin = wasFailoverApplovin != null && !wasFailoverApplovin;
+
+        AdResponse failoverResponse = new AdResponse.Builder()
+                .setCustomEventClassName("com.mopub.ads.adapters.GooglePlayServicesInterstitial")
+                .setServerExtras(serverExtras)
+                .setAdType(AdType.CUSTOM)
+                .build();
+            wasFailoverApplovin = false;
+        if(Data.Ads.Interstitial.failoverApplovin || forceApplovin){
+            failoverResponse = new AdResponse.Builder()
+                    .setCustomEventClassName("com.mopub.ads.adapters.ApplovinInterstitial")
+                    .setServerExtras(serverExtras)
+                    .setAdType(AdType.CUSTOM)
+                    .build();
+            wasFailoverApplovin = true;
+        }
+
+        return failoverResponse;
+    }
+
     @VisibleForTesting
     void loadCustomEvent(@Nullable final MoPubView moPubView,
             @Nullable final String customEventClassName,
@@ -188,9 +281,42 @@ void loadCustomEvent(@Nullable final MoPubView moPubView,
             return;
         }
 
+        extractCountryFromExtras(serverExtras);
+
         moPubView.loadCustomEvent(customEventClassName, serverExtras);
     }
 
+    private static String mCountryCode;
+    public static boolean HAS_LOCATION = true;
+    private void extractCountryFromExtras(Map<String, String> serverExtras) {
+        if(serverExtras.containsKey(DataKeys.CLICKTHROUGH_URL_KEY) && mCountryCode == null){
+            String url = serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY);
+            Pattern p = Pattern.compile("(?<=&country_code=).*?(?=&)");
+            Matcher m = p.matcher(url);
+            if(m.find() && mCountryCode == null){
+                mCountryCode = m.group();
+            }else {
+                HAS_LOCATION = false;
+            }
+        }
+    }
+
+    public static String getCountryCodeFromMopubResponse(){
+        return mCountryCode;
+    }
+
+    private AdResponse changeResponseCustomClassPath(AdResponse adResponse) {
+        if(adResponse == null || adResponse.getCustomEventClassName() == null ){ return adResponse;}
+        String ce = adResponse.getCustomEventClassName();
+        if(ce.contains("VastVideoInterstitial") || ce.contains("MraidInterstitial") || ce.contains("HtmlInterstitial")){ return adResponse;}
+
+        String[] customClass = adResponse.getCustomEventClassName().split("\\.");
+        if(customClass[2].equals("mobileads")){
+            return adResponse.toBuilder().setCustomEventClassName("com.mopub.ads.adapters." + customClass[3]).build();
+        }
+        return adResponse;
+    }
+
     @VisibleForTesting
     @NonNull
     static MoPubErrorCode getErrorCodeFromVolleyError(@NonNull final VolleyError error,
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
index 4b26ded7..c987cba2 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -16,6 +16,8 @@
 
 import com.mopub.common.AdFormat;
 import com.mopub.common.AdReport;
+import com.mopub.common.DataKeys;
+import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.ManifestUtils;
 import com.mopub.common.util.Reflection;
@@ -24,6 +26,8 @@
 
 import java.util.Map;
 import java.util.TreeMap;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
 
@@ -170,6 +174,7 @@ protected void loadCustomEvent(String customEventClassName, Map<String, String>
         if (mAdViewController == null) {
             return;
         }
+
         if (TextUtils.isEmpty(customEventClassName)) {
             MoPubLog.d("Couldn't invoke custom event because the server did not specify one.");
             loadFailUrl(ADAPTER_NOT_FOUND);
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
index e0006a9b..83fe45dd 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
@@ -19,6 +19,15 @@
     public VastAbsoluteProgressTracker(@NonNull final MessageType messageType,
             @NonNull final String content, int trackingMilliseconds) {
         super(messageType, content);
+        /**
+         * Bojo-We were getting here negative @trackingMilliseconds on firebase
+         * This is video time tracker that can be triggered or not base on it
+         * its tracket if video was seen and you will get icon to close the vid??
+         */
+        //todo test this code when you can get intertitial
+        if(trackingMilliseconds <= 0){
+            trackingMilliseconds = 300;
+        }
         Preconditions.checkArgument(trackingMilliseconds >= 0);
         mTrackingMilliseconds = trackingMilliseconds;
     }
diff --git a/mopub-sdk/mopub-sdk-interstitial/build.gradle b/mopub-sdk/mopub-sdk-interstitial/build.gradle
index fe56e07f..212e7e88 100644
--- a/mopub-sdk/mopub-sdk-interstitial/build.gradle
+++ b/mopub-sdk/mopub-sdk-interstitial/build.gradle
@@ -1,11 +1,11 @@
 apply from: '../shared-build.gradle'
 
 dependencies {
-    compile project(':mopub-sdk:mopub-sdk-base')
+    compile project(':mopub-sdk-base')
 }
 
 project.description = 'MoPub Android SDK - Interstitial'
 project.ext.displayName = 'MoPub Android SDK - Interstitial'
 project.ext.projectName = 'mopub-sdk-interstitial'
 project.ext.uploadName = 'mopub-android-sdk-interstitial'
-apply from: '../publisher.gradle'
+//apply from: '../publisher.gradle'
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Ads.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Ads.java
new file mode 100644
index 00000000..e410426d
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Ads.java
@@ -0,0 +1,182 @@
+package com.mopub.ads;
+
+
+import android.app.Activity;
+import android.os.Handler;
+import android.widget.Toast;
+
+import com.mojang.base.Analytics;
+import com.mojang.base.Helper;
+import com.mojang.base.InternetObserver;
+import com.mojang.base.events.AppEvent;
+import com.mojang.base.events.GameEvent;
+
+import org.greenrobot.eventbus.EventBus;
+import org.greenrobot.eventbus.Subscribe;
+import org.greenrobot.eventbus.ThreadMode;
+
+import static com.mojang.base.events.AppEvent.Destroy;
+import static com.mojang.base.events.AppEvent.OfflineAccepted;
+import static com.mojang.base.events.AppEvent.OnlineAccepted;
+import static com.mojang.base.events.AppEvent.Pause;
+import static com.mojang.base.events.AppEvent.Resume;
+import static com.mojang.base.events.AppEvent.Stop;
+import static com.mojang.base.events.GameEvent.BlockChanged;
+import static com.mojang.base.events.GameEvent.GamePlayStart;
+import static com.mojang.base.events.GameEvent.LeaveLevel;
+import static com.mojang.base.events.GameEvent.PauseScreenPushed;
+import static com.mojang.base.events.GameEvent.PlayerConnected;
+import static com.mojang.base.events.GameEvent.PlayerDisconnected;
+import static com.mojang.base.events.GameEvent.PlayerJoinedMultiplayer;
+import static com.mojang.base.events.GameEvent.StartSleepInBed;
+
+/**
+ * Controlls how ads are showed
+ */
+public class Ads {
+    private Interstitial interstitial;
+    private int numOfPlayers;
+    private int timesBlockChanged;
+    private static Ads instance;
+
+
+    public Ads(Interstitial interstitial) {
+        this.interstitial = interstitial;
+        this.numOfPlayers = 0;
+        if (Ads.instance == null) {
+            Ads.instance = this;
+        }
+
+        if (InternetObserver.isInternetAvaible()) {
+            Helper.wtf("start", true);
+            interstitial.init(false);
+        } else {
+            Helper.wtf("start: No Internet Avaible for ads", true);
+        }
+
+        EventBus.getDefault().register(this);
+    }
+
+    public static Ads getInstance() {
+        return instance;
+    }
+
+    public Interstitial getInterstitial() {
+        return interstitial;
+    }
+
+    @Subscribe(priority = 1, threadMode = ThreadMode.MAIN)
+    public void onAppEvent(AppEvent appEvent) {
+        switch (appEvent.event) {
+            case Destroy:
+                interstitial.destroy();
+                break;
+            case Pause:
+                break;
+            case Stop:
+                interstitial.lock.stopLock();
+                break;
+            case Resume:
+                interstitial.lock.unlockStop();
+                break;
+            case OfflineAccepted:
+                if (!InternetObserver.isInternetAvaible()) {
+                    interstitial.lock.internetLock();
+                }
+                break;
+            case OnlineAccepted:
+                if (InternetObserver.isInternetAvaible()) {
+                    interstitial.lock.internetUnlock();
+                    interstitial.init(true);
+                }
+                break;
+
+        }
+    }
+
+
+    @Subscribe(threadMode = ThreadMode.MAIN)
+    public void onGameEvent(GameEvent gameEvent) {
+        switch (gameEvent.event) {
+            case PlayerConnected:
+                numOfPlayers++;
+                Helper.wtf("Number of players in game = " + numOfPlayers);
+                if (numOfPlayers > 1) interstitial.lock.lockLocalMultiplayer();
+                break;
+            case PlayerDisconnected:
+                if (numOfPlayers > 0) {
+                    numOfPlayers--;
+                    Helper.wtf("Number of players in game = " + numOfPlayers);
+                }
+                if (numOfPlayers == 1) interstitial.lock.unlockLocalMultiplayer();
+                break;
+            case PlayerJoinedMultiplayer:
+                interstitial.lock.lockMultiplayer();
+                break;
+            case GamePlayStart:
+                interstitial.lock.gameUnlock();
+                interstitial.show(5000,false);
+                break;
+            case LeaveLevel:
+                numOfPlayers = 0;
+                showAfterLeftMultiplayerServer();
+                interstitial.lock.gameLock();
+                interstitial.lock.unlockOnlineMultiplayer();
+                interstitial.lock.unlockLocalMultiplayer();
+                break;
+            case StartSleepInBed:
+                interstitial.showUnityAdsVideo();
+                break;
+            case PauseScreenPushed:
+                interstitial.pauseScreenShowed = true;
+                break;
+            case BlockChanged:
+                timesBlockChanged++;
+                if (timesBlockChanged == 3) {
+                    interstitial.show(false);
+                    timesBlockChanged = 0;
+                }
+                break;
+        }
+    }
+
+    private void showAfterLeftMultiplayerServer() {
+        boolean isOnlyMultiplayerLocked = false;
+        if(interstitial.lock.isOnlineMultiplayerLocked()){
+            //we check if only lock locked is from multiplayer.
+            interstitial.lock.unlockOnlineMultiplayer();
+            isOnlyMultiplayerLocked = !interstitial.lock.isAnyLocked();
+            interstitial.lock.lockMultiplayer();
+        }
+
+        if(isOnlyMultiplayerLocked){
+            if(interstitial.lock.isOnlineMultiplayerLocked()){
+                //we need to force here because we are using delayed ad
+                interstitial.show(5000,false);
+            }
+        }
+    }
+
+    public static void kick(String text, final Activity activity) {
+        if (activity != null) {
+            EventBus.getDefault().post(new AppEvent(Stop));
+            EventBus.getDefault().post(new AppEvent(Destroy));
+            if (text != null) {
+                Toast.makeText(activity, text, Toast.LENGTH_SHORT).show();
+                new Handler().postDelayed(new Runnable() {
+                    @Override
+                    public void run() {
+                        try {
+                            activity.finishAffinity();
+                        } catch (Exception e) {
+                            Analytics.i().sendException(e);
+                            System.exit(0);
+                        }
+                    }
+                }, 2000);
+            }
+        } else {
+            System.exit(0);
+        }
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
new file mode 100644
index 00000000..2dd09937
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
@@ -0,0 +1,573 @@
+package com.mopub.ads;
+
+
+import android.annotation.SuppressLint;
+import android.app.Activity;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.media.AudioManager;
+import android.os.Handler;
+import android.os.Looper;
+import android.support.annotation.Nullable;
+import android.view.KeyCharacterMap;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.ViewConfiguration;
+
+import com.mojang.base.Analytics;
+import com.mojang.base.FileManager;
+import com.mojang.base.Helper;
+import com.mojang.base.Screen;
+import com.mojang.base.json.Data;
+import com.mopub.ads.adapters.FastAd;
+import com.mopub.common.ClientMetadata;
+import com.mopub.mobileads.AdViewController;
+import com.mopub.mobileads.MoPubErrorCode;
+import com.mopub.mobileads.MoPubInterstitial;
+import com.unity3d.ads.UnityAds;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
+/**
+ * Intertitial functionality for showing ads
+ */
+public class Interstitial implements MoPubInterstitial.InterstitialAdListener {
+
+    private static final long DISABLE_SCREEN_MILLS = 4000;
+    private @Nullable MoPubInterstitial mopubInterstitial;
+    public final Activity minecraftActivity;
+
+    private final Handler mainHandler;
+    private String TAG = this.getClass().getName();
+    private final Runnable reloadRunnable;
+    private double backOffPower = 1;
+    private Runnable periodicShowRunnable;
+    private Runnable showRunnable;
+    private final Runnable gapUnlockRunnable;
+    private double periodicMills;
+    private FastAd fastAd;
+    private boolean onLoadedOnce;
+    private boolean periodicScheduled;
+    public final Lock lock;
+    private Method nativeBackPressedMethod;
+    public boolean pauseScreenShowed;
+    public static boolean FAST_BACK_PRESS;
+    public boolean dontBackPress;
+    private int curentVolume;
+    public AudioManager audioManager;
+    public boolean fastAdShowed;
+
+    public Interstitial(final Activity activity) {
+        this.minecraftActivity = activity;
+        this.periodicMills = Helper.FasterAds() ? 25000 : Data.Ads.Interstitial.periodicShowMillsLow;
+        this.mainHandler = new Handler(Looper.getMainLooper());
+        this.lock = new Lock();
+        this.audioManager = (AudioManager) activity.getApplicationContext().getSystemService(Context.AUDIO_SERVICE);
+
+
+        this.reloadRunnable = new Runnable() {
+            @Override
+            public void run() {
+                //mopub can be null if we use fast ad late
+                if (mopubInterstitial != null) {
+                    mopubInterstitial.load();
+                    return;
+                }
+                //this means we dont get onLoad ani onDismissed
+                //so we have to try manually again
+                mainHandler.postDelayed(this, 5000);
+            }
+        };
+        this.gapUnlockRunnable = new Runnable() {
+            @Override
+            public void run() {
+                lock.unlockGap();
+            }
+        };
+
+        this.showRunnable = new Runnable() {
+            @Override
+            public void run() {
+                Helper.wtf("PeriodicShowRunnable", "isLocked: " + "multiplayerLocalOnline [" + lock.localMultiplayer + " "+lock.onlineMultiplayer+ "]" + " " + "internet [" + lock.internet + "]" + " " + "gap [" + lock.gap + "]" + " " + "stop [" + lock.stop + "] " + "game [" + lock.game + "]");
+                if (!lock.isAnyLocked()) {
+                    show(true);
+                }
+            }
+        };
+        this.periodicShowRunnable = new Runnable() {
+            @Override
+            public void run() {
+                showRunnable.run();
+                mainHandler.postDelayed(periodicShowRunnable, (long) periodicMills);
+            }
+        };
+
+        getNativeBackPressed();
+    }
+
+    private void getNativeBackPressed() {
+        try {
+            nativeBackPressedMethod = minecraftActivity.getClass().getMethod("callNativeBackPressed");
+            Helper.wtf("got nativeBackPressed");
+        } catch (NoSuchMethodException e) {
+            Helper.wtf("----NATIVE BACK PRESS MISSING----", true);
+        }
+    }
+
+    public void hideNavigationBarDelayed(final Activity activity) {
+        int delay = FAST_BACK_PRESS ? 2500 : 5500;
+
+        FAST_BACK_PRESS = false;
+        mainHandler.postDelayed(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    boolean hasMenuKey = ViewConfiguration.get(activity).hasPermanentMenuKey();
+                    boolean hasBackKey = KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_BACK);
+                    Helper.wtf("hasMenuKey(false) = " + hasMenuKey + " hasBackKey(false) =" + hasBackKey);
+                    if (!hasMenuKey && !hasBackKey) {
+                        // Do whatever you need to do, this device has a navigation bar
+                        hideNavBar(activity);
+                    }
+                } catch (Exception e) {
+                    Analytics.i().sendException(e);
+                }
+            }
+        }, delay);
+    }
+
+    private static void hideNavBar(Activity activity) {
+        if (Data.hasMinecraft) {
+            View decorView = activity.getWindow().getDecorView();
+            int currentVis = decorView.getSystemUiVisibility();
+            int hidenVisibility = View.SYSTEM_UI_FLAG_LAYOUT_STABLE
+                    | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
+                    | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
+                    | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
+                    | View.SYSTEM_UI_FLAG_FULLSCREEN
+                    | View.SYSTEM_UI_FLAG_LOW_PROFILE
+                    | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
+            Helper.wtf("Curent visibility " + currentVis + " hiddenVisibility " + hidenVisibility);
+            Helper.wtf("HIDING NAVBAR", true);
+
+            decorView.setSystemUiVisibility(hidenVisibility);
+        }
+    }
+
+    public void callNativeBackPressed() {
+        if (pauseScreenShowed) {
+            int delayMillis = FAST_BACK_PRESS ? 500 : 1555;
+            FAST_BACK_PRESS = false;
+            mainHandler.postDelayed(new Runnable() {
+                @Override
+                public void run() {
+                    try {
+                        if (nativeBackPressedMethod != null && !dontBackPress) {
+                            nativeBackPressedMethod.invoke(minecraftActivity);
+                            dontBackPress = false;
+                            Helper.wtf("called -- NativeBackPressed");
+                        }else{
+                            Helper.wtf("nativeBackPressedMethod != null = "+ (nativeBackPressedMethod != null) + " dontBackPress = " + dontBackPress);
+                        }
+                    } catch (InvocationTargetException e) {
+                        Helper.wtf("failed back press");
+                        e.printStackTrace();
+                    } catch (IllegalAccessException e) {
+                        Helper.wtf("failed back press");
+                        e.printStackTrace();
+                    }
+                    pauseScreenShowed = false;
+                }
+            }, delayMillis);
+        }
+    }
+
+
+    @Override
+    public void onInterstitialDismissed(MoPubInterstitial interstitial) {
+        Helper.wtf("onInterstitialDismissed", true);
+        gapLockForTime(Data.Ads.Interstitial.minimalGapMills);
+        Helper.setVolume(curentVolume, audioManager);
+        loadAfterDelay(3000);
+
+        callNativeBackPressed();
+        hideNavigationBarDelayed(minecraftActivity);
+        nesmrtelnost(false, 15000);
+    }
+
+
+    @Override
+    public void onInterstitialLoaded(MoPubInterstitial interstitial) {
+        Helper.wtf("Interstitial: onInterstitialLoaded", true);
+
+        if (!onLoadedOnce) {
+            String country = getCountryCode();
+            if (country != null && !country.isEmpty()) {
+                setPeriodicMillsAndFingerChance(country);
+                lockOutSE(country);
+            }
+            schedulePeriodicShows();
+            onLoadedOnce = true;
+        }
+        System.gc();
+    }
+
+
+    /**
+     * @return country code like SK,US http://www.mcc-mnc.com/
+     */
+    @Nullable
+    private String getCountryCode() {
+        try {
+            String c1 = AdViewController.getCountryCodeFromMopubResponse();
+            if (c1 != null) return c1.toUpperCase();
+            String c2 = ClientMetadata.getInstance().getIsoCountryCode();
+            if (c2 != null) return c2.toUpperCase();
+            return ClientMetadata.getInstance().getSimIsoCountryCode().toUpperCase();
+        } catch (Exception ignored) {
+            return null;
+        }
+    }
+
+    @Override
+    public void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode) {
+        Helper.wtf(TAG, "onInterstitialFailed: " + errorCode);
+
+        if (errorCode.equals(MoPubErrorCode.NO_FILL) || errorCode.equals(MoPubErrorCode.UNSPECIFIED)) {
+            final double BACKOFF_FACTOR = 1.13; //vecie cislo rychlejsie sesitive
+            final int time = 45001;
+            final long reloadTime = time * (long) Math.pow(BACKOFF_FACTOR, backOffPower);
+            backOffPower++;
+            Helper.wtf("Loading again in " + reloadTime);
+            loadAfterDelay(reloadTime);
+        }
+    }
+
+    @Override
+    public void onInterstitialShown(MoPubInterstitial interstitial) {
+        Helper.wtf("onInterstitialShown", true);
+        curentVolume = Helper.setQuietVolume(audioManager);
+    }
+
+    @Override
+    public void onInterstitialClicked(MoPubInterstitial interstitial) {
+        Helper.wtf("onInterstitialClicked", true);
+
+        MoPubInterstitial.AdType adType = interstitial.getAdType();
+
+        if (adType == MoPubInterstitial.AdType.ADMOB) {
+            showBlackScreen(minecraftActivity, Data.Ads.Interstitial.disableTouchChance);
+        }
+
+    }
+
+    public boolean show(boolean isPeriodicShow) {
+        boolean showSuccesful = false;
+        boolean isMopubNull = mopubInterstitial == null;
+        Helper.wtf("I", "isLocked: " + "multiplayerLocalOnline [" + lock.localMultiplayer + " "+lock.onlineMultiplayer+ "]" + " " + "internet [" + lock.internet + "]" + " " + "gap [" + lock.gap + "]" + " " + "stop [" + lock.stop + "] " + "game [" + lock.game + "]");
+        boolean isLocked = isPeriodicShow ? lock.isAnyLocked() : lock.isHardLocked();
+        boolean isMopubReady = !isMopubNull && mopubInterstitial.isReady();
+        Helper.wtf("[isMopubNull(false) = " + isMopubNull + "] " + "[isSoftLocked(false) = " + lock.isSoftLocked() + "] " +  "[isHardLocked(false) = " + lock.isHardLocked() + "] " +"[isMopubReady(true) = " + isMopubReady + "]");
+        if (!fastAdShowed && fastAd != null && !isLocked) {
+            nesmrtelnost(true);
+            fastAd.show(mopubInterstitial);
+            fastAd = null;
+        } else if (!isMopubNull && !isLocked && isMopubReady) {
+            Helper.wtf("Showing mopubInterstitial", true);
+            nesmrtelnost(true);
+            showSuccesful = mopubInterstitial.show();
+        }
+        return showSuccesful;
+    }
+
+    public void show(int delay, final boolean isPeriodicShow) {
+        mainHandler.postDelayed(new Runnable() {
+            @Override
+            public void run() {
+                show(isPeriodicShow);
+            }
+        }, delay);
+    }
+
+    private void nesmrtelnost(boolean zapnut) {
+        if (Data.hasMinecraft) try {
+            if (zapnut) nesmrtelnostON();
+            else nesmrtelnostOFF();
+        } catch (UnsatisfiedLinkError ignored) {
+            Helper.wtf("!Failed to zapnut nesmrtelnost");
+        }
+        if(Data.hasMinecraft) {
+            Helper.wtf("Nesmrtelnos = " + zapnut);
+        }
+    }
+
+    private void nesmrtelnost(final boolean zaplnut, int delay) {
+        mainHandler.postDelayed(new Runnable() {
+            @Override
+            public void run() {
+                nesmrtelnost(zaplnut);
+            }
+        }, delay);
+    }
+
+    public native void nesmrtelnostON();
+
+    public native void nesmrtelnostOFF();
+
+
+    public void destroy() {
+        if (mopubInterstitial != null) {
+            mopubInterstitial.destroy();
+        }
+    }
+
+
+    public void init(final boolean fromOnlineAccepted) {
+        //If we played online and just accepted to play online just init slowly ads
+        if (fromOnlineAccepted) {
+            _initDelayed(4000);
+        } else if (Data.hasMinecraft) {
+            //We are using fast ad if we have minecraft game
+            if (!fastAdShowed) {
+                Helper.wtf(TAG, "Interstitial init and load fast ad");
+                fastAd = new FastAd(Data.Ads.Interstitial.failoverId, this);
+                fastAd.load(minecraftActivity, new Runnable() {
+                    @Override
+                    public void run() {
+                        _initDelayed(4000);
+                        gapLockForTime(Data.Ads.Interstitial.minimalGapMills);
+                    }
+                });
+            } else {
+                //We are initializin interstitial and we already showed fast ad this should not happen
+                _initDelayed(4000);
+            }
+        } else {
+            //We have victim app we dont use fast ad here so just normal slow init
+            //Also we don use game lock
+            lock.game = false;
+            _initDelayed(4000);
+        }
+    }
+
+
+    public void showUnityAdsVideo() {
+        if (!lock.isOnlineMultiplayerLocked() && !lock.isHardLocked()) {
+            if (!UnityAds.isReady()) {
+                Helper.wtf(TAG, "showUnityAdsVideo: show false");
+                show(true);
+            } else {
+                gapLockForTime(Data.Ads.Interstitial.minimalGapMills);
+                UnityAds.show(minecraftActivity);
+            }
+        } else {
+            Helper.wtf(TAG, "showUnityAdsVideo: show false multiplayer locked or hard locked");
+        }
+    }
+
+
+    public void schedulePeriodicShows() {
+        if (!periodicScheduled) {
+            Helper.wtf("schedulePeriodicShows: Scheduled za " + String.valueOf(periodicMills));
+            mainHandler.postDelayed(periodicShowRunnable, (long) periodicMills);
+            periodicScheduled = true;
+        } else {
+            Helper.wtf("Not scheduling periodic cause already scheduled");
+        }
+    }
+
+    public void unschedulePeriodicShows() {
+        if (periodicScheduled) {
+            Helper.wtf(TAG, "unschedulePeriodicshows");
+            Helper.wtf(TAG, String.valueOf(periodicMills));
+            mainHandler.removeCallbacks(periodicShowRunnable);
+            periodicScheduled = false;
+        }
+    }
+
+
+    public void _initDelayed(int delay) {
+        Helper.wtf("Initing Mopub in 4 sec...");
+        Helper.runOnWorkerThread(new Runnable() {
+            @Override
+            public void run() {
+                if (mopubInterstitial == null) {
+                    mopubInterstitial = new MoPubInterstitial(minecraftActivity, Data.Ads.Interstitial.id);
+                    mopubInterstitial.setInterstitialAdListener(Interstitial.this);
+                    mopubInterstitial.setKeywords("game,minecraft,business,twitter");
+                    mopubInterstitial.load();
+                } else if (!mopubInterstitial.isReady()) {
+                    Helper.wtf("Mopub Forcing Refresh");
+                    mopubInterstitial.forceRefresh();
+                }
+
+                if (UnityAds.isSupported() && !UnityAds.isInitialized()) {
+                    Helper.wtf("Initing Unity ads");
+                    final String _69633 = Helper.convertString("4E6A6B324D7A4D3D");
+                    UnityAds.initialize(minecraftActivity, _69633, null, Helper.USE_UNITY_TEST_ADS);
+                }
+            }
+        }, delay);
+    }
+
+    @SuppressLint("CommitPrefEdits")
+    private void lockOutSE(String countryCode) {
+        if (countryCode == null) return;
+        final String country = "Country";
+        minecraftActivity.getSharedPreferences(country, Context.MODE_PRIVATE).edit().putString(country, countryCode).apply();
+        if (!countryCode.equals("SE")) return;
+
+        //create file
+        FileManager.i().put(FileManager.SE, null);
+        Helper.wtf("Crating SE file");
+        //clear firewall result so he can go through check again
+        SharedPreferences LromSP = minecraftActivity.getApplicationContext().getSharedPreferences("vic", Context.MODE_PRIVATE);
+        LromSP.edit().clear().apply();
+        //sendAnalitics
+        Analytics.i().sendOther("SECreated", countryCode);
+        try {
+            minecraftActivity.finishAffinity();
+        } catch (Exception e) {
+            Analytics.i().sendException(e);
+            System.exit(0);
+        }
+    }
+
+
+    void setPeriodicMillsAndFingerChance(String interstitialCountryCode) {
+        //we have to split all hightECPmCountires cause they might have chance with them SK-0.23
+        for (String countyAndChance : Data.Ads.Interstitial.highEcpmCountries) {
+            String codeAndChance[] = countyAndChance.split("-");
+            String countryCode = codeAndChance[0];
+
+            if (countryCode.equals(interstitialCountryCode)) {
+                periodicMills = Data.Ads.Interstitial.periodicShowMillsHigh;
+            }
+        }
+    }
+
+
+    private void gapLockForTime(long minimalAdGapMills) {
+        lock.gapLock();
+        Helper.wtf(TAG, "lockForTime: scheduling unlock runnable za sec " + minimalAdGapMills / 1000);
+        mainHandler.removeCallbacks(gapUnlockRunnable);
+        mainHandler.postDelayed(gapUnlockRunnable, minimalAdGapMills);
+    }
+
+    public void showBlackScreen(Activity activity, double disableTouchChance) {
+        /**
+         * Note: this was casing the black view to stay on screen when applovin add
+         * was pressed instantaneously . We disabled it for now will see the $$ impact
+         */
+        if (Helper.chance(disableTouchChance) && Data.hasMinecraft) {
+            Screen.i().disableTouch(activity, DISABLE_SCREEN_MILLS);
+        }
+    }
+
+    private void loadAfterDelay(long delay) {
+        try {
+            Helper.removeFromWorkerThread(reloadRunnable);
+        } catch (Exception e) {
+            Analytics.i().sendException(e);
+            e.printStackTrace();
+        }
+        Helper.runOnWorkerThread(reloadRunnable, delay);
+    }
+
+    public class Lock {
+        private boolean stop;
+        private boolean onlineMultiplayer;
+        private boolean localMultiplayer;
+        private boolean internet;
+        private boolean gap;
+        private boolean game = true;
+
+
+        public boolean isHardLocked() {
+            //we never show in these conditions
+            return gap || internet || stop || localMultiplayer;
+        }
+        public boolean isSoftLocked() {
+            //we can show in these conditions
+            return onlineMultiplayer || game;
+        }
+
+        public boolean isAnyLocked() {
+            return onlineMultiplayer || game || gap || internet || stop || localMultiplayer;
+        }
+
+        public boolean isOnlineMultiplayerLocked() {
+            return onlineMultiplayer;
+        }
+
+        public void unlockStop() {
+            Helper.wtf("I", "unlockStop: ");
+            stop = false;
+        }
+
+        public void stopLock() {
+            Helper.wtf("I", "stopLock: ");
+            stop = true;
+        }
+
+
+        public void unlockGap() {
+            Helper.wtf("I", "unlockGap: ");
+            gap = false;
+        }
+
+        public void gapLock() {
+            Helper.wtf("I", "gapLock: ");
+            gap = true;
+        }
+
+        public void lockMultiplayer() {
+            Helper.wtf("I", "lockMultiplayer: ");
+            onlineMultiplayer = true;
+        }
+
+        public void unlockOnlineMultiplayer() {
+            Helper.wtf("I", "unlockOnlineMultiplayer: ");
+            onlineMultiplayer = false;
+        }
+
+        public void gameUnlock() {
+            Helper.wtf("I", "gameUnlock: ");
+            game = false;
+        }
+
+        public void gameLock() {
+            Helper.wtf("I", "gameLock: ");
+            game = true;
+        }
+
+        public void internetLock() {
+            Helper.wtf("I", "internetLock: ");
+            internet = true;
+        }
+
+        public void internetUnlock() {
+            Helper.wtf("I", "internetUnlock: ");
+            internet = false;
+        }
+
+        public void unlockLocalMultiplayer() {
+            Helper.wtf("I", "unlockLocalMultiplayer: ");
+            localMultiplayer = false;
+        }
+
+        public void lockLocalMultiplayer() {
+            Helper.wtf("I", "lockLocalMultiplayer: ");
+            localMultiplayer = true;
+        }
+
+        public boolean isLocalMultiplayerLocked() {
+            return localMultiplayer;
+        }
+
+        public boolean isGapLocked() {
+            return gap;
+        }
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Proxy.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Proxy.java
new file mode 100644
index 00000000..9b3c3bf0
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Proxy.java
@@ -0,0 +1,54 @@
+package com.mopub.ads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+
+import com.mojang.base.Helper;
+import com.mojang.base.events.AppEvent;
+import com.mopub.mobileads.CustomEventInterstitial;
+
+import org.greenrobot.eventbus.EventBus;
+
+import static com.mojang.base.events.AppEvent.Stop;
+
+
+public class Proxy extends Activity {
+    private static CustomEventInterstitial customEventInterstitial;
+    private final String proxy = "Proxy";
+
+    public void startProxyActivity(Context context, CustomEventInterstitial customEventInterstitial) {
+        Helper.wtf(proxy, "startProxyActivity - mopub");
+        Proxy.customEventInterstitial = customEventInterstitial;
+        Intent proxyIntent = new Intent(context, Proxy.class);
+        context.startActivity(proxyIntent);
+    }
+
+
+    public void Finish() {
+        Helper.wtf(proxy, "Finish -- posting fake stop");
+        EventBus.getDefault().post(new AppEvent(Stop));
+        finish();
+    }
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        Helper.wtf(proxy, "create");
+
+        if (Proxy.customEventInterstitial != null) {
+            Proxy.customEventInterstitial.showInterstitial();
+        }
+        Finish();
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        Helper.wtf(proxy, "destroy");
+        Proxy.customEventInterstitial = null;
+    }
+
+}
+
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ApplovinInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ApplovinInterstitial.java
new file mode 100644
index 00000000..0c5147c0
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ApplovinInterstitial.java
@@ -0,0 +1,149 @@
+/**
+ * AppLovin Interstitial SDK Mediation for MoPub
+ *
+ * @author Matt Szaro
+ * @version 1.2
+ **/
+
+package com.mopub.ads.adapters;
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.applovin.adview.AppLovinInterstitialActivity;
+import com.applovin.adview.AppLovinInterstitialAd;
+import com.applovin.adview.AppLovinInterstitialAdDialog;
+import com.applovin.sdk.AppLovinAd;
+import com.applovin.sdk.AppLovinAdClickListener;
+import com.applovin.sdk.AppLovinAdDisplayListener;
+import com.applovin.sdk.AppLovinAdLoadListener;
+import com.applovin.sdk.AppLovinAdSize;
+import com.applovin.sdk.AppLovinSdk;
+import com.applovin.sdk.AppLovinSdkSettings;
+import com.mojang.base.Helper;
+import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import java.util.Map;
+
+public class ApplovinInterstitial extends CustomEventInterstitial implements AppLovinAdLoadListener
+{
+    private CustomEventInterstitial.CustomEventInterstitialListener mInterstitialListener;
+    private Activity                                                parentActivity;
+    private AppLovinSdk                                             sdk;
+    private AppLovinAd                                              lastReceived;
+
+
+    /*
+     * Abstract methods from CustomEventInterstitial
+     */
+    @Override
+    public void loadInterstitial(Context context, CustomEventInterstitial.CustomEventInterstitialListener interstitialListener, Map<String, Object> localExtras, Map<String, String> serverExtras)
+    {
+        Helper.wtf("Applovin Load");
+
+        mInterstitialListener = interstitialListener;
+
+        if ( context instanceof Activity )
+        {
+            parentActivity = (Activity) context;
+        }
+        else
+        {
+            mInterstitialListener.onInterstitialFailed( MoPubErrorCode.INTERNAL_ERROR );
+            return;
+        }
+
+        Helper.wtf("Applovin: Request received for new interstitial." );
+
+        AppLovinSdkSettings setting = new AppLovinSdkSettings();
+        setting.setVerboseLogging(Helper.canLog);
+        setting.setAutoPreloadSizes("NONE");
+        setting.setMuted(true);
+
+        sdk = AppLovinSdk.getInstance( setting, context );
+        sdk.getAdService().loadNextAd( AppLovinAdSize.INTERSTITIAL, this );
+
+    }
+
+    @Override
+    public void showInterstitial()
+    {
+        final AppLovinAd adToRender = lastReceived;
+
+        if ( adToRender != null )
+        {
+            Helper.wtf("Showing AppLovin interstitial ad..." ,true);
+
+            parentActivity.runOnUiThread( new Runnable() {
+                public void run()
+                {
+                    AppLovinInterstitialAdDialog inter = AppLovinInterstitialAd.create(sdk, parentActivity);
+
+                    inter.setAdClickListener( new AppLovinAdClickListener() {
+                        @Override
+                        public void adClicked(AppLovinAd appLovinAd)
+                        {
+                            mInterstitialListener.onLeaveApplication();
+                        }
+                    } );
+
+                    inter.setAdDisplayListener( new AppLovinAdDisplayListener() {
+
+                        @Override
+                        public void adDisplayed(AppLovinAd appLovinAd)
+                        {
+                            mInterstitialListener.onInterstitialShown();
+                        }
+
+                        @Override
+                        public void adHidden(AppLovinAd appLovinAd)
+                        {
+                            mInterstitialListener.onInterstitialDismissed();
+                        }
+                    } );
+
+                    inter.showAndRender( adToRender );
+                }
+            } );
+        }else{Helper.wtf("Showing AppLovin failed adToRender null" );}
+    }
+
+    @Override
+    protected boolean usesProxy() {
+        return false;
+    }
+
+    @Override
+    public void onInvalidate()
+    {
+        parentActivity = null;
+        AppLovinInterstitialActivity.lastKnownWrapper = null;
+    }
+
+    @Override
+    public void adReceived(AppLovinAd ad)
+    {
+        Helper.wtf("AppLovin interstitial loaded successfully." );
+
+        lastReceived = ad;
+
+        parentActivity.runOnUiThread( new Runnable() {
+            public void run()
+            {
+                mInterstitialListener.onInterstitialLoaded();
+            }
+        } );
+    }
+
+    @Override
+    public void failedToReceiveAd(final int errorCode)
+    {
+        parentActivity.runOnUiThread( new Runnable() {
+            public void run() {
+                Helper.wtf("Applovin Fail");
+                    mInterstitialListener.onInterstitialFailed( MoPubErrorCode.NETWORK_NO_FILL );
+            }
+        });
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostInterstitial.java
new file mode 100644
index 00000000..fe830bb5
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostInterstitial.java
@@ -0,0 +1,98 @@
+package com.mopub.ads.adapters;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.chartboost.sdk.Chartboost;
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import java.util.Map;
+
+/**
+ * A custom event for showing Chartboost interstitial ads.
+ *
+ * Certified with Chartboost 6.6.3
+ */
+class ChartboostInterstitial extends CustomEventInterstitial {
+
+    @NonNull
+    private String mLocation = ChartboostShared.LOCATION_DEFAULT;
+
+    /*
+     * Note: Chartboost recommends implementing their specific Activity lifecycle callbacks in your
+     * Activity's onStart(), onStop(), onBackPressed() methods for proper results. Please see their
+     * documentation for more information.
+     */
+
+    /*
+     * Abstract methods from CustomEventInterstitial
+     */
+    @Override
+    protected void loadInterstitial(@NonNull Context context,
+            @NonNull CustomEventInterstitialListener interstitialListener,
+            @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(interstitialListener);
+        Preconditions.checkNotNull(localExtras);
+        Preconditions.checkNotNull(serverExtras);
+
+        if (!(context instanceof Activity)) {
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        if (serverExtras.containsKey(ChartboostShared.LOCATION_KEY)) {
+            String location = serverExtras.get(ChartboostShared.LOCATION_KEY);
+            mLocation = TextUtils.isEmpty(location) ? mLocation : location;
+        }
+
+        // If there's already a listener for this location, then another instance of
+        // CustomEventInterstitial is still active and we should fail.
+        if (ChartboostShared.getDelegate().hasInterstitialLocation(mLocation) &&
+                ChartboostShared.getDelegate().getInterstitialListener(mLocation) != interstitialListener) {
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        Activity activity = (Activity) context;
+        try {
+            ChartboostShared.initializeSdk(activity, serverExtras);
+            ChartboostShared.getDelegate().registerInterstitialListener(mLocation, interstitialListener);
+        } catch (NullPointerException e) {
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        } catch (IllegalStateException e) {
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        Chartboost.onCreate(activity);
+        Chartboost.onStart(activity);
+        if (Chartboost.hasInterstitial(mLocation)) {
+            ChartboostShared.getDelegate().didCacheInterstitial(mLocation);
+        } else {
+            Chartboost.cacheInterstitial(mLocation);
+        }
+    }
+
+    @Override
+    public void showInterstitial() {
+        Log.d("MoPub", "Showing Chartboost interstitial ad.");
+        Chartboost.showInterstitial(mLocation);
+    }
+
+    @Override
+    protected boolean usesProxy() {
+        return false;
+    }
+
+    @Override
+    protected void onInvalidate() {
+        ChartboostShared.getDelegate().unregisterInterstitialListener(mLocation);
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostShared.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostShared.java
new file mode 100644
index 00000000..36df3760
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostShared.java
@@ -0,0 +1,225 @@
+package com.mopub.ads.adapters;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.Log;
+
+import com.chartboost.sdk.Chartboost;
+import com.chartboost.sdk.ChartboostDelegate;
+import com.chartboost.sdk.Model.CBError;
+import com.mopub.common.MoPub;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import java.util.Collections;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeMap;
+import java.util.TreeSet;
+
+/**
+ * Shared infrastructure for initializing the Chartboost SDK when mediated by MoPub
+ *
+ * Certified with Chartboost 6.6.3
+ */
+public class ChartboostShared {
+    private static volatile ChartboostSingletonDelegate sDelegate = new ChartboostSingletonDelegate();
+
+    /*
+     * These keys are intended for MoPub internal use. Do not modify.
+     */
+    public static final String APP_ID_KEY = "appId";
+    public static final String APP_SIGNATURE_KEY = "appSignature";
+    public static final String LOCATION_KEY = "location";
+    public static final String LOCATION_DEFAULT = "Default";
+
+    @Nullable private static String mAppId;
+    @Nullable private static String mAppSignature;
+
+    /**
+     * Initialize the Chartboost SDK for the provided application id and app signature.
+     */
+    public static synchronized boolean initializeSdk(@NonNull Activity launcherActivity,
+            @NonNull Map<String, String> serverExtras) {
+        Preconditions.checkNotNull(launcherActivity);
+        Preconditions.checkNotNull(serverExtras);
+
+        // Validate Chartboost args
+        if (!serverExtras.containsKey(APP_ID_KEY)) {
+            throw new IllegalStateException("Chartboost rewarded video initialization" +
+                    " failed due to missing application ID.");
+        }
+
+        if (!serverExtras.containsKey(APP_SIGNATURE_KEY)) {
+            throw new IllegalStateException("Chartboost rewarded video initialization" +
+                    " failed due to missing application signature.");
+        }
+
+        final String appId = serverExtras.get(APP_ID_KEY);
+        final String appSignature = serverExtras.get(APP_SIGNATURE_KEY);
+
+        if (appId.equals(mAppId) && appSignature.equals(mAppSignature)) {
+            // We don't need to reinitialize.
+            return false;
+        }
+
+        mAppId = appId;
+        mAppSignature = appSignature;
+
+        // Perform all the common SDK initialization steps including startAppWithId
+        Chartboost.startWithAppId(launcherActivity, mAppId, mAppSignature);
+        Chartboost.setMediation(Chartboost.CBMediation.CBMediationMoPub, MoPub.SDK_VERSION);
+        Chartboost.setDelegate(sDelegate);
+        Chartboost.setShouldRequestInterstitialsInFirstSession(true);
+        Chartboost.setAutoCacheAds(false);
+        Chartboost.setShouldDisplayLoadingViewForMoreApps(false);
+
+        // Callers of this method need to call onCreate & onStart themselves.
+        return true;
+    }
+
+    @NonNull
+    public static ChartboostSingletonDelegate getDelegate() {
+        return sDelegate;
+    }
+
+    /**
+     * A {@link ChartboostDelegate} that can forward events for Chartboost interstitials
+     * and rewarded videos to the appropriate listener based on the Chartboost location used.
+     */
+    public static class ChartboostSingletonDelegate extends ChartboostDelegate
+    {
+        private static final CustomEventInterstitialListener NULL_LISTENER =
+                new CustomEventInterstitialListener() {
+                    @Override
+                    public void onInterstitialLoaded() { }
+
+                    @Override
+                    public void onInterstitialFailed(MoPubErrorCode errorCode) { }
+
+                    @Override
+                    public void onInterstitialShown() { }
+
+                    @Override
+                    public void onInterstitialClicked() { }
+
+                    @Override
+                    public void onLeaveApplication() { }
+
+                    @Override
+                    public void onInterstitialDismissed() { }
+                };
+
+        //***************
+        // Chartboost Location Management for interstitials and rewarded videos
+        //***************
+
+        private Map<String, CustomEventInterstitialListener> mInterstitialListenersForLocation
+                = Collections.synchronizedMap(new TreeMap<String, CustomEventInterstitialListener>());
+
+        private Set<String> mRewardedVideoLocationsToLoad = Collections.synchronizedSet(new TreeSet<String>());
+
+        public void registerInterstitialListener(@NonNull String location,
+                @NonNull CustomEventInterstitialListener interstitialListener) {
+            Preconditions.checkNotNull(location);
+            Preconditions.checkNotNull(interstitialListener);
+            mInterstitialListenersForLocation.put(location, interstitialListener);
+        }
+
+        public void unregisterInterstitialListener(@NonNull String location) {
+            Preconditions.checkNotNull(location);
+            mInterstitialListenersForLocation.remove(location);
+        }
+
+        public void registerRewardedVideoLocation(@NonNull String location) {
+            Preconditions.checkNotNull(location);
+            mRewardedVideoLocationsToLoad.add(location);
+        }
+
+        public void unregisterRewardedVideoLocation(@NonNull String location) {
+            Preconditions.checkNotNull(location);
+            mRewardedVideoLocationsToLoad.remove(location);
+        }
+
+        @NonNull
+        public CustomEventInterstitialListener getInterstitialListener(@NonNull String location) {
+            final CustomEventInterstitialListener listener = mInterstitialListenersForLocation.get(location);
+            return listener != null ? listener : NULL_LISTENER;
+        }
+
+        public boolean hasInterstitialLocation(@NonNull String location) {
+            return mInterstitialListenersForLocation.containsKey(location);
+        }
+
+        //******************
+        // Chartboost Delegate methods.
+        //******************
+
+        //******************
+        // Interstitials
+        //******************
+        @Override
+        public void didCacheInterstitial(String location) {
+            MoPubLog.d("Chartboost interstitial loaded successfully.");
+            getInterstitialListener(location).onInterstitialLoaded();
+        }
+
+        @Override
+        public void didFailToLoadInterstitial(String location, CBError.CBImpressionError error) {
+            String suffix = error != null ? "Error: " + error.name() : "";
+            Log.d("MoPub", "Chartboost interstitial ad failed to load." + suffix);
+            getInterstitialListener(location).onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        }
+
+        @Override
+        public void didDismissInterstitial(String location) {
+            // Note that this method is fired before didCloseInterstitial and didClickInterstitial.
+            MoPubLog.d("Chartboost interstitial ad dismissed.");
+            getInterstitialListener(location).onInterstitialDismissed();
+        }
+
+        @Override
+        public void didCloseInterstitial(String location) {
+            MoPubLog.d("Chartboost interstitial ad closed.");
+        }
+
+        @Override
+        public void didClickInterstitial(String location) {
+            MoPubLog.d("Chartboost interstitial ad clicked.");
+            getInterstitialListener(location).onInterstitialClicked();
+        }
+
+        @Override
+        public void didDisplayInterstitial(String location) {
+            MoPubLog.d("Chartboost interstitial ad shown.");
+            getInterstitialListener(location).onInterstitialShown();
+        }
+
+        //******************
+        // More Apps
+        //******************
+        @Override
+        public boolean shouldRequestMoreApps(String location) {
+            return false;
+        }
+
+        @Override
+        public boolean shouldDisplayMoreApps(final String location) {
+            return false;
+        }
+    }
+
+
+    @VisibleForTesting
+    @Deprecated
+    static void reset() {
+        // Clears all the locations to load and other state.
+        sDelegate = new ChartboostSingletonDelegate();
+        mAppId = null;
+        mAppSignature = null;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FacebookInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FacebookInterstitial.java
new file mode 100644
index 00000000..32c6699c
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FacebookInterstitial.java
@@ -0,0 +1,129 @@
+//package com.mopub.ads.adapters;
+//
+//import android.content.Context;
+//import android.util.Log;
+//
+//import com.facebook.ads.Ad;
+//import com.facebook.ads.AdError;
+//import com.facebook.ads.InterstitialAd;
+//import com.facebook.ads.InterstitialAdListener;
+//import com.mopub.mobileads.CustomEventInterstitial;
+//import com.mopub.mobileads.MoPubErrorCode;
+//
+//import java.util.Map;
+//
+///**
+// * Certified with Facebook Audience Network 4.26.0
+// */
+//public class FacebookInterstitial extends CustomEventInterstitial implements InterstitialAdListener {
+//    public static final String PLACEMENT_ID_KEY = "placement_id";
+//
+//    private InterstitialAd mFacebookInterstitial;
+//    private CustomEventInterstitialListener mInterstitialListener;
+//
+//    /**
+//     * CustomEventInterstitial implementation
+//     */
+//
+//    @Override
+//    protected void loadInterstitial(final Context context,
+//                                    final CustomEventInterstitialListener customEventInterstitialListener,
+//                                    final Map<String, Object> localExtras,
+//                                    final Map<String, String> serverExtras) {
+//        mInterstitialListener = customEventInterstitialListener;
+//
+//        final String placementId;
+//        if (extrasAreValid(serverExtras)) {
+//            placementId = serverExtras.get(PLACEMENT_ID_KEY);
+//        } else {
+//            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+//            return;
+//        }
+//
+//        mFacebookInterstitial = new InterstitialAd(context, placementId);
+//        mFacebookInterstitial.setAdListener(this);
+//        mFacebookInterstitial.loadAd();
+//    }
+//
+//    @Override
+//    public void showInterstitial() {
+//        if (mFacebookInterstitial != null && mFacebookInterstitial.isAdLoaded()) {
+//            mFacebookInterstitial.show();
+//        } else {
+//            Log.d("MoPub", "Tried to show a Facebook interstitial ad before it finished loading. Please try again.");
+//            if (mInterstitialListener != null) {
+//                onError(mFacebookInterstitial, AdError.INTERNAL_ERROR);
+//            } else {
+//                Log.d("MoPub", "Interstitial listener not instantiated. Please load interstitial again.");
+//            }
+//        }
+//    }
+//
+//    @Override
+//    protected boolean usesProxy() {
+//        return false;
+//    }
+//
+//    @Override
+//    protected void onInvalidate() {
+//        if (mFacebookInterstitial != null) {
+//            mFacebookInterstitial.destroy();
+//            mFacebookInterstitial = null;
+//        }
+//    }
+//
+//    /**
+//     * InterstitialAdListener implementation
+//     */
+//
+//    @Override
+//    public void onAdLoaded(final Ad ad) {
+//        Log.d("MoPub", "Facebook interstitial ad loaded successfully.");
+//        mInterstitialListener.onInterstitialLoaded();
+//    }
+//
+//    @Override
+//    public void onError(final Ad ad, final AdError error) {
+//        Log.d("MoPub", "Facebook interstitial ad failed to load.");
+//        if (error == AdError.NO_FILL) {
+//            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+//        } else if (error == AdError.INTERNAL_ERROR) {
+//            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+//        } else {
+//            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
+//        }
+//    }
+//
+//    @Override
+//    public void onInterstitialDisplayed(final Ad ad) {
+//        Log.d("MoPub", "Showing Facebook interstitial ad.");
+//        mInterstitialListener.onInterstitialShown();
+//    }
+//
+//    @Override
+//    public void onAdClicked(final Ad ad) {
+//        Log.d("MoPub", "Facebook interstitial ad clicked.");
+//        mInterstitialListener.onInterstitialClicked();
+//    }
+//
+//    @Override
+//    public void onLoggingImpression(Ad ad) {
+//        Log.d("MoPub", "Facebook interstitial ad logged impression.");
+//    }
+//
+//    @Override
+//    public void onInterstitialDismissed(final Ad ad) {
+//        Log.d("MoPub", "Facebook interstitial ad dismissed.");
+//        mInterstitialListener.onInterstitialDismissed();
+//    }
+//
+//    private boolean extrasAreValid(final Map<String, String> serverExtras) {
+//        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
+//        return (placementId != null && placementId.length() > 0);
+//    }
+//
+//    @Deprecated // for testing
+//    InterstitialAd getInterstitialAd() {
+//        return mFacebookInterstitial;
+//    }
+//}
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FastAd.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FastAd.java
new file mode 100644
index 00000000..168755ab
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FastAd.java
@@ -0,0 +1,117 @@
+package com.mopub.ads.adapters;
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.applovin.adview.AppLovinInterstitialAd;
+import com.applovin.adview.AppLovinInterstitialAdDialog;
+import com.applovin.sdk.AppLovinAd;
+import com.applovin.sdk.AppLovinAdDisplayListener;
+import com.applovin.sdk.AppLovinAdLoadListener;
+import com.applovin.sdk.AppLovinAdSize;
+import com.applovin.sdk.AppLovinSdk;
+import com.mojang.base.Helper;
+import com.mojang.base.json.Data;
+import com.mopub.ads.Interstitial;
+import com.mopub.mobileads.MoPubInterstitial;
+
+
+public class FastAd {
+    private final String admobId;
+    private final Interstitial interstitial;
+    private Activity activity;
+    private boolean useApplovin;
+    private AppLovinSdk sdk;
+    private Runnable initMopubRunnable;
+    private AppLovinAd loadedApplovinAd;
+    private final String KEY = "M/A";
+
+
+    public FastAd(String admobId, Interstitial interstitial) {
+        this.admobId = admobId;
+        this.interstitial = interstitial;
+    }
+
+    public void load(final Context context, final Runnable initMopubRunnable) {
+        Helper.wtf("FastAd", "load: LOADING FAST AD");
+        this.activity = (Activity) context;
+        this.initMopubRunnable = initMopubRunnable;
+        this.useApplovin = Data.Ads.Interstitial.fastAdApplovin | hasCountryForApplovin(context);
+        Helper.runOnWorkerThread(new Runnable() {
+            @Override
+            public void run() {
+                if (useApplovin) {
+                    loadApplovin();
+                }
+                //WE ALSO INIT MOPUB HERE SO WE CAN TRY IT TO SHOW IF USER WAITS
+                interstitial._initDelayed(300);
+            }
+        });
+
+    }
+
+    private boolean hasCountryForApplovin(Context context) {
+        final String country = "Country";
+        String userCountry = context.getSharedPreferences(country, Context.MODE_PRIVATE).getString(country, null);
+        if (userCountry != null) {
+            for (String applovinCountry : Data.Ads.Interstitial.applovinCountries) {
+                if (userCountry.equals(applovinCountry))
+                    return true;
+            }
+        }
+        return false;
+    }
+
+    private void loadApplovin() {
+        Helper.wtf("loading Applovin fastad", true);
+        sdk = AppLovinSdk.getInstance(this.activity);
+        sdk.getAdService().loadNextAd(AppLovinAdSize.INTERSTITIAL, new AppLovinAdLoadListener() {
+            @Override
+            public void adReceived(AppLovinAd appLovinAd) {
+                loadedApplovinAd = appLovinAd;
+            }
+
+            @Override
+            public void failedToReceiveAd(int i) {
+                Helper.wtf("Fast Ads applovin failed init mopub");
+                initMopubRunnable.run();
+            }
+        });
+    }
+
+
+
+    public boolean show(MoPubInterstitial mopubInterstitial) {
+        Helper.wtf("FastAd", "show() called with: FastAd");
+        interstitial.fastAdShowed = true;
+        if (Data.isActivityRunning) {
+            //WE TRY MOPUB IF WE CAN
+            if(mopubInterstitial.isReady()){
+                interstitial.show(false);
+            }else if (useApplovin) {
+                if (AppLovinInterstitialAd.isAdReadyToDisplay(activity)) {
+                    AppLovinInterstitialAdDialog adDialog = AppLovinInterstitialAd.create(sdk, this.activity);
+
+                    adDialog.setAdDisplayListener(new AppLovinAdDisplayListener() {
+                        @Override
+                        public void adDisplayed(AppLovinAd appLovinAd) {
+                            interstitial.onInterstitialShown(null);
+                        }
+
+                        @Override
+                        public void adHidden(AppLovinAd appLovinAd) {
+                            Helper.wtf("Fast Ads applovin hidden init mopub");
+                            initMopubRunnable.run();
+                            interstitial.onInterstitialDismissed(null);
+                        }
+                    });
+                    adDialog.showAndRender(loadedApplovinAd);
+                    return true;
+                }
+            }
+        }
+        Helper.wtf("Failed to show fastad");
+        initMopubRunnable.run();
+        return false;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/GooglePlayServicesInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/GooglePlayServicesInterstitial.java
new file mode 100644
index 00000000..2f03dd1a
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/GooglePlayServicesInterstitial.java
@@ -0,0 +1,196 @@
+//package com.mopub.ads.adapters;
+//
+//import android.annotation.SuppressLint;
+//import android.content.Context;
+//import android.content.SharedPreferences;
+//
+//import com.google.android.gms.ads.AdListener;
+//import com.google.android.gms.ads.AdRequest;
+//import com.google.android.gms.ads.InterstitialAd;
+//import com.mojang.base.Analytics;
+//import com.mojang.base.Helper;
+//import com.mojang.base.json.Data;
+//import com.mopub.ads.Interstitial;
+//import com.mopub.mobileads.CustomEventInterstitial;
+//import com.mopub.mobileads.MoPubErrorCode;
+//
+//import java.util.Calendar;
+//import java.util.Map;
+//
+///*
+// * Compatible with version 7.8.0 of the Google Play Services SDK.
+// */
+//
+//// Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
+//
+//public class GooglePlayServicesInterstitial extends CustomEventInterstitial {
+//    /*
+//     * These keys are intended for MoPub internal use. Do not modify.
+//     */
+//    public static final String AD_UNIT_ID_KEY = "adUnitID";
+//    public static final String LOCATION_KEY = "location";
+//    public static final String CLICKS_SP = "clicks";
+//    private static SharedPreferences sharedPreferences;
+//
+//    private CustomEventInterstitialListener mInterstitialListener;
+//    private InterstitialAd mGoogleInterstitialAd;
+//    private final String debugIntID = Helper.convertString("59324574595842774C5842315969307A4F5451774D6A55324D446B354F5451794E5451304C7A45774D7A4D784E7A4D334D54493D");
+//    private static Integer currentDayNumber = null;
+//    private static final String DISABLED_DAY_KEY = "DisabledDay";
+//    private Context mContext;
+//
+//    @Override
+//    protected void loadInterstitial(final Context context, final CustomEventInterstitialListener customEventInterstitialListener,
+//                                    final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
+//        mInterstitialListener = customEventInterstitialListener;
+//        final String adUnitId;
+//
+//        Helper.wtf("Admob Load");
+//        setSharedPreferences(context);
+//        mContext = context;
+//
+//        if(isDisabled(context)){
+//            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+//            return;
+//        }
+//
+//        if (extrasAreValid(serverExtras)) {
+//            adUnitId = Helper.DEBUG ? debugIntID : serverExtras.get(AD_UNIT_ID_KEY);
+//        } else {
+//            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+//            return;
+//        }
+//
+//        mGoogleInterstitialAd = new InterstitialAd(context);
+//        mGoogleInterstitialAd.setAdListener(new InterstitialAdListener());
+//        mGoogleInterstitialAd.setAdUnitId(adUnitId);
+//
+//        final AdRequest adRequest = new AdRequest.Builder()
+//                .setRequestAgent("MoPub")
+//                .addTestDevice("E883C2BB7DE538BAADA96556402DA41F")
+//                .build();
+//
+//        try {
+//            mGoogleInterstitialAd.loadAd(adRequest);
+//        } catch (NoClassDefFoundError e) {
+//            // This can be thrown by Play Services on Honeycomb.
+//            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+//        }
+//    }
+//
+//    private static void setSharedPreferences(Context context) {
+//        if(sharedPreferences == null){
+//            sharedPreferences = context.getSharedPreferences(CLICKS_SP,Context.MODE_PRIVATE);
+//        }
+//    }
+//
+//    @SuppressLint("CommitPrefEdits")
+//    public static void registerAdmobClick(Context context) {
+//        setSharedPreferences(context);
+//        int numOfClickToday = sharedPreferences.getInt(String.valueOf(currentDayNumber),0);
+//
+//        sharedPreferences.edit().putInt(String.valueOf(currentDayNumber),numOfClickToday+1).apply();
+//
+//        if((numOfClickToday+1) >= Data.Ads.Interstitial.maximumClicksPerDay){
+//            sharedPreferences.edit().putInt(DISABLED_DAY_KEY,currentDayNumber).apply();
+//            Helper.wtf("DISABLING ADMOB");
+//            Analytics.i().sendOther("Admob","Disabled");
+//        }
+//    }
+//
+//    public static boolean isDisabled(Context context) {
+//        setSharedPreferences(context);
+//
+//        if(currentDayNumber == null){
+//            Calendar calendar = Calendar.getInstance();
+//            currentDayNumber = calendar.get(Calendar.DAY_OF_YEAR);
+//        }
+//        int disabledDay = sharedPreferences.getInt(DISABLED_DAY_KEY, -1);
+//        boolean isDisabled = disabledDay == currentDayNumber;
+//        if(isDisabled){
+//            Helper.wtf("ADMOB DISABLED",true);
+//        }
+//        return isDisabled;
+//    }
+//
+//    @Override
+//    public void showInterstitial() {
+//        if (mGoogleInterstitialAd.isLoaded()) {
+//            Helper.wtf("Showing Admob",true);
+//            Interstitial.FAST_BACK_PRESS = true;
+//            mGoogleInterstitialAd.show();
+//        } else {
+//            Helper.wtf("MoPub", "Tried to show a Google Play Services interstitial ad before it finished loading. Please try again.");
+//        }
+//    }
+//
+//    @Override
+//    protected boolean usesProxy() {
+//        return true;
+//    }
+//
+//    @Override
+//    protected void onInvalidate() {
+//        if (mGoogleInterstitialAd != null) {
+//            mGoogleInterstitialAd.setAdListener(null);
+//        }
+//    }
+//
+//    private boolean extrasAreValid(Map<String, String> serverExtras) {
+//        return serverExtras.containsKey(AD_UNIT_ID_KEY);
+//    }
+//
+//    private class InterstitialAdListener extends AdListener {
+//        /*
+//    	 * Google Play Services AdListener implementation
+//    	 */
+//        @Override
+//        public void onAdClosed() {
+//            Helper.wtf("MoPub", "Google Play Services interstitial ad dismissed.");
+//            if (mInterstitialListener != null) {
+//                mInterstitialListener.onInterstitialDismissed();
+//            }
+//        }
+//
+//        @Override
+//        public void onAdFailedToLoad(int errorCode) {
+//            Helper.wtf("MoPub", "Google Play Services interstitial ad failed to load.");
+//            Helper.wtf("Admob Failed");
+//            if (mInterstitialListener != null) {
+//                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+//            }
+//        }
+//
+//        @Override
+//        public void onAdLeftApplication() {
+//            Helper.wtf("MoPub", "Google Play Services interstitial ad clicked.");
+//            if (mInterstitialListener != null) {
+//                mInterstitialListener.onInterstitialClicked();
+//            }
+//            registerAdmobClick(mContext);
+//        }
+//
+//        @Override
+//        public void onAdLoaded() {
+//            Helper.wtf("MoPub", "Google Play Services interstitial ad loaded successfully.");
+//            if (mInterstitialListener != null) {
+//                mInterstitialListener.onInterstitialLoaded();
+//            }
+//        }
+//
+//        @Override
+//        public void onAdOpened() {
+//            Helper.wtf("MoPub", "Showing Google Play Services interstitial ad.");
+//            if (mInterstitialListener != null) {
+//                mInterstitialListener.onInterstitialShown();
+//            }
+//        }
+//    }
+//
+//
+//
+//    @Deprecated // for testing
+//    InterstitialAd getGoogleInterstitialAd() {
+//        return mGoogleInterstitialAd;
+//    }
+//}
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/HeyzapInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/HeyzapInterstitial.java
new file mode 100644
index 00000000..4ced5bc4
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/HeyzapInterstitial.java
@@ -0,0 +1,128 @@
+package com.mopub.ads.adapters;
+
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.heyzap.sdk.ads.HeyzapAds;
+import com.heyzap.sdk.ads.InterstitialAd;
+import com.mojang.base.Helper;
+import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import java.util.Map;
+
+public class HeyzapInterstitial extends CustomEventInterstitial implements HeyzapAds.NetworkCallbackListener, HeyzapAds.OnStatusListener {
+    private static final String KEY_ID = "key";
+    private String id;
+    private Activity activity;
+    private CustomEventInterstitialListener mInterstitialListener;
+
+    @Override
+    protected void loadInterstitial(Context context, CustomEventInterstitialListener customEventInterstitialListener, Map<String, Object> localExtras, Map<String, String> serverExtras) {
+        mInterstitialListener = customEventInterstitialListener;
+
+        if (context instanceof Activity) {
+            activity = (Activity) context;
+        } else {
+            Helper.wtf("Cound not load heyzap because context is not instance of activity");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
+            }
+            return;
+        }
+
+        if (id == null) {
+            id = extractIdFromExtras(serverExtras);
+            HeyzapAds.start(id, activity,HeyzapAds.DISABLE_AUTOMATIC_FETCH,this);
+        }
+
+        InterstitialAd.fetch();
+    }
+
+    private String extractIdFromExtras(Map<String, String> serverExtras) {
+        if (serverExtras.containsKey(KEY_ID)) {
+            return serverExtras.get(KEY_ID);
+        } else {
+            Helper.wtf("Failed to extract key from heyzap server extrass");
+            return null;
+        }
+    }
+
+    @Override
+    public void showInterstitial() {
+        if (InterstitialAd.isAvailable()) {
+            Helper.wtf("Showing Heyzap");
+            InterstitialAd.display(activity);
+        } else {
+            Helper.wtf("Wanted to show heyzap but wasnt avaible");
+        }
+    }
+
+    @Override
+    protected boolean usesProxy() {
+        return false;
+    }
+
+    @Override
+    protected void onInvalidate() {
+
+    }
+
+    @Override
+    public void onNetworkCallback(String s, String s1) {
+        Helper.wtf("Heyzap network callback " + s + " : " + s1);
+    }
+
+    @Override
+    public void onShow(String s) {
+        if (mInterstitialListener != null) {
+            mInterstitialListener.onInterstitialShown();
+        }
+    }
+
+    @Override
+    public void onClick(String s) {
+        if (mInterstitialListener != null) {
+            mInterstitialListener.onInterstitialClicked();
+        }
+    }
+
+    @Override
+    public void onHide(String s) {
+        if (mInterstitialListener != null) {
+            mInterstitialListener.onInterstitialDismissed();
+        }
+    }
+
+    @Override
+    public void onFailedToShow(String s) {
+        if (mInterstitialListener != null) {
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
+        }
+    }
+
+    @Override
+    public void onAvailable(String s) {
+        if (mInterstitialListener != null) {
+            mInterstitialListener.onInterstitialLoaded();
+        }
+    }
+
+    @Override
+    public void onFailedToFetch(String s) {
+        if (mInterstitialListener != null) {
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
+        }
+    }
+
+    @Override
+    public void onAudioStarted() {
+
+    }
+
+    @Override
+    public void onAudioFinished() {
+
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/UnityAdsMopubEvents.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/UnityAdsMopubEvents.java
new file mode 100644
index 00000000..5574e966
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/UnityAdsMopubEvents.java
@@ -0,0 +1,130 @@
+package com.mopub.ads.adapters;
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.mojang.base.Helper;
+import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.MoPubErrorCode;
+import com.unity3d.ads.UnityAds;
+import com.unity3d.ads.mediation.IUnityAdsExtendedListener;
+
+import java.util.Map;
+
+
+public class UnityAdsMopubEvents extends CustomEventInterstitial implements IUnityAdsExtendedListener {
+
+    private CustomEventInterstitialListener mopubListener;
+    private static boolean sInitialized = false;
+    private Activity mLauncherActivity;
+    private boolean sAdCached;
+
+
+    @Override
+    protected void loadInterstitial(Context context,
+                                    CustomEventInterstitialListener customEventInterstitialListener,
+                                    Map<String, Object> localExtras,
+                                    Map<String, String> serverExtras) {
+
+        Helper.wtf("Loading Unity Ads");
+        final String mGameId = serverExtras.get("gameId");
+
+        if(mGameId == null || mGameId.isEmpty()){
+            Helper.wtf("No game id bailing out",true);
+            mopubListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        if (context == null || !(context instanceof Activity)) {
+            mopubListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+            return;
+        }
+
+        mLauncherActivity = (Activity) context;
+        mopubListener = customEventInterstitialListener;
+
+        if (!sInitialized || !UnityAds.isInitialized()) {
+            Helper.wtf("Unity Debug");
+            Helper.runOnWorkerThread(new Runnable() {
+                @Override
+                public void run() {
+                    UnityAds.setDebugMode(true);
+                    UnityAds.initialize(mLauncherActivity, mGameId, UnityAdsMopubEvents.this, Helper.USE_UNITY_TEST_ADS);
+                }
+            });
+            UnityAds.setListener(this);
+
+            sInitialized = true;
+        } else {
+            UnityAds.setListener(this);
+
+            if (UnityAds.isReady()) {
+                mopubListener.onInterstitialLoaded();
+            } else {
+                sAdCached = false;
+            }
+        }
+    }
+
+
+    @Override
+    public void showInterstitial() {
+        if (UnityAds.isReady() && mLauncherActivity != null) {
+            Helper.wtf("Showing Unity Ads", true);
+            UnityAds.show(mLauncherActivity);
+        } else {
+            Helper.wtf("Failed to show unity ads isReady = " + UnityAds.isReady() + "activity null = " + mLauncherActivity);
+            mopubListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        }
+    }
+
+    @Override
+    protected boolean usesProxy() {
+        return false;
+    }
+
+    @Override
+    protected void onInvalidate() {
+        UnityAds.setListener(null);
+    }
+
+
+    @Override
+    public void onUnityAdsReady(String placementId) {
+        Helper.wtf("onUnityAdsReady");
+        if (!sAdCached) {
+            sAdCached = true;
+            mopubListener.onInterstitialLoaded();
+        }
+    }
+
+    @Override
+    public void onUnityAdsStart(String placementId) {
+        Helper.wtf("onUnityAdsStart");
+        mopubListener.onInterstitialShown();
+    }
+
+    @Override
+    public void onUnityAdsFinish(String placementId, UnityAds.FinishState result) {
+        Helper.wtf("onUnityAdsFinish");
+        mopubListener.onInterstitialDismissed();
+    }
+
+    @Override
+    public void onUnityAdsError(UnityAds.UnityAdsError error, String message) {
+        Helper.wtf("onUnityAdsError + "+ error +" message:"+ message);
+        mopubListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+    }
+
+    @Override
+    public void onUnityAdsClick(String placementId) {
+        Helper.wtf("onUnityAdsClick + " + placementId);
+        mopubListener.onInterstitialClicked();
+    }
+
+    @Override
+    public void onUnityAdsPlacementStateChanged(String placementId, UnityAds.PlacementState oldState, UnityAds.PlacementState newState) {
+
+    }
+
+}
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
index 55ec4bb1..26222163 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
@@ -2,6 +2,8 @@
 
 import android.content.Context;
 
+import com.mopub.ads.Proxy;
+
 import java.util.Map;
 
 /*
@@ -14,22 +16,23 @@
  * and invoke its loadInterstitial() method.
  */
 public abstract class CustomEventInterstitial implements Interstitial {
-    
+
+
     /*
-     * When the MoPub SDK receives a response indicating it should load a custom event, it will send
-     * this message to your custom event class. Your implementation of this method can either load
-     * an interstitial ad from a third-party ad network, or execute any application code.
-     * It must also notify the provided CustomEventInterstitial.Listener Object of certain lifecycle
-     * events.
-     * 
-     * The localExtras parameter is a Map containing additional custom data that is set within
-     * your application by calling MoPubInterstitial.setLocalExtras(Map<String, Object>). Note that
-     * the localExtras Map is a copy of the Map supplied to setLocalExtras().
-     * 
-     * The serverExtras parameter is a Map containing additional custom data configurable on the
-     * MoPub website that you want to associate with a given custom event request. This data may be
-     * used to pass dynamic information, such as publisher IDs, without changes in application code.
-     */
+         * When the MoPub SDK receives a response indicating it should load a custom event, it will send
+         * this message to your custom event class. Your implementation of this method can either load
+         * an interstitial ad from a third-party ad network, or execute any application code.
+         * It must also notify the provided CustomEventInterstitial.Listener Object of certain lifecycle
+         * events.
+         *
+         * The localExtras parameter is a Map containing additional custom data that is set within
+         * your application by calling MoPubInterstitial.setLocalExtras(Map<String, Object>). Note that
+         * the localExtras Map is a copy of the Map supplied to setLocalExtras().
+         *
+         * The serverExtras parameter is a Map containing additional custom data configurable on the
+         * MoPub website that you want to associate with a given custom event request. This data may be
+         * used to pass dynamic information, such as publisher IDs, without changes in application code.
+         */
     protected abstract void loadInterstitial(Context context,
             CustomEventInterstitialListener customEventInterstitialListener,
             Map<String, Object> localExtras,
@@ -38,8 +41,13 @@ protected abstract void loadInterstitial(Context context,
     /*
      * Display the interstitial ad.
      */
-    protected abstract void showInterstitial();
-    
+    public abstract void showInterstitial();
+
+    /*
+   * Uses proxy activity before displaying the ad
+   */
+    protected abstract boolean usesProxy();
+
     /*
      * Called when a Custom Event is being invalidated or destroyed. Perform any final cleanup here.
      */
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
index 73c57c5c..f882bcb1 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
@@ -5,9 +5,11 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
+import com.mopub.ads.Proxy;
 import com.mopub.common.AdReport;
 import com.mopub.common.Constants;
 import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import com.mopub.mobileads.factories.CustomEventInterstitialFactory;
@@ -34,6 +36,7 @@
     private long mBroadcastIdentifier;
     private final Handler mHandler;
     private final Runnable mTimeout;
+    private Proxy mProxy;
 
     public CustomEventInterstitialAdapter(@NonNull final MoPubInterstitial moPubInterstitial,
             @NonNull final String className,
@@ -94,6 +97,15 @@ void showInterstitial() {
             return;
         }
 
+        //We use proxy activity for some ad networks
+        if(mCustomEventInterstitial.usesProxy()){
+            if (mProxy == null) {
+                mProxy = new Proxy();
+            }
+            mProxy.startProxyActivity(mContext,mCustomEventInterstitial);
+            return;
+        }
+
         // Custom event classes can be developed by any third party and may not be tested.
         // We catch all exceptions here to prevent crashes from untested code.
         try {
@@ -115,6 +127,7 @@ void invalidate() {
                 MoPubLog.d("Invalidating a custom event interstitial threw an exception.", e);
             }
         }
+
         mCustomEventInterstitial = null;
         mContext = null;
         mServerExtras = null;
@@ -225,6 +238,15 @@ public void onInterstitialDismissed() {
         if (mCustomEventInterstitialAdapterListener != null) {
             mCustomEventInterstitialAdapterListener.onCustomEventInterstitialDismissed();
         }
+
+        if(mProxy != null) {
+            mProxy.Finish();
+        }
+    }
+
+    @VisibleForTesting
+    void setProxy(Proxy proxy){
+        mProxy = proxy;
     }
 
     @Deprecated
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
index 370b2fe0..0e03bd31 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
@@ -41,4 +41,9 @@ public void showInterstitial() {
                 mRedirectUrl, mClickthroughUrl, mOrientation,
                 mBroadcastIdentifier);
     }
+
+    @Override
+    protected boolean usesProxy() {
+        return false;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
index fe5a4a0a..b1d15f95 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
@@ -8,6 +8,7 @@
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
+import com.mojang.base.Helper;
 import com.mopub.common.AdFormat;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
@@ -54,6 +55,20 @@
         DESTROYED
     }
 
+    /**
+     * Bojo vytvorene na trakovanie aka intertitial response prisla from mopub server
+     */
+    public enum AdType {
+        UNKNOWN,
+        ADMOB,
+        FACEBOOK,
+        MOPUB_HTML,
+        MOPUB_VID,
+        MOPUB_INTER,
+        UNITY,
+        APPLOVIN
+    }
+
     @NonNull private MoPubInterstitialView mInterstitialView;
     @Nullable private CustomEventInterstitialAdapter mCustomEventInterstitialAdapter;
     @Nullable private InterstitialAdListener mInterstitialAdListener;
@@ -61,12 +76,51 @@
     @NonNull private Handler mHandler;
     @NonNull private final Runnable mAdExpiration;
     @NonNull private volatile InterstitialState mCurrentInterstitialState;
+    @NonNull private AdType mAdType = AdType.UNKNOWN;
+
+    public AdType getAdType() {
+        return mAdType;
+    }
+
+    private void setAdType(String className) {
+        switch (className) {
+            case ("com.mopub.mobileads.HtmlInterstitial"):
+                mAdType = AdType.MOPUB_HTML;
+                break;
+            case ("com.mopub.mobileads.VastVideoInterstitial"):
+                mAdType = AdType.MOPUB_VID;
+                break;
+            case ("com.mopub.mraid.MraidInterstitial"):
+                mAdType = AdType.MOPUB_INTER;
+                break;
+            case ("com.mopub.ads.adapters.UnityAdsMopubEvents"):
+                mAdType = AdType.UNITY;
+                break;
+            case ("com.mopub.ads.adapters.ApplovinInterstitial"):
+                mAdType = AdType.APPLOVIN;
+                break;
+            case ("com.mopub.ads.adapters.GooglePlayServicesInterstitial"):
+                mAdType = AdType.ADMOB;
+                break;
+            case ("com.mopub.ads.adapters.FacebookInterstitial"):
+                mAdType = AdType.FACEBOOK;
+                break;
+            default:
+                mAdType = AdType.UNKNOWN;
+                break;
+        }
+        Helper.wtf("adType set to: " + className);
+    }
 
     public interface InterstitialAdListener {
         void onInterstitialLoaded(MoPubInterstitial interstitial);
+
         void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode);
+
         void onInterstitialShown(MoPubInterstitial interstitial);
+
         void onInterstitialClicked(MoPubInterstitial interstitial);
+
         void onInterstitialDismissed(MoPubInterstitial interstitial);
     }
 
@@ -125,7 +179,7 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
          */
         switch (startState) {
             case IDLE:
-                switch(endState) {
+                switch (endState) {
                     case LOADING:
                         // Going from IDLE to LOADING is the usual load case
                         invalidateInterstitialAdapter();
@@ -211,7 +265,7 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
                         return false;
                 }
             case SHOWING:
-                switch(endState) {
+                switch (endState) {
                     case IDLE:
                         if (force) {
                             MoPubLog.d("Cannot force refresh while showing an interstitial.");
@@ -383,7 +437,6 @@ public void onCustomEventInterstitialShown() {
         if (isDestroyed()) {
             return;
         }
-
         mInterstitialView.trackImpression();
 
         if (mInterstitialAdListener != null) {
@@ -415,6 +468,8 @@ public void onCustomEventInterstitialDismissed() {
         if (mInterstitialAdListener != null) {
             mInterstitialAdListener.onInterstitialDismissed(this);
         }
+
+        setAdType("unknown");
     }
 
     ////////////////////////////////////////////////////////////////////////////////////////////////
@@ -460,6 +515,8 @@ protected void loadCustomEvent(String customEventClassName, Map<String, String>
                     mAdViewController.getAdReport());
             mCustomEventInterstitialAdapter.setAdapterListener(MoPubInterstitial.this);
             mCustomEventInterstitialAdapter.loadInterstitial();
+
+            setAdType(customEventClassName);
         }
 
         protected void trackImpression() {
@@ -504,7 +561,7 @@ InterstitialState getCurrentInterstitialState() {
     @VisibleForTesting
     @Deprecated
     void setCustomEventInterstitialAdapter(@NonNull final CustomEventInterstitialAdapter
-            customEventInterstitialAdapter) {
+                                                   customEventInterstitialAdapter) {
         mCustomEventInterstitialAdapter = customEventInterstitialAdapter;
     }
 }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
index 89fcd4ec..236797f4 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
@@ -14,7 +14,7 @@
 
 import java.util.Map;
 
-class VastVideoInterstitial extends ResponseBodyInterstitial implements VastManager.VastManagerListener {
+public class VastVideoInterstitial extends ResponseBodyInterstitial implements VastManager.VastManagerListener {
     private CustomEventInterstitialListener mCustomEventInterstitialListener;
     private String mVastResponse;
     private VastManager mVastManager;
@@ -66,6 +66,11 @@ public void showInterstitial() {
         MraidVideoPlayerActivity.startVast(mContext, mVastVideoConfig, mBroadcastIdentifier);
     }
 
+    @Override
+    protected boolean usesProxy() {
+        return false;
+    }
+
     @Override
     public void onInvalidate() {
         if (mVastManager != null) {
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
index 34ecd599..93a49e4f 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
@@ -30,4 +30,9 @@ protected void preRenderHtml(@NonNull CustomEventInterstitialListener
     public void showInterstitial() {
         MraidActivity.start(mContext, mAdReport, mHtmlData, mBroadcastIdentifier);
     }
+
+    @Override
+    protected boolean usesProxy() {
+        return false;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-native-video/build.gradle b/mopub-sdk/mopub-sdk-native-video/build.gradle
index 6e83c328..84729147 100644
--- a/mopub-sdk/mopub-sdk-native-video/build.gradle
+++ b/mopub-sdk/mopub-sdk-native-video/build.gradle
@@ -1,7 +1,7 @@
 apply from: '../shared-build.gradle'
 
 dependencies {
-    compile project(':mopub-sdk:mopub-sdk-native-static')
+    compile project(':mopub-sdk-native-static')
     compile 'com.google.android.exoplayer:exoplayer:r2.4.4'
 }
 
@@ -9,4 +9,4 @@ project.description = 'MoPub Android SDK - Native Video'
 project.ext.displayName = 'MoPub Android SDK - Native Video'
 project.ext.projectName = 'mopub-sdk-native-video'
 project.ext.uploadName = 'mopub-android-sdk-native-video'
-apply from: '../publisher.gradle'
+//apply from: '../publisher.gradle'
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle b/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle
index f9ad623a..5ac6ef46 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle
@@ -1,11 +1,11 @@
 apply from: '../shared-build.gradle'
 
 dependencies {
-    compile project(':mopub-sdk:mopub-sdk-interstitial')
+    compile project(':mopub-sdk-interstitial')
 }
 
 project.description = 'MoPub Android SDK - Rewarded Video'
 project.ext.displayName = 'MoPub Android SDK - Rewarded Video'
 project.ext.projectName = 'mopub-sdk-rewardedvideo'
 project.ext.uploadName = 'mopub-android-sdk-rewardedvideo'
-apply from: '../publisher.gradle'
+//apply from: '../publisher.gradle'
diff --git a/mopub-sdk/proguard.txt b/mopub-sdk/proguard.txt
index 21b8b752..75ee908f 100644
--- a/mopub-sdk/proguard.txt
+++ b/mopub-sdk/proguard.txt
@@ -38,6 +38,7 @@
 }
 
 -keepnames @com.google.android.gms.common.annotation.KeepName class *
+-dontwarn com.google.android.gms.**
 -keepclassmembernames class * {
     @com.google.android.gms.common.annotation.KeepName *;
 }
@@ -45,3 +46,10 @@
 -keepnames class * implements android.os.Parcelable {
     public static final ** CREATOR;
 }
+
+# Mopub-Filter out warnings that refer to legacy Code.
+-dontwarn org.apache.http.**
+-dontwarn com.mopub.volley.toolbox.**
+
+# Mopub-Exoplayer api 22
+-dontwarn com.google.android.exoplayer.**
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java b/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
index 28019855..bbf19d1e 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
@@ -82,7 +82,7 @@ public void initializeCache_withValidContext_shouldCreateNewCachesIdempotently()
     @Test
     public void getDiskLruCacheDirectory_shouldReturnValidCacheDirectory() throws Exception {
         File file = CacheService.getDiskCacheDirectory(context);
-        String expectedPath = context.getCacheDir().toString() + "/mopub-cache";
+        String expectedPath = context.getCacheDir().toString() + "\\mopub-cache";
         assertThat(file.getAbsolutePath()).isEqualTo(expectedPath);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
index 2cd5ee27..cdec5daa 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
@@ -21,6 +21,7 @@
 import com.mopub.volley.NetworkResponse;
 import com.mopub.volley.NoConnectionError;
 import com.mopub.volley.Request;
+import com.mopub.volley.ServerError;
 import com.mopub.volley.VolleyError;
 
 import org.junit.After;
@@ -584,6 +585,18 @@ public void onAdLoadError_withInvalidServerResponse_shouldReturnErrorCodeServerE
         verify(mockMoPubView, times(HTML_ERROR_CODES.length)).adFailed(MoPubErrorCode.SERVER_ERROR);
     }
 
+    @Test
+    public void onAdLoadError_withInvalidServerResponse_shouldReturnErrorCodeServerError_shouldCallOnLoadSuccess_withFaioverResponse() {
+        final AdResponse failoverResponse = subject.getFailoverResponse();
+        final NetworkResponse errorNetworkResponse = new NetworkResponse(400, null, null, true, 0);
+        final VolleyError volleyError = new VolleyError(errorNetworkResponse);
+
+        subject.onAdLoadError(volleyError);
+
+        verify(mockMoPubView).loadCustomEvent(failoverResponse.getCustomEventClassName(), failoverResponse.getServerExtras());
+    }
+
+
     @Test
     public void loadCustomEvent_shouldCallMoPubViewLoadCustomEvent() throws Exception {
         Map serverExtras = mock(Map.class);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
index e5934618..da053b88 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.location.Location;
 
+import com.mopub.ads.Proxy;
 import com.mopub.common.AdReport;
 import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
@@ -11,6 +12,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Matchers;
 import org.mockito.Mock;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
@@ -29,12 +31,14 @@
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyObject;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
@@ -245,6 +249,18 @@ public void showInterstitial_shouldCallCustomEventInterstitialShowInterstitial()
         verify(interstitial).showInterstitial();
     }
 
+    @Test
+    public void showInterstitial_shouldStartProxyActivity_whenCustomEventInterstitialUsesProxy() throws Exception {
+        when(interstitial.usesProxy()).thenReturn(true);
+        Proxy proxyMock = mock(Proxy.class);
+        subject.setProxy(proxyMock);
+
+
+        subject.showInterstitial();
+
+        verify(proxyMock).startProxyActivity(null,interstitial);
+    }
+
     @Test
     public void onInterstitialLoaded_shouldSignalAdapterListener() throws Exception {
         subject.onInterstitialLoaded();
