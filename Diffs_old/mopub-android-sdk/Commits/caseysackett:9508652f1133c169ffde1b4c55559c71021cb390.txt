diff --git a/mopub-sdk/.classpath b/mopub-sdk/.classpath
index a4dec28b..4ee50e98 100644
--- a/mopub-sdk/.classpath
+++ b/mopub-sdk/.classpath
@@ -3,7 +3,14 @@
 	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="src" path="src/main/java"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry kind="lib" path="libs/android-support-v4.jar"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
+	<classpathentry kind="lib" path="libs/amazon-ads-5.1.14.jar"/>
+	<classpathentry kind="lib" path="libs/MMSDK.jar"/>
+	<classpathentry kind="lib" path="libs/InMobiAdNetwork-3.7.1.jar"/>
+	<classpathentry kind="lib" path="libs/InMobiCommons-3.7.1.jar"/>
+	<classpathentry kind="lib" path="libs/greystripe-android-sdk-2.3.0.jar"/>
+	<classpathentry kind="lib" path="libs/GoogleAdMobAdsSdk-6.4.1.jar"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/mopub-sdk/libs/GoogleAdMobAdsSdk-6.4.1.jar b/mopub-sdk/libs/GoogleAdMobAdsSdk-6.4.1.jar
new file mode 100644
index 00000000..de667541
Binary files /dev/null and b/mopub-sdk/libs/GoogleAdMobAdsSdk-6.4.1.jar differ
diff --git a/mopub-sdk/libs/InMobiAdNetwork-3.7.1.jar b/mopub-sdk/libs/InMobiAdNetwork-3.7.1.jar
new file mode 100644
index 00000000..935ad59d
Binary files /dev/null and b/mopub-sdk/libs/InMobiAdNetwork-3.7.1.jar differ
diff --git a/mopub-sdk/libs/InMobiCommons-3.7.1.jar b/mopub-sdk/libs/InMobiCommons-3.7.1.jar
new file mode 100644
index 00000000..beace017
Binary files /dev/null and b/mopub-sdk/libs/InMobiCommons-3.7.1.jar differ
diff --git a/mopub-sdk/libs/MMSDK.jar b/mopub-sdk/libs/MMSDK.jar
new file mode 100644
index 00000000..fa2cf8d2
Binary files /dev/null and b/mopub-sdk/libs/MMSDK.jar differ
diff --git a/mopub-sdk/libs/amazon-ads-5.1.14.jar b/mopub-sdk/libs/amazon-ads-5.1.14.jar
new file mode 100644
index 00000000..64cbac4a
Binary files /dev/null and b/mopub-sdk/libs/amazon-ads-5.1.14.jar differ
diff --git a/mopub-sdk/libs/android-support-v4.jar b/mopub-sdk/libs/android-support-v4.jar
index 4846ef98..cf12d283 100644
Binary files a/mopub-sdk/libs/android-support-v4.jar and b/mopub-sdk/libs/android-support-v4.jar differ
diff --git a/mopub-sdk/libs/greystripe-android-sdk-2.3.0.jar b/mopub-sdk/libs/greystripe-android-sdk-2.3.0.jar
new file mode 100644
index 00000000..7bb5a12f
Binary files /dev/null and b/mopub-sdk/libs/greystripe-android-sdk-2.3.0.jar differ
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AmazonBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AmazonBanner.java
new file mode 100644
index 00000000..1743eb50
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AmazonBanner.java
@@ -0,0 +1,123 @@
+package com.mopub.mobileads;
+
+import java.util.Map;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.util.Log;
+
+import com.amazon.device.ads.AdError;
+import com.amazon.device.ads.AdLayout;
+import com.amazon.device.ads.AdListener;
+import com.amazon.device.ads.AdProperties;
+import com.amazon.device.ads.AdRegistration;
+import com.amazon.device.ads.AdSize;
+import com.amazon.device.ads.AdTargetingOptions;
+
+/*
+ * Tested with Amazon SDK 4.0.8
+ */
+public class AmazonBanner extends CustomEventBanner implements AdListener {
+    private CustomEventBannerListener mBannerListener;
+    private AdLayout mAmazonAdView;
+    
+    /*
+     * Abstract methods from CustomEventBanner
+     */
+    @Override
+    public void loadBanner(Context context, CustomEventBannerListener bannerListener,
+            Map<String, Object> localExtras, Map<String, String> serverExtras) {
+        mBannerListener = bannerListener;
+        
+        Activity activity = null;
+        if (context instanceof Activity) {
+            activity = (Activity) context;
+        } else {
+            // You may also pass in an Activity Context in the localExtras map and retrieve it here.
+        	activity = (Activity)localExtras.get("activity");
+        }
+        
+        if (activity == null) {
+        	if(mBannerListener != null) {
+        		mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+        	}
+            return;
+        }
+        
+        int widthPixels = context.getResources().getDisplayMetrics().widthPixels;
+        AdSize adSize = AdSize.SIZE_320x50;
+        if(widthPixels == 600) adSize = AdSize.SIZE_600x90; 	// Kindle Fire
+        if(widthPixels == 800) adSize = AdSize.SIZE_600x90; 	// Kindle Fire HD 7"
+        if(widthPixels == 728) adSize = AdSize.SIZE_728x90;		// Only if it matches exactly, since 728 scrolls on 800px wide Kindle Fire HD 7"
+        if(widthPixels >= 1024) adSize = AdSize.SIZE_1024x50; 	// Kindle Fire HD
+        
+        String appId = serverExtras.get("app_id");
+        if(appId == null) {
+        	try {
+	        	ApplicationInfo ai = context.getPackageManager().getApplicationInfo(context.getPackageName(),PackageManager.GET_META_DATA);
+	            appId = ai.metaData.get("amazon_ads_app_id").toString();
+        	} catch(Throwable t) {
+        		Log.e("MoPub", "Could not find amazon_ads_app_id in meta-data in Android manifest");
+        	}
+        }
+        if(appId == null) {
+            Log.d("MoPub", "Amazon banner ad app_id is missing.");
+        	if(mBannerListener != null) {
+        		mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+        	}
+            return;
+        }
+        
+        AdRegistration.setAppKey(appId);
+        //AdRegistration.enableTesting(context, true);
+        //AdRegistration.enableLogging(context, true);
+        
+        mAmazonAdView = new AdLayout(activity, adSize);
+        mAmazonAdView.setListener(this);
+        mAmazonAdView.loadAd(new AdTargetingOptions()); // async task to retrieve an ad    
+    }
+
+    @Override
+    public void onInvalidate() {
+    	if(mAmazonAdView != null) {
+    		mAmazonAdView.setListener(null);
+    	}
+    }
+
+	@Override
+	public void onAdCollapsed(AdLayout arg0) {
+		Log.d("MoPub", "Amazon banner ad modal dismissed.");
+	}
+
+	@Override
+	public void onAdExpanded(AdLayout arg0) {
+		Log.d("MoPub", "Amazon banner ad clicked.");
+	  	if(mBannerListener != null) {
+	  		mBannerListener.onBannerExpanded();
+	  	}
+	}
+
+	@Override
+	public void onAdFailedToLoad(AdLayout arg0, AdError arg1) {
+		Log.d("MoPub", "Amazon banner ad failed to load.");
+	  	if(mBannerListener != null) {
+	  		mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
+	  	}
+	}
+
+	@Override
+	public void onAdLoaded(AdLayout arg0, AdProperties arg1) {
+		if (mAmazonAdView != null && mBannerListener != null) {
+			Log.d("MoPub", "Amazon banner ad loaded successfully. Showing ad...");
+			mBannerListener.onBannerLoaded(mAmazonAdView);
+		} else if (mBannerListener != null) {
+			mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+		}
+	}
+
+	// NOTE: Amazon does not provide an event about leaving the application
+	// If it did, we would call the following in it:
+	//	mBannerListener.onLeaveApplication();
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
index 35076556..b3803f2e 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
@@ -68,6 +68,9 @@ void loadAd() {
         if (isInvalidated() || mCustomEventBanner == null) {
             return;
         }
+        if(mMoPubView != null) {
+        	mLocalExtras.put("activity", mMoPubView.getActivity());
+        }
         mCustomEventBanner.loadBanner(mContext, this, mLocalExtras, mServerExtras);
 
         if (getTimeoutDelayMilliseconds() > 0) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/GoogleAdMobBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/GoogleAdMobBanner.java
new file mode 100644
index 00000000..c3b3bbdc
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/GoogleAdMobBanner.java
@@ -0,0 +1,189 @@
+/*
+ * Copyright (c) 2010, MoPub Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * * Redistributions of source code must retain the above copyright
+ *   notice, this list of conditions and the following disclaimer.
+ *
+ * * Redistributions in binary form must reproduce the above copyright
+ *   notice, this list of conditions and the following disclaimer in the
+ *   documentation and/or other materials provided with the distribution.
+ *
+ * * Neither the name of 'MoPub Inc.' nor the names of its contributors
+ *   may be used to endorse or promote products derived from this software
+ *   without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.location.Location;
+import android.util.Log;
+import com.google.ads.*;
+import com.google.ads.AdRequest.ErrorCode;
+import com.mopub.mobileads.util.Views;
+
+import java.util.Map;
+
+import static com.google.ads.AdSize.BANNER;
+import static com.google.ads.AdSize.IAB_BANNER;
+import static com.google.ads.AdSize.IAB_LEADERBOARD;
+import static com.google.ads.AdSize.IAB_MRECT;
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+
+/*
+ * Compatible with version 6.4.1 of the Google AdMob Ads SDK.
+ */
+
+class GoogleAdMobBanner extends CustomEventBanner implements AdListener {
+    public static final String AD_UNIT_ID_KEY = "adUnitID";
+    public static final String AD_WIDTH_KEY = "adWidth";
+    public static final String AD_HEIGHT_KEY = "adHeight";
+    public static final String LOCATION_KEY = "location";
+
+    private AdView mAdMobView;
+    private CustomEventBannerListener mBannerListener;
+
+    @Override
+    protected void loadBanner(Context context,
+                              CustomEventBannerListener customEventBannerListener,
+                              Map<String, Object> localExtras,
+                              Map<String, String> serverExtras) {
+        mBannerListener = customEventBannerListener;
+
+        String adUnitId;
+        int adWidth;
+        int adHeight;
+
+        if (!(context instanceof Activity)) {
+            mBannerListener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        if (extrasAreValid(serverExtras)) {
+            adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
+            adWidth = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
+            adHeight = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
+        } else {
+            mBannerListener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        AdSize adSize = calculateAdSize(adWidth, adHeight);
+        if (adSize == null) {
+            Log.d("MoPub", "Unsupported AdMob ad size: " + adWidth + "x" + adHeight);
+            mBannerListener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mAdMobView = new AdView((Activity) context, adSize, adUnitId);
+        mAdMobView.setAdListener(this);
+
+        AdRequest request = new AdRequest();
+        Location location = extractLocation(localExtras);
+        if (location != null) request.setLocation(location);
+
+        mAdMobView.loadAd(request);
+    }
+
+    @Override
+    protected void onInvalidate() {
+    	if(mAdMobView != null) {
+    		mAdMobView.setAdListener(null);
+    		Views.removeFromParent(mAdMobView);
+    		mAdMobView.destroy();
+    	}
+    }
+
+    private Location extractLocation(Map<String, Object> localExtras) {
+        Object location = localExtras.get(LOCATION_KEY);
+        if (location instanceof Location) {
+            return (Location) location;
+        }
+        return null;
+    }
+
+    private AdSize calculateAdSize(int width, int height) {
+        // Use the smallest AdMob AdSize that will properly contain the adView
+        if (width <= BANNER.getWidth() && height <= BANNER.getHeight()) {
+            return BANNER;
+        } else if (width <= IAB_MRECT.getWidth() && height <= IAB_MRECT.getHeight()) {
+            return IAB_MRECT;
+        } else if (width <= IAB_BANNER.getWidth() && height <= IAB_BANNER.getHeight()) {
+            return IAB_BANNER;
+        } else if (width <= IAB_LEADERBOARD.getWidth() && height <= IAB_LEADERBOARD.getHeight()) {
+            return IAB_LEADERBOARD;
+        } else {
+            return null;
+        }
+    }
+
+    private boolean extrasAreValid(Map<String, String> serverExtras) {
+        try {
+            Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
+            Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
+        } catch (NumberFormatException e) {
+            return false;
+        }
+
+        return serverExtras.containsKey(AD_UNIT_ID_KEY);
+    }
+
+    @Deprecated // for testing
+    AdView getAdMobView() {
+        return mAdMobView;
+    }
+
+    /**
+     * AdMob AdListener implementation
+     */
+    @Override
+    public void onFailedToReceiveAd(Ad ad, ErrorCode error) {
+        Log.d("MoPub", "Google AdMob banner ad failed to load.");
+        if(mBannerListener != null) {
+        	mBannerListener.onBannerFailed(NETWORK_NO_FILL);
+        }
+    }
+
+    @Override
+    public void onPresentScreen(Ad ad) {
+        Log.d("MoPub", "Google AdMob banner ad clicked.");
+        if(mBannerListener != null) {
+        	mBannerListener.onBannerClicked();
+        }
+    }
+
+    @Override
+    public void onReceiveAd(Ad ad) {
+        Log.d("MoPub", "Google AdMob banner ad loaded successfully. Showing ad...");
+        if(mBannerListener != null) {
+        	mBannerListener.onBannerLoaded(mAdMobView);
+        }
+    }
+
+    @Override
+    public void onLeaveApplication(Ad ad) {
+    }
+
+    @Override
+    public void onDismissScreen(Ad ad) {
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/GoogleAdMobInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/GoogleAdMobInterstitial.java
new file mode 100644
index 00000000..d728bf64
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/GoogleAdMobInterstitial.java
@@ -0,0 +1,170 @@
+/*
+ * Copyright (c) 2011, MoPub Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * * Redistributions of source code must retain the above copyright
+ *   notice, this list of conditions and the following disclaimer.
+ *
+ * * Redistributions in binary form must reproduce the above copyright
+ *   notice, this list of conditions and the following disclaimer in the
+ *   documentation and/or other materials provided with the distribution.
+ *
+ * * Neither the name of 'MoPub Inc.' nor the names of its contributors
+ *   may be used to endorse or promote products derived from this software
+ *   without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.location.Location;
+import android.util.Log;
+import com.google.ads.Ad;
+import com.google.ads.AdListener;
+import com.google.ads.AdRequest;
+import com.google.ads.AdRequest.ErrorCode;
+import com.google.ads.InterstitialAd;
+
+import java.util.Map;
+
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+
+/*
+ * Compatible with version 6.4.1 of the Google AdMob Ads SDK.
+ */
+
+class GoogleAdMobInterstitial extends CustomEventInterstitial implements AdListener {
+    public static final String AD_UNIT_ID_KEY = "adUnitID";
+    public static final String LOCATION_KEY = "location";
+
+    private InterstitialAd mInterstitialAd;
+    private boolean mHasAlreadyRegisteredClick;
+    private CustomEventInterstitialListener mInterstitialListener;
+
+    @Override
+    protected void loadInterstitial(Context context,
+                                    CustomEventInterstitialListener customEventInterstitialListener,
+                                    Map<String, Object> localExtras,
+                                    Map<String, String> serverExtras) {
+        mInterstitialListener = customEventInterstitialListener;
+
+        if (!(context instanceof Activity)) {
+            mInterstitialListener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        String pubId;
+        if (extrasAreValid(serverExtras)) {
+            pubId = serverExtras.get(AD_UNIT_ID_KEY);
+        } else {
+            mInterstitialListener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mInterstitialAd = new InterstitialAd((Activity) context, pubId);
+        mInterstitialAd.setAdListener(this);
+
+        AdRequest adRequest = new AdRequest();
+        Location location = extractLocation(localExtras);
+        if (location != null) adRequest.setLocation(location);
+        mInterstitialAd.loadAd(adRequest);
+    }
+
+    @Override
+    protected void showInterstitial() {
+        if (mInterstitialAd.isReady()) {
+            mInterstitialAd.show();
+        } else {
+            Log.d("MoPub", "Tried to show a Google AdMob interstitial ad before it finished loading. Please try again.");
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mInterstitialAd != null) {
+            mInterstitialAd.setAdListener(null);
+        }
+    }
+
+    private Location extractLocation(Map<String, Object> localExtras) {
+        Object location = localExtras.get(LOCATION_KEY);
+        if (location instanceof Location) {
+            return (Location) location;
+        }
+        return null;
+    }
+
+    private boolean extrasAreValid(Map<String, String> serverExtras) {
+        return serverExtras.containsKey(AD_UNIT_ID_KEY);
+    }
+
+    @Deprecated // for testing
+    InterstitialAd getAdMobInterstitial() {
+        return mInterstitialAd;
+    }
+
+    /*
+     * AdMob AdListener implementation
+     */
+
+    @Override
+    public void onDismissScreen(Ad ad) {
+        Log.d("MoPub", "Google AdMob interstitial ad dismissed.");
+        if(mInterstitialListener != null) {
+        	mInterstitialListener.onInterstitialDismissed();
+        }
+    }
+
+    @Override
+    public void onFailedToReceiveAd(Ad ad, ErrorCode error) {
+        Log.d("MoPub", "Google AdMob interstitial ad failed to load.");
+        if(mInterstitialListener != null) {
+        	mInterstitialListener.onInterstitialFailed(NETWORK_NO_FILL);
+        }
+    }
+
+    @Override
+    public void onLeaveApplication(Ad ad) {
+        if (!mHasAlreadyRegisteredClick) {
+            Log.d("MoPub", "Google AdMob interstitial ad clicked.");
+            mHasAlreadyRegisteredClick = true;
+            if(mInterstitialListener != null) {
+            	mInterstitialListener.onInterstitialClicked();
+            }
+        }
+    }
+
+    @Override
+    public void onPresentScreen(Ad ad) {
+        Log.d("MoPub", "Showing Google AdMob interstitial ad.");
+        if(mInterstitialListener != null) {
+        	mInterstitialListener.onInterstitialShown();
+        }
+    }
+
+    @Override
+    public void onReceiveAd(Ad ad) {
+        Log.d("MoPub", "Google AdMob interstitial ad loaded successfully.");
+        if(mInterstitialListener != null) {
+        	mInterstitialListener.onInterstitialLoaded();
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/GreystripeBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/GreystripeBanner.java
new file mode 100644
index 00000000..c2117ef3
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/GreystripeBanner.java
@@ -0,0 +1,96 @@
+package com.mopub.mobileads;
+
+import java.util.Map;
+
+import android.content.Context;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.util.Log;
+
+import com.greystripe.sdk.GSAd;
+import com.greystripe.sdk.GSAdErrorCode;
+import com.greystripe.sdk.GSAdListener;
+import com.greystripe.sdk.GSMobileBannerAdView;
+import com.mopub.mobileads.CustomEventBanner;
+import com.mopub.mobileads.MoPubErrorCode;
+
+/*
+ * Tested with Greystripe SDK 2.3.0.
+ */
+class GreystripeBanner extends CustomEventBanner implements GSAdListener {
+    private CustomEventBannerListener mBannerListener;
+    private GSMobileBannerAdView mGreystripeAd;
+
+    /*
+     * Abstract methods from CustomEventBanner
+     */
+    @Override
+    protected void loadBanner(Context context, CustomEventBannerListener bannerListener,
+                              Map<String, Object> localExtras, Map<String, String> serverExtras) {
+        mBannerListener = bannerListener;
+
+        String appId = serverExtras.get("app_id");
+        if(appId == null) {
+        	try {
+	        	ApplicationInfo ai = context.getPackageManager().getApplicationInfo(context.getPackageName(),PackageManager.GET_META_DATA);
+	            appId = ai.metaData.get("greystripe_ads_app_id").toString();
+        	} catch(Throwable t) {
+        		Log.e("MoPub", "Could not find greystripe_ads_app_id in meta-data in Android manifest");
+        	}
+        }
+        if(appId == null) {
+            Log.d("MoPub", "Greystripe banner ad app_id is missing.");
+            if(mBannerListener != null) {
+            	mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            }
+            return;
+        }
+        mGreystripeAd = new GSMobileBannerAdView(context, appId);
+        mGreystripeAd.addListener(this);
+
+        mGreystripeAd.refresh();
+    }
+
+    @Override
+    protected void onInvalidate() {
+        mGreystripeAd.removeListener(this);
+    }
+
+    /*
+     * GSAdListener implementation
+     */
+    @Override
+    public void onAdClickthrough(GSAd greystripeAd) {
+        Log.d("MoPub", "Greystripe banner ad clicked.");
+        mBannerListener.onBannerClicked();
+    }
+
+    @Override
+    public void onAdDismissal(GSAd greystripeAd) {
+        Log.d("MoPub", "Greystripe banner ad modal dismissed.");
+    }
+
+    @Override
+    public void onFailedToFetchAd(GSAd greystripeAd, GSAdErrorCode errorCode) {
+        Log.d("MoPub", "Greystripe banner ad failed to load.");
+        mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
+    }
+
+    @Override
+    public void onFetchedAd(GSAd greystripeAd) {
+        if (mGreystripeAd != null & mGreystripeAd.isAdReady()) {
+            Log.d("MoPub", "Greystripe banner ad loaded successfully. Showing ad...");
+            mBannerListener.onBannerLoaded(mGreystripeAd);
+        } else {
+            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+        }
+    }
+
+    @Override
+    public void onAdCollapse(GSAd greystripeAd) {
+    }
+
+    @Override
+    public void onAdExpansion(GSAd greystripeAd) {
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/GreystripeInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/GreystripeInterstitial.java
new file mode 100644
index 00000000..a9d1052d
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/GreystripeInterstitial.java
@@ -0,0 +1,117 @@
+package com.mopub.mobileads;
+
+import java.util.Map;
+
+import android.content.Context;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.util.Log;
+
+import com.greystripe.sdk.GSAd;
+import com.greystripe.sdk.GSAdErrorCode;
+import com.greystripe.sdk.GSAdListener;
+import com.greystripe.sdk.GSFullscreenAd;
+import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.MoPubErrorCode;
+
+/*
+ * Tested with Greystripe SDK 2.3.0.
+ */
+class GreystripeInterstitial extends CustomEventInterstitial implements GSAdListener {
+    private CustomEventInterstitialListener mInterstitialListener;
+    private GSFullscreenAd mGreystripeAd;
+    
+    /*
+     * Abstract methods from CustomEventInterstitial
+     */
+    @Override
+    protected void loadInterstitial(Context context, CustomEventInterstitialListener interstitialListener,
+                                    Map<String, Object> localExtras, Map<String, String> serverExtras) {
+        mInterstitialListener = interstitialListener;
+
+        String appId = serverExtras.get("app_id");
+        if(appId == null) {
+        	try {
+	        	ApplicationInfo ai = context.getPackageManager().getApplicationInfo(context.getPackageName(),PackageManager.GET_META_DATA);
+	            appId = ai.metaData.get("greystripe_interstitial_ads_app_id").toString();
+        	} catch(Throwable t) {
+        		Log.e("MoPub", "Could not find greystripe_interstitial_ads_app_id in meta-data in Android manifest");
+        	}
+        }
+        if(appId == null) {
+            Log.d("MoPub", "Greystripe interstitial ad app_id is missing.");
+            if(mInterstitialListener != null) {
+            	mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            }
+            return;
+        }
+        
+        mGreystripeAd = new GSFullscreenAd(context, appId);
+        mGreystripeAd.addListener(this);
+        
+        mGreystripeAd.fetch();
+    }
+
+    @Override
+    protected void showInterstitial() {
+        if (!mGreystripeAd.isAdReady()) {
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+            return;
+        }
+        
+        Log.d("MoPub", "Showing Greystripe interstitial ad.");
+        mGreystripeAd.display();
+        mInterstitialListener.onInterstitialShown();
+    }
+    
+    @Override
+    protected void onInvalidate() {
+        mGreystripeAd.removeListener(this);
+    }
+
+    /*
+     * GSAdListener implementation
+     */
+    @Override
+    public void onAdClickthrough(GSAd greystripeAd) {
+        Log.d("MoPub", "Greystripe interstitial ad clicked.");
+        mInterstitialListener.onInterstitialClicked();
+
+        /*
+         * XXX: When a Greystripe interstitial is dismissed as a result of a user click, the
+         * onAdDismissal callback does not get fired. This call ensures that the custom event
+         * listener is informed of all dismissals.
+         */
+        mInterstitialListener.onInterstitialDismissed();
+    }
+
+    @Override
+    public void onAdDismissal(GSAd greystripeAd) {
+        Log.d("MoPub", "Greystripe interstitial ad dismissed.");
+        mInterstitialListener.onInterstitialDismissed();
+    }
+
+    @Override
+    public void onFailedToFetchAd(GSAd greystripeAd, GSAdErrorCode errorCode) {
+        Log.d("MoPub", "Greystripe interstitial ad failed to load.");
+        mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+    }
+
+    @Override
+    public void onFetchedAd(GSAd greystripeAd) {
+        if (mGreystripeAd != null && mGreystripeAd.isAdReady()) {
+            Log.d("MoPub", "Greysripe interstitial ad loaded successfully.");
+            mInterstitialListener.onInterstitialLoaded();
+        } else {
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+        }
+    }
+
+    @Override
+    public void onAdCollapse(GSAd greystripeAd) {
+    }
+
+    @Override
+    public void onAdExpansion(GSAd greystripeAd) {
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HTML5AdView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HTML5AdView.java
new file mode 100644
index 00000000..a564b8fe
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HTML5AdView.java
@@ -0,0 +1,149 @@
+package com.mopub.mobileads;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.media.MediaPlayer;
+import android.media.MediaPlayer.OnCompletionListener;
+import android.media.MediaPlayer.OnErrorListener;
+import android.os.Build;
+import android.util.Log;
+import android.view.Gravity;
+import android.view.View;
+import android.webkit.WebChromeClient;
+import android.webkit.WebChromeClient.CustomViewCallback;
+import android.widget.*;
+import com.mopub.mobileads.util.Dips;
+
+import static android.util.TypedValue.COMPLEX_UNIT_SP;
+import static android.view.View.GONE;
+import static android.view.View.VISIBLE;
+import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
+import static com.mopub.mobileads.resource.Drawables.DEFAULT_VIDEO_POSTER;
+
+@Deprecated
+public class HTML5AdView extends AdViewController {
+
+    private FrameLayout mCustomViewContainer;
+    private View mCustomView;
+    private CustomViewCallback mCustomViewCallback;
+    private View mVideoProgressView;
+
+    static final FrameLayout.LayoutParams COVER_SCREEN_GRAVITY_CENTER =
+            new FrameLayout.LayoutParams(
+                    FrameLayout.LayoutParams.FILL_PARENT,
+                    FrameLayout.LayoutParams.FILL_PARENT,
+                    Gravity.CENTER);
+
+    public HTML5AdView(Context context, MoPubView view) {
+        super(context, view);
+
+        int sdkVersion = (new Integer(Build.VERSION.SDK)).intValue();
+        if (sdkVersion > 7) {
+            getAdWebView().setWebChromeClient(new HTML5WebChromeClient());
+        }
+
+        mCustomViewContainer = new FrameLayout(context);
+        mCustomViewContainer.setVisibility(GONE);
+        mCustomViewContainer.setLayoutParams(COVER_SCREEN_GRAVITY_CENTER);
+    }
+
+    private class HTML5WebChromeClient extends WebChromeClient implements OnCompletionListener,
+            OnErrorListener {
+
+        @TargetApi(7) // equivalent to Build.VERSION_CODES.ECLAIR_MR1
+        @Override
+        public void onShowCustomView(View view, CustomViewCallback callback) {
+            super.onShowCustomView(view, callback);
+
+            getAdWebView().setVisibility(GONE);
+
+            // If a custom view already exists, don't show another one.
+            if (mCustomView != null) {
+                callback.onCustomViewHidden();
+                return;
+            }
+
+            mCustomViewContainer.addView(view, COVER_SCREEN_GRAVITY_CENTER);
+            mCustomView = view;
+            mCustomViewCallback = callback;
+
+            // Display the custom view in the MoPubView's hierarchy.
+            getMoPubView().addView(mCustomViewContainer);
+            mCustomViewContainer.setVisibility(VISIBLE);
+            mCustomViewContainer.bringToFront();
+        }
+
+        @Override
+        public void onHideCustomView() {
+            if (mCustomView == null) return;
+
+            // Hide the custom view.
+            mCustomView.setVisibility(GONE);
+
+            // Remove the custom view from its container.
+            mCustomViewContainer.removeView(mCustomView);
+            mCustomView = null;
+            mCustomViewContainer.setVisibility(GONE);
+            mCustomViewCallback.onCustomViewHidden();
+
+            // Stop displaying the custom view container and unhide the ad view.
+            getMoPubView().removeView(mCustomViewContainer);
+            getAdWebView().setVisibility(VISIBLE);
+        }
+
+        @Override
+        public Bitmap getDefaultVideoPoster() {
+            return DEFAULT_VIDEO_POSTER.decodeImage(getContext()).getBitmap();
+        }
+
+        @Override
+        public View getVideoLoadingProgressView() {
+            if (mVideoProgressView == null) {
+                mVideoProgressView = createVideoProgressView();
+            }
+            return mVideoProgressView;
+        }
+
+        @Override
+        public boolean onError(MediaPlayer arg0, int arg1, int arg2) {
+            Log.d("MoPub", "Video errored!");
+            return false;
+        }
+
+        @Override
+        public void onCompletion(MediaPlayer mp) {
+            mp.stop();
+            mCustomViewCallback.onCustomViewHidden();
+            Log.d("MoPub", "Video completed!");
+        }
+
+        private View createVideoProgressView() {
+            LinearLayout mVideoProgressView = new LinearLayout(getContext());
+            mVideoProgressView.setOrientation(LinearLayout.VERTICAL);
+
+            RelativeLayout.LayoutParams videoLayoutParams = new RelativeLayout.LayoutParams(WRAP_CONTENT, WRAP_CONTENT);
+            videoLayoutParams.addRule(RelativeLayout.CENTER_IN_PARENT);
+            mVideoProgressView.setLayoutParams(videoLayoutParams);
+
+            ProgressBar progressBar = new ProgressBar(getContext(), null, android.R.attr.progressBarStyleLarge);
+            LinearLayout.LayoutParams progressBarLayoutParams = new LinearLayout.LayoutParams(WRAP_CONTENT, WRAP_CONTENT);
+            progressBarLayoutParams.gravity = Gravity.CENTER;
+            progressBar.setLayoutParams(progressBarLayoutParams);
+            mVideoProgressView.addView(progressBar);
+
+            TextView textView = new TextView(getContext());
+            LinearLayout.LayoutParams textViewLayoutParams = new LinearLayout.LayoutParams(WRAP_CONTENT, WRAP_CONTENT);
+            textViewLayoutParams.gravity = Gravity.CENTER;
+
+            textView.setText("Loading...");
+            textView.setTextSize(COMPLEX_UNIT_SP, 14f);
+            textView.setTextColor(getContext().getResources().getColor(android.R.color.white));
+            textView.setPadding(0, Dips.asIntPixels(5f, getContext()), 0, 0);
+
+            textView.setLayoutParams(textViewLayoutParams);
+            mVideoProgressView.addView(textView);
+            return mVideoProgressView;
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/InMobiBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/InMobiBanner.java
new file mode 100644
index 00000000..b77d1006
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/InMobiBanner.java
@@ -0,0 +1,120 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.util.Log;
+import com.inmobi.androidsdk.IMAdListener;
+import com.inmobi.androidsdk.IMAdRequest;
+import com.inmobi.androidsdk.IMAdRequest.ErrorCode;
+import com.inmobi.androidsdk.IMAdView;
+import com.mopub.mobileads.CustomEventBanner;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/*
+ * Tested with InMobi SDK 3.7.0.
+ */
+class InMobiBanner extends CustomEventBanner implements IMAdListener {
+    private CustomEventBannerListener mBannerListener;
+    private IMAdView mInMobiBanner;
+
+    /*
+     * Abstract methods from CustomEventBanner
+     */
+    @Override
+    protected void loadBanner(Context context, CustomEventBannerListener bannerListener,
+            Map<String, Object> localExtras, Map<String, String> serverExtras) {
+        mBannerListener = bannerListener;
+        
+        Activity activity = null;
+        if (context instanceof Activity) {
+            activity = (Activity) context;
+        } else {
+        	activity = (Activity)localExtras.get("activity");
+        }
+        
+        if (activity == null) {
+        	if(mBannerListener != null) {
+        		mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+        	}
+            return;
+        }
+        
+        String appId = serverExtras.get("app_id");
+        if(appId == null || appId.length() == 0) {
+        	if(mBannerListener != null) {
+        		mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+        	}
+        	return;
+        }
+        
+        /*
+         * You may also pass this String down in the serverExtras Map by specifying Custom Event Data
+         * in MoPub's web interface.
+         */
+        mInMobiBanner = new IMAdView(activity, IMAdView.INMOBI_AD_UNIT_320X50, appId);
+        
+        mInMobiBanner.setIMAdListener(this);
+
+        IMAdRequest imAdRequest = new IMAdRequest();
+        Map<String, String> requestParameters = new HashMap<String, String>();
+        requestParameters.put("tp", "c_mopub");
+        imAdRequest.setRequestParams(requestParameters);
+
+        mInMobiBanner.loadNewAd(imAdRequest);
+    }
+
+    @Override
+    protected void onInvalidate() {
+    	if(mInMobiBanner != null) {
+    		mInMobiBanner.setIMAdListener(null);
+    	}
+    }
+
+    /*
+     * IMAdListener implementation
+     */
+    @Override
+    public void onAdRequestCompleted(IMAdView adView) {
+        if (mInMobiBanner != null && mBannerListener != null) {
+            Log.d("MoPub", "InMobi banner ad loaded successfully. Showing ad...");
+            mBannerListener.onBannerLoaded(mInMobiBanner);
+        } else {
+        	if(mBannerListener != null) {
+        		mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+        	}
+        }
+    }
+
+    @Override
+    public void onAdRequestFailed(IMAdView adView, ErrorCode errorCode) {
+        Log.d("MoPub", "InMobi banner ad failed to load.");
+    	if(mBannerListener != null) {
+    		mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
+    	}
+    }
+
+    @Override
+    public void onDismissAdScreen(IMAdView adView) {
+        Log.d("MoPub", "InMobi banner ad modal dismissed.");
+    }
+
+    @Override
+    public void onLeaveApplication(IMAdView adView) {
+        /*
+         * Because InMobi does not have an onClick equivalent, we use onLeaveApplication
+         * as a click notification.
+         */
+        Log.d("MoPub", "InMobi banner ad leaving application.");
+    	if(mBannerListener != null) {
+    		mBannerListener.onBannerClicked();
+    	}
+    }
+
+    @Override
+    public void onShowAdScreen(IMAdView adView) {
+        Log.d("MoPub", "InMobi banner ad modal shown.");
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/InMobiInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/InMobiInterstitial.java
new file mode 100644
index 00000000..1c464ef9
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/InMobiInterstitial.java
@@ -0,0 +1,127 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.util.Log;
+import com.inmobi.androidsdk.IMAdInterstitial;
+import com.inmobi.androidsdk.IMAdInterstitialListener;
+import com.inmobi.androidsdk.IMAdRequest;
+import com.inmobi.androidsdk.IMAdRequest.ErrorCode;
+import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/*
+ * Tested with InMobi SDK 3.7.0.
+ */
+class InMobiInterstitial extends CustomEventInterstitial implements IMAdInterstitialListener {
+    private CustomEventInterstitialListener mInterstitialListener;
+    private IMAdInterstitial mInMobiInterstitial;
+
+    /*
+     * Abstract methods from CustomEventInterstitial
+     */
+    @Override
+    protected void loadInterstitial(Context context, CustomEventInterstitialListener interstitialListener,
+            Map<String, Object> localExtras, Map<String, String> serverExtras) {
+        mInterstitialListener = interstitialListener;
+        
+        Activity activity = null;
+        if (context instanceof Activity) {
+            activity = (Activity) context;
+        } else {
+        	 activity = (Activity)localExtras.get("activity");
+        }
+        
+        if (activity == null) {
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+        
+        String appId = serverExtras.get("app_id");
+        if(appId == null || appId.length() == 0) {
+        	if(mInterstitialListener != null) {
+        		mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+        	}
+        	return;
+        }
+
+        /*
+         * You may also pass this String down in the serverExtras Map by specifying Custom Event Data
+         * in MoPub's web interface.
+         */
+        mInMobiInterstitial = new IMAdInterstitial(activity, appId);
+        
+        mInMobiInterstitial.setIMAdInterstitialListener(this);
+
+        IMAdRequest imAdRequest = new IMAdRequest();
+        Map<String, String> requestParameters = new HashMap<String, String>();
+        requestParameters.put("tp", "c_mopub");
+        imAdRequest.setRequestParams(requestParameters);
+
+        mInMobiInterstitial.loadNewAd(imAdRequest);
+    }
+    
+    @Override
+    protected void showInterstitial() {
+        Log.d("MoPub", "Showing InMobi interstitial ad.");
+    	if(mInMobiInterstitial != null) {
+    		mInMobiInterstitial.show();
+    	}
+    }
+
+    @Override
+    protected void onInvalidate() {
+    	if(mInMobiInterstitial != null) {
+    		mInMobiInterstitial.setIMAdInterstitialListener(null);
+    	}
+    }
+
+    /*
+     * IMAdListener implementation
+     */
+    @Override
+    public void onAdRequestLoaded(IMAdInterstitial adInterstitial) {
+        Log.d("MoPub", "InMobi interstitial ad loaded successfully.");
+        if(mInterstitialListener != null) {
+        	mInterstitialListener.onInterstitialLoaded();
+        }
+    }
+    
+    @Override
+    public void onAdRequestFailed(IMAdInterstitial adInterstitial, ErrorCode errorCode) {
+        Log.d("MoPub", "InMobi interstitial ad failed to load.");
+        if(mInterstitialListener != null) {
+        	mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        }
+    }
+
+    @Override
+    public void onShowAdScreen(IMAdInterstitial adInterstitial) {
+        if(mInterstitialListener != null) {
+        	mInterstitialListener.onInterstitialShown();
+        }
+    }
+    
+    @Override
+    public void onLeaveApplication(IMAdInterstitial adInterstitial) {
+        /*
+         * Because InMobi does not have an onClick equivalent, we use onLeaveApplication
+         * as a click notification.
+         */
+        Log.d("MoPub", "InMobi interstitial ad leaving application.");
+        if(mInterstitialListener != null) {
+        	mInterstitialListener.onInterstitialClicked();
+        }
+    }
+
+    @Override
+    public void onDismissAdScreen(IMAdInterstitial adInterstitial) {
+        Log.d("MoPub", "InMobi interstitial ad dismissed.");
+        if(mInterstitialListener != null) {
+        	mInterstitialListener.onInterstitialDismissed();
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialBanner.java
new file mode 100644
index 00000000..c8fbae3a
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialBanner.java
@@ -0,0 +1,161 @@
+/*
+ * Copyright (c) 2011, MoPub Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * * Redistributions of source code must retain the above copyright
+ *   notice, this list of conditions and the following disclaimer.
+ *
+ * * Redistributions in binary form must reproduce the above copyright
+ *   notice, this list of conditions and the following disclaimer in the
+ *   documentation and/or other materials provided with the distribution.
+ *
+ * * Neither the name of 'MoPub Inc.' nor the names of its contributors
+ *   may be used to endorse or promote products derived from this software
+ *   without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.mopub.mobileads;
+
+import java.util.Map;
+
+import android.content.Context;
+import android.location.Location;
+import android.util.Log;
+
+import com.millennialmedia.android.MMAd;
+import com.millennialmedia.android.MMAdView;
+import com.millennialmedia.android.MMBroadcastReceiver;
+import com.millennialmedia.android.MMRequest;
+import com.millennialmedia.android.MMSDK;
+
+/**
+ * Compatible with version 5.1.0 of the Millennial Media SDK.
+ */
+
+class MillennialBanner extends CustomEventBanner {
+    private MMAdView mMillennialAdView;
+    private CustomEventBannerListener mBannerListener;
+    public static final String APID_KEY = "adUnitID";
+    public static final String AD_WIDTH_KEY = "adWidth";
+    public static final String AD_HEIGHT_KEY = "adHeight";
+    private MillennialBroadcastReceiver mBroadcastReceiver;
+
+    @Override
+    protected void loadBanner(Context context, CustomEventBannerListener customEventBannerListener,
+                              Map<String, Object> localExtras, Map<String, String> serverExtras) {
+        mBannerListener = customEventBannerListener;
+
+        String apid;
+        int width;
+        int height;
+        if (extrasAreValid(serverExtras)) {
+            apid = serverExtras.get(APID_KEY);
+            width = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
+            height = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
+        } else {
+            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        MMSDK.initialize(context);
+        MMSDK.setBroadcastEvents(true);
+
+        mBroadcastReceiver = new MillennialBroadcastReceiver();
+        mBroadcastReceiver.register(context);
+
+        mMillennialAdView = new MMAdView(context);
+        mMillennialAdView.setApid(apid);
+        mMillennialAdView.setWidth(width);
+        mMillennialAdView.setHeight(height);
+
+        Location location = (Location) localExtras.get("location");
+        if (location != null) MMRequest.setUserLocation(location);
+
+        mMillennialAdView.setMMRequest(new MMRequest());
+        mMillennialAdView.setId(MMSDK.getDefaultAdId());
+        AdViewController.setShouldHonorServerDimensions(mMillennialAdView);
+        mMillennialAdView.getAd();
+    }
+
+    private boolean extrasAreValid(Map<String, String> serverExtras) {
+        try {
+            Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
+            Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
+        } catch (NumberFormatException e) {
+            return false;
+        }
+
+        return serverExtras.containsKey(APID_KEY);
+    }
+
+    @Override
+    protected void onInvalidate() {
+    	if(mMillennialAdView != null) {
+    		mMillennialAdView.setListener(null);
+    	}
+    	if(mBroadcastReceiver != null) {
+    		mBroadcastReceiver.unregister();
+    	}
+    }
+
+    class MillennialBroadcastReceiver extends MMBroadcastReceiver {
+        private Context mContext;
+
+        @Override
+        public void getAdSuccess(MMAd ad) {
+            super.getAdSuccess(ad);
+            Log.d("MoPub", "Millennial banner ad loaded successfully. Showing ad...");
+            mBannerListener.onBannerLoaded(mMillennialAdView);
+        }
+
+        @Override
+        public void getAdFailure(MMAd ad) {
+            super.getAdFailure(ad);
+            Log.d("MoPub", "Millennial banner ad failed to load.");
+            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        }
+
+        @Override
+        public void intentStarted(MMAd ad, String intent) {
+            super.intentStarted(ad, intent);
+            Log.d("MoPub", "Millennial banner ad clicked.");
+            mBannerListener.onBannerClicked();
+        }
+
+        void register(Context context) {
+            mContext = context;
+            context.registerReceiver(this, MMBroadcastReceiver.createIntentFilter());
+        }
+
+        void unregister() {
+            try {
+                mContext.unregisterReceiver(this);
+            } catch (Exception exception) {
+                Log.d("MoPub", "Unable to unregister MMBroadcastReceiver", exception);
+            } finally {
+                mContext = null;
+            }
+        }
+    }
+
+    @Deprecated
+    MMAdView getMMAdView() {
+        return mMillennialAdView;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialInterstitial.java
new file mode 100644
index 00000000..6fcfdc73
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialInterstitial.java
@@ -0,0 +1,180 @@
+/*
+ * Copyright (c) 2011, MoPub Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * * Redistributions of source code must retain the above copyright
+ *   notice, this list of conditions and the following disclaimer.
+ *
+ * * Redistributions in binary form must reproduce the above copyright
+ *   notice, this list of conditions and the following disclaimer in the
+ *   documentation and/or other materials provided with the distribution.
+ *
+ * * Neither the name of 'MoPub Inc.' nor the names of its contributors
+ *   may be used to endorse or promote products derived from this software
+ *   without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.mopub.mobileads;
+
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+
+import java.util.Map;
+
+import android.content.Context;
+import android.location.Location;
+import android.util.Log;
+
+import com.millennialmedia.android.MMAd;
+import com.millennialmedia.android.MMBroadcastReceiver;
+import com.millennialmedia.android.MMInterstitial;
+import com.millennialmedia.android.MMRequest;
+import com.millennialmedia.android.MMSDK;
+
+/**
+ * Compatible with version 5.1.0 of the Millennial Media SDK.
+ */
+
+class MillennialInterstitial extends CustomEventInterstitial {
+    private MMInterstitial mMillennialInterstitial;
+    private CustomEventInterstitialListener mInterstitialListener;
+    public static final String APID_KEY = "adUnitID";
+    private MillennialBroadcastReceiver mBroadcastReceiver;
+
+    @Override
+    protected void loadInterstitial(Context context, CustomEventInterstitialListener customEventInterstitialListener,
+                                    Map<String, Object> localExtras, Map<String, String> serverExtras) {
+        mInterstitialListener = customEventInterstitialListener;
+
+        String apid;
+        if (extrasAreValid(serverExtras)) {
+            apid = serverExtras.get(APID_KEY);
+        } else {
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        MMSDK.initialize(context);
+        MMSDK.setBroadcastEvents(true);
+
+        mBroadcastReceiver = new MillennialBroadcastReceiver();
+        mBroadcastReceiver.register(context);
+
+        Location location = (Location) localExtras.get("location");
+        if (location != null) MMRequest.setUserLocation(location);
+
+        mMillennialInterstitial = new MMInterstitial(context);
+        if (mMillennialInterstitial.isAdAvailable()) {
+            Log.d("MoPub", "Millennial interstitial ad already loaded.");
+            mInterstitialListener.onInterstitialLoaded();
+        } else {
+            mMillennialInterstitial.setMMRequest(new MMRequest());
+            mMillennialInterstitial.setApid(apid);
+            mMillennialInterstitial.fetch();
+        }
+    }
+
+    @Override
+    protected void showInterstitial() {
+        if (mMillennialInterstitial.isAdAvailable()) {
+            mMillennialInterstitial.display();
+        } else {
+            Log.d("MoPub", "Tried to show a Millennial interstitial ad before it finished loading. Please try again.");
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        mMillennialInterstitial.setListener(null);
+        mBroadcastReceiver.unregister();
+    }
+
+    private boolean extrasAreValid(Map<String, String> serverExtras) {
+        return serverExtras.containsKey(APID_KEY);
+    }
+
+    class MillennialBroadcastReceiver extends MMBroadcastReceiver {
+        private Context mContext;
+
+        @Override
+        public void fetchFinishedCaching(MMAd ad) {
+            super.fetchFinishedCaching(ad);
+            fetchFinished(NETWORK_INVALID_STATE);
+        }
+
+        @Override
+        public void getAdFailure(MMAd ad) {
+            super.getAdFailure(ad);
+            Log.d("MoPub", "Millennial interstitial ad failed to load.");
+            mInterstitialListener.onInterstitialFailed(NETWORK_NO_FILL);
+        }
+
+        @Override
+        public void intentStarted(MMAd ad, String intent) {
+            super.intentStarted(ad, intent);
+            Log.d("MoPub", "Millennial interstitial ad clicked.");
+            mInterstitialListener.onInterstitialClicked();
+        }
+
+        @Override
+        public void fetchFailure(MMAd ad) {
+            super.fetchFailure(ad);
+            fetchFinished(NETWORK_NO_FILL);
+        }
+
+        @Override
+        public void displayStarted(MMAd ad) {
+            super.displayStarted(ad);
+            Log.d("MoPub", "Showing Millennial interstitial ad.");
+            mInterstitialListener.onInterstitialShown();
+        }
+
+        @Override
+        public void overlayClosed(MMAd ad) {
+            super.overlayClosed(ad);
+            Log.d("MoPub", "Millennial interstitial ad dismissed.");
+            mInterstitialListener.onInterstitialDismissed();
+        }
+
+        void register(Context context) {
+            mContext = context;
+            context.registerReceiver(this, MMBroadcastReceiver.createIntentFilter());
+        }
+
+        void unregister() {
+            try {
+                mContext.unregisterReceiver(this);
+            } catch (Exception exception) {
+                Log.d("MoPub", "Unable to unregister MMBroadcastReceiver", exception);
+            } finally {
+                mContext = null;
+            }
+        }
+
+        private void fetchFinished(MoPubErrorCode errorToReport) {
+            if (mMillennialInterstitial.isAdAvailable()) {
+                Log.d("MoPub", "Millennial interstitial ad loaded successfully.");
+                mInterstitialListener.onInterstitialLoaded();
+            } else {
+                Log.d("MoPub", "Millennial interstitial ad failed to load.");
+                mInterstitialListener.onInterstitialFailed(errorToReport);
+            }
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
index 321d7bc4..fc1df3e9 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -76,6 +76,7 @@
     protected CustomEventBannerAdapter mCustomEventBannerAdapter;
 
     private Context mContext;
+    private Activity mActivity;
     private BroadcastReceiver mScreenStateReceiver;
     private boolean mIsInForeground;
     private LocationAwareness mLocationAwareness;
@@ -347,7 +348,15 @@ public String getClickthroughUrl() {
     }
 
     public Activity getActivity() {
-        return (Activity) mContext;
+    	if(mActivity != null) return mActivity;
+    	if(mContext != null && mContext instanceof Activity) {
+    		return (Activity) mContext;
+    	}
+    	return null;
+    }
+
+    public void setActivity(Activity aActivity) {
+    	mActivity = aActivity;
     }
 
     public void setBannerAdListener(BannerAdListener listener) {
