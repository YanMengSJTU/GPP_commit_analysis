diff --git a/CHANGELOG.md b/CHANGELOG.md
index 4f044652..5add0cbc 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,76 @@
+## Version 4.19.0 (December 11, 2017)
+- Updated Facebook Audience Network adapters to 4.26.1.
+- Updated Flurry adapters to 8.1.0.
+- Updated Millennial rewarded ads adapters to 6.6.1.
+- Fixed a potential crash for native video ads when attempting to blur the last video frame.
+- Fixed a duplicate on loaded callback for some rewarded ads.
+
+## Version 4.18.0 (November 1, 2017)
+- Updated the SDK compile version to 26. Android API 26 artifacts live in the new Google maven repository `maven { url 'https://maven.google.com' }`. See [this article](https://developer.android.com/about/versions/oreo/android-8.0-migration.html) for more information about using Android API 26.
+- Fixed MoPub in-app browser's back and forward button icons.
+- Updated AdMob adapters to 11.4.0.
+- Updated Chartboost adapters to 7.0.1.
+- Updated Facebook Audience Network adapters to 4.26.0.
+- Updated Millennial to 6.6.1.
+- Updated TapJoy adapters to 11.11.0.
+- Updated Unity Ads adapters to 2.1.1.
+- Updated Vungle adapters to 5.3.0.
+- Bug fixes.
+
+## Version 4.17.0 (September 27, 2017)
+- Rewarded Ads can now send up optional custom data through the server completion url. See `MoPubRewardedVideos#showRewardedVideo(String, String)`.
+- Updated Facebook native adapter to ignore clicks on whitespace as per Facebook policy.
+
+#### Version 4.16.1 (August 24, 2017)
+- Fixed issue where null javascript was being passed to AVID video sessions.
+
+## Version 4.16.0 (August 23, 2017)
+- Added support for viewability measurement from IAS (AVID library) and Moat.  
+  - **Important:** New dependencies were included in this release; please update your `build.gradle`'s repositories block to include `maven { url "https://s3.amazonaws.com/moat-sdk-builds" }`. Note that the AVID library is provided on JCenter, so no additional steps must be taken -- it will be included automatically.
+  - To disable this feature, see note below on [Disabling Viewability Measurement](#disableViewability).
+- Interstitials are now loaded offscreen instead of in a separate WebView.
+- Rewarded Videos have a new init method. See `MoPubRewardedVideos.initializeRewardedVideo(Activity, List<Class<? extends CustomEventRewardedVideo>>, MediationSettings...)`. Pass in a list of networks to initialize, and MoPub will initialize those networks with the settings from the previous ad request, persisted across app close.
+- Upgraded our ExoPlayer dependency to 2.4.4.
+- Bug fixes
+
+#### Disclosures
+MoPub v4.16 SDK integrates technology from our partners Integral Ad Science, Inc. (“IAS”) and Moat, Inc. (“Moat”) in order to support viewability measurement and other proprietary reporting that [IAS](https://integralads.com/capabilities/viewability/) and [Moat](https://moat.com/analytics) provide to their advertiser and publisher clients. You have the option to remove or disable this technology by following the [opt-out instructions](#disableViewability) below.  
+
+If you do not remove or disable IAS's and/or Moat’s technology in accordance with these instructions, you agree that IAS's [privacy policy](https://integralads.com/privacy-policy/) and [license](https://integralads.com/sdk-license-agreement) and Moat’s [privacy policy](https://moat.com/privacy),  [terms](https://moat.com/terms), and [license](https://moat.com/sdklicense.txt), respectively, apply to your integration of these partners' technologies into your application.
+
+#### <a name="disableViewability"></a>Disabling Viewability Measurement
+There are a few options for opting out of viewability measurement:  
+##### Strip out from JCenter Integration
+Normally, to add the MoPub SDK to your app via JCenter, your `build.gradle` would contain:
+
+```	
+dependencies {
+	compile('com.mopub:mopub-sdk:4.16.0@aar') {
+		transitive = true
+	}
+}
+```
+Update to the following to exclude one or both viewability vendors:
+
+```
+dependencies {
+	compile('com.mopub:mopub-sdk:4.16.0@aar') {
+		transitive = true
+		exclude module: 'libAvid-mopub' // To exclude AVID
+		exclude module: 'moat-mobile-app-kit' // To exclude Moat
+    }
+}
+```
+##### Strip out from GitHub integration
+Navigate to the `gradle.properties` file in your home directory (e.g. `~/.gradle/gradle.properties`) and include one or both of these lines to opt out of viewability measurement for AVID and/or Moat.  
+
+```
+mopub.avidEnabled=false
+mopub.moatEnabled=false
+```
+##### Disable via API
+If you would like to opt out of viewability measurement but do not want to modify the MoPub SDK, a function is provided for your convenience. At any point, call `MoPub.disableViewability(vendor);`. This method can can be called with any of the enum values available in `ExternalViewabilitySessionManager.ViewabilityVendor`: `AVID` will disable AVID but leave Moat enabled, `MOAT` will disable Moat but leave AVID enabled, and `ALL` will disable all viewability measurement.
+
 ## Version 4.15.0 (June 19, 2017)
 - The SDK now sends Advertising ID on Amazon devices when appropriate.
 - Fixed issue with Charles proxy in sample app for API 24+.
@@ -547,3 +620,4 @@ To allow users to play videos using the native video player:
   - Added support for custom events
   - Added network connectivity check before loading an ad
   - Added `OnAdPresentedOverlay` listener methods
+  
diff --git a/Jenkinsfile b/Jenkinsfile
new file mode 100644
index 00000000..0f179eab
--- /dev/null
+++ b/Jenkinsfile
@@ -0,0 +1,22 @@
+#!/usr/bin/env groovy
+pipeline {
+    agent any
+    environment {
+        ANDROID_HOME = '/Users/jenkins/Library/Android/sdk'
+    }
+    stages {
+        stage('Build') {
+            steps {
+                sh './gradlew clean build'
+            }
+        }
+    }
+    post {
+        success {
+            hipchatSend message: "${env.JOB_NAME} #${env.BUILD_NUMBER} has succeeded.", color: 'GREEN'
+        }
+        failure {
+            hipchatSend message: "Attention @here ${env.JOB_NAME} #${env.BUILD_NUMBER} has failed.", color: 'RED'
+        }
+    }
+}
diff --git a/LICENSE b/LICENSE
index 3b96cb9a..84c3303f 100644
--- a/LICENSE
+++ b/LICENSE
@@ -1 +1,3 @@
-The MoPub SDK License can be found at [http://www.mopub.com/legal/sdk-license-agreement/](http://www.mopub.com/legal/sdk-license-agreement/).
+The MoPub SDK License can be found at [http://www.mopub.com/legal/sdk-license-agreement/](http://www.mopub.com/legal/sdk-license-agreement/) and the Apache 2.0 License can be found at [http://www.apache.org/licenses/LICENSE-2.0] (http://www.apache.org/licenses/LICENSE-2.0).
+
+Please note that some of the resources in this package are licensed under The Apache 2.0 license, including Disk LRU Cache, Volley, and Exoplayer.
\ No newline at end of file
diff --git a/README.md b/README.md
index 0f827bbe..a262d86f 100644
--- a/README.md
+++ b/README.md
@@ -12,6 +12,16 @@ To file an issue with our team visit the [MoPub Forum](https://twittercommunity.
 
 **Please Note: We no longer accept GitHub Issues.**
 
+## New Pull Requests?
+
+Thank you for submitting pull requests to the MoPub Android GitHub repository. Our team regularly monitors and investigates all submissions for inclusion in our official SDK releases. Please note that MoPub does not directly merge these pull requests at this time. Please reach out to your account team or [support@mopub.com](mailto:support@mopub.com) if you have further questions.
+
+## Disclosures
+
+MoPub SDK 4.16 and above integrates technology from our partners Integral Ad Science, Inc. (“IAS”) and Moat, Inc. (“Moat”) in order to support viewability measurement and other proprietary reporting that [IAS](https://integralads.com/capabilities/viewability/) and [Moat](https://moat.com/analytics) provide to their advertiser and publisher clients. You have the option to remove or disable this technology by following the [opt-out instructions](#disableViewability) below.  
+
+If you do not remove or disable IAS's and/or Moat’s technology in accordance with these instructions, you agree that IAS's [privacy policy](https://integralads.com/privacy-policy/) and [license](https://integralads.com/sdk-license-agreement) and Moat’s [privacy policy](https://moat.com/privacy),  [terms](https://moat.com/terms), and [license](https://moat.com/sdklicense.txt), respectively, apply to your integration of these partners' technologies into your application.
+
 ## Download
 
 The MoPub SDK is available via:
@@ -23,11 +33,13 @@ The MoPub SDK is available via:
     
     ```
     repositories {
-        jcenter()
+        jcenter() // includes the MoPub SDK and AVID library
+        maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
+        maven { url 'https://maven.google.com' } // necessary for Android API 26
     }
 
     dependencies {
-        compile('com.mopub:mopub-sdk:4.15.0@aar') {
+        compile('com.mopub:mopub-sdk:4.19.0@aar') {
             transitive = true
         }
     }
@@ -40,35 +52,36 @@ The MoPub SDK is available via:
     ```groovy
     repositories {
         // ... other project repositories
-        jcenter()
+        jcenter() // includes the MoPub SDK and AVID library
+        maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
+        maven { url 'https://maven.google.com' } // necessary for Android API 26
     }
-    // ...
 
     dependencies {
         // ... other project dependencies
 
         // For banners
-        compile('com.mopub:mopub-sdk-banner:4.15.0@aar') {
+        compile('com.mopub:mopub-sdk-banner:4.19.0@aar') {
             transitive = true
         }
         
         // For interstitials
-        compile('com.mopub:mopub-sdk-interstitial:4.15.0@aar') {
+        compile('com.mopub:mopub-sdk-interstitial:4.19.0@aar') {
             transitive = true
         }
 
         // For rewarded videos. This will automatically also include interstitials
-        compile('com.mopub:mopub-sdk-rewardedvideo:4.15.0@aar') {
+        compile('com.mopub:mopub-sdk-rewardedvideo:4.19.0@aar') {
             transitive = true
         }
 
         // For native static (images).
-        compile('com.mopub:mopub-sdk-native-static:4.15.0@aar') {
+        compile('com.mopub:mopub-sdk-native-static:4.19.0@aar') {
             transitive = true
         }
 
         // For native video. This will automatically also include native static
-        compile('com.mopub:mopub-sdk-native-video:4.15.0@aar') {
+        compile('com.mopub:mopub-sdk-native-video:4.19.0@aar') {
             transitive = true
         }
     }
@@ -96,25 +109,56 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- The SDK now sends Advertising ID on Amazon devices when appropriate.
-- Fixed issue with Charles proxy in sample app for API 24+.
-- Bug fixes.
+- Updated Facebook Audience Network adapters to 4.26.1.
+- Updated Flurry adapters to 8.1.0.
+- Updated Millennial rewarded ads adapters to 6.6.1.
 
 ## Requirements
 
 - Android 4.1 (API Version 16) and up (**Updated in 4.12.0**)
-- android-support-v4.jar, r23 (**Updated in 4.4.0**)
-- android-support-annotations.jar, r23 (**Updated in 4.4.0**)
-- android-support-v7-recyclerview.jar, r23 (**Updated in 4.4.0**)
+- android-support-v4.jar, r26 (**Updated in 4.18.0**)
+- android-support-annotations.jar, r26 (**Updated in 4.18.0**)
+- android-support-v7-recyclerview.jar, r26 (**Updated in 4.18.0**)
 - MoPub Volley Library (mopub-volley-1.1.0.jar - available on JCenter) (**Updated in 3.6.0**)
-- **Recommended** Google Play Services 9.4.0
-
-## Upgrading from 3.2.0 and Prior
-In 3.3.0 a dependency on android-support-annotations.jar was added. If you are using Maven or Gradle to include the MoPub SDK, this dependency is included in the build scripts. For instructions on adding dependencies for Eclipse projects, see our [Getting Started Guide](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started#adding-the-support-libraries-to-your-project)
-
-## Important Message About Upgrading to MoPub SDK 4.4.0+
-
-Version 4.4.0 of the MoPub SDK fixes a security issue identified by Google. Note that only publishers who received a message from Google are affected. While not all publishers are impacted, we recommend you upgrade to SDK 4.4.0+ ahead of Google's deadline (July 11, 2016) to avoid any issues submitting updates to your apps after the date. More information can be found in [Google's support article](https://support.google.com/faqs/answer/6345928).
+- **Recommended** Google Play Services 11.4.0
+
+## <a name="upgradeRepositoryViewability"></a>Upgrading from 4.15.0 and Prior
+In 4.16.0, dependencies were added to viewability libraries provided by AVID and Moat. Apps upgrading from previous versions must add
+`maven { url "https://s3.amazonaws.com/moat-sdk-builds" }`
+to their `build.gradle` repositories block for these included dependencies to resolve.
+
+## <a name="disableViewability"></a>Disabling Viewability Measurement
+There are a few options for opting out of viewability measurement:  
+##### Strip out from JCenter Integration
+Normally, to add the MoPub SDK to your app via JCenter, your `build.gradle` would contain:
+
+```	
+dependencies {
+    compile('com.mopub:mopub-sdk:4.18.0@aar') {
+        transitive = true
+    }
+}
+```
+Update to the following to exclude one or both viewability vendors:
+
+```
+dependencies {
+    compile('com.mopub:mopub-sdk:4.19.0@aar') {
+        transitive = true
+        exclude module: 'libAvid-mopub' // To exclude AVID
+        exclude module: 'moat-mobile-app-kit' // To exclude Moat
+    }
+}
+```
+##### Strip out from GitHub integration
+Navigate to the `gradle.properties` file in your home directory (e.g. `~/.gradle/gradle.properties`) and include one or both of these lines to opt out of viewability measurement for AVID and/or Moat.  
+
+```
+mopub.avidEnabled=false
+mopub.moatEnabled=false
+```
+##### Disable via API
+If you would like to opt out of viewability measurement but do not want to modify the MoPub SDK, a function is provided for your convenience. At any point, call `MoPub.disableViewability(vendor);`. This method can can be called with any of the enum values available in `ExternalViewabilitySessionManager.ViewabilityVendor`: `AVID` will disable AVID but leave Moat enabled, `MOAT` will disable Moat but leave AVID enabled, and `ALL` will disable all viewability measurement.
 
 ## Working with Android 6.0 Runtime Permissions
 If your app's target SDK is 23 or higher _**and**_ the user's device is running Android 6.0 or higher, you are responsible for supporting [runtime permissions](http://developer.android.com/training/permissions/requesting.html), one of the [changes](http://developer.android.com/about/versions/marshmallow/android-6.0-changes.html) introduced in Android 6.0 (API level 23). In addition to listing any dangerous permissions your app needs in the manifest, your app also has to explicitly request the dangerous permission(s) during runtime by calling method `requestPermissions()` in the [`ActivityCompat`](http://developer.android.com/reference/android/support/v4/app/ActivityCompat.html) class.
@@ -123,7 +167,7 @@ If your app's target SDK is 23 or higher _**and**_ the user's device is running
 - Dangerous permission [`ACCESS_COARSE_LOCATION`](http://developer.android.com/reference/android/Manifest.permission.html#ACCESS_COARSE_LOCATION) is needed to pass network location data to MoPub.
 - Dangerous permission [`ACCESS_FINE_LOCATION`](http://developer.android.com/reference/android/Manifest.permission.html#ACCESS_FINE_LOCATION) is needed to pass GPS location data to MoPub.
     - Granting `ACCESS_FINE_LOCATION` also allows network location data to be passed to MoPub without the need to also grant `ACCESS_COARSE_LOCATION`.
-- Dangerous permission [`WRITE_EXTERNAL_STORAGE`](http://developer.android.com/reference/android/Manifest.permission.html#WRITE_EXTERNAL_STORAGE) is needed for MRAID 2.
+- Dangerous permission [`WRITE_EXTERNAL_STORAGE`](http://developer.android.com/reference/android/Manifest.permission.html#WRITE_EXTERNAL_STORAGE) is optional and only required for MRAID 2.0 storePicture ads.
 - _**Note:** The user can deny granting any dangerous permissions during runtime, so please make sure your app can handle this properly._
 - _**Note:** The user can revoke any permissions granted previously by going to your app's Settings screen, so please make sure your app can handle this properly._
 
diff --git a/build.gradle b/build.gradle
index 491fd57d..e7b8ca18 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,7 +5,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.1.3'
+        classpath 'com.android.tools.build:gradle:2.3.0'
         classpath 'com.novoda:bintray-release:0.4.0'
     }
 }
diff --git a/extras/src/com/mopub/mobileads/AdColonyInterstitial.java b/extras/src/com/mopub/mobileads/AdColonyInterstitial.java
index 3312cc45..f0b08021 100644
--- a/extras/src/com/mopub/mobileads/AdColonyInterstitial.java
+++ b/extras/src/com/mopub/mobileads/AdColonyInterstitial.java
@@ -3,6 +3,8 @@
 import android.app.Activity;
 import android.content.Context;
 import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.util.Log;
 
 import com.adcolony.sdk.AdColony;
@@ -11,8 +13,12 @@
 import com.adcolony.sdk.AdColonyZone;
 import com.mopub.common.util.Json;
 
+import java.util.Arrays;
 import java.util.Map;
 
+/**
+ * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the latest version and ad format certifications.
+ */
 public class AdColonyInterstitial extends CustomEventInterstitial {
     private static final String TAG = "AdColonyInterstitial";
     /*
@@ -39,17 +45,21 @@
     private AdColonyInterstitialListener mAdColonyInterstitialListener;
     private final Handler mHandler;
     private com.adcolony.sdk.AdColonyInterstitial mAdColonyInterstitial;
+    private static String[] previousAdColonyAllZoneIds;
 
     public AdColonyInterstitial() {
         mHandler = new Handler();
     }
 
     @Override
-    protected void loadInterstitial(Context context,
-                                    CustomEventInterstitialListener customEventInterstitialListener,
-                                    Map<String, Object> localExtras,
-                                    Map<String, String> serverExtras) {
-        if (!(context instanceof Activity)) {
+    protected void loadInterstitial(@NonNull Context context,
+            @NonNull CustomEventInterstitialListener customEventInterstitialListener,
+            @Nullable Map<String, Object> localExtras,
+            @NonNull Map<String, String> serverExtras) {
+        if (context == null
+                || !(context instanceof Activity)
+                || customEventInterstitialListener == null
+                || serverExtras == null) {
             customEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
             return;
         }
@@ -67,10 +77,15 @@ protected void loadInterstitial(Context context,
             allZoneIds = extractAllZoneIds(serverExtras);
             zoneId = serverExtras.get(ZONE_ID_KEY);
         }
-
+        AdColonyAppOptions adColonyAppOptions = AdColonyAppOptions.getMoPubAppOptions(clientOptions);
         mAdColonyInterstitialListener = getAdColonyInterstitialListener();
         if (!isAdColonyConfigured()) {
-            AdColony.configure((Activity) context, getAppOptions(clientOptions), appId, allZoneIds);
+            AdColony.configure((Activity) context, adColonyAppOptions, appId, allZoneIds);
+        } else if ((shouldReconfigure(previousAdColonyAllZoneIds, allZoneIds))) {
+            // Need to check the zone IDs sent from the MoPub portal and reconfigure if they are
+            // different than the zones we initially called AdColony.configure() with
+            AdColony.configure((Activity) context, adColonyAppOptions, appId, allZoneIds);
+            previousAdColonyAllZoneIds = allZoneIds;
         }
 
         AdColony.requestInterstitial(zoneId, mAdColonyInterstitialListener);
@@ -101,35 +116,6 @@ protected void onInvalidate() {
         }
     }
 
-    private AdColonyAppOptions getAppOptions(String clientOptions) {
-        if (clientOptions == null || clientOptions.isEmpty()) {
-            return null;
-        }
-        AdColonyAppOptions adColonyAppOptions = new AdColonyAppOptions();
-        String[] allOptions = clientOptions.split(",");
-        for (String option : allOptions) {
-            String optionNameAndValue[] = option.split(":");
-            if (optionNameAndValue.length == 2) {
-                switch (optionNameAndValue[0]) {
-                    case "store":
-                        adColonyAppOptions.setOriginStore(optionNameAndValue[1]);
-                        break;
-                    case "version":
-                        adColonyAppOptions.setAppVersion(optionNameAndValue[1]);
-                        break;
-                    default:
-                        Log.e(TAG, "AdColony client options in wrong format - please check your MoPub dashboard");
-                        return null;
-                }
-            } else {
-                Log.e(TAG, "AdColony client options in wrong format - please check your MoPub dashboard");
-                return null;
-            }
-        }
-
-        return adColonyAppOptions;
-    }
-
     private boolean isAdColonyConfigured() {
         return !AdColony.getSDKVersion().isEmpty();
     }
@@ -140,7 +126,7 @@ private AdColonyInterstitialListener getAdColonyInterstitialListener() {
         } else {
             return new AdColonyInterstitialListener() {
                 @Override
-                public void onRequestFilled(com.adcolony.sdk.AdColonyInterstitial adColonyInterstitial) {
+                public void onRequestFilled(@NonNull com.adcolony.sdk.AdColonyInterstitial adColonyInterstitial) {
                     mAdColonyInterstitial = adColonyInterstitial;
                     Log.d(TAG, "AdColony interstitial ad has been successfully loaded.");
                     mHandler.post(new Runnable() {
@@ -152,7 +138,7 @@ public void run() {
                 }
 
                 @Override
-                public void onRequestNotFilled(AdColonyZone zone) {
+                public void onRequestNotFilled(@NonNull AdColonyZone zone) {
                     Log.d(TAG, "AdColony interstitial ad has no fill.");
                     mHandler.post(new Runnable() {
                         @Override
@@ -163,7 +149,7 @@ public void run() {
                 }
 
                 @Override
-                public void onClosed(com.adcolony.sdk.AdColonyInterstitial ad) {
+                public void onClosed(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
                     Log.d(TAG, "AdColony interstitial ad has been dismissed.");
                     mHandler.post(new Runnable() {
                         @Override
@@ -174,7 +160,7 @@ public void run() {
                 }
 
                 @Override
-                public void onOpened(com.adcolony.sdk.AdColonyInterstitial ad) {
+                public void onOpened(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
                     Log.d(TAG, "AdColony interstitial ad shown: " + ad.getZoneID());
                     mHandler.post(new Runnable() {
                         @Override
@@ -185,23 +171,13 @@ public void run() {
                 }
 
                 @Override
-                public void onExpiring(com.adcolony.sdk.AdColonyInterstitial ad) {
+                public void onExpiring(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
                     Log.d(TAG, "AdColony interstitial ad is expiring; requesting new ad");
                     AdColony.requestInterstitial(ad.getZoneID(), mAdColonyInterstitialListener);
                 }
 
                 @Override
-                public void onLeftApplication(com.adcolony.sdk.AdColonyInterstitial ad) {
-                    mHandler.post(new Runnable() {
-                        @Override
-                        public void run() {
-                            mCustomEventInterstitialListener.onLeaveApplication();
-                        }
-                    });
-                }
-
-                @Override
-                public void onClicked(com.adcolony.sdk.AdColonyInterstitial ad) {
+                public void onClicked(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
                     mCustomEventInterstitialListener.onInterstitialClicked();
                 }
             };
@@ -209,12 +185,30 @@ public void onClicked(com.adcolony.sdk.AdColonyInterstitial ad) {
     }
 
     private boolean extrasAreValid(Map<String, String> extras) {
-        return extras.containsKey(CLIENT_OPTIONS_KEY)
+        return extras != null
+                && extras.containsKey(CLIENT_OPTIONS_KEY)
                 && extras.containsKey(APP_ID_KEY)
                 && extras.containsKey(ALL_ZONE_IDS_KEY)
                 && extras.containsKey(ZONE_ID_KEY);
     }
 
+    private static boolean shouldReconfigure(String[] previousZones, String[] newZones) {
+        // If AdColony is configured already, but previousZones is null, then that means AdColony
+        // was configured with the AdColonyRewardedVideo adapter so attempt to configure with
+        // the ids in newZones. They will be ignored within the AdColony SDK if the zones are
+        // the same as the zones that the other adapter called AdColony.configure() with.
+        if (previousZones == null) {
+            return true;
+        } else if (newZones == null) {
+            return false;
+        } else if (previousZones.length != newZones.length) {
+            return true;
+        }
+        Arrays.sort(previousZones);
+        Arrays.sort(newZones);
+        return !Arrays.equals(previousZones, newZones);
+    }
+
     private String[] extractAllZoneIds(Map<String, String> serverExtras) {
         String[] result = Json.jsonArrayToStringArray(serverExtras.get(ALL_ZONE_IDS_KEY));
 
@@ -225,10 +219,4 @@ private boolean extrasAreValid(Map<String, String> extras) {
 
         return result;
     }
-
-    @Deprecated
-    // For testing
-    public static String getAdUnitId(MoPubInterstitial interstitial) {
-        return interstitial.getMoPubInterstitialView().getAdUnitId();
-    }
 }
diff --git a/extras/src/com/mopub/mobileads/AdColonyRewardedVideo.java b/extras/src/com/mopub/mobileads/AdColonyRewardedVideo.java
index 8d81a6f7..accb01f2 100644
--- a/extras/src/com/mopub/mobileads/AdColonyRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/AdColonyRewardedVideo.java
@@ -22,13 +22,14 @@
 import com.mopub.common.MoPubReward;
 import com.mopub.common.util.Json;
 
+import java.util.Arrays;
 import java.util.Map;
 import java.util.WeakHashMap;
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
 /**
- * A custom event for showing AdColony rewarded videos.
+ * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the latest version and ad format certifications.
  */
 public class AdColonyRewardedVideo extends CustomEventRewardedVideo {
     private static final String TAG = "AdColonyRewardedVideo";
@@ -54,6 +55,7 @@
 
     private static boolean sInitialized = false;
     private static LifecycleListener sLifecycleListener = new BaseLifecycleListener();
+    private static String[] previousAdColonyAllZoneIds;
 
     AdColonyInterstitial mAd;
     private String mZoneId;
@@ -108,8 +110,8 @@ protected void onInvalidate() {
 
     @Override
     public boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
-                                         @NonNull final Map<String, Object> localExtras,
-                                         @NonNull final Map<String, String> serverExtras) throws Exception {
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final Map<String, String> serverExtras) throws Exception {
         synchronized (AdColonyRewardedVideo.class) {
             if (sInitialized) {
                 return false;
@@ -127,9 +129,9 @@ public boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
             }
 
             setUpGlobalSettings();
-            setAppOptions(adColonyClientOptions);
-
+            mAdColonyAppOptions = AdColonyAppOptions.getMoPubAppOptions(adColonyClientOptions);
             if (!isAdColonyConfigured()) {
+                previousAdColonyAllZoneIds = adColonyAllZoneIds;
                 AdColony.configure(launcherActivity, mAdColonyAppOptions, adColonyAppId, adColonyAllZoneIds);
             }
 
@@ -140,13 +142,24 @@ public boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
 
     @Override
     protected void loadWithSdkInitialized(@NonNull final Activity activity,
-                                          @NonNull final Map<String, Object> localExtras,
-                                          @NonNull final Map<String, String> serverExtras) throws Exception {
-
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final Map<String, String> serverExtras) throws Exception {
         mZoneId = DEFAULT_ZONE_ID;
         if (extrasAreValid(serverExtras)) {
             mZoneId = serverExtras.get(ZONE_ID_KEY);
+            String adColonyClientOptions = serverExtras.get(CLIENT_OPTIONS_KEY);
+            String adColonyAppId = serverExtras.get(APP_ID_KEY);
+            String[] adColonyAllZoneIds = extractAllZoneIds(serverExtras);
+
+            // Need to check the zone IDs sent from the MoPub portal and reconfigure if they are
+            // different than the zones we initially called AdColony.configure() with
+            if (shouldReconfigure(previousAdColonyAllZoneIds, adColonyAllZoneIds)) {
+                mAdColonyAppOptions = AdColonyAppOptions.getMoPubAppOptions(adColonyClientOptions);
+                AdColony.configure(activity, mAdColonyAppOptions, adColonyAppId, adColonyAllZoneIds);
+                previousAdColonyAllZoneIds = adColonyAllZoneIds;
+            }
         }
+
         Object adUnitObject = localExtras.get(DataKeys.AD_UNIT_ID_KEY);
         if (adUnitObject != null && adUnitObject instanceof String) {
             mAdUnitId = (String) adUnitObject;
@@ -160,40 +173,28 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity,
         scheduleOnVideoReady();
     }
 
+    private static boolean shouldReconfigure(String[] previousZones, String[] newZones) {
+        // If AdColony is configured already, but previousZones is null, then that means AdColony
+        // was configured with the AdColonyInterstitial adapter so attempt to configure with
+        // the ids in newZones. They will be ignored within the AdColony SDK if the zones are
+        // the same as the zones that the other adapter called AdColony.configure() with.
+        if (previousZones == null) {
+            return true;
+        } else if (newZones == null) {
+            return false;
+        } else if (previousZones.length != newZones.length) {
+            return true;
+        }
+        Arrays.sort(previousZones);
+        Arrays.sort(newZones);
+        return !Arrays.equals(previousZones, newZones);
+    }
+
     private void setUpAdOptions() {
         mAdColonyAdOptions.enableConfirmationDialog(getConfirmationDialogFromSettings());
         mAdColonyAdOptions.enableResultsDialog(getResultsDialogFromSettings());
     }
 
-    private void setAppOptions(String clientOptions) {
-        if(android.text.TextUtils.isEmpty(clientOptions)) {
-            Log.d(TAG, "AdColony client options are not configured on the MoPub dashboard");
-            return;
-        }
-
-        String[] allOptions = clientOptions.split(",");
-        for (String option : allOptions) {
-            String optionNameAndValue[] = option.split(":");
-            if (optionNameAndValue.length == 2) {
-                switch (optionNameAndValue[0]) {
-                    case "store":
-                        mAdColonyAppOptions.setOriginStore(optionNameAndValue[1]);
-                        break;
-                    case "version":
-                        mAdColonyAppOptions.setAppVersion(optionNameAndValue[1]);
-                        break;
-                    default:
-                        Log.e(TAG, "AdColony client options in wrong format - please check your MoPub dashboard");
-                        return;
-                }
-            } else {
-                Log.e(TAG, "AdColony client options is not recognized - please check your MoPub " +
-                        "dashboard");
-                return;
-            }
-        }
-    }
-
     private boolean isAdColonyConfigured() {
         return !AdColony.getSDKVersion().isEmpty();
     }
@@ -216,7 +217,8 @@ public void showVideo() {
     }
 
     private boolean extrasAreValid(Map<String, String> extras) {
-        return extras.containsKey(CLIENT_OPTIONS_KEY)
+        return extras != null
+                && extras.containsKey(CLIENT_OPTIONS_KEY)
                 && extras.containsKey(APP_ID_KEY)
                 && extras.containsKey(ALL_ZONE_IDS_KEY)
                 && extras.containsKey(ZONE_ID_KEY);
@@ -303,7 +305,7 @@ private boolean isAdAvailable(String zoneId) {
         }
 
         @Override
-        public void onReward(AdColonyReward a) {
+        public void onReward(@NonNull AdColonyReward a) {
             MoPubReward reward;
             if (a.success()) {
                 Log.d(TAG, "AdColonyReward name: " + a.getRewardName());
@@ -321,12 +323,12 @@ public void onReward(AdColonyReward a) {
         }
 
         @Override
-        public void onRequestFilled(com.adcolony.sdk.AdColonyInterstitial adColonyInterstitial) {
+        public void onRequestFilled(@NonNull com.adcolony.sdk.AdColonyInterstitial adColonyInterstitial) {
             sZoneIdToAdMap.put(adColonyInterstitial.getZoneID(), adColonyInterstitial);
         }
 
         @Override
-        public void onRequestNotFilled(AdColonyZone zone) {
+        public void onRequestNotFilled(@NonNull AdColonyZone zone) {
             Log.d(TAG, "AdColony rewarded ad has no fill.");
             MoPubRewardedVideoManager.onRewardedVideoLoadFailure(
                     AdColonyRewardedVideo.class,
@@ -335,7 +337,7 @@ public void onRequestNotFilled(AdColonyZone zone) {
         }
 
         @Override
-        public void onClosed(com.adcolony.sdk.AdColonyInterstitial ad) {
+        public void onClosed(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
             Log.d(TAG, "AdColony rewarded ad has been dismissed.");
             MoPubRewardedVideoManager.onRewardedVideoClosed(
                     AdColonyRewardedVideo.class,
@@ -343,7 +345,7 @@ public void onClosed(com.adcolony.sdk.AdColonyInterstitial ad) {
         }
 
         @Override
-        public void onOpened(com.adcolony.sdk.AdColonyInterstitial ad) {
+        public void onOpened(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
             Log.d(TAG, "AdColony rewarded ad shown: " + ad.getZoneID());
             MoPubRewardedVideoManager.onRewardedVideoStarted(
                     AdColonyRewardedVideo.class,
@@ -351,13 +353,13 @@ public void onOpened(com.adcolony.sdk.AdColonyInterstitial ad) {
         }
 
         @Override
-        public void onExpiring(com.adcolony.sdk.AdColonyInterstitial ad) {
+        public void onExpiring(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
             Log.d(TAG, "AdColony rewarded ad is expiring; requesting new ad");
             AdColony.requestInterstitial(ad.getZoneID(), ad.getListener(), mAdOptions);
         }
 
         @Override
-        public void onClicked(com.adcolony.sdk.AdColonyInterstitial ad) {
+        public void onClicked(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
             MoPubRewardedVideoManager.onRewardedVideoClicked(
                     AdColonyRewardedVideo.class,
                     ad.getZoneID());
diff --git a/extras/src/com/mopub/mobileads/ChartboostInterstitial.java b/extras/src/com/mopub/mobileads/ChartboostInterstitial.java
index 82747718..0201a1aa 100644
--- a/extras/src/com/mopub/mobileads/ChartboostInterstitial.java
+++ b/extras/src/com/mopub/mobileads/ChartboostInterstitial.java
@@ -14,7 +14,7 @@
 /**
  * A custom event for showing Chartboost interstitial ads.
  *
- * Certified with Chartboost 6.6.3
+ * Certified with Chartboost 7.0.1
  */
 class ChartboostInterstitial extends CustomEventInterstitial {
 
diff --git a/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java b/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java
index b41dd113..bc994411 100644
--- a/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java
@@ -16,7 +16,7 @@
 /**
  * A custom event for showing Chartboost rewarded videos.
  *
- * Certified with Chartboost 6.6.3
+ * Certified with Chartboost 7.0.1
  */
 public class ChartboostRewardedVideo extends CustomEventRewardedVideo {
     @NonNull private static final LifecycleListener sLifecycleListener =
diff --git a/extras/src/com/mopub/mobileads/ChartboostShared.java b/extras/src/com/mopub/mobileads/ChartboostShared.java
index f9e958f6..d70fb7ed 100644
--- a/extras/src/com/mopub/mobileads/ChartboostShared.java
+++ b/extras/src/com/mopub/mobileads/ChartboostShared.java
@@ -27,7 +27,7 @@
 /**
  * Shared infrastructure for initializing the Chartboost SDK when mediated by MoPub
  *
- * Certified with Chartboost 6.6.3
+ * Certified with Chartboost 7.0.1
  */
 public class ChartboostShared {
     private static volatile ChartboostSingletonDelegate sDelegate = new ChartboostSingletonDelegate();
diff --git a/extras/src/com/mopub/mobileads/FacebookBanner.java b/extras/src/com/mopub/mobileads/FacebookBanner.java
index 4d60a635..4eccbad5 100644
--- a/extras/src/com/mopub/mobileads/FacebookBanner.java
+++ b/extras/src/com/mopub/mobileads/FacebookBanner.java
@@ -16,8 +16,7 @@
 import java.util.Map;
 
 /**
- * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
- * latest version and ad format certifications.
+ * Certified with Facebook Audience Network 4.26.1
  */
 public class FacebookBanner extends CustomEventBanner implements AdListener {
     public static final String PLACEMENT_ID_KEY = "placement_id";
diff --git a/extras/src/com/mopub/mobileads/FacebookInterstitial.java b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
index 34fc4ad7..1b24c584 100644
--- a/extras/src/com/mopub/mobileads/FacebookInterstitial.java
+++ b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
@@ -11,8 +11,7 @@
 import java.util.Map;
 
 /**
- * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
- * latest version and ad format certifications.
+ * Certified with Facebook Audience Network 4.26.1
  */
 public class FacebookInterstitial extends CustomEventInterstitial implements InterstitialAdListener {
     public static final String PLACEMENT_ID_KEY = "placement_id";
diff --git a/extras/src/com/mopub/mobileads/FacebookRewardedVideo.java b/extras/src/com/mopub/mobileads/FacebookRewardedVideo.java
index 196d3d8e..c3c4a318 100644
--- a/extras/src/com/mopub/mobileads/FacebookRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/FacebookRewardedVideo.java
@@ -16,7 +16,7 @@
 import java.util.Map;
 
 /**
- * Certified with Facebook Audience Network 4.23.0
+ * Certified with Facebook Audience Network 4.26.1
  */
 public class FacebookRewardedVideo extends CustomEventRewardedVideo implements RewardedVideoAdListener {
 
diff --git a/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java b/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
index 3854d3a5..38ebcd8d 100644
--- a/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
+++ b/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
@@ -11,7 +11,7 @@
 import com.flurry.android.FlurryAgentListener;
 
 /**
- * Certified with Flurry 7.2.0
+ * Certified with Flurry 8.1.0
  */
 public final class FlurryAgentWrapper {
     public static final String PARAM_API_KEY = "apiKey";
diff --git a/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java b/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
index d8ce8a8c..8a31a9d7 100644
--- a/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
+++ b/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
@@ -18,7 +18,7 @@
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 
 /**
- * Certified with Flurry 7.2.0
+ * Certified with Flurry 8.1.0
  */
 class FlurryCustomEventBanner extends com.mopub.mobileads.CustomEventBanner {
     private static final String LOG_TAG = FlurryCustomEventBanner.class.getSimpleName();
diff --git a/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java b/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
index 0e27c27a..c912b75a 100644
--- a/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
+++ b/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
@@ -17,7 +17,7 @@
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 
 /**
- * Certified with Flurry 7.2.0
+ * Certified with Flurry 8.1.0
  */
 class FlurryCustomEventInterstitial extends com.mopub.mobileads.CustomEventInterstitial {
     private static final String LOG_TAG = FlurryCustomEventInterstitial.class.getSimpleName();
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
index 2a52a6eb..46d18c56 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
@@ -17,7 +17,7 @@
 import static com.google.android.gms.ads.AdSize.MEDIUM_RECTANGLE;
 
 /*
- * Compatible with version 11.0.2 of the Google Play Services SDK.
+ * Compatible with version 11.4.0 of the Google Play Services SDK.
  */
 
 // Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
index fb7c3b23..a91ab2fc 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
@@ -10,7 +10,7 @@
 import java.util.Map;
 
 /*
- * Compatible with version 11.0.2 of the Google Play Services SDK.
+ * Compatible with version 11.4.0 of the Google Play Services SDK.
  */
 
 // Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java b/extras/src/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java
index d401ea2f..e5629cba 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java
@@ -21,7 +21,7 @@
 /**
  * A {@link CustomEventRewardedVideo} used to load rewarded video Google rewarded video ads.
  *
- * Compatible with version 11.0.2 of the Google Play Services SDK.
+ * Compatible with version 11.4.0 of the Google Play Services SDK.
  */
 public class GooglePlayServicesRewardedVideo extends CustomEventRewardedVideo implements
         RewardedVideoAdListener {
diff --git a/extras/src/com/mopub/mobileads/MillennialBanner.java b/extras/src/com/mopub/mobileads/MillennialBanner.java
index 4a4b0f1a..0a329984 100644
--- a/extras/src/com/mopub/mobileads/MillennialBanner.java
+++ b/extras/src/com/mopub/mobileads/MillennialBanner.java
@@ -1,240 +1,185 @@
 package com.mopub.mobileads;
 
-import android.app.Activity;
 import android.content.Context;
-import android.os.Build;
-import android.os.Handler;
-import android.os.Looper;
 import android.util.Log;
 import android.view.Gravity;
-import android.widget.LinearLayout;
-import android.widget.LinearLayout.LayoutParams;
+import android.widget.FrameLayout;
+import android.widget.FrameLayout.LayoutParams;
 
 import com.millennialmedia.AppInfo;
+import com.millennialmedia.CreativeInfo;
 import com.millennialmedia.InlineAd;
 import com.millennialmedia.InlineAd.AdSize;
 import com.millennialmedia.InlineAd.InlineAdMetadata;
 import com.millennialmedia.InlineAd.InlineErrorStatus;
 import com.millennialmedia.MMException;
+import com.millennialmedia.MMLog;
 import com.millennialmedia.MMSDK;
-import com.millennialmedia.internal.ActivityListenerManager;
+import com.mopub.common.MoPub;
 
 import java.util.Map;
 
+
 /**
- * Compatible with version 6.3 of the Millennial Media SDK.
+ * Compatible with version 6.6 of the Millennial Media SDK.
  */
 
-class MillennialBanner extends CustomEventBanner {
+final class MillennialBanner extends CustomEventBanner {
 
     private static final String TAG = MillennialBanner.class.getSimpleName();
-    public static final String DCN_KEY = "dcn";
-    public static final String APID_KEY = "adUnitID";
-    public static final String AD_WIDTH_KEY = "adWidth";
-    public static final String AD_HEIGHT_KEY = "adHeight";
 
-    private InlineAd mInlineAd;
-    private CustomEventBannerListener mBannerListener;
-    private LinearLayout mInternalView;
-    private static final Handler UI_THREAD_HANDLER = new Handler(Looper.getMainLooper());
+    private static final String DCN_KEY = "dcn";
+    private static final String APID_KEY = "adUnitID";
+    private static final String AD_WIDTH_KEY = "adWidth";
+    private static final String AD_HEIGHT_KEY = "adHeight";
+
+    private InlineAd inlineAd;
+    private CustomEventBannerListener bannerListener;
+    private FrameLayout internalView;
+
+    static {
+        Log.i(TAG, "Millennial Media Adapter Version: " + MillennialUtils.VERSION);
+    }
+
 
+    public CreativeInfo getCreativeInfo() {
 
+        if (inlineAd == null) {
+            return null;
+        }
+
+        return inlineAd.getCreativeInfo();
+    }
+
+    
     @Override
     protected void loadBanner(final Context context, final CustomEventBannerListener customEventBannerListener,
-            final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
-
-        LayoutParams lp;
-        String apid;
-        String dcn;
-        int width;
-        int height;
-        mBannerListener = customEventBannerListener;
-
-        if (!initializeSDK(context)) {
-            Log.e(TAG, "Unable to initialize MMSDK");
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
-                }
-            });
+                              final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
+
+        bannerListener = customEventBannerListener;
+        if (!MillennialUtils.initSdk(context)) {
+            Log.e(TAG, "MM SDK must be initialized with an Activity or Application context.");
+            bannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
             return;
         }
 
-        if (extrasAreValid(serverExtras)) {
-            dcn = serverExtras.get(DCN_KEY);
-            apid = serverExtras.get(APID_KEY);
-            width = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
-            height = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
-        } else {
+        String apid = serverExtras.get(APID_KEY);
+        int width = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
+        int height = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
+
+        if (MillennialUtils.isEmpty(apid) || (width < 0) || (height < 0)) {
             Log.e(TAG, "We were given invalid extras! Make sure placement ID, width, and height are specified.");
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
+            bannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
             return;
         }
 
         // Set DCN on the AppInfo if provided
-        try {
-            AppInfo ai = new AppInfo().setMediator("mopubsdk");
-            if (dcn != null && dcn.length() > 0) {
-                ai = ai.setSiteId(dcn);
-            } else {
-                ai = ai.setSiteId(null);
-            }
-            try {
-                MMSDK.setAppInfo(ai);
-            } catch (MMException e) {
-                Log.e(TAG, "MM SDK is not initialized", e);
-            }
-        } catch (IllegalStateException e) {
-            Log.i(TAG, "Caught exception " + e.getMessage());
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
-                }
-            });
-            return;
+        String dcn = serverExtras.get(DCN_KEY);
+        AppInfo ai = new AppInfo().setMediator("mopubsdk");
+        if (!MillennialUtils.isEmpty(dcn)) {
+            ai.setSiteId(dcn);
         }
 
-        mInternalView = new LinearLayout(context);
+        try {
 
-        lp = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
-        lp.gravity = Gravity.CENTER_HORIZONTAL;
-        mInternalView.setLayoutParams(lp);
+            MMSDK.setAppInfo(ai);
 
-        InlineAdMetadata mInlineAdMetadata = null;
+            internalView = new FrameLayout(context);
 
-        try {
-            mInlineAd = InlineAd.createInstance(apid, mInternalView);
-            mInlineAdMetadata = new InlineAdMetadata().setAdSize(new AdSize(width, height));
-        } catch (MMException e) {
-            e.printStackTrace();
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
-                }
-            });
-            return;
-        }
+            LayoutParams lp = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
+            lp.gravity = Gravity.CENTER_HORIZONTAL;
+            internalView.setLayoutParams(lp);
 
-        mInlineAd.setListener(new MillennialInlineListener());
+            inlineAd = InlineAd.createInstance(apid, internalView);
+            InlineAdMetadata mInlineAdMetadata = new InlineAdMetadata().setAdSize(new AdSize(width, height));
 
-        try {
-        /* If MoPub gets location, so do we. */
-            MMSDK.setLocationEnabled((localExtras.get("location") != null));
-        } catch (MMException e) {
-            Log.e(TAG, "MM SDK is not initialized", e);
-        }
+            inlineAd.setListener(new MillennialInlineListener());
+
+            MMSDK.setLocationEnabled(MoPub.getLocationAwareness() != MoPub.LocationAwareness.DISABLED);
+
+            AdViewController.setShouldHonorServerDimensions(internalView);
 
-        AdViewController.setShouldHonorServerDimensions(mInternalView);
+            inlineAd.request(mInlineAdMetadata);
 
-        mInlineAd.request(mInlineAdMetadata);
+        } catch (MMException e) {
+            Log.e(TAG, "MM SDK exception occurred obtaining an inline ad unit.", e);
+            bannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
+        }
     }
 
+
     @Override
     protected void onInvalidate() {
         // Destroy any hanging references.
-        if (mInlineAd != null) {
-            mInlineAd.setListener(null);
-            mInlineAd = null;
+        if (inlineAd != null) {
+            inlineAd.destroy();
+            inlineAd = null;
         }
     }
 
-    private boolean initializeSDK(Context context) {
-        try {
-            if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
-                if (!MMSDK.isInitialized()) {
-                    if (context instanceof Activity) {
-                        try {
-                            MMSDK.initialize(((Activity) context), ActivityListenerManager.LifecycleState.RESUMED);
-                        } catch (Exception e) {
-                            Log.e(TAG, "Error initializing MMSDK", e);
-                            return false;
-                        }
-                    } else {
-                        Log.e(TAG, "MMSDK.initialize must be explicitly called when instantiating the MoPub AdView or InterstitialAd without an Activity.");
-                        return false;
-                    }
-                }
-            } else {
-                Log.e(TAG, "MMSDK minimum supported API is 16");
-                return false;
-            }
-            return true;
-        } catch (Exception e) {
-            Log.e(TAG, "Error initializing MMSDK", e);
-            return false;
-        }
-    }
-
-    private boolean extrasAreValid(final Map<String, String> serverExtras) {
-        try {
-            // Add pos / non-null and APIDs.
-            int w = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
-            int h = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
-            if (h < 0 || w < 0) {
-                throw new NumberFormatException();
-            }
-        } catch (Exception e) {
-            Log.e(TAG, "Width and height must exist and contain positive integers!");
-            e.printStackTrace();
-            return false;
-        }
-
-        return serverExtras.containsKey(APID_KEY);
-    }
 
     class MillennialInlineListener implements InlineAd.InlineListener {
 
         @Override
         public void onAdLeftApplication(InlineAd inlineAd) {
-            // Intentionally not calling MoPub's onLeaveApplication to avoid double-count
+            // onLeaveApplication is an alias to on clicked. We are not required to call this.
+
+            // @formatter:off
+            // https://github.com/mopub/mopub-android-sdk/blob/940eee70fe1980b4869d61cb5d668ccbab75c0ee/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
+            // @formatter:on
             Log.d(TAG, "Millennial Inline Ad - Leaving application");
         }
 
+
         @Override
         public void onClicked(InlineAd inlineAd) {
+
             Log.d(TAG, "Millennial Inline Ad - Ad clicked");
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mBannerListener.onBannerClicked();
+
+                    bannerListener.onBannerClicked();
                 }
             });
         }
 
+
         @Override
         public void onCollapsed(InlineAd inlineAd) {
+
             Log.d(TAG, "Millennial Inline Ad - Banner collapsed");
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mBannerListener.onBannerCollapsed();
+
+                    bannerListener.onBannerCollapsed();
                 }
             });
 
         }
 
+
         @Override
         public void onExpanded(InlineAd inlineAd) {
+
             Log.d(TAG, "Millennial Inline Ad - Banner expanded");
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mBannerListener.onBannerExpanded();
+
+                    bannerListener.onBannerExpanded();
                 }
             });
         }
 
+
         @Override
         public void onRequestFailed(InlineAd inlineAd, InlineErrorStatus inlineErrorStatus) {
-            Log.d(TAG, "Millennial Inline Ad - Banner failed (" + inlineErrorStatus.getErrorCode() + "): " + inlineErrorStatus.getDescription());
+
+            Log.d(TAG, "Millennial Inline Ad - Banner failed (" + inlineErrorStatus.getErrorCode() + "): " +
+                    inlineErrorStatus.getDescription());
+
             MoPubErrorCode mopubErrorCode;
 
             switch (inlineErrorStatus.getErrorCode()) {
@@ -259,38 +204,51 @@ public void onRequestFailed(InlineAd inlineAd, InlineErrorStatus inlineErrorStat
             }
 
             final MoPubErrorCode fErrorCode = mopubErrorCode;
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mBannerListener.onBannerFailed(fErrorCode);
+
+                    bannerListener.onBannerFailed(fErrorCode);
                 }
             });
 
         }
 
+
         @Override
         public void onRequestSucceeded(InlineAd inlineAd) {
+
             Log.d(TAG, "Millennial Inline Ad - Banner request succeeded");
-            UI_THREAD_HANDLER.post(new Runnable() {
+
+            CreativeInfo creativeInfo = getCreativeInfo();
+
+            if ((creativeInfo != null) && MMLog.isDebugEnabled()) {
+                MMLog.d(TAG, "Banner Creative Info: " + creativeInfo);
+            }
+
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mBannerListener.onBannerLoaded(mInternalView);
+
+                    bannerListener.onBannerLoaded(internalView);
                 }
             });
         }
 
+
         @Override
         public void onResize(InlineAd inlineAd, int w, int h) {
+
             Log.d(TAG, "Millennial Inline Ad - Banner about to resize (width: " + w + ", height: " + h + ")");
         }
 
+
         @Override
         public void onResized(InlineAd inlineAd, int w, int h, boolean isClosed) {
-            Log.d(TAG, "Millennial Inline Ad - Banner resized (width: " + w + ", height: " + h + "). "
-                    + (isClosed ? "Returned to original placement." : "Got a fresh, new place."));
 
-        }
+            Log.d(TAG, "Millennial Inline Ad - Banner resized (width: " + w + ", height: " + h + "). " +
+                    (isClosed ? "Returned to original placement." : "Got a fresh, new place."));
 
+        }
     }
-
 }
diff --git a/extras/src/com/mopub/mobileads/MillennialInterstitial.java b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
index 55eef347..cbb6c879 100644
--- a/extras/src/com/mopub/mobileads/MillennialInterstitial.java
+++ b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
@@ -1,222 +1,188 @@
 package com.mopub.mobileads;
 
-import android.app.Activity;
 import android.content.Context;
-import android.os.Build;
-import android.os.Handler;
-import android.os.Looper;
 import android.util.Log;
 
 import com.millennialmedia.AppInfo;
+import com.millennialmedia.CreativeInfo;
 import com.millennialmedia.InterstitialAd;
 import com.millennialmedia.InterstitialAd.InterstitialErrorStatus;
 import com.millennialmedia.InterstitialAd.InterstitialListener;
 import com.millennialmedia.MMException;
+import com.millennialmedia.MMLog;
 import com.millennialmedia.MMSDK;
-import com.millennialmedia.internal.ActivityListenerManager;
+import com.mopub.common.MoPub;
 
 import java.util.Map;
 
+
 /**
- * Compatible with version 6.3 of the Millennial Media SDK.
+ * Compatible with version 6.6 of the Millennial Media SDK.
  */
 
-class MillennialInterstitial extends CustomEventInterstitial {
+final class MillennialInterstitial extends CustomEventInterstitial {
 
     private static final String TAG = MillennialInterstitial.class.getSimpleName();
-    public static final String DCN_KEY = "dcn";
-    public static final String APID_KEY = "adUnitID";
+    private static final String DCN_KEY = "dcn";
+    private static final String APID_KEY = "adUnitID";
+
+    private InterstitialAd millennialInterstitial;
+    private Context context;
+    private CustomEventInterstitialListener interstitialListener;
+
+    static {
+        Log.i(TAG, "Millennial Media Adapter Version: " + MillennialUtils.VERSION);
+    }
+
+
+    public CreativeInfo getCreativeInfo() {
+
+        if (millennialInterstitial == null) {
+            return null;
+        }
+
+        return millennialInterstitial.getCreativeInfo();
+    }
 
-    private InterstitialAd mMillennialInterstitial;
-    private Context mContext;
-    private CustomEventInterstitialListener mInterstitialListener;
-    private static final Handler UI_THREAD_HANDLER = new Handler(Looper.getMainLooper());
 
     @Override
-    protected void loadInterstitial(final Context context, final CustomEventInterstitialListener customEventInterstitialListener,
-            final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
-        String dcn;
-        mInterstitialListener = customEventInterstitialListener;
-        mContext = context;
+    protected void loadInterstitial(final Context context,
+                                    final CustomEventInterstitialListener customEventInterstitialListener,
+                                    final Map<String, Object> localExtras,
+                                    final Map<String, String> serverExtras) {
 
-        final String apid;
+        interstitialListener = customEventInterstitialListener;
+        this.context = context;
 
-        if (!initializeSDK(context)) {
-            Log.e(TAG, "Unable to initialize MMSDK");
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
-                }
-            });
+        if (!MillennialUtils.initSdk(context)) {
+            Log.e(TAG, "MM SDK must be initialized with an Activity or Application context.");
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
             return;
         }
 
-        if (extrasAreValid(serverExtras)) {
-            dcn = serverExtras.get(DCN_KEY);
-            apid = serverExtras.get(APID_KEY);
-        } else {
+        String apid = serverExtras.get(APID_KEY);
+
+        if (MillennialUtils.isEmpty(apid)) {
             Log.e(TAG, "Invalid extras-- Be sure you have an placement ID specified.");
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+
             return;
         }
 
         // Add DCN support
-        try {
-            AppInfo ai = new AppInfo().setMediator("mopubsdk");
-            if (dcn != null && dcn.length() > 0) {
-                ai = ai.setSiteId(dcn);
-            } else {
-                ai.setSiteId(null);
-            }
-            try {
-                MMSDK.setAppInfo(ai);
-            } catch (MMException e) {
-                Log.e(TAG, "MM SDK is not initialized", e);
-            }
-        } catch (IllegalStateException e) {
-            Log.i(TAG, "SDK not finished initializing-- " + e.getMessage());
-        }
+        String dcn = serverExtras.get(DCN_KEY);
 
-        try {
-        /* If MoPub gets location, so do we. */
-            MMSDK.setLocationEnabled((localExtras.get("location") != null));
-        } catch (MMException e) {
-            Log.e(TAG, "MM SDK is not initialized", e);
+        AppInfo ai = new AppInfo().setMediator("mopubsdk");
+        if (!MillennialUtils.isEmpty(dcn)) {
+            ai.setSiteId(dcn);
         }
 
         try {
-            mMillennialInterstitial = InterstitialAd.createInstance(apid);
+            MMSDK.setAppInfo(ai);
+            MMSDK.setLocationEnabled(MoPub.getLocationAwareness() != MoPub.LocationAwareness.DISABLED);
+            millennialInterstitial = InterstitialAd.createInstance(apid);
+            millennialInterstitial.setListener(new MillennialInterstitialListener());
+            millennialInterstitial.load(context, null);
         } catch (MMException e) {
-            e.printStackTrace();
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
-                }
-            });
-            return;
+            Log.e(TAG, "Exception occurred while obtaining an interstitial from MM SDK.", e);
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
         }
-
-        mMillennialInterstitial.setListener(new MillennialInterstitialListener());
-        mMillennialInterstitial.load(context, null);
     }
 
+
     @Override
     protected void showInterstitial() {
-        if (mMillennialInterstitial.isReady()) {
+
+        if (millennialInterstitial.isReady()) {
             try {
-                mMillennialInterstitial.show(mContext);
+                millennialInterstitial.show(context);
             } catch (MMException e) {
-                e.printStackTrace();
-                UI_THREAD_HANDLER.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
-                    }
-                });
-                return;
+                MMLog.e(TAG, "An exception occurred while attempting to show interstitial.", e);
+                interstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
             }
         } else {
-            Log.w(TAG, "showInterstitial called before Millennial's ad was loaded.");
+            Log.w(TAG, "showInterstitial called but interstitial is not ready.");
         }
     }
 
+
     @Override
     protected void onInvalidate() {
-        if (mMillennialInterstitial != null) {
-            mMillennialInterstitial.setListener(null);
-            mMillennialInterstitial = null;
-        }
-    }
 
-    private boolean initializeSDK(Context context) {
-        try {
-            if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
-                if (!MMSDK.isInitialized()) {
-                    if (context instanceof Activity) {
-                        try {
-                            MMSDK.initialize(((Activity) context), ActivityListenerManager.LifecycleState.RESUMED);
-                        } catch (Exception e) {
-                            Log.e(TAG, "Error initializing MMSDK", e);
-                            return false;
-                        }
-                    } else {
-                        Log.e(TAG, "MMSDK.initialize must be explicitly called when instantiating the MoPub AdView or InterstitialAd without an Activity.");
-                        return false;
-                    }
-                }
-            } else {
-                Log.e(TAG, "MMSDK minimum supported API is 16");
-                return false;
-            }
-            return true;
-        } catch (Exception e) {
-            Log.e(TAG, "Error initializing MMSDK", e);
-            return false;
+        if (millennialInterstitial != null) {
+            millennialInterstitial.destroy();
+            millennialInterstitial = null;
         }
     }
 
-    private boolean extrasAreValid(Map<String, String> serverExtras) {
-        return serverExtras.containsKey(APID_KEY);
-    }
 
     class MillennialInterstitialListener implements InterstitialListener {
 
         @Override
         public void onAdLeftApplication(InterstitialAd interstitialAd) {
-            // Intentionally not calling MoPub's onLeaveApplication to avoid double-count
+            // onLeaveApplication is an alias to on clicked. We are not required to call this.
+
+            // @formatter:off
+            // https://github.com/mopub/mopub-android-sdk/blob/940eee70fe1980b4869d61cb5d668ccbab75c0ee/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
+            // @formatter:on
             Log.d(TAG, "Millennial Interstitial Ad - Leaving application");
         }
 
+
         @Override
         public void onClicked(InterstitialAd interstitialAd) {
+
             Log.d(TAG, "Millennial Interstitial Ad - Ad was clicked");
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialClicked();
+
+                    interstitialListener.onInterstitialClicked();
                 }
             });
         }
 
+
         @Override
         public void onClosed(InterstitialAd interstitialAd) {
+
             Log.d(TAG, "Millennial Interstitial Ad - Ad was closed");
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialDismissed();
+
+                    interstitialListener.onInterstitialDismissed();
                 }
             });
         }
 
+
         @Override
         public void onExpired(InterstitialAd interstitialAd) {
+
             Log.d(TAG, "Millennial Interstitial Ad - Ad expired");
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
+
+                    interstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
                 }
             });
         }
 
+
         @Override
-        public void onLoadFailed(InterstitialAd interstitialAd,
-                InterstitialErrorStatus interstitialErrorStatus) {
-            Log.d(TAG, "Millennial Interstitial Ad - load failed (" + interstitialErrorStatus.getErrorCode() + "): " + interstitialErrorStatus.getDescription());
+        public void onLoadFailed(InterstitialAd interstitialAd, InterstitialErrorStatus interstitialErrorStatus) {
+
+            Log.d(TAG, "Millennial Interstitial Ad - load failed (" + interstitialErrorStatus.getErrorCode() + "): " +
+                    interstitialErrorStatus.getDescription());
+
             final MoPubErrorCode moPubErrorCode;
 
             switch (interstitialErrorStatus.getErrorCode()) {
                 case InterstitialErrorStatus.ALREADY_LOADED:
                     // This will generate discrepancies, as requests will NOT be sent to Millennial.
-                    mInterstitialListener.onInterstitialLoaded();
+                    interstitialListener.onInterstitialLoaded();
                     Log.w(TAG, "Millennial Interstitial Ad - Attempted to load ads when ads are already loaded.");
                     return;
                 case InterstitialErrorStatus.EXPIRED:
@@ -237,44 +203,62 @@ public void onLoadFailed(InterstitialAd interstitialAd,
                     moPubErrorCode = MoPubErrorCode.NETWORK_NO_FILL;
             }
 
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialFailed(moPubErrorCode);
+
+                    interstitialListener.onInterstitialFailed(moPubErrorCode);
                 }
             });
         }
 
+
         @Override
         public void onLoaded(InterstitialAd interstitialAd) {
+
             Log.d(TAG, "Millennial Interstitial Ad - Ad loaded splendidly");
-            UI_THREAD_HANDLER.post(new Runnable() {
+
+            CreativeInfo creativeInfo = getCreativeInfo();
+
+            if ((creativeInfo != null) && MMLog.isDebugEnabled()) {
+                MMLog.d(TAG, "Interstitial Creative Info: " + creativeInfo);
+            }
+
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialLoaded();
+
+                    interstitialListener.onInterstitialLoaded();
                 }
             });
         }
 
+
         @Override
-        public void onShowFailed(InterstitialAd interstitialAd,
-                InterstitialErrorStatus interstitialErrorStatus) {
-            Log.e(TAG, "Millennial Interstitial Ad - Show failed (" + interstitialErrorStatus.getErrorCode() + "): " + interstitialErrorStatus.getDescription());
-            UI_THREAD_HANDLER.post(new Runnable() {
+        public void onShowFailed(InterstitialAd interstitialAd, InterstitialErrorStatus interstitialErrorStatus) {
+
+            Log.e(TAG, "Millennial Interstitial Ad - Show failed (" + interstitialErrorStatus.getErrorCode() + "): " +
+                    interstitialErrorStatus.getDescription());
+
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+
+                    interstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
                 }
             });
         }
 
+
         @Override
         public void onShown(InterstitialAd interstitialAd) {
+
             Log.d(TAG, "Millennial Interstitial Ad - Ad shown");
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialShown();
+
+                    interstitialListener.onInterstitialShown();
                 }
             });
         }
diff --git a/extras/src/com/mopub/mobileads/MillennialRewardedVideo.java b/extras/src/com/mopub/mobileads/MillennialRewardedVideo.java
new file mode 100644
index 00000000..ca906ba1
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/MillennialRewardedVideo.java
@@ -0,0 +1,361 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.Log;
+
+import com.millennialmedia.AppInfo;
+import com.millennialmedia.CreativeInfo;
+import com.millennialmedia.InterstitialAd;
+import com.millennialmedia.InterstitialAd.InterstitialErrorStatus;
+import com.millennialmedia.InterstitialAd.InterstitialListener;
+import com.millennialmedia.MMException;
+import com.millennialmedia.MMLog;
+import com.millennialmedia.MMSDK;
+import com.millennialmedia.XIncentivizedEventListener;
+import com.mopub.common.BaseLifecycleListener;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MoPub;
+import com.mopub.common.MoPubReward;
+
+import java.util.Map;
+
+
+/**
+ * Compatible with version 6.6 of the Millennial Media SDK.
+ */
+
+@SuppressWarnings("unused")
+final class MillennialRewardedVideo extends CustomEventRewardedVideo {
+
+    private static final String TAG = MillennialRewardedVideo.class.getSimpleName();
+    public static final String DCN_KEY = "dcn";
+    public static final String APID_KEY = "adUnitID";
+
+    private InterstitialAd millennialInterstitial;
+    private MillennialRewardedVideoListener millennialRewardedVideoListener = new MillennialRewardedVideoListener();
+    private Context context;
+    private String apid = null;
+
+    static {
+        Log.i(TAG, "Millennial Media Adapter Version: " + MillennialUtils.VERSION);
+    }
+
+
+    public CreativeInfo getCreativeInfo() {
+
+        if (millennialInterstitial == null) {
+            return null;
+        }
+
+        return millennialInterstitial.getCreativeInfo();
+    }
+
+
+    @Nullable
+    @Override
+    protected CustomEventRewardedVideoListener getVideoListenerForSdk() {
+
+        return millennialRewardedVideoListener;
+    }
+
+
+    @Nullable
+    @Override
+    protected LifecycleListener getLifecycleListener() {
+
+        return new BaseLifecycleListener();
+    }
+
+
+    @NonNull
+    @Override
+    protected String getAdNetworkId() {
+
+        return (apid == null) ? "" : apid;
+    }
+
+
+    @Override
+    protected void onInvalidate() {
+
+        if (millennialInterstitial != null) {
+            millennialInterstitial.destroy();
+            millennialInterstitial = null;
+            apid = null;
+        }
+    }
+
+
+    @Override
+    protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
+            @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) throws Exception {
+
+        if (!MillennialUtils.initSdk(launcherActivity)) {
+            Log.e(TAG, "MM SDK must be initialized with an Activity or Application context.");
+
+            return false;
+        }
+
+        return true;
+    }
+
+
+    @Override
+    protected void loadWithSdkInitialized(@NonNull Activity activity, @NonNull Map<String, Object> localExtras,
+            @NonNull Map<String, String> serverExtras) throws Exception {
+
+        this.context = activity.getApplicationContext();
+        apid = serverExtras.get(APID_KEY);
+        String dcn = serverExtras.get(DCN_KEY);
+
+        if (MillennialUtils.isEmpty(apid)) {
+            Log.e(TAG, "Invalid extras-- Be sure you have a placement ID specified.");
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(MillennialRewardedVideo.class, "",
+                    MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+
+            return;
+        }
+
+        // Add DCN support
+        AppInfo ai = new AppInfo().setMediator("mopubsdk").setSiteId(dcn);
+        try {
+            MMSDK.setAppInfo(ai);
+			/* If MoPub gets location, so do we. */
+            MMSDK.setLocationEnabled(MoPub.getLocationAwareness() != MoPub.LocationAwareness.DISABLED);
+
+            millennialInterstitial = InterstitialAd.createInstance(apid);
+            millennialInterstitial.setListener(millennialRewardedVideoListener);
+            millennialInterstitial.xSetIncentivizedListener(millennialRewardedVideoListener);
+            millennialInterstitial.load(activity, null);
+
+        } catch (MMException e) {
+            Log.e(TAG, "An exception occurred loading an InterstitialAd", e);
+            MoPubRewardedVideoManager
+                    .onRewardedVideoLoadFailure(MillennialRewardedVideo.class, apid, MoPubErrorCode.INTERNAL_ERROR);
+        }
+    }
+
+
+    @Override
+    protected boolean hasVideoAvailable() {
+
+        return ((millennialInterstitial != null) && millennialInterstitial.isReady());
+    }
+
+
+    @Override
+    protected void showVideo() {
+
+        if ((millennialInterstitial != null) && millennialInterstitial.isReady()) {
+            try {
+                millennialInterstitial.show(context);
+            } catch (MMException e) {
+                Log.e(TAG, "An exception occurred showing the MM SDK interstitial.", e);
+                MoPubRewardedVideoManager
+                        .onRewardedVideoPlaybackError(MillennialRewardedVideo.class, millennialInterstitial.placementId,
+                                MoPubErrorCode.INTERNAL_ERROR);
+            }
+        } else {
+            Log.w(TAG, "showVideo called before MillennialInterstitial ad was loaded.");
+        }
+    }
+
+
+    class MillennialRewardedVideoListener
+            implements InterstitialListener, XIncentivizedEventListener, CustomEventRewardedVideoListener {
+
+        @Override
+        public void onAdLeftApplication(InterstitialAd interstitialAd) {
+            // onLeaveApplication is an alias to on clicked. We are not required to call this.
+
+            // @formatter:off
+            // https://github.com/mopub/mopub-android-sdk/blob/940eee70fe1980b4869d61cb5d668ccbab75c0ee/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
+            // @formatter:on
+            Log.d(TAG, "Millennial Rewarded Video Ad - Leaving application");
+        }
+
+
+        @Override
+        public void onClicked(final InterstitialAd interstitialAd) {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - Ad was clicked");
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoClicked(MillennialRewardedVideo.class, interstitialAd.placementId);
+                }
+            });
+        }
+
+
+        @Override
+        public void onClosed(final InterstitialAd interstitialAd) {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - Ad was closed");
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoClosed(MillennialRewardedVideo.class, interstitialAd.placementId);
+                }
+            });
+        }
+
+
+        @Override
+        public void onExpired(final InterstitialAd interstitialAd) {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - Ad expired");
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoLoadFailure(MillennialRewardedVideo.class, interstitialAd.placementId,
+                                    MoPubErrorCode.VIDEO_NOT_AVAILABLE);
+                }
+            });
+        }
+
+
+        @Override
+        public void onLoadFailed(final InterstitialAd interstitialAd, InterstitialErrorStatus
+                interstitialErrorStatus) {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - load failed (" + interstitialErrorStatus.getErrorCode() + "): " +
+                    interstitialErrorStatus.getDescription());
+
+            final MoPubErrorCode moPubErrorCode;
+
+            switch (interstitialErrorStatus.getErrorCode()) {
+                case InterstitialErrorStatus.ALREADY_LOADED:
+                    // This will generate discrepancies, as requests will NOT be sent to Millennial.
+                    MillennialUtils.postOnUiThread(new Runnable() {
+                        @Override
+                        public void run() {
+
+                            MoPubRewardedVideoManager
+                                    .onRewardedVideoLoadSuccess(MillennialRewardedVideo.class, interstitialAd.placementId);
+                        }
+                    });
+                    Log.w(TAG, "Millennial Rewarded Video Ad - Attempted to load ads when ads are already loaded.");
+                    return;
+                case InterstitialErrorStatus.EXPIRED:
+                case InterstitialErrorStatus.DISPLAY_FAILED:
+                case InterstitialErrorStatus.INIT_FAILED:
+                case InterstitialErrorStatus.ADAPTER_NOT_FOUND:
+                    moPubErrorCode = MoPubErrorCode.INTERNAL_ERROR;
+                    break;
+                case InterstitialErrorStatus.NO_NETWORK:
+                    moPubErrorCode = MoPubErrorCode.NO_CONNECTION;
+                    break;
+                case InterstitialErrorStatus.UNKNOWN:
+                    moPubErrorCode = MoPubErrorCode.UNSPECIFIED;
+                    break;
+                case InterstitialErrorStatus.NOT_LOADED:
+                case InterstitialErrorStatus.LOAD_FAILED:
+                default:
+                    moPubErrorCode = MoPubErrorCode.NETWORK_NO_FILL;
+            }
+
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoLoadFailure(MillennialRewardedVideo.class, interstitialAd.placementId,
+                                    moPubErrorCode);
+                }
+            });
+        }
+
+
+        @Override
+        public void onLoaded(final InterstitialAd interstitialAd) {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - Ad loaded splendidly");
+
+            CreativeInfo creativeInfo = getCreativeInfo();
+
+            if ((creativeInfo != null) && MMLog.isDebugEnabled()) {
+                MMLog.d(TAG, "Rewarded Video Creative Info: " + creativeInfo);
+            }
+
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoLoadSuccess(MillennialRewardedVideo.class, interstitialAd.placementId);
+                }
+            });
+        }
+
+
+        @Override
+        public void onShowFailed(final InterstitialAd interstitialAd, InterstitialErrorStatus
+                interstitialErrorStatus) {
+
+            Log.e(TAG, "Millennial Rewarded Video Ad - Show failed (" + interstitialErrorStatus.getErrorCode() + "): " +
+                    interstitialErrorStatus.getDescription());
+
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoPlaybackError(MillennialRewardedVideo.class, interstitialAd.placementId,
+                                    MoPubErrorCode.VIDEO_PLAYBACK_ERROR);
+                }
+            });
+        }
+
+
+        @Override
+        public void onShown(final InterstitialAd interstitialAd) {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - Ad shown");
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoStarted(MillennialRewardedVideo.class, interstitialAd.placementId);
+                }
+            });
+        }
+
+
+        @Override
+        public boolean onVideoComplete() {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - Video completed");
+            MillennialUtils.postOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    MoPubRewardedVideoManager
+                            .onRewardedVideoCompleted(MillennialRewardedVideo.class, millennialInterstitial.placementId,
+                                    MoPubReward.success(MoPubReward.NO_REWARD_LABEL, MoPubReward.DEFAULT_REWARD_AMOUNT));
+                }
+            });
+            return false;
+        }
+
+
+        @Override
+        public boolean onCustomEvent(XIncentiveEvent xIncentiveEvent) {
+
+            Log.d(TAG, "Millennial Rewarded Video Ad - Custom event received: " + xIncentiveEvent.eventId + ", " +
+                    xIncentiveEvent.args);
+
+            return false;
+        }
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/MillennialUtils.java b/extras/src/com/mopub/mobileads/MillennialUtils.java
new file mode 100644
index 00000000..0417e7ee
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/MillennialUtils.java
@@ -0,0 +1,65 @@
+package com.mopub.mobileads;
+
+import android.app.Application;
+import android.content.Context;
+import android.os.Handler;
+import android.os.Looper;
+import android.support.annotation.NonNull;
+import android.util.Log;
+
+import com.millennialmedia.MMException;
+import com.millennialmedia.MMSDK;
+import com.mopub.common.Preconditions;
+
+
+final public class MillennialUtils {
+    private static final String LOG_TAG = MillennialUtils.class.getSimpleName();
+
+    private static final Handler handler = new Handler(Looper.getMainLooper());
+
+    public static final String VERSION = "1.2.0";
+
+    private static volatile boolean sIsInitialized = false;
+
+    public static void postOnUiThread(Runnable runnable) {
+        handler.post(runnable);
+    }
+
+    public static boolean isEmpty(String s) {
+        return (s == null || s.trim().isEmpty());
+    }
+
+    /**
+     * @param context - application or activity context
+     * @return {@code true} successfully initialized
+     */
+    public static boolean initSdk(@NonNull Context context) {
+        if (sIsInitialized) {
+            return true;
+        }
+
+        synchronized (MillennialUtils.class) {
+            if (sIsInitialized) {
+                return true;
+            }
+            Preconditions.checkNotNull(context);
+
+            final Application application;
+            if (context instanceof Application) {
+                application = (Application) context;
+            } else {
+                application = (Application) context.getApplicationContext();
+            }
+
+            try {
+                MMSDK.initialize(application);
+            } catch (MMException e) {
+                Log.e(LOG_TAG, "Exception occurred initializing the MM SDK.", e);
+                return false;
+            }
+
+            sIsInitialized = true;
+        }
+        return true;
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/TapjoyInterstitial.java b/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
index 48980569..9a87ee6a 100644
--- a/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
+++ b/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
@@ -24,7 +24,7 @@
 
 import java.util.Map;
 
-// Tested with Tapjoy SDK 11.8.2
+// Tested with Tapjoy SDK 11.11.0
 public class TapjoyInterstitial extends CustomEventInterstitial implements TJPlacementListener {
     private static final String TAG = TapjoyInterstitial.class.getSimpleName();
     private static final String TJC_MOPUB_NETWORK_CONSTANT = "mopub";
diff --git a/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java b/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
index b08d8f04..8613c441 100644
--- a/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
@@ -21,7 +21,7 @@
 import java.util.Hashtable;
 import java.util.Map;
 
-// Tested with Tapjoy SDK 11.8.2
+// Tested with Tapjoy SDK 11.11.0
 public class TapjoyRewardedVideo extends CustomEventRewardedVideo {
     private static final String TAG = TapjoyRewardedVideo.class.getSimpleName();
     private static final String TJC_MOPUB_NETWORK_CONSTANT = "mopub";
diff --git a/extras/src/com/mopub/mobileads/UnityInterstitial.java b/extras/src/com/mopub/mobileads/UnityInterstitial.java
index d9361a30..37b31b27 100644
--- a/extras/src/com/mopub/mobileads/UnityInterstitial.java
+++ b/extras/src/com/mopub/mobileads/UnityInterstitial.java
@@ -10,7 +10,7 @@
 import java.util.Map;
 
 /**
- * Certified with Unity Ads 2.1.0
+ * Certified with Unity Ads 2.1.1
  */
 public class UnityInterstitial extends CustomEventInterstitial implements IUnityAdsExtendedListener {
 
diff --git a/extras/src/com/mopub/mobileads/UnityRewardedVideo.java b/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
index 02ab0e70..24636be9 100644
--- a/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
@@ -17,13 +17,13 @@
 /**
  * A custom event for showing Unity rewarded videos.
  *
- * Certified with Unity Ads 2.1.0
+ * Certified with Unity Ads 2.1.1
  */
 public class UnityRewardedVideo extends CustomEventRewardedVideo {
     private static final String GAME_ID_KEY = "gameId";
     private static final LifecycleListener sLifecycleListener = new UnityLifecycleListener();
     private static final UnityAdsListener sUnityAdsListener = new UnityAdsListener();
-    private static String sPlacementId = "rewardedVideo";
+    private static String sPlacementId = "";
 
     @Nullable
     private Activity mLauncherActivity;
diff --git a/extras/src/com/mopub/mobileads/UnityRouter.java b/extras/src/com/mopub/mobileads/UnityRouter.java
index 951a91c5..a7358947 100644
--- a/extras/src/com/mopub/mobileads/UnityRouter.java
+++ b/extras/src/com/mopub/mobileads/UnityRouter.java
@@ -12,7 +12,7 @@
 import java.util.Map;
 
 /**
- * Certified with Unity Ads 2.1.0
+ * Certified with Unity Ads 2.1.1
  */
 public class UnityRouter {
     private static String sCurrentPlacementId;
diff --git a/extras/src/com/mopub/mobileads/VungleInterstitial.java b/extras/src/com/mopub/mobileads/VungleInterstitial.java
index f7a9e5dd..ba140085 100644
--- a/extras/src/com/mopub/mobileads/VungleInterstitial.java
+++ b/extras/src/com/mopub/mobileads/VungleInterstitial.java
@@ -3,32 +3,41 @@
 import android.content.Context;
 import android.os.Handler;
 import android.os.Looper;
-import android.util.Log;
+import android.support.annotation.NonNull;
 
-import com.vungle.publisher.EventListener;
-import com.vungle.publisher.VunglePub;
+import com.mopub.common.logging.MoPubLog;
 
 import java.util.Map;
 
-/*
- * Tested with Vungle SDK 4.0.2
+/**
+ * A custom event for showing Vungle Interstitial.
+ * <p>
+ * Certified with Vungle SDK 5.3.0
  */
-public class VungleInterstitial extends CustomEventInterstitial implements EventListener {
+public class VungleInterstitial extends CustomEventInterstitial {
 
-    private static final String DEFAULT_VUNGLE_APP_ID = "YOUR_DEFAULT_VUNGLE_APP_ID";
+    private static final String INTERSTITIAL_TAG = "Vungle Interstitial: ";
 
     /*
      * APP_ID_KEY is intended for MoPub internal use. Do not modify.
      */
     public static final String APP_ID_KEY = "appId";
+    public static final String PLACEMENT_ID_KEY = "pid";
+    public static final String PLACEMENT_IDS_KEY = "pids";
 
-    private final VunglePub mVunglePub;
+    private static VungleRouter sVungleRouter;
     private final Handler mHandler;
     private CustomEventInterstitialListener mCustomEventInterstitialListener;
+    private VungleInterstitialRouterListener mVungleRouterListener;
+    private String mAppId;
+    private String mPlacementId;
+    private String[] mPlacementIds;
+    private boolean mIsPlaying;
+
 
     public VungleInterstitial() {
         mHandler = new Handler(Looper.getMainLooper());
-        mVunglePub = VunglePub.getInstance();
+        sVungleRouter = VungleRouter.getInstance();
     }
 
     @Override
@@ -37,96 +46,192 @@ protected void loadInterstitial(Context context,
             Map<String, Object> localExtras,
             Map<String, String> serverExtras) {
         mCustomEventInterstitialListener = customEventInterstitialListener;
+        mIsPlaying = false;
 
         if (context == null) {
-            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+            mHandler.post(new Runnable() {
+                @Override
+                public void run() {
+                    mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+                }
+            });
+
             return;
         }
 
-        /*
-         * You may pass the Vungle App Id in the serverExtras Map by specifying Custom Event Data
-         * in MoPub's web interface.
-         */
-        final String appId;
-        if (extrasAreValid(serverExtras)) {
-            appId = serverExtras.get(APP_ID_KEY);
-        } else {
-            appId = DEFAULT_VUNGLE_APP_ID;
+        if (!validateIdsInServerExtras(serverExtras)) {
+            mHandler.post(new Runnable() {
+                @Override
+                public void run() {
+                    mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+                }
+            });
+
+            return;
         }
 
-        // init clears the event listener.
-        mVunglePub.init(context, appId);
-        mVunglePub.setEventListeners(this);
-        if (mVunglePub.isAdPlayable()) {
-            Log.d("MoPub", "Vungle interstitial ad successfully loaded.");
-            mCustomEventInterstitialListener.onInterstitialLoaded();
-        } else {
-            Log.d("MoPub", "Vungle interstitial ad is not loaded.");
-            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        if (mVungleRouterListener == null) {
+            mVungleRouterListener = new VungleInterstitialRouterListener();
+        }
+
+        if (!sVungleRouter.isVungleInitialized()) {
+            sVungleRouter.initVungle(context, mAppId, mPlacementIds);
         }
+
+        sVungleRouter.loadAdForPlacement(mPlacementId, mVungleRouterListener);
     }
 
     @Override
     protected void showInterstitial() {
-        if (mVunglePub.isAdPlayable()) {
-            mVunglePub.playAd();
+        if (sVungleRouter.isAdPlayableForPlacement(mPlacementId)) {
+            sVungleRouter.playAdForPlacement(mPlacementId, null);
+            mIsPlaying = true;
         } else {
-            Log.d("MoPub", "Tried to show a Vungle interstitial ad before it finished loading. Please try again.");
+            MoPubLog.d(INTERSTITIAL_TAG + "SDK tried to show a Vungle interstitial ad before it finished loading. Please try again.");
+            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
         }
     }
 
     @Override
     protected void onInvalidate() {
-        mVunglePub.clearEventListeners();
+        MoPubLog.d(INTERSTITIAL_TAG + "onInvalidate is called for Placement ID:" + mPlacementId);
+        sVungleRouter.removeRouterListener(mPlacementId);
+        mVungleRouterListener = null;
     }
 
-    private boolean extrasAreValid(Map<String, String> serverExtras) {
-        return serverExtras.containsKey(APP_ID_KEY);
-    }
+    // private functions
+    private boolean validateIdsInServerExtras(Map<String, String> serverExtras) {
+        boolean isAllDataValid = true;
 
-    /*
-     * EventListener implementation
-     */
+        if (serverExtras.containsKey(APP_ID_KEY)) {
+            mAppId = serverExtras.get(APP_ID_KEY);
+            if (mAppId.isEmpty()) {
+                MoPubLog.w(INTERSTITIAL_TAG + "App ID is empty.");
+                isAllDataValid = false;
+            }
+        } else {
+            MoPubLog.w(INTERSTITIAL_TAG + "AppID is not in serverExtras.");
+            isAllDataValid = false;
+        }
 
-    @Override
-    public void onVideoView(final boolean isCompletedView, final int watchedMillis, final int videoDurationMillis) {
-        final double watchedPercent = (double) watchedMillis / videoDurationMillis * 100;
-        Log.d("MoPub", String.format("%.1f%% of Vungle video watched.", watchedPercent));
-    }
+        if (serverExtras.containsKey(PLACEMENT_ID_KEY)) {
+            mPlacementId = serverExtras.get(PLACEMENT_ID_KEY);
+            if (mPlacementId.isEmpty()) {
+                MoPubLog.w(INTERSTITIAL_TAG + "Placement ID for this Ad Unit is empty.");
+                isAllDataValid = false;
+            }
+        } else {
+            MoPubLog.w(INTERSTITIAL_TAG + "Placement ID for this Ad Unit is not in serverExtras.");
+            isAllDataValid = false;
+        }
 
-    @Override
-    public void onAdStart() {
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                Log.d("MoPub", "Showing Vungle interstitial ad.");
-                mCustomEventInterstitialListener.onInterstitialShown();
+        if (serverExtras.containsKey(PLACEMENT_IDS_KEY)) {
+            mPlacementIds = serverExtras.get(PLACEMENT_IDS_KEY).replace(" ", "").split(",", 0);
+            if (mPlacementIds.length == 0) {
+                MoPubLog.w(INTERSTITIAL_TAG + "Placement IDs are empty.");
+                isAllDataValid = false;
             }
-        });
-    }
+        } else {
+            MoPubLog.w(INTERSTITIAL_TAG + "Placement IDs for this Ad Unit is not in serverExtras.");
+            isAllDataValid = false;
+        }
 
-    @Override
-    public void onAdEnd(final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                Log.d("MoPub", "Vungle interstitial ad dismissed.");
-                mCustomEventInterstitialListener.onInterstitialDismissed();
-                if (wasCallToActionClicked) {
-                    mCustomEventInterstitialListener.onInterstitialClicked();
+        if (isAllDataValid) {
+            boolean foundInList = false;
+            for (String pid : mPlacementIds) {
+                if (pid.equals(mPlacementId)) {
+                    foundInList = true;
                 }
             }
-        });
-    }
+            if (!foundInList) {
+                MoPubLog.w(INTERSTITIAL_TAG + "Placement IDs for this Ad Unit is not in the array of Placement IDs");
+                isAllDataValid = false;
+            }
+        }
 
-    @Override
-    public void onAdUnavailable(final String s) {
-        mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        return isAllDataValid;
     }
 
-    @Override
-    public void onAdPlayableChanged(final boolean playable) {
-        Log.d("MoPub", String.format("Vungle interstitial ad is %s.",
-                playable ? "playable" : "not playable"));
+
+    /*
+     * VungleRouterListener
+     */
+    private class VungleInterstitialRouterListener implements VungleRouterListener {
+        @Override
+        public void onAdEnd(@NonNull String placementReferenceId, final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(INTERSTITIAL_TAG + "onAdEnd - Placement ID: " + placementReferenceId + ", wasSuccessfulView: " + wasSuccessfulView + ", wasCallToActionClicked: " + wasCallToActionClicked);
+                mIsPlaying = false;
+
+                mHandler.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (wasCallToActionClicked) {
+                            mCustomEventInterstitialListener.onInterstitialClicked();
+                        }
+                        mCustomEventInterstitialListener.onInterstitialDismissed();
+                    }
+                });
+
+                sVungleRouter.removeRouterListener(mPlacementId);
+            }
+        }
+
+        @Override
+        public void onAdStart(@NonNull String placementReferenceId) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(INTERSTITIAL_TAG + "onAdStart - Placement ID: " + placementReferenceId);
+                mIsPlaying = true;
+
+                mHandler.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        mCustomEventInterstitialListener.onInterstitialShown();
+                    }
+                });
+            }
+        }
+
+        @Override
+        public void onUnableToPlayAd(@NonNull String placementReferenceId, String reason) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(INTERSTITIAL_TAG + "onUnableToPlayAd - Placement ID: " + placementReferenceId + ", reason: " + reason);
+                mIsPlaying = false;
+
+                mHandler.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+                    }
+                });
+            }
+        }
+
+        @Override
+        public void onAdAvailabilityUpdate(@NonNull String placementReferenceId, boolean isAdAvailable) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                if (!mIsPlaying) {
+                    if (isAdAvailable) {
+                        MoPubLog.d(INTERSTITIAL_TAG + "interstitial ad successfully loaded - Placement ID: " + placementReferenceId);
+
+                        mHandler.post(new Runnable() {
+                            @Override
+                            public void run() {
+                                mCustomEventInterstitialListener.onInterstitialLoaded();
+                            }
+                        });
+                    } else {
+                        MoPubLog.d(INTERSTITIAL_TAG + "interstitial ad is not loaded - Placement ID: " + placementReferenceId);
+
+                        mHandler.post(new Runnable() {
+                            @Override
+                            public void run() {
+                                mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+                            }
+                        });
+                    }
+                }
+            }
+        }
     }
 }
diff --git a/extras/src/com/mopub/mobileads/VungleRewardedVideo.java b/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
index f0f283ce..6a44e429 100644
--- a/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
@@ -5,130 +5,196 @@
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
-import com.mopub.common.BaseLifecycleListener;
 import com.mopub.common.DataKeys;
 import com.mopub.common.LifecycleListener;
 import com.mopub.common.MediationSettings;
 import com.mopub.common.MoPubReward;
 import com.mopub.common.logging.MoPubLog;
+
 import com.vungle.publisher.AdConfig;
-import com.vungle.publisher.EventListener;
-import com.vungle.publisher.VunglePub;
 
-import java.util.Locale;
 import java.util.Map;
 
 /**
  * A custom event for showing Vungle rewarded videos.
  *
- * Certified with Vungle 4.0.2
+ * Certified with Vungle SDK 5.3.0
  */
 public class VungleRewardedVideo extends CustomEventRewardedVideo {
 
-    private static final String DEFAULT_VUNGLE_APP_ID = "YOUR_DEFAULT_VUNGLE_APP_ID";
+    private static final String REWARDED_TAG = "Vungle Rewarded: ";
 
     /*
      * These constants are intended for MoPub internal use. Do not modify.
      */
     public static final String APP_ID_KEY = "appId";
-    public static final String VUNGLE_AD_NETWORK_CONSTANT = "vngl_id";
+    public static final String PLACEMENT_ID_KEY = "pid";
+    public static final String PLACEMENT_IDS_KEY = "pids";
 
-    // This has to be reinitialized every time the CE loads to avoid conflict with the interstitials.
-    private static VunglePub sVunglePub;
-    private static VungleRewardedVideoListener sVungleListener;
-    private static boolean sInitialized;
-    private static final LifecycleListener sLifecycleListener = new BaseLifecycleListener() {
-        @Override
-        public void onPause(@NonNull final Activity activity) {
-            super.onPause(activity);
-            sVunglePub.onPause();
-        }
+    public static final String VUNGLE_NETWORK_ID_DEFAULT = "vngl_id";
+    private static final String VUNGLE_DEFAULT_APP_ID = "YOUR_APP_ID_HERE";
+    private static final String[] VUNGLE_DEFAULT_ALL_PLACEMENT_IDS = {"PLACEMENT_ID_1", "PLACEMENT_ID_2", "..."};
 
-        @Override
-        public void onResume(@NonNull final Activity activity) {
-            super.onResume(activity);
-            sVunglePub.onResume();
-        }
-    };
+    private static VungleRouter sVungleRouter;
+    private VungleRewardedRouterListener mVungleRewardedRouterListener;
+    private static boolean sInitialized;
+    private String mAppId;
+    private String mPlacementId;
+    private String[] mPlacementIds;
+    private boolean mIsPlaying;
 
     private String mAdUnitId;
     private String mCustomerId;
 
+
     public VungleRewardedVideo() {
-        sVungleListener = new VungleRewardedVideoListener();
-    }
+        sVungleRouter = VungleRouter.getInstance();
 
-    @Nullable
-    @Override
-    public CustomEventRewardedVideoListener getVideoListenerForSdk() {
-        return sVungleListener;
+        if (mVungleRewardedRouterListener == null) {
+            mVungleRewardedRouterListener = new VungleRewardedRouterListener();
+        }
     }
 
     @Nullable
     @Override
     public LifecycleListener getLifecycleListener() {
-        return sLifecycleListener;
+        return sVungleRouter.getLifecycleListener();
     }
 
     @NonNull
     @Override
     protected String getAdNetworkId() {
-        return VUNGLE_AD_NETWORK_CONSTANT;
+        return mPlacementId;
     }
 
     @Override
     protected boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
-                @NonNull final Map<String, Object> localExtras,
-                @NonNull final Map<String, String> serverExtras) throws Exception {
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final Map<String, String> serverExtras) throws Exception {
         synchronized (VungleRewardedVideo.class) {
-            if (!sInitialized) {
-                sVunglePub = VunglePub.getInstance();
-                String appId = serverExtras.containsKey(APP_ID_KEY) ? serverExtras.get(APP_ID_KEY) : DEFAULT_VUNGLE_APP_ID;
-                sVunglePub.init(launcherActivity, appId);
-                sInitialized = true;
-                return true;
+            if (sInitialized) {
+                return false;
+            }
+
+            if (!validateIdsInServerExtras(serverExtras)) {
+                mAppId = VUNGLE_DEFAULT_APP_ID;
+                mPlacementIds = VUNGLE_DEFAULT_ALL_PLACEMENT_IDS;
+            }
+
+            if (!sVungleRouter.isVungleInitialized()) {
+                sVungleRouter.initVungle(launcherActivity, mAppId, mPlacementIds);
             }
-            return false;
+
+            sInitialized = true;
+
+            return true;
         }
     }
 
     @Override
     protected void loadWithSdkInitialized(@NonNull final Activity activity, @NonNull final Map<String, Object> localExtras, @NonNull final Map<String, String> serverExtras) throws Exception {
-        String appId = serverExtras.containsKey(APP_ID_KEY) ? serverExtras.get(APP_ID_KEY) : DEFAULT_VUNGLE_APP_ID;
-        sVunglePub.init(activity, appId);
-        sVunglePub.setEventListeners(sVungleListener);
+        mIsPlaying = false;
+
+        if (!validateIdsInServerExtras(serverExtras)) {
+            mPlacementId = VUNGLE_NETWORK_ID_DEFAULT;
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class, mPlacementId, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+
+            return;
+        }
+
         Object adUnitObject = localExtras.get(DataKeys.AD_UNIT_ID_KEY);
         if (adUnitObject instanceof String) {
             mAdUnitId = (String) adUnitObject;
         }
 
-        Object customerIdObject = localExtras.get(DataKeys.REWARDED_VIDEO_CUSTOMER_ID);
+        Object customerIdObject = localExtras.get(DataKeys.REWARDED_AD_CUSTOMER_ID_KEY);
         if (customerIdObject instanceof String && !TextUtils.isEmpty((String) customerIdObject)) {
             mCustomerId = (String) customerIdObject;
         }
 
-        if (sVunglePub.isAdPlayable()) {
-            MoPubLog.d("Vungle rewarded video ad successfully loaded.");
-            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(VungleRewardedVideo.class,
-                    VUNGLE_AD_NETWORK_CONSTANT);
-        } else {
-            MoPubLog.d("Vungle rewarded video ad is not loaded.");
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class,
-                    VUNGLE_AD_NETWORK_CONSTANT, MoPubErrorCode.NETWORK_NO_FILL);
+        if (sVungleRouter.isVungleInitialized()) {
+            sVungleRouter.loadAdForPlacement(mPlacementId, mVungleRewardedRouterListener);
+        }
+        else {
+            MoPubLog.d(REWARDED_TAG + "There should not be this case. loadWithSdkInitialized is called before the SDK starts initialization for Placement ID: " + mPlacementId);
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class, mPlacementId, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
         }
     }
 
     @Override
     protected boolean hasVideoAvailable() {
-        return sVunglePub.isAdPlayable();
+        return sVungleRouter.isAdPlayableForPlacement(mPlacementId);
     }
 
     @Override
     protected void showVideo() {
         final AdConfig adConfig = new AdConfig();
-        adConfig.setIncentivized(true);
         setUpMediationSettingsForRequest(adConfig);
-        sVunglePub.playAd(adConfig);
+
+        sVungleRouter.playAdForPlacement(mPlacementId, adConfig);
+        mIsPlaying = true;
+    }
+
+    @Override
+    protected void onInvalidate() {
+        MoPubLog.d(REWARDED_TAG + "onInvalidate is called for Placement ID:" + mPlacementId);
+
+        sVungleRouter.removeRouterListener(mPlacementId);
+        mVungleRewardedRouterListener = null;
+    }
+
+
+    //private functions
+    private boolean validateIdsInServerExtras (Map<String, String> serverExtras) {
+        boolean isAllDataValid = true;
+
+        if (serverExtras.containsKey(APP_ID_KEY)) {
+            mAppId = serverExtras.get(APP_ID_KEY);
+            if (mAppId.isEmpty()) {
+                MoPubLog.w(REWARDED_TAG + "App ID is empty.");
+                isAllDataValid = false;
+            }
+        } else {
+            MoPubLog.w(REWARDED_TAG + "AppID is not in serverExtras.");
+            isAllDataValid = false;
+        }
+
+        if (serverExtras.containsKey(PLACEMENT_ID_KEY)) {
+            mPlacementId = serverExtras.get(PLACEMENT_ID_KEY);
+            if (mPlacementId.isEmpty()) {
+                MoPubLog.w(REWARDED_TAG + "Placement ID for this Ad Unit is empty.");
+                isAllDataValid = false;
+            }
+        } else {
+            MoPubLog.w(REWARDED_TAG + "Placement ID for this Ad Unit is not in serverExtras.");
+            isAllDataValid = false;
+        }
+
+        if (serverExtras.containsKey(PLACEMENT_IDS_KEY)) {
+            mPlacementIds = serverExtras.get(PLACEMENT_IDS_KEY).replace(" ", "").split(",", 0);
+            if (mPlacementIds.length == 0) {
+                MoPubLog.w(REWARDED_TAG + "Placement IDs are empty.");
+                isAllDataValid = false;
+            }
+        } else {
+            MoPubLog.w(REWARDED_TAG + "Placement IDs for this Ad Unit is not in serverExtras.");
+            isAllDataValid = false;
+        }
+
+        if (isAllDataValid) {
+            boolean foundInList = false;
+            for (String pid:  mPlacementIds) {
+                if(pid.equals(mPlacementId)) {
+                    foundInList = true;
+                }
+            }
+            if(!foundInList) {
+                MoPubLog.w(REWARDED_TAG + "Placement IDs for this Ad Unit is not in the array of Placement IDs");
+                isAllDataValid = false;
+            }
+        }
+
+        return isAllDataValid;
     }
 
     private void setUpMediationSettingsForRequest(AdConfig adConfig) {
@@ -166,57 +232,83 @@ private void modifyAdConfig(AdConfig adConfig, VungleMediationSettings mediation
         }
     }
 
-    @Override
-    protected void onInvalidate() {
-    }
-
-    private class VungleRewardedVideoListener implements EventListener,
-            CustomEventRewardedVideoListener {
 
+    /*
+     * VungleRewardedRouterListener
+     */
+    private class VungleRewardedRouterListener implements VungleRouterListener {
         @Override
-        public void onAdEnd(final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
-            if (wasSuccessfulView) {
-                // Vungle does not provide a callback when a user should be rewarded.
-                // You will need to provide your own reward logic if you receive a reward with
-                // "NO_REWARD_LABEL" && "NO_REWARD_AMOUNT"
-                MoPubRewardedVideoManager.onRewardedVideoCompleted(VungleRewardedVideo.class,
-                        VUNGLE_AD_NETWORK_CONSTANT,
-                        MoPubReward.success(MoPubReward.NO_REWARD_LABEL,
-                                MoPubReward.NO_REWARD_AMOUNT));
-            }
-            if (wasCallToActionClicked) {
-                MoPubRewardedVideoManager.onRewardedVideoClicked(VungleRewardedVideo.class,
-                        VUNGLE_AD_NETWORK_CONSTANT);
+        public void onAdEnd(@NonNull String placementReferenceId, final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(REWARDED_TAG + "onAdEnd - Placement ID: " + placementReferenceId + ", wasSuccessfulView: " + wasSuccessfulView + ", wasCallToActionClicked: " + wasCallToActionClicked);
+
+                mIsPlaying = false;
+
+                if (wasSuccessfulView) {
+                    // Vungle does not provide a callback when a user should be rewarded.
+                    // You will need to provide your own reward logic if you receive a reward with
+                    // "NO_REWARD_LABEL" && "NO_REWARD_AMOUNT"
+                    MoPubRewardedVideoManager.onRewardedVideoCompleted(VungleRewardedVideo.class,
+                            mPlacementId,
+                            MoPubReward.success(MoPubReward.NO_REWARD_LABEL,
+                                    MoPubReward.NO_REWARD_AMOUNT));
+                }
+
+                if (wasCallToActionClicked) {
+                    MoPubRewardedVideoManager.onRewardedVideoClicked(VungleRewardedVideo.class,
+                            mPlacementId);
+                }
+
+                MoPubRewardedVideoManager.onRewardedVideoClosed(VungleRewardedVideo.class,
+                        mPlacementId);
+
+                sVungleRouter.removeRouterListener(mPlacementId);
             }
-            MoPubRewardedVideoManager.onRewardedVideoClosed(VungleRewardedVideo.class,
-                    VUNGLE_AD_NETWORK_CONSTANT);
         }
 
         @Override
-        public void onAdStart() {
-            MoPubRewardedVideoManager.onRewardedVideoStarted(VungleRewardedVideo.class,
-                    VUNGLE_AD_NETWORK_CONSTANT);
-        }
+        public void onAdStart(@NonNull String placementReferenceId) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(REWARDED_TAG + "onAdStart - Placement ID: " + placementReferenceId);
 
-        @Override
-        public void onAdUnavailable(final String s) {
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class,
-                    VUNGLE_AD_NETWORK_CONSTANT, MoPubErrorCode.NETWORK_NO_FILL);
+                mIsPlaying = true;
+
+                MoPubRewardedVideoManager.onRewardedVideoStarted(VungleRewardedVideo.class,
+                        mPlacementId);
+            }
         }
 
         @Override
-        public void onAdPlayableChanged(final boolean playable) {
-            MoPubLog.d(String.format("Vungle rewarded video ad is %s.",
-                    playable ? "playable" : "not playable"));
+        public void onUnableToPlayAd(@NonNull String placementReferenceId, String reason) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(REWARDED_TAG + "onUnableToPlayAd - Placement ID: " + placementReferenceId + ", reason: " + reason);
+
+                mIsPlaying = false;
+                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class,
+                        mPlacementId, MoPubErrorCode.NETWORK_NO_FILL);
+            }
         }
 
         @Override
-        public void onVideoView(final boolean isCompletedView, final int watchedMillis, final int videoMillis) {
-            MoPubLog.d(String.format(Locale.US, "%.1f%% of Vungle video watched.",
-                    (double) watchedMillis / videoMillis * 100));
+        public void onAdAvailabilityUpdate(@NonNull String placementReferenceId, boolean isAdAvailable) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                if (!mIsPlaying) {
+                    if (isAdAvailable) {
+                        MoPubLog.d(REWARDED_TAG + "rewarded video ad successfully loaded - Placement ID: " + placementReferenceId);
+                        MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(VungleRewardedVideo.class,
+                                mPlacementId);
+                    }
+                    else {
+                        MoPubLog.d(REWARDED_TAG + "rewarded video ad is not loaded - Placement ID: " + placementReferenceId);
+                        MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class,
+                                mPlacementId, MoPubErrorCode.NETWORK_NO_FILL);
+                    }
+                }
+            }
         }
     }
 
+
     public static class VungleMediationSettings implements MediationSettings {
         @Nullable private final String userId;
         @Nullable private final String title;
diff --git a/extras/src/com/mopub/mobileads/VungleRouter.java b/extras/src/com/mopub/mobileads/VungleRouter.java
new file mode 100644
index 00000000..46a499f7
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/VungleRouter.java
@@ -0,0 +1,211 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+import com.mopub.common.BaseLifecycleListener;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.logging.MoPubLog;
+
+import com.vungle.publisher.AdConfig;
+import com.vungle.publisher.VungleAdEventListener;
+import com.vungle.publisher.VungleInitListener;
+import com.vungle.publisher.VunglePub;
+import com.vungle.publisher.env.WrapperFramework;
+import com.vungle.publisher.inject.Injector;
+
+import java.util.HashMap;
+import java.util.Map;
+
+
+/**
+ * Certified with Vungle SDK 5.3.0
+ */
+public class VungleRouter {
+
+    private static final String ROUTER_TAG = "Vungle Router: ";
+
+    // Version of the adapter, intended for Vungle internal use.
+    private static final String VERSION = "5.3.0";
+
+    private static VungleRouter instance = new VungleRouter();
+    private enum SDKInitState {
+        NOTINITIALIZED,
+        INITIALIZING,
+        INITIALIZED;
+    }
+
+    private static SDKInitState sInitState = SDKInitState.NOTINITIALIZED;
+    private static VunglePub sVunglePub;
+    private static Map<String, VungleRouterListener> sVungleRouterListeners = new HashMap<>();
+    private static Map<String, VungleRouterListener> sWaitingList = new HashMap<>();
+
+    private static final LifecycleListener sLifecycleListener = new BaseLifecycleListener() {
+        @Override
+        public void onPause(@NonNull final Activity activity) {
+            super.onPause(activity);
+            sVunglePub.onPause();
+        }
+
+        @Override
+        public void onResume(@NonNull final Activity activity) {
+            super.onResume(activity);
+            sVunglePub.onResume();
+        }
+    };
+
+
+    private VungleRouter() {
+        Injector injector = Injector.getInstance();
+        injector.setWrapperFramework(WrapperFramework.mopub);
+        injector.setWrapperFrameworkVersion(VERSION.replace('.', '_'));
+
+        sVunglePub = VunglePub.getInstance();
+    }
+
+    public static VungleRouter getInstance() {
+        return instance;
+    }
+
+    public LifecycleListener getLifecycleListener() {
+        return sLifecycleListener;
+    }
+
+
+    public void initVungle(Context context, String vungleAppId, String[] placementReferenceIds) {
+        sVunglePub.init(context, vungleAppId, placementReferenceIds, new VungleInitListener() {
+            @Override
+            public void onSuccess() {
+                MoPubLog.d(ROUTER_TAG + "SDK is initialized successfully.");
+
+                sInitState = SDKInitState.INITIALIZED;
+
+                sVunglePub.clearAndSetEventListeners(vungleDefaultListener);
+                clearWaitingList();
+            }
+
+            @Override
+            public void onFailure(Throwable throwable) {
+                MoPubLog.w(ROUTER_TAG + "Initialization is failed.");
+
+                sInitState = SDKInitState.NOTINITIALIZED;
+            }
+        });
+
+        sInitState = SDKInitState.INITIALIZING;
+    }
+
+    public boolean isVungleInitialized() {
+        if (sInitState == SDKInitState.NOTINITIALIZED) {
+            return false;
+        } else if (sInitState == SDKInitState.INITIALIZING) {
+            return true;
+        } else if (sInitState == SDKInitState.INITIALIZED) {
+            return true;
+        }
+
+        return sVunglePub.isInitialized();
+    }
+
+    public void loadAdForPlacement(String placementId, VungleRouterListener routerListener) {
+        switch (sInitState) {
+            case NOTINITIALIZED:
+                MoPubLog.w(ROUTER_TAG + "There should not be this case. loadAdForPlacement is called before initialization starts.");
+                break;
+
+            case INITIALIZING:
+                sWaitingList.put(placementId, routerListener);
+                break;
+
+            case INITIALIZED:
+                addRouterListener(placementId, routerListener);
+                sVunglePub.loadAd(placementId);
+                break;
+        }
+    }
+
+    private void addRouterListener(String placementId, VungleRouterListener routerListener) {
+        sVungleRouterListeners.put(placementId, routerListener);
+    }
+
+    public void removeRouterListener(String placementId) {
+        sVungleRouterListeners.remove(placementId);
+    }
+
+    public boolean isAdPlayableForPlacement(String placementId) {
+        return sVunglePub.isAdPlayable(placementId);
+    }
+
+    public void playAdForPlacement(String placementId, AdConfig adConfig) {
+        if (sVunglePub.isAdPlayable(placementId)) {
+            sVunglePub.playAd(placementId, adConfig);
+        }
+        else {
+            MoPubLog.w(ROUTER_TAG + "There should not be this case. playAdForPlacement is called before an ad is loaded for Placement ID: " + placementId);
+        }
+    }
+
+    private void clearWaitingList() {
+        for (Map.Entry<String, VungleRouterListener> entry : sWaitingList.entrySet()) {
+            sVunglePub.loadAd(entry.getKey());
+            sVungleRouterListeners.put(entry.getKey(),entry.getValue());
+        }
+
+        sWaitingList.clear();
+    }
+
+
+    /*
+     * VungleAdEventListener
+     */
+    private final VungleAdEventListener vungleDefaultListener = new VungleAdEventListener() {
+        @Override
+        public void onAdEnd(@NonNull String placementReferenceId, final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
+            MoPubLog.d(ROUTER_TAG + "onAdEnd - Placement ID: " + placementReferenceId);
+
+            VungleRouterListener targetListener = sVungleRouterListeners.get(placementReferenceId);
+            if (targetListener != null) {
+                targetListener.onAdEnd(placementReferenceId, wasSuccessfulView, wasCallToActionClicked);
+            } else {
+                MoPubLog.w(ROUTER_TAG + "onAdEnd - VungleRouterListener is not found for Placement ID: " + placementReferenceId);
+            }
+        }
+
+        @Override
+        public void onAdStart(@NonNull String placementReferenceId) {
+            MoPubLog.d(ROUTER_TAG + "onAdStart - Placement ID: " + placementReferenceId);
+
+            VungleRouterListener targetListener = sVungleRouterListeners.get(placementReferenceId);
+            if (targetListener != null) {
+                targetListener.onAdStart(placementReferenceId);
+            } else {
+                MoPubLog.w(ROUTER_TAG + "onAdStart - VungleRouterListener is not found for Placement ID: " + placementReferenceId);
+            }
+        }
+
+        @Override
+        public void onUnableToPlayAd(@NonNull String placementReferenceId, String reason) {
+            MoPubLog.d(ROUTER_TAG + "onUnableToPlayAd - Placement ID: " + placementReferenceId);
+
+            VungleRouterListener targetListener = sVungleRouterListeners.get(placementReferenceId);
+            if (targetListener != null) {
+                targetListener.onUnableToPlayAd(placementReferenceId, reason);
+            } else {
+                MoPubLog.w(ROUTER_TAG + "onUnableToPlayAd - VungleRouterListener is not found for Placement ID: " + placementReferenceId);
+            }
+        }
+
+        @Override
+        public void onAdAvailabilityUpdate(@NonNull String placementReferenceId, boolean isAdAvailable) {
+            MoPubLog.d(ROUTER_TAG + "onAdAvailabilityUpdate - Placement ID: " + placementReferenceId);
+
+            VungleRouterListener targetListener = sVungleRouterListeners.get(placementReferenceId);
+            if (targetListener != null) {
+                targetListener.onAdAvailabilityUpdate(placementReferenceId, isAdAvailable);
+            } else {
+                MoPubLog.w(ROUTER_TAG + "onAdAvailabilityUpdate - VungleRouterListener is not found for Placement ID: " + placementReferenceId);
+            }
+        }
+    };
+}
diff --git a/extras/src/com/mopub/mobileads/VungleRouterListener.java b/extras/src/com/mopub/mobileads/VungleRouterListener.java
new file mode 100644
index 00000000..057a8af4
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/VungleRouterListener.java
@@ -0,0 +1,16 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+
+/**
+ * Certified with Vungle SDK 5.3.0
+ */
+public interface VungleRouterListener {
+    void onAdEnd(@NonNull String var1, boolean var2, boolean var3);
+
+    void onAdStart(@NonNull String var1);
+
+    void onUnableToPlayAd(@NonNull String var1, String var2);
+
+    void onAdAvailabilityUpdate(@NonNull String var1, boolean var2);
+}
diff --git a/extras/src/com/mopub/nativeads/FacebookAdRenderer.java b/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
index 5a345081..1429555d 100644
--- a/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
+++ b/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
@@ -19,8 +19,7 @@
  * Include this class if you want to use Facebook native video ads. This renderer handles Facebook
  * static and video native ads. This will automatically replace the main image view with the
  * Facebook MediaView that handles showing the main asset.
- * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
- * latest version and ad format certifications.
+ * Certified with Facebook Audience Network 4.26.1
  */
 public class FacebookAdRenderer implements MoPubAdRenderer<FacebookNative.FacebookVideoEnabledNativeAd> {
     private final ViewBinder mViewBinder;
diff --git a/extras/src/com/mopub/nativeads/FacebookNative.java b/extras/src/com/mopub/nativeads/FacebookNative.java
index c15bc2eb..4eb9d55f 100644
--- a/extras/src/com/mopub/nativeads/FacebookNative.java
+++ b/extras/src/com/mopub/nativeads/FacebookNative.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.view.View;
+import android.view.ViewGroup;
 
 import com.facebook.ads.Ad;
 import com.facebook.ads.AdError;
@@ -24,8 +25,7 @@
  * Video ads will only be shown if VIDEO_ENABLED is set to true or a server configuration
  * "video_enabled" flag is set to true. The server configuration will override the local
  * configuration.
- * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
- * latest version and ad format certifications.
+ * Certified with Facebook Audience Network 4.26.1
  */
 public class FacebookNative extends CustomEventNative {
     private static final String PLACEMENT_ID_KEY = "placement_id";
@@ -127,6 +127,45 @@ private boolean extrasAreValid(final Map<String, String> serverExtras) {
         return (placementId != null && placementId.length() > 0);
     }
 
+    private static void registerChildViewsForInteraction(final View view, final NativeAd nativeAd) {
+        if (nativeAd == null) {
+            return;
+        }
+
+        final List<View> clickableViews = new ArrayList<>();
+        assembleChildViewsWithLimit(view, clickableViews, 10);
+
+        if (clickableViews.size() == 1) {
+            nativeAd.registerViewForInteraction(view);
+        } else {
+            nativeAd.registerViewForInteraction(view, clickableViews);
+        }
+    }
+
+    private static void assembleChildViewsWithLimit(final View view,
+            final List<View> clickableViews, final int limit) {
+        if (view == null) {
+            MoPubLog.d("View given is null. Ignoring");
+            return;
+        }
+
+        if (limit <= 0) {
+            MoPubLog.d("Depth limit reached; adding this view regardless of its type.");
+            clickableViews.add(view);
+            return;
+        }
+
+        if (view instanceof ViewGroup && ((ViewGroup) view).getChildCount() > 0) {
+            final ViewGroup vg = (ViewGroup) view;
+            for (int i = 0; i < vg.getChildCount(); i++) {
+                assembleChildViewsWithLimit(vg.getChildAt(i), clickableViews, limit - 1);
+            }
+            return;
+        }
+
+        clickableViews.add(view);
+    }
+
     static class FacebookStaticNativeAd extends StaticNativeAd implements AdListener {
         private static final String SOCIAL_CONTEXT_FOR_AD = "socialContextForAd";
 
@@ -229,7 +268,7 @@ public void onLoggingImpression(final Ad ad) {
         // BaseForwardingNativeAd
         @Override
         public void prepare(final View view) {
-            mNativeAd.registerViewForInteraction(view);
+            registerChildViewsForInteraction(view, mNativeAd);
         }
 
         @Override
@@ -413,7 +452,7 @@ public void onLoggingImpression(final Ad ad) {
         // BaseForwardingNativeAd
         @Override
         public void prepare(final View view) {
-            mNativeAd.registerViewForInteraction(view);
+            registerChildViewsForInteraction(view, mNativeAd);
         }
 
         @Override
diff --git a/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java b/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java
index 70e47cde..3e24799b 100644
--- a/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java
+++ b/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java
@@ -7,7 +7,7 @@
 import java.util.Map;
 
 /**
- * Certified with Flurry 7.2.0
+ * Certified with Flurry 8.1.0
  */
 public interface FlurryBaseNativeAd {
 
diff --git a/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java b/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
index 5d70107f..1fd7d61f 100644
--- a/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
+++ b/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
@@ -22,7 +22,7 @@
 import java.util.Map;
 
 /**
- * Certified with Flurry 7.2.0
+ * Certified with Flurry 8.1.0
  */
 public final class FlurryCustomEventNative extends CustomEventNative {
 
diff --git a/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java b/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
index d461aaf8..4f1e362d 100644
--- a/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
+++ b/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
@@ -14,7 +14,8 @@
  * specified in the FlurryNativeViewHolder.videoView to show a video. If a video is not available,
  * this will still use the mainImageView.
  *
- * Certified with Flurry 7.2.0
+ *
+ * Certified with Flurry 8.1.0
  */
 public class FlurryNativeAdRenderer implements
         MoPubAdRenderer<FlurryCustomEventNative.FlurryVideoEnabledNativeAd> {
diff --git a/extras/src/com/mopub/nativeads/FlurryViewBinder.java b/extras/src/com/mopub/nativeads/FlurryViewBinder.java
index 0564b026..b6885793 100644
--- a/extras/src/com/mopub/nativeads/FlurryViewBinder.java
+++ b/extras/src/com/mopub/nativeads/FlurryViewBinder.java
@@ -3,7 +3,7 @@
 import android.support.annotation.NonNull;
 
 /**
- * Certified with Flurry 7.2.0
+ * Certified with Flurry 8.1.0
  */
 public class FlurryViewBinder {
     ViewBinder staticViewBinder;
diff --git a/extras/src/com/mopub/nativeads/GooglePlayServicesAdRenderer.java b/extras/src/com/mopub/nativeads/GooglePlayServicesAdRenderer.java
index 4d5df2dd..3887c33d 100644
--- a/extras/src/com/mopub/nativeads/GooglePlayServicesAdRenderer.java
+++ b/extras/src/com/mopub/nativeads/GooglePlayServicesAdRenderer.java
@@ -27,7 +27,7 @@
  * The {@link GooglePlayServicesAdRenderer} class is used to render
  * GooglePlayServicesStaticNativeAds.
  *
- * Compatible with version 11.0.2 of the Google Play Services SDK.
+ * Compatible with version 11.4.0 of the Google Play Services SDK.
  */
 public class GooglePlayServicesAdRenderer implements MoPubAdRenderer<GooglePlayServicesNativeAd> {
 
diff --git a/extras/src/com/mopub/nativeads/GooglePlayServicesNative.java b/extras/src/com/mopub/nativeads/GooglePlayServicesNative.java
index 81d34885..7797c08c 100644
--- a/extras/src/com/mopub/nativeads/GooglePlayServicesNative.java
+++ b/extras/src/com/mopub/nativeads/GooglePlayServicesNative.java
@@ -22,7 +22,7 @@
 /**
  * The {@link GooglePlayServicesNative} class is used to load native Google mobile ads.
  *
- * Compatible with version 11.0.2 of the Google Play Services SDK.
+ * Compatible with version 11.4.0 of the Google Play Services SDK.
  */
 public class GooglePlayServicesNative extends CustomEventNative {
     protected static final String TAG = "MoPubToAdMobNative";
diff --git a/extras/src/com/mopub/nativeads/MillennialNative.java b/extras/src/com/mopub/nativeads/MillennialNative.java
index 29411d97..5055e47d 100644
--- a/extras/src/com/mopub/nativeads/MillennialNative.java
+++ b/extras/src/com/mopub/nativeads/MillennialNative.java
@@ -1,18 +1,16 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
-import android.os.Build;
-import android.os.Handler;
-import android.os.Looper;
 import android.util.Log;
 import android.view.View;
 
 import com.millennialmedia.AppInfo;
+import com.millennialmedia.CreativeInfo;
 import com.millennialmedia.MMException;
+import com.millennialmedia.MMLog;
 import com.millennialmedia.MMSDK;
 import com.millennialmedia.NativeAd;
-import com.millennialmedia.internal.ActivityListenerManager;
+import com.mopub.mobileads.MillennialUtils;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -21,181 +19,168 @@
 import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
 
 /**
- * Compatible with version 6.3 of the Millennial Media SDK.
+ * Compatible with version 6.6 of the Millennial Media SDK.
  */
 
 public class MillennialNative extends CustomEventNative {
-    public static final String DCN_KEY = "dcn";
-    public static final String APID_KEY = "adUnitID";
+    private static final String DCN_KEY = "dcn";
+    private static final String APID_KEY = "adUnitID";
     private final static String TAG = MillennialNative.class.getSimpleName();
-    private static final Handler UI_THREAD_HANDLER = new Handler(Looper.getMainLooper());
 
-    @Override
-    protected void loadNativeAd(final Context context,
-            final CustomEventNativeListener customEventNativeListener,
-            Map<String, Object> localExtras,
-            Map<String, String> serverExtras) {
-        String placementId;
-        String siteId;
-        if (!initializeSDK(context)) {
-            Log.e(TAG, "Unable to initialize MMSDK");
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
-            return;
+    MillennialStaticNativeAd staticNativeAd;
+
+    public CreativeInfo getCreativeInfo() {
+
+        if (staticNativeAd == null) {
+            return null;
         }
 
-        if (extrasAreValid(serverExtras)) {
-            placementId = serverExtras.get(APID_KEY);
-            siteId = serverExtras.get(DCN_KEY);
-        } else {
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
+        return staticNativeAd.getCreativeInfo();
+    }
+
+
+    @Override
+    protected void loadNativeAd(final Context context, final CustomEventNativeListener customEventNativeListener,
+                                Map<String, Object> localExtras, Map<String, String> serverExtras) {
+
+        if (!MillennialUtils.initSdk(context)) {
+            Log.e(TAG, "MM SDK must be initialized with an Activity or Application context.");
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
             return;
         }
 
-        try {
-            AppInfo ai = new AppInfo().setMediator("mopubsdk");
-            if (siteId != null && siteId.length() > 0) {
-                ai = ai.setSiteId(siteId);
-            } else {
-                ai = ai.setSiteId(null);
-            }
+        String placementId = serverExtras.get(APID_KEY);
+        String siteId = serverExtras.get(DCN_KEY);
+
+        if (MillennialUtils.isEmpty(placementId)) {
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
 
-            try {
-                MMSDK.setAppInfo(ai);
-            } catch (MMException e) {
-                Log.e(TAG, "MM SDK is not initialized", e);
-            }
-        } catch (IllegalStateException e) {
-            Log.w(TAG, "App info error", e);
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
             return;
         }
 
+        AppInfo ai = new AppInfo().setMediator("mopubsdk").setSiteId(siteId);
+
         try {
+            MMSDK.setAppInfo(ai);
+
             NativeAd nativeAd = NativeAd.createInstance(placementId, NativeAd.NATIVE_TYPE_INLINE);
-            final MillennialStaticNativeAd millennialStaticNativeAd =
-                    new MillennialStaticNativeAd(context,
-                            nativeAd,
-                            new ImpressionTracker(context),
-                            new NativeClickHandler(context),
-                            customEventNativeListener);
-            millennialStaticNativeAd.loadAd();
+            staticNativeAd = new MillennialStaticNativeAd(context, nativeAd, new ImpressionTracker(context),
+                    new NativeClickHandler(context), customEventNativeListener);
+
+            staticNativeAd.loadAd();
+
         } catch (MMException e) {
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
+            Log.e(TAG, "An exception occurred loading a native ad from MM SDK", e);
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
         }
     }
 
-    private boolean extrasAreValid(final Map<String, String> serverExtras) {
-        String placementId = serverExtras.get(APID_KEY);
-        return (serverExtras.containsKey(APID_KEY) &&
-                placementId != null && placementId.length() > 0);
-    }
-
 
     static class MillennialStaticNativeAd extends StaticNativeAd implements NativeAd.NativeListener {
-        private final Context mContext;
-        private NativeAd mNativeAd;
-        private final ImpressionTracker mImpressionTracker;
-        private final NativeClickHandler mNativeClickHandler;
-        private final CustomEventNativeListener mListener;
-        private final MillennialStaticNativeAd mMillennialStaticNativeAd;
-
-        public MillennialStaticNativeAd(final Context context,
-                final NativeAd nativeAd,
-                final ImpressionTracker impressionTracker,
-                final NativeClickHandler nativeClickHandler,
-                final CustomEventNativeListener customEventNativeListener) {
-            mContext = context.getApplicationContext();
-            mNativeAd = nativeAd;
-            mImpressionTracker = impressionTracker;
-            mNativeClickHandler = nativeClickHandler;
-            mListener = customEventNativeListener;
-            mMillennialStaticNativeAd = this;
+
+        private final Context context;
+        private NativeAd nativeAd;
+        private final ImpressionTracker impressionTracker;
+        private final NativeClickHandler nativeClickHandler;
+        private final CustomEventNativeListener listener;
+
+
+        public MillennialStaticNativeAd(final Context context, final NativeAd nativeAd,
+                                        final ImpressionTracker impressionTracker, final NativeClickHandler nativeClickHandler,
+                                        final CustomEventNativeListener customEventNativeListener) {
+
+            this.context = context.getApplicationContext();
+            this.nativeAd = nativeAd;
+            this.impressionTracker = impressionTracker;
+            this.nativeClickHandler = nativeClickHandler;
+            listener = customEventNativeListener;
 
             nativeAd.setListener(this);
         }
 
-        void loadAd() {
+
+        void loadAd() throws MMException {
+
             Log.d(TAG, "Millennial native ad loading.");
-            try {
-                mNativeAd.load(mContext, null);
-            } catch (MMException e) {
-                Log.w(TAG, "Configuration error", e);
-                UI_THREAD_HANDLER.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        mListener.onNativeAdFailed(NativeErrorCode
-                                .NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                    }
-                });
+
+            nativeAd.load(context, null);
+        }
+
+
+        CreativeInfo getCreativeInfo() {
+
+            if (nativeAd == null) {
+                return null;
             }
+
+            return nativeAd.getCreativeInfo();
         }
 
+
         // Lifecycle Handlers
         @Override
         public void prepare(final View view) {
             // Must access these methods directly to get impressions to fire.
-            mNativeAd.getIconImage();
-            mNativeAd.getDisclaimer();
-            mImpressionTracker.addView(view, this);
-            mNativeClickHandler.setOnClickListener(view, this);
+            nativeAd.getIconImage();
+            nativeAd.getDisclaimer();
+            impressionTracker.addView(view, this);
+            nativeClickHandler.setOnClickListener(view, this);
         }
 
+
         @Override
         public void clear(final View view) {
-            mImpressionTracker.removeView(view);
-            mNativeClickHandler.clearOnClickListener(view);
+
+            impressionTracker.removeView(view);
+            nativeClickHandler.clearOnClickListener(view);
         }
 
+
         @Override
         public void destroy() {
-            mImpressionTracker.destroy();
-            mNativeAd.setListener(null);
-            mNativeAd = null;
+
+            impressionTracker.destroy();
+            nativeAd.destroy();
+            nativeAd = null;
         }
 
+
         // Event Handlers
         @Override
         public void recordImpression(final View view) {
+
             notifyAdImpressed();
+
             try {
-                mNativeAd.fireImpression();
+                nativeAd.fireImpression();
                 Log.d(TAG, "Millennial native ad impression recorded.");
-            } catch (MMException m) {
-                Log.e(TAG, "Error tracking Millennial native ad impression", m);
+            } catch (MMException e) {
+                Log.e(TAG, "Error tracking Millennial native ad impression", e);
             }
         }
 
+
         @Override
         public void handleClick(final View view) {
+
             notifyAdClicked();
-            mNativeClickHandler.openClickDestinationUrl(getClickDestinationUrl(), view);
-            mNativeAd.fireCallToActionClicked();
+
+            nativeClickHandler.openClickDestinationUrl(getClickDestinationUrl(), view);
+            nativeAd.fireCallToActionClicked();
             Log.d(TAG, "Millennial native ad clicked.");
         }
 
-        // MM'S Native mListener
+
+        // MM'S Native listener
         @Override
         public void onLoaded(NativeAd nativeAd) {
+
+            CreativeInfo creativeInfo = getCreativeInfo();
+            if ((creativeInfo != null) && MMLog.isDebugEnabled()) {
+
+                MMLog.d(TAG, "Native Creative Info: " + creativeInfo);
+            }
+
             // Set assets
             String iconImageUrl = nativeAd.getImageUrl(NativeAd.ComponentName.ICON_IMAGE, 1);
             String mainImageUrl = nativeAd.getImageUrl(NativeAd.ComponentName.MAIN_IMAGE, 1);
@@ -206,13 +191,12 @@ public void onLoaded(NativeAd nativeAd) {
 
             final String clickDestinationUrl = nativeAd.getCallToActionUrl();
             if (clickDestinationUrl == null) {
-                UI_THREAD_HANDLER.post(new Runnable() {
+                MillennialUtils.postOnUiThread(new Runnable() {
                     @Override
                     public void run() {
-                        Log.d(TAG,
-                                "Millennial native ad encountered null destination url. Failing over.");
-                        mListener.onNativeAdFailed(
-                                NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+
+                        Log.d(TAG, "Millennial native ad encountered null destination url.");
+                        listener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
                     }
                 });
                 return;
@@ -230,20 +214,23 @@ public void run() {
                 urls.add(mainImageUrl);
             }
 
-            UI_THREAD_HANDLER.post(new Runnable() {
+            addExtra("disclaimer", nativeAd.getDisclaimer().getText());
+
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
                     // This has to be run on the main thread:
-                    preCacheImages(mContext, urls, new NativeImageHelper.ImageListener() {
+                    preCacheImages(context, urls, new NativeImageHelper.ImageListener() {
                         @Override
                         public void onImagesCached() {
-                            mListener.onNativeAdLoaded(mMillennialStaticNativeAd);
+                            listener.onNativeAdLoaded(MillennialStaticNativeAd.this);
                             Log.d(TAG, "Millennial native ad loaded.");
                         }
 
+
                         @Override
                         public void onImagesFailedToCache(NativeErrorCode errorCode) {
-                            mListener.onNativeAdFailed(errorCode);
+                            listener.onNativeAdFailed(errorCode);
                         }
                     });
 
@@ -251,8 +238,10 @@ public void onImagesFailedToCache(NativeErrorCode errorCode) {
             });
         }
 
+
         @Override
         public void onLoadFailed(NativeAd nativeAd, NativeAd.NativeErrorStatus nativeErrorStatus) {
+
             final NativeErrorCode error;
             switch (nativeErrorStatus.getErrorCode()) {
                 case NativeAd.NativeErrorStatus.LOAD_TIMED_OUT:
@@ -278,52 +267,37 @@ public void onLoadFailed(NativeAd nativeAd, NativeAd.NativeErrorStatus nativeErr
                 default:
                     error = NativeErrorCode.NETWORK_NO_FILL;
             }
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mListener.onNativeAdFailed(error);
+
+                    listener.onNativeAdFailed(error);
                 }
             });
             Log.i(TAG, "Millennial native ad failed: " + nativeErrorStatus.getDescription());
         }
 
+
         @Override
         public void onClicked(NativeAd nativeAd, NativeAd.ComponentName componentName, int i) {
+
             Log.d(TAG, "Millennial native ad click tracker fired.");
         }
 
+
         @Override
         public void onAdLeftApplication(NativeAd nativeAd) {
+
             Log.d(TAG, "Millennial native ad has left the application.");
 
         }
 
+
         @Override
         public void onExpired(NativeAd nativeAd) {
+
             Log.d(TAG, "Millennial native ad has expired!");
         }
 
     }
-
-    private boolean initializeSDK(Context context) {
-        try {
-            if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
-                if (!MMSDK.isInitialized()) {
-                    try {
-                        MMSDK.initialize((Activity) context, ActivityListenerManager.LifecycleState.RESUMED);
-                    } catch (Exception e) {
-                        Log.e(TAG, "Error initializing MMSDK", e);
-                        return false;
-                    }
-                }
-            } else {
-                Log.e(TAG, "MMSDK minimum supported API is 16");
-                return false;
-            }
-            return true;
-        } catch (Exception e) {
-            Log.e(TAG, "Error initializing MMSDK", e);
-            return false;
-        }
-    }
 }
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 65b9ee77..8b60e124 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-all.zip
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 4773efcd..814b58ea 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="52"
-      android:versionName="4.15.0">
+      android:versionCode="57"
+      android:versionName="4.19.0">
     <uses-sdk android:minSdkVersion="16"
               android:targetSdkVersion="24"/>
 
@@ -10,18 +10,26 @@
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
 
-    <!-- For MRAID 2 -->
+    <!--WRITE_EXTERNAL_STORAGE is optional and only required for MRAID 2.0 storePicture ads.-->
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
 
     <application android:icon="@drawable/icon" android:label="@string/app_name"
                  android:networkSecurityConfig="@xml/network_security_config">
 	    <activity android:name="com.mopub.simpleadsdemo.MoPubSampleActivity"
 	            android:label="@string/app_name"
+                android:launchMode="singleInstance"
                 android:configChanges="orientation|screenSize">
 	        <intent-filter>
 	            <action android:name="android.intent.action.MAIN" />
 	            <category android:name="android.intent.category.LAUNCHER" />
 	        </intent-filter>
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <data android:scheme="mopub"
+                      android:host="load" />
+            </intent-filter>
 	    </activity>
         <activity android:name="com.mopub.mobileads.MoPubActivity"
                 android:configChanges="keyboardHidden|orientation|screenSize"/>
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index 516d5d2e..a54d0f60 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -3,24 +3,26 @@ repositories {
     flatDir {
         dirs '../libs'
     }
+    maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
+    maven { url 'https://maven.google.com' }
 }
 
 apply plugin: 'com.android.application'
 
 project.group = 'com.mopub'
 project.description = '''MoPub Sample App'''
-project.version = '4.15.0'
+project.version = '4.19.0'
 
 android {
-    compileSdkVersion 24
-    buildToolsVersion '25.0.2'
+    compileSdkVersion 26
+    buildToolsVersion '26.0.2'
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 52
+        versionCode 57
         versionName version
         minSdkVersion 16
-        targetSdkVersion 24
+        targetSdkVersion 26
     }
 
     buildTypes {
@@ -55,8 +57,9 @@ android {
 }
 
 dependencies {
-    compile 'com.android.support:support-v4:24.0.0'
-    compile 'com.google.android.gms:play-services-ads:9.4.0'
-    compile 'com.android.support:recyclerview-v7:24.0.0'
+    compile 'com.android.support:support-v4:26.1.0'
+    compile 'com.google.android.gms:play-services-ads:11.4.0'
+    compile 'com.google.android.gms:play-services-base:11.4.0'
+    compile 'com.android.support:recyclerview-v7:26.1.0'
     compile project(':mopub-sdk')
 }
diff --git a/mopub-sample/res/layout/interstitial_detail_fragment.xml b/mopub-sample/res/layout/interstitial_detail_fragment.xml
index 37aebae5..6f060ff6 100644
--- a/mopub-sample/res/layout/interstitial_detail_fragment.xml
+++ b/mopub-sample/res/layout/interstitial_detail_fragment.xml
@@ -37,6 +37,16 @@
         android:imeOptions="actionDone"
         android:singleLine="true" />
 
+    <EditText
+        android:id="@+id/custom_data_field"
+        android:visibility="gone"
+        android:hint="@string/custom_data"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:inputType="text|textFilter|textShortMessage"
+        android:imeOptions="actionDone"
+        android:singleLine="true" />
+
     <LinearLayout
         android:orientation="horizontal"
         android:layout_width="match_parent"
@@ -50,7 +60,7 @@
             android:layout_weight="1" />
 
         <Button
-            android:id="@+id/interstitial_show_button"
+            android:id="@+id/show_button"
             android:text="@string/show_ad"
             android:layout_width="0dp"
             android:layout_height="wrap_content"
diff --git a/mopub-sample/res/values/strings.xml b/mopub-sample/res/values/strings.xml
index 661d725a..98143ede 100644
--- a/mopub-sample/res/values/strings.xml
+++ b/mopub-sample/res/values/strings.xml
@@ -2,6 +2,7 @@
 <resources>
     <string name="app_name">MoPub Sample App</string>
     <string name="keywords">Keywords (optional)</string>
+    <string name="custom_data">Custom Data (optional)</string>
     <string name="load_ad">Load Ad</string>
     <string name="refresh_ad">Refresh Ad</string>
     <string name="switch_layout">Switch Layout</string>
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
index f4ee63c9..c92575b3 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
@@ -44,6 +44,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
         layoutParams.height = getHeight();
         mMoPubView.setLayoutParams(layoutParams);
 
+        views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
         hideSoftKeyboard(views.mKeywordsField);
 
         final String adUnitId = mMoPubSampleAdUnit.getAdUnitId();
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
index dbe77011..3a1b987b 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
@@ -4,7 +4,9 @@
 import android.content.Context;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
+import android.support.annotation.NonNull;
 
+import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
 
 import java.util.ArrayList;
@@ -53,7 +55,10 @@ MoPubSampleAdUnit createSampleAdUnit(final MoPubSampleAdUnit sampleAdUnit) {
     }
 
     private MoPubSampleAdUnit createSampleAdUnit(final MoPubSampleAdUnit sampleAdUnit,
-                                                 final boolean isUserGenerated) {
+            final boolean isUserGenerated) {
+        deleteAllAdUnitsWithAdUnitIdAndAdType(sampleAdUnit.getAdUnitId(),
+                sampleAdUnit.getFragmentClassName());
+
         final ContentValues values = new ContentValues();
         final int userGenerated = isUserGenerated ? 1 : 0;
         values.put(COLUMN_AD_UNIT_ID, sampleAdUnit.getAdUnitId());
@@ -85,6 +90,20 @@ void deleteSampleAdUnit(final MoPubSampleAdUnit adConfiguration) {
         database.close();
     }
 
+    private void deleteAllAdUnitsWithAdUnitIdAndAdType(@NonNull final String adUnitId,
+            @NonNull final String adType) {
+        Preconditions.checkNotNull(adUnitId);
+        Preconditions.checkNotNull(adType);
+
+        final SQLiteDatabase database = mDatabaseHelper.getWritableDatabase();
+        final int numDeletedRows = database.delete(TABLE_AD_CONFIGURATIONS,
+                COLUMN_AD_UNIT_ID + " = '" + adUnitId +
+                "' AND " + COLUMN_USER_GENERATED + " = 1 AND " +
+                COLUMN_AD_TYPE + " = '" + adType + "'", null);
+        MoPubLog.d(numDeletedRows + " rows deleted with adUnitId: " + adUnitId);
+        database.close();
+    }
+
     List<MoPubSampleAdUnit> getAllAdUnits() {
         final List<MoPubSampleAdUnit> adConfigurations = new ArrayList<>();
         SQLiteDatabase database = mDatabaseHelper.getReadableDatabase();
@@ -94,7 +113,9 @@ void deleteSampleAdUnit(final MoPubSampleAdUnit adConfiguration) {
 
         while (!cursor.isAfterLast()) {
             final MoPubSampleAdUnit adConfiguration = cursorToAdConfiguration(cursor);
-            adConfigurations.add(adConfiguration);
+            if (adConfiguration != null) {
+                adConfigurations.add(adConfiguration);
+            }
             cursor.moveToNext();
         }
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/DetailFragmentViewHolder.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/DetailFragmentViewHolder.java
index ca780f7e..8d870afd 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/DetailFragmentViewHolder.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/DetailFragmentViewHolder.java
@@ -1,31 +1,61 @@
 package com.mopub.simpleadsdemo;
 
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.View;
 import android.widget.Button;
 import android.widget.EditText;
 import android.widget.TextView;
 
+/**
+ * ViewHolder data object that parses and stores named child Views for sample app DetailFragments,
+ * e.g. {@link InterstitialDetailFragment}.
+ */
 class DetailFragmentViewHolder {
-    final TextView mDescriptionView;
-    final Button mLoadButton;
-    final TextView mAdUnitIdView;
-    final EditText mKeywordsField;
+    @NonNull final TextView mDescriptionView;
+    @NonNull final Button mLoadButton;
+    @Nullable final Button mShowButton;
+    @NonNull final TextView mAdUnitIdView;
+    @NonNull final EditText mKeywordsField;
+    @Nullable final EditText mCustomDataField;
 
-    DetailFragmentViewHolder(final TextView descriptionView, final TextView adUnitIdView,
-            final EditText keywordsField, final Button loadButton) {
+    /**
+     * Internal constructor. Use {@link #fromView(View)} to create instances of this class.
+     *
+     * @param descriptionView Displays ad full name, e.g. "MoPub Banner Sample"
+     * @param adUnitIdView Displays adUnitId
+     * @param loadButton Loads an ad. For non-cached ad formats, this will also display the ad
+     * @param showButton Displays an ad. (optional, only defined for interstitial and rewarded ads)
+     * @param keywordsField Keyword entry field. This is eventually passed in the 'q' query
+     *                      parameter in the ad request
+     * @param customDataField Custom data entry field. Used to include arbitrary data to rewarded
+     *                        completion URLs. View visibility defaults to {@link View#GONE}.
+     *                        (optional, only defined for rewarded ads)
+     */
+    private DetailFragmentViewHolder(
+            @NonNull final TextView descriptionView,
+            @NonNull final TextView adUnitIdView,
+            @NonNull final Button loadButton,
+            @Nullable final Button showButton,
+            @NonNull final EditText keywordsField,
+            @Nullable final EditText customDataField) {
         mDescriptionView = descriptionView;
         mAdUnitIdView = adUnitIdView;
-        mKeywordsField = keywordsField;
         mLoadButton = loadButton;
+        mShowButton = showButton;
+        mKeywordsField = keywordsField;
+        mCustomDataField = customDataField;
     }
 
-    static DetailFragmentViewHolder fromView(final View view) {
+    static DetailFragmentViewHolder fromView(@NonNull final View view) {
         final TextView descriptionView = (TextView) view.findViewById(R.id.description);
         final TextView adUnitIdView = (TextView) view.findViewById(R.id.ad_unit_id);
-        final EditText keywordsField = (EditText) view.findViewById(R.id.keywords_field);
         final Button loadButton = (Button) view.findViewById(R.id.load_button);
+        final Button showButton = (Button) view.findViewById(R.id.show_button);
+        final EditText keywordsField = (EditText) view.findViewById(R.id.keywords_field);
+        final EditText customDataField = (EditText) view.findViewById(R.id.custom_data_field);
 
-        return new DetailFragmentViewHolder(descriptionView, adUnitIdView,
-                keywordsField, loadButton);
+        return new DetailFragmentViewHolder(descriptionView, adUnitIdView, loadButton, showButton,
+                keywordsField, customDataField);
     }
 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
index 8c2fb463..fec98dd9 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
@@ -25,6 +25,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
                 MoPubSampleAdUnit.fromBundle(getArguments());
         final View view = inflater.inflate(R.layout.interstitial_detail_fragment, container, false);
         final DetailFragmentViewHolder views = DetailFragmentViewHolder.fromView(view);
+        views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
         hideSoftKeyboard(views.mKeywordsField);
 
         final String adUnitId = adConfiguration.getAdUnitId();
@@ -43,7 +44,7 @@ public void onClick(View view) {
                 mMoPubInterstitial.load();
             }
         });
-        mShowButton = (Button) view.findViewById(R.id.interstitial_show_button);
+        mShowButton = views.mShowButton;
         mShowButton.setEnabled(false);
         mShowButton.setOnClickListener(new View.OnClickListener() {
             @Override
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
index d655656c..ce6d1e79 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
@@ -3,11 +3,15 @@
 import android.app.AlertDialog;
 import android.app.Dialog;
 import android.content.DialogInterface;
+import android.net.Uri;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.v4.app.DialogFragment;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentTransaction;
 import android.support.v4.app.ListFragment;
+import android.text.TextUtils;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -20,12 +24,14 @@
 import android.widget.Toast;
 
 import com.mopub.common.MoPub;
+import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
 
 import java.util.ArrayList;
 import java.util.List;
 
 import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType;
+import static com.mopub.simpleadsdemo.Utils.logToast;
 
 
 interface TrashCanClickListener {
@@ -33,6 +39,12 @@
 }
 
 public class MoPubListFragment extends ListFragment implements TrashCanClickListener {
+
+    private static final String AD_UNIT_ID_KEY = "adUnitId";
+    private static final String FORMAT_KEY = "format";
+    static final String KEYWORDS_KEY = "keywords";
+    private static final String NAME_KEY = "name";
+
     private MoPubSampleListAdapter mAdapter;
     private AdUnitDataSource mAdUnitDataSource;
 
@@ -44,6 +56,33 @@ public void onCreate(Bundle savedInstanceState) {
         initializeAdapter();
     }
 
+    void addAdUnitViaDeeplink(@Nullable final Uri deeplinkData) {
+        if (deeplinkData == null) {
+            return;
+        }
+
+        final String adUnitId = deeplinkData.getQueryParameter(AD_UNIT_ID_KEY);
+        try {
+            Utils.validateAdUnitId(adUnitId);
+        } catch (IllegalArgumentException e) {
+            logToast(getContext(), "Ignoring invalid ad unit: " + adUnitId);
+            return;
+        }
+
+        final String format = deeplinkData.getQueryParameter(FORMAT_KEY);
+        final AdType adType = AdType.fromDeeplinkString(format);
+        if (adType == null) {
+            logToast(getContext(), "Ignoring invalid ad format: " + format);
+            return;
+        }
+
+        final String name = deeplinkData.getQueryParameter(NAME_KEY);
+        final MoPubSampleAdUnit adUnit = new MoPubSampleAdUnit.Builder(adUnitId,
+                adType).description(name == null ? "" : name).build();
+        final MoPubSampleAdUnit newAdUnit = addAdUnit(adUnit);
+        enterAdFragment(newAdUnit, deeplinkData.getQueryParameter(KEYWORDS_KEY));
+    }
+
     @Override
     public View onCreateView(final LayoutInflater inflater, final ViewGroup container, final Bundle savedInstanceState) {
         final View view = inflater.inflate(R.layout.ad_unit_list_fragment, container, false);
@@ -67,6 +106,15 @@ public void onListItemClick(ListView listView, View view, int position, long id)
 
         final MoPubSampleAdUnit adConfiguration = mAdapter.getItem(position);
 
+        if (adConfiguration != null) {
+            enterAdFragment(adConfiguration, null);
+        }
+    }
+
+    private void enterAdFragment(@NonNull final MoPubSampleAdUnit adConfiguration,
+            @Nullable final String keywords) {
+        Preconditions.checkNotNull(adConfiguration);
+
         final FragmentTransaction fragmentTransaction =
                 getActivity().getSupportFragmentManager().beginTransaction();
 
@@ -83,7 +131,15 @@ public void onListItemClick(ListView listView, View view, int position, long id)
             return;
         }
 
-        fragment.setArguments(adConfiguration.toBundle());
+        final Bundle bundle = adConfiguration.toBundle();
+        if (!TextUtils.isEmpty(keywords)) {
+            bundle.putString(KEYWORDS_KEY, keywords);
+        }
+        fragment.setArguments(bundle);
+
+        if (getFragmentManager().getBackStackEntryCount() > 0) {
+            getFragmentManager().popBackStack();
+        }
 
         fragmentTransaction
                 .replace(R.id.fragment_container, fragment)
@@ -130,10 +186,28 @@ public void onPause() {
         super.onPause();
     }
 
-    void addAdUnit(final MoPubSampleAdUnit moPubSampleAdUnit) {
-        MoPubSampleAdUnit createdAdUnit = mAdUnitDataSource.createSampleAdUnit(moPubSampleAdUnit);
+    @NonNull
+    MoPubSampleAdUnit addAdUnit(@NonNull final MoPubSampleAdUnit moPubSampleAdUnit) {
+        Preconditions.checkNotNull(moPubSampleAdUnit);
+
+        final MoPubSampleAdUnit createdAdUnit =
+                mAdUnitDataSource.createSampleAdUnit(moPubSampleAdUnit);
+
+        for (int i = 0; i < mAdapter.getCount(); i++) {
+            final MoPubSampleAdUnit currentAdUnit = mAdapter.getItem(i);
+            if (currentAdUnit != null &&
+                    moPubSampleAdUnit.getAdUnitId().equals(currentAdUnit.getAdUnitId()) &&
+                    moPubSampleAdUnit.getFragmentClassName().equals(
+                            currentAdUnit.getFragmentClassName()) &&
+                    currentAdUnit.isUserDefined()) {
+                mAdapter.remove(currentAdUnit);
+                logToast(getContext(), moPubSampleAdUnit.getAdUnitId() + " replaced.");
+                break;
+            }
+        }
         mAdapter.add(createdAdUnit);
         mAdapter.sort(MoPubSampleAdUnit.COMPARATOR);
+        return createdAdUnit;
     }
 
     void deleteAdUnit(final MoPubSampleAdUnit moPubSampleAdUnit) {
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
index fc175ea0..a40e9dfb 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
@@ -1,11 +1,12 @@
 package com.mopub.simpleadsdemo;
 
 import android.annotation.TargetApi;
+import android.content.Intent;
 import android.os.Build;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.support.v4.app.ActivityCompat;
 import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentManager;
 import android.webkit.WebView;
 
 import com.mopub.common.MoPub;
@@ -37,6 +38,9 @@ private static void setWebDebugging() {
         }
     }
 
+    private MoPubListFragment mMoPubListFragment;
+    private Intent mDeeplinkIntent;
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -63,17 +67,35 @@ protected void onCreate(Bundle savedInstanceState) {
         MoPub.setLocationAwareness(MoPub.LocationAwareness.TRUNCATED);
         MoPub.setLocationPrecision(4);
 
-        if (findViewById(R.id.fragment_container) != null) {
-            final MoPubListFragment listFragment = new MoPubListFragment();
-            listFragment.setArguments(getIntent().getExtras());
-            FragmentManager fragmentManager = getSupportFragmentManager();
-            fragmentManager.beginTransaction()
-                    .add(R.id.fragment_container, listFragment)
-                    .commit();
-        }
+        createMoPubListFragment(getIntent());
 
         // Intercepts all logs including Level.FINEST so we can show a toast
         // that is not normally user-facing. This is only used for native ads.
         LoggingUtils.enableCanaryLogging(this);
     }
+
+    private void createMoPubListFragment(@NonNull final Intent intent) {
+        if (findViewById(R.id.fragment_container) != null) {
+            mMoPubListFragment = new MoPubListFragment();
+            mMoPubListFragment.setArguments(intent.getExtras());
+            getSupportFragmentManager().beginTransaction()
+                    .replace(R.id.fragment_container, mMoPubListFragment).commit();
+
+            mDeeplinkIntent = intent;
+        }
+    }
+
+    @Override
+    public void onNewIntent(@NonNull final Intent intent) {
+        mDeeplinkIntent = intent;
+    }
+
+    @Override
+    public void onPostResume() {
+        super.onPostResume();
+        if (mMoPubListFragment != null && mDeeplinkIntent != null) {
+            mMoPubListFragment.addAdUnitViaDeeplink(mDeeplinkIntent.getData());
+            mDeeplinkIntent = null;
+        }
+    }
 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
index f6573175..ea3bb0d3 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
@@ -2,9 +2,11 @@
 
 import android.os.Bundle;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.v4.app.Fragment;
 
 import java.util.Comparator;
+import java.util.Locale;
 
 class MoPubSampleAdUnit implements Comparable<MoPubSampleAdUnit> {
 
@@ -51,6 +53,35 @@ static AdType fromFragmentClassName(final String fragmentClassName) {
 
             return null;
         }
+
+        @Nullable
+        static AdType fromDeeplinkString(@Nullable final String adType) {
+            if (adType == null) {
+                return null;
+            }
+            switch (adType.toLowerCase(Locale.US)) {
+                case "banner":
+                    return BANNER;
+                case "interstitial":
+                    return INTERSTITIAL;
+                case "mrect":
+                    return MRECT;
+                case "leaderboard":
+                    return LEADERBOARD;
+                case "skyscraper":
+                    return SKYSCRAPER;
+                case "rewarded":
+                    return REWARDED_VIDEO;
+                case "native":
+                    return LIST_VIEW;
+                case "nativetableplacer":
+                    return RECYCLER_VIEW;
+                case "nativecollectionplacer":
+                    return CUSTOM_NATIVE;
+                default:
+                    return null;
+            }
+        }
     }
 
     static final Comparator<MoPubSampleAdUnit> COMPARATOR =
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
index b7141689..b62f18c5 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
@@ -69,6 +69,7 @@ public void onClick(View view) {
         final String adUnitId = mAdConfiguration.getAdUnitId();
         views.mDescriptionView.setText(mAdConfiguration.getDescription());
         views.mAdUnitIdView.setText(adUnitId);
+        views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
         mViewPager = (ViewPager) view.findViewById(R.id.gallery_pager);
 
         // Set up a renderer for a static native ad.
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
index b0e6cc5e..6616d4e3 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
@@ -64,6 +64,7 @@ public void onClick(View view) {
         final String adUnitId = mAdConfiguration.getAdUnitId();
         views.mDescriptionView.setText(mAdConfiguration.getDescription());
         views.mAdUnitIdView.setText(adUnitId);
+        views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
 
         final ArrayAdapter<String> adapter = new ArrayAdapter<String>(getActivity(),
                 android.R.layout.simple_list_item_1);
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
index 472a5648..f9b9d095 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
@@ -80,6 +80,7 @@ public void onClick(final View v) {
         final String adUnitId = mAdConfiguration.getAdUnitId();
         viewHolder.mDescriptionView.setText(mAdConfiguration.getDescription());
         viewHolder.mAdUnitIdView.setText(adUnitId);
+        viewHolder.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
 
         final RecyclerView.Adapter originalAdapter = new DemoRecyclerAdapter();
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
index 2e9ddebf..8f66f3d2 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
@@ -14,12 +14,15 @@
 import android.widget.Button;
 
 import com.mopub.common.MoPubReward;
+import com.mopub.mobileads.CustomEventRewardedVideo;
 import com.mopub.mobileads.MoPubErrorCode;
 import com.mopub.mobileads.MoPubRewardedVideoListener;
 import com.mopub.mobileads.MoPubRewardedVideoManager.RequestParameters;
 import com.mopub.mobileads.MoPubRewardedVideos;
 
 import java.util.HashMap;
+import java.util.LinkedList;
+import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
@@ -31,6 +34,10 @@
 
     private static boolean sRewardedVideoInitialized;
 
+    // Include any custom event rewarded video classes, if available, for initialization.
+    private static final List<Class<? extends CustomEventRewardedVideo>> sNetworksToInit =
+            new LinkedList<>();
+
     @Nullable private Button mShowButton;
     @Nullable private String mAdUnitId;
     @Nullable private Map<String, MoPubReward> mMoPubRewardsMap;
@@ -43,10 +50,11 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
                 MoPubSampleAdUnit.fromBundle(getArguments());
         final View view = inflater.inflate(R.layout.interstitial_detail_fragment, container, false);
         final DetailFragmentViewHolder views = DetailFragmentViewHolder.fromView(view);
+        views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
         hideSoftKeyboard(views.mKeywordsField);
 
         if (!sRewardedVideoInitialized) {
-            MoPubRewardedVideos.initializeRewardedVideo(getActivity());
+            MoPubRewardedVideos.initializeRewardedVideo(getActivity(), sNetworksToInit);
             sRewardedVideoInitialized = true;
         }
         MoPubRewardedVideos.setRewardedVideoListener(this);
@@ -70,7 +78,7 @@ public void onClick(View view) {
                 }
             }
         });
-        mShowButton = (Button) view.findViewById(R.id.interstitial_show_button);
+        mShowButton = views.mShowButton;
         mShowButton.setEnabled(false);
         mShowButton.setOnClickListener(new View.OnClickListener() {
             @Override
@@ -78,9 +86,17 @@ public void onClick(View view) {
                 if (mAdUnitId == null) {
                     return;
                 }
-                MoPubRewardedVideos.showRewardedVideo(mAdUnitId);
+
+                final String customData = (views.mCustomDataField != null)
+                        ? views.mCustomDataField.getText().toString()
+                        : null;
+
+                MoPubRewardedVideos.showRewardedVideo(mAdUnitId, customData);
             }
         });
+        if (views.mCustomDataField != null) {
+            views.mCustomDataField.setVisibility(View.VISIBLE);
+        }
 
         return view;
     }
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/BannerVisibilityTracker.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/BannerVisibilityTracker.java
new file mode 100644
index 00000000..7649a506
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/BannerVisibilityTracker.java
@@ -0,0 +1,294 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.graphics.Rect;
+import android.os.Handler;
+import android.os.SystemClock;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.view.ViewTreeObserver;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Views;
+
+import java.lang.ref.WeakReference;
+
+import static android.view.ViewTreeObserver.OnPreDrawListener;
+
+/**
+ * Tracks banner views to determine when they become visible, where visibility is determined by
+ * whether a minimum number of dips have been visible for a minimum duration, where both values are
+ * configured by the AdServer via headers.
+ */
+class BannerVisibilityTracker {
+    // Time interval to use for throttling visibility checks.
+    private static final int VISIBILITY_THROTTLE_MILLIS = 100;
+
+    /**
+     * Callback when visibility conditions are satisfied.
+     */
+    interface BannerVisibilityTrackerListener {
+        void onVisibilityChanged();
+    }
+
+    @NonNull @VisibleForTesting final OnPreDrawListener mOnPreDrawListener;
+    @NonNull @VisibleForTesting WeakReference<ViewTreeObserver> mWeakViewTreeObserver;
+
+    /**
+     * Banner view that is being tracked.
+     */
+    @NonNull private final View mTrackedView;
+
+    /**
+     * Root view of banner view being tracked.
+     */
+    @NonNull private final View mRootView;
+
+    /**
+     * Object to check actual visibility.
+     */
+    @NonNull private final BannerVisibilityChecker mVisibilityChecker;
+
+    /**
+     * Callback listener.
+     */
+    @Nullable private BannerVisibilityTrackerListener mBannerVisibilityTrackerListener;
+
+    /**
+     * Runnable to run on each visibility loop.
+     */
+    @NonNull private final BannerVisibilityRunnable mVisibilityRunnable;
+
+    /**
+     * Handler for visibility.
+     */
+    @NonNull private final Handler mVisibilityHandler;
+
+    /**
+     * Whether the visibility runnable is scheduled.
+     */
+    private boolean mIsVisibilityScheduled;
+
+    /**
+     * Whether the imp tracker has been fired already.
+     */
+    private boolean mIsImpTrackerFired;
+
+    @VisibleForTesting
+    public BannerVisibilityTracker(@NonNull final Context context,
+            @NonNull final View rootView,
+            @NonNull final View trackedView,
+            final int minVisibleDips,
+            final int minVisibleMillis) {
+        Preconditions.checkNotNull(rootView);
+        Preconditions.checkNotNull(trackedView);
+
+        mRootView = rootView;
+        mTrackedView = trackedView;
+
+        mVisibilityChecker = new BannerVisibilityChecker(minVisibleDips, minVisibleMillis);
+        mVisibilityHandler = new Handler();
+        mVisibilityRunnable = new BannerVisibilityRunnable();
+
+        mOnPreDrawListener = new OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                scheduleVisibilityCheck();
+                return true;
+            }
+        };
+
+        mWeakViewTreeObserver = new WeakReference<ViewTreeObserver>(null);
+        setViewTreeObserver(context, mTrackedView);
+    }
+
+    private void setViewTreeObserver(@Nullable final Context context, @Nullable final View view) {
+        final ViewTreeObserver originalViewTreeObserver = mWeakViewTreeObserver.get();
+        if (originalViewTreeObserver != null && originalViewTreeObserver.isAlive()) {
+            return;
+        }
+
+        final View rootView = Views.getTopmostView(context, view);
+        if (rootView == null) {
+            MoPubLog.d("Unable to set Visibility Tracker due to no available root view.");
+            return;
+        }
+
+        final ViewTreeObserver viewTreeObserver = rootView.getViewTreeObserver();
+        if (!viewTreeObserver.isAlive()) {
+            MoPubLog.w("Visibility Tracker was unable to track views because the"
+                    + " root view tree observer was not alive");
+            return;
+        }
+
+        mWeakViewTreeObserver = new WeakReference<>(viewTreeObserver);
+        viewTreeObserver.addOnPreDrawListener(mOnPreDrawListener);
+    }
+
+    @Nullable
+    @Deprecated
+    @VisibleForTesting
+    BannerVisibilityTrackerListener getBannerVisibilityTrackerListener() {
+        return mBannerVisibilityTrackerListener;
+    }
+
+    void setBannerVisibilityTrackerListener(
+            @Nullable final BannerVisibilityTrackerListener bannerVisibilityTrackerListener) {
+        mBannerVisibilityTrackerListener = bannerVisibilityTrackerListener;
+    }
+
+    /**
+     * Destroy the visibility tracker, preventing it from future use.
+     */
+    void destroy() {
+        mVisibilityHandler.removeMessages(0);
+        mIsVisibilityScheduled = false;
+        final ViewTreeObserver viewTreeObserver = mWeakViewTreeObserver.get();
+        if (viewTreeObserver != null && viewTreeObserver.isAlive()) {
+            viewTreeObserver.removeOnPreDrawListener(mOnPreDrawListener);
+        }
+        mWeakViewTreeObserver.clear();
+        mBannerVisibilityTrackerListener = null;
+    }
+
+    void scheduleVisibilityCheck() {
+        // Tracking this directly instead of calling hasMessages directly because we measured that
+        // this led to slightly better performance.
+        if (mIsVisibilityScheduled) {
+            return;
+        }
+
+        mIsVisibilityScheduled = true;
+        mVisibilityHandler.postDelayed(mVisibilityRunnable, VISIBILITY_THROTTLE_MILLIS);
+    }
+
+    @NonNull
+    @Deprecated
+    @VisibleForTesting
+    BannerVisibilityChecker getBannerVisibilityChecker() {
+        return mVisibilityChecker;
+    }
+
+    @NonNull
+    @Deprecated
+    @VisibleForTesting
+    Handler getVisibilityHandler() {
+        return mVisibilityHandler;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    boolean isVisibilityScheduled() {
+        return mIsVisibilityScheduled;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    boolean isImpTrackerFired() {
+        return mIsImpTrackerFired;
+    }
+
+    class BannerVisibilityRunnable implements Runnable {
+        @Override
+        public void run() {
+            if (mIsImpTrackerFired) {
+                return;
+            }
+
+            mIsVisibilityScheduled = false;
+
+            // If the view meets the dips count requirement for visibility, then also check the
+            // duration requirement for visibility.
+            if (mVisibilityChecker.isVisible(mRootView, mTrackedView)) {
+                // Start the timer for duration requirement if it hasn't already.
+                if (!mVisibilityChecker.hasBeenVisibleYet()) {
+                    mVisibilityChecker.setStartTimeMillis();
+                }
+
+                if (mVisibilityChecker.hasRequiredTimeElapsed()) {
+                    if (mBannerVisibilityTrackerListener != null) {
+                        mBannerVisibilityTrackerListener.onVisibilityChanged();
+                        mIsImpTrackerFired = true;
+                    }
+                }
+            }
+
+            // If visibility requirements are not met, check again later.
+            if (!mIsImpTrackerFired) {
+                scheduleVisibilityCheck();
+            }
+        }
+    }
+
+    static class BannerVisibilityChecker {
+        private int mMinVisibleDips;
+        private int mMinVisibleMillis;
+        private long mStartTimeMillis = Long.MIN_VALUE;
+
+        // A rect to use for hit testing. Create this once to avoid excess garbage collection
+        private final Rect mClipRect = new Rect();
+
+        BannerVisibilityChecker(final int minVisibleDips, final int minVisibleMillis) {
+            mMinVisibleDips = minVisibleDips;
+            mMinVisibleMillis = minVisibleMillis;
+        }
+
+        boolean hasBeenVisibleYet() {
+            return mStartTimeMillis != Long.MIN_VALUE;
+        }
+
+        void setStartTimeMillis() {
+            mStartTimeMillis = SystemClock.uptimeMillis();
+        }
+
+        /**
+         * Whether the visible time has elapsed from the start time.
+         */
+        boolean hasRequiredTimeElapsed() {
+            if (!hasBeenVisibleYet()) {
+                return false;
+            }
+
+            return SystemClock.uptimeMillis() - mStartTimeMillis >= mMinVisibleMillis;
+        }
+
+        /**
+         * Whether the visible dips count requirement is met.
+         */
+        boolean isVisible(@Nullable final View rootView, @Nullable final View view) {
+            // ListView & GridView both call detachFromParent() for views that can be recycled for
+            // new data. This is one of the rare instances where a view will have a null parent for
+            // an extended period of time and will not be the main window.
+            // view.getGlobalVisibleRect() doesn't check that case, so if the view has visibility
+            // of View.VISIBLE but its group has no parent it is likely in the recycle bin of a
+            // ListView / GridView and not on screen.
+            if (view == null || view.getVisibility() != View.VISIBLE || rootView.getParent() == null) {
+                return false;
+            }
+
+            // If either width or height is non-positive, the view cannot be visible.
+            if (view.getWidth() <= 0 || view.getHeight() <= 0) {
+                return false;
+            }
+
+            // View completely clipped by its parents
+            if (!view.getGlobalVisibleRect(mClipRect)) {
+                return false;
+            }
+
+            // Calculate area of view not clipped by any of its parents
+            final int widthInDips = Dips.pixelsToIntDips((float) mClipRect.width(),
+                    view.getContext());
+            final int heightInDips = Dips.pixelsToIntDips((float) mClipRect.height(),
+                    view.getContext());
+            final long visibleViewAreaInDips = (long) (widthInDips * heightInDips);
+
+            return visibleViewAreaInDips >= mMinVisibleDips;
+        }
+    }
+}
+
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java
index 0db1f408..be3c0062 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java
@@ -37,7 +37,13 @@ protected abstract void loadBanner(Context context,
      * Called when a Custom Event is being invalidated or destroyed. Perform any final cleanup here.
      */
     protected abstract void onInvalidate();
-    
+
+    /*
+     * Fire MPX impression trackers and 3rd-party impression trackers from JS.
+     */
+    protected void trackMpxAndThirdPartyImpressions() {
+    }
+
     public interface CustomEventBannerListener {
         /*
          * Your custom event subclass must call this method when it successfully loads an ad and
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
index ef72d1ba..9ae515fd 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
@@ -4,11 +4,14 @@
 import android.os.Handler;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.text.TextUtils;
 import android.view.View;
 
 import com.mopub.common.AdReport;
 import com.mopub.common.Constants;
+import com.mopub.common.DataKeys;
 import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.ReflectionTarget;
 import com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
@@ -38,6 +41,11 @@
     private final Runnable mTimeout;
     private boolean mStoredAutorefresh;
 
+    private int mImpressionMinVisibleDips = Integer.MIN_VALUE;
+    private int mImpressionMinVisibleMs = Integer.MIN_VALUE;
+    private boolean mIsVisibilityImpressionTrackingEnabled = false;
+    @Nullable private BannerVisibilityTracker mVisibilityTracker;
+
     public CustomEventBannerAdapter(@NonNull MoPubView moPubView,
             @NonNull String className,
             @NonNull Map<String, String> serverExtras,
@@ -68,6 +76,9 @@ public void run() {
         // Attempt to load the JSON extras into mServerExtras.
         mServerExtras = new TreeMap<String, String>(serverExtras);
 
+        // Parse banner impression tracking headers to determine if we are in visibility experiment
+        parseBannerImpressionTrackingHeaders();
+
         mLocalExtras = mMoPubView.getLocalExtras();
         if (mMoPubView.getLocation() != null) {
             mLocalExtras.put("location", mMoPubView.getLocation());
@@ -107,6 +118,13 @@ void invalidate() {
                 MoPubLog.d("Invalidating a custom event banner threw an exception", e);
             }
         }
+        if (mVisibilityTracker != null) {
+            try {
+                mVisibilityTracker.destroy();
+            } catch (Exception e) {
+                MoPubLog.d("Destroying a banner visibility tracker threw an exception", e);
+            }
+        }
         mContext = null;
         mCustomEventBanner = null;
         mLocalExtras = null;
@@ -118,6 +136,31 @@ boolean isInvalidated() {
         return mInvalidated;
     }
 
+    @Deprecated
+    @VisibleForTesting
+    int getImpressionMinVisibleDips() {
+        return mImpressionMinVisibleDips;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    int getImpressionMinVisibleMs() {
+        return mImpressionMinVisibleMs;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    boolean isVisibilityImpressionTrackingEnabled() {
+        return mIsVisibilityImpressionTrackingEnabled;
+    }
+
+    @Nullable
+    @Deprecated
+    @VisibleForTesting
+    BannerVisibilityTracker getVisibilityTracker() {
+        return mVisibilityTracker;
+    }
+
     private void cancelTimeout() {
         mHandler.removeCallbacks(mTimeout);
     }
@@ -132,6 +175,34 @@ private int getTimeoutDelayMilliseconds() {
         return mMoPubView.getAdTimeoutDelay() * 1000;
     }
 
+    private void parseBannerImpressionTrackingHeaders() {
+        final String impressionMinVisibleDipsString =
+                mServerExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS);
+        final String impressionMinVisibleMsString =
+                mServerExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS);
+
+        if (!TextUtils.isEmpty(impressionMinVisibleDipsString)
+                && !TextUtils.isEmpty(impressionMinVisibleMsString)) {
+            try {
+                mImpressionMinVisibleDips = Integer.parseInt(impressionMinVisibleDipsString);
+            } catch (NumberFormatException e) {
+                MoPubLog.d("Cannot parse integer from header "
+                        + DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS);
+            }
+
+            try {
+                mImpressionMinVisibleMs = Integer.parseInt(impressionMinVisibleMsString);
+            } catch (NumberFormatException e) {
+                MoPubLog.d("Cannot parse integer from header "
+                        + DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS);
+            }
+
+            if (mImpressionMinVisibleDips > 0 && mImpressionMinVisibleMs >= 0) {
+                    mIsVisibilityImpressionTrackingEnabled = true;
+            }
+        }
+    }
+
     /*
      * CustomEventBanner.Listener implementation
      */
@@ -145,9 +216,36 @@ public void onBannerLoaded(View bannerView) {
 
         if (mMoPubView != null) {
             mMoPubView.nativeAdLoaded();
+
+            // If visibility impression tracking is enabled for banners, fire all impression
+            // tracking URLs (AdServer, MPX, 3rd-party) for both HTML and MRAID banner types when
+            // visibility conditions are met.
+            //
+            // Else, retain old behavior of firing AdServer impression tracking URL if and only if
+            // banner is not HTML.
+            if (mIsVisibilityImpressionTrackingEnabled) {
+                // Set up visibility tracker and listener if in experiment
+                mVisibilityTracker = new BannerVisibilityTracker(mContext, mMoPubView, bannerView,
+                        mImpressionMinVisibleDips, mImpressionMinVisibleMs);
+                mVisibilityTracker.setBannerVisibilityTrackerListener(
+                        new BannerVisibilityTracker.BannerVisibilityTrackerListener() {
+                    @Override
+                    public void onVisibilityChanged() {
+                        mMoPubView.trackNativeImpression();
+                        if (mCustomEventBanner != null) {
+                            mCustomEventBanner.trackMpxAndThirdPartyImpressions();
+                        }
+                    }
+                });
+            }
+
             mMoPubView.setAdContentView(bannerView);
-            if (!(bannerView instanceof HtmlBannerWebView)) {
-                mMoPubView.trackNativeImpression();
+
+            // Old behavior
+            if (!mIsVisibilityImpressionTrackingEnabled) {
+                if (!(bannerView instanceof HtmlBannerWebView)) {
+                    mMoPubView.trackNativeImpression();
+                }
             }
         }
     }
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
index dcdf11bd..1cf274fb 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
@@ -1,21 +1,25 @@
 package com.mopub.mobileads;
 
+import android.app.Activity;
 import android.content.Context;
+import android.support.annotation.Nullable;
 
 import com.mopub.common.AdReport;
 import com.mopub.common.DataKeys;
+import com.mopub.common.ExternalViewabilitySessionManager;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.factories.HtmlBannerWebViewFactory;
 
 import java.util.Map;
 
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
 import static com.mopub.mobileads.MoPubErrorCode.INTERNAL_ERROR;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 
 public class HtmlBanner extends CustomEventBanner {
-
     private HtmlBannerWebView mHtmlBannerWebView;
+    @Nullable private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
 
     @Override
     protected void loadBanner(
@@ -34,6 +38,7 @@ protected void loadBanner(
             redirectUrl = serverExtras.get(DataKeys.REDIRECT_URL_KEY);
             clickthroughUrl = serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY);
             isScrollable = Boolean.valueOf(serverExtras.get(DataKeys.SCROLLABLE_KEY));
+
             try {
                 adReport = (AdReport) localExtras.get(AD_REPORT_KEY);
             } catch (ClassCastException e) {
@@ -48,16 +53,35 @@ protected void loadBanner(
 
         mHtmlBannerWebView = HtmlBannerWebViewFactory.create(context, adReport, customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl);
         AdViewController.setShouldHonorServerDimensions(mHtmlBannerWebView);
+
+        if (context instanceof Activity) {
+            final Activity activity = (Activity) context;
+            mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(activity);
+            mExternalViewabilitySessionManager.createDisplaySession(activity, mHtmlBannerWebView);
+        } else {
+            MoPubLog.d("Unable to start viewability session for HTML banner: Context provided was not an Activity.");
+        }
+
         mHtmlBannerWebView.loadHtmlResponse(htmlData);
     }
 
     @Override
     protected void onInvalidate() {
+        if (mExternalViewabilitySessionManager != null) {
+            mExternalViewabilitySessionManager.endDisplaySession();
+            mExternalViewabilitySessionManager = null;
+        }
+
         if (mHtmlBannerWebView != null) {
             mHtmlBannerWebView.destroy();
         }
     }
 
+    @Override
+    protected void trackMpxAndThirdPartyImpressions() {
+        mHtmlBannerWebView.loadUrl(WEB_VIEW_DID_APPEAR.getUrl());
+    }
+
     private boolean extrasAreValid(Map<String, String> serverExtras) {
         return serverExtras.containsKey(DataKeys.HTML_RESPONSE_BODY_KEY);
     }
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
index 558439d8..5e13128f 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
@@ -6,6 +6,7 @@
 import android.view.View;
 
 import com.mopub.common.AdReport;
+import com.mopub.common.ExternalViewabilitySessionManager;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.AdViewController;
@@ -17,19 +18,20 @@
 
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
 import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
 
 class MraidBanner extends CustomEventBanner {
-
     @Nullable private MraidController mMraidController;
     @Nullable private CustomEventBannerListener mBannerListener;
     @Nullable private MraidWebViewDebugListener mDebugListener;
+    @Nullable private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
 
     @Override
-    protected void loadBanner(@NonNull Context context,
-                    @NonNull CustomEventBannerListener customEventBannerListener,
-                    @NonNull Map<String, Object> localExtras,
-                    @NonNull Map<String, String> serverExtras) {
+    protected void loadBanner(@NonNull final Context context,
+                    @NonNull final CustomEventBannerListener customEventBannerListener,
+                    @NonNull final Map<String, Object> localExtras,
+                    @NonNull final Map<String, String> serverExtras) {
         mBannerListener = customEventBannerListener;
 
         String htmlData;
@@ -80,18 +82,36 @@ public void onClose() {
                 mBannerListener.onBannerCollapsed();
             }
         });
-        mMraidController.loadContent(htmlData);
+
+        mMraidController.fillContent(null, htmlData, new MraidController.MraidWebViewCacheListener() {
+            @Override
+            public void onReady(final @NonNull MraidBridge.MraidWebView webView,
+                    final @Nullable ExternalViewabilitySessionManager viewabilityManager) {
+                webView.getSettings().setJavaScriptEnabled(true);
+                mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(context);
+                mExternalViewabilitySessionManager.createDisplaySession(context, webView);
+            }
+        });
     }
 
     @Override
     protected void onInvalidate() {
+        if (mExternalViewabilitySessionManager != null) {
+            mExternalViewabilitySessionManager.endDisplaySession();
+            mExternalViewabilitySessionManager = null;
+        }
         if (mMraidController != null) {
             mMraidController.setMraidListener(null);
             mMraidController.destroy();
         }
     }
 
-    private boolean extrasAreValid(Map<String, String> serverExtras) {
+    @Override
+    protected void trackMpxAndThirdPartyImpressions() {
+        mMraidController.loadJavascript(WEB_VIEW_DID_APPEAR.getJavascript());
+    }
+
+    private boolean extrasAreValid(@NonNull final Map<String, String> serverExtras) {
         return serverExtras.containsKey(HTML_RESPONSE_BODY_KEY);
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/build.gradle b/mopub-sdk/mopub-sdk-base/build.gradle
index 2ced0308..f039998a 100644
--- a/mopub-sdk/mopub-sdk-base/build.gradle
+++ b/mopub-sdk/mopub-sdk-base/build.gradle
@@ -1,7 +1,23 @@
 apply from: '../shared-build.gradle'
 
+repositories {
+    flatDir {
+        dirs './libs'
+    }
+    maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
+}
+
 dependencies {
     compile 'com.mopub.volley:mopub-volley:1.1.0'
+
+    def avidEnabled = project.hasProperty("mopub.avidEnabled") ? project.getProperty("mopub.avidEnabled").toBoolean() : true
+    if (avidEnabled) {
+        compile('com.mopub:libAvid-mopub:3.6.4')
+    }
+    def moatEnabled = project.hasProperty("mopub.moatEnabled") ? project.getProperty("mopub.moatEnabled").toBoolean() : true
+    if (moatEnabled) {
+        compile 'com.moat.analytics.mobile.mpub:moat-mobile-app-kit:2.1.0'
+    }
 }
 
 project.description = 'MoPub Android SDK - Base'
diff --git a/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml b/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml
index d480f9c5..fac2245b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml
+++ b/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml
@@ -2,3 +2,4 @@
     package="com.mopub.mobileads.base">
     <application/>
 </manifest>
+
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
index 4975407a..bc09b958 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.location.Location;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
@@ -101,6 +102,15 @@
      */
     private static final String BUNDLE_ID_KEY = "bundle";
 
+    /**
+     * Whether or not this ad is using third-party viewability tracking.
+     * 0: Moat disabled, Avid disabled
+     * 1: Moat disabled, Avid enabled
+     * 2: Moat enabled, Avid disabled
+     * 3: Moat enabled, Avid enabled
+     */
+    private static final String VIEWABILITY_KEY = "vv";
+
     protected Context mContext;
     protected String mAdUnitId;
     protected String mKeywords;
@@ -206,6 +216,12 @@ protected void setBundleId(String bundleId) {
         }
     }
 
+    protected void enableViewability(@NonNull final String vendorKey) {
+        Preconditions.checkNotNull(vendorKey);
+
+        addParam(VIEWABILITY_KEY, vendorKey);
+    }
+
     protected void addBaseParams(final ClientMetadata clientMetadata) {
         setAdUnitId(mAdUnitId);
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java
new file mode 100644
index 00000000..2a65e249
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java
@@ -0,0 +1,441 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.view.View;
+import android.webkit.WebView;
+
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Reflection;
+
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+// API documentation: https://drive.google.com/drive/folders/0B8U0thTyT1GGZTdEWm03VTlfbm8
+class AvidViewabilitySession implements ExternalViewabilitySession {
+    private static final String AVID_MANAGER_PATH =
+            "com.integralads.avid.library.mopub.AvidManager";
+    private static final String EXTERNAL_AVID_AD_SESSION_CONTEXT_PATH =
+            "com.integralads.avid.library.mopub.session.ExternalAvidAdSessionContext";
+    private static final String AVID_AD_SESSION_MANAGER_PATH =
+            "com.integralads.avid.library.mopub.session.AvidAdSessionManager";
+    private static final String AVID_KEY = "avid";
+
+    private static Object sAvidAdSessionContextDeferred;
+    private static Object sAvidAdSessionContextNonDeferred;
+    private static Boolean sIsViewabilityEnabledViaReflection;
+    private static boolean sIsVendorDisabled;
+
+    @Nullable private Object mAvidDisplayAdSession;
+    @Nullable private Object mAvidVideoAdSession;
+
+    static boolean isEnabled() {
+        return !sIsVendorDisabled && isViewabilityEnabledViaReflection();
+    }
+
+    static void disable() {
+        sIsVendorDisabled = true;
+    }
+
+    private static boolean isViewabilityEnabledViaReflection() {
+        if (sIsViewabilityEnabledViaReflection == null) {
+            sIsViewabilityEnabledViaReflection = Reflection.classFound(AVID_AD_SESSION_MANAGER_PATH);
+            MoPubLog.d("Avid is "
+                    + (sIsViewabilityEnabledViaReflection ? "" : "un")
+                    + "available via reflection.");
+        }
+
+        return sIsViewabilityEnabledViaReflection;
+    }
+
+    @Nullable
+    private static Object getAvidAdSessionContextDeferred() {
+        if (sAvidAdSessionContextDeferred == null) {
+            try {
+                // Pre-reflection code:
+                // sAvidAdSessionContextDeferred = new ExternalAvidAdSessionContext(
+                //         MoPub.SDK_VERSION, true);
+
+                sAvidAdSessionContextDeferred = Reflection.instantiateClassWithConstructor(
+                        EXTERNAL_AVID_AD_SESSION_CONTEXT_PATH, Object.class,
+                        new Class[] {String.class, boolean.class},
+                        new Object[] {MoPub.SDK_VERSION, true});
+            } catch (Exception e) {
+                MoPubLog.d("Unable to generate Avid deferred ad session context: "
+                        + e.getMessage());
+            }
+        }
+
+        return sAvidAdSessionContextDeferred;
+    }
+
+    @Nullable
+    private static Object getAvidAdSessionContextNonDeferred() {
+        if (sAvidAdSessionContextNonDeferred == null) {
+            try {
+                // Pre-reflection code:
+                // sAvidAdSessionContextNonDeferred = new ExternalAvidAdSessionContext(
+                //         MoPub.SDK_VERSION);
+
+                sAvidAdSessionContextNonDeferred = Reflection.instantiateClassWithConstructor(
+                        EXTERNAL_AVID_AD_SESSION_CONTEXT_PATH, Object.class,
+                        new Class[] {String.class},
+                        new Object[] {MoPub.SDK_VERSION});
+            } catch (Exception e) {
+                MoPubLog.d("Unable to generate Avid ad session context: "
+                        + e.getMessage());
+            }
+        }
+
+        return sAvidAdSessionContextNonDeferred;
+    }
+
+    @Override
+    @NonNull
+    public String getName() {
+        return "AVID";
+    }
+
+    @Override
+    @Nullable
+    public Boolean initialize(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        // unimplemented by Avid
+        return true;
+    }
+
+    @Override
+    @Nullable
+    public Boolean invalidate() {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        mAvidDisplayAdSession = null;
+        mAvidVideoAdSession = null;
+
+        return true;
+    }
+
+    @Override
+    @Nullable
+    public Boolean createDisplaySession(@NonNull final Context context,
+            @NonNull final WebView webView, boolean isDeferred) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(webView);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        final Object avidAdSessionContext =
+                isDeferred
+                ? getAvidAdSessionContextDeferred()
+                : getAvidAdSessionContextNonDeferred();
+        final Activity activity = (context instanceof Activity) ? (Activity) context : null;
+
+        // Pre-reflection code:
+        // mAvidDisplayAdSession = AvidAdSessionManager.startAvidDisplayAdSession(activity,
+        //         avidAdSessionContext);
+        // mAvidDisplayAdSession.registerAdView(webView, activity);
+
+        try {
+            mAvidDisplayAdSession = new Reflection.MethodBuilder(null, "startAvidDisplayAdSession")
+                    .setStatic(AVID_AD_SESSION_MANAGER_PATH)
+                    .addParam(Context.class, context)
+                    .addParam(EXTERNAL_AVID_AD_SESSION_CONTEXT_PATH, avidAdSessionContext)
+                    .execute();
+
+            new Reflection.MethodBuilder(mAvidDisplayAdSession, "registerAdView")
+                    .addParam(View.class, webView)
+                    .addParam(Activity.class, activity)
+                    .execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Avid start display session: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean startDeferredDisplaySession(@NonNull final Activity activity) {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mAvidDisplayAdSession == null) {
+            MoPubLog.d("Avid DisplayAdSession unexpectedly null.");
+            return false;
+        }
+
+        // Pre-reflection code:
+        // AvidManager.getInstance().registerActivity(activity);
+        // if (mAvidDisplayAdSession.getAvidDeferredAdSessionListener() != null) {
+        //     mAvidDisplayAdSession.getAvidDeferredAdSessionListener().recordReadyEvent();
+        // }
+
+        try {
+            final Object avidManager = new Reflection.MethodBuilder(null, "getInstance")
+                    .setStatic(AVID_MANAGER_PATH)
+                    .execute();
+
+            new Reflection.MethodBuilder(avidManager, "registerActivity")
+                    .addParam(Activity.class, activity)
+                    .execute();
+
+            final Object deferredAdSessionListener =
+                    new Reflection.MethodBuilder(mAvidDisplayAdSession,
+                            "getAvidDeferredAdSessionListener").execute();
+
+            if (deferredAdSessionListener == null) {
+                MoPubLog.d("Avid AdSessionListener unexpectedly null.");
+                return false;
+            }
+
+            new Reflection.MethodBuilder(deferredAdSessionListener, "recordReadyEvent")
+                    .execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Avid record deferred session: "
+                    + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean endDisplaySession() {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mAvidDisplayAdSession == null) {
+            MoPubLog.d("Avid DisplayAdSession unexpectedly null.");
+            return false;
+        }
+
+        // Pre-reflection code:
+        // mAvidDisplayAdSession.endSession();
+
+        try {
+            new Reflection.MethodBuilder(mAvidDisplayAdSession, "endSession").execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Avid end session: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean createVideoSession(@NonNull final Activity activity, @NonNull final View view,
+            @NonNull final Set<String> buyerResources,
+            @NonNull final Map<String, String> videoViewabilityTrackers) {
+        Preconditions.checkNotNull(activity);
+        Preconditions.checkNotNull(view);
+        Preconditions.checkNotNull(buyerResources);
+        Preconditions.checkNotNull(videoViewabilityTrackers);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        // Pre-reflection code:
+        // mAvidVideoAdSession = AvidAdSessionManager.startAvidManagedVideoAdSession(activity,
+        //         (ExternalAvidAdSessionContext) getAvidAdSessionContextNonDeferred());
+        // mAvidVideoAdSession.registerAdView(view, activity);
+        // if (!TextUtils.isEmpty(videoViewabilityTrackers.get(AVID_KEY))) {
+        //     mAvidVideoAdSession.injectJavaScriptResource(videoViewabilityTrackers.get(AVID_KEY));
+        // }
+        // for (final String buyerResource : buyerResources) {
+        //     if (buyerResource != null) {
+        //         mAvidVideoAdSession.injectJavaScriptResource(buyerResource);
+        //     }
+        // }
+
+        try {
+            mAvidVideoAdSession = new Reflection.MethodBuilder(null, "startAvidManagedVideoAdSession")
+                    .setStatic(AVID_AD_SESSION_MANAGER_PATH)
+                    .addParam(Context.class, activity)
+                    .addParam(EXTERNAL_AVID_AD_SESSION_CONTEXT_PATH, getAvidAdSessionContextNonDeferred())
+                    .execute();
+
+            new Reflection.MethodBuilder(mAvidVideoAdSession, "registerAdView")
+                    .addParam(View.class, view)
+                    .addParam(Activity.class, activity)
+                    .execute();
+
+            if (!TextUtils.isEmpty(videoViewabilityTrackers.get(AVID_KEY))) {
+                new Reflection.MethodBuilder(mAvidVideoAdSession, "injectJavaScriptResource")
+                        .addParam(String.class, videoViewabilityTrackers.get(AVID_KEY))
+                        .execute();
+            }
+
+            for (final String buyerResource : buyerResources) {
+                if (!TextUtils.isEmpty(buyerResource)) {
+                    new Reflection.MethodBuilder(mAvidVideoAdSession, "injectJavaScriptResource")
+                            .addParam(String.class, buyerResource)
+                            .execute();
+                }
+            }
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Avid start video session: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean registerVideoObstructions(@NonNull final List<View> views) {
+        Preconditions.checkNotNull(views);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mAvidVideoAdSession == null) {
+            MoPubLog.d("Avid VideoAdSession unexpectedly null.");
+            return false;
+        }
+
+        try {
+            for (final View view : views) {
+                if (view != null) {
+                    // Pre-reflection code:
+                    // mAvidVideoAdSession.registerFriendlyObstruction(view);
+
+                    new Reflection.MethodBuilder(mAvidVideoAdSession, "registerFriendlyObstruction")
+                            .addParam(View.class, view)
+                            .execute();
+                }
+            }
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to register Avid video obstructions: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean onVideoPrepared(@NonNull final View playerView, final int duration) {
+        Preconditions.checkNotNull(playerView);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        // unimplemented by Avid
+        return true;
+    }
+
+    @Override
+    @Nullable
+    public Boolean recordVideoEvent(@NonNull final VideoEvent event, final int playheadMillis) {
+        Preconditions.checkNotNull(event);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mAvidVideoAdSession == null) {
+            MoPubLog.d("Avid VideoAdSession unexpectedly null.");
+            return false;
+        }
+
+        try {
+            switch (event) {
+                case AD_LOADED:
+                case AD_STARTED:
+                case AD_STOPPED:
+                case AD_PAUSED:
+                case AD_PLAYING:
+                case AD_SKIPPED:
+                case AD_IMPRESSED:
+                case AD_CLICK_THRU:
+                case AD_VIDEO_FIRST_QUARTILE:
+                case AD_VIDEO_MIDPOINT:
+                case AD_VIDEO_THIRD_QUARTILE:
+                case AD_COMPLETE:
+                    handleVideoEventReflection(event);
+                    return true;
+
+                case RECORD_AD_ERROR:
+                    handleVideoEventReflection(event, "error");
+                    return true;
+
+                default:
+                    MoPubLog.d("Unexpected video event type: " + event);
+                    return false;
+            }
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Avid video event for "
+                    + event.getAvidMethodName() + ": " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean endVideoSession() {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mAvidVideoAdSession == null) {
+            MoPubLog.d("Avid VideoAdSession unexpectedly null.");
+            return false;
+        }
+
+        // Pre-reflection code:
+        // mAvidVideoAdSession.endSession();
+
+        try {
+            new Reflection.MethodBuilder(mAvidVideoAdSession, "endSession").execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Avid end video session: " + e.getMessage());
+            return false;
+        }
+    }
+
+    private void handleVideoEventReflection(@NonNull final VideoEvent videoEvent) throws Exception {
+        handleVideoEventReflection(videoEvent, null);
+    }
+
+    private void handleVideoEventReflection(@NonNull final VideoEvent videoEvent,
+            @Nullable final String message) throws Exception {
+        // Pre-reflection code:
+        // mAvidVideoAdSession.getAvidVideoPlaybackListener().<videoEventMethodName>();
+
+        final Object playbackListener =
+                new Reflection.MethodBuilder(mAvidVideoAdSession, "getAvidVideoPlaybackListener")
+                .execute();
+
+        Reflection.MethodBuilder methodBuilder =
+                new Reflection.MethodBuilder(playbackListener, videoEvent.getAvidMethodName());
+
+        if (!TextUtils.isEmpty(message)) {
+            methodBuilder.addParam(String.class, message);
+        }
+
+        methodBuilder.execute();
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
index 33d94acb..66de7413 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
@@ -8,7 +8,6 @@
 import android.webkit.WebViewClient;
 
 import com.mopub.common.logging.MoPubLog;
-import com.mopub.exceptions.IntentNotResolvableException;
 
 import java.util.EnumSet;
 
@@ -78,8 +77,6 @@ public void urlHandlingFailed(@NonNull String url,
     @Override
     public void onPageStarted(WebView view, String url, Bitmap favicon) {
         super.onPageStarted(view, url, favicon);
-        mMoPubBrowser.getForwardButton()
-                .setImageDrawable(UNRIGHT_ARROW.createDrawable(mMoPubBrowser));
     }
 
     @Override
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
index 39fd7909..c0d2d12b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
@@ -17,6 +17,7 @@ private Constants() {}
 
     public static final int TEN_SECONDS_MILLIS = 10 * 1000;
     public static final int THIRTY_SECONDS_MILLIS = 30 * 1000;
+    public static final int FIFTEEN_MINUTES_MILLIS = 15 * 60 * 1000;
     public static final int FOUR_HOURS_MILLIS = 4 * 60 * 60 * 1000;
 
     public static final int AD_EXPIRATION_DELAY = FOUR_HOURS_MILLIS;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
index 494c980f..1de41b77 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
@@ -17,11 +17,18 @@
     public static final String AD_WIDTH = "com_mopub_ad_width";
     public static final String AD_HEIGHT = "com_mopub_ad_height";
 
+    // Banner imp tracking fields
+    public static final String BANNER_IMPRESSION_MIN_VISIBLE_DIPS = "Banner-Impression-Min-Pixels";
+    public static final String BANNER_IMPRESSION_MIN_VISIBLE_MS = "Banner-Impression-Min-Ms";
+
+    // Native fields
+    public static final String IMPRESSION_MIN_VISIBLE_PERCENT = "Impression-Min-Visible-Percent";
+    public static final String IMPRESSION_VISIBLE_MS = "Impression-Visible-Ms";
+    public static final String IMPRESSION_MIN_VISIBLE_PX = "Impression-Min-Visible-Px";
+
     // Native Video fields
     public static final String PLAY_VISIBLE_PERCENT = "Play-Visible-Percent";
     public static final String PAUSE_VISIBLE_PERCENT = "Pause-Visible-Percent";
-    public static final String IMPRESSION_MIN_VISIBLE_PERCENT = "Impression-Min-Visible-Percent";
-    public static final String IMPRESSION_VISIBLE_MS = "Impression-Visible-Ms";
     public static final String MAX_BUFFER_MS = "Max-Buffer-Ms";
     public static final String EVENT_DETAILS = "Event-Details";
 
@@ -32,6 +39,9 @@
     public static final String REWARDED_AD_DURATION_KEY = "Rewarded-Ad-Duration";
     public static final String SHOULD_REWARD_ON_CLICK_KEY = "Should-Reward-On-Click";
 
+    // Viewability fields
+    public static final String EXTERNAL_VIDEO_VIEWABILITY_TRACKERS_KEY = "External-Video-Viewability-Trackers";
+
     /**
      * @deprecated as of 4.12, replaced by {@link #REWARDED_AD_CUSTOMER_ID_KEY}
      */
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java
new file mode 100644
index 00000000..258836f5
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java
@@ -0,0 +1,92 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.webkit.WebView;
+
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+/**
+ * Implementers should use reflection to invoke external APIs as all viewability dependencies are
+ * optional.
+ *
+ * Note that all interface methods return @Nullable Booleans. Return values are as follows:
+ * null - vendor was disabled either via client or server; method calls fast fail
+ * true - successfully called through via reflection
+ * false - error invoking via reflection or unexpected internal session state
+ */
+public interface ExternalViewabilitySession {
+    @NonNull String getName();
+
+    @Nullable Boolean initialize(@NonNull final Context context);
+    @Nullable Boolean invalidate();
+
+    // Display only
+    @Nullable Boolean createDisplaySession(@NonNull final Context context,
+            @NonNull final WebView webView, boolean isDeferred);
+    @Nullable Boolean startDeferredDisplaySession(@NonNull final Activity activity);
+    @Nullable Boolean endDisplaySession();
+
+    // Video only
+    @Nullable Boolean createVideoSession(@NonNull final Activity activity, @NonNull final View view,
+            @NonNull final Set<String> buyerResources,
+            @NonNull final Map<String, String> videoViewabilityTrackers);
+    @Nullable Boolean registerVideoObstructions(@NonNull final List<View> views);
+    @Nullable Boolean onVideoPrepared(@NonNull final View playerView, final int duration);
+    @Nullable Boolean recordVideoEvent(@NonNull final VideoEvent event, final int playheadMillis);
+    @Nullable Boolean endVideoSession();
+
+    enum VideoEvent {
+        AD_LOADED(null, "recordAdLoadedEvent"),
+        AD_STARTED("AD_EVT_START", "recordAdStartedEvent"),
+        AD_STOPPED("AD_EVT_STOPPED", "recordAdStoppedEvent"),
+        AD_PAUSED("AD_EVT_PAUSED", "recordAdPausedEvent"),
+        AD_PLAYING("AD_EVT_PLAYING", "recordAdPlayingEvent"),
+        AD_SKIPPED("AD_EVT_SKIPPED", "recordAdSkippedEvent"),
+
+        AD_IMPRESSED(null, "recordAdImpressionEvent"),
+        AD_CLICK_THRU(null, "recordAdClickThruEvent"),
+
+        AD_VIDEO_FIRST_QUARTILE("AD_EVT_FIRST_QUARTILE", "recordAdVideoFirstQuartileEvent"),
+        AD_VIDEO_MIDPOINT("AD_EVT_MID_POINT", "recordAdVideoMidpointEvent"),
+        AD_VIDEO_THIRD_QUARTILE("AD_EVT_THIRD_QUARTILE", "recordAdVideoThirdQuartileEvent"),
+        AD_COMPLETE("AD_EVT_COMPLETE", "recordAdCompleteEvent"),
+
+        RECORD_AD_ERROR(null, "recordAdError");
+
+        // These are not yet possible with our VAST player. Unimplemented.
+        // AD_EXPANDED_CHANGE,
+        // AD_ENTERED_FULLSCREEN,
+        // AD_EXITED_FULLSCREEN,
+        // RECORD_AD_DURATION_CHANGED,
+        // AD_VOLUME_CHANGE_EVENT,
+
+        // These are not yet possible with our VAST player. Unimplemented.
+        // AD_USER_MINIMIZE,
+        // AD_USER_ACCEPT_INVITATION,
+        // AD_USER_CLOSE,
+
+
+        @Nullable private String moatEnumName;
+        @NonNull private String avidMethodName;
+        VideoEvent(@Nullable final String moatEnumName, @NonNull final String avidMethodName) {
+            this.moatEnumName = moatEnumName;
+            this.avidMethodName = avidMethodName;
+        }
+
+        @Nullable
+        public String getMoatEnumName() {
+            return moatEnumName;
+        }
+
+        @NonNull
+        public String getAvidMethodName() {
+            return avidMethodName;
+        }
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java
new file mode 100644
index 00000000..439a96d3
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java
@@ -0,0 +1,265 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.webkit.WebView;
+
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.VastVideoConfig;
+
+import java.util.HashSet;
+import java.util.List;
+import java.util.Locale;
+import java.util.Set;
+
+/**
+ * Encapsulates all third-party viewability session measurements.
+ */
+public class ExternalViewabilitySessionManager {
+
+    @NonNull private final Set<ExternalViewabilitySession> mViewabilitySessions;
+
+    public enum ViewabilityVendor {
+        AVID, MOAT, ALL;
+
+        public void disable() {
+            switch (this) {
+                case AVID:
+                    AvidViewabilitySession.disable();
+                    break;
+                case MOAT:
+                    MoatViewabilitySession.disable();
+                    break;
+                case ALL:
+                    AvidViewabilitySession.disable();
+                    MoatViewabilitySession.disable();
+                    break;
+                default:
+                    MoPubLog.d("Attempted to disable an invalid viewability vendor: " + this);
+                    return;
+            }
+            MoPubLog.d("Disabled viewability for " + this);
+        }
+
+        /**
+         * @link { AdUrlGenerator#VIEWABILITY_KEY }
+         */
+        @NonNull
+        public static String getEnabledVendorKey() {
+            final boolean avidEnabled = AvidViewabilitySession.isEnabled();
+            final boolean moatEnabled = MoatViewabilitySession.isEnabled();
+
+            String vendorKey = "0";
+            if (avidEnabled && moatEnabled) {
+                vendorKey = "3";
+            } else if (avidEnabled) {
+                vendorKey = "1";
+            } else if (moatEnabled) {
+                vendorKey = "2";
+            }
+
+            return vendorKey;
+        }
+
+        @Nullable
+        public static ViewabilityVendor fromKey(@NonNull final String key) {
+            Preconditions.checkNotNull(key);
+
+            switch (key) {
+                case "1":
+                    return AVID;
+                case "2":
+                    return MOAT;
+                case "3":
+                    return ALL;
+                default:
+                    return null;
+            }
+        }
+    }
+
+    public ExternalViewabilitySessionManager(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        mViewabilitySessions = new HashSet<ExternalViewabilitySession>();
+        mViewabilitySessions.add(new AvidViewabilitySession());
+        mViewabilitySessions.add(new MoatViewabilitySession());
+
+        initialize(context);
+    }
+
+    /**
+     * Allow the viewability session to perform any necessary initialization. Each session
+     * must handle any relevant caching or lazy loading independently.
+     *
+     * @param context Preferably Activity Context. Currently only used to obtain a reference to the
+     *                Application required by some viewability vendors.
+     */
+    private void initialize(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.initialize(context);
+            logEvent(session, "initialize", successful, false);
+        }
+    }
+
+    /**
+     * Perform any necessary clean-up and release of resources.
+     */
+    public void invalidate() {
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.invalidate();
+            logEvent(session, "invalidate", successful, false);
+        }
+    }
+
+    /**
+     * Registers and starts viewability tracking for the given WebView.
+     * @param context Preferably an Activity Context.
+     * @param webView The WebView to be tracked.
+     * @param isDeferred True for cached ads (i.e. interstitials)
+     */
+    public void createDisplaySession(@NonNull final Context context,
+            @NonNull final WebView webView, boolean isDeferred) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(webView);
+
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.createDisplaySession(context, webView, isDeferred);
+            logEvent(session, "start display session", successful, true);
+        }
+    }
+
+    public void createDisplaySession(@NonNull final Context context,
+            @NonNull final WebView webview) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(webview);
+
+        createDisplaySession(context, webview, false);
+    }
+
+    /**
+     * Begins deferred impression tracking. For cached ads (i.e. interstitials) this should be
+     * called separately from {@link ExternalViewabilitySessionManager#createDisplaySession(Context, WebView)}.
+     * @param activity
+     */
+    public void startDeferredDisplaySession(@NonNull final Activity activity) {
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.startDeferredDisplaySession(activity);
+            logEvent(session, "record deferred session", successful, true);
+        }
+    }
+
+    /**
+     * Unregisters and disables all viewability tracking for the given WebView.
+     */
+    public void endDisplaySession() {
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.endDisplaySession();
+            logEvent(session, "end display session", successful, true);
+        }
+    }
+
+    /**
+     * Registers and starts video viewability tracking for the given View.
+     *
+     * @param activity An Activity Context.
+     * @param view The player View.
+     * @param vastVideoConfig Configuration file used to store video viewability tracking tags.
+     */
+    public void createVideoSession(@NonNull final Activity activity, @NonNull final View view,
+            @NonNull final VastVideoConfig vastVideoConfig) {
+        Preconditions.checkNotNull(activity);
+        Preconditions.checkNotNull(view);
+        Preconditions.checkNotNull(vastVideoConfig);
+
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Set<String> buyerResources = new HashSet<String>();
+            if (session instanceof AvidViewabilitySession) {
+                buyerResources.addAll(vastVideoConfig.getAvidJavascriptResources());
+            } else if (session instanceof MoatViewabilitySession) {
+                buyerResources.addAll(vastVideoConfig.getMoatImpressionPixels());
+            }
+
+            final Boolean successful = session.createVideoSession(activity, view, buyerResources,
+                    vastVideoConfig.getExternalViewabilityTrackers());
+            logEvent(session, "start video session", successful, true);
+        }
+    }
+
+    /**
+     * Prevents friendly obstructions from affecting viewability scores.
+     *
+     * @param views Views in the same Window and a higher z-index as the video playing.
+     */
+    public void registerVideoObstructions(@NonNull final List<View> views) {
+        Preconditions.checkNotNull(views);
+
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.registerVideoObstructions(views);
+            logEvent(session, "register friendly obstruction", successful, true);
+        }
+    }
+
+    public void onVideoPrepared(@NonNull final View playerView, final int duration) {
+        Preconditions.checkNotNull(playerView);
+
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.onVideoPrepared(playerView, duration);
+            logEvent(session, "on video prepared", successful, true);
+        }
+    }
+
+    /**
+     * Notify pertinent video lifecycle events (e.g. MediaPlayer onPrepared, first quartile fired).
+     *
+     * @param event Corresponding {@link ExternalViewabilitySession.VideoEvent}.
+     * @param playheadMillis Current video playhead, in milliseconds.
+     */
+    public void recordVideoEvent(@NonNull final ExternalViewabilitySession.VideoEvent event,
+            final int playheadMillis) {
+        Preconditions.checkNotNull(event);
+
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.recordVideoEvent(event, playheadMillis);
+            logEvent(session, "record video event (" + event.name() + ")", successful, true);
+        }
+    }
+
+    /**
+     * Unregisters and disables all viewability tracking for the given View.
+     */
+    public void endVideoSession() {
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.endVideoSession();
+            logEvent(session, "end video session", successful, true);
+        }
+    }
+
+    private void logEvent(@NonNull final ExternalViewabilitySession session,
+            @NonNull final String event,
+            @Nullable final Boolean successful,
+            final boolean isVerbose) {
+        Preconditions.checkNotNull(session);
+        Preconditions.checkNotNull(event);
+
+        if (successful == null) {
+            // Method return values are only null when the corresponding viewability vendor has been
+            // disabled. Do not log in those cases.
+            return;
+        }
+
+        final String failureString = successful ? "" : "failed to ";
+        final String message = String.format(Locale.US, "%s viewability event: %s%s.",
+                session.getName(), failureString, event);
+        if (isVerbose) {
+            MoPubLog.v(message);
+        } else {
+            MoPubLog.d(message);
+        }
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
index 9be4cd82..e4b96b6e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
@@ -10,8 +10,10 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
+import static com.mopub.common.ExternalViewabilitySessionManager.ViewabilityVendor;
+
 public class MoPub {
-    public static final String SDK_VERSION = "4.15.0";
+    public static final String SDK_VERSION = "4.19.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
@@ -175,6 +177,12 @@ public static void onBackPressed(@NonNull final Activity activity) {
         MoPubLifecycleManager.getInstance(activity).onBackPressed(activity);
     }
 
+    public static void disableViewability(@NonNull final ViewabilityVendor vendor) {
+        Preconditions.checkNotNull(vendor);
+
+        vendor.disable();
+    }
+
     ////////// MoPub RewardedVideoControl methods //////////
     // These methods have been deprecated as of release 4.9 due to SDK modularization. MoPub is
     // inside of the base module while MoPubRewardedVideos is inside of the rewarded video module.
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
index 303f9539..c60702bf 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
@@ -24,12 +24,14 @@
 
 import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
 import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
-import static com.mopub.common.event.BaseEvent.*;
+import static com.mopub.common.event.BaseEvent.Category;
+import static com.mopub.common.event.BaseEvent.Name;
+import static com.mopub.common.event.BaseEvent.SamplingRate;
 import static com.mopub.common.util.Drawables.BACKGROUND;
 import static com.mopub.common.util.Drawables.CLOSE;
-import static com.mopub.common.util.Drawables.LEFT_ARROW;
 import static com.mopub.common.util.Drawables.REFRESH;
-import static com.mopub.common.util.Drawables.RIGHT_ARROW;
+import static com.mopub.common.util.Drawables.UNLEFT_ARROW;
+import static com.mopub.common.util.Drawables.UNRIGHT_ARROW;
 
 public class MoPubBrowser extends Activity {
     public static final String DESTINATION_URL_KEY = "URL";
@@ -220,8 +222,8 @@ private View getMoPubBrowserView() {
         innerLayout.setBackgroundDrawable(BACKGROUND.createDrawable(this));
         outerLayout.addView(innerLayout);
 
-        mBackButton = getButton(LEFT_ARROW.createDrawable(this));
-        mForwardButton = getButton(RIGHT_ARROW.createDrawable(this));
+        mBackButton = getButton(UNLEFT_ARROW.createDrawable(this));
+        mForwardButton = getButton(UNRIGHT_ARROW.createDrawable(this));
         mRefreshButton = getButton(REFRESH.createDrawable(this));
         mCloseButton = getButton(CLOSE.createDrawable(this));
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java
new file mode 100644
index 00000000..8a3b6e9e
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java
@@ -0,0 +1,488 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.app.Application;
+import android.content.Context;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.view.View;
+import android.webkit.WebView;
+
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Reflection;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+// API documentation: https://drive.google.com/drive/folders/0B8U0thTyT1GGLUlweWRVMXk1Qlk
+class MoatViewabilitySession implements ExternalViewabilitySession {
+    private static final String MOAT_FACTORY_PATH = "com.moat.analytics.mobile.mpub.MoatFactory";
+    private static final String MOAT_OPTIONS_PATH = "com.moat.analytics.mobile.mpub.MoatOptions";
+    private static final String MOAT_ANALYTICS_PATH = "com.moat.analytics.mobile.mpub.MoatAnalytics";
+    private static final String MOAT_AD_EVENT_PATH = "com.moat.analytics.mobile.mpub.MoatAdEvent";
+    private static final String MOAT_AD_EVENT_TYPE_PATH = "com.moat.analytics.mobile.mpub.MoatAdEventType";
+    private static final String MOAT_REACTIVE_VIDEO_TRACKER_PLUGIN_PATH = "com.moat.analytics.mobile.mpub.ReactiveVideoTrackerPlugin";
+    private static final String MOAT_PLUGIN_PATH = "com.moat.analytics.mobile.mpub.MoatPlugin";
+
+    private static final String PARTNER_CODE_KEY = "partnerCode";
+    // MoPub's partner identifier with Moat. Partner code is normally parsed from the video
+    // viewability tracking URL, but in case of error, this default value is used instead.
+    private static final String DEFAULT_PARTNER_CODE = "mopubinapphtmvideo468906546585";
+    private static final String MOAT_KEY = "moat";
+    private static final String MOAT_VAST_IDS_KEY = "zMoatVASTIDs";
+
+    private static Boolean sIsViewabilityEnabledViaReflection;
+    private static boolean sIsVendorDisabled;
+    private static boolean sWasInitialized = false;
+
+    private static final Map<String, String> QUERY_PARAM_MAPPING = new HashMap<String, String>();
+    static {
+        QUERY_PARAM_MAPPING.put("moatClientLevel1", "level1");
+        QUERY_PARAM_MAPPING.put("moatClientLevel2", "level2");
+        QUERY_PARAM_MAPPING.put("moatClientLevel3", "level3");
+        QUERY_PARAM_MAPPING.put("moatClientLevel4", "level4");
+        QUERY_PARAM_MAPPING.put("moatClientSlicer1", "slicer1");
+        QUERY_PARAM_MAPPING.put("moatClientSlicer2", "slicer2");
+    }
+
+    @Nullable private Object mMoatWebAdTracker;
+    @Nullable private Object mMoatVideoTracker;
+    @NonNull private Map<String, String> mAdIds = new HashMap<String, String>();
+    private boolean mWasVideoPrepared;
+
+    static boolean isEnabled() {
+        return !sIsVendorDisabled && isViewabilityEnabledViaReflection();
+    }
+
+    static void disable() {
+        sIsVendorDisabled = true;
+    }
+
+    private static boolean isViewabilityEnabledViaReflection() {
+        if (sIsViewabilityEnabledViaReflection == null) {
+            sIsViewabilityEnabledViaReflection = Reflection.classFound(MOAT_FACTORY_PATH);
+            MoPubLog.d("Moat is "
+                    + (sIsViewabilityEnabledViaReflection ? "" : "un")
+                    + "available via reflection.");
+        }
+
+        return sIsViewabilityEnabledViaReflection;
+    }
+
+    @Override
+    @NonNull
+    public String getName() {
+        return "Moat";
+    }
+
+    @Override
+    @Nullable
+    public Boolean initialize(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (sWasInitialized) {
+            return true;
+        }
+
+        final Application application;
+        if (context instanceof Activity) {
+            application = ((Activity) context).getApplication();
+        } else {
+            try {
+                application = (Application) context.getApplicationContext();
+            } catch (ClassCastException e) {
+                MoPubLog.d("Unable to initialize Moat, error obtaining application context.");
+                return false;
+            }
+        }
+
+        // Pre-reflection code:
+        // final MoatOptions options = new MoatOptions();
+        // options.disableAdIdCollection = true;
+        // MoatAnalytics.getInstance().start(options, application);
+
+        try {
+            Object moatOptions = Reflection.instantiateClassWithEmptyConstructor(MOAT_OPTIONS_PATH,
+                    Object.class);
+
+            moatOptions.getClass().getField("disableAdIdCollection")
+                    .setBoolean(moatOptions, true);
+
+            Object moatAnalytics = new Reflection.MethodBuilder(null, "getInstance")
+                    .setStatic(MOAT_ANALYTICS_PATH)
+                    .execute();
+
+            new Reflection.MethodBuilder(moatAnalytics, "start")
+                    .addParam(MOAT_OPTIONS_PATH, moatOptions)
+                    .addParam(Application.class, application)
+                    .execute();
+
+            sWasInitialized = true;
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to initialize Moat: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean invalidate() {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        mMoatWebAdTracker = null;
+        mMoatVideoTracker = null;
+        mAdIds.clear();
+
+        return true;
+    }
+
+    @Override
+    @Nullable
+    public Boolean createDisplaySession(@NonNull final Context context,
+            @NonNull final WebView webView, boolean isDeferred) {
+        Preconditions.checkNotNull(context);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        // Pre-reflection code:
+        // mMoatWebAdTracker = MoatFactory.create().createWebAdTracker(webView);
+        // if (!isDeferred) {
+        //     mMoatWebAdTracker.startTracking();
+        // }
+
+        try {
+            Object moatFactory = new Reflection.MethodBuilder(null, "create")
+                    .setStatic(MOAT_FACTORY_PATH)
+                    .execute();
+
+            mMoatWebAdTracker = new Reflection.MethodBuilder(moatFactory, "createWebAdTracker")
+                    .addParam(WebView.class, webView)
+                    .execute();
+
+            // If we're not dealing with a deferred session, start tracking now
+            if (!isDeferred) {
+                new Reflection.MethodBuilder(mMoatWebAdTracker, "startTracking").execute();
+            }
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Moat start display session: "
+                    + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean startDeferredDisplaySession(@NonNull final Activity activity) {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mMoatWebAdTracker == null) {
+            MoPubLog.d("MoatWebAdTracker unexpectedly null.");
+            return false;
+        }
+
+        // Pre-reflection code:
+        // mMoatWebAdTracker.startTracking();
+
+        try {
+            new Reflection.MethodBuilder(mMoatWebAdTracker, "startTracking").execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to record deferred display session for Moat: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean endDisplaySession() {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mMoatWebAdTracker == null) {
+            MoPubLog.d("Moat WebAdTracker unexpectedly null.");
+            return false;
+        }
+
+        // Pre-reflection code:
+        // mMoatWebAdTracker.stopTracking();
+
+        try {
+            new Reflection.MethodBuilder(mMoatWebAdTracker, "stopTracking").execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Moat end session: " + e.getMessage());
+        }
+
+        return false;
+    }
+
+    @Override
+    @Nullable
+    public Boolean createVideoSession(@NonNull final Activity activity, @NonNull final View view,
+            @NonNull final Set<String> buyerResources,
+            @NonNull final Map<String, String> videoViewabilityTrackers) {
+        Preconditions.checkNotNull(activity);
+        Preconditions.checkNotNull(view);
+        Preconditions.checkNotNull(buyerResources);
+        Preconditions.checkNotNull(videoViewabilityTrackers);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        updateAdIdsFromUrlStringAndBuyerResources(videoViewabilityTrackers.get(MOAT_KEY),
+                buyerResources);
+
+        String partnerCode = mAdIds.get(PARTNER_CODE_KEY);
+        if (TextUtils.isEmpty(partnerCode)) {
+            MoPubLog.d("partnerCode was empty when starting Moat video session");
+            return false;
+        }
+
+        // Pre-reflection code:
+        // MoatPlugin moatPlugin = new ReactiveVideoTrackerPlugin(partnerCode);
+        // mMoatVideoTracker = MoatFactory.create().createCustomTracker(moatPlugin);
+
+        try {
+            final Object moatPlugin = Reflection.instantiateClassWithConstructor(
+                    MOAT_REACTIVE_VIDEO_TRACKER_PLUGIN_PATH, Object.class,
+                    new Class[]{String.class}, new Object[]{partnerCode});
+
+            final Object moatFactory = new Reflection.MethodBuilder(null, "create")
+                    .setStatic(MOAT_FACTORY_PATH)
+                    .execute();
+
+            mMoatVideoTracker = new Reflection.MethodBuilder(moatFactory, "createCustomTracker")
+                    .addParam(MOAT_PLUGIN_PATH, moatPlugin)
+                    .execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Moat start video session: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean registerVideoObstructions(@NonNull final List<View> views) {
+        Preconditions.checkNotNull(views);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        // unimplemented by Moat
+        return true;
+    }
+
+    @Override
+    @Nullable
+    public Boolean onVideoPrepared(@NonNull final View playerView, final int duration) {
+        Preconditions.checkNotNull(playerView);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mMoatVideoTracker == null) {
+            MoPubLog.d("Moat VideoAdTracker unexpectedly null.");
+            return false;
+        }
+
+        if (mWasVideoPrepared) {
+            return false;
+        }
+
+        // Pre-reflection code:
+        // mMoatVideoTracker.trackVideoAd(mAdIds, duration, playerView);
+
+        try {
+            new Reflection.MethodBuilder(mMoatVideoTracker, "trackVideoAd")
+                    .addParam(Map.class, mAdIds)
+                    .addParam(Integer.class, duration)
+                    .addParam(View.class, playerView)
+                    .execute();
+            mWasVideoPrepared = true;
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Moat onVideoPrepared: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean recordVideoEvent(@NonNull final VideoEvent event, final int playheadMillis) {
+        Preconditions.checkNotNull(event);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mMoatVideoTracker == null) {
+            MoPubLog.d("Moat VideoAdTracker unexpectedly null.");
+            return false;
+        }
+
+        try {
+            switch (event) {
+                case AD_STARTED:
+                case AD_STOPPED:
+                case AD_PAUSED:
+                case AD_PLAYING:
+                case AD_SKIPPED:
+                case AD_VIDEO_FIRST_QUARTILE:
+                case AD_VIDEO_MIDPOINT:
+                case AD_VIDEO_THIRD_QUARTILE:
+                case AD_COMPLETE:
+                    handleVideoEventReflection(event, playheadMillis);
+                    return true;
+
+                case AD_LOADED:
+                case AD_IMPRESSED:
+                case AD_CLICK_THRU:
+                case RECORD_AD_ERROR:
+                    // unimplemented
+                    return null;
+
+                default:
+                    MoPubLog.d("Unexpected video event: " + event.getMoatEnumName());
+                    return false;
+            }
+        } catch (Exception e) {
+            MoPubLog.d("Video event " + event.getMoatEnumName() + " failed. "
+                    + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean endVideoSession() {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mMoatVideoTracker == null) {
+            MoPubLog.d("Moat VideoAdTracker unexpectedly null.");
+            return false;
+        }
+
+        // Pre-reflection code:
+        // mMoatVideoTracker.stopTracking();
+
+        try {
+            new Reflection.MethodBuilder(mMoatVideoTracker, "stopTracking").execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Moat end video session: " + e.getMessage());
+            return false;
+        }
+    }
+
+    /**
+     * Generates the adIds map from the video viewability tracking URL and any additional buyer tag
+     * resources.
+     *
+     * @param urlString Used to gather partnerCode and relevant level/slicer information.
+     * Example: https://z.moatads.com/mopubappdisplay698212075271/moatad.js#moatClientLevel1=appname&moatClientLevel2=adunit&moatClientLevel3=creativetype&moatClientSlicer1=adformat
+     *
+     * @param buyerResources Moat buyer-tag impression pixels.
+     *
+     * Example output adIds map:
+     * {
+     *     "level1": “appname",
+     *     "level2": "adunit",
+     *     "level3": "creativetype",
+     *     "slicer1": "adformat",
+     *     "partnerCode": "mopubappdisplay698212075271",
+     *     "zMoatVASTIDs": "<ViewableImpression id="${BUYER_AD_SERVER_MACRO[S]}"><![CDATA[https://px.moatads.com/pixel.gif?moatPartnerCode=${MOAT_PARTNER_CODE}]]</ViewableImpression>"
+     * }
+     */
+    private void updateAdIdsFromUrlStringAndBuyerResources(@Nullable final String urlString,
+            @Nullable final Set<String> buyerResources) {
+        mAdIds.clear();
+        mAdIds.put(PARTNER_CODE_KEY, DEFAULT_PARTNER_CODE);
+        mAdIds.put(MOAT_VAST_IDS_KEY, TextUtils.join(";", buyerResources));
+
+        if (TextUtils.isEmpty(urlString)) {
+            return;
+        }
+
+        final Uri uri = Uri.parse(urlString);
+
+        final List<String> pathSegments = uri.getPathSegments();
+        // If a partnerCode is parsed from the viewability tracking URL, prefer to use that.
+        // Otherwise fallback to the MoPub default that was already added to the map.
+        if (pathSegments.size() > 0 && !TextUtils.isEmpty(pathSegments.get(0))) {
+            mAdIds.put(PARTNER_CODE_KEY, pathSegments.get(0));
+        }
+
+        final String fragment = uri.getFragment();
+        if (!TextUtils.isEmpty(fragment)) {
+            for (final String fragmentPairs : fragment.split("&")) {
+                final String[] fragmentPair = fragmentPairs.split("=");
+                if (fragmentPair.length < 2) {
+                    continue;
+                }
+
+                final String fragmentKey = fragmentPair[0];
+                final String fragmentValue = fragmentPair[1];
+                if (TextUtils.isEmpty(fragmentKey) || TextUtils.isEmpty(fragmentValue)) {
+                    continue;
+                }
+
+                if (QUERY_PARAM_MAPPING.containsKey(fragmentKey)) {
+                    mAdIds.put(QUERY_PARAM_MAPPING.get(fragmentKey), fragmentValue);
+                }
+            }
+        }
+    }
+
+    private boolean handleVideoEventReflection(@NonNull VideoEvent videoEvent,
+            final int playheadMillis) throws Exception {
+        if (videoEvent.getMoatEnumName() == null) {
+            return false;
+        }
+
+        // Pre-reflection code:
+        // MoatAdEvent event = new MoatAdEventType(<moatAdEventType>, playhead);
+        // mMoatVideoTracker.dispatchEvent(event);
+
+        final Class<?> clazz = Class.forName(MOAT_AD_EVENT_TYPE_PATH);
+        final Enum<?> adEventTypeEnum = Enum.valueOf(clazz.asSubclass(Enum.class),
+                videoEvent.getMoatEnumName());
+
+        final Object moatAdEvent = Reflection.instantiateClassWithConstructor(
+                MOAT_AD_EVENT_PATH, Object.class, new Class[]{clazz, Integer.class},
+                new Object[]{adEventTypeEnum, playheadMillis});
+
+        new Reflection.MethodBuilder(mMoatVideoTracker, "dispatchEvent")
+                .addParam(MOAT_AD_EVENT_PATH, moatAdEvent)
+                .execute();
+
+        return true;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java
index f6acc1d8..500910dc 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java
@@ -2,15 +2,26 @@
 
 import android.content.Context;
 import android.content.SharedPreferences;
+import android.support.annotation.NonNull;
 
 import static android.content.Context.MODE_PRIVATE;
 
 public final class SharedPreferencesHelper {
-    public static final String PREFERENCE_NAME = "mopubSettings";
+    public static final String DEFAULT_PREFERENCE_NAME = "mopubSettings";
 
     private SharedPreferencesHelper() {}
     
-    public static SharedPreferences getSharedPreferences(Context context) {
-    	return context.getSharedPreferences(PREFERENCE_NAME, MODE_PRIVATE);
+    public static SharedPreferences getSharedPreferences(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        return context.getSharedPreferences(DEFAULT_PREFERENCE_NAME, MODE_PRIVATE);
+    }
+
+    public static SharedPreferences getSharedPreferences(
+            @NonNull final Context context, @NonNull final String preferenceName) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(preferenceName);
+
+        return context.getSharedPreferences(preferenceName, MODE_PRIVATE);
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
index c2163480..f9ac664f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
@@ -9,6 +9,7 @@
 import com.mopub.common.util.AsyncTasks;
 
 import java.io.IOException;
+import java.io.InputStream;
 import java.net.HttpURLConnection;
 import java.net.URI;
 import java.net.URISyntaxException;
@@ -59,6 +60,11 @@ protected String doInBackground(@Nullable String... urls) {
                     return locationUrl;
                 }
 
+                // Do not resolve redirects if native browser will handle the URL.
+                if (UrlAction.OPEN_NATIVE_BROWSER.shouldTryHandlingUrl(Uri.parse(locationUrl))) {
+                    return locationUrl;
+                }
+
                 previousUrl = locationUrl;
                 locationUrl = getRedirectLocation(locationUrl);
                 redirectCount++;
@@ -86,6 +92,14 @@ private String getRedirectLocation(@NonNull final String urlString) throws IOExc
             return resolveRedirectLocation(urlString, httpUrlConnection);
         } finally {
             if (httpUrlConnection != null) {
+                final InputStream is = httpUrlConnection.getInputStream();
+                if (is != null) {
+                    try {
+                        is.close();
+                    } catch (IOException e) {
+                        MoPubLog.d("IOException when closing httpUrlConnection. Ignoring.");
+                    }
+                }
                 httpUrlConnection.disconnect();
             }
         }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
index 0eac6314..fb527fef 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
@@ -1,6 +1,5 @@
 package com.mopub.common.logging;
 
-import android.annotation.SuppressLint;
 import android.support.annotation.NonNull;
 import android.util.Log;
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java
index deb8928b..15177acd 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java
@@ -1,10 +1,7 @@
 package com.mopub.common.util;
 
 import android.graphics.Bitmap;
-import android.os.Build;
 import android.support.annotation.NonNull;
-import android.widget.ImageView;
-
 
 public class ImageUtils {
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/JavaScriptWebViewCallbacks.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/JavaScriptWebViewCallbacks.java
new file mode 100644
index 00000000..143dc2e7
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/JavaScriptWebViewCallbacks.java
@@ -0,0 +1,22 @@
+package com.mopub.common.util;
+
+public enum JavaScriptWebViewCallbacks {
+    // The ad server appends these functions to the MRAID javascript to help with third party
+    // impression tracking.
+    WEB_VIEW_DID_APPEAR("webviewDidAppear();"),
+    WEB_VIEW_DID_CLOSE("webviewDidClose();");
+
+    private String mJavascript;
+    
+    JavaScriptWebViewCallbacks(String javascript) {
+        mJavascript = javascript;
+    }
+
+    public String getJavascript() {
+        return mJavascript;
+    }
+
+    public String getUrl() {
+        return "javascript:" + mJavascript;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
index 4c01c6c8..cf94ec5b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
@@ -1,6 +1,7 @@
 package com.mopub.common.util;
 
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import com.mopub.common.Preconditions;
 
@@ -16,16 +17,18 @@
  */
 public class Reflection {
     public static class MethodBuilder {
-        private final Object mInstance;
-        private final String mMethodName;
-        private Class<?> mClass;
+        @Nullable private final Object mInstance;
+        @NonNull private final String mMethodName;
+        @Nullable private Class<?> mClass;
 
-        private List<Class<?>> mParameterClasses;
-        private List<Object> mParameters;
+        @NonNull private List<Class<?>> mParameterClasses;
+        @NonNull private List<Object> mParameters;
         private boolean mIsAccessible;
         private boolean mIsStatic;
 
-        public MethodBuilder(final Object instance, final String methodName) {
+        public MethodBuilder(@Nullable final Object instance, @NonNull final String methodName) {
+            Preconditions.checkNotNull(methodName);
+
             mInstance = instance;
             mMethodName = methodName;
 
@@ -35,37 +38,70 @@ public MethodBuilder(final Object instance, final String methodName) {
             mClass = (instance != null) ? instance.getClass() : null;
         }
 
-        public <T> MethodBuilder addParam(Class<T> clazz, T parameter) {
+        @NonNull
+        public <T> MethodBuilder addParam(@NonNull final Class<T> clazz,
+                @Nullable final T parameter) {
+            Preconditions.checkNotNull(clazz);
+
+            mParameterClasses.add(clazz);
+            mParameters.add(parameter);
+
+            return this;
+        }
+
+        @NonNull
+        public MethodBuilder addParam(@NonNull final String className,
+                @Nullable final Object parameter) throws ClassNotFoundException {
+            Preconditions.checkNotNull(className);
+
+            final Class<?> clazz = Class.forName(className);
+
             mParameterClasses.add(clazz);
             mParameters.add(parameter);
 
             return this;
         }
 
+        @NonNull
         public MethodBuilder setAccessible() {
             mIsAccessible = true;
 
             return this;
         }
 
-        public MethodBuilder setStatic(Class<?> clazz) {
+        @NonNull
+        public MethodBuilder setStatic(@NonNull final Class<?> clazz) {
+            Preconditions.checkNotNull(clazz);
+
             mIsStatic = true;
             mClass = clazz;
 
             return this;
         }
 
+        @NonNull
+        public MethodBuilder setStatic(@NonNull final String className)
+                throws ClassNotFoundException {
+            Preconditions.checkNotNull(className);
+
+            mIsStatic = true;
+            mClass = Class.forName(className);
+
+            return this;
+        }
+
+        @Nullable
         public Object execute() throws Exception {
-            Class<?>[] classArray = new Class<?>[mParameterClasses.size()];
-            Class<?>[] parameterTypes = mParameterClasses.toArray(classArray);
+            final Class<?>[] classArray = new Class<?>[mParameterClasses.size()];
+            final Class<?>[] parameterTypes = mParameterClasses.toArray(classArray);
 
-            Method method = getDeclaredMethodWithTraversal(mClass, mMethodName, parameterTypes);
+            final Method method = getDeclaredMethodWithTraversal(mClass, mMethodName, parameterTypes);
 
             if (mIsAccessible) {
                 method.setAccessible(true);
             }
 
-            Object[] parameters = mParameters.toArray();
+            final Object[] parameters = mParameters.toArray();
 
             if (mIsStatic) {
                 return method.invoke(null, parameters);
@@ -75,8 +111,13 @@ public Object execute() throws Exception {
         }
     }
 
-    public static Method getDeclaredMethodWithTraversal(Class<?> clazz, String methodName, Class<?>... parameterTypes)
+    @Nullable
+    public static Method getDeclaredMethodWithTraversal(@Nullable final Class<?> clazz,
+            @NonNull final String methodName, @NonNull final Class<?>... parameterTypes)
             throws NoSuchMethodException {
+        Preconditions.checkNotNull(methodName);
+        Preconditions.checkNotNull(parameterTypes);
+
         Class<?> currentClass = clazz;
 
         while (currentClass != null) {
@@ -90,7 +131,9 @@ public static Method getDeclaredMethodWithTraversal(Class<?> clazz, String metho
         throw new NoSuchMethodException();
     }
 
-    public static boolean classFound(final String className) {
+    public static boolean classFound(@NonNull final String className) {
+        Preconditions.checkNotNull(className);
+
         try {
             Class.forName(className);
             return true;
@@ -99,11 +142,13 @@ public static boolean classFound(final String className) {
         }
     }
 
+    @NonNull
     public static <T> T instantiateClassWithEmptyConstructor(@NonNull final String className,
             @NonNull final Class<? extends T> superclass)
             throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException,
             InvocationTargetException, InstantiationException, NullPointerException {
         Preconditions.checkNotNull(className);
+        Preconditions.checkNotNull(superclass);
 
         final Class<? extends T> clazz = Class.forName(className).asSubclass(superclass);
         // noinspection unchecked
@@ -113,9 +158,10 @@ public static boolean classFound(final String className) {
         return constructor.newInstance();
     }
 
+    @NonNull
     public static <T> T instantiateClassWithConstructor(@NonNull final String className,
-            @NonNull final Class<? extends T> superClass, @NonNull Class[] classes,
-            @NonNull Object[] parameters)
+            @NonNull final Class<? extends T> superClass, @NonNull final Class[] classes,
+            @NonNull final Object[] parameters)
             throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException,
             InvocationTargetException, InstantiationException {
         Preconditions.checkNotNull(className);
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
index fddc88a8..ad909dbe 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
@@ -27,11 +27,18 @@
     ACCEPT_LANGUAGE("Accept-Language"),
     BROWSER_AGENT("X-Browser-Agent"),
 
+    // Banner impression tracking fields
+    BANNER_IMPRESSION_MIN_VISIBLE_DIPS("X-Banner-Impression-Min-Pixels"),
+    BANNER_IMPRESSION_MIN_VISIBLE_MS("X-Banner-Impression-Min-Ms"),
+
+    // Native fields
+    IMPRESSION_MIN_VISIBLE_PERCENT("X-Impression-Min-Visible-Percent"),
+    IMPRESSION_VISIBLE_MS("X-Impression-Visible-Ms"),
+    IMPRESSION_MIN_VISIBLE_PX("X-Native-Impression-Min-Px"),
+
     // Native Video fields
     PLAY_VISIBLE_PERCENT("X-Play-Visible-Percent"),
     PAUSE_VISIBLE_PERCENT("X-Pause-Visible-Percent"),
-    IMPRESSION_MIN_VISIBLE_PERCENT("X-Impression-Min-Visible-Percent"),
-    IMPRESSION_VISIBLE_MS("X-Impression-Visible-Ms"),
     MAX_BUFFER_MS("X-Max-Buffer-Ms"),
 
     // Rewarded Ad fields
@@ -45,6 +52,10 @@
     // Internal Video Trackers
     VIDEO_TRACKERS("X-Video-Trackers"),
 
+    // Viewability fields
+    VIDEO_VIEWABILITY_TRACKERS("X-Video-Viewability-Trackers"),
+    DISABLE_VIEWABILITY("X-Disable-Viewability"),
+
     @Deprecated CUSTOM_SELECTOR("X-Customselector");
 
     private final String key;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java
index 0572a7cf..fabe6469 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java
@@ -1,5 +1,7 @@
 package com.mopub.common.util;
 
+import com.mopub.common.logging.MoPubLog;
+
 import java.io.Closeable;
 import java.io.IOException;
 import java.io.InputStream;
@@ -60,8 +62,9 @@ public static void closeStream(Closeable stream) {
 
         try {
             stream.close();
-        } catch (IOException e) {
+        } catch (Exception e) {
             // Unable to close the stream
+            MoPubLog.d("Unable to close stream. Ignoring.");
         }
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
index b984bf71..57144826 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -251,10 +251,15 @@ private void internalLoadAd() {
         loadNonJavascript(adUrl);
     }
 
-    void loadNonJavascript(String url) {
-        if (url == null) return;
+    void loadNonJavascript(@Nullable final String url) {
+        if (url == null) {
+            return;
+        }
+
+        if (!url.startsWith("javascript:")) {
+            MoPubLog.d("Loading url: " + url);
+        }
 
-        MoPubLog.d("Loading url: " + url);
         if (mIsLoading) {
             if (!TextUtils.isEmpty(mAdUnitId)) {  // This shouldn't be able to happen?
                 MoPubLog.i("Already loading an ad for " + mAdUnitId + ", wait to finish.");
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AvidBuyerTagXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AvidBuyerTagXmlManager.java
new file mode 100644
index 00000000..01087aa5
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AvidBuyerTagXmlManager.java
@@ -0,0 +1,76 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+/**
+ * Data Object for AVID's VAST Custom Extension.
+ */
+class AvidBuyerTagXmlManager {
+    // Elements
+    private static final String AD_VERIFICATIONS = "AdVerifications";
+    private static final String VERIFICATION = "Verification";
+    private static final String JAVA_SCRIPT_RESOURCE = "JavaScriptResource";
+
+    private final Node mAvidNode;
+
+    AvidBuyerTagXmlManager(@NonNull final Node avidNode) {
+        Preconditions.checkNotNull(avidNode);
+
+        mAvidNode = avidNode;
+    }
+
+    /**
+     * Return the corresponding javascript resources for the AVID-related Extension node.
+     *
+     * Expected Extension node:
+     * <Extension>
+     *   <AVID>
+     *     <AdVerifications>
+     *       <Verification>
+     *         <JavaScriptResource>
+     *           <![CDATA[
+     *             https://temp.avid.com/pixel.gif?avidExtension
+     *           ]]>
+     *         </JavaScriptResource>
+     *       </Verification>
+     *     </AdVerifications>
+     *   </AVID>
+     * </Extension>
+     *
+     * @return Collection of JavaScriptResources in string form, i.e.
+     * [https://temp.avid.com/pixel.gif?avidExtension]
+     */
+    @NonNull
+    Set<String> getJavaScriptResources() {
+        final Set<String> avidJavaScriptResources = new HashSet<String>();
+
+        final Node adVerification = XmlUtils.getFirstMatchingChildNode(mAvidNode, AD_VERIFICATIONS);
+        if (adVerification == null) {
+            return avidJavaScriptResources;
+        }
+
+        final List<Node> verifications = XmlUtils.getMatchingChildNodes(adVerification, VERIFICATION);
+        if (verifications == null) {
+            return avidJavaScriptResources;
+        }
+
+        for (final Node verification : verifications) {
+            final Node javaScriptResource = XmlUtils.getFirstMatchingChildNode(verification,
+                    JAVA_SCRIPT_RESOURCE);
+            if (javaScriptResource != null) {
+                avidJavaScriptResources.add(XmlUtils.getNodeValue(javaScriptResource));
+            }
+        }
+
+        return avidJavaScriptResources;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
index b37c8dec..b65913eb 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
@@ -2,8 +2,10 @@
 
 import android.content.Context;
 import android.graphics.Color;
+import android.support.annotation.Nullable;
 import android.view.MotionEvent;
 import android.view.View;
+import android.webkit.WebSettings;
 
 import com.mopub.common.AdReport;
 import com.mopub.common.Constants;
@@ -34,13 +36,35 @@ public void init(boolean isScrollable) {
     }
 
     @Override
-    public void loadUrl(String url) {
-        if (url == null) return;
+    public void loadUrl(@Nullable final String url) {
+        if (url == null) {
+            return;
+        }
 
-        MoPubLog.d("Loading url: " + url);
         if (url.startsWith("javascript:")) {
             super.loadUrl(url);
+            return;
         }
+
+        MoPubLog.d("Loading url: " + url);
+    }
+
+    @Override
+    public void stopLoading() {
+        if (mIsDestroyed) {
+            MoPubLog.w(BaseHtmlWebView.class.getSimpleName() + "#stopLoading() called after destroy()");
+            return;
+        }
+
+        final WebSettings webSettings = getSettings();
+        if (webSettings == null) {
+            MoPubLog.w(BaseHtmlWebView.class.getSimpleName() + "#getSettings() returned null");
+            return;
+        }
+
+        webSettings.setJavaScriptEnabled(false);
+        super.stopLoading();
+        webSettings.setJavaScriptEnabled(true);
     }
 
     private void disableScrollingAndZoom() {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
index 6bc577f0..9e31439a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
@@ -13,12 +13,13 @@
 import android.widget.VideoView;
 
 import com.mopub.common.IntentActions;
+import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
 
 public abstract class BaseVideoViewController {
     private final Context mContext;
     private final RelativeLayout mLayout;
-    private final BaseVideoViewControllerListener mBaseVideoViewControllerListener;
+    @NonNull private final BaseVideoViewControllerListener mBaseVideoViewControllerListener;
     @Nullable private Long mBroadcastIdentifier;
 
     public interface BaseVideoViewControllerListener {
@@ -30,7 +31,11 @@ void onStartActivityForResult(final Class<? extends Activity> clazz,
                 final Bundle extras);
     }
 
-    protected BaseVideoViewController(final Context context, @Nullable final Long broadcastIdentifier, final BaseVideoViewControllerListener baseVideoViewControllerListener) {
+    protected BaseVideoViewController(final Context context,
+            @Nullable final Long broadcastIdentifier,
+            @NonNull final BaseVideoViewControllerListener baseVideoViewControllerListener) {
+        Preconditions.checkNotNull(baseVideoViewControllerListener);
+
         mContext = context;
         mBroadcastIdentifier = broadcastIdentifier;
         mBaseVideoViewControllerListener = baseVideoViewControllerListener;
@@ -61,6 +66,7 @@ void onActivityResult(final int requestCode, final int resultCode, final Intent
         // By default, the activity result is ignored
     }
 
+    @NonNull
     protected BaseVideoViewControllerListener getBaseVideoViewControllerListener() {
         return mBaseVideoViewControllerListener;
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java
index 9837e067..e42aad70 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java
@@ -51,7 +51,7 @@ public void destroy() {
         super.destroy();
     }
 
-    protected void enablePlugins(final boolean enabled) {
+    public void enablePlugins(final boolean enabled) {
         // Android 4.3 and above has no concept of plugin states
         if (VERSION.SDK_INT >= VERSION_CODES.JELLY_BEAN_MR2) {
             return;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
index 0ee54d20..743c4d69 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
@@ -7,8 +7,8 @@
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
 
-import com.mopub.common.UrlHandler;
 import com.mopub.common.UrlAction;
+import com.mopub.common.UrlHandler;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Intents;
 import com.mopub.exceptions.IntentNotResolvableException;
@@ -34,8 +34,8 @@
 
     private final Context mContext;
     private final String mDspCreativeId;
-    private HtmlWebViewListener mHtmlWebViewListener;
-    private BaseHtmlWebView mHtmlWebView;
+    private final HtmlWebViewListener mHtmlWebViewListener;
+    private final BaseHtmlWebView mHtmlWebView;
     private final String mClickthroughUrl;
     private final String mRedirectUrl;
 
@@ -83,6 +83,7 @@ public void onClose() {
 
                     @Override
                     public void onFailLoad() {
+                        mHtmlWebView.stopLoading();
                         mHtmlWebViewListener.onFailed(UNSPECIFIED);
                     }
                 })
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/Interstitial.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/Interstitial.java
new file mode 100644
index 00000000..e2a377da
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/Interstitial.java
@@ -0,0 +1,8 @@
+package com.mopub.mobileads;
+
+/**
+ * Marker interface for denoting an Interstitial without necessarily using the
+ * mopub-sdk-interstitial module.
+ */
+public interface Interstitial {
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java
new file mode 100644
index 00000000..18a3a137
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java
@@ -0,0 +1,88 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+import java.util.HashSet;
+import java.util.List;
+import java.util.Locale;
+import java.util.Set;
+
+/**
+ * Data Object for Moat's VAST Custom Extension.
+ */
+class MoatBuyerTagXmlManager {
+    // Elements
+    private static final String VIEWABLE_IMPRESSION = "ViewableImpression";
+
+    // Attributes
+    private static final String ID = "id";
+
+    private final List<Node> mMoatVerificationNodes;
+
+    MoatBuyerTagXmlManager(@NonNull final List<Node> moatVerificationNodes) {
+        Preconditions.checkNotNull(moatVerificationNodes);
+
+        mMoatVerificationNodes = moatVerificationNodes;
+    }
+
+    /**
+     * Return the corresponding impression pixels for Moat-related Verification nodes.
+     *
+     * Expected Extension node:
+     * <Extension>
+     *   <AdVerifications>
+     *     <Verification vendor="Moat">
+     *       <ViewableImpression id="${BUYER_AD_SERVER_MACRO[S]}">
+     *         <![CDATA[
+     *           https://px.moatads.com/pixel.gif?moatPartnerCode=${MOAT_PARTNER_CODE}
+     *         ]]
+     *       </ViewableImpression>
+     *     </Verification>
+     *   </AdVerifications>
+     * </Extension>
+     *
+     * @return Collection of impression pixel tags in string form, i.e.
+     * <ViewableImpression id="${BUYER_AD_SERVER_MACRO[S]}">
+     *   <![CDATA[https://px.moatads.com/pixel.gif?moatPartnerCode=${MOAT_PARTNER_CODE}]]
+     * </ViewableImpression>
+     */
+    @NonNull
+    Set<String> getImpressionPixelsXml() {
+        final Set<String> impressionPixelsXml = new HashSet<String>();
+
+        for (final Node verification : mMoatVerificationNodes) {
+            if (verification == null) {
+                continue;
+            }
+
+            final Node viewableImpression = XmlUtils.getFirstMatchingChildNode(verification,
+                    VIEWABLE_IMPRESSION);
+
+            final String viewableImpressionXml = getViewableImpressionXml(viewableImpression);
+            if (viewableImpressionXml != null) {
+                impressionPixelsXml.add(viewableImpressionXml);
+            }
+        }
+
+        return impressionPixelsXml;
+    }
+
+    @Nullable
+    private String getViewableImpressionXml(@Nullable final Node viewableImpression) {
+        if (viewableImpression == null || !viewableImpression.hasAttributes()) {
+            return null;
+        }
+
+        final String idAttribute = XmlUtils.getAttributeValue(viewableImpression, ID);
+        final String content = XmlUtils.getNodeValue(viewableImpression);
+        return String.format(Locale.US,
+                "<ViewableImpression id=\"%s\"><![CDATA[%s]]</ViewableImpression>",
+                idAttribute, content);
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
index 63fd8513..e0006a9b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
@@ -11,16 +11,23 @@
  * A Vast tracking URL with an "absolute" trigger threshold. The tracker should be triggered
  * after a fixed number of milliseconds have been played.
  */
-public class VastAbsoluteProgressTracker extends VastTracker implements Comparable<VastAbsoluteProgressTracker>, Serializable {
+public class VastAbsoluteProgressTracker extends VastTracker
+        implements Comparable<VastAbsoluteProgressTracker>, Serializable {
     private static final long serialVersionUID = 0L;
     private final int mTrackingMilliseconds;
 
-    public VastAbsoluteProgressTracker(@NonNull final String trackingUrl, int trackingMilliseconds) {
-        super(trackingUrl);
+    public VastAbsoluteProgressTracker(@NonNull final MessageType messageType,
+            @NonNull final String content, int trackingMilliseconds) {
+        super(messageType, content);
         Preconditions.checkArgument(trackingMilliseconds >= 0);
         mTrackingMilliseconds = trackingMilliseconds;
     }
 
+    public VastAbsoluteProgressTracker(@NonNull final String trackingUrl,
+            int trackingMilliseconds) {
+        this(MessageType.TRACKING_URL, trackingUrl, trackingMilliseconds);
+    }
+
     public int getTrackingMilliseconds() {
         return mTrackingMilliseconds;
     }
@@ -35,6 +42,6 @@ public int compareTo(@NonNull final VastAbsoluteProgressTracker other) {
 
     @Override
     public String toString() {
-        return String.format(Locale.US, "%dms: %s", mTrackingMilliseconds, mTrackingUrl);
+        return String.format(Locale.US, "%dms: %s", mTrackingMilliseconds, getContent());
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java
index 0e0a1c8a..7b46bd30 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java
@@ -9,15 +9,25 @@
 
 import org.w3c.dom.Node;
 
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
+
 /**
  * This XML manager handles Extension nodes.
  */
 public class VastExtensionXmlManager {
     // Elements
     public static final String VIDEO_VIEWABILITY_TRACKER = "MoPubViewabilityTracker";
+    public static final String AD_VERIFICATIONS = "AdVerifications";
+    public static final String VERIFICATION = "Verification";
+    public static final String AVID = "AVID";
 
     // Attributes
+    public static final String VENDOR = "vendor";
     public static final String TYPE = "type";
+    public static final String ID = "id";
+    public static final String MOAT = "Moat";
 
     private final Node mExtensionNode;
 
@@ -57,6 +67,45 @@ VideoViewabilityTracker getVideoViewabilityTracker() {
                 videoViewabilityTrackerUrl);
     }
 
+    /**
+     * If there is an Extension node with an AVID element, return associated JavaScriptResources
+     * from buyer tags.
+     *
+     * @return Set of JavaScriptResources in string form, or null if AVID node is missing.
+     */
+    @Nullable
+    Set<String> getAvidJavaScriptResources() {
+        final Node avidNode = XmlUtils.getFirstMatchingChildNode(mExtensionNode, AVID);
+        if (avidNode == null) {
+            return null;
+        }
+
+        return new AvidBuyerTagXmlManager(avidNode).getJavaScriptResources();
+    }
+
+    /**
+     * If the Extension node contains Moat-related Verification nodes, return their corresponding
+     * impression pixels from buyer tags.
+     *
+     * @return Set of impression pixels in string form, or null if no Moat Verification nodes
+     * are present.
+     */
+    @Nullable
+    Set<String> getMoatImpressionPixels() {
+        final Node adVerification = XmlUtils.getFirstMatchingChildNode(mExtensionNode, AD_VERIFICATIONS);
+        if (adVerification == null) {
+            return null;
+        }
+
+        final List<Node> moatNodes = XmlUtils.getMatchingChildNodes(adVerification, VERIFICATION,
+                VENDOR, Collections.singletonList(MOAT));
+        if (moatNodes == null || moatNodes.isEmpty()) {
+            return null;
+        }
+
+        return new MoatBuyerTagXmlManager(moatNodes).getImpressionPixelsXml();
+    }
+
     /**
      * If the node has a "type" attribute, return its value.
      *
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java
index 824f9516..a179b4f4 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java
@@ -15,12 +15,17 @@
     private static final long serialVersionUID = 0L;
     private final float mFraction;
 
-    public VastFractionalProgressTracker(@NonNull final String trackingUrl, float trackingFraction) {
-        super(trackingUrl);
+    public VastFractionalProgressTracker(@NonNull final MessageType messageType,
+            @NonNull final String content, float trackingFraction) {
+        super(messageType, content);
         Preconditions.checkArgument(trackingFraction >= 0);
         mFraction = trackingFraction;
     }
 
+    public VastFractionalProgressTracker(@NonNull final String trackingUrl, float trackingFraction) {
+        this(MessageType.TRACKING_URL, trackingUrl, trackingFraction);
+    }
+
     public float trackingFraction() {
         return mFraction;
     }
@@ -35,6 +40,6 @@ public int compareTo(@NonNull final VastFractionalProgressTracker other) {
 
     @Override
     public String toString() {
-        return String.format(Locale.US, "%2f: %s", mFraction, mTrackingUrl);
+        return String.format(Locale.US, "%2f: %s", mFraction, getContent());
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java
index 46019add..4dbde1f8 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java
@@ -11,14 +11,26 @@
  * progress trackers are only called once, but error trackers are repeatable.
  */
 public class VastTracker implements Serializable {
-    private static final long serialVersionUID = 0L;
-    @NonNull protected final String mTrackingUrl;
+    private static final long serialVersionUID = 1L;
+
+    @NonNull private final MessageType mMessageType;
+    @NonNull private final String mContent;
     private boolean mCalled;
     private boolean mIsRepeatable;
 
-    public VastTracker(@NonNull String trackingUrl) {
-        Preconditions.checkNotNull(trackingUrl);
-        mTrackingUrl = trackingUrl;
+    enum MessageType { TRACKING_URL, QUARTILE_EVENT }
+
+    public VastTracker(@NonNull final MessageType messageType, @NonNull final String content) {
+        Preconditions.checkNotNull(messageType);
+        Preconditions.checkNotNull(content);
+
+        mMessageType = messageType;
+        mContent = content;
+    }
+
+    // Legacy implementation implied URL tracking
+    public VastTracker(@NonNull final String trackingUrl) {
+        this(MessageType.TRACKING_URL, trackingUrl);
     }
 
     public VastTracker(@NonNull String trackingUrl, boolean isRepeatable) {
@@ -27,8 +39,13 @@ public VastTracker(@NonNull String trackingUrl, boolean isRepeatable) {
     }
 
     @NonNull
-    public String getTrackingUrl() {
-        return mTrackingUrl;
+    public MessageType getMessageType() {
+        return mMessageType;
+    }
+
+    @NonNull
+    public String getContent() {
+        return mContent;
     }
 
     public void setTracked() {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
index dcbcbba9..dbf37d7f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
@@ -3,7 +3,6 @@
 import android.graphics.Bitmap;
 import android.media.MediaMetadataRetriever;
 import android.os.AsyncTask;
-import android.os.Build;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.widget.ImageView;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
index e3012c70..77a8d5f4 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
@@ -28,13 +28,15 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 
 import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
 
 public class VastVideoConfig implements Serializable {
-    private static final long serialVersionUID = 1L;
+    private static final long serialVersionUID = 2L;
 
     @NonNull private final ArrayList<VastTracker> mImpressionTrackers;
     @NonNull private final ArrayList<VastFractionalProgressTracker> mFractionalTrackers;
@@ -46,6 +48,7 @@
     @NonNull private final ArrayList<VastTracker> mSkipTrackers;
     @NonNull private final ArrayList<VastTracker> mClickTrackers;
     @NonNull private final ArrayList<VastTracker> mErrorTrackers;
+
     @Nullable private String mClickThroughUrl;
     @Nullable private String mNetworkMediaFileUrl;
     @Nullable private String mDiskMediaFileUrl;
@@ -62,6 +65,10 @@
     @Nullable private String mCustomCloseIconUrl;
     @NonNull private DeviceUtils.ForceOrientation mCustomForceOrientation = DeviceUtils.ForceOrientation.FORCE_LANDSCAPE; // Default is forcing landscape
     @Nullable private VideoViewabilityTracker mVideoViewabilityTracker;
+    // Viewability
+    @NonNull private final Map<String, String> mExternalViewabilityTrackers;
+    @NonNull private final Set<String> mAvidJavascriptResources;
+    @NonNull private final Set<String> mMoatImpressionPixels;
 
     // MoPub-specific metadata
     private String mDspCreativeId;
@@ -86,6 +93,10 @@ public VastVideoConfig() {
         mErrorTrackers = new ArrayList<VastTracker>();
         mSocialActionsCompanionAds = new HashMap<String, VastCompanionAdConfig>();
         mIsRewardedVideo = false;
+
+        mExternalViewabilityTrackers = new HashMap<String, String>();
+        mAvidJavascriptResources = new HashSet<String>();
+        mMoatImpressionPixels = new HashSet<String>();
     }
 
     /**
@@ -241,6 +252,25 @@ public void addVideoTrackers(@Nullable final JSONObject videoTrackers) {
         }
     }
 
+    public void addExternalViewabilityTrackers(
+            @Nullable final Map<String, String> externalViewabilityTrackers) {
+        if (externalViewabilityTrackers != null) {
+            mExternalViewabilityTrackers.putAll(externalViewabilityTrackers);
+        }
+    }
+
+    public void addAvidJavascriptResources(@Nullable final Set<String> javascriptResources) {
+        if (javascriptResources != null) {
+            mAvidJavascriptResources.addAll(javascriptResources);
+        }
+    }
+
+    public void addMoatImpressionPixels(@Nullable final Set<String> impressionPixels) {
+        if (impressionPixels != null) {
+            mMoatImpressionPixels.addAll(impressionPixels);
+        }
+    }
+
     public void setClickThroughUrl(@Nullable final String clickThroughUrl) {
         mClickThroughUrl = clickThroughUrl;
     }
@@ -425,6 +455,21 @@ public VideoViewabilityTracker getVideoViewabilityTracker() {
         return mVideoViewabilityTracker;
     }
 
+    @NonNull
+    public Map<String, String> getExternalViewabilityTrackers() {
+        return mExternalViewabilityTrackers;
+    }
+
+    @NonNull
+    public Set<String> getAvidJavascriptResources() {
+        return mAvidJavascriptResources;
+    }
+
+    @NonNull
+    public Set<String> getMoatImpressionPixels() {
+        return mMoatImpressionPixels;
+    }
+
     public boolean isCustomForceOrientationSet() {
         return mIsForceOrientationSet;
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java
index d4f9949d..a34b447b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java
@@ -3,7 +3,6 @@
 import android.content.Context;
 import android.media.MediaMetadataRetriever;
 import android.os.AsyncTask;
-import android.os.Build;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.widget.ImageView;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
index d83b08f5..128282f9 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
@@ -23,6 +23,8 @@
 import android.widget.RelativeLayout;
 import android.widget.VideoView;
 
+import com.mopub.common.ExternalViewabilitySession.VideoEvent;
+import com.mopub.common.ExternalViewabilitySessionManager;
 import com.mopub.common.IntentActions;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
@@ -31,6 +33,7 @@
 import com.mopub.mobileads.resource.DrawableConstants;
 
 import java.io.Serializable;
+import java.util.Arrays;
 import java.util.Map;
 
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
@@ -63,6 +66,7 @@
     private final VastVideoConfig mVastVideoConfig;
 
     @NonNull private final VastVideoView mVideoView;
+    @NonNull private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
     @NonNull private VastVideoGradientStripWidget mTopGradientStripWidget;
     @NonNull private VastVideoGradientStripWidget mBottomGradientStripWidget;
     @NonNull private ImageView mBlurredLastVideoFrameImageView;
@@ -139,6 +143,8 @@
             @Override
             public boolean onTouch(View view, MotionEvent motionEvent) {
                 if (motionEvent.getAction() == MotionEvent.ACTION_UP && shouldAllowClickThrough()) {
+                    mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_CLICK_THRU,
+                            getCurrentPosition());
                     mIsClosing = true;
                     broadcastAction(IntentActions.ACTION_INTERSTITIAL_CLICK);
                     mVastVideoConfig.handleClickForResult(activity,
@@ -162,6 +168,11 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
         mVideoView = createVideoView(activity, View.VISIBLE);
         mVideoView.requestFocus();
 
+        // Viewability measurements
+        mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(activity);
+        mExternalViewabilitySessionManager.createVideoSession(activity, mVideoView,
+                mVastVideoConfig);
+
         // Companion ad view, set to invisible initially to have it be drawn to calculate size
         mLandscapeCompanionAdView = createCompanionAdView(activity,
                 mVastVideoConfig.getVastCompanionAd(Configuration.ORIENTATION_LANDSCAPE),
@@ -210,6 +221,10 @@ public void onGlobalLayout() {
         // Always add last to layout since it must be visible above all other views
         addCloseButtonWidget(activity, View.GONE);
 
+        mExternalViewabilitySessionManager.registerVideoObstructions(Arrays.asList(
+                mTopGradientStripWidget, mProgressBarWidget, mBottomGradientStripWidget,
+                mRadialCountdownWidget, mCtaButtonWidget, mSocialActionsView, mCloseButtonWidget));
+
         Handler mainHandler = new Handler(Looper.getMainLooper());
         mProgressCheckerRunnable = new VastVideoViewProgressRunnable(this, mVastVideoConfig,
                 mainHandler);
@@ -271,8 +286,12 @@ protected void onResume() {
         startRunnables();
 
         if (mSeekerPositionOnPause > 0) {
+            mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_PLAYING, mSeekerPositionOnPause);
             mVideoView.seekTo(mSeekerPositionOnPause);
+        } else {
+            mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_LOADED, getCurrentPosition());
         }
+
         if (!mIsVideoFinishedPlaying) {
             mVideoView.start();
         }
@@ -287,6 +306,7 @@ protected void onPause() {
         mSeekerPositionOnPause = getCurrentPosition();
         mVideoView.pause();
         if (!mIsVideoFinishedPlaying && !mIsClosing) {
+            mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_PAUSED, getCurrentPosition());
             mVastVideoConfig.handlePause(getContext(), mSeekerPositionOnPause);
         }
     }
@@ -294,6 +314,8 @@ protected void onPause() {
     @Override
     protected void onDestroy() {
         stopRunnables();
+        mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_STOPPED, getCurrentPosition());
+        mExternalViewabilitySessionManager.endVideoSession();
         broadcastAction(IntentActions.ACTION_INTERSTITIAL_DISMISS);
 
         mVideoView.onDestroy();
@@ -325,7 +347,11 @@ protected void onConfigurationChanged(final Configuration newConfig) {
     }
 
     @Override
-    protected void onBackPressed() { }
+    protected void onBackPressed() {
+        if (!mIsVideoFinishedPlaying) {
+            mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_SKIPPED, getCurrentPosition());
+        }
+    }
 
     // Enable the device's back button when the video close button has been displayed
     @Override
@@ -377,6 +403,7 @@ public void onPrepared(MediaPlayer mp) {
                 // The VideoView duration defaults to -1 when the video is not prepared or playing;
                 // Therefore set it here so that we have access to it at all times
                 mDuration = mVideoView.getDuration();
+                mExternalViewabilitySessionManager.onVideoPrepared(getLayout(), mDuration);
                 adjustSkipOffset();
                 if (mVastCompanionAdConfig == null || mHasSocialActions) {
                     videoView.prepareBlurredLastVideoFrame(mBlurredLastVideoFrameImageView,
@@ -394,7 +421,6 @@ public void onPrepared(MediaPlayer mp) {
             public void onCompletion(MediaPlayer mp) {
                 stopRunnables();
                 makeVideoInteractable();
-
                 videoCompleted(false);
                 mIsVideoFinishedPlaying = true;
                 if (mVastVideoConfig.isRewardedVideo()) {
@@ -404,6 +430,7 @@ public void onCompletion(MediaPlayer mp) {
                 // Only fire the completion tracker if we hit all the progress marks. Some Android implementations
                 // fire the completion event even if the whole video isn't watched.
                 if (!mVideoError && mVastVideoConfig.getRemainingProgressTrackerCount() == 0) {
+                    mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_COMPLETE, getCurrentPosition());
                     mVastVideoConfig.handleComplete(getContext(), getCurrentPosition());
                 }
 
@@ -446,6 +473,8 @@ public void onCompletion(MediaPlayer mp) {
         videoView.setOnErrorListener(new MediaPlayer.OnErrorListener() {
             @Override
             public boolean onError(final MediaPlayer mediaPlayer, final int what, final int extra) {
+                mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.RECORD_AD_ERROR,
+                        getCurrentPosition());
                 stopRunnables();
                 makeVideoInteractable();
                 videoError(false);
@@ -539,6 +568,9 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
                 }
                 if (motionEvent.getAction() == MotionEvent.ACTION_UP) {
                     mIsClosing = true;
+                    if (!mIsVideoFinishedPlaying) {
+                        mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_SKIPPED, getCurrentPosition());
+                    }
                     mVastVideoConfig.handleClose(getContext(), currentPosition);
                     getBaseVideoViewControllerListener().onFinish();
                 }
@@ -788,6 +820,12 @@ void handleIconDisplay(int currentPosition) {
         }
     }
 
+    void handleViewabilityQuartileEvent(@NonNull final String enumValue) {
+        final VideoEvent videoEvent = Enum.valueOf(VideoEvent.class, enumValue);
+
+        mExternalViewabilitySessionManager.recordVideoEvent(videoEvent, getCurrentPosition());
+    }
+
     private boolean shouldAllowClickThrough() {
         return mShowCloseButtonEventFired;
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
index d7abf6c3..3e9e8970 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
@@ -3,7 +3,9 @@
 import android.os.Handler;
 import android.support.annotation.NonNull;
 
+import com.mopub.common.ExternalViewabilitySession.VideoEvent;
 import com.mopub.common.Preconditions;
+import com.mopub.mobileads.VastTracker.MessageType;
 import com.mopub.network.TrackingRequest;
 
 import java.util.ArrayList;
@@ -27,6 +29,21 @@ public VastVideoViewProgressRunnable(@NonNull VastVideoViewController videoViewC
         Preconditions.checkNotNull(vastVideoConfig);
         mVideoViewController = videoViewController;
         mVastVideoConfig = vastVideoConfig;
+
+        // Keep track of quartile measurement for ExternalViewabilitySessions
+        final List<VastFractionalProgressTracker> trackers =
+                new ArrayList<VastFractionalProgressTracker>();
+        trackers.add(new VastFractionalProgressTracker(MessageType.QUARTILE_EVENT,
+                VideoEvent.AD_STARTED.name(), 0f));
+        trackers.add(new VastFractionalProgressTracker(MessageType.QUARTILE_EVENT,
+                VideoEvent.AD_IMPRESSED.name(), 0f));
+        trackers.add(new VastFractionalProgressTracker(MessageType.QUARTILE_EVENT,
+                VideoEvent.AD_VIDEO_FIRST_QUARTILE.name(), 0.25f));
+        trackers.add(new VastFractionalProgressTracker(MessageType.QUARTILE_EVENT,
+                VideoEvent.AD_VIDEO_MIDPOINT.name(), 0.5f));
+        trackers.add(new VastFractionalProgressTracker(MessageType.QUARTILE_EVENT,
+                VideoEvent.AD_VIDEO_THIRD_QUARTILE.name(), 0.75f));
+        mVastVideoConfig.addFractionalTrackers(trackers);
     }
 
     @Override
@@ -42,7 +59,11 @@ public void doWork() {
             if (!trackersToTrack.isEmpty()) {
                 final List<String> trackUrls = new ArrayList<String>();
                 for (VastTracker tracker : trackersToTrack) {
-                    trackUrls.add(tracker.getTrackingUrl());
+                    if (tracker.getMessageType() == MessageType.TRACKING_URL) {
+                        trackUrls.add(tracker.getContent());
+                    } else if (tracker.getMessageType() == MessageType.QUARTILE_EVENT) {
+                        mVideoViewController.handleViewabilityQuartileEvent(tracker.getContent());
+                    }
                     tracker.setTracked();
                 }
                 TrackingRequest.makeTrackingHttpRequest(
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
index 0bf3c15a..a7028079 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
@@ -8,9 +8,6 @@
 
 import org.w3c.dom.Node;
 
-import java.util.ArrayList;
-import java.util.List;
-
 /**
  * This XML manager handles Wrapper nodes. Wrappers redirect to other VAST documents (which may
  * in turn redirect to more wrappers). Wrappers can also contain impression trackers,
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
index 5f024d94..e646cae9 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
@@ -31,6 +31,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 
 import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
 
@@ -234,6 +235,7 @@ VastVideoConfig evaluateVastXmlManager(@NonNull final String vastXml,
                     populateLinearTrackersAndIcon(linearXmlManager, vastVideoConfig);
                 }
                 populateVideoViewabilityTracker(vastWrapperXmlManager, vastVideoConfig);
+                populateViewabilityMetadata(vastWrapperXmlManager, vastVideoConfig);
 
                 final List<VastCompanionAdXmlManager> companionAdXmlManagers =
                         vastWrapperXmlManager.getCompanionAdXmlManagers();
@@ -328,6 +330,7 @@ private VastVideoConfig evaluateInLineXmlManager(
                 errorTrackers.addAll(vastInLineXmlManager.getErrorTrackers());
                 vastVideoConfig.addErrorTrackers(errorTrackers);
                 populateVideoViewabilityTracker(vastInLineXmlManager, vastVideoConfig);
+                populateViewabilityMetadata(vastInLineXmlManager, vastVideoConfig);
 
                 return vastVideoConfig;
             }
@@ -361,6 +364,26 @@ private void populateVideoViewabilityTracker(
         }
     }
 
+    private void populateViewabilityMetadata(
+            @NonNull final VastBaseInLineWrapperXmlManager vastInLineXmlManager,
+            @NonNull VastVideoConfig vastVideoConfig) {
+        final VastExtensionParentXmlManager vastExtensionParentXmlManager =
+                vastInLineXmlManager.getVastExtensionParentXmlManager();
+        if (vastExtensionParentXmlManager != null) {
+            final List<VastExtensionXmlManager> vastExtensionXmlManagers =
+                    vastExtensionParentXmlManager.getVastExtensionXmlManagers();
+            for (VastExtensionXmlManager vastExtensionXmlManager : vastExtensionXmlManagers) {
+                if (vastExtensionXmlManager != null) {
+                    final Set<String> avid = vastExtensionXmlManager.getAvidJavaScriptResources();
+                    vastVideoConfig.addAvidJavascriptResources(avid);
+
+                    final Set<String> moat = vastExtensionXmlManager.getMoatImpressionPixels();
+                    vastVideoConfig.addMoatImpressionPixels(moat);
+                }
+            }
+        }
+    }
+
     /**
      * Retrieves the Wrapper's redirect uri and follows it to return the next VAST xml String.
      *
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
index 975b69cb..e1d2cb3d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
@@ -6,6 +6,8 @@
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.Constants;
 
+import static com.mopub.common.ExternalViewabilitySessionManager.ViewabilityVendor;
+
 public class WebViewAdUrlGenerator extends AdUrlGenerator {
     private final boolean mIsStorePictureSupported;
 
@@ -27,6 +29,8 @@ public String generateUrlString(String serverHostname) {
 
         setExternalStoragePermission(mIsStorePictureSupported);
 
+        enableViewability(ViewabilityVendor.getEnabledVendorKey());
+
         return getFinalUrlString();
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewCacheService.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewCacheService.java
new file mode 100644
index 00000000..1cbb4a40
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewCacheService.java
@@ -0,0 +1,170 @@
+package com.mopub.mobileads;
+
+import android.annotation.SuppressLint;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.ExternalViewabilitySessionManager;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+
+import java.lang.ref.WeakReference;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+import static com.mopub.common.Constants.FIFTEEN_MINUTES_MILLIS;
+
+/**
+ * Holds WebViews in memory until they are used.
+ */
+public class WebViewCacheService {
+    public static class Config {
+        @NonNull
+        private final BaseWebView mWebView;
+        @NonNull
+        private final WeakReference<Interstitial> mWeakInterstitial;
+        @NonNull
+        private final ExternalViewabilitySessionManager mViewabilityManager;
+
+        Config(@NonNull final BaseWebView baseWebView,
+                @NonNull final Interstitial baseInterstitial,
+                @NonNull final ExternalViewabilitySessionManager viewabilityManager) {
+            mWebView = baseWebView;
+            mWeakInterstitial = new WeakReference<Interstitial>(baseInterstitial);
+            mViewabilityManager = viewabilityManager;
+        }
+
+        @NonNull
+        public BaseWebView getWebView() {
+            return mWebView;
+        }
+
+        @NonNull
+        public WeakReference<Interstitial> getWeakInterstitial() {
+            return mWeakInterstitial;
+        }
+
+        @NonNull
+        public ExternalViewabilitySessionManager getViewabilityManager() {
+            return mViewabilityManager;
+        }
+    }
+
+    /**
+     * Maximum number of {@link BaseWebView}s that are cached. This limit is intended to be very
+     * conservative; it is not recommended to cache more than a few BaseWebViews.
+     */
+    @VisibleForTesting
+    static final int MAX_SIZE = 50;
+
+    /**
+     * Trim the cache at least this frequently. Trimming only removes a {@link Config}s when its
+     * associated {@link Interstitial} is no longer in memory. The cache is also
+     * trimmed every time {@link #storeWebViewConfig(Long, Interstitial, BaseWebView, ExternalViewabilitySessionManager)} is called.
+     */
+    @VisibleForTesting
+    static final long TRIM_CACHE_FREQUENCY_MILLIS = FIFTEEN_MINUTES_MILLIS;
+
+    @SuppressLint("UseSparseArrays")
+    @NonNull
+    private static final Map<Long, Config> sWebViewConfigs =
+            Collections.synchronizedMap(new HashMap<Long, Config>());
+
+    @VisibleForTesting
+    @NonNull
+    static final TrimCacheRunnable sTrimCacheRunnable = new TrimCacheRunnable();
+    @NonNull
+    private static Handler sHandler = new Handler();
+
+    private WebViewCacheService() {
+    }
+
+    /**
+     * Stores the {@link BaseWebView} in the cache. This WebView will live until it is retrieved via
+     * {@link #popWebViewConfig(Long)} or when the base interstitial object is removed from memory.
+     *
+     * @param broadcastIdentifier The unique identifier associated with both the interstitial and the WebView
+     * @param baseInterstitial    The interstitial managing this WebView
+     * @param baseWebView         The BaseWebView to be stored
+     * @param viewabilityManager  The associated viewability manager, which needs to be created
+     *                            during Interstitial load and reutilized on show
+     */
+    @VisibleForTesting
+    public static void storeWebViewConfig(@NonNull final Long broadcastIdentifier,
+            @NonNull final Interstitial baseInterstitial,
+            @NonNull final BaseWebView baseWebView,
+            @NonNull final ExternalViewabilitySessionManager viewabilityManager) {
+        Preconditions.checkNotNull(broadcastIdentifier);
+        Preconditions.checkNotNull(baseInterstitial);
+        Preconditions.checkNotNull(baseWebView);
+
+        trimCache();
+        // Ignore request when max size is reached.
+        if (sWebViewConfigs.size() >= MAX_SIZE) {
+            MoPubLog.w(
+                    "Unable to cache web view. Please destroy some via MoPubInterstitial#destroy() and try again.");
+            return;
+        }
+
+        sWebViewConfigs.put(broadcastIdentifier,
+                new Config(baseWebView, baseInterstitial, viewabilityManager));
+    }
+
+    @Nullable
+    public static Config popWebViewConfig(@NonNull final Long broadcastIdentifier) {
+        Preconditions.checkNotNull(broadcastIdentifier);
+
+        return sWebViewConfigs.remove(broadcastIdentifier);
+    }
+
+    @VisibleForTesting
+    static synchronized void trimCache() {
+        final Iterator<Map.Entry<Long, Config>> iterator = sWebViewConfigs.entrySet().iterator();
+        while (iterator.hasNext()) {
+            final Map.Entry<Long, Config> entry = iterator.next();
+
+            // If the Interstitial was removed from memory, end viewability manager tracking and
+            // discard the entire associated Config.
+            if (entry.getValue().getWeakInterstitial().get() == null) {
+                entry.getValue().getViewabilityManager().endDisplaySession();
+                iterator.remove();
+            }
+        }
+
+        if (!sWebViewConfigs.isEmpty()) {
+            sHandler.removeCallbacks(sTrimCacheRunnable);
+            sHandler.postDelayed(sTrimCacheRunnable, TRIM_CACHE_FREQUENCY_MILLIS);
+        }
+    }
+
+    private static class TrimCacheRunnable implements Runnable {
+        @Override
+        public void run() {
+            trimCache();
+        }
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    public static void clearAll() {
+        sWebViewConfigs.clear();
+        sHandler.removeCallbacks(sTrimCacheRunnable);
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    @NonNull
+    static Map<Long, Config> getWebViewConfigs() {
+        return sWebViewConfigs;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    static void setHandler(@NonNull final Handler handler) {
+        sHandler = handler;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
index 0cdb4fa7..123f33e3 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
@@ -1,7 +1,6 @@
 package com.mopub.mobileads.resource;
 
 import android.graphics.Canvas;
-import android.graphics.Color;
 import android.graphics.Paint;
 
 public class CloseButtonDrawable extends BaseWidgetDrawable {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
index 227e1c77..834483a9 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
@@ -25,18 +25,20 @@
 import android.widget.FrameLayout.LayoutParams;
 
 import com.mopub.common.AdReport;
+import com.mopub.common.ExternalViewabilitySessionManager;
+import com.mopub.common.UrlHandler;
 import com.mopub.common.CloseableLayout;
 import com.mopub.common.CloseableLayout.ClosePosition;
 import com.mopub.common.CloseableLayout.OnCloseListener;
 import com.mopub.common.Preconditions;
 import com.mopub.common.UrlAction;
-import com.mopub.common.UrlHandler;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.DeviceUtils;
 import com.mopub.common.util.Dips;
 import com.mopub.common.util.Views;
 import com.mopub.mobileads.MraidVideoPlayerActivity;
+import com.mopub.mobileads.WebViewCacheService;
 import com.mopub.mobileads.util.WebViews;
 import com.mopub.mraid.MraidBridge.MraidBridgeListener;
 import com.mopub.mraid.MraidBridge.MraidWebView;
@@ -63,6 +65,10 @@
         public void useCustomCloseChanged(boolean useCustomClose);
     }
 
+    public interface MraidWebViewCacheListener {
+        void onReady(final MraidWebView webView, final ExternalViewabilitySessionManager viewabilityManager);
+    }
+
     /**
      * Holds a weak reference to the activity if the context that is passed in is an activity.
      * While this field is never null, the reference could become null. This reference starts out
@@ -326,16 +332,69 @@ public void setDebugListener(@Nullable MraidWebViewDebugListener debugListener)
         mDebugListener = debugListener;
     }
 
-    public void loadContent(@NonNull String htmlData) {
-        Preconditions.checkState(mMraidWebView == null, "loadContent should only be called once");
+    /**
+     * Gets an MraidWebView and fills it with data. In the case that the MraidWebView is retrieved
+     * from the cache, this also notifies that the ad has been loaded. If the broadcast identifier
+     * is null or there is a cache miss, a new MraidWebView is created and is filled with htmlData.
+     * @param broadcastIdentifier The unique identifier of an interstitial. This can be null,
+     *                            especially when there is no interstitial.
+     * @param htmlData            The HTML of the ad. This will only be loaded if a cached WebView
+     *                            is not found.
+     * @param listener            Optional listener that (if non-null) is notified when an
+     *                            MraidWebView is loaded from the cache or created.
+     */
+    public void fillContent(@Nullable final Long broadcastIdentifier,
+            @NonNull final String htmlData,
+            @Nullable final MraidWebViewCacheListener listener) {
+        Preconditions.checkNotNull(htmlData, "htmlData cannot be null");
+
+        final boolean cacheHit = hydrateMraidWebView(broadcastIdentifier, listener);
+        Preconditions.NoThrow.checkNotNull(mMraidWebView, "mMraidWebView cannot be null");
 
-        mMraidWebView = new MraidWebView(mContext);
         mMraidBridge.attachView(mMraidWebView);
         mDefaultAdContainer.addView(mMraidWebView,
                 new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
 
-        // onPageLoaded gets fired once the html is loaded into the webView
-        mMraidBridge.setContentHtml(htmlData);
+        // If the WebView was retrieved from the cache, notify that the ad is already loaded.
+        if (cacheHit) {
+            handlePageLoad();
+        } else {
+            // Otherwise, load the content into the MraidWebView
+            mMraidBridge.setContentHtml(htmlData);
+        }
+    }
+
+    /**
+     * Gets and sets the MraidWebView. Returns true if the MraidWebView was from the cache, and
+     * false if a new one was created. If the broadcast identifier is {@code null}, then this
+     * will always return false and create a new MraidWebView.
+     *
+     * @param broadcastIdentifier The unique identifier associated with the MraidWebView in the cache.
+     * @param listener            Listener passed in from {@link #fillContent(Long, String, MraidWebViewCacheListener)}
+     * @return {@code true} if there was a cache hit, {@code false} if a new MraidWebView was created.
+     */
+    private boolean hydrateMraidWebView(@Nullable final Long broadcastIdentifier,
+            @Nullable final MraidWebViewCacheListener listener) {
+        if (broadcastIdentifier != null) {
+            final WebViewCacheService.Config config =
+                    WebViewCacheService.popWebViewConfig(broadcastIdentifier);
+            if (config != null && config.getWebView() instanceof MraidWebView) {
+                mMraidWebView = (MraidWebView) config.getWebView();
+                mMraidWebView.enablePlugins(true);
+
+                if (listener != null) {
+                    listener.onReady(mMraidWebView, config.getViewabilityManager());
+                }
+                return true;
+            }
+        }
+        MoPubLog.d("WebView cache miss. Creating a new MraidWebView.");
+        mMraidWebView = new MraidWebView(mContext);
+
+        if (listener != null) {
+            listener.onReady(mMraidWebView, null);
+        }
+        return false;
     }
 
     // onPageLoaded gets fired once the html is loaded into the webView.
@@ -438,7 +497,7 @@ void cancelLastRequest() {
     }
 
     @Nullable
-    private View getCurrentWebView() {
+    public MraidWebView getCurrentWebView() {
         return mTwoPartBridge.isAttached() ? mTwoPartWebView : mMraidWebView;
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
index a5b423e2..bd4ba50e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
@@ -38,6 +38,7 @@
 import java.util.Map;
 import java.util.TreeMap;
 
+import static com.mopub.common.ExternalViewabilitySessionManager.ViewabilityVendor;
 import static com.mopub.network.HeaderUtils.extractBooleanHeader;
 import static com.mopub.network.HeaderUtils.extractHeader;
 import static com.mopub.network.HeaderUtils.extractIntegerHeader;
@@ -108,6 +109,7 @@ public Listener getListener() {
         // error listener.
 
         Map<String, String> headers = networkResponse.headers;
+
         if (extractBooleanHeader(headers, ResponseHeader.WARMUP, false)) {
             return Response.error(new MoPubNetworkError("Ad Unit is warming up.", MoPubNetworkError.Reason.WARMING_UP));
         }
@@ -236,16 +238,29 @@ public Listener getListener() {
             serverExtras.put(DataKeys.SCROLLABLE_KEY, Boolean.toString(isScrollable));
             serverExtras.put(DataKeys.CREATIVE_ORIENTATION_KEY, extractHeader(headers, ResponseHeader.ORIENTATION));
         }
+        if (AdType.STATIC_NATIVE.equals(adTypeString) || AdType.VIDEO_NATIVE.equals(adTypeString)) {
+            final String impressionMinVisiblePercent = extractPercentHeaderString(headers,
+                    ResponseHeader.IMPRESSION_MIN_VISIBLE_PERCENT);
+            final String impressionVisibleMS = extractHeader(headers,
+                    ResponseHeader.IMPRESSION_VISIBLE_MS);
+            final String impressionMinVisiblePx = extractHeader(headers,
+                    ResponseHeader.IMPRESSION_MIN_VISIBLE_PX);
+            if (!TextUtils.isEmpty(impressionMinVisiblePercent)) {
+                serverExtras.put(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT,
+                        impressionMinVisiblePercent);
+            }
+            if (!TextUtils.isEmpty(impressionVisibleMS)) {
+                serverExtras.put(DataKeys.IMPRESSION_VISIBLE_MS, impressionVisibleMS);
+            }
+            if (!TextUtils.isEmpty(impressionMinVisiblePx)) {
+                serverExtras.put(DataKeys.IMPRESSION_MIN_VISIBLE_PX, impressionMinVisiblePx);
+            }
+        }
         if (AdType.VIDEO_NATIVE.equals(adTypeString)) {
             serverExtras.put(DataKeys.PLAY_VISIBLE_PERCENT,
                     extractPercentHeaderString(headers, ResponseHeader.PLAY_VISIBLE_PERCENT));
             serverExtras.put(DataKeys.PAUSE_VISIBLE_PERCENT,
                     extractPercentHeaderString(headers, ResponseHeader.PAUSE_VISIBLE_PERCENT));
-            serverExtras.put(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT,
-                    extractPercentHeaderString(headers,
-                            ResponseHeader.IMPRESSION_MIN_VISIBLE_PERCENT));
-            serverExtras.put(DataKeys.IMPRESSION_VISIBLE_MS, extractHeader(headers,
-                    ResponseHeader.IMPRESSION_VISIBLE_MS));
             serverExtras.put(DataKeys.MAX_BUFFER_MS, extractHeader(headers,
                     ResponseHeader.MAX_BUFFER_MS));
 
@@ -272,6 +287,31 @@ public Listener getListener() {
         if (videoTrackers != null) {
             serverExtras.put(DataKeys.VIDEO_TRACKERS_KEY, videoTrackers);
         }
+        if (AdType.REWARDED_VIDEO.equals(adTypeString) ||
+                (AdType.INTERSTITIAL.equals(adTypeString) &&
+                        FullAdType.VAST.equals(fullAdTypeString))) {
+            serverExtras.put(DataKeys.EXTERNAL_VIDEO_VIEWABILITY_TRACKERS_KEY,
+                    extractHeader(headers, ResponseHeader.VIDEO_VIEWABILITY_TRACKERS));
+        }
+
+        // Banner imp tracking
+        if (AdFormat.BANNER.equals(mAdFormat)) {
+            serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS,
+                    extractHeader(headers, ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_MS));
+            serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS,
+                    extractHeader(headers, ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_DIPS));
+        }
+
+        // Disable viewability vendors, if any
+        final String disabledViewabilityVendors = extractHeader(headers,
+                ResponseHeader.DISABLE_VIEWABILITY);
+        if (!TextUtils.isEmpty(disabledViewabilityVendors)) {
+            final ViewabilityVendor disabledVendors =
+                    ViewabilityVendor.fromKey(disabledViewabilityVendors);
+            if (disabledVendors != null) {
+                disabledVendors.disable();
+            }
+        }
 
         builder.setServerExtras(serverExtras);
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
index 67309a7a..f55a88fa 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
@@ -129,17 +129,19 @@ public static String getUserAgent(@NonNull Context context) {
             synchronized (Networking.class) {
                 userAgent = sUserAgent;
                 if (userAgent == null) {
-                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
-                        userAgent = WebSettings.getDefaultUserAgent(context);
-                    } else if (Looper.myLooper() == Looper.getMainLooper()){
-                        // WebViews may only be instantiated on the UI thread. If anything goes
-                        // wrong with getting a user agent, use the system-specific user agent.
-                        try {
+                    try {
+                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+                            userAgent = WebSettings.getDefaultUserAgent(context);
+                        } else if (Looper.myLooper() == Looper.getMainLooper()) {
+                            // WebViews may only be instantiated on the UI thread. If anything goes
+                            // wrong with getting a user agent, use the system-specific user agent.
                             userAgent = new WebView(context).getSettings().getUserAgentString();
-                        } catch (Exception e) {
+                        } else {
                             userAgent = DEFAULT_USER_AGENT;
                         }
-                    } else {
+                    } catch (Exception e) {
+                        // Some custom ROMs may fail to get a user agent. If that happens, return
+                        // the Android system user agent.
                         userAgent = DEFAULT_USER_AGENT;
                     }
                     sUserAgent = userAgent;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
index 7d310976..aa13cdf2 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
@@ -82,7 +82,7 @@ public static void makeVastTrackingHttpRequest(
             if (vastTracker.isTracked() && !vastTracker.isRepeatable()) {
                 continue;
             }
-            trackers.add(vastTracker.getTrackingUrl());
+            trackers.add(vastTracker.getContent());
             vastTracker.setTracked();
         }
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
index f5208bb0..3e4f0c17 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
@@ -18,27 +18,6 @@
 
 abstract class BaseInterstitialActivity extends Activity {
     @Nullable protected AdReport mAdReport;
-
-    enum JavaScriptWebViewCallbacks {
-        // The ad server appends these functions to the MRAID javascript to help with third party
-        // impression tracking.
-        WEB_VIEW_DID_APPEAR("webviewDidAppear();"),
-        WEB_VIEW_DID_CLOSE("webviewDidClose();");
-
-        private String mJavascript;
-        private JavaScriptWebViewCallbacks(String javascript) {
-            mJavascript = javascript;
-        }
-
-        protected String getJavascript() {
-            return mJavascript;
-        }
-
-        protected String getUrl() {
-            return "javascript:" + mJavascript;
-        }
-    }
-
     @Nullable private CloseableLayout mCloseableLayout;
     @Nullable private Long mBroadcastIdentifier;
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
index 22e62819..55ec4bb1 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
@@ -13,7 +13,7 @@
  * At runtime, the MoPub SDK will find and instantiate a CustomEventInterstitial subclass as needed
  * and invoke its loadInterstitial() method.
  */
-public abstract class CustomEventInterstitial {
+public abstract class CustomEventInterstitial implements Interstitial {
     
     /*
      * When the MoPub SDK receives a response indicating it should load a custom event, it will send
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
index 47feb16c..73c57c5c 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
@@ -31,6 +31,7 @@
     private Context mContext;
     private Map<String, Object> mLocalExtras;
     private Map<String, String> mServerExtras;
+    private long mBroadcastIdentifier;
     private final Handler mHandler;
     private final Runnable mTimeout;
 
@@ -42,6 +43,7 @@ public CustomEventInterstitialAdapter(@NonNull final MoPubInterstitial moPubInte
         Preconditions.checkNotNull(serverExtras);
         mHandler = new Handler();
         mMoPubInterstitial = moPubInterstitial;
+        mBroadcastIdentifier = broadcastIdentifier;
         mContext = mMoPubInterstitial.getActivity();
         mTimeout = new Runnable() {
             @Override
@@ -118,6 +120,11 @@ void invalidate() {
         mServerExtras = null;
         mLocalExtras = null;
         mCustomEventInterstitialAdapterListener = null;
+        final WebViewCacheService.Config config =
+                WebViewCacheService.popWebViewConfig(mBroadcastIdentifier);
+        if (config != null) {
+            config.getWebView().destroy();
+        }
         mInvalidated = true;
     }
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
index f0643055..370b2fe0 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
@@ -31,7 +31,8 @@ protected void extractExtras(Map<String, String> serverExtras) {
 
     @Override
     protected void preRenderHtml(CustomEventInterstitialListener customEventInterstitialListener) {
-        MoPubActivity.preRenderHtml(mContext, mAdReport, customEventInterstitialListener, mHtmlData);
+        MoPubActivity.preRenderHtml(this, mContext, mAdReport, customEventInterstitialListener, mHtmlData,
+                mIsScrollable, mRedirectUrl, mClickthroughUrl, mBroadcastIdentifier);
     }
 
     @Override
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
index 649ea18f..d5f51e1f 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
@@ -4,6 +4,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
+import android.support.annotation.Nullable;
 import android.util.Log;
 import android.view.View;
 import android.webkit.WebView;
@@ -12,6 +13,8 @@
 import com.mopub.common.AdReport;
 import com.mopub.common.CreativeOrientation;
 import com.mopub.common.DataKeys;
+import com.mopub.common.ExternalViewabilitySessionManager;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.DeviceUtils;
 import com.mopub.mobileads.factories.HtmlInterstitialWebViewFactory;
 
@@ -24,19 +27,20 @@
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
 import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
+import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
 import static com.mopub.mobileads.HtmlWebViewClient.MOPUB_FAIL_LOAD;
 import static com.mopub.mobileads.HtmlWebViewClient.MOPUB_FINISH_LOAD;
 
 public class MoPubActivity extends BaseInterstitialActivity {
-    private HtmlInterstitialWebView mHtmlInterstitialWebView;
+    @Nullable private HtmlInterstitialWebView mHtmlInterstitialWebView;
+    @Nullable private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
 
     public static void start(Context context, String htmlData, AdReport adReport,
             boolean isScrollable, String redirectUrl, String clickthroughUrl,
@@ -65,16 +69,23 @@ static Intent createIntent(Context context,
         return intent;
     }
 
-    static void preRenderHtml(final Context context, final AdReport adReport,
+    static void preRenderHtml(final Interstitial baseInterstitial,
+            final Context context,
+            final AdReport adReport,
             final CustomEventInterstitialListener customEventInterstitialListener,
-            final String htmlData) {
-        final HtmlInterstitialWebView dummyWebView = HtmlInterstitialWebViewFactory.create(context,
-                adReport, customEventInterstitialListener, false, null, null);
-
-        dummyWebView.enablePlugins(false);
-        dummyWebView.enableJavascriptCaching();
-
-        dummyWebView.setWebViewClient(new WebViewClient() {
+            final String htmlData,
+            final boolean isScrollable,
+            final String redirectUrl,
+            final String clickthroughUrl,
+            final long broadcastIdentifier) {
+        final HtmlInterstitialWebView htmlInterstitialWebView = HtmlInterstitialWebViewFactory.create(
+                context.getApplicationContext(), adReport, customEventInterstitialListener,
+                isScrollable, redirectUrl, clickthroughUrl);
+
+        htmlInterstitialWebView.enablePlugins(false);
+        htmlInterstitialWebView.enableJavascriptCaching();
+
+        htmlInterstitialWebView.setWebViewClient(new WebViewClient() {
             @Override
             public boolean shouldOverrideUrlLoading(WebView view, String url) {
                 if (MOPUB_FINISH_LOAD.equals(url)) {
@@ -86,7 +97,14 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
                 return true;
             }
         });
-        dummyWebView.loadHtmlResponse(htmlData);
+
+        final ExternalViewabilitySessionManager externalViewabilitySessionManager =
+                new ExternalViewabilitySessionManager(context);
+        externalViewabilitySessionManager.createDisplaySession(context, htmlInterstitialWebView, true);
+
+        htmlInterstitialWebView.loadHtmlResponse(htmlData);
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, baseInterstitial,
+                htmlInterstitialWebView, externalViewabilitySessionManager);
     }
 
     @Override
@@ -97,9 +115,33 @@ public View getAdView() {
         String clickthroughUrl = intent.getStringExtra(CLICKTHROUGH_URL_KEY);
         String htmlResponse = intent.getStringExtra(HTML_RESPONSE_BODY_KEY);
 
-        mHtmlInterstitialWebView = HtmlInterstitialWebViewFactory.create(getApplicationContext(), mAdReport, new BroadcastingInterstitialListener(), isScrollable, redirectUrl, clickthroughUrl);
-        mHtmlInterstitialWebView.loadHtmlResponse(htmlResponse);
+        final Long broadcastIdentifier = getBroadcastIdentifier();
+        if (broadcastIdentifier != null) {
+            // If a cache hit happens, the content is already loaded; therefore, this re-initializes
+            // the WebView with a new {@link BroadcastingInterstitialListener}, enables plugins,
+            // and fires the impression tracker.
+            final WebViewCacheService.Config config =
+                    WebViewCacheService.popWebViewConfig(broadcastIdentifier);
+            if (config != null && config.getWebView() instanceof HtmlInterstitialWebView) {
+                mHtmlInterstitialWebView = (HtmlInterstitialWebView) config.getWebView();
+                mHtmlInterstitialWebView.init(new BroadcastingInterstitialListener(), isScrollable,
+                        redirectUrl, clickthroughUrl, mAdReport != null ? mAdReport.getDspCreativeId(): null);
+                mHtmlInterstitialWebView.enablePlugins(true);
+                mHtmlInterstitialWebView.loadUrl(WEB_VIEW_DID_APPEAR.getUrl());
+
+                mExternalViewabilitySessionManager = config.getViewabilityManager();
+
+                return mHtmlInterstitialWebView;
+            }
+        }
 
+        MoPubLog.d("WebView cache miss. Recreating the WebView.");
+        mHtmlInterstitialWebView = HtmlInterstitialWebViewFactory.create(getApplicationContext(),
+                mAdReport, new BroadcastingInterstitialListener(), isScrollable, redirectUrl, clickthroughUrl);
+        
+        mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(this);
+        mExternalViewabilitySessionManager.createDisplaySession(this, mHtmlInterstitialWebView, true);
+        mHtmlInterstitialWebView.loadHtmlResponse(htmlResponse);
         return mHtmlInterstitialWebView;
     }
 
@@ -116,13 +158,23 @@ protected void onCreate(Bundle savedInstanceState) {
             requestedOrientation = (CreativeOrientation) orientationExtra;
         }
         DeviceUtils.lockOrientation(this, requestedOrientation);
+
+        if (mExternalViewabilitySessionManager != null) {
+            mExternalViewabilitySessionManager.startDeferredDisplaySession(this);
+        }
         broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_SHOW);
     }
 
     @Override
     protected void onDestroy() {
-        mHtmlInterstitialWebView.loadUrl(WEB_VIEW_DID_CLOSE.getUrl());
-        mHtmlInterstitialWebView.destroy();
+        if (mExternalViewabilitySessionManager != null) {
+            mExternalViewabilitySessionManager.endDisplaySession();
+            mExternalViewabilitySessionManager = null;
+        }
+        if (mHtmlInterstitialWebView != null) {
+            mHtmlInterstitialWebView.loadUrl(WEB_VIEW_DID_CLOSE.getUrl());
+            mHtmlInterstitialWebView.destroy();
+        }
         broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_DISMISS);
         super.onDestroy();
     }
@@ -130,7 +182,9 @@ protected void onDestroy() {
     class BroadcastingInterstitialListener implements CustomEventInterstitialListener {
         @Override
         public void onInterstitialLoaded() {
-            mHtmlInterstitialWebView.loadUrl(WEB_VIEW_DID_APPEAR.getUrl());
+            if (mHtmlInterstitialWebView != null) {
+                mHtmlInterstitialWebView.loadUrl(WEB_VIEW_DID_APPEAR.getUrl());
+            }
         }
 
         @Override
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
index e2f86bd6..a2bee5e7 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
@@ -13,9 +13,12 @@
 
 import com.mopub.common.AdReport;
 import com.mopub.common.Constants;
+import com.mopub.common.ExternalViewabilitySessionManager;
+import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+import com.mopub.mraid.MraidBridge;
 import com.mopub.mraid.MraidController;
 import com.mopub.mraid.MraidController.MraidListener;
 import com.mopub.mraid.MraidController.UseCustomCloseListener;
@@ -31,41 +34,57 @@
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
+import static com.mopub.mobileads.HtmlWebViewClient.MOPUB_FAIL_LOAD;
 
 public class MraidActivity extends BaseInterstitialActivity {
     @Nullable private MraidController mMraidController;
     @Nullable private MraidWebViewDebugListener mDebugListener;
+    @Nullable private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
 
-    public static void preRenderHtml(@NonNull final Context context,
+    public static void preRenderHtml(@NonNull final Interstitial mraidInterstitial,
+            @NonNull final Context context,
             @NonNull final CustomEventInterstitialListener customEventInterstitialListener,
-            @Nullable final String htmlData) {
-        preRenderHtml(customEventInterstitialListener, htmlData, new BaseWebView(context));
+            @Nullable final String htmlData,
+            @NonNull final Long broadcastIdentifier) {
+        Preconditions.checkNotNull(mraidInterstitial);
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(customEventInterstitialListener);
+        Preconditions.checkNotNull(broadcastIdentifier);
+
+        preRenderHtml(mraidInterstitial, customEventInterstitialListener, htmlData,
+                new MraidBridge.MraidWebView(context), broadcastIdentifier);
     }
 
     @VisibleForTesting
-    static void preRenderHtml(
+    static void preRenderHtml(@NonNull final Interstitial mraidInterstitial,
             @NonNull final CustomEventInterstitialListener customEventInterstitialListener,
-            @Nullable final String htmlData, @NonNull final BaseWebView dummyWebView) {
-        dummyWebView.enablePlugins(false);
-        dummyWebView.enableJavascriptCaching();
+            @Nullable final String htmlData,
+            @NonNull final BaseWebView mraidWebView,
+            @NonNull final Long broadcastIdentifier) {
+        Preconditions.checkNotNull(mraidInterstitial);
+        Preconditions.checkNotNull(customEventInterstitialListener);
+        Preconditions.checkNotNull(mraidWebView);
+        Preconditions.checkNotNull(broadcastIdentifier);
+
+        mraidWebView.enablePlugins(false);
+        mraidWebView.enableJavascriptCaching();
 
-        dummyWebView.setWebViewClient(new MraidWebViewClient() {
+        mraidWebView.setWebViewClient(new MraidWebViewClient() {
             @Override
             public boolean shouldOverrideUrlLoading(WebView view, String url) {
+                if (MOPUB_FAIL_LOAD.equals(url)) {
+                    customEventInterstitialListener.onInterstitialFailed(
+                            MoPubErrorCode.MRAID_LOAD_ERROR);
+                }
                 return true;
             }
 
             @Override
             public void onPageFinished(final WebView view, final String url) {
                 customEventInterstitialListener.onInterstitialLoaded();
-
-                // can't reuse MraidBridge methods because MraidController is not initialized yet
-                dummyWebView.loadUrl("javascript:mraidbridge.setState('default');");
-                dummyWebView.loadUrl("javascript:mraidbridge.notifyReadyEvent();");
-
             }
 
             @Override
@@ -78,8 +97,14 @@ public void onReceivedError(final WebView view, final int errorCode,
             }
         });
 
-        dummyWebView.loadDataWithBaseURL(Networking.getBaseUrlScheme() + "://" + Constants.HOST + "/",
+        final Context context = mraidWebView.getContext();
+        final ExternalViewabilitySessionManager externalViewabilitySessionManager =
+                new ExternalViewabilitySessionManager(context);
+        externalViewabilitySessionManager.createDisplaySession(context, mraidWebView, true);
+
+        mraidWebView.loadDataWithBaseURL(Networking.getBaseUrlScheme() + "://" + Constants.HOST + "/",
                 htmlData, "text/html", "UTF-8", null);
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, mraidInterstitial, mraidWebView, externalViewabilitySessionManager);
     }
 
     public static void start(@NonNull Context context, @Nullable AdReport adreport, @Nullable String htmlData, long broadcastIdentifier) {
@@ -164,13 +189,30 @@ public void useCustomCloseChanged(boolean useCustomClose) {
             }
         });
 
-        mMraidController.loadContent(htmlData);
+        mMraidController.fillContent(getBroadcastIdentifier(), htmlData,
+                new MraidController.MraidWebViewCacheListener() {
+                    @Override
+                    public void onReady(@NonNull final MraidBridge.MraidWebView webView,
+                            @Nullable final ExternalViewabilitySessionManager viewabilityManager) {
+                        if (viewabilityManager != null) {
+                            mExternalViewabilitySessionManager = viewabilityManager;
+                        } else {
+                            mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(MraidActivity.this);
+                            mExternalViewabilitySessionManager.createDisplaySession(MraidActivity.this, webView, true);
+                        }
+                    }
+                });
+
         return mMraidController.getAdContainer();
     }
 
     @Override
     public void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
+
+        if (mExternalViewabilitySessionManager != null) {
+            mExternalViewabilitySessionManager.startDeferredDisplaySession(this);
+        }
         if (getBroadcastIdentifier()!= null) {
             broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_SHOW);
         }
@@ -198,6 +240,10 @@ protected void onResume() {
 
     @Override
     protected void onDestroy() {
+        if (mExternalViewabilitySessionManager != null) {
+            mExternalViewabilitySessionManager.endDisplaySession();
+            mExternalViewabilitySessionManager = null;
+        }
         if (mMraidController != null) {
             mMraidController.destroy();
         }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
index aa84f691..2bc42b13 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
@@ -3,6 +3,7 @@
 import android.content.Context;
 
 import com.mopub.common.AdReport;
+import com.mopub.common.ExternalViewabilitySessionManager;
 import com.mopub.common.logging.MoPubLog;
 
 import java.util.Map;
@@ -17,6 +18,7 @@
     protected Context mContext;
     protected AdReport mAdReport;
     protected long mBroadcastIdentifier;
+    protected ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
 
     abstract protected void extractExtras(Map<String, String> serverExtras);
     abstract protected void preRenderHtml(CustomEventInterstitialListener customEventInterstitialListener);
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
index d990c8e6..89fcd4ec 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
@@ -6,6 +6,7 @@
 import com.mopub.common.CacheService;
 import com.mopub.common.DataKeys;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Json;
 import com.mopub.mobileads.factories.VastManagerFactory;
 
 import org.json.JSONException;
@@ -19,16 +20,25 @@
     private VastManager mVastManager;
     private VastVideoConfig mVastVideoConfig;
     @Nullable private JSONObject mVideoTrackers;
+    @Nullable private Map<String, String> mExternalViewabilityTrackers;
 
     @Override
     protected void extractExtras(Map<String, String> serverExtras) {
         mVastResponse = serverExtras.get(DataKeys.HTML_RESPONSE_BODY_KEY);
 
+        final String externalViewabilityTrackers =
+                serverExtras.get(DataKeys.EXTERNAL_VIDEO_VIEWABILITY_TRACKERS_KEY);
+        try {
+            mExternalViewabilityTrackers = Json.jsonStringToMap(externalViewabilityTrackers);
+        } catch (JSONException e) {
+            MoPubLog.d("Failed to parse video viewability trackers to JSON: " +
+                    externalViewabilityTrackers);
+        }
+
         final String videoTrackers = serverExtras.get(DataKeys.VIDEO_TRACKERS_KEY);
         if (TextUtils.isEmpty(videoTrackers)) {
             return;
         }
-
         try {
             mVideoTrackers = new JSONObject(videoTrackers);
         } catch (JSONException e) {
@@ -79,6 +89,7 @@ public void onVastVideoConfigurationPrepared(final VastVideoConfig vastVideoConf
 
         mVastVideoConfig = vastVideoConfig;
         mVastVideoConfig.addVideoTrackers(mVideoTrackers);
+        mVastVideoConfig.addExternalViewabilityTrackers(mExternalViewabilityTrackers);
         mCustomEventInterstitialListener.onInterstitialLoaded();
     }
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
index b0f5b08d..34ecd599 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
@@ -22,7 +22,8 @@ protected void extractExtras(Map<String, String> serverExtras) {
     @Override
     protected void preRenderHtml(@NonNull CustomEventInterstitialListener
             customEventInterstitialListener) {
-        MraidActivity.preRenderHtml(mContext, customEventInterstitialListener, mHtmlData);
+        MraidActivity.preRenderHtml(this, mContext, customEventInterstitialListener, mHtmlData,
+                mBroadcastIdentifier);
     }
 
     @Override
diff --git a/mopub-sdk/mopub-sdk-native-static/build.gradle b/mopub-sdk/mopub-sdk-native-static/build.gradle
index 26111f70..ba206ef6 100644
--- a/mopub-sdk/mopub-sdk-native-static/build.gradle
+++ b/mopub-sdk/mopub-sdk-native-static/build.gradle
@@ -2,7 +2,7 @@ apply from: '../shared-build.gradle'
 
 dependencies {
     compile project(':mopub-sdk:mopub-sdk-base')
-    compile 'com.android.support:recyclerview-v7:23.1.1'
+    compile 'com.android.support:recyclerview-v7:26.1.0'
 }
 
 project.description = 'MoPub Android SDK - Native Static'
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java
index 6f84021f..6931c414 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java
@@ -8,6 +8,7 @@
  */
 public interface ImpressionInterface {
     int getImpressionMinPercentageViewed();
+    Integer getImpressionMinVisiblePx();
     int getImpressionMinTimeViewed();
     void recordImpression(View view);
     boolean isImpressionRecorded();
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java
index d7775eab..d4989636 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java
@@ -117,7 +117,8 @@ public void addView(final View view, @NonNull final ImpressionInterface impressi
         }
 
         mTrackedViews.put(view, impressionInterface);
-        mVisibilityTracker.addView(view, impressionInterface.getImpressionMinPercentageViewed());
+        mVisibilityTracker.addView(view, impressionInterface.getImpressionMinPercentageViewed(),
+                impressionInterface.getImpressionMinVisiblePx());
     }
 
     public void removeView(final View view) {
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
index 18ec136c..c1aaa849 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
@@ -342,7 +342,7 @@ public View getView(final int position, final View view, final ViewGroup viewGro
                     mStreamAdPlacer.getOriginalPosition(position), view, viewGroup);
         }
         mViewPositionMap.put(resultView, position);
-        mVisibilityTracker.addView(resultView, 0);
+        mVisibilityTracker.addView(resultView, 0, null);
 
         return resultView;
     }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
index 9d31f0d3..68209727 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
@@ -5,6 +5,7 @@
 import android.support.annotation.Nullable;
 import android.view.View;
 
+import com.mopub.common.DataKeys;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.nativeads.NativeImageHelper.ImageListener;
@@ -46,6 +47,36 @@ protected void loadNativeAd(@NonNull final Context context,
                         new NativeClickHandler(context),
                         customEventNativeListener);
 
+        if (serverExtras.containsKey(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)) {
+            try {
+                moPubStaticNativeAd.setImpressionMinPercentageViewed(Integer.parseInt(
+                        serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)));
+            } catch (final NumberFormatException e) {
+                MoPubLog.d("Unable to format min visible percent: " +
+                        serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT));
+            }
+        }
+
+        if (serverExtras.containsKey(DataKeys.IMPRESSION_VISIBLE_MS)) {
+            try {
+                moPubStaticNativeAd.setImpressionMinTimeViewed(
+                        Integer.parseInt(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)));
+            } catch (final NumberFormatException e) {
+                MoPubLog.d("Unable to format min time: " +
+                        serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS));
+            }
+        }
+
+        if (serverExtras.containsKey(DataKeys.IMPRESSION_MIN_VISIBLE_PX)) {
+            try {
+                moPubStaticNativeAd.setImpressionMinVisiblePx(Integer.parseInt(
+                        serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX)));
+            } catch (final NumberFormatException e) {
+                MoPubLog.d("Unable to format min visible px: " +
+                        serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX));
+            }
+        }
+
         try {
             moPubStaticNativeAd.loadAd();
         } catch (IllegalArgumentException e) {
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
index 21d2e3d2..7afb0337 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
@@ -316,7 +316,6 @@ public void refreshAds(@NonNull String adUnitId,
             loadAds(adUnitId, requestParameters);
         } else {
             MoPubLog.w("This LayoutManager can't be refreshed.");
-            return;
         }
     }
 
@@ -420,7 +419,7 @@ public void onBindViewHolder(final RecyclerView.ViewHolder holder, final int pos
         }
 
         mViewPositionMap.put(holder.itemView, position);
-        mVisibilityTracker.addView(holder.itemView, 0);
+        mVisibilityTracker.addView(holder.itemView, 0, null);
 
         //noinspection unchecked
         mOriginalAdapter.onBindViewHolder(holder, mStreamAdPlacer.getOriginalPosition(position));
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java
index afa9e583..2c13abdd 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java
@@ -32,8 +32,8 @@
  * When you have a {@link NativeAd} instance and wish to show a view you should:
  *
  * 1. Call {@link #createAdView(Context, ViewGroup)} to inflate a {@link View} that can show this ad.
- * 2. Call {@link #renderAdView(View)} with a compatible {@link View} to render the ad data into the view.
- * 3. Just before the ad is shown to the user, call {@link #prepare(View)}.
+ * 2. Just before the ad is shown to the user, call {@link #prepare(View)}.
+ * 3. Call {@link #renderAdView(View)} with a compatible {@link View} to render the ad data into the view.
  * 4. When the ad view is no longer shown to the user, call {@link #clear(View)}. You can later
  *    call {@link #prepare(View)} again if the ad will be shown to users.
  * 5. When the ad will never be shown again, call {@link #destroy()}.
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java
index 9fa5d9ff..ff220440 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java
@@ -3,7 +3,6 @@
 import android.content.Context;
 import android.graphics.Color;
 import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 import android.view.Gravity;
 import android.view.View;
 import android.view.ViewGroup;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java
index e306e1fe..a2b90337 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java
@@ -14,7 +14,8 @@
  * This the base class for implementations of the static native ad format.
  */
 public abstract class StaticNativeAd extends BaseNativeAd implements ImpressionInterface, ClickInterface {
-    private static final int IMPRESSION_MIN_PERCENTAGE_VIEWED = 50;
+    private static final int DEFAULT_IMPRESSION_MIN_TIME_VIEWED_MS = 1000;
+    private static final int DEFAULT_IMPRESSION_MIN_PERCENTAGE_VIEWED = 50;
 
     static final double MIN_STAR_RATING = 0;
     static final double MAX_STAR_RATING = 5;
@@ -33,12 +34,16 @@
     // Impression logistics
     private boolean mImpressionRecorded;
     private int mImpressionMinTimeViewed;
+    private int mImpressionMinPercentageViewed;
+    private Integer mImpressionMinVisiblePx;
 
     // Extras
     @NonNull private final Map<String, Object> mExtras;
 
     public StaticNativeAd() {
-        mImpressionMinTimeViewed = 1000;
+        mImpressionMinTimeViewed = DEFAULT_IMPRESSION_MIN_TIME_VIEWED_MS;
+        mImpressionMinPercentageViewed = DEFAULT_IMPRESSION_MIN_PERCENTAGE_VIEWED;
+        mImpressionMinVisiblePx = null;
 
         mExtras = new HashMap<String, Object>();
     }
@@ -200,9 +205,47 @@ final public void addExtra(@NonNull final String key, @Nullable final Object val
         mExtras.put(key, value);
     }
 
+    /**
+     * Sets the minimum time for the ad to be on screen before impression trackers are fired.
+     * This int must be greater than 0.
+     *
+     * @param impressionMinTimeViewed Time in milliseconds (ignored if negative or 0).
+     */
     final public void setImpressionMinTimeViewed(final int impressionMinTimeViewed) {
-        if (impressionMinTimeViewed >= 0) {
+        if (impressionMinTimeViewed > 0) {
             mImpressionMinTimeViewed = impressionMinTimeViewed;
+        } else {
+            MoPubLog.d("Ignoring non-positive impressionMinTimeViewed: " + impressionMinTimeViewed);
+        }
+    }
+
+    /**
+     * Sets the minimum percent of the ad to be on screen before impression trackers are fired.
+     * This must be a percentage between 0 and 100, inclusive.
+     *
+     * @param impressionMinPercentageViewed Percent of ad (must be between 0 and 100 inclusive).
+     */
+    final public void setImpressionMinPercentageViewed(final int impressionMinPercentageViewed) {
+        if (impressionMinPercentageViewed >= 0 && impressionMinPercentageViewed <= 100) {
+            mImpressionMinPercentageViewed = impressionMinPercentageViewed;
+        } else {
+            MoPubLog.d("Ignoring impressionMinTimeViewed that's not a percent [0, 100]: " +
+                    impressionMinPercentageViewed);
+        }
+    }
+
+    /**
+     * Sets the minimum number of pixels of the ad to be on screen before impression trackers are
+     * fired. This must be an Integer greater than 0.
+     *
+     * @param impressionMinVisiblePx Number of pixels of an ad (ignored if negative or 0).
+     */
+    final public void setImpressionMinVisiblePx(@Nullable final Integer impressionMinVisiblePx) {
+        if (impressionMinVisiblePx != null && impressionMinVisiblePx > 0) {
+            mImpressionMinVisiblePx = impressionMinVisiblePx;
+        } else {
+            MoPubLog.d("Ignoring null or non-positive impressionMinVisiblePx: " +
+                    impressionMinVisiblePx);
         }
     }
 
@@ -233,7 +276,7 @@ public void recordImpression(@NonNull final View view) { }
      */
     @Override
     final public int getImpressionMinPercentageViewed() {
-        return IMPRESSION_MIN_PERCENTAGE_VIEWED;
+        return mImpressionMinPercentageViewed;
     }
 
     /**
@@ -246,6 +289,17 @@ final public int getImpressionMinTimeViewed() {
         return mImpressionMinTimeViewed;
     }
 
+    /**
+     * Returns the minimum viewable number of pixels of the ad that must be onscreen for it to be
+     * considered visible. This value, if present and positive will override the min percentage.
+     * See {@link StaticNativeAd#getImpressionMinTimeViewed()} for additional impression
+     * tracking considerations.
+     */
+    @Override
+    final public Integer getImpressionMinVisiblePx() {
+        return mImpressionMinVisiblePx;
+    }
+
     @Override
     final public boolean isImpressionRecorded() {
         return mImpressionRecorded;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java
index a13163c7..4b9df9ee 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java
@@ -1,10 +1,8 @@
 package com.mopub.nativeads;
 
 import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 
 import com.mopub.common.Preconditions;
-import com.mopub.common.Preconditions.NoThrow;
 
 import java.util.Collections;
 import java.util.HashMap;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java
index 7453d2c4..424e97d0 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java
@@ -54,6 +54,12 @@
         int mMaxInvisiblePercent;
         long mAccessOrder;
         View mRootView;
+
+        /**
+         * If this number is set, then use this as the minimum amount of the view seen before it is
+         * considered visible. This is in real pixels.
+         */
+        @Nullable Integer mMinVisiblePx;
     }
 
     // Views that are being tracked, mapped to the min viewable percentage
@@ -135,15 +141,19 @@ void setVisibilityTrackerListener(
     /**
      * Tracks the given view for visibility.
      */
-    void addView(@NonNull final View view, final int minPercentageViewed) {
-        addView(view, view, minPercentageViewed);
+    void addView(@NonNull final View view, final int minPercentageViewed,
+            @Nullable final Integer minVisiblePx) {
+        addView(view, view, minPercentageViewed, minVisiblePx);
     }
 
-    void addView(@NonNull View rootView, @NonNull final View view, final int minPercentageViewed) {
-      addView(rootView, view, minPercentageViewed, minPercentageViewed);
+    void addView(@NonNull View rootView, @NonNull final View view, final int minPercentageViewed,
+            @Nullable final Integer minVisiblePx) {
+        addView(rootView, view, minPercentageViewed, minPercentageViewed, minVisiblePx);
     }
 
-    void addView(@NonNull View rootView, @NonNull final View view, final int minVisiblePercentageViewed, final int maxInvisiblePercentageViewed) {
+    void addView(@NonNull View rootView, @NonNull final View view,
+            final int minVisiblePercentageViewed, final int maxInvisiblePercentageViewed,
+            @Nullable final Integer minVisiblePx) {
         setViewTreeObserver(view.getContext(), view);
 
         // Find the view if already tracked
@@ -160,6 +170,7 @@ void addView(@NonNull View rootView, @NonNull final View view, final int minVisi
         trackingInfo.mMinViewablePercent = minVisiblePercentageViewed;
         trackingInfo.mMaxInvisiblePercent = maxInvisiblePercent;
         trackingInfo.mAccessOrder = mAccessCounter;
+        trackingInfo.mMinVisiblePx = minVisiblePx;
 
         // Trim the number of tracked views to a reasonable number
         mAccessCounter++;
@@ -240,11 +251,14 @@ public void run() {
                 final View view = entry.getKey();
                 final int minPercentageViewed = entry.getValue().mMinViewablePercent;
                 final int maxInvisiblePercent = entry.getValue().mMaxInvisiblePercent;
+                final Integer minVisiblePx = entry.getValue().mMinVisiblePx;
                 final View rootView = entry.getValue().mRootView;
 
-                if (mVisibilityChecker.isVisible(rootView, view, minPercentageViewed)) {
+                if (mVisibilityChecker.isVisible(rootView, view, minPercentageViewed,
+                        minVisiblePx)) {
                     mVisibleViews.add(view);
-                } else if (!mVisibilityChecker.isVisible(rootView, view, maxInvisiblePercent)){
+                } else if (!mVisibilityChecker.isVisible(rootView, view, maxInvisiblePercent,
+                        null)) {
                     mInvisibleViews.add(view);
                 }
             }
@@ -271,9 +285,11 @@ boolean hasRequiredTimeElapsed(final long startTimeMillis, final int minTimeView
         }
 
         /**
-         * Whether the view is at least certain % visible
+         * Whether the view is at least certain amount visible. If the min pixel amount is set,
+         * use that. Otherwise, use the min percentage visible.
          */
-        boolean isVisible(@Nullable final View rootView, @Nullable final View view, final int minPercentageViewed) {
+        boolean isVisible(@Nullable final View rootView, @Nullable final View view,
+                final int minPercentageViewed, @Nullable final Integer minVisiblePx) {
             // ListView & GridView both call detachFromParent() for views that can be recycled for
             // new data. This is one of the rare instances where a view will have a null parent for
             // an extended period of time and will not be the main window.
@@ -297,6 +313,10 @@ boolean isVisible(@Nullable final View rootView, @Nullable final View view, fina
                 return false;
             }
 
+            if (minVisiblePx != null && minVisiblePx > 0) {
+                return visibleViewArea >= minVisiblePx;
+            }
+
             return 100 * visibleViewArea >= minPercentageViewed * totalViewArea;
         }
     }
diff --git a/mopub-sdk/mopub-sdk-native-video/build.gradle b/mopub-sdk/mopub-sdk-native-video/build.gradle
index 224045ef..6e83c328 100644
--- a/mopub-sdk/mopub-sdk-native-video/build.gradle
+++ b/mopub-sdk/mopub-sdk-native-video/build.gradle
@@ -2,7 +2,7 @@ apply from: '../shared-build.gradle'
 
 dependencies {
     compile project(':mopub-sdk:mopub-sdk-native-static')
-    compile 'com.google.android.exoplayer:exoplayer:r1.5.6'
+    compile 'com.google.android.exoplayer:exoplayer:r2.4.4'
 }
 
 project.description = 'MoPub Android SDK - Native Video'
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
index 069bf59a..1bbdd628 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
@@ -1,14 +1,15 @@
 package com.mopub.nativeads;
 
 import android.content.Context;
+import android.net.Uri;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
-import com.google.android.exoplayer.upstream.DataSource;
-import com.google.android.exoplayer.upstream.DataSpec;
-import com.google.android.exoplayer.upstream.DefaultHttpDataSource;
-import com.google.android.exoplayer.upstream.HttpDataSource;
+import com.google.android.exoplayer2.upstream.DataSource;
+import com.google.android.exoplayer2.upstream.DataSpec;
+import com.google.android.exoplayer2.upstream.DefaultHttpDataSource;
+import com.google.android.exoplayer2.upstream.HttpDataSource;
 import com.mopub.common.CacheService;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
@@ -135,11 +136,7 @@
 
     public HttpDiskCompositeDataSource(@NonNull final Context context,
             @NonNull final String userAgent, @Nullable final EventDetails eventDetails) {
-        this(context, userAgent, eventDetails,
-                new DefaultHttpDataSource(userAgent, null, null,
-                        DefaultHttpDataSource.DEFAULT_CONNECT_TIMEOUT_MILLIS,
-                        DefaultHttpDataSource.DEFAULT_READ_TIMEOUT_MILLIS,
-                        false));
+        this(context, userAgent, eventDetails, new DefaultHttpDataSource(userAgent, null));
     }
 
     @VisibleForTesting
@@ -279,6 +276,11 @@ private static Integer getExpectedFileLengthFromDisk(@NonNull final String key)
         return null;
     }
 
+    @Override
+    public Uri getUri() {
+        return mDataSpec != null ? mDataSpec.uri : null;
+    }
+
     @Override
     public void close() throws IOException {
         if (!TextUtils.isEmpty(mKey) && mCachedBytes != null) {
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
index 72f92a18..ac405b11 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
@@ -42,6 +42,7 @@
 
 import static com.mopub.common.DataKeys.EVENT_DETAILS;
 import static com.mopub.common.DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT;
+import static com.mopub.common.DataKeys.IMPRESSION_MIN_VISIBLE_PX;
 import static com.mopub.common.DataKeys.IMPRESSION_VISIBLE_MS;
 import static com.mopub.common.DataKeys.JSON_BODY_KEY;
 import static com.mopub.common.DataKeys.MAX_BUFFER_MS;
@@ -305,18 +306,22 @@ public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideo
             visibilityTrackingEvent.totalRequiredPlayTimeMs =
                     mVideoResponseHeaders.getImpressionVisibleMs();
             visibilityTrackingEvents.add(visibilityTrackingEvent);
+            visibilityTrackingEvent.minimumVisiblePx =
+                    mVideoResponseHeaders.getImpressionVisiblePx();
 
             // VAST impression trackers
             for (final VastTracker vastTracker : vastVideoConfig.getImpressionTrackers()) {
                 final VisibilityTrackingEvent vastImpressionTrackingEvent =
                         new VisibilityTrackingEvent();
                 vastImpressionTrackingEvent.strategy = new PayloadVisibilityStrategy(mContext,
-                        vastTracker.getTrackingUrl());
+                        vastTracker.getContent());
                 vastImpressionTrackingEvent.minimumPercentageVisible =
                         mVideoResponseHeaders.getImpressionMinVisiblePercent();
                 vastImpressionTrackingEvent.totalRequiredPlayTimeMs =
                         mVideoResponseHeaders.getImpressionVisibleMs();
                 visibilityTrackingEvents.add(vastImpressionTrackingEvent);
+                vastImpressionTrackingEvent.minimumVisiblePx =
+                        mVideoResponseHeaders.getImpressionVisiblePx();
             }
 
             // Visibility tracking event from http response Vast payload
@@ -328,7 +333,7 @@ public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideo
                         new VisibilityTrackingEvent();
                 vastVisibilityTrackingEvent.strategy =
                         new PayloadVisibilityStrategy(mContext,
-                                vastVideoViewabilityTracker.getTrackingUrl());
+                                vastVideoViewabilityTracker.getContent());
                 vastVisibilityTrackingEvent.minimumPercentageVisible =
                         vastVideoViewabilityTracker.getPercentViewable();
                 vastVisibilityTrackingEvent.totalRequiredPlayTimeMs =
@@ -435,7 +440,8 @@ public void render(@NonNull MediaLayout mediaLayout) {
             mVideoVisibleTracking.addView(mRootView,
                     mediaLayout,
                     mVideoResponseHeaders.getPlayVisiblePercent(),
-                    mVideoResponseHeaders.getPauseVisiblePercent());
+                    mVideoResponseHeaders.getPauseVisiblePercent(),
+                    mVideoResponseHeaders.getImpressionVisiblePx());
 
             mMediaLayout = mediaLayout;
             mMediaLayout.initForVideo();
@@ -622,8 +628,7 @@ private void maybeChangeState() {
             } else if (mEnded) {
                 newState = VideoState.ENDED;
             } else {
-                if (mLatestVideoControllerState == NativeVideoController.STATE_PREPARING
-                        || mLatestVideoControllerState == NativeVideoController.STATE_IDLE) {
+                if (mLatestVideoControllerState == NativeVideoController.STATE_IDLE) {
                     newState = VideoState.LOADING;
                 } else if (mLatestVideoControllerState == NativeVideoController.STATE_BUFFERING) {
                     newState = VideoState.BUFFERING;
@@ -906,14 +911,13 @@ public NativeVideoController createForId(final long id,
         private int mImpressionMinVisiblePercent;
         private int mImpressionVisibleMs;
         private int mMaxBufferMs;
+        private Integer mImpressionVisiblePx;
         private JSONObject mVideoTrackers;
 
         VideoResponseHeaders(@NonNull final Map<String, String> serverExtras) {
             try {
                 mPlayVisiblePercent = Integer.parseInt(serverExtras.get(PLAY_VISIBLE_PERCENT));
                 mPauseVisiblePercent = Integer.parseInt(serverExtras.get(PAUSE_VISIBLE_PERCENT));
-                mImpressionMinVisiblePercent =
-                        Integer.parseInt(serverExtras.get(IMPRESSION_MIN_VISIBLE_PERCENT));
                 mImpressionVisibleMs = Integer.parseInt(serverExtras.get(IMPRESSION_VISIBLE_MS));
                 mMaxBufferMs = Integer.parseInt(serverExtras.get(MAX_BUFFER_MS));
                 mHeadersAreValid = true;
@@ -921,6 +925,25 @@ public NativeVideoController createForId(final long id,
                 mHeadersAreValid = false;
             }
 
+            final String impressionVisiblePxString = serverExtras.get(IMPRESSION_MIN_VISIBLE_PX);
+            if (!TextUtils.isEmpty(impressionVisiblePxString)) {
+                try {
+                    mImpressionVisiblePx = Integer.parseInt(impressionVisiblePxString);
+                } catch (NumberFormatException e) {
+                    MoPubLog.d("Unable to parse impression min visible px from server extras.");
+                }
+            }
+            try {
+                mImpressionMinVisiblePercent =
+                        Integer.parseInt(serverExtras.get(IMPRESSION_MIN_VISIBLE_PERCENT));
+            } catch (NumberFormatException e) {
+                MoPubLog.d("Unable to parse impression min visible percent from server extras.");
+                if (mImpressionVisiblePx == null || mImpressionVisiblePx < 0) {
+                    mHeadersAreValid = false;
+                }
+            }
+
+
             final String videoTrackers = serverExtras.get(VIDEO_TRACKERS_KEY);
             if (TextUtils.isEmpty(videoTrackers)) {
                 return;
@@ -958,6 +981,11 @@ int getMaxBufferMs() {
             return mMaxBufferMs;
         }
 
+        @Nullable
+        Integer getImpressionVisiblePx() {
+            return mImpressionVisiblePx;
+        }
+
         JSONObject getVideoTrackers() {
             return mVideoTrackers;
         }
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
index 0b7c6d0b..eb3a94ff 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
@@ -422,7 +422,7 @@ public void setColorFilter(ColorFilter cf) { }
         public int getOpacity() {
             return PixelFormat.UNKNOWN;
         }
-    };
+    }
 
     @Deprecated
     @VisibleForTesting
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
index ea7d68ea..d2e8f3e0 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
@@ -5,7 +5,6 @@
 import android.graphics.drawable.Drawable;
 import android.media.AudioManager;
 import android.media.AudioManager.OnAudioFocusChangeListener;
-import android.media.MediaCodec;
 import android.net.Uri;
 import android.os.Handler;
 import android.os.Looper;
@@ -14,23 +13,36 @@
 import android.view.Surface;
 import android.view.TextureView;
 
-import com.google.android.exoplayer.ExoPlaybackException;
-import com.google.android.exoplayer.ExoPlayer;
-import com.google.android.exoplayer.MediaCodecAudioTrackRenderer;
-import com.google.android.exoplayer.MediaCodecSelector;
-import com.google.android.exoplayer.MediaCodecVideoTrackRenderer;
-import com.google.android.exoplayer.extractor.Extractor;
-import com.google.android.exoplayer.extractor.ExtractorSampleSource;
-import com.google.android.exoplayer.extractor.mp4.Mp4Extractor;
-import com.google.android.exoplayer.upstream.Allocator;
-import com.google.android.exoplayer.upstream.DataSource;
-import com.google.android.exoplayer.upstream.DefaultAllocator;
+import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.DefaultLoadControl;
+import com.google.android.exoplayer2.ExoPlaybackException;
+import com.google.android.exoplayer2.ExoPlayer;
+import com.google.android.exoplayer2.ExoPlayerFactory;
+import com.google.android.exoplayer2.LoadControl;
+import com.google.android.exoplayer2.PlaybackParameters;
+import com.google.android.exoplayer2.Renderer;
+import com.google.android.exoplayer2.Timeline;
+import com.google.android.exoplayer2.audio.MediaCodecAudioRenderer;
+import com.google.android.exoplayer2.extractor.ExtractorsFactory;
+import com.google.android.exoplayer2.mediacodec.MediaCodecSelector;
+import com.google.android.exoplayer2.source.ExtractorMediaSource;
+import com.google.android.exoplayer2.source.MediaSource;
+import com.google.android.exoplayer2.source.TrackGroupArray;
+import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
+import com.google.android.exoplayer2.trackselection.TrackSelectionArray;
+import com.google.android.exoplayer2.trackselection.TrackSelector;
+import com.google.android.exoplayer2.upstream.DefaultAllocator;
+import com.google.android.exoplayer2.video.MediaCodecVideoRenderer;
+import com.google.android.exoplayer2.extractor.Extractor;
+import com.google.android.exoplayer2.extractor.mp4.Mp4Extractor;
+import com.google.android.exoplayer2.upstream.DataSource;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.event.BaseEvent;
 import com.mopub.common.event.Event;
 import com.mopub.common.event.EventDetails;
 import com.mopub.common.event.MoPubEvents;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.RepeatingHandlerRunnable;
 import com.mopub.mobileads.VastTracker;
 import com.mopub.mobileads.VastVideoConfig;
@@ -48,7 +60,7 @@
  * Wrapper class around the {@link ExoPlayer} to provide a nice interface into the player along
  * with some helper methods. This class is not thread safe.
  */
-public class NativeVideoController implements ExoPlayer.Listener,OnAudioFocusChangeListener {
+public class NativeVideoController implements ExoPlayer.EventListener, OnAudioFocusChangeListener {
 
     public interface Listener {
         void onStateChanged(boolean playWhenReady, int playbackState);
@@ -61,7 +73,6 @@
     public static final int STATE_READY = ExoPlayer.STATE_READY;
     public static final int STATE_BUFFERING = ExoPlayer.STATE_BUFFERING;
     public static final int STATE_IDLE = ExoPlayer.STATE_IDLE;
-    public static final int STATE_PREPARING = ExoPlayer.STATE_PREPARING;
     public static final int STATE_ENDED = ExoPlayer.STATE_ENDED;
     public static final int STATE_CLEARED = ExoPlayer.STATE_ENDED + 1;
 
@@ -72,7 +83,7 @@
 
     @NonNull private final Context mContext;
     @NonNull private final Handler mHandler;
-    @NonNull private final ExoPlayerFactory mExoPlayerFactory;
+    @NonNull private final MoPubExoPlayerFactory mMoPubExoPlayerFactory;
     @NonNull private VastVideoConfig mVastVideoConfig;
     @NonNull private NativeVideoProgressRunnable mNativeVideoProgressRunnable;
     @NonNull private AudioManager mAudioManager;
@@ -84,8 +95,8 @@
     @Nullable private WeakReference<Object> mOwnerRef;
     @Nullable private volatile ExoPlayer mExoPlayer;
     @Nullable private BitmapDrawable mFinalFrame;
-    @Nullable private MediaCodecAudioTrackRenderer mAudioTrackRenderer;
-    @Nullable private MediaCodecVideoTrackRenderer mVideoTrackRenderer;
+    @Nullable private MediaCodecAudioRenderer mAudioRenderer;
+    @Nullable private MediaCodecVideoRenderer mVideoRenderer;
     @Nullable private EventDetails mEventDetails;
 
     private boolean mPlayWhenReady;
@@ -119,11 +130,11 @@ public static NativeVideoController createForId(final long id,
             @NonNull final Context context,
             @NonNull final VastVideoConfig vastVideoConfig,
             @NonNull final NativeVideoProgressRunnable nativeVideoProgressRunnable,
-            @NonNull final ExoPlayerFactory exoPlayerFactory,
+            @NonNull final MoPubExoPlayerFactory moPubExoPlayerFactory,
             @Nullable final EventDetails eventDetails,
             @NonNull final AudioManager audioManager) {
         NativeVideoController nvc = new NativeVideoController(context, vastVideoConfig,
-                nativeVideoProgressRunnable, exoPlayerFactory, eventDetails, audioManager);
+                nativeVideoProgressRunnable, moPubExoPlayerFactory, eventDetails, audioManager);
         sManagerMap.put(id, nvc);
         return nvc;
     }
@@ -153,7 +164,7 @@ private NativeVideoController(@NonNull final Context context,
                         new Handler(Looper.getMainLooper()),
                         visibilityTrackingEvents,
                         vastVideoConfig),
-                new ExoPlayerFactory(),
+                new MoPubExoPlayerFactory(),
                 eventDetails, 
                 (AudioManager) context.getSystemService(Context.AUDIO_SERVICE));
     }
@@ -161,19 +172,19 @@ private NativeVideoController(@NonNull final Context context,
     private NativeVideoController(@NonNull final Context context,
             @NonNull final VastVideoConfig vastVideoConfig,
             @NonNull final NativeVideoProgressRunnable nativeVideoProgressRunnable,
-            @NonNull final ExoPlayerFactory exoPlayerFactory,
+            @NonNull final MoPubExoPlayerFactory moPubExoPlayerFactory,
             @Nullable final EventDetails eventDetails,
             @NonNull final AudioManager audioManager) {
         Preconditions.checkNotNull(context);
         Preconditions.checkNotNull(vastVideoConfig);
-        Preconditions.checkNotNull(exoPlayerFactory);
+        Preconditions.checkNotNull(moPubExoPlayerFactory);
         Preconditions.checkNotNull(audioManager);
 
         mContext = context.getApplicationContext();
         mHandler = new Handler(Looper.getMainLooper());
         mVastVideoConfig = vastVideoConfig;
         mNativeVideoProgressRunnable = nativeVideoProgressRunnable;
-        mExoPlayerFactory = exoPlayerFactory;
+        mMoPubExoPlayerFactory = moPubExoPlayerFactory;
         mEventDetails = eventDetails;
         mAudioManager = audioManager;
     }
@@ -288,9 +299,23 @@ public void release(@NonNull final Object owner) {
         }
     }
 
+    @Override
+    public void onTimelineChanged(Timeline timeline, Object manifest) {}
+
+    @Override
+    public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {}
+
+    @Override
+    public void onLoadingChanged(boolean isLoading) {}
+
     @Override
     public void onPlayerStateChanged(final boolean playWhenReady, final int newState) {
         if (newState == STATE_ENDED && mFinalFrame == null) {
+            if (mExoPlayer == null || mSurface == null || mTextureView == null) {
+                MoPubLog.w("onPlayerStateChanged called afer view has been recycled.");
+                return;
+            }
+
             mFinalFrame = new BitmapDrawable(mContext.getResources(), mTextureView.getBitmap());
             mNativeVideoProgressRunnable.requestStop();
         }
@@ -342,9 +367,6 @@ public long getDuration() {
         return mNativeVideoProgressRunnable.getDuration();
     }
 
-    @Override
-    public void onPlayWhenReadyCommitted() {}
-
     @Override
     public void onPlayerError(ExoPlaybackException e) {
         if (mListener == null) {
@@ -361,6 +383,12 @@ public void onPlayerError(ExoPlaybackException e) {
         mNativeVideoProgressRunnable.requestStop();
     }
 
+    @Override
+    public void onPositionDiscontinuity() {}
+
+    @Override
+    public void onPlaybackParametersChanged(PlaybackParameters playbackParameters) {}
+
     /**
      * Handles forwarding the user to the specified click through url. Also, fires all unfired
      * impression trackers (which should already have been handled in the transition from in-stream
@@ -400,28 +428,43 @@ private void clearExistingPlayer() {
 
     private void preparePlayer() {
         if (mExoPlayer == null) {
-            mExoPlayer = mExoPlayerFactory.newInstance(2, 1000, 5000);
+            mVideoRenderer = new MediaCodecVideoRenderer(mContext,
+                    MediaCodecSelector.DEFAULT, 0, mHandler, null, 10);
+            mAudioRenderer = new MediaCodecAudioRenderer(MediaCodecSelector.DEFAULT);
+            final DefaultAllocator allocator = new DefaultAllocator(true, BUFFER_SEGMENT_SIZE,
+                    BUFFER_SEGMENT_COUNT);
+
+            mExoPlayer = mMoPubExoPlayerFactory.newInstance(
+                    new Renderer[] {mVideoRenderer, mAudioRenderer},
+                    new DefaultTrackSelector(),
+                    new DefaultLoadControl(allocator));
+
             mNativeVideoProgressRunnable.setExoPlayer(mExoPlayer);
             mExoPlayer.addListener(this);
 
-            // Set up data sources
-            final Allocator allocator = new DefaultAllocator(BUFFER_SEGMENT_SIZE);
-            final Extractor extractor = new Mp4Extractor();
+            final DataSource.Factory dataSourceFactory = new DataSource.Factory() {
+                @Override
+                public DataSource createDataSource() {
+                    return new HttpDiskCompositeDataSource(mContext, "exo_demo", mEventDetails);
+                }
+            };
 
-            final DataSource httpSource = new HttpDiskCompositeDataSource(mContext, "exo_demo",
-                    mEventDetails);
+            final ExtractorsFactory extractorsFactory = new ExtractorsFactory() {
+                @Override
+                public Extractor[] createExtractors() {
+                    return new Extractor[] {new Mp4Extractor()};
+                }
+            };
 
-            final String videoUrl = mVastVideoConfig.getNetworkMediaFileUrl();
+            final MediaSource mediaSource = new ExtractorMediaSource(
+                    Uri.parse(mVastVideoConfig.getNetworkMediaFileUrl()),
+                    dataSourceFactory,
+                    extractorsFactory,
+                    mHandler,
+                    null
+            );
 
-            final ExtractorSampleSource sampleSource = new ExtractorSampleSource(Uri.parse(videoUrl),
-                    httpSource, allocator, BUFFER_SEGMENT_SIZE * BUFFER_SEGMENT_COUNT, extractor);
-            mVideoTrackRenderer = new MediaCodecVideoTrackRenderer(mContext, sampleSource,
-                    MediaCodecSelector.DEFAULT,
-                    MediaCodec.VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING, 0, mHandler, null,
-                    10);
-            mAudioTrackRenderer = new MediaCodecAudioTrackRenderer(sampleSource,
-                    MediaCodecSelector.DEFAULT);
-            mExoPlayer.prepare(mAudioTrackRenderer, mVideoTrackRenderer);
+            mExoPlayer.prepare(mediaSource);
             mNativeVideoProgressRunnable.startRepeating(50);
         }
 
@@ -447,8 +490,9 @@ private void setExoAudio(final float volume) {
             return;
         }
 
-        mExoPlayer.sendMessage(
-                mAudioTrackRenderer, MediaCodecAudioTrackRenderer.MSG_SET_VOLUME, volume);
+        mExoPlayer.sendMessages(
+                new ExoPlayer.ExoPlayerMessage(mAudioRenderer, C.MSG_SET_VOLUME, volume)
+        );
     }
 
     private void setExoSurface(@Nullable final Surface surface) {
@@ -456,17 +500,19 @@ private void setExoSurface(@Nullable final Surface surface) {
             return;
         }
 
-        mExoPlayer.sendMessage(
-                mVideoTrackRenderer, MediaCodecVideoTrackRenderer.MSG_SET_SURFACE, surface);
+        mExoPlayer.sendMessages(
+            new ExoPlayer.ExoPlayerMessage(mVideoRenderer, C.MSG_SET_SURFACE, surface)
+        );
     }
 
     /**
      * Created purely for the purpose of mocking to ease testing.
      */
     @VisibleForTesting
-    static class ExoPlayerFactory {
-        public ExoPlayer newInstance(int rendererCount, int minBufferMs, int minRebufferMs) {
-            return ExoPlayer.Factory.newInstance(rendererCount, minBufferMs, minRebufferMs);
+    static class MoPubExoPlayerFactory {
+        public ExoPlayer newInstance(@NonNull final Renderer[] renderers,
+                @NonNull final TrackSelector trackSelector, @Nullable LoadControl loadControl) {
+            return ExoPlayerFactory.newInstance(renderers, trackSelector, loadControl);
         }
     }
 
@@ -480,6 +526,7 @@ public ExoPlayer newInstance(int rendererCount, int minBufferMs, int minRebuffer
         int totalRequiredPlayTimeMs;
         int totalQualifiedPlayCounter;
         boolean isTracked;
+        Integer minimumVisiblePx;
     }
 
     static class NativeVideoProgressRunnable extends RepeatingHandlerRunnable {
@@ -567,7 +614,7 @@ void checkImpressionTrackers(final boolean forceTrigger) {
                     continue;
                 }
                 if (forceTrigger || mVisibilityChecker.isVisible(mTextureView, mTextureView,
-                        event.minimumPercentageVisible)) {
+                        event.minimumPercentageVisible, event.minimumVisiblePx)) {
                     event.totalQualifiedPlayCounter += mUpdateIntervalMillis;
                     if (forceTrigger ||
                             event.totalQualifiedPlayCounter >= event.totalRequiredPlayTimeMs) {
@@ -607,7 +654,7 @@ public void doWork() {
                     if (tracker.isTracked()) {
                         continue;
                     }
-                    trackingUrls.add(tracker.getTrackingUrl());
+                    trackingUrls.add(tracker.getContent());
                     tracker.setTracked();
                 }
                 TrackingRequest.makeTrackingHttpRequest(trackingUrls, mContext);
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
index 4dc33142..e98c9b1f 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
@@ -241,8 +241,7 @@ private void maybeChangeState() {
         } else if (mEnded) {
             newState = VideoState.ENDED;
         } else {
-            if (mLatestVideoControllerState == NativeVideoController.STATE_PREPARING
-                    || mLatestVideoControllerState == NativeVideoController.STATE_IDLE) {
+            if (mLatestVideoControllerState == NativeVideoController.STATE_IDLE) {
                 newState = VideoState.LOADING;
             } else if (mLatestVideoControllerState == NativeVideoController.STATE_BUFFERING) {
                 newState = VideoState.BUFFERING;
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
index ba372b23..7298bf8c 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
@@ -25,6 +25,7 @@
     private boolean mIsLoaded;
     @Nullable private String mRewardedAdCurrencyName;
     private int mRewardedAdCurrencyAmount;
+    @Nullable protected String mAdUnitId;
 
     @Nullable
     @Override
@@ -84,6 +85,13 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity,
                             MoPubReward.DEFAULT_REWARD_AMOUNT);
             mRewardedAdCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
         }
+
+        final Object adUnitId = localExtras.get(DataKeys.AD_UNIT_ID_KEY);
+        if (adUnitId instanceof String) {
+            mAdUnitId = (String) adUnitId;
+        } else {
+            MoPubLog.d("Unable to set ad unit for rewarded ad.");
+        }
     }
 
     @Override
@@ -163,6 +171,7 @@ public void onLeaveApplication() {
         @Override
         public void onInterstitialDismissed() {
             MoPubRewardedVideoManager.onRewardedVideoClosed(mCustomEventClass, getAdNetworkId());
+            onInvalidate();
         }
 
         @Deprecated
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java
index 41eabaa5..963ec1cb 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import com.mopub.common.MoPubReward;
 import com.mopub.common.VisibleForTesting;
@@ -15,8 +16,8 @@
  */
 public class MoPubRewardedPlayable extends MoPubRewardedAd {
 
-    @NonNull private static final String MOPUB_REWARDED_PLAYABLE_ID = "mopub_rewarded_playable_id";
-    @NonNull private RewardedMraidInterstitial mRewardedMraidInterstitial;
+    @NonNull static final String MOPUB_REWARDED_PLAYABLE_ID = "mopub_rewarded_playable_id";
+    @Nullable private RewardedMraidInterstitial mRewardedMraidInterstitial;
 
     public MoPubRewardedPlayable() {
         mRewardedMraidInterstitial = new RewardedMraidInterstitial();
@@ -28,6 +29,10 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity,
             @NonNull final Map<String, String> serverExtras) throws Exception {
         super.loadWithSdkInitialized(activity, localExtras, serverExtras);
 
+        if (mRewardedMraidInterstitial == null) {
+            MoPubLog.w("mRewardedMraidInterstitial is null. Has this class been invalidated?");
+            return;
+        }
         mRewardedMraidInterstitial.loadInterstitial(activity, new MoPubRewardedPlayableListener(),
                 localExtras, serverExtras);
     }
@@ -35,18 +40,21 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity,
     @NonNull
     @Override
     protected String getAdNetworkId() {
-        return MOPUB_REWARDED_PLAYABLE_ID;
+        return mAdUnitId != null ? mAdUnitId : MOPUB_REWARDED_PLAYABLE_ID;
     }
 
     @Override
     protected void onInvalidate() {
-        mRewardedMraidInterstitial.onInvalidate();
+        if (mRewardedMraidInterstitial != null) {
+            mRewardedMraidInterstitial.onInvalidate();
+        }
+        mRewardedMraidInterstitial = null;
         super.onInvalidate();
     }
 
     @Override
     protected void show() {
-        if (isReady()) {
+        if (isReady() && mRewardedMraidInterstitial != null) {
             MoPubLog.d("Showing MoPub rewarded playable.");
             mRewardedMraidInterstitial.showInterstitial();
         } else {
@@ -79,4 +87,11 @@ void setRewardedMraidInterstitial(
             @NonNull final RewardedMraidInterstitial rewardedMraidInterstitial) {
         mRewardedMraidInterstitial = rewardedMraidInterstitial;
     }
+
+    @Deprecated
+    @VisibleForTesting
+    @Nullable
+    RewardedMraidInterstitial getRewardedMraidInterstitial() {
+        return mRewardedMraidInterstitial;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
index a9695b16..ca70f8b3 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import com.mopub.common.MoPubReward;
 import com.mopub.common.VisibleForTesting;
@@ -14,10 +15,9 @@
  */
 public class MoPubRewardedVideo extends MoPubRewardedAd {
 
-    @NonNull private static final String MOPUB_REWARDED_VIDEO_ID = "mopub_rewarded_video_id";
-
-    @NonNull private RewardedVastVideoInterstitial mRewardedVastVideoInterstitial;
+    @NonNull static final String MOPUB_REWARDED_VIDEO_ID = "mopub_rewarded_video_id";
 
+    @Nullable private RewardedVastVideoInterstitial mRewardedVastVideoInterstitial;
 
     public MoPubRewardedVideo() {
         mRewardedVastVideoInterstitial = new RewardedVastVideoInterstitial();
@@ -26,12 +26,15 @@ public MoPubRewardedVideo() {
     @NonNull
     @Override
     protected String getAdNetworkId() {
-        return MOPUB_REWARDED_VIDEO_ID;
+        return mAdUnitId != null ?  mAdUnitId : MOPUB_REWARDED_VIDEO_ID;
     }
 
     @Override
     protected void onInvalidate() {
-        mRewardedVastVideoInterstitial.onInvalidate();
+        if (mRewardedVastVideoInterstitial != null) {
+            mRewardedVastVideoInterstitial.onInvalidate();
+        }
+        mRewardedVastVideoInterstitial = null;
         super.onInvalidate();
     }
 
@@ -41,13 +44,18 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity,
             @NonNull final Map<String, String> serverExtras) throws Exception {
         super.loadWithSdkInitialized(activity, localExtras, serverExtras);
 
-        mRewardedVastVideoInterstitial.loadInterstitial(activity, new MoPubRewardedVideoListener(),
-                localExtras, serverExtras);
+        if (mRewardedVastVideoInterstitial == null) {
+            MoPubLog.w("mRewardedVastVideoInterstitial is null. Has this class been invalidated?");
+            return;
+        }
+        mRewardedVastVideoInterstitial.loadInterstitial(activity,
+                    new MoPubRewardedVideoListener(),
+                    localExtras, serverExtras);
     }
 
     @Override
     protected void show() {
-        if (isReady()) {
+        if (isReady() && mRewardedVastVideoInterstitial != null) {
             MoPubLog.d("Showing MoPub rewarded video.");
             mRewardedVastVideoInterstitial.showInterstitial();
         } else {
@@ -78,7 +86,14 @@ public void onVideoComplete() {
     @Deprecated
     @VisibleForTesting
     void setRewardedVastVideoInterstitial(
-            @NonNull final RewardedVastVideoInterstitial rewardedVastVideoInterstitial) {
+            @Nullable final RewardedVastVideoInterstitial rewardedVastVideoInterstitial) {
         mRewardedVastVideoInterstitial = rewardedVastVideoInterstitial;
     }
+
+    @Deprecated
+    @VisibleForTesting
+    @Nullable
+    RewardedVastVideoInterstitial getRewardedVastVideoInterstitial() {
+        return mRewardedVastVideoInterstitial;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
index e533accb..c7228b7c 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 import android.content.Context;
+import android.content.SharedPreferences;
 import android.location.Location;
 import android.os.Handler;
 import android.os.Looper;
@@ -18,6 +19,7 @@
 import com.mopub.common.MediationSettings;
 import com.mopub.common.MoPubReward;
 import com.mopub.common.Preconditions;
+import com.mopub.common.SharedPreferencesHelper;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Json;
@@ -34,11 +36,15 @@
 import com.mopub.volley.VolleyError;
 
 import org.json.JSONException;
+import org.json.JSONObject;
 
 import java.lang.ref.WeakReference;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.LinkedHashSet;
+import java.util.LinkedList;
+import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
@@ -52,10 +58,14 @@
  */
 public class MoPubRewardedVideoManager {
     private static MoPubRewardedVideoManager sInstance;
+    @NonNull private static SharedPreferences sCustomEventSharedPrefs;
+    private static final String CUSTOM_EVENT_PREF_NAME = "mopubCustomEventSettings";
     private static final int DEFAULT_LOAD_TIMEOUT = Constants.THIRTY_SECONDS_MILLIS;
     private static final String CURRENCIES_JSON_REWARDS_MAP_KEY = "rewards";
     private static final String CURRENCIES_JSON_REWARD_NAME_KEY = "name";
     private static final String CURRENCIES_JSON_REWARD_AMOUNT_KEY = "amount";
+    @VisibleForTesting
+    static final int CUSTOM_DATA_MAX_LENGTH_BYTES = 8192;
 
     /**
      * This must an integer because the backend only supports int types for api version.
@@ -130,6 +140,68 @@ private MoPubRewardedVideoManager(@NonNull Activity mainActivity, MediationSetti
         mTimeoutMap = new HashMap<String, Runnable>();
 
         mAdRequestStatus = new AdRequestStatusMapping();
+
+        sCustomEventSharedPrefs =
+                SharedPreferencesHelper.getSharedPreferences(mContext, CUSTOM_EVENT_PREF_NAME);
+    }
+
+    @NonNull
+    public static synchronized List<CustomEventRewardedVideo> initNetworks(
+            @NonNull final Activity mainActivity,
+            @NonNull final List<Class<? extends CustomEventRewardedVideo>> networksToInit) {
+        Preconditions.checkNotNull(mainActivity);
+        Preconditions.checkNotNull(networksToInit);
+
+        if (sInstance == null) {
+            logErrorNotInitialized();
+            return Collections.emptyList();
+        }
+
+        // List of networks that end up getting initialized.
+        List<CustomEventRewardedVideo> initializedNetworksList = new LinkedList<>();
+
+        // Fetch saved network init settings from SharedPrefs.
+        final Map<String, ?> networkInitSettings = sCustomEventSharedPrefs.getAll();
+        MoPubLog.d(String.format(Locale.US, "fetched init settings for %s networks: %s",
+                networkInitSettings.size(), networkInitSettings.keySet()));
+
+        // Dedupe array of networks to init.
+        final LinkedHashSet<Class<? extends CustomEventRewardedVideo>> uniqueNetworksToInit =
+                new LinkedHashSet<>(networksToInit);
+
+        for (Class<? extends CustomEventRewardedVideo> networkClass : uniqueNetworksToInit) {
+            final String networkClassName = networkClass.getName();
+            if (networkInitSettings.containsKey(networkClassName)) {
+                try {
+                    final String networkInitParamsJsonString =
+                            (String) networkInitSettings.get(networkClassName);
+
+                    final Map<String, String> networkInitParamsMap =
+                            Json.jsonStringToMap(networkInitParamsJsonString);
+
+                    final CustomEventRewardedVideo customEvent =
+                            Reflection.instantiateClassWithEmptyConstructor(
+                                    networkClassName,
+                                    CustomEventRewardedVideo.class);
+
+                    MoPubLog.d(String.format(Locale.US, "Initializing %s with params %s",
+                            networkClassName, networkInitParamsMap));
+
+                    customEvent.checkAndInitializeSdk(
+                            mainActivity,
+                            Collections.<String, Object>emptyMap(),
+                            networkInitParamsMap);
+
+                    initializedNetworksList.add(customEvent);
+                } catch (Exception e) {
+                    MoPubLog.e("Error fetching init settings for network " + networkClassName);
+                }
+            } else {
+                MoPubLog.d("Init settings not found for " + networkClassName);
+            }
+        }
+
+        return initializedNetworksList;
     }
 
     public static synchronized void init(@NonNull Activity mainActivity, MediationSettings... mediationSettings) {
@@ -322,33 +394,48 @@ public static boolean hasVideo(@NonNull String adUnitId) {
     }
 
     public static void showVideo(@NonNull String adUnitId) {
-        if (sInstance != null) {
-            final CustomEventRewardedAd customEvent = sInstance.mRewardedAdData.getCustomEvent(adUnitId);
-            if (isPlayable(adUnitId, customEvent)) {
-                // If there are rewards available but no reward is selected, fail over.
-                if (!sInstance.mRewardedAdData.getAvailableRewards(adUnitId).isEmpty()
-                        && sInstance.mRewardedAdData.getMoPubReward(adUnitId) == null) {
-                    sInstance.failover(adUnitId, MoPubErrorCode.REWARD_NOT_SELECTED);
-                    return;
-                }
+        showVideo(adUnitId, null);
+    }
 
-                sInstance.mRewardedAdData.updateCustomEventLastShownRewardMapping(
-                        customEvent.getClass(),
-                        sInstance.mRewardedAdData.getMoPubReward(adUnitId));
-                sInstance.mRewardedAdData.setCurrentlyShowingAdUnitId(adUnitId);
-                sInstance.mAdRequestStatus.markPlayed(adUnitId);
-                customEvent.show();
-            } else {
-                if (sInstance.mAdRequestStatus.isLoading(adUnitId)) {
-                    MoPubLog.d("Rewarded ad is not ready to be shown yet.");
-                } else {
-                    MoPubLog.d("No rewarded ad loading or loaded.");
-                }
+    public static void showVideo(@NonNull String adUnitId,
+            @Nullable String customData) {
+        if (sInstance == null) {
+            logErrorNotInitialized();
+            return;
+        }
 
-                sInstance.failover(adUnitId, MoPubErrorCode.VIDEO_NOT_AVAILABLE);
+        if (customData != null && customData.length() > CUSTOM_DATA_MAX_LENGTH_BYTES) {
+            MoPubLog.w(String.format(
+                    Locale.US,
+                    "Provided rewarded ad custom data parameter longer than supported" +
+                            "(%d bytes, %d maximum)",
+                    customData.length(), CUSTOM_DATA_MAX_LENGTH_BYTES));
+        }
+
+        final CustomEventRewardedAd customEvent = sInstance.mRewardedAdData.getCustomEvent(adUnitId);
+        if (isPlayable(adUnitId, customEvent)) {
+            // If there are rewards available but no reward is selected, fail over.
+            if (!sInstance.mRewardedAdData.getAvailableRewards(adUnitId).isEmpty()
+                    && sInstance.mRewardedAdData.getMoPubReward(adUnitId) == null) {
+                sInstance.failover(adUnitId, MoPubErrorCode.REWARD_NOT_SELECTED);
+                return;
             }
+
+            sInstance.mRewardedAdData.updateCustomEventLastShownRewardMapping(
+                    customEvent.getClass(),
+                    sInstance.mRewardedAdData.getMoPubReward(adUnitId));
+            sInstance.mRewardedAdData.updateAdUnitToCustomDataMapping(adUnitId, customData);
+            sInstance.mRewardedAdData.setCurrentlyShowingAdUnitId(adUnitId);
+            sInstance.mAdRequestStatus.markPlayed(adUnitId);
+            customEvent.show();
         } else {
-            logErrorNotInitialized();
+            if (sInstance.mAdRequestStatus.isLoading(adUnitId)) {
+                MoPubLog.d("Rewarded ad is not ready to be shown yet.");
+            } else {
+                MoPubLog.d("No rewarded ad loading or loaded.");
+            }
+
+            sInstance.failover(adUnitId, MoPubErrorCode.VIDEO_NOT_AVAILABLE);
         }
     }
 
@@ -448,6 +535,9 @@ private void onAdSuccess(AdResponse adResponse, String adUnitId) {
             // Clear any available rewards for this AdUnit.
             mRewardedAdData.resetAvailableRewards(adUnitId);
 
+            // Clear any reward previously selected for this AdUnit.
+            mRewardedAdData.resetSelectedReward(adUnitId);
+
             // If the new multi-currency header doesn't exist, fallback to parsing legacy headers
             // X-Rewarded-Video-Currency-Name and X-Rewarded-Video-Currency-Amount.
             if (TextUtils.isEmpty(rewardedCurrencies)) {
@@ -491,15 +581,35 @@ public void run() {
             mCustomEventTimeoutHandler.postDelayed(timeout, timeoutMillis);
             mTimeoutMap.put(adUnitId, timeout);
 
+            // Fetch the server extras mappings.
+            final Map<String, String> serverExtras = adResponse.getServerExtras();
+
+            // If the custom event is a third-party rewarded video, the server extras mappings
+            // contain init parameters for this custom event class. Serialize the mappings into a
+            // JSON string, then update SharedPreferences keying on the custom event class name.
+            if (customEvent instanceof CustomEventRewardedVideo) {
+                final String serverExtrasJsonString = (new JSONObject(serverExtras)).toString();
+
+                MoPubLog.d(String.format(Locale.US,
+                        "Updating init settings for custom event %s with params %s",
+                        customEventClassName, serverExtrasJsonString));
+
+                sCustomEventSharedPrefs
+                        .edit()
+                        .putString(customEventClassName, serverExtrasJsonString)
+                        .apply();
+            }
+
             // Load custom event
             MoPubLog.d(String.format(Locale.US,
                     "Loading custom event with class name %s", customEventClassName));
-            customEvent.loadCustomEvent(mainActivity, localExtras, adResponse.getServerExtras());
+            customEvent.loadCustomEvent(mainActivity, localExtras, serverExtras);
 
             final String adNetworkId = customEvent.getAdNetworkId();
             mRewardedAdData.updateAdUnitCustomEventMapping(adUnitId, customEvent, adNetworkId);
         } catch (Exception e) {
-            MoPubLog.e(String.format(Locale.US, "Couldn't create custom event with class name %s", customEventClassName));
+            MoPubLog.e(String.format(Locale.US,
+                    "Couldn't create custom event with class name %s", customEventClassName));
             failover(adUnitId, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
         }
     }
@@ -753,7 +863,7 @@ void onRewardedVideoCompleted(@NonNull final Class<T> customEventClass,
         rewardOnServer(currentlyShowingAdUnitId);
     }
 
-    private static void rewardOnServer(final String currentlyShowingAdUnitId) {
+    private static void rewardOnServer(@Nullable final String currentlyShowingAdUnitId) {
         final String serverCompletionUrl = sInstance.mRewardedAdData.getServerCompletionUrl(
                 currentlyShowingAdUnitId);
         if (!TextUtils.isEmpty(serverCompletionUrl)) {
@@ -770,20 +880,33 @@ public void run() {
                             ? Integer.toString(MoPubReward.DEFAULT_REWARD_AMOUNT)
                             : Integer.toString(reward.getAmount());
 
+                    final CustomEventRewardedAd customEvent =
+                            sInstance.mRewardedAdData.getCustomEvent(currentlyShowingAdUnitId);
+                    final String className = (customEvent == null || customEvent.getClass() == null)
+                            ? null
+                            : customEvent.getClass().getName();
+
+                    final String customData = sInstance.mRewardedAdData.getCustomData(
+                            currentlyShowingAdUnitId);
+
                     RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(
                             sInstance.mContext,
                             serverCompletionUrl,
                             sInstance.mRewardedAdData.getCustomerId(),
                             rewardName,
-                            rewardAmount);
+                            rewardAmount,
+                            className,
+                            customData);
                 }
             });
         }
     }
 
     private static <T extends CustomEventRewardedAd> void rewardOnClient(
-            @NonNull final Class<T> customEventClass, final String thirdPartyId,
-            @NonNull final MoPubReward moPubReward, final String currentlyShowingAdUnitId) {
+            @NonNull final Class<T> customEventClass,
+            @Nullable final String thirdPartyId,
+            @NonNull final MoPubReward moPubReward,
+            @Nullable final String currentlyShowingAdUnitId) {
         postToInstance(new Runnable() {
             @Override
             public void run() {
@@ -883,4 +1006,12 @@ static AdRequestStatusMapping getAdRequestStatusMapping() {
         }
         return null;
     }
+
+    @Deprecated
+    @VisibleForTesting
+    static void setCustomEventSharedPrefs(@NonNull SharedPreferences sharedPrefs) {
+        Preconditions.checkNotNull(sharedPrefs);
+
+        sCustomEventSharedPrefs = sharedPrefs;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
index 9e7577c3..17a641e8 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
@@ -9,6 +9,7 @@
 import com.mopub.common.Preconditions;
 import com.mopub.common.util.ReflectionTarget;
 
+import java.util.List;
 import java.util.Set;
 
 /**
@@ -25,6 +26,17 @@ public static void initializeRewardedVideo(@NonNull Activity activity,
         MoPubRewardedVideoManager.init(activity, mediationSettings);
     }
 
+    @ReflectionTarget
+    public static void initializeRewardedVideo(@NonNull Activity activity,
+            @NonNull List<Class<? extends CustomEventRewardedVideo>> networksToInit,
+            MediationSettings... mediationSettings) {
+        Preconditions.checkNotNull(activity);
+        Preconditions.checkNotNull(networksToInit);
+
+        MoPubRewardedVideoManager.init(activity, mediationSettings);
+        MoPubRewardedVideoManager.initNetworks(activity, networksToInit);
+    }
+
     @ReflectionTarget
     public static void setRewardedVideoListener(@Nullable MoPubRewardedVideoListener listener) {
         MoPubRewardedVideoManager.setVideoListener(listener);
@@ -61,6 +73,13 @@ public static void showRewardedVideo(@NonNull String adUnitId) {
         MoPubRewardedVideoManager.showVideo(adUnitId);
     }
 
+    @ReflectionTarget
+    public static void showRewardedVideo(@NonNull String adUnitId, @Nullable String customData) {
+        Preconditions.checkNotNull(adUnitId);
+
+        MoPubRewardedVideoManager.showVideo(adUnitId, customData);
+    }
+
     @ReflectionTarget
     public static Set<MoPubReward> getAvailableRewards(@NonNull String adUnitId) {
         Preconditions.checkNotNull(adUnitId);
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdData.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdData.java
index f67a6f48..c9cec328 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdData.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdData.java
@@ -32,6 +32,8 @@
     @NonNull
     private final Map<String, String> mAdUnitToServerCompletionUrlMap;
     @NonNull
+    private final Map<String, String> mAdUnitToCustomDataMap;
+    @NonNull
     private final Map<Class<? extends CustomEventRewardedAd>, MoPubReward> mCustomEventToRewardMap;
     @NonNull
     private final Map<TwoPartKey, Set<String>> mCustomEventToMoPubIdMap;
@@ -46,12 +48,13 @@
         mAdUnitToRewardMap = new TreeMap<String, MoPubReward>();
         mAdUnitToAvailableRewardsMap = new TreeMap<String, Set<MoPubReward>>();
         mAdUnitToServerCompletionUrlMap = new TreeMap<String, String>();
+        mAdUnitToCustomDataMap = new TreeMap<String, String>();
         mCustomEventToRewardMap = new HashMap<Class<? extends CustomEventRewardedAd>, MoPubReward>();
         mCustomEventToMoPubIdMap = new HashMap<TwoPartKey, Set<String>>();
     }
 
     @Nullable
-    CustomEventRewardedAd getCustomEvent(@NonNull String moPubId) {
+    CustomEventRewardedAd getCustomEvent(@Nullable String moPubId) {
         return mAdUnitToCustomEventMap.get(moPubId);
     }
 
@@ -60,6 +63,11 @@ MoPubReward getMoPubReward(@Nullable String moPubId) {
         return mAdUnitToRewardMap.get(moPubId);
     }
 
+    @Nullable
+    String getCustomData(@Nullable String moPubId) {
+        return mAdUnitToCustomDataMap.get(moPubId);
+    }
+
     void addAvailableReward(
             @NonNull String moPubId,
             @Nullable String currencyName,
@@ -132,6 +140,13 @@ void resetAvailableRewards(@NonNull String moPubId) {
         }
     }
 
+    void resetSelectedReward(@NonNull String moPubId) {
+        Preconditions.checkNotNull(moPubId);
+
+        // Clear any reward previously selected for this AdUnit
+        updateAdUnitRewardMapping(moPubId, null, null);
+    }
+
     @Nullable
     String getServerCompletionUrl(@Nullable final String moPubId) {
         if (TextUtils.isEmpty(moPubId)) {
@@ -264,6 +279,13 @@ void setCurrentlyShowingAdUnitId(@Nullable final String currentAdUnitId) {
         mCurrentlyShowingAdUnitId = currentAdUnitId;
     }
 
+    void updateAdUnitToCustomDataMapping(@NonNull final String moPubId,
+            @Nullable String customData) {
+        Preconditions.NoThrow.checkNotNull(moPubId);
+
+        mAdUnitToCustomDataMap.put(moPubId, customData);
+    }
+
     @Nullable
     String getCurrentlyShowingAdUnitId() {
         return mCurrentlyShowingAdUnitId;
@@ -285,6 +307,7 @@ void clear() {
         mAdUnitToRewardMap.clear();
         mAdUnitToAvailableRewardsMap.clear();
         mAdUnitToServerCompletionUrlMap.clear();
+        mAdUnitToCustomDataMap.clear();
         mCustomEventToRewardMap.clear();
         mCustomEventToMoPubIdMap.clear();
         mCurrentlyShowingAdUnitId = null;
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
index 38e6846b..5855cc69 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
@@ -26,8 +26,8 @@
 import static com.mopub.common.DataKeys.SHOULD_REWARD_ON_CLICK_KEY;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
 
 public class RewardedMraidActivity extends MraidActivity {
@@ -120,7 +120,7 @@ public void onOpen() {
             }
         });
 
-        mRewardedMraidController.loadContent(htmlData);
+        mRewardedMraidController.fillContent(getBroadcastIdentifier(), htmlData, null);
         return mRewardedMraidController.getAdContainer();
     }
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
index 0cb0c34d..a046e41e 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
@@ -40,6 +40,8 @@
     private static final String API_VERSION_KEY = "&v=";
     private static final String REWARD_NAME_KEY = "&rcn=";
     private static final String REWARD_AMOUNT_KEY = "&rca=";
+    private static final String CUSTOM_EVENT_CLASS_NAME_KEY = "&cec=";
+    private static final String CUSTOM_DATA_KEY = "&rcd=";
 
     @NonNull private final String mUrl;
     @NonNull private final Handler mHandler;
@@ -51,15 +53,21 @@
             @NonNull final String url,
             @Nullable final String customerId,
             @NonNull final String rewardName,
-            @NonNull final String rewardAmount) {
-        this(context, url, customerId, rewardName, rewardAmount, new Handler());
+            @NonNull final String rewardAmount,
+            @Nullable final String className,
+            @Nullable final String customData) {
+        this(context, url, customerId, rewardName, rewardAmount, className, customData,
+                new Handler());
     }
 
+    @VisibleForTesting
     RewardedVideoCompletionRequestHandler(@NonNull final Context context,
             @NonNull final String url,
             @Nullable final String customerId,
             @NonNull final String rewardName,
             @NonNull final String rewardAmount,
+            @Nullable final String className,
+            @Nullable final String customData,
             @NonNull final Handler handler) {
         Preconditions.checkNotNull(context);
         Preconditions.checkNotNull(url);
@@ -67,7 +75,7 @@
         Preconditions.checkNotNull(rewardAmount);
         Preconditions.checkNotNull(handler);
 
-        mUrl = appendParameters(url, customerId, rewardName, rewardAmount);
+        mUrl = appendParameters(url, customerId, rewardName, rewardAmount, className, customData);
         mRetryCount = 0;
         mHandler = handler;
         mRequestQueue = Networking.getRequestQueue(context);
@@ -122,13 +130,17 @@ public static void makeRewardedVideoCompletionRequest(@Nullable final Context co
             @Nullable final String url,
             @Nullable final String customerId,
             @NonNull final String rewardName,
-            @NonNull final String rewardAmount) {
-        if (context == null || TextUtils.isEmpty(url) || rewardName == null || rewardAmount == null) {
+            @NonNull final String rewardAmount,
+            @Nullable final String rewardedAd,
+            @Nullable final String customData) {
+        if (context == null || TextUtils.isEmpty(url) || rewardName == null ||
+                rewardAmount == null) {
             return;
         }
 
         new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
-                rewardAmount).makeRewardedVideoCompletionRequest();
+                rewardAmount, rewardedAd, customData)
+                .makeRewardedVideoCompletionRequest();
     }
 
     static int getTimeout(int retryCount) {
@@ -142,17 +154,29 @@ static int getTimeout(int retryCount) {
     private static String appendParameters(@NonNull final String url,
             @Nullable final String customerId,
             @NonNull final String rewardName,
-            @NonNull final String rewardAmount) {
+            @NonNull final String rewardAmount,
+            @Nullable final String className,
+            @Nullable final String customData) {
         Preconditions.checkNotNull(url);
         Preconditions.checkNotNull(rewardName);
         Preconditions.checkNotNull(rewardAmount);
 
-        return url +
-                CUSTOMER_ID_KEY + (customerId == null ? "" : Uri.encode(customerId)) +
-                REWARD_NAME_KEY + Uri.encode(rewardName) +
-                REWARD_AMOUNT_KEY + Uri.encode(rewardAmount) +
-                SDK_VERSION_KEY + Uri.encode(MoPub.SDK_VERSION) +
-                API_VERSION_KEY + MoPubRewardedVideoManager.API_VERSION;
+        final StringBuilder stringBuilder = new StringBuilder(url);
+        stringBuilder
+                .append(CUSTOMER_ID_KEY).append((customerId == null) ? "" : Uri.encode(customerId))
+                .append(REWARD_NAME_KEY).append(Uri.encode(rewardName))
+                .append(REWARD_AMOUNT_KEY).append(Uri.encode(rewardAmount))
+                .append(SDK_VERSION_KEY).append(Uri.encode(MoPub.SDK_VERSION))
+                // Does not need to be encoded as it's an int
+                .append(API_VERSION_KEY).append(MoPubRewardedVideoManager.API_VERSION)
+                .append(CUSTOM_EVENT_CLASS_NAME_KEY)
+                .append((className == null) ? "" : Uri.encode(className));
+
+        if (!TextUtils.isEmpty(customData)) {
+            stringBuilder.append(CUSTOM_DATA_KEY).append(Uri.encode(customData));
+        }
+
+        return stringBuilder.toString();
     }
 
     @VisibleForTesting
diff --git a/mopub-sdk/proguard.txt b/mopub-sdk/proguard.txt
index bff255cd..21b8b752 100644
--- a/mopub-sdk/proguard.txt
+++ b/mopub-sdk/proguard.txt
@@ -16,6 +16,12 @@
 # Keep methods that are accessed via reflection
 -keepclassmembers class ** { @com.mopub.common.util.ReflectionTarget *; }
 
+# Viewability support
+-keepclassmembers class com.integralads.avid.library.mopub.** { public *; }
+-keep public class com.integralads.avid.library.mopub.**
+-keepclassmembers class com.moat.analytics.mobile.mpub.** { public *; }
+-keep public class com.moat.analytics.mobile.mpub.**
+
 # Support for Android Advertiser ID.
 -keep class com.google.android.gms.common.GooglePlayServicesUtil {*;}
 -keep class com.google.android.gms.ads.identifier.AdvertisingIdClient {*;}
diff --git a/mopub-sdk/publisher.gradle b/mopub-sdk/publisher.gradle
index 2744493a..9c40f84a 100644
--- a/mopub-sdk/publisher.gradle
+++ b/mopub-sdk/publisher.gradle
@@ -23,7 +23,7 @@ android.libraryVariants.all { variant ->
 
     task.dependsOn variant.javaCompile
     task.from variant.javaCompile.destinationDir
-    artifacts.add('archives', task);
+    artifacts.add('archives', task)
 }
 
 android.libraryVariants.all { variant ->
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index ebdf708e..7a2d3340 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -6,22 +6,24 @@ repositories {
     flatDir {
         dirs project(':mopub-sdk').file('../libs')
     }
+    maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
+    maven { url 'https://maven.google.com' }
 }
 
 project.group = 'com.mopub'
-project.version = '4.15.0'
+project.version = '4.19.0'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion '25.0.2'
+    compileSdkVersion 26
+    buildToolsVersion '26.0.2'
     lintOptions { abortOnError false }
     useLibrary 'org.apache.http.legacy'
 
     defaultConfig {
-        versionCode 52
+        versionCode 57
         versionName version
         minSdkVersion 16
-        targetSdkVersion 23
+        targetSdkVersion 26
         consumerProguardFiles project(':mopub-sdk').file('proguard.txt')
     }
 
@@ -49,7 +51,7 @@ android {
 
             // Test JVM settings since we have a lot of classes loaded.
             all {
-                jvmArgs '-XX:MaxPermSize=4096m', '-Xmx8192m'
+                jvmArgs '-XX:MaxPermSize=4096m', '-Xmx8192m', '-noverify'
                 forkEvery 200
             }
         }
@@ -74,6 +76,6 @@ android {
 }
 
 dependencies {
-    compile 'com.android.support:support-v4:23.1.1'
-    compile 'com.android.support:support-annotations:23.1.1'
+    compile 'com.android.support:support-v4:26.1.0'
+    compile 'com.android.support:support-annotations:26.1.0'
 }
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
index a561a950..208a5002 100644
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=4.15.0+kit
+fabric-version=4.19.0+kit
 fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
index c3d5625b..a9f91333 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
@@ -155,7 +155,7 @@ public void shouldOverrideUrlLoading_withEmptyUrl_shouldReturnFalse_shouldDoNoth
 
     @Test
     public void shouldOverrideUrlLoading_withNullUrl_shouldReturnFalse_shouldDoNothing() {
-        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, null)).isFalse();
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, (String) null)).isFalse();
         verify(mockWebView, never()).loadUrl(anyString());
         verify(mockMoPubBrowser, never()).finish();
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
index 66ccbdd2..909292e8 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
@@ -13,7 +13,6 @@
 import com.mopub.network.Networking;
 
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java
index df0626ea..509175ed 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java
@@ -5,6 +5,8 @@
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 
+import org.junit.After;
+import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
@@ -15,14 +17,26 @@
 import java.net.URISyntaxException;
 
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class UrlResolutionTaskTest {
-    private final String BASE_URL =  "https://a.example.com/b/c/d?e=f";
     @Mock private HttpURLConnection mockHttpUrlConnection;
+    @Mock private UrlResolutionTask.UrlResolutionListener mockListener;
+
+    private UrlResolutionTask subject;
+    private final String BASE_URL =  "https://a.example.com/b/c/d?e=f";
+
+    @Before
+    public void setUp() throws Exception {
+        subject = new UrlResolutionTask(mockListener);
+    }
+
+    @After
+    public void tearDown() {
+        MoPub.setBrowserAgent(MoPub.BrowserAgent.IN_APP);
+    }
 
     @Test
     public void resolveRedirectLocation_withAbsoluteRedirect_shouldReturnAbsolutePath() throws Exception {
@@ -135,9 +149,48 @@ public void resolveRedirectLocation_withInvalidUrl_shouldThrowURISyntaxException
         UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection);
     }
 
+    @Test
+    public void doInBackground_withInAppBrowserAgent_withHttpScheme_shouldTryToResolveRedirectAndReturnNull() throws Exception {
+        // Since BASE_URL is not resolvable, attempting to resolve any redirects would result in
+        // catching an IOException and returning null. Hence, a null return value implies that
+        // redirect resolution was tried instead of just returning the URL.
+        assertThat(subject.doInBackground(BASE_URL)).isEqualTo(null);
+    }
+
+    @Test
+    public void doInBackground_withNativeBrowserAgent_withHttpScheme_shouldReturnUrlWithoutRedirectResolution() throws Exception {
+        MoPub.setBrowserAgent(MoPub.BrowserAgent.NATIVE);
+        assertThat(subject.doInBackground(BASE_URL)).isEqualTo(BASE_URL);
+    }
+
+    @Test
+    public void doInBackground_withInAppBrowserAgent_withNonHttpScheme_shouldReturnUrlWithoutRedirectResolution() throws Exception {
+        final String nonHttpUrl = "nonhttps://a.example.com/b/c/d?e=f";
+        assertThat(subject.doInBackground(nonHttpUrl)).isEqualTo(nonHttpUrl);
+    }
+
+    @Test
+    public void doInBackground_withNativeBrowserAgent_withNonHttpScheme_shouldReturnUrlWithoutRedirectResolution() throws Exception {
+        MoPub.setBrowserAgent(MoPub.BrowserAgent.NATIVE);
+        final String nonHttpUrl = "nonhttps://a.example.com/b/c/d?e=f";
+        assertThat(subject.doInBackground(nonHttpUrl)).isEqualTo(nonHttpUrl);
+    }
+
+    @Test
+    public void doInBackground_withInAppBrowserAgent_withMoPubNativeBrowserScheme_shouldReturnUrlWithoutRedirectResolution() throws Exception {
+        final String mopubNativeBrowserUrl = "mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.twitter.com";
+        assertThat(subject.doInBackground(mopubNativeBrowserUrl)).isEqualTo(mopubNativeBrowserUrl);
+    }
+
+    @Test
+    public void doInBackground_withNativeBrowserAgent_withMoPubNativeBrowserScheme_shouldReturnUrlWithoutRedirectResolution() throws Exception {
+        MoPub.setBrowserAgent(MoPub.BrowserAgent.NATIVE);
+        final String mopubNativeBrowserUrl = "mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.twitter.com";
+        assertThat(subject.doInBackground(mopubNativeBrowserUrl)).isEqualTo(mopubNativeBrowserUrl);
+    }
+
     private void setupMockHttpUrlConnection(final int responseCode,
             @Nullable final String absolutePathUrl) throws IOException {
-        mockHttpUrlConnection = mock(HttpURLConnection.class);
         when(mockHttpUrlConnection.getResponseCode()).thenReturn(responseCode);
         when(mockHttpUrlConnection.getHeaderField("Location")).thenReturn(absolutePathUrl);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
index 19552de1..7a5f2917 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
@@ -44,7 +44,11 @@
 import org.robolectric.DefaultTestLifecycle;
 import org.robolectric.RobolectricGradleTestRunner;
 import org.robolectric.TestLifecycle;
+import org.robolectric.annotation.Config;
 import org.robolectric.internal.bytecode.InstrumentationConfiguration;
+import org.robolectric.manifest.AndroidManifest;
+import org.robolectric.res.FileFsFile;
+import org.robolectric.res.FsFile;
 import org.robolectric.util.concurrent.RoboExecutorService;
 
 import static com.mopub.common.MoPub.LocationAwareness;
@@ -108,4 +112,26 @@ public void prepareTest(Object test) {
             CacheService.clearAndNullCaches();
         }
     }
+
+    // custom AppManifest logic adapted from:
+    // https://gist.github.com/venator85/282df3677af9ecac56e5e4b91471cd8f
+    @Override
+    protected AndroidManifest getAppManifest(Config config) {
+        final AndroidManifest appManifest = super.getAppManifest(config);
+
+        if (appManifest.getAndroidManifestFile().exists()) {
+            return appManifest;
+        }
+
+        final FsFile androidManifestFile = FileFsFile.from(getModuleRootPath(config),
+                appManifest.getAndroidManifestFile().getPath()
+                        .replace("manifests/full", "manifests/aapt"));
+        return new AndroidManifest(androidManifestFile, appManifest.getResDirectory(),
+                appManifest.getAssetsDirectory());
+    }
+
+    private String getModuleRootPath(Config config) {
+        final String moduleRoot = config.constants().getResource("").toString().replace("file:", "");
+        return moduleRoot.substring(0, moduleRoot.indexOf("/build"));
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
index 3446601f..a2971b0f 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
@@ -1,5 +1,7 @@
 package com.mopub.common.util.test.support;
 
+import android.support.annotation.NonNull;
+
 import com.mopub.common.util.Reflection;
 
 import org.robolectric.annotation.Implementation;
@@ -17,7 +19,7 @@ public static void reset() {
     }
 
     @Implementation
-    public static boolean classFound(final String className) throws Exception {
+    public static boolean classFound(@NonNull final String className) {
         if (sNextClassNotFound) {
             sNextClassNotFound = false;
             return false;
@@ -30,4 +32,4 @@ public static boolean classFound(final String className) throws Exception {
     public static void setNextClassNotFound(final boolean nextNotFound) {
         sNextClassNotFound = nextNotFound;
     }
-}
\ No newline at end of file
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java
new file mode 100644
index 00000000..73423b79
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java
@@ -0,0 +1,310 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.graphics.Rect;
+import android.os.Handler;
+import android.view.View;
+import android.view.ViewParent;
+import android.view.ViewTreeObserver;
+import android.view.Window;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowSystemClock;
+
+import static android.view.ViewTreeObserver.OnPreDrawListener;
+import static com.mopub.mobileads.BannerVisibilityTracker.BannerVisibilityChecker;
+import static com.mopub.mobileads.BannerVisibilityTracker.BannerVisibilityTrackerListener;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class BannerVisibilityTrackerTest {
+    private static final int MIN_VISIBLE_DIPS = 1;
+    private static final int MIN_VISIBLE_MILLIS = 0;
+
+    private Activity activity;
+    private BannerVisibilityTracker subject;
+    private BannerVisibilityChecker visibilityChecker;
+    private Handler visibilityHandler;
+
+    private View mockView;
+    @Mock
+    private BannerVisibilityTrackerListener visibilityTrackerListener;
+
+    @Before
+    public void setUp() throws Exception {
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+        mockView = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
+        subject = new BannerVisibilityTracker(activity, mockView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+
+        subject.setBannerVisibilityTrackerListener(visibilityTrackerListener);
+
+        visibilityChecker = subject.getBannerVisibilityChecker();
+        visibilityHandler = subject.getVisibilityHandler();
+
+        // XXX We need this to ensure that our SystemClock starts
+        ShadowSystemClock.uptimeMillis();
+    }
+
+    @Test
+    public void constructor_shouldSetOnPreDrawListenerForDecorView() throws Exception {
+        Activity spyActivity = spy(Robolectric.buildActivity(Activity.class).create().get());
+        Window window = mock(Window.class);
+        View decorView = mock(View.class);
+        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
+
+        when(spyActivity.getWindow()).thenReturn(window);
+        when(window.getDecorView()).thenReturn(decorView);
+        when(decorView.findViewById(anyInt())).thenReturn(decorView);
+        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
+        when(viewTreeObserver.isAlive()).thenReturn(true);
+
+        subject = new BannerVisibilityTracker(spyActivity, mockView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+        assertThat(subject.mOnPreDrawListener).isNotNull();
+        verify(viewTreeObserver).addOnPreDrawListener(subject.mOnPreDrawListener);
+        assertThat(subject.mWeakViewTreeObserver.get()).isEqualTo(viewTreeObserver);
+    }
+
+    @Test
+    public void constructor_withNonAliveViewTreeObserver_shouldNotSetOnPreDrawListenerForDecorView() throws Exception {
+        Activity mockActivity = mock(Activity.class);
+        Window window = mock(Window.class);
+        View decorView = mock(View.class);
+        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
+
+        when(mockActivity.getWindow()).thenReturn(window);
+        when(window.getDecorView()).thenReturn(decorView);
+        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
+        when(viewTreeObserver.isAlive()).thenReturn(false);
+
+        subject = new BannerVisibilityTracker(mockActivity, mockView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+        verify(viewTreeObserver, never()).addOnPreDrawListener(subject.mOnPreDrawListener);
+        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
+    }
+
+    @Test
+    public void constructor_withApplicationContext_shouldNotSetOnPreDrawListener() {
+        subject = new BannerVisibilityTracker(activity.getApplicationContext(), mockView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+
+        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
+    }
+
+    @Test
+    public void constructor_withViewTreeObserverNotSet_shouldSetViewTreeObserver() {
+        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
+        View rootView = mock(View.class);
+
+        when(mockView.getContext()).thenReturn(activity.getApplicationContext());
+        when(mockView.getRootView()).thenReturn(rootView);
+        when(rootView.getViewTreeObserver()).thenReturn(viewTreeObserver);
+        when(viewTreeObserver.isAlive()).thenReturn(true);
+
+        subject = new BannerVisibilityTracker(activity.getApplicationContext(), rootView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+        assertThat(subject.mWeakViewTreeObserver.get()).isEqualTo(viewTreeObserver);
+    }
+
+    @Test
+    public void destroy_shouldRemoveListenerFromDecorView() throws Exception {
+        Activity spyActivity = spy(Robolectric.buildActivity(Activity.class).create().get());
+        Window window = mock(Window.class);
+        View decorView = mock(View.class);
+        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
+
+        when(spyActivity.getWindow()).thenReturn(window);
+        when(window.getDecorView()).thenReturn(decorView);
+        when(decorView.findViewById(anyInt())).thenReturn(decorView);
+        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
+        when(viewTreeObserver.isAlive()).thenReturn(true);
+
+        subject = new BannerVisibilityTracker(spyActivity, mockView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+        subject.destroy();
+
+        assertThat(visibilityHandler.hasMessages(0)).isFalse();
+        assertThat(subject.isVisibilityScheduled()).isFalse();
+        verify(viewTreeObserver).removeOnPreDrawListener(any(OnPreDrawListener.class));
+        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
+        assertThat(subject.getBannerVisibilityTrackerListener()).isNull();
+    }
+
+    // BannerVisibilityRunnable Tests
+    @Test
+    public void visibilityRunnable_run_withViewVisibleForAtLeastMinDuration_shouldCallOnVisibilityChangedCallback_shouldMarkImpTrackerAsFired_shouldNotScheduleVisibilityCheck() throws Exception {
+        subject.new BannerVisibilityRunnable().run();
+
+        verify(visibilityTrackerListener).onVisibilityChanged();
+        assertThat(subject.isImpTrackerFired()).isTrue();
+        assertThat(subject.isVisibilityScheduled()).isFalse();
+    }
+
+    @Test
+    public void visibilityRunnable_run_withViewNotVisible_shouldNotCallOnVisibilityChangedCallback_shouldNotMarkImpTrackerAsFired_shouldScheduleVisibilityCheck() throws Exception {
+        when(mockView.getVisibility()).thenReturn(View.INVISIBLE);
+
+        subject.new BannerVisibilityRunnable().run();
+
+        verify(visibilityTrackerListener, never()).onVisibilityChanged();
+        assertThat(subject.isImpTrackerFired()).isFalse();
+        assertThat(subject.isVisibilityScheduled()).isTrue();
+    }
+
+    @Test
+    public void visibilityRunnable_run_witViewVisibleForLessThanMinDuration_shouldNotCallOnVisibilityChangedCallback_shouldNotMarkImpTrackerAsFired_shouldScheduleVisibilityCheck() throws Exception {
+        subject = new BannerVisibilityTracker(activity, mockView, mockView, 1, 1000);
+        subject.new BannerVisibilityRunnable().run();
+
+        verify(visibilityTrackerListener, never()).onVisibilityChanged();
+        assertThat(subject.isImpTrackerFired()).isFalse();
+        assertThat(subject.isVisibilityScheduled()).isTrue();
+    }
+
+    // BannerVisibilityChecker Tests
+    @Test
+    public void hasRequiredTimeElapsed_withStartTimeNotSetYet_shouldReturnFalse() throws Exception {
+        assertThat(visibilityChecker.hasRequiredTimeElapsed()).isFalse();
+    }
+
+    @Test
+    public void hasRequiredTimeElapsed_withStartTimeSet_withElapsedTimeGreaterThanMinTimeViewed_shouldReturnTrue() throws Exception {
+        visibilityChecker.setStartTimeMillis();
+
+        // minVisibleMillis is 0 ms as defined by constant MIN_VISIBLE_MILLIS
+        assertThat(visibilityChecker.hasRequiredTimeElapsed()).isTrue();
+    }
+
+    @Test
+    public void hasRequiredTimeElapsed_withStartTimeSet_withElapsedTimeLessThanMinTimeViewed_shouldReturnFalse() throws Exception {
+        subject = new BannerVisibilityTracker(activity, mockView, mockView, 1, 1000);
+        visibilityChecker = subject.getBannerVisibilityChecker();
+        visibilityChecker.setStartTimeMillis();
+
+        // minVisibleMillis is 1 sec, should return false since we are checking immediately before 1 sec elapses
+        assertThat(visibilityChecker.hasRequiredTimeElapsed()).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenParentIsNull_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 100, 100, 100, 100, false, true);
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewIsOffScreen_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, false);
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewIsEntirelyOnScreen_shouldReturnTrue() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isTrue();
+    }
+
+    @Test
+    public void isVisible_whenViewHasMoreVisibleDipsThanMinVisibleDips_shouldReturnTrue() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 1, 2, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isTrue();
+    }
+
+    @Test
+    public void isVisible_whenViewHasExactlyMinVisibleDips_shouldReturnTrue() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 1, 1, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isTrue();
+    }
+
+    @Test
+    public void isVisible_whenViewHasLessVisibleDipsThanMinVisibleDips_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 0, 1, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenVisibleAreaIsZero_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 0, 0, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewIsInvisibleOrGone_shouldReturnFalse() throws Exception {
+        View view = createViewMock(View.INVISIBLE, 100, 100, 100, 100, true, true);
+        assertThat(visibilityChecker.isVisible(view, view)).isFalse();
+
+        reset(view);
+        view = createViewMock(View.GONE, 100, 100, 100, 100, true, true);
+        assertThat(visibilityChecker.isVisible(view, view)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewHasZeroWidth_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 100, 100, 0, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewHasZeroHeight_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 100, 100, 100, 0, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewIsNull_shouldReturnFalse() throws Exception {
+        assertThat(visibilityChecker.isVisible(null, null)).isFalse();
+    }
+
+    static View createViewMock(final int visibility,
+            final int visibleWidth,
+            final int visibleHeight,
+            final int viewWidth,
+            final int viewHeight,
+            final boolean isParentSet,
+            final boolean isOnScreen) {
+        View view = mock(View.class);
+        when(view.getContext()).thenReturn(new Activity());
+        when(view.getVisibility()).thenReturn(visibility);
+
+        when(view.getGlobalVisibleRect(any(Rect.class)))
+                .thenAnswer(new Answer<Boolean>() {
+                    @Override
+                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {
+                        Object[] args = invocationOnMock.getArguments();
+                        Rect rect = (Rect) args[0];
+                        rect.set(0, 0, visibleWidth, visibleHeight);
+                        return isOnScreen;
+                    }
+                });
+
+        when(view.getWidth()).thenReturn(viewWidth);
+        when(view.getHeight()).thenReturn(viewHeight);
+
+        if (isParentSet) {
+            when(view.getParent()).thenReturn(mock(ViewParent.class));
+        }
+
+        when(view.getViewTreeObserver()).thenCallRealMethod();
+
+        return view;
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
index 1dd64a58..18dd5961 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
@@ -55,7 +55,6 @@
 
     @Before
     public void setUp() throws Exception {
-
         when(moPubView.getAdTimeoutDelay()).thenReturn(null);
         when(moPubView.getAdWidth()).thenReturn(320);
         when(moPubView.getAdHeight()).thenReturn(50);
@@ -128,7 +127,6 @@ public void timeout_withNonNullAdTimeoutDelay_shouldSignalFailureAndInvalidateWi
         assertThat(subject.isInvalidated()).isTrue();
     }
 
-
     @Test
     public void loadAd_shouldPropagateLocationInLocalExtras() throws Exception {
         Location expectedLocation = new Location("");
@@ -210,7 +208,6 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         subject.loadAd();
     }
 
-
     @Test
     public void loadAd_whenCallingOnBannerFailed_shouldCancelExistingTimeoutRunnable() throws Exception {
         ShadowLooper.pauseMainLooper();
@@ -241,25 +238,77 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
     }
 
     @Test
-    public void onBannerLoaded_shouldSignalMoPubView() throws Exception {
+    public void onBannerLoaded_whenViewIsHtmlBannerWebView_shouldNotTrackImpression() throws Exception {
+        View mockHtmlBannerWebView = mock(HtmlBannerWebView.class);
+        subject.onBannerLoaded(mockHtmlBannerWebView);
+
+        verify(moPubView).nativeAdLoaded();
+        verify(moPubView).setAdContentView(eq(mockHtmlBannerWebView));
+        verify(moPubView, never()).trackNativeImpression();
+
+        // Since there are no visibility imp tracking headers, imp tracking should not be enabled.
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isFalse();
+        assertThat(subject.getVisibilityTracker()).isNull();
+    }
+
+    @Test
+    public void onBannerLoaded_whenViewIsNotHtmlBannerWebView_shouldSignalMoPubView() throws Exception {
         View view = new View(Robolectric.buildActivity(Activity.class).create().get());
         subject.onBannerLoaded(view);
 
         verify(moPubView).nativeAdLoaded();
         verify(moPubView).setAdContentView(eq(view));
         verify(moPubView).trackNativeImpression();
+
+        // Since there are no visibility imp tracking headers, imp tracking should not be enabled.
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isFalse();
+        assertThat(subject.getVisibilityTracker()).isNull();
     }
 
     @Test
-    public void onBannerLoaded_whenViewIsHtmlBannerWebView_shouldNotTrackImpression() throws Exception {
+    public void onBannerLoaded_whenViewIsHtmlBannerWebView_withVisibilityImpressionTrackingEnabled_shouldSetUpVisibilityTrackerWithListener_shouldNotTrackNativeImpressionImmediately() {
         View mockHtmlBannerWebView = mock(HtmlBannerWebView.class);
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS, "1");
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS, "0");
+
+        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
         subject.onBannerLoaded(mockHtmlBannerWebView);
 
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(1);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(0);
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isTrue();
+        assertThat(subject.getVisibilityTracker()).isNotNull();
+        assertThat(subject.getVisibilityTracker().getBannerVisibilityTrackerListener()).isNotNull();
         verify(moPubView).nativeAdLoaded();
         verify(moPubView).setAdContentView(eq(mockHtmlBannerWebView));
         verify(moPubView, never()).trackNativeImpression();
     }
 
+    @Test
+    public void onBannerLoaded_whenViewIsNotHtmlBannerWebView_withVisibilityImpressionTrackingEnabled_shouldSetUpVisibilityTrackerWithListener_shouldNotTrackNativeImpressionImmediately() {
+        View view = new View(Robolectric.buildActivity(Activity.class).create().get());
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS, "1");
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS, "0");
+
+        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
+        subject.onBannerLoaded(view);
+
+        // When visibility impression tracking is enabled, regardless of whether the banner view is
+        // HtmlBannerWebView or not, the behavior should be the same.
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(1);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(0);
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isTrue();
+        assertThat(subject.getVisibilityTracker()).isNotNull();
+        assertThat(subject.getVisibilityTracker().getBannerVisibilityTrackerListener()).isNotNull();
+        verify(moPubView).nativeAdLoaded();
+        verify(moPubView).setAdContentView(eq(view));
+        verify(moPubView, never()).trackNativeImpression();
+    }
+
     @Test
     public void onBannerFailed_shouldLoadFailUrl() throws Exception {
         subject.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
@@ -347,4 +396,106 @@ public void invalidate_shouldCauseBannerListenerMethodsToDoNothing() throws Exce
         verify(moPubView, never()).adClosed();
         verify(moPubView, never()).registerClick();
     }
+
+    @Test
+    public void parseBannerImpressionTrackingHeaders_whenMissingInServerExtras_shouldUseDefaultValues_shouldNotEnableVisibilityImpressionTracking() {
+        // If headers are missing, use default values
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isFalse();
+    }
+
+    @Test
+    public void parseBannerImpressionTrackingHeaders_withBothValuesNonInteger_shouldUseDefaultValues_shouldNotEnableVisibilityImpressionTracking() {
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS, "");
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS, null);
+
+        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
+
+        // Both header values must be Integers in order to be parsed
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isFalse();
+    }
+
+    @Test
+    public void parseBannerImpressionTrackingHeaders_withNonIntegerMinVisibleDipsValue_shouldUseDefaultValues_shouldNotEnableVisibilityImpressionTracking() {
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS, null);
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS, "0");
+
+        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
+
+        // Both header values must be Integers in order to be parsed
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isFalse();
+    }
+
+    @Test
+    public void parseBannerImpressionTrackingHeaders_withNonIntegerMinVisibleMsValue_shouldUseDefaultValues_shouldNotEnableVisibilityImpressionTracking() {
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS, "1");
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS, "");
+
+        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
+
+        // Both header values must be Integers in order to be parsed
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(Integer.MIN_VALUE);
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isFalse();
+    }
+
+    @Test
+    public void parseBannerImpressionTrackingHeaders_withBothValuesValid_shouldParseValues_shouldEnableVisibilityImpressionTracking() {
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS, "1");
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS, "0");
+
+        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
+
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(1);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(0);
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isTrue();
+    }
+
+    @Test
+    public void parseBannerImpressionTrackingHeaders_withBothValuesInvalid_shouldParseValues_shouldNotEnableVisibilityImpressionTracking() {
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS, "0");
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS, "-1");
+
+        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
+
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(0);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(-1);
+
+        // ImpressionMinVisibleDips must be > 0 AND ImpressionMinVisibleMs must be >= 0 in order to
+        // enable viewable impression tracking
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isFalse();
+    }
+
+    @Test
+    public void parseBannerImpressionTrackingHeaders_withInvalidMinVisibleDipsValue_shouldParseValues_shouldNotEnableVisibilityImpressionTracking() {
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS, "0");
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS, "0");
+
+        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
+
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(0);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(0);
+
+        // ImpressionMinVisibleDips must be > 0 in order to enable viewable impression tracking
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isFalse();
+    }
+
+    @Test
+    public void parseBannerImpressionTrackingHeaders_withInvalidMinVisibleMsValue_shouldParseValues_shouldNotEnableVisibilityImpressionTracking() {
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS, "1");
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS, "-1");
+
+        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
+
+        assertThat(subject.getImpressionMinVisibleDips()).isEqualTo(1);
+        assertThat(subject.getImpressionMinVisibleMs()).isEqualTo(-1);
+
+        // ImpressionMinVisibleMs must be >= 0 in order to enable viewable impression tracking
+        assertThat(subject.isVisibilityImpressionTrackingEnabled()).isFalse();
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
index 2fdd7a26..f824f149 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
@@ -13,6 +13,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
+import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
 import java.util.HashMap;
@@ -48,7 +49,7 @@ public void setup() {
         subject = new HtmlBanner();
         htmlBannerWebView = TestHtmlBannerWebViewFactory.getSingletonMock();
         customEventBannerListener = mock(CustomEventBanner.CustomEventBannerListener.class);
-        context = new Activity();
+        context = Robolectric.buildActivity(Activity.class).create().get();
         localExtras = new HashMap<String, Object>();
         serverExtras = new HashMap<String, String>();
         responseBody = "expected response body";
@@ -122,4 +123,13 @@ public void loadBanner_shouldCauseServerDimensionsToBeHonoredWhenLayingOutView()
         assertThat(layoutParams.height).isEqualTo(50);
         assertThat(layoutParams.gravity).isEqualTo(Gravity.CENTER);
     }
+
+    @Test
+    public void trackMpxAndThirdPartyImpressions_shouldFireJavascriptWebViewDidAppear() throws Exception {
+        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
+        subject.trackMpxAndThirdPartyImpressions();
+
+        verify(htmlBannerWebView).loadHtmlResponse(responseBody);
+        verify(htmlBannerWebView).loadUrl(eq("javascript:webviewDidAppear();"));
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
index ddc9feb7..c0bee0bb 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
@@ -71,11 +71,12 @@ public void shouldOverrideUrlLoading_withMoPubClose_shouldCallAdDidClose() throw
     }
 
     @Test
-    public void shouldOverrideUrlLoading_withMoPubFailLoad_shouldCallLoadFailUrl() throws Exception {
+    public void shouldOverrideUrlLoading_withMoPubFailLoad_shouldCallLoadFailUrl_shouldStopCurrentLoad() throws Exception {
         boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://failLoad");
 
         assertThat(didOverrideUrl).isTrue();
         verify(htmlWebViewListener).onFailed(UNSPECIFIED);
+        verify(htmlWebView).stopLoading();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
index 10dd9951..b4422c18 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
@@ -64,6 +64,7 @@
 
     private HtmlInterstitialWebView htmlInterstitialWebView;
     private CustomEventInterstitialListener customEventInterstitialListener;
+    @Mock private HtmlInterstitial htmlInterstitial;
 
     private MoPubActivity subject;
 
@@ -98,7 +99,9 @@ public void onCreate_shouldHaveLockedOrientation() {
     @Test
     public void preRenderHtml_shouldPreloadTheHtml() throws Exception {
         String htmlData = "this is nonsense";
-        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener, htmlData);
+        MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
+                customEventInterstitialListener, htmlData, true, "redirectUrl",
+                "clickthroughUrl", testBroadcastIdentifier);
 
         verify(htmlInterstitialWebView).enablePlugins(eq(false));
         verify(htmlInterstitialWebView).loadHtmlResponse(htmlData);
@@ -106,15 +109,18 @@ public void preRenderHtml_shouldPreloadTheHtml() throws Exception {
 
     @Test
     public void preRenderHtml_shouldEnableJavascriptCachingForDummyWebView() {
-        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener,
-                "html_data");
+        MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
+                customEventInterstitialListener, "html_data", true, "redirectUrl",
+                "clickthroughUrl", testBroadcastIdentifier);
 
         verify(htmlInterstitialWebView).enableJavascriptCaching();
     }
 
     @Test
     public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFinishLoad() throws Exception {
-        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener, null);
+        MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
+                customEventInterstitialListener, null, true, "redirectUrl",
+                "clickthroughUrl", testBroadcastIdentifier);
 
         ArgumentCaptor<WebViewClient> webViewClientCaptor = ArgumentCaptor.forClass(WebViewClient.class);
         verify(htmlInterstitialWebView).setWebViewClient(webViewClientCaptor.capture());
@@ -128,7 +134,9 @@ public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFinishLoad() throw
 
     @Test
     public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFailLoad() throws Exception {
-        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener, null);
+        MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
+                customEventInterstitialListener, null, true, "redirectUrl",
+                "clickthroughUrl", testBroadcastIdentifier);
 
         ArgumentCaptor<WebViewClient> webViewClientCaptor = ArgumentCaptor.forClass(WebViewClient.class);
         verify(htmlInterstitialWebView).setWebViewClient(webViewClientCaptor.capture());
@@ -147,18 +155,6 @@ public void onCreate_shouldSetContentView() throws Exception {
         assertThat(getContentView().getChildCount()).isEqualTo(1);
     }
 
-    @Test
-    public void onCreate_shouldLayoutWebView() throws Exception {
-        // onCreate is called in #setup
-
-        ArgumentCaptor<FrameLayout.LayoutParams> captor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
-        verify(htmlInterstitialWebView).setLayoutParams(captor.capture());
-        FrameLayout.LayoutParams actualLayoutParams = captor.getValue();
-
-        assertThat(actualLayoutParams.width).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT);
-        assertThat(actualLayoutParams.height).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT);
-    }
-
     @Test
     public void getAdView_shouldReturnPopulatedHtmlWebView() throws Exception {
         // This is needed because we preload in onCreate and the mock gets triggered.
@@ -252,8 +248,9 @@ public void getAdView_shouldSetUpForBroadcastingFail() throws Exception {
     }
 
     @Test
-    public void broadcastingInterstitialListener_onInterstitialLoaded_shouldCallJavascriptWebViewDidAppear() throws Exception {
+    public void broadcastingInterstitialListener_onInterstitialLoaded_withWebViewCacheMiss_shouldCallJavascriptWebViewDidAppear() throws Exception {
         MoPubActivity.BroadcastingInterstitialListener broadcastingInterstitialListener = ((MoPubActivity) subject).new BroadcastingInterstitialListener();
+        WebViewCacheService.clearAll();
 
         broadcastingInterstitialListener.onInterstitialLoaded();
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedPlayableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedPlayableTest.java
index 2e82772b..1b4708c8 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedPlayableTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedPlayableTest.java
@@ -15,7 +15,6 @@
 
 import java.util.HashMap;
 import java.util.Map;
-import java.util.TreeMap;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -49,10 +48,19 @@ public void onInvalidate_withRewardedMraidActivity_shouldInvalidateRewardedMraid
         verify(mockRewardedMraidInterstitial).onInvalidate();
     }
 
+    @Test
+    public void onInvalidate_withNullRewardedMraidActivity_shouldNotInvalidateRewardedMraidActivity() {
+        subject.setRewardedMraidInterstitial(null);
+
+        subject.onInvalidate();
+
+        verifyZeroInteractions(mockRewardedMraidInterstitial);
+    }
+
     @Test
     public void loadWithSdkInitialized_withCorrectLocalExtras_shouldLoadVastVideoInterstitial() throws Exception {
         subject.setRewardedMraidInterstitial(mockRewardedMraidInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
         final Map<String, String> serverExtras = new HashMap<String, String>();
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, "currencyName");
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, "10");
@@ -70,6 +78,25 @@ public void loadWithSdkInitialized_withCorrectLocalExtras_shouldLoadVastVideoInt
         assertThat(subject.getRewardedAdCurrencyAmount()).isEqualTo(10);
     }
 
+    @Test
+    public void loadWithSdkInitialized_withAdUnitId_shouldSetAdNetworkId() throws Exception {
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
+        localExtras.put(DataKeys.AD_UNIT_ID_KEY, "adUnit");
+
+        subject.loadWithSdkInitialized(activity, localExtras, new HashMap<String, String>());
+
+        assertThat(subject.getAdNetworkId()).isEqualTo("adUnit");
+    }
+
+    @Test
+    public void loadWithSdkInitialized_withNoAdUnitId_shouldUseDefaultAdNetworkId() throws Exception {
+        subject.loadWithSdkInitialized(activity, new HashMap<String, Object>(),
+                new HashMap<String, String>());
+
+        assertThat(subject.getAdNetworkId()).isEqualTo(
+                MoPubRewardedPlayable.MOPUB_REWARDED_PLAYABLE_ID);
+    }
+
     @Test
     public void show_withMraidLoaded_shouldShowRewardedMraidInterstitial() {
         subject.setRewardedMraidInterstitial(mockRewardedMraidInterstitial);
@@ -82,7 +109,7 @@ public void show_withMraidLoaded_shouldShowRewardedMraidInterstitial() {
     }
 
     @Test
-    public void showVideo_withVideoNotLoaded_shouldDoNothing() {
+    public void show_withVideoNotLoaded_shouldDoNothing() {
         subject.setRewardedMraidInterstitial(mockRewardedMraidInterstitial);
         subject.setIsLoaded(false);
 
@@ -90,4 +117,17 @@ public void showVideo_withVideoNotLoaded_shouldDoNothing() {
 
         verifyZeroInteractions(mockRewardedMraidInterstitial);
     }
+
+    @Test
+    public void show_whenInvalidated_shouldDoNothing() {
+        subject.setRewardedMraidInterstitial(mockRewardedMraidInterstitial);
+        subject.setIsLoaded(true);
+        subject.onInvalidate();
+
+        subject.show();
+
+        verify(mockRewardedMraidInterstitial).onInvalidate();
+        verifyNoMoreInteractions(mockRewardedMraidInterstitial);
+        assertThat(subject.getRewardedMraidInterstitial()).isNull();
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
index a379840c..a0f28b9a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -1,6 +1,7 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
+import android.content.SharedPreferences;
 import android.net.Uri;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -9,6 +10,7 @@
 import com.mopub.common.DataKeys;
 import com.mopub.common.LifecycleListener;
 import com.mopub.common.MoPubReward;
+import com.mopub.common.SharedPreferencesHelper;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.network.AdRequest;
 import com.mopub.network.AdResponse;
@@ -28,12 +30,18 @@
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowLog;
 import org.robolectric.shadows.ShadowLooper;
 
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.fest.assertions.api.Assertions.fail;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.argThat;
@@ -64,6 +72,8 @@
                     "    { \"name\": \"Energy\", \"amount\": 20 }\n" +
                     "  ]\n" +
                     "}\n";
+    public static final String TEST_CUSTOM_EVENT_PREF_NAME = "mopubTestCustomEventSettings";
+    private static final String CUSTOM_DATA_MAX_LENGTH_EXCEEDED_MESSAGE = "provided rewarded ad custom data parameter longer than supported";
 
     @Mock
     MoPubRequestQueue mockRequestQueue;
@@ -74,6 +84,7 @@
     private AdRequest request;
     private RewardedVideoCompletionRequest rewardedVideoCompletionRequest;
     private Activity mActivity;
+    private SharedPreferences mTestCustomEventSharedPrefs;
 
     @Before
     public void setup() {
@@ -81,6 +92,10 @@ public void setup() {
         MoPubRewardedVideoManager.init(mActivity);
         MoPubRewardedVideoManager.setVideoListener(mockVideoListener);
 
+        mTestCustomEventSharedPrefs = SharedPreferencesHelper.getSharedPreferences(
+                        mActivity, TEST_CUSTOM_EVENT_PREF_NAME);
+        MoPubRewardedVideoManager.setCustomEventSharedPrefs(mTestCustomEventSharedPrefs);
+
         when(mockRequestQueue.add(any(Request.class))).then(new Answer<Object>() {
             @Override
             public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
@@ -109,6 +124,106 @@ public void tearDown() {
         ShadowLooper.unPauseMainLooper();
         MoPubRewardedVideoManager.getRewardedAdData().clear();
         MoPubRewardedVideoManager.getAdRequestStatusMapping().clearMapping();
+        mTestCustomEventSharedPrefs.edit().clear().commit();
+    }
+
+    @Test
+    public void initNetworks_withEmptySharedPrefs_shouldNotInitAnyNetworks() {
+        List<Class<? extends CustomEventRewardedVideo>> networksToInit =
+                Arrays.asList(
+                        CustomEventRewardedVideo.class,
+                        TestCustomEvent.class,
+                        NoVideoCustomEvent.class
+                );
+
+        List<CustomEventRewardedVideo> initializedNetworksList =
+                MoPubRewardedVideoManager.initNetworks(mActivity, networksToInit);
+
+        // Verify that no networks got initialized.
+        assertThat(initializedNetworksList.size()).isEqualTo(0);
+    }
+
+    @Test
+    public void initNetworks_shouldOnlyInitNetworksWithSettingsSavedInSharedPrefs() {
+        // Only TestCustomEvent has settings saved in SharedPrefs.
+        mTestCustomEventSharedPrefs.edit().putString(
+                TestCustomEvent.class.getName(),
+                "{\"k1\":\"v1\",\"k2\":\"v2\"}").commit();
+
+        List<Class<? extends CustomEventRewardedVideo>> networksToInit =
+                Arrays.asList(
+                        CustomEventRewardedVideo.class,
+                        TestCustomEvent.class,
+                        NoVideoCustomEvent.class
+                );
+
+        List<CustomEventRewardedVideo> networksInitialized =
+                MoPubRewardedVideoManager.initNetworks(mActivity, networksToInit);
+
+        // Verify that only TestCustomEvent got initialized.
+        assertThat(networksInitialized.size()).isEqualTo(1);
+        assertThat(networksInitialized.get(0).getClass().getName())
+                .isEqualTo(TestCustomEvent.class.getName());
+    }
+
+    @Test
+    public void initNetworks_withDuplicatedNetworks_shouldOnlyInitDedupedNetworks() {
+        // Only TestCustomEvent has settings saved in SharedPrefs.
+        mTestCustomEventSharedPrefs.edit().putString(
+                TestCustomEvent.class.getName(),
+                "{\"k1\":\"v1\",\"k2\":\"v2\"}").commit();
+
+        // All networks are duplicated.
+        List<Class<? extends CustomEventRewardedVideo>> networksToInit =
+                Arrays.asList(
+                        CustomEventRewardedVideo.class,
+                        TestCustomEvent.class,
+                        NoVideoCustomEvent.class,
+                        TestCustomEvent.class,
+                        NoVideoCustomEvent.class,
+                        CustomEventRewardedVideo.class
+                );
+
+        List<CustomEventRewardedVideo> networksInitialized =
+                MoPubRewardedVideoManager.initNetworks(mActivity, networksToInit);
+
+        // Verify that only TestCustomEvent got initialized, and only once.
+        assertThat(networksInitialized.size()).isEqualTo(1);
+        assertThat(networksInitialized.get(0).getClass().getName())
+                .isEqualTo(TestCustomEvent.class.getName());
+    }
+
+    @Test
+    public void initNetworks_shouldObeyOrderDuringInit() {
+        // Both TestCustomEvent and NoVideoCustomEvent have settings saved in SharedPrefs.
+        mTestCustomEventSharedPrefs.edit().putString(
+                TestCustomEvent.class.getName(),
+                "{\"k1\":\"v1\",\"k2\":\"v2\"}").commit();
+        mTestCustomEventSharedPrefs.edit().putString(
+                NoVideoCustomEvent.class.getName(),
+                "{\"k3\":\"v3\",\"k4\":\"v4\"}").commit();
+
+        // All networks are duplicated.
+        List<Class<? extends CustomEventRewardedVideo>> networksToInit =
+                Arrays.asList(
+                        NoVideoCustomEvent.class,
+                        TestCustomEvent.class,
+                        CustomEventRewardedVideo.class,
+                        TestCustomEvent.class,
+                        CustomEventRewardedVideo.class,
+                        NoVideoCustomEvent.class
+                );
+
+        List<CustomEventRewardedVideo> networksInitialized =
+                MoPubRewardedVideoManager.initNetworks(mActivity, networksToInit);
+
+        // Verify that only NoVideoCustomEvent and TestCustomEvent got initialized,
+        // in that order, and each only once.
+        assertThat(networksInitialized.size()).isEqualTo(2);
+        assertThat(networksInitialized.get(0).getClass().getName())
+                .isEqualTo(NoVideoCustomEvent.class.getName());
+        assertThat(networksInitialized.get(1).getClass().getName())
+                .isEqualTo(TestCustomEvent.class.getName());
     }
 
     @Test
@@ -173,6 +288,50 @@ public void loadVideo_withDifferentVideoAlreadyShowing_shouldLoadVideo() {
         verify(mockRequestQueue).add(any(AdRequest.class));
     }
 
+    @Test
+    public void loadVideo_withCustomEventAlreadyLoaded_shouldNotLoadAnotherVideo() throws Exception {
+        final CustomEventRewardedVideo mockCustomEvent = mock(CustomEventRewardedVideo.class);
+        MoPubRewardedVideoManager.getRewardedAdData().updateAdUnitCustomEventMapping(
+                "testAdUnit", mockCustomEvent, TestCustomEvent.AD_NETWORK_ID);
+
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        // Load the first custom event
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        // Verify the first custom event
+        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
+        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
+        verifyNoMoreInteractions(mockVideoListener);
+        verify(mockRequestQueue).add(any(Request.class));
+        reset(mockVideoListener);
+
+        ShadowLooper.pauseMainLooper();
+
+        // Load the second custom event
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+
+        ShadowLooper.unPauseMainLooper();
+
+        // Verify the first custom event is still available
+        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
+        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
+        verifyNoMoreInteractions(mockVideoListener);
+        // Make sure the second load does not attempt to load another ad
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
     @Test
     public void callbackMethods_withNullListener_shouldNotError() {
         // Clients can set RVM null.
@@ -439,47 +598,124 @@ public void onAdSuccess_withMalformedRewardedCurrenciesJsonHeader_shouldNotUpdat
     }
 
     @Test
-    public void loadVideo_withCustomEventAlreadyLoaded_shouldNotLoadAnotherVideo() throws Exception {
-        final CustomEventRewardedVideo mockCustomEvent = mock(CustomEventRewardedVideo.class);
-        MoPubRewardedVideoManager.getRewardedAdData().updateAdUnitCustomEventMapping(
-                "testAdUnit", mockCustomEvent, TestCustomEvent.AD_NETWORK_ID);
+    public void onAdSuccess_withEmptyServerExtras_shouldStillSaveEmptyMapInSharedPrefs() {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        Map<String, ?> networkInitSettings = mTestCustomEventSharedPrefs.getAll();
+        String testCustomEventClassName = TestCustomEvent.class.getName();
+
+        // Verify that TestCustomEvent has an empty map saved in SharedPrefs.
+        assertThat(networkInitSettings.size()).isEqualTo(1);
+        assertThat(networkInitSettings.containsKey(testCustomEventClassName)).isTrue();
+        assertThat(networkInitSettings.get(testCustomEventClassName)).isEqualTo("{}");
+    }
+
+    @Test
+    public void onAdSuccess_withServerExtras_shouldSaveInitParamsInSharedPrefs() {
+        Map<String, String> serverExtras = new HashMap<>();
+        serverExtras.put("k1", "v1");
+        serverExtras.put("k2", "v2");
 
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName(
                         "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
                 .setAdType(AdType.CUSTOM)
+                .setServerExtras(serverExtras)
                 .build();
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        // Load the first custom event
         MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
         requestListener.onSuccess(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
-        // Verify the first custom event
-        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
-        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
-        verifyNoMoreInteractions(mockVideoListener);
-        verify(mockRequestQueue).add(any(Request.class));
-        reset(mockVideoListener);
+        Map<String, ?> networkInitSettings = mTestCustomEventSharedPrefs.getAll();
+        String testCustomEventClassName = TestCustomEvent.class.getName();
+
+        // Verify that TestCustomEvent has init params saved in SharedPrefs.
+        assertThat(networkInitSettings.size()).isEqualTo(1);
+        assertThat(networkInitSettings.containsKey(testCustomEventClassName)).isTrue();
+        assertThat(networkInitSettings.get(testCustomEventClassName))
+                .isEqualTo("{\"k1\":\"v1\",\"k2\":\"v2\"}");
+    }
+
+    @Test
+    public void onAdSuccess_withNewInitParams_shouldUpdateInitParamsInSharedPrefs() {
+        // Put in {"k1":"v1","k2":"v2"} as existing init params.
+        mTestCustomEventSharedPrefs.edit().putString(
+                TestCustomEvent.class.getName(),
+                "{\"k1\":\"v1\",\"k2\":\"v2\"}").commit();
+
+        // New init params are {"k3":"v3"}.
+        Map<String, String> serverExtras = new HashMap<>();
+        serverExtras.put("k3", "v3");
+
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .setServerExtras(serverExtras)
+                .build();
 
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        // Load the second custom event
         MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
-        // Verify the first custom event is still available
-        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
-        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
-        verifyNoMoreInteractions(mockVideoListener);
-        // Make sure the second load does not attempt to load another ad
-        verifyNoMoreInteractions(mockRequestQueue);
+        Map<String, ?> networkInitSettings = mTestCustomEventSharedPrefs.getAll();
+        String testCustomEventClassName = TestCustomEvent.class.getName();
+
+        // Verify that TestCustomEvent has new init params saved in SharedPrefs.
+        assertThat(networkInitSettings.size()).isEqualTo(1);
+        assertThat(networkInitSettings.containsKey(testCustomEventClassName)).isTrue();
+        assertThat(networkInitSettings.get(testCustomEventClassName)).isEqualTo("{\"k3\":\"v3\"}");
+    }
+
+    @Test
+    public void onAdSuccess_witNonCustomEventRewardedVideo_shouldNotSaveAnythingInSharedPrefs() {
+        Map<String, String> serverExtras = new HashMap<>();
+        serverExtras.put("k1", "v1");
+        serverExtras.put("k2", "v2");
+
+        // MoPubRewardedVideo does not extend from CustomEventRewardedVideo
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideo")
+                .setAdType(AdType.CUSTOM)
+                .setServerExtras(serverExtras)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        // Verify that nothing got saved in SharedPrefs.
+        assertThat(mTestCustomEventSharedPrefs.getAll().size()).isEqualTo(0);
     }
 
     @Test
@@ -552,7 +788,7 @@ public void onAdSuccess_shouldUpdateAdUnitRewardMapping() throws Exception {
     }
     
     @Test
-    public void playVideo_shouldSetHasVideoFalse() {
+    public void showVideo_shouldSetHasVideoFalse() {
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
                 .setAdType(AdType.CUSTOM)
@@ -575,7 +811,7 @@ public void playVideo_shouldSetHasVideoFalse() {
     }
     
     @Test
-    public void playVideo_whenNotHasVideo_shouldFail() {
+    public void showVideo_whenNotHasVideo_shouldFail() {
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$NoVideoCustomEvent")
                 .setAdType(AdType.CUSTOM)
@@ -598,7 +834,7 @@ public void playVideo_whenNotHasVideo_shouldFail() {
     }
 
     @Test
-    public void playVideo_withMultiRewardedCurrenciesJsonHeader_whenRewardNotSelected_shouldFail() {
+    public void showVideo_withMultiRewardedCurrenciesJsonHeader_whenRewardNotSelected_shouldFail() {
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
                 .setAdType(AdType.CUSTOM)
@@ -620,7 +856,7 @@ public void playVideo_withMultiRewardedCurrenciesJsonHeader_whenRewardNotSelecte
     }
 
     @Test
-    public void playVideo_withMultiRewardedCurrenciesJsonHeader_whenValidRewardIsSelected_shouldUpdateRewardMappings() {
+    public void showVideo_withMultiRewardedCurrenciesJsonHeader_whenValidRewardIsSelected_shouldUpdateRewardMappings() {
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
                 .setAdType(AdType.CUSTOM)
@@ -662,7 +898,7 @@ public void playVideo_withMultiRewardedCurrenciesJsonHeader_whenValidRewardIsSel
     }
 
     @Test
-    public void playVideo_withMultiRewardedCurrenciesJsonHeader_whenSelectRewardWithWrongAdUnit_shouldFail() {
+    public void showVideo_withMultiRewardedCurrenciesJsonHeader_whenSelectRewardWithWrongAdUnit_shouldFail() {
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
                 .setAdType(AdType.CUSTOM)
@@ -697,7 +933,7 @@ public void playVideo_withMultiRewardedCurrenciesJsonHeader_whenSelectRewardWith
     }
 
     @Test
-    public void playVideo_withMultiRewardedCurrenciesJsonHeader_whenSelectedRewardIsNotAvailable_shouldFail() {
+    public void showVideo_withMultiRewardedCurrenciesJsonHeader_whenSelectedRewardIsNotAvailable_shouldFail() {
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
                 .setAdType(AdType.CUSTOM)
@@ -727,7 +963,7 @@ public void playVideo_withMultiRewardedCurrenciesJsonHeader_whenSelectedRewardIs
     }
 
     @Test
-    public void playVideo_withSingleRewardedCurrencyJsonHeader_whenRewardNotSelected_shouldSelectOnlyRewardAutomatically() {
+    public void showVideo_withSingleRewardedCurrencyJsonHeader_whenRewardNotSelected_shouldSelectOnlyRewardAutomatically() {
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
                 .setAdType(AdType.CUSTOM)
@@ -761,7 +997,7 @@ public void playVideo_withSingleRewardedCurrencyJsonHeader_whenRewardNotSelected
     }
 
     @Test
-    public void playVideo_withLegacyRewardedCurrencyHeaders_shouldUpdateLastShownCustomEventRewardMapping() throws Exception {
+    public void showVideo_withLegacyRewardedCurrencyHeaders_shouldUpdateLastShownCustomEventRewardMapping() throws Exception {
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName(
                         "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
@@ -787,6 +1023,61 @@ public void playVideo_withLegacyRewardedCurrencyHeaders_shouldUpdateLastShownCus
         assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
     }
 
+    @Test
+    public void showVideo_withCustomDataShorterThanLengthMaximum_shouldNotLogWarning() {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        MoPubRewardedVideoManager.showVideo("testAdUnit",
+                createStringWithLength(MoPubRewardedVideoManager.CUSTOM_DATA_MAX_LENGTH_BYTES - 1));
+
+        for (final ShadowLog.LogItem logItem : ShadowLog.getLogs()) {
+            if (logItem.msg.toLowerCase().contains(CUSTOM_DATA_MAX_LENGTH_EXCEEDED_MESSAGE)) {
+                fail(String.format(Locale.US, "Log item '%s' not expected, found.", CUSTOM_DATA_MAX_LENGTH_EXCEEDED_MESSAGE));
+            }
+        }
+    }
+
+    @Test
+    public void showVideo_withCustomDataGreaterThanLengthMaximum_shouldLogWarning() {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        MoPubRewardedVideoManager.showVideo("testAdUnit",
+                createStringWithLength(MoPubRewardedVideoManager.CUSTOM_DATA_MAX_LENGTH_BYTES  + 1));
+
+        for (final ShadowLog.LogItem logItem : ShadowLog.getLogs()) {
+            if (logItem.msg.toLowerCase().contains(CUSTOM_DATA_MAX_LENGTH_EXCEEDED_MESSAGE)) {
+                // Test passes the first time we see the warning log message
+                return;
+            }
+        }
+        fail(String.format(Locale.US, "Expected log item '%s' not found.",
+                CUSTOM_DATA_MAX_LENGTH_EXCEEDED_MESSAGE));
+    }
+
     @Test
     public void onAdFailure_shouldCallFailCallback() {
         VolleyError e = new VolleyError("testError!");
@@ -897,6 +1188,69 @@ public void onRewardedVideoCompleted_withServerCompletionUrl_shouldMakeRewardedV
         assertThat(rewardedIdsCaptor.getValue()).containsOnly("testAdUnit1");
     }
 
+    @Test
+    public void onRewardedVideoCompleted_shouldMakeRewardedVideoCompletionRequestIncludingClassName() {
+        MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
+        RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
+        rewardedVideoData.setCurrentlyShowingAdUnitId("testAdUnit1");
+
+        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit1", new TestCustomEvent(),
+                TestCustomEvent.AD_NETWORK_ID);
+        rewardedVideoData.updateAdUnitToServerCompletionUrlMapping("testAdUnit1", "testUrl");
+
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.onRewardedVideoCompleted(TestCustomEvent.class,
+                TestCustomEvent.AD_NETWORK_ID, moPubReward);
+
+        ShadowLooper.unPauseMainLooper();
+
+        verify(mockRequestQueue).add(any(RewardedVideoCompletionRequest.class));
+        assertThat(rewardedVideoCompletionRequest.getUrl()).contains(
+                "cec=com.mopub.mobileads.MoPubRewardedVideoManagerTest%24TestCustomEvent");
+    }
+
+    @Test
+    public void onRewardedVideoCompleted_withCustomData_shouldMakeRewardedVideoCompletionRequestIncludingCustomData() {
+        MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
+        RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
+        rewardedVideoData.setCurrentlyShowingAdUnitId("testAdUnit1");
+
+        rewardedVideoData.updateAdUnitToServerCompletionUrlMapping("testAdUnit1", "testUrl");
+        rewardedVideoData.updateAdUnitToCustomDataMapping("testAdUnit1", "very%=custom@[data]");
+
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.onRewardedVideoCompleted(TestCustomEvent.class,
+                TestCustomEvent.AD_NETWORK_ID, moPubReward);
+
+        ShadowLooper.unPauseMainLooper();
+
+        verify(mockRequestQueue).add(any(RewardedVideoCompletionRequest.class));
+        assertThat(rewardedVideoCompletionRequest.getUrl()).contains(
+                "&rcd=very%25%3Dcustom%40%5Bdata%5D");
+    }
+
+    @Test
+    public void onRewardedVideoCompleted_withNullCustomData_shouldMakeRewardedVideoCompletionRequestWithoutCustomData() {
+        MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
+        RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
+        rewardedVideoData.setCurrentlyShowingAdUnitId("testAdUnit1");
+
+        rewardedVideoData.updateAdUnitToServerCompletionUrlMapping("testAdUnit1", "testUrl");
+        rewardedVideoData.updateAdUnitToCustomDataMapping("testAdUnit1", null);
+
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.onRewardedVideoCompleted(TestCustomEvent.class,
+                TestCustomEvent.AD_NETWORK_ID, moPubReward);
+
+        ShadowLooper.unPauseMainLooper();
+
+        verify(mockRequestQueue).add(any(RewardedVideoCompletionRequest.class));
+        assertThat(rewardedVideoCompletionRequest.getUrl()).doesNotContain("&rcd=");
+    }
+
     @Test
     public void onRewardedVideoCompleted_withServerCompletionUrl_withNullRewardForCurrentlyShowingAdUnitId_shouldMakeRewardedVideoCompletionRequestWithDefaultRewardValues() {
         MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
@@ -941,6 +1295,16 @@ public void onRewardedVideoLoadFailure_withExpirationErrorCode_shouldCallFailCal
         verifyNoMoreInteractions(mockRequestQueue);
     }
 
+    private String createStringWithLength(int length) {
+        if (length < 1) {
+            return "";
+        }
+
+        char[] chars = new char[length];
+        Arrays.fill(chars, '*');
+        return new String(chars);
+    }
+
     public static class TestCustomEvent extends CustomEventRewardedVideo {
         public static final String AD_NETWORK_ID = "id!";
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
index 7bfbf0a2..bfeb5d34 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
@@ -15,7 +15,6 @@
 
 import java.util.HashMap;
 import java.util.Map;
-import java.util.TreeMap;
 
 import static com.mopub.common.Constants.FOUR_HOURS_MILLIS;
 import static com.mopub.mobileads.MoPubErrorCode.EXPIRED;
@@ -57,6 +56,8 @@ public void onInvalidate_withVastVideoInterstitial_shouldInvalidateVastVideoInte
 
     @Test
     public void onInvalidate_withNullVastVideoInterstitial_shouldNotInvalidateVastVideoInterstitial() {
+        subject.setRewardedVastVideoInterstitial(null);
+
         subject.onInvalidate();
 
         verifyZeroInteractions(mockRewardedVastVideoInterstitial);
@@ -65,12 +66,12 @@ public void onInvalidate_withNullVastVideoInterstitial_shouldNotInvalidateVastVi
     @Test
     public void loadWithSdkInitialized_withLocalExtrasIncomplete_shouldLoadVastVideoInterstitial() throws Exception {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        subject.loadWithSdkInitialized(activity, new TreeMap<String, Object>(),
+        subject.loadWithSdkInitialized(activity, new HashMap<String, Object>(),
                 new HashMap<String, String>());
 
         verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity), any(
                         CustomEventInterstitial.CustomEventInterstitialListener.class),
-                eq(new TreeMap<String, Object>()),
+                eq(new HashMap<String, Object>()),
                 eq(new HashMap<String, String>()));
         verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
         assertThat(subject.getRewardedAdCurrencyName()).isEqualTo("");
@@ -80,7 +81,7 @@ public void loadWithSdkInitialized_withLocalExtrasIncomplete_shouldLoadVastVideo
     @Test
     public void loadWithSdkInitialized_withRewardedVideoCurrencyNameIncorrectType_shouldLoadVastVideoInterstitial_shouldSetCurrencyNameToEmptyString() throws Exception {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, new Object());
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, "10");
 
@@ -98,7 +99,7 @@ public void loadWithSdkInitialized_withRewardedVideoCurrencyNameIncorrectType_sh
     @Test
     public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountIncorrectType_shouldLoadVastVideoInterstitial_shouldSetCurrencyAmountToZero() throws Exception {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, "currencyName");
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, new Object());
 
@@ -116,7 +117,7 @@ public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountIncorrectType_
     @Test
     public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountNotInteger_shouldLoadVastVideoInterstitial_shouldSetCurrencyAmountToZero() throws Exception {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, "currencyName");
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, "foo");
 
@@ -134,7 +135,7 @@ public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountNotInteger_sho
     @Test
     public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountNegative_shouldLoadVastVideoInterstitial_shouldSetCurrencyAmountToZero() throws Exception {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, "currencyName");
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, "-42");
 
@@ -152,7 +153,7 @@ public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountNegative_shoul
     @Test
     public void loadWithSdkInitialized_withCorrectLocalExtras_shouldLoadVastVideoInterstitial() throws Exception {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
         final Map<String, String> serverExtras = new HashMap<String, String>();
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, "currencyName");
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, "10");
@@ -172,7 +173,7 @@ public void loadWithSdkInitialized_withEmptyCurrencyName_withNegativeCurrencyAmo
         // We pass whatever was sent to this custom event to the app as long as it exists, but
         // if the currency value is negative, set it to 0
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
         final Map<String, String> serverExtras = new HashMap<String, String>();
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, "");
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, "-10");
@@ -188,7 +189,25 @@ public void loadWithSdkInitialized_withEmptyCurrencyName_withNegativeCurrencyAmo
     }
 
     @Test
-    public void showVideo_withVideoLoaded_shouldShowVastVideoInterstitial() {
+    public void loadWithSdkInitialized_withAdUnitId_shouldSetAdNetworkId() throws Exception {
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
+        localExtras.put(DataKeys.AD_UNIT_ID_KEY, "adUnit");
+
+        subject.loadWithSdkInitialized(activity, localExtras, new HashMap<String, String>());
+
+        assertThat(subject.getAdNetworkId()).isEqualTo("adUnit");
+    }
+
+    @Test
+    public void loadWithSdkInitialized_withNoAdUnitId_shouldUseDefaultAdNetworkId() throws Exception {
+        subject.loadWithSdkInitialized(activity, new HashMap<String, Object>(),
+                new HashMap<String, String>());
+
+        assertThat(subject.getAdNetworkId()).isEqualTo(MoPubRewardedVideo.MOPUB_REWARDED_VIDEO_ID);
+    }
+
+    @Test
+    public void show_withVideoLoaded_shouldShowVastVideoInterstitial() {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
         subject.setIsLoaded(true);
 
@@ -199,7 +218,7 @@ public void showVideo_withVideoLoaded_shouldShowVastVideoInterstitial() {
     }
 
     @Test
-    public void showVideo_withVideoNotLoaded_shouldDoNothing() {
+    public void show_withVideoNotLoaded_shouldDoNothing() {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
         subject.setIsLoaded(false);
 
@@ -208,6 +227,19 @@ public void showVideo_withVideoNotLoaded_shouldDoNothing() {
         verifyZeroInteractions(mockRewardedVastVideoInterstitial);
     }
 
+    @Test
+    public void show_whenInvalidated_shouldDoNothing() {
+        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
+        subject.setIsLoaded(true);
+        subject.onInvalidate();
+
+        subject.show();
+
+        verify(mockRewardedVastVideoInterstitial).onInvalidate();
+        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
+        assertThat(subject.getRewardedVastVideoInterstitial()).isNull();
+    }
+
     @Test
     public void moPubRewardedAdListener_onInterstitialLoaded_withMoPubRewardedVideo_shouldPostExpirationRunnable() {
         listener = subject.createListener(MoPubRewardedVideo.class);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
index 58aba1f1..71e4b64f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
@@ -11,7 +11,6 @@
 import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
 import com.mopub.mobileads.test.support.TestCustomEventBannerAdapterFactory;
 
-import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -48,11 +47,6 @@ public void setup() {
         adViewController = TestAdViewControllerFactory.getSingletonMock();
     }
 
-    @After
-    public void tearDown() {
-        ShadowReflection.reset();
-    }
-
     @Test
     public void screenStateBroadcastReceiver_withActionUserPresent_shouldUnpauseRefresh() throws Exception {
         broadcastIntent(new Intent(Intent.ACTION_USER_PRESENT));
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
index cbd4547f..a12135a7 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
@@ -42,6 +42,7 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 
 @RunWith(SdkTestRunner.class)
@@ -56,6 +57,7 @@
     @Mock CustomEventInterstitial.CustomEventInterstitialListener
             customEventInterstitialListener;
     @Mock BroadcastReceiver broadcastReceiver;
+    @Mock ResponseBodyInterstitial mraidInterstitial;
 
     Context context;
 
@@ -69,25 +71,29 @@
     @Before
     public void setUp() throws Exception {
         context = Robolectric.buildActivity(Activity.class).create().get();
+        when(mockMraidWebView.getContext()).thenReturn(context);
     }
 
     @Test
     public void preRenderHtml_shouldEnableJavascriptCachingForDummyWebView() {
-        MraidActivity.preRenderHtml(customEventInterstitialListener, HTML_DATA, mockMraidWebView);
+        MraidActivity.preRenderHtml(mraidInterstitial, customEventInterstitialListener, HTML_DATA,
+                mockMraidWebView, testBroadcastIdentifier);
 
         verify(mockMraidWebView).enableJavascriptCaching();
     }
 
     @Test
     public void preRenderHtml_shouldDisablePluginsForDummyWebView() {
-        MraidActivity.preRenderHtml(customEventInterstitialListener, HTML_DATA, mockMraidWebView);
+        MraidActivity.preRenderHtml(mraidInterstitial, customEventInterstitialListener, HTML_DATA,
+                mockMraidWebView, testBroadcastIdentifier);
 
         verify(mockMraidWebView).enablePlugins(false);
     }
 
     @Test
     public void preRenderHtml_shouldLoadHtml() {
-        MraidActivity.preRenderHtml(customEventInterstitialListener, HTML_DATA, mockMraidWebView);
+        MraidActivity.preRenderHtml(mraidInterstitial, customEventInterstitialListener, HTML_DATA,
+                mockMraidWebView, testBroadcastIdentifier);
 
         verify(mockMraidWebView).loadDataWithBaseURL(
                 "http://ads.mopub.com/",
@@ -101,7 +107,8 @@ public void preRenderHtml_shouldLoadHtml() {
     @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_shouldSetWebViewClient() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "3:27");
+        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener,
+                "3:27", testBroadcastIdentifier);
 
         verify(mockMraidWebView).enablePlugins(eq(false));
         verify(mraidController).setMraidListener(any(MraidListener.class));
@@ -112,7 +119,8 @@ public void preRenderHtml_shouldSetWebViewClient() throws Exception {
     @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_whenMraidListenerOnReady() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
+        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener, "",
+                testBroadcastIdentifier);
 
         ArgumentCaptor<MraidListener> mraidListenerArgumentCaptorr = ArgumentCaptor.forClass(MraidListener.class);
         verify(mraidController).setMraidListener(mraidListenerArgumentCaptorr.capture());
@@ -126,7 +134,8 @@ public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_
     @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialFailed_whenMraidListenerOnFailure() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
+        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener, "",
+                testBroadcastIdentifier);
 
         ArgumentCaptor<MraidListener> mraidListenerArgumentCaptorr = ArgumentCaptor.forClass(MraidListener.class);
         verify(mraidController).setMraidListener(mraidListenerArgumentCaptorr.capture());
@@ -140,13 +149,14 @@ public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialFailed_
     @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_whenWebViewClientShouldOverrideUrlLoading_shouldReturnTrue() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
+        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener, "",
+                testBroadcastIdentifier);
 
         ArgumentCaptor<WebViewClient> webViewClientArgumentCaptor = ArgumentCaptor.forClass(WebViewClient.class);
         verify(mockMraidWebView).setWebViewClient(webViewClientArgumentCaptor.capture());
         WebViewClient webViewClient = webViewClientArgumentCaptor.getValue();
 
-        boolean consumeUrlLoading = webViewClient.shouldOverrideUrlLoading(null, null);
+        boolean consumeUrlLoading = webViewClient.shouldOverrideUrlLoading(null, (String) null);
 
         assertThat(consumeUrlLoading).isTrue();
         verify(customEventInterstitialListener, never()).onInterstitialLoaded();
@@ -157,7 +167,8 @@ public void preRenderHtml_whenWebViewClientShouldOverrideUrlLoading_shouldReturn
     @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_whenWebViewClientOnPageFinished() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
+        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener, "",
+                testBroadcastIdentifier);
 
         ArgumentCaptor<WebViewClient> webViewClientArgumentCaptor = ArgumentCaptor.forClass(WebViewClient.class);
         verify(mockMraidWebView).setWebViewClient(webViewClientArgumentCaptor.capture());
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdDataTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdDataTest.java
index 2fb332c2..e7e5e862 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdDataTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdDataTest.java
@@ -202,4 +202,24 @@ public void resetAvailableRewards_shouldClearAvailableRewardsMap() {
     public void resetAvailableRewards_withNullAdUnitId_shouldThrowNPE() throws Exception {
         subject.resetAvailableRewards(null);
     }
+
+    @Test
+    public void resetSelectedReward_shouldClearRewardPreviouslySelectedForAdUnit() {
+        subject.addAvailableReward("mopub_id", "currency1", "123");
+        MoPubReward reward = subject.getAvailableRewards("mopub_id").toArray(new MoPubReward[1])[0];
+        subject.selectReward("mopub_id", reward);
+
+        MoPubReward selectedReward = subject.getMoPubReward("mopub_id");
+        assertThat(selectedReward.getLabel()).isEqualTo("currency1");
+        assertThat(selectedReward.getAmount()).isEqualTo(123);
+
+        // Reset reward previously selected for AdUnit "mopub_id"
+        subject.resetSelectedReward("mopub_id");
+        assertThat(subject.getMoPubReward("mopub_id")).isNull();
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void resetSelectedReward_withNullAdUnitId_shouldThrowNPE() throws Exception {
+        subject.resetSelectedReward(null);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java
index ae2873c5..43b3fadb 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java
@@ -38,6 +38,8 @@
     private String customerId;
     private String rewardName;
     private String rewardAmount;
+    private String className;
+    private String customData;
 
     @Before
     public void setup() {
@@ -46,55 +48,119 @@ public void setup() {
         customerId = "customer id";
         rewardName = "gold coins";
         rewardAmount = "25";
+        className = "com.mopub.mobileads.MoPubRewardedVideo";
+        customData = "custom data";
         Networking.setRequestQueueForTesting(mockRequestQueue);
     }
 
     @Test
     public void makeRewardedVideoCompletionRequest_shouldAddMacros_shouldMakeVideoCompletionRequest() throws Exception {
         RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(context, url,
-                customerId, rewardName, rewardAmount);
+                customerId, rewardName, rewardAmount, className, customData);
 
         verify(mockRequestQueue).add(argThat(isUrl(
                 "testUrl&customer_id=customer%20id&rcn=gold%20coins&rca=25"
                         + "&nv=" + Uri.encode(MoPub.SDK_VERSION)
-                        + "&v=" + MoPubRewardedVideoManager.API_VERSION)));
+                        + "&v=" + MoPubRewardedVideoManager.API_VERSION
+                        + "&cec=com.mopub.mobileads.MoPubRewardedVideo"
+                        + "&rcd=custom%20data"
+                ))
+        );
     }
 
     @Test
     public void makeRewardedVideoCompletionRequest_withNullContext_shouldNotMakeVideoCompletionRequest() throws Exception {
         RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(null, url,
-                customerId, rewardName, rewardAmount);
+                customerId, rewardName, rewardAmount, className, customData);
         verifyZeroInteractions(mockRequestQueue);
     }
 
     @Test
     public void makeRewardedVideoCompletionRequest_withNullUrl_shouldNotMakeVideoCompletionRequest() throws Exception {
         RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(context, null,
-                customerId, rewardName, rewardAmount);
+                customerId, rewardName, rewardAmount, className, customData);
         verifyZeroInteractions(mockRequestQueue);
     }
 
     @Test
     public void makeRewardedVideoCompletionRequest_withEmptyUrl_shouldNotMakeVideoCompletionRequest() throws Exception {
         RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(context, "",
-                customerId, rewardName, rewardAmount);
+                customerId, rewardName, rewardAmount, className, customData);
         verifyZeroInteractions(mockRequestQueue);
     }
 
     @Test
     public void makeRewardedVideoCompletionRequest_withNullRewardName_shouldNotMakeVideoCompletionRequest() throws Exception {
         RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(context, url,
-                customerId, null, rewardAmount);
+                customerId, null, rewardAmount, className, customData);
         verifyZeroInteractions(mockRequestQueue);
     }
 
     @Test
     public void makeRewardedVideoCompletionRequest_withNullRewardAmount_shouldNotMakeVideoCompletionRequest() throws Exception {
         RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(context, url,
-                customerId, rewardName, null);
+                customerId, rewardName, null, className, customData);
         verifyZeroInteractions(mockRequestQueue);
     }
 
+    @Test
+    public void makeRewardedVideoCompletionRequest_withNullCustomEvent_shouldPassEmptyCustomEventQueryParam_shouldMakeVideoCompletionRequest() throws Exception {
+        RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(context, url,
+                customerId, rewardName, rewardAmount, null, customData);
+
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "testUrl&customer_id=customer%20id&rcn=gold%20coins&rca=25"
+                        + "&nv=" + Uri.encode(MoPub.SDK_VERSION)
+                        + "&v=" + MoPubRewardedVideoManager.API_VERSION
+                        + "&cec="
+                        + "&rcd=custom%20data"
+                ))
+        );
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_withAlreadyEncodedCustomData_shouldDoubleEncodeCustomData_shouldMakeVideoCompletionRequest() throws Exception {
+        RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(context, url,
+                customerId, rewardName, rewardAmount, className, Uri.encode(customData));
+
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "testUrl&customer_id=customer%20id&rcn=gold%20coins&rca=25"
+                        + "&nv=" + Uri.encode(MoPub.SDK_VERSION)
+                        + "&v=" + MoPubRewardedVideoManager.API_VERSION
+                        + "&cec=com.mopub.mobileads.MoPubRewardedVideo"
+                        + "&rcd=custom%2520data"
+                ))
+        );
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_withNullCustomData_shouldAddAllOtherMacros_shouldMakeVideoCompletionRequest() throws Exception {
+        RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(context, url,
+                customerId, rewardName, rewardAmount, className, null);
+
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "testUrl&customer_id=customer%20id&rcn=gold%20coins&rca=25"
+                        + "&nv=" + Uri.encode(MoPub.SDK_VERSION)
+                        + "&v=" + MoPubRewardedVideoManager.API_VERSION
+                        + "&cec=com.mopub.mobileads.MoPubRewardedVideo"
+                ))
+        );
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_withEmptyCustomData_shouldAddAllOtherMacros_shouldMakeVideoCompletionRequest() throws Exception {
+        RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(context, url,
+                customerId, rewardName, rewardAmount, className, "");
+
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "testUrl&customer_id=customer%20id&rcn=gold%20coins&rca=25"
+                        + "&nv=" + Uri.encode(MoPub.SDK_VERSION)
+                        + "&v=" + MoPubRewardedVideoManager.API_VERSION
+                        + "&cec=com.mopub.mobileads.MoPubRewardedVideo"
+                ))
+        );
+    }
+
     @Test
     public void getTimeout_shouldReturnCorrectTimeoutBasedOnRetry() {
         final int maxTimeout = RewardedVideoCompletionRequestHandler.RETRY_TIMES[RewardedVideoCompletionRequestHandler.RETRY_TIMES.length - 1];
@@ -123,30 +189,36 @@ public void retryTimes_shouldAllBeGreaterThanRequestTimeoutDelay() {
     @Test
     public void onErrorResponse_shouldSetShouldStopToTrueWhenResponseNot500To599() {
         RewardedVideoCompletionRequestHandler subject =
-                new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName, rewardAmount);
+                new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                        rewardAmount, className, customData);
 
         assertThat(subject.getShouldStop()).isEqualTo(false);
 
         subject.onErrorResponse(new VolleyError(new NetworkResponse(500, null, null, true)));
         assertThat(subject.getShouldStop()).isEqualTo(false);
 
-        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName, rewardAmount);
+        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                rewardAmount, className, customData);
         subject.onErrorResponse(new VolleyError(new NetworkResponse(501, null, null, true)));
         assertThat(subject.getShouldStop()).isEqualTo(false);
 
-        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName, rewardAmount);
+        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                rewardAmount, className, customData);
         subject.onErrorResponse(new VolleyError(new NetworkResponse(599, null, null, true)));
         assertThat(subject.getShouldStop()).isEqualTo(false);
 
-        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName, rewardAmount);
+        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                rewardAmount, className, customData);
         subject.onErrorResponse(new VolleyError(new NetworkResponse(200, null, null, true)));
         assertThat(subject.getShouldStop()).isEqualTo(true);
 
-        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName, rewardAmount);
+        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                rewardAmount, className, customData);
         subject.onErrorResponse(new VolleyError(new NetworkResponse(499, null, null, true)));
         assertThat(subject.getShouldStop()).isEqualTo(true);
 
-        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName, rewardAmount);
+        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                rewardAmount, className, customData);
         subject.onErrorResponse(new VolleyError(new NetworkResponse(600, null, null, true)));
         assertThat(subject.getShouldStop()).isEqualTo(true);
     }
@@ -154,30 +226,36 @@ public void onErrorResponse_shouldSetShouldStopToTrueWhenResponseNot500To599() {
     @Test
     public void onResponse_shouldSetShouldStopToTrueWhenResponseNot500To599() {
         RewardedVideoCompletionRequestHandler subject =
-                new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName, rewardAmount);
+                new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                        rewardAmount, className, customData);
 
         assertThat(subject.getShouldStop()).isEqualTo(false);
 
         subject.onResponse(500);
         assertThat(subject.getShouldStop()).isEqualTo(false);
 
-        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName, rewardAmount);
+        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                rewardAmount, className, customData);
         subject.onResponse(501);
         assertThat(subject.getShouldStop()).isEqualTo(false);
 
-        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName, rewardAmount);
+        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                rewardAmount, className, customData);
         subject.onResponse(599);
         assertThat(subject.getShouldStop()).isEqualTo(false);
 
-        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName, rewardAmount);
+        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                rewardAmount, className, customData);
         subject.onResponse(200);
         assertThat(subject.getShouldStop()).isEqualTo(true);
 
-        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName, rewardAmount);
+        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                rewardAmount, className, customData);
         subject.onResponse(499);
         assertThat(subject.getShouldStop()).isEqualTo(true);
 
-        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName, rewardAmount);
+        subject = new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                rewardAmount, className, customData);
         subject.onResponse(600);
         assertThat(subject.getShouldStop()).isEqualTo(true);
     }
@@ -186,7 +264,8 @@ public void onResponse_shouldSetShouldStopToTrueWhenResponseNot500To599() {
     public void makeRewardedVideoCompletionRequest_shouldRetry() {
         Handler mockHandler = mock(Handler.class);
         RewardedVideoCompletionRequestHandler subject =
-                new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName, rewardAmount, mockHandler);
+                new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                        rewardAmount, className, customData, mockHandler);
 
         subject.makeRewardedVideoCompletionRequest();
 
@@ -199,7 +278,8 @@ public void makeRewardedVideoCompletionRequest_shouldRetry() {
     public void makeRewardedVideoCompletionRequest_shouldNotRetryIfShouldStopIsSetToTrue() {
         Handler mockHandler = mock(Handler.class);
         RewardedVideoCompletionRequestHandler subject =
-                new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName, rewardAmount, mockHandler);
+                new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                        rewardAmount, className, customData, mockHandler);
         // This should set shouldStop to true.
         subject.onResponse(200);
 
@@ -213,7 +293,8 @@ public void makeRewardedVideoCompletionRequest_shouldNotRetryIfShouldStopIsSetTo
     public void makeRewardedVideoCompletionRequest_shouldNotRetryIfMaxRetriesReached() {
         Handler mockHandler = mock(Handler.class);
         RewardedVideoCompletionRequestHandler subject =
-                new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName, rewardAmount, mockHandler);
+                new RewardedVideoCompletionRequestHandler(context, url, customerId, rewardName,
+                        rewardAmount, className, customData, mockHandler);
         subject.setRetryCount(RewardedVideoCompletionRequestHandler.MAX_RETRIES);
 
         subject.makeRewardedVideoCompletionRequest();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java
index 395b2ee6..ab3d313a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java
@@ -39,7 +39,7 @@ public void getVideoViewabilityTracker_shouldReturnVideoViewabilityTracker() thr
         assertThat(tracker).isNotNull();
         assertThat(tracker.getViewablePlaytimeMS()).isEqualTo(2500);
         assertThat(tracker.getPercentViewable()).isEqualTo(50);
-        assertThat(tracker.getTrackingUrl()).isEqualTo("https://ad.server.com/impression/dot.gif");
+        assertThat(tracker.getContent()).isEqualTo("https://ad.server.com/impression/dot.gif");
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
index e935461a..ef132fcd 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
@@ -244,31 +244,31 @@ public void getFractionalTrackers_shouldReturnCorrectValues() {
 
         VastFractionalProgressTracker tracker0 = trackers.get(0);
         assertThat(tracker0.trackingFraction()).isEqualTo(0.13f);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+        assertThat(tracker0.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker1 = trackers.get(1);
         assertThat(tracker1.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
+        assertThat(tracker1.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker2 = trackers.get(2);
         assertThat(tracker2.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker2.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
+        assertThat(tracker2.getContent()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
 
         VastFractionalProgressTracker tracker3 = trackers.get(3);
         assertThat(tracker3.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker3.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
+        assertThat(tracker3.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker4 = trackers.get(4);
         assertThat(tracker4.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker4.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
+        assertThat(tracker4.getContent()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
 
         VastFractionalProgressTracker tracker5 = trackers.get(5);
         assertThat(tracker5.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker5.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
+        assertThat(tracker5.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker6 = trackers.get(6);
         assertThat(tracker6.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker6.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
+        assertThat(tracker6.getContent()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
     }
 
     @Test
@@ -280,19 +280,19 @@ public void getAbsoluteProgressTrackers_shouldReturnCorrectValues() {
 
         VastAbsoluteProgressTracker tracker0 = trackers.get(0);
         assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+        assertThat(tracker0.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
 
         VastAbsoluteProgressTracker tracker1 = trackers.get(1);
         assertThat(tracker1.getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://creativeView/one");
+        assertThat(tracker1.getContent()).isEqualTo("https://creativeView/one");
 
         VastAbsoluteProgressTracker tracker2 = trackers.get(2);
         assertThat(tracker2.getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(tracker2.getTrackingUrl()).isEqualTo("https://creativeView/two");
+        assertThat(tracker2.getContent()).isEqualTo("https://creativeView/two");
 
         VastAbsoluteProgressTracker tracker3 = trackers.get(3);
         assertThat(tracker3.getTrackingMilliseconds()).isEqualTo(3670300);
-        assertThat(tracker3.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;" +
+        assertThat(tracker3.getContent()).isEqualTo("https://ad.doubleclick.net/activity;" +
                 "src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;" +
                 "rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java
index 3a26eed3..eeaace59 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java
@@ -1,12 +1,9 @@
 package com.mopub.mobileads;
 
-import android.annotation.TargetApi;
 import android.graphics.Bitmap;
 import android.media.MediaMetadataRetriever;
-import android.os.Build;
 import android.widget.ImageView;
 
-import com.mopub.TestSdkHelper;
 import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java
index ac31db25..76639db5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java
@@ -351,7 +351,7 @@ public void addVideoTrackers_withInvalidEvent_shouldSkipInvalidEvent() throws Ex
 
         final List<VastAbsoluteProgressTracker> trackers = subject.getAbsoluteTrackers();
         assertThat(trackers.size()).isEqualTo(1);
-        assertThat(trackers.get(0).getTrackingUrl()).isEqualTo("http://mopub.com/start/foo");
+        assertThat(trackers.get(0).getContent()).isEqualTo("http://mopub.com/start/foo");
     }
 
     @Test
@@ -503,18 +503,18 @@ public void handleClickForResult_withAboutBlankClickThroughUrl_shouldFailSilentl
 
     private void assertAbsoluteTracker(final VastAbsoluteProgressTracker actualTracker,
             final String expectedUrl, final int expectedMs) {
-        assertThat(actualTracker.getTrackingUrl()).isEqualTo(expectedUrl);
+        assertThat(actualTracker.getContent()).isEqualTo(expectedUrl);
         assertThat(actualTracker.getTrackingMilliseconds()).isEqualTo(expectedMs);
     }
 
     private void assertFractionalTracker(final VastFractionalProgressTracker actualTracker,
             final String expectedUrl, final float expectedFraction) {
-        assertThat(actualTracker.getTrackingUrl()).isEqualTo(expectedUrl);
+        assertThat(actualTracker.getContent()).isEqualTo(expectedUrl);
         assertThat(actualTracker.trackingFraction()).isEqualTo(expectedFraction);
     }
 
     private void assertTracker(final VastTracker actualTracker, final String expectedUrl) {
-        assertThat(actualTracker.getTrackingUrl()).isEqualTo(expectedUrl);
+        assertThat(actualTracker.getContent()).isEqualTo(expectedUrl);
     }
 
     private void addCompanionAds(VastVideoConfig subject) {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
index 1518e9bf..461d72a4 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
@@ -18,6 +18,7 @@
 import android.widget.ImageView;
 import android.widget.VideoView;
 
+import com.mopub.common.ExternalViewabilitySession;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.DeviceUtils.ForceOrientation;
@@ -873,19 +874,6 @@ public void onTouch_whenCloseButtonNotVisible_shouldNotPingClickThroughTrackers(
         assertThat(FakeHttp.httpRequestWasMade()).isFalse();
     }
 
-    @Test
-    public void onTouch_withNullBaseVideoViewListener_andActionTouchUp_shouldReturnTrueAndNotBlowUp() throws Exception {
-        subject = new VastVideoViewController((Activity) context, bundle, null,
-                testBroadcastIdentifier, null);
-
-        boolean result = getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(
-                0, 0));
-
-        // pass
-
-        assertThat(result).isTrue();
-    }
-
     @Test
     public void onTouch_withActionTouchDown_shouldConsumeMotionEvent() throws Exception {
         initializeSubject();
@@ -1237,6 +1225,7 @@ public void onCompletion_whenAllTrackersTracked_whenNoPlaybackErrors_shouldPingC
 
         initializeSubject();
         testTracker.setTracked();
+        setViewabilityTrackersTracked(vastVideoConfig);
         spyOnVideoView();
         setVideoViewParams(15000, 15000);
 
@@ -2252,4 +2241,17 @@ private void setVideoViewParams(int currentPosition, int duration) throws Illega
     private ShadowVastVideoView getShadowVideoView() {
         return (ShadowVastVideoView) ShadowExtractor.extract(subject.getVastVideoView());
     }
+
+    private void setViewabilityTrackersTracked(VastVideoConfig vastVideoConfig) {
+        for (VastFractionalProgressTracker tracker : vastVideoConfig.getFractionalTrackers()) {
+            final String content = tracker.getContent();
+            try {
+                // Only mark trackers that match with viewability's VideoEvent enum
+                Enum.valueOf(ExternalViewabilitySession.VideoEvent.class, content);
+                tracker.setTracked();
+            } catch (IllegalArgumentException e) {
+                // pass
+            }
+        }
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java
index 877a26c9..30b8ccba 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java
@@ -15,7 +15,6 @@
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
-import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.anyBoolean;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.anyLong;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
index 5b7e6444..c7a9b243 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
@@ -1620,7 +1620,7 @@ public void evaluateVastXmlManager_withVideoViewabilityTrackerInLine_shouldRetur
         VideoViewabilityTracker tracker = vastVideoConfig.getVideoViewabilityTracker();
         assertThat(tracker.getPercentViewable()).isEqualTo(70);
         assertThat(tracker.getViewablePlaytimeMS()).isEqualTo(3500);
-        assertThat(tracker.getTrackingUrl()).isEqualTo("https://ad.server.com/impression/dot.png");
+        assertThat(tracker.getContent()).isEqualTo("https://ad.server.com/impression/dot.png");
     }
 
     @Test
@@ -1632,7 +1632,7 @@ public void evaluateVastXmlManager_withVideoViewabilityTrackerInWrapper_shouldRe
         VideoViewabilityTracker tracker = vastVideoConfig.getVideoViewabilityTracker();
         assertThat(tracker.getPercentViewable()).isEqualTo(50);
         assertThat(tracker.getViewablePlaytimeMS()).isEqualTo(2500);
-        assertThat(tracker.getTrackingUrl()).isEqualTo("https://ad.server.com/impression/dot.gif");
+        assertThat(tracker.getContent()).isEqualTo("https://ad.server.com/impression/dot.gif");
     }
 
     @Test
@@ -1645,7 +1645,7 @@ public void evaluateVastXmlManager_withVideoViewabilityTrackerBothInWrapperAndIn
         VideoViewabilityTracker tracker = vastVideoConfig.getVideoViewabilityTracker();
         assertThat(tracker.getPercentViewable()).isEqualTo(70);
         assertThat(tracker.getViewablePlaytimeMS()).isEqualTo(3500);
-        assertThat(tracker.getTrackingUrl()).isEqualTo("https://ad.server.com/impression/dot.png");
+        assertThat(tracker.getContent()).isEqualTo("https://ad.server.com/impression/dot.png");
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
index 0d935fc6..a2b0f541 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
@@ -603,11 +603,11 @@ public void getAbsoluteProgressTrackers_withLinearXmlManager_shouldReturnCorrect
 
         VastAbsoluteProgressTracker tracker0 = trackers.get(0);
         assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+        assertThat(tracker0.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
 
         VastAbsoluteProgressTracker tracker1 = trackers.get(1);
         assertThat(tracker1.getTrackingMilliseconds()).isEqualTo(3670300);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;" +
+        assertThat(tracker1.getContent()).isEqualTo("https://ad.doubleclick.net/activity;" +
                 "src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;" +
                 "rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
     }
@@ -621,31 +621,31 @@ public void getFractionalTrackers_withLinearXmlManager_shouldReturnCorrectValues
 
         VastFractionalProgressTracker tracker0 = trackers.get(0);
         assertThat(tracker0.trackingFraction()).isEqualTo(0.13f);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+        assertThat(tracker0.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker1 = trackers.get(1);
         assertThat(tracker1.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
+        assertThat(tracker1.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker2 = trackers.get(2);
         assertThat(tracker2.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker2.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
+        assertThat(tracker2.getContent()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
 
         VastFractionalProgressTracker tracker3 = trackers.get(3);
         assertThat(tracker3.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker3.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
+        assertThat(tracker3.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker4 = trackers.get(4);
         assertThat(tracker4.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker4.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
+        assertThat(tracker4.getContent()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
 
         VastFractionalProgressTracker tracker5 = trackers.get(5);
         assertThat(tracker5.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker5.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
+        assertThat(tracker5.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker6 = trackers.get(6);
         assertThat(tracker6.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker6.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
+        assertThat(tracker6.getContent()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
index dd316ae0..9053b737 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
@@ -732,11 +732,12 @@ public String build() {
                     paramIfNotEmpty("iso", countryIso) +
                     paramIfNotEmpty("cn", carrierName) +
                     "&ct=" + networkType +
-                    "&av=" + BuildConfig.VERSION_NAME +
+                    "&av=" + Uri.encode(BuildConfig.VERSION_NAME) +
                     "&udid=" + PlayServicesUrlRewriter.UDID_TEMPLATE +
                     "&dnt=" + PlayServicesUrlRewriter.DO_NOT_TRACK_TEMPLATE +
                     "&mr=1" +
-                    "&android_perms_ext_storage=" + externalStoragePermission;
+                    "&android_perms_ext_storage=" + externalStoragePermission +
+                    "&vv=3";
         }
 
         public AdUrlBuilder withAdUnitId(String adUnitId) {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java
new file mode 100644
index 00000000..02e3b6d9
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java
@@ -0,0 +1,138 @@
+package com.mopub.mobileads;
+
+import android.os.Handler;
+
+import com.mopub.common.ExternalViewabilitySessionManager;
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.annotation.Config;
+
+import java.util.Map;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.verifyZeroInteractions;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class WebViewCacheServiceTest {
+
+    @Mock private BaseWebView baseWebView;
+    @Mock private Interstitial interstitial;
+    @Mock private ExternalViewabilitySessionManager viewabilityManager;
+    @Mock private Handler handler;
+    private long broadcastIdentifier;
+
+    @Before
+    public void setUp() throws Exception {
+        WebViewCacheService.clearAll();
+        WebViewCacheService.setHandler(handler);
+        broadcastIdentifier = 12345;
+    }
+
+    @Test
+    public void storeWebView_shouldPopulateMap() {
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, interstitial,
+                baseWebView, viewabilityManager);
+
+        final Map<Long, WebViewCacheService.Config> configs = WebViewCacheService.getWebViewConfigs();
+        assertThat(configs.size()).isEqualTo(1);
+        assertThat(configs.get(broadcastIdentifier).getWebView()).isEqualTo(baseWebView);
+        assertThat(configs.get(broadcastIdentifier).getWeakInterstitial().get()).isEqualTo(interstitial);
+        assertThat(configs.get(broadcastIdentifier).getViewabilityManager()).isEqualTo(viewabilityManager);
+    }
+
+    @Test
+    public void storeWebView_withEmptyCache_shouldNotSetRunnableForTrimCache() {
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, interstitial,
+                baseWebView, viewabilityManager);
+
+        verifyZeroInteractions(handler);
+        final Map<Long, WebViewCacheService.Config> configs = WebViewCacheService.getWebViewConfigs();
+        assertThat(configs.size()).isEqualTo(1);
+        assertThat(configs.get(broadcastIdentifier).getWebView()).isEqualTo(baseWebView);
+        assertThat(configs.get(broadcastIdentifier).getWeakInterstitial().get()).isEqualTo(interstitial);
+        assertThat(configs.get(broadcastIdentifier).getViewabilityManager()).isEqualTo(viewabilityManager);
+    }
+
+    @Test
+    public void storeWebView_withNonEmptyCache_shouldSetRunnableForTrimCache() {
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, interstitial,
+                baseWebView, viewabilityManager);
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier + 1, interstitial,
+                baseWebView, viewabilityManager);
+
+        verify(handler).removeCallbacks(WebViewCacheService.sTrimCacheRunnable);
+        verify(handler).postDelayed(WebViewCacheService.sTrimCacheRunnable,
+                WebViewCacheService.TRIM_CACHE_FREQUENCY_MILLIS);
+        verifyNoMoreInteractions(handler);
+    }
+
+    @Test
+    public void storeWebView_withMaxSizeReached_shouldTrimCache_shouldIgnoreStoreRequest() {
+        for(int i = 0; i < WebViewCacheService.MAX_SIZE; i++) {
+            WebViewCacheService.storeWebViewConfig(broadcastIdentifier + i, interstitial,
+                    baseWebView, viewabilityManager);
+        }
+        final Map<Long, WebViewCacheService.Config> configs = WebViewCacheService.getWebViewConfigs();
+        assertThat(configs.size()).isEqualTo(WebViewCacheService.MAX_SIZE);
+
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier - 1, interstitial, baseWebView,
+                viewabilityManager);
+
+        // This is called MAX_SIZE - 1 times since trim() is not called on the first run due to
+        // the maps being empty. And then this is called an additional time to test the one
+        // after MAX_SIZE is reached.
+        verify(handler, times(WebViewCacheService.MAX_SIZE)).removeCallbacks(
+                WebViewCacheService.sTrimCacheRunnable);
+        verify(handler, times(WebViewCacheService.MAX_SIZE)).postDelayed(
+                WebViewCacheService.sTrimCacheRunnable,
+                WebViewCacheService.TRIM_CACHE_FREQUENCY_MILLIS);
+
+        assertThat(configs.size()).isEqualTo(WebViewCacheService.MAX_SIZE);
+        assertThat(configs.get(broadcastIdentifier-1)).isNull();
+    }
+
+    @Test
+    public void popWebView_shouldReturnWebView_shouldRemoveMappings() {
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, interstitial,
+                baseWebView, viewabilityManager);
+
+        final WebViewCacheService.Config result = WebViewCacheService.popWebViewConfig(broadcastIdentifier);
+
+        assertThat(WebViewCacheService.getWebViewConfigs()).isEmpty();
+        assertThat(result.getWebView()).isEqualTo(baseWebView);
+        assertThat(result.getWeakInterstitial().get()).isEqualTo(interstitial);
+        assertThat(result.getViewabilityManager()).isEqualTo(viewabilityManager);
+    }
+
+    @Test
+    public void trimCache_shouldRemoveStaleWebViews() {
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, interstitial,
+                baseWebView, viewabilityManager);
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier + 1, mock(ResponseBodyInterstitial.class),
+                baseWebView, viewabilityManager);
+
+        final Map<Long, WebViewCacheService.Config> configs = WebViewCacheService.getWebViewConfigs();
+        // This clears the WeakReference, which allows the cache to remove the WebView associated
+        // with that interstitial.
+        configs.get(broadcastIdentifier + 1).getWeakInterstitial().clear();
+
+        WebViewCacheService.trimCache();
+
+        final Map<Long, WebViewCacheService.Config> configsResult = WebViewCacheService.getWebViewConfigs();
+
+        assertThat(configsResult.size()).isEqualTo(1);
+        assertThat(configs.get(broadcastIdentifier).getWebView()).isEqualTo(baseWebView);
+        assertThat(configs.get(broadcastIdentifier).getWeakInterstitial().get()).isEqualTo(interstitial);
+        assertThat(configs.get(broadcastIdentifier).getViewabilityManager()).isEqualTo(viewabilityManager);
+        assertThat(configsResult.get(broadcastIdentifier + 1)).isNull();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java
index 65eb1f81..088d6f22 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java
@@ -33,7 +33,7 @@ public static Node createNode(String xml) throws Exception {
     public static List<String> vastTrackersToStrings(List<VastTracker> vastTrackers) {
         List<String> strings = new ArrayList<String>(vastTrackers.size());
         for (VastTracker vastTracker : vastTrackers) {
-            strings.add(vastTracker.getTrackingUrl());
+            strings.add(vastTracker.getContent());
         }
         return strings;
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
index 7a3ba220..ff0c47be 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
@@ -110,6 +110,16 @@ public void bannerMraidListener_onClose_shouldNotifyBannerCollapsed() {
         verify(mockBannerListener).onBannerCollapsed();
     }
 
+    @Test
+    public void trackMpxAndThirdPartyImpressions_shouldFireJavascriptWebViewDidAppear() {
+        MraidListener mraidListener = captureMraidListener();
+        mraidListener.onLoaded(null);
+        verify(mockBannerListener).onBannerLoaded(any(View.class));
+
+        subject.trackMpxAndThirdPartyImpressions();
+        verify(mockMraidController).loadJavascript(eq("webviewDidAppear();"));
+    }
+
     private MraidListener captureMraidListener() {
         subject.loadBanner(context, mockBannerListener, localExtras, serverExtras);
         ArgumentCaptor<MraidListener> listenerCaptor = ArgumentCaptor.forClass(MraidListener.class);
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
index 8fc20a16..f439272b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
@@ -7,18 +7,19 @@
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
 import android.net.Uri;
-import android.os.Build;
 import android.view.View;
 import android.widget.FrameLayout;
 
-import com.mopub.TestSdkHelper;
 import com.mopub.common.AdReport;
 import com.mopub.common.CloseableLayout.ClosePosition;
+import com.mopub.common.ExternalViewabilitySessionManager;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Utils;
 import com.mopub.mobileads.BaseVideoPlayerActivityTest;
 import com.mopub.mobileads.BuildConfig;
+import com.mopub.mobileads.Interstitial;
 import com.mopub.mobileads.MraidVideoPlayerActivity;
+import com.mopub.mobileads.WebViewCacheService;
 import com.mopub.mraid.MraidBridge.MraidBridgeListener;
 import com.mopub.mraid.MraidBridge.MraidWebView;
 import com.mopub.mraid.MraidController.MraidListener;
@@ -69,6 +70,8 @@
     @Mock private MraidListener mockMraidListener;
     @Mock private UseCustomCloseListener mockUseCustomCloseListener;
     @Mock private OrientationBroadcastReceiver mockOrientationBroadcastReceiver;
+    @Mock private MraidWebView mockWebView;
+    @Mock private ExternalViewabilitySessionManager mockViewabilityManager;
     @Captor private ArgumentCaptor<MraidBridgeListener> bridgeListenerCaptor;
     @Captor private ArgumentCaptor<MraidBridgeListener> twoPartBridgeListenerCaptor;
 
@@ -80,6 +83,7 @@
     @Before
     public void setUp() {
         ShadowApplication.setDisplayMetricsDensity(1.0f);
+        WebViewCacheService.clearAll();
 
         activity = spy(Robolectric.buildActivity(Activity.class).create().get());
         activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
@@ -106,7 +110,7 @@ public Void answer(final InvocationOnMock invocation) throws Throwable {
         subject.setMraidListener(mockMraidListener);
         subject.setOrientationBroadcastReceiver(mockOrientationBroadcastReceiver);
         subject.setRootView(rootView);
-        subject.loadContent("fake_html_data");
+        subject.fillContent(null, "fake_html_data", null);
 
         verify(mockBridge).setMraidBridgeListener(bridgeListenerCaptor.capture());
         verify(mockTwoPartBridge).setMraidBridgeListener(twoPartBridgeListenerCaptor.capture());
@@ -209,7 +213,7 @@ public void handleResize_shouldThrowExceptionForInterstitial() throws MraidComma
         subject.setRootView(rootView);
 
         // Move to DEFAULT state
-        subject.loadContent("fake_html_data");
+        subject.fillContent(null, "fake_html_data", null);
         subject.handlePageLoad();
 
         subject.handleResize(100, 200, 0, 0, ClosePosition.TOP_RIGHT, true);
@@ -341,7 +345,7 @@ public void handleExpand_shouldBeIgnoredForInterstitial() throws MraidCommandExc
         subject.setRootView(rootView);
 
         // Move to DEFAULT state
-        subject.loadContent("fake_html_data");
+        subject.fillContent(null, "fake_html_data", null);
         subject.handlePageLoad();
 
         subject.handleExpand(null, false);
@@ -559,6 +563,40 @@ public void handleOpen_withAboutBlankUrl_shouldFailSilently() {
         assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
     }
 
+    @Test
+    public void fillContent_withCacheHit_shouldNotLoadHtmlData_shouldCallMraidListenerOnLoaded() {
+        subject = new MraidController(
+                activity, mockAdReport, PlacementType.INLINE,
+                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
+        subject.setMraidListener(mockMraidListener);
+        reset(mockMraidListener, mockBridge);
+        subject.setOrientationBroadcastReceiver(mockOrientationBroadcastReceiver);
+        subject.setRootView(rootView);
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, new Interstitial() {},
+                mockWebView, mockViewabilityManager);
+
+        subject.fillContent(broadcastIdentifier, "fake_html_data", null);
+
+        verify(mockBridge, never()).setContentHtml("fake_html_data");
+        verify(mockMraidListener).onLoaded(subject.getAdContainer());
+    }
+
+    @Test
+    public void fillContent_withCacheMiss_shouldLoadHtmlData() {
+        subject = new MraidController(
+                activity, mockAdReport, PlacementType.INLINE,
+                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
+        subject.setMraidListener(mockMraidListener);
+        reset(mockMraidListener, mockBridge);
+        subject.setOrientationBroadcastReceiver(mockOrientationBroadcastReceiver);
+        subject.setRootView(rootView);
+
+        subject.fillContent(broadcastIdentifier, "fake_html_data", null);
+
+        verify(mockBridge).setContentHtml("fake_html_data");
+        verify(mockMraidListener, never()).onLoaded(any(View.class));
+    }
+
     @Test
     public void orientationBroadcastReceiver_whenUnregistered_shouldIgnoreOnReceive() {
         Intent intent = mock(Intent.class);
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
index b46389de..ba9c96b0 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
@@ -132,10 +132,6 @@ public void onCompletionListener_shouldShowCloseButton() throws Exception {
         assertThat(getCloseButton().getVisibility()).isEqualTo(VISIBLE);
     }
 
-    @Test
-    public void onCompletionListener_withNullBaseVideoViewControllerListener_shouldNotCallOnFinish() throws Exception {
-    }
-
     @Test
     public void onErrorListener_shouldReturnFalseAndNotCallBaseVideoControllerListenerOnFinish() throws Exception {
         initializeSubject();
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java
index a369b0ef..96f461f3 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java
@@ -4,8 +4,8 @@
 import android.content.Context;
 import android.net.Uri;
 
-import com.google.android.exoplayer.upstream.DataSpec;
-import com.google.android.exoplayer.upstream.HttpDataSource;
+import com.google.android.exoplayer2.upstream.DataSpec;
+import com.google.android.exoplayer2.upstream.HttpDataSource;
 import com.mopub.common.CacheService;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java
index 6df8b430..0a0b0d71 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java
@@ -56,8 +56,10 @@ public void setUp() {
 
         when(impressionInterface.getImpressionMinPercentageViewed()).thenReturn(50);
         when(impressionInterface.getImpressionMinTimeViewed()).thenReturn(1000);
+        when(impressionInterface.getImpressionMinVisiblePx()).thenReturn(null);
         when(impressionInterface2.getImpressionMinPercentageViewed()).thenReturn(50);
         when(impressionInterface2.getImpressionMinTimeViewed()).thenReturn(1000);
+        when(impressionInterface2.getImpressionMinVisiblePx()).thenReturn(null);
 
         // XXX We need this to ensure that our SystemClock starts
         ShadowSystemClock.uptimeMillis();
@@ -70,7 +72,7 @@ public void addView_shouldAddViewToTrackedViews_shouldAddViewToVisibilityTracker
         assertThat(trackedViews).hasSize(1);
         assertThat(trackedViews.get(view)).isEqualTo(impressionInterface);
         verify(visibilityTracker).addView(view, impressionInterface
-                .getImpressionMinPercentageViewed());
+                .getImpressionMinPercentageViewed(), null);
     }
 
     @Test
@@ -81,7 +83,8 @@ public void addView_withRecordedImpression_shouldNotAddView() {
 
         assertThat(trackedViews).hasSize(0);
         verify(visibilityTracker, never())
-                .addView(view, impressionInterface.getImpressionMinPercentageViewed());
+                .addView(view, impressionInterface.getImpressionMinPercentageViewed(),
+                        null);
     }
 
     @Test
@@ -90,7 +93,8 @@ public void addView_withDifferentImpressionInterface_shouldRemoveFromPollingView
 
         assertThat(trackedViews).hasSize(1);
         assertThat(trackedViews.get(view)).isEqualTo(impressionInterface);
-        verify(visibilityTracker).addView(view, impressionInterface.getImpressionMinPercentageViewed());
+        verify(visibilityTracker).addView(view,
+                impressionInterface.getImpressionMinPercentageViewed(), null);
 
         pollingViews.put(view, timeStampWrapper);
 
@@ -100,7 +104,7 @@ public void addView_withDifferentImpressionInterface_shouldRemoveFromPollingView
         assertThat(trackedViews.get(view)).isEqualTo(impressionInterface2);
         assertThat(pollingViews).isEmpty();
         verify(visibilityTracker, times(2))
-                .addView(view, impressionInterface.getImpressionMinPercentageViewed());
+                .addView(view, impressionInterface.getImpressionMinPercentageViewed(), null);
     }
 
     @Test
@@ -111,7 +115,8 @@ public void addView_withDifferentAlreadyImpressedImpressionInterface_shouldRemov
 
         assertThat(trackedViews).hasSize(1);
         assertThat(trackedViews.get(view)).isEqualTo(impressionInterface);
-        verify(visibilityTracker).addView(view, impressionInterface.getImpressionMinPercentageViewed());
+        verify(visibilityTracker).addView(view,
+                impressionInterface.getImpressionMinPercentageViewed(), null);
 
         pollingViews.put(view, timeStampWrapper);
 
@@ -120,7 +125,8 @@ public void addView_withDifferentAlreadyImpressedImpressionInterface_shouldRemov
         assertThat(trackedViews).hasSize(0);
         assertThat(trackedViews.get(view)).isNull();
         assertThat(pollingViews).isEmpty();
-        verify(visibilityTracker).addView(view, impressionInterface.getImpressionMinPercentageViewed());
+        verify(visibilityTracker).addView(view,
+                impressionInterface.getImpressionMinPercentageViewed(), null);
     }
 
     @Test
@@ -129,7 +135,8 @@ public void addView_withSameImpressionInterface_shouldNotAddView() {
 
         assertThat(trackedViews).hasSize(1);
         assertThat(trackedViews.get(view)).isEqualTo(impressionInterface);
-        verify(visibilityTracker).addView(view, impressionInterface.getImpressionMinPercentageViewed());
+        verify(visibilityTracker).addView(view,
+                impressionInterface.getImpressionMinPercentageViewed(), null);
 
         pollingViews.put(view, timeStampWrapper);
 
@@ -140,14 +147,16 @@ public void addView_withSameImpressionInterface_shouldNotAddView() {
         assertThat(pollingViews.keySet()).containsOnly(view);
 
         // Still only one call
-        verify(visibilityTracker).addView(view, impressionInterface.getImpressionMinPercentageViewed());
+        verify(visibilityTracker).addView(view,
+                impressionInterface.getImpressionMinPercentageViewed(), null);
     }
 
     @Test
     public void removeView_shouldRemoveViewFromViewTrackedViews_shouldRemoveViewFromPollingMap_shouldRemoveViewFromVisibilityTracker() {
         trackedViews.put(view, impressionInterface);
         pollingViews.put(view, new TimestampWrapper<ImpressionInterface>(impressionInterface));
-        visibilityTracker.addView(view, impressionInterface.getImpressionMinPercentageViewed());
+        visibilityTracker.addView(view,
+                impressionInterface.getImpressionMinPercentageViewed(), null);
 
         subject.removeView(view);
 
@@ -162,8 +171,10 @@ public void clear_shouldClearViewTrackedViews_shouldClearPollingViews_shouldClea
         trackedViews.put(view2, impressionInterface);
         pollingViews.put(view, timeStampWrapper);
         pollingViews.put(view2, timeStampWrapper);
-        visibilityTracker.addView(view, impressionInterface.getImpressionMinPercentageViewed());
-        visibilityTracker.addView(view2, impressionInterface.getImpressionMinPercentageViewed());
+        visibilityTracker.addView(view,
+                impressionInterface.getImpressionMinPercentageViewed(), null);
+        visibilityTracker.addView(view2,
+                impressionInterface.getImpressionMinPercentageViewed(), null);
 
         subject.clear();
 
@@ -179,8 +190,10 @@ public void destroy_shouldCallClear_shouldDestroyVisibilityTracker_shouldSetVisi
         trackedViews.put(view2, impressionInterface);
         pollingViews.put(view, timeStampWrapper);
         pollingViews.put(view2, timeStampWrapper);
-        visibilityTracker.addView(view, impressionInterface.getImpressionMinPercentageViewed());
-        visibilityTracker.addView(view2, impressionInterface.getImpressionMinPercentageViewed());
+        visibilityTracker.addView(view,
+                impressionInterface.getImpressionMinPercentageViewed(), null);
+        visibilityTracker.addView(view2,
+                impressionInterface.getImpressionMinPercentageViewed(), null);
         assertThat(subject.getVisibilityTrackerListener()).isNotNull();
 
         subject.destroy();
@@ -293,4 +306,4 @@ public void pollingRunnableRun_whenImpressionInterfaceIsNull_shouldThrowNPE() {
 
         verify(impressionInterface, never()).recordImpression(view);
     }
-}
\ No newline at end of file
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
index 7e91e7db..669006f8 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
@@ -18,6 +18,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
+import org.mockito.Matchers;
 import org.mockito.Mock;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
@@ -331,7 +332,8 @@ public void getView_withAdPosition_shouldReturnAdView_shouldTrackVisibility() {
 
         assertThat(view).isEqualTo(mockAdView);
 
-        verify(mockVisibilityTracker).addView(eq(mockAdView), anyInt());
+        verify(mockVisibilityTracker).addView(eq(mockAdView), anyInt(),
+                Matchers.isNull(Integer.class));
     }
 
     @Test
@@ -340,7 +342,8 @@ public void getView_withNonAdPosition_shouldOriginalAdapterView_shouldTrackVisib
 
         assertThat(view).isNotEqualTo(mockAdView);
 
-        verify(mockVisibilityTracker).addView(any(View.class), anyInt());
+        verify(mockVisibilityTracker).addView(any(View.class), anyInt(),
+                Matchers.isNull(Integer.class));
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
index 63b43fc0..eb145575 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
@@ -18,7 +18,6 @@
 import com.mopub.volley.toolbox.ImageLoader;
 
 import org.json.JSONArray;
-import org.json.JSONException;
 import org.json.JSONObject;
 import org.junit.Before;
 import org.junit.Test;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
index 80ad306f..f373be7b 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
@@ -273,9 +273,9 @@ public void onVastVideoConfigurationPrepared_shouldMergeHeaderAndJsonClickTracke
         assertThat(actualClickTrackers.size()).isEqualTo(2);
         final VastTracker headerClickTracker = actualClickTrackers.get(0);
         final VastTracker jsonClickTracker = actualClickTrackers.get(1);
-        assertThat(headerClickTracker.getTrackingUrl()).isEqualTo("header click tracker");
+        assertThat(headerClickTracker.getContent()).isEqualTo("header click tracker");
         assertThat(headerClickTracker.isRepeatable()).isFalse();
-        assertThat(jsonClickTracker.getTrackingUrl()).isEqualTo("json click tracker");
+        assertThat(jsonClickTracker.getContent()).isEqualTo("json click tracker");
         assertThat(jsonClickTracker.isRepeatable()).isFalse();
     }
 
@@ -293,7 +293,7 @@ public void onVastVideoConfigurationPrepared_shouldDedupeHeaderAndJsonClickTrack
         final List<VastTracker> actualClickTrackers = (List<VastTracker>) argumentCaptor.getValue();
         assertThat(actualClickTrackers.size()).isEqualTo(1);
         final VastTracker clickTracker = actualClickTrackers.get(0);
-        assertThat(clickTracker.getTrackingUrl()).isEqualTo("header click tracker");
+        assertThat(clickTracker.getContent()).isEqualTo("header click tracker");
         assertThat(clickTracker.isRepeatable()).isFalse();
     }
 
@@ -315,11 +315,11 @@ public void onVastVideoConfigurationPrepared_shouldAcceptJsonArrayClickTrackers(
         final VastTracker jsonClickTracker1 = actualClickTrackers.get(0);
         final VastTracker jsonClickTracker2 = actualClickTrackers.get(1);
         final VastTracker headerClickTracker = actualClickTrackers.get(2);
-        assertThat(jsonClickTracker1.getTrackingUrl()).isEqualTo("json click tracker 1");
+        assertThat(jsonClickTracker1.getContent()).isEqualTo("json click tracker 1");
         assertThat(jsonClickTracker1.isRepeatable()).isFalse();
-        assertThat(jsonClickTracker2.getTrackingUrl()).isEqualTo("json click tracker 2");
+        assertThat(jsonClickTracker2.getContent()).isEqualTo("json click tracker 2");
         assertThat(jsonClickTracker2.isRepeatable()).isFalse();
-        assertThat(headerClickTracker.getTrackingUrl()).isEqualTo("header click tracker");
+        assertThat(headerClickTracker.getContent()).isEqualTo("header click tracker");
         assertThat(headerClickTracker.isRepeatable()).isFalse();
     }
 
@@ -340,9 +340,9 @@ public void onVastVideoConfigurationPrepared_shouldDedupeJsonArrayClickTrackers(
         assertThat(actualClickTrackers.size()).isEqualTo(2);
         final VastTracker headerClickTracker = actualClickTrackers.get(0);
         final VastTracker jsonClickTracker = actualClickTrackers.get(1);
-        assertThat(headerClickTracker.getTrackingUrl()).isEqualTo("header click tracker");
+        assertThat(headerClickTracker.getContent()).isEqualTo("header click tracker");
         assertThat(headerClickTracker.isRepeatable()).isFalse();
-        assertThat(jsonClickTracker.getTrackingUrl()).isEqualTo("json click tracker");
+        assertThat(jsonClickTracker.getContent()).isEqualTo("json click tracker");
         assertThat(jsonClickTracker.isRepeatable()).isFalse();
     }
 
@@ -353,7 +353,7 @@ public void render_shouldAddViewToVisibilityTracker() {
         subject.prepare(mockRootView);
         subject.render(mockMediaLayout);
 
-        verify(mockVisibilityTracker).addView(mockRootView, mockMediaLayout, 10, 5);
+        verify(mockVisibilityTracker).addView(mockRootView, mockMediaLayout, 10, 5, null);
     }
 
     @Test
@@ -632,9 +632,6 @@ public void onStateChanged_shouldAppropriatelySetVideoState() {
         subject.prepare(mockRootView);
         subject.render(mockMediaLayout);
 
-        subject.onStateChanged(true, NativeVideoController.STATE_PREPARING);
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.LOADING);
-
         subject.onStateChanged(true, NativeVideoController.STATE_IDLE);
         assertThat(subject.getVideoState()).isEqualTo(VideoState.LOADING);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
index 076e4ff1..59be34df 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
@@ -304,7 +304,7 @@ public void generateUrlString_withOnlyAdUnitSet_shouldReturnMinimumUrl() {
                         TEST_SCREEN_HEIGHT +
                         "&sc_a=" +
                         TEST_DENSITY +
-                        "&ct=3&av=" + BuildConfig.VERSION_NAME +
+                        "&ct=3&av=" + Uri.encode(BuildConfig.VERSION_NAME) +
                         "&udid=mp_tmpl_advertising_id&dnt=mp_tmpl_do_not_track");
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java
index 33234327..a3ef9e69 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java
@@ -6,19 +6,27 @@
 import android.graphics.drawable.BitmapDrawable;
 import android.media.AudioManager;
 import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.Surface;
 import android.view.TextureView;
 
-import com.google.android.exoplayer.ExoPlaybackException;
-import com.google.android.exoplayer.ExoPlayer;
-import com.google.android.exoplayer.MediaCodecAudioTrackRenderer;
-import com.google.android.exoplayer.MediaCodecVideoTrackRenderer;
+import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.ExoPlaybackException;
+import com.google.android.exoplayer2.ExoPlayer;
+import com.google.android.exoplayer2.ExoPlayer.ExoPlayerMessage;
+import com.google.android.exoplayer2.LoadControl;
+import com.google.android.exoplayer2.Renderer;
+import com.google.android.exoplayer2.audio.MediaCodecAudioRenderer;
+import com.google.android.exoplayer2.source.MediaSource;
+import com.google.android.exoplayer2.trackselection.TrackSelector;
+import com.google.android.exoplayer2.video.MediaCodecVideoRenderer;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.VastTracker;
 import com.mopub.mobileads.VastVideoConfig;
-import com.mopub.nativeads.NativeVideoController.ExoPlayerFactory;
 import com.mopub.nativeads.NativeVideoController.Listener;
+import com.mopub.nativeads.NativeVideoController.MoPubExoPlayerFactory;
 import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable;
 import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable.ProgressListener;
 import com.mopub.nativeads.NativeVideoController.VisibilityTrackingEvent;
@@ -30,11 +38,14 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Matchers;
 import org.mockito.Mock;
 import org.mockito.Mockito;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -52,9 +63,11 @@
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.argThat;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.atLeast;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
@@ -80,6 +93,10 @@
     @Mock private VisibilityChecker mockVisibilityChecker;
     @Mock private MoPubRequestQueue mockRequestQueue;
     @Mock private AudioManager mockAudioManager;
+    @Mock private MediaCodecVideoRenderer mockVideoRenderer;
+    @Mock private MediaCodecAudioRenderer mockAudioRenderer;
+    @Mock private TrackSelector mockTrackSelector;
+    @Mock private LoadControl mockLoadControl;
 
     @Before
     public void setUp() {
@@ -141,10 +158,10 @@ public void execute() {
                 activity,
                 vastVideoConfig,
                 mockNativeVideoProgressRunnable,
-                new ExoPlayerFactory() {
+                new MoPubExoPlayerFactory() {
                     @Override
-                    public ExoPlayer newInstance(int rendererCount, int minBufferMs,
-                            int minRebufferMs) {
+                    public ExoPlayer newInstance(@NonNull final Renderer[] renderers,
+                            @NonNull final TrackSelector trackSelector, @Nullable LoadControl loadControl) {
                         return mockExoPlayer;
                     }
                 },
@@ -217,12 +234,16 @@ public void getPlaybackState_withNonNullExoPlayer_shouldReturnExoPlayerState() {
     @Test
     public void setAudioEnabled_withTrue_shouldSetVolumeOnExoPlayer() {
         subject.prepare(this);
+        reset(mockExoPlayer);
         subject.setAudioEnabled(true);
 
-        verify(mockExoPlayer).sendMessage(
-                any(MediaCodecAudioTrackRenderer.class),
-                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
-                eq(1.0f));
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer).sendMessages(captor.capture());
+
+        ExoPlayerMessage message = captor.getValue();
+        assertThat(message.target).isInstanceOf(MediaCodecAudioRenderer.class);
+        assertThat(message.messageType).isEqualTo(C.MSG_SET_VOLUME);
+        assertThat(message.message).isEqualTo(1.0f);
     }
 
     @Test
@@ -234,10 +255,13 @@ public void setAudioEnabled_withFalse_shouldDisableVolumeOnExoPlayer() {
 
         subject.setAudioEnabled(false);
 
-        verify(mockExoPlayer).sendMessage(
-                any(MediaCodecAudioTrackRenderer.class),
-                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
-                eq(0.0f));
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer).sendMessages(captor.capture());
+
+        ExoPlayerMessage message = captor.getValue();
+        assertThat(message.target).isInstanceOf(MediaCodecAudioRenderer.class);
+        assertThat(message.messageType).isEqualTo(C.MSG_SET_VOLUME);
+        assertThat(message.message).isEqualTo(0.0f);
     }
 
     @Test
@@ -261,25 +285,27 @@ public void setAppAudioEnabled_withFalse_shouldAbandonAudioFocus() throws Except
     public void setAudioVolume_withAudioEnabled_shouldSetExoPlayerVolume() throws Exception {
         subject.prepare(this);
         subject.setAudioEnabled(true);
+        reset(mockExoPlayer);
 
         subject.setAudioVolume(0.3f);
 
-        verify(mockExoPlayer).sendMessage(
-                any(MediaCodecAudioTrackRenderer.class),
-                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
-                eq(0.3f));
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer).sendMessages(captor.capture());
+
+        ExoPlayerMessage message = captor.getValue();
+        assertThat(message.target).isInstanceOf(MediaCodecAudioRenderer.class);
+        assertThat(message.messageType).isEqualTo(C.MSG_SET_VOLUME);
+        assertThat(message.message).isEqualTo(0.3f);
     }
 
     @Test
     public void setAudioVolume_withAudioDisabled_shouldDoNothing() throws Exception {
         subject.prepare(this);
+        reset(mockExoPlayer);
 
         subject.setAudioVolume(0.3f);
 
-        verify(mockExoPlayer, never()).sendMessage(
-                any(MediaCodecAudioTrackRenderer.class),
-                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
-                eq(0.3f));
+        verify(mockExoPlayer, never()).sendMessages(any(ExoPlayerMessage.class));
     }
 
     @Test
@@ -289,10 +315,13 @@ public void setTextureView_shouldSetTextureViewOnVideoProgressRunnable_shouldSet
 
         subject.setTextureView(mockTextureView);
 
-        verify(mockNativeVideoProgressRunnable).setTextureView(mockTextureView);
-        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
-                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE),
-                any(Surface.class));
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer).sendMessages(captor.capture());
+
+        ExoPlayerMessage message = captor.getValue();
+        assertThat(message.target).isInstanceOf(MediaCodecVideoRenderer.class);
+        assertThat(message.messageType).isEqualTo(C.MSG_SET_SURFACE);
+        assertThat(message.message).isInstanceOf(Surface.class);
     }
 
     @Test
@@ -306,8 +335,19 @@ public void prepare_shouldClearExistingPlayer() {
         // This will clear the previous player
         subject.prepare(this);
 
-        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
-                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE), eq(null));
+        // Ensure the first two calls zero out the surface and disable audio
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer, atLeast(2)).sendMessages(captor.capture());
+
+        List<ExoPlayerMessage> messages = captor.getAllValues();
+
+        assertThat(messages.get(0).target).isInstanceOf(MediaCodecVideoRenderer.class);
+        assertThat(messages.get(0).messageType).isEqualTo(C.MSG_SET_SURFACE);
+        assertThat(messages.get(0).message).isNull();
+        assertThat(messages.get(1).target).isInstanceOf(MediaCodecAudioRenderer.class);
+        assertThat(messages.get(1).messageType).isEqualTo(C.MSG_SET_VOLUME);
+        assertThat(messages.get(1).message).isEqualTo(0f);
+
         verify(mockExoPlayer).stop();
         verify(mockExoPlayer).release();
         verify(mockNativeVideoProgressRunnable).stop();
@@ -316,37 +356,42 @@ public void prepare_shouldClearExistingPlayer() {
 
     @Test
     public void prepare_shouldPreparePlayer() {
-        ExoPlayerFactory mockExoPlayerFactory = mock(ExoPlayerFactory.class);
-        when(mockExoPlayerFactory.newInstance(2, 1000, 5000)).thenReturn(mockExoPlayer);
+        MoPubExoPlayerFactory mockMoPubExoPlayerFactory = mock(MoPubExoPlayerFactory.class);
+        when(mockMoPubExoPlayerFactory.newInstance(
+                any(Renderer[].class),
+                any(TrackSelector.class),
+                any(LoadControl.class))
+        ).thenReturn(mockExoPlayer);
         subject = createForId(123,
                 activity,
                 vastVideoConfig,
                 mockNativeVideoProgressRunnable,
-                mockExoPlayerFactory,
+                mockMoPubExoPlayerFactory,
                 null,
                 mockAudioManager);
         subject.prepare(this);
 
-        verify(mockExoPlayerFactory).newInstance(2, 1000, 5000);
+        verify(mockMoPubExoPlayerFactory).newInstance(any(Renderer[].class),
+                any(TrackSelector.class), any(LoadControl.class));
         verify(mockNativeVideoProgressRunnable).setExoPlayer(mockExoPlayer);
         verify(mockNativeVideoProgressRunnable).startRepeating(50);
         verify(mockExoPlayer).addListener(subject);
-        verify(mockExoPlayer).prepare(any(MediaCodecAudioTrackRenderer.class),
-                any(MediaCodecVideoTrackRenderer.class));
+        verify(mockExoPlayer).prepare(any(MediaSource.class));
 
-        // set audio
-        verify(mockExoPlayer).sendMessage(
-                any(MediaCodecAudioTrackRenderer.class),
-                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
-                eq(0.0f));
+        // set audio and surface
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer, times(2)).sendMessages(captor.capture());
+
+        List<ExoPlayerMessage> messages = captor.getAllValues();
+        assertThat(messages.get(0).target).isInstanceOf(MediaCodecAudioRenderer.class);
+        assertThat(messages.get(0).messageType).isEqualTo(C.MSG_SET_VOLUME);
+        assertThat(messages.get(0).message).isEqualTo(0f);
+        assertThat(messages.get(1).target).isInstanceOf(MediaCodecVideoRenderer.class);
+        assertThat(messages.get(1).messageType).isEqualTo(C.MSG_SET_SURFACE);
+        assertThat(messages.get(1).message).isNull();
 
         // play when ready
         verify(mockExoPlayer).setPlayWhenReady(false);
-
-        // set surface
-        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
-                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE),
-                eq(null));
     }
 
     @Test
@@ -362,8 +407,13 @@ public void clear_shouldSetPlayWhenReadyFalse_shouldClearExistingPlayer() {
         verify(mockExoPlayer).setPlayWhenReady(false);
 
         // clear exo player
-        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
-                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE), eq(null));
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer).sendMessages(captor.capture());
+        ExoPlayerMessage message = captor.getValue();
+        assertThat(message.target).isInstanceOf(MediaCodecVideoRenderer.class);
+        assertThat(message.messageType).isEqualTo(C.MSG_SET_SURFACE);
+        assertThat(message.message).isNull();
+
         verify(mockExoPlayer).stop();
         verify(mockExoPlayer).release();
         verify(mockNativeVideoProgressRunnable).setExoPlayer(null);
@@ -378,8 +428,12 @@ public void release_withMatchingOwner_shouldClearExistingPlayer() {
         subject.release(this);
 
         // clear exo player
-        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
-                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE), eq(null));
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer).sendMessages(captor.capture());
+        ExoPlayerMessage message = captor.getValue();
+        assertThat(message.target).isInstanceOf(MediaCodecVideoRenderer.class);
+        assertThat(message.messageType).isEqualTo(C.MSG_SET_SURFACE);
+        assertThat(message.message).isNull();
         verify(mockExoPlayer).stop();
         verify(mockExoPlayer).release();
         verify(mockNativeVideoProgressRunnable).setExoPlayer(null);
@@ -450,7 +504,7 @@ public void getDuration_shouldReturnProgressRunnableDuration() {
 
     @Test
     public void onPlayerError_shouldNotifyListener_shouldRequestProgressRunnableToStop() {
-        ExoPlaybackException exoPlaybackException = new ExoPlaybackException("exception");
+        ExoPlaybackException exoPlaybackException = ExoPlaybackException.createForSource(new IOException(""));
         subject.setListener(mockListener);
         subject.onPlayerError(exoPlaybackException);
 
@@ -464,10 +518,10 @@ public void handleCtaClick_shouldInvokeVastVideoConfigHandleClick() {
                 activity,
                 mockVastVideoConfig,
                 mockNativeVideoProgressRunnable,
-                new ExoPlayerFactory() {
+                new MoPubExoPlayerFactory() {
                     @Override
-                    public ExoPlayer newInstance(int rendererCount, int minBufferMs,
-                            int minRebufferMs) {
+                    public ExoPlayer newInstance(Renderer[] renderers, TrackSelector trackSelector,
+                            LoadControl loadControl) {
                         return mockExoPlayer;
                     }
                 },
@@ -485,8 +539,10 @@ public void NativeVideoProgressRunnable_doWork_shouldTrackEventsWithMinimumPerce
         when(mockExoPlayer.getCurrentPosition()).thenReturn(10L);
         when(mockExoPlayer.getDuration()).thenReturn(25L);
         when(mockExoPlayer.getPlayWhenReady()).thenReturn(true);
-        when(mockVisibilityChecker.isVisible(mockTextureView, mockTextureView, 10)).thenReturn(true);
-        when(mockVisibilityChecker.isVisible(mockTextureView, mockTextureView, 20)).thenReturn(false);
+        when(mockVisibilityChecker.isVisible(mockTextureView, mockTextureView,
+                10, null)).thenReturn(true);
+        when(mockVisibilityChecker.isVisible(mockTextureView, mockTextureView,
+                20, null)).thenReturn(false);
 
         nativeVideoProgressRunnable.setUpdateIntervalMillis(10);
         nativeVideoProgressRunnable.doWork();
@@ -586,7 +642,8 @@ public void NativeVideoProgressRunnable_doWork_withExoPlayerGetPlayWhenReadyFals
     public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTriggerFalse_shouldOnlyTriggerNotTrackedEvents_shouldNotStopRunnable() {
         when(mockExoPlayer.getCurrentPosition()).thenReturn(50L);
         when(mockExoPlayer.getDuration()).thenReturn(50L);
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt()))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt(),
+                Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         spyNativeVideoProgressRunnable.setUpdateIntervalMillis(50);
 
@@ -606,7 +663,8 @@ public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTrigger
         // Enough time has passed for all impressions to trigger organically
         when(mockExoPlayer.getCurrentPosition()).thenReturn(50L);
         when(mockExoPlayer.getDuration()).thenReturn(50L);
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt()))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt(),
+                Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         spyNativeVideoProgressRunnable.setUpdateIntervalMillis(50);
         spyNativeVideoProgressRunnable.requestStop();
@@ -628,7 +686,8 @@ public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTrigger
         // be triggered because forceTrigger is true
         when(mockExoPlayer.getCurrentPosition()).thenReturn(5L);
         when(mockExoPlayer.getDuration()).thenReturn(50L);
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt()))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt(),
+                Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         spyNativeVideoProgressRunnable.setUpdateIntervalMillis(50);
 
@@ -647,7 +706,8 @@ public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTrigger
     public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTriggerTrue_withStopRequested_shouldOnlyTriggerNotTrackedEvents_shouldStopRunnable() {
         when(mockExoPlayer.getCurrentPosition()).thenReturn(50L);
         when(mockExoPlayer.getDuration()).thenReturn(50L);
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt()))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt(),
+                Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         spyNativeVideoProgressRunnable.setUpdateIntervalMillis(50);
         spyNativeVideoProgressRunnable.requestStop();
@@ -673,16 +733,20 @@ public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTrigger
         // track: whether the impression should be organically triggered
 
         // trackingUrl1: visible & played = track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(10)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(10), Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         // trackingUrl2: visible & !played = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(20)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(20), Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         // trackingUrl3: already tracked = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(30)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(30), Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         // trackingUrl4: !visible & played = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(9)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(9), Matchers.isNull(Integer.class)))
                 .thenReturn(false);
         spyNativeVideoProgressRunnable.setUpdateIntervalMillis(10);
         spyNativeVideoProgressRunnable.requestStop();
@@ -710,16 +774,20 @@ public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTrigger
         // track: whether the impression should be organically triggered
 
         // trackingUrl1: visible & played = track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(10)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(10), Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         // trackingUrl2: visible & !played = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(20)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(20), Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         // trackingUrl3: already tracked = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(30)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(30), Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         // trackingUrl4: !visible & played = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(9)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(9), Matchers.isNull(Integer.class)))
                 .thenReturn(false);
         spyNativeVideoProgressRunnable.setUpdateIntervalMillis(10);
 
@@ -747,16 +815,20 @@ public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTrigger
         // track: whether the impression should be organically triggered
 
         // trackingUrl1: visible & played = track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(10)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(10), Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         // trackingUrl2: visible & !played = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(20)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(20), Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         // trackingUrl3: already tracked = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(30)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(30), Matchers.isNull(Integer.class)))
                 .thenReturn(true);
         // trackingUrl4: !visible & played = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(9)))
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView),
+                eq(9), Matchers.isNull(Integer.class)))
                 .thenReturn(false);
         spyNativeVideoProgressRunnable.setUpdateIntervalMillis(10);
         spyNativeVideoProgressRunnable.requestStop();
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
index 9bb34784..6204075d 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
@@ -254,9 +254,6 @@ public void onSurfaceTextureDestroyed_shouldReleaseVideoController_shouldApplySt
 
     @Test
     public void onStateChanged_shouldAppropriatelySetVideoState() {
-        subject.onStateChanged(true, NativeVideoController.STATE_PREPARING);
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.LOADING);
-
         subject.onStateChanged(true, NativeVideoController.STATE_IDLE);
         assertThat(subject.getVideoState()).isEqualTo(VideoState.LOADING);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java
index 22a34c85..c4cf34fb 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java
@@ -33,6 +33,7 @@ public void setUp() throws Exception {
         subject.addExtra("extraImage", "extraImageUrl");
         subject.addImpressionTracker("impressionUrl");
         subject.setImpressionMinTimeViewed(500);
+        subject.setImpressionMinPercentageViewed(10);
     }
 
     @Test
@@ -53,7 +54,7 @@ public void getters_shouldReturnCorrectValues() throws Exception {
         assertThat(subject.getExtras()).hasSize(2);
         assertThat(subject.getImpressionTrackers()).containsOnly("impressionUrl");
         assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(500);
-        assertThat(subject.getImpressionMinPercentageViewed()).isEqualTo(50);
+        assertThat(subject.getImpressionMinPercentageViewed()).isEqualTo(10);
     }
 
     @Test
@@ -71,6 +72,39 @@ public void setImpressionMinTimeViewed_whenTimeIsLessThan0_shouldNotSetTime() th
         assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(250);
     }
 
+    @Test
+    public void setImpressionMinTimeViewed_whenTimeIs0_shouldNotSetTime() throws Exception {
+        subject.setImpressionMinTimeViewed(250);
+        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(250);
+
+        subject.setImpressionMinTimeViewed(0);
+        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(250);
+    }
+
+    @Test
+    public void setImpressionMinPercentageViewed_whenPercentIsLessThan0_shouldNotSetPercentageViewed() {
+        subject.setImpressionMinPercentageViewed(-1);
+        assertThat(subject.getImpressionMinPercentageViewed()).isEqualTo(10);
+    }
+
+    @Test
+    public void setImpressionMinPercentageViewed_whenPercentIs0_shouldSetPercentageViewed() {
+        subject.setImpressionMinPercentageViewed(0);
+        assertThat(subject.getImpressionMinPercentageViewed()).isEqualTo(0);
+    }
+
+    @Test
+    public void setImpressionMinPercentageViewed_whenPercentIsGreaterThan100_shouldNotSetPercentageViewed() {
+        subject.setImpressionMinPercentageViewed(101);
+        assertThat(subject.getImpressionMinPercentageViewed()).isEqualTo(10);
+    }
+
+    @Test
+    public void setImpressionMinPercentageViewed_whenPercentIsNormal_shouldSetPercentageViewed() {
+        subject.setImpressionMinPercentageViewed(35);
+        assertThat(subject.getImpressionMinPercentageViewed()).isEqualTo(35);
+    }
+
     @Test
     public void setStarRating_withinValidRange_shouldSetStarRating() throws Exception {
         subject.setStarRating(0.0);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
index 2c6be2a7..4a903940 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
@@ -47,6 +47,7 @@
 @Config(constants = BuildConfig.class)
 public class VisibilityTrackerTest {
     private static final int MIN_PERCENTAGE_VIEWED = 50;
+    private static final Integer DEFAULT_MIN_VISIBLE_PX = 1;
 
     private Activity activity;
     private VisibilityTracker subject;
@@ -128,7 +129,7 @@ public void constructor_withApplicationContext_shouldNotSetOnPreDrawListener() {
 
     @Test
     public void addView_withVisibleView_shouldAddVisibleViewToTrackedViews() throws Exception {
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
 
         assertThat(trackedViews).hasSize(1);
     }
@@ -145,21 +146,21 @@ public void addView_withViewTreeObserverNotSet_shouldSetViewTreeObserver() {
 
         subject = new VisibilityTracker(activity.getApplicationContext(), trackedViews,
                 visibilityChecker, visibilityHandler);
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
 
         assertThat(subject.mWeakViewTreeObserver.get()).isEqualTo(viewTreeObserver);
     }
 
     @Test(expected = NullPointerException.class)
     public void addView_whenViewIsNull_shouldThrowNPE() throws Exception {
-        subject.addView(null, MIN_PERCENTAGE_VIEWED);
+        subject.addView(null, MIN_PERCENTAGE_VIEWED, null);
 
         assertThat(trackedViews).isEmpty();
     }
 
     @Test
     public void removeView_shouldRemoveFromTrackedViews() throws Exception {
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
 
         assertThat(trackedViews).hasSize(1);
         assertThat(trackedViews).containsKey(view);
@@ -171,8 +172,8 @@ public void removeView_shouldRemoveFromTrackedViews() throws Exception {
 
     @Test
     public void clear_shouldRemoveAllViewsFromTrackedViews_shouldRemoveMessagesFromVisibilityHandler_shouldResetIsVisibilityScheduled() throws Exception {
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
-        subject.addView(view2, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
+        subject.addView(view2, MIN_PERCENTAGE_VIEWED, null);
         assertThat(trackedViews).hasSize(2);
 
         subject.clear();
@@ -196,8 +197,8 @@ public void destroy_shouldCallClear_shouldRemoveListenerFromDecorView() throws E
 
         subject = new VisibilityTracker(activity1, trackedViews, visibilityChecker, visibilityHandler);
 
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
-        subject.addView(view2, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
+        subject.addView(view2, MIN_PERCENTAGE_VIEWED, null);
         assertThat(trackedViews).hasSize(2);
 
         subject.destroy();
@@ -210,7 +211,7 @@ public void destroy_shouldCallClear_shouldRemoveListenerFromDecorView() throws E
 
     @Test
     public void visibilityRunnable_run_withVisibleView_shouldCallOnVisibleCallback() throws Exception {
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
 
         subject.new VisibilityRunnable().run();
 
@@ -221,7 +222,7 @@ public void visibilityRunnable_run_withVisibleView_shouldCallOnVisibleCallback()
     @Test
     public void visibilityRunnable_run_withNonVisibleView_shouldCallOnNonVisibleCallback() throws Exception {
         when(view.getVisibility()).thenReturn(View.INVISIBLE);
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
 
         subject.new VisibilityRunnable().run();
 
@@ -249,89 +250,121 @@ public void hasRequiredTimeElapsed_withElapsedTimeLessThanMinTimeViewed_shouldRe
     @Test
     public void isMostlyVisible_whenParentIsNull_shouldReturnFalse() throws Exception {
         view = createViewMock(View.VISIBLE, 100, 100, 100, 100, false, true);
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenViewIsOffScreen_shouldReturnFalse() throws Exception {
         view = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, false);
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenViewIsEntirelyOnScreen_shouldReturnTrue() throws Exception {
         view = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
 
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isTrue();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isTrue();
     }
 
     @Test
     public void isMostlyVisible_whenViewIs50PercentVisible_shouldReturnTrue() throws Exception {
         view = createViewMock(View.VISIBLE, 50, 100, 100, 100, true, true);
 
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isTrue();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isTrue();
     }
 
     @Test
     public void isMostlyVisible_whenViewIs49PercentVisible_shouldReturnFalse() throws Exception {
         view = createViewMock(View.VISIBLE, 49, 100, 100, 100, true, true);
 
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenVisibleAreaIsZero_shouldReturnFalse() throws Exception {
         view = createViewMock(View.VISIBLE, 0, 0, 100, 100, true, true);
 
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenViewIsInvisibleOrGone_shouldReturnFalse() throws Exception {
         View view = createViewMock(View.INVISIBLE, 100, 100, 100, 100, true, true);
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isFalse();
 
         reset(view);
         view = createViewMock(View.GONE, 100, 100, 100, 100, true, true);
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenViewHasZeroWidthAndHeight_shouldReturnFalse() throws Exception {
         view = createViewMock(View.VISIBLE, 100, 100, 0, 0, true, true);
 
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenViewIsNull_shouldReturnFalse() throws Exception {
-        assertThat(visibilityChecker.isVisible(null, null, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(null, null, MIN_PERCENTAGE_VIEWED, null)).isFalse();
+    }
+
+    @Test
+    public void isMostlyVisible_whenVisibleAreaIsCheckedByPixel_shouldReturnTrue() throws Exception {
+        view = createViewMock(View.VISIBLE, 90, 90, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED,
+                DEFAULT_MIN_VISIBLE_PX)).isTrue();
+    }
+
+    @Test
+    public void isVisible_whenVisibleAreaIsCheckedByPixel_withExactlyOnePixelVisible_shouldReturnTrue() throws Exception {
+        view = createViewMock(View.VISIBLE, 1, 1, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED,
+                DEFAULT_MIN_VISIBLE_PX)).isTrue();
+    }
+
+    @Test
+    public void isVisible_whenVisibleAreaIsCheckedByPixel_withLargeNonDefaultMinimumPixel_shouldReturnFalse() throws Exception {
+        view = createViewMock(View.VISIBLE, 3, 3, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED,
+                25)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenVisibleAreaIsCheckedByPixel_withSmallNonDefaultMinimumPixel_shouldReturnTrue() throws Exception {
+        view = createViewMock(View.VISIBLE, 3, 3, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED,
+                5)).isTrue();
     }
 
     @Test
     public void addView_shouldClearViewAfterNumAccesses() {
         // Access 1 time
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
         assertThat(trackedViews).hasSize(1);
 
         // Access 2-49 times
         for (int i = 0; i < VisibilityTracker.NUM_ACCESSES_BEFORE_TRIMMING - 2; ++i) {
-            subject.addView(view2, MIN_PERCENTAGE_VIEWED);
+            subject.addView(view2, MIN_PERCENTAGE_VIEWED, null);
         }
         assertThat(trackedViews).hasSize(2);
 
         // 50th time
-        subject.addView(view2, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view2, MIN_PERCENTAGE_VIEWED, null);
         assertThat(trackedViews).hasSize(2);
 
         // 51-99
         for (int i = 0; i < VisibilityTracker.NUM_ACCESSES_BEFORE_TRIMMING - 1; ++i) {
-            subject.addView(view2, MIN_PERCENTAGE_VIEWED);
+            subject.addView(view2, MIN_PERCENTAGE_VIEWED, null);
         }
         assertThat(trackedViews).hasSize(2);
 
         // 100
-        subject.addView(view2, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view2, MIN_PERCENTAGE_VIEWED, null);
         assertThat(trackedViews).hasSize(1);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
index 56f0bc59..5db56a21 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
@@ -1,20 +1,19 @@
 package com.mopub.nativeads.factories;
 
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 import com.mopub.nativeads.CustomEventNative;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
 import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 
-
 @Config(constants = BuildConfig.class)
-@RunWith(RobolectricGradleTestRunner.class)
+@RunWith(SdkTestRunner.class)
 public class CustomEventNativeFactoryTest {
 
     @Before
diff --git a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
index 646c2dc4..094878e1 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
@@ -71,6 +71,7 @@ public void setup() {
         defaultHeaders.put(ResponseHeader.PAUSE_VISIBLE_PERCENT.getKey(), "25");
         defaultHeaders.put(ResponseHeader.IMPRESSION_MIN_VISIBLE_PERCENT.getKey(), "33%");
         defaultHeaders.put(ResponseHeader.IMPRESSION_VISIBLE_MS.getKey(), "2000");
+        defaultHeaders.put(ResponseHeader.IMPRESSION_MIN_VISIBLE_PX.getKey(), "1");
         defaultHeaders.put(ResponseHeader.MAX_BUFFER_MS.getKey(), "1000");
 
         MoPubEvents.setEventDispatcher(mockEventDispatcher);
@@ -169,9 +170,27 @@ public void parseNetworkResponse_forNativeVideo_shouldSucceed() throws Exception
         assertThat(serverExtras.get(DataKeys.PAUSE_VISIBLE_PERCENT)).isEqualTo("25");
         assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isEqualTo("33");
         assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("2000");
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX)).isEqualTo("1");
         assertThat(serverExtras.get(DataKeys.MAX_BUFFER_MS)).isEqualTo("1000");
     }
 
+    @Test
+    public void parseNetworkResponse_forNativeStatic_shouldSucceed() throws Exception {
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
+        NetworkResponse testResponse = new NetworkResponse(200,
+                "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        // Check the server extras
+        final Map<String, String> serverExtras = response.result.getServerExtras();
+        assertThat(serverExtras).isNotNull();
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isEqualTo("33");
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("2000");
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX)).isEqualTo("1");
+    }
+
     @Test
     public void parseNetworkResponse_forNativeVideo_shouldCombineServerExtrasAndEventData() throws Exception {
         defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.VIDEO_NATIVE);
@@ -192,6 +211,7 @@ public void parseNetworkResponse_forNativeVideo_shouldCombineServerExtrasAndEven
         assertThat(serverExtras.get(DataKeys.PAUSE_VISIBLE_PERCENT)).isEqualTo("25");
         assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isEqualTo("33");
         assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("2000");
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX)).isEqualTo("1");
         assertThat(serverExtras.get(DataKeys.MAX_BUFFER_MS)).isEqualTo("1000");
 
         assertThat(serverExtras.get("customEventKey1")).isEqualTo("value1");
@@ -203,6 +223,7 @@ public void parseNetworkResponse_forNativeVideo_withInvalidValues_shouldSucceed_
         defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.VIDEO_NATIVE);
         defaultHeaders.put(ResponseHeader.PLAY_VISIBLE_PERCENT.getKey(), "-1");
         defaultHeaders.put(ResponseHeader.PAUSE_VISIBLE_PERCENT.getKey(), "101%");
+        defaultHeaders.put(ResponseHeader.IMPRESSION_MIN_VISIBLE_PX.getKey(), "bob");
         defaultHeaders.put(ResponseHeader.IMPRESSION_MIN_VISIBLE_PERCENT.getKey(), "XX%");
         NetworkResponse testResponse = new NetworkResponse(200,
                 "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
@@ -217,6 +238,7 @@ public void parseNetworkResponse_forNativeVideo_withInvalidValues_shouldSucceed_
         assertThat(serverExtras.get(DataKeys.PAUSE_VISIBLE_PERCENT)).isNull();
         assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isNull();
         assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("2000");
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX)).isEqualTo("bob");
         assertThat(serverExtras.get(DataKeys.MAX_BUFFER_MS)).isEqualTo("1000");
     }
 
@@ -399,6 +421,73 @@ public void parseNetworkResponse_withUndefinedBrowserAgent_shouldDefaultToInApp(
         assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.IN_APP);
     }
 
+    @Test
+    public void parseNetworkResponse_forBannerAdFormat_withoutImpTrackingHeaders_shouldSucceed() {
+        subject = new AdRequest("testUrl", AdFormat.BANNER, "testAdUnitId", activity, mockListener);
+
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.result).isNotNull();
+        assertThat(response.result.getStringBody()).isEqualTo("abc");
+
+        // Check the server extras
+        final Map<String, String> serverExtras = response.result.getServerExtras();
+        assertThat(serverExtras).isNotNull();
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS)).isNull();
+        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS)).isNull();
+    }
+
+    @Test
+    public void parseNetworkResponse_forBannerAdFormat_withImpTrackingHeaders_shouldSucceed_shouldStoreHeadersInServerExtras() {
+        defaultHeaders.put(ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_DIPS.getKey(), "1");
+        defaultHeaders.put(ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_MS.getKey(), "0");
+
+        subject = new AdRequest("testUrl", AdFormat.BANNER, "testAdUnitId", activity, mockListener);
+
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.result).isNotNull();
+        assertThat(response.result.getStringBody()).isEqualTo("abc");
+
+        // Check the server extras
+        final Map<String, String> serverExtras = response.result.getServerExtras();
+        assertThat(serverExtras).isNotNull();
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS)).isEqualTo("1");
+        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS)).isEqualTo("0");
+    }
+
+    @Test
+    public void parseNetworkResponse_forNonBannerAdFormat_withImpTrackingHeaders_shouldSucceed_shouldIgnoreHeaders() {
+        defaultHeaders.put(ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_DIPS.getKey(), "1");
+        defaultHeaders.put(ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_MS.getKey(), "0");
+
+        // Non-banner AdFormat
+        subject = new AdRequest("testUrl", AdFormat.INTERSTITIAL, "testAdUnitId", activity, mockListener);
+
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.result).isNotNull();
+        assertThat(response.result.getStringBody()).isEqualTo("abc");
+
+        // Check the server extras
+        final Map<String, String> serverExtras = response.result.getServerExtras();
+        assertThat(serverExtras).isNotNull();
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS)).isNull();
+        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS)).isNull();
+    }
+
     @Test
     public void deliverResponse_shouldCallListenerOnSuccess() throws Exception {
         subject.deliverResponse(mockAdResponse);
@@ -474,8 +563,6 @@ public void getHeaders_withLocaleLanguageAsEmptyString_shouldNotAddLanguageHeade
         activity.getResources().getConfiguration().locale = new Locale(" ");
 
         assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
-
-
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
index 8af5748e..cd0ab708 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
@@ -56,8 +56,7 @@ public void setUp() {
         final HurlStack.UrlRewriter urlRewriter = new PlayServicesUrlRewriter(clientMetadata.getDeviceId(), activity);
         // No Custom SSL Factory
 
-        final String userAgent = Networking.getUserAgent(activity.getApplicationContext());
-        HttpStack httpStack = new RequestQueueHttpStack(userAgent, urlRewriter);
+        HttpStack httpStack = new RequestQueueHttpStack("test_user_agent", urlRewriter);
 
         Network network = new BasicNetwork(httpStack);
         File volleyCacheDir = new File(activity.getCacheDir().getPath() + File.separator
diff --git a/mopub-sdk/src/test/resources/robolectric.properties b/mopub-sdk/src/test/resources/robolectric.properties
index 3cbe9a8d..f339de43 100644
--- a/mopub-sdk/src/test/resources/robolectric.properties
+++ b/mopub-sdk/src/test/resources/robolectric.properties
@@ -1,3 +1,3 @@
 sdk=21
-shadows=com.mopub.nativeads.test.support.MoPubShadowDisplay,com.mopub.nativeads.test.support.MoPubShadowBitmap,com.mopub.mobileads.test.support.ShadowVastVideoView
-manifest=src/main/AndroidManifest.xml
\ No newline at end of file
+shadows=com.mopub.nativeads.test.support.MoPubShadowDisplay,com.mopub.nativeads.test.support.MoPubShadowBitmap,com.mopub.mobileads.test.support.ShadowVastVideoView,com.mopub.common.util.test.support.ShadowReflection
+manifest=src/main/AndroidManifest.xml
