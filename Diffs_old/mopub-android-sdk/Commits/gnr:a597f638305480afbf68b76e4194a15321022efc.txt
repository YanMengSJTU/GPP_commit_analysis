diff --git a/CHANGELOG.md b/CHANGELOG.md
index 27dce7c0..0c3bb146 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,12 @@
+## Version 2.3 (Jul 17, 2014)
+
+  - **Improved impression tracking for Native Ads** Impression tracking for native ads is now more accurate and more efficient.
+  - **Streamlined Maven Build and Dependencies** MoPub's Android SDK now depends on the Android v4 Support Library shipped with the Android Build tools. The MoPub Sample App also depends on Google Play Services to use the Android Advertising ID. We recommend building against Play Services in your app as well. For integration instructions, see the [wiki](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started).
+  - **Removed AdMob Custom Events and JAR** AdMob's SDK is deprecated by Google and the APIs have been moved to Google Play Services. Existing AdMob adunits will now invoke the appropriate Google Play Services custom event. Developers must update their integration to use the Google Play Services custom events located in the extras folder by August 1.
+  - **Updated Third-Party Network Compatibility** MoPub's provided Custom Events (included in the extras/ folder) are now compatible with the latest SDK releases from Millennial Media (5.3.0), Vungle (3.1.0), InMobi (4.4.1) and Google Play Services (5.0.77).
+  - Fixed intermittent NullPointerException in MoPubNative#requestNativeAd; fixes [Github issue #97] (https://github.com/mopub/mopub-android-sdk/issues/97)
+  - Fixed an issue where MRAID interstitials could be not be closed.
+
 ## Version 2.2 (Jun 19, 2014)
 
   - **Native ads mediation** release; integration instructions and documentation are available on the [GitHub wiki](https://github.com/mopub/mopub-android-sdk/wiki/Integrating-Native-Third-Party-Ad-Networks). Added custom event native implementations to the native extras directory of the SDK (`/extras/src/com/mopub/nativeads`), with initial support for the following networks:
diff --git a/README.md b/README.md
index d9e6028b..4ddf8eb7 100644
--- a/README.md
+++ b/README.md
@@ -12,7 +12,7 @@ The MoPub SDK is distributed as source code that you can include in your applica
 
 - **[MoPub Android Full SDK.zip](http://bit.ly/YUdU9v)**
 
-  Includes everything you need to serve HTML and MRAID MoPub advertisiments *and* built-in support for two major third party ad networks - [Google AdMob](http://www.google.com/ads/admob/) and [Millennial Media](http://www.millennialmedia.com/) - including the required third party binaries.
+  Includes everything you need to serve HTML and MRAID MoPub advertisiments *and* built-in support for Millennial Media third party ad network - [Millennial Media](http://www.millennialmedia.com/) - including the required third party binaries.
 
 - **[MoPub Android Base SDK.zip](http://bit.ly/YUdWhH)**
 
@@ -27,11 +27,12 @@ Integration instructions are available on the [wiki](https://github.com/mopub/mo
 
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for details.
 
-  - **Native ads mediation** release; integration instructions and documentation are available on the [GitHub wiki](https://github.com/mopub/mopub-android-sdk/wiki/Integrating-Native-Third-Party-Ad-Networks). Added custom event native implementations to the native extras directory of the SDK (`/extras/src/com/mopub/nativeads`), with initial support for the following networks:
-  	- Facebook Audience Network (`FacebookNative.java`)
-  	- InMobi Native Ads (`InMobiNative.java`)
-  - **Native ads content filtering**: Added the ability to specify which native ad elements you want to receive from the MoPub Marketplace to optimize bandwidth use and download only required assets, via `RequestParameters.Builder#desiredAssets(â€¦)`. This feature only works for the six standard Marketplace assets, found in `RequestParameters.NativeAdAsset`. Any additional elements added in direct sold ads will always be sent down in the extras.
-  - Added star rating information to the `NativeResponse` object, via `NativeResponse#getStarRating()`. This method returns a `Double` corresponding to an app's rating on a 5-star scale.
+  - **Improved impression tracking for Native Ads** Impression tracking for native ads is now more accurate and more efficient.
+
+  - **Streamlined Maven Build and Dependencies** MoPub's Android SDK now depends on the Android v4 Support Library shipped with the Android Build tools. The MoPub Sample App also depends on Google Play Services to use the Android Advertising ID. We recommend building against Play Services in your app as well. For integration instructions, see the [wiki](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started).
+
+  - **Updated Third-Party Network Compatibility** MoPub's provided Custom Events (included in the extras/ folder) are now compatible with the latest SDK releases from Millennial Media (5.3.0), Vungle (3.1.0), and InMobi (4.4.1), Google Play Services (5.0.77).
+
   - Bug fixes
 
 ## Requirements
diff --git a/extras/src/com/mopub/mobileads/GoogleAdMobBanner.java b/extras/src/com/mopub/mobileads/GoogleAdMobBanner.java
deleted file mode 100644
index c3a2e31d..00000000
--- a/extras/src/com/mopub/mobileads/GoogleAdMobBanner.java
+++ /dev/null
@@ -1,188 +0,0 @@
-/*
- * Copyright (c) 2010, MoPub Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *
- * * Redistributions of source code must retain the above copyright
- *   notice, this list of conditions and the following disclaimer.
- *
- * * Redistributions in binary form must reproduce the above copyright
- *   notice, this list of conditions and the following disclaimer in the
- *   documentation and/or other materials provided with the distribution.
- *
- * * Neither the name of 'MoPub Inc.' nor the names of its contributors
- *   may be used to endorse or promote products derived from this software
- *   without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.location.Location;
-import android.util.Log;
-import com.google.ads.Ad;
-import com.google.ads.AdListener;
-import com.google.ads.AdRequest;
-import com.google.ads.AdRequest.ErrorCode;
-import com.google.ads.AdSize;
-import com.google.ads.AdView;
-import com.mopub.common.util.Views;
-
-import java.util.*;
-
-import static com.google.ads.AdSize.BANNER;
-import static com.google.ads.AdSize.IAB_BANNER;
-import static com.google.ads.AdSize.IAB_LEADERBOARD;
-import static com.google.ads.AdSize.IAB_MRECT;
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
-
-/*
- * Compatible with version 6.4.1 of the Google AdMob Ads SDK.
- */
-
-class GoogleAdMobBanner extends CustomEventBanner implements AdListener {
-    /*
-     * These keys are intended for MoPub internal use. Do not modify.
-     */
-    public static final String AD_UNIT_ID_KEY = "adUnitID";
-    public static final String AD_WIDTH_KEY = "adWidth";
-    public static final String AD_HEIGHT_KEY = "adHeight";
-    public static final String LOCATION_KEY = "location";
-
-    private AdView mAdMobView;
-    private CustomEventBannerListener mBannerListener;
-
-    @Override
-    protected void loadBanner(Context context,
-                              CustomEventBannerListener customEventBannerListener,
-                              Map<String, Object> localExtras,
-                              Map<String, String> serverExtras) {
-        mBannerListener = customEventBannerListener;
-
-        String adUnitId;
-        int adWidth;
-        int adHeight;
-
-        if (!(context instanceof Activity)) {
-            mBannerListener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        if (extrasAreValid(serverExtras)) {
-            adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
-            adWidth = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
-            adHeight = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
-        } else {
-            mBannerListener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        AdSize adSize = calculateAdSize(adWidth, adHeight);
-        if (adSize == null) {
-            Log.d("MoPub", "Unsupported AdMob ad size: " + adWidth + "x" + adHeight);
-            mBannerListener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        mAdMobView = new AdView((Activity) context, adSize, adUnitId);
-        mAdMobView.setAdListener(this);
-
-        AdRequest request = new AdRequest();
-        Location location = extractLocation(localExtras);
-        if (location != null) request.setLocation(location);
-
-        mAdMobView.loadAd(request);
-    }
-
-    @Override
-    protected void onInvalidate() {
-        mAdMobView.setAdListener(null);
-        Views.removeFromParent(mAdMobView);
-        mAdMobView.destroy();
-    }
-
-    private Location extractLocation(Map<String, Object> localExtras) {
-        Object location = localExtras.get(LOCATION_KEY);
-        if (location instanceof Location) {
-            return (Location) location;
-        }
-        return null;
-    }
-
-    private AdSize calculateAdSize(int width, int height) {
-        // Use the smallest AdMob AdSize that will properly contain the adView
-        if (width <= BANNER.getWidth() && height <= BANNER.getHeight()) {
-            return BANNER;
-        } else if (width <= IAB_MRECT.getWidth() && height <= IAB_MRECT.getHeight()) {
-            return IAB_MRECT;
-        } else if (width <= IAB_BANNER.getWidth() && height <= IAB_BANNER.getHeight()) {
-            return IAB_BANNER;
-        } else if (width <= IAB_LEADERBOARD.getWidth() && height <= IAB_LEADERBOARD.getHeight()) {
-            return IAB_LEADERBOARD;
-        } else {
-            return null;
-        }
-    }
-
-    private boolean extrasAreValid(Map<String, String> serverExtras) {
-        try {
-            Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
-            Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
-        } catch (NumberFormatException e) {
-            return false;
-        }
-
-        return serverExtras.containsKey(AD_UNIT_ID_KEY);
-    }
-
-    @Deprecated // for testing
-    AdView getAdMobView() {
-        return mAdMobView;
-    }
-
-    /**
-     * AdMob AdListener implementation
-     */
-    @Override
-    public void onFailedToReceiveAd(Ad ad, ErrorCode error) {
-        Log.d("MoPub", "Google AdMob banner ad failed to load.");
-        mBannerListener.onBannerFailed(NETWORK_NO_FILL);
-    }
-
-    @Override
-    public void onPresentScreen(Ad ad) {
-        Log.d("MoPub", "Google AdMob banner ad clicked.");
-        mBannerListener.onBannerClicked();
-    }
-
-    @Override
-    public void onReceiveAd(Ad ad) {
-        Log.d("MoPub", "Google AdMob banner ad loaded successfully. Showing ad...");
-        mBannerListener.onBannerLoaded(mAdMobView);
-    }
-
-    @Override
-    public void onLeaveApplication(Ad ad) {
-    }
-
-    @Override
-    public void onDismissScreen(Ad ad) {
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/GoogleAdMobInterstitial.java b/extras/src/com/mopub/mobileads/GoogleAdMobInterstitial.java
deleted file mode 100644
index 4783924b..00000000
--- a/extras/src/com/mopub/mobileads/GoogleAdMobInterstitial.java
+++ /dev/null
@@ -1,163 +0,0 @@
-/*
- * Copyright (c) 2011, MoPub Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *
- * * Redistributions of source code must retain the above copyright
- *   notice, this list of conditions and the following disclaimer.
- *
- * * Redistributions in binary form must reproduce the above copyright
- *   notice, this list of conditions and the following disclaimer in the
- *   documentation and/or other materials provided with the distribution.
- *
- * * Neither the name of 'MoPub Inc.' nor the names of its contributors
- *   may be used to endorse or promote products derived from this software
- *   without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.location.Location;
-import android.util.Log;
-import com.google.ads.Ad;
-import com.google.ads.AdListener;
-import com.google.ads.AdRequest;
-import com.google.ads.AdRequest.ErrorCode;
-import com.google.ads.InterstitialAd;
-
-import java.util.*;
-
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
-
-/*
- * Compatible with version 6.4.1 of the Google AdMob Ads SDK.
- */
-
-class GoogleAdMobInterstitial extends CustomEventInterstitial implements AdListener {
-    /*
-     * These keys are intended for MoPub internal use. Do not modify.
-     */
-    public static final String AD_UNIT_ID_KEY = "adUnitID";
-    public static final String LOCATION_KEY = "location";
-
-    private InterstitialAd mInterstitialAd;
-    private boolean mHasAlreadyRegisteredClick;
-    private CustomEventInterstitialListener mInterstitialListener;
-
-    @Override
-    protected void loadInterstitial(Context context,
-                                    CustomEventInterstitialListener customEventInterstitialListener,
-                                    Map<String, Object> localExtras,
-                                    Map<String, String> serverExtras) {
-        mInterstitialListener = customEventInterstitialListener;
-
-        if (!(context instanceof Activity)) {
-            mInterstitialListener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        String pubId;
-        if (extrasAreValid(serverExtras)) {
-            pubId = serverExtras.get(AD_UNIT_ID_KEY);
-        } else {
-            mInterstitialListener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        mInterstitialAd = new InterstitialAd((Activity) context, pubId);
-        mInterstitialAd.setAdListener(this);
-
-        AdRequest adRequest = new AdRequest();
-        Location location = extractLocation(localExtras);
-        if (location != null) adRequest.setLocation(location);
-        mInterstitialAd.loadAd(adRequest);
-    }
-
-    @Override
-    protected void showInterstitial() {
-        if (mInterstitialAd.isReady()) {
-            mInterstitialAd.show();
-        } else {
-            Log.d("MoPub", "Tried to show a Google AdMob interstitial ad before it finished loading. Please try again.");
-        }
-    }
-
-    @Override
-    protected void onInvalidate() {
-        if (mInterstitialAd != null) {
-            mInterstitialAd.setAdListener(null);
-        }
-    }
-
-    private Location extractLocation(Map<String, Object> localExtras) {
-        Object location = localExtras.get(LOCATION_KEY);
-        if (location instanceof Location) {
-            return (Location) location;
-        }
-        return null;
-    }
-
-    private boolean extrasAreValid(Map<String, String> serverExtras) {
-        return serverExtras.containsKey(AD_UNIT_ID_KEY);
-    }
-
-    @Deprecated // for testing
-    InterstitialAd getAdMobInterstitial() {
-        return mInterstitialAd;
-    }
-
-    /*
-     * AdMob AdListener implementation
-     */
-
-    @Override
-    public void onDismissScreen(Ad ad) {
-        Log.d("MoPub", "Google AdMob interstitial ad dismissed.");
-        mInterstitialListener.onInterstitialDismissed();
-    }
-
-    @Override
-    public void onFailedToReceiveAd(Ad ad, ErrorCode error) {
-        Log.d("MoPub", "Google AdMob interstitial ad failed to load.");
-        mInterstitialListener.onInterstitialFailed(NETWORK_NO_FILL);
-    }
-
-    @Override
-    public void onLeaveApplication(Ad ad) {
-        if (!mHasAlreadyRegisteredClick) {
-            Log.d("MoPub", "Google AdMob interstitial ad clicked.");
-            mHasAlreadyRegisteredClick = true;
-            mInterstitialListener.onInterstitialClicked();
-        }
-    }
-
-    @Override
-    public void onPresentScreen(Ad ad) {
-        Log.d("MoPub", "Showing Google AdMob interstitial ad.");
-        mInterstitialListener.onInterstitialShown();
-    }
-
-    @Override
-    public void onReceiveAd(Ad ad) {
-        Log.d("MoPub", "Google AdMob interstitial ad loaded successfully.");
-        mInterstitialListener.onInterstitialLoaded();
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
index d844536f..f5a26c6a 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
@@ -3,19 +3,27 @@
 import android.content.Context;
 import android.util.Log;
 
-import java.util.Map;
-
+import com.google.android.gms.ads.AdListener;
+import com.google.android.gms.ads.AdRequest;
+import com.google.android.gms.ads.AdSize;
+import com.google.android.gms.ads.AdView;
 import com.mopub.common.util.Views;
 
-import com.google.android.gms.ads.*;
+import java.util.Map;
 
-import static com.google.android.gms.ads.AdSize.*;
+import static com.google.android.gms.ads.AdSize.BANNER;
+import static com.google.android.gms.ads.AdSize.FULL_BANNER;
+import static com.google.android.gms.ads.AdSize.LEADERBOARD;
+import static com.google.android.gms.ads.AdSize.MEDIUM_RECTANGLE;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
 
 /*
- * Compatible with version 4.0.30 of the Google Play Services SDK.
+ * Compatible with version 5.0.77 of the Google Play Services SDK.
  */
+
+// Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
+
 class GooglePlayServicesBanner extends CustomEventBanner {
     /*
      * These keys are intended for MoPub internal use. Do not modify.
@@ -30,15 +38,15 @@
 
     @Override
     protected void loadBanner(
-            Context context,
-            CustomEventBannerListener customEventBannerListener,
-            Map<String, Object> localExtras,
-            Map<String, String> serverExtras) {
+            final Context context,
+            final CustomEventBannerListener customEventBannerListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
         mBannerListener = customEventBannerListener;
 
-        String adUnitId;
-        int adWidth;
-        int adHeight;
+        final String adUnitId;
+        final int adWidth;
+        final int adHeight;
 
         if (extrasAreValid(serverExtras)) {
             adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
@@ -53,7 +61,7 @@ protected void loadBanner(
         mGoogleAdView.setAdListener(new AdViewListener());
         mGoogleAdView.setAdUnitId(adUnitId);
 
-        AdSize adSize = calculateAdSize(adWidth, adHeight);
+        final AdSize adSize = calculateAdSize(adWidth, adHeight);
         if (adSize == null) {
             mBannerListener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
             return;
@@ -61,7 +69,7 @@ protected void loadBanner(
 
         mGoogleAdView.setAdSize(adSize);
 
-        AdRequest adRequest = new AdRequest.Builder().build();
+        final AdRequest adRequest = new AdRequest.Builder().build();
 
         mGoogleAdView.loadAd(adRequest);
     }
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
index a37b5909..84d433e5 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
@@ -1,10 +1,5 @@
 package com.mopub.mobileads;
 
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
-
-import java.util.Map;
-
 import android.content.Context;
 import android.util.Log;
 
@@ -12,9 +7,17 @@
 import com.google.android.gms.ads.AdRequest;
 import com.google.android.gms.ads.InterstitialAd;
 
+import java.util.Map;
+
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+
 /*
- * Compatible with version 4.0.30 of the Google Play Services SDK.
+ * Compatible with version 5.0.77 of the Google Play Services SDK.
  */
+
+// Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
+
 public class GooglePlayServicesInterstitial extends CustomEventInterstitial {
     /*
      * These keys are intended for MoPub internal use. Do not modify.
@@ -27,13 +30,13 @@
 
     @Override
     protected void loadInterstitial(
-            Context context,
-            CustomEventInterstitialListener customEventInterstitialListener,
-            Map<String, Object> localExtras,
-            Map<String, String> serverExtras) {
+            final Context context,
+            final CustomEventInterstitialListener customEventInterstitialListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
         mInterstitialListener = customEventInterstitialListener;
 
-        String adUnitId;
+        final String adUnitId;
 
         if (extrasAreValid(serverExtras)) {
             adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
@@ -46,7 +49,7 @@ protected void loadInterstitial(
         mGoogleInterstitialAd.setAdListener(new InterstitialAdListener());
         mGoogleInterstitialAd.setAdUnitId(adUnitId);
 
-        AdRequest adRequest = new AdRequest.Builder().build();
+        final AdRequest adRequest = new AdRequest.Builder().build();
 
         mGoogleInterstitialAd.loadAd(adRequest);
     }
diff --git a/extras/src/com/mopub/mobileads/GreystripeBanner.java b/extras/src/com/mopub/mobileads/GreystripeBanner.java
index 40a06722..8497f2e6 100644
--- a/extras/src/com/mopub/mobileads/GreystripeBanner.java
+++ b/extras/src/com/mopub/mobileads/GreystripeBanner.java
@@ -2,6 +2,8 @@
 
 import android.content.Context;
 import android.util.Log;
+
+import com.greystripe.sdk.AdPosition;
 import com.greystripe.sdk.GSAd;
 import com.greystripe.sdk.GSAdErrorCode;
 import com.greystripe.sdk.GSAdListener;
@@ -12,7 +14,7 @@
 import java.util.*;
 
 /*
- * Tested with Greystripe SDK 2.3.0.
+ * Tested with Greystripe SDK 2.4.0.
  */
 class GreystripeBanner extends CustomEventBanner implements GSAdListener {
     public static final String DEFAULT_GREYSTRIPE_APP_ID = "YOUR_GREYSTRIPE_APP_ID";
@@ -24,8 +26,10 @@
      * Abstract methods from CustomEventBanner
      */
     @Override
-    protected void loadBanner(Context context, CustomEventBannerListener bannerListener,
-                              Map<String, Object> localExtras, Map<String, String> serverExtras) {
+    protected void loadBanner(final Context context,
+                              final CustomEventBannerListener bannerListener,
+                              final Map<String, Object> localExtras,
+                              final Map<String, String> serverExtras) {
         mBannerListener = bannerListener;
 
         /*
@@ -48,25 +52,25 @@ protected void onInvalidate() {
      * GSAdListener implementation
      */
     @Override
-    public void onAdClickthrough(GSAd greystripeAd) {
+    public void onAdClickthrough(final GSAd greystripeAd) {
         Log.d("MoPub", "Greystripe banner ad clicked.");
         mBannerListener.onBannerClicked();
     }
 
     @Override
-    public void onAdDismissal(GSAd greystripeAd) {
+    public void onAdDismissal(final GSAd greystripeAd) {
         Log.d("MoPub", "Greystripe banner ad modal dismissed.");
     }
 
     @Override
-    public void onFailedToFetchAd(GSAd greystripeAd, GSAdErrorCode errorCode) {
+    public void onFailedToFetchAd(final GSAd greystripeAd, final GSAdErrorCode errorCode) {
         Log.d("MoPub", "Greystripe banner ad failed to load.");
         mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
     }
 
     @Override
-    public void onFetchedAd(GSAd greystripeAd) {
-        if (mGreystripeAd != null & mGreystripeAd.isAdReady()) {
+    public void onFetchedAd(final GSAd greystripeAd) {
+        if (mGreystripeAd != null && mGreystripeAd.isAdReady()) {
             Log.d("MoPub", "Greystripe banner ad loaded successfully. Showing ad...");
             mBannerListener.onBannerLoaded(mGreystripeAd);
         } else {
@@ -75,10 +79,18 @@ public void onFetchedAd(GSAd greystripeAd) {
     }
 
     @Override
-    public void onAdCollapse(GSAd greystripeAd) {
+    public void onAdCollapse(final GSAd greystripeAd) {
+        Log.d("MoPub", "Greystripe banner ad collapsed.");
+        mBannerListener.onBannerCollapsed();
+    }
+
+    @Override
+    public void onAdExpansion(final GSAd greystripeAd) {
+        Log.d("MoPub", "Greystripe banner ad expanded.");
+        mBannerListener.onBannerExpanded();
     }
 
     @Override
-    public void onAdExpansion(GSAd greystripeAd) {
+    public void onAdResize(final GSAd gsAd, final AdPosition adPosition) {
     }
 }
diff --git a/extras/src/com/mopub/mobileads/GreystripeInterstitial.java b/extras/src/com/mopub/mobileads/GreystripeInterstitial.java
index db4d2a4b..57dc89ab 100644
--- a/extras/src/com/mopub/mobileads/GreystripeInterstitial.java
+++ b/extras/src/com/mopub/mobileads/GreystripeInterstitial.java
@@ -2,6 +2,8 @@
 
 import android.content.Context;
 import android.util.Log;
+
+import com.greystripe.sdk.AdPosition;
 import com.greystripe.sdk.GSAd;
 import com.greystripe.sdk.GSAdErrorCode;
 import com.greystripe.sdk.GSAdListener;
@@ -12,7 +14,7 @@
 import java.util.*;
 
 /*
- * Tested with Greystripe SDK 2.3.0.
+ * Tested with Greystripe SDK 2.4.0.
  */
 class GreystripeInterstitial extends CustomEventInterstitial implements GSAdListener {
     public static final String DEFAULT_GREYSTRIPE_APP_ID = "YOUR_GREYSTRIPE_APP_ID";
@@ -24,8 +26,10 @@
      * Abstract methods from CustomEventInterstitial
      */
     @Override
-    protected void loadInterstitial(Context context, CustomEventInterstitialListener interstitialListener,
-                                    Map<String, Object> localExtras, Map<String, String> serverExtras) {
+    protected void loadInterstitial(final Context context,
+                                    final CustomEventInterstitialListener interstitialListener,
+                                    final Map<String, Object> localExtras,
+                                    final Map<String, String> serverExtras) {
         mInterstitialListener = interstitialListener;
 
         /*
@@ -61,7 +65,7 @@ protected void onInvalidate() {
      * GSAdListener implementation
      */
     @Override
-    public void onAdClickthrough(GSAd greystripeAd) {
+    public void onAdClickthrough(final GSAd greystripeAd) {
         Log.d("MoPub", "Greystripe interstitial ad clicked.");
         mInterstitialListener.onInterstitialClicked();
 
@@ -74,19 +78,19 @@ public void onAdClickthrough(GSAd greystripeAd) {
     }
 
     @Override
-    public void onAdDismissal(GSAd greystripeAd) {
+    public void onAdDismissal(final GSAd greystripeAd) {
         Log.d("MoPub", "Greystripe interstitial ad dismissed.");
         mInterstitialListener.onInterstitialDismissed();
     }
 
     @Override
-    public void onFailedToFetchAd(GSAd greystripeAd, GSAdErrorCode errorCode) {
+    public void onFailedToFetchAd(final GSAd greystripeAd, final GSAdErrorCode errorCode) {
         Log.d("MoPub", "Greystripe interstitial ad failed to load.");
         mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
     }
 
     @Override
-    public void onFetchedAd(GSAd greystripeAd) {
+    public void onFetchedAd(final GSAd greystripeAd) {
         if (mGreystripeAd != null && mGreystripeAd.isAdReady()) {
             Log.d("MoPub", "Greysripe interstitial ad loaded successfully.");
             mInterstitialListener.onInterstitialLoaded();
@@ -96,10 +100,14 @@ public void onFetchedAd(GSAd greystripeAd) {
     }
 
     @Override
-    public void onAdCollapse(GSAd greystripeAd) {
+    public void onAdCollapse(final GSAd greystripeAd) {
+    }
+
+    @Override
+    public void onAdExpansion(final GSAd greystripeAd) {
     }
 
     @Override
-    public void onAdExpansion(GSAd greystripeAd) {
+    public void onAdResize(final GSAd gsAd, final AdPosition adPosition) {
     }
 }
diff --git a/extras/src/com/mopub/mobileads/InMobiBanner.java b/extras/src/com/mopub/mobileads/InMobiBanner.java
index e73d1afa..ac22d974 100644
--- a/extras/src/com/mopub/mobileads/InMobiBanner.java
+++ b/extras/src/com/mopub/mobileads/InMobiBanner.java
@@ -15,114 +15,114 @@
 import java.util.*;
 
 /*
- * Tested with InMobi SDK 4.1.1
+ * Tested with InMobi SDK 4.4.1
  */
 public class InMobiBanner extends CustomEventBanner implements IMBannerListener {
 
-	@Override
-	protected void loadBanner(Context context,
-			CustomEventBannerListener bannerListener,
-			Map<String, Object> localExtras, Map<String, String> serverExtras) {
-		mBannerListener = bannerListener;
-		String inMobiAppId = "YOUR_INMOBI_APP_ID";
-
-		Activity activity = null;
-		if (context instanceof Activity) {
-			activity = (Activity) context;
-		} else {
-			// You may also pass in an Activity Context in the localExtras map
-			// and retrieve it here.
-		}
-		if (activity == null) {
-			mBannerListener.onBannerFailed(null);
-			return;
-		}
-		if (!isAppInitialized) {
-			InMobi.initialize(activity, inMobiAppId);
+    @Override
+    protected void loadBanner(Context context,
+                              CustomEventBannerListener bannerListener,
+                              Map<String, Object> localExtras, Map<String, String> serverExtras) {
+        mBannerListener = bannerListener;
+        String inMobiAppId = "YOUR_INMOBI_APP_ID";
+
+        Activity activity = null;
+        if (context instanceof Activity) {
+            activity = (Activity) context;
+        } else {
+            // You may also pass in an Activity Context in the localExtras map
+            // and retrieve it here.
+        }
+        if (activity == null) {
+            mBannerListener.onBannerFailed(null);
+            return;
+        }
+        if (!isAppInitialized) {
+            InMobi.initialize(activity, inMobiAppId);
             isAppInitialized = true;
-		}
+        }
 
 		/*
 		 * You may also pass this String down in the serverExtras Map by
 		 * specifying Custom Event Data in MoPub's web interface.
 		 */
-		iMBanner = new IMBanner(activity, inMobiAppId,
-				IMBanner.INMOBI_AD_UNIT_320X50);
+        iMBanner = new IMBanner(activity, inMobiAppId,
+                IMBanner.INMOBI_AD_UNIT_320X50);
 
         Map<String, String> map = new HashMap<String, String>();
         map.put("tp", "c_mopub");
         map.put("tp-ver", MoPub.SDK_VERSION);
         iMBanner.setRequestParams(map);
-		InMobi.setLogLevel(LOG_LEVEL.VERBOSE);
-		iMBanner.setIMBannerListener(this);
-		iMBanner.setRefreshInterval(-1);
-		iMBanner.loadBanner();
+        InMobi.setLogLevel(LOG_LEVEL.VERBOSE);
+        iMBanner.setIMBannerListener(this);
+        iMBanner.setRefreshInterval(-1);
+        iMBanner.loadBanner();
 
-	}
+    }
 
-	private CustomEventBannerListener mBannerListener;
-	private IMBanner iMBanner;
-	private static boolean isAppInitialized = false;
+    private CustomEventBannerListener mBannerListener;
+    private IMBanner iMBanner;
+    private static boolean isAppInitialized = false;
 
 	/*
 	 * Abstract methods from CustomEventBanner
 	 */
 
-	@Override
-	public void onInvalidate() {
-		if (iMBanner != null) {
+    @Override
+    public void onInvalidate() {
+        if (iMBanner != null) {
             iMBanner.setIMBannerListener(null);
             Views.removeFromParent(iMBanner);
             iMBanner.destroy();
-		}
-	}
-
-	@Override
-	public void onBannerInteraction(IMBanner imBanner, Map<String, String> map) {
-		mBannerListener.onBannerClicked();
-	}
-
-	@Override
-	public void onBannerRequestFailed(IMBanner imBanner, IMErrorCode imErrorCode) {
-
-		if (imErrorCode == IMErrorCode.INTERNAL_ERROR) {
-			mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
-		} else if (imErrorCode == IMErrorCode.INVALID_REQUEST) {
-			mBannerListener
-					.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-		} else if (imErrorCode == IMErrorCode.NETWORK_ERROR) {
-			mBannerListener
-					.onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-		} else if (imErrorCode == IMErrorCode.NO_FILL) {
-			mBannerListener.onBannerFailed(MoPubErrorCode.NO_FILL);
-		} else {
-			mBannerListener.onBannerFailed(MoPubErrorCode.UNSPECIFIED);
-		}
-	}
-
-	@Override
-	public void onBannerRequestSucceeded(IMBanner imBanner) {
-		if (iMBanner != null) {
-			mBannerListener.onBannerLoaded(imBanner);
-
-		} else {
-			mBannerListener.onBannerFailed(null);
-		}
-	}
-
-	@Override
-	public void onDismissBannerScreen(IMBanner imBanner) {
-		mBannerListener.onBannerCollapsed();
-	}
-
-	@Override
-	public void onLeaveApplication(IMBanner imBanner) {
-
-	}
-
-	@Override
-	public void onShowBannerScreen(IMBanner imBanner) {
-		mBannerListener.onBannerExpanded();
-	}
+        }
+    }
+
+    @Override
+    public void onBannerInteraction(IMBanner imBanner, Map<String, String> map) {
+        mBannerListener.onBannerClicked();
+    }
+
+    @Override
+    public void onBannerRequestFailed(IMBanner imBanner, IMErrorCode imErrorCode) {
+
+        if (imErrorCode == IMErrorCode.INTERNAL_ERROR) {
+            mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
+        } else if (imErrorCode == IMErrorCode.INVALID_REQUEST) {
+            mBannerListener
+                    .onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+        } else if (imErrorCode == IMErrorCode.NETWORK_ERROR) {
+            mBannerListener
+                    .onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+        } else if (imErrorCode == IMErrorCode.NO_FILL) {
+            mBannerListener.onBannerFailed(MoPubErrorCode.NO_FILL);
+        } else {
+            mBannerListener.onBannerFailed(MoPubErrorCode.UNSPECIFIED);
+        }
+    }
+
+    @Override
+    public void onBannerRequestSucceeded(IMBanner imBanner) {
+        if (iMBanner != null) {
+            mBannerListener.onBannerLoaded(imBanner);
+
+        } else {
+            mBannerListener.onBannerFailed(null);
+        }
+    }
+
+    @Override
+    public void onDismissBannerScreen(IMBanner imBanner) {
+        mBannerListener.onBannerCollapsed();
+    }
+
+    @Override
+    public void onLeaveApplication(IMBanner imBanner) {
+
+    }
+
+    @Override
+    public void onShowBannerScreen(IMBanner imBanner) {
+        mBannerListener.onBannerExpanded();
+    }
 
 }
diff --git a/extras/src/com/mopub/mobileads/InMobiInterstitial.java b/extras/src/com/mopub/mobileads/InMobiInterstitial.java
index d74209d5..80f222d7 100644
--- a/extras/src/com/mopub/mobileads/InMobiInterstitial.java
+++ b/extras/src/com/mopub/mobileads/InMobiInterstitial.java
@@ -13,110 +13,110 @@
 import java.util.*;
 
 /*
- * Tested with InMobi SDK  4.1.1
+ * Tested with InMobi SDK  4.4.1
  */
 public class InMobiInterstitial extends CustomEventInterstitial implements IMInterstitialListener {
 
-	@Override
-	protected void loadInterstitial(Context context,
-			CustomEventInterstitialListener interstitialListener,
-			Map<String, Object> localExtras, Map<String, String> serverExtras) {
-		mInterstitialListener = interstitialListener;
-		String inMobiAppId = "YOUR_INMOBI_APP_ID";
-
-		Activity activity = null;
-		if (context instanceof Activity) {
-			activity = (Activity) context;
-		} else {
-			// You may also pass in an Activity Context in the localExtras map
-			// and retrieve it here.
-		}
-
-		if (activity == null) {
-			mInterstitialListener.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
-			return;
-		}
+    @Override
+    protected void loadInterstitial(Context context,
+                                    CustomEventInterstitialListener interstitialListener,
+                                    Map<String, Object> localExtras, Map<String, String> serverExtras) {
+        mInterstitialListener = interstitialListener;
+        String inMobiAppId = "YOUR_INMOBI_APP_ID";
+
+        Activity activity = null;
+        if (context instanceof Activity) {
+            activity = (Activity) context;
+        } else {
+            // You may also pass in an Activity Context in the localExtras map
+            // and retrieve it here.
+        }
+
+        if (activity == null) {
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
+            return;
+        }
 
 		/*
 		 * You may also pass this String down in the serverExtras Map by
 		 * specifying Custom Event Data in MoPub's web interface.
 		 */
-		if (!isAppInitialized) {
-			InMobi.initialize(activity, inMobiAppId);
+        if (!isAppInitialized) {
+            InMobi.initialize(activity, inMobiAppId);
             isAppInitialized = true;
-		}
-		this.iMInterstitial = new IMInterstitial(activity, inMobiAppId);
+        }
+        this.iMInterstitial = new IMInterstitial(activity, inMobiAppId);
 
         Map<String, String> map = new HashMap<String, String>();
         map.put("tp", "c_mopub");
         map.put("tp-ver", MoPub.SDK_VERSION);
         iMInterstitial.setRequestParams(map);
-		iMInterstitial.setIMInterstitialListener(this);
-		iMInterstitial.loadInterstitial();
-	}
+        iMInterstitial.setIMInterstitialListener(this);
+        iMInterstitial.loadInterstitial();
+    }
 
-	private CustomEventInterstitialListener mInterstitialListener;
-	private IMInterstitial iMInterstitial;
-	private static boolean isAppInitialized = false;
+    private CustomEventInterstitialListener mInterstitialListener;
+    private IMInterstitial iMInterstitial;
+    private static boolean isAppInitialized = false;
 
 	/*
 	 * Abstract methods from CustomEventInterstitial
 	 */
 
-	@Override
-	public void showInterstitial() {
-		if (iMInterstitial != null
-				&& IMInterstitial.State.READY.equals(this.iMInterstitial.getState())) {
-			iMInterstitial.show();
-		}
-	}
-
-	@Override
-	public void onInvalidate() {
-		if (iMInterstitial != null) {
+    @Override
+    public void showInterstitial() {
+        if (iMInterstitial != null
+                && IMInterstitial.State.READY.equals(this.iMInterstitial.getState())) {
+            iMInterstitial.show();
+        }
+    }
+
+    @Override
+    public void onInvalidate() {
+        if (iMInterstitial != null) {
             iMInterstitial.setIMInterstitialListener(null);
-			iMInterstitial.destroy();
-		}
-	}
-
-	@Override
-	public void onDismissInterstitialScreen(IMInterstitial imInterstitial) {
-		mInterstitialListener.onInterstitialDismissed();
-	}
-
-	@Override
-	public void onInterstitialFailed(IMInterstitial imInterstitial, IMErrorCode imErrorCode) {
-		if (imErrorCode == IMErrorCode.INTERNAL_ERROR) {
-			mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
-		} else if (imErrorCode == IMErrorCode.INVALID_REQUEST) {
-			mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-		} else if (imErrorCode == IMErrorCode.NETWORK_ERROR) {
-			mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-		} else if (imErrorCode == IMErrorCode.NO_FILL) {
-			mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
-		} else {
-			mInterstitialListener.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
-		}
-	}
-
-	@Override
-	public void onInterstitialInteraction(IMInterstitial imInterstitial,
-			Map<String, String> map) {
-		mInterstitialListener.onInterstitialClicked();
-	}
-
-	@Override
-	public void onInterstitialLoaded(IMInterstitial imInterstitial) {
-		mInterstitialListener.onInterstitialLoaded();
-	}
-
-	@Override
-	public void onLeaveApplication(IMInterstitial imInterstitial) {
-
-	}
-
-	@Override
-	public void onShowInterstitialScreen(IMInterstitial imInterstitial) {
-		mInterstitialListener.onInterstitialShown();
-	}
+            iMInterstitial.destroy();
+        }
+    }
+
+    @Override
+    public void onDismissInterstitialScreen(IMInterstitial imInterstitial) {
+        mInterstitialListener.onInterstitialDismissed();
+    }
+
+    @Override
+    public void onInterstitialFailed(IMInterstitial imInterstitial, IMErrorCode imErrorCode) {
+        if (imErrorCode == IMErrorCode.INTERNAL_ERROR) {
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+        } else if (imErrorCode == IMErrorCode.INVALID_REQUEST) {
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+        } else if (imErrorCode == IMErrorCode.NETWORK_ERROR) {
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+        } else if (imErrorCode == IMErrorCode.NO_FILL) {
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
+        } else {
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
+        }
+    }
+
+    @Override
+    public void onInterstitialInteraction(IMInterstitial imInterstitial,
+                                          Map<String, String> map) {
+        mInterstitialListener.onInterstitialClicked();
+    }
+
+    @Override
+    public void onInterstitialLoaded(IMInterstitial imInterstitial) {
+        mInterstitialListener.onInterstitialLoaded();
+    }
+
+    @Override
+    public void onLeaveApplication(IMInterstitial imInterstitial) {
+
+    }
+
+    @Override
+    public void onShowInterstitialScreen(IMInterstitial imInterstitial) {
+        mInterstitialListener.onInterstitialShown();
+    }
 }
diff --git a/extras/src/com/mopub/mobileads/MillennialBanner.java b/extras/src/com/mopub/mobileads/MillennialBanner.java
index 4ba0f3a0..cd49d93f 100644
--- a/extras/src/com/mopub/mobileads/MillennialBanner.java
+++ b/extras/src/com/mopub/mobileads/MillennialBanner.java
@@ -35,12 +35,20 @@
 import android.content.Context;
 import android.location.Location;
 import android.util.Log;
-import com.millennialmedia.android.*;
+
+import com.millennialmedia.android.MMAd;
+import com.millennialmedia.android.MMAdView;
+import com.millennialmedia.android.MMException;
+import com.millennialmedia.android.MMRequest;
+import com.millennialmedia.android.MMSDK;
+import com.millennialmedia.android.RequestListener;
 
 import java.util.Map;
 
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+
 /**
- * Compatible with version 5.1.0 of the Millennial Media SDK.
+ * Compatible with version 5.3.0 of the Millennial Media SDK.
  */
 
 class MillennialBanner extends CustomEventBanner {
@@ -49,16 +57,16 @@
     public static final String APID_KEY = "adUnitID";
     public static final String AD_WIDTH_KEY = "adWidth";
     public static final String AD_HEIGHT_KEY = "adHeight";
-    private MillennialBroadcastReceiver mBroadcastReceiver;
 
     @Override
-    protected void loadBanner(Context context, CustomEventBannerListener customEventBannerListener,
-                              Map<String, Object> localExtras, Map<String, String> serverExtras) {
+    protected void loadBanner(final Context context, final CustomEventBannerListener customEventBannerListener,
+                              final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
         mBannerListener = customEventBannerListener;
 
-        String apid;
-        int width;
-        int height;
+
+        final String apid;
+        final int width;
+        final int height;
         if (extrasAreValid(serverExtras)) {
             apid = serverExtras.get(APID_KEY);
             width = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
@@ -69,18 +77,18 @@ protected void loadBanner(Context context, CustomEventBannerListener customEvent
         }
 
         MMSDK.initialize(context);
-        MMSDK.setBroadcastEvents(true);
-
-        mBroadcastReceiver = new MillennialBroadcastReceiver();
-        mBroadcastReceiver.register(context);
 
         mMillennialAdView = new MMAdView(context);
+        mMillennialAdView.setListener(new MillennialBannerRequestListener());
+
         mMillennialAdView.setApid(apid);
         mMillennialAdView.setWidth(width);
         mMillennialAdView.setHeight(height);
 
-        Location location = (Location) localExtras.get("location");
-        if (location != null) MMRequest.setUserLocation(location);
+        final Location location = (Location) localExtras.get("location");
+        if (location != null) {
+            MMRequest.setUserLocation(location);
+        }
 
         mMillennialAdView.setMMRequest(new MMRequest());
         mMillennialAdView.setId(MMSDK.getDefaultAdId());
@@ -88,7 +96,12 @@ protected void loadBanner(Context context, CustomEventBannerListener customEvent
         mMillennialAdView.getAd();
     }
 
-    private boolean extrasAreValid(Map<String, String> serverExtras) {
+    @Override
+    protected void onInvalidate() {
+        mMillennialAdView.setListener(null);
+    }
+
+    private boolean extrasAreValid(final Map<String, String> serverExtras) {
         try {
             Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
             Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
@@ -99,51 +112,38 @@ private boolean extrasAreValid(Map<String, String> serverExtras) {
         return serverExtras.containsKey(APID_KEY);
     }
 
-    @Override
-    protected void onInvalidate() {
-        mMillennialAdView.setListener(null);
-        mBroadcastReceiver.unregister();
-    }
+    class MillennialBannerRequestListener implements RequestListener {
+        @Override
+        public void MMAdOverlayLaunched(final MMAd mmAd) {
+            Log.d("MoPub", "Millennial banner ad Launched.");
+            mBannerListener.onBannerExpanded();
+        }
 
-    class MillennialBroadcastReceiver extends MMBroadcastReceiver {
-        private Context mContext;
+        @Override
+        public void MMAdOverlayClosed(final MMAd mmAd) {
+            Log.d("MoPub", "Millennial banner ad closed.");
+            mBannerListener.onBannerCollapsed();
+        }
 
         @Override
-        public void getAdSuccess(MMAd ad) {
-            super.getAdSuccess(ad);
+        public void MMAdRequestIsCaching(final MMAd mmAd) {}
+
+        @Override
+        public void requestCompleted(final MMAd mmAd) {
             Log.d("MoPub", "Millennial banner ad loaded successfully. Showing ad...");
             mBannerListener.onBannerLoaded(mMillennialAdView);
         }
 
         @Override
-        public void getAdFailure(MMAd ad) {
-            super.getAdFailure(ad);
+        public void requestFailed(final MMAd mmAd, final MMException e) {
             Log.d("MoPub", "Millennial banner ad failed to load.");
-            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
+            mBannerListener.onBannerFailed(NETWORK_NO_FILL);
         }
 
         @Override
-        public void intentStarted(MMAd ad, String intent) {
-            super.intentStarted(ad, intent);
-            Log.d("MoPub", "Millennial banner ad clicked.");
+        public void onSingleTap(final MMAd mmAd) {
             mBannerListener.onBannerClicked();
         }
-
-
-        void register(Context context) {
-            mContext = context;
-            context.registerReceiver(this, MMBroadcastReceiver.createIntentFilter());
-        }
-
-        void unregister() {
-            try {
-                mContext.unregisterReceiver(this);
-            } catch (Exception exception) {
-                Log.d("MoPub", "Unable to unregister MMBroadcastReceiver", exception);
-            } finally {
-                mContext = null;
-            }
-        }
     }
 
     @Deprecated
diff --git a/extras/src/com/mopub/mobileads/MillennialInterstitial.java b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
index e3905b1f..4100951b 100644
--- a/extras/src/com/mopub/mobileads/MillennialInterstitial.java
+++ b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
@@ -43,21 +43,20 @@
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
 
 /**
- * Compatible with version 5.1.0 of the Millennial Media SDK.
+ * Compatible with version 5.3.0 of the Millennial Media SDK.
  */
 
 class MillennialInterstitial extends CustomEventInterstitial {
     private MMInterstitial mMillennialInterstitial;
     private CustomEventInterstitialListener mInterstitialListener;
     public static final String APID_KEY = "adUnitID";
-    private MillennialBroadcastReceiver mBroadcastReceiver;
 
     @Override
-    protected void loadInterstitial(Context context, CustomEventInterstitialListener customEventInterstitialListener,
-                                    Map<String, Object> localExtras, Map<String, String> serverExtras) {
+    protected void loadInterstitial(final Context context, final CustomEventInterstitialListener customEventInterstitialListener,
+                                    final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
         mInterstitialListener = customEventInterstitialListener;
 
-        String apid;
+        final String apid;
         if (extrasAreValid(serverExtras)) {
             apid = serverExtras.get(APID_KEY);
         } else {
@@ -66,15 +65,15 @@ protected void loadInterstitial(Context context, CustomEventInterstitialListener
         }
 
         MMSDK.initialize(context);
-        MMSDK.setBroadcastEvents(true);
 
-        mBroadcastReceiver = new MillennialBroadcastReceiver();
-        mBroadcastReceiver.register(context);
-
-        Location location = (Location) localExtras.get("location");
-        if (location != null) MMRequest.setUserLocation(location);
+        final Location location = (Location) localExtras.get("location");
+        if (location != null) {
+            MMRequest.setUserLocation(location);
+        }
 
         mMillennialInterstitial = new MMInterstitial(context);
+        mMillennialInterstitial.setListener(new MillennialInterstitialRequestListener());
+
         if (mMillennialInterstitial.isAdAvailable()) {
             Log.d("MoPub", "Millennial interstitial ad already loaded.");
             mInterstitialListener.onInterstitialLoaded();
@@ -97,79 +96,49 @@ protected void showInterstitial() {
     @Override
     protected void onInvalidate() {
         mMillennialInterstitial.setListener(null);
-        mBroadcastReceiver.unregister();
     }
 
     private boolean extrasAreValid(Map<String, String> serverExtras) {
         return serverExtras.containsKey(APID_KEY);
     }
 
-    class MillennialBroadcastReceiver extends MMBroadcastReceiver {
-        private Context mContext;
-
-        @Override
-        public void fetchFinishedCaching(MMAd ad) {
-            super.fetchFinishedCaching(ad);
-            fetchFinished(NETWORK_INVALID_STATE);
-        }
-
-        @Override
-        public void getAdFailure(MMAd ad) {
-            super.getAdFailure(ad);
-            Log.d("MoPub", "Millennial interstitial ad failed to load.");
-            mInterstitialListener.onInterstitialFailed(NETWORK_NO_FILL);
-        }
-
-        @Override
-        public void intentStarted(MMAd ad, String intent) {
-            super.intentStarted(ad, intent);
-            Log.d("MoPub", "Millennial interstitial ad clicked.");
-            mInterstitialListener.onInterstitialClicked();
-        }
-
-        @Override
-        public void fetchFailure(MMAd ad) {
-            super.fetchFailure(ad);
-            fetchFinished(NETWORK_NO_FILL);
-        }
-
+    class MillennialInterstitialRequestListener implements RequestListener {
         @Override
-        public void displayStarted(MMAd ad) {
-            super.displayStarted(ad);
+        public void MMAdOverlayLaunched(final MMAd mmAd) {
             Log.d("MoPub", "Showing Millennial interstitial ad.");
             mInterstitialListener.onInterstitialShown();
         }
 
         @Override
-        public void overlayClosed(MMAd ad) {
-            super.overlayClosed(ad);
+        public void MMAdOverlayClosed(final MMAd mmAd) {
             Log.d("MoPub", "Millennial interstitial ad dismissed.");
             mInterstitialListener.onInterstitialDismissed();
         }
 
-        void register(Context context) {
-            mContext = context;
-            context.registerReceiver(this, MMBroadcastReceiver.createIntentFilter());
-        }
+        @Override public void MMAdRequestIsCaching(final MMAd mmAd) {}
 
-        void unregister() {
-            try {
-                mContext.unregisterReceiver(this);
-            } catch (Exception exception) {
-                Log.d("MoPub", "Unable to unregister MMBroadcastReceiver", exception);
-            } finally {
-                mContext = null;
-            }
-        }
-
-        private void fetchFinished(MoPubErrorCode errorToReport) {
+        @Override
+        public void requestCompleted(final MMAd mmAd) {
             if (mMillennialInterstitial.isAdAvailable()) {
                 Log.d("MoPub", "Millennial interstitial ad loaded successfully.");
                 mInterstitialListener.onInterstitialLoaded();
             } else {
                 Log.d("MoPub", "Millennial interstitial ad failed to load.");
-                mInterstitialListener.onInterstitialFailed(errorToReport);
+                mInterstitialListener.onInterstitialFailed(NETWORK_INVALID_STATE);
             }
         }
+
+        @Override
+        public void requestFailed(final MMAd mmAd, final MMException e) {
+            Log.d("MoPub", "Millennial interstitial ad failed to load.");
+            mInterstitialListener.onInterstitialFailed(NETWORK_NO_FILL);
+        }
+
+        @Override
+        public void onSingleTap(final MMAd mmAd) {
+            Log.d("MoPub", "Millennial interstitial clicked.");
+            mInterstitialListener.onInterstitialClicked();
+        }
+
     }
 }
diff --git a/extras/src/com/mopub/mobileads/VungleInterstitial.java b/extras/src/com/mopub/mobileads/VungleInterstitial.java
index 61fce58b..03cdb10b 100644
--- a/extras/src/com/mopub/mobileads/VungleInterstitial.java
+++ b/extras/src/com/mopub/mobileads/VungleInterstitial.java
@@ -35,17 +35,20 @@
 import android.content.Context;
 import android.os.Handler;
 import android.util.Log;
-import com.vungle.sdk.VunglePub;
 
-import java.util.*;
-import java.util.concurrent.*;
+import com.vungle.publisher.EventListener;
+import com.vungle.publisher.VunglePub;
+
+import java.util.Map;
+import java.util.concurrent.ScheduledThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
 
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 
 /*
- * Tested with Vungle SDK 1.3.3.
+ * Tested with Vungle SDK 3.1.0.
  */
-public class VungleInterstitial extends CustomEventInterstitial implements VunglePub.EventListener {
+public class VungleInterstitial extends CustomEventInterstitial implements EventListener {
 
     public static final String DEFAULT_VUNGLE_APP_ID = "YOUR_DEFAULT_VUNGLE_APP_ID";
 
@@ -54,6 +57,7 @@
      */
     private static final String APP_ID_KEY = "appId";
 
+    private final VunglePub mVunglePub;
     private final Handler mHandler;
     private final ScheduledThreadPoolExecutor mScheduledThreadPoolExecutor;
     private CustomEventInterstitialListener mCustomEventInterstitialListener;
@@ -62,6 +66,7 @@
     public VungleInterstitial() {
         mHandler = new Handler();
         mScheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(10);
+        mVunglePub = VunglePub.getInstance();
     }
 
     @Override
@@ -87,16 +92,15 @@ protected void loadInterstitial(Context context,
             appId = DEFAULT_VUNGLE_APP_ID;
         }
 
-        VunglePub.setEventListener(this);
-        VunglePub.init(context, appId);
-
+        mVunglePub.setEventListener(this);
+        mVunglePub.init(context, appId);
         scheduleOnInterstitialLoaded();
     }
 
     @Override
     protected void showInterstitial() {
-        if (VunglePub.isVideoAvailable(true)) {
-            VunglePub.displayAdvert();
+        if (mVunglePub.isCachedAdAvailable()) {
+            mVunglePub.playAd();
         } else {
             Log.d("MoPub", "Tried to show a Vungle interstitial ad before it finished loading. Please try again.");
         }
@@ -104,7 +108,7 @@ protected void showInterstitial() {
 
     @Override
     protected void onInvalidate() {
-        VunglePub.setEventListener(null);
+        mVunglePub.setEventListener(null);
         mScheduledThreadPoolExecutor.shutdownNow();
         mIsLoading = false;
     }
@@ -117,7 +121,7 @@ private void scheduleOnInterstitialLoaded() {
         Runnable runnable = new Runnable() {
             @Override
             public void run() {
-            if (VunglePub.isVideoAvailable()) {
+            if (mVunglePub.isCachedAdAvailable()) {
                 Log.d("MoPub", "Vungle interstitial ad successfully loaded.");
                 mScheduledThreadPoolExecutor.shutdownNow();
                 mHandler.post(new Runnable() {
@@ -138,17 +142,17 @@ public void run() {
     }
 
     /*
-     * VunglePub.EventListener implementation
+     * EventListener implementation
      */
 
     @Override
-    public void onVungleView(double watchedSeconds, double totalAdSeconds) {
-        final double watchedPercent = watchedSeconds / totalAdSeconds * 100;
+    public void onVideoView(final boolean isCompletedView, final int watchedMillis, final int videoDurationMillis) {
+        final double watchedPercent = (double) watchedMillis / videoDurationMillis * 100;
         Log.d("MoPub", String.format("%.1f%% of Vungle video watched.", watchedPercent));
     }
 
     @Override
-    public void onVungleAdStart() {
+    public void onAdStart() {
         mHandler.post(new Runnable() {
             @Override
             public void run() {
@@ -159,7 +163,7 @@ public void run() {
     }
 
     @Override
-    public void onVungleAdEnd() {
+    public void onAdEnd() {
         mHandler.post(new Runnable() {
             @Override
             public void run() {
@@ -169,6 +173,16 @@ public void run() {
         });
     }
 
+    @Override
+    public void onAdUnavailable(final String s) {
+        mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+    }
+
+    @Override
+    public void onCachedAdAvailable() {
+        // Due to the inconsistent behavior of this method, we rely on scheduleOnInterstitialLoaded instead.
+    }
+
     @Deprecated // for testing
     ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() {
         return mScheduledThreadPoolExecutor;
diff --git a/extras/src/com/mopub/nativeads/InMobiNative.java b/extras/src/com/mopub/nativeads/InMobiNative.java
index 4fa79df5..52fc7cf3 100644
--- a/extras/src/com/mopub/nativeads/InMobiNative.java
+++ b/extras/src/com/mopub/nativeads/InMobiNative.java
@@ -23,7 +23,7 @@
 import static com.mopub.common.util.Numbers.parseDouble;
 
 /*
- * Tested with InMobi SDK 4.4.0
+ * Tested with InMobi SDK 4.4.1
  */
 class InMobiNative extends CustomEventNative implements IMNativeListener {
     private static final String APP_ID_KEY = "app_id";
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 901992f6..48338e11 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -29,6 +29,9 @@
                 android:configChanges="keyboardHidden|orientation"/>
         <activity android:name="com.mopub.mobileads.MraidVideoPlayerActivity"
                 android:configChanges="keyboardHidden|orientation"/>
+
+        <meta-data android:name="com.google.android.gms.version"
+                   android:value="@integer/google_play_services_version" />
     </application>
 
 </manifest>
diff --git a/mopub-sample/mopub-sample.apk b/mopub-sample/mopub-sample.apk
new file mode 100644
index 00000000..4c11d4c4
Binary files /dev/null and b/mopub-sample/mopub-sample.apk differ
diff --git a/mopub-sample/pom.xml b/mopub-sample/pom.xml
index 1957cf8c..42580ee3 100644
--- a/mopub-sample/pom.xml
+++ b/mopub-sample/pom.xml
@@ -4,12 +4,11 @@
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
-        <groupId>org.sonatype.oss</groupId>
-        <artifactId>oss-parent</artifactId>
-        <version>5</version>
+        <groupId>com.mopub.mobileads</groupId>
+        <artifactId>mopub-android</artifactId>
+        <version>1.0</version>
     </parent>
 
-    <groupId>com.mopub.mobileads</groupId>
     <artifactId>mopub-sample</artifactId>
     <version>1.0.0-SNAPSHOT</version>
     <packaging>apk</packaging>
@@ -30,6 +29,13 @@
             <type>jar</type>
         </dependency>
 
+        <dependency>
+            <groupId>com.google.android.gms</groupId>
+            <artifactId>play-services</artifactId>
+            <version>5.0.77</version>
+            <type>aar</type>
+        </dependency>
+
         <!--test-->
 
         <dependency>
diff --git a/mopub-sdk/pom.xml b/mopub-sdk/pom.xml
index c5ab0d21..2cbbc97f 100644
--- a/mopub-sdk/pom.xml
+++ b/mopub-sdk/pom.xml
@@ -4,12 +4,11 @@
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
-        <groupId>org.sonatype.oss</groupId>
-        <artifactId>oss-parent</artifactId>
-        <version>5</version>
+        <groupId>com.mopub.mobileads</groupId>
+        <artifactId>mopub-android</artifactId>
+        <version>1.0</version>
     </parent>
 
-    <groupId>com.mopub.mobileads</groupId>
     <artifactId>mopub-sdk</artifactId>
     <version>1.0.0-SNAPSHOT</version>
     <packaging>jar</packaging>
@@ -24,9 +23,9 @@
 
         <!--main-->
         <dependency>
-            <groupId>com.google.android</groupId>
+            <groupId>com.android.support</groupId>
             <artifactId>support-v4</artifactId>
-            <version>r19.1</version>
+            <version>19.1.0</version>
         </dependency>
 
         <!--test-->
diff --git a/mopub-sdk/scripts/mavenize_support_library b/mopub-sdk/scripts/mavenize_support_library
deleted file mode 100755
index 619dfff7..00000000
--- a/mopub-sdk/scripts/mavenize_support_library
+++ /dev/null
@@ -1,3 +0,0 @@
-#!/bin/sh
-mvn install:install-file -DgroupId=com.google.android -DartifactId=support-v4 -Dversion=r19.1 -Dpackaging=jar -Dfile=libs/android-support-v4.jar
-
diff --git a/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java b/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
index 7749ef46..e8a6ceeb 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
@@ -13,12 +13,6 @@
 import static com.mopub.common.util.Reflection.MethodBuilder;
 import static com.mopub.common.util.Reflection.classFound;
 
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType;
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.ADMOB_BANNER;
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.ADMOB_INTERSTITIAL;
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.GOOGLE_PLAY_BANNER;
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.GOOGLE_PLAY_INTERSTITIAL;
-
 public class GpsHelper {
     static public final int GOOGLE_PLAY_SUCCESS_CODE = 0;
     static public final String ADVERTISING_ID_KEY = "advertisingId";
@@ -30,21 +24,6 @@
         public void onFetchAdInfoCompleted();
     }
 
-    static public CustomEventType convertAdMobToGooglePlayServices(final Context context, final CustomEventType customEventType) {
-        // In both cases, only check if GooglePlayServices is available if absolutely necessary
-        if (customEventType == ADMOB_BANNER &&
-                classFound(GOOGLE_PLAY_BANNER.toString()) &&
-                isGpsAvailable(context)) {
-            return GOOGLE_PLAY_BANNER;
-        } else if (customEventType == ADMOB_INTERSTITIAL &&
-                classFound(GOOGLE_PLAY_INTERSTITIAL.toString()) &&
-                isGpsAvailable(context)) {
-            return GOOGLE_PLAY_INTERSTITIAL;
-        }
-
-        return customEventType;
-    }
-
     static boolean isGpsAvailable(final Context context) {
         try {
             MethodBuilder methodBuilder = MethodBuilderFactory.create(null, "isGooglePlayServicesAvailable")
diff --git a/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java b/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java
index 5f6a66b5..45423e77 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java
@@ -1,8 +1,10 @@
 package com.mopub.common;
 
+import android.content.Context;
 import android.net.http.AndroidHttpClient;
 import android.os.Handler;
 import android.os.Looper;
+import android.webkit.WebView;
 
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.DeviceUtils;
@@ -16,9 +18,12 @@
 
 import java.util.Arrays;
 
+import static com.mopub.common.util.ResponseHeader.USER_AGENT;
+
 public class HttpClient {
     private static final int CONNECTION_TIMEOUT = 10000;
     private static final int SOCKET_TIMEOUT = 10000;
+    private static String sWebViewUserAgent;
 
     public static AndroidHttpClient getHttpClient() {
         String userAgent = DeviceUtils.getUserAgent();
@@ -33,8 +38,25 @@ public static AndroidHttpClient getHttpClient() {
         return httpClient;
     }
 
-    public static void makeTrackingHttpRequest(final Iterable<String> urls) {
-        if (urls == null) {
+    public static HttpGet initializeHttpGet(final String url, final Context context) {
+        final HttpGet httpGet = new HttpGet(url);
+
+        if (getWebViewUserAgent() == null && context != null) {
+            // Memoize the user agent since creating WebViews is expensive
+            setWebViewUserAgent(new WebView(context).getSettings().getUserAgentString());
+        }
+
+
+        final String webViewUserAgent = getWebViewUserAgent();
+        if (webViewUserAgent != null) {
+            httpGet.addHeader(USER_AGENT.getKey(), webViewUserAgent);
+        }
+
+        return httpGet;
+    }
+
+    public static void makeTrackingHttpRequest(final Iterable<String> urls, final Context context) {
+        if (urls == null || context == null) {
             return;
         }
 
@@ -56,12 +78,14 @@ public void onComplete(final String url, final DownloadResponse downloadResponse
             }
         };
 
+        // Hold onto the application context in closure instead of activity context
+        final Context appContext = context.getApplicationContext();
         final Runnable trackingHttpRequestRunnable = new Runnable() {
             @Override
             public void run() {
                 for (final String url : urls) {
                     try {
-                        final HttpGet httpGet = new HttpGet(url);
+                        final HttpGet httpGet = initializeHttpGet(url, appContext);
                         AsyncTasks.safeExecuteOnExecutor(new DownloadTask(downloadTaskListener), httpGet);
                     } catch (Exception e) {
                         MoPubLog.d("Failed to hit tracking endpoint: " + url);
@@ -73,7 +97,15 @@ public void run() {
         new Handler(Looper.getMainLooper()).post(trackingHttpRequestRunnable);
     }
 
-    public static void makeTrackingHttpRequest(final String url) {
-        makeTrackingHttpRequest(Arrays.asList(url));
+    public static void makeTrackingHttpRequest(final String url, final Context context) {
+        makeTrackingHttpRequest(Arrays.asList(url), context);
+    }
+
+    public synchronized static String getWebViewUserAgent() {
+        return sWebViewUserAgent;
+    }
+
+    public synchronized static void setWebViewUserAgent(final String userAgent) {
+        sWebViewUserAgent = userAgent;
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
index 5bbc3f1b..8f388b7a 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
@@ -33,5 +33,5 @@
 package com.mopub.common;
 
 public class MoPub {
-    public static final String SDK_VERSION = "2.2";
+    public static final String SDK_VERSION = "2.3";
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
index b4f163a4..5f19a7d9 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
@@ -96,6 +96,7 @@ public void send() {
         Intent chooserIntent = Intent.createChooser(mEmailIntent, "Send Email...");
         chooserIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
         mContext.startActivity(chooserIntent);
+
     }
 
     private void initEmailIntent() {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
index 9a9d384e..837d6dad 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
@@ -32,15 +32,12 @@
 
 package com.mopub.mobileads;
 
-import com.mopub.common.GpsHelper;
-
 public class AdTypeTranslator {
-
     public enum CustomEventType {
-        ADMOB_BANNER("admob_native_banner", "com.mopub.mobileads.GoogleAdMobBanner"),
-        ADMOB_INTERSTITIAL("admob_full_interstitial", "com.mopub.mobileads.GoogleAdMobInterstitial"),
-        GOOGLE_PLAY_BANNER("google_play_banner", "com.mopub.mobileads.GooglePlayServicesBanner"),
-        GOOGLE_PLAY_INTERSTITIAL("google_play_interstitial", "com.mopub.mobileads.GooglePlayServicesInterstitial"),
+        // With the deprecation of a standalone AdMob SDK, these now point to Google Play Services
+        GOOGLE_PLAY_SERVICES_BANNER("admob_native_banner", "com.mopub.mobileads.GooglePlayServicesBanner"),
+        GOOGLE_PLAY_SERVICES_INTERSTITIAL("admob_full_interstitial", "com.mopub.mobileads.GooglePlayServicesInterstitial"),
+
         MILLENNIAL_BANNER("millennial_native_banner", "com.mopub.mobileads.MillennialBanner"),
         MILLENNIAL_INTERSTITIAL("millennial_full_interstitial", "com.mopub.mobileads.MillennialInterstitial"),
         MRAID_BANNER("mraid_banner", "com.mopub.mobileads.MraidBanner"),
@@ -60,7 +57,7 @@ private CustomEventType(String key, String className) {
         }
 
         private static CustomEventType fromString(String key) {
-            for (CustomEventType customEventType : CustomEventType.values()) {
+            for (CustomEventType customEventType : values()) {
                 if (customEventType.mKey.equals(key)) {
                     return customEventType;
                 }
@@ -91,10 +88,6 @@ static String getCustomEventNameForAdType(MoPubView moPubView, String adType, St
             customEventType = ("interstitial".equals(adType))
                     ? CustomEventType.fromString(fullAdType + "_interstitial")
                     : CustomEventType.fromString(adType + "_banner");
-
-            if (moPubView != null) {
-                customEventType = GpsHelper.convertAdMobToGooglePlayServices(moPubView.getContext(), customEventType);
-            }
         }
 
         return customEventType.toString();
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
index cc8d59a8..7ddca8df 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
@@ -44,14 +44,17 @@
 import android.widget.RelativeLayout;
 
 import com.mopub.common.util.Dips;
+import com.mopub.mobileads.util.Interstitials;
 
 import static android.view.View.INVISIBLE;
 import static android.view.View.VISIBLE;
-import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
 import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_NORMAL;
 import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_PRESSED;
+import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
 
 abstract class BaseInterstitialActivity extends Activity {
+    private OnClickListener mCloseOnClickListener;
+
     enum JavaScriptWebViewCallbacks {
         WEB_VIEW_DID_APPEAR("javascript:webviewDidAppear();"),
         WEB_VIEW_DID_CLOSE("javascript:webviewDidClose();");
@@ -66,7 +69,7 @@ protected String getUrl() {
         }
     }
 
-    private static final float CLOSE_BUTTON_SIZE = 50f;
+    private static final float CLOSE_BUTTON_SIZE_DP = 50f;
     private static final float CLOSE_BUTTON_PADDING = 8f;
 
     private ImageView mCloseButton;
@@ -84,8 +87,14 @@ protected void onCreate(Bundle savedInstanceState) {
         requestWindowFeature(Window.FEATURE_NO_TITLE);
         getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
 
-        mButtonSize = Dips.asIntPixels(CLOSE_BUTTON_SIZE, this);
+        mButtonSize = Dips.asIntPixels(CLOSE_BUTTON_SIZE_DP, this);
         mButtonPadding = Dips.asIntPixels(CLOSE_BUTTON_PADDING, this);
+        mCloseOnClickListener = new OnClickListener() {
+            @Override
+            public void onClick(final View view) {
+                finish();
+            }
+        };
 
         mLayout = new RelativeLayout(this);
         final RelativeLayout.LayoutParams adViewLayout = new RelativeLayout.LayoutParams(
@@ -130,6 +139,14 @@ protected AdConfiguration getAdConfiguration() {
         return adConfiguration;
     }
 
+    void addCloseEventRegion() {
+        final int buttonSizePixels = Dips.dipsToIntPixels(CLOSE_BUTTON_SIZE_DP, this);
+        final RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(buttonSizePixels, buttonSizePixels);
+        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
+        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_TOP);
+        Interstitials.addCloseEventRegion(mLayout, layoutParams, mCloseOnClickListener);
+    }
+
     private void createInterstitialCloseButton() {
         mCloseButton = new ImageButton(this);
         StateListDrawable states = new StateListDrawable();
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
index 37239372..ec8681dc 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
@@ -100,6 +100,7 @@ ViewGroup getLayout() {
         return mLayout;
     }
 
+
     void videoError(boolean shouldFinish) {
         Log.d("MoPub", "Error: video can not be played.");
         broadcastAction(ACTION_INTERSTITIAL_FAIL);
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java
index 5d321a44..8b3f32bf 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java
@@ -33,15 +33,13 @@
 package com.mopub.mobileads;
 
 import android.content.Context;
-import android.util.Log;
+import android.webkit.WebSettings;
 import android.webkit.WebView;
 
 import com.mopub.common.util.VersionCode;
 import com.mopub.common.util.Views;
 import com.mopub.mobileads.util.WebViews;
 
-import java.lang.reflect.Method;
-
 public class BaseWebView extends WebView {
     protected boolean mIsDestroyed;
 
@@ -62,27 +60,10 @@ protected void enablePlugins(final boolean enabled) {
             return;
         }
 
-        if (VersionCode.currentApiLevel().isBelow(VersionCode.FROYO)) {
-            // Note: this is needed to compile against api level 18.
-            try {
-                Method method = Class.forName("android.webkit.WebSettings").getDeclaredMethod("setPluginsEnabled", boolean.class);
-                method.invoke(getSettings(), enabled);
-            } catch (Exception e) {
-                Log.d("MoPub", "Unable to " + (enabled ? "enable" : "disable") + "WebSettings plugins for BaseWebView.");
-            }
+        if (enabled) {
+            getSettings().setPluginState(WebSettings.PluginState.ON);
         } else {
-
-            try {
-                Class<Enum> pluginStateClass = (Class<Enum>) Class.forName("android.webkit.WebSettings$PluginState");
-
-                Class<?>[] parameters = {pluginStateClass};
-                Method method = getSettings().getClass().getDeclaredMethod("setPluginState", parameters);
-
-                Object pluginState = Enum.valueOf(pluginStateClass, enabled ? "ON" : "OFF");
-                method.invoke(getSettings(), pluginState);
-            } catch (Exception e) {
-                Log.d("MoPub", "Unable to modify WebView plugin state.");
-            }
+            getSettings().setPluginState(WebSettings.PluginState.OFF);
         }
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubBrowserController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubBrowserController.java
index 4288e162..4029b87f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubBrowserController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubBrowserController.java
@@ -71,6 +71,7 @@ protected void open(String url) {
         mContext.startActivity(i);
     }
 
+
     private boolean launchApplicationUrl(String url) {
         Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
         intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
index 51edb2cb..6abe0001 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
@@ -169,6 +169,8 @@ public void onCreate(Bundle savedInstanceState) {
                     WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,
                     WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
         }
+
+        addCloseEventRegion();
     }
 
     @Override
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
index 0e4fe95f..a541c768 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
@@ -41,7 +41,6 @@
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.pm.ActivityInfo;
-import android.graphics.Color;
 import android.graphics.Rect;
 import android.graphics.drawable.StateListDrawable;
 import android.media.MediaScannerConnection;
@@ -66,6 +65,7 @@
 import android.widget.RelativeLayout;
 import android.widget.Toast;
 
+import com.mopub.common.util.Dips;
 import com.mopub.common.util.Streams;
 import com.mopub.mobileads.MraidView.ExpansionStyle;
 import com.mopub.mobileads.MraidView.NativeCloseButtonStyle;
@@ -73,6 +73,7 @@
 import com.mopub.mobileads.MraidView.ViewState;
 import com.mopub.mobileads.factories.HttpClientFactory;
 import com.mopub.mobileads.util.HttpResponses;
+import com.mopub.mobileads.util.Interstitials;
 import com.mopub.mobileads.util.Mraids;
 
 import org.apache.http.Header;
@@ -80,12 +81,22 @@
 import org.apache.http.client.HttpClient;
 import org.apache.http.client.methods.HttpGet;
 
-import java.io.*;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.InputStream;
+import java.io.OutputStream;
 import java.net.URI;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Map;
 
+import static android.graphics.Color.TRANSPARENT;
+import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_NORMAL;
+import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_PRESSED;
+import static com.mopub.common.util.ResponseHeader.LOCATION;
 import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.CREATE_CALENDAR_EVENT;
 import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.EXPAND;
 import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_CURRENT_POSITION;
@@ -95,15 +106,12 @@
 import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.STORE_PICTURE;
 import static com.mopub.mobileads.MraidCommandStorePicture.MIME_TYPE_HEADER;
 import static com.mopub.mobileads.MraidView.BaseMraidListener;
-import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_NORMAL;
-import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_PRESSED;
 import static com.mopub.mobileads.util.Mraids.ANDROID_CALENDAR_CONTENT_TYPE;
 import static com.mopub.mobileads.util.Mraids.isCalendarAvailable;
 import static com.mopub.mobileads.util.Mraids.isInlineVideoAvailable;
 import static com.mopub.mobileads.util.Mraids.isSmsAvailable;
 import static com.mopub.mobileads.util.Mraids.isStorePictureSupported;
 import static com.mopub.mobileads.util.Mraids.isTelAvailable;
-import static com.mopub.common.util.ResponseHeader.LOCATION;
 
 class MraidDisplayController extends MraidAbstractController {
     private static final String LOGTAG = "MraidDisplayController";
@@ -163,6 +171,7 @@
     private FrameLayout mPlaceholderView;
     private FrameLayout mAdContainerLayout;
     private RelativeLayout mExpansionLayout;
+    private final OnClickListener mCloseOnClickListener;
 
     MraidDisplayController(MraidView view, MraidView.ExpansionStyle expStyle,
             MraidView.NativeCloseButtonStyle buttonStyle) {
@@ -175,11 +184,18 @@
                 ((Activity) context).getRequestedOrientation() :
                 ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED;
 
+        initialize();
+
+        mCloseOnClickListener = new OnClickListener() {
+            @Override
+            public void onClick(final View view) {
+                MraidDisplayController.this.close();
+            }
+        };
+
         mAdContainerLayout = createAdContainerLayout();
         mExpansionLayout = createExpansionLayout();
         mPlaceholderView = createPlaceholderView();
-
-        initialize();
     }
 
     private void initialize() {
@@ -269,6 +285,7 @@ protected void close() {
     private void resetViewToDefaultState() {
         setNativeCloseButtonEnabled(false);
         mAdContainerLayout.removeAllViewsInLayout();
+
         mExpansionLayout.removeAllViewsInLayout();
         mRootView.removeView(mExpansionLayout);
 
@@ -675,7 +692,7 @@ private void expandLayouts(View expansionContentView, int expandWidth, int expan
         if (expandHeight < closeButtonSize) expandHeight = closeButtonSize;
 
         View dimmingView = new View(getContext());
-        dimmingView.setBackgroundColor(Color.TRANSPARENT);
+        dimmingView.setBackgroundColor(TRANSPARENT);
         dimmingView.setOnTouchListener(new OnTouchListener() {
             public boolean onTouch(View v, MotionEvent event) {
                 return true;
@@ -688,6 +705,8 @@ public boolean onTouch(View v, MotionEvent event) {
         mAdContainerLayout.addView(expansionContentView, new RelativeLayout.LayoutParams(
                 RelativeLayout.LayoutParams.FILL_PARENT, RelativeLayout.LayoutParams.FILL_PARENT));
 
+        addCloseEventRegion(mAdContainerLayout);
+
         RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(expandWidth, expandHeight);
         lp.addRule(RelativeLayout.CENTER_IN_PARENT);
         mExpansionLayout.addView(mAdContainerLayout, lp);
@@ -708,7 +727,9 @@ private void setOrientationLockEnabled(boolean enabled) {
     }
 
     protected void setNativeCloseButtonEnabled(boolean enabled) {
-        if (mRootView == null) return;
+        if (mRootView == null) {
+            return;
+        }
 
         if (enabled) {
             if (mCloseButton == null) {
@@ -725,9 +746,9 @@ public void onClick(View v) {
                 });
             }
 
-            int buttonSize = (int) (CLOSE_BUTTON_SIZE_DP * mDensity + 0.5f);
+            final int closeButtonSize = Dips.dipsToIntPixels(CLOSE_BUTTON_SIZE_DP, getContext());
             FrameLayout.LayoutParams buttonLayout = new FrameLayout.LayoutParams(
-                    buttonSize, buttonSize, Gravity.RIGHT);
+                    closeButtonSize, closeButtonSize, Gravity.RIGHT);
             mAdContainerLayout.addView(mCloseButton, buttonLayout);
         } else {
             mAdContainerLayout.removeView(mCloseButton);
@@ -753,6 +774,13 @@ FrameLayout createAdContainerLayout() {
         return new FrameLayout(getContext());
     }
 
+    void addCloseEventRegion(final FrameLayout frameLayout) {
+        final int buttonSizePixels = Dips.dipsToIntPixels(CLOSE_BUTTON_SIZE_DP, getContext());
+        final FrameLayout.LayoutParams layoutParams =
+                new FrameLayout.LayoutParams(buttonSizePixels, buttonSizePixels, Gravity.TOP | Gravity.RIGHT);
+        Interstitials.addCloseEventRegion(frameLayout, layoutParams, mCloseOnClickListener);
+    }
+
     RelativeLayout createExpansionLayout() {
         return new RelativeLayout(getContext());
     }
@@ -869,4 +897,10 @@ public void unregister() {
             mContext = null;
         }
     }
+
+    // testing
+    @Deprecated
+    public OnClickListener getCloseOnClickListener() {
+        return mCloseOnClickListener;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
index 717b5ab2..b103e4d9 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
@@ -75,6 +75,7 @@
 import java.util.concurrent.TimeUnit;
 
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
+import static com.mopub.common.HttpClient.initializeHttpGet;
 import static com.mopub.common.HttpClient.makeTrackingHttpRequest;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
@@ -162,7 +163,7 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
 
         mCompanionAdImageView = createCompanionAdImageView(context);
 
-        makeTrackingHttpRequest(mVastVideoConfiguration.getImpressionTrackers());
+        makeTrackingHttpRequest(mVastVideoConfiguration.getImpressionTrackers(), context);
 
         mVideoProgressCheckerRunnable = createVideoProgressCheckerRunnable();
     }
@@ -255,8 +256,8 @@ public void onClick(View view) {
     private void downloadCompanionAd() {
         if (mVastCompanionAd != null) {
             try {
-                final HttpGet httpGet = new HttpGet(mVastCompanionAd.getImageUrl());
-                DownloadTask downloadTask = new DownloadTask(this);
+                final HttpGet httpGet = initializeHttpGet(mVastCompanionAd.getImageUrl(), getContext());
+                final DownloadTask downloadTask = new DownloadTask(this);
                 AsyncTasks.safeExecuteOnExecutor(downloadTask, httpGet);
             } catch (Exception e) {
                 MoPubLog.d("Failed to download companion ad", e);
@@ -276,22 +277,22 @@ public void run() {
 
                     if (!mIsStartMarkHit && currentPosition >= 1000) {
                         mIsStartMarkHit = true;
-                        makeTrackingHttpRequest(mVastVideoConfiguration.getStartTrackers());
+                        makeTrackingHttpRequest(mVastVideoConfiguration.getStartTrackers(), getContext());
                     }
 
                     if (!mIsFirstMarkHit && progressPercentage > FIRST_QUARTER_MARKER) {
                         mIsFirstMarkHit = true;
-                        makeTrackingHttpRequest(mVastVideoConfiguration.getFirstQuartileTrackers());
+                        makeTrackingHttpRequest(mVastVideoConfiguration.getFirstQuartileTrackers(), getContext());
                     }
 
                     if (!mIsSecondMarkHit && progressPercentage > MID_POINT_MARKER) {
                         mIsSecondMarkHit = true;
-                        makeTrackingHttpRequest(mVastVideoConfiguration.getMidpointTrackers());
+                        makeTrackingHttpRequest(mVastVideoConfiguration.getMidpointTrackers(), getContext());
                     }
 
                     if (!mIsThirdMarkHit && progressPercentage > THIRD_QUARTER_MARKER) {
                         mIsThirdMarkHit = true;
-                        makeTrackingHttpRequest(mVastVideoConfiguration.getThirdQuartileTrackers());
+                        makeTrackingHttpRequest(mVastVideoConfiguration.getThirdQuartileTrackers(), getContext());
                     }
 
                     if (isLongVideo(mVideoView.getDuration()) ) {
@@ -359,7 +360,7 @@ public void onCompletion(MediaPlayer mp) {
 
                 videoCompleted(false);
 
-                makeTrackingHttpRequest(mVastVideoConfiguration.getCompleteTrackers());
+                makeTrackingHttpRequest(mVastVideoConfiguration.getCompleteTrackers(), context);
                 mIsVideoFinishedPlaying = true;
 
                 videoView.setVisibility(View.GONE);
@@ -450,7 +451,7 @@ private ImageView createCompanionAdImageView(final Context context) {
     }
 
     private void handleClick(final List<String> clickThroughTrackers, final String clickThroughUrl) {
-        makeTrackingHttpRequest(clickThroughTrackers);
+        makeTrackingHttpRequest(clickThroughTrackers, getContext());
 
         videoClicked();
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Interstitials.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/Interstitials.java
new file mode 100644
index 00000000..a4e4d384
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/Interstitials.java
@@ -0,0 +1,26 @@
+package com.mopub.mobileads.util;
+
+import android.graphics.Color;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+
+public class Interstitials {
+    private Interstitials(){}
+
+    public static boolean addCloseEventRegion(final ViewGroup viewGroup, final ViewGroup.LayoutParams layoutParams, final View.OnClickListener onClickListener) {
+        if (viewGroup == null || viewGroup.getContext() == null) {
+            return false;
+        }
+
+        // An area of the screen that will always lead to an expanded MRAID ad collapsing.
+        final Button closeEventRegion = new Button(viewGroup.getContext());
+        closeEventRegion.setVisibility(View.VISIBLE);
+        closeEventRegion.setBackgroundColor(Color.TRANSPARENT);
+        closeEventRegion.setOnClickListener(onClickListener);
+
+        viewGroup.addView(closeEventRegion, layoutParams);
+
+        return true;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTrackingManager.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTrackingManager.java
index 8e2da415..fda539a5 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTrackingManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTrackingManager.java
@@ -1,142 +1,261 @@
 package com.mopub.nativeads;
 
 import android.graphics.Rect;
+import android.os.Handler;
 import android.os.SystemClock;
 import android.view.View;
+import android.view.ViewTreeObserver;
 
-import java.util.ConcurrentModificationException;
-import java.util.Iterator;
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Map;
 import java.util.WeakHashMap;
-import java.util.concurrent.Executors;
-import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicBoolean;
 
-class ImpressionTrackingManager {
+import static android.view.ViewTreeObserver.OnPreDrawListener;
+
+/**
+ * Tracks views to determine when they've been viewable by the user, where viewability is defined as
+ * having been at least X% on the screen for a continuous Y seconds. These values are set by the
+ */
+final class ImpressionTrackingManager {
+    private ImpressionTrackingManager(){}
+
     private static final int PERIOD = 250;
 
-    private static WeakHashMap<View, NativeResponseWrapper> sKeptViews = new WeakHashMap<View, NativeResponseWrapper>(10);
-    private static final ScheduledExecutorService sScheduledExecutorService = Executors.newSingleThreadScheduledExecutor();
-    private static final VisibilityCheck sVisibilityCheck = new VisibilityCheck();
-    private static AtomicBoolean mIsStarted = new AtomicBoolean(false);
-
-    static void start() {
-        if (mIsStarted.compareAndSet(false, true)) {
-            /**
-             * Scheduling with fixed delay means that the delay is calculated after the task
-             * finishes running. This means that we will never have two tasks running at the same
-             * time.
-             */
-            sScheduledExecutorService.scheduleWithFixedDelay(sVisibilityCheck, 0, PERIOD, TimeUnit.MILLISECONDS);
+    // Visible views currently polling to become viewable, subset of tracked views.
+    private static final WeakHashMap<View, OnPreDrawListener> sWaitingViews =
+            new WeakHashMap<View, OnPreDrawListener>(10);
+
+    // Views waiting to become visible, subset of tracked views
+    private static final WeakHashMap<View, NativeResponseWrapper> sPollingViews =
+            new WeakHashMap<View, NativeResponseWrapper>(10);
+
+    // Handler to delay starting tracking until the next render loop
+    private static final Handler startHandler = new Handler();
+
+    // Handler for polling visible views
+    private static final Handler pollHandler = new Handler();
+
+    // Runnable to run on each visibility loop
+    private static final PollingRunnable pollingRunnable = new PollingRunnable();
+
+    // Object to check actual visibility
+    private static final VisibilityChecker visibilityChecker = new VisibilityChecker();
+
+    /**
+     * Tracks the given view for visibility.
+     * <p/>
+     * If the view is already being tracked this does nothing. To restart tracking you should call
+     * stopTracking first.
+     * <p/>
+     * It is the caller's responsibility to avoid tracking views for ads that have already registered
+     * an impression.
+     */
+    static void addView(final View view, final NativeResponse nativeResponse) {
+        // Ignore if already being tracked.
+        if (view == null || nativeResponse == null || isViewTracked(view)) {
+            return;
         }
+
+        // Posting the handler gives the view another render loop before checking visibility. Useful
+        // because ListView likes to reparent a views after calling getView.
+        final WeakReference<View> viewReference = new WeakReference<View>(view);
+        startHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                final View view = viewReference.get();
+                // Might have been untracked or GC'd
+                if (view == null) {
+                    return;
+                }
+
+                // Important to test viewability instead of just waiting
+                if (visibilityChecker.isMostlyVisible(view,
+                        nativeResponse.getImpressionMinPercentageViewed())) {
+                    pollVisibleView(view, nativeResponse);
+                } else {
+                    waitForVisibility(view, nativeResponse);
+                }
+            }
+        });
     }
 
-    static void stop() {
-        if (mIsStarted.compareAndSet(true, false)) {
-            sScheduledExecutorService.shutdownNow();
+    static boolean isViewTracked(final View view) {
+        return sPollingViews.containsKey(view) || sWaitingViews.containsKey(view);
+    }
+
+    static void waitForVisibility(final View view, final NativeResponse nativeResponse) {
+        // Remove from the polling list
+        removePollingView(view);
+
+        // Track draw events on this view to see when it becomes visible
+        final WeakReference<View> viewReference = new WeakReference<View>(view);
+        OnPreDrawListener preDrawListener = new OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                final View view = viewReference.get();
+                if (view == null) {
+                    return true;
+                }
+
+                if (visibilityChecker.isMostlyVisible(view,
+                        nativeResponse.getImpressionMinPercentageViewed())) {
+                    pollVisibleView(view, nativeResponse);
+                }
+                return true;
+            }
+        };
+
+        final ViewTreeObserver viewTreeObserver = view.getViewTreeObserver();
+        if (viewTreeObserver.isAlive()) {
+            viewTreeObserver.addOnPreDrawListener(preDrawListener);
+            sWaitingViews.put(view, preDrawListener);
         }
     }
 
-    static void addView(final View view, final NativeResponse nativeResponse) {
-        if (view == null || nativeResponse == null) {
+    static void pollVisibleView(final View view, final NativeResponse nativeResponse) {
+        // Remove from waiting and add to polling
+        removeWaitingView(view);
+        sPollingViews.put(view, new NativeResponseWrapper(nativeResponse));
+
+        // Make sure we're polling
+        scheduleNextPoll();
+    }
+
+    static void scheduleNextPoll() {
+        // Only schedule if there are no messages already scheduled.
+        if (pollHandler.hasMessages(0)) {
             return;
         }
-        sKeptViews.put(
-                view,
-                new NativeResponseWrapper(nativeResponse)
-        );
+
+        pollHandler.postDelayed(pollingRunnable, PERIOD);
+    }
+
+    static void removeWaitingView(final View view) {
+        final OnPreDrawListener listener = sWaitingViews.remove(view);
+        if (listener != null) {
+            final ViewTreeObserver viewTreeObserver = view.getViewTreeObserver();
+            if (viewTreeObserver.isAlive()) {
+                viewTreeObserver.removeOnPreDrawListener(listener);
+            }
+        }
     }
 
-    static void removeView(final View view) {
-        sKeptViews.remove(view);
+    static void removePollingView(View view) {
+        sPollingViews.remove(view);
     }
 
-    static class VisibilityCheck implements Runnable {
-        @Override
-        public void run() {
-            final Iterator<Map.Entry<View, NativeResponseWrapper>> entryIterator = sKeptViews.entrySet().iterator();
-
-            while (entryIterator.hasNext()) {
-                final Map.Entry<View, NativeResponseWrapper> entry = entryIterator.next();
-                final View view = entry.getKey();
-                final NativeResponseWrapper nativeResponseWrapper = entry.getValue();
-
-                // if our wrapper or its response is null, skip
-                if (nativeResponseWrapper == null || nativeResponseWrapper.mNativeResponse == null) {
-                    try {
-                        entryIterator.remove();
-                    } catch (ConcurrentModificationException e) {
-                        // continue
-                    }
-                    continue;
-                }
+    /**
+     * Stops tracking a view, cleaning any pending tracking
+     */
+    static void removeView(View view) {
+        removeWaitingView(view);
+        removePollingView(view);
+    }
 
-                if (nativeResponseWrapper.mNativeResponse.isDestroyed()) {
-                    try {
-                        entryIterator.remove();
-                    } catch (ConcurrentModificationException e) {
-                        // continue
-                    }
-                    continue;
-                }
+    /**
+     * Immediately clear all views. Useful for when we re-request ads for an ad placer
+     */
+    static void clearTracking() {
+        // Stop waiting. Copy so that we can modify the map during iteration.
+        final List<View> views = new ArrayList<View>(sWaitingViews.keySet());
+        for (final View view : views) {
+            removeWaitingView(view);
+        }
 
-                // if this response has already recorded an impression, skip
-                if (nativeResponseWrapper.mNativeResponse.getRecordedImpression()) {
-                    try {
-                        entryIterator.remove();
-                    } catch (ConcurrentModificationException e) {
-                        // continue
-                    }
-                    continue;
-                }
+        // Clear and stop the polling
+        sPollingViews.clear();
+        pollHandler.removeMessages(0);
 
-                // if the view is not sufficiently visible, reset the visible timestamp, and skip
-                if (!isVisible(view, nativeResponseWrapper)) {
-                    nativeResponseWrapper.mFirstVisibleTimestamp = 0;
+        // Stop any views being currently added to tracking
+        startHandler.removeMessages(0);
+    }
+
+    static class PollingRunnable implements Runnable {
+
+        @Override
+        public void run() {
+            final ArrayList<View> views = new ArrayList<View>(sPollingViews.keySet());
+            for (final View view : views) {
+                final NativeResponseWrapper nativeResponseWrapper = sPollingViews.get(view);
+
+                if (nativeResponseWrapper == null
+                        || nativeResponseWrapper.mNativeResponse == null
+                        || nativeResponseWrapper.mNativeResponse.getRecordedImpression()
+                        || nativeResponseWrapper.mNativeResponse.isDestroyed()) {
+                    removeView(view);
                     continue;
                 }
 
-                // if it just became visible, set the firstChecked timestamp, and skip
-                if (nativeResponseWrapper.mFirstVisibleTimestamp == 0) {
-                    nativeResponseWrapper.mFirstVisibleTimestamp = SystemClock.uptimeMillis();
+                // If no longer visible, go back to a waiting state
+                if (!visibilityChecker.isMostlyVisible(view,
+                        nativeResponseWrapper.mNativeResponse.getImpressionMinPercentageViewed())) {
+                    // Also removes from the visible list
+                    waitForVisibility(view, nativeResponseWrapper.mNativeResponse);
                     continue;
                 }
 
-                // if not enough time has elapsed, skip
-                if (SystemClock.uptimeMillis() - nativeResponseWrapper.mFirstVisibleTimestamp < nativeResponseWrapper.mNativeResponse.getImpressionMinTimeViewed()) {
+                // If it's been visible for a Y seconds, trigger the callback
+                if (!visibilityChecker.hasRequiredTimeElapsed(
+                        nativeResponseWrapper.mFirstVisibleTimestamp,
+                        nativeResponseWrapper.mNativeResponse.getImpressionMinTimeViewed())) {
                     continue;
                 }
 
-                // otherwise, record an impression
                 nativeResponseWrapper.mNativeResponse.recordImpression(view);
+                removeView(view);
+            }
 
-                try {
-                    entryIterator.remove();
-                } catch (ConcurrentModificationException e) {
-                    // continue
-                }
+            if (!sPollingViews.isEmpty()) {
+                scheduleNextPoll();
             }
         }
+    }
+
+    // Visible for testing.
+    static class VisibilityChecker {
+
+        /**
+         * Whether the visible time has elapsed from the start time. Easily mocked for testing.
+         */
+        static boolean hasRequiredTimeElapsed(final long startTimeMillis,
+                final int impressionMinTimeViewed) {
+            return SystemClock.uptimeMillis() - startTimeMillis >= impressionMinTimeViewed;
+        }
 
-        static boolean isVisible(final View view, final NativeResponseWrapper nativeResponseWrapper) {
-            if (view == null || nativeResponseWrapper == null || view.getVisibility() != View.VISIBLE) {
+        /**
+         * Whether the view is at least certain % visible
+         */
+        static boolean isMostlyVisible(final View view, final int impressionMinPercentageViewed) {
+            /*
+             * ListView & GridView both call detachFromParent() for views that can be recycled for
+             * new data. This is one of the rare instances where a view will have a null parent for
+             * an extended period of time and will not be the main window.
+             *
+             * view.getGlobalVisibleRect() doesn't check that case, so if the view has visibility
+             * of View.VISIBLE but has no parent it is likely in the recycle bin of a
+             * ListView / GridView and not on screen.
+             */
+            if (view == null || view.getVisibility() != View.VISIBLE || view.getParent() == null) {
                 return false;
             }
 
-            final Rect visibleRect = new Rect();
-            view.getGlobalVisibleRect(visibleRect);
+            final Rect clipRect = new Rect();
+            if (!view.getGlobalVisibleRect(clipRect)) {
+                // Not visible
+                return false;
+            }
 
-            final int visibleViewArea = visibleRect.width() * visibleRect.height();
-            final int totalViewArea = view.getWidth() * view.getHeight();
+            // % visible check - the cast is to avoid int overflow for large views.
+            final long visibleViewArea = (long) clipRect.height() * clipRect.width();
+            final long totalViewArea = (long) view.getHeight() * view.getWidth();
 
             if (totalViewArea <= 0) {
                 return false;
             }
 
-            final double visiblePercent = 100 * visibleViewArea / totalViewArea;
-
-            return visiblePercent >= nativeResponseWrapper.mNativeResponse.getImpressionMinPercentageViewed();
+            return 100 * visibleViewArea >= impressionMinPercentageViewed * totalViewArea;
         }
     }
 
@@ -146,17 +265,22 @@ static boolean isVisible(final View view, final NativeResponseWrapper nativeResp
 
         NativeResponseWrapper(final NativeResponse nativeResponse) {
             mNativeResponse = nativeResponse;
-            mFirstVisibleTimestamp = 0;
+            mFirstVisibleTimestamp = SystemClock.uptimeMillis();
         }
     }
 
     @Deprecated // for testing
-    static void purgeViews() {
-        sKeptViews.clear();
+    static Map<View, OnPreDrawListener> getWaitingViews() {
+        return sWaitingViews;
+    }
+
+    @Deprecated // for testing
+    static Map<View, NativeResponseWrapper> getPollingViews() {
+        return sPollingViews;
     }
 
     @Deprecated // for testing
-    static Map<View, NativeResponseWrapper> getKeptViews() {
-        return sKeptViews;
+    static Handler getStartHandler() {
+        return startHandler;
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
index 7b567d10..4903cdb5 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
@@ -6,6 +6,7 @@
 import com.mopub.common.DownloadResponse;
 import com.mopub.common.DownloadTask;
 import com.mopub.common.GpsHelper;
+import com.mopub.common.HttpClient;
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.DeviceUtils;
 import com.mopub.common.util.ManifestUtils;
@@ -23,7 +24,6 @@
 import static com.mopub.common.GpsHelper.GpsHelperListener;
 import static com.mopub.common.GpsHelper.asyncFetchAdvertisingInfo;
 import static com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
-import static com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
 import static com.mopub.nativeads.MoPubNative.MoPubNativeListener.EMPTY_MOPUB_NATIVE_LISTENER;
 import static com.mopub.nativeads.NativeErrorCode.CONNECTION_ERROR;
 import static com.mopub.nativeads.NativeErrorCode.EMPTY_AD_RESPONSE;
@@ -55,8 +55,6 @@
     private Map<String, Object> mLocalExtras;
 
     public MoPubNative(final Context context, final String adUnitId, final MoPubNativeListener moPubNativeListener) {
-        ImpressionTrackingManager.start();
-
         if (context == null) {
             throw new IllegalArgumentException("Context may not be null.");
         } else if (adUnitId == null) {
@@ -131,10 +129,20 @@ void loadNativeAd(final RequestParameters requestParameters) {
         requestNativeAd(endpointUrl);
     }
 
-    private void requestNativeAd(final String endpointUrl) {
+    void requestNativeAd(final String endpointUrl) {
+        final Context context = getContextOrDestroy();
+        if (context == null) {
+            return;
+        }
+
+        if (endpointUrl == null) {
+            mMoPubNativeListener.onNativeFail(INVALID_REQUEST_URL);
+            return;
+        }
+
         final HttpGet httpGet;
         try {
-            httpGet = new HttpGet(endpointUrl);
+            httpGet = HttpClient.initializeHttpGet(endpointUrl, context);
         } catch (IllegalArgumentException e) {
             mMoPubNativeListener.onNativeFail(INVALID_REQUEST_URL);
             return;
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
index fab32c2b..e353c2bf 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
@@ -197,7 +197,7 @@ public void recordImpression(final View view) {
         }
 
         for (final String impressionTracker : getImpressionTrackers()) {
-            HttpClient.makeTrackingHttpRequest(impressionTracker);
+            HttpClient.makeTrackingHttpRequest(impressionTracker, mContext);
         }
 
         mNativeAd.recordImpression();
@@ -212,7 +212,7 @@ public void handleClick(final View view) {
         }
 
         if (!isClicked()) {
-            HttpClient.makeTrackingHttpRequest(mMoPubClickTracker);
+            HttpClient.makeTrackingHttpRequest(mMoPubClickTracker, mContext);
         }
 
         openClickDestinationUrl(view);
diff --git a/mopub-sdk/src/test/java/com/mopub/common/HttpClientTest.java b/mopub-sdk/src/test/java/com/mopub/common/HttpClientTest.java
new file mode 100644
index 00000000..48f721bb
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/HttpClientTest.java
@@ -0,0 +1,118 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.webkit.WebView;
+
+import com.mopub.common.util.ResponseHeader;
+import com.mopub.common.util.test.support.CommonUtils;
+
+import org.apache.http.HttpRequest;
+import org.apache.http.client.methods.HttpGet;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.tester.org.apache.http.RequestMatcher;
+import org.robolectric.tester.org.apache.http.TestHttpResponse;
+
+import static com.mopub.common.HttpClient.initializeHttpGet;
+import static junit.framework.Assert.fail;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(RobolectricTestRunner.class)
+public class HttpClientTest {
+    static final String url = "http://www.mopub.com";
+    private Activity context;
+    private String userAgent;
+
+    @Before
+    public void setup() {
+        context = new Activity();
+        userAgent = new WebView(context).getSettings().getUserAgentString();
+
+        Robolectric.addHttpResponseRule(new RequestMatcher() {
+            @Override
+            public boolean matches(HttpRequest request) {
+                return true;
+            }
+        }, new TestHttpResponse(200, "body"));
+
+        HttpClient.setWebViewUserAgent(null);
+        Robolectric.getBackgroundScheduler().pause();
+        Robolectric.clearPendingHttpResponses();
+    }
+
+    @After
+    public void tearDown() throws Exception {
+        HttpClient.setWebViewUserAgent(null);
+        Robolectric.getBackgroundScheduler().reset();
+        Robolectric.clearPendingHttpResponses();
+    }
+
+    @Test
+    public void initializeHttpGet_shouldReturnHttpGetWithWebViewUserAgent() throws Exception {
+        HttpGet httpGet = initializeHttpGet(url, context);
+
+        assertThat(httpGet.getURI().toURL().toString()).isEqualTo(url);
+        assertThat(httpGet.getFirstHeader(ResponseHeader.USER_AGENT.getKey()).getValue()).isEqualTo(userAgent);
+    }
+
+    @Test
+    public void initializeHttpGet_shouldPopulateStaticWebViewUserAgent() throws Exception {
+        assertThat(HttpClient.getWebViewUserAgent()).isNull();
+
+        HttpGet httpGet = initializeHttpGet(url, context);
+
+        assertThat(HttpClient.getWebViewUserAgent()).isEqualTo(userAgent);
+    }
+
+    @Test
+    public void initializeHttpGet_withNullUrl_shouldThrowNullPointerException() throws Exception {
+        try {
+            HttpGet httpGet = initializeHttpGet(null, context);
+            fail("Expecting null pointer expection to be thrown");
+        } catch (NullPointerException e) {
+            // pass
+        }
+    }
+
+    @Test
+    public void initializeHttpGet_withNullContext_shouldNotPopulateUserAgentHeader() throws Exception {
+        HttpGet httpGet = initializeHttpGet(url, null);
+
+        assertThat(httpGet.getURI().toURL().toString()).isEqualTo(url);
+        assertThat(httpGet.getFirstHeader(ResponseHeader.USER_AGENT.getKey())).isNull();
+    }
+
+    @Test
+    public void makeTrackingHttpRequest_shouldMakeTrackingHttpRequestWithWebViewUserAgent() throws Exception {
+        HttpClient.makeTrackingHttpRequest(url, context);
+
+        Robolectric.getBackgroundScheduler().unPause();
+        Thread.sleep(500);
+
+        CommonUtils.assertHttpRequestsMade(userAgent, url);
+    }
+
+    @Test
+    public void makeTrackingHttpRequest_withNullUrl_shouldNotMakeTrackingHttpRequest() throws Exception {
+        HttpClient.makeTrackingHttpRequest((String) null, context);
+
+        Robolectric.getBackgroundScheduler().unPause();
+        Thread.sleep(500);
+
+        CommonUtils.assertHttpRequestsMade(null);
+    }
+
+    @Test
+    public void makeTrackingHttpRequest_withNullContext_shouldNotMakeTrackingHttpRequest() throws Exception {
+        HttpClient.makeTrackingHttpRequest(url, null);
+
+        Robolectric.getBackgroundScheduler().unPause();
+        Thread.sleep(500);
+
+        CommonUtils.assertHttpRequestsMade(null);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/CommonUtils.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/CommonUtils.java
index dcfabedc..b83bf83d 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/CommonUtils.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/CommonUtils.java
@@ -1,16 +1,30 @@
 package com.mopub.common.util.test.support;
 
+import org.apache.http.HttpRequest;
 import org.robolectric.Robolectric;
 
+import static com.mopub.common.util.ResponseHeader.USER_AGENT;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 public class CommonUtils {
-    public static void assertHttpRequestsMade(String... urls) {
+    public static void assertHttpRequestsMade(final String userAgent, final String... urls) {
         final int numberOfReceivedHttpRequests = Robolectric.getFakeHttpLayer().getSentHttpRequestInfos().size();
         assertThat(numberOfReceivedHttpRequests).isEqualTo(urls.length);
 
         for (final String url : urls) {
             assertThat(Robolectric.httpRequestWasMade(url)).isTrue();
         }
+
+        if (userAgent != null) {
+            while (true) {
+                final HttpRequest httpRequest = Robolectric.getNextSentHttpRequest();
+                if (httpRequest == null) {
+                    break;
+                }
+
+                assertThat(httpRequest.getFirstHeader(USER_AGENT.getKey()).getValue())
+                        .isEqualTo(userAgent);
+            }
+        }
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAsyncTasks.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAsyncTasks.java
new file mode 100644
index 00000000..585c5323
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAsyncTasks.java
@@ -0,0 +1,44 @@
+package com.mopub.common.util.test.support;
+
+import android.os.AsyncTask;
+
+import com.mopub.common.util.AsyncTasks;
+
+import org.robolectric.annotation.Implementation;
+import org.robolectric.annotation.Implements;
+
+import java.util.Arrays;
+import java.util.List;
+
+@Implements(value = AsyncTasks.class, callThroughByDefault = false)
+public class ShadowAsyncTasks {
+    private static boolean sWasCalled;
+    private static AsyncTask<?, ?, ?> sAsyncTask;
+    private static List<?> sParams;
+
+    @Implementation
+    public static <P> void safeExecuteOnExecutor(AsyncTask<P, ?, ?> asyncTask, P... params)
+            throws IllegalArgumentException, IllegalStateException {
+        sWasCalled = true;
+        sAsyncTask = asyncTask;
+        sParams = Arrays.asList(params);
+    }
+
+    public static boolean wasCalled() {
+        return sWasCalled;
+    }
+
+    public static AsyncTask<?, ?, ?> getLatestAsyncTask() {
+        return sAsyncTask;
+    }
+
+    public static List<?> getLatestParams() {
+        return sParams;
+    }
+
+    public static void reset() {
+        sWasCalled = false;
+        sAsyncTask = null;
+        sParams = null;
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
index 49f20ecd..b3838554 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
@@ -42,7 +42,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.ADMOB_BANNER;
+import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.GOOGLE_PLAY_SERVICES_BANNER;
 import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.HTML_BANNER;
 import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.HTML_INTERSTITIAL;
 import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MRAID_BANNER;
@@ -137,7 +137,7 @@ public void fromHttpResponse_whenCustomEventDelegate_shouldConvertAdMobToCustomE
         response.addHeader(NATIVE_PARAMS.getKey(), expectedNativeParams);
 
         AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(ADMOB_BANNER.toString());
+        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME.getKey())).isEqualTo(GOOGLE_PLAY_SERVICES_BANNER.toString());
 
         String actualNativeParams = customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA.getKey());
         JsonUtils.assertJsonStringMapsEqual(actualNativeParams, expectedNativeParams);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
index 992f3181..57a72d6d 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
@@ -40,15 +40,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.ADMOB_BANNER;
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.ADMOB_INTERSTITIAL;
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.HTML_BANNER;
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.HTML_INTERSTITIAL;
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MILLENNIAL_BANNER;
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MILLENNIAL_INTERSTITIAL;
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MRAID_BANNER;
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MRAID_INTERSTITIAL;
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.VAST_VIDEO_INTERSTITIAL;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.stub;
@@ -71,27 +62,17 @@ public void setUp() throws Exception {
     }
 
     @Test
-    public void getAdMobBanner() throws Exception {
+    public void getAdMobBannerReturnsGooglePlayServicesBanner() throws Exception {
         customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubView, "admob_native", null);
 
-        assertThat(customEventName).isEqualTo("com.mopub.mobileads.GoogleAdMobBanner");
+        assertThat(customEventName).isEqualTo("com.mopub.mobileads.GooglePlayServicesBanner");
     }
 
     @Test
-    public void getAdMobInterstitial() throws Exception {
+    public void getAdMobInterstitialReturnsGooglePlayServicesInterstitial() throws Exception {
         customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubInterstitialView, "interstitial", "admob_full");
 
-        assertThat(customEventName).isEqualTo("com.mopub.mobileads.GoogleAdMobInterstitial");
-    }
-
-    @Ignore("pending")
-    @Test
-    public void getGooglePlayServicesBanner() throws Exception {
-    }
-
-    @Ignore("pending")
-    @Test
-    public void getGooglePlayServicesInterstitial() throws Exception {
+        assertThat(customEventName).isEqualTo("com.mopub.mobileads.GooglePlayServicesInterstitial");
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
index e88b5848..8a45f1e2 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
@@ -41,6 +41,7 @@
 import android.view.ViewGroup;
 import android.widget.ImageButton;
 import android.widget.RelativeLayout;
+
 import org.fest.assertions.api.ANDROID;
 import org.junit.Ignore;
 import org.junit.Test;
@@ -87,13 +88,6 @@ public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
         verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
     }
 
-    @Test
-    public void onCreate_shouldSetContentView() throws Exception {
-        subject.onCreate(null);
-
-        assertThat(getContentView(subject).getChildCount()).isEqualTo(2);
-    }
-
     @Test
     public void onCreate_shouldCreateView() throws Exception {
         subject.onCreate(null);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
index 07124044..7dbc9d49 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
@@ -44,8 +44,7 @@
 import org.robolectric.Robolectric;
 import org.robolectric.shadows.ShadowWebView;
 
-import static com.mopub.common.util.VersionCode.ECLAIR_MR1;
-import static com.mopub.common.util.VersionCode.FROYO;
+import static com.mopub.common.util.VersionCode.JELLY_BEAN_MR1;
 import static com.mopub.common.util.VersionCode.JELLY_BEAN_MR2;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.eq;
@@ -55,7 +54,6 @@
 
 @RunWith(SdkTestRunner.class)
 public class BaseWebViewTest {
-
     private Activity context;
     private BaseWebView subject;
 
@@ -65,20 +63,8 @@ public void setup() {
     }
 
     @Test
-    public void beforeFroyo_shouldDisablePluginsByDefault() throws Exception {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", ECLAIR_MR1.getApiLevel());
-        subject = new BaseWebView(context);
-
-        WebSettings webSettings = subject.getSettings();
-        assertThat(webSettings.getPluginsEnabled()).isFalse();
-
-        subject.enablePlugins(true);
-        assertThat(webSettings.getPluginsEnabled()).isTrue();
-    }
-
-    @Test
-    public void froyoAndAfter_shouldDisablePluginsByDefault() throws Exception {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", FROYO.getApiLevel());
+    public void jellyBeanMr1AndBefore_shouldDisablePluginsByDefault() throws Exception {
+        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", JELLY_BEAN_MR1.getApiLevel());
         subject = new BaseWebView(context);
 
         WebSettings webSettings = subject.getSettings();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
index d5f13793..0d6b1986 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
@@ -62,6 +62,7 @@
 import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
 
+
 @RunWith(SdkTestRunner.class)
 public class CustomEventBannerAdapterTest {
     private CustomEventBannerAdapter subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
index 2686b809..c458e4ba 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
@@ -58,6 +58,7 @@
 import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
 
+
 @RunWith(SdkTestRunner.class)
 public class CustomEventInterstitialAdapterTest {
     private CustomEventInterstitialAdapter subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
index e10fd2a9..f5dbe9c2 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
@@ -39,8 +39,10 @@
 import android.view.View;
 import android.webkit.WebViewClient;
 import android.widget.RelativeLayout;
+
 import com.mopub.mobileads.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHtmlInterstitialWebViewFactory;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -49,7 +51,6 @@
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
 
 import static android.widget.RelativeLayout.LayoutParams;
-import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
 import static com.mopub.mobileads.AdFetcher.CLICKTHROUGH_URL_KEY;
 import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
@@ -153,6 +154,13 @@ public void preRenderHtml_shouldHaveAMoPubUriInterfaceThatForwardsOnInterstitial
         verify(customEventInterstitialListener).onInterstitialLoaded();
     }
 
+    @Test
+    public void onCreate_shouldSetContentView() throws Exception {
+        subject.onCreate(null);
+
+        assertThat(getContentView(subject).getChildCount()).isEqualTo(2);
+    }
+
     @Test
     public void onCreate_shouldLayoutWebView() throws Exception {
         subject.onCreate(null);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
index 5d62836b..1cc01d41 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
@@ -32,16 +32,23 @@
 
 package com.mopub.mobileads;
 
+import android.app.Activity;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
+import android.graphics.Color;
 import android.os.Build;
 import android.view.View;
 import android.view.WindowManager;
 import android.webkit.WebViewClient;
+import android.widget.Button;
 import android.widget.ImageButton;
+import android.widget.RelativeLayout;
+
+import com.mopub.common.util.Dips;
 import com.mopub.mobileads.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestMraidViewFactory;
+
 import org.fest.assertions.api.ANDROID;
 import org.junit.Before;
 import org.junit.Test;
@@ -72,10 +79,12 @@
 
     private MraidView mraidView;
     private CustomEventInterstitial.CustomEventInterstitialListener customEventInterstitialListener;
+    private Activity context;
 
     @Before
     public void setUp() throws Exception {
         super.setup();
+        context = new Activity();
         Intent mraidActivityIntent = createMraidActivityIntent(EXPECTED_SOURCE);
         mraidView = TestMraidViewFactory.getSingletonMock();
         resetMockedView(mraidView);
@@ -148,6 +157,13 @@ public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_
         verify(customEventInterstitialListener).onInterstitialLoaded();
     }
 
+    @Test
+    public void onCreate_shouldSetContentView() throws Exception {
+        subject.onCreate(null);
+
+        assertThat(getContentView(subject).getChildCount()).isEqualTo(3);
+    }
+
     @Test
     public void onCreate_shouldSetupAnMraidView() throws Exception {
         subject.onCreate(null);
@@ -159,6 +175,21 @@ public void onCreate_shouldSetupAnMraidView() throws Exception {
         verify(mraidView).loadHtmlData(EXPECTED_SOURCE);
     }
 
+    @Test
+    public void onCreate_shouldAddCloseEventRegion() throws Exception {
+        subject.onCreate(null);
+
+        final Button closeEventRegion = (Button) getContentView(subject).getChildAt(2);
+        assertThat(closeEventRegion.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(shadowOf(closeEventRegion).getBackgroundColor()).isEqualTo(Color.TRANSPARENT);
+        assertThat(Dips.pixelsToIntDips((float) closeEventRegion.getLayoutParams().width, context)).isEqualTo(50);
+        assertThat(Dips.pixelsToIntDips((float) closeEventRegion.getLayoutParams().height, context)).isEqualTo(50);
+        assertThat(((RelativeLayout.LayoutParams)closeEventRegion.getLayoutParams()).getRules()[RelativeLayout.ALIGN_PARENT_TOP])
+                .isEqualTo(RelativeLayout.TRUE);
+        assertThat(((RelativeLayout.LayoutParams)closeEventRegion.getLayoutParams()).getRules()[RelativeLayout.ALIGN_PARENT_RIGHT])
+                .isEqualTo(RelativeLayout.TRUE);
+    }
+
     @Test
     public void onCreate_whenICS_shouldSetHardwareAcceleratedFlag() throws Exception {
         Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", 14);
@@ -179,6 +210,15 @@ public void onCreate_whenPreICS_shouldNotSetHardwareAcceleratedFlag() throws Exc
         assertThat(hardwareAccelerated).isFalse();
     }
 
+    @Test
+    public void closeEventRegion_shouldFinishActivityWhenClicked() throws Exception {
+        subject.onCreate(null);
+
+        final Button closeEventRegion = (Button) getContentView(subject).getChildAt(2);
+        assertThat(closeEventRegion.performClick()).isTrue();
+        assertThat(subject.isFinishing()).isTrue();
+    }
+
     @Test
     public void onDestroy_DestroyMraidView() throws Exception {
         Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, subject.getBroadcastIdentifier());
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandTest.java
index 702eced0..6dee186f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandTest.java
@@ -88,6 +88,7 @@ public void createCommand_shouldPassParameters() throws Exception {
         assertThat(command.mView).isEqualTo(expectedView);
     }
 
+
     @Test
     public void createCommand_close_shouldSetDependentOnUserClick() throws Exception {
         assertThat(create(CLOSE.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INLINE)).isFalse();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java
index 514f9896..610ae4bc 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java
@@ -37,15 +37,19 @@
 import android.app.AlertDialog;
 import android.content.Context;
 import android.content.Intent;
+import android.graphics.Color;
 import android.os.Build;
 import android.os.Environment;
 import android.provider.CalendarContract;
+import android.view.Gravity;
 import android.view.View;
 import android.view.ViewGroup;
+import android.widget.Button;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.RelativeLayout;
 
+import com.mopub.common.util.Dips;
 import com.mopub.mobileads.test.support.FileUtils;
 import com.mopub.mobileads.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
@@ -127,6 +131,7 @@
     private AdConfiguration adConfiguration;
     private long testBroadcastIdentifier;
 
+
     @Before
     public void setup() {
         mraidView = TestMraidViewFactory.getSingletonMock();
@@ -798,6 +803,21 @@ public void createCalendarEvent_withValidParamsAllExceptRecurrence_onICS_shouldC
         assertThat(intent.getIntExtra(CalendarContract.Events.AVAILABILITY, -1)).isEqualTo(CalendarContract.Events.AVAILABILITY_FREE);
     }
 
+    @Test
+    public void addCloseEventRegion_shouldAddCloseEventRegionToFrameLayout() throws Exception {
+        Activity activity = new Activity();
+        FrameLayout frameLayout = new FrameLayout(activity);
+        subject.addCloseEventRegion(frameLayout);
+
+        final Button closeEventRegion = (Button) frameLayout.getChildAt(0);
+        assertThat(closeEventRegion.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(shadowOf(closeEventRegion).getBackgroundColor()).isEqualTo(Color.TRANSPARENT);
+        assertThat(shadowOf(closeEventRegion).getOnClickListener()).isEqualTo(subject.getCloseOnClickListener());
+        assertThat(Dips.pixelsToIntDips((float)closeEventRegion.getLayoutParams().width, activity)).isEqualTo(50);
+        assertThat(Dips.pixelsToIntDips((float)closeEventRegion.getLayoutParams().height, activity)).isEqualTo(50);
+        assertThat(((FrameLayout.LayoutParams)closeEventRegion.getLayoutParams()).gravity).isEqualTo(Gravity.TOP | Gravity.RIGHT);
+    }
+
     private void resetMockMraidView(Context context) {
         reset(mraidView);
         stub(mraidView.getContext()).toReturn(context);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
index 2182fce4..b550e83f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
@@ -12,6 +12,7 @@
 import android.os.Bundle;
 import android.view.View;
 import android.view.ViewGroup;
+import android.webkit.WebView;
 import android.widget.ImageView;
 import android.widget.VideoView;
 
@@ -33,7 +34,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.robolectric.Robolectric;
-import org.robolectric.shadows.ShadowHandler;
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
 import org.robolectric.shadows.ShadowVideoView;
 import org.robolectric.tester.org.apache.http.RequestMatcher;
@@ -78,6 +78,7 @@
     private BaseVideoViewControllerListener baseVideoViewControllerListener;
     private EventForwardingBroadcastReceiver broadcastReceiver;
     private int expectedBrowserRequestCode;
+    private String expectedUserAgent;
 
     @Before
     public void setUp() throws Exception {
@@ -125,6 +126,8 @@ public boolean matches(HttpRequest request) {
         }, new TestHttpResponse(200, "body"));
 
         ShadowLocalBroadcastManager.getInstance(context).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+
+        expectedUserAgent = new WebView(context).getSettings().getUserAgentString();
     }
 
     @After
@@ -154,7 +157,7 @@ public void constructor_shouldPingImpressionTrackers() throws Exception {
         Robolectric.getBackgroundScheduler().unPause();
         Thread.sleep(NETWORK_DELAY);
 
-        assertHttpRequestsMade("imp");
+        assertHttpRequestsMade(expectedUserAgent, "imp");
     }
 
     @Test
@@ -282,6 +285,7 @@ public void onClick_withCompanionAd_shouldFireCompanionAdClickTrackersAndStartMo
         Thread.sleep(NETWORK_DELAY);
 
         assertHttpRequestsMade(
+                expectedUserAgent,
                 "companion_image_url",
                 "imp",
                 "companion_click_tracking_url_1",
@@ -344,6 +348,7 @@ public void onActivityResult_withIncorrectResultCode_shouldNotCallFinish() throw
         verify(baseVideoViewControllerListener, never()).onFinish();
     }
 
+
     @Test
     public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickBeforeEnd_shouldDoNothing() throws Exception {
         stub(mediaPlayer.getDuration()).toReturn(15999);
@@ -446,7 +451,7 @@ public void onTouch_whenCloseButtonVisible_shouldPingClickThroughTrackers() thro
         Robolectric.getBackgroundScheduler().unPause();
         Thread.sleep(NETWORK_DELAY);
 
-        assertHttpRequestsMade("click_1", "click_2");
+        assertHttpRequestsMade(expectedUserAgent, "click_1", "click_2");
     }
 
     @Test
@@ -536,7 +541,7 @@ public void onCompletion_shouldPingCompletionTrackers() throws Exception {
         Robolectric.getBackgroundScheduler().unPause();
         Thread.sleep(NETWORK_DELAY);
 
-        assertHttpRequestsMade("complete_1", "complete_2");
+        assertHttpRequestsMade(expectedUserAgent, "complete_1", "complete_2");
     }
 
     @Test
@@ -748,7 +753,7 @@ public void videoProgressCheckerRunnableRun_shouldFireOffAllProgressTrackers() t
         Robolectric.getBackgroundScheduler().unPause();
         Thread.sleep(NETWORK_DELAY);
 
-        assertHttpRequestsMade("first", "second", "third");
+        assertHttpRequestsMade(expectedUserAgent, "first", "second", "third");
     }
 
     @Test
@@ -796,7 +801,7 @@ public void videoProgressCheckerRunnableRun_whenCurrentTimeLessThanOneSecond_sho
         Thread.sleep(NETWORK_DELAY);
 
         // Since it has not yet been a second, we expect that the start tracker has not been fired
-        assertHttpRequestsMade();
+        assertHttpRequestsMade(expectedUserAgent);
         Robolectric.getFakeHttpLayer().clearRequestInfos();
 
         // run checker another time
@@ -828,7 +833,7 @@ public void videoProgressCheckerRunnableRun_whenCurrentTimeGreaterThanOneSecond_
 
         Thread.sleep(NETWORK_DELAY);
 
-        assertHttpRequestsMade("start");
+        assertHttpRequestsMade(expectedUserAgent, "start");
         Robolectric.getFakeHttpLayer().clearRequestInfos();
 
         // run checker another time
@@ -859,7 +864,7 @@ public void videoProgressCheckerRunnableRun_whenProgressIsPastFirstQuartile_shou
         Robolectric.getBackgroundScheduler().unPause();
         Thread.sleep(NETWORK_DELAY);
 
-        assertHttpRequestsMade("first");
+        assertHttpRequestsMade(expectedUserAgent, "first");
         Robolectric.getFakeHttpLayer().clearRequestInfos();
 
         // run checker another time
@@ -889,7 +894,7 @@ public void videoProgressCheckerRunnableRun_whenProgressIsPastMidQuartile_should
         Robolectric.getBackgroundScheduler().unPause();
         Thread.sleep(NETWORK_DELAY);
 
-        assertHttpRequestsMade("first", "second");
+        assertHttpRequestsMade(expectedUserAgent, "first", "second");
         Robolectric.getFakeHttpLayer().clearRequestInfos();
 
         Robolectric.getUiThreadScheduler().runOneTask();
@@ -919,7 +924,7 @@ public void videoProgressCheckerRunnableRun_whenProgressIsPastThirdQuartile_shou
         Robolectric.getBackgroundScheduler().unPause();
         Thread.sleep(NETWORK_DELAY);
 
-        assertHttpRequestsMade("first", "second", "third");
+        assertHttpRequestsMade(expectedUserAgent, "first", "second", "third");
         Robolectric.getFakeHttpLayer().clearRequestInfos();
 
         Robolectric.getUiThreadScheduler().runOneTask();
@@ -1097,7 +1102,7 @@ private void fastForwardMediaPlayerAndAssertRequestMade(int time, String... urls
         if (urls == null) {
             assertThat(Robolectric.getNextSentHttpRequest()).isNull();
         } else {
-            assertHttpRequestsMade(urls);
+            assertHttpRequestsMade(expectedUserAgent, urls);
         }
 
         Robolectric.getFakeHttpLayer().clearRequestInfos();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/InterstitialsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/InterstitialsTest.java
new file mode 100644
index 00000000..56f21194
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/InterstitialsTest.java
@@ -0,0 +1,76 @@
+package com.mopub.mobileads.util;
+
+import android.app.Activity;
+import android.graphics.Color;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+
+import com.mopub.common.util.Dips;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+
+import static com.mopub.mobileads.util.Interstitials.addCloseEventRegion;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+import static org.robolectric.Robolectric.shadowOf;
+
+@RunWith(RobolectricTestRunner.class)
+public class InterstitialsTest {
+
+    private Activity context;
+    private RelativeLayout.LayoutParams defaultLayoutParams;
+
+    @Before
+    public void setup() {
+        context = new Activity();
+        defaultLayoutParams = new RelativeLayout.LayoutParams(50, 50);
+    }
+
+    @Test
+    public void addCloseEventRegion_withNullViewGroup_shouldReturnFalse() throws Exception {
+        boolean result = addCloseEventRegion(null, defaultLayoutParams, null);
+
+        assertThat(result).isFalse();
+    }
+
+    @Test
+    public void addCloseEventRegion_withViewGroupButNoContext_shouldReturnFalse() throws Exception {
+        ViewGroup viewGroup = mock(ViewGroup.class);
+        when(viewGroup.getContext()).thenReturn(null);
+
+        boolean result = addCloseEventRegion(viewGroup, defaultLayoutParams, null);
+
+        assertThat(result).isFalse();
+    }
+
+    @Test
+    public void addCloseEventRegion_shouldAddTransparentButVisibleButton() throws Exception {
+        final LinearLayout linearLayout = new LinearLayout(context);
+
+        addCloseEventRegion(linearLayout, defaultLayoutParams, null);
+
+        final Button closeEventRegion = (Button) linearLayout.getChildAt(0);
+        assertThat(closeEventRegion.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(shadowOf(closeEventRegion).getBackgroundColor()).isEqualTo(Color.TRANSPARENT);
+        assertThat(Dips.pixelsToIntDips((float) closeEventRegion.getLayoutParams().width, context)).isEqualTo(50);
+        assertThat(Dips.pixelsToIntDips((float)closeEventRegion.getLayoutParams().height, context)).isEqualTo(50);
+    }
+
+    @Test
+    public void addCloseEventRegion_shouldUsePassedInClickListener() throws Exception {
+        final LinearLayout linearLayout = new LinearLayout(context);
+        final View.OnClickListener onClickListener = mock(View.OnClickListener.class);
+
+        addCloseEventRegion(linearLayout, defaultLayoutParams, onClickListener);
+
+        final Button closeEventRegion = (Button) linearLayout.getChildAt(0);
+        assertThat(shadowOf(closeEventRegion).getOnClickListener()).isEqualTo(onClickListener);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/BaseForwardingNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/BaseForwardingNativeAdTest.java
index f88d5f81..cadf1625 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/BaseForwardingNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/BaseForwardingNativeAdTest.java
@@ -21,7 +21,7 @@ public void setUp() throws Exception {
 
     @After
     public void tearDown() throws Exception {
-        ImpressionTrackingManager.purgeViews();
+        ImpressionTrackingManager.clearTracking();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackingManagerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackingManagerTest.java
index 37ba7dd1..e91cdcd7 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackingManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackingManagerTest.java
@@ -4,6 +4,8 @@
 import android.content.Context;
 import android.graphics.Rect;
 import android.view.View;
+import android.view.ViewParent;
+import android.view.ViewTreeObserver;
 
 import com.mopub.common.DownloadResponse;
 import com.mopub.common.util.ResponseHeader;
@@ -12,7 +14,6 @@
 
 import org.junit.After;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.invocation.InvocationOnMock;
@@ -21,10 +22,10 @@
 import org.robolectric.shadows.ShadowSystemClock;
 import org.robolectric.tester.org.apache.http.TestHttpResponse;
 
-import java.util.Map;
-
+import static android.view.ViewTreeObserver.OnPreDrawListener;
 import static com.mopub.nativeads.ImpressionTrackingManager.NativeResponseWrapper;
-import static com.mopub.nativeads.ImpressionTrackingManager.VisibilityCheck;
+import static com.mopub.nativeads.ImpressionTrackingManager.PollingRunnable;
+import static com.mopub.nativeads.ImpressionTrackingManager.VisibilityChecker.isMostlyVisible;
 import static com.mopub.nativeads.MoPubNative.MoPubNativeListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -37,6 +38,7 @@
 @RunWith(SdkTestRunner.class)
 public class ImpressionTrackingManagerTest {
     private static final String IMPRESSION_TRACKER = "url1";
+    private static final int IMPRESSION_MIN_PERCENTAGE_VIEWED = 50;
 
     private View view;
     private NativeResponse nativeResponse;
@@ -46,11 +48,11 @@
 
     @Before
     public void setUp() throws Exception {
-        ImpressionTrackingManager.purgeViews();
+        ImpressionTrackingManager.clearTracking();
 
         context = new Activity();
         mopubNativeListener = mock(MoPubNativeListener.class);
-        view = getViewMock(View.VISIBLE, 100, 100, 100, 100);
+        view = getViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
 
         final BaseForwardingNativeAd nativeAd = new BaseForwardingNativeAd() {};
         final TestHttpResponseWithHeaders testHttpResponseWithHeaders = new TestHttpResponseWithHeaders(200, "");
@@ -68,234 +70,392 @@ public void setUp() throws Exception {
 
     @After
     public void tearDown() throws Exception {
-        ImpressionTrackingManager.purgeViews();
+        ImpressionTrackingManager.clearTracking();
     }
 
-    @Ignore("pending")
     @Test
-    public void start_shouldScheduleVisibilityCheck() throws Exception {
-        Robolectric.getBackgroundScheduler().pause();
-        assertThat(Robolectric.getBackgroundScheduler().enqueuedTaskCount()).isEqualTo(0);
-        ImpressionTrackingManager.start();
-        assertThat(Robolectric.getBackgroundScheduler().enqueuedTaskCount()).isEqualTo(1);
+    public void addView_withVisibleView_shouldAddViewToPollingHashMap() throws Exception {
+        ImpressionTrackingManager.addView(view, nativeResponse);
+
+        assertThat(ImpressionTrackingManager.getPollingViews().keySet()).containsOnly(view);
+        assertThat(ImpressionTrackingManager.getWaitingViews()).isEmpty();
     }
 
-    @Ignore("pending")
     @Test
-    public void start_onSubsequentInvocations_shouldDoNothing() throws Exception {
+    public void addView_withNonVisibleView_shouldAddViewToWaitingHashMap() throws Exception {
+        view = getViewMock(View.GONE, 0, 0, 0, 0, true, false);
+
+        ImpressionTrackingManager.addView(view, nativeResponse);
+
+        assertThat(ImpressionTrackingManager.getPollingViews()).isEmpty();
+        assertThat(ImpressionTrackingManager.getWaitingViews().keySet()).containsOnly(view);
     }
 
-    @Ignore("pending")
     @Test
-    public void stop_shouldCancelVisibilityChecks() throws Exception {
+    public void addView_whenViewIsNull_shouldNotAddView() throws Exception {
+        ImpressionTrackingManager.addView(null, nativeResponse);
+
+        assertThat(ImpressionTrackingManager.getPollingViews()).isEmpty();
+        assertThat(ImpressionTrackingManager.getWaitingViews()).isEmpty();
     }
 
-    @Ignore("pending")
     @Test
-    public void stop_beforeStartIsCalled_doesNothing() throws Exception {
+    public void addView_whenNativeResponseIsNull_shouldNotAddView() throws Exception {
+        ImpressionTrackingManager.addView(view, null);
+
+        assertThat(ImpressionTrackingManager.getPollingViews()).isEmpty();
+        assertThat(ImpressionTrackingManager.getWaitingViews()).isEmpty();
     }
 
     @Test
-    public void addView_shouldAddViewToHashMap() throws Exception {
-        ImpressionTrackingManager.addView(view, nativeResponse);
-        Map<View, NativeResponseWrapper> keptViews = ImpressionTrackingManager.getKeptViews();
-        assertThat(keptViews).hasSize(1);
-        assertThat(keptViews.get(view).mNativeResponse).isEqualTo(nativeResponse);
+    public void isViewTracked_whenPollingViewsOrWaitingViewsContainsView_shouldReturnTrue() throws Exception {
+        assertThat(ImpressionTrackingManager.isViewTracked(view)).isEqualTo(false);
+
+        ImpressionTrackingManager.getPollingViews().put(view, new NativeResponseWrapper(nativeResponse));
+        assertThat(ImpressionTrackingManager.isViewTracked(view)).isTrue();
+        ImpressionTrackingManager.getPollingViews().clear();
+
+        ImpressionTrackingManager.getWaitingViews().put(view, mock(OnPreDrawListener.class));
+        assertThat(ImpressionTrackingManager.isViewTracked(view)).isTrue();
+        ImpressionTrackingManager.getWaitingViews().clear();
+
+        ImpressionTrackingManager.getPollingViews().put(view, new NativeResponseWrapper(nativeResponse));
+        ImpressionTrackingManager.getWaitingViews().put(view, mock(OnPreDrawListener.class));
+        assertThat(ImpressionTrackingManager.isViewTracked(view)).isTrue();
+    }
+    
+    @Test
+    public void waitForVisibility_shouldRemoveViewFromPollingHashMap() throws Exception {
+        ImpressionTrackingManager.getPollingViews().put(view, new NativeResponseWrapper(nativeResponse));
+        ImpressionTrackingManager.waitForVisibility(view, nativeResponse);
+
+        assertThat(ImpressionTrackingManager.getPollingViews()).isEmpty();
     }
 
     @Test
-    public void addView_whenViewIsNull_shouldNotAddView() throws Exception {
-        ImpressionTrackingManager.addView(null, nativeResponse);
-        Map<View, NativeResponseWrapper> keptViews = ImpressionTrackingManager.getKeptViews();
-        assertThat(keptViews).isEmpty();
+    public void waitForVisibility_whenViewTreeObserverIsAliveIsTrue_shouldAddOnPreDrawListenerToViewTreeObserverAndPopulateWaitingViewsHashMap() throws Exception {
+        ViewTreeObserver mockViewTreeObserver = mock(ViewTreeObserver.class);
+        when(mockViewTreeObserver.isAlive()).thenReturn(true);
+        when(view.getViewTreeObserver()).thenReturn(mockViewTreeObserver);
+
+        ImpressionTrackingManager.waitForVisibility(view, nativeResponse);
+
+        verify(mockViewTreeObserver).addOnPreDrawListener(any(OnPreDrawListener.class));
+        assertThat(ImpressionTrackingManager.getWaitingViews().keySet()).containsOnly(view);
     }
 
     @Test
-    public void addView_whenNativeResponseIsNull_shouldNotAddView() throws Exception {
-        ImpressionTrackingManager.addView(view, null);
-        Map<View, NativeResponseWrapper> keptViews = ImpressionTrackingManager.getKeptViews();
-        assertThat(keptViews).isEmpty();
+    public void waitForVisibility_whenViewTreeObserverIsAliveIsFalse_shouldNotAddOnPreDrawListenerToViewTreeObserverAndNotPopulateWaitingViewsHashMap() throws Exception {
+        ViewTreeObserver mockViewTreeObserver = mock(ViewTreeObserver.class);
+        when(mockViewTreeObserver.isAlive()).thenReturn(false);
+        when(view.getViewTreeObserver()).thenReturn(mockViewTreeObserver);
+
+        ImpressionTrackingManager.waitForVisibility(view, nativeResponse);
+
+        verify(mockViewTreeObserver, never()).addOnPreDrawListener(any(OnPreDrawListener.class));
+        assertThat(ImpressionTrackingManager.getWaitingViews()).isEmpty();
     }
 
     @Test
-    public void removeView_shouldRemoveViewFromKeptViews() throws Exception {
-        View view1 = mock(View.class);
-        View view2 = mock(View.class);
+    public void waitForVisibility_onPreDrawListener_onPreDraw_withVisibleView_shouldAddViewToPollingHashMap() throws Exception {
+        ImpressionTrackingManager.waitForVisibility(view, nativeResponse);
+        view.getViewTreeObserver().dispatchOnPreDraw();
+
+        assertThat(ImpressionTrackingManager.getPollingViews().keySet()).containsOnly(view);
+    }
+
+    @Test
+    public void waitForVisibility_onPreDrawListener_onPreDraw_withNonVisibleView_shouldNotAddViewToPollingHashMap() throws Exception {
+        View view = getViewMock(View.INVISIBLE, 100, 100, 100, 100, true, true);
+        ImpressionTrackingManager.waitForVisibility(view, nativeResponse);
+        view.getViewTreeObserver().dispatchOnPreDraw();
+
+        assertThat(ImpressionTrackingManager.getPollingViews().keySet()).isEmpty();
+    }
+    
+    @Test
+    public void pollVisibleView_shouldRemoveViewFromWaitingHashMap_shouldAddViewToPollingHashMap_shouldScheduleNextPoll() throws Exception {
+        Robolectric.getUiThreadScheduler().pause();
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+
+        ImpressionTrackingManager.getWaitingViews().put(view, mock(OnPreDrawListener.class));
+
+        ImpressionTrackingManager.pollVisibleView(view, nativeResponse);
+
+        assertThat(ImpressionTrackingManager.getWaitingViews()).isEmpty();
+        assertThat(ImpressionTrackingManager.getPollingViews()).hasSize(1);
+        assertThat(ImpressionTrackingManager.getPollingViews().get(view)).isNotNull();
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+    }
 
+    @Test
+    public void scheduleNextPoll_withNoMessages_shouldSchedulePoll() throws Exception {
+        Robolectric.getUiThreadScheduler().pause();
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+
+        ImpressionTrackingManager.scheduleNextPoll();
+
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+    }
+
+    @Test
+    public void removeWaiting_shouldRemoveViewFromWaitingHashMapAndRemoveOnPreDrawListener() throws Exception {
+        ViewTreeObserver mockViewTreeObserver = mock(ViewTreeObserver.class);
+        when(mockViewTreeObserver.isAlive()).thenReturn(true);
+        when(view.getViewTreeObserver()).thenReturn(mockViewTreeObserver);
+
+        OnPreDrawListener onPreDrawListener = mock(OnPreDrawListener.class);
+        ImpressionTrackingManager.getWaitingViews().put(view, onPreDrawListener);
+
+        ImpressionTrackingManager.removeWaitingView(view);
+
+        assertThat(ImpressionTrackingManager.getWaitingViews().keySet()).isEmpty();
+        verify(mockViewTreeObserver).removeOnPreDrawListener(onPreDrawListener);
+    }
+
+    @Test
+    public void removeWaiting_withNullView_shouldDoNothing() throws Exception {
+        assertThat(ImpressionTrackingManager.getWaitingViews().keySet()).isEmpty();
+
+        ImpressionTrackingManager.removeWaitingView(null);
+
+        assertThat(ImpressionTrackingManager.getWaitingViews().keySet()).isEmpty();
+    }
+
+    @Test
+    public void removePolling_shouldRemoveViewFromPollingHashMap() throws Exception {
+        ImpressionTrackingManager.getPollingViews().put(view, nativeResponseWrapper);
+
+        ImpressionTrackingManager.removePollingView(view);
+
+        assertThat(ImpressionTrackingManager.getPollingViews()).isEmpty();
+    }
+
+    @Test
+    public void removePolling_withNullView_shouldDoNothing() throws Exception {
+        assertThat(ImpressionTrackingManager.getPollingViews()).isEmpty();
+
+        ImpressionTrackingManager.removePollingView(null);
+
+        assertThat(ImpressionTrackingManager.getPollingViews()).isEmpty();
+    }
+
+    @Test
+    public void removeView_shouldRemoveViewFromWaitingAndPollingViews() throws Exception {
+        ImpressionTrackingManager.addView(view, nativeResponse);
+        View view1 = getViewMock(View.GONE, 0, 0, 0, 0, true, false);
         ImpressionTrackingManager.addView(view1, nativeResponse);
-        ImpressionTrackingManager.addView(view2, nativeResponse);
-        assertThat(ImpressionTrackingManager.getKeptViews()).hasSize(2);
 
-        ImpressionTrackingManager.removeView(view2);
-        assertThat(ImpressionTrackingManager.getKeptViews()).hasSize(1);
-        assertThat(ImpressionTrackingManager.getKeptViews().keySet()).containsOnly(view1);
+        assertThat(ImpressionTrackingManager.getPollingViews()).hasSize(1);
+        assertThat(ImpressionTrackingManager.getWaitingViews()).hasSize(1);
+
+        ImpressionTrackingManager.removeView(view1);
+        assertThat(ImpressionTrackingManager.getPollingViews()).hasSize(1);
+       assertThat(ImpressionTrackingManager.getPollingViews().keySet()).containsOnly(view);
+        assertThat(ImpressionTrackingManager.getWaitingViews()).hasSize(0);
+
+        ImpressionTrackingManager.removeView(view);
+        assertThat(ImpressionTrackingManager.getPollingViews()).hasSize(0);
+        assertThat(ImpressionTrackingManager.getWaitingViews()).hasSize(0);
     }
 
     @Test
-    public void removeView_whenThereAreNoKeptViews_shouldDoNothing() throws Exception {
-        assertThat(ImpressionTrackingManager.getKeptViews()).isEmpty();
+    public void removeView_withEmptyPollingAndWaitingHashMaps_shouldDoNothing() throws Exception {
+        assertThat(ImpressionTrackingManager.getPollingViews()).isEmpty();
+        assertThat(ImpressionTrackingManager.getWaitingViews()).isEmpty();
 
         ImpressionTrackingManager.removeView(view);
 
-        assertThat(ImpressionTrackingManager.getKeptViews()).isEmpty();
+        assertThat(ImpressionTrackingManager.getPollingViews()).isEmpty();
+        assertThat(ImpressionTrackingManager.getWaitingViews()).isEmpty();
     }
 
     @Test
     public void removeView_whenViewIsNull_shouldDoNothing() throws Exception {
         ImpressionTrackingManager.addView(view, nativeResponse);
 
-        assertThat(ImpressionTrackingManager.getKeptViews()).hasSize(1);
+        assertThat(ImpressionTrackingManager.getPollingViews()).hasSize(1);
         ImpressionTrackingManager.removeView(null);
-        assertThat(ImpressionTrackingManager.getKeptViews()).hasSize(1);
+        assertThat(ImpressionTrackingManager.getPollingViews()).hasSize(1);
     }
 
     @Test
-    public void visibilityCheckRun_whenWrapperIsNull_shouldNotTrackImpression() throws Exception {
-        ImpressionTrackingManager.addView(view, nativeResponse);
+    public void clearTracking_shouldClearWaitingAndPollingHashMaps_shouldClearHandlers() throws Exception {
+        ImpressionTrackingManager.getWaitingViews().put(view, mock(OnPreDrawListener.class));
+        ImpressionTrackingManager.getPollingViews().put(view, nativeResponseWrapper);
+
+        ImpressionTrackingManager.clearTracking();
+
+        assertThat(ImpressionTrackingManager.getWaitingViews()).isEmpty();
+        assertThat(ImpressionTrackingManager.getPollingViews()).isEmpty();
 
+    }
+
+    @Test
+    public void pollingRunnableRun_whenWrapperIsNull_shouldNotTrackImpression() throws Exception {
         // This doesn't normally happen; perhaps we're being overly defensive
-        ImpressionTrackingManager.getKeptViews().put(view, null);
+        ImpressionTrackingManager.getPollingViews().put(view, null);
 
-        new VisibilityCheck().run();
+        new PollingRunnable().run();
         assertThat(nativeResponse.getRecordedImpression()).isFalse();
         assertImpressionTracked(false);
     }
 
     @Test
-    public void visibilityCheckRun_whenNativeResponseIsNull_shouldNotTrackImpression() throws Exception {
-        ImpressionTrackingManager.addView(view, nativeResponse);
-
+    public void pollingRunnableRun_whenNativeResponseIsNull_shouldNotTrackImpression() throws Exception {
         // This doesn't normally happen; perhaps we're being overly defensive
-        ImpressionTrackingManager.getKeptViews().put(view, new NativeResponseWrapper(null));
+        ImpressionTrackingManager.getPollingViews().put(view, new NativeResponseWrapper(null));
 
-        new VisibilityCheck().run();
+        new PollingRunnable().run();
         assertThat(nativeResponse.getRecordedImpression()).isFalse();
         assertImpressionTracked(false);
     }
 
     @Test
-    public void visibilityCheckRun_whenNativeResponseHasRecordedImpression_shouldNotTrackImpression() throws Exception {
-        ImpressionTrackingManager.addView(view, nativeResponse);
+    public void pollingRunnableRun_whenNativeResponseHasRecordedImpression_shouldNotTrackImpression() throws Exception {
         nativeResponse.recordImpression(view);
         assertImpressionTracked(true);
 
         Robolectric.getFakeHttpLayer().clearRequestInfos();
         reset(mopubNativeListener);
 
-        new VisibilityCheck().run();
+        new PollingRunnable().run();
         assertImpressionTracked(false);
     }
 
     @Test
-    public void visibilityCheckRun_whenViewIsInvisible_shouldNotTrackImpression() throws Exception {
-        view.setVisibility(View.INVISIBLE);
-        ImpressionTrackingManager.addView(view, nativeResponse);
+    public void pollingRunnableRun_whenNativeResponseHasBeenDestroyed_shouldNotTrackImpression() throws Exception {
+        nativeResponse.destroy();
 
-        new VisibilityCheck().run();
-        assertThat(nativeResponse.getRecordedImpression()).isFalse();
+        Robolectric.getFakeHttpLayer().clearRequestInfos();
+        reset(mopubNativeListener);
+
+        new PollingRunnable().run();
         assertImpressionTracked(false);
     }
 
     @Test
-    public void visibilityCheckRun_whenLastViewedTimestampIsZero_shouldUpdateTimestampAndNotTrackImpression() throws Exception {
-        ImpressionTrackingManager.addView(view, nativeResponse);
+    public void pollingRunnableRun_withNonVisibleView_shouldWaitForVisibility_shouldNotScheduleNextPoll() throws Exception {
+        View view = getViewMock(View.INVISIBLE, 100, 100, 100, 100, true, true);
+        ImpressionTrackingManager.getPollingViews().put(view, nativeResponseWrapper);
 
-        assertThat(ImpressionTrackingManager.getKeptViews().get(view).mFirstVisibleTimestamp).isEqualTo(0);
+        new PollingRunnable().run();
 
-        Robolectric.getUiThreadScheduler().advanceBy(111);
-        new VisibilityCheck().run();
-
-        assertThat(ImpressionTrackingManager.getKeptViews().get(view).mFirstVisibleTimestamp).isEqualTo(111);
         assertThat(nativeResponse.getRecordedImpression()).isFalse();
         assertImpressionTracked(false);
+
+        assertThat(ImpressionTrackingManager.getPollingViews()).isEmpty();
+        assertThat(ImpressionTrackingManager.getWaitingViews().keySet()).containsOnly(view);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
     }
 
     @Test
-    public void visibilityCheckRun_whenLastViewedTimestampIsNotZeroAndLessThanOneSecondHasElapsed_shouldNotTrackImpression() throws Exception {
+    public void pollingRunnableRun_whenLessThanOneSecondHasElapsed_shouldNotTrackImpression_shouldScheduleNextPoll() throws Exception {
         // Force the last viewed timestamp to be a known value
         nativeResponseWrapper.mFirstVisibleTimestamp = 5555;
-        ImpressionTrackingManager.getKeptViews().put(view, nativeResponseWrapper);
+        ImpressionTrackingManager.getPollingViews().put(view, nativeResponseWrapper);
 
         // We progress 999 milliseconds
         Robolectric.getUiThreadScheduler().advanceBy(5555 + 999);
-        new VisibilityCheck().run();
+        new PollingRunnable().run();
 
         assertThat(nativeResponse.getRecordedImpression()).isFalse();
         assertImpressionTracked(false);
+
+        assertThat(ImpressionTrackingManager.getPollingViews().keySet()).containsOnly(view);
+        assertThat(ImpressionTrackingManager.getWaitingViews()).isEmpty();
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
     }
 
-    @Ignore("Review race condition")
     @Test
-    public void visibilityCheckRun_whenLastViewedTimestampIsNotZeroAndMoreThanOneSecondHasElapsed_shouldTrackImpression() throws Exception {
+    public void pollingRunnableRun_whenMoreThanOneSecondHasElapsed_shouldTrackImpression_shouldNotScheduleNextPoll() throws Exception {
         // Force the last viewed timestamp to be a known value
         nativeResponseWrapper.mFirstVisibleTimestamp = 5555;
-        ImpressionTrackingManager.getKeptViews().put(view, nativeResponseWrapper);
+        ImpressionTrackingManager.getPollingViews().put(view, nativeResponseWrapper);
 
         // We progress 1000 milliseconds
         Robolectric.getUiThreadScheduler().advanceBy(5555 + 1000);
-        new VisibilityCheck().run();
+        new PollingRunnable().run();
 
         assertThat(nativeResponse.getRecordedImpression()).isTrue();
         assertImpressionTracked(true);
+
+        assertThat(ImpressionTrackingManager.getPollingViews()).isEmpty();
+        assertThat(ImpressionTrackingManager.getWaitingViews()).isEmpty();
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+    }
+
+    @Test
+    public void isMostlyVisible_whenParentIsNull_shouldReturnFalse() throws Exception {
+        view = getViewMock(View.VISIBLE, 100, 100, 100, 100, false, true);
+        assertThat(isMostlyVisible(view, IMPRESSION_MIN_PERCENTAGE_VIEWED)).isFalse();
+    }
+
+    @Test
+    public void isMostlyVisible_whenViewIsOffScreen_shouldReturnFalse() throws Exception {
+        view = getViewMock(View.VISIBLE, 100, 100, 100, 100, true, false);
+        assertThat(isMostlyVisible(view, IMPRESSION_MIN_PERCENTAGE_VIEWED)).isFalse();
     }
 
+
     @Test
-    public void isVisible_whenViewIsEntirelyOnScreen_shouldReturnTrue() throws Exception {
-        view = getViewMock(View.VISIBLE, 100, 100, 100, 100);
+    public void isMostlyVisible_whenViewIsEntirelyOnScreen_shouldReturnTrue() throws Exception {
+        view = getViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
 
-        assertThat(VisibilityCheck.isVisible(view, nativeResponseWrapper)).isTrue();
+        assertThat(isMostlyVisible(view, IMPRESSION_MIN_PERCENTAGE_VIEWED)).isTrue();
     }
 
     @Test
-    public void isVisible_whenViewIs50PercentVisible_shouldReturnTrue() throws Exception {
-        view = getViewMock(View.VISIBLE, 50, 100, 100, 100);
+    public void isMostlyVisible_whenViewIs50PercentVisible_shouldReturnTrue() throws Exception {
+        view = getViewMock(View.VISIBLE, 50, 100, 100, 100, true, true);
 
-        assertThat(VisibilityCheck.isVisible(view, nativeResponseWrapper)).isTrue();
+        assertThat(isMostlyVisible(view, IMPRESSION_MIN_PERCENTAGE_VIEWED)).isTrue();
     }
 
     @Test
-    public void isVisible_whenViewIs49PercentVisible_shouldReturnFalse() throws Exception {
-        view = getViewMock(View.VISIBLE, 49, 100, 100, 100);
+    public void isMostlyVisible_whenViewIs49PercentVisible_shouldReturnFalse() throws Exception {
+        view = getViewMock(View.VISIBLE, 49, 100, 100, 100, true, true);
 
-        assertThat(VisibilityCheck.isVisible(view, nativeResponseWrapper)).isFalse();
+        assertThat(isMostlyVisible(view, IMPRESSION_MIN_PERCENTAGE_VIEWED)).isFalse();
     }
 
     @Test
-    public void isVisible_whenVisibleAreaIsZero_shouldReturnFalse() throws Exception {
-        view = getViewMock(View.VISIBLE, 0, 0, 100, 100);
+    public void isMostlyVisible_whenVisibleAreaIsZero_shouldReturnFalse() throws Exception {
+        view = getViewMock(View.VISIBLE, 0, 0, 100, 100, true, true);
 
-        assertThat(VisibilityCheck.isVisible(view, nativeResponseWrapper)).isFalse();
+        assertThat(isMostlyVisible(view, IMPRESSION_MIN_PERCENTAGE_VIEWED)).isFalse();
     }
 
     @Test
-    public void isVisible_whenViewIsInvisibleOrGone_shouldReturnFalse() throws Exception {
-        View view = getViewMock(View.INVISIBLE, 100, 100, 100, 100);
-        assertThat(VisibilityCheck.isVisible(view, nativeResponseWrapper)).isFalse();
+    public void isMostlyVisible_whenViewIsInvisibleOrGone_shouldReturnFalse() throws Exception {
+        View view = getViewMock(View.INVISIBLE, 100, 100, 100, 100, true, true);
+        assertThat(isMostlyVisible(view, IMPRESSION_MIN_PERCENTAGE_VIEWED)).isFalse();
 
         reset(view);
-        view = getViewMock(View.GONE, 100, 100, 100, 100);
-        assertThat(VisibilityCheck.isVisible(view, nativeResponseWrapper)).isFalse();
+        view = getViewMock(View.GONE, 100, 100, 100, 100, true, true);
+        assertThat(isMostlyVisible(view, IMPRESSION_MIN_PERCENTAGE_VIEWED)).isFalse();
     }
 
     @Test
-    public void isVisible_whenViewHasZeroWidthAndHeight_shouldReturnFalse() throws Exception {
-        view = getViewMock(View.VISIBLE, 100, 100, 0, 0);
+    public void isMostlyVisible_whenViewHasZeroWidthAndHeight_shouldReturnFalse() throws Exception {
+        view = getViewMock(View.VISIBLE, 100, 100, 0, 0, true, true);
 
-        assertThat(VisibilityCheck.isVisible(view, nativeResponseWrapper)).isFalse();
+        assertThat(isMostlyVisible(view, IMPRESSION_MIN_PERCENTAGE_VIEWED)).isFalse();
     }
 
     @Test
-    public void isVisible_whenViewOrNativeResponseWrapperIsNull_shouldReturnFalse() throws Exception {
-        assertThat(VisibilityCheck.isVisible(null, nativeResponseWrapper)).isFalse();
-        assertThat(VisibilityCheck.isVisible(view, null)).isFalse();
+    public void isMostlyVisible_whenViewIsNull_shouldReturnFalse() throws Exception {
+        assertThat(isMostlyVisible(null, IMPRESSION_MIN_PERCENTAGE_VIEWED)).isFalse();
     }
 
-    private View getViewMock(final int visibility,
-                             final int visibleWidth, final int visibleHeight,
-                             final int viewWidth, final int viewHeight) {
+    static View getViewMock(final int visibility,
+            final int visibleWidth, final int visibleHeight,
+            final int viewWidth, final int viewHeight,
+            final boolean isParentSet, final boolean isOnScreen) {
         View view = mock(View.class);
-        when(view.getContext()).thenReturn(context);
+        when(view.getContext()).thenReturn(new Activity());
         when(view.getVisibility()).thenReturn(visibility);
+
         when(view.getGlobalVisibleRect(any(Rect.class)))
                 .thenAnswer(new Answer<Boolean>() {
                     @Override
@@ -303,11 +463,17 @@ public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {
                         Object[] args = invocationOnMock.getArguments();
                         Rect rect = (Rect) args[0];
                         rect.set(0, 0, visibleWidth, visibleHeight);
-                        return true;
+                        return isOnScreen;
                     }
                 });
+
         when(view.getWidth()).thenReturn(viewWidth);
         when(view.getHeight()).thenReturn(viewHeight);
+        if (isParentSet) {
+            when(view.getParent()).thenReturn(mock(ViewParent.class));
+        }
+
+        when(view.getViewTreeObserver()).thenCallRealMethod();
 
         return view;
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
index 464ee48a..1dd83d8b 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
@@ -79,7 +79,7 @@ public void tearDown() throws Exception {
     public void loadNativeAd_withValidInput_shouldDownloadImagesAndNotifyListenerOfOnNativeAdLoaded() throws Exception {
         subject.loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
 
-        assertHttpRequestsMade("mainimageurl", "iconimageurl", "extraimageurl");
+        assertHttpRequestsMade(null, "mainimageurl", "iconimageurl", "extraimageurl");
 
         verify(mCustomEventNativeListener).onNativeAdLoaded(any(MoPubCustomEventNative.MoPubForwardingNativeAd.class));
         verify(mCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
index fa766fb8..ea6073a5 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
@@ -2,12 +2,15 @@
 
 import android.app.Activity;
 
+import com.mopub.common.DownloadTask;
 import com.mopub.common.GpsHelper;
 import com.mopub.common.GpsHelperTest;
 import com.mopub.common.SharedPreferencesHelper;
+import com.mopub.common.util.test.support.ShadowAsyncTasks;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.nativeads.test.support.SdkTestRunner;
 
+import org.apache.http.client.methods.HttpGet;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Ignore;
@@ -16,7 +19,9 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
+import java.util.List;
 import java.util.concurrent.Semaphore;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
@@ -34,6 +39,7 @@
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
+@Config(shadows = {ShadowAsyncTasks.class})
 public class MoPubNativeTest {
     private MoPubNative subject;
     private MethodBuilder methodBuilder;
@@ -177,4 +183,45 @@ public void loadNativeAd_shouldReturnFast() throws Exception {
 
         assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
     }
+
+    @Test
+    public void requestNativeAd_withValidUrl_shouldStartDownloadTaskWithUrl() throws Exception {
+        Robolectric.getUiThreadScheduler().pause();
+        Robolectric.addPendingHttpResponse(200, "body");
+
+        subject.requestNativeAd("http://www.mopub.com");
+
+        verify(moPubNativeListener, never()).onNativeFail(any(NativeErrorCode.class));
+        assertThat(wasDownloadTaskExecuted()).isTrue();
+
+        List<?> latestParams = ShadowAsyncTasks.getLatestParams();
+        assertThat(latestParams).hasSize(1);
+        HttpGet httpGet = (HttpGet) latestParams.get(0);
+        assertThat(httpGet.getURI().toString()).isEqualTo("http://www.mopub.com");
+    }
+
+    @Test
+    public void requestNativeAd_withInvalidUrl_shouldFireNativeFailAndNotStartAsyncTask() throws Exception {
+        Robolectric.getUiThreadScheduler().pause();
+
+        subject.requestNativeAd("//\\//\\::::");
+
+        verify(moPubNativeListener).onNativeFail(any(NativeErrorCode.class));
+        assertThat(wasDownloadTaskExecuted()).isFalse();
+    }
+
+    @Test
+    public void requestNativeAd_withNullUrl_shouldFireNativeFailAndNotStartAsyncTask() throws Exception {
+        Robolectric.getUiThreadScheduler().pause();
+
+        subject.requestNativeAd(null);
+
+        verify(moPubNativeListener).onNativeFail(any(NativeErrorCode.class));
+        assertThat(wasDownloadTaskExecuted()).isFalse();
+    }
+
+    private boolean wasDownloadTaskExecuted() {
+        return ShadowAsyncTasks.wasCalled() &&
+                (ShadowAsyncTasks.getLatestAsyncTask() instanceof DownloadTask);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
index d4fb9ffe..2fe23230 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
@@ -85,7 +85,7 @@ public void handleClick(final View view) {
 
     @After
     public void tearDown() throws Exception {
-        ImpressionTrackingManager.purgeViews();
+        ImpressionTrackingManager.clearTracking();
     }
 
     @Test
@@ -155,9 +155,11 @@ public void getClickTracker_shouldReturnMoPubClickTracker() throws Exception {
     
     @Test
     public void prepareImpression_shouldAddViewAndResponseToImpressionTrackingManagerAndCallPrepareImpressionOnBaseNativeAd() throws Exception {
-        assertThat(ImpressionTrackingManager.getKeptViews()).isEmpty();
+        View view = ImpressionTrackingManagerTest.getViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
+
+        assertThat(ImpressionTrackingManager.getPollingViews()).isEmpty();
         subjectWMockBaseNativeAd.prepareImpression(view);
-        final Map<View, NativeResponseWrapper> keptViews = ImpressionTrackingManager.getKeptViews();
+        final Map<View, NativeResponseWrapper> keptViews = ImpressionTrackingManager.getPollingViews();
         assertThat(keptViews.size()).isEqualTo(1);
         assertThat(keptViews.get(view).mNativeResponse).isSameAs(subjectWMockBaseNativeAd);
 
@@ -168,11 +170,11 @@ public void prepareImpression_shouldAddViewAndResponseToImpressionTrackingManage
     public void prepareImpression_whenDestroyed_shouldReturnFast() throws Exception {
         subjectWMockBaseNativeAd.destroy();
         assertThat(subjectWMockBaseNativeAd.isDestroyed()).isTrue();
-        assertThat(ImpressionTrackingManager.getKeptViews()).isEmpty();
+        assertThat(ImpressionTrackingManager.getPollingViews()).isEmpty();
 
         subjectWMockBaseNativeAd.prepareImpression(view);
 
-        assertThat(ImpressionTrackingManager.getKeptViews()).isEmpty();
+        assertThat(ImpressionTrackingManager.getPollingViews()).isEmpty();
         verify(mMockNativeAd, never()).prepareImpression(view);
     }
 
@@ -180,11 +182,11 @@ public void prepareImpression_whenDestroyed_shouldReturnFast() throws Exception
     public void prepareImpression_whenAlreadyImpressed_shouldReturnFast() throws Exception {
         subjectWMockBaseNativeAd.setRecordedImpression(true);
         assertThat(subjectWMockBaseNativeAd.getRecordedImpression()).isTrue();
-        assertThat(ImpressionTrackingManager.getKeptViews()).isEmpty();
+        assertThat(ImpressionTrackingManager.getPollingViews()).isEmpty();
 
         subjectWMockBaseNativeAd.prepareImpression(view);
 
-        assertThat(ImpressionTrackingManager.getKeptViews()).isEmpty();
+        assertThat(ImpressionTrackingManager.getPollingViews()).isEmpty();
         verify(mMockNativeAd, never()).prepareImpression(view);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/SdkTestRunner.java b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/SdkTestRunner.java
index a453bc9c..cf51086a 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/SdkTestRunner.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/SdkTestRunner.java
@@ -1,6 +1,8 @@
 package com.mopub.nativeads.test.support;
 
 import com.mopub.common.factories.MethodBuilderFactory;
+import com.mopub.common.util.AsyncTasks;
+import com.mopub.common.util.test.support.ShadowAsyncTasks;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.nativeads.factories.CustomEventNativeFactory;
 
@@ -9,13 +11,25 @@
 import org.robolectric.DefaultTestLifecycle;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.TestLifecycle;
+import org.robolectric.bytecode.ClassInfo;
+import org.robolectric.bytecode.Setup;
 
 public class SdkTestRunner extends RobolectricTestRunner {
-
     public SdkTestRunner(Class<?> testClass) throws InitializationError {
         super(testClass);
     }
 
+    @Override
+    public Setup createSetup() {
+        return new Setup() {
+            @Override
+            public boolean shouldInstrument(ClassInfo classInfo) {
+                return classInfo.getName().equals(AsyncTasks.class.getName())
+                        || super.shouldInstrument(classInfo);
+            }
+        };
+    }
+
     @Override
     protected Class<? extends TestLifecycle> getTestLifecycleClass() {
         return TestLifeCycleWithInjection.class;
@@ -26,6 +40,9 @@ public SdkTestRunner(Class<?> testClass) throws InitializationError {
         public void prepareTest(Object test) {
             MethodBuilderFactory.setInstance(new TestMethodBuilderFactory());
             CustomEventNativeFactory.setInstance(new TestCustomEventNativeFactory());
+
+            ShadowAsyncTasks.reset();
+
             MockitoAnnotations.initMocks(test);
         }
     }
diff --git a/pom.xml b/pom.xml
index 667766ae..5be7e9c3 100644
--- a/pom.xml
+++ b/pom.xml
@@ -15,6 +15,20 @@
     <version>1.0</version>
     <packaging>pom</packaging>
 
+    <repositories>
+        <repository>
+            <id>andsupport</id>
+            <name>Android Support</name>
+            <url>file://${env.ANDROID_HOME}/extras/android/m2repository</url>
+        </repository>
+
+        <repository>
+            <id>playservices</id>
+            <name>Android Play Services</name>
+            <url>file://${env.ANDROID_HOME}/extras/google/m2repository</url>
+        </repository>
+    </repositories>
+
     <modules>
         <module>mopub-sdk</module>
         <module>mopub-sample</module>
diff --git a/robotium-sample/pom.xml b/robotium-sample/pom.xml
index d33aa213..eed43b07 100644
--- a/robotium-sample/pom.xml
+++ b/robotium-sample/pom.xml
@@ -4,12 +4,11 @@
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
-        <groupId>org.sonatype.oss</groupId>
-        <artifactId>oss-parent</artifactId>
-        <version>5</version>
+        <groupId>com.mopub.mobileads</groupId>
+        <artifactId>mopub-android</artifactId>
+        <version>1.0</version>
     </parent>
 
-    <groupId>com.mopub.mobileads</groupId>
     <artifactId>robotium-sample</artifactId>
     <version>1.0.0-SNAPSHOT</version>
     <packaging>apk</packaging>
diff --git a/robotium-tests/pom.xml b/robotium-tests/pom.xml
index 5303374a..262b5451 100644
--- a/robotium-tests/pom.xml
+++ b/robotium-tests/pom.xml
@@ -4,12 +4,11 @@
     <modelVersion>4.0.0</modelVersion>
 
     <parent>
-        <groupId>org.sonatype.oss</groupId>
-        <artifactId>oss-parent</artifactId>
-        <version>5</version>
+        <groupId>com.mopub.mobileads</groupId>
+        <artifactId>mopub-android</artifactId>
+        <version>1.0</version>
     </parent>
 
-    <groupId>com.mopub.mobileads</groupId>
     <artifactId>robotium-tests</artifactId>
     <version>1.0.0-SNAPSHOT</version>
     <packaging>apk</packaging>
