diff --git a/CHANGELOG.md b/CHANGELOG.md
index 7689617d..8c4fdcf2 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,13 @@
+## Version 3.5.0 (March 10, 2015)
+
+ - Dependency changes in Maven and Gradle. No new dependencies have been added, but your build script will need to change slightly to include JCenter. See our [Getting Started Guide](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started#adding-the-support-libraries-to-your-project) for complete instructions.
+ - Security Improvement: removed the @JavascriptInterface annotation for WebViews.
+ - Fixed a bug where video playback would sometimes fail to stop when an ad was dismissed.
+ - Fixed a bug where it was not possible to disable ad refresh; Fixes [issue #148](https://github.com/mopub/mopub-android-sdk/issues/148)
+ - Fixed a null pointer exception in AdViewController; Fixes [issue #150](https://github.com/mopub/mopub-android-sdk/issues/150)
+
 ## Version 3.4.0 (January 30, 2015)
-  
+
   - **Volley networking stack** MoPub for Android now uses Google's Volley library for HTTP requests. You will need to add our bundled Volley JAR (available at `mopub-sdk/libs/mopub-volley-1.0.0.jar`) as a compile-time dependency. See instructions in our [integration page](https://dev.twitter.com/mopub/android/getting-started).
   - **Updated Vungle Support** Certified the `VungleInterstitial` custom event against Vungle SDK 3.2.2
   - **VAST Video Bug Fixes**
@@ -11,14 +19,14 @@
 
   - **MRAID 2.0 Support** - The MoPub SDK is now compliant with the MRAID 2.0 specification to enable rich media ads in banners and interstitial ad units. Learn more about MRAID from the [IAB](http://www.iab.net/MRAID#MRAID).
   - **Location Polling Updates** - Changed the interaction between application- and device-provided location data: more recent location data is now always used (in the past, application-provided location data was always preferred).
-    
+
     As before, you may still disable MoPub SDK's location polling by calling `MoPub.setLocationAwareness(LocationAwareness.DISABLED)`.
   - **Updated Chartboost SDK** Updated the `ChartboostInterstitial` custom event to support Chartboost SDK 5.0.4
   - **Android Support Annotations** Introduced a dependency on android-support-annotations.jar to support code analysis of `@Nullable` and `@NonNull` annotations.
-  
+
 #### Version 3.2.2 (October 29, 2014)
-  - **Bug Fix** Fixes a bug in fetching the Google Advertising ID from Google Play Services. 
-  
+  - **Bug Fix** Fixes a bug in fetching the Google Advertising ID from Google Play Services.
+
 #### Version 3.2.1 (October 21, 2014)
   - **Bug Fix** Fixes a bug in processing certain HTTP headers for Native Ads.
 
@@ -104,8 +112,8 @@
   - Added support for Google Play Services advertising identifier
   - Renamed the `com.mopub.mobileads.MraidBrowser` Activity to `com.mopub.common.MoPubBrowser`.
       - **Important Note:** This change requires a modification to the `AndroidManifest`. The updated set of requisite activity permissions are as follows:
-      
-      	```      	      	
+
+      	```
     <activity android:name="com.mopub.common.MoPubBrowser"
 				android:configChanges="keyboardHidden|orientation"/>
     <activity android:name="com.mopub.mobileads.MoPubActivity"
@@ -114,7 +122,7 @@
                 android:configChanges="keyboardHidden|orientation"/>
 	<activity android:name="com.mopub.mobileads.MraidVideoPlayerActivity"
                 android:configChanges="keyboardHidden|orientation"/>
-		```  
+		```
   - Upgraded the bundled `android-support-v4` library to r19.1.
       - **Note for Maven users:** Newer versions of the `android-support-v4` artifact are unavailable on Maven central, so we have included a small script to update the version in your local artifact repository. Please navigate to the `mopub-sdk` directory, and run `scripts/mavenize_support_library`.
 
@@ -160,7 +168,7 @@
   - Enabled deeplinking via custom URIs in ad creatives
   - All `WebView`s are removed from their parents before `destroy()`; fixes [GitHub issue #38](https://github.com/mopub/mopub-android-sdk/issues/38)
   - Removed previously-deprecated `HTML5AdView`
-  
+
 ## Version 1.16 (October 16, 2013)
 
   - Improved creative controls
@@ -174,79 +182,79 @@
   - Improved responsiveness of `showInterstitial()` for `HtmlInterstitial`s and `MraidInterstitial`s by pre-rendering HTML content
   - Simplified internal construction and handling of `WebView`s by removing `WebViewPool` and its subclasses
   - Updated mraid.getVersion() to return 2.0
- 
+
 #### Version 1.15.2.2 (September 20, 2013)
   - Removed `WebSettings.setPluginsEnabled()` so the SDK builds against Android API 18; fixes [GitHub issue #28](https://github.com/mopub/mopub-android-sdk/issues/28)
   - AdMob banners are now removed from the view hierarchy before they are destroyed; fixes the reopened [GitHub issue #23](https://github.com/mopub/mopub-android-sdk/issues/23)
   - Prevent ads from launching system features, such as a browser view, until the user has interacted with the ad.
- 
+
 #### Version 1.15.2.1 (September 13, 2013)
   - Made the SDK more resilient to creatives that improperly use the `mopubnativebrowser://` scheme; fixes [GitHub issue #36](https://github.com/mopub/mopub-android-sdk/issues/36)
- 
-## Version 1.15.2 (September 11, 2013) 
-  - Allowed Facebook Support to be disabled optionally with `setFacebookSupported(false)`: 
-  	- Use `MoPubInterstitial.setFacebookSupported(false);` for interstitials 
-  	- Use `MoPubView.setFacebookSupported(false);` for banners 
-  	- Note: the `setFacebookSupported(false)` method call must come __before__ `loadAd()` 
-  	- Note: facebook support is on by default 
-  - Changed banner refresh default to be 60 seconds when requests timed out  
+
+## Version 1.15.2 (September 11, 2013)
+  - Allowed Facebook Support to be disabled optionally with `setFacebookSupported(false)`:
+  	- Use `MoPubInterstitial.setFacebookSupported(false);` for interstitials
+  	- Use `MoPubView.setFacebookSupported(false);` for banners
+  	- Note: the `setFacebookSupported(false)` method call must come __before__ `loadAd()`
+  	- Note: facebook support is on by default
+  - Changed banner refresh default to be 60 seconds when requests timed out
   - Fixed edge case in Millennial Media ad fetch failure when there is no inventory; fixes [GitHub issue #18](https://github.com/mopub/mopub-android-sdk/issues/18)
-  - Fixed a bug where redirect URLs were malformed, causing the native browser to not render ads    
+  - Fixed a bug where redirect URLs were malformed, causing the native browser to not render ads
   - Updated Millennial Media jar to 5.1.0
   - Updated Greystripe custom event support to 2.3.0
-  - Fixed MRAID 2.0 `storePicture` command's messaging when a picture either fails to download or fails to save to device 
+  - Fixed MRAID 2.0 `storePicture` command's messaging when a picture either fails to download or fails to save to device
   - Expanded MRAID 2.0 `createCalendarEvent` command to support both minute- and second-level granularity
- 
+
 #### Version 1.15.1.1 (September 4, 2013)
   - Made the SDK more resilient to unexpected Flash creatives
- 
+
 ## Version 1.15.1 (August 27, 2013)
   - Updated documentation to remove the requirement for certain AndroidManifest permissions
   - Fixed minor bug with MRAID 2.0 `storePicture` command where the user sees a false download completed message
-  
+
 ## Version 1.15 (August 21, 2013)
 
 Includes support for ads in the MRAID 2.0 format. MRAID 2.0 allows advertisers to create ads with rich media functionality, including adding calendar events, storing pictures and playing videos in the native video player. To learn more about MRAID 2.0, read our [help article](http://j.mp/16MKSci).
 
   - Added the following MRAID 2.0 features: `createCalendarEvent` (Android 4.0 and above), `playVideo`, `storePicture`, and `supports`
-  - Hardware Acceleration is now enabled by default for `MraidInterstitial`s on Android 4.0 and above  
-  - Ensured that Cursors in `FacebookKeywordProvider` are always closed properly; fixes [GitHub issue #8](https://github.com/mopub/mopub-android-sdk/issues/8)  
-  - Added tracking parameter to InMobi ad requests; fixes [GitHub issue #15](https://github.com/mopub/mopub-android-sdk/issues/15)  
-  - Banner WebViews are now removed from the view hierarchy before they are destroyed; fixes [GitHub issue #23](https://github.com/mopub/mopub-android-sdk/issues/23)  
+  - Hardware Acceleration is now enabled by default for `MraidInterstitial`s on Android 4.0 and above
+  - Ensured that Cursors in `FacebookKeywordProvider` are always closed properly; fixes [GitHub issue #8](https://github.com/mopub/mopub-android-sdk/issues/8)
+  - Added tracking parameter to InMobi ad requests; fixes [GitHub issue #15](https://github.com/mopub/mopub-android-sdk/issues/15)
+  - Banner WebViews are now removed from the view hierarchy before they are destroyed; fixes [GitHub issue #23](https://github.com/mopub/mopub-android-sdk/issues/23)
 
-To correctly display ads that ask the user to save a picture (storePicture ads), you need to make the following change to AndroidManifest.xml:  
-* Add the`WRITE_EXTERNAL_STORAGE` permission. Note: **Adding the permission is optional**. If the permission is not added, we will not deliver any store picture ads to the users' devices. All other features will remain functional without the new permission. 
+To correctly display ads that ask the user to save a picture (storePicture ads), you need to make the following change to AndroidManifest.xml:
+* Add the`WRITE_EXTERNAL_STORAGE` permission. Note: **Adding the permission is optional**. If the permission is not added, we will not deliver any store picture ads to the users' devices. All other features will remain functional without the new permission.
 
-To allow users to play videos using the native video player:  
+To allow users to play videos using the native video player:
 * Declare activity `com.mopub.mobileads.MraidVideoPlayerActivity`. This activity is required to support playing videos in the native player and we strongly recommend adding it.
-  
+
 ## Version 1.14.1 (June 21, 2013)
   - Wait until after loaded interstitials are shown to report an impression
   - Remove phantom impression tracking from interstitials
   - Remove extra whitespace from Millennial banner ads
   - Added `onInterstitialClicked()` notification to `InterstitialAdListener`
   - Provide default implementations for `BannerAdListener` and `InterstitialAdListener`
-  
+
 ## Version 1.14 (May 28, 2013)
 
   - Provided improved support for Android Unity by moving all project resources (including layouts, javascript, images, and values) into source
   - Removed reference to TYPE_DUMMY in AdUrlGenerator because it is not available in earlier versions of Android; fixes [GitHub issue #3](https://github.com/mopub/mopub-android-sdk/issues/3)
   - Fixed NPE in AdUrlGenerator when WiFi is off and Airplane mode is on; fixes [GitHub issue #5](https://github.com/mopub/mopub-android-sdk/issues/5)
   - `MraidInterstitial`s now properly notify `InterstitialAdListener` when they are shown and dismissed
-  
+
 ## Version 1.13.1 (May 21, 2013)
   - Updated Millennial support to Millennial Media SDK version 5.0.1
-  
+
 #### Version 1.13.0.2 (May 17, 2013)
 
   - Relaxed access modifiers for `CustomEventBanner` and `CustomEventInterstitial`
-  
+
 #### Version 1.13.0.1 (May 15, 2013)
 
   - Removed extraneous display call in `MillennialInterstitial` custom event
   - Fixed potential NPE in `AdView`'s loadUrl()
   - Deprecated `HTML5AdView` after fixing some compilation issues
-  
+
 ## Version 1.13 (May 9, 2013)
   - Moved all Android code and documentation to its own repository: [mopub-android-sdk](https://github.com/mopub/mopub-android-sdk)
   - Updated Millennial support to Millennial Media SDK version 5.0
@@ -303,7 +311,7 @@ To allow users to play videos using the native video player:
 ## Version 1.5 (May 10, 2012)
   - Added support for Millennial Media SDK 4.5.5
   - Fixed ANR relating to synchronization in `LoadUrlTask`
-  - Fixed IllegalArgumentExceptions when creating HttpGet objects with malformed URLs 
+  - Fixed IllegalArgumentExceptions when creating HttpGet objects with malformed URLs
 
 ## Version 1.4 (March 28, 2012)
   - Fixed some NullPointerExceptions in the AdMob and Millennial native adapters
diff --git a/README.md b/README.md
index c60aa6c9..e0ac378f 100644
--- a/README.md
+++ b/README.md
@@ -27,19 +27,18 @@ Integration instructions are available on the [wiki](https://github.com/mopub/mo
 
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for details.
 
-  - **Volley networking stack** MoPub for Android now uses Google's Volley library for HTTP requests. You will need to add our bundled Volley JAR (available at `mopub-sdk/libs/mopub-volley-1.0.0.jar`) as a compile-time dependency. See instructions in our [integration page](https://dev.twitter.com/mopub/android/getting-started).
-  - **Updated Vungle Support** Certified the `VungleInterstitial` custom event against Vungle SDK 3.2.2
-  - **VAST Video Bug Fixes**
-    - Fixed inability to parse VAST tags referencing URLs that contain 3rd party macros
-    - VAST videos no longer fire completion trackers upon video playback error
-  - Added support for the `mopubnativebrowser://` click-destination scheme for Native, MRAID, and VAST ads (it was already supported for HTML ads). Links of this type (e.g. `mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.mopub.com`) will open the specified URL in the device's default browser, rather than in MoPub's in-app browser.
+- Dependency changes in Maven and Gradle. No new dependencies have been added, but your build script will need to change slightly to include JCenter. See our [Getting Started Guide](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started#adding-the-support-libraries-to-your-project) for complete instructions.
+- Security Improvement: removed the @JavascriptInterface annotation for WebViews.
+- Fixed a bug where video playback would sometimes fail to stop when an ad was dismissed.
+- Fixed a bug where it was not possible to disable ad refresh; Fixes [issue #148](https://github.com/mopub/mopub-android-sdk/issues/148)
+- Fixed a null pointer exception in AdViewController; Fixes [issue #150](https://github.com/mopub/mopub-android-sdk/issues/150)
 
 ## Requirements
 
 - Android 2.3.1 (API Version 9) and up
 - android-support-v4.jar
 - android-support-annotations.jar (**New in 3.3.0**)
-- Bundled Volley MoPub JAR (mopub-volley-1.0.0.jar) (**New in 3.4.0**)
+- MoPub Volley Library (mopub-volley-1.0.0.jar - available on JCenter) (**Updated in 3.5.0**)
 - **Recommended** Google Play Services 5.0.89 & up.
 
 ## Upgrading from 3.2.0 and Prior
diff --git a/build.gradle b/build.gradle
index 15de19fd..65cd4df8 100644
--- a/build.gradle
+++ b/build.gradle
@@ -14,5 +14,5 @@ buildscript {
 }
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '2.1'
+    gradleVersion = '2.3.0'
 }
diff --git a/extras/src/com/mopub/mobileads/AdColonyInterstitial.java b/extras/src/com/mopub/mobileads/AdColonyInterstitial.java
index 6b542709..a4a73e53 100644
--- a/extras/src/com/mopub/mobileads/AdColonyInterstitial.java
+++ b/extras/src/com/mopub/mobileads/AdColonyInterstitial.java
@@ -50,7 +50,7 @@
     private boolean mIsLoading;
 
     public AdColonyInterstitial() {
-        mScheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(10);
+        mScheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(1);
         mHandler = new Handler();
     }
 
@@ -60,7 +60,7 @@ protected void loadInterstitial(Context context,
                                     Map<String, Object> localExtras,
                                     Map<String, String> serverExtras) {
         if (!(context instanceof Activity)) {
-            customEventInterstitialListener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            customEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
             return;
         }
 
diff --git a/extras/src/com/mopub/mobileads/AdColonyRewardedVideo.java b/extras/src/com/mopub/mobileads/AdColonyRewardedVideo.java
new file mode 100644
index 00000000..8b2398f4
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/AdColonyRewardedVideo.java
@@ -0,0 +1,333 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.jirbo.adcolony.AdColony;
+import com.jirbo.adcolony.AdColonyAd;
+import com.jirbo.adcolony.AdColonyAdListener;
+import com.jirbo.adcolony.AdColonyV4VCAd;
+import com.jirbo.adcolony.AdColonyV4VCListener;
+import com.jirbo.adcolony.AdColonyV4VCReward;
+import com.mopub.common.BaseLifecycleListener;
+import com.mopub.common.DataKeys;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MediationSettings;
+import com.mopub.common.MoPubReward;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Json;
+
+import java.util.Map;
+import java.util.WeakHashMap;
+import java.util.concurrent.ScheduledFuture;
+import java.util.concurrent.ScheduledThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+
+/**
+ * A custom event for showing AdColony rewarded videos.
+ *
+ * Certified with AdColony 2.0.3
+ */
+public class AdColonyRewardedVideo extends CustomEventRewardedVideo {
+    /*
+     * We recommend passing the AdColony client options, app ID, all zone IDs, and current zone ID
+     * in the serverExtras Map by specifying Custom Event Data in MoPub's web interface.
+     *
+     * Please see AdColony's documentation for more information:
+     * https://github.com/AdColony/AdColony-Android-SDK/wiki/API-Details#configure-activity-activity-string-client_options-string-app_id-string-zone_ids-
+     */
+    private static final String DEFAULT_CLIENT_OPTIONS = "version=YOUR_APP_VERSION_HERE,store:google";
+    private static final String DEFAULT_APP_ID = "YOUR_AD_COLONY_APP_ID_HERE";
+    private static final String[] DEFAULT_ALL_ZONE_IDS = {"ZONE_ID_1", "ZONE_ID_2", "..."};
+    private static final String DEFAULT_ZONE_ID = "YOUR_CURRENT_ZONE_ID";
+
+    /*
+     * These keys are intended for MoPub internal use. Do not modify.
+     */
+    private static final String CLIENT_OPTIONS_KEY = "clientOptions";
+    private static final String APP_ID_KEY = "appId";
+    private static final String ALL_ZONE_IDS_KEY = "allZoneIds";
+    private static final String ZONE_ID_KEY = "zoneId";
+
+    private static boolean sInitialized = false;
+    private static LifecycleListener sLifecycleListener = new BaseLifecycleListener() {
+        @Override
+        public void onPause(@NonNull final Activity activity) {
+            super.onPause(activity);
+            AdColony.pause();
+        }
+
+        @Override
+        public void onResume(@NonNull final Activity activity) {
+            super.onResume(activity);
+            AdColony.resume(activity);
+        }
+    };
+    private static AdColonyListener sAdColonyListener = new AdColonyListener();
+    private static WeakHashMap<AdColonyAd, String> sAdToZoneIdMap = new WeakHashMap<AdColonyAd, String>();
+
+    private AdColonyV4VCAd mAd;
+    private String mZoneId;
+    @Nullable private String mAdUnitId;
+    private boolean mIsLoading = false;
+
+    // For waiting and notifying the SDK:
+    private final Handler mHandler;
+    private final ScheduledThreadPoolExecutor mScheduledThreadPoolExecutor;
+    private ScheduledFuture<?> mFuture;
+
+    public AdColonyRewardedVideo() {
+        mScheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(1);
+        mHandler = new Handler();
+    }
+
+    @Nullable
+    @Override
+    public CustomEventRewardedVideoListener getVideoListenerForSdk() {
+        return sAdColonyListener;
+    }
+
+    @Nullable
+    @Override
+    public LifecycleListener getLifecycleListener() {
+        return sLifecycleListener;
+    }
+
+    @NonNull
+    @Override
+    public String getAdNetworkId() {
+        return mZoneId;
+    }
+
+    @Override
+    protected void onInvalidate() {
+        mScheduledThreadPoolExecutor.shutdownNow();
+    }
+
+    @Override
+    public boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final Map<String, String> serverExtras) throws Exception {
+        synchronized (AdColonyRewardedVideo.class) {
+            if (sInitialized) {
+                return false;
+            }
+
+            String adColonyClientOptions = DEFAULT_CLIENT_OPTIONS;
+            String adColonyAppId = DEFAULT_APP_ID;
+            String[] adColonyAllZoneIds = DEFAULT_ALL_ZONE_IDS;
+
+            // Set up serverExtras
+            if (extrasAreValid(serverExtras)) {
+                adColonyClientOptions = serverExtras.get(CLIENT_OPTIONS_KEY);
+                adColonyAppId = serverExtras.get(APP_ID_KEY);
+                adColonyAllZoneIds = extractAllZoneIds(serverExtras);
+            }
+
+            setUpGlobalSettings();
+            AdColony.configure(launcherActivity, adColonyClientOptions, adColonyAppId, adColonyAllZoneIds);
+            AdColony.addV4VCListener(sAdColonyListener);
+            sInitialized = true;
+            return true;
+        }
+    }
+
+    @Override
+    protected void loadWithSdkInitialized(@NonNull final Activity activity,
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final Map<String, String> serverExtras) throws Exception {
+
+        mZoneId = DEFAULT_ZONE_ID;
+        if (extrasAreValid(serverExtras)) {
+            mZoneId = serverExtras.get(ZONE_ID_KEY);
+        }
+        Object adUnitObject = localExtras.get(DataKeys.AD_UNIT_ID_KEY);
+        if (adUnitObject != null && adUnitObject instanceof String) {
+            mAdUnitId = (String) adUnitObject;
+        }
+
+        mAd = new AdColonyV4VCAd(mZoneId).withListener(sAdColonyListener);
+        sAdToZoneIdMap.put(mAd, mZoneId);
+        scheduleOnVideoReady();
+    }
+
+    @Override
+    public boolean hasVideoAvailable() {
+        return mAd != null && mAd.isReady() && mAd.getAvailableViews() != 0;
+    }
+
+    @Override
+    public void showVideo() {
+        if (this.hasVideoAvailable()) {
+            boolean withConfirmationDialog = getConfirmationDialogFromSettings();
+            boolean withResultsDialog = getResultsDialogFromSettings();
+            mAd.withConfirmationDialog(withConfirmationDialog).withResultsDialog(withResultsDialog).show();
+        } else {
+            MoPubRewardedVideoManager.onRewardedVideoPlaybackError(AdColonyRewardedVideo.class, mZoneId, MoPubErrorCode.VIDEO_PLAYBACK_ERROR);
+        }
+    }
+
+    private boolean extrasAreValid(Map<String, String> extras) {
+        return extras.containsKey(CLIENT_OPTIONS_KEY)
+                && extras.containsKey(APP_ID_KEY)
+                && extras.containsKey(ALL_ZONE_IDS_KEY)
+                && extras.containsKey(ZONE_ID_KEY);
+    }
+
+    private String[] extractAllZoneIds(Map<String, String> serverExtras) {
+        String[] result = Json.jsonArrayToStringArray(serverExtras.get(ALL_ZONE_IDS_KEY));
+
+        // AdColony requires at least one valid String in the allZoneIds array.
+        if (result.length == 0) {
+            result = new String[]{""};
+        }
+
+        return result;
+    }
+
+    private void setUpGlobalSettings() {
+        final AdColonyGlobalMediationSettings globalMediationSettings =
+                MoPubRewardedVideoManager.getGlobalMediationSettings(AdColonyGlobalMediationSettings.class);
+        if (globalMediationSettings != null) {
+            if (globalMediationSettings.getCustomId() != null) {
+                AdColony.setCustomID(globalMediationSettings.getCustomId());
+            }
+            if (globalMediationSettings.getDeviceId() != null) {
+                AdColony.setDeviceID(globalMediationSettings.getDeviceId());
+            }
+        }
+    }
+
+    private boolean getConfirmationDialogFromSettings() {
+        final AdColonyInstanceMediationSettings settings =
+                MoPubRewardedVideoManager.getInstanceMediationSettings(AdColonyInstanceMediationSettings.class, mAdUnitId);
+        return settings != null && settings.withConfirmationDialog();
+    }
+
+    private boolean getResultsDialogFromSettings() {
+        final AdColonyInstanceMediationSettings settings =
+                MoPubRewardedVideoManager.getInstanceMediationSettings(AdColonyInstanceMediationSettings.class, mAdUnitId);
+        return settings != null && settings.withResultsDialog();
+    }
+
+    private void scheduleOnVideoReady() {
+        Runnable runnable = new Runnable() {
+            @Override
+            public void run() {
+                if (mAd.isReady()) {
+                    mIsLoading = false;
+                    mScheduledThreadPoolExecutor.shutdownNow();
+                    mHandler.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            if (mAd.getAvailableViews() > 0) {
+                                MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(
+                                        AdColonyRewardedVideo.class,
+                                        mZoneId);
+                            } else {
+                                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(
+                                        AdColonyRewardedVideo.class,
+                                        mZoneId,
+                                        MoPubErrorCode.NETWORK_NO_FILL);
+                            }
+                        }
+                    });
+                }
+            }
+        };
+
+        if (!mIsLoading) {
+            mScheduledThreadPoolExecutor.scheduleAtFixedRate(runnable, 1, 1, TimeUnit.SECONDS);
+            mIsLoading = true;
+        }
+    }
+
+    private static class AdColonyListener implements AdColonyAdListener,
+            AdColonyV4VCListener, CustomEventRewardedVideoListener {
+
+        @Override
+        public void onAdColonyAdAttemptFinished(final AdColonyAd adColonyAd) {
+            String zoneId = sAdToZoneIdMap.get(adColonyAd);
+            MoPubRewardedVideoManager.onRewardedVideoClosed(AdColonyRewardedVideo.class, zoneId);
+            if (adColonyAd.notShown()) {
+                if (adColonyAd.canceled() || adColonyAd.skipped()) {
+                    MoPubLog.d("User canceled ad playback");
+                    return;
+                }
+
+                MoPubErrorCode reason = MoPubErrorCode.VIDEO_DOWNLOAD_ERROR;
+                if (adColonyAd.noFill()) {
+                    reason = MoPubErrorCode.NETWORK_NO_FILL;
+                }
+
+                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(
+                        AdColonyRewardedVideo.class,
+                        zoneId,
+                        reason);
+            }
+        }
+
+        @Override
+        public void onAdColonyAdStarted(final com.jirbo.adcolony.AdColonyAd adColonyAd) {
+            MoPubRewardedVideoManager.onRewardedVideoStarted(
+                    AdColonyRewardedVideo.class,
+                    sAdToZoneIdMap.get(adColonyAd));
+        }
+
+        @Override
+        public void onAdColonyV4VCReward(final AdColonyV4VCReward adColonyV4VCReward) {
+            MoPubReward reward;
+            if (adColonyV4VCReward.success()) {
+                reward = MoPubReward.success(adColonyV4VCReward.name(), adColonyV4VCReward.amount());
+            } else {
+                reward = MoPubReward.failure();
+            }
+            MoPubRewardedVideoManager.onRewardedVideoCompleted(
+                    AdColonyRewardedVideo.class,
+                    null, // Can't deduce the zoneId from this object.
+                    reward);
+        }
+    }
+
+    public static final class AdColonyGlobalMediationSettings implements MediationSettings {
+
+        @Nullable private final String mCustomId;
+        @Nullable private final String mDeviceId;
+
+        public AdColonyGlobalMediationSettings(@Nullable String customId, @Nullable String deviceId) {
+            mCustomId = customId;
+            mDeviceId = deviceId;
+        }
+
+        @Nullable
+        public String getCustomId() {
+            return mCustomId;
+        }
+
+        @Nullable
+        public String getDeviceId() {
+            return mDeviceId;
+        }
+    }
+
+    public static final class AdColonyInstanceMediationSettings implements MediationSettings {
+        private final boolean mWithConfirmationDialog;
+        private final boolean mWithResultsDialog;
+
+        public AdColonyInstanceMediationSettings(
+                boolean withConfirmationDialog, boolean withResultsDialog) {
+            mWithConfirmationDialog = withConfirmationDialog;
+            mWithResultsDialog = withResultsDialog;
+        }
+
+        public boolean withConfirmationDialog() {
+            return mWithConfirmationDialog;
+        }
+
+        public boolean withResultsDialog() {
+            return mWithResultsDialog;
+        }
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java b/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java
new file mode 100644
index 00000000..0cd02f58
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java
@@ -0,0 +1,278 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import com.chartboost.sdk.Chartboost;
+import com.chartboost.sdk.ChartboostDelegate;
+import com.chartboost.sdk.Model.CBError;
+import com.mopub.common.DataKeys;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MediationSettings;
+import com.mopub.common.MoPubReward;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+
+import java.util.*;
+
+import static com.mopub.mobileads.MoPubErrorCode.VIDEO_DOWNLOAD_ERROR;
+
+/**
+ * A custom event for showing Chartboost rewarded videos.
+ *
+ * Certified with Chartboost 5.0.4
+ */
+public class ChartboostRewardedVideo extends CustomEventRewardedVideo {
+    public static final String APP_ID_KEY = "appId";
+    public static final String APP_SIGNATURE_KEY = "appSignature";
+    public static final String LOCATION_KEY = "location";
+    public static final String LOCATION_DEFAULT = "Default";
+
+    @NonNull private static final SingletonChartboostDelegate sSingletonChartboostDelegate =
+            new SingletonChartboostDelegate();
+    @NonNull private static final LifecycleListener sLifecycleListener =
+            new ChartboostLifecycleListener();
+    private static boolean sInitialized = false;
+
+    @NonNull private String mLocation = LOCATION_DEFAULT;
+    @NonNull private final Handler mHandler;
+
+    public ChartboostRewardedVideo() {
+        mHandler = new Handler();
+    }
+
+    @Override
+    @NonNull
+    public CustomEventRewardedVideoListener getVideoListenerForSdk() {
+        return sSingletonChartboostDelegate;
+    }
+
+    @Override
+    @NonNull
+    public LifecycleListener getLifecycleListener() {
+        return sLifecycleListener;
+    }
+
+    @Override
+    @NonNull
+    public String getAdNetworkId() {
+        return mLocation;
+    }
+
+    @Override
+    public boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
+            @NonNull Map<String, Object> localExtras,
+            @NonNull Map<String, String> serverExtras) throws Exception {
+        synchronized (ChartboostRewardedVideo.class) {
+            if (sInitialized) {
+                return false;
+            }
+
+            if (!serverExtras.containsKey(APP_ID_KEY)) {
+                throw new IllegalStateException("Chartboost rewarded video initialization" +
+                        " failed due to missing application ID.");
+            }
+
+            if (!serverExtras.containsKey(APP_SIGNATURE_KEY)) {
+                throw new IllegalStateException("Chartboost rewarded video initialization" +
+                        " failed due to missing application signature.");
+            }
+
+            final String appId = serverExtras.get(APP_ID_KEY);
+            final String appSignature = serverExtras.get(APP_SIGNATURE_KEY);
+
+            Chartboost.startWithAppId(launcherActivity, appId, appSignature);
+            Chartboost.setDelegate(sSingletonChartboostDelegate);
+
+            sInitialized = true;
+            return true;
+        }
+    }
+
+    @Override
+    protected void loadWithSdkInitialized(@NonNull Activity activity,
+            @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras)
+            throws Exception {
+        if (serverExtras.containsKey(LOCATION_KEY)) {
+            mLocation = serverExtras.get(LOCATION_KEY);
+        } else {
+            mLocation = LOCATION_DEFAULT;
+        }
+
+        sSingletonChartboostDelegate.mLocationsToLoad.add(mLocation);
+        setUpMediationSettingsForRequest((String) localExtras.get(DataKeys.AD_UNIT_ID_KEY));
+
+        // We do this to ensure that the custom event manager has a chance to get the listener
+        // and ad unit ID before and delegate callbacks are made.
+        mHandler.post(new Runnable() {
+            public void run() {
+                Chartboost.cacheRewardedVideo(mLocation);
+            }
+        });
+    }
+
+    private void setUpMediationSettingsForRequest(String moPubId) {
+        final ChartboostMediationSettings globalSettings =
+                MoPubRewardedVideoManager.getGlobalMediationSettings(ChartboostMediationSettings.class);
+        final ChartboostMediationSettings instanceSettings =
+                MoPubRewardedVideoManager.getInstanceMediationSettings(ChartboostMediationSettings.class, moPubId);
+
+        // Instance settings override global settings.
+        if (instanceSettings != null) {
+            Chartboost.setCustomId(instanceSettings.getCustomId());
+        } else if (globalSettings != null) {
+            Chartboost.setCustomId(globalSettings.getCustomId());
+        }
+    }
+
+    @Override
+    public boolean hasVideoAvailable() {
+        return Chartboost.hasRewardedVideo(mLocation);
+    }
+
+    @Override
+    public void showVideo() {
+        if (hasVideoAvailable()) {
+            Chartboost.showRewardedVideo(mLocation);
+        } else {
+            MoPubLog.d("Attempted to show Chartboost rewarded video before it was available.");
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        // This prevents sending didCache or didFailToCache callbacks.
+        sSingletonChartboostDelegate.mLocationsToLoad.remove(mLocation);
+    }
+
+    private static final class SingletonChartboostDelegate extends ChartboostDelegate
+            implements CustomEventRewardedVideoListener {
+
+        private Set<String> mLocationsToLoad = Collections.synchronizedSet(new TreeSet<String>());
+
+        @Override
+        public boolean shouldDisplayRewardedVideo(String location) {
+            return super.shouldDisplayRewardedVideo(location);
+        }
+
+        @Override
+        public void didCacheRewardedVideo(String location) {
+            super.didCacheRewardedVideo(location);
+
+            if (mLocationsToLoad.contains(location)) {
+                MoPubLog.d("Chartboost rewarded video cached for location " + location + ".");
+                MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(ChartboostRewardedVideo.class, location);
+                mLocationsToLoad.remove(location);
+            }
+        }
+
+        @Override
+        public void didFailToLoadRewardedVideo(String location, CBError.CBImpressionError error) {
+            super.didFailToLoadRewardedVideo(location, error);
+
+            if (mLocationsToLoad.contains(location)) {
+                MoPubLog.d("Chartboost rewarded video cache failed for location " + location + ".");
+                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(ChartboostRewardedVideo.class, location, VIDEO_DOWNLOAD_ERROR);
+                mLocationsToLoad.remove(location);
+            }
+        }
+
+        @Override
+        public void didDismissRewardedVideo(String location) {
+            // This is called before didCloseRewardedVideo and didClickRewardedVideo
+            super.didDismissRewardedVideo(location);
+            MoPubRewardedVideoManager.onRewardedVideoClosed(ChartboostRewardedVideo.class, location);
+            MoPubLog.d("Chartboost rewarded video dismissed for location " + location + ".");
+        }
+
+        @Override
+        public void didCloseRewardedVideo(String location) {
+            super.didCloseRewardedVideo(location);
+            MoPubLog.d("Chartboost rewarded video closed for location " + location + ".");
+        }
+
+        @Override
+        public void didClickRewardedVideo(String location) {
+            super.didClickRewardedVideo(location);
+            MoPubRewardedVideoManager.onRewardedVideoClicked(ChartboostRewardedVideo.class, location);
+            MoPubLog.d("Chartboost rewarded video clicked for location " + location + ".");
+        }
+
+        @Override
+        public void didCompleteRewardedVideo(String location, int reward) {
+            super.didCompleteRewardedVideo(location, reward);
+            MoPubLog.d("Chartboost rewarded video completed for location " + location + " with "
+                    + "reward amount " + reward);
+            MoPubRewardedVideoManager.onRewardedVideoCompleted(
+                    ChartboostRewardedVideo.class,
+                    location,
+                    MoPubReward.success(MoPubReward.NO_REWARD_LABEL, reward));
+        }
+
+        @Override
+        public void didDisplayRewardedVideo(String location) {
+            super.didDisplayRewardedVideo(location);
+            MoPubLog.d("Chartboost rewarded video displayed for location " + location + ".");
+            MoPubRewardedVideoManager.onRewardedVideoStarted(ChartboostRewardedVideo.class, location);
+        }
+    }
+
+    private static final class ChartboostLifecycleListener implements LifecycleListener {
+        @Override
+        public void onCreate(@NonNull Activity activity) {
+            Chartboost.onCreate(activity);
+        }
+
+        @Override
+        public void onStart(@NonNull Activity activity) {
+            Chartboost.onStart(activity);
+        }
+
+        @Override
+        public void onPause(@NonNull Activity activity) {
+            Chartboost.onPause(activity);
+        }
+
+        @Override
+        public void onResume(@NonNull Activity activity) {
+            Chartboost.onResume(activity);
+        }
+
+        @Override
+        public void onRestart(@NonNull Activity activity) {
+        }
+
+        @Override
+        public void onStop(@NonNull Activity activity) {
+            Chartboost.onStop(activity);
+        }
+
+        @Override
+        public void onDestroy(@NonNull Activity activity) {
+            Chartboost.onDestroy(activity);
+        }
+
+        @Override
+        public void onBackPressed(@NonNull Activity activity) {
+            Chartboost.onBackPressed();
+        }
+    }
+
+    public static final class ChartboostMediationSettings implements MediationSettings {
+        @NonNull private final String mCustomId;
+
+        public ChartboostMediationSettings(@NonNull final String customId) {
+            mCustomId = customId;
+        }
+
+        @NonNull public String getCustomId() {
+            return mCustomId;
+        }
+    }
+
+    @Deprecated // for testing
+    @VisibleForTesting
+    static void resetInitialization() {
+        sInitialized = false;
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/FacebookInterstitial.java b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
index d6dde364..a2c59d42 100644
--- a/extras/src/com/mopub/mobileads/FacebookInterstitial.java
+++ b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
@@ -10,11 +10,6 @@
 
 import java.util.Map;
 
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
-import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
-
 /**
  * Tested with Facebook SDK 3.18.1.
  */
@@ -39,7 +34,7 @@ protected void loadInterstitial(final Context context,
         if (extrasAreValid(serverExtras)) {
             placementId = serverExtras.get(PLACEMENT_ID_KEY);
         } else {
-            mInterstitialListener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
             return;
         }
 
@@ -79,11 +74,11 @@ public void onAdLoaded(final Ad ad) {
     public void onError(final Ad ad, final AdError error) {
         Log.d("MoPub", "Facebook interstitial ad failed to load.");
         if (error == AdError.NO_FILL) {
-            mInterstitialListener.onInterstitialFailed(NETWORK_NO_FILL);
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
         } else if (error == AdError.INTERNAL_ERROR) {
-            mInterstitialListener.onInterstitialFailed(NETWORK_INVALID_STATE);
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
         } else {
-            mInterstitialListener.onInterstitialFailed(UNSPECIFIED);
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
         }
     }
 
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
index a71e120c..87a02d2e 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
@@ -15,8 +15,6 @@
 import static com.google.android.gms.ads.AdSize.FULL_BANNER;
 import static com.google.android.gms.ads.AdSize.LEADERBOARD;
 import static com.google.android.gms.ads.AdSize.MEDIUM_RECTANGLE;
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
 
 /*
  * Compatible with version 5.0.89 of the Google Play Services SDK.
@@ -52,7 +50,7 @@ protected void loadBanner(
             adWidth = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
             adHeight = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
         } else {
-            mBannerListener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
+            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
             return;
         }
 
@@ -62,7 +60,7 @@ protected void loadBanner(
 
         final AdSize adSize = calculateAdSize(adWidth, adHeight);
         if (adSize == null) {
-            mBannerListener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
+            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
             return;
         }
 
@@ -74,7 +72,7 @@ protected void loadBanner(
             mGoogleAdView.loadAd(adRequest);
         } catch (NoClassDefFoundError e) {
             // This can be thrown by Play Services on Honeycomb.
-            mBannerListener.onBannerFailed(NETWORK_NO_FILL);
+            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
         }
     }
 
@@ -126,7 +124,7 @@ public void onAdClosed() {
         public void onAdFailedToLoad(int errorCode) {
             Log.d("MoPub", "Google Play Services banner ad failed to load.");
             if (mBannerListener != null) {
-                mBannerListener.onBannerFailed(NETWORK_NO_FILL);
+                mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
             }
         }
 
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
index 24146033..6a6a4677 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
@@ -9,9 +9,6 @@
 
 import java.util.Map;
 
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
-
 /*
  * Compatible with version 5.0.89 of the Google Play Services SDK.
  */
@@ -40,7 +37,7 @@ protected void loadInterstitial(
         if (extrasAreValid(serverExtras)) {
             adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
         } else {
-            mInterstitialListener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
             return;
         }
 
@@ -54,7 +51,7 @@ protected void loadInterstitial(
             mGoogleInterstitialAd.loadAd(adRequest);
         } catch (NoClassDefFoundError e) {
             // This can be thrown by Play Services on Honeycomb.
-            mInterstitialListener.onInterstitialFailed(NETWORK_NO_FILL);
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
         }
     }
 
@@ -94,7 +91,7 @@ public void onAdClosed() {
         public void onAdFailedToLoad(int errorCode) {
             Log.d("MoPub", "Google Play Services interstitial ad failed to load.");
             if (mInterstitialListener != null) {
-                mInterstitialListener.onInterstitialFailed(NETWORK_NO_FILL);
+                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
             }
         }
 
diff --git a/extras/src/com/mopub/mobileads/MillennialBanner.java b/extras/src/com/mopub/mobileads/MillennialBanner.java
index ac1c4fe6..442e9890 100644
--- a/extras/src/com/mopub/mobileads/MillennialBanner.java
+++ b/extras/src/com/mopub/mobileads/MillennialBanner.java
@@ -13,8 +13,6 @@
 
 import java.util.Map;
 
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
-
 /**
  * Compatible with version 5.3.0 of the Millennial Media SDK.
  */
@@ -109,7 +107,7 @@ public void requestCompleted(final MMAd mmAd) {
         @Override
         public void requestFailed(final MMAd mmAd, final MMException e) {
             Log.d("MoPub", "Millennial banner ad failed to load.");
-            mBannerListener.onBannerFailed(NETWORK_NO_FILL);
+            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
         }
 
         @Override
diff --git a/extras/src/com/mopub/mobileads/MillennialInterstitial.java b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
index 474d2203..e0fcec9f 100644
--- a/extras/src/com/mopub/mobileads/MillennialInterstitial.java
+++ b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
@@ -13,9 +13,6 @@
 
 import java.util.Map;
 
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
-
 /**
  * Compatible with version 5.3.0 of the Millennial Media SDK.
  */
@@ -96,21 +93,21 @@ public void requestCompleted(final MMAd mmAd) {
                 mInterstitialListener.onInterstitialLoaded();
             } else {
                 Log.d("MoPub", "Millennial interstitial request completed, but no ad was available.");
-                mInterstitialListener.onInterstitialFailed(NETWORK_INVALID_STATE);
+                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
             }
         }
 
         @Override
         public void requestFailed(final MMAd mmAd, final MMException e) {
             if (mMillennialInterstitial == null || e == null) {
-                mInterstitialListener.onInterstitialFailed(NETWORK_INVALID_STATE);
+                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
             } else if (e.getCode() == MMException.CACHE_NOT_EMPTY && mMillennialInterstitial.isAdAvailable()) {
                 // requestFailed can be due to an ad already loaded or an ad failed to load.
                 Log.d("MoPub", "Millennial interstitial loaded successfully from cache.");
                 mInterstitialListener.onInterstitialLoaded();
             } else {
                 Log.d("MoPub", "Millennial interstitial ad failed to load.");
-                mInterstitialListener.onInterstitialFailed(NETWORK_NO_FILL);
+                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
             }
         }
 
diff --git a/extras/src/com/mopub/mobileads/VungleInterstitial.java b/extras/src/com/mopub/mobileads/VungleInterstitial.java
index 0997aaeb..70a572be 100644
--- a/extras/src/com/mopub/mobileads/VungleInterstitial.java
+++ b/extras/src/com/mopub/mobileads/VungleInterstitial.java
@@ -11,8 +11,6 @@
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-
 /*
  * Tested with Vungle SDK 3.2.2.
  */
@@ -45,7 +43,7 @@ protected void loadInterstitial(Context context,
         mCustomEventInterstitialListener = customEventInterstitialListener;
 
         if (context == null) {
-            mCustomEventInterstitialListener.onInterstitialFailed(NETWORK_INVALID_STATE);
+            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
             return;
         }
 
diff --git a/extras/src/com/mopub/mobileads/VungleRewardedVideo.java b/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
new file mode 100644
index 00000000..f067349a
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
@@ -0,0 +1,283 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import com.mopub.common.BaseLifecycleListener;
+import com.mopub.common.DataKeys;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MediationSettings;
+import com.mopub.common.MoPubReward;
+import com.mopub.common.logging.MoPubLog;
+import com.vungle.publisher.AdConfig;
+import com.vungle.publisher.EventListener;
+import com.vungle.publisher.VunglePub;
+
+import java.util.*;
+import java.util.concurrent.*;
+
+/**
+ * A custom event for showing Vungle rewarded videos.
+ *
+ * Certified with Vungle 3.2.2
+ */
+public class VungleRewardedVideo extends CustomEventRewardedVideo {
+
+    private static final String DEFAULT_VUNGLE_APP_ID = "YOUR_DEFAULT_VUNGLE_APP_ID";
+
+    /*
+     * These constants are intended for MoPub internal use. Do not modify.
+     */
+    private static final String APP_ID_KEY = "appId";
+    private static final String VUNGLE_AD_NETWORK_CONSTANT = "vngl_id";
+
+    // This has to be reinitialized every time the CE loads to avoid conflict with the interstitials.
+    private static VunglePub sVunglePub;
+    private static VungleRewardedVideoListener sVungleListener = new VungleRewardedVideoListener();
+    private static boolean sInitialized;
+    private static final LifecycleListener sLifecycleListener = new BaseLifecycleListener() {
+        @Override
+        public void onPause(@NonNull final Activity activity) {
+            super.onPause(activity);
+            sVunglePub.onPause();
+        }
+
+        @Override
+        public void onResume(@NonNull final Activity activity) {
+            super.onResume(activity);
+            sVunglePub.onResume();
+        }
+    };
+
+    private final Handler mHandler;
+    private final ScheduledThreadPoolExecutor mScheduledThreadPoolExecutor;
+    private boolean mIsLoading;
+    private String mAdUnitId;
+
+
+    public VungleRewardedVideo() {
+        mHandler = new Handler();
+        mScheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(1);
+        mIsLoading = false;
+    }
+
+    @Nullable
+    @Override
+    public CustomEventRewardedVideoListener getVideoListenerForSdk() {
+        return sVungleListener;
+    }
+
+    @Nullable
+    @Override
+    public LifecycleListener getLifecycleListener() {
+        return sLifecycleListener;
+    }
+
+    @NonNull
+    @Override
+    protected String getAdNetworkId() {
+        return VUNGLE_AD_NETWORK_CONSTANT;
+    }
+
+    @Override
+    protected boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
+                @NonNull final Map<String, Object> localExtras,
+                @NonNull final Map<String, String> serverExtras) throws Exception {
+        synchronized (VungleRewardedVideo.class) {
+            if (!sInitialized) {
+                sVunglePub = VunglePub.getInstance();
+                sInitialized = true;
+                return true;
+            }
+            return false;
+        }
+    }
+
+    @Override
+    protected void loadWithSdkInitialized(@NonNull final Activity activity, @NonNull final Map<String, Object> localExtras, @NonNull final Map<String, String> serverExtras) throws Exception {
+        String appId = serverExtras.containsKey(APP_ID_KEY) ? serverExtras.get(APP_ID_KEY) : DEFAULT_VUNGLE_APP_ID;
+        sVunglePub.init(activity, appId);
+        sVunglePub.setEventListener(sVungleListener);
+        Object adUnitObject = localExtras.get(DataKeys.AD_UNIT_ID_KEY);
+        if (adUnitObject instanceof String) {
+            mAdUnitId = (String) adUnitObject;
+        }
+        scheduleOnVideoLoaded();
+    }
+
+    @Override
+    protected boolean hasVideoAvailable() {
+        return sVunglePub.isCachedAdAvailable();
+    }
+
+    @Override
+    protected void showVideo() {
+        final AdConfig adConfig = new AdConfig();
+        adConfig.setIncentivized(true);
+        setUpMediationSettingsForRequest(adConfig);
+        sVunglePub.playAd(adConfig);
+    }
+
+    private void setUpMediationSettingsForRequest(AdConfig adConfig) {
+        final VungleMediationSettings globalMediationSettings =
+                MoPubRewardedVideoManager.getGlobalMediationSettings(VungleMediationSettings.class);
+        final VungleMediationSettings instanceMediationSettings =
+                MoPubRewardedVideoManager.getInstanceMediationSettings(VungleMediationSettings.class, mAdUnitId);
+
+        // Local options override global options.
+        // The two objects are not merged.
+        if (instanceMediationSettings != null) {
+            modifyAdConfig(adConfig, instanceMediationSettings);
+        } else if (globalMediationSettings != null) {
+            modifyAdConfig(adConfig, globalMediationSettings);
+        }
+    }
+
+    private void modifyAdConfig(AdConfig adConfig, VungleMediationSettings mediationSettings) {
+        if (!TextUtils.isEmpty(mediationSettings.body)) {
+            adConfig.setIncentivizedCancelDialogBodyText(mediationSettings.body);
+        }
+        if (!TextUtils.isEmpty(mediationSettings.closeButtonText)) {
+            adConfig.setIncentivizedCancelDialogCloseButtonText(mediationSettings.closeButtonText);
+        }
+        if (!TextUtils.isEmpty(mediationSettings.keepWatchingButtonText)) {
+            adConfig.setIncentivizedCancelDialogKeepWatchingButtonText(mediationSettings.keepWatchingButtonText);
+        }
+        if (!TextUtils.isEmpty(mediationSettings.title)) {
+            adConfig.setIncentivizedCancelDialogTitle(mediationSettings.title);
+        }
+        if (!TextUtils.isEmpty(mediationSettings.userId)) {
+            adConfig.setIncentivizedUserId(mediationSettings.userId);
+        }
+    }
+
+    private void scheduleOnVideoLoaded() {
+        Runnable runnable = new Runnable() {
+            @Override
+            public void run() {
+                if (sVunglePub.isCachedAdAvailable()) {
+                    MoPubLog.d("Vungle interstitial ad successfully loaded.");
+                    mScheduledThreadPoolExecutor.shutdownNow();
+                    mHandler.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(VungleRewardedVideo.class, VUNGLE_AD_NETWORK_CONSTANT);
+                        }
+                    });
+                    mIsLoading = false;
+                }
+            }
+        };
+
+        if (!mIsLoading) {
+            mScheduledThreadPoolExecutor.scheduleAtFixedRate(runnable, 1, 1, TimeUnit.SECONDS);
+            mIsLoading = true;
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        mScheduledThreadPoolExecutor.shutdownNow();
+    }
+
+    private static class VungleRewardedVideoListener implements EventListener,
+            CustomEventRewardedVideoListener {
+
+        @Override
+        public void onAdEnd(final boolean wasCallToActionClicked) {
+            if (wasCallToActionClicked) {
+                MoPubRewardedVideoManager.onRewardedVideoClicked(VungleRewardedVideo.class,
+                        VUNGLE_AD_NETWORK_CONSTANT);
+            }
+            MoPubRewardedVideoManager.onRewardedVideoClosed(VungleRewardedVideo.class,
+                    VUNGLE_AD_NETWORK_CONSTANT);
+        }
+
+        @Override
+        public void onAdStart() {
+            MoPubRewardedVideoManager.onRewardedVideoStarted(VungleRewardedVideo.class,
+                    VUNGLE_AD_NETWORK_CONSTANT);
+        }
+
+        @Override
+        public void onAdUnavailable(final String s) {
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class,
+                    VUNGLE_AD_NETWORK_CONSTANT, MoPubErrorCode.NETWORK_NO_FILL);
+        }
+
+        @Override
+        public void onCachedAdAvailable() {
+            // Due to the inconsistent behavior of this method,
+            // we rely on scheduleOnInterstitialLoaded instead.
+        }
+
+        @Override
+        public void onVideoView(final boolean isCompletedView, final int watchedMillis, final int videoMillis) {
+            MoPubLog.d(String.format(Locale.US, "%.1f%% of Vungle video watched.",
+                    (double) watchedMillis / videoMillis * 100));
+            if (isCompletedView) {
+                // Vungle does not provide a callback when a user should be rewarded.
+                // You will need to provide your own reward logic if you receive a reward with
+                // "NO_REWARD_LABEL" && "NO_REWARD_AMOUNT"
+                MoPubRewardedVideoManager.onRewardedVideoCompleted(VungleRewardedVideo.class,
+                        VUNGLE_AD_NETWORK_CONSTANT,
+                        MoPubReward.success(MoPubReward.NO_REWARD_LABEL, MoPubReward.NO_REWARD_AMOUNT));
+            }
+        }
+    }
+
+    public static class VungleMediationSettings implements MediationSettings {
+        @Nullable private final String userId;
+        @Nullable private final String title;
+        @Nullable private final String body;
+        @Nullable private final String closeButtonText;
+        @Nullable private final String keepWatchingButtonText;
+
+        public static class Builder {
+            @Nullable private String userId;
+            @Nullable private String title;
+            @Nullable private String body;
+            @Nullable private String closeButtonText;
+            @Nullable private String keepWatchingButtonText;
+
+            public Builder withUserId(@NonNull final String userId) {
+                this.userId = userId;
+                return this;
+            }
+
+            public Builder withCancelDialogTitle(@NonNull final String title) {
+                this.title = title;
+                return this;
+            }
+
+            public Builder withCancelDialogBody(@NonNull final String body) {
+                this.body = body;
+                return this;
+            }
+
+            public Builder withCancelDialogCloseButton(@NonNull final String buttonText) {
+                this.closeButtonText = buttonText;
+                return this;
+            }
+
+            public Builder withCancelDialogKeepWatchingButton(@NonNull final String buttonText) {
+                this.keepWatchingButtonText = buttonText;
+                return this;
+            }
+
+            public VungleMediationSettings build() {
+                return new VungleMediationSettings(this);
+            }
+        }
+
+        private VungleMediationSettings(@NonNull final Builder builder) {
+            this.userId = builder.userId;
+            this.title = builder.title;
+            this.body = builder.body;
+            this.closeButtonText = builder.closeButtonText;
+            this.keepWatchingButtonText = builder.keepWatchingButtonText;
+        }
+    }
+}
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index fe3bc0b4..42e13c89 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,2 +1,6 @@
-#Fri Dec 05 19:12:52 EST 2014
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-all.zip
+#Tue Nov 18 14:15:01 PST 2014
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.3-bin.zip
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 9f08ae71..05f288e6 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="20"
-      android:versionName="3.4.0">
+      android:versionCode="21"
+      android:versionName="3.5.0">
     <uses-sdk android:minSdkVersion="9" 
               android:targetSdkVersion="19"/>
 
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index f6f73e9f..a90d1c35 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -1,3 +1,7 @@
+repositories {
+    jcenter()
+}
+
 apply plugin: 'com.android.application'
 
 group = 'com.mopub'
@@ -9,8 +13,8 @@ android {
     buildToolsVersion '21.1.1'
 
     defaultConfig {
-        versionCode 20
-        versionName "3.4.0"
+        versionCode 21
+        versionName "3.5.0"
         minSdkVersion 9
         targetSdkVersion 19
     }
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index 355605d7..96ff235a 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -9,8 +9,8 @@ android {
     buildToolsVersion "21.1.2"
 
     defaultConfig {
-        versionCode 20
-        versionName "3.4.0"
+        versionCode 21
+        versionName "3.5.0"
         minSdkVersion 9
         targetSdkVersion 21
     }
@@ -43,7 +43,7 @@ android {
 dependencies {
     compile 'com.android.support:support-v4:21.0.3'
     compile 'com.android.support:support-annotations:21.0.3'
-    compile files('libs/mopub-volley-1.0.0.jar')
+    compile 'com.mopub.volley:mopub-volley:1.0.0'
 }
 
 apply plugin: 'maven'
diff --git a/mopub-sdk/libs/mopub-volley-1.0.0.jar b/mopub-sdk/libs/mopub-volley-1.0.0.jar
deleted file mode 100644
index 6b22d65f..00000000
Binary files a/mopub-sdk/libs/mopub-volley-1.0.0.jar and /dev/null differ
diff --git a/mopub-sdk/pom.xml b/mopub-sdk/pom.xml
index 1e5554e9..5c907201 100644
--- a/mopub-sdk/pom.xml
+++ b/mopub-sdk/pom.xml
@@ -36,7 +36,7 @@
 
         <dependency>
             <groupId>com.mopub.volley</groupId>
-            <artifactId>volley</artifactId>
+            <artifactId>mopub-volley</artifactId>
             <version>1.0.0</version>
         </dependency>
 
diff --git a/mopub-sdk/proguard.txt b/mopub-sdk/proguard.txt
index 4ec21998..0a2e3c08 100644
--- a/mopub-sdk/proguard.txt
+++ b/mopub-sdk/proguard.txt
@@ -10,6 +10,7 @@
 -keep class * extends com.mopub.mobileads.CustomEventBanner {}
 -keep class * extends com.mopub.mobileads.CustomEventInterstitial {}
 -keep class * extends com.mopub.nativeads.CustomEventNative {}
+-keep class * extends com.mopub.mobileads.CustomEventRewardedVideo {}
 
 # Support for Android Advertiser ID.
 -keep class com.google.android.gms.common.GooglePlayServicesUtil {*;}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/AdFormat.java b/mopub-sdk/src/main/java/com/mopub/common/AdFormat.java
index 08aab4c8..630c180e 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/AdFormat.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/AdFormat.java
@@ -4,4 +4,5 @@
     BANNER,
     INTERSTITIAL,
     NATIVE,
+    REWARDED_VIDEO,
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java
index f2a83cc6..79dc9d42 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java
@@ -9,19 +9,11 @@
 import static com.mopub.common.ClientMetadata.MoPubNetworkType;
 
 public abstract class AdUrlGenerator extends BaseUrlGenerator {
-    private static TwitterAppInstalledStatus sTwitterAppInstalledStatus = TwitterAppInstalledStatus.UNKNOWN;
-
     protected Context mContext;
     protected String mAdUnitId;
     protected String mKeywords;
     protected Location mLocation;
 
-    public static enum TwitterAppInstalledStatus {
-        UNKNOWN,
-        NOT_INSTALLED,
-        INSTALLED,
-    }
-
     public AdUrlGenerator(Context context) {
         mContext = context;
     }
@@ -120,25 +112,6 @@ private int mncPortionLength(String networkOperator) {
         return Math.min(3, networkOperator.length());
     }
 
-    protected void setTwitterAppInstalledFlag() {
-        if (sTwitterAppInstalledStatus == TwitterAppInstalledStatus.UNKNOWN) {
-            sTwitterAppInstalledStatus = getTwitterAppInstallStatus();
-        }
-
-        if (sTwitterAppInstalledStatus == TwitterAppInstalledStatus.INSTALLED) {
-            addParam("ts", "1");
-        }
-    }
-
-    public TwitterAppInstalledStatus getTwitterAppInstallStatus() {
-        return Intents.canHandleTwitterUrl(mContext) ? TwitterAppInstalledStatus.INSTALLED : TwitterAppInstalledStatus.NOT_INSTALLED;
-    }
-
-    @Deprecated // for testing
-    public static void setTwitterAppInstalledStatus(TwitterAppInstalledStatus status) {
-        sTwitterAppInstalledStatus = status;
-    }
-
     /**
      * @deprecated As of release 2.4
      */
diff --git a/mopub-sdk/src/main/java/com/mopub/common/BaseLifecycleListener.java b/mopub-sdk/src/main/java/com/mopub/common/BaseLifecycleListener.java
new file mode 100644
index 00000000..994f01db
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/BaseLifecycleListener.java
@@ -0,0 +1,36 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+
+/**
+ * This empty implementation of {@link com.mopub.common.LifecycleListener} is convenient for writing
+ * your own adapters for an SDK that MoPub can mediate. You can override only the lifecycle callbacks
+ * that the SDK requires.
+ */
+public class BaseLifecycleListener implements LifecycleListener {
+
+    @Override
+    public void onCreate(@NonNull final Activity activity) {}
+
+    @Override
+    public void onStart(@NonNull final Activity activity) {}
+
+    @Override
+    public void onPause(@NonNull final Activity activity) {}
+
+    @Override
+    public void onResume(@NonNull final Activity activity) {}
+
+    @Override
+    public void onRestart(@NonNull final Activity activity) {}
+
+    @Override
+    public void onStop(@NonNull final Activity activity) {}
+
+    @Override
+    public void onDestroy(@NonNull final Activity activity) {}
+
+    @Override
+    public void onBackPressed(@NonNull final Activity activity) {}
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java b/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java
index 6377f30d..6076ad65 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java
@@ -55,7 +55,6 @@
         MOBILE(3);
 
         private final int mId;
-
         private MoPubNetworkType(int id) {
             mId = id;
         }
@@ -81,6 +80,10 @@ private static MoPubNetworkType fromAndroidNetworkType(int type) {
                     return UNKNOWN;
             }
         }
+
+        public int getId() {
+            return mId;
+        }
     }
 
     private static ClientMetadata sInstance;
diff --git a/mopub-sdk/src/main/java/com/mopub/common/Constants.java b/mopub-sdk/src/main/java/com/mopub/common/Constants.java
index ec576679..4bdce8b3 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/Constants.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/Constants.java
@@ -8,4 +8,8 @@ private Constants() {}
     public static final String AD_HANDLER = "/m/ad";
     public static final String CONVERSION_TRACKING_HANDLER = "/m/open";
     public static final String POSITIONING_HANDLER = "/m/pos";
+
+
+    public static final int TEN_SECONDS_MILLIS = 10 * 1000;
+    public static final int THIRTY_SECONDS_MILLIS = 30 * 1000;
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java b/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java
index 38c91ec7..79b5d9b0 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java
@@ -11,4 +11,5 @@
     public static final String SCROLLABLE_KEY = "Scrollable";
     public static final String JSON_BODY_KEY = "com_mopub_native_json";
     public static final String BROADCAST_IDENTIFIER_KEY = "broadcastIdentifier";
+    public static final String AD_UNIT_ID_KEY = "com_mopub_ad_unit_id";
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/LifecycleListener.java b/mopub-sdk/src/main/java/com/mopub/common/LifecycleListener.java
new file mode 100644
index 00000000..d92f8d5d
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/LifecycleListener.java
@@ -0,0 +1,21 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+
+/**
+ * This is a uniform interface to 3rd party SDKs that need to know when Activity lifecycle events
+ * occur.
+ */
+public interface LifecycleListener {
+
+    public void onCreate(@NonNull Activity activity);
+    public void onStart(@NonNull Activity activity);
+    public void onPause(@NonNull Activity activity);
+    public void onResume(@NonNull Activity activity);
+
+    public void onRestart(@NonNull Activity activity);
+    public void onStop(@NonNull Activity activity);
+    public void onDestroy(@NonNull Activity activity);
+    public void onBackPressed(@NonNull Activity activity);
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MediationSettings.java b/mopub-sdk/src/main/java/com/mopub/common/MediationSettings.java
new file mode 100644
index 00000000..42e7b7a6
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/MediationSettings.java
@@ -0,0 +1,6 @@
+package com.mopub.common;
+
+/**
+ * A marker interface for 3rd party SDK options.
+ */
+public interface MediationSettings {}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
index 83de6b15..9de497aa 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
@@ -1,7 +1,14 @@
 package com.mopub.common;
 
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.mobileads.MoPubRewardedVideoListener;
+import com.mopub.mobileads.MoPubRewardedVideoManager;
+
 public class MoPub {
-    public static final String SDK_VERSION = "3.4.0";
+    public static final String SDK_VERSION = "3.5.0";
 
     public static enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
@@ -28,4 +35,68 @@ public static int getLocationPrecision() {
     public static void setLocationPrecision(int precision) {
         sLocationPrecision = Math.min(Math.max(0, precision), DEFAULT_LOCATION_PRECISION);
     }
+
+
+    //////// MoPub LifecycleListener messages ////////
+
+    public static void onCreate(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onCreate(activity);
+        updateActivity(activity);
+    }
+
+    public static void onStart(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onStart(activity);
+        updateActivity(activity);
+    }
+
+    public static void onPause(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onPause(activity);
+    }
+
+    public static void onResume(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onResume(activity);
+        updateActivity(activity);
+    }
+
+    public static void onRestart(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onRestart(activity);
+        updateActivity(activity);
+    }
+
+    public static void onStop(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onStop(activity);
+    }
+
+    public static void onDestroy(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onDestroy(activity);
+    }
+
+    public static void onBackPressed(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onBackPressed(activity);
+    }
+
+    ////////// MoPub RewardedVideoControl methods //////////
+    public static void initializeRewardedVideo(@NonNull Activity activity, MediationSettings... mediationSettings) {
+        MoPubRewardedVideoManager.init(activity, mediationSettings);
+    }
+
+    private static void updateActivity(@NonNull Activity activity) {
+        MoPubRewardedVideoManager.updateActivity(activity);
+    }
+
+    public static void setRewardedVideoListener(@Nullable MoPubRewardedVideoListener listener) {
+        MoPubRewardedVideoManager.setVideoListener(listener);
+    }
+
+    public static void loadRewardedVideo(@NonNull String adUnitId, @Nullable MediationSettings... mediationSettings) {
+        MoPubRewardedVideoManager.loadVideo(adUnitId, mediationSettings);
+    }
+
+    public static boolean hasRewardedVideo(@NonNull String adUnitId) {
+        return MoPubRewardedVideoManager.hasVideo(adUnitId);
+    }
+
+    public static void showRewardedVideo(@NonNull String adUnitId) {
+        MoPubRewardedVideoManager.showVideo(adUnitId);
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java b/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
index afc7ed09..8719c430 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
@@ -19,9 +19,9 @@
 import android.widget.ImageButton;
 import android.widget.LinearLayout;
 import android.widget.RelativeLayout;
-import android.widget.Toast;
 
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.util.WebViews;
 
 import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
 import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
@@ -88,7 +88,7 @@ private void initializeWebView() {
             @Override
             public void onReceivedError(WebView view, int errorCode, String description,
                     String failingUrl) {
-                Toast.makeText(MoPubBrowser.this, "MoPubBrowser error: " + description, Toast.LENGTH_SHORT).show();
+                MoPubLog.d("MoPubBrowser error: " + description);
             }
 
             @Override
@@ -184,12 +184,21 @@ private void enableCookies() {
     protected void onPause() {
         super.onPause();
         CookieSyncManager.getInstance().stopSync();
+        WebViews.onPause(mWebView, isFinishing());
     }
 
     @Override
     protected void onResume() {
         super.onResume();
         CookieSyncManager.getInstance().startSync();
+        WebViews.onResume(mWebView);
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        mWebView.destroy();
+        mWebView = null;
     }
 
     private View getMoPubBrowserView() {
@@ -241,4 +250,10 @@ private ImageButton getButton(final Drawable drawable) {
 
         return imageButton;
     }
+
+    @Deprecated
+    @VisibleForTesting
+    void setWebView(WebView webView) {
+        mWebView = webView;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPubLifecycleManager.java b/mopub-sdk/src/main/java/com/mopub/common/MoPubLifecycleManager.java
new file mode 100644
index 00000000..41394805
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPubLifecycleManager.java
@@ -0,0 +1,107 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import java.lang.ref.WeakReference;
+import java.util.HashSet;
+import java.util.Set;
+
+/**
+ * This class handles delegating lifecycle callback events to ads SDKs that require them.
+ */
+public class MoPubLifecycleManager implements LifecycleListener {
+    private static MoPubLifecycleManager sInstance;
+
+    @NonNull private final Set<LifecycleListener> mLifecycleListeners;
+    @NonNull private final WeakReference<Activity> mMainActivity;
+
+    private MoPubLifecycleManager(Activity mainActivity) {
+        mLifecycleListeners = new HashSet<LifecycleListener>();
+        mMainActivity = new WeakReference<Activity>(mainActivity);
+    }
+
+    @NonNull public static synchronized MoPubLifecycleManager getInstance(Activity mainActivity) {
+        if (sInstance == null) {
+            sInstance = new MoPubLifecycleManager(mainActivity);
+        }
+
+        return sInstance;
+    }
+
+    /**
+     * Adds a lifecycle listener to the manager. The manager takes ownership with a strong reference.
+     *
+     * @param listener the listener to add to the lifecycle manager.
+     */
+    public void addLifecycleListener(@Nullable LifecycleListener listener) {
+        // Get the instance or bail if not initialized.
+        if (listener == null) {
+            return;
+        }
+        if (mLifecycleListeners.add(listener)) {
+            Activity activity = mMainActivity.get();
+            if (activity != null) {
+                listener.onCreate(activity);
+                listener.onStart(activity);
+            }
+        }
+    }
+
+    @Override
+    public void onCreate(@NonNull final Activity activity) {
+        for (LifecycleListener lifecycleListener : mLifecycleListeners) {
+            lifecycleListener.onCreate(activity);
+        }
+    }
+
+    @Override
+    public void onStart(@NonNull final Activity activity) {
+        for (LifecycleListener lifecycleListener : mLifecycleListeners) {
+            lifecycleListener.onStart(activity);
+        }
+    }
+
+    @Override
+    public void onPause(@NonNull final Activity activity) {
+        for (LifecycleListener lifecycleListener : mLifecycleListeners) {
+            lifecycleListener.onPause(activity);
+        }
+    }
+
+    @Override
+    public void onResume(@NonNull final Activity activity) {
+        for (LifecycleListener lifecycleListener : mLifecycleListeners) {
+            lifecycleListener.onResume(activity);
+        }
+    }
+
+    @Override
+    public void onRestart(@NonNull final Activity activity) {
+        for (LifecycleListener lifecycleListener : mLifecycleListeners) {
+            lifecycleListener.onRestart(activity);
+        }
+    }
+
+    @Override
+    public void onStop(@NonNull final Activity activity) {
+        for (LifecycleListener lifecycleListener : mLifecycleListeners) {
+            lifecycleListener.onRestart(activity);
+        }
+    }
+
+    @Override
+    public void onDestroy(@NonNull final Activity activity) {
+        for (LifecycleListener lifecycleListener : mLifecycleListeners) {
+            lifecycleListener.onRestart(activity);
+        }
+    }
+
+    @Override
+    public void onBackPressed(@NonNull final Activity activity) {
+        for (LifecycleListener lifecycleListener : mLifecycleListeners) {
+            lifecycleListener.onBackPressed(activity);
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPubReward.java b/mopub-sdk/src/main/java/com/mopub/common/MoPubReward.java
new file mode 100644
index 00000000..85f0f3c2
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPubReward.java
@@ -0,0 +1,43 @@
+package com.mopub.common;
+
+import android.support.annotation.NonNull;
+
+/**
+ * Represents a reward to the user for completing a rewarded task like watching a video.
+ */
+public final class MoPubReward {
+    public static final String NO_REWARD_LABEL = "";
+    public static final int NO_REWARD_AMOUNT = -123;
+    private final boolean mSuccess;
+    private final @NonNull String mLabel;
+    private final int mAmount;
+
+    private MoPubReward(boolean success, @NonNull String label, int amount) {
+        mSuccess = success;
+        mLabel = label;
+        mAmount = amount;
+    }
+
+    @NonNull
+    public static MoPubReward failure() {
+        return new MoPubReward(false, NO_REWARD_LABEL, 0);
+    }
+
+    @NonNull
+    public static MoPubReward success(@NonNull final String rewardLabel, final int amount) {
+        return new MoPubReward(true, rewardLabel, amount);
+    }
+
+    public final boolean isSuccessful() {
+        return mSuccess;
+    }
+
+    @NonNull
+    public final String getLabel() {
+        return mLabel;
+    }
+
+    public final int getAmount() {
+        return mAmount;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/BaseEvent.java b/mopub-sdk/src/main/java/com/mopub/common/event/BaseEvent.java
index abe3b8b4..ef109074 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/event/BaseEvent.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/BaseEvent.java
@@ -1,22 +1,45 @@
 package com.mopub.common.event;
 
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
 import com.mopub.common.ClientMetadata;
+import com.mopub.common.VisibleForTesting;
 
 import java.text.SimpleDateFormat;
 import java.util.Date;
 
 import static com.mopub.common.ClientMetadata.MoPubNetworkType;
 
-abstract class BaseEvent {
+public abstract class BaseEvent {
+
+    public static enum ScribeCategory {
+        EXCHANGE_CLIENT_EVENT("exchange_client_event"),
+        EXCHANGE_CLIENT_ERROR("exchange_client_error");
+
+        private final String mScribeCategory;
+        ScribeCategory(String scribeCategory) {
+            mScribeCategory = scribeCategory;
+        }
+
+        public String getCategory() {
+            return mScribeCategory;
+        }
+    }
+
     public static enum SdkProduct {
         NONE(0),
         WEB_VIEW(1),
         NATIVE(2);
 
-        public final int mType;
+        private final int mType;
         SdkProduct(int type) {
             mType = type;
         }
+
+        public int getType() {
+            return mType;
+        }
     }
 
     public static enum AppPlatform {
@@ -24,32 +47,39 @@
         ANDROID(1),
         MOBILE_WEB(2);
 
-        public final int mType;
+        private final int mType;
         AppPlatform(int type) {
             mType = type;
         }
+
+        public int getType() {
+            return mType;
+        }
     }
 
-    private final String mEventName;
-    private final String mEventCategory;
-    private final SdkProduct mSdkProduct;
-    private final String mAdUnitId;
-    private final String mAdCreativeId;
-    private final String mAdType;
-    private final String mAdNetworkType;
-    private final Double mAdWidthPx;
-    private final Double mAdHeightPx;
-    private final Double mGeoLat;
-    private final Double mGeoLon;
-    private final Double mGeoAccuracy;
-    private final Double mPerformanceDurationMs;
-    private final String mRequestId;
-    private final Integer mRequestStatusCode;
-    private final String mRequestUri;
-    private final Integer mRequestRetries;
-    private final long mTimestampUtcMs;
-
-    BaseEvent(final Builder builder) {
+    @Nullable private ScribeCategory mScribeCategory;
+    @Nullable private final String mEventName;
+    @Nullable private final String mEventCategory;
+    @Nullable private final SdkProduct mSdkProduct;
+    @Nullable private final String mAdUnitId;
+    @Nullable private final String mAdCreativeId;
+    @Nullable private final String mAdType;
+    @Nullable private final String mAdNetworkType;
+    @Nullable private final Double mAdWidthPx;
+    @Nullable private final Double mAdHeightPx;
+    @Nullable private final Double mGeoLat;
+    @Nullable private final Double mGeoLon;
+    @Nullable private final Double mGeoAccuracy;
+    @Nullable private final Double mPerformanceDurationMs;
+    @Nullable private final String mRequestId;
+    @Nullable private final Integer mRequestStatusCode;
+    @Nullable private final String mRequestUri;
+    @Nullable private final Integer mRequestRetries;
+    @Nullable private final Long mTimestampUtcMs;
+    @Nullable private ClientMetadata mClientMetaData;
+
+    public BaseEvent(@NonNull final Builder builder) {
+        mScribeCategory = builder.mScribeCategory;
         mEventName = builder.mEventName;
         mEventCategory = builder.mEventCategory;
         mSdkProduct = builder.mSdkProduct;
@@ -68,6 +98,11 @@
         mRequestUri = builder.mRequestUri;
         mRequestRetries = builder.mRequestRetries;
         mTimestampUtcMs = System.currentTimeMillis();
+        mClientMetaData = ClientMetadata.getInstance();
+    }
+
+    public ScribeCategory getScribeCategory() {
+        return mScribeCategory;
     }
 
     public String getEventName() {
@@ -83,7 +118,7 @@ public SdkProduct getSdkProduct() {
     }
 
     public String getSdkVersion() {
-        return ClientMetadata.getInstance().getSdkVersion();
+        return mClientMetaData == null ? null : mClientMetaData.getSdkVersion();
     }
 
     public String getAdUnitId() {
@@ -115,39 +150,47 @@ public AppPlatform getAppPlatform() {
     }
 
     public String getAppName() {
-        return ClientMetadata.getInstance().getAppName();
+        return mClientMetaData == null ? null : mClientMetaData.getAppName();
     }
 
     public String getAppPackageName() {
-        return ClientMetadata.getInstance().getAppPackageName();
+        return mClientMetaData == null ? null : mClientMetaData.getAppPackageName();
     }
 
     public String getAppVersion() {
-        return ClientMetadata.getInstance().getAppVersion();
+        return mClientMetaData == null ? null : mClientMetaData.getAppVersion();
+    }
+
+    public String getClientAdvertisingId() {
+        return mClientMetaData == null ? null : mClientMetaData.getDeviceId();
+    }
+
+    public Boolean getClientDoNotTrack() {
+        return mClientMetaData == null ? null : mClientMetaData.isDoNotTrackSet();
     }
 
     public String getDeviceManufacturer() {
-        return ClientMetadata.getInstance().getDeviceManufacturer();
+        return mClientMetaData == null ? null : mClientMetaData.getDeviceManufacturer();
     }
 
     public String getDeviceModel() {
-        return ClientMetadata.getInstance().getDeviceModel();
+        return mClientMetaData == null ? null : mClientMetaData.getDeviceModel();
     }
 
     public String getDeviceProduct() {
-        return ClientMetadata.getInstance().getDeviceProduct();
+        return mClientMetaData == null ? null : mClientMetaData.getDeviceProduct();
     }
 
     public String getDeviceOsVersion() {
-        return ClientMetadata.getInstance().getDeviceOsVersion();
+        return mClientMetaData == null ? null : mClientMetaData.getDeviceOsVersion();
     }
 
     public Integer getDeviceScreenWidthPx() {
-        return ClientMetadata.getInstance().getDeviceScreenWidthPx();
+        return mClientMetaData == null ? null : mClientMetaData.getDeviceScreenWidthPx();
     }
 
     public Integer getDeviceScreenHeightPx() {
-        return ClientMetadata.getInstance().getDeviceScreenHeightPx();
+        return mClientMetaData == null ? null : mClientMetaData.getDeviceScreenHeightPx();
     }
 
     public Double getGeoLat() {
@@ -167,31 +210,31 @@ public Double getPerformanceDurationMs() {
     }
 
     public MoPubNetworkType getNetworkType() {
-        return ClientMetadata.getInstance().getActiveNetworkType();
+        return mClientMetaData == null ? null : mClientMetaData.getActiveNetworkType();
     }
 
     public String getNetworkOperatorCode() {
-        return ClientMetadata.getInstance().getNetworkOperator();
+        return mClientMetaData == null ? null : mClientMetaData.getNetworkOperator();
     }
 
     public String getNetworkOperatorName() {
-        return ClientMetadata.getInstance().getNetworkOperatorName();
+        return mClientMetaData == null ? null : mClientMetaData.getNetworkOperatorName();
     }
 
     public String getNetworkIsoCountryCode() {
-        return ClientMetadata.getInstance().getIsoCountryCode();
+        return mClientMetaData == null ? null : mClientMetaData.getIsoCountryCode();
     }
 
     public String getNetworkSimCode() {
-        return ClientMetadata.getInstance().getSimOperator();
+        return mClientMetaData == null ? null : mClientMetaData.getSimOperator();
     }
 
     public String getNetworkSimOperatorName() {
-        return ClientMetadata.getInstance().getSimOperatorName();
+        return mClientMetaData == null ? null : mClientMetaData.getSimOperatorName();
     }
 
     public String getNetworkSimIsoCountryCode() {
-        return ClientMetadata.getInstance().getSimIsoCountryCode();
+        return mClientMetaData == null ? null : mClientMetaData.getSimIsoCountryCode();
     }
 
     public String getRequestId() {
@@ -210,13 +253,14 @@ public Integer getRequestRetries() {
         return mRequestRetries;
     }
 
-    public long getTimestampUtcMs() {
+    public Long getTimestampUtcMs() {
         return mTimestampUtcMs;
     }
 
     @Override
     public String toString() {
         return  "BaseEvent\n" +
+                "ScribeCategory: " + getScribeCategory() + "\n" +
                 "EventName: " + getEventName() + "\n" +
                 "EventCategory: " + getEventCategory() + "\n" +
                 "SdkProduct: " + getSdkProduct() + "\n" +
@@ -255,26 +299,33 @@ public String toString() {
                 "TimestampUtcMs: " + new SimpleDateFormat().format(new Date(getTimestampUtcMs())) + "\n";
     }
 
+    @VisibleForTesting
+    void setClientMetaData(ClientMetadata clientMetaData) {
+        mClientMetaData = clientMetaData;
+    }
+
     static abstract class Builder {
-        private String mEventName;
-        private String mEventCategory;
-        private SdkProduct mSdkProduct;
-        private String mAdUnitId;
-        private String mAdCreativeId;
-        private String mAdType;
-        private String mAdNetworkType;
-        private Double mAdWidthPx;
-        private Double mAdHeightPx;
-        private Double mGeoLat;
-        private Double mGeoLon;
-        private Double mGeoAccuracy;
-        private Double mPerformanceDurationMs;
-        private String mRequestId;
-        private Integer mRequestStatusCode;
-        private String mRequestUri;
-        private Integer mRequestRetries;
-
-        public Builder(String eventName, String eventCategory) {
+        @Nullable private ScribeCategory mScribeCategory;
+        @Nullable private String mEventName;
+        @Nullable private String mEventCategory;
+        @Nullable private SdkProduct mSdkProduct;
+        @Nullable private String mAdUnitId;
+        @Nullable private String mAdCreativeId;
+        @Nullable private String mAdType;
+        @Nullable private String mAdNetworkType;
+        @Nullable private Double mAdWidthPx;
+        @Nullable private Double mAdHeightPx;
+        @Nullable private Double mGeoLat;
+        @Nullable private Double mGeoLon;
+        @Nullable private Double mGeoAccuracy;
+        @Nullable private Double mPerformanceDurationMs;
+        @Nullable private String mRequestId;
+        @Nullable private Integer mRequestStatusCode;
+        @Nullable private String mRequestUri;
+        @Nullable private Integer mRequestRetries;
+
+        public Builder(ScribeCategory scribeCategory, String eventName, String eventCategory) {
+            mScribeCategory = scribeCategory;
             mEventName = eventName;
             mEventCategory = eventCategory;
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/ErrorEvent.java b/mopub-sdk/src/main/java/com/mopub/common/event/ErrorEvent.java
index 666fb1dd..00652b0e 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/event/ErrorEvent.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/ErrorEvent.java
@@ -1,5 +1,7 @@
 package com.mopub.common.event;
 
+import android.support.annotation.Nullable;
+
 import java.io.PrintWriter;
 import java.io.StringWriter;
 
@@ -7,13 +9,13 @@
  * Immutable data class with error event data.
  */
 public class ErrorEvent extends BaseEvent {
-    private final String mErrorExceptionClassName;
-    private final String mErrorMessage;
-    private final String mErrorStackTrace;
-    private final String mErrorFileName;
-    private final String mErrorClassName;
-    private final String mErrorMethodName;
-    private final Integer mErrorLineNumber;
+    @Nullable private final String mErrorExceptionClassName;
+    @Nullable private final String mErrorMessage;
+    @Nullable private final String mErrorStackTrace;
+    @Nullable private final String mErrorFileName;
+    @Nullable private final String mErrorClassName;
+    @Nullable private final String mErrorMethodName;
+    @Nullable private final Integer mErrorLineNumber;
 
     private ErrorEvent(Builder builder) {
         super(builder);
@@ -69,16 +71,16 @@ public String toString() {
     }
 
     public static class Builder extends BaseEvent.Builder {
-        private String mErrorExceptionClassName;
-        private String mErrorMessage;
-        private String mErrorStackTrace;
-        private String mErrorFileName;
-        private String mErrorClassName;
-        private String mErrorMethodName;
-        private Integer mErrorLineNumber;
+        @Nullable private String mErrorExceptionClassName;
+        @Nullable private String mErrorMessage;
+        @Nullable private String mErrorStackTrace;
+        @Nullable private String mErrorFileName;
+        @Nullable private String mErrorClassName;
+        @Nullable private String mErrorMethodName;
+        @Nullable private Integer mErrorLineNumber;
 
         public Builder(String eventName, String eventCategory) {
-            super(eventName, eventCategory);
+            super(ScribeCategory.EXCHANGE_CLIENT_ERROR, eventName, eventCategory);
         }
 
         public Builder withErrorExceptionClassName(String errorExceptionClassName) {
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/Event.java b/mopub-sdk/src/main/java/com/mopub/common/event/Event.java
index 25aa306e..9edd13c8 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/event/Event.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/Event.java
@@ -10,7 +10,7 @@ private Event(Builder builder) {
 
     public static class Builder extends BaseEvent.Builder {
         public Builder(String eventName, String eventCategory) {
-            super(eventName, eventCategory);
+            super(ScribeCategory.EXCHANGE_CLIENT_EVENT, eventName, eventCategory);
         }
 
         @Override
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/EventDispatcher.java b/mopub-sdk/src/main/java/com/mopub/common/event/EventDispatcher.java
index 9ca390e4..9e362d64 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/event/EventDispatcher.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/EventDispatcher.java
@@ -11,13 +11,15 @@
     private final Iterable<EventRecorder> mEventRecorders;
     private final HandlerThread mHandlerThread;
     private final Handler mMessageHandler;
-
-    @VisibleForTesting
-    Handler.Callback mHandlerCallback;
+    private final Handler.Callback mHandlerCallback;
 
     @VisibleForTesting
     EventDispatcher(Iterable<EventRecorder> recorders, HandlerThread handlerThread) {
         mEventRecorders = recorders;
+
+        mHandlerThread = handlerThread;
+        mHandlerThread.start();
+
         mHandlerCallback = new Handler.Callback() {
             @Override
             public boolean handleMessage(final Message msg) {
@@ -31,12 +33,20 @@ public boolean handleMessage(final Message msg) {
                 return true;
             }
         };
-        mHandlerThread = handlerThread;
-        mHandlerThread.start();
         mMessageHandler = new Handler(mHandlerThread.getLooper(), mHandlerCallback);
     }
 
     void dispatch(BaseEvent event) {
         Message.obtain(mMessageHandler, 0, event).sendToTarget();
     }
+
+    @VisibleForTesting
+    Iterable<EventRecorder> getEventRecorders() {
+        return mEventRecorders;
+    }
+
+    @VisibleForTesting
+    Handler.Callback getHandlerCallback() {
+        return mHandlerCallback;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/EventSerializer.java b/mopub-sdk/src/main/java/com/mopub/common/event/EventSerializer.java
new file mode 100644
index 00000000..97af86f9
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/EventSerializer.java
@@ -0,0 +1,106 @@
+package com.mopub.common.event;
+
+import android.support.annotation.NonNull;
+
+import com.mopub.common.ClientMetadata;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.List;
+
+public class EventSerializer {
+
+    public JSONArray serializeAsJson(@NonNull List<BaseEvent> events) throws JSONException {
+        JSONArray jsonArray = new JSONArray();
+        for (BaseEvent event : events) {
+
+            // Note: adding null values to the JSONObject will remove the key value pair
+            JSONObject jsonObject = new JSONObject();
+
+            // Required Scribe Request Keys
+            jsonObject.put("_category_", event.getScribeCategory().getCategory());
+            jsonObject.put("ts", event.getTimestampUtcMs());
+
+            // Name Details
+            jsonObject.put("name", event.getEventName());
+            jsonObject.put("name_category", event.getEventCategory());
+
+            // SDK Details
+            BaseEvent.SdkProduct sdkProduct = event.getSdkProduct();
+            jsonObject.put("sdk_product", sdkProduct == null ? null : sdkProduct.getType());
+            jsonObject.put("sdk_version", event.getSdkVersion());
+
+            // Ad Details
+            jsonObject.put("ad_unit_id", event.getAdUnitId());
+            jsonObject.put("ad_creative_id", event.getAdCreativeId());
+            jsonObject.put("ad_type", event.getAdType());
+            jsonObject.put("ad_network_type", event.getAdNetworkType());
+            jsonObject.put("ad_width_px", event.getAdWidthPx());
+            jsonObject.put("ad_height_px", event.getAdHeightPx());
+
+            // App Details
+            BaseEvent.AppPlatform appPlatform = event.getAppPlatform();
+            jsonObject.put("app_platform", appPlatform == null ? null : appPlatform.getType());
+            jsonObject.put("app_name", event.getAppName());
+            jsonObject.put("app_package_name", event.getAppPackageName());
+            jsonObject.put("app_version", event.getAppVersion());
+
+            // Client Details
+            jsonObject.put("client_advertising_id", event.getClientAdvertisingId());
+            jsonObject.put("client_do_not_track", event.getClientDoNotTrack());
+
+            // Device Details
+            jsonObject.put("device_manufacturer", event.getDeviceManufacturer());
+            jsonObject.put("device_model", event.getDeviceModel());
+            jsonObject.put("device_product", event.getDeviceProduct());
+            jsonObject.put("device_os_version", event.getDeviceOsVersion());
+            jsonObject.put("device_screen_width_px", event.getDeviceScreenWidthPx());
+            jsonObject.put("device_screen_height_px", event.getDeviceScreenHeightPx());
+
+            // Geo Details
+            jsonObject.put("geo_lat", event.getGeoLat());
+            jsonObject.put("geo_lon", event.getGeoLon());
+            jsonObject.put("geo_accuracy_radius_meters", event.getGeoAccuracy());
+
+            // Performance Details
+            jsonObject.put("perf_duration_ms", event.getPerformanceDurationMs());
+
+            // Network Details
+            ClientMetadata.MoPubNetworkType moPubNetworkType = event.getNetworkType();
+            jsonObject.put("network_type", moPubNetworkType == null ? null : moPubNetworkType.getId());
+            jsonObject.put("network_operator_code", event.getNetworkOperatorCode());
+            jsonObject.put("network_operator_name", event.getNetworkOperatorName());
+            jsonObject.put("network_iso_country_code", event.getNetworkIsoCountryCode());
+            jsonObject.put("network_sim_code", event.getNetworkSimCode());
+            jsonObject.put("network_sim_operator_name", event.getNetworkSimOperatorName());
+            jsonObject.put("network_sim_iso_country_code", event.getNetworkSimIsoCountryCode());
+
+            // Request Details
+            jsonObject.put("req_id", event.getRequestId());
+            jsonObject.put("req_status_code", event.getRequestStatusCode());
+            jsonObject.put("req_uri", event.getRequestUri());
+            jsonObject.put("req_retries", event.getRequestRetries());
+
+            // Timestamp Details
+            jsonObject.put("timestamp_client", event.getTimestampUtcMs());
+
+            if (event instanceof ErrorEvent) {
+                ErrorEvent errorEvent = (ErrorEvent) event;
+                // Error Details
+                jsonObject.put("error_exception_class_name", errorEvent.getErrorExceptionClassName());
+                jsonObject.put("error_message", errorEvent.getErrorMessage());
+                jsonObject.put("error_stack_trace", errorEvent.getErrorStackTrace());
+                jsonObject.put("error_file_name", errorEvent.getErrorFileName());
+                jsonObject.put("error_class_name", errorEvent.getErrorClassName());
+                jsonObject.put("error_method_name", errorEvent.getErrorMethodName());
+                jsonObject.put("error_line_number", errorEvent.getErrorLineNumber());
+            }
+
+            jsonArray.put(jsonObject);
+        }
+
+        return jsonArray;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/MoPubEvents.java b/mopub-sdk/src/main/java/com/mopub/common/event/MoPubEvents.java
index f610473c..c2e327d5 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/event/MoPubEvents.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/MoPubEvents.java
@@ -10,6 +10,7 @@
  * Public interface used to record client events.
  */
 public class MoPubEvents {
+
     public enum Type {
         // Networking
         AD_REQUEST("ad_request"),
@@ -48,7 +49,8 @@ public static void setEventDispatcher(EventDispatcher dispatcher) {
         sEventDispatcher = dispatcher;
     }
 
-    private static EventDispatcher getDispatcher() {
+    @VisibleForTesting
+    static EventDispatcher getDispatcher() {
         EventDispatcher result = sEventDispatcher;
         if (result == null) {
             synchronized (MoPubEvents.class) {
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java b/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
index a3da48c9..ae29fd95 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
@@ -21,7 +21,6 @@
 import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
 
 public class Intents {
-    private static final String TWITTER_APPLICATION_DEEPLINK_URL = "twitter://timeline";
     private static final String PLAY_GOOGLE_COM = "play.google.com";
     private static final String MARKET_ANDROID_COM = "market.android.com";
     private static final String MARKET = "market";
@@ -109,10 +108,6 @@ public static boolean isDeepLink(final String url) {
         return isAppStoreUrl(url) || !isHttpUrl(url);
     }
 
-    public static boolean canHandleTwitterUrl(final Context context) {
-        return canHandleApplicationUrl(context, TWITTER_APPLICATION_DEEPLINK_URL, false);
-    }
-
     public static boolean canHandleApplicationUrl(final Context context, final String url) {
         return canHandleApplicationUrl(context, url, true);
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/MoPubCollections.java b/mopub-sdk/src/main/java/com/mopub/common/util/MoPubCollections.java
new file mode 100644
index 00000000..a83bec24
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/MoPubCollections.java
@@ -0,0 +1,15 @@
+package com.mopub.common.util;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import java.util.Collection;
+import java.util.Collections;
+
+public class MoPubCollections {
+    public static <T> void addAllNonNull(@NonNull final Collection<? super T> c,
+            @Nullable final T... a) {
+        Collections.addAll(c, a);
+        c.removeAll(Collections.singleton(null));
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Reflection.java b/mopub-sdk/src/main/java/com/mopub/common/util/Reflection.java
index bfb34e9a..3efa8598 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Reflection.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Reflection.java
@@ -1,5 +1,11 @@
 package com.mopub.common.util;
 
+import android.support.annotation.NonNull;
+
+import com.mopub.common.Preconditions;
+
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.List;
@@ -88,4 +94,17 @@ public static boolean classFound(final String className) {
             return false;
         }
     }
+
+    public static <T> T instantiateClassWithEmptyConstructor(@NonNull final String className,
+            @NonNull final Class<? extends T> superclass)
+            throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException,
+            InvocationTargetException, InstantiationException, NullPointerException {
+        Preconditions.checkNotNull(className);
+
+        final Class<? extends T> clazz = Class.forName(className).asSubclass(superclass);
+        final Constructor<? extends T> constructor = clazz.getDeclaredConstructor((Class[]) null);
+        constructor.setAccessible(true);
+
+        return constructor.newInstance();
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoader.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoader.java
index f8d0c9b3..3b0e073c 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoader.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoader.java
@@ -2,12 +2,13 @@
 
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
+
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.network.AdResponse;
 
 import java.lang.ref.WeakReference;
-import java.util.*;
+import java.util.Map;
 
 abstract class AdLoader {
 
@@ -48,15 +49,19 @@ public CustomEventAdLoader(AdViewController adViewController,
         @Override
         void load() {
             AdViewController adViewController = mWeakAdViewController.get();
-
             if (adViewController == null
                     || adViewController.isDestroyed()
                     || TextUtils.isEmpty(mCustomEventClassName)) {
                 return;
             }
-
             adViewController.setNotLoading();
-            adViewController.getMoPubView().loadCustomEvent(mCustomEventClassName, mServerExtras);
+
+            final MoPubView moPubView = adViewController.getMoPubView();
+            if (moPubView == null) {
+                MoPubLog.d("Can't load an ad in this ad view because it was destroyed.");
+                return;
+            }
+            moPubView.loadCustomEvent(mCustomEventClassName, mServerExtras);
         }
 
         @VisibleForTesting
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java
new file mode 100644
index 00000000..10d6625b
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java
@@ -0,0 +1,199 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.Preconditions;
+import com.mopub.network.AdRequest;
+
+import java.util.Map;
+import java.util.TreeMap;
+
+public class AdRequestStatusMapping {
+    @NonNull
+    private final Map<String, AdRequestStatus> mAdUnitToAdRequestStatus;
+
+    public AdRequestStatusMapping() {
+        mAdUnitToAdRequestStatus = new TreeMap<String, AdRequestStatus>();
+    }
+
+    void markFail(@NonNull final String adUnitId) {
+        mAdUnitToAdRequestStatus.remove(adUnitId);
+    }
+
+    void markLoading(@NonNull final String adUnitId) {
+        mAdUnitToAdRequestStatus.put(adUnitId, new AdRequestStatus(LoadingStatus.LOADING));
+    }
+
+    void markLoaded(
+            @NonNull final String adUnitId,
+            @Nullable final String failUrlString,
+            @Nullable final String impressionTrackerUrlString,
+            @Nullable final String clickTrackerUrlString) {
+        mAdUnitToAdRequestStatus.put(adUnitId, new AdRequestStatus(
+                LoadingStatus.LOADED,
+                failUrlString,
+                impressionTrackerUrlString,
+                clickTrackerUrlString));
+    }
+
+    void markPlayed(@NonNull final String adUnitId) {
+        // If possible, attempt to keep the URL fields in AdRequestStatus
+        if (mAdUnitToAdRequestStatus.containsKey(adUnitId)) {
+            final AdRequestStatus adRequestStatus = mAdUnitToAdRequestStatus.get(adUnitId);
+            adRequestStatus.setStatus(LoadingStatus.PLAYED);
+        } else {
+            mAdUnitToAdRequestStatus.put(adUnitId, new AdRequestStatus(LoadingStatus.PLAYED));
+        }
+    }
+
+    boolean canPlay(@NonNull final String adUnitId) {
+        final AdRequestStatus adRequestStatus = mAdUnitToAdRequestStatus.get(adUnitId);
+        return adRequestStatus != null
+            && LoadingStatus.LOADED.equals(adRequestStatus.getStatus());
+    }
+
+    boolean isLoading(@NonNull final String adUnitId) {
+        if (!mAdUnitToAdRequestStatus.containsKey(adUnitId)) {
+            return false;
+        }
+
+        return mAdUnitToAdRequestStatus.get(adUnitId).getStatus() == LoadingStatus.LOADING;
+    }
+
+    @Nullable String getFailoverUrl(@NonNull final String adUnitId) {
+        if (!mAdUnitToAdRequestStatus.containsKey(adUnitId)) {
+            return null;
+        }
+
+        return mAdUnitToAdRequestStatus.get(adUnitId).getFailurl();
+    }
+
+    @Nullable String getImpressionTrackerUrlString(@NonNull final String adUnitId) {
+        if (!mAdUnitToAdRequestStatus.containsKey(adUnitId)) {
+            return null;
+        }
+
+        return mAdUnitToAdRequestStatus.get(adUnitId).getImpressionUrl();
+    }
+
+    @Nullable String getClickTrackerUrlString(@NonNull final String adUnitId) {
+        if (!mAdUnitToAdRequestStatus.containsKey(adUnitId)) {
+            return null;
+        }
+
+        return mAdUnitToAdRequestStatus.get(adUnitId).getClickUrl();
+    }
+
+    void clearImpressionUrl(@NonNull final String adUnitId) {
+        if (mAdUnitToAdRequestStatus.containsKey(adUnitId)) {
+            mAdUnitToAdRequestStatus.get(adUnitId).setImpressionUrl(null);
+        }
+    }
+
+    void clearClickUrl(@NonNull final String adUnitId) {
+        if (mAdUnitToAdRequestStatus.containsKey(adUnitId)) {
+            mAdUnitToAdRequestStatus.get(adUnitId).setClickUrl(null);
+        }
+    }
+
+    private static enum LoadingStatus { LOADING, LOADED, PLAYED }
+    private static class AdRequestStatus {
+        @NonNull
+        private LoadingStatus mLoadingStatus;
+        @Nullable
+        private String mFailUrl;
+        @Nullable
+        private String mImpressionUrl;
+        @Nullable
+        private String mClickUrl;
+
+        public AdRequestStatus(@NonNull final LoadingStatus loadingStatus) {
+            this(loadingStatus, null, null, null);
+        }
+
+        public AdRequestStatus(
+                @NonNull final LoadingStatus loadingStatus,
+                @Nullable final String failUrl,
+                @Nullable final String impressionUrl,
+                @Nullable final String clickUrl) {
+            Preconditions.checkNotNull(loadingStatus);
+
+            mLoadingStatus = loadingStatus;
+            mFailUrl = failUrl;
+            mImpressionUrl = impressionUrl;
+            mClickUrl = clickUrl;
+        }
+
+        @NonNull
+        private LoadingStatus getStatus() {
+            return mLoadingStatus;
+        }
+
+        private void setStatus(@NonNull final LoadingStatus loadingStatus) {
+            mLoadingStatus = loadingStatus;
+        }
+
+        @Nullable
+        private String getFailurl() {
+            return mFailUrl;
+        }
+
+        @Nullable
+        private String getImpressionUrl() {
+            return mImpressionUrl;
+        }
+
+        private void setImpressionUrl(@Nullable final String impressionUrl) {
+            mImpressionUrl = impressionUrl;
+        }
+
+        @Nullable
+        private String getClickUrl() {
+            return mClickUrl;
+        }
+
+        private void setClickUrl(@Nullable final String clickUrl) {
+            mClickUrl = clickUrl;
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            if (o == null) {
+                return false;
+            }
+
+            if (this == o) {
+                return true;
+            }
+
+            if (!(o instanceof AdRequestStatus)) {
+                return false;
+            }
+
+            final AdRequestStatus that = (AdRequestStatus) o;
+
+            return this.mLoadingStatus.equals(that.mLoadingStatus) &&
+                    TextUtils.equals(this.mFailUrl, that.mFailUrl) &&
+                    TextUtils.equals(this.mImpressionUrl, that.mImpressionUrl) &&
+                    TextUtils.equals(this.mClickUrl, that.mClickUrl);
+        }
+
+        @Override
+        public int hashCode() {
+            int result = 29;
+            result = 31 * result + mLoadingStatus.ordinal();
+            result = 31 * result + (mFailUrl != null
+                    ? mFailUrl.hashCode()
+                    : 0);
+            result = 31 * result + (mImpressionUrl != null
+                    ? mImpressionUrl.hashCode()
+                    : 0);
+            result = 31 * result + (mClickUrl != null
+                    ? mClickUrl.hashCode()
+                    : 0);
+            return result;
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
index f0a5794d..9f9b7cf3 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -41,7 +41,6 @@
 import static com.mopub.network.MoPubNetworkError.Reason.WARMING_UP;
 
 public class AdViewController {
-    static final int MINIMUM_REFRESH_TIME_MILLISECONDS = 10000;  // 10 seconds
     static final int DEFAULT_REFRESH_TIME_MILLISECONDS = 60000;  // 1 minute
     static final int MAX_REFRESH_TIME_MILLISECONDS = 600000; // 10 minutes
     static final double BACKOFF_FACTOR = 1.5;
@@ -54,6 +53,8 @@
 
     private final Context mContext;
     private final long mBroadcastIdentifier;
+
+    @Nullable
     private MoPubView mMoPubView;
     private final WebViewAdUrlGenerator mUrlGenerator;
 
@@ -132,10 +133,7 @@ void onAdLoadSuccess(@NonNull final AdResponse adResponse) {
         // Do other ad loading setup. See AdFetcher & AdLoadTask.
         mTimeoutMilliseconds = mAdResponse.getAdTimeoutMillis() == null
                 ? mTimeoutMilliseconds : mAdResponse.getAdTimeoutMillis();
-        Integer refreshTime = mAdResponse.getRefreshTimeMillis();
-        if (refreshTime != null) {
-            mRefreshTimeMillis = refreshTime;
-        }
+        mRefreshTimeMillis = mAdResponse.getRefreshTimeMillis();
         setNotLoading();
 
         // Get our custom event from the ad response and load into the view.
@@ -167,6 +165,7 @@ void onAdLoadError(final VolleyError error) {
         adDidFail(errorCode);
     }
 
+    @Nullable
     public MoPubView getMoPubView() {
         return mMoPubView;
     }
@@ -266,7 +265,7 @@ public String getAdUnitId() {
         return mAdUnitId;
     }
 
-    public void setAdUnitId(String adUnitId) {
+    public void setAdUnitId(@NonNull String adUnitId) {
         mAdUnitId = adUnitId;
     }
 
@@ -411,8 +410,16 @@ void registerClick() {
     }
 
     void fetchAd(String url) {
+        MoPubView moPubView = getMoPubView();
+        if (moPubView == null) {
+            MoPubLog.d("Can't load an ad in this ad view because it was destroyed.");
+            setNotLoading();
+            return;
+        }
+
         AdRequest adRequest = new AdRequest(url,
-                mMoPubView.getAdFormat(),
+                moPubView.getAdFormat(),
+                mAdUnitId,
                 mAdListener
         );
         RequestQueue requestQueue = Networking.getRequestQueue(mContext);
@@ -436,8 +443,14 @@ String generateAdUrl() {
     void adDidFail(MoPubErrorCode errorCode) {
         MoPubLog.i("Ad failed to load.");
         setNotLoading();
+
+        MoPubView moPubView = getMoPubView();
+        if (moPubView == null) {
+            return;
+        }
+
         scheduleRefreshTimerIfEnabled();
-        getMoPubView().adFailed(errorCode);
+        moPubView.adFailed(errorCode);
     }
 
     void scheduleRefreshTimerIfEnabled() {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
index f609917d..d9ab5587 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
@@ -9,6 +9,7 @@
 import android.view.ViewGroup;
 import android.widget.RelativeLayout;
 import android.widget.VideoView;
+
 import com.mopub.common.logging.MoPubLog;
 
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
index da484a36..2ff7a2cf 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
@@ -7,6 +7,7 @@
 import android.view.View;
 
 import com.mopub.common.AdReport;
+import com.mopub.common.Constants;
 import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
@@ -22,7 +23,7 @@
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 
 public class CustomEventBannerAdapter implements CustomEventBannerListener {
-    public static final int DEFAULT_BANNER_TIMEOUT_DELAY = 10000;
+    public static final int DEFAULT_BANNER_TIMEOUT_DELAY = Constants.TEN_SECONDS_MILLIS;
     private boolean mInvalidated;
     private MoPubView mMoPubView;
     private Context mContext;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
index 65aceb03..e9139058 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
@@ -6,6 +6,7 @@
 import android.support.annotation.Nullable;
 
 import com.mopub.common.AdReport;
+import com.mopub.common.Constants;
 import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
@@ -21,7 +22,7 @@
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 
 public class CustomEventInterstitialAdapter implements CustomEventInterstitialListener {
-    public static final int DEFAULT_INTERSTITIAL_TIMEOUT_DELAY = 30000;
+    public static final int DEFAULT_INTERSTITIAL_TIMEOUT_DELAY = Constants.THIRTY_SECONDS_MILLIS;
 
     private final MoPubInterstitial mMoPubInterstitial;
     private boolean mInvalidated;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
new file mode 100644
index 00000000..266472ab
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
@@ -0,0 +1,124 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MoPubLifecycleManager;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+
+import java.util.Map;
+
+/**
+ *
+ */
+public abstract class CustomEventRewardedVideo {
+    /**
+     * This marker interface is used to indicate that an object is a listener for a 3rd party SDKs
+     * rewarded video system.
+     */
+    @VisibleForTesting
+    protected static interface CustomEventRewardedVideoListener {}
+
+    /**
+     * Called by the {@link MoPubRewardedVideoManager} after loading the custom event.
+     */
+    @Nullable
+    @VisibleForTesting
+    protected abstract CustomEventRewardedVideoListener getVideoListenerForSdk();
+
+    /**
+     * Provides a {@link LifecycleListener} if the custom event's ad network wishes to be notified of
+     * activity lifecycle events in the application.
+     *
+     * @return a LifecycleListener. May be null.
+     */
+    @Nullable
+    @VisibleForTesting
+    protected abstract LifecycleListener getLifecycleListener();
+
+    /**
+     * Called by the {@link MoPubRewardedVideoManager} after loading the custom event.
+     * This should return the "ad unit id", "zone id" or similar identifier for the network.
+     * May be empty if the network does not have anything more specific than an application ID.
+     *
+     * @return the id string for this ad unit with the ad network.
+     */
+    @NonNull
+    protected abstract String getAdNetworkId();
+
+    /**
+     * Called to when the custom event is no longer used. Implementers should cancel any
+     * pending requests. The initialized SDK may be reused by another CustomEvent instance
+     * and should not be shut down or cleaned up.
+     */
+    protected abstract void onInvalidate();
+
+    /**
+     * The MoPub ad loading system calls this after MoPub indicates that this custom event should
+     * be loaded.
+     *
+     * @param launcherActivity the "main activity" of the app. Useful for initializing sdks.
+     * @param localExtras
+     * @param serverExtras
+     */
+    final void loadCustomEvent(@NonNull Activity launcherActivity,
+            @NonNull Map<String, Object> localExtras,
+            @NonNull Map<String, String> serverExtras) {
+        try {
+            if (checkAndInitializeSdk(launcherActivity, localExtras, serverExtras)) {
+                MoPubLifecycleManager.getInstance(launcherActivity).addLifecycleListener(getLifecycleListener());
+            }
+            loadWithSdkInitialized(launcherActivity, localExtras, serverExtras);
+        } catch (Exception e) {
+            MoPubLog.e(e.getMessage());
+        }
+    }
+
+    /**
+     * Sets up the 3rd party ads SDK if it needs configuration. Extenders should use this
+     * to do any static initialization the first time this method is run by any class instance.
+     * From then on, the SDK should be reused without initialization.
+     *
+     * @return true if the SDK performed initialization.
+     */
+    protected abstract boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
+            @NonNull Map<String, Object> localExtras,
+            @NonNull Map<String, String> serverExtras)
+            throws Exception;
+
+    /**
+     * Runs the ad-loading logic for the 3rd party SDK. localExtras & serverExtras should together
+     * contain all the data needed to load an ad.
+     *
+     * Implementers should also use this method (or checkAndInitializeSdk)
+     * to register a listener for their SDK, wrap it in a
+     * {@link com.mopub.mobileads.CustomEventRewardedVideo.CustomEventRewardedVideoListener}
+     *
+     * This method should not call any {@link MoPubRewardedVideoManager} event methods directly
+     * (onAdLoadSuccess, etc). Instead the SDK delegate/listener should call these methods.
+     *
+     * @param activity the "main activity" of the app. Useful for initializing sdks.
+     * @param localExtras
+     * @param serverExtras
+     */
+    protected abstract void loadWithSdkInitialized(@NonNull Activity activity,
+            @NonNull Map<String, Object> localExtras,
+            @NonNull Map<String, String> serverExtras)
+            throws Exception;
+
+    /**
+     * Implementers should query the 3rd party SDK for whether there is a video available for the
+     * 3rd party SDK & ID represented by the custom event.
+     *
+     * @return true iff a video is available to play.
+     */
+    protected abstract boolean hasVideoAvailable();
+
+    /**
+     * Implementers should now play the rewarded video for this custom event.
+     */
+    protected abstract void showVideo();
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
index 76210e87..78795c1b 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
@@ -1,25 +1,15 @@
 package com.mopub.mobileads;
 
-import android.annotation.TargetApi;
 import android.content.Context;
 import android.os.Handler;
-import android.webkit.JavascriptInterface;
 
 import com.mopub.common.AdReport;
 
-import static com.mopub.common.util.VersionCode.HONEYCOMB;
-import static com.mopub.common.util.VersionCode.currentApiLevel;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 
 public class HtmlInterstitialWebView extends BaseHtmlWebView {
     private Handler mHandler;
 
-    protected static final String MOPUB_JS_INTERFACE_NAME = "mopubUriInterface";
-
-    interface MoPubUriJavascriptFireFinishLoadListener {
-        abstract void onInterstitialLoaded();
-    }
-
     public HtmlInterstitialWebView(Context context, AdReport adReport) {
         super(context, adReport);
 
@@ -32,61 +22,12 @@ public void init(final CustomEventInterstitialListener customEventInterstitialLi
         HtmlInterstitialWebViewListener htmlInterstitialWebViewListener = new HtmlInterstitialWebViewListener(customEventInterstitialListener);
         HtmlWebViewClient htmlWebViewClient = new HtmlWebViewClient(htmlInterstitialWebViewListener, this, clickthroughUrl, redirectUrl);
         setWebViewClient(htmlWebViewClient);
-
-        addMoPubUriJavascriptInterface(new MoPubUriJavascriptFireFinishLoadListener() {
-            @Override
-            public void onInterstitialLoaded() {
-                if (!mIsDestroyed) {
-                    customEventInterstitialListener.onInterstitialLoaded();
-                }
-            }
-        });
     }
 
     private void postHandlerRunnable(Runnable r) {
         mHandler.post(r);
     }
 
-    /*
-     * XXX (2/15/12): This is a workaround for a problem on ICS devices where
-     * WebViews with layout height WRAP_CONTENT can mysteriously render with
-     * zero height. This seems to happen when calling loadData() with HTML that
-     * sets window.location during its "onload" event. We use loadData() when
-     * displaying interstitials, and our creatives use window.location to
-     * communicate ad loading status to AdViews. This results in zero-height
-     * interstitials. We counteract this by using a Javascript interface object
-     * to signal loading status, rather than modifying window.location.
-     */
-    void addMoPubUriJavascriptInterface(final MoPubUriJavascriptFireFinishLoadListener moPubUriJavascriptFireFinishLoadListener) {
-        final class MoPubUriJavascriptInterface {
-            // This method appears to be unused, since it will only be called from JavaScript.
-            @SuppressWarnings("unused")
-            @JavascriptInterface
-            public boolean fireFinishLoad() {
-                HtmlInterstitialWebView.this.postHandlerRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        moPubUriJavascriptFireFinishLoadListener.onInterstitialLoaded();
-                    }
-                });
-
-                return true;
-            }
-        }
-
-        addJavascriptInterface(new MoPubUriJavascriptInterface(), MOPUB_JS_INTERFACE_NAME);
-    }
-
-    @TargetApi(11)
-    @Override
-    public void destroy() {
-        if (currentApiLevel().isAtLeast(HONEYCOMB)) {
-            removeJavascriptInterface(MOPUB_JS_INTERFACE_NAME);
-        }
-
-        super.destroy();
-    }
-
     static class HtmlInterstitialWebViewListener implements HtmlWebViewListener {
         private final CustomEventInterstitialListener mCustomEventInterstitialListener;
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
index 50781c27..9e165d54 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
@@ -9,6 +9,7 @@
 import android.support.annotation.Nullable;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
+
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java
index 1a1db4ec..92d60c75 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java
@@ -56,13 +56,6 @@ static Intent createIntent(Context context, String htmlData, AdReport adReport,
     static void preRenderHtml(final Context context, final AdReport adReport, final CustomEventInterstitialListener customEventInterstitialListener, String htmlData) {
         HtmlInterstitialWebView dummyWebView = HtmlInterstitialWebViewFactory.create(context, adReport, customEventInterstitialListener, false, null, null);
         dummyWebView.enablePlugins(false);
-
-        dummyWebView.addMoPubUriJavascriptInterface(new HtmlInterstitialWebView.MoPubUriJavascriptFireFinishLoadListener() {
-            @Override
-            public void onInterstitialLoaded() {
-                customEventInterstitialListener.onInterstitialLoaded();
-            }
-        });
         dummyWebView.setWebViewClient(new WebViewClient() {
             @Override
             public boolean shouldOverrideUrlLoading(WebView view, String url) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubErrorCode.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
index a858a746..e6d13749 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
@@ -15,6 +15,9 @@
     VIDEO_CACHE_ERROR("Error creating a cache to store downloaded videos."),
     VIDEO_DOWNLOAD_ERROR("Error downloading video."),
 
+    VIDEO_NOT_AVAILABLE("No video loaded for ad unit"),
+    VIDEO_PLAYBACK_ERROR("Error playing a video."),
+
     UNSPECIFIED("Unspecified error.");
     
     private final String message;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java
new file mode 100644
index 00000000..50d4f927
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java
@@ -0,0 +1,45 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+
+import com.mopub.common.MoPubReward;
+
+import java.util.Set;
+
+/**
+ * Listener for rewarded video events. Implementers of this interface should be long-lived.
+ */
+public interface MoPubRewardedVideoListener {
+
+    /**
+     * Called when the adUnitId has loaded. At this point you should be able to call
+     * {@link com.mopub.common.MoPub#showRewardedVideo(String)} to show the video.
+     */
+    public void onRewardedVideoLoadSuccess(@NonNull String adUnitId);
+
+    /**
+     * Called when a video fails to load for the given ad unit id. The provided error code will
+     * give more insight into the reason for the failure to load.
+     */
+    public void onRewardedVideoLoadFailure(@NonNull String adUnitId, @NonNull MoPubErrorCode errorCode);
+
+    /**
+     * Called when a rewarded video starts playing.
+     */
+    public void onRewardedVideoStarted(@NonNull String adUnitId);
+
+    /**
+     * Called when there is an error during video playback.
+     */
+    public void onRewardedVideoPlaybackError(@NonNull String adUnitId, @NonNull MoPubErrorCode errorCode);
+
+    /**
+     * Called when a rewarded video is closed. At this point your application should resume.
+     */
+    public void onRewardedVideoClosed(@NonNull String adUnitId);
+
+    /**
+     * Called when a rewarded video is completed and the user should be rewarded.
+     */
+    public void onRewardedVideoCompleted(@NonNull Set<String> adUnitIds, @NonNull MoPubReward reward);
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
new file mode 100644
index 00000000..f0473b5b
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
@@ -0,0 +1,449 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.AdFormat;
+import com.mopub.common.AdUrlGenerator;
+import com.mopub.common.Constants;
+import com.mopub.common.DataKeys;
+import com.mopub.common.LocationService;
+import com.mopub.common.MediationSettings;
+import com.mopub.common.MoPub;
+import com.mopub.common.MoPubReward;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.MoPubCollections;
+import com.mopub.common.util.Reflection;
+import com.mopub.network.AdRequest;
+import com.mopub.network.AdResponse;
+import com.mopub.network.MoPubNetworkError;
+import com.mopub.network.Networking;
+import com.mopub.network.TrackingRequest;
+import com.mopub.volley.RequestQueue;
+import com.mopub.volley.VolleyError;
+
+import java.lang.ref.WeakReference;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeMap;
+
+public class MoPubRewardedVideoManager {
+    private static MoPubRewardedVideoManager sInstance;
+    private static final int DEFAULT_LOAD_TIMEOUT = Constants.THIRTY_SECONDS_MILLIS;
+
+    @NonNull private WeakReference<Activity> mMainActivity;
+    @NonNull private final Context mContext;
+    @NonNull private final AdRequestStatusMapping mAdRequestStatus;
+    @NonNull private final RewardedVideoData mRewardedVideoData;
+    private MoPubRewardedVideoListener mVideoListener;
+    
+    @NonNull private final Set<MediationSettings> mGlobalMediationSettings;
+    @NonNull private final Map<String, Set<MediationSettings>> mInstanceMediationSettings;
+
+    @NonNull private final Handler mCustomEventTimeoutHandler;
+    @NonNull private final Map<String, Runnable> mTimeoutMap;
+
+    public static class RewardedVideoRequestListener implements AdRequest.Listener {
+        public final String adUnitId;
+        private final MoPubRewardedVideoManager mVideoManager;
+
+        public RewardedVideoRequestListener(MoPubRewardedVideoManager videoManager, String adUnitId) {
+            this.adUnitId = adUnitId;
+            this.mVideoManager = videoManager;
+        }
+
+        @Override
+        public void onSuccess(final AdResponse response) {
+            mVideoManager.onAdSuccess(response, adUnitId);
+        }
+
+        @Override
+        public void onErrorResponse(final VolleyError volleyError) {
+            mVideoManager.onAdError(volleyError, adUnitId);
+        }
+    }
+
+    private MoPubRewardedVideoManager(@NonNull Activity mainActivity, MediationSettings... mediationSettings) {
+        mMainActivity = new WeakReference<Activity>(mainActivity);
+        mContext = mainActivity.getApplicationContext();
+        mRewardedVideoData = new RewardedVideoData();
+
+        mGlobalMediationSettings = new HashSet<MediationSettings>();
+        MoPubCollections.addAllNonNull(mGlobalMediationSettings, mediationSettings);
+        mInstanceMediationSettings = new HashMap<String, Set<MediationSettings>>();
+        mCustomEventTimeoutHandler = new Handler();
+        mTimeoutMap = new HashMap<String, Runnable>();
+        
+        mAdRequestStatus = new AdRequestStatusMapping();
+    }
+
+    public static synchronized void init(@NonNull Activity mainActivity, MediationSettings... mediationSettings) {
+        if (sInstance == null) {
+            sInstance = new MoPubRewardedVideoManager(mainActivity, mediationSettings);
+        } else {
+            MoPubLog.e("Tried to call initializeRewardedVideo more than once. Only the first " +
+                    "initialization call has any effect.");
+        }
+    }
+
+    public static void updateActivity(@NonNull Activity activity) {
+        if (sInstance != null) {
+            sInstance.mMainActivity = new WeakReference<Activity>(activity);
+        } else {
+            logErrorNotInitialized();
+        }
+    }
+
+    /**
+     * Returns a global {@link MediationSettings} object of the type 'clazz', if one is registered.
+     * This method will only return an object if its type is identical to 'clazz', not if it is a
+     * subtype.
+     *
+     * @param clazz the exact Class of the {@link MediationSettings} instance to retrieve
+     * @return an instance of Class<T> or null if none is registered.
+     */
+    @Nullable
+    public static <T extends MediationSettings> T getGlobalMediationSettings(@NonNull final Class<T> clazz) {
+        if (sInstance == null) {
+            logErrorNotInitialized();
+            return null;
+        }
+
+        for (final MediationSettings mediationSettings : sInstance.mGlobalMediationSettings) {
+            // The two classes must be of exactly equal types
+            if (clazz.equals(mediationSettings.getClass())) {
+                return clazz.cast(mediationSettings);
+            }
+        }
+
+        return null;
+    }
+
+    /**
+     * Returns an instance {@link MediationSettings} object of the type 'clazz', if one is
+     * registered. This method will only return an object if its type is identical to 'clazz', not
+     * if it is a subtype.
+     *
+     * @param clazz the exact Class of the {@link MediationSettings} instance to retrieve
+     * @param adUnitId String identifier used to obtain the appropriate instance MediationSettings
+     * @return an instance of Class<T> or null if none is registered.
+     */
+    @Nullable
+    public static <T extends MediationSettings> T getInstanceMediationSettings(
+            @NonNull final Class<T> clazz, @NonNull final String adUnitId) {
+        if (sInstance == null) {
+            logErrorNotInitialized();
+            return null;
+        }
+
+        final Set<MediationSettings> instanceMediationSettings =
+                sInstance.mInstanceMediationSettings.get(adUnitId);
+        if (instanceMediationSettings == null) {
+            return null;
+        }
+
+        for (final MediationSettings mediationSettings : instanceMediationSettings) {
+            // The two classes must be of exactly equal types
+            if (clazz.equals(mediationSettings.getClass())) {
+                return clazz.cast(mediationSettings);
+            }
+        }
+
+        return null;
+    }
+
+    /**
+     * Sets the {@link MoPubRewardedVideoListener} that will receive events from the
+     * rewarded video system. Set this to null to stop receiving event callbacks.
+     */
+    public static void setVideoListener(@Nullable MoPubRewardedVideoListener listener) {
+        if (sInstance != null) {
+            sInstance.mVideoListener = listener;
+        } else {
+            logErrorNotInitialized();
+        }
+    }
+
+    /**
+     * Builds an AdRequest for the given adUnitId and adds it to the singleton RequestQueue. This
+     * method will not make a new request if there is already a video loading for this adUnitId.
+     *
+     * @param adUnitId MoPub adUnitId String
+     * @param mediationSettings Optional instance-level MediationSettings to associate with the
+     *                          above adUnitId.
+     */
+    public static void loadVideo(@NonNull String adUnitId, @Nullable final MediationSettings... mediationSettings) {
+        if (sInstance == null) {
+            logErrorNotInitialized();
+            return;
+        }
+
+        // If any instance MediationSettings have been specified, update the internal map.
+        // Note: This always clears the MediationSettings for the ad unit, whether or not any
+        // MediationSettings have been provided.
+        final Set<MediationSettings> newInstanceMediationSettings = new HashSet<MediationSettings>();
+        MoPubCollections.addAllNonNull(newInstanceMediationSettings, mediationSettings);
+        sInstance.mInstanceMediationSettings.put(adUnitId, newInstanceMediationSettings);
+
+        final AdUrlGenerator urlGenerator = new WebViewAdUrlGenerator(sInstance.mContext, false);
+        final String adUrlString = urlGenerator.withAdUnitId(adUnitId)
+                .withLocation(
+                        LocationService.getLastKnownLocation(
+                                sInstance.mContext,
+                                MoPub.getLocationPrecision(),
+                                MoPub.getLocationAwareness()
+                        )
+                )
+                .generateUrlString(Constants.HOST);
+
+        loadVideo(adUnitId, adUrlString);
+    }
+
+    private static void loadVideo(@NonNull String adUnitId, @NonNull String adUrlString) {
+        if (sInstance == null) {
+            logErrorNotInitialized();
+            return;
+        }
+
+        if (sInstance.mAdRequestStatus.isLoading(adUnitId)) {
+            MoPubLog.d(String.format(Locale.US, "Did not queue rewarded video request for ad " +
+                    "unit %s. A request is already pending.", adUnitId));
+            return;
+        }
+
+        // Issue MoPub request
+        final AdRequest request = new AdRequest(
+                adUrlString,
+                AdFormat.REWARDED_VIDEO,
+                adUnitId,
+                new RewardedVideoRequestListener(sInstance, adUnitId)
+        );
+        final RequestQueue requestQueue = Networking.getRequestQueue(sInstance.mContext);
+        requestQueue.add(request);
+        sInstance.mAdRequestStatus.markLoading(adUnitId);
+    }
+
+    public static boolean hasVideo(@NonNull String adUnitId) {
+        if (sInstance != null) {
+            final CustomEventRewardedVideo customEvent = sInstance.mRewardedVideoData.getCustomEvent(adUnitId);
+            return isPlayable(adUnitId, customEvent);
+        } else {
+            logErrorNotInitialized();
+            return false;
+        }
+    }
+
+    public static void showVideo(@NonNull String adUnitId) {
+        if (sInstance != null) {
+            final CustomEventRewardedVideo customEvent = sInstance.mRewardedVideoData.getCustomEvent(adUnitId);
+            if (isPlayable(adUnitId, customEvent)) {
+                sInstance.mAdRequestStatus.markPlayed(adUnitId);
+                customEvent.showVideo();
+            } else {
+                sInstance.failover(adUnitId, MoPubErrorCode.VIDEO_NOT_AVAILABLE);
+            }
+        } else {
+            logErrorNotInitialized();
+        }
+    }
+
+    private static boolean isPlayable(String adUnitId, @Nullable CustomEventRewardedVideo customEvent) {
+        return (sInstance != null
+                && sInstance.mAdRequestStatus.canPlay(adUnitId)
+                && customEvent != null
+                && customEvent.hasVideoAvailable());
+    }
+
+    ///// Ad Request / Response methods /////
+    private void onAdSuccess(AdResponse adResponse, String adUnitId) {
+        mAdRequestStatus.markLoaded(adUnitId,
+                adResponse.getFailoverUrl(),
+                adResponse.getImpressionTrackingUrl(),
+                adResponse.getClickTrackingUrl());
+
+        Integer timeoutMillis = adResponse.getAdTimeoutMillis();
+        if (timeoutMillis == null || timeoutMillis <= 0) {
+            timeoutMillis = DEFAULT_LOAD_TIMEOUT;
+        }
+
+        final String customEventClassName = adResponse.getCustomEventClassName();
+        if (customEventClassName == null) {
+            MoPubLog.e("Couldn't create custom event, class name was null.");
+            failover(adUnitId, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        try {
+            // Instantiate a custom event
+            final CustomEventRewardedVideo customEvent =
+                    Reflection.instantiateClassWithEmptyConstructor(
+                            customEventClassName,
+                            CustomEventRewardedVideo.class);
+
+            // Put important data into localExtras...
+            final Map<String, Object> localExtras = new TreeMap<String, Object>();
+            localExtras.put(DataKeys.AD_UNIT_ID_KEY, adUnitId);
+
+            // Set up timeout calls.
+            Runnable timeout = new Runnable() {
+                @Override
+                public void run() {
+                    MoPubLog.d("Custom Event failed to load rewarded video in a timely fashion.");
+                    onRewardedVideoLoadFailure(customEvent.getClass(), customEvent.getAdNetworkId(), MoPubErrorCode.NETWORK_TIMEOUT);
+                    customEvent.onInvalidate();
+                }
+            };
+            mCustomEventTimeoutHandler.postDelayed(timeout, timeoutMillis);
+            mTimeoutMap.put(adUnitId, timeout);
+
+            // Load custom event - need an activity reference!
+            customEvent.loadCustomEvent(mMainActivity.get(), localExtras, adResponse.getServerExtras());
+
+            final CustomEventRewardedVideo.CustomEventRewardedVideoListener listener =
+                    customEvent.getVideoListenerForSdk();
+            final String adNetworkId = customEvent.getAdNetworkId();
+            mRewardedVideoData.updateAdUnitCustomEventMapping(adUnitId, customEvent, listener, adNetworkId);
+
+        } catch (Exception e) {
+            MoPubLog.e(String.format(Locale.US, "Couldn't create custom event with class name %s", customEventClassName));
+            failover(adUnitId, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+        }
+    }
+
+    private void onAdError(@NonNull VolleyError volleyError, @NonNull String adUnitId) {
+        MoPubErrorCode errorCode = MoPubErrorCode.INTERNAL_ERROR;
+        if (volleyError instanceof MoPubNetworkError) {
+            MoPubNetworkError err = (MoPubNetworkError) volleyError;
+            switch (err.getReason()) {
+                case NO_FILL:
+                case WARMING_UP:
+                    errorCode = MoPubErrorCode.NO_FILL;
+                    break;
+                case BAD_BODY:
+                case BAD_HEADER_DATA:
+                default:
+                    errorCode = MoPubErrorCode.INTERNAL_ERROR;
+            }
+        }
+        failover(adUnitId, errorCode);
+    }
+
+    private void failover(@NonNull final String adUnitId, @NonNull final MoPubErrorCode errorCode) {
+        final String failoverUrl = mAdRequestStatus.getFailoverUrl(adUnitId);
+        mAdRequestStatus.markFail(adUnitId);
+
+        if (failoverUrl != null) {
+            loadVideo(adUnitId, failoverUrl);
+        } else {
+            mVideoListener.onRewardedVideoLoadFailure(adUnitId, errorCode);
+        }
+    }
+
+    private void cancelTimeouts(@NonNull String moPubId) {
+        final Runnable runnable = mTimeoutMap.remove(moPubId);
+        if (runnable != null) {  // We can't pass null or all callbacks will be removed.
+            mCustomEventTimeoutHandler.removeCallbacks(runnable);
+        }
+    }
+
+    //////// Listener methods that should be called by third-party SDKs. //////////
+
+    /**
+     * Notify the manager that a rewarded video loaded successfully.
+     *
+     * @param customEventClass - the Class of the third-party custom event object.
+     * @param thirdPartyId - the ad id of the third party SDK. This may be an empty String if the
+     *                     SDK does not use ad ids, zone ids, or a analogous concept.
+     * @param <T> - a class that extends {@link CustomEventRewardedVideo}. Only rewarded video
+     *           custom events should use these methods.
+     */
+    public static <T extends CustomEventRewardedVideo>
+    void onRewardedVideoLoadSuccess(@NonNull Class<T> customEventClass, @NonNull String thirdPartyId) {
+        if (sInstance != null) {
+            final Set<String> moPubIds = sInstance.mRewardedVideoData.getMoPubIdsForAdNetwork(customEventClass, thirdPartyId);
+            for (String moPubId : moPubIds) {
+                sInstance.cancelTimeouts(moPubId);
+                sInstance.mVideoListener.onRewardedVideoLoadSuccess(moPubId);
+            }
+        }
+    }
+
+    public static <T extends CustomEventRewardedVideo>
+    void onRewardedVideoLoadFailure(@NonNull Class<T> customEventClass, String thirdPartyId, MoPubErrorCode errorCode) {
+        if (sInstance != null) {
+            final Set<String> moPubIds = sInstance.mRewardedVideoData.getMoPubIdsForAdNetwork(customEventClass, thirdPartyId);
+            for (final String moPubId : moPubIds) {
+                sInstance.cancelTimeouts(moPubId);
+                sInstance.failover(moPubId, errorCode);
+            }
+        }
+    }
+
+    public static <T extends CustomEventRewardedVideo>
+    void onRewardedVideoStarted(@NonNull Class<T> customEventClass, String thirdPartyId) {
+        if (sInstance != null) {
+            final Set<String> moPubIds = sInstance.mRewardedVideoData.getMoPubIdsForAdNetwork(customEventClass, thirdPartyId);
+            for (final String moPubId : moPubIds) {
+                sInstance.mVideoListener.onRewardedVideoStarted(moPubId);
+                TrackingRequest.makeTrackingHttpRequest(
+                        sInstance.mAdRequestStatus.getImpressionTrackerUrlString(moPubId),
+                        sInstance.mContext);
+                sInstance.mAdRequestStatus.clearImpressionUrl(moPubId);
+            }
+        }
+    }
+
+    public static <T extends CustomEventRewardedVideo>
+    void onRewardedVideoPlaybackError(@NonNull Class<T> customEventClass, String thirdPartyId, MoPubErrorCode errorCode) {
+        if (sInstance != null) {
+            final Iterable<String> moPubIds = sInstance.mRewardedVideoData.getMoPubIdsForAdNetwork(customEventClass, thirdPartyId);
+            for (final String moPubId : moPubIds) {
+                sInstance.mVideoListener.onRewardedVideoPlaybackError(moPubId, errorCode);
+            }
+        }
+    }
+
+    public static <T extends CustomEventRewardedVideo>
+    void onRewardedVideoClicked(@NonNull Class<T> customEventClass, String thirdPartyId) {
+        if (sInstance != null) {
+            final Set<String> moPubIds = sInstance.mRewardedVideoData.getMoPubIdsForAdNetwork(customEventClass, thirdPartyId);
+            for (final String moPubId : moPubIds) {
+                TrackingRequest.makeTrackingHttpRequest(
+                        sInstance.mAdRequestStatus.getClickTrackerUrlString(moPubId),
+                        sInstance.mContext);
+                sInstance.mAdRequestStatus.clearClickUrl(moPubId);
+            }
+        }
+    }
+
+    public static <T extends CustomEventRewardedVideo>
+    void onRewardedVideoClosed(@NonNull Class<T> customEventClass, String thirdPartyId) {
+        if (sInstance != null) {
+            final Set<String> moPubIds = sInstance.mRewardedVideoData.getMoPubIdsForAdNetwork(customEventClass, thirdPartyId);
+            for (final String moPubId : moPubIds) {
+                sInstance.mVideoListener.onRewardedVideoClosed(moPubId);
+            }
+        }
+    }
+
+    public static <T extends CustomEventRewardedVideo>
+    void onRewardedVideoCompleted(@NonNull Class<T> customEventClass, String thirdPartyId, @NonNull MoPubReward moPubReward) {
+        if (sInstance != null) {
+            final Set<String> moPubIds = sInstance.mRewardedVideoData.getMoPubIdsForAdNetwork(customEventClass, thirdPartyId);
+            Set<String> rewarded = new HashSet<String>(moPubIds);
+            sInstance.mVideoListener.onRewardedVideoCompleted(rewarded, moPubReward);
+        }
+    }
+
+    private static void logErrorNotInitialized() {
+        MoPubLog.e("MoPub rewarded video was not initialized. You must call " +
+                "MoPub.initializeRewardedVideo() before loading or attempting " +
+                "to play video ads.");
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
index 0e97bcf5..ca0f5422 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -12,6 +12,7 @@
 import android.view.View;
 import android.webkit.WebViewDatabase;
 import android.widget.FrameLayout;
+
 import com.mopub.common.AdFormat;
 import com.mopub.common.MoPub;
 import com.mopub.common.logging.MoPubLog;
@@ -20,7 +21,8 @@
 import com.mopub.mobileads.factories.AdViewControllerFactory;
 import com.mopub.mobileads.factories.CustomEventBannerAdapterFactory;
 
-import java.util.*;
+import java.util.Map;
+import java.util.TreeMap;
 
 import static com.mopub.common.LocationService.LocationAwareness;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
index 91293ca5..62bf5b27 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
@@ -166,7 +166,7 @@ public void onCreate(@Nullable Bundle savedInstanceState) {
     @Override
     protected void onPause() {
         if (mMraidController != null) {
-            mMraidController.pause();
+            mMraidController.pause(isFinishing());
         }
         super.onPause();
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
index 8f1be8d9..8fa79451 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
@@ -8,6 +8,7 @@
 import android.view.View;
 import android.view.Window;
 import android.view.WindowManager;
+
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Intents;
 import com.mopub.mraid.MraidVideoViewController;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java
new file mode 100644
index 00000000..c3d45cec
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java
@@ -0,0 +1,118 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.Pair;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeMap;
+
+/**
+ * Used to manage the mapping between MoPub ad unit ids and third-party ad network ids for rewarded videos.
+ */
+class RewardedVideoData {
+    @NonNull
+    private final Map<String, CustomEventRewardedVideo> mAdUnitToCustomEventMap;
+    @NonNull
+    private final Map<TwoPartKey, Set<String>> mCustomEventToMoPubIdMap;
+    @NonNull
+    private final Set<CustomEventRewardedVideo.CustomEventRewardedVideoListener> mAdNetworkListeners;
+
+    RewardedVideoData() {
+        mAdUnitToCustomEventMap = new TreeMap<String, CustomEventRewardedVideo>();
+        mCustomEventToMoPubIdMap = new HashMap<TwoPartKey, Set<String>>();
+        mAdNetworkListeners = new HashSet<CustomEventRewardedVideo.CustomEventRewardedVideoListener>();
+    }
+
+    @Nullable
+    CustomEventRewardedVideo getCustomEvent(@NonNull String moPubId) {
+        return mAdUnitToCustomEventMap.get(moPubId);
+    }
+
+    @NonNull
+    Set<String> getMoPubIdsForAdNetwork(
+            @NonNull Class<? extends CustomEventRewardedVideo> customEventClass,
+            @Nullable String adNetworkId) {
+        if (adNetworkId == null) {
+            final Set<String> allIds = new HashSet<String>();
+            for (final Map.Entry<TwoPartKey, Set<String>> entry : mCustomEventToMoPubIdMap.entrySet()) {
+                final Class<?> clazz = entry.getKey().customEventClass;
+                if (customEventClass == clazz) {
+                    allIds.addAll(entry.getValue());
+                }
+            }
+            return allIds;
+        } else {
+            final TwoPartKey key = new TwoPartKey(customEventClass, adNetworkId);
+            return mCustomEventToMoPubIdMap.containsKey(key)
+                    ? mCustomEventToMoPubIdMap.get(key)
+                    : Collections.<String>emptySet();
+        }
+    }
+
+    void updateAdUnitCustomEventMapping(
+            @NonNull String moPubId,
+            @NonNull CustomEventRewardedVideo customEvent,
+            @Nullable CustomEventRewardedVideo.CustomEventRewardedVideoListener listener,
+            @NonNull String adNetworkId) {
+        mAdUnitToCustomEventMap.put(moPubId, customEvent);
+        mAdNetworkListeners.add(listener);
+        associateCustomEventWithMoPubId(customEvent.getClass(), adNetworkId, moPubId);
+    }
+
+    void associateCustomEventWithMoPubId(
+            @NonNull Class<? extends CustomEventRewardedVideo> customEventClass,
+            @NonNull String adNetworkId,
+            @NonNull String moPubId) {
+        final TwoPartKey newCustomEventMapping = new TwoPartKey(customEventClass, adNetworkId);
+
+        // Remove previous mapping for this moPubId
+        final Iterator<Map.Entry<TwoPartKey, Set<String>>> entryIterator =
+                mCustomEventToMoPubIdMap.entrySet().iterator();
+        while (entryIterator.hasNext()) {
+            final Map.Entry<TwoPartKey, Set<String>> entry = entryIterator.next();
+
+            if (!entry.getKey().equals(newCustomEventMapping)) {
+                if (entry.getValue().contains(moPubId)) {
+                    entry.getValue().remove(moPubId);
+                    // Ensure that entries containing empty Sets are completely removed from the Map
+                    if (entry.getValue().isEmpty()) {
+                        entryIterator.remove();
+                    }
+
+                    // moPubIds can exist at most once in the Map values, so break upon finding a match
+                    break;
+                }
+            }
+        }
+
+        // Add a new mapping if necessary.
+        Set<String> moPubIds = mCustomEventToMoPubIdMap.get(newCustomEventMapping);
+        if (moPubIds == null) {
+            moPubIds = new HashSet<String>();
+            mCustomEventToMoPubIdMap.put(newCustomEventMapping, moPubIds);
+        }
+        moPubIds.add(moPubId);
+    }
+
+    private static class TwoPartKey extends Pair<Class<? extends CustomEventRewardedVideo>, String> {
+        @NonNull
+        final Class<? extends CustomEventRewardedVideo> customEventClass;
+        @NonNull
+        final String adNetworkId;
+
+        public TwoPartKey(
+                @NonNull final Class<? extends CustomEventRewardedVideo> customEventClass,
+                @NonNull final String adNetworkId) {
+            super(customEventClass, adNetworkId);
+
+            this.customEventClass = customEventClass;
+            this.adNetworkId = adNetworkId;
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
index f2348078..730c40c2 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
@@ -17,6 +17,7 @@
 import android.widget.ImageView;
 import android.widget.RelativeLayout;
 import android.widget.VideoView;
+
 import com.mopub.common.DownloadResponse;
 import com.mopub.common.DownloadTask;
 import com.mopub.common.HttpResponses;
@@ -34,11 +35,14 @@
 import com.mopub.exceptions.UrlParseException;
 import com.mopub.mobileads.util.vast.VastCompanionAd;
 import com.mopub.mobileads.util.vast.VastVideoConfiguration;
+
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.HttpGet;
 
-import java.io.*;
-import java.util.*;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.Serializable;
+import java.util.List;
 
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
 import static com.mopub.common.HttpClient.initializeHttpGet;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
index 40fcd236..d56aff20 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
@@ -56,8 +56,6 @@ public String generateUrlString(String serverHostname) {
 
         setExternalStoragePermission(mIsStorePictureSupported);
 
-        setTwitterAppInstalledFlag();
-
         appendAdvertisingInfoTemplates();
 
         return getFinalUrlString();
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/WebViews.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/WebViews.java
index f02925c5..57eb0f0c 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/WebViews.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/WebViews.java
@@ -29,7 +29,17 @@ public static void onResume(@NonNull WebView webView) {
     }
 
     @TargetApi(VERSION_CODES.HONEYCOMB)
-    public static void onPause(@NonNull WebView webView) {
+    public static void onPause(@NonNull WebView webView, boolean isFinishing) {
+        // XXX
+        // We need to call WebView#stopLoading and WebView#loadUrl here due to an Android
+        // bug where the audio of an HTML5 video will continue to play after the activity has been
+        // destroyed. The web view must stop then load an invalid url during the onPause lifecycle
+        // event in order to stop the audio.
+        if (isFinishing) {
+            webView.stopLoading();
+            webView.loadUrl("");
+        }
+
         if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {
             webView.onPause();
             return;
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidBanner.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidBanner.java
index d78fedd3..558439d8 100644
--- a/mopub-sdk/src/main/java/com/mopub/mraid/MraidBanner.java
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidBanner.java
@@ -16,7 +16,6 @@
 import java.util.Map;
 
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
-import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java
index df44c239..1430763d 100644
--- a/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java
@@ -17,6 +17,7 @@
 import android.webkit.WebChromeClient;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
+
 import com.mopub.common.AdReport;
 import com.mopub.common.CloseableLayout.ClosePosition;
 import com.mopub.common.VisibleForTesting;
@@ -27,13 +28,15 @@
 import com.mopub.mobileads.resource.MraidJavascript;
 import com.mopub.mraid.MraidBridge.MraidWebView.OnVisibilityChangedListener;
 import com.mopub.mraid.MraidNativeCommandHandler.MraidCommandFailureListener;
+
 import org.apache.http.NameValuePair;
 import org.apache.http.client.utils.URLEncodedUtils;
 import org.json.JSONObject;
 
 import java.net.URI;
 import java.net.URISyntaxException;
-import java.util.*;
+import java.util.HashMap;
+import java.util.Map;
 
 public class MraidBridge {
     private final AdReport mAdReport;
@@ -41,6 +44,8 @@
     public interface MraidBridgeListener {
         void onPageLoaded();
 
+        void onPageFailedToLoad();
+
         void onVisibilityChanged(boolean isVisible);
 
         boolean onJsAlert(@NonNull String message, @NonNull JsResult result);
@@ -290,13 +295,18 @@ boolean handleShouldOverrideUrl(@NonNull final String url) {
 
         // Note that scheme will be null when we are passed a relative Uri
         String scheme = uri.getScheme();
+        String host = uri.getHost();
 
         if ("mopub".equals(scheme)) {
+            if ("failLoad".equals(host)) {
+                if (mPlacementType == PlacementType.INLINE && mMraidBridgeListener != null) {
+                    mMraidBridgeListener.onPageFailedToLoad();
+                }
+            }
             return true;
         }
 
         if ("mraid".equals(scheme)) {
-            String host = uri.getHost();
             Map<String, String> params = new HashMap<String, String>();
             for (NameValuePair pair : URLEncodedUtils.parse(uri, "UTF-8")) {
                 params.put(pair.getName(), pair.getValue());
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
index c8889cc2..3f1ea554 100644
--- a/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
@@ -28,6 +28,7 @@
 import android.webkit.JsResult;
 import android.widget.FrameLayout;
 import android.widget.FrameLayout.LayoutParams;
+
 import com.mopub.common.AdReport;
 import com.mopub.common.CloseableLayout;
 import com.mopub.common.CloseableLayout.ClosePosition;
@@ -177,6 +178,13 @@ public void onPageLoaded() {
             handlePageLoad();
         }
 
+        @Override
+        public void onPageFailedToLoad() {
+            if (mMraidListener != null) {
+                mMraidListener.onFailedToLoad();
+            }
+        }
+
         @Override
         public void onVisibilityChanged(final boolean isVisible) {
             // The bridge only receives visibility events if there is no 2 part covering it
@@ -241,6 +249,11 @@ public void onPageLoaded() {
             handleTwoPartPageLoad();
         }
 
+        @Override
+        public void onPageFailedToLoad() {
+            // no-op for two-part expandables. An expandable failing to load should not trigger failover.
+        }
+
         @Override
         public void onVisibilityChanged(final boolean isVisible) {
             // The original web view must see the 2-part bridges visibility
@@ -533,15 +546,15 @@ void handleOrientationChange(int currentRotation) {
         updateScreenMetricsAsync(null);
     }
 
-    public void pause() {
+    public void pause(boolean isFinishing) {
         mIsPaused = true;
 
         // This causes an inline video to pause if there is one playing
         if (mMraidWebView != null) {
-            WebViews.onPause(mMraidWebView);
+            WebViews.onPause(mMraidWebView, isFinishing);
         }
         if (mTwoPartWebView != null) {
-            WebViews.onPause(mTwoPartWebView);
+            WebViews.onPause(mTwoPartWebView, isFinishing);
         }
     }
 
@@ -570,7 +583,7 @@ public void destroy() {
 
         // Pause the controller to make sure the video gets stopped.
         if (!mIsPaused) {
-            pause();
+            pause(true);
         }
 
         // Remove the closeable ad container from the view hierarchy, if necessary
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ClickDestinationResolutionListener.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ClickDestinationResolutionListener.java
index cee3d93c..2d1fdcb6 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ClickDestinationResolutionListener.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ClickDestinationResolutionListener.java
@@ -4,6 +4,7 @@
 import android.content.Intent;
 import android.net.Uri;
 import android.support.annotation.NonNull;
+
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Intents;
@@ -11,7 +12,7 @@
 import com.mopub.exceptions.UrlParseException;
 
 import java.lang.ref.WeakReference;
-import java.util.*;
+import java.util.Iterator;
 
 class ClickDestinationResolutionListener implements UrlResolutionTask.UrlResolutionListener {
     private final Context mContext;
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
index 2585c9d3..7340057b 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
@@ -3,17 +3,25 @@
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+
 import com.mopub.common.event.ErrorEvent;
 import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.logging.MoPubLog;
+
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Set;
 
-import static com.mopub.common.DataKeys.JSON_BODY_KEY;
 import static com.mopub.common.util.Numbers.parseDouble;
+import static com.mopub.common.DataKeys.JSON_BODY_KEY;
 import static com.mopub.nativeads.NativeResponse.Parameter;
 
 public class MoPubCustomEventNative extends CustomEventNative {
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
index dcb49e5a..5d3ab539 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
@@ -211,7 +211,7 @@ void requestNativeAd(@Nullable final String endpointUrl) {
             return;
         }
 
-        mNativeRequest = new AdRequest(endpointUrl, AdFormat.NATIVE, mVolleyListener);
+        mNativeRequest = new AdRequest(endpointUrl, AdFormat.NATIVE, mAdUnitId, mVolleyListener);
         RequestQueue requestQueue = Networking.getRequestQueue(context);
         requestQueue.add(mNativeRequest);
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
index 3692eec9..201d865a 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
@@ -1,12 +1,16 @@
 package com.mopub.nativeads;
 
 import android.content.Context;
+import android.location.Location;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
+
 import com.mopub.common.AdUrlGenerator;
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.Constants;
+import com.mopub.common.LocationService;
+import com.mopub.common.MoPub;
 import com.mopub.common.util.DateAndTime;
 
 class NativeUrlGenerator extends AdUrlGenerator {
@@ -74,8 +78,6 @@ public String generateUrlString(final String serverHostname) {
 
         setAppVersion(clientMetadata.getAppVersion());
 
-        setTwitterAppInstalledFlag();
-
         setDesiredAssets();
 
         setSequenceNumber();
diff --git a/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java b/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java
index 674354de..88e78321 100644
--- a/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java
+++ b/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java
@@ -3,9 +3,11 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
+
 import com.mopub.common.AdFormat;
 import com.mopub.common.AdType;
 import com.mopub.common.DataKeys;
+import com.mopub.common.Preconditions;
 import com.mopub.common.util.Json;
 import com.mopub.common.util.ResponseHeader;
 import com.mopub.mobileads.AdTypeTranslator;
@@ -14,11 +16,13 @@
 import com.mopub.volley.Request;
 import com.mopub.volley.Response;
 import com.mopub.volley.toolbox.HttpHeaderParser;
+
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.io.*;
-import java.util.*;
+import java.io.UnsupportedEncodingException;
+import java.util.Map;
+import java.util.TreeMap;
 
 import static com.mopub.network.HeaderUtils.extractBooleanHeader;
 import static com.mopub.network.HeaderUtils.extractHeader;
@@ -28,14 +32,18 @@
 
     @NonNull private final AdRequest.Listener mListener;
     @NonNull private final AdFormat mAdFormat;
+    @Nullable private final String mAdUnitId;
 
     public interface Listener extends Response.ErrorListener {
         public void onSuccess(AdResponse response);
     }
 
-    public AdRequest(@NonNull final String url, @NonNull final AdFormat adFormat,
+    public AdRequest(@NonNull final String url, @NonNull final AdFormat adFormat, @Nullable final String adUnitId,
             @NonNull final Listener listener) {
         super(Method.GET, url, listener);
+        Preconditions.checkNotNull(adFormat);
+        Preconditions.checkNotNull(listener);
+        mAdUnitId = adUnitId;
         mListener = listener;
         mAdFormat = adFormat;
         DefaultRetryPolicy retryPolicy = new DefaultRetryPolicy(
@@ -46,6 +54,11 @@ public AdRequest(@NonNull final String url, @NonNull final AdFormat adFormat,
         setShouldCache(false);
     }
 
+    @NonNull
+    public Listener getListener() {
+        return mListener;
+    }
+
     @Override
     protected Response<AdResponse> parseNetworkResponse(final NetworkResponse networkResponse) {
         // NOTE: We never get status codes outside of {[200, 299], 304}. Those errors are sent to the
@@ -59,6 +72,7 @@ public AdRequest(@NonNull final String url, @NonNull final AdFormat adFormat,
 
 
         AdResponse.Builder builder = new AdResponse.Builder();
+        builder.setAdUnitId(mAdUnitId);
 
         String adTypeString = extractHeader(headers, ResponseHeader.AD_TYPE);
         String fullAdTypeString = extractHeader(headers, ResponseHeader.FULL_AD_TYPE);
diff --git a/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java b/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java
index ea0ba0c5..d6cf0b57 100644
--- a/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java
+++ b/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java
@@ -16,6 +16,10 @@
 
     @Nullable
     private final String mAdType;
+
+    @Nullable
+    private final String mAdUnitId;
+
     @Nullable
     private final String mFullAdType;
     @Nullable
@@ -58,6 +62,7 @@
     private AdResponse(@NonNull Builder builder) {
 
         mAdType = builder.adType;
+        mAdUnitId = builder.adUnitId;
         mFullAdType = builder.fullAdType;
         mNetworkType = builder.networkType;
         mRedirectUrl = builder.redirectUrl;
@@ -101,6 +106,11 @@ public String getFullAdType() {
         return mFullAdType;
     }
 
+    @Nullable
+    public String getAdUnitId() {
+        return mAdUnitId;
+    }
+
     @Nullable
     public String getNetworkType() {
         return mNetworkType;
@@ -191,6 +201,7 @@ public Builder toBuilder() {
 
     public static class Builder {
         private String adType;
+        private String adUnitId;
         private String fullAdType;
         private String networkType;
 
@@ -211,13 +222,18 @@ public Builder toBuilder() {
         private JSONObject jsonBody;
 
         private String customEventClassName;
-        private Map<String, String> serverExtras;
+        private Map<String, String> serverExtras = new TreeMap<String, String>();
 
         public Builder setAdType(@Nullable final String adType) {
             this.adType = adType;
             return this;
         }
 
+        public Builder setAdUnitId(@Nullable final String adUnitId) {
+            this.adUnitId = adUnitId;
+            return this;
+        }
+
         public Builder setFullAdType(@Nullable final String fullAdType) {
             this.fullAdType = fullAdType;
             return this;
diff --git a/mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java b/mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java
index 1f2795af..eff3af17 100644
--- a/mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java
+++ b/mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java
@@ -4,6 +4,7 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
+
 import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.volley.DefaultRetryPolicy;
@@ -14,7 +15,7 @@
 import com.mopub.volley.VolleyError;
 import com.mopub.volley.toolbox.HttpHeaderParser;
 
-import java.util.*;
+import java.util.Arrays;
 
 public class TrackingRequest extends Request<Void> {
 
@@ -121,6 +122,8 @@ public static void makeTrackingHttpRequest(final String url,
             final Context context,
             @Nullable Listener listener,
             final MoPubEvents.Type type) {
-        makeTrackingHttpRequest(Arrays.asList(url), context, listener, type);
+        if (url != null) {
+            makeTrackingHttpRequest(Arrays.asList(url), context, listener, type);
+        }
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
new file mode 100644
index 00000000..b28038c6
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
@@ -0,0 +1,71 @@
+package com.mopub.common;
+
+import android.annotation.TargetApi;
+import android.os.Build;
+import android.webkit.CookieSyncManager;
+import android.webkit.WebView;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+public class MoPubBrowserTest {
+
+    private MoPubBrowser subject;
+    private WebView mockWebView;
+
+    @Before
+    public void setUp() {
+        subject = new MoPubBrowser();
+        CookieSyncManager.createInstance(subject);
+
+        mockWebView = mock(WebView.class);
+        subject.setWebView(mockWebView);
+    }
+
+    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
+    @Test
+    public void onPause_withIsFinishingTrue_shouldStopLoading_shouldLoadBlankUrl_shouldPauseWebView() throws Exception {
+        // We have to manually call #onPause here after #finish since the activity is not being managed by Android
+        // Even if the activity was being managed by Android we would likely have to call onPause since the test would
+        // complete before the UI thread had a chance to invoke the lifecycle events
+        subject.finish();
+        subject.onPause();
+
+        verify(mockWebView).stopLoading();
+        verify(mockWebView).loadUrl("");
+        verify(mockWebView).onPause();
+    }
+
+    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
+    @Test
+    public void onPause_withIsFinishingFalse_shouldPauseWebView() throws Exception {
+        subject.onPause();
+
+        verify(mockWebView, never()).stopLoading();
+        verify(mockWebView, never()).loadUrl("");
+        verify(mockWebView).onPause();
+    }
+
+    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
+    @Test
+    public void onResume_shouldResumeWebView() throws Exception {
+        subject.onResume();
+
+        verify(mockWebView).onResume();
+    }
+
+    @Test
+    public void onDestroy_shouldDestroyWebView() throws Exception {
+        subject.onDestroy();
+
+        verify(mockWebView).destroy();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/BaseEventTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/BaseEventTest.java
new file mode 100644
index 00000000..b28eab28
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/event/BaseEventTest.java
@@ -0,0 +1,175 @@
+package com.mopub.common.event;
+
+import com.mopub.common.ClientMetadata;
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+public class BaseEventTest {
+
+    private BaseEvent subject;
+    @Mock private ClientMetadata mockClientMetaData;
+
+    @Before
+    public void setUp() {
+        when(mockClientMetaData.getSdkVersion()).thenReturn("sdk_version");
+        when(mockClientMetaData.getAppName()).thenReturn("app_name");
+        when(mockClientMetaData.getAppPackageName()).thenReturn("app_package_name");
+        when(mockClientMetaData.getAppVersion()).thenReturn("app_version");
+        when(mockClientMetaData.getDeviceId()).thenReturn("client_device_id");
+        when(mockClientMetaData.isDoNotTrackSet()).thenReturn(true);
+        when(mockClientMetaData.getDeviceManufacturer()).thenReturn("device_manufacturer");
+        when(mockClientMetaData.getDeviceModel()).thenReturn("device_model");
+        when(mockClientMetaData.getDeviceProduct()).thenReturn("device_product");
+        when(mockClientMetaData.getDeviceOsVersion()).thenReturn("device_os_version");
+        when(mockClientMetaData.getDeviceScreenWidthPx()).thenReturn(1337);
+        when(mockClientMetaData.getDeviceScreenHeightPx()).thenReturn(70707);
+        when(mockClientMetaData.getActiveNetworkType()).thenReturn(ClientMetadata.MoPubNetworkType.WIFI);
+        when(mockClientMetaData.getNetworkOperator()).thenReturn("network_operator");
+        when(mockClientMetaData.getNetworkOperatorName()).thenReturn("network_operator_name");
+        when(mockClientMetaData.getIsoCountryCode()).thenReturn("network_iso_country_code");
+        when(mockClientMetaData.getSimOperator()).thenReturn("network_sim_operator");
+        when(mockClientMetaData.getSimOperatorName()).thenReturn("network_sim_operator_name");
+        when(mockClientMetaData.getSimIsoCountryCode()).thenReturn("network_sim_iso_country_code");
+
+        subject = new Event.Builder("name", "category")
+                .withSdkProduct(BaseEvent.SdkProduct.NATIVE)
+                .withAdUnitId("8cf00598d3664adaaeccd800e46afaca")
+                .withAdCreativeId("3c2b887e2c2a4cd0ae6a925440a62f0d")
+                .withAdType("html")
+                .withAdNetworkType("admob")
+                .withAdWidthPx(320.0)
+                .withAdHeightPx(50.0)
+                .withGeoLat(37.7833)
+                .withGeoLon(-122.4183333)
+                .withGeoAccuracy(10.0)
+                .withPerformanceDurationMs(100.0)
+                .withRequestId("b550796074da4559a27c5072dcba2b27")
+                .withRequestStatusCode(200)
+                .withRequestUri("http://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca")
+                .withRequestRetries(0)
+                .build();
+        subject.setClientMetaData(mockClientMetaData);
+    }
+
+    @Test
+    public void constructor_shouldCorrectlyAssignFieldsFromBuilder() throws Exception {
+        assertThat(subject.getSdkProduct()).isEqualTo(BaseEvent.SdkProduct.NATIVE);
+        assertThat(subject.getAdUnitId()).isEqualTo("8cf00598d3664adaaeccd800e46afaca");
+        assertThat(subject.getAdCreativeId()).isEqualTo("3c2b887e2c2a4cd0ae6a925440a62f0d");
+        assertThat(subject.getAdType()).isEqualTo("html");
+        assertThat(subject.getAdNetworkType()).isEqualTo("admob");
+        assertThat(subject.getAdWidthPx()).isEqualTo(320.0);
+        assertThat(subject.getAdHeightPx()).isEqualTo(50.0);
+        assertThat(subject.getGeoLat()).isEqualTo(37.7833);
+        assertThat(subject.getGeoLon()).isEqualTo(-122.4183333);
+        assertThat(subject.getGeoAccuracy()).isEqualTo(10.0);
+        assertThat(subject.getPerformanceDurationMs()).isEqualTo(100.0);
+        assertThat(subject.getRequestId()).isEqualTo("b550796074da4559a27c5072dcba2b27");
+        assertThat(subject.getRequestStatusCode()).isEqualTo(200);
+        assertThat(subject.getRequestUri()).isEqualTo("http://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca");
+        assertThat(subject.getRequestRetries()).isEqualTo(0);
+    }
+
+    @Test
+    public void getSdkVersion_shouldReturnClientMetaDataSdkVersion() throws Exception {
+        assertThat(subject.getSdkVersion()).isEqualTo("sdk_version");
+    }
+
+    @Test
+    public void getAppName_shouldReturnClientMetaDataAppName() throws Exception {
+        assertThat(subject.getAppName()).isEqualTo("app_name");
+    }
+
+    @Test
+    public void getAppPackageName_shouldReturnClientMetaDataAppPackageName() throws Exception {
+        assertThat(subject.getAppPackageName()).isEqualTo("app_package_name");
+    }
+
+    @Test
+    public void getAppVersion_shouldReturnClientMetaDataAppVersion() throws Exception {
+        assertThat(subject.getAppVersion()).isEqualTo("app_version");
+    }
+
+    @Test
+    public void getClientAdvertisingId_shouldReturnClientMetaDataDeviceId() throws Exception {
+        assertThat(subject.getClientAdvertisingId()).isEqualTo("client_device_id");
+    }
+
+    @Test
+    public void getClientDoNotTrack_shouldReturnClientMetaDataDoNotTrack() throws Exception {
+        assertThat(subject.getClientDoNotTrack()).isEqualTo(true);
+    }
+
+    @Test
+    public void getDeviceManufacturer_shouldReturnClientMetaDataDeviceManufacturer() throws Exception {
+        assertThat(subject.getDeviceManufacturer()).isEqualTo("device_manufacturer");
+    }
+
+    @Test
+    public void getDeviceModel_shouldReturnClientMetaDataDeviceModel() throws Exception {
+        assertThat(subject.getDeviceModel()).isEqualTo("device_model");
+    }
+
+    @Test
+    public void getDeviceProduct_shouldReturnClientMetaDataDeviceProduct() throws Exception {
+        assertThat(subject.getDeviceProduct()).isEqualTo("device_product");
+    }
+
+    @Test
+    public void getDeviceOsVersion_shouldReturnClientMetaDataDeviceOsVersion() throws Exception {
+        assertThat(subject.getDeviceOsVersion()).isEqualTo("device_os_version");
+    }
+
+    @Test
+    public void getDeviceScreenWidthPx_shouldReturnClientMetaDataDeviceScreenWidthPx() throws Exception {
+        assertThat(subject.getDeviceScreenWidthPx()).isEqualTo(1337);
+    }
+
+    @Test
+    public void getDeviceScreenHeightPx_shouldReturnClientMetaDataDeviceScreenHeightPx() throws Exception {
+        assertThat(subject.getDeviceScreenHeightPx()).isEqualTo(70707);
+    }
+
+    @Test
+    public void getNetworkType_shouldReturnClientMetaDataActiveNetworkType() throws Exception {
+        assertThat(subject.getNetworkType()).isEqualTo(ClientMetadata.MoPubNetworkType.WIFI);
+    }
+
+    @Test
+    public void getNetworkOperatorCode_shouldReturnClientMetaDataNetworkOperator() throws Exception {
+        assertThat(subject.getNetworkOperatorCode()).isEqualTo("network_operator");
+    }
+
+    @Test
+    public void getNetworkOperatorName_shouldReturnClientMetaDataNetworkOperatorName() throws Exception {
+        assertThat(subject.getNetworkOperatorName()).isEqualTo("network_operator_name");
+    }
+
+    @Test
+    public void getNetworkIsoCountryCode_shouldReturnClientMetaDataNetworkIsoCountryCode() throws Exception {
+        assertThat(subject.getNetworkIsoCountryCode()).isEqualTo("network_iso_country_code");
+    }
+
+    @Test
+    public void getNetworkSimCode_shouldReturnClientMetaDataNetworkSimOperator() throws Exception {
+        assertThat(subject.getNetworkSimCode()).isEqualTo("network_sim_operator");
+    }
+
+    @Test
+    public void getNetworkSimOperatorName_shouldReturnClientMetaDataNetworkSimOperatorName() throws Exception {
+        assertThat(subject.getNetworkSimOperatorName()).isEqualTo("network_sim_operator_name");
+    }
+
+    @Test
+    public void getNetworkSimIsoCountryCode_shouldReturnClientMetaDataNetworkSimIsoCountryCode() throws Exception {
+        assertThat(subject.getNetworkSimIsoCountryCode()).isEqualTo("network_sim_iso_country_code");
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/ErrorEventTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/ErrorEventTest.java
new file mode 100644
index 00000000..0090e949
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/event/ErrorEventTest.java
@@ -0,0 +1,79 @@
+package com.mopub.common.event;
+
+import com.mopub.common.CacheServiceTest;
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+
+import java.io.PrintWriter;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.doAnswer;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+public class ErrorEventTest {
+
+    private ErrorEvent subject;
+
+    @Before
+    public void setUp() {
+        subject = new ErrorEvent.Builder("name", "category")
+                .withErrorExceptionClassName("error_exception_class_name")
+                .withErrorMessage("error_message")
+                .withErrorStackTrace("error_stack_trace")
+                .withErrorFileName("error_file_name")
+                .withErrorClassName("error_class_name")
+                .withErrorMethodName("error_method_name")
+                .withErrorLineNumber(123)
+                .build();
+    }
+
+    @Test
+    public void constructor_shouldCorrectlyAssignFieldsFromBuilder() throws Exception {
+        assertThat(subject.getEventName()).isEqualTo("name");
+        assertThat(subject.getEventCategory()).isEqualTo("category");
+        assertThat(subject.getScribeCategory()).isEqualTo(BaseEvent.ScribeCategory.EXCHANGE_CLIENT_ERROR);
+        assertThat(subject.getErrorExceptionClassName()).isEqualTo("error_exception_class_name");
+        assertThat(subject.getErrorMessage()).isEqualTo("error_message");
+        assertThat(subject.getErrorStackTrace()).isEqualTo("error_stack_trace");
+        assertThat(subject.getErrorFileName()).isEqualTo("error_file_name");
+        assertThat(subject.getErrorClassName()).isEqualTo("error_class_name");
+        assertThat(subject.getErrorMethodName()).isEqualTo("error_method_name");
+        assertThat(subject.getErrorLineNumber()).isEqualTo(123);
+    }
+
+    @Test
+    public void builder_withException_shouldCorrectlyPopulateErrorFields() throws Exception {
+        Exception exception;
+        try {
+            throw new ClassCastException("bad cast");
+        } catch (Exception e)  {
+            exception = e;
+        }
+
+        subject = new ErrorEvent.Builder("name", "category")
+                .withException(exception)
+                .build();
+
+        assertThat(subject.getEventName()).isEqualTo("name");
+        assertThat(subject.getEventCategory()).isEqualTo("category");
+        assertThat(subject.getScribeCategory()).isEqualTo(BaseEvent.ScribeCategory.EXCHANGE_CLIENT_ERROR);
+        assertThat(subject.getErrorExceptionClassName()).isEqualTo("java.lang.ClassCastException");
+        assertThat(subject.getErrorMessage()).isEqualTo("bad cast");
+
+        // We can't reliably check the stack trace since it changes from one run to another
+//        assertThat(subject.getErrorStackTrace()).isEqualTo();
+
+        assertThat(subject.getErrorFileName()).isEqualTo("ErrorEventTest.java");
+        assertThat(subject.getErrorClassName()).isEqualTo("com.mopub.common.event.ErrorEventTest");
+        assertThat(subject.getErrorMethodName()).isEqualTo("builder_withException_shouldCorrectlyPopulateErrorFields");
+        assertThat(subject.getErrorLineNumber()).isEqualTo(56);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/EventDispatcherTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/EventDispatcherTest.java
index 105f836d..bd4ee8cf 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/event/EventDispatcherTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/event/EventDispatcherTest.java
@@ -1,19 +1,24 @@
 package com.mopub.common.event;
 
+import android.app.Activity;
 import android.os.HandlerThread;
 import android.os.Message;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.ximpleware.extended.parser.WIN1250;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mock;
 
 import java.util.ArrayList;
 import java.util.List;
 
+import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 
 
@@ -21,26 +26,45 @@
 public class EventDispatcherTest {
 
     private EventDispatcher subject;
-    private EventRecorder testRecorder;
-    private HandlerThread testHandlerThread;
+    private List<EventRecorder> recorders;
+    @Mock private EventRecorder mockEventRecorder1;
+    @Mock private EventRecorder mockEventRecorder2;
+    @Mock private HandlerThread mockHandlerThread;
 
     @Before
-    public void setup() {
-        // Set up test event recorders and test handler thread.
-        List<EventRecorder> recorders = new ArrayList<EventRecorder>();
-        testRecorder = mock(EventRecorder.class);
-        recorders.add(testRecorder);
-        testHandlerThread = new HandlerThread("mopub-test-events");
-        subject = new EventDispatcher(recorders, testHandlerThread);
-        // The test runner uses a mock dispatcher that does nothing.
-        MoPubEvents.setEventDispatcher(subject);
+    public void setUp() {
+        recorders = new ArrayList<EventRecorder>();
+        recorders.add(mockEventRecorder1);
+        recorders.add(mockEventRecorder2);
+    }
+    
+    @Test
+    public void constructor_shouldStartHandlerThread() throws Exception {
+        subject = new EventDispatcher(recorders, mockHandlerThread);
+        verify(mockHandlerThread).start();
+    }
+
+    @Test
+    public void handler_handleMessage_shouldCallRecordOnAllRecorders() throws Exception {
+        Message message = new Message();
+        message.obj = mock(Event.class);
+
+        subject = new EventDispatcher(recorders, mockHandlerThread);
+        subject.getHandlerCallback().handleMessage(message);
+
+        verify(mockEventRecorder1).record(eq((Event) message.obj));
+        verify(mockEventRecorder2).record(eq((Event) message.obj));
     }
 
     @Test
-    public void createEvent_testCallbackCallsHandler() throws Exception {
+    public void handler_handleMessage_withNonBaseEventTypeMessageShouldNotRecordOnAnyRecorders() throws Exception {
         Message message = new Message();
-        message.obj = new Event.Builder("","").build();
-        subject.mHandlerCallback.handleMessage(message);
-        verify(testRecorder).record(eq((Event) message.obj));
+        message.obj = mock(Activity.class);
+
+        subject = new EventDispatcher(recorders, mockHandlerThread);
+        subject.getHandlerCallback().handleMessage(message);
+
+        verify(mockEventRecorder1, never()).record(any(BaseEvent.class));
+        verify(mockEventRecorder2, never()).record(any(BaseEvent.class));
     }
-}
\ No newline at end of file
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/EventSerializerTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/EventSerializerTest.java
new file mode 100644
index 00000000..e22afbd6
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/event/EventSerializerTest.java
@@ -0,0 +1,210 @@
+package com.mopub.common.event;
+
+import android.app.Activity;
+
+import com.mopub.common.ClientMetadata;
+import com.mopub.common.MoPub;
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.json.JSONArray;
+import org.json.JSONObject;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+
+import java.util.ArrayList;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+public class EventSerializerTest {
+
+    private EventSerializer subject;
+    private Activity context;
+
+    @Mock private Event mockEvent;
+    @Mock private ErrorEvent mockErrorEvent;
+
+    @Before
+    public void setUp() {
+        subject = new EventSerializer();
+
+        // initialize client meta data with context
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        ClientMetadata.getInstance(context);
+
+        populateBaseEventFields(mockEvent);
+        populateBaseEventFields(mockErrorEvent);
+
+        when(mockErrorEvent.getErrorExceptionClassName()).thenReturn("error_exception_class_name");
+        when(mockErrorEvent.getErrorMessage()).thenReturn("error_message");
+        when(mockErrorEvent.getErrorStackTrace()).thenReturn("error_stack_trace");
+        when(mockErrorEvent.getErrorFileName()).thenReturn("error_file_name");
+        when(mockErrorEvent.getErrorClassName()).thenReturn("error_class_name");
+        when(mockErrorEvent.getErrorMethodName()).thenReturn("error_method_name");
+        when(mockErrorEvent.getErrorLineNumber()).thenReturn(123);
+    }
+
+    @Test
+    public void serializeAsJson_withAllEventFieldsPopulated_shouldCorrectJsonRepresentation() throws Exception {
+        ArrayList<BaseEvent> events = new ArrayList<BaseEvent>();
+        events.add(mockEvent);
+        JSONArray jsonArray = subject.serializeAsJson(events);
+        assertThat(jsonArray.length()).isEqualTo(1);
+
+        JSONObject jsonObject = jsonArray.getJSONObject(0);
+        validateBaseEventFields(jsonObject);
+    }
+
+    @Test
+    public void serializeAsJson_withAllErrorEventFieldsPopulated_shouldCorrectJsonRepresentation() throws Exception {
+        ArrayList<BaseEvent> events = new ArrayList<BaseEvent>();
+        events.add(mockErrorEvent);
+        JSONArray jsonArray = subject.serializeAsJson(events);
+        assertThat(jsonArray.length()).isEqualTo(1);
+
+        JSONObject jsonObject = jsonArray.getJSONObject(0);
+        validateBaseEventFields(jsonObject);
+
+        assertThat(jsonObject.getString("error_exception_class_name")).isEqualTo("error_exception_class_name");
+        assertThat(jsonObject.getString("error_message")).isEqualTo("error_message");
+        assertThat(jsonObject.getString("error_stack_trace")).isEqualTo("error_stack_trace");
+        assertThat(jsonObject.getString("error_file_name")).isEqualTo("error_file_name");
+        assertThat(jsonObject.getString("error_class_name")).isEqualTo("error_class_name");
+        assertThat(jsonObject.getString("error_method_name")).isEqualTo("error_method_name");
+        assertThat(jsonObject.getInt("error_line_number")).isEqualTo(123);
+    }
+
+    @Test
+    public void serializeAsJson_shouldReturnJsonArrayOfEvents() throws Exception {
+        when(mockEvent.getEventName()).thenReturn("event");
+        when(mockEvent.getEventCategory()).thenReturn("event_category");
+        when(mockErrorEvent.getEventName()).thenReturn("error_event");
+        when(mockErrorEvent.getEventCategory()).thenReturn("error_event_category");
+
+        ArrayList<BaseEvent> events = new ArrayList<BaseEvent>();
+        events.add(mockEvent);
+        events.add(mockErrorEvent);
+
+        JSONArray jsonArray = subject.serializeAsJson(events);
+        assertThat(jsonArray.length()).isEqualTo(2);
+
+        JSONObject jsonObject1 = jsonArray.getJSONObject(0);
+        assertThat(jsonObject1.getString("name")).isEqualTo("event");
+        assertThat(jsonObject1.getString("name_category")).isEqualTo("event_category");
+
+        JSONObject jsonObject2 = jsonArray.getJSONObject(1);
+        assertThat(jsonObject2.getString("name")).isEqualTo("error_event");
+        assertThat(jsonObject2.getString("name_category")).isEqualTo("error_event_category");
+    }
+
+    private void populateBaseEventFields(BaseEvent mockBaseEvent) {
+        when(mockBaseEvent.getScribeCategory()).thenReturn(BaseEvent.ScribeCategory.EXCHANGE_CLIENT_EVENT);
+        when(mockBaseEvent.getEventName()).thenReturn("event_name");
+        when(mockBaseEvent.getEventCategory()).thenReturn("event_category");
+        when(mockBaseEvent.getSdkProduct()).thenReturn(BaseEvent.SdkProduct.NATIVE);
+        when(mockBaseEvent.getSdkVersion()).thenReturn("3.3.0");
+        when(mockBaseEvent.getAdUnitId()).thenReturn("8cf00598d3664adaaeccd800e46afaca");
+        when(mockBaseEvent.getAdCreativeId()).thenReturn("3c2b887e2c2a4cd0ae6a925440a62f0d");
+        when(mockBaseEvent.getAdType()).thenReturn("html");
+        when(mockBaseEvent.getAdNetworkType()).thenReturn("admob");
+        when(mockBaseEvent.getAdWidthPx()).thenReturn(320.0);
+        when(mockBaseEvent.getAdHeightPx()).thenReturn(50.0);
+        when(mockBaseEvent.getAppPlatform()).thenReturn(BaseEvent.AppPlatform.ANDROID);
+        when(mockBaseEvent.getAppName()).thenReturn("MoPub Sample App");
+        when(mockBaseEvent.getAppPackageName()).thenReturn("com.mopub.simpleadsdemo");
+        when(mockBaseEvent.getAppVersion()).thenReturn("1.0");
+        when(mockBaseEvent.getClientAdvertisingId()).thenReturn("38400000-8cf0-11bd-b23e-10b96e40000d");
+        when(mockBaseEvent.getClientDoNotTrack()).thenReturn(false);
+        when(mockBaseEvent.getDeviceManufacturer()).thenReturn("LGE");
+        when(mockBaseEvent.getDeviceModel()).thenReturn("Nexus 5");
+        when(mockBaseEvent.getDeviceProduct()).thenReturn("hammerhead");
+        when(mockBaseEvent.getDeviceOsVersion()).thenReturn("5.0");
+        when(mockBaseEvent.getDeviceScreenWidthPx()).thenReturn(1080);
+        when(mockBaseEvent.getDeviceScreenHeightPx()).thenReturn(1920);
+        when(mockBaseEvent.getGeoLat()).thenReturn(37.7833);
+        when(mockBaseEvent.getGeoLon()).thenReturn(-122.4183333);
+        when(mockBaseEvent.getGeoAccuracy()).thenReturn(10.0);
+        when(mockBaseEvent.getPerformanceDurationMs()).thenReturn(100.0);
+        when(mockBaseEvent.getNetworkType()).thenReturn(ClientMetadata.MoPubNetworkType.WIFI);
+        when(mockBaseEvent.getNetworkOperatorCode()).thenReturn("310410");
+        when(mockBaseEvent.getNetworkOperatorName()).thenReturn("AT&T");
+        when(mockBaseEvent.getNetworkIsoCountryCode()).thenReturn("US");
+        when(mockBaseEvent.getNetworkSimCode()).thenReturn("network_sim_code");
+        when(mockBaseEvent.getNetworkSimOperatorName()).thenReturn("network_operator_name");
+        when(mockBaseEvent.getNetworkSimIsoCountryCode()).thenReturn("US");
+        when(mockBaseEvent.getRequestId()).thenReturn("b550796074da4559a27c5072dcba2b27");
+        when(mockBaseEvent.getRequestStatusCode()).thenReturn(200);
+        when(mockBaseEvent.getRequestUri()).thenReturn("http://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca");
+        when(mockBaseEvent.getRequestRetries()).thenReturn(0);
+        when(mockBaseEvent.getTimestampUtcMs()).thenReturn(1416447053472L);
+    }
+
+    private void validateBaseEventFields(JSONObject jsonObject) throws Exception {
+        assertThat(jsonObject.getString("_category_")).isEqualTo("exchange_client_event");
+        assertThat(jsonObject.getLong("ts")).isEqualTo(1416447053472L);
+
+        // Name Details
+        assertThat(jsonObject.getString("name")).isEqualTo("event_name");
+        assertThat(jsonObject.getString("name_category")).isEqualTo("event_category");
+
+        // SDK Details
+        assertThat(jsonObject.getInt("sdk_product")).isEqualTo(BaseEvent.SdkProduct.NATIVE.getType());
+        assertThat(jsonObject.getString("sdk_version")).isEqualTo(MoPub.SDK_VERSION);
+
+        // Ad Details
+        assertThat(jsonObject.getString("ad_unit_id")).isEqualTo("8cf00598d3664adaaeccd800e46afaca");
+        assertThat(jsonObject.getString("ad_creative_id")).isEqualTo("3c2b887e2c2a4cd0ae6a925440a62f0d");
+        assertThat(jsonObject.getString("ad_type")).isEqualTo("html");
+        assertThat(jsonObject.getString("ad_network_type")).isEqualTo("admob");
+        assertThat(jsonObject.getDouble("ad_width_px")).isEqualTo(320.0);
+        assertThat(jsonObject.getDouble("ad_height_px")).isEqualTo(50.0);
+
+        // App Details
+        assertThat(jsonObject.getInt("app_platform")).isEqualTo(BaseEvent.AppPlatform.ANDROID.getType());
+        assertThat(jsonObject.getString("app_name")).isEqualTo("MoPub Sample App");
+        assertThat(jsonObject.getString("app_package_name")).isEqualTo("com.mopub.simpleadsdemo");
+        assertThat(jsonObject.getString("app_version")).isEqualTo("1.0");
+
+        // Client Details
+        assertThat(jsonObject.getString("client_advertising_id")).isEqualTo("38400000-8cf0-11bd-b23e-10b96e40000d");
+        assertThat(jsonObject.getBoolean("client_do_not_track")).isEqualTo(false);
+
+        // Device Details
+        assertThat(jsonObject.getString("device_manufacturer")).isEqualTo("LGE");
+        assertThat(jsonObject.getString("device_model")).isEqualTo("Nexus 5");
+        assertThat(jsonObject.getString("device_product")).isEqualTo("hammerhead");
+        assertThat(jsonObject.getString("device_os_version")).isEqualTo("5.0");
+        assertThat(jsonObject.getInt("device_screen_width_px")).isEqualTo(1080);
+        assertThat(jsonObject.getInt("device_screen_height_px")).isEqualTo(1920);
+
+        // Geo Details
+        assertThat(jsonObject.getDouble("geo_lat")).isEqualTo(37.7833);
+        assertThat(jsonObject.getDouble("geo_lon")).isEqualTo(-122.4183333);
+        assertThat(jsonObject.getDouble("geo_accuracy_radius_meters")).isEqualTo(10.0);
+
+        // Performance Details
+        assertThat(jsonObject.getDouble("perf_duration_ms")).isEqualTo(100.0);
+
+        // Network Details
+        assertThat(jsonObject.getInt("network_type")).isEqualTo(ClientMetadata.MoPubNetworkType.WIFI.getId());
+        assertThat(jsonObject.getString("network_operator_code")).isEqualTo("310410");
+        assertThat(jsonObject.getString("network_operator_name")).isEqualTo("AT&T");
+        assertThat(jsonObject.getString("network_iso_country_code")).isEqualTo("US");
+        assertThat(jsonObject.getString("network_sim_code")).isEqualTo("network_sim_code");
+        assertThat(jsonObject.getString("network_sim_operator_name")).isEqualTo("network_operator_name");
+        assertThat(jsonObject.getString("network_sim_iso_country_code")).isEqualTo("US");
+
+        // Request Details
+        assertThat(jsonObject.getString("req_id")).isEqualTo("b550796074da4559a27c5072dcba2b27");
+        assertThat(jsonObject.getInt("req_status_code")).isEqualTo(200);
+        assertThat(jsonObject.getString("req_uri")).isEqualTo("http://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca");
+        assertThat(jsonObject.getInt("req_retries")).isEqualTo(0);
+
+        // Timestamp Details
+        assertThat(jsonObject.getLong("timestamp_client")).isEqualTo(1416447053472L);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/EventTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/EventTest.java
new file mode 100644
index 00000000..a5407f40
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/event/EventTest.java
@@ -0,0 +1,27 @@
+package com.mopub.common.event;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class EventTest {
+
+    private Event subject;
+
+    @Before
+    public void setUp() {
+        subject = new Event.Builder("name", "category").build();
+    }
+
+    @Test
+    public void constructor_shouldCorrectlyAssignScribeCategoryFromBuilder() throws Exception {
+        assertThat(subject.getEventName()).isEqualTo("name");
+        assertThat(subject.getEventCategory()).isEqualTo("category");
+        assertThat(subject.getScribeCategory()).isEqualTo(BaseEvent.ScribeCategory.EXCHANGE_CLIENT_EVENT);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/MoPubEventsTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/MoPubEventsTest.java
new file mode 100644
index 00000000..d7dcfcce
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/event/MoPubEventsTest.java
@@ -0,0 +1,51 @@
+package com.mopub.common.event;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import java.util.ArrayList;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+
+
+@RunWith(SdkTestRunner.class)
+public class MoPubEventsTest {
+
+    @Before
+    public void setUp() {
+        MoPubEvents.setEventDispatcher(null);
+    }
+
+    @Test
+    public void getDispatcher_shouldReturnSingletonEventDispatcherWithNoopEventRecorder() throws Exception {
+        EventDispatcher eventDispatcher = MoPubEvents.getDispatcher();
+        EventDispatcher eventDispatcher2 = MoPubEvents.getDispatcher();
+
+        assertThat(eventDispatcher).isEqualTo(eventDispatcher2);
+
+        Iterable<EventRecorder> eventRecorderIterable = eventDispatcher.getEventRecorders();
+        ArrayList<EventRecorder> eventRecorders = new ArrayList<EventRecorder>();
+        for (EventRecorder recorder : eventRecorderIterable) {
+            eventRecorders.add(recorder);
+        }
+
+        assertThat(eventRecorders.size()).isEqualTo(1);
+        assertThat(eventRecorders.get(0)).isInstanceOf(NoopEventRecorder.class);
+    }
+
+    @Test
+    public void log_shouldDispatchEvent() throws Exception {
+        EventDispatcher mockEventDispatcher = mock(EventDispatcher.class);
+        MoPubEvents.setEventDispatcher(mockEventDispatcher);
+
+        Event mockEvent = mock(Event.class);
+        MoPubEvents.log(mockEvent);
+
+        verify(mockEventDispatcher).dispatch(mockEvent);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/CommonUtils.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/CommonUtils.java
deleted file mode 100644
index b83bf83d..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/CommonUtils.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.mopub.common.util.test.support;
-
-import org.apache.http.HttpRequest;
-import org.robolectric.Robolectric;
-
-import static com.mopub.common.util.ResponseHeader.USER_AGENT;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-public class CommonUtils {
-    public static void assertHttpRequestsMade(final String userAgent, final String... urls) {
-        final int numberOfReceivedHttpRequests = Robolectric.getFakeHttpLayer().getSentHttpRequestInfos().size();
-        assertThat(numberOfReceivedHttpRequests).isEqualTo(urls.length);
-
-        for (final String url : urls) {
-            assertThat(Robolectric.httpRequestWasMade(url)).isTrue();
-        }
-
-        if (userAgent != null) {
-            while (true) {
-                final HttpRequest httpRequest = Robolectric.getNextSentHttpRequest();
-                if (httpRequest == null) {
-                    break;
-                }
-
-                assertThat(httpRequest.getFirstHeader(USER_AGENT.getKey()).getValue())
-                        .isEqualTo(userAgent);
-            }
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoaderTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoaderTest.java
index 1c253ed9..8f8639da 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoaderTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoaderTest.java
@@ -119,4 +119,22 @@ public void load_controllerDestroyed_shouldDoNothing() {
         verifyNoMoreInteractions(adViewController);
         verifyZeroInteractions(moPubView);
     }
+
+    @Test
+    public void load_withNullMoPubView_shouldDoNothing() throws Exception {
+        when(adViewController.getMoPubView()).thenReturn(null);
+
+        adResponse = adResponse.toBuilder()
+                .setAdType("custom")
+                .setCustomEventClassName("custom event name")
+                .setServerExtras(serverExtras)
+                .build();
+
+        AdLoader.CustomEventAdLoader customEventTask = (AdLoader.CustomEventAdLoader) AdLoader.fromAdResponse(adResponse, adViewController);
+
+        customEventTask.load();
+
+        verify(adViewController).getMoPubView();
+        verifyZeroInteractions(moPubView);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdRequestStatusMappingTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdRequestStatusMappingTest.java
new file mode 100644
index 00000000..b82dcbe8
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdRequestStatusMappingTest.java
@@ -0,0 +1,127 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class AdRequestStatusMappingTest {
+    private AdRequestStatusMapping subject;
+    private String key1;
+
+    @Before
+    public void setUp() {
+        subject = new AdRequestStatusMapping();
+        key1 = "adUnitId1";
+    }
+
+    @Test
+    public void markFail_shouldNullOutAllValues() {
+        subject.markFail(key1);
+
+        assertThat(subject.getFailoverUrl(key1)).isNull();
+        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
+        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
+
+        assertThat(subject.canPlay(key1)).isFalse();
+        assertThat(subject.isLoading(key1)).isFalse();
+    }
+
+    @Test
+    public void markLoading_shouldNotUpdateUrls_shouldSetIsLoadingTrue() {
+        subject.markLoading(key1);
+
+        assertThat(subject.getFailoverUrl(key1)).isNull();
+        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
+        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
+
+        assertThat(subject.canPlay(key1)).isFalse();
+        assertThat(subject.isLoading(key1)).isTrue();
+    }
+
+    @Test
+    public void markLoaded_shouldUpdateUrls_shouldSetCanPlayTrue() {
+        subject.markLoaded(key1, "fail", "imp", "click");
+
+        assertThat(subject.getFailoverUrl(key1)).isEqualTo("fail");
+        assertThat(subject.getImpressionTrackerUrlString(key1)).isEqualTo("imp");
+        assertThat(subject.getClickTrackerUrlString(key1)).isEqualTo("click");
+
+        assertThat(subject.canPlay(key1)).isTrue();
+        assertThat(subject.isLoading(key1)).isFalse();
+    }
+
+    @Test
+    public void markLoaded_withNullValues_shouldUpdateUrls_shouldSetCanPlayTrue() {
+        subject.markLoaded(key1, null, null, null);
+
+        assertThat(subject.getFailoverUrl(key1)).isNull();
+        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
+        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
+
+        assertThat(subject.canPlay(key1)).isTrue();
+        assertThat(subject.isLoading(key1)).isFalse();
+    }
+
+    @Test
+    public void markPlayed_afterLoaded_shouldKeepExistingUrls_shouldSetCanPlayFalse() {
+        subject.markLoaded(key1, "fail", "imp", "click");
+        subject.markPlayed(key1);
+
+        assertThat(subject.getFailoverUrl(key1)).isEqualTo("fail");
+        assertThat(subject.getImpressionTrackerUrlString(key1)).isEqualTo("imp");
+        assertThat(subject.getClickTrackerUrlString(key1)).isEqualTo("click");
+
+        assertThat(subject.canPlay(key1)).isFalse();
+        assertThat(subject.isLoading(key1)).isFalse();
+    }
+
+    @Test
+    public void markPlayed_beforeLoaded_shouldSetUrlsNull_shouldSetCanPlayFalse() {
+        subject.markPlayed(key1);
+
+        assertThat(subject.getFailoverUrl(key1)).isNull();
+        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
+        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
+
+        assertThat(subject.canPlay(key1)).isFalse();
+        assertThat(subject.isLoading(key1)).isFalse();
+    }
+
+    @Test
+    public void clearImpression_shouldResetImpressionUrl() {
+        subject.markLoaded(key1, "fail", "imp", "click");
+        subject.clearImpressionUrl(key1);
+
+        assertThat(subject.getFailoverUrl(key1)).isEqualTo("fail");
+        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
+        assertThat(subject.getClickTrackerUrlString(key1)).isEqualTo("click");
+    }
+
+    @Test
+    public void clearclick_shouldResetClickurl() {
+        subject.markLoaded(key1, "fail", "imp", "click");
+        subject.clearClickUrl(key1);
+
+        assertThat(subject.getFailoverUrl(key1)).isEqualTo("fail");
+        assertThat(subject.getImpressionTrackerUrlString(key1)).isEqualTo("imp");
+        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
+    }
+
+    @Test
+    public void allAccessors_withInvalidKey_shouldReturnDefaultsAndNotThrowExceptions() {
+        assertThat(subject.getFailoverUrl(key1)).isNull();
+        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
+        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
+
+        assertThat(subject.canPlay(key1)).isFalse();
+        assertThat(subject.isLoading(key1)).isFalse();
+
+        subject.clearImpressionUrl(key1);
+        subject.clearClickUrl(key1);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
index 4ab76542..20be1827 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
@@ -7,10 +7,12 @@
 import android.view.View;
 import android.widget.FrameLayout;
 
+import com.mopub.common.AdFormat;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Reflection;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.mobileads.test.support.ThreadUtils;
+import com.mopub.network.AdRequest;
 import com.mopub.network.AdResponse;
 import com.mopub.network.Networking;
 import com.mopub.volley.Request;
@@ -56,7 +58,7 @@ public void setup() {
         context = Robolectric.buildActivity(Activity.class).create().get();
         shadowOf(context).grantPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE);
 
-
+        when(mockMoPubView.getAdFormat()).thenReturn(AdFormat.BANNER);
         when(mockMoPubView.getContext()).thenReturn(context);
         Networking.setRequestQueueForTesting(mockRequestQueue);
 
@@ -83,6 +85,42 @@ public void tearDown() throws Exception {
         reset(methodBuilder);
     }
 
+    @Test
+    public void adDidFail_shouldScheduleRefreshTimer_shouldCallMoPubViewAdFailed() throws Exception {
+        Robolectric.pauseMainLooper();
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+
+        subject.adDidFail(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        verify(mockMoPubView).adFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+    }
+
+    @Test
+    public void adDidFail_withNullMoPubView_shouldNotScheduleRefreshTimer_shouldNotCallMoPubViewAdFailed() throws Exception {
+        Robolectric.pauseMainLooper();
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+
+        // This sets the MoPubView to null
+        subject.cleanup();
+        subject.adDidFail(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        verify(mockMoPubView, never()).adFailed(any(MoPubErrorCode.class));
+    }
+
+    @Test
+    public void scheduleRefreshTimer_shouldNotScheduleIfRefreshTimeIsNull() throws Exception {
+        response = response.toBuilder().setRefreshTimeMilliseconds(null).build();
+        subject.onAdLoadSuccess(response);
+        Robolectric.pauseMainLooper();
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+
+        subject.scheduleRefreshTimerIfEnabled();
+
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+    }
+
     @Test
     public void scheduleRefreshTimer_shouldNotScheduleIfRefreshTimeIsZero() {
         response = response.toBuilder().setRefreshTimeMilliseconds(0).build();
@@ -241,6 +279,13 @@ public void registerClick_NoAdResponse_shouldNotAddToQueue() {
         verifyZeroInteractions(mockRequestQueue);
     }
 
+    @Test
+    public void fetchAd_withNullMoPubView_shouldNotMakeRequest() throws Exception {
+        subject.cleanup();
+        subject.fetchAd("adUrl");
+        verify(mockRequestQueue, never()).add(any(AdRequest.class));
+    }
+
     @Test
     public void loadAd_shouldNotLoadWithoutConnectivity() throws Exception {
         ConnectivityManager connectivityManager = (ConnectivityManager) Robolectric.application.getSystemService(Context.CONNECTIVITY_SERVICE);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
index 20b99d54..4d1763d8 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
@@ -1,7 +1,6 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
-import android.os.Build.VERSION_CODES;
 import android.webkit.WebViewClient;
 
 import com.mopub.common.AdReport;
@@ -12,19 +11,13 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.lang.reflect.Method;
 
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.HtmlInterstitialWebView.HtmlInterstitialWebViewListener;
-import static com.mopub.mobileads.HtmlInterstitialWebView.MOPUB_JS_INTERFACE_NAME;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
 import static org.robolectric.Robolectric.shadowOf;
 
@@ -68,56 +61,4 @@ public void htmlBannerWebViewListener_shouldForwardCalls() throws Exception {
         listenerSubject.onClicked();
         verify(customEventInterstitialListener).onInterstitialClicked();
     }
-
-    @Test
-    public void init_shouldAddJavascriptInterface() throws Exception {
-        subject.init(customEventInterstitialListener, isScrollable, clickthroughUrl, redirectUrl);
-
-        Object javascriptInterface = shadowOf(subject).getJavascriptInterface(MOPUB_JS_INTERFACE_NAME);
-        assertThat(javascriptInterface).isNotNull();
-
-        Method fireFinishLoad = javascriptInterface.getClass().getDeclaredMethod("fireFinishLoad");
-        Robolectric.pauseMainLooper();
-        boolean returnValue = (Boolean) fireFinishLoad.invoke(javascriptInterface);
-        assertThat(returnValue).isTrue();
-        verify(customEventInterstitialListener, never()).onInterstitialShown();
-
-        Robolectric.unPauseMainLooper();
-        verify(customEventInterstitialListener).onInterstitialLoaded();
-    }
-
-    @Config(reportSdk = VERSION_CODES.HONEYCOMB)
-    @Test
-    public void destroy_atLeastHoneycomb_shouldRemoveJavascriptInterface() {
-        HtmlInterstitialWebView spySubject = spy(subject);
-
-        spySubject.destroy();
-
-        verify(spySubject).removeJavascriptInterface(MOPUB_JS_INTERFACE_NAME);
-    }
-
-    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
-    @Test
-    public void destroy_beforeHoneycomb_shouldNotRemoveJavascriptInterface() {
-        HtmlInterstitialWebView spySubject = spy(subject);
-
-        spySubject.destroy();
-
-        verify(spySubject, never()).removeJavascriptInterface(MOPUB_JS_INTERFACE_NAME);
-    }
-
-    @Test
-    public void destroy_shouldPreventJavascriptInterfaceFromNotifyingListener() throws Exception{
-        subject.init(customEventInterstitialListener, isScrollable, clickthroughUrl, redirectUrl);
-
-        Object javascriptInterface = shadowOf(subject).getJavascriptInterface(MOPUB_JS_INTERFACE_NAME);
-        assertThat(javascriptInterface).isNotNull();
-
-        subject.setIsDestroyed(true);
-
-        Method fireFinishLoad = javascriptInterface.getClass().getDeclaredMethod("fireFinishLoad");
-        fireFinishLoad.invoke(javascriptInterface);
-
-        verify(customEventInterstitialListener, never()).onInterstitialLoaded();
-    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
index 2b7b32f2..78c49a34 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
@@ -32,7 +32,6 @@
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
 import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
-import static com.mopub.mobileads.HtmlInterstitialWebView.MoPubUriJavascriptFireFinishLoadListener;
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -83,7 +82,6 @@ public void preRenderHtml_shouldPreloadTheHtml() throws Exception {
         MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener, htmlData);
 
         verify(htmlInterstitialWebView).enablePlugins(eq(false));
-        verify(htmlInterstitialWebView).addMoPubUriJavascriptInterface(any(MoPubUriJavascriptFireFinishLoadListener.class));
         verify(htmlInterstitialWebView).loadHtmlResponse(htmlData);
     }
 
@@ -115,19 +113,6 @@ public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFailLoad() throws
         verify(customEventInterstitialListener).onInterstitialFailed(any(MoPubErrorCode.class));
     }
 
-    @Test
-    public void preRenderHtml_shouldHaveAMoPubUriInterfaceThatForwardsOnInterstitialLoaded() throws Exception {
-        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener, null);
-
-        ArgumentCaptor<MoPubUriJavascriptFireFinishLoadListener> moPubUriJavascriptFireFinishLoadListenerCaptor = ArgumentCaptor.forClass(MoPubUriJavascriptFireFinishLoadListener.class);
-        verify(htmlInterstitialWebView).addMoPubUriJavascriptInterface(moPubUriJavascriptFireFinishLoadListenerCaptor.capture());
-        MoPubUriJavascriptFireFinishLoadListener moPubUriJavascriptFireFinishLoadListener = moPubUriJavascriptFireFinishLoadListenerCaptor.getValue();
-
-        moPubUriJavascriptFireFinishLoadListener.onInterstitialLoaded();
-
-        verify(customEventInterstitialListener).onInterstitialLoaded();
-    }
-
     @Test
     public void onCreate_shouldSetContentView() throws Exception {
         subject.onCreate(null);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
new file mode 100644
index 00000000..3de193f4
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -0,0 +1,212 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.AdType;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.network.AdRequest;
+import com.mopub.network.AdResponse;
+import com.mopub.network.Networking;
+import com.mopub.volley.RequestQueue;
+import com.mopub.volley.VolleyError;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+import org.robolectric.Robolectric;
+
+import java.util.Map;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+public class MoPubRewardedVideoManagerTest {
+
+    @Mock
+    RequestQueue mockRequestQueue;
+    @Mock
+    MoPubRewardedVideoListener mockVideoListener;
+
+    AdRequest.Listener requestListener;
+    private AdRequest request;
+    private boolean mLoaded;
+
+    @Before
+    public void setup() {
+        MoPubRewardedVideoManager.init(Robolectric.buildActivity(Activity.class).create().get());
+        MoPubRewardedVideoManager.setVideoListener(mockVideoListener);
+
+        when(mockRequestQueue.add(any(AdRequest.class))).then(new Answer<Object>() {
+            @Override
+            public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
+                request = ((AdRequest) invocationOnMock.getArguments()[0]);
+                requestListener = request.getListener();
+                return null;
+            }
+        });
+
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+    }
+
+    @Test
+    public void onAdSuccess_noCEFound_shouldCallFailCallback() throws Exception {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setAdType(AdType.CUSTOM)
+                .setCustomEventClassName("doesn't_Exist")
+                .build();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit");
+
+        requestListener.onSuccess(testResponse);
+
+        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"), eq(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR));
+        verifyNoMoreInteractions(mockVideoListener);
+    }
+
+    @Test
+    public void onAdSuccess_noCEFound_shouldLoadFailUrl() {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setAdType(AdType.CUSTOM)
+                .setCustomEventClassName("doesn't_Exist")
+                .setFailoverUrl("fail.url")
+                .build();
+
+
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit");
+
+        assertThat(request.getUrl()).contains("testAdUnit");
+        requestListener.onSuccess(testResponse);
+        assertThat(request.getUrl()).isEqualTo("fail.url");
+        // Clear up the static state :(
+        requestListener.onErrorResponse(new VolleyError("reset"));
+    }
+
+    @Test
+    public void onAdSuccess_shouldInstantiateCustomEvent_andLoad() {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .build();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit");
+
+        requestListener.onSuccess(testResponse);
+        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
+    }
+
+    @Test
+    public void playVideo_shouldSetHasVideoFalse() {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .build();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit");
+
+        requestListener.onSuccess(testResponse);
+        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
+        MoPubRewardedVideoManager.showVideo("testAdUnit");
+        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isFalse();
+    }
+    
+    @Test
+    public void playVideo_whenNotHasVideo_shouldFail() {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$NoVideoCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .build();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit");
+
+        requestListener.onSuccess(testResponse);
+        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isFalse();
+        MoPubRewardedVideoManager.showVideo("testAdUnit");
+        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"), eq(MoPubErrorCode.VIDEO_NOT_AVAILABLE));
+    }
+
+    @Test
+    public void onAdFailure_shouldCallFailCallback() {
+        VolleyError e = new VolleyError("testError!");
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit");
+
+        assertThat(request.getUrl()).contains("testAdUnit");
+        requestListener.onErrorResponse(e);
+        verify(mockVideoListener).onRewardedVideoLoadFailure(anyString(), any(MoPubErrorCode.class));
+        verifyNoMoreInteractions(mockVideoListener);
+    }
+
+    public static class TestCustomEvent extends CustomEventRewardedVideo {
+        protected boolean mPlayable = false;
+
+        @Nullable
+        @Override
+        protected CustomEventRewardedVideoListener getVideoListenerForSdk() {
+            return null;
+        }
+
+        @Nullable
+        @Override
+        protected LifecycleListener getLifecycleListener() {
+            return null;
+        }
+
+        @NonNull
+        @Override
+        protected String getAdNetworkId() {
+            return "id!";
+        }
+
+        @Override
+        protected void onInvalidate() {
+            mPlayable = false;
+        }
+
+        @Override
+        protected boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
+                @NonNull final Map<String, Object> localExtras,
+                @NonNull final Map<String, String> serverExtras) throws Exception {
+            return false;
+        }
+
+        @Override
+        protected void loadWithSdkInitialized(@NonNull final Activity activity,
+                @NonNull final Map<String, Object> localExtras,
+                @NonNull final Map<String, String> serverExtras) throws Exception {
+            // Do nothing because robolectric handlers execute immediately.
+            mPlayable = true;
+        }
+
+        @Override
+        protected boolean hasVideoAvailable() {
+            return mPlayable;
+        }
+
+        @Override
+        protected void showVideo() {
+            MoPubRewardedVideoManager.onRewardedVideoStarted(TestCustomEvent.class, "id!");
+        }
+    }
+
+    public static class NoVideoCustomEvent extends TestCustomEvent {
+        @Override
+        protected void loadWithSdkInitialized(@NonNull final Activity activity,
+                @NonNull final Map<String, Object> localExtras,
+                @NonNull final Map<String, String> serverExtras) throws Exception {
+            mPlayable = false;
+        }
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
index d0e20722..296fe5ab 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
@@ -50,7 +50,7 @@
 import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
 import static com.mopub.common.MoPubBrowser.DESTINATION_URL_KEY;
 import static com.mopub.common.VolleyRequestMatcher.isUrl;
-import static com.mopub.common.util.test.support.CommonUtils.assertHttpRequestsMade;
+import static com.mopub.common.util.ResponseHeader.USER_AGENT;
 import static com.mopub.mobileads.BaseVideoViewController.BaseVideoViewControllerListener;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
@@ -1166,4 +1166,25 @@ private VastVideoToolbar getVastVideoToolbar() {
     private ShadowVideoView getShadowVideoView() {
         return shadowOf(subject.getVideoView());
     }
+
+    public static void assertHttpRequestsMade(final String userAgent, final String... urls) {
+        final int numberOfReceivedHttpRequests = Robolectric.getFakeHttpLayer().getSentHttpRequestInfos().size();
+        assertThat(numberOfReceivedHttpRequests).isEqualTo(urls.length);
+
+        for (final String url : urls) {
+            assertThat(Robolectric.httpRequestWasMade(url)).isTrue();
+        }
+
+        if (userAgent != null) {
+            while (true) {
+                final HttpRequest httpRequest = Robolectric.getNextSentHttpRequest();
+                if (httpRequest == null) {
+                    break;
+                }
+
+                assertThat(httpRequest.getFirstHeader(USER_AGENT.getKey()).getValue())
+                        .isEqualTo(userAgent);
+            }
+        }
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
index da49ac52..c5cdd9fd 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
@@ -12,6 +12,7 @@
 import android.provider.Settings;
 import android.telephony.TelephonyManager;
 import android.text.TextUtils;
+
 import com.mopub.common.AdUrlGenerator;
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.GpsHelper;
@@ -24,6 +25,7 @@
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
 import com.mopub.mraid.MraidNativeCommandHandler;
 import com.mopub.network.PlayServicesUrlRewriter;
+
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -45,7 +47,6 @@
 import static android.net.ConnectivityManager.TYPE_MOBILE_SUPL;
 import static android.net.ConnectivityManager.TYPE_WIFI;
 import static android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN;
-import static com.mopub.common.AdUrlGenerator.TwitterAppInstalledStatus;
 import static com.mopub.common.ClientMetadata.MoPubNetworkType;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -84,7 +85,6 @@ public void setup() {
 
     @After
     public void tearDown() throws Exception {
-        AdUrlGenerator.setTwitterAppInstalledStatus(TwitterAppInstalledStatus.UNKNOWN);
         reset(methodBuilder);
     }
 
@@ -285,45 +285,6 @@ public void generateAdUrl_whenNoNetworkPermission_shouldGenerateUnknownNetworkTy
         assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.UNKNOWN).build());
     }
 
-    @Test
-    public void generateAdUrl_whenTwitterIsNotInstalled_shouldProcessAndNotSetTwitterInstallStatusOnFirstRequest() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
-
-        WebViewAdUrlGenerator spySubject = Mockito.spy(subject);
-        AdUrlGenerator.setTwitterAppInstalledStatus(TwitterAppInstalledStatus.UNKNOWN);
-        doReturn(TwitterAppInstalledStatus.NOT_INSTALLED).when(spySubject).getTwitterAppInstallStatus();
-
-        String adUrl = spySubject.generateUrlString("ads.mopub.com");
-
-        assertThat(adUrl).isEqualTo(urlBuilder.withTwitterAppInstalledStatus(TwitterAppInstalledStatus.NOT_INSTALLED).build());
-    }
-
-    @Test
-    public void generateAdUrl_whenTwitterIsInstalled_shouldProcessAndSetTwitterInstallStatusOnFirstRequest() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
-
-        WebViewAdUrlGenerator spySubject = Mockito.spy(subject);
-        AdUrlGenerator.setTwitterAppInstalledStatus(TwitterAppInstalledStatus.UNKNOWN);
-        doReturn(TwitterAppInstalledStatus.INSTALLED).when(spySubject).getTwitterAppInstallStatus();
-
-        String adUrl = spySubject.generateUrlString("ads.mopub.com");
-
-        assertThat(adUrl).isEqualTo(urlBuilder.withTwitterAppInstalledStatus(TwitterAppInstalledStatus.INSTALLED).build());
-    }
-
-    @Test
-    public void generateAdUrl_shouldNotProcessTwitterInstallStatusIfStatusIsAlreadySet() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
-
-        WebViewAdUrlGenerator spySubject = Mockito.spy(subject);
-        AdUrlGenerator.setTwitterAppInstalledStatus(TwitterAppInstalledStatus.NOT_INSTALLED);
-        doReturn(TwitterAppInstalledStatus.INSTALLED).when(spySubject).getTwitterAppInstallStatus();
-
-        String adUrl = spySubject.generateUrlString("ads.mopub.com");
-
-        assertThat(adUrl).isEqualTo(urlBuilder.withTwitterAppInstalledStatus(TwitterAppInstalledStatus.NOT_INSTALLED).build());
-    }
-
     @Test
     public void generateAdUrl_shouldTolerateNullActiveNetwork() throws Exception {
         AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
@@ -497,7 +458,6 @@ private String generateMinimumUrlString() {
         private String carrierName = "";
         private String dnt = "";
         private MoPubNetworkType networkType = MoPubNetworkType.MOBILE;
-        private TwitterAppInstalledStatus twitterAppInstalledStatus = TwitterAppInstalledStatus.UNKNOWN;
         private int externalStoragePermission;
 
         public AdUrlBuilder(String expectedUdid) {
@@ -526,7 +486,6 @@ public String build() {
                     "&ct=" + networkType +
                     "&av=1.0" +
                     "&android_perms_ext_storage=" + externalStoragePermission +
-                    ((twitterAppInstalledStatus == TwitterAppInstalledStatus.INSTALLED) ? "&ts=1" : "") +
                     "&udid=" + PlayServicesUrlRewriter.UDID_TEMPLATE +
                     "&dnt=" + PlayServicesUrlRewriter.DO_NOT_TRACK_TEMPLATE;
 
@@ -578,11 +537,6 @@ public AdUrlBuilder withExternalStoragePermission(boolean enabled) {
             return this;
         }
 
-        public AdUrlBuilder withTwitterAppInstalledStatus(TwitterAppInstalledStatus status) {
-            this.twitterAppInstalledStatus = status;
-            return this;
-        }
-
         public AdUrlBuilder withDnt(boolean dnt) {
             if (dnt) {
                 this.dnt = "1";
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java
new file mode 100644
index 00000000..712eef93
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java
@@ -0,0 +1,42 @@
+package com.mopub.mobileads.util;
+
+import android.annotation.TargetApi;
+import android.os.Build;
+import android.webkit.WebView;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+public class WebViewsTest {
+
+    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
+    @Test
+    public void pause_withIsFinishingTrue_shouldStopLoading_shouldLoadBlankUrl_shouldPauseWebView() throws Exception {
+        WebView mockWebView = mock(WebView.class);
+
+        WebViews.onPause(mockWebView, true);
+
+        verify(mockWebView).stopLoading();
+        verify(mockWebView).loadUrl("");
+        verify(mockWebView).onPause();
+    }
+
+    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
+    @Test
+    public void pause_withIsFinishingFalse_shouldPauseWebView() throws Exception {
+        WebView mockWebView = mock(WebView.class);
+
+        WebViews.onPause(mockWebView, false);
+
+        verify(mockWebView, never()).stopLoading();
+        verify(mockWebView, never()).loadUrl("");
+        verify(mockWebView).onPause();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
index 8c4ddcda..de6f3239 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
@@ -106,13 +106,31 @@ public void handleShouldOverrideUrl_invalidUrl_shouldFireErrorEvent() {
     }
 
     @Test
-    public void handleShouldOverrideUrl_mopubUrl_shouldNeverLoadUrl_shouldReturnTrue() {
+    public void handleShouldOverrideUrl_mopubNonFailLoadUrl_shouldNeverLoadUrl_shouldReturnTrue() {
         boolean result = subjectBanner.handleShouldOverrideUrl("mopub://special-mopub-command");
 
         verify(mockBannerWebView, never()).loadUrl(anyString());
         assertThat(result).isTrue();
     }
 
+    @Test
+    public void handleShouldOverrideUrl_mopubFailLoadUrl_whenBanner_shouldNotifyListenerOfOnPageFailedToLoad_shouldReturnTrue() {
+        boolean result = subjectBanner.handleShouldOverrideUrl("mopub://failLoad");
+
+        verify(mockBridgeListener).onPageFailedToLoad();
+        verify(mockBannerWebView, never()).loadUrl(anyString());
+        assertThat(result).isTrue();
+    }
+
+    @Test
+    public void handleShouldOverrideUrl_mopubFailLoadUrl_whenInterstitial_shouldNotNotifyListenerOfOnPageFailedToLoad_shouldReturnTrue() {
+        boolean result = subjectInterstitial.handleShouldOverrideUrl("mopub://failLoad");
+
+        verify(mockBridgeListener, never()).onPageFailedToLoad();
+        verify(mockBannerWebView, never()).loadUrl(anyString());
+        assertThat(result).isTrue();
+    }
+
     @Test
     public void handleShouldOverrideUrl_mraidUrl_invalid_shouldFireErrorEvent_shouldReturnTrue() {
         boolean result = subjectBanner.handleShouldOverrideUrl("mraid://bad-command");
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
index 69c2cd46..5ae97df5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
@@ -65,6 +65,7 @@
     @Mock private UseCustomCloseListener mockUseCustomCloseListener;
     @Mock private OrientationBroadcastReceiver mockOrientationBroadcastReceiver;
     @Captor private ArgumentCaptor<MraidBridgeListener> bridgeListenerCaptor;
+    @Captor private ArgumentCaptor<MraidBridgeListener> twoPartBridgeListenerCaptor;
 
     private Activity activity;
     private FrameLayout rootView;
@@ -103,6 +104,7 @@ public Void answer(final InvocationOnMock invocation) throws Throwable {
         subject.loadContent("fake_html_data");
 
         verify(mockBridge).setMraidBridgeListener(bridgeListenerCaptor.capture());
+        verify(mockTwoPartBridge).setMraidBridgeListener(twoPartBridgeListenerCaptor.capture());
     }
 
     @Test
@@ -151,6 +153,20 @@ public void handlePageLoad_thenDestroy_shouldCancelLastRequest() {
         verify(mockScreenMetricsWaiter, times(2)).cancelLastRequest();
     }
 
+    @Test
+    public void onPageFailedToLoad_shouldNotifyListener() {
+        bridgeListenerCaptor.getValue().onPageFailedToLoad();
+
+        verify(mockMraidListener).onFailedToLoad();
+    }
+
+    @Test
+    public void onPageFailedToLoad_withTwoPartBridge_shouldNotNotifyListener() {
+        twoPartBridgeListenerCaptor.getValue().onPageFailedToLoad();
+
+        verify(mockMraidListener, never()).onFailedToLoad();
+    }
+
     @Test
     public void bridgeOnVisibilityChanged_withTwoPartBridgeAttached_shouldNotNotifyVisibility() {
         when(mockTwoPartBridge.isAttached()).thenReturn(true);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
index 4eac7073..7d7f96bb 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
@@ -7,9 +7,11 @@
 import android.net.Uri;
 import android.telephony.TelephonyManager;
 import android.text.TextUtils;
+
 import com.mopub.common.MoPub;
-import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
+import com.mopub.common.test.support.SdkTestRunner;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -17,7 +19,10 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLocationManager;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.EnumSet;
+import java.util.List;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
index e666c2ae..e0e3e524 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 import android.os.Build.VERSION_CODES;
+
 import com.mopub.common.DownloadResponse;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
@@ -10,6 +11,7 @@
 import com.mopub.volley.Request;
 import com.mopub.volley.RequestQueue;
 import com.mopub.volley.VolleyError;
+
 import org.apache.http.HttpStatus;
 import org.junit.Before;
 import org.junit.Test;
diff --git a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
index ebc45792..c9eaea73 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
@@ -35,7 +35,7 @@
 
     @Before
     public void setup() {
-        subject = new AdRequest("testUrl", AdFormat.NATIVE, mockListener);
+        subject = new AdRequest("testUrl", AdFormat.NATIVE, "testAdUnitId", mockListener);
         defaultHeaders = new HashMap<String, String>();
         defaultHeaders.put(ResponseHeader.SCROLLABLE.getKey(), "0");
         defaultHeaders.put(ResponseHeader.REDIRECT_URL.getKey(), "redirect");
@@ -124,7 +124,7 @@ public void parseNetworkResponse_withBadJSON_shouldReturnError() {
         NetworkResponse badNativeNetworkResponse = new NetworkResponse(200,
                 "{[abc}".getBytes(Charset.defaultCharset()),
                 defaultHeaders, false);
-        subject = new AdRequest("testUrl", AdFormat.NATIVE, mockListener);
+        subject = new AdRequest("testUrl", AdFormat.NATIVE, "testAdUnitId", mockListener);
 
         final Response<AdResponse> response = subject.parseNetworkResponse(badNativeNetworkResponse);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
index 90eeeca3..20ac8c36 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
@@ -4,7 +4,6 @@
 import android.content.Context;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.test.support.CommonUtils;
 import com.mopub.volley.RequestQueue;
 
 import org.junit.Before;
@@ -45,7 +44,6 @@ public void makeTrackingHttpRequest_withNullUrl_shouldNotMakeTrackingHttpRequest
         TrackingRequest.makeTrackingHttpRequest((String) null, context);
 
         verify(mockRequestQueue, never()).add(any(TrackingRequest.class));
-        CommonUtils.assertHttpRequestsMade(null);
     }
 
     @Test
@@ -53,6 +51,5 @@ public void makeTrackingHttpRequest_withNullContext_shouldNotMakeTrackingHttpReq
         TrackingRequest.makeTrackingHttpRequest(url, null);
 
         verify(mockRequestQueue, never()).add(any(TrackingRequest.class));
-        CommonUtils.assertHttpRequestsMade(null);
     }
 }
diff --git a/pom.xml b/pom.xml
index 7d637a7c..8889a0d3 100644
--- a/pom.xml
+++ b/pom.xml
@@ -16,6 +16,12 @@
     <packaging>pom</packaging>
 
     <repositories>
+        <repository>
+            <id>jcenter</id>
+            <name>JCenter</name>
+            <url>http://jcenter.bintray.com</url>
+        </repository>
+
         <repository>
             <id>andsupport</id>
             <name>Android Support</name>
