diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
index a4e42464..24472ca3 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
@@ -301,7 +301,9 @@ protected void addBaseParams(final ClientMetadata clientMetadata) {
 
         if (MoPub.canCollectPersonalInformation()) {
             setUserDataKeywords(mUserDataKeywords);
-            setLocation(mLocation);
+            if (MopubConfig.INCLUDE_LOCATION_IN_REQUEST) {
+                setLocation(mLocation);
+            }
         }
 
         setTimezone(DateAndTime.getTimeZoneOffsetString());
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
index 010d8b59..99af42d0 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
@@ -19,9 +19,11 @@
 import com.mopub.common.util.Dips;
 
 import java.util.Locale;
+import java.util.concurrent.TimeUnit;
 
-import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static android.content.pm.PackageManager.NameNotFoundException;
+import static java.util.concurrent.TimeUnit.MILLISECONDS;
+import static java.util.concurrent.TimeUnit.MINUTES;
 
 /**
  * Singleton that caches Client objects so they will be available to background threads.
@@ -99,6 +101,12 @@ public int getId() {
     private final Context mContext;
     private final ConnectivityManager mConnectivityManager;
 
+    // Lazy client values
+    private Point mDeviceDimensions = null;
+
+    private MoPubNetworkType mMopubNetworkType = null;
+    private long mmMopubNetworkTypeTs = 0;
+
     /**
      * Returns the singleton ClientMetadata object, using the context to obtain data if necessary.
      */
@@ -233,13 +241,24 @@ public String getOrientationString() {
 
 
     public MoPubNetworkType getActiveNetworkType() {
-        int networkType = UNKNOWN_NETWORK;
-        if (DeviceUtils.isPermissionGranted(mContext, ACCESS_NETWORK_STATE)) {
-            NetworkInfo activeNetworkInfo = mConnectivityManager.getActiveNetworkInfo();
-            networkType = activeNetworkInfo != null
-                    ? activeNetworkInfo.getType() : UNKNOWN_NETWORK;
+        if (mMopubNetworkType == null
+            || mMopubNetworkType == MoPubNetworkType.UNKNOWN
+            || mmMopubNetworkTypeTs + MILLISECONDS.convert(1, MINUTES) < System.currentTimeMillis()) {
+            int networkType = UNKNOWN_NETWORK;
+            try {
+                NetworkInfo activeNetworkInfo = mConnectivityManager.getActiveNetworkInfo();
+                if (activeNetworkInfo != null) {
+                    networkType = activeNetworkInfo.getType();
+                }
+            } catch (Throwable ignored) {
+            }
+            MoPubNetworkType moPubNetworkType = MoPubNetworkType.fromAndroidNetworkType(networkType);
+            synchronized (this) {
+                mMopubNetworkType = moPubNetworkType;
+                mmMopubNetworkTypeTs = System.currentTimeMillis();
+            }
         }
-        return MoPubNetworkType.fromAndroidNetworkType(networkType);
+        return mMopubNetworkType;
     }
 
 
@@ -362,10 +381,21 @@ public int getDeviceScreenHeightDip() {
      * @return Width and height of the device. This is 0 by 0 if there is no context.
      */
     public Point getDeviceDimensions() {
-        if (Preconditions.NoThrow.checkNotNull(mContext)) {
-            return DeviceUtils.getDeviceDimensions(mContext);
+        if (mDeviceDimensions == null) {
+            Point deviceDimension;
+            if (Preconditions.NoThrow.checkNotNull(mContext)) {
+                deviceDimension = DeviceUtils.getDeviceDimensions(mContext);
+            } else {
+                deviceDimension = new Point(0, 0);
+            }
+
+            synchronized (this) {
+                if (mDeviceDimensions == null) {
+                    mDeviceDimensions = deviceDimension;
+                }
+            }
         }
-        return new Point(0, 0);
+        return mDeviceDimensions;
     }
 
     /**
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java
index 41e1c558..2ea69204 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java
@@ -2,7 +2,9 @@
 
 import android.content.Context;
 import android.os.AsyncTask;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.util.Pair;
 
 import com.mopub.common.factories.MethodBuilderFactory;
 import com.mopub.common.logging.MoPubLog;
@@ -21,6 +23,10 @@
     private static String sPlayServicesUtilClassName = "com.google.android.gms.common.GooglePlayServicesUtil";
     private static String sAdvertisingIdClientClassName = "com.google.android.gms.ads.identifier.AdvertisingIdClient";
 
+    private static Boolean sIsPlayServicesAvailable = null;
+
+    private static Pair<Boolean, Class> sAdvertisingIdClientClassInfo = null;
+
     public static class AdvertisingInfo {
         public final String advertisingId;
         public final boolean limitAdTracking;
@@ -35,19 +41,44 @@ public AdvertisingInfo(String adId, boolean limitAdTrackingEnabled) {
         void onFetchAdInfoCompleted();
     }
 
+    @NonNull
+    private static Pair<Boolean, Class> getAdvertisingIdClientClassInfo() {
+        if (sAdvertisingIdClientClassInfo == null) {
+            synchronized (GpsHelper.class) {
+                if (sAdvertisingIdClientClassInfo == null) {
+                    try {
+                        Class klass = Class.forName(sAdvertisingIdClientClassName);
+                        sAdvertisingIdClientClassInfo = Pair.create(true, klass);
+                    } catch (ClassNotFoundException e) {
+                        sAdvertisingIdClientClassInfo = Pair.create(false, null);
+                    }
+                }
+            }
+        }
+        return sAdvertisingIdClientClassInfo;
+    }
+
     public static boolean isPlayServicesAvailable(final Context context) {
-        try {
-            MethodBuilder methodBuilder = MethodBuilderFactory.create(null, "isGooglePlayServicesAvailable")
+        if (sIsPlayServicesAvailable == null) {
+            boolean isAvailable;
+            try {
+                MethodBuilder methodBuilder = MethodBuilderFactory.create(null, "isGooglePlayServicesAvailable")
                     .setStatic(Class.forName(sPlayServicesUtilClassName))
                     .addParam(Context.class, context);
 
-            Object result = methodBuilder.execute();
+                Object result = methodBuilder.execute();
+                isAvailable = (result != null && (Integer) result == GOOGLE_PLAY_SUCCESS_CODE);
+            } catch (Exception exception) {
+                isAvailable = false;
+            }
 
-            Integer intResult = (Integer) result;
-            return (intResult != null && (intResult == GOOGLE_PLAY_SUCCESS_CODE || intResult == SERVICE_VERSION_UPDATE_REQUIRED));
-        } catch (Exception exception) {
-            return false;
+            synchronized (GpsHelper.class) {
+                if (sIsPlayServicesAvailable == null) {
+                    sIsPlayServicesAvailable = isAvailable;
+                }
+            }
         }
+        return sIsPlayServicesAvailable;
     }
 
     static public boolean isLimitAdTrackingEnabled(Context context) {
@@ -87,7 +118,7 @@ static public AdvertisingInfo fetchAdvertisingInfoSync(final Context context) {
         Object adInfo = null;
         try {
             MethodBuilder methodBuilder = MethodBuilderFactory.create(null, "getAdvertisingIdInfo")
-                    .setStatic(Class.forName(sAdvertisingIdClientClassName))
+                    .setStatic(getAdvertisingIdClientClassInfo().second)
                     .addParam(Context.class, context);
 
             adInfo = methodBuilder.execute();
@@ -103,7 +134,7 @@ static public AdvertisingInfo fetchAdvertisingInfoSync(final Context context) {
     }
 
     static private void internalFetchAdvertisingInfoAsync(final Context context, final GpsHelperListener gpsHelperListener) {
-        if (!classFound(sAdvertisingIdClientClassName)) {
+        if (!getAdvertisingIdClientClassInfo().first) {
             if (gpsHelperListener != null) {
                 gpsHelperListener.onFetchAdInfoCompleted();
             }
@@ -139,7 +170,7 @@ protected Void doInBackground(Void... voids) {
                 }
 
                 MethodBuilder methodBuilder = MethodBuilderFactory.create(null, "getAdvertisingIdInfo")
-                        .setStatic(Class.forName(sAdvertisingIdClientClassName))
+                        .setStatic(getAdvertisingIdClientClassInfo().second)
                         .addParam(Context.class, context);
 
                 Object adInfo = methodBuilder.execute();
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MopubConfig.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MopubConfig.java
new file mode 100644
index 00000000..ddb4e267
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MopubConfig.java
@@ -0,0 +1,12 @@
+package com.mopub.common;
+
+/**
+ * MopubConfig
+ * Created by liuwei on 3/20/18.
+ */
+public class MopubConfig {
+  public static boolean CHECK_ACTIVITY_DECLARED = false;
+  public static boolean CHECK_NETWORK_AVAILABLE = false;
+
+  public static boolean INCLUDE_LOCATION_IN_REQUEST = false;
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
index a97f8e42..51c9be3a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -17,6 +17,7 @@
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.Constants;
 import com.mopub.common.MoPub;
+import com.mopub.common.MopubConfig;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
@@ -243,7 +244,7 @@ private void internalLoadAd() {
             return;
         }
 
-        if (!isNetworkAvailable()) {
+        if (MopubConfig.CHECK_NETWORK_AVAILABLE && !isNetworkAvailable()) {
             MoPubLog.d("Can't load an ad because there is no network connectivity.");
             scheduleRefreshTimerIfEnabled();
             return;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
index 4f6fd25e..bfc42b18 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -16,6 +16,7 @@
 import com.mopub.common.AdFormat;
 import com.mopub.common.AdReport;
 import com.mopub.common.MoPub;
+import com.mopub.common.MopubConfig;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.ManifestUtils;
 import com.mopub.common.util.Reflection;
@@ -57,7 +58,9 @@ public MoPubView(Context context) {
     public MoPubView(Context context, AttributeSet attrs) {
         super(context, attrs);
 
-        ManifestUtils.checkWebViewActivitiesDeclared(context);
+        if (MopubConfig.CHECK_ACTIVITY_DECLARED) {
+            ManifestUtils.checkWebViewActivitiesDeclared(context);
+        }
 
         mContext = context;
         mScreenVisibility = getVisibility();
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
index f6a7bf91..8d2d830d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
@@ -103,7 +103,6 @@ public static void makeTrackingHttpRequest(@Nullable final Iterable<String> urls
             return;
         }
 
-        final RequestQueue requestQueue = Networking.getRequestQueue(context);
         for (final String url : urls) {
             if (TextUtils.isEmpty(url)) {
                 continue;
@@ -127,8 +126,8 @@ public void onErrorResponse(final VolleyError volleyError) {
                 }
             };
             final TrackingRequest trackingRequest = new TrackingRequest(context, url,
-                    internalListener);
-            requestQueue.add(trackingRequest);
+                internalListener);
+            Networking.getRequestQueue(context).add(trackingRequest);
         }
     }
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
index 68209727..c6a809c4 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
@@ -172,18 +172,7 @@ void loadAd() throws IllegalArgumentException {
                 }
             }
             setPrivacyInformationIconClickThroughUrl(PRIVACY_INFORMATION_CLICKTHROUGH_URL);
-
-            preCacheImages(mContext, getAllImageUrls(), new ImageListener() {
-                @Override
-                public void onImagesCached() {
-                    mCustomEventNativeListener.onNativeAdLoaded(MoPubStaticNativeAd.this);
-                }
-
-                @Override
-                public void onImagesFailedToCache(final NativeErrorCode errorCode) {
-                    mCustomEventNativeListener.onNativeAdFailed(errorCode);
-                }
-            });
+            mCustomEventNativeListener.onNativeAdLoaded(this); // prefetch images is done in AdUnitManager
         }
 
         private boolean containsRequiredKeys(@NonNull final JSONObject jsonObject) {
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNative.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNative.java
index 9fe1ae15..af31f012 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNative.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNative.java
@@ -6,6 +6,7 @@
 
 import com.mopub.common.AdFormat;
 import com.mopub.common.Constants;
+import com.mopub.common.MopubConfig;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
@@ -80,7 +81,9 @@ public MoPubNative(@NonNull final Context context,
         Preconditions.checkNotNull(adRendererRegistry, "AdRendererRegistry may not be null.");
         Preconditions.checkNotNull(moPubNativeNetworkListener, "MoPubNativeNetworkListener may not be null.");
 
-        ManifestUtils.checkNativeActivitiesDeclared(context);
+        if (MopubConfig.CHECK_ACTIVITY_DECLARED) {
+            ManifestUtils.checkNativeActivitiesDeclared(context);
+        }
 
         mContext = new WeakReference<Context>(context);
         mAdUnitId = adUnitId;
@@ -140,7 +143,7 @@ public void makeRequest(@Nullable final RequestParameters requestParameters,
             return;
         }
 
-        if (!DeviceUtils.isNetworkAvailable(context)) {
+        if (MopubConfig.CHECK_NETWORK_AVAILABLE && !DeviceUtils.isNetworkAvailable(context)) {
             mMoPubNativeNetworkListener.onNativeFail(CONNECTION_ERROR);
             return;
         }
@@ -264,7 +267,7 @@ void onAdError(@NonNull final VolleyError volleyError) {
             NetworkResponse response = volleyError.networkResponse;
             if (response != null && response.statusCode >= 500 && response.statusCode < 600) {
                 mMoPubNativeNetworkListener.onNativeFail(SERVER_ERROR_RESPONSE_CODE);
-            } else if (response == null && !DeviceUtils.isNetworkAvailable(mContext.get())) {
+            } else if (response == null && MopubConfig.CHECK_NETWORK_AVAILABLE && !DeviceUtils.isNetworkAvailable(mContext.get())) {
                 MoPubLog.c(String.valueOf(MoPubErrorCode.NO_CONNECTION.toString()));
                 mMoPubNativeNetworkListener.onNativeFail(CONNECTION_ERROR);
             } else {
diff --git a/mopub-sdk/publisher.gradle b/mopub-sdk/publisher.gradle
index 1fd54c43..9c465b46 100644
--- a/mopub-sdk/publisher.gradle
+++ b/mopub-sdk/publisher.gradle
@@ -1,62 +1,62 @@
-apply plugin: 'com.android.library'
-apply plugin: 'com.novoda.bintray-release'
-
-def siteUrl = 'https://github.com/mopub/mopub-android-sdk'
-def gitUrl = 'https://github.com/mopub/mopub-android-sdk.git'
-def bintrayRepo = 'mopub-android-sdk'
-def bintrayUserOrg = 'mopub'
-// Put your credentials (bintray.user, bintray.apikey) in ~/.gradle/gradle.properties
-
-if (JavaVersion.current().isJava8Compatible()) {
-    allprojects {
-        tasks.withType(Javadoc) {
-            // The javadoc task in Java 8 is too strict and throws unnecessary syntax errors
-            // if our comments fail to abide by the new standard.
-            options.addStringOption('Xdoclint:none', '-quiet')
-        }
-    }
-}
-
-android.libraryVariants.all { variant ->
-    def name = variant.buildType.name
-    def task = project.tasks.create "jar${name.capitalize()}", Jar
-
-    task.dependsOn variant.javaCompile
-    task.from variant.javaCompile.destinationDir
-    artifacts.add('archives', task)
-}
-
-android.libraryVariants.all { variant ->
-    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
-        title = project.ext.displayName
-        description "Generates Javadoc for $variant.name."
-        source = variant.javaCompile.source
-        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
-        classpath += configurations.compile
-
-        options {
-            links "http://docs.oracle.com/javase/7/docs/api/"
-            linksOffline "https://developer.android.com/reference","${android.sdkDirectory}/docs/reference"
-        }
-
-        exclude '**/BuildConfig.java'
-        exclude '**/R.java'
-    }
-}
-
-publish {
-    repoName = bintrayRepo
-    userOrg = bintrayUserOrg
-    groupId = project.group
-    artifactId = project.ext.projectName
-    uploadName = project.ext.uploadName
-    version = project.version
-    description = project.description
-    website = siteUrl
-    repository = gitUrl
-
-    bintrayUser = project.hasProperty("bintray.user") ? project.getProperty("bintray.user") : ""
-    bintrayKey = project.hasProperty("bintray.apikey") ? project.getProperty("bintray.apikey") : ""
-
-    dryRun = false
-}
+//apply plugin: 'com.android.library'
+//apply plugin: 'com.novoda.bintray-release'
+//
+//def siteUrl = 'https://github.com/mopub/mopub-android-sdk'
+//def gitUrl = 'https://github.com/mopub/mopub-android-sdk.git'
+//def bintrayRepo = 'mopub-android-sdk'
+//def bintrayUserOrg = 'mopub'
+//// Put your credentials (bintray.user, bintray.apikey) in ~/.gradle/gradle.properties
+//
+//if (JavaVersion.current().isJava8Compatible()) {
+//    allprojects {
+//        tasks.withType(Javadoc) {
+//            // The javadoc task in Java 8 is too strict and throws unnecessary syntax errors
+//            // if our comments fail to abide by the new standard.
+//            options.addStringOption('Xdoclint:none', '-quiet')
+//        }
+//    }
+//}
+//
+//android.libraryVariants.all { variant ->
+//    def name = variant.buildType.name
+//    def task = project.tasks.create "jar${name.capitalize()}", Jar
+//
+//    task.dependsOn variant.javaCompile
+//    task.from variant.javaCompile.destinationDir
+//    artifacts.add('archives', task)
+//}
+//
+//android.libraryVariants.all { variant ->
+//    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
+//        title = project.ext.displayName
+//        description "Generates Javadoc for $variant.name."
+//        source = variant.javaCompile.source
+//        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
+//        classpath += configurations.compile
+//
+//        options {
+//            links "http://docs.oracle.com/javase/7/docs/api/"
+//            linksOffline "https://developer.android.com/reference","${android.sdkDirectory}/docs/reference"
+//        }
+//
+//        exclude '**/BuildConfig.java'
+//        exclude '**/R.java'
+//    }
+//}
+//
+//publish {
+//    repoName = bintrayRepo
+//    userOrg = bintrayUserOrg
+//    groupId = project.group
+//    artifactId = project.ext.projectName
+//    uploadName = project.ext.uploadName
+//    version = project.version
+//    description = project.description
+//    website = siteUrl
+//    repository = gitUrl
+//
+//    bintrayUser = project.hasProperty("bintray.user") ? project.getProperty("bintray.user") : ""
+//    bintrayKey = project.hasProperty("bintray.apikey") ? project.getProperty("bintray.apikey") : ""
+//
+//    dryRun = false
+//}
